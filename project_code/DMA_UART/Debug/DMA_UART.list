
DMA_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a10c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b0  0801a2a0  0801a2a0  0002a2a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801aa50  0801aa50  000323e0  2**0
                  CONTENTS
  4 .ARM          00000008  0801aa50  0801aa50  0002aa50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801aa58  0801aa58  000323e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801aa58  0801aa58  0002aa58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801aa5c  0801aa5c  0002aa5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000023e0  20000000  0801aa60  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000bde8  200023e0  0801ce40  000323e0  2**3
                  ALLOC
 10 ._user_heap_stack 000063c0  2000e1c8  0801ce40  0003e1c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000323e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000312b8  00000000  00000000  00032410  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000065c3  00000000  00000000  000636c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001dc8  00000000  00000000  00069c90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001b80  00000000  00000000  0006ba58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a05d  00000000  00000000  0006d5d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001fefe  00000000  00000000  00097635  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ddd06  00000000  00000000  000b7533  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00195239  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008b90  00000000  00000000  001952b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200023e0 	.word	0x200023e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801a284 	.word	0x0801a284

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200023e4 	.word	0x200023e4
 80001cc:	0801a284 	.word	0x0801a284

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <packetRead>:
extern double DOWN_HEIGHT_ON_SLOT 	    = 126.5f;

Position_DataType position_type;
SCARA_Gcode_Cor_TypeDef	Gcode_Cor[1000];
uint16_t point_counter = 0;
Robot_CommandTypedef 	packetRead	(uint8_t *message, int32_t length, int32_t *id_command, DUTY_Command_TypeDef *duty_cmd) {
 8000f88:	b590      	push	{r4, r7, lr}
 8000f8a:	b08d      	sub	sp, #52	; 0x34
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
 8000f94:	603b      	str	r3, [r7, #0]
	Transfer_Protocol protocol_id = message[0];
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    duty_cmd->id_command = message[1];
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	609a      	str	r2, [r3, #8]
	int32_t temp_pointer = 2;
 8000faa:	2302      	movs	r3, #2
 8000fac:	62fb      	str	r3, [r7, #44]	; 0x2c
    switch(protocol_id) 
 8000fae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d004      	beq.n	8000fc0 <packetRead+0x38>
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	f000 813e 	beq.w	8001238 <packetRead+0x2b0>
 8000fbc:	f000 bf1d 	b.w	8001dfa <packetRead+0xe72>
    {
        // reserved for Gcode file transfer
        case FILE_TRANSMISION:
        {
        	temp_pointer = 1;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	62fb      	str	r3, [r7, #44]	; 0x2c

        	do {
        		Gcode_Packet_Command_TypeDef move_type 	 = message[temp_pointer] & 0x0f;
 8000fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	4413      	add	r3, r2
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	f003 030f 	and.w	r3, r3, #15
 8000fd0:	74bb      	strb	r3, [r7, #18]
				switch (move_type){
 8000fd2:	7cbb      	ldrb	r3, [r7, #18]
 8000fd4:	2b03      	cmp	r3, #3
 8000fd6:	f200 8127 	bhi.w	8001228 <packetRead+0x2a0>
 8000fda:	a201      	add	r2, pc, #4	; (adr r2, 8000fe0 <packetRead+0x58>)
 8000fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe0:	08000ff1 	.word	0x08000ff1
 8000fe4:	08001061 	.word	0x08001061
 8000fe8:	08001121 	.word	0x08001121
 8000fec:	08001121 	.word	0x08001121
				case FIRST_PACKET:{
					temp_pointer++;
 8000ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
					down_z_height = (double)B2I(temp_pointer)*COR_INVERSE_SCALE; temp_pointer+=4;
 8000ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ff8:	68fa      	ldr	r2, [r7, #12]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff fa90 	bl	8000524 <__aeabi_i2d>
 8001004:	a3b2      	add	r3, pc, #712	; (adr r3, 80012d0 <packetRead+0x348>)
 8001006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100a:	f7ff faf5 	bl	80005f8 <__aeabi_dmul>
 800100e:	4603      	mov	r3, r0
 8001010:	460c      	mov	r4, r1
 8001012:	4ab1      	ldr	r2, [pc, #708]	; (80012d8 <packetRead+0x350>)
 8001014:	e9c2 3400 	strd	r3, r4, [r2]
 8001018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800101a:	3304      	adds	r3, #4
 800101c:	62fb      	str	r3, [r7, #44]	; 0x2c
					up_z_height   = (double)B2I(temp_pointer)*COR_INVERSE_SCALE; temp_pointer+=4;
 800101e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001020:	68fa      	ldr	r2, [r7, #12]
 8001022:	4413      	add	r3, r2
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff fa7c 	bl	8000524 <__aeabi_i2d>
 800102c:	a3a8      	add	r3, pc, #672	; (adr r3, 80012d0 <packetRead+0x348>)
 800102e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001032:	f7ff fae1 	bl	80005f8 <__aeabi_dmul>
 8001036:	4603      	mov	r3, r0
 8001038:	460c      	mov	r4, r1
 800103a:	4aa8      	ldr	r2, [pc, #672]	; (80012dc <packetRead+0x354>)
 800103c:	e9c2 3400 	strd	r3, r4, [r2]
 8001040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001042:	3304      	adds	r3, #4
 8001044:	62fb      	str	r3, [r7, #44]	; 0x2c
					total_num_of_point = B2I(temp_pointer);						 temp_pointer+=4;
 8001046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001048:	68fa      	ldr	r2, [r7, #12]
 800104a:	4413      	add	r3, r2
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4aa4      	ldr	r2, [pc, #656]	; (80012e0 <packetRead+0x358>)
 8001050:	6013      	str	r3, [r2, #0]
 8001052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001054:	3304      	adds	r3, #4
 8001056:	62fb      	str	r3, [r7, #44]	; 0x2c
					point_counter = 0;
 8001058:	4ba2      	ldr	r3, [pc, #648]	; (80012e4 <packetRead+0x35c>)
 800105a:	2200      	movs	r2, #0
 800105c:	801a      	strh	r2, [r3, #0]

				}
				break;
 800105e:	e0e3      	b.n	8001228 <packetRead+0x2a0>
				case LINEAR_TYPE:{
					Gcode_Cor[point_counter].type_define[0] = move_type;
 8001060:	4ba0      	ldr	r3, [pc, #640]	; (80012e4 <packetRead+0x35c>)
 8001062:	881b      	ldrh	r3, [r3, #0]
 8001064:	4619      	mov	r1, r3
 8001066:	4aa0      	ldr	r2, [pc, #640]	; (80012e8 <packetRead+0x360>)
 8001068:	460b      	mov	r3, r1
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	440b      	add	r3, r1
 800106e:	00db      	lsls	r3, r3, #3
 8001070:	4413      	add	r3, r2
 8001072:	3314      	adds	r3, #20
 8001074:	7cba      	ldrb	r2, [r7, #18]
 8001076:	701a      	strb	r2, [r3, #0]
					Gcode_Cor[point_counter].type_define[1]	= message[temp_pointer++] >> 4 & 0x0f;
 8001078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800107a:	1c5a      	adds	r2, r3, #1
 800107c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800107e:	461a      	mov	r2, r3
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	4413      	add	r3, r2
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	091b      	lsrs	r3, r3, #4
 8001088:	b2db      	uxtb	r3, r3
 800108a:	4a96      	ldr	r2, [pc, #600]	; (80012e4 <packetRead+0x35c>)
 800108c:	8812      	ldrh	r2, [r2, #0]
 800108e:	4611      	mov	r1, r2
 8001090:	f003 030f 	and.w	r3, r3, #15
 8001094:	b2d8      	uxtb	r0, r3
 8001096:	4a94      	ldr	r2, [pc, #592]	; (80012e8 <packetRead+0x360>)
 8001098:	460b      	mov	r3, r1
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	440b      	add	r3, r1
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	4413      	add	r3, r2
 80010a2:	3315      	adds	r3, #21
 80010a4:	4602      	mov	r2, r0
 80010a6:	701a      	strb	r2, [r3, #0]
					Gcode_Cor[point_counter].X = B2I(temp_pointer);	temp_pointer+=4;
 80010a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	4413      	add	r3, r2
 80010ae:	4a8d      	ldr	r2, [pc, #564]	; (80012e4 <packetRead+0x35c>)
 80010b0:	8812      	ldrh	r2, [r2, #0]
 80010b2:	4610      	mov	r0, r2
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	498c      	ldr	r1, [pc, #560]	; (80012e8 <packetRead+0x360>)
 80010b8:	4603      	mov	r3, r0
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	4403      	add	r3, r0
 80010be:	00db      	lsls	r3, r3, #3
 80010c0:	440b      	add	r3, r1
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010c6:	3304      	adds	r3, #4
 80010c8:	62fb      	str	r3, [r7, #44]	; 0x2c
					Gcode_Cor[point_counter].Y = B2I(temp_pointer);	temp_pointer+=4;
 80010ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010cc:	68fa      	ldr	r2, [r7, #12]
 80010ce:	4413      	add	r3, r2
 80010d0:	4a84      	ldr	r2, [pc, #528]	; (80012e4 <packetRead+0x35c>)
 80010d2:	8812      	ldrh	r2, [r2, #0]
 80010d4:	4610      	mov	r0, r2
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	4983      	ldr	r1, [pc, #524]	; (80012e8 <packetRead+0x360>)
 80010da:	4603      	mov	r3, r0
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	4403      	add	r3, r0
 80010e0:	00db      	lsls	r3, r3, #3
 80010e2:	440b      	add	r3, r1
 80010e4:	3304      	adds	r3, #4
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ea:	3304      	adds	r3, #4
 80010ec:	62fb      	str	r3, [r7, #44]	; 0x2c
					Gcode_Cor[point_counter].F = B2I(temp_pointer);	temp_pointer+=4;
 80010ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010f0:	68fa      	ldr	r2, [r7, #12]
 80010f2:	4413      	add	r3, r2
 80010f4:	4a7b      	ldr	r2, [pc, #492]	; (80012e4 <packetRead+0x35c>)
 80010f6:	8812      	ldrh	r2, [r2, #0]
 80010f8:	4610      	mov	r0, r2
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	497a      	ldr	r1, [pc, #488]	; (80012e8 <packetRead+0x360>)
 80010fe:	4603      	mov	r3, r0
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	4403      	add	r3, r0
 8001104:	00db      	lsls	r3, r3, #3
 8001106:	440b      	add	r3, r1
 8001108:	3308      	adds	r3, #8
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800110e:	3304      	adds	r3, #4
 8001110:	62fb      	str	r3, [r7, #44]	; 0x2c
					point_counter++;
 8001112:	4b74      	ldr	r3, [pc, #464]	; (80012e4 <packetRead+0x35c>)
 8001114:	881b      	ldrh	r3, [r3, #0]
 8001116:	3301      	adds	r3, #1
 8001118:	b29a      	uxth	r2, r3
 800111a:	4b72      	ldr	r3, [pc, #456]	; (80012e4 <packetRead+0x35c>)
 800111c:	801a      	strh	r2, [r3, #0]
				}
				break;
 800111e:	e083      	b.n	8001228 <packetRead+0x2a0>
				case ARC_CW_TYPE:
				case ARC_AW_TYPE:{
					Gcode_Cor[point_counter].type_define[0] = move_type;
 8001120:	4b70      	ldr	r3, [pc, #448]	; (80012e4 <packetRead+0x35c>)
 8001122:	881b      	ldrh	r3, [r3, #0]
 8001124:	4619      	mov	r1, r3
 8001126:	4a70      	ldr	r2, [pc, #448]	; (80012e8 <packetRead+0x360>)
 8001128:	460b      	mov	r3, r1
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	440b      	add	r3, r1
 800112e:	00db      	lsls	r3, r3, #3
 8001130:	4413      	add	r3, r2
 8001132:	3314      	adds	r3, #20
 8001134:	7cba      	ldrb	r2, [r7, #18]
 8001136:	701a      	strb	r2, [r3, #0]
					Gcode_Cor[point_counter].type_define[1]	= message[temp_pointer++] >> 4 & 0x0f;
 8001138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800113a:	1c5a      	adds	r2, r3, #1
 800113c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800113e:	461a      	mov	r2, r3
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4413      	add	r3, r2
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	091b      	lsrs	r3, r3, #4
 8001148:	b2db      	uxtb	r3, r3
 800114a:	4a66      	ldr	r2, [pc, #408]	; (80012e4 <packetRead+0x35c>)
 800114c:	8812      	ldrh	r2, [r2, #0]
 800114e:	4611      	mov	r1, r2
 8001150:	f003 030f 	and.w	r3, r3, #15
 8001154:	b2d8      	uxtb	r0, r3
 8001156:	4a64      	ldr	r2, [pc, #400]	; (80012e8 <packetRead+0x360>)
 8001158:	460b      	mov	r3, r1
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	440b      	add	r3, r1
 800115e:	00db      	lsls	r3, r3, #3
 8001160:	4413      	add	r3, r2
 8001162:	3315      	adds	r3, #21
 8001164:	4602      	mov	r2, r0
 8001166:	701a      	strb	r2, [r3, #0]
					Gcode_Cor[point_counter].X = B2I(temp_pointer);	temp_pointer+=4;
 8001168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800116a:	68fa      	ldr	r2, [r7, #12]
 800116c:	4413      	add	r3, r2
 800116e:	4a5d      	ldr	r2, [pc, #372]	; (80012e4 <packetRead+0x35c>)
 8001170:	8812      	ldrh	r2, [r2, #0]
 8001172:	4610      	mov	r0, r2
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	495c      	ldr	r1, [pc, #368]	; (80012e8 <packetRead+0x360>)
 8001178:	4603      	mov	r3, r0
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	4403      	add	r3, r0
 800117e:	00db      	lsls	r3, r3, #3
 8001180:	440b      	add	r3, r1
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001186:	3304      	adds	r3, #4
 8001188:	62fb      	str	r3, [r7, #44]	; 0x2c
					Gcode_Cor[point_counter].Y = B2I(temp_pointer);	temp_pointer+=4;
 800118a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800118c:	68fa      	ldr	r2, [r7, #12]
 800118e:	4413      	add	r3, r2
 8001190:	4a54      	ldr	r2, [pc, #336]	; (80012e4 <packetRead+0x35c>)
 8001192:	8812      	ldrh	r2, [r2, #0]
 8001194:	4610      	mov	r0, r2
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	4953      	ldr	r1, [pc, #332]	; (80012e8 <packetRead+0x360>)
 800119a:	4603      	mov	r3, r0
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	4403      	add	r3, r0
 80011a0:	00db      	lsls	r3, r3, #3
 80011a2:	440b      	add	r3, r1
 80011a4:	3304      	adds	r3, #4
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011aa:	3304      	adds	r3, #4
 80011ac:	62fb      	str	r3, [r7, #44]	; 0x2c
					Gcode_Cor[point_counter].F = B2I(temp_pointer);	temp_pointer+=4;
 80011ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011b0:	68fa      	ldr	r2, [r7, #12]
 80011b2:	4413      	add	r3, r2
 80011b4:	4a4b      	ldr	r2, [pc, #300]	; (80012e4 <packetRead+0x35c>)
 80011b6:	8812      	ldrh	r2, [r2, #0]
 80011b8:	4610      	mov	r0, r2
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	494a      	ldr	r1, [pc, #296]	; (80012e8 <packetRead+0x360>)
 80011be:	4603      	mov	r3, r0
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	4403      	add	r3, r0
 80011c4:	00db      	lsls	r3, r3, #3
 80011c6:	440b      	add	r3, r1
 80011c8:	3308      	adds	r3, #8
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ce:	3304      	adds	r3, #4
 80011d0:	62fb      	str	r3, [r7, #44]	; 0x2c
					Gcode_Cor[point_counter].I = B2I(temp_pointer);	temp_pointer+=4;
 80011d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011d4:	68fa      	ldr	r2, [r7, #12]
 80011d6:	4413      	add	r3, r2
 80011d8:	4a42      	ldr	r2, [pc, #264]	; (80012e4 <packetRead+0x35c>)
 80011da:	8812      	ldrh	r2, [r2, #0]
 80011dc:	4610      	mov	r0, r2
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4941      	ldr	r1, [pc, #260]	; (80012e8 <packetRead+0x360>)
 80011e2:	4603      	mov	r3, r0
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	4403      	add	r3, r0
 80011e8:	00db      	lsls	r3, r3, #3
 80011ea:	440b      	add	r3, r1
 80011ec:	330c      	adds	r3, #12
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011f2:	3304      	adds	r3, #4
 80011f4:	62fb      	str	r3, [r7, #44]	; 0x2c
					Gcode_Cor[point_counter].J = B2I(temp_pointer);	temp_pointer+=4;
 80011f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011f8:	68fa      	ldr	r2, [r7, #12]
 80011fa:	4413      	add	r3, r2
 80011fc:	4a39      	ldr	r2, [pc, #228]	; (80012e4 <packetRead+0x35c>)
 80011fe:	8812      	ldrh	r2, [r2, #0]
 8001200:	4610      	mov	r0, r2
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	4938      	ldr	r1, [pc, #224]	; (80012e8 <packetRead+0x360>)
 8001206:	4603      	mov	r3, r0
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	4403      	add	r3, r0
 800120c:	00db      	lsls	r3, r3, #3
 800120e:	440b      	add	r3, r1
 8001210:	3310      	adds	r3, #16
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001216:	3304      	adds	r3, #4
 8001218:	62fb      	str	r3, [r7, #44]	; 0x2c
					point_counter++;
 800121a:	4b32      	ldr	r3, [pc, #200]	; (80012e4 <packetRead+0x35c>)
 800121c:	881b      	ldrh	r3, [r3, #0]
 800121e:	3301      	adds	r3, #1
 8001220:	b29a      	uxth	r2, r3
 8001222:	4b30      	ldr	r3, [pc, #192]	; (80012e4 <packetRead+0x35c>)
 8001224:	801a      	strh	r2, [r3, #0]
				}
				break;
 8001226:	bf00      	nop
				}
        	}while(temp_pointer < length);
 8001228:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	429a      	cmp	r2, r3
 800122e:	f6ff aec9 	blt.w	8000fc4 <packetRead+0x3c>
        	return CMD_GCODE;
 8001232:	231a      	movs	r3, #26
 8001234:	f000 bde2 	b.w	8001dfc <packetRead+0xe74>
        break;

        // command control from pc
        case COMMAND_TRANSMISION:
        {
        	Robot_CommandTypedef command_id = message[1];
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	785b      	ldrb	r3, [r3, #1]
 800123c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
            switch(command_id)
 8001240:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001244:	2b19      	cmp	r3, #25
 8001246:	f200 85d6 	bhi.w	8001df6 <packetRead+0xe6e>
 800124a:	a201      	add	r2, pc, #4	; (adr r2, 8001250 <packetRead+0x2c8>)
 800124c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001250:	080012b9 	.word	0x080012b9
 8001254:	080012f1 	.word	0x080012f1
 8001258:	08001309 	.word	0x08001309
 800125c:	080013d1 	.word	0x080013d1
 8001260:	0800161d 	.word	0x0800161d
 8001264:	080013d1 	.word	0x080013d1
 8001268:	0800188f 	.word	0x0800188f
 800126c:	08001893 	.word	0x08001893
 8001270:	08001df7 	.word	0x08001df7
 8001274:	080018b3 	.word	0x080018b3
 8001278:	080018d1 	.word	0x080018d1
 800127c:	08001933 	.word	0x08001933
 8001280:	08001a01 	.word	0x08001a01
 8001284:	08001dc7 	.word	0x08001dc7
 8001288:	08001dd7 	.word	0x08001dd7
 800128c:	08001df7 	.word	0x08001df7
 8001290:	08001df7 	.word	0x08001df7
 8001294:	08001d03 	.word	0x08001d03
 8001298:	08001de7 	.word	0x08001de7
 800129c:	08001db7 	.word	0x08001db7
 80012a0:	0800199f 	.word	0x0800199f
 80012a4:	080019c9 	.word	0x080019c9
 80012a8:	08001df7 	.word	0x08001df7
 80012ac:	08001df7 	.word	0x08001df7
 80012b0:	08001a3b 	.word	0x08001a3b
 80012b4:	08001b35 	.word	0x08001b35
            {
                // Stop now
                case CMD_STOPNOW:
                {
                    duty_cmd->robot_mode = SCARA_MODE_STOP;
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	2200      	movs	r2, #0
 80012bc:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	2201      	movs	r2, #1
 80012c2:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]
                    return CMD_STOPNOW;
 80012ca:	2300      	movs	r3, #0
 80012cc:	f000 bd96 	b.w	8001dfc <packetRead+0xe74>
 80012d0:	a0000000 	.word	0xa0000000
 80012d4:	3eb0c6f7 	.word	0x3eb0c6f7
 80012d8:	200065c0 	.word	0x200065c0
 80012dc:	200065b8 	.word	0x200065b8
 80012e0:	200065d8 	.word	0x200065d8
 80012e4:	200023fc 	.word	0x200023fc
 80012e8:	200065dc 	.word	0x200065dc
 80012ec:	358637bd 	.word	0x358637bd
                break;

                // Scan limit
                case CMD_SCAN_LIMIT:
                {
                    duty_cmd->robot_mode = SCARA_MODE_SCAN;
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	2201      	movs	r2, #1
 80012f4:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	2201      	movs	r2, #1
 80012fa:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	2200      	movs	r2, #0
 8001300:	701a      	strb	r2, [r3, #0]
                    return CMD_SCAN_LIMIT;
 8001302:	2301      	movs	r3, #1
 8001304:	f000 bd7a 	b.w	8001dfc <packetRead+0xe74>
                break;

                // Move home
                case CMD_MOVE_HOME:
                {
                    if (length == 10){ // 2 int32_t number + 2 define byte
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	2b0a      	cmp	r3, #10
 800130c:	d15d      	bne.n	80013ca <packetRead+0x442>
                        // memcpy(&duty_cmd->v_factor, &message[temp_pointer+=8], 8);
						// memcpy(&duty_cmd->a_factor, &message[temp_pointer], 8); 
						temp_pointer = -2;
 800130e:	f06f 0301 	mvn.w	r3, #1
 8001312:	62fb      	str	r3, [r7, #44]	; 0x2c
						duty_cmd->v_factor = B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001316:	3304      	adds	r3, #4
 8001318:	62fb      	str	r3, [r7, #44]	; 0x2c
 800131a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800131c:	68fa      	ldr	r2, [r7, #12]
 800131e:	4413      	add	r3, r2
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	ee07 3a90 	vmov	s15, r3
 8001326:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800132a:	ed1f 7a10 	vldr	s14, [pc, #-64]	; 80012ec <packetRead+0x364>
 800132e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001332:	ee17 0a90 	vmov	r0, s15
 8001336:	f7ff f907 	bl	8000548 <__aeabi_f2d>
 800133a:	4603      	mov	r3, r0
 800133c:	460c      	mov	r4, r1
 800133e:	683a      	ldr	r2, [r7, #0]
 8001340:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
						duty_cmd->a_factor = B2I(temp_pointer)*COR_INVERSE_SCALE;
 8001344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001346:	68fa      	ldr	r2, [r7, #12]
 8001348:	4413      	add	r3, r2
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	ee07 3a90 	vmov	s15, r3
 8001350:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001354:	ed1f 7a1b 	vldr	s14, [pc, #-108]	; 80012ec <packetRead+0x364>
 8001358:	ee67 7a87 	vmul.f32	s15, s15, s14
 800135c:	ee17 0a90 	vmov	r0, s15
 8001360:	f7ff f8f2 	bl	8000548 <__aeabi_f2d>
 8001364:	4603      	mov	r3, r0
 8001366:	460c      	mov	r4, r1
 8001368:	683a      	ldr	r2, [r7, #0]
 800136a:	e9c2 346c 	strd	r3, r4, [r2, #432]	; 0x1b0
                    }else{
                        return CMD_ERROR;
                    }
                    duty_cmd->target_point.x = 250;
 800136e:	683a      	ldr	r2, [r7, #0]
 8001370:	f04f 0300 	mov.w	r3, #0
 8001374:	4ca6      	ldr	r4, [pc, #664]	; (8001610 <packetRead+0x688>)
 8001376:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
                    duty_cmd->target_point.y = -200;
 800137a:	683a      	ldr	r2, [r7, #0]
 800137c:	f04f 0300 	mov.w	r3, #0
 8001380:	4ca4      	ldr	r4, [pc, #656]	; (8001614 <packetRead+0x68c>)
 8001382:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
                    duty_cmd->target_point.z = 120;
 8001386:	683a      	ldr	r2, [r7, #0]
 8001388:	f04f 0300 	mov.w	r3, #0
 800138c:	4ca2      	ldr	r4, [pc, #648]	; (8001618 <packetRead+0x690>)
 800138e:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
                    duty_cmd->target_point.roll = 0;
 8001392:	683a      	ldr	r2, [r7, #0]
 8001394:	f04f 0300 	mov.w	r3, #0
 8001398:	f04f 0400 	mov.w	r4, #0
 800139c:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

                    duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	2200      	movs	r2, #0
 80013a4:	745a      	strb	r2, [r3, #17]
                    duty_cmd->space_type = DUTY_SPACE_JOINT;
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	2201      	movs	r2, #1
 80013aa:	735a      	strb	r2, [r3, #13]
                    duty_cmd->joint_type = DUTY_JOINT_4DOF;
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	2201      	movs	r2, #1
 80013b0:	73da      	strb	r2, [r3, #15]
                    duty_cmd->robot_mode = SCARA_MODE_DUTY;
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	2202      	movs	r2, #2
 80013b6:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	2201      	movs	r2, #1
 80013bc:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	2200      	movs	r2, #0
 80013c2:	701a      	strb	r2, [r3, #0]
                    return CMD_MOVE_HOME;
 80013c4:	2302      	movs	r3, #2
 80013c6:	f000 bd19 	b.w	8001dfc <packetRead+0xe74>
                        return CMD_ERROR;
 80013ca:	2316      	movs	r3, #22
 80013cc:	f000 bd16 	b.w	8001dfc <packetRead+0xe74>

                case CMD_MOVE_JOINT:
                // Move line
                case CMD_MOVE_LINE:
                {
                    if (length == 29){ // 6 int32_t number + 3 byte number + 2 define byte
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	2b1d      	cmp	r3, #29
 80013d4:	f040 8109 	bne.w	80015ea <packetRead+0x662>
						//scaraSetScanFlag();
						uint8_t mode_init;
						temp_pointer = -2;
 80013d8:	f06f 0301 	mvn.w	r3, #1
 80013dc:	62fb      	str	r3, [r7, #44]	; 0x2c

						duty_cmd->target_point.x = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 80013de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013e0:	3304      	adds	r3, #4
 80013e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013e6:	68fa      	ldr	r2, [r7, #12]
 80013e8:	4413      	add	r3, r2
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff f899 	bl	8000524 <__aeabi_i2d>
 80013f2:	a385      	add	r3, pc, #532	; (adr r3, 8001608 <packetRead+0x680>)
 80013f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f8:	f7ff f8fe 	bl	80005f8 <__aeabi_dmul>
 80013fc:	4603      	mov	r3, r0
 80013fe:	460c      	mov	r4, r1
 8001400:	683a      	ldr	r2, [r7, #0]
 8001402:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
						duty_cmd->target_point.y = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001408:	3304      	adds	r3, #4
 800140a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800140c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800140e:	68fa      	ldr	r2, [r7, #12]
 8001410:	4413      	add	r3, r2
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff f885 	bl	8000524 <__aeabi_i2d>
 800141a:	a37b      	add	r3, pc, #492	; (adr r3, 8001608 <packetRead+0x680>)
 800141c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001420:	f7ff f8ea 	bl	80005f8 <__aeabi_dmul>
 8001424:	4603      	mov	r3, r0
 8001426:	460c      	mov	r4, r1
 8001428:	683a      	ldr	r2, [r7, #0]
 800142a:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
						duty_cmd->target_point.z = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 800142e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001430:	3304      	adds	r3, #4
 8001432:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	4413      	add	r3, r2
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff f871 	bl	8000524 <__aeabi_i2d>
 8001442:	a371      	add	r3, pc, #452	; (adr r3, 8001608 <packetRead+0x680>)
 8001444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001448:	f7ff f8d6 	bl	80005f8 <__aeabi_dmul>
 800144c:	4603      	mov	r3, r0
 800144e:	460c      	mov	r4, r1
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
						duty_cmd->target_point.roll = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001458:	3304      	adds	r3, #4
 800145a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800145c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	4413      	add	r3, r2
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff f85d 	bl	8000524 <__aeabi_i2d>
 800146a:	a367      	add	r3, pc, #412	; (adr r3, 8001608 <packetRead+0x680>)
 800146c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001470:	f7ff f8c2 	bl	80005f8 <__aeabi_dmul>
 8001474:	4603      	mov	r3, r0
 8001476:	460c      	mov	r4, r1
 8001478:	683a      	ldr	r2, [r7, #0]
 800147a:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
						duty_cmd->v_factor = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 800147e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001480:	3304      	adds	r3, #4
 8001482:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	4413      	add	r3, r2
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff f849 	bl	8000524 <__aeabi_i2d>
 8001492:	a35d      	add	r3, pc, #372	; (adr r3, 8001608 <packetRead+0x680>)
 8001494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001498:	f7ff f8ae 	bl	80005f8 <__aeabi_dmul>
 800149c:	4603      	mov	r3, r0
 800149e:	460c      	mov	r4, r1
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
						mode_init = message[temp_pointer+=4];
 80014a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014a8:	3304      	adds	r3, #4
 80014aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ae:	68fa      	ldr	r2, [r7, #12]
 80014b0:	4413      	add	r3, r2
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	74fb      	strb	r3, [r7, #19]

						if(mode_init == DUTY_MODE_INIT_QVA){
 80014b6:	7cfb      	ldrb	r3, [r7, #19]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d117      	bne.n	80014ec <packetRead+0x564>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	2200      	movs	r2, #0
 80014c0:	745a      	strb	r2, [r3, #17]
							duty_cmd->a_factor = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 80014c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014c4:	3301      	adds	r3, #1
 80014c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ca:	68fa      	ldr	r2, [r7, #12]
 80014cc:	4413      	add	r3, r2
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff f827 	bl	8000524 <__aeabi_i2d>
 80014d6:	a34c      	add	r3, pc, #304	; (adr r3, 8001608 <packetRead+0x680>)
 80014d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014dc:	f7ff f88c 	bl	80005f8 <__aeabi_dmul>
 80014e0:	4603      	mov	r3, r0
 80014e2:	460c      	mov	r4, r1
 80014e4:	683a      	ldr	r2, [r7, #0]
 80014e6:	e9c2 346c 	strd	r3, r4, [r2, #432]	; 0x1b0
 80014ea:	e053      	b.n	8001594 <packetRead+0x60c>
						}else if(mode_init == DUTY_MODE_INIT_QVT){
 80014ec:	7cfb      	ldrb	r3, [r7, #19]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d117      	bne.n	8001522 <packetRead+0x59a>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	2201      	movs	r2, #1
 80014f6:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 80014f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014fa:	3301      	adds	r3, #1
 80014fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001500:	68fa      	ldr	r2, [r7, #12]
 8001502:	4413      	add	r3, r2
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff f80c 	bl	8000524 <__aeabi_i2d>
 800150c:	a33e      	add	r3, pc, #248	; (adr r3, 8001608 <packetRead+0x680>)
 800150e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001512:	f7ff f871 	bl	80005f8 <__aeabi_dmul>
 8001516:	4603      	mov	r3, r0
 8001518:	460c      	mov	r4, r1
 800151a:	683a      	ldr	r2, [r7, #0]
 800151c:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8001520:	e038      	b.n	8001594 <packetRead+0x60c>
						}else if(mode_init == DUTY_MODE_INIT_QT){
 8001522:	7cfb      	ldrb	r3, [r7, #19]
 8001524:	2b03      	cmp	r3, #3
 8001526:	d117      	bne.n	8001558 <packetRead+0x5d0>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QT;
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	2203      	movs	r2, #3
 800152c:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 800152e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001530:	3301      	adds	r3, #1
 8001532:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	4413      	add	r3, r2
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4618      	mov	r0, r3
 800153e:	f7fe fff1 	bl	8000524 <__aeabi_i2d>
 8001542:	a331      	add	r3, pc, #196	; (adr r3, 8001608 <packetRead+0x680>)
 8001544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001548:	f7ff f856 	bl	80005f8 <__aeabi_dmul>
 800154c:	4603      	mov	r3, r0
 800154e:	460c      	mov	r4, r1
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8001556:	e01d      	b.n	8001594 <packetRead+0x60c>
						}else if(mode_init == DUTY_MODE_INIT_QV){
 8001558:	7cfb      	ldrb	r3, [r7, #19]
 800155a:	2b02      	cmp	r3, #2
 800155c:	d117      	bne.n	800158e <packetRead+0x606>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QV;
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	2202      	movs	r2, #2
 8001562:	745a      	strb	r2, [r3, #17]
							duty_cmd->v_factor = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 8001564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001566:	3301      	adds	r3, #1
 8001568:	62fb      	str	r3, [r7, #44]	; 0x2c
 800156a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800156c:	68fa      	ldr	r2, [r7, #12]
 800156e:	4413      	add	r3, r2
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f7fe ffd6 	bl	8000524 <__aeabi_i2d>
 8001578:	a323      	add	r3, pc, #140	; (adr r3, 8001608 <packetRead+0x680>)
 800157a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157e:	f7ff f83b 	bl	80005f8 <__aeabi_dmul>
 8001582:	4603      	mov	r3, r0
 8001584:	460c      	mov	r4, r1
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
 800158c:	e002      	b.n	8001594 <packetRead+0x60c>
						}else{
							return CMD_ERROR;
 800158e:	2316      	movs	r3, #22
 8001590:	f000 bc34 	b.w	8001dfc <packetRead+0xe74>
						}
						duty_cmd->coordinate_type = message[temp_pointer+=4];
 8001594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001596:	3304      	adds	r3, #4
 8001598:	62fb      	str	r3, [r7, #44]	; 0x2c
 800159a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800159c:	68fa      	ldr	r2, [r7, #12]
 800159e:	4413      	add	r3, r2
 80015a0:	781a      	ldrb	r2, [r3, #0]
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	731a      	strb	r2, [r3, #12]
						duty_cmd->trajec_type = message[temp_pointer+=1];
 80015a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a8:	3301      	adds	r3, #1
 80015aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	4413      	add	r3, r2
 80015b2:	781a      	ldrb	r2, [r3, #0]
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	741a      	strb	r2, [r3, #16]
						if(command_id == CMD_MOVE_LINE){
 80015b8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80015bc:	2b03      	cmp	r3, #3
 80015be:	d106      	bne.n	80015ce <packetRead+0x646>
							duty_cmd->path_type = DUTY_PATH_LINE;
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	2200      	movs	r2, #0
 80015c4:	739a      	strb	r2, [r3, #14]
							duty_cmd->space_type = DUTY_SPACE_TASK;
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	2200      	movs	r2, #0
 80015ca:	735a      	strb	r2, [r3, #13]
 80015cc:	e010      	b.n	80015f0 <packetRead+0x668>
						}else if(command_id == CMD_MOVE_JOINT){
 80015ce:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80015d2:	2b05      	cmp	r3, #5
 80015d4:	d106      	bne.n	80015e4 <packetRead+0x65c>
							duty_cmd->joint_type = DUTY_JOINT_4DOF;
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	2201      	movs	r2, #1
 80015da:	73da      	strb	r2, [r3, #15]
							duty_cmd->space_type = DUTY_SPACE_JOINT;
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	2201      	movs	r2, #1
 80015e0:	735a      	strb	r2, [r3, #13]
 80015e2:	e005      	b.n	80015f0 <packetRead+0x668>
						}else{
							return CMD_ERROR;
 80015e4:	2316      	movs	r3, #22
 80015e6:	f000 bc09 	b.w	8001dfc <packetRead+0xe74>
						}

					}else{
						return CMD_ERROR;
 80015ea:	2316      	movs	r3, #22
 80015ec:	f000 bc06 	b.w	8001dfc <packetRead+0xe74>
					}
					duty_cmd->robot_mode = SCARA_MODE_DUTY;
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	2202      	movs	r2, #2
 80015f4:	709a      	strb	r2, [r3, #2]
					duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	2201      	movs	r2, #1
 80015fa:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	2200      	movs	r2, #0
 8001600:	701a      	strb	r2, [r3, #0]
					return command_id;
 8001602:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001606:	e3f9      	b.n	8001dfc <packetRead+0xe74>
 8001608:	a0000000 	.word	0xa0000000
 800160c:	3eb0c6f7 	.word	0x3eb0c6f7
 8001610:	406f4000 	.word	0x406f4000
 8001614:	c0690000 	.word	0xc0690000
 8001618:	405e0000 	.word	0x405e0000
				break;


				// Move circle
                case CMD_MOVE_CIRCLE:{
                	if(length == 34){ // 7 int32_t number + 4 byte number + 2 define byte
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	2b22      	cmp	r3, #34	; 0x22
 8001620:	f040 8133 	bne.w	800188a <packetRead+0x902>
                		uint8_t mode_init, arc_type;
                		temp_pointer = -2;
 8001624:	f06f 0301 	mvn.w	r3, #1
 8001628:	62fb      	str	r3, [r7, #44]	; 0x2c
                		duty_cmd->target_point.x      = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 800162a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800162c:	3304      	adds	r3, #4
 800162e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001632:	68fa      	ldr	r2, [r7, #12]
 8001634:	4413      	add	r3, r2
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f7fe ff73 	bl	8000524 <__aeabi_i2d>
 800163e:	f20f 43e0 	addw	r3, pc, #1248	; 0x4e0
 8001642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001646:	f7fe ffd7 	bl	80005f8 <__aeabi_dmul>
 800164a:	4603      	mov	r3, r0
 800164c:	460c      	mov	r4, r1
 800164e:	683a      	ldr	r2, [r7, #0]
 8001650:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
                		duty_cmd->target_point.y      = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001656:	3304      	adds	r3, #4
 8001658:	62fb      	str	r3, [r7, #44]	; 0x2c
 800165a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800165c:	68fa      	ldr	r2, [r7, #12]
 800165e:	4413      	add	r3, r2
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4618      	mov	r0, r3
 8001664:	f7fe ff5e 	bl	8000524 <__aeabi_i2d>
 8001668:	f20f 43b4 	addw	r3, pc, #1204	; 0x4b4
 800166c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001670:	f7fe ffc2 	bl	80005f8 <__aeabi_dmul>
 8001674:	4603      	mov	r3, r0
 8001676:	460c      	mov	r4, r1
 8001678:	683a      	ldr	r2, [r7, #0]
 800167a:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
                		duty_cmd->sub_point.x 	      = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 800167e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001680:	3304      	adds	r3, #4
 8001682:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	4413      	add	r3, r2
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f7fe ff49 	bl	8000524 <__aeabi_i2d>
 8001692:	f20f 438c 	addw	r3, pc, #1164	; 0x48c
 8001696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169a:	f7fe ffad 	bl	80005f8 <__aeabi_dmul>
 800169e:	4603      	mov	r3, r0
 80016a0:	460c      	mov	r4, r1
 80016a2:	683a      	ldr	r2, [r7, #0]
 80016a4:	e9c2 344c 	strd	r3, r4, [r2, #304]	; 0x130
                		duty_cmd->sub_point.y         = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 80016a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016aa:	3304      	adds	r3, #4
 80016ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b0:	68fa      	ldr	r2, [r7, #12]
 80016b2:	4413      	add	r3, r2
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7fe ff34 	bl	8000524 <__aeabi_i2d>
 80016bc:	f20f 4360 	addw	r3, pc, #1120	; 0x460
 80016c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c4:	f7fe ff98 	bl	80005f8 <__aeabi_dmul>
 80016c8:	4603      	mov	r3, r0
 80016ca:	460c      	mov	r4, r1
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	e9c2 344e 	strd	r3, r4, [r2, #312]	; 0x138
                		duty_cmd->target_point.roll   = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 80016d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016d4:	3304      	adds	r3, #4
 80016d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	4413      	add	r3, r2
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7fe ff1f 	bl	8000524 <__aeabi_i2d>
 80016e6:	f20f 4338 	addw	r3, pc, #1080	; 0x438
 80016ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ee:	f7fe ff83 	bl	80005f8 <__aeabi_dmul>
 80016f2:	4603      	mov	r3, r0
 80016f4:	460c      	mov	r4, r1
 80016f6:	683a      	ldr	r2, [r7, #0]
 80016f8:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
                		duty_cmd->v_factor			  = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 80016fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016fe:	3304      	adds	r3, #4
 8001700:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001704:	68fa      	ldr	r2, [r7, #12]
 8001706:	4413      	add	r3, r2
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4618      	mov	r0, r3
 800170c:	f7fe ff0a 	bl	8000524 <__aeabi_i2d>
 8001710:	f20f 430c 	addw	r3, pc, #1036	; 0x40c
 8001714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001718:	f7fe ff6e 	bl	80005f8 <__aeabi_dmul>
 800171c:	4603      	mov	r3, r0
 800171e:	460c      	mov	r4, r1
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
                		arc_type = message[temp_pointer+=4];
 8001726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001728:	3304      	adds	r3, #4
 800172a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800172c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	4413      	add	r3, r2
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	757b      	strb	r3, [r7, #21]
                		if(arc_type == ARC_AW_TYPE){
 8001736:	7d7b      	ldrb	r3, [r7, #21]
 8001738:	2b03      	cmp	r3, #3
 800173a:	d103      	bne.n	8001744 <packetRead+0x7bc>
                			duty_cmd->arc_dir = 1;
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	2201      	movs	r2, #1
 8001740:	615a      	str	r2, [r3, #20]
 8001742:	e009      	b.n	8001758 <packetRead+0x7d0>
                		}else if(arc_type == ARC_CW_TYPE){
 8001744:	7d7b      	ldrb	r3, [r7, #21]
 8001746:	2b02      	cmp	r3, #2
 8001748:	d104      	bne.n	8001754 <packetRead+0x7cc>
                			duty_cmd->arc_dir = -1;
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	f04f 32ff 	mov.w	r2, #4294967295
 8001750:	615a      	str	r2, [r3, #20]
 8001752:	e001      	b.n	8001758 <packetRead+0x7d0>
                		}else{
                			return CMD_ERROR;
 8001754:	2316      	movs	r3, #22
 8001756:	e351      	b.n	8001dfc <packetRead+0xe74>
                		}
                		mode_init = message[temp_pointer+=1];
 8001758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800175a:	3301      	adds	r3, #1
 800175c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800175e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001760:	68fa      	ldr	r2, [r7, #12]
 8001762:	4413      	add	r3, r2
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	753b      	strb	r3, [r7, #20]
						if(mode_init == DUTY_MODE_INIT_QVA){
 8001768:	7d3b      	ldrb	r3, [r7, #20]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d117      	bne.n	800179e <packetRead+0x816>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	2200      	movs	r2, #0
 8001772:	745a      	strb	r2, [r3, #17]
							duty_cmd->a_factor = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 8001774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001776:	3301      	adds	r3, #1
 8001778:	62fb      	str	r3, [r7, #44]	; 0x2c
 800177a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800177c:	68fa      	ldr	r2, [r7, #12]
 800177e:	4413      	add	r3, r2
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f7fe fece 	bl	8000524 <__aeabi_i2d>
 8001788:	a3e5      	add	r3, pc, #916	; (adr r3, 8001b20 <packetRead+0xb98>)
 800178a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178e:	f7fe ff33 	bl	80005f8 <__aeabi_dmul>
 8001792:	4603      	mov	r3, r0
 8001794:	460c      	mov	r4, r1
 8001796:	683a      	ldr	r2, [r7, #0]
 8001798:	e9c2 346c 	strd	r3, r4, [r2, #432]	; 0x1b0
 800179c:	e052      	b.n	8001844 <packetRead+0x8bc>
						}else if(mode_init == DUTY_MODE_INIT_QVT){
 800179e:	7d3b      	ldrb	r3, [r7, #20]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d117      	bne.n	80017d4 <packetRead+0x84c>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	2201      	movs	r2, #1
 80017a8:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 80017aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ac:	3301      	adds	r3, #1
 80017ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	4413      	add	r3, r2
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7fe feb3 	bl	8000524 <__aeabi_i2d>
 80017be:	a3d8      	add	r3, pc, #864	; (adr r3, 8001b20 <packetRead+0xb98>)
 80017c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c4:	f7fe ff18 	bl	80005f8 <__aeabi_dmul>
 80017c8:	4603      	mov	r3, r0
 80017ca:	460c      	mov	r4, r1
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	e9c2 3408 	strd	r3, r4, [r2, #32]
 80017d2:	e037      	b.n	8001844 <packetRead+0x8bc>
						}else if(mode_init == DUTY_MODE_INIT_QT){
 80017d4:	7d3b      	ldrb	r3, [r7, #20]
 80017d6:	2b03      	cmp	r3, #3
 80017d8:	d117      	bne.n	800180a <packetRead+0x882>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QT;
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	2203      	movs	r2, #3
 80017de:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 80017e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017e2:	3301      	adds	r3, #1
 80017e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017e8:	68fa      	ldr	r2, [r7, #12]
 80017ea:	4413      	add	r3, r2
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7fe fe98 	bl	8000524 <__aeabi_i2d>
 80017f4:	a3ca      	add	r3, pc, #808	; (adr r3, 8001b20 <packetRead+0xb98>)
 80017f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fa:	f7fe fefd 	bl	80005f8 <__aeabi_dmul>
 80017fe:	4603      	mov	r3, r0
 8001800:	460c      	mov	r4, r1
 8001802:	683a      	ldr	r2, [r7, #0]
 8001804:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8001808:	e01c      	b.n	8001844 <packetRead+0x8bc>
						}else if(mode_init == DUTY_MODE_INIT_QV){
 800180a:	7d3b      	ldrb	r3, [r7, #20]
 800180c:	2b02      	cmp	r3, #2
 800180e:	d117      	bne.n	8001840 <packetRead+0x8b8>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QV;
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	2202      	movs	r2, #2
 8001814:	745a      	strb	r2, [r3, #17]
							duty_cmd->v_factor = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 8001816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001818:	3301      	adds	r3, #1
 800181a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800181c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800181e:	68fa      	ldr	r2, [r7, #12]
 8001820:	4413      	add	r3, r2
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4618      	mov	r0, r3
 8001826:	f7fe fe7d 	bl	8000524 <__aeabi_i2d>
 800182a:	a3bd      	add	r3, pc, #756	; (adr r3, 8001b20 <packetRead+0xb98>)
 800182c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001830:	f7fe fee2 	bl	80005f8 <__aeabi_dmul>
 8001834:	4603      	mov	r3, r0
 8001836:	460c      	mov	r4, r1
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
 800183e:	e001      	b.n	8001844 <packetRead+0x8bc>
						}else{
							return CMD_ERROR;
 8001840:	2316      	movs	r3, #22
 8001842:	e2db      	b.n	8001dfc <packetRead+0xe74>
						}
						duty_cmd->coordinate_type = message[temp_pointer+=4];
 8001844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001846:	3304      	adds	r3, #4
 8001848:	62fb      	str	r3, [r7, #44]	; 0x2c
 800184a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800184c:	68fa      	ldr	r2, [r7, #12]
 800184e:	4413      	add	r3, r2
 8001850:	781a      	ldrb	r2, [r3, #0]
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	731a      	strb	r2, [r3, #12]
						duty_cmd->trajec_type = message[temp_pointer+=1];
 8001856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001858:	3301      	adds	r3, #1
 800185a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800185c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	4413      	add	r3, r2
 8001862:	781a      	ldrb	r2, [r3, #0]
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	741a      	strb	r2, [r3, #16]
						duty_cmd->path_type = DUTY_PATH_CIRCLE;
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	2201      	movs	r2, #1
 800186c:	739a      	strb	r2, [r3, #14]
						duty_cmd->space_type = DUTY_SPACE_TASK;
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	2200      	movs	r2, #0
 8001872:	735a      	strb	r2, [r3, #13]
                	}else{
                		return CMD_ERROR;
                	}
                	duty_cmd->robot_mode = SCARA_MODE_DUTY;
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	2202      	movs	r2, #2
 8001878:	709a      	strb	r2, [r3, #2]
					duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	2201      	movs	r2, #1
 800187e:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	2200      	movs	r2, #0
 8001884:	701a      	strb	r2, [r3, #0]
					return CMD_MOVE_CIRCLE;
 8001886:	2304      	movs	r3, #4
 8001888:	e2b8      	b.n	8001dfc <packetRead+0xe74>
                		return CMD_ERROR;
 800188a:	2316      	movs	r3, #22
 800188c:	e2b6      	b.n	8001dfc <packetRead+0xe74>
                break;

				// Rotate Single
				case CMD_ROTATE_SINGLE:
				{
					return CMD_ROTATE_SINGLE;
 800188e:	2306      	movs	r3, #6
 8001890:	e2b4      	b.n	8001dfc <packetRead+0xe74>
				break;

				// Set output
				case CMD_OUTPUT:
				{
					if(length == 3){ // 1 byte output value + 2 byte define
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	2b03      	cmp	r3, #3
 8001896:	d10a      	bne.n	80018ae <packetRead+0x926>
						temp_pointer = 2;
 8001898:	2302      	movs	r3, #2
 800189a:	62fb      	str	r3, [r7, #44]	; 0x2c
						duty_cmd->arc_dir = message[temp_pointer];
 800189c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	4413      	add	r3, r2
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	461a      	mov	r2, r3
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	615a      	str	r2, [r3, #20]
						return CMD_OUTPUT;
 80018aa:	2307      	movs	r3, #7
 80018ac:	e2a6      	b.n	8001dfc <packetRead+0xe74>
					}else{
						return CMD_ERROR;
 80018ae:	2316      	movs	r3, #22
 80018b0:	e2a4      	b.n	8001dfc <packetRead+0xe74>
				break;

				// Read position
				case CMD_READ_POSITION:
				{
					if(length == 3){ // 1 byte categorize read type + 2 byte define
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	2b03      	cmp	r3, #3
 80018b6:	d109      	bne.n	80018cc <packetRead+0x944>
						temp_pointer = 2;
 80018b8:	2302      	movs	r3, #2
 80018ba:	62fb      	str	r3, [r7, #44]	; 0x2c
						position_type = message[temp_pointer];
 80018bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	4413      	add	r3, r2
 80018c2:	781a      	ldrb	r2, [r3, #0]
 80018c4:	4b98      	ldr	r3, [pc, #608]	; (8001b28 <packetRead+0xba0>)
 80018c6:	701a      	strb	r2, [r3, #0]
						return CMD_READ_POSITION;
 80018c8:	2309      	movs	r3, #9
 80018ca:	e297      	b.n	8001dfc <packetRead+0xe74>
					}else{
						return CMD_ERROR;
 80018cc:	2316      	movs	r3, #22
 80018ce:	e295      	b.n	8001dfc <packetRead+0xe74>
				break;			

				// Setting
				case CMD_TEST_METHOD_SETTING:
				{
					if (length == 6){ // 4 byte configure + 2 byte define
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	2b06      	cmp	r3, #6
 80018d4:	d12b      	bne.n	800192e <packetRead+0x9a6>
						temp_pointer = 2;
 80018d6:	2302      	movs	r3, #2
 80018d8:	62fb      	str	r3, [r7, #44]	; 0x2c
						test_value_array[0] = message[temp_pointer++];
 80018da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018dc:	1c5a      	adds	r2, r3, #1
 80018de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018e0:	461a      	mov	r2, r3
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	4413      	add	r3, r2
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	b25a      	sxtb	r2, r3
 80018ea:	4b90      	ldr	r3, [pc, #576]	; (8001b2c <packetRead+0xba4>)
 80018ec:	701a      	strb	r2, [r3, #0]
						test_value_array[1] = message[temp_pointer++];
 80018ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f0:	1c5a      	adds	r2, r3, #1
 80018f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018f4:	461a      	mov	r2, r3
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	4413      	add	r3, r2
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	b25a      	sxtb	r2, r3
 80018fe:	4b8b      	ldr	r3, [pc, #556]	; (8001b2c <packetRead+0xba4>)
 8001900:	705a      	strb	r2, [r3, #1]
						test_value_array[2] = message[temp_pointer++];
 8001902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001904:	1c5a      	adds	r2, r3, #1
 8001906:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001908:	461a      	mov	r2, r3
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	4413      	add	r3, r2
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	b25a      	sxtb	r2, r3
 8001912:	4b86      	ldr	r3, [pc, #536]	; (8001b2c <packetRead+0xba4>)
 8001914:	709a      	strb	r2, [r3, #2]
						test_value_array[3] = message[temp_pointer++];
 8001916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001918:	1c5a      	adds	r2, r3, #1
 800191a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800191c:	461a      	mov	r2, r3
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	4413      	add	r3, r2
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	b25a      	sxtb	r2, r3
 8001926:	4b81      	ldr	r3, [pc, #516]	; (8001b2c <packetRead+0xba4>)
 8001928:	70da      	strb	r2, [r3, #3]
						return CMD_TEST_METHOD_SETTING;
 800192a:	230a      	movs	r3, #10
 800192c:	e266      	b.n	8001dfc <packetRead+0xe74>
					}else{
						return CMD_ERROR;
 800192e:	2316      	movs	r3, #22
 8001930:	e264      	b.n	8001dfc <packetRead+0xe74>
				break;

				// Change method
				case CMD_METHOD_CHANGE:
				{
					if(length == 3){ // 1 byte configure + 2 byte define
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	2b03      	cmp	r3, #3
 8001936:	d130      	bne.n	800199a <packetRead+0xa12>
						uint8_t method;
						temp_pointer = 2;
 8001938:	2302      	movs	r3, #2
 800193a:	62fb      	str	r3, [r7, #44]	; 0x2c
						method = message[temp_pointer];
 800193c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	4413      	add	r3, r2
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	75bb      	strb	r3, [r7, #22]
						if (SCARA_METHOD_MANUAL == method) {
 8001946:	7dbb      	ldrb	r3, [r7, #22]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d103      	bne.n	8001954 <packetRead+0x9cc>
							duty_cmd->robot_method = SCARA_METHOD_MANUAL;
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	2200      	movs	r2, #0
 8001950:	705a      	strb	r2, [r3, #1]
 8001952:	e01d      	b.n	8001990 <packetRead+0xa08>
						} else if (SCARA_METHOD_SEMI_AUTO == method) {
 8001954:	7dbb      	ldrb	r3, [r7, #22]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d103      	bne.n	8001962 <packetRead+0x9da>
							duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	2201      	movs	r2, #1
 800195e:	705a      	strb	r2, [r3, #1]
 8001960:	e016      	b.n	8001990 <packetRead+0xa08>
						} else if (SCARA_METHOD_GCODE == method) {
 8001962:	7dbb      	ldrb	r3, [r7, #22]
 8001964:	2b02      	cmp	r3, #2
 8001966:	d103      	bne.n	8001970 <packetRead+0x9e8>
							duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	2202      	movs	r2, #2
 800196c:	705a      	strb	r2, [r3, #1]
 800196e:	e00f      	b.n	8001990 <packetRead+0xa08>
						}else if(SCARA_METHOD_TEST == method){
 8001970:	7dbb      	ldrb	r3, [r7, #22]
 8001972:	2b03      	cmp	r3, #3
 8001974:	d103      	bne.n	800197e <packetRead+0x9f6>
							duty_cmd->robot_method = SCARA_METHOD_TEST;
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	2203      	movs	r2, #3
 800197a:	705a      	strb	r2, [r3, #1]
 800197c:	e008      	b.n	8001990 <packetRead+0xa08>
						}else if(SCARA_METHOD_PICK_AND_PLACE == method){
 800197e:	7dbb      	ldrb	r3, [r7, #22]
 8001980:	2b04      	cmp	r3, #4
 8001982:	d103      	bne.n	800198c <packetRead+0xa04>
							duty_cmd->robot_method = SCARA_METHOD_PICK_AND_PLACE;
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	2204      	movs	r2, #4
 8001988:	705a      	strb	r2, [r3, #1]
 800198a:	e001      	b.n	8001990 <packetRead+0xa08>
						}else {
							return CMD_ERROR;
 800198c:	2316      	movs	r3, #22
 800198e:	e235      	b.n	8001dfc <packetRead+0xe74>
						}
						duty_cmd->change_method = TRUE;
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	2201      	movs	r2, #1
 8001994:	701a      	strb	r2, [r3, #0]
						return CMD_METHOD_CHANGE;
 8001996:	230b      	movs	r3, #11
 8001998:	e230      	b.n	8001dfc <packetRead+0xe74>
					}else{
						return CMD_ERROR;
 800199a:	2316      	movs	r3, #22
 800199c:	e22e      	b.n	8001dfc <packetRead+0xe74>
				break;

				// Set manual key
				case CMD_KEYBOARD:
				{
					if(length == 3){ // 1 byte output value + 2 byte define
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	2b03      	cmp	r3, #3
 80019a2:	d10f      	bne.n	80019c4 <packetRead+0xa3c>
						int temp_pointer = 2;
 80019a4:	2302      	movs	r3, #2
 80019a6:	61fb      	str	r3, [r7, #28]
						duty_cmd->keyboard = (SCARA_KeyTypeDef)message[temp_pointer];
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	4413      	add	r3, r2
 80019ae:	781a      	ldrb	r2, [r3, #0]
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	70da      	strb	r2, [r3, #3]
						duty_cmd->robot_method = SCARA_METHOD_MANUAL;
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	2200      	movs	r2, #0
 80019b8:	705a      	strb	r2, [r3, #1]
						duty_cmd->change_method = FALSE;
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	2200      	movs	r2, #0
 80019be:	701a      	strb	r2, [r3, #0]
						return CMD_KEYBOARD;
 80019c0:	2314      	movs	r3, #20
 80019c2:	e21b      	b.n	8001dfc <packetRead+0xe74>
					}else{
						return CMD_ERROR;
 80019c4:	2316      	movs	r3, #22
 80019c6:	e219      	b.n	8001dfc <packetRead+0xe74>
				break;

				// Set manual key speed
				case CMD_KEY_SPEED:
				{
					if(length == 3){ // 1 byte key value + 2 byte define
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	2b03      	cmp	r3, #3
 80019cc:	d116      	bne.n	80019fc <packetRead+0xa74>
						int temp_pointer = 2;
 80019ce:	2302      	movs	r3, #2
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
						int32_t speed = (int32_t)message[temp_pointer];
 80019d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d4:	68fa      	ldr	r2, [r7, #12]
 80019d6:	4413      	add	r3, r2
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	623b      	str	r3, [r7, #32]
						// check limit
						if ((speed < SHIFT_SPEED_MIN) || (speed > SHIFT_SPEED_MAX)) {
 80019dc:	6a3b      	ldr	r3, [r7, #32]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	dd02      	ble.n	80019e8 <packetRead+0xa60>
 80019e2:	6a3b      	ldr	r3, [r7, #32]
 80019e4:	2b0e      	cmp	r3, #14
 80019e6:	dd01      	ble.n	80019ec <packetRead+0xa64>
							return CMD_ERROR;
 80019e8:	2316      	movs	r3, #22
 80019ea:	e207      	b.n	8001dfc <packetRead+0xe74>
						}
						duty_cmd->key_speed = speed;
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	6a3a      	ldr	r2, [r7, #32]
 80019f0:	605a      	str	r2, [r3, #4]
						current_key_speed1 = speed;
 80019f2:	4a4f      	ldr	r2, [pc, #316]	; (8001b30 <packetRead+0xba8>)
 80019f4:	6a3b      	ldr	r3, [r7, #32]
 80019f6:	6013      	str	r3, [r2, #0]
						return CMD_KEY_SPEED;
 80019f8:	2315      	movs	r3, #21
 80019fa:	e1ff      	b.n	8001dfc <packetRead+0xe74>
					}else{
						return CMD_ERROR;
 80019fc:	2316      	movs	r3, #22
 80019fe:	e1fd      	b.n	8001dfc <packetRead+0xe74>
				break;

				// Set test mode
				case CMD_MOTOR_TEST:
				{
					if(length == 3){ // 1byte key mode + 2 byte define
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	2b03      	cmp	r3, #3
 8001a04:	d117      	bne.n	8001a36 <packetRead+0xaae>
						int temp_pointer = 2;
 8001a06:	2302      	movs	r3, #2
 8001a08:	61bb      	str	r3, [r7, #24]
						uint8_t test_key = message[temp_pointer];
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	68fa      	ldr	r2, [r7, #12]
 8001a0e:	4413      	add	r3, r2
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	75fb      	strb	r3, [r7, #23]
						if(test_key < 0 || test_key > 8){
 8001a14:	7dfb      	ldrb	r3, [r7, #23]
 8001a16:	2b08      	cmp	r3, #8
 8001a18:	d901      	bls.n	8001a1e <packetRead+0xa96>
							return CMD_ERROR;
 8001a1a:	2316      	movs	r3, #22
 8001a1c:	e1ee      	b.n	8001dfc <packetRead+0xe74>
						}
						duty_cmd->test_key = test_key;
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	7dfa      	ldrb	r2, [r7, #23]
 8001a22:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
						duty_cmd->robot_method = SCARA_METHOD_TEST;	
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	2203      	movs	r2, #3
 8001a2a:	705a      	strb	r2, [r3, #1]
						duty_cmd->change_method = FALSE;
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	701a      	strb	r2, [r3, #0]
						return CMD_MOTOR_TEST;
 8001a32:	230c      	movs	r3, #12
 8001a34:	e1e2      	b.n	8001dfc <packetRead+0xe74>
					}else{
						return CMD_ERROR;
 8001a36:	2316      	movs	r3, #22
 8001a38:	e1e0      	b.n	8001dfc <packetRead+0xe74>
				}
				break;

				case CMD_OBJECT_DETECTED:
				{
					if (length == 15){ // 3 int32_t number + 1 byte object type + 2 define byte
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	2b0f      	cmp	r3, #15
 8001a3e:	d16a      	bne.n	8001b16 <packetRead+0xb8e>
						temp_pointer = -2;
 8001a40:	f06f 0301 	mvn.w	r3, #1
 8001a44:	62fb      	str	r3, [r7, #44]	; 0x2c
						duty_cmd->target_point.x = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a48:	3304      	adds	r3, #4
 8001a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	4413      	add	r3, r2
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7fe fd65 	bl	8000524 <__aeabi_i2d>
 8001a5a:	a331      	add	r3, pc, #196	; (adr r3, 8001b20 <packetRead+0xb98>)
 8001a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a60:	f7fe fdca 	bl	80005f8 <__aeabi_dmul>
 8001a64:	4603      	mov	r3, r0
 8001a66:	460c      	mov	r4, r1
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
						duty_cmd->target_point.y = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a70:	3304      	adds	r3, #4
 8001a72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	4413      	add	r3, r2
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7fe fd51 	bl	8000524 <__aeabi_i2d>
 8001a82:	a327      	add	r3, pc, #156	; (adr r3, 8001b20 <packetRead+0xb98>)
 8001a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a88:	f7fe fdb6 	bl	80005f8 <__aeabi_dmul>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	460c      	mov	r4, r1
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
						//duty_cmd->target_point.z = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
						duty_cmd->target_point.roll = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a98:	3304      	adds	r3, #4
 8001a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7fe fd3d 	bl	8000524 <__aeabi_i2d>
 8001aaa:	a31d      	add	r3, pc, #116	; (adr r3, 8001b20 <packetRead+0xb98>)
 8001aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab0:	f7fe fda2 	bl	80005f8 <__aeabi_dmul>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	460c      	mov	r4, r1
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
						duty_cmd->target_point.object_type = message[temp_pointer+=4];
 8001abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac0:	3304      	adds	r3, #4
 8001ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	4413      	add	r3, r2
 8001aca:	781a      	ldrb	r2, [r3, #0]
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
						duty_cmd->target_point.t = (double)(TIM2->CNT);
 8001ad2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7fe fd13 	bl	8000504 <__aeabi_ui2d>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	460c      	mov	r4, r1
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
						duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	2201      	movs	r2, #1
 8001aec:	745a      	strb	r2, [r3, #17]
						duty_cmd->path_type = DUTY_PATH_LINE;
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	2200      	movs	r2, #0
 8001af2:	739a      	strb	r2, [r3, #14]
						duty_cmd->space_type = DUTY_SPACE_TASK;
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	2200      	movs	r2, #0
 8001af8:	735a      	strb	r2, [r3, #13]
						duty_cmd->coordinate_type = DUTY_COORDINATES_ABS;
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	2200      	movs	r2, #0
 8001afe:	731a      	strb	r2, [r3, #12]
						duty_cmd->trajec_type = DUTY_TRAJECTORY_SCURVE;
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	2201      	movs	r2, #1
 8001b04:	741a      	strb	r2, [r3, #16]
					}else{
						return CMD_ERROR;
					}
					duty_cmd->robot_method = SCARA_METHOD_PICK_AND_PLACE;
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	2204      	movs	r2, #4
 8001b0a:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	701a      	strb	r2, [r3, #0]
					return CMD_OBJECT_DETECTED;
 8001b12:	2318      	movs	r3, #24
 8001b14:	e172      	b.n	8001dfc <packetRead+0xe74>
						return CMD_ERROR;
 8001b16:	2316      	movs	r3, #22
 8001b18:	e170      	b.n	8001dfc <packetRead+0xe74>
 8001b1a:	bf00      	nop
 8001b1c:	f3af 8000 	nop.w
 8001b20:	a0000000 	.word	0xa0000000
 8001b24:	3eb0c6f7 	.word	0x3eb0c6f7
 8001b28:	2000c39c 	.word	0x2000c39c
 8001b2c:	20000000 	.word	0x20000000
 8001b30:	20000060 	.word	0x20000060
				}
				break;

				case CMD_SETUP_CONVEYOR_SPEED:
				{
					if (length == 46) { // 11 int32_t number + 2 define byte
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	2b2e      	cmp	r3, #46	; 0x2e
 8001b38:	f040 80e1 	bne.w	8001cfe <packetRead+0xd76>
						temp_pointer = -2;
 8001b3c:	f06f 0301 	mvn.w	r3, #1
 8001b40:	62fb      	str	r3, [r7, #44]	; 0x2c
						conveyor_speed           = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b44:	3304      	adds	r3, #4
 8001b46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7fe fce7 	bl	8000524 <__aeabi_i2d>
 8001b56:	a3ac      	add	r3, pc, #688	; (adr r3, 8001e08 <packetRead+0xe80>)
 8001b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5c:	f7fe fd4c 	bl	80005f8 <__aeabi_dmul>
 8001b60:	4603      	mov	r3, r0
 8001b62:	460c      	mov	r4, r1
 8001b64:	4aaa      	ldr	r2, [pc, #680]	; (8001e10 <packetRead+0xe88>)
 8001b66:	e9c2 3400 	strd	r3, r4, [r2]
						PUT_DOWN_TIME_ON_SLOT 	 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b6c:	3304      	adds	r3, #4
 8001b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	4413      	add	r3, r2
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7fe fcd3 	bl	8000524 <__aeabi_i2d>
 8001b7e:	a3a2      	add	r3, pc, #648	; (adr r3, 8001e08 <packetRead+0xe80>)
 8001b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b84:	f7fe fd38 	bl	80005f8 <__aeabi_dmul>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	460c      	mov	r4, r1
 8001b8c:	4aa1      	ldr	r2, [pc, #644]	; (8001e14 <packetRead+0xe8c>)
 8001b8e:	e9c2 3400 	strd	r3, r4, [r2]
						PUT_DOWN_TIME_ON_OBJECT	 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b94:	3304      	adds	r3, #4
 8001b96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7fe fcbf 	bl	8000524 <__aeabi_i2d>
 8001ba6:	a398      	add	r3, pc, #608	; (adr r3, 8001e08 <packetRead+0xe80>)
 8001ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bac:	f7fe fd24 	bl	80005f8 <__aeabi_dmul>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	460c      	mov	r4, r1
 8001bb4:	4a98      	ldr	r2, [pc, #608]	; (8001e18 <packetRead+0xe90>)
 8001bb6:	e9c2 3400 	strd	r3, r4, [r2]
						PICK_UP_TIME_ON_OBJECT 	 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bbc:	3304      	adds	r3, #4
 8001bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bc2:	68fa      	ldr	r2, [r7, #12]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7fe fcab 	bl	8000524 <__aeabi_i2d>
 8001bce:	a38e      	add	r3, pc, #568	; (adr r3, 8001e08 <packetRead+0xe80>)
 8001bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd4:	f7fe fd10 	bl	80005f8 <__aeabi_dmul>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	460c      	mov	r4, r1
 8001bdc:	4a8f      	ldr	r2, [pc, #572]	; (8001e1c <packetRead+0xe94>)
 8001bde:	e9c2 3400 	strd	r3, r4, [r2]
						PICK_UP_TIME_ON_SLOT	 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001be4:	3304      	adds	r3, #4
 8001be6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	4413      	add	r3, r2
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7fe fc97 	bl	8000524 <__aeabi_i2d>
 8001bf6:	a384      	add	r3, pc, #528	; (adr r3, 8001e08 <packetRead+0xe80>)
 8001bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfc:	f7fe fcfc 	bl	80005f8 <__aeabi_dmul>
 8001c00:	4603      	mov	r3, r0
 8001c02:	460c      	mov	r4, r1
 8001c04:	4a86      	ldr	r2, [pc, #536]	; (8001e20 <packetRead+0xe98>)
 8001c06:	e9c2 3400 	strd	r3, r4, [r2]
						MOVE_TIME 				 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c0c:	3304      	adds	r3, #4
 8001c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	4413      	add	r3, r2
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7fe fc83 	bl	8000524 <__aeabi_i2d>
 8001c1e:	a37a      	add	r3, pc, #488	; (adr r3, 8001e08 <packetRead+0xe80>)
 8001c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c24:	f7fe fce8 	bl	80005f8 <__aeabi_dmul>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	460c      	mov	r4, r1
 8001c2c:	4a7d      	ldr	r2, [pc, #500]	; (8001e24 <packetRead+0xe9c>)
 8001c2e:	e9c2 3400 	strd	r3, r4, [r2]
						ATTACH_TIME 			 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c34:	3304      	adds	r3, #4
 8001c36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7fe fc6f 	bl	8000524 <__aeabi_i2d>
 8001c46:	a370      	add	r3, pc, #448	; (adr r3, 8001e08 <packetRead+0xe80>)
 8001c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c4c:	f7fe fcd4 	bl	80005f8 <__aeabi_dmul>
 8001c50:	4603      	mov	r3, r0
 8001c52:	460c      	mov	r4, r1
 8001c54:	4a74      	ldr	r2, [pc, #464]	; (8001e28 <packetRead+0xea0>)
 8001c56:	e9c2 3400 	strd	r3, r4, [r2]
						DETACH_TIME 			 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c5c:	3304      	adds	r3, #4
 8001c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c62:	68fa      	ldr	r2, [r7, #12]
 8001c64:	4413      	add	r3, r2
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7fe fc5b 	bl	8000524 <__aeabi_i2d>
 8001c6e:	a366      	add	r3, pc, #408	; (adr r3, 8001e08 <packetRead+0xe80>)
 8001c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c74:	f7fe fcc0 	bl	80005f8 <__aeabi_dmul>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	460c      	mov	r4, r1
 8001c7c:	4a6b      	ldr	r2, [pc, #428]	; (8001e2c <packetRead+0xea4>)
 8001c7e:	e9c2 3400 	strd	r3, r4, [r2]
						UP_HEIGHT 				 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c84:	3304      	adds	r3, #4
 8001c86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c8a:	68fa      	ldr	r2, [r7, #12]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7fe fc47 	bl	8000524 <__aeabi_i2d>
 8001c96:	a35c      	add	r3, pc, #368	; (adr r3, 8001e08 <packetRead+0xe80>)
 8001c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c9c:	f7fe fcac 	bl	80005f8 <__aeabi_dmul>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	460c      	mov	r4, r1
 8001ca4:	4a62      	ldr	r2, [pc, #392]	; (8001e30 <packetRead+0xea8>)
 8001ca6:	e9c2 3400 	strd	r3, r4, [r2]
						DOWN_HEIGHT_ON_OBJECT 	 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cac:	3304      	adds	r3, #4
 8001cae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7fe fc33 	bl	8000524 <__aeabi_i2d>
 8001cbe:	a352      	add	r3, pc, #328	; (adr r3, 8001e08 <packetRead+0xe80>)
 8001cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc4:	f7fe fc98 	bl	80005f8 <__aeabi_dmul>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	460c      	mov	r4, r1
 8001ccc:	4a59      	ldr	r2, [pc, #356]	; (8001e34 <packetRead+0xeac>)
 8001cce:	e9c2 3400 	strd	r3, r4, [r2]
						DOWN_HEIGHT_ON_SLOT 	 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	4413      	add	r3, r2
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7fe fc1f 	bl	8000524 <__aeabi_i2d>
 8001ce6:	a348      	add	r3, pc, #288	; (adr r3, 8001e08 <packetRead+0xe80>)
 8001ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cec:	f7fe fc84 	bl	80005f8 <__aeabi_dmul>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	460c      	mov	r4, r1
 8001cf4:	4a50      	ldr	r2, [pc, #320]	; (8001e38 <packetRead+0xeb0>)
 8001cf6:	e9c2 3400 	strd	r3, r4, [r2]
						return CMD_SETUP_CONVEYOR_SPEED;
 8001cfa:	2319      	movs	r3, #25
 8001cfc:	e07e      	b.n	8001dfc <packetRead+0xe74>
					}else{
						return CMD_ERROR;
 8001cfe:	2316      	movs	r3, #22
 8001d00:	e07c      	b.n	8001dfc <packetRead+0xe74>
					}
				}
				break;
				case CMD_GCODE_CONFIGURE:
				{
					if(length == 18) { // 4 int32_t number + 2 define byte
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	2b12      	cmp	r3, #18
 8001d06:	d154      	bne.n	8001db2 <packetRead+0xe2a>
						temp_pointer = -2;
 8001d08:	f06f 0301 	mvn.w	r3, #1
 8001d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
						offset_x = 	(double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d10:	3304      	adds	r3, #4
 8001d12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	4413      	add	r3, r2
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7fe fc01 	bl	8000524 <__aeabi_i2d>
 8001d22:	a339      	add	r3, pc, #228	; (adr r3, 8001e08 <packetRead+0xe80>)
 8001d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d28:	f7fe fc66 	bl	80005f8 <__aeabi_dmul>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	460c      	mov	r4, r1
 8001d30:	4a42      	ldr	r2, [pc, #264]	; (8001e3c <packetRead+0xeb4>)
 8001d32:	e9c2 3400 	strd	r3, r4, [r2]
						offset_y = 	(double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d38:	3304      	adds	r3, #4
 8001d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	4413      	add	r3, r2
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7fe fbed 	bl	8000524 <__aeabi_i2d>
 8001d4a:	a32f      	add	r3, pc, #188	; (adr r3, 8001e08 <packetRead+0xe80>)
 8001d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d50:	f7fe fc52 	bl	80005f8 <__aeabi_dmul>
 8001d54:	4603      	mov	r3, r0
 8001d56:	460c      	mov	r4, r1
 8001d58:	4a39      	ldr	r2, [pc, #228]	; (8001e40 <packetRead+0xeb8>)
 8001d5a:	e9c2 3400 	strd	r3, r4, [r2]
						offset_z = 	(double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d60:	3304      	adds	r3, #4
 8001d62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	4413      	add	r3, r2
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7fe fbd9 	bl	8000524 <__aeabi_i2d>
 8001d72:	a325      	add	r3, pc, #148	; (adr r3, 8001e08 <packetRead+0xe80>)
 8001d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d78:	f7fe fc3e 	bl	80005f8 <__aeabi_dmul>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	460c      	mov	r4, r1
 8001d80:	4a30      	ldr	r2, [pc, #192]	; (8001e44 <packetRead+0xebc>)
 8001d82:	e9c2 3400 	strd	r3, r4, [r2]
						roll_angle =(double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d88:	3304      	adds	r3, #4
 8001d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	4413      	add	r3, r2
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7fe fbc5 	bl	8000524 <__aeabi_i2d>
 8001d9a:	a31b      	add	r3, pc, #108	; (adr r3, 8001e08 <packetRead+0xe80>)
 8001d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da0:	f7fe fc2a 	bl	80005f8 <__aeabi_dmul>
 8001da4:	4603      	mov	r3, r0
 8001da6:	460c      	mov	r4, r1
 8001da8:	4a27      	ldr	r2, [pc, #156]	; (8001e48 <packetRead+0xec0>)
 8001daa:	e9c2 3400 	strd	r3, r4, [r2]
						return CMD_GCODE_CONFIGURE;
 8001dae:	2311      	movs	r3, #17
 8001db0:	e024      	b.n	8001dfc <packetRead+0xe74>
					}else{
						return CMD_ERROR;
 8001db2:	2316      	movs	r3, #22
 8001db4:	e022      	b.n	8001dfc <packetRead+0xe74>
					}
				}
				break;
				case CMD_GCODE_RUN:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	2202      	movs	r2, #2
 8001dba:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_RUN;
 8001dc2:	2313      	movs	r3, #19
 8001dc4:	e01a      	b.n	8001dfc <packetRead+0xe74>
				}
				break;
				case CMD_GCODE_STOP:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	2202      	movs	r2, #2
 8001dca:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_STOP;
 8001dd2:	230d      	movs	r3, #13
 8001dd4:	e012      	b.n	8001dfc <packetRead+0xe74>
				}
				break;
				case CMD_GCODE_PAUSE:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	2202      	movs	r2, #2
 8001dda:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	2200      	movs	r2, #0
 8001de0:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_PAUSE;
 8001de2:	230e      	movs	r3, #14
 8001de4:	e00a      	b.n	8001dfc <packetRead+0xe74>
				}
				break;
				case CMD_GCODE_RESUME:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	2202      	movs	r2, #2
 8001dea:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	2200      	movs	r2, #0
 8001df0:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_RESUME;
 8001df2:	2312      	movs	r3, #18
 8001df4:	e002      	b.n	8001dfc <packetRead+0xe74>
				}
				break;
				//Unknow command id
				default:
				{
					return CMD_ERROR;
 8001df6:	2316      	movs	r3, #22
 8001df8:	e000      	b.n	8001dfc <packetRead+0xe74>
        break;

        //unknow protocol id
        default:
        {
            return PROTOCOL_ERROR;
 8001dfa:	2317      	movs	r3, #23
        }
    }
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3734      	adds	r7, #52	; 0x34
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd90      	pop	{r4, r7, pc}
 8001e04:	f3af 8000 	nop.w
 8001e08:	a0000000 	.word	0xa0000000
 8001e0c:	3eb0c6f7 	.word	0x3eb0c6f7
 8001e10:	20000058 	.word	0x20000058
 8001e14:	20000008 	.word	0x20000008
 8001e18:	20000010 	.word	0x20000010
 8001e1c:	20000018 	.word	0x20000018
 8001e20:	20000020 	.word	0x20000020
 8001e24:	20000028 	.word	0x20000028
 8001e28:	20000030 	.word	0x20000030
 8001e2c:	20000038 	.word	0x20000038
 8001e30:	20000040 	.word	0x20000040
 8001e34:	20000048 	.word	0x20000048
 8001e38:	20000050 	.word	0x20000050
 8001e3c:	200065d0 	.word	0x200065d0
 8001e40:	2000c3a8 	.word	0x2000c3a8
 8001e44:	2000c3a0 	.word	0x2000c3a0
 8001e48:	200065c8 	.word	0x200065c8

08001e4c <commandReply>:

Robot_RespondTypedef	commandReply	(Robot_CommandTypedef cmd_type,
										DUTY_Command_TypeDef duty_cmd,
										uint8_t *detail, int32_t *detail_length) {
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b0e2      	sub	sp, #392	; 0x188
 8001e52:	af2e      	add	r7, sp, #184	; 0xb8
 8001e54:	4601      	mov	r1, r0
 8001e56:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 8001e5a:	e880 000c 	stmia.w	r0, {r2, r3}
 8001e5e:	460b      	mov	r3, r1
 8001e60:	71fb      	strb	r3, [r7, #7]
	Robot_RespondTypedef ret;

	switch(cmd_type) {
 8001e62:	79fb      	ldrb	r3, [r7, #7]
 8001e64:	2b1a      	cmp	r3, #26
 8001e66:	f200 815e 	bhi.w	8002126 <commandReply+0x2da>
 8001e6a:	a201      	add	r2, pc, #4	; (adr r2, 8001e70 <commandReply+0x24>)
 8001e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e70:	08001edd 	.word	0x08001edd
 8001e74:	08001edd 	.word	0x08001edd
 8001e78:	08001edd 	.word	0x08001edd
 8001e7c:	08001edd 	.word	0x08001edd
 8001e80:	08001edd 	.word	0x08001edd
 8001e84:	08001edd 	.word	0x08001edd
 8001e88:	08001edd 	.word	0x08001edd
 8001e8c:	08001ee5 	.word	0x08001ee5
 8001e90:	08001f5f 	.word	0x08001f5f
 8001e94:	08001f93 	.word	0x08001f93
 8001e98:	08002029 	.word	0x08002029
 8001e9c:	08002053 	.word	0x08002053
 8001ea0:	08001edd 	.word	0x08001edd
 8001ea4:	080020b5 	.word	0x080020b5
 8001ea8:	080020b5 	.word	0x080020b5
 8001eac:	080020b5 	.word	0x080020b5
 8001eb0:	080020b5 	.word	0x080020b5
 8001eb4:	08002093 	.word	0x08002093
 8001eb8:	080020b5 	.word	0x080020b5
 8001ebc:	080020b5 	.word	0x080020b5
 8001ec0:	080020bd 	.word	0x080020bd
 8001ec4:	080020c5 	.word	0x080020c5
 8001ec8:	08002105 	.word	0x08002105
 8001ecc:	08002127 	.word	0x08002127
 8001ed0:	08001edd 	.word	0x08001edd
 8001ed4:	0800204b 	.word	0x0800204b
 8001ed8:	0800205b 	.word	0x0800205b
	case CMD_MOTOR_TEST:
	case CMD_MOVE_CIRCLE:
	case CMD_MOVE_JOINT:
	case CMD_OBJECT_DETECTED:
	case CMD_ROTATE_SINGLE:
		ret = RPD_DUTY;
 8001edc:	2309      	movs	r3, #9
 8001ede:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8001ee2:	e130      	b.n	8002146 <commandReply+0x2fa>
	case CMD_OUTPUT:
		{
			if (1 == duty_cmd.arc_dir) {
 8001ee4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d110      	bne.n	8001f0e <commandReply+0xc2>
				scaraSetOutput(1);
 8001eec:	2001      	movs	r0, #1
 8001eee:	f007 fbcb 	bl	8009688 <scaraSetOutput>
				// strcpy( (char *)detail, "Output ON");
				// detail_length += 9;
				detail[(*detail_length)++] = OUTPUT_ON;
 8001ef2:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	1c59      	adds	r1, r3, #1
 8001efa:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001efe:	6011      	str	r1, [r2, #0]
 8001f00:	461a      	mov	r2, r3
 8001f02:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001f06:	4413      	add	r3, r2
 8001f08:	220d      	movs	r2, #13
 8001f0a:	701a      	strb	r2, [r3, #0]
 8001f0c:	e023      	b.n	8001f56 <commandReply+0x10a>
			} else if (0 == duty_cmd.arc_dir) {
 8001f0e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d110      	bne.n	8001f38 <commandReply+0xec>
				scaraSetOutput(0);
 8001f16:	2000      	movs	r0, #0
 8001f18:	f007 fbb6 	bl	8009688 <scaraSetOutput>
				detail[(*detail_length)++] = OUTPUT_OFF;
 8001f1c:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	1c59      	adds	r1, r3, #1
 8001f24:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001f28:	6011      	str	r1, [r2, #0]
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001f30:	4413      	add	r3, r2
 8001f32:	220e      	movs	r2, #14
 8001f34:	701a      	strb	r2, [r3, #0]
 8001f36:	e00e      	b.n	8001f56 <commandReply+0x10a>
			} else {
				// strcpy( (char *)detail, "Wrong Value");
				// detail_length += 11;
				detail[(*detail_length)++] = WRONG_OUTPUT_VALUE ;
 8001f38:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	1c59      	adds	r1, r3, #1
 8001f40:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001f44:	6011      	str	r1, [r2, #0]
 8001f46:	461a      	mov	r2, r3
 8001f48:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001f4c:	4413      	add	r3, r2
 8001f4e:	220f      	movs	r2, #15
 8001f50:	701a      	strb	r2, [r3, #0]
				return RPD_ERROR;
 8001f52:	2307      	movs	r3, #7
 8001f54:	e0f9      	b.n	800214a <commandReply+0x2fe>
			}
			ret = RPD_OK;
 8001f56:	2308      	movs	r3, #8
 8001f58:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		}
		break;
 8001f5c:	e0f3      	b.n	8002146 <commandReply+0x2fa>
	case CMD_READ_STATUS:
		{
			SCARA_ModeTypeDef		current_mode;
			SCARA_DutyStateTypeDef 	current_state;
			current_mode	 = scaraGetMode();
 8001f5e:	f007 fbf5 	bl	800974c <scaraGetMode>
 8001f62:	4603      	mov	r3, r0
 8001f64:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
			current_state	 = scaraGetDutyState();
 8001f68:	f007 fc08 	bl	800977c <scaraGetDutyState>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
			if ( SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_state) {
 8001f72:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d107      	bne.n	8001f8a <commandReply+0x13e>
 8001f7a:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d103      	bne.n	8001f8a <commandReply+0x13e>
				ret = RPD_IDLE;
 8001f82:	2300      	movs	r3, #0
 8001f84:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			} else {
				ret = RPD_BUSY;
			}
		}
		break;
 8001f88:	e0dd      	b.n	8002146 <commandReply+0x2fa>
				ret = RPD_BUSY;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8001f90:	e0d9      	b.n	8002146 <commandReply+0x2fa>
	case CMD_READ_POSITION:
		{
			SCARA_PositionTypeDef position;
			if(position_type == REAL_POSITION_DATA || position_type == REAL_POSITION_DATA_PLUS_UPDATE){
 8001f92:	4b71      	ldr	r3, [pc, #452]	; (8002158 <commandReply+0x30c>)
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <commandReply+0x156>
 8001f9a:	4b6f      	ldr	r3, [pc, #444]	; (8002158 <commandReply+0x30c>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d113      	bne.n	8001fca <commandReply+0x17e>
				lowlayer_readTruePosition(&position);
 8001fa2:	f107 0308 	add.w	r3, r7, #8
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f003 f8e6 	bl	8005178 <lowlayer_readTruePosition>
				kinematicForward(&position);
 8001fac:	f107 0308 	add.w	r3, r7, #8
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f002 f99d 	bl	80042f0 <kinematicForward>
				if(position_type == REAL_POSITION_DATA_PLUS_UPDATE){
 8001fb6:	4b68      	ldr	r3, [pc, #416]	; (8002158 <commandReply+0x30c>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d11e      	bne.n	8001ffc <commandReply+0x1b0>
					scaraUpdatePosition(&position);
 8001fbe:	f107 0308 	add.w	r3, r7, #8
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f007 fbb2 	bl	800972c <scaraUpdatePosition>
				if(position_type == REAL_POSITION_DATA_PLUS_UPDATE){
 8001fc8:	e018      	b.n	8001ffc <commandReply+0x1b0>
				}
			}else if(position_type == ESTIMATE_POSITION_DATA){
 8001fca:	4b63      	ldr	r3, [pc, #396]	; (8002158 <commandReply+0x30c>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d105      	bne.n	8001fde <commandReply+0x192>
				scaraGetPosition(&position);
 8001fd2:	f107 0308 	add.w	r3, r7, #8
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f007 fb98 	bl	800970c <scaraGetPosition>
 8001fdc:	e00e      	b.n	8001ffc <commandReply+0x1b0>
			}else{
				detail[(*detail_length)++] = WRONG_READ_POSITION_TYPE;
 8001fde:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	1c59      	adds	r1, r3, #1
 8001fe6:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001fea:	6011      	str	r1, [r2, #0]
 8001fec:	461a      	mov	r2, r3
 8001fee:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001ff2:	4413      	add	r3, r2
 8001ff4:	2210      	movs	r2, #16
 8001ff6:	701a      	strb	r2, [r3, #0]
				return RPD_ERROR;
 8001ff8:	2307      	movs	r3, #7
 8001ffa:	e0a6      	b.n	800214a <commandReply+0x2fe>
			}
			*detail_length = scaraPosition_packaging(detail, position);
 8001ffc:	4668      	mov	r0, sp
 8001ffe:	f107 0310 	add.w	r3, r7, #16
 8002002:	22b8      	movs	r2, #184	; 0xb8
 8002004:	4619      	mov	r1, r3
 8002006:	f012 fed9 	bl	8014dbc <memcpy>
 800200a:	f107 0308 	add.w	r3, r7, #8
 800200e:	cb0c      	ldmia	r3, {r2, r3}
 8002010:	f8d7 0298 	ldr.w	r0, [r7, #664]	; 0x298
 8002014:	f007 fbe8 	bl	80097e8 <scaraPosition_packaging>
 8002018:	4602      	mov	r2, r0
 800201a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800201e:	601a      	str	r2, [r3, #0]
			ret =  RPD_POSITION;
 8002020:	2302      	movs	r3, #2
 8002022:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		}
		break;
 8002026:	e08e      	b.n	8002146 <commandReply+0x2fa>
	case CMD_TEST_METHOD_SETTING:
		detail[(*detail_length)++] = TEST_VALUE_SETTING;
 8002028:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	1c59      	adds	r1, r3, #1
 8002030:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002034:	6011      	str	r1, [r2, #0]
 8002036:	461a      	mov	r2, r3
 8002038:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800203c:	4413      	add	r3, r2
 800203e:	2211      	movs	r2, #17
 8002040:	701a      	strb	r2, [r3, #0]
		ret = RPD_OK;
 8002042:	2308      	movs	r3, #8
 8002044:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8002048:	e07d      	b.n	8002146 <commandReply+0x2fa>
	case CMD_SETUP_CONVEYOR_SPEED:
		ret = RPD_OK;
 800204a:	2308      	movs	r3, #8
 800204c:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8002050:	e079      	b.n	8002146 <commandReply+0x2fa>
	case CMD_METHOD_CHANGE:
		ret = RPD_DUTY;
 8002052:	2309      	movs	r3, #9
 8002054:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8002058:	e075      	b.n	8002146 <commandReply+0x2fa>
	case CMD_GCODE:{
		if(point_counter == total_num_of_point){
 800205a:	4b40      	ldr	r3, [pc, #256]	; (800215c <commandReply+0x310>)
 800205c:	881b      	ldrh	r3, [r3, #0]
 800205e:	461a      	mov	r2, r3
 8002060:	4b3f      	ldr	r3, [pc, #252]	; (8002160 <commandReply+0x314>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	429a      	cmp	r2, r3
 8002066:	d110      	bne.n	800208a <commandReply+0x23e>
			detail[(*detail_length)++] = GCODE_TRANSFER_FINISH;
 8002068:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	1c59      	adds	r1, r3, #1
 8002070:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002074:	6011      	str	r1, [r2, #0]
 8002076:	461a      	mov	r2, r3
 8002078:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800207c:	4413      	add	r3, r2
 800207e:	221e      	movs	r2, #30
 8002080:	701a      	strb	r2, [r3, #0]
			ret = RPD_OK;
 8002082:	2308      	movs	r3, #8
 8002084:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		}else{
			ret = RPD_TRANSFER;
		}
	}
	break;
 8002088:	e05d      	b.n	8002146 <commandReply+0x2fa>
			ret = RPD_TRANSFER;
 800208a:	230a      	movs	r3, #10
 800208c:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	break;
 8002090:	e059      	b.n	8002146 <commandReply+0x2fa>
	case CMD_GCODE_CONFIGURE:
	{
		detail[(*detail_length)++] = GCODE_OFFSET_CONFIGURE;
 8002092:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	1c59      	adds	r1, r3, #1
 800209a:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 800209e:	6011      	str	r1, [r2, #0]
 80020a0:	461a      	mov	r2, r3
 80020a2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80020a6:	4413      	add	r3, r2
 80020a8:	221f      	movs	r2, #31
 80020aa:	701a      	strb	r2, [r3, #0]
		ret = RPD_OK;
 80020ac:	2308      	movs	r3, #8
 80020ae:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	}
	break;
 80020b2:	e048      	b.n	8002146 <commandReply+0x2fa>
	case CMD_GCODE_PAUSE:
	case CMD_JOB_PUSH_MOVE_LINE:
	case CMD_JOB_PUSH_MOVE_JOINT:
	case CMD_GCODE_RESUME:
	case CMD_GCODE_RUN:
		ret = RPD_DUTY;
 80020b4:	2309      	movs	r3, #9
 80020b6:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 80020ba:	e044      	b.n	8002146 <commandReply+0x2fa>
	case CMD_KEYBOARD:
		ret = RPD_DUTY;
 80020bc:	2309      	movs	r3, #9
 80020be:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 80020c2:	e040      	b.n	8002146 <commandReply+0x2fa>
	case CMD_KEY_SPEED:
		// sprintf((char*) detail, "MANUAL SPEED = %d", duty_cmd.key_speed);
		detail[(*detail_length)++] = MANUAL_SPEED;
 80020c4:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	1c59      	adds	r1, r3, #1
 80020cc:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80020d0:	6011      	str	r1, [r2, #0]
 80020d2:	461a      	mov	r2, r3
 80020d4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80020d8:	4413      	add	r3, r2
 80020da:	2216      	movs	r2, #22
 80020dc:	701a      	strb	r2, [r3, #0]
		detail[(*detail_length)++] = (uint8_t)(duty_cmd.key_speed);
 80020de:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80020e2:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	1c59      	adds	r1, r3, #1
 80020ea:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80020ee:	6011      	str	r1, [r2, #0]
 80020f0:	461a      	mov	r2, r3
 80020f2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80020f6:	4413      	add	r3, r2
 80020f8:	b2c2      	uxtb	r2, r0
 80020fa:	701a      	strb	r2, [r3, #0]
		ret = RPD_OK;
 80020fc:	2308      	movs	r3, #8
 80020fe:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8002102:	e020      	b.n	8002146 <commandReply+0x2fa>
	case CMD_ERROR:
		// strcpy( (char *)detail, "Check parameters");
		detail[(*detail_length)++] = CHECK_PARAMETER;
 8002104:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	1c59      	adds	r1, r3, #1
 800210c:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002110:	6011      	str	r1, [r2, #0]
 8002112:	461a      	mov	r2, r3
 8002114:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8002118:	4413      	add	r3, r2
 800211a:	2215      	movs	r2, #21
 800211c:	701a      	strb	r2, [r3, #0]
		ret = RPD_ERROR;
 800211e:	2307      	movs	r3, #7
 8002120:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8002124:	e00f      	b.n	8002146 <commandReply+0x2fa>
	default:
		// strcpy( (char *)detail, "Unknown command");
		detail[(*detail_length)++] = UNKNOW_COMMAND;
 8002126:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	1c59      	adds	r1, r3, #1
 800212e:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002132:	6011      	str	r1, [r2, #0]
 8002134:	461a      	mov	r2, r3
 8002136:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800213a:	4413      	add	r3, r2
 800213c:	2217      	movs	r2, #23
 800213e:	701a      	strb	r2, [r3, #0]
		ret = RPD_ERROR;
 8002140:	2307      	movs	r3, #7
 8002142:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	}
	return ret;
 8002146:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
}
 800214a:	4618      	mov	r0, r3
 800214c:	37d0      	adds	r7, #208	; 0xd0
 800214e:	46bd      	mov	sp, r7
 8002150:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002154:	b002      	add	sp, #8
 8002156:	4770      	bx	lr
 8002158:	2000c39c 	.word	0x2000c39c
 800215c:	200023fc 	.word	0x200023fc
 8002160:	200065d8 	.word	0x200065d8

08002164 <commandRespond1>:

int32_t				commandRespond1	(Robot_RespondTypedef rpd,
										int32_t id_command,
										char *detail,
										int32_t detail_length,
										char *respond) {
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	60b9      	str	r1, [r7, #8]
 800216c:	607a      	str	r2, [r7, #4]
 800216e:	603b      	str	r3, [r7, #0]
 8002170:	4603      	mov	r3, r0
 8002172:	73fb      	strb	r3, [r7, #15]
	int32_t out_length = 0;
 8002174:	2300      	movs	r3, #0
 8002176:	617b      	str	r3, [r7, #20]
	respond[out_length++] = 0x28;
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	1c5a      	adds	r2, r3, #1
 800217c:	617a      	str	r2, [r7, #20]
 800217e:	461a      	mov	r2, r3
 8002180:	6a3b      	ldr	r3, [r7, #32]
 8002182:	4413      	add	r3, r2
 8002184:	2228      	movs	r2, #40	; 0x28
 8002186:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = 0;
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	1c5a      	adds	r2, r3, #1
 800218c:	617a      	str	r2, [r7, #20]
 800218e:	461a      	mov	r2, r3
 8002190:	6a3b      	ldr	r3, [r7, #32]
 8002192:	4413      	add	r3, r2
 8002194:	2200      	movs	r2, #0
 8002196:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = RESPONSE_TRANSMISION;
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	1c5a      	adds	r2, r3, #1
 800219c:	617a      	str	r2, [r7, #20]
 800219e:	461a      	mov	r2, r3
 80021a0:	6a3b      	ldr	r3, [r7, #32]
 80021a2:	4413      	add	r3, r2
 80021a4:	2202      	movs	r2, #2
 80021a6:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = rpd;
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	1c5a      	adds	r2, r3, #1
 80021ac:	617a      	str	r2, [r7, #20]
 80021ae:	461a      	mov	r2, r3
 80021b0:	6a3b      	ldr	r3, [r7, #32]
 80021b2:	4413      	add	r3, r2
 80021b4:	7bfa      	ldrb	r2, [r7, #15]
 80021b6:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = id_command;
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	1c5a      	adds	r2, r3, #1
 80021bc:	617a      	str	r2, [r7, #20]
 80021be:	461a      	mov	r2, r3
 80021c0:	6a3b      	ldr	r3, [r7, #32]
 80021c2:	4413      	add	r3, r2
 80021c4:	68ba      	ldr	r2, [r7, #8]
 80021c6:	b2d2      	uxtb	r2, r2
 80021c8:	701a      	strb	r2, [r3, #0]
	if(detail_length != 0){
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00c      	beq.n	80021ea <commandRespond1+0x86>
		memcpy(&respond[out_length], detail, detail_length);
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	6a3a      	ldr	r2, [r7, #32]
 80021d4:	4413      	add	r3, r2
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	6879      	ldr	r1, [r7, #4]
 80021da:	4618      	mov	r0, r3
 80021dc:	f012 fdee 	bl	8014dbc <memcpy>
		out_length += detail_length;
 80021e0:	697a      	ldr	r2, [r7, #20]
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	4413      	add	r3, r2
 80021e6:	617b      	str	r3, [r7, #20]
 80021e8:	e007      	b.n	80021fa <commandRespond1+0x96>
	}else{
		respond[out_length++] = NONE;
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	1c5a      	adds	r2, r3, #1
 80021ee:	617a      	str	r2, [r7, #20]
 80021f0:	461a      	mov	r2, r3
 80021f2:	6a3b      	ldr	r3, [r7, #32]
 80021f4:	4413      	add	r3, r2
 80021f6:	2225      	movs	r2, #37	; 0x25
 80021f8:	701a      	strb	r2, [r3, #0]
	}
	respond[out_length++] = 0x7d;
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	1c5a      	adds	r2, r3, #1
 80021fe:	617a      	str	r2, [r7, #20]
 8002200:	461a      	mov	r2, r3
 8002202:	6a3b      	ldr	r3, [r7, #32]
 8002204:	4413      	add	r3, r2
 8002206:	227d      	movs	r2, #125	; 0x7d
 8002208:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = 0x29;
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	1c5a      	adds	r2, r3, #1
 800220e:	617a      	str	r2, [r7, #20]
 8002210:	461a      	mov	r2, r3
 8002212:	6a3b      	ldr	r3, [r7, #32]
 8002214:	4413      	add	r3, r2
 8002216:	2229      	movs	r2, #41	; 0x29
 8002218:	701a      	strb	r2, [r3, #0]
	respond[1] = out_length - 2;
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	b2da      	uxtb	r2, r3
 800221e:	6a3b      	ldr	r3, [r7, #32]
 8002220:	3301      	adds	r3, #1
 8002222:	3a02      	subs	r2, #2
 8002224:	b2d2      	uxtb	r2, r2
 8002226:	701a      	strb	r2, [r3, #0]
	return out_length;
 8002228:	697b      	ldr	r3, [r7, #20]
}
 800222a:	4618      	mov	r0, r3
 800222c:	3718      	adds	r7, #24
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
	...

08002234 <LOG_REPORT>:
 *  line		: line code number
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t LOG_REPORT(char *message, uint16_t line) {
 8002234:	b580      	push	{r7, lr}
 8002236:	b096      	sub	sp, #88	; 0x58
 8002238:	af02      	add	r7, sp, #8
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	460b      	mov	r3, r1
 800223e:	807b      	strh	r3, [r7, #2]
	uint8_t temp_buff[64];
	int32_t len;

	len = snprintf((char*)temp_buff, 63, "%d, %s \r\n", line, message);
 8002240:	887a      	ldrh	r2, [r7, #2]
 8002242:	f107 0008 	add.w	r0, r7, #8
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	4613      	mov	r3, r2
 800224c:	4a17      	ldr	r2, [pc, #92]	; (80022ac <LOG_REPORT+0x78>)
 800224e:	213f      	movs	r1, #63	; 0x3f
 8002250:	f013 fcdc 	bl	8015c0c <sniprintf>
 8002254:	64f8      	str	r0, [r7, #76]	; 0x4c
	if (-1 == len) {
 8002256:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800225c:	d101      	bne.n	8002262 <LOG_REPORT+0x2e>
		return FALSE;
 800225e:	2300      	movs	r3, #0
 8002260:	e01f      	b.n	80022a2 <LOG_REPORT+0x6e>
	}
	ringBuff_PushArray(&uart_tx_ringbuff, temp_buff, len);
 8002262:	f107 0308 	add.w	r3, r7, #8
 8002266:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002268:	4619      	mov	r1, r3
 800226a:	4811      	ldr	r0, [pc, #68]	; (80022b0 <LOG_REPORT+0x7c>)
 800226c:	f002 fca0 	bl	8004bb0 <ringBuff_PushArray>
	if (HAL_DMA_GetState(&hdma_uart4_tx) == HAL_DMA_STATE_BUSY) {
 8002270:	4810      	ldr	r0, [pc, #64]	; (80022b4 <LOG_REPORT+0x80>)
 8002272:	f008 fd85 	bl	800ad80 <HAL_DMA_GetState>
 8002276:	4603      	mov	r3, r0
 8002278:	2b02      	cmp	r3, #2
 800227a:	d101      	bne.n	8002280 <LOG_REPORT+0x4c>
		return TRUE;
 800227c:	2301      	movs	r3, #1
 800227e:	e010      	b.n	80022a2 <LOG_REPORT+0x6e>
	}// dma busy
	uint16_t size_dma;
	size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 8002280:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002284:	490c      	ldr	r1, [pc, #48]	; (80022b8 <LOG_REPORT+0x84>)
 8002286:	480a      	ldr	r0, [pc, #40]	; (80022b0 <LOG_REPORT+0x7c>)
 8002288:	f002 fcba 	bl	8004c00 <ringBuff_PopArray>
 800228c:	4603      	mov	r3, r0
 800228e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 8002292:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002296:	461a      	mov	r2, r3
 8002298:	4907      	ldr	r1, [pc, #28]	; (80022b8 <LOG_REPORT+0x84>)
 800229a:	4808      	ldr	r0, [pc, #32]	; (80022bc <LOG_REPORT+0x88>)
 800229c:	f00b faf0 	bl	800d880 <HAL_UART_Transmit_DMA>
	return TRUE;
 80022a0:	2301      	movs	r3, #1
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3750      	adds	r7, #80	; 0x50
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	0801a2a0 	.word	0x0801a2a0
 80022b0:	20001070 	.word	0x20001070
 80022b4:	2000d480 	.word	0x2000d480
 80022b8:	2000c3b0 	.word	0x2000c3b0
 80022bc:	2000d440 	.word	0x2000d440

080022c0 <unPackPayload>:
 *  in_lenght		: lenght of input_buff
 *
 *  returns:		: lenght of output_buff
 *  				  -1 if error
 */
int32_t	unPackPayload	(uint8_t *message_buff, int32_t in_length, uint8_t*data_packet) {
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]

	int32_t data_length = in_length - 2;
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	3b02      	subs	r3, #2
 80022d0:	617b      	str	r3, [r7, #20]
	//check packet length
	if(message_buff[1] == data_length && backup_available == 0){
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	3301      	adds	r3, #1
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	461a      	mov	r2, r3
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	4293      	cmp	r3, r2
 80022de:	d119      	bne.n	8002314 <unPackPayload+0x54>
 80022e0:	4b2e      	ldr	r3, [pc, #184]	; (800239c <unPackPayload+0xdc>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d115      	bne.n	8002314 <unPackPayload+0x54>
		// check minimum lenght
		if (in_length < MIN_MESSAGE_LENGHT) {
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	2b03      	cmp	r3, #3
 80022ec:	dc02      	bgt.n	80022f4 <unPackPayload+0x34>
			return -1;
 80022ee:	f04f 33ff 	mov.w	r3, #4294967295
 80022f2:	e04f      	b.n	8002394 <unPackPayload+0xd4>
		}

		// check start char
		if(message_buff[0] != START_CHAR){
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	2b28      	cmp	r3, #40	; 0x28
 80022fa:	d002      	beq.n	8002302 <unPackPayload+0x42>
			return -1;
 80022fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002300:	e048      	b.n	8002394 <unPackPayload+0xd4>
		}
		memcpy(data_packet, &message_buff[2], data_length - RECEIVE_END_LENGTH);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	1c99      	adds	r1, r3, #2
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	3b02      	subs	r3, #2
 800230a:	461a      	mov	r2, r3
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f012 fd55 	bl	8014dbc <memcpy>
 8002312:	e03d      	b.n	8002390 <unPackPayload+0xd0>
	}else if(message_buff[1] != data_length && backup_available == 0){
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	3301      	adds	r3, #1
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	461a      	mov	r2, r3
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	4293      	cmp	r3, r2
 8002320:	d01b      	beq.n	800235a <unPackPayload+0x9a>
 8002322:	4b1e      	ldr	r3, [pc, #120]	; (800239c <unPackPayload+0xdc>)
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d117      	bne.n	800235a <unPackPayload+0x9a>
		backup_available = 1;
 800232a:	4b1c      	ldr	r3, [pc, #112]	; (800239c <unPackPayload+0xdc>)
 800232c:	2201      	movs	r2, #1
 800232e:	701a      	strb	r2, [r3, #0]
		// check start char
		if(message_buff[0] != START_CHAR){
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	2b28      	cmp	r3, #40	; 0x28
 8002336:	d002      	beq.n	800233e <unPackPayload+0x7e>
			return -1;
 8002338:	f04f 33ff 	mov.w	r3, #4294967295
 800233c:	e02a      	b.n	8002394 <unPackPayload+0xd4>
		}
		memcpy(data_packet, &message_buff[2], data_length);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	3302      	adds	r3, #2
 8002342:	697a      	ldr	r2, [r7, #20]
 8002344:	4619      	mov	r1, r3
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f012 fd38 	bl	8014dbc <memcpy>
		backup_length = data_length;
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	b2da      	uxtb	r2, r3
 8002350:	4b13      	ldr	r3, [pc, #76]	; (80023a0 <unPackPayload+0xe0>)
 8002352:	701a      	strb	r2, [r3, #0]
		return - 1;
 8002354:	f04f 33ff 	mov.w	r3, #4294967295
 8002358:	e01c      	b.n	8002394 <unPackPayload+0xd4>
	}else if(backup_available == 1){
 800235a:	4b10      	ldr	r3, [pc, #64]	; (800239c <unPackPayload+0xdc>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d113      	bne.n	800238a <unPackPayload+0xca>
		backup_available = 0;
 8002362:	4b0e      	ldr	r3, [pc, #56]	; (800239c <unPackPayload+0xdc>)
 8002364:	2200      	movs	r2, #0
 8002366:	701a      	strb	r2, [r3, #0]
		memcpy(&data_packet[backup_length], message_buff, in_length);
 8002368:	4b0d      	ldr	r3, [pc, #52]	; (80023a0 <unPackPayload+0xe0>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	461a      	mov	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4413      	add	r3, r2
 8002372:	68ba      	ldr	r2, [r7, #8]
 8002374:	68f9      	ldr	r1, [r7, #12]
 8002376:	4618      	mov	r0, r3
 8002378:	f012 fd20 	bl	8014dbc <memcpy>
		data_length = backup_length + in_length;
 800237c:	4b08      	ldr	r3, [pc, #32]	; (80023a0 <unPackPayload+0xe0>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	461a      	mov	r2, r3
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	4413      	add	r3, r2
 8002386:	617b      	str	r3, [r7, #20]
 8002388:	e002      	b.n	8002390 <unPackPayload+0xd0>
	}else{
		return - 1;
 800238a:	f04f 33ff 	mov.w	r3, #4294967295
 800238e:	e001      	b.n	8002394 <unPackPayload+0xd4>
	}


	return data_length - RECEIVE_END_LENGTH;
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	3b02      	subs	r3, #2
}
 8002394:	4618      	mov	r0, r3
 8002396:	3718      	adds	r7, #24
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	2000c4b0 	.word	0x2000c4b0
 80023a0:	2000c4b1 	.word	0x2000c4b1

080023a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	607b      	str	r3, [r7, #4]
 80023ae:	4b0c      	ldr	r3, [pc, #48]	; (80023e0 <MX_DMA_Init+0x3c>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	4a0b      	ldr	r2, [pc, #44]	; (80023e0 <MX_DMA_Init+0x3c>)
 80023b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023b8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ba:	4b09      	ldr	r3, [pc, #36]	; (80023e0 <MX_DMA_Init+0x3c>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023c2:	607b      	str	r3, [r7, #4]
 80023c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 80023c6:	2200      	movs	r2, #0
 80023c8:	2105      	movs	r1, #5
 80023ca:	200f      	movs	r0, #15
 80023cc:	f008 f9fc 	bl	800a7c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80023d0:	200f      	movs	r0, #15
 80023d2:	f008 fa15 	bl	800a800 <HAL_NVIC_EnableIRQ>

}
 80023d6:	bf00      	nop
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40023800 	.word	0x40023800

080023e4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	4a07      	ldr	r2, [pc, #28]	; (8002410 <vApplicationGetIdleTaskMemory+0x2c>)
 80023f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	4a06      	ldr	r2, [pc, #24]	; (8002414 <vApplicationGetIdleTaskMemory+0x30>)
 80023fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002402:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8002404:	bf00      	nop
 8002406:	3714      	adds	r7, #20
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	20002400 	.word	0x20002400
 8002414:	20002454 	.word	0x20002454

08002418 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002418:	b5b0      	push	{r4, r5, r7, lr}
 800241a:	b094      	sub	sp, #80	; 0x50
 800241c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
       
  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of usbTxMutex */
  osMutexDef(usbTxMutex);
 800241e:	2300      	movs	r3, #0
 8002420:	64bb      	str	r3, [r7, #72]	; 0x48
 8002422:	2300      	movs	r3, #0
 8002424:	64fb      	str	r3, [r7, #76]	; 0x4c
  usbTxMutexHandle = osMutexCreate(osMutex(usbTxMutex));
 8002426:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800242a:	4618      	mov	r0, r3
 800242c:	f00f fa04 	bl	8011838 <osMutexCreate>
 8002430:	4602      	mov	r2, r0
 8002432:	4b1d      	ldr	r3, [pc, #116]	; (80024a8 <MX_FREERTOS_Init+0x90>)
 8002434:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	  /* Create the queue(s) */
	  /* definition and creation of commandMail */
	  osMailQDef(commandMail, 1, DUTY_Command_TypeDef);
 8002436:	2301      	movs	r3, #1
 8002438:	63bb      	str	r3, [r7, #56]	; 0x38
 800243a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800243e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002440:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002444:	643b      	str	r3, [r7, #64]	; 0x40
	  commandMailHandle = osMailCreate(osMailQ(commandMail), NULL);
 8002446:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800244a:	2100      	movs	r1, #0
 800244c:	4618      	mov	r0, r3
 800244e:	f00f fb0b 	bl	8011a68 <osMailCreate>
 8002452:	4602      	mov	r2, r0
 8002454:	4b15      	ldr	r3, [pc, #84]	; (80024ac <MX_FREERTOS_Init+0x94>)
 8002456:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityHigh, 0, 2060);
 8002458:	4b15      	ldr	r3, [pc, #84]	; (80024b0 <MX_FREERTOS_Init+0x98>)
 800245a:	f107 041c 	add.w	r4, r7, #28
 800245e:	461d      	mov	r5, r3
 8002460:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002462:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002464:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002468:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800246c:	f107 031c 	add.w	r3, r7, #28
 8002470:	2100      	movs	r1, #0
 8002472:	4618      	mov	r0, r3
 8002474:	f00f f8f4 	bl	8011660 <osThreadCreate>
 8002478:	4602      	mov	r2, r0
 800247a:	4b0e      	ldr	r3, [pc, #56]	; (80024b4 <MX_FREERTOS_Init+0x9c>)
 800247c:	601a      	str	r2, [r3, #0]

  /* definition and creation of USB_RX_Check_ */
  osThreadDef(USB_RX_Check_, Start_USB_RX_Task, osPriorityNormal, 0, 1024);
 800247e:	4b0e      	ldr	r3, [pc, #56]	; (80024b8 <MX_FREERTOS_Init+0xa0>)
 8002480:	463c      	mov	r4, r7
 8002482:	461d      	mov	r5, r3
 8002484:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002486:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002488:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800248c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  USB_RX_Check_Handle = osThreadCreate(osThread(USB_RX_Check_), NULL);
 8002490:	463b      	mov	r3, r7
 8002492:	2100      	movs	r1, #0
 8002494:	4618      	mov	r0, r3
 8002496:	f00f f8e3 	bl	8011660 <osThreadCreate>
 800249a:	4602      	mov	r2, r0
 800249c:	4b07      	ldr	r3, [pc, #28]	; (80024bc <MX_FREERTOS_Init+0xa4>)
 800249e:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80024a0:	bf00      	nop
 80024a2:	3750      	adds	r7, #80	; 0x50
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bdb0      	pop	{r4, r5, r7, pc}
 80024a8:	2000c4b8 	.word	0x2000c4b8
 80024ac:	2000c4bc 	.word	0x2000c4bc
 80024b0:	0801a2bc 	.word	0x0801a2bc
 80024b4:	2000c4b4 	.word	0x2000c4b4
 80024b8:	0801a2e8 	.word	0x0801a2e8
 80024bc:	2000c4c0 	.word	0x2000c4c0

080024c0 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80024c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024c2:	f6ad 3de4 	subw	sp, sp, #3044	; 0xbe4
 80024c6:	af6c      	add	r7, sp, #432	; 0x1b0
 80024c8:	f107 031c 	add.w	r3, r7, #28
 80024cc:	6018      	str	r0, [r3, #0]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80024ce:	f011 feed 	bl	80142ac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  HAL_GPIO_WritePin(USB_SIGN_GPIO_Port, USB_SIGN_Pin, GPIO_PIN_SET); // Pull-up Resistor
 80024d2:	2201      	movs	r2, #1
 80024d4:	2110      	movs	r1, #16
 80024d6:	48d0      	ldr	r0, [pc, #832]	; (8002818 <StartDefaultTask+0x358>)
 80024d8:	f008 fed8 	bl	800b28c <HAL_GPIO_WritePin>

  osEvent 				ret_mail;
  DUTY_Command_TypeDef 	duty_cmd;
  DUTY_Command_TypeDef 	*dataMail;
  uint8_t 				isNewDuty = FALSE;
 80024dc:	2300      	movs	r3, #0
 80024de:	f887 3a2f 	strb.w	r3, [r7, #2607]	; 0xa2f
  int32_t					current_key_speed;
  double						run_time;

  SCARA_Pick_And_Place_Package Object[8];
  SCARA_Pick_And_Place_State  operation_state;
  uint8_t object_tail_pointer = 0;
 80024e2:	2300      	movs	r3, #0
 80024e4:	f887 3a0e 	strb.w	r3, [r7, #2574]	; 0xa0e
  uint8_t object_head_pointer = 0;
 80024e8:	2300      	movs	r3, #0
 80024ea:	f887 3a0d 	strb.w	r3, [r7, #2573]	; 0xa0d
  double state_time = 0;
 80024ee:	f04f 0300 	mov.w	r3, #0
 80024f2:	f04f 0400 	mov.w	r4, #0
 80024f6:	f507 6220 	add.w	r2, r7, #2560	; 0xa00
 80024fa:	e9c2 3400 	strd	r3, r4, [r2]
  int run_point = 0;
 80024fe:	2300      	movs	r3, #0
 8002500:	f8c7 39fc 	str.w	r3, [r7, #2556]	; 0x9fc
  const SCARA_Slot_TypeDef SLot_Cordinate[NUM_OF_OBJECT] = {
 8002504:	f107 0320 	add.w	r3, r7, #32
 8002508:	4ac4      	ldr	r2, [pc, #784]	; (800281c <StartDefaultTask+0x35c>)
 800250a:	4618      	mov	r0, r3
 800250c:	4611      	mov	r1, r2
 800250e:	2390      	movs	r3, #144	; 0x90
 8002510:	461a      	mov	r2, r3
 8002512:	f012 fc53 	bl	8014dbc <memcpy>
  		{203.859f, -101.616f, 0.0f} ,
		{203.859f, -101.616f, 0.0f} ,
		{203.859f, -101.616f, 0.0f}
  };

  LOG_REPORT("free_rtos.c: PROGRAM START...", __LINE__);
 8002516:	21e6      	movs	r1, #230	; 0xe6
 8002518:	48c1      	ldr	r0, [pc, #772]	; (8002820 <StartDefaultTask+0x360>)
 800251a:	f7ff fe8b 	bl	8002234 <LOG_REPORT>

  // Init value
  current_method = scaraGetMethod();
 800251e:	f007 f921 	bl	8009764 <scaraGetMethod>
 8002522:	4603      	mov	r3, r0
 8002524:	f887 3a27 	strb.w	r3, [r7, #2599]	; 0xa27
  current_mode	 = scaraGetMode();
 8002528:	f007 f910 	bl	800974c <scaraGetMode>
 800252c:	4603      	mov	r3, r0
 800252e:	f887 3a26 	strb.w	r3, [r7, #2598]	; 0xa26
  current_duty_state	 = scaraGetDutyState();
 8002532:	f007 f923 	bl	800977c <scaraGetDutyState>
 8002536:	4603      	mov	r3, r0
 8002538:	f887 3a25 	strb.w	r3, [r7, #2597]	; 0xa25

  // Start up robot
  scaraStartup();
 800253c:	f003 fb34 	bl	8005ba8 <scaraStartup>
  osDelay(10);
 8002540:	200a      	movs	r0, #10
 8002542:	f00f f8d9 	bl	80116f8 <osDelay>
//   positionNext.Theta2 = PI/3;
//   positionNext.D3 = 10;
//   positionNext.Theta4 = 0;
//   positionNext.t = 0;

  positionNext.Theta1 = -1.48267f;
 8002546:	4ab7      	ldr	r2, [pc, #732]	; (8002824 <StartDefaultTask+0x364>)
 8002548:	a4ab      	add	r4, pc, #684	; (adr r4, 80027f8 <StartDefaultTask+0x338>)
 800254a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800254e:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
  positionNext.Theta2 = 2.35575f;
 8002552:	4ab4      	ldr	r2, [pc, #720]	; (8002824 <StartDefaultTask+0x364>)
 8002554:	a4aa      	add	r4, pc, #680	; (adr r4, 8002800 <StartDefaultTask+0x340>)
 8002556:	e9d4 3400 	ldrd	r3, r4, [r4]
 800255a:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
  positionNext.D3 = 0.034999;
 800255e:	4ab1      	ldr	r2, [pc, #708]	; (8002824 <StartDefaultTask+0x364>)
 8002560:	a4a9      	add	r4, pc, #676	; (adr r4, 8002808 <StartDefaultTask+0x348>)
 8002562:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002566:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
  positionNext.Theta4 = 2.96586;
 800256a:	4aae      	ldr	r2, [pc, #696]	; (8002824 <StartDefaultTask+0x364>)
 800256c:	a4a8      	add	r4, pc, #672	; (adr r4, 8002810 <StartDefaultTask+0x350>)
 800256e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002572:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
  positionNext.t = 0;
 8002576:	4aab      	ldr	r2, [pc, #684]	; (8002824 <StartDefaultTask+0x364>)
 8002578:	f04f 0300 	mov.w	r3, #0
 800257c:	f04f 0400 	mov.w	r4, #0
 8002580:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

  kinematicForward(&positionNext);
 8002584:	48a7      	ldr	r0, [pc, #668]	; (8002824 <StartDefaultTask+0x364>)
 8002586:	f001 feb3 	bl	80042f0 <kinematicForward>
  /* Infinite loop */
//Start Timer 7
	  HAL_TIM_Base_Start_IT(&htim7);
 800258a:	48a7      	ldr	r0, [pc, #668]	; (8002828 <StartDefaultTask+0x368>)
 800258c:	f00a fd55 	bl	800d03a <HAL_TIM_Base_Start_IT>

  for(;;)
  {
	  /*---------Wait for Timer Trigger-----------*/
	  osSignalWait(0x01, osWaitForever); // Very Important
 8002590:	f107 0308 	add.w	r3, r7, #8
 8002594:	f04f 32ff 	mov.w	r2, #4294967295
 8002598:	2101      	movs	r1, #1
 800259a:	4618      	mov	r0, r3
 800259c:	f00f f900 	bl	80117a0 <osSignalWait>
	  /* 1--- Reset Value ---*/
	  respond_lenght		= 0;
 80025a0:	2300      	movs	r3, #0
 80025a2:	f8c7 39f4 	str.w	r3, [r7, #2548]	; 0x9f4
	  respond_packed_lenght = 0;
 80025a6:	2300      	movs	r3, #0
 80025a8:	f8c7 39f0 	str.w	r3, [r7, #2544]	; 0x9f0
	  infor_lenght			= 0;
 80025ac:	2300      	movs	r3, #0
 80025ae:	f8c7 39ec 	str.w	r3, [r7, #2540]	; 0x9ec
	  infor_packed_lenght	= 0;
 80025b2:	2300      	movs	r3, #0
 80025b4:	f8c7 39e8 	str.w	r3, [r7, #2536]	; 0x9e8
	  task_usb_lenght		= 0;
 80025b8:	2300      	movs	r3, #0
 80025ba:	f8c7 39e4 	str.w	r3, [r7, #2532]	; 0x9e4
	  usb_lenght			= 0;
 80025be:	2300      	movs	r3, #0
 80025c0:	f8c7 39e0 	str.w	r3, [r7, #2528]	; 0x9e0
	  total_respond_length  = 0;
 80025c4:	2300      	movs	r3, #0
 80025c6:	f8c7 3a28 	str.w	r3, [r7, #2600]	; 0xa28
	  detail_ptr 			= 0;
 80025ca:	2300      	movs	r3, #0
 80025cc:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
	  // Update new position
	  memcpy(&positionPrevios, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 80025d0:	4a96      	ldr	r2, [pc, #600]	; (800282c <StartDefaultTask+0x36c>)
 80025d2:	4b97      	ldr	r3, [pc, #604]	; (8002830 <StartDefaultTask+0x370>)
 80025d4:	4610      	mov	r0, r2
 80025d6:	4619      	mov	r1, r3
 80025d8:	23c0      	movs	r3, #192	; 0xc0
 80025da:	461a      	mov	r2, r3
 80025dc:	f012 fbee 	bl	8014dbc <memcpy>
	  memcpy(&positionCurrent, &positionNext, sizeof(SCARA_PositionTypeDef));
 80025e0:	4a93      	ldr	r2, [pc, #588]	; (8002830 <StartDefaultTask+0x370>)
 80025e2:	4b90      	ldr	r3, [pc, #576]	; (8002824 <StartDefaultTask+0x364>)
 80025e4:	4610      	mov	r0, r2
 80025e6:	4619      	mov	r1, r3
 80025e8:	23c0      	movs	r3, #192	; 0xc0
 80025ea:	461a      	mov	r2, r3
 80025ec:	f012 fbe6 	bl	8014dbc <memcpy>

	  /* 2--- Check New Duty Phase ---*/
	  // Check mail
	  ret_mail = osMailGet(commandMailHandle, 0);
 80025f0:	4b90      	ldr	r3, [pc, #576]	; (8002834 <StartDefaultTask+0x374>)
 80025f2:	6819      	ldr	r1, [r3, #0]
 80025f4:	f607 13bc 	addw	r3, r7, #2492	; 0x9bc
 80025f8:	2200      	movs	r2, #0
 80025fa:	4618      	mov	r0, r3
 80025fc:	f00f fae0 	bl	8011bc0 <osMailGet>
	  if ( ret_mail.status == osEventMail) {
 8002600:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	; 0x9bc
 8002604:	2b20      	cmp	r3, #32
 8002606:	d116      	bne.n	8002636 <StartDefaultTask+0x176>
		   dataMail = ret_mail.value.p;
 8002608:	f8d7 39c0 	ldr.w	r3, [r7, #2496]	; 0x9c0
 800260c:	f8c7 39d8 	str.w	r3, [r7, #2520]	; 0x9d8
		   memcpy( &duty_cmd, dataMail, sizeof(DUTY_Command_TypeDef));
 8002610:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8002614:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8002618:	f8d7 19d8 	ldr.w	r1, [r7, #2520]	; 0x9d8
 800261c:	4618      	mov	r0, r3
 800261e:	f012 fbcd 	bl	8014dbc <memcpy>
		   isNewDuty = TRUE;
 8002622:	2301      	movs	r3, #1
 8002624:	f887 3a2f 	strb.w	r3, [r7, #2607]	; 0xa2f
		   osMailFree(commandMailHandle, dataMail);/* free memory allocated for mail */
 8002628:	4b82      	ldr	r3, [pc, #520]	; (8002834 <StartDefaultTask+0x374>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f8d7 19d8 	ldr.w	r1, [r7, #2520]	; 0x9d8
 8002630:	4618      	mov	r0, r3
 8002632:	f00f fb39 	bl	8011ca8 <osMailFree>
	  }
	  if(isNewDuty) {
 8002636:	f897 3a2f 	ldrb.w	r3, [r7, #2607]	; 0xa2f
 800263a:	2b00      	cmp	r3, #0
 800263c:	f000 838a 	beq.w	8002d54 <StartDefaultTask+0x894>
		  if (duty_cmd.change_method == TRUE) {
 8002640:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	2b01      	cmp	r3, #1
 8002648:	f040 80f6 	bne.w	8002838 <StartDefaultTask+0x378>
			  //vPortFree(Gcode_Cor);
			  if (SCARA_METHOD_MANUAL == duty_cmd.robot_method) {
 800264c:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8002650:	785b      	ldrb	r3, [r3, #1]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d122      	bne.n	800269c <StartDefaultTask+0x1dc>
				  // Need add check condition idle in each method
				  current_method = SCARA_METHOD_MANUAL;
 8002656:	2300      	movs	r3, #0
 8002658:	f887 3a27 	strb.w	r3, [r7, #2599]	; 0xa27
				  current_duty_state = SCARA_DUTY_STATE_READY;
 800265c:	2300      	movs	r3, #0
 800265e:	f887 3a25 	strb.w	r3, [r7, #2597]	; 0xa25
				detail_array[0] = MANUAL_METHOD;
 8002662:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002666:	2218      	movs	r2, #24
 8002668:	701a      	strb	r2, [r3, #0]
				respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800266a:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 800266e:	6899      	ldr	r1, [r3, #8]
 8002670:	f207 72cc 	addw	r2, r7, #1996	; 0x7cc
 8002674:	f8d7 3a28 	ldr.w	r3, [r7, #2600]	; 0xa28
 8002678:	4413      	add	r3, r2
 800267a:	f507 62e5 	add.w	r2, r7, #1832	; 0x728
 800267e:	9300      	str	r3, [sp, #0]
 8002680:	2301      	movs	r3, #1
 8002682:	2008      	movs	r0, #8
 8002684:	f7ff fd6e 	bl	8002164 <commandRespond1>
 8002688:	f8c7 09f4 	str.w	r0, [r7, #2548]	; 0x9f4
				total_respond_length += respond_lenght;
 800268c:	f8d7 2a28 	ldr.w	r2, [r7, #2600]	; 0xa28
 8002690:	f8d7 39f4 	ldr.w	r3, [r7, #2548]	; 0x9f4
 8002694:	4413      	add	r3, r2
 8002696:	f8c7 3a28 	str.w	r3, [r7, #2600]	; 0xa28
 800269a:	e358      	b.n	8002d4e <StartDefaultTask+0x88e>
			  } else if (SCARA_METHOD_SEMI_AUTO == duty_cmd.robot_method) {
 800269c:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 80026a0:	785b      	ldrb	r3, [r3, #1]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d122      	bne.n	80026ec <StartDefaultTask+0x22c>
				  current_method = SCARA_METHOD_SEMI_AUTO;
 80026a6:	2301      	movs	r3, #1
 80026a8:	f887 3a27 	strb.w	r3, [r7, #2599]	; 0xa27
				  current_duty_state = SCARA_DUTY_STATE_READY;
 80026ac:	2300      	movs	r3, #0
 80026ae:	f887 3a25 	strb.w	r3, [r7, #2597]	; 0xa25
				detail_array[0] = SEMI_AUTO_METHOD;
 80026b2:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80026b6:	2219      	movs	r2, #25
 80026b8:	701a      	strb	r2, [r3, #0]
				respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80026ba:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 80026be:	6899      	ldr	r1, [r3, #8]
 80026c0:	f207 72cc 	addw	r2, r7, #1996	; 0x7cc
 80026c4:	f8d7 3a28 	ldr.w	r3, [r7, #2600]	; 0xa28
 80026c8:	4413      	add	r3, r2
 80026ca:	f507 62e5 	add.w	r2, r7, #1832	; 0x728
 80026ce:	9300      	str	r3, [sp, #0]
 80026d0:	2301      	movs	r3, #1
 80026d2:	2008      	movs	r0, #8
 80026d4:	f7ff fd46 	bl	8002164 <commandRespond1>
 80026d8:	f8c7 09f4 	str.w	r0, [r7, #2548]	; 0x9f4
				total_respond_length += respond_lenght;
 80026dc:	f8d7 2a28 	ldr.w	r2, [r7, #2600]	; 0xa28
 80026e0:	f8d7 39f4 	ldr.w	r3, [r7, #2548]	; 0x9f4
 80026e4:	4413      	add	r3, r2
 80026e6:	f8c7 3a28 	str.w	r3, [r7, #2600]	; 0xa28
 80026ea:	e330      	b.n	8002d4e <StartDefaultTask+0x88e>
			  } else if (SCARA_METHOD_GCODE == duty_cmd.robot_method) {
 80026ec:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 80026f0:	785b      	ldrb	r3, [r3, #1]
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d122      	bne.n	800273c <StartDefaultTask+0x27c>
//				  Gcode_Cor = pvPortMalloc(total_num_of_point*sizeof(SCARA_Gcode_Cor_TypeDef));
//					if(Gcode_Cor == NULL){
//					  int t =2;
//					}
				  current_duty_state = SCARA_DUTY_STATE_READY;
 80026f6:	2300      	movs	r3, #0
 80026f8:	f887 3a25 	strb.w	r3, [r7, #2597]	; 0xa25
				  current_method = SCARA_METHOD_GCODE;
 80026fc:	2302      	movs	r3, #2
 80026fe:	f887 3a27 	strb.w	r3, [r7, #2599]	; 0xa27
				detail_array[0] = AUTO_METHOD;
 8002702:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002706:	221a      	movs	r2, #26
 8002708:	701a      	strb	r2, [r3, #0]
				respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800270a:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 800270e:	6899      	ldr	r1, [r3, #8]
 8002710:	f207 72cc 	addw	r2, r7, #1996	; 0x7cc
 8002714:	f8d7 3a28 	ldr.w	r3, [r7, #2600]	; 0xa28
 8002718:	4413      	add	r3, r2
 800271a:	f507 62e5 	add.w	r2, r7, #1832	; 0x728
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	2301      	movs	r3, #1
 8002722:	2008      	movs	r0, #8
 8002724:	f7ff fd1e 	bl	8002164 <commandRespond1>
 8002728:	f8c7 09f4 	str.w	r0, [r7, #2548]	; 0x9f4
				total_respond_length += respond_lenght;
 800272c:	f8d7 2a28 	ldr.w	r2, [r7, #2600]	; 0xa28
 8002730:	f8d7 39f4 	ldr.w	r3, [r7, #2548]	; 0x9f4
 8002734:	4413      	add	r3, r2
 8002736:	f8c7 3a28 	str.w	r3, [r7, #2600]	; 0xa28
 800273a:	e308      	b.n	8002d4e <StartDefaultTask+0x88e>
			  }else if(SCARA_METHOD_TEST == duty_cmd.robot_method){
 800273c:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8002740:	785b      	ldrb	r3, [r3, #1]
 8002742:	2b03      	cmp	r3, #3
 8002744:	d12f      	bne.n	80027a6 <StartDefaultTask+0x2e6>
				  test_value[0] = 0;
 8002746:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 800274a:	2200      	movs	r2, #0
 800274c:	701a      	strb	r2, [r3, #0]
				  test_value[1] = 0;
 800274e:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 8002752:	2200      	movs	r2, #0
 8002754:	705a      	strb	r2, [r3, #1]
				  test_value[2] = 0;
 8002756:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 800275a:	2200      	movs	r2, #0
 800275c:	709a      	strb	r2, [r3, #2]
				  test_value[3] = 0;
 800275e:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 8002762:	2200      	movs	r2, #0
 8002764:	70da      	strb	r2, [r3, #3]
				  current_method = SCARA_METHOD_TEST;
 8002766:	2303      	movs	r3, #3
 8002768:	f887 3a27 	strb.w	r3, [r7, #2599]	; 0xa27
				  detail_array[0] = TEST_METHOD;
 800276c:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002770:	221b      	movs	r2, #27
 8002772:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002774:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8002778:	6899      	ldr	r1, [r3, #8]
 800277a:	f207 72cc 	addw	r2, r7, #1996	; 0x7cc
 800277e:	f8d7 3a28 	ldr.w	r3, [r7, #2600]	; 0xa28
 8002782:	4413      	add	r3, r2
 8002784:	f507 62e5 	add.w	r2, r7, #1832	; 0x728
 8002788:	9300      	str	r3, [sp, #0]
 800278a:	2301      	movs	r3, #1
 800278c:	2008      	movs	r0, #8
 800278e:	f7ff fce9 	bl	8002164 <commandRespond1>
 8002792:	f8c7 09f4 	str.w	r0, [r7, #2548]	; 0x9f4
				  total_respond_length += respond_lenght;
 8002796:	f8d7 2a28 	ldr.w	r2, [r7, #2600]	; 0xa28
 800279a:	f8d7 39f4 	ldr.w	r3, [r7, #2548]	; 0x9f4
 800279e:	4413      	add	r3, r2
 80027a0:	f8c7 3a28 	str.w	r3, [r7, #2600]	; 0xa28
 80027a4:	e2d3      	b.n	8002d4e <StartDefaultTask+0x88e>
			  }else if(SCARA_METHOD_PICK_AND_PLACE == duty_cmd.robot_method){
 80027a6:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 80027aa:	785b      	ldrb	r3, [r3, #1]
 80027ac:	2b04      	cmp	r3, #4
 80027ae:	f040 82ce 	bne.w	8002d4e <StartDefaultTask+0x88e>
				  current_method = SCARA_METHOD_PICK_AND_PLACE;
 80027b2:	2304      	movs	r3, #4
 80027b4:	f887 3a27 	strb.w	r3, [r7, #2599]	; 0xa27
				  current_duty_state = SCARA_DUTY_STATE_INIT;
 80027b8:	2301      	movs	r3, #1
 80027ba:	f887 3a25 	strb.w	r3, [r7, #2597]	; 0xa25
				  detail_array[0] = PICK_AND_PLACE_METHOD;
 80027be:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80027c2:	221c      	movs	r2, #28
 80027c4:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80027c6:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 80027ca:	6899      	ldr	r1, [r3, #8]
 80027cc:	f207 72cc 	addw	r2, r7, #1996	; 0x7cc
 80027d0:	f8d7 3a28 	ldr.w	r3, [r7, #2600]	; 0xa28
 80027d4:	4413      	add	r3, r2
 80027d6:	f507 62e5 	add.w	r2, r7, #1832	; 0x728
 80027da:	9300      	str	r3, [sp, #0]
 80027dc:	2301      	movs	r3, #1
 80027de:	2008      	movs	r0, #8
 80027e0:	f7ff fcc0 	bl	8002164 <commandRespond1>
 80027e4:	f8c7 09f4 	str.w	r0, [r7, #2548]	; 0x9f4
				  total_respond_length += respond_lenght;
 80027e8:	f8d7 2a28 	ldr.w	r2, [r7, #2600]	; 0xa28
 80027ec:	f8d7 39f4 	ldr.w	r3, [r7, #2548]	; 0x9f4
 80027f0:	4413      	add	r3, r2
 80027f2:	f8c7 3a28 	str.w	r3, [r7, #2600]	; 0xa28
 80027f6:	e2aa      	b.n	8002d4e <StartDefaultTask+0x88e>
 80027f8:	20000000 	.word	0x20000000
 80027fc:	bff7b904 	.word	0xbff7b904
 8002800:	80000000 	.word	0x80000000
 8002804:	4002d893 	.word	0x4002d893
 8002808:	90c91080 	.word	0x90c91080
 800280c:	3fa1eb63 	.word	0x3fa1eb63
 8002810:	cec41dd2 	.word	0xcec41dd2
 8002814:	4007ba14 	.word	0x4007ba14
 8002818:	40020400 	.word	0x40020400
 800281c:	0801a3e8 	.word	0x0801a3e8
 8002820:	0801a304 	.word	0x0801a304
 8002824:	2000d2c0 	.word	0x2000d2c0
 8002828:	2000d400 	.word	0x2000d400
 800282c:	2000cfc0 	.word	0x2000cfc0
 8002830:	2000d140 	.word	0x2000d140
 8002834:	2000c4bc 	.word	0x2000c4bc
			  }
		  } else {
			  	  // Check current method & cmd method
			  	  if (current_method == duty_cmd.robot_method) {
 8002838:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 800283c:	785b      	ldrb	r3, [r3, #1]
 800283e:	f897 2a27 	ldrb.w	r2, [r7, #2599]	; 0xa27
 8002842:	429a      	cmp	r2, r3
 8002844:	f040 8263 	bne.w	8002d0e <StartDefaultTask+0x84e>
				  	  switch( duty_cmd.robot_method) {
 8002848:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 800284c:	785b      	ldrb	r3, [r3, #1]
 800284e:	2b04      	cmp	r3, #4
 8002850:	f200 8257 	bhi.w	8002d02 <StartDefaultTask+0x842>
 8002854:	a201      	add	r2, pc, #4	; (adr r2, 800285c <StartDefaultTask+0x39c>)
 8002856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800285a:	bf00      	nop
 800285c:	08002871 	.word	0x08002871
 8002860:	080028c7 	.word	0x080028c7
 8002864:	08002bdd 	.word	0x08002bdd
 8002868:	08002a83 	.word	0x08002a83
 800286c:	08002c69 	.word	0x08002c69
				  	  case SCARA_METHOD_MANUAL:
				  	  {
				  		  if (current_key_state == SCARA_KEY_STATE_READY) {
 8002870:	f897 3a23 	ldrb.w	r3, [r7, #2595]	; 0xa23
 8002874:	2b00      	cmp	r3, #0
 8002876:	d10d      	bne.n	8002894 <StartDefaultTask+0x3d4>
				  			  current_key = duty_cmd.keyboard;
 8002878:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 800287c:	78db      	ldrb	r3, [r3, #3]
 800287e:	f887 3a22 	strb.w	r3, [r7, #2594]	; 0xa22
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Init new path
 8002882:	2301      	movs	r3, #1
 8002884:	f887 3a23 	strb.w	r3, [r7, #2595]	; 0xa23
				  			  current_key_speed = duty_cmd.key_speed;
 8002888:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
				  				  	  && current_key_state == SCARA_KEY_STATE_FLOW
									  && current_key_speed == duty_cmd.key_speed) {
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Continue old path
				  		  }
				  	  }
				  	  break;
 8002892:	e259      	b.n	8002d48 <StartDefaultTask+0x888>
				  		  } else if (current_key == duty_cmd.keyboard
 8002894:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8002898:	78db      	ldrb	r3, [r3, #3]
 800289a:	f897 2a22 	ldrb.w	r2, [r7, #2594]	; 0xa22
 800289e:	429a      	cmp	r2, r3
 80028a0:	f040 8252 	bne.w	8002d48 <StartDefaultTask+0x888>
				  				  	  && current_key_state == SCARA_KEY_STATE_FLOW
 80028a4:	f897 3a23 	ldrb.w	r3, [r7, #2595]	; 0xa23
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	f040 824d 	bne.w	8002d48 <StartDefaultTask+0x888>
									  && current_key_speed == duty_cmd.key_speed) {
 80028ae:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f8d7 2a1c 	ldr.w	r2, [r7, #2588]	; 0xa1c
 80028b8:	429a      	cmp	r2, r3
 80028ba:	f040 8245 	bne.w	8002d48 <StartDefaultTask+0x888>
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Continue old path
 80028be:	2301      	movs	r3, #1
 80028c0:	f887 3a23 	strb.w	r3, [r7, #2595]	; 0xa23
				  	  break;
 80028c4:	e240      	b.n	8002d48 <StartDefaultTask+0x888>
				  	  case SCARA_METHOD_SEMI_AUTO:
				  	  {
						  switch( duty_cmd.robot_mode) {
 80028c6:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 80028ca:	789b      	ldrb	r3, [r3, #2]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d029      	beq.n	8002924 <StartDefaultTask+0x464>
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d074      	beq.n	80029be <StartDefaultTask+0x4fe>
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f040 80cd 	bne.w	8002a74 <StartDefaultTask+0x5b4>
						  case SCARA_MODE_STOP:
							  {
								  current_mode	 = SCARA_MODE_STOP;
 80028da:	2300      	movs	r3, #0
 80028dc:	f887 3a26 	strb.w	r3, [r7, #2598]	; 0xa26
								detail_array[0] = STOP_NOW;
 80028e0:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80028e4:	2220      	movs	r2, #32
 80028e6:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80028e8:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 80028ec:	6899      	ldr	r1, [r3, #8]
 80028ee:	f207 72cc 	addw	r2, r7, #1996	; 0x7cc
 80028f2:	f8d7 3a28 	ldr.w	r3, [r7, #2600]	; 0xa28
 80028f6:	4413      	add	r3, r2
 80028f8:	f507 62e5 	add.w	r2, r7, #1832	; 0x728
 80028fc:	9300      	str	r3, [sp, #0]
 80028fe:	2301      	movs	r3, #1
 8002900:	2008      	movs	r0, #8
 8002902:	f7ff fc2f 	bl	8002164 <commandRespond1>
 8002906:	f8c7 09f4 	str.w	r0, [r7, #2548]	; 0x9f4
								total_respond_length += respond_lenght;
 800290a:	f8d7 2a28 	ldr.w	r2, [r7, #2600]	; 0xa28
 800290e:	f8d7 39f4 	ldr.w	r3, [r7, #2548]	; 0x9f4
 8002912:	4413      	add	r3, r2
 8002914:	f8c7 3a28 	str.w	r3, [r7, #2600]	; 0xa28
								  LOG_REPORT("ROBOT STOP !!!", __LINE__);
 8002918:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800291c:	48cb      	ldr	r0, [pc, #812]	; (8002c4c <StartDefaultTask+0x78c>)
 800291e:	f7ff fc89 	bl	8002234 <LOG_REPORT>
							  }
							  break;
 8002922:	e0ad      	b.n	8002a80 <StartDefaultTask+0x5c0>

						  case SCARA_MODE_SCAN:
							  {
								  if (SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_duty_state) {
 8002924:	f897 3a26 	ldrb.w	r3, [r7, #2598]	; 0xa26
 8002928:	2b02      	cmp	r3, #2
 800292a:	d126      	bne.n	800297a <StartDefaultTask+0x4ba>
 800292c:	f897 3a25 	ldrb.w	r3, [r7, #2597]	; 0xa25
 8002930:	2b00      	cmp	r3, #0
 8002932:	d122      	bne.n	800297a <StartDefaultTask+0x4ba>
									  current_mode = SCARA_MODE_SCAN;
 8002934:	2301      	movs	r3, #1
 8002936:	f887 3a26 	strb.w	r3, [r7, #2598]	; 0xa26
									  current_scan_state = SCARA_SCAN_STATE_INIT;
 800293a:	2300      	movs	r3, #0
 800293c:	f887 3a24 	strb.w	r3, [r7, #2596]	; 0xa24
									detail_array[0] = START_SCAN;
 8002940:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002944:	2221      	movs	r2, #33	; 0x21
 8002946:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002948:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 800294c:	6899      	ldr	r1, [r3, #8]
 800294e:	f207 72cc 	addw	r2, r7, #1996	; 0x7cc
 8002952:	f8d7 3a28 	ldr.w	r3, [r7, #2600]	; 0xa28
 8002956:	4413      	add	r3, r2
 8002958:	f507 62e5 	add.w	r2, r7, #1832	; 0x728
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	2301      	movs	r3, #1
 8002960:	2008      	movs	r0, #8
 8002962:	f7ff fbff 	bl	8002164 <commandRespond1>
 8002966:	f8c7 09f4 	str.w	r0, [r7, #2548]	; 0x9f4
									total_respond_length += respond_lenght;
 800296a:	f8d7 2a28 	ldr.w	r2, [r7, #2600]	; 0xa28
 800296e:	f8d7 39f4 	ldr.w	r3, [r7, #2548]	; 0x9f4
 8002972:	4413      	add	r3, r2
 8002974:	f8c7 3a28 	str.w	r3, [r7, #2600]	; 0xa28
									respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
									total_respond_length += respond_lenght;
									  LOG_REPORT("SCAN FAIL: BUSY", __LINE__);
								  }
							  }
							  break;
 8002978:	e082      	b.n	8002a80 <StartDefaultTask+0x5c0>
									detail_array[0] = BUSY;
 800297a:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800297e:	2222      	movs	r2, #34	; 0x22
 8002980:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002982:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8002986:	6899      	ldr	r1, [r3, #8]
 8002988:	f207 72cc 	addw	r2, r7, #1996	; 0x7cc
 800298c:	f8d7 3a28 	ldr.w	r3, [r7, #2600]	; 0xa28
 8002990:	4413      	add	r3, r2
 8002992:	f507 62e5 	add.w	r2, r7, #1832	; 0x728
 8002996:	9300      	str	r3, [sp, #0]
 8002998:	2301      	movs	r3, #1
 800299a:	2007      	movs	r0, #7
 800299c:	f7ff fbe2 	bl	8002164 <commandRespond1>
 80029a0:	f8c7 09f4 	str.w	r0, [r7, #2548]	; 0x9f4
									total_respond_length += respond_lenght;
 80029a4:	f8d7 2a28 	ldr.w	r2, [r7, #2600]	; 0xa28
 80029a8:	f8d7 39f4 	ldr.w	r3, [r7, #2548]	; 0x9f4
 80029ac:	4413      	add	r3, r2
 80029ae:	f8c7 3a28 	str.w	r3, [r7, #2600]	; 0xa28
									  LOG_REPORT("SCAN FAIL: BUSY", __LINE__);
 80029b2:	f44f 71ba 	mov.w	r1, #372	; 0x174
 80029b6:	48a6      	ldr	r0, [pc, #664]	; (8002c50 <StartDefaultTask+0x790>)
 80029b8:	f7ff fc3c 	bl	8002234 <LOG_REPORT>
							  break;
 80029bc:	e060      	b.n	8002a80 <StartDefaultTask+0x5c0>

						  case SCARA_MODE_DUTY:
							  {
								  if (SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_duty_state) {
 80029be:	f897 3a26 	ldrb.w	r3, [r7, #2598]	; 0xa26
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d133      	bne.n	8002a2e <StartDefaultTask+0x56e>
 80029c6:	f897 3a25 	ldrb.w	r3, [r7, #2597]	; 0xa25
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d12f      	bne.n	8002a2e <StartDefaultTask+0x56e>
									  scaraSetScanFlag();
 80029ce:	f006 fe4f 	bl	8009670 <scaraSetScanFlag>
//									  if(duty_cmd.modeInit_type == DUTY_MODE_INIT_LINEAR){
//										  current_method = SCARA_METHOD_AUTO;
//									  }
									  if (scaraIsScanLimit()) {
 80029d2:	f006 fedf 	bl	8009794 <scaraIsScanLimit>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d006      	beq.n	80029ea <StartDefaultTask+0x52a>
										  current_mode	 = SCARA_MODE_DUTY;
 80029dc:	2302      	movs	r3, #2
 80029de:	f887 3a26 	strb.w	r3, [r7, #2598]	; 0xa26
										  current_duty_state	 = SCARA_DUTY_STATE_INIT;
 80029e2:	2301      	movs	r3, #1
 80029e4:	f887 3a25 	strb.w	r3, [r7, #2597]	; 0xa25
									  if (scaraIsScanLimit()) {
 80029e8:	e043      	b.n	8002a72 <StartDefaultTask+0x5b2>
									  } else {
										detail_array[0] = NOT_SCAN;
 80029ea:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80029ee:	2223      	movs	r2, #35	; 0x23
 80029f0:	701a      	strb	r2, [r3, #0]
										respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80029f2:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 80029f6:	6899      	ldr	r1, [r3, #8]
 80029f8:	f207 72cc 	addw	r2, r7, #1996	; 0x7cc
 80029fc:	f8d7 3a28 	ldr.w	r3, [r7, #2600]	; 0xa28
 8002a00:	4413      	add	r3, r2
 8002a02:	f507 62e5 	add.w	r2, r7, #1832	; 0x728
 8002a06:	9300      	str	r3, [sp, #0]
 8002a08:	2301      	movs	r3, #1
 8002a0a:	2007      	movs	r0, #7
 8002a0c:	f7ff fbaa 	bl	8002164 <commandRespond1>
 8002a10:	f8c7 09f4 	str.w	r0, [r7, #2548]	; 0x9f4
										total_respond_length += respond_lenght;
 8002a14:	f8d7 2a28 	ldr.w	r2, [r7, #2600]	; 0xa28
 8002a18:	f8d7 39f4 	ldr.w	r3, [r7, #2548]	; 0x9f4
 8002a1c:	4413      	add	r3, r2
 8002a1e:	f8c7 3a28 	str.w	r3, [r7, #2600]	; 0xa28
										  LOG_REPORT("MOVE FAIL:NOT SCAN", __LINE__);
 8002a22:	f240 1187 	movw	r1, #391	; 0x187
 8002a26:	488b      	ldr	r0, [pc, #556]	; (8002c54 <StartDefaultTask+0x794>)
 8002a28:	f7ff fc04 	bl	8002234 <LOG_REPORT>
									  if (scaraIsScanLimit()) {
 8002a2c:	e021      	b.n	8002a72 <StartDefaultTask+0x5b2>
									  }
								  } else {
									detail_array[0] = BUSY;
 8002a2e:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002a32:	2222      	movs	r2, #34	; 0x22
 8002a34:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002a36:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8002a3a:	6899      	ldr	r1, [r3, #8]
 8002a3c:	f207 72cc 	addw	r2, r7, #1996	; 0x7cc
 8002a40:	f8d7 3a28 	ldr.w	r3, [r7, #2600]	; 0xa28
 8002a44:	4413      	add	r3, r2
 8002a46:	f507 62e5 	add.w	r2, r7, #1832	; 0x728
 8002a4a:	9300      	str	r3, [sp, #0]
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	2007      	movs	r0, #7
 8002a50:	f7ff fb88 	bl	8002164 <commandRespond1>
 8002a54:	f8c7 09f4 	str.w	r0, [r7, #2548]	; 0x9f4
									total_respond_length += respond_lenght;
 8002a58:	f8d7 2a28 	ldr.w	r2, [r7, #2600]	; 0xa28
 8002a5c:	f8d7 39f4 	ldr.w	r3, [r7, #2548]	; 0x9f4
 8002a60:	4413      	add	r3, r2
 8002a62:	f8c7 3a28 	str.w	r3, [r7, #2600]	; 0xa28
									  LOG_REPORT("MOVE FAIL:BUSY", __LINE__);
 8002a66:	f240 118d 	movw	r1, #397	; 0x18d
 8002a6a:	487b      	ldr	r0, [pc, #492]	; (8002c58 <StartDefaultTask+0x798>)
 8002a6c:	f7ff fbe2 	bl	8002234 <LOG_REPORT>
								  }
							  }
							  break;
 8002a70:	e006      	b.n	8002a80 <StartDefaultTask+0x5c0>
 8002a72:	e005      	b.n	8002a80 <StartDefaultTask+0x5c0>
						  default:
							  {
								  LOG_REPORT("CMD Error Mode !!!", __LINE__);
 8002a74:	f240 1193 	movw	r1, #403	; 0x193
 8002a78:	4878      	ldr	r0, [pc, #480]	; (8002c5c <StartDefaultTask+0x79c>)
 8002a7a:	f7ff fbdb 	bl	8002234 <LOG_REPORT>
							  }
						  }
					  }
					  break;
 8002a7e:	e166      	b.n	8002d4e <StartDefaultTask+0x88e>
 8002a80:	e165      	b.n	8002d4e <StartDefaultTask+0x88e>
					  case SCARA_METHOD_TEST:
					  {
						  test_value[0] = 0;
 8002a82:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 8002a86:	2200      	movs	r2, #0
 8002a88:	701a      	strb	r2, [r3, #0]
						  test_value[1] = 0;
 8002a8a:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 8002a8e:	2200      	movs	r2, #0
 8002a90:	705a      	strb	r2, [r3, #1]
						  test_value[2] = 0;
 8002a92:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 8002a96:	2200      	movs	r2, #0
 8002a98:	709a      	strb	r2, [r3, #2]
						  test_value[3] = 0;
 8002a9a:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	70da      	strb	r2, [r3, #3]
						  switch (duty_cmd.test_key)
 8002aa2:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8002aa6:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002aaa:	2b07      	cmp	r3, #7
 8002aac:	f200 8094 	bhi.w	8002bd8 <StartDefaultTask+0x718>
 8002ab0:	a201      	add	r2, pc, #4	; (adr r2, 8002ab8 <StartDefaultTask+0x5f8>)
 8002ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab6:	bf00      	nop
 8002ab8:	08002ad9 	.word	0x08002ad9
 8002abc:	08002af5 	.word	0x08002af5
 8002ac0:	08002b19 	.word	0x08002b19
 8002ac4:	08002b35 	.word	0x08002b35
 8002ac8:	08002b59 	.word	0x08002b59
 8002acc:	08002b75 	.word	0x08002b75
 8002ad0:	08002b99 	.word	0x08002b99
 8002ad4:	08002bb5 	.word	0x08002bb5
						  {
						  case SCARA_TEST_MOTOR1_POS:
							 test_value[duty_cmd.test_key/2] = test_value_array[0];
 8002ad8:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8002adc:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002ae0:	085b      	lsrs	r3, r3, #1
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	4b5e      	ldr	r3, [pc, #376]	; (8002c60 <StartDefaultTask+0x7a0>)
 8002ae8:	f993 1000 	ldrsb.w	r1, [r3]
 8002aec:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 8002af0:	5499      	strb	r1, [r3, r2]
						  break;
 8002af2:	e072      	b.n	8002bda <StartDefaultTask+0x71a>
						  case SCARA_TEST_MOTOR1_NEG:
							 test_value[duty_cmd.test_key/2] = -test_value_array[0];
 8002af4:	4b5a      	ldr	r3, [pc, #360]	; (8002c60 <StartDefaultTask+0x7a0>)
 8002af6:	f993 3000 	ldrsb.w	r3, [r3]
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	425b      	negs	r3, r3
 8002afe:	b2d9      	uxtb	r1, r3
 8002b00:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8002b04:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002b08:	085b      	lsrs	r3, r3, #1
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	b249      	sxtb	r1, r1
 8002b10:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 8002b14:	5499      	strb	r1, [r3, r2]
						  break;
 8002b16:	e060      	b.n	8002bda <StartDefaultTask+0x71a>
						  case SCARA_TEST_MOTOR2_POS:
							 test_value[duty_cmd.test_key/2] = test_value_array[1];
 8002b18:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8002b1c:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002b20:	085b      	lsrs	r3, r3, #1
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	461a      	mov	r2, r3
 8002b26:	4b4e      	ldr	r3, [pc, #312]	; (8002c60 <StartDefaultTask+0x7a0>)
 8002b28:	f993 1001 	ldrsb.w	r1, [r3, #1]
 8002b2c:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 8002b30:	5499      	strb	r1, [r3, r2]
						  break;
 8002b32:	e052      	b.n	8002bda <StartDefaultTask+0x71a>
						  case SCARA_TEST_MOTOR2_NEG:
							 test_value[duty_cmd.test_key/2] = -test_value_array[1];
 8002b34:	4b4a      	ldr	r3, [pc, #296]	; (8002c60 <StartDefaultTask+0x7a0>)
 8002b36:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	425b      	negs	r3, r3
 8002b3e:	b2d9      	uxtb	r1, r3
 8002b40:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8002b44:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002b48:	085b      	lsrs	r3, r3, #1
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	b249      	sxtb	r1, r1
 8002b50:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 8002b54:	5499      	strb	r1, [r3, r2]
						  break;
 8002b56:	e040      	b.n	8002bda <StartDefaultTask+0x71a>
						  case SCARA_TEST_MOTOR3_POS:
							 test_value[duty_cmd.test_key/2] = test_value_array[2];
 8002b58:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8002b5c:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002b60:	085b      	lsrs	r3, r3, #1
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	461a      	mov	r2, r3
 8002b66:	4b3e      	ldr	r3, [pc, #248]	; (8002c60 <StartDefaultTask+0x7a0>)
 8002b68:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8002b6c:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 8002b70:	5499      	strb	r1, [r3, r2]
						  break;
 8002b72:	e032      	b.n	8002bda <StartDefaultTask+0x71a>
						  case SCARA_TEST_MOTOR3_NEG:
							 test_value[duty_cmd.test_key/2] = -test_value_array[2];
 8002b74:	4b3a      	ldr	r3, [pc, #232]	; (8002c60 <StartDefaultTask+0x7a0>)
 8002b76:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	425b      	negs	r3, r3
 8002b7e:	b2d9      	uxtb	r1, r3
 8002b80:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8002b84:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002b88:	085b      	lsrs	r3, r3, #1
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	b249      	sxtb	r1, r1
 8002b90:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 8002b94:	5499      	strb	r1, [r3, r2]
						  break;
 8002b96:	e020      	b.n	8002bda <StartDefaultTask+0x71a>
						  case SCARA_TEST_MOTOR4_POS:
							 test_value[duty_cmd.test_key/2] = test_value_array[3];
 8002b98:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8002b9c:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002ba0:	085b      	lsrs	r3, r3, #1
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	4b2e      	ldr	r3, [pc, #184]	; (8002c60 <StartDefaultTask+0x7a0>)
 8002ba8:	f993 1003 	ldrsb.w	r1, [r3, #3]
 8002bac:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 8002bb0:	5499      	strb	r1, [r3, r2]
						  break;
 8002bb2:	e012      	b.n	8002bda <StartDefaultTask+0x71a>
						  case SCARA_TEST_MOTOR4_NEG:
							 test_value[duty_cmd.test_key/2] = -test_value_array[3];
 8002bb4:	4b2a      	ldr	r3, [pc, #168]	; (8002c60 <StartDefaultTask+0x7a0>)
 8002bb6:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	425b      	negs	r3, r3
 8002bbe:	b2d9      	uxtb	r1, r3
 8002bc0:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8002bc4:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002bc8:	085b      	lsrs	r3, r3, #1
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	461a      	mov	r2, r3
 8002bce:	b249      	sxtb	r1, r1
 8002bd0:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 8002bd4:	5499      	strb	r1, [r3, r2]
						  break;						  
 8002bd6:	e000      	b.n	8002bda <StartDefaultTask+0x71a>
						  default:
							  break;
 8002bd8:	bf00      	nop
						  }
					  }
					  break;
 8002bda:	e0b8      	b.n	8002d4e <StartDefaultTask+0x88e>
				  	  case SCARA_METHOD_GCODE:
				  	  {
				  		  if(current_duty_state == SCARA_DUTY_STATE_READY && duty_cmd.id_command == CMD_GCODE_RUN){
 8002bdc:	f897 3a25 	ldrb.w	r3, [r7, #2597]	; 0xa25
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d10b      	bne.n	8002bfc <StartDefaultTask+0x73c>
 8002be4:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	2b13      	cmp	r3, #19
 8002bec:	d106      	bne.n	8002bfc <StartDefaultTask+0x73c>
				  			  run_point = 1;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	f8c7 39fc 	str.w	r3, [r7, #2556]	; 0x9fc
				  			  current_duty_state = SCARA_DUTY_STATE_OPERATION;
 8002bf4:	2304      	movs	r3, #4
 8002bf6:	f887 3a25 	strb.w	r3, [r7, #2597]	; 0xa25
 8002bfa:	e025      	b.n	8002c48 <StartDefaultTask+0x788>
				  		  }else if(current_duty_state == SCARA_DUTY_STATE_INIT && duty_cmd.id_command == CMD_GCODE_RESUME){
 8002bfc:	f897 3a25 	ldrb.w	r3, [r7, #2597]	; 0xa25
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d10e      	bne.n	8002c22 <StartDefaultTask+0x762>
 8002c04:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	2b12      	cmp	r3, #18
 8002c0c:	d109      	bne.n	8002c22 <StartDefaultTask+0x762>
				  			  lowlayer_readTruePosition(&positionCurrent);
 8002c0e:	4815      	ldr	r0, [pc, #84]	; (8002c64 <StartDefaultTask+0x7a4>)
 8002c10:	f002 fab2 	bl	8005178 <lowlayer_readTruePosition>
				  			  kinematicForward(&positionCurrent);
 8002c14:	4813      	ldr	r0, [pc, #76]	; (8002c64 <StartDefaultTask+0x7a4>)
 8002c16:	f001 fb6b 	bl	80042f0 <kinematicForward>
				  			  current_duty_state = SCARA_DUTY_STATE_INIT;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	f887 3a25 	strb.w	r3, [r7, #2597]	; 0xa25
 8002c20:	e012      	b.n	8002c48 <StartDefaultTask+0x788>
				  		  }else if(duty_cmd.id_command == CMD_GCODE_STOP){
 8002c22:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	2b0d      	cmp	r3, #13
 8002c2a:	d103      	bne.n	8002c34 <StartDefaultTask+0x774>
				  			  current_duty_state = SCARA_DUTY_STATE_READY;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	f887 3a25 	strb.w	r3, [r7, #2597]	; 0xa25
				  		  }else if(duty_cmd.id_command == CMD_GCODE_PAUSE){
				  			  current_duty_state = SCARA_DUTY_STATE_INIT;
				  		  }
				  	  }
				  	  break;
 8002c32:	e08b      	b.n	8002d4c <StartDefaultTask+0x88c>
				  		  }else if(duty_cmd.id_command == CMD_GCODE_PAUSE){
 8002c34:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	2b0e      	cmp	r3, #14
 8002c3c:	f040 8086 	bne.w	8002d4c <StartDefaultTask+0x88c>
				  			  current_duty_state = SCARA_DUTY_STATE_INIT;
 8002c40:	2301      	movs	r3, #1
 8002c42:	f887 3a25 	strb.w	r3, [r7, #2597]	; 0xa25
				  	  break;
 8002c46:	e081      	b.n	8002d4c <StartDefaultTask+0x88c>
 8002c48:	e080      	b.n	8002d4c <StartDefaultTask+0x88c>
 8002c4a:	bf00      	nop
 8002c4c:	0801a324 	.word	0x0801a324
 8002c50:	0801a334 	.word	0x0801a334
 8002c54:	0801a344 	.word	0x0801a344
 8002c58:	0801a358 	.word	0x0801a358
 8002c5c:	0801a368 	.word	0x0801a368
 8002c60:	20000000 	.word	0x20000000
 8002c64:	2000d140 	.word	0x2000d140
				  	  case SCARA_METHOD_PICK_AND_PLACE:{
				  		  memcpy(&Object[object_head_pointer].object_position, &duty_cmd.target_point, sizeof(SCARA_PositionTypeDef));
 8002c68:	f897 3a0d 	ldrb.w	r3, [r7, #2573]	; 0xa0d
 8002c6c:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8002c70:	21c8      	movs	r1, #200	; 0xc8
 8002c72:	fb01 f303 	mul.w	r3, r1, r3
 8002c76:	18d0      	adds	r0, r2, r3
 8002c78:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8002c7c:	3328      	adds	r3, #40	; 0x28
 8002c7e:	22c0      	movs	r2, #192	; 0xc0
 8002c80:	4619      	mov	r1, r3
 8002c82:	f012 f89b 	bl	8014dbc <memcpy>
				  		  Object[object_head_pointer].timer_value = (uint16_t)duty_cmd.target_point.t;
 8002c86:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8002c8a:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8002c8e:	f897 5a0d 	ldrb.w	r5, [r7, #2573]	; 0xa0d
 8002c92:	4618      	mov	r0, r3
 8002c94:	4621      	mov	r1, r4
 8002c96:	f7fd ff87 	bl	8000ba8 <__aeabi_d2uiz>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	b299      	uxth	r1, r3
 8002c9e:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8002ca2:	23c8      	movs	r3, #200	; 0xc8
 8002ca4:	fb03 f305 	mul.w	r3, r3, r5
 8002ca8:	4413      	add	r3, r2
 8002caa:	33c0      	adds	r3, #192	; 0xc0
 8002cac:	460a      	mov	r2, r1
 8002cae:	801a      	strh	r2, [r3, #0]
				  		  object_head_pointer = (object_head_pointer+1)%8;
 8002cb0:	f897 3a0d 	ldrb.w	r3, [r7, #2573]	; 0xa0d
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	425a      	negs	r2, r3
 8002cb8:	f003 0307 	and.w	r3, r3, #7
 8002cbc:	f002 0207 	and.w	r2, r2, #7
 8002cc0:	bf58      	it	pl
 8002cc2:	4253      	negpl	r3, r2
 8002cc4:	f887 3a0d 	strb.w	r3, [r7, #2573]	; 0xa0d
				  		  detail_array[0] = OBJECT_DETECTED;
 8002cc8:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002ccc:	221d      	movs	r2, #29
 8002cce:	701a      	strb	r2, [r3, #0]
						  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002cd0:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8002cd4:	6899      	ldr	r1, [r3, #8]
 8002cd6:	f207 72cc 	addw	r2, r7, #1996	; 0x7cc
 8002cda:	f8d7 3a28 	ldr.w	r3, [r7, #2600]	; 0xa28
 8002cde:	4413      	add	r3, r2
 8002ce0:	f507 62e5 	add.w	r2, r7, #1832	; 0x728
 8002ce4:	9300      	str	r3, [sp, #0]
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	2008      	movs	r0, #8
 8002cea:	f7ff fa3b 	bl	8002164 <commandRespond1>
 8002cee:	f8c7 09f4 	str.w	r0, [r7, #2548]	; 0x9f4
						  total_respond_length += respond_lenght;
 8002cf2:	f8d7 2a28 	ldr.w	r2, [r7, #2600]	; 0xa28
 8002cf6:	f8d7 39f4 	ldr.w	r3, [r7, #2548]	; 0x9f4
 8002cfa:	4413      	add	r3, r2
 8002cfc:	f8c7 3a28 	str.w	r3, [r7, #2600]	; 0xa28
				  	  }
				  	  break;
 8002d00:	e025      	b.n	8002d4e <StartDefaultTask+0x88e>
				  	  default:
				  	  {
				  		  LOG_REPORT("CMD Error Method !!!", __LINE__);
 8002d02:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8002d06:	48c8      	ldr	r0, [pc, #800]	; (8003028 <StartDefaultTask+0xb68>)
 8002d08:	f7ff fa94 	bl	8002234 <LOG_REPORT>
 8002d0c:	e01f      	b.n	8002d4e <StartDefaultTask+0x88e>
				  	  }
				  	  }
			  	  } else {
					detail_array[0] = INCORRECT_METHOD;
 8002d0e:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002d12:	2224      	movs	r2, #36	; 0x24
 8002d14:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002d16:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8002d1a:	6899      	ldr	r1, [r3, #8]
 8002d1c:	f207 72cc 	addw	r2, r7, #1996	; 0x7cc
 8002d20:	f8d7 3a28 	ldr.w	r3, [r7, #2600]	; 0xa28
 8002d24:	4413      	add	r3, r2
 8002d26:	f507 62e5 	add.w	r2, r7, #1832	; 0x728
 8002d2a:	9300      	str	r3, [sp, #0]
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	2007      	movs	r0, #7
 8002d30:	f7ff fa18 	bl	8002164 <commandRespond1>
 8002d34:	f8c7 09f4 	str.w	r0, [r7, #2548]	; 0x9f4
					total_respond_length += respond_lenght;
 8002d38:	f8d7 2a28 	ldr.w	r2, [r7, #2600]	; 0xa28
 8002d3c:	f8d7 39f4 	ldr.w	r3, [r7, #2548]	; 0x9f4
 8002d40:	4413      	add	r3, r2
 8002d42:	f8c7 3a28 	str.w	r3, [r7, #2600]	; 0xa28
 8002d46:	e002      	b.n	8002d4e <StartDefaultTask+0x88e>
				  	  break;
 8002d48:	bf00      	nop
 8002d4a:	e000      	b.n	8002d4e <StartDefaultTask+0x88e>
				  	  break;
 8002d4c:	bf00      	nop
			  	  }

			  }
		  isNewDuty = FALSE;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	f887 3a2f 	strb.w	r3, [r7, #2607]	; 0xa2f
	  }

	  /* 3--- Execute Phase ---*/
	  switch(current_method) {
 8002d54:	f897 3a27 	ldrb.w	r3, [r7, #2599]	; 0xa27
 8002d58:	2b04      	cmp	r3, #4
 8002d5a:	f200 8738 	bhi.w	8003bce <StartDefaultTask+0x170e>
 8002d5e:	a201      	add	r2, pc, #4	; (adr r2, 8002d64 <StartDefaultTask+0x8a4>)
 8002d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d64:	08002d79 	.word	0x08002d79
 8002d68:	08002f27 	.word	0x08002f27
 8002d6c:	08003311 	.word	0x08003311
 8002d70:	0800358b 	.word	0x0800358b
 8002d74:	080035b1 	.word	0x080035b1
	  case SCARA_METHOD_MANUAL:
	  {
		  switch( current_key_state) {
 8002d78:	f897 3a23 	ldrb.w	r3, [r7, #2595]	; 0xa23
 8002d7c:	2b03      	cmp	r3, #3
 8002d7e:	f200 870c 	bhi.w	8003b9a <StartDefaultTask+0x16da>
 8002d82:	a201      	add	r2, pc, #4	; (adr r2, 8002d88 <StartDefaultTask+0x8c8>)
 8002d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d88:	08002f21 	.word	0x08002f21
 8002d8c:	08002d99 	.word	0x08002d99
 8002d90:	08002e07 	.word	0x08002e07
 8002d94:	08002ee3 	.word	0x08002ee3
		  case SCARA_KEY_STATE_READY:
			  /* Wait for application keyboard , do nothing*/
		  break;
		  case SCARA_KEY_STATE_INIT:
		  {
			  if (scaraKeyInit1(current_key, current_key_speed1) == SCARA_STATUS_OK) {
 8002d98:	4ba4      	ldr	r3, [pc, #656]	; (800302c <StartDefaultTask+0xb6c>)
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	f897 3a22 	ldrb.w	r3, [r7, #2594]	; 0xa22
 8002da0:	4611      	mov	r1, r2
 8002da2:	4618      	mov	r0, r3
 8002da4:	f006 fe10 	bl	80099c8 <scaraKeyInit1>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d127      	bne.n	8002dfe <StartDefaultTask+0x93e>
				  run_time = 0;
 8002dae:	f04f 0300 	mov.w	r3, #0
 8002db2:	f04f 0400 	mov.w	r4, #0
 8002db6:	f507 6221 	add.w	r2, r7, #2576	; 0xa10
 8002dba:	e9c2 3400 	strd	r3, r4, [r2]
				  current_key_state = SCARA_KEY_STATE_FLOW;
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	f887 3a23 	strb.w	r3, [r7, #2595]	; 0xa23
					detail_array[0] = NONE;
 8002dc4:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002dc8:	2225      	movs	r2, #37	; 0x25
 8002dca:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_START, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002dcc:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8002dd0:	6899      	ldr	r1, [r3, #8]
 8002dd2:	f207 72cc 	addw	r2, r7, #1996	; 0x7cc
 8002dd6:	f8d7 3a28 	ldr.w	r3, [r7, #2600]	; 0xa28
 8002dda:	4413      	add	r3, r2
 8002ddc:	f507 62e5 	add.w	r2, r7, #1832	; 0x728
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	2301      	movs	r3, #1
 8002de4:	2003      	movs	r0, #3
 8002de6:	f7ff f9bd 	bl	8002164 <commandRespond1>
 8002dea:	f8c7 09f4 	str.w	r0, [r7, #2548]	; 0x9f4
					total_respond_length += respond_lenght;
 8002dee:	f8d7 2a28 	ldr.w	r2, [r7, #2600]	; 0xa28
 8002df2:	f8d7 39f4 	ldr.w	r3, [r7, #2548]	; 0x9f4
 8002df6:	4413      	add	r3, r2
 8002df8:	f8c7 3a28 	str.w	r3, [r7, #2600]	; 0xa28
			  } else {
				  current_key_state = SCARA_KEY_STATE_READY;
			  }
		  }
		  break;
 8002dfc:	e091      	b.n	8002f22 <StartDefaultTask+0xa62>
				  current_key_state = SCARA_KEY_STATE_READY;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	f887 3a23 	strb.w	r3, [r7, #2595]	; 0xa23
		  break;
 8002e04:	e08d      	b.n	8002f22 <StartDefaultTask+0xa62>
		  case SCARA_KEY_STATE_FLOW:
		  {
			  SCARA_StatusTypeDef status;
			  // Increase run time
			  run_time += T_SAMPLING;
 8002e06:	a386      	add	r3, pc, #536	; (adr r3, 8003020 <StartDefaultTask+0xb60>)
 8002e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e0c:	f507 6121 	add.w	r1, r7, #2576	; 0xa10
 8002e10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002e14:	f7fd fa3a 	bl	800028c <__adddf3>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	460c      	mov	r4, r1
 8002e1c:	f507 6221 	add.w	r2, r7, #2576	; 0xa10
 8002e20:	e9c2 3400 	strd	r3, r4, [r2]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 8002e24:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8002e28:	ed93 0b00 	vldr	d0, [r3]
 8002e2c:	f006 fcbe 	bl	80097ac <scaraIsFinish>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d003      	beq.n	8002e3e <StartDefaultTask+0x97e>
				  current_key_state = SCARA_KEY_STATE_FINISH;// Key Done
 8002e36:	2303      	movs	r3, #3
 8002e38:	f887 3a23 	strb.w	r3, [r7, #2595]	; 0xa23
					total_respond_length += respond_lenght;
					  LOG_REPORT("STOP KEY", __LINE__);
				  }
			  }
		  }
		  break;
 8002e3c:	e071      	b.n	8002f22 <StartDefaultTask+0xa62>
				  status = scaraFlowDuty(run_time, &positionNext, positionCurrent);
 8002e3e:	4c7c      	ldr	r4, [pc, #496]	; (8003030 <StartDefaultTask+0xb70>)
 8002e40:	4668      	mov	r0, sp
 8002e42:	f104 0308 	add.w	r3, r4, #8
 8002e46:	22b8      	movs	r2, #184	; 0xb8
 8002e48:	4619      	mov	r1, r3
 8002e4a:	f011 ffb7 	bl	8014dbc <memcpy>
 8002e4e:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002e52:	4878      	ldr	r0, [pc, #480]	; (8003034 <StartDefaultTask+0xb74>)
 8002e54:	f507 6121 	add.w	r1, r7, #2576	; 0xa10
 8002e58:	ed91 0b00 	vldr	d0, [r1]
 8002e5c:	f005 fe60 	bl	8008b20 <scaraFlowDuty>
 8002e60:	4603      	mov	r3, r0
 8002e62:	f887 39c9 	strb.w	r3, [r7, #2505]	; 0x9c9
				  if ( SCARA_STATUS_OK == status) {
 8002e66:	f897 39c9 	ldrb.w	r3, [r7, #2505]	; 0x9c9
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d113      	bne.n	8002e96 <StartDefaultTask+0x9d6>
					  lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 8002e6e:	4c70      	ldr	r4, [pc, #448]	; (8003030 <StartDefaultTask+0xb70>)
 8002e70:	4a70      	ldr	r2, [pc, #448]	; (8003034 <StartDefaultTask+0xb74>)
 8002e72:	ab2c      	add	r3, sp, #176	; 0xb0
 8002e74:	4611      	mov	r1, r2
 8002e76:	22c0      	movs	r2, #192	; 0xc0
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f011 ff9f 	bl	8014dbc <memcpy>
 8002e7e:	4668      	mov	r0, sp
 8002e80:	f104 0310 	add.w	r3, r4, #16
 8002e84:	22b0      	movs	r2, #176	; 0xb0
 8002e86:	4619      	mov	r1, r3
 8002e88:	f011 ff98 	bl	8014dbc <memcpy>
 8002e8c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002e90:	f002 fb02 	bl	8005498 <lowlayer_computeAndWritePulse>
		  break;
 8002e94:	e045      	b.n	8002f22 <StartDefaultTask+0xa62>
					  current_key_state = SCARA_KEY_STATE_FINISH;
 8002e96:	2303      	movs	r3, #3
 8002e98:	f887 3a23 	strb.w	r3, [r7, #2595]	; 0xa23
					detail_array[0] = status;
 8002e9c:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002ea0:	f897 29c9 	ldrb.w	r2, [r7, #2505]	; 0x9c9
 8002ea4:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_STOP, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002ea6:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8002eaa:	6899      	ldr	r1, [r3, #8]
 8002eac:	f207 72cc 	addw	r2, r7, #1996	; 0x7cc
 8002eb0:	f8d7 3a28 	ldr.w	r3, [r7, #2600]	; 0xa28
 8002eb4:	4413      	add	r3, r2
 8002eb6:	f507 62e5 	add.w	r2, r7, #1832	; 0x728
 8002eba:	9300      	str	r3, [sp, #0]
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	2006      	movs	r0, #6
 8002ec0:	f7ff f950 	bl	8002164 <commandRespond1>
 8002ec4:	f8c7 09f4 	str.w	r0, [r7, #2548]	; 0x9f4
					total_respond_length += respond_lenght;
 8002ec8:	f8d7 2a28 	ldr.w	r2, [r7, #2600]	; 0xa28
 8002ecc:	f8d7 39f4 	ldr.w	r3, [r7, #2548]	; 0x9f4
 8002ed0:	4413      	add	r3, r2
 8002ed2:	f8c7 3a28 	str.w	r3, [r7, #2600]	; 0xa28
					  LOG_REPORT("STOP KEY", __LINE__);
 8002ed6:	f44f 7103 	mov.w	r1, #524	; 0x20c
 8002eda:	4857      	ldr	r0, [pc, #348]	; (8003038 <StartDefaultTask+0xb78>)
 8002edc:	f7ff f9aa 	bl	8002234 <LOG_REPORT>
		  break;
 8002ee0:	e01f      	b.n	8002f22 <StartDefaultTask+0xa62>
		  case SCARA_KEY_STATE_FINISH:
		  {
			  lowlayer_readTruePosition(&positionNext);
 8002ee2:	4854      	ldr	r0, [pc, #336]	; (8003034 <StartDefaultTask+0xb74>)
 8002ee4:	f002 f948 	bl	8005178 <lowlayer_readTruePosition>
			  kinematicForward(&positionNext);
 8002ee8:	4852      	ldr	r0, [pc, #328]	; (8003034 <StartDefaultTask+0xb74>)
 8002eea:	f001 fa01 	bl	80042f0 <kinematicForward>
			  current_key_state = SCARA_KEY_STATE_READY;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	f887 3a23 	strb.w	r3, [r7, #2595]	; 0xa23
			  positionNext.t = 0;
 8002ef4:	4a4f      	ldr	r2, [pc, #316]	; (8003034 <StartDefaultTask+0xb74>)
 8002ef6:	f04f 0300 	mov.w	r3, #0
 8002efa:	f04f 0400 	mov.w	r4, #0
 8002efe:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
			  positionNext.total_time = 0;
 8002f02:	4a4c      	ldr	r2, [pc, #304]	; (8003034 <StartDefaultTask+0xb74>)
 8002f04:	f04f 0300 	mov.w	r3, #0
 8002f08:	f04f 0400 	mov.w	r4, #0
 8002f0c:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
			  positionNext.q = 0;
 8002f10:	4a48      	ldr	r2, [pc, #288]	; (8003034 <StartDefaultTask+0xb74>)
 8002f12:	f04f 0300 	mov.w	r3, #0
 8002f16:	f04f 0400 	mov.w	r4, #0
 8002f1a:	e9c2 3400 	strd	r3, r4, [r2]
		  }
		  break;
 8002f1e:	e000      	b.n	8002f22 <StartDefaultTask+0xa62>
		  break;
 8002f20:	bf00      	nop
		  }
	  }
	  break;
 8002f22:	f000 be3a 	b.w	8003b9a <StartDefaultTask+0x16da>

	  case SCARA_METHOD_SEMI_AUTO:
	  {
		  switch( current_mode) {
 8002f26:	f897 3a26 	ldrb.w	r3, [r7, #2598]	; 0xa26
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d00b      	beq.n	8002f46 <StartDefaultTask+0xa86>
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d066      	beq.n	8003000 <StartDefaultTask+0xb40>
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f040 81e4 	bne.w	8003300 <StartDefaultTask+0xe40>
		  case SCARA_MODE_STOP:
			  {
				  current_mode 	= SCARA_MODE_DUTY;
 8002f38:	2302      	movs	r3, #2
 8002f3a:	f887 3a26 	strb.w	r3, [r7, #2598]	; 0xa26
				  current_duty_state = SCARA_DUTY_STATE_READY;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	f887 3a25 	strb.w	r3, [r7, #2597]	; 0xa25
			  }
			  break;
 8002f44:	e1e2      	b.n	800330c <StartDefaultTask+0xe4c>

		  case SCARA_MODE_SCAN:
			  {
				  switch (current_scan_state) {
 8002f46:	f897 3a24 	ldrb.w	r3, [r7, #2596]	; 0xa24
 8002f4a:	2b03      	cmp	r3, #3
 8002f4c:	d84e      	bhi.n	8002fec <StartDefaultTask+0xb2c>
 8002f4e:	a201      	add	r2, pc, #4	; (adr r2, 8002f54 <StartDefaultTask+0xa94>)
 8002f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f54:	08002f65 	.word	0x08002f65
 8002f58:	08002f71 	.word	0x08002f71
 8002f5c:	08002f83 	.word	0x08002f83
 8002f60:	08002f97 	.word	0x08002f97
				  case SCARA_SCAN_STATE_INIT:
					  {
						  lowlayer_scanReset();
 8002f64:	f001 fefe 	bl	8004d64 <lowlayer_scanReset>
						  current_scan_state = SCARA_SCAN_STATE_HARD;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	f887 3a24 	strb.w	r3, [r7, #2596]	; 0xa24
					  }
					  break;
 8002f6e:	e046      	b.n	8002ffe <StartDefaultTask+0xb3e>
				  case SCARA_SCAN_STATE_HARD:
					  {
						  if(lowlayer_scanFlow()) {
 8002f70:	f001 ff2a 	bl	8004dc8 <lowlayer_scanFlow>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d03e      	beq.n	8002ff8 <StartDefaultTask+0xb38>
							  current_scan_state = SCARA_SCAN_STATE_SOFT;
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	f887 3a24 	strb.w	r3, [r7, #2596]	; 0xa24
						  }
					  }
					  break;
 8002f80:	e03a      	b.n	8002ff8 <StartDefaultTask+0xb38>
				  case SCARA_SCAN_STATE_SOFT:
					  {
						  if(lowlayer_goToSoftLimit(&positionNext)) {
 8002f82:	482c      	ldr	r0, [pc, #176]	; (8003034 <StartDefaultTask+0xb74>)
 8002f84:	f002 f87c 	bl	8005080 <lowlayer_goToSoftLimit>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d036      	beq.n	8002ffc <StartDefaultTask+0xb3c>
							  current_scan_state = SCARA_SCAN_STATE_FINISH;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	f887 3a24 	strb.w	r3, [r7, #2596]	; 0xa24
							}
					  }
					  break;
 8002f94:	e032      	b.n	8002ffc <StartDefaultTask+0xb3c>
				  case SCARA_SCAN_STATE_FINISH:
					  {
						  //lowlayer_readSetPosition(&positionNext);
						  lowlayer_readTruePosition(&positionNext);
 8002f96:	4827      	ldr	r0, [pc, #156]	; (8003034 <StartDefaultTask+0xb74>)
 8002f98:	f002 f8ee 	bl	8005178 <lowlayer_readTruePosition>
						  kinematicForward(&positionNext);
 8002f9c:	4825      	ldr	r0, [pc, #148]	; (8003034 <StartDefaultTask+0xb74>)
 8002f9e:	f001 f9a7 	bl	80042f0 <kinematicForward>
						  current_mode 	= SCARA_MODE_DUTY;
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	f887 3a26 	strb.w	r3, [r7, #2598]	; 0xa26
						  current_duty_state = SCARA_DUTY_STATE_READY;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	f887 3a25 	strb.w	r3, [r7, #2597]	; 0xa25
						  scaraSetScanFlag();
 8002fae:	f006 fb5f 	bl	8009670 <scaraSetScanFlag>
						//   scaraPosition2String((char *)position, positionNext);
						//   infor_lenght 		= commandRespond(RPD_DONE,
						// 									 0,
						// 									(char *)position,
						// 									(char *)infor);
						detail_array[0] = NONE;
 8002fb2:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002fb6:	2225      	movs	r2, #37	; 0x25
 8002fb8:	701a      	strb	r2, [r3, #0]
						respond_lenght = commandRespond1(RPD_DONE, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002fba:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8002fbe:	6899      	ldr	r1, [r3, #8]
 8002fc0:	f207 72cc 	addw	r2, r7, #1996	; 0x7cc
 8002fc4:	f8d7 3a28 	ldr.w	r3, [r7, #2600]	; 0xa28
 8002fc8:	4413      	add	r3, r2
 8002fca:	f507 62e5 	add.w	r2, r7, #1832	; 0x728
 8002fce:	9300      	str	r3, [sp, #0]
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	2005      	movs	r0, #5
 8002fd4:	f7ff f8c6 	bl	8002164 <commandRespond1>
 8002fd8:	f8c7 09f4 	str.w	r0, [r7, #2548]	; 0x9f4
						total_respond_length += respond_lenght;
 8002fdc:	f8d7 2a28 	ldr.w	r2, [r7, #2600]	; 0xa28
 8002fe0:	f8d7 39f4 	ldr.w	r3, [r7, #2548]	; 0x9f4
 8002fe4:	4413      	add	r3, r2
 8002fe6:	f8c7 3a28 	str.w	r3, [r7, #2600]	; 0xa28
					  }
					  break;
 8002fea:	e008      	b.n	8002ffe <StartDefaultTask+0xb3e>
				  default:
					  {
						  LOG_REPORT("ERROR STATE !!!", __LINE__);
 8002fec:	f240 2155 	movw	r1, #597	; 0x255
 8002ff0:	4812      	ldr	r0, [pc, #72]	; (800303c <StartDefaultTask+0xb7c>)
 8002ff2:	f7ff f91f 	bl	8002234 <LOG_REPORT>
						  while(1);
 8002ff6:	e7fe      	b.n	8002ff6 <StartDefaultTask+0xb36>
					  break;
 8002ff8:	bf00      	nop
 8002ffa:	e187      	b.n	800330c <StartDefaultTask+0xe4c>
					  break;
 8002ffc:	bf00      	nop
					  }
				  }

			  }
			  break;
 8002ffe:	e185      	b.n	800330c <StartDefaultTask+0xe4c>

		  case SCARA_MODE_DUTY:
			  {
				  switch (current_duty_state) {
 8003000:	f897 3a25 	ldrb.w	r3, [r7, #2597]	; 0xa25
 8003004:	2b03      	cmp	r3, #3
 8003006:	f200 8173 	bhi.w	80032f0 <StartDefaultTask+0xe30>
 800300a:	a201      	add	r2, pc, #4	; (adr r2, 8003010 <StartDefaultTask+0xb50>)
 800300c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003010:	080032fd 	.word	0x080032fd
 8003014:	08003041 	.word	0x08003041
 8003018:	0800319f 	.word	0x0800319f
 800301c:	0800327b 	.word	0x0800327b
 8003020:	40000000 	.word	0x40000000
 8003024:	3f847ae1 	.word	0x3f847ae1
 8003028:	0801a37c 	.word	0x0801a37c
 800302c:	20000060 	.word	0x20000060
 8003030:	2000d140 	.word	0x2000d140
 8003034:	2000d2c0 	.word	0x2000d2c0
 8003038:	0801a394 	.word	0x0801a394
 800303c:	0801a3a0 	.word	0x0801a3a0

				  case SCARA_DUTY_STATE_INIT:
					  {

						  SCARA_StatusTypeDef status1, status2;
						  status1 = scaraInitDuty(duty_cmd);
 8003040:	f507 64ff 	add.w	r4, r7, #2040	; 0x7f8
 8003044:	4668      	mov	r0, sp
 8003046:	f104 0310 	add.w	r3, r4, #16
 800304a:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 800304e:	4619      	mov	r1, r3
 8003050:	f011 feb4 	bl	8014dbc <memcpy>
 8003054:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003058:	f002 fdb2 	bl	8005bc0 <scaraInitDuty>
 800305c:	4603      	mov	r3, r0
 800305e:	f887 39cb 	strb.w	r3, [r7, #2507]	; 0x9cb
						  if ( SCARA_STATUS_OK == status1) {
 8003062:	f897 39cb 	ldrb.w	r3, [r7, #2507]	; 0x9cb
 8003066:	2b00      	cmp	r3, #0
 8003068:	d173      	bne.n	8003152 <StartDefaultTask+0xc92>
							  status2 = scaraTestDuty();
 800306a:	f006 fa85 	bl	8009578 <scaraTestDuty>
 800306e:	4603      	mov	r3, r0
 8003070:	f887 39ca 	strb.w	r3, [r7, #2506]	; 0x9ca
							  if (SCARA_STATUS_OK == status2) {
 8003074:	f897 39ca 	ldrb.w	r3, [r7, #2506]	; 0x9ca
 8003078:	2b00      	cmp	r3, #0
 800307a:	d144      	bne.n	8003106 <StartDefaultTask+0xc46>
							  current_duty_state = SCARA_DUTY_STATE_FLOW;
 800307c:	2302      	movs	r3, #2
 800307e:	f887 3a25 	strb.w	r3, [r7, #2597]	; 0xa25
							  //current_duty_state = SCARA_DUTY_STATE_FINISH;
							  run_time			= 0;
 8003082:	f04f 0300 	mov.w	r3, #0
 8003086:	f04f 0400 	mov.w	r4, #0
 800308a:	f507 6221 	add.w	r2, r7, #2576	; 0xa10
 800308e:	e9c2 3400 	strd	r3, r4, [r2]
							  // Respond
							  detail_array[0] = status1;
 8003092:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8003096:	f897 29cb 	ldrb.w	r2, [r7, #2507]	; 0x9cb
 800309a:	701a      	strb	r2, [r3, #0]
							  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800309c:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 80030a0:	6899      	ldr	r1, [r3, #8]
 80030a2:	f207 72cc 	addw	r2, r7, #1996	; 0x7cc
 80030a6:	f8d7 3a28 	ldr.w	r3, [r7, #2600]	; 0xa28
 80030aa:	4413      	add	r3, r2
 80030ac:	f507 62e5 	add.w	r2, r7, #1832	; 0x728
 80030b0:	9300      	str	r3, [sp, #0]
 80030b2:	2301      	movs	r3, #1
 80030b4:	2008      	movs	r0, #8
 80030b6:	f7ff f855 	bl	8002164 <commandRespond1>
 80030ba:	f8c7 09f4 	str.w	r0, [r7, #2548]	; 0x9f4
							  total_respond_length += respond_lenght;
 80030be:	f8d7 2a28 	ldr.w	r2, [r7, #2600]	; 0xa28
 80030c2:	f8d7 39f4 	ldr.w	r3, [r7, #2548]	; 0x9f4
 80030c6:	4413      	add	r3, r2
 80030c8:	f8c7 3a28 	str.w	r3, [r7, #2600]	; 0xa28
							  detail_array[0] = NONE;
 80030cc:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80030d0:	2225      	movs	r2, #37	; 0x25
 80030d2:	701a      	strb	r2, [r3, #0]
							  respond_lenght = commandRespond1(RPD_START, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80030d4:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 80030d8:	6899      	ldr	r1, [r3, #8]
 80030da:	f207 72cc 	addw	r2, r7, #1996	; 0x7cc
 80030de:	f8d7 3a28 	ldr.w	r3, [r7, #2600]	; 0xa28
 80030e2:	4413      	add	r3, r2
 80030e4:	f507 62e5 	add.w	r2, r7, #1832	; 0x728
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	2301      	movs	r3, #1
 80030ec:	2003      	movs	r0, #3
 80030ee:	f7ff f839 	bl	8002164 <commandRespond1>
 80030f2:	f8c7 09f4 	str.w	r0, [r7, #2548]	; 0x9f4
							  total_respond_length += respond_lenght;
 80030f6:	f8d7 2a28 	ldr.w	r2, [r7, #2600]	; 0xa28
 80030fa:	f8d7 39f4 	ldr.w	r3, [r7, #2548]	; 0x9f4
 80030fe:	4413      	add	r3, r2
 8003100:	f8c7 3a28 	str.w	r3, [r7, #2600]	; 0xa28
							respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
							total_respond_length += respond_lenght;
							  LOG_REPORT("INIT FAIL", __LINE__);
						  }
					  }
				  break;
 8003104:	e0fb      	b.n	80032fe <StartDefaultTask+0xe3e>
								  current_duty_state 	= SCARA_DUTY_STATE_READY;
 8003106:	2300      	movs	r3, #0
 8003108:	f887 3a25 	strb.w	r3, [r7, #2597]	; 0xa25
								  LOG_REPORT("TEST FAIL", __LINE__);
 800310c:	f44f 7120 	mov.w	r1, #640	; 0x280
 8003110:	48cf      	ldr	r0, [pc, #828]	; (8003450 <StartDefaultTask+0xf90>)
 8003112:	f7ff f88f 	bl	8002234 <LOG_REPORT>
								detail_array[0] = status2;
 8003116:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800311a:	f897 29ca 	ldrb.w	r2, [r7, #2506]	; 0x9ca
 800311e:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003120:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8003124:	6899      	ldr	r1, [r3, #8]
 8003126:	f207 72cc 	addw	r2, r7, #1996	; 0x7cc
 800312a:	f8d7 3a28 	ldr.w	r3, [r7, #2600]	; 0xa28
 800312e:	4413      	add	r3, r2
 8003130:	f507 62e5 	add.w	r2, r7, #1832	; 0x728
 8003134:	9300      	str	r3, [sp, #0]
 8003136:	2301      	movs	r3, #1
 8003138:	2007      	movs	r0, #7
 800313a:	f7ff f813 	bl	8002164 <commandRespond1>
 800313e:	f8c7 09f4 	str.w	r0, [r7, #2548]	; 0x9f4
								total_respond_length += respond_lenght;
 8003142:	f8d7 2a28 	ldr.w	r2, [r7, #2600]	; 0xa28
 8003146:	f8d7 39f4 	ldr.w	r3, [r7, #2548]	; 0x9f4
 800314a:	4413      	add	r3, r2
 800314c:	f8c7 3a28 	str.w	r3, [r7, #2600]	; 0xa28
				  break;
 8003150:	e0d5      	b.n	80032fe <StartDefaultTask+0xe3e>
							  current_duty_state 	= SCARA_DUTY_STATE_READY;
 8003152:	2300      	movs	r3, #0
 8003154:	f887 3a25 	strb.w	r3, [r7, #2597]	; 0xa25
							detail_array[0] = status1;
 8003158:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800315c:	f897 29cb 	ldrb.w	r2, [r7, #2507]	; 0x9cb
 8003160:	701a      	strb	r2, [r3, #0]
							respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003162:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8003166:	6899      	ldr	r1, [r3, #8]
 8003168:	f207 72cc 	addw	r2, r7, #1996	; 0x7cc
 800316c:	f8d7 3a28 	ldr.w	r3, [r7, #2600]	; 0xa28
 8003170:	4413      	add	r3, r2
 8003172:	f507 62e5 	add.w	r2, r7, #1832	; 0x728
 8003176:	9300      	str	r3, [sp, #0]
 8003178:	2301      	movs	r3, #1
 800317a:	2007      	movs	r0, #7
 800317c:	f7fe fff2 	bl	8002164 <commandRespond1>
 8003180:	f8c7 09f4 	str.w	r0, [r7, #2548]	; 0x9f4
							total_respond_length += respond_lenght;
 8003184:	f8d7 2a28 	ldr.w	r2, [r7, #2600]	; 0xa28
 8003188:	f8d7 39f4 	ldr.w	r3, [r7, #2548]	; 0x9f4
 800318c:	4413      	add	r3, r2
 800318e:	f8c7 3a28 	str.w	r3, [r7, #2600]	; 0xa28
							  LOG_REPORT("INIT FAIL", __LINE__);
 8003192:	f240 218b 	movw	r1, #651	; 0x28b
 8003196:	48af      	ldr	r0, [pc, #700]	; (8003454 <StartDefaultTask+0xf94>)
 8003198:	f7ff f84c 	bl	8002234 <LOG_REPORT>
				  break;
 800319c:	e0af      	b.n	80032fe <StartDefaultTask+0xe3e>

				  case SCARA_DUTY_STATE_FLOW:
					  {
						  SCARA_StatusTypeDef status;
						  // Increase run time
						  run_time += T_SAMPLING;
 800319e:	a3aa      	add	r3, pc, #680	; (adr r3, 8003448 <StartDefaultTask+0xf88>)
 80031a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a4:	f507 6121 	add.w	r1, r7, #2576	; 0xa10
 80031a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80031ac:	f7fd f86e 	bl	800028c <__adddf3>
 80031b0:	4603      	mov	r3, r0
 80031b2:	460c      	mov	r4, r1
 80031b4:	f507 6221 	add.w	r2, r7, #2576	; 0xa10
 80031b8:	e9c2 3400 	strd	r3, r4, [r2]
						  // Check Time Out
						  if (scaraIsFinish(run_time)) {
 80031bc:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80031c0:	ed93 0b00 	vldr	d0, [r3]
 80031c4:	f006 faf2 	bl	80097ac <scaraIsFinish>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d003      	beq.n	80031d6 <StartDefaultTask+0xd16>
							  current_duty_state = SCARA_DUTY_STATE_FINISH;// Work Done
 80031ce:	2303      	movs	r3, #3
 80031d0:	f887 3a25 	strb.w	r3, [r7, #2597]	; 0xa25
								total_respond_length += respond_lenght;
								  LOG_REPORT("STOP DUTY", __LINE__);
							  }
						  }
					  }
				  break;
 80031d4:	e093      	b.n	80032fe <StartDefaultTask+0xe3e>
							  status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 80031d6:	4ca0      	ldr	r4, [pc, #640]	; (8003458 <StartDefaultTask+0xf98>)
 80031d8:	4668      	mov	r0, sp
 80031da:	f104 0308 	add.w	r3, r4, #8
 80031de:	22b8      	movs	r2, #184	; 0xb8
 80031e0:	4619      	mov	r1, r3
 80031e2:	f011 fdeb 	bl	8014dbc <memcpy>
 80031e6:	e894 000c 	ldmia.w	r4, {r2, r3}
 80031ea:	489c      	ldr	r0, [pc, #624]	; (800345c <StartDefaultTask+0xf9c>)
 80031ec:	f507 6121 	add.w	r1, r7, #2576	; 0xa10
 80031f0:	ed91 0b00 	vldr	d0, [r1]
 80031f4:	f005 fc94 	bl	8008b20 <scaraFlowDuty>
 80031f8:	4603      	mov	r3, r0
 80031fa:	f887 39cc 	strb.w	r3, [r7, #2508]	; 0x9cc
							  if ( SCARA_STATUS_OK == status) {
 80031fe:	f897 39cc 	ldrb.w	r3, [r7, #2508]	; 0x9cc
 8003202:	2b00      	cmp	r3, #0
 8003204:	d113      	bne.n	800322e <StartDefaultTask+0xd6e>
								  lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 8003206:	4c94      	ldr	r4, [pc, #592]	; (8003458 <StartDefaultTask+0xf98>)
 8003208:	4a94      	ldr	r2, [pc, #592]	; (800345c <StartDefaultTask+0xf9c>)
 800320a:	ab2c      	add	r3, sp, #176	; 0xb0
 800320c:	4611      	mov	r1, r2
 800320e:	22c0      	movs	r2, #192	; 0xc0
 8003210:	4618      	mov	r0, r3
 8003212:	f011 fdd3 	bl	8014dbc <memcpy>
 8003216:	4668      	mov	r0, sp
 8003218:	f104 0310 	add.w	r3, r4, #16
 800321c:	22b0      	movs	r2, #176	; 0xb0
 800321e:	4619      	mov	r1, r3
 8003220:	f011 fdcc 	bl	8014dbc <memcpy>
 8003224:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003228:	f002 f936 	bl	8005498 <lowlayer_computeAndWritePulse>
				  break;
 800322c:	e067      	b.n	80032fe <StartDefaultTask+0xe3e>
								  current_duty_state = SCARA_DUTY_STATE_FINISH;
 800322e:	2303      	movs	r3, #3
 8003230:	f887 3a25 	strb.w	r3, [r7, #2597]	; 0xa25
								detail_array[0] = status;
 8003234:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8003238:	f897 29cc 	ldrb.w	r2, [r7, #2508]	; 0x9cc
 800323c:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond1(RPD_STOP, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800323e:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8003242:	6899      	ldr	r1, [r3, #8]
 8003244:	f207 72cc 	addw	r2, r7, #1996	; 0x7cc
 8003248:	f8d7 3a28 	ldr.w	r3, [r7, #2600]	; 0xa28
 800324c:	4413      	add	r3, r2
 800324e:	f507 62e5 	add.w	r2, r7, #1832	; 0x728
 8003252:	9300      	str	r3, [sp, #0]
 8003254:	2301      	movs	r3, #1
 8003256:	2006      	movs	r0, #6
 8003258:	f7fe ff84 	bl	8002164 <commandRespond1>
 800325c:	f8c7 09f4 	str.w	r0, [r7, #2548]	; 0x9f4
								total_respond_length += respond_lenght;
 8003260:	f8d7 2a28 	ldr.w	r2, [r7, #2600]	; 0xa28
 8003264:	f8d7 39f4 	ldr.w	r3, [r7, #2548]	; 0x9f4
 8003268:	4413      	add	r3, r2
 800326a:	f8c7 3a28 	str.w	r3, [r7, #2600]	; 0xa28
								  LOG_REPORT("STOP DUTY", __LINE__);
 800326e:	f240 21a3 	movw	r1, #675	; 0x2a3
 8003272:	487b      	ldr	r0, [pc, #492]	; (8003460 <StartDefaultTask+0xfa0>)
 8003274:	f7fe ffde 	bl	8002234 <LOG_REPORT>
				  break;
 8003278:	e041      	b.n	80032fe <StartDefaultTask+0xe3e>

				  case SCARA_DUTY_STATE_FINISH:
					  {
						  lowlayer_readTruePosition(&positionNext);
 800327a:	4878      	ldr	r0, [pc, #480]	; (800345c <StartDefaultTask+0xf9c>)
 800327c:	f001 ff7c 	bl	8005178 <lowlayer_readTruePosition>
						  kinematicForward(&positionNext);
 8003280:	4876      	ldr	r0, [pc, #472]	; (800345c <StartDefaultTask+0xf9c>)
 8003282:	f001 f835 	bl	80042f0 <kinematicForward>
						  current_duty_state = SCARA_DUTY_STATE_READY;
 8003286:	2300      	movs	r3, #0
 8003288:	f887 3a25 	strb.w	r3, [r7, #2597]	; 0xa25
						  positionNext.t = 0;
 800328c:	4a73      	ldr	r2, [pc, #460]	; (800345c <StartDefaultTask+0xf9c>)
 800328e:	f04f 0300 	mov.w	r3, #0
 8003292:	f04f 0400 	mov.w	r4, #0
 8003296:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
						  positionNext.total_time = 0;
 800329a:	4a70      	ldr	r2, [pc, #448]	; (800345c <StartDefaultTask+0xf9c>)
 800329c:	f04f 0300 	mov.w	r3, #0
 80032a0:	f04f 0400 	mov.w	r4, #0
 80032a4:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
						  positionNext.q = 0;
 80032a8:	4a6c      	ldr	r2, [pc, #432]	; (800345c <StartDefaultTask+0xf9c>)
 80032aa:	f04f 0300 	mov.w	r3, #0
 80032ae:	f04f 0400 	mov.w	r4, #0
 80032b2:	e9c2 3400 	strd	r3, r4, [r2]
						  // Done Inform

					detail_array[0] = NONE;
 80032b6:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80032ba:	2225      	movs	r2, #37	; 0x25
 80032bc:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_DONE, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80032be:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 80032c2:	6899      	ldr	r1, [r3, #8]
 80032c4:	f207 72cc 	addw	r2, r7, #1996	; 0x7cc
 80032c8:	f8d7 3a28 	ldr.w	r3, [r7, #2600]	; 0xa28
 80032cc:	4413      	add	r3, r2
 80032ce:	f507 62e5 	add.w	r2, r7, #1832	; 0x728
 80032d2:	9300      	str	r3, [sp, #0]
 80032d4:	2301      	movs	r3, #1
 80032d6:	2005      	movs	r0, #5
 80032d8:	f7fe ff44 	bl	8002164 <commandRespond1>
 80032dc:	f8c7 09f4 	str.w	r0, [r7, #2548]	; 0x9f4
					total_respond_length += respond_lenght;
 80032e0:	f8d7 2a28 	ldr.w	r2, [r7, #2600]	; 0xa28
 80032e4:	f8d7 39f4 	ldr.w	r3, [r7, #2548]	; 0x9f4
 80032e8:	4413      	add	r3, r2
 80032ea:	f8c7 3a28 	str.w	r3, [r7, #2600]	; 0xa28
					  }
				  break;
 80032ee:	e006      	b.n	80032fe <StartDefaultTask+0xe3e>

				  default:
					  {
						  LOG_REPORT("ERROR STATE !!!", __LINE__);
 80032f0:	f240 21bb 	movw	r1, #699	; 0x2bb
 80032f4:	485b      	ldr	r0, [pc, #364]	; (8003464 <StartDefaultTask+0xfa4>)
 80032f6:	f7fe ff9d 	bl	8002234 <LOG_REPORT>
						  while(1);
 80032fa:	e7fe      	b.n	80032fa <StartDefaultTask+0xe3a>
				  break;
 80032fc:	bf00      	nop
					  }
				  }

			  }
			  break;
 80032fe:	e005      	b.n	800330c <StartDefaultTask+0xe4c>

		  default:
			  {
				  LOG_REPORT("ERROR MODE !!!", __LINE__);
 8003300:	f240 21c5 	movw	r1, #709	; 0x2c5
 8003304:	4858      	ldr	r0, [pc, #352]	; (8003468 <StartDefaultTask+0xfa8>)
 8003306:	f7fe ff95 	bl	8002234 <LOG_REPORT>
				  while(1);
 800330a:	e7fe      	b.n	800330a <StartDefaultTask+0xe4a>
			  }
		  }
	  }
	  break;
 800330c:	f000 bc5f 	b.w	8003bce <StartDefaultTask+0x170e>

	  case SCARA_METHOD_GCODE:
	  {
		  switch (current_duty_state)
 8003310:	f897 3a25 	ldrb.w	r3, [r7, #2597]	; 0xa25
 8003314:	2b04      	cmp	r3, #4
 8003316:	f200 8136 	bhi.w	8003586 <StartDefaultTask+0x10c6>
 800331a:	a201      	add	r2, pc, #4	; (adr r2, 8003320 <StartDefaultTask+0xe60>)
 800331c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003320:	08003587 	.word	0x08003587
 8003324:	08003587 	.word	0x08003587
 8003328:	08003479 	.word	0x08003479
 800332c:	08003587 	.word	0x08003587
 8003330:	08003335 	.word	0x08003335
//			  pvPortMalloc(xWantedSize)
//			  vPortFree(pv)
		  }
		  break;
		  case SCARA_DUTY_STATE_OPERATION:{
			  update_gcode_point(&duty_cmd, Gcode_Cor[run_point]);
 8003334:	494d      	ldr	r1, [pc, #308]	; (800346c <StartDefaultTask+0xfac>)
 8003336:	f8d7 29fc 	ldr.w	r2, [r7, #2556]	; 0x9fc
 800333a:	4613      	mov	r3, r2
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	4413      	add	r3, r2
 8003340:	00db      	lsls	r3, r3, #3
 8003342:	440b      	add	r3, r1
 8003344:	f507 65ff 	add.w	r5, r7, #2040	; 0x7f8
 8003348:	466c      	mov	r4, sp
 800334a:	f103 020c 	add.w	r2, r3, #12
 800334e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003350:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003354:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003356:	4628      	mov	r0, r5
 8003358:	f000 fe1a 	bl	8003f90 <update_gcode_point>
			  SCARA_StatusTypeDef status;
			  status = scaraInitDuty(duty_cmd);
 800335c:	f507 64ff 	add.w	r4, r7, #2040	; 0x7f8
 8003360:	4668      	mov	r0, sp
 8003362:	f104 0310 	add.w	r3, r4, #16
 8003366:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 800336a:	4619      	mov	r1, r3
 800336c:	f011 fd26 	bl	8014dbc <memcpy>
 8003370:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003374:	f002 fc24 	bl	8005bc0 <scaraInitDuty>
 8003378:	4603      	mov	r3, r0
 800337a:	f887 39ce 	strb.w	r3, [r7, #2510]	; 0x9ce
			  if(status == SCARA_STATUS_OK){
 800337e:	f897 39ce 	ldrb.w	r3, [r7, #2510]	; 0x9ce
 8003382:	2b00      	cmp	r3, #0
 8003384:	d13e      	bne.n	8003404 <StartDefaultTask+0xf44>
				  run_time = 0;
 8003386:	f04f 0300 	mov.w	r3, #0
 800338a:	f04f 0400 	mov.w	r4, #0
 800338e:	f507 6221 	add.w	r2, r7, #2576	; 0xa10
 8003392:	e9c2 3400 	strd	r3, r4, [r2]
				  current_duty_state = SCARA_DUTY_STATE_FLOW;
 8003396:	2302      	movs	r3, #2
 8003398:	f887 3a25 	strb.w	r3, [r7, #2597]	; 0xa25
				  detail_array[0] = (uint8_t)(run_point * 100.0f / total_num_of_point );
 800339c:	f8d7 39fc 	ldr.w	r3, [r7, #2556]	; 0x9fc
 80033a0:	ee07 3a90 	vmov	s15, r3
 80033a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033a8:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8003470 <StartDefaultTask+0xfb0>
 80033ac:	ee67 6a87 	vmul.f32	s13, s15, s14
 80033b0:	4b30      	ldr	r3, [pc, #192]	; (8003474 <StartDefaultTask+0xfb4>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	ee07 3a90 	vmov	s15, r3
 80033b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033c4:	edc7 7a01 	vstr	s15, [r7, #4]
 80033c8:	793b      	ldrb	r3, [r7, #4]
 80033ca:	b2da      	uxtb	r2, r3
 80033cc:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80033d0:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RDP_GCODE_PROCESS, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80033d2:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 80033d6:	6899      	ldr	r1, [r3, #8]
 80033d8:	f207 72cc 	addw	r2, r7, #1996	; 0x7cc
 80033dc:	f8d7 3a28 	ldr.w	r3, [r7, #2600]	; 0xa28
 80033e0:	4413      	add	r3, r2
 80033e2:	f507 62e5 	add.w	r2, r7, #1832	; 0x728
 80033e6:	9300      	str	r3, [sp, #0]
 80033e8:	2301      	movs	r3, #1
 80033ea:	200b      	movs	r0, #11
 80033ec:	f7fe feba 	bl	8002164 <commandRespond1>
 80033f0:	f8c7 09f4 	str.w	r0, [r7, #2548]	; 0x9f4
				  total_respond_length += respond_lenght;
 80033f4:	f8d7 2a28 	ldr.w	r2, [r7, #2600]	; 0xa28
 80033f8:	f8d7 39f4 	ldr.w	r3, [r7, #2548]	; 0x9f4
 80033fc:	4413      	add	r3, r2
 80033fe:	f8c7 3a28 	str.w	r3, [r7, #2600]	; 0xa28
 8003402:	e039      	b.n	8003478 <StartDefaultTask+0xfb8>
			  }else{
				  current_duty_state = SCARA_DUTY_STATE_FINISH;
 8003404:	2303      	movs	r3, #3
 8003406:	f887 3a25 	strb.w	r3, [r7, #2597]	; 0xa25
				  detail_array[0] = status;
 800340a:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800340e:	f897 29ce 	ldrb.w	r2, [r7, #2510]	; 0x9ce
 8003412:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003414:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8003418:	6899      	ldr	r1, [r3, #8]
 800341a:	f207 72cc 	addw	r2, r7, #1996	; 0x7cc
 800341e:	f8d7 3a28 	ldr.w	r3, [r7, #2600]	; 0xa28
 8003422:	4413      	add	r3, r2
 8003424:	f507 62e5 	add.w	r2, r7, #1832	; 0x728
 8003428:	9300      	str	r3, [sp, #0]
 800342a:	2301      	movs	r3, #1
 800342c:	2007      	movs	r0, #7
 800342e:	f7fe fe99 	bl	8002164 <commandRespond1>
 8003432:	f8c7 09f4 	str.w	r0, [r7, #2548]	; 0x9f4
				  total_respond_length += respond_lenght;
 8003436:	f8d7 2a28 	ldr.w	r2, [r7, #2600]	; 0xa28
 800343a:	f8d7 39f4 	ldr.w	r3, [r7, #2548]	; 0x9f4
 800343e:	4413      	add	r3, r2
 8003440:	f8c7 3a28 	str.w	r3, [r7, #2600]	; 0xa28
				  break;
 8003444:	e0a0      	b.n	8003588 <StartDefaultTask+0x10c8>
 8003446:	bf00      	nop
 8003448:	40000000 	.word	0x40000000
 800344c:	3f847ae1 	.word	0x3f847ae1
 8003450:	0801a3b0 	.word	0x0801a3b0
 8003454:	0801a3bc 	.word	0x0801a3bc
 8003458:	2000d140 	.word	0x2000d140
 800345c:	2000d2c0 	.word	0x2000d2c0
 8003460:	0801a3c8 	.word	0x0801a3c8
 8003464:	0801a3a0 	.word	0x0801a3a0
 8003468:	0801a3d4 	.word	0x0801a3d4
 800346c:	200065dc 	.word	0x200065dc
 8003470:	42c80000 	.word	0x42c80000
 8003474:	200065d8 	.word	0x200065d8
			  }
		  }
		  //break;

		  case SCARA_DUTY_STATE_FLOW:{
			  run_time += T_SAMPLING;
 8003478:	a3d5      	add	r3, pc, #852	; (adr r3, 80037d0 <StartDefaultTask+0x1310>)
 800347a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800347e:	f507 6121 	add.w	r1, r7, #2576	; 0xa10
 8003482:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003486:	f7fc ff01 	bl	800028c <__adddf3>
 800348a:	4603      	mov	r3, r0
 800348c:	460c      	mov	r4, r1
 800348e:	f507 6221 	add.w	r2, r7, #2576	; 0xa10
 8003492:	e9c2 3400 	strd	r3, r4, [r2]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 8003496:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 800349a:	ed93 0b00 	vldr	d0, [r3]
 800349e:	f006 f985 	bl	80097ac <scaraIsFinish>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d021      	beq.n	80034ec <StartDefaultTask+0x102c>
				if(run_point >= total_num_of_point){
 80034a8:	4bbd      	ldr	r3, [pc, #756]	; (80037a0 <StartDefaultTask+0x12e0>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f8d7 29fc 	ldr.w	r2, [r7, #2556]	; 0x9fc
 80034b0:	429a      	cmp	r2, r3
 80034b2:	db09      	blt.n	80034c8 <StartDefaultTask+0x1008>
					current_duty_state = SCARA_DUTY_STATE_READY;
 80034b4:	2300      	movs	r3, #0
 80034b6:	f887 3a25 	strb.w	r3, [r7, #2597]	; 0xa25
					lowlayer_readTruePosition(&positionNext);
 80034ba:	48ba      	ldr	r0, [pc, #744]	; (80037a4 <StartDefaultTask+0x12e4>)
 80034bc:	f001 fe5c 	bl	8005178 <lowlayer_readTruePosition>
				    kinematicForward(&positionNext);
 80034c0:	48b8      	ldr	r0, [pc, #736]	; (80037a4 <StartDefaultTask+0x12e4>)
 80034c2:	f000 ff15 	bl	80042f0 <kinematicForward>
					  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
					  total_respond_length += respond_lenght;
				  }
			  }
		  }
		  break;
 80034c6:	e05f      	b.n	8003588 <StartDefaultTask+0x10c8>
					current_duty_state = SCARA_DUTY_STATE_OPERATION;
 80034c8:	2304      	movs	r3, #4
 80034ca:	f887 3a25 	strb.w	r3, [r7, #2597]	; 0xa25
					run_point++;
 80034ce:	f8d7 39fc 	ldr.w	r3, [r7, #2556]	; 0x9fc
 80034d2:	3301      	adds	r3, #1
 80034d4:	f8c7 39fc 	str.w	r3, [r7, #2556]	; 0x9fc
					memcpy(&positionNext, &duty_cmd.target_point, sizeof(SCARA_PositionTypeDef));
 80034d8:	4ab2      	ldr	r2, [pc, #712]	; (80037a4 <StartDefaultTask+0x12e4>)
 80034da:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 80034de:	4610      	mov	r0, r2
 80034e0:	3328      	adds	r3, #40	; 0x28
 80034e2:	22c0      	movs	r2, #192	; 0xc0
 80034e4:	4619      	mov	r1, r3
 80034e6:	f011 fc69 	bl	8014dbc <memcpy>
		  break;
 80034ea:	e04d      	b.n	8003588 <StartDefaultTask+0x10c8>
				SCARA_StatusTypeDef status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 80034ec:	4cae      	ldr	r4, [pc, #696]	; (80037a8 <StartDefaultTask+0x12e8>)
 80034ee:	4668      	mov	r0, sp
 80034f0:	f104 0308 	add.w	r3, r4, #8
 80034f4:	22b8      	movs	r2, #184	; 0xb8
 80034f6:	4619      	mov	r1, r3
 80034f8:	f011 fc60 	bl	8014dbc <memcpy>
 80034fc:	e894 000c 	ldmia.w	r4, {r2, r3}
 8003500:	48a8      	ldr	r0, [pc, #672]	; (80037a4 <StartDefaultTask+0x12e4>)
 8003502:	f507 6121 	add.w	r1, r7, #2576	; 0xa10
 8003506:	ed91 0b00 	vldr	d0, [r1]
 800350a:	f005 fb09 	bl	8008b20 <scaraFlowDuty>
 800350e:	4603      	mov	r3, r0
 8003510:	f887 39cd 	strb.w	r3, [r7, #2509]	; 0x9cd
				if ( SCARA_STATUS_OK == status) {
 8003514:	f897 39cd 	ldrb.w	r3, [r7, #2509]	; 0x9cd
 8003518:	2b00      	cmp	r3, #0
 800351a:	d113      	bne.n	8003544 <StartDefaultTask+0x1084>
					lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 800351c:	4ca2      	ldr	r4, [pc, #648]	; (80037a8 <StartDefaultTask+0x12e8>)
 800351e:	4aa1      	ldr	r2, [pc, #644]	; (80037a4 <StartDefaultTask+0x12e4>)
 8003520:	ab2c      	add	r3, sp, #176	; 0xb0
 8003522:	4611      	mov	r1, r2
 8003524:	22c0      	movs	r2, #192	; 0xc0
 8003526:	4618      	mov	r0, r3
 8003528:	f011 fc48 	bl	8014dbc <memcpy>
 800352c:	4668      	mov	r0, sp
 800352e:	f104 0310 	add.w	r3, r4, #16
 8003532:	22b0      	movs	r2, #176	; 0xb0
 8003534:	4619      	mov	r1, r3
 8003536:	f011 fc41 	bl	8014dbc <memcpy>
 800353a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800353e:	f001 ffab 	bl	8005498 <lowlayer_computeAndWritePulse>
		  break;
 8003542:	e021      	b.n	8003588 <StartDefaultTask+0x10c8>
					  current_duty_state = SCARA_DUTY_STATE_FINISH;
 8003544:	2303      	movs	r3, #3
 8003546:	f887 3a25 	strb.w	r3, [r7, #2597]	; 0xa25
					  detail_array[0] = status;
 800354a:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800354e:	f897 29cd 	ldrb.w	r2, [r7, #2509]	; 0x9cd
 8003552:	701a      	strb	r2, [r3, #0]
					  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003554:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8003558:	6899      	ldr	r1, [r3, #8]
 800355a:	f207 72cc 	addw	r2, r7, #1996	; 0x7cc
 800355e:	f8d7 3a28 	ldr.w	r3, [r7, #2600]	; 0xa28
 8003562:	4413      	add	r3, r2
 8003564:	f507 62e5 	add.w	r2, r7, #1832	; 0x728
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	2301      	movs	r3, #1
 800356c:	2007      	movs	r0, #7
 800356e:	f7fe fdf9 	bl	8002164 <commandRespond1>
 8003572:	f8c7 09f4 	str.w	r0, [r7, #2548]	; 0x9f4
					  total_respond_length += respond_lenght;
 8003576:	f8d7 2a28 	ldr.w	r2, [r7, #2600]	; 0xa28
 800357a:	f8d7 39f4 	ldr.w	r3, [r7, #2548]	; 0x9f4
 800357e:	4413      	add	r3, r2
 8003580:	f8c7 3a28 	str.w	r3, [r7, #2600]	; 0xa28
		  break;
 8003584:	e000      	b.n	8003588 <StartDefaultTask+0x10c8>

		  }
		  break;
		  
		  default:
			  break;
 8003586:	bf00      	nop
		  }
	  }

	  break;
 8003588:	e321      	b.n	8003bce <StartDefaultTask+0x170e>
	  case SCARA_METHOD_TEST:
	  {
		  lowlayer_writePulse(test_value[0], test_value[1], test_value[2], test_value[3]);
 800358a:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 800358e:	f993 0000 	ldrsb.w	r0, [r3]
 8003592:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 8003596:	f993 1001 	ldrsb.w	r1, [r3, #1]
 800359a:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 800359e:	f993 2002 	ldrsb.w	r2, [r3, #2]
 80035a2:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 80035a6:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80035aa:	f002 f919 	bl	80057e0 <lowlayer_writePulse>
	  }
	  break;
 80035ae:	e30e      	b.n	8003bce <StartDefaultTask+0x170e>


	  case SCARA_METHOD_PICK_AND_PLACE:
	  {
		  switch(current_duty_state) {
 80035b0:	f897 3a25 	ldrb.w	r3, [r7, #2597]	; 0xa25
 80035b4:	3b01      	subs	r3, #1
 80035b6:	2b03      	cmp	r3, #3
 80035b8:	f200 8308 	bhi.w	8003bcc <StartDefaultTask+0x170c>
 80035bc:	a201      	add	r2, pc, #4	; (adr r2, 80035c4 <StartDefaultTask+0x1104>)
 80035be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c2:	bf00      	nop
 80035c4:	080035d5 	.word	0x080035d5
 80035c8:	08003a6f 	.word	0x08003a6f
 80035cc:	08003b8f 	.word	0x08003b8f
 80035d0:	0800360d 	.word	0x0800360d
		  case SCARA_DUTY_STATE_INIT:{
			  //Object = calloc(8, sizeof(SCARA_Pick_And_Place_Package));
			  HAL_TIM_Base_Start(&htim2);
 80035d4:	4875      	ldr	r0, [pc, #468]	; (80037ac <StartDefaultTask+0x12ec>)
 80035d6:	f009 fd0c 	bl	800cff2 <HAL_TIM_Base_Start>
			  object_tail_pointer = 0;
 80035da:	2300      	movs	r3, #0
 80035dc:	f887 3a0e 	strb.w	r3, [r7, #2574]	; 0xa0e
			  object_head_pointer = 0;
 80035e0:	2300      	movs	r3, #0
 80035e2:	f887 3a0d 	strb.w	r3, [r7, #2573]	; 0xa0d
			  operation_state = SCARA_MOVE_TO_TARGET;
 80035e6:	2300      	movs	r3, #0
 80035e8:	f887 3a0f 	strb.w	r3, [r7, #2575]	; 0xa0f
			  current_duty_state = SCARA_DUTY_STATE_OPERATION;
 80035ec:	2304      	movs	r3, #4
 80035ee:	f887 3a25 	strb.w	r3, [r7, #2597]	; 0xa25
			  duty_cmd.robot_method = SCARA_METHOD_PICK_AND_PLACE;
 80035f2:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 80035f6:	2204      	movs	r2, #4
 80035f8:	705a      	strb	r2, [r3, #1]
			  duty_cmd.path_type = DUTY_PATH_LINE;
 80035fa:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 80035fe:	2200      	movs	r2, #0
 8003600:	739a      	strb	r2, [r3, #14]
			  duty_cmd.space_type = DUTY_SPACE_TASK;
 8003602:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8003606:	2200      	movs	r2, #0
 8003608:	735a      	strb	r2, [r3, #13]
		  }
		  break;
 800360a:	e2c5      	b.n	8003b98 <StartDefaultTask+0x16d8>

		  case SCARA_DUTY_STATE_OPERATION:{
			  if(object_tail_pointer != object_head_pointer){
 800360c:	f897 2a0e 	ldrb.w	r2, [r7, #2574]	; 0xa0e
 8003610:	f897 3a0d 	ldrb.w	r3, [r7, #2573]	; 0xa0d
 8003614:	429a      	cmp	r2, r3
 8003616:	f000 82bc 	beq.w	8003b92 <StartDefaultTask+0x16d2>
				  switch(operation_state){
 800361a:	f897 3a0f 	ldrb.w	r3, [r7, #2575]	; 0xa0f
 800361e:	2b07      	cmp	r3, #7
 8003620:	f200 8186 	bhi.w	8003930 <StartDefaultTask+0x1470>
 8003624:	a201      	add	r2, pc, #4	; (adr r2, 800362c <StartDefaultTask+0x116c>)
 8003626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800362a:	bf00      	nop
 800362c:	0800364d 	.word	0x0800364d
 8003630:	0800372f 	.word	0x0800372f
 8003634:	0800375b 	.word	0x0800375b
 8003638:	08003771 	.word	0x08003771
 800363c:	080037d9 	.word	0x080037d9
 8003640:	080038c3 	.word	0x080038c3
 8003644:	080038ef 	.word	0x080038ef
 8003648:	08003905 	.word	0x08003905
					  case SCARA_MOVE_TO_TARGET:{
						  double wait_time = TIMER_SCALE*((uint16_t)(TIM2->CNT - Object[object_tail_pointer].timer_value)) + MOVE_TIME + PUT_DOWN_TIME_ON_OBJECT;
 800364c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003652:	b29a      	uxth	r2, r3
 8003654:	f897 3a0e 	ldrb.w	r3, [r7, #2574]	; 0xa0e
 8003658:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 800365c:	20c8      	movs	r0, #200	; 0xc8
 800365e:	fb00 f303 	mul.w	r3, r0, r3
 8003662:	440b      	add	r3, r1
 8003664:	33c0      	adds	r3, #192	; 0xc0
 8003666:	881b      	ldrh	r3, [r3, #0]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	b29b      	uxth	r3, r3
 800366c:	ee07 3a90 	vmov	s15, r3
 8003670:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003674:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80037b0 <StartDefaultTask+0x12f0>
 8003678:	ee67 7a87 	vmul.f32	s15, s15, s14
 800367c:	ee17 0a90 	vmov	r0, s15
 8003680:	f7fc ff62 	bl	8000548 <__aeabi_f2d>
 8003684:	4b4b      	ldr	r3, [pc, #300]	; (80037b4 <StartDefaultTask+0x12f4>)
 8003686:	e9d3 3400 	ldrd	r3, r4, [r3]
 800368a:	461a      	mov	r2, r3
 800368c:	4623      	mov	r3, r4
 800368e:	f7fc fdfd 	bl	800028c <__adddf3>
 8003692:	4603      	mov	r3, r0
 8003694:	460c      	mov	r4, r1
 8003696:	4618      	mov	r0, r3
 8003698:	4621      	mov	r1, r4
 800369a:	4b47      	ldr	r3, [pc, #284]	; (80037b8 <StartDefaultTask+0x12f8>)
 800369c:	e9d3 3400 	ldrd	r3, r4, [r3]
 80036a0:	461a      	mov	r2, r3
 80036a2:	4623      	mov	r3, r4
 80036a4:	f7fc fdf2 	bl	800028c <__adddf3>
 80036a8:	4603      	mov	r3, r0
 80036aa:	460c      	mov	r4, r1
 80036ac:	f507 621d 	add.w	r2, r7, #2512	; 0x9d0
 80036b0:	e9c2 3400 	strd	r3, r4, [r2]
						  Object[object_tail_pointer].object_position.y -= wait_time*conveyor_speed;
 80036b4:	f897 3a0e 	ldrb.w	r3, [r7, #2574]	; 0xa0e
 80036b8:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80036bc:	21c8      	movs	r1, #200	; 0xc8
 80036be:	fb01 f303 	mul.w	r3, r1, r3
 80036c2:	4413      	add	r3, r2
 80036c4:	3350      	adds	r3, #80	; 0x50
 80036c6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80036ca:	4b3c      	ldr	r3, [pc, #240]	; (80037bc <StartDefaultTask+0x12fc>)
 80036cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036d0:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 80036d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d8:	f7fc ff8e 	bl	80005f8 <__aeabi_dmul>
 80036dc:	4602      	mov	r2, r0
 80036de:	460b      	mov	r3, r1
 80036e0:	f897 6a0e 	ldrb.w	r6, [r7, #2574]	; 0xa0e
 80036e4:	4620      	mov	r0, r4
 80036e6:	4629      	mov	r1, r5
 80036e8:	f7fc fdce 	bl	8000288 <__aeabi_dsub>
 80036ec:	4603      	mov	r3, r0
 80036ee:	460c      	mov	r4, r1
 80036f0:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 80036f4:	22c8      	movs	r2, #200	; 0xc8
 80036f6:	fb02 f206 	mul.w	r2, r2, r6
 80036fa:	440a      	add	r2, r1
 80036fc:	3250      	adds	r2, #80	; 0x50
 80036fe:	e9c2 3400 	strd	r3, r4, [r2]
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 8003702:	f897 2a0e 	ldrb.w	r2, [r7, #2574]	; 0xa0e
 8003706:	4b2e      	ldr	r3, [pc, #184]	; (80037c0 <StartDefaultTask+0x1300>)
 8003708:	e9d3 3400 	ldrd	r3, r4, [r3]
 800370c:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003710:	20c8      	movs	r0, #200	; 0xc8
 8003712:	fb00 f202 	mul.w	r2, r0, r2
 8003716:	440a      	add	r2, r1
 8003718:	3258      	adds	r2, #88	; 0x58
 800371a:	e9c2 3400 	strd	r3, r4, [r2]
						  state_time = MOVE_TIME;
 800371e:	4b25      	ldr	r3, [pc, #148]	; (80037b4 <StartDefaultTask+0x12f4>)
 8003720:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003724:	f507 6220 	add.w	r2, r7, #2560	; 0xa00
 8003728:	e9c2 3400 	strd	r3, r4, [r2]
					  }
					  break;
 800372c:	e100      	b.n	8003930 <StartDefaultTask+0x1470>

					  case SCARA_MOVE_DOWN_ON_OBJECT:{
						  Object[object_tail_pointer].object_position.z = DOWN_HEIGHT_ON_OBJECT;
 800372e:	f897 2a0e 	ldrb.w	r2, [r7, #2574]	; 0xa0e
 8003732:	4b24      	ldr	r3, [pc, #144]	; (80037c4 <StartDefaultTask+0x1304>)
 8003734:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003738:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 800373c:	20c8      	movs	r0, #200	; 0xc8
 800373e:	fb00 f202 	mul.w	r2, r0, r2
 8003742:	440a      	add	r2, r1
 8003744:	3258      	adds	r2, #88	; 0x58
 8003746:	e9c2 3400 	strd	r3, r4, [r2]
						  state_time = PUT_DOWN_TIME_ON_OBJECT;
 800374a:	4b1b      	ldr	r3, [pc, #108]	; (80037b8 <StartDefaultTask+0x12f8>)
 800374c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003750:	f507 6220 	add.w	r2, r7, #2560	; 0xa00
 8003754:	e9c2 3400 	strd	r3, r4, [r2]
					  }
					  break;
 8003758:	e0ea      	b.n	8003930 <StartDefaultTask+0x1470>
					  case SCARA_ATTACH:{
						  state_time = ATTACH_TIME;
 800375a:	4b1b      	ldr	r3, [pc, #108]	; (80037c8 <StartDefaultTask+0x1308>)
 800375c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003760:	f507 6220 	add.w	r2, r7, #2560	; 0xa00
 8003764:	e9c2 3400 	strd	r3, r4, [r2]
						  scaraSetOutput(1);
 8003768:	2001      	movs	r0, #1
 800376a:	f005 ff8d 	bl	8009688 <scaraSetOutput>
					  }
					  break;
 800376e:	e0df      	b.n	8003930 <StartDefaultTask+0x1470>
					  case SCARA_MOVE_UP_ON_OBJECT:{
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 8003770:	f897 2a0e 	ldrb.w	r2, [r7, #2574]	; 0xa0e
 8003774:	4b12      	ldr	r3, [pc, #72]	; (80037c0 <StartDefaultTask+0x1300>)
 8003776:	e9d3 3400 	ldrd	r3, r4, [r3]
 800377a:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 800377e:	20c8      	movs	r0, #200	; 0xc8
 8003780:	fb00 f202 	mul.w	r2, r0, r2
 8003784:	440a      	add	r2, r1
 8003786:	3258      	adds	r2, #88	; 0x58
 8003788:	e9c2 3400 	strd	r3, r4, [r2]
						  state_time = PICK_UP_TIME_ON_OBJECT;
 800378c:	4b0f      	ldr	r3, [pc, #60]	; (80037cc <StartDefaultTask+0x130c>)
 800378e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003792:	f507 6220 	add.w	r2, r7, #2560	; 0xa00
 8003796:	e9c2 3400 	strd	r3, r4, [r2]
					  }
					  break;
 800379a:	e0c9      	b.n	8003930 <StartDefaultTask+0x1470>
 800379c:	f3af 8000 	nop.w
 80037a0:	200065d8 	.word	0x200065d8
 80037a4:	2000d2c0 	.word	0x2000d2c0
 80037a8:	2000d140 	.word	0x2000d140
 80037ac:	2000d3c0 	.word	0x2000d3c0
 80037b0:	399c09bf 	.word	0x399c09bf
 80037b4:	20000028 	.word	0x20000028
 80037b8:	20000010 	.word	0x20000010
 80037bc:	20000058 	.word	0x20000058
 80037c0:	20000040 	.word	0x20000040
 80037c4:	20000048 	.word	0x20000048
 80037c8:	20000030 	.word	0x20000030
 80037cc:	20000018 	.word	0x20000018
 80037d0:	40000000 	.word	0x40000000
 80037d4:	3f847ae1 	.word	0x3f847ae1
					  case SCARA_MOVE_TO_SLOT :{

						  Object[object_tail_pointer].object_position.x = SLot_Cordinate[Object[object_tail_pointer].object_position.object_type].posx;
 80037d8:	f897 3a0e 	ldrb.w	r3, [r7, #2574]	; 0xa0e
 80037dc:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80037e0:	21c8      	movs	r1, #200	; 0xc8
 80037e2:	fb01 f303 	mul.w	r3, r1, r3
 80037e6:	4413      	add	r3, r2
 80037e8:	33b8      	adds	r3, #184	; 0xb8
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	4618      	mov	r0, r3
 80037ee:	f897 2a0e 	ldrb.w	r2, [r7, #2574]	; 0xa0e
 80037f2:	f107 0120 	add.w	r1, r7, #32
 80037f6:	4603      	mov	r3, r0
 80037f8:	005b      	lsls	r3, r3, #1
 80037fa:	4403      	add	r3, r0
 80037fc:	00db      	lsls	r3, r3, #3
 80037fe:	440b      	add	r3, r1
 8003800:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003804:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003808:	20c8      	movs	r0, #200	; 0xc8
 800380a:	fb00 f202 	mul.w	r2, r0, r2
 800380e:	440a      	add	r2, r1
 8003810:	3248      	adds	r2, #72	; 0x48
 8003812:	e9c2 3400 	strd	r3, r4, [r2]
						  Object[object_tail_pointer].object_position.y = SLot_Cordinate[Object[object_tail_pointer].object_position.object_type].posy;
 8003816:	f897 3a0e 	ldrb.w	r3, [r7, #2574]	; 0xa0e
 800381a:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800381e:	21c8      	movs	r1, #200	; 0xc8
 8003820:	fb01 f303 	mul.w	r3, r1, r3
 8003824:	4413      	add	r3, r2
 8003826:	33b8      	adds	r3, #184	; 0xb8
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	4618      	mov	r0, r3
 800382c:	f897 2a0e 	ldrb.w	r2, [r7, #2574]	; 0xa0e
 8003830:	f107 0120 	add.w	r1, r7, #32
 8003834:	4603      	mov	r3, r0
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	4403      	add	r3, r0
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	440b      	add	r3, r1
 800383e:	3308      	adds	r3, #8
 8003840:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003844:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003848:	20c8      	movs	r0, #200	; 0xc8
 800384a:	fb00 f202 	mul.w	r2, r0, r2
 800384e:	440a      	add	r2, r1
 8003850:	3250      	adds	r2, #80	; 0x50
 8003852:	e9c2 3400 	strd	r3, r4, [r2]
						  Object[object_tail_pointer].object_position.roll = SLot_Cordinate[Object[object_tail_pointer].object_position.object_type].roll;
 8003856:	f897 3a0e 	ldrb.w	r3, [r7, #2574]	; 0xa0e
 800385a:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800385e:	21c8      	movs	r1, #200	; 0xc8
 8003860:	fb01 f303 	mul.w	r3, r1, r3
 8003864:	4413      	add	r3, r2
 8003866:	33b8      	adds	r3, #184	; 0xb8
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	4618      	mov	r0, r3
 800386c:	f897 2a0e 	ldrb.w	r2, [r7, #2574]	; 0xa0e
 8003870:	f107 0120 	add.w	r1, r7, #32
 8003874:	4603      	mov	r3, r0
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	4403      	add	r3, r0
 800387a:	00db      	lsls	r3, r3, #3
 800387c:	440b      	add	r3, r1
 800387e:	3310      	adds	r3, #16
 8003880:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003884:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003888:	20c8      	movs	r0, #200	; 0xc8
 800388a:	fb00 f202 	mul.w	r2, r0, r2
 800388e:	440a      	add	r2, r1
 8003890:	3260      	adds	r2, #96	; 0x60
 8003892:	e9c2 3400 	strd	r3, r4, [r2]
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 8003896:	f897 2a0e 	ldrb.w	r2, [r7, #2574]	; 0xa0e
 800389a:	4bc3      	ldr	r3, [pc, #780]	; (8003ba8 <StartDefaultTask+0x16e8>)
 800389c:	e9d3 3400 	ldrd	r3, r4, [r3]
 80038a0:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 80038a4:	20c8      	movs	r0, #200	; 0xc8
 80038a6:	fb00 f202 	mul.w	r2, r0, r2
 80038aa:	440a      	add	r2, r1
 80038ac:	3258      	adds	r2, #88	; 0x58
 80038ae:	e9c2 3400 	strd	r3, r4, [r2]
						  state_time = MOVE_TIME;
 80038b2:	4bbe      	ldr	r3, [pc, #760]	; (8003bac <StartDefaultTask+0x16ec>)
 80038b4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80038b8:	f507 6220 	add.w	r2, r7, #2560	; 0xa00
 80038bc:	e9c2 3400 	strd	r3, r4, [r2]
					  }
					  break;
 80038c0:	e036      	b.n	8003930 <StartDefaultTask+0x1470>
					  case SCARA_MOVE_DOWN_ON_SLOT:{
						  Object[object_tail_pointer].object_position.z = DOWN_HEIGHT_ON_SLOT;
 80038c2:	f897 2a0e 	ldrb.w	r2, [r7, #2574]	; 0xa0e
 80038c6:	4bba      	ldr	r3, [pc, #744]	; (8003bb0 <StartDefaultTask+0x16f0>)
 80038c8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80038cc:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 80038d0:	20c8      	movs	r0, #200	; 0xc8
 80038d2:	fb00 f202 	mul.w	r2, r0, r2
 80038d6:	440a      	add	r2, r1
 80038d8:	3258      	adds	r2, #88	; 0x58
 80038da:	e9c2 3400 	strd	r3, r4, [r2]
						  state_time = PUT_DOWN_TIME_ON_SLOT;
 80038de:	4bb5      	ldr	r3, [pc, #724]	; (8003bb4 <StartDefaultTask+0x16f4>)
 80038e0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80038e4:	f507 6220 	add.w	r2, r7, #2560	; 0xa00
 80038e8:	e9c2 3400 	strd	r3, r4, [r2]
					  }
					  break;
 80038ec:	e020      	b.n	8003930 <StartDefaultTask+0x1470>
					  case SCARA_RELEASE:{
						  state_time = DETACH_TIME;
 80038ee:	4bb2      	ldr	r3, [pc, #712]	; (8003bb8 <StartDefaultTask+0x16f8>)
 80038f0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80038f4:	f507 6220 	add.w	r2, r7, #2560	; 0xa00
 80038f8:	e9c2 3400 	strd	r3, r4, [r2]
						  scaraSetOutput(0);
 80038fc:	2000      	movs	r0, #0
 80038fe:	f005 fec3 	bl	8009688 <scaraSetOutput>
					  }
					  break;
 8003902:	e015      	b.n	8003930 <StartDefaultTask+0x1470>
					  case SCARA_MOVE_UP_ON_SLOT:{
						  state_time = PICK_UP_TIME_ON_SLOT;
 8003904:	4bad      	ldr	r3, [pc, #692]	; (8003bbc <StartDefaultTask+0x16fc>)
 8003906:	e9d3 3400 	ldrd	r3, r4, [r3]
 800390a:	f507 6220 	add.w	r2, r7, #2560	; 0xa00
 800390e:	e9c2 3400 	strd	r3, r4, [r2]
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 8003912:	f897 2a0e 	ldrb.w	r2, [r7, #2574]	; 0xa0e
 8003916:	4ba4      	ldr	r3, [pc, #656]	; (8003ba8 <StartDefaultTask+0x16e8>)
 8003918:	e9d3 3400 	ldrd	r3, r4, [r3]
 800391c:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003920:	20c8      	movs	r0, #200	; 0xc8
 8003922:	fb00 f202 	mul.w	r2, r0, r2
 8003926:	440a      	add	r2, r1
 8003928:	3258      	adds	r2, #88	; 0x58
 800392a:	e9c2 3400 	strd	r3, r4, [r2]
					  }
					  break;
 800392e:	bf00      	nop
				  }
				  memcpy(&duty_cmd.target_point, &Object[object_tail_pointer].object_position, sizeof(SCARA_PositionTypeDef));
 8003930:	f897 3a0e 	ldrb.w	r3, [r7, #2574]	; 0xa0e
 8003934:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8003938:	21c8      	movs	r1, #200	; 0xc8
 800393a:	fb01 f303 	mul.w	r3, r1, r3
 800393e:	18d1      	adds	r1, r2, r3
 8003940:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8003944:	3328      	adds	r3, #40	; 0x28
 8003946:	22c0      	movs	r2, #192	; 0xc0
 8003948:	4618      	mov	r0, r3
 800394a:	f011 fa37 	bl	8014dbc <memcpy>
				  duty_cmd.time_total = state_time;
 800394e:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 8003952:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8003956:	e9d3 3400 	ldrd	r3, r4, [r3]
 800395a:	e9c2 3408 	strd	r3, r4, [r2, #32]
				  SCARA_StatusTypeDef status1;
				  duty_cmd.v_factor = 0;
 800395e:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 8003962:	f04f 0300 	mov.w	r3, #0
 8003966:	f04f 0400 	mov.w	r4, #0
 800396a:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
				  if(operation_state == SCARA_ATTACH || operation_state == SCARA_RELEASE){
 800396e:	f897 3a0f 	ldrb.w	r3, [r7, #2575]	; 0xa0f
 8003972:	2b02      	cmp	r3, #2
 8003974:	d003      	beq.n	800397e <StartDefaultTask+0x14be>
 8003976:	f897 3a0f 	ldrb.w	r3, [r7, #2575]	; 0xa0f
 800397a:	2b06      	cmp	r3, #6
 800397c:	d103      	bne.n	8003986 <StartDefaultTask+0x14c6>
					  status1 = SCARA_STATUS_OK;
 800397e:	2300      	movs	r3, #0
 8003980:	f887 39fb 	strb.w	r3, [r7, #2555]	; 0x9fb
 8003984:	e031      	b.n	80039ea <StartDefaultTask+0x152a>
				  }else{
					  if(operation_state == SCARA_MOVE_DOWN_ON_OBJECT || operation_state == SCARA_MOVE_DOWN_ON_SLOT || operation_state == SCARA_MOVE_UP_ON_OBJECT || operation_state == SCARA_MOVE_UP_ON_SLOT){
 8003986:	f897 3a0f 	ldrb.w	r3, [r7, #2575]	; 0xa0f
 800398a:	2b01      	cmp	r3, #1
 800398c:	d00b      	beq.n	80039a6 <StartDefaultTask+0x14e6>
 800398e:	f897 3a0f 	ldrb.w	r3, [r7, #2575]	; 0xa0f
 8003992:	2b05      	cmp	r3, #5
 8003994:	d007      	beq.n	80039a6 <StartDefaultTask+0x14e6>
 8003996:	f897 3a0f 	ldrb.w	r3, [r7, #2575]	; 0xa0f
 800399a:	2b03      	cmp	r3, #3
 800399c:	d003      	beq.n	80039a6 <StartDefaultTask+0x14e6>
 800399e:	f897 3a0f 	ldrb.w	r3, [r7, #2575]	; 0xa0f
 80039a2:	2b07      	cmp	r3, #7
 80039a4:	d108      	bne.n	80039b8 <StartDefaultTask+0x14f8>
						  duty_cmd.trajec_type = DUTY_TRAJECTORY_LINEAR;
 80039a6:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 80039aa:	2202      	movs	r2, #2
 80039ac:	741a      	strb	r2, [r3, #16]
						  duty_cmd.modeInit_type = DUTY_MODE_INIT_QT;
 80039ae:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 80039b2:	2203      	movs	r2, #3
 80039b4:	745a      	strb	r2, [r3, #17]
 80039b6:	e007      	b.n	80039c8 <StartDefaultTask+0x1508>
					  }else{
						  duty_cmd.trajec_type = DUTY_TRAJECTORY_LSPB;
 80039b8:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 80039bc:	2200      	movs	r2, #0
 80039be:	741a      	strb	r2, [r3, #16]
						  duty_cmd.modeInit_type = DUTY_MODE_INIT_QVT;
 80039c0:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 80039c4:	2201      	movs	r2, #1
 80039c6:	745a      	strb	r2, [r3, #17]
					  }
					  status1 = scaraInitDuty(duty_cmd);
 80039c8:	f507 64ff 	add.w	r4, r7, #2040	; 0x7f8
 80039cc:	4668      	mov	r0, sp
 80039ce:	f104 0310 	add.w	r3, r4, #16
 80039d2:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 80039d6:	4619      	mov	r1, r3
 80039d8:	f011 f9f0 	bl	8014dbc <memcpy>
 80039dc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80039e0:	f002 f8ee 	bl	8005bc0 <scaraInitDuty>
 80039e4:	4603      	mov	r3, r0
 80039e6:	f887 39fb 	strb.w	r3, [r7, #2555]	; 0x9fb
				  }
				  if ( SCARA_STATUS_OK == status1) {
 80039ea:	f897 39fb 	ldrb.w	r3, [r7, #2555]	; 0x9fb
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10b      	bne.n	8003a0a <StartDefaultTask+0x154a>
				  	current_duty_state = SCARA_DUTY_STATE_FLOW;
 80039f2:	2302      	movs	r3, #2
 80039f4:	f887 3a25 	strb.w	r3, [r7, #2597]	; 0xa25
				  	run_time = 0;
 80039f8:	f04f 0300 	mov.w	r3, #0
 80039fc:	f04f 0400 	mov.w	r4, #0
 8003a00:	f507 6221 	add.w	r2, r7, #2576	; 0xa10
 8003a04:	e9c2 3400 	strd	r3, r4, [r2]
 8003a08:	e031      	b.n	8003a6e <StartDefaultTask+0x15ae>
				  } else {
					object_tail_pointer = (object_tail_pointer+1)%8;
 8003a0a:	f897 3a0e 	ldrb.w	r3, [r7, #2574]	; 0xa0e
 8003a0e:	3301      	adds	r3, #1
 8003a10:	425a      	negs	r2, r3
 8003a12:	f003 0307 	and.w	r3, r3, #7
 8003a16:	f002 0207 	and.w	r2, r2, #7
 8003a1a:	bf58      	it	pl
 8003a1c:	4253      	negpl	r3, r2
 8003a1e:	f887 3a0e 	strb.w	r3, [r7, #2574]	; 0xa0e
					operation_state = SCARA_MOVE_TO_TARGET;
 8003a22:	2300      	movs	r3, #0
 8003a24:	f887 3a0f 	strb.w	r3, [r7, #2575]	; 0xa0f
					detail_array[0] = status1;
 8003a28:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8003a2c:	f897 29fb 	ldrb.w	r2, [r7, #2555]	; 0x9fb
 8003a30:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003a32:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8003a36:	6899      	ldr	r1, [r3, #8]
 8003a38:	f207 72cc 	addw	r2, r7, #1996	; 0x7cc
 8003a3c:	f8d7 3a28 	ldr.w	r3, [r7, #2600]	; 0xa28
 8003a40:	4413      	add	r3, r2
 8003a42:	f507 62e5 	add.w	r2, r7, #1832	; 0x728
 8003a46:	9300      	str	r3, [sp, #0]
 8003a48:	2301      	movs	r3, #1
 8003a4a:	2007      	movs	r0, #7
 8003a4c:	f7fe fb8a 	bl	8002164 <commandRespond1>
 8003a50:	f8c7 09f4 	str.w	r0, [r7, #2548]	; 0x9f4
					total_respond_length += respond_lenght;
 8003a54:	f8d7 2a28 	ldr.w	r2, [r7, #2600]	; 0xa28
 8003a58:	f8d7 39f4 	ldr.w	r3, [r7, #2548]	; 0x9f4
 8003a5c:	4413      	add	r3, r2
 8003a5e:	f8c7 3a28 	str.w	r3, [r7, #2600]	; 0xa28
					LOG_REPORT("INIT FAIL", __LINE__);
 8003a62:	f240 3179 	movw	r1, #889	; 0x379
 8003a66:	4856      	ldr	r0, [pc, #344]	; (8003bc0 <StartDefaultTask+0x1700>)
 8003a68:	f7fe fbe4 	bl	8002234 <LOG_REPORT>
					break;
 8003a6c:	e094      	b.n	8003b98 <StartDefaultTask+0x16d8>


		  case SCARA_DUTY_STATE_FLOW:{
			  SCARA_StatusTypeDef status;
			  // Increase run time
			  run_time += T_SAMPLING;
 8003a6e:	a34c      	add	r3, pc, #304	; (adr r3, 8003ba0 <StartDefaultTask+0x16e0>)
 8003a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a74:	f507 6121 	add.w	r1, r7, #2576	; 0xa10
 8003a78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003a7c:	f7fc fc06 	bl	800028c <__adddf3>
 8003a80:	4603      	mov	r3, r0
 8003a82:	460c      	mov	r4, r1
 8003a84:	f507 6221 	add.w	r2, r7, #2576	; 0xa10
 8003a88:	e9c2 3400 	strd	r3, r4, [r2]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 8003a8c:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8003a90:	ed93 0b00 	vldr	d0, [r3]
 8003a94:	f005 fe8a 	bl	80097ac <scaraIsFinish>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d022      	beq.n	8003ae4 <StartDefaultTask+0x1624>
				current_duty_state = SCARA_DUTY_STATE_OPERATION;
 8003a9e:	2304      	movs	r3, #4
 8003aa0:	f887 3a25 	strb.w	r3, [r7, #2597]	; 0xa25
				if(operation_state == SCARA_MOVE_UP_ON_SLOT){
 8003aa4:	f897 3a0f 	ldrb.w	r3, [r7, #2575]	; 0xa0f
 8003aa8:	2b07      	cmp	r3, #7
 8003aaa:	d10f      	bne.n	8003acc <StartDefaultTask+0x160c>
					operation_state = SCARA_MOVE_TO_TARGET;
 8003aac:	2300      	movs	r3, #0
 8003aae:	f887 3a0f 	strb.w	r3, [r7, #2575]	; 0xa0f
					object_tail_pointer = (object_tail_pointer+1)%8;
 8003ab2:	f897 3a0e 	ldrb.w	r3, [r7, #2574]	; 0xa0e
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	425a      	negs	r2, r3
 8003aba:	f003 0307 	and.w	r3, r3, #7
 8003abe:	f002 0207 	and.w	r2, r2, #7
 8003ac2:	bf58      	it	pl
 8003ac4:	4253      	negpl	r3, r2
 8003ac6:	f887 3a0e 	strb.w	r3, [r7, #2574]	; 0xa0e
 8003aca:	e004      	b.n	8003ad6 <StartDefaultTask+0x1616>
				}else{
					operation_state += 1; //next state
 8003acc:	f897 3a0f 	ldrb.w	r3, [r7, #2575]	; 0xa0f
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	f887 3a0f 	strb.w	r3, [r7, #2575]	; 0xa0f
				}
				lowlayer_readTruePosition(&positionNext);
 8003ad6:	483b      	ldr	r0, [pc, #236]	; (8003bc4 <StartDefaultTask+0x1704>)
 8003ad8:	f001 fb4e 	bl	8005178 <lowlayer_readTruePosition>
				kinematicForward(&positionNext);
 8003adc:	4839      	ldr	r0, [pc, #228]	; (8003bc4 <StartDefaultTask+0x1704>)
 8003ade:	f000 fc07 	bl	80042f0 <kinematicForward>
					  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
					  total_respond_length += respond_lenght;
				  }
			  }
		  }
		  break;
 8003ae2:	e058      	b.n	8003b96 <StartDefaultTask+0x16d6>
			  } else if(operation_state != SCARA_ATTACH && operation_state != SCARA_RELEASE){
 8003ae4:	f897 3a0f 	ldrb.w	r3, [r7, #2575]	; 0xa0f
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d054      	beq.n	8003b96 <StartDefaultTask+0x16d6>
 8003aec:	f897 3a0f 	ldrb.w	r3, [r7, #2575]	; 0xa0f
 8003af0:	2b06      	cmp	r3, #6
 8003af2:	d050      	beq.n	8003b96 <StartDefaultTask+0x16d6>
				status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 8003af4:	4c34      	ldr	r4, [pc, #208]	; (8003bc8 <StartDefaultTask+0x1708>)
 8003af6:	4668      	mov	r0, sp
 8003af8:	f104 0308 	add.w	r3, r4, #8
 8003afc:	22b8      	movs	r2, #184	; 0xb8
 8003afe:	4619      	mov	r1, r3
 8003b00:	f011 f95c 	bl	8014dbc <memcpy>
 8003b04:	e894 000c 	ldmia.w	r4, {r2, r3}
 8003b08:	482e      	ldr	r0, [pc, #184]	; (8003bc4 <StartDefaultTask+0x1704>)
 8003b0a:	f507 6121 	add.w	r1, r7, #2576	; 0xa10
 8003b0e:	ed91 0b00 	vldr	d0, [r1]
 8003b12:	f005 f805 	bl	8008b20 <scaraFlowDuty>
 8003b16:	4603      	mov	r3, r0
 8003b18:	f887 39cf 	strb.w	r3, [r7, #2511]	; 0x9cf
				if ( SCARA_STATUS_OK == status) {
 8003b1c:	f897 39cf 	ldrb.w	r3, [r7, #2511]	; 0x9cf
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d113      	bne.n	8003b4c <StartDefaultTask+0x168c>
					lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 8003b24:	4c28      	ldr	r4, [pc, #160]	; (8003bc8 <StartDefaultTask+0x1708>)
 8003b26:	4a27      	ldr	r2, [pc, #156]	; (8003bc4 <StartDefaultTask+0x1704>)
 8003b28:	ab2c      	add	r3, sp, #176	; 0xb0
 8003b2a:	4611      	mov	r1, r2
 8003b2c:	22c0      	movs	r2, #192	; 0xc0
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f011 f944 	bl	8014dbc <memcpy>
 8003b34:	4668      	mov	r0, sp
 8003b36:	f104 0310 	add.w	r3, r4, #16
 8003b3a:	22b0      	movs	r2, #176	; 0xb0
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	f011 f93d 	bl	8014dbc <memcpy>
 8003b42:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003b46:	f001 fca7 	bl	8005498 <lowlayer_computeAndWritePulse>
		  break;
 8003b4a:	e024      	b.n	8003b96 <StartDefaultTask+0x16d6>
					  current_duty_state = SCARA_DUTY_STATE_FINISH;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	f887 3a25 	strb.w	r3, [r7, #2597]	; 0xa25
					  detail_array[0] = status;
 8003b52:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8003b56:	f897 29cf 	ldrb.w	r2, [r7, #2511]	; 0x9cf
 8003b5a:	701a      	strb	r2, [r3, #0]
					  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003b5c:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8003b60:	6899      	ldr	r1, [r3, #8]
 8003b62:	f207 72cc 	addw	r2, r7, #1996	; 0x7cc
 8003b66:	f8d7 3a28 	ldr.w	r3, [r7, #2600]	; 0xa28
 8003b6a:	4413      	add	r3, r2
 8003b6c:	f507 62e5 	add.w	r2, r7, #1832	; 0x728
 8003b70:	9300      	str	r3, [sp, #0]
 8003b72:	2301      	movs	r3, #1
 8003b74:	2007      	movs	r0, #7
 8003b76:	f7fe faf5 	bl	8002164 <commandRespond1>
 8003b7a:	f8c7 09f4 	str.w	r0, [r7, #2548]	; 0x9f4
					  total_respond_length += respond_lenght;
 8003b7e:	f8d7 2a28 	ldr.w	r2, [r7, #2600]	; 0xa28
 8003b82:	f8d7 39f4 	ldr.w	r3, [r7, #2548]	; 0x9f4
 8003b86:	4413      	add	r3, r2
 8003b88:	f8c7 3a28 	str.w	r3, [r7, #2600]	; 0xa28
		  break;
 8003b8c:	e003      	b.n	8003b96 <StartDefaultTask+0x16d6>

		  case SCARA_DUTY_STATE_FINISH:

			  //error
			  //free(Object);
		  break;
 8003b8e:	bf00      	nop
 8003b90:	e01c      	b.n	8003bcc <StartDefaultTask+0x170c>
				  break;
 8003b92:	bf00      	nop
 8003b94:	e01a      	b.n	8003bcc <StartDefaultTask+0x170c>
		  break;
 8003b96:	bf00      	nop
		  }
	  }
	  break;
 8003b98:	e018      	b.n	8003bcc <StartDefaultTask+0x170c>
	  break;
 8003b9a:	bf00      	nop
 8003b9c:	e017      	b.n	8003bce <StartDefaultTask+0x170e>
 8003b9e:	bf00      	nop
 8003ba0:	40000000 	.word	0x40000000
 8003ba4:	3f847ae1 	.word	0x3f847ae1
 8003ba8:	20000040 	.word	0x20000040
 8003bac:	20000028 	.word	0x20000028
 8003bb0:	20000050 	.word	0x20000050
 8003bb4:	20000008 	.word	0x20000008
 8003bb8:	20000038 	.word	0x20000038
 8003bbc:	20000020 	.word	0x20000020
 8003bc0:	0801a3bc 	.word	0x0801a3bc
 8003bc4:	2000d2c0 	.word	0x2000d2c0
 8003bc8:	2000d140 	.word	0x2000d140
	  break;
 8003bcc:	bf00      	nop
	//   // Send through USB
	//   if (usb_lenght > 0) {
	// 	  CDC_Transmit_FS(usb_buff, (uint16_t)usb_lenght);
	//   }

	if(total_respond_length > 0){
 8003bce:	f8d7 3a28 	ldr.w	r3, [r7, #2600]	; 0xa28
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	dd08      	ble.n	8003be8 <StartDefaultTask+0x1728>
		CDC_Transmit_FS(respond, total_respond_length);
 8003bd6:	f8d7 3a28 	ldr.w	r3, [r7, #2600]	; 0xa28
 8003bda:	b29a      	uxth	r2, r3
 8003bdc:	f207 73cc 	addw	r3, r7, #1996	; 0x7cc
 8003be0:	4611      	mov	r1, r2
 8003be2:	4618      	mov	r0, r3
 8003be4:	f010 fc6e 	bl	80144c4 <CDC_Transmit_FS>
	}

	  /* 5--- Update ---*/
	  scaraSetMethod(current_method);
 8003be8:	f897 3a27 	ldrb.w	r3, [r7, #2599]	; 0xa27
 8003bec:	4618      	mov	r0, r3
 8003bee:	f005 fd7d 	bl	80096ec <scaraSetMethod>
	  scaraSetMode(current_mode);
 8003bf2:	f897 3a26 	ldrb.w	r3, [r7, #2598]	; 0xa26
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f005 fd68 	bl	80096cc <scaraSetMode>
	  scaraSetDutyState(current_duty_state);
 8003bfc:	f897 3a25 	ldrb.w	r3, [r7, #2597]	; 0xa25
 8003c00:	4618      	mov	r0, r3
 8003c02:	f005 fd53 	bl	80096ac <scaraSetDutyState>

    osDelay(1);
 8003c06:	2001      	movs	r0, #1
 8003c08:	f00d fd76 	bl	80116f8 <osDelay>
	  osSignalWait(0x01, osWaitForever); // Very Important
 8003c0c:	f7fe bcc0 	b.w	8002590 <StartDefaultTask+0xd0>

08003c10 <Start_USB_RX_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_USB_RX_Task */
void Start_USB_RX_Task(void const * argument)
{
 8003c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c12:	f2ad 5dd4 	subw	sp, sp, #1492	; 0x5d4
 8003c16:	af70      	add	r7, sp, #448	; 0x1c0
 8003c18:	1d3b      	adds	r3, r7, #4
 8003c1a:	6018      	str	r0, [r3, #0]
	int32_t				respond_lenght;
	//int32_t				message_lenght;
	int32_t 			detail_length;

	// Default value
	duty_cmd.key_speed = 1;
 8003c1c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8003c20:	2201      	movs	r2, #1
 8003c22:	605a      	str	r2, [r3, #4]

  /* Infinite loop */
  for(;;)
  {
	  for(;;) {
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, RECEIVE_END);
 8003c24:	4964      	ldr	r1, [pc, #400]	; (8003db8 <Start_USB_RX_Task+0x1a8>)
 8003c26:	4865      	ldr	r0, [pc, #404]	; (8003dbc <Start_USB_RX_Task+0x1ac>)
 8003c28:	f001 f80b 	bl	8004c42 <ringBuff_DistanceOf>
 8003c2c:	f8c7 0408 	str.w	r0, [r7, #1032]	; 0x408
		  if (distance != -1) {
 8003c30:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8003c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c38:	d0f4      	beq.n	8003c24 <Start_USB_RX_Task+0x14>
 8003c3a:	466b      	mov	r3, sp
 8003c3c:	461e      	mov	r6, r3
			  uint8_t temp[distance+1];
 8003c3e:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8003c42:	1c58      	adds	r0, r3, #1
 8003c44:	1e43      	subs	r3, r0, #1
 8003c46:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	f04f 0200 	mov.w	r2, #0
 8003c52:	f04f 0300 	mov.w	r3, #0
 8003c56:	f04f 0400 	mov.w	r4, #0
 8003c5a:	00d4      	lsls	r4, r2, #3
 8003c5c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8003c60:	00cb      	lsls	r3, r1, #3
 8003c62:	4603      	mov	r3, r0
 8003c64:	4619      	mov	r1, r3
 8003c66:	f04f 0200 	mov.w	r2, #0
 8003c6a:	f04f 0300 	mov.w	r3, #0
 8003c6e:	f04f 0400 	mov.w	r4, #0
 8003c72:	00d4      	lsls	r4, r2, #3
 8003c74:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8003c78:	00cb      	lsls	r3, r1, #3
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	3307      	adds	r3, #7
 8003c7e:	08db      	lsrs	r3, r3, #3
 8003c80:	00db      	lsls	r3, r3, #3
 8003c82:	ebad 0d03 	sub.w	sp, sp, r3
 8003c86:	ab70      	add	r3, sp, #448	; 0x1c0
 8003c88:	3300      	adds	r3, #0
 8003c8a:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
			  int32_t ret;
			  ringBuff_PopArray(&usb_rx_ringbuff, temp, distance + 1);
 8003c8e:	f8d7 1400 	ldr.w	r1, [r7, #1024]	; 0x400
 8003c92:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8003c96:	3301      	adds	r3, #1
 8003c98:	461a      	mov	r2, r3
 8003c9a:	4848      	ldr	r0, [pc, #288]	; (8003dbc <Start_USB_RX_Task+0x1ac>)
 8003c9c:	f000 ffb0 	bl	8004c00 <ringBuff_PopArray>
			  ret = unPackPayload(temp, distance + 1, data_packet);
 8003ca0:	f8d7 0400 	ldr.w	r0, [r7, #1024]	; 0x400
 8003ca4:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8003ca8:	3301      	adds	r3, #1
 8003caa:	f107 020c 	add.w	r2, r7, #12
 8003cae:	4619      	mov	r1, r3
 8003cb0:	f7fe fb06 	bl	80022c0 <unPackPayload>
 8003cb4:	f8c7 03fc 	str.w	r0, [r7, #1020]	; 0x3fc

			  if( -1 == ret) {
 8003cb8:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8003cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc0:	d077      	beq.n	8003db2 <Start_USB_RX_Task+0x1a2>
				  //LOG_REPORT("UNPACK FAIL", __LINE__);
			  } else {
				  //LOG_REPORT((char*) temp, __LINE__);
				  cmd_type = packetRead(data_packet, ret, &id_command, &duty_cmd);
 8003cc2:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8003cc6:	f507 727b 	add.w	r2, r7, #1004	; 0x3ec
 8003cca:	f107 000c 	add.w	r0, r7, #12
 8003cce:	f8d7 13fc 	ldr.w	r1, [r7, #1020]	; 0x3fc
 8003cd2:	f7fd f959 	bl	8000f88 <packetRead>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	f887 33fb 	strb.w	r3, [r7, #1019]	; 0x3fb
				  memset(detail, 0, sizeof(detail));
 8003cdc:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003ce0:	2287      	movs	r2, #135	; 0x87
 8003ce2:	2100      	movs	r1, #0
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f011 f88d 	bl	8014e04 <memset>
				  detail_length = 0;
 8003cea:	f107 0308 	add.w	r3, r7, #8
 8003cee:	2200      	movs	r2, #0
 8003cf0:	601a      	str	r2, [r3, #0]
				  rpd_type = commandReply(cmd_type, duty_cmd, detail, &detail_length);
 8003cf2:	f507 740a 	add.w	r4, r7, #552	; 0x228
 8003cf6:	f897 53fb 	ldrb.w	r5, [r7, #1019]	; 0x3fb
 8003cfa:	f107 0308 	add.w	r3, r7, #8
 8003cfe:	936f      	str	r3, [sp, #444]	; 0x1bc
 8003d00:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003d04:	936e      	str	r3, [sp, #440]	; 0x1b8
 8003d06:	4668      	mov	r0, sp
 8003d08:	f104 0308 	add.w	r3, r4, #8
 8003d0c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8003d10:	4619      	mov	r1, r3
 8003d12:	f011 f853 	bl	8014dbc <memcpy>
 8003d16:	e894 000c 	ldmia.w	r4, {r2, r3}
 8003d1a:	4628      	mov	r0, r5
 8003d1c:	f7fe f896 	bl	8001e4c <commandReply>
 8003d20:	4603      	mov	r3, r0
 8003d22:	f887 33fa 	strb.w	r3, [r7, #1018]	; 0x3fa
				  //LOG_REPORT("tail", usb_rx_ringbuff.tail);
				  if ( RPD_DUTY == rpd_type) {
 8003d26:	f897 33fa 	ldrb.w	r3, [r7, #1018]	; 0x3fa
 8003d2a:	2b09      	cmp	r3, #9
 8003d2c:	d123      	bne.n	8003d76 <Start_USB_RX_Task+0x166>
					  DUTY_Command_TypeDef *dataMail;
					  dataMail = NULL;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
					  // Wait allocate
					  while (dataMail == NULL) {
 8003d34:	e008      	b.n	8003d48 <Start_USB_RX_Task+0x138>
						  dataMail = osMailAlloc(commandMailHandle, osWaitForever);
 8003d36:	4b22      	ldr	r3, [pc, #136]	; (8003dc0 <Start_USB_RX_Task+0x1b0>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f04f 31ff 	mov.w	r1, #4294967295
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f00d feea 	bl	8011b18 <osMailAlloc>
 8003d44:	f8c7 040c 	str.w	r0, [r7, #1036]	; 0x40c
					  while (dataMail == NULL) {
 8003d48:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d0f2      	beq.n	8003d36 <Start_USB_RX_Task+0x126>
					  }
					  memcpy( dataMail, &duty_cmd, sizeof(DUTY_Command_TypeDef));
 8003d50:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8003d54:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8003d58:	4619      	mov	r1, r3
 8003d5a:	f8d7 040c 	ldr.w	r0, [r7, #1036]	; 0x40c
 8003d5e:	f011 f82d 	bl	8014dbc <memcpy>
					  osStatus result;
					  result = osMailPut(commandMailHandle, dataMail);
 8003d62:	4b17      	ldr	r3, [pc, #92]	; (8003dc0 <Start_USB_RX_Task+0x1b0>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f8d7 140c 	ldr.w	r1, [r7, #1036]	; 0x40c
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f00d feea 	bl	8011b44 <osMailPut>
 8003d70:	f8c7 03f0 	str.w	r0, [r7, #1008]	; 0x3f0
 8003d74:	e01d      	b.n	8003db2 <Start_USB_RX_Task+0x1a2>
						  //LOG_REPORT("DUTY SEND", __LINE__);
					  }

				//   }else if( RPD_POSITION == rpd_type) { 
				// 	  CDC_Transmit_FS(detail, 84);
				  }else if(rpd_type == RPD_TRANSFER){
 8003d76:	f897 33fa 	ldrb.w	r3, [r7, #1018]	; 0x3fa
 8003d7a:	2b0a      	cmp	r3, #10
 8003d7c:	d019      	beq.n	8003db2 <Start_USB_RX_Task+0x1a2>

				  }else {
					//   memset(respond, 0, sizeof(respond));
					//   memset(message, 0, sizeof(message));
					  respond_lenght	= commandRespond1(rpd_type, cmd_type,
 8003d7e:	f897 13fb 	ldrb.w	r1, [r7, #1019]	; 0x3fb
 8003d82:	f107 0308 	add.w	r3, r7, #8
 8003d86:	681c      	ldr	r4, [r3, #0]
 8003d88:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8003d8c:	f897 03fa 	ldrb.w	r0, [r7, #1018]	; 0x3fa
 8003d90:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8003d94:	9300      	str	r3, [sp, #0]
 8003d96:	4623      	mov	r3, r4
 8003d98:	f7fe f9e4 	bl	8002164 <commandRespond1>
 8003d9c:	f8c7 03f4 	str.w	r0, [r7, #1012]	; 0x3f4
							  	  	  	  (char *)detail, detail_length,
										  (char *)respond);
					  //message_lenght	= packPayload(respond, message, respond_lenght);
					  CDC_Transmit_FS(respond, respond_lenght);
 8003da0:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8003daa:	4611      	mov	r1, r2
 8003dac:	4618      	mov	r0, r3
 8003dae:	f010 fb89 	bl	80144c4 <CDC_Transmit_FS>
 8003db2:	46b5      	mov	sp, r6
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, RECEIVE_END);
 8003db4:	e736      	b.n	8003c24 <Start_USB_RX_Task+0x14>
 8003db6:	bf00      	nop
 8003db8:	0801a478 	.word	0x0801a478
 8003dbc:	20000064 	.word	0x20000064
 8003dc0:	2000c4bc 	.word	0x2000c4bc

08003dc4 <FSMC_Write>:
/* Includes ------------------------------------------------------------------*/
#include "fsmc.h"

/* USER CODE BEGIN 0 */
void FSMC_Write(uint32_t ui_address, uint32_t ui_data)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
	*(volatile uint16_t *)ui_address = ui_data;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	683a      	ldr	r2, [r7, #0]
 8003dd2:	b292      	uxth	r2, r2
 8003dd4:	801a      	strh	r2, [r3, #0]
}
 8003dd6:	bf00      	nop
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr

08003de2 <FSMC_Read>:

uint16_t FSMC_Read(uint32_t ui_address) {
 8003de2:	b480      	push	{r7}
 8003de4:	b083      	sub	sp, #12
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
	return *(volatile uint16_t *)ui_address;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	881b      	ldrh	r3, [r3, #0]
 8003dee:	b29b      	uxth	r3, r3
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <MX_FSMC_Init>:

NOR_HandleTypeDef hnor1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b088      	sub	sp, #32
 8003e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8003e02:	1d3b      	adds	r3, r7, #4
 8003e04:	2200      	movs	r2, #0
 8003e06:	601a      	str	r2, [r3, #0]
 8003e08:	605a      	str	r2, [r3, #4]
 8003e0a:	609a      	str	r2, [r3, #8]
 8003e0c:	60da      	str	r2, [r3, #12]
 8003e0e:	611a      	str	r2, [r3, #16]
 8003e10:	615a      	str	r2, [r3, #20]
 8003e12:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the NOR1 memory initialization sequence
  */
  hnor1.Instance = FSMC_NORSRAM_DEVICE;
 8003e14:	4b27      	ldr	r3, [pc, #156]	; (8003eb4 <MX_FSMC_Init+0xb8>)
 8003e16:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8003e1a:	601a      	str	r2, [r3, #0]
  hnor1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8003e1c:	4b25      	ldr	r3, [pc, #148]	; (8003eb4 <MX_FSMC_Init+0xb8>)
 8003e1e:	4a26      	ldr	r2, [pc, #152]	; (8003eb8 <MX_FSMC_Init+0xbc>)
 8003e20:	605a      	str	r2, [r3, #4]
  /* hnor1.Init */
  hnor1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8003e22:	4b24      	ldr	r3, [pc, #144]	; (8003eb4 <MX_FSMC_Init+0xb8>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	609a      	str	r2, [r3, #8]
  hnor1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_ENABLE;
 8003e28:	4b22      	ldr	r3, [pc, #136]	; (8003eb4 <MX_FSMC_Init+0xb8>)
 8003e2a:	2202      	movs	r2, #2
 8003e2c:	60da      	str	r2, [r3, #12]
  hnor1.Init.MemoryType = FSMC_MEMORY_TYPE_NOR;
 8003e2e:	4b21      	ldr	r3, [pc, #132]	; (8003eb4 <MX_FSMC_Init+0xb8>)
 8003e30:	2208      	movs	r2, #8
 8003e32:	611a      	str	r2, [r3, #16]
  hnor1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8003e34:	4b1f      	ldr	r3, [pc, #124]	; (8003eb4 <MX_FSMC_Init+0xb8>)
 8003e36:	2210      	movs	r2, #16
 8003e38:	615a      	str	r2, [r3, #20]
  hnor1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8003e3a:	4b1e      	ldr	r3, [pc, #120]	; (8003eb4 <MX_FSMC_Init+0xb8>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	619a      	str	r2, [r3, #24]
  hnor1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8003e40:	4b1c      	ldr	r3, [pc, #112]	; (8003eb4 <MX_FSMC_Init+0xb8>)
 8003e42:	2200      	movs	r2, #0
 8003e44:	61da      	str	r2, [r3, #28]
  hnor1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8003e46:	4b1b      	ldr	r3, [pc, #108]	; (8003eb4 <MX_FSMC_Init+0xb8>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	621a      	str	r2, [r3, #32]
  hnor1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8003e4c:	4b19      	ldr	r3, [pc, #100]	; (8003eb4 <MX_FSMC_Init+0xb8>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	625a      	str	r2, [r3, #36]	; 0x24
  hnor1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8003e52:	4b18      	ldr	r3, [pc, #96]	; (8003eb4 <MX_FSMC_Init+0xb8>)
 8003e54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e58:	629a      	str	r2, [r3, #40]	; 0x28
  hnor1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8003e5a:	4b16      	ldr	r3, [pc, #88]	; (8003eb4 <MX_FSMC_Init+0xb8>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8003e60:	4b14      	ldr	r3, [pc, #80]	; (8003eb4 <MX_FSMC_Init+0xb8>)
 8003e62:	2200      	movs	r2, #0
 8003e64:	631a      	str	r2, [r3, #48]	; 0x30
  hnor1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8003e66:	4b13      	ldr	r3, [pc, #76]	; (8003eb4 <MX_FSMC_Init+0xb8>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	635a      	str	r2, [r3, #52]	; 0x34
  hnor1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8003e6c:	4b11      	ldr	r3, [pc, #68]	; (8003eb4 <MX_FSMC_Init+0xb8>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	639a      	str	r2, [r3, #56]	; 0x38
  hnor1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8003e72:	4b10      	ldr	r3, [pc, #64]	; (8003eb4 <MX_FSMC_Init+0xb8>)
 8003e74:	2200      	movs	r2, #0
 8003e76:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8003e78:	230f      	movs	r3, #15
 8003e7a:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8003e7c:	230f      	movs	r3, #15
 8003e7e:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8003e80:	23ff      	movs	r3, #255	; 0xff
 8003e82:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8003e84:	230f      	movs	r3, #15
 8003e86:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8003e88:	2310      	movs	r3, #16
 8003e8a:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8003e8c:	2311      	movs	r3, #17
 8003e8e:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8003e90:	2300      	movs	r3, #0
 8003e92:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_NOR_Init(&hnor1, &Timing, NULL) != HAL_OK)
 8003e94:	1d3b      	adds	r3, r7, #4
 8003e96:	2200      	movs	r2, #0
 8003e98:	4619      	mov	r1, r3
 8003e9a:	4806      	ldr	r0, [pc, #24]	; (8003eb4 <MX_FSMC_Init+0xb8>)
 8003e9c:	f007 fa10 	bl	800b2c0 <HAL_NOR_Init>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8003ea6:	f000 fdf1 	bl	8004a8c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8003eaa:	bf00      	nop
 8003eac:	3720      	adds	r7, #32
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	2000c4c8 	.word	0x2000c4c8
 8003eb8:	a0000104 	.word	0xa0000104

08003ebc <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b086      	sub	sp, #24
 8003ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ec2:	1d3b      	adds	r3, r7, #4
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	601a      	str	r2, [r3, #0]
 8003ec8:	605a      	str	r2, [r3, #4]
 8003eca:	609a      	str	r2, [r3, #8]
 8003ecc:	60da      	str	r2, [r3, #12]
 8003ece:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8003ed0:	4b24      	ldr	r3, [pc, #144]	; (8003f64 <HAL_FSMC_MspInit+0xa8>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d140      	bne.n	8003f5a <HAL_FSMC_MspInit+0x9e>
    return;
  }
  FSMC_Initialized = 1;
 8003ed8:	4b22      	ldr	r3, [pc, #136]	; (8003f64 <HAL_FSMC_MspInit+0xa8>)
 8003eda:	2201      	movs	r2, #1
 8003edc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8003ede:	2300      	movs	r3, #0
 8003ee0:	603b      	str	r3, [r7, #0]
 8003ee2:	4b21      	ldr	r3, [pc, #132]	; (8003f68 <HAL_FSMC_MspInit+0xac>)
 8003ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee6:	4a20      	ldr	r2, [pc, #128]	; (8003f68 <HAL_FSMC_MspInit+0xac>)
 8003ee8:	f043 0301 	orr.w	r3, r3, #1
 8003eec:	6393      	str	r3, [r2, #56]	; 0x38
 8003eee:	4b1e      	ldr	r3, [pc, #120]	; (8003f68 <HAL_FSMC_MspInit+0xac>)
 8003ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	603b      	str	r3, [r7, #0]
 8003ef8:	683b      	ldr	r3, [r7, #0]
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  PB7   ------> FSMC_NL
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8003efa:	f64f 7380 	movw	r3, #65408	; 0xff80
 8003efe:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f00:	2302      	movs	r3, #2
 8003f02:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f04:	2300      	movs	r3, #0
 8003f06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8003f0c:	230c      	movs	r3, #12
 8003f0e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003f10:	1d3b      	adds	r3, r7, #4
 8003f12:	4619      	mov	r1, r3
 8003f14:	4815      	ldr	r0, [pc, #84]	; (8003f6c <HAL_FSMC_MspInit+0xb0>)
 8003f16:	f007 f81f 	bl	800af58 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8003f1a:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8003f1e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f20:	2302      	movs	r3, #2
 8003f22:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f24:	2300      	movs	r3, #0
 8003f26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8003f2c:	230c      	movs	r3, #12
 8003f2e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f30:	1d3b      	adds	r3, r7, #4
 8003f32:	4619      	mov	r1, r3
 8003f34:	480e      	ldr	r0, [pc, #56]	; (8003f70 <HAL_FSMC_MspInit+0xb4>)
 8003f36:	f007 f80f 	bl	800af58 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003f3a:	2380      	movs	r3, #128	; 0x80
 8003f3c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f3e:	2302      	movs	r3, #2
 8003f40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f42:	2300      	movs	r3, #0
 8003f44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f46:	2303      	movs	r3, #3
 8003f48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8003f4a:	230c      	movs	r3, #12
 8003f4c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f4e:	1d3b      	adds	r3, r7, #4
 8003f50:	4619      	mov	r1, r3
 8003f52:	4808      	ldr	r0, [pc, #32]	; (8003f74 <HAL_FSMC_MspInit+0xb8>)
 8003f54:	f007 f800 	bl	800af58 <HAL_GPIO_Init>
 8003f58:	e000      	b.n	8003f5c <HAL_FSMC_MspInit+0xa0>
    return;
 8003f5a:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8003f5c:	3718      	adds	r7, #24
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	20002854 	.word	0x20002854
 8003f68:	40023800 	.word	0x40023800
 8003f6c:	40021000 	.word	0x40021000
 8003f70:	40020c00 	.word	0x40020c00
 8003f74:	40020400 	.word	0x40020400

08003f78 <HAL_NOR_MspInit>:

void HAL_NOR_MspInit(NOR_HandleTypeDef* norHandle){
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NOR_MspInit 0 */

  /* USER CODE END NOR_MspInit 0 */
  HAL_FSMC_MspInit();
 8003f80:	f7ff ff9c 	bl	8003ebc <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NOR_MspInit 1 */

  /* USER CODE END NOR_MspInit 1 */
}
 8003f84:	bf00      	nop
 8003f86:	3708      	adds	r7, #8
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	0000      	movs	r0, r0
	...

08003f90 <update_gcode_point>:
 */

#include "gcode_handler.h"

void update_gcode_point(DUTY_Command_TypeDef *duty_cmd, SCARA_Gcode_Cor_TypeDef gcode_point)
{
 8003f90:	b084      	sub	sp, #16
 8003f92:	b590      	push	{r4, r7, lr}
 8003f94:	b083      	sub	sp, #12
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
 8003f9a:	f107 001c 	add.w	r0, r7, #28
 8003f9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	duty_cmd->target_point.x = (double)gcode_point.X * COR_INVERSE_SCALE + offset_x;
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7fc fabd 	bl	8000524 <__aeabi_i2d>
 8003faa:	a36b      	add	r3, pc, #428	; (adr r3, 8004158 <update_gcode_point+0x1c8>)
 8003fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb0:	f7fc fb22 	bl	80005f8 <__aeabi_dmul>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	460c      	mov	r4, r1
 8003fb8:	4618      	mov	r0, r3
 8003fba:	4621      	mov	r1, r4
 8003fbc:	4b68      	ldr	r3, [pc, #416]	; (8004160 <update_gcode_point+0x1d0>)
 8003fbe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	4623      	mov	r3, r4
 8003fc6:	f7fc f961 	bl	800028c <__adddf3>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	460c      	mov	r4, r1
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
    duty_cmd->target_point.y = (double)gcode_point.Y * COR_INVERSE_SCALE + offset_y;
 8003fd4:	6a3b      	ldr	r3, [r7, #32]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7fc faa4 	bl	8000524 <__aeabi_i2d>
 8003fdc:	a35e      	add	r3, pc, #376	; (adr r3, 8004158 <update_gcode_point+0x1c8>)
 8003fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe2:	f7fc fb09 	bl	80005f8 <__aeabi_dmul>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	460c      	mov	r4, r1
 8003fea:	4618      	mov	r0, r3
 8003fec:	4621      	mov	r1, r4
 8003fee:	4b5d      	ldr	r3, [pc, #372]	; (8004164 <update_gcode_point+0x1d4>)
 8003ff0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	4623      	mov	r3, r4
 8003ff8:	f7fc f948 	bl	800028c <__adddf3>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	460c      	mov	r4, r1
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
    if(gcode_point.type_define[1] == UP_Z){
 8004006:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800400a:	2b04      	cmp	r3, #4
 800400c:	d10f      	bne.n	800402e <update_gcode_point+0x9e>
  	  duty_cmd->target_point.z = up_z_height + offset_z;
 800400e:	4b56      	ldr	r3, [pc, #344]	; (8004168 <update_gcode_point+0x1d8>)
 8004010:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004014:	4b55      	ldr	r3, [pc, #340]	; (800416c <update_gcode_point+0x1dc>)
 8004016:	e9d3 3400 	ldrd	r3, r4, [r3]
 800401a:	461a      	mov	r2, r3
 800401c:	4623      	mov	r3, r4
 800401e:	f7fc f935 	bl	800028c <__adddf3>
 8004022:	4603      	mov	r3, r0
 8004024:	460c      	mov	r4, r1
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
 800402c:	e00e      	b.n	800404c <update_gcode_point+0xbc>
    }else{
  	  duty_cmd->target_point.z = down_z_height + offset_z;
 800402e:	4b50      	ldr	r3, [pc, #320]	; (8004170 <update_gcode_point+0x1e0>)
 8004030:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004034:	4b4d      	ldr	r3, [pc, #308]	; (800416c <update_gcode_point+0x1dc>)
 8004036:	e9d3 3400 	ldrd	r3, r4, [r3]
 800403a:	461a      	mov	r2, r3
 800403c:	4623      	mov	r3, r4
 800403e:	f7fc f925 	bl	800028c <__adddf3>
 8004042:	4603      	mov	r3, r0
 8004044:	460c      	mov	r4, r1
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
    }
    duty_cmd->target_point.roll = roll_angle;
 800404c:	4b49      	ldr	r3, [pc, #292]	; (8004174 <update_gcode_point+0x1e4>)
 800404e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
    duty_cmd->v_factor = (double)gcode_point.F * COR_INVERSE_SCALE / V_MOVE_MAX;
 8004058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405a:	4618      	mov	r0, r3
 800405c:	f7fc fa62 	bl	8000524 <__aeabi_i2d>
 8004060:	a33d      	add	r3, pc, #244	; (adr r3, 8004158 <update_gcode_point+0x1c8>)
 8004062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004066:	f7fc fac7 	bl	80005f8 <__aeabi_dmul>
 800406a:	4603      	mov	r3, r0
 800406c:	460c      	mov	r4, r1
 800406e:	4618      	mov	r0, r3
 8004070:	4621      	mov	r1, r4
 8004072:	f04f 0200 	mov.w	r2, #0
 8004076:	4b40      	ldr	r3, [pc, #256]	; (8004178 <update_gcode_point+0x1e8>)
 8004078:	f7fc fbe8 	bl	800084c <__aeabi_ddiv>
 800407c:	4603      	mov	r3, r0
 800407e:	460c      	mov	r4, r1
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
    duty_cmd->trajec_type = DUTY_TRAJECTORY_LINEAR;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2202      	movs	r2, #2
 800408a:	741a      	strb	r2, [r3, #16]
    duty_cmd->coordinate_type = DUTY_COORDINATES_ABS;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	731a      	strb	r2, [r3, #12]
    duty_cmd->modeInit_type = DUTY_MODE_INIT_QV;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2202      	movs	r2, #2
 8004096:	745a      	strb	r2, [r3, #17]
    if(gcode_point.type_define[0] == LINEAR_TYPE){
 8004098:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800409c:	2b01      	cmp	r3, #1
 800409e:	d103      	bne.n	80040a8 <update_gcode_point+0x118>
  	  duty_cmd->path_type = DUTY_PATH_LINE;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	739a      	strb	r2, [r3, #14]
 80040a6:	e04d      	b.n	8004144 <update_gcode_point+0x1b4>
    }else if(gcode_point.type_define[0] == ARC_AW_TYPE){
 80040a8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80040ac:	2b03      	cmp	r3, #3
 80040ae:	d122      	bne.n	80040f6 <update_gcode_point+0x166>
      duty_cmd->sub_point.x = (double)gcode_point.I * COR_INVERSE_SCALE;
 80040b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b2:	4618      	mov	r0, r3
 80040b4:	f7fc fa36 	bl	8000524 <__aeabi_i2d>
 80040b8:	a327      	add	r3, pc, #156	; (adr r3, 8004158 <update_gcode_point+0x1c8>)
 80040ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040be:	f7fc fa9b 	bl	80005f8 <__aeabi_dmul>
 80040c2:	4603      	mov	r3, r0
 80040c4:	460c      	mov	r4, r1
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	e9c2 344c 	strd	r3, r4, [r2, #304]	; 0x130
      duty_cmd->sub_point.y = (double)gcode_point.J * COR_INVERSE_SCALE;
 80040cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7fc fa28 	bl	8000524 <__aeabi_i2d>
 80040d4:	a320      	add	r3, pc, #128	; (adr r3, 8004158 <update_gcode_point+0x1c8>)
 80040d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040da:	f7fc fa8d 	bl	80005f8 <__aeabi_dmul>
 80040de:	4603      	mov	r3, r0
 80040e0:	460c      	mov	r4, r1
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	e9c2 344e 	strd	r3, r4, [r2, #312]	; 0x138
      duty_cmd->path_type = DUTY_PATH_CIRCLE;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	739a      	strb	r2, [r3, #14]
      duty_cmd->arc_dir = 1;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2201      	movs	r2, #1
 80040f2:	615a      	str	r2, [r3, #20]
 80040f4:	e026      	b.n	8004144 <update_gcode_point+0x1b4>
    }else if(gcode_point.type_define[0] == ARC_CW_TYPE){
 80040f6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d122      	bne.n	8004144 <update_gcode_point+0x1b4>
      duty_cmd->sub_point.x = (double)gcode_point.I * COR_INVERSE_SCALE;
 80040fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004100:	4618      	mov	r0, r3
 8004102:	f7fc fa0f 	bl	8000524 <__aeabi_i2d>
 8004106:	a314      	add	r3, pc, #80	; (adr r3, 8004158 <update_gcode_point+0x1c8>)
 8004108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410c:	f7fc fa74 	bl	80005f8 <__aeabi_dmul>
 8004110:	4603      	mov	r3, r0
 8004112:	460c      	mov	r4, r1
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	e9c2 344c 	strd	r3, r4, [r2, #304]	; 0x130
      duty_cmd->sub_point.y = (double)gcode_point.J * COR_INVERSE_SCALE;
 800411a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800411c:	4618      	mov	r0, r3
 800411e:	f7fc fa01 	bl	8000524 <__aeabi_i2d>
 8004122:	a30d      	add	r3, pc, #52	; (adr r3, 8004158 <update_gcode_point+0x1c8>)
 8004124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004128:	f7fc fa66 	bl	80005f8 <__aeabi_dmul>
 800412c:	4603      	mov	r3, r0
 800412e:	460c      	mov	r4, r1
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	e9c2 344e 	strd	r3, r4, [r2, #312]	; 0x138
      duty_cmd->path_type = DUTY_PATH_CIRCLE;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2201      	movs	r2, #1
 800413a:	739a      	strb	r2, [r3, #14]
      duty_cmd->arc_dir = -1;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f04f 32ff 	mov.w	r2, #4294967295
 8004142:	615a      	str	r2, [r3, #20]
    }
    duty_cmd->space_type = DUTY_SPACE_TASK;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	735a      	strb	r2, [r3, #13]
}
 800414a:	bf00      	nop
 800414c:	370c      	adds	r7, #12
 800414e:	46bd      	mov	sp, r7
 8004150:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004154:	b004      	add	sp, #16
 8004156:	4770      	bx	lr
 8004158:	a0000000 	.word	0xa0000000
 800415c:	3eb0c6f7 	.word	0x3eb0c6f7
 8004160:	200065d0 	.word	0x200065d0
 8004164:	2000c3a8 	.word	0x2000c3a8
 8004168:	200065b8 	.word	0x200065b8
 800416c:	2000c3a0 	.word	0x2000c3a0
 8004170:	200065c0 	.word	0x200065c0
 8004174:	200065c8 	.word	0x200065c8
 8004178:	40877000 	.word	0x40877000

0800417c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b08a      	sub	sp, #40	; 0x28
 8004180:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004182:	f107 0314 	add.w	r3, r7, #20
 8004186:	2200      	movs	r2, #0
 8004188:	601a      	str	r2, [r3, #0]
 800418a:	605a      	str	r2, [r3, #4]
 800418c:	609a      	str	r2, [r3, #8]
 800418e:	60da      	str	r2, [r3, #12]
 8004190:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004192:	2300      	movs	r3, #0
 8004194:	613b      	str	r3, [r7, #16]
 8004196:	4b51      	ldr	r3, [pc, #324]	; (80042dc <MX_GPIO_Init+0x160>)
 8004198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419a:	4a50      	ldr	r2, [pc, #320]	; (80042dc <MX_GPIO_Init+0x160>)
 800419c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041a0:	6313      	str	r3, [r2, #48]	; 0x30
 80041a2:	4b4e      	ldr	r3, [pc, #312]	; (80042dc <MX_GPIO_Init+0x160>)
 80041a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041aa:	613b      	str	r3, [r7, #16]
 80041ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80041ae:	2300      	movs	r3, #0
 80041b0:	60fb      	str	r3, [r7, #12]
 80041b2:	4b4a      	ldr	r3, [pc, #296]	; (80042dc <MX_GPIO_Init+0x160>)
 80041b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b6:	4a49      	ldr	r2, [pc, #292]	; (80042dc <MX_GPIO_Init+0x160>)
 80041b8:	f043 0301 	orr.w	r3, r3, #1
 80041bc:	6313      	str	r3, [r2, #48]	; 0x30
 80041be:	4b47      	ldr	r3, [pc, #284]	; (80042dc <MX_GPIO_Init+0x160>)
 80041c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	60fb      	str	r3, [r7, #12]
 80041c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80041ca:	2300      	movs	r3, #0
 80041cc:	60bb      	str	r3, [r7, #8]
 80041ce:	4b43      	ldr	r3, [pc, #268]	; (80042dc <MX_GPIO_Init+0x160>)
 80041d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d2:	4a42      	ldr	r2, [pc, #264]	; (80042dc <MX_GPIO_Init+0x160>)
 80041d4:	f043 0310 	orr.w	r3, r3, #16
 80041d8:	6313      	str	r3, [r2, #48]	; 0x30
 80041da:	4b40      	ldr	r3, [pc, #256]	; (80042dc <MX_GPIO_Init+0x160>)
 80041dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041de:	f003 0310 	and.w	r3, r3, #16
 80041e2:	60bb      	str	r3, [r7, #8]
 80041e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80041e6:	2300      	movs	r3, #0
 80041e8:	607b      	str	r3, [r7, #4]
 80041ea:	4b3c      	ldr	r3, [pc, #240]	; (80042dc <MX_GPIO_Init+0x160>)
 80041ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ee:	4a3b      	ldr	r2, [pc, #236]	; (80042dc <MX_GPIO_Init+0x160>)
 80041f0:	f043 0302 	orr.w	r3, r3, #2
 80041f4:	6313      	str	r3, [r2, #48]	; 0x30
 80041f6:	4b39      	ldr	r3, [pc, #228]	; (80042dc <MX_GPIO_Init+0x160>)
 80041f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	607b      	str	r3, [r7, #4]
 8004200:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004202:	2300      	movs	r3, #0
 8004204:	603b      	str	r3, [r7, #0]
 8004206:	4b35      	ldr	r3, [pc, #212]	; (80042dc <MX_GPIO_Init+0x160>)
 8004208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420a:	4a34      	ldr	r2, [pc, #208]	; (80042dc <MX_GPIO_Init+0x160>)
 800420c:	f043 0308 	orr.w	r3, r3, #8
 8004210:	6313      	str	r3, [r2, #48]	; 0x30
 8004212:	4b32      	ldr	r3, [pc, #200]	; (80042dc <MX_GPIO_Init+0x160>)
 8004214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004216:	f003 0308 	and.w	r3, r3, #8
 800421a:	603b      	str	r3, [r7, #0]
 800421c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUTPUT_1_Pin|OUTPUT_2_Pin|USB_SIGN_Pin, GPIO_PIN_RESET);
 800421e:	2200      	movs	r2, #0
 8004220:	f44f 6141 	mov.w	r1, #3088	; 0xc10
 8004224:	482e      	ldr	r0, [pc, #184]	; (80042e0 <MX_GPIO_Init+0x164>)
 8004226:	f007 f831 	bl	800b28c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ENCODER_RESET_Pin|PULSE_WRITE_Pin|CAPTURE_ENABLE_Pin|STOP_Pin, GPIO_PIN_RESET);
 800422a:	2200      	movs	r2, #0
 800422c:	f641 0148 	movw	r1, #6216	; 0x1848
 8004230:	482c      	ldr	r0, [pc, #176]	; (80042e4 <MX_GPIO_Init+0x168>)
 8004232:	f007 f82b 	bl	800b28c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEP_SLEEP_Pin|STEP_RESET_Pin|STEP_ENABLE_Pin, GPIO_PIN_RESET);
 8004236:	2200      	movs	r2, #0
 8004238:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800423c:	482a      	ldr	r0, [pc, #168]	; (80042e8 <MX_GPIO_Init+0x16c>)
 800423e:	f007 f825 	bl	800b28c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OUTPUT_1_Pin|OUTPUT_2_Pin|USB_SIGN_Pin;
 8004242:	f44f 6341 	mov.w	r3, #3088	; 0xc10
 8004246:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004248:	2301      	movs	r3, #1
 800424a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800424c:	2300      	movs	r3, #0
 800424e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004250:	2300      	movs	r3, #0
 8004252:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004254:	f107 0314 	add.w	r3, r7, #20
 8004258:	4619      	mov	r1, r3
 800425a:	4821      	ldr	r0, [pc, #132]	; (80042e0 <MX_GPIO_Init+0x164>)
 800425c:	f006 fe7c 	bl	800af58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = ENCODER_RESET_Pin|CAPTURE_ENABLE_Pin|STOP_Pin;
 8004260:	f640 0348 	movw	r3, #2120	; 0x848
 8004264:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004266:	2301      	movs	r3, #1
 8004268:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800426a:	2300      	movs	r3, #0
 800426c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800426e:	2300      	movs	r3, #0
 8004270:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004272:	f107 0314 	add.w	r3, r7, #20
 8004276:	4619      	mov	r1, r3
 8004278:	481a      	ldr	r0, [pc, #104]	; (80042e4 <MX_GPIO_Init+0x168>)
 800427a:	f006 fe6d 	bl	800af58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PULSE_WRITE_Pin;
 800427e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004282:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004284:	2301      	movs	r3, #1
 8004286:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004288:	2300      	movs	r3, #0
 800428a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800428c:	2303      	movs	r3, #3
 800428e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PULSE_WRITE_GPIO_Port, &GPIO_InitStruct);
 8004290:	f107 0314 	add.w	r3, r7, #20
 8004294:	4619      	mov	r1, r3
 8004296:	4813      	ldr	r0, [pc, #76]	; (80042e4 <MX_GPIO_Init+0x168>)
 8004298:	f006 fe5e 	bl	800af58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = CPLD_LIMIT_Pin|CPLD_BUSY_Pin;
 800429c:	f242 0304 	movw	r3, #8196	; 0x2004
 80042a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80042a2:	2300      	movs	r3, #0
 80042a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80042a6:	2301      	movs	r3, #1
 80042a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80042aa:	f107 0314 	add.w	r3, r7, #20
 80042ae:	4619      	mov	r1, r3
 80042b0:	480c      	ldr	r0, [pc, #48]	; (80042e4 <MX_GPIO_Init+0x168>)
 80042b2:	f006 fe51 	bl	800af58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = STEP_SLEEP_Pin|STEP_RESET_Pin|STEP_ENABLE_Pin;
 80042b6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80042ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042bc:	2301      	movs	r3, #1
 80042be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042c0:	2300      	movs	r3, #0
 80042c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042c4:	2300      	movs	r3, #0
 80042c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042c8:	f107 0314 	add.w	r3, r7, #20
 80042cc:	4619      	mov	r1, r3
 80042ce:	4806      	ldr	r0, [pc, #24]	; (80042e8 <MX_GPIO_Init+0x16c>)
 80042d0:	f006 fe42 	bl	800af58 <HAL_GPIO_Init>

}
 80042d4:	bf00      	nop
 80042d6:	3728      	adds	r7, #40	; 0x28
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	40023800 	.word	0x40023800
 80042e0:	40020400 	.word	0x40020400
 80042e4:	40020c00 	.word	0x40020c00
 80042e8:	40020000 	.word	0x40020000
 80042ec:	00000000 	.word	0x00000000

080042f0 <kinematicForward>:
#include "kinematic.h"
#include "common_def.h"
#include "math.h"
#include "system_params.h"

uint8_t		kinematicForward(SCARA_PositionTypeDef *pnt) {
 80042f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042f2:	b08b      	sub	sp, #44	; 0x2c
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
	double x, y, z, roll;

	x =   a1*cos(pnt->Theta1)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80042fe:	eeb0 0a47 	vmov.f32	s0, s14
 8004302:	eef0 0a67 	vmov.f32	s1, s15
 8004306:	f014 fb47 	bl	8018998 <cos>
 800430a:	ec51 0b10 	vmov	r0, r1, d0
 800430e:	a38e      	add	r3, pc, #568	; (adr r3, 8004548 <kinematicForward+0x258>)
 8004310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004314:	f7fc f970 	bl	80005f8 <__aeabi_dmul>
 8004318:	4603      	mov	r3, r0
 800431a:	460c      	mov	r4, r1
 800431c:	461d      	mov	r5, r3
 800431e:	4626      	mov	r6, r4
		+ a2*cos(pnt->Theta1 + pnt->Theta2)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 800432c:	461a      	mov	r2, r3
 800432e:	4623      	mov	r3, r4
 8004330:	f7fb ffac 	bl	800028c <__adddf3>
 8004334:	4603      	mov	r3, r0
 8004336:	460c      	mov	r4, r1
 8004338:	ec44 3b17 	vmov	d7, r3, r4
 800433c:	eeb0 0a47 	vmov.f32	s0, s14
 8004340:	eef0 0a67 	vmov.f32	s1, s15
 8004344:	f014 fb28 	bl	8018998 <cos>
 8004348:	ec51 0b10 	vmov	r0, r1, d0
 800434c:	f04f 0200 	mov.w	r2, #0
 8004350:	4b83      	ldr	r3, [pc, #524]	; (8004560 <kinematicForward+0x270>)
 8004352:	f7fc f951 	bl	80005f8 <__aeabi_dmul>
 8004356:	4603      	mov	r3, r0
 8004358:	460c      	mov	r4, r1
 800435a:	461a      	mov	r2, r3
 800435c:	4623      	mov	r3, r4
 800435e:	4628      	mov	r0, r5
 8004360:	4631      	mov	r1, r6
 8004362:	f7fb ff93 	bl	800028c <__adddf3>
 8004366:	4603      	mov	r3, r0
 8004368:	460c      	mov	r4, r1
 800436a:	461d      	mov	r5, r3
 800436c:	4626      	mov	r6, r4
		+ a4*cos(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 800437a:	461a      	mov	r2, r3
 800437c:	4623      	mov	r3, r4
 800437e:	f7fb ff85 	bl	800028c <__adddf3>
 8004382:	4603      	mov	r3, r0
 8004384:	460c      	mov	r4, r1
 8004386:	4618      	mov	r0, r3
 8004388:	4621      	mov	r1, r4
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 8004390:	461a      	mov	r2, r3
 8004392:	4623      	mov	r3, r4
 8004394:	f7fb ff78 	bl	8000288 <__aeabi_dsub>
 8004398:	4603      	mov	r3, r0
 800439a:	460c      	mov	r4, r1
 800439c:	ec44 3b17 	vmov	d7, r3, r4
 80043a0:	eeb0 0a47 	vmov.f32	s0, s14
 80043a4:	eef0 0a67 	vmov.f32	s1, s15
 80043a8:	f014 faf6 	bl	8018998 <cos>
 80043ac:	ec51 0b10 	vmov	r0, r1, d0
 80043b0:	a363      	add	r3, pc, #396	; (adr r3, 8004540 <kinematicForward+0x250>)
 80043b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b6:	f7fc f91f 	bl	80005f8 <__aeabi_dmul>
 80043ba:	4603      	mov	r3, r0
 80043bc:	460c      	mov	r4, r1
	x =   a1*cos(pnt->Theta1)
 80043be:	461a      	mov	r2, r3
 80043c0:	4623      	mov	r3, r4
 80043c2:	4628      	mov	r0, r5
 80043c4:	4631      	mov	r1, r6
 80043c6:	f7fb ff61 	bl	800028c <__adddf3>
 80043ca:	4603      	mov	r3, r0
 80043cc:	460c      	mov	r4, r1
 80043ce:	e9c7 3408 	strd	r3, r4, [r7, #32]
	y =   a1*sin(pnt->Theta1)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80043d8:	eeb0 0a47 	vmov.f32	s0, s14
 80043dc:	eef0 0a67 	vmov.f32	s1, s15
 80043e0:	f014 fb6a 	bl	8018ab8 <sin>
 80043e4:	ec51 0b10 	vmov	r0, r1, d0
 80043e8:	a357      	add	r3, pc, #348	; (adr r3, 8004548 <kinematicForward+0x258>)
 80043ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ee:	f7fc f903 	bl	80005f8 <__aeabi_dmul>
 80043f2:	4603      	mov	r3, r0
 80043f4:	460c      	mov	r4, r1
 80043f6:	461d      	mov	r5, r3
 80043f8:	4626      	mov	r6, r4
		+ a2*sin(pnt->Theta1 + pnt->Theta2)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8004406:	461a      	mov	r2, r3
 8004408:	4623      	mov	r3, r4
 800440a:	f7fb ff3f 	bl	800028c <__adddf3>
 800440e:	4603      	mov	r3, r0
 8004410:	460c      	mov	r4, r1
 8004412:	ec44 3b17 	vmov	d7, r3, r4
 8004416:	eeb0 0a47 	vmov.f32	s0, s14
 800441a:	eef0 0a67 	vmov.f32	s1, s15
 800441e:	f014 fb4b 	bl	8018ab8 <sin>
 8004422:	ec51 0b10 	vmov	r0, r1, d0
 8004426:	f04f 0200 	mov.w	r2, #0
 800442a:	4b4d      	ldr	r3, [pc, #308]	; (8004560 <kinematicForward+0x270>)
 800442c:	f7fc f8e4 	bl	80005f8 <__aeabi_dmul>
 8004430:	4603      	mov	r3, r0
 8004432:	460c      	mov	r4, r1
 8004434:	461a      	mov	r2, r3
 8004436:	4623      	mov	r3, r4
 8004438:	4628      	mov	r0, r5
 800443a:	4631      	mov	r1, r6
 800443c:	f7fb ff26 	bl	800028c <__adddf3>
 8004440:	4603      	mov	r3, r0
 8004442:	460c      	mov	r4, r1
 8004444:	461d      	mov	r5, r3
 8004446:	4626      	mov	r6, r4
		+ a4*sin(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8004454:	461a      	mov	r2, r3
 8004456:	4623      	mov	r3, r4
 8004458:	f7fb ff18 	bl	800028c <__adddf3>
 800445c:	4603      	mov	r3, r0
 800445e:	460c      	mov	r4, r1
 8004460:	4618      	mov	r0, r3
 8004462:	4621      	mov	r1, r4
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 800446a:	461a      	mov	r2, r3
 800446c:	4623      	mov	r3, r4
 800446e:	f7fb ff0b 	bl	8000288 <__aeabi_dsub>
 8004472:	4603      	mov	r3, r0
 8004474:	460c      	mov	r4, r1
 8004476:	ec44 3b17 	vmov	d7, r3, r4
 800447a:	eeb0 0a47 	vmov.f32	s0, s14
 800447e:	eef0 0a67 	vmov.f32	s1, s15
 8004482:	f014 fb19 	bl	8018ab8 <sin>
 8004486:	ec51 0b10 	vmov	r0, r1, d0
 800448a:	a32d      	add	r3, pc, #180	; (adr r3, 8004540 <kinematicForward+0x250>)
 800448c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004490:	f7fc f8b2 	bl	80005f8 <__aeabi_dmul>
 8004494:	4603      	mov	r3, r0
 8004496:	460c      	mov	r4, r1
	y =   a1*sin(pnt->Theta1)
 8004498:	461a      	mov	r2, r3
 800449a:	4623      	mov	r3, r4
 800449c:	4628      	mov	r0, r5
 800449e:	4631      	mov	r1, r6
 80044a0:	f7fb fef4 	bl	800028c <__adddf3>
 80044a4:	4603      	mov	r3, r0
 80044a6:	460c      	mov	r4, r1
 80044a8:	e9c7 3406 	strd	r3, r4, [r7, #24]
	z =   d1 - pnt->D3 - d4;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 80044b2:	461a      	mov	r2, r3
 80044b4:	4623      	mov	r3, r4
 80044b6:	a126      	add	r1, pc, #152	; (adr r1, 8004550 <kinematicForward+0x260>)
 80044b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80044bc:	f7fb fee4 	bl	8000288 <__aeabi_dsub>
 80044c0:	4603      	mov	r3, r0
 80044c2:	460c      	mov	r4, r1
 80044c4:	4618      	mov	r0, r3
 80044c6:	4621      	mov	r1, r4
 80044c8:	a323      	add	r3, pc, #140	; (adr r3, 8004558 <kinematicForward+0x268>)
 80044ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ce:	f7fb fedb 	bl	8000288 <__aeabi_dsub>
 80044d2:	4603      	mov	r3, r0
 80044d4:	460c      	mov	r4, r1
 80044d6:	e9c7 3404 	strd	r3, r4, [r7, #16]
	roll = pnt->Theta1 + pnt->Theta2 - pnt->Theta4;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 80044e6:	461a      	mov	r2, r3
 80044e8:	4623      	mov	r3, r4
 80044ea:	f7fb fecf 	bl	800028c <__adddf3>
 80044ee:	4603      	mov	r3, r0
 80044f0:	460c      	mov	r4, r1
 80044f2:	4618      	mov	r0, r3
 80044f4:	4621      	mov	r1, r4
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 80044fc:	461a      	mov	r2, r3
 80044fe:	4623      	mov	r3, r4
 8004500:	f7fb fec2 	bl	8000288 <__aeabi_dsub>
 8004504:	4603      	mov	r3, r0
 8004506:	460c      	mov	r4, r1
 8004508:	e9c7 3402 	strd	r3, r4, [r7, #8]

	pnt->x = x;
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004512:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	pnt->y = y;
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800451c:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	pnt->z = z;
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004526:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	pnt->roll = roll;
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004530:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

	return TRUE;
 8004534:	2301      	movs	r3, #1
}
 8004536:	4618      	mov	r0, r3
 8004538:	372c      	adds	r7, #44	; 0x2c
 800453a:	46bd      	mov	sp, r7
 800453c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800453e:	bf00      	nop
 8004540:	80000000 	.word	0x80000000
 8004544:	40402e14 	.word	0x40402e14
 8004548:	00000000 	.word	0x00000000
 800454c:	4068a000 	.word	0x4068a000
 8004550:	00000000 	.word	0x00000000
 8004554:	406a6000 	.word	0x406a6000
 8004558:	e0000000 	.word	0xe0000000
 800455c:	40536b22 	.word	0x40536b22
 8004560:	40640000 	.word	0x40640000
 8004564:	00000000 	.word	0x00000000

08004568 <kinematicInverse>:

uint8_t		kinematicInverse(SCARA_PositionTypeDef *pnt, SCARA_PositionTypeDef current) {
 8004568:	b082      	sub	sp, #8
 800456a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800456e:	b0a0      	sub	sp, #128	; 0x80
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8004578:	e881 000c 	stmia.w	r1, {r2, r3}
	double theta1, theta2, theta2_positive, theta2_negative, d3, theta4 , pWx, pWy;
	double s1, c1, s2, s2_positive, s2_negative, c2 , temp;

	d3  = d1 - d4 - pnt->z;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8004582:	a1f2      	add	r1, pc, #968	; (adr r1, 800494c <kinematicInverse+0x3e4>)
 8004584:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004588:	f7fb fe7e 	bl	8000288 <__aeabi_dsub>
 800458c:	4602      	mov	r2, r0
 800458e:	460b      	mov	r3, r1
 8004590:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	pWx = pnt->x - a4*cos(pnt->roll);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	e9d3 ab12 	ldrd	sl, fp, [r3, #72]	; 0x48
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 80045a0:	eeb0 0a47 	vmov.f32	s0, s14
 80045a4:	eef0 0a67 	vmov.f32	s1, s15
 80045a8:	f014 f9f6 	bl	8018998 <cos>
 80045ac:	ec51 0b10 	vmov	r0, r1, d0
 80045b0:	a3e8      	add	r3, pc, #928	; (adr r3, 8004954 <kinematicInverse+0x3ec>)
 80045b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b6:	f7fc f81f 	bl	80005f8 <__aeabi_dmul>
 80045ba:	4602      	mov	r2, r0
 80045bc:	460b      	mov	r3, r1
 80045be:	4650      	mov	r0, sl
 80045c0:	4659      	mov	r1, fp
 80045c2:	f7fb fe61 	bl	8000288 <__aeabi_dsub>
 80045c6:	4602      	mov	r2, r0
 80045c8:	460b      	mov	r3, r1
 80045ca:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	pWy = pnt->y - a4*sin(pnt->roll);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	e9d3 ab14 	ldrd	sl, fp, [r3, #80]	; 0x50
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 80045da:	eeb0 0a47 	vmov.f32	s0, s14
 80045de:	eef0 0a67 	vmov.f32	s1, s15
 80045e2:	f014 fa69 	bl	8018ab8 <sin>
 80045e6:	ec51 0b10 	vmov	r0, r1, d0
 80045ea:	a3da      	add	r3, pc, #872	; (adr r3, 8004954 <kinematicInverse+0x3ec>)
 80045ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f0:	f7fc f802 	bl	80005f8 <__aeabi_dmul>
 80045f4:	4602      	mov	r2, r0
 80045f6:	460b      	mov	r3, r1
 80045f8:	4650      	mov	r0, sl
 80045fa:	4659      	mov	r1, fp
 80045fc:	f7fb fe44 	bl	8000288 <__aeabi_dsub>
 8004600:	4602      	mov	r2, r0
 8004602:	460b      	mov	r3, r1
 8004604:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	c2  = (pWx*pWx + pWy*pWy - a1*a1 - a2*a2) / (2*a1*a2);
 8004608:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800460c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004610:	f7fb fff2 	bl	80005f8 <__aeabi_dmul>
 8004614:	4602      	mov	r2, r0
 8004616:	460b      	mov	r3, r1
 8004618:	4692      	mov	sl, r2
 800461a:	469b      	mov	fp, r3
 800461c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004620:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004624:	f7fb ffe8 	bl	80005f8 <__aeabi_dmul>
 8004628:	4602      	mov	r2, r0
 800462a:	460b      	mov	r3, r1
 800462c:	4650      	mov	r0, sl
 800462e:	4659      	mov	r1, fp
 8004630:	f7fb fe2c 	bl	800028c <__adddf3>
 8004634:	4602      	mov	r2, r0
 8004636:	460b      	mov	r3, r1
 8004638:	4610      	mov	r0, r2
 800463a:	4619      	mov	r1, r3
 800463c:	a3c7      	add	r3, pc, #796	; (adr r3, 800495c <kinematicInverse+0x3f4>)
 800463e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004642:	f7fb fe21 	bl	8000288 <__aeabi_dsub>
 8004646:	4602      	mov	r2, r0
 8004648:	460b      	mov	r3, r1
 800464a:	4610      	mov	r0, r2
 800464c:	4619      	mov	r1, r3
 800464e:	f04f 0200 	mov.w	r2, #0
 8004652:	4bbb      	ldr	r3, [pc, #748]	; (8004940 <kinematicInverse+0x3d8>)
 8004654:	f7fb fe18 	bl	8000288 <__aeabi_dsub>
 8004658:	4602      	mov	r2, r0
 800465a:	460b      	mov	r3, r1
 800465c:	4610      	mov	r0, r2
 800465e:	4619      	mov	r1, r3
 8004660:	a3b3      	add	r3, pc, #716	; (adr r3, 8004930 <kinematicInverse+0x3c8>)
 8004662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004666:	f7fc f8f1 	bl	800084c <__aeabi_ddiv>
 800466a:	4602      	mov	r2, r0
 800466c:	460b      	mov	r3, r1
 800466e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp = 1 - c2*c2;
 8004672:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004676:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800467a:	f7fb ffbd 	bl	80005f8 <__aeabi_dmul>
 800467e:	4602      	mov	r2, r0
 8004680:	460b      	mov	r3, r1
 8004682:	f04f 0000 	mov.w	r0, #0
 8004686:	49af      	ldr	r1, [pc, #700]	; (8004944 <kinematicInverse+0x3dc>)
 8004688:	f7fb fdfe 	bl	8000288 <__aeabi_dsub>
 800468c:	4602      	mov	r2, r0
 800468e:	460b      	mov	r3, r1
 8004690:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	if ( temp < 0 ) {
 8004694:	f04f 0200 	mov.w	r2, #0
 8004698:	f04f 0300 	mov.w	r3, #0
 800469c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80046a0:	f7fc fa1c 	bl	8000adc <__aeabi_dcmplt>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d001      	beq.n	80046ae <kinematicInverse+0x146>
		return FALSE;
 80046aa:	2300      	movs	r3, #0
 80046ac:	e136      	b.n	800491c <kinematicInverse+0x3b4>
	}
	s2_positive  = sqrt(temp); // Note that there are 2 solution: elbow up & elbow down
 80046ae:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 80046b2:	f014 fa8b 	bl	8018bcc <sqrt>
 80046b6:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
	s2_negative	 = -s2_positive;
 80046ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80046be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80046c4:	63fb      	str	r3, [r7, #60]	; 0x3c

	theta2_positive = atan2(s2_positive,c2);
 80046c6:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 80046ca:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 80046ce:	f014 fa7b 	bl	8018bc8 <atan2>
 80046d2:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
	theta2_negative = atan2(s2_negative,c2);
 80046d6:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 80046da:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80046de:	f014 fa73 	bl	8018bc8 <atan2>
 80046e2:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	// Choose relevant situation : nearest
	if ( fabs( theta2_positive - current.Theta2) <= fabs( theta2_negative - current.Theta2)) {
 80046e6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80046ea:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80046ee:	f7fb fdcb 	bl	8000288 <__aeabi_dsub>
 80046f2:	4602      	mov	r2, r0
 80046f4:	460b      	mov	r3, r1
 80046f6:	4614      	mov	r4, r2
 80046f8:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80046fc:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8004700:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004704:	f7fb fdc0 	bl	8000288 <__aeabi_dsub>
 8004708:	4602      	mov	r2, r0
 800470a:	460b      	mov	r3, r1
 800470c:	4690      	mov	r8, r2
 800470e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8004712:	4642      	mov	r2, r8
 8004714:	464b      	mov	r3, r9
 8004716:	4620      	mov	r0, r4
 8004718:	4629      	mov	r1, r5
 800471a:	f7fc f9e9 	bl	8000af0 <__aeabi_dcmple>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d008      	beq.n	8004736 <kinematicInverse+0x1ce>
		s2 		= s2_positive;
 8004724:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8004728:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		theta2 	= theta2_positive;
 800472c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8004730:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
 8004734:	e007      	b.n	8004746 <kinematicInverse+0x1de>
	} else {
		s2 		= s2_negative;
 8004736:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800473a:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		theta2 	= theta2_negative;
 800473e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8004742:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	}

	s1 = ((a1 + a2*c2)*pWy - a2*s2*pWx) / (pWx*pWx + pWy*pWy);
 8004746:	f04f 0200 	mov.w	r2, #0
 800474a:	4b7f      	ldr	r3, [pc, #508]	; (8004948 <kinematicInverse+0x3e0>)
 800474c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004750:	f7fb ff52 	bl	80005f8 <__aeabi_dmul>
 8004754:	4603      	mov	r3, r0
 8004756:	460c      	mov	r4, r1
 8004758:	4618      	mov	r0, r3
 800475a:	4621      	mov	r1, r4
 800475c:	a376      	add	r3, pc, #472	; (adr r3, 8004938 <kinematicInverse+0x3d0>)
 800475e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004762:	f7fb fd93 	bl	800028c <__adddf3>
 8004766:	4603      	mov	r3, r0
 8004768:	460c      	mov	r4, r1
 800476a:	4618      	mov	r0, r3
 800476c:	4621      	mov	r1, r4
 800476e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004772:	f7fb ff41 	bl	80005f8 <__aeabi_dmul>
 8004776:	4603      	mov	r3, r0
 8004778:	460c      	mov	r4, r1
 800477a:	4625      	mov	r5, r4
 800477c:	461c      	mov	r4, r3
 800477e:	f04f 0200 	mov.w	r2, #0
 8004782:	4b71      	ldr	r3, [pc, #452]	; (8004948 <kinematicInverse+0x3e0>)
 8004784:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8004788:	f7fb ff36 	bl	80005f8 <__aeabi_dmul>
 800478c:	4602      	mov	r2, r0
 800478e:	460b      	mov	r3, r1
 8004790:	4610      	mov	r0, r2
 8004792:	4619      	mov	r1, r3
 8004794:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004798:	f7fb ff2e 	bl	80005f8 <__aeabi_dmul>
 800479c:	4602      	mov	r2, r0
 800479e:	460b      	mov	r3, r1
 80047a0:	4620      	mov	r0, r4
 80047a2:	4629      	mov	r1, r5
 80047a4:	f7fb fd70 	bl	8000288 <__aeabi_dsub>
 80047a8:	4603      	mov	r3, r0
 80047aa:	460c      	mov	r4, r1
 80047ac:	4625      	mov	r5, r4
 80047ae:	461c      	mov	r4, r3
 80047b0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80047b4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80047b8:	f7fb ff1e 	bl	80005f8 <__aeabi_dmul>
 80047bc:	4602      	mov	r2, r0
 80047be:	460b      	mov	r3, r1
 80047c0:	4690      	mov	r8, r2
 80047c2:	4699      	mov	r9, r3
 80047c4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80047c8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80047cc:	f7fb ff14 	bl	80005f8 <__aeabi_dmul>
 80047d0:	4602      	mov	r2, r0
 80047d2:	460b      	mov	r3, r1
 80047d4:	4640      	mov	r0, r8
 80047d6:	4649      	mov	r1, r9
 80047d8:	f7fb fd58 	bl	800028c <__adddf3>
 80047dc:	4602      	mov	r2, r0
 80047de:	460b      	mov	r3, r1
 80047e0:	4620      	mov	r0, r4
 80047e2:	4629      	mov	r1, r5
 80047e4:	f7fc f832 	bl	800084c <__aeabi_ddiv>
 80047e8:	4603      	mov	r3, r0
 80047ea:	460c      	mov	r4, r1
 80047ec:	e9c7 3408 	strd	r3, r4, [r7, #32]
	c1 = ((a1 + a2*c2)*pWx + a2*s2*pWy) / (pWx*pWx + pWy*pWy);
 80047f0:	f04f 0200 	mov.w	r2, #0
 80047f4:	4b54      	ldr	r3, [pc, #336]	; (8004948 <kinematicInverse+0x3e0>)
 80047f6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80047fa:	f7fb fefd 	bl	80005f8 <__aeabi_dmul>
 80047fe:	4603      	mov	r3, r0
 8004800:	460c      	mov	r4, r1
 8004802:	4618      	mov	r0, r3
 8004804:	4621      	mov	r1, r4
 8004806:	a34c      	add	r3, pc, #304	; (adr r3, 8004938 <kinematicInverse+0x3d0>)
 8004808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800480c:	f7fb fd3e 	bl	800028c <__adddf3>
 8004810:	4603      	mov	r3, r0
 8004812:	460c      	mov	r4, r1
 8004814:	4618      	mov	r0, r3
 8004816:	4621      	mov	r1, r4
 8004818:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800481c:	f7fb feec 	bl	80005f8 <__aeabi_dmul>
 8004820:	4603      	mov	r3, r0
 8004822:	460c      	mov	r4, r1
 8004824:	4625      	mov	r5, r4
 8004826:	461c      	mov	r4, r3
 8004828:	f04f 0200 	mov.w	r2, #0
 800482c:	4b46      	ldr	r3, [pc, #280]	; (8004948 <kinematicInverse+0x3e0>)
 800482e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8004832:	f7fb fee1 	bl	80005f8 <__aeabi_dmul>
 8004836:	4602      	mov	r2, r0
 8004838:	460b      	mov	r3, r1
 800483a:	4610      	mov	r0, r2
 800483c:	4619      	mov	r1, r3
 800483e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004842:	f7fb fed9 	bl	80005f8 <__aeabi_dmul>
 8004846:	4602      	mov	r2, r0
 8004848:	460b      	mov	r3, r1
 800484a:	4620      	mov	r0, r4
 800484c:	4629      	mov	r1, r5
 800484e:	f7fb fd1d 	bl	800028c <__adddf3>
 8004852:	4603      	mov	r3, r0
 8004854:	460c      	mov	r4, r1
 8004856:	4625      	mov	r5, r4
 8004858:	461c      	mov	r4, r3
 800485a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800485e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004862:	f7fb fec9 	bl	80005f8 <__aeabi_dmul>
 8004866:	4602      	mov	r2, r0
 8004868:	460b      	mov	r3, r1
 800486a:	4690      	mov	r8, r2
 800486c:	4699      	mov	r9, r3
 800486e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004872:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004876:	f7fb febf 	bl	80005f8 <__aeabi_dmul>
 800487a:	4602      	mov	r2, r0
 800487c:	460b      	mov	r3, r1
 800487e:	4640      	mov	r0, r8
 8004880:	4649      	mov	r1, r9
 8004882:	f7fb fd03 	bl	800028c <__adddf3>
 8004886:	4602      	mov	r2, r0
 8004888:	460b      	mov	r3, r1
 800488a:	4620      	mov	r0, r4
 800488c:	4629      	mov	r1, r5
 800488e:	f7fb ffdd 	bl	800084c <__aeabi_ddiv>
 8004892:	4603      	mov	r3, r0
 8004894:	460c      	mov	r4, r1
 8004896:	e9c7 3406 	strd	r3, r4, [r7, #24]
	theta1 = atan2(s1,c1);
 800489a:	ed97 1b06 	vldr	d1, [r7, #24]
 800489e:	ed97 0b08 	vldr	d0, [r7, #32]
 80048a2:	f014 f991 	bl	8018bc8 <atan2>
 80048a6:	ed87 0b04 	vstr	d0, [r7, #16]
 	theta4 = theta1 + theta2 - pnt->roll;
 80048aa:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80048ae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80048b2:	f7fb fceb 	bl	800028c <__adddf3>
 80048b6:	4603      	mov	r3, r0
 80048b8:	460c      	mov	r4, r1
 80048ba:	4618      	mov	r0, r3
 80048bc:	4621      	mov	r1, r4
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 80048c4:	461a      	mov	r2, r3
 80048c6:	4623      	mov	r3, r4
 80048c8:	f7fb fcde 	bl	8000288 <__aeabi_dsub>
 80048cc:	4603      	mov	r3, r0
 80048ce:	460c      	mov	r4, r1
 80048d0:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if ( SCARA_STATUS_OK != scaraCheckWorkSpace4(theta1, theta2, d3, theta4)) {
 80048d4:	ed97 3b02 	vldr	d3, [r7, #8]
 80048d8:	ed97 2b1a 	vldr	d2, [r7, #104]	; 0x68
 80048dc:	ed97 1b1e 	vldr	d1, [r7, #120]	; 0x78
 80048e0:	ed97 0b04 	vldr	d0, [r7, #16]
 80048e4:	f004 fdc0 	bl	8009468 <scaraCheckWorkSpace4>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d001      	beq.n	80048f2 <kinematicInverse+0x38a>
		return FALSE; // Over workspace !!!
 80048ee:	2300      	movs	r3, #0
 80048f0:	e014      	b.n	800491c <kinematicInverse+0x3b4>
	}
	pnt->Theta1 = theta1;
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80048f8:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	pnt->Theta2 = theta2;
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8004902:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	pnt->D3		= d3;
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 800490c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	pnt->Theta4 = theta4;
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004916:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

	return TRUE; // All is well
 800491a:	2301      	movs	r3, #1
}
 800491c:	4618      	mov	r0, r3
 800491e:	3780      	adds	r7, #128	; 0x80
 8004920:	46bd      	mov	sp, r7
 8004922:	e8bd 4fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004926:	b002      	add	sp, #8
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	f3af 8000 	nop.w
 8004930:	00000000 	.word	0x00000000
 8004934:	40eec800 	.word	0x40eec800
 8004938:	00000000 	.word	0x00000000
 800493c:	4068a000 	.word	0x4068a000
 8004940:	40d90000 	.word	0x40d90000
 8004944:	3ff00000 	.word	0x3ff00000
 8004948:	40640000 	.word	0x40640000
 800494c:	80000000 	.word	0x80000000
 8004950:	4060aa6e 	.word	0x4060aa6e
 8004954:	80000000 	.word	0x80000000
 8004958:	40402e14 	.word	0x40402e14
 800495c:	00000000 	.word	0x00000000
 8004960:	40e2f320 	.word	0x40e2f320

08004964 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004968:	f005 fe12 	bl	800a590 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800496c:	f000 f812 	bl	8004994 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004970:	f7ff fc04 	bl	800417c <MX_GPIO_Init>
  MX_DMA_Init();
 8004974:	f7fd fd16 	bl	80023a4 <MX_DMA_Init>
  MX_UART4_Init();
 8004978:	f005 fd0c 	bl	800a394 <MX_UART4_Init>
  MX_FSMC_Init();
 800497c:	f7ff fa3e 	bl	8003dfc <MX_FSMC_Init>
  MX_TIM7_Init();
 8004980:	f005 fc96 	bl	800a2b0 <MX_TIM7_Init>
  MX_TIM2_Init();
 8004984:	f005 fc46 	bl	800a214 <MX_TIM2_Init>
  //lowlayer_writePulse(0, 0, 0, 0);
  //HAL_Delay(10);
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8004988:	f7fd fd46 	bl	8002418 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800498c:	f00c fe61 	bl	8011652 <osKernelStart>
//  		  HAL_Delay(10);
//  	  }
//  lowlayer_writePulse(0, 0, 0, 0);
//  __NOP();

  while (1)
 8004990:	e7fe      	b.n	8004990 <main+0x2c>
	...

08004994 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b094      	sub	sp, #80	; 0x50
 8004998:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800499a:	f107 0320 	add.w	r3, r7, #32
 800499e:	2230      	movs	r2, #48	; 0x30
 80049a0:	2100      	movs	r1, #0
 80049a2:	4618      	mov	r0, r3
 80049a4:	f010 fa2e 	bl	8014e04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80049a8:	f107 030c 	add.w	r3, r7, #12
 80049ac:	2200      	movs	r2, #0
 80049ae:	601a      	str	r2, [r3, #0]
 80049b0:	605a      	str	r2, [r3, #4]
 80049b2:	609a      	str	r2, [r3, #8]
 80049b4:	60da      	str	r2, [r3, #12]
 80049b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80049b8:	2300      	movs	r3, #0
 80049ba:	60bb      	str	r3, [r7, #8]
 80049bc:	4b28      	ldr	r3, [pc, #160]	; (8004a60 <SystemClock_Config+0xcc>)
 80049be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c0:	4a27      	ldr	r2, [pc, #156]	; (8004a60 <SystemClock_Config+0xcc>)
 80049c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049c6:	6413      	str	r3, [r2, #64]	; 0x40
 80049c8:	4b25      	ldr	r3, [pc, #148]	; (8004a60 <SystemClock_Config+0xcc>)
 80049ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049d0:	60bb      	str	r3, [r7, #8]
 80049d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80049d4:	2300      	movs	r3, #0
 80049d6:	607b      	str	r3, [r7, #4]
 80049d8:	4b22      	ldr	r3, [pc, #136]	; (8004a64 <SystemClock_Config+0xd0>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a21      	ldr	r2, [pc, #132]	; (8004a64 <SystemClock_Config+0xd0>)
 80049de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049e2:	6013      	str	r3, [r2, #0]
 80049e4:	4b1f      	ldr	r3, [pc, #124]	; (8004a64 <SystemClock_Config+0xd0>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049ec:	607b      	str	r3, [r7, #4]
 80049ee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80049f0:	2301      	movs	r3, #1
 80049f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80049f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80049f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80049fa:	2302      	movs	r3, #2
 80049fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80049fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004a02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004a04:	2308      	movs	r3, #8
 8004a06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8004a08:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8004a0c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004a0e:	2302      	movs	r3, #2
 8004a10:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004a12:	2307      	movs	r3, #7
 8004a14:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004a16:	f107 0320 	add.w	r3, r7, #32
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f007 fe2a 	bl	800c674 <HAL_RCC_OscConfig>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8004a26:	f000 f831 	bl	8004a8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004a2a:	230f      	movs	r3, #15
 8004a2c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004a2e:	2302      	movs	r3, #2
 8004a30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004a32:	2300      	movs	r3, #0
 8004a34:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004a36:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004a3a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004a3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a40:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004a42:	f107 030c 	add.w	r3, r7, #12
 8004a46:	2105      	movs	r1, #5
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f008 f883 	bl	800cb54 <HAL_RCC_ClockConfig>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d001      	beq.n	8004a58 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8004a54:	f000 f81a 	bl	8004a8c <Error_Handler>
  }
}
 8004a58:	bf00      	nop
 8004a5a:	3750      	adds	r7, #80	; 0x50
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	40023800 	.word	0x40023800
 8004a64:	40007000 	.word	0x40007000

08004a68 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a04      	ldr	r2, [pc, #16]	; (8004a88 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d101      	bne.n	8004a7e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004a7a:	f005 fdab 	bl	800a5d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004a7e:	bf00      	nop
 8004a80:	3708      	adds	r7, #8
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	40001000 	.word	0x40001000

08004a8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004a90:	bf00      	nop
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr

08004a9a <ringBuff_PushChar>:
 *  data		: data to write
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PushChar(RINGBUFFER_TypeDef *ringbuff, uint8_t data) {
 8004a9a:	b480      	push	{r7}
 8004a9c:	b083      	sub	sp, #12
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	70fb      	strb	r3, [r7, #3]
	if (ringbuff->isFull_Flag) {
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004aac:	3308      	adds	r3, #8
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d001      	beq.n	8004ab8 <ringBuff_PushChar+0x1e>
		return FALSE;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	e02e      	b.n	8004b16 <ringBuff_PushChar+0x7c>
	} else {
			ringbuff->Array[ringbuff->head]	= data;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	78f9      	ldrb	r1, [r7, #3]
 8004ac4:	54d1      	strb	r1, [r2, r3]
			ringbuff->head					= (ringbuff->head + 1) % RINGBUFFER_SIZE;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	3301      	adds	r3, #1
 8004ad0:	425a      	negs	r2, r3
 8004ad2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ad6:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8004ada:	bf58      	it	pl
 8004adc:	4253      	negpl	r3, r2
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004ae4:	6013      	str	r3, [r2, #0]
			if (ringbuff->head == ringbuff->tail) {
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004af4:	3304      	adds	r3, #4
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d105      	bne.n	8004b08 <ringBuff_PushChar+0x6e>
				ringbuff->isFull_Flag = TRUE;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b02:	3308      	adds	r3, #8
 8004b04:	2201      	movs	r2, #1
 8004b06:	701a      	strb	r2, [r3, #0]
			}
			ringbuff->isEmpty_Flag = FALSE;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b0e:	3309      	adds	r3, #9
 8004b10:	2200      	movs	r2, #0
 8004b12:	701a      	strb	r2, [r3, #0]
			return TRUE;
 8004b14:	2301      	movs	r3, #1
	}
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	370c      	adds	r7, #12
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr

08004b22 <ringBuff_PopChar>:
 *  *ptr_data	: pointer of destination
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PopChar(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data) {
 8004b22:	b480      	push	{r7}
 8004b24:	b083      	sub	sp, #12
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
 8004b2a:	6039      	str	r1, [r7, #0]
	if (ringbuff->isEmpty_Flag) {
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b32:	3309      	adds	r3, #9
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d001      	beq.n	8004b3e <ringBuff_PopChar+0x1c>
		return FALSE;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	e032      	b.n	8004ba4 <ringBuff_PopChar+0x82>
	} else {
			*ptr_data		= ringbuff->Array[ringbuff->tail];
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b44:	3304      	adds	r3, #4
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	5cd2      	ldrb	r2, [r2, r3]
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	701a      	strb	r2, [r3, #0]
			ringbuff->tail	= (ringbuff->tail +1) % RINGBUFFER_SIZE;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b56:	3304      	adds	r3, #4
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	4259      	negs	r1, r3
 8004b5e:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8004b62:	f3c1 030b 	ubfx	r3, r1, #0, #12
 8004b66:	bf58      	it	pl
 8004b68:	425a      	negpl	r2, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b70:	3304      	adds	r3, #4
 8004b72:	601a      	str	r2, [r3, #0]
			if (ringbuff->head == ringbuff->tail) {
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b82:	3304      	adds	r3, #4
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d105      	bne.n	8004b96 <ringBuff_PopChar+0x74>
				ringbuff->isEmpty_Flag = TRUE;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b90:	3309      	adds	r3, #9
 8004b92:	2201      	movs	r2, #1
 8004b94:	701a      	strb	r2, [r3, #0]
			}
			ringbuff->isFull_Flag = FALSE;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b9c:	3308      	adds	r3, #8
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	701a      	strb	r2, [r3, #0]
			return TRUE;
 8004ba2:	2301      	movs	r3, #1
	}
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <ringBuff_PushArray>:
 *  *ptr_data	: pointer of source
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PushArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b086      	sub	sp, #24
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
	int16_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	82fb      	strh	r3, [r7, #22]
 8004bc0:	e011      	b.n	8004be6 <ringBuff_PushArray+0x36>
		if ( !ringBuff_PushChar(ringbuff, *(ptr_data + success_number))) {
 8004bc2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004bc6:	68ba      	ldr	r2, [r7, #8]
 8004bc8:	4413      	add	r3, r2
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	4619      	mov	r1, r3
 8004bce:	68f8      	ldr	r0, [r7, #12]
 8004bd0:	f7ff ff63 	bl	8004a9a <ringBuff_PushChar>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00b      	beq.n	8004bf2 <ringBuff_PushArray+0x42>
	for (success_number = 0; success_number < len; success_number++) {
 8004bda:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	3301      	adds	r3, #1
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	82fb      	strh	r3, [r7, #22]
 8004be6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	dce8      	bgt.n	8004bc2 <ringBuff_PushArray+0x12>
 8004bf0:	e000      	b.n	8004bf4 <ringBuff_PushArray+0x44>
			break;
 8004bf2:	bf00      	nop
		}// stop when ring buffer FULL
	}
	return success_number;
 8004bf4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3718      	adds	r7, #24
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <ringBuff_PopArray>:
 *  *ptr_data	: pointer of destination
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PopArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b086      	sub	sp, #24
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	607a      	str	r2, [r7, #4]
	int32_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	617b      	str	r3, [r7, #20]
 8004c10:	e00c      	b.n	8004c2c <ringBuff_PopArray+0x2c>
		if ( !ringBuff_PopChar(ringbuff, (ptr_data + success_number))) {
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	68ba      	ldr	r2, [r7, #8]
 8004c16:	4413      	add	r3, r2
 8004c18:	4619      	mov	r1, r3
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	f7ff ff81 	bl	8004b22 <ringBuff_PopChar>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d007      	beq.n	8004c36 <ringBuff_PopArray+0x36>
	for (success_number = 0; success_number < len; success_number++) {
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	3301      	adds	r3, #1
 8004c2a:	617b      	str	r3, [r7, #20]
 8004c2c:	697a      	ldr	r2, [r7, #20]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	dbee      	blt.n	8004c12 <ringBuff_PopArray+0x12>
 8004c34:	e000      	b.n	8004c38 <ringBuff_PopArray+0x38>
			break;
 8004c36:	bf00      	nop
		}// stop when ring buffer EMPTY
	}
	return success_number;
 8004c38:	697b      	ldr	r3, [r7, #20]
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3718      	adds	r7, #24
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}

08004c42 <ringBuff_DistanceOf>:
 *  cmp_char	: compare character
 *
 *  returns:	: distance from 'tail' to 'cmp_char'
 *  			  -1 'cmp_char' could not be found.
 */
int32_t	ringBuff_DistanceOf	(RINGBUFFER_TypeDef *ringbuff, const char* cmp_char) {
 8004c42:	b580      	push	{r7, lr}
 8004c44:	b088      	sub	sp, #32
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
 8004c4a:	6039      	str	r1, [r7, #0]
	int32_t index = ringbuff->tail;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c52:	3304      	adds	r3, #4
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	61fb      	str	r3, [r7, #28]
	int32_t distance = 0;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	61bb      	str	r3, [r7, #24]
	int32_t sync_state = 0;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	617b      	str	r3, [r7, #20]
	int32_t head_ptr = ringbuff->head;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	60fb      	str	r3, [r7, #12]
	int32_t number_of_state = strlen(cmp_char);
 8004c6a:	6838      	ldr	r0, [r7, #0]
 8004c6c:	f7fb fab0 	bl	80001d0 <strlen>
 8004c70:	4603      	mov	r3, r0
 8004c72:	60bb      	str	r3, [r7, #8]
	if (ringbuff->isFull_Flag) {
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c7a:	3308      	adds	r3, #8
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d066      	beq.n	8004d50 <ringBuff_DistanceOf+0x10e>
	    for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 8004c82:	2300      	movs	r3, #0
 8004c84:	613b      	str	r3, [r7, #16]
 8004c86:	e030      	b.n	8004cea <ringBuff_DistanceOf+0xa8>
	            if(ringbuff->Array[index] == cmp_char[sync_state]){
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	781a      	ldrb	r2, [r3, #0]
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	6839      	ldr	r1, [r7, #0]
 8004c94:	440b      	add	r3, r1
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d103      	bne.n	8004ca4 <ringBuff_DistanceOf+0x62>
	                sync_state++;
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	617b      	str	r3, [r7, #20]
 8004ca2:	e00c      	b.n	8004cbe <ringBuff_DistanceOf+0x7c>
	            }else if(ringbuff->Array[index] == cmp_char[0]){
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	4413      	add	r3, r2
 8004caa:	781a      	ldrb	r2, [r3, #0]
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d102      	bne.n	8004cba <ringBuff_DistanceOf+0x78>
	                sync_state = 1;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	617b      	str	r3, [r7, #20]
 8004cb8:	e001      	b.n	8004cbe <ringBuff_DistanceOf+0x7c>
	            }else{
	                sync_state = 0;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	617b      	str	r3, [r7, #20]
	            }
	            if(sync_state == number_of_state){
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d101      	bne.n	8004cca <ringBuff_DistanceOf+0x88>
	                return distance;
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	e048      	b.n	8004d5c <ringBuff_DistanceOf+0x11a>
	            }
	//				if ( cmp_char == ringbuff->.Array[index]) {
	//					return distance;
	//				}
	            distance++;
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	3301      	adds	r3, #1
 8004cce:	61bb      	str	r3, [r7, #24]
	    for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	613b      	str	r3, [r7, #16]
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	3301      	adds	r3, #1
 8004cda:	425a      	negs	r2, r3
 8004cdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ce0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8004ce4:	bf58      	it	pl
 8004ce6:	4253      	negpl	r3, r2
 8004ce8:	61fb      	str	r3, [r7, #28]
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cf0:	dbca      	blt.n	8004c88 <ringBuff_DistanceOf+0x46>
 8004cf2:	e031      	b.n	8004d58 <ringBuff_DistanceOf+0x116>
	        }
	} else {
	    for ( ; (index != head_ptr); index = (index + 1) % RINGBUFFER_SIZE) {
	        if(ringbuff->Array[index] == cmp_char[sync_state]){
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	781a      	ldrb	r2, [r3, #0]
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	6839      	ldr	r1, [r7, #0]
 8004d00:	440b      	add	r3, r1
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d103      	bne.n	8004d10 <ringBuff_DistanceOf+0xce>
	                //LOG_REPORT("dis1", ringbuff->.tail);
	                sync_state++;
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	617b      	str	r3, [r7, #20]
 8004d0e:	e00c      	b.n	8004d2a <ringBuff_DistanceOf+0xe8>
	            }else if(ringbuff->Array[index] == cmp_char[0]){
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	4413      	add	r3, r2
 8004d16:	781a      	ldrb	r2, [r3, #0]
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d102      	bne.n	8004d26 <ringBuff_DistanceOf+0xe4>
	                sync_state = 1;
 8004d20:	2301      	movs	r3, #1
 8004d22:	617b      	str	r3, [r7, #20]
 8004d24:	e001      	b.n	8004d2a <ringBuff_DistanceOf+0xe8>
	            }else{
	                sync_state = 0;
 8004d26:	2300      	movs	r3, #0
 8004d28:	617b      	str	r3, [r7, #20]
	            }
	            if(sync_state == number_of_state){
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d101      	bne.n	8004d36 <ringBuff_DistanceOf+0xf4>
	                //LOG_REPORT("dis", distance);
	                return distance;
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	e012      	b.n	8004d5c <ringBuff_DistanceOf+0x11a>
	            }
	//				if ( cmp_char == ringbuff->.Array[index]) {
	//					return distance;
	//				}
	            distance++;
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	3301      	adds	r3, #1
 8004d3a:	61bb      	str	r3, [r7, #24]
	    for ( ; (index != head_ptr); index = (index + 1) % RINGBUFFER_SIZE) {
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	3301      	adds	r3, #1
 8004d40:	425a      	negs	r2, r3
 8004d42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d46:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8004d4a:	bf58      	it	pl
 8004d4c:	4253      	negpl	r3, r2
 8004d4e:	61fb      	str	r3, [r7, #28]
 8004d50:	69fa      	ldr	r2, [r7, #28]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d1cd      	bne.n	8004cf4 <ringBuff_DistanceOf+0xb2>
	        }
	    //LOG_REPORT("hai", 2);
	}

	return -1;
 8004d58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3720      	adds	r7, #32
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <lowlayer_scanReset>:
uint8_t state_scan;
uint8_t scan_flag;

const int8_t	pulse_scan[4] = {3, 5, 5, 10};

void	lowlayer_scanReset(void) {
 8004d64:	b580      	push	{r7, lr}
 8004d66:	af00      	add	r7, sp, #0
	lowlayer_resetEncoder();
 8004d68:	f000 fdfe 	bl	8005968 <lowlayer_resetEncoder>
	pulse_accumulate[0] = 0;
 8004d6c:	4b10      	ldr	r3, [pc, #64]	; (8004db0 <lowlayer_scanReset+0x4c>)
 8004d6e:	2200      	movs	r2, #0
 8004d70:	601a      	str	r2, [r3, #0]
	pulse_accumulate[1] = 0;
 8004d72:	4b0f      	ldr	r3, [pc, #60]	; (8004db0 <lowlayer_scanReset+0x4c>)
 8004d74:	2200      	movs	r2, #0
 8004d76:	605a      	str	r2, [r3, #4]
	pulse_accumulate[2] = 0;
 8004d78:	4b0d      	ldr	r3, [pc, #52]	; (8004db0 <lowlayer_scanReset+0x4c>)
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	609a      	str	r2, [r3, #8]
	pulse_accumulate[3] = 0;
 8004d7e:	4b0c      	ldr	r3, [pc, #48]	; (8004db0 <lowlayer_scanReset+0x4c>)
 8004d80:	2200      	movs	r2, #0
 8004d82:	60da      	str	r2, [r3, #12]

	position_encoder[0] = 0;
 8004d84:	4b0b      	ldr	r3, [pc, #44]	; (8004db4 <lowlayer_scanReset+0x50>)
 8004d86:	2200      	movs	r2, #0
 8004d88:	601a      	str	r2, [r3, #0]
	position_encoder[1] = 0;
 8004d8a:	4b0a      	ldr	r3, [pc, #40]	; (8004db4 <lowlayer_scanReset+0x50>)
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	605a      	str	r2, [r3, #4]
	position_encoder[2] = 0;
 8004d90:	4b08      	ldr	r3, [pc, #32]	; (8004db4 <lowlayer_scanReset+0x50>)
 8004d92:	2200      	movs	r2, #0
 8004d94:	609a      	str	r2, [r3, #8]

	scan_flag = 0;
 8004d96:	4b08      	ldr	r3, [pc, #32]	; (8004db8 <lowlayer_scanReset+0x54>)
 8004d98:	2200      	movs	r2, #0
 8004d9a:	701a      	strb	r2, [r3, #0]
	state_scan = 0;
 8004d9c:	4b07      	ldr	r3, [pc, #28]	; (8004dbc <lowlayer_scanReset+0x58>)
 8004d9e:	2200      	movs	r2, #0
 8004da0:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CAPTURE_ENABLE_GPIO_Port, CAPTURE_ENABLE_Pin, GPIO_PIN_RESET);
 8004da2:	2200      	movs	r2, #0
 8004da4:	2108      	movs	r1, #8
 8004da6:	4806      	ldr	r0, [pc, #24]	; (8004dc0 <lowlayer_scanReset+0x5c>)
 8004da8:	f006 fa70 	bl	800b28c <HAL_GPIO_WritePin>
}
 8004dac:	bf00      	nop
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	2000c518 	.word	0x2000c518
 8004db4:	2000c52c 	.word	0x2000c52c
 8004db8:	2000c528 	.word	0x2000c528
 8004dbc:	2000c548 	.word	0x2000c548
 8004dc0:	40020c00 	.word	0x40020c00
 8004dc4:	00000000 	.word	0x00000000

08004dc8 <lowlayer_scanFlow>:

uint8_t	lowlayer_scanFlow(void) {
 8004dc8:	b590      	push	{r4, r7, lr}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
	// Scan limit switch from 3 to 0
	int8_t pulse[4] = {0, 0, 0 ,0};
 8004dce:	2300      	movs	r3, #0
 8004dd0:	607b      	str	r3, [r7, #4]
	lowlayer_updateLimit();
 8004dd2:	f000 fe87 	bl	8005ae4 <lowlayer_updateLimit>
	if (state_scan < 4) {
 8004dd6:	4b98      	ldr	r3, [pc, #608]	; (8005038 <lowlayer_scanFlow+0x270>)
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	2b03      	cmp	r3, #3
 8004ddc:	d837      	bhi.n	8004e4e <lowlayer_scanFlow+0x86>
		if (limit_switch[3 - state_scan] == 0) {
 8004dde:	4b96      	ldr	r3, [pc, #600]	; (8005038 <lowlayer_scanFlow+0x270>)
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	f1c3 0303 	rsb	r3, r3, #3
 8004de6:	4a95      	ldr	r2, [pc, #596]	; (800503c <lowlayer_scanFlow+0x274>)
 8004de8:	5cd3      	ldrb	r3, [r2, r3]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d121      	bne.n	8004e32 <lowlayer_scanFlow+0x6a>
			pulse[3 - state_scan] = pulse_scan[3 - state_scan];
 8004dee:	4b92      	ldr	r3, [pc, #584]	; (8005038 <lowlayer_scanFlow+0x270>)
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	f1c3 0203 	rsb	r2, r3, #3
 8004df6:	4b90      	ldr	r3, [pc, #576]	; (8005038 <lowlayer_scanFlow+0x270>)
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	f1c3 0303 	rsb	r3, r3, #3
 8004dfe:	4990      	ldr	r1, [pc, #576]	; (8005040 <lowlayer_scanFlow+0x278>)
 8004e00:	568a      	ldrsb	r2, [r1, r2]
 8004e02:	f107 0108 	add.w	r1, r7, #8
 8004e06:	440b      	add	r3, r1
 8004e08:	f803 2c04 	strb.w	r2, [r3, #-4]
			lowlayer_writePulse(-pulse[0], pulse[1], -pulse[2], pulse[3]);
 8004e0c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	425b      	negs	r3, r3
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	b258      	sxtb	r0, r3
 8004e18:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8004e1c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	425b      	negs	r3, r3
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	b25a      	sxtb	r2, r3
 8004e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e2c:	f000 fcd8 	bl	80057e0 <lowlayer_writePulse>
 8004e30:	e00b      	b.n	8004e4a <lowlayer_scanFlow+0x82>
		} else {
			state_scan++;
 8004e32:	4b81      	ldr	r3, [pc, #516]	; (8005038 <lowlayer_scanFlow+0x270>)
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	3301      	adds	r3, #1
 8004e38:	b2da      	uxtb	r2, r3
 8004e3a:	4b7f      	ldr	r3, [pc, #508]	; (8005038 <lowlayer_scanFlow+0x270>)
 8004e3c:	701a      	strb	r2, [r3, #0]
			lowlayer_writePulse(0, 0, 0, 0);
 8004e3e:	2300      	movs	r3, #0
 8004e40:	2200      	movs	r2, #0
 8004e42:	2100      	movs	r1, #0
 8004e44:	2000      	movs	r0, #0
 8004e46:	f000 fccb 	bl	80057e0 <lowlayer_writePulse>
		}

		return FALSE;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	e0d8      	b.n	8005000 <lowlayer_scanFlow+0x238>
	} else {
		HAL_GPIO_WritePin(CAPTURE_ENABLE_GPIO_Port, CAPTURE_ENABLE_Pin, GPIO_PIN_SET);
 8004e4e:	2201      	movs	r2, #1
 8004e50:	2108      	movs	r1, #8
 8004e52:	487c      	ldr	r0, [pc, #496]	; (8005044 <lowlayer_scanFlow+0x27c>)
 8004e54:	f006 fa1a 	bl	800b28c <HAL_GPIO_WritePin>
		lowlayer_updateCapture();
 8004e58:	f000 fe28 	bl	8005aac <lowlayer_updateCapture>
		lowlayer_writePulse(0, 0, 0, 0);
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	2200      	movs	r2, #0
 8004e60:	2100      	movs	r1, #0
 8004e62:	2000      	movs	r0, #0
 8004e64:	f000 fcbc 	bl	80057e0 <lowlayer_writePulse>
		scan_flag = 1;
 8004e68:	4b77      	ldr	r3, [pc, #476]	; (8005048 <lowlayer_scanFlow+0x280>)
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	701a      	strb	r2, [r3, #0]
		// Update offset
		offset_encoder[0] 	= position_capture[0];
 8004e6e:	4b77      	ldr	r3, [pc, #476]	; (800504c <lowlayer_scanFlow+0x284>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a77      	ldr	r2, [pc, #476]	; (8005050 <lowlayer_scanFlow+0x288>)
 8004e74:	6013      	str	r3, [r2, #0]
		offset_encoder[1] 	= position_capture[1];
 8004e76:	4b75      	ldr	r3, [pc, #468]	; (800504c <lowlayer_scanFlow+0x284>)
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	4a75      	ldr	r2, [pc, #468]	; (8005050 <lowlayer_scanFlow+0x288>)
 8004e7c:	6053      	str	r3, [r2, #4]
		offset_encoder[2] 	= position_capture[2];
 8004e7e:	4b73      	ldr	r3, [pc, #460]	; (800504c <lowlayer_scanFlow+0x284>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	4a73      	ldr	r2, [pc, #460]	; (8005050 <lowlayer_scanFlow+0x288>)
 8004e84:	6093      	str	r3, [r2, #8]
		offset_stepper		= pulse_accumulate[3];
 8004e86:	4b73      	ldr	r3, [pc, #460]	; (8005054 <lowlayer_scanFlow+0x28c>)
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	4a73      	ldr	r2, [pc, #460]	; (8005058 <lowlayer_scanFlow+0x290>)
 8004e8c:	6013      	str	r3, [r2, #0]
		// LOG offset
		LOG_REPORT("offset encoder 0", offset_encoder[0]);
 8004e8e:	4b70      	ldr	r3, [pc, #448]	; (8005050 <lowlayer_scanFlow+0x288>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	4619      	mov	r1, r3
 8004e96:	4871      	ldr	r0, [pc, #452]	; (800505c <lowlayer_scanFlow+0x294>)
 8004e98:	f7fd f9cc 	bl	8002234 <LOG_REPORT>
		LOG_REPORT("offset encoder 1", offset_encoder[1]);
 8004e9c:	4b6c      	ldr	r3, [pc, #432]	; (8005050 <lowlayer_scanFlow+0x288>)
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	486e      	ldr	r0, [pc, #440]	; (8005060 <lowlayer_scanFlow+0x298>)
 8004ea6:	f7fd f9c5 	bl	8002234 <LOG_REPORT>
		LOG_REPORT("offset encoder 2", offset_encoder[2]);
 8004eaa:	4b69      	ldr	r3, [pc, #420]	; (8005050 <lowlayer_scanFlow+0x288>)
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	486c      	ldr	r0, [pc, #432]	; (8005064 <lowlayer_scanFlow+0x29c>)
 8004eb4:	f7fd f9be 	bl	8002234 <LOG_REPORT>
		LOG_REPORT("offset stepper", offset_stepper);
 8004eb8:	4b67      	ldr	r3, [pc, #412]	; (8005058 <lowlayer_scanFlow+0x290>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	4869      	ldr	r0, [pc, #420]	; (8005068 <lowlayer_scanFlow+0x2a0>)
 8004ec2:	f7fd f9b7 	bl	8002234 <LOG_REPORT>

		offset_setpoint[0]	= HARD_LIM0_NEG
				- DIR_ENCODER_0*offset_encoder[0]*2.0*PI/ENCODER_J0;
 8004ec6:	4b62      	ldr	r3, [pc, #392]	; (8005050 <lowlayer_scanFlow+0x288>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	ee07 3a90 	vmov	s15, r3
 8004ece:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ed2:	ee17 0a90 	vmov	r0, s15
 8004ed6:	f7fb fb37 	bl	8000548 <__aeabi_f2d>
 8004eda:	4602      	mov	r2, r0
 8004edc:	460b      	mov	r3, r1
 8004ede:	f7fb f9d5 	bl	800028c <__adddf3>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	460c      	mov	r4, r1
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	4621      	mov	r1, r4
 8004eea:	a347      	add	r3, pc, #284	; (adr r3, 8005008 <lowlayer_scanFlow+0x240>)
 8004eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef0:	f7fb fb82 	bl	80005f8 <__aeabi_dmul>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	460c      	mov	r4, r1
 8004ef8:	4618      	mov	r0, r3
 8004efa:	4621      	mov	r1, r4
 8004efc:	a344      	add	r3, pc, #272	; (adr r3, 8005010 <lowlayer_scanFlow+0x248>)
 8004efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f02:	f7fb fca3 	bl	800084c <__aeabi_ddiv>
 8004f06:	4603      	mov	r3, r0
 8004f08:	460c      	mov	r4, r1
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	4623      	mov	r3, r4
 8004f0e:	a142      	add	r1, pc, #264	; (adr r1, 8005018 <lowlayer_scanFlow+0x250>)
 8004f10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f14:	f7fb f9b8 	bl	8000288 <__aeabi_dsub>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	460c      	mov	r4, r1
		offset_setpoint[0]	= HARD_LIM0_NEG
 8004f1c:	4a53      	ldr	r2, [pc, #332]	; (800506c <lowlayer_scanFlow+0x2a4>)
 8004f1e:	e9c2 3400 	strd	r3, r4, [r2]
		offset_setpoint[1]	= HARD_LIM1_POS
				- DIR_ENCODER_1*offset_encoder[1]*2.0*PI/ENCODER_J1;
 8004f22:	4b4b      	ldr	r3, [pc, #300]	; (8005050 <lowlayer_scanFlow+0x288>)
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	ee07 3a90 	vmov	s15, r3
 8004f2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f2e:	ee17 0a90 	vmov	r0, s15
 8004f32:	f7fb fb09 	bl	8000548 <__aeabi_f2d>
 8004f36:	4602      	mov	r2, r0
 8004f38:	460b      	mov	r3, r1
 8004f3a:	f7fb f9a7 	bl	800028c <__adddf3>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	460c      	mov	r4, r1
 8004f42:	4618      	mov	r0, r3
 8004f44:	4621      	mov	r1, r4
 8004f46:	a330      	add	r3, pc, #192	; (adr r3, 8005008 <lowlayer_scanFlow+0x240>)
 8004f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f4c:	f7fb fb54 	bl	80005f8 <__aeabi_dmul>
 8004f50:	4603      	mov	r3, r0
 8004f52:	460c      	mov	r4, r1
 8004f54:	4618      	mov	r0, r3
 8004f56:	4621      	mov	r1, r4
 8004f58:	f04f 0200 	mov.w	r2, #0
 8004f5c:	4b44      	ldr	r3, [pc, #272]	; (8005070 <lowlayer_scanFlow+0x2a8>)
 8004f5e:	f7fb fc75 	bl	800084c <__aeabi_ddiv>
 8004f62:	4603      	mov	r3, r0
 8004f64:	460c      	mov	r4, r1
 8004f66:	461a      	mov	r2, r3
 8004f68:	4623      	mov	r3, r4
 8004f6a:	a12d      	add	r1, pc, #180	; (adr r1, 8005020 <lowlayer_scanFlow+0x258>)
 8004f6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f70:	f7fb f98a 	bl	8000288 <__aeabi_dsub>
 8004f74:	4603      	mov	r3, r0
 8004f76:	460c      	mov	r4, r1
		offset_setpoint[1]	= HARD_LIM1_POS
 8004f78:	4a3c      	ldr	r2, [pc, #240]	; (800506c <lowlayer_scanFlow+0x2a4>)
 8004f7a:	e9c2 3402 	strd	r3, r4, [r2, #8]
		offset_setpoint[2]	= HARD_LIM2_NEG
				- DIR_ENCODER_2*offset_encoder[2]/ENCODER_J2;
 8004f7e:	4b34      	ldr	r3, [pc, #208]	; (8005050 <lowlayer_scanFlow+0x288>)
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	ee07 3a90 	vmov	s15, r3
 8004f86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f8a:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8005074 <lowlayer_scanFlow+0x2ac>
 8004f8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004f92:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8005078 <lowlayer_scanFlow+0x2b0>
 8004f96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004f9a:	ee17 0a90 	vmov	r0, s15
 8004f9e:	f7fb fad3 	bl	8000548 <__aeabi_f2d>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	460c      	mov	r4, r1
		offset_setpoint[2]	= HARD_LIM2_NEG
 8004fa6:	4a31      	ldr	r2, [pc, #196]	; (800506c <lowlayer_scanFlow+0x2a4>)
 8004fa8:	e9c2 3404 	strd	r3, r4, [r2, #16]
		offset_setpoint[3]  = HARD_LIM3_POS
				- offset_stepper*2.0*PI/GEAR_J3;
 8004fac:	4b2a      	ldr	r3, [pc, #168]	; (8005058 <lowlayer_scanFlow+0x290>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f7fb fab7 	bl	8000524 <__aeabi_i2d>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	460b      	mov	r3, r1
 8004fba:	f7fb f967 	bl	800028c <__adddf3>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	460c      	mov	r4, r1
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	4621      	mov	r1, r4
 8004fc6:	a310      	add	r3, pc, #64	; (adr r3, 8005008 <lowlayer_scanFlow+0x240>)
 8004fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fcc:	f7fb fb14 	bl	80005f8 <__aeabi_dmul>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	460c      	mov	r4, r1
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	4621      	mov	r1, r4
 8004fd8:	a313      	add	r3, pc, #76	; (adr r3, 8005028 <lowlayer_scanFlow+0x260>)
 8004fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fde:	f7fb fc35 	bl	800084c <__aeabi_ddiv>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	460c      	mov	r4, r1
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	4623      	mov	r3, r4
 8004fea:	a111      	add	r1, pc, #68	; (adr r1, 8005030 <lowlayer_scanFlow+0x268>)
 8004fec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ff0:	f7fb f94a 	bl	8000288 <__aeabi_dsub>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	460c      	mov	r4, r1
		offset_setpoint[3]  = HARD_LIM3_POS
 8004ff8:	4a1c      	ldr	r2, [pc, #112]	; (800506c <lowlayer_scanFlow+0x2a4>)
 8004ffa:	e9c2 3406 	strd	r3, r4, [r2, #24]

		return TRUE;
 8004ffe:	2301      	movs	r3, #1
	}
}
 8005000:	4618      	mov	r0, r3
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	bd90      	pop	{r4, r7, pc}
 8005008:	60000000 	.word	0x60000000
 800500c:	400921fb 	.word	0x400921fb
 8005010:	00000000 	.word	0x00000000
 8005014:	40f38800 	.word	0x40f38800
 8005018:	40000000 	.word	0x40000000
 800501c:	bff9f17a 	.word	0xbff9f17a
 8005020:	80000000 	.word	0x80000000
 8005024:	40039716 	.word	0x40039716
 8005028:	a0000000 	.word	0xa0000000
 800502c:	40d3bca1 	.word	0x40d3bca1
 8005030:	a0000000 	.word	0xa0000000
 8005034:	4008330d 	.word	0x4008330d
 8005038:	2000c548 	.word	0x2000c548
 800503c:	2000c538 	.word	0x2000c538
 8005040:	0801a554 	.word	0x0801a554
 8005044:	40020c00 	.word	0x40020c00
 8005048:	2000c528 	.word	0x2000c528
 800504c:	2000c53c 	.word	0x2000c53c
 8005050:	2000c570 	.word	0x2000c570
 8005054:	2000c518 	.word	0x2000c518
 8005058:	2000c54c 	.word	0x2000c54c
 800505c:	0801a47c 	.word	0x0801a47c
 8005060:	0801a490 	.word	0x0801a490
 8005064:	0801a4a4 	.word	0x0801a4a4
 8005068:	0801a4b8 	.word	0x0801a4b8
 800506c:	2000c550 	.word	0x2000c550
 8005070:	40ff4000 	.word	0x40ff4000
 8005074:	4426aaab 	.word	0x4426aaab
 8005078:	400f1aa0 	.word	0x400f1aa0
 800507c:	00000000 	.word	0x00000000

08005080 <lowlayer_goToSoftLimit>:

uint8_t	lowlayer_goToSoftLimit(SCARA_PositionTypeDef *setpoint) {
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
	int8_t pulse[4] = {0, 0, 0 ,0};
 8005088:	2300      	movs	r3, #0
 800508a:	60bb      	str	r3, [r7, #8]
	uint8_t check = 0;
 800508c:	2300      	movs	r3, #0
 800508e:	73fb      	strb	r3, [r7, #15]
	lowlayer_readSetPosition(setpoint);
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f000 f94d 	bl	8005330 <lowlayer_readSetPosition>
	if (setpoint->Theta1 < LIM_MIN_J0) {
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800509c:	a330      	add	r3, pc, #192	; (adr r3, 8005160 <lowlayer_goToSoftLimit+0xe0>)
 800509e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a2:	f7fb fd1b 	bl	8000adc <__aeabi_dcmplt>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d004      	beq.n	80050b6 <lowlayer_goToSoftLimit+0x36>
		pulse[0] = pulse_scan[0];
 80050ac:	2303      	movs	r3, #3
 80050ae:	723b      	strb	r3, [r7, #8]
		check++;
 80050b0:	7bfb      	ldrb	r3, [r7, #15]
 80050b2:	3301      	adds	r3, #1
 80050b4:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->Theta2 > LIM_MAX_J1) {
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 80050bc:	a32a      	add	r3, pc, #168	; (adr r3, 8005168 <lowlayer_goToSoftLimit+0xe8>)
 80050be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c2:	f7fb fd29 	bl	8000b18 <__aeabi_dcmpgt>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d004      	beq.n	80050d6 <lowlayer_goToSoftLimit+0x56>
		pulse[1] = pulse_scan[1];
 80050cc:	2305      	movs	r3, #5
 80050ce:	727b      	strb	r3, [r7, #9]
		check++;
 80050d0:	7bfb      	ldrb	r3, [r7, #15]
 80050d2:	3301      	adds	r3, #1
 80050d4:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->D3 < LIM_MIN_J2) {
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 80050dc:	f04f 0200 	mov.w	r2, #0
 80050e0:	f04f 0300 	mov.w	r3, #0
 80050e4:	f7fb fcfa 	bl	8000adc <__aeabi_dcmplt>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d004      	beq.n	80050f8 <lowlayer_goToSoftLimit+0x78>
		pulse[2] = pulse_scan[2];
 80050ee:	2305      	movs	r3, #5
 80050f0:	72bb      	strb	r3, [r7, #10]
		check++;
 80050f2:	7bfb      	ldrb	r3, [r7, #15]
 80050f4:	3301      	adds	r3, #1
 80050f6:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->Theta4 > LIM_MAX_J3) {
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 80050fe:	a31c      	add	r3, pc, #112	; (adr r3, 8005170 <lowlayer_goToSoftLimit+0xf0>)
 8005100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005104:	f7fb fd08 	bl	8000b18 <__aeabi_dcmpgt>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d004      	beq.n	8005118 <lowlayer_goToSoftLimit+0x98>
		pulse[3] = pulse_scan[3];
 800510e:	230a      	movs	r3, #10
 8005110:	72fb      	strb	r3, [r7, #11]
		check++;
 8005112:	7bfb      	ldrb	r3, [r7, #15]
 8005114:	3301      	adds	r3, #1
 8005116:	73fb      	strb	r3, [r7, #15]
	}

	if (check > 0) {
 8005118:	7bfb      	ldrb	r3, [r7, #15]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d013      	beq.n	8005146 <lowlayer_goToSoftLimit+0xc6>
		lowlayer_writePulse(pulse[0], -pulse[1], pulse[2], -pulse[3]);
 800511e:	f997 0008 	ldrsb.w	r0, [r7, #8]
 8005122:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8005126:	b2db      	uxtb	r3, r3
 8005128:	425b      	negs	r3, r3
 800512a:	b2db      	uxtb	r3, r3
 800512c:	b259      	sxtb	r1, r3
 800512e:	f997 200a 	ldrsb.w	r2, [r7, #10]
 8005132:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005136:	b2db      	uxtb	r3, r3
 8005138:	425b      	negs	r3, r3
 800513a:	b2db      	uxtb	r3, r3
 800513c:	b25b      	sxtb	r3, r3
 800513e:	f000 fb4f 	bl	80057e0 <lowlayer_writePulse>
		return FALSE;
 8005142:	2300      	movs	r3, #0
 8005144:	e006      	b.n	8005154 <lowlayer_goToSoftLimit+0xd4>
	} else {
		lowlayer_writePulse(0, 0, 0, 0);
 8005146:	2300      	movs	r3, #0
 8005148:	2200      	movs	r2, #0
 800514a:	2100      	movs	r1, #0
 800514c:	2000      	movs	r0, #0
 800514e:	f000 fb47 	bl	80057e0 <lowlayer_writePulse>
		return TRUE;
 8005152:	2301      	movs	r3, #1
	}
}
 8005154:	4618      	mov	r0, r3
 8005156:	3710      	adds	r7, #16
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	f3af 8000 	nop.w
 8005160:	daaaaaab 	.word	0xdaaaaaab
 8005164:	bff7bc89 	.word	0xbff7bc89
 8005168:	88000000 	.word	0x88000000
 800516c:	4002d97c 	.word	0x4002d97c
 8005170:	daaaaaab 	.word	0xdaaaaaab
 8005174:	4007bc89 	.word	0x4007bc89

08005178 <lowlayer_readTruePosition>:

void	lowlayer_readTruePosition(SCARA_PositionTypeDef *true) {
 8005178:	b590      	push	{r4, r7, lr}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
	lowlayer_updateEncoder();
 8005180:	f000 fc78 	bl	8005a74 <lowlayer_updateEncoder>
	true->Theta1 = HARD_LIM0_NEG
			+ DIR_ENCODER_0*(position_encoder[0] - offset_encoder[0])*2.0*PI/ENCODER_J0; // Servo Motor
 8005184:	4b62      	ldr	r3, [pc, #392]	; (8005310 <lowlayer_readTruePosition+0x198>)
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	4b62      	ldr	r3, [pc, #392]	; (8005314 <lowlayer_readTruePosition+0x19c>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	ee07 3a90 	vmov	s15, r3
 8005192:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005196:	ee17 0a90 	vmov	r0, s15
 800519a:	f7fb f9d5 	bl	8000548 <__aeabi_f2d>
 800519e:	4602      	mov	r2, r0
 80051a0:	460b      	mov	r3, r1
 80051a2:	f7fb f873 	bl	800028c <__adddf3>
 80051a6:	4603      	mov	r3, r0
 80051a8:	460c      	mov	r4, r1
 80051aa:	4618      	mov	r0, r3
 80051ac:	4621      	mov	r1, r4
 80051ae:	a34c      	add	r3, pc, #304	; (adr r3, 80052e0 <lowlayer_readTruePosition+0x168>)
 80051b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b4:	f7fb fa20 	bl	80005f8 <__aeabi_dmul>
 80051b8:	4603      	mov	r3, r0
 80051ba:	460c      	mov	r4, r1
 80051bc:	4618      	mov	r0, r3
 80051be:	4621      	mov	r1, r4
 80051c0:	a349      	add	r3, pc, #292	; (adr r3, 80052e8 <lowlayer_readTruePosition+0x170>)
 80051c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c6:	f7fb fb41 	bl	800084c <__aeabi_ddiv>
 80051ca:	4603      	mov	r3, r0
 80051cc:	460c      	mov	r4, r1
 80051ce:	4618      	mov	r0, r3
 80051d0:	4621      	mov	r1, r4
 80051d2:	a347      	add	r3, pc, #284	; (adr r3, 80052f0 <lowlayer_readTruePosition+0x178>)
 80051d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d8:	f7fb f856 	bl	8000288 <__aeabi_dsub>
 80051dc:	4603      	mov	r3, r0
 80051de:	460c      	mov	r4, r1
	true->Theta1 = HARD_LIM0_NEG
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

	true->Theta2 = HARD_LIM1_POS
			+ DIR_ENCODER_1*(position_encoder[1] - offset_encoder[1])*2.0*PI/ENCODER_J1; // Servo Motor
 80051e6:	4b4a      	ldr	r3, [pc, #296]	; (8005310 <lowlayer_readTruePosition+0x198>)
 80051e8:	685a      	ldr	r2, [r3, #4]
 80051ea:	4b4a      	ldr	r3, [pc, #296]	; (8005314 <lowlayer_readTruePosition+0x19c>)
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	ee07 3a90 	vmov	s15, r3
 80051f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051f8:	ee17 0a90 	vmov	r0, s15
 80051fc:	f7fb f9a4 	bl	8000548 <__aeabi_f2d>
 8005200:	4602      	mov	r2, r0
 8005202:	460b      	mov	r3, r1
 8005204:	f7fb f842 	bl	800028c <__adddf3>
 8005208:	4603      	mov	r3, r0
 800520a:	460c      	mov	r4, r1
 800520c:	4618      	mov	r0, r3
 800520e:	4621      	mov	r1, r4
 8005210:	a333      	add	r3, pc, #204	; (adr r3, 80052e0 <lowlayer_readTruePosition+0x168>)
 8005212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005216:	f7fb f9ef 	bl	80005f8 <__aeabi_dmul>
 800521a:	4603      	mov	r3, r0
 800521c:	460c      	mov	r4, r1
 800521e:	4618      	mov	r0, r3
 8005220:	4621      	mov	r1, r4
 8005222:	f04f 0200 	mov.w	r2, #0
 8005226:	4b3c      	ldr	r3, [pc, #240]	; (8005318 <lowlayer_readTruePosition+0x1a0>)
 8005228:	f7fb fb10 	bl	800084c <__aeabi_ddiv>
 800522c:	4603      	mov	r3, r0
 800522e:	460c      	mov	r4, r1
 8005230:	4618      	mov	r0, r3
 8005232:	4621      	mov	r1, r4
 8005234:	a330      	add	r3, pc, #192	; (adr r3, 80052f8 <lowlayer_readTruePosition+0x180>)
 8005236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523a:	f7fb f827 	bl	800028c <__adddf3>
 800523e:	4603      	mov	r3, r0
 8005240:	460c      	mov	r4, r1
	true->Theta2 = HARD_LIM1_POS
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70

	true->D3	 = HARD_LIM2_NEG
			+ DIR_ENCODER_2*(position_encoder[2] - offset_encoder[2])/ENCODER_J2; // Servo Motor
 8005248:	4b31      	ldr	r3, [pc, #196]	; (8005310 <lowlayer_readTruePosition+0x198>)
 800524a:	689a      	ldr	r2, [r3, #8]
 800524c:	4b31      	ldr	r3, [pc, #196]	; (8005314 <lowlayer_readTruePosition+0x19c>)
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	ee07 3a90 	vmov	s15, r3
 8005256:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800525a:	eeb1 7a67 	vneg.f32	s14, s15
 800525e:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800531c <lowlayer_readTruePosition+0x1a4>
 8005262:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005266:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8005320 <lowlayer_readTruePosition+0x1a8>
 800526a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800526e:	ee17 0a90 	vmov	r0, s15
 8005272:	f7fb f969 	bl	8000548 <__aeabi_f2d>
 8005276:	4603      	mov	r3, r0
 8005278:	460c      	mov	r4, r1
	true->D3	 = HARD_LIM2_NEG
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78

	true->Theta4 = HARD_LIM3_POS
			+ (pulse_accumulate[3] - offset_stepper)*2.0*PI/GEAR_J3; // Stepper Motor
 8005280:	4b28      	ldr	r3, [pc, #160]	; (8005324 <lowlayer_readTruePosition+0x1ac>)
 8005282:	68da      	ldr	r2, [r3, #12]
 8005284:	4b28      	ldr	r3, [pc, #160]	; (8005328 <lowlayer_readTruePosition+0x1b0>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	4618      	mov	r0, r3
 800528c:	f7fb f94a 	bl	8000524 <__aeabi_i2d>
 8005290:	4602      	mov	r2, r0
 8005292:	460b      	mov	r3, r1
 8005294:	f7fa fffa 	bl	800028c <__adddf3>
 8005298:	4603      	mov	r3, r0
 800529a:	460c      	mov	r4, r1
 800529c:	4618      	mov	r0, r3
 800529e:	4621      	mov	r1, r4
 80052a0:	a30f      	add	r3, pc, #60	; (adr r3, 80052e0 <lowlayer_readTruePosition+0x168>)
 80052a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a6:	f7fb f9a7 	bl	80005f8 <__aeabi_dmul>
 80052aa:	4603      	mov	r3, r0
 80052ac:	460c      	mov	r4, r1
 80052ae:	4618      	mov	r0, r3
 80052b0:	4621      	mov	r1, r4
 80052b2:	a313      	add	r3, pc, #76	; (adr r3, 8005300 <lowlayer_readTruePosition+0x188>)
 80052b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b8:	f7fb fac8 	bl	800084c <__aeabi_ddiv>
 80052bc:	4603      	mov	r3, r0
 80052be:	460c      	mov	r4, r1
 80052c0:	4618      	mov	r0, r3
 80052c2:	4621      	mov	r1, r4
 80052c4:	a310      	add	r3, pc, #64	; (adr r3, 8005308 <lowlayer_readTruePosition+0x190>)
 80052c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ca:	f7fa ffdf 	bl	800028c <__adddf3>
 80052ce:	4603      	mov	r3, r0
 80052d0:	460c      	mov	r4, r1
	true->Theta4 = HARD_LIM3_POS
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
}
 80052d8:	bf00      	nop
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd90      	pop	{r4, r7, pc}
 80052e0:	60000000 	.word	0x60000000
 80052e4:	400921fb 	.word	0x400921fb
 80052e8:	00000000 	.word	0x00000000
 80052ec:	40f38800 	.word	0x40f38800
 80052f0:	40000000 	.word	0x40000000
 80052f4:	3ff9f17a 	.word	0x3ff9f17a
 80052f8:	80000000 	.word	0x80000000
 80052fc:	40039716 	.word	0x40039716
 8005300:	a0000000 	.word	0xa0000000
 8005304:	40d3bca1 	.word	0x40d3bca1
 8005308:	a0000000 	.word	0xa0000000
 800530c:	4008330d 	.word	0x4008330d
 8005310:	2000c52c 	.word	0x2000c52c
 8005314:	2000c570 	.word	0x2000c570
 8005318:	40ff4000 	.word	0x40ff4000
 800531c:	4426aaab 	.word	0x4426aaab
 8005320:	400f1aa0 	.word	0x400f1aa0
 8005324:	2000c518 	.word	0x2000c518
 8005328:	2000c54c 	.word	0x2000c54c
 800532c:	00000000 	.word	0x00000000

08005330 <lowlayer_readSetPosition>:

void	lowlayer_readSetPosition(SCARA_PositionTypeDef *setpoint) {
 8005330:	b5b0      	push	{r4, r5, r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
	setpoint->Theta1 = offset_setpoint[0] + pulse_accumulate[0]*2.0*PI/GEAR_J0;
 8005338:	4b53      	ldr	r3, [pc, #332]	; (8005488 <lowlayer_readSetPosition+0x158>)
 800533a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800533e:	4b53      	ldr	r3, [pc, #332]	; (800548c <lowlayer_readSetPosition+0x15c>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4618      	mov	r0, r3
 8005344:	f7fb f8ee 	bl	8000524 <__aeabi_i2d>
 8005348:	4602      	mov	r2, r0
 800534a:	460b      	mov	r3, r1
 800534c:	f7fa ff9e 	bl	800028c <__adddf3>
 8005350:	4602      	mov	r2, r0
 8005352:	460b      	mov	r3, r1
 8005354:	4610      	mov	r0, r2
 8005356:	4619      	mov	r1, r3
 8005358:	a345      	add	r3, pc, #276	; (adr r3, 8005470 <lowlayer_readSetPosition+0x140>)
 800535a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800535e:	f7fb f94b 	bl	80005f8 <__aeabi_dmul>
 8005362:	4602      	mov	r2, r0
 8005364:	460b      	mov	r3, r1
 8005366:	4610      	mov	r0, r2
 8005368:	4619      	mov	r1, r3
 800536a:	a343      	add	r3, pc, #268	; (adr r3, 8005478 <lowlayer_readSetPosition+0x148>)
 800536c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005370:	f7fb fa6c 	bl	800084c <__aeabi_ddiv>
 8005374:	4602      	mov	r2, r0
 8005376:	460b      	mov	r3, r1
 8005378:	4620      	mov	r0, r4
 800537a:	4629      	mov	r1, r5
 800537c:	f7fa ff86 	bl	800028c <__adddf3>
 8005380:	4603      	mov	r3, r0
 8005382:	460c      	mov	r4, r1
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

	setpoint->Theta2 = offset_setpoint[1] + pulse_accumulate[1]*2.0*PI/GEAR_J1;
 800538a:	4b3f      	ldr	r3, [pc, #252]	; (8005488 <lowlayer_readSetPosition+0x158>)
 800538c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8005390:	4b3e      	ldr	r3, [pc, #248]	; (800548c <lowlayer_readSetPosition+0x15c>)
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	4618      	mov	r0, r3
 8005396:	f7fb f8c5 	bl	8000524 <__aeabi_i2d>
 800539a:	4602      	mov	r2, r0
 800539c:	460b      	mov	r3, r1
 800539e:	f7fa ff75 	bl	800028c <__adddf3>
 80053a2:	4602      	mov	r2, r0
 80053a4:	460b      	mov	r3, r1
 80053a6:	4610      	mov	r0, r2
 80053a8:	4619      	mov	r1, r3
 80053aa:	a331      	add	r3, pc, #196	; (adr r3, 8005470 <lowlayer_readSetPosition+0x140>)
 80053ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b0:	f7fb f922 	bl	80005f8 <__aeabi_dmul>
 80053b4:	4602      	mov	r2, r0
 80053b6:	460b      	mov	r3, r1
 80053b8:	4610      	mov	r0, r2
 80053ba:	4619      	mov	r1, r3
 80053bc:	f04f 0200 	mov.w	r2, #0
 80053c0:	4b33      	ldr	r3, [pc, #204]	; (8005490 <lowlayer_readSetPosition+0x160>)
 80053c2:	f7fb fa43 	bl	800084c <__aeabi_ddiv>
 80053c6:	4602      	mov	r2, r0
 80053c8:	460b      	mov	r3, r1
 80053ca:	4620      	mov	r0, r4
 80053cc:	4629      	mov	r1, r5
 80053ce:	f7fa ff5d 	bl	800028c <__adddf3>
 80053d2:	4603      	mov	r3, r0
 80053d4:	460c      	mov	r4, r1
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70

	setpoint->D3	 = offset_setpoint[2] + pulse_accumulate[2]/GEAR_J2;
 80053dc:	4b2a      	ldr	r3, [pc, #168]	; (8005488 <lowlayer_readSetPosition+0x158>)
 80053de:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80053e2:	4b2a      	ldr	r3, [pc, #168]	; (800548c <lowlayer_readSetPosition+0x15c>)
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	ee07 3a90 	vmov	s15, r3
 80053ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053ee:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8005494 <lowlayer_readSetPosition+0x164>
 80053f2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80053f6:	ee16 0a90 	vmov	r0, s13
 80053fa:	f7fb f8a5 	bl	8000548 <__aeabi_f2d>
 80053fe:	4602      	mov	r2, r0
 8005400:	460b      	mov	r3, r1
 8005402:	4620      	mov	r0, r4
 8005404:	4629      	mov	r1, r5
 8005406:	f7fa ff41 	bl	800028c <__adddf3>
 800540a:	4603      	mov	r3, r0
 800540c:	460c      	mov	r4, r1
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78

	setpoint->Theta4 = offset_setpoint[3] + pulse_accumulate[3]*2.0*PI/GEAR_J3;
 8005414:	4b1c      	ldr	r3, [pc, #112]	; (8005488 <lowlayer_readSetPosition+0x158>)
 8005416:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800541a:	4b1c      	ldr	r3, [pc, #112]	; (800548c <lowlayer_readSetPosition+0x15c>)
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	4618      	mov	r0, r3
 8005420:	f7fb f880 	bl	8000524 <__aeabi_i2d>
 8005424:	4602      	mov	r2, r0
 8005426:	460b      	mov	r3, r1
 8005428:	f7fa ff30 	bl	800028c <__adddf3>
 800542c:	4602      	mov	r2, r0
 800542e:	460b      	mov	r3, r1
 8005430:	4610      	mov	r0, r2
 8005432:	4619      	mov	r1, r3
 8005434:	a30e      	add	r3, pc, #56	; (adr r3, 8005470 <lowlayer_readSetPosition+0x140>)
 8005436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543a:	f7fb f8dd 	bl	80005f8 <__aeabi_dmul>
 800543e:	4602      	mov	r2, r0
 8005440:	460b      	mov	r3, r1
 8005442:	4610      	mov	r0, r2
 8005444:	4619      	mov	r1, r3
 8005446:	a30e      	add	r3, pc, #56	; (adr r3, 8005480 <lowlayer_readSetPosition+0x150>)
 8005448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800544c:	f7fb f9fe 	bl	800084c <__aeabi_ddiv>
 8005450:	4602      	mov	r2, r0
 8005452:	460b      	mov	r3, r1
 8005454:	4620      	mov	r0, r4
 8005456:	4629      	mov	r1, r5
 8005458:	f7fa ff18 	bl	800028c <__adddf3>
 800545c:	4603      	mov	r3, r0
 800545e:	460c      	mov	r4, r1
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
}
 8005466:	bf00      	nop
 8005468:	3708      	adds	r7, #8
 800546a:	46bd      	mov	sp, r7
 800546c:	bdb0      	pop	{r4, r5, r7, pc}
 800546e:	bf00      	nop
 8005470:	60000000 	.word	0x60000000
 8005474:	400921fb 	.word	0x400921fb
 8005478:	00000000 	.word	0x00000000
 800547c:	40d38800 	.word	0x40d38800
 8005480:	a0000000 	.word	0xa0000000
 8005484:	40d3bca1 	.word	0x40d3bca1
 8005488:	2000c550 	.word	0x2000c550
 800548c:	2000c518 	.word	0x2000c518
 8005490:	40df4000 	.word	0x40df4000
 8005494:	42c80000 	.word	0x42c80000

08005498 <lowlayer_computeAndWritePulse>:

uint8_t	lowlayer_computeAndWritePulse(SCARA_PositionTypeDef current, SCARA_PositionTypeDef next) {
 8005498:	b084      	sub	sp, #16
 800549a:	b590      	push	{r4, r7, lr}
 800549c:	b093      	sub	sp, #76	; 0x4c
 800549e:	af00      	add	r7, sp, #0
 80054a0:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80054a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t	current_var0, current_var1, current_var2, current_var3;
	uint32_t	next_var0, next_var1, next_var2, next_var3;
	int64_t		delta_var0, delta_var1, delta_var2, delta_var3;
	uint8_t 	result;

	current_var0	= round((current.Theta1 - LIM_MIN_J0) * GEAR_J0/(2*PI));
 80054a8:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80054ac:	a3c4      	add	r3, pc, #784	; (adr r3, 80057c0 <lowlayer_computeAndWritePulse+0x328>)
 80054ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b2:	f7fa feeb 	bl	800028c <__adddf3>
 80054b6:	4603      	mov	r3, r0
 80054b8:	460c      	mov	r4, r1
 80054ba:	4618      	mov	r0, r3
 80054bc:	4621      	mov	r1, r4
 80054be:	a3c2      	add	r3, pc, #776	; (adr r3, 80057c8 <lowlayer_computeAndWritePulse+0x330>)
 80054c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c4:	f7fb f898 	bl	80005f8 <__aeabi_dmul>
 80054c8:	4603      	mov	r3, r0
 80054ca:	460c      	mov	r4, r1
 80054cc:	4618      	mov	r0, r3
 80054ce:	4621      	mov	r1, r4
 80054d0:	a3b5      	add	r3, pc, #724	; (adr r3, 80057a8 <lowlayer_computeAndWritePulse+0x310>)
 80054d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d6:	f7fb f9b9 	bl	800084c <__aeabi_ddiv>
 80054da:	4603      	mov	r3, r0
 80054dc:	460c      	mov	r4, r1
 80054de:	ec44 3b17 	vmov	d7, r3, r4
 80054e2:	eeb0 0a47 	vmov.f32	s0, s14
 80054e6:	eef0 0a67 	vmov.f32	s1, s15
 80054ea:	f013 fa99 	bl	8018a20 <round>
 80054ee:	ec54 3b10 	vmov	r3, r4, d0
 80054f2:	4618      	mov	r0, r3
 80054f4:	4621      	mov	r1, r4
 80054f6:	f7fb fb57 	bl	8000ba8 <__aeabi_d2uiz>
 80054fa:	4603      	mov	r3, r0
 80054fc:	647b      	str	r3, [r7, #68]	; 0x44
	current_var1 	= round((current.Theta2 - LIM_MIN_J1) * GEAR_J1/(2*PI));
 80054fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005502:	a3b3      	add	r3, pc, #716	; (adr r3, 80057d0 <lowlayer_computeAndWritePulse+0x338>)
 8005504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005508:	f7fa fec0 	bl	800028c <__adddf3>
 800550c:	4603      	mov	r3, r0
 800550e:	460c      	mov	r4, r1
 8005510:	4618      	mov	r0, r3
 8005512:	4621      	mov	r1, r4
 8005514:	f04f 0200 	mov.w	r2, #0
 8005518:	4baf      	ldr	r3, [pc, #700]	; (80057d8 <lowlayer_computeAndWritePulse+0x340>)
 800551a:	f7fb f86d 	bl	80005f8 <__aeabi_dmul>
 800551e:	4603      	mov	r3, r0
 8005520:	460c      	mov	r4, r1
 8005522:	4618      	mov	r0, r3
 8005524:	4621      	mov	r1, r4
 8005526:	a3a0      	add	r3, pc, #640	; (adr r3, 80057a8 <lowlayer_computeAndWritePulse+0x310>)
 8005528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552c:	f7fb f98e 	bl	800084c <__aeabi_ddiv>
 8005530:	4603      	mov	r3, r0
 8005532:	460c      	mov	r4, r1
 8005534:	ec44 3b17 	vmov	d7, r3, r4
 8005538:	eeb0 0a47 	vmov.f32	s0, s14
 800553c:	eef0 0a67 	vmov.f32	s1, s15
 8005540:	f013 fa6e 	bl	8018a20 <round>
 8005544:	ec54 3b10 	vmov	r3, r4, d0
 8005548:	4618      	mov	r0, r3
 800554a:	4621      	mov	r1, r4
 800554c:	f7fb fb2c 	bl	8000ba8 <__aeabi_d2uiz>
 8005550:	4603      	mov	r3, r0
 8005552:	643b      	str	r3, [r7, #64]	; 0x40
	current_var2 	= round((current.D3 - LIM_MIN_J2) * GEAR_J2);
 8005554:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8005558:	f04f 0200 	mov.w	r2, #0
 800555c:	4b9f      	ldr	r3, [pc, #636]	; (80057dc <lowlayer_computeAndWritePulse+0x344>)
 800555e:	f7fb f84b 	bl	80005f8 <__aeabi_dmul>
 8005562:	4603      	mov	r3, r0
 8005564:	460c      	mov	r4, r1
 8005566:	ec44 3b17 	vmov	d7, r3, r4
 800556a:	eeb0 0a47 	vmov.f32	s0, s14
 800556e:	eef0 0a67 	vmov.f32	s1, s15
 8005572:	f013 fa55 	bl	8018a20 <round>
 8005576:	ec54 3b10 	vmov	r3, r4, d0
 800557a:	4618      	mov	r0, r3
 800557c:	4621      	mov	r1, r4
 800557e:	f7fb fb13 	bl	8000ba8 <__aeabi_d2uiz>
 8005582:	4603      	mov	r3, r0
 8005584:	63fb      	str	r3, [r7, #60]	; 0x3c
	current_var3 	= round((current.Theta4 - LIM_MIN_J3) * GEAR_J3/(2*PI));
 8005586:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800558a:	a389      	add	r3, pc, #548	; (adr r3, 80057b0 <lowlayer_computeAndWritePulse+0x318>)
 800558c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005590:	f7fa fe7c 	bl	800028c <__adddf3>
 8005594:	4603      	mov	r3, r0
 8005596:	460c      	mov	r4, r1
 8005598:	4618      	mov	r0, r3
 800559a:	4621      	mov	r1, r4
 800559c:	a386      	add	r3, pc, #536	; (adr r3, 80057b8 <lowlayer_computeAndWritePulse+0x320>)
 800559e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a2:	f7fb f829 	bl	80005f8 <__aeabi_dmul>
 80055a6:	4603      	mov	r3, r0
 80055a8:	460c      	mov	r4, r1
 80055aa:	4618      	mov	r0, r3
 80055ac:	4621      	mov	r1, r4
 80055ae:	a37e      	add	r3, pc, #504	; (adr r3, 80057a8 <lowlayer_computeAndWritePulse+0x310>)
 80055b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b4:	f7fb f94a 	bl	800084c <__aeabi_ddiv>
 80055b8:	4603      	mov	r3, r0
 80055ba:	460c      	mov	r4, r1
 80055bc:	ec44 3b17 	vmov	d7, r3, r4
 80055c0:	eeb0 0a47 	vmov.f32	s0, s14
 80055c4:	eef0 0a67 	vmov.f32	s1, s15
 80055c8:	f013 fa2a 	bl	8018a20 <round>
 80055cc:	ec54 3b10 	vmov	r3, r4, d0
 80055d0:	4618      	mov	r0, r3
 80055d2:	4621      	mov	r1, r4
 80055d4:	f7fb fae8 	bl	8000ba8 <__aeabi_d2uiz>
 80055d8:	4603      	mov	r3, r0
 80055da:	63bb      	str	r3, [r7, #56]	; 0x38
	next_var0 		= round((next.Theta1 - LIM_MIN_J0) * GEAR_J0/(2*PI));
 80055dc:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 80055e0:	a377      	add	r3, pc, #476	; (adr r3, 80057c0 <lowlayer_computeAndWritePulse+0x328>)
 80055e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e6:	f7fa fe51 	bl	800028c <__adddf3>
 80055ea:	4603      	mov	r3, r0
 80055ec:	460c      	mov	r4, r1
 80055ee:	4618      	mov	r0, r3
 80055f0:	4621      	mov	r1, r4
 80055f2:	a375      	add	r3, pc, #468	; (adr r3, 80057c8 <lowlayer_computeAndWritePulse+0x330>)
 80055f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f8:	f7fa fffe 	bl	80005f8 <__aeabi_dmul>
 80055fc:	4603      	mov	r3, r0
 80055fe:	460c      	mov	r4, r1
 8005600:	4618      	mov	r0, r3
 8005602:	4621      	mov	r1, r4
 8005604:	a368      	add	r3, pc, #416	; (adr r3, 80057a8 <lowlayer_computeAndWritePulse+0x310>)
 8005606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800560a:	f7fb f91f 	bl	800084c <__aeabi_ddiv>
 800560e:	4603      	mov	r3, r0
 8005610:	460c      	mov	r4, r1
 8005612:	ec44 3b17 	vmov	d7, r3, r4
 8005616:	eeb0 0a47 	vmov.f32	s0, s14
 800561a:	eef0 0a67 	vmov.f32	s1, s15
 800561e:	f013 f9ff 	bl	8018a20 <round>
 8005622:	ec54 3b10 	vmov	r3, r4, d0
 8005626:	4618      	mov	r0, r3
 8005628:	4621      	mov	r1, r4
 800562a:	f7fb fabd 	bl	8000ba8 <__aeabi_d2uiz>
 800562e:	4603      	mov	r3, r0
 8005630:	637b      	str	r3, [r7, #52]	; 0x34
	next_var1 		= round((next.Theta2 - LIM_MIN_J1) * GEAR_J1/(2*PI));
 8005632:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8005636:	a366      	add	r3, pc, #408	; (adr r3, 80057d0 <lowlayer_computeAndWritePulse+0x338>)
 8005638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563c:	f7fa fe26 	bl	800028c <__adddf3>
 8005640:	4603      	mov	r3, r0
 8005642:	460c      	mov	r4, r1
 8005644:	4618      	mov	r0, r3
 8005646:	4621      	mov	r1, r4
 8005648:	f04f 0200 	mov.w	r2, #0
 800564c:	4b62      	ldr	r3, [pc, #392]	; (80057d8 <lowlayer_computeAndWritePulse+0x340>)
 800564e:	f7fa ffd3 	bl	80005f8 <__aeabi_dmul>
 8005652:	4603      	mov	r3, r0
 8005654:	460c      	mov	r4, r1
 8005656:	4618      	mov	r0, r3
 8005658:	4621      	mov	r1, r4
 800565a:	a353      	add	r3, pc, #332	; (adr r3, 80057a8 <lowlayer_computeAndWritePulse+0x310>)
 800565c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005660:	f7fb f8f4 	bl	800084c <__aeabi_ddiv>
 8005664:	4603      	mov	r3, r0
 8005666:	460c      	mov	r4, r1
 8005668:	ec44 3b17 	vmov	d7, r3, r4
 800566c:	eeb0 0a47 	vmov.f32	s0, s14
 8005670:	eef0 0a67 	vmov.f32	s1, s15
 8005674:	f013 f9d4 	bl	8018a20 <round>
 8005678:	ec54 3b10 	vmov	r3, r4, d0
 800567c:	4618      	mov	r0, r3
 800567e:	4621      	mov	r1, r4
 8005680:	f7fb fa92 	bl	8000ba8 <__aeabi_d2uiz>
 8005684:	4603      	mov	r3, r0
 8005686:	633b      	str	r3, [r7, #48]	; 0x30
	next_var2 		= round((next.D3 - LIM_MIN_J2) * GEAR_J2);
 8005688:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800568c:	f04f 0200 	mov.w	r2, #0
 8005690:	4b52      	ldr	r3, [pc, #328]	; (80057dc <lowlayer_computeAndWritePulse+0x344>)
 8005692:	f7fa ffb1 	bl	80005f8 <__aeabi_dmul>
 8005696:	4603      	mov	r3, r0
 8005698:	460c      	mov	r4, r1
 800569a:	ec44 3b17 	vmov	d7, r3, r4
 800569e:	eeb0 0a47 	vmov.f32	s0, s14
 80056a2:	eef0 0a67 	vmov.f32	s1, s15
 80056a6:	f013 f9bb 	bl	8018a20 <round>
 80056aa:	ec54 3b10 	vmov	r3, r4, d0
 80056ae:	4618      	mov	r0, r3
 80056b0:	4621      	mov	r1, r4
 80056b2:	f7fb fa79 	bl	8000ba8 <__aeabi_d2uiz>
 80056b6:	4603      	mov	r3, r0
 80056b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	next_var3 		= round((next.Theta4 - LIM_MIN_J3) * GEAR_J3/(2*PI));
 80056ba:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80056be:	a33c      	add	r3, pc, #240	; (adr r3, 80057b0 <lowlayer_computeAndWritePulse+0x318>)
 80056c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c4:	f7fa fde2 	bl	800028c <__adddf3>
 80056c8:	4603      	mov	r3, r0
 80056ca:	460c      	mov	r4, r1
 80056cc:	4618      	mov	r0, r3
 80056ce:	4621      	mov	r1, r4
 80056d0:	a339      	add	r3, pc, #228	; (adr r3, 80057b8 <lowlayer_computeAndWritePulse+0x320>)
 80056d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d6:	f7fa ff8f 	bl	80005f8 <__aeabi_dmul>
 80056da:	4603      	mov	r3, r0
 80056dc:	460c      	mov	r4, r1
 80056de:	4618      	mov	r0, r3
 80056e0:	4621      	mov	r1, r4
 80056e2:	a331      	add	r3, pc, #196	; (adr r3, 80057a8 <lowlayer_computeAndWritePulse+0x310>)
 80056e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e8:	f7fb f8b0 	bl	800084c <__aeabi_ddiv>
 80056ec:	4603      	mov	r3, r0
 80056ee:	460c      	mov	r4, r1
 80056f0:	ec44 3b17 	vmov	d7, r3, r4
 80056f4:	eeb0 0a47 	vmov.f32	s0, s14
 80056f8:	eef0 0a67 	vmov.f32	s1, s15
 80056fc:	f013 f990 	bl	8018a20 <round>
 8005700:	ec54 3b10 	vmov	r3, r4, d0
 8005704:	4618      	mov	r0, r3
 8005706:	4621      	mov	r1, r4
 8005708:	f7fb fa4e 	bl	8000ba8 <__aeabi_d2uiz>
 800570c:	4603      	mov	r3, r0
 800570e:	62bb      	str	r3, [r7, #40]	; 0x28

	delta_var0 = next_var0 - current_var0;
 8005710:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005712:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	f04f 0400 	mov.w	r4, #0
 800571a:	e9c7 3408 	strd	r3, r4, [r7, #32]
	delta_var1 = next_var1 - current_var1;
 800571e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005722:	1ad3      	subs	r3, r2, r3
 8005724:	f04f 0400 	mov.w	r4, #0
 8005728:	e9c7 3406 	strd	r3, r4, [r7, #24]
	delta_var2 = next_var2 - current_var2;
 800572c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800572e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	f04f 0400 	mov.w	r4, #0
 8005736:	e9c7 3404 	strd	r3, r4, [r7, #16]
	delta_var3 = next_var3 - current_var3;
 800573a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800573c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	f04f 0400 	mov.w	r4, #0
 8005744:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if (abs(delta_var0) > 127
 8005748:	6a3b      	ldr	r3, [r7, #32]
 800574a:	2b00      	cmp	r3, #0
 800574c:	bfb8      	it	lt
 800574e:	425b      	neglt	r3, r3
 8005750:	2b7f      	cmp	r3, #127	; 0x7f
 8005752:	dc11      	bgt.n	8005778 <lowlayer_computeAndWritePulse+0x2e0>
		|| abs(delta_var1) > 127
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	2b00      	cmp	r3, #0
 8005758:	bfb8      	it	lt
 800575a:	425b      	neglt	r3, r3
 800575c:	2b7f      	cmp	r3, #127	; 0x7f
 800575e:	dc0b      	bgt.n	8005778 <lowlayer_computeAndWritePulse+0x2e0>
		|| abs(delta_var2) > 127
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	2b00      	cmp	r3, #0
 8005764:	bfb8      	it	lt
 8005766:	425b      	neglt	r3, r3
 8005768:	2b7f      	cmp	r3, #127	; 0x7f
 800576a:	dc05      	bgt.n	8005778 <lowlayer_computeAndWritePulse+0x2e0>
		|| abs(delta_var3) > 127) {
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	2b00      	cmp	r3, #0
 8005770:	bfb8      	it	lt
 8005772:	425b      	neglt	r3, r3
 8005774:	2b7f      	cmp	r3, #127	; 0x7f
 8005776:	dd01      	ble.n	800577c <lowlayer_computeAndWritePulse+0x2e4>
		return FALSE;
 8005778:	2300      	movs	r3, #0
 800577a:	e00c      	b.n	8005796 <lowlayer_computeAndWritePulse+0x2fe>
	} // Can't convert to int8_t , over range

	result = lowlayer_writePulse((int8_t)delta_var0,
 800577c:	f997 0020 	ldrsb.w	r0, [r7, #32]
 8005780:	f997 1018 	ldrsb.w	r1, [r7, #24]
 8005784:	f997 2010 	ldrsb.w	r2, [r7, #16]
 8005788:	f997 3008 	ldrsb.w	r3, [r7, #8]
 800578c:	f000 f828 	bl	80057e0 <lowlayer_writePulse>
 8005790:	4603      	mov	r3, r0
 8005792:	71fb      	strb	r3, [r7, #7]
								 (int8_t)delta_var1,
								 (int8_t)delta_var2,
								 (int8_t)delta_var3);

	return result;
 8005794:	79fb      	ldrb	r3, [r7, #7]
}
 8005796:	4618      	mov	r0, r3
 8005798:	374c      	adds	r7, #76	; 0x4c
 800579a:	46bd      	mov	sp, r7
 800579c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80057a0:	b004      	add	sp, #16
 80057a2:	4770      	bx	lr
 80057a4:	f3af 8000 	nop.w
 80057a8:	60000000 	.word	0x60000000
 80057ac:	401921fb 	.word	0x401921fb
 80057b0:	daaaaaab 	.word	0xdaaaaaab
 80057b4:	4007bc89 	.word	0x4007bc89
 80057b8:	a0000000 	.word	0xa0000000
 80057bc:	40d3bca1 	.word	0x40d3bca1
 80057c0:	daaaaaab 	.word	0xdaaaaaab
 80057c4:	3ff7bc89 	.word	0x3ff7bc89
 80057c8:	00000000 	.word	0x00000000
 80057cc:	40d38800 	.word	0x40d38800
 80057d0:	88000000 	.word	0x88000000
 80057d4:	4002d97c 	.word	0x4002d97c
 80057d8:	40df4000 	.word	0x40df4000
 80057dc:	40590000 	.word	0x40590000

080057e0 <lowlayer_writePulse>:


uint8_t	lowlayer_writePulse(int8_t pulse0, int8_t pulse1, int8_t pulse2, int8_t pulse3) {
 80057e0:	b590      	push	{r4, r7, lr}
 80057e2:	b087      	sub	sp, #28
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	4604      	mov	r4, r0
 80057e8:	4608      	mov	r0, r1
 80057ea:	4611      	mov	r1, r2
 80057ec:	461a      	mov	r2, r3
 80057ee:	4623      	mov	r3, r4
 80057f0:	71fb      	strb	r3, [r7, #7]
 80057f2:	4603      	mov	r3, r0
 80057f4:	71bb      	strb	r3, [r7, #6]
 80057f6:	460b      	mov	r3, r1
 80057f8:	717b      	strb	r3, [r7, #5]
 80057fa:	4613      	mov	r3, r2
 80057fc:	713b      	strb	r3, [r7, #4]
	uint8_t pulse0_combine, pulse1_combine, pulse2_combine, pulse3_combine;
	uint8_t pulse0_abs, pulse1_abs, pulse2_abs, pulse3_abs;

	// Var 0
	if (pulse0 < 0) {
 80057fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005802:	2b00      	cmp	r3, #0
 8005804:	da06      	bge.n	8005814 <lowlayer_writePulse+0x34>
		pulse0_abs = -pulse0;
 8005806:	79fb      	ldrb	r3, [r7, #7]
 8005808:	425b      	negs	r3, r3
 800580a:	74fb      	strb	r3, [r7, #19]
		pulse0_combine = -pulse0 | ((!DIR_J0) << 7); // Negative : Clockwise
 800580c:	79fb      	ldrb	r3, [r7, #7]
 800580e:	425b      	negs	r3, r3
 8005810:	75fb      	strb	r3, [r7, #23]
 8005812:	e006      	b.n	8005822 <lowlayer_writePulse+0x42>
	} else {
		pulse0_abs = pulse0;
 8005814:	79fb      	ldrb	r3, [r7, #7]
 8005816:	74fb      	strb	r3, [r7, #19]
		pulse0_combine = pulse0 | (DIR_J0 << 7); // Positive : Anti-Clockwise
 8005818:	79fb      	ldrb	r3, [r7, #7]
 800581a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800581e:	b25b      	sxtb	r3, r3
 8005820:	75fb      	strb	r3, [r7, #23]
	}
	// Var 1
	if (pulse1 < 0) {
 8005822:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005826:	2b00      	cmp	r3, #0
 8005828:	da06      	bge.n	8005838 <lowlayer_writePulse+0x58>
		pulse1_abs = -pulse1;
 800582a:	79bb      	ldrb	r3, [r7, #6]
 800582c:	425b      	negs	r3, r3
 800582e:	74bb      	strb	r3, [r7, #18]
		pulse1_combine = -pulse1 | ((!DIR_J1) << 7);
 8005830:	79bb      	ldrb	r3, [r7, #6]
 8005832:	425b      	negs	r3, r3
 8005834:	75bb      	strb	r3, [r7, #22]
 8005836:	e006      	b.n	8005846 <lowlayer_writePulse+0x66>
	} else {
		pulse1_abs = pulse1;
 8005838:	79bb      	ldrb	r3, [r7, #6]
 800583a:	74bb      	strb	r3, [r7, #18]
		pulse1_combine = pulse1 | (DIR_J1 << 7);
 800583c:	79bb      	ldrb	r3, [r7, #6]
 800583e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005842:	b25b      	sxtb	r3, r3
 8005844:	75bb      	strb	r3, [r7, #22]
	}
	// Var 2
	if (pulse2 < 0) {
 8005846:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800584a:	2b00      	cmp	r3, #0
 800584c:	da0b      	bge.n	8005866 <lowlayer_writePulse+0x86>
		pulse2_abs = -pulse2;
 800584e:	797b      	ldrb	r3, [r7, #5]
 8005850:	425b      	negs	r3, r3
 8005852:	747b      	strb	r3, [r7, #17]
		pulse2_combine = -pulse2 | ((!DIR_J2) << 7);
 8005854:	797b      	ldrb	r3, [r7, #5]
 8005856:	425b      	negs	r3, r3
 8005858:	b2db      	uxtb	r3, r3
 800585a:	b25b      	sxtb	r3, r3
 800585c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005860:	b25b      	sxtb	r3, r3
 8005862:	757b      	strb	r3, [r7, #21]
 8005864:	e003      	b.n	800586e <lowlayer_writePulse+0x8e>
	} else {
		pulse2_abs = pulse2;
 8005866:	797b      	ldrb	r3, [r7, #5]
 8005868:	747b      	strb	r3, [r7, #17]
		pulse2_combine = pulse2 | (DIR_J2 << 7);
 800586a:	797b      	ldrb	r3, [r7, #5]
 800586c:	757b      	strb	r3, [r7, #21]
	}
	// Var 3
	if (pulse3 < 0) {
 800586e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8005872:	2b00      	cmp	r3, #0
 8005874:	da06      	bge.n	8005884 <lowlayer_writePulse+0xa4>
		pulse3_abs = -pulse3;
 8005876:	793b      	ldrb	r3, [r7, #4]
 8005878:	425b      	negs	r3, r3
 800587a:	743b      	strb	r3, [r7, #16]
		pulse3_combine = -pulse3 | ((!DIR_J3) << 7);
 800587c:	793b      	ldrb	r3, [r7, #4]
 800587e:	425b      	negs	r3, r3
 8005880:	753b      	strb	r3, [r7, #20]
 8005882:	e006      	b.n	8005892 <lowlayer_writePulse+0xb2>
	} else {
		pulse3_abs = pulse3;
 8005884:	793b      	ldrb	r3, [r7, #4]
 8005886:	743b      	strb	r3, [r7, #16]
		pulse3_combine = pulse3 | (DIR_J3 << 7);
 8005888:	793b      	ldrb	r3, [r7, #4]
 800588a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800588e:	b25b      	sxtb	r3, r3
 8005890:	753b      	strb	r3, [r7, #20]
	}

	// Check limit
	if (pulse0_abs > LIM_PULSE_J0
 8005892:	7cfb      	ldrb	r3, [r7, #19]
 8005894:	2b4b      	cmp	r3, #75	; 0x4b
 8005896:	d808      	bhi.n	80058aa <lowlayer_writePulse+0xca>
		|| pulse1_abs > LIM_PULSE_J1
 8005898:	7cbb      	ldrb	r3, [r7, #18]
 800589a:	2b78      	cmp	r3, #120	; 0x78
 800589c:	d805      	bhi.n	80058aa <lowlayer_writePulse+0xca>
		|| pulse2_abs > LIM_PULSE_J2
 800589e:	7c7b      	ldrb	r3, [r7, #17]
 80058a0:	2b7d      	cmp	r3, #125	; 0x7d
 80058a2:	d802      	bhi.n	80058aa <lowlayer_writePulse+0xca>
		|| pulse3_abs > LIM_PULSE_J3) {
 80058a4:	7c3b      	ldrb	r3, [r7, #16]
 80058a6:	2b65      	cmp	r3, #101	; 0x65
 80058a8:	d901      	bls.n	80058ae <lowlayer_writePulse+0xce>
		return FALSE;
 80058aa:	2300      	movs	r3, #0
 80058ac:	e04b      	b.n	8005946 <lowlayer_writePulse+0x166>
//	if (pulse3_abs == 0) {
//		HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET); // Disable
//	} else {
//		HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
//	}
	HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
 80058ae:	2200      	movs	r2, #0
 80058b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80058b4:	4826      	ldr	r0, [pc, #152]	; (8005950 <lowlayer_writePulse+0x170>)
 80058b6:	f005 fce9 	bl	800b28c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PULSE_WRITE_GPIO_Port, PULSE_WRITE_Pin, GPIO_PIN_RESET);
 80058ba:	2200      	movs	r2, #0
 80058bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80058c0:	4824      	ldr	r0, [pc, #144]	; (8005954 <lowlayer_writePulse+0x174>)
 80058c2:	f005 fce3 	bl	800b28c <HAL_GPIO_WritePin>
	// Write to Module DDA
	FSMC_Write(ADDRESS_DDA_0, (uint32_t)pulse0_combine);
 80058c6:	7dfb      	ldrb	r3, [r7, #23]
 80058c8:	4619      	mov	r1, r3
 80058ca:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 80058ce:	f7fe fa79 	bl	8003dc4 <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_1, (uint32_t)pulse1_combine);
 80058d2:	7dbb      	ldrb	r3, [r7, #22]
 80058d4:	4619      	mov	r1, r3
 80058d6:	4820      	ldr	r0, [pc, #128]	; (8005958 <lowlayer_writePulse+0x178>)
 80058d8:	f7fe fa74 	bl	8003dc4 <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_2, (uint32_t)pulse2_combine);
 80058dc:	7d7b      	ldrb	r3, [r7, #21]
 80058de:	4619      	mov	r1, r3
 80058e0:	481e      	ldr	r0, [pc, #120]	; (800595c <lowlayer_writePulse+0x17c>)
 80058e2:	f7fe fa6f 	bl	8003dc4 <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_3, (uint32_t)pulse3_combine);
 80058e6:	7d3b      	ldrb	r3, [r7, #20]
 80058e8:	4619      	mov	r1, r3
 80058ea:	481d      	ldr	r0, [pc, #116]	; (8005960 <lowlayer_writePulse+0x180>)
 80058ec:	f7fe fa6a 	bl	8003dc4 <FSMC_Write>

	// Trigger
	uint8_t delay = 100;
 80058f0:	2364      	movs	r3, #100	; 0x64
 80058f2:	73fb      	strb	r3, [r7, #15]
	
	 while (delay--);
 80058f4:	bf00      	nop
 80058f6:	7bfb      	ldrb	r3, [r7, #15]
 80058f8:	1e5a      	subs	r2, r3, #1
 80058fa:	73fa      	strb	r2, [r7, #15]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d1fa      	bne.n	80058f6 <lowlayer_writePulse+0x116>

//	int16_t wow = HAL_GPIO_ReadPin(CPLD_BUSY_GPIO_Port, CPLD_BUSY_Pin);
//	LOG_REPORT(" Busy: ", wow);
	HAL_GPIO_WritePin(PULSE_WRITE_GPIO_Port, PULSE_WRITE_Pin, GPIO_PIN_SET);
 8005900:	2201      	movs	r2, #1
 8005902:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005906:	4813      	ldr	r0, [pc, #76]	; (8005954 <lowlayer_writePulse+0x174>)
 8005908:	f005 fcc0 	bl	800b28c <HAL_GPIO_WritePin>

	// Accumulate
	pulse_accumulate[0] += pulse0;
 800590c:	4b15      	ldr	r3, [pc, #84]	; (8005964 <lowlayer_writePulse+0x184>)
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005914:	4413      	add	r3, r2
 8005916:	4a13      	ldr	r2, [pc, #76]	; (8005964 <lowlayer_writePulse+0x184>)
 8005918:	6013      	str	r3, [r2, #0]
	pulse_accumulate[1] += pulse1;
 800591a:	4b12      	ldr	r3, [pc, #72]	; (8005964 <lowlayer_writePulse+0x184>)
 800591c:	685a      	ldr	r2, [r3, #4]
 800591e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005922:	4413      	add	r3, r2
 8005924:	4a0f      	ldr	r2, [pc, #60]	; (8005964 <lowlayer_writePulse+0x184>)
 8005926:	6053      	str	r3, [r2, #4]
	pulse_accumulate[2] += pulse2;
 8005928:	4b0e      	ldr	r3, [pc, #56]	; (8005964 <lowlayer_writePulse+0x184>)
 800592a:	689a      	ldr	r2, [r3, #8]
 800592c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8005930:	4413      	add	r3, r2
 8005932:	4a0c      	ldr	r2, [pc, #48]	; (8005964 <lowlayer_writePulse+0x184>)
 8005934:	6093      	str	r3, [r2, #8]
	pulse_accumulate[3] += pulse3;
 8005936:	4b0b      	ldr	r3, [pc, #44]	; (8005964 <lowlayer_writePulse+0x184>)
 8005938:	68da      	ldr	r2, [r3, #12]
 800593a:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800593e:	4413      	add	r3, r2
 8005940:	4a08      	ldr	r2, [pc, #32]	; (8005964 <lowlayer_writePulse+0x184>)
 8005942:	60d3      	str	r3, [r2, #12]

	return TRUE;
 8005944:	2301      	movs	r3, #1
}
 8005946:	4618      	mov	r0, r3
 8005948:	371c      	adds	r7, #28
 800594a:	46bd      	mov	sp, r7
 800594c:	bd90      	pop	{r4, r7, pc}
 800594e:	bf00      	nop
 8005950:	40020000 	.word	0x40020000
 8005954:	40020c00 	.word	0x40020c00
 8005958:	60000002 	.word	0x60000002
 800595c:	60000004 	.word	0x60000004
 8005960:	60000006 	.word	0x60000006
 8005964:	2000c518 	.word	0x2000c518

08005968 <lowlayer_resetEncoder>:

void	lowlayer_resetEncoder(void) {
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
	// Trigger
	uint8_t delay = 100;
 800596e:	2364      	movs	r3, #100	; 0x64
 8005970:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ENCODER_RESET_GPIO_Port, ENCODER_RESET_Pin, GPIO_PIN_SET);
 8005972:	2201      	movs	r2, #1
 8005974:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005978:	4809      	ldr	r0, [pc, #36]	; (80059a0 <lowlayer_resetEncoder+0x38>)
 800597a:	f005 fc87 	bl	800b28c <HAL_GPIO_WritePin>
	while (delay--);
 800597e:	bf00      	nop
 8005980:	79fb      	ldrb	r3, [r7, #7]
 8005982:	1e5a      	subs	r2, r3, #1
 8005984:	71fa      	strb	r2, [r7, #7]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d1fa      	bne.n	8005980 <lowlayer_resetEncoder+0x18>
	HAL_GPIO_WritePin(ENCODER_RESET_GPIO_Port, ENCODER_RESET_Pin, GPIO_PIN_RESET);
 800598a:	2200      	movs	r2, #0
 800598c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005990:	4803      	ldr	r0, [pc, #12]	; (80059a0 <lowlayer_resetEncoder+0x38>)
 8005992:	f005 fc7b 	bl	800b28c <HAL_GPIO_WritePin>
}
 8005996:	bf00      	nop
 8005998:	3708      	adds	r7, #8
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	40020c00 	.word	0x40020c00

080059a4 <lowlayer_readLimitSwitch>:

uint8_t lowlayer_readLimitSwitch(void) {
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
	uint16_t read_data = FSMC_Read(ADDRESS_LIMIT);
 80059aa:	4805      	ldr	r0, [pc, #20]	; (80059c0 <lowlayer_readLimitSwitch+0x1c>)
 80059ac:	f7fe fa19 	bl	8003de2 <FSMC_Read>
 80059b0:	4603      	mov	r3, r0
 80059b2:	80fb      	strh	r3, [r7, #6]

	return (uint8_t)read_data;
 80059b4:	88fb      	ldrh	r3, [r7, #6]
 80059b6:	b2db      	uxtb	r3, r3
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3708      	adds	r7, #8
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	60000020 	.word	0x60000020

080059c4 <lowlayer_readEncoder>:

int32_t lowlayer_readEncoder(uint8_t encoder_num) {
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	4603      	mov	r3, r0
 80059cc:	71fb      	strb	r3, [r7, #7]
	int32_t data;
	if (encoder_num <= 2) {
 80059ce:	79fb      	ldrb	r3, [r7, #7]
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d81c      	bhi.n	8005a0e <lowlayer_readEncoder+0x4a>
		uint16_t low_word = FSMC_Read(ADDRESS_ENC0_LOW + encoder_num*4);
 80059d4:	79fb      	ldrb	r3, [r7, #7]
 80059d6:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 80059da:	3310      	adds	r3, #16
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	4618      	mov	r0, r3
 80059e0:	f7fe f9ff 	bl	8003de2 <FSMC_Read>
 80059e4:	4603      	mov	r3, r0
 80059e6:	817b      	strh	r3, [r7, #10]
		uint16_t high_word = FSMC_Read(ADDRESS_ENC0_LOW + encoder_num*4 + 2);
 80059e8:	79fb      	ldrb	r3, [r7, #7]
 80059ea:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 80059ee:	3310      	adds	r3, #16
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	3302      	adds	r3, #2
 80059f4:	4618      	mov	r0, r3
 80059f6:	f7fe f9f4 	bl	8003de2 <FSMC_Read>
 80059fa:	4603      	mov	r3, r0
 80059fc:	813b      	strh	r3, [r7, #8]
		data = high_word;
 80059fe:	893b      	ldrh	r3, [r7, #8]
 8005a00:	60fb      	str	r3, [r7, #12]
		data = (data << 16) | low_word;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	041a      	lsls	r2, r3, #16
 8005a06:	897b      	ldrh	r3, [r7, #10]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	60fb      	str	r3, [r7, #12]
 8005a0c:	e001      	b.n	8005a12 <lowlayer_readEncoder+0x4e>
	} else {
		data = 0;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	60fb      	str	r3, [r7, #12]
	}
	return data;
 8005a12:	68fb      	ldr	r3, [r7, #12]
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3710      	adds	r7, #16
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <lowlayer_readCapture>:

int32_t lowlayer_readCapture(uint8_t capture_num) {
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	4603      	mov	r3, r0
 8005a24:	71fb      	strb	r3, [r7, #7]
	int32_t data;
	if (capture_num <= 2) {
 8005a26:	79fb      	ldrb	r3, [r7, #7]
 8005a28:	2b02      	cmp	r3, #2
 8005a2a:	d81c      	bhi.n	8005a66 <lowlayer_readCapture+0x4a>
		uint16_t low_word = FSMC_Read(ADDRESS_CAP0_LOW + capture_num*4);
 8005a2c:	79fb      	ldrb	r3, [r7, #7]
 8005a2e:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8005a32:	3318      	adds	r3, #24
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	4618      	mov	r0, r3
 8005a38:	f7fe f9d3 	bl	8003de2 <FSMC_Read>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	817b      	strh	r3, [r7, #10]
		uint16_t high_word = FSMC_Read(ADDRESS_CAP0_LOW + capture_num*4 + 2);
 8005a40:	79fb      	ldrb	r3, [r7, #7]
 8005a42:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8005a46:	3318      	adds	r3, #24
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	3302      	adds	r3, #2
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f7fe f9c8 	bl	8003de2 <FSMC_Read>
 8005a52:	4603      	mov	r3, r0
 8005a54:	813b      	strh	r3, [r7, #8]
		data = high_word;
 8005a56:	893b      	ldrh	r3, [r7, #8]
 8005a58:	60fb      	str	r3, [r7, #12]
		data = (data << 16) | low_word;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	041a      	lsls	r2, r3, #16
 8005a5e:	897b      	ldrh	r3, [r7, #10]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	60fb      	str	r3, [r7, #12]
 8005a64:	e001      	b.n	8005a6a <lowlayer_readCapture+0x4e>
	} else {
		data = 0;
 8005a66:	2300      	movs	r3, #0
 8005a68:	60fb      	str	r3, [r7, #12]
	}
	return data;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3710      	adds	r7, #16
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <lowlayer_updateEncoder>:

void	lowlayer_updateEncoder(void) {
 8005a74:	b590      	push	{r4, r7, lr}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	71fb      	strb	r3, [r7, #7]
 8005a7e:	e00b      	b.n	8005a98 <lowlayer_updateEncoder+0x24>
		position_encoder[i] = lowlayer_readEncoder(i);
 8005a80:	79fc      	ldrb	r4, [r7, #7]
 8005a82:	79fb      	ldrb	r3, [r7, #7]
 8005a84:	4618      	mov	r0, r3
 8005a86:	f7ff ff9d 	bl	80059c4 <lowlayer_readEncoder>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	4b06      	ldr	r3, [pc, #24]	; (8005aa8 <lowlayer_updateEncoder+0x34>)
 8005a8e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	for (uint8_t i = 0; i < 3; i++) {
 8005a92:	79fb      	ldrb	r3, [r7, #7]
 8005a94:	3301      	adds	r3, #1
 8005a96:	71fb      	strb	r3, [r7, #7]
 8005a98:	79fb      	ldrb	r3, [r7, #7]
 8005a9a:	2b02      	cmp	r3, #2
 8005a9c:	d9f0      	bls.n	8005a80 <lowlayer_updateEncoder+0xc>
	}
}
 8005a9e:	bf00      	nop
 8005aa0:	370c      	adds	r7, #12
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd90      	pop	{r4, r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	2000c52c 	.word	0x2000c52c

08005aac <lowlayer_updateCapture>:

void	lowlayer_updateCapture(void) {
 8005aac:	b590      	push	{r4, r7, lr}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	71fb      	strb	r3, [r7, #7]
 8005ab6:	e00b      	b.n	8005ad0 <lowlayer_updateCapture+0x24>
			position_capture[i] = lowlayer_readCapture(i);
 8005ab8:	79fc      	ldrb	r4, [r7, #7]
 8005aba:	79fb      	ldrb	r3, [r7, #7]
 8005abc:	4618      	mov	r0, r3
 8005abe:	f7ff ffad 	bl	8005a1c <lowlayer_readCapture>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	4b06      	ldr	r3, [pc, #24]	; (8005ae0 <lowlayer_updateCapture+0x34>)
 8005ac6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	for (uint8_t i = 0; i < 3; i++) {
 8005aca:	79fb      	ldrb	r3, [r7, #7]
 8005acc:	3301      	adds	r3, #1
 8005ace:	71fb      	strb	r3, [r7, #7]
 8005ad0:	79fb      	ldrb	r3, [r7, #7]
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d9f0      	bls.n	8005ab8 <lowlayer_updateCapture+0xc>
	}
}
 8005ad6:	bf00      	nop
 8005ad8:	370c      	adds	r7, #12
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd90      	pop	{r4, r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	2000c53c 	.word	0x2000c53c

08005ae4 <lowlayer_updateLimit>:

void	lowlayer_updateLimit(void) {
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
	uint8_t limit_data = lowlayer_readLimitSwitch();
 8005aea:	f7ff ff5b 	bl	80059a4 <lowlayer_readLimitSwitch>
 8005aee:	4603      	mov	r3, r0
 8005af0:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i = 0; i < 4; i++) {
 8005af2:	2300      	movs	r3, #0
 8005af4:	71fb      	strb	r3, [r7, #7]
 8005af6:	e00d      	b.n	8005b14 <lowlayer_updateLimit+0x30>
			limit_switch[i] = (limit_data & (0x01 << i)) ? 1 : 0;
 8005af8:	79ba      	ldrb	r2, [r7, #6]
 8005afa:	79fb      	ldrb	r3, [r7, #7]
 8005afc:	fa42 f303 	asr.w	r3, r2, r3
 8005b00:	b2da      	uxtb	r2, r3
 8005b02:	79fb      	ldrb	r3, [r7, #7]
 8005b04:	f002 0201 	and.w	r2, r2, #1
 8005b08:	b2d1      	uxtb	r1, r2
 8005b0a:	4a06      	ldr	r2, [pc, #24]	; (8005b24 <lowlayer_updateLimit+0x40>)
 8005b0c:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 4; i++) {
 8005b0e:	79fb      	ldrb	r3, [r7, #7]
 8005b10:	3301      	adds	r3, #1
 8005b12:	71fb      	strb	r3, [r7, #7]
 8005b14:	79fb      	ldrb	r3, [r7, #7]
 8005b16:	2b03      	cmp	r3, #3
 8005b18:	d9ee      	bls.n	8005af8 <lowlayer_updateLimit+0x14>
	}
}
 8005b1a:	bf00      	nop
 8005b1c:	3708      	adds	r7, #8
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	2000c538 	.word	0x2000c538

08005b28 <lowlayer_setOutput>:

void	lowlayer_setOutput(uint8_t value) {
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	4603      	mov	r3, r0
 8005b30:	71fb      	strb	r3, [r7, #7]
	if (value > 0) {
 8005b32:	79fb      	ldrb	r3, [r7, #7]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d006      	beq.n	8005b46 <lowlayer_setOutput+0x1e>
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_SET);
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005b3e:	4807      	ldr	r0, [pc, #28]	; (8005b5c <lowlayer_setOutput+0x34>)
 8005b40:	f005 fba4 	bl	800b28c <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_RESET);
	}
}
 8005b44:	e005      	b.n	8005b52 <lowlayer_setOutput+0x2a>
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_RESET);
 8005b46:	2200      	movs	r2, #0
 8005b48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005b4c:	4803      	ldr	r0, [pc, #12]	; (8005b5c <lowlayer_setOutput+0x34>)
 8005b4e:	f005 fb9d 	bl	800b28c <HAL_GPIO_WritePin>
}
 8005b52:	bf00      	nop
 8005b54:	3708      	adds	r7, #8
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	40020400 	.word	0x40020400

08005b60 <lowlayer_CPLD_Init>:

void	lowlayer_CPLD_Init(void) {
 8005b60:	b580      	push	{r7, lr}
 8005b62:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STOP_GPIO_Port, STOP_Pin, GPIO_PIN_SET); // STOP low active
 8005b64:	2201      	movs	r2, #1
 8005b66:	2140      	movs	r1, #64	; 0x40
 8005b68:	4802      	ldr	r0, [pc, #8]	; (8005b74 <lowlayer_CPLD_Init+0x14>)
 8005b6a:	f005 fb8f 	bl	800b28c <HAL_GPIO_WritePin>
}
 8005b6e:	bf00      	nop
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	40020c00 	.word	0x40020c00

08005b78 <lowlayer_stepMotorInit>:

void	lowlayer_stepMotorInit(void) {
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET); // ENABLE low active
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005b82:	4808      	ldr	r0, [pc, #32]	; (8005ba4 <lowlayer_stepMotorInit+0x2c>)
 8005b84:	f005 fb82 	bl	800b28c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_RESET_GPIO_Port, STEP_RESET_Pin, GPIO_PIN_SET); // RESET low active
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005b8e:	4805      	ldr	r0, [pc, #20]	; (8005ba4 <lowlayer_stepMotorInit+0x2c>)
 8005b90:	f005 fb7c 	bl	800b28c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_SLEEP_GPIO_Port, STEP_SLEEP_Pin, GPIO_PIN_SET); // SLEEP low active
 8005b94:	2201      	movs	r2, #1
 8005b96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b9a:	4802      	ldr	r0, [pc, #8]	; (8005ba4 <lowlayer_stepMotorInit+0x2c>)
 8005b9c:	f005 fb76 	bl	800b28c <HAL_GPIO_WritePin>
}
 8005ba0:	bf00      	nop
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	40020000 	.word	0x40020000

08005ba8 <scaraStartup>:
//											 "Over Velocity",
//											 "Over Accelerate",
//											 "Wrong Joint Num",
//											 "Wrong Coordinate"
//											};
void				scaraStartup(void) {
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	scaraSetScanFlag();
#endif
	lowlayer_CPLD_Init();
 8005bac:	f7ff ffd8 	bl	8005b60 <lowlayer_CPLD_Init>
	lowlayer_stepMotorInit();
 8005bb0:	f7ff ffe2 	bl	8005b78 <lowlayer_stepMotorInit>
	lowlayer_resetEncoder();
 8005bb4:	f7ff fed8 	bl	8005968 <lowlayer_resetEncoder>
	//lowlayer_writePulse(0, 0, 0, 0);
}
 8005bb8:	bf00      	nop
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	0000      	movs	r0, r0
	...

08005bc0 <scaraInitDuty>:
	return SCARA_STATUS_OK;
	
}

/* Compute duty corresponding to new command */
SCARA_StatusTypeDef	scaraInitDuty		(DUTY_Command_TypeDef command) {
 8005bc0:	b084      	sub	sp, #16
 8005bc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bc4:	f5ad 7d7d 	sub.w	sp, sp, #1012	; 0x3f4
 8005bc8:	af90      	add	r7, sp, #576	; 0x240
 8005bca:	f507 74e4 	add.w	r4, r7, #456	; 0x1c8
 8005bce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	SCARA_StatusTypeDef status, status1, status2;

	/*----------- Space Task ------------*/
	if(DUTY_SPACE_TASK == command.space_type) {
 8005bd2:	f897 31d5 	ldrb.w	r3, [r7, #469]	; 0x1d5
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	f040 83b0 	bne.w	800633c <scaraInitDuty+0x77c>
		double total_s, angle_s;
		int8_t dir_angle;
		SCARA_PositionTypeDef	target_point;
		// Change Degree --> Radian
		command.target_point.roll = command.target_point.roll*PI/180.0;
 8005bdc:	e9d7 0194 	ldrd	r0, r1, [r7, #592]	; 0x250
 8005be0:	a396      	add	r3, pc, #600	; (adr r3, 8005e3c <scaraInitDuty+0x27c>)
 8005be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be6:	f7fa fd07 	bl	80005f8 <__aeabi_dmul>
 8005bea:	4603      	mov	r3, r0
 8005bec:	460c      	mov	r4, r1
 8005bee:	4618      	mov	r0, r3
 8005bf0:	4621      	mov	r1, r4
 8005bf2:	f04f 0200 	mov.w	r2, #0
 8005bf6:	4b8c      	ldr	r3, [pc, #560]	; (8005e28 <scaraInitDuty+0x268>)
 8005bf8:	f7fa fe28 	bl	800084c <__aeabi_ddiv>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	460c      	mov	r4, r1
 8005c00:	e9c7 3494 	strd	r3, r4, [r7, #592]	; 0x250
		// Coordinate
		if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8005c04:	f897 31d4 	ldrb.w	r3, [r7, #468]	; 0x1d4
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d13c      	bne.n	8005c86 <scaraInitDuty+0xc6>
			target_point.x 		= positionCurrent.x + command.target_point.x;
 8005c0c:	4b87      	ldr	r3, [pc, #540]	; (8005e2c <scaraInitDuty+0x26c>)
 8005c0e:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8005c12:	e9d7 348e 	ldrd	r3, r4, [r7, #568]	; 0x238
 8005c16:	461a      	mov	r2, r3
 8005c18:	4623      	mov	r3, r4
 8005c1a:	f7fa fb37 	bl	800028c <__adddf3>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	460c      	mov	r4, r1
 8005c22:	f107 0208 	add.w	r2, r7, #8
 8005c26:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
			target_point.y 		= positionCurrent.y + command.target_point.y;
 8005c2a:	4b80      	ldr	r3, [pc, #512]	; (8005e2c <scaraInitDuty+0x26c>)
 8005c2c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8005c30:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 8005c34:	461a      	mov	r2, r3
 8005c36:	4623      	mov	r3, r4
 8005c38:	f7fa fb28 	bl	800028c <__adddf3>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	460c      	mov	r4, r1
 8005c40:	f107 0208 	add.w	r2, r7, #8
 8005c44:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
			target_point.z 		= positionCurrent.z + command.target_point.z;
 8005c48:	4b78      	ldr	r3, [pc, #480]	; (8005e2c <scaraInitDuty+0x26c>)
 8005c4a:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8005c4e:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 8005c52:	461a      	mov	r2, r3
 8005c54:	4623      	mov	r3, r4
 8005c56:	f7fa fb19 	bl	800028c <__adddf3>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	460c      	mov	r4, r1
 8005c5e:	f107 0208 	add.w	r2, r7, #8
 8005c62:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
			target_point.roll	= positionCurrent.roll + command.target_point.roll;
 8005c66:	4b71      	ldr	r3, [pc, #452]	; (8005e2c <scaraInitDuty+0x26c>)
 8005c68:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8005c6c:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 8005c70:	461a      	mov	r2, r3
 8005c72:	4623      	mov	r3, r4
 8005c74:	f7fa fb0a 	bl	800028c <__adddf3>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	460c      	mov	r4, r1
 8005c7c:	f107 0208 	add.w	r2, r7, #8
 8005c80:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
 8005c84:	e01f      	b.n	8005cc6 <scaraInitDuty+0x106>
		} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8005c86:	f897 31d4 	ldrb.w	r3, [r7, #468]	; 0x1d4
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d118      	bne.n	8005cc0 <scaraInitDuty+0x100>
			target_point.x 		= command.target_point.x;
 8005c8e:	e9d7 348e 	ldrd	r3, r4, [r7, #568]	; 0x238
 8005c92:	f107 0208 	add.w	r2, r7, #8
 8005c96:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
			target_point.y 		= command.target_point.y;
 8005c9a:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 8005c9e:	f107 0208 	add.w	r2, r7, #8
 8005ca2:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
			target_point.z 		= command.target_point.z;
 8005ca6:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 8005caa:	f107 0208 	add.w	r2, r7, #8
 8005cae:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
			target_point.roll	= command.target_point.roll;
 8005cb2:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 8005cb6:	f107 0208 	add.w	r2, r7, #8
 8005cba:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
 8005cbe:	e002      	b.n	8005cc6 <scaraInitDuty+0x106>
		} else {
			return SCARA_STATUS_ERROR_COORDINATE;
 8005cc0:	230c      	movs	r3, #12
 8005cc2:	f000 beee 	b.w	8006aa2 <scaraInitDuty+0xee2>
		}

		angle_s = target_point.roll - positionCurrent.roll;
 8005cc6:	f107 0308 	add.w	r3, r7, #8
 8005cca:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8005cce:	4b57      	ldr	r3, [pc, #348]	; (8005e2c <scaraInitDuty+0x26c>)
 8005cd0:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	4623      	mov	r3, r4
 8005cd8:	f7fa fad6 	bl	8000288 <__aeabi_dsub>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	460c      	mov	r4, r1
 8005ce0:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
		dir_angle = 1;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
		if ( angle_s < 0) {
 8005cea:	f04f 0200 	mov.w	r2, #0
 8005cee:	f04f 0300 	mov.w	r3, #0
 8005cf2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8005cf6:	f7fa fef1 	bl	8000adc <__aeabi_dcmplt>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d002      	beq.n	8005d06 <scaraInitDuty+0x146>
			dir_angle = -1;
 8005d00:	23ff      	movs	r3, #255	; 0xff
 8005d02:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
//		if(positionCurrent.roll + angle_s < -3.14 || positionCurrent.roll + angle_s > 3.14){
//			dir_angle = -dir_angle;
//			angle_s = (2*PI - fabs(angle_s))*dir_angle;
//		}

		myDUTY.space_type = DUTY_SPACE_TASK;// Change type
 8005d06:	4b4a      	ldr	r3, [pc, #296]	; (8005e30 <scaraInitDuty+0x270>)
 8005d08:	2200      	movs	r2, #0
 8005d0a:	701a      	strb	r2, [r3, #0]
		myDUTY.task.roll_start = positionCurrent.roll;
 8005d0c:	4b47      	ldr	r3, [pc, #284]	; (8005e2c <scaraInitDuty+0x26c>)
 8005d0e:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8005d12:	4a47      	ldr	r2, [pc, #284]	; (8005e30 <scaraInitDuty+0x270>)
 8005d14:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 8005d18:	e9c2 3400 	strd	r3, r4, [r2]
		// 1-Path Planning
			// Straight Line
		if ( DUTY_PATH_LINE == command.path_type ) {
 8005d1c:	f897 31d6 	ldrb.w	r3, [r7, #470]	; 0x1d6
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d120      	bne.n	8005d66 <scaraInitDuty+0x1a6>
			myDUTY.task.path.path_type = DUTY_PATH_LINE;
 8005d24:	4b42      	ldr	r3, [pc, #264]	; (8005e30 <scaraInitDuty+0x270>)
 8005d26:	2200      	movs	r2, #0
 8005d28:	721a      	strb	r2, [r3, #8]
			status = scaraInitLine(&(myDUTY.task.path.line), positionCurrent, target_point);
 8005d2a:	4c40      	ldr	r4, [pc, #256]	; (8005e2c <scaraInitDuty+0x26c>)
 8005d2c:	f107 0308 	add.w	r3, r7, #8
 8005d30:	a82e      	add	r0, sp, #184	; 0xb8
 8005d32:	4619      	mov	r1, r3
 8005d34:	23c0      	movs	r3, #192	; 0xc0
 8005d36:	461a      	mov	r2, r3
 8005d38:	f00f f840 	bl	8014dbc <memcpy>
 8005d3c:	4668      	mov	r0, sp
 8005d3e:	f104 0308 	add.w	r3, r4, #8
 8005d42:	22b8      	movs	r2, #184	; 0xb8
 8005d44:	4619      	mov	r1, r3
 8005d46:	f00f f839 	bl	8014dbc <memcpy>
 8005d4a:	e894 000c 	ldmia.w	r4, {r2, r3}
 8005d4e:	4839      	ldr	r0, [pc, #228]	; (8005e34 <scaraInitDuty+0x274>)
 8005d50:	f000 feba 	bl	8006ac8 <scaraInitLine>
 8005d54:	4603      	mov	r3, r0
 8005d56:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
			total_s = myDUTY.task.path.line.total_s;
 8005d5a:	4b35      	ldr	r3, [pc, #212]	; (8005e30 <scaraInitDuty+0x270>)
 8005d5c:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8005d60:	e9c7 3468 	strd	r3, r4, [r7, #416]	; 0x1a0
 8005d64:	e057      	b.n	8005e16 <scaraInitDuty+0x256>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == command.path_type ) {
 8005d66:	f897 31d6 	ldrb.w	r3, [r7, #470]	; 0x1d6
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d150      	bne.n	8005e10 <scaraInitDuty+0x250>
			SCARA_PositionTypeDef	center_point;
			target_point.z = positionCurrent.z;
 8005d6e:	4b2f      	ldr	r3, [pc, #188]	; (8005e2c <scaraInitDuty+0x26c>)
 8005d70:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8005d74:	f107 0208 	add.w	r2, r7, #8
 8005d78:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58

			center_point.x 		= positionCurrent.x + command.sub_point.x;
 8005d7c:	4b2b      	ldr	r3, [pc, #172]	; (8005e2c <scaraInitDuty+0x26c>)
 8005d7e:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8005d82:	e9d7 34be 	ldrd	r3, r4, [r7, #760]	; 0x2f8
 8005d86:	461a      	mov	r2, r3
 8005d88:	4623      	mov	r3, r4
 8005d8a:	f7fa fa7f 	bl	800028c <__adddf3>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	460c      	mov	r4, r1
 8005d92:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
			center_point.y 		= positionCurrent.y + command.sub_point.y;
 8005d96:	4b25      	ldr	r3, [pc, #148]	; (8005e2c <scaraInitDuty+0x26c>)
 8005d98:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8005d9c:	e9d7 34c0 	ldrd	r3, r4, [r7, #768]	; 0x300
 8005da0:	461a      	mov	r2, r3
 8005da2:	4623      	mov	r3, r4
 8005da4:	f7fa fa72 	bl	800028c <__adddf3>
 8005da8:	4603      	mov	r3, r0
 8005daa:	460c      	mov	r4, r1
 8005dac:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
			center_point.z 		= positionCurrent.z;
 8005db0:	4b1e      	ldr	r3, [pc, #120]	; (8005e2c <scaraInitDuty+0x26c>)
 8005db2:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8005db6:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120

			myDUTY.task.path.path_type = DUTY_PATH_CIRCLE;
 8005dba:	4b1d      	ldr	r3, [pc, #116]	; (8005e30 <scaraInitDuty+0x270>)
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	721a      	strb	r2, [r3, #8]
			status = scaraInitCircle(&(myDUTY.task.path.circle),
 8005dc0:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8005dc4:	4c19      	ldr	r4, [pc, #100]	; (8005e2c <scaraInitDuty+0x26c>)
 8005dc6:	938e      	str	r3, [sp, #568]	; 0x238
 8005dc8:	a85e      	add	r0, sp, #376	; 0x178
 8005dca:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005dce:	22c0      	movs	r2, #192	; 0xc0
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	f00e fff3 	bl	8014dbc <memcpy>
 8005dd6:	f107 0308 	add.w	r3, r7, #8
 8005dda:	a82e      	add	r0, sp, #184	; 0xb8
 8005ddc:	4619      	mov	r1, r3
 8005dde:	23c0      	movs	r3, #192	; 0xc0
 8005de0:	461a      	mov	r2, r3
 8005de2:	f00e ffeb 	bl	8014dbc <memcpy>
 8005de6:	4668      	mov	r0, sp
 8005de8:	f104 0308 	add.w	r3, r4, #8
 8005dec:	22b8      	movs	r2, #184	; 0xb8
 8005dee:	4619      	mov	r1, r3
 8005df0:	f00e ffe4 	bl	8014dbc <memcpy>
 8005df4:	e894 000c 	ldmia.w	r4, {r2, r3}
 8005df8:	480f      	ldr	r0, [pc, #60]	; (8005e38 <scaraInitDuty+0x278>)
 8005dfa:	f000 ff29 	bl	8006c50 <scaraInitCircle>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
										positionCurrent,
										target_point,
										center_point,
										command.arc_dir );
			total_s = myDUTY.task.path.circle.total_s;
 8005e04:	4b0a      	ldr	r3, [pc, #40]	; (8005e30 <scaraInitDuty+0x270>)
 8005e06:	e9d3 343a 	ldrd	r3, r4, [r3, #232]	; 0xe8
 8005e0a:	e9c7 3468 	strd	r3, r4, [r7, #416]	; 0x1a0
 8005e0e:	e002      	b.n	8005e16 <scaraInitDuty+0x256>

		} else {
			return SCARA_STATUS_ERROR_TASK;
 8005e10:	2303      	movs	r3, #3
 8005e12:	f000 be46 	b.w	8006aa2 <scaraInitDuty+0xee2>
		}

		if ( SCARA_STATUS_OK != status) {
 8005e16:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d012      	beq.n	8005e44 <scaraInitDuty+0x284>
			return status;
 8005e1e:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8005e22:	f000 be3e 	b.w	8006aa2 <scaraInitDuty+0xee2>
 8005e26:	bf00      	nop
 8005e28:	40668000 	.word	0x40668000
 8005e2c:	2000d140 	.word	0x2000d140
 8005e30:	2000c580 	.word	0x2000c580
 8005e34:	2000c590 	.word	0x2000c590
 8005e38:	2000c600 	.word	0x2000c600
 8005e3c:	60000000 	.word	0x60000000
 8005e40:	400921fb 	.word	0x400921fb
		}

		// 2-Trajectory Planning
			// LSPB
		if ( DUTY_TRAJECTORY_LSPB == command.trajec_type ) {
 8005e44:	f897 31d8 	ldrb.w	r3, [r7, #472]	; 0x1d8
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	f040 80ed 	bne.w	8006028 <scaraInitDuty+0x468>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8005e4e:	f897 31d9 	ldrb.w	r3, [r7, #473]	; 0x1d9
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d155      	bne.n	8005f02 <scaraInitDuty+0x342>
				myDUTY.task.trajectory_3d.lspb.Tf = command.time_total;
 8005e56:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8005e5a:	4aa3      	ldr	r2, [pc, #652]	; (80060e8 <scaraInitDuty+0x528>)
 8005e5c:	e9c2 345a 	strd	r3, r4, [r2, #360]	; 0x168
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005e60:	4ba1      	ldr	r3, [pc, #644]	; (80060e8 <scaraInitDuty+0x528>)
 8005e62:	2200      	movs	r2, #0
 8005e64:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB1(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8005e68:	ed97 7bdc 	vldr	d7, [r7, #880]	; 0x370
 8005e6c:	ed97 6b7a 	vldr	d6, [r7, #488]	; 0x1e8
 8005e70:	eeb0 2a46 	vmov.f32	s4, s12
 8005e74:	eef0 2a66 	vmov.f32	s5, s13
 8005e78:	eeb0 1a47 	vmov.f32	s2, s14
 8005e7c:	eef0 1a67 	vmov.f32	s3, s15
 8005e80:	2201      	movs	r2, #1
 8005e82:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8005e86:	2104      	movs	r1, #4
 8005e88:	4898      	ldr	r0, [pc, #608]	; (80060ec <scaraInitDuty+0x52c>)
 8005e8a:	f001 f909 	bl	80070a0 <scaraInitLSPB1>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
										 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.time_total);

				myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8005e94:	4a94      	ldr	r2, [pc, #592]	; (80060e8 <scaraInitDuty+0x528>)
 8005e96:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8005e9a:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
				myDUTY.task.trajectory_roll.linear.Tf = command.time_total;
 8005e9e:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8005ea2:	4a91      	ldr	r2, [pc, #580]	; (80060e8 <scaraInitDuty+0x528>)
 8005ea4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ea8:	e9c2 3400 	strd	r3, r4, [r2]
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8005eac:	4b8e      	ldr	r3, [pc, #568]	; (80060e8 <scaraInitDuty+0x528>)
 8005eae:	2202      	movs	r2, #2
 8005eb0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, command.time_total);
 8005eb4:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f7fa fb33 	bl	8000524 <__aeabi_i2d>
 8005ebe:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8005ec2:	f7fa fb99 	bl	80005f8 <__aeabi_dmul>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	460c      	mov	r4, r1
 8005eca:	ec44 3b16 	vmov	d6, r3, r4
 8005ece:	ed97 7b7a 	vldr	d7, [r7, #488]	; 0x1e8
 8005ed2:	eeb0 1a47 	vmov.f32	s2, s14
 8005ed6:	eef0 1a67 	vmov.f32	s3, s15
 8005eda:	2203      	movs	r2, #3
 8005edc:	eeb0 0a46 	vmov.f32	s0, s12
 8005ee0:	eef0 0a66 	vmov.f32	s1, s13
 8005ee4:	2105      	movs	r1, #5
 8005ee6:	4882      	ldr	r0, [pc, #520]	; (80060f0 <scaraInitDuty+0x530>)
 8005ee8:	f001 f86e 	bl	8006fc8 <scaraInitLinear>
 8005eec:	4603      	mov	r3, r0
 8005eee:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
				myDUTY.time_total = command.time_total;
 8005ef2:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8005ef6:	4a7c      	ldr	r2, [pc, #496]	; (80060e8 <scaraInitDuty+0x528>)
 8005ef8:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8005efc:	e9c2 3400 	strd	r3, r4, [r2]
 8005f00:	e203      	b.n	800630a <scaraInitDuty+0x74a>
			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8005f02:	f897 31d9 	ldrb.w	r3, [r7, #473]	; 0x1d9
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	f040 808b 	bne.w	8006022 <scaraInitDuty+0x462>
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005f0c:	4b76      	ldr	r3, [pc, #472]	; (80060e8 <scaraInitDuty+0x528>)
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8005f14:	ed97 7bdc 	vldr	d7, [r7, #880]	; 0x370
 8005f18:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 8005f1c:	eeb0 2a46 	vmov.f32	s4, s12
 8005f20:	eef0 2a66 	vmov.f32	s5, s13
 8005f24:	eeb0 1a47 	vmov.f32	s2, s14
 8005f28:	eef0 1a67 	vmov.f32	s3, s15
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8005f32:	2104      	movs	r1, #4
 8005f34:	486d      	ldr	r0, [pc, #436]	; (80060ec <scaraInitDuty+0x52c>)
 8005f36:	f002 f9ff 	bl	8008338 <scaraInitLSPB>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
						 total_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005f40:	4b69      	ldr	r3, [pc, #420]	; (80060e8 <scaraInitDuty+0x528>)
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 8005f48:	ed97 7bdc 	vldr	d7, [r7, #880]	; 0x370
 8005f4c:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 8005f50:	eeb0 2a46 	vmov.f32	s4, s12
 8005f54:	eef0 2a66 	vmov.f32	s5, s13
 8005f58:	eeb0 1a47 	vmov.f32	s2, s14
 8005f5c:	eef0 1a67 	vmov.f32	s3, s15
 8005f60:	2200      	movs	r2, #0
 8005f62:	ed97 0b62 	vldr	d0, [r7, #392]	; 0x188
 8005f66:	2105      	movs	r1, #5
 8005f68:	4862      	ldr	r0, [pc, #392]	; (80060f4 <scaraInitDuty+0x534>)
 8005f6a:	f002 f9e5 	bl	8008338 <scaraInitLSPB>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
						 angle_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				// Synchronous time end
				if(myDUTY.task.trajectory_3d.lspb.Tf > myDUTY.task.trajectory_roll.lspb.Tf) {
 8005f74:	4b5c      	ldr	r3, [pc, #368]	; (80060e8 <scaraInitDuty+0x528>)
 8005f76:	e9d3 015a 	ldrd	r0, r1, [r3, #360]	; 0x168
 8005f7a:	4b5b      	ldr	r3, [pc, #364]	; (80060e8 <scaraInitDuty+0x528>)
 8005f7c:	e9d3 34ba 	ldrd	r3, r4, [r3, #744]	; 0x2e8
 8005f80:	461a      	mov	r2, r3
 8005f82:	4623      	mov	r3, r4
 8005f84:	f7fa fdc8 	bl	8000b18 <__aeabi_dcmpgt>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d024      	beq.n	8005fd8 <scaraInitDuty+0x418>
					myDUTY.task.trajectory_roll.lspb.Tf = myDUTY.task.trajectory_3d.lspb.Tf;
 8005f8e:	4b56      	ldr	r3, [pc, #344]	; (80060e8 <scaraInitDuty+0x528>)
 8005f90:	e9d3 345a 	ldrd	r3, r4, [r3, #360]	; 0x168
 8005f94:	4a54      	ldr	r2, [pc, #336]	; (80060e8 <scaraInitDuty+0x528>)
 8005f96:	e9c2 34ba 	strd	r3, r4, [r2, #744]	; 0x2e8
					status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 8005f9a:	ed97 7bdc 	vldr	d7, [r7, #880]	; 0x370
 8005f9e:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 8005fa2:	eeb0 2a46 	vmov.f32	s4, s12
 8005fa6:	eef0 2a66 	vmov.f32	s5, s13
 8005faa:	eeb0 1a47 	vmov.f32	s2, s14
 8005fae:	eef0 1a67 	vmov.f32	s3, s15
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	ed97 0b62 	vldr	d0, [r7, #392]	; 0x188
 8005fb8:	2105      	movs	r1, #5
 8005fba:	484e      	ldr	r0, [pc, #312]	; (80060f4 <scaraInitDuty+0x534>)
 8005fbc:	f002 f9bc 	bl	8008338 <scaraInitLSPB>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
							 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_3d.lspb.Tf;
 8005fc6:	4b48      	ldr	r3, [pc, #288]	; (80060e8 <scaraInitDuty+0x528>)
 8005fc8:	e9d3 345a 	ldrd	r3, r4, [r3, #360]	; 0x168
 8005fcc:	4a46      	ldr	r2, [pc, #280]	; (80060e8 <scaraInitDuty+0x528>)
 8005fce:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8005fd2:	e9c2 3400 	strd	r3, r4, [r2]
 8005fd6:	e198      	b.n	800630a <scaraInitDuty+0x74a>
				} else {
					myDUTY.task.trajectory_3d.lspb.Tf = myDUTY.task.trajectory_roll.lspb.Tf;
 8005fd8:	4b43      	ldr	r3, [pc, #268]	; (80060e8 <scaraInitDuty+0x528>)
 8005fda:	e9d3 34ba 	ldrd	r3, r4, [r3, #744]	; 0x2e8
 8005fde:	4a42      	ldr	r2, [pc, #264]	; (80060e8 <scaraInitDuty+0x528>)
 8005fe0:	e9c2 345a 	strd	r3, r4, [r2, #360]	; 0x168
					status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8005fe4:	ed97 7bdc 	vldr	d7, [r7, #880]	; 0x370
 8005fe8:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 8005fec:	eeb0 2a46 	vmov.f32	s4, s12
 8005ff0:	eef0 2a66 	vmov.f32	s5, s13
 8005ff4:	eeb0 1a47 	vmov.f32	s2, s14
 8005ff8:	eef0 1a67 	vmov.f32	s3, s15
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8006002:	2104      	movs	r1, #4
 8006004:	4839      	ldr	r0, [pc, #228]	; (80060ec <scaraInitDuty+0x52c>)
 8006006:	f002 f997 	bl	8008338 <scaraInitLSPB>
 800600a:	4603      	mov	r3, r0
 800600c:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
							 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_roll.lspb.Tf;
 8006010:	4b35      	ldr	r3, [pc, #212]	; (80060e8 <scaraInitDuty+0x528>)
 8006012:	e9d3 34ba 	ldrd	r3, r4, [r3, #744]	; 0x2e8
 8006016:	4a34      	ldr	r2, [pc, #208]	; (80060e8 <scaraInitDuty+0x528>)
 8006018:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 800601c:	e9c2 3400 	strd	r3, r4, [r2]
 8006020:	e173      	b.n	800630a <scaraInitDuty+0x74a>
				}
			} else {
				return SCARA_STATUS_ERROR_MODE_INIT ;
 8006022:	2308      	movs	r3, #8
 8006024:	f000 bd3d 	b.w	8006aa2 <scaraInitDuty+0xee2>
			}
			// SCURVE
		} else if 	( DUTY_TRAJECTORY_SCURVE == command.trajec_type ){
 8006028:	f897 31d8 	ldrb.w	r3, [r7, #472]	; 0x1d8
 800602c:	2b01      	cmp	r3, #1
 800602e:	f040 80f8 	bne.w	8006222 <scaraInitDuty+0x662>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8006032:	f897 31d9 	ldrb.w	r3, [r7, #473]	; 0x1d9
 8006036:	2b01      	cmp	r3, #1
 8006038:	d160      	bne.n	80060fc <scaraInitDuty+0x53c>
				myDUTY.task.trajectory_3d.scurve.Tf = command.time_total;
 800603a:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 800603e:	4a2a      	ldr	r2, [pc, #168]	; (80060e8 <scaraInitDuty+0x528>)
 8006040:	e9c2 347e 	strd	r3, r4, [r2, #504]	; 0x1f8
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8006044:	4b28      	ldr	r3, [pc, #160]	; (80060e8 <scaraInitDuty+0x528>)
 8006046:	2201      	movs	r2, #1
 8006048:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve1(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 800604c:	ed97 7bdc 	vldr	d7, [r7, #880]	; 0x370
 8006050:	ed97 6b7a 	vldr	d6, [r7, #488]	; 0x1e8
 8006054:	eeb0 2a46 	vmov.f32	s4, s12
 8006058:	eef0 2a66 	vmov.f32	s5, s13
 800605c:	eeb0 1a47 	vmov.f32	s2, s14
 8006060:	eef0 1a67 	vmov.f32	s3, s15
 8006064:	2201      	movs	r2, #1
 8006066:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 800606a:	2104      	movs	r1, #4
 800606c:	4822      	ldr	r0, [pc, #136]	; (80060f8 <scaraInitDuty+0x538>)
 800606e:	f001 fabf 	bl	80075f0 <scaraInitScurve1>
 8006072:	4603      	mov	r3, r0
 8006074:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
										 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.time_total);

				myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8006078:	4a1b      	ldr	r2, [pc, #108]	; (80060e8 <scaraInitDuty+0x528>)
 800607a:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 800607e:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
				myDUTY.task.trajectory_roll.linear.Tf = command.time_total;
 8006082:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8006086:	4a18      	ldr	r2, [pc, #96]	; (80060e8 <scaraInitDuty+0x528>)
 8006088:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800608c:	e9c2 3400 	strd	r3, r4, [r2]
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8006090:	4b15      	ldr	r3, [pc, #84]	; (80060e8 <scaraInitDuty+0x528>)
 8006092:	2202      	movs	r2, #2
 8006094:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, command.time_total);
 8006098:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 800609c:	4618      	mov	r0, r3
 800609e:	f7fa fa41 	bl	8000524 <__aeabi_i2d>
 80060a2:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80060a6:	f7fa faa7 	bl	80005f8 <__aeabi_dmul>
 80060aa:	4603      	mov	r3, r0
 80060ac:	460c      	mov	r4, r1
 80060ae:	ec44 3b16 	vmov	d6, r3, r4
 80060b2:	ed97 7b7a 	vldr	d7, [r7, #488]	; 0x1e8
 80060b6:	eeb0 1a47 	vmov.f32	s2, s14
 80060ba:	eef0 1a67 	vmov.f32	s3, s15
 80060be:	2203      	movs	r2, #3
 80060c0:	eeb0 0a46 	vmov.f32	s0, s12
 80060c4:	eef0 0a66 	vmov.f32	s1, s13
 80060c8:	2105      	movs	r1, #5
 80060ca:	4809      	ldr	r0, [pc, #36]	; (80060f0 <scaraInitDuty+0x530>)
 80060cc:	f000 ff7c 	bl	8006fc8 <scaraInitLinear>
 80060d0:	4603      	mov	r3, r0
 80060d2:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
				myDUTY.time_total = command.time_total;
 80060d6:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 80060da:	4a03      	ldr	r2, [pc, #12]	; (80060e8 <scaraInitDuty+0x528>)
 80060dc:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 80060e0:	e9c2 3400 	strd	r3, r4, [r2]
 80060e4:	e111      	b.n	800630a <scaraInitDuty+0x74a>
 80060e6:	bf00      	nop
 80060e8:	2000c580 	.word	0x2000c580
 80060ec:	2000c698 	.word	0x2000c698
 80060f0:	2000c968 	.word	0x2000c968
 80060f4:	2000c818 	.word	0x2000c818
 80060f8:	2000c718 	.word	0x2000c718

			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 80060fc:	f897 31d9 	ldrb.w	r3, [r7, #473]	; 0x1d9
 8006100:	2b00      	cmp	r3, #0
 8006102:	f040 808b 	bne.w	800621c <scaraInitDuty+0x65c>
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8006106:	4b88      	ldr	r3, [pc, #544]	; (8006328 <scaraInitDuty+0x768>)
 8006108:	2201      	movs	r2, #1
 800610a:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 800610e:	ed97 7bdc 	vldr	d7, [r7, #880]	; 0x370
 8006112:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 8006116:	eeb0 2a46 	vmov.f32	s4, s12
 800611a:	eef0 2a66 	vmov.f32	s5, s13
 800611e:	eeb0 1a47 	vmov.f32	s2, s14
 8006122:	eef0 1a67 	vmov.f32	s3, s15
 8006126:	2200      	movs	r2, #0
 8006128:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 800612c:	2104      	movs	r1, #4
 800612e:	487f      	ldr	r0, [pc, #508]	; (800632c <scaraInitDuty+0x76c>)
 8006130:	f002 fce0 	bl	8008af4 <scaraInitScurve>
 8006134:	4603      	mov	r3, r0
 8006136:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
						 total_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 800613a:	4b7b      	ldr	r3, [pc, #492]	; (8006328 <scaraInitDuty+0x768>)
 800613c:	2201      	movs	r2, #1
 800613e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 8006142:	ed97 7bdc 	vldr	d7, [r7, #880]	; 0x370
 8006146:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 800614a:	eeb0 2a46 	vmov.f32	s4, s12
 800614e:	eef0 2a66 	vmov.f32	s5, s13
 8006152:	eeb0 1a47 	vmov.f32	s2, s14
 8006156:	eef0 1a67 	vmov.f32	s3, s15
 800615a:	2200      	movs	r2, #0
 800615c:	ed97 0b62 	vldr	d0, [r7, #392]	; 0x188
 8006160:	2105      	movs	r1, #5
 8006162:	4873      	ldr	r0, [pc, #460]	; (8006330 <scaraInitDuty+0x770>)
 8006164:	f002 fcc6 	bl	8008af4 <scaraInitScurve>
 8006168:	4603      	mov	r3, r0
 800616a:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
						 angle_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				// synchronous time end
				if(myDUTY.task.trajectory_3d.scurve.Tf > myDUTY.task.trajectory_roll.scurve.Tf) {
 800616e:	4b6e      	ldr	r3, [pc, #440]	; (8006328 <scaraInitDuty+0x768>)
 8006170:	e9d3 017e 	ldrd	r0, r1, [r3, #504]	; 0x1f8
 8006174:	4b6c      	ldr	r3, [pc, #432]	; (8006328 <scaraInitDuty+0x768>)
 8006176:	e9d3 34de 	ldrd	r3, r4, [r3, #888]	; 0x378
 800617a:	461a      	mov	r2, r3
 800617c:	4623      	mov	r3, r4
 800617e:	f7fa fccb 	bl	8000b18 <__aeabi_dcmpgt>
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d024      	beq.n	80061d2 <scaraInitDuty+0x612>
					myDUTY.task.trajectory_roll.scurve.Tf = myDUTY.task.trajectory_3d.scurve.Tf;
 8006188:	4b67      	ldr	r3, [pc, #412]	; (8006328 <scaraInitDuty+0x768>)
 800618a:	e9d3 347e 	ldrd	r3, r4, [r3, #504]	; 0x1f8
 800618e:	4a66      	ldr	r2, [pc, #408]	; (8006328 <scaraInitDuty+0x768>)
 8006190:	e9c2 34de 	strd	r3, r4, [r2, #888]	; 0x378
					status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 8006194:	ed97 7bdc 	vldr	d7, [r7, #880]	; 0x370
 8006198:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 800619c:	eeb0 2a46 	vmov.f32	s4, s12
 80061a0:	eef0 2a66 	vmov.f32	s5, s13
 80061a4:	eeb0 1a47 	vmov.f32	s2, s14
 80061a8:	eef0 1a67 	vmov.f32	s3, s15
 80061ac:	2201      	movs	r2, #1
 80061ae:	ed97 0b62 	vldr	d0, [r7, #392]	; 0x188
 80061b2:	2105      	movs	r1, #5
 80061b4:	485e      	ldr	r0, [pc, #376]	; (8006330 <scaraInitDuty+0x770>)
 80061b6:	f002 fc9d 	bl	8008af4 <scaraInitScurve>
 80061ba:	4603      	mov	r3, r0
 80061bc:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
							 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_3d.scurve.Tf;
 80061c0:	4b59      	ldr	r3, [pc, #356]	; (8006328 <scaraInitDuty+0x768>)
 80061c2:	e9d3 347e 	ldrd	r3, r4, [r3, #504]	; 0x1f8
 80061c6:	4a58      	ldr	r2, [pc, #352]	; (8006328 <scaraInitDuty+0x768>)
 80061c8:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 80061cc:	e9c2 3400 	strd	r3, r4, [r2]
 80061d0:	e09b      	b.n	800630a <scaraInitDuty+0x74a>
				} else {
					myDUTY.task.trajectory_3d.scurve.Tf = myDUTY.task.trajectory_roll.scurve.Tf;
 80061d2:	4b55      	ldr	r3, [pc, #340]	; (8006328 <scaraInitDuty+0x768>)
 80061d4:	e9d3 34de 	ldrd	r3, r4, [r3, #888]	; 0x378
 80061d8:	4a53      	ldr	r2, [pc, #332]	; (8006328 <scaraInitDuty+0x768>)
 80061da:	e9c2 347e 	strd	r3, r4, [r2, #504]	; 0x1f8
					status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 80061de:	ed97 7bdc 	vldr	d7, [r7, #880]	; 0x370
 80061e2:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 80061e6:	eeb0 2a46 	vmov.f32	s4, s12
 80061ea:	eef0 2a66 	vmov.f32	s5, s13
 80061ee:	eeb0 1a47 	vmov.f32	s2, s14
 80061f2:	eef0 1a67 	vmov.f32	s3, s15
 80061f6:	2201      	movs	r2, #1
 80061f8:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 80061fc:	2104      	movs	r1, #4
 80061fe:	484b      	ldr	r0, [pc, #300]	; (800632c <scaraInitDuty+0x76c>)
 8006200:	f002 fc78 	bl	8008af4 <scaraInitScurve>
 8006204:	4603      	mov	r3, r0
 8006206:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
							 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_roll.scurve.Tf;
 800620a:	4b47      	ldr	r3, [pc, #284]	; (8006328 <scaraInitDuty+0x768>)
 800620c:	e9d3 34de 	ldrd	r3, r4, [r3, #888]	; 0x378
 8006210:	4a45      	ldr	r2, [pc, #276]	; (8006328 <scaraInitDuty+0x768>)
 8006212:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8006216:	e9c2 3400 	strd	r3, r4, [r2]
 800621a:	e076      	b.n	800630a <scaraInitDuty+0x74a>
				}
			}else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 800621c:	2308      	movs	r3, #8
 800621e:	f000 bc40 	b.w	8006aa2 <scaraInitDuty+0xee2>
			}
		}else if(DUTY_TRAJECTORY_LINEAR == command.trajec_type){
 8006222:	f897 31d8 	ldrb.w	r3, [r7, #472]	; 0x1d8
 8006226:	2b02      	cmp	r3, #2
 8006228:	d16d      	bne.n	8006306 <scaraInitDuty+0x746>
			myDUTY.time_total = command.time_total;
 800622a:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 800622e:	4a3e      	ldr	r2, [pc, #248]	; (8006328 <scaraInitDuty+0x768>)
 8006230:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8006234:	e9c2 3400 	strd	r3, r4, [r2]
			myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8006238:	4a3b      	ldr	r2, [pc, #236]	; (8006328 <scaraInitDuty+0x768>)
 800623a:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 800623e:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
			myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8006242:	4b39      	ldr	r3, [pc, #228]	; (8006328 <scaraInitDuty+0x768>)
 8006244:	2202      	movs	r2, #2
 8006246:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
			myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 800624a:	4b37      	ldr	r3, [pc, #220]	; (8006328 <scaraInitDuty+0x768>)
 800624c:	2202      	movs	r2, #2
 800624e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
			if(command.modeInit_type == DUTY_MODE_INIT_QT){
 8006252:	f897 31d9 	ldrb.w	r3, [r7, #473]	; 0x1d9
 8006256:	2b03      	cmp	r3, #3
 8006258:	d118      	bne.n	800628c <scaraInitDuty+0x6cc>
				status1 = scaraInitLinear(&(myDUTY.task.trajectory_3d.linear), TRAJECTORY_3D, fabs(total_s), DUTY_MODE_INIT_QT, command.time_total);
 800625a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800625e:	603b      	str	r3, [r7, #0]
 8006260:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8006264:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006268:	607b      	str	r3, [r7, #4]
 800626a:	ed97 7b7a 	vldr	d7, [r7, #488]	; 0x1e8
 800626e:	eeb0 1a47 	vmov.f32	s2, s14
 8006272:	eef0 1a67 	vmov.f32	s3, s15
 8006276:	2203      	movs	r2, #3
 8006278:	ed97 0b00 	vldr	d0, [r7]
 800627c:	2104      	movs	r1, #4
 800627e:	482d      	ldr	r0, [pc, #180]	; (8006334 <scaraInitDuty+0x774>)
 8006280:	f000 fea2 	bl	8006fc8 <scaraInitLinear>
 8006284:	4603      	mov	r3, r0
 8006286:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
 800628a:	e01c      	b.n	80062c6 <scaraInitDuty+0x706>
			}else if(command.modeInit_type == DUTY_MODE_INIT_QV){
 800628c:	f897 31d9 	ldrb.w	r3, [r7, #473]	; 0x1d9
 8006290:	2b02      	cmp	r3, #2
 8006292:	d116      	bne.n	80062c2 <scaraInitDuty+0x702>
				status1 = scaraInitLinear(&(myDUTY.task.trajectory_3d.linear), TRAJECTORY_3D, fabs(total_s), DUTY_MODE_INIT_QV, command.v_factor);
 8006294:	f8d7 51a0 	ldr.w	r5, [r7, #416]	; 0x1a0
 8006298:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800629c:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 80062a0:	ed97 7bdc 	vldr	d7, [r7, #880]	; 0x370
 80062a4:	eeb0 1a47 	vmov.f32	s2, s14
 80062a8:	eef0 1a67 	vmov.f32	s3, s15
 80062ac:	2202      	movs	r2, #2
 80062ae:	ec46 5b10 	vmov	d0, r5, r6
 80062b2:	2104      	movs	r1, #4
 80062b4:	481f      	ldr	r0, [pc, #124]	; (8006334 <scaraInitDuty+0x774>)
 80062b6:	f000 fe87 	bl	8006fc8 <scaraInitLinear>
 80062ba:	4603      	mov	r3, r0
 80062bc:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
 80062c0:	e001      	b.n	80062c6 <scaraInitDuty+0x706>
			}else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 80062c2:	2308      	movs	r3, #8
 80062c4:	e3ed      	b.n	8006aa2 <scaraInitDuty+0xee2>
			}
			status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, command.time_total);
 80062c6:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7fa f92a 	bl	8000524 <__aeabi_i2d>
 80062d0:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80062d4:	f7fa f990 	bl	80005f8 <__aeabi_dmul>
 80062d8:	4603      	mov	r3, r0
 80062da:	460c      	mov	r4, r1
 80062dc:	ec44 3b16 	vmov	d6, r3, r4
 80062e0:	ed97 7b7a 	vldr	d7, [r7, #488]	; 0x1e8
 80062e4:	eeb0 1a47 	vmov.f32	s2, s14
 80062e8:	eef0 1a67 	vmov.f32	s3, s15
 80062ec:	2203      	movs	r2, #3
 80062ee:	eeb0 0a46 	vmov.f32	s0, s12
 80062f2:	eef0 0a66 	vmov.f32	s1, s13
 80062f6:	2105      	movs	r1, #5
 80062f8:	480f      	ldr	r0, [pc, #60]	; (8006338 <scaraInitDuty+0x778>)
 80062fa:	f000 fe65 	bl	8006fc8 <scaraInitLinear>
 80062fe:	4603      	mov	r3, r0
 8006300:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 8006304:	e001      	b.n	800630a <scaraInitDuty+0x74a>
		}else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8006306:	2305      	movs	r3, #5
 8006308:	e3cb      	b.n	8006aa2 <scaraInitDuty+0xee2>
		}
		// Check Init Status
		if ( SCARA_STATUS_OK != status1) {
 800630a:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 800630e:	2b00      	cmp	r3, #0
 8006310:	d002      	beq.n	8006318 <scaraInitDuty+0x758>
			return status1;
 8006312:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8006316:	e3c4      	b.n	8006aa2 <scaraInitDuty+0xee2>
		}
		if ( SCARA_STATUS_OK != status2) {
 8006318:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 800631c:	2b00      	cmp	r3, #0
 800631e:	f000 8392 	beq.w	8006a46 <scaraInitDuty+0xe86>
			return status2;
 8006322:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 8006326:	e3bc      	b.n	8006aa2 <scaraInitDuty+0xee2>
 8006328:	2000c580 	.word	0x2000c580
 800632c:	2000c718 	.word	0x2000c718
 8006330:	2000c898 	.word	0x2000c898
 8006334:	2000c7e8 	.word	0x2000c7e8
 8006338:	2000c968 	.word	0x2000c968
		}


	
	} else if (DUTY_SPACE_JOINT == command.space_type) {
 800633c:	f897 31d5 	ldrb.w	r3, [r7, #469]	; 0x1d5
 8006340:	2b01      	cmp	r3, #1
 8006342:	f040 837e 	bne.w	8006a42 <scaraInitDuty+0xe82>
		/*----------- Space Joint ------------*/
		myDUTY.space_type = DUTY_SPACE_JOINT;// Change type
 8006346:	4ba8      	ldr	r3, [pc, #672]	; (80065e8 <scaraInitDuty+0xa28>)
 8006348:	2201      	movs	r2, #1
 800634a:	701a      	strb	r2, [r3, #0]
		myDUTY.joint.theta1_start	 = positionCurrent.Theta1;
 800634c:	4ba7      	ldr	r3, [pc, #668]	; (80065ec <scaraInitDuty+0xa2c>)
 800634e:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 8006352:	4aa5      	ldr	r2, [pc, #660]	; (80065e8 <scaraInitDuty+0xa28>)
 8006354:	f602 2218 	addw	r2, r2, #2584	; 0xa18
 8006358:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.theta2_start	 = positionCurrent.Theta2;
 800635c:	4ba3      	ldr	r3, [pc, #652]	; (80065ec <scaraInitDuty+0xa2c>)
 800635e:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8006362:	4aa1      	ldr	r2, [pc, #644]	; (80065e8 <scaraInitDuty+0xa28>)
 8006364:	f502 6222 	add.w	r2, r2, #2592	; 0xa20
 8006368:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.d3_start		 = positionCurrent.D3;
 800636c:	4b9f      	ldr	r3, [pc, #636]	; (80065ec <scaraInitDuty+0xa2c>)
 800636e:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 8006372:	4a9d      	ldr	r2, [pc, #628]	; (80065e8 <scaraInitDuty+0xa28>)
 8006374:	f602 2228 	addw	r2, r2, #2600	; 0xa28
 8006378:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.theta4_start 	 = positionCurrent.Theta4;
 800637c:	4b9b      	ldr	r3, [pc, #620]	; (80065ec <scaraInitDuty+0xa2c>)
 800637e:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 8006382:	4a99      	ldr	r2, [pc, #612]	; (80065e8 <scaraInitDuty+0xa28>)
 8006384:	f502 6223 	add.w	r2, r2, #2608	; 0xa30
 8006388:	e9c2 3400 	strd	r3, r4, [r2]

		SCARA_PositionTypeDef	target_point;
		// Change Degree --> Radian
		command.target_point.roll = command.target_point.roll*PI/180.0;
 800638c:	e9d7 0194 	ldrd	r0, r1, [r7, #592]	; 0x250
 8006390:	a393      	add	r3, pc, #588	; (adr r3, 80065e0 <scaraInitDuty+0xa20>)
 8006392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006396:	f7fa f92f 	bl	80005f8 <__aeabi_dmul>
 800639a:	4603      	mov	r3, r0
 800639c:	460c      	mov	r4, r1
 800639e:	4618      	mov	r0, r3
 80063a0:	4621      	mov	r1, r4
 80063a2:	f04f 0200 	mov.w	r2, #0
 80063a6:	4b92      	ldr	r3, [pc, #584]	; (80065f0 <scaraInitDuty+0xa30>)
 80063a8:	f7fa fa50 	bl	800084c <__aeabi_ddiv>
 80063ac:	4603      	mov	r3, r0
 80063ae:	460c      	mov	r4, r1
 80063b0:	e9c7 3494 	strd	r3, r4, [r7, #592]	; 0x250
		// Coordinate
		if( DUTY_COORDINATES_REL == command.coordinate_type) {
 80063b4:	f897 31d4 	ldrb.w	r3, [r7, #468]	; 0x1d4
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d134      	bne.n	8006426 <scaraInitDuty+0x866>
			target_point.x 		= positionCurrent.x + command.target_point.x;
 80063bc:	4b8b      	ldr	r3, [pc, #556]	; (80065ec <scaraInitDuty+0xa2c>)
 80063be:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80063c2:	e9d7 348e 	ldrd	r3, r4, [r7, #568]	; 0x238
 80063c6:	461a      	mov	r2, r3
 80063c8:	4623      	mov	r3, r4
 80063ca:	f7f9 ff5f 	bl	800028c <__adddf3>
 80063ce:	4603      	mov	r3, r0
 80063d0:	460c      	mov	r4, r1
 80063d2:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
			target_point.y 		= positionCurrent.y + command.target_point.y;
 80063d6:	4b85      	ldr	r3, [pc, #532]	; (80065ec <scaraInitDuty+0xa2c>)
 80063d8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80063dc:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 80063e0:	461a      	mov	r2, r3
 80063e2:	4623      	mov	r3, r4
 80063e4:	f7f9 ff52 	bl	800028c <__adddf3>
 80063e8:	4603      	mov	r3, r0
 80063ea:	460c      	mov	r4, r1
 80063ec:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
			target_point.z 		= positionCurrent.z + command.target_point.z;
 80063f0:	4b7e      	ldr	r3, [pc, #504]	; (80065ec <scaraInitDuty+0xa2c>)
 80063f2:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 80063f6:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 80063fa:	461a      	mov	r2, r3
 80063fc:	4623      	mov	r3, r4
 80063fe:	f7f9 ff45 	bl	800028c <__adddf3>
 8006402:	4603      	mov	r3, r0
 8006404:	460c      	mov	r4, r1
 8006406:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
			target_point.roll	= positionCurrent.roll + command.target_point.roll;
 800640a:	4b78      	ldr	r3, [pc, #480]	; (80065ec <scaraInitDuty+0xa2c>)
 800640c:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8006410:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 8006414:	461a      	mov	r2, r3
 8006416:	4623      	mov	r3, r4
 8006418:	f7f9 ff38 	bl	800028c <__adddf3>
 800641c:	4603      	mov	r3, r0
 800641e:	460c      	mov	r4, r1
 8006420:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
 8006424:	e016      	b.n	8006454 <scaraInitDuty+0x894>
		} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8006426:	f897 31d4 	ldrb.w	r3, [r7, #468]	; 0x1d4
 800642a:	2b00      	cmp	r3, #0
 800642c:	d110      	bne.n	8006450 <scaraInitDuty+0x890>
			target_point.x 		= command.target_point.x;
 800642e:	e9d7 348e 	ldrd	r3, r4, [r7, #568]	; 0x238
 8006432:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
			target_point.y 		= command.target_point.y;
 8006436:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 800643a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
			target_point.z 		= command.target_point.z;
 800643e:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 8006442:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
			target_point.roll	= command.target_point.roll;
 8006446:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 800644a:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
 800644e:	e001      	b.n	8006454 <scaraInitDuty+0x894>
		} else {
			return SCARA_STATUS_ERROR_COORDINATE;
 8006450:	230c      	movs	r3, #12
 8006452:	e326      	b.n	8006aa2 <scaraInitDuty+0xee2>
		}

		if( FALSE == kinematicInverse(&target_point, positionCurrent)) {
 8006454:	4c65      	ldr	r4, [pc, #404]	; (80065ec <scaraInitDuty+0xa2c>)
 8006456:	f107 05c8 	add.w	r5, r7, #200	; 0xc8
 800645a:	4668      	mov	r0, sp
 800645c:	f104 0308 	add.w	r3, r4, #8
 8006460:	22b8      	movs	r2, #184	; 0xb8
 8006462:	4619      	mov	r1, r3
 8006464:	f00e fcaa 	bl	8014dbc <memcpy>
 8006468:	e894 000c 	ldmia.w	r4, {r2, r3}
 800646c:	4628      	mov	r0, r5
 800646e:	f7fe f87b 	bl	8004568 <kinematicInverse>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d101      	bne.n	800647c <scaraInitDuty+0x8bc>
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;// Exit with error
 8006478:	2307      	movs	r3, #7
 800647a:	e312      	b.n	8006aa2 <scaraInitDuty+0xee2>
		}
		// Trajectory 4 profile
		double q[4];
		q[0] = target_point.Theta1 - positionCurrent.Theta1;
 800647c:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 8006480:	4b5a      	ldr	r3, [pc, #360]	; (80065ec <scaraInitDuty+0xa2c>)
 8006482:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 8006486:	461a      	mov	r2, r3
 8006488:	4623      	mov	r3, r4
 800648a:	f7f9 fefd 	bl	8000288 <__aeabi_dsub>
 800648e:	4603      	mov	r3, r0
 8006490:	460c      	mov	r4, r1
 8006492:	f107 0208 	add.w	r2, r7, #8
 8006496:	e9c2 3400 	strd	r3, r4, [r2]
		q[1] = target_point.Theta2 - positionCurrent.Theta2;
 800649a:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 800649e:	4b53      	ldr	r3, [pc, #332]	; (80065ec <scaraInitDuty+0xa2c>)
 80064a0:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 80064a4:	461a      	mov	r2, r3
 80064a6:	4623      	mov	r3, r4
 80064a8:	f7f9 feee 	bl	8000288 <__aeabi_dsub>
 80064ac:	4603      	mov	r3, r0
 80064ae:	460c      	mov	r4, r1
 80064b0:	f107 0208 	add.w	r2, r7, #8
 80064b4:	e9c2 3402 	strd	r3, r4, [r2, #8]
		q[2] = target_point.D3 	   - positionCurrent.D3;
 80064b8:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 80064bc:	4b4b      	ldr	r3, [pc, #300]	; (80065ec <scaraInitDuty+0xa2c>)
 80064be:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 80064c2:	461a      	mov	r2, r3
 80064c4:	4623      	mov	r3, r4
 80064c6:	f7f9 fedf 	bl	8000288 <__aeabi_dsub>
 80064ca:	4603      	mov	r3, r0
 80064cc:	460c      	mov	r4, r1
 80064ce:	f107 0208 	add.w	r2, r7, #8
 80064d2:	e9c2 3404 	strd	r3, r4, [r2, #16]
		q[3] = target_point.Theta4 - positionCurrent.Theta4;
 80064d6:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80064da:	4b44      	ldr	r3, [pc, #272]	; (80065ec <scaraInitDuty+0xa2c>)
 80064dc:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 80064e0:	461a      	mov	r2, r3
 80064e2:	4623      	mov	r3, r4
 80064e4:	f7f9 fed0 	bl	8000288 <__aeabi_dsub>
 80064e8:	4603      	mov	r3, r0
 80064ea:	460c      	mov	r4, r1
 80064ec:	f107 0208 	add.w	r2, r7, #8
 80064f0:	e9c2 3406 	strd	r3, r4, [r2, #24]

		// LSPB
		if ( DUTY_TRAJECTORY_LSPB == command.trajec_type) {
 80064f4:	f897 31d8 	ldrb.w	r3, [r7, #472]	; 0x1d8
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	f040 8156 	bne.w	80067aa <scaraInitDuty+0xbea>
			// Mode Init Time
			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 80064fe:	f897 31d9 	ldrb.w	r3, [r7, #473]	; 0x1d9
 8006502:	2b01      	cmp	r3, #1
 8006504:	d161      	bne.n	80065ca <scaraInitDuty+0xa0a>
				for ( uint8_t i = 0; i < 4; i++) {
 8006506:	2300      	movs	r3, #0
 8006508:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 800650c:	e051      	b.n	80065b2 <scaraInitDuty+0x9f2>
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 800650e:	f897 219e 	ldrb.w	r2, [r7, #414]	; 0x19e
 8006512:	4935      	ldr	r1, [pc, #212]	; (80065e8 <scaraInitDuty+0xa28>)
 8006514:	4613      	mov	r3, r2
 8006516:	005b      	lsls	r3, r3, #1
 8006518:	4413      	add	r3, r2
 800651a:	01db      	lsls	r3, r3, #7
 800651c:	440b      	add	r3, r1
 800651e:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006522:	2200      	movs	r2, #0
 8006524:	701a      	strb	r2, [r3, #0]
					myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 8006526:	f897 019e 	ldrb.w	r0, [r7, #414]	; 0x19e
 800652a:	e9d7 127a 	ldrd	r1, r2, [r7, #488]	; 0x1e8
 800652e:	4c2e      	ldr	r4, [pc, #184]	; (80065e8 <scaraInitDuty+0xa28>)
 8006530:	4603      	mov	r3, r0
 8006532:	005b      	lsls	r3, r3, #1
 8006534:	4403      	add	r3, r0
 8006536:	01db      	lsls	r3, r3, #7
 8006538:	4423      	add	r3, r4
 800653a:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 800653e:	e9c3 1200 	strd	r1, r2, [r3]
					status1 = scaraInitLSPB1(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8006542:	f897 219e 	ldrb.w	r2, [r7, #414]	; 0x19e
 8006546:	4613      	mov	r3, r2
 8006548:	005b      	lsls	r3, r3, #1
 800654a:	4413      	add	r3, r2
 800654c:	01db      	lsls	r3, r3, #7
 800654e:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8006552:	4a25      	ldr	r2, [pc, #148]	; (80065e8 <scaraInitDuty+0xa28>)
 8006554:	1898      	adds	r0, r3, r2
 8006556:	f897 319e 	ldrb.w	r3, [r7, #414]	; 0x19e
 800655a:	4a26      	ldr	r2, [pc, #152]	; (80065f4 <scaraInitDuty+0xa34>)
 800655c:	5cd1      	ldrb	r1, [r2, r3]
 800655e:	f897 319e 	ldrb.w	r3, [r7, #414]	; 0x19e
 8006562:	f107 0208 	add.w	r2, r7, #8
 8006566:	00db      	lsls	r3, r3, #3
 8006568:	4413      	add	r3, r2
 800656a:	ed93 7b00 	vldr	d7, [r3]
 800656e:	ed97 6bdc 	vldr	d6, [r7, #880]	; 0x370
 8006572:	ed97 5b7a 	vldr	d5, [r7, #488]	; 0x1e8
 8006576:	eeb0 2a45 	vmov.f32	s4, s10
 800657a:	eef0 2a65 	vmov.f32	s5, s11
 800657e:	eeb0 1a46 	vmov.f32	s2, s12
 8006582:	eef0 1a66 	vmov.f32	s3, s13
 8006586:	2201      	movs	r2, #1
 8006588:	eeb0 0a47 	vmov.f32	s0, s14
 800658c:	eef0 0a67 	vmov.f32	s1, s15
 8006590:	f000 fd86 	bl	80070a0 <scaraInitLSPB1>
 8006594:	4603      	mov	r3, r0
 8006596:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
										q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.time_total);
					if(status1 != SCARA_STATUS_OK){
 800659a:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d002      	beq.n	80065a8 <scaraInitDuty+0x9e8>
						return status1;
 80065a2:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 80065a6:	e27c      	b.n	8006aa2 <scaraInitDuty+0xee2>
				for ( uint8_t i = 0; i < 4; i++) {
 80065a8:	f897 319e 	ldrb.w	r3, [r7, #414]	; 0x19e
 80065ac:	3301      	adds	r3, #1
 80065ae:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 80065b2:	f897 319e 	ldrb.w	r3, [r7, #414]	; 0x19e
 80065b6:	2b03      	cmp	r3, #3
 80065b8:	d9a9      	bls.n	800650e <scaraInitDuty+0x94e>
					}
				}
				myDUTY.time_total = command.time_total;
 80065ba:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 80065be:	4a0a      	ldr	r2, [pc, #40]	; (80065e8 <scaraInitDuty+0xa28>)
 80065c0:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 80065c4:	e9c2 3400 	strd	r3, r4, [r2]
 80065c8:	e23d      	b.n	8006a46 <scaraInitDuty+0xe86>
			// Mode Init Acc
			} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 80065ca:	f897 31d9 	ldrb.w	r3, [r7, #473]	; 0x1d9
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	f040 80e9 	bne.w	80067a6 <scaraInitDuty+0xbe6>
				for ( uint8_t i = 0; i < 4; i++) {
 80065d4:	2300      	movs	r3, #0
 80065d6:	f887 319d 	strb.w	r3, [r7, #413]	; 0x19d
 80065da:	e04a      	b.n	8006672 <scaraInitDuty+0xab2>
 80065dc:	f3af 8000 	nop.w
 80065e0:	60000000 	.word	0x60000000
 80065e4:	400921fb 	.word	0x400921fb
 80065e8:	2000c580 	.word	0x2000c580
 80065ec:	2000d140 	.word	0x2000d140
 80065f0:	40668000 	.word	0x40668000
 80065f4:	20002084 	.word	0x20002084
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 80065f8:	f897 219d 	ldrb.w	r2, [r7, #413]	; 0x19d
 80065fc:	49c8      	ldr	r1, [pc, #800]	; (8006920 <scaraInitDuty+0xd60>)
 80065fe:	4613      	mov	r3, r2
 8006600:	005b      	lsls	r3, r3, #1
 8006602:	4413      	add	r3, r2
 8006604:	01db      	lsls	r3, r3, #7
 8006606:	440b      	add	r3, r1
 8006608:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800660c:	2200      	movs	r2, #0
 800660e:	701a      	strb	r2, [r3, #0]
					status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8006610:	f897 219d 	ldrb.w	r2, [r7, #413]	; 0x19d
 8006614:	4613      	mov	r3, r2
 8006616:	005b      	lsls	r3, r3, #1
 8006618:	4413      	add	r3, r2
 800661a:	01db      	lsls	r3, r3, #7
 800661c:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8006620:	4abf      	ldr	r2, [pc, #764]	; (8006920 <scaraInitDuty+0xd60>)
 8006622:	1898      	adds	r0, r3, r2
 8006624:	f897 319d 	ldrb.w	r3, [r7, #413]	; 0x19d
 8006628:	4abe      	ldr	r2, [pc, #760]	; (8006924 <scaraInitDuty+0xd64>)
 800662a:	5cd1      	ldrb	r1, [r2, r3]
 800662c:	f897 319d 	ldrb.w	r3, [r7, #413]	; 0x19d
 8006630:	f107 0208 	add.w	r2, r7, #8
 8006634:	00db      	lsls	r3, r3, #3
 8006636:	4413      	add	r3, r2
 8006638:	ed93 7b00 	vldr	d7, [r3]
 800663c:	ed97 6bdc 	vldr	d6, [r7, #880]	; 0x370
 8006640:	ed97 5bde 	vldr	d5, [r7, #888]	; 0x378
 8006644:	eeb0 2a45 	vmov.f32	s4, s10
 8006648:	eef0 2a65 	vmov.f32	s5, s11
 800664c:	eeb0 1a46 	vmov.f32	s2, s12
 8006650:	eef0 1a66 	vmov.f32	s3, s13
 8006654:	2200      	movs	r2, #0
 8006656:	eeb0 0a47 	vmov.f32	s0, s14
 800665a:	eef0 0a67 	vmov.f32	s1, s15
 800665e:	f001 fe6b 	bl	8008338 <scaraInitLSPB>
 8006662:	4603      	mov	r3, r0
 8006664:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
				for ( uint8_t i = 0; i < 4; i++) {
 8006668:	f897 319d 	ldrb.w	r3, [r7, #413]	; 0x19d
 800666c:	3301      	adds	r3, #1
 800666e:	f887 319d 	strb.w	r3, [r7, #413]	; 0x19d
 8006672:	f897 319d 	ldrb.w	r3, [r7, #413]	; 0x19d
 8006676:	2b03      	cmp	r3, #3
 8006678:	d9be      	bls.n	80065f8 <scaraInitDuty+0xa38>
										q[i], DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				}
				myDUTY.time_total = 0;
 800667a:	4ba9      	ldr	r3, [pc, #676]	; (8006920 <scaraInitDuty+0xd60>)
 800667c:	f603 2238 	addw	r2, r3, #2616	; 0xa38
 8006680:	f04f 0300 	mov.w	r3, #0
 8006684:	f04f 0400 	mov.w	r4, #0
 8006688:	e9c2 3400 	strd	r3, r4, [r2]
				for ( uint8_t i = 0; i < 4; i++) {
 800668c:	2300      	movs	r3, #0
 800668e:	f887 319c 	strb.w	r3, [r7, #412]	; 0x19c
 8006692:	e02d      	b.n	80066f0 <scaraInitDuty+0xb30>
					if ( myDUTY.joint.trajectory[i].lspb.Tf > myDUTY.time_total) {
 8006694:	f897 219c 	ldrb.w	r2, [r7, #412]	; 0x19c
 8006698:	49a1      	ldr	r1, [pc, #644]	; (8006920 <scaraInitDuty+0xd60>)
 800669a:	4613      	mov	r3, r2
 800669c:	005b      	lsls	r3, r3, #1
 800669e:	4413      	add	r3, r2
 80066a0:	01db      	lsls	r3, r3, #7
 80066a2:	440b      	add	r3, r1
 80066a4:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 80066a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80066ac:	4b9c      	ldr	r3, [pc, #624]	; (8006920 <scaraInitDuty+0xd60>)
 80066ae:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80066b2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80066b6:	461a      	mov	r2, r3
 80066b8:	4623      	mov	r3, r4
 80066ba:	f7fa fa2d 	bl	8000b18 <__aeabi_dcmpgt>
 80066be:	4603      	mov	r3, r0
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d010      	beq.n	80066e6 <scaraInitDuty+0xb26>
						myDUTY.time_total = myDUTY.joint.trajectory[i].lspb.Tf;
 80066c4:	f897 219c 	ldrb.w	r2, [r7, #412]	; 0x19c
 80066c8:	4995      	ldr	r1, [pc, #596]	; (8006920 <scaraInitDuty+0xd60>)
 80066ca:	4613      	mov	r3, r2
 80066cc:	005b      	lsls	r3, r3, #1
 80066ce:	4413      	add	r3, r2
 80066d0:	01db      	lsls	r3, r3, #7
 80066d2:	440b      	add	r3, r1
 80066d4:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 80066d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80066dc:	4a90      	ldr	r2, [pc, #576]	; (8006920 <scaraInitDuty+0xd60>)
 80066de:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 80066e2:	e9c2 3400 	strd	r3, r4, [r2]
				for ( uint8_t i = 0; i < 4; i++) {
 80066e6:	f897 319c 	ldrb.w	r3, [r7, #412]	; 0x19c
 80066ea:	3301      	adds	r3, #1
 80066ec:	f887 319c 	strb.w	r3, [r7, #412]	; 0x19c
 80066f0:	f897 319c 	ldrb.w	r3, [r7, #412]	; 0x19c
 80066f4:	2b03      	cmp	r3, #3
 80066f6:	d9cd      	bls.n	8006694 <scaraInitDuty+0xad4>
					}
				}
				for ( uint8_t i = 0; i < 4; i++) {
 80066f8:	2300      	movs	r3, #0
 80066fa:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
 80066fe:	e04d      	b.n	800679c <scaraInitDuty+0xbdc>
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8006700:	f897 219b 	ldrb.w	r2, [r7, #411]	; 0x19b
 8006704:	4986      	ldr	r1, [pc, #536]	; (8006920 <scaraInitDuty+0xd60>)
 8006706:	4613      	mov	r3, r2
 8006708:	005b      	lsls	r3, r3, #1
 800670a:	4413      	add	r3, r2
 800670c:	01db      	lsls	r3, r3, #7
 800670e:	440b      	add	r3, r1
 8006710:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006714:	2200      	movs	r2, #0
 8006716:	701a      	strb	r2, [r3, #0]
					myDUTY.joint.trajectory[i].lspb.Tf = myDUTY.time_total;
 8006718:	f897 019b 	ldrb.w	r0, [r7, #411]	; 0x19b
 800671c:	4b80      	ldr	r3, [pc, #512]	; (8006920 <scaraInitDuty+0xd60>)
 800671e:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006722:	e9d3 1200 	ldrd	r1, r2, [r3]
 8006726:	4c7e      	ldr	r4, [pc, #504]	; (8006920 <scaraInitDuty+0xd60>)
 8006728:	4603      	mov	r3, r0
 800672a:	005b      	lsls	r3, r3, #1
 800672c:	4403      	add	r3, r0
 800672e:	01db      	lsls	r3, r3, #7
 8006730:	4423      	add	r3, r4
 8006732:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8006736:	e9c3 1200 	strd	r1, r2, [r3]
					status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 800673a:	f897 219b 	ldrb.w	r2, [r7, #411]	; 0x19b
 800673e:	4613      	mov	r3, r2
 8006740:	005b      	lsls	r3, r3, #1
 8006742:	4413      	add	r3, r2
 8006744:	01db      	lsls	r3, r3, #7
 8006746:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 800674a:	4a75      	ldr	r2, [pc, #468]	; (8006920 <scaraInitDuty+0xd60>)
 800674c:	1898      	adds	r0, r3, r2
 800674e:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 8006752:	4a74      	ldr	r2, [pc, #464]	; (8006924 <scaraInitDuty+0xd64>)
 8006754:	5cd1      	ldrb	r1, [r2, r3]
 8006756:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 800675a:	f107 0208 	add.w	r2, r7, #8
 800675e:	00db      	lsls	r3, r3, #3
 8006760:	4413      	add	r3, r2
 8006762:	ed93 7b00 	vldr	d7, [r3]
 8006766:	ed97 6bdc 	vldr	d6, [r7, #880]	; 0x370
 800676a:	ed97 5bde 	vldr	d5, [r7, #888]	; 0x378
 800676e:	eeb0 2a45 	vmov.f32	s4, s10
 8006772:	eef0 2a65 	vmov.f32	s5, s11
 8006776:	eeb0 1a46 	vmov.f32	s2, s12
 800677a:	eef0 1a66 	vmov.f32	s3, s13
 800677e:	2201      	movs	r2, #1
 8006780:	eeb0 0a47 	vmov.f32	s0, s14
 8006784:	eef0 0a67 	vmov.f32	s1, s15
 8006788:	f001 fdd6 	bl	8008338 <scaraInitLSPB>
 800678c:	4603      	mov	r3, r0
 800678e:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
				for ( uint8_t i = 0; i < 4; i++) {
 8006792:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 8006796:	3301      	adds	r3, #1
 8006798:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
 800679c:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 80067a0:	2b03      	cmp	r3, #3
 80067a2:	d9ad      	bls.n	8006700 <scaraInitDuty+0xb40>
 80067a4:	e14f      	b.n	8006a46 <scaraInitDuty+0xe86>
										q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
				}

			} else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 80067a6:	2308      	movs	r3, #8
 80067a8:	e17b      	b.n	8006aa2 <scaraInitDuty+0xee2>
			}
			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == command.trajec_type) {
 80067aa:	f897 31d8 	ldrb.w	r3, [r7, #472]	; 0x1d8
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	f040 8145 	bne.w	8006a3e <scaraInitDuty+0xe7e>
			// Mode Init Time
			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 80067b4:	f897 31d9 	ldrb.w	r3, [r7, #473]	; 0x1d9
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d15a      	bne.n	8006872 <scaraInitDuty+0xcb2>
				for ( uint8_t i = 0; i < 4; i++) {
 80067bc:	2300      	movs	r3, #0
 80067be:	f887 319a 	strb.w	r3, [r7, #410]	; 0x19a
 80067c2:	e04a      	b.n	800685a <scaraInitDuty+0xc9a>
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80067c4:	f897 219a 	ldrb.w	r2, [r7, #410]	; 0x19a
 80067c8:	4955      	ldr	r1, [pc, #340]	; (8006920 <scaraInitDuty+0xd60>)
 80067ca:	4613      	mov	r3, r2
 80067cc:	005b      	lsls	r3, r3, #1
 80067ce:	4413      	add	r3, r2
 80067d0:	01db      	lsls	r3, r3, #7
 80067d2:	440b      	add	r3, r1
 80067d4:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80067d8:	2201      	movs	r2, #1
 80067da:	701a      	strb	r2, [r3, #0]
					myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 80067dc:	f897 019a 	ldrb.w	r0, [r7, #410]	; 0x19a
 80067e0:	e9d7 127a 	ldrd	r1, r2, [r7, #488]	; 0x1e8
 80067e4:	4c4e      	ldr	r4, [pc, #312]	; (8006920 <scaraInitDuty+0xd60>)
 80067e6:	4603      	mov	r3, r0
 80067e8:	005b      	lsls	r3, r3, #1
 80067ea:	4403      	add	r3, r0
 80067ec:	01db      	lsls	r3, r3, #7
 80067ee:	4423      	add	r3, r4
 80067f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067f4:	e9c3 1200 	strd	r1, r2, [r3]
					status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 80067f8:	f897 219a 	ldrb.w	r2, [r7, #410]	; 0x19a
 80067fc:	4613      	mov	r3, r2
 80067fe:	005b      	lsls	r3, r3, #1
 8006800:	4413      	add	r3, r2
 8006802:	01db      	lsls	r3, r3, #7
 8006804:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8006808:	4a45      	ldr	r2, [pc, #276]	; (8006920 <scaraInitDuty+0xd60>)
 800680a:	1898      	adds	r0, r3, r2
 800680c:	f897 319a 	ldrb.w	r3, [r7, #410]	; 0x19a
 8006810:	4a44      	ldr	r2, [pc, #272]	; (8006924 <scaraInitDuty+0xd64>)
 8006812:	5cd1      	ldrb	r1, [r2, r3]
 8006814:	f897 319a 	ldrb.w	r3, [r7, #410]	; 0x19a
 8006818:	f107 0208 	add.w	r2, r7, #8
 800681c:	00db      	lsls	r3, r3, #3
 800681e:	4413      	add	r3, r2
 8006820:	ed93 7b00 	vldr	d7, [r3]
 8006824:	ed97 6bdc 	vldr	d6, [r7, #880]	; 0x370
 8006828:	ed97 5bde 	vldr	d5, [r7, #888]	; 0x378
 800682c:	eeb0 2a45 	vmov.f32	s4, s10
 8006830:	eef0 2a65 	vmov.f32	s5, s11
 8006834:	eeb0 1a46 	vmov.f32	s2, s12
 8006838:	eef0 1a66 	vmov.f32	s3, s13
 800683c:	2201      	movs	r2, #1
 800683e:	eeb0 0a47 	vmov.f32	s0, s14
 8006842:	eef0 0a67 	vmov.f32	s1, s15
 8006846:	f002 f955 	bl	8008af4 <scaraInitScurve>
 800684a:	4603      	mov	r3, r0
 800684c:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
				for ( uint8_t i = 0; i < 4; i++) {
 8006850:	f897 319a 	ldrb.w	r3, [r7, #410]	; 0x19a
 8006854:	3301      	adds	r3, #1
 8006856:	f887 319a 	strb.w	r3, [r7, #410]	; 0x19a
 800685a:	f897 319a 	ldrb.w	r3, [r7, #410]	; 0x19a
 800685e:	2b03      	cmp	r3, #3
 8006860:	d9b0      	bls.n	80067c4 <scaraInitDuty+0xc04>
										q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);

				}
				myDUTY.time_total = command.time_total;
 8006862:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8006866:	4a2e      	ldr	r2, [pc, #184]	; (8006920 <scaraInitDuty+0xd60>)
 8006868:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 800686c:	e9c2 3400 	strd	r3, r4, [r2]
 8006870:	e0e9      	b.n	8006a46 <scaraInitDuty+0xe86>
			// Mode Init Acc
			} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8006872:	f897 31d9 	ldrb.w	r3, [r7, #473]	; 0x1d9
 8006876:	2b00      	cmp	r3, #0
 8006878:	f040 80df 	bne.w	8006a3a <scaraInitDuty+0xe7a>
				for ( uint8_t i = 0; i < 4; i++) {
 800687c:	2300      	movs	r3, #0
 800687e:	f887 3199 	strb.w	r3, [r7, #409]	; 0x199
 8006882:	e03c      	b.n	80068fe <scaraInitDuty+0xd3e>
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8006884:	f897 2199 	ldrb.w	r2, [r7, #409]	; 0x199
 8006888:	4925      	ldr	r1, [pc, #148]	; (8006920 <scaraInitDuty+0xd60>)
 800688a:	4613      	mov	r3, r2
 800688c:	005b      	lsls	r3, r3, #1
 800688e:	4413      	add	r3, r2
 8006890:	01db      	lsls	r3, r3, #7
 8006892:	440b      	add	r3, r1
 8006894:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006898:	2201      	movs	r2, #1
 800689a:	701a      	strb	r2, [r3, #0]
					status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 800689c:	f897 2199 	ldrb.w	r2, [r7, #409]	; 0x199
 80068a0:	4613      	mov	r3, r2
 80068a2:	005b      	lsls	r3, r3, #1
 80068a4:	4413      	add	r3, r2
 80068a6:	01db      	lsls	r3, r3, #7
 80068a8:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 80068ac:	4a1c      	ldr	r2, [pc, #112]	; (8006920 <scaraInitDuty+0xd60>)
 80068ae:	1898      	adds	r0, r3, r2
 80068b0:	f897 3199 	ldrb.w	r3, [r7, #409]	; 0x199
 80068b4:	4a1b      	ldr	r2, [pc, #108]	; (8006924 <scaraInitDuty+0xd64>)
 80068b6:	5cd1      	ldrb	r1, [r2, r3]
 80068b8:	f897 3199 	ldrb.w	r3, [r7, #409]	; 0x199
 80068bc:	f107 0208 	add.w	r2, r7, #8
 80068c0:	00db      	lsls	r3, r3, #3
 80068c2:	4413      	add	r3, r2
 80068c4:	ed93 7b00 	vldr	d7, [r3]
 80068c8:	ed97 6bdc 	vldr	d6, [r7, #880]	; 0x370
 80068cc:	ed97 5bde 	vldr	d5, [r7, #888]	; 0x378
 80068d0:	eeb0 2a45 	vmov.f32	s4, s10
 80068d4:	eef0 2a65 	vmov.f32	s5, s11
 80068d8:	eeb0 1a46 	vmov.f32	s2, s12
 80068dc:	eef0 1a66 	vmov.f32	s3, s13
 80068e0:	2200      	movs	r2, #0
 80068e2:	eeb0 0a47 	vmov.f32	s0, s14
 80068e6:	eef0 0a67 	vmov.f32	s1, s15
 80068ea:	f002 f903 	bl	8008af4 <scaraInitScurve>
 80068ee:	4603      	mov	r3, r0
 80068f0:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
				for ( uint8_t i = 0; i < 4; i++) {
 80068f4:	f897 3199 	ldrb.w	r3, [r7, #409]	; 0x199
 80068f8:	3301      	adds	r3, #1
 80068fa:	f887 3199 	strb.w	r3, [r7, #409]	; 0x199
 80068fe:	f897 3199 	ldrb.w	r3, [r7, #409]	; 0x199
 8006902:	2b03      	cmp	r3, #3
 8006904:	d9be      	bls.n	8006884 <scaraInitDuty+0xcc4>
										q[i], DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				}
				myDUTY.time_total = 0;
 8006906:	4b06      	ldr	r3, [pc, #24]	; (8006920 <scaraInitDuty+0xd60>)
 8006908:	f603 2238 	addw	r2, r3, #2616	; 0xa38
 800690c:	f04f 0300 	mov.w	r3, #0
 8006910:	f04f 0400 	mov.w	r4, #0
 8006914:	e9c2 3400 	strd	r3, r4, [r2]
				for ( uint8_t i = 0; i < 4; i++) {
 8006918:	2300      	movs	r3, #0
 800691a:	f887 3198 	strb.w	r3, [r7, #408]	; 0x198
 800691e:	e031      	b.n	8006984 <scaraInitDuty+0xdc4>
 8006920:	2000c580 	.word	0x2000c580
 8006924:	20002084 	.word	0x20002084
					if ( myDUTY.joint.trajectory[i].scurve.Tf > myDUTY.time_total) {
 8006928:	f897 2198 	ldrb.w	r2, [r7, #408]	; 0x198
 800692c:	4961      	ldr	r1, [pc, #388]	; (8006ab4 <scaraInitDuty+0xef4>)
 800692e:	4613      	mov	r3, r2
 8006930:	005b      	lsls	r3, r3, #1
 8006932:	4413      	add	r3, r2
 8006934:	01db      	lsls	r3, r3, #7
 8006936:	440b      	add	r3, r1
 8006938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800693c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006940:	4b5c      	ldr	r3, [pc, #368]	; (8006ab4 <scaraInitDuty+0xef4>)
 8006942:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006946:	e9d3 3400 	ldrd	r3, r4, [r3]
 800694a:	461a      	mov	r2, r3
 800694c:	4623      	mov	r3, r4
 800694e:	f7fa f8e3 	bl	8000b18 <__aeabi_dcmpgt>
 8006952:	4603      	mov	r3, r0
 8006954:	2b00      	cmp	r3, #0
 8006956:	d010      	beq.n	800697a <scaraInitDuty+0xdba>
						myDUTY.time_total = myDUTY.joint.trajectory[i].scurve.Tf;
 8006958:	f897 2198 	ldrb.w	r2, [r7, #408]	; 0x198
 800695c:	4955      	ldr	r1, [pc, #340]	; (8006ab4 <scaraInitDuty+0xef4>)
 800695e:	4613      	mov	r3, r2
 8006960:	005b      	lsls	r3, r3, #1
 8006962:	4413      	add	r3, r2
 8006964:	01db      	lsls	r3, r3, #7
 8006966:	440b      	add	r3, r1
 8006968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800696c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006970:	4a50      	ldr	r2, [pc, #320]	; (8006ab4 <scaraInitDuty+0xef4>)
 8006972:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8006976:	e9c2 3400 	strd	r3, r4, [r2]
				for ( uint8_t i = 0; i < 4; i++) {
 800697a:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800697e:	3301      	adds	r3, #1
 8006980:	f887 3198 	strb.w	r3, [r7, #408]	; 0x198
 8006984:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 8006988:	2b03      	cmp	r3, #3
 800698a:	d9cd      	bls.n	8006928 <scaraInitDuty+0xd68>
					}
				}
				for ( uint8_t i = 0; i < 4; i++) {
 800698c:	2300      	movs	r3, #0
 800698e:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
 8006992:	e04d      	b.n	8006a30 <scaraInitDuty+0xe70>
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8006994:	f897 2197 	ldrb.w	r2, [r7, #407]	; 0x197
 8006998:	4946      	ldr	r1, [pc, #280]	; (8006ab4 <scaraInitDuty+0xef4>)
 800699a:	4613      	mov	r3, r2
 800699c:	005b      	lsls	r3, r3, #1
 800699e:	4413      	add	r3, r2
 80069a0:	01db      	lsls	r3, r3, #7
 80069a2:	440b      	add	r3, r1
 80069a4:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80069a8:	2201      	movs	r2, #1
 80069aa:	701a      	strb	r2, [r3, #0]
					myDUTY.joint.trajectory[i].scurve.Tf = myDUTY.time_total;
 80069ac:	f897 0197 	ldrb.w	r0, [r7, #407]	; 0x197
 80069b0:	4b40      	ldr	r3, [pc, #256]	; (8006ab4 <scaraInitDuty+0xef4>)
 80069b2:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80069b6:	e9d3 1200 	ldrd	r1, r2, [r3]
 80069ba:	4c3e      	ldr	r4, [pc, #248]	; (8006ab4 <scaraInitDuty+0xef4>)
 80069bc:	4603      	mov	r3, r0
 80069be:	005b      	lsls	r3, r3, #1
 80069c0:	4403      	add	r3, r0
 80069c2:	01db      	lsls	r3, r3, #7
 80069c4:	4423      	add	r3, r4
 80069c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069ca:	e9c3 1200 	strd	r1, r2, [r3]
					status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 80069ce:	f897 2197 	ldrb.w	r2, [r7, #407]	; 0x197
 80069d2:	4613      	mov	r3, r2
 80069d4:	005b      	lsls	r3, r3, #1
 80069d6:	4413      	add	r3, r2
 80069d8:	01db      	lsls	r3, r3, #7
 80069da:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 80069de:	4a35      	ldr	r2, [pc, #212]	; (8006ab4 <scaraInitDuty+0xef4>)
 80069e0:	1898      	adds	r0, r3, r2
 80069e2:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 80069e6:	4a34      	ldr	r2, [pc, #208]	; (8006ab8 <scaraInitDuty+0xef8>)
 80069e8:	5cd1      	ldrb	r1, [r2, r3]
 80069ea:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 80069ee:	f107 0208 	add.w	r2, r7, #8
 80069f2:	00db      	lsls	r3, r3, #3
 80069f4:	4413      	add	r3, r2
 80069f6:	ed93 7b00 	vldr	d7, [r3]
 80069fa:	ed97 6bdc 	vldr	d6, [r7, #880]	; 0x370
 80069fe:	ed97 5bde 	vldr	d5, [r7, #888]	; 0x378
 8006a02:	eeb0 2a45 	vmov.f32	s4, s10
 8006a06:	eef0 2a65 	vmov.f32	s5, s11
 8006a0a:	eeb0 1a46 	vmov.f32	s2, s12
 8006a0e:	eef0 1a66 	vmov.f32	s3, s13
 8006a12:	2201      	movs	r2, #1
 8006a14:	eeb0 0a47 	vmov.f32	s0, s14
 8006a18:	eef0 0a67 	vmov.f32	s1, s15
 8006a1c:	f002 f86a 	bl	8008af4 <scaraInitScurve>
 8006a20:	4603      	mov	r3, r0
 8006a22:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
				for ( uint8_t i = 0; i < 4; i++) {
 8006a26:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
 8006a30:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8006a34:	2b03      	cmp	r3, #3
 8006a36:	d9ad      	bls.n	8006994 <scaraInitDuty+0xdd4>
 8006a38:	e005      	b.n	8006a46 <scaraInitDuty+0xe86>
										q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
				}

			} else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 8006a3a:	2308      	movs	r3, #8
 8006a3c:	e031      	b.n	8006aa2 <scaraInitDuty+0xee2>
			}

			} else {
				return SCARA_STATUS_ERROR_TRAJECTORY;
 8006a3e:	2305      	movs	r3, #5
 8006a40:	e02f      	b.n	8006aa2 <scaraInitDuty+0xee2>
			}

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 8006a42:	2302      	movs	r3, #2
 8006a44:	e02d      	b.n	8006aa2 <scaraInitDuty+0xee2>
	}

	// Reset time and distance
	positionCurrent.t = 0;
 8006a46:	4a1d      	ldr	r2, [pc, #116]	; (8006abc <scaraInitDuty+0xefc>)
 8006a48:	f04f 0300 	mov.w	r3, #0
 8006a4c:	f04f 0400 	mov.w	r4, #0
 8006a50:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	positionCurrent.total_time = myDUTY.time_total;
 8006a54:	4b17      	ldr	r3, [pc, #92]	; (8006ab4 <scaraInitDuty+0xef4>)
 8006a56:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006a5a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006a5e:	4a17      	ldr	r2, [pc, #92]	; (8006abc <scaraInitDuty+0xefc>)
 8006a60:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	positionNext.t = 0;
 8006a64:	4a16      	ldr	r2, [pc, #88]	; (8006ac0 <scaraInitDuty+0xf00>)
 8006a66:	f04f 0300 	mov.w	r3, #0
 8006a6a:	f04f 0400 	mov.w	r4, #0
 8006a6e:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	positionNext.total_time = myDUTY.time_total;
 8006a72:	4b10      	ldr	r3, [pc, #64]	; (8006ab4 <scaraInitDuty+0xef4>)
 8006a74:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006a78:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006a7c:	4a10      	ldr	r2, [pc, #64]	; (8006ac0 <scaraInitDuty+0xf00>)
 8006a7e:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	positionTrue.t = 0;
 8006a82:	4a10      	ldr	r2, [pc, #64]	; (8006ac4 <scaraInitDuty+0xf04>)
 8006a84:	f04f 0300 	mov.w	r3, #0
 8006a88:	f04f 0400 	mov.w	r4, #0
 8006a8c:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	positionTrue.total_time = myDUTY.time_total;
 8006a90:	4b08      	ldr	r3, [pc, #32]	; (8006ab4 <scaraInitDuty+0xef4>)
 8006a92:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006a96:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006a9a:	4a0a      	ldr	r2, [pc, #40]	; (8006ac4 <scaraInitDuty+0xf04>)
 8006a9c:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

	return SCARA_STATUS_OK;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8006aae:	b004      	add	sp, #16
 8006ab0:	4770      	bx	lr
 8006ab2:	bf00      	nop
 8006ab4:	2000c580 	.word	0x2000c580
 8006ab8:	20002084 	.word	0x20002084
 8006abc:	2000d140 	.word	0x2000d140
 8006ac0:	2000d2c0 	.word	0x2000d2c0
 8006ac4:	2000d200 	.word	0x2000d200

08006ac8 <scaraInitLine>:

/* Compute straight line path parameters */
SCARA_StatusTypeDef	scaraInitLine		(Path_Line_TypeDef *line,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end) {
 8006ac8:	b082      	sub	sp, #8
 8006aca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006acc:	b0b1      	sub	sp, #196	; 0xc4
 8006ace:	af2e      	add	r7, sp, #184	; 0xb8
 8006ad0:	6078      	str	r0, [r7, #4]
 8006ad2:	f107 0120 	add.w	r1, r7, #32
 8006ad6:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE ==  kinematicInverse(&end, start)) {
 8006ada:	f107 04e0 	add.w	r4, r7, #224	; 0xe0
 8006ade:	4668      	mov	r0, sp
 8006ae0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006ae4:	22b8      	movs	r2, #184	; 0xb8
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	f00e f968 	bl	8014dbc <memcpy>
 8006aec:	f107 0320 	add.w	r3, r7, #32
 8006af0:	cb0c      	ldmia	r3, {r2, r3}
 8006af2:	4620      	mov	r0, r4
 8006af4:	f7fd fd38 	bl	8004568 <kinematicInverse>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d101      	bne.n	8006b02 <scaraInitLine+0x3a>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8006afe:	2307      	movs	r3, #7
 8006b00:	e09e      	b.n	8006c40 <scaraInitLine+0x178>
	}
	// Init line params
	line->x1 = end.x;
 8006b02:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	e9c2 3402 	strd	r3, r4, [r2, #8]
	line->y1 = end.y;
 8006b0c:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	e9c2 3406 	strd	r3, r4, [r2, #24]
	line->z1 = end.z;
 8006b16:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	line->x0 = start.x;
 8006b20:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	e9c2 3400 	strd	r3, r4, [r2]
	line->y0 = start.y;
 8006b2a:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	e9c2 3404 	strd	r3, r4, [r2, #16]
	line->z0 = start.z;
 8006b34:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	e9c2 3408 	strd	r3, r4, [r2, #32]
	line->denta_x = end.x  -  start.x;
 8006b3e:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8006b42:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8006b46:	461a      	mov	r2, r3
 8006b48:	4623      	mov	r3, r4
 8006b4a:	f7f9 fb9d 	bl	8000288 <__aeabi_dsub>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	460c      	mov	r4, r1
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	line->denta_y = end.y  -  start.y;
 8006b58:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 8006b5c:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8006b60:	461a      	mov	r2, r3
 8006b62:	4623      	mov	r3, r4
 8006b64:	f7f9 fb90 	bl	8000288 <__aeabi_dsub>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	460c      	mov	r4, r1
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	line->denta_z = end.z  -  start.z;
 8006b72:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8006b76:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	4623      	mov	r3, r4
 8006b7e:	f7f9 fb83 	bl	8000288 <__aeabi_dsub>
 8006b82:	4603      	mov	r3, r0
 8006b84:	460c      	mov	r4, r1
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8006b98:	461a      	mov	r2, r3
 8006b9a:	4623      	mov	r3, r4
 8006b9c:	f7f9 fd2c 	bl	80005f8 <__aeabi_dmul>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	460c      	mov	r4, r1
 8006ba4:	461d      	mov	r5, r3
 8006ba6:	4626      	mov	r6, r4
			       +(line->denta_y)*(line->denta_y)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	4623      	mov	r3, r4
 8006bb8:	f7f9 fd1e 	bl	80005f8 <__aeabi_dmul>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	460c      	mov	r4, r1
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	4623      	mov	r3, r4
 8006bc4:	4628      	mov	r0, r5
 8006bc6:	4631      	mov	r1, r6
 8006bc8:	f7f9 fb60 	bl	800028c <__adddf3>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	460c      	mov	r4, r1
 8006bd0:	461d      	mov	r5, r3
 8006bd2:	4626      	mov	r6, r4
				   +(line->denta_z)*(line->denta_z));
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	e9d3 3410 	ldrd	r3, r4, [r3, #64]	; 0x40
 8006be0:	461a      	mov	r2, r3
 8006be2:	4623      	mov	r3, r4
 8006be4:	f7f9 fd08 	bl	80005f8 <__aeabi_dmul>
 8006be8:	4603      	mov	r3, r0
 8006bea:	460c      	mov	r4, r1
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 8006bec:	461a      	mov	r2, r3
 8006bee:	4623      	mov	r3, r4
 8006bf0:	4628      	mov	r0, r5
 8006bf2:	4631      	mov	r1, r6
 8006bf4:	f7f9 fb4a 	bl	800028c <__adddf3>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	460c      	mov	r4, r1
 8006bfc:	ec44 3b17 	vmov	d7, r3, r4
 8006c00:	eeb0 0a47 	vmov.f32	s0, s14
 8006c04:	eef0 0a67 	vmov.f32	s1, s15
 8006c08:	f011 ffe0 	bl	8018bcc <sqrt>
 8006c0c:	eeb0 7a40 	vmov.f32	s14, s0
 8006c10:	eef0 7a60 	vmov.f32	s15, s1
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	line->x_current = line->x0;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	line->y_current = line->y0;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	line->z_current = line->z0;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

	return SCARA_STATUS_OK;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8006c4a:	b002      	add	sp, #8
 8006c4c:	4770      	bx	lr
	...

08006c50 <scaraInitCircle>:
/* Compute circular path parameters */
SCARA_StatusTypeDef	scaraInitCircle		(Path_Circle_TypeDef *circle,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end,
										SCARA_PositionTypeDef center,
										int32_t dir){
 8006c50:	b082      	sub	sp, #8
 8006c52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c56:	b0c5      	sub	sp, #276	; 0x114
 8006c58:	af2e      	add	r7, sp, #184	; 0xb8
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8006c60:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE == kinematicInverse(&end, start) ) {
 8006c64:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 8006c68:	4668      	mov	r0, sp
 8006c6a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006c6e:	22b8      	movs	r2, #184	; 0xb8
 8006c70:	4619      	mov	r1, r3
 8006c72:	f00e f8a3 	bl	8014dbc <memcpy>
 8006c76:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006c7a:	cb0c      	ldmia	r3, {r2, r3}
 8006c7c:	4620      	mov	r0, r4
 8006c7e:	f7fd fc73 	bl	8004568 <kinematicInverse>
 8006c82:	4603      	mov	r3, r0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d101      	bne.n	8006c8c <scaraInitCircle+0x3c>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8006c88:	2307      	movs	r3, #7
 8006c8a:	e187      	b.n	8006f9c <scaraInitCircle+0x34c>
	}

//	if( 1 != dir && -1 != dir) {
//		return SCARA_STATUS_ERROR_PARA;// error direction param !!!
//	}
	if(dir != 1 && dir != -1){
 8006c8c:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d006      	beq.n	8006ca2 <scaraInitCircle+0x52>
 8006c94:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8006c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c9c:	d001      	beq.n	8006ca2 <scaraInitCircle+0x52>
		return SCARA_STATUS_ERROR_PARA;
 8006c9e:	2306      	movs	r3, #6
 8006ca0:	e17c      	b.n	8006f9c <scaraInitCircle+0x34c>
	}

	double x_start, y_start, x_stop, y_stop;
	double r1, r2, angle_start, angle_stop, delta_angle;
	x_start = start.x - center.x;
 8006ca2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006ca6:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 8006caa:	461a      	mov	r2, r3
 8006cac:	4623      	mov	r3, r4
 8006cae:	f7f9 faeb 	bl	8000288 <__aeabi_dsub>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	460c      	mov	r4, r1
 8006cb6:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	y_start = start.y - center.y;
 8006cba:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8006cbe:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	4623      	mov	r3, r4
 8006cc6:	f7f9 fadf 	bl	8000288 <__aeabi_dsub>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	460c      	mov	r4, r1
 8006cce:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
	x_stop  = end.x  - center.x;
 8006cd2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8006cd6:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 8006cda:	461a      	mov	r2, r3
 8006cdc:	4623      	mov	r3, r4
 8006cde:	f7f9 fad3 	bl	8000288 <__aeabi_dsub>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	460c      	mov	r4, r1
 8006ce6:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	y_stop  = end.y  - center.y;
 8006cea:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8006cee:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	4623      	mov	r3, r4
 8006cf6:	f7f9 fac7 	bl	8000288 <__aeabi_dsub>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	460c      	mov	r4, r1
 8006cfe:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	r1 = sqrt(x_start*x_start + y_start*y_start);
 8006d02:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006d06:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006d0a:	f7f9 fc75 	bl	80005f8 <__aeabi_dmul>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	460c      	mov	r4, r1
 8006d12:	469a      	mov	sl, r3
 8006d14:	46a3      	mov	fp, r4
 8006d16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006d1a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006d1e:	f7f9 fc6b 	bl	80005f8 <__aeabi_dmul>
 8006d22:	4603      	mov	r3, r0
 8006d24:	460c      	mov	r4, r1
 8006d26:	461a      	mov	r2, r3
 8006d28:	4623      	mov	r3, r4
 8006d2a:	4650      	mov	r0, sl
 8006d2c:	4659      	mov	r1, fp
 8006d2e:	f7f9 faad 	bl	800028c <__adddf3>
 8006d32:	4603      	mov	r3, r0
 8006d34:	460c      	mov	r4, r1
 8006d36:	ec44 3b17 	vmov	d7, r3, r4
 8006d3a:	eeb0 0a47 	vmov.f32	s0, s14
 8006d3e:	eef0 0a67 	vmov.f32	s1, s15
 8006d42:	f011 ff43 	bl	8018bcc <sqrt>
 8006d46:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	r2 = sqrt(x_stop*x_stop + y_stop*y_stop);
 8006d4a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006d4e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006d52:	f7f9 fc51 	bl	80005f8 <__aeabi_dmul>
 8006d56:	4603      	mov	r3, r0
 8006d58:	460c      	mov	r4, r1
 8006d5a:	469a      	mov	sl, r3
 8006d5c:	46a3      	mov	fp, r4
 8006d5e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006d62:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8006d66:	f7f9 fc47 	bl	80005f8 <__aeabi_dmul>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	460c      	mov	r4, r1
 8006d6e:	461a      	mov	r2, r3
 8006d70:	4623      	mov	r3, r4
 8006d72:	4650      	mov	r0, sl
 8006d74:	4659      	mov	r1, fp
 8006d76:	f7f9 fa89 	bl	800028c <__adddf3>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	460c      	mov	r4, r1
 8006d7e:	ec44 3b17 	vmov	d7, r3, r4
 8006d82:	eeb0 0a47 	vmov.f32	s0, s14
 8006d86:	eef0 0a67 	vmov.f32	s1, s15
 8006d8a:	f011 ff1f 	bl	8018bcc <sqrt>
 8006d8e:	ed87 0b08 	vstr	d0, [r7, #32]

	if( 1.0 < fabs(r1 - r2)) {
 8006d92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006d96:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006d9a:	f7f9 fa75 	bl	8000288 <__aeabi_dsub>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	460c      	mov	r4, r1
 8006da2:	4698      	mov	r8, r3
 8006da4:	f024 4900 	bic.w	r9, r4, #2147483648	; 0x80000000
 8006da8:	f04f 0200 	mov.w	r2, #0
 8006dac:	4b84      	ldr	r3, [pc, #528]	; (8006fc0 <scaraInitCircle+0x370>)
 8006dae:	4640      	mov	r0, r8
 8006db0:	4649      	mov	r1, r9
 8006db2:	f7f9 feb1 	bl	8000b18 <__aeabi_dcmpgt>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d001      	beq.n	8006dc0 <scaraInitCircle+0x170>
		return SCARA_STATUS_ERROR_PARA; //start & stop are not in a circle together !!
 8006dbc:	2306      	movs	r3, #6
 8006dbe:	e0ed      	b.n	8006f9c <scaraInitCircle+0x34c>
	}

	if (r1 < 0.1 || r2 < 0.1) {
 8006dc0:	a37b      	add	r3, pc, #492	; (adr r3, 8006fb0 <scaraInitCircle+0x360>)
 8006dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006dca:	f7f9 fe87 	bl	8000adc <__aeabi_dcmplt>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d109      	bne.n	8006de8 <scaraInitCircle+0x198>
 8006dd4:	a376      	add	r3, pc, #472	; (adr r3, 8006fb0 <scaraInitCircle+0x360>)
 8006dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dda:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006dde:	f7f9 fe7d 	bl	8000adc <__aeabi_dcmplt>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d001      	beq.n	8006dec <scaraInitCircle+0x19c>
		return SCARA_STATUS_ERROR_PARA; //start and center almost in the same phace, radius = 0 !!
 8006de8:	2306      	movs	r3, #6
 8006dea:	e0d7      	b.n	8006f9c <scaraInitCircle+0x34c>
	}

	angle_start = atan2(y_start, x_start);
 8006dec:	ed97 1b12 	vldr	d1, [r7, #72]	; 0x48
 8006df0:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8006df4:	f011 fee8 	bl	8018bc8 <atan2>
 8006df8:	ed87 0b06 	vstr	d0, [r7, #24]
	angle_stop  = atan2(y_stop, x_stop);
 8006dfc:	ed97 1b0e 	vldr	d1, [r7, #56]	; 0x38
 8006e00:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8006e04:	f011 fee0 	bl	8018bc8 <atan2>
 8006e08:	ed87 0b04 	vstr	d0, [r7, #16]
	delta_angle = angle_stop - angle_start;
 8006e0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e10:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006e14:	f7f9 fa38 	bl	8000288 <__aeabi_dsub>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	460c      	mov	r4, r1
 8006e1c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50

	if (delta_angle < 0 && dir > 0) {
 8006e20:	f04f 0200 	mov.w	r2, #0
 8006e24:	f04f 0300 	mov.w	r3, #0
 8006e28:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006e2c:	f7f9 fe56 	bl	8000adc <__aeabi_dcmplt>
 8006e30:	4603      	mov	r3, r0
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d015      	beq.n	8006e62 <scaraInitCircle+0x212>
 8006e36:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	dd11      	ble.n	8006e62 <scaraInitCircle+0x212>
		delta_angle = 2*PI - fabs(delta_angle); //this state mean that the arc radius is over 180
 8006e3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e40:	603b      	str	r3, [r7, #0]
 8006e42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e48:	607b      	str	r3, [r7, #4]
 8006e4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e4e:	a15a      	add	r1, pc, #360	; (adr r1, 8006fb8 <scaraInitCircle+0x368>)
 8006e50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e54:	f7f9 fa18 	bl	8000288 <__aeabi_dsub>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	460c      	mov	r4, r1
 8006e5c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
 8006e60:	e01d      	b.n	8006e9e <scaraInitCircle+0x24e>
	}else if(delta_angle > 0 && dir < 0){
 8006e62:	f04f 0200 	mov.w	r2, #0
 8006e66:	f04f 0300 	mov.w	r3, #0
 8006e6a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006e6e:	f7f9 fe53 	bl	8000b18 <__aeabi_dcmpgt>
 8006e72:	4603      	mov	r3, r0
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d012      	beq.n	8006e9e <scaraInitCircle+0x24e>
 8006e78:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	da0e      	bge.n	8006e9e <scaraInitCircle+0x24e>
		delta_angle = 2*PI - fabs(delta_angle);
 8006e80:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 8006e82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e84:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 8006e88:	462a      	mov	r2, r5
 8006e8a:	4633      	mov	r3, r6
 8006e8c:	a14a      	add	r1, pc, #296	; (adr r1, 8006fb8 <scaraInitCircle+0x368>)
 8006e8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e92:	f7f9 f9f9 	bl	8000288 <__aeabi_dsub>
 8006e96:	4603      	mov	r3, r0
 8006e98:	460c      	mov	r4, r1
 8006e9a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	}
	if(delta_angle*dir < 0){
 8006e9e:	f8d7 02c0 	ldr.w	r0, [r7, #704]	; 0x2c0
 8006ea2:	f7f9 fb3f 	bl	8000524 <__aeabi_i2d>
 8006ea6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006eaa:	f7f9 fba5 	bl	80005f8 <__aeabi_dmul>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	460c      	mov	r4, r1
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	4621      	mov	r1, r4
 8006eb6:	f04f 0200 	mov.w	r2, #0
 8006eba:	f04f 0300 	mov.w	r3, #0
 8006ebe:	f7f9 fe0d 	bl	8000adc <__aeabi_dcmplt>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d005      	beq.n	8006ed4 <scaraInitCircle+0x284>
		delta_angle = fabs(delta_angle);
 8006ec8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006eca:	653b      	str	r3, [r7, #80]	; 0x50
 8006ecc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ece:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ed2:	657b      	str	r3, [r7, #84]	; 0x54

//	if ( 0 > dir) {
//		delta_angle = 2*PI - delta_angle;
//	}
	// Init circle params
	circle->dir = dir;
 8006ed4:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8006ed8:	b25a      	sxtb	r2, r3
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	701a      	strb	r2, [r3, #0]
	circle->radius = r1;
 8006ede:	68fa      	ldr	r2, [r7, #12]
 8006ee0:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8006ee4:	e9c2 3402 	strd	r3, r4, [r2, #8]
	circle->angle_start = angle_start;
 8006ee8:	68fa      	ldr	r2, [r7, #12]
 8006eea:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8006eee:	e9c2 3404 	strd	r3, r4, [r2, #16]
	circle->angle_stop  = angle_stop;
 8006ef2:	68fa      	ldr	r2, [r7, #12]
 8006ef4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006ef8:	e9c2 3406 	strd	r3, r4, [r2, #24]
	circle->total_angle = delta_angle;
 8006efc:	68fa      	ldr	r2, [r7, #12]
 8006efe:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8006f02:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	circle->total_s = delta_angle*r1;
 8006f06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006f0a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006f0e:	f7f9 fb73 	bl	80005f8 <__aeabi_dmul>
 8006f12:	4603      	mov	r3, r0
 8006f14:	460c      	mov	r4, r1
 8006f16:	68fa      	ldr	r2, [r7, #12]
 8006f18:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	circle->x0 = start.x;
 8006f1c:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8006f20:	68fa      	ldr	r2, [r7, #12]
 8006f22:	e9c2 3408 	strd	r3, r4, [r2, #32]
	circle->y0 = start.y;
 8006f26:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8006f2a:	68fa      	ldr	r2, [r7, #12]
 8006f2c:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	circle->x1 = end.x;
 8006f30:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	; 0x188
 8006f34:	68fa      	ldr	r2, [r7, #12]
 8006f36:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	circle->y1 = end.y;
 8006f3a:	e9d7 3464 	ldrd	r3, r4, [r7, #400]	; 0x190
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	circle->xi = center.x;
 8006f44:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 8006f48:	68fa      	ldr	r2, [r7, #12]
 8006f4a:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	circle->yi = center.y;
 8006f4e:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 8006f52:	68fa      	ldr	r2, [r7, #12]
 8006f54:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	circle->z0 = start.z;
 8006f58:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 8006f5c:	68fa      	ldr	r2, [r7, #12]
 8006f5e:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	circle->z1 = start.z;
 8006f62:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	circle->zi = start.z;
 8006f6c:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 8006f70:	68fa      	ldr	r2, [r7, #12]
 8006f72:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	circle->x_current = circle->x0;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8006f7c:	68fa      	ldr	r2, [r7, #12]
 8006f7e:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	circle->y_current = circle->y0;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8006f88:	68fa      	ldr	r2, [r7, #12]
 8006f8a:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	circle->z_current = circle->z0;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8006f94:	68fa      	ldr	r2, [r7, #12]
 8006f96:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

	return SCARA_STATUS_OK;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	375c      	adds	r7, #92	; 0x5c
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fa6:	b002      	add	sp, #8
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	f3af 8000 	nop.w
 8006fb0:	9999999a 	.word	0x9999999a
 8006fb4:	3fb99999 	.word	0x3fb99999
 8006fb8:	60000000 	.word	0x60000000
 8006fbc:	401921fb 	.word	0x401921fb
 8006fc0:	3ff00000 	.word	0x3ff00000
 8006fc4:	00000000 	.word	0x00000000

08006fc8 <scaraInitLinear>:

SCARA_StatusTypeDef scaraInitLinear(Trajectory_Linear_TypeDef *linear, Trajectory_TargetTypeDef target, double total_s,
									ModeInitTypeDef modeinit, double additional_factor)
{
 8006fc8:	b590      	push	{r4, r7, lr}
 8006fca:	b087      	sub	sp, #28
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6178      	str	r0, [r7, #20]
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	ed87 0b02 	vstr	d0, [r7, #8]
 8006fd6:	ed87 1b00 	vstr	d1, [r7]
 8006fda:	74fb      	strb	r3, [r7, #19]
 8006fdc:	4613      	mov	r3, r2
 8006fde:	74bb      	strb	r3, [r7, #18]

	if(target == TRAJECTORY_3D){
 8006fe0:	7cfb      	ldrb	r3, [r7, #19]
 8006fe2:	2b04      	cmp	r3, #4
 8006fe4:	d004      	beq.n	8006ff0 <scaraInitLinear+0x28>

	}else if(target == TRAJECTORY_ROLL){
 8006fe6:	7cfb      	ldrb	r3, [r7, #19]
 8006fe8:	2b05      	cmp	r3, #5
 8006fea:	d001      	beq.n	8006ff0 <scaraInitLinear+0x28>

	}else{
		return SCARA_STATUS_ERROR_PARA;
 8006fec:	2306      	movs	r3, #6
 8006fee:	e04b      	b.n	8007088 <scaraInitLinear+0xc0>
	}

	if(modeinit == DUTY_MODE_INIT_QT){
 8006ff0:	7cbb      	ldrb	r3, [r7, #18]
 8006ff2:	2b03      	cmp	r3, #3
 8006ff4:	d125      	bne.n	8007042 <scaraInitLinear+0x7a>
		linear->constant_v = total_s / additional_factor;
 8006ff6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ffa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006ffe:	f7f9 fc25 	bl	800084c <__aeabi_ddiv>
 8007002:	4603      	mov	r3, r0
 8007004:	460c      	mov	r4, r1
 8007006:	697a      	ldr	r2, [r7, #20]
 8007008:	e9c2 3402 	strd	r3, r4, [r2, #8]
		linear->number_of_sample = ceilf(additional_factor / T_SAMPLING); // ceiling
 800700c:	a322      	add	r3, pc, #136	; (adr r3, 8007098 <scaraInitLinear+0xd0>)
 800700e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007012:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007016:	f7f9 fc19 	bl	800084c <__aeabi_ddiv>
 800701a:	4603      	mov	r3, r0
 800701c:	460c      	mov	r4, r1
 800701e:	4618      	mov	r0, r3
 8007020:	4621      	mov	r1, r4
 8007022:	f7f9 fde1 	bl	8000be8 <__aeabi_d2f>
 8007026:	4603      	mov	r3, r0
 8007028:	ee00 3a10 	vmov	s0, r3
 800702c:	f011 fd8c 	bl	8018b48 <ceilf>
 8007030:	eef0 7a40 	vmov.f32	s15, s0
 8007034:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007038:	ee17 2a90 	vmov	r2, s15
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	621a      	str	r2, [r3, #32]
 8007040:	e021      	b.n	8007086 <scaraInitLinear+0xbe>
	}else if(modeinit == DUTY_MODE_INIT_QV){
 8007042:	7cbb      	ldrb	r3, [r7, #18]
 8007044:	2b02      	cmp	r3, #2
 8007046:	d11c      	bne.n	8007082 <scaraInitLinear+0xba>
		linear->constant_v = additional_factor * V_MOVE_MAX;
 8007048:	f04f 0200 	mov.w	r2, #0
 800704c:	4b10      	ldr	r3, [pc, #64]	; (8007090 <scaraInitLinear+0xc8>)
 800704e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007052:	f7f9 fad1 	bl	80005f8 <__aeabi_dmul>
 8007056:	4603      	mov	r3, r0
 8007058:	460c      	mov	r4, r1
 800705a:	697a      	ldr	r2, [r7, #20]
 800705c:	e9c2 3402 	strd	r3, r4, [r2, #8]
		myDUTY.time_total = total_s / linear->constant_v;
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8007066:	461a      	mov	r2, r3
 8007068:	4623      	mov	r3, r4
 800706a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800706e:	f7f9 fbed 	bl	800084c <__aeabi_ddiv>
 8007072:	4603      	mov	r3, r0
 8007074:	460c      	mov	r4, r1
 8007076:	4a07      	ldr	r2, [pc, #28]	; (8007094 <scaraInitLinear+0xcc>)
 8007078:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 800707c:	e9c2 3400 	strd	r3, r4, [r2]
 8007080:	e001      	b.n	8007086 <scaraInitLinear+0xbe>
	}else{
		return SCARA_STATUS_ERROR_PARA;
 8007082:	2306      	movs	r3, #6
 8007084:	e000      	b.n	8007088 <scaraInitLinear+0xc0>
	}

	return SCARA_STATUS_OK;
 8007086:	2300      	movs	r3, #0
}
 8007088:	4618      	mov	r0, r3
 800708a:	371c      	adds	r7, #28
 800708c:	46bd      	mov	sp, r7
 800708e:	bd90      	pop	{r4, r7, pc}
 8007090:	40877000 	.word	0x40877000
 8007094:	2000c580 	.word	0x2000c580
 8007098:	40000000 	.word	0x40000000
 800709c:	3f847ae1 	.word	0x3f847ae1

080070a0 <scaraInitLSPB1>:
SCARA_StatusTypeDef	scaraInitLSPB1		(Trajectory_LSPB_TypeDef *lspb,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double additional_factor){
 80070a0:	b5b0      	push	{r4, r5, r7, lr}
 80070a2:	b096      	sub	sp, #88	; 0x58
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	61f8      	str	r0, [r7, #28]
 80070a8:	460b      	mov	r3, r1
 80070aa:	ed87 0b04 	vstr	d0, [r7, #16]
 80070ae:	ed87 1b02 	vstr	d1, [r7, #8]
 80070b2:	ed87 2b00 	vstr	d2, [r7]
 80070b6:	76fb      	strb	r3, [r7, #27]
 80070b8:	4613      	mov	r3, r2
 80070ba:	76bb      	strb	r3, [r7, #26]
	double v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	uint32_t no_sample;
	if(total_s < 0){
 80070bc:	f04f 0200 	mov.w	r2, #0
 80070c0:	f04f 0300 	mov.w	r3, #0
 80070c4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80070c8:	f7f9 fd08 	bl	8000adc <__aeabi_dcmplt>
 80070cc:	4603      	mov	r3, r0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d009      	beq.n	80070e6 <scaraInitLSPB1+0x46>
		total_s = -total_s;
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	613b      	str	r3, [r7, #16]
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80070dc:	617b      	str	r3, [r7, #20]
		lspb->dir= -1;
 80070de:	69fb      	ldr	r3, [r7, #28]
 80070e0:	22ff      	movs	r2, #255	; 0xff
 80070e2:	701a      	strb	r2, [r3, #0]
 80070e4:	e002      	b.n	80070ec <scaraInitLSPB1+0x4c>
	}else{
		lspb->dir= 1;
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	2201      	movs	r2, #1
 80070ea:	701a      	strb	r2, [r3, #0]
	}
	if(target == TRAJECTORY_3D){
 80070ec:	7efb      	ldrb	r3, [r7, #27]
 80070ee:	2b04      	cmp	r3, #4
 80070f0:	d12c      	bne.n	800714c <scaraInitLSPB1+0xac>
		if(modeinit == DUTY_MODE_INIT_QVT){
 80070f2:	7ebb      	ldrb	r3, [r7, #26]
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d10f      	bne.n	8007118 <scaraInitLSPB1+0x78>
			v_design = V_MOVE_MAX*v_factor;
 80070f8:	f04f 0200 	mov.w	r2, #0
 80070fc:	4ba8      	ldr	r3, [pc, #672]	; (80073a0 <scaraInitLSPB1+0x300>)
 80070fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007102:	f7f9 fa79 	bl	80005f8 <__aeabi_dmul>
 8007106:	4603      	mov	r3, r0
 8007108:	460c      	mov	r4, r1
 800710a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			tf = additional_factor;
 800710e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8007112:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 8007116:	e073      	b.n	8007200 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
 8007118:	7ebb      	ldrb	r3, [r7, #26]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d170      	bne.n	8007200 <scaraInitLSPB1+0x160>
			a_design = A_MOVE_MAX*additional_factor;
 800711e:	f04f 0200 	mov.w	r2, #0
 8007122:	4ba0      	ldr	r3, [pc, #640]	; (80073a4 <scaraInitLSPB1+0x304>)
 8007124:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007128:	f7f9 fa66 	bl	80005f8 <__aeabi_dmul>
 800712c:	4603      	mov	r3, r0
 800712e:	460c      	mov	r4, r1
 8007130:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			v_design = V_MOVE_MAX*v_factor;
 8007134:	f04f 0200 	mov.w	r2, #0
 8007138:	4b99      	ldr	r3, [pc, #612]	; (80073a0 <scaraInitLSPB1+0x300>)
 800713a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800713e:	f7f9 fa5b 	bl	80005f8 <__aeabi_dmul>
 8007142:	4603      	mov	r3, r0
 8007144:	460c      	mov	r4, r1
 8007146:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
 800714a:	e059      	b.n	8007200 <scaraInitLSPB1+0x160>
		}
	}else if(target == TRAJECTORY_J0){
 800714c:	7efb      	ldrb	r3, [r7, #27]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d112      	bne.n	8007178 <scaraInitLSPB1+0xd8>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8007152:	7ebb      	ldrb	r3, [r7, #26]
 8007154:	2b01      	cmp	r3, #1
 8007156:	d153      	bne.n	8007200 <scaraInitLSPB1+0x160>
			v_design = V_DESIGN_J0*v_factor;
 8007158:	a385      	add	r3, pc, #532	; (adr r3, 8007370 <scaraInitLSPB1+0x2d0>)
 800715a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800715e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007162:	f7f9 fa49 	bl	80005f8 <__aeabi_dmul>
 8007166:	4603      	mov	r3, r0
 8007168:	460c      	mov	r4, r1
 800716a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			tf = additional_factor;
 800716e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8007172:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 8007176:	e043      	b.n	8007200 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){

		}
	}else if(target == TRAJECTORY_J1){
 8007178:	7efb      	ldrb	r3, [r7, #27]
 800717a:	2b01      	cmp	r3, #1
 800717c:	d112      	bne.n	80071a4 <scaraInitLSPB1+0x104>
		if(modeinit == DUTY_MODE_INIT_QVT){
 800717e:	7ebb      	ldrb	r3, [r7, #26]
 8007180:	2b01      	cmp	r3, #1
 8007182:	d13d      	bne.n	8007200 <scaraInitLSPB1+0x160>
			v_design = V_DESIGN_J1*v_factor;
 8007184:	a37a      	add	r3, pc, #488	; (adr r3, 8007370 <scaraInitLSPB1+0x2d0>)
 8007186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800718a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800718e:	f7f9 fa33 	bl	80005f8 <__aeabi_dmul>
 8007192:	4603      	mov	r3, r0
 8007194:	460c      	mov	r4, r1
 8007196:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			tf = additional_factor;
 800719a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800719e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 80071a2:	e02d      	b.n	8007200 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){

		}
	}else if(target == TRAJECTORY_J2){
 80071a4:	7efb      	ldrb	r3, [r7, #27]
 80071a6:	2b02      	cmp	r3, #2
 80071a8:	d112      	bne.n	80071d0 <scaraInitLSPB1+0x130>
		if(modeinit == DUTY_MODE_INIT_QVT){
 80071aa:	7ebb      	ldrb	r3, [r7, #26]
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d127      	bne.n	8007200 <scaraInitLSPB1+0x160>
			v_design = V_DESIGN_J2*v_factor;
 80071b0:	a371      	add	r3, pc, #452	; (adr r3, 8007378 <scaraInitLSPB1+0x2d8>)
 80071b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80071ba:	f7f9 fa1d 	bl	80005f8 <__aeabi_dmul>
 80071be:	4603      	mov	r3, r0
 80071c0:	460c      	mov	r4, r1
 80071c2:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			tf = additional_factor;
 80071c6:	e9d7 3400 	ldrd	r3, r4, [r7]
 80071ca:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 80071ce:	e017      	b.n	8007200 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){

		}
	}else if(target == TRAJECTORY_J3){
 80071d0:	7efb      	ldrb	r3, [r7, #27]
 80071d2:	2b03      	cmp	r3, #3
 80071d4:	d112      	bne.n	80071fc <scaraInitLSPB1+0x15c>
		if(modeinit == DUTY_MODE_INIT_QVT){
 80071d6:	7ebb      	ldrb	r3, [r7, #26]
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d111      	bne.n	8007200 <scaraInitLSPB1+0x160>
			v_design = V_DESIGN_J3*v_factor;
 80071dc:	a368      	add	r3, pc, #416	; (adr r3, 8007380 <scaraInitLSPB1+0x2e0>)
 80071de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80071e6:	f7f9 fa07 	bl	80005f8 <__aeabi_dmul>
 80071ea:	4603      	mov	r3, r0
 80071ec:	460c      	mov	r4, r1
 80071ee:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			tf = additional_factor;
 80071f2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80071f6:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 80071fa:	e001      	b.n	8007200 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){

		}
	}else{
		return SCARA_STATUS_ERROR_PARA;
 80071fc:	2306      	movs	r3, #6
 80071fe:	e1e5      	b.n	80075cc <scaraInitLSPB1+0x52c>
	}
	if(modeinit == DUTY_MODE_INIT_QVT){
 8007200:	7ebb      	ldrb	r3, [r7, #26]
 8007202:	2b01      	cmp	r3, #1
 8007204:	f040 80d4 	bne.w	80073b0 <scaraInitLSPB1+0x310>
		if(tf < 0.1 && v_design > 7.5){ //check if time valid or not
 8007208:	a35f      	add	r3, pc, #380	; (adr r3, 8007388 <scaraInitLSPB1+0x2e8>)
 800720a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007212:	f7f9 fc63 	bl	8000adc <__aeabi_dcmplt>
 8007216:	4603      	mov	r3, r0
 8007218:	2b00      	cmp	r3, #0
 800721a:	d00b      	beq.n	8007234 <scaraInitLSPB1+0x194>
 800721c:	f04f 0200 	mov.w	r2, #0
 8007220:	4b61      	ldr	r3, [pc, #388]	; (80073a8 <scaraInitLSPB1+0x308>)
 8007222:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007226:	f7f9 fc77 	bl	8000b18 <__aeabi_dcmpgt>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d001      	beq.n	8007234 <scaraInitLSPB1+0x194>
			//tf = 1.5*total_s/v_design;
			return SCARA_STATUS_ERROR_OVER_VELOC;
 8007230:	2309      	movs	r3, #9
 8007232:	e1cb      	b.n	80075cc <scaraInitLSPB1+0x52c>
		}else if(v_design < 0.1 && tf > 0.15){ //check if velocity valid or not
 8007234:	a354      	add	r3, pc, #336	; (adr r3, 8007388 <scaraInitLSPB1+0x2e8>)
 8007236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800723e:	f7f9 fc4d 	bl	8000adc <__aeabi_dcmplt>
 8007242:	4603      	mov	r3, r0
 8007244:	2b00      	cmp	r3, #0
 8007246:	d01d      	beq.n	8007284 <scaraInitLSPB1+0x1e4>
 8007248:	a351      	add	r3, pc, #324	; (adr r3, 8007390 <scaraInitLSPB1+0x2f0>)
 800724a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800724e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007252:	f7f9 fc61 	bl	8000b18 <__aeabi_dcmpgt>
 8007256:	4603      	mov	r3, r0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d013      	beq.n	8007284 <scaraInitLSPB1+0x1e4>
			v_design = 1.5*total_s/tf;
 800725c:	f04f 0200 	mov.w	r2, #0
 8007260:	4b52      	ldr	r3, [pc, #328]	; (80073ac <scaraInitLSPB1+0x30c>)
 8007262:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007266:	f7f9 f9c7 	bl	80005f8 <__aeabi_dmul>
 800726a:	4603      	mov	r3, r0
 800726c:	460c      	mov	r4, r1
 800726e:	4618      	mov	r0, r3
 8007270:	4621      	mov	r1, r4
 8007272:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007276:	f7f9 fae9 	bl	800084c <__aeabi_ddiv>
 800727a:	4603      	mov	r3, r0
 800727c:	460c      	mov	r4, r1
 800727e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
 8007282:	e04e      	b.n	8007322 <scaraInitLSPB1+0x282>
		}else if(v_design < 0.1 && tf < 0.1){
 8007284:	a340      	add	r3, pc, #256	; (adr r3, 8007388 <scaraInitLSPB1+0x2e8>)
 8007286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800728e:	f7f9 fc25 	bl	8000adc <__aeabi_dcmplt>
 8007292:	4603      	mov	r3, r0
 8007294:	2b00      	cmp	r3, #0
 8007296:	d00b      	beq.n	80072b0 <scaraInitLSPB1+0x210>
 8007298:	a33b      	add	r3, pc, #236	; (adr r3, 8007388 <scaraInitLSPB1+0x2e8>)
 800729a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800729e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80072a2:	f7f9 fc1b 	bl	8000adc <__aeabi_dcmplt>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d001      	beq.n	80072b0 <scaraInitLSPB1+0x210>
			return SCARA_STATUS_ERROR_OVER_VELOC;
 80072ac:	2309      	movs	r3, #9
 80072ae:	e18d      	b.n	80075cc <scaraInitLSPB1+0x52c>
		}
		else{
			v_lim = total_s/tf;
 80072b0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80072b4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80072b8:	f7f9 fac8 	bl	800084c <__aeabi_ddiv>
 80072bc:	4603      	mov	r3, r0
 80072be:	460c      	mov	r4, r1
 80072c0:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			if(v_design < 1.1*v_lim){ //the accelaration part is too large
 80072c4:	a334      	add	r3, pc, #208	; (adr r3, 8007398 <scaraInitLSPB1+0x2f8>)
 80072c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80072ce:	f7f9 f993 	bl	80005f8 <__aeabi_dmul>
 80072d2:	4603      	mov	r3, r0
 80072d4:	460c      	mov	r4, r1
 80072d6:	461a      	mov	r2, r3
 80072d8:	4623      	mov	r3, r4
 80072da:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80072de:	f7f9 fbfd 	bl	8000adc <__aeabi_dcmplt>
 80072e2:	4603      	mov	r3, r0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d001      	beq.n	80072ec <scaraInitLSPB1+0x24c>
				return SCARA_STATUS_ERROR_OVER_ACCEL;
 80072e8:	230a      	movs	r3, #10
 80072ea:	e16f      	b.n	80075cc <scaraInitLSPB1+0x52c>
			}else if(v_design > 2*v_lim){
 80072ec:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80072f0:	4602      	mov	r2, r0
 80072f2:	460b      	mov	r3, r1
 80072f4:	f7f8 ffca 	bl	800028c <__adddf3>
 80072f8:	4603      	mov	r3, r0
 80072fa:	460c      	mov	r4, r1
 80072fc:	461a      	mov	r2, r3
 80072fe:	4623      	mov	r3, r4
 8007300:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007304:	f7f9 fc08 	bl	8000b18 <__aeabi_dcmpgt>
 8007308:	4603      	mov	r3, r0
 800730a:	2b00      	cmp	r3, #0
 800730c:	d009      	beq.n	8007322 <scaraInitLSPB1+0x282>
				v_design = 2*v_lim;
 800730e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007312:	4602      	mov	r2, r0
 8007314:	460b      	mov	r3, r1
 8007316:	f7f8 ffb9 	bl	800028c <__adddf3>
 800731a:	4603      	mov	r3, r0
 800731c:	460c      	mov	r4, r1
 800731e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			}else{

			}
		}
		ta = tf - total_s/v_design;
 8007322:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007326:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800732a:	f7f9 fa8f 	bl	800084c <__aeabi_ddiv>
 800732e:	4603      	mov	r3, r0
 8007330:	460c      	mov	r4, r1
 8007332:	461a      	mov	r2, r3
 8007334:	4623      	mov	r3, r4
 8007336:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800733a:	f7f8 ffa5 	bl	8000288 <__aeabi_dsub>
 800733e:	4603      	mov	r3, r0
 8007340:	460c      	mov	r4, r1
 8007342:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
		a_design = v_design/ta;
 8007346:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800734a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800734e:	f7f9 fa7d 	bl	800084c <__aeabi_ddiv>
 8007352:	4603      	mov	r3, r0
 8007354:	460c      	mov	r4, r1
 8007356:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		td = tf - ta;
 800735a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800735e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007362:	f7f8 ff91 	bl	8000288 <__aeabi_dsub>
 8007366:	4603      	mov	r3, r0
 8007368:	460c      	mov	r4, r1
 800736a:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
 800736e:	e0c9      	b.n	8007504 <scaraInitLSPB1+0x464>
 8007370:	14000000 	.word	0x14000000
 8007374:	4000f6f0 	.word	0x4000f6f0
 8007378:	00000000 	.word	0x00000000
 800737c:	405c2000 	.word	0x405c2000
 8007380:	6b259425 	.word	0x6b259425
 8007384:	40069b91 	.word	0x40069b91
 8007388:	9999999a 	.word	0x9999999a
 800738c:	3fb99999 	.word	0x3fb99999
 8007390:	33333333 	.word	0x33333333
 8007394:	3fc33333 	.word	0x3fc33333
 8007398:	9999999a 	.word	0x9999999a
 800739c:	3ff19999 	.word	0x3ff19999
 80073a0:	40877000 	.word	0x40877000
 80073a4:	407f4000 	.word	0x407f4000
 80073a8:	401e0000 	.word	0x401e0000
 80073ac:	3ff80000 	.word	0x3ff80000

	}else if(modeinit == DUTY_MODE_INIT_QVA){
 80073b0:	7ebb      	ldrb	r3, [r7, #26]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	f040 80a6 	bne.w	8007504 <scaraInitLSPB1+0x464>
		//check qva condition
		if(total_s*a_design < v_design*v_design){ //condition for ta smaller than td
 80073b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80073bc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80073c0:	f7f9 f91a 	bl	80005f8 <__aeabi_dmul>
 80073c4:	4603      	mov	r3, r0
 80073c6:	460c      	mov	r4, r1
 80073c8:	4625      	mov	r5, r4
 80073ca:	461c      	mov	r4, r3
 80073cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80073d0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80073d4:	f7f9 f910 	bl	80005f8 <__aeabi_dmul>
 80073d8:	4602      	mov	r2, r0
 80073da:	460b      	mov	r3, r1
 80073dc:	4620      	mov	r0, r4
 80073de:	4629      	mov	r1, r5
 80073e0:	f7f9 fb7c 	bl	8000adc <__aeabi_dcmplt>
 80073e4:	4603      	mov	r3, r0
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d058      	beq.n	800749c <scaraInitLSPB1+0x3fc>
			if(total_s/v_design < 0.3){ //td too small
 80073ea:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80073ee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80073f2:	f7f9 fa2b 	bl	800084c <__aeabi_ddiv>
 80073f6:	4603      	mov	r3, r0
 80073f8:	460c      	mov	r4, r1
 80073fa:	4618      	mov	r0, r3
 80073fc:	4621      	mov	r1, r4
 80073fe:	a376      	add	r3, pc, #472	; (adr r3, 80075d8 <scaraInitLSPB1+0x538>)
 8007400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007404:	f7f9 fb6a 	bl	8000adc <__aeabi_dcmplt>
 8007408:	4603      	mov	r3, r0
 800740a:	2b00      	cmp	r3, #0
 800740c:	d00a      	beq.n	8007424 <scaraInitLSPB1+0x384>
				//recalculate v_design
				v_design = total_s/0.3;
 800740e:	a372      	add	r3, pc, #456	; (adr r3, 80075d8 <scaraInitLSPB1+0x538>)
 8007410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007414:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007418:	f7f9 fa18 	bl	800084c <__aeabi_ddiv>
 800741c:	4603      	mov	r3, r0
 800741e:	460c      	mov	r4, r1
 8007420:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			}
			if(v_design/a_design < 0.1){ //ta is too small
 8007424:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007428:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800742c:	f7f9 fa0e 	bl	800084c <__aeabi_ddiv>
 8007430:	4603      	mov	r3, r0
 8007432:	460c      	mov	r4, r1
 8007434:	4618      	mov	r0, r3
 8007436:	4621      	mov	r1, r4
 8007438:	a369      	add	r3, pc, #420	; (adr r3, 80075e0 <scaraInitLSPB1+0x540>)
 800743a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800743e:	f7f9 fb4d 	bl	8000adc <__aeabi_dcmplt>
 8007442:	4603      	mov	r3, r0
 8007444:	2b00      	cmp	r3, #0
 8007446:	d00a      	beq.n	800745e <scaraInitLSPB1+0x3be>
				//recalculate a_design
				a_design = v_design/0.1;
 8007448:	a365      	add	r3, pc, #404	; (adr r3, 80075e0 <scaraInitLSPB1+0x540>)
 800744a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800744e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007452:	f7f9 f9fb 	bl	800084c <__aeabi_ddiv>
 8007456:	4603      	mov	r3, r0
 8007458:	460c      	mov	r4, r1
 800745a:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			}
			ta = v_design/a_design;
 800745e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007462:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007466:	f7f9 f9f1 	bl	800084c <__aeabi_ddiv>
 800746a:	4603      	mov	r3, r0
 800746c:	460c      	mov	r4, r1
 800746e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
			td = total_s/v_design;
 8007472:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007476:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800747a:	f7f9 f9e7 	bl	800084c <__aeabi_ddiv>
 800747e:	4603      	mov	r3, r0
 8007480:	460c      	mov	r4, r1
 8007482:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
			tf = ta + td;
 8007486:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800748a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800748e:	f7f8 fefd 	bl	800028c <__adddf3>
 8007492:	4603      	mov	r3, r0
 8007494:	460c      	mov	r4, r1
 8007496:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 800749a:	e033      	b.n	8007504 <scaraInitLSPB1+0x464>
//				td = total_s/v_design;
//				tf = ta + td;
//			}

		}else{
			tf = 2*total_s/v_design;
 800749c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80074a0:	4602      	mov	r2, r0
 80074a2:	460b      	mov	r3, r1
 80074a4:	f7f8 fef2 	bl	800028c <__adddf3>
 80074a8:	4603      	mov	r3, r0
 80074aa:	460c      	mov	r4, r1
 80074ac:	4618      	mov	r0, r3
 80074ae:	4621      	mov	r1, r4
 80074b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80074b4:	f7f9 f9ca 	bl	800084c <__aeabi_ddiv>
 80074b8:	4603      	mov	r3, r0
 80074ba:	460c      	mov	r4, r1
 80074bc:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
			ta = tf/2;
 80074c0:	f04f 0200 	mov.w	r2, #0
 80074c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80074c8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80074cc:	f7f9 f9be 	bl	800084c <__aeabi_ddiv>
 80074d0:	4603      	mov	r3, r0
 80074d2:	460c      	mov	r4, r1
 80074d4:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
			td = tf/2;
 80074d8:	f04f 0200 	mov.w	r2, #0
 80074dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80074e0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80074e4:	f7f9 f9b2 	bl	800084c <__aeabi_ddiv>
 80074e8:	4603      	mov	r3, r0
 80074ea:	460c      	mov	r4, r1
 80074ec:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
			a_design = v_design/ta;
 80074f0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80074f4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80074f8:	f7f9 f9a8 	bl	800084c <__aeabi_ddiv>
 80074fc:	4603      	mov	r3, r0
 80074fe:	460c      	mov	r4, r1
 8007500:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		}
	}
	no_sample = ceilf(tf / T_SAMPLING); // ceiling
 8007504:	a338      	add	r3, pc, #224	; (adr r3, 80075e8 <scaraInitLSPB1+0x548>)
 8007506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800750a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800750e:	f7f9 f99d 	bl	800084c <__aeabi_ddiv>
 8007512:	4603      	mov	r3, r0
 8007514:	460c      	mov	r4, r1
 8007516:	4618      	mov	r0, r3
 8007518:	4621      	mov	r1, r4
 800751a:	f7f9 fb65 	bl	8000be8 <__aeabi_d2f>
 800751e:	4603      	mov	r3, r0
 8007520:	ee00 3a10 	vmov	s0, r3
 8007524:	f011 fb10 	bl	8018b48 <ceilf>
 8007528:	eef0 7a40 	vmov.f32	s15, s0
 800752c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007530:	ee17 3a90 	vmov	r3, s15
 8007534:	627b      	str	r3, [r7, #36]	; 0x24
	 // Init lspb params

	 lspb->s0 = 0;
 8007536:	69fa      	ldr	r2, [r7, #28]
 8007538:	f04f 0300 	mov.w	r3, #0
 800753c:	f04f 0400 	mov.w	r4, #0
 8007540:	e9c2 3402 	strd	r3, r4, [r2, #8]
	 lspb->s1 = total_s;
 8007544:	69fa      	ldr	r2, [r7, #28]
 8007546:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800754a:	e9c2 3404 	strd	r3, r4, [r2, #16]
	 lspb->Ta = ta;
 800754e:	69fa      	ldr	r2, [r7, #28]
 8007550:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8007554:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	 lspb->Td = td;
 8007558:	69fa      	ldr	r2, [r7, #28]
 800755a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800755e:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	 lspb->Tf = tf;
 8007562:	69fa      	ldr	r2, [r7, #28]
 8007564:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8007568:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	 lspb->a_design = a_design;
 800756c:	69fa      	ldr	r2, [r7, #28]
 800756e:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8007572:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	 lspb->v_design = v_design;
 8007576:	69fa      	ldr	r2, [r7, #28]
 8007578:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800757c:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	 lspb->v_lim = v_design;
 8007580:	69fa      	ldr	r2, [r7, #28]
 8007582:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8007586:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	 lspb->v0 = 0;
 800758a:	69fa      	ldr	r2, [r7, #28]
 800758c:	f04f 0300 	mov.w	r3, #0
 8007590:	f04f 0400 	mov.w	r4, #0
 8007594:	e9c2 3406 	strd	r3, r4, [r2, #24]
	 lspb->v1 = 0;
 8007598:	69fa      	ldr	r2, [r7, #28]
 800759a:	f04f 0300 	mov.w	r3, #0
 800759e:	f04f 0400 	mov.w	r4, #0
 80075a2:	e9c2 3408 	strd	r3, r4, [r2, #32]
	 lspb->num_of_sampling = no_sample;
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075aa:	659a      	str	r2, [r3, #88]	; 0x58
	 lspb->total_s = lspb->s1 - lspb->s0;
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80075b8:	461a      	mov	r2, r3
 80075ba:	4623      	mov	r3, r4
 80075bc:	f7f8 fe64 	bl	8000288 <__aeabi_dsub>
 80075c0:	4603      	mov	r3, r0
 80075c2:	460c      	mov	r4, r1
 80075c4:	69fa      	ldr	r2, [r7, #28]
 80075c6:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

	 return SCARA_STATUS_OK;
 80075ca:	2300      	movs	r3, #0
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3758      	adds	r7, #88	; 0x58
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bdb0      	pop	{r4, r5, r7, pc}
 80075d4:	f3af 8000 	nop.w
 80075d8:	33333333 	.word	0x33333333
 80075dc:	3fd33333 	.word	0x3fd33333
 80075e0:	9999999a 	.word	0x9999999a
 80075e4:	3fb99999 	.word	0x3fb99999
 80075e8:	40000000 	.word	0x40000000
 80075ec:	3f847ae1 	.word	0x3f847ae1

080075f0 <scaraInitScurve1>:
												Trajectory_TargetTypeDef target,
												double total_s,
												ModeInitTypeDef modeinit,
												double v_factor,
												double additional_factor)
{
 80075f0:	b5b0      	push	{r4, r5, r7, lr}
 80075f2:	b094      	sub	sp, #80	; 0x50
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	61f8      	str	r0, [r7, #28]
 80075f8:	460b      	mov	r3, r1
 80075fa:	ed87 0b04 	vstr	d0, [r7, #16]
 80075fe:	ed87 1b02 	vstr	d1, [r7, #8]
 8007602:	ed87 2b00 	vstr	d2, [r7]
 8007606:	76fb      	strb	r3, [r7, #27]
 8007608:	4613      	mov	r3, r2
 800760a:	76bb      	strb	r3, [r7, #26]
	double v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	uint32_t no_sample;
	if(total_s < 0){
 800760c:	f04f 0200 	mov.w	r2, #0
 8007610:	f04f 0300 	mov.w	r3, #0
 8007614:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007618:	f7f9 fa60 	bl	8000adc <__aeabi_dcmplt>
 800761c:	4603      	mov	r3, r0
 800761e:	2b00      	cmp	r3, #0
 8007620:	d009      	beq.n	8007636 <scaraInitScurve1+0x46>
		total_s = -total_s;
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	613b      	str	r3, [r7, #16]
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800762c:	617b      	str	r3, [r7, #20]
		scurve->dir= -1;
 800762e:	69fb      	ldr	r3, [r7, #28]
 8007630:	22ff      	movs	r2, #255	; 0xff
 8007632:	701a      	strb	r2, [r3, #0]
 8007634:	e002      	b.n	800763c <scaraInitScurve1+0x4c>
	}else{
		scurve->dir= 1;
 8007636:	69fb      	ldr	r3, [r7, #28]
 8007638:	2201      	movs	r2, #1
 800763a:	701a      	strb	r2, [r3, #0]
	}
	if(target == TRAJECTORY_3D){
 800763c:	7efb      	ldrb	r3, [r7, #27]
 800763e:	2b04      	cmp	r3, #4
 8007640:	d12c      	bne.n	800769c <scaraInitScurve1+0xac>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8007642:	7ebb      	ldrb	r3, [r7, #26]
 8007644:	2b01      	cmp	r3, #1
 8007646:	d10f      	bne.n	8007668 <scaraInitScurve1+0x78>
			v_design = V_MOVE_MAX*v_factor;
 8007648:	f04f 0200 	mov.w	r2, #0
 800764c:	4b90      	ldr	r3, [pc, #576]	; (8007890 <scaraInitScurve1+0x2a0>)
 800764e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007652:	f7f8 ffd1 	bl	80005f8 <__aeabi_dmul>
 8007656:	4603      	mov	r3, r0
 8007658:	460c      	mov	r4, r1
 800765a:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			tf = additional_factor;
 800765e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8007662:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8007666:	e073      	b.n	8007750 <scaraInitScurve1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
 8007668:	7ebb      	ldrb	r3, [r7, #26]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d170      	bne.n	8007750 <scaraInitScurve1+0x160>
			a_design = A_MOVE_MAX*additional_factor;
 800766e:	f04f 0200 	mov.w	r2, #0
 8007672:	4b88      	ldr	r3, [pc, #544]	; (8007894 <scaraInitScurve1+0x2a4>)
 8007674:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007678:	f7f8 ffbe 	bl	80005f8 <__aeabi_dmul>
 800767c:	4603      	mov	r3, r0
 800767e:	460c      	mov	r4, r1
 8007680:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
			v_design = V_MOVE_MAX*v_factor;
 8007684:	f04f 0200 	mov.w	r2, #0
 8007688:	4b81      	ldr	r3, [pc, #516]	; (8007890 <scaraInitScurve1+0x2a0>)
 800768a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800768e:	f7f8 ffb3 	bl	80005f8 <__aeabi_dmul>
 8007692:	4603      	mov	r3, r0
 8007694:	460c      	mov	r4, r1
 8007696:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 800769a:	e059      	b.n	8007750 <scaraInitScurve1+0x160>
		}
	}else if(target == TRAJECTORY_J0){
 800769c:	7efb      	ldrb	r3, [r7, #27]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d112      	bne.n	80076c8 <scaraInitScurve1+0xd8>
		if(modeinit == DUTY_MODE_INIT_QVT){
 80076a2:	7ebb      	ldrb	r3, [r7, #26]
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d153      	bne.n	8007750 <scaraInitScurve1+0x160>
			v_design = V_DESIGN_J0*v_factor;
 80076a8:	a36d      	add	r3, pc, #436	; (adr r3, 8007860 <scaraInitScurve1+0x270>)
 80076aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80076b2:	f7f8 ffa1 	bl	80005f8 <__aeabi_dmul>
 80076b6:	4603      	mov	r3, r0
 80076b8:	460c      	mov	r4, r1
 80076ba:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			tf = additional_factor;
 80076be:	e9d7 3400 	ldrd	r3, r4, [r7]
 80076c2:	e9c7 3408 	strd	r3, r4, [r7, #32]
 80076c6:	e043      	b.n	8007750 <scaraInitScurve1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
	
		}
	}else if(target == TRAJECTORY_J1){
 80076c8:	7efb      	ldrb	r3, [r7, #27]
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d112      	bne.n	80076f4 <scaraInitScurve1+0x104>
		if(modeinit == DUTY_MODE_INIT_QVT){
 80076ce:	7ebb      	ldrb	r3, [r7, #26]
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d13d      	bne.n	8007750 <scaraInitScurve1+0x160>
			v_design = V_DESIGN_J1*v_factor;
 80076d4:	a362      	add	r3, pc, #392	; (adr r3, 8007860 <scaraInitScurve1+0x270>)
 80076d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80076de:	f7f8 ff8b 	bl	80005f8 <__aeabi_dmul>
 80076e2:	4603      	mov	r3, r0
 80076e4:	460c      	mov	r4, r1
 80076e6:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			tf = additional_factor;
 80076ea:	e9d7 3400 	ldrd	r3, r4, [r7]
 80076ee:	e9c7 3408 	strd	r3, r4, [r7, #32]
 80076f2:	e02d      	b.n	8007750 <scaraInitScurve1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
	
		}
	}else if(target == TRAJECTORY_J2){
 80076f4:	7efb      	ldrb	r3, [r7, #27]
 80076f6:	2b02      	cmp	r3, #2
 80076f8:	d112      	bne.n	8007720 <scaraInitScurve1+0x130>
		if(modeinit == DUTY_MODE_INIT_QVT){
 80076fa:	7ebb      	ldrb	r3, [r7, #26]
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d127      	bne.n	8007750 <scaraInitScurve1+0x160>
			v_design = V_DESIGN_J2*v_factor;
 8007700:	a359      	add	r3, pc, #356	; (adr r3, 8007868 <scaraInitScurve1+0x278>)
 8007702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007706:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800770a:	f7f8 ff75 	bl	80005f8 <__aeabi_dmul>
 800770e:	4603      	mov	r3, r0
 8007710:	460c      	mov	r4, r1
 8007712:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			tf = additional_factor;
 8007716:	e9d7 3400 	ldrd	r3, r4, [r7]
 800771a:	e9c7 3408 	strd	r3, r4, [r7, #32]
 800771e:	e017      	b.n	8007750 <scaraInitScurve1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
	
		}
	}else if(target == TRAJECTORY_J3){
 8007720:	7efb      	ldrb	r3, [r7, #27]
 8007722:	2b03      	cmp	r3, #3
 8007724:	d112      	bne.n	800774c <scaraInitScurve1+0x15c>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8007726:	7ebb      	ldrb	r3, [r7, #26]
 8007728:	2b01      	cmp	r3, #1
 800772a:	d111      	bne.n	8007750 <scaraInitScurve1+0x160>
			v_design = V_DESIGN_J3*v_factor;
 800772c:	a350      	add	r3, pc, #320	; (adr r3, 8007870 <scaraInitScurve1+0x280>)
 800772e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007732:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007736:	f7f8 ff5f 	bl	80005f8 <__aeabi_dmul>
 800773a:	4603      	mov	r3, r0
 800773c:	460c      	mov	r4, r1
 800773e:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			tf = additional_factor;
 8007742:	e9d7 3400 	ldrd	r3, r4, [r7]
 8007746:	e9c7 3408 	strd	r3, r4, [r7, #32]
 800774a:	e001      	b.n	8007750 <scaraInitScurve1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
	
		}
	}else{
		return SCARA_STATUS_ERROR_PARA;
 800774c:	2306      	movs	r3, #6
 800774e:	e252      	b.n	8007bf6 <scaraInitScurve1+0x606>
	}
	if(modeinit == DUTY_MODE_INIT_QVT){
 8007750:	7ebb      	ldrb	r3, [r7, #26]
 8007752:	2b01      	cmp	r3, #1
 8007754:	f040 80fe 	bne.w	8007954 <scaraInitScurve1+0x364>
		if(tf < 0.1 && v_design > 7.5){ //check if time valid or not
 8007758:	a347      	add	r3, pc, #284	; (adr r3, 8007878 <scaraInitScurve1+0x288>)
 800775a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800775e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007762:	f7f9 f9bb 	bl	8000adc <__aeabi_dcmplt>
 8007766:	4603      	mov	r3, r0
 8007768:	2b00      	cmp	r3, #0
 800776a:	d01d      	beq.n	80077a8 <scaraInitScurve1+0x1b8>
 800776c:	f04f 0200 	mov.w	r2, #0
 8007770:	4b49      	ldr	r3, [pc, #292]	; (8007898 <scaraInitScurve1+0x2a8>)
 8007772:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007776:	f7f9 f9cf 	bl	8000b18 <__aeabi_dcmpgt>
 800777a:	4603      	mov	r3, r0
 800777c:	2b00      	cmp	r3, #0
 800777e:	d013      	beq.n	80077a8 <scaraInitScurve1+0x1b8>
			tf = 1.5*total_s/v_design;
 8007780:	f04f 0200 	mov.w	r2, #0
 8007784:	4b45      	ldr	r3, [pc, #276]	; (800789c <scaraInitScurve1+0x2ac>)
 8007786:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800778a:	f7f8 ff35 	bl	80005f8 <__aeabi_dmul>
 800778e:	4603      	mov	r3, r0
 8007790:	460c      	mov	r4, r1
 8007792:	4618      	mov	r0, r3
 8007794:	4621      	mov	r1, r4
 8007796:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800779a:	f7f9 f857 	bl	800084c <__aeabi_ddiv>
 800779e:	4603      	mov	r3, r0
 80077a0:	460c      	mov	r4, r1
 80077a2:	e9c7 3408 	strd	r3, r4, [r7, #32]
 80077a6:	e096      	b.n	80078d6 <scaraInitScurve1+0x2e6>
		}else if(v_design < 0.1 && tf > 0.15){ //check if velocity valid or not
 80077a8:	a333      	add	r3, pc, #204	; (adr r3, 8007878 <scaraInitScurve1+0x288>)
 80077aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ae:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80077b2:	f7f9 f993 	bl	8000adc <__aeabi_dcmplt>
 80077b6:	4603      	mov	r3, r0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d01d      	beq.n	80077f8 <scaraInitScurve1+0x208>
 80077bc:	a330      	add	r3, pc, #192	; (adr r3, 8007880 <scaraInitScurve1+0x290>)
 80077be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80077c6:	f7f9 f9a7 	bl	8000b18 <__aeabi_dcmpgt>
 80077ca:	4603      	mov	r3, r0
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d013      	beq.n	80077f8 <scaraInitScurve1+0x208>
			v_design = 1.5*total_s/tf;
 80077d0:	f04f 0200 	mov.w	r2, #0
 80077d4:	4b31      	ldr	r3, [pc, #196]	; (800789c <scaraInitScurve1+0x2ac>)
 80077d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80077da:	f7f8 ff0d 	bl	80005f8 <__aeabi_dmul>
 80077de:	4603      	mov	r3, r0
 80077e0:	460c      	mov	r4, r1
 80077e2:	4618      	mov	r0, r3
 80077e4:	4621      	mov	r1, r4
 80077e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80077ea:	f7f9 f82f 	bl	800084c <__aeabi_ddiv>
 80077ee:	4603      	mov	r3, r0
 80077f0:	460c      	mov	r4, r1
 80077f2:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 80077f6:	e06e      	b.n	80078d6 <scaraInitScurve1+0x2e6>
		}else if(tf < 0.1 && v_design < 0.1){
 80077f8:	a31f      	add	r3, pc, #124	; (adr r3, 8007878 <scaraInitScurve1+0x288>)
 80077fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077fe:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007802:	f7f9 f96b 	bl	8000adc <__aeabi_dcmplt>
 8007806:	4603      	mov	r3, r0
 8007808:	2b00      	cmp	r3, #0
 800780a:	d00b      	beq.n	8007824 <scaraInitScurve1+0x234>
 800780c:	a31a      	add	r3, pc, #104	; (adr r3, 8007878 <scaraInitScurve1+0x288>)
 800780e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007812:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007816:	f7f9 f961 	bl	8000adc <__aeabi_dcmplt>
 800781a:	4603      	mov	r3, r0
 800781c:	2b00      	cmp	r3, #0
 800781e:	d001      	beq.n	8007824 <scaraInitScurve1+0x234>
			return SCARA_STATUS_ERROR_OVER_VELOC;
 8007820:	2309      	movs	r3, #9
 8007822:	e1e8      	b.n	8007bf6 <scaraInitScurve1+0x606>
		}else{
			v_lim = total_s/tf;
 8007824:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007828:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800782c:	f7f9 f80e 	bl	800084c <__aeabi_ddiv>
 8007830:	4603      	mov	r3, r0
 8007832:	460c      	mov	r4, r1
 8007834:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
			if(v_design < 1.1*v_lim){ // the accelaration part is too large
 8007838:	a313      	add	r3, pc, #76	; (adr r3, 8007888 <scaraInitScurve1+0x298>)
 800783a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007842:	f7f8 fed9 	bl	80005f8 <__aeabi_dmul>
 8007846:	4603      	mov	r3, r0
 8007848:	460c      	mov	r4, r1
 800784a:	461a      	mov	r2, r3
 800784c:	4623      	mov	r3, r4
 800784e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007852:	f7f9 f943 	bl	8000adc <__aeabi_dcmplt>
 8007856:	4603      	mov	r3, r0
 8007858:	2b00      	cmp	r3, #0
 800785a:	d021      	beq.n	80078a0 <scaraInitScurve1+0x2b0>
				return SCARA_STATUS_ERROR_OVER_ACCEL;
 800785c:	230a      	movs	r3, #10
 800785e:	e1ca      	b.n	8007bf6 <scaraInitScurve1+0x606>
 8007860:	14000000 	.word	0x14000000
 8007864:	4000f6f0 	.word	0x4000f6f0
 8007868:	00000000 	.word	0x00000000
 800786c:	405c2000 	.word	0x405c2000
 8007870:	6b259425 	.word	0x6b259425
 8007874:	40069b91 	.word	0x40069b91
 8007878:	9999999a 	.word	0x9999999a
 800787c:	3fb99999 	.word	0x3fb99999
 8007880:	33333333 	.word	0x33333333
 8007884:	3fc33333 	.word	0x3fc33333
 8007888:	9999999a 	.word	0x9999999a
 800788c:	3ff19999 	.word	0x3ff19999
 8007890:	40877000 	.word	0x40877000
 8007894:	407f4000 	.word	0x407f4000
 8007898:	401e0000 	.word	0x401e0000
 800789c:	3ff80000 	.word	0x3ff80000
			}else if(v_design > 2*v_lim){
 80078a0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80078a4:	4602      	mov	r2, r0
 80078a6:	460b      	mov	r3, r1
 80078a8:	f7f8 fcf0 	bl	800028c <__adddf3>
 80078ac:	4603      	mov	r3, r0
 80078ae:	460c      	mov	r4, r1
 80078b0:	461a      	mov	r2, r3
 80078b2:	4623      	mov	r3, r4
 80078b4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80078b8:	f7f9 f92e 	bl	8000b18 <__aeabi_dcmpgt>
 80078bc:	4603      	mov	r3, r0
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d009      	beq.n	80078d6 <scaraInitScurve1+0x2e6>
				v_design = 2*v_lim;
 80078c2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80078c6:	4602      	mov	r2, r0
 80078c8:	460b      	mov	r3, r1
 80078ca:	f7f8 fcdf 	bl	800028c <__adddf3>
 80078ce:	4603      	mov	r3, r0
 80078d0:	460c      	mov	r4, r1
 80078d2:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			}else{
	
			}
		}
		a_design = 2*v_design*v_design/(v_design*tf - total_s);
 80078d6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80078da:	4602      	mov	r2, r0
 80078dc:	460b      	mov	r3, r1
 80078de:	f7f8 fcd5 	bl	800028c <__adddf3>
 80078e2:	4603      	mov	r3, r0
 80078e4:	460c      	mov	r4, r1
 80078e6:	4618      	mov	r0, r3
 80078e8:	4621      	mov	r1, r4
 80078ea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80078ee:	f7f8 fe83 	bl	80005f8 <__aeabi_dmul>
 80078f2:	4603      	mov	r3, r0
 80078f4:	460c      	mov	r4, r1
 80078f6:	4625      	mov	r5, r4
 80078f8:	461c      	mov	r4, r3
 80078fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80078fe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007902:	f7f8 fe79 	bl	80005f8 <__aeabi_dmul>
 8007906:	4602      	mov	r2, r0
 8007908:	460b      	mov	r3, r1
 800790a:	4610      	mov	r0, r2
 800790c:	4619      	mov	r1, r3
 800790e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007912:	f7f8 fcb9 	bl	8000288 <__aeabi_dsub>
 8007916:	4602      	mov	r2, r0
 8007918:	460b      	mov	r3, r1
 800791a:	4620      	mov	r0, r4
 800791c:	4629      	mov	r1, r5
 800791e:	f7f8 ff95 	bl	800084c <__aeabi_ddiv>
 8007922:	4603      	mov	r3, r0
 8007924:	460c      	mov	r4, r1
 8007926:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
		ta = v_design/a_design;		
 800792a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800792e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007932:	f7f8 ff8b 	bl	800084c <__aeabi_ddiv>
 8007936:	4603      	mov	r3, r0
 8007938:	460c      	mov	r4, r1
 800793a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
		td = tf - ta;
 800793e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007942:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007946:	f7f8 fc9f 	bl	8000288 <__aeabi_dsub>
 800794a:	4603      	mov	r3, r0
 800794c:	460c      	mov	r4, r1
 800794e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 8007952:	e0c0      	b.n	8007ad6 <scaraInitScurve1+0x4e6>
	
	}else if(modeinit == DUTY_MODE_INIT_QVA){
 8007954:	7ebb      	ldrb	r3, [r7, #26]
 8007956:	2b00      	cmp	r3, #0
 8007958:	f040 80bd 	bne.w	8007ad6 <scaraInitScurve1+0x4e6>
		//check qva condition
		if(total_s*a_design < 2*v_design*v_design){ //condition for ta smaller than tc
 800795c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007960:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007964:	f7f8 fe48 	bl	80005f8 <__aeabi_dmul>
 8007968:	4603      	mov	r3, r0
 800796a:	460c      	mov	r4, r1
 800796c:	4625      	mov	r5, r4
 800796e:	461c      	mov	r4, r3
 8007970:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007974:	4602      	mov	r2, r0
 8007976:	460b      	mov	r3, r1
 8007978:	f7f8 fc88 	bl	800028c <__adddf3>
 800797c:	4602      	mov	r2, r0
 800797e:	460b      	mov	r3, r1
 8007980:	4610      	mov	r0, r2
 8007982:	4619      	mov	r1, r3
 8007984:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007988:	f7f8 fe36 	bl	80005f8 <__aeabi_dmul>
 800798c:	4602      	mov	r2, r0
 800798e:	460b      	mov	r3, r1
 8007990:	4620      	mov	r0, r4
 8007992:	4629      	mov	r1, r5
 8007994:	f7f9 f8a2 	bl	8000adc <__aeabi_dcmplt>
 8007998:	4603      	mov	r3, r0
 800799a:	2b00      	cmp	r3, #0
 800799c:	d060      	beq.n	8007a60 <scaraInitScurve1+0x470>
			if(total_s/v_design < 0.3){ //tc too small
 800799e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80079a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80079a6:	f7f8 ff51 	bl	800084c <__aeabi_ddiv>
 80079aa:	4603      	mov	r3, r0
 80079ac:	460c      	mov	r4, r1
 80079ae:	4618      	mov	r0, r3
 80079b0:	4621      	mov	r1, r4
 80079b2:	a396      	add	r3, pc, #600	; (adr r3, 8007c0c <scaraInitScurve1+0x61c>)
 80079b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b8:	f7f9 f890 	bl	8000adc <__aeabi_dcmplt>
 80079bc:	4603      	mov	r3, r0
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d00a      	beq.n	80079d8 <scaraInitScurve1+0x3e8>
				//recalculate v_design
				v_design = total_s/0.3;
 80079c2:	a392      	add	r3, pc, #584	; (adr r3, 8007c0c <scaraInitScurve1+0x61c>)
 80079c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80079cc:	f7f8 ff3e 	bl	800084c <__aeabi_ddiv>
 80079d0:	4603      	mov	r3, r0
 80079d2:	460c      	mov	r4, r1
 80079d4:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			}
			if(v_design/a_design < 0.1){ //ta is too small
 80079d8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80079dc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80079e0:	f7f8 ff34 	bl	800084c <__aeabi_ddiv>
 80079e4:	4603      	mov	r3, r0
 80079e6:	460c      	mov	r4, r1
 80079e8:	4618      	mov	r0, r3
 80079ea:	4621      	mov	r1, r4
 80079ec:	a389      	add	r3, pc, #548	; (adr r3, 8007c14 <scaraInitScurve1+0x624>)
 80079ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f2:	f7f9 f873 	bl	8000adc <__aeabi_dcmplt>
 80079f6:	4603      	mov	r3, r0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d00a      	beq.n	8007a12 <scaraInitScurve1+0x422>
				//recalculate a_design
				a_design = v_design/0.1;
 80079fc:	a385      	add	r3, pc, #532	; (adr r3, 8007c14 <scaraInitScurve1+0x624>)
 80079fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a02:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007a06:	f7f8 ff21 	bl	800084c <__aeabi_ddiv>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	460c      	mov	r4, r1
 8007a0e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
			}
			ta = v_design/a_design;
 8007a12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007a16:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007a1a:	f7f8 ff17 	bl	800084c <__aeabi_ddiv>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	460c      	mov	r4, r1
 8007a22:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
			td = total_s/v_design + ta;
 8007a26:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007a2a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007a2e:	f7f8 ff0d 	bl	800084c <__aeabi_ddiv>
 8007a32:	4603      	mov	r3, r0
 8007a34:	460c      	mov	r4, r1
 8007a36:	461a      	mov	r2, r3
 8007a38:	4623      	mov	r3, r4
 8007a3a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007a3e:	f7f8 fc25 	bl	800028c <__adddf3>
 8007a42:	4603      	mov	r3, r0
 8007a44:	460c      	mov	r4, r1
 8007a46:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			tf = ta + td;
 8007a4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007a4e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007a52:	f7f8 fc1b 	bl	800028c <__adddf3>
 8007a56:	4603      	mov	r3, r0
 8007a58:	460c      	mov	r4, r1
 8007a5a:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8007a5e:	e03a      	b.n	8007ad6 <scaraInitScurve1+0x4e6>
//				td = total_s/v_design;
//				tf = ta + td;
//			}
	
		}else{
			tf = 2*total_s/v_design;
 8007a60:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007a64:	4602      	mov	r2, r0
 8007a66:	460b      	mov	r3, r1
 8007a68:	f7f8 fc10 	bl	800028c <__adddf3>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	460c      	mov	r4, r1
 8007a70:	4618      	mov	r0, r3
 8007a72:	4621      	mov	r1, r4
 8007a74:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007a78:	f7f8 fee8 	bl	800084c <__aeabi_ddiv>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	460c      	mov	r4, r1
 8007a80:	e9c7 3408 	strd	r3, r4, [r7, #32]
			ta = tf/4;
 8007a84:	f04f 0200 	mov.w	r2, #0
 8007a88:	4b5d      	ldr	r3, [pc, #372]	; (8007c00 <scaraInitScurve1+0x610>)
 8007a8a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007a8e:	f7f8 fedd 	bl	800084c <__aeabi_ddiv>
 8007a92:	4603      	mov	r3, r0
 8007a94:	460c      	mov	r4, r1
 8007a96:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
			td = 3*tf/4;
 8007a9a:	f04f 0200 	mov.w	r2, #0
 8007a9e:	4b59      	ldr	r3, [pc, #356]	; (8007c04 <scaraInitScurve1+0x614>)
 8007aa0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007aa4:	f7f8 fda8 	bl	80005f8 <__aeabi_dmul>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	460c      	mov	r4, r1
 8007aac:	4618      	mov	r0, r3
 8007aae:	4621      	mov	r1, r4
 8007ab0:	f04f 0200 	mov.w	r2, #0
 8007ab4:	4b52      	ldr	r3, [pc, #328]	; (8007c00 <scaraInitScurve1+0x610>)
 8007ab6:	f7f8 fec9 	bl	800084c <__aeabi_ddiv>
 8007aba:	4603      	mov	r3, r0
 8007abc:	460c      	mov	r4, r1
 8007abe:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			a_design = v_design/ta;
 8007ac2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007ac6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007aca:	f7f8 febf 	bl	800084c <__aeabi_ddiv>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	460c      	mov	r4, r1
 8007ad2:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
		}
	}
	//no_sample = ceilf(tf / T_SAMPLING); // ceiling
	 // Init lspb params
	
	scurve->Ta = ta;
 8007ad6:	69fa      	ldr	r2, [r7, #28]
 8007ad8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8007adc:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	scurve->Tf = tf;
 8007ae0:	69fa      	ldr	r2, [r7, #28]
 8007ae2:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8007ae6:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	scurve->Td = td;
 8007aea:	69fa      	ldr	r2, [r7, #28]
 8007aec:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8007af0:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	scurve->a_design = a_design;
 8007af4:	69fa      	ldr	r2, [r7, #28]
 8007af6:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8007afa:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	scurve->v_design = v_design;
 8007afe:	69fa      	ldr	r2, [r7, #28]
 8007b00:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8007b04:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	scurve->v_lim = v_lim;
 8007b08:	69fa      	ldr	r2, [r7, #28]
 8007b0a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8007b0e:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	scurve->total_s = total_s;
 8007b12:	69fa      	ldr	r2, [r7, #28]
 8007b14:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8007b18:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	scurve->a_current = 0;
 8007b1c:	69fa      	ldr	r2, [r7, #28]
 8007b1e:	f04f 0300 	mov.w	r3, #0
 8007b22:	f04f 0400 	mov.w	r4, #0
 8007b26:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
	scurve->v_current = 0;
 8007b2a:	69fa      	ldr	r2, [r7, #28]
 8007b2c:	f04f 0300 	mov.w	r3, #0
 8007b30:	f04f 0400 	mov.w	r4, #0
 8007b34:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
	scurve->s_current = 0;
 8007b38:	69fa      	ldr	r2, [r7, #28]
 8007b3a:	f04f 0300 	mov.w	r3, #0
 8007b3e:	f04f 0400 	mov.w	r4, #0
 8007b42:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
	//define duplicate value when calculating scurve flow
	scurve->k_1        = v_design/(6*ta*ta);
 8007b46:	f04f 0200 	mov.w	r2, #0
 8007b4a:	4b2f      	ldr	r3, [pc, #188]	; (8007c08 <scaraInitScurve1+0x618>)
 8007b4c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007b50:	f7f8 fd52 	bl	80005f8 <__aeabi_dmul>
 8007b54:	4603      	mov	r3, r0
 8007b56:	460c      	mov	r4, r1
 8007b58:	4618      	mov	r0, r3
 8007b5a:	4621      	mov	r1, r4
 8007b5c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007b60:	f7f8 fd4a 	bl	80005f8 <__aeabi_dmul>
 8007b64:	4603      	mov	r3, r0
 8007b66:	460c      	mov	r4, r1
 8007b68:	461a      	mov	r2, r3
 8007b6a:	4623      	mov	r3, r4
 8007b6c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007b70:	f7f8 fe6c 	bl	800084c <__aeabi_ddiv>
 8007b74:	4603      	mov	r3, r0
 8007b76:	460c      	mov	r4, r1
 8007b78:	69fa      	ldr	r2, [r7, #28]
 8007b7a:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	scurve->k_2		   = 2*ta*ta*ta;
 8007b7e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007b82:	4602      	mov	r2, r0
 8007b84:	460b      	mov	r3, r1
 8007b86:	f7f8 fb81 	bl	800028c <__adddf3>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	460c      	mov	r4, r1
 8007b8e:	4618      	mov	r0, r3
 8007b90:	4621      	mov	r1, r4
 8007b92:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007b96:	f7f8 fd2f 	bl	80005f8 <__aeabi_dmul>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	460c      	mov	r4, r1
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	4621      	mov	r1, r4
 8007ba2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007ba6:	f7f8 fd27 	bl	80005f8 <__aeabi_dmul>
 8007baa:	4603      	mov	r3, r0
 8007bac:	460c      	mov	r4, r1
 8007bae:	69fa      	ldr	r2, [r7, #28]
 8007bb0:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	scurve->k_3        = 6*ta;
 8007bb4:	f04f 0200 	mov.w	r2, #0
 8007bb8:	4b13      	ldr	r3, [pc, #76]	; (8007c08 <scaraInitScurve1+0x618>)
 8007bba:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007bbe:	f7f8 fd1b 	bl	80005f8 <__aeabi_dmul>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	460c      	mov	r4, r1
 8007bc6:	69fa      	ldr	r2, [r7, #28]
 8007bc8:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
	scurve->k_4        = 6*ta*ta;
 8007bcc:	f04f 0200 	mov.w	r2, #0
 8007bd0:	4b0d      	ldr	r3, [pc, #52]	; (8007c08 <scaraInitScurve1+0x618>)
 8007bd2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007bd6:	f7f8 fd0f 	bl	80005f8 <__aeabi_dmul>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	460c      	mov	r4, r1
 8007bde:	4618      	mov	r0, r3
 8007be0:	4621      	mov	r1, r4
 8007be2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007be6:	f7f8 fd07 	bl	80005f8 <__aeabi_dmul>
 8007bea:	4603      	mov	r3, r0
 8007bec:	460c      	mov	r4, r1
 8007bee:	69fa      	ldr	r2, [r7, #28]
 8007bf0:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
	return SCARA_STATUS_OK;
 8007bf4:	2300      	movs	r3, #0
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3750      	adds	r7, #80	; 0x50
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bdb0      	pop	{r4, r5, r7, pc}
 8007bfe:	bf00      	nop
 8007c00:	40100000 	.word	0x40100000
 8007c04:	40080000 	.word	0x40080000
 8007c08:	40180000 	.word	0x40180000
 8007c0c:	33333333 	.word	0x33333333
 8007c10:	3fd33333 	.word	0x3fd33333
 8007c14:	9999999a 	.word	0x9999999a
 8007c18:	3fb99999 	.word	0x3fb99999

08007c1c <scaraFlowLSPB1>:
SCARA_StatusTypeDef	scaraFlowLSPB1	(Trajectory_LSPB_TypeDef *lspb, double time){
 8007c1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007c20:	b08b      	sub	sp, #44	; 0x2c
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	60f8      	str	r0, [r7, #12]
 8007c26:	ed87 0b00 	vstr	d0, [r7]
	double tf, td, ta;

	tf = lspb->Tf;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8007c30:	e9c7 2308 	strd	r2, r3, [r7, #32]
	td = lspb->Td;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8007c3a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	ta = lspb->Ta;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8007c44:	e9c7 2304 	strd	r2, r3, [r7, #16]
	// Accelerate
	if ( 0.0f <= time && time <= ta) {
 8007c48:	f04f 0200 	mov.w	r2, #0
 8007c4c:	f04f 0300 	mov.w	r3, #0
 8007c50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c54:	f7f8 ff56 	bl	8000b04 <__aeabi_dcmpge>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d05b      	beq.n	8007d16 <scaraFlowLSPB1+0xfa>
 8007c5e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007c62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c66:	f7f8 ff43 	bl	8000af0 <__aeabi_dcmple>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d052      	beq.n	8007d16 <scaraFlowLSPB1+0xfa>
		lspb->a_current		=	lspb->a_design;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8007c76:	68fa      	ldr	r2, [r7, #12]
 8007c78:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	lspb->v0 + lspb->a_design*time;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8007c88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c8c:	f7f8 fcb4 	bl	80005f8 <__aeabi_dmul>
 8007c90:	4602      	mov	r2, r0
 8007c92:	460b      	mov	r3, r1
 8007c94:	4620      	mov	r0, r4
 8007c96:	4629      	mov	r1, r5
 8007c98:	f7f8 faf8 	bl	800028c <__adddf3>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	460c      	mov	r4, r1
 8007ca0:	68fa      	ldr	r2, [r7, #12]
 8007ca2:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*time + 0.5*lspb->a_design*time*time;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8007cb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cb6:	f7f8 fc9f 	bl	80005f8 <__aeabi_dmul>
 8007cba:	4602      	mov	r2, r0
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	4620      	mov	r0, r4
 8007cc0:	4629      	mov	r1, r5
 8007cc2:	f7f8 fae3 	bl	800028c <__adddf3>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	460c      	mov	r4, r1
 8007cca:	4625      	mov	r5, r4
 8007ccc:	461c      	mov	r4, r3
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8007cd4:	f04f 0200 	mov.w	r2, #0
 8007cd8:	4b9e      	ldr	r3, [pc, #632]	; (8007f54 <scaraFlowLSPB1+0x338>)
 8007cda:	f7f8 fc8d 	bl	80005f8 <__aeabi_dmul>
 8007cde:	4602      	mov	r2, r0
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	4610      	mov	r0, r2
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cea:	f7f8 fc85 	bl	80005f8 <__aeabi_dmul>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	460b      	mov	r3, r1
 8007cf2:	4610      	mov	r0, r2
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cfa:	f7f8 fc7d 	bl	80005f8 <__aeabi_dmul>
 8007cfe:	4602      	mov	r2, r0
 8007d00:	460b      	mov	r3, r1
 8007d02:	4620      	mov	r0, r4
 8007d04:	4629      	mov	r1, r5
 8007d06:	f7f8 fac1 	bl	800028c <__adddf3>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	460c      	mov	r4, r1
 8007d0e:	68fa      	ldr	r2, [r7, #12]
 8007d10:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8007d14:	e117      	b.n	8007f46 <scaraFlowLSPB1+0x32a>
	// Constant velocity
	} else if (ta < time && time <= td) {
 8007d16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d1a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007d1e:	f7f8 fedd 	bl	8000adc <__aeabi_dcmplt>
 8007d22:	4603      	mov	r3, r0
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d056      	beq.n	8007dd6 <scaraFlowLSPB1+0x1ba>
 8007d28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d30:	f7f8 fede 	bl	8000af0 <__aeabi_dcmple>
 8007d34:	4603      	mov	r3, r0
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d04d      	beq.n	8007dd6 <scaraFlowLSPB1+0x1ba>
		lspb->a_current		=	0;
 8007d3a:	68fa      	ldr	r2, [r7, #12]
 8007d3c:	f04f 0300 	mov.w	r3, #0
 8007d40:	f04f 0400 	mov.w	r4, #0
 8007d44:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	lspb->v_lim;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8007d4e:	68fa      	ldr	r2, [r7, #12]
 8007d50:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*ta*0.5 + lspb->v_design*(time - ta*0.5);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8007d60:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007d64:	f7f8 fc48 	bl	80005f8 <__aeabi_dmul>
 8007d68:	4602      	mov	r2, r0
 8007d6a:	460b      	mov	r3, r1
 8007d6c:	4610      	mov	r0, r2
 8007d6e:	4619      	mov	r1, r3
 8007d70:	f04f 0200 	mov.w	r2, #0
 8007d74:	4b77      	ldr	r3, [pc, #476]	; (8007f54 <scaraFlowLSPB1+0x338>)
 8007d76:	f7f8 fc3f 	bl	80005f8 <__aeabi_dmul>
 8007d7a:	4602      	mov	r2, r0
 8007d7c:	460b      	mov	r3, r1
 8007d7e:	4620      	mov	r0, r4
 8007d80:	4629      	mov	r1, r5
 8007d82:	f7f8 fa83 	bl	800028c <__adddf3>
 8007d86:	4603      	mov	r3, r0
 8007d88:	460c      	mov	r4, r1
 8007d8a:	4698      	mov	r8, r3
 8007d8c:	46a1      	mov	r9, r4
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8007d94:	f04f 0200 	mov.w	r2, #0
 8007d98:	4b6e      	ldr	r3, [pc, #440]	; (8007f54 <scaraFlowLSPB1+0x338>)
 8007d9a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007d9e:	f7f8 fc2b 	bl	80005f8 <__aeabi_dmul>
 8007da2:	4602      	mov	r2, r0
 8007da4:	460b      	mov	r3, r1
 8007da6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007daa:	f7f8 fa6d 	bl	8000288 <__aeabi_dsub>
 8007dae:	4602      	mov	r2, r0
 8007db0:	460b      	mov	r3, r1
 8007db2:	4620      	mov	r0, r4
 8007db4:	4629      	mov	r1, r5
 8007db6:	f7f8 fc1f 	bl	80005f8 <__aeabi_dmul>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	460c      	mov	r4, r1
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	4623      	mov	r3, r4
 8007dc2:	4640      	mov	r0, r8
 8007dc4:	4649      	mov	r1, r9
 8007dc6:	f7f8 fa61 	bl	800028c <__adddf3>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	460c      	mov	r4, r1
 8007dce:	68fa      	ldr	r2, [r7, #12]
 8007dd0:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8007dd4:	e0b7      	b.n	8007f46 <scaraFlowLSPB1+0x32a>
	// Decelerate
	} else if (td < time && time <= tf) {
 8007dd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dda:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007dde:	f7f8 fe7d 	bl	8000adc <__aeabi_dcmplt>
 8007de2:	4603      	mov	r3, r0
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	f000 809a 	beq.w	8007f1e <scaraFlowLSPB1+0x302>
 8007dea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007dee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007df2:	f7f8 fe7d 	bl	8000af0 <__aeabi_dcmple>
 8007df6:	4603      	mov	r3, r0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	f000 8090 	beq.w	8007f1e <scaraFlowLSPB1+0x302>
		lspb->a_current		=	-lspb->a_design;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8007e04:	4614      	mov	r4, r2
 8007e06:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	e9c3 451a 	strd	r4, r5, [r3, #104]	; 0x68
		lspb->v_current		=	lspb->v_design + lspb->a_design*(td - time);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	e9d3 890c 	ldrd	r8, r9, [r3, #48]	; 0x30
 8007e1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e20:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007e24:	f7f8 fa30 	bl	8000288 <__aeabi_dsub>
 8007e28:	4602      	mov	r2, r0
 8007e2a:	460b      	mov	r3, r1
 8007e2c:	4640      	mov	r0, r8
 8007e2e:	4649      	mov	r1, r9
 8007e30:	f7f8 fbe2 	bl	80005f8 <__aeabi_dmul>
 8007e34:	4602      	mov	r2, r0
 8007e36:	460b      	mov	r3, r1
 8007e38:	4620      	mov	r0, r4
 8007e3a:	4629      	mov	r1, r5
 8007e3c:	f7f8 fa26 	bl	800028c <__adddf3>
 8007e40:	4603      	mov	r3, r0
 8007e42:	460c      	mov	r4, r1
 8007e44:	68fa      	ldr	r2, [r7, #12]
 8007e46:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s1 - lspb->v0*(tf - time)
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	e9d3 8906 	ldrd	r8, r9, [r3, #24]
 8007e56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e5a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007e5e:	f7f8 fa13 	bl	8000288 <__aeabi_dsub>
 8007e62:	4602      	mov	r2, r0
 8007e64:	460b      	mov	r3, r1
 8007e66:	4640      	mov	r0, r8
 8007e68:	4649      	mov	r1, r9
 8007e6a:	f7f8 fbc5 	bl	80005f8 <__aeabi_dmul>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	460b      	mov	r3, r1
 8007e72:	4620      	mov	r0, r4
 8007e74:	4629      	mov	r1, r5
 8007e76:	f7f8 fa07 	bl	8000288 <__aeabi_dsub>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	460c      	mov	r4, r1
 8007e7e:	461d      	mov	r5, r3
 8007e80:	4626      	mov	r6, r4
								- (lspb->v_lim - lspb->v0)*(tf - time)*(tf - time)/(2*ta);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8007e8e:	461a      	mov	r2, r3
 8007e90:	4623      	mov	r3, r4
 8007e92:	f7f8 f9f9 	bl	8000288 <__aeabi_dsub>
 8007e96:	4603      	mov	r3, r0
 8007e98:	460c      	mov	r4, r1
 8007e9a:	4698      	mov	r8, r3
 8007e9c:	46a1      	mov	r9, r4
 8007e9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ea2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007ea6:	f7f8 f9ef 	bl	8000288 <__aeabi_dsub>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	460c      	mov	r4, r1
 8007eae:	461a      	mov	r2, r3
 8007eb0:	4623      	mov	r3, r4
 8007eb2:	4640      	mov	r0, r8
 8007eb4:	4649      	mov	r1, r9
 8007eb6:	f7f8 fb9f 	bl	80005f8 <__aeabi_dmul>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	460c      	mov	r4, r1
 8007ebe:	4698      	mov	r8, r3
 8007ec0:	46a1      	mov	r9, r4
 8007ec2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ec6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007eca:	f7f8 f9dd 	bl	8000288 <__aeabi_dsub>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	460c      	mov	r4, r1
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	4623      	mov	r3, r4
 8007ed6:	4640      	mov	r0, r8
 8007ed8:	4649      	mov	r1, r9
 8007eda:	f7f8 fb8d 	bl	80005f8 <__aeabi_dmul>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	460c      	mov	r4, r1
 8007ee2:	4698      	mov	r8, r3
 8007ee4:	46a1      	mov	r9, r4
 8007ee6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007eea:	4602      	mov	r2, r0
 8007eec:	460b      	mov	r3, r1
 8007eee:	f7f8 f9cd 	bl	800028c <__adddf3>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	460c      	mov	r4, r1
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	4623      	mov	r3, r4
 8007efa:	4640      	mov	r0, r8
 8007efc:	4649      	mov	r1, r9
 8007efe:	f7f8 fca5 	bl	800084c <__aeabi_ddiv>
 8007f02:	4603      	mov	r3, r0
 8007f04:	460c      	mov	r4, r1
 8007f06:	461a      	mov	r2, r3
 8007f08:	4623      	mov	r3, r4
 8007f0a:	4628      	mov	r0, r5
 8007f0c:	4631      	mov	r1, r6
 8007f0e:	f7f8 f9bb 	bl	8000288 <__aeabi_dsub>
 8007f12:	4603      	mov	r3, r0
 8007f14:	460c      	mov	r4, r1
		lspb->s_current		=	lspb->s1 - lspb->v0*(tf - time)
 8007f16:	68fa      	ldr	r2, [r7, #12]
 8007f18:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8007f1c:	e013      	b.n	8007f46 <scaraFlowLSPB1+0x32a>
	} else {
		lspb->a_current 	=	0;
 8007f1e:	68fa      	ldr	r2, [r7, #12]
 8007f20:	f04f 0300 	mov.w	r3, #0
 8007f24:	f04f 0400 	mov.w	r4, #0
 8007f28:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	0;
 8007f2c:	68fa      	ldr	r2, [r7, #12]
 8007f2e:	f04f 0300 	mov.w	r3, #0
 8007f32:	f04f 0400 	mov.w	r4, #0
 8007f36:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->total_s;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8007f40:	68fa      	ldr	r2, [r7, #12]
 8007f42:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	}

	return SCARA_STATUS_OK;
 8007f46:	2300      	movs	r3, #0
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	372c      	adds	r7, #44	; 0x2c
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f52:	bf00      	nop
 8007f54:	3fe00000 	.word	0x3fe00000

08007f58 <scaraFLowScurve1>:
SCARA_StatusTypeDef	scaraFLowScurve1(Trajectory_Scurve_TypeDef *scurve, double t)
{
 8007f58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007f5c:	b08d      	sub	sp, #52	; 0x34
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	60f8      	str	r0, [r7, #12]
 8007f62:	ed87 0b00 	vstr	d0, [r7]
	double tf, td, ta, vc;
	tf = scurve->Tf;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8007f6c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	ta = scurve->Ta;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8007f76:	e9c7 3408 	strd	r3, r4, [r7, #32]
	td = scurve->Td;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8007f80:	e9c7 3406 	strd	r3, r4, [r7, #24]
	vc = scurve->v_design;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8007f8a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	if ( 0.0f <= t && t <= ta) {
 8007f8e:	f04f 0200 	mov.w	r2, #0
 8007f92:	f04f 0300 	mov.w	r3, #0
 8007f96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f9a:	f7f8 fdb3 	bl	8000b04 <__aeabi_dcmpge>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d027      	beq.n	8007ff4 <scaraFLowScurve1+0x9c>
 8007fa4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007fa8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007fac:	f7f8 fda0 	bl	8000af0 <__aeabi_dcmple>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d01e      	beq.n	8007ff4 <scaraFLowScurve1+0x9c>
//		lspb->a_current		=	(time*vc)/ta*ta;
//		lspb->v_current		=	(time*time*vc)/(2*ta*ta);
		scurve->s_current	=	t*t*t*scurve->k_1;
 8007fb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fba:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007fbe:	f7f8 fb1b 	bl	80005f8 <__aeabi_dmul>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	460c      	mov	r4, r1
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	4621      	mov	r1, r4
 8007fca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fce:	f7f8 fb13 	bl	80005f8 <__aeabi_dmul>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	460c      	mov	r4, r1
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	4621      	mov	r1, r4
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	4623      	mov	r3, r4
 8007fe4:	f7f8 fb08 	bl	80005f8 <__aeabi_dmul>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	460c      	mov	r4, r1
 8007fec:	68fa      	ldr	r2, [r7, #12]
 8007fee:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8007ff2:	e196      	b.n	8008322 <scaraFLowScurve1+0x3ca>
	// Constant velocity
	} else if (ta < t && t <= 2*ta) {
 8007ff4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ff8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007ffc:	f7f8 fd6e 	bl	8000adc <__aeabi_dcmplt>
 8008000:	4603      	mov	r3, r0
 8008002:	2b00      	cmp	r3, #0
 8008004:	d06d      	beq.n	80080e2 <scaraFLowScurve1+0x18a>
 8008006:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800800a:	4602      	mov	r2, r0
 800800c:	460b      	mov	r3, r1
 800800e:	f7f8 f93d 	bl	800028c <__adddf3>
 8008012:	4603      	mov	r3, r0
 8008014:	460c      	mov	r4, r1
 8008016:	461a      	mov	r2, r3
 8008018:	4623      	mov	r3, r4
 800801a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800801e:	f7f8 fd67 	bl	8000af0 <__aeabi_dcmple>
 8008022:	4603      	mov	r3, r0
 8008024:	2b00      	cmp	r3, #0
 8008026:	d05c      	beq.n	80080e2 <scaraFLowScurve1+0x18a>
//		scurve->a_current   =	-(vc*(time - 2*ta))/(ta*ta);
//		scurve->v_current   =	vc/2 - (vc*(time - ta)*(time - 3*ta))/(2*ta*ta);
		scurve->s_current   =	-(t*t*t - t*t*scurve->k_3 + t*scurve->k_4 - scurve->k_2)*scurve->k_1;
 8008028:	e9d7 2300 	ldrd	r2, r3, [r7]
 800802c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008030:	f7f8 fae2 	bl	80005f8 <__aeabi_dmul>
 8008034:	4603      	mov	r3, r0
 8008036:	460c      	mov	r4, r1
 8008038:	4618      	mov	r0, r3
 800803a:	4621      	mov	r1, r4
 800803c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008040:	f7f8 fada 	bl	80005f8 <__aeabi_dmul>
 8008044:	4603      	mov	r3, r0
 8008046:	460c      	mov	r4, r1
 8008048:	4698      	mov	r8, r3
 800804a:	46a1      	mov	r9, r4
 800804c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008050:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008054:	f7f8 fad0 	bl	80005f8 <__aeabi_dmul>
 8008058:	4603      	mov	r3, r0
 800805a:	460c      	mov	r4, r1
 800805c:	4618      	mov	r0, r3
 800805e:	4621      	mov	r1, r4
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 8008066:	461a      	mov	r2, r3
 8008068:	4623      	mov	r3, r4
 800806a:	f7f8 fac5 	bl	80005f8 <__aeabi_dmul>
 800806e:	4603      	mov	r3, r0
 8008070:	460c      	mov	r4, r1
 8008072:	461a      	mov	r2, r3
 8008074:	4623      	mov	r3, r4
 8008076:	4640      	mov	r0, r8
 8008078:	4649      	mov	r1, r9
 800807a:	f7f8 f905 	bl	8000288 <__aeabi_dsub>
 800807e:	4603      	mov	r3, r0
 8008080:	460c      	mov	r4, r1
 8008082:	4698      	mov	r8, r3
 8008084:	46a1      	mov	r9, r4
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	; 0x90
 800808c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008090:	f7f8 fab2 	bl	80005f8 <__aeabi_dmul>
 8008094:	4603      	mov	r3, r0
 8008096:	460c      	mov	r4, r1
 8008098:	461a      	mov	r2, r3
 800809a:	4623      	mov	r3, r4
 800809c:	4640      	mov	r0, r8
 800809e:	4649      	mov	r1, r9
 80080a0:	f7f8 f8f4 	bl	800028c <__adddf3>
 80080a4:	4603      	mov	r3, r0
 80080a6:	460c      	mov	r4, r1
 80080a8:	4618      	mov	r0, r3
 80080aa:	4621      	mov	r1, r4
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 80080b2:	461a      	mov	r2, r3
 80080b4:	4623      	mov	r3, r4
 80080b6:	f7f8 f8e7 	bl	8000288 <__aeabi_dsub>
 80080ba:	4603      	mov	r3, r0
 80080bc:	460c      	mov	r4, r1
 80080be:	461d      	mov	r5, r3
 80080c0:	f084 4600 	eor.w	r6, r4, #2147483648	; 0x80000000
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 80080ca:	461a      	mov	r2, r3
 80080cc:	4623      	mov	r3, r4
 80080ce:	4628      	mov	r0, r5
 80080d0:	4631      	mov	r1, r6
 80080d2:	f7f8 fa91 	bl	80005f8 <__aeabi_dmul>
 80080d6:	4603      	mov	r3, r0
 80080d8:	460c      	mov	r4, r1
 80080da:	68fa      	ldr	r2, [r7, #12]
 80080dc:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 80080e0:	e11f      	b.n	8008322 <scaraFLowScurve1+0x3ca>
	// Decelerate
	} else if (2*ta < t && t <= td - ta) {
 80080e2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80080e6:	4602      	mov	r2, r0
 80080e8:	460b      	mov	r3, r1
 80080ea:	f7f8 f8cf 	bl	800028c <__adddf3>
 80080ee:	4603      	mov	r3, r0
 80080f0:	460c      	mov	r4, r1
 80080f2:	461a      	mov	r2, r3
 80080f4:	4623      	mov	r3, r4
 80080f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080fa:	f7f8 fd0d 	bl	8000b18 <__aeabi_dcmpgt>
 80080fe:	4603      	mov	r3, r0
 8008100:	2b00      	cmp	r3, #0
 8008102:	d024      	beq.n	800814e <scaraFLowScurve1+0x1f6>
 8008104:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008108:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800810c:	f7f8 f8bc 	bl	8000288 <__aeabi_dsub>
 8008110:	4603      	mov	r3, r0
 8008112:	460c      	mov	r4, r1
 8008114:	461a      	mov	r2, r3
 8008116:	4623      	mov	r3, r4
 8008118:	e9d7 0100 	ldrd	r0, r1, [r7]
 800811c:	f7f8 fce8 	bl	8000af0 <__aeabi_dcmple>
 8008120:	4603      	mov	r3, r0
 8008122:	2b00      	cmp	r3, #0
 8008124:	d013      	beq.n	800814e <scaraFLowScurve1+0x1f6>
//		scurve->a_current   =	0;
//		scurve->v_current   =	v_design;
		scurve->s_current   =	vc*(t - ta);
 8008126:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800812a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800812e:	f7f8 f8ab 	bl	8000288 <__aeabi_dsub>
 8008132:	4603      	mov	r3, r0
 8008134:	460c      	mov	r4, r1
 8008136:	4618      	mov	r0, r3
 8008138:	4621      	mov	r1, r4
 800813a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800813e:	f7f8 fa5b 	bl	80005f8 <__aeabi_dmul>
 8008142:	4603      	mov	r3, r0
 8008144:	460c      	mov	r4, r1
 8008146:	68fa      	ldr	r2, [r7, #12]
 8008148:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 800814c:	e0e9      	b.n	8008322 <scaraFLowScurve1+0x3ca>
	} else if(td-ta < t && t <= td){
 800814e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008152:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008156:	f7f8 f897 	bl	8000288 <__aeabi_dsub>
 800815a:	4603      	mov	r3, r0
 800815c:	460c      	mov	r4, r1
 800815e:	461a      	mov	r2, r3
 8008160:	4623      	mov	r3, r4
 8008162:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008166:	f7f8 fcd7 	bl	8000b18 <__aeabi_dcmpgt>
 800816a:	4603      	mov	r3, r0
 800816c:	2b00      	cmp	r3, #0
 800816e:	f000 8089 	beq.w	8008284 <scaraFLowScurve1+0x32c>
 8008172:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008176:	e9d7 0100 	ldrd	r0, r1, [r7]
 800817a:	f7f8 fcb9 	bl	8000af0 <__aeabi_dcmple>
 800817e:	4603      	mov	r3, r0
 8008180:	2b00      	cmp	r3, #0
 8008182:	d07f      	beq.n	8008284 <scaraFLowScurve1+0x32c>
//		scurve->a_current 	=	-(vc*(t - td + ta))/ta^2;
//		scurve->v_current   =	vc/2 - (vc*(t + ta - tf)*(t + 3*ta - tf))/(2*ta*ta);
		scurve->s_current   =	scurve->total_s - (ta*vc)/3 - vc*(t - tf) - (t-tf)*(t-tf)*(t + scurve->k_3 - tf)*scurve->k_1;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	e9d3 451c 	ldrd	r4, r5, [r3, #112]	; 0x70
 800818a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800818e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008192:	f7f8 fa31 	bl	80005f8 <__aeabi_dmul>
 8008196:	4602      	mov	r2, r0
 8008198:	460b      	mov	r3, r1
 800819a:	4610      	mov	r0, r2
 800819c:	4619      	mov	r1, r3
 800819e:	f04f 0200 	mov.w	r2, #0
 80081a2:	4b63      	ldr	r3, [pc, #396]	; (8008330 <scaraFLowScurve1+0x3d8>)
 80081a4:	f7f8 fb52 	bl	800084c <__aeabi_ddiv>
 80081a8:	4602      	mov	r2, r0
 80081aa:	460b      	mov	r3, r1
 80081ac:	4620      	mov	r0, r4
 80081ae:	4629      	mov	r1, r5
 80081b0:	f7f8 f86a 	bl	8000288 <__aeabi_dsub>
 80081b4:	4603      	mov	r3, r0
 80081b6:	460c      	mov	r4, r1
 80081b8:	4625      	mov	r5, r4
 80081ba:	461c      	mov	r4, r3
 80081bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80081c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081c4:	f7f8 f860 	bl	8000288 <__aeabi_dsub>
 80081c8:	4602      	mov	r2, r0
 80081ca:	460b      	mov	r3, r1
 80081cc:	4610      	mov	r0, r2
 80081ce:	4619      	mov	r1, r3
 80081d0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80081d4:	f7f8 fa10 	bl	80005f8 <__aeabi_dmul>
 80081d8:	4602      	mov	r2, r0
 80081da:	460b      	mov	r3, r1
 80081dc:	4620      	mov	r0, r4
 80081de:	4629      	mov	r1, r5
 80081e0:	f7f8 f852 	bl	8000288 <__aeabi_dsub>
 80081e4:	4603      	mov	r3, r0
 80081e6:	460c      	mov	r4, r1
 80081e8:	461d      	mov	r5, r3
 80081ea:	4626      	mov	r6, r4
 80081ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80081f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081f4:	f7f8 f848 	bl	8000288 <__aeabi_dsub>
 80081f8:	4603      	mov	r3, r0
 80081fa:	460c      	mov	r4, r1
 80081fc:	4698      	mov	r8, r3
 80081fe:	46a1      	mov	r9, r4
 8008200:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008204:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008208:	f7f8 f83e 	bl	8000288 <__aeabi_dsub>
 800820c:	4603      	mov	r3, r0
 800820e:	460c      	mov	r4, r1
 8008210:	461a      	mov	r2, r3
 8008212:	4623      	mov	r3, r4
 8008214:	4640      	mov	r0, r8
 8008216:	4649      	mov	r1, r9
 8008218:	f7f8 f9ee 	bl	80005f8 <__aeabi_dmul>
 800821c:	4603      	mov	r3, r0
 800821e:	460c      	mov	r4, r1
 8008220:	4698      	mov	r8, r3
 8008222:	46a1      	mov	r9, r4
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 800822a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800822e:	f7f8 f82d 	bl	800028c <__adddf3>
 8008232:	4603      	mov	r3, r0
 8008234:	460c      	mov	r4, r1
 8008236:	4618      	mov	r0, r3
 8008238:	4621      	mov	r1, r4
 800823a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800823e:	f7f8 f823 	bl	8000288 <__aeabi_dsub>
 8008242:	4603      	mov	r3, r0
 8008244:	460c      	mov	r4, r1
 8008246:	461a      	mov	r2, r3
 8008248:	4623      	mov	r3, r4
 800824a:	4640      	mov	r0, r8
 800824c:	4649      	mov	r1, r9
 800824e:	f7f8 f9d3 	bl	80005f8 <__aeabi_dmul>
 8008252:	4603      	mov	r3, r0
 8008254:	460c      	mov	r4, r1
 8008256:	4618      	mov	r0, r3
 8008258:	4621      	mov	r1, r4
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 8008260:	461a      	mov	r2, r3
 8008262:	4623      	mov	r3, r4
 8008264:	f7f8 f9c8 	bl	80005f8 <__aeabi_dmul>
 8008268:	4603      	mov	r3, r0
 800826a:	460c      	mov	r4, r1
 800826c:	461a      	mov	r2, r3
 800826e:	4623      	mov	r3, r4
 8008270:	4628      	mov	r0, r5
 8008272:	4631      	mov	r1, r6
 8008274:	f7f8 f808 	bl	8000288 <__aeabi_dsub>
 8008278:	4603      	mov	r3, r0
 800827a:	460c      	mov	r4, r1
 800827c:	68fa      	ldr	r2, [r7, #12]
 800827e:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8008282:	e04e      	b.n	8008322 <scaraFLowScurve1+0x3ca>
	} else if(td < t && t <= tf){
 8008284:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008288:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800828c:	f7f8 fc26 	bl	8000adc <__aeabi_dcmplt>
 8008290:	4603      	mov	r3, r0
 8008292:	2b00      	cmp	r3, #0
 8008294:	d045      	beq.n	8008322 <scaraFLowScurve1+0x3ca>
 8008296:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800829a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800829e:	f7f8 fc27 	bl	8000af0 <__aeabi_dcmple>
 80082a2:	4603      	mov	r3, r0
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d03c      	beq.n	8008322 <scaraFLowScurve1+0x3ca>
//		scurve->a_current 	=	-(vc*(ta - t + td))/(ta*ta);
//		scurve->v_current   =	(vc*(t - tf)*(t-tf))/(2*ta*ta);
		scurve->s_current   =	scurve->total_s + (t-tf)*(t-tf)*(t-tf)*scurve->k_1;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	e9d3 451c 	ldrd	r4, r5, [r3, #112]	; 0x70
 80082ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80082b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80082b6:	f7f7 ffe7 	bl	8000288 <__aeabi_dsub>
 80082ba:	4602      	mov	r2, r0
 80082bc:	460b      	mov	r3, r1
 80082be:	4690      	mov	r8, r2
 80082c0:	4699      	mov	r9, r3
 80082c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80082c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80082ca:	f7f7 ffdd 	bl	8000288 <__aeabi_dsub>
 80082ce:	4602      	mov	r2, r0
 80082d0:	460b      	mov	r3, r1
 80082d2:	4640      	mov	r0, r8
 80082d4:	4649      	mov	r1, r9
 80082d6:	f7f8 f98f 	bl	80005f8 <__aeabi_dmul>
 80082da:	4602      	mov	r2, r0
 80082dc:	460b      	mov	r3, r1
 80082de:	4690      	mov	r8, r2
 80082e0:	4699      	mov	r9, r3
 80082e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80082e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80082ea:	f7f7 ffcd 	bl	8000288 <__aeabi_dsub>
 80082ee:	4602      	mov	r2, r0
 80082f0:	460b      	mov	r3, r1
 80082f2:	4640      	mov	r0, r8
 80082f4:	4649      	mov	r1, r9
 80082f6:	f7f8 f97f 	bl	80005f8 <__aeabi_dmul>
 80082fa:	4602      	mov	r2, r0
 80082fc:	460b      	mov	r3, r1
 80082fe:	4610      	mov	r0, r2
 8008300:	4619      	mov	r1, r3
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8008308:	f7f8 f976 	bl	80005f8 <__aeabi_dmul>
 800830c:	4602      	mov	r2, r0
 800830e:	460b      	mov	r3, r1
 8008310:	4620      	mov	r0, r4
 8008312:	4629      	mov	r1, r5
 8008314:	f7f7 ffba 	bl	800028c <__adddf3>
 8008318:	4603      	mov	r3, r0
 800831a:	460c      	mov	r4, r1
 800831c:	68fa      	ldr	r2, [r7, #12]
 800831e:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
	}

	return SCARA_STATUS_OK;
 8008322:	2300      	movs	r3, #0
}
 8008324:	4618      	mov	r0, r3
 8008326:	3734      	adds	r7, #52	; 0x34
 8008328:	46bd      	mov	sp, r7
 800832a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800832e:	bf00      	nop
 8008330:	40080000 	.word	0x40080000
 8008334:	00000000 	.word	0x00000000

08008338 <scaraInitLSPB>:
SCARA_StatusTypeDef	scaraInitLSPB		(Trajectory_LSPB_TypeDef *lspb,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double a_factor) {
 8008338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800833c:	b0ad      	sub	sp, #180	; 0xb4
 800833e:	af00      	add	r7, sp, #0
 8008340:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008342:	460b      	mov	r3, r1
 8008344:	ed87 0b08 	vstr	d0, [r7, #32]
 8008348:	ed87 1b06 	vstr	d1, [r7, #24]
 800834c:	ed87 2b04 	vstr	d2, [r7, #16]
 8008350:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008354:	4613      	mov	r3, r2
 8008356:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	 double v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	 uint32_t	no_sample;
	 int8_t	dir;

	 if ( TRAJECTORY_3D == target) {
 800835a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800835e:	2b04      	cmp	r3, #4
 8008360:	d118      	bne.n	8008394 <scaraInitLSPB+0x5c>
		 v_design = V_DESIGN_3D*v_factor;
 8008362:	f20f 7368 	addw	r3, pc, #1896	; 0x768
 8008366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800836a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800836e:	f7f8 f943 	bl	80005f8 <__aeabi_dmul>
 8008372:	4603      	mov	r3, r0
 8008374:	460c      	mov	r4, r1
 8008376:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_3D*a_factor;
 800837a:	f20f 7350 	addw	r3, pc, #1872	; 0x750
 800837e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008382:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008386:	f7f8 f937 	bl	80005f8 <__aeabi_dmul>
 800838a:	4603      	mov	r3, r0
 800838c:	460c      	mov	r4, r1
 800838e:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 8008392:	e092      	b.n	80084ba <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_ROLL == target) {
 8008394:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008398:	2b05      	cmp	r3, #5
 800839a:	d118      	bne.n	80083ce <scaraInitLSPB+0x96>
		 v_design = V_DESIGN_ROLL*v_factor;
 800839c:	f20f 7334 	addw	r3, pc, #1844	; 0x734
 80083a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80083a8:	f7f8 f926 	bl	80005f8 <__aeabi_dmul>
 80083ac:	4603      	mov	r3, r0
 80083ae:	460c      	mov	r4, r1
 80083b0:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_ROLL*a_factor;
 80083b4:	f20f 731c 	addw	r3, pc, #1820	; 0x71c
 80083b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083bc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80083c0:	f7f8 f91a 	bl	80005f8 <__aeabi_dmul>
 80083c4:	4603      	mov	r3, r0
 80083c6:	460c      	mov	r4, r1
 80083c8:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 80083cc:	e075      	b.n	80084ba <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J0 == target) {
 80083ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d118      	bne.n	8008408 <scaraInitLSPB+0xd0>
		 v_design = V_DESIGN_J0*v_factor;
 80083d6:	f20f 63fc 	addw	r3, pc, #1788	; 0x6fc
 80083da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083de:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80083e2:	f7f8 f909 	bl	80005f8 <__aeabi_dmul>
 80083e6:	4603      	mov	r3, r0
 80083e8:	460c      	mov	r4, r1
 80083ea:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J0*a_factor;
 80083ee:	f20f 63e4 	addw	r3, pc, #1764	; 0x6e4
 80083f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80083fa:	f7f8 f8fd 	bl	80005f8 <__aeabi_dmul>
 80083fe:	4603      	mov	r3, r0
 8008400:	460c      	mov	r4, r1
 8008402:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 8008406:	e058      	b.n	80084ba <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J1 == target) {
 8008408:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800840c:	2b01      	cmp	r3, #1
 800840e:	d118      	bne.n	8008442 <scaraInitLSPB+0x10a>
		 v_design = V_DESIGN_J1*v_factor;
 8008410:	f20f 63c0 	addw	r3, pc, #1728	; 0x6c0
 8008414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008418:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800841c:	f7f8 f8ec 	bl	80005f8 <__aeabi_dmul>
 8008420:	4603      	mov	r3, r0
 8008422:	460c      	mov	r4, r1
 8008424:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J1*a_factor;
 8008428:	f20f 63a8 	addw	r3, pc, #1704	; 0x6a8
 800842c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008430:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008434:	f7f8 f8e0 	bl	80005f8 <__aeabi_dmul>
 8008438:	4603      	mov	r3, r0
 800843a:	460c      	mov	r4, r1
 800843c:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 8008440:	e03b      	b.n	80084ba <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J2 == target) {
 8008442:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008446:	2b02      	cmp	r3, #2
 8008448:	d118      	bne.n	800847c <scaraInitLSPB+0x144>
		 v_design = V_DESIGN_J2*v_factor;
 800844a:	f20f 6380 	addw	r3, pc, #1664	; 0x680
 800844e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008452:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008456:	f7f8 f8cf 	bl	80005f8 <__aeabi_dmul>
 800845a:	4603      	mov	r3, r0
 800845c:	460c      	mov	r4, r1
 800845e:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J2*a_factor;
 8008462:	f20f 6368 	addw	r3, pc, #1640	; 0x668
 8008466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800846a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800846e:	f7f8 f8c3 	bl	80005f8 <__aeabi_dmul>
 8008472:	4603      	mov	r3, r0
 8008474:	460c      	mov	r4, r1
 8008476:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 800847a:	e01e      	b.n	80084ba <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J3 == target) {
 800847c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008480:	2b03      	cmp	r3, #3
 8008482:	d118      	bne.n	80084b6 <scaraInitLSPB+0x17e>
		 v_design = V_DESIGN_J3*v_factor;
 8008484:	f20f 6354 	addw	r3, pc, #1620	; 0x654
 8008488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800848c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008490:	f7f8 f8b2 	bl	80005f8 <__aeabi_dmul>
 8008494:	4603      	mov	r3, r0
 8008496:	460c      	mov	r4, r1
 8008498:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J3*a_factor;
 800849c:	f20f 633c 	addw	r3, pc, #1596	; 0x63c
 80084a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80084a8:	f7f8 f8a6 	bl	80005f8 <__aeabi_dmul>
 80084ac:	4603      	mov	r3, r0
 80084ae:	460c      	mov	r4, r1
 80084b0:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 80084b4:	e001      	b.n	80084ba <scaraInitLSPB+0x182>
	 } else {
		 return SCARA_STATUS_ERROR_PARA;
 80084b6:	2306      	movs	r3, #6
 80084b8:	e2fa      	b.n	8008ab0 <scaraInitLSPB+0x778>
	 }

	 q0 = 0;
 80084ba:	f04f 0300 	mov.w	r3, #0
 80084be:	f04f 0400 	mov.w	r4, #0
 80084c2:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	 q1 = total_s;
 80084c6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80084ca:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
	 v0 = 0;
 80084ce:	f04f 0300 	mov.w	r3, #0
 80084d2:	f04f 0400 	mov.w	r4, #0
 80084d6:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	 v1 = 0;
 80084da:	f04f 0300 	mov.w	r3, #0
 80084de:	f04f 0400 	mov.w	r4, #0
 80084e2:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50

	 if ( q0 <= q1) {
 80084e6:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80084ea:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80084ee:	f7f8 faff 	bl	8000af0 <__aeabi_dcmple>
 80084f2:	4603      	mov	r3, r0
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d003      	beq.n	8008500 <scaraInitLSPB+0x1c8>
		 dir = 1;
 80084f8:	2301      	movs	r3, #1
 80084fa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80084fe:	e00c      	b.n	800851a <scaraInitLSPB+0x1e2>
	 } else {
		 dir = -1;
 8008500:	23ff      	movs	r3, #255	; 0xff
 8008502:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		 q1 = -q1;
 8008506:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800850a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800850e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008512:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008516:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	 }

	 if (DUTY_MODE_INIT_QVT == modeinit) {
 800851a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800851e:	2b01      	cmp	r3, #1
 8008520:	f040 809e 	bne.w	8008660 <scaraInitLSPB+0x328>
		 double v_lower, v_upper, tc_upper, a_upper;
		 tf = lspb->Tf;
 8008524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008526:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 800852a:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		 // Avoid division by 0
		 if (tf > 0.001) {
 800852e:	f20f 53b4 	addw	r3, pc, #1460	; 0x5b4
 8008532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008536:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800853a:	f7f8 faed 	bl	8000b18 <__aeabi_dcmpgt>
 800853e:	4603      	mov	r3, r0
 8008540:	2b00      	cmp	r3, #0
 8008542:	f000 8081 	beq.w	8008648 <scaraInitLSPB+0x310>
			 v_lower 	= (q1 - q0) / tf;
 8008546:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800854a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800854e:	f7f7 fe9b 	bl	8000288 <__aeabi_dsub>
 8008552:	4603      	mov	r3, r0
 8008554:	460c      	mov	r4, r1
 8008556:	4618      	mov	r0, r3
 8008558:	4621      	mov	r1, r4
 800855a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800855e:	f7f8 f975 	bl	800084c <__aeabi_ddiv>
 8008562:	4603      	mov	r3, r0
 8008564:	460c      	mov	r4, r1
 8008566:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			 v_upper 	= 2*(q1 - q0) / tf;
 800856a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800856e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8008572:	f7f7 fe89 	bl	8000288 <__aeabi_dsub>
 8008576:	4603      	mov	r3, r0
 8008578:	460c      	mov	r4, r1
 800857a:	4618      	mov	r0, r3
 800857c:	4621      	mov	r1, r4
 800857e:	4602      	mov	r2, r0
 8008580:	460b      	mov	r3, r1
 8008582:	f7f7 fe83 	bl	800028c <__adddf3>
 8008586:	4603      	mov	r3, r0
 8008588:	460c      	mov	r4, r1
 800858a:	4618      	mov	r0, r3
 800858c:	4621      	mov	r1, r4
 800858e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8008592:	f7f8 f95b 	bl	800084c <__aeabi_ddiv>
 8008596:	4603      	mov	r3, r0
 8008598:	460c      	mov	r4, r1
 800859a:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

			 if ( v_design < v_lower) {
 800859e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80085a2:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80085a6:	f7f8 fa99 	bl	8000adc <__aeabi_dcmplt>
 80085aa:	4603      	mov	r3, r0
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d001      	beq.n	80085b4 <scaraInitLSPB+0x27c>
				 return SCARA_STATUS_ERROR_OVER_VELOC;
 80085b0:	2309      	movs	r3, #9
 80085b2:	e27d      	b.n	8008ab0 <scaraInitLSPB+0x778>
			 } else {
				 if ( v_upper <= v_design) {
 80085b4:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80085b8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80085bc:	f7f8 fa98 	bl	8000af0 <__aeabi_dcmple>
 80085c0:	4603      	mov	r3, r0
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d003      	beq.n	80085ce <scaraInitLSPB+0x296>
					 v_design = v_upper;
 80085c6:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80085ca:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
				 }
				 // Avoid division by 0
				 if (v_design > 0.0000001) {
 80085ce:	f20f 531c 	addw	r3, pc, #1308	; 0x51c
 80085d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d6:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80085da:	f7f8 fa9d 	bl	8000b18 <__aeabi_dcmpgt>
 80085de:	4603      	mov	r3, r0
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d01a      	beq.n	800861a <scaraInitLSPB+0x2e2>
					 tc_upper	= tf - (q1 - q0)/v_design;
 80085e4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80085e8:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80085ec:	f7f7 fe4c 	bl	8000288 <__aeabi_dsub>
 80085f0:	4603      	mov	r3, r0
 80085f2:	460c      	mov	r4, r1
 80085f4:	4618      	mov	r0, r3
 80085f6:	4621      	mov	r1, r4
 80085f8:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80085fc:	f7f8 f926 	bl	800084c <__aeabi_ddiv>
 8008600:	4603      	mov	r3, r0
 8008602:	460c      	mov	r4, r1
 8008604:	461a      	mov	r2, r3
 8008606:	4623      	mov	r3, r4
 8008608:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800860c:	f7f7 fe3c 	bl	8000288 <__aeabi_dsub>
 8008610:	4603      	mov	r3, r0
 8008612:	460c      	mov	r4, r1
 8008614:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
 8008618:	e00b      	b.n	8008632 <scaraInitLSPB+0x2fa>
				 } else {
					 tc_upper = tf / 2;
 800861a:	f04f 0200 	mov.w	r2, #0
 800861e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008622:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8008626:	f7f8 f911 	bl	800084c <__aeabi_ddiv>
 800862a:	4603      	mov	r3, r0
 800862c:	460c      	mov	r4, r1
 800862e:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
				 }
				 a_upper	= v_design/tc_upper;
 8008632:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8008636:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800863a:	f7f8 f907 	bl	800084c <__aeabi_ddiv>
 800863e:	4603      	mov	r3, r0
 8008640:	460c      	mov	r4, r1
 8008642:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
 8008646:	e00b      	b.n	8008660 <scaraInitLSPB+0x328>
				//  } else {
				// 	 a_design = a_upper;
				//  }
			 }
		 } else {
			 v_design = 0;
 8008648:	f04f 0300 	mov.w	r3, #0
 800864c:	f04f 0400 	mov.w	r4, #0
 8008650:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
			 a_design = 0;
 8008654:	f04f 0300 	mov.w	r3, #0
 8008658:	f04f 0400 	mov.w	r4, #0
 800865c:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
		 }
	}

	 // Check condition trapezoidal ---> triangle
	 // Avoid division by 0
	 if (a_design > 0.0000001 && v_design > 0.0000001) {
 8008660:	f20f 4388 	addw	r3, pc, #1160	; 0x488
 8008664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008668:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800866c:	f7f8 fa54 	bl	8000b18 <__aeabi_dcmpgt>
 8008670:	4603      	mov	r3, r0
 8008672:	2b00      	cmp	r3, #0
 8008674:	f000 819c 	beq.w	80089b0 <scaraInitLSPB+0x678>
 8008678:	f20f 4370 	addw	r3, pc, #1136	; 0x470
 800867c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008680:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8008684:	f7f8 fa48 	bl	8000b18 <__aeabi_dcmpgt>
 8008688:	4603      	mov	r3, r0
 800868a:	2b00      	cmp	r3, #0
 800868c:	f000 8190 	beq.w	80089b0 <scaraInitLSPB+0x678>
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 8008690:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8008694:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8008698:	f7f7 fdf6 	bl	8000288 <__aeabi_dsub>
 800869c:	4603      	mov	r3, r0
 800869e:	460c      	mov	r4, r1
 80086a0:	461d      	mov	r5, r3
 80086a2:	f024 4600 	bic.w	r6, r4, #2147483648	; 0x80000000
 80086a6:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80086aa:	4628      	mov	r0, r5
 80086ac:	4631      	mov	r1, r6
 80086ae:	f7f7 ffa3 	bl	80005f8 <__aeabi_dmul>
 80086b2:	4603      	mov	r3, r0
 80086b4:	460c      	mov	r4, r1
 80086b6:	e9c7 3402 	strd	r3, r4, [r7, #8]
 80086ba:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80086be:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80086c2:	f7f7 ff99 	bl	80005f8 <__aeabi_dmul>
 80086c6:	4603      	mov	r3, r0
 80086c8:	460c      	mov	r4, r1
 80086ca:	e9c7 3400 	strd	r3, r4, [r7]
 80086ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80086d2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80086d6:	f7f7 ff8f 	bl	80005f8 <__aeabi_dmul>
 80086da:	4603      	mov	r3, r0
 80086dc:	460c      	mov	r4, r1
 80086de:	461d      	mov	r5, r3
 80086e0:	4626      	mov	r6, r4
 80086e2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80086e6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80086ea:	f7f7 ff85 	bl	80005f8 <__aeabi_dmul>
 80086ee:	4603      	mov	r3, r0
 80086f0:	460c      	mov	r4, r1
 80086f2:	461a      	mov	r2, r3
 80086f4:	4623      	mov	r3, r4
 80086f6:	4628      	mov	r0, r5
 80086f8:	4631      	mov	r1, r6
 80086fa:	f7f7 fdc7 	bl	800028c <__adddf3>
 80086fe:	4603      	mov	r3, r0
 8008700:	460c      	mov	r4, r1
 8008702:	4618      	mov	r0, r3
 8008704:	4621      	mov	r1, r4
 8008706:	f04f 0200 	mov.w	r2, #0
 800870a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800870e:	f7f8 f89d 	bl	800084c <__aeabi_ddiv>
 8008712:	4603      	mov	r3, r0
 8008714:	460c      	mov	r4, r1
 8008716:	461a      	mov	r2, r3
 8008718:	4623      	mov	r3, r4
 800871a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800871e:	f7f7 fdb3 	bl	8000288 <__aeabi_dsub>
 8008722:	4603      	mov	r3, r0
 8008724:	460c      	mov	r4, r1
 8008726:	461a      	mov	r2, r3
 8008728:	4623      	mov	r3, r4
 800872a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800872e:	f7f8 f9df 	bl	8000af0 <__aeabi_dcmple>
 8008732:	4603      	mov	r3, r0
 8008734:	2b00      	cmp	r3, #0
 8008736:	d075      	beq.n	8008824 <scaraInitLSPB+0x4ec>
			 v_lim 	= sqrt(fabs(q1 - q0)*a_design + (v0*v0 + v1*v1)/2);
 8008738:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800873c:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8008740:	f7f7 fda2 	bl	8000288 <__aeabi_dsub>
 8008744:	4603      	mov	r3, r0
 8008746:	460c      	mov	r4, r1
 8008748:	469a      	mov	sl, r3
 800874a:	f024 4b00 	bic.w	fp, r4, #2147483648	; 0x80000000
 800874e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8008752:	4650      	mov	r0, sl
 8008754:	4659      	mov	r1, fp
 8008756:	f7f7 ff4f 	bl	80005f8 <__aeabi_dmul>
 800875a:	4603      	mov	r3, r0
 800875c:	460c      	mov	r4, r1
 800875e:	4625      	mov	r5, r4
 8008760:	461c      	mov	r4, r3
 8008762:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008766:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800876a:	f7f7 ff45 	bl	80005f8 <__aeabi_dmul>
 800876e:	4602      	mov	r2, r0
 8008770:	460b      	mov	r3, r1
 8008772:	4690      	mov	r8, r2
 8008774:	4699      	mov	r9, r3
 8008776:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800877a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800877e:	f7f7 ff3b 	bl	80005f8 <__aeabi_dmul>
 8008782:	4602      	mov	r2, r0
 8008784:	460b      	mov	r3, r1
 8008786:	4640      	mov	r0, r8
 8008788:	4649      	mov	r1, r9
 800878a:	f7f7 fd7f 	bl	800028c <__adddf3>
 800878e:	4602      	mov	r2, r0
 8008790:	460b      	mov	r3, r1
 8008792:	4610      	mov	r0, r2
 8008794:	4619      	mov	r1, r3
 8008796:	f04f 0200 	mov.w	r2, #0
 800879a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800879e:	f7f8 f855 	bl	800084c <__aeabi_ddiv>
 80087a2:	4602      	mov	r2, r0
 80087a4:	460b      	mov	r3, r1
 80087a6:	4620      	mov	r0, r4
 80087a8:	4629      	mov	r1, r5
 80087aa:	f7f7 fd6f 	bl	800028c <__adddf3>
 80087ae:	4603      	mov	r3, r0
 80087b0:	460c      	mov	r4, r1
 80087b2:	ec44 3b17 	vmov	d7, r3, r4
 80087b6:	eeb0 0a47 	vmov.f32	s0, s14
 80087ba:	eef0 0a67 	vmov.f32	s1, s15
 80087be:	f010 fa05 	bl	8018bcc <sqrt>
 80087c2:	ed87 0b26 	vstr	d0, [r7, #152]	; 0x98
			 ta		= (v_lim - v0)/a_design;
 80087c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80087ca:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80087ce:	f7f7 fd5b 	bl	8000288 <__aeabi_dsub>
 80087d2:	4603      	mov	r3, r0
 80087d4:	460c      	mov	r4, r1
 80087d6:	4618      	mov	r0, r3
 80087d8:	4621      	mov	r1, r4
 80087da:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80087de:	f7f8 f835 	bl	800084c <__aeabi_ddiv>
 80087e2:	4603      	mov	r3, r0
 80087e4:	460c      	mov	r4, r1
 80087e6:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			 td		= (v_lim - v1)/a_design;
 80087ea:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80087ee:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80087f2:	f7f7 fd49 	bl	8000288 <__aeabi_dsub>
 80087f6:	4603      	mov	r3, r0
 80087f8:	460c      	mov	r4, r1
 80087fa:	4618      	mov	r0, r3
 80087fc:	4621      	mov	r1, r4
 80087fe:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8008802:	f7f8 f823 	bl	800084c <__aeabi_ddiv>
 8008806:	4603      	mov	r3, r0
 8008808:	460c      	mov	r4, r1
 800880a:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
			 tf		= ta + td;
 800880e:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8008812:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8008816:	f7f7 fd39 	bl	800028c <__adddf3>
 800881a:	4603      	mov	r3, r0
 800881c:	460c      	mov	r4, r1
 800881e:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 8008822:	e0e3      	b.n	80089ec <scaraInitLSPB+0x6b4>
		 } else {
			 v_lim	= v_design;
 8008824:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8008828:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
			 ta		= (v_lim - v0)/a_design;
 800882c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008830:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008834:	f7f7 fd28 	bl	8000288 <__aeabi_dsub>
 8008838:	4603      	mov	r3, r0
 800883a:	460c      	mov	r4, r1
 800883c:	4618      	mov	r0, r3
 800883e:	4621      	mov	r1, r4
 8008840:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8008844:	f7f8 f802 	bl	800084c <__aeabi_ddiv>
 8008848:	4603      	mov	r3, r0
 800884a:	460c      	mov	r4, r1
 800884c:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			 td		= (v_lim - v1)/a_design;
 8008850:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008854:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008858:	f7f7 fd16 	bl	8000288 <__aeabi_dsub>
 800885c:	4603      	mov	r3, r0
 800885e:	460c      	mov	r4, r1
 8008860:	4618      	mov	r0, r3
 8008862:	4621      	mov	r1, r4
 8008864:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8008868:	f7f7 fff0 	bl	800084c <__aeabi_ddiv>
 800886c:	4603      	mov	r3, r0
 800886e:	460c      	mov	r4, r1
 8008870:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
			 tf		= fabs(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 8008874:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8008878:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800887c:	f7f7 fd04 	bl	8000288 <__aeabi_dsub>
 8008880:	4603      	mov	r3, r0
 8008882:	460c      	mov	r4, r1
 8008884:	4698      	mov	r8, r3
 8008886:	f024 4900 	bic.w	r9, r4, #2147483648	; 0x80000000
 800888a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800888e:	4640      	mov	r0, r8
 8008890:	4649      	mov	r1, r9
 8008892:	f7f7 ffdb 	bl	800084c <__aeabi_ddiv>
 8008896:	4603      	mov	r3, r0
 8008898:	460c      	mov	r4, r1
 800889a:	4625      	mov	r5, r4
 800889c:	461c      	mov	r4, r3
 800889e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80088a2:	4602      	mov	r2, r0
 80088a4:	460b      	mov	r3, r1
 80088a6:	f7f7 fcf1 	bl	800028c <__adddf3>
 80088aa:	4602      	mov	r2, r0
 80088ac:	460b      	mov	r3, r1
 80088ae:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80088b2:	f7f7 ffcb 	bl	800084c <__aeabi_ddiv>
 80088b6:	4602      	mov	r2, r0
 80088b8:	460b      	mov	r3, r1
 80088ba:	4690      	mov	r8, r2
 80088bc:	4699      	mov	r9, r3
 80088be:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80088c2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80088c6:	f7f7 ffc1 	bl	800084c <__aeabi_ddiv>
 80088ca:	4602      	mov	r2, r0
 80088cc:	460b      	mov	r3, r1
 80088ce:	f04f 0000 	mov.w	r0, #0
 80088d2:	497d      	ldr	r1, [pc, #500]	; (8008ac8 <scaraInitLSPB+0x790>)
 80088d4:	f7f7 fcd8 	bl	8000288 <__aeabi_dsub>
 80088d8:	4602      	mov	r2, r0
 80088da:	460b      	mov	r3, r1
 80088dc:	4640      	mov	r0, r8
 80088de:	4649      	mov	r1, r9
 80088e0:	f7f7 fe8a 	bl	80005f8 <__aeabi_dmul>
 80088e4:	4602      	mov	r2, r0
 80088e6:	460b      	mov	r3, r1
 80088e8:	4690      	mov	r8, r2
 80088ea:	4699      	mov	r9, r3
 80088ec:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80088f0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80088f4:	f7f7 ffaa 	bl	800084c <__aeabi_ddiv>
 80088f8:	4602      	mov	r2, r0
 80088fa:	460b      	mov	r3, r1
 80088fc:	f04f 0000 	mov.w	r0, #0
 8008900:	4971      	ldr	r1, [pc, #452]	; (8008ac8 <scaraInitLSPB+0x790>)
 8008902:	f7f7 fcc1 	bl	8000288 <__aeabi_dsub>
 8008906:	4602      	mov	r2, r0
 8008908:	460b      	mov	r3, r1
 800890a:	4640      	mov	r0, r8
 800890c:	4649      	mov	r1, r9
 800890e:	f7f7 fe73 	bl	80005f8 <__aeabi_dmul>
 8008912:	4602      	mov	r2, r0
 8008914:	460b      	mov	r3, r1
 8008916:	4620      	mov	r0, r4
 8008918:	4629      	mov	r1, r5
 800891a:	f7f7 fcb7 	bl	800028c <__adddf3>
 800891e:	4603      	mov	r3, r0
 8008920:	460c      	mov	r4, r1
 8008922:	4625      	mov	r5, r4
 8008924:	461c      	mov	r4, r3
							+ v_lim/(2*a_design)*(1 - v1/v_lim)*(1 - v1/v_lim);
 8008926:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800892a:	4602      	mov	r2, r0
 800892c:	460b      	mov	r3, r1
 800892e:	f7f7 fcad 	bl	800028c <__adddf3>
 8008932:	4602      	mov	r2, r0
 8008934:	460b      	mov	r3, r1
 8008936:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800893a:	f7f7 ff87 	bl	800084c <__aeabi_ddiv>
 800893e:	4602      	mov	r2, r0
 8008940:	460b      	mov	r3, r1
 8008942:	4690      	mov	r8, r2
 8008944:	4699      	mov	r9, r3
 8008946:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800894a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800894e:	f7f7 ff7d 	bl	800084c <__aeabi_ddiv>
 8008952:	4602      	mov	r2, r0
 8008954:	460b      	mov	r3, r1
 8008956:	f04f 0000 	mov.w	r0, #0
 800895a:	495b      	ldr	r1, [pc, #364]	; (8008ac8 <scaraInitLSPB+0x790>)
 800895c:	f7f7 fc94 	bl	8000288 <__aeabi_dsub>
 8008960:	4602      	mov	r2, r0
 8008962:	460b      	mov	r3, r1
 8008964:	4640      	mov	r0, r8
 8008966:	4649      	mov	r1, r9
 8008968:	f7f7 fe46 	bl	80005f8 <__aeabi_dmul>
 800896c:	4602      	mov	r2, r0
 800896e:	460b      	mov	r3, r1
 8008970:	4690      	mov	r8, r2
 8008972:	4699      	mov	r9, r3
 8008974:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8008978:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800897c:	f7f7 ff66 	bl	800084c <__aeabi_ddiv>
 8008980:	4602      	mov	r2, r0
 8008982:	460b      	mov	r3, r1
 8008984:	f04f 0000 	mov.w	r0, #0
 8008988:	494f      	ldr	r1, [pc, #316]	; (8008ac8 <scaraInitLSPB+0x790>)
 800898a:	f7f7 fc7d 	bl	8000288 <__aeabi_dsub>
 800898e:	4602      	mov	r2, r0
 8008990:	460b      	mov	r3, r1
 8008992:	4640      	mov	r0, r8
 8008994:	4649      	mov	r1, r9
 8008996:	f7f7 fe2f 	bl	80005f8 <__aeabi_dmul>
 800899a:	4602      	mov	r2, r0
 800899c:	460b      	mov	r3, r1
			 tf		= fabs(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 800899e:	4620      	mov	r0, r4
 80089a0:	4629      	mov	r1, r5
 80089a2:	f7f7 fc73 	bl	800028c <__adddf3>
 80089a6:	4603      	mov	r3, r0
 80089a8:	460c      	mov	r4, r1
 80089aa:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 80089ae:	e01d      	b.n	80089ec <scaraInitLSPB+0x6b4>
		 }
	 } else {
		 v_lim	= 0;
 80089b0:	f04f 0300 	mov.w	r3, #0
 80089b4:	f04f 0400 	mov.w	r4, #0
 80089b8:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		 ta = tf/2;
 80089bc:	f04f 0200 	mov.w	r2, #0
 80089c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80089c4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80089c8:	f7f7 ff40 	bl	800084c <__aeabi_ddiv>
 80089cc:	4603      	mov	r3, r0
 80089ce:	460c      	mov	r4, r1
 80089d0:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
		 td = tf/2;
 80089d4:	f04f 0200 	mov.w	r2, #0
 80089d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80089dc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80089e0:	f7f7 ff34 	bl	800084c <__aeabi_ddiv>
 80089e4:	4603      	mov	r3, r0
 80089e6:	460c      	mov	r4, r1
 80089e8:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	 }

	 no_sample = ceilf(tf / T_SAMPLING); // ceiling
 80089ec:	a334      	add	r3, pc, #208	; (adr r3, 8008ac0 <scaraInitLSPB+0x788>)
 80089ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80089f6:	f7f7 ff29 	bl	800084c <__aeabi_ddiv>
 80089fa:	4603      	mov	r3, r0
 80089fc:	460c      	mov	r4, r1
 80089fe:	4618      	mov	r0, r3
 8008a00:	4621      	mov	r1, r4
 8008a02:	f7f8 f8f1 	bl	8000be8 <__aeabi_d2f>
 8008a06:	4603      	mov	r3, r0
 8008a08:	ee00 3a10 	vmov	s0, r3
 8008a0c:	f010 f89c 	bl	8018b48 <ceilf>
 8008a10:	eef0 7a40 	vmov.f32	s15, s0
 8008a14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a18:	ee17 3a90 	vmov	r3, s15
 8008a1c:	637b      	str	r3, [r7, #52]	; 0x34
	 // Init lspb params
	 lspb->dir= dir;
 8008a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a20:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8008a24:	701a      	strb	r2, [r3, #0]
	 lspb->s0 = q0;
 8008a26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a28:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8008a2c:	e9c2 3402 	strd	r3, r4, [r2, #8]
	 lspb->s1 = q1;
 8008a30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a32:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8008a36:	e9c2 3404 	strd	r3, r4, [r2, #16]
	 lspb->Ta = ta;
 8008a3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a3c:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8008a40:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	 lspb->Td = td;
 8008a44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a46:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8008a4a:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	 lspb->Tf = tf;
 8008a4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a50:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8008a54:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	 lspb->a_design = a_design;
 8008a58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a5a:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8008a5e:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	 lspb->v_design = v_design;
 8008a62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a64:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8008a68:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	 lspb->v_lim = v_lim;
 8008a6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a6e:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8008a72:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	 lspb->v0 = v0;
 8008a76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a78:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8008a7c:	e9c2 3406 	strd	r3, r4, [r2, #24]
	 lspb->v1 = v1;
 8008a80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a82:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8008a86:	e9c2 3408 	strd	r3, r4, [r2, #32]
	 lspb->num_of_sampling = no_sample;
 8008a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a8e:	659a      	str	r2, [r3, #88]	; 0x58
	 lspb->total_s = lspb->s1 - lspb->s0;
 8008a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a92:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8008a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a98:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	4623      	mov	r3, r4
 8008aa0:	f7f7 fbf2 	bl	8000288 <__aeabi_dsub>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	460c      	mov	r4, r1
 8008aa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008aaa:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

	 return SCARA_STATUS_OK;
 8008aae:	2300      	movs	r3, #0
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	37b4      	adds	r7, #180	; 0xb4
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aba:	bf00      	nop
 8008abc:	f3af 8000 	nop.w
 8008ac0:	40000000 	.word	0x40000000
 8008ac4:	3f847ae1 	.word	0x3f847ae1
 8008ac8:	3ff00000 	.word	0x3ff00000
 8008acc:	00000000 	.word	0x00000000
 8008ad0:	405c2000 	.word	0x405c2000
 8008ad4:	14000000 	.word	0x14000000
 8008ad8:	4000f6f0 	.word	0x4000f6f0
 8008adc:	6b259425 	.word	0x6b259425
 8008ae0:	40069b91 	.word	0x40069b91
 8008ae4:	d2f1a9fc 	.word	0xd2f1a9fc
 8008ae8:	3f50624d 	.word	0x3f50624d
 8008aec:	9abcaf48 	.word	0x9abcaf48
 8008af0:	3e7ad7f2 	.word	0x3e7ad7f2

08008af4 <scaraInitScurve>:
SCARA_StatusTypeDef	scaraInitScurve		(Trajectory_Scurve_TypeDef *scurve,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double a_factor) {
 8008af4:	b480      	push	{r7}
 8008af6:	b089      	sub	sp, #36	; 0x24
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	61f8      	str	r0, [r7, #28]
 8008afc:	460b      	mov	r3, r1
 8008afe:	ed87 0b04 	vstr	d0, [r7, #16]
 8008b02:	ed87 1b02 	vstr	d1, [r7, #8]
 8008b06:	ed87 2b00 	vstr	d2, [r7]
 8008b0a:	76fb      	strb	r3, [r7, #27]
 8008b0c:	4613      	mov	r3, r2
 8008b0e:	76bb      	strb	r3, [r7, #26]
//	 scurve->s_1 = s_1;
//	 scurve->s_2 = s_2;
//	 scurve->s_3 = s_3;
//	 scurve->s_4 = s_4;

	 return SCARA_STATUS_OK;
 8008b10:	2300      	movs	r3, #0
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3724      	adds	r7, #36	; 0x24
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr
	...

08008b20 <scaraFlowDuty>:
}

/* Compute new x, y , z, theta1, theta2 , d3, theta4 corresponding to time */
SCARA_StatusTypeDef	scaraFlowDuty		(double time,
										SCARA_PositionTypeDef *pos_Next ,
										SCARA_PositionTypeDef pos_Current) {
 8008b20:	b082      	sub	sp, #8
 8008b22:	b5b0      	push	{r4, r5, r7, lr}
 8008b24:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 8008b28:	af2e      	add	r7, sp, #184	; 0xb8
 8008b2a:	f107 0108 	add.w	r1, r7, #8
 8008b2e:	ed81 0b00 	vstr	d0, [r1]
 8008b32:	1d39      	adds	r1, r7, #4
 8008b34:	6008      	str	r0, [r1, #0]
 8008b36:	f507 71b8 	add.w	r1, r7, #368	; 0x170
 8008b3a:	e881 000c 	stmia.w	r1, {r2, r3}
	SCARA_StatusTypeDef status1, status2, status3, status4;
	SCARA_PositionTypeDef	positionCompute;
	// Update time
	positionCompute.t = time;
 8008b3e:	f107 0210 	add.w	r2, r7, #16
 8008b42:	f107 0308 	add.w	r3, r7, #8
 8008b46:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008b4a:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	/*---- Task space ----*/
	if ( DUTY_SPACE_TASK == myDUTY.space_type) {
 8008b4e:	4ba6      	ldr	r3, [pc, #664]	; (8008de8 <scaraFlowDuty+0x2c8>)
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	f040 8152 	bne.w	8008dfc <scaraFlowDuty+0x2dc>
		double s, angle, x, y, z, v, v_angle;
		int8_t	dir_roll;
		//---Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.task.trajectory_3d.trajectory_type) {
 8008b58:	4ba3      	ldr	r3, [pc, #652]	; (8008de8 <scaraFlowDuty+0x2c8>)
 8008b5a:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d12b      	bne.n	8008bba <scaraFlowDuty+0x9a>
//			s = myDUTY.task.trajectory_3d.lspb.s_current;
//			v = myDUTY.task.trajectory_3d.lspb.v_current;
//			angle = myDUTY.task.trajectory_roll.lspb.s_current;
//			v_angle = myDUTY.task.trajectory_roll.lspb.v_current;
//			dir_roll = myDUTY.task.trajectory_roll.lspb.dir;
			status1 = scaraFlowLSPB1(&(myDUTY.task.trajectory_3d.lspb), time);
 8008b62:	f107 0308 	add.w	r3, r7, #8
 8008b66:	ed93 0b00 	vldr	d0, [r3]
 8008b6a:	48a0      	ldr	r0, [pc, #640]	; (8008dec <scaraFlowDuty+0x2cc>)
 8008b6c:	f7ff f856 	bl	8007c1c <scaraFlowLSPB1>
 8008b70:	4603      	mov	r3, r0
 8008b72:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			v = myDUTY.task.trajectory_3d.lspb.v_current;
 8008b76:	4b9c      	ldr	r3, [pc, #624]	; (8008de8 <scaraFlowDuty+0x2c8>)
 8008b78:	e9d3 3462 	ldrd	r3, r4, [r3, #392]	; 0x188
 8008b7c:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
			s = myDUTY.task.trajectory_3d.lspb.s_current;
 8008b80:	4b99      	ldr	r3, [pc, #612]	; (8008de8 <scaraFlowDuty+0x2c8>)
 8008b82:	e9d3 3464 	ldrd	r3, r4, [r3, #400]	; 0x190
 8008b86:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
			angle = myDUTY.task.trajectory_roll.linear.constant_v*time;
 8008b8a:	4b97      	ldr	r3, [pc, #604]	; (8008de8 <scaraFlowDuty+0x2c8>)
 8008b8c:	e9d3 34fc 	ldrd	r3, r4, [r3, #1008]	; 0x3f0
 8008b90:	f107 0108 	add.w	r1, r7, #8
 8008b94:	461a      	mov	r2, r3
 8008b96:	4623      	mov	r3, r4
 8008b98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b9c:	f7f7 fd2c 	bl	80005f8 <__aeabi_dmul>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	460c      	mov	r4, r1
 8008ba4:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 8008ba8:	4b8f      	ldr	r3, [pc, #572]	; (8008de8 <scaraFlowDuty+0x2c8>)
 8008baa:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8008bae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
			status2 = SCARA_STATUS_OK;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 8008bb8:	e05c      	b.n	8008c74 <scaraFlowDuty+0x154>
			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.task.trajectory_3d.trajectory_type) {
 8008bba:	4b8b      	ldr	r3, [pc, #556]	; (8008de8 <scaraFlowDuty+0x2c8>)
 8008bbc:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d126      	bne.n	8008c12 <scaraFlowDuty+0xf2>
//			s = myDUTY.task.trajectory_3d.scurve.s_current;
//			v = myDUTY.task.trajectory_3d.scurve.v_current;
//			angle = myDUTY.task.trajectory_roll.scurve.s_current;
//			v_angle = myDUTY.task.trajectory_roll.scurve.v_current;
//			dir_roll = myDUTY.task.trajectory_roll.scurve.dir;
			status1 = scaraFLowScurve1(&(myDUTY.task.trajectory_3d.scurve), time);
 8008bc4:	f107 0308 	add.w	r3, r7, #8
 8008bc8:	ed93 0b00 	vldr	d0, [r3]
 8008bcc:	4888      	ldr	r0, [pc, #544]	; (8008df0 <scaraFlowDuty+0x2d0>)
 8008bce:	f7ff f9c3 	bl	8007f58 <scaraFLowScurve1>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			//v = myDUTY.task.trajectory_3d.lspb.v_current;
			s = myDUTY.task.trajectory_3d.scurve.s_current;
 8008bd8:	4b83      	ldr	r3, [pc, #524]	; (8008de8 <scaraFlowDuty+0x2c8>)
 8008bda:	e9d3 3498 	ldrd	r3, r4, [r3, #608]	; 0x260
 8008bde:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
			angle = myDUTY.task.trajectory_roll.linear.constant_v*time;
 8008be2:	4b81      	ldr	r3, [pc, #516]	; (8008de8 <scaraFlowDuty+0x2c8>)
 8008be4:	e9d3 34fc 	ldrd	r3, r4, [r3, #1008]	; 0x3f0
 8008be8:	f107 0108 	add.w	r1, r7, #8
 8008bec:	461a      	mov	r2, r3
 8008bee:	4623      	mov	r3, r4
 8008bf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008bf4:	f7f7 fd00 	bl	80005f8 <__aeabi_dmul>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	460c      	mov	r4, r1
 8008bfc:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 8008c00:	4b79      	ldr	r3, [pc, #484]	; (8008de8 <scaraFlowDuty+0x2c8>)
 8008c02:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8008c06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
			status2 = SCARA_STATUS_OK;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 8008c10:	e030      	b.n	8008c74 <scaraFlowDuty+0x154>
		}else if( DUTY_TRAJECTORY_LINEAR == myDUTY.task.trajectory_3d.trajectory_type){
 8008c12:	4b75      	ldr	r3, [pc, #468]	; (8008de8 <scaraFlowDuty+0x2c8>)
 8008c14:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8008c18:	2b02      	cmp	r3, #2
 8008c1a:	d129      	bne.n	8008c70 <scaraFlowDuty+0x150>
			s = time*myDUTY.task.trajectory_3d.linear.constant_v;
 8008c1c:	4b72      	ldr	r3, [pc, #456]	; (8008de8 <scaraFlowDuty+0x2c8>)
 8008c1e:	e9d3 349c 	ldrd	r3, r4, [r3, #624]	; 0x270
 8008c22:	f107 0108 	add.w	r1, r7, #8
 8008c26:	461a      	mov	r2, r3
 8008c28:	4623      	mov	r3, r4
 8008c2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c2e:	f7f7 fce3 	bl	80005f8 <__aeabi_dmul>
 8008c32:	4603      	mov	r3, r0
 8008c34:	460c      	mov	r4, r1
 8008c36:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
			angle = myDUTY.task.trajectory_roll.linear.constant_v*time;
 8008c3a:	4b6b      	ldr	r3, [pc, #428]	; (8008de8 <scaraFlowDuty+0x2c8>)
 8008c3c:	e9d3 34fc 	ldrd	r3, r4, [r3, #1008]	; 0x3f0
 8008c40:	f107 0108 	add.w	r1, r7, #8
 8008c44:	461a      	mov	r2, r3
 8008c46:	4623      	mov	r3, r4
 8008c48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c4c:	f7f7 fcd4 	bl	80005f8 <__aeabi_dmul>
 8008c50:	4603      	mov	r3, r0
 8008c52:	460c      	mov	r4, r1
 8008c54:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 8008c58:	4b63      	ldr	r3, [pc, #396]	; (8008de8 <scaraFlowDuty+0x2c8>)
 8008c5a:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8008c5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
			status1 = SCARA_STATUS_OK;
 8008c62:	2300      	movs	r3, #0
 8008c64:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = SCARA_STATUS_OK;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 8008c6e:	e001      	b.n	8008c74 <scaraFlowDuty+0x154>
		}else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8008c70:	2305      	movs	r3, #5
 8008c72:	e2cc      	b.n	800920e <scaraFlowDuty+0x6ee>
		}

		if ( SCARA_STATUS_OK != status1) {
 8008c74:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d002      	beq.n	8008c82 <scaraFlowDuty+0x162>
			return status1;
 8008c7c:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8008c80:	e2c5      	b.n	800920e <scaraFlowDuty+0x6ee>
		}
		if ( SCARA_STATUS_OK != status2) {
 8008c82:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d002      	beq.n	8008c90 <scaraFlowDuty+0x170>
			return status2;
 8008c8a:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8008c8e:	e2be      	b.n	800920e <scaraFlowDuty+0x6ee>
		}

		//---Path flowing
			// Straight line
		if( DUTY_PATH_LINE == myDUTY.task.path.path_type) {
 8008c90:	4b55      	ldr	r3, [pc, #340]	; (8008de8 <scaraFlowDuty+0x2c8>)
 8008c92:	7a1b      	ldrb	r3, [r3, #8]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d117      	bne.n	8008cc8 <scaraFlowDuty+0x1a8>
			status1 = scaraFlowLine(&(myDUTY.task.path.line), s);
 8008c98:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 8008c9c:	4855      	ldr	r0, [pc, #340]	; (8008df4 <scaraFlowDuty+0x2d4>)
 8008c9e:	f000 fac3 	bl	8009228 <scaraFlowLine>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			x = myDUTY.task.path.line.x_current;
 8008ca8:	4b4f      	ldr	r3, [pc, #316]	; (8008de8 <scaraFlowDuty+0x2c8>)
 8008caa:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 8008cae:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			y = myDUTY.task.path.line.y_current;
 8008cb2:	4b4d      	ldr	r3, [pc, #308]	; (8008de8 <scaraFlowDuty+0x2c8>)
 8008cb4:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8008cb8:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
			z = myDUTY.task.path.line.z_current;
 8008cbc:	4b4a      	ldr	r3, [pc, #296]	; (8008de8 <scaraFlowDuty+0x2c8>)
 8008cbe:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 8008cc2:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
 8008cc6:	e01d      	b.n	8008d04 <scaraFlowDuty+0x1e4>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == myDUTY.task.path.path_type) {
 8008cc8:	4b47      	ldr	r3, [pc, #284]	; (8008de8 <scaraFlowDuty+0x2c8>)
 8008cca:	7a1b      	ldrb	r3, [r3, #8]
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	d117      	bne.n	8008d00 <scaraFlowDuty+0x1e0>
			status1 = scaraFlowCircle(&(myDUTY.task.path.circle), s);
 8008cd0:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 8008cd4:	4848      	ldr	r0, [pc, #288]	; (8008df8 <scaraFlowDuty+0x2d8>)
 8008cd6:	f000 fb2f 	bl	8009338 <scaraFlowCircle>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			x = myDUTY.task.path.circle.x_current;
 8008ce0:	4b41      	ldr	r3, [pc, #260]	; (8008de8 <scaraFlowDuty+0x2c8>)
 8008ce2:	e9d3 343e 	ldrd	r3, r4, [r3, #248]	; 0xf8
 8008ce6:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			y = myDUTY.task.path.circle.y_current;
 8008cea:	4b3f      	ldr	r3, [pc, #252]	; (8008de8 <scaraFlowDuty+0x2c8>)
 8008cec:	e9d3 3440 	ldrd	r3, r4, [r3, #256]	; 0x100
 8008cf0:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
			z = myDUTY.task.path.circle.z_current;
 8008cf4:	4b3c      	ldr	r3, [pc, #240]	; (8008de8 <scaraFlowDuty+0x2c8>)
 8008cf6:	e9d3 3442 	ldrd	r3, r4, [r3, #264]	; 0x108
 8008cfa:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
 8008cfe:	e001      	b.n	8008d04 <scaraFlowDuty+0x1e4>
		} else {
			return SCARA_STATUS_ERROR_TASK;
 8008d00:	2303      	movs	r3, #3
 8008d02:	e284      	b.n	800920e <scaraFlowDuty+0x6ee>
		}

		positionCompute.x 		= x;
 8008d04:	f107 0210 	add.w	r2, r7, #16
 8008d08:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8008d0c:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
		positionCompute.y		= y;
 8008d10:	f107 0210 	add.w	r2, r7, #16
 8008d14:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8008d18:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
		positionCompute.z 		= z;
 8008d1c:	f107 0210 	add.w	r2, r7, #16
 8008d20:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8008d24:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		positionCompute.roll 	= myDUTY.task.roll_start + angle*dir_roll;
 8008d28:	4b2f      	ldr	r3, [pc, #188]	; (8008de8 <scaraFlowDuty+0x2c8>)
 8008d2a:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8008d2e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008d32:	f997 3127 	ldrsb.w	r3, [r7, #295]	; 0x127
 8008d36:	4618      	mov	r0, r3
 8008d38:	f7f7 fbf4 	bl	8000524 <__aeabi_i2d>
 8008d3c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8008d40:	f7f7 fc5a 	bl	80005f8 <__aeabi_dmul>
 8008d44:	4602      	mov	r2, r0
 8008d46:	460b      	mov	r3, r1
 8008d48:	4620      	mov	r0, r4
 8008d4a:	4629      	mov	r1, r5
 8008d4c:	f7f7 fa9e 	bl	800028c <__adddf3>
 8008d50:	4603      	mov	r3, r0
 8008d52:	460c      	mov	r4, r1
 8008d54:	f107 0210 	add.w	r2, r7, #16
 8008d58:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

		positionCompute.q		= s;
 8008d5c:	f107 0210 	add.w	r2, r7, #16
 8008d60:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8008d64:	e9c2 3400 	strd	r3, r4, [r2]
		positionCompute.q_roll  = angle;
 8008d68:	f107 0210 	add.w	r2, r7, #16
 8008d6c:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	; 0x148
 8008d70:	e9c2 3402 	strd	r3, r4, [r2, #8]

		positionCompute.v_3d    = v;
 8008d74:	f107 0210 	add.w	r2, r7, #16
 8008d78:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 8008d7c:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
		positionCompute.v_roll  = v_angle;
 8008d80:	f107 0210 	add.w	r2, r7, #16
 8008d84:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8008d88:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0

		positionCompute.total_time = myDUTY.time_total;
 8008d8c:	4b16      	ldr	r3, [pc, #88]	; (8008de8 <scaraFlowDuty+0x2c8>)
 8008d8e:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8008d92:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008d96:	f107 0210 	add.w	r2, r7, #16
 8008d9a:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
		positionCompute.t		= time;
 8008d9e:	f107 0210 	add.w	r2, r7, #16
 8008da2:	f107 0308 	add.w	r3, r7, #8
 8008da6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008daa:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		if ( FALSE == kinematicInverse(&positionCompute, pos_Current)) {
 8008dae:	f107 0410 	add.w	r4, r7, #16
 8008db2:	4668      	mov	r0, sp
 8008db4:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8008db8:	22b8      	movs	r2, #184	; 0xb8
 8008dba:	4619      	mov	r1, r3
 8008dbc:	f00b fffe 	bl	8014dbc <memcpy>
 8008dc0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8008dc4:	cb0c      	ldmia	r3, {r2, r3}
 8008dc6:	4620      	mov	r0, r4
 8008dc8:	f7fb fbce 	bl	8004568 <kinematicInverse>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d101      	bne.n	8008dd6 <scaraFlowDuty+0x2b6>
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8008dd2:	2307      	movs	r3, #7
 8008dd4:	e21b      	b.n	800920e <scaraFlowDuty+0x6ee>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 8008dd6:	f107 0110 	add.w	r1, r7, #16
 8008dda:	1d3b      	adds	r3, r7, #4
 8008ddc:	22c0      	movs	r2, #192	; 0xc0
 8008dde:	6818      	ldr	r0, [r3, #0]
 8008de0:	f00b ffec 	bl	8014dbc <memcpy>
 8008de4:	e212      	b.n	800920c <scaraFlowDuty+0x6ec>
 8008de6:	bf00      	nop
 8008de8:	2000c580 	.word	0x2000c580
 8008dec:	2000c698 	.word	0x2000c698
 8008df0:	2000c718 	.word	0x2000c718
 8008df4:	2000c590 	.word	0x2000c590
 8008df8:	2000c600 	.word	0x2000c600
		}

	/*---- Joint space -----*/
	} else if (DUTY_SPACE_JOINT == myDUTY.space_type) {
 8008dfc:	4b8b      	ldr	r3, [pc, #556]	; (800902c <scaraFlowDuty+0x50c>)
 8008dfe:	781b      	ldrb	r3, [r3, #0]
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	f040 8201 	bne.w	8009208 <scaraFlowDuty+0x6e8>
		double s0, s1, s2, s3;
		double v0, v1, v2, v3;
		int8_t dir0, dir1, dir2, dir3;
		// Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.joint.trajectory[0].trajectory_type) {
 8008e06:	4b89      	ldr	r3, [pc, #548]	; (800902c <scaraFlowDuty+0x50c>)
 8008e08:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d174      	bne.n	8008efa <scaraFlowDuty+0x3da>
			status1 = scaraFlowLSPB1(&(myDUTY.joint.trajectory[0].lspb), time);
 8008e10:	f107 0308 	add.w	r3, r7, #8
 8008e14:	ed93 0b00 	vldr	d0, [r3]
 8008e18:	4885      	ldr	r0, [pc, #532]	; (8009030 <scaraFlowDuty+0x510>)
 8008e1a:	f7fe feff 	bl	8007c1c <scaraFlowLSPB1>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = scaraFlowLSPB1(&(myDUTY.joint.trajectory[1].lspb), time);
 8008e24:	f107 0308 	add.w	r3, r7, #8
 8008e28:	ed93 0b00 	vldr	d0, [r3]
 8008e2c:	4881      	ldr	r0, [pc, #516]	; (8009034 <scaraFlowDuty+0x514>)
 8008e2e:	f7fe fef5 	bl	8007c1c <scaraFlowLSPB1>
 8008e32:	4603      	mov	r3, r0
 8008e34:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
			status3 = scaraFlowLSPB1(&(myDUTY.joint.trajectory[2].lspb), time);
 8008e38:	f107 0308 	add.w	r3, r7, #8
 8008e3c:	ed93 0b00 	vldr	d0, [r3]
 8008e40:	487d      	ldr	r0, [pc, #500]	; (8009038 <scaraFlowDuty+0x518>)
 8008e42:	f7fe feeb 	bl	8007c1c <scaraFlowLSPB1>
 8008e46:	4603      	mov	r3, r0
 8008e48:	f887 315d 	strb.w	r3, [r7, #349]	; 0x15d
			status4 = scaraFlowLSPB1(&(myDUTY.joint.trajectory[3].lspb), time);
 8008e4c:	f107 0308 	add.w	r3, r7, #8
 8008e50:	ed93 0b00 	vldr	d0, [r3]
 8008e54:	4879      	ldr	r0, [pc, #484]	; (800903c <scaraFlowDuty+0x51c>)
 8008e56:	f7fe fee1 	bl	8007c1c <scaraFlowLSPB1>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	f887 315c 	strb.w	r3, [r7, #348]	; 0x15c

			dir0 = myDUTY.joint.trajectory[0].lspb.dir;
 8008e60:	4b72      	ldr	r3, [pc, #456]	; (800902c <scaraFlowDuty+0x50c>)
 8008e62:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 8008e66:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
			dir1 = myDUTY.joint.trajectory[1].lspb.dir;
 8008e6a:	4b70      	ldr	r3, [pc, #448]	; (800902c <scaraFlowDuty+0x50c>)
 8008e6c:	f893 35a0 	ldrb.w	r3, [r3, #1440]	; 0x5a0
 8008e70:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
			dir2 = myDUTY.joint.trajectory[2].lspb.dir;
 8008e74:	4b6d      	ldr	r3, [pc, #436]	; (800902c <scaraFlowDuty+0x50c>)
 8008e76:	f893 3720 	ldrb.w	r3, [r3, #1824]	; 0x720
 8008e7a:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
			dir3 = myDUTY.joint.trajectory[3].lspb.dir;
 8008e7e:	4b6b      	ldr	r3, [pc, #428]	; (800902c <scaraFlowDuty+0x50c>)
 8008e80:	f893 38a0 	ldrb.w	r3, [r3, #2208]	; 0x8a0
 8008e84:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc

			s0 = myDUTY.joint.trajectory[0].lspb.s_current;
 8008e88:	4b68      	ldr	r3, [pc, #416]	; (800902c <scaraFlowDuty+0x50c>)
 8008e8a:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8008e8e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008e92:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
			s1 = myDUTY.joint.trajectory[1].lspb.s_current;
 8008e96:	4b65      	ldr	r3, [pc, #404]	; (800902c <scaraFlowDuty+0x50c>)
 8008e98:	f503 63c3 	add.w	r3, r3, #1560	; 0x618
 8008e9c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008ea0:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
			s2 = myDUTY.joint.trajectory[2].lspb.s_current;
 8008ea4:	4b61      	ldr	r3, [pc, #388]	; (800902c <scaraFlowDuty+0x50c>)
 8008ea6:	f503 63f3 	add.w	r3, r3, #1944	; 0x798
 8008eaa:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008eae:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
			s3 = myDUTY.joint.trajectory[3].lspb.s_current;
 8008eb2:	4b5e      	ldr	r3, [pc, #376]	; (800902c <scaraFlowDuty+0x50c>)
 8008eb4:	f603 1318 	addw	r3, r3, #2328	; 0x918
 8008eb8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008ebc:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100

			v0 = myDUTY.joint.trajectory[0].lspb.v_current;
 8008ec0:	4b5a      	ldr	r3, [pc, #360]	; (800902c <scaraFlowDuty+0x50c>)
 8008ec2:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8008ec6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008eca:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8
			v1 = myDUTY.joint.trajectory[1].lspb.v_current;
 8008ece:	4b57      	ldr	r3, [pc, #348]	; (800902c <scaraFlowDuty+0x50c>)
 8008ed0:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 8008ed4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008ed8:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
			v2 = myDUTY.joint.trajectory[2].lspb.v_current;
 8008edc:	4b53      	ldr	r3, [pc, #332]	; (800902c <scaraFlowDuty+0x50c>)
 8008ede:	f503 63f2 	add.w	r3, r3, #1936	; 0x790
 8008ee2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008ee6:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
			v3 = myDUTY.joint.trajectory[3].lspb.v_current;
 8008eea:	4b50      	ldr	r3, [pc, #320]	; (800902c <scaraFlowDuty+0x50c>)
 8008eec:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 8008ef0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008ef4:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
 8008ef8:	e07b      	b.n	8008ff2 <scaraFlowDuty+0x4d2>

			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.joint.trajectory[0].trajectory_type) {
 8008efa:	4b4c      	ldr	r3, [pc, #304]	; (800902c <scaraFlowDuty+0x50c>)
 8008efc:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	d174      	bne.n	8008fee <scaraFlowDuty+0x4ce>
			status1 = scaraFLowScurve(&(myDUTY.joint.trajectory[0].scurve), time);
 8008f04:	f107 0308 	add.w	r3, r7, #8
 8008f08:	ed93 0b00 	vldr	d0, [r3]
 8008f0c:	484c      	ldr	r0, [pc, #304]	; (8009040 <scaraFlowDuty+0x520>)
 8008f0e:	f000 fa9b 	bl	8009448 <scaraFLowScurve>
 8008f12:	4603      	mov	r3, r0
 8008f14:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = scaraFLowScurve(&(myDUTY.joint.trajectory[1].scurve), time);
 8008f18:	f107 0308 	add.w	r3, r7, #8
 8008f1c:	ed93 0b00 	vldr	d0, [r3]
 8008f20:	4848      	ldr	r0, [pc, #288]	; (8009044 <scaraFlowDuty+0x524>)
 8008f22:	f000 fa91 	bl	8009448 <scaraFLowScurve>
 8008f26:	4603      	mov	r3, r0
 8008f28:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
			status3 = scaraFLowScurve(&(myDUTY.joint.trajectory[2].scurve), time);
 8008f2c:	f107 0308 	add.w	r3, r7, #8
 8008f30:	ed93 0b00 	vldr	d0, [r3]
 8008f34:	4844      	ldr	r0, [pc, #272]	; (8009048 <scaraFlowDuty+0x528>)
 8008f36:	f000 fa87 	bl	8009448 <scaraFLowScurve>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	f887 315d 	strb.w	r3, [r7, #349]	; 0x15d
			status4 = scaraFLowScurve(&(myDUTY.joint.trajectory[3].scurve), time);
 8008f40:	f107 0308 	add.w	r3, r7, #8
 8008f44:	ed93 0b00 	vldr	d0, [r3]
 8008f48:	4840      	ldr	r0, [pc, #256]	; (800904c <scaraFlowDuty+0x52c>)
 8008f4a:	f000 fa7d 	bl	8009448 <scaraFLowScurve>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	f887 315c 	strb.w	r3, [r7, #348]	; 0x15c
			dir0 = myDUTY.joint.trajectory[0].scurve.dir;
 8008f54:	4b35      	ldr	r3, [pc, #212]	; (800902c <scaraFlowDuty+0x50c>)
 8008f56:	f893 34a0 	ldrb.w	r3, [r3, #1184]	; 0x4a0
 8008f5a:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
			dir1 = myDUTY.joint.trajectory[1].scurve.dir;
 8008f5e:	4b33      	ldr	r3, [pc, #204]	; (800902c <scaraFlowDuty+0x50c>)
 8008f60:	f893 3620 	ldrb.w	r3, [r3, #1568]	; 0x620
 8008f64:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
			dir2 = myDUTY.joint.trajectory[2].scurve.dir;
 8008f68:	4b30      	ldr	r3, [pc, #192]	; (800902c <scaraFlowDuty+0x50c>)
 8008f6a:	f893 37a0 	ldrb.w	r3, [r3, #1952]	; 0x7a0
 8008f6e:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
			dir3 = myDUTY.joint.trajectory[3].scurve.dir;
 8008f72:	4b2e      	ldr	r3, [pc, #184]	; (800902c <scaraFlowDuty+0x50c>)
 8008f74:	f893 3920 	ldrb.w	r3, [r3, #2336]	; 0x920
 8008f78:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
			s0 = myDUTY.joint.trajectory[0].scurve.s_current;
 8008f7c:	4b2b      	ldr	r3, [pc, #172]	; (800902c <scaraFlowDuty+0x50c>)
 8008f7e:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8008f82:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008f86:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
			s1 = myDUTY.joint.trajectory[1].scurve.s_current;
 8008f8a:	4b28      	ldr	r3, [pc, #160]	; (800902c <scaraFlowDuty+0x50c>)
 8008f8c:	f503 63dd 	add.w	r3, r3, #1768	; 0x6e8
 8008f90:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008f94:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
			s2 = myDUTY.joint.trajectory[2].scurve.s_current;
 8008f98:	4b24      	ldr	r3, [pc, #144]	; (800902c <scaraFlowDuty+0x50c>)
 8008f9a:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8008f9e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008fa2:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
			s3 = myDUTY.joint.trajectory[3].scurve.s_current;
 8008fa6:	4b21      	ldr	r3, [pc, #132]	; (800902c <scaraFlowDuty+0x50c>)
 8008fa8:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 8008fac:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008fb0:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100

			v0 = myDUTY.joint.trajectory[0].scurve.v_current;
 8008fb4:	4b1d      	ldr	r3, [pc, #116]	; (800902c <scaraFlowDuty+0x50c>)
 8008fb6:	f503 63ac 	add.w	r3, r3, #1376	; 0x560
 8008fba:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008fbe:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8
			v1 = myDUTY.joint.trajectory[1].scurve.v_current;
 8008fc2:	4b1a      	ldr	r3, [pc, #104]	; (800902c <scaraFlowDuty+0x50c>)
 8008fc4:	f503 63dc 	add.w	r3, r3, #1760	; 0x6e0
 8008fc8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008fcc:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
			v2 = myDUTY.joint.trajectory[2].scurve.v_current;
 8008fd0:	4b16      	ldr	r3, [pc, #88]	; (800902c <scaraFlowDuty+0x50c>)
 8008fd2:	f503 6306 	add.w	r3, r3, #2144	; 0x860
 8008fd6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008fda:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
			v3 = myDUTY.joint.trajectory[3].scurve.v_current;
 8008fde:	4b13      	ldr	r3, [pc, #76]	; (800902c <scaraFlowDuty+0x50c>)
 8008fe0:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
 8008fe4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008fe8:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
 8008fec:	e001      	b.n	8008ff2 <scaraFlowDuty+0x4d2>

		} else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8008fee:	2305      	movs	r3, #5
 8008ff0:	e10d      	b.n	800920e <scaraFlowDuty+0x6ee>
		}
		// Check init status
		if ( SCARA_STATUS_OK != status1) {
 8008ff2:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d002      	beq.n	8009000 <scaraFlowDuty+0x4e0>
			return status1;
 8008ffa:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8008ffe:	e106      	b.n	800920e <scaraFlowDuty+0x6ee>
		}
		if ( SCARA_STATUS_OK != status2) {
 8009000:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8009004:	2b00      	cmp	r3, #0
 8009006:	d002      	beq.n	800900e <scaraFlowDuty+0x4ee>
			return status2;
 8009008:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 800900c:	e0ff      	b.n	800920e <scaraFlowDuty+0x6ee>
		}
		if ( SCARA_STATUS_OK != status3) {
 800900e:	f897 315d 	ldrb.w	r3, [r7, #349]	; 0x15d
 8009012:	2b00      	cmp	r3, #0
 8009014:	d002      	beq.n	800901c <scaraFlowDuty+0x4fc>
			return status3;
 8009016:	f897 315d 	ldrb.w	r3, [r7, #349]	; 0x15d
 800901a:	e0f8      	b.n	800920e <scaraFlowDuty+0x6ee>
		}
		if ( SCARA_STATUS_OK != status4) {
 800901c:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 8009020:	2b00      	cmp	r3, #0
 8009022:	d015      	beq.n	8009050 <scaraFlowDuty+0x530>
			return status4;
 8009024:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 8009028:	e0f1      	b.n	800920e <scaraFlowDuty+0x6ee>
 800902a:	bf00      	nop
 800902c:	2000c580 	.word	0x2000c580
 8009030:	2000c9a0 	.word	0x2000c9a0
 8009034:	2000cb20 	.word	0x2000cb20
 8009038:	2000cca0 	.word	0x2000cca0
 800903c:	2000ce20 	.word	0x2000ce20
 8009040:	2000ca20 	.word	0x2000ca20
 8009044:	2000cba0 	.word	0x2000cba0
 8009048:	2000cd20 	.word	0x2000cd20
 800904c:	2000cea0 	.word	0x2000cea0
		}

		positionCompute.Theta1 	= myDUTY.joint.theta1_start + s0*dir0;
 8009050:	4b73      	ldr	r3, [pc, #460]	; (8009220 <scaraFlowDuty+0x700>)
 8009052:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 8009056:	e9d3 4500 	ldrd	r4, r5, [r3]
 800905a:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 800905e:	4618      	mov	r0, r3
 8009060:	f7f7 fa60 	bl	8000524 <__aeabi_i2d>
 8009064:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8009068:	f7f7 fac6 	bl	80005f8 <__aeabi_dmul>
 800906c:	4602      	mov	r2, r0
 800906e:	460b      	mov	r3, r1
 8009070:	4620      	mov	r0, r4
 8009072:	4629      	mov	r1, r5
 8009074:	f7f7 f90a 	bl	800028c <__adddf3>
 8009078:	4603      	mov	r3, r0
 800907a:	460c      	mov	r4, r1
 800907c:	f107 0210 	add.w	r2, r7, #16
 8009080:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		positionCompute.Theta2 	= myDUTY.joint.theta2_start + s1*dir1;
 8009084:	4b66      	ldr	r3, [pc, #408]	; (8009220 <scaraFlowDuty+0x700>)
 8009086:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 800908a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800908e:	f997 30de 	ldrsb.w	r3, [r7, #222]	; 0xde
 8009092:	4618      	mov	r0, r3
 8009094:	f7f7 fa46 	bl	8000524 <__aeabi_i2d>
 8009098:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800909c:	f7f7 faac 	bl	80005f8 <__aeabi_dmul>
 80090a0:	4602      	mov	r2, r0
 80090a2:	460b      	mov	r3, r1
 80090a4:	4620      	mov	r0, r4
 80090a6:	4629      	mov	r1, r5
 80090a8:	f7f7 f8f0 	bl	800028c <__adddf3>
 80090ac:	4603      	mov	r3, r0
 80090ae:	460c      	mov	r4, r1
 80090b0:	f107 0210 	add.w	r2, r7, #16
 80090b4:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		positionCompute.D3 		= myDUTY.joint.d3_start 	+ s2*dir2;
 80090b8:	4b59      	ldr	r3, [pc, #356]	; (8009220 <scaraFlowDuty+0x700>)
 80090ba:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 80090be:	e9d3 4500 	ldrd	r4, r5, [r3]
 80090c2:	f997 30dd 	ldrsb.w	r3, [r7, #221]	; 0xdd
 80090c6:	4618      	mov	r0, r3
 80090c8:	f7f7 fa2c 	bl	8000524 <__aeabi_i2d>
 80090cc:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 80090d0:	f7f7 fa92 	bl	80005f8 <__aeabi_dmul>
 80090d4:	4602      	mov	r2, r0
 80090d6:	460b      	mov	r3, r1
 80090d8:	4620      	mov	r0, r4
 80090da:	4629      	mov	r1, r5
 80090dc:	f7f7 f8d6 	bl	800028c <__adddf3>
 80090e0:	4603      	mov	r3, r0
 80090e2:	460c      	mov	r4, r1
 80090e4:	f107 0210 	add.w	r2, r7, #16
 80090e8:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		positionCompute.Theta4 	= myDUTY.joint.theta4_start + s3*dir3;
 80090ec:	4b4c      	ldr	r3, [pc, #304]	; (8009220 <scaraFlowDuty+0x700>)
 80090ee:	f503 6323 	add.w	r3, r3, #2608	; 0xa30
 80090f2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80090f6:	f997 30dc 	ldrsb.w	r3, [r7, #220]	; 0xdc
 80090fa:	4618      	mov	r0, r3
 80090fc:	f7f7 fa12 	bl	8000524 <__aeabi_i2d>
 8009100:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8009104:	f7f7 fa78 	bl	80005f8 <__aeabi_dmul>
 8009108:	4602      	mov	r2, r0
 800910a:	460b      	mov	r3, r1
 800910c:	4620      	mov	r0, r4
 800910e:	4629      	mov	r1, r5
 8009110:	f7f7 f8bc 	bl	800028c <__adddf3>
 8009114:	4603      	mov	r3, r0
 8009116:	460c      	mov	r4, r1
 8009118:	f107 0210 	add.w	r2, r7, #16
 800911c:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

		positionCompute.v_theta1 	= v0;
 8009120:	f107 0210 	add.w	r2, r7, #16
 8009124:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 8009128:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		positionCompute.v_theta2 	= v1;
 800912c:	f107 0210 	add.w	r2, r7, #16
 8009130:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8009134:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
		positionCompute.v_d3 		= v2;
 8009138:	f107 0210 	add.w	r2, r7, #16
 800913c:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 8009140:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
		positionCompute.v_theta4 	= v3;
 8009144:	f107 0210 	add.w	r2, r7, #16
 8009148:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800914c:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0

		positionCompute.q_theta1 = s0;
 8009150:	f107 0210 	add.w	r2, r7, #16
 8009154:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	; 0x118
 8009158:	e9c2 3404 	strd	r3, r4, [r2, #16]
		positionCompute.q_theta2 = s1;
 800915c:	f107 0210 	add.w	r2, r7, #16
 8009160:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8009164:	e9c2 3406 	strd	r3, r4, [r2, #24]
		positionCompute.q_d3	 = s2;
 8009168:	f107 0210 	add.w	r2, r7, #16
 800916c:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 8009170:	e9c2 3408 	strd	r3, r4, [r2, #32]
		positionCompute.q_theta4 = s3;
 8009174:	f107 0210 	add.w	r2, r7, #16
 8009178:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 800917c:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

		positionCompute.total_time = myDUTY.time_total;
 8009180:	4b27      	ldr	r3, [pc, #156]	; (8009220 <scaraFlowDuty+0x700>)
 8009182:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8009186:	e9d3 3400 	ldrd	r3, r4, [r3]
 800918a:	f107 0210 	add.w	r2, r7, #16
 800918e:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
		positionCompute.t		= time;
 8009192:	f107 0210 	add.w	r2, r7, #16
 8009196:	f107 0308 	add.w	r3, r7, #8
 800919a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800919e:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		// Check workspace
		if( SCARA_STATUS_OK != scaraCheckWorkSpace4(positionCompute.Theta1,
 80091a2:	f107 0310 	add.w	r3, r7, #16
 80091a6:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80091aa:	f107 0310 	add.w	r3, r7, #16
 80091ae:	ed93 6b1c 	vldr	d6, [r3, #112]	; 0x70
 80091b2:	f107 0310 	add.w	r3, r7, #16
 80091b6:	ed93 5b1e 	vldr	d5, [r3, #120]	; 0x78
 80091ba:	f107 0310 	add.w	r3, r7, #16
 80091be:	ed93 4b20 	vldr	d4, [r3, #128]	; 0x80
 80091c2:	eeb0 3a44 	vmov.f32	s6, s8
 80091c6:	eef0 3a64 	vmov.f32	s7, s9
 80091ca:	eeb0 2a45 	vmov.f32	s4, s10
 80091ce:	eef0 2a65 	vmov.f32	s5, s11
 80091d2:	eeb0 1a46 	vmov.f32	s2, s12
 80091d6:	eef0 1a66 	vmov.f32	s3, s13
 80091da:	eeb0 0a47 	vmov.f32	s0, s14
 80091de:	eef0 0a67 	vmov.f32	s1, s15
 80091e2:	f000 f941 	bl	8009468 <scaraCheckWorkSpace4>
 80091e6:	4603      	mov	r3, r0
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d001      	beq.n	80091f0 <scaraFlowDuty+0x6d0>
							 	 	 	  positionCompute.Theta2,
										  positionCompute.D3,
										  positionCompute.Theta4)) {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80091ec:	2307      	movs	r3, #7
 80091ee:	e00e      	b.n	800920e <scaraFlowDuty+0x6ee>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 80091f0:	f107 0110 	add.w	r1, r7, #16
 80091f4:	1d3b      	adds	r3, r7, #4
 80091f6:	22c0      	movs	r2, #192	; 0xc0
 80091f8:	6818      	ldr	r0, [r3, #0]
 80091fa:	f00b fddf 	bl	8014dbc <memcpy>
		}
		kinematicForward(pos_Next);
 80091fe:	1d3b      	adds	r3, r7, #4
 8009200:	6818      	ldr	r0, [r3, #0]
 8009202:	f7fb f875 	bl	80042f0 <kinematicForward>
 8009206:	e001      	b.n	800920c <scaraFlowDuty+0x6ec>

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 8009208:	2302      	movs	r3, #2
 800920a:	e000      	b.n	800920e <scaraFlowDuty+0x6ee>
	}

	return SCARA_STATUS_OK;
 800920c:	2300      	movs	r3, #0
}
 800920e:	4618      	mov	r0, r3
 8009210:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 8009214:	46bd      	mov	sp, r7
 8009216:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800921a:	b002      	add	sp, #8
 800921c:	4770      	bx	lr
 800921e:	bf00      	nop
 8009220:	2000c580 	.word	0x2000c580
 8009224:	00000000 	.word	0x00000000

08009228 <scaraFlowLine>:

/* Compute new x, y ,z corresponding to s */
SCARA_StatusTypeDef	scaraFlowLine		(Path_Line_TypeDef *line, double s) {
 8009228:	b5b0      	push	{r4, r5, r7, lr}
 800922a:	b084      	sub	sp, #16
 800922c:	af00      	add	r7, sp, #0
 800922e:	60f8      	str	r0, [r7, #12]
 8009230:	ed87 0b00 	vstr	d0, [r7]
	// Avoid div with 0
	if ( line->total_s > 0.01) {
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800923a:	a33d      	add	r3, pc, #244	; (adr r3, 8009330 <scaraFlowLine+0x108>)
 800923c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009240:	f7f7 fc6a 	bl	8000b18 <__aeabi_dcmpgt>
 8009244:	4603      	mov	r3, r0
 8009246:	2b00      	cmp	r3, #0
 8009248:	d05a      	beq.n	8009300 <scaraFlowLine+0xd8>
		line->x_current	 = line->x0 + line->denta_x*s/line->total_s;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8009256:	e9d7 2300 	ldrd	r2, r3, [r7]
 800925a:	f7f7 f9cd 	bl	80005f8 <__aeabi_dmul>
 800925e:	4602      	mov	r2, r0
 8009260:	460b      	mov	r3, r1
 8009262:	4610      	mov	r0, r2
 8009264:	4619      	mov	r1, r3
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800926c:	f7f7 faee 	bl	800084c <__aeabi_ddiv>
 8009270:	4602      	mov	r2, r0
 8009272:	460b      	mov	r3, r1
 8009274:	4620      	mov	r0, r4
 8009276:	4629      	mov	r1, r5
 8009278:	f7f7 f808 	bl	800028c <__adddf3>
 800927c:	4603      	mov	r3, r0
 800927e:	460c      	mov	r4, r1
 8009280:	68fa      	ldr	r2, [r7, #12]
 8009282:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		line->y_current	 = line->y0 + line->denta_y*s/line->total_s;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8009292:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009296:	f7f7 f9af 	bl	80005f8 <__aeabi_dmul>
 800929a:	4602      	mov	r2, r0
 800929c:	460b      	mov	r3, r1
 800929e:	4610      	mov	r0, r2
 80092a0:	4619      	mov	r1, r3
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80092a8:	f7f7 fad0 	bl	800084c <__aeabi_ddiv>
 80092ac:	4602      	mov	r2, r0
 80092ae:	460b      	mov	r3, r1
 80092b0:	4620      	mov	r0, r4
 80092b2:	4629      	mov	r1, r5
 80092b4:	f7f6 ffea 	bl	800028c <__adddf3>
 80092b8:	4603      	mov	r3, r0
 80092ba:	460c      	mov	r4, r1
 80092bc:	68fa      	ldr	r2, [r7, #12]
 80092be:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
		line->z_current	 = line->z0 + line->denta_z*s/line->total_s;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80092ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092d2:	f7f7 f991 	bl	80005f8 <__aeabi_dmul>
 80092d6:	4602      	mov	r2, r0
 80092d8:	460b      	mov	r3, r1
 80092da:	4610      	mov	r0, r2
 80092dc:	4619      	mov	r1, r3
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80092e4:	f7f7 fab2 	bl	800084c <__aeabi_ddiv>
 80092e8:	4602      	mov	r2, r0
 80092ea:	460b      	mov	r3, r1
 80092ec:	4620      	mov	r0, r4
 80092ee:	4629      	mov	r1, r5
 80092f0:	f7f6 ffcc 	bl	800028c <__adddf3>
 80092f4:	4603      	mov	r3, r0
 80092f6:	460c      	mov	r4, r1
 80092f8:	68fa      	ldr	r2, [r7, #12]
 80092fa:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
 80092fe:	e011      	b.n	8009324 <scaraFlowLine+0xfc>
	} else {
		line->x_current = line->x1;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8009306:	68fa      	ldr	r2, [r7, #12]
 8009308:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		line->y_current = line->y1;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8009312:	68fa      	ldr	r2, [r7, #12]
 8009314:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
		line->z_current = line->z1;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 800931e:	68fa      	ldr	r2, [r7, #12]
 8009320:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	}

	return SCARA_STATUS_OK;
 8009324:	2300      	movs	r3, #0
}
 8009326:	4618      	mov	r0, r3
 8009328:	3710      	adds	r7, #16
 800932a:	46bd      	mov	sp, r7
 800932c:	bdb0      	pop	{r4, r5, r7, pc}
 800932e:	bf00      	nop
 8009330:	47ae147b 	.word	0x47ae147b
 8009334:	3f847ae1 	.word	0x3f847ae1

08009338 <scaraFlowCircle>:

/* Compute new x, y ,z corresponding to s */
SCARA_StatusTypeDef	scaraFlowCircle		(Path_Circle_TypeDef *circle, double s) {
 8009338:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800933c:	b086      	sub	sp, #24
 800933e:	af00      	add	r7, sp, #0
 8009340:	60f8      	str	r0, [r7, #12]
 8009342:	ed87 0b00 	vstr	d0, [r7]
	double angle;
	angle = s/(circle->radius);
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800934c:	461a      	mov	r2, r3
 800934e:	4623      	mov	r3, r4
 8009350:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009354:	f7f7 fa7a 	bl	800084c <__aeabi_ddiv>
 8009358:	4603      	mov	r3, r0
 800935a:	460c      	mov	r4, r1
 800935c:	e9c7 3404 	strd	r3, r4, [r7, #16]
	circle->x_current = circle->xi + circle->radius*cos(circle->angle_start + circle->dir*angle);
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	f993 3000 	ldrsb.w	r3, [r3]
 8009378:	4618      	mov	r0, r3
 800937a:	f7f7 f8d3 	bl	8000524 <__aeabi_i2d>
 800937e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009382:	f7f7 f939 	bl	80005f8 <__aeabi_dmul>
 8009386:	4602      	mov	r2, r0
 8009388:	460b      	mov	r3, r1
 800938a:	4650      	mov	r0, sl
 800938c:	4659      	mov	r1, fp
 800938e:	f7f6 ff7d 	bl	800028c <__adddf3>
 8009392:	4602      	mov	r2, r0
 8009394:	460b      	mov	r3, r1
 8009396:	ec43 2b17 	vmov	d7, r2, r3
 800939a:	eeb0 0a47 	vmov.f32	s0, s14
 800939e:	eef0 0a67 	vmov.f32	s1, s15
 80093a2:	f00f faf9 	bl	8018998 <cos>
 80093a6:	ec53 2b10 	vmov	r2, r3, d0
 80093aa:	4640      	mov	r0, r8
 80093ac:	4649      	mov	r1, r9
 80093ae:	f7f7 f923 	bl	80005f8 <__aeabi_dmul>
 80093b2:	4602      	mov	r2, r0
 80093b4:	460b      	mov	r3, r1
 80093b6:	4620      	mov	r0, r4
 80093b8:	4629      	mov	r1, r5
 80093ba:	f7f6 ff67 	bl	800028c <__adddf3>
 80093be:	4603      	mov	r3, r0
 80093c0:	460c      	mov	r4, r1
 80093c2:	68fa      	ldr	r2, [r7, #12]
 80093c4:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	circle->y_current = circle->yi + circle->radius*sin(circle->angle_start + circle->dir*angle);
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	f993 3000 	ldrsb.w	r3, [r3]
 80093e0:	4618      	mov	r0, r3
 80093e2:	f7f7 f89f 	bl	8000524 <__aeabi_i2d>
 80093e6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80093ea:	f7f7 f905 	bl	80005f8 <__aeabi_dmul>
 80093ee:	4602      	mov	r2, r0
 80093f0:	460b      	mov	r3, r1
 80093f2:	4650      	mov	r0, sl
 80093f4:	4659      	mov	r1, fp
 80093f6:	f7f6 ff49 	bl	800028c <__adddf3>
 80093fa:	4602      	mov	r2, r0
 80093fc:	460b      	mov	r3, r1
 80093fe:	ec43 2b17 	vmov	d7, r2, r3
 8009402:	eeb0 0a47 	vmov.f32	s0, s14
 8009406:	eef0 0a67 	vmov.f32	s1, s15
 800940a:	f00f fb55 	bl	8018ab8 <sin>
 800940e:	ec53 2b10 	vmov	r2, r3, d0
 8009412:	4640      	mov	r0, r8
 8009414:	4649      	mov	r1, r9
 8009416:	f7f7 f8ef 	bl	80005f8 <__aeabi_dmul>
 800941a:	4602      	mov	r2, r0
 800941c:	460b      	mov	r3, r1
 800941e:	4620      	mov	r0, r4
 8009420:	4629      	mov	r1, r5
 8009422:	f7f6 ff33 	bl	800028c <__adddf3>
 8009426:	4603      	mov	r3, r0
 8009428:	460c      	mov	r4, r1
 800942a:	68fa      	ldr	r2, [r7, #12]
 800942c:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	circle->z_current = circle->zi; // XY plane
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8009436:	68fa      	ldr	r2, [r7, #12]
 8009438:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

	return SCARA_STATUS_OK;
 800943c:	2300      	movs	r3, #0
}
 800943e:	4618      	mov	r0, r3
 8009440:	3718      	adds	r7, #24
 8009442:	46bd      	mov	sp, r7
 8009444:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009448 <scaraFLowScurve>:
	return SCARA_STATUS_OK;
}


/* Compute new s corresponding to time */
SCARA_StatusTypeDef	scaraFLowScurve		(Trajectory_Scurve_TypeDef *scurve, double time) {
 8009448:	b480      	push	{r7}
 800944a:	b085      	sub	sp, #20
 800944c:	af00      	add	r7, sp, #0
 800944e:	60f8      	str	r0, [r7, #12]
 8009450:	ed87 0b00 	vstr	d0, [r7]
//
//	 } else {
//		 return SCARA_STATUS_ERROR;
//	 }

	 return SCARA_STATUS_OK;
 8009454:	2300      	movs	r3, #0
}
 8009456:	4618      	mov	r0, r3
 8009458:	3714      	adds	r7, #20
 800945a:	46bd      	mov	sp, r7
 800945c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009460:	4770      	bx	lr
 8009462:	0000      	movs	r0, r0
 8009464:	0000      	movs	r0, r0
	...

08009468 <scaraCheckWorkSpace4>:

/* Check limit 4 joint variable */
SCARA_StatusTypeDef	scaraCheckWorkSpace4 (double theta1, double theta2, double d3, double theta4) {
 8009468:	b580      	push	{r7, lr}
 800946a:	b088      	sub	sp, #32
 800946c:	af00      	add	r7, sp, #0
 800946e:	ed87 0b06 	vstr	d0, [r7, #24]
 8009472:	ed87 1b04 	vstr	d1, [r7, #16]
 8009476:	ed87 2b02 	vstr	d2, [r7, #8]
 800947a:	ed87 3b00 	vstr	d3, [r7]
	// check theta 1
	if ( theta1 < LIM_MIN_J0-0.1 || theta1 > LIM_MAX_J0+0.1) {
 800947e:	a335      	add	r3, pc, #212	; (adr r3, 8009554 <scaraCheckWorkSpace4+0xec>)
 8009480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009484:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009488:	f7f7 fb28 	bl	8000adc <__aeabi_dcmplt>
 800948c:	4603      	mov	r3, r0
 800948e:	2b00      	cmp	r3, #0
 8009490:	d109      	bne.n	80094a6 <scaraCheckWorkSpace4+0x3e>
 8009492:	a332      	add	r3, pc, #200	; (adr r3, 800955c <scaraCheckWorkSpace4+0xf4>)
 8009494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009498:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800949c:	f7f7 fb3c 	bl	8000b18 <__aeabi_dcmpgt>
 80094a0:	4603      	mov	r3, r0
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d001      	beq.n	80094aa <scaraCheckWorkSpace4+0x42>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80094a6:	2307      	movs	r3, #7
 80094a8:	e043      	b.n	8009532 <scaraCheckWorkSpace4+0xca>
	}
	// check theta 2
	if ( theta2 < LIM_MIN_J1-0.1 || theta2 > LIM_MAX_J1+0.1) {
 80094aa:	a32e      	add	r3, pc, #184	; (adr r3, 8009564 <scaraCheckWorkSpace4+0xfc>)
 80094ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80094b4:	f7f7 fb12 	bl	8000adc <__aeabi_dcmplt>
 80094b8:	4603      	mov	r3, r0
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d109      	bne.n	80094d2 <scaraCheckWorkSpace4+0x6a>
 80094be:	a32b      	add	r3, pc, #172	; (adr r3, 800956c <scaraCheckWorkSpace4+0x104>)
 80094c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80094c8:	f7f7 fb26 	bl	8000b18 <__aeabi_dcmpgt>
 80094cc:	4603      	mov	r3, r0
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d001      	beq.n	80094d6 <scaraCheckWorkSpace4+0x6e>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80094d2:	2307      	movs	r3, #7
 80094d4:	e02d      	b.n	8009532 <scaraCheckWorkSpace4+0xca>
	}
	// check d 3
	if ( d3 < LIM_MIN_J2 || d3 > LIM_MAX_J2) {
 80094d6:	f04f 0200 	mov.w	r2, #0
 80094da:	f04f 0300 	mov.w	r3, #0
 80094de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80094e2:	f7f7 fafb 	bl	8000adc <__aeabi_dcmplt>
 80094e6:	4603      	mov	r3, r0
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d109      	bne.n	8009500 <scaraCheckWorkSpace4+0x98>
 80094ec:	f04f 0200 	mov.w	r2, #0
 80094f0:	4b17      	ldr	r3, [pc, #92]	; (8009550 <scaraCheckWorkSpace4+0xe8>)
 80094f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80094f6:	f7f7 fb0f 	bl	8000b18 <__aeabi_dcmpgt>
 80094fa:	4603      	mov	r3, r0
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d001      	beq.n	8009504 <scaraCheckWorkSpace4+0x9c>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8009500:	2307      	movs	r3, #7
 8009502:	e016      	b.n	8009532 <scaraCheckWorkSpace4+0xca>
	}
	// check theta 4
	if ( theta4 < LIM_MIN_J3-0.1 || theta4 > LIM_MAX_J3+0.1) {
 8009504:	a30e      	add	r3, pc, #56	; (adr r3, 8009540 <scaraCheckWorkSpace4+0xd8>)
 8009506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800950a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800950e:	f7f7 fae5 	bl	8000adc <__aeabi_dcmplt>
 8009512:	4603      	mov	r3, r0
 8009514:	2b00      	cmp	r3, #0
 8009516:	d109      	bne.n	800952c <scaraCheckWorkSpace4+0xc4>
 8009518:	a30b      	add	r3, pc, #44	; (adr r3, 8009548 <scaraCheckWorkSpace4+0xe0>)
 800951a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800951e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009522:	f7f7 faf9 	bl	8000b18 <__aeabi_dcmpgt>
 8009526:	4603      	mov	r3, r0
 8009528:	2b00      	cmp	r3, #0
 800952a:	d001      	beq.n	8009530 <scaraCheckWorkSpace4+0xc8>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800952c:	2307      	movs	r3, #7
 800952e:	e000      	b.n	8009532 <scaraCheckWorkSpace4+0xca>
	}
	return SCARA_STATUS_OK;
 8009530:	2300      	movs	r3, #0
}
 8009532:	4618      	mov	r0, r3
 8009534:	3720      	adds	r7, #32
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
 800953a:	bf00      	nop
 800953c:	f3af 8000 	nop.w
 8009540:	a7777778 	.word	0xa7777778
 8009544:	c0088956 	.word	0xc0088956
 8009548:	a7777778 	.word	0xa7777778
 800954c:	40088956 	.word	0x40088956
 8009550:	40590000 	.word	0x40590000
 8009554:	74444445 	.word	0x74444445
 8009558:	bff95623 	.word	0xbff95623
 800955c:	74444445 	.word	0x74444445
 8009560:	3ff95623 	.word	0x3ff95623
 8009564:	54cccccd 	.word	0x54cccccd
 8009568:	c003a649 	.word	0xc003a649
 800956c:	54cccccd 	.word	0x54cccccd
 8009570:	4003a649 	.word	0x4003a649
 8009574:	00000000 	.word	0x00000000

08009578 <scaraTestDuty>:
	}
}


/* Check all of point in travel */
SCARA_StatusTypeDef	scaraTestDuty(void) {
 8009578:	b5b0      	push	{r4, r5, r7, lr}
 800957a:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 800957e:	af2e      	add	r7, sp, #184	; 0xb8
	int32_t sample_count;
	double run_time = 0;
 8009580:	f04f 0300 	mov.w	r3, #0
 8009584:	f04f 0400 	mov.w	r4, #0
 8009588:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
	SCARA_PositionTypeDef test_Next, test_Current;
	SCARA_StatusTypeDef status;
	memcpy(&test_Current, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 800958c:	463b      	mov	r3, r7
 800958e:	4a36      	ldr	r2, [pc, #216]	; (8009668 <scaraTestDuty+0xf0>)
 8009590:	4618      	mov	r0, r3
 8009592:	4611      	mov	r1, r2
 8009594:	23c0      	movs	r3, #192	; 0xc0
 8009596:	461a      	mov	r2, r3
 8009598:	f00b fc10 	bl	8014dbc <memcpy>
	sample_count = ceil(myDUTY.time_total/T_SAMPLING);
 800959c:	4b33      	ldr	r3, [pc, #204]	; (800966c <scaraTestDuty+0xf4>)
 800959e:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80095a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80095a6:	a32e      	add	r3, pc, #184	; (adr r3, 8009660 <scaraTestDuty+0xe8>)
 80095a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ac:	f7f7 f94e 	bl	800084c <__aeabi_ddiv>
 80095b0:	4603      	mov	r3, r0
 80095b2:	460c      	mov	r4, r1
 80095b4:	ec44 3b17 	vmov	d7, r3, r4
 80095b8:	eeb0 0a47 	vmov.f32	s0, s14
 80095bc:	eef0 0a67 	vmov.f32	s1, s15
 80095c0:	f00f f96a 	bl	8018898 <ceil>
 80095c4:	ec54 3b10 	vmov	r3, r4, d0
 80095c8:	4618      	mov	r0, r3
 80095ca:	4621      	mov	r1, r4
 80095cc:	f7f7 fac4 	bl	8000b58 <__aeabi_d2iz>
 80095d0:	4603      	mov	r3, r0
 80095d2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	for (int32_t i = 1; i < sample_count; i++) {
 80095d6:	2301      	movs	r3, #1
 80095d8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 80095dc:	e032      	b.n	8009644 <scaraTestDuty+0xcc>
		run_time += T_SAMPLING;
 80095de:	a320      	add	r3, pc, #128	; (adr r3, 8009660 <scaraTestDuty+0xe8>)
 80095e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80095e8:	f7f6 fe50 	bl	800028c <__adddf3>
 80095ec:	4603      	mov	r3, r0
 80095ee:	460c      	mov	r4, r1
 80095f0:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
		status = scaraFlowDuty(run_time, &test_Next, test_Current);
 80095f4:	463c      	mov	r4, r7
 80095f6:	f107 05c0 	add.w	r5, r7, #192	; 0xc0
 80095fa:	4668      	mov	r0, sp
 80095fc:	f104 0308 	add.w	r3, r4, #8
 8009600:	22b8      	movs	r2, #184	; 0xb8
 8009602:	4619      	mov	r1, r3
 8009604:	f00b fbda 	bl	8014dbc <memcpy>
 8009608:	e894 000c 	ldmia.w	r4, {r2, r3}
 800960c:	4628      	mov	r0, r5
 800960e:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 8009612:	f7ff fa85 	bl	8008b20 <scaraFlowDuty>
 8009616:	4603      	mov	r3, r0
 8009618:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
		if (status != SCARA_STATUS_OK) {
 800961c:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8009620:	2b00      	cmp	r3, #0
 8009622:	d002      	beq.n	800962a <scaraTestDuty+0xb2>
			return status;
 8009624:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8009628:	e013      	b.n	8009652 <scaraTestDuty+0xda>
		}
		memcpy(&test_Next, &test_Current, sizeof(SCARA_PositionTypeDef));
 800962a:	463a      	mov	r2, r7
 800962c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8009630:	4611      	mov	r1, r2
 8009632:	22c0      	movs	r2, #192	; 0xc0
 8009634:	4618      	mov	r0, r3
 8009636:	f00b fbc1 	bl	8014dbc <memcpy>
	for (int32_t i = 1; i < sample_count; i++) {
 800963a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800963e:	3301      	adds	r3, #1
 8009640:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8009644:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8009648:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800964c:	429a      	cmp	r2, r3
 800964e:	dbc6      	blt.n	80095de <scaraTestDuty+0x66>
	}
	return SCARA_STATUS_OK;
 8009650:	2300      	movs	r3, #0
}
 8009652:	4618      	mov	r0, r3
 8009654:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 8009658:	46bd      	mov	sp, r7
 800965a:	bdb0      	pop	{r4, r5, r7, pc}
 800965c:	f3af 8000 	nop.w
 8009660:	40000000 	.word	0x40000000
 8009664:	3f847ae1 	.word	0x3f847ae1
 8009668:	2000d140 	.word	0x2000d140
 800966c:	2000c580 	.word	0x2000c580

08009670 <scaraSetScanFlag>:

void				scaraSetScanFlag(void) {
 8009670:	b480      	push	{r7}
 8009672:	af00      	add	r7, sp, #0
	mySCARA.isScanLitmit = TRUE;
 8009674:	4b03      	ldr	r3, [pc, #12]	; (8009684 <scaraSetScanFlag+0x14>)
 8009676:	2201      	movs	r2, #1
 8009678:	70da      	strb	r2, [r3, #3]
}
 800967a:	bf00      	nop
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr
 8009684:	2000207c 	.word	0x2000207c

08009688 <scaraSetOutput>:

void				scaraSetOutput		(uint8_t level) {
 8009688:	b580      	push	{r7, lr}
 800968a:	b082      	sub	sp, #8
 800968c:	af00      	add	r7, sp, #0
 800968e:	4603      	mov	r3, r0
 8009690:	71fb      	strb	r3, [r7, #7]
	mySCARA.outputSet	 = level;
 8009692:	4a05      	ldr	r2, [pc, #20]	; (80096a8 <scaraSetOutput+0x20>)
 8009694:	79fb      	ldrb	r3, [r7, #7]
 8009696:	7113      	strb	r3, [r2, #4]
	lowlayer_setOutput(level);
 8009698:	79fb      	ldrb	r3, [r7, #7]
 800969a:	4618      	mov	r0, r3
 800969c:	f7fc fa44 	bl	8005b28 <lowlayer_setOutput>
}
 80096a0:	bf00      	nop
 80096a2:	3708      	adds	r7, #8
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}
 80096a8:	2000207c 	.word	0x2000207c

080096ac <scaraSetDutyState>:

void				scaraSetDutyState(SCARA_DutyStateTypeDef state) {
 80096ac:	b480      	push	{r7}
 80096ae:	b083      	sub	sp, #12
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	4603      	mov	r3, r0
 80096b4:	71fb      	strb	r3, [r7, #7]
	mySCARA.duty_State = state;
 80096b6:	4a04      	ldr	r2, [pc, #16]	; (80096c8 <scaraSetDutyState+0x1c>)
 80096b8:	79fb      	ldrb	r3, [r7, #7]
 80096ba:	7093      	strb	r3, [r2, #2]
}
 80096bc:	bf00      	nop
 80096be:	370c      	adds	r7, #12
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr
 80096c8:	2000207c 	.word	0x2000207c

080096cc <scaraSetMode>:

void				scaraSetMode(SCARA_ModeTypeDef mode) {
 80096cc:	b480      	push	{r7}
 80096ce:	b083      	sub	sp, #12
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	4603      	mov	r3, r0
 80096d4:	71fb      	strb	r3, [r7, #7]
	mySCARA.mode = mode;
 80096d6:	4a04      	ldr	r2, [pc, #16]	; (80096e8 <scaraSetMode+0x1c>)
 80096d8:	79fb      	ldrb	r3, [r7, #7]
 80096da:	7053      	strb	r3, [r2, #1]
}
 80096dc:	bf00      	nop
 80096de:	370c      	adds	r7, #12
 80096e0:	46bd      	mov	sp, r7
 80096e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e6:	4770      	bx	lr
 80096e8:	2000207c 	.word	0x2000207c

080096ec <scaraSetMethod>:

void				scaraSetMethod(SCARA_MethodTypeDef method) {
 80096ec:	b480      	push	{r7}
 80096ee:	b083      	sub	sp, #12
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	4603      	mov	r3, r0
 80096f4:	71fb      	strb	r3, [r7, #7]
	mySCARA.method = method;
 80096f6:	4a04      	ldr	r2, [pc, #16]	; (8009708 <scaraSetMethod+0x1c>)
 80096f8:	79fb      	ldrb	r3, [r7, #7]
 80096fa:	7013      	strb	r3, [r2, #0]
}
 80096fc:	bf00      	nop
 80096fe:	370c      	adds	r7, #12
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr
 8009708:	2000207c 	.word	0x2000207c

0800970c <scaraGetPosition>:


void				scaraGetPosition	(SCARA_PositionTypeDef *pos) {
 800970c:	b580      	push	{r7, lr}
 800970e:	b082      	sub	sp, #8
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
	memcpy(pos, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 8009714:	22c0      	movs	r2, #192	; 0xc0
 8009716:	4904      	ldr	r1, [pc, #16]	; (8009728 <scaraGetPosition+0x1c>)
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f00b fb4f 	bl	8014dbc <memcpy>
}
 800971e:	bf00      	nop
 8009720:	3708      	adds	r7, #8
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}
 8009726:	bf00      	nop
 8009728:	2000d140 	.word	0x2000d140

0800972c <scaraUpdatePosition>:

void				scaraUpdatePosition (SCARA_PositionTypeDef *pos) {
 800972c:	b580      	push	{r7, lr}
 800972e:	b082      	sub	sp, #8
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
	memcpy(&positionNext, pos, sizeof(SCARA_PositionTypeDef));
 8009734:	22c0      	movs	r2, #192	; 0xc0
 8009736:	6879      	ldr	r1, [r7, #4]
 8009738:	4803      	ldr	r0, [pc, #12]	; (8009748 <scaraUpdatePosition+0x1c>)
 800973a:	f00b fb3f 	bl	8014dbc <memcpy>
}
 800973e:	bf00      	nop
 8009740:	3708      	adds	r7, #8
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}
 8009746:	bf00      	nop
 8009748:	2000d2c0 	.word	0x2000d2c0

0800974c <scaraGetMode>:


SCARA_ModeTypeDef	scaraGetMode(void) {
 800974c:	b480      	push	{r7}
 800974e:	af00      	add	r7, sp, #0
	return mySCARA.mode;
 8009750:	4b03      	ldr	r3, [pc, #12]	; (8009760 <scaraGetMode+0x14>)
 8009752:	785b      	ldrb	r3, [r3, #1]
}
 8009754:	4618      	mov	r0, r3
 8009756:	46bd      	mov	sp, r7
 8009758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975c:	4770      	bx	lr
 800975e:	bf00      	nop
 8009760:	2000207c 	.word	0x2000207c

08009764 <scaraGetMethod>:

SCARA_MethodTypeDef	scaraGetMethod(void) {
 8009764:	b480      	push	{r7}
 8009766:	af00      	add	r7, sp, #0
	return mySCARA.method;
 8009768:	4b03      	ldr	r3, [pc, #12]	; (8009778 <scaraGetMethod+0x14>)
 800976a:	781b      	ldrb	r3, [r3, #0]
}
 800976c:	4618      	mov	r0, r3
 800976e:	46bd      	mov	sp, r7
 8009770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009774:	4770      	bx	lr
 8009776:	bf00      	nop
 8009778:	2000207c 	.word	0x2000207c

0800977c <scaraGetDutyState>:

SCARA_DutyStateTypeDef	scaraGetDutyState(void) {
 800977c:	b480      	push	{r7}
 800977e:	af00      	add	r7, sp, #0
	return mySCARA.duty_State;
 8009780:	4b03      	ldr	r3, [pc, #12]	; (8009790 <scaraGetDutyState+0x14>)
 8009782:	789b      	ldrb	r3, [r3, #2]
}
 8009784:	4618      	mov	r0, r3
 8009786:	46bd      	mov	sp, r7
 8009788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978c:	4770      	bx	lr
 800978e:	bf00      	nop
 8009790:	2000207c 	.word	0x2000207c

08009794 <scaraIsScanLimit>:

uint8_t					scaraIsScanLimit(void) {
 8009794:	b480      	push	{r7}
 8009796:	af00      	add	r7, sp, #0
	return mySCARA.isScanLitmit;
 8009798:	4b03      	ldr	r3, [pc, #12]	; (80097a8 <scaraIsScanLimit+0x14>)
 800979a:	78db      	ldrb	r3, [r3, #3]
}
 800979c:	4618      	mov	r0, r3
 800979e:	46bd      	mov	sp, r7
 80097a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a4:	4770      	bx	lr
 80097a6:	bf00      	nop
 80097a8:	2000207c 	.word	0x2000207c

080097ac <scaraIsFinish>:

uint8_t					scaraIsFinish		(double run_time) {
 80097ac:	b590      	push	{r4, r7, lr}
 80097ae:	b083      	sub	sp, #12
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	ed87 0b00 	vstr	d0, [r7]
	if(myDUTY.time_total  < run_time) {
 80097b6:	4b0a      	ldr	r3, [pc, #40]	; (80097e0 <scaraIsFinish+0x34>)
 80097b8:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80097bc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80097c0:	461a      	mov	r2, r3
 80097c2:	4623      	mov	r3, r4
 80097c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80097c8:	f7f7 f9a6 	bl	8000b18 <__aeabi_dcmpgt>
 80097cc:	4603      	mov	r3, r0
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d001      	beq.n	80097d6 <scaraIsFinish+0x2a>
		return TRUE;
 80097d2:	2301      	movs	r3, #1
 80097d4:	e000      	b.n	80097d8 <scaraIsFinish+0x2c>
	} else {
		return FALSE;
 80097d6:	2300      	movs	r3, #0
	}
}
 80097d8:	4618      	mov	r0, r3
 80097da:	370c      	adds	r7, #12
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd90      	pop	{r4, r7, pc}
 80097e0:	2000c580 	.word	0x2000c580
 80097e4:	00000000 	.word	0x00000000

080097e8 <scaraPosition_packaging>:


int32_t scaraPosition_packaging(uint8_t *data_packet, SCARA_PositionTypeDef position)
{
 80097e8:	b082      	sub	sp, #8
 80097ea:	b590      	push	{r4, r7, lr}
 80097ec:	b085      	sub	sp, #20
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	6078      	str	r0, [r7, #4]
 80097f2:	f107 0120 	add.w	r1, r7, #32
 80097f6:	e881 000c 	stmia.w	r1, {r2, r3}
	int32_t cur_ptr = -4;
 80097fa:	f06f 0303 	mvn.w	r3, #3
 80097fe:	60fb      	str	r3, [r7, #12]
	Append_Coordinate_Value((int32_t)(position.x*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 8009800:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009804:	a35c      	add	r3, pc, #368	; (adr r3, 8009978 <scaraPosition_packaging+0x190>)
 8009806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800980a:	f7f6 fef5 	bl	80005f8 <__aeabi_dmul>
 800980e:	4603      	mov	r3, r0
 8009810:	460c      	mov	r4, r1
 8009812:	4618      	mov	r0, r3
 8009814:	4621      	mov	r1, r4
 8009816:	f7f7 f99f 	bl	8000b58 <__aeabi_d2iz>
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	3304      	adds	r3, #4
 800981e:	60fb      	str	r3, [r7, #12]
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	687a      	ldr	r2, [r7, #4]
 8009824:	4413      	add	r3, r2
 8009826:	4619      	mov	r1, r3
 8009828:	f000 f8aa 	bl	8009980 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.y*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800982c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8009830:	a351      	add	r3, pc, #324	; (adr r3, 8009978 <scaraPosition_packaging+0x190>)
 8009832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009836:	f7f6 fedf 	bl	80005f8 <__aeabi_dmul>
 800983a:	4603      	mov	r3, r0
 800983c:	460c      	mov	r4, r1
 800983e:	4618      	mov	r0, r3
 8009840:	4621      	mov	r1, r4
 8009842:	f7f7 f989 	bl	8000b58 <__aeabi_d2iz>
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	3304      	adds	r3, #4
 800984a:	60fb      	str	r3, [r7, #12]
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	687a      	ldr	r2, [r7, #4]
 8009850:	4413      	add	r3, r2
 8009852:	4619      	mov	r1, r3
 8009854:	f000 f894 	bl	8009980 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.z*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 8009858:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800985c:	a346      	add	r3, pc, #280	; (adr r3, 8009978 <scaraPosition_packaging+0x190>)
 800985e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009862:	f7f6 fec9 	bl	80005f8 <__aeabi_dmul>
 8009866:	4603      	mov	r3, r0
 8009868:	460c      	mov	r4, r1
 800986a:	4618      	mov	r0, r3
 800986c:	4621      	mov	r1, r4
 800986e:	f7f7 f973 	bl	8000b58 <__aeabi_d2iz>
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	3304      	adds	r3, #4
 8009876:	60fb      	str	r3, [r7, #12]
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	687a      	ldr	r2, [r7, #4]
 800987c:	4413      	add	r3, r2
 800987e:	4619      	mov	r1, r3
 8009880:	f000 f87e 	bl	8009980 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.roll*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 8009884:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009888:	a33b      	add	r3, pc, #236	; (adr r3, 8009978 <scaraPosition_packaging+0x190>)
 800988a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800988e:	f7f6 feb3 	bl	80005f8 <__aeabi_dmul>
 8009892:	4603      	mov	r3, r0
 8009894:	460c      	mov	r4, r1
 8009896:	4618      	mov	r0, r3
 8009898:	4621      	mov	r1, r4
 800989a:	f7f7 f95d 	bl	8000b58 <__aeabi_d2iz>
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	3304      	adds	r3, #4
 80098a2:	60fb      	str	r3, [r7, #12]
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	687a      	ldr	r2, [r7, #4]
 80098a8:	4413      	add	r3, r2
 80098aa:	4619      	mov	r1, r3
 80098ac:	f000 f868 	bl	8009980 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta1*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 80098b0:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80098b4:	a330      	add	r3, pc, #192	; (adr r3, 8009978 <scaraPosition_packaging+0x190>)
 80098b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ba:	f7f6 fe9d 	bl	80005f8 <__aeabi_dmul>
 80098be:	4603      	mov	r3, r0
 80098c0:	460c      	mov	r4, r1
 80098c2:	4618      	mov	r0, r3
 80098c4:	4621      	mov	r1, r4
 80098c6:	f7f7 f947 	bl	8000b58 <__aeabi_d2iz>
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	3304      	adds	r3, #4
 80098ce:	60fb      	str	r3, [r7, #12]
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	687a      	ldr	r2, [r7, #4]
 80098d4:	4413      	add	r3, r2
 80098d6:	4619      	mov	r1, r3
 80098d8:	f000 f852 	bl	8009980 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta2*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 80098dc:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80098e0:	a325      	add	r3, pc, #148	; (adr r3, 8009978 <scaraPosition_packaging+0x190>)
 80098e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e6:	f7f6 fe87 	bl	80005f8 <__aeabi_dmul>
 80098ea:	4603      	mov	r3, r0
 80098ec:	460c      	mov	r4, r1
 80098ee:	4618      	mov	r0, r3
 80098f0:	4621      	mov	r1, r4
 80098f2:	f7f7 f931 	bl	8000b58 <__aeabi_d2iz>
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	3304      	adds	r3, #4
 80098fa:	60fb      	str	r3, [r7, #12]
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	687a      	ldr	r2, [r7, #4]
 8009900:	4413      	add	r3, r2
 8009902:	4619      	mov	r1, r3
 8009904:	f000 f83c 	bl	8009980 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.D3*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 8009908:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800990c:	a31a      	add	r3, pc, #104	; (adr r3, 8009978 <scaraPosition_packaging+0x190>)
 800990e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009912:	f7f6 fe71 	bl	80005f8 <__aeabi_dmul>
 8009916:	4603      	mov	r3, r0
 8009918:	460c      	mov	r4, r1
 800991a:	4618      	mov	r0, r3
 800991c:	4621      	mov	r1, r4
 800991e:	f7f7 f91b 	bl	8000b58 <__aeabi_d2iz>
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	3304      	adds	r3, #4
 8009926:	60fb      	str	r3, [r7, #12]
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	687a      	ldr	r2, [r7, #4]
 800992c:	4413      	add	r3, r2
 800992e:	4619      	mov	r1, r3
 8009930:	f000 f826 	bl	8009980 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta4*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 8009934:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8009938:	a30f      	add	r3, pc, #60	; (adr r3, 8009978 <scaraPosition_packaging+0x190>)
 800993a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800993e:	f7f6 fe5b 	bl	80005f8 <__aeabi_dmul>
 8009942:	4603      	mov	r3, r0
 8009944:	460c      	mov	r4, r1
 8009946:	4618      	mov	r0, r3
 8009948:	4621      	mov	r1, r4
 800994a:	f7f7 f905 	bl	8000b58 <__aeabi_d2iz>
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	3304      	adds	r3, #4
 8009952:	60fb      	str	r3, [r7, #12]
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	687a      	ldr	r2, [r7, #4]
 8009958:	4413      	add	r3, r2
 800995a:	4619      	mov	r1, r3
 800995c:	f000 f810 	bl	8009980 <Append_Coordinate_Value>
	return cur_ptr + 4;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	3304      	adds	r3, #4
}
 8009964:	4618      	mov	r0, r3
 8009966:	3714      	adds	r7, #20
 8009968:	46bd      	mov	sp, r7
 800996a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800996e:	b002      	add	sp, #8
 8009970:	4770      	bx	lr
 8009972:	bf00      	nop
 8009974:	f3af 8000 	nop.w
 8009978:	00000000 	.word	0x00000000
 800997c:	412e8480 	.word	0x412e8480

08009980 <Append_Coordinate_Value>:

void Append_Coordinate_Value(int32_t append_value, uint8_t* append_position)
{
 8009980:	b480      	push	{r7}
 8009982:	b083      	sub	sp, #12
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
 8009988:	6039      	str	r1, [r7, #0]
	append_position[0] = (uint8_t)(append_value & 0xff);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	b2da      	uxtb	r2, r3
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	701a      	strb	r2, [r3, #0]
	append_position[1] = (uint8_t)(append_value >> 8 & 0xff);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	121a      	asrs	r2, r3, #8
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	3301      	adds	r3, #1
 800999a:	b2d2      	uxtb	r2, r2
 800999c:	701a      	strb	r2, [r3, #0]
	append_position[2] = (uint8_t)(append_value >> 16 & 0xff);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	141a      	asrs	r2, r3, #16
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	3302      	adds	r3, #2
 80099a6:	b2d2      	uxtb	r2, r2
 80099a8:	701a      	strb	r2, [r3, #0]
	append_position[3] = (uint8_t)(append_value >> 24 & 0xff);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	161a      	asrs	r2, r3, #24
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	3303      	adds	r3, #3
 80099b2:	b2d2      	uxtb	r2, r2
 80099b4:	701a      	strb	r2, [r3, #0]
}
 80099b6:	bf00      	nop
 80099b8:	370c      	adds	r7, #12
 80099ba:	46bd      	mov	sp, r7
 80099bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c0:	4770      	bx	lr
 80099c2:	0000      	movs	r0, r0
 80099c4:	0000      	movs	r0, r0
	...

080099c8 <scaraKeyInit1>:
SCARA_StatusTypeDef  scaraKeyInit1(SCARA_KeyTypeDef key, int32_t speed)
{
 80099c8:	b590      	push	{r4, r7, lr}
 80099ca:	f5ad 7d63 	sub.w	sp, sp, #908	; 0x38c
 80099ce:	af6c      	add	r7, sp, #432	; 0x1b0
 80099d0:	4602      	mov	r2, r0
 80099d2:	463b      	mov	r3, r7
 80099d4:	6019      	str	r1, [r3, #0]
 80099d6:	1dfb      	adds	r3, r7, #7
 80099d8:	701a      	strb	r2, [r3, #0]
	DUTY_Command_TypeDef cmd;
	SCARA_StatusTypeDef status;
	cmd.coordinate_type = DUTY_COORDINATES_REL;
 80099da:	f107 0308 	add.w	r3, r7, #8
 80099de:	2201      	movs	r2, #1
 80099e0:	731a      	strb	r2, [r3, #12]
	cmd.trajec_type = DUTY_TRAJECTORY_LSPB;
 80099e2:	f107 0308 	add.w	r3, r7, #8
 80099e6:	2200      	movs	r2, #0
 80099e8:	741a      	strb	r2, [r3, #16]
	cmd.modeInit_type = DUTY_MODE_INIT_QVT;
 80099ea:	f107 0308 	add.w	r3, r7, #8
 80099ee:	2201      	movs	r2, #1
 80099f0:	745a      	strb	r2, [r3, #17]
	double v_current = 0;
 80099f2:	f04f 0300 	mov.w	r3, #0
 80099f6:	f04f 0400 	mov.w	r4, #0
 80099fa:	e9c7 3474 	strd	r3, r4, [r7, #464]	; 0x1d0
	Trajectory_LSPB_TypeDef *lspb;
	if(speed < SHIFT_SPEED_MIN || speed > SHIFT_SPEED_MAX){
 80099fe:	463b      	mov	r3, r7
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	dd03      	ble.n	8009a0e <scaraKeyInit1+0x46>
 8009a06:	463b      	mov	r3, r7
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	2b0e      	cmp	r3, #14
 8009a0c:	dd01      	ble.n	8009a12 <scaraKeyInit1+0x4a>
		return SCARA_STATUS_ERROR_PARA;
 8009a0e:	2306      	movs	r3, #6
 8009a10:	e2c0      	b.n	8009f94 <scaraKeyInit1+0x5cc>
	}
	switch(key){
 8009a12:	1dfb      	adds	r3, r7, #7
 8009a14:	781b      	ldrb	r3, [r3, #0]
 8009a16:	2b07      	cmp	r3, #7
 8009a18:	f200 8298 	bhi.w	8009f4c <scaraKeyInit1+0x584>
 8009a1c:	a201      	add	r2, pc, #4	; (adr r2, 8009a24 <scaraKeyInit1+0x5c>)
 8009a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a22:	bf00      	nop
 8009a24:	08009a45 	.word	0x08009a45
 8009a28:	08009ae7 	.word	0x08009ae7
 8009a2c:	08009b8d 	.word	0x08009b8d
 8009a30:	08009c2b 	.word	0x08009c2b
 8009a34:	08009ccd 	.word	0x08009ccd
 8009a38:	08009d6b 	.word	0x08009d6b
 8009a3c:	08009e0d 	.word	0x08009e0d
 8009a40:	08009eab 	.word	0x08009eab
		case SCARA_KEY_X_INC:{
			cmd.v_factor = 0;
 8009a44:	f107 0208 	add.w	r2, r7, #8
 8009a48:	f04f 0300 	mov.w	r3, #0
 8009a4c:	f04f 0400 	mov.w	r4, #0
 8009a50:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 8009a54:	f107 0308 	add.w	r3, r7, #8
 8009a58:	2200      	movs	r2, #0
 8009a5a:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 8009a5c:	f107 0308 	add.w	r3, r7, #8
 8009a60:	2200      	movs	r2, #0
 8009a62:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= speed*SHIFT_KEY_S;
 8009a64:	463b      	mov	r3, r7
 8009a66:	681a      	ldr	r2, [r3, #0]
 8009a68:	4613      	mov	r3, r2
 8009a6a:	009b      	lsls	r3, r3, #2
 8009a6c:	4413      	add	r3, r2
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f7f6 fd58 	bl	8000524 <__aeabi_i2d>
 8009a74:	4603      	mov	r3, r0
 8009a76:	460c      	mov	r4, r1
 8009a78:	f107 0208 	add.w	r2, r7, #8
 8009a7c:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= 0;
 8009a80:	f107 0208 	add.w	r2, r7, #8
 8009a84:	f04f 0300 	mov.w	r3, #0
 8009a88:	f04f 0400 	mov.w	r4, #0
 8009a8c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= 0;
 8009a90:	f107 0208 	add.w	r2, r7, #8
 8009a94:	f04f 0300 	mov.w	r3, #0
 8009a98:	f04f 0400 	mov.w	r4, #0
 8009a9c:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 8009aa0:	f107 0208 	add.w	r2, r7, #8
 8009aa4:	f04f 0300 	mov.w	r3, #0
 8009aa8:	f04f 0400 	mov.w	r4, #0
 8009aac:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 8009ab0:	463b      	mov	r3, r7
 8009ab2:	6818      	ldr	r0, [r3, #0]
 8009ab4:	f7f6 fd36 	bl	8000524 <__aeabi_i2d>
 8009ab8:	f20f 43e4 	addw	r3, pc, #1252	; 0x4e4
 8009abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac0:	f7f6 fd9a 	bl	80005f8 <__aeabi_dmul>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	460c      	mov	r4, r1
 8009ac8:	4618      	mov	r0, r3
 8009aca:	4621      	mov	r1, r4
 8009acc:	f20f 43d8 	addw	r3, pc, #1240	; 0x4d8
 8009ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad4:	f7f6 fbda 	bl	800028c <__adddf3>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	460c      	mov	r4, r1
 8009adc:	f107 0208 	add.w	r2, r7, #8
 8009ae0:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 8009ae4:	e232      	b.n	8009f4c <scaraKeyInit1+0x584>
		case SCARA_KEY_X_DEC:{
			cmd.v_factor = 0;
 8009ae6:	f107 0208 	add.w	r2, r7, #8
 8009aea:	f04f 0300 	mov.w	r3, #0
 8009aee:	f04f 0400 	mov.w	r4, #0
 8009af2:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 8009af6:	f107 0308 	add.w	r3, r7, #8
 8009afa:	2200      	movs	r2, #0
 8009afc:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 8009afe:	f107 0308 	add.w	r3, r7, #8
 8009b02:	2200      	movs	r2, #0
 8009b04:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= -speed*SHIFT_KEY_S;
 8009b06:	463b      	mov	r3, r7
 8009b08:	681a      	ldr	r2, [r3, #0]
 8009b0a:	4613      	mov	r3, r2
 8009b0c:	079b      	lsls	r3, r3, #30
 8009b0e:	1a9b      	subs	r3, r3, r2
 8009b10:	009b      	lsls	r3, r3, #2
 8009b12:	1a9b      	subs	r3, r3, r2
 8009b14:	4618      	mov	r0, r3
 8009b16:	f7f6 fd05 	bl	8000524 <__aeabi_i2d>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	460c      	mov	r4, r1
 8009b1e:	f107 0208 	add.w	r2, r7, #8
 8009b22:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= 0;
 8009b26:	f107 0208 	add.w	r2, r7, #8
 8009b2a:	f04f 0300 	mov.w	r3, #0
 8009b2e:	f04f 0400 	mov.w	r4, #0
 8009b32:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= 0;
 8009b36:	f107 0208 	add.w	r2, r7, #8
 8009b3a:	f04f 0300 	mov.w	r3, #0
 8009b3e:	f04f 0400 	mov.w	r4, #0
 8009b42:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 8009b46:	f107 0208 	add.w	r2, r7, #8
 8009b4a:	f04f 0300 	mov.w	r3, #0
 8009b4e:	f04f 0400 	mov.w	r4, #0
 8009b52:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 8009b56:	463b      	mov	r3, r7
 8009b58:	6818      	ldr	r0, [r3, #0]
 8009b5a:	f7f6 fce3 	bl	8000524 <__aeabi_i2d>
 8009b5e:	f20f 4340 	addw	r3, pc, #1088	; 0x440
 8009b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b66:	f7f6 fd47 	bl	80005f8 <__aeabi_dmul>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	460c      	mov	r4, r1
 8009b6e:	4618      	mov	r0, r3
 8009b70:	4621      	mov	r1, r4
 8009b72:	f20f 4334 	addw	r3, pc, #1076	; 0x434
 8009b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b7a:	f7f6 fb87 	bl	800028c <__adddf3>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	460c      	mov	r4, r1
 8009b82:	f107 0208 	add.w	r2, r7, #8
 8009b86:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 8009b8a:	e1df      	b.n	8009f4c <scaraKeyInit1+0x584>
		case SCARA_KEY_Y_INC:{
			cmd.v_factor = 0;
 8009b8c:	f107 0208 	add.w	r2, r7, #8
 8009b90:	f04f 0300 	mov.w	r3, #0
 8009b94:	f04f 0400 	mov.w	r4, #0
 8009b98:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 8009b9c:	f107 0308 	add.w	r3, r7, #8
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 8009ba4:	f107 0308 	add.w	r3, r7, #8
 8009ba8:	2200      	movs	r2, #0
 8009baa:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 8009bac:	f107 0208 	add.w	r2, r7, #8
 8009bb0:	f04f 0300 	mov.w	r3, #0
 8009bb4:	f04f 0400 	mov.w	r4, #0
 8009bb8:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= speed*SHIFT_KEY_S;
 8009bbc:	463b      	mov	r3, r7
 8009bbe:	681a      	ldr	r2, [r3, #0]
 8009bc0:	4613      	mov	r3, r2
 8009bc2:	009b      	lsls	r3, r3, #2
 8009bc4:	4413      	add	r3, r2
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f7f6 fcac 	bl	8000524 <__aeabi_i2d>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	460c      	mov	r4, r1
 8009bd0:	f107 0208 	add.w	r2, r7, #8
 8009bd4:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= 0;
 8009bd8:	f107 0208 	add.w	r2, r7, #8
 8009bdc:	f04f 0300 	mov.w	r3, #0
 8009be0:	f04f 0400 	mov.w	r4, #0
 8009be4:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 8009be8:	f107 0208 	add.w	r2, r7, #8
 8009bec:	f04f 0300 	mov.w	r3, #0
 8009bf0:	f04f 0400 	mov.w	r4, #0
 8009bf4:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 8009bf8:	463b      	mov	r3, r7
 8009bfa:	6818      	ldr	r0, [r3, #0]
 8009bfc:	f7f6 fc92 	bl	8000524 <__aeabi_i2d>
 8009c00:	a3e7      	add	r3, pc, #924	; (adr r3, 8009fa0 <scaraKeyInit1+0x5d8>)
 8009c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c06:	f7f6 fcf7 	bl	80005f8 <__aeabi_dmul>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	460c      	mov	r4, r1
 8009c0e:	4618      	mov	r0, r3
 8009c10:	4621      	mov	r1, r4
 8009c12:	a3e5      	add	r3, pc, #916	; (adr r3, 8009fa8 <scaraKeyInit1+0x5e0>)
 8009c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c18:	f7f6 fb38 	bl	800028c <__adddf3>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	460c      	mov	r4, r1
 8009c20:	f107 0208 	add.w	r2, r7, #8
 8009c24:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 8009c28:	e190      	b.n	8009f4c <scaraKeyInit1+0x584>

		case SCARA_KEY_Y_DEC:{
			cmd.v_factor = 0;
 8009c2a:	f107 0208 	add.w	r2, r7, #8
 8009c2e:	f04f 0300 	mov.w	r3, #0
 8009c32:	f04f 0400 	mov.w	r4, #0
 8009c36:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 8009c3a:	f107 0308 	add.w	r3, r7, #8
 8009c3e:	2200      	movs	r2, #0
 8009c40:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 8009c42:	f107 0308 	add.w	r3, r7, #8
 8009c46:	2200      	movs	r2, #0
 8009c48:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 8009c4a:	f107 0208 	add.w	r2, r7, #8
 8009c4e:	f04f 0300 	mov.w	r3, #0
 8009c52:	f04f 0400 	mov.w	r4, #0
 8009c56:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= -speed*SHIFT_KEY_S;
 8009c5a:	463b      	mov	r3, r7
 8009c5c:	681a      	ldr	r2, [r3, #0]
 8009c5e:	4613      	mov	r3, r2
 8009c60:	079b      	lsls	r3, r3, #30
 8009c62:	1a9b      	subs	r3, r3, r2
 8009c64:	009b      	lsls	r3, r3, #2
 8009c66:	1a9b      	subs	r3, r3, r2
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f7f6 fc5b 	bl	8000524 <__aeabi_i2d>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	460c      	mov	r4, r1
 8009c72:	f107 0208 	add.w	r2, r7, #8
 8009c76:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= 0;
 8009c7a:	f107 0208 	add.w	r2, r7, #8
 8009c7e:	f04f 0300 	mov.w	r3, #0
 8009c82:	f04f 0400 	mov.w	r4, #0
 8009c86:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 8009c8a:	f107 0208 	add.w	r2, r7, #8
 8009c8e:	f04f 0300 	mov.w	r3, #0
 8009c92:	f04f 0400 	mov.w	r4, #0
 8009c96:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 8009c9a:	463b      	mov	r3, r7
 8009c9c:	6818      	ldr	r0, [r3, #0]
 8009c9e:	f7f6 fc41 	bl	8000524 <__aeabi_i2d>
 8009ca2:	a3bf      	add	r3, pc, #764	; (adr r3, 8009fa0 <scaraKeyInit1+0x5d8>)
 8009ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca8:	f7f6 fca6 	bl	80005f8 <__aeabi_dmul>
 8009cac:	4603      	mov	r3, r0
 8009cae:	460c      	mov	r4, r1
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	4621      	mov	r1, r4
 8009cb4:	a3bc      	add	r3, pc, #752	; (adr r3, 8009fa8 <scaraKeyInit1+0x5e0>)
 8009cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cba:	f7f6 fae7 	bl	800028c <__adddf3>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	460c      	mov	r4, r1
 8009cc2:	f107 0208 	add.w	r2, r7, #8
 8009cc6:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 8009cca:	e13f      	b.n	8009f4c <scaraKeyInit1+0x584>
		case SCARA_KEY_Z_INC:{
			cmd.v_factor = 0;
 8009ccc:	f107 0208 	add.w	r2, r7, #8
 8009cd0:	f04f 0300 	mov.w	r3, #0
 8009cd4:	f04f 0400 	mov.w	r4, #0
 8009cd8:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 8009cdc:	f107 0308 	add.w	r3, r7, #8
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 8009ce4:	f107 0308 	add.w	r3, r7, #8
 8009ce8:	2200      	movs	r2, #0
 8009cea:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 8009cec:	f107 0208 	add.w	r2, r7, #8
 8009cf0:	f04f 0300 	mov.w	r3, #0
 8009cf4:	f04f 0400 	mov.w	r4, #0
 8009cf8:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= 0;
 8009cfc:	f107 0208 	add.w	r2, r7, #8
 8009d00:	f04f 0300 	mov.w	r3, #0
 8009d04:	f04f 0400 	mov.w	r4, #0
 8009d08:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= speed*SHIFT_KEY_S;
 8009d0c:	463b      	mov	r3, r7
 8009d0e:	681a      	ldr	r2, [r3, #0]
 8009d10:	4613      	mov	r3, r2
 8009d12:	009b      	lsls	r3, r3, #2
 8009d14:	4413      	add	r3, r2
 8009d16:	4618      	mov	r0, r3
 8009d18:	f7f6 fc04 	bl	8000524 <__aeabi_i2d>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	460c      	mov	r4, r1
 8009d20:	f107 0208 	add.w	r2, r7, #8
 8009d24:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 8009d28:	f107 0208 	add.w	r2, r7, #8
 8009d2c:	f04f 0300 	mov.w	r3, #0
 8009d30:	f04f 0400 	mov.w	r4, #0
 8009d34:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 8009d38:	463b      	mov	r3, r7
 8009d3a:	6818      	ldr	r0, [r3, #0]
 8009d3c:	f7f6 fbf2 	bl	8000524 <__aeabi_i2d>
 8009d40:	a397      	add	r3, pc, #604	; (adr r3, 8009fa0 <scaraKeyInit1+0x5d8>)
 8009d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d46:	f7f6 fc57 	bl	80005f8 <__aeabi_dmul>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	460c      	mov	r4, r1
 8009d4e:	4618      	mov	r0, r3
 8009d50:	4621      	mov	r1, r4
 8009d52:	a395      	add	r3, pc, #596	; (adr r3, 8009fa8 <scaraKeyInit1+0x5e0>)
 8009d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d58:	f7f6 fa98 	bl	800028c <__adddf3>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	460c      	mov	r4, r1
 8009d60:	f107 0208 	add.w	r2, r7, #8
 8009d64:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 8009d68:	e0f0      	b.n	8009f4c <scaraKeyInit1+0x584>
		case SCARA_KEY_Z_DEC:{
			cmd.v_factor = 0;
 8009d6a:	f107 0208 	add.w	r2, r7, #8
 8009d6e:	f04f 0300 	mov.w	r3, #0
 8009d72:	f04f 0400 	mov.w	r4, #0
 8009d76:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 8009d7a:	f107 0308 	add.w	r3, r7, #8
 8009d7e:	2200      	movs	r2, #0
 8009d80:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 8009d82:	f107 0308 	add.w	r3, r7, #8
 8009d86:	2200      	movs	r2, #0
 8009d88:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 8009d8a:	f107 0208 	add.w	r2, r7, #8
 8009d8e:	f04f 0300 	mov.w	r3, #0
 8009d92:	f04f 0400 	mov.w	r4, #0
 8009d96:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= 0;
 8009d9a:	f107 0208 	add.w	r2, r7, #8
 8009d9e:	f04f 0300 	mov.w	r3, #0
 8009da2:	f04f 0400 	mov.w	r4, #0
 8009da6:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= -speed*SHIFT_KEY_S;
 8009daa:	463b      	mov	r3, r7
 8009dac:	681a      	ldr	r2, [r3, #0]
 8009dae:	4613      	mov	r3, r2
 8009db0:	079b      	lsls	r3, r3, #30
 8009db2:	1a9b      	subs	r3, r3, r2
 8009db4:	009b      	lsls	r3, r3, #2
 8009db6:	1a9b      	subs	r3, r3, r2
 8009db8:	4618      	mov	r0, r3
 8009dba:	f7f6 fbb3 	bl	8000524 <__aeabi_i2d>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	460c      	mov	r4, r1
 8009dc2:	f107 0208 	add.w	r2, r7, #8
 8009dc6:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 8009dca:	f107 0208 	add.w	r2, r7, #8
 8009dce:	f04f 0300 	mov.w	r3, #0
 8009dd2:	f04f 0400 	mov.w	r4, #0
 8009dd6:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 8009dda:	463b      	mov	r3, r7
 8009ddc:	6818      	ldr	r0, [r3, #0]
 8009dde:	f7f6 fba1 	bl	8000524 <__aeabi_i2d>
 8009de2:	a36f      	add	r3, pc, #444	; (adr r3, 8009fa0 <scaraKeyInit1+0x5d8>)
 8009de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de8:	f7f6 fc06 	bl	80005f8 <__aeabi_dmul>
 8009dec:	4603      	mov	r3, r0
 8009dee:	460c      	mov	r4, r1
 8009df0:	4618      	mov	r0, r3
 8009df2:	4621      	mov	r1, r4
 8009df4:	a36c      	add	r3, pc, #432	; (adr r3, 8009fa8 <scaraKeyInit1+0x5e0>)
 8009df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dfa:	f7f6 fa47 	bl	800028c <__adddf3>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	460c      	mov	r4, r1
 8009e02:	f107 0208 	add.w	r2, r7, #8
 8009e06:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 8009e0a:	e09f      	b.n	8009f4c <scaraKeyInit1+0x584>
		case SCARA_KEY_ROLL_INC:{
			cmd.v_factor = 0;
 8009e0c:	f107 0208 	add.w	r2, r7, #8
 8009e10:	f04f 0300 	mov.w	r3, #0
 8009e14:	f04f 0400 	mov.w	r4, #0
 8009e18:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 8009e1c:	f107 0308 	add.w	r3, r7, #8
 8009e20:	2200      	movs	r2, #0
 8009e22:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 8009e24:	f107 0308 	add.w	r3, r7, #8
 8009e28:	2200      	movs	r2, #0
 8009e2a:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 8009e2c:	f107 0208 	add.w	r2, r7, #8
 8009e30:	f04f 0300 	mov.w	r3, #0
 8009e34:	f04f 0400 	mov.w	r4, #0
 8009e38:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= 0;
 8009e3c:	f107 0208 	add.w	r2, r7, #8
 8009e40:	f04f 0300 	mov.w	r3, #0
 8009e44:	f04f 0400 	mov.w	r4, #0
 8009e48:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= 0;
 8009e4c:	f107 0208 	add.w	r2, r7, #8
 8009e50:	f04f 0300 	mov.w	r3, #0
 8009e54:	f04f 0400 	mov.w	r4, #0
 8009e58:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= speed*SHIFT_KEY_S;
 8009e5c:	463b      	mov	r3, r7
 8009e5e:	681a      	ldr	r2, [r3, #0]
 8009e60:	4613      	mov	r3, r2
 8009e62:	009b      	lsls	r3, r3, #2
 8009e64:	4413      	add	r3, r2
 8009e66:	4618      	mov	r0, r3
 8009e68:	f7f6 fb5c 	bl	8000524 <__aeabi_i2d>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	460c      	mov	r4, r1
 8009e70:	f107 0208 	add.w	r2, r7, #8
 8009e74:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 8009e78:	463b      	mov	r3, r7
 8009e7a:	6818      	ldr	r0, [r3, #0]
 8009e7c:	f7f6 fb52 	bl	8000524 <__aeabi_i2d>
 8009e80:	a347      	add	r3, pc, #284	; (adr r3, 8009fa0 <scaraKeyInit1+0x5d8>)
 8009e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e86:	f7f6 fbb7 	bl	80005f8 <__aeabi_dmul>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	460c      	mov	r4, r1
 8009e8e:	4618      	mov	r0, r3
 8009e90:	4621      	mov	r1, r4
 8009e92:	a345      	add	r3, pc, #276	; (adr r3, 8009fa8 <scaraKeyInit1+0x5e0>)
 8009e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e98:	f7f6 f9f8 	bl	800028c <__adddf3>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	460c      	mov	r4, r1
 8009ea0:	f107 0208 	add.w	r2, r7, #8
 8009ea4:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 8009ea8:	e050      	b.n	8009f4c <scaraKeyInit1+0x584>
		case SCARA_KEY_ROLL_DEC:{
			cmd.v_factor = 0;
 8009eaa:	f107 0208 	add.w	r2, r7, #8
 8009eae:	f04f 0300 	mov.w	r3, #0
 8009eb2:	f04f 0400 	mov.w	r4, #0
 8009eb6:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 8009eba:	f107 0308 	add.w	r3, r7, #8
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 8009ec2:	f107 0308 	add.w	r3, r7, #8
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 8009eca:	f107 0208 	add.w	r2, r7, #8
 8009ece:	f04f 0300 	mov.w	r3, #0
 8009ed2:	f04f 0400 	mov.w	r4, #0
 8009ed6:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= 0;
 8009eda:	f107 0208 	add.w	r2, r7, #8
 8009ede:	f04f 0300 	mov.w	r3, #0
 8009ee2:	f04f 0400 	mov.w	r4, #0
 8009ee6:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= 0;
 8009eea:	f107 0208 	add.w	r2, r7, #8
 8009eee:	f04f 0300 	mov.w	r3, #0
 8009ef2:	f04f 0400 	mov.w	r4, #0
 8009ef6:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= -speed*SHIFT_KEY_S;
 8009efa:	463b      	mov	r3, r7
 8009efc:	681a      	ldr	r2, [r3, #0]
 8009efe:	4613      	mov	r3, r2
 8009f00:	079b      	lsls	r3, r3, #30
 8009f02:	1a9b      	subs	r3, r3, r2
 8009f04:	009b      	lsls	r3, r3, #2
 8009f06:	1a9b      	subs	r3, r3, r2
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f7f6 fb0b 	bl	8000524 <__aeabi_i2d>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	460c      	mov	r4, r1
 8009f12:	f107 0208 	add.w	r2, r7, #8
 8009f16:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 8009f1a:	463b      	mov	r3, r7
 8009f1c:	6818      	ldr	r0, [r3, #0]
 8009f1e:	f7f6 fb01 	bl	8000524 <__aeabi_i2d>
 8009f22:	a31f      	add	r3, pc, #124	; (adr r3, 8009fa0 <scaraKeyInit1+0x5d8>)
 8009f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f28:	f7f6 fb66 	bl	80005f8 <__aeabi_dmul>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	460c      	mov	r4, r1
 8009f30:	4618      	mov	r0, r3
 8009f32:	4621      	mov	r1, r4
 8009f34:	a31c      	add	r3, pc, #112	; (adr r3, 8009fa8 <scaraKeyInit1+0x5e0>)
 8009f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f3a:	f7f6 f9a7 	bl	800028c <__adddf3>
 8009f3e:	4603      	mov	r3, r0
 8009f40:	460c      	mov	r4, r1
 8009f42:	f107 0208 	add.w	r2, r7, #8
 8009f46:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 8009f4a:	bf00      	nop
	}

	status = scaraInitDuty(cmd);
 8009f4c:	f107 0408 	add.w	r4, r7, #8
 8009f50:	4668      	mov	r0, sp
 8009f52:	f104 0310 	add.w	r3, r4, #16
 8009f56:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8009f5a:	4619      	mov	r1, r3
 8009f5c:	f00a ff2e 	bl	8014dbc <memcpy>
 8009f60:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8009f64:	f7fb fe2c 	bl	8005bc0 <scaraInitDuty>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
	if (status == SCARA_STATUS_OK) {
 8009f6e:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d10b      	bne.n	8009f8e <scaraKeyInit1+0x5c6>
		status = scaraTestDuty();
 8009f76:	f7ff faff 	bl	8009578 <scaraTestDuty>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
		if (status != SCARA_STATUS_OK) {
 8009f80:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d005      	beq.n	8009f94 <scaraKeyInit1+0x5cc>
			return status;
 8009f88:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 8009f8c:	e002      	b.n	8009f94 <scaraKeyInit1+0x5cc>
		// tinh lai run time so vs v hien tai
//		*(runtime) = (v_current - lspb->v0)/(lspb->a_design);
//		scaraFlowDuty(*runtime, &positionKeyInit, positionCurrent);
//		return status;
	} else {
		return status;
 8009f8e:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 8009f92:	e7ff      	b.n	8009f94 <scaraKeyInit1+0x5cc>
	}
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	f507 77ee 	add.w	r7, r7, #476	; 0x1dc
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd90      	pop	{r4, r7, pc}
 8009f9e:	bf00      	nop
 8009fa0:	9999999a 	.word	0x9999999a
 8009fa4:	3fa99999 	.word	0x3fa99999
 8009fa8:	9999999a 	.word	0x9999999a
 8009fac:	3fe99999 	.word	0x3fe99999

08009fb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b082      	sub	sp, #8
 8009fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	607b      	str	r3, [r7, #4]
 8009fba:	4b12      	ldr	r3, [pc, #72]	; (800a004 <HAL_MspInit+0x54>)
 8009fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fbe:	4a11      	ldr	r2, [pc, #68]	; (800a004 <HAL_MspInit+0x54>)
 8009fc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8009fc6:	4b0f      	ldr	r3, [pc, #60]	; (800a004 <HAL_MspInit+0x54>)
 8009fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009fce:	607b      	str	r3, [r7, #4]
 8009fd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	603b      	str	r3, [r7, #0]
 8009fd6:	4b0b      	ldr	r3, [pc, #44]	; (800a004 <HAL_MspInit+0x54>)
 8009fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fda:	4a0a      	ldr	r2, [pc, #40]	; (800a004 <HAL_MspInit+0x54>)
 8009fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8009fe2:	4b08      	ldr	r3, [pc, #32]	; (800a004 <HAL_MspInit+0x54>)
 8009fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009fea:	603b      	str	r3, [r7, #0]
 8009fec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8009fee:	2200      	movs	r2, #0
 8009ff0:	210f      	movs	r1, #15
 8009ff2:	f06f 0001 	mvn.w	r0, #1
 8009ff6:	f000 fbe7 	bl	800a7c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009ffa:	bf00      	nop
 8009ffc:	3708      	adds	r7, #8
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}
 800a002:	bf00      	nop
 800a004:	40023800 	.word	0x40023800

0800a008 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b08c      	sub	sp, #48	; 0x30
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800a010:	2300      	movs	r3, #0
 800a012:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800a014:	2300      	movs	r3, #0
 800a016:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800a018:	2200      	movs	r2, #0
 800a01a:	6879      	ldr	r1, [r7, #4]
 800a01c:	2036      	movs	r0, #54	; 0x36
 800a01e:	f000 fbd3 	bl	800a7c8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800a022:	2036      	movs	r0, #54	; 0x36
 800a024:	f000 fbec 	bl	800a800 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800a028:	2300      	movs	r3, #0
 800a02a:	60fb      	str	r3, [r7, #12]
 800a02c:	4b1f      	ldr	r3, [pc, #124]	; (800a0ac <HAL_InitTick+0xa4>)
 800a02e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a030:	4a1e      	ldr	r2, [pc, #120]	; (800a0ac <HAL_InitTick+0xa4>)
 800a032:	f043 0310 	orr.w	r3, r3, #16
 800a036:	6413      	str	r3, [r2, #64]	; 0x40
 800a038:	4b1c      	ldr	r3, [pc, #112]	; (800a0ac <HAL_InitTick+0xa4>)
 800a03a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a03c:	f003 0310 	and.w	r3, r3, #16
 800a040:	60fb      	str	r3, [r7, #12]
 800a042:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800a044:	f107 0210 	add.w	r2, r7, #16
 800a048:	f107 0314 	add.w	r3, r7, #20
 800a04c:	4611      	mov	r1, r2
 800a04e:	4618      	mov	r0, r3
 800a050:	f002 ff72 	bl	800cf38 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800a054:	f002 ff48 	bl	800cee8 <HAL_RCC_GetPCLK1Freq>
 800a058:	4603      	mov	r3, r0
 800a05a:	005b      	lsls	r3, r3, #1
 800a05c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800a05e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a060:	4a13      	ldr	r2, [pc, #76]	; (800a0b0 <HAL_InitTick+0xa8>)
 800a062:	fba2 2303 	umull	r2, r3, r2, r3
 800a066:	0c9b      	lsrs	r3, r3, #18
 800a068:	3b01      	subs	r3, #1
 800a06a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800a06c:	4b11      	ldr	r3, [pc, #68]	; (800a0b4 <HAL_InitTick+0xac>)
 800a06e:	4a12      	ldr	r2, [pc, #72]	; (800a0b8 <HAL_InitTick+0xb0>)
 800a070:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800a072:	4b10      	ldr	r3, [pc, #64]	; (800a0b4 <HAL_InitTick+0xac>)
 800a074:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a078:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800a07a:	4a0e      	ldr	r2, [pc, #56]	; (800a0b4 <HAL_InitTick+0xac>)
 800a07c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a07e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800a080:	4b0c      	ldr	r3, [pc, #48]	; (800a0b4 <HAL_InitTick+0xac>)
 800a082:	2200      	movs	r2, #0
 800a084:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a086:	4b0b      	ldr	r3, [pc, #44]	; (800a0b4 <HAL_InitTick+0xac>)
 800a088:	2200      	movs	r2, #0
 800a08a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800a08c:	4809      	ldr	r0, [pc, #36]	; (800a0b4 <HAL_InitTick+0xac>)
 800a08e:	f002 ff85 	bl	800cf9c <HAL_TIM_Base_Init>
 800a092:	4603      	mov	r3, r0
 800a094:	2b00      	cmp	r3, #0
 800a096:	d104      	bne.n	800a0a2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800a098:	4806      	ldr	r0, [pc, #24]	; (800a0b4 <HAL_InitTick+0xac>)
 800a09a:	f002 ffce 	bl	800d03a <HAL_TIM_Base_Start_IT>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	e000      	b.n	800a0a4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800a0a2:	2301      	movs	r3, #1
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	3730      	adds	r7, #48	; 0x30
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}
 800a0ac:	40023800 	.word	0x40023800
 800a0b0:	431bde83 	.word	0x431bde83
 800a0b4:	2000d380 	.word	0x2000d380
 800a0b8:	40001000 	.word	0x40001000

0800a0bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800a0c0:	bf00      	nop
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c8:	4770      	bx	lr
	...

0800a0cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  LOG_REPORT("ic.c: HARDFAULT ERROR", __LINE__);
 800a0d0:	2162      	movs	r1, #98	; 0x62
 800a0d2:	4802      	ldr	r0, [pc, #8]	; (800a0dc <HardFault_Handler+0x10>)
 800a0d4:	f7f8 f8ae 	bl	8002234 <LOG_REPORT>
 800a0d8:	e7fa      	b.n	800a0d0 <HardFault_Handler+0x4>
 800a0da:	bf00      	nop
 800a0dc:	0801a4c8 	.word	0x0801a4c8

0800a0e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  LOG_REPORT("ic.c: MEMORY ERROR", __LINE__);
 800a0e4:	2172      	movs	r1, #114	; 0x72
 800a0e6:	4802      	ldr	r0, [pc, #8]	; (800a0f0 <MemManage_Handler+0x10>)
 800a0e8:	f7f8 f8a4 	bl	8002234 <LOG_REPORT>
 800a0ec:	e7fa      	b.n	800a0e4 <MemManage_Handler+0x4>
 800a0ee:	bf00      	nop
 800a0f0:	0801a4e0 	.word	0x0801a4e0

0800a0f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  LOG_REPORT("ic.c: BUS ERROR", __LINE__);
 800a0f8:	2182      	movs	r1, #130	; 0x82
 800a0fa:	4802      	ldr	r0, [pc, #8]	; (800a104 <BusFault_Handler+0x10>)
 800a0fc:	f7f8 f89a 	bl	8002234 <LOG_REPORT>
 800a100:	e7fa      	b.n	800a0f8 <BusFault_Handler+0x4>
 800a102:	bf00      	nop
 800a104:	0801a4f4 	.word	0x0801a4f4

0800a108 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a108:	b480      	push	{r7}
 800a10a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a10c:	e7fe      	b.n	800a10c <UsageFault_Handler+0x4>

0800a10e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a10e:	b480      	push	{r7}
 800a110:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a112:	bf00      	nop
 800a114:	46bd      	mov	sp, r7
 800a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11a:	4770      	bx	lr

0800a11c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800a120:	4802      	ldr	r0, [pc, #8]	; (800a12c <DMA1_Stream4_IRQHandler+0x10>)
 800a122:	f000 fca3 	bl	800aa6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800a126:	bf00      	nop
 800a128:	bd80      	pop	{r7, pc}
 800a12a:	bf00      	nop
 800a12c:	2000d480 	.word	0x2000d480

0800a130 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800a134:	4802      	ldr	r0, [pc, #8]	; (800a140 <UART4_IRQHandler+0x10>)
 800a136:	f003 fc0f 	bl	800d958 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800a13a:	bf00      	nop
 800a13c:	bd80      	pop	{r7, pc}
 800a13e:	bf00      	nop
 800a140:	2000d440 	.word	0x2000d440

0800a144 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800a148:	4802      	ldr	r0, [pc, #8]	; (800a154 <TIM6_DAC_IRQHandler+0x10>)
 800a14a:	f002 ff9a 	bl	800d082 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800a14e:	bf00      	nop
 800a150:	bd80      	pop	{r7, pc}
 800a152:	bf00      	nop
 800a154:	2000d380 	.word	0x2000d380

0800a158 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	osSignalSet(defaultTaskHandle, 0x01);
 800a15c:	4b05      	ldr	r3, [pc, #20]	; (800a174 <TIM7_IRQHandler+0x1c>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	2101      	movs	r1, #1
 800a162:	4618      	mov	r0, r3
 800a164:	f007 fadc 	bl	8011720 <osSignalSet>
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800a168:	4803      	ldr	r0, [pc, #12]	; (800a178 <TIM7_IRQHandler+0x20>)
 800a16a:	f002 ff8a 	bl	800d082 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  /* USER CODE END TIM7_IRQn 1 */
}
 800a16e:	bf00      	nop
 800a170:	bd80      	pop	{r7, pc}
 800a172:	bf00      	nop
 800a174:	2000c4b4 	.word	0x2000c4b4
 800a178:	2000d400 	.word	0x2000d400

0800a17c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800a180:	4802      	ldr	r0, [pc, #8]	; (800a18c <OTG_FS_IRQHandler+0x10>)
 800a182:	f001 fa43 	bl	800b60c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800a186:	bf00      	nop
 800a188:	bd80      	pop	{r7, pc}
 800a18a:	bf00      	nop
 800a18c:	2000ddbc 	.word	0x2000ddbc

0800a190 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b084      	sub	sp, #16
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800a198:	4b11      	ldr	r3, [pc, #68]	; (800a1e0 <_sbrk+0x50>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d102      	bne.n	800a1a6 <_sbrk+0x16>
		heap_end = &end;
 800a1a0:	4b0f      	ldr	r3, [pc, #60]	; (800a1e0 <_sbrk+0x50>)
 800a1a2:	4a10      	ldr	r2, [pc, #64]	; (800a1e4 <_sbrk+0x54>)
 800a1a4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800a1a6:	4b0e      	ldr	r3, [pc, #56]	; (800a1e0 <_sbrk+0x50>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800a1ac:	4b0c      	ldr	r3, [pc, #48]	; (800a1e0 <_sbrk+0x50>)
 800a1ae:	681a      	ldr	r2, [r3, #0]
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	4413      	add	r3, r2
 800a1b4:	466a      	mov	r2, sp
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d907      	bls.n	800a1ca <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800a1ba:	f00a fdc5 	bl	8014d48 <__errno>
 800a1be:	4602      	mov	r2, r0
 800a1c0:	230c      	movs	r3, #12
 800a1c2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800a1c4:	f04f 33ff 	mov.w	r3, #4294967295
 800a1c8:	e006      	b.n	800a1d8 <_sbrk+0x48>
	}

	heap_end += incr;
 800a1ca:	4b05      	ldr	r3, [pc, #20]	; (800a1e0 <_sbrk+0x50>)
 800a1cc:	681a      	ldr	r2, [r3, #0]
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	4413      	add	r3, r2
 800a1d2:	4a03      	ldr	r2, [pc, #12]	; (800a1e0 <_sbrk+0x50>)
 800a1d4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	3710      	adds	r7, #16
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}
 800a1e0:	20002858 	.word	0x20002858
 800a1e4:	2000e1c8 	.word	0x2000e1c8

0800a1e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a1ec:	4b08      	ldr	r3, [pc, #32]	; (800a210 <SystemInit+0x28>)
 800a1ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1f2:	4a07      	ldr	r2, [pc, #28]	; (800a210 <SystemInit+0x28>)
 800a1f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a1f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a1fc:	4b04      	ldr	r3, [pc, #16]	; (800a210 <SystemInit+0x28>)
 800a1fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a202:	609a      	str	r2, [r3, #8]
#endif
}
 800a204:	bf00      	nop
 800a206:	46bd      	mov	sp, r7
 800a208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20c:	4770      	bx	lr
 800a20e:	bf00      	nop
 800a210:	e000ed00 	.word	0xe000ed00

0800a214 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b086      	sub	sp, #24
 800a218:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a21a:	f107 0308 	add.w	r3, r7, #8
 800a21e:	2200      	movs	r2, #0
 800a220:	601a      	str	r2, [r3, #0]
 800a222:	605a      	str	r2, [r3, #4]
 800a224:	609a      	str	r2, [r3, #8]
 800a226:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a228:	463b      	mov	r3, r7
 800a22a:	2200      	movs	r2, #0
 800a22c:	601a      	str	r2, [r3, #0]
 800a22e:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800a230:	4b1e      	ldr	r3, [pc, #120]	; (800a2ac <MX_TIM2_Init+0x98>)
 800a232:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a236:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 25000;
 800a238:	4b1c      	ldr	r3, [pc, #112]	; (800a2ac <MX_TIM2_Init+0x98>)
 800a23a:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800a23e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a240:	4b1a      	ldr	r3, [pc, #104]	; (800a2ac <MX_TIM2_Init+0x98>)
 800a242:	2200      	movs	r2, #0
 800a244:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff;
 800a246:	4b19      	ldr	r3, [pc, #100]	; (800a2ac <MX_TIM2_Init+0x98>)
 800a248:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a24c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a24e:	4b17      	ldr	r3, [pc, #92]	; (800a2ac <MX_TIM2_Init+0x98>)
 800a250:	2200      	movs	r2, #0
 800a252:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a254:	4b15      	ldr	r3, [pc, #84]	; (800a2ac <MX_TIM2_Init+0x98>)
 800a256:	2200      	movs	r2, #0
 800a258:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800a25a:	4814      	ldr	r0, [pc, #80]	; (800a2ac <MX_TIM2_Init+0x98>)
 800a25c:	f002 fe9e 	bl	800cf9c <HAL_TIM_Base_Init>
 800a260:	4603      	mov	r3, r0
 800a262:	2b00      	cmp	r3, #0
 800a264:	d001      	beq.n	800a26a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800a266:	f7fa fc11 	bl	8004a8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a26a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a26e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800a270:	f107 0308 	add.w	r3, r7, #8
 800a274:	4619      	mov	r1, r3
 800a276:	480d      	ldr	r0, [pc, #52]	; (800a2ac <MX_TIM2_Init+0x98>)
 800a278:	f003 f80b 	bl	800d292 <HAL_TIM_ConfigClockSource>
 800a27c:	4603      	mov	r3, r0
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d001      	beq.n	800a286 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800a282:	f7fa fc03 	bl	8004a8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a286:	2300      	movs	r3, #0
 800a288:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a28a:	2300      	movs	r3, #0
 800a28c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800a28e:	463b      	mov	r3, r7
 800a290:	4619      	mov	r1, r3
 800a292:	4806      	ldr	r0, [pc, #24]	; (800a2ac <MX_TIM2_Init+0x98>)
 800a294:	f003 fa16 	bl	800d6c4 <HAL_TIMEx_MasterConfigSynchronization>
 800a298:	4603      	mov	r3, r0
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d001      	beq.n	800a2a2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800a29e:	f7fa fbf5 	bl	8004a8c <Error_Handler>
  }

}
 800a2a2:	bf00      	nop
 800a2a4:	3718      	adds	r7, #24
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}
 800a2aa:	bf00      	nop
 800a2ac:	2000d3c0 	.word	0x2000d3c0

0800a2b0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b082      	sub	sp, #8
 800a2b4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a2b6:	463b      	mov	r3, r7
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	601a      	str	r2, [r3, #0]
 800a2bc:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 800a2be:	4b15      	ldr	r3, [pc, #84]	; (800a314 <MX_TIM7_Init+0x64>)
 800a2c0:	4a15      	ldr	r2, [pc, #84]	; (800a318 <MX_TIM7_Init+0x68>)
 800a2c2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 800a2c4:	4b13      	ldr	r3, [pc, #76]	; (800a314 <MX_TIM7_Init+0x64>)
 800a2c6:	2253      	movs	r2, #83	; 0x53
 800a2c8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a2ca:	4b12      	ldr	r3, [pc, #72]	; (800a314 <MX_TIM7_Init+0x64>)
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 800a2d0:	4b10      	ldr	r3, [pc, #64]	; (800a314 <MX_TIM7_Init+0x64>)
 800a2d2:	f242 720f 	movw	r2, #9999	; 0x270f
 800a2d6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a2d8:	4b0e      	ldr	r3, [pc, #56]	; (800a314 <MX_TIM7_Init+0x64>)
 800a2da:	2200      	movs	r2, #0
 800a2dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800a2de:	480d      	ldr	r0, [pc, #52]	; (800a314 <MX_TIM7_Init+0x64>)
 800a2e0:	f002 fe5c 	bl	800cf9c <HAL_TIM_Base_Init>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d001      	beq.n	800a2ee <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800a2ea:	f7fa fbcf 	bl	8004a8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800a2f6:	463b      	mov	r3, r7
 800a2f8:	4619      	mov	r1, r3
 800a2fa:	4806      	ldr	r0, [pc, #24]	; (800a314 <MX_TIM7_Init+0x64>)
 800a2fc:	f003 f9e2 	bl	800d6c4 <HAL_TIMEx_MasterConfigSynchronization>
 800a300:	4603      	mov	r3, r0
 800a302:	2b00      	cmp	r3, #0
 800a304:	d001      	beq.n	800a30a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800a306:	f7fa fbc1 	bl	8004a8c <Error_Handler>
  }

}
 800a30a:	bf00      	nop
 800a30c:	3708      	adds	r7, #8
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}
 800a312:	bf00      	nop
 800a314:	2000d400 	.word	0x2000d400
 800a318:	40001400 	.word	0x40001400

0800a31c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b084      	sub	sp, #16
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a32c:	d10e      	bne.n	800a34c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800a32e:	2300      	movs	r3, #0
 800a330:	60fb      	str	r3, [r7, #12]
 800a332:	4b16      	ldr	r3, [pc, #88]	; (800a38c <HAL_TIM_Base_MspInit+0x70>)
 800a334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a336:	4a15      	ldr	r2, [pc, #84]	; (800a38c <HAL_TIM_Base_MspInit+0x70>)
 800a338:	f043 0301 	orr.w	r3, r3, #1
 800a33c:	6413      	str	r3, [r2, #64]	; 0x40
 800a33e:	4b13      	ldr	r3, [pc, #76]	; (800a38c <HAL_TIM_Base_MspInit+0x70>)
 800a340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a342:	f003 0301 	and.w	r3, r3, #1
 800a346:	60fb      	str	r3, [r7, #12]
 800a348:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800a34a:	e01a      	b.n	800a382 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM7)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4a0f      	ldr	r2, [pc, #60]	; (800a390 <HAL_TIM_Base_MspInit+0x74>)
 800a352:	4293      	cmp	r3, r2
 800a354:	d115      	bne.n	800a382 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800a356:	2300      	movs	r3, #0
 800a358:	60bb      	str	r3, [r7, #8]
 800a35a:	4b0c      	ldr	r3, [pc, #48]	; (800a38c <HAL_TIM_Base_MspInit+0x70>)
 800a35c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a35e:	4a0b      	ldr	r2, [pc, #44]	; (800a38c <HAL_TIM_Base_MspInit+0x70>)
 800a360:	f043 0320 	orr.w	r3, r3, #32
 800a364:	6413      	str	r3, [r2, #64]	; 0x40
 800a366:	4b09      	ldr	r3, [pc, #36]	; (800a38c <HAL_TIM_Base_MspInit+0x70>)
 800a368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a36a:	f003 0320 	and.w	r3, r3, #32
 800a36e:	60bb      	str	r3, [r7, #8]
 800a370:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800a372:	2200      	movs	r2, #0
 800a374:	2105      	movs	r1, #5
 800a376:	2037      	movs	r0, #55	; 0x37
 800a378:	f000 fa26 	bl	800a7c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800a37c:	2037      	movs	r0, #55	; 0x37
 800a37e:	f000 fa3f 	bl	800a800 <HAL_NVIC_EnableIRQ>
}
 800a382:	bf00      	nop
 800a384:	3710      	adds	r7, #16
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}
 800a38a:	bf00      	nop
 800a38c:	40023800 	.word	0x40023800
 800a390:	40001400 	.word	0x40001400

0800a394 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
DMA_HandleTypeDef hdma_uart4_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 800a398:	4b11      	ldr	r3, [pc, #68]	; (800a3e0 <MX_UART4_Init+0x4c>)
 800a39a:	4a12      	ldr	r2, [pc, #72]	; (800a3e4 <MX_UART4_Init+0x50>)
 800a39c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800a39e:	4b10      	ldr	r3, [pc, #64]	; (800a3e0 <MX_UART4_Init+0x4c>)
 800a3a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a3a4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800a3a6:	4b0e      	ldr	r3, [pc, #56]	; (800a3e0 <MX_UART4_Init+0x4c>)
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800a3ac:	4b0c      	ldr	r3, [pc, #48]	; (800a3e0 <MX_UART4_Init+0x4c>)
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800a3b2:	4b0b      	ldr	r3, [pc, #44]	; (800a3e0 <MX_UART4_Init+0x4c>)
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800a3b8:	4b09      	ldr	r3, [pc, #36]	; (800a3e0 <MX_UART4_Init+0x4c>)
 800a3ba:	220c      	movs	r2, #12
 800a3bc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a3be:	4b08      	ldr	r3, [pc, #32]	; (800a3e0 <MX_UART4_Init+0x4c>)
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800a3c4:	4b06      	ldr	r3, [pc, #24]	; (800a3e0 <MX_UART4_Init+0x4c>)
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800a3ca:	4805      	ldr	r0, [pc, #20]	; (800a3e0 <MX_UART4_Init+0x4c>)
 800a3cc:	f003 fa0a 	bl	800d7e4 <HAL_UART_Init>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d001      	beq.n	800a3da <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800a3d6:	f7fa fb59 	bl	8004a8c <Error_Handler>
  }

}
 800a3da:	bf00      	nop
 800a3dc:	bd80      	pop	{r7, pc}
 800a3de:	bf00      	nop
 800a3e0:	2000d440 	.word	0x2000d440
 800a3e4:	40004c00 	.word	0x40004c00

0800a3e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b08a      	sub	sp, #40	; 0x28
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a3f0:	f107 0314 	add.w	r3, r7, #20
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	601a      	str	r2, [r3, #0]
 800a3f8:	605a      	str	r2, [r3, #4]
 800a3fa:	609a      	str	r2, [r3, #8]
 800a3fc:	60da      	str	r2, [r3, #12]
 800a3fe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	4a34      	ldr	r2, [pc, #208]	; (800a4d8 <HAL_UART_MspInit+0xf0>)
 800a406:	4293      	cmp	r3, r2
 800a408:	d161      	bne.n	800a4ce <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800a40a:	2300      	movs	r3, #0
 800a40c:	613b      	str	r3, [r7, #16]
 800a40e:	4b33      	ldr	r3, [pc, #204]	; (800a4dc <HAL_UART_MspInit+0xf4>)
 800a410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a412:	4a32      	ldr	r2, [pc, #200]	; (800a4dc <HAL_UART_MspInit+0xf4>)
 800a414:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a418:	6413      	str	r3, [r2, #64]	; 0x40
 800a41a:	4b30      	ldr	r3, [pc, #192]	; (800a4dc <HAL_UART_MspInit+0xf4>)
 800a41c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a41e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a422:	613b      	str	r3, [r7, #16]
 800a424:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a426:	2300      	movs	r3, #0
 800a428:	60fb      	str	r3, [r7, #12]
 800a42a:	4b2c      	ldr	r3, [pc, #176]	; (800a4dc <HAL_UART_MspInit+0xf4>)
 800a42c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a42e:	4a2b      	ldr	r2, [pc, #172]	; (800a4dc <HAL_UART_MspInit+0xf4>)
 800a430:	f043 0301 	orr.w	r3, r3, #1
 800a434:	6313      	str	r3, [r2, #48]	; 0x30
 800a436:	4b29      	ldr	r3, [pc, #164]	; (800a4dc <HAL_UART_MspInit+0xf4>)
 800a438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a43a:	f003 0301 	and.w	r3, r3, #1
 800a43e:	60fb      	str	r3, [r7, #12]
 800a440:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800a442:	2303      	movs	r3, #3
 800a444:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a446:	2302      	movs	r3, #2
 800a448:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a44a:	2301      	movs	r3, #1
 800a44c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a44e:	2303      	movs	r3, #3
 800a450:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800a452:	2308      	movs	r3, #8
 800a454:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a456:	f107 0314 	add.w	r3, r7, #20
 800a45a:	4619      	mov	r1, r3
 800a45c:	4820      	ldr	r0, [pc, #128]	; (800a4e0 <HAL_UART_MspInit+0xf8>)
 800a45e:	f000 fd7b 	bl	800af58 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800a462:	4b20      	ldr	r3, [pc, #128]	; (800a4e4 <HAL_UART_MspInit+0xfc>)
 800a464:	4a20      	ldr	r2, [pc, #128]	; (800a4e8 <HAL_UART_MspInit+0x100>)
 800a466:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 800a468:	4b1e      	ldr	r3, [pc, #120]	; (800a4e4 <HAL_UART_MspInit+0xfc>)
 800a46a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a46e:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a470:	4b1c      	ldr	r3, [pc, #112]	; (800a4e4 <HAL_UART_MspInit+0xfc>)
 800a472:	2240      	movs	r2, #64	; 0x40
 800a474:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a476:	4b1b      	ldr	r3, [pc, #108]	; (800a4e4 <HAL_UART_MspInit+0xfc>)
 800a478:	2200      	movs	r2, #0
 800a47a:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a47c:	4b19      	ldr	r3, [pc, #100]	; (800a4e4 <HAL_UART_MspInit+0xfc>)
 800a47e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a482:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a484:	4b17      	ldr	r3, [pc, #92]	; (800a4e4 <HAL_UART_MspInit+0xfc>)
 800a486:	2200      	movs	r2, #0
 800a488:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a48a:	4b16      	ldr	r3, [pc, #88]	; (800a4e4 <HAL_UART_MspInit+0xfc>)
 800a48c:	2200      	movs	r2, #0
 800a48e:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800a490:	4b14      	ldr	r3, [pc, #80]	; (800a4e4 <HAL_UART_MspInit+0xfc>)
 800a492:	2200      	movs	r2, #0
 800a494:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800a496:	4b13      	ldr	r3, [pc, #76]	; (800a4e4 <HAL_UART_MspInit+0xfc>)
 800a498:	2200      	movs	r2, #0
 800a49a:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a49c:	4b11      	ldr	r3, [pc, #68]	; (800a4e4 <HAL_UART_MspInit+0xfc>)
 800a49e:	2200      	movs	r2, #0
 800a4a0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800a4a2:	4810      	ldr	r0, [pc, #64]	; (800a4e4 <HAL_UART_MspInit+0xfc>)
 800a4a4:	f000 f9ba 	bl	800a81c <HAL_DMA_Init>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d001      	beq.n	800a4b2 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800a4ae:	f7fa faed 	bl	8004a8c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	4a0b      	ldr	r2, [pc, #44]	; (800a4e4 <HAL_UART_MspInit+0xfc>)
 800a4b6:	631a      	str	r2, [r3, #48]	; 0x30
 800a4b8:	4a0a      	ldr	r2, [pc, #40]	; (800a4e4 <HAL_UART_MspInit+0xfc>)
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800a4be:	2200      	movs	r2, #0
 800a4c0:	2105      	movs	r1, #5
 800a4c2:	2034      	movs	r0, #52	; 0x34
 800a4c4:	f000 f980 	bl	800a7c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800a4c8:	2034      	movs	r0, #52	; 0x34
 800a4ca:	f000 f999 	bl	800a800 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 800a4ce:	bf00      	nop
 800a4d0:	3728      	adds	r7, #40	; 0x28
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}
 800a4d6:	bf00      	nop
 800a4d8:	40004c00 	.word	0x40004c00
 800a4dc:	40023800 	.word	0x40023800
 800a4e0:	40020000 	.word	0x40020000
 800a4e4:	2000d480 	.word	0x2000d480
 800a4e8:	40026070 	.word	0x40026070

0800a4ec <HAL_UART_TxCpltCallback>:
  /* USER CODE END UART4_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b084      	sub	sp, #16
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
	if (UART4 == huart->Instance) {
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	4a0c      	ldr	r2, [pc, #48]	; (800a52c <HAL_UART_TxCpltCallback+0x40>)
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d112      	bne.n	800a524 <HAL_UART_TxCpltCallback+0x38>
		uint16_t size_dma;
		size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 800a4fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a502:	490b      	ldr	r1, [pc, #44]	; (800a530 <HAL_UART_TxCpltCallback+0x44>)
 800a504:	480b      	ldr	r0, [pc, #44]	; (800a534 <HAL_UART_TxCpltCallback+0x48>)
 800a506:	f7fa fb7b 	bl	8004c00 <ringBuff_PopArray>
 800a50a:	4603      	mov	r3, r0
 800a50c:	81fb      	strh	r3, [r7, #14]
		if (0 == size_dma) {
 800a50e:	89fb      	ldrh	r3, [r7, #14]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d006      	beq.n	800a522 <HAL_UART_TxCpltCallback+0x36>
			return;
		}
		HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 800a514:	89fb      	ldrh	r3, [r7, #14]
 800a516:	461a      	mov	r2, r3
 800a518:	4905      	ldr	r1, [pc, #20]	; (800a530 <HAL_UART_TxCpltCallback+0x44>)
 800a51a:	4807      	ldr	r0, [pc, #28]	; (800a538 <HAL_UART_TxCpltCallback+0x4c>)
 800a51c:	f003 f9b0 	bl	800d880 <HAL_UART_Transmit_DMA>
 800a520:	e000      	b.n	800a524 <HAL_UART_TxCpltCallback+0x38>
			return;
 800a522:	bf00      	nop
	}
}
 800a524:	3710      	adds	r7, #16
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}
 800a52a:	bf00      	nop
 800a52c:	40004c00 	.word	0x40004c00
 800a530:	2000c3b0 	.word	0x2000c3b0
 800a534:	20001070 	.word	0x20001070
 800a538:	2000d440 	.word	0x2000d440

0800a53c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800a53c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a574 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800a540:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800a542:	e003      	b.n	800a54c <LoopCopyDataInit>

0800a544 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800a544:	4b0c      	ldr	r3, [pc, #48]	; (800a578 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800a546:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800a548:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800a54a:	3104      	adds	r1, #4

0800a54c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800a54c:	480b      	ldr	r0, [pc, #44]	; (800a57c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800a54e:	4b0c      	ldr	r3, [pc, #48]	; (800a580 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800a550:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800a552:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800a554:	d3f6      	bcc.n	800a544 <CopyDataInit>
  ldr  r2, =_sbss
 800a556:	4a0b      	ldr	r2, [pc, #44]	; (800a584 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800a558:	e002      	b.n	800a560 <LoopFillZerobss>

0800a55a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800a55a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800a55c:	f842 3b04 	str.w	r3, [r2], #4

0800a560 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800a560:	4b09      	ldr	r3, [pc, #36]	; (800a588 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800a562:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800a564:	d3f9      	bcc.n	800a55a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800a566:	f7ff fe3f 	bl	800a1e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a56a:	f00a fbf3 	bl	8014d54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a56e:	f7fa f9f9 	bl	8004964 <main>
  bx  lr    
 800a572:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800a574:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800a578:	0801aa60 	.word	0x0801aa60
  ldr  r0, =_sdata
 800a57c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800a580:	200023e0 	.word	0x200023e0
  ldr  r2, =_sbss
 800a584:	200023e0 	.word	0x200023e0
  ldr  r3, = _ebss
 800a588:	2000e1c8 	.word	0x2000e1c8

0800a58c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a58c:	e7fe      	b.n	800a58c <ADC_IRQHandler>
	...

0800a590 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800a594:	4b0e      	ldr	r3, [pc, #56]	; (800a5d0 <HAL_Init+0x40>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	4a0d      	ldr	r2, [pc, #52]	; (800a5d0 <HAL_Init+0x40>)
 800a59a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a59e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800a5a0:	4b0b      	ldr	r3, [pc, #44]	; (800a5d0 <HAL_Init+0x40>)
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	4a0a      	ldr	r2, [pc, #40]	; (800a5d0 <HAL_Init+0x40>)
 800a5a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a5aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a5ac:	4b08      	ldr	r3, [pc, #32]	; (800a5d0 <HAL_Init+0x40>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4a07      	ldr	r2, [pc, #28]	; (800a5d0 <HAL_Init+0x40>)
 800a5b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a5b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a5b8:	2003      	movs	r0, #3
 800a5ba:	f000 f8fa 	bl	800a7b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800a5be:	2000      	movs	r0, #0
 800a5c0:	f7ff fd22 	bl	800a008 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800a5c4:	f7ff fcf4 	bl	8009fb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a5c8:	2300      	movs	r3, #0
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	bd80      	pop	{r7, pc}
 800a5ce:	bf00      	nop
 800a5d0:	40023c00 	.word	0x40023c00

0800a5d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a5d8:	4b06      	ldr	r3, [pc, #24]	; (800a5f4 <HAL_IncTick+0x20>)
 800a5da:	781b      	ldrb	r3, [r3, #0]
 800a5dc:	461a      	mov	r2, r3
 800a5de:	4b06      	ldr	r3, [pc, #24]	; (800a5f8 <HAL_IncTick+0x24>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	4413      	add	r3, r2
 800a5e4:	4a04      	ldr	r2, [pc, #16]	; (800a5f8 <HAL_IncTick+0x24>)
 800a5e6:	6013      	str	r3, [r2, #0]
}
 800a5e8:	bf00      	nop
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f0:	4770      	bx	lr
 800a5f2:	bf00      	nop
 800a5f4:	20002090 	.word	0x20002090
 800a5f8:	2000d4e0 	.word	0x2000d4e0

0800a5fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	af00      	add	r7, sp, #0
  return uwTick;
 800a600:	4b03      	ldr	r3, [pc, #12]	; (800a610 <HAL_GetTick+0x14>)
 800a602:	681b      	ldr	r3, [r3, #0]
}
 800a604:	4618      	mov	r0, r3
 800a606:	46bd      	mov	sp, r7
 800a608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60c:	4770      	bx	lr
 800a60e:	bf00      	nop
 800a610:	2000d4e0 	.word	0x2000d4e0

0800a614 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b084      	sub	sp, #16
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a61c:	f7ff ffee 	bl	800a5fc <HAL_GetTick>
 800a620:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a62c:	d005      	beq.n	800a63a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800a62e:	4b09      	ldr	r3, [pc, #36]	; (800a654 <HAL_Delay+0x40>)
 800a630:	781b      	ldrb	r3, [r3, #0]
 800a632:	461a      	mov	r2, r3
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	4413      	add	r3, r2
 800a638:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800a63a:	bf00      	nop
 800a63c:	f7ff ffde 	bl	800a5fc <HAL_GetTick>
 800a640:	4602      	mov	r2, r0
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	1ad3      	subs	r3, r2, r3
 800a646:	68fa      	ldr	r2, [r7, #12]
 800a648:	429a      	cmp	r2, r3
 800a64a:	d8f7      	bhi.n	800a63c <HAL_Delay+0x28>
  {
  }
}
 800a64c:	bf00      	nop
 800a64e:	3710      	adds	r7, #16
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}
 800a654:	20002090 	.word	0x20002090

0800a658 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a658:	b480      	push	{r7}
 800a65a:	b085      	sub	sp, #20
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f003 0307 	and.w	r3, r3, #7
 800a666:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a668:	4b0c      	ldr	r3, [pc, #48]	; (800a69c <__NVIC_SetPriorityGrouping+0x44>)
 800a66a:	68db      	ldr	r3, [r3, #12]
 800a66c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a66e:	68ba      	ldr	r2, [r7, #8]
 800a670:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a674:	4013      	ands	r3, r2
 800a676:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a680:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a688:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a68a:	4a04      	ldr	r2, [pc, #16]	; (800a69c <__NVIC_SetPriorityGrouping+0x44>)
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	60d3      	str	r3, [r2, #12]
}
 800a690:	bf00      	nop
 800a692:	3714      	adds	r7, #20
 800a694:	46bd      	mov	sp, r7
 800a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69a:	4770      	bx	lr
 800a69c:	e000ed00 	.word	0xe000ed00

0800a6a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a6a0:	b480      	push	{r7}
 800a6a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a6a4:	4b04      	ldr	r3, [pc, #16]	; (800a6b8 <__NVIC_GetPriorityGrouping+0x18>)
 800a6a6:	68db      	ldr	r3, [r3, #12]
 800a6a8:	0a1b      	lsrs	r3, r3, #8
 800a6aa:	f003 0307 	and.w	r3, r3, #7
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b6:	4770      	bx	lr
 800a6b8:	e000ed00 	.word	0xe000ed00

0800a6bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b083      	sub	sp, #12
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a6c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	db0b      	blt.n	800a6e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a6ce:	79fb      	ldrb	r3, [r7, #7]
 800a6d0:	f003 021f 	and.w	r2, r3, #31
 800a6d4:	4907      	ldr	r1, [pc, #28]	; (800a6f4 <__NVIC_EnableIRQ+0x38>)
 800a6d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a6da:	095b      	lsrs	r3, r3, #5
 800a6dc:	2001      	movs	r0, #1
 800a6de:	fa00 f202 	lsl.w	r2, r0, r2
 800a6e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a6e6:	bf00      	nop
 800a6e8:	370c      	adds	r7, #12
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f0:	4770      	bx	lr
 800a6f2:	bf00      	nop
 800a6f4:	e000e100 	.word	0xe000e100

0800a6f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b083      	sub	sp, #12
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	4603      	mov	r3, r0
 800a700:	6039      	str	r1, [r7, #0]
 800a702:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	db0a      	blt.n	800a722 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	b2da      	uxtb	r2, r3
 800a710:	490c      	ldr	r1, [pc, #48]	; (800a744 <__NVIC_SetPriority+0x4c>)
 800a712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a716:	0112      	lsls	r2, r2, #4
 800a718:	b2d2      	uxtb	r2, r2
 800a71a:	440b      	add	r3, r1
 800a71c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a720:	e00a      	b.n	800a738 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	b2da      	uxtb	r2, r3
 800a726:	4908      	ldr	r1, [pc, #32]	; (800a748 <__NVIC_SetPriority+0x50>)
 800a728:	79fb      	ldrb	r3, [r7, #7]
 800a72a:	f003 030f 	and.w	r3, r3, #15
 800a72e:	3b04      	subs	r3, #4
 800a730:	0112      	lsls	r2, r2, #4
 800a732:	b2d2      	uxtb	r2, r2
 800a734:	440b      	add	r3, r1
 800a736:	761a      	strb	r2, [r3, #24]
}
 800a738:	bf00      	nop
 800a73a:	370c      	adds	r7, #12
 800a73c:	46bd      	mov	sp, r7
 800a73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a742:	4770      	bx	lr
 800a744:	e000e100 	.word	0xe000e100
 800a748:	e000ed00 	.word	0xe000ed00

0800a74c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a74c:	b480      	push	{r7}
 800a74e:	b089      	sub	sp, #36	; 0x24
 800a750:	af00      	add	r7, sp, #0
 800a752:	60f8      	str	r0, [r7, #12]
 800a754:	60b9      	str	r1, [r7, #8]
 800a756:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	f003 0307 	and.w	r3, r3, #7
 800a75e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a760:	69fb      	ldr	r3, [r7, #28]
 800a762:	f1c3 0307 	rsb	r3, r3, #7
 800a766:	2b04      	cmp	r3, #4
 800a768:	bf28      	it	cs
 800a76a:	2304      	movcs	r3, #4
 800a76c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a76e:	69fb      	ldr	r3, [r7, #28]
 800a770:	3304      	adds	r3, #4
 800a772:	2b06      	cmp	r3, #6
 800a774:	d902      	bls.n	800a77c <NVIC_EncodePriority+0x30>
 800a776:	69fb      	ldr	r3, [r7, #28]
 800a778:	3b03      	subs	r3, #3
 800a77a:	e000      	b.n	800a77e <NVIC_EncodePriority+0x32>
 800a77c:	2300      	movs	r3, #0
 800a77e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a780:	f04f 32ff 	mov.w	r2, #4294967295
 800a784:	69bb      	ldr	r3, [r7, #24]
 800a786:	fa02 f303 	lsl.w	r3, r2, r3
 800a78a:	43da      	mvns	r2, r3
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	401a      	ands	r2, r3
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a794:	f04f 31ff 	mov.w	r1, #4294967295
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	fa01 f303 	lsl.w	r3, r1, r3
 800a79e:	43d9      	mvns	r1, r3
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a7a4:	4313      	orrs	r3, r2
         );
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3724      	adds	r7, #36	; 0x24
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b0:	4770      	bx	lr

0800a7b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a7b2:	b580      	push	{r7, lr}
 800a7b4:	b082      	sub	sp, #8
 800a7b6:	af00      	add	r7, sp, #0
 800a7b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f7ff ff4c 	bl	800a658 <__NVIC_SetPriorityGrouping>
}
 800a7c0:	bf00      	nop
 800a7c2:	3708      	adds	r7, #8
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}

0800a7c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b086      	sub	sp, #24
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	60b9      	str	r1, [r7, #8]
 800a7d2:	607a      	str	r2, [r7, #4]
 800a7d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a7da:	f7ff ff61 	bl	800a6a0 <__NVIC_GetPriorityGrouping>
 800a7de:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a7e0:	687a      	ldr	r2, [r7, #4]
 800a7e2:	68b9      	ldr	r1, [r7, #8]
 800a7e4:	6978      	ldr	r0, [r7, #20]
 800a7e6:	f7ff ffb1 	bl	800a74c <NVIC_EncodePriority>
 800a7ea:	4602      	mov	r2, r0
 800a7ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a7f0:	4611      	mov	r1, r2
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f7ff ff80 	bl	800a6f8 <__NVIC_SetPriority>
}
 800a7f8:	bf00      	nop
 800a7fa:	3718      	adds	r7, #24
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}

0800a800 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b082      	sub	sp, #8
 800a804:	af00      	add	r7, sp, #0
 800a806:	4603      	mov	r3, r0
 800a808:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a80a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a80e:	4618      	mov	r0, r3
 800a810:	f7ff ff54 	bl	800a6bc <__NVIC_EnableIRQ>
}
 800a814:	bf00      	nop
 800a816:	3708      	adds	r7, #8
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}

0800a81c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b086      	sub	sp, #24
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a824:	2300      	movs	r3, #0
 800a826:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a828:	f7ff fee8 	bl	800a5fc <HAL_GetTick>
 800a82c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d101      	bne.n	800a838 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a834:	2301      	movs	r3, #1
 800a836:	e099      	b.n	800a96c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2200      	movs	r2, #0
 800a83c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2202      	movs	r2, #2
 800a844:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	681a      	ldr	r2, [r3, #0]
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f022 0201 	bic.w	r2, r2, #1
 800a856:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a858:	e00f      	b.n	800a87a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a85a:	f7ff fecf 	bl	800a5fc <HAL_GetTick>
 800a85e:	4602      	mov	r2, r0
 800a860:	693b      	ldr	r3, [r7, #16]
 800a862:	1ad3      	subs	r3, r2, r3
 800a864:	2b05      	cmp	r3, #5
 800a866:	d908      	bls.n	800a87a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2220      	movs	r2, #32
 800a86c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2203      	movs	r2, #3
 800a872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a876:	2303      	movs	r3, #3
 800a878:	e078      	b.n	800a96c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f003 0301 	and.w	r3, r3, #1
 800a884:	2b00      	cmp	r3, #0
 800a886:	d1e8      	bne.n	800a85a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a890:	697a      	ldr	r2, [r7, #20]
 800a892:	4b38      	ldr	r3, [pc, #224]	; (800a974 <HAL_DMA_Init+0x158>)
 800a894:	4013      	ands	r3, r2
 800a896:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	685a      	ldr	r2, [r3, #4]
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	689b      	ldr	r3, [r3, #8]
 800a8a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a8a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	691b      	ldr	r3, [r3, #16]
 800a8ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a8b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	699b      	ldr	r3, [r3, #24]
 800a8b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a8be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6a1b      	ldr	r3, [r3, #32]
 800a8c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a8c6:	697a      	ldr	r2, [r7, #20]
 800a8c8:	4313      	orrs	r3, r2
 800a8ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d0:	2b04      	cmp	r3, #4
 800a8d2:	d107      	bne.n	800a8e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8dc:	4313      	orrs	r3, r2
 800a8de:	697a      	ldr	r2, [r7, #20]
 800a8e0:	4313      	orrs	r3, r2
 800a8e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	697a      	ldr	r2, [r7, #20]
 800a8ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	695b      	ldr	r3, [r3, #20]
 800a8f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	f023 0307 	bic.w	r3, r3, #7
 800a8fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a900:	697a      	ldr	r2, [r7, #20]
 800a902:	4313      	orrs	r3, r2
 800a904:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a90a:	2b04      	cmp	r3, #4
 800a90c:	d117      	bne.n	800a93e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a912:	697a      	ldr	r2, [r7, #20]
 800a914:	4313      	orrs	r3, r2
 800a916:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d00e      	beq.n	800a93e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f000 fa9f 	bl	800ae64 <DMA_CheckFifoParam>
 800a926:	4603      	mov	r3, r0
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d008      	beq.n	800a93e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2240      	movs	r2, #64	; 0x40
 800a930:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2201      	movs	r2, #1
 800a936:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a93a:	2301      	movs	r3, #1
 800a93c:	e016      	b.n	800a96c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	697a      	ldr	r2, [r7, #20]
 800a944:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f000 fa56 	bl	800adf8 <DMA_CalcBaseAndBitshift>
 800a94c:	4603      	mov	r3, r0
 800a94e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a954:	223f      	movs	r2, #63	; 0x3f
 800a956:	409a      	lsls	r2, r3
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2200      	movs	r2, #0
 800a960:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2201      	movs	r2, #1
 800a966:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a96a:	2300      	movs	r3, #0
}
 800a96c:	4618      	mov	r0, r3
 800a96e:	3718      	adds	r7, #24
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}
 800a974:	f010803f 	.word	0xf010803f

0800a978 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b086      	sub	sp, #24
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	60f8      	str	r0, [r7, #12]
 800a980:	60b9      	str	r1, [r7, #8]
 800a982:	607a      	str	r2, [r7, #4]
 800a984:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a986:	2300      	movs	r3, #0
 800a988:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a98e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a996:	2b01      	cmp	r3, #1
 800a998:	d101      	bne.n	800a99e <HAL_DMA_Start_IT+0x26>
 800a99a:	2302      	movs	r3, #2
 800a99c:	e040      	b.n	800aa20 <HAL_DMA_Start_IT+0xa8>
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	2201      	movs	r2, #1
 800a9a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a9ac:	b2db      	uxtb	r3, r3
 800a9ae:	2b01      	cmp	r3, #1
 800a9b0:	d12f      	bne.n	800aa12 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	2202      	movs	r2, #2
 800a9b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	687a      	ldr	r2, [r7, #4]
 800a9c4:	68b9      	ldr	r1, [r7, #8]
 800a9c6:	68f8      	ldr	r0, [r7, #12]
 800a9c8:	f000 f9e8 	bl	800ad9c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9d0:	223f      	movs	r2, #63	; 0x3f
 800a9d2:	409a      	lsls	r2, r3
 800a9d4:	693b      	ldr	r3, [r7, #16]
 800a9d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	681a      	ldr	r2, [r3, #0]
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f042 0216 	orr.w	r2, r2, #22
 800a9e6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d007      	beq.n	800aa00 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	681a      	ldr	r2, [r3, #0]
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f042 0208 	orr.w	r2, r2, #8
 800a9fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	681a      	ldr	r2, [r3, #0]
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f042 0201 	orr.w	r2, r2, #1
 800aa0e:	601a      	str	r2, [r3, #0]
 800aa10:	e005      	b.n	800aa1e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	2200      	movs	r2, #0
 800aa16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800aa1a:	2302      	movs	r3, #2
 800aa1c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800aa1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa20:	4618      	mov	r0, r3
 800aa22:	3718      	adds	r7, #24
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}

0800aa28 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b083      	sub	sp, #12
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800aa36:	b2db      	uxtb	r3, r3
 800aa38:	2b02      	cmp	r3, #2
 800aa3a:	d004      	beq.n	800aa46 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2280      	movs	r2, #128	; 0x80
 800aa40:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800aa42:	2301      	movs	r3, #1
 800aa44:	e00c      	b.n	800aa60 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2205      	movs	r2, #5
 800aa4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	681a      	ldr	r2, [r3, #0]
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	f022 0201 	bic.w	r2, r2, #1
 800aa5c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800aa5e:	2300      	movs	r3, #0
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	370c      	adds	r7, #12
 800aa64:	46bd      	mov	sp, r7
 800aa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6a:	4770      	bx	lr

0800aa6c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b086      	sub	sp, #24
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800aa74:	2300      	movs	r3, #0
 800aa76:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800aa78:	4b92      	ldr	r3, [pc, #584]	; (800acc4 <HAL_DMA_IRQHandler+0x258>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	4a92      	ldr	r2, [pc, #584]	; (800acc8 <HAL_DMA_IRQHandler+0x25c>)
 800aa7e:	fba2 2303 	umull	r2, r3, r2, r3
 800aa82:	0a9b      	lsrs	r3, r3, #10
 800aa84:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa8a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800aa8c:	693b      	ldr	r3, [r7, #16]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa96:	2208      	movs	r2, #8
 800aa98:	409a      	lsls	r2, r3
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	4013      	ands	r3, r2
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d01a      	beq.n	800aad8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f003 0304 	and.w	r3, r3, #4
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d013      	beq.n	800aad8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	681a      	ldr	r2, [r3, #0]
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	f022 0204 	bic.w	r2, r2, #4
 800aabe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aac4:	2208      	movs	r2, #8
 800aac6:	409a      	lsls	r2, r3
 800aac8:	693b      	ldr	r3, [r7, #16]
 800aaca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aad0:	f043 0201 	orr.w	r2, r3, #1
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aadc:	2201      	movs	r2, #1
 800aade:	409a      	lsls	r2, r3
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	4013      	ands	r3, r2
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d012      	beq.n	800ab0e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	695b      	ldr	r3, [r3, #20]
 800aaee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d00b      	beq.n	800ab0e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aafa:	2201      	movs	r2, #1
 800aafc:	409a      	lsls	r2, r3
 800aafe:	693b      	ldr	r3, [r7, #16]
 800ab00:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab06:	f043 0202 	orr.w	r2, r3, #2
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab12:	2204      	movs	r2, #4
 800ab14:	409a      	lsls	r2, r3
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	4013      	ands	r3, r2
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d012      	beq.n	800ab44 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f003 0302 	and.w	r3, r3, #2
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d00b      	beq.n	800ab44 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab30:	2204      	movs	r2, #4
 800ab32:	409a      	lsls	r2, r3
 800ab34:	693b      	ldr	r3, [r7, #16]
 800ab36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab3c:	f043 0204 	orr.w	r2, r3, #4
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab48:	2210      	movs	r2, #16
 800ab4a:	409a      	lsls	r2, r3
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	4013      	ands	r3, r2
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d043      	beq.n	800abdc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	f003 0308 	and.w	r3, r3, #8
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d03c      	beq.n	800abdc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab66:	2210      	movs	r2, #16
 800ab68:	409a      	lsls	r2, r3
 800ab6a:	693b      	ldr	r3, [r7, #16]
 800ab6c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d018      	beq.n	800abae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d108      	bne.n	800ab9c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d024      	beq.n	800abdc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	4798      	blx	r3
 800ab9a:	e01f      	b.n	800abdc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d01b      	beq.n	800abdc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	4798      	blx	r3
 800abac:	e016      	b.n	800abdc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d107      	bne.n	800abcc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	681a      	ldr	r2, [r3, #0]
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f022 0208 	bic.w	r2, r2, #8
 800abca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d003      	beq.n	800abdc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abe0:	2220      	movs	r2, #32
 800abe2:	409a      	lsls	r2, r3
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	4013      	ands	r3, r2
 800abe8:	2b00      	cmp	r3, #0
 800abea:	f000 808e 	beq.w	800ad0a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f003 0310 	and.w	r3, r3, #16
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	f000 8086 	beq.w	800ad0a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac02:	2220      	movs	r2, #32
 800ac04:	409a      	lsls	r2, r3
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ac10:	b2db      	uxtb	r3, r3
 800ac12:	2b05      	cmp	r3, #5
 800ac14:	d136      	bne.n	800ac84 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	681a      	ldr	r2, [r3, #0]
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f022 0216 	bic.w	r2, r2, #22
 800ac24:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	695a      	ldr	r2, [r3, #20]
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ac34:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d103      	bne.n	800ac46 <HAL_DMA_IRQHandler+0x1da>
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d007      	beq.n	800ac56 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	681a      	ldr	r2, [r3, #0]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f022 0208 	bic.w	r2, r2, #8
 800ac54:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac5a:	223f      	movs	r2, #63	; 0x3f
 800ac5c:	409a      	lsls	r2, r3
 800ac5e:	693b      	ldr	r3, [r7, #16]
 800ac60:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2200      	movs	r2, #0
 800ac66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2201      	movs	r2, #1
 800ac6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d07d      	beq.n	800ad76 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	4798      	blx	r3
        }
        return;
 800ac82:	e078      	b.n	800ad76 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d01c      	beq.n	800accc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d108      	bne.n	800acb2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d030      	beq.n	800ad0a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	4798      	blx	r3
 800acb0:	e02b      	b.n	800ad0a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d027      	beq.n	800ad0a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	4798      	blx	r3
 800acc2:	e022      	b.n	800ad0a <HAL_DMA_IRQHandler+0x29e>
 800acc4:	20002088 	.word	0x20002088
 800acc8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d10f      	bne.n	800acfa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	681a      	ldr	r2, [r3, #0]
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	f022 0210 	bic.w	r2, r2, #16
 800ace8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2200      	movs	r2, #0
 800acee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2201      	movs	r2, #1
 800acf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d003      	beq.n	800ad0a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d032      	beq.n	800ad78 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad16:	f003 0301 	and.w	r3, r3, #1
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d022      	beq.n	800ad64 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2205      	movs	r2, #5
 800ad22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	681a      	ldr	r2, [r3, #0]
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	f022 0201 	bic.w	r2, r2, #1
 800ad34:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800ad36:	68bb      	ldr	r3, [r7, #8]
 800ad38:	3301      	adds	r3, #1
 800ad3a:	60bb      	str	r3, [r7, #8]
 800ad3c:	697a      	ldr	r2, [r7, #20]
 800ad3e:	429a      	cmp	r2, r3
 800ad40:	d307      	bcc.n	800ad52 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	f003 0301 	and.w	r3, r3, #1
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d1f2      	bne.n	800ad36 <HAL_DMA_IRQHandler+0x2ca>
 800ad50:	e000      	b.n	800ad54 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800ad52:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2200      	movs	r2, #0
 800ad58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2201      	movs	r2, #1
 800ad60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d005      	beq.n	800ad78 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	4798      	blx	r3
 800ad74:	e000      	b.n	800ad78 <HAL_DMA_IRQHandler+0x30c>
        return;
 800ad76:	bf00      	nop
    }
  }
}
 800ad78:	3718      	adds	r7, #24
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}
 800ad7e:	bf00      	nop

0800ad80 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800ad80:	b480      	push	{r7}
 800ad82:	b083      	sub	sp, #12
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ad8e:	b2db      	uxtb	r3, r3
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	370c      	adds	r7, #12
 800ad94:	46bd      	mov	sp, r7
 800ad96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9a:	4770      	bx	lr

0800ad9c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ad9c:	b480      	push	{r7}
 800ad9e:	b085      	sub	sp, #20
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	60f8      	str	r0, [r7, #12]
 800ada4:	60b9      	str	r1, [r7, #8]
 800ada6:	607a      	str	r2, [r7, #4]
 800ada8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	681a      	ldr	r2, [r3, #0]
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800adb8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	683a      	ldr	r2, [r7, #0]
 800adc0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	689b      	ldr	r3, [r3, #8]
 800adc6:	2b40      	cmp	r3, #64	; 0x40
 800adc8:	d108      	bne.n	800addc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	687a      	ldr	r2, [r7, #4]
 800add0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	68ba      	ldr	r2, [r7, #8]
 800add8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800adda:	e007      	b.n	800adec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	68ba      	ldr	r2, [r7, #8]
 800ade2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	687a      	ldr	r2, [r7, #4]
 800adea:	60da      	str	r2, [r3, #12]
}
 800adec:	bf00      	nop
 800adee:	3714      	adds	r7, #20
 800adf0:	46bd      	mov	sp, r7
 800adf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf6:	4770      	bx	lr

0800adf8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800adf8:	b480      	push	{r7}
 800adfa:	b085      	sub	sp, #20
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	b2db      	uxtb	r3, r3
 800ae06:	3b10      	subs	r3, #16
 800ae08:	4a14      	ldr	r2, [pc, #80]	; (800ae5c <DMA_CalcBaseAndBitshift+0x64>)
 800ae0a:	fba2 2303 	umull	r2, r3, r2, r3
 800ae0e:	091b      	lsrs	r3, r3, #4
 800ae10:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800ae12:	4a13      	ldr	r2, [pc, #76]	; (800ae60 <DMA_CalcBaseAndBitshift+0x68>)
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	4413      	add	r3, r2
 800ae18:	781b      	ldrb	r3, [r3, #0]
 800ae1a:	461a      	mov	r2, r3
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	2b03      	cmp	r3, #3
 800ae24:	d909      	bls.n	800ae3a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800ae2e:	f023 0303 	bic.w	r3, r3, #3
 800ae32:	1d1a      	adds	r2, r3, #4
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	659a      	str	r2, [r3, #88]	; 0x58
 800ae38:	e007      	b.n	800ae4a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800ae42:	f023 0303 	bic.w	r3, r3, #3
 800ae46:	687a      	ldr	r2, [r7, #4]
 800ae48:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3714      	adds	r7, #20
 800ae52:	46bd      	mov	sp, r7
 800ae54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae58:	4770      	bx	lr
 800ae5a:	bf00      	nop
 800ae5c:	aaaaaaab 	.word	0xaaaaaaab
 800ae60:	0801a570 	.word	0x0801a570

0800ae64 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800ae64:	b480      	push	{r7}
 800ae66:	b085      	sub	sp, #20
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae74:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	699b      	ldr	r3, [r3, #24]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d11f      	bne.n	800aebe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	2b03      	cmp	r3, #3
 800ae82:	d855      	bhi.n	800af30 <DMA_CheckFifoParam+0xcc>
 800ae84:	a201      	add	r2, pc, #4	; (adr r2, 800ae8c <DMA_CheckFifoParam+0x28>)
 800ae86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae8a:	bf00      	nop
 800ae8c:	0800ae9d 	.word	0x0800ae9d
 800ae90:	0800aeaf 	.word	0x0800aeaf
 800ae94:	0800ae9d 	.word	0x0800ae9d
 800ae98:	0800af31 	.word	0x0800af31
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aea0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d045      	beq.n	800af34 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800aea8:	2301      	movs	r3, #1
 800aeaa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aeac:	e042      	b.n	800af34 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeb2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800aeb6:	d13f      	bne.n	800af38 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800aeb8:	2301      	movs	r3, #1
 800aeba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aebc:	e03c      	b.n	800af38 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	699b      	ldr	r3, [r3, #24]
 800aec2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aec6:	d121      	bne.n	800af0c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	2b03      	cmp	r3, #3
 800aecc:	d836      	bhi.n	800af3c <DMA_CheckFifoParam+0xd8>
 800aece:	a201      	add	r2, pc, #4	; (adr r2, 800aed4 <DMA_CheckFifoParam+0x70>)
 800aed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aed4:	0800aee5 	.word	0x0800aee5
 800aed8:	0800aeeb 	.word	0x0800aeeb
 800aedc:	0800aee5 	.word	0x0800aee5
 800aee0:	0800aefd 	.word	0x0800aefd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800aee4:	2301      	movs	r3, #1
 800aee6:	73fb      	strb	r3, [r7, #15]
      break;
 800aee8:	e02f      	b.n	800af4a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d024      	beq.n	800af40 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800aef6:	2301      	movs	r3, #1
 800aef8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aefa:	e021      	b.n	800af40 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af00:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800af04:	d11e      	bne.n	800af44 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800af06:	2301      	movs	r3, #1
 800af08:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800af0a:	e01b      	b.n	800af44 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	2b02      	cmp	r3, #2
 800af10:	d902      	bls.n	800af18 <DMA_CheckFifoParam+0xb4>
 800af12:	2b03      	cmp	r3, #3
 800af14:	d003      	beq.n	800af1e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800af16:	e018      	b.n	800af4a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800af18:	2301      	movs	r3, #1
 800af1a:	73fb      	strb	r3, [r7, #15]
      break;
 800af1c:	e015      	b.n	800af4a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800af26:	2b00      	cmp	r3, #0
 800af28:	d00e      	beq.n	800af48 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800af2a:	2301      	movs	r3, #1
 800af2c:	73fb      	strb	r3, [r7, #15]
      break;
 800af2e:	e00b      	b.n	800af48 <DMA_CheckFifoParam+0xe4>
      break;
 800af30:	bf00      	nop
 800af32:	e00a      	b.n	800af4a <DMA_CheckFifoParam+0xe6>
      break;
 800af34:	bf00      	nop
 800af36:	e008      	b.n	800af4a <DMA_CheckFifoParam+0xe6>
      break;
 800af38:	bf00      	nop
 800af3a:	e006      	b.n	800af4a <DMA_CheckFifoParam+0xe6>
      break;
 800af3c:	bf00      	nop
 800af3e:	e004      	b.n	800af4a <DMA_CheckFifoParam+0xe6>
      break;
 800af40:	bf00      	nop
 800af42:	e002      	b.n	800af4a <DMA_CheckFifoParam+0xe6>
      break;   
 800af44:	bf00      	nop
 800af46:	e000      	b.n	800af4a <DMA_CheckFifoParam+0xe6>
      break;
 800af48:	bf00      	nop
    }
  } 
  
  return status; 
 800af4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	3714      	adds	r7, #20
 800af50:	46bd      	mov	sp, r7
 800af52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af56:	4770      	bx	lr

0800af58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800af58:	b480      	push	{r7}
 800af5a:	b089      	sub	sp, #36	; 0x24
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
 800af60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800af62:	2300      	movs	r3, #0
 800af64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800af66:	2300      	movs	r3, #0
 800af68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800af6a:	2300      	movs	r3, #0
 800af6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800af6e:	2300      	movs	r3, #0
 800af70:	61fb      	str	r3, [r7, #28]
 800af72:	e16b      	b.n	800b24c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800af74:	2201      	movs	r2, #1
 800af76:	69fb      	ldr	r3, [r7, #28]
 800af78:	fa02 f303 	lsl.w	r3, r2, r3
 800af7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	697a      	ldr	r2, [r7, #20]
 800af84:	4013      	ands	r3, r2
 800af86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800af88:	693a      	ldr	r2, [r7, #16]
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	429a      	cmp	r2, r3
 800af8e:	f040 815a 	bne.w	800b246 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	685b      	ldr	r3, [r3, #4]
 800af96:	2b01      	cmp	r3, #1
 800af98:	d00b      	beq.n	800afb2 <HAL_GPIO_Init+0x5a>
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	685b      	ldr	r3, [r3, #4]
 800af9e:	2b02      	cmp	r3, #2
 800afa0:	d007      	beq.n	800afb2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800afa6:	2b11      	cmp	r3, #17
 800afa8:	d003      	beq.n	800afb2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	685b      	ldr	r3, [r3, #4]
 800afae:	2b12      	cmp	r3, #18
 800afb0:	d130      	bne.n	800b014 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	689b      	ldr	r3, [r3, #8]
 800afb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800afb8:	69fb      	ldr	r3, [r7, #28]
 800afba:	005b      	lsls	r3, r3, #1
 800afbc:	2203      	movs	r2, #3
 800afbe:	fa02 f303 	lsl.w	r3, r2, r3
 800afc2:	43db      	mvns	r3, r3
 800afc4:	69ba      	ldr	r2, [r7, #24]
 800afc6:	4013      	ands	r3, r2
 800afc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	68da      	ldr	r2, [r3, #12]
 800afce:	69fb      	ldr	r3, [r7, #28]
 800afd0:	005b      	lsls	r3, r3, #1
 800afd2:	fa02 f303 	lsl.w	r3, r2, r3
 800afd6:	69ba      	ldr	r2, [r7, #24]
 800afd8:	4313      	orrs	r3, r2
 800afda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	69ba      	ldr	r2, [r7, #24]
 800afe0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	685b      	ldr	r3, [r3, #4]
 800afe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800afe8:	2201      	movs	r2, #1
 800afea:	69fb      	ldr	r3, [r7, #28]
 800afec:	fa02 f303 	lsl.w	r3, r2, r3
 800aff0:	43db      	mvns	r3, r3
 800aff2:	69ba      	ldr	r2, [r7, #24]
 800aff4:	4013      	ands	r3, r2
 800aff6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	685b      	ldr	r3, [r3, #4]
 800affc:	091b      	lsrs	r3, r3, #4
 800affe:	f003 0201 	and.w	r2, r3, #1
 800b002:	69fb      	ldr	r3, [r7, #28]
 800b004:	fa02 f303 	lsl.w	r3, r2, r3
 800b008:	69ba      	ldr	r2, [r7, #24]
 800b00a:	4313      	orrs	r3, r2
 800b00c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	69ba      	ldr	r2, [r7, #24]
 800b012:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	68db      	ldr	r3, [r3, #12]
 800b018:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b01a:	69fb      	ldr	r3, [r7, #28]
 800b01c:	005b      	lsls	r3, r3, #1
 800b01e:	2203      	movs	r2, #3
 800b020:	fa02 f303 	lsl.w	r3, r2, r3
 800b024:	43db      	mvns	r3, r3
 800b026:	69ba      	ldr	r2, [r7, #24]
 800b028:	4013      	ands	r3, r2
 800b02a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	689a      	ldr	r2, [r3, #8]
 800b030:	69fb      	ldr	r3, [r7, #28]
 800b032:	005b      	lsls	r3, r3, #1
 800b034:	fa02 f303 	lsl.w	r3, r2, r3
 800b038:	69ba      	ldr	r2, [r7, #24]
 800b03a:	4313      	orrs	r3, r2
 800b03c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	69ba      	ldr	r2, [r7, #24]
 800b042:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	685b      	ldr	r3, [r3, #4]
 800b048:	2b02      	cmp	r3, #2
 800b04a:	d003      	beq.n	800b054 <HAL_GPIO_Init+0xfc>
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	685b      	ldr	r3, [r3, #4]
 800b050:	2b12      	cmp	r3, #18
 800b052:	d123      	bne.n	800b09c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b054:	69fb      	ldr	r3, [r7, #28]
 800b056:	08da      	lsrs	r2, r3, #3
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	3208      	adds	r2, #8
 800b05c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b060:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b062:	69fb      	ldr	r3, [r7, #28]
 800b064:	f003 0307 	and.w	r3, r3, #7
 800b068:	009b      	lsls	r3, r3, #2
 800b06a:	220f      	movs	r2, #15
 800b06c:	fa02 f303 	lsl.w	r3, r2, r3
 800b070:	43db      	mvns	r3, r3
 800b072:	69ba      	ldr	r2, [r7, #24]
 800b074:	4013      	ands	r3, r2
 800b076:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	691a      	ldr	r2, [r3, #16]
 800b07c:	69fb      	ldr	r3, [r7, #28]
 800b07e:	f003 0307 	and.w	r3, r3, #7
 800b082:	009b      	lsls	r3, r3, #2
 800b084:	fa02 f303 	lsl.w	r3, r2, r3
 800b088:	69ba      	ldr	r2, [r7, #24]
 800b08a:	4313      	orrs	r3, r2
 800b08c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b08e:	69fb      	ldr	r3, [r7, #28]
 800b090:	08da      	lsrs	r2, r3, #3
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	3208      	adds	r2, #8
 800b096:	69b9      	ldr	r1, [r7, #24]
 800b098:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b0a2:	69fb      	ldr	r3, [r7, #28]
 800b0a4:	005b      	lsls	r3, r3, #1
 800b0a6:	2203      	movs	r2, #3
 800b0a8:	fa02 f303 	lsl.w	r3, r2, r3
 800b0ac:	43db      	mvns	r3, r3
 800b0ae:	69ba      	ldr	r2, [r7, #24]
 800b0b0:	4013      	ands	r3, r2
 800b0b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	685b      	ldr	r3, [r3, #4]
 800b0b8:	f003 0203 	and.w	r2, r3, #3
 800b0bc:	69fb      	ldr	r3, [r7, #28]
 800b0be:	005b      	lsls	r3, r3, #1
 800b0c0:	fa02 f303 	lsl.w	r3, r2, r3
 800b0c4:	69ba      	ldr	r2, [r7, #24]
 800b0c6:	4313      	orrs	r3, r2
 800b0c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	69ba      	ldr	r2, [r7, #24]
 800b0ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	685b      	ldr	r3, [r3, #4]
 800b0d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	f000 80b4 	beq.w	800b246 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b0de:	2300      	movs	r3, #0
 800b0e0:	60fb      	str	r3, [r7, #12]
 800b0e2:	4b5f      	ldr	r3, [pc, #380]	; (800b260 <HAL_GPIO_Init+0x308>)
 800b0e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0e6:	4a5e      	ldr	r2, [pc, #376]	; (800b260 <HAL_GPIO_Init+0x308>)
 800b0e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b0ec:	6453      	str	r3, [r2, #68]	; 0x44
 800b0ee:	4b5c      	ldr	r3, [pc, #368]	; (800b260 <HAL_GPIO_Init+0x308>)
 800b0f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b0f6:	60fb      	str	r3, [r7, #12]
 800b0f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b0fa:	4a5a      	ldr	r2, [pc, #360]	; (800b264 <HAL_GPIO_Init+0x30c>)
 800b0fc:	69fb      	ldr	r3, [r7, #28]
 800b0fe:	089b      	lsrs	r3, r3, #2
 800b100:	3302      	adds	r3, #2
 800b102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b106:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b108:	69fb      	ldr	r3, [r7, #28]
 800b10a:	f003 0303 	and.w	r3, r3, #3
 800b10e:	009b      	lsls	r3, r3, #2
 800b110:	220f      	movs	r2, #15
 800b112:	fa02 f303 	lsl.w	r3, r2, r3
 800b116:	43db      	mvns	r3, r3
 800b118:	69ba      	ldr	r2, [r7, #24]
 800b11a:	4013      	ands	r3, r2
 800b11c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	4a51      	ldr	r2, [pc, #324]	; (800b268 <HAL_GPIO_Init+0x310>)
 800b122:	4293      	cmp	r3, r2
 800b124:	d02b      	beq.n	800b17e <HAL_GPIO_Init+0x226>
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	4a50      	ldr	r2, [pc, #320]	; (800b26c <HAL_GPIO_Init+0x314>)
 800b12a:	4293      	cmp	r3, r2
 800b12c:	d025      	beq.n	800b17a <HAL_GPIO_Init+0x222>
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	4a4f      	ldr	r2, [pc, #316]	; (800b270 <HAL_GPIO_Init+0x318>)
 800b132:	4293      	cmp	r3, r2
 800b134:	d01f      	beq.n	800b176 <HAL_GPIO_Init+0x21e>
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	4a4e      	ldr	r2, [pc, #312]	; (800b274 <HAL_GPIO_Init+0x31c>)
 800b13a:	4293      	cmp	r3, r2
 800b13c:	d019      	beq.n	800b172 <HAL_GPIO_Init+0x21a>
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	4a4d      	ldr	r2, [pc, #308]	; (800b278 <HAL_GPIO_Init+0x320>)
 800b142:	4293      	cmp	r3, r2
 800b144:	d013      	beq.n	800b16e <HAL_GPIO_Init+0x216>
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	4a4c      	ldr	r2, [pc, #304]	; (800b27c <HAL_GPIO_Init+0x324>)
 800b14a:	4293      	cmp	r3, r2
 800b14c:	d00d      	beq.n	800b16a <HAL_GPIO_Init+0x212>
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	4a4b      	ldr	r2, [pc, #300]	; (800b280 <HAL_GPIO_Init+0x328>)
 800b152:	4293      	cmp	r3, r2
 800b154:	d007      	beq.n	800b166 <HAL_GPIO_Init+0x20e>
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	4a4a      	ldr	r2, [pc, #296]	; (800b284 <HAL_GPIO_Init+0x32c>)
 800b15a:	4293      	cmp	r3, r2
 800b15c:	d101      	bne.n	800b162 <HAL_GPIO_Init+0x20a>
 800b15e:	2307      	movs	r3, #7
 800b160:	e00e      	b.n	800b180 <HAL_GPIO_Init+0x228>
 800b162:	2308      	movs	r3, #8
 800b164:	e00c      	b.n	800b180 <HAL_GPIO_Init+0x228>
 800b166:	2306      	movs	r3, #6
 800b168:	e00a      	b.n	800b180 <HAL_GPIO_Init+0x228>
 800b16a:	2305      	movs	r3, #5
 800b16c:	e008      	b.n	800b180 <HAL_GPIO_Init+0x228>
 800b16e:	2304      	movs	r3, #4
 800b170:	e006      	b.n	800b180 <HAL_GPIO_Init+0x228>
 800b172:	2303      	movs	r3, #3
 800b174:	e004      	b.n	800b180 <HAL_GPIO_Init+0x228>
 800b176:	2302      	movs	r3, #2
 800b178:	e002      	b.n	800b180 <HAL_GPIO_Init+0x228>
 800b17a:	2301      	movs	r3, #1
 800b17c:	e000      	b.n	800b180 <HAL_GPIO_Init+0x228>
 800b17e:	2300      	movs	r3, #0
 800b180:	69fa      	ldr	r2, [r7, #28]
 800b182:	f002 0203 	and.w	r2, r2, #3
 800b186:	0092      	lsls	r2, r2, #2
 800b188:	4093      	lsls	r3, r2
 800b18a:	69ba      	ldr	r2, [r7, #24]
 800b18c:	4313      	orrs	r3, r2
 800b18e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b190:	4934      	ldr	r1, [pc, #208]	; (800b264 <HAL_GPIO_Init+0x30c>)
 800b192:	69fb      	ldr	r3, [r7, #28]
 800b194:	089b      	lsrs	r3, r3, #2
 800b196:	3302      	adds	r3, #2
 800b198:	69ba      	ldr	r2, [r7, #24]
 800b19a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b19e:	4b3a      	ldr	r3, [pc, #232]	; (800b288 <HAL_GPIO_Init+0x330>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b1a4:	693b      	ldr	r3, [r7, #16]
 800b1a6:	43db      	mvns	r3, r3
 800b1a8:	69ba      	ldr	r2, [r7, #24]
 800b1aa:	4013      	ands	r3, r2
 800b1ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	685b      	ldr	r3, [r3, #4]
 800b1b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d003      	beq.n	800b1c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800b1ba:	69ba      	ldr	r2, [r7, #24]
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	4313      	orrs	r3, r2
 800b1c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b1c2:	4a31      	ldr	r2, [pc, #196]	; (800b288 <HAL_GPIO_Init+0x330>)
 800b1c4:	69bb      	ldr	r3, [r7, #24]
 800b1c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800b1c8:	4b2f      	ldr	r3, [pc, #188]	; (800b288 <HAL_GPIO_Init+0x330>)
 800b1ca:	685b      	ldr	r3, [r3, #4]
 800b1cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b1ce:	693b      	ldr	r3, [r7, #16]
 800b1d0:	43db      	mvns	r3, r3
 800b1d2:	69ba      	ldr	r2, [r7, #24]
 800b1d4:	4013      	ands	r3, r2
 800b1d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	685b      	ldr	r3, [r3, #4]
 800b1dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d003      	beq.n	800b1ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800b1e4:	69ba      	ldr	r2, [r7, #24]
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	4313      	orrs	r3, r2
 800b1ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b1ec:	4a26      	ldr	r2, [pc, #152]	; (800b288 <HAL_GPIO_Init+0x330>)
 800b1ee:	69bb      	ldr	r3, [r7, #24]
 800b1f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b1f2:	4b25      	ldr	r3, [pc, #148]	; (800b288 <HAL_GPIO_Init+0x330>)
 800b1f4:	689b      	ldr	r3, [r3, #8]
 800b1f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b1f8:	693b      	ldr	r3, [r7, #16]
 800b1fa:	43db      	mvns	r3, r3
 800b1fc:	69ba      	ldr	r2, [r7, #24]
 800b1fe:	4013      	ands	r3, r2
 800b200:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	685b      	ldr	r3, [r3, #4]
 800b206:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d003      	beq.n	800b216 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800b20e:	69ba      	ldr	r2, [r7, #24]
 800b210:	693b      	ldr	r3, [r7, #16]
 800b212:	4313      	orrs	r3, r2
 800b214:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b216:	4a1c      	ldr	r2, [pc, #112]	; (800b288 <HAL_GPIO_Init+0x330>)
 800b218:	69bb      	ldr	r3, [r7, #24]
 800b21a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b21c:	4b1a      	ldr	r3, [pc, #104]	; (800b288 <HAL_GPIO_Init+0x330>)
 800b21e:	68db      	ldr	r3, [r3, #12]
 800b220:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b222:	693b      	ldr	r3, [r7, #16]
 800b224:	43db      	mvns	r3, r3
 800b226:	69ba      	ldr	r2, [r7, #24]
 800b228:	4013      	ands	r3, r2
 800b22a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	685b      	ldr	r3, [r3, #4]
 800b230:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b234:	2b00      	cmp	r3, #0
 800b236:	d003      	beq.n	800b240 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800b238:	69ba      	ldr	r2, [r7, #24]
 800b23a:	693b      	ldr	r3, [r7, #16]
 800b23c:	4313      	orrs	r3, r2
 800b23e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b240:	4a11      	ldr	r2, [pc, #68]	; (800b288 <HAL_GPIO_Init+0x330>)
 800b242:	69bb      	ldr	r3, [r7, #24]
 800b244:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b246:	69fb      	ldr	r3, [r7, #28]
 800b248:	3301      	adds	r3, #1
 800b24a:	61fb      	str	r3, [r7, #28]
 800b24c:	69fb      	ldr	r3, [r7, #28]
 800b24e:	2b0f      	cmp	r3, #15
 800b250:	f67f ae90 	bls.w	800af74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b254:	bf00      	nop
 800b256:	3724      	adds	r7, #36	; 0x24
 800b258:	46bd      	mov	sp, r7
 800b25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25e:	4770      	bx	lr
 800b260:	40023800 	.word	0x40023800
 800b264:	40013800 	.word	0x40013800
 800b268:	40020000 	.word	0x40020000
 800b26c:	40020400 	.word	0x40020400
 800b270:	40020800 	.word	0x40020800
 800b274:	40020c00 	.word	0x40020c00
 800b278:	40021000 	.word	0x40021000
 800b27c:	40021400 	.word	0x40021400
 800b280:	40021800 	.word	0x40021800
 800b284:	40021c00 	.word	0x40021c00
 800b288:	40013c00 	.word	0x40013c00

0800b28c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b28c:	b480      	push	{r7}
 800b28e:	b083      	sub	sp, #12
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
 800b294:	460b      	mov	r3, r1
 800b296:	807b      	strh	r3, [r7, #2]
 800b298:	4613      	mov	r3, r2
 800b29a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b29c:	787b      	ldrb	r3, [r7, #1]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d003      	beq.n	800b2aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b2a2:	887a      	ldrh	r2, [r7, #2]
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b2a8:	e003      	b.n	800b2b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b2aa:	887b      	ldrh	r3, [r7, #2]
 800b2ac:	041a      	lsls	r2, r3, #16
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	619a      	str	r2, [r3, #24]
}
 800b2b2:	bf00      	nop
 800b2b4:	370c      	adds	r7, #12
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2bc:	4770      	bx	lr
	...

0800b2c0 <HAL_NOR_Init>:
  * @param  Timing pointer to NOR control timing structure 
  * @param  ExtTiming pointer to NOR extended mode timing structure    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_Init(NOR_HandleTypeDef *hnor, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b084      	sub	sp, #16
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	60f8      	str	r0, [r7, #12]
 800b2c8:	60b9      	str	r1, [r7, #8]
 800b2ca:	607a      	str	r2, [r7, #4]
  /* Check the NOR handle parameter */
  if(hnor == NULL)
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d101      	bne.n	800b2d6 <HAL_NOR_Init+0x16>
  {
     return HAL_ERROR;
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	e043      	b.n	800b35e <HAL_NOR_Init+0x9e>
  }
  
  if(hnor->State == HAL_NOR_STATE_RESET)
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800b2dc:	b2db      	uxtb	r3, r3
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d106      	bne.n	800b2f0 <HAL_NOR_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnor->Lock = HAL_UNLOCKED;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hnor->MspInitCallback(hnor);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NOR_MspInit(hnor);
 800b2ea:	68f8      	ldr	r0, [r7, #12]
 800b2ec:	f7f8 fe44 	bl	8003f78 <HAL_NOR_MspInit>
#endif /* (USE_HAL_NOR_REGISTER_CALLBACKS) */
  }
  
  /* Initialize NOR control Interface */
  FMC_NORSRAM_Init(hnor->Instance, &(hnor->Init));
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	681a      	ldr	r2, [r3, #0]
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	3308      	adds	r3, #8
 800b2f8:	4619      	mov	r1, r3
 800b2fa:	4610      	mov	r0, r2
 800b2fc:	f003 f97e 	bl	800e5fc <FSMC_NORSRAM_Init>

  /* Initialize NOR timing Interface */
  FMC_NORSRAM_Timing_Init(hnor->Instance, Timing, hnor->Init.NSBank); 
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	6818      	ldr	r0, [r3, #0]
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	689b      	ldr	r3, [r3, #8]
 800b308:	461a      	mov	r2, r3
 800b30a:	68b9      	ldr	r1, [r7, #8]
 800b30c:	f003 f9c8 	bl	800e6a0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize NOR extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hnor->Extended, ExtTiming, hnor->Init.NSBank, hnor->Init.ExtendedMode);
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	6858      	ldr	r0, [r3, #4]
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	689a      	ldr	r2, [r3, #8]
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b31c:	6879      	ldr	r1, [r7, #4]
 800b31e:	f003 f9fd 	bl	800e71c <FSMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	68fa      	ldr	r2, [r7, #12]
 800b328:	6892      	ldr	r2, [r2, #8]
 800b32a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	68fa      	ldr	r2, [r7, #12]
 800b334:	6892      	ldr	r2, [r2, #8]
 800b336:	f041 0101 	orr.w	r1, r1, #1
 800b33a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize NOR Memory Data Width*/
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	695b      	ldr	r3, [r3, #20]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d103      	bne.n	800b34e <HAL_NOR_Init+0x8e>
  {
    uwNORMemoryDataWidth = NOR_MEMORY_8B;
 800b346:	4b08      	ldr	r3, [pc, #32]	; (800b368 <HAL_NOR_Init+0xa8>)
 800b348:	2200      	movs	r2, #0
 800b34a:	601a      	str	r2, [r3, #0]
 800b34c:	e002      	b.n	800b354 <HAL_NOR_Init+0x94>
  }
  else
  {
    uwNORMemoryDataWidth = NOR_MEMORY_16B;
 800b34e:	4b06      	ldr	r3, [pc, #24]	; (800b368 <HAL_NOR_Init+0xa8>)
 800b350:	2201      	movs	r2, #1
 800b352:	601a      	str	r2, [r3, #0]
  }

  /* Check the NOR controller state */
  hnor->State = HAL_NOR_STATE_READY; 
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	2201      	movs	r2, #1
 800b358:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  return HAL_OK;
 800b35c:	2300      	movs	r3, #0
}
 800b35e:	4618      	mov	r0, r3
 800b360:	3710      	adds	r7, #16
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}
 800b366:	bf00      	nop
 800b368:	2000285c 	.word	0x2000285c

0800b36c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800b36c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b36e:	b08f      	sub	sp, #60	; 0x3c
 800b370:	af0a      	add	r7, sp, #40	; 0x28
 800b372:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d101      	bne.n	800b37e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800b37a:	2301      	movs	r3, #1
 800b37c:	e10f      	b.n	800b59e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800b38a:	b2db      	uxtb	r3, r3
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d106      	bne.n	800b39e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2200      	movs	r2, #0
 800b394:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f009 f9d9 	bl	8014750 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2203      	movs	r2, #3
 800b3a2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800b3a6:	68bb      	ldr	r3, [r7, #8]
 800b3a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d102      	bne.n	800b3b8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	4618      	mov	r0, r3
 800b3be:	f003 fb02 	bl	800e9c6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	603b      	str	r3, [r7, #0]
 800b3c8:	687e      	ldr	r6, [r7, #4]
 800b3ca:	466d      	mov	r5, sp
 800b3cc:	f106 0410 	add.w	r4, r6, #16
 800b3d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b3d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b3d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b3d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b3d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b3dc:	e885 0003 	stmia.w	r5, {r0, r1}
 800b3e0:	1d33      	adds	r3, r6, #4
 800b3e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b3e4:	6838      	ldr	r0, [r7, #0]
 800b3e6:	f003 f9d9 	bl	800e79c <USB_CoreInit>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d005      	beq.n	800b3fc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2202      	movs	r2, #2
 800b3f4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	e0d0      	b.n	800b59e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	2100      	movs	r1, #0
 800b402:	4618      	mov	r0, r3
 800b404:	f003 faf0 	bl	800e9e8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b408:	2300      	movs	r3, #0
 800b40a:	73fb      	strb	r3, [r7, #15]
 800b40c:	e04a      	b.n	800b4a4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800b40e:	7bfa      	ldrb	r2, [r7, #15]
 800b410:	6879      	ldr	r1, [r7, #4]
 800b412:	4613      	mov	r3, r2
 800b414:	00db      	lsls	r3, r3, #3
 800b416:	1a9b      	subs	r3, r3, r2
 800b418:	009b      	lsls	r3, r3, #2
 800b41a:	440b      	add	r3, r1
 800b41c:	333d      	adds	r3, #61	; 0x3d
 800b41e:	2201      	movs	r2, #1
 800b420:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800b422:	7bfa      	ldrb	r2, [r7, #15]
 800b424:	6879      	ldr	r1, [r7, #4]
 800b426:	4613      	mov	r3, r2
 800b428:	00db      	lsls	r3, r3, #3
 800b42a:	1a9b      	subs	r3, r3, r2
 800b42c:	009b      	lsls	r3, r3, #2
 800b42e:	440b      	add	r3, r1
 800b430:	333c      	adds	r3, #60	; 0x3c
 800b432:	7bfa      	ldrb	r2, [r7, #15]
 800b434:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800b436:	7bfa      	ldrb	r2, [r7, #15]
 800b438:	7bfb      	ldrb	r3, [r7, #15]
 800b43a:	b298      	uxth	r0, r3
 800b43c:	6879      	ldr	r1, [r7, #4]
 800b43e:	4613      	mov	r3, r2
 800b440:	00db      	lsls	r3, r3, #3
 800b442:	1a9b      	subs	r3, r3, r2
 800b444:	009b      	lsls	r3, r3, #2
 800b446:	440b      	add	r3, r1
 800b448:	3342      	adds	r3, #66	; 0x42
 800b44a:	4602      	mov	r2, r0
 800b44c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b44e:	7bfa      	ldrb	r2, [r7, #15]
 800b450:	6879      	ldr	r1, [r7, #4]
 800b452:	4613      	mov	r3, r2
 800b454:	00db      	lsls	r3, r3, #3
 800b456:	1a9b      	subs	r3, r3, r2
 800b458:	009b      	lsls	r3, r3, #2
 800b45a:	440b      	add	r3, r1
 800b45c:	333f      	adds	r3, #63	; 0x3f
 800b45e:	2200      	movs	r2, #0
 800b460:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800b462:	7bfa      	ldrb	r2, [r7, #15]
 800b464:	6879      	ldr	r1, [r7, #4]
 800b466:	4613      	mov	r3, r2
 800b468:	00db      	lsls	r3, r3, #3
 800b46a:	1a9b      	subs	r3, r3, r2
 800b46c:	009b      	lsls	r3, r3, #2
 800b46e:	440b      	add	r3, r1
 800b470:	3344      	adds	r3, #68	; 0x44
 800b472:	2200      	movs	r2, #0
 800b474:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800b476:	7bfa      	ldrb	r2, [r7, #15]
 800b478:	6879      	ldr	r1, [r7, #4]
 800b47a:	4613      	mov	r3, r2
 800b47c:	00db      	lsls	r3, r3, #3
 800b47e:	1a9b      	subs	r3, r3, r2
 800b480:	009b      	lsls	r3, r3, #2
 800b482:	440b      	add	r3, r1
 800b484:	3348      	adds	r3, #72	; 0x48
 800b486:	2200      	movs	r2, #0
 800b488:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800b48a:	7bfa      	ldrb	r2, [r7, #15]
 800b48c:	6879      	ldr	r1, [r7, #4]
 800b48e:	4613      	mov	r3, r2
 800b490:	00db      	lsls	r3, r3, #3
 800b492:	1a9b      	subs	r3, r3, r2
 800b494:	009b      	lsls	r3, r3, #2
 800b496:	440b      	add	r3, r1
 800b498:	3350      	adds	r3, #80	; 0x50
 800b49a:	2200      	movs	r2, #0
 800b49c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b49e:	7bfb      	ldrb	r3, [r7, #15]
 800b4a0:	3301      	adds	r3, #1
 800b4a2:	73fb      	strb	r3, [r7, #15]
 800b4a4:	7bfa      	ldrb	r2, [r7, #15]
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	685b      	ldr	r3, [r3, #4]
 800b4aa:	429a      	cmp	r2, r3
 800b4ac:	d3af      	bcc.n	800b40e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	73fb      	strb	r3, [r7, #15]
 800b4b2:	e044      	b.n	800b53e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800b4b4:	7bfa      	ldrb	r2, [r7, #15]
 800b4b6:	6879      	ldr	r1, [r7, #4]
 800b4b8:	4613      	mov	r3, r2
 800b4ba:	00db      	lsls	r3, r3, #3
 800b4bc:	1a9b      	subs	r3, r3, r2
 800b4be:	009b      	lsls	r3, r3, #2
 800b4c0:	440b      	add	r3, r1
 800b4c2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800b4ca:	7bfa      	ldrb	r2, [r7, #15]
 800b4cc:	6879      	ldr	r1, [r7, #4]
 800b4ce:	4613      	mov	r3, r2
 800b4d0:	00db      	lsls	r3, r3, #3
 800b4d2:	1a9b      	subs	r3, r3, r2
 800b4d4:	009b      	lsls	r3, r3, #2
 800b4d6:	440b      	add	r3, r1
 800b4d8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800b4dc:	7bfa      	ldrb	r2, [r7, #15]
 800b4de:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800b4e0:	7bfa      	ldrb	r2, [r7, #15]
 800b4e2:	6879      	ldr	r1, [r7, #4]
 800b4e4:	4613      	mov	r3, r2
 800b4e6:	00db      	lsls	r3, r3, #3
 800b4e8:	1a9b      	subs	r3, r3, r2
 800b4ea:	009b      	lsls	r3, r3, #2
 800b4ec:	440b      	add	r3, r1
 800b4ee:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800b4f6:	7bfa      	ldrb	r2, [r7, #15]
 800b4f8:	6879      	ldr	r1, [r7, #4]
 800b4fa:	4613      	mov	r3, r2
 800b4fc:	00db      	lsls	r3, r3, #3
 800b4fe:	1a9b      	subs	r3, r3, r2
 800b500:	009b      	lsls	r3, r3, #2
 800b502:	440b      	add	r3, r1
 800b504:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800b508:	2200      	movs	r2, #0
 800b50a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800b50c:	7bfa      	ldrb	r2, [r7, #15]
 800b50e:	6879      	ldr	r1, [r7, #4]
 800b510:	4613      	mov	r3, r2
 800b512:	00db      	lsls	r3, r3, #3
 800b514:	1a9b      	subs	r3, r3, r2
 800b516:	009b      	lsls	r3, r3, #2
 800b518:	440b      	add	r3, r1
 800b51a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b51e:	2200      	movs	r2, #0
 800b520:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800b522:	7bfa      	ldrb	r2, [r7, #15]
 800b524:	6879      	ldr	r1, [r7, #4]
 800b526:	4613      	mov	r3, r2
 800b528:	00db      	lsls	r3, r3, #3
 800b52a:	1a9b      	subs	r3, r3, r2
 800b52c:	009b      	lsls	r3, r3, #2
 800b52e:	440b      	add	r3, r1
 800b530:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800b534:	2200      	movs	r2, #0
 800b536:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b538:	7bfb      	ldrb	r3, [r7, #15]
 800b53a:	3301      	adds	r3, #1
 800b53c:	73fb      	strb	r3, [r7, #15]
 800b53e:	7bfa      	ldrb	r2, [r7, #15]
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	685b      	ldr	r3, [r3, #4]
 800b544:	429a      	cmp	r2, r3
 800b546:	d3b5      	bcc.n	800b4b4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	603b      	str	r3, [r7, #0]
 800b54e:	687e      	ldr	r6, [r7, #4]
 800b550:	466d      	mov	r5, sp
 800b552:	f106 0410 	add.w	r4, r6, #16
 800b556:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b558:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b55a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b55c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b55e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b562:	e885 0003 	stmia.w	r5, {r0, r1}
 800b566:	1d33      	adds	r3, r6, #4
 800b568:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b56a:	6838      	ldr	r0, [r7, #0]
 800b56c:	f003 fa66 	bl	800ea3c <USB_DevInit>
 800b570:	4603      	mov	r3, r0
 800b572:	2b00      	cmp	r3, #0
 800b574:	d005      	beq.n	800b582 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2202      	movs	r2, #2
 800b57a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800b57e:	2301      	movs	r3, #1
 800b580:	e00d      	b.n	800b59e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	2200      	movs	r2, #0
 800b586:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	2201      	movs	r2, #1
 800b58e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	4618      	mov	r0, r3
 800b598:	f004 faae 	bl	800faf8 <USB_DevDisconnect>

  return HAL_OK;
 800b59c:	2300      	movs	r3, #0
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	3714      	adds	r7, #20
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b5a6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800b5a6:	b580      	push	{r7, lr}
 800b5a8:	b084      	sub	sp, #16
 800b5aa:	af00      	add	r7, sp, #0
 800b5ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b5ba:	2b01      	cmp	r3, #1
 800b5bc:	d101      	bne.n	800b5c2 <HAL_PCD_Start+0x1c>
 800b5be:	2302      	movs	r3, #2
 800b5c0:	e020      	b.n	800b604 <HAL_PCD_Start+0x5e>
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2201      	movs	r2, #1
 800b5c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5ce:	2b01      	cmp	r3, #1
 800b5d0:	d109      	bne.n	800b5e6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800b5d6:	2b01      	cmp	r3, #1
 800b5d8:	d005      	beq.n	800b5e6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f003 f9da 	bl	800e9a4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	f004 fa5e 	bl	800fab6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800b602:	2300      	movs	r3, #0
}
 800b604:	4618      	mov	r0, r3
 800b606:	3710      	adds	r7, #16
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}

0800b60c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800b60c:	b590      	push	{r4, r7, lr}
 800b60e:	b08d      	sub	sp, #52	; 0x34
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b61a:	6a3b      	ldr	r3, [r7, #32]
 800b61c:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	4618      	mov	r0, r3
 800b624:	f004 fb1c 	bl	800fc60 <USB_GetMode>
 800b628:	4603      	mov	r3, r0
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	f040 839d 	bne.w	800bd6a <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	4618      	mov	r0, r3
 800b636:	f004 fa80 	bl	800fb3a <USB_ReadInterrupts>
 800b63a:	4603      	mov	r3, r0
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	f000 8393 	beq.w	800bd68 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	4618      	mov	r0, r3
 800b648:	f004 fa77 	bl	800fb3a <USB_ReadInterrupts>
 800b64c:	4603      	mov	r3, r0
 800b64e:	f003 0302 	and.w	r3, r3, #2
 800b652:	2b02      	cmp	r3, #2
 800b654:	d107      	bne.n	800b666 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	695a      	ldr	r2, [r3, #20]
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	f002 0202 	and.w	r2, r2, #2
 800b664:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	4618      	mov	r0, r3
 800b66c:	f004 fa65 	bl	800fb3a <USB_ReadInterrupts>
 800b670:	4603      	mov	r3, r0
 800b672:	f003 0310 	and.w	r3, r3, #16
 800b676:	2b10      	cmp	r3, #16
 800b678:	d161      	bne.n	800b73e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	699a      	ldr	r2, [r3, #24]
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	f022 0210 	bic.w	r2, r2, #16
 800b688:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800b68a:	6a3b      	ldr	r3, [r7, #32]
 800b68c:	6a1b      	ldr	r3, [r3, #32]
 800b68e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800b690:	69bb      	ldr	r3, [r7, #24]
 800b692:	f003 020f 	and.w	r2, r3, #15
 800b696:	4613      	mov	r3, r2
 800b698:	00db      	lsls	r3, r3, #3
 800b69a:	1a9b      	subs	r3, r3, r2
 800b69c:	009b      	lsls	r3, r3, #2
 800b69e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b6a2:	687a      	ldr	r2, [r7, #4]
 800b6a4:	4413      	add	r3, r2
 800b6a6:	3304      	adds	r3, #4
 800b6a8:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800b6aa:	69bb      	ldr	r3, [r7, #24]
 800b6ac:	0c5b      	lsrs	r3, r3, #17
 800b6ae:	f003 030f 	and.w	r3, r3, #15
 800b6b2:	2b02      	cmp	r3, #2
 800b6b4:	d124      	bne.n	800b700 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800b6b6:	69ba      	ldr	r2, [r7, #24]
 800b6b8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800b6bc:	4013      	ands	r3, r2
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d035      	beq.n	800b72e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800b6c6:	69bb      	ldr	r3, [r7, #24]
 800b6c8:	091b      	lsrs	r3, r3, #4
 800b6ca:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800b6cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b6d0:	b29b      	uxth	r3, r3
 800b6d2:	461a      	mov	r2, r3
 800b6d4:	6a38      	ldr	r0, [r7, #32]
 800b6d6:	f004 f8cb 	bl	800f870 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b6da:	697b      	ldr	r3, [r7, #20]
 800b6dc:	68da      	ldr	r2, [r3, #12]
 800b6de:	69bb      	ldr	r3, [r7, #24]
 800b6e0:	091b      	lsrs	r3, r3, #4
 800b6e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b6e6:	441a      	add	r2, r3
 800b6e8:	697b      	ldr	r3, [r7, #20]
 800b6ea:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b6ec:	697b      	ldr	r3, [r7, #20]
 800b6ee:	699a      	ldr	r2, [r3, #24]
 800b6f0:	69bb      	ldr	r3, [r7, #24]
 800b6f2:	091b      	lsrs	r3, r3, #4
 800b6f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b6f8:	441a      	add	r2, r3
 800b6fa:	697b      	ldr	r3, [r7, #20]
 800b6fc:	619a      	str	r2, [r3, #24]
 800b6fe:	e016      	b.n	800b72e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800b700:	69bb      	ldr	r3, [r7, #24]
 800b702:	0c5b      	lsrs	r3, r3, #17
 800b704:	f003 030f 	and.w	r3, r3, #15
 800b708:	2b06      	cmp	r3, #6
 800b70a:	d110      	bne.n	800b72e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b712:	2208      	movs	r2, #8
 800b714:	4619      	mov	r1, r3
 800b716:	6a38      	ldr	r0, [r7, #32]
 800b718:	f004 f8aa 	bl	800f870 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b71c:	697b      	ldr	r3, [r7, #20]
 800b71e:	699a      	ldr	r2, [r3, #24]
 800b720:	69bb      	ldr	r3, [r7, #24]
 800b722:	091b      	lsrs	r3, r3, #4
 800b724:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b728:	441a      	add	r2, r3
 800b72a:	697b      	ldr	r3, [r7, #20]
 800b72c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	699a      	ldr	r2, [r3, #24]
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	f042 0210 	orr.w	r2, r2, #16
 800b73c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	4618      	mov	r0, r3
 800b744:	f004 f9f9 	bl	800fb3a <USB_ReadInterrupts>
 800b748:	4603      	mov	r3, r0
 800b74a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b74e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b752:	d16e      	bne.n	800b832 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800b754:	2300      	movs	r3, #0
 800b756:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	4618      	mov	r0, r3
 800b75e:	f004 f9ff 	bl	800fb60 <USB_ReadDevAllOutEpInterrupt>
 800b762:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800b764:	e062      	b.n	800b82c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800b766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b768:	f003 0301 	and.w	r3, r3, #1
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d057      	beq.n	800b820 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b776:	b2d2      	uxtb	r2, r2
 800b778:	4611      	mov	r1, r2
 800b77a:	4618      	mov	r0, r3
 800b77c:	f004 fa24 	bl	800fbc8 <USB_ReadDevOutEPInterrupt>
 800b780:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800b782:	693b      	ldr	r3, [r7, #16]
 800b784:	f003 0301 	and.w	r3, r3, #1
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d00c      	beq.n	800b7a6 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800b78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b78e:	015a      	lsls	r2, r3, #5
 800b790:	69fb      	ldr	r3, [r7, #28]
 800b792:	4413      	add	r3, r2
 800b794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b798:	461a      	mov	r2, r3
 800b79a:	2301      	movs	r3, #1
 800b79c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800b79e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f000 fdb1 	bl	800c308 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800b7a6:	693b      	ldr	r3, [r7, #16]
 800b7a8:	f003 0308 	and.w	r3, r3, #8
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d00c      	beq.n	800b7ca <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800b7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7b2:	015a      	lsls	r2, r3, #5
 800b7b4:	69fb      	ldr	r3, [r7, #28]
 800b7b6:	4413      	add	r3, r2
 800b7b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7bc:	461a      	mov	r2, r3
 800b7be:	2308      	movs	r3, #8
 800b7c0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800b7c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	f000 feab 	bl	800c520 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800b7ca:	693b      	ldr	r3, [r7, #16]
 800b7cc:	f003 0310 	and.w	r3, r3, #16
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d008      	beq.n	800b7e6 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800b7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7d6:	015a      	lsls	r2, r3, #5
 800b7d8:	69fb      	ldr	r3, [r7, #28]
 800b7da:	4413      	add	r3, r2
 800b7dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7e0:	461a      	mov	r2, r3
 800b7e2:	2310      	movs	r3, #16
 800b7e4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b7e6:	693b      	ldr	r3, [r7, #16]
 800b7e8:	f003 0320 	and.w	r3, r3, #32
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d008      	beq.n	800b802 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f2:	015a      	lsls	r2, r3, #5
 800b7f4:	69fb      	ldr	r3, [r7, #28]
 800b7f6:	4413      	add	r3, r2
 800b7f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7fc:	461a      	mov	r2, r3
 800b7fe:	2320      	movs	r3, #32
 800b800:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800b802:	693b      	ldr	r3, [r7, #16]
 800b804:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d009      	beq.n	800b820 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800b80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b80e:	015a      	lsls	r2, r3, #5
 800b810:	69fb      	ldr	r3, [r7, #28]
 800b812:	4413      	add	r3, r2
 800b814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b818:	461a      	mov	r2, r3
 800b81a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b81e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800b820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b822:	3301      	adds	r3, #1
 800b824:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800b826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b828:	085b      	lsrs	r3, r3, #1
 800b82a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800b82c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d199      	bne.n	800b766 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	4618      	mov	r0, r3
 800b838:	f004 f97f 	bl	800fb3a <USB_ReadInterrupts>
 800b83c:	4603      	mov	r3, r0
 800b83e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b842:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b846:	f040 80c0 	bne.w	800b9ca <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	4618      	mov	r0, r3
 800b850:	f004 f9a0 	bl	800fb94 <USB_ReadDevAllInEpInterrupt>
 800b854:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800b856:	2300      	movs	r3, #0
 800b858:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800b85a:	e0b2      	b.n	800b9c2 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800b85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b85e:	f003 0301 	and.w	r3, r3, #1
 800b862:	2b00      	cmp	r3, #0
 800b864:	f000 80a7 	beq.w	800b9b6 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b86e:	b2d2      	uxtb	r2, r2
 800b870:	4611      	mov	r1, r2
 800b872:	4618      	mov	r0, r3
 800b874:	f004 f9c6 	bl	800fc04 <USB_ReadDevInEPInterrupt>
 800b878:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800b87a:	693b      	ldr	r3, [r7, #16]
 800b87c:	f003 0301 	and.w	r3, r3, #1
 800b880:	2b00      	cmp	r3, #0
 800b882:	d057      	beq.n	800b934 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b886:	f003 030f 	and.w	r3, r3, #15
 800b88a:	2201      	movs	r2, #1
 800b88c:	fa02 f303 	lsl.w	r3, r2, r3
 800b890:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b892:	69fb      	ldr	r3, [r7, #28]
 800b894:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b898:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	43db      	mvns	r3, r3
 800b89e:	69f9      	ldr	r1, [r7, #28]
 800b8a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b8a4:	4013      	ands	r3, r2
 800b8a6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800b8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8aa:	015a      	lsls	r2, r3, #5
 800b8ac:	69fb      	ldr	r3, [r7, #28]
 800b8ae:	4413      	add	r3, r2
 800b8b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8b4:	461a      	mov	r2, r3
 800b8b6:	2301      	movs	r3, #1
 800b8b8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	691b      	ldr	r3, [r3, #16]
 800b8be:	2b01      	cmp	r3, #1
 800b8c0:	d132      	bne.n	800b928 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800b8c2:	6879      	ldr	r1, [r7, #4]
 800b8c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8c6:	4613      	mov	r3, r2
 800b8c8:	00db      	lsls	r3, r3, #3
 800b8ca:	1a9b      	subs	r3, r3, r2
 800b8cc:	009b      	lsls	r3, r3, #2
 800b8ce:	440b      	add	r3, r1
 800b8d0:	3348      	adds	r3, #72	; 0x48
 800b8d2:	6819      	ldr	r1, [r3, #0]
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8d8:	4613      	mov	r3, r2
 800b8da:	00db      	lsls	r3, r3, #3
 800b8dc:	1a9b      	subs	r3, r3, r2
 800b8de:	009b      	lsls	r3, r3, #2
 800b8e0:	4403      	add	r3, r0
 800b8e2:	3344      	adds	r3, #68	; 0x44
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	4419      	add	r1, r3
 800b8e8:	6878      	ldr	r0, [r7, #4]
 800b8ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8ec:	4613      	mov	r3, r2
 800b8ee:	00db      	lsls	r3, r3, #3
 800b8f0:	1a9b      	subs	r3, r3, r2
 800b8f2:	009b      	lsls	r3, r3, #2
 800b8f4:	4403      	add	r3, r0
 800b8f6:	3348      	adds	r3, #72	; 0x48
 800b8f8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800b8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d113      	bne.n	800b928 <HAL_PCD_IRQHandler+0x31c>
 800b900:	6879      	ldr	r1, [r7, #4]
 800b902:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b904:	4613      	mov	r3, r2
 800b906:	00db      	lsls	r3, r3, #3
 800b908:	1a9b      	subs	r3, r3, r2
 800b90a:	009b      	lsls	r3, r3, #2
 800b90c:	440b      	add	r3, r1
 800b90e:	3350      	adds	r3, #80	; 0x50
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d108      	bne.n	800b928 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6818      	ldr	r0, [r3, #0]
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b920:	461a      	mov	r2, r3
 800b922:	2101      	movs	r1, #1
 800b924:	f004 f9ce 	bl	800fcc4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800b928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b92a:	b2db      	uxtb	r3, r3
 800b92c:	4619      	mov	r1, r3
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f008 ff8f 	bl	8014852 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800b934:	693b      	ldr	r3, [r7, #16]
 800b936:	f003 0308 	and.w	r3, r3, #8
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d008      	beq.n	800b950 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800b93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b940:	015a      	lsls	r2, r3, #5
 800b942:	69fb      	ldr	r3, [r7, #28]
 800b944:	4413      	add	r3, r2
 800b946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b94a:	461a      	mov	r2, r3
 800b94c:	2308      	movs	r3, #8
 800b94e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800b950:	693b      	ldr	r3, [r7, #16]
 800b952:	f003 0310 	and.w	r3, r3, #16
 800b956:	2b00      	cmp	r3, #0
 800b958:	d008      	beq.n	800b96c <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800b95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b95c:	015a      	lsls	r2, r3, #5
 800b95e:	69fb      	ldr	r3, [r7, #28]
 800b960:	4413      	add	r3, r2
 800b962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b966:	461a      	mov	r2, r3
 800b968:	2310      	movs	r3, #16
 800b96a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800b96c:	693b      	ldr	r3, [r7, #16]
 800b96e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b972:	2b00      	cmp	r3, #0
 800b974:	d008      	beq.n	800b988 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800b976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b978:	015a      	lsls	r2, r3, #5
 800b97a:	69fb      	ldr	r3, [r7, #28]
 800b97c:	4413      	add	r3, r2
 800b97e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b982:	461a      	mov	r2, r3
 800b984:	2340      	movs	r3, #64	; 0x40
 800b986:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800b988:	693b      	ldr	r3, [r7, #16]
 800b98a:	f003 0302 	and.w	r3, r3, #2
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d008      	beq.n	800b9a4 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800b992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b994:	015a      	lsls	r2, r3, #5
 800b996:	69fb      	ldr	r3, [r7, #28]
 800b998:	4413      	add	r3, r2
 800b99a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b99e:	461a      	mov	r2, r3
 800b9a0:	2302      	movs	r3, #2
 800b9a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800b9a4:	693b      	ldr	r3, [r7, #16]
 800b9a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d003      	beq.n	800b9b6 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800b9ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b9b0:	6878      	ldr	r0, [r7, #4]
 800b9b2:	f000 fc1b 	bl	800c1ec <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800b9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b8:	3301      	adds	r3, #1
 800b9ba:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800b9bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9be:	085b      	lsrs	r3, r3, #1
 800b9c0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800b9c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	f47f af49 	bne.w	800b85c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f004 f8b3 	bl	800fb3a <USB_ReadInterrupts>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b9da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b9de:	d122      	bne.n	800ba26 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b9e0:	69fb      	ldr	r3, [r7, #28]
 800b9e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9e6:	685b      	ldr	r3, [r3, #4]
 800b9e8:	69fa      	ldr	r2, [r7, #28]
 800b9ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b9ee:	f023 0301 	bic.w	r3, r3, #1
 800b9f2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800b9fa:	2b01      	cmp	r3, #1
 800b9fc:	d108      	bne.n	800ba10 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2200      	movs	r2, #0
 800ba02:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800ba06:	2100      	movs	r1, #0
 800ba08:	6878      	ldr	r0, [r7, #4]
 800ba0a:	f000 fe27 	bl	800c65c <HAL_PCDEx_LPM_Callback>
 800ba0e:	e002      	b.n	800ba16 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800ba10:	6878      	ldr	r0, [r7, #4]
 800ba12:	f008 ff95 	bl	8014940 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	695a      	ldr	r2, [r3, #20]
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800ba24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f004 f885 	bl	800fb3a <USB_ReadInterrupts>
 800ba30:	4603      	mov	r3, r0
 800ba32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ba36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ba3a:	d112      	bne.n	800ba62 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800ba3c:	69fb      	ldr	r3, [r7, #28]
 800ba3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba42:	689b      	ldr	r3, [r3, #8]
 800ba44:	f003 0301 	and.w	r3, r3, #1
 800ba48:	2b01      	cmp	r3, #1
 800ba4a:	d102      	bne.n	800ba52 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800ba4c:	6878      	ldr	r0, [r7, #4]
 800ba4e:	f008 ff51 	bl	80148f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	695a      	ldr	r2, [r3, #20]
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800ba60:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	4618      	mov	r0, r3
 800ba68:	f004 f867 	bl	800fb3a <USB_ReadInterrupts>
 800ba6c:	4603      	mov	r3, r0
 800ba6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ba72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba76:	f040 80c7 	bne.w	800bc08 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800ba7a:	69fb      	ldr	r3, [r7, #28]
 800ba7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba80:	685b      	ldr	r3, [r3, #4]
 800ba82:	69fa      	ldr	r2, [r7, #28]
 800ba84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ba88:	f023 0301 	bic.w	r3, r3, #1
 800ba8c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	2110      	movs	r1, #16
 800ba94:	4618      	mov	r0, r3
 800ba96:	f003 f935 	bl	800ed04 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ba9e:	e056      	b.n	800bb4e <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800baa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baa2:	015a      	lsls	r2, r3, #5
 800baa4:	69fb      	ldr	r3, [r7, #28]
 800baa6:	4413      	add	r3, r2
 800baa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800baac:	461a      	mov	r2, r3
 800baae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bab2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800bab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bab6:	015a      	lsls	r2, r3, #5
 800bab8:	69fb      	ldr	r3, [r7, #28]
 800baba:	4413      	add	r3, r2
 800babc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bac4:	0151      	lsls	r1, r2, #5
 800bac6:	69fa      	ldr	r2, [r7, #28]
 800bac8:	440a      	add	r2, r1
 800baca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bace:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bad2:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800bad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bad6:	015a      	lsls	r2, r3, #5
 800bad8:	69fb      	ldr	r3, [r7, #28]
 800bada:	4413      	add	r3, r2
 800badc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bae4:	0151      	lsls	r1, r2, #5
 800bae6:	69fa      	ldr	r2, [r7, #28]
 800bae8:	440a      	add	r2, r1
 800baea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800baee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800baf2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800baf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baf6:	015a      	lsls	r2, r3, #5
 800baf8:	69fb      	ldr	r3, [r7, #28]
 800bafa:	4413      	add	r3, r2
 800bafc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb00:	461a      	mov	r2, r3
 800bb02:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bb06:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800bb08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb0a:	015a      	lsls	r2, r3, #5
 800bb0c:	69fb      	ldr	r3, [r7, #28]
 800bb0e:	4413      	add	r3, r2
 800bb10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb18:	0151      	lsls	r1, r2, #5
 800bb1a:	69fa      	ldr	r2, [r7, #28]
 800bb1c:	440a      	add	r2, r1
 800bb1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bb26:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800bb28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb2a:	015a      	lsls	r2, r3, #5
 800bb2c:	69fb      	ldr	r3, [r7, #28]
 800bb2e:	4413      	add	r3, r2
 800bb30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb38:	0151      	lsls	r1, r2, #5
 800bb3a:	69fa      	ldr	r2, [r7, #28]
 800bb3c:	440a      	add	r2, r1
 800bb3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb42:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bb46:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bb48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb4a:	3301      	adds	r3, #1
 800bb4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	685b      	ldr	r3, [r3, #4]
 800bb52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb54:	429a      	cmp	r2, r3
 800bb56:	d3a3      	bcc.n	800baa0 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800bb58:	69fb      	ldr	r3, [r7, #28]
 800bb5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb5e:	69db      	ldr	r3, [r3, #28]
 800bb60:	69fa      	ldr	r2, [r7, #28]
 800bb62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb66:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800bb6a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d016      	beq.n	800bba2 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800bb74:	69fb      	ldr	r3, [r7, #28]
 800bb76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb7e:	69fa      	ldr	r2, [r7, #28]
 800bb80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb84:	f043 030b 	orr.w	r3, r3, #11
 800bb88:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800bb8c:	69fb      	ldr	r3, [r7, #28]
 800bb8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb94:	69fa      	ldr	r2, [r7, #28]
 800bb96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb9a:	f043 030b 	orr.w	r3, r3, #11
 800bb9e:	6453      	str	r3, [r2, #68]	; 0x44
 800bba0:	e015      	b.n	800bbce <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800bba2:	69fb      	ldr	r3, [r7, #28]
 800bba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bba8:	695b      	ldr	r3, [r3, #20]
 800bbaa:	69fa      	ldr	r2, [r7, #28]
 800bbac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bbb0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800bbb4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800bbb8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800bbba:	69fb      	ldr	r3, [r7, #28]
 800bbbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbc0:	691b      	ldr	r3, [r3, #16]
 800bbc2:	69fa      	ldr	r2, [r7, #28]
 800bbc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bbc8:	f043 030b 	orr.w	r3, r3, #11
 800bbcc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800bbce:	69fb      	ldr	r3, [r7, #28]
 800bbd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	69fa      	ldr	r2, [r7, #28]
 800bbd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bbdc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800bbe0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6818      	ldr	r0, [r3, #0]
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	691b      	ldr	r3, [r3, #16]
 800bbea:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800bbf2:	461a      	mov	r2, r3
 800bbf4:	f004 f866 	bl	800fcc4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	695a      	ldr	r2, [r3, #20]
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800bc06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	f003 ff94 	bl	800fb3a <USB_ReadInterrupts>
 800bc12:	4603      	mov	r3, r0
 800bc14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bc18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc1c:	d124      	bne.n	800bc68 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	4618      	mov	r0, r3
 800bc24:	f004 f82a 	bl	800fc7c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	f003 f8ca 	bl	800edc6 <USB_GetDevSpeed>
 800bc32:	4603      	mov	r3, r0
 800bc34:	461a      	mov	r2, r3
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681c      	ldr	r4, [r3, #0]
 800bc3e:	f001 f947 	bl	800ced0 <HAL_RCC_GetHCLKFreq>
 800bc42:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800bc48:	b2db      	uxtb	r3, r3
 800bc4a:	461a      	mov	r2, r3
 800bc4c:	4620      	mov	r0, r4
 800bc4e:	f002 fe07 	bl	800e860 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f008 fe25 	bl	80148a2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	695a      	ldr	r2, [r3, #20]
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800bc66:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	f003 ff64 	bl	800fb3a <USB_ReadInterrupts>
 800bc72:	4603      	mov	r3, r0
 800bc74:	f003 0308 	and.w	r3, r3, #8
 800bc78:	2b08      	cmp	r3, #8
 800bc7a:	d10a      	bne.n	800bc92 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	f008 fe02 	bl	8014886 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	695a      	ldr	r2, [r3, #20]
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	f002 0208 	and.w	r2, r2, #8
 800bc90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	4618      	mov	r0, r3
 800bc98:	f003 ff4f 	bl	800fb3a <USB_ReadInterrupts>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bca2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bca6:	d10f      	bne.n	800bcc8 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800bca8:	2300      	movs	r3, #0
 800bcaa:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800bcac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcae:	b2db      	uxtb	r3, r3
 800bcb0:	4619      	mov	r1, r3
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f008 fe64 	bl	8014980 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	695a      	ldr	r2, [r3, #20]
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800bcc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	4618      	mov	r0, r3
 800bcce:	f003 ff34 	bl	800fb3a <USB_ReadInterrupts>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bcd8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bcdc:	d10f      	bne.n	800bcfe <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800bcde:	2300      	movs	r3, #0
 800bce0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800bce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bce4:	b2db      	uxtb	r3, r3
 800bce6:	4619      	mov	r1, r3
 800bce8:	6878      	ldr	r0, [r7, #4]
 800bcea:	f008 fe37 	bl	801495c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	695a      	ldr	r2, [r3, #20]
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800bcfc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	4618      	mov	r0, r3
 800bd04:	f003 ff19 	bl	800fb3a <USB_ReadInterrupts>
 800bd08:	4603      	mov	r3, r0
 800bd0a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bd0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd12:	d10a      	bne.n	800bd2a <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800bd14:	6878      	ldr	r0, [r7, #4]
 800bd16:	f008 fe45 	bl	80149a4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	695a      	ldr	r2, [r3, #20]
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800bd28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	4618      	mov	r0, r3
 800bd30:	f003 ff03 	bl	800fb3a <USB_ReadInterrupts>
 800bd34:	4603      	mov	r3, r0
 800bd36:	f003 0304 	and.w	r3, r3, #4
 800bd3a:	2b04      	cmp	r3, #4
 800bd3c:	d115      	bne.n	800bd6a <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	685b      	ldr	r3, [r3, #4]
 800bd44:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800bd46:	69bb      	ldr	r3, [r7, #24]
 800bd48:	f003 0304 	and.w	r3, r3, #4
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d002      	beq.n	800bd56 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800bd50:	6878      	ldr	r0, [r7, #4]
 800bd52:	f008 fe35 	bl	80149c0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	6859      	ldr	r1, [r3, #4]
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	69ba      	ldr	r2, [r7, #24]
 800bd62:	430a      	orrs	r2, r1
 800bd64:	605a      	str	r2, [r3, #4]
 800bd66:	e000      	b.n	800bd6a <HAL_PCD_IRQHandler+0x75e>
      return;
 800bd68:	bf00      	nop
    }
  }
}
 800bd6a:	3734      	adds	r7, #52	; 0x34
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bd90      	pop	{r4, r7, pc}

0800bd70 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b082      	sub	sp, #8
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
 800bd78:	460b      	mov	r3, r1
 800bd7a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800bd82:	2b01      	cmp	r3, #1
 800bd84:	d101      	bne.n	800bd8a <HAL_PCD_SetAddress+0x1a>
 800bd86:	2302      	movs	r3, #2
 800bd88:	e013      	b.n	800bdb2 <HAL_PCD_SetAddress+0x42>
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	2201      	movs	r2, #1
 800bd8e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	78fa      	ldrb	r2, [r7, #3]
 800bd96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	78fa      	ldrb	r2, [r7, #3]
 800bda0:	4611      	mov	r1, r2
 800bda2:	4618      	mov	r0, r3
 800bda4:	f003 fe61 	bl	800fa6a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2200      	movs	r2, #0
 800bdac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800bdb0:	2300      	movs	r3, #0
}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	3708      	adds	r7, #8
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}

0800bdba <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800bdba:	b580      	push	{r7, lr}
 800bdbc:	b084      	sub	sp, #16
 800bdbe:	af00      	add	r7, sp, #0
 800bdc0:	6078      	str	r0, [r7, #4]
 800bdc2:	4608      	mov	r0, r1
 800bdc4:	4611      	mov	r1, r2
 800bdc6:	461a      	mov	r2, r3
 800bdc8:	4603      	mov	r3, r0
 800bdca:	70fb      	strb	r3, [r7, #3]
 800bdcc:	460b      	mov	r3, r1
 800bdce:	803b      	strh	r3, [r7, #0]
 800bdd0:	4613      	mov	r3, r2
 800bdd2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800bdd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	da0f      	bge.n	800be00 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bde0:	78fb      	ldrb	r3, [r7, #3]
 800bde2:	f003 020f 	and.w	r2, r3, #15
 800bde6:	4613      	mov	r3, r2
 800bde8:	00db      	lsls	r3, r3, #3
 800bdea:	1a9b      	subs	r3, r3, r2
 800bdec:	009b      	lsls	r3, r3, #2
 800bdee:	3338      	adds	r3, #56	; 0x38
 800bdf0:	687a      	ldr	r2, [r7, #4]
 800bdf2:	4413      	add	r3, r2
 800bdf4:	3304      	adds	r3, #4
 800bdf6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	2201      	movs	r2, #1
 800bdfc:	705a      	strb	r2, [r3, #1]
 800bdfe:	e00f      	b.n	800be20 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800be00:	78fb      	ldrb	r3, [r7, #3]
 800be02:	f003 020f 	and.w	r2, r3, #15
 800be06:	4613      	mov	r3, r2
 800be08:	00db      	lsls	r3, r3, #3
 800be0a:	1a9b      	subs	r3, r3, r2
 800be0c:	009b      	lsls	r3, r3, #2
 800be0e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800be12:	687a      	ldr	r2, [r7, #4]
 800be14:	4413      	add	r3, r2
 800be16:	3304      	adds	r3, #4
 800be18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	2200      	movs	r2, #0
 800be1e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800be20:	78fb      	ldrb	r3, [r7, #3]
 800be22:	f003 030f 	and.w	r3, r3, #15
 800be26:	b2da      	uxtb	r2, r3
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800be2c:	883a      	ldrh	r2, [r7, #0]
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	78ba      	ldrb	r2, [r7, #2]
 800be36:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	785b      	ldrb	r3, [r3, #1]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d004      	beq.n	800be4a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	781b      	ldrb	r3, [r3, #0]
 800be44:	b29a      	uxth	r2, r3
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800be4a:	78bb      	ldrb	r3, [r7, #2]
 800be4c:	2b02      	cmp	r3, #2
 800be4e:	d102      	bne.n	800be56 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	2200      	movs	r2, #0
 800be54:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800be5c:	2b01      	cmp	r3, #1
 800be5e:	d101      	bne.n	800be64 <HAL_PCD_EP_Open+0xaa>
 800be60:	2302      	movs	r3, #2
 800be62:	e00e      	b.n	800be82 <HAL_PCD_EP_Open+0xc8>
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2201      	movs	r2, #1
 800be68:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	68f9      	ldr	r1, [r7, #12]
 800be72:	4618      	mov	r0, r3
 800be74:	f002 ffcc 	bl	800ee10 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2200      	movs	r2, #0
 800be7c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800be80:	7afb      	ldrb	r3, [r7, #11]
}
 800be82:	4618      	mov	r0, r3
 800be84:	3710      	adds	r7, #16
 800be86:	46bd      	mov	sp, r7
 800be88:	bd80      	pop	{r7, pc}

0800be8a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800be8a:	b580      	push	{r7, lr}
 800be8c:	b084      	sub	sp, #16
 800be8e:	af00      	add	r7, sp, #0
 800be90:	6078      	str	r0, [r7, #4]
 800be92:	460b      	mov	r3, r1
 800be94:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800be96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	da0f      	bge.n	800bebe <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800be9e:	78fb      	ldrb	r3, [r7, #3]
 800bea0:	f003 020f 	and.w	r2, r3, #15
 800bea4:	4613      	mov	r3, r2
 800bea6:	00db      	lsls	r3, r3, #3
 800bea8:	1a9b      	subs	r3, r3, r2
 800beaa:	009b      	lsls	r3, r3, #2
 800beac:	3338      	adds	r3, #56	; 0x38
 800beae:	687a      	ldr	r2, [r7, #4]
 800beb0:	4413      	add	r3, r2
 800beb2:	3304      	adds	r3, #4
 800beb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	2201      	movs	r2, #1
 800beba:	705a      	strb	r2, [r3, #1]
 800bebc:	e00f      	b.n	800bede <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bebe:	78fb      	ldrb	r3, [r7, #3]
 800bec0:	f003 020f 	and.w	r2, r3, #15
 800bec4:	4613      	mov	r3, r2
 800bec6:	00db      	lsls	r3, r3, #3
 800bec8:	1a9b      	subs	r3, r3, r2
 800beca:	009b      	lsls	r3, r3, #2
 800becc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800bed0:	687a      	ldr	r2, [r7, #4]
 800bed2:	4413      	add	r3, r2
 800bed4:	3304      	adds	r3, #4
 800bed6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	2200      	movs	r2, #0
 800bedc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800bede:	78fb      	ldrb	r3, [r7, #3]
 800bee0:	f003 030f 	and.w	r3, r3, #15
 800bee4:	b2da      	uxtb	r2, r3
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800bef0:	2b01      	cmp	r3, #1
 800bef2:	d101      	bne.n	800bef8 <HAL_PCD_EP_Close+0x6e>
 800bef4:	2302      	movs	r3, #2
 800bef6:	e00e      	b.n	800bf16 <HAL_PCD_EP_Close+0x8c>
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2201      	movs	r2, #1
 800befc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	68f9      	ldr	r1, [r7, #12]
 800bf06:	4618      	mov	r0, r3
 800bf08:	f003 f80a 	bl	800ef20 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2200      	movs	r2, #0
 800bf10:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800bf14:	2300      	movs	r3, #0
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	3710      	adds	r7, #16
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}

0800bf1e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800bf1e:	b580      	push	{r7, lr}
 800bf20:	b086      	sub	sp, #24
 800bf22:	af00      	add	r7, sp, #0
 800bf24:	60f8      	str	r0, [r7, #12]
 800bf26:	607a      	str	r2, [r7, #4]
 800bf28:	603b      	str	r3, [r7, #0]
 800bf2a:	460b      	mov	r3, r1
 800bf2c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bf2e:	7afb      	ldrb	r3, [r7, #11]
 800bf30:	f003 020f 	and.w	r2, r3, #15
 800bf34:	4613      	mov	r3, r2
 800bf36:	00db      	lsls	r3, r3, #3
 800bf38:	1a9b      	subs	r3, r3, r2
 800bf3a:	009b      	lsls	r3, r3, #2
 800bf3c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800bf40:	68fa      	ldr	r2, [r7, #12]
 800bf42:	4413      	add	r3, r2
 800bf44:	3304      	adds	r3, #4
 800bf46:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800bf48:	697b      	ldr	r3, [r7, #20]
 800bf4a:	687a      	ldr	r2, [r7, #4]
 800bf4c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800bf4e:	697b      	ldr	r3, [r7, #20]
 800bf50:	683a      	ldr	r2, [r7, #0]
 800bf52:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800bf54:	697b      	ldr	r3, [r7, #20]
 800bf56:	2200      	movs	r2, #0
 800bf58:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800bf5a:	697b      	ldr	r3, [r7, #20]
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bf60:	7afb      	ldrb	r3, [r7, #11]
 800bf62:	f003 030f 	and.w	r3, r3, #15
 800bf66:	b2da      	uxtb	r2, r3
 800bf68:	697b      	ldr	r3, [r7, #20]
 800bf6a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	691b      	ldr	r3, [r3, #16]
 800bf70:	2b01      	cmp	r3, #1
 800bf72:	d102      	bne.n	800bf7a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800bf74:	687a      	ldr	r2, [r7, #4]
 800bf76:	697b      	ldr	r3, [r7, #20]
 800bf78:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800bf7a:	7afb      	ldrb	r3, [r7, #11]
 800bf7c:	f003 030f 	and.w	r3, r3, #15
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d109      	bne.n	800bf98 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	6818      	ldr	r0, [r3, #0]
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	691b      	ldr	r3, [r3, #16]
 800bf8c:	b2db      	uxtb	r3, r3
 800bf8e:	461a      	mov	r2, r3
 800bf90:	6979      	ldr	r1, [r7, #20]
 800bf92:	f003 fae5 	bl	800f560 <USB_EP0StartXfer>
 800bf96:	e008      	b.n	800bfaa <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	6818      	ldr	r0, [r3, #0]
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	691b      	ldr	r3, [r3, #16]
 800bfa0:	b2db      	uxtb	r3, r3
 800bfa2:	461a      	mov	r2, r3
 800bfa4:	6979      	ldr	r1, [r7, #20]
 800bfa6:	f003 f897 	bl	800f0d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800bfaa:	2300      	movs	r3, #0
}
 800bfac:	4618      	mov	r0, r3
 800bfae:	3718      	adds	r7, #24
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bd80      	pop	{r7, pc}

0800bfb4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bfb4:	b480      	push	{r7}
 800bfb6:	b083      	sub	sp, #12
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
 800bfbc:	460b      	mov	r3, r1
 800bfbe:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800bfc0:	78fb      	ldrb	r3, [r7, #3]
 800bfc2:	f003 020f 	and.w	r2, r3, #15
 800bfc6:	6879      	ldr	r1, [r7, #4]
 800bfc8:	4613      	mov	r3, r2
 800bfca:	00db      	lsls	r3, r3, #3
 800bfcc:	1a9b      	subs	r3, r3, r2
 800bfce:	009b      	lsls	r3, r3, #2
 800bfd0:	440b      	add	r3, r1
 800bfd2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800bfd6:	681b      	ldr	r3, [r3, #0]
}
 800bfd8:	4618      	mov	r0, r3
 800bfda:	370c      	adds	r7, #12
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe2:	4770      	bx	lr

0800bfe4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b086      	sub	sp, #24
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	60f8      	str	r0, [r7, #12]
 800bfec:	607a      	str	r2, [r7, #4]
 800bfee:	603b      	str	r3, [r7, #0]
 800bff0:	460b      	mov	r3, r1
 800bff2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bff4:	7afb      	ldrb	r3, [r7, #11]
 800bff6:	f003 020f 	and.w	r2, r3, #15
 800bffa:	4613      	mov	r3, r2
 800bffc:	00db      	lsls	r3, r3, #3
 800bffe:	1a9b      	subs	r3, r3, r2
 800c000:	009b      	lsls	r3, r3, #2
 800c002:	3338      	adds	r3, #56	; 0x38
 800c004:	68fa      	ldr	r2, [r7, #12]
 800c006:	4413      	add	r3, r2
 800c008:	3304      	adds	r3, #4
 800c00a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c00c:	697b      	ldr	r3, [r7, #20]
 800c00e:	687a      	ldr	r2, [r7, #4]
 800c010:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800c012:	697b      	ldr	r3, [r7, #20]
 800c014:	683a      	ldr	r2, [r7, #0]
 800c016:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800c018:	697b      	ldr	r3, [r7, #20]
 800c01a:	2200      	movs	r2, #0
 800c01c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800c01e:	697b      	ldr	r3, [r7, #20]
 800c020:	2201      	movs	r2, #1
 800c022:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c024:	7afb      	ldrb	r3, [r7, #11]
 800c026:	f003 030f 	and.w	r3, r3, #15
 800c02a:	b2da      	uxtb	r2, r3
 800c02c:	697b      	ldr	r3, [r7, #20]
 800c02e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	691b      	ldr	r3, [r3, #16]
 800c034:	2b01      	cmp	r3, #1
 800c036:	d102      	bne.n	800c03e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800c038:	687a      	ldr	r2, [r7, #4]
 800c03a:	697b      	ldr	r3, [r7, #20]
 800c03c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800c03e:	7afb      	ldrb	r3, [r7, #11]
 800c040:	f003 030f 	and.w	r3, r3, #15
 800c044:	2b00      	cmp	r3, #0
 800c046:	d109      	bne.n	800c05c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	6818      	ldr	r0, [r3, #0]
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	691b      	ldr	r3, [r3, #16]
 800c050:	b2db      	uxtb	r3, r3
 800c052:	461a      	mov	r2, r3
 800c054:	6979      	ldr	r1, [r7, #20]
 800c056:	f003 fa83 	bl	800f560 <USB_EP0StartXfer>
 800c05a:	e008      	b.n	800c06e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	6818      	ldr	r0, [r3, #0]
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	691b      	ldr	r3, [r3, #16]
 800c064:	b2db      	uxtb	r3, r3
 800c066:	461a      	mov	r2, r3
 800c068:	6979      	ldr	r1, [r7, #20]
 800c06a:	f003 f835 	bl	800f0d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800c06e:	2300      	movs	r3, #0
}
 800c070:	4618      	mov	r0, r3
 800c072:	3718      	adds	r7, #24
 800c074:	46bd      	mov	sp, r7
 800c076:	bd80      	pop	{r7, pc}

0800c078 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b084      	sub	sp, #16
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
 800c080:	460b      	mov	r3, r1
 800c082:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800c084:	78fb      	ldrb	r3, [r7, #3]
 800c086:	f003 020f 	and.w	r2, r3, #15
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	685b      	ldr	r3, [r3, #4]
 800c08e:	429a      	cmp	r2, r3
 800c090:	d901      	bls.n	800c096 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800c092:	2301      	movs	r3, #1
 800c094:	e050      	b.n	800c138 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c096:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	da0f      	bge.n	800c0be <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c09e:	78fb      	ldrb	r3, [r7, #3]
 800c0a0:	f003 020f 	and.w	r2, r3, #15
 800c0a4:	4613      	mov	r3, r2
 800c0a6:	00db      	lsls	r3, r3, #3
 800c0a8:	1a9b      	subs	r3, r3, r2
 800c0aa:	009b      	lsls	r3, r3, #2
 800c0ac:	3338      	adds	r3, #56	; 0x38
 800c0ae:	687a      	ldr	r2, [r7, #4]
 800c0b0:	4413      	add	r3, r2
 800c0b2:	3304      	adds	r3, #4
 800c0b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	2201      	movs	r2, #1
 800c0ba:	705a      	strb	r2, [r3, #1]
 800c0bc:	e00d      	b.n	800c0da <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800c0be:	78fa      	ldrb	r2, [r7, #3]
 800c0c0:	4613      	mov	r3, r2
 800c0c2:	00db      	lsls	r3, r3, #3
 800c0c4:	1a9b      	subs	r3, r3, r2
 800c0c6:	009b      	lsls	r3, r3, #2
 800c0c8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c0cc:	687a      	ldr	r2, [r7, #4]
 800c0ce:	4413      	add	r3, r2
 800c0d0:	3304      	adds	r3, #4
 800c0d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	2201      	movs	r2, #1
 800c0de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c0e0:	78fb      	ldrb	r3, [r7, #3]
 800c0e2:	f003 030f 	and.w	r3, r3, #15
 800c0e6:	b2da      	uxtb	r2, r3
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800c0f2:	2b01      	cmp	r3, #1
 800c0f4:	d101      	bne.n	800c0fa <HAL_PCD_EP_SetStall+0x82>
 800c0f6:	2302      	movs	r3, #2
 800c0f8:	e01e      	b.n	800c138 <HAL_PCD_EP_SetStall+0xc0>
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	2201      	movs	r2, #1
 800c0fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	68f9      	ldr	r1, [r7, #12]
 800c108:	4618      	mov	r0, r3
 800c10a:	f003 fbda 	bl	800f8c2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800c10e:	78fb      	ldrb	r3, [r7, #3]
 800c110:	f003 030f 	and.w	r3, r3, #15
 800c114:	2b00      	cmp	r3, #0
 800c116:	d10a      	bne.n	800c12e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	6818      	ldr	r0, [r3, #0]
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	691b      	ldr	r3, [r3, #16]
 800c120:	b2d9      	uxtb	r1, r3
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c128:	461a      	mov	r2, r3
 800c12a:	f003 fdcb 	bl	800fcc4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	2200      	movs	r2, #0
 800c132:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800c136:	2300      	movs	r3, #0
}
 800c138:	4618      	mov	r0, r3
 800c13a:	3710      	adds	r7, #16
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}

0800c140 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b084      	sub	sp, #16
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
 800c148:	460b      	mov	r3, r1
 800c14a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800c14c:	78fb      	ldrb	r3, [r7, #3]
 800c14e:	f003 020f 	and.w	r2, r3, #15
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	685b      	ldr	r3, [r3, #4]
 800c156:	429a      	cmp	r2, r3
 800c158:	d901      	bls.n	800c15e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800c15a:	2301      	movs	r3, #1
 800c15c:	e042      	b.n	800c1e4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c15e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c162:	2b00      	cmp	r3, #0
 800c164:	da0f      	bge.n	800c186 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c166:	78fb      	ldrb	r3, [r7, #3]
 800c168:	f003 020f 	and.w	r2, r3, #15
 800c16c:	4613      	mov	r3, r2
 800c16e:	00db      	lsls	r3, r3, #3
 800c170:	1a9b      	subs	r3, r3, r2
 800c172:	009b      	lsls	r3, r3, #2
 800c174:	3338      	adds	r3, #56	; 0x38
 800c176:	687a      	ldr	r2, [r7, #4]
 800c178:	4413      	add	r3, r2
 800c17a:	3304      	adds	r3, #4
 800c17c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	2201      	movs	r2, #1
 800c182:	705a      	strb	r2, [r3, #1]
 800c184:	e00f      	b.n	800c1a6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c186:	78fb      	ldrb	r3, [r7, #3]
 800c188:	f003 020f 	and.w	r2, r3, #15
 800c18c:	4613      	mov	r3, r2
 800c18e:	00db      	lsls	r3, r3, #3
 800c190:	1a9b      	subs	r3, r3, r2
 800c192:	009b      	lsls	r3, r3, #2
 800c194:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c198:	687a      	ldr	r2, [r7, #4]
 800c19a:	4413      	add	r3, r2
 800c19c:	3304      	adds	r3, #4
 800c19e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c1ac:	78fb      	ldrb	r3, [r7, #3]
 800c1ae:	f003 030f 	and.w	r3, r3, #15
 800c1b2:	b2da      	uxtb	r2, r3
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800c1be:	2b01      	cmp	r3, #1
 800c1c0:	d101      	bne.n	800c1c6 <HAL_PCD_EP_ClrStall+0x86>
 800c1c2:	2302      	movs	r3, #2
 800c1c4:	e00e      	b.n	800c1e4 <HAL_PCD_EP_ClrStall+0xa4>
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	2201      	movs	r2, #1
 800c1ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	68f9      	ldr	r1, [r7, #12]
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f003 fbe2 	bl	800f99e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	2200      	movs	r2, #0
 800c1de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800c1e2:	2300      	movs	r3, #0
}
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	3710      	adds	r7, #16
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	bd80      	pop	{r7, pc}

0800c1ec <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b08a      	sub	sp, #40	; 0x28
 800c1f0:	af02      	add	r7, sp, #8
 800c1f2:	6078      	str	r0, [r7, #4]
 800c1f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1fc:	697b      	ldr	r3, [r7, #20]
 800c1fe:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800c200:	683a      	ldr	r2, [r7, #0]
 800c202:	4613      	mov	r3, r2
 800c204:	00db      	lsls	r3, r3, #3
 800c206:	1a9b      	subs	r3, r3, r2
 800c208:	009b      	lsls	r3, r3, #2
 800c20a:	3338      	adds	r3, #56	; 0x38
 800c20c:	687a      	ldr	r2, [r7, #4]
 800c20e:	4413      	add	r3, r2
 800c210:	3304      	adds	r3, #4
 800c212:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	699a      	ldr	r2, [r3, #24]
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	695b      	ldr	r3, [r3, #20]
 800c21c:	429a      	cmp	r2, r3
 800c21e:	d901      	bls.n	800c224 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800c220:	2301      	movs	r3, #1
 800c222:	e06c      	b.n	800c2fe <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	695a      	ldr	r2, [r3, #20]
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	699b      	ldr	r3, [r3, #24]
 800c22c:	1ad3      	subs	r3, r2, r3
 800c22e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	689b      	ldr	r3, [r3, #8]
 800c234:	69fa      	ldr	r2, [r7, #28]
 800c236:	429a      	cmp	r2, r3
 800c238:	d902      	bls.n	800c240 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	689b      	ldr	r3, [r3, #8]
 800c23e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800c240:	69fb      	ldr	r3, [r7, #28]
 800c242:	3303      	adds	r3, #3
 800c244:	089b      	lsrs	r3, r3, #2
 800c246:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c248:	e02b      	b.n	800c2a2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	695a      	ldr	r2, [r3, #20]
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	699b      	ldr	r3, [r3, #24]
 800c252:	1ad3      	subs	r3, r2, r3
 800c254:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	689b      	ldr	r3, [r3, #8]
 800c25a:	69fa      	ldr	r2, [r7, #28]
 800c25c:	429a      	cmp	r2, r3
 800c25e:	d902      	bls.n	800c266 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	689b      	ldr	r3, [r3, #8]
 800c264:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800c266:	69fb      	ldr	r3, [r7, #28]
 800c268:	3303      	adds	r3, #3
 800c26a:	089b      	lsrs	r3, r3, #2
 800c26c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	68d9      	ldr	r1, [r3, #12]
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	b2da      	uxtb	r2, r3
 800c276:	69fb      	ldr	r3, [r7, #28]
 800c278:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800c27e:	b2db      	uxtb	r3, r3
 800c280:	9300      	str	r3, [sp, #0]
 800c282:	4603      	mov	r3, r0
 800c284:	6978      	ldr	r0, [r7, #20]
 800c286:	f003 fabe 	bl	800f806 <USB_WritePacket>

    ep->xfer_buff  += len;
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	68da      	ldr	r2, [r3, #12]
 800c28e:	69fb      	ldr	r3, [r7, #28]
 800c290:	441a      	add	r2, r3
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	699a      	ldr	r2, [r3, #24]
 800c29a:	69fb      	ldr	r3, [r7, #28]
 800c29c:	441a      	add	r2, r3
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	015a      	lsls	r2, r3, #5
 800c2a6:	693b      	ldr	r3, [r7, #16]
 800c2a8:	4413      	add	r3, r2
 800c2aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2ae:	699b      	ldr	r3, [r3, #24]
 800c2b0:	b29b      	uxth	r3, r3
 800c2b2:	69ba      	ldr	r2, [r7, #24]
 800c2b4:	429a      	cmp	r2, r3
 800c2b6:	d809      	bhi.n	800c2cc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	699a      	ldr	r2, [r3, #24]
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c2c0:	429a      	cmp	r2, r3
 800c2c2:	d203      	bcs.n	800c2cc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	695b      	ldr	r3, [r3, #20]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d1be      	bne.n	800c24a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	695a      	ldr	r2, [r3, #20]
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	699b      	ldr	r3, [r3, #24]
 800c2d4:	429a      	cmp	r2, r3
 800c2d6:	d811      	bhi.n	800c2fc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	f003 030f 	and.w	r3, r3, #15
 800c2de:	2201      	movs	r2, #1
 800c2e0:	fa02 f303 	lsl.w	r3, r2, r3
 800c2e4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c2e6:	693b      	ldr	r3, [r7, #16]
 800c2e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c2ee:	68bb      	ldr	r3, [r7, #8]
 800c2f0:	43db      	mvns	r3, r3
 800c2f2:	6939      	ldr	r1, [r7, #16]
 800c2f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c2f8:	4013      	ands	r3, r2
 800c2fa:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800c2fc:	2300      	movs	r3, #0
}
 800c2fe:	4618      	mov	r0, r3
 800c300:	3720      	adds	r7, #32
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}
	...

0800c308 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b086      	sub	sp, #24
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
 800c310:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c318:	697b      	ldr	r3, [r7, #20]
 800c31a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c31c:	697b      	ldr	r3, [r7, #20]
 800c31e:	333c      	adds	r3, #60	; 0x3c
 800c320:	3304      	adds	r3, #4
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	015a      	lsls	r2, r3, #5
 800c32a:	693b      	ldr	r3, [r7, #16]
 800c32c:	4413      	add	r3, r2
 800c32e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c332:	689b      	ldr	r3, [r3, #8]
 800c334:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	691b      	ldr	r3, [r3, #16]
 800c33a:	2b01      	cmp	r3, #1
 800c33c:	f040 80a0 	bne.w	800c480 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800c340:	68bb      	ldr	r3, [r7, #8]
 800c342:	f003 0308 	and.w	r3, r3, #8
 800c346:	2b00      	cmp	r3, #0
 800c348:	d015      	beq.n	800c376 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	4a72      	ldr	r2, [pc, #456]	; (800c518 <PCD_EP_OutXfrComplete_int+0x210>)
 800c34e:	4293      	cmp	r3, r2
 800c350:	f240 80dd 	bls.w	800c50e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	f000 80d7 	beq.w	800c50e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c360:	683b      	ldr	r3, [r7, #0]
 800c362:	015a      	lsls	r2, r3, #5
 800c364:	693b      	ldr	r3, [r7, #16]
 800c366:	4413      	add	r3, r2
 800c368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c36c:	461a      	mov	r2, r3
 800c36e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c372:	6093      	str	r3, [r2, #8]
 800c374:	e0cb      	b.n	800c50e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800c376:	68bb      	ldr	r3, [r7, #8]
 800c378:	f003 0320 	and.w	r3, r3, #32
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d009      	beq.n	800c394 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	015a      	lsls	r2, r3, #5
 800c384:	693b      	ldr	r3, [r7, #16]
 800c386:	4413      	add	r3, r2
 800c388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c38c:	461a      	mov	r2, r3
 800c38e:	2320      	movs	r3, #32
 800c390:	6093      	str	r3, [r2, #8]
 800c392:	e0bc      	b.n	800c50e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	f040 80b7 	bne.w	800c50e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	4a5d      	ldr	r2, [pc, #372]	; (800c518 <PCD_EP_OutXfrComplete_int+0x210>)
 800c3a4:	4293      	cmp	r3, r2
 800c3a6:	d90f      	bls.n	800c3c8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d00a      	beq.n	800c3c8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	015a      	lsls	r2, r3, #5
 800c3b6:	693b      	ldr	r3, [r7, #16]
 800c3b8:	4413      	add	r3, r2
 800c3ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3be:	461a      	mov	r2, r3
 800c3c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c3c4:	6093      	str	r3, [r2, #8]
 800c3c6:	e0a2      	b.n	800c50e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800c3c8:	6879      	ldr	r1, [r7, #4]
 800c3ca:	683a      	ldr	r2, [r7, #0]
 800c3cc:	4613      	mov	r3, r2
 800c3ce:	00db      	lsls	r3, r3, #3
 800c3d0:	1a9b      	subs	r3, r3, r2
 800c3d2:	009b      	lsls	r3, r3, #2
 800c3d4:	440b      	add	r3, r1
 800c3d6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800c3da:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	0159      	lsls	r1, r3, #5
 800c3e0:	693b      	ldr	r3, [r7, #16]
 800c3e2:	440b      	add	r3, r1
 800c3e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3e8:	691b      	ldr	r3, [r3, #16]
 800c3ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800c3ee:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800c3f0:	6878      	ldr	r0, [r7, #4]
 800c3f2:	683a      	ldr	r2, [r7, #0]
 800c3f4:	4613      	mov	r3, r2
 800c3f6:	00db      	lsls	r3, r3, #3
 800c3f8:	1a9b      	subs	r3, r3, r2
 800c3fa:	009b      	lsls	r3, r3, #2
 800c3fc:	4403      	add	r3, r0
 800c3fe:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800c402:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800c404:	6879      	ldr	r1, [r7, #4]
 800c406:	683a      	ldr	r2, [r7, #0]
 800c408:	4613      	mov	r3, r2
 800c40a:	00db      	lsls	r3, r3, #3
 800c40c:	1a9b      	subs	r3, r3, r2
 800c40e:	009b      	lsls	r3, r3, #2
 800c410:	440b      	add	r3, r1
 800c412:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c416:	6819      	ldr	r1, [r3, #0]
 800c418:	6878      	ldr	r0, [r7, #4]
 800c41a:	683a      	ldr	r2, [r7, #0]
 800c41c:	4613      	mov	r3, r2
 800c41e:	00db      	lsls	r3, r3, #3
 800c420:	1a9b      	subs	r3, r3, r2
 800c422:	009b      	lsls	r3, r3, #2
 800c424:	4403      	add	r3, r0
 800c426:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	4419      	add	r1, r3
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	683a      	ldr	r2, [r7, #0]
 800c432:	4613      	mov	r3, r2
 800c434:	00db      	lsls	r3, r3, #3
 800c436:	1a9b      	subs	r3, r3, r2
 800c438:	009b      	lsls	r3, r3, #2
 800c43a:	4403      	add	r3, r0
 800c43c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c440:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d114      	bne.n	800c472 <PCD_EP_OutXfrComplete_int+0x16a>
 800c448:	6879      	ldr	r1, [r7, #4]
 800c44a:	683a      	ldr	r2, [r7, #0]
 800c44c:	4613      	mov	r3, r2
 800c44e:	00db      	lsls	r3, r3, #3
 800c450:	1a9b      	subs	r3, r3, r2
 800c452:	009b      	lsls	r3, r3, #2
 800c454:	440b      	add	r3, r1
 800c456:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d108      	bne.n	800c472 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	6818      	ldr	r0, [r3, #0]
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c46a:	461a      	mov	r2, r3
 800c46c:	2101      	movs	r1, #1
 800c46e:	f003 fc29 	bl	800fcc4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	b2db      	uxtb	r3, r3
 800c476:	4619      	mov	r1, r3
 800c478:	6878      	ldr	r0, [r7, #4]
 800c47a:	f008 f9cf 	bl	801481c <HAL_PCD_DataOutStageCallback>
 800c47e:	e046      	b.n	800c50e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	4a26      	ldr	r2, [pc, #152]	; (800c51c <PCD_EP_OutXfrComplete_int+0x214>)
 800c484:	4293      	cmp	r3, r2
 800c486:	d124      	bne.n	800c4d2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800c488:	68bb      	ldr	r3, [r7, #8]
 800c48a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d00a      	beq.n	800c4a8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	015a      	lsls	r2, r3, #5
 800c496:	693b      	ldr	r3, [r7, #16]
 800c498:	4413      	add	r3, r2
 800c49a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c49e:	461a      	mov	r2, r3
 800c4a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c4a4:	6093      	str	r3, [r2, #8]
 800c4a6:	e032      	b.n	800c50e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c4a8:	68bb      	ldr	r3, [r7, #8]
 800c4aa:	f003 0320 	and.w	r3, r3, #32
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d008      	beq.n	800c4c4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	015a      	lsls	r2, r3, #5
 800c4b6:	693b      	ldr	r3, [r7, #16]
 800c4b8:	4413      	add	r3, r2
 800c4ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4be:	461a      	mov	r2, r3
 800c4c0:	2320      	movs	r3, #32
 800c4c2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	b2db      	uxtb	r3, r3
 800c4c8:	4619      	mov	r1, r3
 800c4ca:	6878      	ldr	r0, [r7, #4]
 800c4cc:	f008 f9a6 	bl	801481c <HAL_PCD_DataOutStageCallback>
 800c4d0:	e01d      	b.n	800c50e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d114      	bne.n	800c502 <PCD_EP_OutXfrComplete_int+0x1fa>
 800c4d8:	6879      	ldr	r1, [r7, #4]
 800c4da:	683a      	ldr	r2, [r7, #0]
 800c4dc:	4613      	mov	r3, r2
 800c4de:	00db      	lsls	r3, r3, #3
 800c4e0:	1a9b      	subs	r3, r3, r2
 800c4e2:	009b      	lsls	r3, r3, #2
 800c4e4:	440b      	add	r3, r1
 800c4e6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d108      	bne.n	800c502 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	6818      	ldr	r0, [r3, #0]
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c4fa:	461a      	mov	r2, r3
 800c4fc:	2100      	movs	r1, #0
 800c4fe:	f003 fbe1 	bl	800fcc4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	b2db      	uxtb	r3, r3
 800c506:	4619      	mov	r1, r3
 800c508:	6878      	ldr	r0, [r7, #4]
 800c50a:	f008 f987 	bl	801481c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800c50e:	2300      	movs	r3, #0
}
 800c510:	4618      	mov	r0, r3
 800c512:	3718      	adds	r7, #24
 800c514:	46bd      	mov	sp, r7
 800c516:	bd80      	pop	{r7, pc}
 800c518:	4f54300a 	.word	0x4f54300a
 800c51c:	4f54310a 	.word	0x4f54310a

0800c520 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b086      	sub	sp, #24
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
 800c528:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c530:	697b      	ldr	r3, [r7, #20]
 800c532:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c534:	697b      	ldr	r3, [r7, #20]
 800c536:	333c      	adds	r3, #60	; 0x3c
 800c538:	3304      	adds	r3, #4
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	015a      	lsls	r2, r3, #5
 800c542:	693b      	ldr	r3, [r7, #16]
 800c544:	4413      	add	r3, r2
 800c546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c54a:	689b      	ldr	r3, [r3, #8]
 800c54c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	4a15      	ldr	r2, [pc, #84]	; (800c5a8 <PCD_EP_OutSetupPacket_int+0x88>)
 800c552:	4293      	cmp	r3, r2
 800c554:	d90e      	bls.n	800c574 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c556:	68bb      	ldr	r3, [r7, #8]
 800c558:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d009      	beq.n	800c574 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	015a      	lsls	r2, r3, #5
 800c564:	693b      	ldr	r3, [r7, #16]
 800c566:	4413      	add	r3, r2
 800c568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c56c:	461a      	mov	r2, r3
 800c56e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c572:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f008 f93f 	bl	80147f8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	4a0a      	ldr	r2, [pc, #40]	; (800c5a8 <PCD_EP_OutSetupPacket_int+0x88>)
 800c57e:	4293      	cmp	r3, r2
 800c580:	d90c      	bls.n	800c59c <PCD_EP_OutSetupPacket_int+0x7c>
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	691b      	ldr	r3, [r3, #16]
 800c586:	2b01      	cmp	r3, #1
 800c588:	d108      	bne.n	800c59c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	6818      	ldr	r0, [r3, #0]
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c594:	461a      	mov	r2, r3
 800c596:	2101      	movs	r1, #1
 800c598:	f003 fb94 	bl	800fcc4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800c59c:	2300      	movs	r3, #0
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	3718      	adds	r7, #24
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}
 800c5a6:	bf00      	nop
 800c5a8:	4f54300a 	.word	0x4f54300a

0800c5ac <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800c5ac:	b480      	push	{r7}
 800c5ae:	b085      	sub	sp, #20
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
 800c5b4:	460b      	mov	r3, r1
 800c5b6:	70fb      	strb	r3, [r7, #3]
 800c5b8:	4613      	mov	r3, r2
 800c5ba:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5c2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800c5c4:	78fb      	ldrb	r3, [r7, #3]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d107      	bne.n	800c5da <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800c5ca:	883b      	ldrh	r3, [r7, #0]
 800c5cc:	0419      	lsls	r1, r3, #16
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	68ba      	ldr	r2, [r7, #8]
 800c5d4:	430a      	orrs	r2, r1
 800c5d6:	629a      	str	r2, [r3, #40]	; 0x28
 800c5d8:	e028      	b.n	800c62c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5e0:	0c1b      	lsrs	r3, r3, #16
 800c5e2:	68ba      	ldr	r2, [r7, #8]
 800c5e4:	4413      	add	r3, r2
 800c5e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	73fb      	strb	r3, [r7, #15]
 800c5ec:	e00d      	b.n	800c60a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681a      	ldr	r2, [r3, #0]
 800c5f2:	7bfb      	ldrb	r3, [r7, #15]
 800c5f4:	3340      	adds	r3, #64	; 0x40
 800c5f6:	009b      	lsls	r3, r3, #2
 800c5f8:	4413      	add	r3, r2
 800c5fa:	685b      	ldr	r3, [r3, #4]
 800c5fc:	0c1b      	lsrs	r3, r3, #16
 800c5fe:	68ba      	ldr	r2, [r7, #8]
 800c600:	4413      	add	r3, r2
 800c602:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c604:	7bfb      	ldrb	r3, [r7, #15]
 800c606:	3301      	adds	r3, #1
 800c608:	73fb      	strb	r3, [r7, #15]
 800c60a:	7bfa      	ldrb	r2, [r7, #15]
 800c60c:	78fb      	ldrb	r3, [r7, #3]
 800c60e:	3b01      	subs	r3, #1
 800c610:	429a      	cmp	r2, r3
 800c612:	d3ec      	bcc.n	800c5ee <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800c614:	883b      	ldrh	r3, [r7, #0]
 800c616:	0418      	lsls	r0, r3, #16
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	6819      	ldr	r1, [r3, #0]
 800c61c:	78fb      	ldrb	r3, [r7, #3]
 800c61e:	3b01      	subs	r3, #1
 800c620:	68ba      	ldr	r2, [r7, #8]
 800c622:	4302      	orrs	r2, r0
 800c624:	3340      	adds	r3, #64	; 0x40
 800c626:	009b      	lsls	r3, r3, #2
 800c628:	440b      	add	r3, r1
 800c62a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800c62c:	2300      	movs	r3, #0
}
 800c62e:	4618      	mov	r0, r3
 800c630:	3714      	adds	r7, #20
 800c632:	46bd      	mov	sp, r7
 800c634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c638:	4770      	bx	lr

0800c63a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800c63a:	b480      	push	{r7}
 800c63c:	b083      	sub	sp, #12
 800c63e:	af00      	add	r7, sp, #0
 800c640:	6078      	str	r0, [r7, #4]
 800c642:	460b      	mov	r3, r1
 800c644:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	887a      	ldrh	r2, [r7, #2]
 800c64c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800c64e:	2300      	movs	r3, #0
}
 800c650:	4618      	mov	r0, r3
 800c652:	370c      	adds	r7, #12
 800c654:	46bd      	mov	sp, r7
 800c656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65a:	4770      	bx	lr

0800c65c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c65c:	b480      	push	{r7}
 800c65e:	b083      	sub	sp, #12
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
 800c664:	460b      	mov	r3, r1
 800c666:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800c668:	bf00      	nop
 800c66a:	370c      	adds	r7, #12
 800c66c:	46bd      	mov	sp, r7
 800c66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c672:	4770      	bx	lr

0800c674 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b086      	sub	sp, #24
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d101      	bne.n	800c686 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c682:	2301      	movs	r3, #1
 800c684:	e25b      	b.n	800cb3e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	f003 0301 	and.w	r3, r3, #1
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d075      	beq.n	800c77e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800c692:	4ba3      	ldr	r3, [pc, #652]	; (800c920 <HAL_RCC_OscConfig+0x2ac>)
 800c694:	689b      	ldr	r3, [r3, #8]
 800c696:	f003 030c 	and.w	r3, r3, #12
 800c69a:	2b04      	cmp	r3, #4
 800c69c:	d00c      	beq.n	800c6b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c69e:	4ba0      	ldr	r3, [pc, #640]	; (800c920 <HAL_RCC_OscConfig+0x2ac>)
 800c6a0:	689b      	ldr	r3, [r3, #8]
 800c6a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800c6a6:	2b08      	cmp	r3, #8
 800c6a8:	d112      	bne.n	800c6d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c6aa:	4b9d      	ldr	r3, [pc, #628]	; (800c920 <HAL_RCC_OscConfig+0x2ac>)
 800c6ac:	685b      	ldr	r3, [r3, #4]
 800c6ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c6b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c6b6:	d10b      	bne.n	800c6d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c6b8:	4b99      	ldr	r3, [pc, #612]	; (800c920 <HAL_RCC_OscConfig+0x2ac>)
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d05b      	beq.n	800c77c <HAL_RCC_OscConfig+0x108>
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	685b      	ldr	r3, [r3, #4]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d157      	bne.n	800c77c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c6cc:	2301      	movs	r3, #1
 800c6ce:	e236      	b.n	800cb3e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	685b      	ldr	r3, [r3, #4]
 800c6d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c6d8:	d106      	bne.n	800c6e8 <HAL_RCC_OscConfig+0x74>
 800c6da:	4b91      	ldr	r3, [pc, #580]	; (800c920 <HAL_RCC_OscConfig+0x2ac>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	4a90      	ldr	r2, [pc, #576]	; (800c920 <HAL_RCC_OscConfig+0x2ac>)
 800c6e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c6e4:	6013      	str	r3, [r2, #0]
 800c6e6:	e01d      	b.n	800c724 <HAL_RCC_OscConfig+0xb0>
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	685b      	ldr	r3, [r3, #4]
 800c6ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c6f0:	d10c      	bne.n	800c70c <HAL_RCC_OscConfig+0x98>
 800c6f2:	4b8b      	ldr	r3, [pc, #556]	; (800c920 <HAL_RCC_OscConfig+0x2ac>)
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	4a8a      	ldr	r2, [pc, #552]	; (800c920 <HAL_RCC_OscConfig+0x2ac>)
 800c6f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c6fc:	6013      	str	r3, [r2, #0]
 800c6fe:	4b88      	ldr	r3, [pc, #544]	; (800c920 <HAL_RCC_OscConfig+0x2ac>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	4a87      	ldr	r2, [pc, #540]	; (800c920 <HAL_RCC_OscConfig+0x2ac>)
 800c704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c708:	6013      	str	r3, [r2, #0]
 800c70a:	e00b      	b.n	800c724 <HAL_RCC_OscConfig+0xb0>
 800c70c:	4b84      	ldr	r3, [pc, #528]	; (800c920 <HAL_RCC_OscConfig+0x2ac>)
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	4a83      	ldr	r2, [pc, #524]	; (800c920 <HAL_RCC_OscConfig+0x2ac>)
 800c712:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c716:	6013      	str	r3, [r2, #0]
 800c718:	4b81      	ldr	r3, [pc, #516]	; (800c920 <HAL_RCC_OscConfig+0x2ac>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	4a80      	ldr	r2, [pc, #512]	; (800c920 <HAL_RCC_OscConfig+0x2ac>)
 800c71e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c722:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	685b      	ldr	r3, [r3, #4]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d013      	beq.n	800c754 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c72c:	f7fd ff66 	bl	800a5fc <HAL_GetTick>
 800c730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c732:	e008      	b.n	800c746 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c734:	f7fd ff62 	bl	800a5fc <HAL_GetTick>
 800c738:	4602      	mov	r2, r0
 800c73a:	693b      	ldr	r3, [r7, #16]
 800c73c:	1ad3      	subs	r3, r2, r3
 800c73e:	2b64      	cmp	r3, #100	; 0x64
 800c740:	d901      	bls.n	800c746 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c742:	2303      	movs	r3, #3
 800c744:	e1fb      	b.n	800cb3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c746:	4b76      	ldr	r3, [pc, #472]	; (800c920 <HAL_RCC_OscConfig+0x2ac>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d0f0      	beq.n	800c734 <HAL_RCC_OscConfig+0xc0>
 800c752:	e014      	b.n	800c77e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c754:	f7fd ff52 	bl	800a5fc <HAL_GetTick>
 800c758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c75a:	e008      	b.n	800c76e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c75c:	f7fd ff4e 	bl	800a5fc <HAL_GetTick>
 800c760:	4602      	mov	r2, r0
 800c762:	693b      	ldr	r3, [r7, #16]
 800c764:	1ad3      	subs	r3, r2, r3
 800c766:	2b64      	cmp	r3, #100	; 0x64
 800c768:	d901      	bls.n	800c76e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c76a:	2303      	movs	r3, #3
 800c76c:	e1e7      	b.n	800cb3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c76e:	4b6c      	ldr	r3, [pc, #432]	; (800c920 <HAL_RCC_OscConfig+0x2ac>)
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c776:	2b00      	cmp	r3, #0
 800c778:	d1f0      	bne.n	800c75c <HAL_RCC_OscConfig+0xe8>
 800c77a:	e000      	b.n	800c77e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c77c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	f003 0302 	and.w	r3, r3, #2
 800c786:	2b00      	cmp	r3, #0
 800c788:	d063      	beq.n	800c852 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c78a:	4b65      	ldr	r3, [pc, #404]	; (800c920 <HAL_RCC_OscConfig+0x2ac>)
 800c78c:	689b      	ldr	r3, [r3, #8]
 800c78e:	f003 030c 	and.w	r3, r3, #12
 800c792:	2b00      	cmp	r3, #0
 800c794:	d00b      	beq.n	800c7ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c796:	4b62      	ldr	r3, [pc, #392]	; (800c920 <HAL_RCC_OscConfig+0x2ac>)
 800c798:	689b      	ldr	r3, [r3, #8]
 800c79a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c79e:	2b08      	cmp	r3, #8
 800c7a0:	d11c      	bne.n	800c7dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c7a2:	4b5f      	ldr	r3, [pc, #380]	; (800c920 <HAL_RCC_OscConfig+0x2ac>)
 800c7a4:	685b      	ldr	r3, [r3, #4]
 800c7a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d116      	bne.n	800c7dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c7ae:	4b5c      	ldr	r3, [pc, #368]	; (800c920 <HAL_RCC_OscConfig+0x2ac>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	f003 0302 	and.w	r3, r3, #2
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d005      	beq.n	800c7c6 <HAL_RCC_OscConfig+0x152>
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	68db      	ldr	r3, [r3, #12]
 800c7be:	2b01      	cmp	r3, #1
 800c7c0:	d001      	beq.n	800c7c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800c7c2:	2301      	movs	r3, #1
 800c7c4:	e1bb      	b.n	800cb3e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c7c6:	4b56      	ldr	r3, [pc, #344]	; (800c920 <HAL_RCC_OscConfig+0x2ac>)
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	691b      	ldr	r3, [r3, #16]
 800c7d2:	00db      	lsls	r3, r3, #3
 800c7d4:	4952      	ldr	r1, [pc, #328]	; (800c920 <HAL_RCC_OscConfig+0x2ac>)
 800c7d6:	4313      	orrs	r3, r2
 800c7d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c7da:	e03a      	b.n	800c852 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	68db      	ldr	r3, [r3, #12]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d020      	beq.n	800c826 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c7e4:	4b4f      	ldr	r3, [pc, #316]	; (800c924 <HAL_RCC_OscConfig+0x2b0>)
 800c7e6:	2201      	movs	r2, #1
 800c7e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c7ea:	f7fd ff07 	bl	800a5fc <HAL_GetTick>
 800c7ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c7f0:	e008      	b.n	800c804 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c7f2:	f7fd ff03 	bl	800a5fc <HAL_GetTick>
 800c7f6:	4602      	mov	r2, r0
 800c7f8:	693b      	ldr	r3, [r7, #16]
 800c7fa:	1ad3      	subs	r3, r2, r3
 800c7fc:	2b02      	cmp	r3, #2
 800c7fe:	d901      	bls.n	800c804 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800c800:	2303      	movs	r3, #3
 800c802:	e19c      	b.n	800cb3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c804:	4b46      	ldr	r3, [pc, #280]	; (800c920 <HAL_RCC_OscConfig+0x2ac>)
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	f003 0302 	and.w	r3, r3, #2
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d0f0      	beq.n	800c7f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c810:	4b43      	ldr	r3, [pc, #268]	; (800c920 <HAL_RCC_OscConfig+0x2ac>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	691b      	ldr	r3, [r3, #16]
 800c81c:	00db      	lsls	r3, r3, #3
 800c81e:	4940      	ldr	r1, [pc, #256]	; (800c920 <HAL_RCC_OscConfig+0x2ac>)
 800c820:	4313      	orrs	r3, r2
 800c822:	600b      	str	r3, [r1, #0]
 800c824:	e015      	b.n	800c852 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c826:	4b3f      	ldr	r3, [pc, #252]	; (800c924 <HAL_RCC_OscConfig+0x2b0>)
 800c828:	2200      	movs	r2, #0
 800c82a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c82c:	f7fd fee6 	bl	800a5fc <HAL_GetTick>
 800c830:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c832:	e008      	b.n	800c846 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c834:	f7fd fee2 	bl	800a5fc <HAL_GetTick>
 800c838:	4602      	mov	r2, r0
 800c83a:	693b      	ldr	r3, [r7, #16]
 800c83c:	1ad3      	subs	r3, r2, r3
 800c83e:	2b02      	cmp	r3, #2
 800c840:	d901      	bls.n	800c846 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800c842:	2303      	movs	r3, #3
 800c844:	e17b      	b.n	800cb3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c846:	4b36      	ldr	r3, [pc, #216]	; (800c920 <HAL_RCC_OscConfig+0x2ac>)
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	f003 0302 	and.w	r3, r3, #2
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d1f0      	bne.n	800c834 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	f003 0308 	and.w	r3, r3, #8
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d030      	beq.n	800c8c0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	695b      	ldr	r3, [r3, #20]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d016      	beq.n	800c894 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c866:	4b30      	ldr	r3, [pc, #192]	; (800c928 <HAL_RCC_OscConfig+0x2b4>)
 800c868:	2201      	movs	r2, #1
 800c86a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c86c:	f7fd fec6 	bl	800a5fc <HAL_GetTick>
 800c870:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c872:	e008      	b.n	800c886 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c874:	f7fd fec2 	bl	800a5fc <HAL_GetTick>
 800c878:	4602      	mov	r2, r0
 800c87a:	693b      	ldr	r3, [r7, #16]
 800c87c:	1ad3      	subs	r3, r2, r3
 800c87e:	2b02      	cmp	r3, #2
 800c880:	d901      	bls.n	800c886 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800c882:	2303      	movs	r3, #3
 800c884:	e15b      	b.n	800cb3e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c886:	4b26      	ldr	r3, [pc, #152]	; (800c920 <HAL_RCC_OscConfig+0x2ac>)
 800c888:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c88a:	f003 0302 	and.w	r3, r3, #2
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d0f0      	beq.n	800c874 <HAL_RCC_OscConfig+0x200>
 800c892:	e015      	b.n	800c8c0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c894:	4b24      	ldr	r3, [pc, #144]	; (800c928 <HAL_RCC_OscConfig+0x2b4>)
 800c896:	2200      	movs	r2, #0
 800c898:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c89a:	f7fd feaf 	bl	800a5fc <HAL_GetTick>
 800c89e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c8a0:	e008      	b.n	800c8b4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c8a2:	f7fd feab 	bl	800a5fc <HAL_GetTick>
 800c8a6:	4602      	mov	r2, r0
 800c8a8:	693b      	ldr	r3, [r7, #16]
 800c8aa:	1ad3      	subs	r3, r2, r3
 800c8ac:	2b02      	cmp	r3, #2
 800c8ae:	d901      	bls.n	800c8b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800c8b0:	2303      	movs	r3, #3
 800c8b2:	e144      	b.n	800cb3e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c8b4:	4b1a      	ldr	r3, [pc, #104]	; (800c920 <HAL_RCC_OscConfig+0x2ac>)
 800c8b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c8b8:	f003 0302 	and.w	r3, r3, #2
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d1f0      	bne.n	800c8a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	f003 0304 	and.w	r3, r3, #4
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	f000 80a0 	beq.w	800ca0e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c8d2:	4b13      	ldr	r3, [pc, #76]	; (800c920 <HAL_RCC_OscConfig+0x2ac>)
 800c8d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d10f      	bne.n	800c8fe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c8de:	2300      	movs	r3, #0
 800c8e0:	60bb      	str	r3, [r7, #8]
 800c8e2:	4b0f      	ldr	r3, [pc, #60]	; (800c920 <HAL_RCC_OscConfig+0x2ac>)
 800c8e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8e6:	4a0e      	ldr	r2, [pc, #56]	; (800c920 <HAL_RCC_OscConfig+0x2ac>)
 800c8e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c8ec:	6413      	str	r3, [r2, #64]	; 0x40
 800c8ee:	4b0c      	ldr	r3, [pc, #48]	; (800c920 <HAL_RCC_OscConfig+0x2ac>)
 800c8f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c8f6:	60bb      	str	r3, [r7, #8]
 800c8f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c8fa:	2301      	movs	r3, #1
 800c8fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c8fe:	4b0b      	ldr	r3, [pc, #44]	; (800c92c <HAL_RCC_OscConfig+0x2b8>)
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c906:	2b00      	cmp	r3, #0
 800c908:	d121      	bne.n	800c94e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c90a:	4b08      	ldr	r3, [pc, #32]	; (800c92c <HAL_RCC_OscConfig+0x2b8>)
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	4a07      	ldr	r2, [pc, #28]	; (800c92c <HAL_RCC_OscConfig+0x2b8>)
 800c910:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c914:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c916:	f7fd fe71 	bl	800a5fc <HAL_GetTick>
 800c91a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c91c:	e011      	b.n	800c942 <HAL_RCC_OscConfig+0x2ce>
 800c91e:	bf00      	nop
 800c920:	40023800 	.word	0x40023800
 800c924:	42470000 	.word	0x42470000
 800c928:	42470e80 	.word	0x42470e80
 800c92c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c930:	f7fd fe64 	bl	800a5fc <HAL_GetTick>
 800c934:	4602      	mov	r2, r0
 800c936:	693b      	ldr	r3, [r7, #16]
 800c938:	1ad3      	subs	r3, r2, r3
 800c93a:	2b02      	cmp	r3, #2
 800c93c:	d901      	bls.n	800c942 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800c93e:	2303      	movs	r3, #3
 800c940:	e0fd      	b.n	800cb3e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c942:	4b81      	ldr	r3, [pc, #516]	; (800cb48 <HAL_RCC_OscConfig+0x4d4>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d0f0      	beq.n	800c930 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	689b      	ldr	r3, [r3, #8]
 800c952:	2b01      	cmp	r3, #1
 800c954:	d106      	bne.n	800c964 <HAL_RCC_OscConfig+0x2f0>
 800c956:	4b7d      	ldr	r3, [pc, #500]	; (800cb4c <HAL_RCC_OscConfig+0x4d8>)
 800c958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c95a:	4a7c      	ldr	r2, [pc, #496]	; (800cb4c <HAL_RCC_OscConfig+0x4d8>)
 800c95c:	f043 0301 	orr.w	r3, r3, #1
 800c960:	6713      	str	r3, [r2, #112]	; 0x70
 800c962:	e01c      	b.n	800c99e <HAL_RCC_OscConfig+0x32a>
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	689b      	ldr	r3, [r3, #8]
 800c968:	2b05      	cmp	r3, #5
 800c96a:	d10c      	bne.n	800c986 <HAL_RCC_OscConfig+0x312>
 800c96c:	4b77      	ldr	r3, [pc, #476]	; (800cb4c <HAL_RCC_OscConfig+0x4d8>)
 800c96e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c970:	4a76      	ldr	r2, [pc, #472]	; (800cb4c <HAL_RCC_OscConfig+0x4d8>)
 800c972:	f043 0304 	orr.w	r3, r3, #4
 800c976:	6713      	str	r3, [r2, #112]	; 0x70
 800c978:	4b74      	ldr	r3, [pc, #464]	; (800cb4c <HAL_RCC_OscConfig+0x4d8>)
 800c97a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c97c:	4a73      	ldr	r2, [pc, #460]	; (800cb4c <HAL_RCC_OscConfig+0x4d8>)
 800c97e:	f043 0301 	orr.w	r3, r3, #1
 800c982:	6713      	str	r3, [r2, #112]	; 0x70
 800c984:	e00b      	b.n	800c99e <HAL_RCC_OscConfig+0x32a>
 800c986:	4b71      	ldr	r3, [pc, #452]	; (800cb4c <HAL_RCC_OscConfig+0x4d8>)
 800c988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c98a:	4a70      	ldr	r2, [pc, #448]	; (800cb4c <HAL_RCC_OscConfig+0x4d8>)
 800c98c:	f023 0301 	bic.w	r3, r3, #1
 800c990:	6713      	str	r3, [r2, #112]	; 0x70
 800c992:	4b6e      	ldr	r3, [pc, #440]	; (800cb4c <HAL_RCC_OscConfig+0x4d8>)
 800c994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c996:	4a6d      	ldr	r2, [pc, #436]	; (800cb4c <HAL_RCC_OscConfig+0x4d8>)
 800c998:	f023 0304 	bic.w	r3, r3, #4
 800c99c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	689b      	ldr	r3, [r3, #8]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d015      	beq.n	800c9d2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c9a6:	f7fd fe29 	bl	800a5fc <HAL_GetTick>
 800c9aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c9ac:	e00a      	b.n	800c9c4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c9ae:	f7fd fe25 	bl	800a5fc <HAL_GetTick>
 800c9b2:	4602      	mov	r2, r0
 800c9b4:	693b      	ldr	r3, [r7, #16]
 800c9b6:	1ad3      	subs	r3, r2, r3
 800c9b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c9bc:	4293      	cmp	r3, r2
 800c9be:	d901      	bls.n	800c9c4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800c9c0:	2303      	movs	r3, #3
 800c9c2:	e0bc      	b.n	800cb3e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c9c4:	4b61      	ldr	r3, [pc, #388]	; (800cb4c <HAL_RCC_OscConfig+0x4d8>)
 800c9c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9c8:	f003 0302 	and.w	r3, r3, #2
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d0ee      	beq.n	800c9ae <HAL_RCC_OscConfig+0x33a>
 800c9d0:	e014      	b.n	800c9fc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c9d2:	f7fd fe13 	bl	800a5fc <HAL_GetTick>
 800c9d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c9d8:	e00a      	b.n	800c9f0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c9da:	f7fd fe0f 	bl	800a5fc <HAL_GetTick>
 800c9de:	4602      	mov	r2, r0
 800c9e0:	693b      	ldr	r3, [r7, #16]
 800c9e2:	1ad3      	subs	r3, r2, r3
 800c9e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c9e8:	4293      	cmp	r3, r2
 800c9ea:	d901      	bls.n	800c9f0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800c9ec:	2303      	movs	r3, #3
 800c9ee:	e0a6      	b.n	800cb3e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c9f0:	4b56      	ldr	r3, [pc, #344]	; (800cb4c <HAL_RCC_OscConfig+0x4d8>)
 800c9f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9f4:	f003 0302 	and.w	r3, r3, #2
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d1ee      	bne.n	800c9da <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c9fc:	7dfb      	ldrb	r3, [r7, #23]
 800c9fe:	2b01      	cmp	r3, #1
 800ca00:	d105      	bne.n	800ca0e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ca02:	4b52      	ldr	r3, [pc, #328]	; (800cb4c <HAL_RCC_OscConfig+0x4d8>)
 800ca04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca06:	4a51      	ldr	r2, [pc, #324]	; (800cb4c <HAL_RCC_OscConfig+0x4d8>)
 800ca08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ca0c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	699b      	ldr	r3, [r3, #24]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	f000 8092 	beq.w	800cb3c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ca18:	4b4c      	ldr	r3, [pc, #304]	; (800cb4c <HAL_RCC_OscConfig+0x4d8>)
 800ca1a:	689b      	ldr	r3, [r3, #8]
 800ca1c:	f003 030c 	and.w	r3, r3, #12
 800ca20:	2b08      	cmp	r3, #8
 800ca22:	d05c      	beq.n	800cade <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	699b      	ldr	r3, [r3, #24]
 800ca28:	2b02      	cmp	r3, #2
 800ca2a:	d141      	bne.n	800cab0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ca2c:	4b48      	ldr	r3, [pc, #288]	; (800cb50 <HAL_RCC_OscConfig+0x4dc>)
 800ca2e:	2200      	movs	r2, #0
 800ca30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ca32:	f7fd fde3 	bl	800a5fc <HAL_GetTick>
 800ca36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ca38:	e008      	b.n	800ca4c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ca3a:	f7fd fddf 	bl	800a5fc <HAL_GetTick>
 800ca3e:	4602      	mov	r2, r0
 800ca40:	693b      	ldr	r3, [r7, #16]
 800ca42:	1ad3      	subs	r3, r2, r3
 800ca44:	2b02      	cmp	r3, #2
 800ca46:	d901      	bls.n	800ca4c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800ca48:	2303      	movs	r3, #3
 800ca4a:	e078      	b.n	800cb3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ca4c:	4b3f      	ldr	r3, [pc, #252]	; (800cb4c <HAL_RCC_OscConfig+0x4d8>)
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d1f0      	bne.n	800ca3a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	69da      	ldr	r2, [r3, #28]
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	6a1b      	ldr	r3, [r3, #32]
 800ca60:	431a      	orrs	r2, r3
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca66:	019b      	lsls	r3, r3, #6
 800ca68:	431a      	orrs	r2, r3
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca6e:	085b      	lsrs	r3, r3, #1
 800ca70:	3b01      	subs	r3, #1
 800ca72:	041b      	lsls	r3, r3, #16
 800ca74:	431a      	orrs	r2, r3
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca7a:	061b      	lsls	r3, r3, #24
 800ca7c:	4933      	ldr	r1, [pc, #204]	; (800cb4c <HAL_RCC_OscConfig+0x4d8>)
 800ca7e:	4313      	orrs	r3, r2
 800ca80:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ca82:	4b33      	ldr	r3, [pc, #204]	; (800cb50 <HAL_RCC_OscConfig+0x4dc>)
 800ca84:	2201      	movs	r2, #1
 800ca86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ca88:	f7fd fdb8 	bl	800a5fc <HAL_GetTick>
 800ca8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ca8e:	e008      	b.n	800caa2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ca90:	f7fd fdb4 	bl	800a5fc <HAL_GetTick>
 800ca94:	4602      	mov	r2, r0
 800ca96:	693b      	ldr	r3, [r7, #16]
 800ca98:	1ad3      	subs	r3, r2, r3
 800ca9a:	2b02      	cmp	r3, #2
 800ca9c:	d901      	bls.n	800caa2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800ca9e:	2303      	movs	r3, #3
 800caa0:	e04d      	b.n	800cb3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800caa2:	4b2a      	ldr	r3, [pc, #168]	; (800cb4c <HAL_RCC_OscConfig+0x4d8>)
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d0f0      	beq.n	800ca90 <HAL_RCC_OscConfig+0x41c>
 800caae:	e045      	b.n	800cb3c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cab0:	4b27      	ldr	r3, [pc, #156]	; (800cb50 <HAL_RCC_OscConfig+0x4dc>)
 800cab2:	2200      	movs	r2, #0
 800cab4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cab6:	f7fd fda1 	bl	800a5fc <HAL_GetTick>
 800caba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cabc:	e008      	b.n	800cad0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cabe:	f7fd fd9d 	bl	800a5fc <HAL_GetTick>
 800cac2:	4602      	mov	r2, r0
 800cac4:	693b      	ldr	r3, [r7, #16]
 800cac6:	1ad3      	subs	r3, r2, r3
 800cac8:	2b02      	cmp	r3, #2
 800caca:	d901      	bls.n	800cad0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800cacc:	2303      	movs	r3, #3
 800cace:	e036      	b.n	800cb3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cad0:	4b1e      	ldr	r3, [pc, #120]	; (800cb4c <HAL_RCC_OscConfig+0x4d8>)
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d1f0      	bne.n	800cabe <HAL_RCC_OscConfig+0x44a>
 800cadc:	e02e      	b.n	800cb3c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	699b      	ldr	r3, [r3, #24]
 800cae2:	2b01      	cmp	r3, #1
 800cae4:	d101      	bne.n	800caea <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800cae6:	2301      	movs	r3, #1
 800cae8:	e029      	b.n	800cb3e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800caea:	4b18      	ldr	r3, [pc, #96]	; (800cb4c <HAL_RCC_OscConfig+0x4d8>)
 800caec:	685b      	ldr	r3, [r3, #4]
 800caee:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	69db      	ldr	r3, [r3, #28]
 800cafa:	429a      	cmp	r2, r3
 800cafc:	d11c      	bne.n	800cb38 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cb08:	429a      	cmp	r2, r3
 800cb0a:	d115      	bne.n	800cb38 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800cb0c:	68fa      	ldr	r2, [r7, #12]
 800cb0e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800cb12:	4013      	ands	r3, r2
 800cb14:	687a      	ldr	r2, [r7, #4]
 800cb16:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800cb18:	4293      	cmp	r3, r2
 800cb1a:	d10d      	bne.n	800cb38 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800cb26:	429a      	cmp	r2, r3
 800cb28:	d106      	bne.n	800cb38 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800cb34:	429a      	cmp	r2, r3
 800cb36:	d001      	beq.n	800cb3c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800cb38:	2301      	movs	r3, #1
 800cb3a:	e000      	b.n	800cb3e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800cb3c:	2300      	movs	r3, #0
}
 800cb3e:	4618      	mov	r0, r3
 800cb40:	3718      	adds	r7, #24
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd80      	pop	{r7, pc}
 800cb46:	bf00      	nop
 800cb48:	40007000 	.word	0x40007000
 800cb4c:	40023800 	.word	0x40023800
 800cb50:	42470060 	.word	0x42470060

0800cb54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b084      	sub	sp, #16
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
 800cb5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d101      	bne.n	800cb68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800cb64:	2301      	movs	r3, #1
 800cb66:	e0cc      	b.n	800cd02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800cb68:	4b68      	ldr	r3, [pc, #416]	; (800cd0c <HAL_RCC_ClockConfig+0x1b8>)
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	f003 030f 	and.w	r3, r3, #15
 800cb70:	683a      	ldr	r2, [r7, #0]
 800cb72:	429a      	cmp	r2, r3
 800cb74:	d90c      	bls.n	800cb90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cb76:	4b65      	ldr	r3, [pc, #404]	; (800cd0c <HAL_RCC_ClockConfig+0x1b8>)
 800cb78:	683a      	ldr	r2, [r7, #0]
 800cb7a:	b2d2      	uxtb	r2, r2
 800cb7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800cb7e:	4b63      	ldr	r3, [pc, #396]	; (800cd0c <HAL_RCC_ClockConfig+0x1b8>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	f003 030f 	and.w	r3, r3, #15
 800cb86:	683a      	ldr	r2, [r7, #0]
 800cb88:	429a      	cmp	r2, r3
 800cb8a:	d001      	beq.n	800cb90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800cb8c:	2301      	movs	r3, #1
 800cb8e:	e0b8      	b.n	800cd02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	f003 0302 	and.w	r3, r3, #2
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d020      	beq.n	800cbde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	f003 0304 	and.w	r3, r3, #4
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d005      	beq.n	800cbb4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800cba8:	4b59      	ldr	r3, [pc, #356]	; (800cd10 <HAL_RCC_ClockConfig+0x1bc>)
 800cbaa:	689b      	ldr	r3, [r3, #8]
 800cbac:	4a58      	ldr	r2, [pc, #352]	; (800cd10 <HAL_RCC_ClockConfig+0x1bc>)
 800cbae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800cbb2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	f003 0308 	and.w	r3, r3, #8
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d005      	beq.n	800cbcc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800cbc0:	4b53      	ldr	r3, [pc, #332]	; (800cd10 <HAL_RCC_ClockConfig+0x1bc>)
 800cbc2:	689b      	ldr	r3, [r3, #8]
 800cbc4:	4a52      	ldr	r2, [pc, #328]	; (800cd10 <HAL_RCC_ClockConfig+0x1bc>)
 800cbc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800cbca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cbcc:	4b50      	ldr	r3, [pc, #320]	; (800cd10 <HAL_RCC_ClockConfig+0x1bc>)
 800cbce:	689b      	ldr	r3, [r3, #8]
 800cbd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	689b      	ldr	r3, [r3, #8]
 800cbd8:	494d      	ldr	r1, [pc, #308]	; (800cd10 <HAL_RCC_ClockConfig+0x1bc>)
 800cbda:	4313      	orrs	r3, r2
 800cbdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	f003 0301 	and.w	r3, r3, #1
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d044      	beq.n	800cc74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	685b      	ldr	r3, [r3, #4]
 800cbee:	2b01      	cmp	r3, #1
 800cbf0:	d107      	bne.n	800cc02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cbf2:	4b47      	ldr	r3, [pc, #284]	; (800cd10 <HAL_RCC_ClockConfig+0x1bc>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d119      	bne.n	800cc32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cbfe:	2301      	movs	r3, #1
 800cc00:	e07f      	b.n	800cd02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	685b      	ldr	r3, [r3, #4]
 800cc06:	2b02      	cmp	r3, #2
 800cc08:	d003      	beq.n	800cc12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800cc0e:	2b03      	cmp	r3, #3
 800cc10:	d107      	bne.n	800cc22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cc12:	4b3f      	ldr	r3, [pc, #252]	; (800cd10 <HAL_RCC_ClockConfig+0x1bc>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d109      	bne.n	800cc32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cc1e:	2301      	movs	r3, #1
 800cc20:	e06f      	b.n	800cd02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cc22:	4b3b      	ldr	r3, [pc, #236]	; (800cd10 <HAL_RCC_ClockConfig+0x1bc>)
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	f003 0302 	and.w	r3, r3, #2
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d101      	bne.n	800cc32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cc2e:	2301      	movs	r3, #1
 800cc30:	e067      	b.n	800cd02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800cc32:	4b37      	ldr	r3, [pc, #220]	; (800cd10 <HAL_RCC_ClockConfig+0x1bc>)
 800cc34:	689b      	ldr	r3, [r3, #8]
 800cc36:	f023 0203 	bic.w	r2, r3, #3
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	685b      	ldr	r3, [r3, #4]
 800cc3e:	4934      	ldr	r1, [pc, #208]	; (800cd10 <HAL_RCC_ClockConfig+0x1bc>)
 800cc40:	4313      	orrs	r3, r2
 800cc42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800cc44:	f7fd fcda 	bl	800a5fc <HAL_GetTick>
 800cc48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cc4a:	e00a      	b.n	800cc62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cc4c:	f7fd fcd6 	bl	800a5fc <HAL_GetTick>
 800cc50:	4602      	mov	r2, r0
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	1ad3      	subs	r3, r2, r3
 800cc56:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc5a:	4293      	cmp	r3, r2
 800cc5c:	d901      	bls.n	800cc62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800cc5e:	2303      	movs	r3, #3
 800cc60:	e04f      	b.n	800cd02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cc62:	4b2b      	ldr	r3, [pc, #172]	; (800cd10 <HAL_RCC_ClockConfig+0x1bc>)
 800cc64:	689b      	ldr	r3, [r3, #8]
 800cc66:	f003 020c 	and.w	r2, r3, #12
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	685b      	ldr	r3, [r3, #4]
 800cc6e:	009b      	lsls	r3, r3, #2
 800cc70:	429a      	cmp	r2, r3
 800cc72:	d1eb      	bne.n	800cc4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800cc74:	4b25      	ldr	r3, [pc, #148]	; (800cd0c <HAL_RCC_ClockConfig+0x1b8>)
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	f003 030f 	and.w	r3, r3, #15
 800cc7c:	683a      	ldr	r2, [r7, #0]
 800cc7e:	429a      	cmp	r2, r3
 800cc80:	d20c      	bcs.n	800cc9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cc82:	4b22      	ldr	r3, [pc, #136]	; (800cd0c <HAL_RCC_ClockConfig+0x1b8>)
 800cc84:	683a      	ldr	r2, [r7, #0]
 800cc86:	b2d2      	uxtb	r2, r2
 800cc88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800cc8a:	4b20      	ldr	r3, [pc, #128]	; (800cd0c <HAL_RCC_ClockConfig+0x1b8>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	f003 030f 	and.w	r3, r3, #15
 800cc92:	683a      	ldr	r2, [r7, #0]
 800cc94:	429a      	cmp	r2, r3
 800cc96:	d001      	beq.n	800cc9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800cc98:	2301      	movs	r3, #1
 800cc9a:	e032      	b.n	800cd02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	f003 0304 	and.w	r3, r3, #4
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d008      	beq.n	800ccba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cca8:	4b19      	ldr	r3, [pc, #100]	; (800cd10 <HAL_RCC_ClockConfig+0x1bc>)
 800ccaa:	689b      	ldr	r3, [r3, #8]
 800ccac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	68db      	ldr	r3, [r3, #12]
 800ccb4:	4916      	ldr	r1, [pc, #88]	; (800cd10 <HAL_RCC_ClockConfig+0x1bc>)
 800ccb6:	4313      	orrs	r3, r2
 800ccb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	f003 0308 	and.w	r3, r3, #8
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d009      	beq.n	800ccda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ccc6:	4b12      	ldr	r3, [pc, #72]	; (800cd10 <HAL_RCC_ClockConfig+0x1bc>)
 800ccc8:	689b      	ldr	r3, [r3, #8]
 800ccca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	691b      	ldr	r3, [r3, #16]
 800ccd2:	00db      	lsls	r3, r3, #3
 800ccd4:	490e      	ldr	r1, [pc, #56]	; (800cd10 <HAL_RCC_ClockConfig+0x1bc>)
 800ccd6:	4313      	orrs	r3, r2
 800ccd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800ccda:	f000 f821 	bl	800cd20 <HAL_RCC_GetSysClockFreq>
 800ccde:	4601      	mov	r1, r0
 800cce0:	4b0b      	ldr	r3, [pc, #44]	; (800cd10 <HAL_RCC_ClockConfig+0x1bc>)
 800cce2:	689b      	ldr	r3, [r3, #8]
 800cce4:	091b      	lsrs	r3, r3, #4
 800cce6:	f003 030f 	and.w	r3, r3, #15
 800ccea:	4a0a      	ldr	r2, [pc, #40]	; (800cd14 <HAL_RCC_ClockConfig+0x1c0>)
 800ccec:	5cd3      	ldrb	r3, [r2, r3]
 800ccee:	fa21 f303 	lsr.w	r3, r1, r3
 800ccf2:	4a09      	ldr	r2, [pc, #36]	; (800cd18 <HAL_RCC_ClockConfig+0x1c4>)
 800ccf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800ccf6:	4b09      	ldr	r3, [pc, #36]	; (800cd1c <HAL_RCC_ClockConfig+0x1c8>)
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	f7fd f984 	bl	800a008 <HAL_InitTick>

  return HAL_OK;
 800cd00:	2300      	movs	r3, #0
}
 800cd02:	4618      	mov	r0, r3
 800cd04:	3710      	adds	r7, #16
 800cd06:	46bd      	mov	sp, r7
 800cd08:	bd80      	pop	{r7, pc}
 800cd0a:	bf00      	nop
 800cd0c:	40023c00 	.word	0x40023c00
 800cd10:	40023800 	.word	0x40023800
 800cd14:	0801a558 	.word	0x0801a558
 800cd18:	20002088 	.word	0x20002088
 800cd1c:	2000208c 	.word	0x2000208c

0800cd20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cd20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd22:	b085      	sub	sp, #20
 800cd24:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800cd26:	2300      	movs	r3, #0
 800cd28:	607b      	str	r3, [r7, #4]
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	60fb      	str	r3, [r7, #12]
 800cd2e:	2300      	movs	r3, #0
 800cd30:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800cd32:	2300      	movs	r3, #0
 800cd34:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800cd36:	4b63      	ldr	r3, [pc, #396]	; (800cec4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800cd38:	689b      	ldr	r3, [r3, #8]
 800cd3a:	f003 030c 	and.w	r3, r3, #12
 800cd3e:	2b04      	cmp	r3, #4
 800cd40:	d007      	beq.n	800cd52 <HAL_RCC_GetSysClockFreq+0x32>
 800cd42:	2b08      	cmp	r3, #8
 800cd44:	d008      	beq.n	800cd58 <HAL_RCC_GetSysClockFreq+0x38>
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	f040 80b4 	bne.w	800ceb4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800cd4c:	4b5e      	ldr	r3, [pc, #376]	; (800cec8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800cd4e:	60bb      	str	r3, [r7, #8]
       break;
 800cd50:	e0b3      	b.n	800ceba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800cd52:	4b5e      	ldr	r3, [pc, #376]	; (800cecc <HAL_RCC_GetSysClockFreq+0x1ac>)
 800cd54:	60bb      	str	r3, [r7, #8]
      break;
 800cd56:	e0b0      	b.n	800ceba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800cd58:	4b5a      	ldr	r3, [pc, #360]	; (800cec4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800cd5a:	685b      	ldr	r3, [r3, #4]
 800cd5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd60:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800cd62:	4b58      	ldr	r3, [pc, #352]	; (800cec4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800cd64:	685b      	ldr	r3, [r3, #4]
 800cd66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d04a      	beq.n	800ce04 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cd6e:	4b55      	ldr	r3, [pc, #340]	; (800cec4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800cd70:	685b      	ldr	r3, [r3, #4]
 800cd72:	099b      	lsrs	r3, r3, #6
 800cd74:	f04f 0400 	mov.w	r4, #0
 800cd78:	f240 11ff 	movw	r1, #511	; 0x1ff
 800cd7c:	f04f 0200 	mov.w	r2, #0
 800cd80:	ea03 0501 	and.w	r5, r3, r1
 800cd84:	ea04 0602 	and.w	r6, r4, r2
 800cd88:	4629      	mov	r1, r5
 800cd8a:	4632      	mov	r2, r6
 800cd8c:	f04f 0300 	mov.w	r3, #0
 800cd90:	f04f 0400 	mov.w	r4, #0
 800cd94:	0154      	lsls	r4, r2, #5
 800cd96:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800cd9a:	014b      	lsls	r3, r1, #5
 800cd9c:	4619      	mov	r1, r3
 800cd9e:	4622      	mov	r2, r4
 800cda0:	1b49      	subs	r1, r1, r5
 800cda2:	eb62 0206 	sbc.w	r2, r2, r6
 800cda6:	f04f 0300 	mov.w	r3, #0
 800cdaa:	f04f 0400 	mov.w	r4, #0
 800cdae:	0194      	lsls	r4, r2, #6
 800cdb0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800cdb4:	018b      	lsls	r3, r1, #6
 800cdb6:	1a5b      	subs	r3, r3, r1
 800cdb8:	eb64 0402 	sbc.w	r4, r4, r2
 800cdbc:	f04f 0100 	mov.w	r1, #0
 800cdc0:	f04f 0200 	mov.w	r2, #0
 800cdc4:	00e2      	lsls	r2, r4, #3
 800cdc6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800cdca:	00d9      	lsls	r1, r3, #3
 800cdcc:	460b      	mov	r3, r1
 800cdce:	4614      	mov	r4, r2
 800cdd0:	195b      	adds	r3, r3, r5
 800cdd2:	eb44 0406 	adc.w	r4, r4, r6
 800cdd6:	f04f 0100 	mov.w	r1, #0
 800cdda:	f04f 0200 	mov.w	r2, #0
 800cdde:	0262      	lsls	r2, r4, #9
 800cde0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800cde4:	0259      	lsls	r1, r3, #9
 800cde6:	460b      	mov	r3, r1
 800cde8:	4614      	mov	r4, r2
 800cdea:	4618      	mov	r0, r3
 800cdec:	4621      	mov	r1, r4
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	f04f 0400 	mov.w	r4, #0
 800cdf4:	461a      	mov	r2, r3
 800cdf6:	4623      	mov	r3, r4
 800cdf8:	f7f3 ff46 	bl	8000c88 <__aeabi_uldivmod>
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	460c      	mov	r4, r1
 800ce00:	60fb      	str	r3, [r7, #12]
 800ce02:	e049      	b.n	800ce98 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ce04:	4b2f      	ldr	r3, [pc, #188]	; (800cec4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800ce06:	685b      	ldr	r3, [r3, #4]
 800ce08:	099b      	lsrs	r3, r3, #6
 800ce0a:	f04f 0400 	mov.w	r4, #0
 800ce0e:	f240 11ff 	movw	r1, #511	; 0x1ff
 800ce12:	f04f 0200 	mov.w	r2, #0
 800ce16:	ea03 0501 	and.w	r5, r3, r1
 800ce1a:	ea04 0602 	and.w	r6, r4, r2
 800ce1e:	4629      	mov	r1, r5
 800ce20:	4632      	mov	r2, r6
 800ce22:	f04f 0300 	mov.w	r3, #0
 800ce26:	f04f 0400 	mov.w	r4, #0
 800ce2a:	0154      	lsls	r4, r2, #5
 800ce2c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800ce30:	014b      	lsls	r3, r1, #5
 800ce32:	4619      	mov	r1, r3
 800ce34:	4622      	mov	r2, r4
 800ce36:	1b49      	subs	r1, r1, r5
 800ce38:	eb62 0206 	sbc.w	r2, r2, r6
 800ce3c:	f04f 0300 	mov.w	r3, #0
 800ce40:	f04f 0400 	mov.w	r4, #0
 800ce44:	0194      	lsls	r4, r2, #6
 800ce46:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800ce4a:	018b      	lsls	r3, r1, #6
 800ce4c:	1a5b      	subs	r3, r3, r1
 800ce4e:	eb64 0402 	sbc.w	r4, r4, r2
 800ce52:	f04f 0100 	mov.w	r1, #0
 800ce56:	f04f 0200 	mov.w	r2, #0
 800ce5a:	00e2      	lsls	r2, r4, #3
 800ce5c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800ce60:	00d9      	lsls	r1, r3, #3
 800ce62:	460b      	mov	r3, r1
 800ce64:	4614      	mov	r4, r2
 800ce66:	195b      	adds	r3, r3, r5
 800ce68:	eb44 0406 	adc.w	r4, r4, r6
 800ce6c:	f04f 0100 	mov.w	r1, #0
 800ce70:	f04f 0200 	mov.w	r2, #0
 800ce74:	02a2      	lsls	r2, r4, #10
 800ce76:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800ce7a:	0299      	lsls	r1, r3, #10
 800ce7c:	460b      	mov	r3, r1
 800ce7e:	4614      	mov	r4, r2
 800ce80:	4618      	mov	r0, r3
 800ce82:	4621      	mov	r1, r4
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f04f 0400 	mov.w	r4, #0
 800ce8a:	461a      	mov	r2, r3
 800ce8c:	4623      	mov	r3, r4
 800ce8e:	f7f3 fefb 	bl	8000c88 <__aeabi_uldivmod>
 800ce92:	4603      	mov	r3, r0
 800ce94:	460c      	mov	r4, r1
 800ce96:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800ce98:	4b0a      	ldr	r3, [pc, #40]	; (800cec4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800ce9a:	685b      	ldr	r3, [r3, #4]
 800ce9c:	0c1b      	lsrs	r3, r3, #16
 800ce9e:	f003 0303 	and.w	r3, r3, #3
 800cea2:	3301      	adds	r3, #1
 800cea4:	005b      	lsls	r3, r3, #1
 800cea6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800cea8:	68fa      	ldr	r2, [r7, #12]
 800ceaa:	683b      	ldr	r3, [r7, #0]
 800ceac:	fbb2 f3f3 	udiv	r3, r2, r3
 800ceb0:	60bb      	str	r3, [r7, #8]
      break;
 800ceb2:	e002      	b.n	800ceba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ceb4:	4b04      	ldr	r3, [pc, #16]	; (800cec8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800ceb6:	60bb      	str	r3, [r7, #8]
      break;
 800ceb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ceba:	68bb      	ldr	r3, [r7, #8]
}
 800cebc:	4618      	mov	r0, r3
 800cebe:	3714      	adds	r7, #20
 800cec0:	46bd      	mov	sp, r7
 800cec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cec4:	40023800 	.word	0x40023800
 800cec8:	00f42400 	.word	0x00f42400
 800cecc:	007a1200 	.word	0x007a1200

0800ced0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ced0:	b480      	push	{r7}
 800ced2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ced4:	4b03      	ldr	r3, [pc, #12]	; (800cee4 <HAL_RCC_GetHCLKFreq+0x14>)
 800ced6:	681b      	ldr	r3, [r3, #0]
}
 800ced8:	4618      	mov	r0, r3
 800ceda:	46bd      	mov	sp, r7
 800cedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee0:	4770      	bx	lr
 800cee2:	bf00      	nop
 800cee4:	20002088 	.word	0x20002088

0800cee8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800ceec:	f7ff fff0 	bl	800ced0 <HAL_RCC_GetHCLKFreq>
 800cef0:	4601      	mov	r1, r0
 800cef2:	4b05      	ldr	r3, [pc, #20]	; (800cf08 <HAL_RCC_GetPCLK1Freq+0x20>)
 800cef4:	689b      	ldr	r3, [r3, #8]
 800cef6:	0a9b      	lsrs	r3, r3, #10
 800cef8:	f003 0307 	and.w	r3, r3, #7
 800cefc:	4a03      	ldr	r2, [pc, #12]	; (800cf0c <HAL_RCC_GetPCLK1Freq+0x24>)
 800cefe:	5cd3      	ldrb	r3, [r2, r3]
 800cf00:	fa21 f303 	lsr.w	r3, r1, r3
}
 800cf04:	4618      	mov	r0, r3
 800cf06:	bd80      	pop	{r7, pc}
 800cf08:	40023800 	.word	0x40023800
 800cf0c:	0801a568 	.word	0x0801a568

0800cf10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800cf14:	f7ff ffdc 	bl	800ced0 <HAL_RCC_GetHCLKFreq>
 800cf18:	4601      	mov	r1, r0
 800cf1a:	4b05      	ldr	r3, [pc, #20]	; (800cf30 <HAL_RCC_GetPCLK2Freq+0x20>)
 800cf1c:	689b      	ldr	r3, [r3, #8]
 800cf1e:	0b5b      	lsrs	r3, r3, #13
 800cf20:	f003 0307 	and.w	r3, r3, #7
 800cf24:	4a03      	ldr	r2, [pc, #12]	; (800cf34 <HAL_RCC_GetPCLK2Freq+0x24>)
 800cf26:	5cd3      	ldrb	r3, [r2, r3]
 800cf28:	fa21 f303 	lsr.w	r3, r1, r3
}
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	bd80      	pop	{r7, pc}
 800cf30:	40023800 	.word	0x40023800
 800cf34:	0801a568 	.word	0x0801a568

0800cf38 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800cf38:	b480      	push	{r7}
 800cf3a:	b083      	sub	sp, #12
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
 800cf40:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	220f      	movs	r2, #15
 800cf46:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800cf48:	4b12      	ldr	r3, [pc, #72]	; (800cf94 <HAL_RCC_GetClockConfig+0x5c>)
 800cf4a:	689b      	ldr	r3, [r3, #8]
 800cf4c:	f003 0203 	and.w	r2, r3, #3
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800cf54:	4b0f      	ldr	r3, [pc, #60]	; (800cf94 <HAL_RCC_GetClockConfig+0x5c>)
 800cf56:	689b      	ldr	r3, [r3, #8]
 800cf58:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800cf60:	4b0c      	ldr	r3, [pc, #48]	; (800cf94 <HAL_RCC_GetClockConfig+0x5c>)
 800cf62:	689b      	ldr	r3, [r3, #8]
 800cf64:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800cf6c:	4b09      	ldr	r3, [pc, #36]	; (800cf94 <HAL_RCC_GetClockConfig+0x5c>)
 800cf6e:	689b      	ldr	r3, [r3, #8]
 800cf70:	08db      	lsrs	r3, r3, #3
 800cf72:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800cf7a:	4b07      	ldr	r3, [pc, #28]	; (800cf98 <HAL_RCC_GetClockConfig+0x60>)
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	f003 020f 	and.w	r2, r3, #15
 800cf82:	683b      	ldr	r3, [r7, #0]
 800cf84:	601a      	str	r2, [r3, #0]
}
 800cf86:	bf00      	nop
 800cf88:	370c      	adds	r7, #12
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf90:	4770      	bx	lr
 800cf92:	bf00      	nop
 800cf94:	40023800 	.word	0x40023800
 800cf98:	40023c00 	.word	0x40023c00

0800cf9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b082      	sub	sp, #8
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d101      	bne.n	800cfae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cfaa:	2301      	movs	r3, #1
 800cfac:	e01d      	b.n	800cfea <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cfb4:	b2db      	uxtb	r3, r3
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d106      	bne.n	800cfc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cfc2:	6878      	ldr	r0, [r7, #4]
 800cfc4:	f7fd f9aa 	bl	800a31c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2202      	movs	r2, #2
 800cfcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681a      	ldr	r2, [r3, #0]
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	3304      	adds	r3, #4
 800cfd8:	4619      	mov	r1, r3
 800cfda:	4610      	mov	r0, r2
 800cfdc:	f000 fa38 	bl	800d450 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2201      	movs	r2, #1
 800cfe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cfe8:	2300      	movs	r3, #0
}
 800cfea:	4618      	mov	r0, r3
 800cfec:	3708      	adds	r7, #8
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}

0800cff2 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800cff2:	b480      	push	{r7}
 800cff4:	b085      	sub	sp, #20
 800cff6:	af00      	add	r7, sp, #0
 800cff8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	2202      	movs	r2, #2
 800cffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	689b      	ldr	r3, [r3, #8]
 800d008:	f003 0307 	and.w	r3, r3, #7
 800d00c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	2b06      	cmp	r3, #6
 800d012:	d007      	beq.n	800d024 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	681a      	ldr	r2, [r3, #0]
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	f042 0201 	orr.w	r2, r2, #1
 800d022:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2201      	movs	r2, #1
 800d028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d02c:	2300      	movs	r3, #0
}
 800d02e:	4618      	mov	r0, r3
 800d030:	3714      	adds	r7, #20
 800d032:	46bd      	mov	sp, r7
 800d034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d038:	4770      	bx	lr

0800d03a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d03a:	b480      	push	{r7}
 800d03c:	b085      	sub	sp, #20
 800d03e:	af00      	add	r7, sp, #0
 800d040:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	68da      	ldr	r2, [r3, #12]
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	f042 0201 	orr.w	r2, r2, #1
 800d050:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	689b      	ldr	r3, [r3, #8]
 800d058:	f003 0307 	and.w	r3, r3, #7
 800d05c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	2b06      	cmp	r3, #6
 800d062:	d007      	beq.n	800d074 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	681a      	ldr	r2, [r3, #0]
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	f042 0201 	orr.w	r2, r2, #1
 800d072:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d074:	2300      	movs	r3, #0
}
 800d076:	4618      	mov	r0, r3
 800d078:	3714      	adds	r7, #20
 800d07a:	46bd      	mov	sp, r7
 800d07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d080:	4770      	bx	lr

0800d082 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d082:	b580      	push	{r7, lr}
 800d084:	b082      	sub	sp, #8
 800d086:	af00      	add	r7, sp, #0
 800d088:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	691b      	ldr	r3, [r3, #16]
 800d090:	f003 0302 	and.w	r3, r3, #2
 800d094:	2b02      	cmp	r3, #2
 800d096:	d122      	bne.n	800d0de <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	68db      	ldr	r3, [r3, #12]
 800d09e:	f003 0302 	and.w	r3, r3, #2
 800d0a2:	2b02      	cmp	r3, #2
 800d0a4:	d11b      	bne.n	800d0de <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	f06f 0202 	mvn.w	r2, #2
 800d0ae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	2201      	movs	r2, #1
 800d0b4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	699b      	ldr	r3, [r3, #24]
 800d0bc:	f003 0303 	and.w	r3, r3, #3
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d003      	beq.n	800d0cc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d0c4:	6878      	ldr	r0, [r7, #4]
 800d0c6:	f000 f9a5 	bl	800d414 <HAL_TIM_IC_CaptureCallback>
 800d0ca:	e005      	b.n	800d0d8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d0cc:	6878      	ldr	r0, [r7, #4]
 800d0ce:	f000 f997 	bl	800d400 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d0d2:	6878      	ldr	r0, [r7, #4]
 800d0d4:	f000 f9a8 	bl	800d428 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	2200      	movs	r2, #0
 800d0dc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	691b      	ldr	r3, [r3, #16]
 800d0e4:	f003 0304 	and.w	r3, r3, #4
 800d0e8:	2b04      	cmp	r3, #4
 800d0ea:	d122      	bne.n	800d132 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	68db      	ldr	r3, [r3, #12]
 800d0f2:	f003 0304 	and.w	r3, r3, #4
 800d0f6:	2b04      	cmp	r3, #4
 800d0f8:	d11b      	bne.n	800d132 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	f06f 0204 	mvn.w	r2, #4
 800d102:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2202      	movs	r2, #2
 800d108:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	699b      	ldr	r3, [r3, #24]
 800d110:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d114:	2b00      	cmp	r3, #0
 800d116:	d003      	beq.n	800d120 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d118:	6878      	ldr	r0, [r7, #4]
 800d11a:	f000 f97b 	bl	800d414 <HAL_TIM_IC_CaptureCallback>
 800d11e:	e005      	b.n	800d12c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d120:	6878      	ldr	r0, [r7, #4]
 800d122:	f000 f96d 	bl	800d400 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d126:	6878      	ldr	r0, [r7, #4]
 800d128:	f000 f97e 	bl	800d428 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	2200      	movs	r2, #0
 800d130:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	691b      	ldr	r3, [r3, #16]
 800d138:	f003 0308 	and.w	r3, r3, #8
 800d13c:	2b08      	cmp	r3, #8
 800d13e:	d122      	bne.n	800d186 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	68db      	ldr	r3, [r3, #12]
 800d146:	f003 0308 	and.w	r3, r3, #8
 800d14a:	2b08      	cmp	r3, #8
 800d14c:	d11b      	bne.n	800d186 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	f06f 0208 	mvn.w	r2, #8
 800d156:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	2204      	movs	r2, #4
 800d15c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	69db      	ldr	r3, [r3, #28]
 800d164:	f003 0303 	and.w	r3, r3, #3
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d003      	beq.n	800d174 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d16c:	6878      	ldr	r0, [r7, #4]
 800d16e:	f000 f951 	bl	800d414 <HAL_TIM_IC_CaptureCallback>
 800d172:	e005      	b.n	800d180 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d174:	6878      	ldr	r0, [r7, #4]
 800d176:	f000 f943 	bl	800d400 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d17a:	6878      	ldr	r0, [r7, #4]
 800d17c:	f000 f954 	bl	800d428 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2200      	movs	r2, #0
 800d184:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	691b      	ldr	r3, [r3, #16]
 800d18c:	f003 0310 	and.w	r3, r3, #16
 800d190:	2b10      	cmp	r3, #16
 800d192:	d122      	bne.n	800d1da <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	68db      	ldr	r3, [r3, #12]
 800d19a:	f003 0310 	and.w	r3, r3, #16
 800d19e:	2b10      	cmp	r3, #16
 800d1a0:	d11b      	bne.n	800d1da <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	f06f 0210 	mvn.w	r2, #16
 800d1aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	2208      	movs	r2, #8
 800d1b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	69db      	ldr	r3, [r3, #28]
 800d1b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d003      	beq.n	800d1c8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d1c0:	6878      	ldr	r0, [r7, #4]
 800d1c2:	f000 f927 	bl	800d414 <HAL_TIM_IC_CaptureCallback>
 800d1c6:	e005      	b.n	800d1d4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d1c8:	6878      	ldr	r0, [r7, #4]
 800d1ca:	f000 f919 	bl	800d400 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d1ce:	6878      	ldr	r0, [r7, #4]
 800d1d0:	f000 f92a 	bl	800d428 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	691b      	ldr	r3, [r3, #16]
 800d1e0:	f003 0301 	and.w	r3, r3, #1
 800d1e4:	2b01      	cmp	r3, #1
 800d1e6:	d10e      	bne.n	800d206 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	68db      	ldr	r3, [r3, #12]
 800d1ee:	f003 0301 	and.w	r3, r3, #1
 800d1f2:	2b01      	cmp	r3, #1
 800d1f4:	d107      	bne.n	800d206 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	f06f 0201 	mvn.w	r2, #1
 800d1fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d200:	6878      	ldr	r0, [r7, #4]
 800d202:	f7f7 fc31 	bl	8004a68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	691b      	ldr	r3, [r3, #16]
 800d20c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d210:	2b80      	cmp	r3, #128	; 0x80
 800d212:	d10e      	bne.n	800d232 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	68db      	ldr	r3, [r3, #12]
 800d21a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d21e:	2b80      	cmp	r3, #128	; 0x80
 800d220:	d107      	bne.n	800d232 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d22a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d22c:	6878      	ldr	r0, [r7, #4]
 800d22e:	f000 facf 	bl	800d7d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	691b      	ldr	r3, [r3, #16]
 800d238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d23c:	2b40      	cmp	r3, #64	; 0x40
 800d23e:	d10e      	bne.n	800d25e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	68db      	ldr	r3, [r3, #12]
 800d246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d24a:	2b40      	cmp	r3, #64	; 0x40
 800d24c:	d107      	bne.n	800d25e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d258:	6878      	ldr	r0, [r7, #4]
 800d25a:	f000 f8ef 	bl	800d43c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	691b      	ldr	r3, [r3, #16]
 800d264:	f003 0320 	and.w	r3, r3, #32
 800d268:	2b20      	cmp	r3, #32
 800d26a:	d10e      	bne.n	800d28a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	68db      	ldr	r3, [r3, #12]
 800d272:	f003 0320 	and.w	r3, r3, #32
 800d276:	2b20      	cmp	r3, #32
 800d278:	d107      	bne.n	800d28a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	f06f 0220 	mvn.w	r2, #32
 800d282:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d284:	6878      	ldr	r0, [r7, #4]
 800d286:	f000 fa99 	bl	800d7bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d28a:	bf00      	nop
 800d28c:	3708      	adds	r7, #8
 800d28e:	46bd      	mov	sp, r7
 800d290:	bd80      	pop	{r7, pc}

0800d292 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d292:	b580      	push	{r7, lr}
 800d294:	b084      	sub	sp, #16
 800d296:	af00      	add	r7, sp, #0
 800d298:	6078      	str	r0, [r7, #4]
 800d29a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d2a2:	2b01      	cmp	r3, #1
 800d2a4:	d101      	bne.n	800d2aa <HAL_TIM_ConfigClockSource+0x18>
 800d2a6:	2302      	movs	r3, #2
 800d2a8:	e0a6      	b.n	800d3f8 <HAL_TIM_ConfigClockSource+0x166>
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	2201      	movs	r2, #1
 800d2ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	2202      	movs	r2, #2
 800d2b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	689b      	ldr	r3, [r3, #8]
 800d2c0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800d2c8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d2d0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	68fa      	ldr	r2, [r7, #12]
 800d2d8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d2da:	683b      	ldr	r3, [r7, #0]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	2b40      	cmp	r3, #64	; 0x40
 800d2e0:	d067      	beq.n	800d3b2 <HAL_TIM_ConfigClockSource+0x120>
 800d2e2:	2b40      	cmp	r3, #64	; 0x40
 800d2e4:	d80b      	bhi.n	800d2fe <HAL_TIM_ConfigClockSource+0x6c>
 800d2e6:	2b10      	cmp	r3, #16
 800d2e8:	d073      	beq.n	800d3d2 <HAL_TIM_ConfigClockSource+0x140>
 800d2ea:	2b10      	cmp	r3, #16
 800d2ec:	d802      	bhi.n	800d2f4 <HAL_TIM_ConfigClockSource+0x62>
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d06f      	beq.n	800d3d2 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800d2f2:	e078      	b.n	800d3e6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800d2f4:	2b20      	cmp	r3, #32
 800d2f6:	d06c      	beq.n	800d3d2 <HAL_TIM_ConfigClockSource+0x140>
 800d2f8:	2b30      	cmp	r3, #48	; 0x30
 800d2fa:	d06a      	beq.n	800d3d2 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800d2fc:	e073      	b.n	800d3e6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800d2fe:	2b70      	cmp	r3, #112	; 0x70
 800d300:	d00d      	beq.n	800d31e <HAL_TIM_ConfigClockSource+0x8c>
 800d302:	2b70      	cmp	r3, #112	; 0x70
 800d304:	d804      	bhi.n	800d310 <HAL_TIM_ConfigClockSource+0x7e>
 800d306:	2b50      	cmp	r3, #80	; 0x50
 800d308:	d033      	beq.n	800d372 <HAL_TIM_ConfigClockSource+0xe0>
 800d30a:	2b60      	cmp	r3, #96	; 0x60
 800d30c:	d041      	beq.n	800d392 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800d30e:	e06a      	b.n	800d3e6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800d310:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d314:	d066      	beq.n	800d3e4 <HAL_TIM_ConfigClockSource+0x152>
 800d316:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d31a:	d017      	beq.n	800d34c <HAL_TIM_ConfigClockSource+0xba>
      break;
 800d31c:	e063      	b.n	800d3e6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	6818      	ldr	r0, [r3, #0]
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	6899      	ldr	r1, [r3, #8]
 800d326:	683b      	ldr	r3, [r7, #0]
 800d328:	685a      	ldr	r2, [r3, #4]
 800d32a:	683b      	ldr	r3, [r7, #0]
 800d32c:	68db      	ldr	r3, [r3, #12]
 800d32e:	f000 f9a9 	bl	800d684 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	689b      	ldr	r3, [r3, #8]
 800d338:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d340:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	68fa      	ldr	r2, [r7, #12]
 800d348:	609a      	str	r2, [r3, #8]
      break;
 800d34a:	e04c      	b.n	800d3e6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	6818      	ldr	r0, [r3, #0]
 800d350:	683b      	ldr	r3, [r7, #0]
 800d352:	6899      	ldr	r1, [r3, #8]
 800d354:	683b      	ldr	r3, [r7, #0]
 800d356:	685a      	ldr	r2, [r3, #4]
 800d358:	683b      	ldr	r3, [r7, #0]
 800d35a:	68db      	ldr	r3, [r3, #12]
 800d35c:	f000 f992 	bl	800d684 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	689a      	ldr	r2, [r3, #8]
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d36e:	609a      	str	r2, [r3, #8]
      break;
 800d370:	e039      	b.n	800d3e6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	6818      	ldr	r0, [r3, #0]
 800d376:	683b      	ldr	r3, [r7, #0]
 800d378:	6859      	ldr	r1, [r3, #4]
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	68db      	ldr	r3, [r3, #12]
 800d37e:	461a      	mov	r2, r3
 800d380:	f000 f906 	bl	800d590 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	2150      	movs	r1, #80	; 0x50
 800d38a:	4618      	mov	r0, r3
 800d38c:	f000 f95f 	bl	800d64e <TIM_ITRx_SetConfig>
      break;
 800d390:	e029      	b.n	800d3e6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	6818      	ldr	r0, [r3, #0]
 800d396:	683b      	ldr	r3, [r7, #0]
 800d398:	6859      	ldr	r1, [r3, #4]
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	68db      	ldr	r3, [r3, #12]
 800d39e:	461a      	mov	r2, r3
 800d3a0:	f000 f925 	bl	800d5ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	2160      	movs	r1, #96	; 0x60
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	f000 f94f 	bl	800d64e <TIM_ITRx_SetConfig>
      break;
 800d3b0:	e019      	b.n	800d3e6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	6818      	ldr	r0, [r3, #0]
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	6859      	ldr	r1, [r3, #4]
 800d3ba:	683b      	ldr	r3, [r7, #0]
 800d3bc:	68db      	ldr	r3, [r3, #12]
 800d3be:	461a      	mov	r2, r3
 800d3c0:	f000 f8e6 	bl	800d590 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	2140      	movs	r1, #64	; 0x40
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	f000 f93f 	bl	800d64e <TIM_ITRx_SetConfig>
      break;
 800d3d0:	e009      	b.n	800d3e6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	681a      	ldr	r2, [r3, #0]
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	4619      	mov	r1, r3
 800d3dc:	4610      	mov	r0, r2
 800d3de:	f000 f936 	bl	800d64e <TIM_ITRx_SetConfig>
      break;
 800d3e2:	e000      	b.n	800d3e6 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800d3e4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	2201      	movs	r2, #1
 800d3ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d3f6:	2300      	movs	r3, #0
}
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	3710      	adds	r7, #16
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	bd80      	pop	{r7, pc}

0800d400 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d400:	b480      	push	{r7}
 800d402:	b083      	sub	sp, #12
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d408:	bf00      	nop
 800d40a:	370c      	adds	r7, #12
 800d40c:	46bd      	mov	sp, r7
 800d40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d412:	4770      	bx	lr

0800d414 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d414:	b480      	push	{r7}
 800d416:	b083      	sub	sp, #12
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d41c:	bf00      	nop
 800d41e:	370c      	adds	r7, #12
 800d420:	46bd      	mov	sp, r7
 800d422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d426:	4770      	bx	lr

0800d428 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d428:	b480      	push	{r7}
 800d42a:	b083      	sub	sp, #12
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d430:	bf00      	nop
 800d432:	370c      	adds	r7, #12
 800d434:	46bd      	mov	sp, r7
 800d436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43a:	4770      	bx	lr

0800d43c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d43c:	b480      	push	{r7}
 800d43e:	b083      	sub	sp, #12
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d444:	bf00      	nop
 800d446:	370c      	adds	r7, #12
 800d448:	46bd      	mov	sp, r7
 800d44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44e:	4770      	bx	lr

0800d450 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d450:	b480      	push	{r7}
 800d452:	b085      	sub	sp, #20
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
 800d458:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	4a40      	ldr	r2, [pc, #256]	; (800d564 <TIM_Base_SetConfig+0x114>)
 800d464:	4293      	cmp	r3, r2
 800d466:	d013      	beq.n	800d490 <TIM_Base_SetConfig+0x40>
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d46e:	d00f      	beq.n	800d490 <TIM_Base_SetConfig+0x40>
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	4a3d      	ldr	r2, [pc, #244]	; (800d568 <TIM_Base_SetConfig+0x118>)
 800d474:	4293      	cmp	r3, r2
 800d476:	d00b      	beq.n	800d490 <TIM_Base_SetConfig+0x40>
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	4a3c      	ldr	r2, [pc, #240]	; (800d56c <TIM_Base_SetConfig+0x11c>)
 800d47c:	4293      	cmp	r3, r2
 800d47e:	d007      	beq.n	800d490 <TIM_Base_SetConfig+0x40>
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	4a3b      	ldr	r2, [pc, #236]	; (800d570 <TIM_Base_SetConfig+0x120>)
 800d484:	4293      	cmp	r3, r2
 800d486:	d003      	beq.n	800d490 <TIM_Base_SetConfig+0x40>
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	4a3a      	ldr	r2, [pc, #232]	; (800d574 <TIM_Base_SetConfig+0x124>)
 800d48c:	4293      	cmp	r3, r2
 800d48e:	d108      	bne.n	800d4a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d496:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	685b      	ldr	r3, [r3, #4]
 800d49c:	68fa      	ldr	r2, [r7, #12]
 800d49e:	4313      	orrs	r3, r2
 800d4a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	4a2f      	ldr	r2, [pc, #188]	; (800d564 <TIM_Base_SetConfig+0x114>)
 800d4a6:	4293      	cmp	r3, r2
 800d4a8:	d02b      	beq.n	800d502 <TIM_Base_SetConfig+0xb2>
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d4b0:	d027      	beq.n	800d502 <TIM_Base_SetConfig+0xb2>
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	4a2c      	ldr	r2, [pc, #176]	; (800d568 <TIM_Base_SetConfig+0x118>)
 800d4b6:	4293      	cmp	r3, r2
 800d4b8:	d023      	beq.n	800d502 <TIM_Base_SetConfig+0xb2>
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	4a2b      	ldr	r2, [pc, #172]	; (800d56c <TIM_Base_SetConfig+0x11c>)
 800d4be:	4293      	cmp	r3, r2
 800d4c0:	d01f      	beq.n	800d502 <TIM_Base_SetConfig+0xb2>
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	4a2a      	ldr	r2, [pc, #168]	; (800d570 <TIM_Base_SetConfig+0x120>)
 800d4c6:	4293      	cmp	r3, r2
 800d4c8:	d01b      	beq.n	800d502 <TIM_Base_SetConfig+0xb2>
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	4a29      	ldr	r2, [pc, #164]	; (800d574 <TIM_Base_SetConfig+0x124>)
 800d4ce:	4293      	cmp	r3, r2
 800d4d0:	d017      	beq.n	800d502 <TIM_Base_SetConfig+0xb2>
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	4a28      	ldr	r2, [pc, #160]	; (800d578 <TIM_Base_SetConfig+0x128>)
 800d4d6:	4293      	cmp	r3, r2
 800d4d8:	d013      	beq.n	800d502 <TIM_Base_SetConfig+0xb2>
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	4a27      	ldr	r2, [pc, #156]	; (800d57c <TIM_Base_SetConfig+0x12c>)
 800d4de:	4293      	cmp	r3, r2
 800d4e0:	d00f      	beq.n	800d502 <TIM_Base_SetConfig+0xb2>
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	4a26      	ldr	r2, [pc, #152]	; (800d580 <TIM_Base_SetConfig+0x130>)
 800d4e6:	4293      	cmp	r3, r2
 800d4e8:	d00b      	beq.n	800d502 <TIM_Base_SetConfig+0xb2>
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	4a25      	ldr	r2, [pc, #148]	; (800d584 <TIM_Base_SetConfig+0x134>)
 800d4ee:	4293      	cmp	r3, r2
 800d4f0:	d007      	beq.n	800d502 <TIM_Base_SetConfig+0xb2>
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	4a24      	ldr	r2, [pc, #144]	; (800d588 <TIM_Base_SetConfig+0x138>)
 800d4f6:	4293      	cmp	r3, r2
 800d4f8:	d003      	beq.n	800d502 <TIM_Base_SetConfig+0xb2>
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	4a23      	ldr	r2, [pc, #140]	; (800d58c <TIM_Base_SetConfig+0x13c>)
 800d4fe:	4293      	cmp	r3, r2
 800d500:	d108      	bne.n	800d514 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d508:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d50a:	683b      	ldr	r3, [r7, #0]
 800d50c:	68db      	ldr	r3, [r3, #12]
 800d50e:	68fa      	ldr	r2, [r7, #12]
 800d510:	4313      	orrs	r3, r2
 800d512:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d51a:	683b      	ldr	r3, [r7, #0]
 800d51c:	695b      	ldr	r3, [r3, #20]
 800d51e:	4313      	orrs	r3, r2
 800d520:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	68fa      	ldr	r2, [r7, #12]
 800d526:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d528:	683b      	ldr	r3, [r7, #0]
 800d52a:	689a      	ldr	r2, [r3, #8]
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d530:	683b      	ldr	r3, [r7, #0]
 800d532:	681a      	ldr	r2, [r3, #0]
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	4a0a      	ldr	r2, [pc, #40]	; (800d564 <TIM_Base_SetConfig+0x114>)
 800d53c:	4293      	cmp	r3, r2
 800d53e:	d003      	beq.n	800d548 <TIM_Base_SetConfig+0xf8>
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	4a0c      	ldr	r2, [pc, #48]	; (800d574 <TIM_Base_SetConfig+0x124>)
 800d544:	4293      	cmp	r3, r2
 800d546:	d103      	bne.n	800d550 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d548:	683b      	ldr	r3, [r7, #0]
 800d54a:	691a      	ldr	r2, [r3, #16]
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	2201      	movs	r2, #1
 800d554:	615a      	str	r2, [r3, #20]
}
 800d556:	bf00      	nop
 800d558:	3714      	adds	r7, #20
 800d55a:	46bd      	mov	sp, r7
 800d55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d560:	4770      	bx	lr
 800d562:	bf00      	nop
 800d564:	40010000 	.word	0x40010000
 800d568:	40000400 	.word	0x40000400
 800d56c:	40000800 	.word	0x40000800
 800d570:	40000c00 	.word	0x40000c00
 800d574:	40010400 	.word	0x40010400
 800d578:	40014000 	.word	0x40014000
 800d57c:	40014400 	.word	0x40014400
 800d580:	40014800 	.word	0x40014800
 800d584:	40001800 	.word	0x40001800
 800d588:	40001c00 	.word	0x40001c00
 800d58c:	40002000 	.word	0x40002000

0800d590 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d590:	b480      	push	{r7}
 800d592:	b087      	sub	sp, #28
 800d594:	af00      	add	r7, sp, #0
 800d596:	60f8      	str	r0, [r7, #12]
 800d598:	60b9      	str	r1, [r7, #8]
 800d59a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	6a1b      	ldr	r3, [r3, #32]
 800d5a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	6a1b      	ldr	r3, [r3, #32]
 800d5a6:	f023 0201 	bic.w	r2, r3, #1
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	699b      	ldr	r3, [r3, #24]
 800d5b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d5b4:	693b      	ldr	r3, [r7, #16]
 800d5b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d5ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	011b      	lsls	r3, r3, #4
 800d5c0:	693a      	ldr	r2, [r7, #16]
 800d5c2:	4313      	orrs	r3, r2
 800d5c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d5c6:	697b      	ldr	r3, [r7, #20]
 800d5c8:	f023 030a 	bic.w	r3, r3, #10
 800d5cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d5ce:	697a      	ldr	r2, [r7, #20]
 800d5d0:	68bb      	ldr	r3, [r7, #8]
 800d5d2:	4313      	orrs	r3, r2
 800d5d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	693a      	ldr	r2, [r7, #16]
 800d5da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	697a      	ldr	r2, [r7, #20]
 800d5e0:	621a      	str	r2, [r3, #32]
}
 800d5e2:	bf00      	nop
 800d5e4:	371c      	adds	r7, #28
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ec:	4770      	bx	lr

0800d5ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d5ee:	b480      	push	{r7}
 800d5f0:	b087      	sub	sp, #28
 800d5f2:	af00      	add	r7, sp, #0
 800d5f4:	60f8      	str	r0, [r7, #12]
 800d5f6:	60b9      	str	r1, [r7, #8]
 800d5f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	6a1b      	ldr	r3, [r3, #32]
 800d5fe:	f023 0210 	bic.w	r2, r3, #16
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	699b      	ldr	r3, [r3, #24]
 800d60a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	6a1b      	ldr	r3, [r3, #32]
 800d610:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d612:	697b      	ldr	r3, [r7, #20]
 800d614:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d618:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	031b      	lsls	r3, r3, #12
 800d61e:	697a      	ldr	r2, [r7, #20]
 800d620:	4313      	orrs	r3, r2
 800d622:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d624:	693b      	ldr	r3, [r7, #16]
 800d626:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d62a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d62c:	68bb      	ldr	r3, [r7, #8]
 800d62e:	011b      	lsls	r3, r3, #4
 800d630:	693a      	ldr	r2, [r7, #16]
 800d632:	4313      	orrs	r3, r2
 800d634:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	697a      	ldr	r2, [r7, #20]
 800d63a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	693a      	ldr	r2, [r7, #16]
 800d640:	621a      	str	r2, [r3, #32]
}
 800d642:	bf00      	nop
 800d644:	371c      	adds	r7, #28
 800d646:	46bd      	mov	sp, r7
 800d648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64c:	4770      	bx	lr

0800d64e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d64e:	b480      	push	{r7}
 800d650:	b085      	sub	sp, #20
 800d652:	af00      	add	r7, sp, #0
 800d654:	6078      	str	r0, [r7, #4]
 800d656:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	689b      	ldr	r3, [r3, #8]
 800d65c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d664:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d666:	683a      	ldr	r2, [r7, #0]
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	4313      	orrs	r3, r2
 800d66c:	f043 0307 	orr.w	r3, r3, #7
 800d670:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	68fa      	ldr	r2, [r7, #12]
 800d676:	609a      	str	r2, [r3, #8]
}
 800d678:	bf00      	nop
 800d67a:	3714      	adds	r7, #20
 800d67c:	46bd      	mov	sp, r7
 800d67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d682:	4770      	bx	lr

0800d684 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d684:	b480      	push	{r7}
 800d686:	b087      	sub	sp, #28
 800d688:	af00      	add	r7, sp, #0
 800d68a:	60f8      	str	r0, [r7, #12]
 800d68c:	60b9      	str	r1, [r7, #8]
 800d68e:	607a      	str	r2, [r7, #4]
 800d690:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	689b      	ldr	r3, [r3, #8]
 800d696:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d698:	697b      	ldr	r3, [r7, #20]
 800d69a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d69e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d6a0:	683b      	ldr	r3, [r7, #0]
 800d6a2:	021a      	lsls	r2, r3, #8
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	431a      	orrs	r2, r3
 800d6a8:	68bb      	ldr	r3, [r7, #8]
 800d6aa:	4313      	orrs	r3, r2
 800d6ac:	697a      	ldr	r2, [r7, #20]
 800d6ae:	4313      	orrs	r3, r2
 800d6b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	697a      	ldr	r2, [r7, #20]
 800d6b6:	609a      	str	r2, [r3, #8]
}
 800d6b8:	bf00      	nop
 800d6ba:	371c      	adds	r7, #28
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c2:	4770      	bx	lr

0800d6c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d6c4:	b480      	push	{r7}
 800d6c6:	b085      	sub	sp, #20
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	6078      	str	r0, [r7, #4]
 800d6cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d6d4:	2b01      	cmp	r3, #1
 800d6d6:	d101      	bne.n	800d6dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d6d8:	2302      	movs	r3, #2
 800d6da:	e05a      	b.n	800d792 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	2201      	movs	r2, #1
 800d6e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	2202      	movs	r2, #2
 800d6e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	685b      	ldr	r3, [r3, #4]
 800d6f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	689b      	ldr	r3, [r3, #8]
 800d6fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d702:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d704:	683b      	ldr	r3, [r7, #0]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	68fa      	ldr	r2, [r7, #12]
 800d70a:	4313      	orrs	r3, r2
 800d70c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	68fa      	ldr	r2, [r7, #12]
 800d714:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	4a21      	ldr	r2, [pc, #132]	; (800d7a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800d71c:	4293      	cmp	r3, r2
 800d71e:	d022      	beq.n	800d766 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d728:	d01d      	beq.n	800d766 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	4a1d      	ldr	r2, [pc, #116]	; (800d7a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800d730:	4293      	cmp	r3, r2
 800d732:	d018      	beq.n	800d766 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	4a1b      	ldr	r2, [pc, #108]	; (800d7a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800d73a:	4293      	cmp	r3, r2
 800d73c:	d013      	beq.n	800d766 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	4a1a      	ldr	r2, [pc, #104]	; (800d7ac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800d744:	4293      	cmp	r3, r2
 800d746:	d00e      	beq.n	800d766 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	4a18      	ldr	r2, [pc, #96]	; (800d7b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800d74e:	4293      	cmp	r3, r2
 800d750:	d009      	beq.n	800d766 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	4a17      	ldr	r2, [pc, #92]	; (800d7b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800d758:	4293      	cmp	r3, r2
 800d75a:	d004      	beq.n	800d766 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	4a15      	ldr	r2, [pc, #84]	; (800d7b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800d762:	4293      	cmp	r3, r2
 800d764:	d10c      	bne.n	800d780 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d766:	68bb      	ldr	r3, [r7, #8]
 800d768:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d76c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d76e:	683b      	ldr	r3, [r7, #0]
 800d770:	685b      	ldr	r3, [r3, #4]
 800d772:	68ba      	ldr	r2, [r7, #8]
 800d774:	4313      	orrs	r3, r2
 800d776:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	68ba      	ldr	r2, [r7, #8]
 800d77e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	2201      	movs	r2, #1
 800d784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	2200      	movs	r2, #0
 800d78c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d790:	2300      	movs	r3, #0
}
 800d792:	4618      	mov	r0, r3
 800d794:	3714      	adds	r7, #20
 800d796:	46bd      	mov	sp, r7
 800d798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79c:	4770      	bx	lr
 800d79e:	bf00      	nop
 800d7a0:	40010000 	.word	0x40010000
 800d7a4:	40000400 	.word	0x40000400
 800d7a8:	40000800 	.word	0x40000800
 800d7ac:	40000c00 	.word	0x40000c00
 800d7b0:	40010400 	.word	0x40010400
 800d7b4:	40014000 	.word	0x40014000
 800d7b8:	40001800 	.word	0x40001800

0800d7bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d7bc:	b480      	push	{r7}
 800d7be:	b083      	sub	sp, #12
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d7c4:	bf00      	nop
 800d7c6:	370c      	adds	r7, #12
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ce:	4770      	bx	lr

0800d7d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d7d0:	b480      	push	{r7}
 800d7d2:	b083      	sub	sp, #12
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d7d8:	bf00      	nop
 800d7da:	370c      	adds	r7, #12
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e2:	4770      	bx	lr

0800d7e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b082      	sub	sp, #8
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d101      	bne.n	800d7f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d7f2:	2301      	movs	r3, #1
 800d7f4:	e03f      	b.n	800d876 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d7fc:	b2db      	uxtb	r3, r3
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d106      	bne.n	800d810 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	2200      	movs	r2, #0
 800d806:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d80a:	6878      	ldr	r0, [r7, #4]
 800d80c:	f7fc fdec 	bl	800a3e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	2224      	movs	r2, #36	; 0x24
 800d814:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	68da      	ldr	r2, [r3, #12]
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d826:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d828:	6878      	ldr	r0, [r7, #4]
 800d82a:	f000 fb6b 	bl	800df04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	691a      	ldr	r2, [r3, #16]
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d83c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	695a      	ldr	r2, [r3, #20]
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d84c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	68da      	ldr	r2, [r3, #12]
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d85c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	2200      	movs	r2, #0
 800d862:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	2220      	movs	r2, #32
 800d868:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	2220      	movs	r2, #32
 800d870:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800d874:	2300      	movs	r3, #0
}
 800d876:	4618      	mov	r0, r3
 800d878:	3708      	adds	r7, #8
 800d87a:	46bd      	mov	sp, r7
 800d87c:	bd80      	pop	{r7, pc}
	...

0800d880 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b086      	sub	sp, #24
 800d884:	af00      	add	r7, sp, #0
 800d886:	60f8      	str	r0, [r7, #12]
 800d888:	60b9      	str	r1, [r7, #8]
 800d88a:	4613      	mov	r3, r2
 800d88c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d894:	b2db      	uxtb	r3, r3
 800d896:	2b20      	cmp	r3, #32
 800d898:	d153      	bne.n	800d942 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800d89a:	68bb      	ldr	r3, [r7, #8]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d002      	beq.n	800d8a6 <HAL_UART_Transmit_DMA+0x26>
 800d8a0:	88fb      	ldrh	r3, [r7, #6]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d101      	bne.n	800d8aa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800d8a6:	2301      	movs	r3, #1
 800d8a8:	e04c      	b.n	800d944 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d8b0:	2b01      	cmp	r3, #1
 800d8b2:	d101      	bne.n	800d8b8 <HAL_UART_Transmit_DMA+0x38>
 800d8b4:	2302      	movs	r3, #2
 800d8b6:	e045      	b.n	800d944 <HAL_UART_Transmit_DMA+0xc4>
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	2201      	movs	r2, #1
 800d8bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800d8c0:	68ba      	ldr	r2, [r7, #8]
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	88fa      	ldrh	r2, [r7, #6]
 800d8ca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	88fa      	ldrh	r2, [r7, #6]
 800d8d0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	2200      	movs	r2, #0
 800d8d6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	2221      	movs	r2, #33	; 0x21
 800d8dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8e4:	4a19      	ldr	r2, [pc, #100]	; (800d94c <HAL_UART_Transmit_DMA+0xcc>)
 800d8e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8ec:	4a18      	ldr	r2, [pc, #96]	; (800d950 <HAL_UART_Transmit_DMA+0xd0>)
 800d8ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8f4:	4a17      	ldr	r2, [pc, #92]	; (800d954 <HAL_UART_Transmit_DMA+0xd4>)
 800d8f6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8fc:	2200      	movs	r2, #0
 800d8fe:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800d900:	f107 0308 	add.w	r3, r7, #8
 800d904:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d90a:	697b      	ldr	r3, [r7, #20]
 800d90c:	6819      	ldr	r1, [r3, #0]
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	3304      	adds	r3, #4
 800d914:	461a      	mov	r2, r3
 800d916:	88fb      	ldrh	r3, [r7, #6]
 800d918:	f7fd f82e 	bl	800a978 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d924:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	2200      	movs	r2, #0
 800d92a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	695a      	ldr	r2, [r3, #20]
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d93c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800d93e:	2300      	movs	r3, #0
 800d940:	e000      	b.n	800d944 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800d942:	2302      	movs	r3, #2
  }
}
 800d944:	4618      	mov	r0, r3
 800d946:	3718      	adds	r7, #24
 800d948:	46bd      	mov	sp, r7
 800d94a:	bd80      	pop	{r7, pc}
 800d94c:	0800db95 	.word	0x0800db95
 800d950:	0800dbe7 	.word	0x0800dbe7
 800d954:	0800dc03 	.word	0x0800dc03

0800d958 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b088      	sub	sp, #32
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	68db      	ldr	r3, [r3, #12]
 800d96e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	695b      	ldr	r3, [r3, #20]
 800d976:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800d978:	2300      	movs	r3, #0
 800d97a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800d97c:	2300      	movs	r3, #0
 800d97e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800d980:	69fb      	ldr	r3, [r7, #28]
 800d982:	f003 030f 	and.w	r3, r3, #15
 800d986:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800d988:	693b      	ldr	r3, [r7, #16]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d10d      	bne.n	800d9aa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d98e:	69fb      	ldr	r3, [r7, #28]
 800d990:	f003 0320 	and.w	r3, r3, #32
 800d994:	2b00      	cmp	r3, #0
 800d996:	d008      	beq.n	800d9aa <HAL_UART_IRQHandler+0x52>
 800d998:	69bb      	ldr	r3, [r7, #24]
 800d99a:	f003 0320 	and.w	r3, r3, #32
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d003      	beq.n	800d9aa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800d9a2:	6878      	ldr	r0, [r7, #4]
 800d9a4:	f000 fa2d 	bl	800de02 <UART_Receive_IT>
      return;
 800d9a8:	e0d1      	b.n	800db4e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800d9aa:	693b      	ldr	r3, [r7, #16]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	f000 80b0 	beq.w	800db12 <HAL_UART_IRQHandler+0x1ba>
 800d9b2:	697b      	ldr	r3, [r7, #20]
 800d9b4:	f003 0301 	and.w	r3, r3, #1
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d105      	bne.n	800d9c8 <HAL_UART_IRQHandler+0x70>
 800d9bc:	69bb      	ldr	r3, [r7, #24]
 800d9be:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	f000 80a5 	beq.w	800db12 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800d9c8:	69fb      	ldr	r3, [r7, #28]
 800d9ca:	f003 0301 	and.w	r3, r3, #1
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d00a      	beq.n	800d9e8 <HAL_UART_IRQHandler+0x90>
 800d9d2:	69bb      	ldr	r3, [r7, #24]
 800d9d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d005      	beq.n	800d9e8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9e0:	f043 0201 	orr.w	r2, r3, #1
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d9e8:	69fb      	ldr	r3, [r7, #28]
 800d9ea:	f003 0304 	and.w	r3, r3, #4
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d00a      	beq.n	800da08 <HAL_UART_IRQHandler+0xb0>
 800d9f2:	697b      	ldr	r3, [r7, #20]
 800d9f4:	f003 0301 	and.w	r3, r3, #1
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d005      	beq.n	800da08 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da00:	f043 0202 	orr.w	r2, r3, #2
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800da08:	69fb      	ldr	r3, [r7, #28]
 800da0a:	f003 0302 	and.w	r3, r3, #2
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d00a      	beq.n	800da28 <HAL_UART_IRQHandler+0xd0>
 800da12:	697b      	ldr	r3, [r7, #20]
 800da14:	f003 0301 	and.w	r3, r3, #1
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d005      	beq.n	800da28 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da20:	f043 0204 	orr.w	r2, r3, #4
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800da28:	69fb      	ldr	r3, [r7, #28]
 800da2a:	f003 0308 	and.w	r3, r3, #8
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d00f      	beq.n	800da52 <HAL_UART_IRQHandler+0xfa>
 800da32:	69bb      	ldr	r3, [r7, #24]
 800da34:	f003 0320 	and.w	r3, r3, #32
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d104      	bne.n	800da46 <HAL_UART_IRQHandler+0xee>
 800da3c:	697b      	ldr	r3, [r7, #20]
 800da3e:	f003 0301 	and.w	r3, r3, #1
 800da42:	2b00      	cmp	r3, #0
 800da44:	d005      	beq.n	800da52 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da4a:	f043 0208 	orr.w	r2, r3, #8
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da56:	2b00      	cmp	r3, #0
 800da58:	d078      	beq.n	800db4c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800da5a:	69fb      	ldr	r3, [r7, #28]
 800da5c:	f003 0320 	and.w	r3, r3, #32
 800da60:	2b00      	cmp	r3, #0
 800da62:	d007      	beq.n	800da74 <HAL_UART_IRQHandler+0x11c>
 800da64:	69bb      	ldr	r3, [r7, #24]
 800da66:	f003 0320 	and.w	r3, r3, #32
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d002      	beq.n	800da74 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800da6e:	6878      	ldr	r0, [r7, #4]
 800da70:	f000 f9c7 	bl	800de02 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	695b      	ldr	r3, [r3, #20]
 800da7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da7e:	2b40      	cmp	r3, #64	; 0x40
 800da80:	bf0c      	ite	eq
 800da82:	2301      	moveq	r3, #1
 800da84:	2300      	movne	r3, #0
 800da86:	b2db      	uxtb	r3, r3
 800da88:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da8e:	f003 0308 	and.w	r3, r3, #8
 800da92:	2b00      	cmp	r3, #0
 800da94:	d102      	bne.n	800da9c <HAL_UART_IRQHandler+0x144>
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d031      	beq.n	800db00 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800da9c:	6878      	ldr	r0, [r7, #4]
 800da9e:	f000 f910 	bl	800dcc2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	695b      	ldr	r3, [r3, #20]
 800daa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800daac:	2b40      	cmp	r3, #64	; 0x40
 800daae:	d123      	bne.n	800daf8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	695a      	ldr	r2, [r3, #20]
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dabe:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d013      	beq.n	800daf0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dacc:	4a21      	ldr	r2, [pc, #132]	; (800db54 <HAL_UART_IRQHandler+0x1fc>)
 800dace:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dad4:	4618      	mov	r0, r3
 800dad6:	f7fc ffa7 	bl	800aa28 <HAL_DMA_Abort_IT>
 800dada:	4603      	mov	r3, r0
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d016      	beq.n	800db0e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dae6:	687a      	ldr	r2, [r7, #4]
 800dae8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800daea:	4610      	mov	r0, r2
 800daec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800daee:	e00e      	b.n	800db0e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800daf0:	6878      	ldr	r0, [r7, #4]
 800daf2:	f000 f845 	bl	800db80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800daf6:	e00a      	b.n	800db0e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800daf8:	6878      	ldr	r0, [r7, #4]
 800dafa:	f000 f841 	bl	800db80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dafe:	e006      	b.n	800db0e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800db00:	6878      	ldr	r0, [r7, #4]
 800db02:	f000 f83d 	bl	800db80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	2200      	movs	r2, #0
 800db0a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800db0c:	e01e      	b.n	800db4c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800db0e:	bf00      	nop
    return;
 800db10:	e01c      	b.n	800db4c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800db12:	69fb      	ldr	r3, [r7, #28]
 800db14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d008      	beq.n	800db2e <HAL_UART_IRQHandler+0x1d6>
 800db1c:	69bb      	ldr	r3, [r7, #24]
 800db1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db22:	2b00      	cmp	r3, #0
 800db24:	d003      	beq.n	800db2e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800db26:	6878      	ldr	r0, [r7, #4]
 800db28:	f000 f8fd 	bl	800dd26 <UART_Transmit_IT>
    return;
 800db2c:	e00f      	b.n	800db4e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800db2e:	69fb      	ldr	r3, [r7, #28]
 800db30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db34:	2b00      	cmp	r3, #0
 800db36:	d00a      	beq.n	800db4e <HAL_UART_IRQHandler+0x1f6>
 800db38:	69bb      	ldr	r3, [r7, #24]
 800db3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d005      	beq.n	800db4e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800db42:	6878      	ldr	r0, [r7, #4]
 800db44:	f000 f945 	bl	800ddd2 <UART_EndTransmit_IT>
    return;
 800db48:	bf00      	nop
 800db4a:	e000      	b.n	800db4e <HAL_UART_IRQHandler+0x1f6>
    return;
 800db4c:	bf00      	nop
  }
}
 800db4e:	3720      	adds	r7, #32
 800db50:	46bd      	mov	sp, r7
 800db52:	bd80      	pop	{r7, pc}
 800db54:	0800dcff 	.word	0x0800dcff

0800db58 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800db58:	b480      	push	{r7}
 800db5a:	b083      	sub	sp, #12
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800db60:	bf00      	nop
 800db62:	370c      	adds	r7, #12
 800db64:	46bd      	mov	sp, r7
 800db66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6a:	4770      	bx	lr

0800db6c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800db6c:	b480      	push	{r7}
 800db6e:	b083      	sub	sp, #12
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800db74:	bf00      	nop
 800db76:	370c      	adds	r7, #12
 800db78:	46bd      	mov	sp, r7
 800db7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db7e:	4770      	bx	lr

0800db80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800db80:	b480      	push	{r7}
 800db82:	b083      	sub	sp, #12
 800db84:	af00      	add	r7, sp, #0
 800db86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800db88:	bf00      	nop
 800db8a:	370c      	adds	r7, #12
 800db8c:	46bd      	mov	sp, r7
 800db8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db92:	4770      	bx	lr

0800db94 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b084      	sub	sp, #16
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dba0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d113      	bne.n	800dbd8 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	695a      	ldr	r2, [r3, #20]
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dbc4:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	68da      	ldr	r2, [r3, #12]
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dbd4:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800dbd6:	e002      	b.n	800dbde <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800dbd8:	68f8      	ldr	r0, [r7, #12]
 800dbda:	f7fc fc87 	bl	800a4ec <HAL_UART_TxCpltCallback>
}
 800dbde:	bf00      	nop
 800dbe0:	3710      	adds	r7, #16
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	bd80      	pop	{r7, pc}

0800dbe6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800dbe6:	b580      	push	{r7, lr}
 800dbe8:	b084      	sub	sp, #16
 800dbea:	af00      	add	r7, sp, #0
 800dbec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbf2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800dbf4:	68f8      	ldr	r0, [r7, #12]
 800dbf6:	f7ff ffaf 	bl	800db58 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dbfa:	bf00      	nop
 800dbfc:	3710      	adds	r7, #16
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	bd80      	pop	{r7, pc}

0800dc02 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800dc02:	b580      	push	{r7, lr}
 800dc04:	b084      	sub	sp, #16
 800dc06:	af00      	add	r7, sp, #0
 800dc08:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc12:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800dc14:	68bb      	ldr	r3, [r7, #8]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	695b      	ldr	r3, [r3, #20]
 800dc1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc1e:	2b80      	cmp	r3, #128	; 0x80
 800dc20:	bf0c      	ite	eq
 800dc22:	2301      	moveq	r3, #1
 800dc24:	2300      	movne	r3, #0
 800dc26:	b2db      	uxtb	r3, r3
 800dc28:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800dc2a:	68bb      	ldr	r3, [r7, #8]
 800dc2c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800dc30:	b2db      	uxtb	r3, r3
 800dc32:	2b21      	cmp	r3, #33	; 0x21
 800dc34:	d108      	bne.n	800dc48 <UART_DMAError+0x46>
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d005      	beq.n	800dc48 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800dc3c:	68bb      	ldr	r3, [r7, #8]
 800dc3e:	2200      	movs	r2, #0
 800dc40:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800dc42:	68b8      	ldr	r0, [r7, #8]
 800dc44:	f000 f827 	bl	800dc96 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800dc48:	68bb      	ldr	r3, [r7, #8]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	695b      	ldr	r3, [r3, #20]
 800dc4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc52:	2b40      	cmp	r3, #64	; 0x40
 800dc54:	bf0c      	ite	eq
 800dc56:	2301      	moveq	r3, #1
 800dc58:	2300      	movne	r3, #0
 800dc5a:	b2db      	uxtb	r3, r3
 800dc5c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800dc5e:	68bb      	ldr	r3, [r7, #8]
 800dc60:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800dc64:	b2db      	uxtb	r3, r3
 800dc66:	2b22      	cmp	r3, #34	; 0x22
 800dc68:	d108      	bne.n	800dc7c <UART_DMAError+0x7a>
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d005      	beq.n	800dc7c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800dc70:	68bb      	ldr	r3, [r7, #8]
 800dc72:	2200      	movs	r2, #0
 800dc74:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800dc76:	68b8      	ldr	r0, [r7, #8]
 800dc78:	f000 f823 	bl	800dcc2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800dc7c:	68bb      	ldr	r3, [r7, #8]
 800dc7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc80:	f043 0210 	orr.w	r2, r3, #16
 800dc84:	68bb      	ldr	r3, [r7, #8]
 800dc86:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dc88:	68b8      	ldr	r0, [r7, #8]
 800dc8a:	f7ff ff79 	bl	800db80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dc8e:	bf00      	nop
 800dc90:	3710      	adds	r7, #16
 800dc92:	46bd      	mov	sp, r7
 800dc94:	bd80      	pop	{r7, pc}

0800dc96 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800dc96:	b480      	push	{r7}
 800dc98:	b083      	sub	sp, #12
 800dc9a:	af00      	add	r7, sp, #0
 800dc9c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	68da      	ldr	r2, [r3, #12]
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800dcac:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	2220      	movs	r2, #32
 800dcb2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800dcb6:	bf00      	nop
 800dcb8:	370c      	adds	r7, #12
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc0:	4770      	bx	lr

0800dcc2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dcc2:	b480      	push	{r7}
 800dcc4:	b083      	sub	sp, #12
 800dcc6:	af00      	add	r7, sp, #0
 800dcc8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	68da      	ldr	r2, [r3, #12]
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800dcd8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	695a      	ldr	r2, [r3, #20]
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	f022 0201 	bic.w	r2, r2, #1
 800dce8:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	2220      	movs	r2, #32
 800dcee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800dcf2:	bf00      	nop
 800dcf4:	370c      	adds	r7, #12
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfc:	4770      	bx	lr

0800dcfe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dcfe:	b580      	push	{r7, lr}
 800dd00:	b084      	sub	sp, #16
 800dd02:	af00      	add	r7, sp, #0
 800dd04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd0a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	2200      	movs	r2, #0
 800dd10:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	2200      	movs	r2, #0
 800dd16:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dd18:	68f8      	ldr	r0, [r7, #12]
 800dd1a:	f7ff ff31 	bl	800db80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dd1e:	bf00      	nop
 800dd20:	3710      	adds	r7, #16
 800dd22:	46bd      	mov	sp, r7
 800dd24:	bd80      	pop	{r7, pc}

0800dd26 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800dd26:	b480      	push	{r7}
 800dd28:	b085      	sub	sp, #20
 800dd2a:	af00      	add	r7, sp, #0
 800dd2c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800dd34:	b2db      	uxtb	r3, r3
 800dd36:	2b21      	cmp	r3, #33	; 0x21
 800dd38:	d144      	bne.n	800ddc4 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	689b      	ldr	r3, [r3, #8]
 800dd3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dd42:	d11a      	bne.n	800dd7a <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	6a1b      	ldr	r3, [r3, #32]
 800dd48:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	881b      	ldrh	r3, [r3, #0]
 800dd4e:	461a      	mov	r2, r3
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dd58:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	691b      	ldr	r3, [r3, #16]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d105      	bne.n	800dd6e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	6a1b      	ldr	r3, [r3, #32]
 800dd66:	1c9a      	adds	r2, r3, #2
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	621a      	str	r2, [r3, #32]
 800dd6c:	e00e      	b.n	800dd8c <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	6a1b      	ldr	r3, [r3, #32]
 800dd72:	1c5a      	adds	r2, r3, #1
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	621a      	str	r2, [r3, #32]
 800dd78:	e008      	b.n	800dd8c <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	6a1b      	ldr	r3, [r3, #32]
 800dd7e:	1c59      	adds	r1, r3, #1
 800dd80:	687a      	ldr	r2, [r7, #4]
 800dd82:	6211      	str	r1, [r2, #32]
 800dd84:	781a      	ldrb	r2, [r3, #0]
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800dd90:	b29b      	uxth	r3, r3
 800dd92:	3b01      	subs	r3, #1
 800dd94:	b29b      	uxth	r3, r3
 800dd96:	687a      	ldr	r2, [r7, #4]
 800dd98:	4619      	mov	r1, r3
 800dd9a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d10f      	bne.n	800ddc0 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	68da      	ldr	r2, [r3, #12]
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ddae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	68da      	ldr	r2, [r3, #12]
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ddbe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	e000      	b.n	800ddc6 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800ddc4:	2302      	movs	r3, #2
  }
}
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	3714      	adds	r7, #20
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd0:	4770      	bx	lr

0800ddd2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ddd2:	b580      	push	{r7, lr}
 800ddd4:	b082      	sub	sp, #8
 800ddd6:	af00      	add	r7, sp, #0
 800ddd8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	68da      	ldr	r2, [r3, #12]
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dde8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	2220      	movs	r2, #32
 800ddee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ddf2:	6878      	ldr	r0, [r7, #4]
 800ddf4:	f7fc fb7a 	bl	800a4ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ddf8:	2300      	movs	r3, #0
}
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	3708      	adds	r7, #8
 800ddfe:	46bd      	mov	sp, r7
 800de00:	bd80      	pop	{r7, pc}

0800de02 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800de02:	b580      	push	{r7, lr}
 800de04:	b084      	sub	sp, #16
 800de06:	af00      	add	r7, sp, #0
 800de08:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800de10:	b2db      	uxtb	r3, r3
 800de12:	2b22      	cmp	r3, #34	; 0x22
 800de14:	d171      	bne.n	800defa <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	689b      	ldr	r3, [r3, #8]
 800de1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de1e:	d123      	bne.n	800de68 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de24:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	691b      	ldr	r3, [r3, #16]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d10e      	bne.n	800de4c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	685b      	ldr	r3, [r3, #4]
 800de34:	b29b      	uxth	r3, r3
 800de36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de3a:	b29a      	uxth	r2, r3
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de44:	1c9a      	adds	r2, r3, #2
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	629a      	str	r2, [r3, #40]	; 0x28
 800de4a:	e029      	b.n	800dea0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	685b      	ldr	r3, [r3, #4]
 800de52:	b29b      	uxth	r3, r3
 800de54:	b2db      	uxtb	r3, r3
 800de56:	b29a      	uxth	r2, r3
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de60:	1c5a      	adds	r2, r3, #1
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	629a      	str	r2, [r3, #40]	; 0x28
 800de66:	e01b      	b.n	800dea0 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	691b      	ldr	r3, [r3, #16]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d10a      	bne.n	800de86 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	6858      	ldr	r0, [r3, #4]
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de7a:	1c59      	adds	r1, r3, #1
 800de7c:	687a      	ldr	r2, [r7, #4]
 800de7e:	6291      	str	r1, [r2, #40]	; 0x28
 800de80:	b2c2      	uxtb	r2, r0
 800de82:	701a      	strb	r2, [r3, #0]
 800de84:	e00c      	b.n	800dea0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	685b      	ldr	r3, [r3, #4]
 800de8c:	b2da      	uxtb	r2, r3
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de92:	1c58      	adds	r0, r3, #1
 800de94:	6879      	ldr	r1, [r7, #4]
 800de96:	6288      	str	r0, [r1, #40]	; 0x28
 800de98:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800de9c:	b2d2      	uxtb	r2, r2
 800de9e:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800dea4:	b29b      	uxth	r3, r3
 800dea6:	3b01      	subs	r3, #1
 800dea8:	b29b      	uxth	r3, r3
 800deaa:	687a      	ldr	r2, [r7, #4]
 800deac:	4619      	mov	r1, r3
 800deae:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d120      	bne.n	800def6 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	68da      	ldr	r2, [r3, #12]
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	f022 0220 	bic.w	r2, r2, #32
 800dec2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	68da      	ldr	r2, [r3, #12]
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ded2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	695a      	ldr	r2, [r3, #20]
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	f022 0201 	bic.w	r2, r2, #1
 800dee2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	2220      	movs	r2, #32
 800dee8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800deec:	6878      	ldr	r0, [r7, #4]
 800deee:	f7ff fe3d 	bl	800db6c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800def2:	2300      	movs	r3, #0
 800def4:	e002      	b.n	800defc <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800def6:	2300      	movs	r3, #0
 800def8:	e000      	b.n	800defc <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800defa:	2302      	movs	r3, #2
  }
}
 800defc:	4618      	mov	r0, r3
 800defe:	3710      	adds	r7, #16
 800df00:	46bd      	mov	sp, r7
 800df02:	bd80      	pop	{r7, pc}

0800df04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800df04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df08:	b085      	sub	sp, #20
 800df0a:	af00      	add	r7, sp, #0
 800df0c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	691b      	ldr	r3, [r3, #16]
 800df14:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	68da      	ldr	r2, [r3, #12]
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	430a      	orrs	r2, r1
 800df22:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	689a      	ldr	r2, [r3, #8]
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	691b      	ldr	r3, [r3, #16]
 800df2c:	431a      	orrs	r2, r3
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	695b      	ldr	r3, [r3, #20]
 800df32:	431a      	orrs	r2, r3
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	69db      	ldr	r3, [r3, #28]
 800df38:	4313      	orrs	r3, r2
 800df3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	68db      	ldr	r3, [r3, #12]
 800df42:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800df46:	f023 030c 	bic.w	r3, r3, #12
 800df4a:	687a      	ldr	r2, [r7, #4]
 800df4c:	6812      	ldr	r2, [r2, #0]
 800df4e:	68f9      	ldr	r1, [r7, #12]
 800df50:	430b      	orrs	r3, r1
 800df52:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	695b      	ldr	r3, [r3, #20]
 800df5a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	699a      	ldr	r2, [r3, #24]
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	430a      	orrs	r2, r1
 800df68:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	69db      	ldr	r3, [r3, #28]
 800df6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800df72:	f040 818b 	bne.w	800e28c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	4ac1      	ldr	r2, [pc, #772]	; (800e280 <UART_SetConfig+0x37c>)
 800df7c:	4293      	cmp	r3, r2
 800df7e:	d005      	beq.n	800df8c <UART_SetConfig+0x88>
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	4abf      	ldr	r2, [pc, #764]	; (800e284 <UART_SetConfig+0x380>)
 800df86:	4293      	cmp	r3, r2
 800df88:	f040 80bd 	bne.w	800e106 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800df8c:	f7fe ffc0 	bl	800cf10 <HAL_RCC_GetPCLK2Freq>
 800df90:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800df92:	68bb      	ldr	r3, [r7, #8]
 800df94:	461d      	mov	r5, r3
 800df96:	f04f 0600 	mov.w	r6, #0
 800df9a:	46a8      	mov	r8, r5
 800df9c:	46b1      	mov	r9, r6
 800df9e:	eb18 0308 	adds.w	r3, r8, r8
 800dfa2:	eb49 0409 	adc.w	r4, r9, r9
 800dfa6:	4698      	mov	r8, r3
 800dfa8:	46a1      	mov	r9, r4
 800dfaa:	eb18 0805 	adds.w	r8, r8, r5
 800dfae:	eb49 0906 	adc.w	r9, r9, r6
 800dfb2:	f04f 0100 	mov.w	r1, #0
 800dfb6:	f04f 0200 	mov.w	r2, #0
 800dfba:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800dfbe:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800dfc2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800dfc6:	4688      	mov	r8, r1
 800dfc8:	4691      	mov	r9, r2
 800dfca:	eb18 0005 	adds.w	r0, r8, r5
 800dfce:	eb49 0106 	adc.w	r1, r9, r6
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	685b      	ldr	r3, [r3, #4]
 800dfd6:	461d      	mov	r5, r3
 800dfd8:	f04f 0600 	mov.w	r6, #0
 800dfdc:	196b      	adds	r3, r5, r5
 800dfde:	eb46 0406 	adc.w	r4, r6, r6
 800dfe2:	461a      	mov	r2, r3
 800dfe4:	4623      	mov	r3, r4
 800dfe6:	f7f2 fe4f 	bl	8000c88 <__aeabi_uldivmod>
 800dfea:	4603      	mov	r3, r0
 800dfec:	460c      	mov	r4, r1
 800dfee:	461a      	mov	r2, r3
 800dff0:	4ba5      	ldr	r3, [pc, #660]	; (800e288 <UART_SetConfig+0x384>)
 800dff2:	fba3 2302 	umull	r2, r3, r3, r2
 800dff6:	095b      	lsrs	r3, r3, #5
 800dff8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800dffc:	68bb      	ldr	r3, [r7, #8]
 800dffe:	461d      	mov	r5, r3
 800e000:	f04f 0600 	mov.w	r6, #0
 800e004:	46a9      	mov	r9, r5
 800e006:	46b2      	mov	sl, r6
 800e008:	eb19 0309 	adds.w	r3, r9, r9
 800e00c:	eb4a 040a 	adc.w	r4, sl, sl
 800e010:	4699      	mov	r9, r3
 800e012:	46a2      	mov	sl, r4
 800e014:	eb19 0905 	adds.w	r9, r9, r5
 800e018:	eb4a 0a06 	adc.w	sl, sl, r6
 800e01c:	f04f 0100 	mov.w	r1, #0
 800e020:	f04f 0200 	mov.w	r2, #0
 800e024:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e028:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e02c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e030:	4689      	mov	r9, r1
 800e032:	4692      	mov	sl, r2
 800e034:	eb19 0005 	adds.w	r0, r9, r5
 800e038:	eb4a 0106 	adc.w	r1, sl, r6
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	685b      	ldr	r3, [r3, #4]
 800e040:	461d      	mov	r5, r3
 800e042:	f04f 0600 	mov.w	r6, #0
 800e046:	196b      	adds	r3, r5, r5
 800e048:	eb46 0406 	adc.w	r4, r6, r6
 800e04c:	461a      	mov	r2, r3
 800e04e:	4623      	mov	r3, r4
 800e050:	f7f2 fe1a 	bl	8000c88 <__aeabi_uldivmod>
 800e054:	4603      	mov	r3, r0
 800e056:	460c      	mov	r4, r1
 800e058:	461a      	mov	r2, r3
 800e05a:	4b8b      	ldr	r3, [pc, #556]	; (800e288 <UART_SetConfig+0x384>)
 800e05c:	fba3 1302 	umull	r1, r3, r3, r2
 800e060:	095b      	lsrs	r3, r3, #5
 800e062:	2164      	movs	r1, #100	; 0x64
 800e064:	fb01 f303 	mul.w	r3, r1, r3
 800e068:	1ad3      	subs	r3, r2, r3
 800e06a:	00db      	lsls	r3, r3, #3
 800e06c:	3332      	adds	r3, #50	; 0x32
 800e06e:	4a86      	ldr	r2, [pc, #536]	; (800e288 <UART_SetConfig+0x384>)
 800e070:	fba2 2303 	umull	r2, r3, r2, r3
 800e074:	095b      	lsrs	r3, r3, #5
 800e076:	005b      	lsls	r3, r3, #1
 800e078:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e07c:	4498      	add	r8, r3
 800e07e:	68bb      	ldr	r3, [r7, #8]
 800e080:	461d      	mov	r5, r3
 800e082:	f04f 0600 	mov.w	r6, #0
 800e086:	46a9      	mov	r9, r5
 800e088:	46b2      	mov	sl, r6
 800e08a:	eb19 0309 	adds.w	r3, r9, r9
 800e08e:	eb4a 040a 	adc.w	r4, sl, sl
 800e092:	4699      	mov	r9, r3
 800e094:	46a2      	mov	sl, r4
 800e096:	eb19 0905 	adds.w	r9, r9, r5
 800e09a:	eb4a 0a06 	adc.w	sl, sl, r6
 800e09e:	f04f 0100 	mov.w	r1, #0
 800e0a2:	f04f 0200 	mov.w	r2, #0
 800e0a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e0aa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e0ae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e0b2:	4689      	mov	r9, r1
 800e0b4:	4692      	mov	sl, r2
 800e0b6:	eb19 0005 	adds.w	r0, r9, r5
 800e0ba:	eb4a 0106 	adc.w	r1, sl, r6
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	685b      	ldr	r3, [r3, #4]
 800e0c2:	461d      	mov	r5, r3
 800e0c4:	f04f 0600 	mov.w	r6, #0
 800e0c8:	196b      	adds	r3, r5, r5
 800e0ca:	eb46 0406 	adc.w	r4, r6, r6
 800e0ce:	461a      	mov	r2, r3
 800e0d0:	4623      	mov	r3, r4
 800e0d2:	f7f2 fdd9 	bl	8000c88 <__aeabi_uldivmod>
 800e0d6:	4603      	mov	r3, r0
 800e0d8:	460c      	mov	r4, r1
 800e0da:	461a      	mov	r2, r3
 800e0dc:	4b6a      	ldr	r3, [pc, #424]	; (800e288 <UART_SetConfig+0x384>)
 800e0de:	fba3 1302 	umull	r1, r3, r3, r2
 800e0e2:	095b      	lsrs	r3, r3, #5
 800e0e4:	2164      	movs	r1, #100	; 0x64
 800e0e6:	fb01 f303 	mul.w	r3, r1, r3
 800e0ea:	1ad3      	subs	r3, r2, r3
 800e0ec:	00db      	lsls	r3, r3, #3
 800e0ee:	3332      	adds	r3, #50	; 0x32
 800e0f0:	4a65      	ldr	r2, [pc, #404]	; (800e288 <UART_SetConfig+0x384>)
 800e0f2:	fba2 2303 	umull	r2, r3, r2, r3
 800e0f6:	095b      	lsrs	r3, r3, #5
 800e0f8:	f003 0207 	and.w	r2, r3, #7
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	4442      	add	r2, r8
 800e102:	609a      	str	r2, [r3, #8]
 800e104:	e26f      	b.n	800e5e6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800e106:	f7fe feef 	bl	800cee8 <HAL_RCC_GetPCLK1Freq>
 800e10a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e10c:	68bb      	ldr	r3, [r7, #8]
 800e10e:	461d      	mov	r5, r3
 800e110:	f04f 0600 	mov.w	r6, #0
 800e114:	46a8      	mov	r8, r5
 800e116:	46b1      	mov	r9, r6
 800e118:	eb18 0308 	adds.w	r3, r8, r8
 800e11c:	eb49 0409 	adc.w	r4, r9, r9
 800e120:	4698      	mov	r8, r3
 800e122:	46a1      	mov	r9, r4
 800e124:	eb18 0805 	adds.w	r8, r8, r5
 800e128:	eb49 0906 	adc.w	r9, r9, r6
 800e12c:	f04f 0100 	mov.w	r1, #0
 800e130:	f04f 0200 	mov.w	r2, #0
 800e134:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800e138:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800e13c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800e140:	4688      	mov	r8, r1
 800e142:	4691      	mov	r9, r2
 800e144:	eb18 0005 	adds.w	r0, r8, r5
 800e148:	eb49 0106 	adc.w	r1, r9, r6
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	685b      	ldr	r3, [r3, #4]
 800e150:	461d      	mov	r5, r3
 800e152:	f04f 0600 	mov.w	r6, #0
 800e156:	196b      	adds	r3, r5, r5
 800e158:	eb46 0406 	adc.w	r4, r6, r6
 800e15c:	461a      	mov	r2, r3
 800e15e:	4623      	mov	r3, r4
 800e160:	f7f2 fd92 	bl	8000c88 <__aeabi_uldivmod>
 800e164:	4603      	mov	r3, r0
 800e166:	460c      	mov	r4, r1
 800e168:	461a      	mov	r2, r3
 800e16a:	4b47      	ldr	r3, [pc, #284]	; (800e288 <UART_SetConfig+0x384>)
 800e16c:	fba3 2302 	umull	r2, r3, r3, r2
 800e170:	095b      	lsrs	r3, r3, #5
 800e172:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800e176:	68bb      	ldr	r3, [r7, #8]
 800e178:	461d      	mov	r5, r3
 800e17a:	f04f 0600 	mov.w	r6, #0
 800e17e:	46a9      	mov	r9, r5
 800e180:	46b2      	mov	sl, r6
 800e182:	eb19 0309 	adds.w	r3, r9, r9
 800e186:	eb4a 040a 	adc.w	r4, sl, sl
 800e18a:	4699      	mov	r9, r3
 800e18c:	46a2      	mov	sl, r4
 800e18e:	eb19 0905 	adds.w	r9, r9, r5
 800e192:	eb4a 0a06 	adc.w	sl, sl, r6
 800e196:	f04f 0100 	mov.w	r1, #0
 800e19a:	f04f 0200 	mov.w	r2, #0
 800e19e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e1a2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e1a6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e1aa:	4689      	mov	r9, r1
 800e1ac:	4692      	mov	sl, r2
 800e1ae:	eb19 0005 	adds.w	r0, r9, r5
 800e1b2:	eb4a 0106 	adc.w	r1, sl, r6
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	685b      	ldr	r3, [r3, #4]
 800e1ba:	461d      	mov	r5, r3
 800e1bc:	f04f 0600 	mov.w	r6, #0
 800e1c0:	196b      	adds	r3, r5, r5
 800e1c2:	eb46 0406 	adc.w	r4, r6, r6
 800e1c6:	461a      	mov	r2, r3
 800e1c8:	4623      	mov	r3, r4
 800e1ca:	f7f2 fd5d 	bl	8000c88 <__aeabi_uldivmod>
 800e1ce:	4603      	mov	r3, r0
 800e1d0:	460c      	mov	r4, r1
 800e1d2:	461a      	mov	r2, r3
 800e1d4:	4b2c      	ldr	r3, [pc, #176]	; (800e288 <UART_SetConfig+0x384>)
 800e1d6:	fba3 1302 	umull	r1, r3, r3, r2
 800e1da:	095b      	lsrs	r3, r3, #5
 800e1dc:	2164      	movs	r1, #100	; 0x64
 800e1de:	fb01 f303 	mul.w	r3, r1, r3
 800e1e2:	1ad3      	subs	r3, r2, r3
 800e1e4:	00db      	lsls	r3, r3, #3
 800e1e6:	3332      	adds	r3, #50	; 0x32
 800e1e8:	4a27      	ldr	r2, [pc, #156]	; (800e288 <UART_SetConfig+0x384>)
 800e1ea:	fba2 2303 	umull	r2, r3, r2, r3
 800e1ee:	095b      	lsrs	r3, r3, #5
 800e1f0:	005b      	lsls	r3, r3, #1
 800e1f2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e1f6:	4498      	add	r8, r3
 800e1f8:	68bb      	ldr	r3, [r7, #8]
 800e1fa:	461d      	mov	r5, r3
 800e1fc:	f04f 0600 	mov.w	r6, #0
 800e200:	46a9      	mov	r9, r5
 800e202:	46b2      	mov	sl, r6
 800e204:	eb19 0309 	adds.w	r3, r9, r9
 800e208:	eb4a 040a 	adc.w	r4, sl, sl
 800e20c:	4699      	mov	r9, r3
 800e20e:	46a2      	mov	sl, r4
 800e210:	eb19 0905 	adds.w	r9, r9, r5
 800e214:	eb4a 0a06 	adc.w	sl, sl, r6
 800e218:	f04f 0100 	mov.w	r1, #0
 800e21c:	f04f 0200 	mov.w	r2, #0
 800e220:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e224:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e228:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e22c:	4689      	mov	r9, r1
 800e22e:	4692      	mov	sl, r2
 800e230:	eb19 0005 	adds.w	r0, r9, r5
 800e234:	eb4a 0106 	adc.w	r1, sl, r6
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	685b      	ldr	r3, [r3, #4]
 800e23c:	461d      	mov	r5, r3
 800e23e:	f04f 0600 	mov.w	r6, #0
 800e242:	196b      	adds	r3, r5, r5
 800e244:	eb46 0406 	adc.w	r4, r6, r6
 800e248:	461a      	mov	r2, r3
 800e24a:	4623      	mov	r3, r4
 800e24c:	f7f2 fd1c 	bl	8000c88 <__aeabi_uldivmod>
 800e250:	4603      	mov	r3, r0
 800e252:	460c      	mov	r4, r1
 800e254:	461a      	mov	r2, r3
 800e256:	4b0c      	ldr	r3, [pc, #48]	; (800e288 <UART_SetConfig+0x384>)
 800e258:	fba3 1302 	umull	r1, r3, r3, r2
 800e25c:	095b      	lsrs	r3, r3, #5
 800e25e:	2164      	movs	r1, #100	; 0x64
 800e260:	fb01 f303 	mul.w	r3, r1, r3
 800e264:	1ad3      	subs	r3, r2, r3
 800e266:	00db      	lsls	r3, r3, #3
 800e268:	3332      	adds	r3, #50	; 0x32
 800e26a:	4a07      	ldr	r2, [pc, #28]	; (800e288 <UART_SetConfig+0x384>)
 800e26c:	fba2 2303 	umull	r2, r3, r2, r3
 800e270:	095b      	lsrs	r3, r3, #5
 800e272:	f003 0207 	and.w	r2, r3, #7
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	4442      	add	r2, r8
 800e27c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800e27e:	e1b2      	b.n	800e5e6 <UART_SetConfig+0x6e2>
 800e280:	40011000 	.word	0x40011000
 800e284:	40011400 	.word	0x40011400
 800e288:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	4ad7      	ldr	r2, [pc, #860]	; (800e5f0 <UART_SetConfig+0x6ec>)
 800e292:	4293      	cmp	r3, r2
 800e294:	d005      	beq.n	800e2a2 <UART_SetConfig+0x39e>
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	4ad6      	ldr	r2, [pc, #856]	; (800e5f4 <UART_SetConfig+0x6f0>)
 800e29c:	4293      	cmp	r3, r2
 800e29e:	f040 80d1 	bne.w	800e444 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800e2a2:	f7fe fe35 	bl	800cf10 <HAL_RCC_GetPCLK2Freq>
 800e2a6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e2a8:	68bb      	ldr	r3, [r7, #8]
 800e2aa:	469a      	mov	sl, r3
 800e2ac:	f04f 0b00 	mov.w	fp, #0
 800e2b0:	46d0      	mov	r8, sl
 800e2b2:	46d9      	mov	r9, fp
 800e2b4:	eb18 0308 	adds.w	r3, r8, r8
 800e2b8:	eb49 0409 	adc.w	r4, r9, r9
 800e2bc:	4698      	mov	r8, r3
 800e2be:	46a1      	mov	r9, r4
 800e2c0:	eb18 080a 	adds.w	r8, r8, sl
 800e2c4:	eb49 090b 	adc.w	r9, r9, fp
 800e2c8:	f04f 0100 	mov.w	r1, #0
 800e2cc:	f04f 0200 	mov.w	r2, #0
 800e2d0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800e2d4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800e2d8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800e2dc:	4688      	mov	r8, r1
 800e2de:	4691      	mov	r9, r2
 800e2e0:	eb1a 0508 	adds.w	r5, sl, r8
 800e2e4:	eb4b 0609 	adc.w	r6, fp, r9
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	685b      	ldr	r3, [r3, #4]
 800e2ec:	4619      	mov	r1, r3
 800e2ee:	f04f 0200 	mov.w	r2, #0
 800e2f2:	f04f 0300 	mov.w	r3, #0
 800e2f6:	f04f 0400 	mov.w	r4, #0
 800e2fa:	0094      	lsls	r4, r2, #2
 800e2fc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e300:	008b      	lsls	r3, r1, #2
 800e302:	461a      	mov	r2, r3
 800e304:	4623      	mov	r3, r4
 800e306:	4628      	mov	r0, r5
 800e308:	4631      	mov	r1, r6
 800e30a:	f7f2 fcbd 	bl	8000c88 <__aeabi_uldivmod>
 800e30e:	4603      	mov	r3, r0
 800e310:	460c      	mov	r4, r1
 800e312:	461a      	mov	r2, r3
 800e314:	4bb8      	ldr	r3, [pc, #736]	; (800e5f8 <UART_SetConfig+0x6f4>)
 800e316:	fba3 2302 	umull	r2, r3, r3, r2
 800e31a:	095b      	lsrs	r3, r3, #5
 800e31c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800e320:	68bb      	ldr	r3, [r7, #8]
 800e322:	469b      	mov	fp, r3
 800e324:	f04f 0c00 	mov.w	ip, #0
 800e328:	46d9      	mov	r9, fp
 800e32a:	46e2      	mov	sl, ip
 800e32c:	eb19 0309 	adds.w	r3, r9, r9
 800e330:	eb4a 040a 	adc.w	r4, sl, sl
 800e334:	4699      	mov	r9, r3
 800e336:	46a2      	mov	sl, r4
 800e338:	eb19 090b 	adds.w	r9, r9, fp
 800e33c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800e340:	f04f 0100 	mov.w	r1, #0
 800e344:	f04f 0200 	mov.w	r2, #0
 800e348:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e34c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e350:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e354:	4689      	mov	r9, r1
 800e356:	4692      	mov	sl, r2
 800e358:	eb1b 0509 	adds.w	r5, fp, r9
 800e35c:	eb4c 060a 	adc.w	r6, ip, sl
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	685b      	ldr	r3, [r3, #4]
 800e364:	4619      	mov	r1, r3
 800e366:	f04f 0200 	mov.w	r2, #0
 800e36a:	f04f 0300 	mov.w	r3, #0
 800e36e:	f04f 0400 	mov.w	r4, #0
 800e372:	0094      	lsls	r4, r2, #2
 800e374:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e378:	008b      	lsls	r3, r1, #2
 800e37a:	461a      	mov	r2, r3
 800e37c:	4623      	mov	r3, r4
 800e37e:	4628      	mov	r0, r5
 800e380:	4631      	mov	r1, r6
 800e382:	f7f2 fc81 	bl	8000c88 <__aeabi_uldivmod>
 800e386:	4603      	mov	r3, r0
 800e388:	460c      	mov	r4, r1
 800e38a:	461a      	mov	r2, r3
 800e38c:	4b9a      	ldr	r3, [pc, #616]	; (800e5f8 <UART_SetConfig+0x6f4>)
 800e38e:	fba3 1302 	umull	r1, r3, r3, r2
 800e392:	095b      	lsrs	r3, r3, #5
 800e394:	2164      	movs	r1, #100	; 0x64
 800e396:	fb01 f303 	mul.w	r3, r1, r3
 800e39a:	1ad3      	subs	r3, r2, r3
 800e39c:	011b      	lsls	r3, r3, #4
 800e39e:	3332      	adds	r3, #50	; 0x32
 800e3a0:	4a95      	ldr	r2, [pc, #596]	; (800e5f8 <UART_SetConfig+0x6f4>)
 800e3a2:	fba2 2303 	umull	r2, r3, r2, r3
 800e3a6:	095b      	lsrs	r3, r3, #5
 800e3a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e3ac:	4498      	add	r8, r3
 800e3ae:	68bb      	ldr	r3, [r7, #8]
 800e3b0:	469b      	mov	fp, r3
 800e3b2:	f04f 0c00 	mov.w	ip, #0
 800e3b6:	46d9      	mov	r9, fp
 800e3b8:	46e2      	mov	sl, ip
 800e3ba:	eb19 0309 	adds.w	r3, r9, r9
 800e3be:	eb4a 040a 	adc.w	r4, sl, sl
 800e3c2:	4699      	mov	r9, r3
 800e3c4:	46a2      	mov	sl, r4
 800e3c6:	eb19 090b 	adds.w	r9, r9, fp
 800e3ca:	eb4a 0a0c 	adc.w	sl, sl, ip
 800e3ce:	f04f 0100 	mov.w	r1, #0
 800e3d2:	f04f 0200 	mov.w	r2, #0
 800e3d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e3da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e3de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e3e2:	4689      	mov	r9, r1
 800e3e4:	4692      	mov	sl, r2
 800e3e6:	eb1b 0509 	adds.w	r5, fp, r9
 800e3ea:	eb4c 060a 	adc.w	r6, ip, sl
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	685b      	ldr	r3, [r3, #4]
 800e3f2:	4619      	mov	r1, r3
 800e3f4:	f04f 0200 	mov.w	r2, #0
 800e3f8:	f04f 0300 	mov.w	r3, #0
 800e3fc:	f04f 0400 	mov.w	r4, #0
 800e400:	0094      	lsls	r4, r2, #2
 800e402:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e406:	008b      	lsls	r3, r1, #2
 800e408:	461a      	mov	r2, r3
 800e40a:	4623      	mov	r3, r4
 800e40c:	4628      	mov	r0, r5
 800e40e:	4631      	mov	r1, r6
 800e410:	f7f2 fc3a 	bl	8000c88 <__aeabi_uldivmod>
 800e414:	4603      	mov	r3, r0
 800e416:	460c      	mov	r4, r1
 800e418:	461a      	mov	r2, r3
 800e41a:	4b77      	ldr	r3, [pc, #476]	; (800e5f8 <UART_SetConfig+0x6f4>)
 800e41c:	fba3 1302 	umull	r1, r3, r3, r2
 800e420:	095b      	lsrs	r3, r3, #5
 800e422:	2164      	movs	r1, #100	; 0x64
 800e424:	fb01 f303 	mul.w	r3, r1, r3
 800e428:	1ad3      	subs	r3, r2, r3
 800e42a:	011b      	lsls	r3, r3, #4
 800e42c:	3332      	adds	r3, #50	; 0x32
 800e42e:	4a72      	ldr	r2, [pc, #456]	; (800e5f8 <UART_SetConfig+0x6f4>)
 800e430:	fba2 2303 	umull	r2, r3, r2, r3
 800e434:	095b      	lsrs	r3, r3, #5
 800e436:	f003 020f 	and.w	r2, r3, #15
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	4442      	add	r2, r8
 800e440:	609a      	str	r2, [r3, #8]
 800e442:	e0d0      	b.n	800e5e6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800e444:	f7fe fd50 	bl	800cee8 <HAL_RCC_GetPCLK1Freq>
 800e448:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e44a:	68bb      	ldr	r3, [r7, #8]
 800e44c:	469a      	mov	sl, r3
 800e44e:	f04f 0b00 	mov.w	fp, #0
 800e452:	46d0      	mov	r8, sl
 800e454:	46d9      	mov	r9, fp
 800e456:	eb18 0308 	adds.w	r3, r8, r8
 800e45a:	eb49 0409 	adc.w	r4, r9, r9
 800e45e:	4698      	mov	r8, r3
 800e460:	46a1      	mov	r9, r4
 800e462:	eb18 080a 	adds.w	r8, r8, sl
 800e466:	eb49 090b 	adc.w	r9, r9, fp
 800e46a:	f04f 0100 	mov.w	r1, #0
 800e46e:	f04f 0200 	mov.w	r2, #0
 800e472:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800e476:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800e47a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800e47e:	4688      	mov	r8, r1
 800e480:	4691      	mov	r9, r2
 800e482:	eb1a 0508 	adds.w	r5, sl, r8
 800e486:	eb4b 0609 	adc.w	r6, fp, r9
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	685b      	ldr	r3, [r3, #4]
 800e48e:	4619      	mov	r1, r3
 800e490:	f04f 0200 	mov.w	r2, #0
 800e494:	f04f 0300 	mov.w	r3, #0
 800e498:	f04f 0400 	mov.w	r4, #0
 800e49c:	0094      	lsls	r4, r2, #2
 800e49e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e4a2:	008b      	lsls	r3, r1, #2
 800e4a4:	461a      	mov	r2, r3
 800e4a6:	4623      	mov	r3, r4
 800e4a8:	4628      	mov	r0, r5
 800e4aa:	4631      	mov	r1, r6
 800e4ac:	f7f2 fbec 	bl	8000c88 <__aeabi_uldivmod>
 800e4b0:	4603      	mov	r3, r0
 800e4b2:	460c      	mov	r4, r1
 800e4b4:	461a      	mov	r2, r3
 800e4b6:	4b50      	ldr	r3, [pc, #320]	; (800e5f8 <UART_SetConfig+0x6f4>)
 800e4b8:	fba3 2302 	umull	r2, r3, r3, r2
 800e4bc:	095b      	lsrs	r3, r3, #5
 800e4be:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800e4c2:	68bb      	ldr	r3, [r7, #8]
 800e4c4:	469b      	mov	fp, r3
 800e4c6:	f04f 0c00 	mov.w	ip, #0
 800e4ca:	46d9      	mov	r9, fp
 800e4cc:	46e2      	mov	sl, ip
 800e4ce:	eb19 0309 	adds.w	r3, r9, r9
 800e4d2:	eb4a 040a 	adc.w	r4, sl, sl
 800e4d6:	4699      	mov	r9, r3
 800e4d8:	46a2      	mov	sl, r4
 800e4da:	eb19 090b 	adds.w	r9, r9, fp
 800e4de:	eb4a 0a0c 	adc.w	sl, sl, ip
 800e4e2:	f04f 0100 	mov.w	r1, #0
 800e4e6:	f04f 0200 	mov.w	r2, #0
 800e4ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e4ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e4f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e4f6:	4689      	mov	r9, r1
 800e4f8:	4692      	mov	sl, r2
 800e4fa:	eb1b 0509 	adds.w	r5, fp, r9
 800e4fe:	eb4c 060a 	adc.w	r6, ip, sl
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	685b      	ldr	r3, [r3, #4]
 800e506:	4619      	mov	r1, r3
 800e508:	f04f 0200 	mov.w	r2, #0
 800e50c:	f04f 0300 	mov.w	r3, #0
 800e510:	f04f 0400 	mov.w	r4, #0
 800e514:	0094      	lsls	r4, r2, #2
 800e516:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e51a:	008b      	lsls	r3, r1, #2
 800e51c:	461a      	mov	r2, r3
 800e51e:	4623      	mov	r3, r4
 800e520:	4628      	mov	r0, r5
 800e522:	4631      	mov	r1, r6
 800e524:	f7f2 fbb0 	bl	8000c88 <__aeabi_uldivmod>
 800e528:	4603      	mov	r3, r0
 800e52a:	460c      	mov	r4, r1
 800e52c:	461a      	mov	r2, r3
 800e52e:	4b32      	ldr	r3, [pc, #200]	; (800e5f8 <UART_SetConfig+0x6f4>)
 800e530:	fba3 1302 	umull	r1, r3, r3, r2
 800e534:	095b      	lsrs	r3, r3, #5
 800e536:	2164      	movs	r1, #100	; 0x64
 800e538:	fb01 f303 	mul.w	r3, r1, r3
 800e53c:	1ad3      	subs	r3, r2, r3
 800e53e:	011b      	lsls	r3, r3, #4
 800e540:	3332      	adds	r3, #50	; 0x32
 800e542:	4a2d      	ldr	r2, [pc, #180]	; (800e5f8 <UART_SetConfig+0x6f4>)
 800e544:	fba2 2303 	umull	r2, r3, r2, r3
 800e548:	095b      	lsrs	r3, r3, #5
 800e54a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e54e:	4498      	add	r8, r3
 800e550:	68bb      	ldr	r3, [r7, #8]
 800e552:	469b      	mov	fp, r3
 800e554:	f04f 0c00 	mov.w	ip, #0
 800e558:	46d9      	mov	r9, fp
 800e55a:	46e2      	mov	sl, ip
 800e55c:	eb19 0309 	adds.w	r3, r9, r9
 800e560:	eb4a 040a 	adc.w	r4, sl, sl
 800e564:	4699      	mov	r9, r3
 800e566:	46a2      	mov	sl, r4
 800e568:	eb19 090b 	adds.w	r9, r9, fp
 800e56c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800e570:	f04f 0100 	mov.w	r1, #0
 800e574:	f04f 0200 	mov.w	r2, #0
 800e578:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e57c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e580:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e584:	4689      	mov	r9, r1
 800e586:	4692      	mov	sl, r2
 800e588:	eb1b 0509 	adds.w	r5, fp, r9
 800e58c:	eb4c 060a 	adc.w	r6, ip, sl
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	685b      	ldr	r3, [r3, #4]
 800e594:	4619      	mov	r1, r3
 800e596:	f04f 0200 	mov.w	r2, #0
 800e59a:	f04f 0300 	mov.w	r3, #0
 800e59e:	f04f 0400 	mov.w	r4, #0
 800e5a2:	0094      	lsls	r4, r2, #2
 800e5a4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e5a8:	008b      	lsls	r3, r1, #2
 800e5aa:	461a      	mov	r2, r3
 800e5ac:	4623      	mov	r3, r4
 800e5ae:	4628      	mov	r0, r5
 800e5b0:	4631      	mov	r1, r6
 800e5b2:	f7f2 fb69 	bl	8000c88 <__aeabi_uldivmod>
 800e5b6:	4603      	mov	r3, r0
 800e5b8:	460c      	mov	r4, r1
 800e5ba:	461a      	mov	r2, r3
 800e5bc:	4b0e      	ldr	r3, [pc, #56]	; (800e5f8 <UART_SetConfig+0x6f4>)
 800e5be:	fba3 1302 	umull	r1, r3, r3, r2
 800e5c2:	095b      	lsrs	r3, r3, #5
 800e5c4:	2164      	movs	r1, #100	; 0x64
 800e5c6:	fb01 f303 	mul.w	r3, r1, r3
 800e5ca:	1ad3      	subs	r3, r2, r3
 800e5cc:	011b      	lsls	r3, r3, #4
 800e5ce:	3332      	adds	r3, #50	; 0x32
 800e5d0:	4a09      	ldr	r2, [pc, #36]	; (800e5f8 <UART_SetConfig+0x6f4>)
 800e5d2:	fba2 2303 	umull	r2, r3, r2, r3
 800e5d6:	095b      	lsrs	r3, r3, #5
 800e5d8:	f003 020f 	and.w	r2, r3, #15
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	4442      	add	r2, r8
 800e5e2:	609a      	str	r2, [r3, #8]
}
 800e5e4:	e7ff      	b.n	800e5e6 <UART_SetConfig+0x6e2>
 800e5e6:	bf00      	nop
 800e5e8:	3714      	adds	r7, #20
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5f0:	40011000 	.word	0x40011000
 800e5f4:	40011400 	.word	0x40011400
 800e5f8:	51eb851f 	.word	0x51eb851f

0800e5fc <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800e5fc:	b480      	push	{r7}
 800e5fe:	b085      	sub	sp, #20
 800e600:	af00      	add	r7, sp, #0
 800e602:	6078      	str	r0, [r7, #4]
 800e604:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800e606:	2300      	movs	r3, #0
 800e608:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800e60a:	683b      	ldr	r3, [r7, #0]
 800e60c:	681a      	ldr	r2, [r3, #0]
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e614:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800e616:	68fa      	ldr	r2, [r7, #12]
 800e618:	4b20      	ldr	r3, [pc, #128]	; (800e69c <FSMC_NORSRAM_Init+0xa0>)
 800e61a:	4013      	ands	r3, r2
 800e61c:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800e61e:	683b      	ldr	r3, [r7, #0]
 800e620:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800e622:	683b      	ldr	r3, [r7, #0]
 800e624:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800e626:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800e628:	683b      	ldr	r3, [r7, #0]
 800e62a:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800e62c:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800e62e:	683b      	ldr	r3, [r7, #0]
 800e630:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800e632:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800e634:	683b      	ldr	r3, [r7, #0]
 800e636:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800e638:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800e63a:	683b      	ldr	r3, [r7, #0]
 800e63c:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800e63e:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800e640:	683b      	ldr	r3, [r7, #0]
 800e642:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800e644:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800e646:	683b      	ldr	r3, [r7, #0]
 800e648:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800e64a:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800e64c:	683b      	ldr	r3, [r7, #0]
 800e64e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800e650:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800e652:	683b      	ldr	r3, [r7, #0]
 800e654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800e656:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800e658:	683b      	ldr	r3, [r7, #0]
 800e65a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800e65c:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800e65e:	683b      	ldr	r3, [r7, #0]
 800e660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800e662:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800e664:	683b      	ldr	r3, [r7, #0]
 800e666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800e668:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800e66a:	68fa      	ldr	r2, [r7, #12]
 800e66c:	4313      	orrs	r3, r2
 800e66e:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800e670:	683b      	ldr	r3, [r7, #0]
 800e672:	689b      	ldr	r3, [r3, #8]
 800e674:	2b08      	cmp	r3, #8
 800e676:	d103      	bne.n	800e680 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e67e:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800e680:	683b      	ldr	r3, [r7, #0]
 800e682:	681a      	ldr	r2, [r3, #0]
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	68f9      	ldr	r1, [r7, #12]
 800e688:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800e68c:	2300      	movs	r3, #0
}
 800e68e:	4618      	mov	r0, r3
 800e690:	3714      	adds	r7, #20
 800e692:	46bd      	mov	sp, r7
 800e694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e698:	4770      	bx	lr
 800e69a:	bf00      	nop
 800e69c:	fff00080 	.word	0xfff00080

0800e6a0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800e6a0:	b480      	push	{r7}
 800e6a2:	b087      	sub	sp, #28
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	60f8      	str	r0, [r7, #12]
 800e6a8:	60b9      	str	r1, [r7, #8]
 800e6aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	1c5a      	adds	r2, r3, #1
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6ba:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800e6bc:	697b      	ldr	r3, [r7, #20]
 800e6be:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800e6c2:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800e6c4:	68bb      	ldr	r3, [r7, #8]
 800e6c6:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800e6c8:	68bb      	ldr	r3, [r7, #8]
 800e6ca:	685b      	ldr	r3, [r3, #4]
 800e6cc:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800e6ce:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800e6d0:	68bb      	ldr	r3, [r7, #8]
 800e6d2:	689b      	ldr	r3, [r3, #8]
 800e6d4:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800e6d6:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800e6d8:	68bb      	ldr	r3, [r7, #8]
 800e6da:	68db      	ldr	r3, [r3, #12]
 800e6dc:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800e6de:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800e6e0:	68bb      	ldr	r3, [r7, #8]
 800e6e2:	691b      	ldr	r3, [r3, #16]
 800e6e4:	3b01      	subs	r3, #1
 800e6e6:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800e6e8:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800e6ea:	68bb      	ldr	r3, [r7, #8]
 800e6ec:	695b      	ldr	r3, [r3, #20]
 800e6ee:	3b02      	subs	r3, #2
 800e6f0:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800e6f2:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800e6f4:	68bb      	ldr	r3, [r7, #8]
 800e6f6:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800e6f8:	4313      	orrs	r3, r2
 800e6fa:	697a      	ldr	r2, [r7, #20]
 800e6fc:	4313      	orrs	r3, r2
 800e6fe:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	1c5a      	adds	r2, r3, #1
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	6979      	ldr	r1, [r7, #20]
 800e708:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800e70c:	2300      	movs	r3, #0
}
 800e70e:	4618      	mov	r0, r3
 800e710:	371c      	adds	r7, #28
 800e712:	46bd      	mov	sp, r7
 800e714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e718:	4770      	bx	lr
	...

0800e71c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800e71c:	b480      	push	{r7}
 800e71e:	b087      	sub	sp, #28
 800e720:	af00      	add	r7, sp, #0
 800e722:	60f8      	str	r0, [r7, #12]
 800e724:	60b9      	str	r1, [r7, #8]
 800e726:	607a      	str	r2, [r7, #4]
 800e728:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800e72a:	2300      	movs	r3, #0
 800e72c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800e72e:	683b      	ldr	r3, [r7, #0]
 800e730:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e734:	d122      	bne.n	800e77c <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	687a      	ldr	r2, [r7, #4]
 800e73a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e73e:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800e740:	697a      	ldr	r2, [r7, #20]
 800e742:	4b15      	ldr	r3, [pc, #84]	; (800e798 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800e744:	4013      	ands	r3, r2
 800e746:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800e748:	68bb      	ldr	r3, [r7, #8]
 800e74a:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800e74c:	68bb      	ldr	r3, [r7, #8]
 800e74e:	685b      	ldr	r3, [r3, #4]
 800e750:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800e752:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800e754:	68bb      	ldr	r3, [r7, #8]
 800e756:	689b      	ldr	r3, [r3, #8]
 800e758:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800e75a:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800e75c:	68bb      	ldr	r3, [r7, #8]
 800e75e:	68db      	ldr	r3, [r3, #12]
 800e760:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800e762:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800e764:	68bb      	ldr	r3, [r7, #8]
 800e766:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800e768:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800e76a:	697a      	ldr	r2, [r7, #20]
 800e76c:	4313      	orrs	r3, r2
 800e76e:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	687a      	ldr	r2, [r7, #4]
 800e774:	6979      	ldr	r1, [r7, #20]
 800e776:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800e77a:	e005      	b.n	800e788 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	687a      	ldr	r2, [r7, #4]
 800e780:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800e784:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800e788:	2300      	movs	r3, #0
}
 800e78a:	4618      	mov	r0, r3
 800e78c:	371c      	adds	r7, #28
 800e78e:	46bd      	mov	sp, r7
 800e790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e794:	4770      	bx	lr
 800e796:	bf00      	nop
 800e798:	cff00000 	.word	0xcff00000

0800e79c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e79c:	b084      	sub	sp, #16
 800e79e:	b580      	push	{r7, lr}
 800e7a0:	b084      	sub	sp, #16
 800e7a2:	af00      	add	r7, sp, #0
 800e7a4:	6078      	str	r0, [r7, #4]
 800e7a6:	f107 001c 	add.w	r0, r7, #28
 800e7aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7b0:	2b01      	cmp	r3, #1
 800e7b2:	d122      	bne.n	800e7fa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	68db      	ldr	r3, [r3, #12]
 800e7c4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800e7c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e7cc:	687a      	ldr	r2, [r7, #4]
 800e7ce:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	68db      	ldr	r3, [r3, #12]
 800e7d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e7dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7de:	2b01      	cmp	r3, #1
 800e7e0:	d105      	bne.n	800e7ee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	68db      	ldr	r3, [r3, #12]
 800e7e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800e7ee:	6878      	ldr	r0, [r7, #4]
 800e7f0:	f001 fac6 	bl	800fd80 <USB_CoreReset>
 800e7f4:	4603      	mov	r3, r0
 800e7f6:	73fb      	strb	r3, [r7, #15]
 800e7f8:	e01a      	b.n	800e830 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	68db      	ldr	r3, [r3, #12]
 800e7fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e806:	6878      	ldr	r0, [r7, #4]
 800e808:	f001 faba 	bl	800fd80 <USB_CoreReset>
 800e80c:	4603      	mov	r3, r0
 800e80e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800e810:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e812:	2b00      	cmp	r3, #0
 800e814:	d106      	bne.n	800e824 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e81a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	639a      	str	r2, [r3, #56]	; 0x38
 800e822:	e005      	b.n	800e830 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e828:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800e830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e832:	2b01      	cmp	r3, #1
 800e834:	d10b      	bne.n	800e84e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	689b      	ldr	r3, [r3, #8]
 800e83a:	f043 0206 	orr.w	r2, r3, #6
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	689b      	ldr	r3, [r3, #8]
 800e846:	f043 0220 	orr.w	r2, r3, #32
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e84e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e850:	4618      	mov	r0, r3
 800e852:	3710      	adds	r7, #16
 800e854:	46bd      	mov	sp, r7
 800e856:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e85a:	b004      	add	sp, #16
 800e85c:	4770      	bx	lr
	...

0800e860 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800e860:	b480      	push	{r7}
 800e862:	b087      	sub	sp, #28
 800e864:	af00      	add	r7, sp, #0
 800e866:	60f8      	str	r0, [r7, #12]
 800e868:	60b9      	str	r1, [r7, #8]
 800e86a:	4613      	mov	r3, r2
 800e86c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800e86e:	79fb      	ldrb	r3, [r7, #7]
 800e870:	2b02      	cmp	r3, #2
 800e872:	d165      	bne.n	800e940 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800e874:	68bb      	ldr	r3, [r7, #8]
 800e876:	4a41      	ldr	r2, [pc, #260]	; (800e97c <USB_SetTurnaroundTime+0x11c>)
 800e878:	4293      	cmp	r3, r2
 800e87a:	d906      	bls.n	800e88a <USB_SetTurnaroundTime+0x2a>
 800e87c:	68bb      	ldr	r3, [r7, #8]
 800e87e:	4a40      	ldr	r2, [pc, #256]	; (800e980 <USB_SetTurnaroundTime+0x120>)
 800e880:	4293      	cmp	r3, r2
 800e882:	d802      	bhi.n	800e88a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800e884:	230f      	movs	r3, #15
 800e886:	617b      	str	r3, [r7, #20]
 800e888:	e062      	b.n	800e950 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800e88a:	68bb      	ldr	r3, [r7, #8]
 800e88c:	4a3c      	ldr	r2, [pc, #240]	; (800e980 <USB_SetTurnaroundTime+0x120>)
 800e88e:	4293      	cmp	r3, r2
 800e890:	d906      	bls.n	800e8a0 <USB_SetTurnaroundTime+0x40>
 800e892:	68bb      	ldr	r3, [r7, #8]
 800e894:	4a3b      	ldr	r2, [pc, #236]	; (800e984 <USB_SetTurnaroundTime+0x124>)
 800e896:	4293      	cmp	r3, r2
 800e898:	d802      	bhi.n	800e8a0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800e89a:	230e      	movs	r3, #14
 800e89c:	617b      	str	r3, [r7, #20]
 800e89e:	e057      	b.n	800e950 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800e8a0:	68bb      	ldr	r3, [r7, #8]
 800e8a2:	4a38      	ldr	r2, [pc, #224]	; (800e984 <USB_SetTurnaroundTime+0x124>)
 800e8a4:	4293      	cmp	r3, r2
 800e8a6:	d906      	bls.n	800e8b6 <USB_SetTurnaroundTime+0x56>
 800e8a8:	68bb      	ldr	r3, [r7, #8]
 800e8aa:	4a37      	ldr	r2, [pc, #220]	; (800e988 <USB_SetTurnaroundTime+0x128>)
 800e8ac:	4293      	cmp	r3, r2
 800e8ae:	d802      	bhi.n	800e8b6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800e8b0:	230d      	movs	r3, #13
 800e8b2:	617b      	str	r3, [r7, #20]
 800e8b4:	e04c      	b.n	800e950 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800e8b6:	68bb      	ldr	r3, [r7, #8]
 800e8b8:	4a33      	ldr	r2, [pc, #204]	; (800e988 <USB_SetTurnaroundTime+0x128>)
 800e8ba:	4293      	cmp	r3, r2
 800e8bc:	d906      	bls.n	800e8cc <USB_SetTurnaroundTime+0x6c>
 800e8be:	68bb      	ldr	r3, [r7, #8]
 800e8c0:	4a32      	ldr	r2, [pc, #200]	; (800e98c <USB_SetTurnaroundTime+0x12c>)
 800e8c2:	4293      	cmp	r3, r2
 800e8c4:	d802      	bhi.n	800e8cc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800e8c6:	230c      	movs	r3, #12
 800e8c8:	617b      	str	r3, [r7, #20]
 800e8ca:	e041      	b.n	800e950 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800e8cc:	68bb      	ldr	r3, [r7, #8]
 800e8ce:	4a2f      	ldr	r2, [pc, #188]	; (800e98c <USB_SetTurnaroundTime+0x12c>)
 800e8d0:	4293      	cmp	r3, r2
 800e8d2:	d906      	bls.n	800e8e2 <USB_SetTurnaroundTime+0x82>
 800e8d4:	68bb      	ldr	r3, [r7, #8]
 800e8d6:	4a2e      	ldr	r2, [pc, #184]	; (800e990 <USB_SetTurnaroundTime+0x130>)
 800e8d8:	4293      	cmp	r3, r2
 800e8da:	d802      	bhi.n	800e8e2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800e8dc:	230b      	movs	r3, #11
 800e8de:	617b      	str	r3, [r7, #20]
 800e8e0:	e036      	b.n	800e950 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800e8e2:	68bb      	ldr	r3, [r7, #8]
 800e8e4:	4a2a      	ldr	r2, [pc, #168]	; (800e990 <USB_SetTurnaroundTime+0x130>)
 800e8e6:	4293      	cmp	r3, r2
 800e8e8:	d906      	bls.n	800e8f8 <USB_SetTurnaroundTime+0x98>
 800e8ea:	68bb      	ldr	r3, [r7, #8]
 800e8ec:	4a29      	ldr	r2, [pc, #164]	; (800e994 <USB_SetTurnaroundTime+0x134>)
 800e8ee:	4293      	cmp	r3, r2
 800e8f0:	d802      	bhi.n	800e8f8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800e8f2:	230a      	movs	r3, #10
 800e8f4:	617b      	str	r3, [r7, #20]
 800e8f6:	e02b      	b.n	800e950 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800e8f8:	68bb      	ldr	r3, [r7, #8]
 800e8fa:	4a26      	ldr	r2, [pc, #152]	; (800e994 <USB_SetTurnaroundTime+0x134>)
 800e8fc:	4293      	cmp	r3, r2
 800e8fe:	d906      	bls.n	800e90e <USB_SetTurnaroundTime+0xae>
 800e900:	68bb      	ldr	r3, [r7, #8]
 800e902:	4a25      	ldr	r2, [pc, #148]	; (800e998 <USB_SetTurnaroundTime+0x138>)
 800e904:	4293      	cmp	r3, r2
 800e906:	d802      	bhi.n	800e90e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800e908:	2309      	movs	r3, #9
 800e90a:	617b      	str	r3, [r7, #20]
 800e90c:	e020      	b.n	800e950 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800e90e:	68bb      	ldr	r3, [r7, #8]
 800e910:	4a21      	ldr	r2, [pc, #132]	; (800e998 <USB_SetTurnaroundTime+0x138>)
 800e912:	4293      	cmp	r3, r2
 800e914:	d906      	bls.n	800e924 <USB_SetTurnaroundTime+0xc4>
 800e916:	68bb      	ldr	r3, [r7, #8]
 800e918:	4a20      	ldr	r2, [pc, #128]	; (800e99c <USB_SetTurnaroundTime+0x13c>)
 800e91a:	4293      	cmp	r3, r2
 800e91c:	d802      	bhi.n	800e924 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800e91e:	2308      	movs	r3, #8
 800e920:	617b      	str	r3, [r7, #20]
 800e922:	e015      	b.n	800e950 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800e924:	68bb      	ldr	r3, [r7, #8]
 800e926:	4a1d      	ldr	r2, [pc, #116]	; (800e99c <USB_SetTurnaroundTime+0x13c>)
 800e928:	4293      	cmp	r3, r2
 800e92a:	d906      	bls.n	800e93a <USB_SetTurnaroundTime+0xda>
 800e92c:	68bb      	ldr	r3, [r7, #8]
 800e92e:	4a1c      	ldr	r2, [pc, #112]	; (800e9a0 <USB_SetTurnaroundTime+0x140>)
 800e930:	4293      	cmp	r3, r2
 800e932:	d802      	bhi.n	800e93a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800e934:	2307      	movs	r3, #7
 800e936:	617b      	str	r3, [r7, #20]
 800e938:	e00a      	b.n	800e950 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800e93a:	2306      	movs	r3, #6
 800e93c:	617b      	str	r3, [r7, #20]
 800e93e:	e007      	b.n	800e950 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800e940:	79fb      	ldrb	r3, [r7, #7]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d102      	bne.n	800e94c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800e946:	2309      	movs	r3, #9
 800e948:	617b      	str	r3, [r7, #20]
 800e94a:	e001      	b.n	800e950 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800e94c:	2309      	movs	r3, #9
 800e94e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	68db      	ldr	r3, [r3, #12]
 800e954:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	68da      	ldr	r2, [r3, #12]
 800e960:	697b      	ldr	r3, [r7, #20]
 800e962:	029b      	lsls	r3, r3, #10
 800e964:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800e968:	431a      	orrs	r2, r3
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e96e:	2300      	movs	r3, #0
}
 800e970:	4618      	mov	r0, r3
 800e972:	371c      	adds	r7, #28
 800e974:	46bd      	mov	sp, r7
 800e976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e97a:	4770      	bx	lr
 800e97c:	00d8acbf 	.word	0x00d8acbf
 800e980:	00e4e1bf 	.word	0x00e4e1bf
 800e984:	00f423ff 	.word	0x00f423ff
 800e988:	0106737f 	.word	0x0106737f
 800e98c:	011a499f 	.word	0x011a499f
 800e990:	01312cff 	.word	0x01312cff
 800e994:	014ca43f 	.word	0x014ca43f
 800e998:	016e35ff 	.word	0x016e35ff
 800e99c:	01a6ab1f 	.word	0x01a6ab1f
 800e9a0:	01e847ff 	.word	0x01e847ff

0800e9a4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e9a4:	b480      	push	{r7}
 800e9a6:	b083      	sub	sp, #12
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	689b      	ldr	r3, [r3, #8]
 800e9b0:	f043 0201 	orr.w	r2, r3, #1
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e9b8:	2300      	movs	r3, #0
}
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	370c      	adds	r7, #12
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c4:	4770      	bx	lr

0800e9c6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e9c6:	b480      	push	{r7}
 800e9c8:	b083      	sub	sp, #12
 800e9ca:	af00      	add	r7, sp, #0
 800e9cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	689b      	ldr	r3, [r3, #8]
 800e9d2:	f023 0201 	bic.w	r2, r3, #1
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e9da:	2300      	movs	r3, #0
}
 800e9dc:	4618      	mov	r0, r3
 800e9de:	370c      	adds	r7, #12
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e6:	4770      	bx	lr

0800e9e8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b082      	sub	sp, #8
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
 800e9f0:	460b      	mov	r3, r1
 800e9f2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	68db      	ldr	r3, [r3, #12]
 800e9f8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ea00:	78fb      	ldrb	r3, [r7, #3]
 800ea02:	2b01      	cmp	r3, #1
 800ea04:	d106      	bne.n	800ea14 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	68db      	ldr	r3, [r3, #12]
 800ea0a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	60da      	str	r2, [r3, #12]
 800ea12:	e00b      	b.n	800ea2c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800ea14:	78fb      	ldrb	r3, [r7, #3]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d106      	bne.n	800ea28 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	68db      	ldr	r3, [r3, #12]
 800ea1e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	60da      	str	r2, [r3, #12]
 800ea26:	e001      	b.n	800ea2c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800ea28:	2301      	movs	r3, #1
 800ea2a:	e003      	b.n	800ea34 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800ea2c:	2032      	movs	r0, #50	; 0x32
 800ea2e:	f7fb fdf1 	bl	800a614 <HAL_Delay>

  return HAL_OK;
 800ea32:	2300      	movs	r3, #0
}
 800ea34:	4618      	mov	r0, r3
 800ea36:	3708      	adds	r7, #8
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	bd80      	pop	{r7, pc}

0800ea3c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ea3c:	b084      	sub	sp, #16
 800ea3e:	b580      	push	{r7, lr}
 800ea40:	b086      	sub	sp, #24
 800ea42:	af00      	add	r7, sp, #0
 800ea44:	6078      	str	r0, [r7, #4]
 800ea46:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ea4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ea4e:	2300      	movs	r3, #0
 800ea50:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ea56:	2300      	movs	r3, #0
 800ea58:	613b      	str	r3, [r7, #16]
 800ea5a:	e009      	b.n	800ea70 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ea5c:	687a      	ldr	r2, [r7, #4]
 800ea5e:	693b      	ldr	r3, [r7, #16]
 800ea60:	3340      	adds	r3, #64	; 0x40
 800ea62:	009b      	lsls	r3, r3, #2
 800ea64:	4413      	add	r3, r2
 800ea66:	2200      	movs	r2, #0
 800ea68:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ea6a:	693b      	ldr	r3, [r7, #16]
 800ea6c:	3301      	adds	r3, #1
 800ea6e:	613b      	str	r3, [r7, #16]
 800ea70:	693b      	ldr	r3, [r7, #16]
 800ea72:	2b0e      	cmp	r3, #14
 800ea74:	d9f2      	bls.n	800ea5c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ea76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d11c      	bne.n	800eab6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea82:	685b      	ldr	r3, [r3, #4]
 800ea84:	68fa      	ldr	r2, [r7, #12]
 800ea86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ea8a:	f043 0302 	orr.w	r3, r3, #2
 800ea8e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea94:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eaa0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eaac:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	639a      	str	r2, [r3, #56]	; 0x38
 800eab4:	e00b      	b.n	800eace <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eaba:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eac6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ead4:	461a      	mov	r2, r3
 800ead6:	2300      	movs	r3, #0
 800ead8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eae0:	4619      	mov	r1, r3
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eae8:	461a      	mov	r2, r3
 800eaea:	680b      	ldr	r3, [r1, #0]
 800eaec:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800eaee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaf0:	2b01      	cmp	r3, #1
 800eaf2:	d10c      	bne.n	800eb0e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800eaf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d104      	bne.n	800eb04 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800eafa:	2100      	movs	r1, #0
 800eafc:	6878      	ldr	r0, [r7, #4]
 800eafe:	f000 f949 	bl	800ed94 <USB_SetDevSpeed>
 800eb02:	e008      	b.n	800eb16 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800eb04:	2101      	movs	r1, #1
 800eb06:	6878      	ldr	r0, [r7, #4]
 800eb08:	f000 f944 	bl	800ed94 <USB_SetDevSpeed>
 800eb0c:	e003      	b.n	800eb16 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800eb0e:	2103      	movs	r1, #3
 800eb10:	6878      	ldr	r0, [r7, #4]
 800eb12:	f000 f93f 	bl	800ed94 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800eb16:	2110      	movs	r1, #16
 800eb18:	6878      	ldr	r0, [r7, #4]
 800eb1a:	f000 f8f3 	bl	800ed04 <USB_FlushTxFifo>
 800eb1e:	4603      	mov	r3, r0
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d001      	beq.n	800eb28 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800eb24:	2301      	movs	r3, #1
 800eb26:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800eb28:	6878      	ldr	r0, [r7, #4]
 800eb2a:	f000 f911 	bl	800ed50 <USB_FlushRxFifo>
 800eb2e:	4603      	mov	r3, r0
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d001      	beq.n	800eb38 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800eb34:	2301      	movs	r3, #1
 800eb36:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb3e:	461a      	mov	r2, r3
 800eb40:	2300      	movs	r3, #0
 800eb42:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb4a:	461a      	mov	r2, r3
 800eb4c:	2300      	movs	r3, #0
 800eb4e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb56:	461a      	mov	r2, r3
 800eb58:	2300      	movs	r3, #0
 800eb5a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	613b      	str	r3, [r7, #16]
 800eb60:	e043      	b.n	800ebea <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800eb62:	693b      	ldr	r3, [r7, #16]
 800eb64:	015a      	lsls	r2, r3, #5
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	4413      	add	r3, r2
 800eb6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800eb74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800eb78:	d118      	bne.n	800ebac <USB_DevInit+0x170>
    {
      if (i == 0U)
 800eb7a:	693b      	ldr	r3, [r7, #16]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d10a      	bne.n	800eb96 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800eb80:	693b      	ldr	r3, [r7, #16]
 800eb82:	015a      	lsls	r2, r3, #5
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	4413      	add	r3, r2
 800eb88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb8c:	461a      	mov	r2, r3
 800eb8e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800eb92:	6013      	str	r3, [r2, #0]
 800eb94:	e013      	b.n	800ebbe <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800eb96:	693b      	ldr	r3, [r7, #16]
 800eb98:	015a      	lsls	r2, r3, #5
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	4413      	add	r3, r2
 800eb9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eba2:	461a      	mov	r2, r3
 800eba4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800eba8:	6013      	str	r3, [r2, #0]
 800ebaa:	e008      	b.n	800ebbe <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ebac:	693b      	ldr	r3, [r7, #16]
 800ebae:	015a      	lsls	r2, r3, #5
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	4413      	add	r3, r2
 800ebb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ebb8:	461a      	mov	r2, r3
 800ebba:	2300      	movs	r3, #0
 800ebbc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ebbe:	693b      	ldr	r3, [r7, #16]
 800ebc0:	015a      	lsls	r2, r3, #5
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	4413      	add	r3, r2
 800ebc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ebca:	461a      	mov	r2, r3
 800ebcc:	2300      	movs	r3, #0
 800ebce:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ebd0:	693b      	ldr	r3, [r7, #16]
 800ebd2:	015a      	lsls	r2, r3, #5
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	4413      	add	r3, r2
 800ebd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ebdc:	461a      	mov	r2, r3
 800ebde:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ebe2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ebe4:	693b      	ldr	r3, [r7, #16]
 800ebe6:	3301      	adds	r3, #1
 800ebe8:	613b      	str	r3, [r7, #16]
 800ebea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebec:	693a      	ldr	r2, [r7, #16]
 800ebee:	429a      	cmp	r2, r3
 800ebf0:	d3b7      	bcc.n	800eb62 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	613b      	str	r3, [r7, #16]
 800ebf6:	e043      	b.n	800ec80 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ebf8:	693b      	ldr	r3, [r7, #16]
 800ebfa:	015a      	lsls	r2, r3, #5
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	4413      	add	r3, r2
 800ec00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ec0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ec0e:	d118      	bne.n	800ec42 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800ec10:	693b      	ldr	r3, [r7, #16]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d10a      	bne.n	800ec2c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ec16:	693b      	ldr	r3, [r7, #16]
 800ec18:	015a      	lsls	r2, r3, #5
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	4413      	add	r3, r2
 800ec1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec22:	461a      	mov	r2, r3
 800ec24:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ec28:	6013      	str	r3, [r2, #0]
 800ec2a:	e013      	b.n	800ec54 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ec2c:	693b      	ldr	r3, [r7, #16]
 800ec2e:	015a      	lsls	r2, r3, #5
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	4413      	add	r3, r2
 800ec34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec38:	461a      	mov	r2, r3
 800ec3a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ec3e:	6013      	str	r3, [r2, #0]
 800ec40:	e008      	b.n	800ec54 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ec42:	693b      	ldr	r3, [r7, #16]
 800ec44:	015a      	lsls	r2, r3, #5
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	4413      	add	r3, r2
 800ec4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec4e:	461a      	mov	r2, r3
 800ec50:	2300      	movs	r3, #0
 800ec52:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ec54:	693b      	ldr	r3, [r7, #16]
 800ec56:	015a      	lsls	r2, r3, #5
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	4413      	add	r3, r2
 800ec5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec60:	461a      	mov	r2, r3
 800ec62:	2300      	movs	r3, #0
 800ec64:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ec66:	693b      	ldr	r3, [r7, #16]
 800ec68:	015a      	lsls	r2, r3, #5
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	4413      	add	r3, r2
 800ec6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec72:	461a      	mov	r2, r3
 800ec74:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ec78:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ec7a:	693b      	ldr	r3, [r7, #16]
 800ec7c:	3301      	adds	r3, #1
 800ec7e:	613b      	str	r3, [r7, #16]
 800ec80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec82:	693a      	ldr	r2, [r7, #16]
 800ec84:	429a      	cmp	r2, r3
 800ec86:	d3b7      	bcc.n	800ebf8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec8e:	691b      	ldr	r3, [r3, #16]
 800ec90:	68fa      	ldr	r2, [r7, #12]
 800ec92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ec96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ec9a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	2200      	movs	r2, #0
 800eca0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800eca8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ecaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d105      	bne.n	800ecbc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	699b      	ldr	r3, [r3, #24]
 800ecb4:	f043 0210 	orr.w	r2, r3, #16
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	699a      	ldr	r2, [r3, #24]
 800ecc0:	4b0f      	ldr	r3, [pc, #60]	; (800ed00 <USB_DevInit+0x2c4>)
 800ecc2:	4313      	orrs	r3, r2
 800ecc4:	687a      	ldr	r2, [r7, #4]
 800ecc6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ecc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d005      	beq.n	800ecda <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	699b      	ldr	r3, [r3, #24]
 800ecd2:	f043 0208 	orr.w	r2, r3, #8
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ecda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ecdc:	2b01      	cmp	r3, #1
 800ecde:	d107      	bne.n	800ecf0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	699b      	ldr	r3, [r3, #24]
 800ece4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ece8:	f043 0304 	orr.w	r3, r3, #4
 800ecec:	687a      	ldr	r2, [r7, #4]
 800ecee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ecf0:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	3718      	adds	r7, #24
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ecfc:	b004      	add	sp, #16
 800ecfe:	4770      	bx	lr
 800ed00:	803c3800 	.word	0x803c3800

0800ed04 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ed04:	b480      	push	{r7}
 800ed06:	b085      	sub	sp, #20
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	6078      	str	r0, [r7, #4]
 800ed0c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800ed0e:	2300      	movs	r3, #0
 800ed10:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ed12:	683b      	ldr	r3, [r7, #0]
 800ed14:	019b      	lsls	r3, r3, #6
 800ed16:	f043 0220 	orr.w	r2, r3, #32
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	3301      	adds	r3, #1
 800ed22:	60fb      	str	r3, [r7, #12]
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	4a09      	ldr	r2, [pc, #36]	; (800ed4c <USB_FlushTxFifo+0x48>)
 800ed28:	4293      	cmp	r3, r2
 800ed2a:	d901      	bls.n	800ed30 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800ed2c:	2303      	movs	r3, #3
 800ed2e:	e006      	b.n	800ed3e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	691b      	ldr	r3, [r3, #16]
 800ed34:	f003 0320 	and.w	r3, r3, #32
 800ed38:	2b20      	cmp	r3, #32
 800ed3a:	d0f0      	beq.n	800ed1e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800ed3c:	2300      	movs	r3, #0
}
 800ed3e:	4618      	mov	r0, r3
 800ed40:	3714      	adds	r7, #20
 800ed42:	46bd      	mov	sp, r7
 800ed44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed48:	4770      	bx	lr
 800ed4a:	bf00      	nop
 800ed4c:	00030d40 	.word	0x00030d40

0800ed50 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ed50:	b480      	push	{r7}
 800ed52:	b085      	sub	sp, #20
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800ed58:	2300      	movs	r3, #0
 800ed5a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	2210      	movs	r2, #16
 800ed60:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	3301      	adds	r3, #1
 800ed66:	60fb      	str	r3, [r7, #12]
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	4a09      	ldr	r2, [pc, #36]	; (800ed90 <USB_FlushRxFifo+0x40>)
 800ed6c:	4293      	cmp	r3, r2
 800ed6e:	d901      	bls.n	800ed74 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800ed70:	2303      	movs	r3, #3
 800ed72:	e006      	b.n	800ed82 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	691b      	ldr	r3, [r3, #16]
 800ed78:	f003 0310 	and.w	r3, r3, #16
 800ed7c:	2b10      	cmp	r3, #16
 800ed7e:	d0f0      	beq.n	800ed62 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800ed80:	2300      	movs	r3, #0
}
 800ed82:	4618      	mov	r0, r3
 800ed84:	3714      	adds	r7, #20
 800ed86:	46bd      	mov	sp, r7
 800ed88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8c:	4770      	bx	lr
 800ed8e:	bf00      	nop
 800ed90:	00030d40 	.word	0x00030d40

0800ed94 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ed94:	b480      	push	{r7}
 800ed96:	b085      	sub	sp, #20
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	6078      	str	r0, [r7, #4]
 800ed9c:	460b      	mov	r3, r1
 800ed9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800edaa:	681a      	ldr	r2, [r3, #0]
 800edac:	78fb      	ldrb	r3, [r7, #3]
 800edae:	68f9      	ldr	r1, [r7, #12]
 800edb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800edb4:	4313      	orrs	r3, r2
 800edb6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800edb8:	2300      	movs	r3, #0
}
 800edba:	4618      	mov	r0, r3
 800edbc:	3714      	adds	r7, #20
 800edbe:	46bd      	mov	sp, r7
 800edc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc4:	4770      	bx	lr

0800edc6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800edc6:	b480      	push	{r7}
 800edc8:	b087      	sub	sp, #28
 800edca:	af00      	add	r7, sp, #0
 800edcc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800edd2:	693b      	ldr	r3, [r7, #16]
 800edd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800edd8:	689b      	ldr	r3, [r3, #8]
 800edda:	f003 0306 	and.w	r3, r3, #6
 800edde:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d102      	bne.n	800edec <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ede6:	2300      	movs	r3, #0
 800ede8:	75fb      	strb	r3, [r7, #23]
 800edea:	e00a      	b.n	800ee02 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	2b02      	cmp	r3, #2
 800edf0:	d002      	beq.n	800edf8 <USB_GetDevSpeed+0x32>
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	2b06      	cmp	r3, #6
 800edf6:	d102      	bne.n	800edfe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800edf8:	2302      	movs	r3, #2
 800edfa:	75fb      	strb	r3, [r7, #23]
 800edfc:	e001      	b.n	800ee02 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800edfe:	230f      	movs	r3, #15
 800ee00:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ee02:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee04:	4618      	mov	r0, r3
 800ee06:	371c      	adds	r7, #28
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0e:	4770      	bx	lr

0800ee10 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ee10:	b480      	push	{r7}
 800ee12:	b085      	sub	sp, #20
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	6078      	str	r0, [r7, #4]
 800ee18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ee1e:	683b      	ldr	r3, [r7, #0]
 800ee20:	781b      	ldrb	r3, [r3, #0]
 800ee22:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ee24:	683b      	ldr	r3, [r7, #0]
 800ee26:	785b      	ldrb	r3, [r3, #1]
 800ee28:	2b01      	cmp	r3, #1
 800ee2a:	d13a      	bne.n	800eea2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee32:	69da      	ldr	r2, [r3, #28]
 800ee34:	683b      	ldr	r3, [r7, #0]
 800ee36:	781b      	ldrb	r3, [r3, #0]
 800ee38:	f003 030f 	and.w	r3, r3, #15
 800ee3c:	2101      	movs	r1, #1
 800ee3e:	fa01 f303 	lsl.w	r3, r1, r3
 800ee42:	b29b      	uxth	r3, r3
 800ee44:	68f9      	ldr	r1, [r7, #12]
 800ee46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ee4a:	4313      	orrs	r3, r2
 800ee4c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ee4e:	68bb      	ldr	r3, [r7, #8]
 800ee50:	015a      	lsls	r2, r3, #5
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	4413      	add	r3, r2
 800ee56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d155      	bne.n	800ef10 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ee64:	68bb      	ldr	r3, [r7, #8]
 800ee66:	015a      	lsls	r2, r3, #5
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	4413      	add	r3, r2
 800ee6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee70:	681a      	ldr	r2, [r3, #0]
 800ee72:	683b      	ldr	r3, [r7, #0]
 800ee74:	689b      	ldr	r3, [r3, #8]
 800ee76:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ee7a:	683b      	ldr	r3, [r7, #0]
 800ee7c:	78db      	ldrb	r3, [r3, #3]
 800ee7e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ee80:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ee82:	68bb      	ldr	r3, [r7, #8]
 800ee84:	059b      	lsls	r3, r3, #22
 800ee86:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ee88:	4313      	orrs	r3, r2
 800ee8a:	68ba      	ldr	r2, [r7, #8]
 800ee8c:	0151      	lsls	r1, r2, #5
 800ee8e:	68fa      	ldr	r2, [r7, #12]
 800ee90:	440a      	add	r2, r1
 800ee92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ee96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ee9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ee9e:	6013      	str	r3, [r2, #0]
 800eea0:	e036      	b.n	800ef10 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eea8:	69da      	ldr	r2, [r3, #28]
 800eeaa:	683b      	ldr	r3, [r7, #0]
 800eeac:	781b      	ldrb	r3, [r3, #0]
 800eeae:	f003 030f 	and.w	r3, r3, #15
 800eeb2:	2101      	movs	r1, #1
 800eeb4:	fa01 f303 	lsl.w	r3, r1, r3
 800eeb8:	041b      	lsls	r3, r3, #16
 800eeba:	68f9      	ldr	r1, [r7, #12]
 800eebc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800eec0:	4313      	orrs	r3, r2
 800eec2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800eec4:	68bb      	ldr	r3, [r7, #8]
 800eec6:	015a      	lsls	r2, r3, #5
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	4413      	add	r3, r2
 800eecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d11a      	bne.n	800ef10 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800eeda:	68bb      	ldr	r3, [r7, #8]
 800eedc:	015a      	lsls	r2, r3, #5
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	4413      	add	r3, r2
 800eee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eee6:	681a      	ldr	r2, [r3, #0]
 800eee8:	683b      	ldr	r3, [r7, #0]
 800eeea:	689b      	ldr	r3, [r3, #8]
 800eeec:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800eef0:	683b      	ldr	r3, [r7, #0]
 800eef2:	78db      	ldrb	r3, [r3, #3]
 800eef4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800eef6:	430b      	orrs	r3, r1
 800eef8:	4313      	orrs	r3, r2
 800eefa:	68ba      	ldr	r2, [r7, #8]
 800eefc:	0151      	lsls	r1, r2, #5
 800eefe:	68fa      	ldr	r2, [r7, #12]
 800ef00:	440a      	add	r2, r1
 800ef02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ef06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ef0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ef0e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ef10:	2300      	movs	r3, #0
}
 800ef12:	4618      	mov	r0, r3
 800ef14:	3714      	adds	r7, #20
 800ef16:	46bd      	mov	sp, r7
 800ef18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1c:	4770      	bx	lr
	...

0800ef20 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ef20:	b480      	push	{r7}
 800ef22:	b085      	sub	sp, #20
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
 800ef28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ef2e:	683b      	ldr	r3, [r7, #0]
 800ef30:	781b      	ldrb	r3, [r3, #0]
 800ef32:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ef34:	683b      	ldr	r3, [r7, #0]
 800ef36:	785b      	ldrb	r3, [r3, #1]
 800ef38:	2b01      	cmp	r3, #1
 800ef3a:	d161      	bne.n	800f000 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ef3c:	68bb      	ldr	r3, [r7, #8]
 800ef3e:	015a      	lsls	r2, r3, #5
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	4413      	add	r3, r2
 800ef44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ef4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ef52:	d11f      	bne.n	800ef94 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ef54:	68bb      	ldr	r3, [r7, #8]
 800ef56:	015a      	lsls	r2, r3, #5
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	4413      	add	r3, r2
 800ef5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	68ba      	ldr	r2, [r7, #8]
 800ef64:	0151      	lsls	r1, r2, #5
 800ef66:	68fa      	ldr	r2, [r7, #12]
 800ef68:	440a      	add	r2, r1
 800ef6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ef6e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ef72:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ef74:	68bb      	ldr	r3, [r7, #8]
 800ef76:	015a      	lsls	r2, r3, #5
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	4413      	add	r3, r2
 800ef7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	68ba      	ldr	r2, [r7, #8]
 800ef84:	0151      	lsls	r1, r2, #5
 800ef86:	68fa      	ldr	r2, [r7, #12]
 800ef88:	440a      	add	r2, r1
 800ef8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ef8e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ef92:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ef9c:	683b      	ldr	r3, [r7, #0]
 800ef9e:	781b      	ldrb	r3, [r3, #0]
 800efa0:	f003 030f 	and.w	r3, r3, #15
 800efa4:	2101      	movs	r1, #1
 800efa6:	fa01 f303 	lsl.w	r3, r1, r3
 800efaa:	b29b      	uxth	r3, r3
 800efac:	43db      	mvns	r3, r3
 800efae:	68f9      	ldr	r1, [r7, #12]
 800efb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800efb4:	4013      	ands	r3, r2
 800efb6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800efbe:	69da      	ldr	r2, [r3, #28]
 800efc0:	683b      	ldr	r3, [r7, #0]
 800efc2:	781b      	ldrb	r3, [r3, #0]
 800efc4:	f003 030f 	and.w	r3, r3, #15
 800efc8:	2101      	movs	r1, #1
 800efca:	fa01 f303 	lsl.w	r3, r1, r3
 800efce:	b29b      	uxth	r3, r3
 800efd0:	43db      	mvns	r3, r3
 800efd2:	68f9      	ldr	r1, [r7, #12]
 800efd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800efd8:	4013      	ands	r3, r2
 800efda:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800efdc:	68bb      	ldr	r3, [r7, #8]
 800efde:	015a      	lsls	r2, r3, #5
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	4413      	add	r3, r2
 800efe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efe8:	681a      	ldr	r2, [r3, #0]
 800efea:	68bb      	ldr	r3, [r7, #8]
 800efec:	0159      	lsls	r1, r3, #5
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	440b      	add	r3, r1
 800eff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eff6:	4619      	mov	r1, r3
 800eff8:	4b35      	ldr	r3, [pc, #212]	; (800f0d0 <USB_DeactivateEndpoint+0x1b0>)
 800effa:	4013      	ands	r3, r2
 800effc:	600b      	str	r3, [r1, #0]
 800effe:	e060      	b.n	800f0c2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f000:	68bb      	ldr	r3, [r7, #8]
 800f002:	015a      	lsls	r2, r3, #5
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	4413      	add	r3, r2
 800f008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f012:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f016:	d11f      	bne.n	800f058 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800f018:	68bb      	ldr	r3, [r7, #8]
 800f01a:	015a      	lsls	r2, r3, #5
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	4413      	add	r3, r2
 800f020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	68ba      	ldr	r2, [r7, #8]
 800f028:	0151      	lsls	r1, r2, #5
 800f02a:	68fa      	ldr	r2, [r7, #12]
 800f02c:	440a      	add	r2, r1
 800f02e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f032:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f036:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800f038:	68bb      	ldr	r3, [r7, #8]
 800f03a:	015a      	lsls	r2, r3, #5
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	4413      	add	r3, r2
 800f040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	68ba      	ldr	r2, [r7, #8]
 800f048:	0151      	lsls	r1, r2, #5
 800f04a:	68fa      	ldr	r2, [r7, #12]
 800f04c:	440a      	add	r2, r1
 800f04e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f052:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f056:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f05e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f060:	683b      	ldr	r3, [r7, #0]
 800f062:	781b      	ldrb	r3, [r3, #0]
 800f064:	f003 030f 	and.w	r3, r3, #15
 800f068:	2101      	movs	r1, #1
 800f06a:	fa01 f303 	lsl.w	r3, r1, r3
 800f06e:	041b      	lsls	r3, r3, #16
 800f070:	43db      	mvns	r3, r3
 800f072:	68f9      	ldr	r1, [r7, #12]
 800f074:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f078:	4013      	ands	r3, r2
 800f07a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f082:	69da      	ldr	r2, [r3, #28]
 800f084:	683b      	ldr	r3, [r7, #0]
 800f086:	781b      	ldrb	r3, [r3, #0]
 800f088:	f003 030f 	and.w	r3, r3, #15
 800f08c:	2101      	movs	r1, #1
 800f08e:	fa01 f303 	lsl.w	r3, r1, r3
 800f092:	041b      	lsls	r3, r3, #16
 800f094:	43db      	mvns	r3, r3
 800f096:	68f9      	ldr	r1, [r7, #12]
 800f098:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f09c:	4013      	ands	r3, r2
 800f09e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800f0a0:	68bb      	ldr	r3, [r7, #8]
 800f0a2:	015a      	lsls	r2, r3, #5
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	4413      	add	r3, r2
 800f0a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0ac:	681a      	ldr	r2, [r3, #0]
 800f0ae:	68bb      	ldr	r3, [r7, #8]
 800f0b0:	0159      	lsls	r1, r3, #5
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	440b      	add	r3, r1
 800f0b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0ba:	4619      	mov	r1, r3
 800f0bc:	4b05      	ldr	r3, [pc, #20]	; (800f0d4 <USB_DeactivateEndpoint+0x1b4>)
 800f0be:	4013      	ands	r3, r2
 800f0c0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800f0c2:	2300      	movs	r3, #0
}
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	3714      	adds	r7, #20
 800f0c8:	46bd      	mov	sp, r7
 800f0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ce:	4770      	bx	lr
 800f0d0:	ec337800 	.word	0xec337800
 800f0d4:	eff37800 	.word	0xeff37800

0800f0d8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f0d8:	b580      	push	{r7, lr}
 800f0da:	b08a      	sub	sp, #40	; 0x28
 800f0dc:	af02      	add	r7, sp, #8
 800f0de:	60f8      	str	r0, [r7, #12]
 800f0e0:	60b9      	str	r1, [r7, #8]
 800f0e2:	4613      	mov	r3, r2
 800f0e4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800f0ea:	68bb      	ldr	r3, [r7, #8]
 800f0ec:	781b      	ldrb	r3, [r3, #0]
 800f0ee:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f0f0:	68bb      	ldr	r3, [r7, #8]
 800f0f2:	785b      	ldrb	r3, [r3, #1]
 800f0f4:	2b01      	cmp	r3, #1
 800f0f6:	f040 815c 	bne.w	800f3b2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f0fa:	68bb      	ldr	r3, [r7, #8]
 800f0fc:	695b      	ldr	r3, [r3, #20]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d132      	bne.n	800f168 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f102:	69bb      	ldr	r3, [r7, #24]
 800f104:	015a      	lsls	r2, r3, #5
 800f106:	69fb      	ldr	r3, [r7, #28]
 800f108:	4413      	add	r3, r2
 800f10a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f10e:	691b      	ldr	r3, [r3, #16]
 800f110:	69ba      	ldr	r2, [r7, #24]
 800f112:	0151      	lsls	r1, r2, #5
 800f114:	69fa      	ldr	r2, [r7, #28]
 800f116:	440a      	add	r2, r1
 800f118:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f11c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f120:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f124:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f126:	69bb      	ldr	r3, [r7, #24]
 800f128:	015a      	lsls	r2, r3, #5
 800f12a:	69fb      	ldr	r3, [r7, #28]
 800f12c:	4413      	add	r3, r2
 800f12e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f132:	691b      	ldr	r3, [r3, #16]
 800f134:	69ba      	ldr	r2, [r7, #24]
 800f136:	0151      	lsls	r1, r2, #5
 800f138:	69fa      	ldr	r2, [r7, #28]
 800f13a:	440a      	add	r2, r1
 800f13c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f140:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f144:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f146:	69bb      	ldr	r3, [r7, #24]
 800f148:	015a      	lsls	r2, r3, #5
 800f14a:	69fb      	ldr	r3, [r7, #28]
 800f14c:	4413      	add	r3, r2
 800f14e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f152:	691b      	ldr	r3, [r3, #16]
 800f154:	69ba      	ldr	r2, [r7, #24]
 800f156:	0151      	lsls	r1, r2, #5
 800f158:	69fa      	ldr	r2, [r7, #28]
 800f15a:	440a      	add	r2, r1
 800f15c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f160:	0cdb      	lsrs	r3, r3, #19
 800f162:	04db      	lsls	r3, r3, #19
 800f164:	6113      	str	r3, [r2, #16]
 800f166:	e074      	b.n	800f252 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f168:	69bb      	ldr	r3, [r7, #24]
 800f16a:	015a      	lsls	r2, r3, #5
 800f16c:	69fb      	ldr	r3, [r7, #28]
 800f16e:	4413      	add	r3, r2
 800f170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f174:	691b      	ldr	r3, [r3, #16]
 800f176:	69ba      	ldr	r2, [r7, #24]
 800f178:	0151      	lsls	r1, r2, #5
 800f17a:	69fa      	ldr	r2, [r7, #28]
 800f17c:	440a      	add	r2, r1
 800f17e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f182:	0cdb      	lsrs	r3, r3, #19
 800f184:	04db      	lsls	r3, r3, #19
 800f186:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f188:	69bb      	ldr	r3, [r7, #24]
 800f18a:	015a      	lsls	r2, r3, #5
 800f18c:	69fb      	ldr	r3, [r7, #28]
 800f18e:	4413      	add	r3, r2
 800f190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f194:	691b      	ldr	r3, [r3, #16]
 800f196:	69ba      	ldr	r2, [r7, #24]
 800f198:	0151      	lsls	r1, r2, #5
 800f19a:	69fa      	ldr	r2, [r7, #28]
 800f19c:	440a      	add	r2, r1
 800f19e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f1a2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f1a6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f1aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800f1ac:	69bb      	ldr	r3, [r7, #24]
 800f1ae:	015a      	lsls	r2, r3, #5
 800f1b0:	69fb      	ldr	r3, [r7, #28]
 800f1b2:	4413      	add	r3, r2
 800f1b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f1b8:	691a      	ldr	r2, [r3, #16]
 800f1ba:	68bb      	ldr	r3, [r7, #8]
 800f1bc:	6959      	ldr	r1, [r3, #20]
 800f1be:	68bb      	ldr	r3, [r7, #8]
 800f1c0:	689b      	ldr	r3, [r3, #8]
 800f1c2:	440b      	add	r3, r1
 800f1c4:	1e59      	subs	r1, r3, #1
 800f1c6:	68bb      	ldr	r3, [r7, #8]
 800f1c8:	689b      	ldr	r3, [r3, #8]
 800f1ca:	fbb1 f3f3 	udiv	r3, r1, r3
 800f1ce:	04d9      	lsls	r1, r3, #19
 800f1d0:	4b9d      	ldr	r3, [pc, #628]	; (800f448 <USB_EPStartXfer+0x370>)
 800f1d2:	400b      	ands	r3, r1
 800f1d4:	69b9      	ldr	r1, [r7, #24]
 800f1d6:	0148      	lsls	r0, r1, #5
 800f1d8:	69f9      	ldr	r1, [r7, #28]
 800f1da:	4401      	add	r1, r0
 800f1dc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f1e0:	4313      	orrs	r3, r2
 800f1e2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f1e4:	69bb      	ldr	r3, [r7, #24]
 800f1e6:	015a      	lsls	r2, r3, #5
 800f1e8:	69fb      	ldr	r3, [r7, #28]
 800f1ea:	4413      	add	r3, r2
 800f1ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f1f0:	691a      	ldr	r2, [r3, #16]
 800f1f2:	68bb      	ldr	r3, [r7, #8]
 800f1f4:	695b      	ldr	r3, [r3, #20]
 800f1f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f1fa:	69b9      	ldr	r1, [r7, #24]
 800f1fc:	0148      	lsls	r0, r1, #5
 800f1fe:	69f9      	ldr	r1, [r7, #28]
 800f200:	4401      	add	r1, r0
 800f202:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f206:	4313      	orrs	r3, r2
 800f208:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800f20a:	68bb      	ldr	r3, [r7, #8]
 800f20c:	78db      	ldrb	r3, [r3, #3]
 800f20e:	2b01      	cmp	r3, #1
 800f210:	d11f      	bne.n	800f252 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800f212:	69bb      	ldr	r3, [r7, #24]
 800f214:	015a      	lsls	r2, r3, #5
 800f216:	69fb      	ldr	r3, [r7, #28]
 800f218:	4413      	add	r3, r2
 800f21a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f21e:	691b      	ldr	r3, [r3, #16]
 800f220:	69ba      	ldr	r2, [r7, #24]
 800f222:	0151      	lsls	r1, r2, #5
 800f224:	69fa      	ldr	r2, [r7, #28]
 800f226:	440a      	add	r2, r1
 800f228:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f22c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800f230:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800f232:	69bb      	ldr	r3, [r7, #24]
 800f234:	015a      	lsls	r2, r3, #5
 800f236:	69fb      	ldr	r3, [r7, #28]
 800f238:	4413      	add	r3, r2
 800f23a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f23e:	691b      	ldr	r3, [r3, #16]
 800f240:	69ba      	ldr	r2, [r7, #24]
 800f242:	0151      	lsls	r1, r2, #5
 800f244:	69fa      	ldr	r2, [r7, #28]
 800f246:	440a      	add	r2, r1
 800f248:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f24c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f250:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800f252:	79fb      	ldrb	r3, [r7, #7]
 800f254:	2b01      	cmp	r3, #1
 800f256:	d14b      	bne.n	800f2f0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f258:	68bb      	ldr	r3, [r7, #8]
 800f25a:	691b      	ldr	r3, [r3, #16]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d009      	beq.n	800f274 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f260:	69bb      	ldr	r3, [r7, #24]
 800f262:	015a      	lsls	r2, r3, #5
 800f264:	69fb      	ldr	r3, [r7, #28]
 800f266:	4413      	add	r3, r2
 800f268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f26c:	461a      	mov	r2, r3
 800f26e:	68bb      	ldr	r3, [r7, #8]
 800f270:	691b      	ldr	r3, [r3, #16]
 800f272:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800f274:	68bb      	ldr	r3, [r7, #8]
 800f276:	78db      	ldrb	r3, [r3, #3]
 800f278:	2b01      	cmp	r3, #1
 800f27a:	d128      	bne.n	800f2ce <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f27c:	69fb      	ldr	r3, [r7, #28]
 800f27e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f282:	689b      	ldr	r3, [r3, #8]
 800f284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d110      	bne.n	800f2ae <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f28c:	69bb      	ldr	r3, [r7, #24]
 800f28e:	015a      	lsls	r2, r3, #5
 800f290:	69fb      	ldr	r3, [r7, #28]
 800f292:	4413      	add	r3, r2
 800f294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	69ba      	ldr	r2, [r7, #24]
 800f29c:	0151      	lsls	r1, r2, #5
 800f29e:	69fa      	ldr	r2, [r7, #28]
 800f2a0:	440a      	add	r2, r1
 800f2a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f2a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f2aa:	6013      	str	r3, [r2, #0]
 800f2ac:	e00f      	b.n	800f2ce <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f2ae:	69bb      	ldr	r3, [r7, #24]
 800f2b0:	015a      	lsls	r2, r3, #5
 800f2b2:	69fb      	ldr	r3, [r7, #28]
 800f2b4:	4413      	add	r3, r2
 800f2b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	69ba      	ldr	r2, [r7, #24]
 800f2be:	0151      	lsls	r1, r2, #5
 800f2c0:	69fa      	ldr	r2, [r7, #28]
 800f2c2:	440a      	add	r2, r1
 800f2c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f2c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f2cc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f2ce:	69bb      	ldr	r3, [r7, #24]
 800f2d0:	015a      	lsls	r2, r3, #5
 800f2d2:	69fb      	ldr	r3, [r7, #28]
 800f2d4:	4413      	add	r3, r2
 800f2d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	69ba      	ldr	r2, [r7, #24]
 800f2de:	0151      	lsls	r1, r2, #5
 800f2e0:	69fa      	ldr	r2, [r7, #28]
 800f2e2:	440a      	add	r2, r1
 800f2e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f2e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f2ec:	6013      	str	r3, [r2, #0]
 800f2ee:	e12f      	b.n	800f550 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f2f0:	69bb      	ldr	r3, [r7, #24]
 800f2f2:	015a      	lsls	r2, r3, #5
 800f2f4:	69fb      	ldr	r3, [r7, #28]
 800f2f6:	4413      	add	r3, r2
 800f2f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	69ba      	ldr	r2, [r7, #24]
 800f300:	0151      	lsls	r1, r2, #5
 800f302:	69fa      	ldr	r2, [r7, #28]
 800f304:	440a      	add	r2, r1
 800f306:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f30a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f30e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f310:	68bb      	ldr	r3, [r7, #8]
 800f312:	78db      	ldrb	r3, [r3, #3]
 800f314:	2b01      	cmp	r3, #1
 800f316:	d015      	beq.n	800f344 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800f318:	68bb      	ldr	r3, [r7, #8]
 800f31a:	695b      	ldr	r3, [r3, #20]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	f000 8117 	beq.w	800f550 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f322:	69fb      	ldr	r3, [r7, #28]
 800f324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f328:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f32a:	68bb      	ldr	r3, [r7, #8]
 800f32c:	781b      	ldrb	r3, [r3, #0]
 800f32e:	f003 030f 	and.w	r3, r3, #15
 800f332:	2101      	movs	r1, #1
 800f334:	fa01 f303 	lsl.w	r3, r1, r3
 800f338:	69f9      	ldr	r1, [r7, #28]
 800f33a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f33e:	4313      	orrs	r3, r2
 800f340:	634b      	str	r3, [r1, #52]	; 0x34
 800f342:	e105      	b.n	800f550 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f344:	69fb      	ldr	r3, [r7, #28]
 800f346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f34a:	689b      	ldr	r3, [r3, #8]
 800f34c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f350:	2b00      	cmp	r3, #0
 800f352:	d110      	bne.n	800f376 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f354:	69bb      	ldr	r3, [r7, #24]
 800f356:	015a      	lsls	r2, r3, #5
 800f358:	69fb      	ldr	r3, [r7, #28]
 800f35a:	4413      	add	r3, r2
 800f35c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	69ba      	ldr	r2, [r7, #24]
 800f364:	0151      	lsls	r1, r2, #5
 800f366:	69fa      	ldr	r2, [r7, #28]
 800f368:	440a      	add	r2, r1
 800f36a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f36e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f372:	6013      	str	r3, [r2, #0]
 800f374:	e00f      	b.n	800f396 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f376:	69bb      	ldr	r3, [r7, #24]
 800f378:	015a      	lsls	r2, r3, #5
 800f37a:	69fb      	ldr	r3, [r7, #28]
 800f37c:	4413      	add	r3, r2
 800f37e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	69ba      	ldr	r2, [r7, #24]
 800f386:	0151      	lsls	r1, r2, #5
 800f388:	69fa      	ldr	r2, [r7, #28]
 800f38a:	440a      	add	r2, r1
 800f38c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f394:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800f396:	68bb      	ldr	r3, [r7, #8]
 800f398:	68d9      	ldr	r1, [r3, #12]
 800f39a:	68bb      	ldr	r3, [r7, #8]
 800f39c:	781a      	ldrb	r2, [r3, #0]
 800f39e:	68bb      	ldr	r3, [r7, #8]
 800f3a0:	695b      	ldr	r3, [r3, #20]
 800f3a2:	b298      	uxth	r0, r3
 800f3a4:	79fb      	ldrb	r3, [r7, #7]
 800f3a6:	9300      	str	r3, [sp, #0]
 800f3a8:	4603      	mov	r3, r0
 800f3aa:	68f8      	ldr	r0, [r7, #12]
 800f3ac:	f000 fa2b 	bl	800f806 <USB_WritePacket>
 800f3b0:	e0ce      	b.n	800f550 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f3b2:	69bb      	ldr	r3, [r7, #24]
 800f3b4:	015a      	lsls	r2, r3, #5
 800f3b6:	69fb      	ldr	r3, [r7, #28]
 800f3b8:	4413      	add	r3, r2
 800f3ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3be:	691b      	ldr	r3, [r3, #16]
 800f3c0:	69ba      	ldr	r2, [r7, #24]
 800f3c2:	0151      	lsls	r1, r2, #5
 800f3c4:	69fa      	ldr	r2, [r7, #28]
 800f3c6:	440a      	add	r2, r1
 800f3c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f3cc:	0cdb      	lsrs	r3, r3, #19
 800f3ce:	04db      	lsls	r3, r3, #19
 800f3d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f3d2:	69bb      	ldr	r3, [r7, #24]
 800f3d4:	015a      	lsls	r2, r3, #5
 800f3d6:	69fb      	ldr	r3, [r7, #28]
 800f3d8:	4413      	add	r3, r2
 800f3da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3de:	691b      	ldr	r3, [r3, #16]
 800f3e0:	69ba      	ldr	r2, [r7, #24]
 800f3e2:	0151      	lsls	r1, r2, #5
 800f3e4:	69fa      	ldr	r2, [r7, #28]
 800f3e6:	440a      	add	r2, r1
 800f3e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f3ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f3f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f3f4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800f3f6:	68bb      	ldr	r3, [r7, #8]
 800f3f8:	695b      	ldr	r3, [r3, #20]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d126      	bne.n	800f44c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800f3fe:	69bb      	ldr	r3, [r7, #24]
 800f400:	015a      	lsls	r2, r3, #5
 800f402:	69fb      	ldr	r3, [r7, #28]
 800f404:	4413      	add	r3, r2
 800f406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f40a:	691a      	ldr	r2, [r3, #16]
 800f40c:	68bb      	ldr	r3, [r7, #8]
 800f40e:	689b      	ldr	r3, [r3, #8]
 800f410:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f414:	69b9      	ldr	r1, [r7, #24]
 800f416:	0148      	lsls	r0, r1, #5
 800f418:	69f9      	ldr	r1, [r7, #28]
 800f41a:	4401      	add	r1, r0
 800f41c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f420:	4313      	orrs	r3, r2
 800f422:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f424:	69bb      	ldr	r3, [r7, #24]
 800f426:	015a      	lsls	r2, r3, #5
 800f428:	69fb      	ldr	r3, [r7, #28]
 800f42a:	4413      	add	r3, r2
 800f42c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f430:	691b      	ldr	r3, [r3, #16]
 800f432:	69ba      	ldr	r2, [r7, #24]
 800f434:	0151      	lsls	r1, r2, #5
 800f436:	69fa      	ldr	r2, [r7, #28]
 800f438:	440a      	add	r2, r1
 800f43a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f43e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f442:	6113      	str	r3, [r2, #16]
 800f444:	e036      	b.n	800f4b4 <USB_EPStartXfer+0x3dc>
 800f446:	bf00      	nop
 800f448:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800f44c:	68bb      	ldr	r3, [r7, #8]
 800f44e:	695a      	ldr	r2, [r3, #20]
 800f450:	68bb      	ldr	r3, [r7, #8]
 800f452:	689b      	ldr	r3, [r3, #8]
 800f454:	4413      	add	r3, r2
 800f456:	1e5a      	subs	r2, r3, #1
 800f458:	68bb      	ldr	r3, [r7, #8]
 800f45a:	689b      	ldr	r3, [r3, #8]
 800f45c:	fbb2 f3f3 	udiv	r3, r2, r3
 800f460:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f462:	69bb      	ldr	r3, [r7, #24]
 800f464:	015a      	lsls	r2, r3, #5
 800f466:	69fb      	ldr	r3, [r7, #28]
 800f468:	4413      	add	r3, r2
 800f46a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f46e:	691a      	ldr	r2, [r3, #16]
 800f470:	8afb      	ldrh	r3, [r7, #22]
 800f472:	04d9      	lsls	r1, r3, #19
 800f474:	4b39      	ldr	r3, [pc, #228]	; (800f55c <USB_EPStartXfer+0x484>)
 800f476:	400b      	ands	r3, r1
 800f478:	69b9      	ldr	r1, [r7, #24]
 800f47a:	0148      	lsls	r0, r1, #5
 800f47c:	69f9      	ldr	r1, [r7, #28]
 800f47e:	4401      	add	r1, r0
 800f480:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f484:	4313      	orrs	r3, r2
 800f486:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800f488:	69bb      	ldr	r3, [r7, #24]
 800f48a:	015a      	lsls	r2, r3, #5
 800f48c:	69fb      	ldr	r3, [r7, #28]
 800f48e:	4413      	add	r3, r2
 800f490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f494:	691a      	ldr	r2, [r3, #16]
 800f496:	68bb      	ldr	r3, [r7, #8]
 800f498:	689b      	ldr	r3, [r3, #8]
 800f49a:	8af9      	ldrh	r1, [r7, #22]
 800f49c:	fb01 f303 	mul.w	r3, r1, r3
 800f4a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f4a4:	69b9      	ldr	r1, [r7, #24]
 800f4a6:	0148      	lsls	r0, r1, #5
 800f4a8:	69f9      	ldr	r1, [r7, #28]
 800f4aa:	4401      	add	r1, r0
 800f4ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f4b0:	4313      	orrs	r3, r2
 800f4b2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f4b4:	79fb      	ldrb	r3, [r7, #7]
 800f4b6:	2b01      	cmp	r3, #1
 800f4b8:	d10d      	bne.n	800f4d6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f4ba:	68bb      	ldr	r3, [r7, #8]
 800f4bc:	68db      	ldr	r3, [r3, #12]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d009      	beq.n	800f4d6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f4c2:	68bb      	ldr	r3, [r7, #8]
 800f4c4:	68d9      	ldr	r1, [r3, #12]
 800f4c6:	69bb      	ldr	r3, [r7, #24]
 800f4c8:	015a      	lsls	r2, r3, #5
 800f4ca:	69fb      	ldr	r3, [r7, #28]
 800f4cc:	4413      	add	r3, r2
 800f4ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4d2:	460a      	mov	r2, r1
 800f4d4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800f4d6:	68bb      	ldr	r3, [r7, #8]
 800f4d8:	78db      	ldrb	r3, [r3, #3]
 800f4da:	2b01      	cmp	r3, #1
 800f4dc:	d128      	bne.n	800f530 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f4de:	69fb      	ldr	r3, [r7, #28]
 800f4e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f4e4:	689b      	ldr	r3, [r3, #8]
 800f4e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d110      	bne.n	800f510 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800f4ee:	69bb      	ldr	r3, [r7, #24]
 800f4f0:	015a      	lsls	r2, r3, #5
 800f4f2:	69fb      	ldr	r3, [r7, #28]
 800f4f4:	4413      	add	r3, r2
 800f4f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	69ba      	ldr	r2, [r7, #24]
 800f4fe:	0151      	lsls	r1, r2, #5
 800f500:	69fa      	ldr	r2, [r7, #28]
 800f502:	440a      	add	r2, r1
 800f504:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f508:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f50c:	6013      	str	r3, [r2, #0]
 800f50e:	e00f      	b.n	800f530 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800f510:	69bb      	ldr	r3, [r7, #24]
 800f512:	015a      	lsls	r2, r3, #5
 800f514:	69fb      	ldr	r3, [r7, #28]
 800f516:	4413      	add	r3, r2
 800f518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	69ba      	ldr	r2, [r7, #24]
 800f520:	0151      	lsls	r1, r2, #5
 800f522:	69fa      	ldr	r2, [r7, #28]
 800f524:	440a      	add	r2, r1
 800f526:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f52a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f52e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f530:	69bb      	ldr	r3, [r7, #24]
 800f532:	015a      	lsls	r2, r3, #5
 800f534:	69fb      	ldr	r3, [r7, #28]
 800f536:	4413      	add	r3, r2
 800f538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	69ba      	ldr	r2, [r7, #24]
 800f540:	0151      	lsls	r1, r2, #5
 800f542:	69fa      	ldr	r2, [r7, #28]
 800f544:	440a      	add	r2, r1
 800f546:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f54a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f54e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f550:	2300      	movs	r3, #0
}
 800f552:	4618      	mov	r0, r3
 800f554:	3720      	adds	r7, #32
 800f556:	46bd      	mov	sp, r7
 800f558:	bd80      	pop	{r7, pc}
 800f55a:	bf00      	nop
 800f55c:	1ff80000 	.word	0x1ff80000

0800f560 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f560:	b480      	push	{r7}
 800f562:	b087      	sub	sp, #28
 800f564:	af00      	add	r7, sp, #0
 800f566:	60f8      	str	r0, [r7, #12]
 800f568:	60b9      	str	r1, [r7, #8]
 800f56a:	4613      	mov	r3, r2
 800f56c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800f572:	68bb      	ldr	r3, [r7, #8]
 800f574:	781b      	ldrb	r3, [r3, #0]
 800f576:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f578:	68bb      	ldr	r3, [r7, #8]
 800f57a:	785b      	ldrb	r3, [r3, #1]
 800f57c:	2b01      	cmp	r3, #1
 800f57e:	f040 80cd 	bne.w	800f71c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f582:	68bb      	ldr	r3, [r7, #8]
 800f584:	695b      	ldr	r3, [r3, #20]
 800f586:	2b00      	cmp	r3, #0
 800f588:	d132      	bne.n	800f5f0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f58a:	693b      	ldr	r3, [r7, #16]
 800f58c:	015a      	lsls	r2, r3, #5
 800f58e:	697b      	ldr	r3, [r7, #20]
 800f590:	4413      	add	r3, r2
 800f592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f596:	691b      	ldr	r3, [r3, #16]
 800f598:	693a      	ldr	r2, [r7, #16]
 800f59a:	0151      	lsls	r1, r2, #5
 800f59c:	697a      	ldr	r2, [r7, #20]
 800f59e:	440a      	add	r2, r1
 800f5a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f5a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f5a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f5ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f5ae:	693b      	ldr	r3, [r7, #16]
 800f5b0:	015a      	lsls	r2, r3, #5
 800f5b2:	697b      	ldr	r3, [r7, #20]
 800f5b4:	4413      	add	r3, r2
 800f5b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5ba:	691b      	ldr	r3, [r3, #16]
 800f5bc:	693a      	ldr	r2, [r7, #16]
 800f5be:	0151      	lsls	r1, r2, #5
 800f5c0:	697a      	ldr	r2, [r7, #20]
 800f5c2:	440a      	add	r2, r1
 800f5c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f5c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f5cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f5ce:	693b      	ldr	r3, [r7, #16]
 800f5d0:	015a      	lsls	r2, r3, #5
 800f5d2:	697b      	ldr	r3, [r7, #20]
 800f5d4:	4413      	add	r3, r2
 800f5d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5da:	691b      	ldr	r3, [r3, #16]
 800f5dc:	693a      	ldr	r2, [r7, #16]
 800f5de:	0151      	lsls	r1, r2, #5
 800f5e0:	697a      	ldr	r2, [r7, #20]
 800f5e2:	440a      	add	r2, r1
 800f5e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f5e8:	0cdb      	lsrs	r3, r3, #19
 800f5ea:	04db      	lsls	r3, r3, #19
 800f5ec:	6113      	str	r3, [r2, #16]
 800f5ee:	e04e      	b.n	800f68e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f5f0:	693b      	ldr	r3, [r7, #16]
 800f5f2:	015a      	lsls	r2, r3, #5
 800f5f4:	697b      	ldr	r3, [r7, #20]
 800f5f6:	4413      	add	r3, r2
 800f5f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5fc:	691b      	ldr	r3, [r3, #16]
 800f5fe:	693a      	ldr	r2, [r7, #16]
 800f600:	0151      	lsls	r1, r2, #5
 800f602:	697a      	ldr	r2, [r7, #20]
 800f604:	440a      	add	r2, r1
 800f606:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f60a:	0cdb      	lsrs	r3, r3, #19
 800f60c:	04db      	lsls	r3, r3, #19
 800f60e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f610:	693b      	ldr	r3, [r7, #16]
 800f612:	015a      	lsls	r2, r3, #5
 800f614:	697b      	ldr	r3, [r7, #20]
 800f616:	4413      	add	r3, r2
 800f618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f61c:	691b      	ldr	r3, [r3, #16]
 800f61e:	693a      	ldr	r2, [r7, #16]
 800f620:	0151      	lsls	r1, r2, #5
 800f622:	697a      	ldr	r2, [r7, #20]
 800f624:	440a      	add	r2, r1
 800f626:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f62a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f62e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f632:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800f634:	68bb      	ldr	r3, [r7, #8]
 800f636:	695a      	ldr	r2, [r3, #20]
 800f638:	68bb      	ldr	r3, [r7, #8]
 800f63a:	689b      	ldr	r3, [r3, #8]
 800f63c:	429a      	cmp	r2, r3
 800f63e:	d903      	bls.n	800f648 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800f640:	68bb      	ldr	r3, [r7, #8]
 800f642:	689a      	ldr	r2, [r3, #8]
 800f644:	68bb      	ldr	r3, [r7, #8]
 800f646:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f648:	693b      	ldr	r3, [r7, #16]
 800f64a:	015a      	lsls	r2, r3, #5
 800f64c:	697b      	ldr	r3, [r7, #20]
 800f64e:	4413      	add	r3, r2
 800f650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f654:	691b      	ldr	r3, [r3, #16]
 800f656:	693a      	ldr	r2, [r7, #16]
 800f658:	0151      	lsls	r1, r2, #5
 800f65a:	697a      	ldr	r2, [r7, #20]
 800f65c:	440a      	add	r2, r1
 800f65e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f662:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f666:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f668:	693b      	ldr	r3, [r7, #16]
 800f66a:	015a      	lsls	r2, r3, #5
 800f66c:	697b      	ldr	r3, [r7, #20]
 800f66e:	4413      	add	r3, r2
 800f670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f674:	691a      	ldr	r2, [r3, #16]
 800f676:	68bb      	ldr	r3, [r7, #8]
 800f678:	695b      	ldr	r3, [r3, #20]
 800f67a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f67e:	6939      	ldr	r1, [r7, #16]
 800f680:	0148      	lsls	r0, r1, #5
 800f682:	6979      	ldr	r1, [r7, #20]
 800f684:	4401      	add	r1, r0
 800f686:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f68a:	4313      	orrs	r3, r2
 800f68c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f68e:	79fb      	ldrb	r3, [r7, #7]
 800f690:	2b01      	cmp	r3, #1
 800f692:	d11e      	bne.n	800f6d2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f694:	68bb      	ldr	r3, [r7, #8]
 800f696:	691b      	ldr	r3, [r3, #16]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d009      	beq.n	800f6b0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f69c:	693b      	ldr	r3, [r7, #16]
 800f69e:	015a      	lsls	r2, r3, #5
 800f6a0:	697b      	ldr	r3, [r7, #20]
 800f6a2:	4413      	add	r3, r2
 800f6a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6a8:	461a      	mov	r2, r3
 800f6aa:	68bb      	ldr	r3, [r7, #8]
 800f6ac:	691b      	ldr	r3, [r3, #16]
 800f6ae:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f6b0:	693b      	ldr	r3, [r7, #16]
 800f6b2:	015a      	lsls	r2, r3, #5
 800f6b4:	697b      	ldr	r3, [r7, #20]
 800f6b6:	4413      	add	r3, r2
 800f6b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	693a      	ldr	r2, [r7, #16]
 800f6c0:	0151      	lsls	r1, r2, #5
 800f6c2:	697a      	ldr	r2, [r7, #20]
 800f6c4:	440a      	add	r2, r1
 800f6c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f6ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f6ce:	6013      	str	r3, [r2, #0]
 800f6d0:	e092      	b.n	800f7f8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f6d2:	693b      	ldr	r3, [r7, #16]
 800f6d4:	015a      	lsls	r2, r3, #5
 800f6d6:	697b      	ldr	r3, [r7, #20]
 800f6d8:	4413      	add	r3, r2
 800f6da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	693a      	ldr	r2, [r7, #16]
 800f6e2:	0151      	lsls	r1, r2, #5
 800f6e4:	697a      	ldr	r2, [r7, #20]
 800f6e6:	440a      	add	r2, r1
 800f6e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f6ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f6f0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800f6f2:	68bb      	ldr	r3, [r7, #8]
 800f6f4:	695b      	ldr	r3, [r3, #20]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d07e      	beq.n	800f7f8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f6fa:	697b      	ldr	r3, [r7, #20]
 800f6fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f700:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f702:	68bb      	ldr	r3, [r7, #8]
 800f704:	781b      	ldrb	r3, [r3, #0]
 800f706:	f003 030f 	and.w	r3, r3, #15
 800f70a:	2101      	movs	r1, #1
 800f70c:	fa01 f303 	lsl.w	r3, r1, r3
 800f710:	6979      	ldr	r1, [r7, #20]
 800f712:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f716:	4313      	orrs	r3, r2
 800f718:	634b      	str	r3, [r1, #52]	; 0x34
 800f71a:	e06d      	b.n	800f7f8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f71c:	693b      	ldr	r3, [r7, #16]
 800f71e:	015a      	lsls	r2, r3, #5
 800f720:	697b      	ldr	r3, [r7, #20]
 800f722:	4413      	add	r3, r2
 800f724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f728:	691b      	ldr	r3, [r3, #16]
 800f72a:	693a      	ldr	r2, [r7, #16]
 800f72c:	0151      	lsls	r1, r2, #5
 800f72e:	697a      	ldr	r2, [r7, #20]
 800f730:	440a      	add	r2, r1
 800f732:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f736:	0cdb      	lsrs	r3, r3, #19
 800f738:	04db      	lsls	r3, r3, #19
 800f73a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f73c:	693b      	ldr	r3, [r7, #16]
 800f73e:	015a      	lsls	r2, r3, #5
 800f740:	697b      	ldr	r3, [r7, #20]
 800f742:	4413      	add	r3, r2
 800f744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f748:	691b      	ldr	r3, [r3, #16]
 800f74a:	693a      	ldr	r2, [r7, #16]
 800f74c:	0151      	lsls	r1, r2, #5
 800f74e:	697a      	ldr	r2, [r7, #20]
 800f750:	440a      	add	r2, r1
 800f752:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f756:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f75a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f75e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800f760:	68bb      	ldr	r3, [r7, #8]
 800f762:	695b      	ldr	r3, [r3, #20]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d003      	beq.n	800f770 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800f768:	68bb      	ldr	r3, [r7, #8]
 800f76a:	689a      	ldr	r2, [r3, #8]
 800f76c:	68bb      	ldr	r3, [r7, #8]
 800f76e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f770:	693b      	ldr	r3, [r7, #16]
 800f772:	015a      	lsls	r2, r3, #5
 800f774:	697b      	ldr	r3, [r7, #20]
 800f776:	4413      	add	r3, r2
 800f778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f77c:	691b      	ldr	r3, [r3, #16]
 800f77e:	693a      	ldr	r2, [r7, #16]
 800f780:	0151      	lsls	r1, r2, #5
 800f782:	697a      	ldr	r2, [r7, #20]
 800f784:	440a      	add	r2, r1
 800f786:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f78a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f78e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800f790:	693b      	ldr	r3, [r7, #16]
 800f792:	015a      	lsls	r2, r3, #5
 800f794:	697b      	ldr	r3, [r7, #20]
 800f796:	4413      	add	r3, r2
 800f798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f79c:	691a      	ldr	r2, [r3, #16]
 800f79e:	68bb      	ldr	r3, [r7, #8]
 800f7a0:	689b      	ldr	r3, [r3, #8]
 800f7a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f7a6:	6939      	ldr	r1, [r7, #16]
 800f7a8:	0148      	lsls	r0, r1, #5
 800f7aa:	6979      	ldr	r1, [r7, #20]
 800f7ac:	4401      	add	r1, r0
 800f7ae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f7b2:	4313      	orrs	r3, r2
 800f7b4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800f7b6:	79fb      	ldrb	r3, [r7, #7]
 800f7b8:	2b01      	cmp	r3, #1
 800f7ba:	d10d      	bne.n	800f7d8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f7bc:	68bb      	ldr	r3, [r7, #8]
 800f7be:	68db      	ldr	r3, [r3, #12]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d009      	beq.n	800f7d8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f7c4:	68bb      	ldr	r3, [r7, #8]
 800f7c6:	68d9      	ldr	r1, [r3, #12]
 800f7c8:	693b      	ldr	r3, [r7, #16]
 800f7ca:	015a      	lsls	r2, r3, #5
 800f7cc:	697b      	ldr	r3, [r7, #20]
 800f7ce:	4413      	add	r3, r2
 800f7d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7d4:	460a      	mov	r2, r1
 800f7d6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f7d8:	693b      	ldr	r3, [r7, #16]
 800f7da:	015a      	lsls	r2, r3, #5
 800f7dc:	697b      	ldr	r3, [r7, #20]
 800f7de:	4413      	add	r3, r2
 800f7e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	693a      	ldr	r2, [r7, #16]
 800f7e8:	0151      	lsls	r1, r2, #5
 800f7ea:	697a      	ldr	r2, [r7, #20]
 800f7ec:	440a      	add	r2, r1
 800f7ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f7f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f7f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f7f8:	2300      	movs	r3, #0
}
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	371c      	adds	r7, #28
 800f7fe:	46bd      	mov	sp, r7
 800f800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f804:	4770      	bx	lr

0800f806 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800f806:	b480      	push	{r7}
 800f808:	b089      	sub	sp, #36	; 0x24
 800f80a:	af00      	add	r7, sp, #0
 800f80c:	60f8      	str	r0, [r7, #12]
 800f80e:	60b9      	str	r1, [r7, #8]
 800f810:	4611      	mov	r1, r2
 800f812:	461a      	mov	r2, r3
 800f814:	460b      	mov	r3, r1
 800f816:	71fb      	strb	r3, [r7, #7]
 800f818:	4613      	mov	r3, r2
 800f81a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800f820:	68bb      	ldr	r3, [r7, #8]
 800f822:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800f824:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d11a      	bne.n	800f862 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800f82c:	88bb      	ldrh	r3, [r7, #4]
 800f82e:	3303      	adds	r3, #3
 800f830:	089b      	lsrs	r3, r3, #2
 800f832:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800f834:	2300      	movs	r3, #0
 800f836:	61bb      	str	r3, [r7, #24]
 800f838:	e00f      	b.n	800f85a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f83a:	79fb      	ldrb	r3, [r7, #7]
 800f83c:	031a      	lsls	r2, r3, #12
 800f83e:	697b      	ldr	r3, [r7, #20]
 800f840:	4413      	add	r3, r2
 800f842:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f846:	461a      	mov	r2, r3
 800f848:	69fb      	ldr	r3, [r7, #28]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800f84e:	69fb      	ldr	r3, [r7, #28]
 800f850:	3304      	adds	r3, #4
 800f852:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800f854:	69bb      	ldr	r3, [r7, #24]
 800f856:	3301      	adds	r3, #1
 800f858:	61bb      	str	r3, [r7, #24]
 800f85a:	69ba      	ldr	r2, [r7, #24]
 800f85c:	693b      	ldr	r3, [r7, #16]
 800f85e:	429a      	cmp	r2, r3
 800f860:	d3eb      	bcc.n	800f83a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800f862:	2300      	movs	r3, #0
}
 800f864:	4618      	mov	r0, r3
 800f866:	3724      	adds	r7, #36	; 0x24
 800f868:	46bd      	mov	sp, r7
 800f86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86e:	4770      	bx	lr

0800f870 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800f870:	b480      	push	{r7}
 800f872:	b089      	sub	sp, #36	; 0x24
 800f874:	af00      	add	r7, sp, #0
 800f876:	60f8      	str	r0, [r7, #12]
 800f878:	60b9      	str	r1, [r7, #8]
 800f87a:	4613      	mov	r3, r2
 800f87c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800f882:	68bb      	ldr	r3, [r7, #8]
 800f884:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800f886:	88fb      	ldrh	r3, [r7, #6]
 800f888:	3303      	adds	r3, #3
 800f88a:	089b      	lsrs	r3, r3, #2
 800f88c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800f88e:	2300      	movs	r3, #0
 800f890:	61bb      	str	r3, [r7, #24]
 800f892:	e00b      	b.n	800f8ac <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f894:	697b      	ldr	r3, [r7, #20]
 800f896:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f89a:	681a      	ldr	r2, [r3, #0]
 800f89c:	69fb      	ldr	r3, [r7, #28]
 800f89e:	601a      	str	r2, [r3, #0]
    pDest++;
 800f8a0:	69fb      	ldr	r3, [r7, #28]
 800f8a2:	3304      	adds	r3, #4
 800f8a4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800f8a6:	69bb      	ldr	r3, [r7, #24]
 800f8a8:	3301      	adds	r3, #1
 800f8aa:	61bb      	str	r3, [r7, #24]
 800f8ac:	69ba      	ldr	r2, [r7, #24]
 800f8ae:	693b      	ldr	r3, [r7, #16]
 800f8b0:	429a      	cmp	r2, r3
 800f8b2:	d3ef      	bcc.n	800f894 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800f8b4:	69fb      	ldr	r3, [r7, #28]
}
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	3724      	adds	r7, #36	; 0x24
 800f8ba:	46bd      	mov	sp, r7
 800f8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c0:	4770      	bx	lr

0800f8c2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f8c2:	b480      	push	{r7}
 800f8c4:	b085      	sub	sp, #20
 800f8c6:	af00      	add	r7, sp, #0
 800f8c8:	6078      	str	r0, [r7, #4]
 800f8ca:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f8d0:	683b      	ldr	r3, [r7, #0]
 800f8d2:	781b      	ldrb	r3, [r3, #0]
 800f8d4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f8d6:	683b      	ldr	r3, [r7, #0]
 800f8d8:	785b      	ldrb	r3, [r3, #1]
 800f8da:	2b01      	cmp	r3, #1
 800f8dc:	d12c      	bne.n	800f938 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f8de:	68bb      	ldr	r3, [r7, #8]
 800f8e0:	015a      	lsls	r2, r3, #5
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	4413      	add	r3, r2
 800f8e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	db12      	blt.n	800f916 <USB_EPSetStall+0x54>
 800f8f0:	68bb      	ldr	r3, [r7, #8]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d00f      	beq.n	800f916 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800f8f6:	68bb      	ldr	r3, [r7, #8]
 800f8f8:	015a      	lsls	r2, r3, #5
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	4413      	add	r3, r2
 800f8fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	68ba      	ldr	r2, [r7, #8]
 800f906:	0151      	lsls	r1, r2, #5
 800f908:	68fa      	ldr	r2, [r7, #12]
 800f90a:	440a      	add	r2, r1
 800f90c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f910:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f914:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800f916:	68bb      	ldr	r3, [r7, #8]
 800f918:	015a      	lsls	r2, r3, #5
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	4413      	add	r3, r2
 800f91e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	68ba      	ldr	r2, [r7, #8]
 800f926:	0151      	lsls	r1, r2, #5
 800f928:	68fa      	ldr	r2, [r7, #12]
 800f92a:	440a      	add	r2, r1
 800f92c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f930:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f934:	6013      	str	r3, [r2, #0]
 800f936:	e02b      	b.n	800f990 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f938:	68bb      	ldr	r3, [r7, #8]
 800f93a:	015a      	lsls	r2, r3, #5
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	4413      	add	r3, r2
 800f940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	2b00      	cmp	r3, #0
 800f948:	db12      	blt.n	800f970 <USB_EPSetStall+0xae>
 800f94a:	68bb      	ldr	r3, [r7, #8]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d00f      	beq.n	800f970 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800f950:	68bb      	ldr	r3, [r7, #8]
 800f952:	015a      	lsls	r2, r3, #5
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	4413      	add	r3, r2
 800f958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	68ba      	ldr	r2, [r7, #8]
 800f960:	0151      	lsls	r1, r2, #5
 800f962:	68fa      	ldr	r2, [r7, #12]
 800f964:	440a      	add	r2, r1
 800f966:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f96a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f96e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800f970:	68bb      	ldr	r3, [r7, #8]
 800f972:	015a      	lsls	r2, r3, #5
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	4413      	add	r3, r2
 800f978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	68ba      	ldr	r2, [r7, #8]
 800f980:	0151      	lsls	r1, r2, #5
 800f982:	68fa      	ldr	r2, [r7, #12]
 800f984:	440a      	add	r2, r1
 800f986:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f98a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f98e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f990:	2300      	movs	r3, #0
}
 800f992:	4618      	mov	r0, r3
 800f994:	3714      	adds	r7, #20
 800f996:	46bd      	mov	sp, r7
 800f998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f99c:	4770      	bx	lr

0800f99e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f99e:	b480      	push	{r7}
 800f9a0:	b085      	sub	sp, #20
 800f9a2:	af00      	add	r7, sp, #0
 800f9a4:	6078      	str	r0, [r7, #4]
 800f9a6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f9ac:	683b      	ldr	r3, [r7, #0]
 800f9ae:	781b      	ldrb	r3, [r3, #0]
 800f9b0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f9b2:	683b      	ldr	r3, [r7, #0]
 800f9b4:	785b      	ldrb	r3, [r3, #1]
 800f9b6:	2b01      	cmp	r3, #1
 800f9b8:	d128      	bne.n	800fa0c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f9ba:	68bb      	ldr	r3, [r7, #8]
 800f9bc:	015a      	lsls	r2, r3, #5
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	4413      	add	r3, r2
 800f9c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	68ba      	ldr	r2, [r7, #8]
 800f9ca:	0151      	lsls	r1, r2, #5
 800f9cc:	68fa      	ldr	r2, [r7, #12]
 800f9ce:	440a      	add	r2, r1
 800f9d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f9d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f9d8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f9da:	683b      	ldr	r3, [r7, #0]
 800f9dc:	78db      	ldrb	r3, [r3, #3]
 800f9de:	2b03      	cmp	r3, #3
 800f9e0:	d003      	beq.n	800f9ea <USB_EPClearStall+0x4c>
 800f9e2:	683b      	ldr	r3, [r7, #0]
 800f9e4:	78db      	ldrb	r3, [r3, #3]
 800f9e6:	2b02      	cmp	r3, #2
 800f9e8:	d138      	bne.n	800fa5c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f9ea:	68bb      	ldr	r3, [r7, #8]
 800f9ec:	015a      	lsls	r2, r3, #5
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	4413      	add	r3, r2
 800f9f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	68ba      	ldr	r2, [r7, #8]
 800f9fa:	0151      	lsls	r1, r2, #5
 800f9fc:	68fa      	ldr	r2, [r7, #12]
 800f9fe:	440a      	add	r2, r1
 800fa00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fa04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fa08:	6013      	str	r3, [r2, #0]
 800fa0a:	e027      	b.n	800fa5c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800fa0c:	68bb      	ldr	r3, [r7, #8]
 800fa0e:	015a      	lsls	r2, r3, #5
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	4413      	add	r3, r2
 800fa14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	68ba      	ldr	r2, [r7, #8]
 800fa1c:	0151      	lsls	r1, r2, #5
 800fa1e:	68fa      	ldr	r2, [r7, #12]
 800fa20:	440a      	add	r2, r1
 800fa22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fa26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fa2a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800fa2c:	683b      	ldr	r3, [r7, #0]
 800fa2e:	78db      	ldrb	r3, [r3, #3]
 800fa30:	2b03      	cmp	r3, #3
 800fa32:	d003      	beq.n	800fa3c <USB_EPClearStall+0x9e>
 800fa34:	683b      	ldr	r3, [r7, #0]
 800fa36:	78db      	ldrb	r3, [r3, #3]
 800fa38:	2b02      	cmp	r3, #2
 800fa3a:	d10f      	bne.n	800fa5c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800fa3c:	68bb      	ldr	r3, [r7, #8]
 800fa3e:	015a      	lsls	r2, r3, #5
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	4413      	add	r3, r2
 800fa44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	68ba      	ldr	r2, [r7, #8]
 800fa4c:	0151      	lsls	r1, r2, #5
 800fa4e:	68fa      	ldr	r2, [r7, #12]
 800fa50:	440a      	add	r2, r1
 800fa52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fa56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fa5a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800fa5c:	2300      	movs	r3, #0
}
 800fa5e:	4618      	mov	r0, r3
 800fa60:	3714      	adds	r7, #20
 800fa62:	46bd      	mov	sp, r7
 800fa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa68:	4770      	bx	lr

0800fa6a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800fa6a:	b480      	push	{r7}
 800fa6c:	b085      	sub	sp, #20
 800fa6e:	af00      	add	r7, sp, #0
 800fa70:	6078      	str	r0, [r7, #4]
 800fa72:	460b      	mov	r3, r1
 800fa74:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	68fa      	ldr	r2, [r7, #12]
 800fa84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fa88:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800fa8c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa94:	681a      	ldr	r2, [r3, #0]
 800fa96:	78fb      	ldrb	r3, [r7, #3]
 800fa98:	011b      	lsls	r3, r3, #4
 800fa9a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800fa9e:	68f9      	ldr	r1, [r7, #12]
 800faa0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800faa4:	4313      	orrs	r3, r2
 800faa6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800faa8:	2300      	movs	r3, #0
}
 800faaa:	4618      	mov	r0, r3
 800faac:	3714      	adds	r7, #20
 800faae:	46bd      	mov	sp, r7
 800fab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab4:	4770      	bx	lr

0800fab6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800fab6:	b480      	push	{r7}
 800fab8:	b085      	sub	sp, #20
 800faba:	af00      	add	r7, sp, #0
 800fabc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	68fa      	ldr	r2, [r7, #12]
 800facc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fad0:	f023 0303 	bic.w	r3, r3, #3
 800fad4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fadc:	685b      	ldr	r3, [r3, #4]
 800fade:	68fa      	ldr	r2, [r7, #12]
 800fae0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fae4:	f023 0302 	bic.w	r3, r3, #2
 800fae8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800faea:	2300      	movs	r3, #0
}
 800faec:	4618      	mov	r0, r3
 800faee:	3714      	adds	r7, #20
 800faf0:	46bd      	mov	sp, r7
 800faf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf6:	4770      	bx	lr

0800faf8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800faf8:	b480      	push	{r7}
 800fafa:	b085      	sub	sp, #20
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	68fa      	ldr	r2, [r7, #12]
 800fb0e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fb12:	f023 0303 	bic.w	r3, r3, #3
 800fb16:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb1e:	685b      	ldr	r3, [r3, #4]
 800fb20:	68fa      	ldr	r2, [r7, #12]
 800fb22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fb26:	f043 0302 	orr.w	r3, r3, #2
 800fb2a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fb2c:	2300      	movs	r3, #0
}
 800fb2e:	4618      	mov	r0, r3
 800fb30:	3714      	adds	r7, #20
 800fb32:	46bd      	mov	sp, r7
 800fb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb38:	4770      	bx	lr

0800fb3a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800fb3a:	b480      	push	{r7}
 800fb3c:	b085      	sub	sp, #20
 800fb3e:	af00      	add	r7, sp, #0
 800fb40:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	695b      	ldr	r3, [r3, #20]
 800fb46:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	699b      	ldr	r3, [r3, #24]
 800fb4c:	68fa      	ldr	r2, [r7, #12]
 800fb4e:	4013      	ands	r3, r2
 800fb50:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800fb52:	68fb      	ldr	r3, [r7, #12]
}
 800fb54:	4618      	mov	r0, r3
 800fb56:	3714      	adds	r7, #20
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb5e:	4770      	bx	lr

0800fb60 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800fb60:	b480      	push	{r7}
 800fb62:	b085      	sub	sp, #20
 800fb64:	af00      	add	r7, sp, #0
 800fb66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb72:	699b      	ldr	r3, [r3, #24]
 800fb74:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb7c:	69db      	ldr	r3, [r3, #28]
 800fb7e:	68ba      	ldr	r2, [r7, #8]
 800fb80:	4013      	ands	r3, r2
 800fb82:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800fb84:	68bb      	ldr	r3, [r7, #8]
 800fb86:	0c1b      	lsrs	r3, r3, #16
}
 800fb88:	4618      	mov	r0, r3
 800fb8a:	3714      	adds	r7, #20
 800fb8c:	46bd      	mov	sp, r7
 800fb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb92:	4770      	bx	lr

0800fb94 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800fb94:	b480      	push	{r7}
 800fb96:	b085      	sub	sp, #20
 800fb98:	af00      	add	r7, sp, #0
 800fb9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fba6:	699b      	ldr	r3, [r3, #24]
 800fba8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fbb0:	69db      	ldr	r3, [r3, #28]
 800fbb2:	68ba      	ldr	r2, [r7, #8]
 800fbb4:	4013      	ands	r3, r2
 800fbb6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800fbb8:	68bb      	ldr	r3, [r7, #8]
 800fbba:	b29b      	uxth	r3, r3
}
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	3714      	adds	r7, #20
 800fbc0:	46bd      	mov	sp, r7
 800fbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc6:	4770      	bx	lr

0800fbc8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800fbc8:	b480      	push	{r7}
 800fbca:	b085      	sub	sp, #20
 800fbcc:	af00      	add	r7, sp, #0
 800fbce:	6078      	str	r0, [r7, #4]
 800fbd0:	460b      	mov	r3, r1
 800fbd2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800fbd8:	78fb      	ldrb	r3, [r7, #3]
 800fbda:	015a      	lsls	r2, r3, #5
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	4413      	add	r3, r2
 800fbe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fbe4:	689b      	ldr	r3, [r3, #8]
 800fbe6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fbee:	695b      	ldr	r3, [r3, #20]
 800fbf0:	68ba      	ldr	r2, [r7, #8]
 800fbf2:	4013      	ands	r3, r2
 800fbf4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800fbf6:	68bb      	ldr	r3, [r7, #8]
}
 800fbf8:	4618      	mov	r0, r3
 800fbfa:	3714      	adds	r7, #20
 800fbfc:	46bd      	mov	sp, r7
 800fbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc02:	4770      	bx	lr

0800fc04 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800fc04:	b480      	push	{r7}
 800fc06:	b087      	sub	sp, #28
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	6078      	str	r0, [r7, #4]
 800fc0c:	460b      	mov	r3, r1
 800fc0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800fc14:	697b      	ldr	r3, [r7, #20]
 800fc16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc1a:	691b      	ldr	r3, [r3, #16]
 800fc1c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800fc1e:	697b      	ldr	r3, [r7, #20]
 800fc20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc26:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800fc28:	78fb      	ldrb	r3, [r7, #3]
 800fc2a:	f003 030f 	and.w	r3, r3, #15
 800fc2e:	68fa      	ldr	r2, [r7, #12]
 800fc30:	fa22 f303 	lsr.w	r3, r2, r3
 800fc34:	01db      	lsls	r3, r3, #7
 800fc36:	b2db      	uxtb	r3, r3
 800fc38:	693a      	ldr	r2, [r7, #16]
 800fc3a:	4313      	orrs	r3, r2
 800fc3c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800fc3e:	78fb      	ldrb	r3, [r7, #3]
 800fc40:	015a      	lsls	r2, r3, #5
 800fc42:	697b      	ldr	r3, [r7, #20]
 800fc44:	4413      	add	r3, r2
 800fc46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc4a:	689b      	ldr	r3, [r3, #8]
 800fc4c:	693a      	ldr	r2, [r7, #16]
 800fc4e:	4013      	ands	r3, r2
 800fc50:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800fc52:	68bb      	ldr	r3, [r7, #8]
}
 800fc54:	4618      	mov	r0, r3
 800fc56:	371c      	adds	r7, #28
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5e:	4770      	bx	lr

0800fc60 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800fc60:	b480      	push	{r7}
 800fc62:	b083      	sub	sp, #12
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	695b      	ldr	r3, [r3, #20]
 800fc6c:	f003 0301 	and.w	r3, r3, #1
}
 800fc70:	4618      	mov	r0, r3
 800fc72:	370c      	adds	r7, #12
 800fc74:	46bd      	mov	sp, r7
 800fc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc7a:	4770      	bx	lr

0800fc7c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800fc7c:	b480      	push	{r7}
 800fc7e:	b085      	sub	sp, #20
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	68fa      	ldr	r2, [r7, #12]
 800fc92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fc96:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800fc9a:	f023 0307 	bic.w	r3, r3, #7
 800fc9e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fca6:	685b      	ldr	r3, [r3, #4]
 800fca8:	68fa      	ldr	r2, [r7, #12]
 800fcaa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fcae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fcb2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fcb4:	2300      	movs	r3, #0
}
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	3714      	adds	r7, #20
 800fcba:	46bd      	mov	sp, r7
 800fcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc0:	4770      	bx	lr
	...

0800fcc4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800fcc4:	b480      	push	{r7}
 800fcc6:	b087      	sub	sp, #28
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	60f8      	str	r0, [r7, #12]
 800fccc:	460b      	mov	r3, r1
 800fcce:	607a      	str	r2, [r7, #4]
 800fcd0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	333c      	adds	r3, #60	; 0x3c
 800fcda:	3304      	adds	r3, #4
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800fce0:	693b      	ldr	r3, [r7, #16]
 800fce2:	4a26      	ldr	r2, [pc, #152]	; (800fd7c <USB_EP0_OutStart+0xb8>)
 800fce4:	4293      	cmp	r3, r2
 800fce6:	d90a      	bls.n	800fcfe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fce8:	697b      	ldr	r3, [r7, #20]
 800fcea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fcf4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fcf8:	d101      	bne.n	800fcfe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800fcfa:	2300      	movs	r3, #0
 800fcfc:	e037      	b.n	800fd6e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800fcfe:	697b      	ldr	r3, [r7, #20]
 800fd00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd04:	461a      	mov	r2, r3
 800fd06:	2300      	movs	r3, #0
 800fd08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fd0a:	697b      	ldr	r3, [r7, #20]
 800fd0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd10:	691b      	ldr	r3, [r3, #16]
 800fd12:	697a      	ldr	r2, [r7, #20]
 800fd14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fd18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fd1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800fd1e:	697b      	ldr	r3, [r7, #20]
 800fd20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd24:	691b      	ldr	r3, [r3, #16]
 800fd26:	697a      	ldr	r2, [r7, #20]
 800fd28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fd2c:	f043 0318 	orr.w	r3, r3, #24
 800fd30:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800fd32:	697b      	ldr	r3, [r7, #20]
 800fd34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd38:	691b      	ldr	r3, [r3, #16]
 800fd3a:	697a      	ldr	r2, [r7, #20]
 800fd3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fd40:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800fd44:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800fd46:	7afb      	ldrb	r3, [r7, #11]
 800fd48:	2b01      	cmp	r3, #1
 800fd4a:	d10f      	bne.n	800fd6c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800fd4c:	697b      	ldr	r3, [r7, #20]
 800fd4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd52:	461a      	mov	r2, r3
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800fd58:	697b      	ldr	r3, [r7, #20]
 800fd5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	697a      	ldr	r2, [r7, #20]
 800fd62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fd66:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800fd6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fd6c:	2300      	movs	r3, #0
}
 800fd6e:	4618      	mov	r0, r3
 800fd70:	371c      	adds	r7, #28
 800fd72:	46bd      	mov	sp, r7
 800fd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd78:	4770      	bx	lr
 800fd7a:	bf00      	nop
 800fd7c:	4f54300a 	.word	0x4f54300a

0800fd80 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800fd80:	b480      	push	{r7}
 800fd82:	b085      	sub	sp, #20
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800fd88:	2300      	movs	r3, #0
 800fd8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	3301      	adds	r3, #1
 800fd90:	60fb      	str	r3, [r7, #12]
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	4a13      	ldr	r2, [pc, #76]	; (800fde4 <USB_CoreReset+0x64>)
 800fd96:	4293      	cmp	r3, r2
 800fd98:	d901      	bls.n	800fd9e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800fd9a:	2303      	movs	r3, #3
 800fd9c:	e01b      	b.n	800fdd6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	691b      	ldr	r3, [r3, #16]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	daf2      	bge.n	800fd8c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800fda6:	2300      	movs	r3, #0
 800fda8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	691b      	ldr	r3, [r3, #16]
 800fdae:	f043 0201 	orr.w	r2, r3, #1
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	3301      	adds	r3, #1
 800fdba:	60fb      	str	r3, [r7, #12]
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	4a09      	ldr	r2, [pc, #36]	; (800fde4 <USB_CoreReset+0x64>)
 800fdc0:	4293      	cmp	r3, r2
 800fdc2:	d901      	bls.n	800fdc8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800fdc4:	2303      	movs	r3, #3
 800fdc6:	e006      	b.n	800fdd6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	691b      	ldr	r3, [r3, #16]
 800fdcc:	f003 0301 	and.w	r3, r3, #1
 800fdd0:	2b01      	cmp	r3, #1
 800fdd2:	d0f0      	beq.n	800fdb6 <USB_CoreReset+0x36>

  return HAL_OK;
 800fdd4:	2300      	movs	r3, #0
}
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	3714      	adds	r7, #20
 800fdda:	46bd      	mov	sp, r7
 800fddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde0:	4770      	bx	lr
 800fde2:	bf00      	nop
 800fde4:	00030d40 	.word	0x00030d40

0800fde8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fde8:	b580      	push	{r7, lr}
 800fdea:	b084      	sub	sp, #16
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	6078      	str	r0, [r7, #4]
 800fdf0:	460b      	mov	r3, r1
 800fdf2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800fdf4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800fdf8:	f004 ffd0 	bl	8014d9c <malloc>
 800fdfc:	4603      	mov	r3, r0
 800fdfe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d105      	bne.n	800fe12 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	2200      	movs	r2, #0
 800fe0a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800fe0e:	2302      	movs	r3, #2
 800fe10:	e066      	b.n	800fee0 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	68fa      	ldr	r2, [r7, #12]
 800fe16:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	7c1b      	ldrb	r3, [r3, #16]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d119      	bne.n	800fe56 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800fe22:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fe26:	2202      	movs	r2, #2
 800fe28:	2181      	movs	r1, #129	; 0x81
 800fe2a:	6878      	ldr	r0, [r7, #4]
 800fe2c:	f004 fe3d 	bl	8014aaa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	2201      	movs	r2, #1
 800fe34:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800fe36:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fe3a:	2202      	movs	r2, #2
 800fe3c:	2101      	movs	r1, #1
 800fe3e:	6878      	ldr	r0, [r7, #4]
 800fe40:	f004 fe33 	bl	8014aaa <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	2201      	movs	r2, #1
 800fe48:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	2210      	movs	r2, #16
 800fe50:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800fe54:	e016      	b.n	800fe84 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800fe56:	2340      	movs	r3, #64	; 0x40
 800fe58:	2202      	movs	r2, #2
 800fe5a:	2181      	movs	r1, #129	; 0x81
 800fe5c:	6878      	ldr	r0, [r7, #4]
 800fe5e:	f004 fe24 	bl	8014aaa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	2201      	movs	r2, #1
 800fe66:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800fe68:	2340      	movs	r3, #64	; 0x40
 800fe6a:	2202      	movs	r2, #2
 800fe6c:	2101      	movs	r1, #1
 800fe6e:	6878      	ldr	r0, [r7, #4]
 800fe70:	f004 fe1b 	bl	8014aaa <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	2201      	movs	r2, #1
 800fe78:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	2210      	movs	r2, #16
 800fe80:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800fe84:	2308      	movs	r3, #8
 800fe86:	2203      	movs	r2, #3
 800fe88:	2182      	movs	r1, #130	; 0x82
 800fe8a:	6878      	ldr	r0, [r7, #4]
 800fe8c:	f004 fe0d 	bl	8014aaa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	2201      	movs	r2, #1
 800fe94:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	2200      	movs	r2, #0
 800fea6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	2200      	movs	r2, #0
 800feae:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	7c1b      	ldrb	r3, [r3, #16]
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d109      	bne.n	800fece <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800fec0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fec4:	2101      	movs	r1, #1
 800fec6:	6878      	ldr	r0, [r7, #4]
 800fec8:	f004 fede 	bl	8014c88 <USBD_LL_PrepareReceive>
 800fecc:	e007      	b.n	800fede <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800fed4:	2340      	movs	r3, #64	; 0x40
 800fed6:	2101      	movs	r1, #1
 800fed8:	6878      	ldr	r0, [r7, #4]
 800feda:	f004 fed5 	bl	8014c88 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800fede:	2300      	movs	r3, #0
}
 800fee0:	4618      	mov	r0, r3
 800fee2:	3710      	adds	r7, #16
 800fee4:	46bd      	mov	sp, r7
 800fee6:	bd80      	pop	{r7, pc}

0800fee8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fee8:	b580      	push	{r7, lr}
 800feea:	b084      	sub	sp, #16
 800feec:	af00      	add	r7, sp, #0
 800feee:	6078      	str	r0, [r7, #4]
 800fef0:	460b      	mov	r3, r1
 800fef2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800fef4:	2300      	movs	r3, #0
 800fef6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800fef8:	2181      	movs	r1, #129	; 0x81
 800fefa:	6878      	ldr	r0, [r7, #4]
 800fefc:	f004 fdfb 	bl	8014af6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	2200      	movs	r2, #0
 800ff04:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ff06:	2101      	movs	r1, #1
 800ff08:	6878      	ldr	r0, [r7, #4]
 800ff0a:	f004 fdf4 	bl	8014af6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	2200      	movs	r2, #0
 800ff12:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ff16:	2182      	movs	r1, #130	; 0x82
 800ff18:	6878      	ldr	r0, [r7, #4]
 800ff1a:	f004 fdec 	bl	8014af6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	2200      	movs	r2, #0
 800ff22:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	2200      	movs	r2, #0
 800ff2a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d00e      	beq.n	800ff56 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ff3e:	685b      	ldr	r3, [r3, #4]
 800ff40:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ff48:	4618      	mov	r0, r3
 800ff4a:	f004 ff2f 	bl	8014dac <free>
    pdev->pClassData = NULL;
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	2200      	movs	r2, #0
 800ff52:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800ff56:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff58:	4618      	mov	r0, r3
 800ff5a:	3710      	adds	r7, #16
 800ff5c:	46bd      	mov	sp, r7
 800ff5e:	bd80      	pop	{r7, pc}

0800ff60 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ff60:	b580      	push	{r7, lr}
 800ff62:	b086      	sub	sp, #24
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	6078      	str	r0, [r7, #4]
 800ff68:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ff70:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800ff72:	2300      	movs	r3, #0
 800ff74:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800ff76:	2300      	movs	r3, #0
 800ff78:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ff7e:	683b      	ldr	r3, [r7, #0]
 800ff80:	781b      	ldrb	r3, [r3, #0]
 800ff82:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d03a      	beq.n	8010000 <USBD_CDC_Setup+0xa0>
 800ff8a:	2b20      	cmp	r3, #32
 800ff8c:	f040 8097 	bne.w	80100be <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800ff90:	683b      	ldr	r3, [r7, #0]
 800ff92:	88db      	ldrh	r3, [r3, #6]
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d029      	beq.n	800ffec <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800ff98:	683b      	ldr	r3, [r7, #0]
 800ff9a:	781b      	ldrb	r3, [r3, #0]
 800ff9c:	b25b      	sxtb	r3, r3
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	da11      	bge.n	800ffc6 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ffa8:	689b      	ldr	r3, [r3, #8]
 800ffaa:	683a      	ldr	r2, [r7, #0]
 800ffac:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800ffae:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ffb0:	683a      	ldr	r2, [r7, #0]
 800ffb2:	88d2      	ldrh	r2, [r2, #6]
 800ffb4:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800ffb6:	6939      	ldr	r1, [r7, #16]
 800ffb8:	683b      	ldr	r3, [r7, #0]
 800ffba:	88db      	ldrh	r3, [r3, #6]
 800ffbc:	461a      	mov	r2, r3
 800ffbe:	6878      	ldr	r0, [r7, #4]
 800ffc0:	f001 fa9d 	bl	80114fe <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800ffc4:	e082      	b.n	80100cc <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800ffc6:	683b      	ldr	r3, [r7, #0]
 800ffc8:	785a      	ldrb	r2, [r3, #1]
 800ffca:	693b      	ldr	r3, [r7, #16]
 800ffcc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800ffd0:	683b      	ldr	r3, [r7, #0]
 800ffd2:	88db      	ldrh	r3, [r3, #6]
 800ffd4:	b2da      	uxtb	r2, r3
 800ffd6:	693b      	ldr	r3, [r7, #16]
 800ffd8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800ffdc:	6939      	ldr	r1, [r7, #16]
 800ffde:	683b      	ldr	r3, [r7, #0]
 800ffe0:	88db      	ldrh	r3, [r3, #6]
 800ffe2:	461a      	mov	r2, r3
 800ffe4:	6878      	ldr	r0, [r7, #4]
 800ffe6:	f001 fab6 	bl	8011556 <USBD_CtlPrepareRx>
    break;
 800ffea:	e06f      	b.n	80100cc <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fff2:	689b      	ldr	r3, [r3, #8]
 800fff4:	683a      	ldr	r2, [r7, #0]
 800fff6:	7850      	ldrb	r0, [r2, #1]
 800fff8:	2200      	movs	r2, #0
 800fffa:	6839      	ldr	r1, [r7, #0]
 800fffc:	4798      	blx	r3
    break;
 800fffe:	e065      	b.n	80100cc <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8010000:	683b      	ldr	r3, [r7, #0]
 8010002:	785b      	ldrb	r3, [r3, #1]
 8010004:	2b0b      	cmp	r3, #11
 8010006:	d84f      	bhi.n	80100a8 <USBD_CDC_Setup+0x148>
 8010008:	a201      	add	r2, pc, #4	; (adr r2, 8010010 <USBD_CDC_Setup+0xb0>)
 801000a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801000e:	bf00      	nop
 8010010:	08010041 	.word	0x08010041
 8010014:	080100b7 	.word	0x080100b7
 8010018:	080100a9 	.word	0x080100a9
 801001c:	080100a9 	.word	0x080100a9
 8010020:	080100a9 	.word	0x080100a9
 8010024:	080100a9 	.word	0x080100a9
 8010028:	080100a9 	.word	0x080100a9
 801002c:	080100a9 	.word	0x080100a9
 8010030:	080100a9 	.word	0x080100a9
 8010034:	080100a9 	.word	0x080100a9
 8010038:	08010069 	.word	0x08010069
 801003c:	08010091 	.word	0x08010091
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010046:	2b03      	cmp	r3, #3
 8010048:	d107      	bne.n	801005a <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801004a:	f107 030c 	add.w	r3, r7, #12
 801004e:	2202      	movs	r2, #2
 8010050:	4619      	mov	r1, r3
 8010052:	6878      	ldr	r0, [r7, #4]
 8010054:	f001 fa53 	bl	80114fe <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8010058:	e030      	b.n	80100bc <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 801005a:	6839      	ldr	r1, [r7, #0]
 801005c:	6878      	ldr	r0, [r7, #4]
 801005e:	f001 f9dd 	bl	801141c <USBD_CtlError>
        ret = USBD_FAIL;
 8010062:	2303      	movs	r3, #3
 8010064:	75fb      	strb	r3, [r7, #23]
      break;
 8010066:	e029      	b.n	80100bc <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801006e:	2b03      	cmp	r3, #3
 8010070:	d107      	bne.n	8010082 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8010072:	f107 030f 	add.w	r3, r7, #15
 8010076:	2201      	movs	r2, #1
 8010078:	4619      	mov	r1, r3
 801007a:	6878      	ldr	r0, [r7, #4]
 801007c:	f001 fa3f 	bl	80114fe <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8010080:	e01c      	b.n	80100bc <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8010082:	6839      	ldr	r1, [r7, #0]
 8010084:	6878      	ldr	r0, [r7, #4]
 8010086:	f001 f9c9 	bl	801141c <USBD_CtlError>
        ret = USBD_FAIL;
 801008a:	2303      	movs	r3, #3
 801008c:	75fb      	strb	r3, [r7, #23]
      break;
 801008e:	e015      	b.n	80100bc <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010096:	2b03      	cmp	r3, #3
 8010098:	d00f      	beq.n	80100ba <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 801009a:	6839      	ldr	r1, [r7, #0]
 801009c:	6878      	ldr	r0, [r7, #4]
 801009e:	f001 f9bd 	bl	801141c <USBD_CtlError>
        ret = USBD_FAIL;
 80100a2:	2303      	movs	r3, #3
 80100a4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80100a6:	e008      	b.n	80100ba <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80100a8:	6839      	ldr	r1, [r7, #0]
 80100aa:	6878      	ldr	r0, [r7, #4]
 80100ac:	f001 f9b6 	bl	801141c <USBD_CtlError>
      ret = USBD_FAIL;
 80100b0:	2303      	movs	r3, #3
 80100b2:	75fb      	strb	r3, [r7, #23]
      break;
 80100b4:	e002      	b.n	80100bc <USBD_CDC_Setup+0x15c>
      break;
 80100b6:	bf00      	nop
 80100b8:	e008      	b.n	80100cc <USBD_CDC_Setup+0x16c>
      break;
 80100ba:	bf00      	nop
    }
    break;
 80100bc:	e006      	b.n	80100cc <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 80100be:	6839      	ldr	r1, [r7, #0]
 80100c0:	6878      	ldr	r0, [r7, #4]
 80100c2:	f001 f9ab 	bl	801141c <USBD_CtlError>
    ret = USBD_FAIL;
 80100c6:	2303      	movs	r3, #3
 80100c8:	75fb      	strb	r3, [r7, #23]
    break;
 80100ca:	bf00      	nop
  }

  return (uint8_t)ret;
 80100cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80100ce:	4618      	mov	r0, r3
 80100d0:	3718      	adds	r7, #24
 80100d2:	46bd      	mov	sp, r7
 80100d4:	bd80      	pop	{r7, pc}
 80100d6:	bf00      	nop

080100d8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80100d8:	b580      	push	{r7, lr}
 80100da:	b084      	sub	sp, #16
 80100dc:	af00      	add	r7, sp, #0
 80100de:	6078      	str	r0, [r7, #4]
 80100e0:	460b      	mov	r3, r1
 80100e2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80100ea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d101      	bne.n	80100fa <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80100f6:	2303      	movs	r3, #3
 80100f8:	e049      	b.n	801018e <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010100:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8010102:	78fa      	ldrb	r2, [r7, #3]
 8010104:	6879      	ldr	r1, [r7, #4]
 8010106:	4613      	mov	r3, r2
 8010108:	009b      	lsls	r3, r3, #2
 801010a:	4413      	add	r3, r2
 801010c:	009b      	lsls	r3, r3, #2
 801010e:	440b      	add	r3, r1
 8010110:	3318      	adds	r3, #24
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	2b00      	cmp	r3, #0
 8010116:	d029      	beq.n	801016c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8010118:	78fa      	ldrb	r2, [r7, #3]
 801011a:	6879      	ldr	r1, [r7, #4]
 801011c:	4613      	mov	r3, r2
 801011e:	009b      	lsls	r3, r3, #2
 8010120:	4413      	add	r3, r2
 8010122:	009b      	lsls	r3, r3, #2
 8010124:	440b      	add	r3, r1
 8010126:	3318      	adds	r3, #24
 8010128:	681a      	ldr	r2, [r3, #0]
 801012a:	78f9      	ldrb	r1, [r7, #3]
 801012c:	68f8      	ldr	r0, [r7, #12]
 801012e:	460b      	mov	r3, r1
 8010130:	00db      	lsls	r3, r3, #3
 8010132:	1a5b      	subs	r3, r3, r1
 8010134:	009b      	lsls	r3, r3, #2
 8010136:	4403      	add	r3, r0
 8010138:	3344      	adds	r3, #68	; 0x44
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	fbb2 f1f3 	udiv	r1, r2, r3
 8010140:	fb03 f301 	mul.w	r3, r3, r1
 8010144:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8010146:	2b00      	cmp	r3, #0
 8010148:	d110      	bne.n	801016c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 801014a:	78fa      	ldrb	r2, [r7, #3]
 801014c:	6879      	ldr	r1, [r7, #4]
 801014e:	4613      	mov	r3, r2
 8010150:	009b      	lsls	r3, r3, #2
 8010152:	4413      	add	r3, r2
 8010154:	009b      	lsls	r3, r3, #2
 8010156:	440b      	add	r3, r1
 8010158:	3318      	adds	r3, #24
 801015a:	2200      	movs	r2, #0
 801015c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801015e:	78f9      	ldrb	r1, [r7, #3]
 8010160:	2300      	movs	r3, #0
 8010162:	2200      	movs	r2, #0
 8010164:	6878      	ldr	r0, [r7, #4]
 8010166:	f004 fd6e 	bl	8014c46 <USBD_LL_Transmit>
 801016a:	e00f      	b.n	801018c <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 801016c:	68bb      	ldr	r3, [r7, #8]
 801016e:	2200      	movs	r2, #0
 8010170:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801017a:	691b      	ldr	r3, [r3, #16]
 801017c:	68ba      	ldr	r2, [r7, #8]
 801017e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8010182:	68ba      	ldr	r2, [r7, #8]
 8010184:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8010188:	78fa      	ldrb	r2, [r7, #3]
 801018a:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 801018c:	2300      	movs	r3, #0
}
 801018e:	4618      	mov	r0, r3
 8010190:	3710      	adds	r7, #16
 8010192:	46bd      	mov	sp, r7
 8010194:	bd80      	pop	{r7, pc}

08010196 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010196:	b580      	push	{r7, lr}
 8010198:	b084      	sub	sp, #16
 801019a:	af00      	add	r7, sp, #0
 801019c:	6078      	str	r0, [r7, #4]
 801019e:	460b      	mov	r3, r1
 80101a0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80101a8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d101      	bne.n	80101b8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80101b4:	2303      	movs	r3, #3
 80101b6:	e015      	b.n	80101e4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80101b8:	78fb      	ldrb	r3, [r7, #3]
 80101ba:	4619      	mov	r1, r3
 80101bc:	6878      	ldr	r0, [r7, #4]
 80101be:	f004 fd84 	bl	8014cca <USBD_LL_GetRxDataSize>
 80101c2:	4602      	mov	r2, r0
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80101d0:	68db      	ldr	r3, [r3, #12]
 80101d2:	68fa      	ldr	r2, [r7, #12]
 80101d4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80101d8:	68fa      	ldr	r2, [r7, #12]
 80101da:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80101de:	4611      	mov	r1, r2
 80101e0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80101e2:	2300      	movs	r3, #0
}
 80101e4:	4618      	mov	r0, r3
 80101e6:	3710      	adds	r7, #16
 80101e8:	46bd      	mov	sp, r7
 80101ea:	bd80      	pop	{r7, pc}

080101ec <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80101ec:	b580      	push	{r7, lr}
 80101ee:	b084      	sub	sp, #16
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80101fa:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010202:	2b00      	cmp	r3, #0
 8010204:	d015      	beq.n	8010232 <USBD_CDC_EP0_RxReady+0x46>
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801020c:	2bff      	cmp	r3, #255	; 0xff
 801020e:	d010      	beq.n	8010232 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010216:	689b      	ldr	r3, [r3, #8]
 8010218:	68fa      	ldr	r2, [r7, #12]
 801021a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 801021e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8010220:	68fa      	ldr	r2, [r7, #12]
 8010222:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8010226:	b292      	uxth	r2, r2
 8010228:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	22ff      	movs	r2, #255	; 0xff
 801022e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8010232:	2300      	movs	r3, #0
}
 8010234:	4618      	mov	r0, r3
 8010236:	3710      	adds	r7, #16
 8010238:	46bd      	mov	sp, r7
 801023a:	bd80      	pop	{r7, pc}

0801023c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801023c:	b480      	push	{r7}
 801023e:	b083      	sub	sp, #12
 8010240:	af00      	add	r7, sp, #0
 8010242:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	2243      	movs	r2, #67	; 0x43
 8010248:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 801024a:	4b03      	ldr	r3, [pc, #12]	; (8010258 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 801024c:	4618      	mov	r0, r3
 801024e:	370c      	adds	r7, #12
 8010250:	46bd      	mov	sp, r7
 8010252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010256:	4770      	bx	lr
 8010258:	2000211c 	.word	0x2000211c

0801025c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801025c:	b480      	push	{r7}
 801025e:	b083      	sub	sp, #12
 8010260:	af00      	add	r7, sp, #0
 8010262:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	2243      	movs	r2, #67	; 0x43
 8010268:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 801026a:	4b03      	ldr	r3, [pc, #12]	; (8010278 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 801026c:	4618      	mov	r0, r3
 801026e:	370c      	adds	r7, #12
 8010270:	46bd      	mov	sp, r7
 8010272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010276:	4770      	bx	lr
 8010278:	200020d8 	.word	0x200020d8

0801027c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801027c:	b480      	push	{r7}
 801027e:	b083      	sub	sp, #12
 8010280:	af00      	add	r7, sp, #0
 8010282:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	2243      	movs	r2, #67	; 0x43
 8010288:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 801028a:	4b03      	ldr	r3, [pc, #12]	; (8010298 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 801028c:	4618      	mov	r0, r3
 801028e:	370c      	adds	r7, #12
 8010290:	46bd      	mov	sp, r7
 8010292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010296:	4770      	bx	lr
 8010298:	20002160 	.word	0x20002160

0801029c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801029c:	b480      	push	{r7}
 801029e:	b083      	sub	sp, #12
 80102a0:	af00      	add	r7, sp, #0
 80102a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	220a      	movs	r2, #10
 80102a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80102aa:	4b03      	ldr	r3, [pc, #12]	; (80102b8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80102ac:	4618      	mov	r0, r3
 80102ae:	370c      	adds	r7, #12
 80102b0:	46bd      	mov	sp, r7
 80102b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b6:	4770      	bx	lr
 80102b8:	20002094 	.word	0x20002094

080102bc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80102bc:	b480      	push	{r7}
 80102be:	b083      	sub	sp, #12
 80102c0:	af00      	add	r7, sp, #0
 80102c2:	6078      	str	r0, [r7, #4]
 80102c4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80102c6:	683b      	ldr	r3, [r7, #0]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d101      	bne.n	80102d0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80102cc:	2303      	movs	r3, #3
 80102ce:	e004      	b.n	80102da <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	683a      	ldr	r2, [r7, #0]
 80102d4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80102d8:	2300      	movs	r3, #0
}
 80102da:	4618      	mov	r0, r3
 80102dc:	370c      	adds	r7, #12
 80102de:	46bd      	mov	sp, r7
 80102e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e4:	4770      	bx	lr

080102e6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80102e6:	b480      	push	{r7}
 80102e8:	b087      	sub	sp, #28
 80102ea:	af00      	add	r7, sp, #0
 80102ec:	60f8      	str	r0, [r7, #12]
 80102ee:	60b9      	str	r1, [r7, #8]
 80102f0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80102f8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80102fa:	697b      	ldr	r3, [r7, #20]
 80102fc:	68ba      	ldr	r2, [r7, #8]
 80102fe:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8010302:	697b      	ldr	r3, [r7, #20]
 8010304:	687a      	ldr	r2, [r7, #4]
 8010306:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 801030a:	2300      	movs	r3, #0
}
 801030c:	4618      	mov	r0, r3
 801030e:	371c      	adds	r7, #28
 8010310:	46bd      	mov	sp, r7
 8010312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010316:	4770      	bx	lr

08010318 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8010318:	b480      	push	{r7}
 801031a:	b085      	sub	sp, #20
 801031c:	af00      	add	r7, sp, #0
 801031e:	6078      	str	r0, [r7, #4]
 8010320:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010328:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	683a      	ldr	r2, [r7, #0]
 801032e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8010332:	2300      	movs	r3, #0
}
 8010334:	4618      	mov	r0, r3
 8010336:	3714      	adds	r7, #20
 8010338:	46bd      	mov	sp, r7
 801033a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801033e:	4770      	bx	lr

08010340 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8010340:	b580      	push	{r7, lr}
 8010342:	b084      	sub	sp, #16
 8010344:	af00      	add	r7, sp, #0
 8010346:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801034e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8010350:	2301      	movs	r3, #1
 8010352:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801035a:	2b00      	cmp	r3, #0
 801035c:	d101      	bne.n	8010362 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801035e:	2303      	movs	r3, #3
 8010360:	e01a      	b.n	8010398 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8010362:	68bb      	ldr	r3, [r7, #8]
 8010364:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010368:	2b00      	cmp	r3, #0
 801036a:	d114      	bne.n	8010396 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 801036c:	68bb      	ldr	r3, [r7, #8]
 801036e:	2201      	movs	r2, #1
 8010370:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8010374:	68bb      	ldr	r3, [r7, #8]
 8010376:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 801037e:	68bb      	ldr	r3, [r7, #8]
 8010380:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8010384:	68bb      	ldr	r3, [r7, #8]
 8010386:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801038a:	2181      	movs	r1, #129	; 0x81
 801038c:	6878      	ldr	r0, [r7, #4]
 801038e:	f004 fc5a 	bl	8014c46 <USBD_LL_Transmit>

    ret = USBD_OK;
 8010392:	2300      	movs	r3, #0
 8010394:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8010396:	7bfb      	ldrb	r3, [r7, #15]
}
 8010398:	4618      	mov	r0, r3
 801039a:	3710      	adds	r7, #16
 801039c:	46bd      	mov	sp, r7
 801039e:	bd80      	pop	{r7, pc}

080103a0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80103a0:	b580      	push	{r7, lr}
 80103a2:	b084      	sub	sp, #16
 80103a4:	af00      	add	r7, sp, #0
 80103a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80103ae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d101      	bne.n	80103be <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80103ba:	2303      	movs	r3, #3
 80103bc:	e016      	b.n	80103ec <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	7c1b      	ldrb	r3, [r3, #16]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d109      	bne.n	80103da <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80103cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80103d0:	2101      	movs	r1, #1
 80103d2:	6878      	ldr	r0, [r7, #4]
 80103d4:	f004 fc58 	bl	8014c88 <USBD_LL_PrepareReceive>
 80103d8:	e007      	b.n	80103ea <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80103e0:	2340      	movs	r3, #64	; 0x40
 80103e2:	2101      	movs	r1, #1
 80103e4:	6878      	ldr	r0, [r7, #4]
 80103e6:	f004 fc4f 	bl	8014c88 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80103ea:	2300      	movs	r3, #0
}
 80103ec:	4618      	mov	r0, r3
 80103ee:	3710      	adds	r7, #16
 80103f0:	46bd      	mov	sp, r7
 80103f2:	bd80      	pop	{r7, pc}

080103f4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80103f4:	b580      	push	{r7, lr}
 80103f6:	b086      	sub	sp, #24
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	60f8      	str	r0, [r7, #12]
 80103fc:	60b9      	str	r1, [r7, #8]
 80103fe:	4613      	mov	r3, r2
 8010400:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	2b00      	cmp	r3, #0
 8010406:	d101      	bne.n	801040c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8010408:	2303      	movs	r3, #3
 801040a:	e025      	b.n	8010458 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010412:	2b00      	cmp	r3, #0
 8010414:	d003      	beq.n	801041e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	2200      	movs	r2, #0
 801041a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8010424:	2b00      	cmp	r3, #0
 8010426:	d003      	beq.n	8010430 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	2200      	movs	r2, #0
 801042c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8010430:	68bb      	ldr	r3, [r7, #8]
 8010432:	2b00      	cmp	r3, #0
 8010434:	d003      	beq.n	801043e <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	68ba      	ldr	r2, [r7, #8]
 801043a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	2201      	movs	r2, #1
 8010442:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	79fa      	ldrb	r2, [r7, #7]
 801044a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801044c:	68f8      	ldr	r0, [r7, #12]
 801044e:	f004 fac5 	bl	80149dc <USBD_LL_Init>
 8010452:	4603      	mov	r3, r0
 8010454:	75fb      	strb	r3, [r7, #23]

  return ret;
 8010456:	7dfb      	ldrb	r3, [r7, #23]
}
 8010458:	4618      	mov	r0, r3
 801045a:	3718      	adds	r7, #24
 801045c:	46bd      	mov	sp, r7
 801045e:	bd80      	pop	{r7, pc}

08010460 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8010460:	b580      	push	{r7, lr}
 8010462:	b084      	sub	sp, #16
 8010464:	af00      	add	r7, sp, #0
 8010466:	6078      	str	r0, [r7, #4]
 8010468:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801046a:	2300      	movs	r3, #0
 801046c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801046e:	683b      	ldr	r3, [r7, #0]
 8010470:	2b00      	cmp	r3, #0
 8010472:	d101      	bne.n	8010478 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8010474:	2303      	movs	r3, #3
 8010476:	e010      	b.n	801049a <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	683a      	ldr	r2, [r7, #0]
 801047c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010488:	f107 020e 	add.w	r2, r7, #14
 801048c:	4610      	mov	r0, r2
 801048e:	4798      	blx	r3
 8010490:	4602      	mov	r2, r0
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8010498:	2300      	movs	r3, #0
}
 801049a:	4618      	mov	r0, r3
 801049c:	3710      	adds	r7, #16
 801049e:	46bd      	mov	sp, r7
 80104a0:	bd80      	pop	{r7, pc}

080104a2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80104a2:	b580      	push	{r7, lr}
 80104a4:	b082      	sub	sp, #8
 80104a6:	af00      	add	r7, sp, #0
 80104a8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80104aa:	6878      	ldr	r0, [r7, #4]
 80104ac:	f004 fae2 	bl	8014a74 <USBD_LL_Start>
 80104b0:	4603      	mov	r3, r0
}
 80104b2:	4618      	mov	r0, r3
 80104b4:	3708      	adds	r7, #8
 80104b6:	46bd      	mov	sp, r7
 80104b8:	bd80      	pop	{r7, pc}

080104ba <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80104ba:	b480      	push	{r7}
 80104bc:	b083      	sub	sp, #12
 80104be:	af00      	add	r7, sp, #0
 80104c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80104c2:	2300      	movs	r3, #0
}
 80104c4:	4618      	mov	r0, r3
 80104c6:	370c      	adds	r7, #12
 80104c8:	46bd      	mov	sp, r7
 80104ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ce:	4770      	bx	lr

080104d0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80104d0:	b580      	push	{r7, lr}
 80104d2:	b084      	sub	sp, #16
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	6078      	str	r0, [r7, #4]
 80104d8:	460b      	mov	r3, r1
 80104da:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80104dc:	2303      	movs	r3, #3
 80104de:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d009      	beq.n	80104fe <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	78fa      	ldrb	r2, [r7, #3]
 80104f4:	4611      	mov	r1, r2
 80104f6:	6878      	ldr	r0, [r7, #4]
 80104f8:	4798      	blx	r3
 80104fa:	4603      	mov	r3, r0
 80104fc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80104fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8010500:	4618      	mov	r0, r3
 8010502:	3710      	adds	r7, #16
 8010504:	46bd      	mov	sp, r7
 8010506:	bd80      	pop	{r7, pc}

08010508 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010508:	b580      	push	{r7, lr}
 801050a:	b082      	sub	sp, #8
 801050c:	af00      	add	r7, sp, #0
 801050e:	6078      	str	r0, [r7, #4]
 8010510:	460b      	mov	r3, r1
 8010512:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801051a:	2b00      	cmp	r3, #0
 801051c:	d007      	beq.n	801052e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010524:	685b      	ldr	r3, [r3, #4]
 8010526:	78fa      	ldrb	r2, [r7, #3]
 8010528:	4611      	mov	r1, r2
 801052a:	6878      	ldr	r0, [r7, #4]
 801052c:	4798      	blx	r3
  }

  return USBD_OK;
 801052e:	2300      	movs	r3, #0
}
 8010530:	4618      	mov	r0, r3
 8010532:	3708      	adds	r7, #8
 8010534:	46bd      	mov	sp, r7
 8010536:	bd80      	pop	{r7, pc}

08010538 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8010538:	b580      	push	{r7, lr}
 801053a:	b084      	sub	sp, #16
 801053c:	af00      	add	r7, sp, #0
 801053e:	6078      	str	r0, [r7, #4]
 8010540:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010548:	6839      	ldr	r1, [r7, #0]
 801054a:	4618      	mov	r0, r3
 801054c:	f000 ff2c 	bl	80113a8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	2201      	movs	r2, #1
 8010554:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 801055e:	461a      	mov	r2, r3
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801056c:	f003 031f 	and.w	r3, r3, #31
 8010570:	2b01      	cmp	r3, #1
 8010572:	d00e      	beq.n	8010592 <USBD_LL_SetupStage+0x5a>
 8010574:	2b01      	cmp	r3, #1
 8010576:	d302      	bcc.n	801057e <USBD_LL_SetupStage+0x46>
 8010578:	2b02      	cmp	r3, #2
 801057a:	d014      	beq.n	80105a6 <USBD_LL_SetupStage+0x6e>
 801057c:	e01d      	b.n	80105ba <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010584:	4619      	mov	r1, r3
 8010586:	6878      	ldr	r0, [r7, #4]
 8010588:	f000 fa18 	bl	80109bc <USBD_StdDevReq>
 801058c:	4603      	mov	r3, r0
 801058e:	73fb      	strb	r3, [r7, #15]
      break;
 8010590:	e020      	b.n	80105d4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010598:	4619      	mov	r1, r3
 801059a:	6878      	ldr	r0, [r7, #4]
 801059c:	f000 fa7c 	bl	8010a98 <USBD_StdItfReq>
 80105a0:	4603      	mov	r3, r0
 80105a2:	73fb      	strb	r3, [r7, #15]
      break;
 80105a4:	e016      	b.n	80105d4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80105ac:	4619      	mov	r1, r3
 80105ae:	6878      	ldr	r0, [r7, #4]
 80105b0:	f000 fab8 	bl	8010b24 <USBD_StdEPReq>
 80105b4:	4603      	mov	r3, r0
 80105b6:	73fb      	strb	r3, [r7, #15]
      break;
 80105b8:	e00c      	b.n	80105d4 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80105c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80105c4:	b2db      	uxtb	r3, r3
 80105c6:	4619      	mov	r1, r3
 80105c8:	6878      	ldr	r0, [r7, #4]
 80105ca:	f004 fab3 	bl	8014b34 <USBD_LL_StallEP>
 80105ce:	4603      	mov	r3, r0
 80105d0:	73fb      	strb	r3, [r7, #15]
      break;
 80105d2:	bf00      	nop
  }

  return ret;
 80105d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80105d6:	4618      	mov	r0, r3
 80105d8:	3710      	adds	r7, #16
 80105da:	46bd      	mov	sp, r7
 80105dc:	bd80      	pop	{r7, pc}

080105de <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80105de:	b580      	push	{r7, lr}
 80105e0:	b086      	sub	sp, #24
 80105e2:	af00      	add	r7, sp, #0
 80105e4:	60f8      	str	r0, [r7, #12]
 80105e6:	460b      	mov	r3, r1
 80105e8:	607a      	str	r2, [r7, #4]
 80105ea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80105ec:	7afb      	ldrb	r3, [r7, #11]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d137      	bne.n	8010662 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80105f8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010600:	2b03      	cmp	r3, #3
 8010602:	d14a      	bne.n	801069a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8010604:	693b      	ldr	r3, [r7, #16]
 8010606:	689a      	ldr	r2, [r3, #8]
 8010608:	693b      	ldr	r3, [r7, #16]
 801060a:	68db      	ldr	r3, [r3, #12]
 801060c:	429a      	cmp	r2, r3
 801060e:	d913      	bls.n	8010638 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8010610:	693b      	ldr	r3, [r7, #16]
 8010612:	689a      	ldr	r2, [r3, #8]
 8010614:	693b      	ldr	r3, [r7, #16]
 8010616:	68db      	ldr	r3, [r3, #12]
 8010618:	1ad2      	subs	r2, r2, r3
 801061a:	693b      	ldr	r3, [r7, #16]
 801061c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801061e:	693b      	ldr	r3, [r7, #16]
 8010620:	68da      	ldr	r2, [r3, #12]
 8010622:	693b      	ldr	r3, [r7, #16]
 8010624:	689b      	ldr	r3, [r3, #8]
 8010626:	4293      	cmp	r3, r2
 8010628:	bf28      	it	cs
 801062a:	4613      	movcs	r3, r2
 801062c:	461a      	mov	r2, r3
 801062e:	6879      	ldr	r1, [r7, #4]
 8010630:	68f8      	ldr	r0, [r7, #12]
 8010632:	f000 ffad 	bl	8011590 <USBD_CtlContinueRx>
 8010636:	e030      	b.n	801069a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801063e:	691b      	ldr	r3, [r3, #16]
 8010640:	2b00      	cmp	r3, #0
 8010642:	d00a      	beq.n	801065a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801064a:	2b03      	cmp	r3, #3
 801064c:	d105      	bne.n	801065a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010654:	691b      	ldr	r3, [r3, #16]
 8010656:	68f8      	ldr	r0, [r7, #12]
 8010658:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 801065a:	68f8      	ldr	r0, [r7, #12]
 801065c:	f000 ffa9 	bl	80115b2 <USBD_CtlSendStatus>
 8010660:	e01b      	b.n	801069a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010668:	699b      	ldr	r3, [r3, #24]
 801066a:	2b00      	cmp	r3, #0
 801066c:	d013      	beq.n	8010696 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8010674:	2b03      	cmp	r3, #3
 8010676:	d10e      	bne.n	8010696 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801067e:	699b      	ldr	r3, [r3, #24]
 8010680:	7afa      	ldrb	r2, [r7, #11]
 8010682:	4611      	mov	r1, r2
 8010684:	68f8      	ldr	r0, [r7, #12]
 8010686:	4798      	blx	r3
 8010688:	4603      	mov	r3, r0
 801068a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 801068c:	7dfb      	ldrb	r3, [r7, #23]
 801068e:	2b00      	cmp	r3, #0
 8010690:	d003      	beq.n	801069a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8010692:	7dfb      	ldrb	r3, [r7, #23]
 8010694:	e002      	b.n	801069c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8010696:	2303      	movs	r3, #3
 8010698:	e000      	b.n	801069c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 801069a:	2300      	movs	r3, #0
}
 801069c:	4618      	mov	r0, r3
 801069e:	3718      	adds	r7, #24
 80106a0:	46bd      	mov	sp, r7
 80106a2:	bd80      	pop	{r7, pc}

080106a4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80106a4:	b580      	push	{r7, lr}
 80106a6:	b086      	sub	sp, #24
 80106a8:	af00      	add	r7, sp, #0
 80106aa:	60f8      	str	r0, [r7, #12]
 80106ac:	460b      	mov	r3, r1
 80106ae:	607a      	str	r2, [r7, #4]
 80106b0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80106b2:	7afb      	ldrb	r3, [r7, #11]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d16a      	bne.n	801078e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	3314      	adds	r3, #20
 80106bc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80106c4:	2b02      	cmp	r3, #2
 80106c6:	d155      	bne.n	8010774 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80106c8:	693b      	ldr	r3, [r7, #16]
 80106ca:	689a      	ldr	r2, [r3, #8]
 80106cc:	693b      	ldr	r3, [r7, #16]
 80106ce:	68db      	ldr	r3, [r3, #12]
 80106d0:	429a      	cmp	r2, r3
 80106d2:	d914      	bls.n	80106fe <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80106d4:	693b      	ldr	r3, [r7, #16]
 80106d6:	689a      	ldr	r2, [r3, #8]
 80106d8:	693b      	ldr	r3, [r7, #16]
 80106da:	68db      	ldr	r3, [r3, #12]
 80106dc:	1ad2      	subs	r2, r2, r3
 80106de:	693b      	ldr	r3, [r7, #16]
 80106e0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80106e2:	693b      	ldr	r3, [r7, #16]
 80106e4:	689b      	ldr	r3, [r3, #8]
 80106e6:	461a      	mov	r2, r3
 80106e8:	6879      	ldr	r1, [r7, #4]
 80106ea:	68f8      	ldr	r0, [r7, #12]
 80106ec:	f000 ff22 	bl	8011534 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80106f0:	2300      	movs	r3, #0
 80106f2:	2200      	movs	r2, #0
 80106f4:	2100      	movs	r1, #0
 80106f6:	68f8      	ldr	r0, [r7, #12]
 80106f8:	f004 fac6 	bl	8014c88 <USBD_LL_PrepareReceive>
 80106fc:	e03a      	b.n	8010774 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80106fe:	693b      	ldr	r3, [r7, #16]
 8010700:	68da      	ldr	r2, [r3, #12]
 8010702:	693b      	ldr	r3, [r7, #16]
 8010704:	689b      	ldr	r3, [r3, #8]
 8010706:	429a      	cmp	r2, r3
 8010708:	d11c      	bne.n	8010744 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801070a:	693b      	ldr	r3, [r7, #16]
 801070c:	685a      	ldr	r2, [r3, #4]
 801070e:	693b      	ldr	r3, [r7, #16]
 8010710:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8010712:	429a      	cmp	r2, r3
 8010714:	d316      	bcc.n	8010744 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8010716:	693b      	ldr	r3, [r7, #16]
 8010718:	685a      	ldr	r2, [r3, #4]
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8010720:	429a      	cmp	r2, r3
 8010722:	d20f      	bcs.n	8010744 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8010724:	2200      	movs	r2, #0
 8010726:	2100      	movs	r1, #0
 8010728:	68f8      	ldr	r0, [r7, #12]
 801072a:	f000 ff03 	bl	8011534 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	2200      	movs	r2, #0
 8010732:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010736:	2300      	movs	r3, #0
 8010738:	2200      	movs	r2, #0
 801073a:	2100      	movs	r1, #0
 801073c:	68f8      	ldr	r0, [r7, #12]
 801073e:	f004 faa3 	bl	8014c88 <USBD_LL_PrepareReceive>
 8010742:	e017      	b.n	8010774 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801074a:	68db      	ldr	r3, [r3, #12]
 801074c:	2b00      	cmp	r3, #0
 801074e:	d00a      	beq.n	8010766 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8010756:	2b03      	cmp	r3, #3
 8010758:	d105      	bne.n	8010766 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010760:	68db      	ldr	r3, [r3, #12]
 8010762:	68f8      	ldr	r0, [r7, #12]
 8010764:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010766:	2180      	movs	r1, #128	; 0x80
 8010768:	68f8      	ldr	r0, [r7, #12]
 801076a:	f004 f9e3 	bl	8014b34 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801076e:	68f8      	ldr	r0, [r7, #12]
 8010770:	f000 ff32 	bl	80115d8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801077a:	2b01      	cmp	r3, #1
 801077c:	d123      	bne.n	80107c6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 801077e:	68f8      	ldr	r0, [r7, #12]
 8010780:	f7ff fe9b 	bl	80104ba <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	2200      	movs	r2, #0
 8010788:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801078c:	e01b      	b.n	80107c6 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010794:	695b      	ldr	r3, [r3, #20]
 8010796:	2b00      	cmp	r3, #0
 8010798:	d013      	beq.n	80107c2 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80107a0:	2b03      	cmp	r3, #3
 80107a2:	d10e      	bne.n	80107c2 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80107aa:	695b      	ldr	r3, [r3, #20]
 80107ac:	7afa      	ldrb	r2, [r7, #11]
 80107ae:	4611      	mov	r1, r2
 80107b0:	68f8      	ldr	r0, [r7, #12]
 80107b2:	4798      	blx	r3
 80107b4:	4603      	mov	r3, r0
 80107b6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80107b8:	7dfb      	ldrb	r3, [r7, #23]
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d003      	beq.n	80107c6 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80107be:	7dfb      	ldrb	r3, [r7, #23]
 80107c0:	e002      	b.n	80107c8 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80107c2:	2303      	movs	r3, #3
 80107c4:	e000      	b.n	80107c8 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80107c6:	2300      	movs	r3, #0
}
 80107c8:	4618      	mov	r0, r3
 80107ca:	3718      	adds	r7, #24
 80107cc:	46bd      	mov	sp, r7
 80107ce:	bd80      	pop	{r7, pc}

080107d0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80107d0:	b580      	push	{r7, lr}
 80107d2:	b082      	sub	sp, #8
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	2201      	movs	r2, #1
 80107dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	2200      	movs	r2, #0
 80107e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	2200      	movs	r2, #0
 80107ec:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	2200      	movs	r2, #0
 80107f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d009      	beq.n	8010814 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010806:	685b      	ldr	r3, [r3, #4]
 8010808:	687a      	ldr	r2, [r7, #4]
 801080a:	6852      	ldr	r2, [r2, #4]
 801080c:	b2d2      	uxtb	r2, r2
 801080e:	4611      	mov	r1, r2
 8010810:	6878      	ldr	r0, [r7, #4]
 8010812:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010814:	2340      	movs	r3, #64	; 0x40
 8010816:	2200      	movs	r2, #0
 8010818:	2100      	movs	r1, #0
 801081a:	6878      	ldr	r0, [r7, #4]
 801081c:	f004 f945 	bl	8014aaa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	2201      	movs	r2, #1
 8010824:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	2240      	movs	r2, #64	; 0x40
 801082c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010830:	2340      	movs	r3, #64	; 0x40
 8010832:	2200      	movs	r2, #0
 8010834:	2180      	movs	r1, #128	; 0x80
 8010836:	6878      	ldr	r0, [r7, #4]
 8010838:	f004 f937 	bl	8014aaa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	2201      	movs	r2, #1
 8010840:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	2240      	movs	r2, #64	; 0x40
 8010846:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8010848:	2300      	movs	r3, #0
}
 801084a:	4618      	mov	r0, r3
 801084c:	3708      	adds	r7, #8
 801084e:	46bd      	mov	sp, r7
 8010850:	bd80      	pop	{r7, pc}

08010852 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8010852:	b480      	push	{r7}
 8010854:	b083      	sub	sp, #12
 8010856:	af00      	add	r7, sp, #0
 8010858:	6078      	str	r0, [r7, #4]
 801085a:	460b      	mov	r3, r1
 801085c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	78fa      	ldrb	r2, [r7, #3]
 8010862:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8010864:	2300      	movs	r3, #0
}
 8010866:	4618      	mov	r0, r3
 8010868:	370c      	adds	r7, #12
 801086a:	46bd      	mov	sp, r7
 801086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010870:	4770      	bx	lr

08010872 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8010872:	b480      	push	{r7}
 8010874:	b083      	sub	sp, #12
 8010876:	af00      	add	r7, sp, #0
 8010878:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	2204      	movs	r2, #4
 801088a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801088e:	2300      	movs	r3, #0
}
 8010890:	4618      	mov	r0, r3
 8010892:	370c      	adds	r7, #12
 8010894:	46bd      	mov	sp, r7
 8010896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801089a:	4770      	bx	lr

0801089c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801089c:	b480      	push	{r7}
 801089e:	b083      	sub	sp, #12
 80108a0:	af00      	add	r7, sp, #0
 80108a2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80108aa:	2b04      	cmp	r3, #4
 80108ac:	d105      	bne.n	80108ba <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80108ba:	2300      	movs	r3, #0
}
 80108bc:	4618      	mov	r0, r3
 80108be:	370c      	adds	r7, #12
 80108c0:	46bd      	mov	sp, r7
 80108c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c6:	4770      	bx	lr

080108c8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80108c8:	b580      	push	{r7, lr}
 80108ca:	b082      	sub	sp, #8
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80108d6:	2b03      	cmp	r3, #3
 80108d8:	d10b      	bne.n	80108f2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80108e0:	69db      	ldr	r3, [r3, #28]
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d005      	beq.n	80108f2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80108ec:	69db      	ldr	r3, [r3, #28]
 80108ee:	6878      	ldr	r0, [r7, #4]
 80108f0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80108f2:	2300      	movs	r3, #0
}
 80108f4:	4618      	mov	r0, r3
 80108f6:	3708      	adds	r7, #8
 80108f8:	46bd      	mov	sp, r7
 80108fa:	bd80      	pop	{r7, pc}

080108fc <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80108fc:	b480      	push	{r7}
 80108fe:	b083      	sub	sp, #12
 8010900:	af00      	add	r7, sp, #0
 8010902:	6078      	str	r0, [r7, #4]
 8010904:	460b      	mov	r3, r1
 8010906:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8010908:	2300      	movs	r3, #0
}
 801090a:	4618      	mov	r0, r3
 801090c:	370c      	adds	r7, #12
 801090e:	46bd      	mov	sp, r7
 8010910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010914:	4770      	bx	lr

08010916 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8010916:	b480      	push	{r7}
 8010918:	b083      	sub	sp, #12
 801091a:	af00      	add	r7, sp, #0
 801091c:	6078      	str	r0, [r7, #4]
 801091e:	460b      	mov	r3, r1
 8010920:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8010922:	2300      	movs	r3, #0
}
 8010924:	4618      	mov	r0, r3
 8010926:	370c      	adds	r7, #12
 8010928:	46bd      	mov	sp, r7
 801092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801092e:	4770      	bx	lr

08010930 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8010930:	b480      	push	{r7}
 8010932:	b083      	sub	sp, #12
 8010934:	af00      	add	r7, sp, #0
 8010936:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010938:	2300      	movs	r3, #0
}
 801093a:	4618      	mov	r0, r3
 801093c:	370c      	adds	r7, #12
 801093e:	46bd      	mov	sp, r7
 8010940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010944:	4770      	bx	lr

08010946 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8010946:	b580      	push	{r7, lr}
 8010948:	b082      	sub	sp, #8
 801094a:	af00      	add	r7, sp, #0
 801094c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	2201      	movs	r2, #1
 8010952:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801095c:	2b00      	cmp	r3, #0
 801095e:	d009      	beq.n	8010974 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010966:	685b      	ldr	r3, [r3, #4]
 8010968:	687a      	ldr	r2, [r7, #4]
 801096a:	6852      	ldr	r2, [r2, #4]
 801096c:	b2d2      	uxtb	r2, r2
 801096e:	4611      	mov	r1, r2
 8010970:	6878      	ldr	r0, [r7, #4]
 8010972:	4798      	blx	r3
  }

  return USBD_OK;
 8010974:	2300      	movs	r3, #0
}
 8010976:	4618      	mov	r0, r3
 8010978:	3708      	adds	r7, #8
 801097a:	46bd      	mov	sp, r7
 801097c:	bd80      	pop	{r7, pc}

0801097e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801097e:	b480      	push	{r7}
 8010980:	b087      	sub	sp, #28
 8010982:	af00      	add	r7, sp, #0
 8010984:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801098a:	697b      	ldr	r3, [r7, #20]
 801098c:	781b      	ldrb	r3, [r3, #0]
 801098e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8010990:	697b      	ldr	r3, [r7, #20]
 8010992:	3301      	adds	r3, #1
 8010994:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8010996:	697b      	ldr	r3, [r7, #20]
 8010998:	781b      	ldrb	r3, [r3, #0]
 801099a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801099c:	8a3b      	ldrh	r3, [r7, #16]
 801099e:	021b      	lsls	r3, r3, #8
 80109a0:	b21a      	sxth	r2, r3
 80109a2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80109a6:	4313      	orrs	r3, r2
 80109a8:	b21b      	sxth	r3, r3
 80109aa:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80109ac:	89fb      	ldrh	r3, [r7, #14]
}
 80109ae:	4618      	mov	r0, r3
 80109b0:	371c      	adds	r7, #28
 80109b2:	46bd      	mov	sp, r7
 80109b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b8:	4770      	bx	lr
	...

080109bc <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80109bc:	b580      	push	{r7, lr}
 80109be:	b084      	sub	sp, #16
 80109c0:	af00      	add	r7, sp, #0
 80109c2:	6078      	str	r0, [r7, #4]
 80109c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80109c6:	2300      	movs	r3, #0
 80109c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80109ca:	683b      	ldr	r3, [r7, #0]
 80109cc:	781b      	ldrb	r3, [r3, #0]
 80109ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80109d2:	2b20      	cmp	r3, #32
 80109d4:	d004      	beq.n	80109e0 <USBD_StdDevReq+0x24>
 80109d6:	2b40      	cmp	r3, #64	; 0x40
 80109d8:	d002      	beq.n	80109e0 <USBD_StdDevReq+0x24>
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d00a      	beq.n	80109f4 <USBD_StdDevReq+0x38>
 80109de:	e050      	b.n	8010a82 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80109e6:	689b      	ldr	r3, [r3, #8]
 80109e8:	6839      	ldr	r1, [r7, #0]
 80109ea:	6878      	ldr	r0, [r7, #4]
 80109ec:	4798      	blx	r3
 80109ee:	4603      	mov	r3, r0
 80109f0:	73fb      	strb	r3, [r7, #15]
    break;
 80109f2:	e04b      	b.n	8010a8c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80109f4:	683b      	ldr	r3, [r7, #0]
 80109f6:	785b      	ldrb	r3, [r3, #1]
 80109f8:	2b09      	cmp	r3, #9
 80109fa:	d83c      	bhi.n	8010a76 <USBD_StdDevReq+0xba>
 80109fc:	a201      	add	r2, pc, #4	; (adr r2, 8010a04 <USBD_StdDevReq+0x48>)
 80109fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a02:	bf00      	nop
 8010a04:	08010a59 	.word	0x08010a59
 8010a08:	08010a6d 	.word	0x08010a6d
 8010a0c:	08010a77 	.word	0x08010a77
 8010a10:	08010a63 	.word	0x08010a63
 8010a14:	08010a77 	.word	0x08010a77
 8010a18:	08010a37 	.word	0x08010a37
 8010a1c:	08010a2d 	.word	0x08010a2d
 8010a20:	08010a77 	.word	0x08010a77
 8010a24:	08010a4f 	.word	0x08010a4f
 8010a28:	08010a41 	.word	0x08010a41
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8010a2c:	6839      	ldr	r1, [r7, #0]
 8010a2e:	6878      	ldr	r0, [r7, #4]
 8010a30:	f000 f9ce 	bl	8010dd0 <USBD_GetDescriptor>
      break;
 8010a34:	e024      	b.n	8010a80 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8010a36:	6839      	ldr	r1, [r7, #0]
 8010a38:	6878      	ldr	r0, [r7, #4]
 8010a3a:	f000 fb33 	bl	80110a4 <USBD_SetAddress>
      break;
 8010a3e:	e01f      	b.n	8010a80 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8010a40:	6839      	ldr	r1, [r7, #0]
 8010a42:	6878      	ldr	r0, [r7, #4]
 8010a44:	f000 fb70 	bl	8011128 <USBD_SetConfig>
 8010a48:	4603      	mov	r3, r0
 8010a4a:	73fb      	strb	r3, [r7, #15]
      break;
 8010a4c:	e018      	b.n	8010a80 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8010a4e:	6839      	ldr	r1, [r7, #0]
 8010a50:	6878      	ldr	r0, [r7, #4]
 8010a52:	f000 fc0d 	bl	8011270 <USBD_GetConfig>
      break;
 8010a56:	e013      	b.n	8010a80 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8010a58:	6839      	ldr	r1, [r7, #0]
 8010a5a:	6878      	ldr	r0, [r7, #4]
 8010a5c:	f000 fc3c 	bl	80112d8 <USBD_GetStatus>
      break;
 8010a60:	e00e      	b.n	8010a80 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8010a62:	6839      	ldr	r1, [r7, #0]
 8010a64:	6878      	ldr	r0, [r7, #4]
 8010a66:	f000 fc6a 	bl	801133e <USBD_SetFeature>
      break;
 8010a6a:	e009      	b.n	8010a80 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8010a6c:	6839      	ldr	r1, [r7, #0]
 8010a6e:	6878      	ldr	r0, [r7, #4]
 8010a70:	f000 fc79 	bl	8011366 <USBD_ClrFeature>
      break;
 8010a74:	e004      	b.n	8010a80 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8010a76:	6839      	ldr	r1, [r7, #0]
 8010a78:	6878      	ldr	r0, [r7, #4]
 8010a7a:	f000 fccf 	bl	801141c <USBD_CtlError>
      break;
 8010a7e:	bf00      	nop
    }
    break;
 8010a80:	e004      	b.n	8010a8c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8010a82:	6839      	ldr	r1, [r7, #0]
 8010a84:	6878      	ldr	r0, [r7, #4]
 8010a86:	f000 fcc9 	bl	801141c <USBD_CtlError>
    break;
 8010a8a:	bf00      	nop
  }

  return ret;
 8010a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a8e:	4618      	mov	r0, r3
 8010a90:	3710      	adds	r7, #16
 8010a92:	46bd      	mov	sp, r7
 8010a94:	bd80      	pop	{r7, pc}
 8010a96:	bf00      	nop

08010a98 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010a98:	b580      	push	{r7, lr}
 8010a9a:	b084      	sub	sp, #16
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	6078      	str	r0, [r7, #4]
 8010aa0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010aa2:	2300      	movs	r3, #0
 8010aa4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010aa6:	683b      	ldr	r3, [r7, #0]
 8010aa8:	781b      	ldrb	r3, [r3, #0]
 8010aaa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010aae:	2b20      	cmp	r3, #32
 8010ab0:	d003      	beq.n	8010aba <USBD_StdItfReq+0x22>
 8010ab2:	2b40      	cmp	r3, #64	; 0x40
 8010ab4:	d001      	beq.n	8010aba <USBD_StdItfReq+0x22>
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d12a      	bne.n	8010b10 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010ac0:	3b01      	subs	r3, #1
 8010ac2:	2b02      	cmp	r3, #2
 8010ac4:	d81d      	bhi.n	8010b02 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8010ac6:	683b      	ldr	r3, [r7, #0]
 8010ac8:	889b      	ldrh	r3, [r3, #4]
 8010aca:	b2db      	uxtb	r3, r3
 8010acc:	2b01      	cmp	r3, #1
 8010ace:	d813      	bhi.n	8010af8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ad6:	689b      	ldr	r3, [r3, #8]
 8010ad8:	6839      	ldr	r1, [r7, #0]
 8010ada:	6878      	ldr	r0, [r7, #4]
 8010adc:	4798      	blx	r3
 8010ade:	4603      	mov	r3, r0
 8010ae0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8010ae2:	683b      	ldr	r3, [r7, #0]
 8010ae4:	88db      	ldrh	r3, [r3, #6]
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d110      	bne.n	8010b0c <USBD_StdItfReq+0x74>
 8010aea:	7bfb      	ldrb	r3, [r7, #15]
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d10d      	bne.n	8010b0c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8010af0:	6878      	ldr	r0, [r7, #4]
 8010af2:	f000 fd5e 	bl	80115b2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8010af6:	e009      	b.n	8010b0c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8010af8:	6839      	ldr	r1, [r7, #0]
 8010afa:	6878      	ldr	r0, [r7, #4]
 8010afc:	f000 fc8e 	bl	801141c <USBD_CtlError>
      break;
 8010b00:	e004      	b.n	8010b0c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8010b02:	6839      	ldr	r1, [r7, #0]
 8010b04:	6878      	ldr	r0, [r7, #4]
 8010b06:	f000 fc89 	bl	801141c <USBD_CtlError>
      break;
 8010b0a:	e000      	b.n	8010b0e <USBD_StdItfReq+0x76>
      break;
 8010b0c:	bf00      	nop
    }
    break;
 8010b0e:	e004      	b.n	8010b1a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8010b10:	6839      	ldr	r1, [r7, #0]
 8010b12:	6878      	ldr	r0, [r7, #4]
 8010b14:	f000 fc82 	bl	801141c <USBD_CtlError>
    break;
 8010b18:	bf00      	nop
  }

  return ret;
 8010b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	3710      	adds	r7, #16
 8010b20:	46bd      	mov	sp, r7
 8010b22:	bd80      	pop	{r7, pc}

08010b24 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010b24:	b580      	push	{r7, lr}
 8010b26:	b084      	sub	sp, #16
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	6078      	str	r0, [r7, #4]
 8010b2c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8010b2e:	2300      	movs	r3, #0
 8010b30:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8010b32:	683b      	ldr	r3, [r7, #0]
 8010b34:	889b      	ldrh	r3, [r3, #4]
 8010b36:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010b38:	683b      	ldr	r3, [r7, #0]
 8010b3a:	781b      	ldrb	r3, [r3, #0]
 8010b3c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010b40:	2b20      	cmp	r3, #32
 8010b42:	d004      	beq.n	8010b4e <USBD_StdEPReq+0x2a>
 8010b44:	2b40      	cmp	r3, #64	; 0x40
 8010b46:	d002      	beq.n	8010b4e <USBD_StdEPReq+0x2a>
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d00a      	beq.n	8010b62 <USBD_StdEPReq+0x3e>
 8010b4c:	e135      	b.n	8010dba <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010b54:	689b      	ldr	r3, [r3, #8]
 8010b56:	6839      	ldr	r1, [r7, #0]
 8010b58:	6878      	ldr	r0, [r7, #4]
 8010b5a:	4798      	blx	r3
 8010b5c:	4603      	mov	r3, r0
 8010b5e:	73fb      	strb	r3, [r7, #15]
    break;
 8010b60:	e130      	b.n	8010dc4 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8010b62:	683b      	ldr	r3, [r7, #0]
 8010b64:	785b      	ldrb	r3, [r3, #1]
 8010b66:	2b01      	cmp	r3, #1
 8010b68:	d03e      	beq.n	8010be8 <USBD_StdEPReq+0xc4>
 8010b6a:	2b03      	cmp	r3, #3
 8010b6c:	d002      	beq.n	8010b74 <USBD_StdEPReq+0x50>
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d077      	beq.n	8010c62 <USBD_StdEPReq+0x13e>
 8010b72:	e11c      	b.n	8010dae <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010b7a:	2b02      	cmp	r3, #2
 8010b7c:	d002      	beq.n	8010b84 <USBD_StdEPReq+0x60>
 8010b7e:	2b03      	cmp	r3, #3
 8010b80:	d015      	beq.n	8010bae <USBD_StdEPReq+0x8a>
 8010b82:	e02b      	b.n	8010bdc <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010b84:	7bbb      	ldrb	r3, [r7, #14]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d00c      	beq.n	8010ba4 <USBD_StdEPReq+0x80>
 8010b8a:	7bbb      	ldrb	r3, [r7, #14]
 8010b8c:	2b80      	cmp	r3, #128	; 0x80
 8010b8e:	d009      	beq.n	8010ba4 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8010b90:	7bbb      	ldrb	r3, [r7, #14]
 8010b92:	4619      	mov	r1, r3
 8010b94:	6878      	ldr	r0, [r7, #4]
 8010b96:	f003 ffcd 	bl	8014b34 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010b9a:	2180      	movs	r1, #128	; 0x80
 8010b9c:	6878      	ldr	r0, [r7, #4]
 8010b9e:	f003 ffc9 	bl	8014b34 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8010ba2:	e020      	b.n	8010be6 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8010ba4:	6839      	ldr	r1, [r7, #0]
 8010ba6:	6878      	ldr	r0, [r7, #4]
 8010ba8:	f000 fc38 	bl	801141c <USBD_CtlError>
        break;
 8010bac:	e01b      	b.n	8010be6 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8010bae:	683b      	ldr	r3, [r7, #0]
 8010bb0:	885b      	ldrh	r3, [r3, #2]
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d10e      	bne.n	8010bd4 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010bb6:	7bbb      	ldrb	r3, [r7, #14]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d00b      	beq.n	8010bd4 <USBD_StdEPReq+0xb0>
 8010bbc:	7bbb      	ldrb	r3, [r7, #14]
 8010bbe:	2b80      	cmp	r3, #128	; 0x80
 8010bc0:	d008      	beq.n	8010bd4 <USBD_StdEPReq+0xb0>
 8010bc2:	683b      	ldr	r3, [r7, #0]
 8010bc4:	88db      	ldrh	r3, [r3, #6]
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d104      	bne.n	8010bd4 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8010bca:	7bbb      	ldrb	r3, [r7, #14]
 8010bcc:	4619      	mov	r1, r3
 8010bce:	6878      	ldr	r0, [r7, #4]
 8010bd0:	f003 ffb0 	bl	8014b34 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8010bd4:	6878      	ldr	r0, [r7, #4]
 8010bd6:	f000 fcec 	bl	80115b2 <USBD_CtlSendStatus>

        break;
 8010bda:	e004      	b.n	8010be6 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8010bdc:	6839      	ldr	r1, [r7, #0]
 8010bde:	6878      	ldr	r0, [r7, #4]
 8010be0:	f000 fc1c 	bl	801141c <USBD_CtlError>
        break;
 8010be4:	bf00      	nop
      }
      break;
 8010be6:	e0e7      	b.n	8010db8 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010bee:	2b02      	cmp	r3, #2
 8010bf0:	d002      	beq.n	8010bf8 <USBD_StdEPReq+0xd4>
 8010bf2:	2b03      	cmp	r3, #3
 8010bf4:	d015      	beq.n	8010c22 <USBD_StdEPReq+0xfe>
 8010bf6:	e02d      	b.n	8010c54 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010bf8:	7bbb      	ldrb	r3, [r7, #14]
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d00c      	beq.n	8010c18 <USBD_StdEPReq+0xf4>
 8010bfe:	7bbb      	ldrb	r3, [r7, #14]
 8010c00:	2b80      	cmp	r3, #128	; 0x80
 8010c02:	d009      	beq.n	8010c18 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8010c04:	7bbb      	ldrb	r3, [r7, #14]
 8010c06:	4619      	mov	r1, r3
 8010c08:	6878      	ldr	r0, [r7, #4]
 8010c0a:	f003 ff93 	bl	8014b34 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010c0e:	2180      	movs	r1, #128	; 0x80
 8010c10:	6878      	ldr	r0, [r7, #4]
 8010c12:	f003 ff8f 	bl	8014b34 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8010c16:	e023      	b.n	8010c60 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8010c18:	6839      	ldr	r1, [r7, #0]
 8010c1a:	6878      	ldr	r0, [r7, #4]
 8010c1c:	f000 fbfe 	bl	801141c <USBD_CtlError>
        break;
 8010c20:	e01e      	b.n	8010c60 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8010c22:	683b      	ldr	r3, [r7, #0]
 8010c24:	885b      	ldrh	r3, [r3, #2]
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d119      	bne.n	8010c5e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8010c2a:	7bbb      	ldrb	r3, [r7, #14]
 8010c2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d004      	beq.n	8010c3e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8010c34:	7bbb      	ldrb	r3, [r7, #14]
 8010c36:	4619      	mov	r1, r3
 8010c38:	6878      	ldr	r0, [r7, #4]
 8010c3a:	f003 ff9a 	bl	8014b72 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8010c3e:	6878      	ldr	r0, [r7, #4]
 8010c40:	f000 fcb7 	bl	80115b2 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010c4a:	689b      	ldr	r3, [r3, #8]
 8010c4c:	6839      	ldr	r1, [r7, #0]
 8010c4e:	6878      	ldr	r0, [r7, #4]
 8010c50:	4798      	blx	r3
        }
        break;
 8010c52:	e004      	b.n	8010c5e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8010c54:	6839      	ldr	r1, [r7, #0]
 8010c56:	6878      	ldr	r0, [r7, #4]
 8010c58:	f000 fbe0 	bl	801141c <USBD_CtlError>
        break;
 8010c5c:	e000      	b.n	8010c60 <USBD_StdEPReq+0x13c>
        break;
 8010c5e:	bf00      	nop
      }
      break;
 8010c60:	e0aa      	b.n	8010db8 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010c68:	2b02      	cmp	r3, #2
 8010c6a:	d002      	beq.n	8010c72 <USBD_StdEPReq+0x14e>
 8010c6c:	2b03      	cmp	r3, #3
 8010c6e:	d032      	beq.n	8010cd6 <USBD_StdEPReq+0x1b2>
 8010c70:	e097      	b.n	8010da2 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010c72:	7bbb      	ldrb	r3, [r7, #14]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d007      	beq.n	8010c88 <USBD_StdEPReq+0x164>
 8010c78:	7bbb      	ldrb	r3, [r7, #14]
 8010c7a:	2b80      	cmp	r3, #128	; 0x80
 8010c7c:	d004      	beq.n	8010c88 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8010c7e:	6839      	ldr	r1, [r7, #0]
 8010c80:	6878      	ldr	r0, [r7, #4]
 8010c82:	f000 fbcb 	bl	801141c <USBD_CtlError>
          break;
 8010c86:	e091      	b.n	8010dac <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010c88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	da0b      	bge.n	8010ca8 <USBD_StdEPReq+0x184>
 8010c90:	7bbb      	ldrb	r3, [r7, #14]
 8010c92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010c96:	4613      	mov	r3, r2
 8010c98:	009b      	lsls	r3, r3, #2
 8010c9a:	4413      	add	r3, r2
 8010c9c:	009b      	lsls	r3, r3, #2
 8010c9e:	3310      	adds	r3, #16
 8010ca0:	687a      	ldr	r2, [r7, #4]
 8010ca2:	4413      	add	r3, r2
 8010ca4:	3304      	adds	r3, #4
 8010ca6:	e00b      	b.n	8010cc0 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8010ca8:	7bbb      	ldrb	r3, [r7, #14]
 8010caa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010cae:	4613      	mov	r3, r2
 8010cb0:	009b      	lsls	r3, r3, #2
 8010cb2:	4413      	add	r3, r2
 8010cb4:	009b      	lsls	r3, r3, #2
 8010cb6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010cba:	687a      	ldr	r2, [r7, #4]
 8010cbc:	4413      	add	r3, r2
 8010cbe:	3304      	adds	r3, #4
 8010cc0:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8010cc2:	68bb      	ldr	r3, [r7, #8]
 8010cc4:	2200      	movs	r2, #0
 8010cc6:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010cc8:	68bb      	ldr	r3, [r7, #8]
 8010cca:	2202      	movs	r2, #2
 8010ccc:	4619      	mov	r1, r3
 8010cce:	6878      	ldr	r0, [r7, #4]
 8010cd0:	f000 fc15 	bl	80114fe <USBD_CtlSendData>
        break;
 8010cd4:	e06a      	b.n	8010dac <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8010cd6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	da11      	bge.n	8010d02 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010cde:	7bbb      	ldrb	r3, [r7, #14]
 8010ce0:	f003 020f 	and.w	r2, r3, #15
 8010ce4:	6879      	ldr	r1, [r7, #4]
 8010ce6:	4613      	mov	r3, r2
 8010ce8:	009b      	lsls	r3, r3, #2
 8010cea:	4413      	add	r3, r2
 8010cec:	009b      	lsls	r3, r3, #2
 8010cee:	440b      	add	r3, r1
 8010cf0:	3324      	adds	r3, #36	; 0x24
 8010cf2:	881b      	ldrh	r3, [r3, #0]
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d117      	bne.n	8010d28 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8010cf8:	6839      	ldr	r1, [r7, #0]
 8010cfa:	6878      	ldr	r0, [r7, #4]
 8010cfc:	f000 fb8e 	bl	801141c <USBD_CtlError>
            break;
 8010d00:	e054      	b.n	8010dac <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8010d02:	7bbb      	ldrb	r3, [r7, #14]
 8010d04:	f003 020f 	and.w	r2, r3, #15
 8010d08:	6879      	ldr	r1, [r7, #4]
 8010d0a:	4613      	mov	r3, r2
 8010d0c:	009b      	lsls	r3, r3, #2
 8010d0e:	4413      	add	r3, r2
 8010d10:	009b      	lsls	r3, r3, #2
 8010d12:	440b      	add	r3, r1
 8010d14:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010d18:	881b      	ldrh	r3, [r3, #0]
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d104      	bne.n	8010d28 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8010d1e:	6839      	ldr	r1, [r7, #0]
 8010d20:	6878      	ldr	r0, [r7, #4]
 8010d22:	f000 fb7b 	bl	801141c <USBD_CtlError>
            break;
 8010d26:	e041      	b.n	8010dac <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010d28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	da0b      	bge.n	8010d48 <USBD_StdEPReq+0x224>
 8010d30:	7bbb      	ldrb	r3, [r7, #14]
 8010d32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010d36:	4613      	mov	r3, r2
 8010d38:	009b      	lsls	r3, r3, #2
 8010d3a:	4413      	add	r3, r2
 8010d3c:	009b      	lsls	r3, r3, #2
 8010d3e:	3310      	adds	r3, #16
 8010d40:	687a      	ldr	r2, [r7, #4]
 8010d42:	4413      	add	r3, r2
 8010d44:	3304      	adds	r3, #4
 8010d46:	e00b      	b.n	8010d60 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8010d48:	7bbb      	ldrb	r3, [r7, #14]
 8010d4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010d4e:	4613      	mov	r3, r2
 8010d50:	009b      	lsls	r3, r3, #2
 8010d52:	4413      	add	r3, r2
 8010d54:	009b      	lsls	r3, r3, #2
 8010d56:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010d5a:	687a      	ldr	r2, [r7, #4]
 8010d5c:	4413      	add	r3, r2
 8010d5e:	3304      	adds	r3, #4
 8010d60:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8010d62:	7bbb      	ldrb	r3, [r7, #14]
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d002      	beq.n	8010d6e <USBD_StdEPReq+0x24a>
 8010d68:	7bbb      	ldrb	r3, [r7, #14]
 8010d6a:	2b80      	cmp	r3, #128	; 0x80
 8010d6c:	d103      	bne.n	8010d76 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8010d6e:	68bb      	ldr	r3, [r7, #8]
 8010d70:	2200      	movs	r2, #0
 8010d72:	601a      	str	r2, [r3, #0]
 8010d74:	e00e      	b.n	8010d94 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8010d76:	7bbb      	ldrb	r3, [r7, #14]
 8010d78:	4619      	mov	r1, r3
 8010d7a:	6878      	ldr	r0, [r7, #4]
 8010d7c:	f003 ff18 	bl	8014bb0 <USBD_LL_IsStallEP>
 8010d80:	4603      	mov	r3, r0
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d003      	beq.n	8010d8e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8010d86:	68bb      	ldr	r3, [r7, #8]
 8010d88:	2201      	movs	r2, #1
 8010d8a:	601a      	str	r2, [r3, #0]
 8010d8c:	e002      	b.n	8010d94 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8010d8e:	68bb      	ldr	r3, [r7, #8]
 8010d90:	2200      	movs	r2, #0
 8010d92:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010d94:	68bb      	ldr	r3, [r7, #8]
 8010d96:	2202      	movs	r2, #2
 8010d98:	4619      	mov	r1, r3
 8010d9a:	6878      	ldr	r0, [r7, #4]
 8010d9c:	f000 fbaf 	bl	80114fe <USBD_CtlSendData>
          break;
 8010da0:	e004      	b.n	8010dac <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8010da2:	6839      	ldr	r1, [r7, #0]
 8010da4:	6878      	ldr	r0, [r7, #4]
 8010da6:	f000 fb39 	bl	801141c <USBD_CtlError>
        break;
 8010daa:	bf00      	nop
      }
      break;
 8010dac:	e004      	b.n	8010db8 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8010dae:	6839      	ldr	r1, [r7, #0]
 8010db0:	6878      	ldr	r0, [r7, #4]
 8010db2:	f000 fb33 	bl	801141c <USBD_CtlError>
      break;
 8010db6:	bf00      	nop
    }
    break;
 8010db8:	e004      	b.n	8010dc4 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8010dba:	6839      	ldr	r1, [r7, #0]
 8010dbc:	6878      	ldr	r0, [r7, #4]
 8010dbe:	f000 fb2d 	bl	801141c <USBD_CtlError>
    break;
 8010dc2:	bf00      	nop
  }

  return ret;
 8010dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	3710      	adds	r7, #16
 8010dca:	46bd      	mov	sp, r7
 8010dcc:	bd80      	pop	{r7, pc}
	...

08010dd0 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010dd0:	b580      	push	{r7, lr}
 8010dd2:	b084      	sub	sp, #16
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	6078      	str	r0, [r7, #4]
 8010dd8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010dda:	2300      	movs	r3, #0
 8010ddc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8010dde:	2300      	movs	r3, #0
 8010de0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8010de2:	2300      	movs	r3, #0
 8010de4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8010de6:	683b      	ldr	r3, [r7, #0]
 8010de8:	885b      	ldrh	r3, [r3, #2]
 8010dea:	0a1b      	lsrs	r3, r3, #8
 8010dec:	b29b      	uxth	r3, r3
 8010dee:	3b01      	subs	r3, #1
 8010df0:	2b06      	cmp	r3, #6
 8010df2:	f200 8128 	bhi.w	8011046 <USBD_GetDescriptor+0x276>
 8010df6:	a201      	add	r2, pc, #4	; (adr r2, 8010dfc <USBD_GetDescriptor+0x2c>)
 8010df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010dfc:	08010e19 	.word	0x08010e19
 8010e00:	08010e31 	.word	0x08010e31
 8010e04:	08010e71 	.word	0x08010e71
 8010e08:	08011047 	.word	0x08011047
 8010e0c:	08011047 	.word	0x08011047
 8010e10:	08010fe7 	.word	0x08010fe7
 8010e14:	08011013 	.word	0x08011013
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	687a      	ldr	r2, [r7, #4]
 8010e22:	7c12      	ldrb	r2, [r2, #16]
 8010e24:	f107 0108 	add.w	r1, r7, #8
 8010e28:	4610      	mov	r0, r2
 8010e2a:	4798      	blx	r3
 8010e2c:	60f8      	str	r0, [r7, #12]
    break;
 8010e2e:	e112      	b.n	8011056 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	7c1b      	ldrb	r3, [r3, #16]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d10d      	bne.n	8010e54 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e40:	f107 0208 	add.w	r2, r7, #8
 8010e44:	4610      	mov	r0, r2
 8010e46:	4798      	blx	r3
 8010e48:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	3301      	adds	r3, #1
 8010e4e:	2202      	movs	r2, #2
 8010e50:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8010e52:	e100      	b.n	8011056 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e5c:	f107 0208 	add.w	r2, r7, #8
 8010e60:	4610      	mov	r0, r2
 8010e62:	4798      	blx	r3
 8010e64:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010e66:	68fb      	ldr	r3, [r7, #12]
 8010e68:	3301      	adds	r3, #1
 8010e6a:	2202      	movs	r2, #2
 8010e6c:	701a      	strb	r2, [r3, #0]
    break;
 8010e6e:	e0f2      	b.n	8011056 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8010e70:	683b      	ldr	r3, [r7, #0]
 8010e72:	885b      	ldrh	r3, [r3, #2]
 8010e74:	b2db      	uxtb	r3, r3
 8010e76:	2b05      	cmp	r3, #5
 8010e78:	f200 80ac 	bhi.w	8010fd4 <USBD_GetDescriptor+0x204>
 8010e7c:	a201      	add	r2, pc, #4	; (adr r2, 8010e84 <USBD_GetDescriptor+0xb4>)
 8010e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e82:	bf00      	nop
 8010e84:	08010e9d 	.word	0x08010e9d
 8010e88:	08010ed1 	.word	0x08010ed1
 8010e8c:	08010f05 	.word	0x08010f05
 8010e90:	08010f39 	.word	0x08010f39
 8010e94:	08010f6d 	.word	0x08010f6d
 8010e98:	08010fa1 	.word	0x08010fa1
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010ea2:	685b      	ldr	r3, [r3, #4]
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d00b      	beq.n	8010ec0 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010eae:	685b      	ldr	r3, [r3, #4]
 8010eb0:	687a      	ldr	r2, [r7, #4]
 8010eb2:	7c12      	ldrb	r2, [r2, #16]
 8010eb4:	f107 0108 	add.w	r1, r7, #8
 8010eb8:	4610      	mov	r0, r2
 8010eba:	4798      	blx	r3
 8010ebc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010ebe:	e091      	b.n	8010fe4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8010ec0:	6839      	ldr	r1, [r7, #0]
 8010ec2:	6878      	ldr	r0, [r7, #4]
 8010ec4:	f000 faaa 	bl	801141c <USBD_CtlError>
        err++;
 8010ec8:	7afb      	ldrb	r3, [r7, #11]
 8010eca:	3301      	adds	r3, #1
 8010ecc:	72fb      	strb	r3, [r7, #11]
      break;
 8010ece:	e089      	b.n	8010fe4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010ed6:	689b      	ldr	r3, [r3, #8]
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d00b      	beq.n	8010ef4 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010ee2:	689b      	ldr	r3, [r3, #8]
 8010ee4:	687a      	ldr	r2, [r7, #4]
 8010ee6:	7c12      	ldrb	r2, [r2, #16]
 8010ee8:	f107 0108 	add.w	r1, r7, #8
 8010eec:	4610      	mov	r0, r2
 8010eee:	4798      	blx	r3
 8010ef0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010ef2:	e077      	b.n	8010fe4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8010ef4:	6839      	ldr	r1, [r7, #0]
 8010ef6:	6878      	ldr	r0, [r7, #4]
 8010ef8:	f000 fa90 	bl	801141c <USBD_CtlError>
        err++;
 8010efc:	7afb      	ldrb	r3, [r7, #11]
 8010efe:	3301      	adds	r3, #1
 8010f00:	72fb      	strb	r3, [r7, #11]
      break;
 8010f02:	e06f      	b.n	8010fe4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010f0a:	68db      	ldr	r3, [r3, #12]
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d00b      	beq.n	8010f28 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010f16:	68db      	ldr	r3, [r3, #12]
 8010f18:	687a      	ldr	r2, [r7, #4]
 8010f1a:	7c12      	ldrb	r2, [r2, #16]
 8010f1c:	f107 0108 	add.w	r1, r7, #8
 8010f20:	4610      	mov	r0, r2
 8010f22:	4798      	blx	r3
 8010f24:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010f26:	e05d      	b.n	8010fe4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8010f28:	6839      	ldr	r1, [r7, #0]
 8010f2a:	6878      	ldr	r0, [r7, #4]
 8010f2c:	f000 fa76 	bl	801141c <USBD_CtlError>
        err++;
 8010f30:	7afb      	ldrb	r3, [r7, #11]
 8010f32:	3301      	adds	r3, #1
 8010f34:	72fb      	strb	r3, [r7, #11]
      break;
 8010f36:	e055      	b.n	8010fe4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010f3e:	691b      	ldr	r3, [r3, #16]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d00b      	beq.n	8010f5c <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010f4a:	691b      	ldr	r3, [r3, #16]
 8010f4c:	687a      	ldr	r2, [r7, #4]
 8010f4e:	7c12      	ldrb	r2, [r2, #16]
 8010f50:	f107 0108 	add.w	r1, r7, #8
 8010f54:	4610      	mov	r0, r2
 8010f56:	4798      	blx	r3
 8010f58:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010f5a:	e043      	b.n	8010fe4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8010f5c:	6839      	ldr	r1, [r7, #0]
 8010f5e:	6878      	ldr	r0, [r7, #4]
 8010f60:	f000 fa5c 	bl	801141c <USBD_CtlError>
        err++;
 8010f64:	7afb      	ldrb	r3, [r7, #11]
 8010f66:	3301      	adds	r3, #1
 8010f68:	72fb      	strb	r3, [r7, #11]
      break;
 8010f6a:	e03b      	b.n	8010fe4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010f72:	695b      	ldr	r3, [r3, #20]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d00b      	beq.n	8010f90 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010f7e:	695b      	ldr	r3, [r3, #20]
 8010f80:	687a      	ldr	r2, [r7, #4]
 8010f82:	7c12      	ldrb	r2, [r2, #16]
 8010f84:	f107 0108 	add.w	r1, r7, #8
 8010f88:	4610      	mov	r0, r2
 8010f8a:	4798      	blx	r3
 8010f8c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010f8e:	e029      	b.n	8010fe4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8010f90:	6839      	ldr	r1, [r7, #0]
 8010f92:	6878      	ldr	r0, [r7, #4]
 8010f94:	f000 fa42 	bl	801141c <USBD_CtlError>
        err++;
 8010f98:	7afb      	ldrb	r3, [r7, #11]
 8010f9a:	3301      	adds	r3, #1
 8010f9c:	72fb      	strb	r3, [r7, #11]
      break;
 8010f9e:	e021      	b.n	8010fe4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010fa6:	699b      	ldr	r3, [r3, #24]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d00b      	beq.n	8010fc4 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010fb2:	699b      	ldr	r3, [r3, #24]
 8010fb4:	687a      	ldr	r2, [r7, #4]
 8010fb6:	7c12      	ldrb	r2, [r2, #16]
 8010fb8:	f107 0108 	add.w	r1, r7, #8
 8010fbc:	4610      	mov	r0, r2
 8010fbe:	4798      	blx	r3
 8010fc0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010fc2:	e00f      	b.n	8010fe4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8010fc4:	6839      	ldr	r1, [r7, #0]
 8010fc6:	6878      	ldr	r0, [r7, #4]
 8010fc8:	f000 fa28 	bl	801141c <USBD_CtlError>
        err++;
 8010fcc:	7afb      	ldrb	r3, [r7, #11]
 8010fce:	3301      	adds	r3, #1
 8010fd0:	72fb      	strb	r3, [r7, #11]
      break;
 8010fd2:	e007      	b.n	8010fe4 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8010fd4:	6839      	ldr	r1, [r7, #0]
 8010fd6:	6878      	ldr	r0, [r7, #4]
 8010fd8:	f000 fa20 	bl	801141c <USBD_CtlError>
      err++;
 8010fdc:	7afb      	ldrb	r3, [r7, #11]
 8010fde:	3301      	adds	r3, #1
 8010fe0:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8010fe2:	bf00      	nop
    }
    break;
 8010fe4:	e037      	b.n	8011056 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	7c1b      	ldrb	r3, [r3, #16]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d109      	bne.n	8011002 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ff6:	f107 0208 	add.w	r2, r7, #8
 8010ffa:	4610      	mov	r0, r2
 8010ffc:	4798      	blx	r3
 8010ffe:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8011000:	e029      	b.n	8011056 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8011002:	6839      	ldr	r1, [r7, #0]
 8011004:	6878      	ldr	r0, [r7, #4]
 8011006:	f000 fa09 	bl	801141c <USBD_CtlError>
      err++;
 801100a:	7afb      	ldrb	r3, [r7, #11]
 801100c:	3301      	adds	r3, #1
 801100e:	72fb      	strb	r3, [r7, #11]
    break;
 8011010:	e021      	b.n	8011056 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	7c1b      	ldrb	r3, [r3, #16]
 8011016:	2b00      	cmp	r3, #0
 8011018:	d10d      	bne.n	8011036 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011022:	f107 0208 	add.w	r2, r7, #8
 8011026:	4610      	mov	r0, r2
 8011028:	4798      	blx	r3
 801102a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	3301      	adds	r3, #1
 8011030:	2207      	movs	r2, #7
 8011032:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8011034:	e00f      	b.n	8011056 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8011036:	6839      	ldr	r1, [r7, #0]
 8011038:	6878      	ldr	r0, [r7, #4]
 801103a:	f000 f9ef 	bl	801141c <USBD_CtlError>
      err++;
 801103e:	7afb      	ldrb	r3, [r7, #11]
 8011040:	3301      	adds	r3, #1
 8011042:	72fb      	strb	r3, [r7, #11]
    break;
 8011044:	e007      	b.n	8011056 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8011046:	6839      	ldr	r1, [r7, #0]
 8011048:	6878      	ldr	r0, [r7, #4]
 801104a:	f000 f9e7 	bl	801141c <USBD_CtlError>
    err++;
 801104e:	7afb      	ldrb	r3, [r7, #11]
 8011050:	3301      	adds	r3, #1
 8011052:	72fb      	strb	r3, [r7, #11]
    break;
 8011054:	bf00      	nop
  }

  if (err != 0U)
 8011056:	7afb      	ldrb	r3, [r7, #11]
 8011058:	2b00      	cmp	r3, #0
 801105a:	d11e      	bne.n	801109a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 801105c:	683b      	ldr	r3, [r7, #0]
 801105e:	88db      	ldrh	r3, [r3, #6]
 8011060:	2b00      	cmp	r3, #0
 8011062:	d016      	beq.n	8011092 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8011064:	893b      	ldrh	r3, [r7, #8]
 8011066:	2b00      	cmp	r3, #0
 8011068:	d00e      	beq.n	8011088 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 801106a:	683b      	ldr	r3, [r7, #0]
 801106c:	88da      	ldrh	r2, [r3, #6]
 801106e:	893b      	ldrh	r3, [r7, #8]
 8011070:	4293      	cmp	r3, r2
 8011072:	bf28      	it	cs
 8011074:	4613      	movcs	r3, r2
 8011076:	b29b      	uxth	r3, r3
 8011078:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 801107a:	893b      	ldrh	r3, [r7, #8]
 801107c:	461a      	mov	r2, r3
 801107e:	68f9      	ldr	r1, [r7, #12]
 8011080:	6878      	ldr	r0, [r7, #4]
 8011082:	f000 fa3c 	bl	80114fe <USBD_CtlSendData>
 8011086:	e009      	b.n	801109c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8011088:	6839      	ldr	r1, [r7, #0]
 801108a:	6878      	ldr	r0, [r7, #4]
 801108c:	f000 f9c6 	bl	801141c <USBD_CtlError>
 8011090:	e004      	b.n	801109c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8011092:	6878      	ldr	r0, [r7, #4]
 8011094:	f000 fa8d 	bl	80115b2 <USBD_CtlSendStatus>
 8011098:	e000      	b.n	801109c <USBD_GetDescriptor+0x2cc>
    return;
 801109a:	bf00      	nop
    }
  }
}
 801109c:	3710      	adds	r7, #16
 801109e:	46bd      	mov	sp, r7
 80110a0:	bd80      	pop	{r7, pc}
 80110a2:	bf00      	nop

080110a4 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80110a4:	b580      	push	{r7, lr}
 80110a6:	b084      	sub	sp, #16
 80110a8:	af00      	add	r7, sp, #0
 80110aa:	6078      	str	r0, [r7, #4]
 80110ac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80110ae:	683b      	ldr	r3, [r7, #0]
 80110b0:	889b      	ldrh	r3, [r3, #4]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d130      	bne.n	8011118 <USBD_SetAddress+0x74>
 80110b6:	683b      	ldr	r3, [r7, #0]
 80110b8:	88db      	ldrh	r3, [r3, #6]
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d12c      	bne.n	8011118 <USBD_SetAddress+0x74>
 80110be:	683b      	ldr	r3, [r7, #0]
 80110c0:	885b      	ldrh	r3, [r3, #2]
 80110c2:	2b7f      	cmp	r3, #127	; 0x7f
 80110c4:	d828      	bhi.n	8011118 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80110c6:	683b      	ldr	r3, [r7, #0]
 80110c8:	885b      	ldrh	r3, [r3, #2]
 80110ca:	b2db      	uxtb	r3, r3
 80110cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80110d0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80110d8:	2b03      	cmp	r3, #3
 80110da:	d104      	bne.n	80110e6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80110dc:	6839      	ldr	r1, [r7, #0]
 80110de:	6878      	ldr	r0, [r7, #4]
 80110e0:	f000 f99c 	bl	801141c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80110e4:	e01c      	b.n	8011120 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	7bfa      	ldrb	r2, [r7, #15]
 80110ea:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80110ee:	7bfb      	ldrb	r3, [r7, #15]
 80110f0:	4619      	mov	r1, r3
 80110f2:	6878      	ldr	r0, [r7, #4]
 80110f4:	f003 fd88 	bl	8014c08 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80110f8:	6878      	ldr	r0, [r7, #4]
 80110fa:	f000 fa5a 	bl	80115b2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80110fe:	7bfb      	ldrb	r3, [r7, #15]
 8011100:	2b00      	cmp	r3, #0
 8011102:	d004      	beq.n	801110e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	2202      	movs	r2, #2
 8011108:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801110c:	e008      	b.n	8011120 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	2201      	movs	r2, #1
 8011112:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011116:	e003      	b.n	8011120 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011118:	6839      	ldr	r1, [r7, #0]
 801111a:	6878      	ldr	r0, [r7, #4]
 801111c:	f000 f97e 	bl	801141c <USBD_CtlError>
  }
}
 8011120:	bf00      	nop
 8011122:	3710      	adds	r7, #16
 8011124:	46bd      	mov	sp, r7
 8011126:	bd80      	pop	{r7, pc}

08011128 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011128:	b580      	push	{r7, lr}
 801112a:	b084      	sub	sp, #16
 801112c:	af00      	add	r7, sp, #0
 801112e:	6078      	str	r0, [r7, #4]
 8011130:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011132:	2300      	movs	r3, #0
 8011134:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8011136:	683b      	ldr	r3, [r7, #0]
 8011138:	885b      	ldrh	r3, [r3, #2]
 801113a:	b2da      	uxtb	r2, r3
 801113c:	4b4b      	ldr	r3, [pc, #300]	; (801126c <USBD_SetConfig+0x144>)
 801113e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8011140:	4b4a      	ldr	r3, [pc, #296]	; (801126c <USBD_SetConfig+0x144>)
 8011142:	781b      	ldrb	r3, [r3, #0]
 8011144:	2b01      	cmp	r3, #1
 8011146:	d905      	bls.n	8011154 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8011148:	6839      	ldr	r1, [r7, #0]
 801114a:	6878      	ldr	r0, [r7, #4]
 801114c:	f000 f966 	bl	801141c <USBD_CtlError>
    return USBD_FAIL;
 8011150:	2303      	movs	r3, #3
 8011152:	e087      	b.n	8011264 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801115a:	2b02      	cmp	r3, #2
 801115c:	d002      	beq.n	8011164 <USBD_SetConfig+0x3c>
 801115e:	2b03      	cmp	r3, #3
 8011160:	d025      	beq.n	80111ae <USBD_SetConfig+0x86>
 8011162:	e071      	b.n	8011248 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8011164:	4b41      	ldr	r3, [pc, #260]	; (801126c <USBD_SetConfig+0x144>)
 8011166:	781b      	ldrb	r3, [r3, #0]
 8011168:	2b00      	cmp	r3, #0
 801116a:	d01c      	beq.n	80111a6 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 801116c:	4b3f      	ldr	r3, [pc, #252]	; (801126c <USBD_SetConfig+0x144>)
 801116e:	781b      	ldrb	r3, [r3, #0]
 8011170:	461a      	mov	r2, r3
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8011176:	4b3d      	ldr	r3, [pc, #244]	; (801126c <USBD_SetConfig+0x144>)
 8011178:	781b      	ldrb	r3, [r3, #0]
 801117a:	4619      	mov	r1, r3
 801117c:	6878      	ldr	r0, [r7, #4]
 801117e:	f7ff f9a7 	bl	80104d0 <USBD_SetClassConfig>
 8011182:	4603      	mov	r3, r0
 8011184:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8011186:	7bfb      	ldrb	r3, [r7, #15]
 8011188:	2b00      	cmp	r3, #0
 801118a:	d004      	beq.n	8011196 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 801118c:	6839      	ldr	r1, [r7, #0]
 801118e:	6878      	ldr	r0, [r7, #4]
 8011190:	f000 f944 	bl	801141c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8011194:	e065      	b.n	8011262 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8011196:	6878      	ldr	r0, [r7, #4]
 8011198:	f000 fa0b 	bl	80115b2 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	2203      	movs	r2, #3
 80111a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80111a4:	e05d      	b.n	8011262 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80111a6:	6878      	ldr	r0, [r7, #4]
 80111a8:	f000 fa03 	bl	80115b2 <USBD_CtlSendStatus>
    break;
 80111ac:	e059      	b.n	8011262 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 80111ae:	4b2f      	ldr	r3, [pc, #188]	; (801126c <USBD_SetConfig+0x144>)
 80111b0:	781b      	ldrb	r3, [r3, #0]
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d112      	bne.n	80111dc <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	2202      	movs	r2, #2
 80111ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80111be:	4b2b      	ldr	r3, [pc, #172]	; (801126c <USBD_SetConfig+0x144>)
 80111c0:	781b      	ldrb	r3, [r3, #0]
 80111c2:	461a      	mov	r2, r3
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80111c8:	4b28      	ldr	r3, [pc, #160]	; (801126c <USBD_SetConfig+0x144>)
 80111ca:	781b      	ldrb	r3, [r3, #0]
 80111cc:	4619      	mov	r1, r3
 80111ce:	6878      	ldr	r0, [r7, #4]
 80111d0:	f7ff f99a 	bl	8010508 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80111d4:	6878      	ldr	r0, [r7, #4]
 80111d6:	f000 f9ec 	bl	80115b2 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80111da:	e042      	b.n	8011262 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80111dc:	4b23      	ldr	r3, [pc, #140]	; (801126c <USBD_SetConfig+0x144>)
 80111de:	781b      	ldrb	r3, [r3, #0]
 80111e0:	461a      	mov	r2, r3
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	685b      	ldr	r3, [r3, #4]
 80111e6:	429a      	cmp	r2, r3
 80111e8:	d02a      	beq.n	8011240 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	685b      	ldr	r3, [r3, #4]
 80111ee:	b2db      	uxtb	r3, r3
 80111f0:	4619      	mov	r1, r3
 80111f2:	6878      	ldr	r0, [r7, #4]
 80111f4:	f7ff f988 	bl	8010508 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80111f8:	4b1c      	ldr	r3, [pc, #112]	; (801126c <USBD_SetConfig+0x144>)
 80111fa:	781b      	ldrb	r3, [r3, #0]
 80111fc:	461a      	mov	r2, r3
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8011202:	4b1a      	ldr	r3, [pc, #104]	; (801126c <USBD_SetConfig+0x144>)
 8011204:	781b      	ldrb	r3, [r3, #0]
 8011206:	4619      	mov	r1, r3
 8011208:	6878      	ldr	r0, [r7, #4]
 801120a:	f7ff f961 	bl	80104d0 <USBD_SetClassConfig>
 801120e:	4603      	mov	r3, r0
 8011210:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8011212:	7bfb      	ldrb	r3, [r7, #15]
 8011214:	2b00      	cmp	r3, #0
 8011216:	d00f      	beq.n	8011238 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8011218:	6839      	ldr	r1, [r7, #0]
 801121a:	6878      	ldr	r0, [r7, #4]
 801121c:	f000 f8fe 	bl	801141c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	685b      	ldr	r3, [r3, #4]
 8011224:	b2db      	uxtb	r3, r3
 8011226:	4619      	mov	r1, r3
 8011228:	6878      	ldr	r0, [r7, #4]
 801122a:	f7ff f96d 	bl	8010508 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	2202      	movs	r2, #2
 8011232:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8011236:	e014      	b.n	8011262 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8011238:	6878      	ldr	r0, [r7, #4]
 801123a:	f000 f9ba 	bl	80115b2 <USBD_CtlSendStatus>
    break;
 801123e:	e010      	b.n	8011262 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8011240:	6878      	ldr	r0, [r7, #4]
 8011242:	f000 f9b6 	bl	80115b2 <USBD_CtlSendStatus>
    break;
 8011246:	e00c      	b.n	8011262 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8011248:	6839      	ldr	r1, [r7, #0]
 801124a:	6878      	ldr	r0, [r7, #4]
 801124c:	f000 f8e6 	bl	801141c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011250:	4b06      	ldr	r3, [pc, #24]	; (801126c <USBD_SetConfig+0x144>)
 8011252:	781b      	ldrb	r3, [r3, #0]
 8011254:	4619      	mov	r1, r3
 8011256:	6878      	ldr	r0, [r7, #4]
 8011258:	f7ff f956 	bl	8010508 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 801125c:	2303      	movs	r3, #3
 801125e:	73fb      	strb	r3, [r7, #15]
    break;
 8011260:	bf00      	nop
  }

  return ret;
 8011262:	7bfb      	ldrb	r3, [r7, #15]
}
 8011264:	4618      	mov	r0, r3
 8011266:	3710      	adds	r7, #16
 8011268:	46bd      	mov	sp, r7
 801126a:	bd80      	pop	{r7, pc}
 801126c:	20002860 	.word	0x20002860

08011270 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011270:	b580      	push	{r7, lr}
 8011272:	b082      	sub	sp, #8
 8011274:	af00      	add	r7, sp, #0
 8011276:	6078      	str	r0, [r7, #4]
 8011278:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801127a:	683b      	ldr	r3, [r7, #0]
 801127c:	88db      	ldrh	r3, [r3, #6]
 801127e:	2b01      	cmp	r3, #1
 8011280:	d004      	beq.n	801128c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8011282:	6839      	ldr	r1, [r7, #0]
 8011284:	6878      	ldr	r0, [r7, #4]
 8011286:	f000 f8c9 	bl	801141c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 801128a:	e021      	b.n	80112d0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011292:	2b01      	cmp	r3, #1
 8011294:	db17      	blt.n	80112c6 <USBD_GetConfig+0x56>
 8011296:	2b02      	cmp	r3, #2
 8011298:	dd02      	ble.n	80112a0 <USBD_GetConfig+0x30>
 801129a:	2b03      	cmp	r3, #3
 801129c:	d00b      	beq.n	80112b6 <USBD_GetConfig+0x46>
 801129e:	e012      	b.n	80112c6 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	2200      	movs	r2, #0
 80112a4:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	3308      	adds	r3, #8
 80112aa:	2201      	movs	r2, #1
 80112ac:	4619      	mov	r1, r3
 80112ae:	6878      	ldr	r0, [r7, #4]
 80112b0:	f000 f925 	bl	80114fe <USBD_CtlSendData>
      break;
 80112b4:	e00c      	b.n	80112d0 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	3304      	adds	r3, #4
 80112ba:	2201      	movs	r2, #1
 80112bc:	4619      	mov	r1, r3
 80112be:	6878      	ldr	r0, [r7, #4]
 80112c0:	f000 f91d 	bl	80114fe <USBD_CtlSendData>
      break;
 80112c4:	e004      	b.n	80112d0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 80112c6:	6839      	ldr	r1, [r7, #0]
 80112c8:	6878      	ldr	r0, [r7, #4]
 80112ca:	f000 f8a7 	bl	801141c <USBD_CtlError>
      break;
 80112ce:	bf00      	nop
}
 80112d0:	bf00      	nop
 80112d2:	3708      	adds	r7, #8
 80112d4:	46bd      	mov	sp, r7
 80112d6:	bd80      	pop	{r7, pc}

080112d8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80112d8:	b580      	push	{r7, lr}
 80112da:	b082      	sub	sp, #8
 80112dc:	af00      	add	r7, sp, #0
 80112de:	6078      	str	r0, [r7, #4]
 80112e0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80112e8:	3b01      	subs	r3, #1
 80112ea:	2b02      	cmp	r3, #2
 80112ec:	d81e      	bhi.n	801132c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80112ee:	683b      	ldr	r3, [r7, #0]
 80112f0:	88db      	ldrh	r3, [r3, #6]
 80112f2:	2b02      	cmp	r3, #2
 80112f4:	d004      	beq.n	8011300 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80112f6:	6839      	ldr	r1, [r7, #0]
 80112f8:	6878      	ldr	r0, [r7, #4]
 80112fa:	f000 f88f 	bl	801141c <USBD_CtlError>
      break;
 80112fe:	e01a      	b.n	8011336 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	2201      	movs	r2, #1
 8011304:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801130c:	2b00      	cmp	r3, #0
 801130e:	d005      	beq.n	801131c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	68db      	ldr	r3, [r3, #12]
 8011314:	f043 0202 	orr.w	r2, r3, #2
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	330c      	adds	r3, #12
 8011320:	2202      	movs	r2, #2
 8011322:	4619      	mov	r1, r3
 8011324:	6878      	ldr	r0, [r7, #4]
 8011326:	f000 f8ea 	bl	80114fe <USBD_CtlSendData>
    break;
 801132a:	e004      	b.n	8011336 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 801132c:	6839      	ldr	r1, [r7, #0]
 801132e:	6878      	ldr	r0, [r7, #4]
 8011330:	f000 f874 	bl	801141c <USBD_CtlError>
    break;
 8011334:	bf00      	nop
  }
}
 8011336:	bf00      	nop
 8011338:	3708      	adds	r7, #8
 801133a:	46bd      	mov	sp, r7
 801133c:	bd80      	pop	{r7, pc}

0801133e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801133e:	b580      	push	{r7, lr}
 8011340:	b082      	sub	sp, #8
 8011342:	af00      	add	r7, sp, #0
 8011344:	6078      	str	r0, [r7, #4]
 8011346:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011348:	683b      	ldr	r3, [r7, #0]
 801134a:	885b      	ldrh	r3, [r3, #2]
 801134c:	2b01      	cmp	r3, #1
 801134e:	d106      	bne.n	801135e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	2201      	movs	r2, #1
 8011354:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8011358:	6878      	ldr	r0, [r7, #4]
 801135a:	f000 f92a 	bl	80115b2 <USBD_CtlSendStatus>
  }
}
 801135e:	bf00      	nop
 8011360:	3708      	adds	r7, #8
 8011362:	46bd      	mov	sp, r7
 8011364:	bd80      	pop	{r7, pc}

08011366 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011366:	b580      	push	{r7, lr}
 8011368:	b082      	sub	sp, #8
 801136a:	af00      	add	r7, sp, #0
 801136c:	6078      	str	r0, [r7, #4]
 801136e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011376:	3b01      	subs	r3, #1
 8011378:	2b02      	cmp	r3, #2
 801137a:	d80b      	bhi.n	8011394 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801137c:	683b      	ldr	r3, [r7, #0]
 801137e:	885b      	ldrh	r3, [r3, #2]
 8011380:	2b01      	cmp	r3, #1
 8011382:	d10c      	bne.n	801139e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	2200      	movs	r2, #0
 8011388:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801138c:	6878      	ldr	r0, [r7, #4]
 801138e:	f000 f910 	bl	80115b2 <USBD_CtlSendStatus>
      }
      break;
 8011392:	e004      	b.n	801139e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8011394:	6839      	ldr	r1, [r7, #0]
 8011396:	6878      	ldr	r0, [r7, #4]
 8011398:	f000 f840 	bl	801141c <USBD_CtlError>
      break;
 801139c:	e000      	b.n	80113a0 <USBD_ClrFeature+0x3a>
      break;
 801139e:	bf00      	nop
  }
}
 80113a0:	bf00      	nop
 80113a2:	3708      	adds	r7, #8
 80113a4:	46bd      	mov	sp, r7
 80113a6:	bd80      	pop	{r7, pc}

080113a8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80113a8:	b580      	push	{r7, lr}
 80113aa:	b084      	sub	sp, #16
 80113ac:	af00      	add	r7, sp, #0
 80113ae:	6078      	str	r0, [r7, #4]
 80113b0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80113b2:	683b      	ldr	r3, [r7, #0]
 80113b4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	781a      	ldrb	r2, [r3, #0]
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80113be:	68fb      	ldr	r3, [r7, #12]
 80113c0:	3301      	adds	r3, #1
 80113c2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	781a      	ldrb	r2, [r3, #0]
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	3301      	adds	r3, #1
 80113d0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80113d2:	68f8      	ldr	r0, [r7, #12]
 80113d4:	f7ff fad3 	bl	801097e <SWAPBYTE>
 80113d8:	4603      	mov	r3, r0
 80113da:	461a      	mov	r2, r3
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	3301      	adds	r3, #1
 80113e4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	3301      	adds	r3, #1
 80113ea:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80113ec:	68f8      	ldr	r0, [r7, #12]
 80113ee:	f7ff fac6 	bl	801097e <SWAPBYTE>
 80113f2:	4603      	mov	r3, r0
 80113f4:	461a      	mov	r2, r3
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	3301      	adds	r3, #1
 80113fe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	3301      	adds	r3, #1
 8011404:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8011406:	68f8      	ldr	r0, [r7, #12]
 8011408:	f7ff fab9 	bl	801097e <SWAPBYTE>
 801140c:	4603      	mov	r3, r0
 801140e:	461a      	mov	r2, r3
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	80da      	strh	r2, [r3, #6]
}
 8011414:	bf00      	nop
 8011416:	3710      	adds	r7, #16
 8011418:	46bd      	mov	sp, r7
 801141a:	bd80      	pop	{r7, pc}

0801141c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801141c:	b580      	push	{r7, lr}
 801141e:	b082      	sub	sp, #8
 8011420:	af00      	add	r7, sp, #0
 8011422:	6078      	str	r0, [r7, #4]
 8011424:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8011426:	2180      	movs	r1, #128	; 0x80
 8011428:	6878      	ldr	r0, [r7, #4]
 801142a:	f003 fb83 	bl	8014b34 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801142e:	2100      	movs	r1, #0
 8011430:	6878      	ldr	r0, [r7, #4]
 8011432:	f003 fb7f 	bl	8014b34 <USBD_LL_StallEP>
}
 8011436:	bf00      	nop
 8011438:	3708      	adds	r7, #8
 801143a:	46bd      	mov	sp, r7
 801143c:	bd80      	pop	{r7, pc}

0801143e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801143e:	b580      	push	{r7, lr}
 8011440:	b086      	sub	sp, #24
 8011442:	af00      	add	r7, sp, #0
 8011444:	60f8      	str	r0, [r7, #12]
 8011446:	60b9      	str	r1, [r7, #8]
 8011448:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801144a:	2300      	movs	r3, #0
 801144c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	2b00      	cmp	r3, #0
 8011452:	d036      	beq.n	80114c2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8011458:	6938      	ldr	r0, [r7, #16]
 801145a:	f000 f836 	bl	80114ca <USBD_GetLen>
 801145e:	4603      	mov	r3, r0
 8011460:	3301      	adds	r3, #1
 8011462:	b29b      	uxth	r3, r3
 8011464:	005b      	lsls	r3, r3, #1
 8011466:	b29a      	uxth	r2, r3
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801146c:	7dfb      	ldrb	r3, [r7, #23]
 801146e:	68ba      	ldr	r2, [r7, #8]
 8011470:	4413      	add	r3, r2
 8011472:	687a      	ldr	r2, [r7, #4]
 8011474:	7812      	ldrb	r2, [r2, #0]
 8011476:	701a      	strb	r2, [r3, #0]
  idx++;
 8011478:	7dfb      	ldrb	r3, [r7, #23]
 801147a:	3301      	adds	r3, #1
 801147c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801147e:	7dfb      	ldrb	r3, [r7, #23]
 8011480:	68ba      	ldr	r2, [r7, #8]
 8011482:	4413      	add	r3, r2
 8011484:	2203      	movs	r2, #3
 8011486:	701a      	strb	r2, [r3, #0]
  idx++;
 8011488:	7dfb      	ldrb	r3, [r7, #23]
 801148a:	3301      	adds	r3, #1
 801148c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801148e:	e013      	b.n	80114b8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8011490:	7dfb      	ldrb	r3, [r7, #23]
 8011492:	68ba      	ldr	r2, [r7, #8]
 8011494:	4413      	add	r3, r2
 8011496:	693a      	ldr	r2, [r7, #16]
 8011498:	7812      	ldrb	r2, [r2, #0]
 801149a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801149c:	693b      	ldr	r3, [r7, #16]
 801149e:	3301      	adds	r3, #1
 80114a0:	613b      	str	r3, [r7, #16]
    idx++;
 80114a2:	7dfb      	ldrb	r3, [r7, #23]
 80114a4:	3301      	adds	r3, #1
 80114a6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80114a8:	7dfb      	ldrb	r3, [r7, #23]
 80114aa:	68ba      	ldr	r2, [r7, #8]
 80114ac:	4413      	add	r3, r2
 80114ae:	2200      	movs	r2, #0
 80114b0:	701a      	strb	r2, [r3, #0]
    idx++;
 80114b2:	7dfb      	ldrb	r3, [r7, #23]
 80114b4:	3301      	adds	r3, #1
 80114b6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80114b8:	693b      	ldr	r3, [r7, #16]
 80114ba:	781b      	ldrb	r3, [r3, #0]
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d1e7      	bne.n	8011490 <USBD_GetString+0x52>
 80114c0:	e000      	b.n	80114c4 <USBD_GetString+0x86>
    return;
 80114c2:	bf00      	nop
  }
}
 80114c4:	3718      	adds	r7, #24
 80114c6:	46bd      	mov	sp, r7
 80114c8:	bd80      	pop	{r7, pc}

080114ca <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80114ca:	b480      	push	{r7}
 80114cc:	b085      	sub	sp, #20
 80114ce:	af00      	add	r7, sp, #0
 80114d0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80114d2:	2300      	movs	r3, #0
 80114d4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80114da:	e005      	b.n	80114e8 <USBD_GetLen+0x1e>
  {
    len++;
 80114dc:	7bfb      	ldrb	r3, [r7, #15]
 80114de:	3301      	adds	r3, #1
 80114e0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80114e2:	68bb      	ldr	r3, [r7, #8]
 80114e4:	3301      	adds	r3, #1
 80114e6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80114e8:	68bb      	ldr	r3, [r7, #8]
 80114ea:	781b      	ldrb	r3, [r3, #0]
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d1f5      	bne.n	80114dc <USBD_GetLen+0x12>
  }

  return len;
 80114f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80114f2:	4618      	mov	r0, r3
 80114f4:	3714      	adds	r7, #20
 80114f6:	46bd      	mov	sp, r7
 80114f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114fc:	4770      	bx	lr

080114fe <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80114fe:	b580      	push	{r7, lr}
 8011500:	b084      	sub	sp, #16
 8011502:	af00      	add	r7, sp, #0
 8011504:	60f8      	str	r0, [r7, #12]
 8011506:	60b9      	str	r1, [r7, #8]
 8011508:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	2202      	movs	r2, #2
 801150e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	687a      	ldr	r2, [r7, #4]
 8011516:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	687a      	ldr	r2, [r7, #4]
 801151c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	68ba      	ldr	r2, [r7, #8]
 8011522:	2100      	movs	r1, #0
 8011524:	68f8      	ldr	r0, [r7, #12]
 8011526:	f003 fb8e 	bl	8014c46 <USBD_LL_Transmit>

  return USBD_OK;
 801152a:	2300      	movs	r3, #0
}
 801152c:	4618      	mov	r0, r3
 801152e:	3710      	adds	r7, #16
 8011530:	46bd      	mov	sp, r7
 8011532:	bd80      	pop	{r7, pc}

08011534 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8011534:	b580      	push	{r7, lr}
 8011536:	b084      	sub	sp, #16
 8011538:	af00      	add	r7, sp, #0
 801153a:	60f8      	str	r0, [r7, #12]
 801153c:	60b9      	str	r1, [r7, #8]
 801153e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	68ba      	ldr	r2, [r7, #8]
 8011544:	2100      	movs	r1, #0
 8011546:	68f8      	ldr	r0, [r7, #12]
 8011548:	f003 fb7d 	bl	8014c46 <USBD_LL_Transmit>

  return USBD_OK;
 801154c:	2300      	movs	r3, #0
}
 801154e:	4618      	mov	r0, r3
 8011550:	3710      	adds	r7, #16
 8011552:	46bd      	mov	sp, r7
 8011554:	bd80      	pop	{r7, pc}

08011556 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8011556:	b580      	push	{r7, lr}
 8011558:	b084      	sub	sp, #16
 801155a:	af00      	add	r7, sp, #0
 801155c:	60f8      	str	r0, [r7, #12]
 801155e:	60b9      	str	r1, [r7, #8]
 8011560:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	2203      	movs	r2, #3
 8011566:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	687a      	ldr	r2, [r7, #4]
 801156e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	687a      	ldr	r2, [r7, #4]
 8011576:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	68ba      	ldr	r2, [r7, #8]
 801157e:	2100      	movs	r1, #0
 8011580:	68f8      	ldr	r0, [r7, #12]
 8011582:	f003 fb81 	bl	8014c88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011586:	2300      	movs	r3, #0
}
 8011588:	4618      	mov	r0, r3
 801158a:	3710      	adds	r7, #16
 801158c:	46bd      	mov	sp, r7
 801158e:	bd80      	pop	{r7, pc}

08011590 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8011590:	b580      	push	{r7, lr}
 8011592:	b084      	sub	sp, #16
 8011594:	af00      	add	r7, sp, #0
 8011596:	60f8      	str	r0, [r7, #12]
 8011598:	60b9      	str	r1, [r7, #8]
 801159a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	68ba      	ldr	r2, [r7, #8]
 80115a0:	2100      	movs	r1, #0
 80115a2:	68f8      	ldr	r0, [r7, #12]
 80115a4:	f003 fb70 	bl	8014c88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80115a8:	2300      	movs	r3, #0
}
 80115aa:	4618      	mov	r0, r3
 80115ac:	3710      	adds	r7, #16
 80115ae:	46bd      	mov	sp, r7
 80115b0:	bd80      	pop	{r7, pc}

080115b2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80115b2:	b580      	push	{r7, lr}
 80115b4:	b082      	sub	sp, #8
 80115b6:	af00      	add	r7, sp, #0
 80115b8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	2204      	movs	r2, #4
 80115be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80115c2:	2300      	movs	r3, #0
 80115c4:	2200      	movs	r2, #0
 80115c6:	2100      	movs	r1, #0
 80115c8:	6878      	ldr	r0, [r7, #4]
 80115ca:	f003 fb3c 	bl	8014c46 <USBD_LL_Transmit>

  return USBD_OK;
 80115ce:	2300      	movs	r3, #0
}
 80115d0:	4618      	mov	r0, r3
 80115d2:	3708      	adds	r7, #8
 80115d4:	46bd      	mov	sp, r7
 80115d6:	bd80      	pop	{r7, pc}

080115d8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80115d8:	b580      	push	{r7, lr}
 80115da:	b082      	sub	sp, #8
 80115dc:	af00      	add	r7, sp, #0
 80115de:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	2205      	movs	r2, #5
 80115e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80115e8:	2300      	movs	r3, #0
 80115ea:	2200      	movs	r2, #0
 80115ec:	2100      	movs	r1, #0
 80115ee:	6878      	ldr	r0, [r7, #4]
 80115f0:	f003 fb4a 	bl	8014c88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80115f4:	2300      	movs	r3, #0
}
 80115f6:	4618      	mov	r0, r3
 80115f8:	3708      	adds	r7, #8
 80115fa:	46bd      	mov	sp, r7
 80115fc:	bd80      	pop	{r7, pc}

080115fe <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80115fe:	b480      	push	{r7}
 8011600:	b085      	sub	sp, #20
 8011602:	af00      	add	r7, sp, #0
 8011604:	4603      	mov	r3, r0
 8011606:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8011608:	2300      	movs	r3, #0
 801160a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 801160c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011610:	2b84      	cmp	r3, #132	; 0x84
 8011612:	d005      	beq.n	8011620 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8011614:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	4413      	add	r3, r2
 801161c:	3303      	adds	r3, #3
 801161e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8011620:	68fb      	ldr	r3, [r7, #12]
}
 8011622:	4618      	mov	r0, r3
 8011624:	3714      	adds	r7, #20
 8011626:	46bd      	mov	sp, r7
 8011628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801162c:	4770      	bx	lr

0801162e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 801162e:	b480      	push	{r7}
 8011630:	b083      	sub	sp, #12
 8011632:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011634:	f3ef 8305 	mrs	r3, IPSR
 8011638:	607b      	str	r3, [r7, #4]
  return(result);
 801163a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 801163c:	2b00      	cmp	r3, #0
 801163e:	bf14      	ite	ne
 8011640:	2301      	movne	r3, #1
 8011642:	2300      	moveq	r3, #0
 8011644:	b2db      	uxtb	r3, r3
}
 8011646:	4618      	mov	r0, r3
 8011648:	370c      	adds	r7, #12
 801164a:	46bd      	mov	sp, r7
 801164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011650:	4770      	bx	lr

08011652 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8011652:	b580      	push	{r7, lr}
 8011654:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8011656:	f001 fb31 	bl	8012cbc <vTaskStartScheduler>
  
  return osOK;
 801165a:	2300      	movs	r3, #0
}
 801165c:	4618      	mov	r0, r3
 801165e:	bd80      	pop	{r7, pc}

08011660 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8011660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011662:	b089      	sub	sp, #36	; 0x24
 8011664:	af04      	add	r7, sp, #16
 8011666:	6078      	str	r0, [r7, #4]
 8011668:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	695b      	ldr	r3, [r3, #20]
 801166e:	2b00      	cmp	r3, #0
 8011670:	d020      	beq.n	80116b4 <osThreadCreate+0x54>
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	699b      	ldr	r3, [r3, #24]
 8011676:	2b00      	cmp	r3, #0
 8011678:	d01c      	beq.n	80116b4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	685c      	ldr	r4, [r3, #4]
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	681d      	ldr	r5, [r3, #0]
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	691e      	ldr	r6, [r3, #16]
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801168c:	4618      	mov	r0, r3
 801168e:	f7ff ffb6 	bl	80115fe <makeFreeRtosPriority>
 8011692:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	695b      	ldr	r3, [r3, #20]
 8011698:	687a      	ldr	r2, [r7, #4]
 801169a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801169c:	9202      	str	r2, [sp, #8]
 801169e:	9301      	str	r3, [sp, #4]
 80116a0:	9100      	str	r1, [sp, #0]
 80116a2:	683b      	ldr	r3, [r7, #0]
 80116a4:	4632      	mov	r2, r6
 80116a6:	4629      	mov	r1, r5
 80116a8:	4620      	mov	r0, r4
 80116aa:	f001 f944 	bl	8012936 <xTaskCreateStatic>
 80116ae:	4603      	mov	r3, r0
 80116b0:	60fb      	str	r3, [r7, #12]
 80116b2:	e01c      	b.n	80116ee <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	685c      	ldr	r4, [r3, #4]
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80116c0:	b29e      	uxth	r6, r3
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80116c8:	4618      	mov	r0, r3
 80116ca:	f7ff ff98 	bl	80115fe <makeFreeRtosPriority>
 80116ce:	4602      	mov	r2, r0
 80116d0:	f107 030c 	add.w	r3, r7, #12
 80116d4:	9301      	str	r3, [sp, #4]
 80116d6:	9200      	str	r2, [sp, #0]
 80116d8:	683b      	ldr	r3, [r7, #0]
 80116da:	4632      	mov	r2, r6
 80116dc:	4629      	mov	r1, r5
 80116de:	4620      	mov	r0, r4
 80116e0:	f001 f983 	bl	80129ea <xTaskCreate>
 80116e4:	4603      	mov	r3, r0
 80116e6:	2b01      	cmp	r3, #1
 80116e8:	d001      	beq.n	80116ee <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80116ea:	2300      	movs	r3, #0
 80116ec:	e000      	b.n	80116f0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80116ee:	68fb      	ldr	r3, [r7, #12]
}
 80116f0:	4618      	mov	r0, r3
 80116f2:	3714      	adds	r7, #20
 80116f4:	46bd      	mov	sp, r7
 80116f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080116f8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80116f8:	b580      	push	{r7, lr}
 80116fa:	b084      	sub	sp, #16
 80116fc:	af00      	add	r7, sp, #0
 80116fe:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	2b00      	cmp	r3, #0
 8011708:	d001      	beq.n	801170e <osDelay+0x16>
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	e000      	b.n	8011710 <osDelay+0x18>
 801170e:	2301      	movs	r3, #1
 8011710:	4618      	mov	r0, r3
 8011712:	f001 fa9f 	bl	8012c54 <vTaskDelay>
  
  return osOK;
 8011716:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8011718:	4618      	mov	r0, r3
 801171a:	3710      	adds	r7, #16
 801171c:	46bd      	mov	sp, r7
 801171e:	bd80      	pop	{r7, pc}

08011720 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8011720:	b580      	push	{r7, lr}
 8011722:	b086      	sub	sp, #24
 8011724:	af02      	add	r7, sp, #8
 8011726:	6078      	str	r0, [r7, #4]
 8011728:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801172a:	2300      	movs	r3, #0
 801172c:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 801172e:	2300      	movs	r3, #0
 8011730:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8011732:	f7ff ff7c 	bl	801162e <inHandlerMode>
 8011736:	4603      	mov	r3, r0
 8011738:	2b00      	cmp	r3, #0
 801173a:	d01c      	beq.n	8011776 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 801173c:	6839      	ldr	r1, [r7, #0]
 801173e:	f107 0208 	add.w	r2, r7, #8
 8011742:	f107 030c 	add.w	r3, r7, #12
 8011746:	9300      	str	r3, [sp, #0]
 8011748:	4613      	mov	r3, r2
 801174a:	2201      	movs	r2, #1
 801174c:	6878      	ldr	r0, [r7, #4]
 801174e:	f002 f857 	bl	8013800 <xTaskGenericNotifyFromISR>
 8011752:	4603      	mov	r3, r0
 8011754:	2b01      	cmp	r3, #1
 8011756:	d002      	beq.n	801175e <osSignalSet+0x3e>
      return 0x80000000;
 8011758:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801175c:	e019      	b.n	8011792 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	2b00      	cmp	r3, #0
 8011762:	d015      	beq.n	8011790 <osSignalSet+0x70>
 8011764:	4b0d      	ldr	r3, [pc, #52]	; (801179c <osSignalSet+0x7c>)
 8011766:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801176a:	601a      	str	r2, [r3, #0]
 801176c:	f3bf 8f4f 	dsb	sy
 8011770:	f3bf 8f6f 	isb	sy
 8011774:	e00c      	b.n	8011790 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8011776:	6839      	ldr	r1, [r7, #0]
 8011778:	f107 0308 	add.w	r3, r7, #8
 801177c:	2201      	movs	r2, #1
 801177e:	6878      	ldr	r0, [r7, #4]
 8011780:	f001 ff8c 	bl	801369c <xTaskGenericNotify>
 8011784:	4603      	mov	r3, r0
 8011786:	2b01      	cmp	r3, #1
 8011788:	d002      	beq.n	8011790 <osSignalSet+0x70>
    return 0x80000000;
 801178a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801178e:	e000      	b.n	8011792 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8011790:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8011792:	4618      	mov	r0, r3
 8011794:	3710      	adds	r7, #16
 8011796:	46bd      	mov	sp, r7
 8011798:	bd80      	pop	{r7, pc}
 801179a:	bf00      	nop
 801179c:	e000ed04 	.word	0xe000ed04

080117a0 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 80117a0:	b590      	push	{r4, r7, lr}
 80117a2:	b089      	sub	sp, #36	; 0x24
 80117a4:	af00      	add	r7, sp, #0
 80117a6:	60f8      	str	r0, [r7, #12]
 80117a8:	60b9      	str	r1, [r7, #8]
 80117aa:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 80117ac:	2300      	movs	r3, #0
 80117ae:	617b      	str	r3, [r7, #20]
  ticks = 0;
 80117b0:	2300      	movs	r3, #0
 80117b2:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117ba:	d103      	bne.n	80117c4 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 80117bc:	f04f 33ff 	mov.w	r3, #4294967295
 80117c0:	61fb      	str	r3, [r7, #28]
 80117c2:	e009      	b.n	80117d8 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d006      	beq.n	80117d8 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 80117ce:	69fb      	ldr	r3, [r7, #28]
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d101      	bne.n	80117d8 <osSignalWait+0x38>
      ticks = 1;
 80117d4:	2301      	movs	r3, #1
 80117d6:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 80117d8:	f7ff ff29 	bl	801162e <inHandlerMode>
 80117dc:	4603      	mov	r3, r0
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d002      	beq.n	80117e8 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 80117e2:	2382      	movs	r3, #130	; 0x82
 80117e4:	613b      	str	r3, [r7, #16]
 80117e6:	e01b      	b.n	8011820 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 80117e8:	68b9      	ldr	r1, [r7, #8]
 80117ea:	f107 0310 	add.w	r3, r7, #16
 80117ee:	1d1a      	adds	r2, r3, #4
 80117f0:	69fb      	ldr	r3, [r7, #28]
 80117f2:	2000      	movs	r0, #0
 80117f4:	f001 fef8 	bl	80135e8 <xTaskNotifyWait>
 80117f8:	4603      	mov	r3, r0
 80117fa:	2b01      	cmp	r3, #1
 80117fc:	d008      	beq.n	8011810 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 80117fe:	69fb      	ldr	r3, [r7, #28]
 8011800:	2b00      	cmp	r3, #0
 8011802:	d102      	bne.n	801180a <osSignalWait+0x6a>
 8011804:	2300      	movs	r3, #0
 8011806:	613b      	str	r3, [r7, #16]
 8011808:	e00a      	b.n	8011820 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 801180a:	2340      	movs	r3, #64	; 0x40
 801180c:	613b      	str	r3, [r7, #16]
 801180e:	e007      	b.n	8011820 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8011810:	697b      	ldr	r3, [r7, #20]
 8011812:	2b00      	cmp	r3, #0
 8011814:	da02      	bge.n	801181c <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8011816:	2386      	movs	r3, #134	; 0x86
 8011818:	613b      	str	r3, [r7, #16]
 801181a:	e001      	b.n	8011820 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 801181c:	2308      	movs	r3, #8
 801181e:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	461c      	mov	r4, r3
 8011824:	f107 0310 	add.w	r3, r7, #16
 8011828:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801182c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8011830:	68f8      	ldr	r0, [r7, #12]
 8011832:	3724      	adds	r7, #36	; 0x24
 8011834:	46bd      	mov	sp, r7
 8011836:	bd90      	pop	{r4, r7, pc}

08011838 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8011838:	b580      	push	{r7, lr}
 801183a:	b082      	sub	sp, #8
 801183c:	af00      	add	r7, sp, #0
 801183e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	685b      	ldr	r3, [r3, #4]
 8011844:	2b00      	cmp	r3, #0
 8011846:	d007      	beq.n	8011858 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	685b      	ldr	r3, [r3, #4]
 801184c:	4619      	mov	r1, r3
 801184e:	2001      	movs	r0, #1
 8011850:	f000 fc5f 	bl	8012112 <xQueueCreateMutexStatic>
 8011854:	4603      	mov	r3, r0
 8011856:	e003      	b.n	8011860 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8011858:	2001      	movs	r0, #1
 801185a:	f000 fc42 	bl	80120e2 <xQueueCreateMutex>
 801185e:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8011860:	4618      	mov	r0, r3
 8011862:	3708      	adds	r7, #8
 8011864:	46bd      	mov	sp, r7
 8011866:	bd80      	pop	{r7, pc}

08011868 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8011868:	b580      	push	{r7, lr}
 801186a:	b086      	sub	sp, #24
 801186c:	af00      	add	r7, sp, #0
 801186e:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	685b      	ldr	r3, [r3, #4]
 8011874:	3303      	adds	r3, #3
 8011876:	f023 0303 	bic.w	r3, r3, #3
 801187a:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 801187c:	2014      	movs	r0, #20
 801187e:	f002 fb3f 	bl	8013f00 <pvPortMalloc>
 8011882:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8011884:	697b      	ldr	r3, [r7, #20]
 8011886:	2b00      	cmp	r3, #0
 8011888:	d046      	beq.n	8011918 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	681a      	ldr	r2, [r3, #0]
 801188e:	697b      	ldr	r3, [r7, #20]
 8011890:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8011892:	68fa      	ldr	r2, [r7, #12]
 8011894:	697b      	ldr	r3, [r7, #20]
 8011896:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8011898:	697b      	ldr	r3, [r7, #20]
 801189a:	2200      	movs	r2, #0
 801189c:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	4618      	mov	r0, r3
 80118a4:	f002 fb2c 	bl	8013f00 <pvPortMalloc>
 80118a8:	4602      	mov	r2, r0
 80118aa:	697b      	ldr	r3, [r7, #20]
 80118ac:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 80118ae:	697b      	ldr	r3, [r7, #20]
 80118b0:	685b      	ldr	r3, [r3, #4]
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d02b      	beq.n	801190e <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	68fa      	ldr	r2, [r7, #12]
 80118bc:	fb02 f303 	mul.w	r3, r2, r3
 80118c0:	4618      	mov	r0, r3
 80118c2:	f002 fb1d 	bl	8013f00 <pvPortMalloc>
 80118c6:	4602      	mov	r2, r0
 80118c8:	697b      	ldr	r3, [r7, #20]
 80118ca:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 80118cc:	697b      	ldr	r3, [r7, #20]
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d011      	beq.n	80118f8 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 80118d4:	2300      	movs	r3, #0
 80118d6:	613b      	str	r3, [r7, #16]
 80118d8:	e008      	b.n	80118ec <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 80118da:	697b      	ldr	r3, [r7, #20]
 80118dc:	685a      	ldr	r2, [r3, #4]
 80118de:	693b      	ldr	r3, [r7, #16]
 80118e0:	4413      	add	r3, r2
 80118e2:	2200      	movs	r2, #0
 80118e4:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 80118e6:	693b      	ldr	r3, [r7, #16]
 80118e8:	3301      	adds	r3, #1
 80118ea:	613b      	str	r3, [r7, #16]
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	693a      	ldr	r2, [r7, #16]
 80118f2:	429a      	cmp	r2, r3
 80118f4:	d3f1      	bcc.n	80118da <osPoolCreate+0x72>
 80118f6:	e00f      	b.n	8011918 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 80118f8:	697b      	ldr	r3, [r7, #20]
 80118fa:	685b      	ldr	r3, [r3, #4]
 80118fc:	4618      	mov	r0, r3
 80118fe:	f002 fbc1 	bl	8014084 <vPortFree>
        vPortFree(thePool);
 8011902:	6978      	ldr	r0, [r7, #20]
 8011904:	f002 fbbe 	bl	8014084 <vPortFree>
        thePool = NULL;
 8011908:	2300      	movs	r3, #0
 801190a:	617b      	str	r3, [r7, #20]
 801190c:	e004      	b.n	8011918 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 801190e:	6978      	ldr	r0, [r7, #20]
 8011910:	f002 fbb8 	bl	8014084 <vPortFree>
      thePool = NULL;
 8011914:	2300      	movs	r3, #0
 8011916:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8011918:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 801191a:	4618      	mov	r0, r3
 801191c:	3718      	adds	r7, #24
 801191e:	46bd      	mov	sp, r7
 8011920:	bd80      	pop	{r7, pc}

08011922 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8011922:	b580      	push	{r7, lr}
 8011924:	b08a      	sub	sp, #40	; 0x28
 8011926:	af00      	add	r7, sp, #0
 8011928:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 801192a:	2300      	movs	r3, #0
 801192c:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 801192e:	2300      	movs	r3, #0
 8011930:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8011932:	f7ff fe7c 	bl	801162e <inHandlerMode>
 8011936:	4603      	mov	r3, r0
 8011938:	2b00      	cmp	r3, #0
 801193a:	d00e      	beq.n	801195a <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801193c:	f3ef 8211 	mrs	r2, BASEPRI
 8011940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011944:	f383 8811 	msr	BASEPRI, r3
 8011948:	f3bf 8f6f 	isb	sy
 801194c:	f3bf 8f4f 	dsb	sy
 8011950:	617a      	str	r2, [r7, #20]
 8011952:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011954:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8011956:	627b      	str	r3, [r7, #36]	; 0x24
 8011958:	e001      	b.n	801195e <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 801195a:	f002 f9b7 	bl	8013ccc <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 801195e:	2300      	movs	r3, #0
 8011960:	61fb      	str	r3, [r7, #28]
 8011962:	e029      	b.n	80119b8 <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	691a      	ldr	r2, [r3, #16]
 8011968:	69fb      	ldr	r3, [r7, #28]
 801196a:	4413      	add	r3, r2
 801196c:	687a      	ldr	r2, [r7, #4]
 801196e:	6892      	ldr	r2, [r2, #8]
 8011970:	fbb3 f1f2 	udiv	r1, r3, r2
 8011974:	fb02 f201 	mul.w	r2, r2, r1
 8011978:	1a9b      	subs	r3, r3, r2
 801197a:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	685a      	ldr	r2, [r3, #4]
 8011980:	69bb      	ldr	r3, [r7, #24]
 8011982:	4413      	add	r3, r2
 8011984:	781b      	ldrb	r3, [r3, #0]
 8011986:	2b00      	cmp	r3, #0
 8011988:	d113      	bne.n	80119b2 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	685a      	ldr	r2, [r3, #4]
 801198e:	69bb      	ldr	r3, [r7, #24]
 8011990:	4413      	add	r3, r2
 8011992:	2201      	movs	r2, #1
 8011994:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	4619      	mov	r1, r3
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	68db      	ldr	r3, [r3, #12]
 80119a0:	69ba      	ldr	r2, [r7, #24]
 80119a2:	fb02 f303 	mul.w	r3, r2, r3
 80119a6:	440b      	add	r3, r1
 80119a8:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	69ba      	ldr	r2, [r7, #24]
 80119ae:	611a      	str	r2, [r3, #16]
      break;
 80119b0:	e007      	b.n	80119c2 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 80119b2:	69fb      	ldr	r3, [r7, #28]
 80119b4:	3301      	adds	r3, #1
 80119b6:	61fb      	str	r3, [r7, #28]
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	689b      	ldr	r3, [r3, #8]
 80119bc:	69fa      	ldr	r2, [r7, #28]
 80119be:	429a      	cmp	r2, r3
 80119c0:	d3d0      	bcc.n	8011964 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 80119c2:	f7ff fe34 	bl	801162e <inHandlerMode>
 80119c6:	4603      	mov	r3, r0
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d005      	beq.n	80119d8 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 80119cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119ce:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	f383 8811 	msr	BASEPRI, r3
 80119d6:	e001      	b.n	80119dc <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 80119d8:	f002 f9a6 	bl	8013d28 <vPortExitCritical>
  }
  
  return p;
 80119dc:	6a3b      	ldr	r3, [r7, #32]
}
 80119de:	4618      	mov	r0, r3
 80119e0:	3728      	adds	r7, #40	; 0x28
 80119e2:	46bd      	mov	sp, r7
 80119e4:	bd80      	pop	{r7, pc}

080119e6 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 80119e6:	b480      	push	{r7}
 80119e8:	b085      	sub	sp, #20
 80119ea:	af00      	add	r7, sp, #0
 80119ec:	6078      	str	r0, [r7, #4]
 80119ee:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d101      	bne.n	80119fa <osPoolFree+0x14>
    return osErrorParameter;
 80119f6:	2380      	movs	r3, #128	; 0x80
 80119f8:	e030      	b.n	8011a5c <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 80119fa:	683b      	ldr	r3, [r7, #0]
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d101      	bne.n	8011a04 <osPoolFree+0x1e>
    return osErrorParameter;
 8011a00:	2380      	movs	r3, #128	; 0x80
 8011a02:	e02b      	b.n	8011a5c <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	683a      	ldr	r2, [r7, #0]
 8011a0a:	429a      	cmp	r2, r3
 8011a0c:	d201      	bcs.n	8011a12 <osPoolFree+0x2c>
    return osErrorParameter;
 8011a0e:	2380      	movs	r3, #128	; 0x80
 8011a10:	e024      	b.n	8011a5c <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8011a12:	683b      	ldr	r3, [r7, #0]
 8011a14:	687a      	ldr	r2, [r7, #4]
 8011a16:	6812      	ldr	r2, [r2, #0]
 8011a18:	1a9b      	subs	r3, r3, r2
 8011a1a:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	68da      	ldr	r2, [r3, #12]
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	fbb3 f1f2 	udiv	r1, r3, r2
 8011a26:	fb02 f201 	mul.w	r2, r2, r1
 8011a2a:	1a9b      	subs	r3, r3, r2
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d001      	beq.n	8011a34 <osPoolFree+0x4e>
    return osErrorParameter;
 8011a30:	2380      	movs	r3, #128	; 0x80
 8011a32:	e013      	b.n	8011a5c <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	68db      	ldr	r3, [r3, #12]
 8011a38:	68fa      	ldr	r2, [r7, #12]
 8011a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8011a3e:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	689b      	ldr	r3, [r3, #8]
 8011a44:	68fa      	ldr	r2, [r7, #12]
 8011a46:	429a      	cmp	r2, r3
 8011a48:	d301      	bcc.n	8011a4e <osPoolFree+0x68>
    return osErrorParameter;
 8011a4a:	2380      	movs	r3, #128	; 0x80
 8011a4c:	e006      	b.n	8011a5c <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	685a      	ldr	r2, [r3, #4]
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	4413      	add	r3, r2
 8011a56:	2200      	movs	r2, #0
 8011a58:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 8011a5a:	2300      	movs	r3, #0
}
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	3714      	adds	r7, #20
 8011a60:	46bd      	mov	sp, r7
 8011a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a66:	4770      	bx	lr

08011a68 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8011a68:	b590      	push	{r4, r7, lr}
 8011a6a:	b087      	sub	sp, #28
 8011a6c:	af00      	add	r7, sp, #0
 8011a6e:	6078      	str	r0, [r7, #4]
 8011a70:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	60fb      	str	r3, [r7, #12]
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	685b      	ldr	r3, [r3, #4]
 8011a7c:	613b      	str	r3, [r7, #16]
 8011a7e:	2300      	movs	r3, #0
 8011a80:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	689c      	ldr	r4, [r3, #8]
 8011a86:	200c      	movs	r0, #12
 8011a88:	f002 fa3a 	bl	8013f00 <pvPortMalloc>
 8011a8c:	4603      	mov	r3, r0
 8011a8e:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	689b      	ldr	r3, [r3, #8]
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d101      	bne.n	8011a9e <osMailCreate+0x36>
    return NULL;
 8011a9a:	2300      	movs	r3, #0
 8011a9c:	e038      	b.n	8011b10 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	689b      	ldr	r3, [r3, #8]
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	687a      	ldr	r2, [r7, #4]
 8011aa6:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	6818      	ldr	r0, [r3, #0]
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	689b      	ldr	r3, [r3, #8]
 8011ab0:	681c      	ldr	r4, [r3, #0]
 8011ab2:	2200      	movs	r2, #0
 8011ab4:	2104      	movs	r1, #4
 8011ab6:	f000 fa9c 	bl	8011ff2 <xQueueGenericCreate>
 8011aba:	4603      	mov	r3, r0
 8011abc:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	689b      	ldr	r3, [r3, #8]
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	685b      	ldr	r3, [r3, #4]
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d107      	bne.n	8011ada <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	689b      	ldr	r3, [r3, #8]
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	4618      	mov	r0, r3
 8011ad2:	f002 fad7 	bl	8014084 <vPortFree>
    return NULL;
 8011ad6:	2300      	movs	r3, #0
 8011ad8:	e01a      	b.n	8011b10 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	689b      	ldr	r3, [r3, #8]
 8011ade:	681c      	ldr	r4, [r3, #0]
 8011ae0:	f107 030c 	add.w	r3, r7, #12
 8011ae4:	4618      	mov	r0, r3
 8011ae6:	f7ff febf 	bl	8011868 <osPoolCreate>
 8011aea:	4603      	mov	r3, r0
 8011aec:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	689b      	ldr	r3, [r3, #8]
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	689b      	ldr	r3, [r3, #8]
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d107      	bne.n	8011b0a <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	689b      	ldr	r3, [r3, #8]
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	4618      	mov	r0, r3
 8011b02:	f002 fabf 	bl	8014084 <vPortFree>
    return NULL;
 8011b06:	2300      	movs	r3, #0
 8011b08:	e002      	b.n	8011b10 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	689b      	ldr	r3, [r3, #8]
 8011b0e:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 8011b10:	4618      	mov	r0, r3
 8011b12:	371c      	adds	r7, #28
 8011b14:	46bd      	mov	sp, r7
 8011b16:	bd90      	pop	{r4, r7, pc}

08011b18 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 8011b18:	b580      	push	{r7, lr}
 8011b1a:	b084      	sub	sp, #16
 8011b1c:	af00      	add	r7, sp, #0
 8011b1e:	6078      	str	r0, [r7, #4]
 8011b20:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d101      	bne.n	8011b2c <osMailAlloc+0x14>
    return NULL;
 8011b28:	2300      	movs	r3, #0
 8011b2a:	e006      	b.n	8011b3a <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	689b      	ldr	r3, [r3, #8]
 8011b30:	4618      	mov	r0, r3
 8011b32:	f7ff fef6 	bl	8011922 <osPoolAlloc>
 8011b36:	60f8      	str	r0, [r7, #12]
  
  return p;
 8011b38:	68fb      	ldr	r3, [r7, #12]
}
 8011b3a:	4618      	mov	r0, r3
 8011b3c:	3710      	adds	r7, #16
 8011b3e:	46bd      	mov	sp, r7
 8011b40:	bd80      	pop	{r7, pc}
	...

08011b44 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8011b44:	b580      	push	{r7, lr}
 8011b46:	b084      	sub	sp, #16
 8011b48:	af00      	add	r7, sp, #0
 8011b4a:	6078      	str	r0, [r7, #4]
 8011b4c:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d101      	bne.n	8011b58 <osMailPut+0x14>
    return osErrorParameter;
 8011b54:	2380      	movs	r3, #128	; 0x80
 8011b56:	e02c      	b.n	8011bb2 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 8011b58:	2300      	movs	r3, #0
 8011b5a:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 8011b5c:	f7ff fd67 	bl	801162e <inHandlerMode>
 8011b60:	4603      	mov	r3, r0
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d018      	beq.n	8011b98 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	6858      	ldr	r0, [r3, #4]
 8011b6a:	f107 020c 	add.w	r2, r7, #12
 8011b6e:	4639      	mov	r1, r7
 8011b70:	2300      	movs	r3, #0
 8011b72:	f000 fbe3 	bl	801233c <xQueueGenericSendFromISR>
 8011b76:	4603      	mov	r3, r0
 8011b78:	2b01      	cmp	r3, #1
 8011b7a:	d001      	beq.n	8011b80 <osMailPut+0x3c>
      return osErrorOS;
 8011b7c:	23ff      	movs	r3, #255	; 0xff
 8011b7e:	e018      	b.n	8011bb2 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d014      	beq.n	8011bb0 <osMailPut+0x6c>
 8011b86:	4b0d      	ldr	r3, [pc, #52]	; (8011bbc <osMailPut+0x78>)
 8011b88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b8c:	601a      	str	r2, [r3, #0]
 8011b8e:	f3bf 8f4f 	dsb	sy
 8011b92:	f3bf 8f6f 	isb	sy
 8011b96:	e00b      	b.n	8011bb0 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	6858      	ldr	r0, [r3, #4]
 8011b9c:	4639      	mov	r1, r7
 8011b9e:	2300      	movs	r3, #0
 8011ba0:	2200      	movs	r2, #0
 8011ba2:	f000 fad1 	bl	8012148 <xQueueGenericSend>
 8011ba6:	4603      	mov	r3, r0
 8011ba8:	2b01      	cmp	r3, #1
 8011baa:	d001      	beq.n	8011bb0 <osMailPut+0x6c>
      return osErrorOS;
 8011bac:	23ff      	movs	r3, #255	; 0xff
 8011bae:	e000      	b.n	8011bb2 <osMailPut+0x6e>
    }
  }
  
  return osOK;
 8011bb0:	2300      	movs	r3, #0
}
 8011bb2:	4618      	mov	r0, r3
 8011bb4:	3710      	adds	r7, #16
 8011bb6:	46bd      	mov	sp, r7
 8011bb8:	bd80      	pop	{r7, pc}
 8011bba:	bf00      	nop
 8011bbc:	e000ed04 	.word	0xe000ed04

08011bc0 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 8011bc0:	b590      	push	{r4, r7, lr}
 8011bc2:	b08b      	sub	sp, #44	; 0x2c
 8011bc4:	af00      	add	r7, sp, #0
 8011bc6:	60f8      	str	r0, [r7, #12]
 8011bc8:	60b9      	str	r1, [r7, #8]
 8011bca:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 8011bcc:	68bb      	ldr	r3, [r7, #8]
 8011bce:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 8011bd0:	68bb      	ldr	r3, [r7, #8]
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d10a      	bne.n	8011bec <osMailGet+0x2c>
    event.status = osErrorParameter;
 8011bd6:	2380      	movs	r3, #128	; 0x80
 8011bd8:	617b      	str	r3, [r7, #20]
    return event;
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	461c      	mov	r4, r3
 8011bde:	f107 0314 	add.w	r3, r7, #20
 8011be2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011be6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011bea:	e056      	b.n	8011c9a <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8011bec:	2300      	movs	r3, #0
 8011bee:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8011bf0:	2300      	movs	r3, #0
 8011bf2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011bfa:	d103      	bne.n	8011c04 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 8011bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8011c00:	627b      	str	r3, [r7, #36]	; 0x24
 8011c02:	e009      	b.n	8011c18 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d006      	beq.n	8011c18 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8011c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d101      	bne.n	8011c18 <osMailGet+0x58>
      ticks = 1;
 8011c14:	2301      	movs	r3, #1
 8011c16:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8011c18:	f7ff fd09 	bl	801162e <inHandlerMode>
 8011c1c:	4603      	mov	r3, r0
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d01d      	beq.n	8011c5e <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8011c22:	68bb      	ldr	r3, [r7, #8]
 8011c24:	6858      	ldr	r0, [r3, #4]
 8011c26:	f107 0220 	add.w	r2, r7, #32
 8011c2a:	f107 0314 	add.w	r3, r7, #20
 8011c2e:	3304      	adds	r3, #4
 8011c30:	4619      	mov	r1, r3
 8011c32:	f000 fcf3 	bl	801261c <xQueueReceiveFromISR>
 8011c36:	4603      	mov	r3, r0
 8011c38:	2b01      	cmp	r3, #1
 8011c3a:	d102      	bne.n	8011c42 <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 8011c3c:	2320      	movs	r3, #32
 8011c3e:	617b      	str	r3, [r7, #20]
 8011c40:	e001      	b.n	8011c46 <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 8011c42:	2300      	movs	r3, #0
 8011c44:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011c46:	6a3b      	ldr	r3, [r7, #32]
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d01e      	beq.n	8011c8a <osMailGet+0xca>
 8011c4c:	4b15      	ldr	r3, [pc, #84]	; (8011ca4 <osMailGet+0xe4>)
 8011c4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011c52:	601a      	str	r2, [r3, #0]
 8011c54:	f3bf 8f4f 	dsb	sy
 8011c58:	f3bf 8f6f 	isb	sy
 8011c5c:	e015      	b.n	8011c8a <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8011c5e:	68bb      	ldr	r3, [r7, #8]
 8011c60:	6858      	ldr	r0, [r3, #4]
 8011c62:	f107 0314 	add.w	r3, r7, #20
 8011c66:	3304      	adds	r3, #4
 8011c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c6a:	4619      	mov	r1, r3
 8011c6c:	f000 fbfa 	bl	8012464 <xQueueReceive>
 8011c70:	4603      	mov	r3, r0
 8011c72:	2b01      	cmp	r3, #1
 8011c74:	d102      	bne.n	8011c7c <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 8011c76:	2320      	movs	r3, #32
 8011c78:	617b      	str	r3, [r7, #20]
 8011c7a:	e006      	b.n	8011c8a <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8011c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d101      	bne.n	8011c86 <osMailGet+0xc6>
 8011c82:	2300      	movs	r3, #0
 8011c84:	e000      	b.n	8011c88 <osMailGet+0xc8>
 8011c86:	2340      	movs	r3, #64	; 0x40
 8011c88:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	461c      	mov	r4, r3
 8011c8e:	f107 0314 	add.w	r3, r7, #20
 8011c92:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011c96:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8011c9a:	68f8      	ldr	r0, [r7, #12]
 8011c9c:	372c      	adds	r7, #44	; 0x2c
 8011c9e:	46bd      	mov	sp, r7
 8011ca0:	bd90      	pop	{r4, r7, pc}
 8011ca2:	bf00      	nop
 8011ca4:	e000ed04 	.word	0xe000ed04

08011ca8 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 8011ca8:	b580      	push	{r7, lr}
 8011caa:	b082      	sub	sp, #8
 8011cac:	af00      	add	r7, sp, #0
 8011cae:	6078      	str	r0, [r7, #4]
 8011cb0:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d101      	bne.n	8011cbc <osMailFree+0x14>
    return osErrorParameter;
 8011cb8:	2380      	movs	r3, #128	; 0x80
 8011cba:	e006      	b.n	8011cca <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	689b      	ldr	r3, [r3, #8]
 8011cc0:	6839      	ldr	r1, [r7, #0]
 8011cc2:	4618      	mov	r0, r3
 8011cc4:	f7ff fe8f 	bl	80119e6 <osPoolFree>
 8011cc8:	4603      	mov	r3, r0
}
 8011cca:	4618      	mov	r0, r3
 8011ccc:	3708      	adds	r7, #8
 8011cce:	46bd      	mov	sp, r7
 8011cd0:	bd80      	pop	{r7, pc}

08011cd2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011cd2:	b480      	push	{r7}
 8011cd4:	b083      	sub	sp, #12
 8011cd6:	af00      	add	r7, sp, #0
 8011cd8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	f103 0208 	add.w	r2, r3, #8
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	f04f 32ff 	mov.w	r2, #4294967295
 8011cea:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	f103 0208 	add.w	r2, r3, #8
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	f103 0208 	add.w	r2, r3, #8
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	2200      	movs	r2, #0
 8011d04:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011d06:	bf00      	nop
 8011d08:	370c      	adds	r7, #12
 8011d0a:	46bd      	mov	sp, r7
 8011d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d10:	4770      	bx	lr

08011d12 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011d12:	b480      	push	{r7}
 8011d14:	b083      	sub	sp, #12
 8011d16:	af00      	add	r7, sp, #0
 8011d18:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	2200      	movs	r2, #0
 8011d1e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8011d20:	bf00      	nop
 8011d22:	370c      	adds	r7, #12
 8011d24:	46bd      	mov	sp, r7
 8011d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d2a:	4770      	bx	lr

08011d2c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011d2c:	b480      	push	{r7}
 8011d2e:	b085      	sub	sp, #20
 8011d30:	af00      	add	r7, sp, #0
 8011d32:	6078      	str	r0, [r7, #4]
 8011d34:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	685b      	ldr	r3, [r3, #4]
 8011d3a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011d3c:	683b      	ldr	r3, [r7, #0]
 8011d3e:	68fa      	ldr	r2, [r7, #12]
 8011d40:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011d42:	68fb      	ldr	r3, [r7, #12]
 8011d44:	689a      	ldr	r2, [r3, #8]
 8011d46:	683b      	ldr	r3, [r7, #0]
 8011d48:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	689b      	ldr	r3, [r3, #8]
 8011d4e:	683a      	ldr	r2, [r7, #0]
 8011d50:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	683a      	ldr	r2, [r7, #0]
 8011d56:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8011d58:	683b      	ldr	r3, [r7, #0]
 8011d5a:	687a      	ldr	r2, [r7, #4]
 8011d5c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	1c5a      	adds	r2, r3, #1
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	601a      	str	r2, [r3, #0]
}
 8011d68:	bf00      	nop
 8011d6a:	3714      	adds	r7, #20
 8011d6c:	46bd      	mov	sp, r7
 8011d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d72:	4770      	bx	lr

08011d74 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011d74:	b480      	push	{r7}
 8011d76:	b085      	sub	sp, #20
 8011d78:	af00      	add	r7, sp, #0
 8011d7a:	6078      	str	r0, [r7, #4]
 8011d7c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011d7e:	683b      	ldr	r3, [r7, #0]
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8011d84:	68bb      	ldr	r3, [r7, #8]
 8011d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d8a:	d103      	bne.n	8011d94 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	691b      	ldr	r3, [r3, #16]
 8011d90:	60fb      	str	r3, [r7, #12]
 8011d92:	e00c      	b.n	8011dae <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	3308      	adds	r3, #8
 8011d98:	60fb      	str	r3, [r7, #12]
 8011d9a:	e002      	b.n	8011da2 <vListInsert+0x2e>
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	685b      	ldr	r3, [r3, #4]
 8011da0:	60fb      	str	r3, [r7, #12]
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	685b      	ldr	r3, [r3, #4]
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	68ba      	ldr	r2, [r7, #8]
 8011daa:	429a      	cmp	r2, r3
 8011dac:	d2f6      	bcs.n	8011d9c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	685a      	ldr	r2, [r3, #4]
 8011db2:	683b      	ldr	r3, [r7, #0]
 8011db4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011db6:	683b      	ldr	r3, [r7, #0]
 8011db8:	685b      	ldr	r3, [r3, #4]
 8011dba:	683a      	ldr	r2, [r7, #0]
 8011dbc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011dbe:	683b      	ldr	r3, [r7, #0]
 8011dc0:	68fa      	ldr	r2, [r7, #12]
 8011dc2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	683a      	ldr	r2, [r7, #0]
 8011dc8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8011dca:	683b      	ldr	r3, [r7, #0]
 8011dcc:	687a      	ldr	r2, [r7, #4]
 8011dce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	1c5a      	adds	r2, r3, #1
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	601a      	str	r2, [r3, #0]
}
 8011dda:	bf00      	nop
 8011ddc:	3714      	adds	r7, #20
 8011dde:	46bd      	mov	sp, r7
 8011de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011de4:	4770      	bx	lr

08011de6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011de6:	b480      	push	{r7}
 8011de8:	b085      	sub	sp, #20
 8011dea:	af00      	add	r7, sp, #0
 8011dec:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	691b      	ldr	r3, [r3, #16]
 8011df2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	685b      	ldr	r3, [r3, #4]
 8011df8:	687a      	ldr	r2, [r7, #4]
 8011dfa:	6892      	ldr	r2, [r2, #8]
 8011dfc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	689b      	ldr	r3, [r3, #8]
 8011e02:	687a      	ldr	r2, [r7, #4]
 8011e04:	6852      	ldr	r2, [r2, #4]
 8011e06:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011e08:	68fb      	ldr	r3, [r7, #12]
 8011e0a:	685b      	ldr	r3, [r3, #4]
 8011e0c:	687a      	ldr	r2, [r7, #4]
 8011e0e:	429a      	cmp	r2, r3
 8011e10:	d103      	bne.n	8011e1a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	689a      	ldr	r2, [r3, #8]
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	2200      	movs	r2, #0
 8011e1e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	1e5a      	subs	r2, r3, #1
 8011e26:	68fb      	ldr	r3, [r7, #12]
 8011e28:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011e2a:	68fb      	ldr	r3, [r7, #12]
 8011e2c:	681b      	ldr	r3, [r3, #0]
}
 8011e2e:	4618      	mov	r0, r3
 8011e30:	3714      	adds	r7, #20
 8011e32:	46bd      	mov	sp, r7
 8011e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e38:	4770      	bx	lr
	...

08011e3c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011e3c:	b580      	push	{r7, lr}
 8011e3e:	b084      	sub	sp, #16
 8011e40:	af00      	add	r7, sp, #0
 8011e42:	6078      	str	r0, [r7, #4]
 8011e44:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d109      	bne.n	8011e64 <xQueueGenericReset+0x28>
	__asm volatile
 8011e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e54:	f383 8811 	msr	BASEPRI, r3
 8011e58:	f3bf 8f6f 	isb	sy
 8011e5c:	f3bf 8f4f 	dsb	sy
 8011e60:	60bb      	str	r3, [r7, #8]
 8011e62:	e7fe      	b.n	8011e62 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8011e64:	f001 ff32 	bl	8013ccc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	681a      	ldr	r2, [r3, #0]
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011e70:	68f9      	ldr	r1, [r7, #12]
 8011e72:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011e74:	fb01 f303 	mul.w	r3, r1, r3
 8011e78:	441a      	add	r2, r3
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	2200      	movs	r2, #0
 8011e82:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	681a      	ldr	r2, [r3, #0]
 8011e88:	68fb      	ldr	r3, [r7, #12]
 8011e8a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011e8c:	68fb      	ldr	r3, [r7, #12]
 8011e8e:	681a      	ldr	r2, [r3, #0]
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011e94:	3b01      	subs	r3, #1
 8011e96:	68f9      	ldr	r1, [r7, #12]
 8011e98:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011e9a:	fb01 f303 	mul.w	r3, r1, r3
 8011e9e:	441a      	add	r2, r3
 8011ea0:	68fb      	ldr	r3, [r7, #12]
 8011ea2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	22ff      	movs	r2, #255	; 0xff
 8011ea8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	22ff      	movs	r2, #255	; 0xff
 8011eb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8011eb4:	683b      	ldr	r3, [r7, #0]
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d114      	bne.n	8011ee4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	691b      	ldr	r3, [r3, #16]
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d01a      	beq.n	8011ef8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011ec2:	68fb      	ldr	r3, [r7, #12]
 8011ec4:	3310      	adds	r3, #16
 8011ec6:	4618      	mov	r0, r3
 8011ec8:	f001 f936 	bl	8013138 <xTaskRemoveFromEventList>
 8011ecc:	4603      	mov	r3, r0
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d012      	beq.n	8011ef8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011ed2:	4b0d      	ldr	r3, [pc, #52]	; (8011f08 <xQueueGenericReset+0xcc>)
 8011ed4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011ed8:	601a      	str	r2, [r3, #0]
 8011eda:	f3bf 8f4f 	dsb	sy
 8011ede:	f3bf 8f6f 	isb	sy
 8011ee2:	e009      	b.n	8011ef8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	3310      	adds	r3, #16
 8011ee8:	4618      	mov	r0, r3
 8011eea:	f7ff fef2 	bl	8011cd2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	3324      	adds	r3, #36	; 0x24
 8011ef2:	4618      	mov	r0, r3
 8011ef4:	f7ff feed 	bl	8011cd2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011ef8:	f001 ff16 	bl	8013d28 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8011efc:	2301      	movs	r3, #1
}
 8011efe:	4618      	mov	r0, r3
 8011f00:	3710      	adds	r7, #16
 8011f02:	46bd      	mov	sp, r7
 8011f04:	bd80      	pop	{r7, pc}
 8011f06:	bf00      	nop
 8011f08:	e000ed04 	.word	0xe000ed04

08011f0c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8011f0c:	b580      	push	{r7, lr}
 8011f0e:	b08e      	sub	sp, #56	; 0x38
 8011f10:	af02      	add	r7, sp, #8
 8011f12:	60f8      	str	r0, [r7, #12]
 8011f14:	60b9      	str	r1, [r7, #8]
 8011f16:	607a      	str	r2, [r7, #4]
 8011f18:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d109      	bne.n	8011f34 <xQueueGenericCreateStatic+0x28>
 8011f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f24:	f383 8811 	msr	BASEPRI, r3
 8011f28:	f3bf 8f6f 	isb	sy
 8011f2c:	f3bf 8f4f 	dsb	sy
 8011f30:	62bb      	str	r3, [r7, #40]	; 0x28
 8011f32:	e7fe      	b.n	8011f32 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8011f34:	683b      	ldr	r3, [r7, #0]
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d109      	bne.n	8011f4e <xQueueGenericCreateStatic+0x42>
 8011f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f3e:	f383 8811 	msr	BASEPRI, r3
 8011f42:	f3bf 8f6f 	isb	sy
 8011f46:	f3bf 8f4f 	dsb	sy
 8011f4a:	627b      	str	r3, [r7, #36]	; 0x24
 8011f4c:	e7fe      	b.n	8011f4c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d002      	beq.n	8011f5a <xQueueGenericCreateStatic+0x4e>
 8011f54:	68bb      	ldr	r3, [r7, #8]
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d001      	beq.n	8011f5e <xQueueGenericCreateStatic+0x52>
 8011f5a:	2301      	movs	r3, #1
 8011f5c:	e000      	b.n	8011f60 <xQueueGenericCreateStatic+0x54>
 8011f5e:	2300      	movs	r3, #0
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d109      	bne.n	8011f78 <xQueueGenericCreateStatic+0x6c>
 8011f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f68:	f383 8811 	msr	BASEPRI, r3
 8011f6c:	f3bf 8f6f 	isb	sy
 8011f70:	f3bf 8f4f 	dsb	sy
 8011f74:	623b      	str	r3, [r7, #32]
 8011f76:	e7fe      	b.n	8011f76 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d102      	bne.n	8011f84 <xQueueGenericCreateStatic+0x78>
 8011f7e:	68bb      	ldr	r3, [r7, #8]
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d101      	bne.n	8011f88 <xQueueGenericCreateStatic+0x7c>
 8011f84:	2301      	movs	r3, #1
 8011f86:	e000      	b.n	8011f8a <xQueueGenericCreateStatic+0x7e>
 8011f88:	2300      	movs	r3, #0
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d109      	bne.n	8011fa2 <xQueueGenericCreateStatic+0x96>
 8011f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f92:	f383 8811 	msr	BASEPRI, r3
 8011f96:	f3bf 8f6f 	isb	sy
 8011f9a:	f3bf 8f4f 	dsb	sy
 8011f9e:	61fb      	str	r3, [r7, #28]
 8011fa0:	e7fe      	b.n	8011fa0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8011fa2:	2348      	movs	r3, #72	; 0x48
 8011fa4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8011fa6:	697b      	ldr	r3, [r7, #20]
 8011fa8:	2b48      	cmp	r3, #72	; 0x48
 8011faa:	d009      	beq.n	8011fc0 <xQueueGenericCreateStatic+0xb4>
 8011fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fb0:	f383 8811 	msr	BASEPRI, r3
 8011fb4:	f3bf 8f6f 	isb	sy
 8011fb8:	f3bf 8f4f 	dsb	sy
 8011fbc:	61bb      	str	r3, [r7, #24]
 8011fbe:	e7fe      	b.n	8011fbe <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8011fc0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011fc2:	683b      	ldr	r3, [r7, #0]
 8011fc4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8011fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d00d      	beq.n	8011fe8 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8011fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fce:	2201      	movs	r2, #1
 8011fd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011fd4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8011fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fda:	9300      	str	r3, [sp, #0]
 8011fdc:	4613      	mov	r3, r2
 8011fde:	687a      	ldr	r2, [r7, #4]
 8011fe0:	68b9      	ldr	r1, [r7, #8]
 8011fe2:	68f8      	ldr	r0, [r7, #12]
 8011fe4:	f000 f844 	bl	8012070 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8011fea:	4618      	mov	r0, r3
 8011fec:	3730      	adds	r7, #48	; 0x30
 8011fee:	46bd      	mov	sp, r7
 8011ff0:	bd80      	pop	{r7, pc}

08011ff2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8011ff2:	b580      	push	{r7, lr}
 8011ff4:	b08a      	sub	sp, #40	; 0x28
 8011ff6:	af02      	add	r7, sp, #8
 8011ff8:	60f8      	str	r0, [r7, #12]
 8011ffa:	60b9      	str	r1, [r7, #8]
 8011ffc:	4613      	mov	r3, r2
 8011ffe:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012000:	68fb      	ldr	r3, [r7, #12]
 8012002:	2b00      	cmp	r3, #0
 8012004:	d109      	bne.n	801201a <xQueueGenericCreate+0x28>
 8012006:	f04f 0350 	mov.w	r3, #80	; 0x50
 801200a:	f383 8811 	msr	BASEPRI, r3
 801200e:	f3bf 8f6f 	isb	sy
 8012012:	f3bf 8f4f 	dsb	sy
 8012016:	613b      	str	r3, [r7, #16]
 8012018:	e7fe      	b.n	8012018 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 801201a:	68bb      	ldr	r3, [r7, #8]
 801201c:	2b00      	cmp	r3, #0
 801201e:	d102      	bne.n	8012026 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8012020:	2300      	movs	r3, #0
 8012022:	61fb      	str	r3, [r7, #28]
 8012024:	e004      	b.n	8012030 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	68ba      	ldr	r2, [r7, #8]
 801202a:	fb02 f303 	mul.w	r3, r2, r3
 801202e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012030:	69fb      	ldr	r3, [r7, #28]
 8012032:	3348      	adds	r3, #72	; 0x48
 8012034:	4618      	mov	r0, r3
 8012036:	f001 ff63 	bl	8013f00 <pvPortMalloc>
 801203a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801203c:	69bb      	ldr	r3, [r7, #24]
 801203e:	2b00      	cmp	r3, #0
 8012040:	d011      	beq.n	8012066 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8012042:	69bb      	ldr	r3, [r7, #24]
 8012044:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012046:	697b      	ldr	r3, [r7, #20]
 8012048:	3348      	adds	r3, #72	; 0x48
 801204a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801204c:	69bb      	ldr	r3, [r7, #24]
 801204e:	2200      	movs	r2, #0
 8012050:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012054:	79fa      	ldrb	r2, [r7, #7]
 8012056:	69bb      	ldr	r3, [r7, #24]
 8012058:	9300      	str	r3, [sp, #0]
 801205a:	4613      	mov	r3, r2
 801205c:	697a      	ldr	r2, [r7, #20]
 801205e:	68b9      	ldr	r1, [r7, #8]
 8012060:	68f8      	ldr	r0, [r7, #12]
 8012062:	f000 f805 	bl	8012070 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012066:	69bb      	ldr	r3, [r7, #24]
	}
 8012068:	4618      	mov	r0, r3
 801206a:	3720      	adds	r7, #32
 801206c:	46bd      	mov	sp, r7
 801206e:	bd80      	pop	{r7, pc}

08012070 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012070:	b580      	push	{r7, lr}
 8012072:	b084      	sub	sp, #16
 8012074:	af00      	add	r7, sp, #0
 8012076:	60f8      	str	r0, [r7, #12]
 8012078:	60b9      	str	r1, [r7, #8]
 801207a:	607a      	str	r2, [r7, #4]
 801207c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801207e:	68bb      	ldr	r3, [r7, #8]
 8012080:	2b00      	cmp	r3, #0
 8012082:	d103      	bne.n	801208c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012084:	69bb      	ldr	r3, [r7, #24]
 8012086:	69ba      	ldr	r2, [r7, #24]
 8012088:	601a      	str	r2, [r3, #0]
 801208a:	e002      	b.n	8012092 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801208c:	69bb      	ldr	r3, [r7, #24]
 801208e:	687a      	ldr	r2, [r7, #4]
 8012090:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8012092:	69bb      	ldr	r3, [r7, #24]
 8012094:	68fa      	ldr	r2, [r7, #12]
 8012096:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012098:	69bb      	ldr	r3, [r7, #24]
 801209a:	68ba      	ldr	r2, [r7, #8]
 801209c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801209e:	2101      	movs	r1, #1
 80120a0:	69b8      	ldr	r0, [r7, #24]
 80120a2:	f7ff fecb 	bl	8011e3c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80120a6:	bf00      	nop
 80120a8:	3710      	adds	r7, #16
 80120aa:	46bd      	mov	sp, r7
 80120ac:	bd80      	pop	{r7, pc}

080120ae <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80120ae:	b580      	push	{r7, lr}
 80120b0:	b082      	sub	sp, #8
 80120b2:	af00      	add	r7, sp, #0
 80120b4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d00e      	beq.n	80120da <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	2200      	movs	r2, #0
 80120c0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	2200      	movs	r2, #0
 80120c6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	2200      	movs	r2, #0
 80120cc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80120ce:	2300      	movs	r3, #0
 80120d0:	2200      	movs	r2, #0
 80120d2:	2100      	movs	r1, #0
 80120d4:	6878      	ldr	r0, [r7, #4]
 80120d6:	f000 f837 	bl	8012148 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80120da:	bf00      	nop
 80120dc:	3708      	adds	r7, #8
 80120de:	46bd      	mov	sp, r7
 80120e0:	bd80      	pop	{r7, pc}

080120e2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80120e2:	b580      	push	{r7, lr}
 80120e4:	b086      	sub	sp, #24
 80120e6:	af00      	add	r7, sp, #0
 80120e8:	4603      	mov	r3, r0
 80120ea:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80120ec:	2301      	movs	r3, #1
 80120ee:	617b      	str	r3, [r7, #20]
 80120f0:	2300      	movs	r3, #0
 80120f2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80120f4:	79fb      	ldrb	r3, [r7, #7]
 80120f6:	461a      	mov	r2, r3
 80120f8:	6939      	ldr	r1, [r7, #16]
 80120fa:	6978      	ldr	r0, [r7, #20]
 80120fc:	f7ff ff79 	bl	8011ff2 <xQueueGenericCreate>
 8012100:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8012102:	68f8      	ldr	r0, [r7, #12]
 8012104:	f7ff ffd3 	bl	80120ae <prvInitialiseMutex>

		return xNewQueue;
 8012108:	68fb      	ldr	r3, [r7, #12]
	}
 801210a:	4618      	mov	r0, r3
 801210c:	3718      	adds	r7, #24
 801210e:	46bd      	mov	sp, r7
 8012110:	bd80      	pop	{r7, pc}

08012112 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8012112:	b580      	push	{r7, lr}
 8012114:	b088      	sub	sp, #32
 8012116:	af02      	add	r7, sp, #8
 8012118:	4603      	mov	r3, r0
 801211a:	6039      	str	r1, [r7, #0]
 801211c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801211e:	2301      	movs	r3, #1
 8012120:	617b      	str	r3, [r7, #20]
 8012122:	2300      	movs	r3, #0
 8012124:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8012126:	79fb      	ldrb	r3, [r7, #7]
 8012128:	9300      	str	r3, [sp, #0]
 801212a:	683b      	ldr	r3, [r7, #0]
 801212c:	2200      	movs	r2, #0
 801212e:	6939      	ldr	r1, [r7, #16]
 8012130:	6978      	ldr	r0, [r7, #20]
 8012132:	f7ff feeb 	bl	8011f0c <xQueueGenericCreateStatic>
 8012136:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8012138:	68f8      	ldr	r0, [r7, #12]
 801213a:	f7ff ffb8 	bl	80120ae <prvInitialiseMutex>

		return xNewQueue;
 801213e:	68fb      	ldr	r3, [r7, #12]
	}
 8012140:	4618      	mov	r0, r3
 8012142:	3718      	adds	r7, #24
 8012144:	46bd      	mov	sp, r7
 8012146:	bd80      	pop	{r7, pc}

08012148 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012148:	b580      	push	{r7, lr}
 801214a:	b08e      	sub	sp, #56	; 0x38
 801214c:	af00      	add	r7, sp, #0
 801214e:	60f8      	str	r0, [r7, #12]
 8012150:	60b9      	str	r1, [r7, #8]
 8012152:	607a      	str	r2, [r7, #4]
 8012154:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012156:	2300      	movs	r3, #0
 8012158:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801215e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012160:	2b00      	cmp	r3, #0
 8012162:	d109      	bne.n	8012178 <xQueueGenericSend+0x30>
 8012164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012168:	f383 8811 	msr	BASEPRI, r3
 801216c:	f3bf 8f6f 	isb	sy
 8012170:	f3bf 8f4f 	dsb	sy
 8012174:	62bb      	str	r3, [r7, #40]	; 0x28
 8012176:	e7fe      	b.n	8012176 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012178:	68bb      	ldr	r3, [r7, #8]
 801217a:	2b00      	cmp	r3, #0
 801217c:	d103      	bne.n	8012186 <xQueueGenericSend+0x3e>
 801217e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012182:	2b00      	cmp	r3, #0
 8012184:	d101      	bne.n	801218a <xQueueGenericSend+0x42>
 8012186:	2301      	movs	r3, #1
 8012188:	e000      	b.n	801218c <xQueueGenericSend+0x44>
 801218a:	2300      	movs	r3, #0
 801218c:	2b00      	cmp	r3, #0
 801218e:	d109      	bne.n	80121a4 <xQueueGenericSend+0x5c>
 8012190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012194:	f383 8811 	msr	BASEPRI, r3
 8012198:	f3bf 8f6f 	isb	sy
 801219c:	f3bf 8f4f 	dsb	sy
 80121a0:	627b      	str	r3, [r7, #36]	; 0x24
 80121a2:	e7fe      	b.n	80121a2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80121a4:	683b      	ldr	r3, [r7, #0]
 80121a6:	2b02      	cmp	r3, #2
 80121a8:	d103      	bne.n	80121b2 <xQueueGenericSend+0x6a>
 80121aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80121ae:	2b01      	cmp	r3, #1
 80121b0:	d101      	bne.n	80121b6 <xQueueGenericSend+0x6e>
 80121b2:	2301      	movs	r3, #1
 80121b4:	e000      	b.n	80121b8 <xQueueGenericSend+0x70>
 80121b6:	2300      	movs	r3, #0
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d109      	bne.n	80121d0 <xQueueGenericSend+0x88>
 80121bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121c0:	f383 8811 	msr	BASEPRI, r3
 80121c4:	f3bf 8f6f 	isb	sy
 80121c8:	f3bf 8f4f 	dsb	sy
 80121cc:	623b      	str	r3, [r7, #32]
 80121ce:	e7fe      	b.n	80121ce <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80121d0:	f001 f968 	bl	80134a4 <xTaskGetSchedulerState>
 80121d4:	4603      	mov	r3, r0
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d102      	bne.n	80121e0 <xQueueGenericSend+0x98>
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d101      	bne.n	80121e4 <xQueueGenericSend+0x9c>
 80121e0:	2301      	movs	r3, #1
 80121e2:	e000      	b.n	80121e6 <xQueueGenericSend+0x9e>
 80121e4:	2300      	movs	r3, #0
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d109      	bne.n	80121fe <xQueueGenericSend+0xb6>
 80121ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121ee:	f383 8811 	msr	BASEPRI, r3
 80121f2:	f3bf 8f6f 	isb	sy
 80121f6:	f3bf 8f4f 	dsb	sy
 80121fa:	61fb      	str	r3, [r7, #28]
 80121fc:	e7fe      	b.n	80121fc <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80121fe:	f001 fd65 	bl	8013ccc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012204:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801220a:	429a      	cmp	r2, r3
 801220c:	d302      	bcc.n	8012214 <xQueueGenericSend+0xcc>
 801220e:	683b      	ldr	r3, [r7, #0]
 8012210:	2b02      	cmp	r3, #2
 8012212:	d129      	bne.n	8012268 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012214:	683a      	ldr	r2, [r7, #0]
 8012216:	68b9      	ldr	r1, [r7, #8]
 8012218:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801221a:	f000 fa7c 	bl	8012716 <prvCopyDataToQueue>
 801221e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012224:	2b00      	cmp	r3, #0
 8012226:	d010      	beq.n	801224a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801222a:	3324      	adds	r3, #36	; 0x24
 801222c:	4618      	mov	r0, r3
 801222e:	f000 ff83 	bl	8013138 <xTaskRemoveFromEventList>
 8012232:	4603      	mov	r3, r0
 8012234:	2b00      	cmp	r3, #0
 8012236:	d013      	beq.n	8012260 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012238:	4b3f      	ldr	r3, [pc, #252]	; (8012338 <xQueueGenericSend+0x1f0>)
 801223a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801223e:	601a      	str	r2, [r3, #0]
 8012240:	f3bf 8f4f 	dsb	sy
 8012244:	f3bf 8f6f 	isb	sy
 8012248:	e00a      	b.n	8012260 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801224a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801224c:	2b00      	cmp	r3, #0
 801224e:	d007      	beq.n	8012260 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8012250:	4b39      	ldr	r3, [pc, #228]	; (8012338 <xQueueGenericSend+0x1f0>)
 8012252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012256:	601a      	str	r2, [r3, #0]
 8012258:	f3bf 8f4f 	dsb	sy
 801225c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8012260:	f001 fd62 	bl	8013d28 <vPortExitCritical>
				return pdPASS;
 8012264:	2301      	movs	r3, #1
 8012266:	e063      	b.n	8012330 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	2b00      	cmp	r3, #0
 801226c:	d103      	bne.n	8012276 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801226e:	f001 fd5b 	bl	8013d28 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8012272:	2300      	movs	r3, #0
 8012274:	e05c      	b.n	8012330 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012278:	2b00      	cmp	r3, #0
 801227a:	d106      	bne.n	801228a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801227c:	f107 0314 	add.w	r3, r7, #20
 8012280:	4618      	mov	r0, r3
 8012282:	f000 ffbb 	bl	80131fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012286:	2301      	movs	r3, #1
 8012288:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801228a:	f001 fd4d 	bl	8013d28 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801228e:	f000 fd73 	bl	8012d78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012292:	f001 fd1b 	bl	8013ccc <vPortEnterCritical>
 8012296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012298:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801229c:	b25b      	sxtb	r3, r3
 801229e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122a2:	d103      	bne.n	80122ac <xQueueGenericSend+0x164>
 80122a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122a6:	2200      	movs	r2, #0
 80122a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80122ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80122b2:	b25b      	sxtb	r3, r3
 80122b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122b8:	d103      	bne.n	80122c2 <xQueueGenericSend+0x17a>
 80122ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122bc:	2200      	movs	r2, #0
 80122be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80122c2:	f001 fd31 	bl	8013d28 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80122c6:	1d3a      	adds	r2, r7, #4
 80122c8:	f107 0314 	add.w	r3, r7, #20
 80122cc:	4611      	mov	r1, r2
 80122ce:	4618      	mov	r0, r3
 80122d0:	f000 ffaa 	bl	8013228 <xTaskCheckForTimeOut>
 80122d4:	4603      	mov	r3, r0
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d124      	bne.n	8012324 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80122da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80122dc:	f000 fb13 	bl	8012906 <prvIsQueueFull>
 80122e0:	4603      	mov	r3, r0
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d018      	beq.n	8012318 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80122e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122e8:	3310      	adds	r3, #16
 80122ea:	687a      	ldr	r2, [r7, #4]
 80122ec:	4611      	mov	r1, r2
 80122ee:	4618      	mov	r0, r3
 80122f0:	f000 fefe 	bl	80130f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80122f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80122f6:	f000 fa9e 	bl	8012836 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80122fa:	f000 fd4b 	bl	8012d94 <xTaskResumeAll>
 80122fe:	4603      	mov	r3, r0
 8012300:	2b00      	cmp	r3, #0
 8012302:	f47f af7c 	bne.w	80121fe <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8012306:	4b0c      	ldr	r3, [pc, #48]	; (8012338 <xQueueGenericSend+0x1f0>)
 8012308:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801230c:	601a      	str	r2, [r3, #0]
 801230e:	f3bf 8f4f 	dsb	sy
 8012312:	f3bf 8f6f 	isb	sy
 8012316:	e772      	b.n	80121fe <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012318:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801231a:	f000 fa8c 	bl	8012836 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801231e:	f000 fd39 	bl	8012d94 <xTaskResumeAll>
 8012322:	e76c      	b.n	80121fe <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012324:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012326:	f000 fa86 	bl	8012836 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801232a:	f000 fd33 	bl	8012d94 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801232e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8012330:	4618      	mov	r0, r3
 8012332:	3738      	adds	r7, #56	; 0x38
 8012334:	46bd      	mov	sp, r7
 8012336:	bd80      	pop	{r7, pc}
 8012338:	e000ed04 	.word	0xe000ed04

0801233c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801233c:	b580      	push	{r7, lr}
 801233e:	b08e      	sub	sp, #56	; 0x38
 8012340:	af00      	add	r7, sp, #0
 8012342:	60f8      	str	r0, [r7, #12]
 8012344:	60b9      	str	r1, [r7, #8]
 8012346:	607a      	str	r2, [r7, #4]
 8012348:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801234a:	68fb      	ldr	r3, [r7, #12]
 801234c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801234e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012350:	2b00      	cmp	r3, #0
 8012352:	d109      	bne.n	8012368 <xQueueGenericSendFromISR+0x2c>
 8012354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012358:	f383 8811 	msr	BASEPRI, r3
 801235c:	f3bf 8f6f 	isb	sy
 8012360:	f3bf 8f4f 	dsb	sy
 8012364:	627b      	str	r3, [r7, #36]	; 0x24
 8012366:	e7fe      	b.n	8012366 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012368:	68bb      	ldr	r3, [r7, #8]
 801236a:	2b00      	cmp	r3, #0
 801236c:	d103      	bne.n	8012376 <xQueueGenericSendFromISR+0x3a>
 801236e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012372:	2b00      	cmp	r3, #0
 8012374:	d101      	bne.n	801237a <xQueueGenericSendFromISR+0x3e>
 8012376:	2301      	movs	r3, #1
 8012378:	e000      	b.n	801237c <xQueueGenericSendFromISR+0x40>
 801237a:	2300      	movs	r3, #0
 801237c:	2b00      	cmp	r3, #0
 801237e:	d109      	bne.n	8012394 <xQueueGenericSendFromISR+0x58>
 8012380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012384:	f383 8811 	msr	BASEPRI, r3
 8012388:	f3bf 8f6f 	isb	sy
 801238c:	f3bf 8f4f 	dsb	sy
 8012390:	623b      	str	r3, [r7, #32]
 8012392:	e7fe      	b.n	8012392 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012394:	683b      	ldr	r3, [r7, #0]
 8012396:	2b02      	cmp	r3, #2
 8012398:	d103      	bne.n	80123a2 <xQueueGenericSendFromISR+0x66>
 801239a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801239c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801239e:	2b01      	cmp	r3, #1
 80123a0:	d101      	bne.n	80123a6 <xQueueGenericSendFromISR+0x6a>
 80123a2:	2301      	movs	r3, #1
 80123a4:	e000      	b.n	80123a8 <xQueueGenericSendFromISR+0x6c>
 80123a6:	2300      	movs	r3, #0
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d109      	bne.n	80123c0 <xQueueGenericSendFromISR+0x84>
 80123ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123b0:	f383 8811 	msr	BASEPRI, r3
 80123b4:	f3bf 8f6f 	isb	sy
 80123b8:	f3bf 8f4f 	dsb	sy
 80123bc:	61fb      	str	r3, [r7, #28]
 80123be:	e7fe      	b.n	80123be <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80123c0:	f001 fd60 	bl	8013e84 <vPortValidateInterruptPriority>
	__asm volatile
 80123c4:	f3ef 8211 	mrs	r2, BASEPRI
 80123c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123cc:	f383 8811 	msr	BASEPRI, r3
 80123d0:	f3bf 8f6f 	isb	sy
 80123d4:	f3bf 8f4f 	dsb	sy
 80123d8:	61ba      	str	r2, [r7, #24]
 80123da:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80123dc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80123de:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80123e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80123e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80123e8:	429a      	cmp	r2, r3
 80123ea:	d302      	bcc.n	80123f2 <xQueueGenericSendFromISR+0xb6>
 80123ec:	683b      	ldr	r3, [r7, #0]
 80123ee:	2b02      	cmp	r3, #2
 80123f0:	d12c      	bne.n	801244c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80123f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80123f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80123fc:	683a      	ldr	r2, [r7, #0]
 80123fe:	68b9      	ldr	r1, [r7, #8]
 8012400:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012402:	f000 f988 	bl	8012716 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012406:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 801240a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801240e:	d112      	bne.n	8012436 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012414:	2b00      	cmp	r3, #0
 8012416:	d016      	beq.n	8012446 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801241a:	3324      	adds	r3, #36	; 0x24
 801241c:	4618      	mov	r0, r3
 801241e:	f000 fe8b 	bl	8013138 <xTaskRemoveFromEventList>
 8012422:	4603      	mov	r3, r0
 8012424:	2b00      	cmp	r3, #0
 8012426:	d00e      	beq.n	8012446 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	2b00      	cmp	r3, #0
 801242c:	d00b      	beq.n	8012446 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	2201      	movs	r2, #1
 8012432:	601a      	str	r2, [r3, #0]
 8012434:	e007      	b.n	8012446 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012436:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801243a:	3301      	adds	r3, #1
 801243c:	b2db      	uxtb	r3, r3
 801243e:	b25a      	sxtb	r2, r3
 8012440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012442:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012446:	2301      	movs	r3, #1
 8012448:	637b      	str	r3, [r7, #52]	; 0x34
		{
 801244a:	e001      	b.n	8012450 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801244c:	2300      	movs	r3, #0
 801244e:	637b      	str	r3, [r7, #52]	; 0x34
 8012450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012452:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012454:	693b      	ldr	r3, [r7, #16]
 8012456:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801245a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801245c:	4618      	mov	r0, r3
 801245e:	3738      	adds	r7, #56	; 0x38
 8012460:	46bd      	mov	sp, r7
 8012462:	bd80      	pop	{r7, pc}

08012464 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8012464:	b580      	push	{r7, lr}
 8012466:	b08c      	sub	sp, #48	; 0x30
 8012468:	af00      	add	r7, sp, #0
 801246a:	60f8      	str	r0, [r7, #12]
 801246c:	60b9      	str	r1, [r7, #8]
 801246e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012470:	2300      	movs	r3, #0
 8012472:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012474:	68fb      	ldr	r3, [r7, #12]
 8012476:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801247a:	2b00      	cmp	r3, #0
 801247c:	d109      	bne.n	8012492 <xQueueReceive+0x2e>
	__asm volatile
 801247e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012482:	f383 8811 	msr	BASEPRI, r3
 8012486:	f3bf 8f6f 	isb	sy
 801248a:	f3bf 8f4f 	dsb	sy
 801248e:	623b      	str	r3, [r7, #32]
 8012490:	e7fe      	b.n	8012490 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012492:	68bb      	ldr	r3, [r7, #8]
 8012494:	2b00      	cmp	r3, #0
 8012496:	d103      	bne.n	80124a0 <xQueueReceive+0x3c>
 8012498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801249a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801249c:	2b00      	cmp	r3, #0
 801249e:	d101      	bne.n	80124a4 <xQueueReceive+0x40>
 80124a0:	2301      	movs	r3, #1
 80124a2:	e000      	b.n	80124a6 <xQueueReceive+0x42>
 80124a4:	2300      	movs	r3, #0
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d109      	bne.n	80124be <xQueueReceive+0x5a>
 80124aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124ae:	f383 8811 	msr	BASEPRI, r3
 80124b2:	f3bf 8f6f 	isb	sy
 80124b6:	f3bf 8f4f 	dsb	sy
 80124ba:	61fb      	str	r3, [r7, #28]
 80124bc:	e7fe      	b.n	80124bc <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80124be:	f000 fff1 	bl	80134a4 <xTaskGetSchedulerState>
 80124c2:	4603      	mov	r3, r0
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d102      	bne.n	80124ce <xQueueReceive+0x6a>
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d101      	bne.n	80124d2 <xQueueReceive+0x6e>
 80124ce:	2301      	movs	r3, #1
 80124d0:	e000      	b.n	80124d4 <xQueueReceive+0x70>
 80124d2:	2300      	movs	r3, #0
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d109      	bne.n	80124ec <xQueueReceive+0x88>
 80124d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124dc:	f383 8811 	msr	BASEPRI, r3
 80124e0:	f3bf 8f6f 	isb	sy
 80124e4:	f3bf 8f4f 	dsb	sy
 80124e8:	61bb      	str	r3, [r7, #24]
 80124ea:	e7fe      	b.n	80124ea <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80124ec:	f001 fbee 	bl	8013ccc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80124f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80124f4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80124f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d01f      	beq.n	801253c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80124fc:	68b9      	ldr	r1, [r7, #8]
 80124fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012500:	f000 f973 	bl	80127ea <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012506:	1e5a      	subs	r2, r3, #1
 8012508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801250a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801250c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801250e:	691b      	ldr	r3, [r3, #16]
 8012510:	2b00      	cmp	r3, #0
 8012512:	d00f      	beq.n	8012534 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012516:	3310      	adds	r3, #16
 8012518:	4618      	mov	r0, r3
 801251a:	f000 fe0d 	bl	8013138 <xTaskRemoveFromEventList>
 801251e:	4603      	mov	r3, r0
 8012520:	2b00      	cmp	r3, #0
 8012522:	d007      	beq.n	8012534 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012524:	4b3c      	ldr	r3, [pc, #240]	; (8012618 <xQueueReceive+0x1b4>)
 8012526:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801252a:	601a      	str	r2, [r3, #0]
 801252c:	f3bf 8f4f 	dsb	sy
 8012530:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012534:	f001 fbf8 	bl	8013d28 <vPortExitCritical>
				return pdPASS;
 8012538:	2301      	movs	r3, #1
 801253a:	e069      	b.n	8012610 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	2b00      	cmp	r3, #0
 8012540:	d103      	bne.n	801254a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012542:	f001 fbf1 	bl	8013d28 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012546:	2300      	movs	r3, #0
 8012548:	e062      	b.n	8012610 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 801254a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801254c:	2b00      	cmp	r3, #0
 801254e:	d106      	bne.n	801255e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012550:	f107 0310 	add.w	r3, r7, #16
 8012554:	4618      	mov	r0, r3
 8012556:	f000 fe51 	bl	80131fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801255a:	2301      	movs	r3, #1
 801255c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801255e:	f001 fbe3 	bl	8013d28 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012562:	f000 fc09 	bl	8012d78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012566:	f001 fbb1 	bl	8013ccc <vPortEnterCritical>
 801256a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801256c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012570:	b25b      	sxtb	r3, r3
 8012572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012576:	d103      	bne.n	8012580 <xQueueReceive+0x11c>
 8012578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801257a:	2200      	movs	r2, #0
 801257c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012582:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012586:	b25b      	sxtb	r3, r3
 8012588:	f1b3 3fff 	cmp.w	r3, #4294967295
 801258c:	d103      	bne.n	8012596 <xQueueReceive+0x132>
 801258e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012590:	2200      	movs	r2, #0
 8012592:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012596:	f001 fbc7 	bl	8013d28 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801259a:	1d3a      	adds	r2, r7, #4
 801259c:	f107 0310 	add.w	r3, r7, #16
 80125a0:	4611      	mov	r1, r2
 80125a2:	4618      	mov	r0, r3
 80125a4:	f000 fe40 	bl	8013228 <xTaskCheckForTimeOut>
 80125a8:	4603      	mov	r3, r0
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d123      	bne.n	80125f6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80125ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80125b0:	f000 f993 	bl	80128da <prvIsQueueEmpty>
 80125b4:	4603      	mov	r3, r0
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d017      	beq.n	80125ea <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80125ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125bc:	3324      	adds	r3, #36	; 0x24
 80125be:	687a      	ldr	r2, [r7, #4]
 80125c0:	4611      	mov	r1, r2
 80125c2:	4618      	mov	r0, r3
 80125c4:	f000 fd94 	bl	80130f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80125c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80125ca:	f000 f934 	bl	8012836 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80125ce:	f000 fbe1 	bl	8012d94 <xTaskResumeAll>
 80125d2:	4603      	mov	r3, r0
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d189      	bne.n	80124ec <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80125d8:	4b0f      	ldr	r3, [pc, #60]	; (8012618 <xQueueReceive+0x1b4>)
 80125da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80125de:	601a      	str	r2, [r3, #0]
 80125e0:	f3bf 8f4f 	dsb	sy
 80125e4:	f3bf 8f6f 	isb	sy
 80125e8:	e780      	b.n	80124ec <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80125ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80125ec:	f000 f923 	bl	8012836 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80125f0:	f000 fbd0 	bl	8012d94 <xTaskResumeAll>
 80125f4:	e77a      	b.n	80124ec <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80125f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80125f8:	f000 f91d 	bl	8012836 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80125fc:	f000 fbca 	bl	8012d94 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012600:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012602:	f000 f96a 	bl	80128da <prvIsQueueEmpty>
 8012606:	4603      	mov	r3, r0
 8012608:	2b00      	cmp	r3, #0
 801260a:	f43f af6f 	beq.w	80124ec <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801260e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012610:	4618      	mov	r0, r3
 8012612:	3730      	adds	r7, #48	; 0x30
 8012614:	46bd      	mov	sp, r7
 8012616:	bd80      	pop	{r7, pc}
 8012618:	e000ed04 	.word	0xe000ed04

0801261c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801261c:	b580      	push	{r7, lr}
 801261e:	b08e      	sub	sp, #56	; 0x38
 8012620:	af00      	add	r7, sp, #0
 8012622:	60f8      	str	r0, [r7, #12]
 8012624:	60b9      	str	r1, [r7, #8]
 8012626:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801262c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801262e:	2b00      	cmp	r3, #0
 8012630:	d109      	bne.n	8012646 <xQueueReceiveFromISR+0x2a>
 8012632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012636:	f383 8811 	msr	BASEPRI, r3
 801263a:	f3bf 8f6f 	isb	sy
 801263e:	f3bf 8f4f 	dsb	sy
 8012642:	623b      	str	r3, [r7, #32]
 8012644:	e7fe      	b.n	8012644 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012646:	68bb      	ldr	r3, [r7, #8]
 8012648:	2b00      	cmp	r3, #0
 801264a:	d103      	bne.n	8012654 <xQueueReceiveFromISR+0x38>
 801264c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801264e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012650:	2b00      	cmp	r3, #0
 8012652:	d101      	bne.n	8012658 <xQueueReceiveFromISR+0x3c>
 8012654:	2301      	movs	r3, #1
 8012656:	e000      	b.n	801265a <xQueueReceiveFromISR+0x3e>
 8012658:	2300      	movs	r3, #0
 801265a:	2b00      	cmp	r3, #0
 801265c:	d109      	bne.n	8012672 <xQueueReceiveFromISR+0x56>
 801265e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012662:	f383 8811 	msr	BASEPRI, r3
 8012666:	f3bf 8f6f 	isb	sy
 801266a:	f3bf 8f4f 	dsb	sy
 801266e:	61fb      	str	r3, [r7, #28]
 8012670:	e7fe      	b.n	8012670 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012672:	f001 fc07 	bl	8013e84 <vPortValidateInterruptPriority>
	__asm volatile
 8012676:	f3ef 8211 	mrs	r2, BASEPRI
 801267a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801267e:	f383 8811 	msr	BASEPRI, r3
 8012682:	f3bf 8f6f 	isb	sy
 8012686:	f3bf 8f4f 	dsb	sy
 801268a:	61ba      	str	r2, [r7, #24]
 801268c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801268e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012690:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012696:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801269a:	2b00      	cmp	r3, #0
 801269c:	d02f      	beq.n	80126fe <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801269e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80126a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80126a8:	68b9      	ldr	r1, [r7, #8]
 80126aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80126ac:	f000 f89d 	bl	80127ea <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80126b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126b2:	1e5a      	subs	r2, r3, #1
 80126b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126b6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80126b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80126bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126c0:	d112      	bne.n	80126e8 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80126c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126c4:	691b      	ldr	r3, [r3, #16]
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d016      	beq.n	80126f8 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80126ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126cc:	3310      	adds	r3, #16
 80126ce:	4618      	mov	r0, r3
 80126d0:	f000 fd32 	bl	8013138 <xTaskRemoveFromEventList>
 80126d4:	4603      	mov	r3, r0
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d00e      	beq.n	80126f8 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d00b      	beq.n	80126f8 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	2201      	movs	r2, #1
 80126e4:	601a      	str	r2, [r3, #0]
 80126e6:	e007      	b.n	80126f8 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80126e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80126ec:	3301      	adds	r3, #1
 80126ee:	b2db      	uxtb	r3, r3
 80126f0:	b25a      	sxtb	r2, r3
 80126f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80126f8:	2301      	movs	r3, #1
 80126fa:	637b      	str	r3, [r7, #52]	; 0x34
 80126fc:	e001      	b.n	8012702 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80126fe:	2300      	movs	r3, #0
 8012700:	637b      	str	r3, [r7, #52]	; 0x34
 8012702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012704:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012706:	693b      	ldr	r3, [r7, #16]
 8012708:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801270c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801270e:	4618      	mov	r0, r3
 8012710:	3738      	adds	r7, #56	; 0x38
 8012712:	46bd      	mov	sp, r7
 8012714:	bd80      	pop	{r7, pc}

08012716 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012716:	b580      	push	{r7, lr}
 8012718:	b086      	sub	sp, #24
 801271a:	af00      	add	r7, sp, #0
 801271c:	60f8      	str	r0, [r7, #12]
 801271e:	60b9      	str	r1, [r7, #8]
 8012720:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8012722:	2300      	movs	r3, #0
 8012724:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012726:	68fb      	ldr	r3, [r7, #12]
 8012728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801272a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012730:	2b00      	cmp	r3, #0
 8012732:	d10d      	bne.n	8012750 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012734:	68fb      	ldr	r3, [r7, #12]
 8012736:	681b      	ldr	r3, [r3, #0]
 8012738:	2b00      	cmp	r3, #0
 801273a:	d14d      	bne.n	80127d8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	689b      	ldr	r3, [r3, #8]
 8012740:	4618      	mov	r0, r3
 8012742:	f000 fecd 	bl	80134e0 <xTaskPriorityDisinherit>
 8012746:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	2200      	movs	r2, #0
 801274c:	609a      	str	r2, [r3, #8]
 801274e:	e043      	b.n	80127d8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	2b00      	cmp	r3, #0
 8012754:	d119      	bne.n	801278a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012756:	68fb      	ldr	r3, [r7, #12]
 8012758:	6858      	ldr	r0, [r3, #4]
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801275e:	461a      	mov	r2, r3
 8012760:	68b9      	ldr	r1, [r7, #8]
 8012762:	f002 fb2b 	bl	8014dbc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012766:	68fb      	ldr	r3, [r7, #12]
 8012768:	685a      	ldr	r2, [r3, #4]
 801276a:	68fb      	ldr	r3, [r7, #12]
 801276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801276e:	441a      	add	r2, r3
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012774:	68fb      	ldr	r3, [r7, #12]
 8012776:	685a      	ldr	r2, [r3, #4]
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	689b      	ldr	r3, [r3, #8]
 801277c:	429a      	cmp	r2, r3
 801277e:	d32b      	bcc.n	80127d8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012780:	68fb      	ldr	r3, [r7, #12]
 8012782:	681a      	ldr	r2, [r3, #0]
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	605a      	str	r2, [r3, #4]
 8012788:	e026      	b.n	80127d8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801278a:	68fb      	ldr	r3, [r7, #12]
 801278c:	68d8      	ldr	r0, [r3, #12]
 801278e:	68fb      	ldr	r3, [r7, #12]
 8012790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012792:	461a      	mov	r2, r3
 8012794:	68b9      	ldr	r1, [r7, #8]
 8012796:	f002 fb11 	bl	8014dbc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801279a:	68fb      	ldr	r3, [r7, #12]
 801279c:	68da      	ldr	r2, [r3, #12]
 801279e:	68fb      	ldr	r3, [r7, #12]
 80127a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80127a2:	425b      	negs	r3, r3
 80127a4:	441a      	add	r2, r3
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80127aa:	68fb      	ldr	r3, [r7, #12]
 80127ac:	68da      	ldr	r2, [r3, #12]
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	681b      	ldr	r3, [r3, #0]
 80127b2:	429a      	cmp	r2, r3
 80127b4:	d207      	bcs.n	80127c6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	689a      	ldr	r2, [r3, #8]
 80127ba:	68fb      	ldr	r3, [r7, #12]
 80127bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80127be:	425b      	negs	r3, r3
 80127c0:	441a      	add	r2, r3
 80127c2:	68fb      	ldr	r3, [r7, #12]
 80127c4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	2b02      	cmp	r3, #2
 80127ca:	d105      	bne.n	80127d8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80127cc:	693b      	ldr	r3, [r7, #16]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d002      	beq.n	80127d8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80127d2:	693b      	ldr	r3, [r7, #16]
 80127d4:	3b01      	subs	r3, #1
 80127d6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80127d8:	693b      	ldr	r3, [r7, #16]
 80127da:	1c5a      	adds	r2, r3, #1
 80127dc:	68fb      	ldr	r3, [r7, #12]
 80127de:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80127e0:	697b      	ldr	r3, [r7, #20]
}
 80127e2:	4618      	mov	r0, r3
 80127e4:	3718      	adds	r7, #24
 80127e6:	46bd      	mov	sp, r7
 80127e8:	bd80      	pop	{r7, pc}

080127ea <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80127ea:	b580      	push	{r7, lr}
 80127ec:	b082      	sub	sp, #8
 80127ee:	af00      	add	r7, sp, #0
 80127f0:	6078      	str	r0, [r7, #4]
 80127f2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d018      	beq.n	801282e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	68da      	ldr	r2, [r3, #12]
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012804:	441a      	add	r2, r3
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	68da      	ldr	r2, [r3, #12]
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	689b      	ldr	r3, [r3, #8]
 8012812:	429a      	cmp	r2, r3
 8012814:	d303      	bcc.n	801281e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	681a      	ldr	r2, [r3, #0]
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	68d9      	ldr	r1, [r3, #12]
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012826:	461a      	mov	r2, r3
 8012828:	6838      	ldr	r0, [r7, #0]
 801282a:	f002 fac7 	bl	8014dbc <memcpy>
	}
}
 801282e:	bf00      	nop
 8012830:	3708      	adds	r7, #8
 8012832:	46bd      	mov	sp, r7
 8012834:	bd80      	pop	{r7, pc}

08012836 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012836:	b580      	push	{r7, lr}
 8012838:	b084      	sub	sp, #16
 801283a:	af00      	add	r7, sp, #0
 801283c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801283e:	f001 fa45 	bl	8013ccc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012848:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801284a:	e011      	b.n	8012870 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012850:	2b00      	cmp	r3, #0
 8012852:	d012      	beq.n	801287a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	3324      	adds	r3, #36	; 0x24
 8012858:	4618      	mov	r0, r3
 801285a:	f000 fc6d 	bl	8013138 <xTaskRemoveFromEventList>
 801285e:	4603      	mov	r3, r0
 8012860:	2b00      	cmp	r3, #0
 8012862:	d001      	beq.n	8012868 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8012864:	f000 fd40 	bl	80132e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012868:	7bfb      	ldrb	r3, [r7, #15]
 801286a:	3b01      	subs	r3, #1
 801286c:	b2db      	uxtb	r3, r3
 801286e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012870:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012874:	2b00      	cmp	r3, #0
 8012876:	dce9      	bgt.n	801284c <prvUnlockQueue+0x16>
 8012878:	e000      	b.n	801287c <prvUnlockQueue+0x46>
					break;
 801287a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	22ff      	movs	r2, #255	; 0xff
 8012880:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8012884:	f001 fa50 	bl	8013d28 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012888:	f001 fa20 	bl	8013ccc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012892:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012894:	e011      	b.n	80128ba <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	691b      	ldr	r3, [r3, #16]
 801289a:	2b00      	cmp	r3, #0
 801289c:	d012      	beq.n	80128c4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	3310      	adds	r3, #16
 80128a2:	4618      	mov	r0, r3
 80128a4:	f000 fc48 	bl	8013138 <xTaskRemoveFromEventList>
 80128a8:	4603      	mov	r3, r0
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d001      	beq.n	80128b2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80128ae:	f000 fd1b 	bl	80132e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80128b2:	7bbb      	ldrb	r3, [r7, #14]
 80128b4:	3b01      	subs	r3, #1
 80128b6:	b2db      	uxtb	r3, r3
 80128b8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80128ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80128be:	2b00      	cmp	r3, #0
 80128c0:	dce9      	bgt.n	8012896 <prvUnlockQueue+0x60>
 80128c2:	e000      	b.n	80128c6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80128c4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	22ff      	movs	r2, #255	; 0xff
 80128ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80128ce:	f001 fa2b 	bl	8013d28 <vPortExitCritical>
}
 80128d2:	bf00      	nop
 80128d4:	3710      	adds	r7, #16
 80128d6:	46bd      	mov	sp, r7
 80128d8:	bd80      	pop	{r7, pc}

080128da <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80128da:	b580      	push	{r7, lr}
 80128dc:	b084      	sub	sp, #16
 80128de:	af00      	add	r7, sp, #0
 80128e0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80128e2:	f001 f9f3 	bl	8013ccc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d102      	bne.n	80128f4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80128ee:	2301      	movs	r3, #1
 80128f0:	60fb      	str	r3, [r7, #12]
 80128f2:	e001      	b.n	80128f8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80128f4:	2300      	movs	r3, #0
 80128f6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80128f8:	f001 fa16 	bl	8013d28 <vPortExitCritical>

	return xReturn;
 80128fc:	68fb      	ldr	r3, [r7, #12]
}
 80128fe:	4618      	mov	r0, r3
 8012900:	3710      	adds	r7, #16
 8012902:	46bd      	mov	sp, r7
 8012904:	bd80      	pop	{r7, pc}

08012906 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012906:	b580      	push	{r7, lr}
 8012908:	b084      	sub	sp, #16
 801290a:	af00      	add	r7, sp, #0
 801290c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801290e:	f001 f9dd 	bl	8013ccc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801291a:	429a      	cmp	r2, r3
 801291c:	d102      	bne.n	8012924 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801291e:	2301      	movs	r3, #1
 8012920:	60fb      	str	r3, [r7, #12]
 8012922:	e001      	b.n	8012928 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8012924:	2300      	movs	r3, #0
 8012926:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012928:	f001 f9fe 	bl	8013d28 <vPortExitCritical>

	return xReturn;
 801292c:	68fb      	ldr	r3, [r7, #12]
}
 801292e:	4618      	mov	r0, r3
 8012930:	3710      	adds	r7, #16
 8012932:	46bd      	mov	sp, r7
 8012934:	bd80      	pop	{r7, pc}

08012936 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8012936:	b580      	push	{r7, lr}
 8012938:	b08e      	sub	sp, #56	; 0x38
 801293a:	af04      	add	r7, sp, #16
 801293c:	60f8      	str	r0, [r7, #12]
 801293e:	60b9      	str	r1, [r7, #8]
 8012940:	607a      	str	r2, [r7, #4]
 8012942:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8012944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012946:	2b00      	cmp	r3, #0
 8012948:	d109      	bne.n	801295e <xTaskCreateStatic+0x28>
	__asm volatile
 801294a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801294e:	f383 8811 	msr	BASEPRI, r3
 8012952:	f3bf 8f6f 	isb	sy
 8012956:	f3bf 8f4f 	dsb	sy
 801295a:	623b      	str	r3, [r7, #32]
 801295c:	e7fe      	b.n	801295c <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 801295e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012960:	2b00      	cmp	r3, #0
 8012962:	d109      	bne.n	8012978 <xTaskCreateStatic+0x42>
 8012964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012968:	f383 8811 	msr	BASEPRI, r3
 801296c:	f3bf 8f6f 	isb	sy
 8012970:	f3bf 8f4f 	dsb	sy
 8012974:	61fb      	str	r3, [r7, #28]
 8012976:	e7fe      	b.n	8012976 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8012978:	2354      	movs	r3, #84	; 0x54
 801297a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801297c:	693b      	ldr	r3, [r7, #16]
 801297e:	2b54      	cmp	r3, #84	; 0x54
 8012980:	d009      	beq.n	8012996 <xTaskCreateStatic+0x60>
 8012982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012986:	f383 8811 	msr	BASEPRI, r3
 801298a:	f3bf 8f6f 	isb	sy
 801298e:	f3bf 8f4f 	dsb	sy
 8012992:	61bb      	str	r3, [r7, #24]
 8012994:	e7fe      	b.n	8012994 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8012996:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8012998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801299a:	2b00      	cmp	r3, #0
 801299c:	d01e      	beq.n	80129dc <xTaskCreateStatic+0xa6>
 801299e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d01b      	beq.n	80129dc <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80129a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129a6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80129a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80129ac:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80129ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129b0:	2202      	movs	r2, #2
 80129b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80129b6:	2300      	movs	r3, #0
 80129b8:	9303      	str	r3, [sp, #12]
 80129ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129bc:	9302      	str	r3, [sp, #8]
 80129be:	f107 0314 	add.w	r3, r7, #20
 80129c2:	9301      	str	r3, [sp, #4]
 80129c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129c6:	9300      	str	r3, [sp, #0]
 80129c8:	683b      	ldr	r3, [r7, #0]
 80129ca:	687a      	ldr	r2, [r7, #4]
 80129cc:	68b9      	ldr	r1, [r7, #8]
 80129ce:	68f8      	ldr	r0, [r7, #12]
 80129d0:	f000 f850 	bl	8012a74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80129d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80129d6:	f000 f8d3 	bl	8012b80 <prvAddNewTaskToReadyList>
 80129da:	e001      	b.n	80129e0 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80129dc:	2300      	movs	r3, #0
 80129de:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80129e0:	697b      	ldr	r3, [r7, #20]
	}
 80129e2:	4618      	mov	r0, r3
 80129e4:	3728      	adds	r7, #40	; 0x28
 80129e6:	46bd      	mov	sp, r7
 80129e8:	bd80      	pop	{r7, pc}

080129ea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80129ea:	b580      	push	{r7, lr}
 80129ec:	b08c      	sub	sp, #48	; 0x30
 80129ee:	af04      	add	r7, sp, #16
 80129f0:	60f8      	str	r0, [r7, #12]
 80129f2:	60b9      	str	r1, [r7, #8]
 80129f4:	603b      	str	r3, [r7, #0]
 80129f6:	4613      	mov	r3, r2
 80129f8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80129fa:	88fb      	ldrh	r3, [r7, #6]
 80129fc:	009b      	lsls	r3, r3, #2
 80129fe:	4618      	mov	r0, r3
 8012a00:	f001 fa7e 	bl	8013f00 <pvPortMalloc>
 8012a04:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012a06:	697b      	ldr	r3, [r7, #20]
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d00e      	beq.n	8012a2a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8012a0c:	2054      	movs	r0, #84	; 0x54
 8012a0e:	f001 fa77 	bl	8013f00 <pvPortMalloc>
 8012a12:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012a14:	69fb      	ldr	r3, [r7, #28]
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d003      	beq.n	8012a22 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8012a1a:	69fb      	ldr	r3, [r7, #28]
 8012a1c:	697a      	ldr	r2, [r7, #20]
 8012a1e:	631a      	str	r2, [r3, #48]	; 0x30
 8012a20:	e005      	b.n	8012a2e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012a22:	6978      	ldr	r0, [r7, #20]
 8012a24:	f001 fb2e 	bl	8014084 <vPortFree>
 8012a28:	e001      	b.n	8012a2e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8012a2a:	2300      	movs	r3, #0
 8012a2c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8012a2e:	69fb      	ldr	r3, [r7, #28]
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d017      	beq.n	8012a64 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012a34:	69fb      	ldr	r3, [r7, #28]
 8012a36:	2200      	movs	r2, #0
 8012a38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012a3c:	88fa      	ldrh	r2, [r7, #6]
 8012a3e:	2300      	movs	r3, #0
 8012a40:	9303      	str	r3, [sp, #12]
 8012a42:	69fb      	ldr	r3, [r7, #28]
 8012a44:	9302      	str	r3, [sp, #8]
 8012a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a48:	9301      	str	r3, [sp, #4]
 8012a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a4c:	9300      	str	r3, [sp, #0]
 8012a4e:	683b      	ldr	r3, [r7, #0]
 8012a50:	68b9      	ldr	r1, [r7, #8]
 8012a52:	68f8      	ldr	r0, [r7, #12]
 8012a54:	f000 f80e 	bl	8012a74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012a58:	69f8      	ldr	r0, [r7, #28]
 8012a5a:	f000 f891 	bl	8012b80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8012a5e:	2301      	movs	r3, #1
 8012a60:	61bb      	str	r3, [r7, #24]
 8012a62:	e002      	b.n	8012a6a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012a64:	f04f 33ff 	mov.w	r3, #4294967295
 8012a68:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8012a6a:	69bb      	ldr	r3, [r7, #24]
	}
 8012a6c:	4618      	mov	r0, r3
 8012a6e:	3720      	adds	r7, #32
 8012a70:	46bd      	mov	sp, r7
 8012a72:	bd80      	pop	{r7, pc}

08012a74 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012a74:	b580      	push	{r7, lr}
 8012a76:	b088      	sub	sp, #32
 8012a78:	af00      	add	r7, sp, #0
 8012a7a:	60f8      	str	r0, [r7, #12]
 8012a7c:	60b9      	str	r1, [r7, #8]
 8012a7e:	607a      	str	r2, [r7, #4]
 8012a80:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8012a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012a8c:	3b01      	subs	r3, #1
 8012a8e:	009b      	lsls	r3, r3, #2
 8012a90:	4413      	add	r3, r2
 8012a92:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8012a94:	69bb      	ldr	r3, [r7, #24]
 8012a96:	f023 0307 	bic.w	r3, r3, #7
 8012a9a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8012a9c:	69bb      	ldr	r3, [r7, #24]
 8012a9e:	f003 0307 	and.w	r3, r3, #7
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d009      	beq.n	8012aba <prvInitialiseNewTask+0x46>
 8012aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012aaa:	f383 8811 	msr	BASEPRI, r3
 8012aae:	f3bf 8f6f 	isb	sy
 8012ab2:	f3bf 8f4f 	dsb	sy
 8012ab6:	617b      	str	r3, [r7, #20]
 8012ab8:	e7fe      	b.n	8012ab8 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8012aba:	68bb      	ldr	r3, [r7, #8]
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d01f      	beq.n	8012b00 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012ac0:	2300      	movs	r3, #0
 8012ac2:	61fb      	str	r3, [r7, #28]
 8012ac4:	e012      	b.n	8012aec <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012ac6:	68ba      	ldr	r2, [r7, #8]
 8012ac8:	69fb      	ldr	r3, [r7, #28]
 8012aca:	4413      	add	r3, r2
 8012acc:	7819      	ldrb	r1, [r3, #0]
 8012ace:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012ad0:	69fb      	ldr	r3, [r7, #28]
 8012ad2:	4413      	add	r3, r2
 8012ad4:	3334      	adds	r3, #52	; 0x34
 8012ad6:	460a      	mov	r2, r1
 8012ad8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8012ada:	68ba      	ldr	r2, [r7, #8]
 8012adc:	69fb      	ldr	r3, [r7, #28]
 8012ade:	4413      	add	r3, r2
 8012ae0:	781b      	ldrb	r3, [r3, #0]
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	d006      	beq.n	8012af4 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012ae6:	69fb      	ldr	r3, [r7, #28]
 8012ae8:	3301      	adds	r3, #1
 8012aea:	61fb      	str	r3, [r7, #28]
 8012aec:	69fb      	ldr	r3, [r7, #28]
 8012aee:	2b0f      	cmp	r3, #15
 8012af0:	d9e9      	bls.n	8012ac6 <prvInitialiseNewTask+0x52>
 8012af2:	e000      	b.n	8012af6 <prvInitialiseNewTask+0x82>
			{
				break;
 8012af4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012af8:	2200      	movs	r2, #0
 8012afa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012afe:	e003      	b.n	8012b08 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8012b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b02:	2200      	movs	r2, #0
 8012b04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8012b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b0a:	2b06      	cmp	r3, #6
 8012b0c:	d901      	bls.n	8012b12 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012b0e:	2306      	movs	r3, #6
 8012b10:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012b16:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8012b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012b1c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8012b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b20:	2200      	movs	r2, #0
 8012b22:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b26:	3304      	adds	r3, #4
 8012b28:	4618      	mov	r0, r3
 8012b2a:	f7ff f8f2 	bl	8011d12 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b30:	3318      	adds	r3, #24
 8012b32:	4618      	mov	r0, r3
 8012b34:	f7ff f8ed 	bl	8011d12 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012b3c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b40:	f1c3 0207 	rsb	r2, r3, #7
 8012b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b46:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012b4c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b50:	2200      	movs	r2, #0
 8012b52:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b56:	2200      	movs	r2, #0
 8012b58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012b5c:	683a      	ldr	r2, [r7, #0]
 8012b5e:	68f9      	ldr	r1, [r7, #12]
 8012b60:	69b8      	ldr	r0, [r7, #24]
 8012b62:	f000 ff8b 	bl	8013a7c <pxPortInitialiseStack>
 8012b66:	4602      	mov	r2, r0
 8012b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b6a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8012b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d002      	beq.n	8012b78 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012b76:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012b78:	bf00      	nop
 8012b7a:	3720      	adds	r7, #32
 8012b7c:	46bd      	mov	sp, r7
 8012b7e:	bd80      	pop	{r7, pc}

08012b80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012b80:	b580      	push	{r7, lr}
 8012b82:	b082      	sub	sp, #8
 8012b84:	af00      	add	r7, sp, #0
 8012b86:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012b88:	f001 f8a0 	bl	8013ccc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012b8c:	4b2a      	ldr	r3, [pc, #168]	; (8012c38 <prvAddNewTaskToReadyList+0xb8>)
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	3301      	adds	r3, #1
 8012b92:	4a29      	ldr	r2, [pc, #164]	; (8012c38 <prvAddNewTaskToReadyList+0xb8>)
 8012b94:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8012b96:	4b29      	ldr	r3, [pc, #164]	; (8012c3c <prvAddNewTaskToReadyList+0xbc>)
 8012b98:	681b      	ldr	r3, [r3, #0]
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d109      	bne.n	8012bb2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8012b9e:	4a27      	ldr	r2, [pc, #156]	; (8012c3c <prvAddNewTaskToReadyList+0xbc>)
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012ba4:	4b24      	ldr	r3, [pc, #144]	; (8012c38 <prvAddNewTaskToReadyList+0xb8>)
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	2b01      	cmp	r3, #1
 8012baa:	d110      	bne.n	8012bce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012bac:	f000 fbc0 	bl	8013330 <prvInitialiseTaskLists>
 8012bb0:	e00d      	b.n	8012bce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8012bb2:	4b23      	ldr	r3, [pc, #140]	; (8012c40 <prvAddNewTaskToReadyList+0xc0>)
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d109      	bne.n	8012bce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012bba:	4b20      	ldr	r3, [pc, #128]	; (8012c3c <prvAddNewTaskToReadyList+0xbc>)
 8012bbc:	681b      	ldr	r3, [r3, #0]
 8012bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bc4:	429a      	cmp	r2, r3
 8012bc6:	d802      	bhi.n	8012bce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012bc8:	4a1c      	ldr	r2, [pc, #112]	; (8012c3c <prvAddNewTaskToReadyList+0xbc>)
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8012bce:	4b1d      	ldr	r3, [pc, #116]	; (8012c44 <prvAddNewTaskToReadyList+0xc4>)
 8012bd0:	681b      	ldr	r3, [r3, #0]
 8012bd2:	3301      	adds	r3, #1
 8012bd4:	4a1b      	ldr	r2, [pc, #108]	; (8012c44 <prvAddNewTaskToReadyList+0xc4>)
 8012bd6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bdc:	2201      	movs	r2, #1
 8012bde:	409a      	lsls	r2, r3
 8012be0:	4b19      	ldr	r3, [pc, #100]	; (8012c48 <prvAddNewTaskToReadyList+0xc8>)
 8012be2:	681b      	ldr	r3, [r3, #0]
 8012be4:	4313      	orrs	r3, r2
 8012be6:	4a18      	ldr	r2, [pc, #96]	; (8012c48 <prvAddNewTaskToReadyList+0xc8>)
 8012be8:	6013      	str	r3, [r2, #0]
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012bee:	4613      	mov	r3, r2
 8012bf0:	009b      	lsls	r3, r3, #2
 8012bf2:	4413      	add	r3, r2
 8012bf4:	009b      	lsls	r3, r3, #2
 8012bf6:	4a15      	ldr	r2, [pc, #84]	; (8012c4c <prvAddNewTaskToReadyList+0xcc>)
 8012bf8:	441a      	add	r2, r3
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	3304      	adds	r3, #4
 8012bfe:	4619      	mov	r1, r3
 8012c00:	4610      	mov	r0, r2
 8012c02:	f7ff f893 	bl	8011d2c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012c06:	f001 f88f 	bl	8013d28 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8012c0a:	4b0d      	ldr	r3, [pc, #52]	; (8012c40 <prvAddNewTaskToReadyList+0xc0>)
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d00e      	beq.n	8012c30 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012c12:	4b0a      	ldr	r3, [pc, #40]	; (8012c3c <prvAddNewTaskToReadyList+0xbc>)
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c1c:	429a      	cmp	r2, r3
 8012c1e:	d207      	bcs.n	8012c30 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012c20:	4b0b      	ldr	r3, [pc, #44]	; (8012c50 <prvAddNewTaskToReadyList+0xd0>)
 8012c22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012c26:	601a      	str	r2, [r3, #0]
 8012c28:	f3bf 8f4f 	dsb	sy
 8012c2c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012c30:	bf00      	nop
 8012c32:	3708      	adds	r7, #8
 8012c34:	46bd      	mov	sp, r7
 8012c36:	bd80      	pop	{r7, pc}
 8012c38:	20002964 	.word	0x20002964
 8012c3c:	20002864 	.word	0x20002864
 8012c40:	20002970 	.word	0x20002970
 8012c44:	20002980 	.word	0x20002980
 8012c48:	2000296c 	.word	0x2000296c
 8012c4c:	20002868 	.word	0x20002868
 8012c50:	e000ed04 	.word	0xe000ed04

08012c54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012c54:	b580      	push	{r7, lr}
 8012c56:	b084      	sub	sp, #16
 8012c58:	af00      	add	r7, sp, #0
 8012c5a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012c5c:	2300      	movs	r3, #0
 8012c5e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d016      	beq.n	8012c94 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8012c66:	4b13      	ldr	r3, [pc, #76]	; (8012cb4 <vTaskDelay+0x60>)
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d009      	beq.n	8012c82 <vTaskDelay+0x2e>
 8012c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c72:	f383 8811 	msr	BASEPRI, r3
 8012c76:	f3bf 8f6f 	isb	sy
 8012c7a:	f3bf 8f4f 	dsb	sy
 8012c7e:	60bb      	str	r3, [r7, #8]
 8012c80:	e7fe      	b.n	8012c80 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8012c82:	f000 f879 	bl	8012d78 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8012c86:	2100      	movs	r1, #0
 8012c88:	6878      	ldr	r0, [r7, #4]
 8012c8a:	f000 fe91 	bl	80139b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012c8e:	f000 f881 	bl	8012d94 <xTaskResumeAll>
 8012c92:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012c94:	68fb      	ldr	r3, [r7, #12]
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d107      	bne.n	8012caa <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8012c9a:	4b07      	ldr	r3, [pc, #28]	; (8012cb8 <vTaskDelay+0x64>)
 8012c9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012ca0:	601a      	str	r2, [r3, #0]
 8012ca2:	f3bf 8f4f 	dsb	sy
 8012ca6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012caa:	bf00      	nop
 8012cac:	3710      	adds	r7, #16
 8012cae:	46bd      	mov	sp, r7
 8012cb0:	bd80      	pop	{r7, pc}
 8012cb2:	bf00      	nop
 8012cb4:	2000298c 	.word	0x2000298c
 8012cb8:	e000ed04 	.word	0xe000ed04

08012cbc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012cbc:	b580      	push	{r7, lr}
 8012cbe:	b08a      	sub	sp, #40	; 0x28
 8012cc0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012cc2:	2300      	movs	r3, #0
 8012cc4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8012cc6:	2300      	movs	r3, #0
 8012cc8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8012cca:	463a      	mov	r2, r7
 8012ccc:	1d39      	adds	r1, r7, #4
 8012cce:	f107 0308 	add.w	r3, r7, #8
 8012cd2:	4618      	mov	r0, r3
 8012cd4:	f7ef fb86 	bl	80023e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8012cd8:	6839      	ldr	r1, [r7, #0]
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	68ba      	ldr	r2, [r7, #8]
 8012cde:	9202      	str	r2, [sp, #8]
 8012ce0:	9301      	str	r3, [sp, #4]
 8012ce2:	2300      	movs	r3, #0
 8012ce4:	9300      	str	r3, [sp, #0]
 8012ce6:	2300      	movs	r3, #0
 8012ce8:	460a      	mov	r2, r1
 8012cea:	491d      	ldr	r1, [pc, #116]	; (8012d60 <vTaskStartScheduler+0xa4>)
 8012cec:	481d      	ldr	r0, [pc, #116]	; (8012d64 <vTaskStartScheduler+0xa8>)
 8012cee:	f7ff fe22 	bl	8012936 <xTaskCreateStatic>
 8012cf2:	4602      	mov	r2, r0
 8012cf4:	4b1c      	ldr	r3, [pc, #112]	; (8012d68 <vTaskStartScheduler+0xac>)
 8012cf6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012cf8:	4b1b      	ldr	r3, [pc, #108]	; (8012d68 <vTaskStartScheduler+0xac>)
 8012cfa:	681b      	ldr	r3, [r3, #0]
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d002      	beq.n	8012d06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012d00:	2301      	movs	r3, #1
 8012d02:	617b      	str	r3, [r7, #20]
 8012d04:	e001      	b.n	8012d0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8012d06:	2300      	movs	r3, #0
 8012d08:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012d0a:	697b      	ldr	r3, [r7, #20]
 8012d0c:	2b01      	cmp	r3, #1
 8012d0e:	d115      	bne.n	8012d3c <vTaskStartScheduler+0x80>
 8012d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d14:	f383 8811 	msr	BASEPRI, r3
 8012d18:	f3bf 8f6f 	isb	sy
 8012d1c:	f3bf 8f4f 	dsb	sy
 8012d20:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012d22:	4b12      	ldr	r3, [pc, #72]	; (8012d6c <vTaskStartScheduler+0xb0>)
 8012d24:	f04f 32ff 	mov.w	r2, #4294967295
 8012d28:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012d2a:	4b11      	ldr	r3, [pc, #68]	; (8012d70 <vTaskStartScheduler+0xb4>)
 8012d2c:	2201      	movs	r2, #1
 8012d2e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012d30:	4b10      	ldr	r3, [pc, #64]	; (8012d74 <vTaskStartScheduler+0xb8>)
 8012d32:	2200      	movs	r2, #0
 8012d34:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012d36:	f000 ff2b 	bl	8013b90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012d3a:	e00d      	b.n	8012d58 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012d3c:	697b      	ldr	r3, [r7, #20]
 8012d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d42:	d109      	bne.n	8012d58 <vTaskStartScheduler+0x9c>
 8012d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d48:	f383 8811 	msr	BASEPRI, r3
 8012d4c:	f3bf 8f6f 	isb	sy
 8012d50:	f3bf 8f4f 	dsb	sy
 8012d54:	60fb      	str	r3, [r7, #12]
 8012d56:	e7fe      	b.n	8012d56 <vTaskStartScheduler+0x9a>
}
 8012d58:	bf00      	nop
 8012d5a:	3718      	adds	r7, #24
 8012d5c:	46bd      	mov	sp, r7
 8012d5e:	bd80      	pop	{r7, pc}
 8012d60:	0801a504 	.word	0x0801a504
 8012d64:	08013301 	.word	0x08013301
 8012d68:	20002988 	.word	0x20002988
 8012d6c:	20002984 	.word	0x20002984
 8012d70:	20002970 	.word	0x20002970
 8012d74:	20002968 	.word	0x20002968

08012d78 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012d78:	b480      	push	{r7}
 8012d7a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8012d7c:	4b04      	ldr	r3, [pc, #16]	; (8012d90 <vTaskSuspendAll+0x18>)
 8012d7e:	681b      	ldr	r3, [r3, #0]
 8012d80:	3301      	adds	r3, #1
 8012d82:	4a03      	ldr	r2, [pc, #12]	; (8012d90 <vTaskSuspendAll+0x18>)
 8012d84:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8012d86:	bf00      	nop
 8012d88:	46bd      	mov	sp, r7
 8012d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d8e:	4770      	bx	lr
 8012d90:	2000298c 	.word	0x2000298c

08012d94 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012d94:	b580      	push	{r7, lr}
 8012d96:	b084      	sub	sp, #16
 8012d98:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012d9a:	2300      	movs	r3, #0
 8012d9c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8012d9e:	2300      	movs	r3, #0
 8012da0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8012da2:	4b41      	ldr	r3, [pc, #260]	; (8012ea8 <xTaskResumeAll+0x114>)
 8012da4:	681b      	ldr	r3, [r3, #0]
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d109      	bne.n	8012dbe <xTaskResumeAll+0x2a>
 8012daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dae:	f383 8811 	msr	BASEPRI, r3
 8012db2:	f3bf 8f6f 	isb	sy
 8012db6:	f3bf 8f4f 	dsb	sy
 8012dba:	603b      	str	r3, [r7, #0]
 8012dbc:	e7fe      	b.n	8012dbc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012dbe:	f000 ff85 	bl	8013ccc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012dc2:	4b39      	ldr	r3, [pc, #228]	; (8012ea8 <xTaskResumeAll+0x114>)
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	3b01      	subs	r3, #1
 8012dc8:	4a37      	ldr	r2, [pc, #220]	; (8012ea8 <xTaskResumeAll+0x114>)
 8012dca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012dcc:	4b36      	ldr	r3, [pc, #216]	; (8012ea8 <xTaskResumeAll+0x114>)
 8012dce:	681b      	ldr	r3, [r3, #0]
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d161      	bne.n	8012e98 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012dd4:	4b35      	ldr	r3, [pc, #212]	; (8012eac <xTaskResumeAll+0x118>)
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d05d      	beq.n	8012e98 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012ddc:	e02e      	b.n	8012e3c <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012dde:	4b34      	ldr	r3, [pc, #208]	; (8012eb0 <xTaskResumeAll+0x11c>)
 8012de0:	68db      	ldr	r3, [r3, #12]
 8012de2:	68db      	ldr	r3, [r3, #12]
 8012de4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	3318      	adds	r3, #24
 8012dea:	4618      	mov	r0, r3
 8012dec:	f7fe fffb 	bl	8011de6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	3304      	adds	r3, #4
 8012df4:	4618      	mov	r0, r3
 8012df6:	f7fe fff6 	bl	8011de6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012dfa:	68fb      	ldr	r3, [r7, #12]
 8012dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012dfe:	2201      	movs	r2, #1
 8012e00:	409a      	lsls	r2, r3
 8012e02:	4b2c      	ldr	r3, [pc, #176]	; (8012eb4 <xTaskResumeAll+0x120>)
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	4313      	orrs	r3, r2
 8012e08:	4a2a      	ldr	r2, [pc, #168]	; (8012eb4 <xTaskResumeAll+0x120>)
 8012e0a:	6013      	str	r3, [r2, #0]
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e10:	4613      	mov	r3, r2
 8012e12:	009b      	lsls	r3, r3, #2
 8012e14:	4413      	add	r3, r2
 8012e16:	009b      	lsls	r3, r3, #2
 8012e18:	4a27      	ldr	r2, [pc, #156]	; (8012eb8 <xTaskResumeAll+0x124>)
 8012e1a:	441a      	add	r2, r3
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	3304      	adds	r3, #4
 8012e20:	4619      	mov	r1, r3
 8012e22:	4610      	mov	r0, r2
 8012e24:	f7fe ff82 	bl	8011d2c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e2c:	4b23      	ldr	r3, [pc, #140]	; (8012ebc <xTaskResumeAll+0x128>)
 8012e2e:	681b      	ldr	r3, [r3, #0]
 8012e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e32:	429a      	cmp	r2, r3
 8012e34:	d302      	bcc.n	8012e3c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8012e36:	4b22      	ldr	r3, [pc, #136]	; (8012ec0 <xTaskResumeAll+0x12c>)
 8012e38:	2201      	movs	r2, #1
 8012e3a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012e3c:	4b1c      	ldr	r3, [pc, #112]	; (8012eb0 <xTaskResumeAll+0x11c>)
 8012e3e:	681b      	ldr	r3, [r3, #0]
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d1cc      	bne.n	8012dde <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d001      	beq.n	8012e4e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012e4a:	f000 fb0b 	bl	8013464 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8012e4e:	4b1d      	ldr	r3, [pc, #116]	; (8012ec4 <xTaskResumeAll+0x130>)
 8012e50:	681b      	ldr	r3, [r3, #0]
 8012e52:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d010      	beq.n	8012e7c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012e5a:	f000 f837 	bl	8012ecc <xTaskIncrementTick>
 8012e5e:	4603      	mov	r3, r0
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d002      	beq.n	8012e6a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8012e64:	4b16      	ldr	r3, [pc, #88]	; (8012ec0 <xTaskResumeAll+0x12c>)
 8012e66:	2201      	movs	r2, #1
 8012e68:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	3b01      	subs	r3, #1
 8012e6e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d1f1      	bne.n	8012e5a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8012e76:	4b13      	ldr	r3, [pc, #76]	; (8012ec4 <xTaskResumeAll+0x130>)
 8012e78:	2200      	movs	r2, #0
 8012e7a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8012e7c:	4b10      	ldr	r3, [pc, #64]	; (8012ec0 <xTaskResumeAll+0x12c>)
 8012e7e:	681b      	ldr	r3, [r3, #0]
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d009      	beq.n	8012e98 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012e84:	2301      	movs	r3, #1
 8012e86:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012e88:	4b0f      	ldr	r3, [pc, #60]	; (8012ec8 <xTaskResumeAll+0x134>)
 8012e8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e8e:	601a      	str	r2, [r3, #0]
 8012e90:	f3bf 8f4f 	dsb	sy
 8012e94:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012e98:	f000 ff46 	bl	8013d28 <vPortExitCritical>

	return xAlreadyYielded;
 8012e9c:	68bb      	ldr	r3, [r7, #8]
}
 8012e9e:	4618      	mov	r0, r3
 8012ea0:	3710      	adds	r7, #16
 8012ea2:	46bd      	mov	sp, r7
 8012ea4:	bd80      	pop	{r7, pc}
 8012ea6:	bf00      	nop
 8012ea8:	2000298c 	.word	0x2000298c
 8012eac:	20002964 	.word	0x20002964
 8012eb0:	20002924 	.word	0x20002924
 8012eb4:	2000296c 	.word	0x2000296c
 8012eb8:	20002868 	.word	0x20002868
 8012ebc:	20002864 	.word	0x20002864
 8012ec0:	20002978 	.word	0x20002978
 8012ec4:	20002974 	.word	0x20002974
 8012ec8:	e000ed04 	.word	0xe000ed04

08012ecc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012ecc:	b580      	push	{r7, lr}
 8012ece:	b086      	sub	sp, #24
 8012ed0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012ed2:	2300      	movs	r3, #0
 8012ed4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012ed6:	4b4e      	ldr	r3, [pc, #312]	; (8013010 <xTaskIncrementTick+0x144>)
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	f040 8087 	bne.w	8012fee <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012ee0:	4b4c      	ldr	r3, [pc, #304]	; (8013014 <xTaskIncrementTick+0x148>)
 8012ee2:	681b      	ldr	r3, [r3, #0]
 8012ee4:	3301      	adds	r3, #1
 8012ee6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012ee8:	4a4a      	ldr	r2, [pc, #296]	; (8013014 <xTaskIncrementTick+0x148>)
 8012eea:	693b      	ldr	r3, [r7, #16]
 8012eec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012eee:	693b      	ldr	r3, [r7, #16]
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d11f      	bne.n	8012f34 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8012ef4:	4b48      	ldr	r3, [pc, #288]	; (8013018 <xTaskIncrementTick+0x14c>)
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	681b      	ldr	r3, [r3, #0]
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d009      	beq.n	8012f12 <xTaskIncrementTick+0x46>
 8012efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f02:	f383 8811 	msr	BASEPRI, r3
 8012f06:	f3bf 8f6f 	isb	sy
 8012f0a:	f3bf 8f4f 	dsb	sy
 8012f0e:	603b      	str	r3, [r7, #0]
 8012f10:	e7fe      	b.n	8012f10 <xTaskIncrementTick+0x44>
 8012f12:	4b41      	ldr	r3, [pc, #260]	; (8013018 <xTaskIncrementTick+0x14c>)
 8012f14:	681b      	ldr	r3, [r3, #0]
 8012f16:	60fb      	str	r3, [r7, #12]
 8012f18:	4b40      	ldr	r3, [pc, #256]	; (801301c <xTaskIncrementTick+0x150>)
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	4a3e      	ldr	r2, [pc, #248]	; (8013018 <xTaskIncrementTick+0x14c>)
 8012f1e:	6013      	str	r3, [r2, #0]
 8012f20:	4a3e      	ldr	r2, [pc, #248]	; (801301c <xTaskIncrementTick+0x150>)
 8012f22:	68fb      	ldr	r3, [r7, #12]
 8012f24:	6013      	str	r3, [r2, #0]
 8012f26:	4b3e      	ldr	r3, [pc, #248]	; (8013020 <xTaskIncrementTick+0x154>)
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	3301      	adds	r3, #1
 8012f2c:	4a3c      	ldr	r2, [pc, #240]	; (8013020 <xTaskIncrementTick+0x154>)
 8012f2e:	6013      	str	r3, [r2, #0]
 8012f30:	f000 fa98 	bl	8013464 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012f34:	4b3b      	ldr	r3, [pc, #236]	; (8013024 <xTaskIncrementTick+0x158>)
 8012f36:	681b      	ldr	r3, [r3, #0]
 8012f38:	693a      	ldr	r2, [r7, #16]
 8012f3a:	429a      	cmp	r2, r3
 8012f3c:	d348      	bcc.n	8012fd0 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012f3e:	4b36      	ldr	r3, [pc, #216]	; (8013018 <xTaskIncrementTick+0x14c>)
 8012f40:	681b      	ldr	r3, [r3, #0]
 8012f42:	681b      	ldr	r3, [r3, #0]
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	d104      	bne.n	8012f52 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012f48:	4b36      	ldr	r3, [pc, #216]	; (8013024 <xTaskIncrementTick+0x158>)
 8012f4a:	f04f 32ff 	mov.w	r2, #4294967295
 8012f4e:	601a      	str	r2, [r3, #0]
					break;
 8012f50:	e03e      	b.n	8012fd0 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012f52:	4b31      	ldr	r3, [pc, #196]	; (8013018 <xTaskIncrementTick+0x14c>)
 8012f54:	681b      	ldr	r3, [r3, #0]
 8012f56:	68db      	ldr	r3, [r3, #12]
 8012f58:	68db      	ldr	r3, [r3, #12]
 8012f5a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012f5c:	68bb      	ldr	r3, [r7, #8]
 8012f5e:	685b      	ldr	r3, [r3, #4]
 8012f60:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012f62:	693a      	ldr	r2, [r7, #16]
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	429a      	cmp	r2, r3
 8012f68:	d203      	bcs.n	8012f72 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012f6a:	4a2e      	ldr	r2, [pc, #184]	; (8013024 <xTaskIncrementTick+0x158>)
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8012f70:	e02e      	b.n	8012fd0 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012f72:	68bb      	ldr	r3, [r7, #8]
 8012f74:	3304      	adds	r3, #4
 8012f76:	4618      	mov	r0, r3
 8012f78:	f7fe ff35 	bl	8011de6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012f7c:	68bb      	ldr	r3, [r7, #8]
 8012f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d004      	beq.n	8012f8e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012f84:	68bb      	ldr	r3, [r7, #8]
 8012f86:	3318      	adds	r3, #24
 8012f88:	4618      	mov	r0, r3
 8012f8a:	f7fe ff2c 	bl	8011de6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012f8e:	68bb      	ldr	r3, [r7, #8]
 8012f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f92:	2201      	movs	r2, #1
 8012f94:	409a      	lsls	r2, r3
 8012f96:	4b24      	ldr	r3, [pc, #144]	; (8013028 <xTaskIncrementTick+0x15c>)
 8012f98:	681b      	ldr	r3, [r3, #0]
 8012f9a:	4313      	orrs	r3, r2
 8012f9c:	4a22      	ldr	r2, [pc, #136]	; (8013028 <xTaskIncrementTick+0x15c>)
 8012f9e:	6013      	str	r3, [r2, #0]
 8012fa0:	68bb      	ldr	r3, [r7, #8]
 8012fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012fa4:	4613      	mov	r3, r2
 8012fa6:	009b      	lsls	r3, r3, #2
 8012fa8:	4413      	add	r3, r2
 8012faa:	009b      	lsls	r3, r3, #2
 8012fac:	4a1f      	ldr	r2, [pc, #124]	; (801302c <xTaskIncrementTick+0x160>)
 8012fae:	441a      	add	r2, r3
 8012fb0:	68bb      	ldr	r3, [r7, #8]
 8012fb2:	3304      	adds	r3, #4
 8012fb4:	4619      	mov	r1, r3
 8012fb6:	4610      	mov	r0, r2
 8012fb8:	f7fe feb8 	bl	8011d2c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012fbc:	68bb      	ldr	r3, [r7, #8]
 8012fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012fc0:	4b1b      	ldr	r3, [pc, #108]	; (8013030 <xTaskIncrementTick+0x164>)
 8012fc2:	681b      	ldr	r3, [r3, #0]
 8012fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fc6:	429a      	cmp	r2, r3
 8012fc8:	d3b9      	bcc.n	8012f3e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8012fca:	2301      	movs	r3, #1
 8012fcc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012fce:	e7b6      	b.n	8012f3e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012fd0:	4b17      	ldr	r3, [pc, #92]	; (8013030 <xTaskIncrementTick+0x164>)
 8012fd2:	681b      	ldr	r3, [r3, #0]
 8012fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012fd6:	4915      	ldr	r1, [pc, #84]	; (801302c <xTaskIncrementTick+0x160>)
 8012fd8:	4613      	mov	r3, r2
 8012fda:	009b      	lsls	r3, r3, #2
 8012fdc:	4413      	add	r3, r2
 8012fde:	009b      	lsls	r3, r3, #2
 8012fe0:	440b      	add	r3, r1
 8012fe2:	681b      	ldr	r3, [r3, #0]
 8012fe4:	2b01      	cmp	r3, #1
 8012fe6:	d907      	bls.n	8012ff8 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8012fe8:	2301      	movs	r3, #1
 8012fea:	617b      	str	r3, [r7, #20]
 8012fec:	e004      	b.n	8012ff8 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8012fee:	4b11      	ldr	r3, [pc, #68]	; (8013034 <xTaskIncrementTick+0x168>)
 8012ff0:	681b      	ldr	r3, [r3, #0]
 8012ff2:	3301      	adds	r3, #1
 8012ff4:	4a0f      	ldr	r2, [pc, #60]	; (8013034 <xTaskIncrementTick+0x168>)
 8012ff6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8012ff8:	4b0f      	ldr	r3, [pc, #60]	; (8013038 <xTaskIncrementTick+0x16c>)
 8012ffa:	681b      	ldr	r3, [r3, #0]
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d001      	beq.n	8013004 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8013000:	2301      	movs	r3, #1
 8013002:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8013004:	697b      	ldr	r3, [r7, #20]
}
 8013006:	4618      	mov	r0, r3
 8013008:	3718      	adds	r7, #24
 801300a:	46bd      	mov	sp, r7
 801300c:	bd80      	pop	{r7, pc}
 801300e:	bf00      	nop
 8013010:	2000298c 	.word	0x2000298c
 8013014:	20002968 	.word	0x20002968
 8013018:	2000291c 	.word	0x2000291c
 801301c:	20002920 	.word	0x20002920
 8013020:	2000297c 	.word	0x2000297c
 8013024:	20002984 	.word	0x20002984
 8013028:	2000296c 	.word	0x2000296c
 801302c:	20002868 	.word	0x20002868
 8013030:	20002864 	.word	0x20002864
 8013034:	20002974 	.word	0x20002974
 8013038:	20002978 	.word	0x20002978

0801303c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801303c:	b480      	push	{r7}
 801303e:	b087      	sub	sp, #28
 8013040:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013042:	4b26      	ldr	r3, [pc, #152]	; (80130dc <vTaskSwitchContext+0xa0>)
 8013044:	681b      	ldr	r3, [r3, #0]
 8013046:	2b00      	cmp	r3, #0
 8013048:	d003      	beq.n	8013052 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801304a:	4b25      	ldr	r3, [pc, #148]	; (80130e0 <vTaskSwitchContext+0xa4>)
 801304c:	2201      	movs	r2, #1
 801304e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013050:	e03e      	b.n	80130d0 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8013052:	4b23      	ldr	r3, [pc, #140]	; (80130e0 <vTaskSwitchContext+0xa4>)
 8013054:	2200      	movs	r2, #0
 8013056:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013058:	4b22      	ldr	r3, [pc, #136]	; (80130e4 <vTaskSwitchContext+0xa8>)
 801305a:	681b      	ldr	r3, [r3, #0]
 801305c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801305e:	68fb      	ldr	r3, [r7, #12]
 8013060:	fab3 f383 	clz	r3, r3
 8013064:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8013066:	7afb      	ldrb	r3, [r7, #11]
 8013068:	f1c3 031f 	rsb	r3, r3, #31
 801306c:	617b      	str	r3, [r7, #20]
 801306e:	491e      	ldr	r1, [pc, #120]	; (80130e8 <vTaskSwitchContext+0xac>)
 8013070:	697a      	ldr	r2, [r7, #20]
 8013072:	4613      	mov	r3, r2
 8013074:	009b      	lsls	r3, r3, #2
 8013076:	4413      	add	r3, r2
 8013078:	009b      	lsls	r3, r3, #2
 801307a:	440b      	add	r3, r1
 801307c:	681b      	ldr	r3, [r3, #0]
 801307e:	2b00      	cmp	r3, #0
 8013080:	d109      	bne.n	8013096 <vTaskSwitchContext+0x5a>
	__asm volatile
 8013082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013086:	f383 8811 	msr	BASEPRI, r3
 801308a:	f3bf 8f6f 	isb	sy
 801308e:	f3bf 8f4f 	dsb	sy
 8013092:	607b      	str	r3, [r7, #4]
 8013094:	e7fe      	b.n	8013094 <vTaskSwitchContext+0x58>
 8013096:	697a      	ldr	r2, [r7, #20]
 8013098:	4613      	mov	r3, r2
 801309a:	009b      	lsls	r3, r3, #2
 801309c:	4413      	add	r3, r2
 801309e:	009b      	lsls	r3, r3, #2
 80130a0:	4a11      	ldr	r2, [pc, #68]	; (80130e8 <vTaskSwitchContext+0xac>)
 80130a2:	4413      	add	r3, r2
 80130a4:	613b      	str	r3, [r7, #16]
 80130a6:	693b      	ldr	r3, [r7, #16]
 80130a8:	685b      	ldr	r3, [r3, #4]
 80130aa:	685a      	ldr	r2, [r3, #4]
 80130ac:	693b      	ldr	r3, [r7, #16]
 80130ae:	605a      	str	r2, [r3, #4]
 80130b0:	693b      	ldr	r3, [r7, #16]
 80130b2:	685a      	ldr	r2, [r3, #4]
 80130b4:	693b      	ldr	r3, [r7, #16]
 80130b6:	3308      	adds	r3, #8
 80130b8:	429a      	cmp	r2, r3
 80130ba:	d104      	bne.n	80130c6 <vTaskSwitchContext+0x8a>
 80130bc:	693b      	ldr	r3, [r7, #16]
 80130be:	685b      	ldr	r3, [r3, #4]
 80130c0:	685a      	ldr	r2, [r3, #4]
 80130c2:	693b      	ldr	r3, [r7, #16]
 80130c4:	605a      	str	r2, [r3, #4]
 80130c6:	693b      	ldr	r3, [r7, #16]
 80130c8:	685b      	ldr	r3, [r3, #4]
 80130ca:	68db      	ldr	r3, [r3, #12]
 80130cc:	4a07      	ldr	r2, [pc, #28]	; (80130ec <vTaskSwitchContext+0xb0>)
 80130ce:	6013      	str	r3, [r2, #0]
}
 80130d0:	bf00      	nop
 80130d2:	371c      	adds	r7, #28
 80130d4:	46bd      	mov	sp, r7
 80130d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130da:	4770      	bx	lr
 80130dc:	2000298c 	.word	0x2000298c
 80130e0:	20002978 	.word	0x20002978
 80130e4:	2000296c 	.word	0x2000296c
 80130e8:	20002868 	.word	0x20002868
 80130ec:	20002864 	.word	0x20002864

080130f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80130f0:	b580      	push	{r7, lr}
 80130f2:	b084      	sub	sp, #16
 80130f4:	af00      	add	r7, sp, #0
 80130f6:	6078      	str	r0, [r7, #4]
 80130f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d109      	bne.n	8013114 <vTaskPlaceOnEventList+0x24>
 8013100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013104:	f383 8811 	msr	BASEPRI, r3
 8013108:	f3bf 8f6f 	isb	sy
 801310c:	f3bf 8f4f 	dsb	sy
 8013110:	60fb      	str	r3, [r7, #12]
 8013112:	e7fe      	b.n	8013112 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013114:	4b07      	ldr	r3, [pc, #28]	; (8013134 <vTaskPlaceOnEventList+0x44>)
 8013116:	681b      	ldr	r3, [r3, #0]
 8013118:	3318      	adds	r3, #24
 801311a:	4619      	mov	r1, r3
 801311c:	6878      	ldr	r0, [r7, #4]
 801311e:	f7fe fe29 	bl	8011d74 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013122:	2101      	movs	r1, #1
 8013124:	6838      	ldr	r0, [r7, #0]
 8013126:	f000 fc43 	bl	80139b0 <prvAddCurrentTaskToDelayedList>
}
 801312a:	bf00      	nop
 801312c:	3710      	adds	r7, #16
 801312e:	46bd      	mov	sp, r7
 8013130:	bd80      	pop	{r7, pc}
 8013132:	bf00      	nop
 8013134:	20002864 	.word	0x20002864

08013138 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013138:	b580      	push	{r7, lr}
 801313a:	b086      	sub	sp, #24
 801313c:	af00      	add	r7, sp, #0
 801313e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	68db      	ldr	r3, [r3, #12]
 8013144:	68db      	ldr	r3, [r3, #12]
 8013146:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013148:	693b      	ldr	r3, [r7, #16]
 801314a:	2b00      	cmp	r3, #0
 801314c:	d109      	bne.n	8013162 <xTaskRemoveFromEventList+0x2a>
 801314e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013152:	f383 8811 	msr	BASEPRI, r3
 8013156:	f3bf 8f6f 	isb	sy
 801315a:	f3bf 8f4f 	dsb	sy
 801315e:	60fb      	str	r3, [r7, #12]
 8013160:	e7fe      	b.n	8013160 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013162:	693b      	ldr	r3, [r7, #16]
 8013164:	3318      	adds	r3, #24
 8013166:	4618      	mov	r0, r3
 8013168:	f7fe fe3d 	bl	8011de6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801316c:	4b1d      	ldr	r3, [pc, #116]	; (80131e4 <xTaskRemoveFromEventList+0xac>)
 801316e:	681b      	ldr	r3, [r3, #0]
 8013170:	2b00      	cmp	r3, #0
 8013172:	d11c      	bne.n	80131ae <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013174:	693b      	ldr	r3, [r7, #16]
 8013176:	3304      	adds	r3, #4
 8013178:	4618      	mov	r0, r3
 801317a:	f7fe fe34 	bl	8011de6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801317e:	693b      	ldr	r3, [r7, #16]
 8013180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013182:	2201      	movs	r2, #1
 8013184:	409a      	lsls	r2, r3
 8013186:	4b18      	ldr	r3, [pc, #96]	; (80131e8 <xTaskRemoveFromEventList+0xb0>)
 8013188:	681b      	ldr	r3, [r3, #0]
 801318a:	4313      	orrs	r3, r2
 801318c:	4a16      	ldr	r2, [pc, #88]	; (80131e8 <xTaskRemoveFromEventList+0xb0>)
 801318e:	6013      	str	r3, [r2, #0]
 8013190:	693b      	ldr	r3, [r7, #16]
 8013192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013194:	4613      	mov	r3, r2
 8013196:	009b      	lsls	r3, r3, #2
 8013198:	4413      	add	r3, r2
 801319a:	009b      	lsls	r3, r3, #2
 801319c:	4a13      	ldr	r2, [pc, #76]	; (80131ec <xTaskRemoveFromEventList+0xb4>)
 801319e:	441a      	add	r2, r3
 80131a0:	693b      	ldr	r3, [r7, #16]
 80131a2:	3304      	adds	r3, #4
 80131a4:	4619      	mov	r1, r3
 80131a6:	4610      	mov	r0, r2
 80131a8:	f7fe fdc0 	bl	8011d2c <vListInsertEnd>
 80131ac:	e005      	b.n	80131ba <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80131ae:	693b      	ldr	r3, [r7, #16]
 80131b0:	3318      	adds	r3, #24
 80131b2:	4619      	mov	r1, r3
 80131b4:	480e      	ldr	r0, [pc, #56]	; (80131f0 <xTaskRemoveFromEventList+0xb8>)
 80131b6:	f7fe fdb9 	bl	8011d2c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80131ba:	693b      	ldr	r3, [r7, #16]
 80131bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80131be:	4b0d      	ldr	r3, [pc, #52]	; (80131f4 <xTaskRemoveFromEventList+0xbc>)
 80131c0:	681b      	ldr	r3, [r3, #0]
 80131c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131c4:	429a      	cmp	r2, r3
 80131c6:	d905      	bls.n	80131d4 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80131c8:	2301      	movs	r3, #1
 80131ca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80131cc:	4b0a      	ldr	r3, [pc, #40]	; (80131f8 <xTaskRemoveFromEventList+0xc0>)
 80131ce:	2201      	movs	r2, #1
 80131d0:	601a      	str	r2, [r3, #0]
 80131d2:	e001      	b.n	80131d8 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80131d4:	2300      	movs	r3, #0
 80131d6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80131d8:	697b      	ldr	r3, [r7, #20]
}
 80131da:	4618      	mov	r0, r3
 80131dc:	3718      	adds	r7, #24
 80131de:	46bd      	mov	sp, r7
 80131e0:	bd80      	pop	{r7, pc}
 80131e2:	bf00      	nop
 80131e4:	2000298c 	.word	0x2000298c
 80131e8:	2000296c 	.word	0x2000296c
 80131ec:	20002868 	.word	0x20002868
 80131f0:	20002924 	.word	0x20002924
 80131f4:	20002864 	.word	0x20002864
 80131f8:	20002978 	.word	0x20002978

080131fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80131fc:	b480      	push	{r7}
 80131fe:	b083      	sub	sp, #12
 8013200:	af00      	add	r7, sp, #0
 8013202:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013204:	4b06      	ldr	r3, [pc, #24]	; (8013220 <vTaskInternalSetTimeOutState+0x24>)
 8013206:	681a      	ldr	r2, [r3, #0]
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801320c:	4b05      	ldr	r3, [pc, #20]	; (8013224 <vTaskInternalSetTimeOutState+0x28>)
 801320e:	681a      	ldr	r2, [r3, #0]
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	605a      	str	r2, [r3, #4]
}
 8013214:	bf00      	nop
 8013216:	370c      	adds	r7, #12
 8013218:	46bd      	mov	sp, r7
 801321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801321e:	4770      	bx	lr
 8013220:	2000297c 	.word	0x2000297c
 8013224:	20002968 	.word	0x20002968

08013228 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8013228:	b580      	push	{r7, lr}
 801322a:	b088      	sub	sp, #32
 801322c:	af00      	add	r7, sp, #0
 801322e:	6078      	str	r0, [r7, #4]
 8013230:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	2b00      	cmp	r3, #0
 8013236:	d109      	bne.n	801324c <xTaskCheckForTimeOut+0x24>
 8013238:	f04f 0350 	mov.w	r3, #80	; 0x50
 801323c:	f383 8811 	msr	BASEPRI, r3
 8013240:	f3bf 8f6f 	isb	sy
 8013244:	f3bf 8f4f 	dsb	sy
 8013248:	613b      	str	r3, [r7, #16]
 801324a:	e7fe      	b.n	801324a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 801324c:	683b      	ldr	r3, [r7, #0]
 801324e:	2b00      	cmp	r3, #0
 8013250:	d109      	bne.n	8013266 <xTaskCheckForTimeOut+0x3e>
 8013252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013256:	f383 8811 	msr	BASEPRI, r3
 801325a:	f3bf 8f6f 	isb	sy
 801325e:	f3bf 8f4f 	dsb	sy
 8013262:	60fb      	str	r3, [r7, #12]
 8013264:	e7fe      	b.n	8013264 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8013266:	f000 fd31 	bl	8013ccc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801326a:	4b1d      	ldr	r3, [pc, #116]	; (80132e0 <xTaskCheckForTimeOut+0xb8>)
 801326c:	681b      	ldr	r3, [r3, #0]
 801326e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	685b      	ldr	r3, [r3, #4]
 8013274:	69ba      	ldr	r2, [r7, #24]
 8013276:	1ad3      	subs	r3, r2, r3
 8013278:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801327a:	683b      	ldr	r3, [r7, #0]
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013282:	d102      	bne.n	801328a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013284:	2300      	movs	r3, #0
 8013286:	61fb      	str	r3, [r7, #28]
 8013288:	e023      	b.n	80132d2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	681a      	ldr	r2, [r3, #0]
 801328e:	4b15      	ldr	r3, [pc, #84]	; (80132e4 <xTaskCheckForTimeOut+0xbc>)
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	429a      	cmp	r2, r3
 8013294:	d007      	beq.n	80132a6 <xTaskCheckForTimeOut+0x7e>
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	685b      	ldr	r3, [r3, #4]
 801329a:	69ba      	ldr	r2, [r7, #24]
 801329c:	429a      	cmp	r2, r3
 801329e:	d302      	bcc.n	80132a6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80132a0:	2301      	movs	r3, #1
 80132a2:	61fb      	str	r3, [r7, #28]
 80132a4:	e015      	b.n	80132d2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80132a6:	683b      	ldr	r3, [r7, #0]
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	697a      	ldr	r2, [r7, #20]
 80132ac:	429a      	cmp	r2, r3
 80132ae:	d20b      	bcs.n	80132c8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80132b0:	683b      	ldr	r3, [r7, #0]
 80132b2:	681a      	ldr	r2, [r3, #0]
 80132b4:	697b      	ldr	r3, [r7, #20]
 80132b6:	1ad2      	subs	r2, r2, r3
 80132b8:	683b      	ldr	r3, [r7, #0]
 80132ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80132bc:	6878      	ldr	r0, [r7, #4]
 80132be:	f7ff ff9d 	bl	80131fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80132c2:	2300      	movs	r3, #0
 80132c4:	61fb      	str	r3, [r7, #28]
 80132c6:	e004      	b.n	80132d2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80132c8:	683b      	ldr	r3, [r7, #0]
 80132ca:	2200      	movs	r2, #0
 80132cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80132ce:	2301      	movs	r3, #1
 80132d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80132d2:	f000 fd29 	bl	8013d28 <vPortExitCritical>

	return xReturn;
 80132d6:	69fb      	ldr	r3, [r7, #28]
}
 80132d8:	4618      	mov	r0, r3
 80132da:	3720      	adds	r7, #32
 80132dc:	46bd      	mov	sp, r7
 80132de:	bd80      	pop	{r7, pc}
 80132e0:	20002968 	.word	0x20002968
 80132e4:	2000297c 	.word	0x2000297c

080132e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80132e8:	b480      	push	{r7}
 80132ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80132ec:	4b03      	ldr	r3, [pc, #12]	; (80132fc <vTaskMissedYield+0x14>)
 80132ee:	2201      	movs	r2, #1
 80132f0:	601a      	str	r2, [r3, #0]
}
 80132f2:	bf00      	nop
 80132f4:	46bd      	mov	sp, r7
 80132f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132fa:	4770      	bx	lr
 80132fc:	20002978 	.word	0x20002978

08013300 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013300:	b580      	push	{r7, lr}
 8013302:	b082      	sub	sp, #8
 8013304:	af00      	add	r7, sp, #0
 8013306:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013308:	f000 f852 	bl	80133b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801330c:	4b06      	ldr	r3, [pc, #24]	; (8013328 <prvIdleTask+0x28>)
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	2b01      	cmp	r3, #1
 8013312:	d9f9      	bls.n	8013308 <prvIdleTask+0x8>
			{
				taskYIELD();
 8013314:	4b05      	ldr	r3, [pc, #20]	; (801332c <prvIdleTask+0x2c>)
 8013316:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801331a:	601a      	str	r2, [r3, #0]
 801331c:	f3bf 8f4f 	dsb	sy
 8013320:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8013324:	e7f0      	b.n	8013308 <prvIdleTask+0x8>
 8013326:	bf00      	nop
 8013328:	20002868 	.word	0x20002868
 801332c:	e000ed04 	.word	0xe000ed04

08013330 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013330:	b580      	push	{r7, lr}
 8013332:	b082      	sub	sp, #8
 8013334:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013336:	2300      	movs	r3, #0
 8013338:	607b      	str	r3, [r7, #4]
 801333a:	e00c      	b.n	8013356 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801333c:	687a      	ldr	r2, [r7, #4]
 801333e:	4613      	mov	r3, r2
 8013340:	009b      	lsls	r3, r3, #2
 8013342:	4413      	add	r3, r2
 8013344:	009b      	lsls	r3, r3, #2
 8013346:	4a12      	ldr	r2, [pc, #72]	; (8013390 <prvInitialiseTaskLists+0x60>)
 8013348:	4413      	add	r3, r2
 801334a:	4618      	mov	r0, r3
 801334c:	f7fe fcc1 	bl	8011cd2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	3301      	adds	r3, #1
 8013354:	607b      	str	r3, [r7, #4]
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	2b06      	cmp	r3, #6
 801335a:	d9ef      	bls.n	801333c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801335c:	480d      	ldr	r0, [pc, #52]	; (8013394 <prvInitialiseTaskLists+0x64>)
 801335e:	f7fe fcb8 	bl	8011cd2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013362:	480d      	ldr	r0, [pc, #52]	; (8013398 <prvInitialiseTaskLists+0x68>)
 8013364:	f7fe fcb5 	bl	8011cd2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013368:	480c      	ldr	r0, [pc, #48]	; (801339c <prvInitialiseTaskLists+0x6c>)
 801336a:	f7fe fcb2 	bl	8011cd2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801336e:	480c      	ldr	r0, [pc, #48]	; (80133a0 <prvInitialiseTaskLists+0x70>)
 8013370:	f7fe fcaf 	bl	8011cd2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013374:	480b      	ldr	r0, [pc, #44]	; (80133a4 <prvInitialiseTaskLists+0x74>)
 8013376:	f7fe fcac 	bl	8011cd2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801337a:	4b0b      	ldr	r3, [pc, #44]	; (80133a8 <prvInitialiseTaskLists+0x78>)
 801337c:	4a05      	ldr	r2, [pc, #20]	; (8013394 <prvInitialiseTaskLists+0x64>)
 801337e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013380:	4b0a      	ldr	r3, [pc, #40]	; (80133ac <prvInitialiseTaskLists+0x7c>)
 8013382:	4a05      	ldr	r2, [pc, #20]	; (8013398 <prvInitialiseTaskLists+0x68>)
 8013384:	601a      	str	r2, [r3, #0]
}
 8013386:	bf00      	nop
 8013388:	3708      	adds	r7, #8
 801338a:	46bd      	mov	sp, r7
 801338c:	bd80      	pop	{r7, pc}
 801338e:	bf00      	nop
 8013390:	20002868 	.word	0x20002868
 8013394:	200028f4 	.word	0x200028f4
 8013398:	20002908 	.word	0x20002908
 801339c:	20002924 	.word	0x20002924
 80133a0:	20002938 	.word	0x20002938
 80133a4:	20002950 	.word	0x20002950
 80133a8:	2000291c 	.word	0x2000291c
 80133ac:	20002920 	.word	0x20002920

080133b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80133b0:	b580      	push	{r7, lr}
 80133b2:	b082      	sub	sp, #8
 80133b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80133b6:	e019      	b.n	80133ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80133b8:	f000 fc88 	bl	8013ccc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80133bc:	4b0f      	ldr	r3, [pc, #60]	; (80133fc <prvCheckTasksWaitingTermination+0x4c>)
 80133be:	68db      	ldr	r3, [r3, #12]
 80133c0:	68db      	ldr	r3, [r3, #12]
 80133c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	3304      	adds	r3, #4
 80133c8:	4618      	mov	r0, r3
 80133ca:	f7fe fd0c 	bl	8011de6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80133ce:	4b0c      	ldr	r3, [pc, #48]	; (8013400 <prvCheckTasksWaitingTermination+0x50>)
 80133d0:	681b      	ldr	r3, [r3, #0]
 80133d2:	3b01      	subs	r3, #1
 80133d4:	4a0a      	ldr	r2, [pc, #40]	; (8013400 <prvCheckTasksWaitingTermination+0x50>)
 80133d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80133d8:	4b0a      	ldr	r3, [pc, #40]	; (8013404 <prvCheckTasksWaitingTermination+0x54>)
 80133da:	681b      	ldr	r3, [r3, #0]
 80133dc:	3b01      	subs	r3, #1
 80133de:	4a09      	ldr	r2, [pc, #36]	; (8013404 <prvCheckTasksWaitingTermination+0x54>)
 80133e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80133e2:	f000 fca1 	bl	8013d28 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80133e6:	6878      	ldr	r0, [r7, #4]
 80133e8:	f000 f80e 	bl	8013408 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80133ec:	4b05      	ldr	r3, [pc, #20]	; (8013404 <prvCheckTasksWaitingTermination+0x54>)
 80133ee:	681b      	ldr	r3, [r3, #0]
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d1e1      	bne.n	80133b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80133f4:	bf00      	nop
 80133f6:	3708      	adds	r7, #8
 80133f8:	46bd      	mov	sp, r7
 80133fa:	bd80      	pop	{r7, pc}
 80133fc:	20002938 	.word	0x20002938
 8013400:	20002964 	.word	0x20002964
 8013404:	2000294c 	.word	0x2000294c

08013408 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013408:	b580      	push	{r7, lr}
 801340a:	b084      	sub	sp, #16
 801340c:	af00      	add	r7, sp, #0
 801340e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013416:	2b00      	cmp	r3, #0
 8013418:	d108      	bne.n	801342c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801341e:	4618      	mov	r0, r3
 8013420:	f000 fe30 	bl	8014084 <vPortFree>
				vPortFree( pxTCB );
 8013424:	6878      	ldr	r0, [r7, #4]
 8013426:	f000 fe2d 	bl	8014084 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801342a:	e017      	b.n	801345c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013432:	2b01      	cmp	r3, #1
 8013434:	d103      	bne.n	801343e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8013436:	6878      	ldr	r0, [r7, #4]
 8013438:	f000 fe24 	bl	8014084 <vPortFree>
	}
 801343c:	e00e      	b.n	801345c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013444:	2b02      	cmp	r3, #2
 8013446:	d009      	beq.n	801345c <prvDeleteTCB+0x54>
 8013448:	f04f 0350 	mov.w	r3, #80	; 0x50
 801344c:	f383 8811 	msr	BASEPRI, r3
 8013450:	f3bf 8f6f 	isb	sy
 8013454:	f3bf 8f4f 	dsb	sy
 8013458:	60fb      	str	r3, [r7, #12]
 801345a:	e7fe      	b.n	801345a <prvDeleteTCB+0x52>
	}
 801345c:	bf00      	nop
 801345e:	3710      	adds	r7, #16
 8013460:	46bd      	mov	sp, r7
 8013462:	bd80      	pop	{r7, pc}

08013464 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013464:	b480      	push	{r7}
 8013466:	b083      	sub	sp, #12
 8013468:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801346a:	4b0c      	ldr	r3, [pc, #48]	; (801349c <prvResetNextTaskUnblockTime+0x38>)
 801346c:	681b      	ldr	r3, [r3, #0]
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	2b00      	cmp	r3, #0
 8013472:	d104      	bne.n	801347e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013474:	4b0a      	ldr	r3, [pc, #40]	; (80134a0 <prvResetNextTaskUnblockTime+0x3c>)
 8013476:	f04f 32ff 	mov.w	r2, #4294967295
 801347a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801347c:	e008      	b.n	8013490 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801347e:	4b07      	ldr	r3, [pc, #28]	; (801349c <prvResetNextTaskUnblockTime+0x38>)
 8013480:	681b      	ldr	r3, [r3, #0]
 8013482:	68db      	ldr	r3, [r3, #12]
 8013484:	68db      	ldr	r3, [r3, #12]
 8013486:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	685b      	ldr	r3, [r3, #4]
 801348c:	4a04      	ldr	r2, [pc, #16]	; (80134a0 <prvResetNextTaskUnblockTime+0x3c>)
 801348e:	6013      	str	r3, [r2, #0]
}
 8013490:	bf00      	nop
 8013492:	370c      	adds	r7, #12
 8013494:	46bd      	mov	sp, r7
 8013496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801349a:	4770      	bx	lr
 801349c:	2000291c 	.word	0x2000291c
 80134a0:	20002984 	.word	0x20002984

080134a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80134a4:	b480      	push	{r7}
 80134a6:	b083      	sub	sp, #12
 80134a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80134aa:	4b0b      	ldr	r3, [pc, #44]	; (80134d8 <xTaskGetSchedulerState+0x34>)
 80134ac:	681b      	ldr	r3, [r3, #0]
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d102      	bne.n	80134b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80134b2:	2301      	movs	r3, #1
 80134b4:	607b      	str	r3, [r7, #4]
 80134b6:	e008      	b.n	80134ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80134b8:	4b08      	ldr	r3, [pc, #32]	; (80134dc <xTaskGetSchedulerState+0x38>)
 80134ba:	681b      	ldr	r3, [r3, #0]
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d102      	bne.n	80134c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80134c0:	2302      	movs	r3, #2
 80134c2:	607b      	str	r3, [r7, #4]
 80134c4:	e001      	b.n	80134ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80134c6:	2300      	movs	r3, #0
 80134c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80134ca:	687b      	ldr	r3, [r7, #4]
	}
 80134cc:	4618      	mov	r0, r3
 80134ce:	370c      	adds	r7, #12
 80134d0:	46bd      	mov	sp, r7
 80134d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134d6:	4770      	bx	lr
 80134d8:	20002970 	.word	0x20002970
 80134dc:	2000298c 	.word	0x2000298c

080134e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80134e0:	b580      	push	{r7, lr}
 80134e2:	b086      	sub	sp, #24
 80134e4:	af00      	add	r7, sp, #0
 80134e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80134ec:	2300      	movs	r3, #0
 80134ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d06c      	beq.n	80135d0 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80134f6:	4b39      	ldr	r3, [pc, #228]	; (80135dc <xTaskPriorityDisinherit+0xfc>)
 80134f8:	681b      	ldr	r3, [r3, #0]
 80134fa:	693a      	ldr	r2, [r7, #16]
 80134fc:	429a      	cmp	r2, r3
 80134fe:	d009      	beq.n	8013514 <xTaskPriorityDisinherit+0x34>
 8013500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013504:	f383 8811 	msr	BASEPRI, r3
 8013508:	f3bf 8f6f 	isb	sy
 801350c:	f3bf 8f4f 	dsb	sy
 8013510:	60fb      	str	r3, [r7, #12]
 8013512:	e7fe      	b.n	8013512 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8013514:	693b      	ldr	r3, [r7, #16]
 8013516:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013518:	2b00      	cmp	r3, #0
 801351a:	d109      	bne.n	8013530 <xTaskPriorityDisinherit+0x50>
 801351c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013520:	f383 8811 	msr	BASEPRI, r3
 8013524:	f3bf 8f6f 	isb	sy
 8013528:	f3bf 8f4f 	dsb	sy
 801352c:	60bb      	str	r3, [r7, #8]
 801352e:	e7fe      	b.n	801352e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8013530:	693b      	ldr	r3, [r7, #16]
 8013532:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013534:	1e5a      	subs	r2, r3, #1
 8013536:	693b      	ldr	r3, [r7, #16]
 8013538:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801353a:	693b      	ldr	r3, [r7, #16]
 801353c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801353e:	693b      	ldr	r3, [r7, #16]
 8013540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013542:	429a      	cmp	r2, r3
 8013544:	d044      	beq.n	80135d0 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013546:	693b      	ldr	r3, [r7, #16]
 8013548:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801354a:	2b00      	cmp	r3, #0
 801354c:	d140      	bne.n	80135d0 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801354e:	693b      	ldr	r3, [r7, #16]
 8013550:	3304      	adds	r3, #4
 8013552:	4618      	mov	r0, r3
 8013554:	f7fe fc47 	bl	8011de6 <uxListRemove>
 8013558:	4603      	mov	r3, r0
 801355a:	2b00      	cmp	r3, #0
 801355c:	d115      	bne.n	801358a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801355e:	693b      	ldr	r3, [r7, #16]
 8013560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013562:	491f      	ldr	r1, [pc, #124]	; (80135e0 <xTaskPriorityDisinherit+0x100>)
 8013564:	4613      	mov	r3, r2
 8013566:	009b      	lsls	r3, r3, #2
 8013568:	4413      	add	r3, r2
 801356a:	009b      	lsls	r3, r3, #2
 801356c:	440b      	add	r3, r1
 801356e:	681b      	ldr	r3, [r3, #0]
 8013570:	2b00      	cmp	r3, #0
 8013572:	d10a      	bne.n	801358a <xTaskPriorityDisinherit+0xaa>
 8013574:	693b      	ldr	r3, [r7, #16]
 8013576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013578:	2201      	movs	r2, #1
 801357a:	fa02 f303 	lsl.w	r3, r2, r3
 801357e:	43da      	mvns	r2, r3
 8013580:	4b18      	ldr	r3, [pc, #96]	; (80135e4 <xTaskPriorityDisinherit+0x104>)
 8013582:	681b      	ldr	r3, [r3, #0]
 8013584:	4013      	ands	r3, r2
 8013586:	4a17      	ldr	r2, [pc, #92]	; (80135e4 <xTaskPriorityDisinherit+0x104>)
 8013588:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801358a:	693b      	ldr	r3, [r7, #16]
 801358c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801358e:	693b      	ldr	r3, [r7, #16]
 8013590:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013592:	693b      	ldr	r3, [r7, #16]
 8013594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013596:	f1c3 0207 	rsb	r2, r3, #7
 801359a:	693b      	ldr	r3, [r7, #16]
 801359c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801359e:	693b      	ldr	r3, [r7, #16]
 80135a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135a2:	2201      	movs	r2, #1
 80135a4:	409a      	lsls	r2, r3
 80135a6:	4b0f      	ldr	r3, [pc, #60]	; (80135e4 <xTaskPriorityDisinherit+0x104>)
 80135a8:	681b      	ldr	r3, [r3, #0]
 80135aa:	4313      	orrs	r3, r2
 80135ac:	4a0d      	ldr	r2, [pc, #52]	; (80135e4 <xTaskPriorityDisinherit+0x104>)
 80135ae:	6013      	str	r3, [r2, #0]
 80135b0:	693b      	ldr	r3, [r7, #16]
 80135b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80135b4:	4613      	mov	r3, r2
 80135b6:	009b      	lsls	r3, r3, #2
 80135b8:	4413      	add	r3, r2
 80135ba:	009b      	lsls	r3, r3, #2
 80135bc:	4a08      	ldr	r2, [pc, #32]	; (80135e0 <xTaskPriorityDisinherit+0x100>)
 80135be:	441a      	add	r2, r3
 80135c0:	693b      	ldr	r3, [r7, #16]
 80135c2:	3304      	adds	r3, #4
 80135c4:	4619      	mov	r1, r3
 80135c6:	4610      	mov	r0, r2
 80135c8:	f7fe fbb0 	bl	8011d2c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80135cc:	2301      	movs	r3, #1
 80135ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80135d0:	697b      	ldr	r3, [r7, #20]
	}
 80135d2:	4618      	mov	r0, r3
 80135d4:	3718      	adds	r7, #24
 80135d6:	46bd      	mov	sp, r7
 80135d8:	bd80      	pop	{r7, pc}
 80135da:	bf00      	nop
 80135dc:	20002864 	.word	0x20002864
 80135e0:	20002868 	.word	0x20002868
 80135e4:	2000296c 	.word	0x2000296c

080135e8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80135e8:	b580      	push	{r7, lr}
 80135ea:	b086      	sub	sp, #24
 80135ec:	af00      	add	r7, sp, #0
 80135ee:	60f8      	str	r0, [r7, #12]
 80135f0:	60b9      	str	r1, [r7, #8]
 80135f2:	607a      	str	r2, [r7, #4]
 80135f4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80135f6:	f000 fb69 	bl	8013ccc <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80135fa:	4b26      	ldr	r3, [pc, #152]	; (8013694 <xTaskNotifyWait+0xac>)
 80135fc:	681b      	ldr	r3, [r3, #0]
 80135fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013602:	b2db      	uxtb	r3, r3
 8013604:	2b02      	cmp	r3, #2
 8013606:	d01a      	beq.n	801363e <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8013608:	4b22      	ldr	r3, [pc, #136]	; (8013694 <xTaskNotifyWait+0xac>)
 801360a:	681b      	ldr	r3, [r3, #0]
 801360c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 801360e:	68fa      	ldr	r2, [r7, #12]
 8013610:	43d2      	mvns	r2, r2
 8013612:	400a      	ands	r2, r1
 8013614:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8013616:	4b1f      	ldr	r3, [pc, #124]	; (8013694 <xTaskNotifyWait+0xac>)
 8013618:	681b      	ldr	r3, [r3, #0]
 801361a:	2201      	movs	r2, #1
 801361c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8013620:	683b      	ldr	r3, [r7, #0]
 8013622:	2b00      	cmp	r3, #0
 8013624:	d00b      	beq.n	801363e <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013626:	2101      	movs	r1, #1
 8013628:	6838      	ldr	r0, [r7, #0]
 801362a:	f000 f9c1 	bl	80139b0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 801362e:	4b1a      	ldr	r3, [pc, #104]	; (8013698 <xTaskNotifyWait+0xb0>)
 8013630:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013634:	601a      	str	r2, [r3, #0]
 8013636:	f3bf 8f4f 	dsb	sy
 801363a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801363e:	f000 fb73 	bl	8013d28 <vPortExitCritical>

		taskENTER_CRITICAL();
 8013642:	f000 fb43 	bl	8013ccc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	2b00      	cmp	r3, #0
 801364a:	d004      	beq.n	8013656 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 801364c:	4b11      	ldr	r3, [pc, #68]	; (8013694 <xTaskNotifyWait+0xac>)
 801364e:	681b      	ldr	r3, [r3, #0]
 8013650:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8013656:	4b0f      	ldr	r3, [pc, #60]	; (8013694 <xTaskNotifyWait+0xac>)
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801365e:	b2db      	uxtb	r3, r3
 8013660:	2b02      	cmp	r3, #2
 8013662:	d002      	beq.n	801366a <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8013664:	2300      	movs	r3, #0
 8013666:	617b      	str	r3, [r7, #20]
 8013668:	e008      	b.n	801367c <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 801366a:	4b0a      	ldr	r3, [pc, #40]	; (8013694 <xTaskNotifyWait+0xac>)
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8013670:	68ba      	ldr	r2, [r7, #8]
 8013672:	43d2      	mvns	r2, r2
 8013674:	400a      	ands	r2, r1
 8013676:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 8013678:	2301      	movs	r3, #1
 801367a:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801367c:	4b05      	ldr	r3, [pc, #20]	; (8013694 <xTaskNotifyWait+0xac>)
 801367e:	681b      	ldr	r3, [r3, #0]
 8013680:	2200      	movs	r2, #0
 8013682:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8013686:	f000 fb4f 	bl	8013d28 <vPortExitCritical>

		return xReturn;
 801368a:	697b      	ldr	r3, [r7, #20]
	}
 801368c:	4618      	mov	r0, r3
 801368e:	3718      	adds	r7, #24
 8013690:	46bd      	mov	sp, r7
 8013692:	bd80      	pop	{r7, pc}
 8013694:	20002864 	.word	0x20002864
 8013698:	e000ed04 	.word	0xe000ed04

0801369c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 801369c:	b580      	push	{r7, lr}
 801369e:	b08a      	sub	sp, #40	; 0x28
 80136a0:	af00      	add	r7, sp, #0
 80136a2:	60f8      	str	r0, [r7, #12]
 80136a4:	60b9      	str	r1, [r7, #8]
 80136a6:	603b      	str	r3, [r7, #0]
 80136a8:	4613      	mov	r3, r2
 80136aa:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80136ac:	2301      	movs	r3, #1
 80136ae:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80136b0:	68fb      	ldr	r3, [r7, #12]
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d109      	bne.n	80136ca <xTaskGenericNotify+0x2e>
 80136b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136ba:	f383 8811 	msr	BASEPRI, r3
 80136be:	f3bf 8f6f 	isb	sy
 80136c2:	f3bf 8f4f 	dsb	sy
 80136c6:	61bb      	str	r3, [r7, #24]
 80136c8:	e7fe      	b.n	80136c8 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 80136ca:	68fb      	ldr	r3, [r7, #12]
 80136cc:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80136ce:	f000 fafd 	bl	8013ccc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80136d2:	683b      	ldr	r3, [r7, #0]
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d003      	beq.n	80136e0 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80136d8:	6a3b      	ldr	r3, [r7, #32]
 80136da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80136dc:	683b      	ldr	r3, [r7, #0]
 80136de:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80136e0:	6a3b      	ldr	r3, [r7, #32]
 80136e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80136e6:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80136e8:	6a3b      	ldr	r3, [r7, #32]
 80136ea:	2202      	movs	r2, #2
 80136ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 80136f0:	79fb      	ldrb	r3, [r7, #7]
 80136f2:	2b04      	cmp	r3, #4
 80136f4:	d827      	bhi.n	8013746 <xTaskGenericNotify+0xaa>
 80136f6:	a201      	add	r2, pc, #4	; (adr r2, 80136fc <xTaskGenericNotify+0x60>)
 80136f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80136fc:	08013765 	.word	0x08013765
 8013700:	08013711 	.word	0x08013711
 8013704:	0801371f 	.word	0x0801371f
 8013708:	0801372b 	.word	0x0801372b
 801370c:	08013733 	.word	0x08013733
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8013710:	6a3b      	ldr	r3, [r7, #32]
 8013712:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013714:	68bb      	ldr	r3, [r7, #8]
 8013716:	431a      	orrs	r2, r3
 8013718:	6a3b      	ldr	r3, [r7, #32]
 801371a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 801371c:	e025      	b.n	801376a <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801371e:	6a3b      	ldr	r3, [r7, #32]
 8013720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013722:	1c5a      	adds	r2, r3, #1
 8013724:	6a3b      	ldr	r3, [r7, #32]
 8013726:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8013728:	e01f      	b.n	801376a <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801372a:	6a3b      	ldr	r3, [r7, #32]
 801372c:	68ba      	ldr	r2, [r7, #8]
 801372e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8013730:	e01b      	b.n	801376a <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8013732:	7ffb      	ldrb	r3, [r7, #31]
 8013734:	2b02      	cmp	r3, #2
 8013736:	d003      	beq.n	8013740 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8013738:	6a3b      	ldr	r3, [r7, #32]
 801373a:	68ba      	ldr	r2, [r7, #8]
 801373c:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801373e:	e014      	b.n	801376a <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 8013740:	2300      	movs	r3, #0
 8013742:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8013744:	e011      	b.n	801376a <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8013746:	6a3b      	ldr	r3, [r7, #32]
 8013748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801374a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801374e:	d00b      	beq.n	8013768 <xTaskGenericNotify+0xcc>
 8013750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013754:	f383 8811 	msr	BASEPRI, r3
 8013758:	f3bf 8f6f 	isb	sy
 801375c:	f3bf 8f4f 	dsb	sy
 8013760:	617b      	str	r3, [r7, #20]
 8013762:	e7fe      	b.n	8013762 <xTaskGenericNotify+0xc6>
					break;
 8013764:	bf00      	nop
 8013766:	e000      	b.n	801376a <xTaskGenericNotify+0xce>

					break;
 8013768:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801376a:	7ffb      	ldrb	r3, [r7, #31]
 801376c:	2b01      	cmp	r3, #1
 801376e:	d138      	bne.n	80137e2 <xTaskGenericNotify+0x146>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013770:	6a3b      	ldr	r3, [r7, #32]
 8013772:	3304      	adds	r3, #4
 8013774:	4618      	mov	r0, r3
 8013776:	f7fe fb36 	bl	8011de6 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 801377a:	6a3b      	ldr	r3, [r7, #32]
 801377c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801377e:	2201      	movs	r2, #1
 8013780:	409a      	lsls	r2, r3
 8013782:	4b1b      	ldr	r3, [pc, #108]	; (80137f0 <xTaskGenericNotify+0x154>)
 8013784:	681b      	ldr	r3, [r3, #0]
 8013786:	4313      	orrs	r3, r2
 8013788:	4a19      	ldr	r2, [pc, #100]	; (80137f0 <xTaskGenericNotify+0x154>)
 801378a:	6013      	str	r3, [r2, #0]
 801378c:	6a3b      	ldr	r3, [r7, #32]
 801378e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013790:	4613      	mov	r3, r2
 8013792:	009b      	lsls	r3, r3, #2
 8013794:	4413      	add	r3, r2
 8013796:	009b      	lsls	r3, r3, #2
 8013798:	4a16      	ldr	r2, [pc, #88]	; (80137f4 <xTaskGenericNotify+0x158>)
 801379a:	441a      	add	r2, r3
 801379c:	6a3b      	ldr	r3, [r7, #32]
 801379e:	3304      	adds	r3, #4
 80137a0:	4619      	mov	r1, r3
 80137a2:	4610      	mov	r0, r2
 80137a4:	f7fe fac2 	bl	8011d2c <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80137a8:	6a3b      	ldr	r3, [r7, #32]
 80137aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d009      	beq.n	80137c4 <xTaskGenericNotify+0x128>
 80137b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137b4:	f383 8811 	msr	BASEPRI, r3
 80137b8:	f3bf 8f6f 	isb	sy
 80137bc:	f3bf 8f4f 	dsb	sy
 80137c0:	613b      	str	r3, [r7, #16]
 80137c2:	e7fe      	b.n	80137c2 <xTaskGenericNotify+0x126>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80137c4:	6a3b      	ldr	r3, [r7, #32]
 80137c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80137c8:	4b0b      	ldr	r3, [pc, #44]	; (80137f8 <xTaskGenericNotify+0x15c>)
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137ce:	429a      	cmp	r2, r3
 80137d0:	d907      	bls.n	80137e2 <xTaskGenericNotify+0x146>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80137d2:	4b0a      	ldr	r3, [pc, #40]	; (80137fc <xTaskGenericNotify+0x160>)
 80137d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80137d8:	601a      	str	r2, [r3, #0]
 80137da:	f3bf 8f4f 	dsb	sy
 80137de:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80137e2:	f000 faa1 	bl	8013d28 <vPortExitCritical>

		return xReturn;
 80137e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80137e8:	4618      	mov	r0, r3
 80137ea:	3728      	adds	r7, #40	; 0x28
 80137ec:	46bd      	mov	sp, r7
 80137ee:	bd80      	pop	{r7, pc}
 80137f0:	2000296c 	.word	0x2000296c
 80137f4:	20002868 	.word	0x20002868
 80137f8:	20002864 	.word	0x20002864
 80137fc:	e000ed04 	.word	0xe000ed04

08013800 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8013800:	b580      	push	{r7, lr}
 8013802:	b08e      	sub	sp, #56	; 0x38
 8013804:	af00      	add	r7, sp, #0
 8013806:	60f8      	str	r0, [r7, #12]
 8013808:	60b9      	str	r1, [r7, #8]
 801380a:	603b      	str	r3, [r7, #0]
 801380c:	4613      	mov	r3, r2
 801380e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8013810:	2301      	movs	r3, #1
 8013812:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8013814:	68fb      	ldr	r3, [r7, #12]
 8013816:	2b00      	cmp	r3, #0
 8013818:	d109      	bne.n	801382e <xTaskGenericNotifyFromISR+0x2e>
 801381a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801381e:	f383 8811 	msr	BASEPRI, r3
 8013822:	f3bf 8f6f 	isb	sy
 8013826:	f3bf 8f4f 	dsb	sy
 801382a:	627b      	str	r3, [r7, #36]	; 0x24
 801382c:	e7fe      	b.n	801382c <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801382e:	f000 fb29 	bl	8013e84 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8013832:	68fb      	ldr	r3, [r7, #12]
 8013834:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8013836:	f3ef 8211 	mrs	r2, BASEPRI
 801383a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801383e:	f383 8811 	msr	BASEPRI, r3
 8013842:	f3bf 8f6f 	isb	sy
 8013846:	f3bf 8f4f 	dsb	sy
 801384a:	623a      	str	r2, [r7, #32]
 801384c:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 801384e:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013850:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8013852:	683b      	ldr	r3, [r7, #0]
 8013854:	2b00      	cmp	r3, #0
 8013856:	d003      	beq.n	8013860 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8013858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801385a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801385c:	683b      	ldr	r3, [r7, #0]
 801385e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8013860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013862:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013866:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801386a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801386c:	2202      	movs	r2, #2
 801386e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8013872:	79fb      	ldrb	r3, [r7, #7]
 8013874:	2b04      	cmp	r3, #4
 8013876:	d829      	bhi.n	80138cc <xTaskGenericNotifyFromISR+0xcc>
 8013878:	a201      	add	r2, pc, #4	; (adr r2, 8013880 <xTaskGenericNotifyFromISR+0x80>)
 801387a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801387e:	bf00      	nop
 8013880:	080138eb 	.word	0x080138eb
 8013884:	08013895 	.word	0x08013895
 8013888:	080138a3 	.word	0x080138a3
 801388c:	080138af 	.word	0x080138af
 8013890:	080138b7 	.word	0x080138b7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8013894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013896:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013898:	68bb      	ldr	r3, [r7, #8]
 801389a:	431a      	orrs	r2, r3
 801389c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801389e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80138a0:	e026      	b.n	80138f0 <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80138a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80138a6:	1c5a      	adds	r2, r3, #1
 80138a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138aa:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80138ac:	e020      	b.n	80138f0 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80138ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138b0:	68ba      	ldr	r2, [r7, #8]
 80138b2:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80138b4:	e01c      	b.n	80138f0 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80138b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80138ba:	2b02      	cmp	r3, #2
 80138bc:	d003      	beq.n	80138c6 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80138be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138c0:	68ba      	ldr	r2, [r7, #8]
 80138c2:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80138c4:	e014      	b.n	80138f0 <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 80138c6:	2300      	movs	r3, #0
 80138c8:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80138ca:	e011      	b.n	80138f0 <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80138cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80138d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138d4:	d00b      	beq.n	80138ee <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 80138d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138da:	f383 8811 	msr	BASEPRI, r3
 80138de:	f3bf 8f6f 	isb	sy
 80138e2:	f3bf 8f4f 	dsb	sy
 80138e6:	61bb      	str	r3, [r7, #24]
 80138e8:	e7fe      	b.n	80138e8 <xTaskGenericNotifyFromISR+0xe8>
					break;
 80138ea:	bf00      	nop
 80138ec:	e000      	b.n	80138f0 <xTaskGenericNotifyFromISR+0xf0>
					break;
 80138ee:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80138f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80138f4:	2b01      	cmp	r3, #1
 80138f6:	d144      	bne.n	8013982 <xTaskGenericNotifyFromISR+0x182>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80138f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d009      	beq.n	8013914 <xTaskGenericNotifyFromISR+0x114>
 8013900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013904:	f383 8811 	msr	BASEPRI, r3
 8013908:	f3bf 8f6f 	isb	sy
 801390c:	f3bf 8f4f 	dsb	sy
 8013910:	617b      	str	r3, [r7, #20]
 8013912:	e7fe      	b.n	8013912 <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013914:	4b20      	ldr	r3, [pc, #128]	; (8013998 <xTaskGenericNotifyFromISR+0x198>)
 8013916:	681b      	ldr	r3, [r3, #0]
 8013918:	2b00      	cmp	r3, #0
 801391a:	d11c      	bne.n	8013956 <xTaskGenericNotifyFromISR+0x156>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801391c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801391e:	3304      	adds	r3, #4
 8013920:	4618      	mov	r0, r3
 8013922:	f7fe fa60 	bl	8011de6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801392a:	2201      	movs	r2, #1
 801392c:	409a      	lsls	r2, r3
 801392e:	4b1b      	ldr	r3, [pc, #108]	; (801399c <xTaskGenericNotifyFromISR+0x19c>)
 8013930:	681b      	ldr	r3, [r3, #0]
 8013932:	4313      	orrs	r3, r2
 8013934:	4a19      	ldr	r2, [pc, #100]	; (801399c <xTaskGenericNotifyFromISR+0x19c>)
 8013936:	6013      	str	r3, [r2, #0]
 8013938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801393a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801393c:	4613      	mov	r3, r2
 801393e:	009b      	lsls	r3, r3, #2
 8013940:	4413      	add	r3, r2
 8013942:	009b      	lsls	r3, r3, #2
 8013944:	4a16      	ldr	r2, [pc, #88]	; (80139a0 <xTaskGenericNotifyFromISR+0x1a0>)
 8013946:	441a      	add	r2, r3
 8013948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801394a:	3304      	adds	r3, #4
 801394c:	4619      	mov	r1, r3
 801394e:	4610      	mov	r0, r2
 8013950:	f7fe f9ec 	bl	8011d2c <vListInsertEnd>
 8013954:	e005      	b.n	8013962 <xTaskGenericNotifyFromISR+0x162>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8013956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013958:	3318      	adds	r3, #24
 801395a:	4619      	mov	r1, r3
 801395c:	4811      	ldr	r0, [pc, #68]	; (80139a4 <xTaskGenericNotifyFromISR+0x1a4>)
 801395e:	f7fe f9e5 	bl	8011d2c <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013966:	4b10      	ldr	r3, [pc, #64]	; (80139a8 <xTaskGenericNotifyFromISR+0x1a8>)
 8013968:	681b      	ldr	r3, [r3, #0]
 801396a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801396c:	429a      	cmp	r2, r3
 801396e:	d908      	bls.n	8013982 <xTaskGenericNotifyFromISR+0x182>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8013970:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013972:	2b00      	cmp	r3, #0
 8013974:	d002      	beq.n	801397c <xTaskGenericNotifyFromISR+0x17c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8013976:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013978:	2201      	movs	r2, #1
 801397a:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 801397c:	4b0b      	ldr	r3, [pc, #44]	; (80139ac <xTaskGenericNotifyFromISR+0x1ac>)
 801397e:	2201      	movs	r2, #1
 8013980:	601a      	str	r2, [r3, #0]
 8013982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013984:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013986:	693b      	ldr	r3, [r7, #16]
 8013988:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 801398c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 801398e:	4618      	mov	r0, r3
 8013990:	3738      	adds	r7, #56	; 0x38
 8013992:	46bd      	mov	sp, r7
 8013994:	bd80      	pop	{r7, pc}
 8013996:	bf00      	nop
 8013998:	2000298c 	.word	0x2000298c
 801399c:	2000296c 	.word	0x2000296c
 80139a0:	20002868 	.word	0x20002868
 80139a4:	20002924 	.word	0x20002924
 80139a8:	20002864 	.word	0x20002864
 80139ac:	20002978 	.word	0x20002978

080139b0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80139b0:	b580      	push	{r7, lr}
 80139b2:	b084      	sub	sp, #16
 80139b4:	af00      	add	r7, sp, #0
 80139b6:	6078      	str	r0, [r7, #4]
 80139b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80139ba:	4b29      	ldr	r3, [pc, #164]	; (8013a60 <prvAddCurrentTaskToDelayedList+0xb0>)
 80139bc:	681b      	ldr	r3, [r3, #0]
 80139be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80139c0:	4b28      	ldr	r3, [pc, #160]	; (8013a64 <prvAddCurrentTaskToDelayedList+0xb4>)
 80139c2:	681b      	ldr	r3, [r3, #0]
 80139c4:	3304      	adds	r3, #4
 80139c6:	4618      	mov	r0, r3
 80139c8:	f7fe fa0d 	bl	8011de6 <uxListRemove>
 80139cc:	4603      	mov	r3, r0
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	d10b      	bne.n	80139ea <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80139d2:	4b24      	ldr	r3, [pc, #144]	; (8013a64 <prvAddCurrentTaskToDelayedList+0xb4>)
 80139d4:	681b      	ldr	r3, [r3, #0]
 80139d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139d8:	2201      	movs	r2, #1
 80139da:	fa02 f303 	lsl.w	r3, r2, r3
 80139de:	43da      	mvns	r2, r3
 80139e0:	4b21      	ldr	r3, [pc, #132]	; (8013a68 <prvAddCurrentTaskToDelayedList+0xb8>)
 80139e2:	681b      	ldr	r3, [r3, #0]
 80139e4:	4013      	ands	r3, r2
 80139e6:	4a20      	ldr	r2, [pc, #128]	; (8013a68 <prvAddCurrentTaskToDelayedList+0xb8>)
 80139e8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80139f0:	d10a      	bne.n	8013a08 <prvAddCurrentTaskToDelayedList+0x58>
 80139f2:	683b      	ldr	r3, [r7, #0]
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d007      	beq.n	8013a08 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80139f8:	4b1a      	ldr	r3, [pc, #104]	; (8013a64 <prvAddCurrentTaskToDelayedList+0xb4>)
 80139fa:	681b      	ldr	r3, [r3, #0]
 80139fc:	3304      	adds	r3, #4
 80139fe:	4619      	mov	r1, r3
 8013a00:	481a      	ldr	r0, [pc, #104]	; (8013a6c <prvAddCurrentTaskToDelayedList+0xbc>)
 8013a02:	f7fe f993 	bl	8011d2c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8013a06:	e026      	b.n	8013a56 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8013a08:	68fa      	ldr	r2, [r7, #12]
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	4413      	add	r3, r2
 8013a0e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013a10:	4b14      	ldr	r3, [pc, #80]	; (8013a64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	68ba      	ldr	r2, [r7, #8]
 8013a16:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8013a18:	68ba      	ldr	r2, [r7, #8]
 8013a1a:	68fb      	ldr	r3, [r7, #12]
 8013a1c:	429a      	cmp	r2, r3
 8013a1e:	d209      	bcs.n	8013a34 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013a20:	4b13      	ldr	r3, [pc, #76]	; (8013a70 <prvAddCurrentTaskToDelayedList+0xc0>)
 8013a22:	681a      	ldr	r2, [r3, #0]
 8013a24:	4b0f      	ldr	r3, [pc, #60]	; (8013a64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013a26:	681b      	ldr	r3, [r3, #0]
 8013a28:	3304      	adds	r3, #4
 8013a2a:	4619      	mov	r1, r3
 8013a2c:	4610      	mov	r0, r2
 8013a2e:	f7fe f9a1 	bl	8011d74 <vListInsert>
}
 8013a32:	e010      	b.n	8013a56 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013a34:	4b0f      	ldr	r3, [pc, #60]	; (8013a74 <prvAddCurrentTaskToDelayedList+0xc4>)
 8013a36:	681a      	ldr	r2, [r3, #0]
 8013a38:	4b0a      	ldr	r3, [pc, #40]	; (8013a64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013a3a:	681b      	ldr	r3, [r3, #0]
 8013a3c:	3304      	adds	r3, #4
 8013a3e:	4619      	mov	r1, r3
 8013a40:	4610      	mov	r0, r2
 8013a42:	f7fe f997 	bl	8011d74 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8013a46:	4b0c      	ldr	r3, [pc, #48]	; (8013a78 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013a48:	681b      	ldr	r3, [r3, #0]
 8013a4a:	68ba      	ldr	r2, [r7, #8]
 8013a4c:	429a      	cmp	r2, r3
 8013a4e:	d202      	bcs.n	8013a56 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8013a50:	4a09      	ldr	r2, [pc, #36]	; (8013a78 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013a52:	68bb      	ldr	r3, [r7, #8]
 8013a54:	6013      	str	r3, [r2, #0]
}
 8013a56:	bf00      	nop
 8013a58:	3710      	adds	r7, #16
 8013a5a:	46bd      	mov	sp, r7
 8013a5c:	bd80      	pop	{r7, pc}
 8013a5e:	bf00      	nop
 8013a60:	20002968 	.word	0x20002968
 8013a64:	20002864 	.word	0x20002864
 8013a68:	2000296c 	.word	0x2000296c
 8013a6c:	20002950 	.word	0x20002950
 8013a70:	20002920 	.word	0x20002920
 8013a74:	2000291c 	.word	0x2000291c
 8013a78:	20002984 	.word	0x20002984

08013a7c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8013a7c:	b480      	push	{r7}
 8013a7e:	b085      	sub	sp, #20
 8013a80:	af00      	add	r7, sp, #0
 8013a82:	60f8      	str	r0, [r7, #12]
 8013a84:	60b9      	str	r1, [r7, #8]
 8013a86:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8013a88:	68fb      	ldr	r3, [r7, #12]
 8013a8a:	3b04      	subs	r3, #4
 8013a8c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8013a94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	3b04      	subs	r3, #4
 8013a9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013a9c:	68bb      	ldr	r3, [r7, #8]
 8013a9e:	f023 0201 	bic.w	r2, r3, #1
 8013aa2:	68fb      	ldr	r3, [r7, #12]
 8013aa4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013aa6:	68fb      	ldr	r3, [r7, #12]
 8013aa8:	3b04      	subs	r3, #4
 8013aaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013aac:	4a0c      	ldr	r2, [pc, #48]	; (8013ae0 <pxPortInitialiseStack+0x64>)
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8013ab2:	68fb      	ldr	r3, [r7, #12]
 8013ab4:	3b14      	subs	r3, #20
 8013ab6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013ab8:	687a      	ldr	r2, [r7, #4]
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8013abe:	68fb      	ldr	r3, [r7, #12]
 8013ac0:	3b04      	subs	r3, #4
 8013ac2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8013ac4:	68fb      	ldr	r3, [r7, #12]
 8013ac6:	f06f 0202 	mvn.w	r2, #2
 8013aca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	3b20      	subs	r3, #32
 8013ad0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8013ad2:	68fb      	ldr	r3, [r7, #12]
}
 8013ad4:	4618      	mov	r0, r3
 8013ad6:	3714      	adds	r7, #20
 8013ad8:	46bd      	mov	sp, r7
 8013ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ade:	4770      	bx	lr
 8013ae0:	08013ae5 	.word	0x08013ae5

08013ae4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013ae4:	b480      	push	{r7}
 8013ae6:	b085      	sub	sp, #20
 8013ae8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8013aea:	2300      	movs	r3, #0
 8013aec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8013aee:	4b11      	ldr	r3, [pc, #68]	; (8013b34 <prvTaskExitError+0x50>)
 8013af0:	681b      	ldr	r3, [r3, #0]
 8013af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013af6:	d009      	beq.n	8013b0c <prvTaskExitError+0x28>
	__asm volatile
 8013af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013afc:	f383 8811 	msr	BASEPRI, r3
 8013b00:	f3bf 8f6f 	isb	sy
 8013b04:	f3bf 8f4f 	dsb	sy
 8013b08:	60fb      	str	r3, [r7, #12]
 8013b0a:	e7fe      	b.n	8013b0a <prvTaskExitError+0x26>
 8013b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b10:	f383 8811 	msr	BASEPRI, r3
 8013b14:	f3bf 8f6f 	isb	sy
 8013b18:	f3bf 8f4f 	dsb	sy
 8013b1c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8013b1e:	bf00      	nop
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d0fc      	beq.n	8013b20 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8013b26:	bf00      	nop
 8013b28:	3714      	adds	r7, #20
 8013b2a:	46bd      	mov	sp, r7
 8013b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b30:	4770      	bx	lr
 8013b32:	bf00      	nop
 8013b34:	200021a4 	.word	0x200021a4
	...

08013b40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013b40:	4b07      	ldr	r3, [pc, #28]	; (8013b60 <pxCurrentTCBConst2>)
 8013b42:	6819      	ldr	r1, [r3, #0]
 8013b44:	6808      	ldr	r0, [r1, #0]
 8013b46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b4a:	f380 8809 	msr	PSP, r0
 8013b4e:	f3bf 8f6f 	isb	sy
 8013b52:	f04f 0000 	mov.w	r0, #0
 8013b56:	f380 8811 	msr	BASEPRI, r0
 8013b5a:	4770      	bx	lr
 8013b5c:	f3af 8000 	nop.w

08013b60 <pxCurrentTCBConst2>:
 8013b60:	20002864 	.word	0x20002864
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013b64:	bf00      	nop
 8013b66:	bf00      	nop

08013b68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013b68:	4808      	ldr	r0, [pc, #32]	; (8013b8c <prvPortStartFirstTask+0x24>)
 8013b6a:	6800      	ldr	r0, [r0, #0]
 8013b6c:	6800      	ldr	r0, [r0, #0]
 8013b6e:	f380 8808 	msr	MSP, r0
 8013b72:	f04f 0000 	mov.w	r0, #0
 8013b76:	f380 8814 	msr	CONTROL, r0
 8013b7a:	b662      	cpsie	i
 8013b7c:	b661      	cpsie	f
 8013b7e:	f3bf 8f4f 	dsb	sy
 8013b82:	f3bf 8f6f 	isb	sy
 8013b86:	df00      	svc	0
 8013b88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8013b8a:	bf00      	nop
 8013b8c:	e000ed08 	.word	0xe000ed08

08013b90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013b90:	b580      	push	{r7, lr}
 8013b92:	b086      	sub	sp, #24
 8013b94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8013b96:	4b44      	ldr	r3, [pc, #272]	; (8013ca8 <xPortStartScheduler+0x118>)
 8013b98:	681b      	ldr	r3, [r3, #0]
 8013b9a:	4a44      	ldr	r2, [pc, #272]	; (8013cac <xPortStartScheduler+0x11c>)
 8013b9c:	4293      	cmp	r3, r2
 8013b9e:	d109      	bne.n	8013bb4 <xPortStartScheduler+0x24>
 8013ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ba4:	f383 8811 	msr	BASEPRI, r3
 8013ba8:	f3bf 8f6f 	isb	sy
 8013bac:	f3bf 8f4f 	dsb	sy
 8013bb0:	613b      	str	r3, [r7, #16]
 8013bb2:	e7fe      	b.n	8013bb2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8013bb4:	4b3c      	ldr	r3, [pc, #240]	; (8013ca8 <xPortStartScheduler+0x118>)
 8013bb6:	681b      	ldr	r3, [r3, #0]
 8013bb8:	4a3d      	ldr	r2, [pc, #244]	; (8013cb0 <xPortStartScheduler+0x120>)
 8013bba:	4293      	cmp	r3, r2
 8013bbc:	d109      	bne.n	8013bd2 <xPortStartScheduler+0x42>
 8013bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bc2:	f383 8811 	msr	BASEPRI, r3
 8013bc6:	f3bf 8f6f 	isb	sy
 8013bca:	f3bf 8f4f 	dsb	sy
 8013bce:	60fb      	str	r3, [r7, #12]
 8013bd0:	e7fe      	b.n	8013bd0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013bd2:	4b38      	ldr	r3, [pc, #224]	; (8013cb4 <xPortStartScheduler+0x124>)
 8013bd4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8013bd6:	697b      	ldr	r3, [r7, #20]
 8013bd8:	781b      	ldrb	r3, [r3, #0]
 8013bda:	b2db      	uxtb	r3, r3
 8013bdc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013bde:	697b      	ldr	r3, [r7, #20]
 8013be0:	22ff      	movs	r2, #255	; 0xff
 8013be2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013be4:	697b      	ldr	r3, [r7, #20]
 8013be6:	781b      	ldrb	r3, [r3, #0]
 8013be8:	b2db      	uxtb	r3, r3
 8013bea:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013bec:	78fb      	ldrb	r3, [r7, #3]
 8013bee:	b2db      	uxtb	r3, r3
 8013bf0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8013bf4:	b2da      	uxtb	r2, r3
 8013bf6:	4b30      	ldr	r3, [pc, #192]	; (8013cb8 <xPortStartScheduler+0x128>)
 8013bf8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8013bfa:	4b30      	ldr	r3, [pc, #192]	; (8013cbc <xPortStartScheduler+0x12c>)
 8013bfc:	2207      	movs	r2, #7
 8013bfe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013c00:	e009      	b.n	8013c16 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8013c02:	4b2e      	ldr	r3, [pc, #184]	; (8013cbc <xPortStartScheduler+0x12c>)
 8013c04:	681b      	ldr	r3, [r3, #0]
 8013c06:	3b01      	subs	r3, #1
 8013c08:	4a2c      	ldr	r2, [pc, #176]	; (8013cbc <xPortStartScheduler+0x12c>)
 8013c0a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013c0c:	78fb      	ldrb	r3, [r7, #3]
 8013c0e:	b2db      	uxtb	r3, r3
 8013c10:	005b      	lsls	r3, r3, #1
 8013c12:	b2db      	uxtb	r3, r3
 8013c14:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013c16:	78fb      	ldrb	r3, [r7, #3]
 8013c18:	b2db      	uxtb	r3, r3
 8013c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013c1e:	2b80      	cmp	r3, #128	; 0x80
 8013c20:	d0ef      	beq.n	8013c02 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8013c22:	4b26      	ldr	r3, [pc, #152]	; (8013cbc <xPortStartScheduler+0x12c>)
 8013c24:	681b      	ldr	r3, [r3, #0]
 8013c26:	f1c3 0307 	rsb	r3, r3, #7
 8013c2a:	2b04      	cmp	r3, #4
 8013c2c:	d009      	beq.n	8013c42 <xPortStartScheduler+0xb2>
 8013c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c32:	f383 8811 	msr	BASEPRI, r3
 8013c36:	f3bf 8f6f 	isb	sy
 8013c3a:	f3bf 8f4f 	dsb	sy
 8013c3e:	60bb      	str	r3, [r7, #8]
 8013c40:	e7fe      	b.n	8013c40 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8013c42:	4b1e      	ldr	r3, [pc, #120]	; (8013cbc <xPortStartScheduler+0x12c>)
 8013c44:	681b      	ldr	r3, [r3, #0]
 8013c46:	021b      	lsls	r3, r3, #8
 8013c48:	4a1c      	ldr	r2, [pc, #112]	; (8013cbc <xPortStartScheduler+0x12c>)
 8013c4a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013c4c:	4b1b      	ldr	r3, [pc, #108]	; (8013cbc <xPortStartScheduler+0x12c>)
 8013c4e:	681b      	ldr	r3, [r3, #0]
 8013c50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8013c54:	4a19      	ldr	r2, [pc, #100]	; (8013cbc <xPortStartScheduler+0x12c>)
 8013c56:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	b2da      	uxtb	r2, r3
 8013c5c:	697b      	ldr	r3, [r7, #20]
 8013c5e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8013c60:	4b17      	ldr	r3, [pc, #92]	; (8013cc0 <xPortStartScheduler+0x130>)
 8013c62:	681b      	ldr	r3, [r3, #0]
 8013c64:	4a16      	ldr	r2, [pc, #88]	; (8013cc0 <xPortStartScheduler+0x130>)
 8013c66:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013c6a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013c6c:	4b14      	ldr	r3, [pc, #80]	; (8013cc0 <xPortStartScheduler+0x130>)
 8013c6e:	681b      	ldr	r3, [r3, #0]
 8013c70:	4a13      	ldr	r2, [pc, #76]	; (8013cc0 <xPortStartScheduler+0x130>)
 8013c72:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8013c76:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8013c78:	f000 f8d6 	bl	8013e28 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013c7c:	4b11      	ldr	r3, [pc, #68]	; (8013cc4 <xPortStartScheduler+0x134>)
 8013c7e:	2200      	movs	r2, #0
 8013c80:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8013c82:	f000 f8f5 	bl	8013e70 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8013c86:	4b10      	ldr	r3, [pc, #64]	; (8013cc8 <xPortStartScheduler+0x138>)
 8013c88:	681b      	ldr	r3, [r3, #0]
 8013c8a:	4a0f      	ldr	r2, [pc, #60]	; (8013cc8 <xPortStartScheduler+0x138>)
 8013c8c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8013c90:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8013c92:	f7ff ff69 	bl	8013b68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8013c96:	f7ff f9d1 	bl	801303c <vTaskSwitchContext>
	prvTaskExitError();
 8013c9a:	f7ff ff23 	bl	8013ae4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8013c9e:	2300      	movs	r3, #0
}
 8013ca0:	4618      	mov	r0, r3
 8013ca2:	3718      	adds	r7, #24
 8013ca4:	46bd      	mov	sp, r7
 8013ca6:	bd80      	pop	{r7, pc}
 8013ca8:	e000ed00 	.word	0xe000ed00
 8013cac:	410fc271 	.word	0x410fc271
 8013cb0:	410fc270 	.word	0x410fc270
 8013cb4:	e000e400 	.word	0xe000e400
 8013cb8:	20002990 	.word	0x20002990
 8013cbc:	20002994 	.word	0x20002994
 8013cc0:	e000ed20 	.word	0xe000ed20
 8013cc4:	200021a4 	.word	0x200021a4
 8013cc8:	e000ef34 	.word	0xe000ef34

08013ccc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8013ccc:	b480      	push	{r7}
 8013cce:	b083      	sub	sp, #12
 8013cd0:	af00      	add	r7, sp, #0
 8013cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cd6:	f383 8811 	msr	BASEPRI, r3
 8013cda:	f3bf 8f6f 	isb	sy
 8013cde:	f3bf 8f4f 	dsb	sy
 8013ce2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8013ce4:	4b0e      	ldr	r3, [pc, #56]	; (8013d20 <vPortEnterCritical+0x54>)
 8013ce6:	681b      	ldr	r3, [r3, #0]
 8013ce8:	3301      	adds	r3, #1
 8013cea:	4a0d      	ldr	r2, [pc, #52]	; (8013d20 <vPortEnterCritical+0x54>)
 8013cec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8013cee:	4b0c      	ldr	r3, [pc, #48]	; (8013d20 <vPortEnterCritical+0x54>)
 8013cf0:	681b      	ldr	r3, [r3, #0]
 8013cf2:	2b01      	cmp	r3, #1
 8013cf4:	d10e      	bne.n	8013d14 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013cf6:	4b0b      	ldr	r3, [pc, #44]	; (8013d24 <vPortEnterCritical+0x58>)
 8013cf8:	681b      	ldr	r3, [r3, #0]
 8013cfa:	b2db      	uxtb	r3, r3
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d009      	beq.n	8013d14 <vPortEnterCritical+0x48>
 8013d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d04:	f383 8811 	msr	BASEPRI, r3
 8013d08:	f3bf 8f6f 	isb	sy
 8013d0c:	f3bf 8f4f 	dsb	sy
 8013d10:	603b      	str	r3, [r7, #0]
 8013d12:	e7fe      	b.n	8013d12 <vPortEnterCritical+0x46>
	}
}
 8013d14:	bf00      	nop
 8013d16:	370c      	adds	r7, #12
 8013d18:	46bd      	mov	sp, r7
 8013d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d1e:	4770      	bx	lr
 8013d20:	200021a4 	.word	0x200021a4
 8013d24:	e000ed04 	.word	0xe000ed04

08013d28 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8013d28:	b480      	push	{r7}
 8013d2a:	b083      	sub	sp, #12
 8013d2c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8013d2e:	4b11      	ldr	r3, [pc, #68]	; (8013d74 <vPortExitCritical+0x4c>)
 8013d30:	681b      	ldr	r3, [r3, #0]
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d109      	bne.n	8013d4a <vPortExitCritical+0x22>
 8013d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d3a:	f383 8811 	msr	BASEPRI, r3
 8013d3e:	f3bf 8f6f 	isb	sy
 8013d42:	f3bf 8f4f 	dsb	sy
 8013d46:	607b      	str	r3, [r7, #4]
 8013d48:	e7fe      	b.n	8013d48 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8013d4a:	4b0a      	ldr	r3, [pc, #40]	; (8013d74 <vPortExitCritical+0x4c>)
 8013d4c:	681b      	ldr	r3, [r3, #0]
 8013d4e:	3b01      	subs	r3, #1
 8013d50:	4a08      	ldr	r2, [pc, #32]	; (8013d74 <vPortExitCritical+0x4c>)
 8013d52:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8013d54:	4b07      	ldr	r3, [pc, #28]	; (8013d74 <vPortExitCritical+0x4c>)
 8013d56:	681b      	ldr	r3, [r3, #0]
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d104      	bne.n	8013d66 <vPortExitCritical+0x3e>
 8013d5c:	2300      	movs	r3, #0
 8013d5e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013d60:	683b      	ldr	r3, [r7, #0]
 8013d62:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8013d66:	bf00      	nop
 8013d68:	370c      	adds	r7, #12
 8013d6a:	46bd      	mov	sp, r7
 8013d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d70:	4770      	bx	lr
 8013d72:	bf00      	nop
 8013d74:	200021a4 	.word	0x200021a4
	...

08013d80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013d80:	f3ef 8009 	mrs	r0, PSP
 8013d84:	f3bf 8f6f 	isb	sy
 8013d88:	4b15      	ldr	r3, [pc, #84]	; (8013de0 <pxCurrentTCBConst>)
 8013d8a:	681a      	ldr	r2, [r3, #0]
 8013d8c:	f01e 0f10 	tst.w	lr, #16
 8013d90:	bf08      	it	eq
 8013d92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013d96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d9a:	6010      	str	r0, [r2, #0]
 8013d9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013da0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8013da4:	f380 8811 	msr	BASEPRI, r0
 8013da8:	f3bf 8f4f 	dsb	sy
 8013dac:	f3bf 8f6f 	isb	sy
 8013db0:	f7ff f944 	bl	801303c <vTaskSwitchContext>
 8013db4:	f04f 0000 	mov.w	r0, #0
 8013db8:	f380 8811 	msr	BASEPRI, r0
 8013dbc:	bc09      	pop	{r0, r3}
 8013dbe:	6819      	ldr	r1, [r3, #0]
 8013dc0:	6808      	ldr	r0, [r1, #0]
 8013dc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013dc6:	f01e 0f10 	tst.w	lr, #16
 8013dca:	bf08      	it	eq
 8013dcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013dd0:	f380 8809 	msr	PSP, r0
 8013dd4:	f3bf 8f6f 	isb	sy
 8013dd8:	4770      	bx	lr
 8013dda:	bf00      	nop
 8013ddc:	f3af 8000 	nop.w

08013de0 <pxCurrentTCBConst>:
 8013de0:	20002864 	.word	0x20002864
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013de4:	bf00      	nop
 8013de6:	bf00      	nop

08013de8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013de8:	b580      	push	{r7, lr}
 8013dea:	b082      	sub	sp, #8
 8013dec:	af00      	add	r7, sp, #0
	__asm volatile
 8013dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013df2:	f383 8811 	msr	BASEPRI, r3
 8013df6:	f3bf 8f6f 	isb	sy
 8013dfa:	f3bf 8f4f 	dsb	sy
 8013dfe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013e00:	f7ff f864 	bl	8012ecc <xTaskIncrementTick>
 8013e04:	4603      	mov	r3, r0
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d003      	beq.n	8013e12 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8013e0a:	4b06      	ldr	r3, [pc, #24]	; (8013e24 <SysTick_Handler+0x3c>)
 8013e0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013e10:	601a      	str	r2, [r3, #0]
 8013e12:	2300      	movs	r3, #0
 8013e14:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013e16:	683b      	ldr	r3, [r7, #0]
 8013e18:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8013e1c:	bf00      	nop
 8013e1e:	3708      	adds	r7, #8
 8013e20:	46bd      	mov	sp, r7
 8013e22:	bd80      	pop	{r7, pc}
 8013e24:	e000ed04 	.word	0xe000ed04

08013e28 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8013e28:	b480      	push	{r7}
 8013e2a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013e2c:	4b0b      	ldr	r3, [pc, #44]	; (8013e5c <vPortSetupTimerInterrupt+0x34>)
 8013e2e:	2200      	movs	r2, #0
 8013e30:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013e32:	4b0b      	ldr	r3, [pc, #44]	; (8013e60 <vPortSetupTimerInterrupt+0x38>)
 8013e34:	2200      	movs	r2, #0
 8013e36:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8013e38:	4b0a      	ldr	r3, [pc, #40]	; (8013e64 <vPortSetupTimerInterrupt+0x3c>)
 8013e3a:	681b      	ldr	r3, [r3, #0]
 8013e3c:	4a0a      	ldr	r2, [pc, #40]	; (8013e68 <vPortSetupTimerInterrupt+0x40>)
 8013e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8013e42:	099b      	lsrs	r3, r3, #6
 8013e44:	4a09      	ldr	r2, [pc, #36]	; (8013e6c <vPortSetupTimerInterrupt+0x44>)
 8013e46:	3b01      	subs	r3, #1
 8013e48:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8013e4a:	4b04      	ldr	r3, [pc, #16]	; (8013e5c <vPortSetupTimerInterrupt+0x34>)
 8013e4c:	2207      	movs	r2, #7
 8013e4e:	601a      	str	r2, [r3, #0]
}
 8013e50:	bf00      	nop
 8013e52:	46bd      	mov	sp, r7
 8013e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e58:	4770      	bx	lr
 8013e5a:	bf00      	nop
 8013e5c:	e000e010 	.word	0xe000e010
 8013e60:	e000e018 	.word	0xe000e018
 8013e64:	20002088 	.word	0x20002088
 8013e68:	10624dd3 	.word	0x10624dd3
 8013e6c:	e000e014 	.word	0xe000e014

08013e70 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013e70:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8013e80 <vPortEnableVFP+0x10>
 8013e74:	6801      	ldr	r1, [r0, #0]
 8013e76:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8013e7a:	6001      	str	r1, [r0, #0]
 8013e7c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8013e7e:	bf00      	nop
 8013e80:	e000ed88 	.word	0xe000ed88

08013e84 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8013e84:	b480      	push	{r7}
 8013e86:	b085      	sub	sp, #20
 8013e88:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8013e8a:	f3ef 8305 	mrs	r3, IPSR
 8013e8e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013e90:	68fb      	ldr	r3, [r7, #12]
 8013e92:	2b0f      	cmp	r3, #15
 8013e94:	d913      	bls.n	8013ebe <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8013e96:	4a16      	ldr	r2, [pc, #88]	; (8013ef0 <vPortValidateInterruptPriority+0x6c>)
 8013e98:	68fb      	ldr	r3, [r7, #12]
 8013e9a:	4413      	add	r3, r2
 8013e9c:	781b      	ldrb	r3, [r3, #0]
 8013e9e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013ea0:	4b14      	ldr	r3, [pc, #80]	; (8013ef4 <vPortValidateInterruptPriority+0x70>)
 8013ea2:	781b      	ldrb	r3, [r3, #0]
 8013ea4:	7afa      	ldrb	r2, [r7, #11]
 8013ea6:	429a      	cmp	r2, r3
 8013ea8:	d209      	bcs.n	8013ebe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8013eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013eae:	f383 8811 	msr	BASEPRI, r3
 8013eb2:	f3bf 8f6f 	isb	sy
 8013eb6:	f3bf 8f4f 	dsb	sy
 8013eba:	607b      	str	r3, [r7, #4]
 8013ebc:	e7fe      	b.n	8013ebc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8013ebe:	4b0e      	ldr	r3, [pc, #56]	; (8013ef8 <vPortValidateInterruptPriority+0x74>)
 8013ec0:	681b      	ldr	r3, [r3, #0]
 8013ec2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8013ec6:	4b0d      	ldr	r3, [pc, #52]	; (8013efc <vPortValidateInterruptPriority+0x78>)
 8013ec8:	681b      	ldr	r3, [r3, #0]
 8013eca:	429a      	cmp	r2, r3
 8013ecc:	d909      	bls.n	8013ee2 <vPortValidateInterruptPriority+0x5e>
 8013ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ed2:	f383 8811 	msr	BASEPRI, r3
 8013ed6:	f3bf 8f6f 	isb	sy
 8013eda:	f3bf 8f4f 	dsb	sy
 8013ede:	603b      	str	r3, [r7, #0]
 8013ee0:	e7fe      	b.n	8013ee0 <vPortValidateInterruptPriority+0x5c>
	}
 8013ee2:	bf00      	nop
 8013ee4:	3714      	adds	r7, #20
 8013ee6:	46bd      	mov	sp, r7
 8013ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eec:	4770      	bx	lr
 8013eee:	bf00      	nop
 8013ef0:	e000e3f0 	.word	0xe000e3f0
 8013ef4:	20002990 	.word	0x20002990
 8013ef8:	e000ed0c 	.word	0xe000ed0c
 8013efc:	20002994 	.word	0x20002994

08013f00 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013f00:	b580      	push	{r7, lr}
 8013f02:	b08a      	sub	sp, #40	; 0x28
 8013f04:	af00      	add	r7, sp, #0
 8013f06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013f08:	2300      	movs	r3, #0
 8013f0a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013f0c:	f7fe ff34 	bl	8012d78 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013f10:	4b57      	ldr	r3, [pc, #348]	; (8014070 <pvPortMalloc+0x170>)
 8013f12:	681b      	ldr	r3, [r3, #0]
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d101      	bne.n	8013f1c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013f18:	f000 f90c 	bl	8014134 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013f1c:	4b55      	ldr	r3, [pc, #340]	; (8014074 <pvPortMalloc+0x174>)
 8013f1e:	681a      	ldr	r2, [r3, #0]
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	4013      	ands	r3, r2
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	f040 808c 	bne.w	8014042 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	d01c      	beq.n	8013f6a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8013f30:	2208      	movs	r2, #8
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	4413      	add	r3, r2
 8013f36:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	f003 0307 	and.w	r3, r3, #7
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d013      	beq.n	8013f6a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	f023 0307 	bic.w	r3, r3, #7
 8013f48:	3308      	adds	r3, #8
 8013f4a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	f003 0307 	and.w	r3, r3, #7
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d009      	beq.n	8013f6a <pvPortMalloc+0x6a>
 8013f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f5a:	f383 8811 	msr	BASEPRI, r3
 8013f5e:	f3bf 8f6f 	isb	sy
 8013f62:	f3bf 8f4f 	dsb	sy
 8013f66:	617b      	str	r3, [r7, #20]
 8013f68:	e7fe      	b.n	8013f68 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d068      	beq.n	8014042 <pvPortMalloc+0x142>
 8013f70:	4b41      	ldr	r3, [pc, #260]	; (8014078 <pvPortMalloc+0x178>)
 8013f72:	681b      	ldr	r3, [r3, #0]
 8013f74:	687a      	ldr	r2, [r7, #4]
 8013f76:	429a      	cmp	r2, r3
 8013f78:	d863      	bhi.n	8014042 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8013f7a:	4b40      	ldr	r3, [pc, #256]	; (801407c <pvPortMalloc+0x17c>)
 8013f7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8013f7e:	4b3f      	ldr	r3, [pc, #252]	; (801407c <pvPortMalloc+0x17c>)
 8013f80:	681b      	ldr	r3, [r3, #0]
 8013f82:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013f84:	e004      	b.n	8013f90 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8013f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8013f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f8c:	681b      	ldr	r3, [r3, #0]
 8013f8e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f92:	685b      	ldr	r3, [r3, #4]
 8013f94:	687a      	ldr	r2, [r7, #4]
 8013f96:	429a      	cmp	r2, r3
 8013f98:	d903      	bls.n	8013fa2 <pvPortMalloc+0xa2>
 8013f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f9c:	681b      	ldr	r3, [r3, #0]
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d1f1      	bne.n	8013f86 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8013fa2:	4b33      	ldr	r3, [pc, #204]	; (8014070 <pvPortMalloc+0x170>)
 8013fa4:	681b      	ldr	r3, [r3, #0]
 8013fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013fa8:	429a      	cmp	r2, r3
 8013faa:	d04a      	beq.n	8014042 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013fac:	6a3b      	ldr	r3, [r7, #32]
 8013fae:	681b      	ldr	r3, [r3, #0]
 8013fb0:	2208      	movs	r2, #8
 8013fb2:	4413      	add	r3, r2
 8013fb4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fb8:	681a      	ldr	r2, [r3, #0]
 8013fba:	6a3b      	ldr	r3, [r7, #32]
 8013fbc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fc0:	685a      	ldr	r2, [r3, #4]
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	1ad2      	subs	r2, r2, r3
 8013fc6:	2308      	movs	r3, #8
 8013fc8:	005b      	lsls	r3, r3, #1
 8013fca:	429a      	cmp	r2, r3
 8013fcc:	d91e      	bls.n	801400c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8013fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	4413      	add	r3, r2
 8013fd4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013fd6:	69bb      	ldr	r3, [r7, #24]
 8013fd8:	f003 0307 	and.w	r3, r3, #7
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d009      	beq.n	8013ff4 <pvPortMalloc+0xf4>
 8013fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fe4:	f383 8811 	msr	BASEPRI, r3
 8013fe8:	f3bf 8f6f 	isb	sy
 8013fec:	f3bf 8f4f 	dsb	sy
 8013ff0:	613b      	str	r3, [r7, #16]
 8013ff2:	e7fe      	b.n	8013ff2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ff6:	685a      	ldr	r2, [r3, #4]
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	1ad2      	subs	r2, r2, r3
 8013ffc:	69bb      	ldr	r3, [r7, #24]
 8013ffe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8014000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014002:	687a      	ldr	r2, [r7, #4]
 8014004:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014006:	69b8      	ldr	r0, [r7, #24]
 8014008:	f000 f8f6 	bl	80141f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801400c:	4b1a      	ldr	r3, [pc, #104]	; (8014078 <pvPortMalloc+0x178>)
 801400e:	681a      	ldr	r2, [r3, #0]
 8014010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014012:	685b      	ldr	r3, [r3, #4]
 8014014:	1ad3      	subs	r3, r2, r3
 8014016:	4a18      	ldr	r2, [pc, #96]	; (8014078 <pvPortMalloc+0x178>)
 8014018:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801401a:	4b17      	ldr	r3, [pc, #92]	; (8014078 <pvPortMalloc+0x178>)
 801401c:	681a      	ldr	r2, [r3, #0]
 801401e:	4b18      	ldr	r3, [pc, #96]	; (8014080 <pvPortMalloc+0x180>)
 8014020:	681b      	ldr	r3, [r3, #0]
 8014022:	429a      	cmp	r2, r3
 8014024:	d203      	bcs.n	801402e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014026:	4b14      	ldr	r3, [pc, #80]	; (8014078 <pvPortMalloc+0x178>)
 8014028:	681b      	ldr	r3, [r3, #0]
 801402a:	4a15      	ldr	r2, [pc, #84]	; (8014080 <pvPortMalloc+0x180>)
 801402c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801402e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014030:	685a      	ldr	r2, [r3, #4]
 8014032:	4b10      	ldr	r3, [pc, #64]	; (8014074 <pvPortMalloc+0x174>)
 8014034:	681b      	ldr	r3, [r3, #0]
 8014036:	431a      	orrs	r2, r3
 8014038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801403a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801403c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801403e:	2200      	movs	r2, #0
 8014040:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014042:	f7fe fea7 	bl	8012d94 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8014046:	69fb      	ldr	r3, [r7, #28]
 8014048:	f003 0307 	and.w	r3, r3, #7
 801404c:	2b00      	cmp	r3, #0
 801404e:	d009      	beq.n	8014064 <pvPortMalloc+0x164>
 8014050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014054:	f383 8811 	msr	BASEPRI, r3
 8014058:	f3bf 8f6f 	isb	sy
 801405c:	f3bf 8f4f 	dsb	sy
 8014060:	60fb      	str	r3, [r7, #12]
 8014062:	e7fe      	b.n	8014062 <pvPortMalloc+0x162>
	return pvReturn;
 8014064:	69fb      	ldr	r3, [r7, #28]
}
 8014066:	4618      	mov	r0, r3
 8014068:	3728      	adds	r7, #40	; 0x28
 801406a:	46bd      	mov	sp, r7
 801406c:	bd80      	pop	{r7, pc}
 801406e:	bf00      	nop
 8014070:	200065a0 	.word	0x200065a0
 8014074:	200065ac 	.word	0x200065ac
 8014078:	200065a4 	.word	0x200065a4
 801407c:	20006598 	.word	0x20006598
 8014080:	200065a8 	.word	0x200065a8

08014084 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014084:	b580      	push	{r7, lr}
 8014086:	b086      	sub	sp, #24
 8014088:	af00      	add	r7, sp, #0
 801408a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	2b00      	cmp	r3, #0
 8014094:	d046      	beq.n	8014124 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8014096:	2308      	movs	r3, #8
 8014098:	425b      	negs	r3, r3
 801409a:	697a      	ldr	r2, [r7, #20]
 801409c:	4413      	add	r3, r2
 801409e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80140a0:	697b      	ldr	r3, [r7, #20]
 80140a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80140a4:	693b      	ldr	r3, [r7, #16]
 80140a6:	685a      	ldr	r2, [r3, #4]
 80140a8:	4b20      	ldr	r3, [pc, #128]	; (801412c <vPortFree+0xa8>)
 80140aa:	681b      	ldr	r3, [r3, #0]
 80140ac:	4013      	ands	r3, r2
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	d109      	bne.n	80140c6 <vPortFree+0x42>
 80140b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140b6:	f383 8811 	msr	BASEPRI, r3
 80140ba:	f3bf 8f6f 	isb	sy
 80140be:	f3bf 8f4f 	dsb	sy
 80140c2:	60fb      	str	r3, [r7, #12]
 80140c4:	e7fe      	b.n	80140c4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80140c6:	693b      	ldr	r3, [r7, #16]
 80140c8:	681b      	ldr	r3, [r3, #0]
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	d009      	beq.n	80140e2 <vPortFree+0x5e>
 80140ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140d2:	f383 8811 	msr	BASEPRI, r3
 80140d6:	f3bf 8f6f 	isb	sy
 80140da:	f3bf 8f4f 	dsb	sy
 80140de:	60bb      	str	r3, [r7, #8]
 80140e0:	e7fe      	b.n	80140e0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80140e2:	693b      	ldr	r3, [r7, #16]
 80140e4:	685a      	ldr	r2, [r3, #4]
 80140e6:	4b11      	ldr	r3, [pc, #68]	; (801412c <vPortFree+0xa8>)
 80140e8:	681b      	ldr	r3, [r3, #0]
 80140ea:	4013      	ands	r3, r2
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d019      	beq.n	8014124 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80140f0:	693b      	ldr	r3, [r7, #16]
 80140f2:	681b      	ldr	r3, [r3, #0]
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d115      	bne.n	8014124 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80140f8:	693b      	ldr	r3, [r7, #16]
 80140fa:	685a      	ldr	r2, [r3, #4]
 80140fc:	4b0b      	ldr	r3, [pc, #44]	; (801412c <vPortFree+0xa8>)
 80140fe:	681b      	ldr	r3, [r3, #0]
 8014100:	43db      	mvns	r3, r3
 8014102:	401a      	ands	r2, r3
 8014104:	693b      	ldr	r3, [r7, #16]
 8014106:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014108:	f7fe fe36 	bl	8012d78 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801410c:	693b      	ldr	r3, [r7, #16]
 801410e:	685a      	ldr	r2, [r3, #4]
 8014110:	4b07      	ldr	r3, [pc, #28]	; (8014130 <vPortFree+0xac>)
 8014112:	681b      	ldr	r3, [r3, #0]
 8014114:	4413      	add	r3, r2
 8014116:	4a06      	ldr	r2, [pc, #24]	; (8014130 <vPortFree+0xac>)
 8014118:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801411a:	6938      	ldr	r0, [r7, #16]
 801411c:	f000 f86c 	bl	80141f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8014120:	f7fe fe38 	bl	8012d94 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8014124:	bf00      	nop
 8014126:	3718      	adds	r7, #24
 8014128:	46bd      	mov	sp, r7
 801412a:	bd80      	pop	{r7, pc}
 801412c:	200065ac 	.word	0x200065ac
 8014130:	200065a4 	.word	0x200065a4

08014134 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8014134:	b480      	push	{r7}
 8014136:	b085      	sub	sp, #20
 8014138:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801413a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801413e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014140:	4b27      	ldr	r3, [pc, #156]	; (80141e0 <prvHeapInit+0xac>)
 8014142:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014144:	68fb      	ldr	r3, [r7, #12]
 8014146:	f003 0307 	and.w	r3, r3, #7
 801414a:	2b00      	cmp	r3, #0
 801414c:	d00c      	beq.n	8014168 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801414e:	68fb      	ldr	r3, [r7, #12]
 8014150:	3307      	adds	r3, #7
 8014152:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014154:	68fb      	ldr	r3, [r7, #12]
 8014156:	f023 0307 	bic.w	r3, r3, #7
 801415a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801415c:	68ba      	ldr	r2, [r7, #8]
 801415e:	68fb      	ldr	r3, [r7, #12]
 8014160:	1ad3      	subs	r3, r2, r3
 8014162:	4a1f      	ldr	r2, [pc, #124]	; (80141e0 <prvHeapInit+0xac>)
 8014164:	4413      	add	r3, r2
 8014166:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8014168:	68fb      	ldr	r3, [r7, #12]
 801416a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801416c:	4a1d      	ldr	r2, [pc, #116]	; (80141e4 <prvHeapInit+0xb0>)
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8014172:	4b1c      	ldr	r3, [pc, #112]	; (80141e4 <prvHeapInit+0xb0>)
 8014174:	2200      	movs	r2, #0
 8014176:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	68ba      	ldr	r2, [r7, #8]
 801417c:	4413      	add	r3, r2
 801417e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014180:	2208      	movs	r2, #8
 8014182:	68fb      	ldr	r3, [r7, #12]
 8014184:	1a9b      	subs	r3, r3, r2
 8014186:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014188:	68fb      	ldr	r3, [r7, #12]
 801418a:	f023 0307 	bic.w	r3, r3, #7
 801418e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014190:	68fb      	ldr	r3, [r7, #12]
 8014192:	4a15      	ldr	r2, [pc, #84]	; (80141e8 <prvHeapInit+0xb4>)
 8014194:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8014196:	4b14      	ldr	r3, [pc, #80]	; (80141e8 <prvHeapInit+0xb4>)
 8014198:	681b      	ldr	r3, [r3, #0]
 801419a:	2200      	movs	r2, #0
 801419c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801419e:	4b12      	ldr	r3, [pc, #72]	; (80141e8 <prvHeapInit+0xb4>)
 80141a0:	681b      	ldr	r3, [r3, #0]
 80141a2:	2200      	movs	r2, #0
 80141a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80141aa:	683b      	ldr	r3, [r7, #0]
 80141ac:	68fa      	ldr	r2, [r7, #12]
 80141ae:	1ad2      	subs	r2, r2, r3
 80141b0:	683b      	ldr	r3, [r7, #0]
 80141b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80141b4:	4b0c      	ldr	r3, [pc, #48]	; (80141e8 <prvHeapInit+0xb4>)
 80141b6:	681a      	ldr	r2, [r3, #0]
 80141b8:	683b      	ldr	r3, [r7, #0]
 80141ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80141bc:	683b      	ldr	r3, [r7, #0]
 80141be:	685b      	ldr	r3, [r3, #4]
 80141c0:	4a0a      	ldr	r2, [pc, #40]	; (80141ec <prvHeapInit+0xb8>)
 80141c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80141c4:	683b      	ldr	r3, [r7, #0]
 80141c6:	685b      	ldr	r3, [r3, #4]
 80141c8:	4a09      	ldr	r2, [pc, #36]	; (80141f0 <prvHeapInit+0xbc>)
 80141ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80141cc:	4b09      	ldr	r3, [pc, #36]	; (80141f4 <prvHeapInit+0xc0>)
 80141ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80141d2:	601a      	str	r2, [r3, #0]
}
 80141d4:	bf00      	nop
 80141d6:	3714      	adds	r7, #20
 80141d8:	46bd      	mov	sp, r7
 80141da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141de:	4770      	bx	lr
 80141e0:	20002998 	.word	0x20002998
 80141e4:	20006598 	.word	0x20006598
 80141e8:	200065a0 	.word	0x200065a0
 80141ec:	200065a8 	.word	0x200065a8
 80141f0:	200065a4 	.word	0x200065a4
 80141f4:	200065ac 	.word	0x200065ac

080141f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80141f8:	b480      	push	{r7}
 80141fa:	b085      	sub	sp, #20
 80141fc:	af00      	add	r7, sp, #0
 80141fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014200:	4b28      	ldr	r3, [pc, #160]	; (80142a4 <prvInsertBlockIntoFreeList+0xac>)
 8014202:	60fb      	str	r3, [r7, #12]
 8014204:	e002      	b.n	801420c <prvInsertBlockIntoFreeList+0x14>
 8014206:	68fb      	ldr	r3, [r7, #12]
 8014208:	681b      	ldr	r3, [r3, #0]
 801420a:	60fb      	str	r3, [r7, #12]
 801420c:	68fb      	ldr	r3, [r7, #12]
 801420e:	681b      	ldr	r3, [r3, #0]
 8014210:	687a      	ldr	r2, [r7, #4]
 8014212:	429a      	cmp	r2, r3
 8014214:	d8f7      	bhi.n	8014206 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014216:	68fb      	ldr	r3, [r7, #12]
 8014218:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801421a:	68fb      	ldr	r3, [r7, #12]
 801421c:	685b      	ldr	r3, [r3, #4]
 801421e:	68ba      	ldr	r2, [r7, #8]
 8014220:	4413      	add	r3, r2
 8014222:	687a      	ldr	r2, [r7, #4]
 8014224:	429a      	cmp	r2, r3
 8014226:	d108      	bne.n	801423a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014228:	68fb      	ldr	r3, [r7, #12]
 801422a:	685a      	ldr	r2, [r3, #4]
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	685b      	ldr	r3, [r3, #4]
 8014230:	441a      	add	r2, r3
 8014232:	68fb      	ldr	r3, [r7, #12]
 8014234:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8014236:	68fb      	ldr	r3, [r7, #12]
 8014238:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	685b      	ldr	r3, [r3, #4]
 8014242:	68ba      	ldr	r2, [r7, #8]
 8014244:	441a      	add	r2, r3
 8014246:	68fb      	ldr	r3, [r7, #12]
 8014248:	681b      	ldr	r3, [r3, #0]
 801424a:	429a      	cmp	r2, r3
 801424c:	d118      	bne.n	8014280 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801424e:	68fb      	ldr	r3, [r7, #12]
 8014250:	681a      	ldr	r2, [r3, #0]
 8014252:	4b15      	ldr	r3, [pc, #84]	; (80142a8 <prvInsertBlockIntoFreeList+0xb0>)
 8014254:	681b      	ldr	r3, [r3, #0]
 8014256:	429a      	cmp	r2, r3
 8014258:	d00d      	beq.n	8014276 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	685a      	ldr	r2, [r3, #4]
 801425e:	68fb      	ldr	r3, [r7, #12]
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	685b      	ldr	r3, [r3, #4]
 8014264:	441a      	add	r2, r3
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801426a:	68fb      	ldr	r3, [r7, #12]
 801426c:	681b      	ldr	r3, [r3, #0]
 801426e:	681a      	ldr	r2, [r3, #0]
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	601a      	str	r2, [r3, #0]
 8014274:	e008      	b.n	8014288 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8014276:	4b0c      	ldr	r3, [pc, #48]	; (80142a8 <prvInsertBlockIntoFreeList+0xb0>)
 8014278:	681a      	ldr	r2, [r3, #0]
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	601a      	str	r2, [r3, #0]
 801427e:	e003      	b.n	8014288 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014280:	68fb      	ldr	r3, [r7, #12]
 8014282:	681a      	ldr	r2, [r3, #0]
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014288:	68fa      	ldr	r2, [r7, #12]
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	429a      	cmp	r2, r3
 801428e:	d002      	beq.n	8014296 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014290:	68fb      	ldr	r3, [r7, #12]
 8014292:	687a      	ldr	r2, [r7, #4]
 8014294:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014296:	bf00      	nop
 8014298:	3714      	adds	r7, #20
 801429a:	46bd      	mov	sp, r7
 801429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142a0:	4770      	bx	lr
 80142a2:	bf00      	nop
 80142a4:	20006598 	.word	0x20006598
 80142a8:	200065a0 	.word	0x200065a0

080142ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80142ac:	b580      	push	{r7, lr}
 80142ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80142b0:	2200      	movs	r2, #0
 80142b2:	4912      	ldr	r1, [pc, #72]	; (80142fc <MX_USB_DEVICE_Init+0x50>)
 80142b4:	4812      	ldr	r0, [pc, #72]	; (8014300 <MX_USB_DEVICE_Init+0x54>)
 80142b6:	f7fc f89d 	bl	80103f4 <USBD_Init>
 80142ba:	4603      	mov	r3, r0
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d001      	beq.n	80142c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80142c0:	f7f0 fbe4 	bl	8004a8c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80142c4:	490f      	ldr	r1, [pc, #60]	; (8014304 <MX_USB_DEVICE_Init+0x58>)
 80142c6:	480e      	ldr	r0, [pc, #56]	; (8014300 <MX_USB_DEVICE_Init+0x54>)
 80142c8:	f7fc f8ca 	bl	8010460 <USBD_RegisterClass>
 80142cc:	4603      	mov	r3, r0
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d001      	beq.n	80142d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80142d2:	f7f0 fbdb 	bl	8004a8c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80142d6:	490c      	ldr	r1, [pc, #48]	; (8014308 <MX_USB_DEVICE_Init+0x5c>)
 80142d8:	4809      	ldr	r0, [pc, #36]	; (8014300 <MX_USB_DEVICE_Init+0x54>)
 80142da:	f7fb ffef 	bl	80102bc <USBD_CDC_RegisterInterface>
 80142de:	4603      	mov	r3, r0
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d001      	beq.n	80142e8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80142e4:	f7f0 fbd2 	bl	8004a8c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80142e8:	4805      	ldr	r0, [pc, #20]	; (8014300 <MX_USB_DEVICE_Init+0x54>)
 80142ea:	f7fc f8da 	bl	80104a2 <USBD_Start>
 80142ee:	4603      	mov	r3, r0
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d001      	beq.n	80142f8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80142f4:	f7f0 fbca 	bl	8004a8c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80142f8:	bf00      	nop
 80142fa:	bd80      	pop	{r7, pc}
 80142fc:	200021bc 	.word	0x200021bc
 8014300:	2000d4e4 	.word	0x2000d4e4
 8014304:	200020a0 	.word	0x200020a0
 8014308:	200021a8 	.word	0x200021a8

0801430c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801430c:	b580      	push	{r7, lr}
 801430e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8014310:	2200      	movs	r2, #0
 8014312:	4905      	ldr	r1, [pc, #20]	; (8014328 <CDC_Init_FS+0x1c>)
 8014314:	4805      	ldr	r0, [pc, #20]	; (801432c <CDC_Init_FS+0x20>)
 8014316:	f7fb ffe6 	bl	80102e6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801431a:	4905      	ldr	r1, [pc, #20]	; (8014330 <CDC_Init_FS+0x24>)
 801431c:	4803      	ldr	r0, [pc, #12]	; (801432c <CDC_Init_FS+0x20>)
 801431e:	f7fb fffb 	bl	8010318 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8014322:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8014324:	4618      	mov	r0, r3
 8014326:	bd80      	pop	{r7, pc}
 8014328:	2000d9b4 	.word	0x2000d9b4
 801432c:	2000d4e4 	.word	0x2000d4e4
 8014330:	2000d7b4 	.word	0x2000d7b4

08014334 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8014334:	b480      	push	{r7}
 8014336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8014338:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801433a:	4618      	mov	r0, r3
 801433c:	46bd      	mov	sp, r7
 801433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014342:	4770      	bx	lr

08014344 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8014344:	b480      	push	{r7}
 8014346:	b083      	sub	sp, #12
 8014348:	af00      	add	r7, sp, #0
 801434a:	4603      	mov	r3, r0
 801434c:	6039      	str	r1, [r7, #0]
 801434e:	71fb      	strb	r3, [r7, #7]
 8014350:	4613      	mov	r3, r2
 8014352:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8014354:	79fb      	ldrb	r3, [r7, #7]
 8014356:	2b23      	cmp	r3, #35	; 0x23
 8014358:	f200 808c 	bhi.w	8014474 <CDC_Control_FS+0x130>
 801435c:	a201      	add	r2, pc, #4	; (adr r2, 8014364 <CDC_Control_FS+0x20>)
 801435e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014362:	bf00      	nop
 8014364:	08014475 	.word	0x08014475
 8014368:	08014475 	.word	0x08014475
 801436c:	08014475 	.word	0x08014475
 8014370:	08014475 	.word	0x08014475
 8014374:	08014475 	.word	0x08014475
 8014378:	08014475 	.word	0x08014475
 801437c:	08014475 	.word	0x08014475
 8014380:	08014475 	.word	0x08014475
 8014384:	08014475 	.word	0x08014475
 8014388:	08014475 	.word	0x08014475
 801438c:	08014475 	.word	0x08014475
 8014390:	08014475 	.word	0x08014475
 8014394:	08014475 	.word	0x08014475
 8014398:	08014475 	.word	0x08014475
 801439c:	08014475 	.word	0x08014475
 80143a0:	08014475 	.word	0x08014475
 80143a4:	08014475 	.word	0x08014475
 80143a8:	08014475 	.word	0x08014475
 80143ac:	08014475 	.word	0x08014475
 80143b0:	08014475 	.word	0x08014475
 80143b4:	08014475 	.word	0x08014475
 80143b8:	08014475 	.word	0x08014475
 80143bc:	08014475 	.word	0x08014475
 80143c0:	08014475 	.word	0x08014475
 80143c4:	08014475 	.word	0x08014475
 80143c8:	08014475 	.word	0x08014475
 80143cc:	08014475 	.word	0x08014475
 80143d0:	08014475 	.word	0x08014475
 80143d4:	08014475 	.word	0x08014475
 80143d8:	08014475 	.word	0x08014475
 80143dc:	08014475 	.word	0x08014475
 80143e0:	08014475 	.word	0x08014475
 80143e4:	080143f5 	.word	0x080143f5
 80143e8:	0801442f 	.word	0x0801442f
 80143ec:	08014475 	.word	0x08014475
 80143f0:	08014475 	.word	0x08014475
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	TempBuf_USB[0]=pbuf[0];
 80143f4:	683b      	ldr	r3, [r7, #0]
 80143f6:	781a      	ldrb	r2, [r3, #0]
 80143f8:	4b22      	ldr	r3, [pc, #136]	; (8014484 <CDC_Control_FS+0x140>)
 80143fa:	701a      	strb	r2, [r3, #0]
    	TempBuf_USB[1]=pbuf[1];
 80143fc:	683b      	ldr	r3, [r7, #0]
 80143fe:	785a      	ldrb	r2, [r3, #1]
 8014400:	4b20      	ldr	r3, [pc, #128]	; (8014484 <CDC_Control_FS+0x140>)
 8014402:	705a      	strb	r2, [r3, #1]
    	TempBuf_USB[2]=pbuf[2];
 8014404:	683b      	ldr	r3, [r7, #0]
 8014406:	789a      	ldrb	r2, [r3, #2]
 8014408:	4b1e      	ldr	r3, [pc, #120]	; (8014484 <CDC_Control_FS+0x140>)
 801440a:	709a      	strb	r2, [r3, #2]
    	TempBuf_USB[3]=pbuf[3];
 801440c:	683b      	ldr	r3, [r7, #0]
 801440e:	78da      	ldrb	r2, [r3, #3]
 8014410:	4b1c      	ldr	r3, [pc, #112]	; (8014484 <CDC_Control_FS+0x140>)
 8014412:	70da      	strb	r2, [r3, #3]
    	TempBuf_USB[4]=pbuf[4];
 8014414:	683b      	ldr	r3, [r7, #0]
 8014416:	791a      	ldrb	r2, [r3, #4]
 8014418:	4b1a      	ldr	r3, [pc, #104]	; (8014484 <CDC_Control_FS+0x140>)
 801441a:	711a      	strb	r2, [r3, #4]
    	TempBuf_USB[5]=pbuf[5];
 801441c:	683b      	ldr	r3, [r7, #0]
 801441e:	795a      	ldrb	r2, [r3, #5]
 8014420:	4b18      	ldr	r3, [pc, #96]	; (8014484 <CDC_Control_FS+0x140>)
 8014422:	715a      	strb	r2, [r3, #5]
    	TempBuf_USB[6]=pbuf[6];
 8014424:	683b      	ldr	r3, [r7, #0]
 8014426:	799a      	ldrb	r2, [r3, #6]
 8014428:	4b16      	ldr	r3, [pc, #88]	; (8014484 <CDC_Control_FS+0x140>)
 801442a:	719a      	strb	r2, [r3, #6]
    	break;
 801442c:	e023      	b.n	8014476 <CDC_Control_FS+0x132>


    case CDC_GET_LINE_CODING:
        pbuf[0]=TempBuf_USB[0];
 801442e:	4b15      	ldr	r3, [pc, #84]	; (8014484 <CDC_Control_FS+0x140>)
 8014430:	781a      	ldrb	r2, [r3, #0]
 8014432:	683b      	ldr	r3, [r7, #0]
 8014434:	701a      	strb	r2, [r3, #0]
        pbuf[1]=TempBuf_USB[1];
 8014436:	683b      	ldr	r3, [r7, #0]
 8014438:	3301      	adds	r3, #1
 801443a:	4a12      	ldr	r2, [pc, #72]	; (8014484 <CDC_Control_FS+0x140>)
 801443c:	7852      	ldrb	r2, [r2, #1]
 801443e:	701a      	strb	r2, [r3, #0]
        pbuf[2]=TempBuf_USB[2];
 8014440:	683b      	ldr	r3, [r7, #0]
 8014442:	3302      	adds	r3, #2
 8014444:	4a0f      	ldr	r2, [pc, #60]	; (8014484 <CDC_Control_FS+0x140>)
 8014446:	7892      	ldrb	r2, [r2, #2]
 8014448:	701a      	strb	r2, [r3, #0]
        pbuf[3]=TempBuf_USB[3];
 801444a:	683b      	ldr	r3, [r7, #0]
 801444c:	3303      	adds	r3, #3
 801444e:	4a0d      	ldr	r2, [pc, #52]	; (8014484 <CDC_Control_FS+0x140>)
 8014450:	78d2      	ldrb	r2, [r2, #3]
 8014452:	701a      	strb	r2, [r3, #0]
        pbuf[4]=TempBuf_USB[4];
 8014454:	683b      	ldr	r3, [r7, #0]
 8014456:	3304      	adds	r3, #4
 8014458:	4a0a      	ldr	r2, [pc, #40]	; (8014484 <CDC_Control_FS+0x140>)
 801445a:	7912      	ldrb	r2, [r2, #4]
 801445c:	701a      	strb	r2, [r3, #0]
        pbuf[5]=TempBuf_USB[5];
 801445e:	683b      	ldr	r3, [r7, #0]
 8014460:	3305      	adds	r3, #5
 8014462:	4a08      	ldr	r2, [pc, #32]	; (8014484 <CDC_Control_FS+0x140>)
 8014464:	7952      	ldrb	r2, [r2, #5]
 8014466:	701a      	strb	r2, [r3, #0]
        pbuf[6]=TempBuf_USB[6];
 8014468:	683b      	ldr	r3, [r7, #0]
 801446a:	3306      	adds	r3, #6
 801446c:	4a05      	ldr	r2, [pc, #20]	; (8014484 <CDC_Control_FS+0x140>)
 801446e:	7992      	ldrb	r2, [r2, #6]
 8014470:	701a      	strb	r2, [r3, #0]
    break;
 8014472:	e000      	b.n	8014476 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8014474:	bf00      	nop
  }

  return (USBD_OK);
 8014476:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8014478:	4618      	mov	r0, r3
 801447a:	370c      	adds	r7, #12
 801447c:	46bd      	mov	sp, r7
 801447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014482:	4770      	bx	lr
 8014484:	2000dbb4 	.word	0x2000dbb4

08014488 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8014488:	b580      	push	{r7, lr}
 801448a:	b082      	sub	sp, #8
 801448c:	af00      	add	r7, sp, #0
 801448e:	6078      	str	r0, [r7, #4]
 8014490:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	ringBuff_PushArray(&usb_rx_ringbuff, Buf, (uint16_t)*Len);
 8014492:	683b      	ldr	r3, [r7, #0]
 8014494:	681b      	ldr	r3, [r3, #0]
 8014496:	b29b      	uxth	r3, r3
 8014498:	461a      	mov	r2, r3
 801449a:	6879      	ldr	r1, [r7, #4]
 801449c:	4807      	ldr	r0, [pc, #28]	; (80144bc <CDC_Receive_FS+0x34>)
 801449e:	f7f0 fb87 	bl	8004bb0 <ringBuff_PushArray>
//	if ( END_CHAR == Buf[*Len - 1]) {
//		osSignalSet(USB_RX_Check_Handle, 0x01);
//	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80144a2:	6879      	ldr	r1, [r7, #4]
 80144a4:	4806      	ldr	r0, [pc, #24]	; (80144c0 <CDC_Receive_FS+0x38>)
 80144a6:	f7fb ff37 	bl	8010318 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80144aa:	4805      	ldr	r0, [pc, #20]	; (80144c0 <CDC_Receive_FS+0x38>)
 80144ac:	f7fb ff78 	bl	80103a0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80144b0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80144b2:	4618      	mov	r0, r3
 80144b4:	3708      	adds	r7, #8
 80144b6:	46bd      	mov	sp, r7
 80144b8:	bd80      	pop	{r7, pc}
 80144ba:	bf00      	nop
 80144bc:	20000064 	.word	0x20000064
 80144c0:	2000d4e4 	.word	0x2000d4e4

080144c4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80144c4:	b580      	push	{r7, lr}
 80144c6:	b084      	sub	sp, #16
 80144c8:	af00      	add	r7, sp, #0
 80144ca:	6078      	str	r0, [r7, #4]
 80144cc:	460b      	mov	r3, r1
 80144ce:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80144d0:	2300      	movs	r3, #0
 80144d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80144d4:	4b0d      	ldr	r3, [pc, #52]	; (801450c <CDC_Transmit_FS+0x48>)
 80144d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80144da:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80144dc:	68bb      	ldr	r3, [r7, #8]
 80144de:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	d001      	beq.n	80144ea <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80144e6:	2301      	movs	r3, #1
 80144e8:	e00b      	b.n	8014502 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80144ea:	887b      	ldrh	r3, [r7, #2]
 80144ec:	461a      	mov	r2, r3
 80144ee:	6879      	ldr	r1, [r7, #4]
 80144f0:	4806      	ldr	r0, [pc, #24]	; (801450c <CDC_Transmit_FS+0x48>)
 80144f2:	f7fb fef8 	bl	80102e6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80144f6:	4805      	ldr	r0, [pc, #20]	; (801450c <CDC_Transmit_FS+0x48>)
 80144f8:	f7fb ff22 	bl	8010340 <USBD_CDC_TransmitPacket>
 80144fc:	4603      	mov	r3, r0
 80144fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8014500:	7bfb      	ldrb	r3, [r7, #15]
}
 8014502:	4618      	mov	r0, r3
 8014504:	3710      	adds	r7, #16
 8014506:	46bd      	mov	sp, r7
 8014508:	bd80      	pop	{r7, pc}
 801450a:	bf00      	nop
 801450c:	2000d4e4 	.word	0x2000d4e4

08014510 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8014510:	b480      	push	{r7}
 8014512:	b087      	sub	sp, #28
 8014514:	af00      	add	r7, sp, #0
 8014516:	60f8      	str	r0, [r7, #12]
 8014518:	60b9      	str	r1, [r7, #8]
 801451a:	4613      	mov	r3, r2
 801451c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801451e:	2300      	movs	r3, #0
 8014520:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8014522:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014526:	4618      	mov	r0, r3
 8014528:	371c      	adds	r7, #28
 801452a:	46bd      	mov	sp, r7
 801452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014530:	4770      	bx	lr
	...

08014534 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014534:	b480      	push	{r7}
 8014536:	b083      	sub	sp, #12
 8014538:	af00      	add	r7, sp, #0
 801453a:	4603      	mov	r3, r0
 801453c:	6039      	str	r1, [r7, #0]
 801453e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8014540:	683b      	ldr	r3, [r7, #0]
 8014542:	2212      	movs	r2, #18
 8014544:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8014546:	4b03      	ldr	r3, [pc, #12]	; (8014554 <USBD_FS_DeviceDescriptor+0x20>)
}
 8014548:	4618      	mov	r0, r3
 801454a:	370c      	adds	r7, #12
 801454c:	46bd      	mov	sp, r7
 801454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014552:	4770      	bx	lr
 8014554:	200021d8 	.word	0x200021d8

08014558 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014558:	b480      	push	{r7}
 801455a:	b083      	sub	sp, #12
 801455c:	af00      	add	r7, sp, #0
 801455e:	4603      	mov	r3, r0
 8014560:	6039      	str	r1, [r7, #0]
 8014562:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8014564:	683b      	ldr	r3, [r7, #0]
 8014566:	2204      	movs	r2, #4
 8014568:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801456a:	4b03      	ldr	r3, [pc, #12]	; (8014578 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801456c:	4618      	mov	r0, r3
 801456e:	370c      	adds	r7, #12
 8014570:	46bd      	mov	sp, r7
 8014572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014576:	4770      	bx	lr
 8014578:	200021ec 	.word	0x200021ec

0801457c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801457c:	b580      	push	{r7, lr}
 801457e:	b082      	sub	sp, #8
 8014580:	af00      	add	r7, sp, #0
 8014582:	4603      	mov	r3, r0
 8014584:	6039      	str	r1, [r7, #0]
 8014586:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014588:	79fb      	ldrb	r3, [r7, #7]
 801458a:	2b00      	cmp	r3, #0
 801458c:	d105      	bne.n	801459a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801458e:	683a      	ldr	r2, [r7, #0]
 8014590:	4907      	ldr	r1, [pc, #28]	; (80145b0 <USBD_FS_ProductStrDescriptor+0x34>)
 8014592:	4808      	ldr	r0, [pc, #32]	; (80145b4 <USBD_FS_ProductStrDescriptor+0x38>)
 8014594:	f7fc ff53 	bl	801143e <USBD_GetString>
 8014598:	e004      	b.n	80145a4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801459a:	683a      	ldr	r2, [r7, #0]
 801459c:	4904      	ldr	r1, [pc, #16]	; (80145b0 <USBD_FS_ProductStrDescriptor+0x34>)
 801459e:	4805      	ldr	r0, [pc, #20]	; (80145b4 <USBD_FS_ProductStrDescriptor+0x38>)
 80145a0:	f7fc ff4d 	bl	801143e <USBD_GetString>
  }
  return USBD_StrDesc;
 80145a4:	4b02      	ldr	r3, [pc, #8]	; (80145b0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80145a6:	4618      	mov	r0, r3
 80145a8:	3708      	adds	r7, #8
 80145aa:	46bd      	mov	sp, r7
 80145ac:	bd80      	pop	{r7, pc}
 80145ae:	bf00      	nop
 80145b0:	2000dbbc 	.word	0x2000dbbc
 80145b4:	0801a50c 	.word	0x0801a50c

080145b8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80145b8:	b580      	push	{r7, lr}
 80145ba:	b082      	sub	sp, #8
 80145bc:	af00      	add	r7, sp, #0
 80145be:	4603      	mov	r3, r0
 80145c0:	6039      	str	r1, [r7, #0]
 80145c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80145c4:	683a      	ldr	r2, [r7, #0]
 80145c6:	4904      	ldr	r1, [pc, #16]	; (80145d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80145c8:	4804      	ldr	r0, [pc, #16]	; (80145dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80145ca:	f7fc ff38 	bl	801143e <USBD_GetString>
  return USBD_StrDesc;
 80145ce:	4b02      	ldr	r3, [pc, #8]	; (80145d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80145d0:	4618      	mov	r0, r3
 80145d2:	3708      	adds	r7, #8
 80145d4:	46bd      	mov	sp, r7
 80145d6:	bd80      	pop	{r7, pc}
 80145d8:	2000dbbc 	.word	0x2000dbbc
 80145dc:	0801a524 	.word	0x0801a524

080145e0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80145e0:	b580      	push	{r7, lr}
 80145e2:	b082      	sub	sp, #8
 80145e4:	af00      	add	r7, sp, #0
 80145e6:	4603      	mov	r3, r0
 80145e8:	6039      	str	r1, [r7, #0]
 80145ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80145ec:	683b      	ldr	r3, [r7, #0]
 80145ee:	221a      	movs	r2, #26
 80145f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80145f2:	f000 f843 	bl	801467c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80145f6:	4b02      	ldr	r3, [pc, #8]	; (8014600 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80145f8:	4618      	mov	r0, r3
 80145fa:	3708      	adds	r7, #8
 80145fc:	46bd      	mov	sp, r7
 80145fe:	bd80      	pop	{r7, pc}
 8014600:	200021f0 	.word	0x200021f0

08014604 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014604:	b580      	push	{r7, lr}
 8014606:	b082      	sub	sp, #8
 8014608:	af00      	add	r7, sp, #0
 801460a:	4603      	mov	r3, r0
 801460c:	6039      	str	r1, [r7, #0]
 801460e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8014610:	79fb      	ldrb	r3, [r7, #7]
 8014612:	2b00      	cmp	r3, #0
 8014614:	d105      	bne.n	8014622 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8014616:	683a      	ldr	r2, [r7, #0]
 8014618:	4907      	ldr	r1, [pc, #28]	; (8014638 <USBD_FS_ConfigStrDescriptor+0x34>)
 801461a:	4808      	ldr	r0, [pc, #32]	; (801463c <USBD_FS_ConfigStrDescriptor+0x38>)
 801461c:	f7fc ff0f 	bl	801143e <USBD_GetString>
 8014620:	e004      	b.n	801462c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8014622:	683a      	ldr	r2, [r7, #0]
 8014624:	4904      	ldr	r1, [pc, #16]	; (8014638 <USBD_FS_ConfigStrDescriptor+0x34>)
 8014626:	4805      	ldr	r0, [pc, #20]	; (801463c <USBD_FS_ConfigStrDescriptor+0x38>)
 8014628:	f7fc ff09 	bl	801143e <USBD_GetString>
  }
  return USBD_StrDesc;
 801462c:	4b02      	ldr	r3, [pc, #8]	; (8014638 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801462e:	4618      	mov	r0, r3
 8014630:	3708      	adds	r7, #8
 8014632:	46bd      	mov	sp, r7
 8014634:	bd80      	pop	{r7, pc}
 8014636:	bf00      	nop
 8014638:	2000dbbc 	.word	0x2000dbbc
 801463c:	0801a538 	.word	0x0801a538

08014640 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014640:	b580      	push	{r7, lr}
 8014642:	b082      	sub	sp, #8
 8014644:	af00      	add	r7, sp, #0
 8014646:	4603      	mov	r3, r0
 8014648:	6039      	str	r1, [r7, #0]
 801464a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801464c:	79fb      	ldrb	r3, [r7, #7]
 801464e:	2b00      	cmp	r3, #0
 8014650:	d105      	bne.n	801465e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8014652:	683a      	ldr	r2, [r7, #0]
 8014654:	4907      	ldr	r1, [pc, #28]	; (8014674 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8014656:	4808      	ldr	r0, [pc, #32]	; (8014678 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014658:	f7fc fef1 	bl	801143e <USBD_GetString>
 801465c:	e004      	b.n	8014668 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801465e:	683a      	ldr	r2, [r7, #0]
 8014660:	4904      	ldr	r1, [pc, #16]	; (8014674 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8014662:	4805      	ldr	r0, [pc, #20]	; (8014678 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014664:	f7fc feeb 	bl	801143e <USBD_GetString>
  }
  return USBD_StrDesc;
 8014668:	4b02      	ldr	r3, [pc, #8]	; (8014674 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801466a:	4618      	mov	r0, r3
 801466c:	3708      	adds	r7, #8
 801466e:	46bd      	mov	sp, r7
 8014670:	bd80      	pop	{r7, pc}
 8014672:	bf00      	nop
 8014674:	2000dbbc 	.word	0x2000dbbc
 8014678:	0801a544 	.word	0x0801a544

0801467c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801467c:	b580      	push	{r7, lr}
 801467e:	b084      	sub	sp, #16
 8014680:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8014682:	4b0f      	ldr	r3, [pc, #60]	; (80146c0 <Get_SerialNum+0x44>)
 8014684:	681b      	ldr	r3, [r3, #0]
 8014686:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8014688:	4b0e      	ldr	r3, [pc, #56]	; (80146c4 <Get_SerialNum+0x48>)
 801468a:	681b      	ldr	r3, [r3, #0]
 801468c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801468e:	4b0e      	ldr	r3, [pc, #56]	; (80146c8 <Get_SerialNum+0x4c>)
 8014690:	681b      	ldr	r3, [r3, #0]
 8014692:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8014694:	68fa      	ldr	r2, [r7, #12]
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	4413      	add	r3, r2
 801469a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801469c:	68fb      	ldr	r3, [r7, #12]
 801469e:	2b00      	cmp	r3, #0
 80146a0:	d009      	beq.n	80146b6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80146a2:	2208      	movs	r2, #8
 80146a4:	4909      	ldr	r1, [pc, #36]	; (80146cc <Get_SerialNum+0x50>)
 80146a6:	68f8      	ldr	r0, [r7, #12]
 80146a8:	f000 f814 	bl	80146d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80146ac:	2204      	movs	r2, #4
 80146ae:	4908      	ldr	r1, [pc, #32]	; (80146d0 <Get_SerialNum+0x54>)
 80146b0:	68b8      	ldr	r0, [r7, #8]
 80146b2:	f000 f80f 	bl	80146d4 <IntToUnicode>
  }
}
 80146b6:	bf00      	nop
 80146b8:	3710      	adds	r7, #16
 80146ba:	46bd      	mov	sp, r7
 80146bc:	bd80      	pop	{r7, pc}
 80146be:	bf00      	nop
 80146c0:	1fff7a10 	.word	0x1fff7a10
 80146c4:	1fff7a14 	.word	0x1fff7a14
 80146c8:	1fff7a18 	.word	0x1fff7a18
 80146cc:	200021f2 	.word	0x200021f2
 80146d0:	20002202 	.word	0x20002202

080146d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80146d4:	b480      	push	{r7}
 80146d6:	b087      	sub	sp, #28
 80146d8:	af00      	add	r7, sp, #0
 80146da:	60f8      	str	r0, [r7, #12]
 80146dc:	60b9      	str	r1, [r7, #8]
 80146de:	4613      	mov	r3, r2
 80146e0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80146e2:	2300      	movs	r3, #0
 80146e4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80146e6:	2300      	movs	r3, #0
 80146e8:	75fb      	strb	r3, [r7, #23]
 80146ea:	e027      	b.n	801473c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80146ec:	68fb      	ldr	r3, [r7, #12]
 80146ee:	0f1b      	lsrs	r3, r3, #28
 80146f0:	2b09      	cmp	r3, #9
 80146f2:	d80b      	bhi.n	801470c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80146f4:	68fb      	ldr	r3, [r7, #12]
 80146f6:	0f1b      	lsrs	r3, r3, #28
 80146f8:	b2da      	uxtb	r2, r3
 80146fa:	7dfb      	ldrb	r3, [r7, #23]
 80146fc:	005b      	lsls	r3, r3, #1
 80146fe:	4619      	mov	r1, r3
 8014700:	68bb      	ldr	r3, [r7, #8]
 8014702:	440b      	add	r3, r1
 8014704:	3230      	adds	r2, #48	; 0x30
 8014706:	b2d2      	uxtb	r2, r2
 8014708:	701a      	strb	r2, [r3, #0]
 801470a:	e00a      	b.n	8014722 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801470c:	68fb      	ldr	r3, [r7, #12]
 801470e:	0f1b      	lsrs	r3, r3, #28
 8014710:	b2da      	uxtb	r2, r3
 8014712:	7dfb      	ldrb	r3, [r7, #23]
 8014714:	005b      	lsls	r3, r3, #1
 8014716:	4619      	mov	r1, r3
 8014718:	68bb      	ldr	r3, [r7, #8]
 801471a:	440b      	add	r3, r1
 801471c:	3237      	adds	r2, #55	; 0x37
 801471e:	b2d2      	uxtb	r2, r2
 8014720:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8014722:	68fb      	ldr	r3, [r7, #12]
 8014724:	011b      	lsls	r3, r3, #4
 8014726:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8014728:	7dfb      	ldrb	r3, [r7, #23]
 801472a:	005b      	lsls	r3, r3, #1
 801472c:	3301      	adds	r3, #1
 801472e:	68ba      	ldr	r2, [r7, #8]
 8014730:	4413      	add	r3, r2
 8014732:	2200      	movs	r2, #0
 8014734:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8014736:	7dfb      	ldrb	r3, [r7, #23]
 8014738:	3301      	adds	r3, #1
 801473a:	75fb      	strb	r3, [r7, #23]
 801473c:	7dfa      	ldrb	r2, [r7, #23]
 801473e:	79fb      	ldrb	r3, [r7, #7]
 8014740:	429a      	cmp	r2, r3
 8014742:	d3d3      	bcc.n	80146ec <IntToUnicode+0x18>
  }
}
 8014744:	bf00      	nop
 8014746:	371c      	adds	r7, #28
 8014748:	46bd      	mov	sp, r7
 801474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801474e:	4770      	bx	lr

08014750 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8014750:	b580      	push	{r7, lr}
 8014752:	b08a      	sub	sp, #40	; 0x28
 8014754:	af00      	add	r7, sp, #0
 8014756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014758:	f107 0314 	add.w	r3, r7, #20
 801475c:	2200      	movs	r2, #0
 801475e:	601a      	str	r2, [r3, #0]
 8014760:	605a      	str	r2, [r3, #4]
 8014762:	609a      	str	r2, [r3, #8]
 8014764:	60da      	str	r2, [r3, #12]
 8014766:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	681b      	ldr	r3, [r3, #0]
 801476c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8014770:	d13a      	bne.n	80147e8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014772:	2300      	movs	r3, #0
 8014774:	613b      	str	r3, [r7, #16]
 8014776:	4b1e      	ldr	r3, [pc, #120]	; (80147f0 <HAL_PCD_MspInit+0xa0>)
 8014778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801477a:	4a1d      	ldr	r2, [pc, #116]	; (80147f0 <HAL_PCD_MspInit+0xa0>)
 801477c:	f043 0301 	orr.w	r3, r3, #1
 8014780:	6313      	str	r3, [r2, #48]	; 0x30
 8014782:	4b1b      	ldr	r3, [pc, #108]	; (80147f0 <HAL_PCD_MspInit+0xa0>)
 8014784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014786:	f003 0301 	and.w	r3, r3, #1
 801478a:	613b      	str	r3, [r7, #16]
 801478c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801478e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8014792:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014794:	2302      	movs	r3, #2
 8014796:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014798:	2300      	movs	r3, #0
 801479a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801479c:	2303      	movs	r3, #3
 801479e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80147a0:	230a      	movs	r3, #10
 80147a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80147a4:	f107 0314 	add.w	r3, r7, #20
 80147a8:	4619      	mov	r1, r3
 80147aa:	4812      	ldr	r0, [pc, #72]	; (80147f4 <HAL_PCD_MspInit+0xa4>)
 80147ac:	f7f6 fbd4 	bl	800af58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80147b0:	4b0f      	ldr	r3, [pc, #60]	; (80147f0 <HAL_PCD_MspInit+0xa0>)
 80147b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80147b4:	4a0e      	ldr	r2, [pc, #56]	; (80147f0 <HAL_PCD_MspInit+0xa0>)
 80147b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80147ba:	6353      	str	r3, [r2, #52]	; 0x34
 80147bc:	2300      	movs	r3, #0
 80147be:	60fb      	str	r3, [r7, #12]
 80147c0:	4b0b      	ldr	r3, [pc, #44]	; (80147f0 <HAL_PCD_MspInit+0xa0>)
 80147c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80147c4:	4a0a      	ldr	r2, [pc, #40]	; (80147f0 <HAL_PCD_MspInit+0xa0>)
 80147c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80147ca:	6453      	str	r3, [r2, #68]	; 0x44
 80147cc:	4b08      	ldr	r3, [pc, #32]	; (80147f0 <HAL_PCD_MspInit+0xa0>)
 80147ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80147d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80147d4:	60fb      	str	r3, [r7, #12]
 80147d6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80147d8:	2200      	movs	r2, #0
 80147da:	2105      	movs	r1, #5
 80147dc:	2043      	movs	r0, #67	; 0x43
 80147de:	f7f5 fff3 	bl	800a7c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80147e2:	2043      	movs	r0, #67	; 0x43
 80147e4:	f7f6 f80c 	bl	800a800 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80147e8:	bf00      	nop
 80147ea:	3728      	adds	r7, #40	; 0x28
 80147ec:	46bd      	mov	sp, r7
 80147ee:	bd80      	pop	{r7, pc}
 80147f0:	40023800 	.word	0x40023800
 80147f4:	40020000 	.word	0x40020000

080147f8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80147f8:	b580      	push	{r7, lr}
 80147fa:	b082      	sub	sp, #8
 80147fc:	af00      	add	r7, sp, #0
 80147fe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801480c:	4619      	mov	r1, r3
 801480e:	4610      	mov	r0, r2
 8014810:	f7fb fe92 	bl	8010538 <USBD_LL_SetupStage>
}
 8014814:	bf00      	nop
 8014816:	3708      	adds	r7, #8
 8014818:	46bd      	mov	sp, r7
 801481a:	bd80      	pop	{r7, pc}

0801481c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801481c:	b580      	push	{r7, lr}
 801481e:	b082      	sub	sp, #8
 8014820:	af00      	add	r7, sp, #0
 8014822:	6078      	str	r0, [r7, #4]
 8014824:	460b      	mov	r3, r1
 8014826:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801482e:	78fa      	ldrb	r2, [r7, #3]
 8014830:	6879      	ldr	r1, [r7, #4]
 8014832:	4613      	mov	r3, r2
 8014834:	00db      	lsls	r3, r3, #3
 8014836:	1a9b      	subs	r3, r3, r2
 8014838:	009b      	lsls	r3, r3, #2
 801483a:	440b      	add	r3, r1
 801483c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8014840:	681a      	ldr	r2, [r3, #0]
 8014842:	78fb      	ldrb	r3, [r7, #3]
 8014844:	4619      	mov	r1, r3
 8014846:	f7fb feca 	bl	80105de <USBD_LL_DataOutStage>
}
 801484a:	bf00      	nop
 801484c:	3708      	adds	r7, #8
 801484e:	46bd      	mov	sp, r7
 8014850:	bd80      	pop	{r7, pc}

08014852 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014852:	b580      	push	{r7, lr}
 8014854:	b082      	sub	sp, #8
 8014856:	af00      	add	r7, sp, #0
 8014858:	6078      	str	r0, [r7, #4]
 801485a:	460b      	mov	r3, r1
 801485c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8014864:	78fa      	ldrb	r2, [r7, #3]
 8014866:	6879      	ldr	r1, [r7, #4]
 8014868:	4613      	mov	r3, r2
 801486a:	00db      	lsls	r3, r3, #3
 801486c:	1a9b      	subs	r3, r3, r2
 801486e:	009b      	lsls	r3, r3, #2
 8014870:	440b      	add	r3, r1
 8014872:	3348      	adds	r3, #72	; 0x48
 8014874:	681a      	ldr	r2, [r3, #0]
 8014876:	78fb      	ldrb	r3, [r7, #3]
 8014878:	4619      	mov	r1, r3
 801487a:	f7fb ff13 	bl	80106a4 <USBD_LL_DataInStage>
}
 801487e:	bf00      	nop
 8014880:	3708      	adds	r7, #8
 8014882:	46bd      	mov	sp, r7
 8014884:	bd80      	pop	{r7, pc}

08014886 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014886:	b580      	push	{r7, lr}
 8014888:	b082      	sub	sp, #8
 801488a:	af00      	add	r7, sp, #0
 801488c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014894:	4618      	mov	r0, r3
 8014896:	f7fc f817 	bl	80108c8 <USBD_LL_SOF>
}
 801489a:	bf00      	nop
 801489c:	3708      	adds	r7, #8
 801489e:	46bd      	mov	sp, r7
 80148a0:	bd80      	pop	{r7, pc}

080148a2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80148a2:	b580      	push	{r7, lr}
 80148a4:	b084      	sub	sp, #16
 80148a6:	af00      	add	r7, sp, #0
 80148a8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80148aa:	2301      	movs	r3, #1
 80148ac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	68db      	ldr	r3, [r3, #12]
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d102      	bne.n	80148bc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80148b6:	2300      	movs	r3, #0
 80148b8:	73fb      	strb	r3, [r7, #15]
 80148ba:	e008      	b.n	80148ce <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	68db      	ldr	r3, [r3, #12]
 80148c0:	2b02      	cmp	r3, #2
 80148c2:	d102      	bne.n	80148ca <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80148c4:	2301      	movs	r3, #1
 80148c6:	73fb      	strb	r3, [r7, #15]
 80148c8:	e001      	b.n	80148ce <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80148ca:	f7f0 f8df 	bl	8004a8c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80148d4:	7bfa      	ldrb	r2, [r7, #15]
 80148d6:	4611      	mov	r1, r2
 80148d8:	4618      	mov	r0, r3
 80148da:	f7fb ffba 	bl	8010852 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80148e4:	4618      	mov	r0, r3
 80148e6:	f7fb ff73 	bl	80107d0 <USBD_LL_Reset>
}
 80148ea:	bf00      	nop
 80148ec:	3710      	adds	r7, #16
 80148ee:	46bd      	mov	sp, r7
 80148f0:	bd80      	pop	{r7, pc}
	...

080148f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80148f4:	b580      	push	{r7, lr}
 80148f6:	b082      	sub	sp, #8
 80148f8:	af00      	add	r7, sp, #0
 80148fa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014902:	4618      	mov	r0, r3
 8014904:	f7fb ffb5 	bl	8010872 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	681b      	ldr	r3, [r3, #0]
 801490c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	687a      	ldr	r2, [r7, #4]
 8014914:	6812      	ldr	r2, [r2, #0]
 8014916:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801491a:	f043 0301 	orr.w	r3, r3, #1
 801491e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	6a1b      	ldr	r3, [r3, #32]
 8014924:	2b00      	cmp	r3, #0
 8014926:	d005      	beq.n	8014934 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014928:	4b04      	ldr	r3, [pc, #16]	; (801493c <HAL_PCD_SuspendCallback+0x48>)
 801492a:	691b      	ldr	r3, [r3, #16]
 801492c:	4a03      	ldr	r2, [pc, #12]	; (801493c <HAL_PCD_SuspendCallback+0x48>)
 801492e:	f043 0306 	orr.w	r3, r3, #6
 8014932:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8014934:	bf00      	nop
 8014936:	3708      	adds	r7, #8
 8014938:	46bd      	mov	sp, r7
 801493a:	bd80      	pop	{r7, pc}
 801493c:	e000ed00 	.word	0xe000ed00

08014940 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014940:	b580      	push	{r7, lr}
 8014942:	b082      	sub	sp, #8
 8014944:	af00      	add	r7, sp, #0
 8014946:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801494e:	4618      	mov	r0, r3
 8014950:	f7fb ffa4 	bl	801089c <USBD_LL_Resume>
}
 8014954:	bf00      	nop
 8014956:	3708      	adds	r7, #8
 8014958:	46bd      	mov	sp, r7
 801495a:	bd80      	pop	{r7, pc}

0801495c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801495c:	b580      	push	{r7, lr}
 801495e:	b082      	sub	sp, #8
 8014960:	af00      	add	r7, sp, #0
 8014962:	6078      	str	r0, [r7, #4]
 8014964:	460b      	mov	r3, r1
 8014966:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801496e:	78fa      	ldrb	r2, [r7, #3]
 8014970:	4611      	mov	r1, r2
 8014972:	4618      	mov	r0, r3
 8014974:	f7fb ffcf 	bl	8010916 <USBD_LL_IsoOUTIncomplete>
}
 8014978:	bf00      	nop
 801497a:	3708      	adds	r7, #8
 801497c:	46bd      	mov	sp, r7
 801497e:	bd80      	pop	{r7, pc}

08014980 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014980:	b580      	push	{r7, lr}
 8014982:	b082      	sub	sp, #8
 8014984:	af00      	add	r7, sp, #0
 8014986:	6078      	str	r0, [r7, #4]
 8014988:	460b      	mov	r3, r1
 801498a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014992:	78fa      	ldrb	r2, [r7, #3]
 8014994:	4611      	mov	r1, r2
 8014996:	4618      	mov	r0, r3
 8014998:	f7fb ffb0 	bl	80108fc <USBD_LL_IsoINIncomplete>
}
 801499c:	bf00      	nop
 801499e:	3708      	adds	r7, #8
 80149a0:	46bd      	mov	sp, r7
 80149a2:	bd80      	pop	{r7, pc}

080149a4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80149a4:	b580      	push	{r7, lr}
 80149a6:	b082      	sub	sp, #8
 80149a8:	af00      	add	r7, sp, #0
 80149aa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80149b2:	4618      	mov	r0, r3
 80149b4:	f7fb ffbc 	bl	8010930 <USBD_LL_DevConnected>
}
 80149b8:	bf00      	nop
 80149ba:	3708      	adds	r7, #8
 80149bc:	46bd      	mov	sp, r7
 80149be:	bd80      	pop	{r7, pc}

080149c0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80149c0:	b580      	push	{r7, lr}
 80149c2:	b082      	sub	sp, #8
 80149c4:	af00      	add	r7, sp, #0
 80149c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80149ce:	4618      	mov	r0, r3
 80149d0:	f7fb ffb9 	bl	8010946 <USBD_LL_DevDisconnected>
}
 80149d4:	bf00      	nop
 80149d6:	3708      	adds	r7, #8
 80149d8:	46bd      	mov	sp, r7
 80149da:	bd80      	pop	{r7, pc}

080149dc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80149dc:	b580      	push	{r7, lr}
 80149de:	b082      	sub	sp, #8
 80149e0:	af00      	add	r7, sp, #0
 80149e2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	781b      	ldrb	r3, [r3, #0]
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	d13c      	bne.n	8014a66 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80149ec:	4a20      	ldr	r2, [pc, #128]	; (8014a70 <USBD_LL_Init+0x94>)
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	4a1e      	ldr	r2, [pc, #120]	; (8014a70 <USBD_LL_Init+0x94>)
 80149f8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80149fc:	4b1c      	ldr	r3, [pc, #112]	; (8014a70 <USBD_LL_Init+0x94>)
 80149fe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8014a02:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8014a04:	4b1a      	ldr	r3, [pc, #104]	; (8014a70 <USBD_LL_Init+0x94>)
 8014a06:	2204      	movs	r2, #4
 8014a08:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8014a0a:	4b19      	ldr	r3, [pc, #100]	; (8014a70 <USBD_LL_Init+0x94>)
 8014a0c:	2202      	movs	r2, #2
 8014a0e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8014a10:	4b17      	ldr	r3, [pc, #92]	; (8014a70 <USBD_LL_Init+0x94>)
 8014a12:	2200      	movs	r2, #0
 8014a14:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8014a16:	4b16      	ldr	r3, [pc, #88]	; (8014a70 <USBD_LL_Init+0x94>)
 8014a18:	2202      	movs	r2, #2
 8014a1a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8014a1c:	4b14      	ldr	r3, [pc, #80]	; (8014a70 <USBD_LL_Init+0x94>)
 8014a1e:	2200      	movs	r2, #0
 8014a20:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8014a22:	4b13      	ldr	r3, [pc, #76]	; (8014a70 <USBD_LL_Init+0x94>)
 8014a24:	2200      	movs	r2, #0
 8014a26:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8014a28:	4b11      	ldr	r3, [pc, #68]	; (8014a70 <USBD_LL_Init+0x94>)
 8014a2a:	2200      	movs	r2, #0
 8014a2c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8014a2e:	4b10      	ldr	r3, [pc, #64]	; (8014a70 <USBD_LL_Init+0x94>)
 8014a30:	2200      	movs	r2, #0
 8014a32:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8014a34:	4b0e      	ldr	r3, [pc, #56]	; (8014a70 <USBD_LL_Init+0x94>)
 8014a36:	2200      	movs	r2, #0
 8014a38:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8014a3a:	480d      	ldr	r0, [pc, #52]	; (8014a70 <USBD_LL_Init+0x94>)
 8014a3c:	f7f6 fc96 	bl	800b36c <HAL_PCD_Init>
 8014a40:	4603      	mov	r3, r0
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d001      	beq.n	8014a4a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8014a46:	f7f0 f821 	bl	8004a8c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8014a4a:	2180      	movs	r1, #128	; 0x80
 8014a4c:	4808      	ldr	r0, [pc, #32]	; (8014a70 <USBD_LL_Init+0x94>)
 8014a4e:	f7f7 fdf4 	bl	800c63a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8014a52:	2240      	movs	r2, #64	; 0x40
 8014a54:	2100      	movs	r1, #0
 8014a56:	4806      	ldr	r0, [pc, #24]	; (8014a70 <USBD_LL_Init+0x94>)
 8014a58:	f7f7 fda8 	bl	800c5ac <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8014a5c:	2280      	movs	r2, #128	; 0x80
 8014a5e:	2101      	movs	r1, #1
 8014a60:	4803      	ldr	r0, [pc, #12]	; (8014a70 <USBD_LL_Init+0x94>)
 8014a62:	f7f7 fda3 	bl	800c5ac <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8014a66:	2300      	movs	r3, #0
}
 8014a68:	4618      	mov	r0, r3
 8014a6a:	3708      	adds	r7, #8
 8014a6c:	46bd      	mov	sp, r7
 8014a6e:	bd80      	pop	{r7, pc}
 8014a70:	2000ddbc 	.word	0x2000ddbc

08014a74 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8014a74:	b580      	push	{r7, lr}
 8014a76:	b084      	sub	sp, #16
 8014a78:	af00      	add	r7, sp, #0
 8014a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014a7c:	2300      	movs	r3, #0
 8014a7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014a80:	2300      	movs	r3, #0
 8014a82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014a8a:	4618      	mov	r0, r3
 8014a8c:	f7f6 fd8b 	bl	800b5a6 <HAL_PCD_Start>
 8014a90:	4603      	mov	r3, r0
 8014a92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014a94:	7bfb      	ldrb	r3, [r7, #15]
 8014a96:	4618      	mov	r0, r3
 8014a98:	f000 f92a 	bl	8014cf0 <USBD_Get_USB_Status>
 8014a9c:	4603      	mov	r3, r0
 8014a9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014aa0:	7bbb      	ldrb	r3, [r7, #14]
}
 8014aa2:	4618      	mov	r0, r3
 8014aa4:	3710      	adds	r7, #16
 8014aa6:	46bd      	mov	sp, r7
 8014aa8:	bd80      	pop	{r7, pc}

08014aaa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8014aaa:	b580      	push	{r7, lr}
 8014aac:	b084      	sub	sp, #16
 8014aae:	af00      	add	r7, sp, #0
 8014ab0:	6078      	str	r0, [r7, #4]
 8014ab2:	4608      	mov	r0, r1
 8014ab4:	4611      	mov	r1, r2
 8014ab6:	461a      	mov	r2, r3
 8014ab8:	4603      	mov	r3, r0
 8014aba:	70fb      	strb	r3, [r7, #3]
 8014abc:	460b      	mov	r3, r1
 8014abe:	70bb      	strb	r3, [r7, #2]
 8014ac0:	4613      	mov	r3, r2
 8014ac2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014ac4:	2300      	movs	r3, #0
 8014ac6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014ac8:	2300      	movs	r3, #0
 8014aca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014ad2:	78bb      	ldrb	r3, [r7, #2]
 8014ad4:	883a      	ldrh	r2, [r7, #0]
 8014ad6:	78f9      	ldrb	r1, [r7, #3]
 8014ad8:	f7f7 f96f 	bl	800bdba <HAL_PCD_EP_Open>
 8014adc:	4603      	mov	r3, r0
 8014ade:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014ae0:	7bfb      	ldrb	r3, [r7, #15]
 8014ae2:	4618      	mov	r0, r3
 8014ae4:	f000 f904 	bl	8014cf0 <USBD_Get_USB_Status>
 8014ae8:	4603      	mov	r3, r0
 8014aea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014aec:	7bbb      	ldrb	r3, [r7, #14]
}
 8014aee:	4618      	mov	r0, r3
 8014af0:	3710      	adds	r7, #16
 8014af2:	46bd      	mov	sp, r7
 8014af4:	bd80      	pop	{r7, pc}

08014af6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014af6:	b580      	push	{r7, lr}
 8014af8:	b084      	sub	sp, #16
 8014afa:	af00      	add	r7, sp, #0
 8014afc:	6078      	str	r0, [r7, #4]
 8014afe:	460b      	mov	r3, r1
 8014b00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014b02:	2300      	movs	r3, #0
 8014b04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014b06:	2300      	movs	r3, #0
 8014b08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014b10:	78fa      	ldrb	r2, [r7, #3]
 8014b12:	4611      	mov	r1, r2
 8014b14:	4618      	mov	r0, r3
 8014b16:	f7f7 f9b8 	bl	800be8a <HAL_PCD_EP_Close>
 8014b1a:	4603      	mov	r3, r0
 8014b1c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014b1e:	7bfb      	ldrb	r3, [r7, #15]
 8014b20:	4618      	mov	r0, r3
 8014b22:	f000 f8e5 	bl	8014cf0 <USBD_Get_USB_Status>
 8014b26:	4603      	mov	r3, r0
 8014b28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014b2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8014b2c:	4618      	mov	r0, r3
 8014b2e:	3710      	adds	r7, #16
 8014b30:	46bd      	mov	sp, r7
 8014b32:	bd80      	pop	{r7, pc}

08014b34 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014b34:	b580      	push	{r7, lr}
 8014b36:	b084      	sub	sp, #16
 8014b38:	af00      	add	r7, sp, #0
 8014b3a:	6078      	str	r0, [r7, #4]
 8014b3c:	460b      	mov	r3, r1
 8014b3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014b40:	2300      	movs	r3, #0
 8014b42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014b44:	2300      	movs	r3, #0
 8014b46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014b4e:	78fa      	ldrb	r2, [r7, #3]
 8014b50:	4611      	mov	r1, r2
 8014b52:	4618      	mov	r0, r3
 8014b54:	f7f7 fa90 	bl	800c078 <HAL_PCD_EP_SetStall>
 8014b58:	4603      	mov	r3, r0
 8014b5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014b5c:	7bfb      	ldrb	r3, [r7, #15]
 8014b5e:	4618      	mov	r0, r3
 8014b60:	f000 f8c6 	bl	8014cf0 <USBD_Get_USB_Status>
 8014b64:	4603      	mov	r3, r0
 8014b66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014b68:	7bbb      	ldrb	r3, [r7, #14]
}
 8014b6a:	4618      	mov	r0, r3
 8014b6c:	3710      	adds	r7, #16
 8014b6e:	46bd      	mov	sp, r7
 8014b70:	bd80      	pop	{r7, pc}

08014b72 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014b72:	b580      	push	{r7, lr}
 8014b74:	b084      	sub	sp, #16
 8014b76:	af00      	add	r7, sp, #0
 8014b78:	6078      	str	r0, [r7, #4]
 8014b7a:	460b      	mov	r3, r1
 8014b7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014b7e:	2300      	movs	r3, #0
 8014b80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014b82:	2300      	movs	r3, #0
 8014b84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014b8c:	78fa      	ldrb	r2, [r7, #3]
 8014b8e:	4611      	mov	r1, r2
 8014b90:	4618      	mov	r0, r3
 8014b92:	f7f7 fad5 	bl	800c140 <HAL_PCD_EP_ClrStall>
 8014b96:	4603      	mov	r3, r0
 8014b98:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014b9a:	7bfb      	ldrb	r3, [r7, #15]
 8014b9c:	4618      	mov	r0, r3
 8014b9e:	f000 f8a7 	bl	8014cf0 <USBD_Get_USB_Status>
 8014ba2:	4603      	mov	r3, r0
 8014ba4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014ba6:	7bbb      	ldrb	r3, [r7, #14]
}
 8014ba8:	4618      	mov	r0, r3
 8014baa:	3710      	adds	r7, #16
 8014bac:	46bd      	mov	sp, r7
 8014bae:	bd80      	pop	{r7, pc}

08014bb0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014bb0:	b480      	push	{r7}
 8014bb2:	b085      	sub	sp, #20
 8014bb4:	af00      	add	r7, sp, #0
 8014bb6:	6078      	str	r0, [r7, #4]
 8014bb8:	460b      	mov	r3, r1
 8014bba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014bc2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8014bc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	da0b      	bge.n	8014be4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8014bcc:	78fb      	ldrb	r3, [r7, #3]
 8014bce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014bd2:	68f9      	ldr	r1, [r7, #12]
 8014bd4:	4613      	mov	r3, r2
 8014bd6:	00db      	lsls	r3, r3, #3
 8014bd8:	1a9b      	subs	r3, r3, r2
 8014bda:	009b      	lsls	r3, r3, #2
 8014bdc:	440b      	add	r3, r1
 8014bde:	333e      	adds	r3, #62	; 0x3e
 8014be0:	781b      	ldrb	r3, [r3, #0]
 8014be2:	e00b      	b.n	8014bfc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8014be4:	78fb      	ldrb	r3, [r7, #3]
 8014be6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014bea:	68f9      	ldr	r1, [r7, #12]
 8014bec:	4613      	mov	r3, r2
 8014bee:	00db      	lsls	r3, r3, #3
 8014bf0:	1a9b      	subs	r3, r3, r2
 8014bf2:	009b      	lsls	r3, r3, #2
 8014bf4:	440b      	add	r3, r1
 8014bf6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014bfa:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014bfc:	4618      	mov	r0, r3
 8014bfe:	3714      	adds	r7, #20
 8014c00:	46bd      	mov	sp, r7
 8014c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c06:	4770      	bx	lr

08014c08 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8014c08:	b580      	push	{r7, lr}
 8014c0a:	b084      	sub	sp, #16
 8014c0c:	af00      	add	r7, sp, #0
 8014c0e:	6078      	str	r0, [r7, #4]
 8014c10:	460b      	mov	r3, r1
 8014c12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014c14:	2300      	movs	r3, #0
 8014c16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014c18:	2300      	movs	r3, #0
 8014c1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014c22:	78fa      	ldrb	r2, [r7, #3]
 8014c24:	4611      	mov	r1, r2
 8014c26:	4618      	mov	r0, r3
 8014c28:	f7f7 f8a2 	bl	800bd70 <HAL_PCD_SetAddress>
 8014c2c:	4603      	mov	r3, r0
 8014c2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014c30:	7bfb      	ldrb	r3, [r7, #15]
 8014c32:	4618      	mov	r0, r3
 8014c34:	f000 f85c 	bl	8014cf0 <USBD_Get_USB_Status>
 8014c38:	4603      	mov	r3, r0
 8014c3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014c3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8014c3e:	4618      	mov	r0, r3
 8014c40:	3710      	adds	r7, #16
 8014c42:	46bd      	mov	sp, r7
 8014c44:	bd80      	pop	{r7, pc}

08014c46 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8014c46:	b580      	push	{r7, lr}
 8014c48:	b086      	sub	sp, #24
 8014c4a:	af00      	add	r7, sp, #0
 8014c4c:	60f8      	str	r0, [r7, #12]
 8014c4e:	607a      	str	r2, [r7, #4]
 8014c50:	603b      	str	r3, [r7, #0]
 8014c52:	460b      	mov	r3, r1
 8014c54:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014c56:	2300      	movs	r3, #0
 8014c58:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014c5a:	2300      	movs	r3, #0
 8014c5c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014c64:	7af9      	ldrb	r1, [r7, #11]
 8014c66:	683b      	ldr	r3, [r7, #0]
 8014c68:	687a      	ldr	r2, [r7, #4]
 8014c6a:	f7f7 f9bb 	bl	800bfe4 <HAL_PCD_EP_Transmit>
 8014c6e:	4603      	mov	r3, r0
 8014c70:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014c72:	7dfb      	ldrb	r3, [r7, #23]
 8014c74:	4618      	mov	r0, r3
 8014c76:	f000 f83b 	bl	8014cf0 <USBD_Get_USB_Status>
 8014c7a:	4603      	mov	r3, r0
 8014c7c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8014c7e:	7dbb      	ldrb	r3, [r7, #22]
}
 8014c80:	4618      	mov	r0, r3
 8014c82:	3718      	adds	r7, #24
 8014c84:	46bd      	mov	sp, r7
 8014c86:	bd80      	pop	{r7, pc}

08014c88 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8014c88:	b580      	push	{r7, lr}
 8014c8a:	b086      	sub	sp, #24
 8014c8c:	af00      	add	r7, sp, #0
 8014c8e:	60f8      	str	r0, [r7, #12]
 8014c90:	607a      	str	r2, [r7, #4]
 8014c92:	603b      	str	r3, [r7, #0]
 8014c94:	460b      	mov	r3, r1
 8014c96:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014c98:	2300      	movs	r3, #0
 8014c9a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014c9c:	2300      	movs	r3, #0
 8014c9e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8014ca0:	68fb      	ldr	r3, [r7, #12]
 8014ca2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014ca6:	7af9      	ldrb	r1, [r7, #11]
 8014ca8:	683b      	ldr	r3, [r7, #0]
 8014caa:	687a      	ldr	r2, [r7, #4]
 8014cac:	f7f7 f937 	bl	800bf1e <HAL_PCD_EP_Receive>
 8014cb0:	4603      	mov	r3, r0
 8014cb2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014cb4:	7dfb      	ldrb	r3, [r7, #23]
 8014cb6:	4618      	mov	r0, r3
 8014cb8:	f000 f81a 	bl	8014cf0 <USBD_Get_USB_Status>
 8014cbc:	4603      	mov	r3, r0
 8014cbe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8014cc0:	7dbb      	ldrb	r3, [r7, #22]
}
 8014cc2:	4618      	mov	r0, r3
 8014cc4:	3718      	adds	r7, #24
 8014cc6:	46bd      	mov	sp, r7
 8014cc8:	bd80      	pop	{r7, pc}

08014cca <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014cca:	b580      	push	{r7, lr}
 8014ccc:	b082      	sub	sp, #8
 8014cce:	af00      	add	r7, sp, #0
 8014cd0:	6078      	str	r0, [r7, #4]
 8014cd2:	460b      	mov	r3, r1
 8014cd4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014cdc:	78fa      	ldrb	r2, [r7, #3]
 8014cde:	4611      	mov	r1, r2
 8014ce0:	4618      	mov	r0, r3
 8014ce2:	f7f7 f967 	bl	800bfb4 <HAL_PCD_EP_GetRxCount>
 8014ce6:	4603      	mov	r3, r0
}
 8014ce8:	4618      	mov	r0, r3
 8014cea:	3708      	adds	r7, #8
 8014cec:	46bd      	mov	sp, r7
 8014cee:	bd80      	pop	{r7, pc}

08014cf0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8014cf0:	b480      	push	{r7}
 8014cf2:	b085      	sub	sp, #20
 8014cf4:	af00      	add	r7, sp, #0
 8014cf6:	4603      	mov	r3, r0
 8014cf8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014cfa:	2300      	movs	r3, #0
 8014cfc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8014cfe:	79fb      	ldrb	r3, [r7, #7]
 8014d00:	2b03      	cmp	r3, #3
 8014d02:	d817      	bhi.n	8014d34 <USBD_Get_USB_Status+0x44>
 8014d04:	a201      	add	r2, pc, #4	; (adr r2, 8014d0c <USBD_Get_USB_Status+0x1c>)
 8014d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014d0a:	bf00      	nop
 8014d0c:	08014d1d 	.word	0x08014d1d
 8014d10:	08014d23 	.word	0x08014d23
 8014d14:	08014d29 	.word	0x08014d29
 8014d18:	08014d2f 	.word	0x08014d2f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8014d1c:	2300      	movs	r3, #0
 8014d1e:	73fb      	strb	r3, [r7, #15]
    break;
 8014d20:	e00b      	b.n	8014d3a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014d22:	2303      	movs	r3, #3
 8014d24:	73fb      	strb	r3, [r7, #15]
    break;
 8014d26:	e008      	b.n	8014d3a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014d28:	2301      	movs	r3, #1
 8014d2a:	73fb      	strb	r3, [r7, #15]
    break;
 8014d2c:	e005      	b.n	8014d3a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014d2e:	2303      	movs	r3, #3
 8014d30:	73fb      	strb	r3, [r7, #15]
    break;
 8014d32:	e002      	b.n	8014d3a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8014d34:	2303      	movs	r3, #3
 8014d36:	73fb      	strb	r3, [r7, #15]
    break;
 8014d38:	bf00      	nop
  }
  return usb_status;
 8014d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d3c:	4618      	mov	r0, r3
 8014d3e:	3714      	adds	r7, #20
 8014d40:	46bd      	mov	sp, r7
 8014d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d46:	4770      	bx	lr

08014d48 <__errno>:
 8014d48:	4b01      	ldr	r3, [pc, #4]	; (8014d50 <__errno+0x8>)
 8014d4a:	6818      	ldr	r0, [r3, #0]
 8014d4c:	4770      	bx	lr
 8014d4e:	bf00      	nop
 8014d50:	2000220c 	.word	0x2000220c

08014d54 <__libc_init_array>:
 8014d54:	b570      	push	{r4, r5, r6, lr}
 8014d56:	4e0d      	ldr	r6, [pc, #52]	; (8014d8c <__libc_init_array+0x38>)
 8014d58:	4c0d      	ldr	r4, [pc, #52]	; (8014d90 <__libc_init_array+0x3c>)
 8014d5a:	1ba4      	subs	r4, r4, r6
 8014d5c:	10a4      	asrs	r4, r4, #2
 8014d5e:	2500      	movs	r5, #0
 8014d60:	42a5      	cmp	r5, r4
 8014d62:	d109      	bne.n	8014d78 <__libc_init_array+0x24>
 8014d64:	4e0b      	ldr	r6, [pc, #44]	; (8014d94 <__libc_init_array+0x40>)
 8014d66:	4c0c      	ldr	r4, [pc, #48]	; (8014d98 <__libc_init_array+0x44>)
 8014d68:	f005 fa8c 	bl	801a284 <_init>
 8014d6c:	1ba4      	subs	r4, r4, r6
 8014d6e:	10a4      	asrs	r4, r4, #2
 8014d70:	2500      	movs	r5, #0
 8014d72:	42a5      	cmp	r5, r4
 8014d74:	d105      	bne.n	8014d82 <__libc_init_array+0x2e>
 8014d76:	bd70      	pop	{r4, r5, r6, pc}
 8014d78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014d7c:	4798      	blx	r3
 8014d7e:	3501      	adds	r5, #1
 8014d80:	e7ee      	b.n	8014d60 <__libc_init_array+0xc>
 8014d82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014d86:	4798      	blx	r3
 8014d88:	3501      	adds	r5, #1
 8014d8a:	e7f2      	b.n	8014d72 <__libc_init_array+0x1e>
 8014d8c:	0801aa58 	.word	0x0801aa58
 8014d90:	0801aa58 	.word	0x0801aa58
 8014d94:	0801aa58 	.word	0x0801aa58
 8014d98:	0801aa5c 	.word	0x0801aa5c

08014d9c <malloc>:
 8014d9c:	4b02      	ldr	r3, [pc, #8]	; (8014da8 <malloc+0xc>)
 8014d9e:	4601      	mov	r1, r0
 8014da0:	6818      	ldr	r0, [r3, #0]
 8014da2:	f000 b885 	b.w	8014eb0 <_malloc_r>
 8014da6:	bf00      	nop
 8014da8:	2000220c 	.word	0x2000220c

08014dac <free>:
 8014dac:	4b02      	ldr	r3, [pc, #8]	; (8014db8 <free+0xc>)
 8014dae:	4601      	mov	r1, r0
 8014db0:	6818      	ldr	r0, [r3, #0]
 8014db2:	f000 b82f 	b.w	8014e14 <_free_r>
 8014db6:	bf00      	nop
 8014db8:	2000220c 	.word	0x2000220c

08014dbc <memcpy>:
 8014dbc:	b510      	push	{r4, lr}
 8014dbe:	1e43      	subs	r3, r0, #1
 8014dc0:	440a      	add	r2, r1
 8014dc2:	4291      	cmp	r1, r2
 8014dc4:	d100      	bne.n	8014dc8 <memcpy+0xc>
 8014dc6:	bd10      	pop	{r4, pc}
 8014dc8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014dcc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014dd0:	e7f7      	b.n	8014dc2 <memcpy+0x6>

08014dd2 <memmove>:
 8014dd2:	4288      	cmp	r0, r1
 8014dd4:	b510      	push	{r4, lr}
 8014dd6:	eb01 0302 	add.w	r3, r1, r2
 8014dda:	d807      	bhi.n	8014dec <memmove+0x1a>
 8014ddc:	1e42      	subs	r2, r0, #1
 8014dde:	4299      	cmp	r1, r3
 8014de0:	d00a      	beq.n	8014df8 <memmove+0x26>
 8014de2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014de6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8014dea:	e7f8      	b.n	8014dde <memmove+0xc>
 8014dec:	4283      	cmp	r3, r0
 8014dee:	d9f5      	bls.n	8014ddc <memmove+0xa>
 8014df0:	1881      	adds	r1, r0, r2
 8014df2:	1ad2      	subs	r2, r2, r3
 8014df4:	42d3      	cmn	r3, r2
 8014df6:	d100      	bne.n	8014dfa <memmove+0x28>
 8014df8:	bd10      	pop	{r4, pc}
 8014dfa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014dfe:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8014e02:	e7f7      	b.n	8014df4 <memmove+0x22>

08014e04 <memset>:
 8014e04:	4402      	add	r2, r0
 8014e06:	4603      	mov	r3, r0
 8014e08:	4293      	cmp	r3, r2
 8014e0a:	d100      	bne.n	8014e0e <memset+0xa>
 8014e0c:	4770      	bx	lr
 8014e0e:	f803 1b01 	strb.w	r1, [r3], #1
 8014e12:	e7f9      	b.n	8014e08 <memset+0x4>

08014e14 <_free_r>:
 8014e14:	b538      	push	{r3, r4, r5, lr}
 8014e16:	4605      	mov	r5, r0
 8014e18:	2900      	cmp	r1, #0
 8014e1a:	d045      	beq.n	8014ea8 <_free_r+0x94>
 8014e1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014e20:	1f0c      	subs	r4, r1, #4
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	bfb8      	it	lt
 8014e26:	18e4      	addlt	r4, r4, r3
 8014e28:	f002 ff86 	bl	8017d38 <__malloc_lock>
 8014e2c:	4a1f      	ldr	r2, [pc, #124]	; (8014eac <_free_r+0x98>)
 8014e2e:	6813      	ldr	r3, [r2, #0]
 8014e30:	4610      	mov	r0, r2
 8014e32:	b933      	cbnz	r3, 8014e42 <_free_r+0x2e>
 8014e34:	6063      	str	r3, [r4, #4]
 8014e36:	6014      	str	r4, [r2, #0]
 8014e38:	4628      	mov	r0, r5
 8014e3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014e3e:	f002 bf7c 	b.w	8017d3a <__malloc_unlock>
 8014e42:	42a3      	cmp	r3, r4
 8014e44:	d90c      	bls.n	8014e60 <_free_r+0x4c>
 8014e46:	6821      	ldr	r1, [r4, #0]
 8014e48:	1862      	adds	r2, r4, r1
 8014e4a:	4293      	cmp	r3, r2
 8014e4c:	bf04      	itt	eq
 8014e4e:	681a      	ldreq	r2, [r3, #0]
 8014e50:	685b      	ldreq	r3, [r3, #4]
 8014e52:	6063      	str	r3, [r4, #4]
 8014e54:	bf04      	itt	eq
 8014e56:	1852      	addeq	r2, r2, r1
 8014e58:	6022      	streq	r2, [r4, #0]
 8014e5a:	6004      	str	r4, [r0, #0]
 8014e5c:	e7ec      	b.n	8014e38 <_free_r+0x24>
 8014e5e:	4613      	mov	r3, r2
 8014e60:	685a      	ldr	r2, [r3, #4]
 8014e62:	b10a      	cbz	r2, 8014e68 <_free_r+0x54>
 8014e64:	42a2      	cmp	r2, r4
 8014e66:	d9fa      	bls.n	8014e5e <_free_r+0x4a>
 8014e68:	6819      	ldr	r1, [r3, #0]
 8014e6a:	1858      	adds	r0, r3, r1
 8014e6c:	42a0      	cmp	r0, r4
 8014e6e:	d10b      	bne.n	8014e88 <_free_r+0x74>
 8014e70:	6820      	ldr	r0, [r4, #0]
 8014e72:	4401      	add	r1, r0
 8014e74:	1858      	adds	r0, r3, r1
 8014e76:	4282      	cmp	r2, r0
 8014e78:	6019      	str	r1, [r3, #0]
 8014e7a:	d1dd      	bne.n	8014e38 <_free_r+0x24>
 8014e7c:	6810      	ldr	r0, [r2, #0]
 8014e7e:	6852      	ldr	r2, [r2, #4]
 8014e80:	605a      	str	r2, [r3, #4]
 8014e82:	4401      	add	r1, r0
 8014e84:	6019      	str	r1, [r3, #0]
 8014e86:	e7d7      	b.n	8014e38 <_free_r+0x24>
 8014e88:	d902      	bls.n	8014e90 <_free_r+0x7c>
 8014e8a:	230c      	movs	r3, #12
 8014e8c:	602b      	str	r3, [r5, #0]
 8014e8e:	e7d3      	b.n	8014e38 <_free_r+0x24>
 8014e90:	6820      	ldr	r0, [r4, #0]
 8014e92:	1821      	adds	r1, r4, r0
 8014e94:	428a      	cmp	r2, r1
 8014e96:	bf04      	itt	eq
 8014e98:	6811      	ldreq	r1, [r2, #0]
 8014e9a:	6852      	ldreq	r2, [r2, #4]
 8014e9c:	6062      	str	r2, [r4, #4]
 8014e9e:	bf04      	itt	eq
 8014ea0:	1809      	addeq	r1, r1, r0
 8014ea2:	6021      	streq	r1, [r4, #0]
 8014ea4:	605c      	str	r4, [r3, #4]
 8014ea6:	e7c7      	b.n	8014e38 <_free_r+0x24>
 8014ea8:	bd38      	pop	{r3, r4, r5, pc}
 8014eaa:	bf00      	nop
 8014eac:	200065b0 	.word	0x200065b0

08014eb0 <_malloc_r>:
 8014eb0:	b570      	push	{r4, r5, r6, lr}
 8014eb2:	1ccd      	adds	r5, r1, #3
 8014eb4:	f025 0503 	bic.w	r5, r5, #3
 8014eb8:	3508      	adds	r5, #8
 8014eba:	2d0c      	cmp	r5, #12
 8014ebc:	bf38      	it	cc
 8014ebe:	250c      	movcc	r5, #12
 8014ec0:	2d00      	cmp	r5, #0
 8014ec2:	4606      	mov	r6, r0
 8014ec4:	db01      	blt.n	8014eca <_malloc_r+0x1a>
 8014ec6:	42a9      	cmp	r1, r5
 8014ec8:	d903      	bls.n	8014ed2 <_malloc_r+0x22>
 8014eca:	230c      	movs	r3, #12
 8014ecc:	6033      	str	r3, [r6, #0]
 8014ece:	2000      	movs	r0, #0
 8014ed0:	bd70      	pop	{r4, r5, r6, pc}
 8014ed2:	f002 ff31 	bl	8017d38 <__malloc_lock>
 8014ed6:	4a21      	ldr	r2, [pc, #132]	; (8014f5c <_malloc_r+0xac>)
 8014ed8:	6814      	ldr	r4, [r2, #0]
 8014eda:	4621      	mov	r1, r4
 8014edc:	b991      	cbnz	r1, 8014f04 <_malloc_r+0x54>
 8014ede:	4c20      	ldr	r4, [pc, #128]	; (8014f60 <_malloc_r+0xb0>)
 8014ee0:	6823      	ldr	r3, [r4, #0]
 8014ee2:	b91b      	cbnz	r3, 8014eec <_malloc_r+0x3c>
 8014ee4:	4630      	mov	r0, r6
 8014ee6:	f000 fe7b 	bl	8015be0 <_sbrk_r>
 8014eea:	6020      	str	r0, [r4, #0]
 8014eec:	4629      	mov	r1, r5
 8014eee:	4630      	mov	r0, r6
 8014ef0:	f000 fe76 	bl	8015be0 <_sbrk_r>
 8014ef4:	1c43      	adds	r3, r0, #1
 8014ef6:	d124      	bne.n	8014f42 <_malloc_r+0x92>
 8014ef8:	230c      	movs	r3, #12
 8014efa:	6033      	str	r3, [r6, #0]
 8014efc:	4630      	mov	r0, r6
 8014efe:	f002 ff1c 	bl	8017d3a <__malloc_unlock>
 8014f02:	e7e4      	b.n	8014ece <_malloc_r+0x1e>
 8014f04:	680b      	ldr	r3, [r1, #0]
 8014f06:	1b5b      	subs	r3, r3, r5
 8014f08:	d418      	bmi.n	8014f3c <_malloc_r+0x8c>
 8014f0a:	2b0b      	cmp	r3, #11
 8014f0c:	d90f      	bls.n	8014f2e <_malloc_r+0x7e>
 8014f0e:	600b      	str	r3, [r1, #0]
 8014f10:	50cd      	str	r5, [r1, r3]
 8014f12:	18cc      	adds	r4, r1, r3
 8014f14:	4630      	mov	r0, r6
 8014f16:	f002 ff10 	bl	8017d3a <__malloc_unlock>
 8014f1a:	f104 000b 	add.w	r0, r4, #11
 8014f1e:	1d23      	adds	r3, r4, #4
 8014f20:	f020 0007 	bic.w	r0, r0, #7
 8014f24:	1ac3      	subs	r3, r0, r3
 8014f26:	d0d3      	beq.n	8014ed0 <_malloc_r+0x20>
 8014f28:	425a      	negs	r2, r3
 8014f2a:	50e2      	str	r2, [r4, r3]
 8014f2c:	e7d0      	b.n	8014ed0 <_malloc_r+0x20>
 8014f2e:	428c      	cmp	r4, r1
 8014f30:	684b      	ldr	r3, [r1, #4]
 8014f32:	bf16      	itet	ne
 8014f34:	6063      	strne	r3, [r4, #4]
 8014f36:	6013      	streq	r3, [r2, #0]
 8014f38:	460c      	movne	r4, r1
 8014f3a:	e7eb      	b.n	8014f14 <_malloc_r+0x64>
 8014f3c:	460c      	mov	r4, r1
 8014f3e:	6849      	ldr	r1, [r1, #4]
 8014f40:	e7cc      	b.n	8014edc <_malloc_r+0x2c>
 8014f42:	1cc4      	adds	r4, r0, #3
 8014f44:	f024 0403 	bic.w	r4, r4, #3
 8014f48:	42a0      	cmp	r0, r4
 8014f4a:	d005      	beq.n	8014f58 <_malloc_r+0xa8>
 8014f4c:	1a21      	subs	r1, r4, r0
 8014f4e:	4630      	mov	r0, r6
 8014f50:	f000 fe46 	bl	8015be0 <_sbrk_r>
 8014f54:	3001      	adds	r0, #1
 8014f56:	d0cf      	beq.n	8014ef8 <_malloc_r+0x48>
 8014f58:	6025      	str	r5, [r4, #0]
 8014f5a:	e7db      	b.n	8014f14 <_malloc_r+0x64>
 8014f5c:	200065b0 	.word	0x200065b0
 8014f60:	200065b4 	.word	0x200065b4

08014f64 <__cvt>:
 8014f64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014f68:	ec55 4b10 	vmov	r4, r5, d0
 8014f6c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8014f6e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8014f72:	2d00      	cmp	r5, #0
 8014f74:	460e      	mov	r6, r1
 8014f76:	4691      	mov	r9, r2
 8014f78:	4619      	mov	r1, r3
 8014f7a:	bfb8      	it	lt
 8014f7c:	4622      	movlt	r2, r4
 8014f7e:	462b      	mov	r3, r5
 8014f80:	f027 0720 	bic.w	r7, r7, #32
 8014f84:	bfbb      	ittet	lt
 8014f86:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8014f8a:	461d      	movlt	r5, r3
 8014f8c:	2300      	movge	r3, #0
 8014f8e:	232d      	movlt	r3, #45	; 0x2d
 8014f90:	bfb8      	it	lt
 8014f92:	4614      	movlt	r4, r2
 8014f94:	2f46      	cmp	r7, #70	; 0x46
 8014f96:	700b      	strb	r3, [r1, #0]
 8014f98:	d004      	beq.n	8014fa4 <__cvt+0x40>
 8014f9a:	2f45      	cmp	r7, #69	; 0x45
 8014f9c:	d100      	bne.n	8014fa0 <__cvt+0x3c>
 8014f9e:	3601      	adds	r6, #1
 8014fa0:	2102      	movs	r1, #2
 8014fa2:	e000      	b.n	8014fa6 <__cvt+0x42>
 8014fa4:	2103      	movs	r1, #3
 8014fa6:	ab03      	add	r3, sp, #12
 8014fa8:	9301      	str	r3, [sp, #4]
 8014faa:	ab02      	add	r3, sp, #8
 8014fac:	9300      	str	r3, [sp, #0]
 8014fae:	4632      	mov	r2, r6
 8014fb0:	4653      	mov	r3, sl
 8014fb2:	ec45 4b10 	vmov	d0, r4, r5
 8014fb6:	f001 fdbb 	bl	8016b30 <_dtoa_r>
 8014fba:	2f47      	cmp	r7, #71	; 0x47
 8014fbc:	4680      	mov	r8, r0
 8014fbe:	d102      	bne.n	8014fc6 <__cvt+0x62>
 8014fc0:	f019 0f01 	tst.w	r9, #1
 8014fc4:	d026      	beq.n	8015014 <__cvt+0xb0>
 8014fc6:	2f46      	cmp	r7, #70	; 0x46
 8014fc8:	eb08 0906 	add.w	r9, r8, r6
 8014fcc:	d111      	bne.n	8014ff2 <__cvt+0x8e>
 8014fce:	f898 3000 	ldrb.w	r3, [r8]
 8014fd2:	2b30      	cmp	r3, #48	; 0x30
 8014fd4:	d10a      	bne.n	8014fec <__cvt+0x88>
 8014fd6:	2200      	movs	r2, #0
 8014fd8:	2300      	movs	r3, #0
 8014fda:	4620      	mov	r0, r4
 8014fdc:	4629      	mov	r1, r5
 8014fde:	f7eb fd73 	bl	8000ac8 <__aeabi_dcmpeq>
 8014fe2:	b918      	cbnz	r0, 8014fec <__cvt+0x88>
 8014fe4:	f1c6 0601 	rsb	r6, r6, #1
 8014fe8:	f8ca 6000 	str.w	r6, [sl]
 8014fec:	f8da 3000 	ldr.w	r3, [sl]
 8014ff0:	4499      	add	r9, r3
 8014ff2:	2200      	movs	r2, #0
 8014ff4:	2300      	movs	r3, #0
 8014ff6:	4620      	mov	r0, r4
 8014ff8:	4629      	mov	r1, r5
 8014ffa:	f7eb fd65 	bl	8000ac8 <__aeabi_dcmpeq>
 8014ffe:	b938      	cbnz	r0, 8015010 <__cvt+0xac>
 8015000:	2230      	movs	r2, #48	; 0x30
 8015002:	9b03      	ldr	r3, [sp, #12]
 8015004:	454b      	cmp	r3, r9
 8015006:	d205      	bcs.n	8015014 <__cvt+0xb0>
 8015008:	1c59      	adds	r1, r3, #1
 801500a:	9103      	str	r1, [sp, #12]
 801500c:	701a      	strb	r2, [r3, #0]
 801500e:	e7f8      	b.n	8015002 <__cvt+0x9e>
 8015010:	f8cd 900c 	str.w	r9, [sp, #12]
 8015014:	9b03      	ldr	r3, [sp, #12]
 8015016:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015018:	eba3 0308 	sub.w	r3, r3, r8
 801501c:	4640      	mov	r0, r8
 801501e:	6013      	str	r3, [r2, #0]
 8015020:	b004      	add	sp, #16
 8015022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08015026 <__exponent>:
 8015026:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015028:	2900      	cmp	r1, #0
 801502a:	4604      	mov	r4, r0
 801502c:	bfba      	itte	lt
 801502e:	4249      	neglt	r1, r1
 8015030:	232d      	movlt	r3, #45	; 0x2d
 8015032:	232b      	movge	r3, #43	; 0x2b
 8015034:	2909      	cmp	r1, #9
 8015036:	f804 2b02 	strb.w	r2, [r4], #2
 801503a:	7043      	strb	r3, [r0, #1]
 801503c:	dd20      	ble.n	8015080 <__exponent+0x5a>
 801503e:	f10d 0307 	add.w	r3, sp, #7
 8015042:	461f      	mov	r7, r3
 8015044:	260a      	movs	r6, #10
 8015046:	fb91 f5f6 	sdiv	r5, r1, r6
 801504a:	fb06 1115 	mls	r1, r6, r5, r1
 801504e:	3130      	adds	r1, #48	; 0x30
 8015050:	2d09      	cmp	r5, #9
 8015052:	f803 1c01 	strb.w	r1, [r3, #-1]
 8015056:	f103 32ff 	add.w	r2, r3, #4294967295
 801505a:	4629      	mov	r1, r5
 801505c:	dc09      	bgt.n	8015072 <__exponent+0x4c>
 801505e:	3130      	adds	r1, #48	; 0x30
 8015060:	3b02      	subs	r3, #2
 8015062:	f802 1c01 	strb.w	r1, [r2, #-1]
 8015066:	42bb      	cmp	r3, r7
 8015068:	4622      	mov	r2, r4
 801506a:	d304      	bcc.n	8015076 <__exponent+0x50>
 801506c:	1a10      	subs	r0, r2, r0
 801506e:	b003      	add	sp, #12
 8015070:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015072:	4613      	mov	r3, r2
 8015074:	e7e7      	b.n	8015046 <__exponent+0x20>
 8015076:	f813 2b01 	ldrb.w	r2, [r3], #1
 801507a:	f804 2b01 	strb.w	r2, [r4], #1
 801507e:	e7f2      	b.n	8015066 <__exponent+0x40>
 8015080:	2330      	movs	r3, #48	; 0x30
 8015082:	4419      	add	r1, r3
 8015084:	7083      	strb	r3, [r0, #2]
 8015086:	1d02      	adds	r2, r0, #4
 8015088:	70c1      	strb	r1, [r0, #3]
 801508a:	e7ef      	b.n	801506c <__exponent+0x46>

0801508c <_printf_float>:
 801508c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015090:	b08d      	sub	sp, #52	; 0x34
 8015092:	460c      	mov	r4, r1
 8015094:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8015098:	4616      	mov	r6, r2
 801509a:	461f      	mov	r7, r3
 801509c:	4605      	mov	r5, r0
 801509e:	f002 fe2b 	bl	8017cf8 <_localeconv_r>
 80150a2:	6803      	ldr	r3, [r0, #0]
 80150a4:	9304      	str	r3, [sp, #16]
 80150a6:	4618      	mov	r0, r3
 80150a8:	f7eb f892 	bl	80001d0 <strlen>
 80150ac:	2300      	movs	r3, #0
 80150ae:	930a      	str	r3, [sp, #40]	; 0x28
 80150b0:	f8d8 3000 	ldr.w	r3, [r8]
 80150b4:	9005      	str	r0, [sp, #20]
 80150b6:	3307      	adds	r3, #7
 80150b8:	f023 0307 	bic.w	r3, r3, #7
 80150bc:	f103 0208 	add.w	r2, r3, #8
 80150c0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80150c4:	f8d4 b000 	ldr.w	fp, [r4]
 80150c8:	f8c8 2000 	str.w	r2, [r8]
 80150cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150d0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80150d4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80150d8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80150dc:	9307      	str	r3, [sp, #28]
 80150de:	f8cd 8018 	str.w	r8, [sp, #24]
 80150e2:	f04f 32ff 	mov.w	r2, #4294967295
 80150e6:	4ba7      	ldr	r3, [pc, #668]	; (8015384 <_printf_float+0x2f8>)
 80150e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80150ec:	f7eb fd1e 	bl	8000b2c <__aeabi_dcmpun>
 80150f0:	bb70      	cbnz	r0, 8015150 <_printf_float+0xc4>
 80150f2:	f04f 32ff 	mov.w	r2, #4294967295
 80150f6:	4ba3      	ldr	r3, [pc, #652]	; (8015384 <_printf_float+0x2f8>)
 80150f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80150fc:	f7eb fcf8 	bl	8000af0 <__aeabi_dcmple>
 8015100:	bb30      	cbnz	r0, 8015150 <_printf_float+0xc4>
 8015102:	2200      	movs	r2, #0
 8015104:	2300      	movs	r3, #0
 8015106:	4640      	mov	r0, r8
 8015108:	4649      	mov	r1, r9
 801510a:	f7eb fce7 	bl	8000adc <__aeabi_dcmplt>
 801510e:	b110      	cbz	r0, 8015116 <_printf_float+0x8a>
 8015110:	232d      	movs	r3, #45	; 0x2d
 8015112:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015116:	4a9c      	ldr	r2, [pc, #624]	; (8015388 <_printf_float+0x2fc>)
 8015118:	4b9c      	ldr	r3, [pc, #624]	; (801538c <_printf_float+0x300>)
 801511a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801511e:	bf8c      	ite	hi
 8015120:	4690      	movhi	r8, r2
 8015122:	4698      	movls	r8, r3
 8015124:	2303      	movs	r3, #3
 8015126:	f02b 0204 	bic.w	r2, fp, #4
 801512a:	6123      	str	r3, [r4, #16]
 801512c:	6022      	str	r2, [r4, #0]
 801512e:	f04f 0900 	mov.w	r9, #0
 8015132:	9700      	str	r7, [sp, #0]
 8015134:	4633      	mov	r3, r6
 8015136:	aa0b      	add	r2, sp, #44	; 0x2c
 8015138:	4621      	mov	r1, r4
 801513a:	4628      	mov	r0, r5
 801513c:	f000 f9e6 	bl	801550c <_printf_common>
 8015140:	3001      	adds	r0, #1
 8015142:	f040 808d 	bne.w	8015260 <_printf_float+0x1d4>
 8015146:	f04f 30ff 	mov.w	r0, #4294967295
 801514a:	b00d      	add	sp, #52	; 0x34
 801514c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015150:	4642      	mov	r2, r8
 8015152:	464b      	mov	r3, r9
 8015154:	4640      	mov	r0, r8
 8015156:	4649      	mov	r1, r9
 8015158:	f7eb fce8 	bl	8000b2c <__aeabi_dcmpun>
 801515c:	b110      	cbz	r0, 8015164 <_printf_float+0xd8>
 801515e:	4a8c      	ldr	r2, [pc, #560]	; (8015390 <_printf_float+0x304>)
 8015160:	4b8c      	ldr	r3, [pc, #560]	; (8015394 <_printf_float+0x308>)
 8015162:	e7da      	b.n	801511a <_printf_float+0x8e>
 8015164:	6861      	ldr	r1, [r4, #4]
 8015166:	1c4b      	adds	r3, r1, #1
 8015168:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 801516c:	a80a      	add	r0, sp, #40	; 0x28
 801516e:	d13e      	bne.n	80151ee <_printf_float+0x162>
 8015170:	2306      	movs	r3, #6
 8015172:	6063      	str	r3, [r4, #4]
 8015174:	2300      	movs	r3, #0
 8015176:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801517a:	ab09      	add	r3, sp, #36	; 0x24
 801517c:	9300      	str	r3, [sp, #0]
 801517e:	ec49 8b10 	vmov	d0, r8, r9
 8015182:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015186:	6022      	str	r2, [r4, #0]
 8015188:	f8cd a004 	str.w	sl, [sp, #4]
 801518c:	6861      	ldr	r1, [r4, #4]
 801518e:	4628      	mov	r0, r5
 8015190:	f7ff fee8 	bl	8014f64 <__cvt>
 8015194:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8015198:	2b47      	cmp	r3, #71	; 0x47
 801519a:	4680      	mov	r8, r0
 801519c:	d109      	bne.n	80151b2 <_printf_float+0x126>
 801519e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80151a0:	1cd8      	adds	r0, r3, #3
 80151a2:	db02      	blt.n	80151aa <_printf_float+0x11e>
 80151a4:	6862      	ldr	r2, [r4, #4]
 80151a6:	4293      	cmp	r3, r2
 80151a8:	dd47      	ble.n	801523a <_printf_float+0x1ae>
 80151aa:	f1aa 0a02 	sub.w	sl, sl, #2
 80151ae:	fa5f fa8a 	uxtb.w	sl, sl
 80151b2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80151b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80151b8:	d824      	bhi.n	8015204 <_printf_float+0x178>
 80151ba:	3901      	subs	r1, #1
 80151bc:	4652      	mov	r2, sl
 80151be:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80151c2:	9109      	str	r1, [sp, #36]	; 0x24
 80151c4:	f7ff ff2f 	bl	8015026 <__exponent>
 80151c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80151ca:	1813      	adds	r3, r2, r0
 80151cc:	2a01      	cmp	r2, #1
 80151ce:	4681      	mov	r9, r0
 80151d0:	6123      	str	r3, [r4, #16]
 80151d2:	dc02      	bgt.n	80151da <_printf_float+0x14e>
 80151d4:	6822      	ldr	r2, [r4, #0]
 80151d6:	07d1      	lsls	r1, r2, #31
 80151d8:	d501      	bpl.n	80151de <_printf_float+0x152>
 80151da:	3301      	adds	r3, #1
 80151dc:	6123      	str	r3, [r4, #16]
 80151de:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	d0a5      	beq.n	8015132 <_printf_float+0xa6>
 80151e6:	232d      	movs	r3, #45	; 0x2d
 80151e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80151ec:	e7a1      	b.n	8015132 <_printf_float+0xa6>
 80151ee:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80151f2:	f000 8177 	beq.w	80154e4 <_printf_float+0x458>
 80151f6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80151fa:	d1bb      	bne.n	8015174 <_printf_float+0xe8>
 80151fc:	2900      	cmp	r1, #0
 80151fe:	d1b9      	bne.n	8015174 <_printf_float+0xe8>
 8015200:	2301      	movs	r3, #1
 8015202:	e7b6      	b.n	8015172 <_printf_float+0xe6>
 8015204:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8015208:	d119      	bne.n	801523e <_printf_float+0x1b2>
 801520a:	2900      	cmp	r1, #0
 801520c:	6863      	ldr	r3, [r4, #4]
 801520e:	dd0c      	ble.n	801522a <_printf_float+0x19e>
 8015210:	6121      	str	r1, [r4, #16]
 8015212:	b913      	cbnz	r3, 801521a <_printf_float+0x18e>
 8015214:	6822      	ldr	r2, [r4, #0]
 8015216:	07d2      	lsls	r2, r2, #31
 8015218:	d502      	bpl.n	8015220 <_printf_float+0x194>
 801521a:	3301      	adds	r3, #1
 801521c:	440b      	add	r3, r1
 801521e:	6123      	str	r3, [r4, #16]
 8015220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015222:	65a3      	str	r3, [r4, #88]	; 0x58
 8015224:	f04f 0900 	mov.w	r9, #0
 8015228:	e7d9      	b.n	80151de <_printf_float+0x152>
 801522a:	b913      	cbnz	r3, 8015232 <_printf_float+0x1a6>
 801522c:	6822      	ldr	r2, [r4, #0]
 801522e:	07d0      	lsls	r0, r2, #31
 8015230:	d501      	bpl.n	8015236 <_printf_float+0x1aa>
 8015232:	3302      	adds	r3, #2
 8015234:	e7f3      	b.n	801521e <_printf_float+0x192>
 8015236:	2301      	movs	r3, #1
 8015238:	e7f1      	b.n	801521e <_printf_float+0x192>
 801523a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801523e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8015242:	4293      	cmp	r3, r2
 8015244:	db05      	blt.n	8015252 <_printf_float+0x1c6>
 8015246:	6822      	ldr	r2, [r4, #0]
 8015248:	6123      	str	r3, [r4, #16]
 801524a:	07d1      	lsls	r1, r2, #31
 801524c:	d5e8      	bpl.n	8015220 <_printf_float+0x194>
 801524e:	3301      	adds	r3, #1
 8015250:	e7e5      	b.n	801521e <_printf_float+0x192>
 8015252:	2b00      	cmp	r3, #0
 8015254:	bfd4      	ite	le
 8015256:	f1c3 0302 	rsble	r3, r3, #2
 801525a:	2301      	movgt	r3, #1
 801525c:	4413      	add	r3, r2
 801525e:	e7de      	b.n	801521e <_printf_float+0x192>
 8015260:	6823      	ldr	r3, [r4, #0]
 8015262:	055a      	lsls	r2, r3, #21
 8015264:	d407      	bmi.n	8015276 <_printf_float+0x1ea>
 8015266:	6923      	ldr	r3, [r4, #16]
 8015268:	4642      	mov	r2, r8
 801526a:	4631      	mov	r1, r6
 801526c:	4628      	mov	r0, r5
 801526e:	47b8      	blx	r7
 8015270:	3001      	adds	r0, #1
 8015272:	d12b      	bne.n	80152cc <_printf_float+0x240>
 8015274:	e767      	b.n	8015146 <_printf_float+0xba>
 8015276:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801527a:	f240 80dc 	bls.w	8015436 <_printf_float+0x3aa>
 801527e:	2200      	movs	r2, #0
 8015280:	2300      	movs	r3, #0
 8015282:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015286:	f7eb fc1f 	bl	8000ac8 <__aeabi_dcmpeq>
 801528a:	2800      	cmp	r0, #0
 801528c:	d033      	beq.n	80152f6 <_printf_float+0x26a>
 801528e:	2301      	movs	r3, #1
 8015290:	4a41      	ldr	r2, [pc, #260]	; (8015398 <_printf_float+0x30c>)
 8015292:	4631      	mov	r1, r6
 8015294:	4628      	mov	r0, r5
 8015296:	47b8      	blx	r7
 8015298:	3001      	adds	r0, #1
 801529a:	f43f af54 	beq.w	8015146 <_printf_float+0xba>
 801529e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80152a2:	429a      	cmp	r2, r3
 80152a4:	db02      	blt.n	80152ac <_printf_float+0x220>
 80152a6:	6823      	ldr	r3, [r4, #0]
 80152a8:	07d8      	lsls	r0, r3, #31
 80152aa:	d50f      	bpl.n	80152cc <_printf_float+0x240>
 80152ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80152b0:	4631      	mov	r1, r6
 80152b2:	4628      	mov	r0, r5
 80152b4:	47b8      	blx	r7
 80152b6:	3001      	adds	r0, #1
 80152b8:	f43f af45 	beq.w	8015146 <_printf_float+0xba>
 80152bc:	f04f 0800 	mov.w	r8, #0
 80152c0:	f104 091a 	add.w	r9, r4, #26
 80152c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80152c6:	3b01      	subs	r3, #1
 80152c8:	4543      	cmp	r3, r8
 80152ca:	dc09      	bgt.n	80152e0 <_printf_float+0x254>
 80152cc:	6823      	ldr	r3, [r4, #0]
 80152ce:	079b      	lsls	r3, r3, #30
 80152d0:	f100 8103 	bmi.w	80154da <_printf_float+0x44e>
 80152d4:	68e0      	ldr	r0, [r4, #12]
 80152d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80152d8:	4298      	cmp	r0, r3
 80152da:	bfb8      	it	lt
 80152dc:	4618      	movlt	r0, r3
 80152de:	e734      	b.n	801514a <_printf_float+0xbe>
 80152e0:	2301      	movs	r3, #1
 80152e2:	464a      	mov	r2, r9
 80152e4:	4631      	mov	r1, r6
 80152e6:	4628      	mov	r0, r5
 80152e8:	47b8      	blx	r7
 80152ea:	3001      	adds	r0, #1
 80152ec:	f43f af2b 	beq.w	8015146 <_printf_float+0xba>
 80152f0:	f108 0801 	add.w	r8, r8, #1
 80152f4:	e7e6      	b.n	80152c4 <_printf_float+0x238>
 80152f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80152f8:	2b00      	cmp	r3, #0
 80152fa:	dc2b      	bgt.n	8015354 <_printf_float+0x2c8>
 80152fc:	2301      	movs	r3, #1
 80152fe:	4a26      	ldr	r2, [pc, #152]	; (8015398 <_printf_float+0x30c>)
 8015300:	4631      	mov	r1, r6
 8015302:	4628      	mov	r0, r5
 8015304:	47b8      	blx	r7
 8015306:	3001      	adds	r0, #1
 8015308:	f43f af1d 	beq.w	8015146 <_printf_float+0xba>
 801530c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801530e:	b923      	cbnz	r3, 801531a <_printf_float+0x28e>
 8015310:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015312:	b913      	cbnz	r3, 801531a <_printf_float+0x28e>
 8015314:	6823      	ldr	r3, [r4, #0]
 8015316:	07d9      	lsls	r1, r3, #31
 8015318:	d5d8      	bpl.n	80152cc <_printf_float+0x240>
 801531a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801531e:	4631      	mov	r1, r6
 8015320:	4628      	mov	r0, r5
 8015322:	47b8      	blx	r7
 8015324:	3001      	adds	r0, #1
 8015326:	f43f af0e 	beq.w	8015146 <_printf_float+0xba>
 801532a:	f04f 0900 	mov.w	r9, #0
 801532e:	f104 0a1a 	add.w	sl, r4, #26
 8015332:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015334:	425b      	negs	r3, r3
 8015336:	454b      	cmp	r3, r9
 8015338:	dc01      	bgt.n	801533e <_printf_float+0x2b2>
 801533a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801533c:	e794      	b.n	8015268 <_printf_float+0x1dc>
 801533e:	2301      	movs	r3, #1
 8015340:	4652      	mov	r2, sl
 8015342:	4631      	mov	r1, r6
 8015344:	4628      	mov	r0, r5
 8015346:	47b8      	blx	r7
 8015348:	3001      	adds	r0, #1
 801534a:	f43f aefc 	beq.w	8015146 <_printf_float+0xba>
 801534e:	f109 0901 	add.w	r9, r9, #1
 8015352:	e7ee      	b.n	8015332 <_printf_float+0x2a6>
 8015354:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015356:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015358:	429a      	cmp	r2, r3
 801535a:	bfa8      	it	ge
 801535c:	461a      	movge	r2, r3
 801535e:	2a00      	cmp	r2, #0
 8015360:	4691      	mov	r9, r2
 8015362:	dd07      	ble.n	8015374 <_printf_float+0x2e8>
 8015364:	4613      	mov	r3, r2
 8015366:	4631      	mov	r1, r6
 8015368:	4642      	mov	r2, r8
 801536a:	4628      	mov	r0, r5
 801536c:	47b8      	blx	r7
 801536e:	3001      	adds	r0, #1
 8015370:	f43f aee9 	beq.w	8015146 <_printf_float+0xba>
 8015374:	f104 031a 	add.w	r3, r4, #26
 8015378:	f04f 0b00 	mov.w	fp, #0
 801537c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015380:	9306      	str	r3, [sp, #24]
 8015382:	e015      	b.n	80153b0 <_printf_float+0x324>
 8015384:	7fefffff 	.word	0x7fefffff
 8015388:	0801a57c 	.word	0x0801a57c
 801538c:	0801a578 	.word	0x0801a578
 8015390:	0801a584 	.word	0x0801a584
 8015394:	0801a580 	.word	0x0801a580
 8015398:	0801a588 	.word	0x0801a588
 801539c:	2301      	movs	r3, #1
 801539e:	9a06      	ldr	r2, [sp, #24]
 80153a0:	4631      	mov	r1, r6
 80153a2:	4628      	mov	r0, r5
 80153a4:	47b8      	blx	r7
 80153a6:	3001      	adds	r0, #1
 80153a8:	f43f aecd 	beq.w	8015146 <_printf_float+0xba>
 80153ac:	f10b 0b01 	add.w	fp, fp, #1
 80153b0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80153b4:	ebaa 0309 	sub.w	r3, sl, r9
 80153b8:	455b      	cmp	r3, fp
 80153ba:	dcef      	bgt.n	801539c <_printf_float+0x310>
 80153bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80153c0:	429a      	cmp	r2, r3
 80153c2:	44d0      	add	r8, sl
 80153c4:	db15      	blt.n	80153f2 <_printf_float+0x366>
 80153c6:	6823      	ldr	r3, [r4, #0]
 80153c8:	07da      	lsls	r2, r3, #31
 80153ca:	d412      	bmi.n	80153f2 <_printf_float+0x366>
 80153cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80153ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80153d0:	eba3 020a 	sub.w	r2, r3, sl
 80153d4:	eba3 0a01 	sub.w	sl, r3, r1
 80153d8:	4592      	cmp	sl, r2
 80153da:	bfa8      	it	ge
 80153dc:	4692      	movge	sl, r2
 80153de:	f1ba 0f00 	cmp.w	sl, #0
 80153e2:	dc0e      	bgt.n	8015402 <_printf_float+0x376>
 80153e4:	f04f 0800 	mov.w	r8, #0
 80153e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80153ec:	f104 091a 	add.w	r9, r4, #26
 80153f0:	e019      	b.n	8015426 <_printf_float+0x39a>
 80153f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80153f6:	4631      	mov	r1, r6
 80153f8:	4628      	mov	r0, r5
 80153fa:	47b8      	blx	r7
 80153fc:	3001      	adds	r0, #1
 80153fe:	d1e5      	bne.n	80153cc <_printf_float+0x340>
 8015400:	e6a1      	b.n	8015146 <_printf_float+0xba>
 8015402:	4653      	mov	r3, sl
 8015404:	4642      	mov	r2, r8
 8015406:	4631      	mov	r1, r6
 8015408:	4628      	mov	r0, r5
 801540a:	47b8      	blx	r7
 801540c:	3001      	adds	r0, #1
 801540e:	d1e9      	bne.n	80153e4 <_printf_float+0x358>
 8015410:	e699      	b.n	8015146 <_printf_float+0xba>
 8015412:	2301      	movs	r3, #1
 8015414:	464a      	mov	r2, r9
 8015416:	4631      	mov	r1, r6
 8015418:	4628      	mov	r0, r5
 801541a:	47b8      	blx	r7
 801541c:	3001      	adds	r0, #1
 801541e:	f43f ae92 	beq.w	8015146 <_printf_float+0xba>
 8015422:	f108 0801 	add.w	r8, r8, #1
 8015426:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801542a:	1a9b      	subs	r3, r3, r2
 801542c:	eba3 030a 	sub.w	r3, r3, sl
 8015430:	4543      	cmp	r3, r8
 8015432:	dcee      	bgt.n	8015412 <_printf_float+0x386>
 8015434:	e74a      	b.n	80152cc <_printf_float+0x240>
 8015436:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015438:	2a01      	cmp	r2, #1
 801543a:	dc01      	bgt.n	8015440 <_printf_float+0x3b4>
 801543c:	07db      	lsls	r3, r3, #31
 801543e:	d53a      	bpl.n	80154b6 <_printf_float+0x42a>
 8015440:	2301      	movs	r3, #1
 8015442:	4642      	mov	r2, r8
 8015444:	4631      	mov	r1, r6
 8015446:	4628      	mov	r0, r5
 8015448:	47b8      	blx	r7
 801544a:	3001      	adds	r0, #1
 801544c:	f43f ae7b 	beq.w	8015146 <_printf_float+0xba>
 8015450:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015454:	4631      	mov	r1, r6
 8015456:	4628      	mov	r0, r5
 8015458:	47b8      	blx	r7
 801545a:	3001      	adds	r0, #1
 801545c:	f108 0801 	add.w	r8, r8, #1
 8015460:	f43f ae71 	beq.w	8015146 <_printf_float+0xba>
 8015464:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015466:	2200      	movs	r2, #0
 8015468:	f103 3aff 	add.w	sl, r3, #4294967295
 801546c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015470:	2300      	movs	r3, #0
 8015472:	f7eb fb29 	bl	8000ac8 <__aeabi_dcmpeq>
 8015476:	b9c8      	cbnz	r0, 80154ac <_printf_float+0x420>
 8015478:	4653      	mov	r3, sl
 801547a:	4642      	mov	r2, r8
 801547c:	4631      	mov	r1, r6
 801547e:	4628      	mov	r0, r5
 8015480:	47b8      	blx	r7
 8015482:	3001      	adds	r0, #1
 8015484:	d10e      	bne.n	80154a4 <_printf_float+0x418>
 8015486:	e65e      	b.n	8015146 <_printf_float+0xba>
 8015488:	2301      	movs	r3, #1
 801548a:	4652      	mov	r2, sl
 801548c:	4631      	mov	r1, r6
 801548e:	4628      	mov	r0, r5
 8015490:	47b8      	blx	r7
 8015492:	3001      	adds	r0, #1
 8015494:	f43f ae57 	beq.w	8015146 <_printf_float+0xba>
 8015498:	f108 0801 	add.w	r8, r8, #1
 801549c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801549e:	3b01      	subs	r3, #1
 80154a0:	4543      	cmp	r3, r8
 80154a2:	dcf1      	bgt.n	8015488 <_printf_float+0x3fc>
 80154a4:	464b      	mov	r3, r9
 80154a6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80154aa:	e6de      	b.n	801526a <_printf_float+0x1de>
 80154ac:	f04f 0800 	mov.w	r8, #0
 80154b0:	f104 0a1a 	add.w	sl, r4, #26
 80154b4:	e7f2      	b.n	801549c <_printf_float+0x410>
 80154b6:	2301      	movs	r3, #1
 80154b8:	e7df      	b.n	801547a <_printf_float+0x3ee>
 80154ba:	2301      	movs	r3, #1
 80154bc:	464a      	mov	r2, r9
 80154be:	4631      	mov	r1, r6
 80154c0:	4628      	mov	r0, r5
 80154c2:	47b8      	blx	r7
 80154c4:	3001      	adds	r0, #1
 80154c6:	f43f ae3e 	beq.w	8015146 <_printf_float+0xba>
 80154ca:	f108 0801 	add.w	r8, r8, #1
 80154ce:	68e3      	ldr	r3, [r4, #12]
 80154d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80154d2:	1a9b      	subs	r3, r3, r2
 80154d4:	4543      	cmp	r3, r8
 80154d6:	dcf0      	bgt.n	80154ba <_printf_float+0x42e>
 80154d8:	e6fc      	b.n	80152d4 <_printf_float+0x248>
 80154da:	f04f 0800 	mov.w	r8, #0
 80154de:	f104 0919 	add.w	r9, r4, #25
 80154e2:	e7f4      	b.n	80154ce <_printf_float+0x442>
 80154e4:	2900      	cmp	r1, #0
 80154e6:	f43f ae8b 	beq.w	8015200 <_printf_float+0x174>
 80154ea:	2300      	movs	r3, #0
 80154ec:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80154f0:	ab09      	add	r3, sp, #36	; 0x24
 80154f2:	9300      	str	r3, [sp, #0]
 80154f4:	ec49 8b10 	vmov	d0, r8, r9
 80154f8:	6022      	str	r2, [r4, #0]
 80154fa:	f8cd a004 	str.w	sl, [sp, #4]
 80154fe:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015502:	4628      	mov	r0, r5
 8015504:	f7ff fd2e 	bl	8014f64 <__cvt>
 8015508:	4680      	mov	r8, r0
 801550a:	e648      	b.n	801519e <_printf_float+0x112>

0801550c <_printf_common>:
 801550c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015510:	4691      	mov	r9, r2
 8015512:	461f      	mov	r7, r3
 8015514:	688a      	ldr	r2, [r1, #8]
 8015516:	690b      	ldr	r3, [r1, #16]
 8015518:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801551c:	4293      	cmp	r3, r2
 801551e:	bfb8      	it	lt
 8015520:	4613      	movlt	r3, r2
 8015522:	f8c9 3000 	str.w	r3, [r9]
 8015526:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801552a:	4606      	mov	r6, r0
 801552c:	460c      	mov	r4, r1
 801552e:	b112      	cbz	r2, 8015536 <_printf_common+0x2a>
 8015530:	3301      	adds	r3, #1
 8015532:	f8c9 3000 	str.w	r3, [r9]
 8015536:	6823      	ldr	r3, [r4, #0]
 8015538:	0699      	lsls	r1, r3, #26
 801553a:	bf42      	ittt	mi
 801553c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8015540:	3302      	addmi	r3, #2
 8015542:	f8c9 3000 	strmi.w	r3, [r9]
 8015546:	6825      	ldr	r5, [r4, #0]
 8015548:	f015 0506 	ands.w	r5, r5, #6
 801554c:	d107      	bne.n	801555e <_printf_common+0x52>
 801554e:	f104 0a19 	add.w	sl, r4, #25
 8015552:	68e3      	ldr	r3, [r4, #12]
 8015554:	f8d9 2000 	ldr.w	r2, [r9]
 8015558:	1a9b      	subs	r3, r3, r2
 801555a:	42ab      	cmp	r3, r5
 801555c:	dc28      	bgt.n	80155b0 <_printf_common+0xa4>
 801555e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8015562:	6822      	ldr	r2, [r4, #0]
 8015564:	3300      	adds	r3, #0
 8015566:	bf18      	it	ne
 8015568:	2301      	movne	r3, #1
 801556a:	0692      	lsls	r2, r2, #26
 801556c:	d42d      	bmi.n	80155ca <_printf_common+0xbe>
 801556e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015572:	4639      	mov	r1, r7
 8015574:	4630      	mov	r0, r6
 8015576:	47c0      	blx	r8
 8015578:	3001      	adds	r0, #1
 801557a:	d020      	beq.n	80155be <_printf_common+0xb2>
 801557c:	6823      	ldr	r3, [r4, #0]
 801557e:	68e5      	ldr	r5, [r4, #12]
 8015580:	f8d9 2000 	ldr.w	r2, [r9]
 8015584:	f003 0306 	and.w	r3, r3, #6
 8015588:	2b04      	cmp	r3, #4
 801558a:	bf08      	it	eq
 801558c:	1aad      	subeq	r5, r5, r2
 801558e:	68a3      	ldr	r3, [r4, #8]
 8015590:	6922      	ldr	r2, [r4, #16]
 8015592:	bf0c      	ite	eq
 8015594:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015598:	2500      	movne	r5, #0
 801559a:	4293      	cmp	r3, r2
 801559c:	bfc4      	itt	gt
 801559e:	1a9b      	subgt	r3, r3, r2
 80155a0:	18ed      	addgt	r5, r5, r3
 80155a2:	f04f 0900 	mov.w	r9, #0
 80155a6:	341a      	adds	r4, #26
 80155a8:	454d      	cmp	r5, r9
 80155aa:	d11a      	bne.n	80155e2 <_printf_common+0xd6>
 80155ac:	2000      	movs	r0, #0
 80155ae:	e008      	b.n	80155c2 <_printf_common+0xb6>
 80155b0:	2301      	movs	r3, #1
 80155b2:	4652      	mov	r2, sl
 80155b4:	4639      	mov	r1, r7
 80155b6:	4630      	mov	r0, r6
 80155b8:	47c0      	blx	r8
 80155ba:	3001      	adds	r0, #1
 80155bc:	d103      	bne.n	80155c6 <_printf_common+0xba>
 80155be:	f04f 30ff 	mov.w	r0, #4294967295
 80155c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80155c6:	3501      	adds	r5, #1
 80155c8:	e7c3      	b.n	8015552 <_printf_common+0x46>
 80155ca:	18e1      	adds	r1, r4, r3
 80155cc:	1c5a      	adds	r2, r3, #1
 80155ce:	2030      	movs	r0, #48	; 0x30
 80155d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80155d4:	4422      	add	r2, r4
 80155d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80155da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80155de:	3302      	adds	r3, #2
 80155e0:	e7c5      	b.n	801556e <_printf_common+0x62>
 80155e2:	2301      	movs	r3, #1
 80155e4:	4622      	mov	r2, r4
 80155e6:	4639      	mov	r1, r7
 80155e8:	4630      	mov	r0, r6
 80155ea:	47c0      	blx	r8
 80155ec:	3001      	adds	r0, #1
 80155ee:	d0e6      	beq.n	80155be <_printf_common+0xb2>
 80155f0:	f109 0901 	add.w	r9, r9, #1
 80155f4:	e7d8      	b.n	80155a8 <_printf_common+0x9c>
	...

080155f8 <_printf_i>:
 80155f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80155fc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8015600:	460c      	mov	r4, r1
 8015602:	7e09      	ldrb	r1, [r1, #24]
 8015604:	b085      	sub	sp, #20
 8015606:	296e      	cmp	r1, #110	; 0x6e
 8015608:	4617      	mov	r7, r2
 801560a:	4606      	mov	r6, r0
 801560c:	4698      	mov	r8, r3
 801560e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015610:	f000 80b3 	beq.w	801577a <_printf_i+0x182>
 8015614:	d822      	bhi.n	801565c <_printf_i+0x64>
 8015616:	2963      	cmp	r1, #99	; 0x63
 8015618:	d036      	beq.n	8015688 <_printf_i+0x90>
 801561a:	d80a      	bhi.n	8015632 <_printf_i+0x3a>
 801561c:	2900      	cmp	r1, #0
 801561e:	f000 80b9 	beq.w	8015794 <_printf_i+0x19c>
 8015622:	2958      	cmp	r1, #88	; 0x58
 8015624:	f000 8083 	beq.w	801572e <_printf_i+0x136>
 8015628:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801562c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8015630:	e032      	b.n	8015698 <_printf_i+0xa0>
 8015632:	2964      	cmp	r1, #100	; 0x64
 8015634:	d001      	beq.n	801563a <_printf_i+0x42>
 8015636:	2969      	cmp	r1, #105	; 0x69
 8015638:	d1f6      	bne.n	8015628 <_printf_i+0x30>
 801563a:	6820      	ldr	r0, [r4, #0]
 801563c:	6813      	ldr	r3, [r2, #0]
 801563e:	0605      	lsls	r5, r0, #24
 8015640:	f103 0104 	add.w	r1, r3, #4
 8015644:	d52a      	bpl.n	801569c <_printf_i+0xa4>
 8015646:	681b      	ldr	r3, [r3, #0]
 8015648:	6011      	str	r1, [r2, #0]
 801564a:	2b00      	cmp	r3, #0
 801564c:	da03      	bge.n	8015656 <_printf_i+0x5e>
 801564e:	222d      	movs	r2, #45	; 0x2d
 8015650:	425b      	negs	r3, r3
 8015652:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8015656:	486f      	ldr	r0, [pc, #444]	; (8015814 <_printf_i+0x21c>)
 8015658:	220a      	movs	r2, #10
 801565a:	e039      	b.n	80156d0 <_printf_i+0xd8>
 801565c:	2973      	cmp	r1, #115	; 0x73
 801565e:	f000 809d 	beq.w	801579c <_printf_i+0x1a4>
 8015662:	d808      	bhi.n	8015676 <_printf_i+0x7e>
 8015664:	296f      	cmp	r1, #111	; 0x6f
 8015666:	d020      	beq.n	80156aa <_printf_i+0xb2>
 8015668:	2970      	cmp	r1, #112	; 0x70
 801566a:	d1dd      	bne.n	8015628 <_printf_i+0x30>
 801566c:	6823      	ldr	r3, [r4, #0]
 801566e:	f043 0320 	orr.w	r3, r3, #32
 8015672:	6023      	str	r3, [r4, #0]
 8015674:	e003      	b.n	801567e <_printf_i+0x86>
 8015676:	2975      	cmp	r1, #117	; 0x75
 8015678:	d017      	beq.n	80156aa <_printf_i+0xb2>
 801567a:	2978      	cmp	r1, #120	; 0x78
 801567c:	d1d4      	bne.n	8015628 <_printf_i+0x30>
 801567e:	2378      	movs	r3, #120	; 0x78
 8015680:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015684:	4864      	ldr	r0, [pc, #400]	; (8015818 <_printf_i+0x220>)
 8015686:	e055      	b.n	8015734 <_printf_i+0x13c>
 8015688:	6813      	ldr	r3, [r2, #0]
 801568a:	1d19      	adds	r1, r3, #4
 801568c:	681b      	ldr	r3, [r3, #0]
 801568e:	6011      	str	r1, [r2, #0]
 8015690:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015694:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015698:	2301      	movs	r3, #1
 801569a:	e08c      	b.n	80157b6 <_printf_i+0x1be>
 801569c:	681b      	ldr	r3, [r3, #0]
 801569e:	6011      	str	r1, [r2, #0]
 80156a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80156a4:	bf18      	it	ne
 80156a6:	b21b      	sxthne	r3, r3
 80156a8:	e7cf      	b.n	801564a <_printf_i+0x52>
 80156aa:	6813      	ldr	r3, [r2, #0]
 80156ac:	6825      	ldr	r5, [r4, #0]
 80156ae:	1d18      	adds	r0, r3, #4
 80156b0:	6010      	str	r0, [r2, #0]
 80156b2:	0628      	lsls	r0, r5, #24
 80156b4:	d501      	bpl.n	80156ba <_printf_i+0xc2>
 80156b6:	681b      	ldr	r3, [r3, #0]
 80156b8:	e002      	b.n	80156c0 <_printf_i+0xc8>
 80156ba:	0668      	lsls	r0, r5, #25
 80156bc:	d5fb      	bpl.n	80156b6 <_printf_i+0xbe>
 80156be:	881b      	ldrh	r3, [r3, #0]
 80156c0:	4854      	ldr	r0, [pc, #336]	; (8015814 <_printf_i+0x21c>)
 80156c2:	296f      	cmp	r1, #111	; 0x6f
 80156c4:	bf14      	ite	ne
 80156c6:	220a      	movne	r2, #10
 80156c8:	2208      	moveq	r2, #8
 80156ca:	2100      	movs	r1, #0
 80156cc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80156d0:	6865      	ldr	r5, [r4, #4]
 80156d2:	60a5      	str	r5, [r4, #8]
 80156d4:	2d00      	cmp	r5, #0
 80156d6:	f2c0 8095 	blt.w	8015804 <_printf_i+0x20c>
 80156da:	6821      	ldr	r1, [r4, #0]
 80156dc:	f021 0104 	bic.w	r1, r1, #4
 80156e0:	6021      	str	r1, [r4, #0]
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	d13d      	bne.n	8015762 <_printf_i+0x16a>
 80156e6:	2d00      	cmp	r5, #0
 80156e8:	f040 808e 	bne.w	8015808 <_printf_i+0x210>
 80156ec:	4665      	mov	r5, ip
 80156ee:	2a08      	cmp	r2, #8
 80156f0:	d10b      	bne.n	801570a <_printf_i+0x112>
 80156f2:	6823      	ldr	r3, [r4, #0]
 80156f4:	07db      	lsls	r3, r3, #31
 80156f6:	d508      	bpl.n	801570a <_printf_i+0x112>
 80156f8:	6923      	ldr	r3, [r4, #16]
 80156fa:	6862      	ldr	r2, [r4, #4]
 80156fc:	429a      	cmp	r2, r3
 80156fe:	bfde      	ittt	le
 8015700:	2330      	movle	r3, #48	; 0x30
 8015702:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015706:	f105 35ff 	addle.w	r5, r5, #4294967295
 801570a:	ebac 0305 	sub.w	r3, ip, r5
 801570e:	6123      	str	r3, [r4, #16]
 8015710:	f8cd 8000 	str.w	r8, [sp]
 8015714:	463b      	mov	r3, r7
 8015716:	aa03      	add	r2, sp, #12
 8015718:	4621      	mov	r1, r4
 801571a:	4630      	mov	r0, r6
 801571c:	f7ff fef6 	bl	801550c <_printf_common>
 8015720:	3001      	adds	r0, #1
 8015722:	d14d      	bne.n	80157c0 <_printf_i+0x1c8>
 8015724:	f04f 30ff 	mov.w	r0, #4294967295
 8015728:	b005      	add	sp, #20
 801572a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801572e:	4839      	ldr	r0, [pc, #228]	; (8015814 <_printf_i+0x21c>)
 8015730:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8015734:	6813      	ldr	r3, [r2, #0]
 8015736:	6821      	ldr	r1, [r4, #0]
 8015738:	1d1d      	adds	r5, r3, #4
 801573a:	681b      	ldr	r3, [r3, #0]
 801573c:	6015      	str	r5, [r2, #0]
 801573e:	060a      	lsls	r2, r1, #24
 8015740:	d50b      	bpl.n	801575a <_printf_i+0x162>
 8015742:	07ca      	lsls	r2, r1, #31
 8015744:	bf44      	itt	mi
 8015746:	f041 0120 	orrmi.w	r1, r1, #32
 801574a:	6021      	strmi	r1, [r4, #0]
 801574c:	b91b      	cbnz	r3, 8015756 <_printf_i+0x15e>
 801574e:	6822      	ldr	r2, [r4, #0]
 8015750:	f022 0220 	bic.w	r2, r2, #32
 8015754:	6022      	str	r2, [r4, #0]
 8015756:	2210      	movs	r2, #16
 8015758:	e7b7      	b.n	80156ca <_printf_i+0xd2>
 801575a:	064d      	lsls	r5, r1, #25
 801575c:	bf48      	it	mi
 801575e:	b29b      	uxthmi	r3, r3
 8015760:	e7ef      	b.n	8015742 <_printf_i+0x14a>
 8015762:	4665      	mov	r5, ip
 8015764:	fbb3 f1f2 	udiv	r1, r3, r2
 8015768:	fb02 3311 	mls	r3, r2, r1, r3
 801576c:	5cc3      	ldrb	r3, [r0, r3]
 801576e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8015772:	460b      	mov	r3, r1
 8015774:	2900      	cmp	r1, #0
 8015776:	d1f5      	bne.n	8015764 <_printf_i+0x16c>
 8015778:	e7b9      	b.n	80156ee <_printf_i+0xf6>
 801577a:	6813      	ldr	r3, [r2, #0]
 801577c:	6825      	ldr	r5, [r4, #0]
 801577e:	6961      	ldr	r1, [r4, #20]
 8015780:	1d18      	adds	r0, r3, #4
 8015782:	6010      	str	r0, [r2, #0]
 8015784:	0628      	lsls	r0, r5, #24
 8015786:	681b      	ldr	r3, [r3, #0]
 8015788:	d501      	bpl.n	801578e <_printf_i+0x196>
 801578a:	6019      	str	r1, [r3, #0]
 801578c:	e002      	b.n	8015794 <_printf_i+0x19c>
 801578e:	066a      	lsls	r2, r5, #25
 8015790:	d5fb      	bpl.n	801578a <_printf_i+0x192>
 8015792:	8019      	strh	r1, [r3, #0]
 8015794:	2300      	movs	r3, #0
 8015796:	6123      	str	r3, [r4, #16]
 8015798:	4665      	mov	r5, ip
 801579a:	e7b9      	b.n	8015710 <_printf_i+0x118>
 801579c:	6813      	ldr	r3, [r2, #0]
 801579e:	1d19      	adds	r1, r3, #4
 80157a0:	6011      	str	r1, [r2, #0]
 80157a2:	681d      	ldr	r5, [r3, #0]
 80157a4:	6862      	ldr	r2, [r4, #4]
 80157a6:	2100      	movs	r1, #0
 80157a8:	4628      	mov	r0, r5
 80157aa:	f7ea fd19 	bl	80001e0 <memchr>
 80157ae:	b108      	cbz	r0, 80157b4 <_printf_i+0x1bc>
 80157b0:	1b40      	subs	r0, r0, r5
 80157b2:	6060      	str	r0, [r4, #4]
 80157b4:	6863      	ldr	r3, [r4, #4]
 80157b6:	6123      	str	r3, [r4, #16]
 80157b8:	2300      	movs	r3, #0
 80157ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80157be:	e7a7      	b.n	8015710 <_printf_i+0x118>
 80157c0:	6923      	ldr	r3, [r4, #16]
 80157c2:	462a      	mov	r2, r5
 80157c4:	4639      	mov	r1, r7
 80157c6:	4630      	mov	r0, r6
 80157c8:	47c0      	blx	r8
 80157ca:	3001      	adds	r0, #1
 80157cc:	d0aa      	beq.n	8015724 <_printf_i+0x12c>
 80157ce:	6823      	ldr	r3, [r4, #0]
 80157d0:	079b      	lsls	r3, r3, #30
 80157d2:	d413      	bmi.n	80157fc <_printf_i+0x204>
 80157d4:	68e0      	ldr	r0, [r4, #12]
 80157d6:	9b03      	ldr	r3, [sp, #12]
 80157d8:	4298      	cmp	r0, r3
 80157da:	bfb8      	it	lt
 80157dc:	4618      	movlt	r0, r3
 80157de:	e7a3      	b.n	8015728 <_printf_i+0x130>
 80157e0:	2301      	movs	r3, #1
 80157e2:	464a      	mov	r2, r9
 80157e4:	4639      	mov	r1, r7
 80157e6:	4630      	mov	r0, r6
 80157e8:	47c0      	blx	r8
 80157ea:	3001      	adds	r0, #1
 80157ec:	d09a      	beq.n	8015724 <_printf_i+0x12c>
 80157ee:	3501      	adds	r5, #1
 80157f0:	68e3      	ldr	r3, [r4, #12]
 80157f2:	9a03      	ldr	r2, [sp, #12]
 80157f4:	1a9b      	subs	r3, r3, r2
 80157f6:	42ab      	cmp	r3, r5
 80157f8:	dcf2      	bgt.n	80157e0 <_printf_i+0x1e8>
 80157fa:	e7eb      	b.n	80157d4 <_printf_i+0x1dc>
 80157fc:	2500      	movs	r5, #0
 80157fe:	f104 0919 	add.w	r9, r4, #25
 8015802:	e7f5      	b.n	80157f0 <_printf_i+0x1f8>
 8015804:	2b00      	cmp	r3, #0
 8015806:	d1ac      	bne.n	8015762 <_printf_i+0x16a>
 8015808:	7803      	ldrb	r3, [r0, #0]
 801580a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801580e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015812:	e76c      	b.n	80156ee <_printf_i+0xf6>
 8015814:	0801a58a 	.word	0x0801a58a
 8015818:	0801a59b 	.word	0x0801a59b

0801581c <_scanf_float>:
 801581c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015820:	469a      	mov	sl, r3
 8015822:	688b      	ldr	r3, [r1, #8]
 8015824:	4616      	mov	r6, r2
 8015826:	1e5a      	subs	r2, r3, #1
 8015828:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801582c:	b087      	sub	sp, #28
 801582e:	bf83      	ittte	hi
 8015830:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8015834:	189b      	addhi	r3, r3, r2
 8015836:	9301      	strhi	r3, [sp, #4]
 8015838:	2300      	movls	r3, #0
 801583a:	bf86      	itte	hi
 801583c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8015840:	608b      	strhi	r3, [r1, #8]
 8015842:	9301      	strls	r3, [sp, #4]
 8015844:	680b      	ldr	r3, [r1, #0]
 8015846:	4688      	mov	r8, r1
 8015848:	f04f 0b00 	mov.w	fp, #0
 801584c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8015850:	f848 3b1c 	str.w	r3, [r8], #28
 8015854:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8015858:	4607      	mov	r7, r0
 801585a:	460c      	mov	r4, r1
 801585c:	4645      	mov	r5, r8
 801585e:	465a      	mov	r2, fp
 8015860:	46d9      	mov	r9, fp
 8015862:	f8cd b008 	str.w	fp, [sp, #8]
 8015866:	68a1      	ldr	r1, [r4, #8]
 8015868:	b181      	cbz	r1, 801588c <_scanf_float+0x70>
 801586a:	6833      	ldr	r3, [r6, #0]
 801586c:	781b      	ldrb	r3, [r3, #0]
 801586e:	2b49      	cmp	r3, #73	; 0x49
 8015870:	d071      	beq.n	8015956 <_scanf_float+0x13a>
 8015872:	d84d      	bhi.n	8015910 <_scanf_float+0xf4>
 8015874:	2b39      	cmp	r3, #57	; 0x39
 8015876:	d840      	bhi.n	80158fa <_scanf_float+0xde>
 8015878:	2b31      	cmp	r3, #49	; 0x31
 801587a:	f080 8088 	bcs.w	801598e <_scanf_float+0x172>
 801587e:	2b2d      	cmp	r3, #45	; 0x2d
 8015880:	f000 8090 	beq.w	80159a4 <_scanf_float+0x188>
 8015884:	d815      	bhi.n	80158b2 <_scanf_float+0x96>
 8015886:	2b2b      	cmp	r3, #43	; 0x2b
 8015888:	f000 808c 	beq.w	80159a4 <_scanf_float+0x188>
 801588c:	f1b9 0f00 	cmp.w	r9, #0
 8015890:	d003      	beq.n	801589a <_scanf_float+0x7e>
 8015892:	6823      	ldr	r3, [r4, #0]
 8015894:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015898:	6023      	str	r3, [r4, #0]
 801589a:	3a01      	subs	r2, #1
 801589c:	2a01      	cmp	r2, #1
 801589e:	f200 80ea 	bhi.w	8015a76 <_scanf_float+0x25a>
 80158a2:	4545      	cmp	r5, r8
 80158a4:	f200 80dc 	bhi.w	8015a60 <_scanf_float+0x244>
 80158a8:	2601      	movs	r6, #1
 80158aa:	4630      	mov	r0, r6
 80158ac:	b007      	add	sp, #28
 80158ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158b2:	2b2e      	cmp	r3, #46	; 0x2e
 80158b4:	f000 809f 	beq.w	80159f6 <_scanf_float+0x1da>
 80158b8:	2b30      	cmp	r3, #48	; 0x30
 80158ba:	d1e7      	bne.n	801588c <_scanf_float+0x70>
 80158bc:	6820      	ldr	r0, [r4, #0]
 80158be:	f410 7f80 	tst.w	r0, #256	; 0x100
 80158c2:	d064      	beq.n	801598e <_scanf_float+0x172>
 80158c4:	9b01      	ldr	r3, [sp, #4]
 80158c6:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80158ca:	6020      	str	r0, [r4, #0]
 80158cc:	f109 0901 	add.w	r9, r9, #1
 80158d0:	b11b      	cbz	r3, 80158da <_scanf_float+0xbe>
 80158d2:	3b01      	subs	r3, #1
 80158d4:	3101      	adds	r1, #1
 80158d6:	9301      	str	r3, [sp, #4]
 80158d8:	60a1      	str	r1, [r4, #8]
 80158da:	68a3      	ldr	r3, [r4, #8]
 80158dc:	3b01      	subs	r3, #1
 80158de:	60a3      	str	r3, [r4, #8]
 80158e0:	6923      	ldr	r3, [r4, #16]
 80158e2:	3301      	adds	r3, #1
 80158e4:	6123      	str	r3, [r4, #16]
 80158e6:	6873      	ldr	r3, [r6, #4]
 80158e8:	3b01      	subs	r3, #1
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	6073      	str	r3, [r6, #4]
 80158ee:	f340 80ac 	ble.w	8015a4a <_scanf_float+0x22e>
 80158f2:	6833      	ldr	r3, [r6, #0]
 80158f4:	3301      	adds	r3, #1
 80158f6:	6033      	str	r3, [r6, #0]
 80158f8:	e7b5      	b.n	8015866 <_scanf_float+0x4a>
 80158fa:	2b45      	cmp	r3, #69	; 0x45
 80158fc:	f000 8085 	beq.w	8015a0a <_scanf_float+0x1ee>
 8015900:	2b46      	cmp	r3, #70	; 0x46
 8015902:	d06a      	beq.n	80159da <_scanf_float+0x1be>
 8015904:	2b41      	cmp	r3, #65	; 0x41
 8015906:	d1c1      	bne.n	801588c <_scanf_float+0x70>
 8015908:	2a01      	cmp	r2, #1
 801590a:	d1bf      	bne.n	801588c <_scanf_float+0x70>
 801590c:	2202      	movs	r2, #2
 801590e:	e046      	b.n	801599e <_scanf_float+0x182>
 8015910:	2b65      	cmp	r3, #101	; 0x65
 8015912:	d07a      	beq.n	8015a0a <_scanf_float+0x1ee>
 8015914:	d818      	bhi.n	8015948 <_scanf_float+0x12c>
 8015916:	2b54      	cmp	r3, #84	; 0x54
 8015918:	d066      	beq.n	80159e8 <_scanf_float+0x1cc>
 801591a:	d811      	bhi.n	8015940 <_scanf_float+0x124>
 801591c:	2b4e      	cmp	r3, #78	; 0x4e
 801591e:	d1b5      	bne.n	801588c <_scanf_float+0x70>
 8015920:	2a00      	cmp	r2, #0
 8015922:	d146      	bne.n	80159b2 <_scanf_float+0x196>
 8015924:	f1b9 0f00 	cmp.w	r9, #0
 8015928:	d145      	bne.n	80159b6 <_scanf_float+0x19a>
 801592a:	6821      	ldr	r1, [r4, #0]
 801592c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8015930:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8015934:	d13f      	bne.n	80159b6 <_scanf_float+0x19a>
 8015936:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801593a:	6021      	str	r1, [r4, #0]
 801593c:	2201      	movs	r2, #1
 801593e:	e02e      	b.n	801599e <_scanf_float+0x182>
 8015940:	2b59      	cmp	r3, #89	; 0x59
 8015942:	d01e      	beq.n	8015982 <_scanf_float+0x166>
 8015944:	2b61      	cmp	r3, #97	; 0x61
 8015946:	e7de      	b.n	8015906 <_scanf_float+0xea>
 8015948:	2b6e      	cmp	r3, #110	; 0x6e
 801594a:	d0e9      	beq.n	8015920 <_scanf_float+0x104>
 801594c:	d815      	bhi.n	801597a <_scanf_float+0x15e>
 801594e:	2b66      	cmp	r3, #102	; 0x66
 8015950:	d043      	beq.n	80159da <_scanf_float+0x1be>
 8015952:	2b69      	cmp	r3, #105	; 0x69
 8015954:	d19a      	bne.n	801588c <_scanf_float+0x70>
 8015956:	f1bb 0f00 	cmp.w	fp, #0
 801595a:	d138      	bne.n	80159ce <_scanf_float+0x1b2>
 801595c:	f1b9 0f00 	cmp.w	r9, #0
 8015960:	d197      	bne.n	8015892 <_scanf_float+0x76>
 8015962:	6821      	ldr	r1, [r4, #0]
 8015964:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8015968:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 801596c:	d195      	bne.n	801589a <_scanf_float+0x7e>
 801596e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015972:	6021      	str	r1, [r4, #0]
 8015974:	f04f 0b01 	mov.w	fp, #1
 8015978:	e011      	b.n	801599e <_scanf_float+0x182>
 801597a:	2b74      	cmp	r3, #116	; 0x74
 801597c:	d034      	beq.n	80159e8 <_scanf_float+0x1cc>
 801597e:	2b79      	cmp	r3, #121	; 0x79
 8015980:	d184      	bne.n	801588c <_scanf_float+0x70>
 8015982:	f1bb 0f07 	cmp.w	fp, #7
 8015986:	d181      	bne.n	801588c <_scanf_float+0x70>
 8015988:	f04f 0b08 	mov.w	fp, #8
 801598c:	e007      	b.n	801599e <_scanf_float+0x182>
 801598e:	eb12 0f0b 	cmn.w	r2, fp
 8015992:	f47f af7b 	bne.w	801588c <_scanf_float+0x70>
 8015996:	6821      	ldr	r1, [r4, #0]
 8015998:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 801599c:	6021      	str	r1, [r4, #0]
 801599e:	702b      	strb	r3, [r5, #0]
 80159a0:	3501      	adds	r5, #1
 80159a2:	e79a      	b.n	80158da <_scanf_float+0xbe>
 80159a4:	6821      	ldr	r1, [r4, #0]
 80159a6:	0608      	lsls	r0, r1, #24
 80159a8:	f57f af70 	bpl.w	801588c <_scanf_float+0x70>
 80159ac:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80159b0:	e7f4      	b.n	801599c <_scanf_float+0x180>
 80159b2:	2a02      	cmp	r2, #2
 80159b4:	d047      	beq.n	8015a46 <_scanf_float+0x22a>
 80159b6:	f1bb 0f01 	cmp.w	fp, #1
 80159ba:	d003      	beq.n	80159c4 <_scanf_float+0x1a8>
 80159bc:	f1bb 0f04 	cmp.w	fp, #4
 80159c0:	f47f af64 	bne.w	801588c <_scanf_float+0x70>
 80159c4:	f10b 0b01 	add.w	fp, fp, #1
 80159c8:	fa5f fb8b 	uxtb.w	fp, fp
 80159cc:	e7e7      	b.n	801599e <_scanf_float+0x182>
 80159ce:	f1bb 0f03 	cmp.w	fp, #3
 80159d2:	d0f7      	beq.n	80159c4 <_scanf_float+0x1a8>
 80159d4:	f1bb 0f05 	cmp.w	fp, #5
 80159d8:	e7f2      	b.n	80159c0 <_scanf_float+0x1a4>
 80159da:	f1bb 0f02 	cmp.w	fp, #2
 80159de:	f47f af55 	bne.w	801588c <_scanf_float+0x70>
 80159e2:	f04f 0b03 	mov.w	fp, #3
 80159e6:	e7da      	b.n	801599e <_scanf_float+0x182>
 80159e8:	f1bb 0f06 	cmp.w	fp, #6
 80159ec:	f47f af4e 	bne.w	801588c <_scanf_float+0x70>
 80159f0:	f04f 0b07 	mov.w	fp, #7
 80159f4:	e7d3      	b.n	801599e <_scanf_float+0x182>
 80159f6:	6821      	ldr	r1, [r4, #0]
 80159f8:	0588      	lsls	r0, r1, #22
 80159fa:	f57f af47 	bpl.w	801588c <_scanf_float+0x70>
 80159fe:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8015a02:	6021      	str	r1, [r4, #0]
 8015a04:	f8cd 9008 	str.w	r9, [sp, #8]
 8015a08:	e7c9      	b.n	801599e <_scanf_float+0x182>
 8015a0a:	6821      	ldr	r1, [r4, #0]
 8015a0c:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8015a10:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8015a14:	d006      	beq.n	8015a24 <_scanf_float+0x208>
 8015a16:	0548      	lsls	r0, r1, #21
 8015a18:	f57f af38 	bpl.w	801588c <_scanf_float+0x70>
 8015a1c:	f1b9 0f00 	cmp.w	r9, #0
 8015a20:	f43f af3b 	beq.w	801589a <_scanf_float+0x7e>
 8015a24:	0588      	lsls	r0, r1, #22
 8015a26:	bf58      	it	pl
 8015a28:	9802      	ldrpl	r0, [sp, #8]
 8015a2a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015a2e:	bf58      	it	pl
 8015a30:	eba9 0000 	subpl.w	r0, r9, r0
 8015a34:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8015a38:	bf58      	it	pl
 8015a3a:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8015a3e:	6021      	str	r1, [r4, #0]
 8015a40:	f04f 0900 	mov.w	r9, #0
 8015a44:	e7ab      	b.n	801599e <_scanf_float+0x182>
 8015a46:	2203      	movs	r2, #3
 8015a48:	e7a9      	b.n	801599e <_scanf_float+0x182>
 8015a4a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015a4e:	9205      	str	r2, [sp, #20]
 8015a50:	4631      	mov	r1, r6
 8015a52:	4638      	mov	r0, r7
 8015a54:	4798      	blx	r3
 8015a56:	9a05      	ldr	r2, [sp, #20]
 8015a58:	2800      	cmp	r0, #0
 8015a5a:	f43f af04 	beq.w	8015866 <_scanf_float+0x4a>
 8015a5e:	e715      	b.n	801588c <_scanf_float+0x70>
 8015a60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015a64:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015a68:	4632      	mov	r2, r6
 8015a6a:	4638      	mov	r0, r7
 8015a6c:	4798      	blx	r3
 8015a6e:	6923      	ldr	r3, [r4, #16]
 8015a70:	3b01      	subs	r3, #1
 8015a72:	6123      	str	r3, [r4, #16]
 8015a74:	e715      	b.n	80158a2 <_scanf_float+0x86>
 8015a76:	f10b 33ff 	add.w	r3, fp, #4294967295
 8015a7a:	2b06      	cmp	r3, #6
 8015a7c:	d80a      	bhi.n	8015a94 <_scanf_float+0x278>
 8015a7e:	f1bb 0f02 	cmp.w	fp, #2
 8015a82:	d968      	bls.n	8015b56 <_scanf_float+0x33a>
 8015a84:	f1ab 0b03 	sub.w	fp, fp, #3
 8015a88:	fa5f fb8b 	uxtb.w	fp, fp
 8015a8c:	eba5 0b0b 	sub.w	fp, r5, fp
 8015a90:	455d      	cmp	r5, fp
 8015a92:	d14b      	bne.n	8015b2c <_scanf_float+0x310>
 8015a94:	6823      	ldr	r3, [r4, #0]
 8015a96:	05da      	lsls	r2, r3, #23
 8015a98:	d51f      	bpl.n	8015ada <_scanf_float+0x2be>
 8015a9a:	055b      	lsls	r3, r3, #21
 8015a9c:	d468      	bmi.n	8015b70 <_scanf_float+0x354>
 8015a9e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8015aa2:	6923      	ldr	r3, [r4, #16]
 8015aa4:	2965      	cmp	r1, #101	; 0x65
 8015aa6:	f103 33ff 	add.w	r3, r3, #4294967295
 8015aaa:	f105 3bff 	add.w	fp, r5, #4294967295
 8015aae:	6123      	str	r3, [r4, #16]
 8015ab0:	d00d      	beq.n	8015ace <_scanf_float+0x2b2>
 8015ab2:	2945      	cmp	r1, #69	; 0x45
 8015ab4:	d00b      	beq.n	8015ace <_scanf_float+0x2b2>
 8015ab6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015aba:	4632      	mov	r2, r6
 8015abc:	4638      	mov	r0, r7
 8015abe:	4798      	blx	r3
 8015ac0:	6923      	ldr	r3, [r4, #16]
 8015ac2:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8015ac6:	3b01      	subs	r3, #1
 8015ac8:	f1a5 0b02 	sub.w	fp, r5, #2
 8015acc:	6123      	str	r3, [r4, #16]
 8015ace:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015ad2:	4632      	mov	r2, r6
 8015ad4:	4638      	mov	r0, r7
 8015ad6:	4798      	blx	r3
 8015ad8:	465d      	mov	r5, fp
 8015ada:	6826      	ldr	r6, [r4, #0]
 8015adc:	f016 0610 	ands.w	r6, r6, #16
 8015ae0:	d17a      	bne.n	8015bd8 <_scanf_float+0x3bc>
 8015ae2:	702e      	strb	r6, [r5, #0]
 8015ae4:	6823      	ldr	r3, [r4, #0]
 8015ae6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8015aea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015aee:	d142      	bne.n	8015b76 <_scanf_float+0x35a>
 8015af0:	9b02      	ldr	r3, [sp, #8]
 8015af2:	eba9 0303 	sub.w	r3, r9, r3
 8015af6:	425a      	negs	r2, r3
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	d149      	bne.n	8015b90 <_scanf_float+0x374>
 8015afc:	2200      	movs	r2, #0
 8015afe:	4641      	mov	r1, r8
 8015b00:	4638      	mov	r0, r7
 8015b02:	f000 fee9 	bl	80168d8 <_strtod_r>
 8015b06:	6825      	ldr	r5, [r4, #0]
 8015b08:	f8da 3000 	ldr.w	r3, [sl]
 8015b0c:	f015 0f02 	tst.w	r5, #2
 8015b10:	f103 0204 	add.w	r2, r3, #4
 8015b14:	ec59 8b10 	vmov	r8, r9, d0
 8015b18:	f8ca 2000 	str.w	r2, [sl]
 8015b1c:	d043      	beq.n	8015ba6 <_scanf_float+0x38a>
 8015b1e:	681b      	ldr	r3, [r3, #0]
 8015b20:	e9c3 8900 	strd	r8, r9, [r3]
 8015b24:	68e3      	ldr	r3, [r4, #12]
 8015b26:	3301      	adds	r3, #1
 8015b28:	60e3      	str	r3, [r4, #12]
 8015b2a:	e6be      	b.n	80158aa <_scanf_float+0x8e>
 8015b2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015b30:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015b34:	4632      	mov	r2, r6
 8015b36:	4638      	mov	r0, r7
 8015b38:	4798      	blx	r3
 8015b3a:	6923      	ldr	r3, [r4, #16]
 8015b3c:	3b01      	subs	r3, #1
 8015b3e:	6123      	str	r3, [r4, #16]
 8015b40:	e7a6      	b.n	8015a90 <_scanf_float+0x274>
 8015b42:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015b46:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015b4a:	4632      	mov	r2, r6
 8015b4c:	4638      	mov	r0, r7
 8015b4e:	4798      	blx	r3
 8015b50:	6923      	ldr	r3, [r4, #16]
 8015b52:	3b01      	subs	r3, #1
 8015b54:	6123      	str	r3, [r4, #16]
 8015b56:	4545      	cmp	r5, r8
 8015b58:	d8f3      	bhi.n	8015b42 <_scanf_float+0x326>
 8015b5a:	e6a5      	b.n	80158a8 <_scanf_float+0x8c>
 8015b5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015b60:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015b64:	4632      	mov	r2, r6
 8015b66:	4638      	mov	r0, r7
 8015b68:	4798      	blx	r3
 8015b6a:	6923      	ldr	r3, [r4, #16]
 8015b6c:	3b01      	subs	r3, #1
 8015b6e:	6123      	str	r3, [r4, #16]
 8015b70:	4545      	cmp	r5, r8
 8015b72:	d8f3      	bhi.n	8015b5c <_scanf_float+0x340>
 8015b74:	e698      	b.n	80158a8 <_scanf_float+0x8c>
 8015b76:	9b03      	ldr	r3, [sp, #12]
 8015b78:	2b00      	cmp	r3, #0
 8015b7a:	d0bf      	beq.n	8015afc <_scanf_float+0x2e0>
 8015b7c:	9904      	ldr	r1, [sp, #16]
 8015b7e:	230a      	movs	r3, #10
 8015b80:	4632      	mov	r2, r6
 8015b82:	3101      	adds	r1, #1
 8015b84:	4638      	mov	r0, r7
 8015b86:	f000 ff33 	bl	80169f0 <_strtol_r>
 8015b8a:	9b03      	ldr	r3, [sp, #12]
 8015b8c:	9d04      	ldr	r5, [sp, #16]
 8015b8e:	1ac2      	subs	r2, r0, r3
 8015b90:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8015b94:	429d      	cmp	r5, r3
 8015b96:	bf28      	it	cs
 8015b98:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8015b9c:	490f      	ldr	r1, [pc, #60]	; (8015bdc <_scanf_float+0x3c0>)
 8015b9e:	4628      	mov	r0, r5
 8015ba0:	f000 f868 	bl	8015c74 <siprintf>
 8015ba4:	e7aa      	b.n	8015afc <_scanf_float+0x2e0>
 8015ba6:	f015 0504 	ands.w	r5, r5, #4
 8015baa:	d1b8      	bne.n	8015b1e <_scanf_float+0x302>
 8015bac:	681f      	ldr	r7, [r3, #0]
 8015bae:	ee10 2a10 	vmov	r2, s0
 8015bb2:	464b      	mov	r3, r9
 8015bb4:	ee10 0a10 	vmov	r0, s0
 8015bb8:	4649      	mov	r1, r9
 8015bba:	f7ea ffb7 	bl	8000b2c <__aeabi_dcmpun>
 8015bbe:	b128      	cbz	r0, 8015bcc <_scanf_float+0x3b0>
 8015bc0:	4628      	mov	r0, r5
 8015bc2:	f000 f81d 	bl	8015c00 <nanf>
 8015bc6:	ed87 0a00 	vstr	s0, [r7]
 8015bca:	e7ab      	b.n	8015b24 <_scanf_float+0x308>
 8015bcc:	4640      	mov	r0, r8
 8015bce:	4649      	mov	r1, r9
 8015bd0:	f7eb f80a 	bl	8000be8 <__aeabi_d2f>
 8015bd4:	6038      	str	r0, [r7, #0]
 8015bd6:	e7a5      	b.n	8015b24 <_scanf_float+0x308>
 8015bd8:	2600      	movs	r6, #0
 8015bda:	e666      	b.n	80158aa <_scanf_float+0x8e>
 8015bdc:	0801a5ac 	.word	0x0801a5ac

08015be0 <_sbrk_r>:
 8015be0:	b538      	push	{r3, r4, r5, lr}
 8015be2:	4c06      	ldr	r4, [pc, #24]	; (8015bfc <_sbrk_r+0x1c>)
 8015be4:	2300      	movs	r3, #0
 8015be6:	4605      	mov	r5, r0
 8015be8:	4608      	mov	r0, r1
 8015bea:	6023      	str	r3, [r4, #0]
 8015bec:	f7f4 fad0 	bl	800a190 <_sbrk>
 8015bf0:	1c43      	adds	r3, r0, #1
 8015bf2:	d102      	bne.n	8015bfa <_sbrk_r+0x1a>
 8015bf4:	6823      	ldr	r3, [r4, #0]
 8015bf6:	b103      	cbz	r3, 8015bfa <_sbrk_r+0x1a>
 8015bf8:	602b      	str	r3, [r5, #0]
 8015bfa:	bd38      	pop	{r3, r4, r5, pc}
 8015bfc:	2000e1c4 	.word	0x2000e1c4

08015c00 <nanf>:
 8015c00:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8015c08 <nanf+0x8>
 8015c04:	4770      	bx	lr
 8015c06:	bf00      	nop
 8015c08:	7fc00000 	.word	0x7fc00000

08015c0c <sniprintf>:
 8015c0c:	b40c      	push	{r2, r3}
 8015c0e:	b530      	push	{r4, r5, lr}
 8015c10:	4b17      	ldr	r3, [pc, #92]	; (8015c70 <sniprintf+0x64>)
 8015c12:	1e0c      	subs	r4, r1, #0
 8015c14:	b09d      	sub	sp, #116	; 0x74
 8015c16:	681d      	ldr	r5, [r3, #0]
 8015c18:	da08      	bge.n	8015c2c <sniprintf+0x20>
 8015c1a:	238b      	movs	r3, #139	; 0x8b
 8015c1c:	602b      	str	r3, [r5, #0]
 8015c1e:	f04f 30ff 	mov.w	r0, #4294967295
 8015c22:	b01d      	add	sp, #116	; 0x74
 8015c24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015c28:	b002      	add	sp, #8
 8015c2a:	4770      	bx	lr
 8015c2c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8015c30:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015c34:	bf14      	ite	ne
 8015c36:	f104 33ff 	addne.w	r3, r4, #4294967295
 8015c3a:	4623      	moveq	r3, r4
 8015c3c:	9304      	str	r3, [sp, #16]
 8015c3e:	9307      	str	r3, [sp, #28]
 8015c40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015c44:	9002      	str	r0, [sp, #8]
 8015c46:	9006      	str	r0, [sp, #24]
 8015c48:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015c4c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015c4e:	ab21      	add	r3, sp, #132	; 0x84
 8015c50:	a902      	add	r1, sp, #8
 8015c52:	4628      	mov	r0, r5
 8015c54:	9301      	str	r3, [sp, #4]
 8015c56:	f002 fcd9 	bl	801860c <_svfiprintf_r>
 8015c5a:	1c43      	adds	r3, r0, #1
 8015c5c:	bfbc      	itt	lt
 8015c5e:	238b      	movlt	r3, #139	; 0x8b
 8015c60:	602b      	strlt	r3, [r5, #0]
 8015c62:	2c00      	cmp	r4, #0
 8015c64:	d0dd      	beq.n	8015c22 <sniprintf+0x16>
 8015c66:	9b02      	ldr	r3, [sp, #8]
 8015c68:	2200      	movs	r2, #0
 8015c6a:	701a      	strb	r2, [r3, #0]
 8015c6c:	e7d9      	b.n	8015c22 <sniprintf+0x16>
 8015c6e:	bf00      	nop
 8015c70:	2000220c 	.word	0x2000220c

08015c74 <siprintf>:
 8015c74:	b40e      	push	{r1, r2, r3}
 8015c76:	b500      	push	{lr}
 8015c78:	b09c      	sub	sp, #112	; 0x70
 8015c7a:	ab1d      	add	r3, sp, #116	; 0x74
 8015c7c:	9002      	str	r0, [sp, #8]
 8015c7e:	9006      	str	r0, [sp, #24]
 8015c80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015c84:	4809      	ldr	r0, [pc, #36]	; (8015cac <siprintf+0x38>)
 8015c86:	9107      	str	r1, [sp, #28]
 8015c88:	9104      	str	r1, [sp, #16]
 8015c8a:	4909      	ldr	r1, [pc, #36]	; (8015cb0 <siprintf+0x3c>)
 8015c8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015c90:	9105      	str	r1, [sp, #20]
 8015c92:	6800      	ldr	r0, [r0, #0]
 8015c94:	9301      	str	r3, [sp, #4]
 8015c96:	a902      	add	r1, sp, #8
 8015c98:	f002 fcb8 	bl	801860c <_svfiprintf_r>
 8015c9c:	9b02      	ldr	r3, [sp, #8]
 8015c9e:	2200      	movs	r2, #0
 8015ca0:	701a      	strb	r2, [r3, #0]
 8015ca2:	b01c      	add	sp, #112	; 0x70
 8015ca4:	f85d eb04 	ldr.w	lr, [sp], #4
 8015ca8:	b003      	add	sp, #12
 8015caa:	4770      	bx	lr
 8015cac:	2000220c 	.word	0x2000220c
 8015cb0:	ffff0208 	.word	0xffff0208

08015cb4 <sulp>:
 8015cb4:	b570      	push	{r4, r5, r6, lr}
 8015cb6:	4604      	mov	r4, r0
 8015cb8:	460d      	mov	r5, r1
 8015cba:	ec45 4b10 	vmov	d0, r4, r5
 8015cbe:	4616      	mov	r6, r2
 8015cc0:	f002 fb08 	bl	80182d4 <__ulp>
 8015cc4:	ec51 0b10 	vmov	r0, r1, d0
 8015cc8:	b17e      	cbz	r6, 8015cea <sulp+0x36>
 8015cca:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8015cce:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	dd09      	ble.n	8015cea <sulp+0x36>
 8015cd6:	051b      	lsls	r3, r3, #20
 8015cd8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8015cdc:	2400      	movs	r4, #0
 8015cde:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8015ce2:	4622      	mov	r2, r4
 8015ce4:	462b      	mov	r3, r5
 8015ce6:	f7ea fc87 	bl	80005f8 <__aeabi_dmul>
 8015cea:	bd70      	pop	{r4, r5, r6, pc}
 8015cec:	0000      	movs	r0, r0
	...

08015cf0 <_strtod_l>:
 8015cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cf4:	461f      	mov	r7, r3
 8015cf6:	b0a1      	sub	sp, #132	; 0x84
 8015cf8:	2300      	movs	r3, #0
 8015cfa:	4681      	mov	r9, r0
 8015cfc:	4638      	mov	r0, r7
 8015cfe:	460e      	mov	r6, r1
 8015d00:	9217      	str	r2, [sp, #92]	; 0x5c
 8015d02:	931c      	str	r3, [sp, #112]	; 0x70
 8015d04:	f001 fff5 	bl	8017cf2 <__localeconv_l>
 8015d08:	4680      	mov	r8, r0
 8015d0a:	6800      	ldr	r0, [r0, #0]
 8015d0c:	f7ea fa60 	bl	80001d0 <strlen>
 8015d10:	f04f 0a00 	mov.w	sl, #0
 8015d14:	4604      	mov	r4, r0
 8015d16:	f04f 0b00 	mov.w	fp, #0
 8015d1a:	961b      	str	r6, [sp, #108]	; 0x6c
 8015d1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015d1e:	781a      	ldrb	r2, [r3, #0]
 8015d20:	2a0d      	cmp	r2, #13
 8015d22:	d832      	bhi.n	8015d8a <_strtod_l+0x9a>
 8015d24:	2a09      	cmp	r2, #9
 8015d26:	d236      	bcs.n	8015d96 <_strtod_l+0xa6>
 8015d28:	2a00      	cmp	r2, #0
 8015d2a:	d03e      	beq.n	8015daa <_strtod_l+0xba>
 8015d2c:	2300      	movs	r3, #0
 8015d2e:	930d      	str	r3, [sp, #52]	; 0x34
 8015d30:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8015d32:	782b      	ldrb	r3, [r5, #0]
 8015d34:	2b30      	cmp	r3, #48	; 0x30
 8015d36:	f040 80ac 	bne.w	8015e92 <_strtod_l+0x1a2>
 8015d3a:	786b      	ldrb	r3, [r5, #1]
 8015d3c:	2b58      	cmp	r3, #88	; 0x58
 8015d3e:	d001      	beq.n	8015d44 <_strtod_l+0x54>
 8015d40:	2b78      	cmp	r3, #120	; 0x78
 8015d42:	d167      	bne.n	8015e14 <_strtod_l+0x124>
 8015d44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015d46:	9301      	str	r3, [sp, #4]
 8015d48:	ab1c      	add	r3, sp, #112	; 0x70
 8015d4a:	9300      	str	r3, [sp, #0]
 8015d4c:	9702      	str	r7, [sp, #8]
 8015d4e:	ab1d      	add	r3, sp, #116	; 0x74
 8015d50:	4a88      	ldr	r2, [pc, #544]	; (8015f74 <_strtod_l+0x284>)
 8015d52:	a91b      	add	r1, sp, #108	; 0x6c
 8015d54:	4648      	mov	r0, r9
 8015d56:	f001 fcf2 	bl	801773e <__gethex>
 8015d5a:	f010 0407 	ands.w	r4, r0, #7
 8015d5e:	4606      	mov	r6, r0
 8015d60:	d005      	beq.n	8015d6e <_strtod_l+0x7e>
 8015d62:	2c06      	cmp	r4, #6
 8015d64:	d12b      	bne.n	8015dbe <_strtod_l+0xce>
 8015d66:	3501      	adds	r5, #1
 8015d68:	2300      	movs	r3, #0
 8015d6a:	951b      	str	r5, [sp, #108]	; 0x6c
 8015d6c:	930d      	str	r3, [sp, #52]	; 0x34
 8015d6e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	f040 859a 	bne.w	80168aa <_strtod_l+0xbba>
 8015d76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015d78:	b1e3      	cbz	r3, 8015db4 <_strtod_l+0xc4>
 8015d7a:	4652      	mov	r2, sl
 8015d7c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8015d80:	ec43 2b10 	vmov	d0, r2, r3
 8015d84:	b021      	add	sp, #132	; 0x84
 8015d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d8a:	2a2b      	cmp	r2, #43	; 0x2b
 8015d8c:	d015      	beq.n	8015dba <_strtod_l+0xca>
 8015d8e:	2a2d      	cmp	r2, #45	; 0x2d
 8015d90:	d004      	beq.n	8015d9c <_strtod_l+0xac>
 8015d92:	2a20      	cmp	r2, #32
 8015d94:	d1ca      	bne.n	8015d2c <_strtod_l+0x3c>
 8015d96:	3301      	adds	r3, #1
 8015d98:	931b      	str	r3, [sp, #108]	; 0x6c
 8015d9a:	e7bf      	b.n	8015d1c <_strtod_l+0x2c>
 8015d9c:	2201      	movs	r2, #1
 8015d9e:	920d      	str	r2, [sp, #52]	; 0x34
 8015da0:	1c5a      	adds	r2, r3, #1
 8015da2:	921b      	str	r2, [sp, #108]	; 0x6c
 8015da4:	785b      	ldrb	r3, [r3, #1]
 8015da6:	2b00      	cmp	r3, #0
 8015da8:	d1c2      	bne.n	8015d30 <_strtod_l+0x40>
 8015daa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015dac:	961b      	str	r6, [sp, #108]	; 0x6c
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	f040 8579 	bne.w	80168a6 <_strtod_l+0xbb6>
 8015db4:	4652      	mov	r2, sl
 8015db6:	465b      	mov	r3, fp
 8015db8:	e7e2      	b.n	8015d80 <_strtod_l+0x90>
 8015dba:	2200      	movs	r2, #0
 8015dbc:	e7ef      	b.n	8015d9e <_strtod_l+0xae>
 8015dbe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015dc0:	b13a      	cbz	r2, 8015dd2 <_strtod_l+0xe2>
 8015dc2:	2135      	movs	r1, #53	; 0x35
 8015dc4:	a81e      	add	r0, sp, #120	; 0x78
 8015dc6:	f002 fb7d 	bl	80184c4 <__copybits>
 8015dca:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015dcc:	4648      	mov	r0, r9
 8015dce:	f001 ffe9 	bl	8017da4 <_Bfree>
 8015dd2:	3c01      	subs	r4, #1
 8015dd4:	2c04      	cmp	r4, #4
 8015dd6:	d806      	bhi.n	8015de6 <_strtod_l+0xf6>
 8015dd8:	e8df f004 	tbb	[pc, r4]
 8015ddc:	1714030a 	.word	0x1714030a
 8015de0:	0a          	.byte	0x0a
 8015de1:	00          	.byte	0x00
 8015de2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8015de6:	0730      	lsls	r0, r6, #28
 8015de8:	d5c1      	bpl.n	8015d6e <_strtod_l+0x7e>
 8015dea:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8015dee:	e7be      	b.n	8015d6e <_strtod_l+0x7e>
 8015df0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8015df4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8015df6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8015dfa:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8015dfe:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8015e02:	e7f0      	b.n	8015de6 <_strtod_l+0xf6>
 8015e04:	f8df b170 	ldr.w	fp, [pc, #368]	; 8015f78 <_strtod_l+0x288>
 8015e08:	e7ed      	b.n	8015de6 <_strtod_l+0xf6>
 8015e0a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8015e0e:	f04f 3aff 	mov.w	sl, #4294967295
 8015e12:	e7e8      	b.n	8015de6 <_strtod_l+0xf6>
 8015e14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015e16:	1c5a      	adds	r2, r3, #1
 8015e18:	921b      	str	r2, [sp, #108]	; 0x6c
 8015e1a:	785b      	ldrb	r3, [r3, #1]
 8015e1c:	2b30      	cmp	r3, #48	; 0x30
 8015e1e:	d0f9      	beq.n	8015e14 <_strtod_l+0x124>
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	d0a4      	beq.n	8015d6e <_strtod_l+0x7e>
 8015e24:	2301      	movs	r3, #1
 8015e26:	2500      	movs	r5, #0
 8015e28:	9306      	str	r3, [sp, #24]
 8015e2a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015e2c:	9308      	str	r3, [sp, #32]
 8015e2e:	9507      	str	r5, [sp, #28]
 8015e30:	9505      	str	r5, [sp, #20]
 8015e32:	220a      	movs	r2, #10
 8015e34:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8015e36:	7807      	ldrb	r7, [r0, #0]
 8015e38:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8015e3c:	b2d9      	uxtb	r1, r3
 8015e3e:	2909      	cmp	r1, #9
 8015e40:	d929      	bls.n	8015e96 <_strtod_l+0x1a6>
 8015e42:	4622      	mov	r2, r4
 8015e44:	f8d8 1000 	ldr.w	r1, [r8]
 8015e48:	f002 fcd8 	bl	80187fc <strncmp>
 8015e4c:	2800      	cmp	r0, #0
 8015e4e:	d031      	beq.n	8015eb4 <_strtod_l+0x1c4>
 8015e50:	2000      	movs	r0, #0
 8015e52:	9c05      	ldr	r4, [sp, #20]
 8015e54:	9004      	str	r0, [sp, #16]
 8015e56:	463b      	mov	r3, r7
 8015e58:	4602      	mov	r2, r0
 8015e5a:	2b65      	cmp	r3, #101	; 0x65
 8015e5c:	d001      	beq.n	8015e62 <_strtod_l+0x172>
 8015e5e:	2b45      	cmp	r3, #69	; 0x45
 8015e60:	d114      	bne.n	8015e8c <_strtod_l+0x19c>
 8015e62:	b924      	cbnz	r4, 8015e6e <_strtod_l+0x17e>
 8015e64:	b910      	cbnz	r0, 8015e6c <_strtod_l+0x17c>
 8015e66:	9b06      	ldr	r3, [sp, #24]
 8015e68:	2b00      	cmp	r3, #0
 8015e6a:	d09e      	beq.n	8015daa <_strtod_l+0xba>
 8015e6c:	2400      	movs	r4, #0
 8015e6e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8015e70:	1c73      	adds	r3, r6, #1
 8015e72:	931b      	str	r3, [sp, #108]	; 0x6c
 8015e74:	7873      	ldrb	r3, [r6, #1]
 8015e76:	2b2b      	cmp	r3, #43	; 0x2b
 8015e78:	d078      	beq.n	8015f6c <_strtod_l+0x27c>
 8015e7a:	2b2d      	cmp	r3, #45	; 0x2d
 8015e7c:	d070      	beq.n	8015f60 <_strtod_l+0x270>
 8015e7e:	f04f 0c00 	mov.w	ip, #0
 8015e82:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8015e86:	2f09      	cmp	r7, #9
 8015e88:	d97c      	bls.n	8015f84 <_strtod_l+0x294>
 8015e8a:	961b      	str	r6, [sp, #108]	; 0x6c
 8015e8c:	f04f 0e00 	mov.w	lr, #0
 8015e90:	e09a      	b.n	8015fc8 <_strtod_l+0x2d8>
 8015e92:	2300      	movs	r3, #0
 8015e94:	e7c7      	b.n	8015e26 <_strtod_l+0x136>
 8015e96:	9905      	ldr	r1, [sp, #20]
 8015e98:	2908      	cmp	r1, #8
 8015e9a:	bfdd      	ittte	le
 8015e9c:	9907      	ldrle	r1, [sp, #28]
 8015e9e:	fb02 3301 	mlale	r3, r2, r1, r3
 8015ea2:	9307      	strle	r3, [sp, #28]
 8015ea4:	fb02 3505 	mlagt	r5, r2, r5, r3
 8015ea8:	9b05      	ldr	r3, [sp, #20]
 8015eaa:	3001      	adds	r0, #1
 8015eac:	3301      	adds	r3, #1
 8015eae:	9305      	str	r3, [sp, #20]
 8015eb0:	901b      	str	r0, [sp, #108]	; 0x6c
 8015eb2:	e7bf      	b.n	8015e34 <_strtod_l+0x144>
 8015eb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015eb6:	191a      	adds	r2, r3, r4
 8015eb8:	921b      	str	r2, [sp, #108]	; 0x6c
 8015eba:	9a05      	ldr	r2, [sp, #20]
 8015ebc:	5d1b      	ldrb	r3, [r3, r4]
 8015ebe:	2a00      	cmp	r2, #0
 8015ec0:	d037      	beq.n	8015f32 <_strtod_l+0x242>
 8015ec2:	9c05      	ldr	r4, [sp, #20]
 8015ec4:	4602      	mov	r2, r0
 8015ec6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8015eca:	2909      	cmp	r1, #9
 8015ecc:	d913      	bls.n	8015ef6 <_strtod_l+0x206>
 8015ece:	2101      	movs	r1, #1
 8015ed0:	9104      	str	r1, [sp, #16]
 8015ed2:	e7c2      	b.n	8015e5a <_strtod_l+0x16a>
 8015ed4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015ed6:	1c5a      	adds	r2, r3, #1
 8015ed8:	921b      	str	r2, [sp, #108]	; 0x6c
 8015eda:	785b      	ldrb	r3, [r3, #1]
 8015edc:	3001      	adds	r0, #1
 8015ede:	2b30      	cmp	r3, #48	; 0x30
 8015ee0:	d0f8      	beq.n	8015ed4 <_strtod_l+0x1e4>
 8015ee2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8015ee6:	2a08      	cmp	r2, #8
 8015ee8:	f200 84e4 	bhi.w	80168b4 <_strtod_l+0xbc4>
 8015eec:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8015eee:	9208      	str	r2, [sp, #32]
 8015ef0:	4602      	mov	r2, r0
 8015ef2:	2000      	movs	r0, #0
 8015ef4:	4604      	mov	r4, r0
 8015ef6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8015efa:	f100 0101 	add.w	r1, r0, #1
 8015efe:	d012      	beq.n	8015f26 <_strtod_l+0x236>
 8015f00:	440a      	add	r2, r1
 8015f02:	eb00 0c04 	add.w	ip, r0, r4
 8015f06:	4621      	mov	r1, r4
 8015f08:	270a      	movs	r7, #10
 8015f0a:	458c      	cmp	ip, r1
 8015f0c:	d113      	bne.n	8015f36 <_strtod_l+0x246>
 8015f0e:	1821      	adds	r1, r4, r0
 8015f10:	2908      	cmp	r1, #8
 8015f12:	f104 0401 	add.w	r4, r4, #1
 8015f16:	4404      	add	r4, r0
 8015f18:	dc19      	bgt.n	8015f4e <_strtod_l+0x25e>
 8015f1a:	9b07      	ldr	r3, [sp, #28]
 8015f1c:	210a      	movs	r1, #10
 8015f1e:	fb01 e303 	mla	r3, r1, r3, lr
 8015f22:	9307      	str	r3, [sp, #28]
 8015f24:	2100      	movs	r1, #0
 8015f26:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015f28:	1c58      	adds	r0, r3, #1
 8015f2a:	901b      	str	r0, [sp, #108]	; 0x6c
 8015f2c:	785b      	ldrb	r3, [r3, #1]
 8015f2e:	4608      	mov	r0, r1
 8015f30:	e7c9      	b.n	8015ec6 <_strtod_l+0x1d6>
 8015f32:	9805      	ldr	r0, [sp, #20]
 8015f34:	e7d3      	b.n	8015ede <_strtod_l+0x1ee>
 8015f36:	2908      	cmp	r1, #8
 8015f38:	f101 0101 	add.w	r1, r1, #1
 8015f3c:	dc03      	bgt.n	8015f46 <_strtod_l+0x256>
 8015f3e:	9b07      	ldr	r3, [sp, #28]
 8015f40:	437b      	muls	r3, r7
 8015f42:	9307      	str	r3, [sp, #28]
 8015f44:	e7e1      	b.n	8015f0a <_strtod_l+0x21a>
 8015f46:	2910      	cmp	r1, #16
 8015f48:	bfd8      	it	le
 8015f4a:	437d      	mulle	r5, r7
 8015f4c:	e7dd      	b.n	8015f0a <_strtod_l+0x21a>
 8015f4e:	2c10      	cmp	r4, #16
 8015f50:	bfdc      	itt	le
 8015f52:	210a      	movle	r1, #10
 8015f54:	fb01 e505 	mlale	r5, r1, r5, lr
 8015f58:	e7e4      	b.n	8015f24 <_strtod_l+0x234>
 8015f5a:	2301      	movs	r3, #1
 8015f5c:	9304      	str	r3, [sp, #16]
 8015f5e:	e781      	b.n	8015e64 <_strtod_l+0x174>
 8015f60:	f04f 0c01 	mov.w	ip, #1
 8015f64:	1cb3      	adds	r3, r6, #2
 8015f66:	931b      	str	r3, [sp, #108]	; 0x6c
 8015f68:	78b3      	ldrb	r3, [r6, #2]
 8015f6a:	e78a      	b.n	8015e82 <_strtod_l+0x192>
 8015f6c:	f04f 0c00 	mov.w	ip, #0
 8015f70:	e7f8      	b.n	8015f64 <_strtod_l+0x274>
 8015f72:	bf00      	nop
 8015f74:	0801a5b4 	.word	0x0801a5b4
 8015f78:	7ff00000 	.word	0x7ff00000
 8015f7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015f7e:	1c5f      	adds	r7, r3, #1
 8015f80:	971b      	str	r7, [sp, #108]	; 0x6c
 8015f82:	785b      	ldrb	r3, [r3, #1]
 8015f84:	2b30      	cmp	r3, #48	; 0x30
 8015f86:	d0f9      	beq.n	8015f7c <_strtod_l+0x28c>
 8015f88:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8015f8c:	2f08      	cmp	r7, #8
 8015f8e:	f63f af7d 	bhi.w	8015e8c <_strtod_l+0x19c>
 8015f92:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8015f96:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015f98:	930a      	str	r3, [sp, #40]	; 0x28
 8015f9a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015f9c:	1c5f      	adds	r7, r3, #1
 8015f9e:	971b      	str	r7, [sp, #108]	; 0x6c
 8015fa0:	785b      	ldrb	r3, [r3, #1]
 8015fa2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8015fa6:	f1b8 0f09 	cmp.w	r8, #9
 8015faa:	d937      	bls.n	801601c <_strtod_l+0x32c>
 8015fac:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015fae:	1a7f      	subs	r7, r7, r1
 8015fb0:	2f08      	cmp	r7, #8
 8015fb2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8015fb6:	dc37      	bgt.n	8016028 <_strtod_l+0x338>
 8015fb8:	45be      	cmp	lr, r7
 8015fba:	bfa8      	it	ge
 8015fbc:	46be      	movge	lr, r7
 8015fbe:	f1bc 0f00 	cmp.w	ip, #0
 8015fc2:	d001      	beq.n	8015fc8 <_strtod_l+0x2d8>
 8015fc4:	f1ce 0e00 	rsb	lr, lr, #0
 8015fc8:	2c00      	cmp	r4, #0
 8015fca:	d151      	bne.n	8016070 <_strtod_l+0x380>
 8015fcc:	2800      	cmp	r0, #0
 8015fce:	f47f aece 	bne.w	8015d6e <_strtod_l+0x7e>
 8015fd2:	9a06      	ldr	r2, [sp, #24]
 8015fd4:	2a00      	cmp	r2, #0
 8015fd6:	f47f aeca 	bne.w	8015d6e <_strtod_l+0x7e>
 8015fda:	9a04      	ldr	r2, [sp, #16]
 8015fdc:	2a00      	cmp	r2, #0
 8015fde:	f47f aee4 	bne.w	8015daa <_strtod_l+0xba>
 8015fe2:	2b4e      	cmp	r3, #78	; 0x4e
 8015fe4:	d027      	beq.n	8016036 <_strtod_l+0x346>
 8015fe6:	dc21      	bgt.n	801602c <_strtod_l+0x33c>
 8015fe8:	2b49      	cmp	r3, #73	; 0x49
 8015fea:	f47f aede 	bne.w	8015daa <_strtod_l+0xba>
 8015fee:	49a0      	ldr	r1, [pc, #640]	; (8016270 <_strtod_l+0x580>)
 8015ff0:	a81b      	add	r0, sp, #108	; 0x6c
 8015ff2:	f001 fdd7 	bl	8017ba4 <__match>
 8015ff6:	2800      	cmp	r0, #0
 8015ff8:	f43f aed7 	beq.w	8015daa <_strtod_l+0xba>
 8015ffc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015ffe:	499d      	ldr	r1, [pc, #628]	; (8016274 <_strtod_l+0x584>)
 8016000:	3b01      	subs	r3, #1
 8016002:	a81b      	add	r0, sp, #108	; 0x6c
 8016004:	931b      	str	r3, [sp, #108]	; 0x6c
 8016006:	f001 fdcd 	bl	8017ba4 <__match>
 801600a:	b910      	cbnz	r0, 8016012 <_strtod_l+0x322>
 801600c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801600e:	3301      	adds	r3, #1
 8016010:	931b      	str	r3, [sp, #108]	; 0x6c
 8016012:	f8df b274 	ldr.w	fp, [pc, #628]	; 8016288 <_strtod_l+0x598>
 8016016:	f04f 0a00 	mov.w	sl, #0
 801601a:	e6a8      	b.n	8015d6e <_strtod_l+0x7e>
 801601c:	210a      	movs	r1, #10
 801601e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8016022:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8016026:	e7b8      	b.n	8015f9a <_strtod_l+0x2aa>
 8016028:	46be      	mov	lr, r7
 801602a:	e7c8      	b.n	8015fbe <_strtod_l+0x2ce>
 801602c:	2b69      	cmp	r3, #105	; 0x69
 801602e:	d0de      	beq.n	8015fee <_strtod_l+0x2fe>
 8016030:	2b6e      	cmp	r3, #110	; 0x6e
 8016032:	f47f aeba 	bne.w	8015daa <_strtod_l+0xba>
 8016036:	4990      	ldr	r1, [pc, #576]	; (8016278 <_strtod_l+0x588>)
 8016038:	a81b      	add	r0, sp, #108	; 0x6c
 801603a:	f001 fdb3 	bl	8017ba4 <__match>
 801603e:	2800      	cmp	r0, #0
 8016040:	f43f aeb3 	beq.w	8015daa <_strtod_l+0xba>
 8016044:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016046:	781b      	ldrb	r3, [r3, #0]
 8016048:	2b28      	cmp	r3, #40	; 0x28
 801604a:	d10e      	bne.n	801606a <_strtod_l+0x37a>
 801604c:	aa1e      	add	r2, sp, #120	; 0x78
 801604e:	498b      	ldr	r1, [pc, #556]	; (801627c <_strtod_l+0x58c>)
 8016050:	a81b      	add	r0, sp, #108	; 0x6c
 8016052:	f001 fdbb 	bl	8017bcc <__hexnan>
 8016056:	2805      	cmp	r0, #5
 8016058:	d107      	bne.n	801606a <_strtod_l+0x37a>
 801605a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801605c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8016060:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8016064:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8016068:	e681      	b.n	8015d6e <_strtod_l+0x7e>
 801606a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8016290 <_strtod_l+0x5a0>
 801606e:	e7d2      	b.n	8016016 <_strtod_l+0x326>
 8016070:	ebae 0302 	sub.w	r3, lr, r2
 8016074:	9306      	str	r3, [sp, #24]
 8016076:	9b05      	ldr	r3, [sp, #20]
 8016078:	9807      	ldr	r0, [sp, #28]
 801607a:	2b00      	cmp	r3, #0
 801607c:	bf08      	it	eq
 801607e:	4623      	moveq	r3, r4
 8016080:	2c10      	cmp	r4, #16
 8016082:	9305      	str	r3, [sp, #20]
 8016084:	46a0      	mov	r8, r4
 8016086:	bfa8      	it	ge
 8016088:	f04f 0810 	movge.w	r8, #16
 801608c:	f7ea fa3a 	bl	8000504 <__aeabi_ui2d>
 8016090:	2c09      	cmp	r4, #9
 8016092:	4682      	mov	sl, r0
 8016094:	468b      	mov	fp, r1
 8016096:	dc13      	bgt.n	80160c0 <_strtod_l+0x3d0>
 8016098:	9b06      	ldr	r3, [sp, #24]
 801609a:	2b00      	cmp	r3, #0
 801609c:	f43f ae67 	beq.w	8015d6e <_strtod_l+0x7e>
 80160a0:	9b06      	ldr	r3, [sp, #24]
 80160a2:	dd7a      	ble.n	801619a <_strtod_l+0x4aa>
 80160a4:	2b16      	cmp	r3, #22
 80160a6:	dc61      	bgt.n	801616c <_strtod_l+0x47c>
 80160a8:	4a75      	ldr	r2, [pc, #468]	; (8016280 <_strtod_l+0x590>)
 80160aa:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80160ae:	e9de 0100 	ldrd	r0, r1, [lr]
 80160b2:	4652      	mov	r2, sl
 80160b4:	465b      	mov	r3, fp
 80160b6:	f7ea fa9f 	bl	80005f8 <__aeabi_dmul>
 80160ba:	4682      	mov	sl, r0
 80160bc:	468b      	mov	fp, r1
 80160be:	e656      	b.n	8015d6e <_strtod_l+0x7e>
 80160c0:	4b6f      	ldr	r3, [pc, #444]	; (8016280 <_strtod_l+0x590>)
 80160c2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80160c6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80160ca:	f7ea fa95 	bl	80005f8 <__aeabi_dmul>
 80160ce:	4606      	mov	r6, r0
 80160d0:	4628      	mov	r0, r5
 80160d2:	460f      	mov	r7, r1
 80160d4:	f7ea fa16 	bl	8000504 <__aeabi_ui2d>
 80160d8:	4602      	mov	r2, r0
 80160da:	460b      	mov	r3, r1
 80160dc:	4630      	mov	r0, r6
 80160de:	4639      	mov	r1, r7
 80160e0:	f7ea f8d4 	bl	800028c <__adddf3>
 80160e4:	2c0f      	cmp	r4, #15
 80160e6:	4682      	mov	sl, r0
 80160e8:	468b      	mov	fp, r1
 80160ea:	ddd5      	ble.n	8016098 <_strtod_l+0x3a8>
 80160ec:	9b06      	ldr	r3, [sp, #24]
 80160ee:	eba4 0808 	sub.w	r8, r4, r8
 80160f2:	4498      	add	r8, r3
 80160f4:	f1b8 0f00 	cmp.w	r8, #0
 80160f8:	f340 8096 	ble.w	8016228 <_strtod_l+0x538>
 80160fc:	f018 030f 	ands.w	r3, r8, #15
 8016100:	d00a      	beq.n	8016118 <_strtod_l+0x428>
 8016102:	495f      	ldr	r1, [pc, #380]	; (8016280 <_strtod_l+0x590>)
 8016104:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016108:	4652      	mov	r2, sl
 801610a:	465b      	mov	r3, fp
 801610c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016110:	f7ea fa72 	bl	80005f8 <__aeabi_dmul>
 8016114:	4682      	mov	sl, r0
 8016116:	468b      	mov	fp, r1
 8016118:	f038 080f 	bics.w	r8, r8, #15
 801611c:	d073      	beq.n	8016206 <_strtod_l+0x516>
 801611e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8016122:	dd47      	ble.n	80161b4 <_strtod_l+0x4c4>
 8016124:	2400      	movs	r4, #0
 8016126:	46a0      	mov	r8, r4
 8016128:	9407      	str	r4, [sp, #28]
 801612a:	9405      	str	r4, [sp, #20]
 801612c:	2322      	movs	r3, #34	; 0x22
 801612e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8016288 <_strtod_l+0x598>
 8016132:	f8c9 3000 	str.w	r3, [r9]
 8016136:	f04f 0a00 	mov.w	sl, #0
 801613a:	9b07      	ldr	r3, [sp, #28]
 801613c:	2b00      	cmp	r3, #0
 801613e:	f43f ae16 	beq.w	8015d6e <_strtod_l+0x7e>
 8016142:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016144:	4648      	mov	r0, r9
 8016146:	f001 fe2d 	bl	8017da4 <_Bfree>
 801614a:	9905      	ldr	r1, [sp, #20]
 801614c:	4648      	mov	r0, r9
 801614e:	f001 fe29 	bl	8017da4 <_Bfree>
 8016152:	4641      	mov	r1, r8
 8016154:	4648      	mov	r0, r9
 8016156:	f001 fe25 	bl	8017da4 <_Bfree>
 801615a:	9907      	ldr	r1, [sp, #28]
 801615c:	4648      	mov	r0, r9
 801615e:	f001 fe21 	bl	8017da4 <_Bfree>
 8016162:	4621      	mov	r1, r4
 8016164:	4648      	mov	r0, r9
 8016166:	f001 fe1d 	bl	8017da4 <_Bfree>
 801616a:	e600      	b.n	8015d6e <_strtod_l+0x7e>
 801616c:	9a06      	ldr	r2, [sp, #24]
 801616e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8016172:	4293      	cmp	r3, r2
 8016174:	dbba      	blt.n	80160ec <_strtod_l+0x3fc>
 8016176:	4d42      	ldr	r5, [pc, #264]	; (8016280 <_strtod_l+0x590>)
 8016178:	f1c4 040f 	rsb	r4, r4, #15
 801617c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8016180:	4652      	mov	r2, sl
 8016182:	465b      	mov	r3, fp
 8016184:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016188:	f7ea fa36 	bl	80005f8 <__aeabi_dmul>
 801618c:	9b06      	ldr	r3, [sp, #24]
 801618e:	1b1c      	subs	r4, r3, r4
 8016190:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8016194:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016198:	e78d      	b.n	80160b6 <_strtod_l+0x3c6>
 801619a:	f113 0f16 	cmn.w	r3, #22
 801619e:	dba5      	blt.n	80160ec <_strtod_l+0x3fc>
 80161a0:	4a37      	ldr	r2, [pc, #220]	; (8016280 <_strtod_l+0x590>)
 80161a2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80161a6:	e9d2 2300 	ldrd	r2, r3, [r2]
 80161aa:	4650      	mov	r0, sl
 80161ac:	4659      	mov	r1, fp
 80161ae:	f7ea fb4d 	bl	800084c <__aeabi_ddiv>
 80161b2:	e782      	b.n	80160ba <_strtod_l+0x3ca>
 80161b4:	2300      	movs	r3, #0
 80161b6:	4e33      	ldr	r6, [pc, #204]	; (8016284 <_strtod_l+0x594>)
 80161b8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80161bc:	4650      	mov	r0, sl
 80161be:	4659      	mov	r1, fp
 80161c0:	461d      	mov	r5, r3
 80161c2:	f1b8 0f01 	cmp.w	r8, #1
 80161c6:	dc21      	bgt.n	801620c <_strtod_l+0x51c>
 80161c8:	b10b      	cbz	r3, 80161ce <_strtod_l+0x4de>
 80161ca:	4682      	mov	sl, r0
 80161cc:	468b      	mov	fp, r1
 80161ce:	4b2d      	ldr	r3, [pc, #180]	; (8016284 <_strtod_l+0x594>)
 80161d0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80161d4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80161d8:	4652      	mov	r2, sl
 80161da:	465b      	mov	r3, fp
 80161dc:	e9d5 0100 	ldrd	r0, r1, [r5]
 80161e0:	f7ea fa0a 	bl	80005f8 <__aeabi_dmul>
 80161e4:	4b28      	ldr	r3, [pc, #160]	; (8016288 <_strtod_l+0x598>)
 80161e6:	460a      	mov	r2, r1
 80161e8:	400b      	ands	r3, r1
 80161ea:	4928      	ldr	r1, [pc, #160]	; (801628c <_strtod_l+0x59c>)
 80161ec:	428b      	cmp	r3, r1
 80161ee:	4682      	mov	sl, r0
 80161f0:	d898      	bhi.n	8016124 <_strtod_l+0x434>
 80161f2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80161f6:	428b      	cmp	r3, r1
 80161f8:	bf86      	itte	hi
 80161fa:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8016294 <_strtod_l+0x5a4>
 80161fe:	f04f 3aff 	movhi.w	sl, #4294967295
 8016202:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8016206:	2300      	movs	r3, #0
 8016208:	9304      	str	r3, [sp, #16]
 801620a:	e077      	b.n	80162fc <_strtod_l+0x60c>
 801620c:	f018 0f01 	tst.w	r8, #1
 8016210:	d006      	beq.n	8016220 <_strtod_l+0x530>
 8016212:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8016216:	e9d3 2300 	ldrd	r2, r3, [r3]
 801621a:	f7ea f9ed 	bl	80005f8 <__aeabi_dmul>
 801621e:	2301      	movs	r3, #1
 8016220:	3501      	adds	r5, #1
 8016222:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016226:	e7cc      	b.n	80161c2 <_strtod_l+0x4d2>
 8016228:	d0ed      	beq.n	8016206 <_strtod_l+0x516>
 801622a:	f1c8 0800 	rsb	r8, r8, #0
 801622e:	f018 020f 	ands.w	r2, r8, #15
 8016232:	d00a      	beq.n	801624a <_strtod_l+0x55a>
 8016234:	4b12      	ldr	r3, [pc, #72]	; (8016280 <_strtod_l+0x590>)
 8016236:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801623a:	4650      	mov	r0, sl
 801623c:	4659      	mov	r1, fp
 801623e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016242:	f7ea fb03 	bl	800084c <__aeabi_ddiv>
 8016246:	4682      	mov	sl, r0
 8016248:	468b      	mov	fp, r1
 801624a:	ea5f 1828 	movs.w	r8, r8, asr #4
 801624e:	d0da      	beq.n	8016206 <_strtod_l+0x516>
 8016250:	f1b8 0f1f 	cmp.w	r8, #31
 8016254:	dd20      	ble.n	8016298 <_strtod_l+0x5a8>
 8016256:	2400      	movs	r4, #0
 8016258:	46a0      	mov	r8, r4
 801625a:	9407      	str	r4, [sp, #28]
 801625c:	9405      	str	r4, [sp, #20]
 801625e:	2322      	movs	r3, #34	; 0x22
 8016260:	f04f 0a00 	mov.w	sl, #0
 8016264:	f04f 0b00 	mov.w	fp, #0
 8016268:	f8c9 3000 	str.w	r3, [r9]
 801626c:	e765      	b.n	801613a <_strtod_l+0x44a>
 801626e:	bf00      	nop
 8016270:	0801a57d 	.word	0x0801a57d
 8016274:	0801a60b 	.word	0x0801a60b
 8016278:	0801a585 	.word	0x0801a585
 801627c:	0801a5c8 	.word	0x0801a5c8
 8016280:	0801a648 	.word	0x0801a648
 8016284:	0801a620 	.word	0x0801a620
 8016288:	7ff00000 	.word	0x7ff00000
 801628c:	7ca00000 	.word	0x7ca00000
 8016290:	fff80000 	.word	0xfff80000
 8016294:	7fefffff 	.word	0x7fefffff
 8016298:	f018 0310 	ands.w	r3, r8, #16
 801629c:	bf18      	it	ne
 801629e:	236a      	movne	r3, #106	; 0x6a
 80162a0:	4da0      	ldr	r5, [pc, #640]	; (8016524 <_strtod_l+0x834>)
 80162a2:	9304      	str	r3, [sp, #16]
 80162a4:	4650      	mov	r0, sl
 80162a6:	4659      	mov	r1, fp
 80162a8:	2300      	movs	r3, #0
 80162aa:	f1b8 0f00 	cmp.w	r8, #0
 80162ae:	f300 810a 	bgt.w	80164c6 <_strtod_l+0x7d6>
 80162b2:	b10b      	cbz	r3, 80162b8 <_strtod_l+0x5c8>
 80162b4:	4682      	mov	sl, r0
 80162b6:	468b      	mov	fp, r1
 80162b8:	9b04      	ldr	r3, [sp, #16]
 80162ba:	b1bb      	cbz	r3, 80162ec <_strtod_l+0x5fc>
 80162bc:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80162c0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	4659      	mov	r1, fp
 80162c8:	dd10      	ble.n	80162ec <_strtod_l+0x5fc>
 80162ca:	2b1f      	cmp	r3, #31
 80162cc:	f340 8107 	ble.w	80164de <_strtod_l+0x7ee>
 80162d0:	2b34      	cmp	r3, #52	; 0x34
 80162d2:	bfde      	ittt	le
 80162d4:	3b20      	suble	r3, #32
 80162d6:	f04f 32ff 	movle.w	r2, #4294967295
 80162da:	fa02 f303 	lslle.w	r3, r2, r3
 80162de:	f04f 0a00 	mov.w	sl, #0
 80162e2:	bfcc      	ite	gt
 80162e4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80162e8:	ea03 0b01 	andle.w	fp, r3, r1
 80162ec:	2200      	movs	r2, #0
 80162ee:	2300      	movs	r3, #0
 80162f0:	4650      	mov	r0, sl
 80162f2:	4659      	mov	r1, fp
 80162f4:	f7ea fbe8 	bl	8000ac8 <__aeabi_dcmpeq>
 80162f8:	2800      	cmp	r0, #0
 80162fa:	d1ac      	bne.n	8016256 <_strtod_l+0x566>
 80162fc:	9b07      	ldr	r3, [sp, #28]
 80162fe:	9300      	str	r3, [sp, #0]
 8016300:	9a05      	ldr	r2, [sp, #20]
 8016302:	9908      	ldr	r1, [sp, #32]
 8016304:	4623      	mov	r3, r4
 8016306:	4648      	mov	r0, r9
 8016308:	f001 fd9e 	bl	8017e48 <__s2b>
 801630c:	9007      	str	r0, [sp, #28]
 801630e:	2800      	cmp	r0, #0
 8016310:	f43f af08 	beq.w	8016124 <_strtod_l+0x434>
 8016314:	9a06      	ldr	r2, [sp, #24]
 8016316:	9b06      	ldr	r3, [sp, #24]
 8016318:	2a00      	cmp	r2, #0
 801631a:	f1c3 0300 	rsb	r3, r3, #0
 801631e:	bfa8      	it	ge
 8016320:	2300      	movge	r3, #0
 8016322:	930e      	str	r3, [sp, #56]	; 0x38
 8016324:	2400      	movs	r4, #0
 8016326:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801632a:	9316      	str	r3, [sp, #88]	; 0x58
 801632c:	46a0      	mov	r8, r4
 801632e:	9b07      	ldr	r3, [sp, #28]
 8016330:	4648      	mov	r0, r9
 8016332:	6859      	ldr	r1, [r3, #4]
 8016334:	f001 fd02 	bl	8017d3c <_Balloc>
 8016338:	9005      	str	r0, [sp, #20]
 801633a:	2800      	cmp	r0, #0
 801633c:	f43f aef6 	beq.w	801612c <_strtod_l+0x43c>
 8016340:	9b07      	ldr	r3, [sp, #28]
 8016342:	691a      	ldr	r2, [r3, #16]
 8016344:	3202      	adds	r2, #2
 8016346:	f103 010c 	add.w	r1, r3, #12
 801634a:	0092      	lsls	r2, r2, #2
 801634c:	300c      	adds	r0, #12
 801634e:	f7fe fd35 	bl	8014dbc <memcpy>
 8016352:	aa1e      	add	r2, sp, #120	; 0x78
 8016354:	a91d      	add	r1, sp, #116	; 0x74
 8016356:	ec4b ab10 	vmov	d0, sl, fp
 801635a:	4648      	mov	r0, r9
 801635c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8016360:	f002 f82e 	bl	80183c0 <__d2b>
 8016364:	901c      	str	r0, [sp, #112]	; 0x70
 8016366:	2800      	cmp	r0, #0
 8016368:	f43f aee0 	beq.w	801612c <_strtod_l+0x43c>
 801636c:	2101      	movs	r1, #1
 801636e:	4648      	mov	r0, r9
 8016370:	f001 fdf6 	bl	8017f60 <__i2b>
 8016374:	4680      	mov	r8, r0
 8016376:	2800      	cmp	r0, #0
 8016378:	f43f aed8 	beq.w	801612c <_strtod_l+0x43c>
 801637c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801637e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016380:	2e00      	cmp	r6, #0
 8016382:	bfab      	itete	ge
 8016384:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8016386:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8016388:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 801638a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 801638c:	bfac      	ite	ge
 801638e:	18f7      	addge	r7, r6, r3
 8016390:	1b9d      	sublt	r5, r3, r6
 8016392:	9b04      	ldr	r3, [sp, #16]
 8016394:	1af6      	subs	r6, r6, r3
 8016396:	4416      	add	r6, r2
 8016398:	4b63      	ldr	r3, [pc, #396]	; (8016528 <_strtod_l+0x838>)
 801639a:	3e01      	subs	r6, #1
 801639c:	429e      	cmp	r6, r3
 801639e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80163a2:	f280 80af 	bge.w	8016504 <_strtod_l+0x814>
 80163a6:	1b9b      	subs	r3, r3, r6
 80163a8:	2b1f      	cmp	r3, #31
 80163aa:	eba2 0203 	sub.w	r2, r2, r3
 80163ae:	f04f 0101 	mov.w	r1, #1
 80163b2:	f300 809b 	bgt.w	80164ec <_strtod_l+0x7fc>
 80163b6:	fa01 f303 	lsl.w	r3, r1, r3
 80163ba:	930f      	str	r3, [sp, #60]	; 0x3c
 80163bc:	2300      	movs	r3, #0
 80163be:	930a      	str	r3, [sp, #40]	; 0x28
 80163c0:	18be      	adds	r6, r7, r2
 80163c2:	9b04      	ldr	r3, [sp, #16]
 80163c4:	42b7      	cmp	r7, r6
 80163c6:	4415      	add	r5, r2
 80163c8:	441d      	add	r5, r3
 80163ca:	463b      	mov	r3, r7
 80163cc:	bfa8      	it	ge
 80163ce:	4633      	movge	r3, r6
 80163d0:	42ab      	cmp	r3, r5
 80163d2:	bfa8      	it	ge
 80163d4:	462b      	movge	r3, r5
 80163d6:	2b00      	cmp	r3, #0
 80163d8:	bfc2      	ittt	gt
 80163da:	1af6      	subgt	r6, r6, r3
 80163dc:	1aed      	subgt	r5, r5, r3
 80163de:	1aff      	subgt	r7, r7, r3
 80163e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80163e2:	b1bb      	cbz	r3, 8016414 <_strtod_l+0x724>
 80163e4:	4641      	mov	r1, r8
 80163e6:	461a      	mov	r2, r3
 80163e8:	4648      	mov	r0, r9
 80163ea:	f001 fe59 	bl	80180a0 <__pow5mult>
 80163ee:	4680      	mov	r8, r0
 80163f0:	2800      	cmp	r0, #0
 80163f2:	f43f ae9b 	beq.w	801612c <_strtod_l+0x43c>
 80163f6:	4601      	mov	r1, r0
 80163f8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80163fa:	4648      	mov	r0, r9
 80163fc:	f001 fdb9 	bl	8017f72 <__multiply>
 8016400:	900c      	str	r0, [sp, #48]	; 0x30
 8016402:	2800      	cmp	r0, #0
 8016404:	f43f ae92 	beq.w	801612c <_strtod_l+0x43c>
 8016408:	991c      	ldr	r1, [sp, #112]	; 0x70
 801640a:	4648      	mov	r0, r9
 801640c:	f001 fcca 	bl	8017da4 <_Bfree>
 8016410:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016412:	931c      	str	r3, [sp, #112]	; 0x70
 8016414:	2e00      	cmp	r6, #0
 8016416:	dc7a      	bgt.n	801650e <_strtod_l+0x81e>
 8016418:	9b06      	ldr	r3, [sp, #24]
 801641a:	2b00      	cmp	r3, #0
 801641c:	dd08      	ble.n	8016430 <_strtod_l+0x740>
 801641e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016420:	9905      	ldr	r1, [sp, #20]
 8016422:	4648      	mov	r0, r9
 8016424:	f001 fe3c 	bl	80180a0 <__pow5mult>
 8016428:	9005      	str	r0, [sp, #20]
 801642a:	2800      	cmp	r0, #0
 801642c:	f43f ae7e 	beq.w	801612c <_strtod_l+0x43c>
 8016430:	2d00      	cmp	r5, #0
 8016432:	dd08      	ble.n	8016446 <_strtod_l+0x756>
 8016434:	462a      	mov	r2, r5
 8016436:	9905      	ldr	r1, [sp, #20]
 8016438:	4648      	mov	r0, r9
 801643a:	f001 fe7f 	bl	801813c <__lshift>
 801643e:	9005      	str	r0, [sp, #20]
 8016440:	2800      	cmp	r0, #0
 8016442:	f43f ae73 	beq.w	801612c <_strtod_l+0x43c>
 8016446:	2f00      	cmp	r7, #0
 8016448:	dd08      	ble.n	801645c <_strtod_l+0x76c>
 801644a:	4641      	mov	r1, r8
 801644c:	463a      	mov	r2, r7
 801644e:	4648      	mov	r0, r9
 8016450:	f001 fe74 	bl	801813c <__lshift>
 8016454:	4680      	mov	r8, r0
 8016456:	2800      	cmp	r0, #0
 8016458:	f43f ae68 	beq.w	801612c <_strtod_l+0x43c>
 801645c:	9a05      	ldr	r2, [sp, #20]
 801645e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016460:	4648      	mov	r0, r9
 8016462:	f001 fed9 	bl	8018218 <__mdiff>
 8016466:	4604      	mov	r4, r0
 8016468:	2800      	cmp	r0, #0
 801646a:	f43f ae5f 	beq.w	801612c <_strtod_l+0x43c>
 801646e:	68c3      	ldr	r3, [r0, #12]
 8016470:	930c      	str	r3, [sp, #48]	; 0x30
 8016472:	2300      	movs	r3, #0
 8016474:	60c3      	str	r3, [r0, #12]
 8016476:	4641      	mov	r1, r8
 8016478:	f001 feb4 	bl	80181e4 <__mcmp>
 801647c:	2800      	cmp	r0, #0
 801647e:	da55      	bge.n	801652c <_strtod_l+0x83c>
 8016480:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016482:	b9e3      	cbnz	r3, 80164be <_strtod_l+0x7ce>
 8016484:	f1ba 0f00 	cmp.w	sl, #0
 8016488:	d119      	bne.n	80164be <_strtod_l+0x7ce>
 801648a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801648e:	b9b3      	cbnz	r3, 80164be <_strtod_l+0x7ce>
 8016490:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016494:	0d1b      	lsrs	r3, r3, #20
 8016496:	051b      	lsls	r3, r3, #20
 8016498:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801649c:	d90f      	bls.n	80164be <_strtod_l+0x7ce>
 801649e:	6963      	ldr	r3, [r4, #20]
 80164a0:	b913      	cbnz	r3, 80164a8 <_strtod_l+0x7b8>
 80164a2:	6923      	ldr	r3, [r4, #16]
 80164a4:	2b01      	cmp	r3, #1
 80164a6:	dd0a      	ble.n	80164be <_strtod_l+0x7ce>
 80164a8:	4621      	mov	r1, r4
 80164aa:	2201      	movs	r2, #1
 80164ac:	4648      	mov	r0, r9
 80164ae:	f001 fe45 	bl	801813c <__lshift>
 80164b2:	4641      	mov	r1, r8
 80164b4:	4604      	mov	r4, r0
 80164b6:	f001 fe95 	bl	80181e4 <__mcmp>
 80164ba:	2800      	cmp	r0, #0
 80164bc:	dc67      	bgt.n	801658e <_strtod_l+0x89e>
 80164be:	9b04      	ldr	r3, [sp, #16]
 80164c0:	2b00      	cmp	r3, #0
 80164c2:	d171      	bne.n	80165a8 <_strtod_l+0x8b8>
 80164c4:	e63d      	b.n	8016142 <_strtod_l+0x452>
 80164c6:	f018 0f01 	tst.w	r8, #1
 80164ca:	d004      	beq.n	80164d6 <_strtod_l+0x7e6>
 80164cc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80164d0:	f7ea f892 	bl	80005f8 <__aeabi_dmul>
 80164d4:	2301      	movs	r3, #1
 80164d6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80164da:	3508      	adds	r5, #8
 80164dc:	e6e5      	b.n	80162aa <_strtod_l+0x5ba>
 80164de:	f04f 32ff 	mov.w	r2, #4294967295
 80164e2:	fa02 f303 	lsl.w	r3, r2, r3
 80164e6:	ea03 0a0a 	and.w	sl, r3, sl
 80164ea:	e6ff      	b.n	80162ec <_strtod_l+0x5fc>
 80164ec:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80164f0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80164f4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80164f8:	36e2      	adds	r6, #226	; 0xe2
 80164fa:	fa01 f306 	lsl.w	r3, r1, r6
 80164fe:	930a      	str	r3, [sp, #40]	; 0x28
 8016500:	910f      	str	r1, [sp, #60]	; 0x3c
 8016502:	e75d      	b.n	80163c0 <_strtod_l+0x6d0>
 8016504:	2300      	movs	r3, #0
 8016506:	930a      	str	r3, [sp, #40]	; 0x28
 8016508:	2301      	movs	r3, #1
 801650a:	930f      	str	r3, [sp, #60]	; 0x3c
 801650c:	e758      	b.n	80163c0 <_strtod_l+0x6d0>
 801650e:	4632      	mov	r2, r6
 8016510:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016512:	4648      	mov	r0, r9
 8016514:	f001 fe12 	bl	801813c <__lshift>
 8016518:	901c      	str	r0, [sp, #112]	; 0x70
 801651a:	2800      	cmp	r0, #0
 801651c:	f47f af7c 	bne.w	8016418 <_strtod_l+0x728>
 8016520:	e604      	b.n	801612c <_strtod_l+0x43c>
 8016522:	bf00      	nop
 8016524:	0801a5e0 	.word	0x0801a5e0
 8016528:	fffffc02 	.word	0xfffffc02
 801652c:	465d      	mov	r5, fp
 801652e:	f040 8086 	bne.w	801663e <_strtod_l+0x94e>
 8016532:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016534:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016538:	b32a      	cbz	r2, 8016586 <_strtod_l+0x896>
 801653a:	4aaf      	ldr	r2, [pc, #700]	; (80167f8 <_strtod_l+0xb08>)
 801653c:	4293      	cmp	r3, r2
 801653e:	d153      	bne.n	80165e8 <_strtod_l+0x8f8>
 8016540:	9b04      	ldr	r3, [sp, #16]
 8016542:	4650      	mov	r0, sl
 8016544:	b1d3      	cbz	r3, 801657c <_strtod_l+0x88c>
 8016546:	4aad      	ldr	r2, [pc, #692]	; (80167fc <_strtod_l+0xb0c>)
 8016548:	402a      	ands	r2, r5
 801654a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801654e:	f04f 31ff 	mov.w	r1, #4294967295
 8016552:	d816      	bhi.n	8016582 <_strtod_l+0x892>
 8016554:	0d12      	lsrs	r2, r2, #20
 8016556:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801655a:	fa01 f303 	lsl.w	r3, r1, r3
 801655e:	4298      	cmp	r0, r3
 8016560:	d142      	bne.n	80165e8 <_strtod_l+0x8f8>
 8016562:	4ba7      	ldr	r3, [pc, #668]	; (8016800 <_strtod_l+0xb10>)
 8016564:	429d      	cmp	r5, r3
 8016566:	d102      	bne.n	801656e <_strtod_l+0x87e>
 8016568:	3001      	adds	r0, #1
 801656a:	f43f addf 	beq.w	801612c <_strtod_l+0x43c>
 801656e:	4ba3      	ldr	r3, [pc, #652]	; (80167fc <_strtod_l+0xb0c>)
 8016570:	402b      	ands	r3, r5
 8016572:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8016576:	f04f 0a00 	mov.w	sl, #0
 801657a:	e7a0      	b.n	80164be <_strtod_l+0x7ce>
 801657c:	f04f 33ff 	mov.w	r3, #4294967295
 8016580:	e7ed      	b.n	801655e <_strtod_l+0x86e>
 8016582:	460b      	mov	r3, r1
 8016584:	e7eb      	b.n	801655e <_strtod_l+0x86e>
 8016586:	bb7b      	cbnz	r3, 80165e8 <_strtod_l+0x8f8>
 8016588:	f1ba 0f00 	cmp.w	sl, #0
 801658c:	d12c      	bne.n	80165e8 <_strtod_l+0x8f8>
 801658e:	9904      	ldr	r1, [sp, #16]
 8016590:	4a9a      	ldr	r2, [pc, #616]	; (80167fc <_strtod_l+0xb0c>)
 8016592:	465b      	mov	r3, fp
 8016594:	b1f1      	cbz	r1, 80165d4 <_strtod_l+0x8e4>
 8016596:	ea02 010b 	and.w	r1, r2, fp
 801659a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801659e:	dc19      	bgt.n	80165d4 <_strtod_l+0x8e4>
 80165a0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80165a4:	f77f ae5b 	ble.w	801625e <_strtod_l+0x56e>
 80165a8:	4a96      	ldr	r2, [pc, #600]	; (8016804 <_strtod_l+0xb14>)
 80165aa:	2300      	movs	r3, #0
 80165ac:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80165b0:	4650      	mov	r0, sl
 80165b2:	4659      	mov	r1, fp
 80165b4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80165b8:	f7ea f81e 	bl	80005f8 <__aeabi_dmul>
 80165bc:	4682      	mov	sl, r0
 80165be:	468b      	mov	fp, r1
 80165c0:	2900      	cmp	r1, #0
 80165c2:	f47f adbe 	bne.w	8016142 <_strtod_l+0x452>
 80165c6:	2800      	cmp	r0, #0
 80165c8:	f47f adbb 	bne.w	8016142 <_strtod_l+0x452>
 80165cc:	2322      	movs	r3, #34	; 0x22
 80165ce:	f8c9 3000 	str.w	r3, [r9]
 80165d2:	e5b6      	b.n	8016142 <_strtod_l+0x452>
 80165d4:	4013      	ands	r3, r2
 80165d6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80165da:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80165de:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80165e2:	f04f 3aff 	mov.w	sl, #4294967295
 80165e6:	e76a      	b.n	80164be <_strtod_l+0x7ce>
 80165e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80165ea:	b193      	cbz	r3, 8016612 <_strtod_l+0x922>
 80165ec:	422b      	tst	r3, r5
 80165ee:	f43f af66 	beq.w	80164be <_strtod_l+0x7ce>
 80165f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80165f4:	9a04      	ldr	r2, [sp, #16]
 80165f6:	4650      	mov	r0, sl
 80165f8:	4659      	mov	r1, fp
 80165fa:	b173      	cbz	r3, 801661a <_strtod_l+0x92a>
 80165fc:	f7ff fb5a 	bl	8015cb4 <sulp>
 8016600:	4602      	mov	r2, r0
 8016602:	460b      	mov	r3, r1
 8016604:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016608:	f7e9 fe40 	bl	800028c <__adddf3>
 801660c:	4682      	mov	sl, r0
 801660e:	468b      	mov	fp, r1
 8016610:	e755      	b.n	80164be <_strtod_l+0x7ce>
 8016612:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016614:	ea13 0f0a 	tst.w	r3, sl
 8016618:	e7e9      	b.n	80165ee <_strtod_l+0x8fe>
 801661a:	f7ff fb4b 	bl	8015cb4 <sulp>
 801661e:	4602      	mov	r2, r0
 8016620:	460b      	mov	r3, r1
 8016622:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016626:	f7e9 fe2f 	bl	8000288 <__aeabi_dsub>
 801662a:	2200      	movs	r2, #0
 801662c:	2300      	movs	r3, #0
 801662e:	4682      	mov	sl, r0
 8016630:	468b      	mov	fp, r1
 8016632:	f7ea fa49 	bl	8000ac8 <__aeabi_dcmpeq>
 8016636:	2800      	cmp	r0, #0
 8016638:	f47f ae11 	bne.w	801625e <_strtod_l+0x56e>
 801663c:	e73f      	b.n	80164be <_strtod_l+0x7ce>
 801663e:	4641      	mov	r1, r8
 8016640:	4620      	mov	r0, r4
 8016642:	f001 ff0c 	bl	801845e <__ratio>
 8016646:	ec57 6b10 	vmov	r6, r7, d0
 801664a:	2200      	movs	r2, #0
 801664c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016650:	ee10 0a10 	vmov	r0, s0
 8016654:	4639      	mov	r1, r7
 8016656:	f7ea fa4b 	bl	8000af0 <__aeabi_dcmple>
 801665a:	2800      	cmp	r0, #0
 801665c:	d077      	beq.n	801674e <_strtod_l+0xa5e>
 801665e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016660:	2b00      	cmp	r3, #0
 8016662:	d04a      	beq.n	80166fa <_strtod_l+0xa0a>
 8016664:	4b68      	ldr	r3, [pc, #416]	; (8016808 <_strtod_l+0xb18>)
 8016666:	2200      	movs	r2, #0
 8016668:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801666c:	4f66      	ldr	r7, [pc, #408]	; (8016808 <_strtod_l+0xb18>)
 801666e:	2600      	movs	r6, #0
 8016670:	4b62      	ldr	r3, [pc, #392]	; (80167fc <_strtod_l+0xb0c>)
 8016672:	402b      	ands	r3, r5
 8016674:	930f      	str	r3, [sp, #60]	; 0x3c
 8016676:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016678:	4b64      	ldr	r3, [pc, #400]	; (801680c <_strtod_l+0xb1c>)
 801667a:	429a      	cmp	r2, r3
 801667c:	f040 80ce 	bne.w	801681c <_strtod_l+0xb2c>
 8016680:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016684:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016688:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 801668c:	ec4b ab10 	vmov	d0, sl, fp
 8016690:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8016694:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8016698:	f001 fe1c 	bl	80182d4 <__ulp>
 801669c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80166a0:	ec53 2b10 	vmov	r2, r3, d0
 80166a4:	f7e9 ffa8 	bl	80005f8 <__aeabi_dmul>
 80166a8:	4652      	mov	r2, sl
 80166aa:	465b      	mov	r3, fp
 80166ac:	f7e9 fdee 	bl	800028c <__adddf3>
 80166b0:	460b      	mov	r3, r1
 80166b2:	4952      	ldr	r1, [pc, #328]	; (80167fc <_strtod_l+0xb0c>)
 80166b4:	4a56      	ldr	r2, [pc, #344]	; (8016810 <_strtod_l+0xb20>)
 80166b6:	4019      	ands	r1, r3
 80166b8:	4291      	cmp	r1, r2
 80166ba:	4682      	mov	sl, r0
 80166bc:	d95b      	bls.n	8016776 <_strtod_l+0xa86>
 80166be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80166c0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80166c4:	4293      	cmp	r3, r2
 80166c6:	d103      	bne.n	80166d0 <_strtod_l+0x9e0>
 80166c8:	9b08      	ldr	r3, [sp, #32]
 80166ca:	3301      	adds	r3, #1
 80166cc:	f43f ad2e 	beq.w	801612c <_strtod_l+0x43c>
 80166d0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8016800 <_strtod_l+0xb10>
 80166d4:	f04f 3aff 	mov.w	sl, #4294967295
 80166d8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80166da:	4648      	mov	r0, r9
 80166dc:	f001 fb62 	bl	8017da4 <_Bfree>
 80166e0:	9905      	ldr	r1, [sp, #20]
 80166e2:	4648      	mov	r0, r9
 80166e4:	f001 fb5e 	bl	8017da4 <_Bfree>
 80166e8:	4641      	mov	r1, r8
 80166ea:	4648      	mov	r0, r9
 80166ec:	f001 fb5a 	bl	8017da4 <_Bfree>
 80166f0:	4621      	mov	r1, r4
 80166f2:	4648      	mov	r0, r9
 80166f4:	f001 fb56 	bl	8017da4 <_Bfree>
 80166f8:	e619      	b.n	801632e <_strtod_l+0x63e>
 80166fa:	f1ba 0f00 	cmp.w	sl, #0
 80166fe:	d11a      	bne.n	8016736 <_strtod_l+0xa46>
 8016700:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016704:	b9eb      	cbnz	r3, 8016742 <_strtod_l+0xa52>
 8016706:	2200      	movs	r2, #0
 8016708:	4b3f      	ldr	r3, [pc, #252]	; (8016808 <_strtod_l+0xb18>)
 801670a:	4630      	mov	r0, r6
 801670c:	4639      	mov	r1, r7
 801670e:	f7ea f9e5 	bl	8000adc <__aeabi_dcmplt>
 8016712:	b9c8      	cbnz	r0, 8016748 <_strtod_l+0xa58>
 8016714:	4630      	mov	r0, r6
 8016716:	4639      	mov	r1, r7
 8016718:	2200      	movs	r2, #0
 801671a:	4b3e      	ldr	r3, [pc, #248]	; (8016814 <_strtod_l+0xb24>)
 801671c:	f7e9 ff6c 	bl	80005f8 <__aeabi_dmul>
 8016720:	4606      	mov	r6, r0
 8016722:	460f      	mov	r7, r1
 8016724:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8016728:	9618      	str	r6, [sp, #96]	; 0x60
 801672a:	9319      	str	r3, [sp, #100]	; 0x64
 801672c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8016730:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016734:	e79c      	b.n	8016670 <_strtod_l+0x980>
 8016736:	f1ba 0f01 	cmp.w	sl, #1
 801673a:	d102      	bne.n	8016742 <_strtod_l+0xa52>
 801673c:	2d00      	cmp	r5, #0
 801673e:	f43f ad8e 	beq.w	801625e <_strtod_l+0x56e>
 8016742:	2200      	movs	r2, #0
 8016744:	4b34      	ldr	r3, [pc, #208]	; (8016818 <_strtod_l+0xb28>)
 8016746:	e78f      	b.n	8016668 <_strtod_l+0x978>
 8016748:	2600      	movs	r6, #0
 801674a:	4f32      	ldr	r7, [pc, #200]	; (8016814 <_strtod_l+0xb24>)
 801674c:	e7ea      	b.n	8016724 <_strtod_l+0xa34>
 801674e:	4b31      	ldr	r3, [pc, #196]	; (8016814 <_strtod_l+0xb24>)
 8016750:	4630      	mov	r0, r6
 8016752:	4639      	mov	r1, r7
 8016754:	2200      	movs	r2, #0
 8016756:	f7e9 ff4f 	bl	80005f8 <__aeabi_dmul>
 801675a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801675c:	4606      	mov	r6, r0
 801675e:	460f      	mov	r7, r1
 8016760:	b933      	cbnz	r3, 8016770 <_strtod_l+0xa80>
 8016762:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016766:	9010      	str	r0, [sp, #64]	; 0x40
 8016768:	9311      	str	r3, [sp, #68]	; 0x44
 801676a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801676e:	e7df      	b.n	8016730 <_strtod_l+0xa40>
 8016770:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8016774:	e7f9      	b.n	801676a <_strtod_l+0xa7a>
 8016776:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801677a:	9b04      	ldr	r3, [sp, #16]
 801677c:	2b00      	cmp	r3, #0
 801677e:	d1ab      	bne.n	80166d8 <_strtod_l+0x9e8>
 8016780:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016784:	0d1b      	lsrs	r3, r3, #20
 8016786:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016788:	051b      	lsls	r3, r3, #20
 801678a:	429a      	cmp	r2, r3
 801678c:	465d      	mov	r5, fp
 801678e:	d1a3      	bne.n	80166d8 <_strtod_l+0x9e8>
 8016790:	4639      	mov	r1, r7
 8016792:	4630      	mov	r0, r6
 8016794:	f7ea f9e0 	bl	8000b58 <__aeabi_d2iz>
 8016798:	f7e9 fec4 	bl	8000524 <__aeabi_i2d>
 801679c:	460b      	mov	r3, r1
 801679e:	4602      	mov	r2, r0
 80167a0:	4639      	mov	r1, r7
 80167a2:	4630      	mov	r0, r6
 80167a4:	f7e9 fd70 	bl	8000288 <__aeabi_dsub>
 80167a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80167aa:	4606      	mov	r6, r0
 80167ac:	460f      	mov	r7, r1
 80167ae:	b933      	cbnz	r3, 80167be <_strtod_l+0xace>
 80167b0:	f1ba 0f00 	cmp.w	sl, #0
 80167b4:	d103      	bne.n	80167be <_strtod_l+0xace>
 80167b6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80167ba:	2d00      	cmp	r5, #0
 80167bc:	d06d      	beq.n	801689a <_strtod_l+0xbaa>
 80167be:	a30a      	add	r3, pc, #40	; (adr r3, 80167e8 <_strtod_l+0xaf8>)
 80167c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167c4:	4630      	mov	r0, r6
 80167c6:	4639      	mov	r1, r7
 80167c8:	f7ea f988 	bl	8000adc <__aeabi_dcmplt>
 80167cc:	2800      	cmp	r0, #0
 80167ce:	f47f acb8 	bne.w	8016142 <_strtod_l+0x452>
 80167d2:	a307      	add	r3, pc, #28	; (adr r3, 80167f0 <_strtod_l+0xb00>)
 80167d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167d8:	4630      	mov	r0, r6
 80167da:	4639      	mov	r1, r7
 80167dc:	f7ea f99c 	bl	8000b18 <__aeabi_dcmpgt>
 80167e0:	2800      	cmp	r0, #0
 80167e2:	f43f af79 	beq.w	80166d8 <_strtod_l+0x9e8>
 80167e6:	e4ac      	b.n	8016142 <_strtod_l+0x452>
 80167e8:	94a03595 	.word	0x94a03595
 80167ec:	3fdfffff 	.word	0x3fdfffff
 80167f0:	35afe535 	.word	0x35afe535
 80167f4:	3fe00000 	.word	0x3fe00000
 80167f8:	000fffff 	.word	0x000fffff
 80167fc:	7ff00000 	.word	0x7ff00000
 8016800:	7fefffff 	.word	0x7fefffff
 8016804:	39500000 	.word	0x39500000
 8016808:	3ff00000 	.word	0x3ff00000
 801680c:	7fe00000 	.word	0x7fe00000
 8016810:	7c9fffff 	.word	0x7c9fffff
 8016814:	3fe00000 	.word	0x3fe00000
 8016818:	bff00000 	.word	0xbff00000
 801681c:	9b04      	ldr	r3, [sp, #16]
 801681e:	b333      	cbz	r3, 801686e <_strtod_l+0xb7e>
 8016820:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016822:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8016826:	d822      	bhi.n	801686e <_strtod_l+0xb7e>
 8016828:	a327      	add	r3, pc, #156	; (adr r3, 80168c8 <_strtod_l+0xbd8>)
 801682a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801682e:	4630      	mov	r0, r6
 8016830:	4639      	mov	r1, r7
 8016832:	f7ea f95d 	bl	8000af0 <__aeabi_dcmple>
 8016836:	b1a0      	cbz	r0, 8016862 <_strtod_l+0xb72>
 8016838:	4639      	mov	r1, r7
 801683a:	4630      	mov	r0, r6
 801683c:	f7ea f9b4 	bl	8000ba8 <__aeabi_d2uiz>
 8016840:	2800      	cmp	r0, #0
 8016842:	bf08      	it	eq
 8016844:	2001      	moveq	r0, #1
 8016846:	f7e9 fe5d 	bl	8000504 <__aeabi_ui2d>
 801684a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801684c:	4606      	mov	r6, r0
 801684e:	460f      	mov	r7, r1
 8016850:	bb03      	cbnz	r3, 8016894 <_strtod_l+0xba4>
 8016852:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016856:	9012      	str	r0, [sp, #72]	; 0x48
 8016858:	9313      	str	r3, [sp, #76]	; 0x4c
 801685a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801685e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016862:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016864:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016866:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801686a:	1a9b      	subs	r3, r3, r2
 801686c:	930b      	str	r3, [sp, #44]	; 0x2c
 801686e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8016872:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8016876:	f001 fd2d 	bl	80182d4 <__ulp>
 801687a:	4650      	mov	r0, sl
 801687c:	ec53 2b10 	vmov	r2, r3, d0
 8016880:	4659      	mov	r1, fp
 8016882:	f7e9 feb9 	bl	80005f8 <__aeabi_dmul>
 8016886:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801688a:	f7e9 fcff 	bl	800028c <__adddf3>
 801688e:	4682      	mov	sl, r0
 8016890:	468b      	mov	fp, r1
 8016892:	e772      	b.n	801677a <_strtod_l+0xa8a>
 8016894:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8016898:	e7df      	b.n	801685a <_strtod_l+0xb6a>
 801689a:	a30d      	add	r3, pc, #52	; (adr r3, 80168d0 <_strtod_l+0xbe0>)
 801689c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168a0:	f7ea f91c 	bl	8000adc <__aeabi_dcmplt>
 80168a4:	e79c      	b.n	80167e0 <_strtod_l+0xaf0>
 80168a6:	2300      	movs	r3, #0
 80168a8:	930d      	str	r3, [sp, #52]	; 0x34
 80168aa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80168ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80168ae:	6013      	str	r3, [r2, #0]
 80168b0:	f7ff ba61 	b.w	8015d76 <_strtod_l+0x86>
 80168b4:	2b65      	cmp	r3, #101	; 0x65
 80168b6:	f04f 0200 	mov.w	r2, #0
 80168ba:	f43f ab4e 	beq.w	8015f5a <_strtod_l+0x26a>
 80168be:	2101      	movs	r1, #1
 80168c0:	4614      	mov	r4, r2
 80168c2:	9104      	str	r1, [sp, #16]
 80168c4:	f7ff bacb 	b.w	8015e5e <_strtod_l+0x16e>
 80168c8:	ffc00000 	.word	0xffc00000
 80168cc:	41dfffff 	.word	0x41dfffff
 80168d0:	94a03595 	.word	0x94a03595
 80168d4:	3fcfffff 	.word	0x3fcfffff

080168d8 <_strtod_r>:
 80168d8:	4b05      	ldr	r3, [pc, #20]	; (80168f0 <_strtod_r+0x18>)
 80168da:	681b      	ldr	r3, [r3, #0]
 80168dc:	b410      	push	{r4}
 80168de:	6a1b      	ldr	r3, [r3, #32]
 80168e0:	4c04      	ldr	r4, [pc, #16]	; (80168f4 <_strtod_r+0x1c>)
 80168e2:	2b00      	cmp	r3, #0
 80168e4:	bf08      	it	eq
 80168e6:	4623      	moveq	r3, r4
 80168e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80168ec:	f7ff ba00 	b.w	8015cf0 <_strtod_l>
 80168f0:	2000220c 	.word	0x2000220c
 80168f4:	20002270 	.word	0x20002270

080168f8 <_strtol_l.isra.0>:
 80168f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80168fc:	4680      	mov	r8, r0
 80168fe:	4689      	mov	r9, r1
 8016900:	4692      	mov	sl, r2
 8016902:	461e      	mov	r6, r3
 8016904:	460f      	mov	r7, r1
 8016906:	463d      	mov	r5, r7
 8016908:	9808      	ldr	r0, [sp, #32]
 801690a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801690e:	f001 f9ed 	bl	8017cec <__locale_ctype_ptr_l>
 8016912:	4420      	add	r0, r4
 8016914:	7843      	ldrb	r3, [r0, #1]
 8016916:	f013 0308 	ands.w	r3, r3, #8
 801691a:	d132      	bne.n	8016982 <_strtol_l.isra.0+0x8a>
 801691c:	2c2d      	cmp	r4, #45	; 0x2d
 801691e:	d132      	bne.n	8016986 <_strtol_l.isra.0+0x8e>
 8016920:	787c      	ldrb	r4, [r7, #1]
 8016922:	1cbd      	adds	r5, r7, #2
 8016924:	2201      	movs	r2, #1
 8016926:	2e00      	cmp	r6, #0
 8016928:	d05d      	beq.n	80169e6 <_strtol_l.isra.0+0xee>
 801692a:	2e10      	cmp	r6, #16
 801692c:	d109      	bne.n	8016942 <_strtol_l.isra.0+0x4a>
 801692e:	2c30      	cmp	r4, #48	; 0x30
 8016930:	d107      	bne.n	8016942 <_strtol_l.isra.0+0x4a>
 8016932:	782b      	ldrb	r3, [r5, #0]
 8016934:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016938:	2b58      	cmp	r3, #88	; 0x58
 801693a:	d14f      	bne.n	80169dc <_strtol_l.isra.0+0xe4>
 801693c:	786c      	ldrb	r4, [r5, #1]
 801693e:	2610      	movs	r6, #16
 8016940:	3502      	adds	r5, #2
 8016942:	2a00      	cmp	r2, #0
 8016944:	bf14      	ite	ne
 8016946:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801694a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801694e:	2700      	movs	r7, #0
 8016950:	fbb1 fcf6 	udiv	ip, r1, r6
 8016954:	4638      	mov	r0, r7
 8016956:	fb06 1e1c 	mls	lr, r6, ip, r1
 801695a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801695e:	2b09      	cmp	r3, #9
 8016960:	d817      	bhi.n	8016992 <_strtol_l.isra.0+0x9a>
 8016962:	461c      	mov	r4, r3
 8016964:	42a6      	cmp	r6, r4
 8016966:	dd23      	ble.n	80169b0 <_strtol_l.isra.0+0xb8>
 8016968:	1c7b      	adds	r3, r7, #1
 801696a:	d007      	beq.n	801697c <_strtol_l.isra.0+0x84>
 801696c:	4584      	cmp	ip, r0
 801696e:	d31c      	bcc.n	80169aa <_strtol_l.isra.0+0xb2>
 8016970:	d101      	bne.n	8016976 <_strtol_l.isra.0+0x7e>
 8016972:	45a6      	cmp	lr, r4
 8016974:	db19      	blt.n	80169aa <_strtol_l.isra.0+0xb2>
 8016976:	fb00 4006 	mla	r0, r0, r6, r4
 801697a:	2701      	movs	r7, #1
 801697c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016980:	e7eb      	b.n	801695a <_strtol_l.isra.0+0x62>
 8016982:	462f      	mov	r7, r5
 8016984:	e7bf      	b.n	8016906 <_strtol_l.isra.0+0xe>
 8016986:	2c2b      	cmp	r4, #43	; 0x2b
 8016988:	bf04      	itt	eq
 801698a:	1cbd      	addeq	r5, r7, #2
 801698c:	787c      	ldrbeq	r4, [r7, #1]
 801698e:	461a      	mov	r2, r3
 8016990:	e7c9      	b.n	8016926 <_strtol_l.isra.0+0x2e>
 8016992:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8016996:	2b19      	cmp	r3, #25
 8016998:	d801      	bhi.n	801699e <_strtol_l.isra.0+0xa6>
 801699a:	3c37      	subs	r4, #55	; 0x37
 801699c:	e7e2      	b.n	8016964 <_strtol_l.isra.0+0x6c>
 801699e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80169a2:	2b19      	cmp	r3, #25
 80169a4:	d804      	bhi.n	80169b0 <_strtol_l.isra.0+0xb8>
 80169a6:	3c57      	subs	r4, #87	; 0x57
 80169a8:	e7dc      	b.n	8016964 <_strtol_l.isra.0+0x6c>
 80169aa:	f04f 37ff 	mov.w	r7, #4294967295
 80169ae:	e7e5      	b.n	801697c <_strtol_l.isra.0+0x84>
 80169b0:	1c7b      	adds	r3, r7, #1
 80169b2:	d108      	bne.n	80169c6 <_strtol_l.isra.0+0xce>
 80169b4:	2322      	movs	r3, #34	; 0x22
 80169b6:	f8c8 3000 	str.w	r3, [r8]
 80169ba:	4608      	mov	r0, r1
 80169bc:	f1ba 0f00 	cmp.w	sl, #0
 80169c0:	d107      	bne.n	80169d2 <_strtol_l.isra.0+0xda>
 80169c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80169c6:	b102      	cbz	r2, 80169ca <_strtol_l.isra.0+0xd2>
 80169c8:	4240      	negs	r0, r0
 80169ca:	f1ba 0f00 	cmp.w	sl, #0
 80169ce:	d0f8      	beq.n	80169c2 <_strtol_l.isra.0+0xca>
 80169d0:	b10f      	cbz	r7, 80169d6 <_strtol_l.isra.0+0xde>
 80169d2:	f105 39ff 	add.w	r9, r5, #4294967295
 80169d6:	f8ca 9000 	str.w	r9, [sl]
 80169da:	e7f2      	b.n	80169c2 <_strtol_l.isra.0+0xca>
 80169dc:	2430      	movs	r4, #48	; 0x30
 80169de:	2e00      	cmp	r6, #0
 80169e0:	d1af      	bne.n	8016942 <_strtol_l.isra.0+0x4a>
 80169e2:	2608      	movs	r6, #8
 80169e4:	e7ad      	b.n	8016942 <_strtol_l.isra.0+0x4a>
 80169e6:	2c30      	cmp	r4, #48	; 0x30
 80169e8:	d0a3      	beq.n	8016932 <_strtol_l.isra.0+0x3a>
 80169ea:	260a      	movs	r6, #10
 80169ec:	e7a9      	b.n	8016942 <_strtol_l.isra.0+0x4a>
	...

080169f0 <_strtol_r>:
 80169f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80169f2:	4c06      	ldr	r4, [pc, #24]	; (8016a0c <_strtol_r+0x1c>)
 80169f4:	4d06      	ldr	r5, [pc, #24]	; (8016a10 <_strtol_r+0x20>)
 80169f6:	6824      	ldr	r4, [r4, #0]
 80169f8:	6a24      	ldr	r4, [r4, #32]
 80169fa:	2c00      	cmp	r4, #0
 80169fc:	bf08      	it	eq
 80169fe:	462c      	moveq	r4, r5
 8016a00:	9400      	str	r4, [sp, #0]
 8016a02:	f7ff ff79 	bl	80168f8 <_strtol_l.isra.0>
 8016a06:	b003      	add	sp, #12
 8016a08:	bd30      	pop	{r4, r5, pc}
 8016a0a:	bf00      	nop
 8016a0c:	2000220c 	.word	0x2000220c
 8016a10:	20002270 	.word	0x20002270

08016a14 <quorem>:
 8016a14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a18:	6903      	ldr	r3, [r0, #16]
 8016a1a:	690c      	ldr	r4, [r1, #16]
 8016a1c:	42a3      	cmp	r3, r4
 8016a1e:	4680      	mov	r8, r0
 8016a20:	f2c0 8082 	blt.w	8016b28 <quorem+0x114>
 8016a24:	3c01      	subs	r4, #1
 8016a26:	f101 0714 	add.w	r7, r1, #20
 8016a2a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8016a2e:	f100 0614 	add.w	r6, r0, #20
 8016a32:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8016a36:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8016a3a:	eb06 030c 	add.w	r3, r6, ip
 8016a3e:	3501      	adds	r5, #1
 8016a40:	eb07 090c 	add.w	r9, r7, ip
 8016a44:	9301      	str	r3, [sp, #4]
 8016a46:	fbb0 f5f5 	udiv	r5, r0, r5
 8016a4a:	b395      	cbz	r5, 8016ab2 <quorem+0x9e>
 8016a4c:	f04f 0a00 	mov.w	sl, #0
 8016a50:	4638      	mov	r0, r7
 8016a52:	46b6      	mov	lr, r6
 8016a54:	46d3      	mov	fp, sl
 8016a56:	f850 2b04 	ldr.w	r2, [r0], #4
 8016a5a:	b293      	uxth	r3, r2
 8016a5c:	fb05 a303 	mla	r3, r5, r3, sl
 8016a60:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016a64:	b29b      	uxth	r3, r3
 8016a66:	ebab 0303 	sub.w	r3, fp, r3
 8016a6a:	0c12      	lsrs	r2, r2, #16
 8016a6c:	f8de b000 	ldr.w	fp, [lr]
 8016a70:	fb05 a202 	mla	r2, r5, r2, sl
 8016a74:	fa13 f38b 	uxtah	r3, r3, fp
 8016a78:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8016a7c:	fa1f fb82 	uxth.w	fp, r2
 8016a80:	f8de 2000 	ldr.w	r2, [lr]
 8016a84:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8016a88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016a8c:	b29b      	uxth	r3, r3
 8016a8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016a92:	4581      	cmp	r9, r0
 8016a94:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8016a98:	f84e 3b04 	str.w	r3, [lr], #4
 8016a9c:	d2db      	bcs.n	8016a56 <quorem+0x42>
 8016a9e:	f856 300c 	ldr.w	r3, [r6, ip]
 8016aa2:	b933      	cbnz	r3, 8016ab2 <quorem+0x9e>
 8016aa4:	9b01      	ldr	r3, [sp, #4]
 8016aa6:	3b04      	subs	r3, #4
 8016aa8:	429e      	cmp	r6, r3
 8016aaa:	461a      	mov	r2, r3
 8016aac:	d330      	bcc.n	8016b10 <quorem+0xfc>
 8016aae:	f8c8 4010 	str.w	r4, [r8, #16]
 8016ab2:	4640      	mov	r0, r8
 8016ab4:	f001 fb96 	bl	80181e4 <__mcmp>
 8016ab8:	2800      	cmp	r0, #0
 8016aba:	db25      	blt.n	8016b08 <quorem+0xf4>
 8016abc:	3501      	adds	r5, #1
 8016abe:	4630      	mov	r0, r6
 8016ac0:	f04f 0c00 	mov.w	ip, #0
 8016ac4:	f857 2b04 	ldr.w	r2, [r7], #4
 8016ac8:	f8d0 e000 	ldr.w	lr, [r0]
 8016acc:	b293      	uxth	r3, r2
 8016ace:	ebac 0303 	sub.w	r3, ip, r3
 8016ad2:	0c12      	lsrs	r2, r2, #16
 8016ad4:	fa13 f38e 	uxtah	r3, r3, lr
 8016ad8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8016adc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016ae0:	b29b      	uxth	r3, r3
 8016ae2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016ae6:	45b9      	cmp	r9, r7
 8016ae8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8016aec:	f840 3b04 	str.w	r3, [r0], #4
 8016af0:	d2e8      	bcs.n	8016ac4 <quorem+0xb0>
 8016af2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8016af6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8016afa:	b92a      	cbnz	r2, 8016b08 <quorem+0xf4>
 8016afc:	3b04      	subs	r3, #4
 8016afe:	429e      	cmp	r6, r3
 8016b00:	461a      	mov	r2, r3
 8016b02:	d30b      	bcc.n	8016b1c <quorem+0x108>
 8016b04:	f8c8 4010 	str.w	r4, [r8, #16]
 8016b08:	4628      	mov	r0, r5
 8016b0a:	b003      	add	sp, #12
 8016b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b10:	6812      	ldr	r2, [r2, #0]
 8016b12:	3b04      	subs	r3, #4
 8016b14:	2a00      	cmp	r2, #0
 8016b16:	d1ca      	bne.n	8016aae <quorem+0x9a>
 8016b18:	3c01      	subs	r4, #1
 8016b1a:	e7c5      	b.n	8016aa8 <quorem+0x94>
 8016b1c:	6812      	ldr	r2, [r2, #0]
 8016b1e:	3b04      	subs	r3, #4
 8016b20:	2a00      	cmp	r2, #0
 8016b22:	d1ef      	bne.n	8016b04 <quorem+0xf0>
 8016b24:	3c01      	subs	r4, #1
 8016b26:	e7ea      	b.n	8016afe <quorem+0xea>
 8016b28:	2000      	movs	r0, #0
 8016b2a:	e7ee      	b.n	8016b0a <quorem+0xf6>
 8016b2c:	0000      	movs	r0, r0
	...

08016b30 <_dtoa_r>:
 8016b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b34:	ec57 6b10 	vmov	r6, r7, d0
 8016b38:	b097      	sub	sp, #92	; 0x5c
 8016b3a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016b3c:	9106      	str	r1, [sp, #24]
 8016b3e:	4604      	mov	r4, r0
 8016b40:	920b      	str	r2, [sp, #44]	; 0x2c
 8016b42:	9312      	str	r3, [sp, #72]	; 0x48
 8016b44:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8016b48:	e9cd 6700 	strd	r6, r7, [sp]
 8016b4c:	b93d      	cbnz	r5, 8016b5e <_dtoa_r+0x2e>
 8016b4e:	2010      	movs	r0, #16
 8016b50:	f7fe f924 	bl	8014d9c <malloc>
 8016b54:	6260      	str	r0, [r4, #36]	; 0x24
 8016b56:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016b5a:	6005      	str	r5, [r0, #0]
 8016b5c:	60c5      	str	r5, [r0, #12]
 8016b5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016b60:	6819      	ldr	r1, [r3, #0]
 8016b62:	b151      	cbz	r1, 8016b7a <_dtoa_r+0x4a>
 8016b64:	685a      	ldr	r2, [r3, #4]
 8016b66:	604a      	str	r2, [r1, #4]
 8016b68:	2301      	movs	r3, #1
 8016b6a:	4093      	lsls	r3, r2
 8016b6c:	608b      	str	r3, [r1, #8]
 8016b6e:	4620      	mov	r0, r4
 8016b70:	f001 f918 	bl	8017da4 <_Bfree>
 8016b74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016b76:	2200      	movs	r2, #0
 8016b78:	601a      	str	r2, [r3, #0]
 8016b7a:	1e3b      	subs	r3, r7, #0
 8016b7c:	bfbb      	ittet	lt
 8016b7e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8016b82:	9301      	strlt	r3, [sp, #4]
 8016b84:	2300      	movge	r3, #0
 8016b86:	2201      	movlt	r2, #1
 8016b88:	bfac      	ite	ge
 8016b8a:	f8c8 3000 	strge.w	r3, [r8]
 8016b8e:	f8c8 2000 	strlt.w	r2, [r8]
 8016b92:	4baf      	ldr	r3, [pc, #700]	; (8016e50 <_dtoa_r+0x320>)
 8016b94:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016b98:	ea33 0308 	bics.w	r3, r3, r8
 8016b9c:	d114      	bne.n	8016bc8 <_dtoa_r+0x98>
 8016b9e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016ba0:	f242 730f 	movw	r3, #9999	; 0x270f
 8016ba4:	6013      	str	r3, [r2, #0]
 8016ba6:	9b00      	ldr	r3, [sp, #0]
 8016ba8:	b923      	cbnz	r3, 8016bb4 <_dtoa_r+0x84>
 8016baa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8016bae:	2800      	cmp	r0, #0
 8016bb0:	f000 8542 	beq.w	8017638 <_dtoa_r+0xb08>
 8016bb4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016bb6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8016e64 <_dtoa_r+0x334>
 8016bba:	2b00      	cmp	r3, #0
 8016bbc:	f000 8544 	beq.w	8017648 <_dtoa_r+0xb18>
 8016bc0:	f10b 0303 	add.w	r3, fp, #3
 8016bc4:	f000 bd3e 	b.w	8017644 <_dtoa_r+0xb14>
 8016bc8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016bcc:	2200      	movs	r2, #0
 8016bce:	2300      	movs	r3, #0
 8016bd0:	4630      	mov	r0, r6
 8016bd2:	4639      	mov	r1, r7
 8016bd4:	f7e9 ff78 	bl	8000ac8 <__aeabi_dcmpeq>
 8016bd8:	4681      	mov	r9, r0
 8016bda:	b168      	cbz	r0, 8016bf8 <_dtoa_r+0xc8>
 8016bdc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016bde:	2301      	movs	r3, #1
 8016be0:	6013      	str	r3, [r2, #0]
 8016be2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016be4:	2b00      	cmp	r3, #0
 8016be6:	f000 8524 	beq.w	8017632 <_dtoa_r+0xb02>
 8016bea:	4b9a      	ldr	r3, [pc, #616]	; (8016e54 <_dtoa_r+0x324>)
 8016bec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016bee:	f103 3bff 	add.w	fp, r3, #4294967295
 8016bf2:	6013      	str	r3, [r2, #0]
 8016bf4:	f000 bd28 	b.w	8017648 <_dtoa_r+0xb18>
 8016bf8:	aa14      	add	r2, sp, #80	; 0x50
 8016bfa:	a915      	add	r1, sp, #84	; 0x54
 8016bfc:	ec47 6b10 	vmov	d0, r6, r7
 8016c00:	4620      	mov	r0, r4
 8016c02:	f001 fbdd 	bl	80183c0 <__d2b>
 8016c06:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8016c0a:	9004      	str	r0, [sp, #16]
 8016c0c:	2d00      	cmp	r5, #0
 8016c0e:	d07c      	beq.n	8016d0a <_dtoa_r+0x1da>
 8016c10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016c14:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8016c18:	46b2      	mov	sl, r6
 8016c1a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8016c1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8016c22:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8016c26:	2200      	movs	r2, #0
 8016c28:	4b8b      	ldr	r3, [pc, #556]	; (8016e58 <_dtoa_r+0x328>)
 8016c2a:	4650      	mov	r0, sl
 8016c2c:	4659      	mov	r1, fp
 8016c2e:	f7e9 fb2b 	bl	8000288 <__aeabi_dsub>
 8016c32:	a381      	add	r3, pc, #516	; (adr r3, 8016e38 <_dtoa_r+0x308>)
 8016c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c38:	f7e9 fcde 	bl	80005f8 <__aeabi_dmul>
 8016c3c:	a380      	add	r3, pc, #512	; (adr r3, 8016e40 <_dtoa_r+0x310>)
 8016c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c42:	f7e9 fb23 	bl	800028c <__adddf3>
 8016c46:	4606      	mov	r6, r0
 8016c48:	4628      	mov	r0, r5
 8016c4a:	460f      	mov	r7, r1
 8016c4c:	f7e9 fc6a 	bl	8000524 <__aeabi_i2d>
 8016c50:	a37d      	add	r3, pc, #500	; (adr r3, 8016e48 <_dtoa_r+0x318>)
 8016c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c56:	f7e9 fccf 	bl	80005f8 <__aeabi_dmul>
 8016c5a:	4602      	mov	r2, r0
 8016c5c:	460b      	mov	r3, r1
 8016c5e:	4630      	mov	r0, r6
 8016c60:	4639      	mov	r1, r7
 8016c62:	f7e9 fb13 	bl	800028c <__adddf3>
 8016c66:	4606      	mov	r6, r0
 8016c68:	460f      	mov	r7, r1
 8016c6a:	f7e9 ff75 	bl	8000b58 <__aeabi_d2iz>
 8016c6e:	2200      	movs	r2, #0
 8016c70:	4682      	mov	sl, r0
 8016c72:	2300      	movs	r3, #0
 8016c74:	4630      	mov	r0, r6
 8016c76:	4639      	mov	r1, r7
 8016c78:	f7e9 ff30 	bl	8000adc <__aeabi_dcmplt>
 8016c7c:	b148      	cbz	r0, 8016c92 <_dtoa_r+0x162>
 8016c7e:	4650      	mov	r0, sl
 8016c80:	f7e9 fc50 	bl	8000524 <__aeabi_i2d>
 8016c84:	4632      	mov	r2, r6
 8016c86:	463b      	mov	r3, r7
 8016c88:	f7e9 ff1e 	bl	8000ac8 <__aeabi_dcmpeq>
 8016c8c:	b908      	cbnz	r0, 8016c92 <_dtoa_r+0x162>
 8016c8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016c92:	f1ba 0f16 	cmp.w	sl, #22
 8016c96:	d859      	bhi.n	8016d4c <_dtoa_r+0x21c>
 8016c98:	4970      	ldr	r1, [pc, #448]	; (8016e5c <_dtoa_r+0x32c>)
 8016c9a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8016c9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016ca2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016ca6:	f7e9 ff37 	bl	8000b18 <__aeabi_dcmpgt>
 8016caa:	2800      	cmp	r0, #0
 8016cac:	d050      	beq.n	8016d50 <_dtoa_r+0x220>
 8016cae:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016cb2:	2300      	movs	r3, #0
 8016cb4:	930f      	str	r3, [sp, #60]	; 0x3c
 8016cb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016cb8:	1b5d      	subs	r5, r3, r5
 8016cba:	f1b5 0801 	subs.w	r8, r5, #1
 8016cbe:	bf49      	itett	mi
 8016cc0:	f1c5 0301 	rsbmi	r3, r5, #1
 8016cc4:	2300      	movpl	r3, #0
 8016cc6:	9305      	strmi	r3, [sp, #20]
 8016cc8:	f04f 0800 	movmi.w	r8, #0
 8016ccc:	bf58      	it	pl
 8016cce:	9305      	strpl	r3, [sp, #20]
 8016cd0:	f1ba 0f00 	cmp.w	sl, #0
 8016cd4:	db3e      	blt.n	8016d54 <_dtoa_r+0x224>
 8016cd6:	2300      	movs	r3, #0
 8016cd8:	44d0      	add	r8, sl
 8016cda:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8016cde:	9307      	str	r3, [sp, #28]
 8016ce0:	9b06      	ldr	r3, [sp, #24]
 8016ce2:	2b09      	cmp	r3, #9
 8016ce4:	f200 8090 	bhi.w	8016e08 <_dtoa_r+0x2d8>
 8016ce8:	2b05      	cmp	r3, #5
 8016cea:	bfc4      	itt	gt
 8016cec:	3b04      	subgt	r3, #4
 8016cee:	9306      	strgt	r3, [sp, #24]
 8016cf0:	9b06      	ldr	r3, [sp, #24]
 8016cf2:	f1a3 0302 	sub.w	r3, r3, #2
 8016cf6:	bfcc      	ite	gt
 8016cf8:	2500      	movgt	r5, #0
 8016cfa:	2501      	movle	r5, #1
 8016cfc:	2b03      	cmp	r3, #3
 8016cfe:	f200 808f 	bhi.w	8016e20 <_dtoa_r+0x2f0>
 8016d02:	e8df f003 	tbb	[pc, r3]
 8016d06:	7f7d      	.short	0x7f7d
 8016d08:	7131      	.short	0x7131
 8016d0a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8016d0e:	441d      	add	r5, r3
 8016d10:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8016d14:	2820      	cmp	r0, #32
 8016d16:	dd13      	ble.n	8016d40 <_dtoa_r+0x210>
 8016d18:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8016d1c:	9b00      	ldr	r3, [sp, #0]
 8016d1e:	fa08 f800 	lsl.w	r8, r8, r0
 8016d22:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8016d26:	fa23 f000 	lsr.w	r0, r3, r0
 8016d2a:	ea48 0000 	orr.w	r0, r8, r0
 8016d2e:	f7e9 fbe9 	bl	8000504 <__aeabi_ui2d>
 8016d32:	2301      	movs	r3, #1
 8016d34:	4682      	mov	sl, r0
 8016d36:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8016d3a:	3d01      	subs	r5, #1
 8016d3c:	9313      	str	r3, [sp, #76]	; 0x4c
 8016d3e:	e772      	b.n	8016c26 <_dtoa_r+0xf6>
 8016d40:	9b00      	ldr	r3, [sp, #0]
 8016d42:	f1c0 0020 	rsb	r0, r0, #32
 8016d46:	fa03 f000 	lsl.w	r0, r3, r0
 8016d4a:	e7f0      	b.n	8016d2e <_dtoa_r+0x1fe>
 8016d4c:	2301      	movs	r3, #1
 8016d4e:	e7b1      	b.n	8016cb4 <_dtoa_r+0x184>
 8016d50:	900f      	str	r0, [sp, #60]	; 0x3c
 8016d52:	e7b0      	b.n	8016cb6 <_dtoa_r+0x186>
 8016d54:	9b05      	ldr	r3, [sp, #20]
 8016d56:	eba3 030a 	sub.w	r3, r3, sl
 8016d5a:	9305      	str	r3, [sp, #20]
 8016d5c:	f1ca 0300 	rsb	r3, sl, #0
 8016d60:	9307      	str	r3, [sp, #28]
 8016d62:	2300      	movs	r3, #0
 8016d64:	930e      	str	r3, [sp, #56]	; 0x38
 8016d66:	e7bb      	b.n	8016ce0 <_dtoa_r+0x1b0>
 8016d68:	2301      	movs	r3, #1
 8016d6a:	930a      	str	r3, [sp, #40]	; 0x28
 8016d6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016d6e:	2b00      	cmp	r3, #0
 8016d70:	dd59      	ble.n	8016e26 <_dtoa_r+0x2f6>
 8016d72:	9302      	str	r3, [sp, #8]
 8016d74:	4699      	mov	r9, r3
 8016d76:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8016d78:	2200      	movs	r2, #0
 8016d7a:	6072      	str	r2, [r6, #4]
 8016d7c:	2204      	movs	r2, #4
 8016d7e:	f102 0014 	add.w	r0, r2, #20
 8016d82:	4298      	cmp	r0, r3
 8016d84:	6871      	ldr	r1, [r6, #4]
 8016d86:	d953      	bls.n	8016e30 <_dtoa_r+0x300>
 8016d88:	4620      	mov	r0, r4
 8016d8a:	f000 ffd7 	bl	8017d3c <_Balloc>
 8016d8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016d90:	6030      	str	r0, [r6, #0]
 8016d92:	f1b9 0f0e 	cmp.w	r9, #14
 8016d96:	f8d3 b000 	ldr.w	fp, [r3]
 8016d9a:	f200 80e6 	bhi.w	8016f6a <_dtoa_r+0x43a>
 8016d9e:	2d00      	cmp	r5, #0
 8016da0:	f000 80e3 	beq.w	8016f6a <_dtoa_r+0x43a>
 8016da4:	ed9d 7b00 	vldr	d7, [sp]
 8016da8:	f1ba 0f00 	cmp.w	sl, #0
 8016dac:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8016db0:	dd74      	ble.n	8016e9c <_dtoa_r+0x36c>
 8016db2:	4a2a      	ldr	r2, [pc, #168]	; (8016e5c <_dtoa_r+0x32c>)
 8016db4:	f00a 030f 	and.w	r3, sl, #15
 8016db8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8016dbc:	ed93 7b00 	vldr	d7, [r3]
 8016dc0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8016dc4:	06f0      	lsls	r0, r6, #27
 8016dc6:	ed8d 7b08 	vstr	d7, [sp, #32]
 8016dca:	d565      	bpl.n	8016e98 <_dtoa_r+0x368>
 8016dcc:	4b24      	ldr	r3, [pc, #144]	; (8016e60 <_dtoa_r+0x330>)
 8016dce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8016dd2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016dd6:	f7e9 fd39 	bl	800084c <__aeabi_ddiv>
 8016dda:	e9cd 0100 	strd	r0, r1, [sp]
 8016dde:	f006 060f 	and.w	r6, r6, #15
 8016de2:	2503      	movs	r5, #3
 8016de4:	4f1e      	ldr	r7, [pc, #120]	; (8016e60 <_dtoa_r+0x330>)
 8016de6:	e04c      	b.n	8016e82 <_dtoa_r+0x352>
 8016de8:	2301      	movs	r3, #1
 8016dea:	930a      	str	r3, [sp, #40]	; 0x28
 8016dec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016dee:	4453      	add	r3, sl
 8016df0:	f103 0901 	add.w	r9, r3, #1
 8016df4:	9302      	str	r3, [sp, #8]
 8016df6:	464b      	mov	r3, r9
 8016df8:	2b01      	cmp	r3, #1
 8016dfa:	bfb8      	it	lt
 8016dfc:	2301      	movlt	r3, #1
 8016dfe:	e7ba      	b.n	8016d76 <_dtoa_r+0x246>
 8016e00:	2300      	movs	r3, #0
 8016e02:	e7b2      	b.n	8016d6a <_dtoa_r+0x23a>
 8016e04:	2300      	movs	r3, #0
 8016e06:	e7f0      	b.n	8016dea <_dtoa_r+0x2ba>
 8016e08:	2501      	movs	r5, #1
 8016e0a:	2300      	movs	r3, #0
 8016e0c:	9306      	str	r3, [sp, #24]
 8016e0e:	950a      	str	r5, [sp, #40]	; 0x28
 8016e10:	f04f 33ff 	mov.w	r3, #4294967295
 8016e14:	9302      	str	r3, [sp, #8]
 8016e16:	4699      	mov	r9, r3
 8016e18:	2200      	movs	r2, #0
 8016e1a:	2312      	movs	r3, #18
 8016e1c:	920b      	str	r2, [sp, #44]	; 0x2c
 8016e1e:	e7aa      	b.n	8016d76 <_dtoa_r+0x246>
 8016e20:	2301      	movs	r3, #1
 8016e22:	930a      	str	r3, [sp, #40]	; 0x28
 8016e24:	e7f4      	b.n	8016e10 <_dtoa_r+0x2e0>
 8016e26:	2301      	movs	r3, #1
 8016e28:	9302      	str	r3, [sp, #8]
 8016e2a:	4699      	mov	r9, r3
 8016e2c:	461a      	mov	r2, r3
 8016e2e:	e7f5      	b.n	8016e1c <_dtoa_r+0x2ec>
 8016e30:	3101      	adds	r1, #1
 8016e32:	6071      	str	r1, [r6, #4]
 8016e34:	0052      	lsls	r2, r2, #1
 8016e36:	e7a2      	b.n	8016d7e <_dtoa_r+0x24e>
 8016e38:	636f4361 	.word	0x636f4361
 8016e3c:	3fd287a7 	.word	0x3fd287a7
 8016e40:	8b60c8b3 	.word	0x8b60c8b3
 8016e44:	3fc68a28 	.word	0x3fc68a28
 8016e48:	509f79fb 	.word	0x509f79fb
 8016e4c:	3fd34413 	.word	0x3fd34413
 8016e50:	7ff00000 	.word	0x7ff00000
 8016e54:	0801a589 	.word	0x0801a589
 8016e58:	3ff80000 	.word	0x3ff80000
 8016e5c:	0801a648 	.word	0x0801a648
 8016e60:	0801a620 	.word	0x0801a620
 8016e64:	0801a611 	.word	0x0801a611
 8016e68:	07f1      	lsls	r1, r6, #31
 8016e6a:	d508      	bpl.n	8016e7e <_dtoa_r+0x34e>
 8016e6c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016e70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016e74:	f7e9 fbc0 	bl	80005f8 <__aeabi_dmul>
 8016e78:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016e7c:	3501      	adds	r5, #1
 8016e7e:	1076      	asrs	r6, r6, #1
 8016e80:	3708      	adds	r7, #8
 8016e82:	2e00      	cmp	r6, #0
 8016e84:	d1f0      	bne.n	8016e68 <_dtoa_r+0x338>
 8016e86:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016e8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016e8e:	f7e9 fcdd 	bl	800084c <__aeabi_ddiv>
 8016e92:	e9cd 0100 	strd	r0, r1, [sp]
 8016e96:	e01a      	b.n	8016ece <_dtoa_r+0x39e>
 8016e98:	2502      	movs	r5, #2
 8016e9a:	e7a3      	b.n	8016de4 <_dtoa_r+0x2b4>
 8016e9c:	f000 80a0 	beq.w	8016fe0 <_dtoa_r+0x4b0>
 8016ea0:	f1ca 0600 	rsb	r6, sl, #0
 8016ea4:	4b9f      	ldr	r3, [pc, #636]	; (8017124 <_dtoa_r+0x5f4>)
 8016ea6:	4fa0      	ldr	r7, [pc, #640]	; (8017128 <_dtoa_r+0x5f8>)
 8016ea8:	f006 020f 	and.w	r2, r6, #15
 8016eac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016eb4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8016eb8:	f7e9 fb9e 	bl	80005f8 <__aeabi_dmul>
 8016ebc:	e9cd 0100 	strd	r0, r1, [sp]
 8016ec0:	1136      	asrs	r6, r6, #4
 8016ec2:	2300      	movs	r3, #0
 8016ec4:	2502      	movs	r5, #2
 8016ec6:	2e00      	cmp	r6, #0
 8016ec8:	d17f      	bne.n	8016fca <_dtoa_r+0x49a>
 8016eca:	2b00      	cmp	r3, #0
 8016ecc:	d1e1      	bne.n	8016e92 <_dtoa_r+0x362>
 8016ece:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016ed0:	2b00      	cmp	r3, #0
 8016ed2:	f000 8087 	beq.w	8016fe4 <_dtoa_r+0x4b4>
 8016ed6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016eda:	2200      	movs	r2, #0
 8016edc:	4b93      	ldr	r3, [pc, #588]	; (801712c <_dtoa_r+0x5fc>)
 8016ede:	4630      	mov	r0, r6
 8016ee0:	4639      	mov	r1, r7
 8016ee2:	f7e9 fdfb 	bl	8000adc <__aeabi_dcmplt>
 8016ee6:	2800      	cmp	r0, #0
 8016ee8:	d07c      	beq.n	8016fe4 <_dtoa_r+0x4b4>
 8016eea:	f1b9 0f00 	cmp.w	r9, #0
 8016eee:	d079      	beq.n	8016fe4 <_dtoa_r+0x4b4>
 8016ef0:	9b02      	ldr	r3, [sp, #8]
 8016ef2:	2b00      	cmp	r3, #0
 8016ef4:	dd35      	ble.n	8016f62 <_dtoa_r+0x432>
 8016ef6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8016efa:	9308      	str	r3, [sp, #32]
 8016efc:	4639      	mov	r1, r7
 8016efe:	2200      	movs	r2, #0
 8016f00:	4b8b      	ldr	r3, [pc, #556]	; (8017130 <_dtoa_r+0x600>)
 8016f02:	4630      	mov	r0, r6
 8016f04:	f7e9 fb78 	bl	80005f8 <__aeabi_dmul>
 8016f08:	e9cd 0100 	strd	r0, r1, [sp]
 8016f0c:	9f02      	ldr	r7, [sp, #8]
 8016f0e:	3501      	adds	r5, #1
 8016f10:	4628      	mov	r0, r5
 8016f12:	f7e9 fb07 	bl	8000524 <__aeabi_i2d>
 8016f16:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016f1a:	f7e9 fb6d 	bl	80005f8 <__aeabi_dmul>
 8016f1e:	2200      	movs	r2, #0
 8016f20:	4b84      	ldr	r3, [pc, #528]	; (8017134 <_dtoa_r+0x604>)
 8016f22:	f7e9 f9b3 	bl	800028c <__adddf3>
 8016f26:	4605      	mov	r5, r0
 8016f28:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8016f2c:	2f00      	cmp	r7, #0
 8016f2e:	d15d      	bne.n	8016fec <_dtoa_r+0x4bc>
 8016f30:	2200      	movs	r2, #0
 8016f32:	4b81      	ldr	r3, [pc, #516]	; (8017138 <_dtoa_r+0x608>)
 8016f34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016f38:	f7e9 f9a6 	bl	8000288 <__aeabi_dsub>
 8016f3c:	462a      	mov	r2, r5
 8016f3e:	4633      	mov	r3, r6
 8016f40:	e9cd 0100 	strd	r0, r1, [sp]
 8016f44:	f7e9 fde8 	bl	8000b18 <__aeabi_dcmpgt>
 8016f48:	2800      	cmp	r0, #0
 8016f4a:	f040 8288 	bne.w	801745e <_dtoa_r+0x92e>
 8016f4e:	462a      	mov	r2, r5
 8016f50:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8016f54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016f58:	f7e9 fdc0 	bl	8000adc <__aeabi_dcmplt>
 8016f5c:	2800      	cmp	r0, #0
 8016f5e:	f040 827c 	bne.w	801745a <_dtoa_r+0x92a>
 8016f62:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8016f66:	e9cd 2300 	strd	r2, r3, [sp]
 8016f6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016f6c:	2b00      	cmp	r3, #0
 8016f6e:	f2c0 8150 	blt.w	8017212 <_dtoa_r+0x6e2>
 8016f72:	f1ba 0f0e 	cmp.w	sl, #14
 8016f76:	f300 814c 	bgt.w	8017212 <_dtoa_r+0x6e2>
 8016f7a:	4b6a      	ldr	r3, [pc, #424]	; (8017124 <_dtoa_r+0x5f4>)
 8016f7c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8016f80:	ed93 7b00 	vldr	d7, [r3]
 8016f84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016f86:	2b00      	cmp	r3, #0
 8016f88:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016f8c:	f280 80d8 	bge.w	8017140 <_dtoa_r+0x610>
 8016f90:	f1b9 0f00 	cmp.w	r9, #0
 8016f94:	f300 80d4 	bgt.w	8017140 <_dtoa_r+0x610>
 8016f98:	f040 825e 	bne.w	8017458 <_dtoa_r+0x928>
 8016f9c:	2200      	movs	r2, #0
 8016f9e:	4b66      	ldr	r3, [pc, #408]	; (8017138 <_dtoa_r+0x608>)
 8016fa0:	ec51 0b17 	vmov	r0, r1, d7
 8016fa4:	f7e9 fb28 	bl	80005f8 <__aeabi_dmul>
 8016fa8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016fac:	f7e9 fdaa 	bl	8000b04 <__aeabi_dcmpge>
 8016fb0:	464f      	mov	r7, r9
 8016fb2:	464e      	mov	r6, r9
 8016fb4:	2800      	cmp	r0, #0
 8016fb6:	f040 8234 	bne.w	8017422 <_dtoa_r+0x8f2>
 8016fba:	2331      	movs	r3, #49	; 0x31
 8016fbc:	f10b 0501 	add.w	r5, fp, #1
 8016fc0:	f88b 3000 	strb.w	r3, [fp]
 8016fc4:	f10a 0a01 	add.w	sl, sl, #1
 8016fc8:	e22f      	b.n	801742a <_dtoa_r+0x8fa>
 8016fca:	07f2      	lsls	r2, r6, #31
 8016fcc:	d505      	bpl.n	8016fda <_dtoa_r+0x4aa>
 8016fce:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016fd2:	f7e9 fb11 	bl	80005f8 <__aeabi_dmul>
 8016fd6:	3501      	adds	r5, #1
 8016fd8:	2301      	movs	r3, #1
 8016fda:	1076      	asrs	r6, r6, #1
 8016fdc:	3708      	adds	r7, #8
 8016fde:	e772      	b.n	8016ec6 <_dtoa_r+0x396>
 8016fe0:	2502      	movs	r5, #2
 8016fe2:	e774      	b.n	8016ece <_dtoa_r+0x39e>
 8016fe4:	f8cd a020 	str.w	sl, [sp, #32]
 8016fe8:	464f      	mov	r7, r9
 8016fea:	e791      	b.n	8016f10 <_dtoa_r+0x3e0>
 8016fec:	4b4d      	ldr	r3, [pc, #308]	; (8017124 <_dtoa_r+0x5f4>)
 8016fee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8016ff2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8016ff6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016ff8:	2b00      	cmp	r3, #0
 8016ffa:	d047      	beq.n	801708c <_dtoa_r+0x55c>
 8016ffc:	4602      	mov	r2, r0
 8016ffe:	460b      	mov	r3, r1
 8017000:	2000      	movs	r0, #0
 8017002:	494e      	ldr	r1, [pc, #312]	; (801713c <_dtoa_r+0x60c>)
 8017004:	f7e9 fc22 	bl	800084c <__aeabi_ddiv>
 8017008:	462a      	mov	r2, r5
 801700a:	4633      	mov	r3, r6
 801700c:	f7e9 f93c 	bl	8000288 <__aeabi_dsub>
 8017010:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017014:	465d      	mov	r5, fp
 8017016:	e9dd 0100 	ldrd	r0, r1, [sp]
 801701a:	f7e9 fd9d 	bl	8000b58 <__aeabi_d2iz>
 801701e:	4606      	mov	r6, r0
 8017020:	f7e9 fa80 	bl	8000524 <__aeabi_i2d>
 8017024:	4602      	mov	r2, r0
 8017026:	460b      	mov	r3, r1
 8017028:	e9dd 0100 	ldrd	r0, r1, [sp]
 801702c:	f7e9 f92c 	bl	8000288 <__aeabi_dsub>
 8017030:	3630      	adds	r6, #48	; 0x30
 8017032:	f805 6b01 	strb.w	r6, [r5], #1
 8017036:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801703a:	e9cd 0100 	strd	r0, r1, [sp]
 801703e:	f7e9 fd4d 	bl	8000adc <__aeabi_dcmplt>
 8017042:	2800      	cmp	r0, #0
 8017044:	d163      	bne.n	801710e <_dtoa_r+0x5de>
 8017046:	e9dd 2300 	ldrd	r2, r3, [sp]
 801704a:	2000      	movs	r0, #0
 801704c:	4937      	ldr	r1, [pc, #220]	; (801712c <_dtoa_r+0x5fc>)
 801704e:	f7e9 f91b 	bl	8000288 <__aeabi_dsub>
 8017052:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017056:	f7e9 fd41 	bl	8000adc <__aeabi_dcmplt>
 801705a:	2800      	cmp	r0, #0
 801705c:	f040 80b7 	bne.w	80171ce <_dtoa_r+0x69e>
 8017060:	eba5 030b 	sub.w	r3, r5, fp
 8017064:	429f      	cmp	r7, r3
 8017066:	f77f af7c 	ble.w	8016f62 <_dtoa_r+0x432>
 801706a:	2200      	movs	r2, #0
 801706c:	4b30      	ldr	r3, [pc, #192]	; (8017130 <_dtoa_r+0x600>)
 801706e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017072:	f7e9 fac1 	bl	80005f8 <__aeabi_dmul>
 8017076:	2200      	movs	r2, #0
 8017078:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801707c:	4b2c      	ldr	r3, [pc, #176]	; (8017130 <_dtoa_r+0x600>)
 801707e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017082:	f7e9 fab9 	bl	80005f8 <__aeabi_dmul>
 8017086:	e9cd 0100 	strd	r0, r1, [sp]
 801708a:	e7c4      	b.n	8017016 <_dtoa_r+0x4e6>
 801708c:	462a      	mov	r2, r5
 801708e:	4633      	mov	r3, r6
 8017090:	f7e9 fab2 	bl	80005f8 <__aeabi_dmul>
 8017094:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017098:	eb0b 0507 	add.w	r5, fp, r7
 801709c:	465e      	mov	r6, fp
 801709e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80170a2:	f7e9 fd59 	bl	8000b58 <__aeabi_d2iz>
 80170a6:	4607      	mov	r7, r0
 80170a8:	f7e9 fa3c 	bl	8000524 <__aeabi_i2d>
 80170ac:	3730      	adds	r7, #48	; 0x30
 80170ae:	4602      	mov	r2, r0
 80170b0:	460b      	mov	r3, r1
 80170b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80170b6:	f7e9 f8e7 	bl	8000288 <__aeabi_dsub>
 80170ba:	f806 7b01 	strb.w	r7, [r6], #1
 80170be:	42ae      	cmp	r6, r5
 80170c0:	e9cd 0100 	strd	r0, r1, [sp]
 80170c4:	f04f 0200 	mov.w	r2, #0
 80170c8:	d126      	bne.n	8017118 <_dtoa_r+0x5e8>
 80170ca:	4b1c      	ldr	r3, [pc, #112]	; (801713c <_dtoa_r+0x60c>)
 80170cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80170d0:	f7e9 f8dc 	bl	800028c <__adddf3>
 80170d4:	4602      	mov	r2, r0
 80170d6:	460b      	mov	r3, r1
 80170d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80170dc:	f7e9 fd1c 	bl	8000b18 <__aeabi_dcmpgt>
 80170e0:	2800      	cmp	r0, #0
 80170e2:	d174      	bne.n	80171ce <_dtoa_r+0x69e>
 80170e4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80170e8:	2000      	movs	r0, #0
 80170ea:	4914      	ldr	r1, [pc, #80]	; (801713c <_dtoa_r+0x60c>)
 80170ec:	f7e9 f8cc 	bl	8000288 <__aeabi_dsub>
 80170f0:	4602      	mov	r2, r0
 80170f2:	460b      	mov	r3, r1
 80170f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80170f8:	f7e9 fcf0 	bl	8000adc <__aeabi_dcmplt>
 80170fc:	2800      	cmp	r0, #0
 80170fe:	f43f af30 	beq.w	8016f62 <_dtoa_r+0x432>
 8017102:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017106:	2b30      	cmp	r3, #48	; 0x30
 8017108:	f105 32ff 	add.w	r2, r5, #4294967295
 801710c:	d002      	beq.n	8017114 <_dtoa_r+0x5e4>
 801710e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017112:	e04a      	b.n	80171aa <_dtoa_r+0x67a>
 8017114:	4615      	mov	r5, r2
 8017116:	e7f4      	b.n	8017102 <_dtoa_r+0x5d2>
 8017118:	4b05      	ldr	r3, [pc, #20]	; (8017130 <_dtoa_r+0x600>)
 801711a:	f7e9 fa6d 	bl	80005f8 <__aeabi_dmul>
 801711e:	e9cd 0100 	strd	r0, r1, [sp]
 8017122:	e7bc      	b.n	801709e <_dtoa_r+0x56e>
 8017124:	0801a648 	.word	0x0801a648
 8017128:	0801a620 	.word	0x0801a620
 801712c:	3ff00000 	.word	0x3ff00000
 8017130:	40240000 	.word	0x40240000
 8017134:	401c0000 	.word	0x401c0000
 8017138:	40140000 	.word	0x40140000
 801713c:	3fe00000 	.word	0x3fe00000
 8017140:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017144:	465d      	mov	r5, fp
 8017146:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801714a:	4630      	mov	r0, r6
 801714c:	4639      	mov	r1, r7
 801714e:	f7e9 fb7d 	bl	800084c <__aeabi_ddiv>
 8017152:	f7e9 fd01 	bl	8000b58 <__aeabi_d2iz>
 8017156:	4680      	mov	r8, r0
 8017158:	f7e9 f9e4 	bl	8000524 <__aeabi_i2d>
 801715c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017160:	f7e9 fa4a 	bl	80005f8 <__aeabi_dmul>
 8017164:	4602      	mov	r2, r0
 8017166:	460b      	mov	r3, r1
 8017168:	4630      	mov	r0, r6
 801716a:	4639      	mov	r1, r7
 801716c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8017170:	f7e9 f88a 	bl	8000288 <__aeabi_dsub>
 8017174:	f805 6b01 	strb.w	r6, [r5], #1
 8017178:	eba5 060b 	sub.w	r6, r5, fp
 801717c:	45b1      	cmp	r9, r6
 801717e:	4602      	mov	r2, r0
 8017180:	460b      	mov	r3, r1
 8017182:	d139      	bne.n	80171f8 <_dtoa_r+0x6c8>
 8017184:	f7e9 f882 	bl	800028c <__adddf3>
 8017188:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801718c:	4606      	mov	r6, r0
 801718e:	460f      	mov	r7, r1
 8017190:	f7e9 fcc2 	bl	8000b18 <__aeabi_dcmpgt>
 8017194:	b9c8      	cbnz	r0, 80171ca <_dtoa_r+0x69a>
 8017196:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801719a:	4630      	mov	r0, r6
 801719c:	4639      	mov	r1, r7
 801719e:	f7e9 fc93 	bl	8000ac8 <__aeabi_dcmpeq>
 80171a2:	b110      	cbz	r0, 80171aa <_dtoa_r+0x67a>
 80171a4:	f018 0f01 	tst.w	r8, #1
 80171a8:	d10f      	bne.n	80171ca <_dtoa_r+0x69a>
 80171aa:	9904      	ldr	r1, [sp, #16]
 80171ac:	4620      	mov	r0, r4
 80171ae:	f000 fdf9 	bl	8017da4 <_Bfree>
 80171b2:	2300      	movs	r3, #0
 80171b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80171b6:	702b      	strb	r3, [r5, #0]
 80171b8:	f10a 0301 	add.w	r3, sl, #1
 80171bc:	6013      	str	r3, [r2, #0]
 80171be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80171c0:	2b00      	cmp	r3, #0
 80171c2:	f000 8241 	beq.w	8017648 <_dtoa_r+0xb18>
 80171c6:	601d      	str	r5, [r3, #0]
 80171c8:	e23e      	b.n	8017648 <_dtoa_r+0xb18>
 80171ca:	f8cd a020 	str.w	sl, [sp, #32]
 80171ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80171d2:	2a39      	cmp	r2, #57	; 0x39
 80171d4:	f105 33ff 	add.w	r3, r5, #4294967295
 80171d8:	d108      	bne.n	80171ec <_dtoa_r+0x6bc>
 80171da:	459b      	cmp	fp, r3
 80171dc:	d10a      	bne.n	80171f4 <_dtoa_r+0x6c4>
 80171de:	9b08      	ldr	r3, [sp, #32]
 80171e0:	3301      	adds	r3, #1
 80171e2:	9308      	str	r3, [sp, #32]
 80171e4:	2330      	movs	r3, #48	; 0x30
 80171e6:	f88b 3000 	strb.w	r3, [fp]
 80171ea:	465b      	mov	r3, fp
 80171ec:	781a      	ldrb	r2, [r3, #0]
 80171ee:	3201      	adds	r2, #1
 80171f0:	701a      	strb	r2, [r3, #0]
 80171f2:	e78c      	b.n	801710e <_dtoa_r+0x5de>
 80171f4:	461d      	mov	r5, r3
 80171f6:	e7ea      	b.n	80171ce <_dtoa_r+0x69e>
 80171f8:	2200      	movs	r2, #0
 80171fa:	4b9b      	ldr	r3, [pc, #620]	; (8017468 <_dtoa_r+0x938>)
 80171fc:	f7e9 f9fc 	bl	80005f8 <__aeabi_dmul>
 8017200:	2200      	movs	r2, #0
 8017202:	2300      	movs	r3, #0
 8017204:	4606      	mov	r6, r0
 8017206:	460f      	mov	r7, r1
 8017208:	f7e9 fc5e 	bl	8000ac8 <__aeabi_dcmpeq>
 801720c:	2800      	cmp	r0, #0
 801720e:	d09a      	beq.n	8017146 <_dtoa_r+0x616>
 8017210:	e7cb      	b.n	80171aa <_dtoa_r+0x67a>
 8017212:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017214:	2a00      	cmp	r2, #0
 8017216:	f000 808b 	beq.w	8017330 <_dtoa_r+0x800>
 801721a:	9a06      	ldr	r2, [sp, #24]
 801721c:	2a01      	cmp	r2, #1
 801721e:	dc6e      	bgt.n	80172fe <_dtoa_r+0x7ce>
 8017220:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017222:	2a00      	cmp	r2, #0
 8017224:	d067      	beq.n	80172f6 <_dtoa_r+0x7c6>
 8017226:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801722a:	9f07      	ldr	r7, [sp, #28]
 801722c:	9d05      	ldr	r5, [sp, #20]
 801722e:	9a05      	ldr	r2, [sp, #20]
 8017230:	2101      	movs	r1, #1
 8017232:	441a      	add	r2, r3
 8017234:	4620      	mov	r0, r4
 8017236:	9205      	str	r2, [sp, #20]
 8017238:	4498      	add	r8, r3
 801723a:	f000 fe91 	bl	8017f60 <__i2b>
 801723e:	4606      	mov	r6, r0
 8017240:	2d00      	cmp	r5, #0
 8017242:	dd0c      	ble.n	801725e <_dtoa_r+0x72e>
 8017244:	f1b8 0f00 	cmp.w	r8, #0
 8017248:	dd09      	ble.n	801725e <_dtoa_r+0x72e>
 801724a:	4545      	cmp	r5, r8
 801724c:	9a05      	ldr	r2, [sp, #20]
 801724e:	462b      	mov	r3, r5
 8017250:	bfa8      	it	ge
 8017252:	4643      	movge	r3, r8
 8017254:	1ad2      	subs	r2, r2, r3
 8017256:	9205      	str	r2, [sp, #20]
 8017258:	1aed      	subs	r5, r5, r3
 801725a:	eba8 0803 	sub.w	r8, r8, r3
 801725e:	9b07      	ldr	r3, [sp, #28]
 8017260:	b1eb      	cbz	r3, 801729e <_dtoa_r+0x76e>
 8017262:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017264:	2b00      	cmp	r3, #0
 8017266:	d067      	beq.n	8017338 <_dtoa_r+0x808>
 8017268:	b18f      	cbz	r7, 801728e <_dtoa_r+0x75e>
 801726a:	4631      	mov	r1, r6
 801726c:	463a      	mov	r2, r7
 801726e:	4620      	mov	r0, r4
 8017270:	f000 ff16 	bl	80180a0 <__pow5mult>
 8017274:	9a04      	ldr	r2, [sp, #16]
 8017276:	4601      	mov	r1, r0
 8017278:	4606      	mov	r6, r0
 801727a:	4620      	mov	r0, r4
 801727c:	f000 fe79 	bl	8017f72 <__multiply>
 8017280:	9904      	ldr	r1, [sp, #16]
 8017282:	9008      	str	r0, [sp, #32]
 8017284:	4620      	mov	r0, r4
 8017286:	f000 fd8d 	bl	8017da4 <_Bfree>
 801728a:	9b08      	ldr	r3, [sp, #32]
 801728c:	9304      	str	r3, [sp, #16]
 801728e:	9b07      	ldr	r3, [sp, #28]
 8017290:	1bda      	subs	r2, r3, r7
 8017292:	d004      	beq.n	801729e <_dtoa_r+0x76e>
 8017294:	9904      	ldr	r1, [sp, #16]
 8017296:	4620      	mov	r0, r4
 8017298:	f000 ff02 	bl	80180a0 <__pow5mult>
 801729c:	9004      	str	r0, [sp, #16]
 801729e:	2101      	movs	r1, #1
 80172a0:	4620      	mov	r0, r4
 80172a2:	f000 fe5d 	bl	8017f60 <__i2b>
 80172a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80172a8:	4607      	mov	r7, r0
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	f000 81d0 	beq.w	8017650 <_dtoa_r+0xb20>
 80172b0:	461a      	mov	r2, r3
 80172b2:	4601      	mov	r1, r0
 80172b4:	4620      	mov	r0, r4
 80172b6:	f000 fef3 	bl	80180a0 <__pow5mult>
 80172ba:	9b06      	ldr	r3, [sp, #24]
 80172bc:	2b01      	cmp	r3, #1
 80172be:	4607      	mov	r7, r0
 80172c0:	dc40      	bgt.n	8017344 <_dtoa_r+0x814>
 80172c2:	9b00      	ldr	r3, [sp, #0]
 80172c4:	2b00      	cmp	r3, #0
 80172c6:	d139      	bne.n	801733c <_dtoa_r+0x80c>
 80172c8:	9b01      	ldr	r3, [sp, #4]
 80172ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80172ce:	2b00      	cmp	r3, #0
 80172d0:	d136      	bne.n	8017340 <_dtoa_r+0x810>
 80172d2:	9b01      	ldr	r3, [sp, #4]
 80172d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80172d8:	0d1b      	lsrs	r3, r3, #20
 80172da:	051b      	lsls	r3, r3, #20
 80172dc:	b12b      	cbz	r3, 80172ea <_dtoa_r+0x7ba>
 80172de:	9b05      	ldr	r3, [sp, #20]
 80172e0:	3301      	adds	r3, #1
 80172e2:	9305      	str	r3, [sp, #20]
 80172e4:	f108 0801 	add.w	r8, r8, #1
 80172e8:	2301      	movs	r3, #1
 80172ea:	9307      	str	r3, [sp, #28]
 80172ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80172ee:	2b00      	cmp	r3, #0
 80172f0:	d12a      	bne.n	8017348 <_dtoa_r+0x818>
 80172f2:	2001      	movs	r0, #1
 80172f4:	e030      	b.n	8017358 <_dtoa_r+0x828>
 80172f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80172f8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80172fc:	e795      	b.n	801722a <_dtoa_r+0x6fa>
 80172fe:	9b07      	ldr	r3, [sp, #28]
 8017300:	f109 37ff 	add.w	r7, r9, #4294967295
 8017304:	42bb      	cmp	r3, r7
 8017306:	bfbf      	itttt	lt
 8017308:	9b07      	ldrlt	r3, [sp, #28]
 801730a:	9707      	strlt	r7, [sp, #28]
 801730c:	1afa      	sublt	r2, r7, r3
 801730e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8017310:	bfbb      	ittet	lt
 8017312:	189b      	addlt	r3, r3, r2
 8017314:	930e      	strlt	r3, [sp, #56]	; 0x38
 8017316:	1bdf      	subge	r7, r3, r7
 8017318:	2700      	movlt	r7, #0
 801731a:	f1b9 0f00 	cmp.w	r9, #0
 801731e:	bfb5      	itete	lt
 8017320:	9b05      	ldrlt	r3, [sp, #20]
 8017322:	9d05      	ldrge	r5, [sp, #20]
 8017324:	eba3 0509 	sublt.w	r5, r3, r9
 8017328:	464b      	movge	r3, r9
 801732a:	bfb8      	it	lt
 801732c:	2300      	movlt	r3, #0
 801732e:	e77e      	b.n	801722e <_dtoa_r+0x6fe>
 8017330:	9f07      	ldr	r7, [sp, #28]
 8017332:	9d05      	ldr	r5, [sp, #20]
 8017334:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8017336:	e783      	b.n	8017240 <_dtoa_r+0x710>
 8017338:	9a07      	ldr	r2, [sp, #28]
 801733a:	e7ab      	b.n	8017294 <_dtoa_r+0x764>
 801733c:	2300      	movs	r3, #0
 801733e:	e7d4      	b.n	80172ea <_dtoa_r+0x7ba>
 8017340:	9b00      	ldr	r3, [sp, #0]
 8017342:	e7d2      	b.n	80172ea <_dtoa_r+0x7ba>
 8017344:	2300      	movs	r3, #0
 8017346:	9307      	str	r3, [sp, #28]
 8017348:	693b      	ldr	r3, [r7, #16]
 801734a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801734e:	6918      	ldr	r0, [r3, #16]
 8017350:	f000 fdb8 	bl	8017ec4 <__hi0bits>
 8017354:	f1c0 0020 	rsb	r0, r0, #32
 8017358:	4440      	add	r0, r8
 801735a:	f010 001f 	ands.w	r0, r0, #31
 801735e:	d047      	beq.n	80173f0 <_dtoa_r+0x8c0>
 8017360:	f1c0 0320 	rsb	r3, r0, #32
 8017364:	2b04      	cmp	r3, #4
 8017366:	dd3b      	ble.n	80173e0 <_dtoa_r+0x8b0>
 8017368:	9b05      	ldr	r3, [sp, #20]
 801736a:	f1c0 001c 	rsb	r0, r0, #28
 801736e:	4403      	add	r3, r0
 8017370:	9305      	str	r3, [sp, #20]
 8017372:	4405      	add	r5, r0
 8017374:	4480      	add	r8, r0
 8017376:	9b05      	ldr	r3, [sp, #20]
 8017378:	2b00      	cmp	r3, #0
 801737a:	dd05      	ble.n	8017388 <_dtoa_r+0x858>
 801737c:	461a      	mov	r2, r3
 801737e:	9904      	ldr	r1, [sp, #16]
 8017380:	4620      	mov	r0, r4
 8017382:	f000 fedb 	bl	801813c <__lshift>
 8017386:	9004      	str	r0, [sp, #16]
 8017388:	f1b8 0f00 	cmp.w	r8, #0
 801738c:	dd05      	ble.n	801739a <_dtoa_r+0x86a>
 801738e:	4639      	mov	r1, r7
 8017390:	4642      	mov	r2, r8
 8017392:	4620      	mov	r0, r4
 8017394:	f000 fed2 	bl	801813c <__lshift>
 8017398:	4607      	mov	r7, r0
 801739a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801739c:	b353      	cbz	r3, 80173f4 <_dtoa_r+0x8c4>
 801739e:	4639      	mov	r1, r7
 80173a0:	9804      	ldr	r0, [sp, #16]
 80173a2:	f000 ff1f 	bl	80181e4 <__mcmp>
 80173a6:	2800      	cmp	r0, #0
 80173a8:	da24      	bge.n	80173f4 <_dtoa_r+0x8c4>
 80173aa:	2300      	movs	r3, #0
 80173ac:	220a      	movs	r2, #10
 80173ae:	9904      	ldr	r1, [sp, #16]
 80173b0:	4620      	mov	r0, r4
 80173b2:	f000 fd0e 	bl	8017dd2 <__multadd>
 80173b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80173b8:	9004      	str	r0, [sp, #16]
 80173ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80173be:	2b00      	cmp	r3, #0
 80173c0:	f000 814d 	beq.w	801765e <_dtoa_r+0xb2e>
 80173c4:	2300      	movs	r3, #0
 80173c6:	4631      	mov	r1, r6
 80173c8:	220a      	movs	r2, #10
 80173ca:	4620      	mov	r0, r4
 80173cc:	f000 fd01 	bl	8017dd2 <__multadd>
 80173d0:	9b02      	ldr	r3, [sp, #8]
 80173d2:	2b00      	cmp	r3, #0
 80173d4:	4606      	mov	r6, r0
 80173d6:	dc4f      	bgt.n	8017478 <_dtoa_r+0x948>
 80173d8:	9b06      	ldr	r3, [sp, #24]
 80173da:	2b02      	cmp	r3, #2
 80173dc:	dd4c      	ble.n	8017478 <_dtoa_r+0x948>
 80173de:	e011      	b.n	8017404 <_dtoa_r+0x8d4>
 80173e0:	d0c9      	beq.n	8017376 <_dtoa_r+0x846>
 80173e2:	9a05      	ldr	r2, [sp, #20]
 80173e4:	331c      	adds	r3, #28
 80173e6:	441a      	add	r2, r3
 80173e8:	9205      	str	r2, [sp, #20]
 80173ea:	441d      	add	r5, r3
 80173ec:	4498      	add	r8, r3
 80173ee:	e7c2      	b.n	8017376 <_dtoa_r+0x846>
 80173f0:	4603      	mov	r3, r0
 80173f2:	e7f6      	b.n	80173e2 <_dtoa_r+0x8b2>
 80173f4:	f1b9 0f00 	cmp.w	r9, #0
 80173f8:	dc38      	bgt.n	801746c <_dtoa_r+0x93c>
 80173fa:	9b06      	ldr	r3, [sp, #24]
 80173fc:	2b02      	cmp	r3, #2
 80173fe:	dd35      	ble.n	801746c <_dtoa_r+0x93c>
 8017400:	f8cd 9008 	str.w	r9, [sp, #8]
 8017404:	9b02      	ldr	r3, [sp, #8]
 8017406:	b963      	cbnz	r3, 8017422 <_dtoa_r+0x8f2>
 8017408:	4639      	mov	r1, r7
 801740a:	2205      	movs	r2, #5
 801740c:	4620      	mov	r0, r4
 801740e:	f000 fce0 	bl	8017dd2 <__multadd>
 8017412:	4601      	mov	r1, r0
 8017414:	4607      	mov	r7, r0
 8017416:	9804      	ldr	r0, [sp, #16]
 8017418:	f000 fee4 	bl	80181e4 <__mcmp>
 801741c:	2800      	cmp	r0, #0
 801741e:	f73f adcc 	bgt.w	8016fba <_dtoa_r+0x48a>
 8017422:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017424:	465d      	mov	r5, fp
 8017426:	ea6f 0a03 	mvn.w	sl, r3
 801742a:	f04f 0900 	mov.w	r9, #0
 801742e:	4639      	mov	r1, r7
 8017430:	4620      	mov	r0, r4
 8017432:	f000 fcb7 	bl	8017da4 <_Bfree>
 8017436:	2e00      	cmp	r6, #0
 8017438:	f43f aeb7 	beq.w	80171aa <_dtoa_r+0x67a>
 801743c:	f1b9 0f00 	cmp.w	r9, #0
 8017440:	d005      	beq.n	801744e <_dtoa_r+0x91e>
 8017442:	45b1      	cmp	r9, r6
 8017444:	d003      	beq.n	801744e <_dtoa_r+0x91e>
 8017446:	4649      	mov	r1, r9
 8017448:	4620      	mov	r0, r4
 801744a:	f000 fcab 	bl	8017da4 <_Bfree>
 801744e:	4631      	mov	r1, r6
 8017450:	4620      	mov	r0, r4
 8017452:	f000 fca7 	bl	8017da4 <_Bfree>
 8017456:	e6a8      	b.n	80171aa <_dtoa_r+0x67a>
 8017458:	2700      	movs	r7, #0
 801745a:	463e      	mov	r6, r7
 801745c:	e7e1      	b.n	8017422 <_dtoa_r+0x8f2>
 801745e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017462:	463e      	mov	r6, r7
 8017464:	e5a9      	b.n	8016fba <_dtoa_r+0x48a>
 8017466:	bf00      	nop
 8017468:	40240000 	.word	0x40240000
 801746c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801746e:	f8cd 9008 	str.w	r9, [sp, #8]
 8017472:	2b00      	cmp	r3, #0
 8017474:	f000 80fa 	beq.w	801766c <_dtoa_r+0xb3c>
 8017478:	2d00      	cmp	r5, #0
 801747a:	dd05      	ble.n	8017488 <_dtoa_r+0x958>
 801747c:	4631      	mov	r1, r6
 801747e:	462a      	mov	r2, r5
 8017480:	4620      	mov	r0, r4
 8017482:	f000 fe5b 	bl	801813c <__lshift>
 8017486:	4606      	mov	r6, r0
 8017488:	9b07      	ldr	r3, [sp, #28]
 801748a:	2b00      	cmp	r3, #0
 801748c:	d04c      	beq.n	8017528 <_dtoa_r+0x9f8>
 801748e:	6871      	ldr	r1, [r6, #4]
 8017490:	4620      	mov	r0, r4
 8017492:	f000 fc53 	bl	8017d3c <_Balloc>
 8017496:	6932      	ldr	r2, [r6, #16]
 8017498:	3202      	adds	r2, #2
 801749a:	4605      	mov	r5, r0
 801749c:	0092      	lsls	r2, r2, #2
 801749e:	f106 010c 	add.w	r1, r6, #12
 80174a2:	300c      	adds	r0, #12
 80174a4:	f7fd fc8a 	bl	8014dbc <memcpy>
 80174a8:	2201      	movs	r2, #1
 80174aa:	4629      	mov	r1, r5
 80174ac:	4620      	mov	r0, r4
 80174ae:	f000 fe45 	bl	801813c <__lshift>
 80174b2:	9b00      	ldr	r3, [sp, #0]
 80174b4:	f8cd b014 	str.w	fp, [sp, #20]
 80174b8:	f003 0301 	and.w	r3, r3, #1
 80174bc:	46b1      	mov	r9, r6
 80174be:	9307      	str	r3, [sp, #28]
 80174c0:	4606      	mov	r6, r0
 80174c2:	4639      	mov	r1, r7
 80174c4:	9804      	ldr	r0, [sp, #16]
 80174c6:	f7ff faa5 	bl	8016a14 <quorem>
 80174ca:	4649      	mov	r1, r9
 80174cc:	4605      	mov	r5, r0
 80174ce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80174d2:	9804      	ldr	r0, [sp, #16]
 80174d4:	f000 fe86 	bl	80181e4 <__mcmp>
 80174d8:	4632      	mov	r2, r6
 80174da:	9000      	str	r0, [sp, #0]
 80174dc:	4639      	mov	r1, r7
 80174de:	4620      	mov	r0, r4
 80174e0:	f000 fe9a 	bl	8018218 <__mdiff>
 80174e4:	68c3      	ldr	r3, [r0, #12]
 80174e6:	4602      	mov	r2, r0
 80174e8:	bb03      	cbnz	r3, 801752c <_dtoa_r+0x9fc>
 80174ea:	4601      	mov	r1, r0
 80174ec:	9008      	str	r0, [sp, #32]
 80174ee:	9804      	ldr	r0, [sp, #16]
 80174f0:	f000 fe78 	bl	80181e4 <__mcmp>
 80174f4:	9a08      	ldr	r2, [sp, #32]
 80174f6:	4603      	mov	r3, r0
 80174f8:	4611      	mov	r1, r2
 80174fa:	4620      	mov	r0, r4
 80174fc:	9308      	str	r3, [sp, #32]
 80174fe:	f000 fc51 	bl	8017da4 <_Bfree>
 8017502:	9b08      	ldr	r3, [sp, #32]
 8017504:	b9a3      	cbnz	r3, 8017530 <_dtoa_r+0xa00>
 8017506:	9a06      	ldr	r2, [sp, #24]
 8017508:	b992      	cbnz	r2, 8017530 <_dtoa_r+0xa00>
 801750a:	9a07      	ldr	r2, [sp, #28]
 801750c:	b982      	cbnz	r2, 8017530 <_dtoa_r+0xa00>
 801750e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017512:	d029      	beq.n	8017568 <_dtoa_r+0xa38>
 8017514:	9b00      	ldr	r3, [sp, #0]
 8017516:	2b00      	cmp	r3, #0
 8017518:	dd01      	ble.n	801751e <_dtoa_r+0x9ee>
 801751a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 801751e:	9b05      	ldr	r3, [sp, #20]
 8017520:	1c5d      	adds	r5, r3, #1
 8017522:	f883 8000 	strb.w	r8, [r3]
 8017526:	e782      	b.n	801742e <_dtoa_r+0x8fe>
 8017528:	4630      	mov	r0, r6
 801752a:	e7c2      	b.n	80174b2 <_dtoa_r+0x982>
 801752c:	2301      	movs	r3, #1
 801752e:	e7e3      	b.n	80174f8 <_dtoa_r+0x9c8>
 8017530:	9a00      	ldr	r2, [sp, #0]
 8017532:	2a00      	cmp	r2, #0
 8017534:	db04      	blt.n	8017540 <_dtoa_r+0xa10>
 8017536:	d125      	bne.n	8017584 <_dtoa_r+0xa54>
 8017538:	9a06      	ldr	r2, [sp, #24]
 801753a:	bb1a      	cbnz	r2, 8017584 <_dtoa_r+0xa54>
 801753c:	9a07      	ldr	r2, [sp, #28]
 801753e:	bb0a      	cbnz	r2, 8017584 <_dtoa_r+0xa54>
 8017540:	2b00      	cmp	r3, #0
 8017542:	ddec      	ble.n	801751e <_dtoa_r+0x9ee>
 8017544:	2201      	movs	r2, #1
 8017546:	9904      	ldr	r1, [sp, #16]
 8017548:	4620      	mov	r0, r4
 801754a:	f000 fdf7 	bl	801813c <__lshift>
 801754e:	4639      	mov	r1, r7
 8017550:	9004      	str	r0, [sp, #16]
 8017552:	f000 fe47 	bl	80181e4 <__mcmp>
 8017556:	2800      	cmp	r0, #0
 8017558:	dc03      	bgt.n	8017562 <_dtoa_r+0xa32>
 801755a:	d1e0      	bne.n	801751e <_dtoa_r+0x9ee>
 801755c:	f018 0f01 	tst.w	r8, #1
 8017560:	d0dd      	beq.n	801751e <_dtoa_r+0x9ee>
 8017562:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017566:	d1d8      	bne.n	801751a <_dtoa_r+0x9ea>
 8017568:	9b05      	ldr	r3, [sp, #20]
 801756a:	9a05      	ldr	r2, [sp, #20]
 801756c:	1c5d      	adds	r5, r3, #1
 801756e:	2339      	movs	r3, #57	; 0x39
 8017570:	7013      	strb	r3, [r2, #0]
 8017572:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017576:	2b39      	cmp	r3, #57	; 0x39
 8017578:	f105 32ff 	add.w	r2, r5, #4294967295
 801757c:	d04f      	beq.n	801761e <_dtoa_r+0xaee>
 801757e:	3301      	adds	r3, #1
 8017580:	7013      	strb	r3, [r2, #0]
 8017582:	e754      	b.n	801742e <_dtoa_r+0x8fe>
 8017584:	9a05      	ldr	r2, [sp, #20]
 8017586:	2b00      	cmp	r3, #0
 8017588:	f102 0501 	add.w	r5, r2, #1
 801758c:	dd06      	ble.n	801759c <_dtoa_r+0xa6c>
 801758e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017592:	d0e9      	beq.n	8017568 <_dtoa_r+0xa38>
 8017594:	f108 0801 	add.w	r8, r8, #1
 8017598:	9b05      	ldr	r3, [sp, #20]
 801759a:	e7c2      	b.n	8017522 <_dtoa_r+0x9f2>
 801759c:	9a02      	ldr	r2, [sp, #8]
 801759e:	f805 8c01 	strb.w	r8, [r5, #-1]
 80175a2:	eba5 030b 	sub.w	r3, r5, fp
 80175a6:	4293      	cmp	r3, r2
 80175a8:	d021      	beq.n	80175ee <_dtoa_r+0xabe>
 80175aa:	2300      	movs	r3, #0
 80175ac:	220a      	movs	r2, #10
 80175ae:	9904      	ldr	r1, [sp, #16]
 80175b0:	4620      	mov	r0, r4
 80175b2:	f000 fc0e 	bl	8017dd2 <__multadd>
 80175b6:	45b1      	cmp	r9, r6
 80175b8:	9004      	str	r0, [sp, #16]
 80175ba:	f04f 0300 	mov.w	r3, #0
 80175be:	f04f 020a 	mov.w	r2, #10
 80175c2:	4649      	mov	r1, r9
 80175c4:	4620      	mov	r0, r4
 80175c6:	d105      	bne.n	80175d4 <_dtoa_r+0xaa4>
 80175c8:	f000 fc03 	bl	8017dd2 <__multadd>
 80175cc:	4681      	mov	r9, r0
 80175ce:	4606      	mov	r6, r0
 80175d0:	9505      	str	r5, [sp, #20]
 80175d2:	e776      	b.n	80174c2 <_dtoa_r+0x992>
 80175d4:	f000 fbfd 	bl	8017dd2 <__multadd>
 80175d8:	4631      	mov	r1, r6
 80175da:	4681      	mov	r9, r0
 80175dc:	2300      	movs	r3, #0
 80175de:	220a      	movs	r2, #10
 80175e0:	4620      	mov	r0, r4
 80175e2:	f000 fbf6 	bl	8017dd2 <__multadd>
 80175e6:	4606      	mov	r6, r0
 80175e8:	e7f2      	b.n	80175d0 <_dtoa_r+0xaa0>
 80175ea:	f04f 0900 	mov.w	r9, #0
 80175ee:	2201      	movs	r2, #1
 80175f0:	9904      	ldr	r1, [sp, #16]
 80175f2:	4620      	mov	r0, r4
 80175f4:	f000 fda2 	bl	801813c <__lshift>
 80175f8:	4639      	mov	r1, r7
 80175fa:	9004      	str	r0, [sp, #16]
 80175fc:	f000 fdf2 	bl	80181e4 <__mcmp>
 8017600:	2800      	cmp	r0, #0
 8017602:	dcb6      	bgt.n	8017572 <_dtoa_r+0xa42>
 8017604:	d102      	bne.n	801760c <_dtoa_r+0xadc>
 8017606:	f018 0f01 	tst.w	r8, #1
 801760a:	d1b2      	bne.n	8017572 <_dtoa_r+0xa42>
 801760c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017610:	2b30      	cmp	r3, #48	; 0x30
 8017612:	f105 32ff 	add.w	r2, r5, #4294967295
 8017616:	f47f af0a 	bne.w	801742e <_dtoa_r+0x8fe>
 801761a:	4615      	mov	r5, r2
 801761c:	e7f6      	b.n	801760c <_dtoa_r+0xadc>
 801761e:	4593      	cmp	fp, r2
 8017620:	d105      	bne.n	801762e <_dtoa_r+0xafe>
 8017622:	2331      	movs	r3, #49	; 0x31
 8017624:	f10a 0a01 	add.w	sl, sl, #1
 8017628:	f88b 3000 	strb.w	r3, [fp]
 801762c:	e6ff      	b.n	801742e <_dtoa_r+0x8fe>
 801762e:	4615      	mov	r5, r2
 8017630:	e79f      	b.n	8017572 <_dtoa_r+0xa42>
 8017632:	f8df b064 	ldr.w	fp, [pc, #100]	; 8017698 <_dtoa_r+0xb68>
 8017636:	e007      	b.n	8017648 <_dtoa_r+0xb18>
 8017638:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801763a:	f8df b060 	ldr.w	fp, [pc, #96]	; 801769c <_dtoa_r+0xb6c>
 801763e:	b11b      	cbz	r3, 8017648 <_dtoa_r+0xb18>
 8017640:	f10b 0308 	add.w	r3, fp, #8
 8017644:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017646:	6013      	str	r3, [r2, #0]
 8017648:	4658      	mov	r0, fp
 801764a:	b017      	add	sp, #92	; 0x5c
 801764c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017650:	9b06      	ldr	r3, [sp, #24]
 8017652:	2b01      	cmp	r3, #1
 8017654:	f77f ae35 	ble.w	80172c2 <_dtoa_r+0x792>
 8017658:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801765a:	9307      	str	r3, [sp, #28]
 801765c:	e649      	b.n	80172f2 <_dtoa_r+0x7c2>
 801765e:	9b02      	ldr	r3, [sp, #8]
 8017660:	2b00      	cmp	r3, #0
 8017662:	dc03      	bgt.n	801766c <_dtoa_r+0xb3c>
 8017664:	9b06      	ldr	r3, [sp, #24]
 8017666:	2b02      	cmp	r3, #2
 8017668:	f73f aecc 	bgt.w	8017404 <_dtoa_r+0x8d4>
 801766c:	465d      	mov	r5, fp
 801766e:	4639      	mov	r1, r7
 8017670:	9804      	ldr	r0, [sp, #16]
 8017672:	f7ff f9cf 	bl	8016a14 <quorem>
 8017676:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801767a:	f805 8b01 	strb.w	r8, [r5], #1
 801767e:	9a02      	ldr	r2, [sp, #8]
 8017680:	eba5 030b 	sub.w	r3, r5, fp
 8017684:	429a      	cmp	r2, r3
 8017686:	ddb0      	ble.n	80175ea <_dtoa_r+0xaba>
 8017688:	2300      	movs	r3, #0
 801768a:	220a      	movs	r2, #10
 801768c:	9904      	ldr	r1, [sp, #16]
 801768e:	4620      	mov	r0, r4
 8017690:	f000 fb9f 	bl	8017dd2 <__multadd>
 8017694:	9004      	str	r0, [sp, #16]
 8017696:	e7ea      	b.n	801766e <_dtoa_r+0xb3e>
 8017698:	0801a588 	.word	0x0801a588
 801769c:	0801a608 	.word	0x0801a608

080176a0 <rshift>:
 80176a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80176a2:	6906      	ldr	r6, [r0, #16]
 80176a4:	114b      	asrs	r3, r1, #5
 80176a6:	429e      	cmp	r6, r3
 80176a8:	f100 0414 	add.w	r4, r0, #20
 80176ac:	dd30      	ble.n	8017710 <rshift+0x70>
 80176ae:	f011 011f 	ands.w	r1, r1, #31
 80176b2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80176b6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80176ba:	d108      	bne.n	80176ce <rshift+0x2e>
 80176bc:	4621      	mov	r1, r4
 80176be:	42b2      	cmp	r2, r6
 80176c0:	460b      	mov	r3, r1
 80176c2:	d211      	bcs.n	80176e8 <rshift+0x48>
 80176c4:	f852 3b04 	ldr.w	r3, [r2], #4
 80176c8:	f841 3b04 	str.w	r3, [r1], #4
 80176cc:	e7f7      	b.n	80176be <rshift+0x1e>
 80176ce:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80176d2:	f1c1 0c20 	rsb	ip, r1, #32
 80176d6:	40cd      	lsrs	r5, r1
 80176d8:	3204      	adds	r2, #4
 80176da:	4623      	mov	r3, r4
 80176dc:	42b2      	cmp	r2, r6
 80176de:	4617      	mov	r7, r2
 80176e0:	d30c      	bcc.n	80176fc <rshift+0x5c>
 80176e2:	601d      	str	r5, [r3, #0]
 80176e4:	b105      	cbz	r5, 80176e8 <rshift+0x48>
 80176e6:	3304      	adds	r3, #4
 80176e8:	1b1a      	subs	r2, r3, r4
 80176ea:	42a3      	cmp	r3, r4
 80176ec:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80176f0:	bf08      	it	eq
 80176f2:	2300      	moveq	r3, #0
 80176f4:	6102      	str	r2, [r0, #16]
 80176f6:	bf08      	it	eq
 80176f8:	6143      	streq	r3, [r0, #20]
 80176fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80176fc:	683f      	ldr	r7, [r7, #0]
 80176fe:	fa07 f70c 	lsl.w	r7, r7, ip
 8017702:	433d      	orrs	r5, r7
 8017704:	f843 5b04 	str.w	r5, [r3], #4
 8017708:	f852 5b04 	ldr.w	r5, [r2], #4
 801770c:	40cd      	lsrs	r5, r1
 801770e:	e7e5      	b.n	80176dc <rshift+0x3c>
 8017710:	4623      	mov	r3, r4
 8017712:	e7e9      	b.n	80176e8 <rshift+0x48>

08017714 <__hexdig_fun>:
 8017714:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8017718:	2b09      	cmp	r3, #9
 801771a:	d802      	bhi.n	8017722 <__hexdig_fun+0xe>
 801771c:	3820      	subs	r0, #32
 801771e:	b2c0      	uxtb	r0, r0
 8017720:	4770      	bx	lr
 8017722:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8017726:	2b05      	cmp	r3, #5
 8017728:	d801      	bhi.n	801772e <__hexdig_fun+0x1a>
 801772a:	3847      	subs	r0, #71	; 0x47
 801772c:	e7f7      	b.n	801771e <__hexdig_fun+0xa>
 801772e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8017732:	2b05      	cmp	r3, #5
 8017734:	d801      	bhi.n	801773a <__hexdig_fun+0x26>
 8017736:	3827      	subs	r0, #39	; 0x27
 8017738:	e7f1      	b.n	801771e <__hexdig_fun+0xa>
 801773a:	2000      	movs	r0, #0
 801773c:	4770      	bx	lr

0801773e <__gethex>:
 801773e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017742:	b08b      	sub	sp, #44	; 0x2c
 8017744:	468a      	mov	sl, r1
 8017746:	9002      	str	r0, [sp, #8]
 8017748:	9816      	ldr	r0, [sp, #88]	; 0x58
 801774a:	9306      	str	r3, [sp, #24]
 801774c:	4690      	mov	r8, r2
 801774e:	f000 fad0 	bl	8017cf2 <__localeconv_l>
 8017752:	6803      	ldr	r3, [r0, #0]
 8017754:	9303      	str	r3, [sp, #12]
 8017756:	4618      	mov	r0, r3
 8017758:	f7e8 fd3a 	bl	80001d0 <strlen>
 801775c:	9b03      	ldr	r3, [sp, #12]
 801775e:	9001      	str	r0, [sp, #4]
 8017760:	4403      	add	r3, r0
 8017762:	f04f 0b00 	mov.w	fp, #0
 8017766:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801776a:	9307      	str	r3, [sp, #28]
 801776c:	f8da 3000 	ldr.w	r3, [sl]
 8017770:	3302      	adds	r3, #2
 8017772:	461f      	mov	r7, r3
 8017774:	f813 0b01 	ldrb.w	r0, [r3], #1
 8017778:	2830      	cmp	r0, #48	; 0x30
 801777a:	d06c      	beq.n	8017856 <__gethex+0x118>
 801777c:	f7ff ffca 	bl	8017714 <__hexdig_fun>
 8017780:	4604      	mov	r4, r0
 8017782:	2800      	cmp	r0, #0
 8017784:	d16a      	bne.n	801785c <__gethex+0x11e>
 8017786:	9a01      	ldr	r2, [sp, #4]
 8017788:	9903      	ldr	r1, [sp, #12]
 801778a:	4638      	mov	r0, r7
 801778c:	f001 f836 	bl	80187fc <strncmp>
 8017790:	2800      	cmp	r0, #0
 8017792:	d166      	bne.n	8017862 <__gethex+0x124>
 8017794:	9b01      	ldr	r3, [sp, #4]
 8017796:	5cf8      	ldrb	r0, [r7, r3]
 8017798:	18fe      	adds	r6, r7, r3
 801779a:	f7ff ffbb 	bl	8017714 <__hexdig_fun>
 801779e:	2800      	cmp	r0, #0
 80177a0:	d062      	beq.n	8017868 <__gethex+0x12a>
 80177a2:	4633      	mov	r3, r6
 80177a4:	7818      	ldrb	r0, [r3, #0]
 80177a6:	2830      	cmp	r0, #48	; 0x30
 80177a8:	461f      	mov	r7, r3
 80177aa:	f103 0301 	add.w	r3, r3, #1
 80177ae:	d0f9      	beq.n	80177a4 <__gethex+0x66>
 80177b0:	f7ff ffb0 	bl	8017714 <__hexdig_fun>
 80177b4:	fab0 f580 	clz	r5, r0
 80177b8:	096d      	lsrs	r5, r5, #5
 80177ba:	4634      	mov	r4, r6
 80177bc:	f04f 0b01 	mov.w	fp, #1
 80177c0:	463a      	mov	r2, r7
 80177c2:	4616      	mov	r6, r2
 80177c4:	3201      	adds	r2, #1
 80177c6:	7830      	ldrb	r0, [r6, #0]
 80177c8:	f7ff ffa4 	bl	8017714 <__hexdig_fun>
 80177cc:	2800      	cmp	r0, #0
 80177ce:	d1f8      	bne.n	80177c2 <__gethex+0x84>
 80177d0:	9a01      	ldr	r2, [sp, #4]
 80177d2:	9903      	ldr	r1, [sp, #12]
 80177d4:	4630      	mov	r0, r6
 80177d6:	f001 f811 	bl	80187fc <strncmp>
 80177da:	b950      	cbnz	r0, 80177f2 <__gethex+0xb4>
 80177dc:	b954      	cbnz	r4, 80177f4 <__gethex+0xb6>
 80177de:	9b01      	ldr	r3, [sp, #4]
 80177e0:	18f4      	adds	r4, r6, r3
 80177e2:	4622      	mov	r2, r4
 80177e4:	4616      	mov	r6, r2
 80177e6:	3201      	adds	r2, #1
 80177e8:	7830      	ldrb	r0, [r6, #0]
 80177ea:	f7ff ff93 	bl	8017714 <__hexdig_fun>
 80177ee:	2800      	cmp	r0, #0
 80177f0:	d1f8      	bne.n	80177e4 <__gethex+0xa6>
 80177f2:	b10c      	cbz	r4, 80177f8 <__gethex+0xba>
 80177f4:	1ba4      	subs	r4, r4, r6
 80177f6:	00a4      	lsls	r4, r4, #2
 80177f8:	7833      	ldrb	r3, [r6, #0]
 80177fa:	2b50      	cmp	r3, #80	; 0x50
 80177fc:	d001      	beq.n	8017802 <__gethex+0xc4>
 80177fe:	2b70      	cmp	r3, #112	; 0x70
 8017800:	d140      	bne.n	8017884 <__gethex+0x146>
 8017802:	7873      	ldrb	r3, [r6, #1]
 8017804:	2b2b      	cmp	r3, #43	; 0x2b
 8017806:	d031      	beq.n	801786c <__gethex+0x12e>
 8017808:	2b2d      	cmp	r3, #45	; 0x2d
 801780a:	d033      	beq.n	8017874 <__gethex+0x136>
 801780c:	1c71      	adds	r1, r6, #1
 801780e:	f04f 0900 	mov.w	r9, #0
 8017812:	7808      	ldrb	r0, [r1, #0]
 8017814:	f7ff ff7e 	bl	8017714 <__hexdig_fun>
 8017818:	1e43      	subs	r3, r0, #1
 801781a:	b2db      	uxtb	r3, r3
 801781c:	2b18      	cmp	r3, #24
 801781e:	d831      	bhi.n	8017884 <__gethex+0x146>
 8017820:	f1a0 0210 	sub.w	r2, r0, #16
 8017824:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017828:	f7ff ff74 	bl	8017714 <__hexdig_fun>
 801782c:	1e43      	subs	r3, r0, #1
 801782e:	b2db      	uxtb	r3, r3
 8017830:	2b18      	cmp	r3, #24
 8017832:	d922      	bls.n	801787a <__gethex+0x13c>
 8017834:	f1b9 0f00 	cmp.w	r9, #0
 8017838:	d000      	beq.n	801783c <__gethex+0xfe>
 801783a:	4252      	negs	r2, r2
 801783c:	4414      	add	r4, r2
 801783e:	f8ca 1000 	str.w	r1, [sl]
 8017842:	b30d      	cbz	r5, 8017888 <__gethex+0x14a>
 8017844:	f1bb 0f00 	cmp.w	fp, #0
 8017848:	bf0c      	ite	eq
 801784a:	2706      	moveq	r7, #6
 801784c:	2700      	movne	r7, #0
 801784e:	4638      	mov	r0, r7
 8017850:	b00b      	add	sp, #44	; 0x2c
 8017852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017856:	f10b 0b01 	add.w	fp, fp, #1
 801785a:	e78a      	b.n	8017772 <__gethex+0x34>
 801785c:	2500      	movs	r5, #0
 801785e:	462c      	mov	r4, r5
 8017860:	e7ae      	b.n	80177c0 <__gethex+0x82>
 8017862:	463e      	mov	r6, r7
 8017864:	2501      	movs	r5, #1
 8017866:	e7c7      	b.n	80177f8 <__gethex+0xba>
 8017868:	4604      	mov	r4, r0
 801786a:	e7fb      	b.n	8017864 <__gethex+0x126>
 801786c:	f04f 0900 	mov.w	r9, #0
 8017870:	1cb1      	adds	r1, r6, #2
 8017872:	e7ce      	b.n	8017812 <__gethex+0xd4>
 8017874:	f04f 0901 	mov.w	r9, #1
 8017878:	e7fa      	b.n	8017870 <__gethex+0x132>
 801787a:	230a      	movs	r3, #10
 801787c:	fb03 0202 	mla	r2, r3, r2, r0
 8017880:	3a10      	subs	r2, #16
 8017882:	e7cf      	b.n	8017824 <__gethex+0xe6>
 8017884:	4631      	mov	r1, r6
 8017886:	e7da      	b.n	801783e <__gethex+0x100>
 8017888:	1bf3      	subs	r3, r6, r7
 801788a:	3b01      	subs	r3, #1
 801788c:	4629      	mov	r1, r5
 801788e:	2b07      	cmp	r3, #7
 8017890:	dc49      	bgt.n	8017926 <__gethex+0x1e8>
 8017892:	9802      	ldr	r0, [sp, #8]
 8017894:	f000 fa52 	bl	8017d3c <_Balloc>
 8017898:	9b01      	ldr	r3, [sp, #4]
 801789a:	f100 0914 	add.w	r9, r0, #20
 801789e:	f04f 0b00 	mov.w	fp, #0
 80178a2:	f1c3 0301 	rsb	r3, r3, #1
 80178a6:	4605      	mov	r5, r0
 80178a8:	f8cd 9010 	str.w	r9, [sp, #16]
 80178ac:	46da      	mov	sl, fp
 80178ae:	9308      	str	r3, [sp, #32]
 80178b0:	42b7      	cmp	r7, r6
 80178b2:	d33b      	bcc.n	801792c <__gethex+0x1ee>
 80178b4:	9804      	ldr	r0, [sp, #16]
 80178b6:	f840 ab04 	str.w	sl, [r0], #4
 80178ba:	eba0 0009 	sub.w	r0, r0, r9
 80178be:	1080      	asrs	r0, r0, #2
 80178c0:	6128      	str	r0, [r5, #16]
 80178c2:	0147      	lsls	r7, r0, #5
 80178c4:	4650      	mov	r0, sl
 80178c6:	f000 fafd 	bl	8017ec4 <__hi0bits>
 80178ca:	f8d8 6000 	ldr.w	r6, [r8]
 80178ce:	1a3f      	subs	r7, r7, r0
 80178d0:	42b7      	cmp	r7, r6
 80178d2:	dd64      	ble.n	801799e <__gethex+0x260>
 80178d4:	1bbf      	subs	r7, r7, r6
 80178d6:	4639      	mov	r1, r7
 80178d8:	4628      	mov	r0, r5
 80178da:	f000 fe0d 	bl	80184f8 <__any_on>
 80178de:	4682      	mov	sl, r0
 80178e0:	b178      	cbz	r0, 8017902 <__gethex+0x1c4>
 80178e2:	1e7b      	subs	r3, r7, #1
 80178e4:	1159      	asrs	r1, r3, #5
 80178e6:	f003 021f 	and.w	r2, r3, #31
 80178ea:	f04f 0a01 	mov.w	sl, #1
 80178ee:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80178f2:	fa0a f202 	lsl.w	r2, sl, r2
 80178f6:	420a      	tst	r2, r1
 80178f8:	d003      	beq.n	8017902 <__gethex+0x1c4>
 80178fa:	4553      	cmp	r3, sl
 80178fc:	dc46      	bgt.n	801798c <__gethex+0x24e>
 80178fe:	f04f 0a02 	mov.w	sl, #2
 8017902:	4639      	mov	r1, r7
 8017904:	4628      	mov	r0, r5
 8017906:	f7ff fecb 	bl	80176a0 <rshift>
 801790a:	443c      	add	r4, r7
 801790c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017910:	42a3      	cmp	r3, r4
 8017912:	da52      	bge.n	80179ba <__gethex+0x27c>
 8017914:	4629      	mov	r1, r5
 8017916:	9802      	ldr	r0, [sp, #8]
 8017918:	f000 fa44 	bl	8017da4 <_Bfree>
 801791c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801791e:	2300      	movs	r3, #0
 8017920:	6013      	str	r3, [r2, #0]
 8017922:	27a3      	movs	r7, #163	; 0xa3
 8017924:	e793      	b.n	801784e <__gethex+0x110>
 8017926:	3101      	adds	r1, #1
 8017928:	105b      	asrs	r3, r3, #1
 801792a:	e7b0      	b.n	801788e <__gethex+0x150>
 801792c:	1e73      	subs	r3, r6, #1
 801792e:	9305      	str	r3, [sp, #20]
 8017930:	9a07      	ldr	r2, [sp, #28]
 8017932:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8017936:	4293      	cmp	r3, r2
 8017938:	d018      	beq.n	801796c <__gethex+0x22e>
 801793a:	f1bb 0f20 	cmp.w	fp, #32
 801793e:	d107      	bne.n	8017950 <__gethex+0x212>
 8017940:	9b04      	ldr	r3, [sp, #16]
 8017942:	f8c3 a000 	str.w	sl, [r3]
 8017946:	3304      	adds	r3, #4
 8017948:	f04f 0a00 	mov.w	sl, #0
 801794c:	9304      	str	r3, [sp, #16]
 801794e:	46d3      	mov	fp, sl
 8017950:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8017954:	f7ff fede 	bl	8017714 <__hexdig_fun>
 8017958:	f000 000f 	and.w	r0, r0, #15
 801795c:	fa00 f00b 	lsl.w	r0, r0, fp
 8017960:	ea4a 0a00 	orr.w	sl, sl, r0
 8017964:	f10b 0b04 	add.w	fp, fp, #4
 8017968:	9b05      	ldr	r3, [sp, #20]
 801796a:	e00d      	b.n	8017988 <__gethex+0x24a>
 801796c:	9b05      	ldr	r3, [sp, #20]
 801796e:	9a08      	ldr	r2, [sp, #32]
 8017970:	4413      	add	r3, r2
 8017972:	42bb      	cmp	r3, r7
 8017974:	d3e1      	bcc.n	801793a <__gethex+0x1fc>
 8017976:	4618      	mov	r0, r3
 8017978:	9a01      	ldr	r2, [sp, #4]
 801797a:	9903      	ldr	r1, [sp, #12]
 801797c:	9309      	str	r3, [sp, #36]	; 0x24
 801797e:	f000 ff3d 	bl	80187fc <strncmp>
 8017982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017984:	2800      	cmp	r0, #0
 8017986:	d1d8      	bne.n	801793a <__gethex+0x1fc>
 8017988:	461e      	mov	r6, r3
 801798a:	e791      	b.n	80178b0 <__gethex+0x172>
 801798c:	1eb9      	subs	r1, r7, #2
 801798e:	4628      	mov	r0, r5
 8017990:	f000 fdb2 	bl	80184f8 <__any_on>
 8017994:	2800      	cmp	r0, #0
 8017996:	d0b2      	beq.n	80178fe <__gethex+0x1c0>
 8017998:	f04f 0a03 	mov.w	sl, #3
 801799c:	e7b1      	b.n	8017902 <__gethex+0x1c4>
 801799e:	da09      	bge.n	80179b4 <__gethex+0x276>
 80179a0:	1bf7      	subs	r7, r6, r7
 80179a2:	4629      	mov	r1, r5
 80179a4:	463a      	mov	r2, r7
 80179a6:	9802      	ldr	r0, [sp, #8]
 80179a8:	f000 fbc8 	bl	801813c <__lshift>
 80179ac:	1be4      	subs	r4, r4, r7
 80179ae:	4605      	mov	r5, r0
 80179b0:	f100 0914 	add.w	r9, r0, #20
 80179b4:	f04f 0a00 	mov.w	sl, #0
 80179b8:	e7a8      	b.n	801790c <__gethex+0x1ce>
 80179ba:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80179be:	42a0      	cmp	r0, r4
 80179c0:	dd6a      	ble.n	8017a98 <__gethex+0x35a>
 80179c2:	1b04      	subs	r4, r0, r4
 80179c4:	42a6      	cmp	r6, r4
 80179c6:	dc2e      	bgt.n	8017a26 <__gethex+0x2e8>
 80179c8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80179cc:	2b02      	cmp	r3, #2
 80179ce:	d022      	beq.n	8017a16 <__gethex+0x2d8>
 80179d0:	2b03      	cmp	r3, #3
 80179d2:	d024      	beq.n	8017a1e <__gethex+0x2e0>
 80179d4:	2b01      	cmp	r3, #1
 80179d6:	d115      	bne.n	8017a04 <__gethex+0x2c6>
 80179d8:	42a6      	cmp	r6, r4
 80179da:	d113      	bne.n	8017a04 <__gethex+0x2c6>
 80179dc:	2e01      	cmp	r6, #1
 80179de:	dc0b      	bgt.n	80179f8 <__gethex+0x2ba>
 80179e0:	9a06      	ldr	r2, [sp, #24]
 80179e2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80179e6:	6013      	str	r3, [r2, #0]
 80179e8:	2301      	movs	r3, #1
 80179ea:	612b      	str	r3, [r5, #16]
 80179ec:	f8c9 3000 	str.w	r3, [r9]
 80179f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80179f2:	2762      	movs	r7, #98	; 0x62
 80179f4:	601d      	str	r5, [r3, #0]
 80179f6:	e72a      	b.n	801784e <__gethex+0x110>
 80179f8:	1e71      	subs	r1, r6, #1
 80179fa:	4628      	mov	r0, r5
 80179fc:	f000 fd7c 	bl	80184f8 <__any_on>
 8017a00:	2800      	cmp	r0, #0
 8017a02:	d1ed      	bne.n	80179e0 <__gethex+0x2a2>
 8017a04:	4629      	mov	r1, r5
 8017a06:	9802      	ldr	r0, [sp, #8]
 8017a08:	f000 f9cc 	bl	8017da4 <_Bfree>
 8017a0c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017a0e:	2300      	movs	r3, #0
 8017a10:	6013      	str	r3, [r2, #0]
 8017a12:	2750      	movs	r7, #80	; 0x50
 8017a14:	e71b      	b.n	801784e <__gethex+0x110>
 8017a16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017a18:	2b00      	cmp	r3, #0
 8017a1a:	d0e1      	beq.n	80179e0 <__gethex+0x2a2>
 8017a1c:	e7f2      	b.n	8017a04 <__gethex+0x2c6>
 8017a1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017a20:	2b00      	cmp	r3, #0
 8017a22:	d1dd      	bne.n	80179e0 <__gethex+0x2a2>
 8017a24:	e7ee      	b.n	8017a04 <__gethex+0x2c6>
 8017a26:	1e67      	subs	r7, r4, #1
 8017a28:	f1ba 0f00 	cmp.w	sl, #0
 8017a2c:	d131      	bne.n	8017a92 <__gethex+0x354>
 8017a2e:	b127      	cbz	r7, 8017a3a <__gethex+0x2fc>
 8017a30:	4639      	mov	r1, r7
 8017a32:	4628      	mov	r0, r5
 8017a34:	f000 fd60 	bl	80184f8 <__any_on>
 8017a38:	4682      	mov	sl, r0
 8017a3a:	117a      	asrs	r2, r7, #5
 8017a3c:	2301      	movs	r3, #1
 8017a3e:	f007 071f 	and.w	r7, r7, #31
 8017a42:	fa03 f707 	lsl.w	r7, r3, r7
 8017a46:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8017a4a:	4621      	mov	r1, r4
 8017a4c:	421f      	tst	r7, r3
 8017a4e:	4628      	mov	r0, r5
 8017a50:	bf18      	it	ne
 8017a52:	f04a 0a02 	orrne.w	sl, sl, #2
 8017a56:	1b36      	subs	r6, r6, r4
 8017a58:	f7ff fe22 	bl	80176a0 <rshift>
 8017a5c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8017a60:	2702      	movs	r7, #2
 8017a62:	f1ba 0f00 	cmp.w	sl, #0
 8017a66:	d048      	beq.n	8017afa <__gethex+0x3bc>
 8017a68:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017a6c:	2b02      	cmp	r3, #2
 8017a6e:	d015      	beq.n	8017a9c <__gethex+0x35e>
 8017a70:	2b03      	cmp	r3, #3
 8017a72:	d017      	beq.n	8017aa4 <__gethex+0x366>
 8017a74:	2b01      	cmp	r3, #1
 8017a76:	d109      	bne.n	8017a8c <__gethex+0x34e>
 8017a78:	f01a 0f02 	tst.w	sl, #2
 8017a7c:	d006      	beq.n	8017a8c <__gethex+0x34e>
 8017a7e:	f8d9 3000 	ldr.w	r3, [r9]
 8017a82:	ea4a 0a03 	orr.w	sl, sl, r3
 8017a86:	f01a 0f01 	tst.w	sl, #1
 8017a8a:	d10e      	bne.n	8017aaa <__gethex+0x36c>
 8017a8c:	f047 0710 	orr.w	r7, r7, #16
 8017a90:	e033      	b.n	8017afa <__gethex+0x3bc>
 8017a92:	f04f 0a01 	mov.w	sl, #1
 8017a96:	e7d0      	b.n	8017a3a <__gethex+0x2fc>
 8017a98:	2701      	movs	r7, #1
 8017a9a:	e7e2      	b.n	8017a62 <__gethex+0x324>
 8017a9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017a9e:	f1c3 0301 	rsb	r3, r3, #1
 8017aa2:	9315      	str	r3, [sp, #84]	; 0x54
 8017aa4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017aa6:	2b00      	cmp	r3, #0
 8017aa8:	d0f0      	beq.n	8017a8c <__gethex+0x34e>
 8017aaa:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8017aae:	f105 0314 	add.w	r3, r5, #20
 8017ab2:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8017ab6:	eb03 010a 	add.w	r1, r3, sl
 8017aba:	f04f 0c00 	mov.w	ip, #0
 8017abe:	4618      	mov	r0, r3
 8017ac0:	f853 2b04 	ldr.w	r2, [r3], #4
 8017ac4:	f1b2 3fff 	cmp.w	r2, #4294967295
 8017ac8:	d01c      	beq.n	8017b04 <__gethex+0x3c6>
 8017aca:	3201      	adds	r2, #1
 8017acc:	6002      	str	r2, [r0, #0]
 8017ace:	2f02      	cmp	r7, #2
 8017ad0:	f105 0314 	add.w	r3, r5, #20
 8017ad4:	d138      	bne.n	8017b48 <__gethex+0x40a>
 8017ad6:	f8d8 2000 	ldr.w	r2, [r8]
 8017ada:	3a01      	subs	r2, #1
 8017adc:	42b2      	cmp	r2, r6
 8017ade:	d10a      	bne.n	8017af6 <__gethex+0x3b8>
 8017ae0:	1171      	asrs	r1, r6, #5
 8017ae2:	2201      	movs	r2, #1
 8017ae4:	f006 061f 	and.w	r6, r6, #31
 8017ae8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017aec:	fa02 f606 	lsl.w	r6, r2, r6
 8017af0:	421e      	tst	r6, r3
 8017af2:	bf18      	it	ne
 8017af4:	4617      	movne	r7, r2
 8017af6:	f047 0720 	orr.w	r7, r7, #32
 8017afa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017afc:	601d      	str	r5, [r3, #0]
 8017afe:	9b06      	ldr	r3, [sp, #24]
 8017b00:	601c      	str	r4, [r3, #0]
 8017b02:	e6a4      	b.n	801784e <__gethex+0x110>
 8017b04:	4299      	cmp	r1, r3
 8017b06:	f843 cc04 	str.w	ip, [r3, #-4]
 8017b0a:	d8d8      	bhi.n	8017abe <__gethex+0x380>
 8017b0c:	68ab      	ldr	r3, [r5, #8]
 8017b0e:	4599      	cmp	r9, r3
 8017b10:	db12      	blt.n	8017b38 <__gethex+0x3fa>
 8017b12:	6869      	ldr	r1, [r5, #4]
 8017b14:	9802      	ldr	r0, [sp, #8]
 8017b16:	3101      	adds	r1, #1
 8017b18:	f000 f910 	bl	8017d3c <_Balloc>
 8017b1c:	692a      	ldr	r2, [r5, #16]
 8017b1e:	3202      	adds	r2, #2
 8017b20:	f105 010c 	add.w	r1, r5, #12
 8017b24:	4683      	mov	fp, r0
 8017b26:	0092      	lsls	r2, r2, #2
 8017b28:	300c      	adds	r0, #12
 8017b2a:	f7fd f947 	bl	8014dbc <memcpy>
 8017b2e:	4629      	mov	r1, r5
 8017b30:	9802      	ldr	r0, [sp, #8]
 8017b32:	f000 f937 	bl	8017da4 <_Bfree>
 8017b36:	465d      	mov	r5, fp
 8017b38:	692b      	ldr	r3, [r5, #16]
 8017b3a:	1c5a      	adds	r2, r3, #1
 8017b3c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8017b40:	612a      	str	r2, [r5, #16]
 8017b42:	2201      	movs	r2, #1
 8017b44:	615a      	str	r2, [r3, #20]
 8017b46:	e7c2      	b.n	8017ace <__gethex+0x390>
 8017b48:	692a      	ldr	r2, [r5, #16]
 8017b4a:	454a      	cmp	r2, r9
 8017b4c:	dd0b      	ble.n	8017b66 <__gethex+0x428>
 8017b4e:	2101      	movs	r1, #1
 8017b50:	4628      	mov	r0, r5
 8017b52:	f7ff fda5 	bl	80176a0 <rshift>
 8017b56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017b5a:	3401      	adds	r4, #1
 8017b5c:	42a3      	cmp	r3, r4
 8017b5e:	f6ff aed9 	blt.w	8017914 <__gethex+0x1d6>
 8017b62:	2701      	movs	r7, #1
 8017b64:	e7c7      	b.n	8017af6 <__gethex+0x3b8>
 8017b66:	f016 061f 	ands.w	r6, r6, #31
 8017b6a:	d0fa      	beq.n	8017b62 <__gethex+0x424>
 8017b6c:	449a      	add	sl, r3
 8017b6e:	f1c6 0620 	rsb	r6, r6, #32
 8017b72:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8017b76:	f000 f9a5 	bl	8017ec4 <__hi0bits>
 8017b7a:	42b0      	cmp	r0, r6
 8017b7c:	dbe7      	blt.n	8017b4e <__gethex+0x410>
 8017b7e:	e7f0      	b.n	8017b62 <__gethex+0x424>

08017b80 <L_shift>:
 8017b80:	f1c2 0208 	rsb	r2, r2, #8
 8017b84:	0092      	lsls	r2, r2, #2
 8017b86:	b570      	push	{r4, r5, r6, lr}
 8017b88:	f1c2 0620 	rsb	r6, r2, #32
 8017b8c:	6843      	ldr	r3, [r0, #4]
 8017b8e:	6804      	ldr	r4, [r0, #0]
 8017b90:	fa03 f506 	lsl.w	r5, r3, r6
 8017b94:	432c      	orrs	r4, r5
 8017b96:	40d3      	lsrs	r3, r2
 8017b98:	6004      	str	r4, [r0, #0]
 8017b9a:	f840 3f04 	str.w	r3, [r0, #4]!
 8017b9e:	4288      	cmp	r0, r1
 8017ba0:	d3f4      	bcc.n	8017b8c <L_shift+0xc>
 8017ba2:	bd70      	pop	{r4, r5, r6, pc}

08017ba4 <__match>:
 8017ba4:	b530      	push	{r4, r5, lr}
 8017ba6:	6803      	ldr	r3, [r0, #0]
 8017ba8:	3301      	adds	r3, #1
 8017baa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017bae:	b914      	cbnz	r4, 8017bb6 <__match+0x12>
 8017bb0:	6003      	str	r3, [r0, #0]
 8017bb2:	2001      	movs	r0, #1
 8017bb4:	bd30      	pop	{r4, r5, pc}
 8017bb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017bba:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8017bbe:	2d19      	cmp	r5, #25
 8017bc0:	bf98      	it	ls
 8017bc2:	3220      	addls	r2, #32
 8017bc4:	42a2      	cmp	r2, r4
 8017bc6:	d0f0      	beq.n	8017baa <__match+0x6>
 8017bc8:	2000      	movs	r0, #0
 8017bca:	e7f3      	b.n	8017bb4 <__match+0x10>

08017bcc <__hexnan>:
 8017bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bd0:	680b      	ldr	r3, [r1, #0]
 8017bd2:	6801      	ldr	r1, [r0, #0]
 8017bd4:	115f      	asrs	r7, r3, #5
 8017bd6:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8017bda:	f013 031f 	ands.w	r3, r3, #31
 8017bde:	b087      	sub	sp, #28
 8017be0:	bf18      	it	ne
 8017be2:	3704      	addne	r7, #4
 8017be4:	2500      	movs	r5, #0
 8017be6:	1f3e      	subs	r6, r7, #4
 8017be8:	4682      	mov	sl, r0
 8017bea:	4690      	mov	r8, r2
 8017bec:	9301      	str	r3, [sp, #4]
 8017bee:	f847 5c04 	str.w	r5, [r7, #-4]
 8017bf2:	46b1      	mov	r9, r6
 8017bf4:	4634      	mov	r4, r6
 8017bf6:	9502      	str	r5, [sp, #8]
 8017bf8:	46ab      	mov	fp, r5
 8017bfa:	784a      	ldrb	r2, [r1, #1]
 8017bfc:	1c4b      	adds	r3, r1, #1
 8017bfe:	9303      	str	r3, [sp, #12]
 8017c00:	b342      	cbz	r2, 8017c54 <__hexnan+0x88>
 8017c02:	4610      	mov	r0, r2
 8017c04:	9105      	str	r1, [sp, #20]
 8017c06:	9204      	str	r2, [sp, #16]
 8017c08:	f7ff fd84 	bl	8017714 <__hexdig_fun>
 8017c0c:	2800      	cmp	r0, #0
 8017c0e:	d143      	bne.n	8017c98 <__hexnan+0xcc>
 8017c10:	9a04      	ldr	r2, [sp, #16]
 8017c12:	9905      	ldr	r1, [sp, #20]
 8017c14:	2a20      	cmp	r2, #32
 8017c16:	d818      	bhi.n	8017c4a <__hexnan+0x7e>
 8017c18:	9b02      	ldr	r3, [sp, #8]
 8017c1a:	459b      	cmp	fp, r3
 8017c1c:	dd13      	ble.n	8017c46 <__hexnan+0x7a>
 8017c1e:	454c      	cmp	r4, r9
 8017c20:	d206      	bcs.n	8017c30 <__hexnan+0x64>
 8017c22:	2d07      	cmp	r5, #7
 8017c24:	dc04      	bgt.n	8017c30 <__hexnan+0x64>
 8017c26:	462a      	mov	r2, r5
 8017c28:	4649      	mov	r1, r9
 8017c2a:	4620      	mov	r0, r4
 8017c2c:	f7ff ffa8 	bl	8017b80 <L_shift>
 8017c30:	4544      	cmp	r4, r8
 8017c32:	d944      	bls.n	8017cbe <__hexnan+0xf2>
 8017c34:	2300      	movs	r3, #0
 8017c36:	f1a4 0904 	sub.w	r9, r4, #4
 8017c3a:	f844 3c04 	str.w	r3, [r4, #-4]
 8017c3e:	f8cd b008 	str.w	fp, [sp, #8]
 8017c42:	464c      	mov	r4, r9
 8017c44:	461d      	mov	r5, r3
 8017c46:	9903      	ldr	r1, [sp, #12]
 8017c48:	e7d7      	b.n	8017bfa <__hexnan+0x2e>
 8017c4a:	2a29      	cmp	r2, #41	; 0x29
 8017c4c:	d14a      	bne.n	8017ce4 <__hexnan+0x118>
 8017c4e:	3102      	adds	r1, #2
 8017c50:	f8ca 1000 	str.w	r1, [sl]
 8017c54:	f1bb 0f00 	cmp.w	fp, #0
 8017c58:	d044      	beq.n	8017ce4 <__hexnan+0x118>
 8017c5a:	454c      	cmp	r4, r9
 8017c5c:	d206      	bcs.n	8017c6c <__hexnan+0xa0>
 8017c5e:	2d07      	cmp	r5, #7
 8017c60:	dc04      	bgt.n	8017c6c <__hexnan+0xa0>
 8017c62:	462a      	mov	r2, r5
 8017c64:	4649      	mov	r1, r9
 8017c66:	4620      	mov	r0, r4
 8017c68:	f7ff ff8a 	bl	8017b80 <L_shift>
 8017c6c:	4544      	cmp	r4, r8
 8017c6e:	d928      	bls.n	8017cc2 <__hexnan+0xf6>
 8017c70:	4643      	mov	r3, r8
 8017c72:	f854 2b04 	ldr.w	r2, [r4], #4
 8017c76:	f843 2b04 	str.w	r2, [r3], #4
 8017c7a:	42a6      	cmp	r6, r4
 8017c7c:	d2f9      	bcs.n	8017c72 <__hexnan+0xa6>
 8017c7e:	2200      	movs	r2, #0
 8017c80:	f843 2b04 	str.w	r2, [r3], #4
 8017c84:	429e      	cmp	r6, r3
 8017c86:	d2fb      	bcs.n	8017c80 <__hexnan+0xb4>
 8017c88:	6833      	ldr	r3, [r6, #0]
 8017c8a:	b91b      	cbnz	r3, 8017c94 <__hexnan+0xc8>
 8017c8c:	4546      	cmp	r6, r8
 8017c8e:	d127      	bne.n	8017ce0 <__hexnan+0x114>
 8017c90:	2301      	movs	r3, #1
 8017c92:	6033      	str	r3, [r6, #0]
 8017c94:	2005      	movs	r0, #5
 8017c96:	e026      	b.n	8017ce6 <__hexnan+0x11a>
 8017c98:	3501      	adds	r5, #1
 8017c9a:	2d08      	cmp	r5, #8
 8017c9c:	f10b 0b01 	add.w	fp, fp, #1
 8017ca0:	dd06      	ble.n	8017cb0 <__hexnan+0xe4>
 8017ca2:	4544      	cmp	r4, r8
 8017ca4:	d9cf      	bls.n	8017c46 <__hexnan+0x7a>
 8017ca6:	2300      	movs	r3, #0
 8017ca8:	f844 3c04 	str.w	r3, [r4, #-4]
 8017cac:	2501      	movs	r5, #1
 8017cae:	3c04      	subs	r4, #4
 8017cb0:	6822      	ldr	r2, [r4, #0]
 8017cb2:	f000 000f 	and.w	r0, r0, #15
 8017cb6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8017cba:	6020      	str	r0, [r4, #0]
 8017cbc:	e7c3      	b.n	8017c46 <__hexnan+0x7a>
 8017cbe:	2508      	movs	r5, #8
 8017cc0:	e7c1      	b.n	8017c46 <__hexnan+0x7a>
 8017cc2:	9b01      	ldr	r3, [sp, #4]
 8017cc4:	2b00      	cmp	r3, #0
 8017cc6:	d0df      	beq.n	8017c88 <__hexnan+0xbc>
 8017cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8017ccc:	f1c3 0320 	rsb	r3, r3, #32
 8017cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8017cd4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8017cd8:	401a      	ands	r2, r3
 8017cda:	f847 2c04 	str.w	r2, [r7, #-4]
 8017cde:	e7d3      	b.n	8017c88 <__hexnan+0xbc>
 8017ce0:	3e04      	subs	r6, #4
 8017ce2:	e7d1      	b.n	8017c88 <__hexnan+0xbc>
 8017ce4:	2004      	movs	r0, #4
 8017ce6:	b007      	add	sp, #28
 8017ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017cec <__locale_ctype_ptr_l>:
 8017cec:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8017cf0:	4770      	bx	lr

08017cf2 <__localeconv_l>:
 8017cf2:	30f0      	adds	r0, #240	; 0xf0
 8017cf4:	4770      	bx	lr
	...

08017cf8 <_localeconv_r>:
 8017cf8:	4b04      	ldr	r3, [pc, #16]	; (8017d0c <_localeconv_r+0x14>)
 8017cfa:	681b      	ldr	r3, [r3, #0]
 8017cfc:	6a18      	ldr	r0, [r3, #32]
 8017cfe:	4b04      	ldr	r3, [pc, #16]	; (8017d10 <_localeconv_r+0x18>)
 8017d00:	2800      	cmp	r0, #0
 8017d02:	bf08      	it	eq
 8017d04:	4618      	moveq	r0, r3
 8017d06:	30f0      	adds	r0, #240	; 0xf0
 8017d08:	4770      	bx	lr
 8017d0a:	bf00      	nop
 8017d0c:	2000220c 	.word	0x2000220c
 8017d10:	20002270 	.word	0x20002270

08017d14 <__ascii_mbtowc>:
 8017d14:	b082      	sub	sp, #8
 8017d16:	b901      	cbnz	r1, 8017d1a <__ascii_mbtowc+0x6>
 8017d18:	a901      	add	r1, sp, #4
 8017d1a:	b142      	cbz	r2, 8017d2e <__ascii_mbtowc+0x1a>
 8017d1c:	b14b      	cbz	r3, 8017d32 <__ascii_mbtowc+0x1e>
 8017d1e:	7813      	ldrb	r3, [r2, #0]
 8017d20:	600b      	str	r3, [r1, #0]
 8017d22:	7812      	ldrb	r2, [r2, #0]
 8017d24:	1c10      	adds	r0, r2, #0
 8017d26:	bf18      	it	ne
 8017d28:	2001      	movne	r0, #1
 8017d2a:	b002      	add	sp, #8
 8017d2c:	4770      	bx	lr
 8017d2e:	4610      	mov	r0, r2
 8017d30:	e7fb      	b.n	8017d2a <__ascii_mbtowc+0x16>
 8017d32:	f06f 0001 	mvn.w	r0, #1
 8017d36:	e7f8      	b.n	8017d2a <__ascii_mbtowc+0x16>

08017d38 <__malloc_lock>:
 8017d38:	4770      	bx	lr

08017d3a <__malloc_unlock>:
 8017d3a:	4770      	bx	lr

08017d3c <_Balloc>:
 8017d3c:	b570      	push	{r4, r5, r6, lr}
 8017d3e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017d40:	4604      	mov	r4, r0
 8017d42:	460e      	mov	r6, r1
 8017d44:	b93d      	cbnz	r5, 8017d56 <_Balloc+0x1a>
 8017d46:	2010      	movs	r0, #16
 8017d48:	f7fd f828 	bl	8014d9c <malloc>
 8017d4c:	6260      	str	r0, [r4, #36]	; 0x24
 8017d4e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017d52:	6005      	str	r5, [r0, #0]
 8017d54:	60c5      	str	r5, [r0, #12]
 8017d56:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8017d58:	68eb      	ldr	r3, [r5, #12]
 8017d5a:	b183      	cbz	r3, 8017d7e <_Balloc+0x42>
 8017d5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017d5e:	68db      	ldr	r3, [r3, #12]
 8017d60:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8017d64:	b9b8      	cbnz	r0, 8017d96 <_Balloc+0x5a>
 8017d66:	2101      	movs	r1, #1
 8017d68:	fa01 f506 	lsl.w	r5, r1, r6
 8017d6c:	1d6a      	adds	r2, r5, #5
 8017d6e:	0092      	lsls	r2, r2, #2
 8017d70:	4620      	mov	r0, r4
 8017d72:	f000 fbe2 	bl	801853a <_calloc_r>
 8017d76:	b160      	cbz	r0, 8017d92 <_Balloc+0x56>
 8017d78:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8017d7c:	e00e      	b.n	8017d9c <_Balloc+0x60>
 8017d7e:	2221      	movs	r2, #33	; 0x21
 8017d80:	2104      	movs	r1, #4
 8017d82:	4620      	mov	r0, r4
 8017d84:	f000 fbd9 	bl	801853a <_calloc_r>
 8017d88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017d8a:	60e8      	str	r0, [r5, #12]
 8017d8c:	68db      	ldr	r3, [r3, #12]
 8017d8e:	2b00      	cmp	r3, #0
 8017d90:	d1e4      	bne.n	8017d5c <_Balloc+0x20>
 8017d92:	2000      	movs	r0, #0
 8017d94:	bd70      	pop	{r4, r5, r6, pc}
 8017d96:	6802      	ldr	r2, [r0, #0]
 8017d98:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8017d9c:	2300      	movs	r3, #0
 8017d9e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017da2:	e7f7      	b.n	8017d94 <_Balloc+0x58>

08017da4 <_Bfree>:
 8017da4:	b570      	push	{r4, r5, r6, lr}
 8017da6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8017da8:	4606      	mov	r6, r0
 8017daa:	460d      	mov	r5, r1
 8017dac:	b93c      	cbnz	r4, 8017dbe <_Bfree+0x1a>
 8017dae:	2010      	movs	r0, #16
 8017db0:	f7fc fff4 	bl	8014d9c <malloc>
 8017db4:	6270      	str	r0, [r6, #36]	; 0x24
 8017db6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017dba:	6004      	str	r4, [r0, #0]
 8017dbc:	60c4      	str	r4, [r0, #12]
 8017dbe:	b13d      	cbz	r5, 8017dd0 <_Bfree+0x2c>
 8017dc0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8017dc2:	686a      	ldr	r2, [r5, #4]
 8017dc4:	68db      	ldr	r3, [r3, #12]
 8017dc6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017dca:	6029      	str	r1, [r5, #0]
 8017dcc:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8017dd0:	bd70      	pop	{r4, r5, r6, pc}

08017dd2 <__multadd>:
 8017dd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017dd6:	690d      	ldr	r5, [r1, #16]
 8017dd8:	461f      	mov	r7, r3
 8017dda:	4606      	mov	r6, r0
 8017ddc:	460c      	mov	r4, r1
 8017dde:	f101 0c14 	add.w	ip, r1, #20
 8017de2:	2300      	movs	r3, #0
 8017de4:	f8dc 0000 	ldr.w	r0, [ip]
 8017de8:	b281      	uxth	r1, r0
 8017dea:	fb02 7101 	mla	r1, r2, r1, r7
 8017dee:	0c0f      	lsrs	r7, r1, #16
 8017df0:	0c00      	lsrs	r0, r0, #16
 8017df2:	fb02 7000 	mla	r0, r2, r0, r7
 8017df6:	b289      	uxth	r1, r1
 8017df8:	3301      	adds	r3, #1
 8017dfa:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8017dfe:	429d      	cmp	r5, r3
 8017e00:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8017e04:	f84c 1b04 	str.w	r1, [ip], #4
 8017e08:	dcec      	bgt.n	8017de4 <__multadd+0x12>
 8017e0a:	b1d7      	cbz	r7, 8017e42 <__multadd+0x70>
 8017e0c:	68a3      	ldr	r3, [r4, #8]
 8017e0e:	42ab      	cmp	r3, r5
 8017e10:	dc12      	bgt.n	8017e38 <__multadd+0x66>
 8017e12:	6861      	ldr	r1, [r4, #4]
 8017e14:	4630      	mov	r0, r6
 8017e16:	3101      	adds	r1, #1
 8017e18:	f7ff ff90 	bl	8017d3c <_Balloc>
 8017e1c:	6922      	ldr	r2, [r4, #16]
 8017e1e:	3202      	adds	r2, #2
 8017e20:	f104 010c 	add.w	r1, r4, #12
 8017e24:	4680      	mov	r8, r0
 8017e26:	0092      	lsls	r2, r2, #2
 8017e28:	300c      	adds	r0, #12
 8017e2a:	f7fc ffc7 	bl	8014dbc <memcpy>
 8017e2e:	4621      	mov	r1, r4
 8017e30:	4630      	mov	r0, r6
 8017e32:	f7ff ffb7 	bl	8017da4 <_Bfree>
 8017e36:	4644      	mov	r4, r8
 8017e38:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8017e3c:	3501      	adds	r5, #1
 8017e3e:	615f      	str	r7, [r3, #20]
 8017e40:	6125      	str	r5, [r4, #16]
 8017e42:	4620      	mov	r0, r4
 8017e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017e48 <__s2b>:
 8017e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017e4c:	460c      	mov	r4, r1
 8017e4e:	4615      	mov	r5, r2
 8017e50:	461f      	mov	r7, r3
 8017e52:	2209      	movs	r2, #9
 8017e54:	3308      	adds	r3, #8
 8017e56:	4606      	mov	r6, r0
 8017e58:	fb93 f3f2 	sdiv	r3, r3, r2
 8017e5c:	2100      	movs	r1, #0
 8017e5e:	2201      	movs	r2, #1
 8017e60:	429a      	cmp	r2, r3
 8017e62:	db20      	blt.n	8017ea6 <__s2b+0x5e>
 8017e64:	4630      	mov	r0, r6
 8017e66:	f7ff ff69 	bl	8017d3c <_Balloc>
 8017e6a:	9b08      	ldr	r3, [sp, #32]
 8017e6c:	6143      	str	r3, [r0, #20]
 8017e6e:	2d09      	cmp	r5, #9
 8017e70:	f04f 0301 	mov.w	r3, #1
 8017e74:	6103      	str	r3, [r0, #16]
 8017e76:	dd19      	ble.n	8017eac <__s2b+0x64>
 8017e78:	f104 0809 	add.w	r8, r4, #9
 8017e7c:	46c1      	mov	r9, r8
 8017e7e:	442c      	add	r4, r5
 8017e80:	f819 3b01 	ldrb.w	r3, [r9], #1
 8017e84:	4601      	mov	r1, r0
 8017e86:	3b30      	subs	r3, #48	; 0x30
 8017e88:	220a      	movs	r2, #10
 8017e8a:	4630      	mov	r0, r6
 8017e8c:	f7ff ffa1 	bl	8017dd2 <__multadd>
 8017e90:	45a1      	cmp	r9, r4
 8017e92:	d1f5      	bne.n	8017e80 <__s2b+0x38>
 8017e94:	eb08 0405 	add.w	r4, r8, r5
 8017e98:	3c08      	subs	r4, #8
 8017e9a:	1b2d      	subs	r5, r5, r4
 8017e9c:	1963      	adds	r3, r4, r5
 8017e9e:	42bb      	cmp	r3, r7
 8017ea0:	db07      	blt.n	8017eb2 <__s2b+0x6a>
 8017ea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017ea6:	0052      	lsls	r2, r2, #1
 8017ea8:	3101      	adds	r1, #1
 8017eaa:	e7d9      	b.n	8017e60 <__s2b+0x18>
 8017eac:	340a      	adds	r4, #10
 8017eae:	2509      	movs	r5, #9
 8017eb0:	e7f3      	b.n	8017e9a <__s2b+0x52>
 8017eb2:	f814 3b01 	ldrb.w	r3, [r4], #1
 8017eb6:	4601      	mov	r1, r0
 8017eb8:	3b30      	subs	r3, #48	; 0x30
 8017eba:	220a      	movs	r2, #10
 8017ebc:	4630      	mov	r0, r6
 8017ebe:	f7ff ff88 	bl	8017dd2 <__multadd>
 8017ec2:	e7eb      	b.n	8017e9c <__s2b+0x54>

08017ec4 <__hi0bits>:
 8017ec4:	0c02      	lsrs	r2, r0, #16
 8017ec6:	0412      	lsls	r2, r2, #16
 8017ec8:	4603      	mov	r3, r0
 8017eca:	b9b2      	cbnz	r2, 8017efa <__hi0bits+0x36>
 8017ecc:	0403      	lsls	r3, r0, #16
 8017ece:	2010      	movs	r0, #16
 8017ed0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8017ed4:	bf04      	itt	eq
 8017ed6:	021b      	lsleq	r3, r3, #8
 8017ed8:	3008      	addeq	r0, #8
 8017eda:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8017ede:	bf04      	itt	eq
 8017ee0:	011b      	lsleq	r3, r3, #4
 8017ee2:	3004      	addeq	r0, #4
 8017ee4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8017ee8:	bf04      	itt	eq
 8017eea:	009b      	lsleq	r3, r3, #2
 8017eec:	3002      	addeq	r0, #2
 8017eee:	2b00      	cmp	r3, #0
 8017ef0:	db06      	blt.n	8017f00 <__hi0bits+0x3c>
 8017ef2:	005b      	lsls	r3, r3, #1
 8017ef4:	d503      	bpl.n	8017efe <__hi0bits+0x3a>
 8017ef6:	3001      	adds	r0, #1
 8017ef8:	4770      	bx	lr
 8017efa:	2000      	movs	r0, #0
 8017efc:	e7e8      	b.n	8017ed0 <__hi0bits+0xc>
 8017efe:	2020      	movs	r0, #32
 8017f00:	4770      	bx	lr

08017f02 <__lo0bits>:
 8017f02:	6803      	ldr	r3, [r0, #0]
 8017f04:	f013 0207 	ands.w	r2, r3, #7
 8017f08:	4601      	mov	r1, r0
 8017f0a:	d00b      	beq.n	8017f24 <__lo0bits+0x22>
 8017f0c:	07da      	lsls	r2, r3, #31
 8017f0e:	d423      	bmi.n	8017f58 <__lo0bits+0x56>
 8017f10:	0798      	lsls	r0, r3, #30
 8017f12:	bf49      	itett	mi
 8017f14:	085b      	lsrmi	r3, r3, #1
 8017f16:	089b      	lsrpl	r3, r3, #2
 8017f18:	2001      	movmi	r0, #1
 8017f1a:	600b      	strmi	r3, [r1, #0]
 8017f1c:	bf5c      	itt	pl
 8017f1e:	600b      	strpl	r3, [r1, #0]
 8017f20:	2002      	movpl	r0, #2
 8017f22:	4770      	bx	lr
 8017f24:	b298      	uxth	r0, r3
 8017f26:	b9a8      	cbnz	r0, 8017f54 <__lo0bits+0x52>
 8017f28:	0c1b      	lsrs	r3, r3, #16
 8017f2a:	2010      	movs	r0, #16
 8017f2c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8017f30:	bf04      	itt	eq
 8017f32:	0a1b      	lsreq	r3, r3, #8
 8017f34:	3008      	addeq	r0, #8
 8017f36:	071a      	lsls	r2, r3, #28
 8017f38:	bf04      	itt	eq
 8017f3a:	091b      	lsreq	r3, r3, #4
 8017f3c:	3004      	addeq	r0, #4
 8017f3e:	079a      	lsls	r2, r3, #30
 8017f40:	bf04      	itt	eq
 8017f42:	089b      	lsreq	r3, r3, #2
 8017f44:	3002      	addeq	r0, #2
 8017f46:	07da      	lsls	r2, r3, #31
 8017f48:	d402      	bmi.n	8017f50 <__lo0bits+0x4e>
 8017f4a:	085b      	lsrs	r3, r3, #1
 8017f4c:	d006      	beq.n	8017f5c <__lo0bits+0x5a>
 8017f4e:	3001      	adds	r0, #1
 8017f50:	600b      	str	r3, [r1, #0]
 8017f52:	4770      	bx	lr
 8017f54:	4610      	mov	r0, r2
 8017f56:	e7e9      	b.n	8017f2c <__lo0bits+0x2a>
 8017f58:	2000      	movs	r0, #0
 8017f5a:	4770      	bx	lr
 8017f5c:	2020      	movs	r0, #32
 8017f5e:	4770      	bx	lr

08017f60 <__i2b>:
 8017f60:	b510      	push	{r4, lr}
 8017f62:	460c      	mov	r4, r1
 8017f64:	2101      	movs	r1, #1
 8017f66:	f7ff fee9 	bl	8017d3c <_Balloc>
 8017f6a:	2201      	movs	r2, #1
 8017f6c:	6144      	str	r4, [r0, #20]
 8017f6e:	6102      	str	r2, [r0, #16]
 8017f70:	bd10      	pop	{r4, pc}

08017f72 <__multiply>:
 8017f72:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f76:	4614      	mov	r4, r2
 8017f78:	690a      	ldr	r2, [r1, #16]
 8017f7a:	6923      	ldr	r3, [r4, #16]
 8017f7c:	429a      	cmp	r2, r3
 8017f7e:	bfb8      	it	lt
 8017f80:	460b      	movlt	r3, r1
 8017f82:	4688      	mov	r8, r1
 8017f84:	bfbc      	itt	lt
 8017f86:	46a0      	movlt	r8, r4
 8017f88:	461c      	movlt	r4, r3
 8017f8a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8017f8e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8017f92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017f96:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8017f9a:	eb07 0609 	add.w	r6, r7, r9
 8017f9e:	42b3      	cmp	r3, r6
 8017fa0:	bfb8      	it	lt
 8017fa2:	3101      	addlt	r1, #1
 8017fa4:	f7ff feca 	bl	8017d3c <_Balloc>
 8017fa8:	f100 0514 	add.w	r5, r0, #20
 8017fac:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8017fb0:	462b      	mov	r3, r5
 8017fb2:	2200      	movs	r2, #0
 8017fb4:	4573      	cmp	r3, lr
 8017fb6:	d316      	bcc.n	8017fe6 <__multiply+0x74>
 8017fb8:	f104 0214 	add.w	r2, r4, #20
 8017fbc:	f108 0114 	add.w	r1, r8, #20
 8017fc0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8017fc4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8017fc8:	9300      	str	r3, [sp, #0]
 8017fca:	9b00      	ldr	r3, [sp, #0]
 8017fcc:	9201      	str	r2, [sp, #4]
 8017fce:	4293      	cmp	r3, r2
 8017fd0:	d80c      	bhi.n	8017fec <__multiply+0x7a>
 8017fd2:	2e00      	cmp	r6, #0
 8017fd4:	dd03      	ble.n	8017fde <__multiply+0x6c>
 8017fd6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8017fda:	2b00      	cmp	r3, #0
 8017fdc:	d05d      	beq.n	801809a <__multiply+0x128>
 8017fde:	6106      	str	r6, [r0, #16]
 8017fe0:	b003      	add	sp, #12
 8017fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017fe6:	f843 2b04 	str.w	r2, [r3], #4
 8017fea:	e7e3      	b.n	8017fb4 <__multiply+0x42>
 8017fec:	f8b2 b000 	ldrh.w	fp, [r2]
 8017ff0:	f1bb 0f00 	cmp.w	fp, #0
 8017ff4:	d023      	beq.n	801803e <__multiply+0xcc>
 8017ff6:	4689      	mov	r9, r1
 8017ff8:	46ac      	mov	ip, r5
 8017ffa:	f04f 0800 	mov.w	r8, #0
 8017ffe:	f859 4b04 	ldr.w	r4, [r9], #4
 8018002:	f8dc a000 	ldr.w	sl, [ip]
 8018006:	b2a3      	uxth	r3, r4
 8018008:	fa1f fa8a 	uxth.w	sl, sl
 801800c:	fb0b a303 	mla	r3, fp, r3, sl
 8018010:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8018014:	f8dc 4000 	ldr.w	r4, [ip]
 8018018:	4443      	add	r3, r8
 801801a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801801e:	fb0b 840a 	mla	r4, fp, sl, r8
 8018022:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8018026:	46e2      	mov	sl, ip
 8018028:	b29b      	uxth	r3, r3
 801802a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801802e:	454f      	cmp	r7, r9
 8018030:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018034:	f84a 3b04 	str.w	r3, [sl], #4
 8018038:	d82b      	bhi.n	8018092 <__multiply+0x120>
 801803a:	f8cc 8004 	str.w	r8, [ip, #4]
 801803e:	9b01      	ldr	r3, [sp, #4]
 8018040:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8018044:	3204      	adds	r2, #4
 8018046:	f1ba 0f00 	cmp.w	sl, #0
 801804a:	d020      	beq.n	801808e <__multiply+0x11c>
 801804c:	682b      	ldr	r3, [r5, #0]
 801804e:	4689      	mov	r9, r1
 8018050:	46a8      	mov	r8, r5
 8018052:	f04f 0b00 	mov.w	fp, #0
 8018056:	f8b9 c000 	ldrh.w	ip, [r9]
 801805a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801805e:	fb0a 440c 	mla	r4, sl, ip, r4
 8018062:	445c      	add	r4, fp
 8018064:	46c4      	mov	ip, r8
 8018066:	b29b      	uxth	r3, r3
 8018068:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801806c:	f84c 3b04 	str.w	r3, [ip], #4
 8018070:	f859 3b04 	ldr.w	r3, [r9], #4
 8018074:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8018078:	0c1b      	lsrs	r3, r3, #16
 801807a:	fb0a b303 	mla	r3, sl, r3, fp
 801807e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8018082:	454f      	cmp	r7, r9
 8018084:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8018088:	d805      	bhi.n	8018096 <__multiply+0x124>
 801808a:	f8c8 3004 	str.w	r3, [r8, #4]
 801808e:	3504      	adds	r5, #4
 8018090:	e79b      	b.n	8017fca <__multiply+0x58>
 8018092:	46d4      	mov	ip, sl
 8018094:	e7b3      	b.n	8017ffe <__multiply+0x8c>
 8018096:	46e0      	mov	r8, ip
 8018098:	e7dd      	b.n	8018056 <__multiply+0xe4>
 801809a:	3e01      	subs	r6, #1
 801809c:	e799      	b.n	8017fd2 <__multiply+0x60>
	...

080180a0 <__pow5mult>:
 80180a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80180a4:	4615      	mov	r5, r2
 80180a6:	f012 0203 	ands.w	r2, r2, #3
 80180aa:	4606      	mov	r6, r0
 80180ac:	460f      	mov	r7, r1
 80180ae:	d007      	beq.n	80180c0 <__pow5mult+0x20>
 80180b0:	3a01      	subs	r2, #1
 80180b2:	4c21      	ldr	r4, [pc, #132]	; (8018138 <__pow5mult+0x98>)
 80180b4:	2300      	movs	r3, #0
 80180b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80180ba:	f7ff fe8a 	bl	8017dd2 <__multadd>
 80180be:	4607      	mov	r7, r0
 80180c0:	10ad      	asrs	r5, r5, #2
 80180c2:	d035      	beq.n	8018130 <__pow5mult+0x90>
 80180c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80180c6:	b93c      	cbnz	r4, 80180d8 <__pow5mult+0x38>
 80180c8:	2010      	movs	r0, #16
 80180ca:	f7fc fe67 	bl	8014d9c <malloc>
 80180ce:	6270      	str	r0, [r6, #36]	; 0x24
 80180d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80180d4:	6004      	str	r4, [r0, #0]
 80180d6:	60c4      	str	r4, [r0, #12]
 80180d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80180dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80180e0:	b94c      	cbnz	r4, 80180f6 <__pow5mult+0x56>
 80180e2:	f240 2171 	movw	r1, #625	; 0x271
 80180e6:	4630      	mov	r0, r6
 80180e8:	f7ff ff3a 	bl	8017f60 <__i2b>
 80180ec:	2300      	movs	r3, #0
 80180ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80180f2:	4604      	mov	r4, r0
 80180f4:	6003      	str	r3, [r0, #0]
 80180f6:	f04f 0800 	mov.w	r8, #0
 80180fa:	07eb      	lsls	r3, r5, #31
 80180fc:	d50a      	bpl.n	8018114 <__pow5mult+0x74>
 80180fe:	4639      	mov	r1, r7
 8018100:	4622      	mov	r2, r4
 8018102:	4630      	mov	r0, r6
 8018104:	f7ff ff35 	bl	8017f72 <__multiply>
 8018108:	4639      	mov	r1, r7
 801810a:	4681      	mov	r9, r0
 801810c:	4630      	mov	r0, r6
 801810e:	f7ff fe49 	bl	8017da4 <_Bfree>
 8018112:	464f      	mov	r7, r9
 8018114:	106d      	asrs	r5, r5, #1
 8018116:	d00b      	beq.n	8018130 <__pow5mult+0x90>
 8018118:	6820      	ldr	r0, [r4, #0]
 801811a:	b938      	cbnz	r0, 801812c <__pow5mult+0x8c>
 801811c:	4622      	mov	r2, r4
 801811e:	4621      	mov	r1, r4
 8018120:	4630      	mov	r0, r6
 8018122:	f7ff ff26 	bl	8017f72 <__multiply>
 8018126:	6020      	str	r0, [r4, #0]
 8018128:	f8c0 8000 	str.w	r8, [r0]
 801812c:	4604      	mov	r4, r0
 801812e:	e7e4      	b.n	80180fa <__pow5mult+0x5a>
 8018130:	4638      	mov	r0, r7
 8018132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018136:	bf00      	nop
 8018138:	0801a710 	.word	0x0801a710

0801813c <__lshift>:
 801813c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018140:	460c      	mov	r4, r1
 8018142:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018146:	6923      	ldr	r3, [r4, #16]
 8018148:	6849      	ldr	r1, [r1, #4]
 801814a:	eb0a 0903 	add.w	r9, sl, r3
 801814e:	68a3      	ldr	r3, [r4, #8]
 8018150:	4607      	mov	r7, r0
 8018152:	4616      	mov	r6, r2
 8018154:	f109 0501 	add.w	r5, r9, #1
 8018158:	42ab      	cmp	r3, r5
 801815a:	db32      	blt.n	80181c2 <__lshift+0x86>
 801815c:	4638      	mov	r0, r7
 801815e:	f7ff fded 	bl	8017d3c <_Balloc>
 8018162:	2300      	movs	r3, #0
 8018164:	4680      	mov	r8, r0
 8018166:	f100 0114 	add.w	r1, r0, #20
 801816a:	461a      	mov	r2, r3
 801816c:	4553      	cmp	r3, sl
 801816e:	db2b      	blt.n	80181c8 <__lshift+0x8c>
 8018170:	6920      	ldr	r0, [r4, #16]
 8018172:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018176:	f104 0314 	add.w	r3, r4, #20
 801817a:	f016 021f 	ands.w	r2, r6, #31
 801817e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018182:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018186:	d025      	beq.n	80181d4 <__lshift+0x98>
 8018188:	f1c2 0e20 	rsb	lr, r2, #32
 801818c:	2000      	movs	r0, #0
 801818e:	681e      	ldr	r6, [r3, #0]
 8018190:	468a      	mov	sl, r1
 8018192:	4096      	lsls	r6, r2
 8018194:	4330      	orrs	r0, r6
 8018196:	f84a 0b04 	str.w	r0, [sl], #4
 801819a:	f853 0b04 	ldr.w	r0, [r3], #4
 801819e:	459c      	cmp	ip, r3
 80181a0:	fa20 f00e 	lsr.w	r0, r0, lr
 80181a4:	d814      	bhi.n	80181d0 <__lshift+0x94>
 80181a6:	6048      	str	r0, [r1, #4]
 80181a8:	b108      	cbz	r0, 80181ae <__lshift+0x72>
 80181aa:	f109 0502 	add.w	r5, r9, #2
 80181ae:	3d01      	subs	r5, #1
 80181b0:	4638      	mov	r0, r7
 80181b2:	f8c8 5010 	str.w	r5, [r8, #16]
 80181b6:	4621      	mov	r1, r4
 80181b8:	f7ff fdf4 	bl	8017da4 <_Bfree>
 80181bc:	4640      	mov	r0, r8
 80181be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80181c2:	3101      	adds	r1, #1
 80181c4:	005b      	lsls	r3, r3, #1
 80181c6:	e7c7      	b.n	8018158 <__lshift+0x1c>
 80181c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80181cc:	3301      	adds	r3, #1
 80181ce:	e7cd      	b.n	801816c <__lshift+0x30>
 80181d0:	4651      	mov	r1, sl
 80181d2:	e7dc      	b.n	801818e <__lshift+0x52>
 80181d4:	3904      	subs	r1, #4
 80181d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80181da:	f841 2f04 	str.w	r2, [r1, #4]!
 80181de:	459c      	cmp	ip, r3
 80181e0:	d8f9      	bhi.n	80181d6 <__lshift+0x9a>
 80181e2:	e7e4      	b.n	80181ae <__lshift+0x72>

080181e4 <__mcmp>:
 80181e4:	6903      	ldr	r3, [r0, #16]
 80181e6:	690a      	ldr	r2, [r1, #16]
 80181e8:	1a9b      	subs	r3, r3, r2
 80181ea:	b530      	push	{r4, r5, lr}
 80181ec:	d10c      	bne.n	8018208 <__mcmp+0x24>
 80181ee:	0092      	lsls	r2, r2, #2
 80181f0:	3014      	adds	r0, #20
 80181f2:	3114      	adds	r1, #20
 80181f4:	1884      	adds	r4, r0, r2
 80181f6:	4411      	add	r1, r2
 80181f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80181fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018200:	4295      	cmp	r5, r2
 8018202:	d003      	beq.n	801820c <__mcmp+0x28>
 8018204:	d305      	bcc.n	8018212 <__mcmp+0x2e>
 8018206:	2301      	movs	r3, #1
 8018208:	4618      	mov	r0, r3
 801820a:	bd30      	pop	{r4, r5, pc}
 801820c:	42a0      	cmp	r0, r4
 801820e:	d3f3      	bcc.n	80181f8 <__mcmp+0x14>
 8018210:	e7fa      	b.n	8018208 <__mcmp+0x24>
 8018212:	f04f 33ff 	mov.w	r3, #4294967295
 8018216:	e7f7      	b.n	8018208 <__mcmp+0x24>

08018218 <__mdiff>:
 8018218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801821c:	460d      	mov	r5, r1
 801821e:	4607      	mov	r7, r0
 8018220:	4611      	mov	r1, r2
 8018222:	4628      	mov	r0, r5
 8018224:	4614      	mov	r4, r2
 8018226:	f7ff ffdd 	bl	80181e4 <__mcmp>
 801822a:	1e06      	subs	r6, r0, #0
 801822c:	d108      	bne.n	8018240 <__mdiff+0x28>
 801822e:	4631      	mov	r1, r6
 8018230:	4638      	mov	r0, r7
 8018232:	f7ff fd83 	bl	8017d3c <_Balloc>
 8018236:	2301      	movs	r3, #1
 8018238:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801823c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018240:	bfa4      	itt	ge
 8018242:	4623      	movge	r3, r4
 8018244:	462c      	movge	r4, r5
 8018246:	4638      	mov	r0, r7
 8018248:	6861      	ldr	r1, [r4, #4]
 801824a:	bfa6      	itte	ge
 801824c:	461d      	movge	r5, r3
 801824e:	2600      	movge	r6, #0
 8018250:	2601      	movlt	r6, #1
 8018252:	f7ff fd73 	bl	8017d3c <_Balloc>
 8018256:	692b      	ldr	r3, [r5, #16]
 8018258:	60c6      	str	r6, [r0, #12]
 801825a:	6926      	ldr	r6, [r4, #16]
 801825c:	f105 0914 	add.w	r9, r5, #20
 8018260:	f104 0214 	add.w	r2, r4, #20
 8018264:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8018268:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801826c:	f100 0514 	add.w	r5, r0, #20
 8018270:	f04f 0e00 	mov.w	lr, #0
 8018274:	f852 ab04 	ldr.w	sl, [r2], #4
 8018278:	f859 4b04 	ldr.w	r4, [r9], #4
 801827c:	fa1e f18a 	uxtah	r1, lr, sl
 8018280:	b2a3      	uxth	r3, r4
 8018282:	1ac9      	subs	r1, r1, r3
 8018284:	0c23      	lsrs	r3, r4, #16
 8018286:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801828a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801828e:	b289      	uxth	r1, r1
 8018290:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8018294:	45c8      	cmp	r8, r9
 8018296:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801829a:	4694      	mov	ip, r2
 801829c:	f845 3b04 	str.w	r3, [r5], #4
 80182a0:	d8e8      	bhi.n	8018274 <__mdiff+0x5c>
 80182a2:	45bc      	cmp	ip, r7
 80182a4:	d304      	bcc.n	80182b0 <__mdiff+0x98>
 80182a6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80182aa:	b183      	cbz	r3, 80182ce <__mdiff+0xb6>
 80182ac:	6106      	str	r6, [r0, #16]
 80182ae:	e7c5      	b.n	801823c <__mdiff+0x24>
 80182b0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80182b4:	fa1e f381 	uxtah	r3, lr, r1
 80182b8:	141a      	asrs	r2, r3, #16
 80182ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80182be:	b29b      	uxth	r3, r3
 80182c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80182c4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80182c8:	f845 3b04 	str.w	r3, [r5], #4
 80182cc:	e7e9      	b.n	80182a2 <__mdiff+0x8a>
 80182ce:	3e01      	subs	r6, #1
 80182d0:	e7e9      	b.n	80182a6 <__mdiff+0x8e>
	...

080182d4 <__ulp>:
 80182d4:	4b12      	ldr	r3, [pc, #72]	; (8018320 <__ulp+0x4c>)
 80182d6:	ee10 2a90 	vmov	r2, s1
 80182da:	401a      	ands	r2, r3
 80182dc:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80182e0:	2b00      	cmp	r3, #0
 80182e2:	dd04      	ble.n	80182ee <__ulp+0x1a>
 80182e4:	2000      	movs	r0, #0
 80182e6:	4619      	mov	r1, r3
 80182e8:	ec41 0b10 	vmov	d0, r0, r1
 80182ec:	4770      	bx	lr
 80182ee:	425b      	negs	r3, r3
 80182f0:	151b      	asrs	r3, r3, #20
 80182f2:	2b13      	cmp	r3, #19
 80182f4:	f04f 0000 	mov.w	r0, #0
 80182f8:	f04f 0100 	mov.w	r1, #0
 80182fc:	dc04      	bgt.n	8018308 <__ulp+0x34>
 80182fe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8018302:	fa42 f103 	asr.w	r1, r2, r3
 8018306:	e7ef      	b.n	80182e8 <__ulp+0x14>
 8018308:	3b14      	subs	r3, #20
 801830a:	2b1e      	cmp	r3, #30
 801830c:	f04f 0201 	mov.w	r2, #1
 8018310:	bfda      	itte	le
 8018312:	f1c3 031f 	rsble	r3, r3, #31
 8018316:	fa02 f303 	lslle.w	r3, r2, r3
 801831a:	4613      	movgt	r3, r2
 801831c:	4618      	mov	r0, r3
 801831e:	e7e3      	b.n	80182e8 <__ulp+0x14>
 8018320:	7ff00000 	.word	0x7ff00000

08018324 <__b2d>:
 8018324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018326:	6905      	ldr	r5, [r0, #16]
 8018328:	f100 0714 	add.w	r7, r0, #20
 801832c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8018330:	1f2e      	subs	r6, r5, #4
 8018332:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8018336:	4620      	mov	r0, r4
 8018338:	f7ff fdc4 	bl	8017ec4 <__hi0bits>
 801833c:	f1c0 0320 	rsb	r3, r0, #32
 8018340:	280a      	cmp	r0, #10
 8018342:	600b      	str	r3, [r1, #0]
 8018344:	f8df c074 	ldr.w	ip, [pc, #116]	; 80183bc <__b2d+0x98>
 8018348:	dc14      	bgt.n	8018374 <__b2d+0x50>
 801834a:	f1c0 0e0b 	rsb	lr, r0, #11
 801834e:	fa24 f10e 	lsr.w	r1, r4, lr
 8018352:	42b7      	cmp	r7, r6
 8018354:	ea41 030c 	orr.w	r3, r1, ip
 8018358:	bf34      	ite	cc
 801835a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801835e:	2100      	movcs	r1, #0
 8018360:	3015      	adds	r0, #21
 8018362:	fa04 f000 	lsl.w	r0, r4, r0
 8018366:	fa21 f10e 	lsr.w	r1, r1, lr
 801836a:	ea40 0201 	orr.w	r2, r0, r1
 801836e:	ec43 2b10 	vmov	d0, r2, r3
 8018372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018374:	42b7      	cmp	r7, r6
 8018376:	bf3a      	itte	cc
 8018378:	f1a5 0608 	subcc.w	r6, r5, #8
 801837c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018380:	2100      	movcs	r1, #0
 8018382:	380b      	subs	r0, #11
 8018384:	d015      	beq.n	80183b2 <__b2d+0x8e>
 8018386:	4084      	lsls	r4, r0
 8018388:	f1c0 0520 	rsb	r5, r0, #32
 801838c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8018390:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8018394:	42be      	cmp	r6, r7
 8018396:	fa21 fc05 	lsr.w	ip, r1, r5
 801839a:	ea44 030c 	orr.w	r3, r4, ip
 801839e:	bf8c      	ite	hi
 80183a0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80183a4:	2400      	movls	r4, #0
 80183a6:	fa01 f000 	lsl.w	r0, r1, r0
 80183aa:	40ec      	lsrs	r4, r5
 80183ac:	ea40 0204 	orr.w	r2, r0, r4
 80183b0:	e7dd      	b.n	801836e <__b2d+0x4a>
 80183b2:	ea44 030c 	orr.w	r3, r4, ip
 80183b6:	460a      	mov	r2, r1
 80183b8:	e7d9      	b.n	801836e <__b2d+0x4a>
 80183ba:	bf00      	nop
 80183bc:	3ff00000 	.word	0x3ff00000

080183c0 <__d2b>:
 80183c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80183c4:	460e      	mov	r6, r1
 80183c6:	2101      	movs	r1, #1
 80183c8:	ec59 8b10 	vmov	r8, r9, d0
 80183cc:	4615      	mov	r5, r2
 80183ce:	f7ff fcb5 	bl	8017d3c <_Balloc>
 80183d2:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80183d6:	4607      	mov	r7, r0
 80183d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80183dc:	bb34      	cbnz	r4, 801842c <__d2b+0x6c>
 80183de:	9301      	str	r3, [sp, #4]
 80183e0:	f1b8 0300 	subs.w	r3, r8, #0
 80183e4:	d027      	beq.n	8018436 <__d2b+0x76>
 80183e6:	a802      	add	r0, sp, #8
 80183e8:	f840 3d08 	str.w	r3, [r0, #-8]!
 80183ec:	f7ff fd89 	bl	8017f02 <__lo0bits>
 80183f0:	9900      	ldr	r1, [sp, #0]
 80183f2:	b1f0      	cbz	r0, 8018432 <__d2b+0x72>
 80183f4:	9a01      	ldr	r2, [sp, #4]
 80183f6:	f1c0 0320 	rsb	r3, r0, #32
 80183fa:	fa02 f303 	lsl.w	r3, r2, r3
 80183fe:	430b      	orrs	r3, r1
 8018400:	40c2      	lsrs	r2, r0
 8018402:	617b      	str	r3, [r7, #20]
 8018404:	9201      	str	r2, [sp, #4]
 8018406:	9b01      	ldr	r3, [sp, #4]
 8018408:	61bb      	str	r3, [r7, #24]
 801840a:	2b00      	cmp	r3, #0
 801840c:	bf14      	ite	ne
 801840e:	2102      	movne	r1, #2
 8018410:	2101      	moveq	r1, #1
 8018412:	6139      	str	r1, [r7, #16]
 8018414:	b1c4      	cbz	r4, 8018448 <__d2b+0x88>
 8018416:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801841a:	4404      	add	r4, r0
 801841c:	6034      	str	r4, [r6, #0]
 801841e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018422:	6028      	str	r0, [r5, #0]
 8018424:	4638      	mov	r0, r7
 8018426:	b003      	add	sp, #12
 8018428:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801842c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018430:	e7d5      	b.n	80183de <__d2b+0x1e>
 8018432:	6179      	str	r1, [r7, #20]
 8018434:	e7e7      	b.n	8018406 <__d2b+0x46>
 8018436:	a801      	add	r0, sp, #4
 8018438:	f7ff fd63 	bl	8017f02 <__lo0bits>
 801843c:	9b01      	ldr	r3, [sp, #4]
 801843e:	617b      	str	r3, [r7, #20]
 8018440:	2101      	movs	r1, #1
 8018442:	6139      	str	r1, [r7, #16]
 8018444:	3020      	adds	r0, #32
 8018446:	e7e5      	b.n	8018414 <__d2b+0x54>
 8018448:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801844c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018450:	6030      	str	r0, [r6, #0]
 8018452:	6918      	ldr	r0, [r3, #16]
 8018454:	f7ff fd36 	bl	8017ec4 <__hi0bits>
 8018458:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801845c:	e7e1      	b.n	8018422 <__d2b+0x62>

0801845e <__ratio>:
 801845e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018462:	4688      	mov	r8, r1
 8018464:	4669      	mov	r1, sp
 8018466:	4681      	mov	r9, r0
 8018468:	f7ff ff5c 	bl	8018324 <__b2d>
 801846c:	a901      	add	r1, sp, #4
 801846e:	4640      	mov	r0, r8
 8018470:	ec57 6b10 	vmov	r6, r7, d0
 8018474:	f7ff ff56 	bl	8018324 <__b2d>
 8018478:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801847c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8018480:	eba3 0c02 	sub.w	ip, r3, r2
 8018484:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018488:	1a9b      	subs	r3, r3, r2
 801848a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801848e:	ec5b ab10 	vmov	sl, fp, d0
 8018492:	2b00      	cmp	r3, #0
 8018494:	bfce      	itee	gt
 8018496:	463a      	movgt	r2, r7
 8018498:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801849c:	465a      	movle	r2, fp
 801849e:	4659      	mov	r1, fp
 80184a0:	463d      	mov	r5, r7
 80184a2:	bfd4      	ite	le
 80184a4:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80184a8:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80184ac:	4630      	mov	r0, r6
 80184ae:	ee10 2a10 	vmov	r2, s0
 80184b2:	460b      	mov	r3, r1
 80184b4:	4629      	mov	r1, r5
 80184b6:	f7e8 f9c9 	bl	800084c <__aeabi_ddiv>
 80184ba:	ec41 0b10 	vmov	d0, r0, r1
 80184be:	b003      	add	sp, #12
 80184c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080184c4 <__copybits>:
 80184c4:	3901      	subs	r1, #1
 80184c6:	b510      	push	{r4, lr}
 80184c8:	1149      	asrs	r1, r1, #5
 80184ca:	6914      	ldr	r4, [r2, #16]
 80184cc:	3101      	adds	r1, #1
 80184ce:	f102 0314 	add.w	r3, r2, #20
 80184d2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80184d6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80184da:	42a3      	cmp	r3, r4
 80184dc:	4602      	mov	r2, r0
 80184de:	d303      	bcc.n	80184e8 <__copybits+0x24>
 80184e0:	2300      	movs	r3, #0
 80184e2:	428a      	cmp	r2, r1
 80184e4:	d305      	bcc.n	80184f2 <__copybits+0x2e>
 80184e6:	bd10      	pop	{r4, pc}
 80184e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80184ec:	f840 2b04 	str.w	r2, [r0], #4
 80184f0:	e7f3      	b.n	80184da <__copybits+0x16>
 80184f2:	f842 3b04 	str.w	r3, [r2], #4
 80184f6:	e7f4      	b.n	80184e2 <__copybits+0x1e>

080184f8 <__any_on>:
 80184f8:	f100 0214 	add.w	r2, r0, #20
 80184fc:	6900      	ldr	r0, [r0, #16]
 80184fe:	114b      	asrs	r3, r1, #5
 8018500:	4298      	cmp	r0, r3
 8018502:	b510      	push	{r4, lr}
 8018504:	db11      	blt.n	801852a <__any_on+0x32>
 8018506:	dd0a      	ble.n	801851e <__any_on+0x26>
 8018508:	f011 011f 	ands.w	r1, r1, #31
 801850c:	d007      	beq.n	801851e <__any_on+0x26>
 801850e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8018512:	fa24 f001 	lsr.w	r0, r4, r1
 8018516:	fa00 f101 	lsl.w	r1, r0, r1
 801851a:	428c      	cmp	r4, r1
 801851c:	d10b      	bne.n	8018536 <__any_on+0x3e>
 801851e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018522:	4293      	cmp	r3, r2
 8018524:	d803      	bhi.n	801852e <__any_on+0x36>
 8018526:	2000      	movs	r0, #0
 8018528:	bd10      	pop	{r4, pc}
 801852a:	4603      	mov	r3, r0
 801852c:	e7f7      	b.n	801851e <__any_on+0x26>
 801852e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018532:	2900      	cmp	r1, #0
 8018534:	d0f5      	beq.n	8018522 <__any_on+0x2a>
 8018536:	2001      	movs	r0, #1
 8018538:	e7f6      	b.n	8018528 <__any_on+0x30>

0801853a <_calloc_r>:
 801853a:	b538      	push	{r3, r4, r5, lr}
 801853c:	fb02 f401 	mul.w	r4, r2, r1
 8018540:	4621      	mov	r1, r4
 8018542:	f7fc fcb5 	bl	8014eb0 <_malloc_r>
 8018546:	4605      	mov	r5, r0
 8018548:	b118      	cbz	r0, 8018552 <_calloc_r+0x18>
 801854a:	4622      	mov	r2, r4
 801854c:	2100      	movs	r1, #0
 801854e:	f7fc fc59 	bl	8014e04 <memset>
 8018552:	4628      	mov	r0, r5
 8018554:	bd38      	pop	{r3, r4, r5, pc}

08018556 <__ssputs_r>:
 8018556:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801855a:	688e      	ldr	r6, [r1, #8]
 801855c:	429e      	cmp	r6, r3
 801855e:	4682      	mov	sl, r0
 8018560:	460c      	mov	r4, r1
 8018562:	4690      	mov	r8, r2
 8018564:	4699      	mov	r9, r3
 8018566:	d837      	bhi.n	80185d8 <__ssputs_r+0x82>
 8018568:	898a      	ldrh	r2, [r1, #12]
 801856a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801856e:	d031      	beq.n	80185d4 <__ssputs_r+0x7e>
 8018570:	6825      	ldr	r5, [r4, #0]
 8018572:	6909      	ldr	r1, [r1, #16]
 8018574:	1a6f      	subs	r7, r5, r1
 8018576:	6965      	ldr	r5, [r4, #20]
 8018578:	2302      	movs	r3, #2
 801857a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801857e:	fb95 f5f3 	sdiv	r5, r5, r3
 8018582:	f109 0301 	add.w	r3, r9, #1
 8018586:	443b      	add	r3, r7
 8018588:	429d      	cmp	r5, r3
 801858a:	bf38      	it	cc
 801858c:	461d      	movcc	r5, r3
 801858e:	0553      	lsls	r3, r2, #21
 8018590:	d530      	bpl.n	80185f4 <__ssputs_r+0x9e>
 8018592:	4629      	mov	r1, r5
 8018594:	f7fc fc8c 	bl	8014eb0 <_malloc_r>
 8018598:	4606      	mov	r6, r0
 801859a:	b950      	cbnz	r0, 80185b2 <__ssputs_r+0x5c>
 801859c:	230c      	movs	r3, #12
 801859e:	f8ca 3000 	str.w	r3, [sl]
 80185a2:	89a3      	ldrh	r3, [r4, #12]
 80185a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80185a8:	81a3      	strh	r3, [r4, #12]
 80185aa:	f04f 30ff 	mov.w	r0, #4294967295
 80185ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80185b2:	463a      	mov	r2, r7
 80185b4:	6921      	ldr	r1, [r4, #16]
 80185b6:	f7fc fc01 	bl	8014dbc <memcpy>
 80185ba:	89a3      	ldrh	r3, [r4, #12]
 80185bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80185c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80185c4:	81a3      	strh	r3, [r4, #12]
 80185c6:	6126      	str	r6, [r4, #16]
 80185c8:	6165      	str	r5, [r4, #20]
 80185ca:	443e      	add	r6, r7
 80185cc:	1bed      	subs	r5, r5, r7
 80185ce:	6026      	str	r6, [r4, #0]
 80185d0:	60a5      	str	r5, [r4, #8]
 80185d2:	464e      	mov	r6, r9
 80185d4:	454e      	cmp	r6, r9
 80185d6:	d900      	bls.n	80185da <__ssputs_r+0x84>
 80185d8:	464e      	mov	r6, r9
 80185da:	4632      	mov	r2, r6
 80185dc:	4641      	mov	r1, r8
 80185de:	6820      	ldr	r0, [r4, #0]
 80185e0:	f7fc fbf7 	bl	8014dd2 <memmove>
 80185e4:	68a3      	ldr	r3, [r4, #8]
 80185e6:	1b9b      	subs	r3, r3, r6
 80185e8:	60a3      	str	r3, [r4, #8]
 80185ea:	6823      	ldr	r3, [r4, #0]
 80185ec:	441e      	add	r6, r3
 80185ee:	6026      	str	r6, [r4, #0]
 80185f0:	2000      	movs	r0, #0
 80185f2:	e7dc      	b.n	80185ae <__ssputs_r+0x58>
 80185f4:	462a      	mov	r2, r5
 80185f6:	f000 f920 	bl	801883a <_realloc_r>
 80185fa:	4606      	mov	r6, r0
 80185fc:	2800      	cmp	r0, #0
 80185fe:	d1e2      	bne.n	80185c6 <__ssputs_r+0x70>
 8018600:	6921      	ldr	r1, [r4, #16]
 8018602:	4650      	mov	r0, sl
 8018604:	f7fc fc06 	bl	8014e14 <_free_r>
 8018608:	e7c8      	b.n	801859c <__ssputs_r+0x46>
	...

0801860c <_svfiprintf_r>:
 801860c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018610:	461d      	mov	r5, r3
 8018612:	898b      	ldrh	r3, [r1, #12]
 8018614:	061f      	lsls	r7, r3, #24
 8018616:	b09d      	sub	sp, #116	; 0x74
 8018618:	4680      	mov	r8, r0
 801861a:	460c      	mov	r4, r1
 801861c:	4616      	mov	r6, r2
 801861e:	d50f      	bpl.n	8018640 <_svfiprintf_r+0x34>
 8018620:	690b      	ldr	r3, [r1, #16]
 8018622:	b96b      	cbnz	r3, 8018640 <_svfiprintf_r+0x34>
 8018624:	2140      	movs	r1, #64	; 0x40
 8018626:	f7fc fc43 	bl	8014eb0 <_malloc_r>
 801862a:	6020      	str	r0, [r4, #0]
 801862c:	6120      	str	r0, [r4, #16]
 801862e:	b928      	cbnz	r0, 801863c <_svfiprintf_r+0x30>
 8018630:	230c      	movs	r3, #12
 8018632:	f8c8 3000 	str.w	r3, [r8]
 8018636:	f04f 30ff 	mov.w	r0, #4294967295
 801863a:	e0c8      	b.n	80187ce <_svfiprintf_r+0x1c2>
 801863c:	2340      	movs	r3, #64	; 0x40
 801863e:	6163      	str	r3, [r4, #20]
 8018640:	2300      	movs	r3, #0
 8018642:	9309      	str	r3, [sp, #36]	; 0x24
 8018644:	2320      	movs	r3, #32
 8018646:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801864a:	2330      	movs	r3, #48	; 0x30
 801864c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018650:	9503      	str	r5, [sp, #12]
 8018652:	f04f 0b01 	mov.w	fp, #1
 8018656:	4637      	mov	r7, r6
 8018658:	463d      	mov	r5, r7
 801865a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801865e:	b10b      	cbz	r3, 8018664 <_svfiprintf_r+0x58>
 8018660:	2b25      	cmp	r3, #37	; 0x25
 8018662:	d13e      	bne.n	80186e2 <_svfiprintf_r+0xd6>
 8018664:	ebb7 0a06 	subs.w	sl, r7, r6
 8018668:	d00b      	beq.n	8018682 <_svfiprintf_r+0x76>
 801866a:	4653      	mov	r3, sl
 801866c:	4632      	mov	r2, r6
 801866e:	4621      	mov	r1, r4
 8018670:	4640      	mov	r0, r8
 8018672:	f7ff ff70 	bl	8018556 <__ssputs_r>
 8018676:	3001      	adds	r0, #1
 8018678:	f000 80a4 	beq.w	80187c4 <_svfiprintf_r+0x1b8>
 801867c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801867e:	4453      	add	r3, sl
 8018680:	9309      	str	r3, [sp, #36]	; 0x24
 8018682:	783b      	ldrb	r3, [r7, #0]
 8018684:	2b00      	cmp	r3, #0
 8018686:	f000 809d 	beq.w	80187c4 <_svfiprintf_r+0x1b8>
 801868a:	2300      	movs	r3, #0
 801868c:	f04f 32ff 	mov.w	r2, #4294967295
 8018690:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018694:	9304      	str	r3, [sp, #16]
 8018696:	9307      	str	r3, [sp, #28]
 8018698:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801869c:	931a      	str	r3, [sp, #104]	; 0x68
 801869e:	462f      	mov	r7, r5
 80186a0:	2205      	movs	r2, #5
 80186a2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80186a6:	4850      	ldr	r0, [pc, #320]	; (80187e8 <_svfiprintf_r+0x1dc>)
 80186a8:	f7e7 fd9a 	bl	80001e0 <memchr>
 80186ac:	9b04      	ldr	r3, [sp, #16]
 80186ae:	b9d0      	cbnz	r0, 80186e6 <_svfiprintf_r+0xda>
 80186b0:	06d9      	lsls	r1, r3, #27
 80186b2:	bf44      	itt	mi
 80186b4:	2220      	movmi	r2, #32
 80186b6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80186ba:	071a      	lsls	r2, r3, #28
 80186bc:	bf44      	itt	mi
 80186be:	222b      	movmi	r2, #43	; 0x2b
 80186c0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80186c4:	782a      	ldrb	r2, [r5, #0]
 80186c6:	2a2a      	cmp	r2, #42	; 0x2a
 80186c8:	d015      	beq.n	80186f6 <_svfiprintf_r+0xea>
 80186ca:	9a07      	ldr	r2, [sp, #28]
 80186cc:	462f      	mov	r7, r5
 80186ce:	2000      	movs	r0, #0
 80186d0:	250a      	movs	r5, #10
 80186d2:	4639      	mov	r1, r7
 80186d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80186d8:	3b30      	subs	r3, #48	; 0x30
 80186da:	2b09      	cmp	r3, #9
 80186dc:	d94d      	bls.n	801877a <_svfiprintf_r+0x16e>
 80186de:	b1b8      	cbz	r0, 8018710 <_svfiprintf_r+0x104>
 80186e0:	e00f      	b.n	8018702 <_svfiprintf_r+0xf6>
 80186e2:	462f      	mov	r7, r5
 80186e4:	e7b8      	b.n	8018658 <_svfiprintf_r+0x4c>
 80186e6:	4a40      	ldr	r2, [pc, #256]	; (80187e8 <_svfiprintf_r+0x1dc>)
 80186e8:	1a80      	subs	r0, r0, r2
 80186ea:	fa0b f000 	lsl.w	r0, fp, r0
 80186ee:	4318      	orrs	r0, r3
 80186f0:	9004      	str	r0, [sp, #16]
 80186f2:	463d      	mov	r5, r7
 80186f4:	e7d3      	b.n	801869e <_svfiprintf_r+0x92>
 80186f6:	9a03      	ldr	r2, [sp, #12]
 80186f8:	1d11      	adds	r1, r2, #4
 80186fa:	6812      	ldr	r2, [r2, #0]
 80186fc:	9103      	str	r1, [sp, #12]
 80186fe:	2a00      	cmp	r2, #0
 8018700:	db01      	blt.n	8018706 <_svfiprintf_r+0xfa>
 8018702:	9207      	str	r2, [sp, #28]
 8018704:	e004      	b.n	8018710 <_svfiprintf_r+0x104>
 8018706:	4252      	negs	r2, r2
 8018708:	f043 0302 	orr.w	r3, r3, #2
 801870c:	9207      	str	r2, [sp, #28]
 801870e:	9304      	str	r3, [sp, #16]
 8018710:	783b      	ldrb	r3, [r7, #0]
 8018712:	2b2e      	cmp	r3, #46	; 0x2e
 8018714:	d10c      	bne.n	8018730 <_svfiprintf_r+0x124>
 8018716:	787b      	ldrb	r3, [r7, #1]
 8018718:	2b2a      	cmp	r3, #42	; 0x2a
 801871a:	d133      	bne.n	8018784 <_svfiprintf_r+0x178>
 801871c:	9b03      	ldr	r3, [sp, #12]
 801871e:	1d1a      	adds	r2, r3, #4
 8018720:	681b      	ldr	r3, [r3, #0]
 8018722:	9203      	str	r2, [sp, #12]
 8018724:	2b00      	cmp	r3, #0
 8018726:	bfb8      	it	lt
 8018728:	f04f 33ff 	movlt.w	r3, #4294967295
 801872c:	3702      	adds	r7, #2
 801872e:	9305      	str	r3, [sp, #20]
 8018730:	4d2e      	ldr	r5, [pc, #184]	; (80187ec <_svfiprintf_r+0x1e0>)
 8018732:	7839      	ldrb	r1, [r7, #0]
 8018734:	2203      	movs	r2, #3
 8018736:	4628      	mov	r0, r5
 8018738:	f7e7 fd52 	bl	80001e0 <memchr>
 801873c:	b138      	cbz	r0, 801874e <_svfiprintf_r+0x142>
 801873e:	2340      	movs	r3, #64	; 0x40
 8018740:	1b40      	subs	r0, r0, r5
 8018742:	fa03 f000 	lsl.w	r0, r3, r0
 8018746:	9b04      	ldr	r3, [sp, #16]
 8018748:	4303      	orrs	r3, r0
 801874a:	3701      	adds	r7, #1
 801874c:	9304      	str	r3, [sp, #16]
 801874e:	7839      	ldrb	r1, [r7, #0]
 8018750:	4827      	ldr	r0, [pc, #156]	; (80187f0 <_svfiprintf_r+0x1e4>)
 8018752:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018756:	2206      	movs	r2, #6
 8018758:	1c7e      	adds	r6, r7, #1
 801875a:	f7e7 fd41 	bl	80001e0 <memchr>
 801875e:	2800      	cmp	r0, #0
 8018760:	d038      	beq.n	80187d4 <_svfiprintf_r+0x1c8>
 8018762:	4b24      	ldr	r3, [pc, #144]	; (80187f4 <_svfiprintf_r+0x1e8>)
 8018764:	bb13      	cbnz	r3, 80187ac <_svfiprintf_r+0x1a0>
 8018766:	9b03      	ldr	r3, [sp, #12]
 8018768:	3307      	adds	r3, #7
 801876a:	f023 0307 	bic.w	r3, r3, #7
 801876e:	3308      	adds	r3, #8
 8018770:	9303      	str	r3, [sp, #12]
 8018772:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018774:	444b      	add	r3, r9
 8018776:	9309      	str	r3, [sp, #36]	; 0x24
 8018778:	e76d      	b.n	8018656 <_svfiprintf_r+0x4a>
 801877a:	fb05 3202 	mla	r2, r5, r2, r3
 801877e:	2001      	movs	r0, #1
 8018780:	460f      	mov	r7, r1
 8018782:	e7a6      	b.n	80186d2 <_svfiprintf_r+0xc6>
 8018784:	2300      	movs	r3, #0
 8018786:	3701      	adds	r7, #1
 8018788:	9305      	str	r3, [sp, #20]
 801878a:	4619      	mov	r1, r3
 801878c:	250a      	movs	r5, #10
 801878e:	4638      	mov	r0, r7
 8018790:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018794:	3a30      	subs	r2, #48	; 0x30
 8018796:	2a09      	cmp	r2, #9
 8018798:	d903      	bls.n	80187a2 <_svfiprintf_r+0x196>
 801879a:	2b00      	cmp	r3, #0
 801879c:	d0c8      	beq.n	8018730 <_svfiprintf_r+0x124>
 801879e:	9105      	str	r1, [sp, #20]
 80187a0:	e7c6      	b.n	8018730 <_svfiprintf_r+0x124>
 80187a2:	fb05 2101 	mla	r1, r5, r1, r2
 80187a6:	2301      	movs	r3, #1
 80187a8:	4607      	mov	r7, r0
 80187aa:	e7f0      	b.n	801878e <_svfiprintf_r+0x182>
 80187ac:	ab03      	add	r3, sp, #12
 80187ae:	9300      	str	r3, [sp, #0]
 80187b0:	4622      	mov	r2, r4
 80187b2:	4b11      	ldr	r3, [pc, #68]	; (80187f8 <_svfiprintf_r+0x1ec>)
 80187b4:	a904      	add	r1, sp, #16
 80187b6:	4640      	mov	r0, r8
 80187b8:	f7fc fc68 	bl	801508c <_printf_float>
 80187bc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80187c0:	4681      	mov	r9, r0
 80187c2:	d1d6      	bne.n	8018772 <_svfiprintf_r+0x166>
 80187c4:	89a3      	ldrh	r3, [r4, #12]
 80187c6:	065b      	lsls	r3, r3, #25
 80187c8:	f53f af35 	bmi.w	8018636 <_svfiprintf_r+0x2a>
 80187cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80187ce:	b01d      	add	sp, #116	; 0x74
 80187d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80187d4:	ab03      	add	r3, sp, #12
 80187d6:	9300      	str	r3, [sp, #0]
 80187d8:	4622      	mov	r2, r4
 80187da:	4b07      	ldr	r3, [pc, #28]	; (80187f8 <_svfiprintf_r+0x1ec>)
 80187dc:	a904      	add	r1, sp, #16
 80187de:	4640      	mov	r0, r8
 80187e0:	f7fc ff0a 	bl	80155f8 <_printf_i>
 80187e4:	e7ea      	b.n	80187bc <_svfiprintf_r+0x1b0>
 80187e6:	bf00      	nop
 80187e8:	0801a71c 	.word	0x0801a71c
 80187ec:	0801a722 	.word	0x0801a722
 80187f0:	0801a726 	.word	0x0801a726
 80187f4:	0801508d 	.word	0x0801508d
 80187f8:	08018557 	.word	0x08018557

080187fc <strncmp>:
 80187fc:	b510      	push	{r4, lr}
 80187fe:	b16a      	cbz	r2, 801881c <strncmp+0x20>
 8018800:	3901      	subs	r1, #1
 8018802:	1884      	adds	r4, r0, r2
 8018804:	f810 3b01 	ldrb.w	r3, [r0], #1
 8018808:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801880c:	4293      	cmp	r3, r2
 801880e:	d103      	bne.n	8018818 <strncmp+0x1c>
 8018810:	42a0      	cmp	r0, r4
 8018812:	d001      	beq.n	8018818 <strncmp+0x1c>
 8018814:	2b00      	cmp	r3, #0
 8018816:	d1f5      	bne.n	8018804 <strncmp+0x8>
 8018818:	1a98      	subs	r0, r3, r2
 801881a:	bd10      	pop	{r4, pc}
 801881c:	4610      	mov	r0, r2
 801881e:	e7fc      	b.n	801881a <strncmp+0x1e>

08018820 <__ascii_wctomb>:
 8018820:	b149      	cbz	r1, 8018836 <__ascii_wctomb+0x16>
 8018822:	2aff      	cmp	r2, #255	; 0xff
 8018824:	bf85      	ittet	hi
 8018826:	238a      	movhi	r3, #138	; 0x8a
 8018828:	6003      	strhi	r3, [r0, #0]
 801882a:	700a      	strbls	r2, [r1, #0]
 801882c:	f04f 30ff 	movhi.w	r0, #4294967295
 8018830:	bf98      	it	ls
 8018832:	2001      	movls	r0, #1
 8018834:	4770      	bx	lr
 8018836:	4608      	mov	r0, r1
 8018838:	4770      	bx	lr

0801883a <_realloc_r>:
 801883a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801883c:	4607      	mov	r7, r0
 801883e:	4614      	mov	r4, r2
 8018840:	460e      	mov	r6, r1
 8018842:	b921      	cbnz	r1, 801884e <_realloc_r+0x14>
 8018844:	4611      	mov	r1, r2
 8018846:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801884a:	f7fc bb31 	b.w	8014eb0 <_malloc_r>
 801884e:	b922      	cbnz	r2, 801885a <_realloc_r+0x20>
 8018850:	f7fc fae0 	bl	8014e14 <_free_r>
 8018854:	4625      	mov	r5, r4
 8018856:	4628      	mov	r0, r5
 8018858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801885a:	f000 f814 	bl	8018886 <_malloc_usable_size_r>
 801885e:	42a0      	cmp	r0, r4
 8018860:	d20f      	bcs.n	8018882 <_realloc_r+0x48>
 8018862:	4621      	mov	r1, r4
 8018864:	4638      	mov	r0, r7
 8018866:	f7fc fb23 	bl	8014eb0 <_malloc_r>
 801886a:	4605      	mov	r5, r0
 801886c:	2800      	cmp	r0, #0
 801886e:	d0f2      	beq.n	8018856 <_realloc_r+0x1c>
 8018870:	4631      	mov	r1, r6
 8018872:	4622      	mov	r2, r4
 8018874:	f7fc faa2 	bl	8014dbc <memcpy>
 8018878:	4631      	mov	r1, r6
 801887a:	4638      	mov	r0, r7
 801887c:	f7fc faca 	bl	8014e14 <_free_r>
 8018880:	e7e9      	b.n	8018856 <_realloc_r+0x1c>
 8018882:	4635      	mov	r5, r6
 8018884:	e7e7      	b.n	8018856 <_realloc_r+0x1c>

08018886 <_malloc_usable_size_r>:
 8018886:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801888a:	1f18      	subs	r0, r3, #4
 801888c:	2b00      	cmp	r3, #0
 801888e:	bfbc      	itt	lt
 8018890:	580b      	ldrlt	r3, [r1, r0]
 8018892:	18c0      	addlt	r0, r0, r3
 8018894:	4770      	bx	lr
	...

08018898 <ceil>:
 8018898:	ec51 0b10 	vmov	r0, r1, d0
 801889c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80188a0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80188a4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80188a8:	2e13      	cmp	r6, #19
 80188aa:	460c      	mov	r4, r1
 80188ac:	ee10 5a10 	vmov	r5, s0
 80188b0:	4680      	mov	r8, r0
 80188b2:	dc30      	bgt.n	8018916 <ceil+0x7e>
 80188b4:	2e00      	cmp	r6, #0
 80188b6:	da12      	bge.n	80188de <ceil+0x46>
 80188b8:	a333      	add	r3, pc, #204	; (adr r3, 8018988 <ceil+0xf0>)
 80188ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188be:	f7e7 fce5 	bl	800028c <__adddf3>
 80188c2:	2200      	movs	r2, #0
 80188c4:	2300      	movs	r3, #0
 80188c6:	f7e8 f927 	bl	8000b18 <__aeabi_dcmpgt>
 80188ca:	b128      	cbz	r0, 80188d8 <ceil+0x40>
 80188cc:	2c00      	cmp	r4, #0
 80188ce:	db55      	blt.n	801897c <ceil+0xe4>
 80188d0:	432c      	orrs	r4, r5
 80188d2:	d057      	beq.n	8018984 <ceil+0xec>
 80188d4:	4c2e      	ldr	r4, [pc, #184]	; (8018990 <ceil+0xf8>)
 80188d6:	2500      	movs	r5, #0
 80188d8:	4621      	mov	r1, r4
 80188da:	4628      	mov	r0, r5
 80188dc:	e025      	b.n	801892a <ceil+0x92>
 80188de:	4f2d      	ldr	r7, [pc, #180]	; (8018994 <ceil+0xfc>)
 80188e0:	4137      	asrs	r7, r6
 80188e2:	ea01 0307 	and.w	r3, r1, r7
 80188e6:	4303      	orrs	r3, r0
 80188e8:	d01f      	beq.n	801892a <ceil+0x92>
 80188ea:	a327      	add	r3, pc, #156	; (adr r3, 8018988 <ceil+0xf0>)
 80188ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188f0:	f7e7 fccc 	bl	800028c <__adddf3>
 80188f4:	2200      	movs	r2, #0
 80188f6:	2300      	movs	r3, #0
 80188f8:	f7e8 f90e 	bl	8000b18 <__aeabi_dcmpgt>
 80188fc:	2800      	cmp	r0, #0
 80188fe:	d0eb      	beq.n	80188d8 <ceil+0x40>
 8018900:	2c00      	cmp	r4, #0
 8018902:	bfc2      	ittt	gt
 8018904:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8018908:	fa43 f606 	asrgt.w	r6, r3, r6
 801890c:	19a4      	addgt	r4, r4, r6
 801890e:	ea24 0407 	bic.w	r4, r4, r7
 8018912:	2500      	movs	r5, #0
 8018914:	e7e0      	b.n	80188d8 <ceil+0x40>
 8018916:	2e33      	cmp	r6, #51	; 0x33
 8018918:	dd0b      	ble.n	8018932 <ceil+0x9a>
 801891a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801891e:	d104      	bne.n	801892a <ceil+0x92>
 8018920:	ee10 2a10 	vmov	r2, s0
 8018924:	460b      	mov	r3, r1
 8018926:	f7e7 fcb1 	bl	800028c <__adddf3>
 801892a:	ec41 0b10 	vmov	d0, r0, r1
 801892e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018932:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8018936:	f04f 33ff 	mov.w	r3, #4294967295
 801893a:	fa23 f707 	lsr.w	r7, r3, r7
 801893e:	4207      	tst	r7, r0
 8018940:	d0f3      	beq.n	801892a <ceil+0x92>
 8018942:	a311      	add	r3, pc, #68	; (adr r3, 8018988 <ceil+0xf0>)
 8018944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018948:	f7e7 fca0 	bl	800028c <__adddf3>
 801894c:	2200      	movs	r2, #0
 801894e:	2300      	movs	r3, #0
 8018950:	f7e8 f8e2 	bl	8000b18 <__aeabi_dcmpgt>
 8018954:	2800      	cmp	r0, #0
 8018956:	d0bf      	beq.n	80188d8 <ceil+0x40>
 8018958:	2c00      	cmp	r4, #0
 801895a:	dd02      	ble.n	8018962 <ceil+0xca>
 801895c:	2e14      	cmp	r6, #20
 801895e:	d103      	bne.n	8018968 <ceil+0xd0>
 8018960:	3401      	adds	r4, #1
 8018962:	ea25 0507 	bic.w	r5, r5, r7
 8018966:	e7b7      	b.n	80188d8 <ceil+0x40>
 8018968:	2301      	movs	r3, #1
 801896a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801896e:	fa03 f606 	lsl.w	r6, r3, r6
 8018972:	4435      	add	r5, r6
 8018974:	4545      	cmp	r5, r8
 8018976:	bf38      	it	cc
 8018978:	18e4      	addcc	r4, r4, r3
 801897a:	e7f2      	b.n	8018962 <ceil+0xca>
 801897c:	2500      	movs	r5, #0
 801897e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8018982:	e7a9      	b.n	80188d8 <ceil+0x40>
 8018984:	4625      	mov	r5, r4
 8018986:	e7a7      	b.n	80188d8 <ceil+0x40>
 8018988:	8800759c 	.word	0x8800759c
 801898c:	7e37e43c 	.word	0x7e37e43c
 8018990:	3ff00000 	.word	0x3ff00000
 8018994:	000fffff 	.word	0x000fffff

08018998 <cos>:
 8018998:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801899a:	ec51 0b10 	vmov	r0, r1, d0
 801899e:	4a1e      	ldr	r2, [pc, #120]	; (8018a18 <cos+0x80>)
 80189a0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80189a4:	4293      	cmp	r3, r2
 80189a6:	dc06      	bgt.n	80189b6 <cos+0x1e>
 80189a8:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8018a10 <cos+0x78>
 80189ac:	f000 fcec 	bl	8019388 <__kernel_cos>
 80189b0:	ec51 0b10 	vmov	r0, r1, d0
 80189b4:	e007      	b.n	80189c6 <cos+0x2e>
 80189b6:	4a19      	ldr	r2, [pc, #100]	; (8018a1c <cos+0x84>)
 80189b8:	4293      	cmp	r3, r2
 80189ba:	dd09      	ble.n	80189d0 <cos+0x38>
 80189bc:	ee10 2a10 	vmov	r2, s0
 80189c0:	460b      	mov	r3, r1
 80189c2:	f7e7 fc61 	bl	8000288 <__aeabi_dsub>
 80189c6:	ec41 0b10 	vmov	d0, r0, r1
 80189ca:	b005      	add	sp, #20
 80189cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80189d0:	4668      	mov	r0, sp
 80189d2:	f000 fa35 	bl	8018e40 <__ieee754_rem_pio2>
 80189d6:	f000 0003 	and.w	r0, r0, #3
 80189da:	2801      	cmp	r0, #1
 80189dc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80189e0:	ed9d 0b00 	vldr	d0, [sp]
 80189e4:	d007      	beq.n	80189f6 <cos+0x5e>
 80189e6:	2802      	cmp	r0, #2
 80189e8:	d00e      	beq.n	8018a08 <cos+0x70>
 80189ea:	2800      	cmp	r0, #0
 80189ec:	d0de      	beq.n	80189ac <cos+0x14>
 80189ee:	2001      	movs	r0, #1
 80189f0:	f001 f8d2 	bl	8019b98 <__kernel_sin>
 80189f4:	e7dc      	b.n	80189b0 <cos+0x18>
 80189f6:	f001 f8cf 	bl	8019b98 <__kernel_sin>
 80189fa:	ec53 2b10 	vmov	r2, r3, d0
 80189fe:	ee10 0a10 	vmov	r0, s0
 8018a02:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8018a06:	e7de      	b.n	80189c6 <cos+0x2e>
 8018a08:	f000 fcbe 	bl	8019388 <__kernel_cos>
 8018a0c:	e7f5      	b.n	80189fa <cos+0x62>
 8018a0e:	bf00      	nop
	...
 8018a18:	3fe921fb 	.word	0x3fe921fb
 8018a1c:	7fefffff 	.word	0x7fefffff

08018a20 <round>:
 8018a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a22:	ec57 6b10 	vmov	r6, r7, d0
 8018a26:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8018a2a:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8018a2e:	2c13      	cmp	r4, #19
 8018a30:	463b      	mov	r3, r7
 8018a32:	463d      	mov	r5, r7
 8018a34:	dc17      	bgt.n	8018a66 <round+0x46>
 8018a36:	2c00      	cmp	r4, #0
 8018a38:	da09      	bge.n	8018a4e <round+0x2e>
 8018a3a:	3401      	adds	r4, #1
 8018a3c:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8018a40:	d103      	bne.n	8018a4a <round+0x2a>
 8018a42:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8018a46:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8018a4a:	2100      	movs	r1, #0
 8018a4c:	e02c      	b.n	8018aa8 <round+0x88>
 8018a4e:	4a18      	ldr	r2, [pc, #96]	; (8018ab0 <round+0x90>)
 8018a50:	4122      	asrs	r2, r4
 8018a52:	4217      	tst	r7, r2
 8018a54:	d100      	bne.n	8018a58 <round+0x38>
 8018a56:	b19e      	cbz	r6, 8018a80 <round+0x60>
 8018a58:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8018a5c:	4123      	asrs	r3, r4
 8018a5e:	442b      	add	r3, r5
 8018a60:	ea23 0302 	bic.w	r3, r3, r2
 8018a64:	e7f1      	b.n	8018a4a <round+0x2a>
 8018a66:	2c33      	cmp	r4, #51	; 0x33
 8018a68:	dd0d      	ble.n	8018a86 <round+0x66>
 8018a6a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8018a6e:	d107      	bne.n	8018a80 <round+0x60>
 8018a70:	4630      	mov	r0, r6
 8018a72:	4639      	mov	r1, r7
 8018a74:	ee10 2a10 	vmov	r2, s0
 8018a78:	f7e7 fc08 	bl	800028c <__adddf3>
 8018a7c:	4606      	mov	r6, r0
 8018a7e:	460f      	mov	r7, r1
 8018a80:	ec47 6b10 	vmov	d0, r6, r7
 8018a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018a86:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8018a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8018a8e:	40d0      	lsrs	r0, r2
 8018a90:	4206      	tst	r6, r0
 8018a92:	d0f5      	beq.n	8018a80 <round+0x60>
 8018a94:	2201      	movs	r2, #1
 8018a96:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8018a9a:	fa02 f404 	lsl.w	r4, r2, r4
 8018a9e:	1931      	adds	r1, r6, r4
 8018aa0:	bf28      	it	cs
 8018aa2:	189b      	addcs	r3, r3, r2
 8018aa4:	ea21 0100 	bic.w	r1, r1, r0
 8018aa8:	461f      	mov	r7, r3
 8018aaa:	460e      	mov	r6, r1
 8018aac:	e7e8      	b.n	8018a80 <round+0x60>
 8018aae:	bf00      	nop
 8018ab0:	000fffff 	.word	0x000fffff
 8018ab4:	00000000 	.word	0x00000000

08018ab8 <sin>:
 8018ab8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018aba:	ec51 0b10 	vmov	r0, r1, d0
 8018abe:	4a20      	ldr	r2, [pc, #128]	; (8018b40 <sin+0x88>)
 8018ac0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8018ac4:	4293      	cmp	r3, r2
 8018ac6:	dc07      	bgt.n	8018ad8 <sin+0x20>
 8018ac8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8018b38 <sin+0x80>
 8018acc:	2000      	movs	r0, #0
 8018ace:	f001 f863 	bl	8019b98 <__kernel_sin>
 8018ad2:	ec51 0b10 	vmov	r0, r1, d0
 8018ad6:	e007      	b.n	8018ae8 <sin+0x30>
 8018ad8:	4a1a      	ldr	r2, [pc, #104]	; (8018b44 <sin+0x8c>)
 8018ada:	4293      	cmp	r3, r2
 8018adc:	dd09      	ble.n	8018af2 <sin+0x3a>
 8018ade:	ee10 2a10 	vmov	r2, s0
 8018ae2:	460b      	mov	r3, r1
 8018ae4:	f7e7 fbd0 	bl	8000288 <__aeabi_dsub>
 8018ae8:	ec41 0b10 	vmov	d0, r0, r1
 8018aec:	b005      	add	sp, #20
 8018aee:	f85d fb04 	ldr.w	pc, [sp], #4
 8018af2:	4668      	mov	r0, sp
 8018af4:	f000 f9a4 	bl	8018e40 <__ieee754_rem_pio2>
 8018af8:	f000 0003 	and.w	r0, r0, #3
 8018afc:	2801      	cmp	r0, #1
 8018afe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018b02:	ed9d 0b00 	vldr	d0, [sp]
 8018b06:	d004      	beq.n	8018b12 <sin+0x5a>
 8018b08:	2802      	cmp	r0, #2
 8018b0a:	d005      	beq.n	8018b18 <sin+0x60>
 8018b0c:	b970      	cbnz	r0, 8018b2c <sin+0x74>
 8018b0e:	2001      	movs	r0, #1
 8018b10:	e7dd      	b.n	8018ace <sin+0x16>
 8018b12:	f000 fc39 	bl	8019388 <__kernel_cos>
 8018b16:	e7dc      	b.n	8018ad2 <sin+0x1a>
 8018b18:	2001      	movs	r0, #1
 8018b1a:	f001 f83d 	bl	8019b98 <__kernel_sin>
 8018b1e:	ec53 2b10 	vmov	r2, r3, d0
 8018b22:	ee10 0a10 	vmov	r0, s0
 8018b26:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8018b2a:	e7dd      	b.n	8018ae8 <sin+0x30>
 8018b2c:	f000 fc2c 	bl	8019388 <__kernel_cos>
 8018b30:	e7f5      	b.n	8018b1e <sin+0x66>
 8018b32:	bf00      	nop
 8018b34:	f3af 8000 	nop.w
	...
 8018b40:	3fe921fb 	.word	0x3fe921fb
 8018b44:	7fefffff 	.word	0x7fefffff

08018b48 <ceilf>:
 8018b48:	ee10 3a10 	vmov	r3, s0
 8018b4c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8018b50:	0dca      	lsrs	r2, r1, #23
 8018b52:	3a7f      	subs	r2, #127	; 0x7f
 8018b54:	2a16      	cmp	r2, #22
 8018b56:	dc2a      	bgt.n	8018bae <ceilf+0x66>
 8018b58:	2a00      	cmp	r2, #0
 8018b5a:	da11      	bge.n	8018b80 <ceilf+0x38>
 8018b5c:	eddf 7a18 	vldr	s15, [pc, #96]	; 8018bc0 <ceilf+0x78>
 8018b60:	ee30 0a27 	vadd.f32	s0, s0, s15
 8018b64:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8018b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b6c:	dd05      	ble.n	8018b7a <ceilf+0x32>
 8018b6e:	2b00      	cmp	r3, #0
 8018b70:	db23      	blt.n	8018bba <ceilf+0x72>
 8018b72:	2900      	cmp	r1, #0
 8018b74:	bf18      	it	ne
 8018b76:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 8018b7a:	ee00 3a10 	vmov	s0, r3
 8018b7e:	4770      	bx	lr
 8018b80:	4910      	ldr	r1, [pc, #64]	; (8018bc4 <ceilf+0x7c>)
 8018b82:	4111      	asrs	r1, r2
 8018b84:	420b      	tst	r3, r1
 8018b86:	d0fa      	beq.n	8018b7e <ceilf+0x36>
 8018b88:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8018bc0 <ceilf+0x78>
 8018b8c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8018b90:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8018b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b98:	ddef      	ble.n	8018b7a <ceilf+0x32>
 8018b9a:	2b00      	cmp	r3, #0
 8018b9c:	bfc2      	ittt	gt
 8018b9e:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 8018ba2:	fa40 f202 	asrgt.w	r2, r0, r2
 8018ba6:	189b      	addgt	r3, r3, r2
 8018ba8:	ea23 0301 	bic.w	r3, r3, r1
 8018bac:	e7e5      	b.n	8018b7a <ceilf+0x32>
 8018bae:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8018bb2:	d3e4      	bcc.n	8018b7e <ceilf+0x36>
 8018bb4:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018bb8:	4770      	bx	lr
 8018bba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8018bbe:	e7dc      	b.n	8018b7a <ceilf+0x32>
 8018bc0:	7149f2ca 	.word	0x7149f2ca
 8018bc4:	007fffff 	.word	0x007fffff

08018bc8 <atan2>:
 8018bc8:	f000 b85a 	b.w	8018c80 <__ieee754_atan2>

08018bcc <sqrt>:
 8018bcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018bd0:	ed2d 8b02 	vpush	{d8}
 8018bd4:	b08b      	sub	sp, #44	; 0x2c
 8018bd6:	ec55 4b10 	vmov	r4, r5, d0
 8018bda:	f000 fb23 	bl	8019224 <__ieee754_sqrt>
 8018bde:	4b26      	ldr	r3, [pc, #152]	; (8018c78 <sqrt+0xac>)
 8018be0:	eeb0 8a40 	vmov.f32	s16, s0
 8018be4:	eef0 8a60 	vmov.f32	s17, s1
 8018be8:	f993 6000 	ldrsb.w	r6, [r3]
 8018bec:	1c73      	adds	r3, r6, #1
 8018bee:	d02a      	beq.n	8018c46 <sqrt+0x7a>
 8018bf0:	4622      	mov	r2, r4
 8018bf2:	462b      	mov	r3, r5
 8018bf4:	4620      	mov	r0, r4
 8018bf6:	4629      	mov	r1, r5
 8018bf8:	f7e7 ff98 	bl	8000b2c <__aeabi_dcmpun>
 8018bfc:	4607      	mov	r7, r0
 8018bfe:	bb10      	cbnz	r0, 8018c46 <sqrt+0x7a>
 8018c00:	f04f 0800 	mov.w	r8, #0
 8018c04:	f04f 0900 	mov.w	r9, #0
 8018c08:	4642      	mov	r2, r8
 8018c0a:	464b      	mov	r3, r9
 8018c0c:	4620      	mov	r0, r4
 8018c0e:	4629      	mov	r1, r5
 8018c10:	f7e7 ff64 	bl	8000adc <__aeabi_dcmplt>
 8018c14:	b1b8      	cbz	r0, 8018c46 <sqrt+0x7a>
 8018c16:	2301      	movs	r3, #1
 8018c18:	9300      	str	r3, [sp, #0]
 8018c1a:	4b18      	ldr	r3, [pc, #96]	; (8018c7c <sqrt+0xb0>)
 8018c1c:	9301      	str	r3, [sp, #4]
 8018c1e:	9708      	str	r7, [sp, #32]
 8018c20:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8018c24:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8018c28:	b9b6      	cbnz	r6, 8018c58 <sqrt+0x8c>
 8018c2a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8018c2e:	4668      	mov	r0, sp
 8018c30:	f001 fa9e 	bl	801a170 <matherr>
 8018c34:	b1d0      	cbz	r0, 8018c6c <sqrt+0xa0>
 8018c36:	9b08      	ldr	r3, [sp, #32]
 8018c38:	b11b      	cbz	r3, 8018c42 <sqrt+0x76>
 8018c3a:	f7fc f885 	bl	8014d48 <__errno>
 8018c3e:	9b08      	ldr	r3, [sp, #32]
 8018c40:	6003      	str	r3, [r0, #0]
 8018c42:	ed9d 8b06 	vldr	d8, [sp, #24]
 8018c46:	eeb0 0a48 	vmov.f32	s0, s16
 8018c4a:	eef0 0a68 	vmov.f32	s1, s17
 8018c4e:	b00b      	add	sp, #44	; 0x2c
 8018c50:	ecbd 8b02 	vpop	{d8}
 8018c54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018c58:	4642      	mov	r2, r8
 8018c5a:	464b      	mov	r3, r9
 8018c5c:	4640      	mov	r0, r8
 8018c5e:	4649      	mov	r1, r9
 8018c60:	f7e7 fdf4 	bl	800084c <__aeabi_ddiv>
 8018c64:	2e02      	cmp	r6, #2
 8018c66:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8018c6a:	d1e0      	bne.n	8018c2e <sqrt+0x62>
 8018c6c:	f7fc f86c 	bl	8014d48 <__errno>
 8018c70:	2321      	movs	r3, #33	; 0x21
 8018c72:	6003      	str	r3, [r0, #0]
 8018c74:	e7df      	b.n	8018c36 <sqrt+0x6a>
 8018c76:	bf00      	nop
 8018c78:	200023dc 	.word	0x200023dc
 8018c7c:	0801a82e 	.word	0x0801a82e

08018c80 <__ieee754_atan2>:
 8018c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018c84:	ec57 6b11 	vmov	r6, r7, d1
 8018c88:	4273      	negs	r3, r6
 8018c8a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8018c8e:	4333      	orrs	r3, r6
 8018c90:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8018e38 <__ieee754_atan2+0x1b8>
 8018c94:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8018c98:	4573      	cmp	r3, lr
 8018c9a:	ec51 0b10 	vmov	r0, r1, d0
 8018c9e:	ee11 8a10 	vmov	r8, s2
 8018ca2:	d80a      	bhi.n	8018cba <__ieee754_atan2+0x3a>
 8018ca4:	4244      	negs	r4, r0
 8018ca6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8018caa:	4304      	orrs	r4, r0
 8018cac:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8018cb0:	4574      	cmp	r4, lr
 8018cb2:	468c      	mov	ip, r1
 8018cb4:	ee10 9a10 	vmov	r9, s0
 8018cb8:	d907      	bls.n	8018cca <__ieee754_atan2+0x4a>
 8018cba:	4632      	mov	r2, r6
 8018cbc:	463b      	mov	r3, r7
 8018cbe:	f7e7 fae5 	bl	800028c <__adddf3>
 8018cc2:	ec41 0b10 	vmov	d0, r0, r1
 8018cc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018cca:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8018cce:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8018cd2:	4334      	orrs	r4, r6
 8018cd4:	d103      	bne.n	8018cde <__ieee754_atan2+0x5e>
 8018cd6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018cda:	f001 b819 	b.w	8019d10 <atan>
 8018cde:	17bc      	asrs	r4, r7, #30
 8018ce0:	f004 0402 	and.w	r4, r4, #2
 8018ce4:	ea53 0909 	orrs.w	r9, r3, r9
 8018ce8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8018cec:	d107      	bne.n	8018cfe <__ieee754_atan2+0x7e>
 8018cee:	2c02      	cmp	r4, #2
 8018cf0:	d073      	beq.n	8018dda <__ieee754_atan2+0x15a>
 8018cf2:	2c03      	cmp	r4, #3
 8018cf4:	d1e5      	bne.n	8018cc2 <__ieee754_atan2+0x42>
 8018cf6:	a13e      	add	r1, pc, #248	; (adr r1, 8018df0 <__ieee754_atan2+0x170>)
 8018cf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018cfc:	e7e1      	b.n	8018cc2 <__ieee754_atan2+0x42>
 8018cfe:	ea52 0808 	orrs.w	r8, r2, r8
 8018d02:	d106      	bne.n	8018d12 <__ieee754_atan2+0x92>
 8018d04:	f1bc 0f00 	cmp.w	ip, #0
 8018d08:	da6b      	bge.n	8018de2 <__ieee754_atan2+0x162>
 8018d0a:	a13b      	add	r1, pc, #236	; (adr r1, 8018df8 <__ieee754_atan2+0x178>)
 8018d0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018d10:	e7d7      	b.n	8018cc2 <__ieee754_atan2+0x42>
 8018d12:	4572      	cmp	r2, lr
 8018d14:	d120      	bne.n	8018d58 <__ieee754_atan2+0xd8>
 8018d16:	4293      	cmp	r3, r2
 8018d18:	d111      	bne.n	8018d3e <__ieee754_atan2+0xbe>
 8018d1a:	2c02      	cmp	r4, #2
 8018d1c:	d007      	beq.n	8018d2e <__ieee754_atan2+0xae>
 8018d1e:	2c03      	cmp	r4, #3
 8018d20:	d009      	beq.n	8018d36 <__ieee754_atan2+0xb6>
 8018d22:	2c01      	cmp	r4, #1
 8018d24:	d155      	bne.n	8018dd2 <__ieee754_atan2+0x152>
 8018d26:	a136      	add	r1, pc, #216	; (adr r1, 8018e00 <__ieee754_atan2+0x180>)
 8018d28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018d2c:	e7c9      	b.n	8018cc2 <__ieee754_atan2+0x42>
 8018d2e:	a136      	add	r1, pc, #216	; (adr r1, 8018e08 <__ieee754_atan2+0x188>)
 8018d30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018d34:	e7c5      	b.n	8018cc2 <__ieee754_atan2+0x42>
 8018d36:	a136      	add	r1, pc, #216	; (adr r1, 8018e10 <__ieee754_atan2+0x190>)
 8018d38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018d3c:	e7c1      	b.n	8018cc2 <__ieee754_atan2+0x42>
 8018d3e:	2c02      	cmp	r4, #2
 8018d40:	d04b      	beq.n	8018dda <__ieee754_atan2+0x15a>
 8018d42:	2c03      	cmp	r4, #3
 8018d44:	d0d7      	beq.n	8018cf6 <__ieee754_atan2+0x76>
 8018d46:	2c01      	cmp	r4, #1
 8018d48:	f04f 0000 	mov.w	r0, #0
 8018d4c:	d102      	bne.n	8018d54 <__ieee754_atan2+0xd4>
 8018d4e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8018d52:	e7b6      	b.n	8018cc2 <__ieee754_atan2+0x42>
 8018d54:	2100      	movs	r1, #0
 8018d56:	e7b4      	b.n	8018cc2 <__ieee754_atan2+0x42>
 8018d58:	4573      	cmp	r3, lr
 8018d5a:	d0d3      	beq.n	8018d04 <__ieee754_atan2+0x84>
 8018d5c:	1a9b      	subs	r3, r3, r2
 8018d5e:	151b      	asrs	r3, r3, #20
 8018d60:	2b3c      	cmp	r3, #60	; 0x3c
 8018d62:	dc1e      	bgt.n	8018da2 <__ieee754_atan2+0x122>
 8018d64:	2f00      	cmp	r7, #0
 8018d66:	da01      	bge.n	8018d6c <__ieee754_atan2+0xec>
 8018d68:	333c      	adds	r3, #60	; 0x3c
 8018d6a:	db1e      	blt.n	8018daa <__ieee754_atan2+0x12a>
 8018d6c:	4632      	mov	r2, r6
 8018d6e:	463b      	mov	r3, r7
 8018d70:	f7e7 fd6c 	bl	800084c <__aeabi_ddiv>
 8018d74:	ec41 0b10 	vmov	d0, r0, r1
 8018d78:	f001 f96a 	bl	801a050 <fabs>
 8018d7c:	f000 ffc8 	bl	8019d10 <atan>
 8018d80:	ec51 0b10 	vmov	r0, r1, d0
 8018d84:	2c01      	cmp	r4, #1
 8018d86:	d013      	beq.n	8018db0 <__ieee754_atan2+0x130>
 8018d88:	2c02      	cmp	r4, #2
 8018d8a:	d015      	beq.n	8018db8 <__ieee754_atan2+0x138>
 8018d8c:	2c00      	cmp	r4, #0
 8018d8e:	d098      	beq.n	8018cc2 <__ieee754_atan2+0x42>
 8018d90:	a321      	add	r3, pc, #132	; (adr r3, 8018e18 <__ieee754_atan2+0x198>)
 8018d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d96:	f7e7 fa77 	bl	8000288 <__aeabi_dsub>
 8018d9a:	a321      	add	r3, pc, #132	; (adr r3, 8018e20 <__ieee754_atan2+0x1a0>)
 8018d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018da0:	e014      	b.n	8018dcc <__ieee754_atan2+0x14c>
 8018da2:	a121      	add	r1, pc, #132	; (adr r1, 8018e28 <__ieee754_atan2+0x1a8>)
 8018da4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018da8:	e7ec      	b.n	8018d84 <__ieee754_atan2+0x104>
 8018daa:	2000      	movs	r0, #0
 8018dac:	2100      	movs	r1, #0
 8018dae:	e7e9      	b.n	8018d84 <__ieee754_atan2+0x104>
 8018db0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018db4:	4619      	mov	r1, r3
 8018db6:	e784      	b.n	8018cc2 <__ieee754_atan2+0x42>
 8018db8:	a317      	add	r3, pc, #92	; (adr r3, 8018e18 <__ieee754_atan2+0x198>)
 8018dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018dbe:	f7e7 fa63 	bl	8000288 <__aeabi_dsub>
 8018dc2:	4602      	mov	r2, r0
 8018dc4:	460b      	mov	r3, r1
 8018dc6:	a116      	add	r1, pc, #88	; (adr r1, 8018e20 <__ieee754_atan2+0x1a0>)
 8018dc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018dcc:	f7e7 fa5c 	bl	8000288 <__aeabi_dsub>
 8018dd0:	e777      	b.n	8018cc2 <__ieee754_atan2+0x42>
 8018dd2:	a117      	add	r1, pc, #92	; (adr r1, 8018e30 <__ieee754_atan2+0x1b0>)
 8018dd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018dd8:	e773      	b.n	8018cc2 <__ieee754_atan2+0x42>
 8018dda:	a111      	add	r1, pc, #68	; (adr r1, 8018e20 <__ieee754_atan2+0x1a0>)
 8018ddc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018de0:	e76f      	b.n	8018cc2 <__ieee754_atan2+0x42>
 8018de2:	a111      	add	r1, pc, #68	; (adr r1, 8018e28 <__ieee754_atan2+0x1a8>)
 8018de4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018de8:	e76b      	b.n	8018cc2 <__ieee754_atan2+0x42>
 8018dea:	bf00      	nop
 8018dec:	f3af 8000 	nop.w
 8018df0:	54442d18 	.word	0x54442d18
 8018df4:	c00921fb 	.word	0xc00921fb
 8018df8:	54442d18 	.word	0x54442d18
 8018dfc:	bff921fb 	.word	0xbff921fb
 8018e00:	54442d18 	.word	0x54442d18
 8018e04:	bfe921fb 	.word	0xbfe921fb
 8018e08:	7f3321d2 	.word	0x7f3321d2
 8018e0c:	4002d97c 	.word	0x4002d97c
 8018e10:	7f3321d2 	.word	0x7f3321d2
 8018e14:	c002d97c 	.word	0xc002d97c
 8018e18:	33145c07 	.word	0x33145c07
 8018e1c:	3ca1a626 	.word	0x3ca1a626
 8018e20:	54442d18 	.word	0x54442d18
 8018e24:	400921fb 	.word	0x400921fb
 8018e28:	54442d18 	.word	0x54442d18
 8018e2c:	3ff921fb 	.word	0x3ff921fb
 8018e30:	54442d18 	.word	0x54442d18
 8018e34:	3fe921fb 	.word	0x3fe921fb
 8018e38:	7ff00000 	.word	0x7ff00000
 8018e3c:	00000000 	.word	0x00000000

08018e40 <__ieee754_rem_pio2>:
 8018e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e44:	ec57 6b10 	vmov	r6, r7, d0
 8018e48:	4bc3      	ldr	r3, [pc, #780]	; (8019158 <__ieee754_rem_pio2+0x318>)
 8018e4a:	b08d      	sub	sp, #52	; 0x34
 8018e4c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8018e50:	4598      	cmp	r8, r3
 8018e52:	4604      	mov	r4, r0
 8018e54:	9704      	str	r7, [sp, #16]
 8018e56:	dc07      	bgt.n	8018e68 <__ieee754_rem_pio2+0x28>
 8018e58:	2200      	movs	r2, #0
 8018e5a:	2300      	movs	r3, #0
 8018e5c:	ed84 0b00 	vstr	d0, [r4]
 8018e60:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8018e64:	2500      	movs	r5, #0
 8018e66:	e027      	b.n	8018eb8 <__ieee754_rem_pio2+0x78>
 8018e68:	4bbc      	ldr	r3, [pc, #752]	; (801915c <__ieee754_rem_pio2+0x31c>)
 8018e6a:	4598      	cmp	r8, r3
 8018e6c:	dc75      	bgt.n	8018f5a <__ieee754_rem_pio2+0x11a>
 8018e6e:	9b04      	ldr	r3, [sp, #16]
 8018e70:	4dbb      	ldr	r5, [pc, #748]	; (8019160 <__ieee754_rem_pio2+0x320>)
 8018e72:	2b00      	cmp	r3, #0
 8018e74:	ee10 0a10 	vmov	r0, s0
 8018e78:	a3a9      	add	r3, pc, #676	; (adr r3, 8019120 <__ieee754_rem_pio2+0x2e0>)
 8018e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e7e:	4639      	mov	r1, r7
 8018e80:	dd36      	ble.n	8018ef0 <__ieee754_rem_pio2+0xb0>
 8018e82:	f7e7 fa01 	bl	8000288 <__aeabi_dsub>
 8018e86:	45a8      	cmp	r8, r5
 8018e88:	4606      	mov	r6, r0
 8018e8a:	460f      	mov	r7, r1
 8018e8c:	d018      	beq.n	8018ec0 <__ieee754_rem_pio2+0x80>
 8018e8e:	a3a6      	add	r3, pc, #664	; (adr r3, 8019128 <__ieee754_rem_pio2+0x2e8>)
 8018e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e94:	f7e7 f9f8 	bl	8000288 <__aeabi_dsub>
 8018e98:	4602      	mov	r2, r0
 8018e9a:	460b      	mov	r3, r1
 8018e9c:	e9c4 2300 	strd	r2, r3, [r4]
 8018ea0:	4630      	mov	r0, r6
 8018ea2:	4639      	mov	r1, r7
 8018ea4:	f7e7 f9f0 	bl	8000288 <__aeabi_dsub>
 8018ea8:	a39f      	add	r3, pc, #636	; (adr r3, 8019128 <__ieee754_rem_pio2+0x2e8>)
 8018eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018eae:	f7e7 f9eb 	bl	8000288 <__aeabi_dsub>
 8018eb2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8018eb6:	2501      	movs	r5, #1
 8018eb8:	4628      	mov	r0, r5
 8018eba:	b00d      	add	sp, #52	; 0x34
 8018ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ec0:	a39b      	add	r3, pc, #620	; (adr r3, 8019130 <__ieee754_rem_pio2+0x2f0>)
 8018ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ec6:	f7e7 f9df 	bl	8000288 <__aeabi_dsub>
 8018eca:	a39b      	add	r3, pc, #620	; (adr r3, 8019138 <__ieee754_rem_pio2+0x2f8>)
 8018ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ed0:	4606      	mov	r6, r0
 8018ed2:	460f      	mov	r7, r1
 8018ed4:	f7e7 f9d8 	bl	8000288 <__aeabi_dsub>
 8018ed8:	4602      	mov	r2, r0
 8018eda:	460b      	mov	r3, r1
 8018edc:	e9c4 2300 	strd	r2, r3, [r4]
 8018ee0:	4630      	mov	r0, r6
 8018ee2:	4639      	mov	r1, r7
 8018ee4:	f7e7 f9d0 	bl	8000288 <__aeabi_dsub>
 8018ee8:	a393      	add	r3, pc, #588	; (adr r3, 8019138 <__ieee754_rem_pio2+0x2f8>)
 8018eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018eee:	e7de      	b.n	8018eae <__ieee754_rem_pio2+0x6e>
 8018ef0:	f7e7 f9cc 	bl	800028c <__adddf3>
 8018ef4:	45a8      	cmp	r8, r5
 8018ef6:	4606      	mov	r6, r0
 8018ef8:	460f      	mov	r7, r1
 8018efa:	d016      	beq.n	8018f2a <__ieee754_rem_pio2+0xea>
 8018efc:	a38a      	add	r3, pc, #552	; (adr r3, 8019128 <__ieee754_rem_pio2+0x2e8>)
 8018efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f02:	f7e7 f9c3 	bl	800028c <__adddf3>
 8018f06:	4602      	mov	r2, r0
 8018f08:	460b      	mov	r3, r1
 8018f0a:	e9c4 2300 	strd	r2, r3, [r4]
 8018f0e:	4630      	mov	r0, r6
 8018f10:	4639      	mov	r1, r7
 8018f12:	f7e7 f9b9 	bl	8000288 <__aeabi_dsub>
 8018f16:	a384      	add	r3, pc, #528	; (adr r3, 8019128 <__ieee754_rem_pio2+0x2e8>)
 8018f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f1c:	f7e7 f9b6 	bl	800028c <__adddf3>
 8018f20:	f04f 35ff 	mov.w	r5, #4294967295
 8018f24:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8018f28:	e7c6      	b.n	8018eb8 <__ieee754_rem_pio2+0x78>
 8018f2a:	a381      	add	r3, pc, #516	; (adr r3, 8019130 <__ieee754_rem_pio2+0x2f0>)
 8018f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f30:	f7e7 f9ac 	bl	800028c <__adddf3>
 8018f34:	a380      	add	r3, pc, #512	; (adr r3, 8019138 <__ieee754_rem_pio2+0x2f8>)
 8018f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f3a:	4606      	mov	r6, r0
 8018f3c:	460f      	mov	r7, r1
 8018f3e:	f7e7 f9a5 	bl	800028c <__adddf3>
 8018f42:	4602      	mov	r2, r0
 8018f44:	460b      	mov	r3, r1
 8018f46:	e9c4 2300 	strd	r2, r3, [r4]
 8018f4a:	4630      	mov	r0, r6
 8018f4c:	4639      	mov	r1, r7
 8018f4e:	f7e7 f99b 	bl	8000288 <__aeabi_dsub>
 8018f52:	a379      	add	r3, pc, #484	; (adr r3, 8019138 <__ieee754_rem_pio2+0x2f8>)
 8018f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f58:	e7e0      	b.n	8018f1c <__ieee754_rem_pio2+0xdc>
 8018f5a:	4b82      	ldr	r3, [pc, #520]	; (8019164 <__ieee754_rem_pio2+0x324>)
 8018f5c:	4598      	cmp	r8, r3
 8018f5e:	f300 80d0 	bgt.w	8019102 <__ieee754_rem_pio2+0x2c2>
 8018f62:	f001 f875 	bl	801a050 <fabs>
 8018f66:	ec57 6b10 	vmov	r6, r7, d0
 8018f6a:	ee10 0a10 	vmov	r0, s0
 8018f6e:	a374      	add	r3, pc, #464	; (adr r3, 8019140 <__ieee754_rem_pio2+0x300>)
 8018f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f74:	4639      	mov	r1, r7
 8018f76:	f7e7 fb3f 	bl	80005f8 <__aeabi_dmul>
 8018f7a:	2200      	movs	r2, #0
 8018f7c:	4b7a      	ldr	r3, [pc, #488]	; (8019168 <__ieee754_rem_pio2+0x328>)
 8018f7e:	f7e7 f985 	bl	800028c <__adddf3>
 8018f82:	f7e7 fde9 	bl	8000b58 <__aeabi_d2iz>
 8018f86:	4605      	mov	r5, r0
 8018f88:	f7e7 facc 	bl	8000524 <__aeabi_i2d>
 8018f8c:	a364      	add	r3, pc, #400	; (adr r3, 8019120 <__ieee754_rem_pio2+0x2e0>)
 8018f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018f96:	f7e7 fb2f 	bl	80005f8 <__aeabi_dmul>
 8018f9a:	4602      	mov	r2, r0
 8018f9c:	460b      	mov	r3, r1
 8018f9e:	4630      	mov	r0, r6
 8018fa0:	4639      	mov	r1, r7
 8018fa2:	f7e7 f971 	bl	8000288 <__aeabi_dsub>
 8018fa6:	a360      	add	r3, pc, #384	; (adr r3, 8019128 <__ieee754_rem_pio2+0x2e8>)
 8018fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018fac:	4682      	mov	sl, r0
 8018fae:	468b      	mov	fp, r1
 8018fb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018fb4:	f7e7 fb20 	bl	80005f8 <__aeabi_dmul>
 8018fb8:	2d1f      	cmp	r5, #31
 8018fba:	4606      	mov	r6, r0
 8018fbc:	460f      	mov	r7, r1
 8018fbe:	dc0c      	bgt.n	8018fda <__ieee754_rem_pio2+0x19a>
 8018fc0:	1e6a      	subs	r2, r5, #1
 8018fc2:	4b6a      	ldr	r3, [pc, #424]	; (801916c <__ieee754_rem_pio2+0x32c>)
 8018fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018fc8:	4543      	cmp	r3, r8
 8018fca:	d006      	beq.n	8018fda <__ieee754_rem_pio2+0x19a>
 8018fcc:	4632      	mov	r2, r6
 8018fce:	463b      	mov	r3, r7
 8018fd0:	4650      	mov	r0, sl
 8018fd2:	4659      	mov	r1, fp
 8018fd4:	f7e7 f958 	bl	8000288 <__aeabi_dsub>
 8018fd8:	e00e      	b.n	8018ff8 <__ieee754_rem_pio2+0x1b8>
 8018fda:	4632      	mov	r2, r6
 8018fdc:	463b      	mov	r3, r7
 8018fde:	4650      	mov	r0, sl
 8018fe0:	4659      	mov	r1, fp
 8018fe2:	f7e7 f951 	bl	8000288 <__aeabi_dsub>
 8018fe6:	ea4f 5328 	mov.w	r3, r8, asr #20
 8018fea:	9305      	str	r3, [sp, #20]
 8018fec:	9a05      	ldr	r2, [sp, #20]
 8018fee:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8018ff2:	1ad3      	subs	r3, r2, r3
 8018ff4:	2b10      	cmp	r3, #16
 8018ff6:	dc02      	bgt.n	8018ffe <__ieee754_rem_pio2+0x1be>
 8018ff8:	e9c4 0100 	strd	r0, r1, [r4]
 8018ffc:	e039      	b.n	8019072 <__ieee754_rem_pio2+0x232>
 8018ffe:	a34c      	add	r3, pc, #304	; (adr r3, 8019130 <__ieee754_rem_pio2+0x2f0>)
 8019000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019004:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019008:	f7e7 faf6 	bl	80005f8 <__aeabi_dmul>
 801900c:	4606      	mov	r6, r0
 801900e:	460f      	mov	r7, r1
 8019010:	4602      	mov	r2, r0
 8019012:	460b      	mov	r3, r1
 8019014:	4650      	mov	r0, sl
 8019016:	4659      	mov	r1, fp
 8019018:	f7e7 f936 	bl	8000288 <__aeabi_dsub>
 801901c:	4602      	mov	r2, r0
 801901e:	460b      	mov	r3, r1
 8019020:	4680      	mov	r8, r0
 8019022:	4689      	mov	r9, r1
 8019024:	4650      	mov	r0, sl
 8019026:	4659      	mov	r1, fp
 8019028:	f7e7 f92e 	bl	8000288 <__aeabi_dsub>
 801902c:	4632      	mov	r2, r6
 801902e:	463b      	mov	r3, r7
 8019030:	f7e7 f92a 	bl	8000288 <__aeabi_dsub>
 8019034:	a340      	add	r3, pc, #256	; (adr r3, 8019138 <__ieee754_rem_pio2+0x2f8>)
 8019036:	e9d3 2300 	ldrd	r2, r3, [r3]
 801903a:	4606      	mov	r6, r0
 801903c:	460f      	mov	r7, r1
 801903e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019042:	f7e7 fad9 	bl	80005f8 <__aeabi_dmul>
 8019046:	4632      	mov	r2, r6
 8019048:	463b      	mov	r3, r7
 801904a:	f7e7 f91d 	bl	8000288 <__aeabi_dsub>
 801904e:	4602      	mov	r2, r0
 8019050:	460b      	mov	r3, r1
 8019052:	4606      	mov	r6, r0
 8019054:	460f      	mov	r7, r1
 8019056:	4640      	mov	r0, r8
 8019058:	4649      	mov	r1, r9
 801905a:	f7e7 f915 	bl	8000288 <__aeabi_dsub>
 801905e:	9a05      	ldr	r2, [sp, #20]
 8019060:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8019064:	1ad3      	subs	r3, r2, r3
 8019066:	2b31      	cmp	r3, #49	; 0x31
 8019068:	dc20      	bgt.n	80190ac <__ieee754_rem_pio2+0x26c>
 801906a:	e9c4 0100 	strd	r0, r1, [r4]
 801906e:	46c2      	mov	sl, r8
 8019070:	46cb      	mov	fp, r9
 8019072:	e9d4 8900 	ldrd	r8, r9, [r4]
 8019076:	4650      	mov	r0, sl
 8019078:	4642      	mov	r2, r8
 801907a:	464b      	mov	r3, r9
 801907c:	4659      	mov	r1, fp
 801907e:	f7e7 f903 	bl	8000288 <__aeabi_dsub>
 8019082:	463b      	mov	r3, r7
 8019084:	4632      	mov	r2, r6
 8019086:	f7e7 f8ff 	bl	8000288 <__aeabi_dsub>
 801908a:	9b04      	ldr	r3, [sp, #16]
 801908c:	2b00      	cmp	r3, #0
 801908e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8019092:	f6bf af11 	bge.w	8018eb8 <__ieee754_rem_pio2+0x78>
 8019096:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801909a:	6063      	str	r3, [r4, #4]
 801909c:	f8c4 8000 	str.w	r8, [r4]
 80190a0:	60a0      	str	r0, [r4, #8]
 80190a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80190a6:	60e3      	str	r3, [r4, #12]
 80190a8:	426d      	negs	r5, r5
 80190aa:	e705      	b.n	8018eb8 <__ieee754_rem_pio2+0x78>
 80190ac:	a326      	add	r3, pc, #152	; (adr r3, 8019148 <__ieee754_rem_pio2+0x308>)
 80190ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80190b6:	f7e7 fa9f 	bl	80005f8 <__aeabi_dmul>
 80190ba:	4606      	mov	r6, r0
 80190bc:	460f      	mov	r7, r1
 80190be:	4602      	mov	r2, r0
 80190c0:	460b      	mov	r3, r1
 80190c2:	4640      	mov	r0, r8
 80190c4:	4649      	mov	r1, r9
 80190c6:	f7e7 f8df 	bl	8000288 <__aeabi_dsub>
 80190ca:	4602      	mov	r2, r0
 80190cc:	460b      	mov	r3, r1
 80190ce:	4682      	mov	sl, r0
 80190d0:	468b      	mov	fp, r1
 80190d2:	4640      	mov	r0, r8
 80190d4:	4649      	mov	r1, r9
 80190d6:	f7e7 f8d7 	bl	8000288 <__aeabi_dsub>
 80190da:	4632      	mov	r2, r6
 80190dc:	463b      	mov	r3, r7
 80190de:	f7e7 f8d3 	bl	8000288 <__aeabi_dsub>
 80190e2:	a31b      	add	r3, pc, #108	; (adr r3, 8019150 <__ieee754_rem_pio2+0x310>)
 80190e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190e8:	4606      	mov	r6, r0
 80190ea:	460f      	mov	r7, r1
 80190ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80190f0:	f7e7 fa82 	bl	80005f8 <__aeabi_dmul>
 80190f4:	4632      	mov	r2, r6
 80190f6:	463b      	mov	r3, r7
 80190f8:	f7e7 f8c6 	bl	8000288 <__aeabi_dsub>
 80190fc:	4606      	mov	r6, r0
 80190fe:	460f      	mov	r7, r1
 8019100:	e764      	b.n	8018fcc <__ieee754_rem_pio2+0x18c>
 8019102:	4b1b      	ldr	r3, [pc, #108]	; (8019170 <__ieee754_rem_pio2+0x330>)
 8019104:	4598      	cmp	r8, r3
 8019106:	dd35      	ble.n	8019174 <__ieee754_rem_pio2+0x334>
 8019108:	ee10 2a10 	vmov	r2, s0
 801910c:	463b      	mov	r3, r7
 801910e:	4630      	mov	r0, r6
 8019110:	4639      	mov	r1, r7
 8019112:	f7e7 f8b9 	bl	8000288 <__aeabi_dsub>
 8019116:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801911a:	e9c4 0100 	strd	r0, r1, [r4]
 801911e:	e6a1      	b.n	8018e64 <__ieee754_rem_pio2+0x24>
 8019120:	54400000 	.word	0x54400000
 8019124:	3ff921fb 	.word	0x3ff921fb
 8019128:	1a626331 	.word	0x1a626331
 801912c:	3dd0b461 	.word	0x3dd0b461
 8019130:	1a600000 	.word	0x1a600000
 8019134:	3dd0b461 	.word	0x3dd0b461
 8019138:	2e037073 	.word	0x2e037073
 801913c:	3ba3198a 	.word	0x3ba3198a
 8019140:	6dc9c883 	.word	0x6dc9c883
 8019144:	3fe45f30 	.word	0x3fe45f30
 8019148:	2e000000 	.word	0x2e000000
 801914c:	3ba3198a 	.word	0x3ba3198a
 8019150:	252049c1 	.word	0x252049c1
 8019154:	397b839a 	.word	0x397b839a
 8019158:	3fe921fb 	.word	0x3fe921fb
 801915c:	4002d97b 	.word	0x4002d97b
 8019160:	3ff921fb 	.word	0x3ff921fb
 8019164:	413921fb 	.word	0x413921fb
 8019168:	3fe00000 	.word	0x3fe00000
 801916c:	0801a834 	.word	0x0801a834
 8019170:	7fefffff 	.word	0x7fefffff
 8019174:	ea4f 5528 	mov.w	r5, r8, asr #20
 8019178:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 801917c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8019180:	4630      	mov	r0, r6
 8019182:	460f      	mov	r7, r1
 8019184:	f7e7 fce8 	bl	8000b58 <__aeabi_d2iz>
 8019188:	f7e7 f9cc 	bl	8000524 <__aeabi_i2d>
 801918c:	4602      	mov	r2, r0
 801918e:	460b      	mov	r3, r1
 8019190:	4630      	mov	r0, r6
 8019192:	4639      	mov	r1, r7
 8019194:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8019198:	f7e7 f876 	bl	8000288 <__aeabi_dsub>
 801919c:	2200      	movs	r2, #0
 801919e:	4b1f      	ldr	r3, [pc, #124]	; (801921c <__ieee754_rem_pio2+0x3dc>)
 80191a0:	f7e7 fa2a 	bl	80005f8 <__aeabi_dmul>
 80191a4:	460f      	mov	r7, r1
 80191a6:	4606      	mov	r6, r0
 80191a8:	f7e7 fcd6 	bl	8000b58 <__aeabi_d2iz>
 80191ac:	f7e7 f9ba 	bl	8000524 <__aeabi_i2d>
 80191b0:	4602      	mov	r2, r0
 80191b2:	460b      	mov	r3, r1
 80191b4:	4630      	mov	r0, r6
 80191b6:	4639      	mov	r1, r7
 80191b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80191bc:	f7e7 f864 	bl	8000288 <__aeabi_dsub>
 80191c0:	2200      	movs	r2, #0
 80191c2:	4b16      	ldr	r3, [pc, #88]	; (801921c <__ieee754_rem_pio2+0x3dc>)
 80191c4:	f7e7 fa18 	bl	80005f8 <__aeabi_dmul>
 80191c8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80191cc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80191d0:	f04f 0803 	mov.w	r8, #3
 80191d4:	2600      	movs	r6, #0
 80191d6:	2700      	movs	r7, #0
 80191d8:	4632      	mov	r2, r6
 80191da:	463b      	mov	r3, r7
 80191dc:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80191e0:	f108 3aff 	add.w	sl, r8, #4294967295
 80191e4:	f7e7 fc70 	bl	8000ac8 <__aeabi_dcmpeq>
 80191e8:	b9b0      	cbnz	r0, 8019218 <__ieee754_rem_pio2+0x3d8>
 80191ea:	4b0d      	ldr	r3, [pc, #52]	; (8019220 <__ieee754_rem_pio2+0x3e0>)
 80191ec:	9301      	str	r3, [sp, #4]
 80191ee:	2302      	movs	r3, #2
 80191f0:	9300      	str	r3, [sp, #0]
 80191f2:	462a      	mov	r2, r5
 80191f4:	4643      	mov	r3, r8
 80191f6:	4621      	mov	r1, r4
 80191f8:	a806      	add	r0, sp, #24
 80191fa:	f000 f98d 	bl	8019518 <__kernel_rem_pio2>
 80191fe:	9b04      	ldr	r3, [sp, #16]
 8019200:	2b00      	cmp	r3, #0
 8019202:	4605      	mov	r5, r0
 8019204:	f6bf ae58 	bge.w	8018eb8 <__ieee754_rem_pio2+0x78>
 8019208:	6863      	ldr	r3, [r4, #4]
 801920a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801920e:	6063      	str	r3, [r4, #4]
 8019210:	68e3      	ldr	r3, [r4, #12]
 8019212:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8019216:	e746      	b.n	80190a6 <__ieee754_rem_pio2+0x266>
 8019218:	46d0      	mov	r8, sl
 801921a:	e7dd      	b.n	80191d8 <__ieee754_rem_pio2+0x398>
 801921c:	41700000 	.word	0x41700000
 8019220:	0801a8b4 	.word	0x0801a8b4

08019224 <__ieee754_sqrt>:
 8019224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019228:	4955      	ldr	r1, [pc, #340]	; (8019380 <__ieee754_sqrt+0x15c>)
 801922a:	ec55 4b10 	vmov	r4, r5, d0
 801922e:	43a9      	bics	r1, r5
 8019230:	462b      	mov	r3, r5
 8019232:	462a      	mov	r2, r5
 8019234:	d112      	bne.n	801925c <__ieee754_sqrt+0x38>
 8019236:	ee10 2a10 	vmov	r2, s0
 801923a:	ee10 0a10 	vmov	r0, s0
 801923e:	4629      	mov	r1, r5
 8019240:	f7e7 f9da 	bl	80005f8 <__aeabi_dmul>
 8019244:	4602      	mov	r2, r0
 8019246:	460b      	mov	r3, r1
 8019248:	4620      	mov	r0, r4
 801924a:	4629      	mov	r1, r5
 801924c:	f7e7 f81e 	bl	800028c <__adddf3>
 8019250:	4604      	mov	r4, r0
 8019252:	460d      	mov	r5, r1
 8019254:	ec45 4b10 	vmov	d0, r4, r5
 8019258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801925c:	2d00      	cmp	r5, #0
 801925e:	ee10 0a10 	vmov	r0, s0
 8019262:	4621      	mov	r1, r4
 8019264:	dc0f      	bgt.n	8019286 <__ieee754_sqrt+0x62>
 8019266:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801926a:	4330      	orrs	r0, r6
 801926c:	d0f2      	beq.n	8019254 <__ieee754_sqrt+0x30>
 801926e:	b155      	cbz	r5, 8019286 <__ieee754_sqrt+0x62>
 8019270:	ee10 2a10 	vmov	r2, s0
 8019274:	4620      	mov	r0, r4
 8019276:	4629      	mov	r1, r5
 8019278:	f7e7 f806 	bl	8000288 <__aeabi_dsub>
 801927c:	4602      	mov	r2, r0
 801927e:	460b      	mov	r3, r1
 8019280:	f7e7 fae4 	bl	800084c <__aeabi_ddiv>
 8019284:	e7e4      	b.n	8019250 <__ieee754_sqrt+0x2c>
 8019286:	151b      	asrs	r3, r3, #20
 8019288:	d073      	beq.n	8019372 <__ieee754_sqrt+0x14e>
 801928a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801928e:	07dd      	lsls	r5, r3, #31
 8019290:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8019294:	bf48      	it	mi
 8019296:	0fc8      	lsrmi	r0, r1, #31
 8019298:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801929c:	bf44      	itt	mi
 801929e:	0049      	lslmi	r1, r1, #1
 80192a0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80192a4:	2500      	movs	r5, #0
 80192a6:	1058      	asrs	r0, r3, #1
 80192a8:	0fcb      	lsrs	r3, r1, #31
 80192aa:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80192ae:	0049      	lsls	r1, r1, #1
 80192b0:	2316      	movs	r3, #22
 80192b2:	462c      	mov	r4, r5
 80192b4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80192b8:	19a7      	adds	r7, r4, r6
 80192ba:	4297      	cmp	r7, r2
 80192bc:	bfde      	ittt	le
 80192be:	19bc      	addle	r4, r7, r6
 80192c0:	1bd2      	suble	r2, r2, r7
 80192c2:	19ad      	addle	r5, r5, r6
 80192c4:	0fcf      	lsrs	r7, r1, #31
 80192c6:	3b01      	subs	r3, #1
 80192c8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80192cc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80192d0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80192d4:	d1f0      	bne.n	80192b8 <__ieee754_sqrt+0x94>
 80192d6:	f04f 0c20 	mov.w	ip, #32
 80192da:	469e      	mov	lr, r3
 80192dc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80192e0:	42a2      	cmp	r2, r4
 80192e2:	eb06 070e 	add.w	r7, r6, lr
 80192e6:	dc02      	bgt.n	80192ee <__ieee754_sqrt+0xca>
 80192e8:	d112      	bne.n	8019310 <__ieee754_sqrt+0xec>
 80192ea:	428f      	cmp	r7, r1
 80192ec:	d810      	bhi.n	8019310 <__ieee754_sqrt+0xec>
 80192ee:	2f00      	cmp	r7, #0
 80192f0:	eb07 0e06 	add.w	lr, r7, r6
 80192f4:	da42      	bge.n	801937c <__ieee754_sqrt+0x158>
 80192f6:	f1be 0f00 	cmp.w	lr, #0
 80192fa:	db3f      	blt.n	801937c <__ieee754_sqrt+0x158>
 80192fc:	f104 0801 	add.w	r8, r4, #1
 8019300:	1b12      	subs	r2, r2, r4
 8019302:	428f      	cmp	r7, r1
 8019304:	bf88      	it	hi
 8019306:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801930a:	1bc9      	subs	r1, r1, r7
 801930c:	4433      	add	r3, r6
 801930e:	4644      	mov	r4, r8
 8019310:	0052      	lsls	r2, r2, #1
 8019312:	f1bc 0c01 	subs.w	ip, ip, #1
 8019316:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801931a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801931e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8019322:	d1dd      	bne.n	80192e0 <__ieee754_sqrt+0xbc>
 8019324:	430a      	orrs	r2, r1
 8019326:	d006      	beq.n	8019336 <__ieee754_sqrt+0x112>
 8019328:	1c5c      	adds	r4, r3, #1
 801932a:	bf13      	iteet	ne
 801932c:	3301      	addne	r3, #1
 801932e:	3501      	addeq	r5, #1
 8019330:	4663      	moveq	r3, ip
 8019332:	f023 0301 	bicne.w	r3, r3, #1
 8019336:	106a      	asrs	r2, r5, #1
 8019338:	085b      	lsrs	r3, r3, #1
 801933a:	07e9      	lsls	r1, r5, #31
 801933c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8019340:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8019344:	bf48      	it	mi
 8019346:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801934a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801934e:	461c      	mov	r4, r3
 8019350:	e780      	b.n	8019254 <__ieee754_sqrt+0x30>
 8019352:	0aca      	lsrs	r2, r1, #11
 8019354:	3815      	subs	r0, #21
 8019356:	0549      	lsls	r1, r1, #21
 8019358:	2a00      	cmp	r2, #0
 801935a:	d0fa      	beq.n	8019352 <__ieee754_sqrt+0x12e>
 801935c:	02d6      	lsls	r6, r2, #11
 801935e:	d50a      	bpl.n	8019376 <__ieee754_sqrt+0x152>
 8019360:	f1c3 0420 	rsb	r4, r3, #32
 8019364:	fa21 f404 	lsr.w	r4, r1, r4
 8019368:	1e5d      	subs	r5, r3, #1
 801936a:	4099      	lsls	r1, r3
 801936c:	4322      	orrs	r2, r4
 801936e:	1b43      	subs	r3, r0, r5
 8019370:	e78b      	b.n	801928a <__ieee754_sqrt+0x66>
 8019372:	4618      	mov	r0, r3
 8019374:	e7f0      	b.n	8019358 <__ieee754_sqrt+0x134>
 8019376:	0052      	lsls	r2, r2, #1
 8019378:	3301      	adds	r3, #1
 801937a:	e7ef      	b.n	801935c <__ieee754_sqrt+0x138>
 801937c:	46a0      	mov	r8, r4
 801937e:	e7bf      	b.n	8019300 <__ieee754_sqrt+0xdc>
 8019380:	7ff00000 	.word	0x7ff00000
 8019384:	00000000 	.word	0x00000000

08019388 <__kernel_cos>:
 8019388:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801938c:	ec59 8b10 	vmov	r8, r9, d0
 8019390:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8019394:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8019398:	ed2d 8b02 	vpush	{d8}
 801939c:	eeb0 8a41 	vmov.f32	s16, s2
 80193a0:	eef0 8a61 	vmov.f32	s17, s3
 80193a4:	da07      	bge.n	80193b6 <__kernel_cos+0x2e>
 80193a6:	ee10 0a10 	vmov	r0, s0
 80193aa:	4649      	mov	r1, r9
 80193ac:	f7e7 fbd4 	bl	8000b58 <__aeabi_d2iz>
 80193b0:	2800      	cmp	r0, #0
 80193b2:	f000 8089 	beq.w	80194c8 <__kernel_cos+0x140>
 80193b6:	4642      	mov	r2, r8
 80193b8:	464b      	mov	r3, r9
 80193ba:	4640      	mov	r0, r8
 80193bc:	4649      	mov	r1, r9
 80193be:	f7e7 f91b 	bl	80005f8 <__aeabi_dmul>
 80193c2:	2200      	movs	r2, #0
 80193c4:	4b4e      	ldr	r3, [pc, #312]	; (8019500 <__kernel_cos+0x178>)
 80193c6:	4604      	mov	r4, r0
 80193c8:	460d      	mov	r5, r1
 80193ca:	f7e7 f915 	bl	80005f8 <__aeabi_dmul>
 80193ce:	a340      	add	r3, pc, #256	; (adr r3, 80194d0 <__kernel_cos+0x148>)
 80193d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193d4:	4682      	mov	sl, r0
 80193d6:	468b      	mov	fp, r1
 80193d8:	4620      	mov	r0, r4
 80193da:	4629      	mov	r1, r5
 80193dc:	f7e7 f90c 	bl	80005f8 <__aeabi_dmul>
 80193e0:	a33d      	add	r3, pc, #244	; (adr r3, 80194d8 <__kernel_cos+0x150>)
 80193e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193e6:	f7e6 ff51 	bl	800028c <__adddf3>
 80193ea:	4622      	mov	r2, r4
 80193ec:	462b      	mov	r3, r5
 80193ee:	f7e7 f903 	bl	80005f8 <__aeabi_dmul>
 80193f2:	a33b      	add	r3, pc, #236	; (adr r3, 80194e0 <__kernel_cos+0x158>)
 80193f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193f8:	f7e6 ff46 	bl	8000288 <__aeabi_dsub>
 80193fc:	4622      	mov	r2, r4
 80193fe:	462b      	mov	r3, r5
 8019400:	f7e7 f8fa 	bl	80005f8 <__aeabi_dmul>
 8019404:	a338      	add	r3, pc, #224	; (adr r3, 80194e8 <__kernel_cos+0x160>)
 8019406:	e9d3 2300 	ldrd	r2, r3, [r3]
 801940a:	f7e6 ff3f 	bl	800028c <__adddf3>
 801940e:	4622      	mov	r2, r4
 8019410:	462b      	mov	r3, r5
 8019412:	f7e7 f8f1 	bl	80005f8 <__aeabi_dmul>
 8019416:	a336      	add	r3, pc, #216	; (adr r3, 80194f0 <__kernel_cos+0x168>)
 8019418:	e9d3 2300 	ldrd	r2, r3, [r3]
 801941c:	f7e6 ff34 	bl	8000288 <__aeabi_dsub>
 8019420:	4622      	mov	r2, r4
 8019422:	462b      	mov	r3, r5
 8019424:	f7e7 f8e8 	bl	80005f8 <__aeabi_dmul>
 8019428:	a333      	add	r3, pc, #204	; (adr r3, 80194f8 <__kernel_cos+0x170>)
 801942a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801942e:	f7e6 ff2d 	bl	800028c <__adddf3>
 8019432:	4622      	mov	r2, r4
 8019434:	462b      	mov	r3, r5
 8019436:	f7e7 f8df 	bl	80005f8 <__aeabi_dmul>
 801943a:	4622      	mov	r2, r4
 801943c:	462b      	mov	r3, r5
 801943e:	f7e7 f8db 	bl	80005f8 <__aeabi_dmul>
 8019442:	ec53 2b18 	vmov	r2, r3, d8
 8019446:	4604      	mov	r4, r0
 8019448:	460d      	mov	r5, r1
 801944a:	4640      	mov	r0, r8
 801944c:	4649      	mov	r1, r9
 801944e:	f7e7 f8d3 	bl	80005f8 <__aeabi_dmul>
 8019452:	460b      	mov	r3, r1
 8019454:	4602      	mov	r2, r0
 8019456:	4629      	mov	r1, r5
 8019458:	4620      	mov	r0, r4
 801945a:	f7e6 ff15 	bl	8000288 <__aeabi_dsub>
 801945e:	4b29      	ldr	r3, [pc, #164]	; (8019504 <__kernel_cos+0x17c>)
 8019460:	429e      	cmp	r6, r3
 8019462:	4680      	mov	r8, r0
 8019464:	4689      	mov	r9, r1
 8019466:	dc11      	bgt.n	801948c <__kernel_cos+0x104>
 8019468:	4602      	mov	r2, r0
 801946a:	460b      	mov	r3, r1
 801946c:	4650      	mov	r0, sl
 801946e:	4659      	mov	r1, fp
 8019470:	f7e6 ff0a 	bl	8000288 <__aeabi_dsub>
 8019474:	460b      	mov	r3, r1
 8019476:	4924      	ldr	r1, [pc, #144]	; (8019508 <__kernel_cos+0x180>)
 8019478:	4602      	mov	r2, r0
 801947a:	2000      	movs	r0, #0
 801947c:	f7e6 ff04 	bl	8000288 <__aeabi_dsub>
 8019480:	ecbd 8b02 	vpop	{d8}
 8019484:	ec41 0b10 	vmov	d0, r0, r1
 8019488:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801948c:	4b1f      	ldr	r3, [pc, #124]	; (801950c <__kernel_cos+0x184>)
 801948e:	491e      	ldr	r1, [pc, #120]	; (8019508 <__kernel_cos+0x180>)
 8019490:	429e      	cmp	r6, r3
 8019492:	bfcc      	ite	gt
 8019494:	4d1e      	ldrgt	r5, [pc, #120]	; (8019510 <__kernel_cos+0x188>)
 8019496:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 801949a:	2400      	movs	r4, #0
 801949c:	4622      	mov	r2, r4
 801949e:	462b      	mov	r3, r5
 80194a0:	2000      	movs	r0, #0
 80194a2:	f7e6 fef1 	bl	8000288 <__aeabi_dsub>
 80194a6:	4622      	mov	r2, r4
 80194a8:	4606      	mov	r6, r0
 80194aa:	460f      	mov	r7, r1
 80194ac:	462b      	mov	r3, r5
 80194ae:	4650      	mov	r0, sl
 80194b0:	4659      	mov	r1, fp
 80194b2:	f7e6 fee9 	bl	8000288 <__aeabi_dsub>
 80194b6:	4642      	mov	r2, r8
 80194b8:	464b      	mov	r3, r9
 80194ba:	f7e6 fee5 	bl	8000288 <__aeabi_dsub>
 80194be:	4602      	mov	r2, r0
 80194c0:	460b      	mov	r3, r1
 80194c2:	4630      	mov	r0, r6
 80194c4:	4639      	mov	r1, r7
 80194c6:	e7d9      	b.n	801947c <__kernel_cos+0xf4>
 80194c8:	2000      	movs	r0, #0
 80194ca:	490f      	ldr	r1, [pc, #60]	; (8019508 <__kernel_cos+0x180>)
 80194cc:	e7d8      	b.n	8019480 <__kernel_cos+0xf8>
 80194ce:	bf00      	nop
 80194d0:	be8838d4 	.word	0xbe8838d4
 80194d4:	bda8fae9 	.word	0xbda8fae9
 80194d8:	bdb4b1c4 	.word	0xbdb4b1c4
 80194dc:	3e21ee9e 	.word	0x3e21ee9e
 80194e0:	809c52ad 	.word	0x809c52ad
 80194e4:	3e927e4f 	.word	0x3e927e4f
 80194e8:	19cb1590 	.word	0x19cb1590
 80194ec:	3efa01a0 	.word	0x3efa01a0
 80194f0:	16c15177 	.word	0x16c15177
 80194f4:	3f56c16c 	.word	0x3f56c16c
 80194f8:	5555554c 	.word	0x5555554c
 80194fc:	3fa55555 	.word	0x3fa55555
 8019500:	3fe00000 	.word	0x3fe00000
 8019504:	3fd33332 	.word	0x3fd33332
 8019508:	3ff00000 	.word	0x3ff00000
 801950c:	3fe90000 	.word	0x3fe90000
 8019510:	3fd20000 	.word	0x3fd20000
 8019514:	00000000 	.word	0x00000000

08019518 <__kernel_rem_pio2>:
 8019518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801951c:	ed2d 8b02 	vpush	{d8}
 8019520:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8019524:	1ed4      	subs	r4, r2, #3
 8019526:	9308      	str	r3, [sp, #32]
 8019528:	9101      	str	r1, [sp, #4]
 801952a:	4bc5      	ldr	r3, [pc, #788]	; (8019840 <__kernel_rem_pio2+0x328>)
 801952c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 801952e:	9009      	str	r0, [sp, #36]	; 0x24
 8019530:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8019534:	9304      	str	r3, [sp, #16]
 8019536:	9b08      	ldr	r3, [sp, #32]
 8019538:	3b01      	subs	r3, #1
 801953a:	9307      	str	r3, [sp, #28]
 801953c:	2318      	movs	r3, #24
 801953e:	fb94 f4f3 	sdiv	r4, r4, r3
 8019542:	f06f 0317 	mvn.w	r3, #23
 8019546:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801954a:	fb04 3303 	mla	r3, r4, r3, r3
 801954e:	eb03 0a02 	add.w	sl, r3, r2
 8019552:	9b04      	ldr	r3, [sp, #16]
 8019554:	9a07      	ldr	r2, [sp, #28]
 8019556:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8019830 <__kernel_rem_pio2+0x318>
 801955a:	eb03 0802 	add.w	r8, r3, r2
 801955e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8019560:	1aa7      	subs	r7, r4, r2
 8019562:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8019566:	ae22      	add	r6, sp, #136	; 0x88
 8019568:	2500      	movs	r5, #0
 801956a:	4545      	cmp	r5, r8
 801956c:	dd13      	ble.n	8019596 <__kernel_rem_pio2+0x7e>
 801956e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8019830 <__kernel_rem_pio2+0x318>
 8019572:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8019576:	2600      	movs	r6, #0
 8019578:	9b04      	ldr	r3, [sp, #16]
 801957a:	429e      	cmp	r6, r3
 801957c:	dc32      	bgt.n	80195e4 <__kernel_rem_pio2+0xcc>
 801957e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019580:	9302      	str	r3, [sp, #8]
 8019582:	9b08      	ldr	r3, [sp, #32]
 8019584:	199d      	adds	r5, r3, r6
 8019586:	ab22      	add	r3, sp, #136	; 0x88
 8019588:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801958c:	9306      	str	r3, [sp, #24]
 801958e:	ec59 8b18 	vmov	r8, r9, d8
 8019592:	2700      	movs	r7, #0
 8019594:	e01f      	b.n	80195d6 <__kernel_rem_pio2+0xbe>
 8019596:	42ef      	cmn	r7, r5
 8019598:	d407      	bmi.n	80195aa <__kernel_rem_pio2+0x92>
 801959a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801959e:	f7e6 ffc1 	bl	8000524 <__aeabi_i2d>
 80195a2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80195a6:	3501      	adds	r5, #1
 80195a8:	e7df      	b.n	801956a <__kernel_rem_pio2+0x52>
 80195aa:	ec51 0b18 	vmov	r0, r1, d8
 80195ae:	e7f8      	b.n	80195a2 <__kernel_rem_pio2+0x8a>
 80195b0:	9906      	ldr	r1, [sp, #24]
 80195b2:	9d02      	ldr	r5, [sp, #8]
 80195b4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80195b8:	9106      	str	r1, [sp, #24]
 80195ba:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80195be:	9502      	str	r5, [sp, #8]
 80195c0:	f7e7 f81a 	bl	80005f8 <__aeabi_dmul>
 80195c4:	4602      	mov	r2, r0
 80195c6:	460b      	mov	r3, r1
 80195c8:	4640      	mov	r0, r8
 80195ca:	4649      	mov	r1, r9
 80195cc:	f7e6 fe5e 	bl	800028c <__adddf3>
 80195d0:	3701      	adds	r7, #1
 80195d2:	4680      	mov	r8, r0
 80195d4:	4689      	mov	r9, r1
 80195d6:	9b07      	ldr	r3, [sp, #28]
 80195d8:	429f      	cmp	r7, r3
 80195da:	dde9      	ble.n	80195b0 <__kernel_rem_pio2+0x98>
 80195dc:	e8eb 8902 	strd	r8, r9, [fp], #8
 80195e0:	3601      	adds	r6, #1
 80195e2:	e7c9      	b.n	8019578 <__kernel_rem_pio2+0x60>
 80195e4:	9b04      	ldr	r3, [sp, #16]
 80195e6:	aa0e      	add	r2, sp, #56	; 0x38
 80195e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80195ec:	930c      	str	r3, [sp, #48]	; 0x30
 80195ee:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80195f0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80195f4:	9c04      	ldr	r4, [sp, #16]
 80195f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80195f8:	ab9a      	add	r3, sp, #616	; 0x268
 80195fa:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 80195fe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8019602:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019606:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 801960a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801960e:	ab9a      	add	r3, sp, #616	; 0x268
 8019610:	445b      	add	r3, fp
 8019612:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8019616:	2500      	movs	r5, #0
 8019618:	1b63      	subs	r3, r4, r5
 801961a:	2b00      	cmp	r3, #0
 801961c:	dc78      	bgt.n	8019710 <__kernel_rem_pio2+0x1f8>
 801961e:	4650      	mov	r0, sl
 8019620:	ec49 8b10 	vmov	d0, r8, r9
 8019624:	f000 fda8 	bl	801a178 <scalbn>
 8019628:	ec57 6b10 	vmov	r6, r7, d0
 801962c:	2200      	movs	r2, #0
 801962e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8019632:	ee10 0a10 	vmov	r0, s0
 8019636:	4639      	mov	r1, r7
 8019638:	f7e6 ffde 	bl	80005f8 <__aeabi_dmul>
 801963c:	ec41 0b10 	vmov	d0, r0, r1
 8019640:	f000 fd12 	bl	801a068 <floor>
 8019644:	2200      	movs	r2, #0
 8019646:	ec51 0b10 	vmov	r0, r1, d0
 801964a:	4b7e      	ldr	r3, [pc, #504]	; (8019844 <__kernel_rem_pio2+0x32c>)
 801964c:	f7e6 ffd4 	bl	80005f8 <__aeabi_dmul>
 8019650:	4602      	mov	r2, r0
 8019652:	460b      	mov	r3, r1
 8019654:	4630      	mov	r0, r6
 8019656:	4639      	mov	r1, r7
 8019658:	f7e6 fe16 	bl	8000288 <__aeabi_dsub>
 801965c:	460f      	mov	r7, r1
 801965e:	4606      	mov	r6, r0
 8019660:	f7e7 fa7a 	bl	8000b58 <__aeabi_d2iz>
 8019664:	9006      	str	r0, [sp, #24]
 8019666:	f7e6 ff5d 	bl	8000524 <__aeabi_i2d>
 801966a:	4602      	mov	r2, r0
 801966c:	460b      	mov	r3, r1
 801966e:	4630      	mov	r0, r6
 8019670:	4639      	mov	r1, r7
 8019672:	f7e6 fe09 	bl	8000288 <__aeabi_dsub>
 8019676:	f1ba 0f00 	cmp.w	sl, #0
 801967a:	4606      	mov	r6, r0
 801967c:	460f      	mov	r7, r1
 801967e:	dd6c      	ble.n	801975a <__kernel_rem_pio2+0x242>
 8019680:	1e62      	subs	r2, r4, #1
 8019682:	ab0e      	add	r3, sp, #56	; 0x38
 8019684:	f1ca 0118 	rsb	r1, sl, #24
 8019688:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801968c:	9d06      	ldr	r5, [sp, #24]
 801968e:	fa40 f301 	asr.w	r3, r0, r1
 8019692:	441d      	add	r5, r3
 8019694:	408b      	lsls	r3, r1
 8019696:	1ac0      	subs	r0, r0, r3
 8019698:	ab0e      	add	r3, sp, #56	; 0x38
 801969a:	9506      	str	r5, [sp, #24]
 801969c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80196a0:	f1ca 0317 	rsb	r3, sl, #23
 80196a4:	fa40 f303 	asr.w	r3, r0, r3
 80196a8:	9302      	str	r3, [sp, #8]
 80196aa:	9b02      	ldr	r3, [sp, #8]
 80196ac:	2b00      	cmp	r3, #0
 80196ae:	dd62      	ble.n	8019776 <__kernel_rem_pio2+0x25e>
 80196b0:	9b06      	ldr	r3, [sp, #24]
 80196b2:	2200      	movs	r2, #0
 80196b4:	3301      	adds	r3, #1
 80196b6:	9306      	str	r3, [sp, #24]
 80196b8:	4615      	mov	r5, r2
 80196ba:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80196be:	4294      	cmp	r4, r2
 80196c0:	f300 8095 	bgt.w	80197ee <__kernel_rem_pio2+0x2d6>
 80196c4:	f1ba 0f00 	cmp.w	sl, #0
 80196c8:	dd07      	ble.n	80196da <__kernel_rem_pio2+0x1c2>
 80196ca:	f1ba 0f01 	cmp.w	sl, #1
 80196ce:	f000 80a2 	beq.w	8019816 <__kernel_rem_pio2+0x2fe>
 80196d2:	f1ba 0f02 	cmp.w	sl, #2
 80196d6:	f000 80c1 	beq.w	801985c <__kernel_rem_pio2+0x344>
 80196da:	9b02      	ldr	r3, [sp, #8]
 80196dc:	2b02      	cmp	r3, #2
 80196de:	d14a      	bne.n	8019776 <__kernel_rem_pio2+0x25e>
 80196e0:	4632      	mov	r2, r6
 80196e2:	463b      	mov	r3, r7
 80196e4:	2000      	movs	r0, #0
 80196e6:	4958      	ldr	r1, [pc, #352]	; (8019848 <__kernel_rem_pio2+0x330>)
 80196e8:	f7e6 fdce 	bl	8000288 <__aeabi_dsub>
 80196ec:	4606      	mov	r6, r0
 80196ee:	460f      	mov	r7, r1
 80196f0:	2d00      	cmp	r5, #0
 80196f2:	d040      	beq.n	8019776 <__kernel_rem_pio2+0x25e>
 80196f4:	4650      	mov	r0, sl
 80196f6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8019838 <__kernel_rem_pio2+0x320>
 80196fa:	f000 fd3d 	bl	801a178 <scalbn>
 80196fe:	4630      	mov	r0, r6
 8019700:	4639      	mov	r1, r7
 8019702:	ec53 2b10 	vmov	r2, r3, d0
 8019706:	f7e6 fdbf 	bl	8000288 <__aeabi_dsub>
 801970a:	4606      	mov	r6, r0
 801970c:	460f      	mov	r7, r1
 801970e:	e032      	b.n	8019776 <__kernel_rem_pio2+0x25e>
 8019710:	2200      	movs	r2, #0
 8019712:	4b4e      	ldr	r3, [pc, #312]	; (801984c <__kernel_rem_pio2+0x334>)
 8019714:	4640      	mov	r0, r8
 8019716:	4649      	mov	r1, r9
 8019718:	f7e6 ff6e 	bl	80005f8 <__aeabi_dmul>
 801971c:	f7e7 fa1c 	bl	8000b58 <__aeabi_d2iz>
 8019720:	f7e6 ff00 	bl	8000524 <__aeabi_i2d>
 8019724:	2200      	movs	r2, #0
 8019726:	4b4a      	ldr	r3, [pc, #296]	; (8019850 <__kernel_rem_pio2+0x338>)
 8019728:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801972c:	f7e6 ff64 	bl	80005f8 <__aeabi_dmul>
 8019730:	4602      	mov	r2, r0
 8019732:	460b      	mov	r3, r1
 8019734:	4640      	mov	r0, r8
 8019736:	4649      	mov	r1, r9
 8019738:	f7e6 fda6 	bl	8000288 <__aeabi_dsub>
 801973c:	f7e7 fa0c 	bl	8000b58 <__aeabi_d2iz>
 8019740:	ab0e      	add	r3, sp, #56	; 0x38
 8019742:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8019746:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801974a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801974e:	f7e6 fd9d 	bl	800028c <__adddf3>
 8019752:	3501      	adds	r5, #1
 8019754:	4680      	mov	r8, r0
 8019756:	4689      	mov	r9, r1
 8019758:	e75e      	b.n	8019618 <__kernel_rem_pio2+0x100>
 801975a:	d105      	bne.n	8019768 <__kernel_rem_pio2+0x250>
 801975c:	1e63      	subs	r3, r4, #1
 801975e:	aa0e      	add	r2, sp, #56	; 0x38
 8019760:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8019764:	15c3      	asrs	r3, r0, #23
 8019766:	e79f      	b.n	80196a8 <__kernel_rem_pio2+0x190>
 8019768:	2200      	movs	r2, #0
 801976a:	4b3a      	ldr	r3, [pc, #232]	; (8019854 <__kernel_rem_pio2+0x33c>)
 801976c:	f7e7 f9ca 	bl	8000b04 <__aeabi_dcmpge>
 8019770:	2800      	cmp	r0, #0
 8019772:	d139      	bne.n	80197e8 <__kernel_rem_pio2+0x2d0>
 8019774:	9002      	str	r0, [sp, #8]
 8019776:	2200      	movs	r2, #0
 8019778:	2300      	movs	r3, #0
 801977a:	4630      	mov	r0, r6
 801977c:	4639      	mov	r1, r7
 801977e:	f7e7 f9a3 	bl	8000ac8 <__aeabi_dcmpeq>
 8019782:	2800      	cmp	r0, #0
 8019784:	f000 80c7 	beq.w	8019916 <__kernel_rem_pio2+0x3fe>
 8019788:	1e65      	subs	r5, r4, #1
 801978a:	462b      	mov	r3, r5
 801978c:	2200      	movs	r2, #0
 801978e:	9904      	ldr	r1, [sp, #16]
 8019790:	428b      	cmp	r3, r1
 8019792:	da6a      	bge.n	801986a <__kernel_rem_pio2+0x352>
 8019794:	2a00      	cmp	r2, #0
 8019796:	f000 8088 	beq.w	80198aa <__kernel_rem_pio2+0x392>
 801979a:	ab0e      	add	r3, sp, #56	; 0x38
 801979c:	f1aa 0a18 	sub.w	sl, sl, #24
 80197a0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80197a4:	2b00      	cmp	r3, #0
 80197a6:	f000 80b4 	beq.w	8019912 <__kernel_rem_pio2+0x3fa>
 80197aa:	4650      	mov	r0, sl
 80197ac:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8019838 <__kernel_rem_pio2+0x320>
 80197b0:	f000 fce2 	bl	801a178 <scalbn>
 80197b4:	00ec      	lsls	r4, r5, #3
 80197b6:	ab72      	add	r3, sp, #456	; 0x1c8
 80197b8:	191e      	adds	r6, r3, r4
 80197ba:	ec59 8b10 	vmov	r8, r9, d0
 80197be:	f106 0a08 	add.w	sl, r6, #8
 80197c2:	462f      	mov	r7, r5
 80197c4:	2f00      	cmp	r7, #0
 80197c6:	f280 80df 	bge.w	8019988 <__kernel_rem_pio2+0x470>
 80197ca:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8019830 <__kernel_rem_pio2+0x318>
 80197ce:	f04f 0a00 	mov.w	sl, #0
 80197d2:	eba5 030a 	sub.w	r3, r5, sl
 80197d6:	2b00      	cmp	r3, #0
 80197d8:	f2c0 810a 	blt.w	80199f0 <__kernel_rem_pio2+0x4d8>
 80197dc:	f8df b078 	ldr.w	fp, [pc, #120]	; 8019858 <__kernel_rem_pio2+0x340>
 80197e0:	ec59 8b18 	vmov	r8, r9, d8
 80197e4:	2700      	movs	r7, #0
 80197e6:	e0f5      	b.n	80199d4 <__kernel_rem_pio2+0x4bc>
 80197e8:	2302      	movs	r3, #2
 80197ea:	9302      	str	r3, [sp, #8]
 80197ec:	e760      	b.n	80196b0 <__kernel_rem_pio2+0x198>
 80197ee:	ab0e      	add	r3, sp, #56	; 0x38
 80197f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80197f4:	b94d      	cbnz	r5, 801980a <__kernel_rem_pio2+0x2f2>
 80197f6:	b12b      	cbz	r3, 8019804 <__kernel_rem_pio2+0x2ec>
 80197f8:	a80e      	add	r0, sp, #56	; 0x38
 80197fa:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80197fe:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8019802:	2301      	movs	r3, #1
 8019804:	3201      	adds	r2, #1
 8019806:	461d      	mov	r5, r3
 8019808:	e759      	b.n	80196be <__kernel_rem_pio2+0x1a6>
 801980a:	a80e      	add	r0, sp, #56	; 0x38
 801980c:	1acb      	subs	r3, r1, r3
 801980e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8019812:	462b      	mov	r3, r5
 8019814:	e7f6      	b.n	8019804 <__kernel_rem_pio2+0x2ec>
 8019816:	1e62      	subs	r2, r4, #1
 8019818:	ab0e      	add	r3, sp, #56	; 0x38
 801981a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801981e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8019822:	a90e      	add	r1, sp, #56	; 0x38
 8019824:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8019828:	e757      	b.n	80196da <__kernel_rem_pio2+0x1c2>
 801982a:	bf00      	nop
 801982c:	f3af 8000 	nop.w
	...
 801983c:	3ff00000 	.word	0x3ff00000
 8019840:	0801aa00 	.word	0x0801aa00
 8019844:	40200000 	.word	0x40200000
 8019848:	3ff00000 	.word	0x3ff00000
 801984c:	3e700000 	.word	0x3e700000
 8019850:	41700000 	.word	0x41700000
 8019854:	3fe00000 	.word	0x3fe00000
 8019858:	0801a9c0 	.word	0x0801a9c0
 801985c:	1e62      	subs	r2, r4, #1
 801985e:	ab0e      	add	r3, sp, #56	; 0x38
 8019860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019864:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8019868:	e7db      	b.n	8019822 <__kernel_rem_pio2+0x30a>
 801986a:	a90e      	add	r1, sp, #56	; 0x38
 801986c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8019870:	3b01      	subs	r3, #1
 8019872:	430a      	orrs	r2, r1
 8019874:	e78b      	b.n	801978e <__kernel_rem_pio2+0x276>
 8019876:	3301      	adds	r3, #1
 8019878:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801987c:	2900      	cmp	r1, #0
 801987e:	d0fa      	beq.n	8019876 <__kernel_rem_pio2+0x35e>
 8019880:	9a08      	ldr	r2, [sp, #32]
 8019882:	4422      	add	r2, r4
 8019884:	00d2      	lsls	r2, r2, #3
 8019886:	a922      	add	r1, sp, #136	; 0x88
 8019888:	18e3      	adds	r3, r4, r3
 801988a:	9206      	str	r2, [sp, #24]
 801988c:	440a      	add	r2, r1
 801988e:	9302      	str	r3, [sp, #8]
 8019890:	f10b 0108 	add.w	r1, fp, #8
 8019894:	f102 0308 	add.w	r3, r2, #8
 8019898:	1c66      	adds	r6, r4, #1
 801989a:	910a      	str	r1, [sp, #40]	; 0x28
 801989c:	2500      	movs	r5, #0
 801989e:	930d      	str	r3, [sp, #52]	; 0x34
 80198a0:	9b02      	ldr	r3, [sp, #8]
 80198a2:	42b3      	cmp	r3, r6
 80198a4:	da04      	bge.n	80198b0 <__kernel_rem_pio2+0x398>
 80198a6:	461c      	mov	r4, r3
 80198a8:	e6a6      	b.n	80195f8 <__kernel_rem_pio2+0xe0>
 80198aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80198ac:	2301      	movs	r3, #1
 80198ae:	e7e3      	b.n	8019878 <__kernel_rem_pio2+0x360>
 80198b0:	9b06      	ldr	r3, [sp, #24]
 80198b2:	18ef      	adds	r7, r5, r3
 80198b4:	ab22      	add	r3, sp, #136	; 0x88
 80198b6:	441f      	add	r7, r3
 80198b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80198ba:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80198be:	f7e6 fe31 	bl	8000524 <__aeabi_i2d>
 80198c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80198c4:	461c      	mov	r4, r3
 80198c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80198c8:	e9c7 0100 	strd	r0, r1, [r7]
 80198cc:	eb03 0b05 	add.w	fp, r3, r5
 80198d0:	2700      	movs	r7, #0
 80198d2:	f04f 0800 	mov.w	r8, #0
 80198d6:	f04f 0900 	mov.w	r9, #0
 80198da:	9b07      	ldr	r3, [sp, #28]
 80198dc:	429f      	cmp	r7, r3
 80198de:	dd08      	ble.n	80198f2 <__kernel_rem_pio2+0x3da>
 80198e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80198e2:	aa72      	add	r2, sp, #456	; 0x1c8
 80198e4:	18eb      	adds	r3, r5, r3
 80198e6:	4413      	add	r3, r2
 80198e8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 80198ec:	3601      	adds	r6, #1
 80198ee:	3508      	adds	r5, #8
 80198f0:	e7d6      	b.n	80198a0 <__kernel_rem_pio2+0x388>
 80198f2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80198f6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80198fa:	f7e6 fe7d 	bl	80005f8 <__aeabi_dmul>
 80198fe:	4602      	mov	r2, r0
 8019900:	460b      	mov	r3, r1
 8019902:	4640      	mov	r0, r8
 8019904:	4649      	mov	r1, r9
 8019906:	f7e6 fcc1 	bl	800028c <__adddf3>
 801990a:	3701      	adds	r7, #1
 801990c:	4680      	mov	r8, r0
 801990e:	4689      	mov	r9, r1
 8019910:	e7e3      	b.n	80198da <__kernel_rem_pio2+0x3c2>
 8019912:	3d01      	subs	r5, #1
 8019914:	e741      	b.n	801979a <__kernel_rem_pio2+0x282>
 8019916:	f1ca 0000 	rsb	r0, sl, #0
 801991a:	ec47 6b10 	vmov	d0, r6, r7
 801991e:	f000 fc2b 	bl	801a178 <scalbn>
 8019922:	ec57 6b10 	vmov	r6, r7, d0
 8019926:	2200      	movs	r2, #0
 8019928:	4b99      	ldr	r3, [pc, #612]	; (8019b90 <__kernel_rem_pio2+0x678>)
 801992a:	ee10 0a10 	vmov	r0, s0
 801992e:	4639      	mov	r1, r7
 8019930:	f7e7 f8e8 	bl	8000b04 <__aeabi_dcmpge>
 8019934:	b1f8      	cbz	r0, 8019976 <__kernel_rem_pio2+0x45e>
 8019936:	2200      	movs	r2, #0
 8019938:	4b96      	ldr	r3, [pc, #600]	; (8019b94 <__kernel_rem_pio2+0x67c>)
 801993a:	4630      	mov	r0, r6
 801993c:	4639      	mov	r1, r7
 801993e:	f7e6 fe5b 	bl	80005f8 <__aeabi_dmul>
 8019942:	f7e7 f909 	bl	8000b58 <__aeabi_d2iz>
 8019946:	4680      	mov	r8, r0
 8019948:	f7e6 fdec 	bl	8000524 <__aeabi_i2d>
 801994c:	2200      	movs	r2, #0
 801994e:	4b90      	ldr	r3, [pc, #576]	; (8019b90 <__kernel_rem_pio2+0x678>)
 8019950:	f7e6 fe52 	bl	80005f8 <__aeabi_dmul>
 8019954:	460b      	mov	r3, r1
 8019956:	4602      	mov	r2, r0
 8019958:	4639      	mov	r1, r7
 801995a:	4630      	mov	r0, r6
 801995c:	f7e6 fc94 	bl	8000288 <__aeabi_dsub>
 8019960:	f7e7 f8fa 	bl	8000b58 <__aeabi_d2iz>
 8019964:	1c65      	adds	r5, r4, #1
 8019966:	ab0e      	add	r3, sp, #56	; 0x38
 8019968:	f10a 0a18 	add.w	sl, sl, #24
 801996c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8019970:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8019974:	e719      	b.n	80197aa <__kernel_rem_pio2+0x292>
 8019976:	4630      	mov	r0, r6
 8019978:	4639      	mov	r1, r7
 801997a:	f7e7 f8ed 	bl	8000b58 <__aeabi_d2iz>
 801997e:	ab0e      	add	r3, sp, #56	; 0x38
 8019980:	4625      	mov	r5, r4
 8019982:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8019986:	e710      	b.n	80197aa <__kernel_rem_pio2+0x292>
 8019988:	ab0e      	add	r3, sp, #56	; 0x38
 801998a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801998e:	f7e6 fdc9 	bl	8000524 <__aeabi_i2d>
 8019992:	4642      	mov	r2, r8
 8019994:	464b      	mov	r3, r9
 8019996:	f7e6 fe2f 	bl	80005f8 <__aeabi_dmul>
 801999a:	2200      	movs	r2, #0
 801999c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80199a0:	4b7c      	ldr	r3, [pc, #496]	; (8019b94 <__kernel_rem_pio2+0x67c>)
 80199a2:	4640      	mov	r0, r8
 80199a4:	4649      	mov	r1, r9
 80199a6:	f7e6 fe27 	bl	80005f8 <__aeabi_dmul>
 80199aa:	3f01      	subs	r7, #1
 80199ac:	4680      	mov	r8, r0
 80199ae:	4689      	mov	r9, r1
 80199b0:	e708      	b.n	80197c4 <__kernel_rem_pio2+0x2ac>
 80199b2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80199b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199ba:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80199be:	f7e6 fe1b 	bl	80005f8 <__aeabi_dmul>
 80199c2:	4602      	mov	r2, r0
 80199c4:	460b      	mov	r3, r1
 80199c6:	4640      	mov	r0, r8
 80199c8:	4649      	mov	r1, r9
 80199ca:	f7e6 fc5f 	bl	800028c <__adddf3>
 80199ce:	3701      	adds	r7, #1
 80199d0:	4680      	mov	r8, r0
 80199d2:	4689      	mov	r9, r1
 80199d4:	9b04      	ldr	r3, [sp, #16]
 80199d6:	429f      	cmp	r7, r3
 80199d8:	dc01      	bgt.n	80199de <__kernel_rem_pio2+0x4c6>
 80199da:	45ba      	cmp	sl, r7
 80199dc:	dae9      	bge.n	80199b2 <__kernel_rem_pio2+0x49a>
 80199de:	ab4a      	add	r3, sp, #296	; 0x128
 80199e0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80199e4:	e9c3 8900 	strd	r8, r9, [r3]
 80199e8:	f10a 0a01 	add.w	sl, sl, #1
 80199ec:	3e08      	subs	r6, #8
 80199ee:	e6f0      	b.n	80197d2 <__kernel_rem_pio2+0x2ba>
 80199f0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80199f2:	2b03      	cmp	r3, #3
 80199f4:	d85b      	bhi.n	8019aae <__kernel_rem_pio2+0x596>
 80199f6:	e8df f003 	tbb	[pc, r3]
 80199fa:	264a      	.short	0x264a
 80199fc:	0226      	.short	0x0226
 80199fe:	ab9a      	add	r3, sp, #616	; 0x268
 8019a00:	441c      	add	r4, r3
 8019a02:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8019a06:	46a2      	mov	sl, r4
 8019a08:	46ab      	mov	fp, r5
 8019a0a:	f1bb 0f00 	cmp.w	fp, #0
 8019a0e:	dc6c      	bgt.n	8019aea <__kernel_rem_pio2+0x5d2>
 8019a10:	46a2      	mov	sl, r4
 8019a12:	46ab      	mov	fp, r5
 8019a14:	f1bb 0f01 	cmp.w	fp, #1
 8019a18:	f300 8086 	bgt.w	8019b28 <__kernel_rem_pio2+0x610>
 8019a1c:	2000      	movs	r0, #0
 8019a1e:	2100      	movs	r1, #0
 8019a20:	2d01      	cmp	r5, #1
 8019a22:	f300 80a0 	bgt.w	8019b66 <__kernel_rem_pio2+0x64e>
 8019a26:	9b02      	ldr	r3, [sp, #8]
 8019a28:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8019a2c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8019a30:	2b00      	cmp	r3, #0
 8019a32:	f040 809e 	bne.w	8019b72 <__kernel_rem_pio2+0x65a>
 8019a36:	9b01      	ldr	r3, [sp, #4]
 8019a38:	e9c3 7800 	strd	r7, r8, [r3]
 8019a3c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8019a40:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8019a44:	e033      	b.n	8019aae <__kernel_rem_pio2+0x596>
 8019a46:	3408      	adds	r4, #8
 8019a48:	ab4a      	add	r3, sp, #296	; 0x128
 8019a4a:	441c      	add	r4, r3
 8019a4c:	462e      	mov	r6, r5
 8019a4e:	2000      	movs	r0, #0
 8019a50:	2100      	movs	r1, #0
 8019a52:	2e00      	cmp	r6, #0
 8019a54:	da3a      	bge.n	8019acc <__kernel_rem_pio2+0x5b4>
 8019a56:	9b02      	ldr	r3, [sp, #8]
 8019a58:	2b00      	cmp	r3, #0
 8019a5a:	d03d      	beq.n	8019ad8 <__kernel_rem_pio2+0x5c0>
 8019a5c:	4602      	mov	r2, r0
 8019a5e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019a62:	9c01      	ldr	r4, [sp, #4]
 8019a64:	e9c4 2300 	strd	r2, r3, [r4]
 8019a68:	4602      	mov	r2, r0
 8019a6a:	460b      	mov	r3, r1
 8019a6c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8019a70:	f7e6 fc0a 	bl	8000288 <__aeabi_dsub>
 8019a74:	ae4c      	add	r6, sp, #304	; 0x130
 8019a76:	2401      	movs	r4, #1
 8019a78:	42a5      	cmp	r5, r4
 8019a7a:	da30      	bge.n	8019ade <__kernel_rem_pio2+0x5c6>
 8019a7c:	9b02      	ldr	r3, [sp, #8]
 8019a7e:	b113      	cbz	r3, 8019a86 <__kernel_rem_pio2+0x56e>
 8019a80:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019a84:	4619      	mov	r1, r3
 8019a86:	9b01      	ldr	r3, [sp, #4]
 8019a88:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8019a8c:	e00f      	b.n	8019aae <__kernel_rem_pio2+0x596>
 8019a8e:	ab9a      	add	r3, sp, #616	; 0x268
 8019a90:	441c      	add	r4, r3
 8019a92:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8019a96:	2000      	movs	r0, #0
 8019a98:	2100      	movs	r1, #0
 8019a9a:	2d00      	cmp	r5, #0
 8019a9c:	da10      	bge.n	8019ac0 <__kernel_rem_pio2+0x5a8>
 8019a9e:	9b02      	ldr	r3, [sp, #8]
 8019aa0:	b113      	cbz	r3, 8019aa8 <__kernel_rem_pio2+0x590>
 8019aa2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019aa6:	4619      	mov	r1, r3
 8019aa8:	9b01      	ldr	r3, [sp, #4]
 8019aaa:	e9c3 0100 	strd	r0, r1, [r3]
 8019aae:	9b06      	ldr	r3, [sp, #24]
 8019ab0:	f003 0007 	and.w	r0, r3, #7
 8019ab4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8019ab8:	ecbd 8b02 	vpop	{d8}
 8019abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ac0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8019ac4:	f7e6 fbe2 	bl	800028c <__adddf3>
 8019ac8:	3d01      	subs	r5, #1
 8019aca:	e7e6      	b.n	8019a9a <__kernel_rem_pio2+0x582>
 8019acc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8019ad0:	f7e6 fbdc 	bl	800028c <__adddf3>
 8019ad4:	3e01      	subs	r6, #1
 8019ad6:	e7bc      	b.n	8019a52 <__kernel_rem_pio2+0x53a>
 8019ad8:	4602      	mov	r2, r0
 8019ada:	460b      	mov	r3, r1
 8019adc:	e7c1      	b.n	8019a62 <__kernel_rem_pio2+0x54a>
 8019ade:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8019ae2:	f7e6 fbd3 	bl	800028c <__adddf3>
 8019ae6:	3401      	adds	r4, #1
 8019ae8:	e7c6      	b.n	8019a78 <__kernel_rem_pio2+0x560>
 8019aea:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8019aee:	ed3a 7b02 	vldmdb	sl!, {d7}
 8019af2:	4640      	mov	r0, r8
 8019af4:	ec53 2b17 	vmov	r2, r3, d7
 8019af8:	4649      	mov	r1, r9
 8019afa:	ed8d 7b04 	vstr	d7, [sp, #16]
 8019afe:	f7e6 fbc5 	bl	800028c <__adddf3>
 8019b02:	4602      	mov	r2, r0
 8019b04:	460b      	mov	r3, r1
 8019b06:	4606      	mov	r6, r0
 8019b08:	460f      	mov	r7, r1
 8019b0a:	4640      	mov	r0, r8
 8019b0c:	4649      	mov	r1, r9
 8019b0e:	f7e6 fbbb 	bl	8000288 <__aeabi_dsub>
 8019b12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019b16:	f7e6 fbb9 	bl	800028c <__adddf3>
 8019b1a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019b1e:	e9ca 0100 	strd	r0, r1, [sl]
 8019b22:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8019b26:	e770      	b.n	8019a0a <__kernel_rem_pio2+0x4f2>
 8019b28:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8019b2c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8019b30:	4630      	mov	r0, r6
 8019b32:	ec53 2b17 	vmov	r2, r3, d7
 8019b36:	4639      	mov	r1, r7
 8019b38:	ed8d 7b04 	vstr	d7, [sp, #16]
 8019b3c:	f7e6 fba6 	bl	800028c <__adddf3>
 8019b40:	4602      	mov	r2, r0
 8019b42:	460b      	mov	r3, r1
 8019b44:	4680      	mov	r8, r0
 8019b46:	4689      	mov	r9, r1
 8019b48:	4630      	mov	r0, r6
 8019b4a:	4639      	mov	r1, r7
 8019b4c:	f7e6 fb9c 	bl	8000288 <__aeabi_dsub>
 8019b50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019b54:	f7e6 fb9a 	bl	800028c <__adddf3>
 8019b58:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019b5c:	e9ca 0100 	strd	r0, r1, [sl]
 8019b60:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8019b64:	e756      	b.n	8019a14 <__kernel_rem_pio2+0x4fc>
 8019b66:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8019b6a:	f7e6 fb8f 	bl	800028c <__adddf3>
 8019b6e:	3d01      	subs	r5, #1
 8019b70:	e756      	b.n	8019a20 <__kernel_rem_pio2+0x508>
 8019b72:	9b01      	ldr	r3, [sp, #4]
 8019b74:	9a01      	ldr	r2, [sp, #4]
 8019b76:	601f      	str	r7, [r3, #0]
 8019b78:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8019b7c:	605c      	str	r4, [r3, #4]
 8019b7e:	609d      	str	r5, [r3, #8]
 8019b80:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8019b84:	60d3      	str	r3, [r2, #12]
 8019b86:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019b8a:	6110      	str	r0, [r2, #16]
 8019b8c:	6153      	str	r3, [r2, #20]
 8019b8e:	e78e      	b.n	8019aae <__kernel_rem_pio2+0x596>
 8019b90:	41700000 	.word	0x41700000
 8019b94:	3e700000 	.word	0x3e700000

08019b98 <__kernel_sin>:
 8019b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b9c:	ec55 4b10 	vmov	r4, r5, d0
 8019ba0:	b085      	sub	sp, #20
 8019ba2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8019ba6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8019baa:	ed8d 1b00 	vstr	d1, [sp]
 8019bae:	9002      	str	r0, [sp, #8]
 8019bb0:	da06      	bge.n	8019bc0 <__kernel_sin+0x28>
 8019bb2:	ee10 0a10 	vmov	r0, s0
 8019bb6:	4629      	mov	r1, r5
 8019bb8:	f7e6 ffce 	bl	8000b58 <__aeabi_d2iz>
 8019bbc:	2800      	cmp	r0, #0
 8019bbe:	d051      	beq.n	8019c64 <__kernel_sin+0xcc>
 8019bc0:	4622      	mov	r2, r4
 8019bc2:	462b      	mov	r3, r5
 8019bc4:	4620      	mov	r0, r4
 8019bc6:	4629      	mov	r1, r5
 8019bc8:	f7e6 fd16 	bl	80005f8 <__aeabi_dmul>
 8019bcc:	4682      	mov	sl, r0
 8019bce:	468b      	mov	fp, r1
 8019bd0:	4602      	mov	r2, r0
 8019bd2:	460b      	mov	r3, r1
 8019bd4:	4620      	mov	r0, r4
 8019bd6:	4629      	mov	r1, r5
 8019bd8:	f7e6 fd0e 	bl	80005f8 <__aeabi_dmul>
 8019bdc:	a341      	add	r3, pc, #260	; (adr r3, 8019ce4 <__kernel_sin+0x14c>)
 8019bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019be2:	4680      	mov	r8, r0
 8019be4:	4689      	mov	r9, r1
 8019be6:	4650      	mov	r0, sl
 8019be8:	4659      	mov	r1, fp
 8019bea:	f7e6 fd05 	bl	80005f8 <__aeabi_dmul>
 8019bee:	a33f      	add	r3, pc, #252	; (adr r3, 8019cec <__kernel_sin+0x154>)
 8019bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019bf4:	f7e6 fb48 	bl	8000288 <__aeabi_dsub>
 8019bf8:	4652      	mov	r2, sl
 8019bfa:	465b      	mov	r3, fp
 8019bfc:	f7e6 fcfc 	bl	80005f8 <__aeabi_dmul>
 8019c00:	a33c      	add	r3, pc, #240	; (adr r3, 8019cf4 <__kernel_sin+0x15c>)
 8019c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c06:	f7e6 fb41 	bl	800028c <__adddf3>
 8019c0a:	4652      	mov	r2, sl
 8019c0c:	465b      	mov	r3, fp
 8019c0e:	f7e6 fcf3 	bl	80005f8 <__aeabi_dmul>
 8019c12:	a33a      	add	r3, pc, #232	; (adr r3, 8019cfc <__kernel_sin+0x164>)
 8019c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c18:	f7e6 fb36 	bl	8000288 <__aeabi_dsub>
 8019c1c:	4652      	mov	r2, sl
 8019c1e:	465b      	mov	r3, fp
 8019c20:	f7e6 fcea 	bl	80005f8 <__aeabi_dmul>
 8019c24:	a337      	add	r3, pc, #220	; (adr r3, 8019d04 <__kernel_sin+0x16c>)
 8019c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c2a:	f7e6 fb2f 	bl	800028c <__adddf3>
 8019c2e:	9b02      	ldr	r3, [sp, #8]
 8019c30:	4606      	mov	r6, r0
 8019c32:	460f      	mov	r7, r1
 8019c34:	b9db      	cbnz	r3, 8019c6e <__kernel_sin+0xd6>
 8019c36:	4602      	mov	r2, r0
 8019c38:	460b      	mov	r3, r1
 8019c3a:	4650      	mov	r0, sl
 8019c3c:	4659      	mov	r1, fp
 8019c3e:	f7e6 fcdb 	bl	80005f8 <__aeabi_dmul>
 8019c42:	a325      	add	r3, pc, #148	; (adr r3, 8019cd8 <__kernel_sin+0x140>)
 8019c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c48:	f7e6 fb1e 	bl	8000288 <__aeabi_dsub>
 8019c4c:	4642      	mov	r2, r8
 8019c4e:	464b      	mov	r3, r9
 8019c50:	f7e6 fcd2 	bl	80005f8 <__aeabi_dmul>
 8019c54:	4602      	mov	r2, r0
 8019c56:	460b      	mov	r3, r1
 8019c58:	4620      	mov	r0, r4
 8019c5a:	4629      	mov	r1, r5
 8019c5c:	f7e6 fb16 	bl	800028c <__adddf3>
 8019c60:	4604      	mov	r4, r0
 8019c62:	460d      	mov	r5, r1
 8019c64:	ec45 4b10 	vmov	d0, r4, r5
 8019c68:	b005      	add	sp, #20
 8019c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c6e:	2200      	movs	r2, #0
 8019c70:	4b1b      	ldr	r3, [pc, #108]	; (8019ce0 <__kernel_sin+0x148>)
 8019c72:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019c76:	f7e6 fcbf 	bl	80005f8 <__aeabi_dmul>
 8019c7a:	4632      	mov	r2, r6
 8019c7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019c80:	463b      	mov	r3, r7
 8019c82:	4640      	mov	r0, r8
 8019c84:	4649      	mov	r1, r9
 8019c86:	f7e6 fcb7 	bl	80005f8 <__aeabi_dmul>
 8019c8a:	4602      	mov	r2, r0
 8019c8c:	460b      	mov	r3, r1
 8019c8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019c92:	f7e6 faf9 	bl	8000288 <__aeabi_dsub>
 8019c96:	4652      	mov	r2, sl
 8019c98:	465b      	mov	r3, fp
 8019c9a:	f7e6 fcad 	bl	80005f8 <__aeabi_dmul>
 8019c9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019ca2:	f7e6 faf1 	bl	8000288 <__aeabi_dsub>
 8019ca6:	a30c      	add	r3, pc, #48	; (adr r3, 8019cd8 <__kernel_sin+0x140>)
 8019ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019cac:	4606      	mov	r6, r0
 8019cae:	460f      	mov	r7, r1
 8019cb0:	4640      	mov	r0, r8
 8019cb2:	4649      	mov	r1, r9
 8019cb4:	f7e6 fca0 	bl	80005f8 <__aeabi_dmul>
 8019cb8:	4602      	mov	r2, r0
 8019cba:	460b      	mov	r3, r1
 8019cbc:	4630      	mov	r0, r6
 8019cbe:	4639      	mov	r1, r7
 8019cc0:	f7e6 fae4 	bl	800028c <__adddf3>
 8019cc4:	4602      	mov	r2, r0
 8019cc6:	460b      	mov	r3, r1
 8019cc8:	4620      	mov	r0, r4
 8019cca:	4629      	mov	r1, r5
 8019ccc:	f7e6 fadc 	bl	8000288 <__aeabi_dsub>
 8019cd0:	e7c6      	b.n	8019c60 <__kernel_sin+0xc8>
 8019cd2:	bf00      	nop
 8019cd4:	f3af 8000 	nop.w
 8019cd8:	55555549 	.word	0x55555549
 8019cdc:	3fc55555 	.word	0x3fc55555
 8019ce0:	3fe00000 	.word	0x3fe00000
 8019ce4:	5acfd57c 	.word	0x5acfd57c
 8019ce8:	3de5d93a 	.word	0x3de5d93a
 8019cec:	8a2b9ceb 	.word	0x8a2b9ceb
 8019cf0:	3e5ae5e6 	.word	0x3e5ae5e6
 8019cf4:	57b1fe7d 	.word	0x57b1fe7d
 8019cf8:	3ec71de3 	.word	0x3ec71de3
 8019cfc:	19c161d5 	.word	0x19c161d5
 8019d00:	3f2a01a0 	.word	0x3f2a01a0
 8019d04:	1110f8a6 	.word	0x1110f8a6
 8019d08:	3f811111 	.word	0x3f811111
 8019d0c:	00000000 	.word	0x00000000

08019d10 <atan>:
 8019d10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d14:	ec55 4b10 	vmov	r4, r5, d0
 8019d18:	4bc3      	ldr	r3, [pc, #780]	; (801a028 <atan+0x318>)
 8019d1a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8019d1e:	429e      	cmp	r6, r3
 8019d20:	46ab      	mov	fp, r5
 8019d22:	dd18      	ble.n	8019d56 <atan+0x46>
 8019d24:	4bc1      	ldr	r3, [pc, #772]	; (801a02c <atan+0x31c>)
 8019d26:	429e      	cmp	r6, r3
 8019d28:	dc01      	bgt.n	8019d2e <atan+0x1e>
 8019d2a:	d109      	bne.n	8019d40 <atan+0x30>
 8019d2c:	b144      	cbz	r4, 8019d40 <atan+0x30>
 8019d2e:	4622      	mov	r2, r4
 8019d30:	462b      	mov	r3, r5
 8019d32:	4620      	mov	r0, r4
 8019d34:	4629      	mov	r1, r5
 8019d36:	f7e6 faa9 	bl	800028c <__adddf3>
 8019d3a:	4604      	mov	r4, r0
 8019d3c:	460d      	mov	r5, r1
 8019d3e:	e006      	b.n	8019d4e <atan+0x3e>
 8019d40:	f1bb 0f00 	cmp.w	fp, #0
 8019d44:	f340 8131 	ble.w	8019faa <atan+0x29a>
 8019d48:	a59b      	add	r5, pc, #620	; (adr r5, 8019fb8 <atan+0x2a8>)
 8019d4a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8019d4e:	ec45 4b10 	vmov	d0, r4, r5
 8019d52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d56:	4bb6      	ldr	r3, [pc, #728]	; (801a030 <atan+0x320>)
 8019d58:	429e      	cmp	r6, r3
 8019d5a:	dc14      	bgt.n	8019d86 <atan+0x76>
 8019d5c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8019d60:	429e      	cmp	r6, r3
 8019d62:	dc0d      	bgt.n	8019d80 <atan+0x70>
 8019d64:	a396      	add	r3, pc, #600	; (adr r3, 8019fc0 <atan+0x2b0>)
 8019d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d6a:	ee10 0a10 	vmov	r0, s0
 8019d6e:	4629      	mov	r1, r5
 8019d70:	f7e6 fa8c 	bl	800028c <__adddf3>
 8019d74:	2200      	movs	r2, #0
 8019d76:	4baf      	ldr	r3, [pc, #700]	; (801a034 <atan+0x324>)
 8019d78:	f7e6 fece 	bl	8000b18 <__aeabi_dcmpgt>
 8019d7c:	2800      	cmp	r0, #0
 8019d7e:	d1e6      	bne.n	8019d4e <atan+0x3e>
 8019d80:	f04f 3aff 	mov.w	sl, #4294967295
 8019d84:	e02b      	b.n	8019dde <atan+0xce>
 8019d86:	f000 f963 	bl	801a050 <fabs>
 8019d8a:	4bab      	ldr	r3, [pc, #684]	; (801a038 <atan+0x328>)
 8019d8c:	429e      	cmp	r6, r3
 8019d8e:	ec55 4b10 	vmov	r4, r5, d0
 8019d92:	f300 80bf 	bgt.w	8019f14 <atan+0x204>
 8019d96:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8019d9a:	429e      	cmp	r6, r3
 8019d9c:	f300 80a0 	bgt.w	8019ee0 <atan+0x1d0>
 8019da0:	ee10 2a10 	vmov	r2, s0
 8019da4:	ee10 0a10 	vmov	r0, s0
 8019da8:	462b      	mov	r3, r5
 8019daa:	4629      	mov	r1, r5
 8019dac:	f7e6 fa6e 	bl	800028c <__adddf3>
 8019db0:	2200      	movs	r2, #0
 8019db2:	4ba0      	ldr	r3, [pc, #640]	; (801a034 <atan+0x324>)
 8019db4:	f7e6 fa68 	bl	8000288 <__aeabi_dsub>
 8019db8:	2200      	movs	r2, #0
 8019dba:	4606      	mov	r6, r0
 8019dbc:	460f      	mov	r7, r1
 8019dbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8019dc2:	4620      	mov	r0, r4
 8019dc4:	4629      	mov	r1, r5
 8019dc6:	f7e6 fa61 	bl	800028c <__adddf3>
 8019dca:	4602      	mov	r2, r0
 8019dcc:	460b      	mov	r3, r1
 8019dce:	4630      	mov	r0, r6
 8019dd0:	4639      	mov	r1, r7
 8019dd2:	f7e6 fd3b 	bl	800084c <__aeabi_ddiv>
 8019dd6:	f04f 0a00 	mov.w	sl, #0
 8019dda:	4604      	mov	r4, r0
 8019ddc:	460d      	mov	r5, r1
 8019dde:	4622      	mov	r2, r4
 8019de0:	462b      	mov	r3, r5
 8019de2:	4620      	mov	r0, r4
 8019de4:	4629      	mov	r1, r5
 8019de6:	f7e6 fc07 	bl	80005f8 <__aeabi_dmul>
 8019dea:	4602      	mov	r2, r0
 8019dec:	460b      	mov	r3, r1
 8019dee:	4680      	mov	r8, r0
 8019df0:	4689      	mov	r9, r1
 8019df2:	f7e6 fc01 	bl	80005f8 <__aeabi_dmul>
 8019df6:	a374      	add	r3, pc, #464	; (adr r3, 8019fc8 <atan+0x2b8>)
 8019df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019dfc:	4606      	mov	r6, r0
 8019dfe:	460f      	mov	r7, r1
 8019e00:	f7e6 fbfa 	bl	80005f8 <__aeabi_dmul>
 8019e04:	a372      	add	r3, pc, #456	; (adr r3, 8019fd0 <atan+0x2c0>)
 8019e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e0a:	f7e6 fa3f 	bl	800028c <__adddf3>
 8019e0e:	4632      	mov	r2, r6
 8019e10:	463b      	mov	r3, r7
 8019e12:	f7e6 fbf1 	bl	80005f8 <__aeabi_dmul>
 8019e16:	a370      	add	r3, pc, #448	; (adr r3, 8019fd8 <atan+0x2c8>)
 8019e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e1c:	f7e6 fa36 	bl	800028c <__adddf3>
 8019e20:	4632      	mov	r2, r6
 8019e22:	463b      	mov	r3, r7
 8019e24:	f7e6 fbe8 	bl	80005f8 <__aeabi_dmul>
 8019e28:	a36d      	add	r3, pc, #436	; (adr r3, 8019fe0 <atan+0x2d0>)
 8019e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e2e:	f7e6 fa2d 	bl	800028c <__adddf3>
 8019e32:	4632      	mov	r2, r6
 8019e34:	463b      	mov	r3, r7
 8019e36:	f7e6 fbdf 	bl	80005f8 <__aeabi_dmul>
 8019e3a:	a36b      	add	r3, pc, #428	; (adr r3, 8019fe8 <atan+0x2d8>)
 8019e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e40:	f7e6 fa24 	bl	800028c <__adddf3>
 8019e44:	4632      	mov	r2, r6
 8019e46:	463b      	mov	r3, r7
 8019e48:	f7e6 fbd6 	bl	80005f8 <__aeabi_dmul>
 8019e4c:	a368      	add	r3, pc, #416	; (adr r3, 8019ff0 <atan+0x2e0>)
 8019e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e52:	f7e6 fa1b 	bl	800028c <__adddf3>
 8019e56:	4642      	mov	r2, r8
 8019e58:	464b      	mov	r3, r9
 8019e5a:	f7e6 fbcd 	bl	80005f8 <__aeabi_dmul>
 8019e5e:	a366      	add	r3, pc, #408	; (adr r3, 8019ff8 <atan+0x2e8>)
 8019e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e64:	4680      	mov	r8, r0
 8019e66:	4689      	mov	r9, r1
 8019e68:	4630      	mov	r0, r6
 8019e6a:	4639      	mov	r1, r7
 8019e6c:	f7e6 fbc4 	bl	80005f8 <__aeabi_dmul>
 8019e70:	a363      	add	r3, pc, #396	; (adr r3, 801a000 <atan+0x2f0>)
 8019e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e76:	f7e6 fa07 	bl	8000288 <__aeabi_dsub>
 8019e7a:	4632      	mov	r2, r6
 8019e7c:	463b      	mov	r3, r7
 8019e7e:	f7e6 fbbb 	bl	80005f8 <__aeabi_dmul>
 8019e82:	a361      	add	r3, pc, #388	; (adr r3, 801a008 <atan+0x2f8>)
 8019e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e88:	f7e6 f9fe 	bl	8000288 <__aeabi_dsub>
 8019e8c:	4632      	mov	r2, r6
 8019e8e:	463b      	mov	r3, r7
 8019e90:	f7e6 fbb2 	bl	80005f8 <__aeabi_dmul>
 8019e94:	a35e      	add	r3, pc, #376	; (adr r3, 801a010 <atan+0x300>)
 8019e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e9a:	f7e6 f9f5 	bl	8000288 <__aeabi_dsub>
 8019e9e:	4632      	mov	r2, r6
 8019ea0:	463b      	mov	r3, r7
 8019ea2:	f7e6 fba9 	bl	80005f8 <__aeabi_dmul>
 8019ea6:	a35c      	add	r3, pc, #368	; (adr r3, 801a018 <atan+0x308>)
 8019ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019eac:	f7e6 f9ec 	bl	8000288 <__aeabi_dsub>
 8019eb0:	4632      	mov	r2, r6
 8019eb2:	463b      	mov	r3, r7
 8019eb4:	f7e6 fba0 	bl	80005f8 <__aeabi_dmul>
 8019eb8:	4602      	mov	r2, r0
 8019eba:	460b      	mov	r3, r1
 8019ebc:	4640      	mov	r0, r8
 8019ebe:	4649      	mov	r1, r9
 8019ec0:	f7e6 f9e4 	bl	800028c <__adddf3>
 8019ec4:	4622      	mov	r2, r4
 8019ec6:	462b      	mov	r3, r5
 8019ec8:	f7e6 fb96 	bl	80005f8 <__aeabi_dmul>
 8019ecc:	f1ba 3fff 	cmp.w	sl, #4294967295
 8019ed0:	4602      	mov	r2, r0
 8019ed2:	460b      	mov	r3, r1
 8019ed4:	d14b      	bne.n	8019f6e <atan+0x25e>
 8019ed6:	4620      	mov	r0, r4
 8019ed8:	4629      	mov	r1, r5
 8019eda:	f7e6 f9d5 	bl	8000288 <__aeabi_dsub>
 8019ede:	e72c      	b.n	8019d3a <atan+0x2a>
 8019ee0:	ee10 0a10 	vmov	r0, s0
 8019ee4:	2200      	movs	r2, #0
 8019ee6:	4b53      	ldr	r3, [pc, #332]	; (801a034 <atan+0x324>)
 8019ee8:	4629      	mov	r1, r5
 8019eea:	f7e6 f9cd 	bl	8000288 <__aeabi_dsub>
 8019eee:	2200      	movs	r2, #0
 8019ef0:	4606      	mov	r6, r0
 8019ef2:	460f      	mov	r7, r1
 8019ef4:	4b4f      	ldr	r3, [pc, #316]	; (801a034 <atan+0x324>)
 8019ef6:	4620      	mov	r0, r4
 8019ef8:	4629      	mov	r1, r5
 8019efa:	f7e6 f9c7 	bl	800028c <__adddf3>
 8019efe:	4602      	mov	r2, r0
 8019f00:	460b      	mov	r3, r1
 8019f02:	4630      	mov	r0, r6
 8019f04:	4639      	mov	r1, r7
 8019f06:	f7e6 fca1 	bl	800084c <__aeabi_ddiv>
 8019f0a:	f04f 0a01 	mov.w	sl, #1
 8019f0e:	4604      	mov	r4, r0
 8019f10:	460d      	mov	r5, r1
 8019f12:	e764      	b.n	8019dde <atan+0xce>
 8019f14:	4b49      	ldr	r3, [pc, #292]	; (801a03c <atan+0x32c>)
 8019f16:	429e      	cmp	r6, r3
 8019f18:	dc1d      	bgt.n	8019f56 <atan+0x246>
 8019f1a:	ee10 0a10 	vmov	r0, s0
 8019f1e:	2200      	movs	r2, #0
 8019f20:	4b47      	ldr	r3, [pc, #284]	; (801a040 <atan+0x330>)
 8019f22:	4629      	mov	r1, r5
 8019f24:	f7e6 f9b0 	bl	8000288 <__aeabi_dsub>
 8019f28:	2200      	movs	r2, #0
 8019f2a:	4606      	mov	r6, r0
 8019f2c:	460f      	mov	r7, r1
 8019f2e:	4b44      	ldr	r3, [pc, #272]	; (801a040 <atan+0x330>)
 8019f30:	4620      	mov	r0, r4
 8019f32:	4629      	mov	r1, r5
 8019f34:	f7e6 fb60 	bl	80005f8 <__aeabi_dmul>
 8019f38:	2200      	movs	r2, #0
 8019f3a:	4b3e      	ldr	r3, [pc, #248]	; (801a034 <atan+0x324>)
 8019f3c:	f7e6 f9a6 	bl	800028c <__adddf3>
 8019f40:	4602      	mov	r2, r0
 8019f42:	460b      	mov	r3, r1
 8019f44:	4630      	mov	r0, r6
 8019f46:	4639      	mov	r1, r7
 8019f48:	f7e6 fc80 	bl	800084c <__aeabi_ddiv>
 8019f4c:	f04f 0a02 	mov.w	sl, #2
 8019f50:	4604      	mov	r4, r0
 8019f52:	460d      	mov	r5, r1
 8019f54:	e743      	b.n	8019dde <atan+0xce>
 8019f56:	462b      	mov	r3, r5
 8019f58:	ee10 2a10 	vmov	r2, s0
 8019f5c:	2000      	movs	r0, #0
 8019f5e:	4939      	ldr	r1, [pc, #228]	; (801a044 <atan+0x334>)
 8019f60:	f7e6 fc74 	bl	800084c <__aeabi_ddiv>
 8019f64:	f04f 0a03 	mov.w	sl, #3
 8019f68:	4604      	mov	r4, r0
 8019f6a:	460d      	mov	r5, r1
 8019f6c:	e737      	b.n	8019dde <atan+0xce>
 8019f6e:	4b36      	ldr	r3, [pc, #216]	; (801a048 <atan+0x338>)
 8019f70:	4e36      	ldr	r6, [pc, #216]	; (801a04c <atan+0x33c>)
 8019f72:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8019f76:	4456      	add	r6, sl
 8019f78:	449a      	add	sl, r3
 8019f7a:	e9da 2300 	ldrd	r2, r3, [sl]
 8019f7e:	f7e6 f983 	bl	8000288 <__aeabi_dsub>
 8019f82:	4622      	mov	r2, r4
 8019f84:	462b      	mov	r3, r5
 8019f86:	f7e6 f97f 	bl	8000288 <__aeabi_dsub>
 8019f8a:	4602      	mov	r2, r0
 8019f8c:	460b      	mov	r3, r1
 8019f8e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8019f92:	f7e6 f979 	bl	8000288 <__aeabi_dsub>
 8019f96:	f1bb 0f00 	cmp.w	fp, #0
 8019f9a:	4604      	mov	r4, r0
 8019f9c:	460d      	mov	r5, r1
 8019f9e:	f6bf aed6 	bge.w	8019d4e <atan+0x3e>
 8019fa2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019fa6:	461d      	mov	r5, r3
 8019fa8:	e6d1      	b.n	8019d4e <atan+0x3e>
 8019faa:	a51d      	add	r5, pc, #116	; (adr r5, 801a020 <atan+0x310>)
 8019fac:	e9d5 4500 	ldrd	r4, r5, [r5]
 8019fb0:	e6cd      	b.n	8019d4e <atan+0x3e>
 8019fb2:	bf00      	nop
 8019fb4:	f3af 8000 	nop.w
 8019fb8:	54442d18 	.word	0x54442d18
 8019fbc:	3ff921fb 	.word	0x3ff921fb
 8019fc0:	8800759c 	.word	0x8800759c
 8019fc4:	7e37e43c 	.word	0x7e37e43c
 8019fc8:	e322da11 	.word	0xe322da11
 8019fcc:	3f90ad3a 	.word	0x3f90ad3a
 8019fd0:	24760deb 	.word	0x24760deb
 8019fd4:	3fa97b4b 	.word	0x3fa97b4b
 8019fd8:	a0d03d51 	.word	0xa0d03d51
 8019fdc:	3fb10d66 	.word	0x3fb10d66
 8019fe0:	c54c206e 	.word	0xc54c206e
 8019fe4:	3fb745cd 	.word	0x3fb745cd
 8019fe8:	920083ff 	.word	0x920083ff
 8019fec:	3fc24924 	.word	0x3fc24924
 8019ff0:	5555550d 	.word	0x5555550d
 8019ff4:	3fd55555 	.word	0x3fd55555
 8019ff8:	2c6a6c2f 	.word	0x2c6a6c2f
 8019ffc:	bfa2b444 	.word	0xbfa2b444
 801a000:	52defd9a 	.word	0x52defd9a
 801a004:	3fadde2d 	.word	0x3fadde2d
 801a008:	af749a6d 	.word	0xaf749a6d
 801a00c:	3fb3b0f2 	.word	0x3fb3b0f2
 801a010:	fe231671 	.word	0xfe231671
 801a014:	3fbc71c6 	.word	0x3fbc71c6
 801a018:	9998ebc4 	.word	0x9998ebc4
 801a01c:	3fc99999 	.word	0x3fc99999
 801a020:	54442d18 	.word	0x54442d18
 801a024:	bff921fb 	.word	0xbff921fb
 801a028:	440fffff 	.word	0x440fffff
 801a02c:	7ff00000 	.word	0x7ff00000
 801a030:	3fdbffff 	.word	0x3fdbffff
 801a034:	3ff00000 	.word	0x3ff00000
 801a038:	3ff2ffff 	.word	0x3ff2ffff
 801a03c:	40037fff 	.word	0x40037fff
 801a040:	3ff80000 	.word	0x3ff80000
 801a044:	bff00000 	.word	0xbff00000
 801a048:	0801aa30 	.word	0x0801aa30
 801a04c:	0801aa10 	.word	0x0801aa10

0801a050 <fabs>:
 801a050:	ec51 0b10 	vmov	r0, r1, d0
 801a054:	ee10 2a10 	vmov	r2, s0
 801a058:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a05c:	ec43 2b10 	vmov	d0, r2, r3
 801a060:	4770      	bx	lr
 801a062:	0000      	movs	r0, r0
 801a064:	0000      	movs	r0, r0
	...

0801a068 <floor>:
 801a068:	ec51 0b10 	vmov	r0, r1, d0
 801a06c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a070:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801a074:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801a078:	2e13      	cmp	r6, #19
 801a07a:	460c      	mov	r4, r1
 801a07c:	ee10 5a10 	vmov	r5, s0
 801a080:	4680      	mov	r8, r0
 801a082:	dc34      	bgt.n	801a0ee <floor+0x86>
 801a084:	2e00      	cmp	r6, #0
 801a086:	da16      	bge.n	801a0b6 <floor+0x4e>
 801a088:	a335      	add	r3, pc, #212	; (adr r3, 801a160 <floor+0xf8>)
 801a08a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a08e:	f7e6 f8fd 	bl	800028c <__adddf3>
 801a092:	2200      	movs	r2, #0
 801a094:	2300      	movs	r3, #0
 801a096:	f7e6 fd3f 	bl	8000b18 <__aeabi_dcmpgt>
 801a09a:	b148      	cbz	r0, 801a0b0 <floor+0x48>
 801a09c:	2c00      	cmp	r4, #0
 801a09e:	da59      	bge.n	801a154 <floor+0xec>
 801a0a0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801a0a4:	4a30      	ldr	r2, [pc, #192]	; (801a168 <floor+0x100>)
 801a0a6:	432b      	orrs	r3, r5
 801a0a8:	2500      	movs	r5, #0
 801a0aa:	42ab      	cmp	r3, r5
 801a0ac:	bf18      	it	ne
 801a0ae:	4614      	movne	r4, r2
 801a0b0:	4621      	mov	r1, r4
 801a0b2:	4628      	mov	r0, r5
 801a0b4:	e025      	b.n	801a102 <floor+0x9a>
 801a0b6:	4f2d      	ldr	r7, [pc, #180]	; (801a16c <floor+0x104>)
 801a0b8:	4137      	asrs	r7, r6
 801a0ba:	ea01 0307 	and.w	r3, r1, r7
 801a0be:	4303      	orrs	r3, r0
 801a0c0:	d01f      	beq.n	801a102 <floor+0x9a>
 801a0c2:	a327      	add	r3, pc, #156	; (adr r3, 801a160 <floor+0xf8>)
 801a0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0c8:	f7e6 f8e0 	bl	800028c <__adddf3>
 801a0cc:	2200      	movs	r2, #0
 801a0ce:	2300      	movs	r3, #0
 801a0d0:	f7e6 fd22 	bl	8000b18 <__aeabi_dcmpgt>
 801a0d4:	2800      	cmp	r0, #0
 801a0d6:	d0eb      	beq.n	801a0b0 <floor+0x48>
 801a0d8:	2c00      	cmp	r4, #0
 801a0da:	bfbe      	ittt	lt
 801a0dc:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801a0e0:	fa43 f606 	asrlt.w	r6, r3, r6
 801a0e4:	19a4      	addlt	r4, r4, r6
 801a0e6:	ea24 0407 	bic.w	r4, r4, r7
 801a0ea:	2500      	movs	r5, #0
 801a0ec:	e7e0      	b.n	801a0b0 <floor+0x48>
 801a0ee:	2e33      	cmp	r6, #51	; 0x33
 801a0f0:	dd0b      	ble.n	801a10a <floor+0xa2>
 801a0f2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801a0f6:	d104      	bne.n	801a102 <floor+0x9a>
 801a0f8:	ee10 2a10 	vmov	r2, s0
 801a0fc:	460b      	mov	r3, r1
 801a0fe:	f7e6 f8c5 	bl	800028c <__adddf3>
 801a102:	ec41 0b10 	vmov	d0, r0, r1
 801a106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a10a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801a10e:	f04f 33ff 	mov.w	r3, #4294967295
 801a112:	fa23 f707 	lsr.w	r7, r3, r7
 801a116:	4207      	tst	r7, r0
 801a118:	d0f3      	beq.n	801a102 <floor+0x9a>
 801a11a:	a311      	add	r3, pc, #68	; (adr r3, 801a160 <floor+0xf8>)
 801a11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a120:	f7e6 f8b4 	bl	800028c <__adddf3>
 801a124:	2200      	movs	r2, #0
 801a126:	2300      	movs	r3, #0
 801a128:	f7e6 fcf6 	bl	8000b18 <__aeabi_dcmpgt>
 801a12c:	2800      	cmp	r0, #0
 801a12e:	d0bf      	beq.n	801a0b0 <floor+0x48>
 801a130:	2c00      	cmp	r4, #0
 801a132:	da02      	bge.n	801a13a <floor+0xd2>
 801a134:	2e14      	cmp	r6, #20
 801a136:	d103      	bne.n	801a140 <floor+0xd8>
 801a138:	3401      	adds	r4, #1
 801a13a:	ea25 0507 	bic.w	r5, r5, r7
 801a13e:	e7b7      	b.n	801a0b0 <floor+0x48>
 801a140:	2301      	movs	r3, #1
 801a142:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801a146:	fa03 f606 	lsl.w	r6, r3, r6
 801a14a:	4435      	add	r5, r6
 801a14c:	4545      	cmp	r5, r8
 801a14e:	bf38      	it	cc
 801a150:	18e4      	addcc	r4, r4, r3
 801a152:	e7f2      	b.n	801a13a <floor+0xd2>
 801a154:	2500      	movs	r5, #0
 801a156:	462c      	mov	r4, r5
 801a158:	e7aa      	b.n	801a0b0 <floor+0x48>
 801a15a:	bf00      	nop
 801a15c:	f3af 8000 	nop.w
 801a160:	8800759c 	.word	0x8800759c
 801a164:	7e37e43c 	.word	0x7e37e43c
 801a168:	bff00000 	.word	0xbff00000
 801a16c:	000fffff 	.word	0x000fffff

0801a170 <matherr>:
 801a170:	2000      	movs	r0, #0
 801a172:	4770      	bx	lr
 801a174:	0000      	movs	r0, r0
	...

0801a178 <scalbn>:
 801a178:	b570      	push	{r4, r5, r6, lr}
 801a17a:	ec55 4b10 	vmov	r4, r5, d0
 801a17e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801a182:	4606      	mov	r6, r0
 801a184:	462b      	mov	r3, r5
 801a186:	b9aa      	cbnz	r2, 801a1b4 <scalbn+0x3c>
 801a188:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801a18c:	4323      	orrs	r3, r4
 801a18e:	d03b      	beq.n	801a208 <scalbn+0x90>
 801a190:	4b31      	ldr	r3, [pc, #196]	; (801a258 <scalbn+0xe0>)
 801a192:	4629      	mov	r1, r5
 801a194:	2200      	movs	r2, #0
 801a196:	ee10 0a10 	vmov	r0, s0
 801a19a:	f7e6 fa2d 	bl	80005f8 <__aeabi_dmul>
 801a19e:	4b2f      	ldr	r3, [pc, #188]	; (801a25c <scalbn+0xe4>)
 801a1a0:	429e      	cmp	r6, r3
 801a1a2:	4604      	mov	r4, r0
 801a1a4:	460d      	mov	r5, r1
 801a1a6:	da12      	bge.n	801a1ce <scalbn+0x56>
 801a1a8:	a327      	add	r3, pc, #156	; (adr r3, 801a248 <scalbn+0xd0>)
 801a1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1ae:	f7e6 fa23 	bl	80005f8 <__aeabi_dmul>
 801a1b2:	e009      	b.n	801a1c8 <scalbn+0x50>
 801a1b4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801a1b8:	428a      	cmp	r2, r1
 801a1ba:	d10c      	bne.n	801a1d6 <scalbn+0x5e>
 801a1bc:	ee10 2a10 	vmov	r2, s0
 801a1c0:	4620      	mov	r0, r4
 801a1c2:	4629      	mov	r1, r5
 801a1c4:	f7e6 f862 	bl	800028c <__adddf3>
 801a1c8:	4604      	mov	r4, r0
 801a1ca:	460d      	mov	r5, r1
 801a1cc:	e01c      	b.n	801a208 <scalbn+0x90>
 801a1ce:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801a1d2:	460b      	mov	r3, r1
 801a1d4:	3a36      	subs	r2, #54	; 0x36
 801a1d6:	4432      	add	r2, r6
 801a1d8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801a1dc:	428a      	cmp	r2, r1
 801a1de:	dd0b      	ble.n	801a1f8 <scalbn+0x80>
 801a1e0:	ec45 4b11 	vmov	d1, r4, r5
 801a1e4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 801a250 <scalbn+0xd8>
 801a1e8:	f000 f83c 	bl	801a264 <copysign>
 801a1ec:	a318      	add	r3, pc, #96	; (adr r3, 801a250 <scalbn+0xd8>)
 801a1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1f2:	ec51 0b10 	vmov	r0, r1, d0
 801a1f6:	e7da      	b.n	801a1ae <scalbn+0x36>
 801a1f8:	2a00      	cmp	r2, #0
 801a1fa:	dd08      	ble.n	801a20e <scalbn+0x96>
 801a1fc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a200:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801a204:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801a208:	ec45 4b10 	vmov	d0, r4, r5
 801a20c:	bd70      	pop	{r4, r5, r6, pc}
 801a20e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801a212:	da0d      	bge.n	801a230 <scalbn+0xb8>
 801a214:	f24c 3350 	movw	r3, #50000	; 0xc350
 801a218:	429e      	cmp	r6, r3
 801a21a:	ec45 4b11 	vmov	d1, r4, r5
 801a21e:	dce1      	bgt.n	801a1e4 <scalbn+0x6c>
 801a220:	ed9f 0b09 	vldr	d0, [pc, #36]	; 801a248 <scalbn+0xd0>
 801a224:	f000 f81e 	bl	801a264 <copysign>
 801a228:	a307      	add	r3, pc, #28	; (adr r3, 801a248 <scalbn+0xd0>)
 801a22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a22e:	e7e0      	b.n	801a1f2 <scalbn+0x7a>
 801a230:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a234:	3236      	adds	r2, #54	; 0x36
 801a236:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801a23a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801a23e:	4620      	mov	r0, r4
 801a240:	4629      	mov	r1, r5
 801a242:	2200      	movs	r2, #0
 801a244:	4b06      	ldr	r3, [pc, #24]	; (801a260 <scalbn+0xe8>)
 801a246:	e7b2      	b.n	801a1ae <scalbn+0x36>
 801a248:	c2f8f359 	.word	0xc2f8f359
 801a24c:	01a56e1f 	.word	0x01a56e1f
 801a250:	8800759c 	.word	0x8800759c
 801a254:	7e37e43c 	.word	0x7e37e43c
 801a258:	43500000 	.word	0x43500000
 801a25c:	ffff3cb0 	.word	0xffff3cb0
 801a260:	3c900000 	.word	0x3c900000

0801a264 <copysign>:
 801a264:	ec51 0b10 	vmov	r0, r1, d0
 801a268:	ee11 0a90 	vmov	r0, s3
 801a26c:	ee10 2a10 	vmov	r2, s0
 801a270:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801a274:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801a278:	ea41 0300 	orr.w	r3, r1, r0
 801a27c:	ec43 2b10 	vmov	d0, r2, r3
 801a280:	4770      	bx	lr
	...

0801a284 <_init>:
 801a284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a286:	bf00      	nop
 801a288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a28a:	bc08      	pop	{r3}
 801a28c:	469e      	mov	lr, r3
 801a28e:	4770      	bx	lr

0801a290 <_fini>:
 801a290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a292:	bf00      	nop
 801a294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a296:	bc08      	pop	{r3}
 801a298:	469e      	mov	lr, r3
 801a29a:	4770      	bx	lr
