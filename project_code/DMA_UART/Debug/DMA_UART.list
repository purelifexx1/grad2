
DMA_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b13c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b0  0801b2d0  0801b2d0  0002b2d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ba80  0801ba80  00030b80  2**0
                  CONTENTS
  4 .ARM          00000008  0801ba80  0801ba80  0002ba80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ba88  0801ba88  00030b80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ba88  0801ba88  0002ba88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ba8c  0801ba8c  0002ba8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000b80  20000000  0801ba90  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006bc0  20000b80  0801c610  00030b80  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20007740  0801c610  00037740  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030b80  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003123a  00000000  00000000  00030bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000065bf  00000000  00000000  00061dea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001dd0  00000000  00000000  000683b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001ba0  00000000  00000000  0006a180  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a08f  00000000  00000000  0006bd20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000200fd  00000000  00000000  00095daf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ddd70  00000000  00000000  000b5eac  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00193c1c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008bdc  00000000  00000000  00193c98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000b80 	.word	0x20000b80
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801b2b4 	.word	0x0801b2b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000b84 	.word	0x20000b84
 80001cc:	0801b2b4 	.word	0x0801b2b4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <packetRead>:
//												"OKAY"};

Position_DataType position_type;
SCARA_Gcode_Cor_TypeDef		Gcode_Cor[125];
uint16_t point_counter = 0;
Robot_CommandTypedef 	packetRead	(uint8_t *message, int32_t length, int32_t *id_command, DUTY_Command_TypeDef *duty_cmd) {
 8000f88:	b590      	push	{r4, r7, lr}
 8000f8a:	b08d      	sub	sp, #52	; 0x34
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
 8000f94:	603b      	str	r3, [r7, #0]
	Transfer_Protocol protocol_id = message[0];
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    duty_cmd->id_command = message[1];
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	609a      	str	r2, [r3, #8]
	int32_t temp_pointer = 2;
 8000faa:	2302      	movs	r3, #2
 8000fac:	62fb      	str	r3, [r7, #44]	; 0x2c
    switch(protocol_id) 
 8000fae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d004      	beq.n	8000fc0 <packetRead+0x38>
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	f000 813d 	beq.w	8001236 <packetRead+0x2ae>
 8000fbc:	f000 bcb0 	b.w	8001920 <packetRead+0x998>
    {
        // reserved for Gcode file transfer
        case FILE_TRANSMISION:
        {
        	temp_pointer = 1;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	62fb      	str	r3, [r7, #44]	; 0x2c

        	do {
        		Gcode_Packet_Command_TypeDef move_type 	 = message[temp_pointer] & 0x0f;
 8000fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	4413      	add	r3, r2
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	f003 030f 	and.w	r3, r3, #15
 8000fd0:	74bb      	strb	r3, [r7, #18]
				switch (move_type){
 8000fd2:	7cbb      	ldrb	r3, [r7, #18]
 8000fd4:	2b03      	cmp	r3, #3
 8000fd6:	f200 8127 	bhi.w	8001228 <packetRead+0x2a0>
 8000fda:	a201      	add	r2, pc, #4	; (adr r2, 8000fe0 <packetRead+0x58>)
 8000fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe0:	08000ff1 	.word	0x08000ff1
 8000fe4:	08001061 	.word	0x08001061
 8000fe8:	08001121 	.word	0x08001121
 8000fec:	08001121 	.word	0x08001121
				case FIRST_PACKET:{
					temp_pointer++;
 8000ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
					down_z_height = (double)B2I(temp_pointer)*COR_INVERSE_SCALE; temp_pointer+=4;
 8000ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ff8:	68fa      	ldr	r2, [r7, #12]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff fa90 	bl	8000524 <__aeabi_i2d>
 8001004:	a3b2      	add	r3, pc, #712	; (adr r3, 80012d0 <packetRead+0x348>)
 8001006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100a:	f7ff faf5 	bl	80005f8 <__aeabi_dmul>
 800100e:	4603      	mov	r3, r0
 8001010:	460c      	mov	r4, r1
 8001012:	4ab1      	ldr	r2, [pc, #708]	; (80012d8 <packetRead+0x350>)
 8001014:	e9c2 3400 	strd	r3, r4, [r2]
 8001018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800101a:	3304      	adds	r3, #4
 800101c:	62fb      	str	r3, [r7, #44]	; 0x2c
					up_z_height   = (double)B2I(temp_pointer)*COR_INVERSE_SCALE; temp_pointer+=4;
 800101e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001020:	68fa      	ldr	r2, [r7, #12]
 8001022:	4413      	add	r3, r2
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff fa7c 	bl	8000524 <__aeabi_i2d>
 800102c:	a3a8      	add	r3, pc, #672	; (adr r3, 80012d0 <packetRead+0x348>)
 800102e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001032:	f7ff fae1 	bl	80005f8 <__aeabi_dmul>
 8001036:	4603      	mov	r3, r0
 8001038:	460c      	mov	r4, r1
 800103a:	4aa8      	ldr	r2, [pc, #672]	; (80012dc <packetRead+0x354>)
 800103c:	e9c2 3400 	strd	r3, r4, [r2]
 8001040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001042:	3304      	adds	r3, #4
 8001044:	62fb      	str	r3, [r7, #44]	; 0x2c
					total_num_of_point = B2I(temp_pointer);						 temp_pointer+=4;
 8001046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001048:	68fa      	ldr	r2, [r7, #12]
 800104a:	4413      	add	r3, r2
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4aa4      	ldr	r2, [pc, #656]	; (80012e0 <packetRead+0x358>)
 8001050:	6013      	str	r3, [r2, #0]
 8001052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001054:	3304      	adds	r3, #4
 8001056:	62fb      	str	r3, [r7, #44]	; 0x2c
					point_counter = 0;
 8001058:	4ba2      	ldr	r3, [pc, #648]	; (80012e4 <packetRead+0x35c>)
 800105a:	2200      	movs	r2, #0
 800105c:	801a      	strh	r2, [r3, #0]
				}
				break;
 800105e:	e0e3      	b.n	8001228 <packetRead+0x2a0>
				case LINEAR_TYPE:{
					Gcode_Cor[point_counter].type_define[0] = move_type;
 8001060:	4ba0      	ldr	r3, [pc, #640]	; (80012e4 <packetRead+0x35c>)
 8001062:	881b      	ldrh	r3, [r3, #0]
 8001064:	4619      	mov	r1, r3
 8001066:	4aa0      	ldr	r2, [pc, #640]	; (80012e8 <packetRead+0x360>)
 8001068:	460b      	mov	r3, r1
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	440b      	add	r3, r1
 800106e:	00db      	lsls	r3, r3, #3
 8001070:	4413      	add	r3, r2
 8001072:	3314      	adds	r3, #20
 8001074:	7cba      	ldrb	r2, [r7, #18]
 8001076:	701a      	strb	r2, [r3, #0]
					Gcode_Cor[point_counter].type_define[1]	= message[temp_pointer++] >> 4 & 0x0f;
 8001078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800107a:	1c5a      	adds	r2, r3, #1
 800107c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800107e:	461a      	mov	r2, r3
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	4413      	add	r3, r2
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	091b      	lsrs	r3, r3, #4
 8001088:	b2db      	uxtb	r3, r3
 800108a:	4a96      	ldr	r2, [pc, #600]	; (80012e4 <packetRead+0x35c>)
 800108c:	8812      	ldrh	r2, [r2, #0]
 800108e:	4611      	mov	r1, r2
 8001090:	f003 030f 	and.w	r3, r3, #15
 8001094:	b2d8      	uxtb	r0, r3
 8001096:	4a94      	ldr	r2, [pc, #592]	; (80012e8 <packetRead+0x360>)
 8001098:	460b      	mov	r3, r1
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	440b      	add	r3, r1
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	4413      	add	r3, r2
 80010a2:	3315      	adds	r3, #21
 80010a4:	4602      	mov	r2, r0
 80010a6:	701a      	strb	r2, [r3, #0]
					Gcode_Cor[point_counter].X = B2I(temp_pointer);	temp_pointer+=4;
 80010a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	4413      	add	r3, r2
 80010ae:	4a8d      	ldr	r2, [pc, #564]	; (80012e4 <packetRead+0x35c>)
 80010b0:	8812      	ldrh	r2, [r2, #0]
 80010b2:	4610      	mov	r0, r2
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	498c      	ldr	r1, [pc, #560]	; (80012e8 <packetRead+0x360>)
 80010b8:	4603      	mov	r3, r0
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	4403      	add	r3, r0
 80010be:	00db      	lsls	r3, r3, #3
 80010c0:	440b      	add	r3, r1
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010c6:	3304      	adds	r3, #4
 80010c8:	62fb      	str	r3, [r7, #44]	; 0x2c
					Gcode_Cor[point_counter].Y = B2I(temp_pointer);	temp_pointer+=4;
 80010ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010cc:	68fa      	ldr	r2, [r7, #12]
 80010ce:	4413      	add	r3, r2
 80010d0:	4a84      	ldr	r2, [pc, #528]	; (80012e4 <packetRead+0x35c>)
 80010d2:	8812      	ldrh	r2, [r2, #0]
 80010d4:	4610      	mov	r0, r2
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	4983      	ldr	r1, [pc, #524]	; (80012e8 <packetRead+0x360>)
 80010da:	4603      	mov	r3, r0
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	4403      	add	r3, r0
 80010e0:	00db      	lsls	r3, r3, #3
 80010e2:	440b      	add	r3, r1
 80010e4:	3304      	adds	r3, #4
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ea:	3304      	adds	r3, #4
 80010ec:	62fb      	str	r3, [r7, #44]	; 0x2c
					Gcode_Cor[point_counter].F = B2I(temp_pointer);	temp_pointer+=4;
 80010ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010f0:	68fa      	ldr	r2, [r7, #12]
 80010f2:	4413      	add	r3, r2
 80010f4:	4a7b      	ldr	r2, [pc, #492]	; (80012e4 <packetRead+0x35c>)
 80010f6:	8812      	ldrh	r2, [r2, #0]
 80010f8:	4610      	mov	r0, r2
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	497a      	ldr	r1, [pc, #488]	; (80012e8 <packetRead+0x360>)
 80010fe:	4603      	mov	r3, r0
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	4403      	add	r3, r0
 8001104:	00db      	lsls	r3, r3, #3
 8001106:	440b      	add	r3, r1
 8001108:	3308      	adds	r3, #8
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800110e:	3304      	adds	r3, #4
 8001110:	62fb      	str	r3, [r7, #44]	; 0x2c
					point_counter++;
 8001112:	4b74      	ldr	r3, [pc, #464]	; (80012e4 <packetRead+0x35c>)
 8001114:	881b      	ldrh	r3, [r3, #0]
 8001116:	3301      	adds	r3, #1
 8001118:	b29a      	uxth	r2, r3
 800111a:	4b72      	ldr	r3, [pc, #456]	; (80012e4 <packetRead+0x35c>)
 800111c:	801a      	strh	r2, [r3, #0]
				}
				break;
 800111e:	e083      	b.n	8001228 <packetRead+0x2a0>
				case ARC_CW_TYPE:
				case ARC_AW_TYPE:{
					Gcode_Cor[point_counter].type_define[0] = move_type;
 8001120:	4b70      	ldr	r3, [pc, #448]	; (80012e4 <packetRead+0x35c>)
 8001122:	881b      	ldrh	r3, [r3, #0]
 8001124:	4619      	mov	r1, r3
 8001126:	4a70      	ldr	r2, [pc, #448]	; (80012e8 <packetRead+0x360>)
 8001128:	460b      	mov	r3, r1
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	440b      	add	r3, r1
 800112e:	00db      	lsls	r3, r3, #3
 8001130:	4413      	add	r3, r2
 8001132:	3314      	adds	r3, #20
 8001134:	7cba      	ldrb	r2, [r7, #18]
 8001136:	701a      	strb	r2, [r3, #0]
					Gcode_Cor[point_counter].type_define[1]	= message[temp_pointer++] >> 4 & 0x0f;
 8001138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800113a:	1c5a      	adds	r2, r3, #1
 800113c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800113e:	461a      	mov	r2, r3
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4413      	add	r3, r2
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	091b      	lsrs	r3, r3, #4
 8001148:	b2db      	uxtb	r3, r3
 800114a:	4a66      	ldr	r2, [pc, #408]	; (80012e4 <packetRead+0x35c>)
 800114c:	8812      	ldrh	r2, [r2, #0]
 800114e:	4611      	mov	r1, r2
 8001150:	f003 030f 	and.w	r3, r3, #15
 8001154:	b2d8      	uxtb	r0, r3
 8001156:	4a64      	ldr	r2, [pc, #400]	; (80012e8 <packetRead+0x360>)
 8001158:	460b      	mov	r3, r1
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	440b      	add	r3, r1
 800115e:	00db      	lsls	r3, r3, #3
 8001160:	4413      	add	r3, r2
 8001162:	3315      	adds	r3, #21
 8001164:	4602      	mov	r2, r0
 8001166:	701a      	strb	r2, [r3, #0]
					Gcode_Cor[point_counter].X = B2I(temp_pointer);	temp_pointer+=4;
 8001168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800116a:	68fa      	ldr	r2, [r7, #12]
 800116c:	4413      	add	r3, r2
 800116e:	4a5d      	ldr	r2, [pc, #372]	; (80012e4 <packetRead+0x35c>)
 8001170:	8812      	ldrh	r2, [r2, #0]
 8001172:	4610      	mov	r0, r2
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	495c      	ldr	r1, [pc, #368]	; (80012e8 <packetRead+0x360>)
 8001178:	4603      	mov	r3, r0
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	4403      	add	r3, r0
 800117e:	00db      	lsls	r3, r3, #3
 8001180:	440b      	add	r3, r1
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001186:	3304      	adds	r3, #4
 8001188:	62fb      	str	r3, [r7, #44]	; 0x2c
					Gcode_Cor[point_counter].Y = B2I(temp_pointer);	temp_pointer+=4;
 800118a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800118c:	68fa      	ldr	r2, [r7, #12]
 800118e:	4413      	add	r3, r2
 8001190:	4a54      	ldr	r2, [pc, #336]	; (80012e4 <packetRead+0x35c>)
 8001192:	8812      	ldrh	r2, [r2, #0]
 8001194:	4610      	mov	r0, r2
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	4953      	ldr	r1, [pc, #332]	; (80012e8 <packetRead+0x360>)
 800119a:	4603      	mov	r3, r0
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	4403      	add	r3, r0
 80011a0:	00db      	lsls	r3, r3, #3
 80011a2:	440b      	add	r3, r1
 80011a4:	3304      	adds	r3, #4
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011aa:	3304      	adds	r3, #4
 80011ac:	62fb      	str	r3, [r7, #44]	; 0x2c
					Gcode_Cor[point_counter].F = B2I(temp_pointer);	temp_pointer+=4;
 80011ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011b0:	68fa      	ldr	r2, [r7, #12]
 80011b2:	4413      	add	r3, r2
 80011b4:	4a4b      	ldr	r2, [pc, #300]	; (80012e4 <packetRead+0x35c>)
 80011b6:	8812      	ldrh	r2, [r2, #0]
 80011b8:	4610      	mov	r0, r2
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	494a      	ldr	r1, [pc, #296]	; (80012e8 <packetRead+0x360>)
 80011be:	4603      	mov	r3, r0
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	4403      	add	r3, r0
 80011c4:	00db      	lsls	r3, r3, #3
 80011c6:	440b      	add	r3, r1
 80011c8:	3308      	adds	r3, #8
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ce:	3304      	adds	r3, #4
 80011d0:	62fb      	str	r3, [r7, #44]	; 0x2c
					Gcode_Cor[point_counter].I = B2I(temp_pointer);	temp_pointer+=4;
 80011d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011d4:	68fa      	ldr	r2, [r7, #12]
 80011d6:	4413      	add	r3, r2
 80011d8:	4a42      	ldr	r2, [pc, #264]	; (80012e4 <packetRead+0x35c>)
 80011da:	8812      	ldrh	r2, [r2, #0]
 80011dc:	4610      	mov	r0, r2
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4941      	ldr	r1, [pc, #260]	; (80012e8 <packetRead+0x360>)
 80011e2:	4603      	mov	r3, r0
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	4403      	add	r3, r0
 80011e8:	00db      	lsls	r3, r3, #3
 80011ea:	440b      	add	r3, r1
 80011ec:	330c      	adds	r3, #12
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011f2:	3304      	adds	r3, #4
 80011f4:	62fb      	str	r3, [r7, #44]	; 0x2c
					Gcode_Cor[point_counter].J = B2I(temp_pointer);	temp_pointer+=4;
 80011f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011f8:	68fa      	ldr	r2, [r7, #12]
 80011fa:	4413      	add	r3, r2
 80011fc:	4a39      	ldr	r2, [pc, #228]	; (80012e4 <packetRead+0x35c>)
 80011fe:	8812      	ldrh	r2, [r2, #0]
 8001200:	4610      	mov	r0, r2
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	4938      	ldr	r1, [pc, #224]	; (80012e8 <packetRead+0x360>)
 8001206:	4603      	mov	r3, r0
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	4403      	add	r3, r0
 800120c:	00db      	lsls	r3, r3, #3
 800120e:	440b      	add	r3, r1
 8001210:	3310      	adds	r3, #16
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001216:	3304      	adds	r3, #4
 8001218:	62fb      	str	r3, [r7, #44]	; 0x2c
					point_counter++;
 800121a:	4b32      	ldr	r3, [pc, #200]	; (80012e4 <packetRead+0x35c>)
 800121c:	881b      	ldrh	r3, [r3, #0]
 800121e:	3301      	adds	r3, #1
 8001220:	b29a      	uxth	r2, r3
 8001222:	4b30      	ldr	r3, [pc, #192]	; (80012e4 <packetRead+0x35c>)
 8001224:	801a      	strh	r2, [r3, #0]
				}
				break;
 8001226:	bf00      	nop
				}
        	}while(temp_pointer < length);
 8001228:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	429a      	cmp	r2, r3
 800122e:	f6ff aec9 	blt.w	8000fc4 <packetRead+0x3c>
        	return CMD_GCODE;
 8001232:	231a      	movs	r3, #26
 8001234:	e375      	b.n	8001922 <packetRead+0x99a>
        break;

        // command control from pc
        case COMMAND_TRANSMISION:
        {
        	Robot_CommandTypedef command_id = message[1];
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	785b      	ldrb	r3, [r3, #1]
 800123a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
            switch(command_id)
 800123e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001242:	2b19      	cmp	r3, #25
 8001244:	f200 836a 	bhi.w	800191c <packetRead+0x994>
 8001248:	a201      	add	r2, pc, #4	; (adr r2, 8001250 <packetRead+0x2c8>)
 800124a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800124e:	bf00      	nop
 8001250:	080012b9 	.word	0x080012b9
 8001254:	080012f1 	.word	0x080012f1
 8001258:	08001307 	.word	0x08001307
 800125c:	080013cb 	.word	0x080013cb
 8001260:	080015d7 	.word	0x080015d7
 8001264:	080015db 	.word	0x080015db
 8001268:	080015df 	.word	0x080015df
 800126c:	080015e3 	.word	0x080015e3
 8001270:	0800191d 	.word	0x0800191d
 8001274:	0800161d 	.word	0x0800161d
 8001278:	0800163b 	.word	0x0800163b
 800127c:	080016a7 	.word	0x080016a7
 8001280:	08001775 	.word	0x08001775
 8001284:	080018ed 	.word	0x080018ed
 8001288:	080018fd 	.word	0x080018fd
 800128c:	0800191d 	.word	0x0800191d
 8001290:	0800191d 	.word	0x0800191d
 8001294:	0800191d 	.word	0x0800191d
 8001298:	0800190d 	.word	0x0800190d
 800129c:	080018dd 	.word	0x080018dd
 80012a0:	08001713 	.word	0x08001713
 80012a4:	0800173d 	.word	0x0800173d
 80012a8:	0800191d 	.word	0x0800191d
 80012ac:	0800191d 	.word	0x0800191d
 80012b0:	080017af 	.word	0x080017af
 80012b4:	0800188f 	.word	0x0800188f
            {
                // Stop now
                case CMD_STOPNOW:
                {
                    duty_cmd->robot_mode = SCARA_MODE_STOP;
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	2200      	movs	r2, #0
 80012bc:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	2201      	movs	r2, #1
 80012c2:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]
                    return CMD_STOPNOW;
 80012ca:	2300      	movs	r3, #0
 80012cc:	e329      	b.n	8001922 <packetRead+0x99a>
 80012ce:	bf00      	nop
 80012d0:	a0000000 	.word	0xa0000000
 80012d4:	3eb0c6f7 	.word	0x3eb0c6f7
 80012d8:	20004d68 	.word	0x20004d68
 80012dc:	20004d60 	.word	0x20004d60
 80012e0:	20004d70 	.word	0x20004d70
 80012e4:	20000b9c 	.word	0x20000b9c
 80012e8:	20004d74 	.word	0x20004d74
 80012ec:	358637bd 	.word	0x358637bd
                break;

                // Scan limit
                case CMD_SCAN_LIMIT:
                {
                    duty_cmd->robot_mode = SCARA_MODE_SCAN;
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	2201      	movs	r2, #1
 80012f4:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	2201      	movs	r2, #1
 80012fa:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	2200      	movs	r2, #0
 8001300:	701a      	strb	r2, [r3, #0]
                    return CMD_SCAN_LIMIT;
 8001302:	2301      	movs	r3, #1
 8001304:	e30d      	b.n	8001922 <packetRead+0x99a>
                break;

                // Move home
                case CMD_MOVE_HOME:
                {
                    if (length == 10){ // 2 int32_t number + 2 define byte
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	2b0a      	cmp	r3, #10
 800130a:	d15c      	bne.n	80013c6 <packetRead+0x43e>
                        // memcpy(&duty_cmd->v_factor, &message[temp_pointer+=8], 8);
						// memcpy(&duty_cmd->a_factor, &message[temp_pointer], 8); 
						temp_pointer = -2;
 800130c:	f06f 0301 	mvn.w	r3, #1
 8001310:	62fb      	str	r3, [r7, #44]	; 0x2c
						duty_cmd->v_factor = (*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 8001312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001314:	3304      	adds	r3, #4
 8001316:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800131a:	68fa      	ldr	r2, [r7, #12]
 800131c:	4413      	add	r3, r2
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	ee07 3a90 	vmov	s15, r3
 8001324:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001328:	ed1f 7a10 	vldr	s14, [pc, #-64]	; 80012ec <packetRead+0x364>
 800132c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001330:	ee17 0a90 	vmov	r0, s15
 8001334:	f7ff f908 	bl	8000548 <__aeabi_f2d>
 8001338:	4603      	mov	r3, r0
 800133a:	460c      	mov	r4, r1
 800133c:	683a      	ldr	r2, [r7, #0]
 800133e:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
						duty_cmd->a_factor = (*(int32_t*)(&message[temp_pointer]))*COR_INVERSE_SCALE;
 8001342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001344:	68fa      	ldr	r2, [r7, #12]
 8001346:	4413      	add	r3, r2
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	ee07 3a90 	vmov	s15, r3
 800134e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001352:	ed1f 7a1a 	vldr	s14, [pc, #-104]	; 80012ec <packetRead+0x364>
 8001356:	ee67 7a87 	vmul.f32	s15, s15, s14
 800135a:	ee17 0a90 	vmov	r0, s15
 800135e:	f7ff f8f3 	bl	8000548 <__aeabi_f2d>
 8001362:	4603      	mov	r3, r0
 8001364:	460c      	mov	r4, r1
 8001366:	683a      	ldr	r2, [r7, #0]
 8001368:	e9c2 346c 	strd	r3, r4, [r2, #432]	; 0x1b0
                    }else{
                        return CMD_ERROR;
                    }
                    duty_cmd->target_point.x = 250;
 800136c:	683a      	ldr	r2, [r7, #0]
 800136e:	f04f 0300 	mov.w	r3, #0
 8001372:	4ca7      	ldr	r4, [pc, #668]	; (8001610 <packetRead+0x688>)
 8001374:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
                    duty_cmd->target_point.y = -200;
 8001378:	683a      	ldr	r2, [r7, #0]
 800137a:	f04f 0300 	mov.w	r3, #0
 800137e:	4ca5      	ldr	r4, [pc, #660]	; (8001614 <packetRead+0x68c>)
 8001380:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
                    duty_cmd->target_point.z = 120;
 8001384:	683a      	ldr	r2, [r7, #0]
 8001386:	f04f 0300 	mov.w	r3, #0
 800138a:	4ca3      	ldr	r4, [pc, #652]	; (8001618 <packetRead+0x690>)
 800138c:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
                    duty_cmd->target_point.roll = 0;
 8001390:	683a      	ldr	r2, [r7, #0]
 8001392:	f04f 0300 	mov.w	r3, #0
 8001396:	f04f 0400 	mov.w	r4, #0
 800139a:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

                    duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	2200      	movs	r2, #0
 80013a2:	745a      	strb	r2, [r3, #17]
                    duty_cmd->space_type = DUTY_SPACE_JOINT;
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	2201      	movs	r2, #1
 80013a8:	735a      	strb	r2, [r3, #13]
                    duty_cmd->joint_type = DUTY_JOINT_4DOF;
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	2201      	movs	r2, #1
 80013ae:	73da      	strb	r2, [r3, #15]
                    duty_cmd->robot_mode = SCARA_MODE_DUTY;
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	2202      	movs	r2, #2
 80013b4:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	2201      	movs	r2, #1
 80013ba:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	2200      	movs	r2, #0
 80013c0:	701a      	strb	r2, [r3, #0]
                    return CMD_MOVE_HOME;
 80013c2:	2302      	movs	r3, #2
 80013c4:	e2ad      	b.n	8001922 <packetRead+0x99a>
                        return CMD_ERROR;
 80013c6:	2316      	movs	r3, #22
 80013c8:	e2ab      	b.n	8001922 <packetRead+0x99a>
                break;

                // Move line
                case CMD_MOVE_LINE:
                {
                    if (length == 29){ // 6 int32_t number + 3 byte number + 2 define byte
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	2b1d      	cmp	r3, #29
 80013ce:	f040 8100 	bne.w	80015d2 <packetRead+0x64a>
						//scaraSetScanFlag();
						uint8_t mode_init;
						temp_pointer = -2;
 80013d2:	f06f 0301 	mvn.w	r3, #1
 80013d6:	62fb      	str	r3, [r7, #44]	; 0x2c

						duty_cmd->target_point.x = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 80013d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013da:	3304      	adds	r3, #4
 80013dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013e0:	68fa      	ldr	r2, [r7, #12]
 80013e2:	4413      	add	r3, r2
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff f89c 	bl	8000524 <__aeabi_i2d>
 80013ec:	a386      	add	r3, pc, #536	; (adr r3, 8001608 <packetRead+0x680>)
 80013ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f2:	f7ff f901 	bl	80005f8 <__aeabi_dmul>
 80013f6:	4603      	mov	r3, r0
 80013f8:	460c      	mov	r4, r1
 80013fa:	683a      	ldr	r2, [r7, #0]
 80013fc:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
						duty_cmd->target_point.y = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 8001400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001402:	3304      	adds	r3, #4
 8001404:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001408:	68fa      	ldr	r2, [r7, #12]
 800140a:	4413      	add	r3, r2
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff f888 	bl	8000524 <__aeabi_i2d>
 8001414:	a37c      	add	r3, pc, #496	; (adr r3, 8001608 <packetRead+0x680>)
 8001416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141a:	f7ff f8ed 	bl	80005f8 <__aeabi_dmul>
 800141e:	4603      	mov	r3, r0
 8001420:	460c      	mov	r4, r1
 8001422:	683a      	ldr	r2, [r7, #0]
 8001424:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
						duty_cmd->target_point.z = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 8001428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800142a:	3304      	adds	r3, #4
 800142c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800142e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001430:	68fa      	ldr	r2, [r7, #12]
 8001432:	4413      	add	r3, r2
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff f874 	bl	8000524 <__aeabi_i2d>
 800143c:	a372      	add	r3, pc, #456	; (adr r3, 8001608 <packetRead+0x680>)
 800143e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001442:	f7ff f8d9 	bl	80005f8 <__aeabi_dmul>
 8001446:	4603      	mov	r3, r0
 8001448:	460c      	mov	r4, r1
 800144a:	683a      	ldr	r2, [r7, #0]
 800144c:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
						duty_cmd->target_point.roll = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 8001450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001452:	3304      	adds	r3, #4
 8001454:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001458:	68fa      	ldr	r2, [r7, #12]
 800145a:	4413      	add	r3, r2
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff f860 	bl	8000524 <__aeabi_i2d>
 8001464:	a368      	add	r3, pc, #416	; (adr r3, 8001608 <packetRead+0x680>)
 8001466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146a:	f7ff f8c5 	bl	80005f8 <__aeabi_dmul>
 800146e:	4603      	mov	r3, r0
 8001470:	460c      	mov	r4, r1
 8001472:	683a      	ldr	r2, [r7, #0]
 8001474:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
						duty_cmd->v_factor = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 8001478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800147a:	3304      	adds	r3, #4
 800147c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800147e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001480:	68fa      	ldr	r2, [r7, #12]
 8001482:	4413      	add	r3, r2
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff f84c 	bl	8000524 <__aeabi_i2d>
 800148c:	a35e      	add	r3, pc, #376	; (adr r3, 8001608 <packetRead+0x680>)
 800148e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001492:	f7ff f8b1 	bl	80005f8 <__aeabi_dmul>
 8001496:	4603      	mov	r3, r0
 8001498:	460c      	mov	r4, r1
 800149a:	683a      	ldr	r2, [r7, #0]
 800149c:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
						mode_init = message[temp_pointer+=4];
 80014a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014a2:	3304      	adds	r3, #4
 80014a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014a8:	68fa      	ldr	r2, [r7, #12]
 80014aa:	4413      	add	r3, r2
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	74fb      	strb	r3, [r7, #19]

						if(mode_init == DUTY_MODE_INIT_QVA){
 80014b0:	7cfb      	ldrb	r3, [r7, #19]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d117      	bne.n	80014e6 <packetRead+0x55e>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	2200      	movs	r2, #0
 80014ba:	745a      	strb	r2, [r3, #17]
							duty_cmd->a_factor = (double)(*(int32_t*)(&message[temp_pointer+=1]))*COR_INVERSE_SCALE;
 80014bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014be:	3301      	adds	r3, #1
 80014c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014c4:	68fa      	ldr	r2, [r7, #12]
 80014c6:	4413      	add	r3, r2
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff f82a 	bl	8000524 <__aeabi_i2d>
 80014d0:	a34d      	add	r3, pc, #308	; (adr r3, 8001608 <packetRead+0x680>)
 80014d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d6:	f7ff f88f 	bl	80005f8 <__aeabi_dmul>
 80014da:	4603      	mov	r3, r0
 80014dc:	460c      	mov	r4, r1
 80014de:	683a      	ldr	r2, [r7, #0]
 80014e0:	e9c2 346c 	strd	r3, r4, [r2, #432]	; 0x1b0
 80014e4:	e052      	b.n	800158c <packetRead+0x604>
						}else if(mode_init == DUTY_MODE_INIT_QVT){
 80014e6:	7cfb      	ldrb	r3, [r7, #19]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d117      	bne.n	800151c <packetRead+0x594>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	2201      	movs	r2, #1
 80014f0:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)(*(int32_t*)(&message[temp_pointer+=1]))*COR_INVERSE_SCALE;
 80014f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014f4:	3301      	adds	r3, #1
 80014f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	4413      	add	r3, r2
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff f80f 	bl	8000524 <__aeabi_i2d>
 8001506:	a340      	add	r3, pc, #256	; (adr r3, 8001608 <packetRead+0x680>)
 8001508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150c:	f7ff f874 	bl	80005f8 <__aeabi_dmul>
 8001510:	4603      	mov	r3, r0
 8001512:	460c      	mov	r4, r1
 8001514:	683a      	ldr	r2, [r7, #0]
 8001516:	e9c2 3408 	strd	r3, r4, [r2, #32]
 800151a:	e037      	b.n	800158c <packetRead+0x604>
						}else if(mode_init == DUTY_MODE_INIT_QT){
 800151c:	7cfb      	ldrb	r3, [r7, #19]
 800151e:	2b03      	cmp	r3, #3
 8001520:	d117      	bne.n	8001552 <packetRead+0x5ca>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QT;
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	2203      	movs	r2, #3
 8001526:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)(*(int32_t*)(&message[temp_pointer+=1]))*COR_INVERSE_SCALE;
 8001528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800152a:	3301      	adds	r3, #1
 800152c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800152e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001530:	68fa      	ldr	r2, [r7, #12]
 8001532:	4413      	add	r3, r2
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f7fe fff4 	bl	8000524 <__aeabi_i2d>
 800153c:	a332      	add	r3, pc, #200	; (adr r3, 8001608 <packetRead+0x680>)
 800153e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001542:	f7ff f859 	bl	80005f8 <__aeabi_dmul>
 8001546:	4603      	mov	r3, r0
 8001548:	460c      	mov	r4, r1
 800154a:	683a      	ldr	r2, [r7, #0]
 800154c:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8001550:	e01c      	b.n	800158c <packetRead+0x604>
						}else if(mode_init == DUTY_MODE_INIT_QV){
 8001552:	7cfb      	ldrb	r3, [r7, #19]
 8001554:	2b02      	cmp	r3, #2
 8001556:	d117      	bne.n	8001588 <packetRead+0x600>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QV;
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	2202      	movs	r2, #2
 800155c:	745a      	strb	r2, [r3, #17]
							duty_cmd->v_factor = (double)(*(int32_t*)(&message[temp_pointer+=1]))*COR_INVERSE_SCALE;
 800155e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001560:	3301      	adds	r3, #1
 8001562:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	4413      	add	r3, r2
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4618      	mov	r0, r3
 800156e:	f7fe ffd9 	bl	8000524 <__aeabi_i2d>
 8001572:	a325      	add	r3, pc, #148	; (adr r3, 8001608 <packetRead+0x680>)
 8001574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001578:	f7ff f83e 	bl	80005f8 <__aeabi_dmul>
 800157c:	4603      	mov	r3, r0
 800157e:	460c      	mov	r4, r1
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
 8001586:	e001      	b.n	800158c <packetRead+0x604>
						}else{
							return CMD_ERROR;
 8001588:	2316      	movs	r3, #22
 800158a:	e1ca      	b.n	8001922 <packetRead+0x99a>
						}
						duty_cmd->coordinate_type = message[temp_pointer+=4];
 800158c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800158e:	3304      	adds	r3, #4
 8001590:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001594:	68fa      	ldr	r2, [r7, #12]
 8001596:	4413      	add	r3, r2
 8001598:	781a      	ldrb	r2, [r3, #0]
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	731a      	strb	r2, [r3, #12]
						duty_cmd->trajec_type = message[temp_pointer+=1];
 800159e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a0:	3301      	adds	r3, #1
 80015a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	4413      	add	r3, r2
 80015aa:	781a      	ldrb	r2, [r3, #0]
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	741a      	strb	r2, [r3, #16]
						duty_cmd->path_type = DUTY_PATH_LINE;
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	2200      	movs	r2, #0
 80015b4:	739a      	strb	r2, [r3, #14]
						duty_cmd->space_type = DUTY_SPACE_TASK;
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	2200      	movs	r2, #0
 80015ba:	735a      	strb	r2, [r3, #13]
					}else{
						return CMD_ERROR;
					}
					duty_cmd->robot_mode = SCARA_MODE_DUTY;
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	2202      	movs	r2, #2
 80015c0:	709a      	strb	r2, [r3, #2]
					duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	2201      	movs	r2, #1
 80015c6:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	2200      	movs	r2, #0
 80015cc:	701a      	strb	r2, [r3, #0]
					return CMD_MOVE_LINE;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e1a7      	b.n	8001922 <packetRead+0x99a>
						return CMD_ERROR;
 80015d2:	2316      	movs	r3, #22
 80015d4:	e1a5      	b.n	8001922 <packetRead+0x99a>
				break;

				// Move circle
				case CMD_MOVE_CIRCLE:
				{
					return CMD_MOVE_CIRCLE;
 80015d6:	2304      	movs	r3, #4
 80015d8:	e1a3      	b.n	8001922 <packetRead+0x99a>
				break;

				// Move joint
				case CMD_MOVE_JOINT:
				{
					return CMD_MOVE_JOINT;
 80015da:	2305      	movs	r3, #5
 80015dc:	e1a1      	b.n	8001922 <packetRead+0x99a>
				break;

				// Rotate Single
				case CMD_ROTATE_SINGLE:
				{
					return CMD_ROTATE_SINGLE;
 80015de:	2306      	movs	r3, #6
 80015e0:	e19f      	b.n	8001922 <packetRead+0x99a>
				break;

				// Set output
				case CMD_OUTPUT:
				{
					if(length == 3){ // 1 byte output value + 2 byte define
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	2b03      	cmp	r3, #3
 80015e6:	d10a      	bne.n	80015fe <packetRead+0x676>
						temp_pointer = 2;
 80015e8:	2302      	movs	r3, #2
 80015ea:	62fb      	str	r3, [r7, #44]	; 0x2c
						duty_cmd->sub_para_int = message[temp_pointer];
 80015ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	4413      	add	r3, r2
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	461a      	mov	r2, r3
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	615a      	str	r2, [r3, #20]
						return CMD_OUTPUT;
 80015fa:	2307      	movs	r3, #7
 80015fc:	e191      	b.n	8001922 <packetRead+0x99a>
					}else{
						return CMD_ERROR;
 80015fe:	2316      	movs	r3, #22
 8001600:	e18f      	b.n	8001922 <packetRead+0x99a>
 8001602:	bf00      	nop
 8001604:	f3af 8000 	nop.w
 8001608:	a0000000 	.word	0xa0000000
 800160c:	3eb0c6f7 	.word	0x3eb0c6f7
 8001610:	406f4000 	.word	0x406f4000
 8001614:	c0690000 	.word	0xc0690000
 8001618:	405e0000 	.word	0x405e0000
				break;

				// Read position
				case CMD_READ_POSITION:
				{
					if(length == 3){ // 1 byte categorize read type + 2 byte define
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	2b03      	cmp	r3, #3
 8001620:	d109      	bne.n	8001636 <packetRead+0x6ae>
						temp_pointer = 2;
 8001622:	2302      	movs	r3, #2
 8001624:	62fb      	str	r3, [r7, #44]	; 0x2c
						position_type = message[temp_pointer];
 8001626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001628:	68fa      	ldr	r2, [r7, #12]
 800162a:	4413      	add	r3, r2
 800162c:	781a      	ldrb	r2, [r3, #0]
 800162e:	4ba8      	ldr	r3, [pc, #672]	; (80018d0 <packetRead+0x948>)
 8001630:	701a      	strb	r2, [r3, #0]
						return CMD_READ_POSITION;
 8001632:	2309      	movs	r3, #9
 8001634:	e175      	b.n	8001922 <packetRead+0x99a>
					}else{
						return CMD_ERROR;
 8001636:	2316      	movs	r3, #22
 8001638:	e173      	b.n	8001922 <packetRead+0x99a>
				break;			

				// Setting
				case CMD_SETTING:
				{
					if (length == 4){ // 2 byte configure + 2 byte define
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	2b04      	cmp	r3, #4
 800163e:	d130      	bne.n	80016a2 <packetRead+0x71a>
						uint8_t mode_traject;
						uint8_t mode_coordinate;
						temp_pointer = 2;
 8001640:	2302      	movs	r3, #2
 8001642:	62fb      	str	r3, [r7, #44]	; 0x2c
						mode_coordinate = message[temp_pointer++];
 8001644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001646:	1c5a      	adds	r2, r3, #1
 8001648:	62fa      	str	r2, [r7, #44]	; 0x2c
 800164a:	461a      	mov	r2, r3
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	4413      	add	r3, r2
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	757b      	strb	r3, [r7, #21]
						mode_traject = message[temp_pointer];
 8001654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001656:	68fa      	ldr	r2, [r7, #12]
 8001658:	4413      	add	r3, r2
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	753b      	strb	r3, [r7, #20]

						if (mode_coordinate == DUTY_COORDINATES_ABS) {
 800165e:	7d7b      	ldrb	r3, [r7, #21]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d103      	bne.n	800166c <packetRead+0x6e4>
							duty_cmd->coordinate_type = DUTY_COORDINATES_ABS;
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	2200      	movs	r2, #0
 8001668:	731a      	strb	r2, [r3, #12]
 800166a:	e008      	b.n	800167e <packetRead+0x6f6>
						} else if (mode_coordinate == DUTY_COORDINATES_REL) {
 800166c:	7d7b      	ldrb	r3, [r7, #21]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d103      	bne.n	800167a <packetRead+0x6f2>
							duty_cmd->coordinate_type = DUTY_COORDINATES_REL;
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	2201      	movs	r2, #1
 8001676:	731a      	strb	r2, [r3, #12]
 8001678:	e001      	b.n	800167e <packetRead+0x6f6>
						} else {
							return CMD_ERROR;
 800167a:	2316      	movs	r3, #22
 800167c:	e151      	b.n	8001922 <packetRead+0x99a>
						}

						if (mode_traject == DUTY_TRAJECTORY_LSPB) {
 800167e:	7d3b      	ldrb	r3, [r7, #20]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d103      	bne.n	800168c <packetRead+0x704>
							duty_cmd->trajec_type = DUTY_TRAJECTORY_LSPB;
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	2200      	movs	r2, #0
 8001688:	741a      	strb	r2, [r3, #16]
 800168a:	e008      	b.n	800169e <packetRead+0x716>
						} else if (mode_traject == DUTY_TRAJECTORY_SCURVE) {
 800168c:	7d3b      	ldrb	r3, [r7, #20]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d103      	bne.n	800169a <packetRead+0x712>
							duty_cmd->trajec_type = DUTY_TRAJECTORY_SCURVE;
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	2201      	movs	r2, #1
 8001696:	741a      	strb	r2, [r3, #16]
 8001698:	e001      	b.n	800169e <packetRead+0x716>
						} else {
							return CMD_ERROR;
 800169a:	2316      	movs	r3, #22
 800169c:	e141      	b.n	8001922 <packetRead+0x99a>
						}
						return CMD_SETTING;
 800169e:	230a      	movs	r3, #10
 80016a0:	e13f      	b.n	8001922 <packetRead+0x99a>
					}else{
						return CMD_ERROR;
 80016a2:	2316      	movs	r3, #22
 80016a4:	e13d      	b.n	8001922 <packetRead+0x99a>
				break;

				// Change method
				case CMD_METHOD_CHANGE:
				{
					if(length == 3){ // 1 byte configure + 2 byte define
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	2b03      	cmp	r3, #3
 80016aa:	d130      	bne.n	800170e <packetRead+0x786>
						uint8_t method;
						temp_pointer = 2;
 80016ac:	2302      	movs	r3, #2
 80016ae:	62fb      	str	r3, [r7, #44]	; 0x2c
						method = message[temp_pointer];
 80016b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	4413      	add	r3, r2
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	75bb      	strb	r3, [r7, #22]
						if (SCARA_METHOD_MANUAL == method) {
 80016ba:	7dbb      	ldrb	r3, [r7, #22]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d103      	bne.n	80016c8 <packetRead+0x740>
							duty_cmd->robot_method = SCARA_METHOD_MANUAL;
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	2200      	movs	r2, #0
 80016c4:	705a      	strb	r2, [r3, #1]
 80016c6:	e01d      	b.n	8001704 <packetRead+0x77c>
						} else if (SCARA_METHOD_SEMI_AUTO == method) {
 80016c8:	7dbb      	ldrb	r3, [r7, #22]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d103      	bne.n	80016d6 <packetRead+0x74e>
							duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	2201      	movs	r2, #1
 80016d2:	705a      	strb	r2, [r3, #1]
 80016d4:	e016      	b.n	8001704 <packetRead+0x77c>
						} else if (SCARA_METHOD_GCODE == method) {
 80016d6:	7dbb      	ldrb	r3, [r7, #22]
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d103      	bne.n	80016e4 <packetRead+0x75c>
							duty_cmd->robot_method = SCARA_METHOD_GCODE;
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	2202      	movs	r2, #2
 80016e0:	705a      	strb	r2, [r3, #1]
 80016e2:	e00f      	b.n	8001704 <packetRead+0x77c>
						}else if(SCARA_METHOD_TEST == method){
 80016e4:	7dbb      	ldrb	r3, [r7, #22]
 80016e6:	2b03      	cmp	r3, #3
 80016e8:	d103      	bne.n	80016f2 <packetRead+0x76a>
							duty_cmd->robot_method = SCARA_METHOD_TEST;
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	2203      	movs	r2, #3
 80016ee:	705a      	strb	r2, [r3, #1]
 80016f0:	e008      	b.n	8001704 <packetRead+0x77c>
						}else if(SCARA_METHOD_PICK_AND_PLACE == method){
 80016f2:	7dbb      	ldrb	r3, [r7, #22]
 80016f4:	2b04      	cmp	r3, #4
 80016f6:	d103      	bne.n	8001700 <packetRead+0x778>
							duty_cmd->robot_method = SCARA_METHOD_PICK_AND_PLACE;
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	2204      	movs	r2, #4
 80016fc:	705a      	strb	r2, [r3, #1]
 80016fe:	e001      	b.n	8001704 <packetRead+0x77c>
						}else {
							return CMD_ERROR;
 8001700:	2316      	movs	r3, #22
 8001702:	e10e      	b.n	8001922 <packetRead+0x99a>
						}
						duty_cmd->change_method = TRUE;
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	2201      	movs	r2, #1
 8001708:	701a      	strb	r2, [r3, #0]
						return CMD_METHOD_CHANGE;
 800170a:	230b      	movs	r3, #11
 800170c:	e109      	b.n	8001922 <packetRead+0x99a>
					}else{
						return CMD_ERROR;
 800170e:	2316      	movs	r3, #22
 8001710:	e107      	b.n	8001922 <packetRead+0x99a>
				break;

				// Set manual key
				case CMD_KEYBOARD:
				{
					if(length == 3){ // 1 byte output value + 2 byte define
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	2b03      	cmp	r3, #3
 8001716:	d10f      	bne.n	8001738 <packetRead+0x7b0>
						int temp_pointer = 2;
 8001718:	2302      	movs	r3, #2
 800171a:	61fb      	str	r3, [r7, #28]
						duty_cmd->keyboard = (SCARA_KeyTypeDef)message[temp_pointer];
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	68fa      	ldr	r2, [r7, #12]
 8001720:	4413      	add	r3, r2
 8001722:	781a      	ldrb	r2, [r3, #0]
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	70da      	strb	r2, [r3, #3]
						duty_cmd->robot_method = SCARA_METHOD_MANUAL;
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	2200      	movs	r2, #0
 800172c:	705a      	strb	r2, [r3, #1]
						duty_cmd->change_method = FALSE;
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	2200      	movs	r2, #0
 8001732:	701a      	strb	r2, [r3, #0]
						return CMD_KEYBOARD;
 8001734:	2314      	movs	r3, #20
 8001736:	e0f4      	b.n	8001922 <packetRead+0x99a>
					}else{
						return CMD_ERROR;
 8001738:	2316      	movs	r3, #22
 800173a:	e0f2      	b.n	8001922 <packetRead+0x99a>
				break;

				// Set manual key speed
				case CMD_KEY_SPEED:
				{
					if(length == 3){ // 1 byte key value + 2 byte define
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	2b03      	cmp	r3, #3
 8001740:	d116      	bne.n	8001770 <packetRead+0x7e8>
						int temp_pointer = 2;
 8001742:	2302      	movs	r3, #2
 8001744:	627b      	str	r3, [r7, #36]	; 0x24
						int32_t speed = (int32_t)message[temp_pointer];
 8001746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001748:	68fa      	ldr	r2, [r7, #12]
 800174a:	4413      	add	r3, r2
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	623b      	str	r3, [r7, #32]
						// check limit
						if ((speed < SHIFT_SPEED_MIN) || (speed > SHIFT_SPEED_MAX)) {
 8001750:	6a3b      	ldr	r3, [r7, #32]
 8001752:	2b00      	cmp	r3, #0
 8001754:	dd02      	ble.n	800175c <packetRead+0x7d4>
 8001756:	6a3b      	ldr	r3, [r7, #32]
 8001758:	2b0e      	cmp	r3, #14
 800175a:	dd01      	ble.n	8001760 <packetRead+0x7d8>
							return CMD_ERROR;
 800175c:	2316      	movs	r3, #22
 800175e:	e0e0      	b.n	8001922 <packetRead+0x99a>
						}
						duty_cmd->key_speed = speed;
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	6a3a      	ldr	r2, [r7, #32]
 8001764:	605a      	str	r2, [r3, #4]
						current_key_speed1 = speed;
 8001766:	4a5b      	ldr	r2, [pc, #364]	; (80018d4 <packetRead+0x94c>)
 8001768:	6a3b      	ldr	r3, [r7, #32]
 800176a:	6013      	str	r3, [r2, #0]
						return CMD_KEY_SPEED;
 800176c:	2315      	movs	r3, #21
 800176e:	e0d8      	b.n	8001922 <packetRead+0x99a>
					}else{
						return CMD_ERROR;
 8001770:	2316      	movs	r3, #22
 8001772:	e0d6      	b.n	8001922 <packetRead+0x99a>
				break;

				// Set test mode
				case CMD_MOTOR_TEST:
				{
					if(length == 3){ // 1byte key mode + 2 byte define
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	2b03      	cmp	r3, #3
 8001778:	d117      	bne.n	80017aa <packetRead+0x822>
						int temp_pointer = 2;
 800177a:	2302      	movs	r3, #2
 800177c:	61bb      	str	r3, [r7, #24]
						uint8_t test_key = message[temp_pointer];
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	68fa      	ldr	r2, [r7, #12]
 8001782:	4413      	add	r3, r2
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	75fb      	strb	r3, [r7, #23]
						if(test_key < 0 || test_key > 8){
 8001788:	7dfb      	ldrb	r3, [r7, #23]
 800178a:	2b08      	cmp	r3, #8
 800178c:	d901      	bls.n	8001792 <packetRead+0x80a>
							return CMD_ERROR;
 800178e:	2316      	movs	r3, #22
 8001790:	e0c7      	b.n	8001922 <packetRead+0x99a>
						}
						duty_cmd->test_key = test_key;
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	7dfa      	ldrb	r2, [r7, #23]
 8001796:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
						duty_cmd->robot_method = SCARA_METHOD_TEST;	
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	2203      	movs	r2, #3
 800179e:	705a      	strb	r2, [r3, #1]
						duty_cmd->change_method = FALSE;
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	2200      	movs	r2, #0
 80017a4:	701a      	strb	r2, [r3, #0]
						return CMD_MOTOR_TEST;
 80017a6:	230c      	movs	r3, #12
 80017a8:	e0bb      	b.n	8001922 <packetRead+0x99a>
					}else{
						return CMD_ERROR;
 80017aa:	2316      	movs	r3, #22
 80017ac:	e0b9      	b.n	8001922 <packetRead+0x99a>
				}
				break;

				case CMD_OBJECT_DETECTED:
				{
					if (length == 15){ // 3 int32_t number + 1 byte object type + 2 define byte
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	2b0f      	cmp	r3, #15
 80017b2:	d16a      	bne.n	800188a <packetRead+0x902>
						temp_pointer = -2;
 80017b4:	f06f 0301 	mvn.w	r3, #1
 80017b8:	62fb      	str	r3, [r7, #44]	; 0x2c
						duty_cmd->target_point.x = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 80017ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017bc:	3304      	adds	r3, #4
 80017be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	4413      	add	r3, r2
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7fe feab 	bl	8000524 <__aeabi_i2d>
 80017ce:	a33e      	add	r3, pc, #248	; (adr r3, 80018c8 <packetRead+0x940>)
 80017d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d4:	f7fe ff10 	bl	80005f8 <__aeabi_dmul>
 80017d8:	4603      	mov	r3, r0
 80017da:	460c      	mov	r4, r1
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
						duty_cmd->target_point.y = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 80017e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017e4:	3304      	adds	r3, #4
 80017e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ea:	68fa      	ldr	r2, [r7, #12]
 80017ec:	4413      	add	r3, r2
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7fe fe97 	bl	8000524 <__aeabi_i2d>
 80017f6:	a334      	add	r3, pc, #208	; (adr r3, 80018c8 <packetRead+0x940>)
 80017f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fc:	f7fe fefc 	bl	80005f8 <__aeabi_dmul>
 8001800:	4603      	mov	r3, r0
 8001802:	460c      	mov	r4, r1
 8001804:	683a      	ldr	r2, [r7, #0]
 8001806:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
						//duty_cmd->target_point.z = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
						duty_cmd->target_point.roll = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 800180a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800180c:	3304      	adds	r3, #4
 800180e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001812:	68fa      	ldr	r2, [r7, #12]
 8001814:	4413      	add	r3, r2
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4618      	mov	r0, r3
 800181a:	f7fe fe83 	bl	8000524 <__aeabi_i2d>
 800181e:	a32a      	add	r3, pc, #168	; (adr r3, 80018c8 <packetRead+0x940>)
 8001820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001824:	f7fe fee8 	bl	80005f8 <__aeabi_dmul>
 8001828:	4603      	mov	r3, r0
 800182a:	460c      	mov	r4, r1
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
						duty_cmd->target_point.object_type = message[temp_pointer+=4];
 8001832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001834:	3304      	adds	r3, #4
 8001836:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	4413      	add	r3, r2
 800183e:	781a      	ldrb	r2, [r3, #0]
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
						duty_cmd->target_point.t = (double)(TIM2->CNT);
 8001846:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800184a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184c:	4618      	mov	r0, r3
 800184e:	f7fe fe59 	bl	8000504 <__aeabi_ui2d>
 8001852:	4603      	mov	r3, r0
 8001854:	460c      	mov	r4, r1
 8001856:	683a      	ldr	r2, [r7, #0]
 8001858:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
						duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	2201      	movs	r2, #1
 8001860:	745a      	strb	r2, [r3, #17]
						duty_cmd->path_type = DUTY_PATH_LINE;
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	2200      	movs	r2, #0
 8001866:	739a      	strb	r2, [r3, #14]
						duty_cmd->space_type = DUTY_SPACE_TASK;
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	2200      	movs	r2, #0
 800186c:	735a      	strb	r2, [r3, #13]
						duty_cmd->coordinate_type = DUTY_COORDINATES_ABS;
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	2200      	movs	r2, #0
 8001872:	731a      	strb	r2, [r3, #12]
						duty_cmd->trajec_type = DUTY_TRAJECTORY_LSPB;
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	2200      	movs	r2, #0
 8001878:	741a      	strb	r2, [r3, #16]
					}else{
						return CMD_ERROR;
					}
					duty_cmd->robot_method = SCARA_METHOD_PICK_AND_PLACE;
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	2204      	movs	r2, #4
 800187e:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	2200      	movs	r2, #0
 8001884:	701a      	strb	r2, [r3, #0]
					return CMD_OBJECT_DETECTED;
 8001886:	2318      	movs	r3, #24
 8001888:	e04b      	b.n	8001922 <packetRead+0x99a>
						return CMD_ERROR;
 800188a:	2316      	movs	r3, #22
 800188c:	e049      	b.n	8001922 <packetRead+0x99a>
				}
				break;

				case CMD_SETUP_CONVEYOR_SPEED:
				{
					if (length == 6) { // 1 int32_t number + 2 define byte
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	2b06      	cmp	r3, #6
 8001892:	d114      	bne.n	80018be <packetRead+0x936>
						temp_pointer = 2;
 8001894:	2302      	movs	r3, #2
 8001896:	62fb      	str	r3, [r7, #44]	; 0x2c
						conveyor_speed = (double)(*(int32_t*)(&message[temp_pointer]))*COR_INVERSE_SCALE;
 8001898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800189a:	68fa      	ldr	r2, [r7, #12]
 800189c:	4413      	add	r3, r2
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7fe fe3f 	bl	8000524 <__aeabi_i2d>
 80018a6:	a308      	add	r3, pc, #32	; (adr r3, 80018c8 <packetRead+0x940>)
 80018a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ac:	f7fe fea4 	bl	80005f8 <__aeabi_dmul>
 80018b0:	4603      	mov	r3, r0
 80018b2:	460c      	mov	r4, r1
 80018b4:	4a08      	ldr	r2, [pc, #32]	; (80018d8 <packetRead+0x950>)
 80018b6:	e9c2 3400 	strd	r3, r4, [r2]
						return CMD_SETUP_CONVEYOR_SPEED;
 80018ba:	2319      	movs	r3, #25
 80018bc:	e031      	b.n	8001922 <packetRead+0x99a>
					}else{
						return CMD_ERROR;
 80018be:	2316      	movs	r3, #22
 80018c0:	e02f      	b.n	8001922 <packetRead+0x99a>
 80018c2:	bf00      	nop
 80018c4:	f3af 8000 	nop.w
 80018c8:	a0000000 	.word	0xa0000000
 80018cc:	3eb0c6f7 	.word	0x3eb0c6f7
 80018d0:	2000592c 	.word	0x2000592c
 80018d4:	20000000 	.word	0x20000000
 80018d8:	20000ba0 	.word	0x20000ba0
					}
				}
				break;
				case CMD_GCODE_RUN:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	2202      	movs	r2, #2
 80018e0:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	2200      	movs	r2, #0
 80018e6:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_RUN;
 80018e8:	2313      	movs	r3, #19
 80018ea:	e01a      	b.n	8001922 <packetRead+0x99a>
				}
				break;
				case CMD_GCODE_STOP:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	2202      	movs	r2, #2
 80018f0:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	2200      	movs	r2, #0
 80018f6:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_STOP;
 80018f8:	230d      	movs	r3, #13
 80018fa:	e012      	b.n	8001922 <packetRead+0x99a>
				}
				break;
				case CMD_GCODE_PAUSE:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	2202      	movs	r2, #2
 8001900:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	2200      	movs	r2, #0
 8001906:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_PAUSE;
 8001908:	230e      	movs	r3, #14
 800190a:	e00a      	b.n	8001922 <packetRead+0x99a>
				}
				break;
				case CMD_GCODE_RESUME:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	2202      	movs	r2, #2
 8001910:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	2200      	movs	r2, #0
 8001916:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_RESUME;
 8001918:	2312      	movs	r3, #18
 800191a:	e002      	b.n	8001922 <packetRead+0x99a>
				}
				break;
				//Unknow command id
				default:
				{
					return CMD_ERROR;
 800191c:	2316      	movs	r3, #22
 800191e:	e000      	b.n	8001922 <packetRead+0x99a>
        break;

        //unknow protocol id
        default:
        {
            return PROTOCOL_ERROR;
 8001920:	2317      	movs	r3, #23
        }
    }
}
 8001922:	4618      	mov	r0, r3
 8001924:	3734      	adds	r7, #52	; 0x34
 8001926:	46bd      	mov	sp, r7
 8001928:	bd90      	pop	{r4, r7, pc}
 800192a:	bf00      	nop

0800192c <commandReply>:

Robot_RespondTypedef	commandReply	(Robot_CommandTypedef cmd_type,
										DUTY_Command_TypeDef duty_cmd,
										uint8_t *detail, int32_t *detail_length) {
 800192c:	b082      	sub	sp, #8
 800192e:	b580      	push	{r7, lr}
 8001930:	b0e2      	sub	sp, #392	; 0x188
 8001932:	af2e      	add	r7, sp, #184	; 0xb8
 8001934:	4601      	mov	r1, r0
 8001936:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 800193a:	e880 000c 	stmia.w	r0, {r2, r3}
 800193e:	460b      	mov	r3, r1
 8001940:	71fb      	strb	r3, [r7, #7]
	Robot_RespondTypedef ret;

	switch(cmd_type) {
 8001942:	79fb      	ldrb	r3, [r7, #7]
 8001944:	2b1a      	cmp	r3, #26
 8001946:	f200 81a6 	bhi.w	8001c96 <commandReply+0x36a>
 800194a:	a201      	add	r2, pc, #4	; (adr r2, 8001950 <commandReply+0x24>)
 800194c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001950:	080019bd 	.word	0x080019bd
 8001954:	080019bd 	.word	0x080019bd
 8001958:	080019bd 	.word	0x080019bd
 800195c:	080019bd 	.word	0x080019bd
 8001960:	080019bd 	.word	0x080019bd
 8001964:	080019bd 	.word	0x080019bd
 8001968:	080019bd 	.word	0x080019bd
 800196c:	080019c5 	.word	0x080019c5
 8001970:	08001a3f 	.word	0x08001a3f
 8001974:	08001a73 	.word	0x08001a73
 8001978:	08001b09 	.word	0x08001b09
 800197c:	08001be5 	.word	0x08001be5
 8001980:	080019bd 	.word	0x080019bd
 8001984:	08001c25 	.word	0x08001c25
 8001988:	08001c25 	.word	0x08001c25
 800198c:	08001c25 	.word	0x08001c25
 8001990:	08001c25 	.word	0x08001c25
 8001994:	08001c25 	.word	0x08001c25
 8001998:	08001c25 	.word	0x08001c25
 800199c:	08001c25 	.word	0x08001c25
 80019a0:	08001c2d 	.word	0x08001c2d
 80019a4:	08001c35 	.word	0x08001c35
 80019a8:	08001c75 	.word	0x08001c75
 80019ac:	08001c97 	.word	0x08001c97
 80019b0:	080019bd 	.word	0x080019bd
 80019b4:	08001bdd 	.word	0x08001bdd
 80019b8:	08001bed 	.word	0x08001bed
	case CMD_MOTOR_TEST:
	case CMD_MOVE_CIRCLE:
	case CMD_MOVE_JOINT:
	case CMD_OBJECT_DETECTED:
	case CMD_ROTATE_SINGLE:
		ret = RPD_DUTY;
 80019bc:	2309      	movs	r3, #9
 80019be:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 80019c2:	e178      	b.n	8001cb6 <commandReply+0x38a>
	case CMD_OUTPUT:
		{
			if (1 == duty_cmd.sub_para_int) {
 80019c4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d110      	bne.n	80019ee <commandReply+0xc2>
				scaraSetOutput(1);
 80019cc:	2001      	movs	r0, #1
 80019ce:	f008 fe77 	bl	800a6c0 <scaraSetOutput>
				// strcpy( (char *)detail, "Output ON");
				// detail_length += 9;
				detail[(*detail_length)++] = OUTPUT_ON;
 80019d2:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	1c59      	adds	r1, r3, #1
 80019da:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80019de:	6011      	str	r1, [r2, #0]
 80019e0:	461a      	mov	r2, r3
 80019e2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80019e6:	4413      	add	r3, r2
 80019e8:	220d      	movs	r2, #13
 80019ea:	701a      	strb	r2, [r3, #0]
 80019ec:	e023      	b.n	8001a36 <commandReply+0x10a>
			} else if (0 == duty_cmd.sub_para_int) {
 80019ee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d110      	bne.n	8001a18 <commandReply+0xec>
				scaraSetOutput(0);
 80019f6:	2000      	movs	r0, #0
 80019f8:	f008 fe62 	bl	800a6c0 <scaraSetOutput>
				detail[(*detail_length)++] = OUTPUT_OFF;
 80019fc:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	1c59      	adds	r1, r3, #1
 8001a04:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001a08:	6011      	str	r1, [r2, #0]
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001a10:	4413      	add	r3, r2
 8001a12:	220e      	movs	r2, #14
 8001a14:	701a      	strb	r2, [r3, #0]
 8001a16:	e00e      	b.n	8001a36 <commandReply+0x10a>
			} else {
				// strcpy( (char *)detail, "Wrong Value");
				// detail_length += 11;
				detail[(*detail_length)++] = WRONG_OUTPUT_VALUE ;
 8001a18:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	1c59      	adds	r1, r3, #1
 8001a20:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001a24:	6011      	str	r1, [r2, #0]
 8001a26:	461a      	mov	r2, r3
 8001a28:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001a2c:	4413      	add	r3, r2
 8001a2e:	220f      	movs	r2, #15
 8001a30:	701a      	strb	r2, [r3, #0]
				return RPD_ERROR;
 8001a32:	2307      	movs	r3, #7
 8001a34:	e141      	b.n	8001cba <commandReply+0x38e>
			}
			ret = RPD_OK;
 8001a36:	2308      	movs	r3, #8
 8001a38:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		}
		break;
 8001a3c:	e13b      	b.n	8001cb6 <commandReply+0x38a>
	case CMD_READ_STATUS:
		{
			SCARA_ModeTypeDef		current_mode;
			SCARA_DutyStateTypeDef 	current_state;
			current_mode	 = scaraGetMode();
 8001a3e:	f008 fea1 	bl	800a784 <scaraGetMode>
 8001a42:	4603      	mov	r3, r0
 8001a44:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
			current_state	 = scaraGetDutyState();
 8001a48:	f008 feb4 	bl	800a7b4 <scaraGetDutyState>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
			if ( SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_state) {
 8001a52:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d107      	bne.n	8001a6a <commandReply+0x13e>
 8001a5a:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d103      	bne.n	8001a6a <commandReply+0x13e>
				ret = RPD_IDLE;
 8001a62:	2300      	movs	r3, #0
 8001a64:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			} else {
				ret = RPD_BUSY;
			}
		}
		break;
 8001a68:	e125      	b.n	8001cb6 <commandReply+0x38a>
				ret = RPD_BUSY;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8001a70:	e121      	b.n	8001cb6 <commandReply+0x38a>
	case CMD_READ_POSITION:
		{
			SCARA_PositionTypeDef position;
			if(position_type == REAL_POSITION_DATA || position_type == REAL_POSITION_DATA_PLUS_UPDATE){
 8001a72:	4b95      	ldr	r3, [pc, #596]	; (8001cc8 <commandReply+0x39c>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <commandReply+0x156>
 8001a7a:	4b93      	ldr	r3, [pc, #588]	; (8001cc8 <commandReply+0x39c>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d113      	bne.n	8001aaa <commandReply+0x17e>
				lowlayer_readTruePosition(&position);
 8001a82:	f107 0308 	add.w	r3, r7, #8
 8001a86:	4618      	mov	r0, r3
 8001a88:	f003 f87e 	bl	8004b88 <lowlayer_readTruePosition>
				kinematicForward(&position);
 8001a8c:	f107 0308 	add.w	r3, r7, #8
 8001a90:	4618      	mov	r0, r3
 8001a92:	f002 f955 	bl	8003d40 <kinematicForward>
				if(position_type == REAL_POSITION_DATA_PLUS_UPDATE){
 8001a96:	4b8c      	ldr	r3, [pc, #560]	; (8001cc8 <commandReply+0x39c>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d11e      	bne.n	8001adc <commandReply+0x1b0>
					scaraUpdatePosition(&position);
 8001a9e:	f107 0308 	add.w	r3, r7, #8
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f008 fe5e 	bl	800a764 <scaraUpdatePosition>
				if(position_type == REAL_POSITION_DATA_PLUS_UPDATE){
 8001aa8:	e018      	b.n	8001adc <commandReply+0x1b0>
				}
			}else if(position_type == ESTIMATE_POSITION_DATA){
 8001aaa:	4b87      	ldr	r3, [pc, #540]	; (8001cc8 <commandReply+0x39c>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d105      	bne.n	8001abe <commandReply+0x192>
				scaraGetPosition(&position);
 8001ab2:	f107 0308 	add.w	r3, r7, #8
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f008 fe44 	bl	800a744 <scaraGetPosition>
 8001abc:	e00e      	b.n	8001adc <commandReply+0x1b0>
			}else{
				detail[(*detail_length)++] = WRONG_READ_POSITION_TYPE;
 8001abe:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	1c59      	adds	r1, r3, #1
 8001ac6:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001aca:	6011      	str	r1, [r2, #0]
 8001acc:	461a      	mov	r2, r3
 8001ace:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001ad2:	4413      	add	r3, r2
 8001ad4:	2210      	movs	r2, #16
 8001ad6:	701a      	strb	r2, [r3, #0]
				return RPD_ERROR;
 8001ad8:	2307      	movs	r3, #7
 8001ada:	e0ee      	b.n	8001cba <commandReply+0x38e>
			}
			*detail_length = scaraPosition_packaging(detail, position);
 8001adc:	4668      	mov	r0, sp
 8001ade:	f107 0310 	add.w	r3, r7, #16
 8001ae2:	22b8      	movs	r2, #184	; 0xb8
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	f014 f981 	bl	8015dec <memcpy>
 8001aea:	f107 0308 	add.w	r3, r7, #8
 8001aee:	cb0c      	ldmia	r3, {r2, r3}
 8001af0:	f8d7 0298 	ldr.w	r0, [r7, #664]	; 0x298
 8001af4:	f008 fe94 	bl	800a820 <scaraPosition_packaging>
 8001af8:	4602      	mov	r2, r0
 8001afa:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001afe:	601a      	str	r2, [r3, #0]
			ret =  RPD_POSITION;
 8001b00:	2302      	movs	r3, #2
 8001b02:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		}
		break;
 8001b06:	e0d6      	b.n	8001cb6 <commandReply+0x38a>
	case CMD_SETTING:
		if ( DUTY_COORDINATES_ABS == duty_cmd.coordinate_type) {
 8001b08:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d10d      	bne.n	8001b2c <commandReply+0x200>
			// strcpy( (char *)detail, "ABSOLUTE.");
			// detail_length += 9;
			detail[(*detail_length)++] = ABSOLUTE;
 8001b10:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	1c59      	adds	r1, r3, #1
 8001b18:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001b1c:	6011      	str	r1, [r2, #0]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001b24:	4413      	add	r3, r2
 8001b26:	2211      	movs	r2, #17
 8001b28:	701a      	strb	r2, [r3, #0]
 8001b2a:	e020      	b.n	8001b6e <commandReply+0x242>
		} else if ( DUTY_COORDINATES_REL == duty_cmd.coordinate_type) {
 8001b2c:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d10d      	bne.n	8001b50 <commandReply+0x224>
			detail[(*detail_length)++] = RELATIVE;
 8001b34:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	1c59      	adds	r1, r3, #1
 8001b3c:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001b40:	6011      	str	r1, [r2, #0]
 8001b42:	461a      	mov	r2, r3
 8001b44:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001b48:	4413      	add	r3, r2
 8001b4a:	2212      	movs	r2, #18
 8001b4c:	701a      	strb	r2, [r3, #0]
 8001b4e:	e00e      	b.n	8001b6e <commandReply+0x242>
		} else {
			detail[(*detail_length)++] = WRONG_COORDINATE;
 8001b50:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	1c59      	adds	r1, r3, #1
 8001b58:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001b5c:	6011      	str	r1, [r2, #0]
 8001b5e:	461a      	mov	r2, r3
 8001b60:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001b64:	4413      	add	r3, r2
 8001b66:	220c      	movs	r2, #12
 8001b68:	701a      	strb	r2, [r3, #0]
			return RPD_ERROR;
 8001b6a:	2307      	movs	r3, #7
 8001b6c:	e0a5      	b.n	8001cba <commandReply+0x38e>
		}

		if ( DUTY_TRAJECTORY_LSPB == duty_cmd.trajec_type) {
 8001b6e:	f897 30e8 	ldrb.w	r3, [r7, #232]	; 0xe8
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d10d      	bne.n	8001b92 <commandReply+0x266>
			detail[(*detail_length)++] = LSPB;
 8001b76:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	1c59      	adds	r1, r3, #1
 8001b7e:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001b82:	6011      	str	r1, [r2, #0]
 8001b84:	461a      	mov	r2, r3
 8001b86:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001b8a:	4413      	add	r3, r2
 8001b8c:	2213      	movs	r2, #19
 8001b8e:	701a      	strb	r2, [r3, #0]
 8001b90:	e020      	b.n	8001bd4 <commandReply+0x2a8>
		} else if ( DUTY_TRAJECTORY_SCURVE == duty_cmd.trajec_type) {
 8001b92:	f897 30e8 	ldrb.w	r3, [r7, #232]	; 0xe8
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d10d      	bne.n	8001bb6 <commandReply+0x28a>
			detail[(*detail_length)++] = S_CURVE;
 8001b9a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	1c59      	adds	r1, r3, #1
 8001ba2:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001ba6:	6011      	str	r1, [r2, #0]
 8001ba8:	461a      	mov	r2, r3
 8001baa:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001bae:	4413      	add	r3, r2
 8001bb0:	2214      	movs	r2, #20
 8001bb2:	701a      	strb	r2, [r3, #0]
 8001bb4:	e00e      	b.n	8001bd4 <commandReply+0x2a8>
		} else {
			detail[(*detail_length)++] = WRONG_TRAJECTORY_TYPE;
 8001bb6:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	1c59      	adds	r1, r3, #1
 8001bbe:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001bc2:	6011      	str	r1, [r2, #0]
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001bca:	4413      	add	r3, r2
 8001bcc:	2205      	movs	r2, #5
 8001bce:	701a      	strb	r2, [r3, #0]
			return RPD_ERROR;
 8001bd0:	2307      	movs	r3, #7
 8001bd2:	e072      	b.n	8001cba <commandReply+0x38e>
		}		
		ret = RPD_OK;
 8001bd4:	2308      	movs	r3, #8
 8001bd6:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8001bda:	e06c      	b.n	8001cb6 <commandReply+0x38a>
	case CMD_SETUP_CONVEYOR_SPEED:
		ret = RPD_OK;
 8001bdc:	2308      	movs	r3, #8
 8001bde:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8001be2:	e068      	b.n	8001cb6 <commandReply+0x38a>
	case CMD_METHOD_CHANGE:
		ret = RPD_DUTY;
 8001be4:	2309      	movs	r3, #9
 8001be6:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8001bea:	e064      	b.n	8001cb6 <commandReply+0x38a>
	case CMD_GCODE:{
		if(point_counter == total_num_of_point){
 8001bec:	4b37      	ldr	r3, [pc, #220]	; (8001ccc <commandReply+0x3a0>)
 8001bee:	881b      	ldrh	r3, [r3, #0]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4b37      	ldr	r3, [pc, #220]	; (8001cd0 <commandReply+0x3a4>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d110      	bne.n	8001c1c <commandReply+0x2f0>
			detail[(*detail_length)++] = GCODE_TRANSFER_FINISH;
 8001bfa:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	1c59      	adds	r1, r3, #1
 8001c02:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001c06:	6011      	str	r1, [r2, #0]
 8001c08:	461a      	mov	r2, r3
 8001c0a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001c0e:	4413      	add	r3, r2
 8001c10:	221e      	movs	r2, #30
 8001c12:	701a      	strb	r2, [r3, #0]
			ret = RPD_OK;
 8001c14:	2308      	movs	r3, #8
 8001c16:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		}else{
			ret = RPD_TRANSFER;
		}
	}
	break;
 8001c1a:	e04c      	b.n	8001cb6 <commandReply+0x38a>
			ret = RPD_TRANSFER;
 8001c1c:	230a      	movs	r3, #10
 8001c1e:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	break;
 8001c22:	e048      	b.n	8001cb6 <commandReply+0x38a>
	case CMD_JOB_PUSH_MOVE_LINE:
	case CMD_JOB_PUSH_MOVE_JOINT:
	case CMD_JOB_PUSH_OUTPUT:
	case CMD_GCODE_RESUME:
	case CMD_GCODE_RUN:
		ret = RPD_DUTY;
 8001c24:	2309      	movs	r3, #9
 8001c26:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8001c2a:	e044      	b.n	8001cb6 <commandReply+0x38a>
	case CMD_KEYBOARD:
		ret = RPD_DUTY;
 8001c2c:	2309      	movs	r3, #9
 8001c2e:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8001c32:	e040      	b.n	8001cb6 <commandReply+0x38a>
	case CMD_KEY_SPEED:
		// sprintf((char*) detail, "MANUAL SPEED = %d", duty_cmd.key_speed);
		detail[(*detail_length)++] = MANUAL_SPEED;
 8001c34:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	1c59      	adds	r1, r3, #1
 8001c3c:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001c40:	6011      	str	r1, [r2, #0]
 8001c42:	461a      	mov	r2, r3
 8001c44:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001c48:	4413      	add	r3, r2
 8001c4a:	2216      	movs	r2, #22
 8001c4c:	701a      	strb	r2, [r3, #0]
		detail[(*detail_length)++] = (uint8_t)(duty_cmd.key_speed);
 8001c4e:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8001c52:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	1c59      	adds	r1, r3, #1
 8001c5a:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001c5e:	6011      	str	r1, [r2, #0]
 8001c60:	461a      	mov	r2, r3
 8001c62:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001c66:	4413      	add	r3, r2
 8001c68:	b2c2      	uxtb	r2, r0
 8001c6a:	701a      	strb	r2, [r3, #0]
		ret = RPD_OK;
 8001c6c:	2308      	movs	r3, #8
 8001c6e:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8001c72:	e020      	b.n	8001cb6 <commandReply+0x38a>
	case CMD_ERROR:
		// strcpy( (char *)detail, "Check parameters");
		detail[(*detail_length)++] = CHECK_PARAMETER;
 8001c74:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	1c59      	adds	r1, r3, #1
 8001c7c:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001c80:	6011      	str	r1, [r2, #0]
 8001c82:	461a      	mov	r2, r3
 8001c84:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001c88:	4413      	add	r3, r2
 8001c8a:	2215      	movs	r2, #21
 8001c8c:	701a      	strb	r2, [r3, #0]
		ret = RPD_ERROR;
 8001c8e:	2307      	movs	r3, #7
 8001c90:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8001c94:	e00f      	b.n	8001cb6 <commandReply+0x38a>
	default:
		// strcpy( (char *)detail, "Unknown command");
		detail[(*detail_length)++] = UNKNOW_COMMAND;
 8001c96:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	1c59      	adds	r1, r3, #1
 8001c9e:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001ca2:	6011      	str	r1, [r2, #0]
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001caa:	4413      	add	r3, r2
 8001cac:	2217      	movs	r2, #23
 8001cae:	701a      	strb	r2, [r3, #0]
		ret = RPD_ERROR;
 8001cb0:	2307      	movs	r3, #7
 8001cb2:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	}
	return ret;
 8001cb6:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	37d0      	adds	r7, #208	; 0xd0
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001cc4:	b002      	add	sp, #8
 8001cc6:	4770      	bx	lr
 8001cc8:	2000592c 	.word	0x2000592c
 8001ccc:	20000b9c 	.word	0x20000b9c
 8001cd0:	20004d70 	.word	0x20004d70

08001cd4 <commandRespond1>:

int32_t				commandRespond1	(Robot_RespondTypedef rpd,
										int32_t id_command,
										char *detail,
										int32_t detail_length,
										char *respond) {
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60b9      	str	r1, [r7, #8]
 8001cdc:	607a      	str	r2, [r7, #4]
 8001cde:	603b      	str	r3, [r7, #0]
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	73fb      	strb	r3, [r7, #15]
	int32_t out_length = 0;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	617b      	str	r3, [r7, #20]
	respond[out_length++] = 0x28;
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	1c5a      	adds	r2, r3, #1
 8001cec:	617a      	str	r2, [r7, #20]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	6a3b      	ldr	r3, [r7, #32]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	2228      	movs	r2, #40	; 0x28
 8001cf6:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = RESPONSE_TRANSMISION;
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	1c5a      	adds	r2, r3, #1
 8001cfc:	617a      	str	r2, [r7, #20]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	6a3b      	ldr	r3, [r7, #32]
 8001d02:	4413      	add	r3, r2
 8001d04:	2202      	movs	r2, #2
 8001d06:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = rpd;
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	1c5a      	adds	r2, r3, #1
 8001d0c:	617a      	str	r2, [r7, #20]
 8001d0e:	461a      	mov	r2, r3
 8001d10:	6a3b      	ldr	r3, [r7, #32]
 8001d12:	4413      	add	r3, r2
 8001d14:	7bfa      	ldrb	r2, [r7, #15]
 8001d16:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = id_command;
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	1c5a      	adds	r2, r3, #1
 8001d1c:	617a      	str	r2, [r7, #20]
 8001d1e:	461a      	mov	r2, r3
 8001d20:	6a3b      	ldr	r3, [r7, #32]
 8001d22:	4413      	add	r3, r2
 8001d24:	68ba      	ldr	r2, [r7, #8]
 8001d26:	b2d2      	uxtb	r2, r2
 8001d28:	701a      	strb	r2, [r3, #0]
	if(detail_length != 0){
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d00c      	beq.n	8001d4a <commandRespond1+0x76>
		memcpy(&respond[out_length], detail, detail_length);
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	6a3a      	ldr	r2, [r7, #32]
 8001d34:	4413      	add	r3, r2
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	6879      	ldr	r1, [r7, #4]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f014 f856 	bl	8015dec <memcpy>
		out_length += detail_length;
 8001d40:	697a      	ldr	r2, [r7, #20]
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	4413      	add	r3, r2
 8001d46:	617b      	str	r3, [r7, #20]
 8001d48:	e007      	b.n	8001d5a <commandRespond1+0x86>
	}else{
		respond[out_length++] = NONE;
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	1c5a      	adds	r2, r3, #1
 8001d4e:	617a      	str	r2, [r7, #20]
 8001d50:	461a      	mov	r2, r3
 8001d52:	6a3b      	ldr	r3, [r7, #32]
 8001d54:	4413      	add	r3, r2
 8001d56:	2224      	movs	r2, #36	; 0x24
 8001d58:	701a      	strb	r2, [r3, #0]
	}
	respond[out_length++] = 0x29;
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	1c5a      	adds	r2, r3, #1
 8001d5e:	617a      	str	r2, [r7, #20]
 8001d60:	461a      	mov	r2, r3
 8001d62:	6a3b      	ldr	r3, [r7, #32]
 8001d64:	4413      	add	r3, r2
 8001d66:	2229      	movs	r2, #41	; 0x29
 8001d68:	701a      	strb	r2, [r3, #0]

	return out_length;
 8001d6a:	697b      	ldr	r3, [r7, #20]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3718      	adds	r7, #24
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <LOG_REPORT>:
 *  line		: line code number
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t LOG_REPORT(char *message, uint16_t line) {
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b096      	sub	sp, #88	; 0x58
 8001d78:	af02      	add	r7, sp, #8
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	807b      	strh	r3, [r7, #2]
	uint8_t temp_buff[64];
	int32_t len;

	len = snprintf((char*)temp_buff, 63, "%d, %s \r\n", line, message);
 8001d80:	887a      	ldrh	r2, [r7, #2]
 8001d82:	f107 0008 	add.w	r0, r7, #8
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	4a17      	ldr	r2, [pc, #92]	; (8001dec <LOG_REPORT+0x78>)
 8001d8e:	213f      	movs	r1, #63	; 0x3f
 8001d90:	f014 ff54 	bl	8016c3c <sniprintf>
 8001d94:	64f8      	str	r0, [r7, #76]	; 0x4c
	if (-1 == len) {
 8001d96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d9c:	d101      	bne.n	8001da2 <LOG_REPORT+0x2e>
		return FALSE;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	e01f      	b.n	8001de2 <LOG_REPORT+0x6e>
	}
	ringBuff_PushArray(&uart_tx_ringbuff, temp_buff, len);
 8001da2:	f107 0308 	add.w	r3, r7, #8
 8001da6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001da8:	4619      	mov	r1, r3
 8001daa:	4811      	ldr	r0, [pc, #68]	; (8001df0 <LOG_REPORT+0x7c>)
 8001dac:	f002 fc0d 	bl	80045ca <ringBuff_PushArray>
	if (HAL_DMA_GetState(&hdma_uart4_tx) == HAL_DMA_STATE_BUSY) {
 8001db0:	4810      	ldr	r0, [pc, #64]	; (8001df4 <LOG_REPORT+0x80>)
 8001db2:	f00a f801 	bl	800bdb8 <HAL_DMA_GetState>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d101      	bne.n	8001dc0 <LOG_REPORT+0x4c>
		return TRUE;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e010      	b.n	8001de2 <LOG_REPORT+0x6e>
	}// dma busy
	uint16_t size_dma;
	size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 8001dc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dc4:	490c      	ldr	r1, [pc, #48]	; (8001df8 <LOG_REPORT+0x84>)
 8001dc6:	480a      	ldr	r0, [pc, #40]	; (8001df0 <LOG_REPORT+0x7c>)
 8001dc8:	f002 fc27 	bl	800461a <ringBuff_PopArray>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 8001dd2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	4907      	ldr	r1, [pc, #28]	; (8001df8 <LOG_REPORT+0x84>)
 8001dda:	4808      	ldr	r0, [pc, #32]	; (8001dfc <LOG_REPORT+0x88>)
 8001ddc:	f00c fd6c 	bl	800e8b8 <HAL_UART_Transmit_DMA>
	return TRUE;
 8001de0:	2301      	movs	r3, #1
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3750      	adds	r7, #80	; 0x50
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	0801b2d0 	.word	0x0801b2d0
 8001df0:	20000410 	.word	0x20000410
 8001df4:	200069f8 	.word	0x200069f8
 8001df8:	20005930 	.word	0x20005930
 8001dfc:	200069b8 	.word	0x200069b8

08001e00 <unPackPayload>:
 *  in_lenght		: lenght of input_buff
 *
 *  returns:		: lenght of output_buff
 *  				  -1 if error
 */
int32_t	unPackPayload	(uint8_t *message_buff, int32_t in_length, uint8_t*data_packet) {
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]

	int32_t data_length = in_length - 2;
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	3b02      	subs	r3, #2
 8001e10:	617b      	str	r3, [r7, #20]
	//check packet length
	if(message_buff[1] == data_length && backup_available == 0){
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	3301      	adds	r3, #1
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	461a      	mov	r2, r3
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d119      	bne.n	8001e54 <unPackPayload+0x54>
 8001e20:	4b2e      	ldr	r3, [pc, #184]	; (8001edc <unPackPayload+0xdc>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d115      	bne.n	8001e54 <unPackPayload+0x54>
		// check minimum lenght
		if (in_length < MIN_MESSAGE_LENGHT) {
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	2b03      	cmp	r3, #3
 8001e2c:	dc02      	bgt.n	8001e34 <unPackPayload+0x34>
			return -1;
 8001e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e32:	e04f      	b.n	8001ed4 <unPackPayload+0xd4>
		}

		// check start char
		if(message_buff[0] != START_CHAR){
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2b28      	cmp	r3, #40	; 0x28
 8001e3a:	d002      	beq.n	8001e42 <unPackPayload+0x42>
			return -1;
 8001e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e40:	e048      	b.n	8001ed4 <unPackPayload+0xd4>
		}
		memcpy(data_packet, &message_buff[2], data_length - RECEIVE_END_LENGTH);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	1c99      	adds	r1, r3, #2
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	3b02      	subs	r3, #2
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f013 ffcd 	bl	8015dec <memcpy>
 8001e52:	e03d      	b.n	8001ed0 <unPackPayload+0xd0>
	}else if(message_buff[1] != data_length && backup_available == 0){
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	3301      	adds	r3, #1
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d01b      	beq.n	8001e9a <unPackPayload+0x9a>
 8001e62:	4b1e      	ldr	r3, [pc, #120]	; (8001edc <unPackPayload+0xdc>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d117      	bne.n	8001e9a <unPackPayload+0x9a>
		backup_available = 1;
 8001e6a:	4b1c      	ldr	r3, [pc, #112]	; (8001edc <unPackPayload+0xdc>)
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	701a      	strb	r2, [r3, #0]
		// check start char
		if(message_buff[0] != START_CHAR){
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	2b28      	cmp	r3, #40	; 0x28
 8001e76:	d002      	beq.n	8001e7e <unPackPayload+0x7e>
			return -1;
 8001e78:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7c:	e02a      	b.n	8001ed4 <unPackPayload+0xd4>
		}
		memcpy(data_packet, &message_buff[2], data_length);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	3302      	adds	r3, #2
 8001e82:	697a      	ldr	r2, [r7, #20]
 8001e84:	4619      	mov	r1, r3
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f013 ffb0 	bl	8015dec <memcpy>
		backup_length = data_length;
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	b2da      	uxtb	r2, r3
 8001e90:	4b13      	ldr	r3, [pc, #76]	; (8001ee0 <unPackPayload+0xe0>)
 8001e92:	701a      	strb	r2, [r3, #0]
		return - 1;
 8001e94:	f04f 33ff 	mov.w	r3, #4294967295
 8001e98:	e01c      	b.n	8001ed4 <unPackPayload+0xd4>
	}else if(backup_available == 1){
 8001e9a:	4b10      	ldr	r3, [pc, #64]	; (8001edc <unPackPayload+0xdc>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d113      	bne.n	8001eca <unPackPayload+0xca>
		backup_available = 0;
 8001ea2:	4b0e      	ldr	r3, [pc, #56]	; (8001edc <unPackPayload+0xdc>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	701a      	strb	r2, [r3, #0]
		memcpy(&data_packet[backup_length], message_buff, in_length);
 8001ea8:	4b0d      	ldr	r3, [pc, #52]	; (8001ee0 <unPackPayload+0xe0>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	461a      	mov	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	68ba      	ldr	r2, [r7, #8]
 8001eb4:	68f9      	ldr	r1, [r7, #12]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f013 ff98 	bl	8015dec <memcpy>
		data_length = backup_length + in_length;
 8001ebc:	4b08      	ldr	r3, [pc, #32]	; (8001ee0 <unPackPayload+0xe0>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	617b      	str	r3, [r7, #20]
 8001ec8:	e002      	b.n	8001ed0 <unPackPayload+0xd0>
	}else{
		return - 1;
 8001eca:	f04f 33ff 	mov.w	r3, #4294967295
 8001ece:	e001      	b.n	8001ed4 <unPackPayload+0xd4>
	}


	return data_length - RECEIVE_END_LENGTH;
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	3b02      	subs	r3, #2
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3718      	adds	r7, #24
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	20005a30 	.word	0x20005a30
 8001ee0:	20005a31 	.word	0x20005a31

08001ee4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	607b      	str	r3, [r7, #4]
 8001eee:	4b0c      	ldr	r3, [pc, #48]	; (8001f20 <MX_DMA_Init+0x3c>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	4a0b      	ldr	r2, [pc, #44]	; (8001f20 <MX_DMA_Init+0x3c>)
 8001ef4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8001efa:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <MX_DMA_Init+0x3c>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f02:	607b      	str	r3, [r7, #4]
 8001f04:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8001f06:	2200      	movs	r2, #0
 8001f08:	2105      	movs	r1, #5
 8001f0a:	200f      	movs	r0, #15
 8001f0c:	f009 fc78 	bl	800b800 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001f10:	200f      	movs	r0, #15
 8001f12:	f009 fc91 	bl	800b838 <HAL_NVIC_EnableIRQ>

}
 8001f16:	bf00      	nop
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40023800 	.word	0x40023800

08001f24 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	4a07      	ldr	r2, [pc, #28]	; (8001f50 <vApplicationGetIdleTaskMemory+0x2c>)
 8001f34:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	4a06      	ldr	r2, [pc, #24]	; (8001f54 <vApplicationGetIdleTaskMemory+0x30>)
 8001f3a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f42:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8001f44:	bf00      	nop
 8001f46:	3714      	adds	r7, #20
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	20000ba8 	.word	0x20000ba8
 8001f54:	20000bfc 	.word	0x20000bfc

08001f58 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001f58:	b5b0      	push	{r4, r5, r7, lr}
 8001f5a:	b094      	sub	sp, #80	; 0x50
 8001f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
       
  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of usbTxMutex */
  osMutexDef(usbTxMutex);
 8001f5e:	2300      	movs	r3, #0
 8001f60:	64bb      	str	r3, [r7, #72]	; 0x48
 8001f62:	2300      	movs	r3, #0
 8001f64:	64fb      	str	r3, [r7, #76]	; 0x4c
  usbTxMutexHandle = osMutexCreate(osMutex(usbTxMutex));
 8001f66:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f010 fc80 	bl	8012870 <osMutexCreate>
 8001f70:	4602      	mov	r2, r0
 8001f72:	4b1d      	ldr	r3, [pc, #116]	; (8001fe8 <MX_FREERTOS_Init+0x90>)
 8001f74:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	  /* Create the queue(s) */
	  /* definition and creation of commandMail */
	  osMailQDef(commandMail, 1, DUTY_Command_TypeDef);
 8001f76:	2301      	movs	r3, #1
 8001f78:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f7a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f80:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f84:	643b      	str	r3, [r7, #64]	; 0x40
	  commandMailHandle = osMailCreate(osMailQ(commandMail), NULL);
 8001f86:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f010 fd87 	bl	8012aa0 <osMailCreate>
 8001f92:	4602      	mov	r2, r0
 8001f94:	4b15      	ldr	r3, [pc, #84]	; (8001fec <MX_FREERTOS_Init+0x94>)
 8001f96:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityHigh, 0, 2048);
 8001f98:	4b15      	ldr	r3, [pc, #84]	; (8001ff0 <MX_FREERTOS_Init+0x98>)
 8001f9a:	f107 041c 	add.w	r4, r7, #28
 8001f9e:	461d      	mov	r5, r3
 8001fa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fa4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001fa8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001fac:	f107 031c 	add.w	r3, r7, #28
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f010 fb70 	bl	8012698 <osThreadCreate>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	4b0e      	ldr	r3, [pc, #56]	; (8001ff4 <MX_FREERTOS_Init+0x9c>)
 8001fbc:	601a      	str	r2, [r3, #0]

  /* definition and creation of USB_RX_Check_ */
  osThreadDef(USB_RX_Check_, Start_USB_RX_Task, osPriorityNormal, 0, 1024);
 8001fbe:	4b0e      	ldr	r3, [pc, #56]	; (8001ff8 <MX_FREERTOS_Init+0xa0>)
 8001fc0:	463c      	mov	r4, r7
 8001fc2:	461d      	mov	r5, r3
 8001fc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fc8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001fcc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  USB_RX_Check_Handle = osThreadCreate(osThread(USB_RX_Check_), NULL);
 8001fd0:	463b      	mov	r3, r7
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f010 fb5f 	bl	8012698 <osThreadCreate>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	4b07      	ldr	r3, [pc, #28]	; (8001ffc <MX_FREERTOS_Init+0xa4>)
 8001fde:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001fe0:	bf00      	nop
 8001fe2:	3750      	adds	r7, #80	; 0x50
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bdb0      	pop	{r4, r5, r7, pc}
 8001fe8:	20005a38 	.word	0x20005a38
 8001fec:	20005a3c 	.word	0x20005a3c
 8001ff0:	0801b2ec 	.word	0x0801b2ec
 8001ff4:	20005a34 	.word	0x20005a34
 8001ff8:	0801b318 	.word	0x0801b318
 8001ffc:	20005a40 	.word	0x20005a40

08002000 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002002:	f6ad 3d14 	subw	sp, sp, #2836	; 0xb14
 8002006:	af6c      	add	r7, sp, #432	; 0x1b0
 8002008:	f107 031c 	add.w	r3, r7, #28
 800200c:	6018      	str	r0, [r3, #0]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800200e:	f013 f965 	bl	80152dc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  HAL_GPIO_WritePin(USB_SIGN_GPIO_Port, USB_SIGN_Pin, GPIO_PIN_SET); // Pull-up Resistor
 8002012:	2201      	movs	r2, #1
 8002014:	2110      	movs	r1, #16
 8002016:	48da      	ldr	r0, [pc, #872]	; (8002380 <StartDefaultTask+0x380>)
 8002018:	f00a f954 	bl	800c2c4 <HAL_GPIO_WritePin>

  osEvent 				ret_mail;
  DUTY_Command_TypeDef 	duty_cmd;
  DUTY_Command_TypeDef 	*dataMail;
  uint8_t 				isNewDuty = FALSE;
 800201c:	2300      	movs	r3, #0
 800201e:	f887 395f 	strb.w	r3, [r7, #2399]	; 0x95f
  int32_t					current_key_speed;
  double						run_time;

  SCARA_Pick_And_Place_Package Object[8];
  SCARA_Pick_And_Place_State  operation_state;
  uint8_t object_tail_pointer = 0;
 8002022:	2300      	movs	r3, #0
 8002024:	f887 393e 	strb.w	r3, [r7, #2366]	; 0x93e
  uint8_t object_head_pointer = 0;
 8002028:	2300      	movs	r3, #0
 800202a:	f887 393d 	strb.w	r3, [r7, #2365]	; 0x93d
  double state_time = 0;
 800202e:	f04f 0300 	mov.w	r3, #0
 8002032:	f04f 0400 	mov.w	r4, #0
 8002036:	f507 6213 	add.w	r2, r7, #2352	; 0x930
 800203a:	e9c2 3400 	strd	r3, r4, [r2]
  int run_point = 0;
 800203e:	2300      	movs	r3, #0
 8002040:	f8c7 392c 	str.w	r3, [r7, #2348]	; 0x92c
  const SCARA_Slot_TypeDef SLot_Cordinate[NUM_OF_OBJECT] = {
 8002044:	f107 0320 	add.w	r3, r7, #32
 8002048:	4ace      	ldr	r2, [pc, #824]	; (8002384 <StartDefaultTask+0x384>)
 800204a:	4618      	mov	r0, r3
 800204c:	4611      	mov	r1, r2
 800204e:	2390      	movs	r3, #144	; 0x90
 8002050:	461a      	mov	r2, r3
 8002052:	f013 fecb 	bl	8015dec <memcpy>
  		{203.859f, -101.616f, 0.0f} ,
		{203.859f, -101.616f, 0.0f} ,
		{203.859f, -101.616f, 0.0f}
  };

  LOG_REPORT("free_rtos.c: PROGRAM START...", __LINE__);
 8002056:	21e7      	movs	r1, #231	; 0xe7
 8002058:	48cb      	ldr	r0, [pc, #812]	; (8002388 <StartDefaultTask+0x388>)
 800205a:	f7ff fe8b 	bl	8001d74 <LOG_REPORT>

  // Init value
  current_method = scaraGetMethod();
 800205e:	f008 fb9d 	bl	800a79c <scaraGetMethod>
 8002062:	4603      	mov	r3, r0
 8002064:	f887 3957 	strb.w	r3, [r7, #2391]	; 0x957
  current_mode	 = scaraGetMode();
 8002068:	f008 fb8c 	bl	800a784 <scaraGetMode>
 800206c:	4603      	mov	r3, r0
 800206e:	f887 3956 	strb.w	r3, [r7, #2390]	; 0x956
  current_duty_state	 = scaraGetDutyState();
 8002072:	f008 fb9f 	bl	800a7b4 <scaraGetDutyState>
 8002076:	4603      	mov	r3, r0
 8002078:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955

  // Start up robot
  scaraStartup();
 800207c:	f003 fa9c 	bl	80055b8 <scaraStartup>
  osDelay(10);
 8002080:	200a      	movs	r0, #10
 8002082:	f010 fb55 	bl	8012730 <osDelay>
//   positionNext.Theta2 = PI/3;
//   positionNext.D3 = 10;
//   positionNext.Theta4 = 0;
//   positionNext.t = 0;

  positionNext.Theta1 = -1.48267f;
 8002086:	4ac1      	ldr	r2, [pc, #772]	; (800238c <StartDefaultTask+0x38c>)
 8002088:	a4b5      	add	r4, pc, #724	; (adr r4, 8002360 <StartDefaultTask+0x360>)
 800208a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800208e:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
  positionNext.Theta2 = 2.35575f;
 8002092:	4abe      	ldr	r2, [pc, #760]	; (800238c <StartDefaultTask+0x38c>)
 8002094:	a4b4      	add	r4, pc, #720	; (adr r4, 8002368 <StartDefaultTask+0x368>)
 8002096:	e9d4 3400 	ldrd	r3, r4, [r4]
 800209a:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
  positionNext.D3 = 0.034999;
 800209e:	4abb      	ldr	r2, [pc, #748]	; (800238c <StartDefaultTask+0x38c>)
 80020a0:	a4b3      	add	r4, pc, #716	; (adr r4, 8002370 <StartDefaultTask+0x370>)
 80020a2:	e9d4 3400 	ldrd	r3, r4, [r4]
 80020a6:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
  positionNext.Theta4 = 2.96586;
 80020aa:	4ab8      	ldr	r2, [pc, #736]	; (800238c <StartDefaultTask+0x38c>)
 80020ac:	a4b2      	add	r4, pc, #712	; (adr r4, 8002378 <StartDefaultTask+0x378>)
 80020ae:	e9d4 3400 	ldrd	r3, r4, [r4]
 80020b2:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
  positionNext.t = 0;
 80020b6:	4ab5      	ldr	r2, [pc, #724]	; (800238c <StartDefaultTask+0x38c>)
 80020b8:	f04f 0300 	mov.w	r3, #0
 80020bc:	f04f 0400 	mov.w	r4, #0
 80020c0:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

  kinematicForward(&positionNext);
 80020c4:	48b1      	ldr	r0, [pc, #708]	; (800238c <StartDefaultTask+0x38c>)
 80020c6:	f001 fe3b 	bl	8003d40 <kinematicForward>
  /* Infinite loop */
//Start Timer 7
	  HAL_TIM_Base_Start_IT(&htim7);
 80020ca:	48b1      	ldr	r0, [pc, #708]	; (8002390 <StartDefaultTask+0x390>)
 80020cc:	f00b ffd1 	bl	800e072 <HAL_TIM_Base_Start_IT>

  for(;;)
  {
	  /*---------Wait for Timer Trigger-----------*/
	  osSignalWait(0x01, osWaitForever); // Very Important
 80020d0:	f107 0308 	add.w	r3, r7, #8
 80020d4:	f04f 32ff 	mov.w	r2, #4294967295
 80020d8:	2101      	movs	r1, #1
 80020da:	4618      	mov	r0, r3
 80020dc:	f010 fb7c 	bl	80127d8 <osSignalWait>
	  /* 1--- Reset Value ---*/
	  respond_lenght		= 0;
 80020e0:	2300      	movs	r3, #0
 80020e2:	f8c7 3924 	str.w	r3, [r7, #2340]	; 0x924
	  respond_packed_lenght = 0;
 80020e6:	2300      	movs	r3, #0
 80020e8:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
	  infor_lenght			= 0;
 80020ec:	2300      	movs	r3, #0
 80020ee:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
	  infor_packed_lenght	= 0;
 80020f2:	2300      	movs	r3, #0
 80020f4:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
	  task_usb_lenght		= 0;
 80020f8:	2300      	movs	r3, #0
 80020fa:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
	  usb_lenght			= 0;
 80020fe:	2300      	movs	r3, #0
 8002100:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
	  total_respond_length  = 0;
 8002104:	2300      	movs	r3, #0
 8002106:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
	  detail_ptr 			= 0;
 800210a:	2300      	movs	r3, #0
 800210c:	f8c7 390c 	str.w	r3, [r7, #2316]	; 0x90c
	  // Update new position
	  memcpy(&positionPrevios, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 8002110:	4aa0      	ldr	r2, [pc, #640]	; (8002394 <StartDefaultTask+0x394>)
 8002112:	4ba1      	ldr	r3, [pc, #644]	; (8002398 <StartDefaultTask+0x398>)
 8002114:	4610      	mov	r0, r2
 8002116:	4619      	mov	r1, r3
 8002118:	23c0      	movs	r3, #192	; 0xc0
 800211a:	461a      	mov	r2, r3
 800211c:	f013 fe66 	bl	8015dec <memcpy>
	  memcpy(&positionCurrent, &positionNext, sizeof(SCARA_PositionTypeDef));
 8002120:	4a9d      	ldr	r2, [pc, #628]	; (8002398 <StartDefaultTask+0x398>)
 8002122:	4b9a      	ldr	r3, [pc, #616]	; (800238c <StartDefaultTask+0x38c>)
 8002124:	4610      	mov	r0, r2
 8002126:	4619      	mov	r1, r3
 8002128:	23c0      	movs	r3, #192	; 0xc0
 800212a:	461a      	mov	r2, r3
 800212c:	f013 fe5e 	bl	8015dec <memcpy>
//		  positionTrue.q = positionCurrent.q;
//	  }
//#endif
	  /* 2--- Check New Duty Phase ---*/
	  // Check mail
	  ret_mail = osMailGet(commandMailHandle, 0);
 8002130:	4b9a      	ldr	r3, [pc, #616]	; (800239c <StartDefaultTask+0x39c>)
 8002132:	6819      	ldr	r1, [r3, #0]
 8002134:	f607 03ec 	addw	r3, r7, #2284	; 0x8ec
 8002138:	2200      	movs	r2, #0
 800213a:	4618      	mov	r0, r3
 800213c:	f010 fd5c 	bl	8012bf8 <osMailGet>
	  if ( ret_mail.status == osEventMail) {
 8002140:	f8d7 38ec 	ldr.w	r3, [r7, #2284]	; 0x8ec
 8002144:	2b20      	cmp	r3, #32
 8002146:	d116      	bne.n	8002176 <StartDefaultTask+0x176>
		   dataMail = ret_mail.value.p;
 8002148:	f8d7 38f0 	ldr.w	r3, [r7, #2288]	; 0x8f0
 800214c:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
		   memcpy( &duty_cmd, dataMail, sizeof(DUTY_Command_TypeDef));
 8002150:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002154:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8002158:	f8d7 1908 	ldr.w	r1, [r7, #2312]	; 0x908
 800215c:	4618      	mov	r0, r3
 800215e:	f013 fe45 	bl	8015dec <memcpy>
		   isNewDuty = TRUE;
 8002162:	2301      	movs	r3, #1
 8002164:	f887 395f 	strb.w	r3, [r7, #2399]	; 0x95f
		   osMailFree(commandMailHandle, dataMail);/* free memory allocated for mail */
 8002168:	4b8c      	ldr	r3, [pc, #560]	; (800239c <StartDefaultTask+0x39c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f8d7 1908 	ldr.w	r1, [r7, #2312]	; 0x908
 8002170:	4618      	mov	r0, r3
 8002172:	f010 fdb5 	bl	8012ce0 <osMailFree>
	  }
	  if(isNewDuty) {
 8002176:	f897 395f 	ldrb.w	r3, [r7, #2399]	; 0x95f
 800217a:	2b00      	cmp	r3, #0
 800217c:	f000 835c 	beq.w	8002838 <StartDefaultTask+0x838>
		  //memset(respond, 0, 40);
		  // Check change method
		  if (duty_cmd.change_method == TRUE) {
 8002180:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	2b01      	cmp	r3, #1
 8002188:	f040 80cd 	bne.w	8002326 <StartDefaultTask+0x326>
			  //free(Object);
			  if (SCARA_METHOD_MANUAL == duty_cmd.robot_method) {
 800218c:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002190:	785b      	ldrb	r3, [r3, #1]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d11f      	bne.n	80021d6 <StartDefaultTask+0x1d6>
				  // Need add check condition idle in each method
				  current_method = SCARA_METHOD_MANUAL;
 8002196:	2300      	movs	r3, #0
 8002198:	f887 3957 	strb.w	r3, [r7, #2391]	; 0x957
				//   respond_lenght = commandRespond(RPD_OK,
				// 								duty_cmd.id_command,
				// 								"Changed MANUAL Method",
				// 								(char *)respond);
				detail_array[0] = MANUAL_METHOD;
 800219c:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 80021a0:	2218      	movs	r2, #24
 80021a2:	701a      	strb	r2, [r3, #0]
				respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80021a4:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80021a8:	6899      	ldr	r1, [r3, #8]
 80021aa:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 80021ae:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 80021b2:	4413      	add	r3, r2
 80021b4:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 80021b8:	9300      	str	r3, [sp, #0]
 80021ba:	2301      	movs	r3, #1
 80021bc:	2008      	movs	r0, #8
 80021be:	f7ff fd89 	bl	8001cd4 <commandRespond1>
 80021c2:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
				total_respond_length += respond_lenght;
 80021c6:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 80021ca:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 80021ce:	4413      	add	r3, r2
 80021d0:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
 80021d4:	e32d      	b.n	8002832 <StartDefaultTask+0x832>
			  } else if (SCARA_METHOD_SEMI_AUTO == duty_cmd.robot_method) {
 80021d6:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80021da:	785b      	ldrb	r3, [r3, #1]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d11f      	bne.n	8002220 <StartDefaultTask+0x220>
				  current_method = SCARA_METHOD_SEMI_AUTO;
 80021e0:	2301      	movs	r3, #1
 80021e2:	f887 3957 	strb.w	r3, [r7, #2391]	; 0x957
				//   respond_lenght = commandRespond(RPD_OK,
				// 								duty_cmd.id_command,
				// 								"Changed SEMI AUTO Method",
				// 								(char *)respond);
				detail_array[0] = SEMI_AUTO_METHOD;
 80021e6:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 80021ea:	2219      	movs	r2, #25
 80021ec:	701a      	strb	r2, [r3, #0]
				respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80021ee:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80021f2:	6899      	ldr	r1, [r3, #8]
 80021f4:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 80021f8:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 80021fc:	4413      	add	r3, r2
 80021fe:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	2301      	movs	r3, #1
 8002206:	2008      	movs	r0, #8
 8002208:	f7ff fd64 	bl	8001cd4 <commandRespond1>
 800220c:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
				total_respond_length += respond_lenght;
 8002210:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8002214:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8002218:	4413      	add	r3, r2
 800221a:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
 800221e:	e308      	b.n	8002832 <StartDefaultTask+0x832>
			  } else if (SCARA_METHOD_GCODE == duty_cmd.robot_method) {
 8002220:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002224:	785b      	ldrb	r3, [r3, #1]
 8002226:	2b02      	cmp	r3, #2
 8002228:	d11f      	bne.n	800226a <StartDefaultTask+0x26a>
				  current_method = SCARA_METHOD_GCODE;
 800222a:	2302      	movs	r3, #2
 800222c:	f887 3957 	strb.w	r3, [r7, #2391]	; 0x957
				//   respond_lenght = commandRespond(RPD_OK,
				// 								duty_cmd.id_command,
				// 								"Changed AUTO Method",
				// 								(char *)respond);
				detail_array[0] = AUTO_METHOD;
 8002230:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8002234:	221a      	movs	r2, #26
 8002236:	701a      	strb	r2, [r3, #0]
				respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002238:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800223c:	6899      	ldr	r1, [r3, #8]
 800223e:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 8002242:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8002246:	4413      	add	r3, r2
 8002248:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 800224c:	9300      	str	r3, [sp, #0]
 800224e:	2301      	movs	r3, #1
 8002250:	2008      	movs	r0, #8
 8002252:	f7ff fd3f 	bl	8001cd4 <commandRespond1>
 8002256:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
				total_respond_length += respond_lenght;
 800225a:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 800225e:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8002262:	4413      	add	r3, r2
 8002264:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
 8002268:	e2e3      	b.n	8002832 <StartDefaultTask+0x832>
			  }else if(SCARA_METHOD_TEST == duty_cmd.robot_method){
 800226a:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800226e:	785b      	ldrb	r3, [r3, #1]
 8002270:	2b03      	cmp	r3, #3
 8002272:	d12f      	bne.n	80022d4 <StartDefaultTask+0x2d4>
				  test_value[0] = 0;
 8002274:	f207 7324 	addw	r3, r7, #1828	; 0x724
 8002278:	2200      	movs	r2, #0
 800227a:	701a      	strb	r2, [r3, #0]
				  test_value[1] = 0;
 800227c:	f207 7324 	addw	r3, r7, #1828	; 0x724
 8002280:	2200      	movs	r2, #0
 8002282:	705a      	strb	r2, [r3, #1]
				  test_value[2] = 0;
 8002284:	f207 7324 	addw	r3, r7, #1828	; 0x724
 8002288:	2200      	movs	r2, #0
 800228a:	709a      	strb	r2, [r3, #2]
				  test_value[3] = 0;
 800228c:	f207 7324 	addw	r3, r7, #1828	; 0x724
 8002290:	2200      	movs	r2, #0
 8002292:	70da      	strb	r2, [r3, #3]
				  current_method = SCARA_METHOD_TEST;
 8002294:	2303      	movs	r3, #3
 8002296:	f887 3957 	strb.w	r3, [r7, #2391]	; 0x957
				  detail_array[0] = TEST_METHOD;
 800229a:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800229e:	221b      	movs	r2, #27
 80022a0:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80022a2:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80022a6:	6899      	ldr	r1, [r3, #8]
 80022a8:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 80022ac:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 80022b0:	4413      	add	r3, r2
 80022b2:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 80022b6:	9300      	str	r3, [sp, #0]
 80022b8:	2301      	movs	r3, #1
 80022ba:	2008      	movs	r0, #8
 80022bc:	f7ff fd0a 	bl	8001cd4 <commandRespond1>
 80022c0:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
				  total_respond_length += respond_lenght;
 80022c4:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 80022c8:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 80022cc:	4413      	add	r3, r2
 80022ce:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
 80022d2:	e2ae      	b.n	8002832 <StartDefaultTask+0x832>
			  }else if(SCARA_METHOD_PICK_AND_PLACE == duty_cmd.robot_method){
 80022d4:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80022d8:	785b      	ldrb	r3, [r3, #1]
 80022da:	2b04      	cmp	r3, #4
 80022dc:	f040 82a9 	bne.w	8002832 <StartDefaultTask+0x832>
				  current_method = SCARA_METHOD_PICK_AND_PLACE;
 80022e0:	2304      	movs	r3, #4
 80022e2:	f887 3957 	strb.w	r3, [r7, #2391]	; 0x957
				  current_duty_state = SCARA_DUTY_STATE_INIT;
 80022e6:	2301      	movs	r3, #1
 80022e8:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
				  detail_array[0] = PICK_AND_PLACE_METHOD;
 80022ec:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 80022f0:	221c      	movs	r2, #28
 80022f2:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80022f4:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80022f8:	6899      	ldr	r1, [r3, #8]
 80022fa:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 80022fe:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8002302:	4413      	add	r3, r2
 8002304:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	2301      	movs	r3, #1
 800230c:	2008      	movs	r0, #8
 800230e:	f7ff fce1 	bl	8001cd4 <commandRespond1>
 8002312:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
				  total_respond_length += respond_lenght;
 8002316:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 800231a:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 800231e:	4413      	add	r3, r2
 8002320:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
 8002324:	e285      	b.n	8002832 <StartDefaultTask+0x832>
			  }
		  } else {
			  	  // Check current method & cmd method
			  	  if (current_method == duty_cmd.robot_method) {
 8002326:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800232a:	785b      	ldrb	r3, [r3, #1]
 800232c:	f897 2957 	ldrb.w	r2, [r7, #2391]	; 0x957
 8002330:	429a      	cmp	r2, r3
 8002332:	f040 825e 	bne.w	80027f2 <StartDefaultTask+0x7f2>
				  	  switch( duty_cmd.robot_method) {
 8002336:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800233a:	785b      	ldrb	r3, [r3, #1]
 800233c:	2b04      	cmp	r3, #4
 800233e:	f200 8252 	bhi.w	80027e6 <StartDefaultTask+0x7e6>
 8002342:	a201      	add	r2, pc, #4	; (adr r2, 8002348 <StartDefaultTask+0x348>)
 8002344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002348:	080023a1 	.word	0x080023a1
 800234c:	080023f7 	.word	0x080023f7
 8002350:	080026c5 	.word	0x080026c5
 8002354:	080025af 	.word	0x080025af
 8002358:	0800274d 	.word	0x0800274d
 800235c:	f3af 8000 	nop.w
 8002360:	20000000 	.word	0x20000000
 8002364:	bff7b904 	.word	0xbff7b904
 8002368:	80000000 	.word	0x80000000
 800236c:	4002d893 	.word	0x4002d893
 8002370:	90c91080 	.word	0x90c91080
 8002374:	3fa1eb63 	.word	0x3fa1eb63
 8002378:	cec41dd2 	.word	0xcec41dd2
 800237c:	4007ba14 	.word	0x4007ba14
 8002380:	40020400 	.word	0x40020400
 8002384:	0801b418 	.word	0x0801b418
 8002388:	0801b334 	.word	0x0801b334
 800238c:	20006838 	.word	0x20006838
 8002390:	20006978 	.word	0x20006978
 8002394:	20006538 	.word	0x20006538
 8002398:	200066b8 	.word	0x200066b8
 800239c:	20005a3c 	.word	0x20005a3c
				  	  case SCARA_METHOD_MANUAL:
				  	  {
				  		  if (current_key_state == SCARA_KEY_STATE_READY) {
 80023a0:	f897 3953 	ldrb.w	r3, [r7, #2387]	; 0x953
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d10d      	bne.n	80023c4 <StartDefaultTask+0x3c4>
				  			  current_key = duty_cmd.keyboard;
 80023a8:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80023ac:	78db      	ldrb	r3, [r3, #3]
 80023ae:	f887 3952 	strb.w	r3, [r7, #2386]	; 0x952
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Init new path
 80023b2:	2301      	movs	r3, #1
 80023b4:	f887 3953 	strb.w	r3, [r7, #2387]	; 0x953
				  			  current_key_speed = duty_cmd.key_speed;
 80023b8:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f8c7 394c 	str.w	r3, [r7, #2380]	; 0x94c
				  				  	  && current_key_state == SCARA_KEY_STATE_FLOW
									  && current_key_speed == duty_cmd.key_speed) {
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Continue old path
				  		  }
				  	  }
				  	  break;
 80023c2:	e233      	b.n	800282c <StartDefaultTask+0x82c>
				  		  } else if (current_key == duty_cmd.keyboard
 80023c4:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80023c8:	78db      	ldrb	r3, [r3, #3]
 80023ca:	f897 2952 	ldrb.w	r2, [r7, #2386]	; 0x952
 80023ce:	429a      	cmp	r2, r3
 80023d0:	f040 822c 	bne.w	800282c <StartDefaultTask+0x82c>
				  				  	  && current_key_state == SCARA_KEY_STATE_FLOW
 80023d4:	f897 3953 	ldrb.w	r3, [r7, #2387]	; 0x953
 80023d8:	2b02      	cmp	r3, #2
 80023da:	f040 8227 	bne.w	800282c <StartDefaultTask+0x82c>
									  && current_key_speed == duty_cmd.key_speed) {
 80023de:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f8d7 294c 	ldr.w	r2, [r7, #2380]	; 0x94c
 80023e8:	429a      	cmp	r2, r3
 80023ea:	f040 821f 	bne.w	800282c <StartDefaultTask+0x82c>
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Continue old path
 80023ee:	2301      	movs	r3, #1
 80023f0:	f887 3953 	strb.w	r3, [r7, #2387]	; 0x953
				  	  break;
 80023f4:	e21a      	b.n	800282c <StartDefaultTask+0x82c>
				  	  case SCARA_METHOD_SEMI_AUTO:
				  	  {
						  switch( duty_cmd.robot_mode) {
 80023f6:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80023fa:	789b      	ldrb	r3, [r3, #2]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d029      	beq.n	8002454 <StartDefaultTask+0x454>
 8002400:	2b02      	cmp	r3, #2
 8002402:	d074      	beq.n	80024ee <StartDefaultTask+0x4ee>
 8002404:	2b00      	cmp	r3, #0
 8002406:	f040 80cb 	bne.w	80025a0 <StartDefaultTask+0x5a0>
						  case SCARA_MODE_STOP:
							  {
								  current_mode	 = SCARA_MODE_STOP;
 800240a:	2300      	movs	r3, #0
 800240c:	f887 3956 	strb.w	r3, [r7, #2390]	; 0x956
								//   respond_lenght = commandRespond(RPD_OK,
								// 								  duty_cmd.id_command,
								// 								  "Stop Now",
								// 								  (char *)respond);
								detail_array[0] = STOP_NOW;
 8002410:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8002414:	221f      	movs	r2, #31
 8002416:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002418:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800241c:	6899      	ldr	r1, [r3, #8]
 800241e:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 8002422:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8002426:	4413      	add	r3, r2
 8002428:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	2301      	movs	r3, #1
 8002430:	2008      	movs	r0, #8
 8002432:	f7ff fc4f 	bl	8001cd4 <commandRespond1>
 8002436:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
								total_respond_length += respond_lenght;
 800243a:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 800243e:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8002442:	4413      	add	r3, r2
 8002444:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
								  LOG_REPORT("ROBOT STOP !!!", __LINE__);
 8002448:	f44f 71ba 	mov.w	r1, #372	; 0x174
 800244c:	48b9      	ldr	r0, [pc, #740]	; (8002734 <StartDefaultTask+0x734>)
 800244e:	f7ff fc91 	bl	8001d74 <LOG_REPORT>
							  }
							  break;
 8002452:	e0ab      	b.n	80025ac <StartDefaultTask+0x5ac>

						  case SCARA_MODE_SCAN:
							  {
								  if (SCARA_MODE_DUTY == current_mode
 8002454:	f897 3956 	ldrb.w	r3, [r7, #2390]	; 0x956
 8002458:	2b02      	cmp	r3, #2
 800245a:	d126      	bne.n	80024aa <StartDefaultTask+0x4aa>
									  && SCARA_DUTY_STATE_READY == current_duty_state) {
 800245c:	f897 3955 	ldrb.w	r3, [r7, #2389]	; 0x955
 8002460:	2b00      	cmp	r3, #0
 8002462:	d122      	bne.n	80024aa <StartDefaultTask+0x4aa>
									  current_mode = SCARA_MODE_SCAN;
 8002464:	2301      	movs	r3, #1
 8002466:	f887 3956 	strb.w	r3, [r7, #2390]	; 0x956
									  current_scan_state = SCARA_SCAN_STATE_INIT;
 800246a:	2300      	movs	r3, #0
 800246c:	f887 3954 	strb.w	r3, [r7, #2388]	; 0x954
									//   respond_lenght = commandRespond(RPD_OK,
									// 								  duty_cmd.id_command,
									// 								  "Start Scan",
									// 								  (char *)respond);
									detail_array[0] = START_SCAN;
 8002470:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8002474:	2220      	movs	r2, #32
 8002476:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002478:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800247c:	6899      	ldr	r1, [r3, #8]
 800247e:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 8002482:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8002486:	4413      	add	r3, r2
 8002488:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	2301      	movs	r3, #1
 8002490:	2008      	movs	r0, #8
 8002492:	f7ff fc1f 	bl	8001cd4 <commandRespond1>
 8002496:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
									total_respond_length += respond_lenght;
 800249a:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 800249e:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 80024a2:	4413      	add	r3, r2
 80024a4:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
									respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
									total_respond_length += respond_lenght;
									  LOG_REPORT("SCAN FAIL: BUSY", __LINE__);
								  }
							  }
							  break;
 80024a8:	e080      	b.n	80025ac <StartDefaultTask+0x5ac>
									detail_array[0] = BUSY;
 80024aa:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 80024ae:	2221      	movs	r2, #33	; 0x21
 80024b0:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80024b2:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80024b6:	6899      	ldr	r1, [r3, #8]
 80024b8:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 80024bc:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 80024c0:	4413      	add	r3, r2
 80024c2:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	2301      	movs	r3, #1
 80024ca:	2007      	movs	r0, #7
 80024cc:	f7ff fc02 	bl	8001cd4 <commandRespond1>
 80024d0:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
									total_respond_length += respond_lenght;
 80024d4:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 80024d8:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 80024dc:	4413      	add	r3, r2
 80024de:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
									  LOG_REPORT("SCAN FAIL: BUSY", __LINE__);
 80024e2:	f240 118d 	movw	r1, #397	; 0x18d
 80024e6:	4894      	ldr	r0, [pc, #592]	; (8002738 <StartDefaultTask+0x738>)
 80024e8:	f7ff fc44 	bl	8001d74 <LOG_REPORT>
							  break;
 80024ec:	e05e      	b.n	80025ac <StartDefaultTask+0x5ac>

						  case SCARA_MODE_DUTY:
							  {
								  if (SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_duty_state) {
 80024ee:	f897 3956 	ldrb.w	r3, [r7, #2390]	; 0x956
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d131      	bne.n	800255a <StartDefaultTask+0x55a>
 80024f6:	f897 3955 	ldrb.w	r3, [r7, #2389]	; 0x955
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d12d      	bne.n	800255a <StartDefaultTask+0x55a>
									  //scaraSetScanFlag();
//									  if(duty_cmd.modeInit_type == DUTY_MODE_INIT_LINEAR){
//										  current_method = SCARA_METHOD_AUTO;
//									  }
									  if (scaraIsScanLimit()) {
 80024fe:	f008 f965 	bl	800a7cc <scaraIsScanLimit>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d006      	beq.n	8002516 <StartDefaultTask+0x516>
										  current_mode	 = SCARA_MODE_DUTY;
 8002508:	2302      	movs	r3, #2
 800250a:	f887 3956 	strb.w	r3, [r7, #2390]	; 0x956
										  current_duty_state	 = SCARA_DUTY_STATE_INIT;
 800250e:	2301      	movs	r3, #1
 8002510:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
									  if (scaraIsScanLimit()) {
 8002514:	e043      	b.n	800259e <StartDefaultTask+0x59e>
									  } else {
										//   respond_lenght = commandRespond(RPD_ERROR,
										// 								  duty_cmd.id_command,
										// 								  "Has Not Scan Yet.",
										// 								  (char *)respond);
										detail_array[0] = NOT_SCAN;
 8002516:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800251a:	2222      	movs	r2, #34	; 0x22
 800251c:	701a      	strb	r2, [r3, #0]
										respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800251e:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002522:	6899      	ldr	r1, [r3, #8]
 8002524:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 8002528:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 800252c:	4413      	add	r3, r2
 800252e:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	2301      	movs	r3, #1
 8002536:	2007      	movs	r0, #7
 8002538:	f7ff fbcc 	bl	8001cd4 <commandRespond1>
 800253c:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
										total_respond_length += respond_lenght;
 8002540:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8002544:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8002548:	4413      	add	r3, r2
 800254a:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
										  LOG_REPORT("MOVE FAIL:NOT SCAN", __LINE__);
 800254e:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8002552:	487a      	ldr	r0, [pc, #488]	; (800273c <StartDefaultTask+0x73c>)
 8002554:	f7ff fc0e 	bl	8001d74 <LOG_REPORT>
									  if (scaraIsScanLimit()) {
 8002558:	e021      	b.n	800259e <StartDefaultTask+0x59e>
								  } else {
									//   respond_lenght	= commandRespond(RPD_ERROR,
									// 									  duty_cmd.id_command,
									// 									  "Busy.",
									// 									  (char *)respond);
									detail_array[0] = BUSY;
 800255a:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800255e:	2221      	movs	r2, #33	; 0x21
 8002560:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002562:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002566:	6899      	ldr	r1, [r3, #8]
 8002568:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 800256c:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8002570:	4413      	add	r3, r2
 8002572:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8002576:	9300      	str	r3, [sp, #0]
 8002578:	2301      	movs	r3, #1
 800257a:	2007      	movs	r0, #7
 800257c:	f7ff fbaa 	bl	8001cd4 <commandRespond1>
 8002580:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
									total_respond_length += respond_lenght;
 8002584:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8002588:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 800258c:	4413      	add	r3, r2
 800258e:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
									  LOG_REPORT("MOVE FAIL:BUSY", __LINE__);
 8002592:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8002596:	486a      	ldr	r0, [pc, #424]	; (8002740 <StartDefaultTask+0x740>)
 8002598:	f7ff fbec 	bl	8001d74 <LOG_REPORT>
								  }
							  }
							  break;
 800259c:	e006      	b.n	80025ac <StartDefaultTask+0x5ac>
 800259e:	e005      	b.n	80025ac <StartDefaultTask+0x5ac>
						  default:
							  {
								  LOG_REPORT("CMD Error Mode !!!", __LINE__);
 80025a0:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 80025a4:	4867      	ldr	r0, [pc, #412]	; (8002744 <StartDefaultTask+0x744>)
 80025a6:	f7ff fbe5 	bl	8001d74 <LOG_REPORT>
							  }
						  }
					  }
					  break;
 80025aa:	e142      	b.n	8002832 <StartDefaultTask+0x832>
 80025ac:	e141      	b.n	8002832 <StartDefaultTask+0x832>
					  case SCARA_METHOD_TEST:
					  {
						  test_value[0] = 0;
 80025ae:	f207 7324 	addw	r3, r7, #1828	; 0x724
 80025b2:	2200      	movs	r2, #0
 80025b4:	701a      	strb	r2, [r3, #0]
						  test_value[1] = 0;
 80025b6:	f207 7324 	addw	r3, r7, #1828	; 0x724
 80025ba:	2200      	movs	r2, #0
 80025bc:	705a      	strb	r2, [r3, #1]
						  test_value[2] = 0;
 80025be:	f207 7324 	addw	r3, r7, #1828	; 0x724
 80025c2:	2200      	movs	r2, #0
 80025c4:	709a      	strb	r2, [r3, #2]
						  test_value[3] = 0;
 80025c6:	f207 7324 	addw	r3, r7, #1828	; 0x724
 80025ca:	2200      	movs	r2, #0
 80025cc:	70da      	strb	r2, [r3, #3]
						  switch (duty_cmd.test_key)
 80025ce:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80025d2:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 80025d6:	2b07      	cmp	r3, #7
 80025d8:	d872      	bhi.n	80026c0 <StartDefaultTask+0x6c0>
 80025da:	a201      	add	r2, pc, #4	; (adr r2, 80025e0 <StartDefaultTask+0x5e0>)
 80025dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025e0:	08002601 	.word	0x08002601
 80025e4:	08002619 	.word	0x08002619
 80025e8:	08002631 	.word	0x08002631
 80025ec:	08002649 	.word	0x08002649
 80025f0:	08002661 	.word	0x08002661
 80025f4:	08002679 	.word	0x08002679
 80025f8:	08002691 	.word	0x08002691
 80025fc:	080026a9 	.word	0x080026a9
						  {
						  case SCARA_TEST_MOTOR1_POS:
							 test_value[duty_cmd.test_key/2] = 5;
 8002600:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002604:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002608:	085b      	lsrs	r3, r3, #1
 800260a:	b2db      	uxtb	r3, r3
 800260c:	461a      	mov	r2, r3
 800260e:	f207 7324 	addw	r3, r7, #1828	; 0x724
 8002612:	2105      	movs	r1, #5
 8002614:	5499      	strb	r1, [r3, r2]
						  break;
 8002616:	e054      	b.n	80026c2 <StartDefaultTask+0x6c2>
						  case SCARA_TEST_MOTOR1_NEG:
							 test_value[duty_cmd.test_key/2] = -5;
 8002618:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800261c:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002620:	085b      	lsrs	r3, r3, #1
 8002622:	b2db      	uxtb	r3, r3
 8002624:	461a      	mov	r2, r3
 8002626:	f207 7324 	addw	r3, r7, #1828	; 0x724
 800262a:	21fb      	movs	r1, #251	; 0xfb
 800262c:	5499      	strb	r1, [r3, r2]
						  break;
 800262e:	e048      	b.n	80026c2 <StartDefaultTask+0x6c2>
						  case SCARA_TEST_MOTOR2_POS:
							 test_value[duty_cmd.test_key/2] = 5;
 8002630:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002634:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002638:	085b      	lsrs	r3, r3, #1
 800263a:	b2db      	uxtb	r3, r3
 800263c:	461a      	mov	r2, r3
 800263e:	f207 7324 	addw	r3, r7, #1828	; 0x724
 8002642:	2105      	movs	r1, #5
 8002644:	5499      	strb	r1, [r3, r2]
						  break;
 8002646:	e03c      	b.n	80026c2 <StartDefaultTask+0x6c2>
						  case SCARA_TEST_MOTOR2_NEG:
							 test_value[duty_cmd.test_key/2] = -5;
 8002648:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800264c:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002650:	085b      	lsrs	r3, r3, #1
 8002652:	b2db      	uxtb	r3, r3
 8002654:	461a      	mov	r2, r3
 8002656:	f207 7324 	addw	r3, r7, #1828	; 0x724
 800265a:	21fb      	movs	r1, #251	; 0xfb
 800265c:	5499      	strb	r1, [r3, r2]
						  break;
 800265e:	e030      	b.n	80026c2 <StartDefaultTask+0x6c2>
						  case SCARA_TEST_MOTOR3_POS:
							 test_value[duty_cmd.test_key/2] = 5;
 8002660:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002664:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002668:	085b      	lsrs	r3, r3, #1
 800266a:	b2db      	uxtb	r3, r3
 800266c:	461a      	mov	r2, r3
 800266e:	f207 7324 	addw	r3, r7, #1828	; 0x724
 8002672:	2105      	movs	r1, #5
 8002674:	5499      	strb	r1, [r3, r2]
						  break;
 8002676:	e024      	b.n	80026c2 <StartDefaultTask+0x6c2>
						  case SCARA_TEST_MOTOR3_NEG:
							 test_value[duty_cmd.test_key/2] = -5;
 8002678:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800267c:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002680:	085b      	lsrs	r3, r3, #1
 8002682:	b2db      	uxtb	r3, r3
 8002684:	461a      	mov	r2, r3
 8002686:	f207 7324 	addw	r3, r7, #1828	; 0x724
 800268a:	21fb      	movs	r1, #251	; 0xfb
 800268c:	5499      	strb	r1, [r3, r2]
						  break;
 800268e:	e018      	b.n	80026c2 <StartDefaultTask+0x6c2>
						  case SCARA_TEST_MOTOR4_POS:
							 test_value[duty_cmd.test_key/2] = 10;
 8002690:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002694:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002698:	085b      	lsrs	r3, r3, #1
 800269a:	b2db      	uxtb	r3, r3
 800269c:	461a      	mov	r2, r3
 800269e:	f207 7324 	addw	r3, r7, #1828	; 0x724
 80026a2:	210a      	movs	r1, #10
 80026a4:	5499      	strb	r1, [r3, r2]
						  break;
 80026a6:	e00c      	b.n	80026c2 <StartDefaultTask+0x6c2>
						  case SCARA_TEST_MOTOR4_NEG:
							 test_value[duty_cmd.test_key/2] = -10;
 80026a8:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80026ac:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 80026b0:	085b      	lsrs	r3, r3, #1
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	461a      	mov	r2, r3
 80026b6:	f207 7324 	addw	r3, r7, #1828	; 0x724
 80026ba:	21f6      	movs	r1, #246	; 0xf6
 80026bc:	5499      	strb	r1, [r3, r2]
						  break;						  
 80026be:	e000      	b.n	80026c2 <StartDefaultTask+0x6c2>
						  default:
							  break;
 80026c0:	bf00      	nop
						  }
					  }
					  break;
 80026c2:	e0b6      	b.n	8002832 <StartDefaultTask+0x832>
				  	  case SCARA_METHOD_GCODE:
				  	  {
				  		  if(current_duty_state == SCARA_DUTY_STATE_READY && duty_cmd.id_command == CMD_GCODE_RUN){
 80026c4:	f897 3955 	ldrb.w	r3, [r7, #2389]	; 0x955
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d10b      	bne.n	80026e4 <StartDefaultTask+0x6e4>
 80026cc:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	2b13      	cmp	r3, #19
 80026d4:	d106      	bne.n	80026e4 <StartDefaultTask+0x6e4>
				  			  run_point = 1;
 80026d6:	2301      	movs	r3, #1
 80026d8:	f8c7 392c 	str.w	r3, [r7, #2348]	; 0x92c
				  			  current_duty_state = SCARA_DUTY_STATE_OPERATION;
 80026dc:	2304      	movs	r3, #4
 80026de:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
 80026e2:	e025      	b.n	8002730 <StartDefaultTask+0x730>
				  		  }else if(current_duty_state == SCARA_DUTY_STATE_INIT && duty_cmd.id_command == CMD_GCODE_RESUME){
 80026e4:	f897 3955 	ldrb.w	r3, [r7, #2389]	; 0x955
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d10e      	bne.n	800270a <StartDefaultTask+0x70a>
 80026ec:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	2b12      	cmp	r3, #18
 80026f4:	d109      	bne.n	800270a <StartDefaultTask+0x70a>
				  			  lowlayer_readTruePosition(&positionCurrent);
 80026f6:	4814      	ldr	r0, [pc, #80]	; (8002748 <StartDefaultTask+0x748>)
 80026f8:	f002 fa46 	bl	8004b88 <lowlayer_readTruePosition>
				  			  kinematicForward(&positionCurrent);
 80026fc:	4812      	ldr	r0, [pc, #72]	; (8002748 <StartDefaultTask+0x748>)
 80026fe:	f001 fb1f 	bl	8003d40 <kinematicForward>
				  			  current_duty_state = SCARA_DUTY_STATE_INIT;
 8002702:	2301      	movs	r3, #1
 8002704:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
 8002708:	e012      	b.n	8002730 <StartDefaultTask+0x730>
				  		  }else if(duty_cmd.id_command == CMD_GCODE_STOP){
 800270a:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	2b0d      	cmp	r3, #13
 8002712:	d103      	bne.n	800271c <StartDefaultTask+0x71c>
				  			  current_duty_state = SCARA_DUTY_STATE_READY;
 8002714:	2300      	movs	r3, #0
 8002716:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
				  		  }else if(duty_cmd.id_command == CMD_GCODE_PAUSE){
				  			  current_duty_state = SCARA_DUTY_STATE_INIT;
				  		  }
				  	  }
				  	  break;
 800271a:	e089      	b.n	8002830 <StartDefaultTask+0x830>
				  		  }else if(duty_cmd.id_command == CMD_GCODE_PAUSE){
 800271c:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	2b0e      	cmp	r3, #14
 8002724:	f040 8084 	bne.w	8002830 <StartDefaultTask+0x830>
				  			  current_duty_state = SCARA_DUTY_STATE_INIT;
 8002728:	2301      	movs	r3, #1
 800272a:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
				  	  break;
 800272e:	e07f      	b.n	8002830 <StartDefaultTask+0x830>
 8002730:	e07e      	b.n	8002830 <StartDefaultTask+0x830>
 8002732:	bf00      	nop
 8002734:	0801b354 	.word	0x0801b354
 8002738:	0801b364 	.word	0x0801b364
 800273c:	0801b374 	.word	0x0801b374
 8002740:	0801b388 	.word	0x0801b388
 8002744:	0801b398 	.word	0x0801b398
 8002748:	200066b8 	.word	0x200066b8
				  	  case SCARA_METHOD_PICK_AND_PLACE:{
				  		  memcpy(&Object[object_head_pointer].object_position, &duty_cmd.target_point, sizeof(SCARA_PositionTypeDef));
 800274c:	f897 393d 	ldrb.w	r3, [r7, #2365]	; 0x93d
 8002750:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8002754:	21c8      	movs	r1, #200	; 0xc8
 8002756:	fb01 f303 	mul.w	r3, r1, r3
 800275a:	18d0      	adds	r0, r2, r3
 800275c:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002760:	3328      	adds	r3, #40	; 0x28
 8002762:	22c0      	movs	r2, #192	; 0xc0
 8002764:	4619      	mov	r1, r3
 8002766:	f013 fb41 	bl	8015dec <memcpy>
				  		  Object[object_head_pointer].timer_value = (uint16_t)duty_cmd.target_point.t;
 800276a:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800276e:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8002772:	f897 593d 	ldrb.w	r5, [r7, #2365]	; 0x93d
 8002776:	4618      	mov	r0, r3
 8002778:	4621      	mov	r1, r4
 800277a:	f7fe fa15 	bl	8000ba8 <__aeabi_d2uiz>
 800277e:	4603      	mov	r3, r0
 8002780:	b299      	uxth	r1, r3
 8002782:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8002786:	23c8      	movs	r3, #200	; 0xc8
 8002788:	fb03 f305 	mul.w	r3, r3, r5
 800278c:	4413      	add	r3, r2
 800278e:	33c0      	adds	r3, #192	; 0xc0
 8002790:	460a      	mov	r2, r1
 8002792:	801a      	strh	r2, [r3, #0]
				  		  object_head_pointer = (object_head_pointer+1)%8;
 8002794:	f897 393d 	ldrb.w	r3, [r7, #2365]	; 0x93d
 8002798:	3301      	adds	r3, #1
 800279a:	425a      	negs	r2, r3
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	f002 0207 	and.w	r2, r2, #7
 80027a4:	bf58      	it	pl
 80027a6:	4253      	negpl	r3, r2
 80027a8:	f887 393d 	strb.w	r3, [r7, #2365]	; 0x93d
				  		  detail_array[0] = OBJECT_DETECTED;
 80027ac:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 80027b0:	221d      	movs	r2, #29
 80027b2:	701a      	strb	r2, [r3, #0]
						  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80027b4:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80027b8:	6899      	ldr	r1, [r3, #8]
 80027ba:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 80027be:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 80027c2:	4413      	add	r3, r2
 80027c4:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 80027c8:	9300      	str	r3, [sp, #0]
 80027ca:	2301      	movs	r3, #1
 80027cc:	2008      	movs	r0, #8
 80027ce:	f7ff fa81 	bl	8001cd4 <commandRespond1>
 80027d2:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
						  total_respond_length += respond_lenght;
 80027d6:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 80027da:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 80027de:	4413      	add	r3, r2
 80027e0:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
				  	  }
				  	  break;
 80027e4:	e025      	b.n	8002832 <StartDefaultTask+0x832>
				  	  default:
				  	  {
				  		  LOG_REPORT("CMD Error Method !!!", __LINE__);
 80027e6:	f240 11f9 	movw	r1, #505	; 0x1f9
 80027ea:	48c9      	ldr	r0, [pc, #804]	; (8002b10 <StartDefaultTask+0xb10>)
 80027ec:	f7ff fac2 	bl	8001d74 <LOG_REPORT>
 80027f0:	e01f      	b.n	8002832 <StartDefaultTask+0x832>
			  	  } else {
					//   respond_lenght = commandRespond(RPD_ERROR,
					// 								duty_cmd.id_command,
					// 								"METHOD isn't correct",
					// 								(char *)respond);
					detail_array[0] = INCORRECT_METHOD;
 80027f2:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 80027f6:	2223      	movs	r2, #35	; 0x23
 80027f8:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80027fa:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80027fe:	6899      	ldr	r1, [r3, #8]
 8002800:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 8002804:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8002808:	4413      	add	r3, r2
 800280a:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	2301      	movs	r3, #1
 8002812:	2007      	movs	r0, #7
 8002814:	f7ff fa5e 	bl	8001cd4 <commandRespond1>
 8002818:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
					total_respond_length += respond_lenght;
 800281c:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8002820:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8002824:	4413      	add	r3, r2
 8002826:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
 800282a:	e002      	b.n	8002832 <StartDefaultTask+0x832>
				  	  break;
 800282c:	bf00      	nop
 800282e:	e000      	b.n	8002832 <StartDefaultTask+0x832>
				  	  break;
 8002830:	bf00      	nop
			  	  }

			  }
		  isNewDuty = FALSE;
 8002832:	2300      	movs	r3, #0
 8002834:	f887 395f 	strb.w	r3, [r7, #2399]	; 0x95f
	  }

	  /* 3--- Execute Phase ---*/
	  switch(current_method) {
 8002838:	f897 3957 	ldrb.w	r3, [r7, #2391]	; 0x957
 800283c:	2b04      	cmp	r3, #4
 800283e:	f200 8720 	bhi.w	8003682 <StartDefaultTask+0x1682>
 8002842:	a201      	add	r2, pc, #4	; (adr r2, 8002848 <StartDefaultTask+0x848>)
 8002844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002848:	0800285d 	.word	0x0800285d
 800284c:	08002a0b 	.word	0x08002a0b
 8002850:	08002df7 	.word	0x08002df7
 8002854:	08003067 	.word	0x08003067
 8002858:	0800308d 	.word	0x0800308d
	  case SCARA_METHOD_MANUAL:
	  {
		  switch( current_key_state) {
 800285c:	f897 3953 	ldrb.w	r3, [r7, #2387]	; 0x953
 8002860:	2b03      	cmp	r3, #3
 8002862:	f200 870b 	bhi.w	800367c <StartDefaultTask+0x167c>
 8002866:	a201      	add	r2, pc, #4	; (adr r2, 800286c <StartDefaultTask+0x86c>)
 8002868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800286c:	08002a05 	.word	0x08002a05
 8002870:	0800287d 	.word	0x0800287d
 8002874:	080028eb 	.word	0x080028eb
 8002878:	080029c7 	.word	0x080029c7
		  case SCARA_KEY_STATE_READY:
			  /* Wait for application keyboard , do nothing*/
		  break;
		  case SCARA_KEY_STATE_INIT:
		  {
			  if (scaraKeyInit1(current_key, current_key_speed1) == SCARA_STATUS_OK) {
 800287c:	4ba5      	ldr	r3, [pc, #660]	; (8002b14 <StartDefaultTask+0xb14>)
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	f897 3952 	ldrb.w	r3, [r7, #2386]	; 0x952
 8002884:	4611      	mov	r1, r2
 8002886:	4618      	mov	r0, r3
 8002888:	f008 f8ba 	bl	800aa00 <scaraKeyInit1>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d127      	bne.n	80028e2 <StartDefaultTask+0x8e2>
				  run_time = 0;
 8002892:	f04f 0300 	mov.w	r3, #0
 8002896:	f04f 0400 	mov.w	r4, #0
 800289a:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 800289e:	e9c2 3400 	strd	r3, r4, [r2]
				  current_key_state = SCARA_KEY_STATE_FLOW;
 80028a2:	2302      	movs	r3, #2
 80028a4:	f887 3953 	strb.w	r3, [r7, #2387]	; 0x953
// #endif
// 				  infor_lenght 		= commandRespond(RPD_START,
// 													  0,
// 													  (char *)position,
// 													  (char *)infor);
					detail_array[0] = NONE;
 80028a8:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 80028ac:	2224      	movs	r2, #36	; 0x24
 80028ae:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_START, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80028b0:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80028b4:	6899      	ldr	r1, [r3, #8]
 80028b6:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 80028ba:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 80028be:	4413      	add	r3, r2
 80028c0:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 80028c4:	9300      	str	r3, [sp, #0]
 80028c6:	2301      	movs	r3, #1
 80028c8:	2003      	movs	r0, #3
 80028ca:	f7ff fa03 	bl	8001cd4 <commandRespond1>
 80028ce:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
					total_respond_length += respond_lenght;
 80028d2:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 80028d6:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 80028da:	4413      	add	r3, r2
 80028dc:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
			  } else {
				  current_key_state = SCARA_KEY_STATE_READY;
			  }
		  }
		  break;
 80028e0:	e091      	b.n	8002a06 <StartDefaultTask+0xa06>
				  current_key_state = SCARA_KEY_STATE_READY;
 80028e2:	2300      	movs	r3, #0
 80028e4:	f887 3953 	strb.w	r3, [r7, #2387]	; 0x953
		  break;
 80028e8:	e08d      	b.n	8002a06 <StartDefaultTask+0xa06>
		  case SCARA_KEY_STATE_FLOW:
		  {
			  SCARA_StatusTypeDef status;
			  // Increase run time
			  run_time += T_SAMPLING;
 80028ea:	a387      	add	r3, pc, #540	; (adr r3, 8002b08 <StartDefaultTask+0xb08>)
 80028ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f0:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 80028f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80028f8:	f7fd fcc8 	bl	800028c <__adddf3>
 80028fc:	4603      	mov	r3, r0
 80028fe:	460c      	mov	r4, r1
 8002900:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 8002904:	e9c2 3400 	strd	r3, r4, [r2]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 8002908:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800290c:	ed93 0b00 	vldr	d0, [r3]
 8002910:	f007 ff68 	bl	800a7e4 <scaraIsFinish>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <StartDefaultTask+0x922>
				  current_key_state = SCARA_KEY_STATE_FINISH;// Key Done
 800291a:	2303      	movs	r3, #3
 800291c:	f887 3953 	strb.w	r3, [r7, #2387]	; 0x953
					total_respond_length += respond_lenght;
					  LOG_REPORT("STOP KEY", __LINE__);
				  }
			  }
		  }
		  break;
 8002920:	e071      	b.n	8002a06 <StartDefaultTask+0xa06>
				  status = scaraFlowDuty(run_time, &positionNext, positionCurrent);
 8002922:	4c7d      	ldr	r4, [pc, #500]	; (8002b18 <StartDefaultTask+0xb18>)
 8002924:	4668      	mov	r0, sp
 8002926:	f104 0308 	add.w	r3, r4, #8
 800292a:	22b8      	movs	r2, #184	; 0xb8
 800292c:	4619      	mov	r1, r3
 800292e:	f013 fa5d 	bl	8015dec <memcpy>
 8002932:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002936:	4879      	ldr	r0, [pc, #484]	; (8002b1c <StartDefaultTask+0xb1c>)
 8002938:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 800293c:	ed91 0b00 	vldr	d0, [r1]
 8002940:	f005 fe4c 	bl	80085dc <scaraFlowDuty>
 8002944:	4603      	mov	r3, r0
 8002946:	f887 38f9 	strb.w	r3, [r7, #2297]	; 0x8f9
				  if ( SCARA_STATUS_OK == status) {
 800294a:	f897 38f9 	ldrb.w	r3, [r7, #2297]	; 0x8f9
 800294e:	2b00      	cmp	r3, #0
 8002950:	d113      	bne.n	800297a <StartDefaultTask+0x97a>
					  lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 8002952:	4c71      	ldr	r4, [pc, #452]	; (8002b18 <StartDefaultTask+0xb18>)
 8002954:	4a71      	ldr	r2, [pc, #452]	; (8002b1c <StartDefaultTask+0xb1c>)
 8002956:	ab2c      	add	r3, sp, #176	; 0xb0
 8002958:	4611      	mov	r1, r2
 800295a:	22c0      	movs	r2, #192	; 0xc0
 800295c:	4618      	mov	r0, r3
 800295e:	f013 fa45 	bl	8015dec <memcpy>
 8002962:	4668      	mov	r0, sp
 8002964:	f104 0310 	add.w	r3, r4, #16
 8002968:	22b0      	movs	r2, #176	; 0xb0
 800296a:	4619      	mov	r1, r3
 800296c:	f013 fa3e 	bl	8015dec <memcpy>
 8002970:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002974:	f002 fa98 	bl	8004ea8 <lowlayer_computeAndWritePulse>
		  break;
 8002978:	e045      	b.n	8002a06 <StartDefaultTask+0xa06>
					  current_key_state = SCARA_KEY_STATE_FINISH;
 800297a:	2303      	movs	r3, #3
 800297c:	f887 3953 	strb.w	r3, [r7, #2387]	; 0x953
					detail_array[0] = status;
 8002980:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8002984:	f897 28f9 	ldrb.w	r2, [r7, #2297]	; 0x8f9
 8002988:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_STOP, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800298a:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800298e:	6899      	ldr	r1, [r3, #8]
 8002990:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 8002994:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8002998:	4413      	add	r3, r2
 800299a:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	2301      	movs	r3, #1
 80029a2:	2006      	movs	r0, #6
 80029a4:	f7ff f996 	bl	8001cd4 <commandRespond1>
 80029a8:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
					total_respond_length += respond_lenght;
 80029ac:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 80029b0:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 80029b4:	4413      	add	r3, r2
 80029b6:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
					  LOG_REPORT("STOP KEY", __LINE__);
 80029ba:	f240 214e 	movw	r1, #590	; 0x24e
 80029be:	4858      	ldr	r0, [pc, #352]	; (8002b20 <StartDefaultTask+0xb20>)
 80029c0:	f7ff f9d8 	bl	8001d74 <LOG_REPORT>
		  break;
 80029c4:	e01f      	b.n	8002a06 <StartDefaultTask+0xa06>
		  case SCARA_KEY_STATE_FINISH:
		  {
			  lowlayer_readTruePosition(&positionNext);
 80029c6:	4855      	ldr	r0, [pc, #340]	; (8002b1c <StartDefaultTask+0xb1c>)
 80029c8:	f002 f8de 	bl	8004b88 <lowlayer_readTruePosition>
			  kinematicForward(&positionNext);
 80029cc:	4853      	ldr	r0, [pc, #332]	; (8002b1c <StartDefaultTask+0xb1c>)
 80029ce:	f001 f9b7 	bl	8003d40 <kinematicForward>
			  current_key_state = SCARA_KEY_STATE_READY;
 80029d2:	2300      	movs	r3, #0
 80029d4:	f887 3953 	strb.w	r3, [r7, #2387]	; 0x953
			  positionNext.t = 0;
 80029d8:	4a50      	ldr	r2, [pc, #320]	; (8002b1c <StartDefaultTask+0xb1c>)
 80029da:	f04f 0300 	mov.w	r3, #0
 80029de:	f04f 0400 	mov.w	r4, #0
 80029e2:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
			  positionNext.total_time = 0;
 80029e6:	4a4d      	ldr	r2, [pc, #308]	; (8002b1c <StartDefaultTask+0xb1c>)
 80029e8:	f04f 0300 	mov.w	r3, #0
 80029ec:	f04f 0400 	mov.w	r4, #0
 80029f0:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
			  positionNext.q = 0;
 80029f4:	4a49      	ldr	r2, [pc, #292]	; (8002b1c <StartDefaultTask+0xb1c>)
 80029f6:	f04f 0300 	mov.w	r3, #0
 80029fa:	f04f 0400 	mov.w	r4, #0
 80029fe:	e9c2 3400 	strd	r3, r4, [r2]
		  }
		  break;
 8002a02:	e000      	b.n	8002a06 <StartDefaultTask+0xa06>
		  break;
 8002a04:	bf00      	nop
		  }
	  }
	  break;
 8002a06:	f000 be39 	b.w	800367c <StartDefaultTask+0x167c>

	  case SCARA_METHOD_SEMI_AUTO:
	  {
		  switch( current_mode) {
 8002a0a:	f897 3956 	ldrb.w	r3, [r7, #2390]	; 0x956
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d00b      	beq.n	8002a2a <StartDefaultTask+0xa2a>
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d066      	beq.n	8002ae4 <StartDefaultTask+0xae4>
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f040 81e5 	bne.w	8002de6 <StartDefaultTask+0xde6>
		  case SCARA_MODE_STOP:
			  {
				  current_mode 	= SCARA_MODE_DUTY;
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	f887 3956 	strb.w	r3, [r7, #2390]	; 0x956
				  current_duty_state = SCARA_DUTY_STATE_READY;
 8002a22:	2300      	movs	r3, #0
 8002a24:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
			  }
			  break;
 8002a28:	e1e3      	b.n	8002df2 <StartDefaultTask+0xdf2>

		  case SCARA_MODE_SCAN:
			  {
				  switch (current_scan_state) {
 8002a2a:	f897 3954 	ldrb.w	r3, [r7, #2388]	; 0x954
 8002a2e:	2b03      	cmp	r3, #3
 8002a30:	d84e      	bhi.n	8002ad0 <StartDefaultTask+0xad0>
 8002a32:	a201      	add	r2, pc, #4	; (adr r2, 8002a38 <StartDefaultTask+0xa38>)
 8002a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a38:	08002a49 	.word	0x08002a49
 8002a3c:	08002a55 	.word	0x08002a55
 8002a40:	08002a67 	.word	0x08002a67
 8002a44:	08002a7b 	.word	0x08002a7b
				  case SCARA_SCAN_STATE_INIT:
					  {
						  lowlayer_scanReset();
 8002a48:	f001 fe94 	bl	8004774 <lowlayer_scanReset>
						  current_scan_state = SCARA_SCAN_STATE_HARD;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	f887 3954 	strb.w	r3, [r7, #2388]	; 0x954
					  }
					  break;
 8002a52:	e046      	b.n	8002ae2 <StartDefaultTask+0xae2>
				  case SCARA_SCAN_STATE_HARD:
					  {
						  if(lowlayer_scanFlow()) {
 8002a54:	f001 fec0 	bl	80047d8 <lowlayer_scanFlow>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d03e      	beq.n	8002adc <StartDefaultTask+0xadc>
							  current_scan_state = SCARA_SCAN_STATE_SOFT;
 8002a5e:	2302      	movs	r3, #2
 8002a60:	f887 3954 	strb.w	r3, [r7, #2388]	; 0x954
						  }
					  }
					  break;
 8002a64:	e03a      	b.n	8002adc <StartDefaultTask+0xadc>
				  case SCARA_SCAN_STATE_SOFT:
					  {
						  if(lowlayer_goToSoftLimit(&positionNext)) {
 8002a66:	482d      	ldr	r0, [pc, #180]	; (8002b1c <StartDefaultTask+0xb1c>)
 8002a68:	f002 f812 	bl	8004a90 <lowlayer_goToSoftLimit>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d036      	beq.n	8002ae0 <StartDefaultTask+0xae0>
							  current_scan_state = SCARA_SCAN_STATE_FINISH;
 8002a72:	2303      	movs	r3, #3
 8002a74:	f887 3954 	strb.w	r3, [r7, #2388]	; 0x954
							}
					  }
					  break;
 8002a78:	e032      	b.n	8002ae0 <StartDefaultTask+0xae0>
				  case SCARA_SCAN_STATE_FINISH:
					  {
						  //lowlayer_readSetPosition(&positionNext);
						  lowlayer_readTruePosition(&positionNext);
 8002a7a:	4828      	ldr	r0, [pc, #160]	; (8002b1c <StartDefaultTask+0xb1c>)
 8002a7c:	f002 f884 	bl	8004b88 <lowlayer_readTruePosition>
						  kinematicForward(&positionNext);
 8002a80:	4826      	ldr	r0, [pc, #152]	; (8002b1c <StartDefaultTask+0xb1c>)
 8002a82:	f001 f95d 	bl	8003d40 <kinematicForward>
						  current_mode 	= SCARA_MODE_DUTY;
 8002a86:	2302      	movs	r3, #2
 8002a88:	f887 3956 	strb.w	r3, [r7, #2390]	; 0x956
						  current_duty_state = SCARA_DUTY_STATE_READY;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
						  scaraSetScanFlag();
 8002a92:	f007 fe09 	bl	800a6a8 <scaraSetScanFlag>
						//   scaraPosition2String((char *)position, positionNext);
						//   infor_lenght 		= commandRespond(RPD_DONE,
						// 									 0,
						// 									(char *)position,
						// 									(char *)infor);
						detail_array[0] = NONE;
 8002a96:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8002a9a:	2224      	movs	r2, #36	; 0x24
 8002a9c:	701a      	strb	r2, [r3, #0]
						respond_lenght = commandRespond1(RPD_DONE, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002a9e:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002aa2:	6899      	ldr	r1, [r3, #8]
 8002aa4:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 8002aa8:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8002aac:	4413      	add	r3, r2
 8002aae:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8002ab2:	9300      	str	r3, [sp, #0]
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	2005      	movs	r0, #5
 8002ab8:	f7ff f90c 	bl	8001cd4 <commandRespond1>
 8002abc:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
						total_respond_length += respond_lenght;
 8002ac0:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8002ac4:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8002ac8:	4413      	add	r3, r2
 8002aca:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
					  }
					  break;
 8002ace:	e008      	b.n	8002ae2 <StartDefaultTask+0xae2>
				  default:
					  {
						  LOG_REPORT("ERROR STATE !!!", __LINE__);
 8002ad0:	f240 2197 	movw	r1, #663	; 0x297
 8002ad4:	4813      	ldr	r0, [pc, #76]	; (8002b24 <StartDefaultTask+0xb24>)
 8002ad6:	f7ff f94d 	bl	8001d74 <LOG_REPORT>
						  while(1);
 8002ada:	e7fe      	b.n	8002ada <StartDefaultTask+0xada>
					  break;
 8002adc:	bf00      	nop
 8002ade:	e188      	b.n	8002df2 <StartDefaultTask+0xdf2>
					  break;
 8002ae0:	bf00      	nop
					  }
				  }

			  }
			  break;
 8002ae2:	e186      	b.n	8002df2 <StartDefaultTask+0xdf2>

		  case SCARA_MODE_DUTY:
			  {
				  switch (current_duty_state) {
 8002ae4:	f897 3955 	ldrb.w	r3, [r7, #2389]	; 0x955
 8002ae8:	2b03      	cmp	r3, #3
 8002aea:	f200 8175 	bhi.w	8002dd8 <StartDefaultTask+0xdd8>
 8002aee:	a201      	add	r2, pc, #4	; (adr r2, 8002af4 <StartDefaultTask+0xaf4>)
 8002af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af4:	08002b05 	.word	0x08002b05
 8002af8:	08002b29 	.word	0x08002b29
 8002afc:	08002c87 	.word	0x08002c87
 8002b00:	08002d63 	.word	0x08002d63
				  case SCARA_DUTY_STATE_READY:
					  {
						  // Do nothing();
						  __NOP();
 8002b04:	bf00      	nop

					  }
				  break;
 8002b06:	e16d      	b.n	8002de4 <StartDefaultTask+0xde4>
 8002b08:	40000000 	.word	0x40000000
 8002b0c:	3f847ae1 	.word	0x3f847ae1
 8002b10:	0801b3ac 	.word	0x0801b3ac
 8002b14:	20000000 	.word	0x20000000
 8002b18:	200066b8 	.word	0x200066b8
 8002b1c:	20006838 	.word	0x20006838
 8002b20:	0801b3c4 	.word	0x0801b3c4
 8002b24:	0801b3d0 	.word	0x0801b3d0

				  case SCARA_DUTY_STATE_INIT:
					  {

						  SCARA_StatusTypeDef status1, status2;
						  status1 = scaraInitDuty(duty_cmd);
 8002b28:	f507 64e5 	add.w	r4, r7, #1832	; 0x728
 8002b2c:	4668      	mov	r0, sp
 8002b2e:	f104 0310 	add.w	r3, r4, #16
 8002b32:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8002b36:	4619      	mov	r1, r3
 8002b38:	f013 f958 	bl	8015dec <memcpy>
 8002b3c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002b40:	f002 fd46 	bl	80055d0 <scaraInitDuty>
 8002b44:	4603      	mov	r3, r0
 8002b46:	f887 38fb 	strb.w	r3, [r7, #2299]	; 0x8fb
						  if ( SCARA_STATUS_OK == status1) {
 8002b4a:	f897 38fb 	ldrb.w	r3, [r7, #2299]	; 0x8fb
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d173      	bne.n	8002c3a <StartDefaultTask+0xc3a>
							  status2 = scaraTestDuty();
 8002b52:	f007 fd2d 	bl	800a5b0 <scaraTestDuty>
 8002b56:	4603      	mov	r3, r0
 8002b58:	f887 38fa 	strb.w	r3, [r7, #2298]	; 0x8fa
							  if (SCARA_STATUS_OK == status2) {
 8002b5c:	f897 38fa 	ldrb.w	r3, [r7, #2298]	; 0x8fa
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d144      	bne.n	8002bee <StartDefaultTask+0xbee>
							  current_duty_state = SCARA_DUTY_STATE_FLOW;
 8002b64:	2302      	movs	r3, #2
 8002b66:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
							  //current_duty_state = SCARA_DUTY_STATE_FINISH;
							  run_time			= 0;
 8002b6a:	f04f 0300 	mov.w	r3, #0
 8002b6e:	f04f 0400 	mov.w	r4, #0
 8002b72:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 8002b76:	e9c2 3400 	strd	r3, r4, [r2]
							  // Respond
							  detail_array[0] = status1;
 8002b7a:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8002b7e:	f897 28fb 	ldrb.w	r2, [r7, #2299]	; 0x8fb
 8002b82:	701a      	strb	r2, [r3, #0]
							  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002b84:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002b88:	6899      	ldr	r1, [r3, #8]
 8002b8a:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 8002b8e:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8002b92:	4413      	add	r3, r2
 8002b94:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8002b98:	9300      	str	r3, [sp, #0]
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	2008      	movs	r0, #8
 8002b9e:	f7ff f899 	bl	8001cd4 <commandRespond1>
 8002ba2:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
							  total_respond_length += respond_lenght;
 8002ba6:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8002baa:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8002bae:	4413      	add	r3, r2
 8002bb0:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
							  detail_array[0] = NONE;
 8002bb4:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8002bb8:	2224      	movs	r2, #36	; 0x24
 8002bba:	701a      	strb	r2, [r3, #0]
							  respond_lenght = commandRespond1(RPD_START, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002bbc:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002bc0:	6899      	ldr	r1, [r3, #8]
 8002bc2:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 8002bc6:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8002bca:	4413      	add	r3, r2
 8002bcc:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8002bd0:	9300      	str	r3, [sp, #0]
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	2003      	movs	r0, #3
 8002bd6:	f7ff f87d 	bl	8001cd4 <commandRespond1>
 8002bda:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
							  total_respond_length += respond_lenght;
 8002bde:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8002be2:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8002be6:	4413      	add	r3, r2
 8002be8:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
							respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
							total_respond_length += respond_lenght;
							  LOG_REPORT("INIT FAIL", __LINE__);
						  }
					  }
				  break;
 8002bec:	e0fa      	b.n	8002de4 <StartDefaultTask+0xde4>
								  current_duty_state 	= SCARA_DUTY_STATE_READY;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
								  LOG_REPORT("TEST FAIL", __LINE__);
 8002bf4:	f240 21c3 	movw	r1, #707	; 0x2c3
 8002bf8:	48cf      	ldr	r0, [pc, #828]	; (8002f38 <StartDefaultTask+0xf38>)
 8002bfa:	f7ff f8bb 	bl	8001d74 <LOG_REPORT>
								detail_array[0] = status2;
 8002bfe:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8002c02:	f897 28fa 	ldrb.w	r2, [r7, #2298]	; 0x8fa
 8002c06:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002c08:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002c0c:	6899      	ldr	r1, [r3, #8]
 8002c0e:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 8002c12:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8002c16:	4413      	add	r3, r2
 8002c18:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8002c1c:	9300      	str	r3, [sp, #0]
 8002c1e:	2301      	movs	r3, #1
 8002c20:	2007      	movs	r0, #7
 8002c22:	f7ff f857 	bl	8001cd4 <commandRespond1>
 8002c26:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
								total_respond_length += respond_lenght;
 8002c2a:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8002c2e:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8002c32:	4413      	add	r3, r2
 8002c34:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
				  break;
 8002c38:	e0d4      	b.n	8002de4 <StartDefaultTask+0xde4>
							  current_duty_state 	= SCARA_DUTY_STATE_READY;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
							detail_array[0] = status1;
 8002c40:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8002c44:	f897 28fb 	ldrb.w	r2, [r7, #2299]	; 0x8fb
 8002c48:	701a      	strb	r2, [r3, #0]
							respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002c4a:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002c4e:	6899      	ldr	r1, [r3, #8]
 8002c50:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 8002c54:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8002c58:	4413      	add	r3, r2
 8002c5a:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8002c5e:	9300      	str	r3, [sp, #0]
 8002c60:	2301      	movs	r3, #1
 8002c62:	2007      	movs	r0, #7
 8002c64:	f7ff f836 	bl	8001cd4 <commandRespond1>
 8002c68:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
							total_respond_length += respond_lenght;
 8002c6c:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8002c70:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8002c74:	4413      	add	r3, r2
 8002c76:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
							  LOG_REPORT("INIT FAIL", __LINE__);
 8002c7a:	f240 21ce 	movw	r1, #718	; 0x2ce
 8002c7e:	48af      	ldr	r0, [pc, #700]	; (8002f3c <StartDefaultTask+0xf3c>)
 8002c80:	f7ff f878 	bl	8001d74 <LOG_REPORT>
				  break;
 8002c84:	e0ae      	b.n	8002de4 <StartDefaultTask+0xde4>

				  case SCARA_DUTY_STATE_FLOW:
					  {
						  SCARA_StatusTypeDef status;
						  // Increase run time
						  run_time += T_SAMPLING;
 8002c86:	a3aa      	add	r3, pc, #680	; (adr r3, 8002f30 <StartDefaultTask+0xf30>)
 8002c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c8c:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 8002c90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002c94:	f7fd fafa 	bl	800028c <__adddf3>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	460c      	mov	r4, r1
 8002c9c:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 8002ca0:	e9c2 3400 	strd	r3, r4, [r2]
						  // Check Time Out
						  if (scaraIsFinish(run_time)) {
 8002ca4:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8002ca8:	ed93 0b00 	vldr	d0, [r3]
 8002cac:	f007 fd9a 	bl	800a7e4 <scaraIsFinish>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <StartDefaultTask+0xcbe>
							  current_duty_state = SCARA_DUTY_STATE_FINISH;// Work Done
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
								total_respond_length += respond_lenght;
								  LOG_REPORT("STOP DUTY", __LINE__);
							  }
						  }
					  }
				  break;
 8002cbc:	e092      	b.n	8002de4 <StartDefaultTask+0xde4>
							  status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 8002cbe:	4ca0      	ldr	r4, [pc, #640]	; (8002f40 <StartDefaultTask+0xf40>)
 8002cc0:	4668      	mov	r0, sp
 8002cc2:	f104 0308 	add.w	r3, r4, #8
 8002cc6:	22b8      	movs	r2, #184	; 0xb8
 8002cc8:	4619      	mov	r1, r3
 8002cca:	f013 f88f 	bl	8015dec <memcpy>
 8002cce:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002cd2:	489c      	ldr	r0, [pc, #624]	; (8002f44 <StartDefaultTask+0xf44>)
 8002cd4:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 8002cd8:	ed91 0b00 	vldr	d0, [r1]
 8002cdc:	f005 fc7e 	bl	80085dc <scaraFlowDuty>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	f887 38fc 	strb.w	r3, [r7, #2300]	; 0x8fc
							  if ( SCARA_STATUS_OK == status) {
 8002ce6:	f897 38fc 	ldrb.w	r3, [r7, #2300]	; 0x8fc
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d113      	bne.n	8002d16 <StartDefaultTask+0xd16>
								  lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 8002cee:	4c94      	ldr	r4, [pc, #592]	; (8002f40 <StartDefaultTask+0xf40>)
 8002cf0:	4a94      	ldr	r2, [pc, #592]	; (8002f44 <StartDefaultTask+0xf44>)
 8002cf2:	ab2c      	add	r3, sp, #176	; 0xb0
 8002cf4:	4611      	mov	r1, r2
 8002cf6:	22c0      	movs	r2, #192	; 0xc0
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f013 f877 	bl	8015dec <memcpy>
 8002cfe:	4668      	mov	r0, sp
 8002d00:	f104 0310 	add.w	r3, r4, #16
 8002d04:	22b0      	movs	r2, #176	; 0xb0
 8002d06:	4619      	mov	r1, r3
 8002d08:	f013 f870 	bl	8015dec <memcpy>
 8002d0c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002d10:	f002 f8ca 	bl	8004ea8 <lowlayer_computeAndWritePulse>
				  break;
 8002d14:	e066      	b.n	8002de4 <StartDefaultTask+0xde4>
								  current_duty_state = SCARA_DUTY_STATE_FINISH;
 8002d16:	2303      	movs	r3, #3
 8002d18:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
								detail_array[0] = status;
 8002d1c:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8002d20:	f897 28fc 	ldrb.w	r2, [r7, #2300]	; 0x8fc
 8002d24:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond1(RPD_STOP, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002d26:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002d2a:	6899      	ldr	r1, [r3, #8]
 8002d2c:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 8002d30:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8002d34:	4413      	add	r3, r2
 8002d36:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8002d3a:	9300      	str	r3, [sp, #0]
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	2006      	movs	r0, #6
 8002d40:	f7fe ffc8 	bl	8001cd4 <commandRespond1>
 8002d44:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
								total_respond_length += respond_lenght;
 8002d48:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8002d4c:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8002d50:	4413      	add	r3, r2
 8002d52:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
								  LOG_REPORT("STOP DUTY", __LINE__);
 8002d56:	f240 21e6 	movw	r1, #742	; 0x2e6
 8002d5a:	487b      	ldr	r0, [pc, #492]	; (8002f48 <StartDefaultTask+0xf48>)
 8002d5c:	f7ff f80a 	bl	8001d74 <LOG_REPORT>
				  break;
 8002d60:	e040      	b.n	8002de4 <StartDefaultTask+0xde4>

				  case SCARA_DUTY_STATE_FINISH:
					  {
						  lowlayer_readTruePosition(&positionNext);
 8002d62:	4878      	ldr	r0, [pc, #480]	; (8002f44 <StartDefaultTask+0xf44>)
 8002d64:	f001 ff10 	bl	8004b88 <lowlayer_readTruePosition>
						  kinematicForward(&positionNext);
 8002d68:	4876      	ldr	r0, [pc, #472]	; (8002f44 <StartDefaultTask+0xf44>)
 8002d6a:	f000 ffe9 	bl	8003d40 <kinematicForward>
						  current_duty_state = SCARA_DUTY_STATE_READY;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
						  positionNext.t = 0;
 8002d74:	4a73      	ldr	r2, [pc, #460]	; (8002f44 <StartDefaultTask+0xf44>)
 8002d76:	f04f 0300 	mov.w	r3, #0
 8002d7a:	f04f 0400 	mov.w	r4, #0
 8002d7e:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
						  positionNext.total_time = 0;
 8002d82:	4a70      	ldr	r2, [pc, #448]	; (8002f44 <StartDefaultTask+0xf44>)
 8002d84:	f04f 0300 	mov.w	r3, #0
 8002d88:	f04f 0400 	mov.w	r4, #0
 8002d8c:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
						  positionNext.q = 0;
 8002d90:	4a6c      	ldr	r2, [pc, #432]	; (8002f44 <StartDefaultTask+0xf44>)
 8002d92:	f04f 0300 	mov.w	r3, #0
 8002d96:	f04f 0400 	mov.w	r4, #0
 8002d9a:	e9c2 3400 	strd	r3, r4, [r2]
						  // Done Inform

					detail_array[0] = NONE;
 8002d9e:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8002da2:	2224      	movs	r2, #36	; 0x24
 8002da4:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_DONE, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002da6:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002daa:	6899      	ldr	r1, [r3, #8]
 8002dac:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 8002db0:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8002db4:	4413      	add	r3, r2
 8002db6:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8002dba:	9300      	str	r3, [sp, #0]
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	2005      	movs	r0, #5
 8002dc0:	f7fe ff88 	bl	8001cd4 <commandRespond1>
 8002dc4:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
					total_respond_length += respond_lenght;
 8002dc8:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8002dcc:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8002dd0:	4413      	add	r3, r2
 8002dd2:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
					  }
				  break;
 8002dd6:	e005      	b.n	8002de4 <StartDefaultTask+0xde4>

				  default:
					  {
						  LOG_REPORT("ERROR STATE !!!", __LINE__);
 8002dd8:	f240 21fe 	movw	r1, #766	; 0x2fe
 8002ddc:	485b      	ldr	r0, [pc, #364]	; (8002f4c <StartDefaultTask+0xf4c>)
 8002dde:	f7fe ffc9 	bl	8001d74 <LOG_REPORT>
						  while(1);
 8002de2:	e7fe      	b.n	8002de2 <StartDefaultTask+0xde2>
					  }
				  }

			  }
			  break;
 8002de4:	e005      	b.n	8002df2 <StartDefaultTask+0xdf2>

		  default:
			  {
				  LOG_REPORT("ERROR MODE !!!", __LINE__);
 8002de6:	f44f 7142 	mov.w	r1, #776	; 0x308
 8002dea:	4859      	ldr	r0, [pc, #356]	; (8002f50 <StartDefaultTask+0xf50>)
 8002dec:	f7fe ffc2 	bl	8001d74 <LOG_REPORT>
				  while(1);
 8002df0:	e7fe      	b.n	8002df0 <StartDefaultTask+0xdf0>
			  }
		  }
	  }
	  break;
 8002df2:	f000 bc46 	b.w	8003682 <StartDefaultTask+0x1682>

	  case SCARA_METHOD_GCODE:
	  {
		  switch (current_duty_state)
 8002df6:	f897 3955 	ldrb.w	r3, [r7, #2389]	; 0x955
 8002dfa:	2b04      	cmp	r3, #4
 8002dfc:	f200 8131 	bhi.w	8003062 <StartDefaultTask+0x1062>
 8002e00:	a201      	add	r2, pc, #4	; (adr r2, 8002e08 <StartDefaultTask+0xe08>)
 8002e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e06:	bf00      	nop
 8002e08:	08003063 	.word	0x08003063
 8002e0c:	08003063 	.word	0x08003063
 8002e10:	08002f61 	.word	0x08002f61
 8002e14:	08003063 	.word	0x08003063
 8002e18:	08002e1d 	.word	0x08002e1d
		  case SCARA_DUTY_STATE_INIT:{

		  }
		  break;
		  case SCARA_DUTY_STATE_OPERATION:{
			  update_gcode_point(&duty_cmd, Gcode_Cor[run_point]);
 8002e1c:	494d      	ldr	r1, [pc, #308]	; (8002f54 <StartDefaultTask+0xf54>)
 8002e1e:	f8d7 292c 	ldr.w	r2, [r7, #2348]	; 0x92c
 8002e22:	4613      	mov	r3, r2
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	4413      	add	r3, r2
 8002e28:	00db      	lsls	r3, r3, #3
 8002e2a:	440b      	add	r3, r1
 8002e2c:	f507 65e5 	add.w	r5, r7, #1832	; 0x728
 8002e30:	466c      	mov	r4, sp
 8002e32:	f103 020c 	add.w	r2, r3, #12
 8002e36:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e38:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002e3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e3e:	4628      	mov	r0, r5
 8002e40:	f000 fe1a 	bl	8003a78 <update_gcode_point>
			  SCARA_StatusTypeDef status;
			  status = scaraInitDuty(duty_cmd);
 8002e44:	f507 64e5 	add.w	r4, r7, #1832	; 0x728
 8002e48:	4668      	mov	r0, sp
 8002e4a:	f104 0310 	add.w	r3, r4, #16
 8002e4e:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8002e52:	4619      	mov	r1, r3
 8002e54:	f012 ffca 	bl	8015dec <memcpy>
 8002e58:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002e5c:	f002 fbb8 	bl	80055d0 <scaraInitDuty>
 8002e60:	4603      	mov	r3, r0
 8002e62:	f887 38fe 	strb.w	r3, [r7, #2302]	; 0x8fe
			  if(status == SCARA_STATUS_OK){
 8002e66:	f897 38fe 	ldrb.w	r3, [r7, #2302]	; 0x8fe
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d13e      	bne.n	8002eec <StartDefaultTask+0xeec>
				  run_time = 0;
 8002e6e:	f04f 0300 	mov.w	r3, #0
 8002e72:	f04f 0400 	mov.w	r4, #0
 8002e76:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 8002e7a:	e9c2 3400 	strd	r3, r4, [r2]
				  current_duty_state = SCARA_DUTY_STATE_FLOW;
 8002e7e:	2302      	movs	r3, #2
 8002e80:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
				  detail_array[0] = (uint8_t)(run_point * 100.0f / total_num_of_point );
 8002e84:	f8d7 392c 	ldr.w	r3, [r7, #2348]	; 0x92c
 8002e88:	ee07 3a90 	vmov	s15, r3
 8002e8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e90:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8002f58 <StartDefaultTask+0xf58>
 8002e94:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002e98:	4b30      	ldr	r3, [pc, #192]	; (8002f5c <StartDefaultTask+0xf5c>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	ee07 3a90 	vmov	s15, r3
 8002ea0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ea4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ea8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002eac:	edc7 7a01 	vstr	s15, [r7, #4]
 8002eb0:	793b      	ldrb	r3, [r7, #4]
 8002eb2:	b2da      	uxtb	r2, r3
 8002eb4:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8002eb8:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RDP_GCODE_PROCESS, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002eba:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002ebe:	6899      	ldr	r1, [r3, #8]
 8002ec0:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 8002ec4:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8002ec8:	4413      	add	r3, r2
 8002eca:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8002ece:	9300      	str	r3, [sp, #0]
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	200b      	movs	r0, #11
 8002ed4:	f7fe fefe 	bl	8001cd4 <commandRespond1>
 8002ed8:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
				  total_respond_length += respond_lenght;
 8002edc:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8002ee0:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8002ee4:	4413      	add	r3, r2
 8002ee6:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
 8002eea:	e039      	b.n	8002f60 <StartDefaultTask+0xf60>
			  }else{
				  current_duty_state = SCARA_DUTY_STATE_FINISH;
 8002eec:	2303      	movs	r3, #3
 8002eee:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
				  detail_array[0] = status;
 8002ef2:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8002ef6:	f897 28fe 	ldrb.w	r2, [r7, #2302]	; 0x8fe
 8002efa:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002efc:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002f00:	6899      	ldr	r1, [r3, #8]
 8002f02:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 8002f06:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8002f0a:	4413      	add	r3, r2
 8002f0c:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8002f10:	9300      	str	r3, [sp, #0]
 8002f12:	2301      	movs	r3, #1
 8002f14:	2007      	movs	r0, #7
 8002f16:	f7fe fedd 	bl	8001cd4 <commandRespond1>
 8002f1a:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
				  total_respond_length += respond_lenght;
 8002f1e:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8002f22:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8002f26:	4413      	add	r3, r2
 8002f28:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
				  break;
 8002f2c:	e09a      	b.n	8003064 <StartDefaultTask+0x1064>
 8002f2e:	bf00      	nop
 8002f30:	40000000 	.word	0x40000000
 8002f34:	3f847ae1 	.word	0x3f847ae1
 8002f38:	0801b3e0 	.word	0x0801b3e0
 8002f3c:	0801b3ec 	.word	0x0801b3ec
 8002f40:	200066b8 	.word	0x200066b8
 8002f44:	20006838 	.word	0x20006838
 8002f48:	0801b3f8 	.word	0x0801b3f8
 8002f4c:	0801b3d0 	.word	0x0801b3d0
 8002f50:	0801b404 	.word	0x0801b404
 8002f54:	20004d74 	.word	0x20004d74
 8002f58:	42c80000 	.word	0x42c80000
 8002f5c:	20004d70 	.word	0x20004d70
			  }
		  }
		  //break;

		  case SCARA_DUTY_STATE_FLOW:{
			  run_time += T_SAMPLING;
 8002f60:	a3c9      	add	r3, pc, #804	; (adr r3, 8003288 <StartDefaultTask+0x1288>)
 8002f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f66:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 8002f6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002f6e:	f7fd f98d 	bl	800028c <__adddf3>
 8002f72:	4603      	mov	r3, r0
 8002f74:	460c      	mov	r4, r1
 8002f76:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 8002f7a:	e9c2 3400 	strd	r3, r4, [r2]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 8002f7e:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8002f82:	ed93 0b00 	vldr	d0, [r3]
 8002f86:	f007 fc2d 	bl	800a7e4 <scaraIsFinish>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d01b      	beq.n	8002fc8 <StartDefaultTask+0xfc8>
				if(run_point >= total_num_of_point){
 8002f90:	4bbf      	ldr	r3, [pc, #764]	; (8003290 <StartDefaultTask+0x1290>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f8d7 292c 	ldr.w	r2, [r7, #2348]	; 0x92c
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	db03      	blt.n	8002fa4 <StartDefaultTask+0xfa4>
					current_duty_state = SCARA_DUTY_STATE_READY;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
					  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
					  total_respond_length += respond_lenght;
				  }
			  }
		  }
		  break;
 8002fa2:	e05f      	b.n	8003064 <StartDefaultTask+0x1064>
					current_duty_state = SCARA_DUTY_STATE_OPERATION;
 8002fa4:	2304      	movs	r3, #4
 8002fa6:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
					run_point++;
 8002faa:	f8d7 392c 	ldr.w	r3, [r7, #2348]	; 0x92c
 8002fae:	3301      	adds	r3, #1
 8002fb0:	f8c7 392c 	str.w	r3, [r7, #2348]	; 0x92c
					memcpy(&positionNext, &duty_cmd.target_point, sizeof(SCARA_PositionTypeDef));
 8002fb4:	4ab7      	ldr	r2, [pc, #732]	; (8003294 <StartDefaultTask+0x1294>)
 8002fb6:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002fba:	4610      	mov	r0, r2
 8002fbc:	3328      	adds	r3, #40	; 0x28
 8002fbe:	22c0      	movs	r2, #192	; 0xc0
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	f012 ff13 	bl	8015dec <memcpy>
		  break;
 8002fc6:	e04d      	b.n	8003064 <StartDefaultTask+0x1064>
				SCARA_StatusTypeDef status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 8002fc8:	4cb3      	ldr	r4, [pc, #716]	; (8003298 <StartDefaultTask+0x1298>)
 8002fca:	4668      	mov	r0, sp
 8002fcc:	f104 0308 	add.w	r3, r4, #8
 8002fd0:	22b8      	movs	r2, #184	; 0xb8
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	f012 ff0a 	bl	8015dec <memcpy>
 8002fd8:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002fdc:	48ad      	ldr	r0, [pc, #692]	; (8003294 <StartDefaultTask+0x1294>)
 8002fde:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 8002fe2:	ed91 0b00 	vldr	d0, [r1]
 8002fe6:	f005 faf9 	bl	80085dc <scaraFlowDuty>
 8002fea:	4603      	mov	r3, r0
 8002fec:	f887 38fd 	strb.w	r3, [r7, #2301]	; 0x8fd
				if ( SCARA_STATUS_OK == status) {
 8002ff0:	f897 38fd 	ldrb.w	r3, [r7, #2301]	; 0x8fd
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d113      	bne.n	8003020 <StartDefaultTask+0x1020>
					lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 8002ff8:	4ca7      	ldr	r4, [pc, #668]	; (8003298 <StartDefaultTask+0x1298>)
 8002ffa:	4aa6      	ldr	r2, [pc, #664]	; (8003294 <StartDefaultTask+0x1294>)
 8002ffc:	ab2c      	add	r3, sp, #176	; 0xb0
 8002ffe:	4611      	mov	r1, r2
 8003000:	22c0      	movs	r2, #192	; 0xc0
 8003002:	4618      	mov	r0, r3
 8003004:	f012 fef2 	bl	8015dec <memcpy>
 8003008:	4668      	mov	r0, sp
 800300a:	f104 0310 	add.w	r3, r4, #16
 800300e:	22b0      	movs	r2, #176	; 0xb0
 8003010:	4619      	mov	r1, r3
 8003012:	f012 feeb 	bl	8015dec <memcpy>
 8003016:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800301a:	f001 ff45 	bl	8004ea8 <lowlayer_computeAndWritePulse>
		  break;
 800301e:	e021      	b.n	8003064 <StartDefaultTask+0x1064>
					  current_duty_state = SCARA_DUTY_STATE_FINISH;
 8003020:	2303      	movs	r3, #3
 8003022:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
					  detail_array[0] = status;
 8003026:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800302a:	f897 28fd 	ldrb.w	r2, [r7, #2301]	; 0x8fd
 800302e:	701a      	strb	r2, [r3, #0]
					  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003030:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8003034:	6899      	ldr	r1, [r3, #8]
 8003036:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 800303a:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 800303e:	4413      	add	r3, r2
 8003040:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8003044:	9300      	str	r3, [sp, #0]
 8003046:	2301      	movs	r3, #1
 8003048:	2007      	movs	r0, #7
 800304a:	f7fe fe43 	bl	8001cd4 <commandRespond1>
 800304e:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
					  total_respond_length += respond_lenght;
 8003052:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8003056:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 800305a:	4413      	add	r3, r2
 800305c:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
		  break;
 8003060:	e000      	b.n	8003064 <StartDefaultTask+0x1064>

		  }
		  break;
		  
		  default:
			  break;
 8003062:	bf00      	nop
		  }
	  }

	  break;
 8003064:	e30d      	b.n	8003682 <StartDefaultTask+0x1682>
	  case SCARA_METHOD_TEST:
	  {
		  lowlayer_writePulse(test_value[0], test_value[1], test_value[2], test_value[3]);
 8003066:	f207 7324 	addw	r3, r7, #1828	; 0x724
 800306a:	f993 0000 	ldrsb.w	r0, [r3]
 800306e:	f207 7324 	addw	r3, r7, #1828	; 0x724
 8003072:	f993 1001 	ldrsb.w	r1, [r3, #1]
 8003076:	f207 7324 	addw	r3, r7, #1828	; 0x724
 800307a:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800307e:	f207 7324 	addw	r3, r7, #1828	; 0x724
 8003082:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003086:	f002 f8b3 	bl	80051f0 <lowlayer_writePulse>
	  }
	  break;
 800308a:	e2fa      	b.n	8003682 <StartDefaultTask+0x1682>


	  case SCARA_METHOD_PICK_AND_PLACE:
	  {
		  switch(current_duty_state) {
 800308c:	f897 3955 	ldrb.w	r3, [r7, #2389]	; 0x955
 8003090:	3b01      	subs	r3, #1
 8003092:	2b03      	cmp	r3, #3
 8003094:	f200 82f4 	bhi.w	8003680 <StartDefaultTask+0x1680>
 8003098:	a201      	add	r2, pc, #4	; (adr r2, 80030a0 <StartDefaultTask+0x10a0>)
 800309a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800309e:	bf00      	nop
 80030a0:	080030b1 	.word	0x080030b1
 80030a4:	08003551 	.word	0x08003551
 80030a8:	08003671 	.word	0x08003671
 80030ac:	080030e9 	.word	0x080030e9
		  case SCARA_DUTY_STATE_INIT:{
			  //Object = calloc(8, sizeof(SCARA_Pick_And_Place_Package));
			  HAL_TIM_Base_Start(&htim2);
 80030b0:	487a      	ldr	r0, [pc, #488]	; (800329c <StartDefaultTask+0x129c>)
 80030b2:	f00a ffba 	bl	800e02a <HAL_TIM_Base_Start>
			  object_tail_pointer = 0;
 80030b6:	2300      	movs	r3, #0
 80030b8:	f887 393e 	strb.w	r3, [r7, #2366]	; 0x93e
			  object_head_pointer = 0;
 80030bc:	2300      	movs	r3, #0
 80030be:	f887 393d 	strb.w	r3, [r7, #2365]	; 0x93d
			  operation_state = SCARA_MOVE_TO_TARGET;
 80030c2:	2300      	movs	r3, #0
 80030c4:	f887 393f 	strb.w	r3, [r7, #2367]	; 0x93f
			  current_duty_state = SCARA_DUTY_STATE_OPERATION;
 80030c8:	2304      	movs	r3, #4
 80030ca:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
			  duty_cmd.robot_method = SCARA_METHOD_PICK_AND_PLACE;
 80030ce:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80030d2:	2204      	movs	r2, #4
 80030d4:	705a      	strb	r2, [r3, #1]
			  duty_cmd.path_type = DUTY_PATH_LINE;
 80030d6:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80030da:	2200      	movs	r2, #0
 80030dc:	739a      	strb	r2, [r3, #14]
			  duty_cmd.space_type = DUTY_SPACE_TASK;
 80030de:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80030e2:	2200      	movs	r2, #0
 80030e4:	735a      	strb	r2, [r3, #13]
		  }
		  break;
 80030e6:	e2c8      	b.n	800367a <StartDefaultTask+0x167a>

		  case SCARA_DUTY_STATE_OPERATION:{
			  if(object_tail_pointer != object_head_pointer){
 80030e8:	f897 293e 	ldrb.w	r2, [r7, #2366]	; 0x93e
 80030ec:	f897 393d 	ldrb.w	r3, [r7, #2365]	; 0x93d
 80030f0:	429a      	cmp	r2, r3
 80030f2:	f000 82bf 	beq.w	8003674 <StartDefaultTask+0x1674>
				  switch(operation_state){
 80030f6:	f897 393f 	ldrb.w	r3, [r7, #2367]	; 0x93f
 80030fa:	2b07      	cmp	r3, #7
 80030fc:	f200 8189 	bhi.w	8003412 <StartDefaultTask+0x1412>
 8003100:	a201      	add	r2, pc, #4	; (adr r2, 8003108 <StartDefaultTask+0x1108>)
 8003102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003106:	bf00      	nop
 8003108:	08003129 	.word	0x08003129
 800310c:	080031f9 	.word	0x080031f9
 8003110:	08003227 	.word	0x08003227
 8003114:	0800323d 	.word	0x0800323d
 8003118:	080032b5 	.word	0x080032b5
 800311c:	080033a1 	.word	0x080033a1
 8003120:	080033cf 	.word	0x080033cf
 8003124:	080033e5 	.word	0x080033e5
					  case SCARA_MOVE_TO_TARGET:{
						  double wait_time = TIMER_SCALE*((uint16_t)(TIM2->CNT - Object[object_tail_pointer].timer_value)) + MOVE_TIME + PUT_DOWN_TIME_ON_OBJECT;
 8003128:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800312c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312e:	b29a      	uxth	r2, r3
 8003130:	f897 393e 	ldrb.w	r3, [r7, #2366]	; 0x93e
 8003134:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003138:	20c8      	movs	r0, #200	; 0xc8
 800313a:	fb00 f303 	mul.w	r3, r0, r3
 800313e:	440b      	add	r3, r1
 8003140:	33c0      	adds	r3, #192	; 0xc0
 8003142:	881b      	ldrh	r3, [r3, #0]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	b29b      	uxth	r3, r3
 8003148:	ee07 3a90 	vmov	s15, r3
 800314c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003150:	ed9f 7a53 	vldr	s14, [pc, #332]	; 80032a0 <StartDefaultTask+0x12a0>
 8003154:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003158:	ed9f 7a52 	vldr	s14, [pc, #328]	; 80032a4 <StartDefaultTask+0x12a4>
 800315c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003160:	ed9f 7a51 	vldr	s14, [pc, #324]	; 80032a8 <StartDefaultTask+0x12a8>
 8003164:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003168:	ee17 0a90 	vmov	r0, s15
 800316c:	f7fd f9ec 	bl	8000548 <__aeabi_f2d>
 8003170:	4603      	mov	r3, r0
 8003172:	460c      	mov	r4, r1
 8003174:	f507 6210 	add.w	r2, r7, #2304	; 0x900
 8003178:	e9c2 3400 	strd	r3, r4, [r2]
						  Object[object_tail_pointer].object_position.y -= wait_time*conveyor_speed;
 800317c:	f897 393e 	ldrb.w	r3, [r7, #2366]	; 0x93e
 8003180:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8003184:	21c8      	movs	r1, #200	; 0xc8
 8003186:	fb01 f303 	mul.w	r3, r1, r3
 800318a:	4413      	add	r3, r2
 800318c:	3350      	adds	r3, #80	; 0x50
 800318e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003192:	4b46      	ldr	r3, [pc, #280]	; (80032ac <StartDefaultTask+0x12ac>)
 8003194:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003198:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 800319c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a0:	f7fd fa2a 	bl	80005f8 <__aeabi_dmul>
 80031a4:	4602      	mov	r2, r0
 80031a6:	460b      	mov	r3, r1
 80031a8:	f897 693e 	ldrb.w	r6, [r7, #2366]	; 0x93e
 80031ac:	4620      	mov	r0, r4
 80031ae:	4629      	mov	r1, r5
 80031b0:	f7fd f86a 	bl	8000288 <__aeabi_dsub>
 80031b4:	4603      	mov	r3, r0
 80031b6:	460c      	mov	r4, r1
 80031b8:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 80031bc:	22c8      	movs	r2, #200	; 0xc8
 80031be:	fb02 f206 	mul.w	r2, r2, r6
 80031c2:	440a      	add	r2, r1
 80031c4:	3250      	adds	r2, #80	; 0x50
 80031c6:	e9c2 3400 	strd	r3, r4, [r2]
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 80031ca:	f897 393e 	ldrb.w	r3, [r7, #2366]	; 0x93e
 80031ce:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80031d2:	21c8      	movs	r1, #200	; 0xc8
 80031d4:	fb01 f303 	mul.w	r3, r1, r3
 80031d8:	4413      	add	r3, r2
 80031da:	f103 0258 	add.w	r2, r3, #88	; 0x58
 80031de:	a424      	add	r4, pc, #144	; (adr r4, 8003270 <StartDefaultTask+0x1270>)
 80031e0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80031e4:	e9c2 3400 	strd	r3, r4, [r2]
						  state_time = MOVE_TIME;
 80031e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80031ec:	4c30      	ldr	r4, [pc, #192]	; (80032b0 <StartDefaultTask+0x12b0>)
 80031ee:	f507 6213 	add.w	r2, r7, #2352	; 0x930
 80031f2:	e9c2 3400 	strd	r3, r4, [r2]
					  }
					  break;
 80031f6:	e10c      	b.n	8003412 <StartDefaultTask+0x1412>

					  case SCARA_MOVE_DOWN_ON_OBJECT:{
						  Object[object_tail_pointer].object_position.z = DOWN_HEIGHT_ON_OBJECT;
 80031f8:	f897 393e 	ldrb.w	r3, [r7, #2366]	; 0x93e
 80031fc:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8003200:	21c8      	movs	r1, #200	; 0xc8
 8003202:	fb01 f303 	mul.w	r3, r1, r3
 8003206:	4413      	add	r3, r2
 8003208:	f103 0258 	add.w	r2, r3, #88	; 0x58
 800320c:	a41a      	add	r4, pc, #104	; (adr r4, 8003278 <StartDefaultTask+0x1278>)
 800320e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003212:	e9c2 3400 	strd	r3, r4, [r2]
						  state_time = PUT_DOWN_TIME_ON_OBJECT;
 8003216:	a41a      	add	r4, pc, #104	; (adr r4, 8003280 <StartDefaultTask+0x1280>)
 8003218:	e9d4 3400 	ldrd	r3, r4, [r4]
 800321c:	f507 6213 	add.w	r2, r7, #2352	; 0x930
 8003220:	e9c2 3400 	strd	r3, r4, [r2]
					  }
					  break;
 8003224:	e0f5      	b.n	8003412 <StartDefaultTask+0x1412>
					  case SCARA_ATTACH:{
						  state_time = ATTACH_TIME;
 8003226:	a418      	add	r4, pc, #96	; (adr r4, 8003288 <StartDefaultTask+0x1288>)
 8003228:	e9d4 3400 	ldrd	r3, r4, [r4]
 800322c:	f507 6213 	add.w	r2, r7, #2352	; 0x930
 8003230:	e9c2 3400 	strd	r3, r4, [r2]
						  scaraSetOutput(1);
 8003234:	2001      	movs	r0, #1
 8003236:	f007 fa43 	bl	800a6c0 <scaraSetOutput>
					  }
					  break;
 800323a:	e0ea      	b.n	8003412 <StartDefaultTask+0x1412>
					  case SCARA_MOVE_UP_ON_OBJECT:{
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 800323c:	f897 393e 	ldrb.w	r3, [r7, #2366]	; 0x93e
 8003240:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8003244:	21c8      	movs	r1, #200	; 0xc8
 8003246:	fb01 f303 	mul.w	r3, r1, r3
 800324a:	4413      	add	r3, r2
 800324c:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8003250:	a407      	add	r4, pc, #28	; (adr r4, 8003270 <StartDefaultTask+0x1270>)
 8003252:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003256:	e9c2 3400 	strd	r3, r4, [r2]
						  state_time = PICK_UP_TIME_ON_OBJECT;
 800325a:	a409      	add	r4, pc, #36	; (adr r4, 8003280 <StartDefaultTask+0x1280>)
 800325c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003260:	f507 6213 	add.w	r2, r7, #2352	; 0x930
 8003264:	e9c2 3400 	strd	r3, r4, [r2]
					  }
					  break;
 8003268:	e0d3      	b.n	8003412 <StartDefaultTask+0x1412>
 800326a:	bf00      	nop
 800326c:	f3af 8000 	nop.w
 8003270:	00000000 	.word	0x00000000
 8003274:	40606000 	.word	0x40606000
 8003278:	00000000 	.word	0x00000000
 800327c:	405fa000 	.word	0x405fa000
 8003280:	40000000 	.word	0x40000000
 8003284:	3fe33333 	.word	0x3fe33333
 8003288:	40000000 	.word	0x40000000
 800328c:	3f847ae1 	.word	0x3f847ae1
 8003290:	20004d70 	.word	0x20004d70
 8003294:	20006838 	.word	0x20006838
 8003298:	200066b8 	.word	0x200066b8
 800329c:	20006938 	.word	0x20006938
 80032a0:	399c09bf 	.word	0x399c09bf
 80032a4:	3f99999a 	.word	0x3f99999a
 80032a8:	3f19999a 	.word	0x3f19999a
 80032ac:	20000ba0 	.word	0x20000ba0
 80032b0:	3ff33333 	.word	0x3ff33333
					  case SCARA_MOVE_TO_SLOT :{

						  Object[object_tail_pointer].object_position.x = SLot_Cordinate[Object[object_tail_pointer].object_position.object_type].posx;
 80032b4:	f897 393e 	ldrb.w	r3, [r7, #2366]	; 0x93e
 80032b8:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80032bc:	21c8      	movs	r1, #200	; 0xc8
 80032be:	fb01 f303 	mul.w	r3, r1, r3
 80032c2:	4413      	add	r3, r2
 80032c4:	33b8      	adds	r3, #184	; 0xb8
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f897 293e 	ldrb.w	r2, [r7, #2366]	; 0x93e
 80032ce:	f107 0120 	add.w	r1, r7, #32
 80032d2:	4603      	mov	r3, r0
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	4403      	add	r3, r0
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	440b      	add	r3, r1
 80032dc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80032e0:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 80032e4:	20c8      	movs	r0, #200	; 0xc8
 80032e6:	fb00 f202 	mul.w	r2, r0, r2
 80032ea:	440a      	add	r2, r1
 80032ec:	3248      	adds	r2, #72	; 0x48
 80032ee:	e9c2 3400 	strd	r3, r4, [r2]
						  Object[object_tail_pointer].object_position.y = SLot_Cordinate[Object[object_tail_pointer].object_position.object_type].posy;
 80032f2:	f897 393e 	ldrb.w	r3, [r7, #2366]	; 0x93e
 80032f6:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80032fa:	21c8      	movs	r1, #200	; 0xc8
 80032fc:	fb01 f303 	mul.w	r3, r1, r3
 8003300:	4413      	add	r3, r2
 8003302:	33b8      	adds	r3, #184	; 0xb8
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	4618      	mov	r0, r3
 8003308:	f897 293e 	ldrb.w	r2, [r7, #2366]	; 0x93e
 800330c:	f107 0120 	add.w	r1, r7, #32
 8003310:	4603      	mov	r3, r0
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	4403      	add	r3, r0
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	440b      	add	r3, r1
 800331a:	3308      	adds	r3, #8
 800331c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003320:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003324:	20c8      	movs	r0, #200	; 0xc8
 8003326:	fb00 f202 	mul.w	r2, r0, r2
 800332a:	440a      	add	r2, r1
 800332c:	3250      	adds	r2, #80	; 0x50
 800332e:	e9c2 3400 	strd	r3, r4, [r2]
						  Object[object_tail_pointer].object_position.roll = SLot_Cordinate[Object[object_tail_pointer].object_position.object_type].roll;
 8003332:	f897 393e 	ldrb.w	r3, [r7, #2366]	; 0x93e
 8003336:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800333a:	21c8      	movs	r1, #200	; 0xc8
 800333c:	fb01 f303 	mul.w	r3, r1, r3
 8003340:	4413      	add	r3, r2
 8003342:	33b8      	adds	r3, #184	; 0xb8
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	4618      	mov	r0, r3
 8003348:	f897 293e 	ldrb.w	r2, [r7, #2366]	; 0x93e
 800334c:	f107 0120 	add.w	r1, r7, #32
 8003350:	4603      	mov	r3, r0
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	4403      	add	r3, r0
 8003356:	00db      	lsls	r3, r3, #3
 8003358:	440b      	add	r3, r1
 800335a:	3310      	adds	r3, #16
 800335c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003360:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003364:	20c8      	movs	r0, #200	; 0xc8
 8003366:	fb00 f202 	mul.w	r2, r0, r2
 800336a:	440a      	add	r2, r1
 800336c:	3260      	adds	r2, #96	; 0x60
 800336e:	e9c2 3400 	strd	r3, r4, [r2]
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 8003372:	f897 393e 	ldrb.w	r3, [r7, #2366]	; 0x93e
 8003376:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800337a:	21c8      	movs	r1, #200	; 0xc8
 800337c:	fb01 f303 	mul.w	r3, r1, r3
 8003380:	4413      	add	r3, r2
 8003382:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8003386:	a4d6      	add	r4, pc, #856	; (adr r4, 80036e0 <StartDefaultTask+0x16e0>)
 8003388:	e9d4 3400 	ldrd	r3, r4, [r4]
 800338c:	e9c2 3400 	strd	r3, r4, [r2]
						  state_time = MOVE_TIME;
 8003390:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003394:	4cd4      	ldr	r4, [pc, #848]	; (80036e8 <StartDefaultTask+0x16e8>)
 8003396:	f507 6213 	add.w	r2, r7, #2352	; 0x930
 800339a:	e9c2 3400 	strd	r3, r4, [r2]
					  }
					  break;
 800339e:	e038      	b.n	8003412 <StartDefaultTask+0x1412>
					  case SCARA_MOVE_DOWN_ON_SLOT:{
						  Object[object_tail_pointer].object_position.z = DOWN_HEIGHT_ON_SLOT;
 80033a0:	f897 393e 	ldrb.w	r3, [r7, #2366]	; 0x93e
 80033a4:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80033a8:	21c8      	movs	r1, #200	; 0xc8
 80033aa:	fb01 f303 	mul.w	r3, r1, r3
 80033ae:	4413      	add	r3, r2
 80033b0:	f103 0258 	add.w	r2, r3, #88	; 0x58
 80033b4:	a4c4      	add	r4, pc, #784	; (adr r4, 80036c8 <StartDefaultTask+0x16c8>)
 80033b6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80033ba:	e9c2 3400 	strd	r3, r4, [r2]
						  state_time = PUT_DOWN_TIME_ON_SLOT;
 80033be:	a4c4      	add	r4, pc, #784	; (adr r4, 80036d0 <StartDefaultTask+0x16d0>)
 80033c0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80033c4:	f507 6213 	add.w	r2, r7, #2352	; 0x930
 80033c8:	e9c2 3400 	strd	r3, r4, [r2]
					  }
					  break;
 80033cc:	e021      	b.n	8003412 <StartDefaultTask+0x1412>
					  case SCARA_RELEASE:{
						  state_time = DETACH_TIME;
 80033ce:	a4c2      	add	r4, pc, #776	; (adr r4, 80036d8 <StartDefaultTask+0x16d8>)
 80033d0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80033d4:	f507 6213 	add.w	r2, r7, #2352	; 0x930
 80033d8:	e9c2 3400 	strd	r3, r4, [r2]
						  scaraSetOutput(0);
 80033dc:	2000      	movs	r0, #0
 80033de:	f007 f96f 	bl	800a6c0 <scaraSetOutput>
					  }
					  break;
 80033e2:	e016      	b.n	8003412 <StartDefaultTask+0x1412>
					  case SCARA_MOVE_UP_ON_SLOT:{
						  state_time = PICK_UP_TIME_ON_SLOT;
 80033e4:	a4ba      	add	r4, pc, #744	; (adr r4, 80036d0 <StartDefaultTask+0x16d0>)
 80033e6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80033ea:	f507 6213 	add.w	r2, r7, #2352	; 0x930
 80033ee:	e9c2 3400 	strd	r3, r4, [r2]
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 80033f2:	f897 393e 	ldrb.w	r3, [r7, #2366]	; 0x93e
 80033f6:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80033fa:	21c8      	movs	r1, #200	; 0xc8
 80033fc:	fb01 f303 	mul.w	r3, r1, r3
 8003400:	4413      	add	r3, r2
 8003402:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8003406:	a4b6      	add	r4, pc, #728	; (adr r4, 80036e0 <StartDefaultTask+0x16e0>)
 8003408:	e9d4 3400 	ldrd	r3, r4, [r4]
 800340c:	e9c2 3400 	strd	r3, r4, [r2]
					  }
					  break;
 8003410:	bf00      	nop
				  }
				  memcpy(&duty_cmd.target_point, &Object[object_tail_pointer].object_position, sizeof(SCARA_PositionTypeDef));
 8003412:	f897 393e 	ldrb.w	r3, [r7, #2366]	; 0x93e
 8003416:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800341a:	21c8      	movs	r1, #200	; 0xc8
 800341c:	fb01 f303 	mul.w	r3, r1, r3
 8003420:	18d1      	adds	r1, r2, r3
 8003422:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8003426:	3328      	adds	r3, #40	; 0x28
 8003428:	22c0      	movs	r2, #192	; 0xc0
 800342a:	4618      	mov	r0, r3
 800342c:	f012 fcde 	bl	8015dec <memcpy>
				  duty_cmd.time_total = state_time;
 8003430:	f507 62e5 	add.w	r2, r7, #1832	; 0x728
 8003434:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8003438:	e9d3 3400 	ldrd	r3, r4, [r3]
 800343c:	e9c2 3408 	strd	r3, r4, [r2, #32]
				  SCARA_StatusTypeDef status1;
				  duty_cmd.v_factor = 0;
 8003440:	f507 62e5 	add.w	r2, r7, #1832	; 0x728
 8003444:	f04f 0300 	mov.w	r3, #0
 8003448:	f04f 0400 	mov.w	r4, #0
 800344c:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
				  if(operation_state == SCARA_ATTACH || operation_state == SCARA_RELEASE){
 8003450:	f897 393f 	ldrb.w	r3, [r7, #2367]	; 0x93f
 8003454:	2b02      	cmp	r3, #2
 8003456:	d003      	beq.n	8003460 <StartDefaultTask+0x1460>
 8003458:	f897 393f 	ldrb.w	r3, [r7, #2367]	; 0x93f
 800345c:	2b06      	cmp	r3, #6
 800345e:	d103      	bne.n	8003468 <StartDefaultTask+0x1468>
					  status1 = SCARA_STATUS_OK;
 8003460:	2300      	movs	r3, #0
 8003462:	f887 392b 	strb.w	r3, [r7, #2347]	; 0x92b
 8003466:	e031      	b.n	80034cc <StartDefaultTask+0x14cc>
				  }else{
					  if(operation_state == SCARA_MOVE_DOWN_ON_OBJECT || operation_state == SCARA_MOVE_DOWN_ON_SLOT || operation_state == SCARA_MOVE_UP_ON_OBJECT || operation_state == SCARA_MOVE_UP_ON_SLOT){
 8003468:	f897 393f 	ldrb.w	r3, [r7, #2367]	; 0x93f
 800346c:	2b01      	cmp	r3, #1
 800346e:	d00b      	beq.n	8003488 <StartDefaultTask+0x1488>
 8003470:	f897 393f 	ldrb.w	r3, [r7, #2367]	; 0x93f
 8003474:	2b05      	cmp	r3, #5
 8003476:	d007      	beq.n	8003488 <StartDefaultTask+0x1488>
 8003478:	f897 393f 	ldrb.w	r3, [r7, #2367]	; 0x93f
 800347c:	2b03      	cmp	r3, #3
 800347e:	d003      	beq.n	8003488 <StartDefaultTask+0x1488>
 8003480:	f897 393f 	ldrb.w	r3, [r7, #2367]	; 0x93f
 8003484:	2b07      	cmp	r3, #7
 8003486:	d108      	bne.n	800349a <StartDefaultTask+0x149a>
						  duty_cmd.trajec_type = DUTY_TRAJECTORY_LINEAR;
 8003488:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800348c:	2202      	movs	r2, #2
 800348e:	741a      	strb	r2, [r3, #16]
						  duty_cmd.modeInit_type = DUTY_MODE_INIT_QT;
 8003490:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8003494:	2203      	movs	r2, #3
 8003496:	745a      	strb	r2, [r3, #17]
 8003498:	e007      	b.n	80034aa <StartDefaultTask+0x14aa>
					  }else{
						  duty_cmd.trajec_type = DUTY_TRAJECTORY_LSPB;
 800349a:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800349e:	2200      	movs	r2, #0
 80034a0:	741a      	strb	r2, [r3, #16]
						  duty_cmd.modeInit_type = DUTY_MODE_INIT_QVT;
 80034a2:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80034a6:	2201      	movs	r2, #1
 80034a8:	745a      	strb	r2, [r3, #17]
					  }
					  status1 = scaraInitDuty(duty_cmd);
 80034aa:	f507 64e5 	add.w	r4, r7, #1832	; 0x728
 80034ae:	4668      	mov	r0, sp
 80034b0:	f104 0310 	add.w	r3, r4, #16
 80034b4:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 80034b8:	4619      	mov	r1, r3
 80034ba:	f012 fc97 	bl	8015dec <memcpy>
 80034be:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80034c2:	f002 f885 	bl	80055d0 <scaraInitDuty>
 80034c6:	4603      	mov	r3, r0
 80034c8:	f887 392b 	strb.w	r3, [r7, #2347]	; 0x92b
				  }
				  if ( SCARA_STATUS_OK == status1) {
 80034cc:	f897 392b 	ldrb.w	r3, [r7, #2347]	; 0x92b
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d10b      	bne.n	80034ec <StartDefaultTask+0x14ec>
				  	current_duty_state = SCARA_DUTY_STATE_FLOW;
 80034d4:	2302      	movs	r3, #2
 80034d6:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
				  	run_time = 0;
 80034da:	f04f 0300 	mov.w	r3, #0
 80034de:	f04f 0400 	mov.w	r4, #0
 80034e2:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 80034e6:	e9c2 3400 	strd	r3, r4, [r2]
 80034ea:	e031      	b.n	8003550 <StartDefaultTask+0x1550>
				  } else {
					object_tail_pointer = (object_tail_pointer+1)%8;
 80034ec:	f897 393e 	ldrb.w	r3, [r7, #2366]	; 0x93e
 80034f0:	3301      	adds	r3, #1
 80034f2:	425a      	negs	r2, r3
 80034f4:	f003 0307 	and.w	r3, r3, #7
 80034f8:	f002 0207 	and.w	r2, r2, #7
 80034fc:	bf58      	it	pl
 80034fe:	4253      	negpl	r3, r2
 8003500:	f887 393e 	strb.w	r3, [r7, #2366]	; 0x93e
					operation_state = SCARA_MOVE_TO_TARGET;
 8003504:	2300      	movs	r3, #0
 8003506:	f887 393f 	strb.w	r3, [r7, #2367]	; 0x93f
					detail_array[0] = status1;
 800350a:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800350e:	f897 292b 	ldrb.w	r2, [r7, #2347]	; 0x92b
 8003512:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003514:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8003518:	6899      	ldr	r1, [r3, #8]
 800351a:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 800351e:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8003522:	4413      	add	r3, r2
 8003524:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8003528:	9300      	str	r3, [sp, #0]
 800352a:	2301      	movs	r3, #1
 800352c:	2007      	movs	r0, #7
 800352e:	f7fe fbd1 	bl	8001cd4 <commandRespond1>
 8003532:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
					total_respond_length += respond_lenght;
 8003536:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 800353a:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 800353e:	4413      	add	r3, r2
 8003540:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
					LOG_REPORT("INIT FAIL", __LINE__);
 8003544:	f240 31b9 	movw	r1, #953	; 0x3b9
 8003548:	4868      	ldr	r0, [pc, #416]	; (80036ec <StartDefaultTask+0x16ec>)
 800354a:	f7fe fc13 	bl	8001d74 <LOG_REPORT>
					break;
 800354e:	e094      	b.n	800367a <StartDefaultTask+0x167a>


		  case SCARA_DUTY_STATE_FLOW:{
			  SCARA_StatusTypeDef status;
			  // Increase run time
			  run_time += T_SAMPLING;
 8003550:	a361      	add	r3, pc, #388	; (adr r3, 80036d8 <StartDefaultTask+0x16d8>)
 8003552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003556:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 800355a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800355e:	f7fc fe95 	bl	800028c <__adddf3>
 8003562:	4603      	mov	r3, r0
 8003564:	460c      	mov	r4, r1
 8003566:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 800356a:	e9c2 3400 	strd	r3, r4, [r2]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 800356e:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8003572:	ed93 0b00 	vldr	d0, [r3]
 8003576:	f007 f935 	bl	800a7e4 <scaraIsFinish>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d022      	beq.n	80035c6 <StartDefaultTask+0x15c6>
				current_duty_state = SCARA_DUTY_STATE_OPERATION;
 8003580:	2304      	movs	r3, #4
 8003582:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
				if(operation_state == SCARA_MOVE_UP_ON_SLOT){
 8003586:	f897 393f 	ldrb.w	r3, [r7, #2367]	; 0x93f
 800358a:	2b07      	cmp	r3, #7
 800358c:	d10f      	bne.n	80035ae <StartDefaultTask+0x15ae>
					operation_state = SCARA_MOVE_TO_TARGET;
 800358e:	2300      	movs	r3, #0
 8003590:	f887 393f 	strb.w	r3, [r7, #2367]	; 0x93f
					object_tail_pointer = (object_tail_pointer+1)%8;
 8003594:	f897 393e 	ldrb.w	r3, [r7, #2366]	; 0x93e
 8003598:	3301      	adds	r3, #1
 800359a:	425a      	negs	r2, r3
 800359c:	f003 0307 	and.w	r3, r3, #7
 80035a0:	f002 0207 	and.w	r2, r2, #7
 80035a4:	bf58      	it	pl
 80035a6:	4253      	negpl	r3, r2
 80035a8:	f887 393e 	strb.w	r3, [r7, #2366]	; 0x93e
 80035ac:	e004      	b.n	80035b8 <StartDefaultTask+0x15b8>
				}else{
					operation_state += 1; //next state
 80035ae:	f897 393f 	ldrb.w	r3, [r7, #2367]	; 0x93f
 80035b2:	3301      	adds	r3, #1
 80035b4:	f887 393f 	strb.w	r3, [r7, #2367]	; 0x93f
				}
				lowlayer_readTruePosition(&positionNext);
 80035b8:	484d      	ldr	r0, [pc, #308]	; (80036f0 <StartDefaultTask+0x16f0>)
 80035ba:	f001 fae5 	bl	8004b88 <lowlayer_readTruePosition>
				kinematicForward(&positionNext);
 80035be:	484c      	ldr	r0, [pc, #304]	; (80036f0 <StartDefaultTask+0x16f0>)
 80035c0:	f000 fbbe 	bl	8003d40 <kinematicForward>
					  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
					  total_respond_length += respond_lenght;
				  }
			  }
		  }
		  break;
 80035c4:	e058      	b.n	8003678 <StartDefaultTask+0x1678>
			  } else if(operation_state != SCARA_ATTACH && operation_state != SCARA_RELEASE){
 80035c6:	f897 393f 	ldrb.w	r3, [r7, #2367]	; 0x93f
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d054      	beq.n	8003678 <StartDefaultTask+0x1678>
 80035ce:	f897 393f 	ldrb.w	r3, [r7, #2367]	; 0x93f
 80035d2:	2b06      	cmp	r3, #6
 80035d4:	d050      	beq.n	8003678 <StartDefaultTask+0x1678>
				status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 80035d6:	4c47      	ldr	r4, [pc, #284]	; (80036f4 <StartDefaultTask+0x16f4>)
 80035d8:	4668      	mov	r0, sp
 80035da:	f104 0308 	add.w	r3, r4, #8
 80035de:	22b8      	movs	r2, #184	; 0xb8
 80035e0:	4619      	mov	r1, r3
 80035e2:	f012 fc03 	bl	8015dec <memcpy>
 80035e6:	e894 000c 	ldmia.w	r4, {r2, r3}
 80035ea:	4841      	ldr	r0, [pc, #260]	; (80036f0 <StartDefaultTask+0x16f0>)
 80035ec:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 80035f0:	ed91 0b00 	vldr	d0, [r1]
 80035f4:	f004 fff2 	bl	80085dc <scaraFlowDuty>
 80035f8:	4603      	mov	r3, r0
 80035fa:	f887 38ff 	strb.w	r3, [r7, #2303]	; 0x8ff
				if ( SCARA_STATUS_OK == status) {
 80035fe:	f897 38ff 	ldrb.w	r3, [r7, #2303]	; 0x8ff
 8003602:	2b00      	cmp	r3, #0
 8003604:	d113      	bne.n	800362e <StartDefaultTask+0x162e>
					lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 8003606:	4c3b      	ldr	r4, [pc, #236]	; (80036f4 <StartDefaultTask+0x16f4>)
 8003608:	4a39      	ldr	r2, [pc, #228]	; (80036f0 <StartDefaultTask+0x16f0>)
 800360a:	ab2c      	add	r3, sp, #176	; 0xb0
 800360c:	4611      	mov	r1, r2
 800360e:	22c0      	movs	r2, #192	; 0xc0
 8003610:	4618      	mov	r0, r3
 8003612:	f012 fbeb 	bl	8015dec <memcpy>
 8003616:	4668      	mov	r0, sp
 8003618:	f104 0310 	add.w	r3, r4, #16
 800361c:	22b0      	movs	r2, #176	; 0xb0
 800361e:	4619      	mov	r1, r3
 8003620:	f012 fbe4 	bl	8015dec <memcpy>
 8003624:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003628:	f001 fc3e 	bl	8004ea8 <lowlayer_computeAndWritePulse>
		  break;
 800362c:	e024      	b.n	8003678 <StartDefaultTask+0x1678>
					  current_duty_state = SCARA_DUTY_STATE_FINISH;
 800362e:	2303      	movs	r3, #3
 8003630:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
					  detail_array[0] = status;
 8003634:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8003638:	f897 28ff 	ldrb.w	r2, [r7, #2303]	; 0x8ff
 800363c:	701a      	strb	r2, [r3, #0]
					  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800363e:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8003642:	6899      	ldr	r1, [r3, #8]
 8003644:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 8003648:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 800364c:	4413      	add	r3, r2
 800364e:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8003652:	9300      	str	r3, [sp, #0]
 8003654:	2301      	movs	r3, #1
 8003656:	2007      	movs	r0, #7
 8003658:	f7fe fb3c 	bl	8001cd4 <commandRespond1>
 800365c:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
					  total_respond_length += respond_lenght;
 8003660:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8003664:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8003668:	4413      	add	r3, r2
 800366a:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
		  break;
 800366e:	e003      	b.n	8003678 <StartDefaultTask+0x1678>

		  case SCARA_DUTY_STATE_FINISH:

			  //error
			  //free(Object);
		  break;
 8003670:	bf00      	nop
 8003672:	e005      	b.n	8003680 <StartDefaultTask+0x1680>
				  break;
 8003674:	bf00      	nop
 8003676:	e003      	b.n	8003680 <StartDefaultTask+0x1680>
		  break;
 8003678:	bf00      	nop
		  }
	  }
	  break;
 800367a:	e001      	b.n	8003680 <StartDefaultTask+0x1680>
	  break;
 800367c:	bf00      	nop
 800367e:	e000      	b.n	8003682 <StartDefaultTask+0x1682>
	  break;
 8003680:	bf00      	nop
	//   // Send through USB
	//   if (usb_lenght > 0) {
	// 	  CDC_Transmit_FS(usb_buff, (uint16_t)usb_lenght);
	//   }

	if(total_respond_length > 0){
 8003682:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8003686:	2b00      	cmp	r3, #0
 8003688:	dd08      	ble.n	800369c <StartDefaultTask+0x169c>
		CDC_Transmit_FS(respond, total_respond_length);
 800368a:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 800368e:	b29a      	uxth	r2, r3
 8003690:	f207 63fc 	addw	r3, r7, #1788	; 0x6fc
 8003694:	4611      	mov	r1, r2
 8003696:	4618      	mov	r0, r3
 8003698:	f011 ff2c 	bl	80154f4 <CDC_Transmit_FS>
	}

	  /* 5--- Update ---*/
	  scaraSetMethod(current_method);
 800369c:	f897 3957 	ldrb.w	r3, [r7, #2391]	; 0x957
 80036a0:	4618      	mov	r0, r3
 80036a2:	f007 f83f 	bl	800a724 <scaraSetMethod>
	  scaraSetMode(current_mode);
 80036a6:	f897 3956 	ldrb.w	r3, [r7, #2390]	; 0x956
 80036aa:	4618      	mov	r0, r3
 80036ac:	f007 f82a 	bl	800a704 <scaraSetMode>
	  scaraSetDutyState(current_duty_state);
 80036b0:	f897 3955 	ldrb.w	r3, [r7, #2389]	; 0x955
 80036b4:	4618      	mov	r0, r3
 80036b6:	f007 f815 	bl	800a6e4 <scaraSetDutyState>

    osDelay(1);
 80036ba:	2001      	movs	r0, #1
 80036bc:	f00f f838 	bl	8012730 <osDelay>
	  osSignalWait(0x01, osWaitForever); // Very Important
 80036c0:	f7fe bd06 	b.w	80020d0 <StartDefaultTask+0xd0>
 80036c4:	f3af 8000 	nop.w
 80036c8:	00000000 	.word	0x00000000
 80036cc:	405fa000 	.word	0x405fa000
 80036d0:	40000000 	.word	0x40000000
 80036d4:	3fe33333 	.word	0x3fe33333
 80036d8:	40000000 	.word	0x40000000
 80036dc:	3f847ae1 	.word	0x3f847ae1
 80036e0:	00000000 	.word	0x00000000
 80036e4:	40606000 	.word	0x40606000
 80036e8:	3ff33333 	.word	0x3ff33333
 80036ec:	0801b3ec 	.word	0x0801b3ec
 80036f0:	20006838 	.word	0x20006838
 80036f4:	200066b8 	.word	0x200066b8

080036f8 <Start_USB_RX_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_USB_RX_Task */
void Start_USB_RX_Task(void const * argument)
{
 80036f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036fa:	f2ad 5dd4 	subw	sp, sp, #1492	; 0x5d4
 80036fe:	af70      	add	r7, sp, #448	; 0x1c0
 8003700:	1d3b      	adds	r3, r7, #4
 8003702:	6018      	str	r0, [r3, #0]
	int32_t				respond_lenght;
	//int32_t				message_lenght;
	int32_t 			detail_length;

	// Default value
	duty_cmd.key_speed = 1;
 8003704:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8003708:	2201      	movs	r2, #1
 800370a:	605a      	str	r2, [r3, #4]

  /* Infinite loop */
  for(;;)
  {
	  for(;;) {
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, RECEIVE_END);
 800370c:	4964      	ldr	r1, [pc, #400]	; (80038a0 <Start_USB_RX_Task+0x1a8>)
 800370e:	4865      	ldr	r0, [pc, #404]	; (80038a4 <Start_USB_RX_Task+0x1ac>)
 8003710:	f000 ffa4 	bl	800465c <ringBuff_DistanceOf>
 8003714:	f8c7 0408 	str.w	r0, [r7, #1032]	; 0x408
		  if (distance != -1) {
 8003718:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 800371c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003720:	d0f4      	beq.n	800370c <Start_USB_RX_Task+0x14>
 8003722:	466b      	mov	r3, sp
 8003724:	461e      	mov	r6, r3
			  uint8_t temp[distance+1];
 8003726:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 800372a:	1c58      	adds	r0, r3, #1
 800372c:	1e43      	subs	r3, r0, #1
 800372e:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 8003732:	4603      	mov	r3, r0
 8003734:	4619      	mov	r1, r3
 8003736:	f04f 0200 	mov.w	r2, #0
 800373a:	f04f 0300 	mov.w	r3, #0
 800373e:	f04f 0400 	mov.w	r4, #0
 8003742:	00d4      	lsls	r4, r2, #3
 8003744:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8003748:	00cb      	lsls	r3, r1, #3
 800374a:	4603      	mov	r3, r0
 800374c:	4619      	mov	r1, r3
 800374e:	f04f 0200 	mov.w	r2, #0
 8003752:	f04f 0300 	mov.w	r3, #0
 8003756:	f04f 0400 	mov.w	r4, #0
 800375a:	00d4      	lsls	r4, r2, #3
 800375c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8003760:	00cb      	lsls	r3, r1, #3
 8003762:	4603      	mov	r3, r0
 8003764:	3307      	adds	r3, #7
 8003766:	08db      	lsrs	r3, r3, #3
 8003768:	00db      	lsls	r3, r3, #3
 800376a:	ebad 0d03 	sub.w	sp, sp, r3
 800376e:	ab70      	add	r3, sp, #448	; 0x1c0
 8003770:	3300      	adds	r3, #0
 8003772:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
			  int32_t ret;
			  ringBuff_PopArray(&usb_rx_ringbuff, temp, distance + 1);
 8003776:	f8d7 1400 	ldr.w	r1, [r7, #1024]	; 0x400
 800377a:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 800377e:	3301      	adds	r3, #1
 8003780:	461a      	mov	r2, r3
 8003782:	4848      	ldr	r0, [pc, #288]	; (80038a4 <Start_USB_RX_Task+0x1ac>)
 8003784:	f000 ff49 	bl	800461a <ringBuff_PopArray>
			  ret = unPackPayload(temp, distance + 1, data_packet);
 8003788:	f8d7 0400 	ldr.w	r0, [r7, #1024]	; 0x400
 800378c:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8003790:	3301      	adds	r3, #1
 8003792:	f107 020c 	add.w	r2, r7, #12
 8003796:	4619      	mov	r1, r3
 8003798:	f7fe fb32 	bl	8001e00 <unPackPayload>
 800379c:	f8c7 03fc 	str.w	r0, [r7, #1020]	; 0x3fc

			  if( -1 == ret) {
 80037a0:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 80037a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a8:	d077      	beq.n	800389a <Start_USB_RX_Task+0x1a2>
				  //LOG_REPORT("UNPACK FAIL", __LINE__);
			  } else {
				  //LOG_REPORT((char*) temp, __LINE__);
				  cmd_type = packetRead(data_packet, ret, &id_command, &duty_cmd);
 80037aa:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80037ae:	f507 727b 	add.w	r2, r7, #1004	; 0x3ec
 80037b2:	f107 000c 	add.w	r0, r7, #12
 80037b6:	f8d7 13fc 	ldr.w	r1, [r7, #1020]	; 0x3fc
 80037ba:	f7fd fbe5 	bl	8000f88 <packetRead>
 80037be:	4603      	mov	r3, r0
 80037c0:	f887 33fb 	strb.w	r3, [r7, #1019]	; 0x3fb
				  memset(detail, 0, sizeof(detail));
 80037c4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80037c8:	2287      	movs	r2, #135	; 0x87
 80037ca:	2100      	movs	r1, #0
 80037cc:	4618      	mov	r0, r3
 80037ce:	f012 fb31 	bl	8015e34 <memset>
				  detail_length = 0;
 80037d2:	f107 0308 	add.w	r3, r7, #8
 80037d6:	2200      	movs	r2, #0
 80037d8:	601a      	str	r2, [r3, #0]
				  rpd_type = commandReply(cmd_type, duty_cmd, detail, &detail_length);
 80037da:	f507 740a 	add.w	r4, r7, #552	; 0x228
 80037de:	f897 53fb 	ldrb.w	r5, [r7, #1019]	; 0x3fb
 80037e2:	f107 0308 	add.w	r3, r7, #8
 80037e6:	936f      	str	r3, [sp, #444]	; 0x1bc
 80037e8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80037ec:	936e      	str	r3, [sp, #440]	; 0x1b8
 80037ee:	4668      	mov	r0, sp
 80037f0:	f104 0308 	add.w	r3, r4, #8
 80037f4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80037f8:	4619      	mov	r1, r3
 80037fa:	f012 faf7 	bl	8015dec <memcpy>
 80037fe:	e894 000c 	ldmia.w	r4, {r2, r3}
 8003802:	4628      	mov	r0, r5
 8003804:	f7fe f892 	bl	800192c <commandReply>
 8003808:	4603      	mov	r3, r0
 800380a:	f887 33fa 	strb.w	r3, [r7, #1018]	; 0x3fa
				  //LOG_REPORT("tail", usb_rx_ringbuff.tail);
				  if ( RPD_DUTY == rpd_type) {
 800380e:	f897 33fa 	ldrb.w	r3, [r7, #1018]	; 0x3fa
 8003812:	2b09      	cmp	r3, #9
 8003814:	d123      	bne.n	800385e <Start_USB_RX_Task+0x166>
					  DUTY_Command_TypeDef *dataMail;
					  dataMail = NULL;
 8003816:	2300      	movs	r3, #0
 8003818:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
					  // Wait allocate
					  while (dataMail == NULL) {
 800381c:	e008      	b.n	8003830 <Start_USB_RX_Task+0x138>
						  dataMail = osMailAlloc(commandMailHandle, osWaitForever);
 800381e:	4b22      	ldr	r3, [pc, #136]	; (80038a8 <Start_USB_RX_Task+0x1b0>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f04f 31ff 	mov.w	r1, #4294967295
 8003826:	4618      	mov	r0, r3
 8003828:	f00f f992 	bl	8012b50 <osMailAlloc>
 800382c:	f8c7 040c 	str.w	r0, [r7, #1036]	; 0x40c
					  while (dataMail == NULL) {
 8003830:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8003834:	2b00      	cmp	r3, #0
 8003836:	d0f2      	beq.n	800381e <Start_USB_RX_Task+0x126>
					  }
					  memcpy( dataMail, &duty_cmd, sizeof(DUTY_Command_TypeDef));
 8003838:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800383c:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8003840:	4619      	mov	r1, r3
 8003842:	f8d7 040c 	ldr.w	r0, [r7, #1036]	; 0x40c
 8003846:	f012 fad1 	bl	8015dec <memcpy>
					  osStatus result;
					  result = osMailPut(commandMailHandle, dataMail);
 800384a:	4b17      	ldr	r3, [pc, #92]	; (80038a8 <Start_USB_RX_Task+0x1b0>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f8d7 140c 	ldr.w	r1, [r7, #1036]	; 0x40c
 8003852:	4618      	mov	r0, r3
 8003854:	f00f f992 	bl	8012b7c <osMailPut>
 8003858:	f8c7 03f0 	str.w	r0, [r7, #1008]	; 0x3f0
 800385c:	e01d      	b.n	800389a <Start_USB_RX_Task+0x1a2>
						  //LOG_REPORT("DUTY SEND", __LINE__);
					  }

				//   }else if( RPD_POSITION == rpd_type) { 
				// 	  CDC_Transmit_FS(detail, 84);
				  }else if(rpd_type == RPD_TRANSFER){
 800385e:	f897 33fa 	ldrb.w	r3, [r7, #1018]	; 0x3fa
 8003862:	2b0a      	cmp	r3, #10
 8003864:	d019      	beq.n	800389a <Start_USB_RX_Task+0x1a2>

				  }else {
					//   memset(respond, 0, sizeof(respond));
					//   memset(message, 0, sizeof(message));
					  respond_lenght	= commandRespond1(rpd_type, cmd_type,
 8003866:	f897 13fb 	ldrb.w	r1, [r7, #1019]	; 0x3fb
 800386a:	f107 0308 	add.w	r3, r7, #8
 800386e:	681c      	ldr	r4, [r3, #0]
 8003870:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8003874:	f897 03fa 	ldrb.w	r0, [r7, #1018]	; 0x3fa
 8003878:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800387c:	9300      	str	r3, [sp, #0]
 800387e:	4623      	mov	r3, r4
 8003880:	f7fe fa28 	bl	8001cd4 <commandRespond1>
 8003884:	f8c7 03f4 	str.w	r0, [r7, #1012]	; 0x3f4
							  	  	  	  (char *)detail, detail_length,
										  (char *)respond);
					  //message_lenght	= packPayload(respond, message, respond_lenght);
					  CDC_Transmit_FS(respond, respond_lenght);
 8003888:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 800388c:	b29a      	uxth	r2, r3
 800388e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8003892:	4611      	mov	r1, r2
 8003894:	4618      	mov	r0, r3
 8003896:	f011 fe2d 	bl	80154f4 <CDC_Transmit_FS>
 800389a:	46b5      	mov	sp, r6
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, RECEIVE_END);
 800389c:	e736      	b.n	800370c <Start_USB_RX_Task+0x14>
 800389e:	bf00      	nop
 80038a0:	0801b4a8 	.word	0x0801b4a8
 80038a4:	20000004 	.word	0x20000004
 80038a8:	20005a3c 	.word	0x20005a3c

080038ac <FSMC_Write>:
/* Includes ------------------------------------------------------------------*/
#include "fsmc.h"

/* USER CODE BEGIN 0 */
void FSMC_Write(uint32_t ui_address, uint32_t ui_data)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
	*(volatile uint16_t *)ui_address = ui_data;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	b292      	uxth	r2, r2
 80038bc:	801a      	strh	r2, [r3, #0]
}
 80038be:	bf00      	nop
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr

080038ca <FSMC_Read>:

uint16_t FSMC_Read(uint32_t ui_address) {
 80038ca:	b480      	push	{r7}
 80038cc:	b083      	sub	sp, #12
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
	return *(volatile uint16_t *)ui_address;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	881b      	ldrh	r3, [r3, #0]
 80038d6:	b29b      	uxth	r3, r3
}
 80038d8:	4618      	mov	r0, r3
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <MX_FSMC_Init>:

NOR_HandleTypeDef hnor1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b088      	sub	sp, #32
 80038e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80038ea:	1d3b      	adds	r3, r7, #4
 80038ec:	2200      	movs	r2, #0
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	605a      	str	r2, [r3, #4]
 80038f2:	609a      	str	r2, [r3, #8]
 80038f4:	60da      	str	r2, [r3, #12]
 80038f6:	611a      	str	r2, [r3, #16]
 80038f8:	615a      	str	r2, [r3, #20]
 80038fa:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the NOR1 memory initialization sequence
  */
  hnor1.Instance = FSMC_NORSRAM_DEVICE;
 80038fc:	4b27      	ldr	r3, [pc, #156]	; (800399c <MX_FSMC_Init+0xb8>)
 80038fe:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8003902:	601a      	str	r2, [r3, #0]
  hnor1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8003904:	4b25      	ldr	r3, [pc, #148]	; (800399c <MX_FSMC_Init+0xb8>)
 8003906:	4a26      	ldr	r2, [pc, #152]	; (80039a0 <MX_FSMC_Init+0xbc>)
 8003908:	605a      	str	r2, [r3, #4]
  /* hnor1.Init */
  hnor1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800390a:	4b24      	ldr	r3, [pc, #144]	; (800399c <MX_FSMC_Init+0xb8>)
 800390c:	2200      	movs	r2, #0
 800390e:	609a      	str	r2, [r3, #8]
  hnor1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_ENABLE;
 8003910:	4b22      	ldr	r3, [pc, #136]	; (800399c <MX_FSMC_Init+0xb8>)
 8003912:	2202      	movs	r2, #2
 8003914:	60da      	str	r2, [r3, #12]
  hnor1.Init.MemoryType = FSMC_MEMORY_TYPE_NOR;
 8003916:	4b21      	ldr	r3, [pc, #132]	; (800399c <MX_FSMC_Init+0xb8>)
 8003918:	2208      	movs	r2, #8
 800391a:	611a      	str	r2, [r3, #16]
  hnor1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800391c:	4b1f      	ldr	r3, [pc, #124]	; (800399c <MX_FSMC_Init+0xb8>)
 800391e:	2210      	movs	r2, #16
 8003920:	615a      	str	r2, [r3, #20]
  hnor1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8003922:	4b1e      	ldr	r3, [pc, #120]	; (800399c <MX_FSMC_Init+0xb8>)
 8003924:	2200      	movs	r2, #0
 8003926:	619a      	str	r2, [r3, #24]
  hnor1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8003928:	4b1c      	ldr	r3, [pc, #112]	; (800399c <MX_FSMC_Init+0xb8>)
 800392a:	2200      	movs	r2, #0
 800392c:	61da      	str	r2, [r3, #28]
  hnor1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800392e:	4b1b      	ldr	r3, [pc, #108]	; (800399c <MX_FSMC_Init+0xb8>)
 8003930:	2200      	movs	r2, #0
 8003932:	621a      	str	r2, [r3, #32]
  hnor1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8003934:	4b19      	ldr	r3, [pc, #100]	; (800399c <MX_FSMC_Init+0xb8>)
 8003936:	2200      	movs	r2, #0
 8003938:	625a      	str	r2, [r3, #36]	; 0x24
  hnor1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800393a:	4b18      	ldr	r3, [pc, #96]	; (800399c <MX_FSMC_Init+0xb8>)
 800393c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003940:	629a      	str	r2, [r3, #40]	; 0x28
  hnor1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8003942:	4b16      	ldr	r3, [pc, #88]	; (800399c <MX_FSMC_Init+0xb8>)
 8003944:	2200      	movs	r2, #0
 8003946:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8003948:	4b14      	ldr	r3, [pc, #80]	; (800399c <MX_FSMC_Init+0xb8>)
 800394a:	2200      	movs	r2, #0
 800394c:	631a      	str	r2, [r3, #48]	; 0x30
  hnor1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800394e:	4b13      	ldr	r3, [pc, #76]	; (800399c <MX_FSMC_Init+0xb8>)
 8003950:	2200      	movs	r2, #0
 8003952:	635a      	str	r2, [r3, #52]	; 0x34
  hnor1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8003954:	4b11      	ldr	r3, [pc, #68]	; (800399c <MX_FSMC_Init+0xb8>)
 8003956:	2200      	movs	r2, #0
 8003958:	639a      	str	r2, [r3, #56]	; 0x38
  hnor1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800395a:	4b10      	ldr	r3, [pc, #64]	; (800399c <MX_FSMC_Init+0xb8>)
 800395c:	2200      	movs	r2, #0
 800395e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8003960:	230f      	movs	r3, #15
 8003962:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8003964:	230f      	movs	r3, #15
 8003966:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8003968:	23ff      	movs	r3, #255	; 0xff
 800396a:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 800396c:	230f      	movs	r3, #15
 800396e:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8003970:	2310      	movs	r3, #16
 8003972:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8003974:	2311      	movs	r3, #17
 8003976:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8003978:	2300      	movs	r3, #0
 800397a:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_NOR_Init(&hnor1, &Timing, NULL) != HAL_OK)
 800397c:	1d3b      	adds	r3, r7, #4
 800397e:	2200      	movs	r2, #0
 8003980:	4619      	mov	r1, r3
 8003982:	4806      	ldr	r0, [pc, #24]	; (800399c <MX_FSMC_Init+0xb8>)
 8003984:	f008 fcb8 	bl	800c2f8 <HAL_NOR_Init>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 800398e:	f000 fda5 	bl	80044dc <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8003992:	bf00      	nop
 8003994:	3720      	adds	r7, #32
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	20005a44 	.word	0x20005a44
 80039a0:	a0000104 	.word	0xa0000104

080039a4 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039aa:	1d3b      	adds	r3, r7, #4
 80039ac:	2200      	movs	r2, #0
 80039ae:	601a      	str	r2, [r3, #0]
 80039b0:	605a      	str	r2, [r3, #4]
 80039b2:	609a      	str	r2, [r3, #8]
 80039b4:	60da      	str	r2, [r3, #12]
 80039b6:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80039b8:	4b24      	ldr	r3, [pc, #144]	; (8003a4c <HAL_FSMC_MspInit+0xa8>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d140      	bne.n	8003a42 <HAL_FSMC_MspInit+0x9e>
    return;
  }
  FSMC_Initialized = 1;
 80039c0:	4b22      	ldr	r3, [pc, #136]	; (8003a4c <HAL_FSMC_MspInit+0xa8>)
 80039c2:	2201      	movs	r2, #1
 80039c4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80039c6:	2300      	movs	r3, #0
 80039c8:	603b      	str	r3, [r7, #0]
 80039ca:	4b21      	ldr	r3, [pc, #132]	; (8003a50 <HAL_FSMC_MspInit+0xac>)
 80039cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ce:	4a20      	ldr	r2, [pc, #128]	; (8003a50 <HAL_FSMC_MspInit+0xac>)
 80039d0:	f043 0301 	orr.w	r3, r3, #1
 80039d4:	6393      	str	r3, [r2, #56]	; 0x38
 80039d6:	4b1e      	ldr	r3, [pc, #120]	; (8003a50 <HAL_FSMC_MspInit+0xac>)
 80039d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	603b      	str	r3, [r7, #0]
 80039e0:	683b      	ldr	r3, [r7, #0]
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  PB7   ------> FSMC_NL
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80039e2:	f64f 7380 	movw	r3, #65408	; 0xff80
 80039e6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039e8:	2302      	movs	r3, #2
 80039ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ec:	2300      	movs	r3, #0
 80039ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039f0:	2303      	movs	r3, #3
 80039f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80039f4:	230c      	movs	r3, #12
 80039f6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80039f8:	1d3b      	adds	r3, r7, #4
 80039fa:	4619      	mov	r1, r3
 80039fc:	4815      	ldr	r0, [pc, #84]	; (8003a54 <HAL_FSMC_MspInit+0xb0>)
 80039fe:	f008 fac7 	bl	800bf90 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8003a02:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8003a06:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a08:	2302      	movs	r3, #2
 8003a0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a10:	2303      	movs	r3, #3
 8003a12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8003a14:	230c      	movs	r3, #12
 8003a16:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a18:	1d3b      	adds	r3, r7, #4
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	480e      	ldr	r0, [pc, #56]	; (8003a58 <HAL_FSMC_MspInit+0xb4>)
 8003a1e:	f008 fab7 	bl	800bf90 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003a22:	2380      	movs	r3, #128	; 0x80
 8003a24:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a26:	2302      	movs	r3, #2
 8003a28:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8003a32:	230c      	movs	r3, #12
 8003a34:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a36:	1d3b      	adds	r3, r7, #4
 8003a38:	4619      	mov	r1, r3
 8003a3a:	4808      	ldr	r0, [pc, #32]	; (8003a5c <HAL_FSMC_MspInit+0xb8>)
 8003a3c:	f008 faa8 	bl	800bf90 <HAL_GPIO_Init>
 8003a40:	e000      	b.n	8003a44 <HAL_FSMC_MspInit+0xa0>
    return;
 8003a42:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8003a44:	3718      	adds	r7, #24
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	20000ffc 	.word	0x20000ffc
 8003a50:	40023800 	.word	0x40023800
 8003a54:	40021000 	.word	0x40021000
 8003a58:	40020c00 	.word	0x40020c00
 8003a5c:	40020400 	.word	0x40020400

08003a60 <HAL_NOR_MspInit>:

void HAL_NOR_MspInit(NOR_HandleTypeDef* norHandle){
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NOR_MspInit 0 */

  /* USER CODE END NOR_MspInit 0 */
  HAL_FSMC_MspInit();
 8003a68:	f7ff ff9c 	bl	80039a4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NOR_MspInit 1 */

  /* USER CODE END NOR_MspInit 1 */
}
 8003a6c:	bf00      	nop
 8003a6e:	3708      	adds	r7, #8
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	0000      	movs	r0, r0
	...

08003a78 <update_gcode_point>:
 */

#include "gcode_handler.h"

void update_gcode_point(DUTY_Command_TypeDef *duty_cmd, SCARA_Gcode_Cor_TypeDef gcode_point)
{
 8003a78:	b084      	sub	sp, #16
 8003a7a:	b590      	push	{r4, r7, lr}
 8003a7c:	b083      	sub	sp, #12
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
 8003a82:	f107 001c 	add.w	r0, r7, #28
 8003a86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	duty_cmd->target_point.x = (double)gcode_point.X * COR_INVERSE_SCALE + OFFSET_X;
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7fc fd49 	bl	8000524 <__aeabi_i2d>
 8003a92:	a345      	add	r3, pc, #276	; (adr r3, 8003ba8 <update_gcode_point+0x130>)
 8003a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a98:	f7fc fdae 	bl	80005f8 <__aeabi_dmul>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	460c      	mov	r4, r1
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	4621      	mov	r1, r4
 8003aa4:	f04f 0200 	mov.w	r2, #0
 8003aa8:	4b45      	ldr	r3, [pc, #276]	; (8003bc0 <update_gcode_point+0x148>)
 8003aaa:	f7fc fbef 	bl	800028c <__adddf3>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	460c      	mov	r4, r1
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
    duty_cmd->target_point.y = (double)gcode_point.Y * COR_INVERSE_SCALE + OFFSET_Y;
 8003ab8:	6a3b      	ldr	r3, [r7, #32]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7fc fd32 	bl	8000524 <__aeabi_i2d>
 8003ac0:	a339      	add	r3, pc, #228	; (adr r3, 8003ba8 <update_gcode_point+0x130>)
 8003ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac6:	f7fc fd97 	bl	80005f8 <__aeabi_dmul>
 8003aca:	4603      	mov	r3, r0
 8003acc:	460c      	mov	r4, r1
 8003ace:	4618      	mov	r0, r3
 8003ad0:	4621      	mov	r1, r4
 8003ad2:	a337      	add	r3, pc, #220	; (adr r3, 8003bb0 <update_gcode_point+0x138>)
 8003ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad8:	f7fc fbd6 	bl	8000288 <__aeabi_dsub>
 8003adc:	4603      	mov	r3, r0
 8003ade:	460c      	mov	r4, r1
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
    if(gcode_point.type_define[1] == UP_Z){
 8003ae6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8003aea:	2b04      	cmp	r3, #4
 8003aec:	d10d      	bne.n	8003b0a <update_gcode_point+0x92>
  	  duty_cmd->target_point.z = up_z_height + OFFSET_Z;
 8003aee:	4b35      	ldr	r3, [pc, #212]	; (8003bc4 <update_gcode_point+0x14c>)
 8003af0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003af4:	a330      	add	r3, pc, #192	; (adr r3, 8003bb8 <update_gcode_point+0x140>)
 8003af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afa:	f7fc fbc7 	bl	800028c <__adddf3>
 8003afe:	4603      	mov	r3, r0
 8003b00:	460c      	mov	r4, r1
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
 8003b08:	e00c      	b.n	8003b24 <update_gcode_point+0xac>
    }else{
  	  duty_cmd->target_point.z = down_z_height + OFFSET_Z;
 8003b0a:	4b2f      	ldr	r3, [pc, #188]	; (8003bc8 <update_gcode_point+0x150>)
 8003b0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b10:	a329      	add	r3, pc, #164	; (adr r3, 8003bb8 <update_gcode_point+0x140>)
 8003b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b16:	f7fc fbb9 	bl	800028c <__adddf3>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	460c      	mov	r4, r1
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
    }
    duty_cmd->target_point.roll = 0;
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	f04f 0300 	mov.w	r3, #0
 8003b2a:	f04f 0400 	mov.w	r4, #0
 8003b2e:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
    duty_cmd->v_factor = (double)gcode_point.F * COR_INVERSE_SCALE / V_MOVE_MAX;
 8003b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7fc fcf5 	bl	8000524 <__aeabi_i2d>
 8003b3a:	a31b      	add	r3, pc, #108	; (adr r3, 8003ba8 <update_gcode_point+0x130>)
 8003b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b40:	f7fc fd5a 	bl	80005f8 <__aeabi_dmul>
 8003b44:	4603      	mov	r3, r0
 8003b46:	460c      	mov	r4, r1
 8003b48:	4618      	mov	r0, r3
 8003b4a:	4621      	mov	r1, r4
 8003b4c:	f04f 0200 	mov.w	r2, #0
 8003b50:	4b1e      	ldr	r3, [pc, #120]	; (8003bcc <update_gcode_point+0x154>)
 8003b52:	f7fc fe7b 	bl	800084c <__aeabi_ddiv>
 8003b56:	4603      	mov	r3, r0
 8003b58:	460c      	mov	r4, r1
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
    duty_cmd->trajec_type = DUTY_TRAJECTORY_LINEAR;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2202      	movs	r2, #2
 8003b64:	741a      	strb	r2, [r3, #16]
    duty_cmd->coordinate_type = DUTY_COORDINATES_ABS;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	731a      	strb	r2, [r3, #12]
    duty_cmd->modeInit_type = DUTY_MODE_INIT_QV;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2202      	movs	r2, #2
 8003b70:	745a      	strb	r2, [r3, #17]
    if(gcode_point.type_define[0] == LINEAR_TYPE){
 8003b72:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d103      	bne.n	8003b82 <update_gcode_point+0x10a>
  	  duty_cmd->path_type = DUTY_PATH_LINE;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	739a      	strb	r2, [r3, #14]
 8003b80:	e002      	b.n	8003b88 <update_gcode_point+0x110>
    }else if(gcode_point.type_define[0] == ARC_AW_TYPE){
 8003b82:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003b86:	2b03      	cmp	r3, #3

    }else if(gcode_point.type_define[0] == ARC_CW_TYPE){

    }
    duty_cmd->path_type = DUTY_PATH_LINE;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	739a      	strb	r2, [r3, #14]
    duty_cmd->space_type = DUTY_SPACE_TASK;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	735a      	strb	r2, [r3, #13]
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003b9e:	b004      	add	sp, #16
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	f3af 8000 	nop.w
 8003ba8:	a0000000 	.word	0xa0000000
 8003bac:	3eb0c6f7 	.word	0x3eb0c6f7
 8003bb0:	00000000 	.word	0x00000000
 8003bb4:	4062c000 	.word	0x4062c000
 8003bb8:	33333333 	.word	0x33333333
 8003bbc:	4054d333 	.word	0x4054d333
 8003bc0:	406f4000 	.word	0x406f4000
 8003bc4:	20004d60 	.word	0x20004d60
 8003bc8:	20004d68 	.word	0x20004d68
 8003bcc:	40877000 	.word	0x40877000

08003bd0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b08a      	sub	sp, #40	; 0x28
 8003bd4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bd6:	f107 0314 	add.w	r3, r7, #20
 8003bda:	2200      	movs	r2, #0
 8003bdc:	601a      	str	r2, [r3, #0]
 8003bde:	605a      	str	r2, [r3, #4]
 8003be0:	609a      	str	r2, [r3, #8]
 8003be2:	60da      	str	r2, [r3, #12]
 8003be4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003be6:	2300      	movs	r3, #0
 8003be8:	613b      	str	r3, [r7, #16]
 8003bea:	4b51      	ldr	r3, [pc, #324]	; (8003d30 <MX_GPIO_Init+0x160>)
 8003bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bee:	4a50      	ldr	r2, [pc, #320]	; (8003d30 <MX_GPIO_Init+0x160>)
 8003bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8003bf6:	4b4e      	ldr	r3, [pc, #312]	; (8003d30 <MX_GPIO_Init+0x160>)
 8003bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bfe:	613b      	str	r3, [r7, #16]
 8003c00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c02:	2300      	movs	r3, #0
 8003c04:	60fb      	str	r3, [r7, #12]
 8003c06:	4b4a      	ldr	r3, [pc, #296]	; (8003d30 <MX_GPIO_Init+0x160>)
 8003c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0a:	4a49      	ldr	r2, [pc, #292]	; (8003d30 <MX_GPIO_Init+0x160>)
 8003c0c:	f043 0301 	orr.w	r3, r3, #1
 8003c10:	6313      	str	r3, [r2, #48]	; 0x30
 8003c12:	4b47      	ldr	r3, [pc, #284]	; (8003d30 <MX_GPIO_Init+0x160>)
 8003c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	60fb      	str	r3, [r7, #12]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c1e:	2300      	movs	r3, #0
 8003c20:	60bb      	str	r3, [r7, #8]
 8003c22:	4b43      	ldr	r3, [pc, #268]	; (8003d30 <MX_GPIO_Init+0x160>)
 8003c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c26:	4a42      	ldr	r2, [pc, #264]	; (8003d30 <MX_GPIO_Init+0x160>)
 8003c28:	f043 0310 	orr.w	r3, r3, #16
 8003c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c2e:	4b40      	ldr	r3, [pc, #256]	; (8003d30 <MX_GPIO_Init+0x160>)
 8003c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c32:	f003 0310 	and.w	r3, r3, #16
 8003c36:	60bb      	str	r3, [r7, #8]
 8003c38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	607b      	str	r3, [r7, #4]
 8003c3e:	4b3c      	ldr	r3, [pc, #240]	; (8003d30 <MX_GPIO_Init+0x160>)
 8003c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c42:	4a3b      	ldr	r2, [pc, #236]	; (8003d30 <MX_GPIO_Init+0x160>)
 8003c44:	f043 0302 	orr.w	r3, r3, #2
 8003c48:	6313      	str	r3, [r2, #48]	; 0x30
 8003c4a:	4b39      	ldr	r3, [pc, #228]	; (8003d30 <MX_GPIO_Init+0x160>)
 8003c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	607b      	str	r3, [r7, #4]
 8003c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c56:	2300      	movs	r3, #0
 8003c58:	603b      	str	r3, [r7, #0]
 8003c5a:	4b35      	ldr	r3, [pc, #212]	; (8003d30 <MX_GPIO_Init+0x160>)
 8003c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5e:	4a34      	ldr	r2, [pc, #208]	; (8003d30 <MX_GPIO_Init+0x160>)
 8003c60:	f043 0308 	orr.w	r3, r3, #8
 8003c64:	6313      	str	r3, [r2, #48]	; 0x30
 8003c66:	4b32      	ldr	r3, [pc, #200]	; (8003d30 <MX_GPIO_Init+0x160>)
 8003c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6a:	f003 0308 	and.w	r3, r3, #8
 8003c6e:	603b      	str	r3, [r7, #0]
 8003c70:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUTPUT_1_Pin|OUTPUT_2_Pin|USB_SIGN_Pin, GPIO_PIN_RESET);
 8003c72:	2200      	movs	r2, #0
 8003c74:	f44f 6141 	mov.w	r1, #3088	; 0xc10
 8003c78:	482e      	ldr	r0, [pc, #184]	; (8003d34 <MX_GPIO_Init+0x164>)
 8003c7a:	f008 fb23 	bl	800c2c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ENCODER_RESET_Pin|PULSE_WRITE_Pin|CAPTURE_ENABLE_Pin|STOP_Pin, GPIO_PIN_RESET);
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f641 0148 	movw	r1, #6216	; 0x1848
 8003c84:	482c      	ldr	r0, [pc, #176]	; (8003d38 <MX_GPIO_Init+0x168>)
 8003c86:	f008 fb1d 	bl	800c2c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEP_SLEEP_Pin|STEP_RESET_Pin|STEP_ENABLE_Pin, GPIO_PIN_RESET);
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8003c90:	482a      	ldr	r0, [pc, #168]	; (8003d3c <MX_GPIO_Init+0x16c>)
 8003c92:	f008 fb17 	bl	800c2c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OUTPUT_1_Pin|OUTPUT_2_Pin|USB_SIGN_Pin;
 8003c96:	f44f 6341 	mov.w	r3, #3088	; 0xc10
 8003c9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ca8:	f107 0314 	add.w	r3, r7, #20
 8003cac:	4619      	mov	r1, r3
 8003cae:	4821      	ldr	r0, [pc, #132]	; (8003d34 <MX_GPIO_Init+0x164>)
 8003cb0:	f008 f96e 	bl	800bf90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = ENCODER_RESET_Pin|CAPTURE_ENABLE_Pin|STOP_Pin;
 8003cb4:	f640 0348 	movw	r3, #2120	; 0x848
 8003cb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003cc6:	f107 0314 	add.w	r3, r7, #20
 8003cca:	4619      	mov	r1, r3
 8003ccc:	481a      	ldr	r0, [pc, #104]	; (8003d38 <MX_GPIO_Init+0x168>)
 8003cce:	f008 f95f 	bl	800bf90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PULSE_WRITE_Pin;
 8003cd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PULSE_WRITE_GPIO_Port, &GPIO_InitStruct);
 8003ce4:	f107 0314 	add.w	r3, r7, #20
 8003ce8:	4619      	mov	r1, r3
 8003cea:	4813      	ldr	r0, [pc, #76]	; (8003d38 <MX_GPIO_Init+0x168>)
 8003cec:	f008 f950 	bl	800bf90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = CPLD_LIMIT_Pin|CPLD_BUSY_Pin;
 8003cf0:	f242 0304 	movw	r3, #8196	; 0x2004
 8003cf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003cfe:	f107 0314 	add.w	r3, r7, #20
 8003d02:	4619      	mov	r1, r3
 8003d04:	480c      	ldr	r0, [pc, #48]	; (8003d38 <MX_GPIO_Init+0x168>)
 8003d06:	f008 f943 	bl	800bf90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = STEP_SLEEP_Pin|STEP_RESET_Pin|STEP_ENABLE_Pin;
 8003d0a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003d0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d10:	2301      	movs	r3, #1
 8003d12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d14:	2300      	movs	r3, #0
 8003d16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d1c:	f107 0314 	add.w	r3, r7, #20
 8003d20:	4619      	mov	r1, r3
 8003d22:	4806      	ldr	r0, [pc, #24]	; (8003d3c <MX_GPIO_Init+0x16c>)
 8003d24:	f008 f934 	bl	800bf90 <HAL_GPIO_Init>

}
 8003d28:	bf00      	nop
 8003d2a:	3728      	adds	r7, #40	; 0x28
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	40023800 	.word	0x40023800
 8003d34:	40020400 	.word	0x40020400
 8003d38:	40020c00 	.word	0x40020c00
 8003d3c:	40020000 	.word	0x40020000

08003d40 <kinematicForward>:
#include "kinematic.h"
#include "common_def.h"
#include "math.h"
#include "system_params.h"

uint8_t		kinematicForward(SCARA_PositionTypeDef *pnt) {
 8003d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d42:	b08b      	sub	sp, #44	; 0x2c
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
	double x, y, z, roll;

	x =   a1*cos(pnt->Theta1)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8003d4e:	eeb0 0a47 	vmov.f32	s0, s14
 8003d52:	eef0 0a67 	vmov.f32	s1, s15
 8003d56:	f015 fe37 	bl	80199c8 <cos>
 8003d5a:	ec51 0b10 	vmov	r0, r1, d0
 8003d5e:	a38e      	add	r3, pc, #568	; (adr r3, 8003f98 <kinematicForward+0x258>)
 8003d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d64:	f7fc fc48 	bl	80005f8 <__aeabi_dmul>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	460c      	mov	r4, r1
 8003d6c:	461d      	mov	r5, r3
 8003d6e:	4626      	mov	r6, r4
		+ a2*cos(pnt->Theta1 + pnt->Theta2)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	4623      	mov	r3, r4
 8003d80:	f7fc fa84 	bl	800028c <__adddf3>
 8003d84:	4603      	mov	r3, r0
 8003d86:	460c      	mov	r4, r1
 8003d88:	ec44 3b17 	vmov	d7, r3, r4
 8003d8c:	eeb0 0a47 	vmov.f32	s0, s14
 8003d90:	eef0 0a67 	vmov.f32	s1, s15
 8003d94:	f015 fe18 	bl	80199c8 <cos>
 8003d98:	ec51 0b10 	vmov	r0, r1, d0
 8003d9c:	f04f 0200 	mov.w	r2, #0
 8003da0:	4b83      	ldr	r3, [pc, #524]	; (8003fb0 <kinematicForward+0x270>)
 8003da2:	f7fc fc29 	bl	80005f8 <__aeabi_dmul>
 8003da6:	4603      	mov	r3, r0
 8003da8:	460c      	mov	r4, r1
 8003daa:	461a      	mov	r2, r3
 8003dac:	4623      	mov	r3, r4
 8003dae:	4628      	mov	r0, r5
 8003db0:	4631      	mov	r1, r6
 8003db2:	f7fc fa6b 	bl	800028c <__adddf3>
 8003db6:	4603      	mov	r3, r0
 8003db8:	460c      	mov	r4, r1
 8003dba:	461d      	mov	r5, r3
 8003dbc:	4626      	mov	r6, r4
		+ a4*cos(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8003dca:	461a      	mov	r2, r3
 8003dcc:	4623      	mov	r3, r4
 8003dce:	f7fc fa5d 	bl	800028c <__adddf3>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	460c      	mov	r4, r1
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	4621      	mov	r1, r4
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 8003de0:	461a      	mov	r2, r3
 8003de2:	4623      	mov	r3, r4
 8003de4:	f7fc fa50 	bl	8000288 <__aeabi_dsub>
 8003de8:	4603      	mov	r3, r0
 8003dea:	460c      	mov	r4, r1
 8003dec:	ec44 3b17 	vmov	d7, r3, r4
 8003df0:	eeb0 0a47 	vmov.f32	s0, s14
 8003df4:	eef0 0a67 	vmov.f32	s1, s15
 8003df8:	f015 fde6 	bl	80199c8 <cos>
 8003dfc:	ec51 0b10 	vmov	r0, r1, d0
 8003e00:	a363      	add	r3, pc, #396	; (adr r3, 8003f90 <kinematicForward+0x250>)
 8003e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e06:	f7fc fbf7 	bl	80005f8 <__aeabi_dmul>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	460c      	mov	r4, r1
	x =   a1*cos(pnt->Theta1)
 8003e0e:	461a      	mov	r2, r3
 8003e10:	4623      	mov	r3, r4
 8003e12:	4628      	mov	r0, r5
 8003e14:	4631      	mov	r1, r6
 8003e16:	f7fc fa39 	bl	800028c <__adddf3>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	460c      	mov	r4, r1
 8003e1e:	e9c7 3408 	strd	r3, r4, [r7, #32]
	y =   a1*sin(pnt->Theta1)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8003e28:	eeb0 0a47 	vmov.f32	s0, s14
 8003e2c:	eef0 0a67 	vmov.f32	s1, s15
 8003e30:	f015 fe5a 	bl	8019ae8 <sin>
 8003e34:	ec51 0b10 	vmov	r0, r1, d0
 8003e38:	a357      	add	r3, pc, #348	; (adr r3, 8003f98 <kinematicForward+0x258>)
 8003e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e3e:	f7fc fbdb 	bl	80005f8 <__aeabi_dmul>
 8003e42:	4603      	mov	r3, r0
 8003e44:	460c      	mov	r4, r1
 8003e46:	461d      	mov	r5, r3
 8003e48:	4626      	mov	r6, r4
		+ a2*sin(pnt->Theta1 + pnt->Theta2)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8003e56:	461a      	mov	r2, r3
 8003e58:	4623      	mov	r3, r4
 8003e5a:	f7fc fa17 	bl	800028c <__adddf3>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	460c      	mov	r4, r1
 8003e62:	ec44 3b17 	vmov	d7, r3, r4
 8003e66:	eeb0 0a47 	vmov.f32	s0, s14
 8003e6a:	eef0 0a67 	vmov.f32	s1, s15
 8003e6e:	f015 fe3b 	bl	8019ae8 <sin>
 8003e72:	ec51 0b10 	vmov	r0, r1, d0
 8003e76:	f04f 0200 	mov.w	r2, #0
 8003e7a:	4b4d      	ldr	r3, [pc, #308]	; (8003fb0 <kinematicForward+0x270>)
 8003e7c:	f7fc fbbc 	bl	80005f8 <__aeabi_dmul>
 8003e80:	4603      	mov	r3, r0
 8003e82:	460c      	mov	r4, r1
 8003e84:	461a      	mov	r2, r3
 8003e86:	4623      	mov	r3, r4
 8003e88:	4628      	mov	r0, r5
 8003e8a:	4631      	mov	r1, r6
 8003e8c:	f7fc f9fe 	bl	800028c <__adddf3>
 8003e90:	4603      	mov	r3, r0
 8003e92:	460c      	mov	r4, r1
 8003e94:	461d      	mov	r5, r3
 8003e96:	4626      	mov	r6, r4
		+ a4*sin(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	4623      	mov	r3, r4
 8003ea8:	f7fc f9f0 	bl	800028c <__adddf3>
 8003eac:	4603      	mov	r3, r0
 8003eae:	460c      	mov	r4, r1
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	4621      	mov	r1, r4
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 8003eba:	461a      	mov	r2, r3
 8003ebc:	4623      	mov	r3, r4
 8003ebe:	f7fc f9e3 	bl	8000288 <__aeabi_dsub>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	460c      	mov	r4, r1
 8003ec6:	ec44 3b17 	vmov	d7, r3, r4
 8003eca:	eeb0 0a47 	vmov.f32	s0, s14
 8003ece:	eef0 0a67 	vmov.f32	s1, s15
 8003ed2:	f015 fe09 	bl	8019ae8 <sin>
 8003ed6:	ec51 0b10 	vmov	r0, r1, d0
 8003eda:	a32d      	add	r3, pc, #180	; (adr r3, 8003f90 <kinematicForward+0x250>)
 8003edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee0:	f7fc fb8a 	bl	80005f8 <__aeabi_dmul>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	460c      	mov	r4, r1
	y =   a1*sin(pnt->Theta1)
 8003ee8:	461a      	mov	r2, r3
 8003eea:	4623      	mov	r3, r4
 8003eec:	4628      	mov	r0, r5
 8003eee:	4631      	mov	r1, r6
 8003ef0:	f7fc f9cc 	bl	800028c <__adddf3>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	460c      	mov	r4, r1
 8003ef8:	e9c7 3406 	strd	r3, r4, [r7, #24]
	z =   d1 - pnt->D3 - d4;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 8003f02:	461a      	mov	r2, r3
 8003f04:	4623      	mov	r3, r4
 8003f06:	a126      	add	r1, pc, #152	; (adr r1, 8003fa0 <kinematicForward+0x260>)
 8003f08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003f0c:	f7fc f9bc 	bl	8000288 <__aeabi_dsub>
 8003f10:	4603      	mov	r3, r0
 8003f12:	460c      	mov	r4, r1
 8003f14:	4618      	mov	r0, r3
 8003f16:	4621      	mov	r1, r4
 8003f18:	a323      	add	r3, pc, #140	; (adr r3, 8003fa8 <kinematicForward+0x268>)
 8003f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f1e:	f7fc f9b3 	bl	8000288 <__aeabi_dsub>
 8003f22:	4603      	mov	r3, r0
 8003f24:	460c      	mov	r4, r1
 8003f26:	e9c7 3404 	strd	r3, r4, [r7, #16]
	roll = pnt->Theta1 + pnt->Theta2 - pnt->Theta4;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8003f36:	461a      	mov	r2, r3
 8003f38:	4623      	mov	r3, r4
 8003f3a:	f7fc f9a7 	bl	800028c <__adddf3>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	460c      	mov	r4, r1
 8003f42:	4618      	mov	r0, r3
 8003f44:	4621      	mov	r1, r4
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	4623      	mov	r3, r4
 8003f50:	f7fc f99a 	bl	8000288 <__aeabi_dsub>
 8003f54:	4603      	mov	r3, r0
 8003f56:	460c      	mov	r4, r1
 8003f58:	e9c7 3402 	strd	r3, r4, [r7, #8]

	pnt->x = x;
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003f62:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	pnt->y = y;
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003f6c:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	pnt->z = z;
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003f76:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	pnt->roll = roll;
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003f80:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

	return TRUE;
 8003f84:	2301      	movs	r3, #1
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	372c      	adds	r7, #44	; 0x2c
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	80000000 	.word	0x80000000
 8003f94:	40402e14 	.word	0x40402e14
 8003f98:	00000000 	.word	0x00000000
 8003f9c:	4068a000 	.word	0x4068a000
 8003fa0:	00000000 	.word	0x00000000
 8003fa4:	406a6000 	.word	0x406a6000
 8003fa8:	e0000000 	.word	0xe0000000
 8003fac:	40536b22 	.word	0x40536b22
 8003fb0:	40640000 	.word	0x40640000
 8003fb4:	00000000 	.word	0x00000000

08003fb8 <kinematicInverse>:

uint8_t		kinematicInverse(SCARA_PositionTypeDef *pnt, SCARA_PositionTypeDef current) {
 8003fb8:	b082      	sub	sp, #8
 8003fba:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fbe:	b0a0      	sub	sp, #128	; 0x80
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8003fc8:	e881 000c 	stmia.w	r1, {r2, r3}
	double theta1, theta2, theta2_positive, theta2_negative, d3, theta4 , pWx, pWy;
	double s1, c1, s2, s2_positive, s2_negative, c2 , temp;

	d3  = d1 - d4 - pnt->z;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8003fd2:	a1f2      	add	r1, pc, #968	; (adr r1, 800439c <kinematicInverse+0x3e4>)
 8003fd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003fd8:	f7fc f956 	bl	8000288 <__aeabi_dsub>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	460b      	mov	r3, r1
 8003fe0:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	pWx = pnt->x - a4*cos(pnt->roll);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	e9d3 ab12 	ldrd	sl, fp, [r3, #72]	; 0x48
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8003ff0:	eeb0 0a47 	vmov.f32	s0, s14
 8003ff4:	eef0 0a67 	vmov.f32	s1, s15
 8003ff8:	f015 fce6 	bl	80199c8 <cos>
 8003ffc:	ec51 0b10 	vmov	r0, r1, d0
 8004000:	a3e8      	add	r3, pc, #928	; (adr r3, 80043a4 <kinematicInverse+0x3ec>)
 8004002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004006:	f7fc faf7 	bl	80005f8 <__aeabi_dmul>
 800400a:	4602      	mov	r2, r0
 800400c:	460b      	mov	r3, r1
 800400e:	4650      	mov	r0, sl
 8004010:	4659      	mov	r1, fp
 8004012:	f7fc f939 	bl	8000288 <__aeabi_dsub>
 8004016:	4602      	mov	r2, r0
 8004018:	460b      	mov	r3, r1
 800401a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	pWy = pnt->y - a4*sin(pnt->roll);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	e9d3 ab14 	ldrd	sl, fp, [r3, #80]	; 0x50
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 800402a:	eeb0 0a47 	vmov.f32	s0, s14
 800402e:	eef0 0a67 	vmov.f32	s1, s15
 8004032:	f015 fd59 	bl	8019ae8 <sin>
 8004036:	ec51 0b10 	vmov	r0, r1, d0
 800403a:	a3da      	add	r3, pc, #872	; (adr r3, 80043a4 <kinematicInverse+0x3ec>)
 800403c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004040:	f7fc fada 	bl	80005f8 <__aeabi_dmul>
 8004044:	4602      	mov	r2, r0
 8004046:	460b      	mov	r3, r1
 8004048:	4650      	mov	r0, sl
 800404a:	4659      	mov	r1, fp
 800404c:	f7fc f91c 	bl	8000288 <__aeabi_dsub>
 8004050:	4602      	mov	r2, r0
 8004052:	460b      	mov	r3, r1
 8004054:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	c2  = (pWx*pWx + pWy*pWy - a1*a1 - a2*a2) / (2*a1*a2);
 8004058:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800405c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004060:	f7fc faca 	bl	80005f8 <__aeabi_dmul>
 8004064:	4602      	mov	r2, r0
 8004066:	460b      	mov	r3, r1
 8004068:	4692      	mov	sl, r2
 800406a:	469b      	mov	fp, r3
 800406c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004070:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004074:	f7fc fac0 	bl	80005f8 <__aeabi_dmul>
 8004078:	4602      	mov	r2, r0
 800407a:	460b      	mov	r3, r1
 800407c:	4650      	mov	r0, sl
 800407e:	4659      	mov	r1, fp
 8004080:	f7fc f904 	bl	800028c <__adddf3>
 8004084:	4602      	mov	r2, r0
 8004086:	460b      	mov	r3, r1
 8004088:	4610      	mov	r0, r2
 800408a:	4619      	mov	r1, r3
 800408c:	a3c7      	add	r3, pc, #796	; (adr r3, 80043ac <kinematicInverse+0x3f4>)
 800408e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004092:	f7fc f8f9 	bl	8000288 <__aeabi_dsub>
 8004096:	4602      	mov	r2, r0
 8004098:	460b      	mov	r3, r1
 800409a:	4610      	mov	r0, r2
 800409c:	4619      	mov	r1, r3
 800409e:	f04f 0200 	mov.w	r2, #0
 80040a2:	4bbb      	ldr	r3, [pc, #748]	; (8004390 <kinematicInverse+0x3d8>)
 80040a4:	f7fc f8f0 	bl	8000288 <__aeabi_dsub>
 80040a8:	4602      	mov	r2, r0
 80040aa:	460b      	mov	r3, r1
 80040ac:	4610      	mov	r0, r2
 80040ae:	4619      	mov	r1, r3
 80040b0:	a3b3      	add	r3, pc, #716	; (adr r3, 8004380 <kinematicInverse+0x3c8>)
 80040b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b6:	f7fc fbc9 	bl	800084c <__aeabi_ddiv>
 80040ba:	4602      	mov	r2, r0
 80040bc:	460b      	mov	r3, r1
 80040be:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp = 1 - c2*c2;
 80040c2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80040c6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80040ca:	f7fc fa95 	bl	80005f8 <__aeabi_dmul>
 80040ce:	4602      	mov	r2, r0
 80040d0:	460b      	mov	r3, r1
 80040d2:	f04f 0000 	mov.w	r0, #0
 80040d6:	49af      	ldr	r1, [pc, #700]	; (8004394 <kinematicInverse+0x3dc>)
 80040d8:	f7fc f8d6 	bl	8000288 <__aeabi_dsub>
 80040dc:	4602      	mov	r2, r0
 80040de:	460b      	mov	r3, r1
 80040e0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	if ( temp < 0 ) {
 80040e4:	f04f 0200 	mov.w	r2, #0
 80040e8:	f04f 0300 	mov.w	r3, #0
 80040ec:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80040f0:	f7fc fcf4 	bl	8000adc <__aeabi_dcmplt>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d001      	beq.n	80040fe <kinematicInverse+0x146>
		return FALSE;
 80040fa:	2300      	movs	r3, #0
 80040fc:	e136      	b.n	800436c <kinematicInverse+0x3b4>
	}
	s2_positive  = sqrt(temp); // Note that there are 2 solution: elbow up & elbow down
 80040fe:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8004102:	f015 fd7b 	bl	8019bfc <sqrt>
 8004106:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
	s2_negative	 = -s2_positive;
 800410a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800410c:	63bb      	str	r3, [r7, #56]	; 0x38
 800410e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004110:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004114:	63fb      	str	r3, [r7, #60]	; 0x3c

	theta2_positive = atan2(s2_positive,c2);
 8004116:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 800411a:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800411e:	f015 fd6b 	bl	8019bf8 <atan2>
 8004122:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
	theta2_negative = atan2(s2_negative,c2);
 8004126:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 800412a:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 800412e:	f015 fd63 	bl	8019bf8 <atan2>
 8004132:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	// Choose relevant situation : nearest
	if ( fabs( theta2_positive - current.Theta2) <= fabs( theta2_negative - current.Theta2)) {
 8004136:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800413a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800413e:	f7fc f8a3 	bl	8000288 <__aeabi_dsub>
 8004142:	4602      	mov	r2, r0
 8004144:	460b      	mov	r3, r1
 8004146:	4614      	mov	r4, r2
 8004148:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800414c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8004150:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004154:	f7fc f898 	bl	8000288 <__aeabi_dsub>
 8004158:	4602      	mov	r2, r0
 800415a:	460b      	mov	r3, r1
 800415c:	4690      	mov	r8, r2
 800415e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8004162:	4642      	mov	r2, r8
 8004164:	464b      	mov	r3, r9
 8004166:	4620      	mov	r0, r4
 8004168:	4629      	mov	r1, r5
 800416a:	f7fc fcc1 	bl	8000af0 <__aeabi_dcmple>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d008      	beq.n	8004186 <kinematicInverse+0x1ce>
		s2 		= s2_positive;
 8004174:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8004178:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		theta2 	= theta2_positive;
 800417c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8004180:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
 8004184:	e007      	b.n	8004196 <kinematicInverse+0x1de>
	} else {
		s2 		= s2_negative;
 8004186:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800418a:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		theta2 	= theta2_negative;
 800418e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8004192:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	}

	s1 = ((a1 + a2*c2)*pWy - a2*s2*pWx) / (pWx*pWx + pWy*pWy);
 8004196:	f04f 0200 	mov.w	r2, #0
 800419a:	4b7f      	ldr	r3, [pc, #508]	; (8004398 <kinematicInverse+0x3e0>)
 800419c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80041a0:	f7fc fa2a 	bl	80005f8 <__aeabi_dmul>
 80041a4:	4603      	mov	r3, r0
 80041a6:	460c      	mov	r4, r1
 80041a8:	4618      	mov	r0, r3
 80041aa:	4621      	mov	r1, r4
 80041ac:	a376      	add	r3, pc, #472	; (adr r3, 8004388 <kinematicInverse+0x3d0>)
 80041ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b2:	f7fc f86b 	bl	800028c <__adddf3>
 80041b6:	4603      	mov	r3, r0
 80041b8:	460c      	mov	r4, r1
 80041ba:	4618      	mov	r0, r3
 80041bc:	4621      	mov	r1, r4
 80041be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80041c2:	f7fc fa19 	bl	80005f8 <__aeabi_dmul>
 80041c6:	4603      	mov	r3, r0
 80041c8:	460c      	mov	r4, r1
 80041ca:	4625      	mov	r5, r4
 80041cc:	461c      	mov	r4, r3
 80041ce:	f04f 0200 	mov.w	r2, #0
 80041d2:	4b71      	ldr	r3, [pc, #452]	; (8004398 <kinematicInverse+0x3e0>)
 80041d4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80041d8:	f7fc fa0e 	bl	80005f8 <__aeabi_dmul>
 80041dc:	4602      	mov	r2, r0
 80041de:	460b      	mov	r3, r1
 80041e0:	4610      	mov	r0, r2
 80041e2:	4619      	mov	r1, r3
 80041e4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80041e8:	f7fc fa06 	bl	80005f8 <__aeabi_dmul>
 80041ec:	4602      	mov	r2, r0
 80041ee:	460b      	mov	r3, r1
 80041f0:	4620      	mov	r0, r4
 80041f2:	4629      	mov	r1, r5
 80041f4:	f7fc f848 	bl	8000288 <__aeabi_dsub>
 80041f8:	4603      	mov	r3, r0
 80041fa:	460c      	mov	r4, r1
 80041fc:	4625      	mov	r5, r4
 80041fe:	461c      	mov	r4, r3
 8004200:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004204:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004208:	f7fc f9f6 	bl	80005f8 <__aeabi_dmul>
 800420c:	4602      	mov	r2, r0
 800420e:	460b      	mov	r3, r1
 8004210:	4690      	mov	r8, r2
 8004212:	4699      	mov	r9, r3
 8004214:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004218:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800421c:	f7fc f9ec 	bl	80005f8 <__aeabi_dmul>
 8004220:	4602      	mov	r2, r0
 8004222:	460b      	mov	r3, r1
 8004224:	4640      	mov	r0, r8
 8004226:	4649      	mov	r1, r9
 8004228:	f7fc f830 	bl	800028c <__adddf3>
 800422c:	4602      	mov	r2, r0
 800422e:	460b      	mov	r3, r1
 8004230:	4620      	mov	r0, r4
 8004232:	4629      	mov	r1, r5
 8004234:	f7fc fb0a 	bl	800084c <__aeabi_ddiv>
 8004238:	4603      	mov	r3, r0
 800423a:	460c      	mov	r4, r1
 800423c:	e9c7 3408 	strd	r3, r4, [r7, #32]
	c1 = ((a1 + a2*c2)*pWx + a2*s2*pWy) / (pWx*pWx + pWy*pWy);
 8004240:	f04f 0200 	mov.w	r2, #0
 8004244:	4b54      	ldr	r3, [pc, #336]	; (8004398 <kinematicInverse+0x3e0>)
 8004246:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800424a:	f7fc f9d5 	bl	80005f8 <__aeabi_dmul>
 800424e:	4603      	mov	r3, r0
 8004250:	460c      	mov	r4, r1
 8004252:	4618      	mov	r0, r3
 8004254:	4621      	mov	r1, r4
 8004256:	a34c      	add	r3, pc, #304	; (adr r3, 8004388 <kinematicInverse+0x3d0>)
 8004258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800425c:	f7fc f816 	bl	800028c <__adddf3>
 8004260:	4603      	mov	r3, r0
 8004262:	460c      	mov	r4, r1
 8004264:	4618      	mov	r0, r3
 8004266:	4621      	mov	r1, r4
 8004268:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800426c:	f7fc f9c4 	bl	80005f8 <__aeabi_dmul>
 8004270:	4603      	mov	r3, r0
 8004272:	460c      	mov	r4, r1
 8004274:	4625      	mov	r5, r4
 8004276:	461c      	mov	r4, r3
 8004278:	f04f 0200 	mov.w	r2, #0
 800427c:	4b46      	ldr	r3, [pc, #280]	; (8004398 <kinematicInverse+0x3e0>)
 800427e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8004282:	f7fc f9b9 	bl	80005f8 <__aeabi_dmul>
 8004286:	4602      	mov	r2, r0
 8004288:	460b      	mov	r3, r1
 800428a:	4610      	mov	r0, r2
 800428c:	4619      	mov	r1, r3
 800428e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004292:	f7fc f9b1 	bl	80005f8 <__aeabi_dmul>
 8004296:	4602      	mov	r2, r0
 8004298:	460b      	mov	r3, r1
 800429a:	4620      	mov	r0, r4
 800429c:	4629      	mov	r1, r5
 800429e:	f7fb fff5 	bl	800028c <__adddf3>
 80042a2:	4603      	mov	r3, r0
 80042a4:	460c      	mov	r4, r1
 80042a6:	4625      	mov	r5, r4
 80042a8:	461c      	mov	r4, r3
 80042aa:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80042ae:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80042b2:	f7fc f9a1 	bl	80005f8 <__aeabi_dmul>
 80042b6:	4602      	mov	r2, r0
 80042b8:	460b      	mov	r3, r1
 80042ba:	4690      	mov	r8, r2
 80042bc:	4699      	mov	r9, r3
 80042be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80042c2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80042c6:	f7fc f997 	bl	80005f8 <__aeabi_dmul>
 80042ca:	4602      	mov	r2, r0
 80042cc:	460b      	mov	r3, r1
 80042ce:	4640      	mov	r0, r8
 80042d0:	4649      	mov	r1, r9
 80042d2:	f7fb ffdb 	bl	800028c <__adddf3>
 80042d6:	4602      	mov	r2, r0
 80042d8:	460b      	mov	r3, r1
 80042da:	4620      	mov	r0, r4
 80042dc:	4629      	mov	r1, r5
 80042de:	f7fc fab5 	bl	800084c <__aeabi_ddiv>
 80042e2:	4603      	mov	r3, r0
 80042e4:	460c      	mov	r4, r1
 80042e6:	e9c7 3406 	strd	r3, r4, [r7, #24]
	theta1 = atan2(s1,c1);
 80042ea:	ed97 1b06 	vldr	d1, [r7, #24]
 80042ee:	ed97 0b08 	vldr	d0, [r7, #32]
 80042f2:	f015 fc81 	bl	8019bf8 <atan2>
 80042f6:	ed87 0b04 	vstr	d0, [r7, #16]
 	theta4 = theta1 + theta2 - pnt->roll;
 80042fa:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80042fe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004302:	f7fb ffc3 	bl	800028c <__adddf3>
 8004306:	4603      	mov	r3, r0
 8004308:	460c      	mov	r4, r1
 800430a:	4618      	mov	r0, r3
 800430c:	4621      	mov	r1, r4
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8004314:	461a      	mov	r2, r3
 8004316:	4623      	mov	r3, r4
 8004318:	f7fb ffb6 	bl	8000288 <__aeabi_dsub>
 800431c:	4603      	mov	r3, r0
 800431e:	460c      	mov	r4, r1
 8004320:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if ( SCARA_STATUS_OK != scaraCheckWorkSpace4(theta1, theta2, d3, theta4)) {
 8004324:	ed97 3b02 	vldr	d3, [r7, #8]
 8004328:	ed97 2b1a 	vldr	d2, [r7, #104]	; 0x68
 800432c:	ed97 1b1e 	vldr	d1, [r7, #120]	; 0x78
 8004330:	ed97 0b04 	vldr	d0, [r7, #16]
 8004334:	f006 f81c 	bl	800a370 <scaraCheckWorkSpace4>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <kinematicInverse+0x38a>
		return FALSE; // Over workspace !!!
 800433e:	2300      	movs	r3, #0
 8004340:	e014      	b.n	800436c <kinematicInverse+0x3b4>
	}
	pnt->Theta1 = theta1;
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004348:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	pnt->Theta2 = theta2;
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8004352:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	pnt->D3		= d3;
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 800435c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	pnt->Theta4 = theta4;
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004366:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

	return TRUE; // All is well
 800436a:	2301      	movs	r3, #1
}
 800436c:	4618      	mov	r0, r3
 800436e:	3780      	adds	r7, #128	; 0x80
 8004370:	46bd      	mov	sp, r7
 8004372:	e8bd 4fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004376:	b002      	add	sp, #8
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	f3af 8000 	nop.w
 8004380:	00000000 	.word	0x00000000
 8004384:	40eec800 	.word	0x40eec800
 8004388:	00000000 	.word	0x00000000
 800438c:	4068a000 	.word	0x4068a000
 8004390:	40d90000 	.word	0x40d90000
 8004394:	3ff00000 	.word	0x3ff00000
 8004398:	40640000 	.word	0x40640000
 800439c:	80000000 	.word	0x80000000
 80043a0:	4060aa6e 	.word	0x4060aa6e
 80043a4:	80000000 	.word	0x80000000
 80043a8:	40402e14 	.word	0x40402e14
 80043ac:	00000000 	.word	0x00000000
 80043b0:	40e2f320 	.word	0x40e2f320

080043b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80043b8:	f007 f906 	bl	800b5c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80043bc:	f000 f812 	bl	80043e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80043c0:	f7ff fc06 	bl	8003bd0 <MX_GPIO_Init>
  MX_DMA_Init();
 80043c4:	f7fd fd8e 	bl	8001ee4 <MX_DMA_Init>
  MX_UART4_Init();
 80043c8:	f007 f800 	bl	800b3cc <MX_UART4_Init>
  MX_FSMC_Init();
 80043cc:	f7ff fa8a 	bl	80038e4 <MX_FSMC_Init>
  MX_TIM7_Init();
 80043d0:	f006 ff8a 	bl	800b2e8 <MX_TIM7_Init>
  MX_TIM2_Init();
 80043d4:	f006 ff3a 	bl	800b24c <MX_TIM2_Init>
  //lowlayer_writePulse(0, 0, 0, 0);
  //HAL_Delay(10);
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80043d8:	f7fd fdbe 	bl	8001f58 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80043dc:	f00e f955 	bl	801268a <osKernelStart>
//  		  HAL_Delay(10);
//  	  }
//  lowlayer_writePulse(0, 0, 0, 0);
//  __NOP();

  while (1)
 80043e0:	e7fe      	b.n	80043e0 <main+0x2c>
	...

080043e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b094      	sub	sp, #80	; 0x50
 80043e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80043ea:	f107 0320 	add.w	r3, r7, #32
 80043ee:	2230      	movs	r2, #48	; 0x30
 80043f0:	2100      	movs	r1, #0
 80043f2:	4618      	mov	r0, r3
 80043f4:	f011 fd1e 	bl	8015e34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80043f8:	f107 030c 	add.w	r3, r7, #12
 80043fc:	2200      	movs	r2, #0
 80043fe:	601a      	str	r2, [r3, #0]
 8004400:	605a      	str	r2, [r3, #4]
 8004402:	609a      	str	r2, [r3, #8]
 8004404:	60da      	str	r2, [r3, #12]
 8004406:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004408:	2300      	movs	r3, #0
 800440a:	60bb      	str	r3, [r7, #8]
 800440c:	4b28      	ldr	r3, [pc, #160]	; (80044b0 <SystemClock_Config+0xcc>)
 800440e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004410:	4a27      	ldr	r2, [pc, #156]	; (80044b0 <SystemClock_Config+0xcc>)
 8004412:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004416:	6413      	str	r3, [r2, #64]	; 0x40
 8004418:	4b25      	ldr	r3, [pc, #148]	; (80044b0 <SystemClock_Config+0xcc>)
 800441a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004420:	60bb      	str	r3, [r7, #8]
 8004422:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004424:	2300      	movs	r3, #0
 8004426:	607b      	str	r3, [r7, #4]
 8004428:	4b22      	ldr	r3, [pc, #136]	; (80044b4 <SystemClock_Config+0xd0>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a21      	ldr	r2, [pc, #132]	; (80044b4 <SystemClock_Config+0xd0>)
 800442e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004432:	6013      	str	r3, [r2, #0]
 8004434:	4b1f      	ldr	r3, [pc, #124]	; (80044b4 <SystemClock_Config+0xd0>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800443c:	607b      	str	r3, [r7, #4]
 800443e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004440:	2301      	movs	r3, #1
 8004442:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004444:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004448:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800444a:	2302      	movs	r3, #2
 800444c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800444e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004452:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004454:	2308      	movs	r3, #8
 8004456:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8004458:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800445c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800445e:	2302      	movs	r3, #2
 8004460:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004462:	2307      	movs	r3, #7
 8004464:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004466:	f107 0320 	add.w	r3, r7, #32
 800446a:	4618      	mov	r0, r3
 800446c:	f009 f91e 	bl	800d6ac <HAL_RCC_OscConfig>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8004476:	f000 f831 	bl	80044dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800447a:	230f      	movs	r3, #15
 800447c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800447e:	2302      	movs	r3, #2
 8004480:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004482:	2300      	movs	r3, #0
 8004484:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004486:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800448a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800448c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004490:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004492:	f107 030c 	add.w	r3, r7, #12
 8004496:	2105      	movs	r1, #5
 8004498:	4618      	mov	r0, r3
 800449a:	f009 fb77 	bl	800db8c <HAL_RCC_ClockConfig>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d001      	beq.n	80044a8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80044a4:	f000 f81a 	bl	80044dc <Error_Handler>
  }
}
 80044a8:	bf00      	nop
 80044aa:	3750      	adds	r7, #80	; 0x50
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	40023800 	.word	0x40023800
 80044b4:	40007000 	.word	0x40007000

080044b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a04      	ldr	r2, [pc, #16]	; (80044d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d101      	bne.n	80044ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80044ca:	f007 f89f 	bl	800b60c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80044ce:	bf00      	nop
 80044d0:	3708      	adds	r7, #8
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	40001000 	.word	0x40001000

080044dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80044dc:	b480      	push	{r7}
 80044de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80044e0:	bf00      	nop
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr

080044ea <ringBuff_PushChar>:
 *  data		: data to write
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PushChar(RINGBUFFER_TypeDef *ringbuff, uint8_t data) {
 80044ea:	b480      	push	{r7}
 80044ec:	b083      	sub	sp, #12
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
 80044f2:	460b      	mov	r3, r1
 80044f4:	70fb      	strb	r3, [r7, #3]
	if (ringbuff->isFull_Flag) {
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d001      	beq.n	8004504 <ringBuff_PushChar+0x1a>
		return FALSE;
 8004500:	2300      	movs	r3, #0
 8004502:	e024      	b.n	800454e <ringBuff_PushChar+0x64>
	} else {
			ringbuff->Array[ringbuff->head]	= data;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	78f9      	ldrb	r1, [r7, #3]
 800450e:	54d1      	strb	r1, [r2, r3]
			ringbuff->head					= (ringbuff->head + 1) % RINGBUFFER_SIZE;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8004516:	3301      	adds	r3, #1
 8004518:	425a      	negs	r2, r3
 800451a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800451e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004522:	bf58      	it	pl
 8004524:	4253      	negpl	r3, r2
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
			if (ringbuff->head == ringbuff->tail) {
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004538:	429a      	cmp	r2, r3
 800453a:	d103      	bne.n	8004544 <ringBuff_PushChar+0x5a>
				ringbuff->isFull_Flag = TRUE;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			}
			ringbuff->isEmpty_Flag = FALSE;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
			return TRUE;
 800454c:	2301      	movs	r3, #1
	}
}
 800454e:	4618      	mov	r0, r3
 8004550:	370c      	adds	r7, #12
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr

0800455a <ringBuff_PopChar>:
 *  *ptr_data	: pointer of destination
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PopChar(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data) {
 800455a:	b480      	push	{r7}
 800455c:	b083      	sub	sp, #12
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
 8004562:	6039      	str	r1, [r7, #0]
	if (ringbuff->isEmpty_Flag) {
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f893 3409 	ldrb.w	r3, [r3, #1033]	; 0x409
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <ringBuff_PopChar+0x18>
		return FALSE;
 800456e:	2300      	movs	r3, #0
 8004570:	e025      	b.n	80045be <ringBuff_PopChar+0x64>
	} else {
			*ptr_data		= ringbuff->Array[ringbuff->tail];
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	5cd2      	ldrb	r2, [r2, r3]
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	701a      	strb	r2, [r3, #0]
			ringbuff->tail	= (ringbuff->tail +1) % RINGBUFFER_SIZE;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004586:	3301      	adds	r3, #1
 8004588:	425a      	negs	r2, r3
 800458a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800458e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004592:	bf58      	it	pl
 8004594:	4253      	negpl	r3, r2
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			if (ringbuff->head == ringbuff->tail) {
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d103      	bne.n	80045b4 <ringBuff_PopChar+0x5a>
				ringbuff->isEmpty_Flag = TRUE;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
			}
			ringbuff->isFull_Flag = FALSE;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			return TRUE;
 80045bc:	2301      	movs	r3, #1
	}
}
 80045be:	4618      	mov	r0, r3
 80045c0:	370c      	adds	r7, #12
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr

080045ca <ringBuff_PushArray>:
 *  *ptr_data	: pointer of source
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PushArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b086      	sub	sp, #24
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	60f8      	str	r0, [r7, #12]
 80045d2:	60b9      	str	r1, [r7, #8]
 80045d4:	607a      	str	r2, [r7, #4]
	int16_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 80045d6:	2300      	movs	r3, #0
 80045d8:	82fb      	strh	r3, [r7, #22]
 80045da:	e011      	b.n	8004600 <ringBuff_PushArray+0x36>
		if ( !ringBuff_PushChar(ringbuff, *(ptr_data + success_number))) {
 80045dc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	4413      	add	r3, r2
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	4619      	mov	r1, r3
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f7ff ff7e 	bl	80044ea <ringBuff_PushChar>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00b      	beq.n	800460c <ringBuff_PushArray+0x42>
	for (success_number = 0; success_number < len; success_number++) {
 80045f4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	3301      	adds	r3, #1
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	82fb      	strh	r3, [r7, #22]
 8004600:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	429a      	cmp	r2, r3
 8004608:	dce8      	bgt.n	80045dc <ringBuff_PushArray+0x12>
 800460a:	e000      	b.n	800460e <ringBuff_PushArray+0x44>
			break;
 800460c:	bf00      	nop
		}// stop when ring buffer FULL
	}
	return success_number;
 800460e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8004612:	4618      	mov	r0, r3
 8004614:	3718      	adds	r7, #24
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}

0800461a <ringBuff_PopArray>:
 *  *ptr_data	: pointer of destination
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PopArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 800461a:	b580      	push	{r7, lr}
 800461c:	b086      	sub	sp, #24
 800461e:	af00      	add	r7, sp, #0
 8004620:	60f8      	str	r0, [r7, #12]
 8004622:	60b9      	str	r1, [r7, #8]
 8004624:	607a      	str	r2, [r7, #4]
	int32_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 8004626:	2300      	movs	r3, #0
 8004628:	617b      	str	r3, [r7, #20]
 800462a:	e00c      	b.n	8004646 <ringBuff_PopArray+0x2c>
		if ( !ringBuff_PopChar(ringbuff, (ptr_data + success_number))) {
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	68ba      	ldr	r2, [r7, #8]
 8004630:	4413      	add	r3, r2
 8004632:	4619      	mov	r1, r3
 8004634:	68f8      	ldr	r0, [r7, #12]
 8004636:	f7ff ff90 	bl	800455a <ringBuff_PopChar>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d007      	beq.n	8004650 <ringBuff_PopArray+0x36>
	for (success_number = 0; success_number < len; success_number++) {
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	3301      	adds	r3, #1
 8004644:	617b      	str	r3, [r7, #20]
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	429a      	cmp	r2, r3
 800464c:	dbee      	blt.n	800462c <ringBuff_PopArray+0x12>
 800464e:	e000      	b.n	8004652 <ringBuff_PopArray+0x38>
			break;
 8004650:	bf00      	nop
		}// stop when ring buffer EMPTY
	}
	return success_number;
 8004652:	697b      	ldr	r3, [r7, #20]
}
 8004654:	4618      	mov	r0, r3
 8004656:	3718      	adds	r7, #24
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <ringBuff_DistanceOf>:
 *  cmp_char	: compare character
 *
 *  returns:	: distance from 'tail' to 'cmp_char'
 *  			  -1 'cmp_char' could not be found.
 */
int32_t	ringBuff_DistanceOf	(RINGBUFFER_TypeDef *ringbuff, const char* cmp_char) {
 800465c:	b580      	push	{r7, lr}
 800465e:	b088      	sub	sp, #32
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
	int32_t index = ringbuff->tail;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800466c:	61fb      	str	r3, [r7, #28]
	int32_t distance = 0;
 800466e:	2300      	movs	r3, #0
 8004670:	61bb      	str	r3, [r7, #24]
	int32_t sync_state = 0;
 8004672:	2300      	movs	r3, #0
 8004674:	617b      	str	r3, [r7, #20]
	int32_t head_ptr = ringbuff->head;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800467c:	60fb      	str	r3, [r7, #12]
	int32_t number_of_state = strlen(cmp_char);
 800467e:	6838      	ldr	r0, [r7, #0]
 8004680:	f7fb fda6 	bl	80001d0 <strlen>
 8004684:	4603      	mov	r3, r0
 8004686:	60bb      	str	r3, [r7, #8]
	if (ringbuff->isFull_Flag) {
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 800468e:	2b00      	cmp	r3, #0
 8004690:	d066      	beq.n	8004760 <ringBuff_DistanceOf+0x104>
	    for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 8004692:	2300      	movs	r3, #0
 8004694:	613b      	str	r3, [r7, #16]
 8004696:	e030      	b.n	80046fa <ringBuff_DistanceOf+0x9e>
	            if(ringbuff->Array[index] == cmp_char[sync_state]){
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	4413      	add	r3, r2
 800469e:	781a      	ldrb	r2, [r3, #0]
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	6839      	ldr	r1, [r7, #0]
 80046a4:	440b      	add	r3, r1
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d103      	bne.n	80046b4 <ringBuff_DistanceOf+0x58>
	                sync_state++;
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	3301      	adds	r3, #1
 80046b0:	617b      	str	r3, [r7, #20]
 80046b2:	e00c      	b.n	80046ce <ringBuff_DistanceOf+0x72>
	            }else if(ringbuff->Array[index] == cmp_char[0]){
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	4413      	add	r3, r2
 80046ba:	781a      	ldrb	r2, [r3, #0]
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d102      	bne.n	80046ca <ringBuff_DistanceOf+0x6e>
	                sync_state = 1;
 80046c4:	2301      	movs	r3, #1
 80046c6:	617b      	str	r3, [r7, #20]
 80046c8:	e001      	b.n	80046ce <ringBuff_DistanceOf+0x72>
	            }else{
	                sync_state = 0;
 80046ca:	2300      	movs	r3, #0
 80046cc:	617b      	str	r3, [r7, #20]
	            }
	            if(sync_state == number_of_state){
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d101      	bne.n	80046da <ringBuff_DistanceOf+0x7e>
	                return distance;
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	e048      	b.n	800476c <ringBuff_DistanceOf+0x110>
	            }
	//				if ( cmp_char == ringbuff->.Array[index]) {
	//					return distance;
	//				}
	            distance++;
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	3301      	adds	r3, #1
 80046de:	61bb      	str	r3, [r7, #24]
	    for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	3301      	adds	r3, #1
 80046e4:	613b      	str	r3, [r7, #16]
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	3301      	adds	r3, #1
 80046ea:	425a      	negs	r2, r3
 80046ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046f0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80046f4:	bf58      	it	pl
 80046f6:	4253      	negpl	r3, r2
 80046f8:	61fb      	str	r3, [r7, #28]
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004700:	dbca      	blt.n	8004698 <ringBuff_DistanceOf+0x3c>
 8004702:	e031      	b.n	8004768 <ringBuff_DistanceOf+0x10c>
	        }
	} else {
	    for ( ; (index != head_ptr); index = (index + 1) % RINGBUFFER_SIZE) {
	        if(ringbuff->Array[index] == cmp_char[sync_state]){
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	4413      	add	r3, r2
 800470a:	781a      	ldrb	r2, [r3, #0]
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	6839      	ldr	r1, [r7, #0]
 8004710:	440b      	add	r3, r1
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	429a      	cmp	r2, r3
 8004716:	d103      	bne.n	8004720 <ringBuff_DistanceOf+0xc4>
	                //LOG_REPORT("dis1", ringbuff->.tail);
	                sync_state++;
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	3301      	adds	r3, #1
 800471c:	617b      	str	r3, [r7, #20]
 800471e:	e00c      	b.n	800473a <ringBuff_DistanceOf+0xde>
	            }else if(ringbuff->Array[index] == cmp_char[0]){
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	4413      	add	r3, r2
 8004726:	781a      	ldrb	r2, [r3, #0]
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	429a      	cmp	r2, r3
 800472e:	d102      	bne.n	8004736 <ringBuff_DistanceOf+0xda>
	                sync_state = 1;
 8004730:	2301      	movs	r3, #1
 8004732:	617b      	str	r3, [r7, #20]
 8004734:	e001      	b.n	800473a <ringBuff_DistanceOf+0xde>
	            }else{
	                sync_state = 0;
 8004736:	2300      	movs	r3, #0
 8004738:	617b      	str	r3, [r7, #20]
	            }
	            if(sync_state == number_of_state){
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	429a      	cmp	r2, r3
 8004740:	d101      	bne.n	8004746 <ringBuff_DistanceOf+0xea>
	                //LOG_REPORT("dis", distance);
	                return distance;
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	e012      	b.n	800476c <ringBuff_DistanceOf+0x110>
	            }
	//				if ( cmp_char == ringbuff->.Array[index]) {
	//					return distance;
	//				}
	            distance++;
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	3301      	adds	r3, #1
 800474a:	61bb      	str	r3, [r7, #24]
	    for ( ; (index != head_ptr); index = (index + 1) % RINGBUFFER_SIZE) {
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	3301      	adds	r3, #1
 8004750:	425a      	negs	r2, r3
 8004752:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004756:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800475a:	bf58      	it	pl
 800475c:	4253      	negpl	r3, r2
 800475e:	61fb      	str	r3, [r7, #28]
 8004760:	69fa      	ldr	r2, [r7, #28]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	429a      	cmp	r2, r3
 8004766:	d1cd      	bne.n	8004704 <ringBuff_DistanceOf+0xa8>
	        }
	    //LOG_REPORT("hai", 2);
	}

	return -1;
 8004768:	f04f 33ff 	mov.w	r3, #4294967295
}
 800476c:	4618      	mov	r0, r3
 800476e:	3720      	adds	r7, #32
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <lowlayer_scanReset>:
uint8_t state_scan;
uint8_t scan_flag;

const int8_t	pulse_scan[4] = {3, 5, 5, 10};

void	lowlayer_scanReset(void) {
 8004774:	b580      	push	{r7, lr}
 8004776:	af00      	add	r7, sp, #0
	lowlayer_resetEncoder();
 8004778:	f000 fdfe 	bl	8005378 <lowlayer_resetEncoder>
	pulse_accumulate[0] = 0;
 800477c:	4b10      	ldr	r3, [pc, #64]	; (80047c0 <lowlayer_scanReset+0x4c>)
 800477e:	2200      	movs	r2, #0
 8004780:	601a      	str	r2, [r3, #0]
	pulse_accumulate[1] = 0;
 8004782:	4b0f      	ldr	r3, [pc, #60]	; (80047c0 <lowlayer_scanReset+0x4c>)
 8004784:	2200      	movs	r2, #0
 8004786:	605a      	str	r2, [r3, #4]
	pulse_accumulate[2] = 0;
 8004788:	4b0d      	ldr	r3, [pc, #52]	; (80047c0 <lowlayer_scanReset+0x4c>)
 800478a:	2200      	movs	r2, #0
 800478c:	609a      	str	r2, [r3, #8]
	pulse_accumulate[3] = 0;
 800478e:	4b0c      	ldr	r3, [pc, #48]	; (80047c0 <lowlayer_scanReset+0x4c>)
 8004790:	2200      	movs	r2, #0
 8004792:	60da      	str	r2, [r3, #12]

	position_encoder[0] = 0;
 8004794:	4b0b      	ldr	r3, [pc, #44]	; (80047c4 <lowlayer_scanReset+0x50>)
 8004796:	2200      	movs	r2, #0
 8004798:	601a      	str	r2, [r3, #0]
	position_encoder[1] = 0;
 800479a:	4b0a      	ldr	r3, [pc, #40]	; (80047c4 <lowlayer_scanReset+0x50>)
 800479c:	2200      	movs	r2, #0
 800479e:	605a      	str	r2, [r3, #4]
	position_encoder[2] = 0;
 80047a0:	4b08      	ldr	r3, [pc, #32]	; (80047c4 <lowlayer_scanReset+0x50>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	609a      	str	r2, [r3, #8]

	scan_flag = 0;
 80047a6:	4b08      	ldr	r3, [pc, #32]	; (80047c8 <lowlayer_scanReset+0x54>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	701a      	strb	r2, [r3, #0]
	state_scan = 0;
 80047ac:	4b07      	ldr	r3, [pc, #28]	; (80047cc <lowlayer_scanReset+0x58>)
 80047ae:	2200      	movs	r2, #0
 80047b0:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CAPTURE_ENABLE_GPIO_Port, CAPTURE_ENABLE_Pin, GPIO_PIN_RESET);
 80047b2:	2200      	movs	r2, #0
 80047b4:	2108      	movs	r1, #8
 80047b6:	4806      	ldr	r0, [pc, #24]	; (80047d0 <lowlayer_scanReset+0x5c>)
 80047b8:	f007 fd84 	bl	800c2c4 <HAL_GPIO_WritePin>
}
 80047bc:	bf00      	nop
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	20005a90 	.word	0x20005a90
 80047c4:	20005aa4 	.word	0x20005aa4
 80047c8:	20005aa0 	.word	0x20005aa0
 80047cc:	20005ac0 	.word	0x20005ac0
 80047d0:	40020c00 	.word	0x40020c00
 80047d4:	00000000 	.word	0x00000000

080047d8 <lowlayer_scanFlow>:

uint8_t	lowlayer_scanFlow(void) {
 80047d8:	b590      	push	{r4, r7, lr}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
	// Scan limit switch from 3 to 0
	int8_t pulse[4] = {0, 0, 0 ,0};
 80047de:	2300      	movs	r3, #0
 80047e0:	607b      	str	r3, [r7, #4]
	lowlayer_updateLimit();
 80047e2:	f000 fe87 	bl	80054f4 <lowlayer_updateLimit>
	if (state_scan < 4) {
 80047e6:	4b98      	ldr	r3, [pc, #608]	; (8004a48 <lowlayer_scanFlow+0x270>)
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	2b03      	cmp	r3, #3
 80047ec:	d837      	bhi.n	800485e <lowlayer_scanFlow+0x86>
		if (limit_switch[3 - state_scan] == 0) {
 80047ee:	4b96      	ldr	r3, [pc, #600]	; (8004a48 <lowlayer_scanFlow+0x270>)
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	f1c3 0303 	rsb	r3, r3, #3
 80047f6:	4a95      	ldr	r2, [pc, #596]	; (8004a4c <lowlayer_scanFlow+0x274>)
 80047f8:	5cd3      	ldrb	r3, [r2, r3]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d121      	bne.n	8004842 <lowlayer_scanFlow+0x6a>
			pulse[3 - state_scan] = pulse_scan[3 - state_scan];
 80047fe:	4b92      	ldr	r3, [pc, #584]	; (8004a48 <lowlayer_scanFlow+0x270>)
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	f1c3 0203 	rsb	r2, r3, #3
 8004806:	4b90      	ldr	r3, [pc, #576]	; (8004a48 <lowlayer_scanFlow+0x270>)
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	f1c3 0303 	rsb	r3, r3, #3
 800480e:	4990      	ldr	r1, [pc, #576]	; (8004a50 <lowlayer_scanFlow+0x278>)
 8004810:	568a      	ldrsb	r2, [r1, r2]
 8004812:	f107 0108 	add.w	r1, r7, #8
 8004816:	440b      	add	r3, r1
 8004818:	f803 2c04 	strb.w	r2, [r3, #-4]
			lowlayer_writePulse(-pulse[0], pulse[1], -pulse[2], pulse[3]);
 800481c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8004820:	b2db      	uxtb	r3, r3
 8004822:	425b      	negs	r3, r3
 8004824:	b2db      	uxtb	r3, r3
 8004826:	b258      	sxtb	r0, r3
 8004828:	f997 1005 	ldrsb.w	r1, [r7, #5]
 800482c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004830:	b2db      	uxtb	r3, r3
 8004832:	425b      	negs	r3, r3
 8004834:	b2db      	uxtb	r3, r3
 8004836:	b25a      	sxtb	r2, r3
 8004838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800483c:	f000 fcd8 	bl	80051f0 <lowlayer_writePulse>
 8004840:	e00b      	b.n	800485a <lowlayer_scanFlow+0x82>
		} else {
			state_scan++;
 8004842:	4b81      	ldr	r3, [pc, #516]	; (8004a48 <lowlayer_scanFlow+0x270>)
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	3301      	adds	r3, #1
 8004848:	b2da      	uxtb	r2, r3
 800484a:	4b7f      	ldr	r3, [pc, #508]	; (8004a48 <lowlayer_scanFlow+0x270>)
 800484c:	701a      	strb	r2, [r3, #0]
			lowlayer_writePulse(0, 0, 0, 0);
 800484e:	2300      	movs	r3, #0
 8004850:	2200      	movs	r2, #0
 8004852:	2100      	movs	r1, #0
 8004854:	2000      	movs	r0, #0
 8004856:	f000 fccb 	bl	80051f0 <lowlayer_writePulse>
		}

		return FALSE;
 800485a:	2300      	movs	r3, #0
 800485c:	e0d8      	b.n	8004a10 <lowlayer_scanFlow+0x238>
	} else {
		HAL_GPIO_WritePin(CAPTURE_ENABLE_GPIO_Port, CAPTURE_ENABLE_Pin, GPIO_PIN_SET);
 800485e:	2201      	movs	r2, #1
 8004860:	2108      	movs	r1, #8
 8004862:	487c      	ldr	r0, [pc, #496]	; (8004a54 <lowlayer_scanFlow+0x27c>)
 8004864:	f007 fd2e 	bl	800c2c4 <HAL_GPIO_WritePin>
		lowlayer_updateCapture();
 8004868:	f000 fe28 	bl	80054bc <lowlayer_updateCapture>
		lowlayer_writePulse(0, 0, 0, 0);
 800486c:	2300      	movs	r3, #0
 800486e:	2200      	movs	r2, #0
 8004870:	2100      	movs	r1, #0
 8004872:	2000      	movs	r0, #0
 8004874:	f000 fcbc 	bl	80051f0 <lowlayer_writePulse>
		scan_flag = 1;
 8004878:	4b77      	ldr	r3, [pc, #476]	; (8004a58 <lowlayer_scanFlow+0x280>)
 800487a:	2201      	movs	r2, #1
 800487c:	701a      	strb	r2, [r3, #0]
		// Update offset
		offset_encoder[0] 	= position_capture[0];
 800487e:	4b77      	ldr	r3, [pc, #476]	; (8004a5c <lowlayer_scanFlow+0x284>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a77      	ldr	r2, [pc, #476]	; (8004a60 <lowlayer_scanFlow+0x288>)
 8004884:	6013      	str	r3, [r2, #0]
		offset_encoder[1] 	= position_capture[1];
 8004886:	4b75      	ldr	r3, [pc, #468]	; (8004a5c <lowlayer_scanFlow+0x284>)
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	4a75      	ldr	r2, [pc, #468]	; (8004a60 <lowlayer_scanFlow+0x288>)
 800488c:	6053      	str	r3, [r2, #4]
		offset_encoder[2] 	= position_capture[2];
 800488e:	4b73      	ldr	r3, [pc, #460]	; (8004a5c <lowlayer_scanFlow+0x284>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	4a73      	ldr	r2, [pc, #460]	; (8004a60 <lowlayer_scanFlow+0x288>)
 8004894:	6093      	str	r3, [r2, #8]
		offset_stepper		= pulse_accumulate[3];
 8004896:	4b73      	ldr	r3, [pc, #460]	; (8004a64 <lowlayer_scanFlow+0x28c>)
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	4a73      	ldr	r2, [pc, #460]	; (8004a68 <lowlayer_scanFlow+0x290>)
 800489c:	6013      	str	r3, [r2, #0]
		// LOG offset
		LOG_REPORT("offset encoder 0", offset_encoder[0]);
 800489e:	4b70      	ldr	r3, [pc, #448]	; (8004a60 <lowlayer_scanFlow+0x288>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	4619      	mov	r1, r3
 80048a6:	4871      	ldr	r0, [pc, #452]	; (8004a6c <lowlayer_scanFlow+0x294>)
 80048a8:	f7fd fa64 	bl	8001d74 <LOG_REPORT>
		LOG_REPORT("offset encoder 1", offset_encoder[1]);
 80048ac:	4b6c      	ldr	r3, [pc, #432]	; (8004a60 <lowlayer_scanFlow+0x288>)
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	4619      	mov	r1, r3
 80048b4:	486e      	ldr	r0, [pc, #440]	; (8004a70 <lowlayer_scanFlow+0x298>)
 80048b6:	f7fd fa5d 	bl	8001d74 <LOG_REPORT>
		LOG_REPORT("offset encoder 2", offset_encoder[2]);
 80048ba:	4b69      	ldr	r3, [pc, #420]	; (8004a60 <lowlayer_scanFlow+0x288>)
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	b29b      	uxth	r3, r3
 80048c0:	4619      	mov	r1, r3
 80048c2:	486c      	ldr	r0, [pc, #432]	; (8004a74 <lowlayer_scanFlow+0x29c>)
 80048c4:	f7fd fa56 	bl	8001d74 <LOG_REPORT>
		LOG_REPORT("offset stepper", offset_stepper);
 80048c8:	4b67      	ldr	r3, [pc, #412]	; (8004a68 <lowlayer_scanFlow+0x290>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	4619      	mov	r1, r3
 80048d0:	4869      	ldr	r0, [pc, #420]	; (8004a78 <lowlayer_scanFlow+0x2a0>)
 80048d2:	f7fd fa4f 	bl	8001d74 <LOG_REPORT>

		offset_setpoint[0]	= HARD_LIM0_NEG
				- DIR_ENCODER_0*offset_encoder[0]*2.0*PI/ENCODER_J0;
 80048d6:	4b62      	ldr	r3, [pc, #392]	; (8004a60 <lowlayer_scanFlow+0x288>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	ee07 3a90 	vmov	s15, r3
 80048de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048e2:	ee17 0a90 	vmov	r0, s15
 80048e6:	f7fb fe2f 	bl	8000548 <__aeabi_f2d>
 80048ea:	4602      	mov	r2, r0
 80048ec:	460b      	mov	r3, r1
 80048ee:	f7fb fccd 	bl	800028c <__adddf3>
 80048f2:	4603      	mov	r3, r0
 80048f4:	460c      	mov	r4, r1
 80048f6:	4618      	mov	r0, r3
 80048f8:	4621      	mov	r1, r4
 80048fa:	a347      	add	r3, pc, #284	; (adr r3, 8004a18 <lowlayer_scanFlow+0x240>)
 80048fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004900:	f7fb fe7a 	bl	80005f8 <__aeabi_dmul>
 8004904:	4603      	mov	r3, r0
 8004906:	460c      	mov	r4, r1
 8004908:	4618      	mov	r0, r3
 800490a:	4621      	mov	r1, r4
 800490c:	a344      	add	r3, pc, #272	; (adr r3, 8004a20 <lowlayer_scanFlow+0x248>)
 800490e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004912:	f7fb ff9b 	bl	800084c <__aeabi_ddiv>
 8004916:	4603      	mov	r3, r0
 8004918:	460c      	mov	r4, r1
 800491a:	461a      	mov	r2, r3
 800491c:	4623      	mov	r3, r4
 800491e:	a142      	add	r1, pc, #264	; (adr r1, 8004a28 <lowlayer_scanFlow+0x250>)
 8004920:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004924:	f7fb fcb0 	bl	8000288 <__aeabi_dsub>
 8004928:	4603      	mov	r3, r0
 800492a:	460c      	mov	r4, r1
		offset_setpoint[0]	= HARD_LIM0_NEG
 800492c:	4a53      	ldr	r2, [pc, #332]	; (8004a7c <lowlayer_scanFlow+0x2a4>)
 800492e:	e9c2 3400 	strd	r3, r4, [r2]
		offset_setpoint[1]	= HARD_LIM1_POS
				- DIR_ENCODER_1*offset_encoder[1]*2.0*PI/ENCODER_J1;
 8004932:	4b4b      	ldr	r3, [pc, #300]	; (8004a60 <lowlayer_scanFlow+0x288>)
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	ee07 3a90 	vmov	s15, r3
 800493a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800493e:	ee17 0a90 	vmov	r0, s15
 8004942:	f7fb fe01 	bl	8000548 <__aeabi_f2d>
 8004946:	4602      	mov	r2, r0
 8004948:	460b      	mov	r3, r1
 800494a:	f7fb fc9f 	bl	800028c <__adddf3>
 800494e:	4603      	mov	r3, r0
 8004950:	460c      	mov	r4, r1
 8004952:	4618      	mov	r0, r3
 8004954:	4621      	mov	r1, r4
 8004956:	a330      	add	r3, pc, #192	; (adr r3, 8004a18 <lowlayer_scanFlow+0x240>)
 8004958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800495c:	f7fb fe4c 	bl	80005f8 <__aeabi_dmul>
 8004960:	4603      	mov	r3, r0
 8004962:	460c      	mov	r4, r1
 8004964:	4618      	mov	r0, r3
 8004966:	4621      	mov	r1, r4
 8004968:	f04f 0200 	mov.w	r2, #0
 800496c:	4b44      	ldr	r3, [pc, #272]	; (8004a80 <lowlayer_scanFlow+0x2a8>)
 800496e:	f7fb ff6d 	bl	800084c <__aeabi_ddiv>
 8004972:	4603      	mov	r3, r0
 8004974:	460c      	mov	r4, r1
 8004976:	461a      	mov	r2, r3
 8004978:	4623      	mov	r3, r4
 800497a:	a12d      	add	r1, pc, #180	; (adr r1, 8004a30 <lowlayer_scanFlow+0x258>)
 800497c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004980:	f7fb fc82 	bl	8000288 <__aeabi_dsub>
 8004984:	4603      	mov	r3, r0
 8004986:	460c      	mov	r4, r1
		offset_setpoint[1]	= HARD_LIM1_POS
 8004988:	4a3c      	ldr	r2, [pc, #240]	; (8004a7c <lowlayer_scanFlow+0x2a4>)
 800498a:	e9c2 3402 	strd	r3, r4, [r2, #8]
		offset_setpoint[2]	= HARD_LIM2_NEG
				- DIR_ENCODER_2*offset_encoder[2]/ENCODER_J2;
 800498e:	4b34      	ldr	r3, [pc, #208]	; (8004a60 <lowlayer_scanFlow+0x288>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	ee07 3a90 	vmov	s15, r3
 8004996:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800499a:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8004a84 <lowlayer_scanFlow+0x2ac>
 800499e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80049a2:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8004a88 <lowlayer_scanFlow+0x2b0>
 80049a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80049aa:	ee17 0a90 	vmov	r0, s15
 80049ae:	f7fb fdcb 	bl	8000548 <__aeabi_f2d>
 80049b2:	4603      	mov	r3, r0
 80049b4:	460c      	mov	r4, r1
		offset_setpoint[2]	= HARD_LIM2_NEG
 80049b6:	4a31      	ldr	r2, [pc, #196]	; (8004a7c <lowlayer_scanFlow+0x2a4>)
 80049b8:	e9c2 3404 	strd	r3, r4, [r2, #16]
		offset_setpoint[3]  = HARD_LIM3_POS
				- offset_stepper*2.0*PI/GEAR_J3;
 80049bc:	4b2a      	ldr	r3, [pc, #168]	; (8004a68 <lowlayer_scanFlow+0x290>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7fb fdaf 	bl	8000524 <__aeabi_i2d>
 80049c6:	4602      	mov	r2, r0
 80049c8:	460b      	mov	r3, r1
 80049ca:	f7fb fc5f 	bl	800028c <__adddf3>
 80049ce:	4603      	mov	r3, r0
 80049d0:	460c      	mov	r4, r1
 80049d2:	4618      	mov	r0, r3
 80049d4:	4621      	mov	r1, r4
 80049d6:	a310      	add	r3, pc, #64	; (adr r3, 8004a18 <lowlayer_scanFlow+0x240>)
 80049d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049dc:	f7fb fe0c 	bl	80005f8 <__aeabi_dmul>
 80049e0:	4603      	mov	r3, r0
 80049e2:	460c      	mov	r4, r1
 80049e4:	4618      	mov	r0, r3
 80049e6:	4621      	mov	r1, r4
 80049e8:	a313      	add	r3, pc, #76	; (adr r3, 8004a38 <lowlayer_scanFlow+0x260>)
 80049ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ee:	f7fb ff2d 	bl	800084c <__aeabi_ddiv>
 80049f2:	4603      	mov	r3, r0
 80049f4:	460c      	mov	r4, r1
 80049f6:	461a      	mov	r2, r3
 80049f8:	4623      	mov	r3, r4
 80049fa:	a111      	add	r1, pc, #68	; (adr r1, 8004a40 <lowlayer_scanFlow+0x268>)
 80049fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a00:	f7fb fc42 	bl	8000288 <__aeabi_dsub>
 8004a04:	4603      	mov	r3, r0
 8004a06:	460c      	mov	r4, r1
		offset_setpoint[3]  = HARD_LIM3_POS
 8004a08:	4a1c      	ldr	r2, [pc, #112]	; (8004a7c <lowlayer_scanFlow+0x2a4>)
 8004a0a:	e9c2 3406 	strd	r3, r4, [r2, #24]

		return TRUE;
 8004a0e:	2301      	movs	r3, #1
	}
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd90      	pop	{r4, r7, pc}
 8004a18:	60000000 	.word	0x60000000
 8004a1c:	400921fb 	.word	0x400921fb
 8004a20:	00000000 	.word	0x00000000
 8004a24:	40f38800 	.word	0x40f38800
 8004a28:	40000000 	.word	0x40000000
 8004a2c:	bff9f17a 	.word	0xbff9f17a
 8004a30:	80000000 	.word	0x80000000
 8004a34:	40039716 	.word	0x40039716
 8004a38:	a0000000 	.word	0xa0000000
 8004a3c:	40d3bca1 	.word	0x40d3bca1
 8004a40:	a0000000 	.word	0xa0000000
 8004a44:	4008330d 	.word	0x4008330d
 8004a48:	20005ac0 	.word	0x20005ac0
 8004a4c:	20005ab0 	.word	0x20005ab0
 8004a50:	0801b584 	.word	0x0801b584
 8004a54:	40020c00 	.word	0x40020c00
 8004a58:	20005aa0 	.word	0x20005aa0
 8004a5c:	20005ab4 	.word	0x20005ab4
 8004a60:	20005ae8 	.word	0x20005ae8
 8004a64:	20005a90 	.word	0x20005a90
 8004a68:	20005ac4 	.word	0x20005ac4
 8004a6c:	0801b4ac 	.word	0x0801b4ac
 8004a70:	0801b4c0 	.word	0x0801b4c0
 8004a74:	0801b4d4 	.word	0x0801b4d4
 8004a78:	0801b4e8 	.word	0x0801b4e8
 8004a7c:	20005ac8 	.word	0x20005ac8
 8004a80:	40ff4000 	.word	0x40ff4000
 8004a84:	4426aaab 	.word	0x4426aaab
 8004a88:	400f1aa0 	.word	0x400f1aa0
 8004a8c:	00000000 	.word	0x00000000

08004a90 <lowlayer_goToSoftLimit>:

uint8_t	lowlayer_goToSoftLimit(SCARA_PositionTypeDef *setpoint) {
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
	int8_t pulse[4] = {0, 0, 0 ,0};
 8004a98:	2300      	movs	r3, #0
 8004a9a:	60bb      	str	r3, [r7, #8]
	uint8_t check = 0;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	73fb      	strb	r3, [r7, #15]
	lowlayer_readSetPosition(setpoint);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 f94d 	bl	8004d40 <lowlayer_readSetPosition>
	if (setpoint->Theta1 < LIM_MIN_J0) {
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004aac:	a330      	add	r3, pc, #192	; (adr r3, 8004b70 <lowlayer_goToSoftLimit+0xe0>)
 8004aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab2:	f7fc f813 	bl	8000adc <__aeabi_dcmplt>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d004      	beq.n	8004ac6 <lowlayer_goToSoftLimit+0x36>
		pulse[0] = pulse_scan[0];
 8004abc:	2303      	movs	r3, #3
 8004abe:	723b      	strb	r3, [r7, #8]
		check++;
 8004ac0:	7bfb      	ldrb	r3, [r7, #15]
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->Theta2 > LIM_MAX_J1) {
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8004acc:	a32a      	add	r3, pc, #168	; (adr r3, 8004b78 <lowlayer_goToSoftLimit+0xe8>)
 8004ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad2:	f7fc f821 	bl	8000b18 <__aeabi_dcmpgt>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d004      	beq.n	8004ae6 <lowlayer_goToSoftLimit+0x56>
		pulse[1] = pulse_scan[1];
 8004adc:	2305      	movs	r3, #5
 8004ade:	727b      	strb	r3, [r7, #9]
		check++;
 8004ae0:	7bfb      	ldrb	r3, [r7, #15]
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->D3 < LIM_MIN_J2) {
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8004aec:	f04f 0200 	mov.w	r2, #0
 8004af0:	f04f 0300 	mov.w	r3, #0
 8004af4:	f7fb fff2 	bl	8000adc <__aeabi_dcmplt>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d004      	beq.n	8004b08 <lowlayer_goToSoftLimit+0x78>
		pulse[2] = pulse_scan[2];
 8004afe:	2305      	movs	r3, #5
 8004b00:	72bb      	strb	r3, [r7, #10]
		check++;
 8004b02:	7bfb      	ldrb	r3, [r7, #15]
 8004b04:	3301      	adds	r3, #1
 8004b06:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->Theta4 > LIM_MAX_J3) {
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 8004b0e:	a31c      	add	r3, pc, #112	; (adr r3, 8004b80 <lowlayer_goToSoftLimit+0xf0>)
 8004b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b14:	f7fc f800 	bl	8000b18 <__aeabi_dcmpgt>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d004      	beq.n	8004b28 <lowlayer_goToSoftLimit+0x98>
		pulse[3] = pulse_scan[3];
 8004b1e:	230a      	movs	r3, #10
 8004b20:	72fb      	strb	r3, [r7, #11]
		check++;
 8004b22:	7bfb      	ldrb	r3, [r7, #15]
 8004b24:	3301      	adds	r3, #1
 8004b26:	73fb      	strb	r3, [r7, #15]
	}

	if (check > 0) {
 8004b28:	7bfb      	ldrb	r3, [r7, #15]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d013      	beq.n	8004b56 <lowlayer_goToSoftLimit+0xc6>
		lowlayer_writePulse(pulse[0], -pulse[1], pulse[2], -pulse[3]);
 8004b2e:	f997 0008 	ldrsb.w	r0, [r7, #8]
 8004b32:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	425b      	negs	r3, r3
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	b259      	sxtb	r1, r3
 8004b3e:	f997 200a 	ldrsb.w	r2, [r7, #10]
 8004b42:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	425b      	negs	r3, r3
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	b25b      	sxtb	r3, r3
 8004b4e:	f000 fb4f 	bl	80051f0 <lowlayer_writePulse>
		return FALSE;
 8004b52:	2300      	movs	r3, #0
 8004b54:	e006      	b.n	8004b64 <lowlayer_goToSoftLimit+0xd4>
	} else {
		lowlayer_writePulse(0, 0, 0, 0);
 8004b56:	2300      	movs	r3, #0
 8004b58:	2200      	movs	r2, #0
 8004b5a:	2100      	movs	r1, #0
 8004b5c:	2000      	movs	r0, #0
 8004b5e:	f000 fb47 	bl	80051f0 <lowlayer_writePulse>
		return TRUE;
 8004b62:	2301      	movs	r3, #1
	}
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3710      	adds	r7, #16
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	f3af 8000 	nop.w
 8004b70:	daaaaaab 	.word	0xdaaaaaab
 8004b74:	bff7bc89 	.word	0xbff7bc89
 8004b78:	88000000 	.word	0x88000000
 8004b7c:	4002d97c 	.word	0x4002d97c
 8004b80:	daaaaaab 	.word	0xdaaaaaab
 8004b84:	4007bc89 	.word	0x4007bc89

08004b88 <lowlayer_readTruePosition>:

void	lowlayer_readTruePosition(SCARA_PositionTypeDef *true) {
 8004b88:	b590      	push	{r4, r7, lr}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
	lowlayer_updateEncoder();
 8004b90:	f000 fc78 	bl	8005484 <lowlayer_updateEncoder>
	true->Theta1 = HARD_LIM0_NEG
			+ DIR_ENCODER_0*(position_encoder[0] - offset_encoder[0])*2.0*PI/ENCODER_J0; // Servo Motor
 8004b94:	4b62      	ldr	r3, [pc, #392]	; (8004d20 <lowlayer_readTruePosition+0x198>)
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	4b62      	ldr	r3, [pc, #392]	; (8004d24 <lowlayer_readTruePosition+0x19c>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	ee07 3a90 	vmov	s15, r3
 8004ba2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ba6:	ee17 0a90 	vmov	r0, s15
 8004baa:	f7fb fccd 	bl	8000548 <__aeabi_f2d>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	f7fb fb6b 	bl	800028c <__adddf3>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	460c      	mov	r4, r1
 8004bba:	4618      	mov	r0, r3
 8004bbc:	4621      	mov	r1, r4
 8004bbe:	a34c      	add	r3, pc, #304	; (adr r3, 8004cf0 <lowlayer_readTruePosition+0x168>)
 8004bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc4:	f7fb fd18 	bl	80005f8 <__aeabi_dmul>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	460c      	mov	r4, r1
 8004bcc:	4618      	mov	r0, r3
 8004bce:	4621      	mov	r1, r4
 8004bd0:	a349      	add	r3, pc, #292	; (adr r3, 8004cf8 <lowlayer_readTruePosition+0x170>)
 8004bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd6:	f7fb fe39 	bl	800084c <__aeabi_ddiv>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	460c      	mov	r4, r1
 8004bde:	4618      	mov	r0, r3
 8004be0:	4621      	mov	r1, r4
 8004be2:	a347      	add	r3, pc, #284	; (adr r3, 8004d00 <lowlayer_readTruePosition+0x178>)
 8004be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be8:	f7fb fb4e 	bl	8000288 <__aeabi_dsub>
 8004bec:	4603      	mov	r3, r0
 8004bee:	460c      	mov	r4, r1
	true->Theta1 = HARD_LIM0_NEG
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

	true->Theta2 = HARD_LIM1_POS
			+ DIR_ENCODER_1*(position_encoder[1] - offset_encoder[1])*2.0*PI/ENCODER_J1; // Servo Motor
 8004bf6:	4b4a      	ldr	r3, [pc, #296]	; (8004d20 <lowlayer_readTruePosition+0x198>)
 8004bf8:	685a      	ldr	r2, [r3, #4]
 8004bfa:	4b4a      	ldr	r3, [pc, #296]	; (8004d24 <lowlayer_readTruePosition+0x19c>)
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	ee07 3a90 	vmov	s15, r3
 8004c04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c08:	ee17 0a90 	vmov	r0, s15
 8004c0c:	f7fb fc9c 	bl	8000548 <__aeabi_f2d>
 8004c10:	4602      	mov	r2, r0
 8004c12:	460b      	mov	r3, r1
 8004c14:	f7fb fb3a 	bl	800028c <__adddf3>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	460c      	mov	r4, r1
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	4621      	mov	r1, r4
 8004c20:	a333      	add	r3, pc, #204	; (adr r3, 8004cf0 <lowlayer_readTruePosition+0x168>)
 8004c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c26:	f7fb fce7 	bl	80005f8 <__aeabi_dmul>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	460c      	mov	r4, r1
 8004c2e:	4618      	mov	r0, r3
 8004c30:	4621      	mov	r1, r4
 8004c32:	f04f 0200 	mov.w	r2, #0
 8004c36:	4b3c      	ldr	r3, [pc, #240]	; (8004d28 <lowlayer_readTruePosition+0x1a0>)
 8004c38:	f7fb fe08 	bl	800084c <__aeabi_ddiv>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	460c      	mov	r4, r1
 8004c40:	4618      	mov	r0, r3
 8004c42:	4621      	mov	r1, r4
 8004c44:	a330      	add	r3, pc, #192	; (adr r3, 8004d08 <lowlayer_readTruePosition+0x180>)
 8004c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c4a:	f7fb fb1f 	bl	800028c <__adddf3>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	460c      	mov	r4, r1
	true->Theta2 = HARD_LIM1_POS
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70

	true->D3	 = HARD_LIM2_NEG
			+ DIR_ENCODER_2*(position_encoder[2] - offset_encoder[2])/ENCODER_J2; // Servo Motor
 8004c58:	4b31      	ldr	r3, [pc, #196]	; (8004d20 <lowlayer_readTruePosition+0x198>)
 8004c5a:	689a      	ldr	r2, [r3, #8]
 8004c5c:	4b31      	ldr	r3, [pc, #196]	; (8004d24 <lowlayer_readTruePosition+0x19c>)
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	ee07 3a90 	vmov	s15, r3
 8004c66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c6a:	eeb1 7a67 	vneg.f32	s14, s15
 8004c6e:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8004d2c <lowlayer_readTruePosition+0x1a4>
 8004c72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004c76:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8004d30 <lowlayer_readTruePosition+0x1a8>
 8004c7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004c7e:	ee17 0a90 	vmov	r0, s15
 8004c82:	f7fb fc61 	bl	8000548 <__aeabi_f2d>
 8004c86:	4603      	mov	r3, r0
 8004c88:	460c      	mov	r4, r1
	true->D3	 = HARD_LIM2_NEG
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78

	true->Theta4 = HARD_LIM3_POS
			+ (pulse_accumulate[3] - offset_stepper)*2.0*PI/GEAR_J3; // Stepper Motor
 8004c90:	4b28      	ldr	r3, [pc, #160]	; (8004d34 <lowlayer_readTruePosition+0x1ac>)
 8004c92:	68da      	ldr	r2, [r3, #12]
 8004c94:	4b28      	ldr	r3, [pc, #160]	; (8004d38 <lowlayer_readTruePosition+0x1b0>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f7fb fc42 	bl	8000524 <__aeabi_i2d>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	460b      	mov	r3, r1
 8004ca4:	f7fb faf2 	bl	800028c <__adddf3>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	460c      	mov	r4, r1
 8004cac:	4618      	mov	r0, r3
 8004cae:	4621      	mov	r1, r4
 8004cb0:	a30f      	add	r3, pc, #60	; (adr r3, 8004cf0 <lowlayer_readTruePosition+0x168>)
 8004cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb6:	f7fb fc9f 	bl	80005f8 <__aeabi_dmul>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	460c      	mov	r4, r1
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	4621      	mov	r1, r4
 8004cc2:	a313      	add	r3, pc, #76	; (adr r3, 8004d10 <lowlayer_readTruePosition+0x188>)
 8004cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc8:	f7fb fdc0 	bl	800084c <__aeabi_ddiv>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	460c      	mov	r4, r1
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	4621      	mov	r1, r4
 8004cd4:	a310      	add	r3, pc, #64	; (adr r3, 8004d18 <lowlayer_readTruePosition+0x190>)
 8004cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cda:	f7fb fad7 	bl	800028c <__adddf3>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	460c      	mov	r4, r1
	true->Theta4 = HARD_LIM3_POS
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
}
 8004ce8:	bf00      	nop
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd90      	pop	{r4, r7, pc}
 8004cf0:	60000000 	.word	0x60000000
 8004cf4:	400921fb 	.word	0x400921fb
 8004cf8:	00000000 	.word	0x00000000
 8004cfc:	40f38800 	.word	0x40f38800
 8004d00:	40000000 	.word	0x40000000
 8004d04:	3ff9f17a 	.word	0x3ff9f17a
 8004d08:	80000000 	.word	0x80000000
 8004d0c:	40039716 	.word	0x40039716
 8004d10:	a0000000 	.word	0xa0000000
 8004d14:	40d3bca1 	.word	0x40d3bca1
 8004d18:	a0000000 	.word	0xa0000000
 8004d1c:	4008330d 	.word	0x4008330d
 8004d20:	20005aa4 	.word	0x20005aa4
 8004d24:	20005ae8 	.word	0x20005ae8
 8004d28:	40ff4000 	.word	0x40ff4000
 8004d2c:	4426aaab 	.word	0x4426aaab
 8004d30:	400f1aa0 	.word	0x400f1aa0
 8004d34:	20005a90 	.word	0x20005a90
 8004d38:	20005ac4 	.word	0x20005ac4
 8004d3c:	00000000 	.word	0x00000000

08004d40 <lowlayer_readSetPosition>:

void	lowlayer_readSetPosition(SCARA_PositionTypeDef *setpoint) {
 8004d40:	b5b0      	push	{r4, r5, r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
	setpoint->Theta1 = offset_setpoint[0] + pulse_accumulate[0]*2.0*PI/GEAR_J0;
 8004d48:	4b53      	ldr	r3, [pc, #332]	; (8004e98 <lowlayer_readSetPosition+0x158>)
 8004d4a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004d4e:	4b53      	ldr	r3, [pc, #332]	; (8004e9c <lowlayer_readSetPosition+0x15c>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7fb fbe6 	bl	8000524 <__aeabi_i2d>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	f7fb fa96 	bl	800028c <__adddf3>
 8004d60:	4602      	mov	r2, r0
 8004d62:	460b      	mov	r3, r1
 8004d64:	4610      	mov	r0, r2
 8004d66:	4619      	mov	r1, r3
 8004d68:	a345      	add	r3, pc, #276	; (adr r3, 8004e80 <lowlayer_readSetPosition+0x140>)
 8004d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d6e:	f7fb fc43 	bl	80005f8 <__aeabi_dmul>
 8004d72:	4602      	mov	r2, r0
 8004d74:	460b      	mov	r3, r1
 8004d76:	4610      	mov	r0, r2
 8004d78:	4619      	mov	r1, r3
 8004d7a:	a343      	add	r3, pc, #268	; (adr r3, 8004e88 <lowlayer_readSetPosition+0x148>)
 8004d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d80:	f7fb fd64 	bl	800084c <__aeabi_ddiv>
 8004d84:	4602      	mov	r2, r0
 8004d86:	460b      	mov	r3, r1
 8004d88:	4620      	mov	r0, r4
 8004d8a:	4629      	mov	r1, r5
 8004d8c:	f7fb fa7e 	bl	800028c <__adddf3>
 8004d90:	4603      	mov	r3, r0
 8004d92:	460c      	mov	r4, r1
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

	setpoint->Theta2 = offset_setpoint[1] + pulse_accumulate[1]*2.0*PI/GEAR_J1;
 8004d9a:	4b3f      	ldr	r3, [pc, #252]	; (8004e98 <lowlayer_readSetPosition+0x158>)
 8004d9c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8004da0:	4b3e      	ldr	r3, [pc, #248]	; (8004e9c <lowlayer_readSetPosition+0x15c>)
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	4618      	mov	r0, r3
 8004da6:	f7fb fbbd 	bl	8000524 <__aeabi_i2d>
 8004daa:	4602      	mov	r2, r0
 8004dac:	460b      	mov	r3, r1
 8004dae:	f7fb fa6d 	bl	800028c <__adddf3>
 8004db2:	4602      	mov	r2, r0
 8004db4:	460b      	mov	r3, r1
 8004db6:	4610      	mov	r0, r2
 8004db8:	4619      	mov	r1, r3
 8004dba:	a331      	add	r3, pc, #196	; (adr r3, 8004e80 <lowlayer_readSetPosition+0x140>)
 8004dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc0:	f7fb fc1a 	bl	80005f8 <__aeabi_dmul>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	4610      	mov	r0, r2
 8004dca:	4619      	mov	r1, r3
 8004dcc:	f04f 0200 	mov.w	r2, #0
 8004dd0:	4b33      	ldr	r3, [pc, #204]	; (8004ea0 <lowlayer_readSetPosition+0x160>)
 8004dd2:	f7fb fd3b 	bl	800084c <__aeabi_ddiv>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	460b      	mov	r3, r1
 8004dda:	4620      	mov	r0, r4
 8004ddc:	4629      	mov	r1, r5
 8004dde:	f7fb fa55 	bl	800028c <__adddf3>
 8004de2:	4603      	mov	r3, r0
 8004de4:	460c      	mov	r4, r1
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70

	setpoint->D3	 = offset_setpoint[2] + pulse_accumulate[2]/GEAR_J2;
 8004dec:	4b2a      	ldr	r3, [pc, #168]	; (8004e98 <lowlayer_readSetPosition+0x158>)
 8004dee:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004df2:	4b2a      	ldr	r3, [pc, #168]	; (8004e9c <lowlayer_readSetPosition+0x15c>)
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	ee07 3a90 	vmov	s15, r3
 8004dfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004dfe:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8004ea4 <lowlayer_readSetPosition+0x164>
 8004e02:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004e06:	ee16 0a90 	vmov	r0, s13
 8004e0a:	f7fb fb9d 	bl	8000548 <__aeabi_f2d>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	460b      	mov	r3, r1
 8004e12:	4620      	mov	r0, r4
 8004e14:	4629      	mov	r1, r5
 8004e16:	f7fb fa39 	bl	800028c <__adddf3>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	460c      	mov	r4, r1
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78

	setpoint->Theta4 = offset_setpoint[3] + pulse_accumulate[3]*2.0*PI/GEAR_J3;
 8004e24:	4b1c      	ldr	r3, [pc, #112]	; (8004e98 <lowlayer_readSetPosition+0x158>)
 8004e26:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004e2a:	4b1c      	ldr	r3, [pc, #112]	; (8004e9c <lowlayer_readSetPosition+0x15c>)
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f7fb fb78 	bl	8000524 <__aeabi_i2d>
 8004e34:	4602      	mov	r2, r0
 8004e36:	460b      	mov	r3, r1
 8004e38:	f7fb fa28 	bl	800028c <__adddf3>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	460b      	mov	r3, r1
 8004e40:	4610      	mov	r0, r2
 8004e42:	4619      	mov	r1, r3
 8004e44:	a30e      	add	r3, pc, #56	; (adr r3, 8004e80 <lowlayer_readSetPosition+0x140>)
 8004e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e4a:	f7fb fbd5 	bl	80005f8 <__aeabi_dmul>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	460b      	mov	r3, r1
 8004e52:	4610      	mov	r0, r2
 8004e54:	4619      	mov	r1, r3
 8004e56:	a30e      	add	r3, pc, #56	; (adr r3, 8004e90 <lowlayer_readSetPosition+0x150>)
 8004e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e5c:	f7fb fcf6 	bl	800084c <__aeabi_ddiv>
 8004e60:	4602      	mov	r2, r0
 8004e62:	460b      	mov	r3, r1
 8004e64:	4620      	mov	r0, r4
 8004e66:	4629      	mov	r1, r5
 8004e68:	f7fb fa10 	bl	800028c <__adddf3>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	460c      	mov	r4, r1
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
}
 8004e76:	bf00      	nop
 8004e78:	3708      	adds	r7, #8
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bdb0      	pop	{r4, r5, r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	60000000 	.word	0x60000000
 8004e84:	400921fb 	.word	0x400921fb
 8004e88:	00000000 	.word	0x00000000
 8004e8c:	40d38800 	.word	0x40d38800
 8004e90:	a0000000 	.word	0xa0000000
 8004e94:	40d3bca1 	.word	0x40d3bca1
 8004e98:	20005ac8 	.word	0x20005ac8
 8004e9c:	20005a90 	.word	0x20005a90
 8004ea0:	40df4000 	.word	0x40df4000
 8004ea4:	42c80000 	.word	0x42c80000

08004ea8 <lowlayer_computeAndWritePulse>:

uint8_t	lowlayer_computeAndWritePulse(SCARA_PositionTypeDef current, SCARA_PositionTypeDef next) {
 8004ea8:	b084      	sub	sp, #16
 8004eaa:	b590      	push	{r4, r7, lr}
 8004eac:	b093      	sub	sp, #76	; 0x4c
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8004eb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t	current_var0, current_var1, current_var2, current_var3;
	uint32_t	next_var0, next_var1, next_var2, next_var3;
	int64_t		delta_var0, delta_var1, delta_var2, delta_var3;
	uint8_t 	result;

	current_var0	= round((current.Theta1 - LIM_MIN_J0) * GEAR_J0/(2*PI));
 8004eb8:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8004ebc:	a3c4      	add	r3, pc, #784	; (adr r3, 80051d0 <lowlayer_computeAndWritePulse+0x328>)
 8004ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec2:	f7fb f9e3 	bl	800028c <__adddf3>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	460c      	mov	r4, r1
 8004eca:	4618      	mov	r0, r3
 8004ecc:	4621      	mov	r1, r4
 8004ece:	a3c2      	add	r3, pc, #776	; (adr r3, 80051d8 <lowlayer_computeAndWritePulse+0x330>)
 8004ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed4:	f7fb fb90 	bl	80005f8 <__aeabi_dmul>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	460c      	mov	r4, r1
 8004edc:	4618      	mov	r0, r3
 8004ede:	4621      	mov	r1, r4
 8004ee0:	a3b5      	add	r3, pc, #724	; (adr r3, 80051b8 <lowlayer_computeAndWritePulse+0x310>)
 8004ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee6:	f7fb fcb1 	bl	800084c <__aeabi_ddiv>
 8004eea:	4603      	mov	r3, r0
 8004eec:	460c      	mov	r4, r1
 8004eee:	ec44 3b17 	vmov	d7, r3, r4
 8004ef2:	eeb0 0a47 	vmov.f32	s0, s14
 8004ef6:	eef0 0a67 	vmov.f32	s1, s15
 8004efa:	f014 fda9 	bl	8019a50 <round>
 8004efe:	ec54 3b10 	vmov	r3, r4, d0
 8004f02:	4618      	mov	r0, r3
 8004f04:	4621      	mov	r1, r4
 8004f06:	f7fb fe4f 	bl	8000ba8 <__aeabi_d2uiz>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	647b      	str	r3, [r7, #68]	; 0x44
	current_var1 	= round((current.Theta2 - LIM_MIN_J1) * GEAR_J1/(2*PI));
 8004f0e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004f12:	a3b3      	add	r3, pc, #716	; (adr r3, 80051e0 <lowlayer_computeAndWritePulse+0x338>)
 8004f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f18:	f7fb f9b8 	bl	800028c <__adddf3>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	460c      	mov	r4, r1
 8004f20:	4618      	mov	r0, r3
 8004f22:	4621      	mov	r1, r4
 8004f24:	f04f 0200 	mov.w	r2, #0
 8004f28:	4baf      	ldr	r3, [pc, #700]	; (80051e8 <lowlayer_computeAndWritePulse+0x340>)
 8004f2a:	f7fb fb65 	bl	80005f8 <__aeabi_dmul>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	460c      	mov	r4, r1
 8004f32:	4618      	mov	r0, r3
 8004f34:	4621      	mov	r1, r4
 8004f36:	a3a0      	add	r3, pc, #640	; (adr r3, 80051b8 <lowlayer_computeAndWritePulse+0x310>)
 8004f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f3c:	f7fb fc86 	bl	800084c <__aeabi_ddiv>
 8004f40:	4603      	mov	r3, r0
 8004f42:	460c      	mov	r4, r1
 8004f44:	ec44 3b17 	vmov	d7, r3, r4
 8004f48:	eeb0 0a47 	vmov.f32	s0, s14
 8004f4c:	eef0 0a67 	vmov.f32	s1, s15
 8004f50:	f014 fd7e 	bl	8019a50 <round>
 8004f54:	ec54 3b10 	vmov	r3, r4, d0
 8004f58:	4618      	mov	r0, r3
 8004f5a:	4621      	mov	r1, r4
 8004f5c:	f7fb fe24 	bl	8000ba8 <__aeabi_d2uiz>
 8004f60:	4603      	mov	r3, r0
 8004f62:	643b      	str	r3, [r7, #64]	; 0x40
	current_var2 	= round((current.D3 - LIM_MIN_J2) * GEAR_J2);
 8004f64:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004f68:	f04f 0200 	mov.w	r2, #0
 8004f6c:	4b9f      	ldr	r3, [pc, #636]	; (80051ec <lowlayer_computeAndWritePulse+0x344>)
 8004f6e:	f7fb fb43 	bl	80005f8 <__aeabi_dmul>
 8004f72:	4603      	mov	r3, r0
 8004f74:	460c      	mov	r4, r1
 8004f76:	ec44 3b17 	vmov	d7, r3, r4
 8004f7a:	eeb0 0a47 	vmov.f32	s0, s14
 8004f7e:	eef0 0a67 	vmov.f32	s1, s15
 8004f82:	f014 fd65 	bl	8019a50 <round>
 8004f86:	ec54 3b10 	vmov	r3, r4, d0
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	4621      	mov	r1, r4
 8004f8e:	f7fb fe0b 	bl	8000ba8 <__aeabi_d2uiz>
 8004f92:	4603      	mov	r3, r0
 8004f94:	63fb      	str	r3, [r7, #60]	; 0x3c
	current_var3 	= round((current.Theta4 - LIM_MIN_J3) * GEAR_J3/(2*PI));
 8004f96:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8004f9a:	a389      	add	r3, pc, #548	; (adr r3, 80051c0 <lowlayer_computeAndWritePulse+0x318>)
 8004f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa0:	f7fb f974 	bl	800028c <__adddf3>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	460c      	mov	r4, r1
 8004fa8:	4618      	mov	r0, r3
 8004faa:	4621      	mov	r1, r4
 8004fac:	a386      	add	r3, pc, #536	; (adr r3, 80051c8 <lowlayer_computeAndWritePulse+0x320>)
 8004fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb2:	f7fb fb21 	bl	80005f8 <__aeabi_dmul>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	460c      	mov	r4, r1
 8004fba:	4618      	mov	r0, r3
 8004fbc:	4621      	mov	r1, r4
 8004fbe:	a37e      	add	r3, pc, #504	; (adr r3, 80051b8 <lowlayer_computeAndWritePulse+0x310>)
 8004fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc4:	f7fb fc42 	bl	800084c <__aeabi_ddiv>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	460c      	mov	r4, r1
 8004fcc:	ec44 3b17 	vmov	d7, r3, r4
 8004fd0:	eeb0 0a47 	vmov.f32	s0, s14
 8004fd4:	eef0 0a67 	vmov.f32	s1, s15
 8004fd8:	f014 fd3a 	bl	8019a50 <round>
 8004fdc:	ec54 3b10 	vmov	r3, r4, d0
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	4621      	mov	r1, r4
 8004fe4:	f7fb fde0 	bl	8000ba8 <__aeabi_d2uiz>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	63bb      	str	r3, [r7, #56]	; 0x38
	next_var0 		= round((next.Theta1 - LIM_MIN_J0) * GEAR_J0/(2*PI));
 8004fec:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8004ff0:	a377      	add	r3, pc, #476	; (adr r3, 80051d0 <lowlayer_computeAndWritePulse+0x328>)
 8004ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff6:	f7fb f949 	bl	800028c <__adddf3>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	460c      	mov	r4, r1
 8004ffe:	4618      	mov	r0, r3
 8005000:	4621      	mov	r1, r4
 8005002:	a375      	add	r3, pc, #468	; (adr r3, 80051d8 <lowlayer_computeAndWritePulse+0x330>)
 8005004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005008:	f7fb faf6 	bl	80005f8 <__aeabi_dmul>
 800500c:	4603      	mov	r3, r0
 800500e:	460c      	mov	r4, r1
 8005010:	4618      	mov	r0, r3
 8005012:	4621      	mov	r1, r4
 8005014:	a368      	add	r3, pc, #416	; (adr r3, 80051b8 <lowlayer_computeAndWritePulse+0x310>)
 8005016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800501a:	f7fb fc17 	bl	800084c <__aeabi_ddiv>
 800501e:	4603      	mov	r3, r0
 8005020:	460c      	mov	r4, r1
 8005022:	ec44 3b17 	vmov	d7, r3, r4
 8005026:	eeb0 0a47 	vmov.f32	s0, s14
 800502a:	eef0 0a67 	vmov.f32	s1, s15
 800502e:	f014 fd0f 	bl	8019a50 <round>
 8005032:	ec54 3b10 	vmov	r3, r4, d0
 8005036:	4618      	mov	r0, r3
 8005038:	4621      	mov	r1, r4
 800503a:	f7fb fdb5 	bl	8000ba8 <__aeabi_d2uiz>
 800503e:	4603      	mov	r3, r0
 8005040:	637b      	str	r3, [r7, #52]	; 0x34
	next_var1 		= round((next.Theta2 - LIM_MIN_J1) * GEAR_J1/(2*PI));
 8005042:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8005046:	a366      	add	r3, pc, #408	; (adr r3, 80051e0 <lowlayer_computeAndWritePulse+0x338>)
 8005048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800504c:	f7fb f91e 	bl	800028c <__adddf3>
 8005050:	4603      	mov	r3, r0
 8005052:	460c      	mov	r4, r1
 8005054:	4618      	mov	r0, r3
 8005056:	4621      	mov	r1, r4
 8005058:	f04f 0200 	mov.w	r2, #0
 800505c:	4b62      	ldr	r3, [pc, #392]	; (80051e8 <lowlayer_computeAndWritePulse+0x340>)
 800505e:	f7fb facb 	bl	80005f8 <__aeabi_dmul>
 8005062:	4603      	mov	r3, r0
 8005064:	460c      	mov	r4, r1
 8005066:	4618      	mov	r0, r3
 8005068:	4621      	mov	r1, r4
 800506a:	a353      	add	r3, pc, #332	; (adr r3, 80051b8 <lowlayer_computeAndWritePulse+0x310>)
 800506c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005070:	f7fb fbec 	bl	800084c <__aeabi_ddiv>
 8005074:	4603      	mov	r3, r0
 8005076:	460c      	mov	r4, r1
 8005078:	ec44 3b17 	vmov	d7, r3, r4
 800507c:	eeb0 0a47 	vmov.f32	s0, s14
 8005080:	eef0 0a67 	vmov.f32	s1, s15
 8005084:	f014 fce4 	bl	8019a50 <round>
 8005088:	ec54 3b10 	vmov	r3, r4, d0
 800508c:	4618      	mov	r0, r3
 800508e:	4621      	mov	r1, r4
 8005090:	f7fb fd8a 	bl	8000ba8 <__aeabi_d2uiz>
 8005094:	4603      	mov	r3, r0
 8005096:	633b      	str	r3, [r7, #48]	; 0x30
	next_var2 		= round((next.D3 - LIM_MIN_J2) * GEAR_J2);
 8005098:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800509c:	f04f 0200 	mov.w	r2, #0
 80050a0:	4b52      	ldr	r3, [pc, #328]	; (80051ec <lowlayer_computeAndWritePulse+0x344>)
 80050a2:	f7fb faa9 	bl	80005f8 <__aeabi_dmul>
 80050a6:	4603      	mov	r3, r0
 80050a8:	460c      	mov	r4, r1
 80050aa:	ec44 3b17 	vmov	d7, r3, r4
 80050ae:	eeb0 0a47 	vmov.f32	s0, s14
 80050b2:	eef0 0a67 	vmov.f32	s1, s15
 80050b6:	f014 fccb 	bl	8019a50 <round>
 80050ba:	ec54 3b10 	vmov	r3, r4, d0
 80050be:	4618      	mov	r0, r3
 80050c0:	4621      	mov	r1, r4
 80050c2:	f7fb fd71 	bl	8000ba8 <__aeabi_d2uiz>
 80050c6:	4603      	mov	r3, r0
 80050c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	next_var3 		= round((next.Theta4 - LIM_MIN_J3) * GEAR_J3/(2*PI));
 80050ca:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80050ce:	a33c      	add	r3, pc, #240	; (adr r3, 80051c0 <lowlayer_computeAndWritePulse+0x318>)
 80050d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d4:	f7fb f8da 	bl	800028c <__adddf3>
 80050d8:	4603      	mov	r3, r0
 80050da:	460c      	mov	r4, r1
 80050dc:	4618      	mov	r0, r3
 80050de:	4621      	mov	r1, r4
 80050e0:	a339      	add	r3, pc, #228	; (adr r3, 80051c8 <lowlayer_computeAndWritePulse+0x320>)
 80050e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e6:	f7fb fa87 	bl	80005f8 <__aeabi_dmul>
 80050ea:	4603      	mov	r3, r0
 80050ec:	460c      	mov	r4, r1
 80050ee:	4618      	mov	r0, r3
 80050f0:	4621      	mov	r1, r4
 80050f2:	a331      	add	r3, pc, #196	; (adr r3, 80051b8 <lowlayer_computeAndWritePulse+0x310>)
 80050f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f8:	f7fb fba8 	bl	800084c <__aeabi_ddiv>
 80050fc:	4603      	mov	r3, r0
 80050fe:	460c      	mov	r4, r1
 8005100:	ec44 3b17 	vmov	d7, r3, r4
 8005104:	eeb0 0a47 	vmov.f32	s0, s14
 8005108:	eef0 0a67 	vmov.f32	s1, s15
 800510c:	f014 fca0 	bl	8019a50 <round>
 8005110:	ec54 3b10 	vmov	r3, r4, d0
 8005114:	4618      	mov	r0, r3
 8005116:	4621      	mov	r1, r4
 8005118:	f7fb fd46 	bl	8000ba8 <__aeabi_d2uiz>
 800511c:	4603      	mov	r3, r0
 800511e:	62bb      	str	r3, [r7, #40]	; 0x28

	delta_var0 = next_var0 - current_var0;
 8005120:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005122:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	f04f 0400 	mov.w	r4, #0
 800512a:	e9c7 3408 	strd	r3, r4, [r7, #32]
	delta_var1 = next_var1 - current_var1;
 800512e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	f04f 0400 	mov.w	r4, #0
 8005138:	e9c7 3406 	strd	r3, r4, [r7, #24]
	delta_var2 = next_var2 - current_var2;
 800513c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800513e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	f04f 0400 	mov.w	r4, #0
 8005146:	e9c7 3404 	strd	r3, r4, [r7, #16]
	delta_var3 = next_var3 - current_var3;
 800514a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800514c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	f04f 0400 	mov.w	r4, #0
 8005154:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if (abs(delta_var0) > 127
 8005158:	6a3b      	ldr	r3, [r7, #32]
 800515a:	2b00      	cmp	r3, #0
 800515c:	bfb8      	it	lt
 800515e:	425b      	neglt	r3, r3
 8005160:	2b7f      	cmp	r3, #127	; 0x7f
 8005162:	dc11      	bgt.n	8005188 <lowlayer_computeAndWritePulse+0x2e0>
		|| abs(delta_var1) > 127
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	2b00      	cmp	r3, #0
 8005168:	bfb8      	it	lt
 800516a:	425b      	neglt	r3, r3
 800516c:	2b7f      	cmp	r3, #127	; 0x7f
 800516e:	dc0b      	bgt.n	8005188 <lowlayer_computeAndWritePulse+0x2e0>
		|| abs(delta_var2) > 127
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	2b00      	cmp	r3, #0
 8005174:	bfb8      	it	lt
 8005176:	425b      	neglt	r3, r3
 8005178:	2b7f      	cmp	r3, #127	; 0x7f
 800517a:	dc05      	bgt.n	8005188 <lowlayer_computeAndWritePulse+0x2e0>
		|| abs(delta_var3) > 127) {
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	2b00      	cmp	r3, #0
 8005180:	bfb8      	it	lt
 8005182:	425b      	neglt	r3, r3
 8005184:	2b7f      	cmp	r3, #127	; 0x7f
 8005186:	dd01      	ble.n	800518c <lowlayer_computeAndWritePulse+0x2e4>
		return FALSE;
 8005188:	2300      	movs	r3, #0
 800518a:	e00c      	b.n	80051a6 <lowlayer_computeAndWritePulse+0x2fe>
	} // Can't convert to int8_t , over range

	result = lowlayer_writePulse((int8_t)delta_var0,
 800518c:	f997 0020 	ldrsb.w	r0, [r7, #32]
 8005190:	f997 1018 	ldrsb.w	r1, [r7, #24]
 8005194:	f997 2010 	ldrsb.w	r2, [r7, #16]
 8005198:	f997 3008 	ldrsb.w	r3, [r7, #8]
 800519c:	f000 f828 	bl	80051f0 <lowlayer_writePulse>
 80051a0:	4603      	mov	r3, r0
 80051a2:	71fb      	strb	r3, [r7, #7]
								 (int8_t)delta_var1,
								 (int8_t)delta_var2,
								 (int8_t)delta_var3);

	return result;
 80051a4:	79fb      	ldrb	r3, [r7, #7]
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	374c      	adds	r7, #76	; 0x4c
 80051aa:	46bd      	mov	sp, r7
 80051ac:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80051b0:	b004      	add	sp, #16
 80051b2:	4770      	bx	lr
 80051b4:	f3af 8000 	nop.w
 80051b8:	60000000 	.word	0x60000000
 80051bc:	401921fb 	.word	0x401921fb
 80051c0:	daaaaaab 	.word	0xdaaaaaab
 80051c4:	4007bc89 	.word	0x4007bc89
 80051c8:	a0000000 	.word	0xa0000000
 80051cc:	40d3bca1 	.word	0x40d3bca1
 80051d0:	daaaaaab 	.word	0xdaaaaaab
 80051d4:	3ff7bc89 	.word	0x3ff7bc89
 80051d8:	00000000 	.word	0x00000000
 80051dc:	40d38800 	.word	0x40d38800
 80051e0:	88000000 	.word	0x88000000
 80051e4:	4002d97c 	.word	0x4002d97c
 80051e8:	40df4000 	.word	0x40df4000
 80051ec:	40590000 	.word	0x40590000

080051f0 <lowlayer_writePulse>:


uint8_t	lowlayer_writePulse(int8_t pulse0, int8_t pulse1, int8_t pulse2, int8_t pulse3) {
 80051f0:	b590      	push	{r4, r7, lr}
 80051f2:	b087      	sub	sp, #28
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	4604      	mov	r4, r0
 80051f8:	4608      	mov	r0, r1
 80051fa:	4611      	mov	r1, r2
 80051fc:	461a      	mov	r2, r3
 80051fe:	4623      	mov	r3, r4
 8005200:	71fb      	strb	r3, [r7, #7]
 8005202:	4603      	mov	r3, r0
 8005204:	71bb      	strb	r3, [r7, #6]
 8005206:	460b      	mov	r3, r1
 8005208:	717b      	strb	r3, [r7, #5]
 800520a:	4613      	mov	r3, r2
 800520c:	713b      	strb	r3, [r7, #4]
	uint8_t pulse0_combine, pulse1_combine, pulse2_combine, pulse3_combine;
	uint8_t pulse0_abs, pulse1_abs, pulse2_abs, pulse3_abs;

	// Var 0
	if (pulse0 < 0) {
 800520e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005212:	2b00      	cmp	r3, #0
 8005214:	da06      	bge.n	8005224 <lowlayer_writePulse+0x34>
		pulse0_abs = -pulse0;
 8005216:	79fb      	ldrb	r3, [r7, #7]
 8005218:	425b      	negs	r3, r3
 800521a:	74fb      	strb	r3, [r7, #19]
		pulse0_combine = -pulse0 | ((!DIR_J0) << 7); // Negative : Clockwise
 800521c:	79fb      	ldrb	r3, [r7, #7]
 800521e:	425b      	negs	r3, r3
 8005220:	75fb      	strb	r3, [r7, #23]
 8005222:	e006      	b.n	8005232 <lowlayer_writePulse+0x42>
	} else {
		pulse0_abs = pulse0;
 8005224:	79fb      	ldrb	r3, [r7, #7]
 8005226:	74fb      	strb	r3, [r7, #19]
		pulse0_combine = pulse0 | (DIR_J0 << 7); // Positive : Anti-Clockwise
 8005228:	79fb      	ldrb	r3, [r7, #7]
 800522a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800522e:	b25b      	sxtb	r3, r3
 8005230:	75fb      	strb	r3, [r7, #23]
	}
	// Var 1
	if (pulse1 < 0) {
 8005232:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005236:	2b00      	cmp	r3, #0
 8005238:	da06      	bge.n	8005248 <lowlayer_writePulse+0x58>
		pulse1_abs = -pulse1;
 800523a:	79bb      	ldrb	r3, [r7, #6]
 800523c:	425b      	negs	r3, r3
 800523e:	74bb      	strb	r3, [r7, #18]
		pulse1_combine = -pulse1 | ((!DIR_J1) << 7);
 8005240:	79bb      	ldrb	r3, [r7, #6]
 8005242:	425b      	negs	r3, r3
 8005244:	75bb      	strb	r3, [r7, #22]
 8005246:	e006      	b.n	8005256 <lowlayer_writePulse+0x66>
	} else {
		pulse1_abs = pulse1;
 8005248:	79bb      	ldrb	r3, [r7, #6]
 800524a:	74bb      	strb	r3, [r7, #18]
		pulse1_combine = pulse1 | (DIR_J1 << 7);
 800524c:	79bb      	ldrb	r3, [r7, #6]
 800524e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005252:	b25b      	sxtb	r3, r3
 8005254:	75bb      	strb	r3, [r7, #22]
	}
	// Var 2
	if (pulse2 < 0) {
 8005256:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800525a:	2b00      	cmp	r3, #0
 800525c:	da0b      	bge.n	8005276 <lowlayer_writePulse+0x86>
		pulse2_abs = -pulse2;
 800525e:	797b      	ldrb	r3, [r7, #5]
 8005260:	425b      	negs	r3, r3
 8005262:	747b      	strb	r3, [r7, #17]
		pulse2_combine = -pulse2 | ((!DIR_J2) << 7);
 8005264:	797b      	ldrb	r3, [r7, #5]
 8005266:	425b      	negs	r3, r3
 8005268:	b2db      	uxtb	r3, r3
 800526a:	b25b      	sxtb	r3, r3
 800526c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005270:	b25b      	sxtb	r3, r3
 8005272:	757b      	strb	r3, [r7, #21]
 8005274:	e003      	b.n	800527e <lowlayer_writePulse+0x8e>
	} else {
		pulse2_abs = pulse2;
 8005276:	797b      	ldrb	r3, [r7, #5]
 8005278:	747b      	strb	r3, [r7, #17]
		pulse2_combine = pulse2 | (DIR_J2 << 7);
 800527a:	797b      	ldrb	r3, [r7, #5]
 800527c:	757b      	strb	r3, [r7, #21]
	}
	// Var 3
	if (pulse3 < 0) {
 800527e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8005282:	2b00      	cmp	r3, #0
 8005284:	da06      	bge.n	8005294 <lowlayer_writePulse+0xa4>
		pulse3_abs = -pulse3;
 8005286:	793b      	ldrb	r3, [r7, #4]
 8005288:	425b      	negs	r3, r3
 800528a:	743b      	strb	r3, [r7, #16]
		pulse3_combine = -pulse3 | ((!DIR_J3) << 7);
 800528c:	793b      	ldrb	r3, [r7, #4]
 800528e:	425b      	negs	r3, r3
 8005290:	753b      	strb	r3, [r7, #20]
 8005292:	e006      	b.n	80052a2 <lowlayer_writePulse+0xb2>
	} else {
		pulse3_abs = pulse3;
 8005294:	793b      	ldrb	r3, [r7, #4]
 8005296:	743b      	strb	r3, [r7, #16]
		pulse3_combine = pulse3 | (DIR_J3 << 7);
 8005298:	793b      	ldrb	r3, [r7, #4]
 800529a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800529e:	b25b      	sxtb	r3, r3
 80052a0:	753b      	strb	r3, [r7, #20]
	}

	// Check limit
	if (pulse0_abs > LIM_PULSE_J0
 80052a2:	7cfb      	ldrb	r3, [r7, #19]
 80052a4:	2b4b      	cmp	r3, #75	; 0x4b
 80052a6:	d808      	bhi.n	80052ba <lowlayer_writePulse+0xca>
		|| pulse1_abs > LIM_PULSE_J1
 80052a8:	7cbb      	ldrb	r3, [r7, #18]
 80052aa:	2b78      	cmp	r3, #120	; 0x78
 80052ac:	d805      	bhi.n	80052ba <lowlayer_writePulse+0xca>
		|| pulse2_abs > LIM_PULSE_J2
 80052ae:	7c7b      	ldrb	r3, [r7, #17]
 80052b0:	2b7d      	cmp	r3, #125	; 0x7d
 80052b2:	d802      	bhi.n	80052ba <lowlayer_writePulse+0xca>
		|| pulse3_abs > LIM_PULSE_J3) {
 80052b4:	7c3b      	ldrb	r3, [r7, #16]
 80052b6:	2b65      	cmp	r3, #101	; 0x65
 80052b8:	d901      	bls.n	80052be <lowlayer_writePulse+0xce>
		return FALSE;
 80052ba:	2300      	movs	r3, #0
 80052bc:	e04b      	b.n	8005356 <lowlayer_writePulse+0x166>
//	if (pulse3_abs == 0) {
//		HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET); // Disable
//	} else {
//		HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
//	}
	HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
 80052be:	2200      	movs	r2, #0
 80052c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80052c4:	4826      	ldr	r0, [pc, #152]	; (8005360 <lowlayer_writePulse+0x170>)
 80052c6:	f006 fffd 	bl	800c2c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PULSE_WRITE_GPIO_Port, PULSE_WRITE_Pin, GPIO_PIN_RESET);
 80052ca:	2200      	movs	r2, #0
 80052cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80052d0:	4824      	ldr	r0, [pc, #144]	; (8005364 <lowlayer_writePulse+0x174>)
 80052d2:	f006 fff7 	bl	800c2c4 <HAL_GPIO_WritePin>
	// Write to Module DDA
	FSMC_Write(ADDRESS_DDA_0, (uint32_t)pulse0_combine);
 80052d6:	7dfb      	ldrb	r3, [r7, #23]
 80052d8:	4619      	mov	r1, r3
 80052da:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 80052de:	f7fe fae5 	bl	80038ac <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_1, (uint32_t)pulse1_combine);
 80052e2:	7dbb      	ldrb	r3, [r7, #22]
 80052e4:	4619      	mov	r1, r3
 80052e6:	4820      	ldr	r0, [pc, #128]	; (8005368 <lowlayer_writePulse+0x178>)
 80052e8:	f7fe fae0 	bl	80038ac <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_2, (uint32_t)pulse2_combine);
 80052ec:	7d7b      	ldrb	r3, [r7, #21]
 80052ee:	4619      	mov	r1, r3
 80052f0:	481e      	ldr	r0, [pc, #120]	; (800536c <lowlayer_writePulse+0x17c>)
 80052f2:	f7fe fadb 	bl	80038ac <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_3, (uint32_t)pulse3_combine);
 80052f6:	7d3b      	ldrb	r3, [r7, #20]
 80052f8:	4619      	mov	r1, r3
 80052fa:	481d      	ldr	r0, [pc, #116]	; (8005370 <lowlayer_writePulse+0x180>)
 80052fc:	f7fe fad6 	bl	80038ac <FSMC_Write>

	// Trigger
	uint8_t delay = 100;
 8005300:	2364      	movs	r3, #100	; 0x64
 8005302:	73fb      	strb	r3, [r7, #15]
	
	 while (delay--);
 8005304:	bf00      	nop
 8005306:	7bfb      	ldrb	r3, [r7, #15]
 8005308:	1e5a      	subs	r2, r3, #1
 800530a:	73fa      	strb	r2, [r7, #15]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1fa      	bne.n	8005306 <lowlayer_writePulse+0x116>

//	int16_t wow = HAL_GPIO_ReadPin(CPLD_BUSY_GPIO_Port, CPLD_BUSY_Pin);
//	LOG_REPORT(" Busy: ", wow);
	HAL_GPIO_WritePin(PULSE_WRITE_GPIO_Port, PULSE_WRITE_Pin, GPIO_PIN_SET);
 8005310:	2201      	movs	r2, #1
 8005312:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005316:	4813      	ldr	r0, [pc, #76]	; (8005364 <lowlayer_writePulse+0x174>)
 8005318:	f006 ffd4 	bl	800c2c4 <HAL_GPIO_WritePin>

	// Accumulate
	pulse_accumulate[0] += pulse0;
 800531c:	4b15      	ldr	r3, [pc, #84]	; (8005374 <lowlayer_writePulse+0x184>)
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005324:	4413      	add	r3, r2
 8005326:	4a13      	ldr	r2, [pc, #76]	; (8005374 <lowlayer_writePulse+0x184>)
 8005328:	6013      	str	r3, [r2, #0]
	pulse_accumulate[1] += pulse1;
 800532a:	4b12      	ldr	r3, [pc, #72]	; (8005374 <lowlayer_writePulse+0x184>)
 800532c:	685a      	ldr	r2, [r3, #4]
 800532e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005332:	4413      	add	r3, r2
 8005334:	4a0f      	ldr	r2, [pc, #60]	; (8005374 <lowlayer_writePulse+0x184>)
 8005336:	6053      	str	r3, [r2, #4]
	pulse_accumulate[2] += pulse2;
 8005338:	4b0e      	ldr	r3, [pc, #56]	; (8005374 <lowlayer_writePulse+0x184>)
 800533a:	689a      	ldr	r2, [r3, #8]
 800533c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8005340:	4413      	add	r3, r2
 8005342:	4a0c      	ldr	r2, [pc, #48]	; (8005374 <lowlayer_writePulse+0x184>)
 8005344:	6093      	str	r3, [r2, #8]
	pulse_accumulate[3] += pulse3;
 8005346:	4b0b      	ldr	r3, [pc, #44]	; (8005374 <lowlayer_writePulse+0x184>)
 8005348:	68da      	ldr	r2, [r3, #12]
 800534a:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800534e:	4413      	add	r3, r2
 8005350:	4a08      	ldr	r2, [pc, #32]	; (8005374 <lowlayer_writePulse+0x184>)
 8005352:	60d3      	str	r3, [r2, #12]

	return TRUE;
 8005354:	2301      	movs	r3, #1
}
 8005356:	4618      	mov	r0, r3
 8005358:	371c      	adds	r7, #28
 800535a:	46bd      	mov	sp, r7
 800535c:	bd90      	pop	{r4, r7, pc}
 800535e:	bf00      	nop
 8005360:	40020000 	.word	0x40020000
 8005364:	40020c00 	.word	0x40020c00
 8005368:	60000002 	.word	0x60000002
 800536c:	60000004 	.word	0x60000004
 8005370:	60000006 	.word	0x60000006
 8005374:	20005a90 	.word	0x20005a90

08005378 <lowlayer_resetEncoder>:

void	lowlayer_resetEncoder(void) {
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
	// Trigger
	uint8_t delay = 100;
 800537e:	2364      	movs	r3, #100	; 0x64
 8005380:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ENCODER_RESET_GPIO_Port, ENCODER_RESET_Pin, GPIO_PIN_SET);
 8005382:	2201      	movs	r2, #1
 8005384:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005388:	4809      	ldr	r0, [pc, #36]	; (80053b0 <lowlayer_resetEncoder+0x38>)
 800538a:	f006 ff9b 	bl	800c2c4 <HAL_GPIO_WritePin>
	while (delay--);
 800538e:	bf00      	nop
 8005390:	79fb      	ldrb	r3, [r7, #7]
 8005392:	1e5a      	subs	r2, r3, #1
 8005394:	71fa      	strb	r2, [r7, #7]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1fa      	bne.n	8005390 <lowlayer_resetEncoder+0x18>
	HAL_GPIO_WritePin(ENCODER_RESET_GPIO_Port, ENCODER_RESET_Pin, GPIO_PIN_RESET);
 800539a:	2200      	movs	r2, #0
 800539c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80053a0:	4803      	ldr	r0, [pc, #12]	; (80053b0 <lowlayer_resetEncoder+0x38>)
 80053a2:	f006 ff8f 	bl	800c2c4 <HAL_GPIO_WritePin>
}
 80053a6:	bf00      	nop
 80053a8:	3708      	adds	r7, #8
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	40020c00 	.word	0x40020c00

080053b4 <lowlayer_readLimitSwitch>:

uint8_t lowlayer_readLimitSwitch(void) {
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
	uint16_t read_data = FSMC_Read(ADDRESS_LIMIT);
 80053ba:	4805      	ldr	r0, [pc, #20]	; (80053d0 <lowlayer_readLimitSwitch+0x1c>)
 80053bc:	f7fe fa85 	bl	80038ca <FSMC_Read>
 80053c0:	4603      	mov	r3, r0
 80053c2:	80fb      	strh	r3, [r7, #6]

	return (uint8_t)read_data;
 80053c4:	88fb      	ldrh	r3, [r7, #6]
 80053c6:	b2db      	uxtb	r3, r3
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3708      	adds	r7, #8
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	60000020 	.word	0x60000020

080053d4 <lowlayer_readEncoder>:

int32_t lowlayer_readEncoder(uint8_t encoder_num) {
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	4603      	mov	r3, r0
 80053dc:	71fb      	strb	r3, [r7, #7]
	int32_t data;
	if (encoder_num <= 2) {
 80053de:	79fb      	ldrb	r3, [r7, #7]
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d81c      	bhi.n	800541e <lowlayer_readEncoder+0x4a>
		uint16_t low_word = FSMC_Read(ADDRESS_ENC0_LOW + encoder_num*4);
 80053e4:	79fb      	ldrb	r3, [r7, #7]
 80053e6:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 80053ea:	3310      	adds	r3, #16
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	4618      	mov	r0, r3
 80053f0:	f7fe fa6b 	bl	80038ca <FSMC_Read>
 80053f4:	4603      	mov	r3, r0
 80053f6:	817b      	strh	r3, [r7, #10]
		uint16_t high_word = FSMC_Read(ADDRESS_ENC0_LOW + encoder_num*4 + 2);
 80053f8:	79fb      	ldrb	r3, [r7, #7]
 80053fa:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 80053fe:	3310      	adds	r3, #16
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	3302      	adds	r3, #2
 8005404:	4618      	mov	r0, r3
 8005406:	f7fe fa60 	bl	80038ca <FSMC_Read>
 800540a:	4603      	mov	r3, r0
 800540c:	813b      	strh	r3, [r7, #8]
		data = high_word;
 800540e:	893b      	ldrh	r3, [r7, #8]
 8005410:	60fb      	str	r3, [r7, #12]
		data = (data << 16) | low_word;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	041a      	lsls	r2, r3, #16
 8005416:	897b      	ldrh	r3, [r7, #10]
 8005418:	4313      	orrs	r3, r2
 800541a:	60fb      	str	r3, [r7, #12]
 800541c:	e001      	b.n	8005422 <lowlayer_readEncoder+0x4e>
	} else {
		data = 0;
 800541e:	2300      	movs	r3, #0
 8005420:	60fb      	str	r3, [r7, #12]
	}
	return data;
 8005422:	68fb      	ldr	r3, [r7, #12]
}
 8005424:	4618      	mov	r0, r3
 8005426:	3710      	adds	r7, #16
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <lowlayer_readCapture>:

int32_t lowlayer_readCapture(uint8_t capture_num) {
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	4603      	mov	r3, r0
 8005434:	71fb      	strb	r3, [r7, #7]
	int32_t data;
	if (capture_num <= 2) {
 8005436:	79fb      	ldrb	r3, [r7, #7]
 8005438:	2b02      	cmp	r3, #2
 800543a:	d81c      	bhi.n	8005476 <lowlayer_readCapture+0x4a>
		uint16_t low_word = FSMC_Read(ADDRESS_CAP0_LOW + capture_num*4);
 800543c:	79fb      	ldrb	r3, [r7, #7]
 800543e:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8005442:	3318      	adds	r3, #24
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	4618      	mov	r0, r3
 8005448:	f7fe fa3f 	bl	80038ca <FSMC_Read>
 800544c:	4603      	mov	r3, r0
 800544e:	817b      	strh	r3, [r7, #10]
		uint16_t high_word = FSMC_Read(ADDRESS_CAP0_LOW + capture_num*4 + 2);
 8005450:	79fb      	ldrb	r3, [r7, #7]
 8005452:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8005456:	3318      	adds	r3, #24
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	3302      	adds	r3, #2
 800545c:	4618      	mov	r0, r3
 800545e:	f7fe fa34 	bl	80038ca <FSMC_Read>
 8005462:	4603      	mov	r3, r0
 8005464:	813b      	strh	r3, [r7, #8]
		data = high_word;
 8005466:	893b      	ldrh	r3, [r7, #8]
 8005468:	60fb      	str	r3, [r7, #12]
		data = (data << 16) | low_word;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	041a      	lsls	r2, r3, #16
 800546e:	897b      	ldrh	r3, [r7, #10]
 8005470:	4313      	orrs	r3, r2
 8005472:	60fb      	str	r3, [r7, #12]
 8005474:	e001      	b.n	800547a <lowlayer_readCapture+0x4e>
	} else {
		data = 0;
 8005476:	2300      	movs	r3, #0
 8005478:	60fb      	str	r3, [r7, #12]
	}
	return data;
 800547a:	68fb      	ldr	r3, [r7, #12]
}
 800547c:	4618      	mov	r0, r3
 800547e:	3710      	adds	r7, #16
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <lowlayer_updateEncoder>:

void	lowlayer_updateEncoder(void) {
 8005484:	b590      	push	{r4, r7, lr}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 800548a:	2300      	movs	r3, #0
 800548c:	71fb      	strb	r3, [r7, #7]
 800548e:	e00b      	b.n	80054a8 <lowlayer_updateEncoder+0x24>
		position_encoder[i] = lowlayer_readEncoder(i);
 8005490:	79fc      	ldrb	r4, [r7, #7]
 8005492:	79fb      	ldrb	r3, [r7, #7]
 8005494:	4618      	mov	r0, r3
 8005496:	f7ff ff9d 	bl	80053d4 <lowlayer_readEncoder>
 800549a:	4602      	mov	r2, r0
 800549c:	4b06      	ldr	r3, [pc, #24]	; (80054b8 <lowlayer_updateEncoder+0x34>)
 800549e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	for (uint8_t i = 0; i < 3; i++) {
 80054a2:	79fb      	ldrb	r3, [r7, #7]
 80054a4:	3301      	adds	r3, #1
 80054a6:	71fb      	strb	r3, [r7, #7]
 80054a8:	79fb      	ldrb	r3, [r7, #7]
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d9f0      	bls.n	8005490 <lowlayer_updateEncoder+0xc>
	}
}
 80054ae:	bf00      	nop
 80054b0:	370c      	adds	r7, #12
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd90      	pop	{r4, r7, pc}
 80054b6:	bf00      	nop
 80054b8:	20005aa4 	.word	0x20005aa4

080054bc <lowlayer_updateCapture>:

void	lowlayer_updateCapture(void) {
 80054bc:	b590      	push	{r4, r7, lr}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 80054c2:	2300      	movs	r3, #0
 80054c4:	71fb      	strb	r3, [r7, #7]
 80054c6:	e00b      	b.n	80054e0 <lowlayer_updateCapture+0x24>
			position_capture[i] = lowlayer_readCapture(i);
 80054c8:	79fc      	ldrb	r4, [r7, #7]
 80054ca:	79fb      	ldrb	r3, [r7, #7]
 80054cc:	4618      	mov	r0, r3
 80054ce:	f7ff ffad 	bl	800542c <lowlayer_readCapture>
 80054d2:	4602      	mov	r2, r0
 80054d4:	4b06      	ldr	r3, [pc, #24]	; (80054f0 <lowlayer_updateCapture+0x34>)
 80054d6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	for (uint8_t i = 0; i < 3; i++) {
 80054da:	79fb      	ldrb	r3, [r7, #7]
 80054dc:	3301      	adds	r3, #1
 80054de:	71fb      	strb	r3, [r7, #7]
 80054e0:	79fb      	ldrb	r3, [r7, #7]
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d9f0      	bls.n	80054c8 <lowlayer_updateCapture+0xc>
	}
}
 80054e6:	bf00      	nop
 80054e8:	370c      	adds	r7, #12
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd90      	pop	{r4, r7, pc}
 80054ee:	bf00      	nop
 80054f0:	20005ab4 	.word	0x20005ab4

080054f4 <lowlayer_updateLimit>:

void	lowlayer_updateLimit(void) {
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
	uint8_t limit_data = lowlayer_readLimitSwitch();
 80054fa:	f7ff ff5b 	bl	80053b4 <lowlayer_readLimitSwitch>
 80054fe:	4603      	mov	r3, r0
 8005500:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i = 0; i < 4; i++) {
 8005502:	2300      	movs	r3, #0
 8005504:	71fb      	strb	r3, [r7, #7]
 8005506:	e00d      	b.n	8005524 <lowlayer_updateLimit+0x30>
			limit_switch[i] = (limit_data & (0x01 << i)) ? 1 : 0;
 8005508:	79ba      	ldrb	r2, [r7, #6]
 800550a:	79fb      	ldrb	r3, [r7, #7]
 800550c:	fa42 f303 	asr.w	r3, r2, r3
 8005510:	b2da      	uxtb	r2, r3
 8005512:	79fb      	ldrb	r3, [r7, #7]
 8005514:	f002 0201 	and.w	r2, r2, #1
 8005518:	b2d1      	uxtb	r1, r2
 800551a:	4a06      	ldr	r2, [pc, #24]	; (8005534 <lowlayer_updateLimit+0x40>)
 800551c:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 4; i++) {
 800551e:	79fb      	ldrb	r3, [r7, #7]
 8005520:	3301      	adds	r3, #1
 8005522:	71fb      	strb	r3, [r7, #7]
 8005524:	79fb      	ldrb	r3, [r7, #7]
 8005526:	2b03      	cmp	r3, #3
 8005528:	d9ee      	bls.n	8005508 <lowlayer_updateLimit+0x14>
	}
}
 800552a:	bf00      	nop
 800552c:	3708      	adds	r7, #8
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	20005ab0 	.word	0x20005ab0

08005538 <lowlayer_setOutput>:

void	lowlayer_setOutput(uint8_t value) {
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
 800553e:	4603      	mov	r3, r0
 8005540:	71fb      	strb	r3, [r7, #7]
	if (value > 0) {
 8005542:	79fb      	ldrb	r3, [r7, #7]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d006      	beq.n	8005556 <lowlayer_setOutput+0x1e>
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_SET);
 8005548:	2201      	movs	r2, #1
 800554a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800554e:	4807      	ldr	r0, [pc, #28]	; (800556c <lowlayer_setOutput+0x34>)
 8005550:	f006 feb8 	bl	800c2c4 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_RESET);
	}
}
 8005554:	e005      	b.n	8005562 <lowlayer_setOutput+0x2a>
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_RESET);
 8005556:	2200      	movs	r2, #0
 8005558:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800555c:	4803      	ldr	r0, [pc, #12]	; (800556c <lowlayer_setOutput+0x34>)
 800555e:	f006 feb1 	bl	800c2c4 <HAL_GPIO_WritePin>
}
 8005562:	bf00      	nop
 8005564:	3708      	adds	r7, #8
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	40020400 	.word	0x40020400

08005570 <lowlayer_CPLD_Init>:

void	lowlayer_CPLD_Init(void) {
 8005570:	b580      	push	{r7, lr}
 8005572:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STOP_GPIO_Port, STOP_Pin, GPIO_PIN_SET); // STOP low active
 8005574:	2201      	movs	r2, #1
 8005576:	2140      	movs	r1, #64	; 0x40
 8005578:	4802      	ldr	r0, [pc, #8]	; (8005584 <lowlayer_CPLD_Init+0x14>)
 800557a:	f006 fea3 	bl	800c2c4 <HAL_GPIO_WritePin>
}
 800557e:	bf00      	nop
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	40020c00 	.word	0x40020c00

08005588 <lowlayer_stepMotorInit>:

void	lowlayer_stepMotorInit(void) {
 8005588:	b580      	push	{r7, lr}
 800558a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET); // ENABLE low active
 800558c:	2201      	movs	r2, #1
 800558e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005592:	4808      	ldr	r0, [pc, #32]	; (80055b4 <lowlayer_stepMotorInit+0x2c>)
 8005594:	f006 fe96 	bl	800c2c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_RESET_GPIO_Port, STEP_RESET_Pin, GPIO_PIN_SET); // RESET low active
 8005598:	2201      	movs	r2, #1
 800559a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800559e:	4805      	ldr	r0, [pc, #20]	; (80055b4 <lowlayer_stepMotorInit+0x2c>)
 80055a0:	f006 fe90 	bl	800c2c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_SLEEP_GPIO_Port, STEP_SLEEP_Pin, GPIO_PIN_SET); // SLEEP low active
 80055a4:	2201      	movs	r2, #1
 80055a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80055aa:	4802      	ldr	r0, [pc, #8]	; (80055b4 <lowlayer_stepMotorInit+0x2c>)
 80055ac:	f006 fe8a 	bl	800c2c4 <HAL_GPIO_WritePin>
}
 80055b0:	bf00      	nop
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	40020000 	.word	0x40020000

080055b8 <scaraStartup>:
//											 "Over Velocity",
//											 "Over Accelerate",
//											 "Wrong Joint Num",
//											 "Wrong Coordinate"
//											};
void				scaraStartup(void) {
 80055b8:	b580      	push	{r7, lr}
 80055ba:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	scaraSetScanFlag();
#endif
	lowlayer_CPLD_Init();
 80055bc:	f7ff ffd8 	bl	8005570 <lowlayer_CPLD_Init>
	lowlayer_stepMotorInit();
 80055c0:	f7ff ffe2 	bl	8005588 <lowlayer_stepMotorInit>
	lowlayer_resetEncoder();
 80055c4:	f7ff fed8 	bl	8005378 <lowlayer_resetEncoder>
	//lowlayer_writePulse(0, 0, 0, 0);
}
 80055c8:	bf00      	nop
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	0000      	movs	r0, r0
	...

080055d0 <scaraInitDuty>:
	return SCARA_STATUS_OK;
	
}

/* Compute duty corresponding to new command */
SCARA_StatusTypeDef	scaraInitDuty		(DUTY_Command_TypeDef command) {
 80055d0:	b084      	sub	sp, #16
 80055d2:	b5b0      	push	{r4, r5, r7, lr}
 80055d4:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 80055d8:	af90      	add	r7, sp, #576	; 0x240
 80055da:	f507 7ce8 	add.w	ip, r7, #464	; 0x1d0
 80055de:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	SCARA_StatusTypeDef status, status1, status2;

	/*----------- Space Task ------------*/
	if(DUTY_SPACE_TASK == command.space_type) {
 80055e2:	f897 31dd 	ldrb.w	r3, [r7, #477]	; 0x1dd
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	f040 83d0 	bne.w	8005d8c <scaraInitDuty+0x7bc>
		double total_s, angle_s;
		int8_t dir_angle;
		SCARA_PositionTypeDef	target_point;
		// Change Degree --> Radian
		command.target_point.roll = command.target_point.roll*PI/180.0;
 80055ec:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	; 0x258
 80055f0:	a3b3      	add	r3, pc, #716	; (adr r3, 80058c0 <scaraInitDuty+0x2f0>)
 80055f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f6:	f7fa ffff 	bl	80005f8 <__aeabi_dmul>
 80055fa:	4602      	mov	r2, r0
 80055fc:	460b      	mov	r3, r1
 80055fe:	4610      	mov	r0, r2
 8005600:	4619      	mov	r1, r3
 8005602:	f04f 0200 	mov.w	r2, #0
 8005606:	4bb0      	ldr	r3, [pc, #704]	; (80058c8 <scaraInitDuty+0x2f8>)
 8005608:	f7fb f920 	bl	800084c <__aeabi_ddiv>
 800560c:	4602      	mov	r2, r0
 800560e:	460b      	mov	r3, r1
 8005610:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
		// Coordinate
		if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8005614:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8005618:	2b01      	cmp	r3, #1
 800561a:	d130      	bne.n	800567e <scaraInitDuty+0xae>
			target_point.x 		= positionCurrent.x + command.target_point.x;
 800561c:	4bab      	ldr	r3, [pc, #684]	; (80058cc <scaraInitDuty+0x2fc>)
 800561e:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8005622:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 8005626:	f7fa fe31 	bl	800028c <__adddf3>
 800562a:	4602      	mov	r2, r0
 800562c:	460b      	mov	r3, r1
 800562e:	4639      	mov	r1, r7
 8005630:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			target_point.y 		= positionCurrent.y + command.target_point.y;
 8005634:	4ba5      	ldr	r3, [pc, #660]	; (80058cc <scaraInitDuty+0x2fc>)
 8005636:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800563a:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 800563e:	f7fa fe25 	bl	800028c <__adddf3>
 8005642:	4602      	mov	r2, r0
 8005644:	460b      	mov	r3, r1
 8005646:	4639      	mov	r1, r7
 8005648:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			target_point.z 		= positionCurrent.z + command.target_point.z;
 800564c:	4b9f      	ldr	r3, [pc, #636]	; (80058cc <scaraInitDuty+0x2fc>)
 800564e:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8005652:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8005656:	f7fa fe19 	bl	800028c <__adddf3>
 800565a:	4602      	mov	r2, r0
 800565c:	460b      	mov	r3, r1
 800565e:	4639      	mov	r1, r7
 8005660:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			target_point.roll	= positionCurrent.roll + command.target_point.roll;
 8005664:	4b99      	ldr	r3, [pc, #612]	; (80058cc <scaraInitDuty+0x2fc>)
 8005666:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 800566a:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 800566e:	f7fa fe0d 	bl	800028c <__adddf3>
 8005672:	4602      	mov	r2, r0
 8005674:	460b      	mov	r3, r1
 8005676:	4639      	mov	r1, r7
 8005678:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 800567c:	e01b      	b.n	80056b6 <scaraInitDuty+0xe6>
		} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 800567e:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8005682:	2b00      	cmp	r3, #0
 8005684:	d114      	bne.n	80056b0 <scaraInitDuty+0xe0>
			target_point.x 		= command.target_point.x;
 8005686:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 800568a:	4639      	mov	r1, r7
 800568c:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			target_point.y 		= command.target_point.y;
 8005690:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8005694:	4639      	mov	r1, r7
 8005696:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			target_point.z 		= command.target_point.z;
 800569a:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 800569e:	4639      	mov	r1, r7
 80056a0:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			target_point.roll	= command.target_point.roll;
 80056a4:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 80056a8:	4639      	mov	r1, r7
 80056aa:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 80056ae:	e002      	b.n	80056b6 <scaraInitDuty+0xe6>
		} else {
			return SCARA_STATUS_ERROR_COORDINATE;
 80056b0:	230c      	movs	r3, #12
 80056b2:	f001 bb16 	b.w	8006ce2 <scaraInitDuty+0x1712>
		}

		angle_s = target_point.roll - positionCurrent.roll;
 80056b6:	463b      	mov	r3, r7
 80056b8:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80056bc:	4b83      	ldr	r3, [pc, #524]	; (80058cc <scaraInitDuty+0x2fc>)
 80056be:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80056c2:	f7fa fde1 	bl	8000288 <__aeabi_dsub>
 80056c6:	4602      	mov	r2, r0
 80056c8:	460b      	mov	r3, r1
 80056ca:	e9c7 236a 	strd	r2, r3, [r7, #424]	; 0x1a8
		dir_angle = 1;
 80056ce:	2301      	movs	r3, #1
 80056d0:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
		if ( angle_s < 0) {
 80056d4:	f04f 0200 	mov.w	r2, #0
 80056d8:	f04f 0300 	mov.w	r3, #0
 80056dc:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	; 0x1a8
 80056e0:	f7fb f9fc 	bl	8000adc <__aeabi_dcmplt>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d002      	beq.n	80056f0 <scaraInitDuty+0x120>
			dir_angle = -1;
 80056ea:	23ff      	movs	r3, #255	; 0xff
 80056ec:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
		}
		if ( fabs(angle_s) > PI) {
 80056f0:	f8d7 41a8 	ldr.w	r4, [r7, #424]	; 0x1a8
 80056f4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80056f8:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80056fc:	a370      	add	r3, pc, #448	; (adr r3, 80058c0 <scaraInitDuty+0x2f0>)
 80056fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005702:	4620      	mov	r0, r4
 8005704:	4629      	mov	r1, r5
 8005706:	f7fb fa07 	bl	8000b18 <__aeabi_dcmpgt>
 800570a:	4603      	mov	r3, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d021      	beq.n	8005754 <scaraInitDuty+0x184>
			dir_angle = -dir_angle;
 8005710:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8005714:	425b      	negs	r3, r3
 8005716:	b2db      	uxtb	r3, r3
 8005718:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
			angle_s = (2*PI - fabsf(angle_s))*dir_angle;
 800571c:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	; 0x1a8
 8005720:	f7fb fa62 	bl	8000be8 <__aeabi_d2f>
 8005724:	ee07 0a90 	vmov	s15, r0
 8005728:	eef0 7ae7 	vabs.f32	s15, s15
 800572c:	ed9f 7a68 	vldr	s14, [pc, #416]	; 80058d0 <scaraInitDuty+0x300>
 8005730:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005734:	f997 31a7 	ldrsb.w	r3, [r7, #423]	; 0x1a7
 8005738:	ee07 3a90 	vmov	s15, r3
 800573c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005740:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005744:	ee17 0a90 	vmov	r0, s15
 8005748:	f7fa fefe 	bl	8000548 <__aeabi_f2d>
 800574c:	4603      	mov	r3, r0
 800574e:	460c      	mov	r4, r1
 8005750:	e9c7 346a 	strd	r3, r4, [r7, #424]	; 0x1a8
		}


		myDUTY.space_type = DUTY_SPACE_TASK;// Change type
 8005754:	4b5f      	ldr	r3, [pc, #380]	; (80058d4 <scaraInitDuty+0x304>)
 8005756:	2200      	movs	r2, #0
 8005758:	701a      	strb	r2, [r3, #0]
		myDUTY.task.roll_start = positionCurrent.roll;
 800575a:	4b5c      	ldr	r3, [pc, #368]	; (80058cc <scaraInitDuty+0x2fc>)
 800575c:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8005760:	4a5c      	ldr	r2, [pc, #368]	; (80058d4 <scaraInitDuty+0x304>)
 8005762:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 8005766:	e9c2 3400 	strd	r3, r4, [r2]
		// 1-Path Planning
			// Straight Line
		if ( DUTY_PATH_LINE == command.path_type ) {
 800576a:	f897 31de 	ldrb.w	r3, [r7, #478]	; 0x1de
 800576e:	2b00      	cmp	r3, #0
 8005770:	d11f      	bne.n	80057b2 <scaraInitDuty+0x1e2>
			myDUTY.task.path.path_type = DUTY_PATH_LINE;
 8005772:	4b58      	ldr	r3, [pc, #352]	; (80058d4 <scaraInitDuty+0x304>)
 8005774:	2200      	movs	r2, #0
 8005776:	721a      	strb	r2, [r3, #8]
			status = scaraInitLine(&(myDUTY.task.path.line), positionCurrent, target_point);
 8005778:	4c54      	ldr	r4, [pc, #336]	; (80058cc <scaraInitDuty+0x2fc>)
 800577a:	463b      	mov	r3, r7
 800577c:	a82e      	add	r0, sp, #184	; 0xb8
 800577e:	4619      	mov	r1, r3
 8005780:	23c0      	movs	r3, #192	; 0xc0
 8005782:	461a      	mov	r2, r3
 8005784:	f010 fb32 	bl	8015dec <memcpy>
 8005788:	4668      	mov	r0, sp
 800578a:	f104 0308 	add.w	r3, r4, #8
 800578e:	22b8      	movs	r2, #184	; 0xb8
 8005790:	4619      	mov	r1, r3
 8005792:	f010 fb2b 	bl	8015dec <memcpy>
 8005796:	e894 000c 	ldmia.w	r4, {r2, r3}
 800579a:	484f      	ldr	r0, [pc, #316]	; (80058d8 <scaraInitDuty+0x308>)
 800579c:	f001 fab4 	bl	8006d08 <scaraInitLine>
 80057a0:	4603      	mov	r3, r0
 80057a2:	f887 31bf 	strb.w	r3, [r7, #447]	; 0x1bf
			total_s = myDUTY.task.path.line.total_s;
 80057a6:	4b4b      	ldr	r3, [pc, #300]	; (80058d4 <scaraInitDuty+0x304>)
 80057a8:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 80057ac:	e9c7 346c 	strd	r3, r4, [r7, #432]	; 0x1b0
 80057b0:	e07d      	b.n	80058ae <scaraInitDuty+0x2de>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == command.path_type ) {
 80057b2:	f897 31de 	ldrb.w	r3, [r7, #478]	; 0x1de
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d176      	bne.n	80058a8 <scaraInitDuty+0x2d8>
			SCARA_PositionTypeDef	center_point;
			if( DUTY_COORDINATES_REL == command.coordinate_type) {
 80057ba:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d12d      	bne.n	800581e <scaraInitDuty+0x24e>
				center_point.x 		= positionCurrent.x + command.sub_point.x;
 80057c2:	4b42      	ldr	r3, [pc, #264]	; (80058cc <scaraInitDuty+0x2fc>)
 80057c4:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80057c8:	e9d7 34c0 	ldrd	r3, r4, [r7, #768]	; 0x300
 80057cc:	461a      	mov	r2, r3
 80057ce:	4623      	mov	r3, r4
 80057d0:	f7fa fd5c 	bl	800028c <__adddf3>
 80057d4:	4603      	mov	r3, r0
 80057d6:	460c      	mov	r4, r1
 80057d8:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80057dc:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
				center_point.y 		= positionCurrent.y + command.sub_point.y;
 80057e0:	4b3a      	ldr	r3, [pc, #232]	; (80058cc <scaraInitDuty+0x2fc>)
 80057e2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80057e6:	e9d7 34c2 	ldrd	r3, r4, [r7, #776]	; 0x308
 80057ea:	461a      	mov	r2, r3
 80057ec:	4623      	mov	r3, r4
 80057ee:	f7fa fd4d 	bl	800028c <__adddf3>
 80057f2:	4603      	mov	r3, r0
 80057f4:	460c      	mov	r4, r1
 80057f6:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80057fa:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
				center_point.z 		= positionCurrent.z + command.sub_point.z;
 80057fe:	4b33      	ldr	r3, [pc, #204]	; (80058cc <scaraInitDuty+0x2fc>)
 8005800:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8005804:	e9d7 34c4 	ldrd	r3, r4, [r7, #784]	; 0x310
 8005808:	461a      	mov	r2, r3
 800580a:	4623      	mov	r3, r4
 800580c:	f7fa fd3e 	bl	800028c <__adddf3>
 8005810:	4603      	mov	r3, r0
 8005812:	460c      	mov	r4, r1
 8005814:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8005818:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
 800581c:	e019      	b.n	8005852 <scaraInitDuty+0x282>
			} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 800581e:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8005822:	2b00      	cmp	r3, #0
 8005824:	d112      	bne.n	800584c <scaraInitDuty+0x27c>
				center_point.x 		= command.target_point.x;
 8005826:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 800582a:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800582e:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
				center_point.y 		= command.target_point.y;
 8005832:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 8005836:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800583a:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
				center_point.z 		= command.target_point.z;
 800583e:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 8005842:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8005846:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
 800584a:	e002      	b.n	8005852 <scaraInitDuty+0x282>
			} else {
				return SCARA_STATUS_ERROR_COORDINATE;
 800584c:	230c      	movs	r3, #12
			return SCARA_STATUS_ERROR_COORDINATE;
 800584e:	f001 ba48 	b.w	8006ce2 <scaraInitDuty+0x1712>
			}

			myDUTY.task.path.path_type = DUTY_PATH_CIRCLE;
 8005852:	4b20      	ldr	r3, [pc, #128]	; (80058d4 <scaraInitDuty+0x304>)
 8005854:	2201      	movs	r2, #1
 8005856:	721a      	strb	r2, [r3, #8]
			status = scaraInitCircle(&(myDUTY.task.path.circle),
 8005858:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800585c:	4c1b      	ldr	r4, [pc, #108]	; (80058cc <scaraInitDuty+0x2fc>)
 800585e:	938e      	str	r3, [sp, #568]	; 0x238
 8005860:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005864:	a85e      	add	r0, sp, #376	; 0x178
 8005866:	4619      	mov	r1, r3
 8005868:	23c0      	movs	r3, #192	; 0xc0
 800586a:	461a      	mov	r2, r3
 800586c:	f010 fabe 	bl	8015dec <memcpy>
 8005870:	463b      	mov	r3, r7
 8005872:	a82e      	add	r0, sp, #184	; 0xb8
 8005874:	4619      	mov	r1, r3
 8005876:	23c0      	movs	r3, #192	; 0xc0
 8005878:	461a      	mov	r2, r3
 800587a:	f010 fab7 	bl	8015dec <memcpy>
 800587e:	4668      	mov	r0, sp
 8005880:	f104 0308 	add.w	r3, r4, #8
 8005884:	22b8      	movs	r2, #184	; 0xb8
 8005886:	4619      	mov	r1, r3
 8005888:	f010 fab0 	bl	8015dec <memcpy>
 800588c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8005890:	4812      	ldr	r0, [pc, #72]	; (80058dc <scaraInitDuty+0x30c>)
 8005892:	f001 fafd 	bl	8006e90 <scaraInitCircle>
 8005896:	4603      	mov	r3, r0
 8005898:	f887 31bf 	strb.w	r3, [r7, #447]	; 0x1bf
										positionCurrent,
										target_point,
										center_point,
										command.sub_para_int );
			total_s = myDUTY.task.path.circle.total_s;
 800589c:	4b0d      	ldr	r3, [pc, #52]	; (80058d4 <scaraInitDuty+0x304>)
 800589e:	e9d3 343a 	ldrd	r3, r4, [r3, #232]	; 0xe8
 80058a2:	e9c7 346c 	strd	r3, r4, [r7, #432]	; 0x1b0
 80058a6:	e002      	b.n	80058ae <scaraInitDuty+0x2de>

		} else {
			return SCARA_STATUS_ERROR_TASK;
 80058a8:	2303      	movs	r3, #3
 80058aa:	f001 ba1a 	b.w	8006ce2 <scaraInitDuty+0x1712>
		}

		if ( SCARA_STATUS_OK != status) {
 80058ae:	f897 31bf 	ldrb.w	r3, [r7, #447]	; 0x1bf
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d014      	beq.n	80058e0 <scaraInitDuty+0x310>
			return status;
 80058b6:	f897 31bf 	ldrb.w	r3, [r7, #447]	; 0x1bf
 80058ba:	f001 ba12 	b.w	8006ce2 <scaraInitDuty+0x1712>
 80058be:	bf00      	nop
 80058c0:	60000000 	.word	0x60000000
 80058c4:	400921fb 	.word	0x400921fb
 80058c8:	40668000 	.word	0x40668000
 80058cc:	200066b8 	.word	0x200066b8
 80058d0:	40c90fdb 	.word	0x40c90fdb
 80058d4:	20005af8 	.word	0x20005af8
 80058d8:	20005b08 	.word	0x20005b08
 80058dc:	20005b78 	.word	0x20005b78
		}

		// 2-Trajectory Planning
			// LSPB
		if ( DUTY_TRAJECTORY_LSPB == command.trajec_type ) {
 80058e0:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f040 80ed 	bne.w	8005ac4 <scaraInitDuty+0x4f4>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 80058ea:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d155      	bne.n	800599e <scaraInitDuty+0x3ce>
//				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LSPB;
//				status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
//						 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
//				myDUTY.time_total = command.time_total;

				myDUTY.task.trajectory_3d.lspb.Tf = command.time_total;
 80058f2:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 80058f6:	4a9b      	ldr	r2, [pc, #620]	; (8005b64 <scaraInitDuty+0x594>)
 80058f8:	e9c2 345a 	strd	r3, r4, [r2, #360]	; 0x168
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 80058fc:	4b99      	ldr	r3, [pc, #612]	; (8005b64 <scaraInitDuty+0x594>)
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB1(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8005904:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005908:	ed97 6b7c 	vldr	d6, [r7, #496]	; 0x1f0
 800590c:	eeb0 2a46 	vmov.f32	s4, s12
 8005910:	eef0 2a66 	vmov.f32	s5, s13
 8005914:	eeb0 1a47 	vmov.f32	s2, s14
 8005918:	eef0 1a67 	vmov.f32	s3, s15
 800591c:	2201      	movs	r2, #1
 800591e:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 8005922:	2104      	movs	r1, #4
 8005924:	4890      	ldr	r0, [pc, #576]	; (8005b68 <scaraInitDuty+0x598>)
 8005926:	f001 fc97 	bl	8007258 <scaraInitLSPB1>
 800592a:	4603      	mov	r3, r0
 800592c:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
										 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.time_total);

				myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8005930:	4a8c      	ldr	r2, [pc, #560]	; (8005b64 <scaraInitDuty+0x594>)
 8005932:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8005936:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
				myDUTY.task.trajectory_roll.linear.Tf = command.time_total;
 800593a:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 800593e:	4a89      	ldr	r2, [pc, #548]	; (8005b64 <scaraInitDuty+0x594>)
 8005940:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005944:	e9c2 3400 	strd	r3, r4, [r2]
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8005948:	4b86      	ldr	r3, [pc, #536]	; (8005b64 <scaraInitDuty+0x594>)
 800594a:	2202      	movs	r2, #2
 800594c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, command.time_total);
 8005950:	f997 31a7 	ldrsb.w	r3, [r7, #423]	; 0x1a7
 8005954:	4618      	mov	r0, r3
 8005956:	f7fa fde5 	bl	8000524 <__aeabi_i2d>
 800595a:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	; 0x1a8
 800595e:	f7fa fe4b 	bl	80005f8 <__aeabi_dmul>
 8005962:	4603      	mov	r3, r0
 8005964:	460c      	mov	r4, r1
 8005966:	ec44 3b16 	vmov	d6, r3, r4
 800596a:	ed97 7b7c 	vldr	d7, [r7, #496]	; 0x1f0
 800596e:	eeb0 1a47 	vmov.f32	s2, s14
 8005972:	eef0 1a67 	vmov.f32	s3, s15
 8005976:	2203      	movs	r2, #3
 8005978:	eeb0 0a46 	vmov.f32	s0, s12
 800597c:	eef0 0a66 	vmov.f32	s1, s13
 8005980:	2105      	movs	r1, #5
 8005982:	487a      	ldr	r0, [pc, #488]	; (8005b6c <scaraInitDuty+0x59c>)
 8005984:	f001 fbfc 	bl	8007180 <scaraInitLinear>
 8005988:	4603      	mov	r3, r0
 800598a:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
				myDUTY.time_total = command.time_total;
 800598e:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8005992:	4a74      	ldr	r2, [pc, #464]	; (8005b64 <scaraInitDuty+0x594>)
 8005994:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8005998:	e9c2 3400 	strd	r3, r4, [r2]
 800599c:	e1e5      	b.n	8005d6a <scaraInitDuty+0x79a>
			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 800599e:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	f040 808b 	bne.w	8005abe <scaraInitDuty+0x4ee>
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 80059a8:	4b6e      	ldr	r3, [pc, #440]	; (8005b64 <scaraInitDuty+0x594>)
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 80059b0:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 80059b4:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 80059b8:	eeb0 2a46 	vmov.f32	s4, s12
 80059bc:	eef0 2a66 	vmov.f32	s5, s13
 80059c0:	eeb0 1a47 	vmov.f32	s2, s14
 80059c4:	eef0 1a67 	vmov.f32	s3, s15
 80059c8:	2200      	movs	r2, #0
 80059ca:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 80059ce:	2104      	movs	r1, #4
 80059d0:	4865      	ldr	r0, [pc, #404]	; (8005b68 <scaraInitDuty+0x598>)
 80059d2:	f001 fe9d 	bl	8007710 <scaraInitLSPB>
 80059d6:	4603      	mov	r3, r0
 80059d8:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
						 total_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LSPB;
 80059dc:	4b61      	ldr	r3, [pc, #388]	; (8005b64 <scaraInitDuty+0x594>)
 80059de:	2200      	movs	r2, #0
 80059e0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 80059e4:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 80059e8:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 80059ec:	eeb0 2a46 	vmov.f32	s4, s12
 80059f0:	eef0 2a66 	vmov.f32	s5, s13
 80059f4:	eeb0 1a47 	vmov.f32	s2, s14
 80059f8:	eef0 1a67 	vmov.f32	s3, s15
 80059fc:	2200      	movs	r2, #0
 80059fe:	ed97 0b6a 	vldr	d0, [r7, #424]	; 0x1a8
 8005a02:	2105      	movs	r1, #5
 8005a04:	485a      	ldr	r0, [pc, #360]	; (8005b70 <scaraInitDuty+0x5a0>)
 8005a06:	f001 fe83 	bl	8007710 <scaraInitLSPB>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
						 angle_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				// Synchronous time end
				if(myDUTY.task.trajectory_3d.lspb.Tf > myDUTY.task.trajectory_roll.lspb.Tf) {
 8005a10:	4b54      	ldr	r3, [pc, #336]	; (8005b64 <scaraInitDuty+0x594>)
 8005a12:	e9d3 015a 	ldrd	r0, r1, [r3, #360]	; 0x168
 8005a16:	4b53      	ldr	r3, [pc, #332]	; (8005b64 <scaraInitDuty+0x594>)
 8005a18:	e9d3 34ba 	ldrd	r3, r4, [r3, #744]	; 0x2e8
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	4623      	mov	r3, r4
 8005a20:	f7fb f87a 	bl	8000b18 <__aeabi_dcmpgt>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d024      	beq.n	8005a74 <scaraInitDuty+0x4a4>
					myDUTY.task.trajectory_roll.lspb.Tf = myDUTY.task.trajectory_3d.lspb.Tf;
 8005a2a:	4b4e      	ldr	r3, [pc, #312]	; (8005b64 <scaraInitDuty+0x594>)
 8005a2c:	e9d3 345a 	ldrd	r3, r4, [r3, #360]	; 0x168
 8005a30:	4a4c      	ldr	r2, [pc, #304]	; (8005b64 <scaraInitDuty+0x594>)
 8005a32:	e9c2 34ba 	strd	r3, r4, [r2, #744]	; 0x2e8
					status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 8005a36:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005a3a:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005a3e:	eeb0 2a46 	vmov.f32	s4, s12
 8005a42:	eef0 2a66 	vmov.f32	s5, s13
 8005a46:	eeb0 1a47 	vmov.f32	s2, s14
 8005a4a:	eef0 1a67 	vmov.f32	s3, s15
 8005a4e:	2201      	movs	r2, #1
 8005a50:	ed97 0b6a 	vldr	d0, [r7, #424]	; 0x1a8
 8005a54:	2105      	movs	r1, #5
 8005a56:	4846      	ldr	r0, [pc, #280]	; (8005b70 <scaraInitDuty+0x5a0>)
 8005a58:	f001 fe5a 	bl	8007710 <scaraInitLSPB>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
							 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_3d.lspb.Tf;
 8005a62:	4b40      	ldr	r3, [pc, #256]	; (8005b64 <scaraInitDuty+0x594>)
 8005a64:	e9d3 345a 	ldrd	r3, r4, [r3, #360]	; 0x168
 8005a68:	4a3e      	ldr	r2, [pc, #248]	; (8005b64 <scaraInitDuty+0x594>)
 8005a6a:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8005a6e:	e9c2 3400 	strd	r3, r4, [r2]
 8005a72:	e17a      	b.n	8005d6a <scaraInitDuty+0x79a>
				} else {
					myDUTY.task.trajectory_3d.lspb.Tf = myDUTY.task.trajectory_roll.lspb.Tf;
 8005a74:	4b3b      	ldr	r3, [pc, #236]	; (8005b64 <scaraInitDuty+0x594>)
 8005a76:	e9d3 34ba 	ldrd	r3, r4, [r3, #744]	; 0x2e8
 8005a7a:	4a3a      	ldr	r2, [pc, #232]	; (8005b64 <scaraInitDuty+0x594>)
 8005a7c:	e9c2 345a 	strd	r3, r4, [r2, #360]	; 0x168
					status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8005a80:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005a84:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005a88:	eeb0 2a46 	vmov.f32	s4, s12
 8005a8c:	eef0 2a66 	vmov.f32	s5, s13
 8005a90:	eeb0 1a47 	vmov.f32	s2, s14
 8005a94:	eef0 1a67 	vmov.f32	s3, s15
 8005a98:	2201      	movs	r2, #1
 8005a9a:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 8005a9e:	2104      	movs	r1, #4
 8005aa0:	4831      	ldr	r0, [pc, #196]	; (8005b68 <scaraInitDuty+0x598>)
 8005aa2:	f001 fe35 	bl	8007710 <scaraInitLSPB>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
							 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_roll.lspb.Tf;
 8005aac:	4b2d      	ldr	r3, [pc, #180]	; (8005b64 <scaraInitDuty+0x594>)
 8005aae:	e9d3 34ba 	ldrd	r3, r4, [r3, #744]	; 0x2e8
 8005ab2:	4a2c      	ldr	r2, [pc, #176]	; (8005b64 <scaraInitDuty+0x594>)
 8005ab4:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8005ab8:	e9c2 3400 	strd	r3, r4, [r2]
 8005abc:	e155      	b.n	8005d6a <scaraInitDuty+0x79a>
				}
			} else {
				return SCARA_STATUS_ERROR_MODE_INIT ;
 8005abe:	2308      	movs	r3, #8
 8005ac0:	f001 b90f 	b.w	8006ce2 <scaraInitDuty+0x1712>
			}
			// SCURVE
		} else if 	( DUTY_TRAJECTORY_SCURVE == command.trajec_type ){
 8005ac4:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	f040 80ea 	bne.w	8005ca2 <scaraInitDuty+0x6d2>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8005ace:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d152      	bne.n	8005b7c <scaraInitDuty+0x5ac>
				myDUTY.task.trajectory_3d.scurve.Tf = command.time_total;
 8005ad6:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8005ada:	4a22      	ldr	r2, [pc, #136]	; (8005b64 <scaraInitDuty+0x594>)
 8005adc:	e9c2 347e 	strd	r3, r4, [r2, #504]	; 0x1f8
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8005ae0:	4b20      	ldr	r3, [pc, #128]	; (8005b64 <scaraInitDuty+0x594>)
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8005ae8:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005aec:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005af0:	eeb0 2a46 	vmov.f32	s4, s12
 8005af4:	eef0 2a66 	vmov.f32	s5, s13
 8005af8:	eeb0 1a47 	vmov.f32	s2, s14
 8005afc:	eef0 1a67 	vmov.f32	s3, s15
 8005b00:	2201      	movs	r2, #1
 8005b02:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 8005b06:	2104      	movs	r1, #4
 8005b08:	481a      	ldr	r0, [pc, #104]	; (8005b74 <scaraInitDuty+0x5a4>)
 8005b0a:	f002 f9e1 	bl	8007ed0 <scaraInitScurve>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
						 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);

				myDUTY.task.trajectory_roll.scurve.Tf = command.time_total;
 8005b14:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8005b18:	4a12      	ldr	r2, [pc, #72]	; (8005b64 <scaraInitDuty+0x594>)
 8005b1a:	e9c2 34de 	strd	r3, r4, [r2, #888]	; 0x378
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8005b1e:	4b11      	ldr	r3, [pc, #68]	; (8005b64 <scaraInitDuty+0x594>)
 8005b20:	2201      	movs	r2, #1
 8005b22:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 8005b26:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005b2a:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005b2e:	eeb0 2a46 	vmov.f32	s4, s12
 8005b32:	eef0 2a66 	vmov.f32	s5, s13
 8005b36:	eeb0 1a47 	vmov.f32	s2, s14
 8005b3a:	eef0 1a67 	vmov.f32	s3, s15
 8005b3e:	2201      	movs	r2, #1
 8005b40:	ed97 0b6a 	vldr	d0, [r7, #424]	; 0x1a8
 8005b44:	2105      	movs	r1, #5
 8005b46:	480c      	ldr	r0, [pc, #48]	; (8005b78 <scaraInitDuty+0x5a8>)
 8005b48:	f002 f9c2 	bl	8007ed0 <scaraInitScurve>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
						 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
				myDUTY.time_total = command.time_total;
 8005b52:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8005b56:	4a03      	ldr	r2, [pc, #12]	; (8005b64 <scaraInitDuty+0x594>)
 8005b58:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8005b5c:	e9c2 3400 	strd	r3, r4, [r2]
 8005b60:	e103      	b.n	8005d6a <scaraInitDuty+0x79a>
 8005b62:	bf00      	nop
 8005b64:	20005af8 	.word	0x20005af8
 8005b68:	20005c10 	.word	0x20005c10
 8005b6c:	20005ee0 	.word	0x20005ee0
 8005b70:	20005d90 	.word	0x20005d90
 8005b74:	20005c90 	.word	0x20005c90
 8005b78:	20005e10 	.word	0x20005e10

			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8005b7c:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f040 808b 	bne.w	8005c9c <scaraInitDuty+0x6cc>
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8005b86:	4bb8      	ldr	r3, [pc, #736]	; (8005e68 <scaraInitDuty+0x898>)
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8005b8e:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005b92:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005b96:	eeb0 2a46 	vmov.f32	s4, s12
 8005b9a:	eef0 2a66 	vmov.f32	s5, s13
 8005b9e:	eeb0 1a47 	vmov.f32	s2, s14
 8005ba2:	eef0 1a67 	vmov.f32	s3, s15
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 8005bac:	2104      	movs	r1, #4
 8005bae:	48af      	ldr	r0, [pc, #700]	; (8005e6c <scaraInitDuty+0x89c>)
 8005bb0:	f002 f98e 	bl	8007ed0 <scaraInitScurve>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
						 total_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8005bba:	4bab      	ldr	r3, [pc, #684]	; (8005e68 <scaraInitDuty+0x898>)
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 8005bc2:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005bc6:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005bca:	eeb0 2a46 	vmov.f32	s4, s12
 8005bce:	eef0 2a66 	vmov.f32	s5, s13
 8005bd2:	eeb0 1a47 	vmov.f32	s2, s14
 8005bd6:	eef0 1a67 	vmov.f32	s3, s15
 8005bda:	2200      	movs	r2, #0
 8005bdc:	ed97 0b6a 	vldr	d0, [r7, #424]	; 0x1a8
 8005be0:	2105      	movs	r1, #5
 8005be2:	48a3      	ldr	r0, [pc, #652]	; (8005e70 <scaraInitDuty+0x8a0>)
 8005be4:	f002 f974 	bl	8007ed0 <scaraInitScurve>
 8005be8:	4603      	mov	r3, r0
 8005bea:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
						 angle_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				// synchronous time end
				if(myDUTY.task.trajectory_3d.scurve.Tf > myDUTY.task.trajectory_roll.scurve.Tf) {
 8005bee:	4b9e      	ldr	r3, [pc, #632]	; (8005e68 <scaraInitDuty+0x898>)
 8005bf0:	e9d3 017e 	ldrd	r0, r1, [r3, #504]	; 0x1f8
 8005bf4:	4b9c      	ldr	r3, [pc, #624]	; (8005e68 <scaraInitDuty+0x898>)
 8005bf6:	e9d3 34de 	ldrd	r3, r4, [r3, #888]	; 0x378
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	4623      	mov	r3, r4
 8005bfe:	f7fa ff8b 	bl	8000b18 <__aeabi_dcmpgt>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d024      	beq.n	8005c52 <scaraInitDuty+0x682>
					myDUTY.task.trajectory_roll.scurve.Tf = myDUTY.task.trajectory_3d.scurve.Tf;
 8005c08:	4b97      	ldr	r3, [pc, #604]	; (8005e68 <scaraInitDuty+0x898>)
 8005c0a:	e9d3 347e 	ldrd	r3, r4, [r3, #504]	; 0x1f8
 8005c0e:	4a96      	ldr	r2, [pc, #600]	; (8005e68 <scaraInitDuty+0x898>)
 8005c10:	e9c2 34de 	strd	r3, r4, [r2, #888]	; 0x378
					status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 8005c14:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005c18:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005c1c:	eeb0 2a46 	vmov.f32	s4, s12
 8005c20:	eef0 2a66 	vmov.f32	s5, s13
 8005c24:	eeb0 1a47 	vmov.f32	s2, s14
 8005c28:	eef0 1a67 	vmov.f32	s3, s15
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	ed97 0b6a 	vldr	d0, [r7, #424]	; 0x1a8
 8005c32:	2105      	movs	r1, #5
 8005c34:	488e      	ldr	r0, [pc, #568]	; (8005e70 <scaraInitDuty+0x8a0>)
 8005c36:	f002 f94b 	bl	8007ed0 <scaraInitScurve>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
							 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_3d.scurve.Tf;
 8005c40:	4b89      	ldr	r3, [pc, #548]	; (8005e68 <scaraInitDuty+0x898>)
 8005c42:	e9d3 347e 	ldrd	r3, r4, [r3, #504]	; 0x1f8
 8005c46:	4a88      	ldr	r2, [pc, #544]	; (8005e68 <scaraInitDuty+0x898>)
 8005c48:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8005c4c:	e9c2 3400 	strd	r3, r4, [r2]
 8005c50:	e08b      	b.n	8005d6a <scaraInitDuty+0x79a>
				} else {
					myDUTY.task.trajectory_3d.scurve.Tf = myDUTY.task.trajectory_roll.scurve.Tf;
 8005c52:	4b85      	ldr	r3, [pc, #532]	; (8005e68 <scaraInitDuty+0x898>)
 8005c54:	e9d3 34de 	ldrd	r3, r4, [r3, #888]	; 0x378
 8005c58:	4a83      	ldr	r2, [pc, #524]	; (8005e68 <scaraInitDuty+0x898>)
 8005c5a:	e9c2 347e 	strd	r3, r4, [r2, #504]	; 0x1f8
					status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8005c5e:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005c62:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005c66:	eeb0 2a46 	vmov.f32	s4, s12
 8005c6a:	eef0 2a66 	vmov.f32	s5, s13
 8005c6e:	eeb0 1a47 	vmov.f32	s2, s14
 8005c72:	eef0 1a67 	vmov.f32	s3, s15
 8005c76:	2201      	movs	r2, #1
 8005c78:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 8005c7c:	2104      	movs	r1, #4
 8005c7e:	487b      	ldr	r0, [pc, #492]	; (8005e6c <scaraInitDuty+0x89c>)
 8005c80:	f002 f926 	bl	8007ed0 <scaraInitScurve>
 8005c84:	4603      	mov	r3, r0
 8005c86:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
							 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_roll.scurve.Tf;
 8005c8a:	4b77      	ldr	r3, [pc, #476]	; (8005e68 <scaraInitDuty+0x898>)
 8005c8c:	e9d3 34de 	ldrd	r3, r4, [r3, #888]	; 0x378
 8005c90:	4a75      	ldr	r2, [pc, #468]	; (8005e68 <scaraInitDuty+0x898>)
 8005c92:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8005c96:	e9c2 3400 	strd	r3, r4, [r2]
 8005c9a:	e066      	b.n	8005d6a <scaraInitDuty+0x79a>
				}
			}else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 8005c9c:	2308      	movs	r3, #8
 8005c9e:	f001 b820 	b.w	8006ce2 <scaraInitDuty+0x1712>
			}
		}else if(DUTY_TRAJECTORY_LINEAR == command.trajec_type){
 8005ca2:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	d15c      	bne.n	8005d64 <scaraInitDuty+0x794>
			myDUTY.time_total = command.time_total;
 8005caa:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8005cae:	4a6e      	ldr	r2, [pc, #440]	; (8005e68 <scaraInitDuty+0x898>)
 8005cb0:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8005cb4:	e9c2 3400 	strd	r3, r4, [r2]
			myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8005cb8:	4a6b      	ldr	r2, [pc, #428]	; (8005e68 <scaraInitDuty+0x898>)
 8005cba:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8005cbe:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
			myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8005cc2:	4b69      	ldr	r3, [pc, #420]	; (8005e68 <scaraInitDuty+0x898>)
 8005cc4:	2202      	movs	r2, #2
 8005cc6:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
			myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8005cca:	4b67      	ldr	r3, [pc, #412]	; (8005e68 <scaraInitDuty+0x898>)
 8005ccc:	2202      	movs	r2, #2
 8005cce:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
			if(command.modeInit_type == DUTY_MODE_INIT_QT){
 8005cd2:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8005cd6:	2b03      	cmp	r3, #3
 8005cd8:	d110      	bne.n	8005cfc <scaraInitDuty+0x72c>
				status1 = scaraInitLinear(&(myDUTY.task.trajectory_3d.linear), TRAJECTORY_3D, total_s, DUTY_MODE_INIT_QT, command.time_total);
 8005cda:	ed97 7b7c 	vldr	d7, [r7, #496]	; 0x1f0
 8005cde:	eeb0 1a47 	vmov.f32	s2, s14
 8005ce2:	eef0 1a67 	vmov.f32	s3, s15
 8005ce6:	2203      	movs	r2, #3
 8005ce8:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 8005cec:	2104      	movs	r1, #4
 8005cee:	4861      	ldr	r0, [pc, #388]	; (8005e74 <scaraInitDuty+0x8a4>)
 8005cf0:	f001 fa46 	bl	8007180 <scaraInitLinear>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
 8005cfa:	e013      	b.n	8005d24 <scaraInitDuty+0x754>
			}else if(command.modeInit_type == DUTY_MODE_INIT_QV){
 8005cfc:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	d10f      	bne.n	8005d24 <scaraInitDuty+0x754>
				status1 = scaraInitLinear(&(myDUTY.task.trajectory_3d.linear), TRAJECTORY_3D, total_s, DUTY_MODE_INIT_QV, command.v_factor);
 8005d04:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005d08:	eeb0 1a47 	vmov.f32	s2, s14
 8005d0c:	eef0 1a67 	vmov.f32	s3, s15
 8005d10:	2202      	movs	r2, #2
 8005d12:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 8005d16:	2104      	movs	r1, #4
 8005d18:	4856      	ldr	r0, [pc, #344]	; (8005e74 <scaraInitDuty+0x8a4>)
 8005d1a:	f001 fa31 	bl	8007180 <scaraInitLinear>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
			}
			status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, command.time_total);
 8005d24:	f997 31a7 	ldrsb.w	r3, [r7, #423]	; 0x1a7
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f7fa fbfb 	bl	8000524 <__aeabi_i2d>
 8005d2e:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	; 0x1a8
 8005d32:	f7fa fc61 	bl	80005f8 <__aeabi_dmul>
 8005d36:	4603      	mov	r3, r0
 8005d38:	460c      	mov	r4, r1
 8005d3a:	ec44 3b16 	vmov	d6, r3, r4
 8005d3e:	ed97 7b7c 	vldr	d7, [r7, #496]	; 0x1f0
 8005d42:	eeb0 1a47 	vmov.f32	s2, s14
 8005d46:	eef0 1a67 	vmov.f32	s3, s15
 8005d4a:	2203      	movs	r2, #3
 8005d4c:	eeb0 0a46 	vmov.f32	s0, s12
 8005d50:	eef0 0a66 	vmov.f32	s1, s13
 8005d54:	2105      	movs	r1, #5
 8005d56:	4848      	ldr	r0, [pc, #288]	; (8005e78 <scaraInitDuty+0x8a8>)
 8005d58:	f001 fa12 	bl	8007180 <scaraInitLinear>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
 8005d62:	e002      	b.n	8005d6a <scaraInitDuty+0x79a>
		}else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8005d64:	2305      	movs	r3, #5
 8005d66:	f000 bfbc 	b.w	8006ce2 <scaraInitDuty+0x1712>
		}
		// Check Init Status
		if ( SCARA_STATUS_OK != status1) {
 8005d6a:	f897 31be 	ldrb.w	r3, [r7, #446]	; 0x1be
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d003      	beq.n	8005d7a <scaraInitDuty+0x7aa>
			return status1;
 8005d72:	f897 31be 	ldrb.w	r3, [r7, #446]	; 0x1be
 8005d76:	f000 bfb4 	b.w	8006ce2 <scaraInitDuty+0x1712>
		}
		if ( SCARA_STATUS_OK != status2) {
 8005d7a:	f897 31bd 	ldrb.w	r3, [r7, #445]	; 0x1bd
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	f000 8781 	beq.w	8006c86 <scaraInitDuty+0x16b6>
			return status2;
 8005d84:	f897 31bd 	ldrb.w	r3, [r7, #445]	; 0x1bd
 8005d88:	f000 bfab 	b.w	8006ce2 <scaraInitDuty+0x1712>
		}


	
	} else if (DUTY_SPACE_JOINT == command.space_type) {
 8005d8c:	f897 31dd 	ldrb.w	r3, [r7, #477]	; 0x1dd
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	f040 8776 	bne.w	8006c82 <scaraInitDuty+0x16b2>
		/*----------- Space Joint ------------*/
		myDUTY.space_type = DUTY_SPACE_JOINT;// Change type
 8005d96:	4b34      	ldr	r3, [pc, #208]	; (8005e68 <scaraInitDuty+0x898>)
 8005d98:	2201      	movs	r2, #1
 8005d9a:	701a      	strb	r2, [r3, #0]
		myDUTY.joint.theta1_start	 = positionCurrent.Theta1;
 8005d9c:	4b37      	ldr	r3, [pc, #220]	; (8005e7c <scaraInitDuty+0x8ac>)
 8005d9e:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 8005da2:	4a31      	ldr	r2, [pc, #196]	; (8005e68 <scaraInitDuty+0x898>)
 8005da4:	f602 2218 	addw	r2, r2, #2584	; 0xa18
 8005da8:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.theta2_start	 = positionCurrent.Theta2;
 8005dac:	4b33      	ldr	r3, [pc, #204]	; (8005e7c <scaraInitDuty+0x8ac>)
 8005dae:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8005db2:	4a2d      	ldr	r2, [pc, #180]	; (8005e68 <scaraInitDuty+0x898>)
 8005db4:	f502 6222 	add.w	r2, r2, #2592	; 0xa20
 8005db8:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.d3_start		 = positionCurrent.D3;
 8005dbc:	4b2f      	ldr	r3, [pc, #188]	; (8005e7c <scaraInitDuty+0x8ac>)
 8005dbe:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 8005dc2:	4a29      	ldr	r2, [pc, #164]	; (8005e68 <scaraInitDuty+0x898>)
 8005dc4:	f602 2228 	addw	r2, r2, #2600	; 0xa28
 8005dc8:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.theta4_start 	 = positionCurrent.Theta4;
 8005dcc:	4b2b      	ldr	r3, [pc, #172]	; (8005e7c <scaraInitDuty+0x8ac>)
 8005dce:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 8005dd2:	4a25      	ldr	r2, [pc, #148]	; (8005e68 <scaraInitDuty+0x898>)
 8005dd4:	f502 6223 	add.w	r2, r2, #2608	; 0xa30
 8005dd8:	e9c2 3400 	strd	r3, r4, [r2]

		//-----Joint Single
		if ( DUTY_JOINT_SINGLE == command.joint_type) {
 8005ddc:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	f040 83e0 	bne.w	80065a6 <scaraInitDuty+0xfd6>
			// Trajectory 1 profile
			double s, abs_position;
			switch(command.sub_para_int) {
 8005de6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8005dea:	2b03      	cmp	r3, #3
 8005dec:	f200 8154 	bhi.w	8006098 <scaraInitDuty+0xac8>
 8005df0:	a201      	add	r2, pc, #4	; (adr r2, 8005df8 <scaraInitDuty+0x828>)
 8005df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005df6:	bf00      	nop
 8005df8:	08005e09 	.word	0x08005e09
 8005dfc:	08005ed3 	.word	0x08005ed3
 8005e00:	08005f79 	.word	0x08005f79
 8005e04:	08005ff5 	.word	0x08005ff5
			case 0:
				// Change Degree --> Radian
				command.sub_para_double = command.sub_para_double*PI/180.0;
 8005e08:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8005e0c:	a314      	add	r3, pc, #80	; (adr r3, 8005e60 <scaraInitDuty+0x890>)
 8005e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e12:	f7fa fbf1 	bl	80005f8 <__aeabi_dmul>
 8005e16:	4603      	mov	r3, r0
 8005e18:	460c      	mov	r4, r1
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	4621      	mov	r1, r4
 8005e1e:	f04f 0200 	mov.w	r2, #0
 8005e22:	4b17      	ldr	r3, [pc, #92]	; (8005e80 <scaraInitDuty+0x8b0>)
 8005e24:	f7fa fd12 	bl	800084c <__aeabi_ddiv>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	460c      	mov	r4, r1
 8005e2c:	e9c7 347a 	strd	r3, r4, [r7, #488]	; 0x1e8
				// Coordinate
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8005e30:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d125      	bne.n	8005e84 <scaraInitDuty+0x8b4>
					abs_position = myDUTY.joint.theta1_start + command.sub_para_double;
 8005e38:	4b0b      	ldr	r3, [pc, #44]	; (8005e68 <scaraInitDuty+0x898>)
 8005e3a:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 8005e3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005e42:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8005e46:	461a      	mov	r2, r3
 8005e48:	4623      	mov	r3, r4
 8005e4a:	f7fa fa1f 	bl	800028c <__adddf3>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	460c      	mov	r4, r1
 8005e52:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
					s			 = command.sub_para_double;
 8005e56:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8005e5a:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
 8005e5e:	e02c      	b.n	8005eba <scaraInitDuty+0x8ea>
 8005e60:	60000000 	.word	0x60000000
 8005e64:	400921fb 	.word	0x400921fb
 8005e68:	20005af8 	.word	0x20005af8
 8005e6c:	20005c90 	.word	0x20005c90
 8005e70:	20005e10 	.word	0x20005e10
 8005e74:	20005d60 	.word	0x20005d60
 8005e78:	20005ee0 	.word	0x20005ee0
 8005e7c:	200066b8 	.word	0x200066b8
 8005e80:	40668000 	.word	0x40668000
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8005e84:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d113      	bne.n	8005eb4 <scaraInitDuty+0x8e4>
					abs_position = command.sub_para_double;
 8005e8c:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8005e90:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
					s			 = command.sub_para_double - myDUTY.joint.theta1_start;
 8005e94:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8005e98:	4baf      	ldr	r3, [pc, #700]	; (8006158 <scaraInitDuty+0xb88>)
 8005e9a:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 8005e9e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	4623      	mov	r3, r4
 8005ea6:	f7fa f9ef 	bl	8000288 <__aeabi_dsub>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	460c      	mov	r4, r1
 8005eae:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
 8005eb2:	e002      	b.n	8005eba <scaraInitDuty+0x8ea>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8005eb4:	230c      	movs	r3, #12
 8005eb6:	f000 bf14 	b.w	8006ce2 <scaraInitDuty+0x1712>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J0, abs_position)) {
 8005eba:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 8005ebe:	2000      	movs	r0, #0
 8005ec0:	f004 fade 	bl	800a480 <scaraCheckWorkSpace1>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	f000 80e9 	beq.w	800609e <scaraInitDuty+0xace>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005ecc:	2307      	movs	r3, #7
 8005ece:	f000 bf08 	b.w	8006ce2 <scaraInitDuty+0x1712>
				}
				break;
			case 1:
				// Change Degree --> Radian
				command.sub_para_double = command.sub_para_double*PI/180.0;
 8005ed2:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8005ed6:	a39e      	add	r3, pc, #632	; (adr r3, 8006150 <scaraInitDuty+0xb80>)
 8005ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005edc:	f7fa fb8c 	bl	80005f8 <__aeabi_dmul>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	460c      	mov	r4, r1
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	4621      	mov	r1, r4
 8005ee8:	f04f 0200 	mov.w	r2, #0
 8005eec:	4b9b      	ldr	r3, [pc, #620]	; (800615c <scaraInitDuty+0xb8c>)
 8005eee:	f7fa fcad 	bl	800084c <__aeabi_ddiv>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	460c      	mov	r4, r1
 8005ef6:	e9c7 347a 	strd	r3, r4, [r7, #488]	; 0x1e8
				// Coordinate
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8005efa:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d113      	bne.n	8005f2a <scaraInitDuty+0x95a>
					abs_position = myDUTY.joint.theta2_start + command.sub_para_double;
 8005f02:	4b95      	ldr	r3, [pc, #596]	; (8006158 <scaraInitDuty+0xb88>)
 8005f04:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8005f08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005f0c:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8005f10:	461a      	mov	r2, r3
 8005f12:	4623      	mov	r3, r4
 8005f14:	f7fa f9ba 	bl	800028c <__adddf3>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	460c      	mov	r4, r1
 8005f1c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
					s			 = command.sub_para_double;
 8005f20:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8005f24:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
 8005f28:	e01a      	b.n	8005f60 <scaraInitDuty+0x990>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8005f2a:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d113      	bne.n	8005f5a <scaraInitDuty+0x98a>
					abs_position = command.sub_para_double;
 8005f32:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8005f36:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
					s			 = command.sub_para_double - myDUTY.joint.theta2_start;
 8005f3a:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8005f3e:	4b86      	ldr	r3, [pc, #536]	; (8006158 <scaraInitDuty+0xb88>)
 8005f40:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8005f44:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005f48:	461a      	mov	r2, r3
 8005f4a:	4623      	mov	r3, r4
 8005f4c:	f7fa f99c 	bl	8000288 <__aeabi_dsub>
 8005f50:	4603      	mov	r3, r0
 8005f52:	460c      	mov	r4, r1
 8005f54:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
 8005f58:	e002      	b.n	8005f60 <scaraInitDuty+0x990>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8005f5a:	230c      	movs	r3, #12
 8005f5c:	f000 bec1 	b.w	8006ce2 <scaraInitDuty+0x1712>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J1, abs_position)) {
 8005f60:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 8005f64:	2001      	movs	r0, #1
 8005f66:	f004 fa8b 	bl	800a480 <scaraCheckWorkSpace1>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f000 8098 	beq.w	80060a2 <scaraInitDuty+0xad2>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005f72:	2307      	movs	r3, #7
 8005f74:	f000 beb5 	b.w	8006ce2 <scaraInitDuty+0x1712>
				}
				break;
			case 2:
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8005f78:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d113      	bne.n	8005fa8 <scaraInitDuty+0x9d8>
					abs_position = myDUTY.joint.d3_start + command.sub_para_double;
 8005f80:	4b75      	ldr	r3, [pc, #468]	; (8006158 <scaraInitDuty+0xb88>)
 8005f82:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 8005f86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005f8a:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8005f8e:	461a      	mov	r2, r3
 8005f90:	4623      	mov	r3, r4
 8005f92:	f7fa f97b 	bl	800028c <__adddf3>
 8005f96:	4603      	mov	r3, r0
 8005f98:	460c      	mov	r4, r1
 8005f9a:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
					s			 = command.sub_para_double;
 8005f9e:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8005fa2:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
 8005fa6:	e01a      	b.n	8005fde <scaraInitDuty+0xa0e>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8005fa8:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d113      	bne.n	8005fd8 <scaraInitDuty+0xa08>
					abs_position = command.sub_para_double;
 8005fb0:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8005fb4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
					s			 = command.sub_para_double - myDUTY.joint.d3_start;
 8005fb8:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8005fbc:	4b66      	ldr	r3, [pc, #408]	; (8006158 <scaraInitDuty+0xb88>)
 8005fbe:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 8005fc2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	4623      	mov	r3, r4
 8005fca:	f7fa f95d 	bl	8000288 <__aeabi_dsub>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	460c      	mov	r4, r1
 8005fd2:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
 8005fd6:	e002      	b.n	8005fde <scaraInitDuty+0xa0e>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8005fd8:	230c      	movs	r3, #12
 8005fda:	f000 be82 	b.w	8006ce2 <scaraInitDuty+0x1712>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J2, abs_position)) {
 8005fde:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 8005fe2:	2002      	movs	r0, #2
 8005fe4:	f004 fa4c 	bl	800a480 <scaraCheckWorkSpace1>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d05b      	beq.n	80060a6 <scaraInitDuty+0xad6>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005fee:	2307      	movs	r3, #7
 8005ff0:	f000 be77 	b.w	8006ce2 <scaraInitDuty+0x1712>
				}
				break;
			case 3:
				// Change Degree --> Radian
				command.sub_para_double = command.sub_para_double*PI/180.0;
 8005ff4:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8005ff8:	a355      	add	r3, pc, #340	; (adr r3, 8006150 <scaraInitDuty+0xb80>)
 8005ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ffe:	f7fa fafb 	bl	80005f8 <__aeabi_dmul>
 8006002:	4603      	mov	r3, r0
 8006004:	460c      	mov	r4, r1
 8006006:	4618      	mov	r0, r3
 8006008:	4621      	mov	r1, r4
 800600a:	f04f 0200 	mov.w	r2, #0
 800600e:	4b53      	ldr	r3, [pc, #332]	; (800615c <scaraInitDuty+0xb8c>)
 8006010:	f7fa fc1c 	bl	800084c <__aeabi_ddiv>
 8006014:	4603      	mov	r3, r0
 8006016:	460c      	mov	r4, r1
 8006018:	e9c7 347a 	strd	r3, r4, [r7, #488]	; 0x1e8
				// Coordinate
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 800601c:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8006020:	2b01      	cmp	r3, #1
 8006022:	d113      	bne.n	800604c <scaraInitDuty+0xa7c>
					abs_position = myDUTY.joint.theta4_start + command.sub_para_double;
 8006024:	4b4c      	ldr	r3, [pc, #304]	; (8006158 <scaraInitDuty+0xb88>)
 8006026:	f503 6323 	add.w	r3, r3, #2608	; 0xa30
 800602a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800602e:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8006032:	461a      	mov	r2, r3
 8006034:	4623      	mov	r3, r4
 8006036:	f7fa f929 	bl	800028c <__adddf3>
 800603a:	4603      	mov	r3, r0
 800603c:	460c      	mov	r4, r1
 800603e:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
					s			 = command.sub_para_double;
 8006042:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8006046:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
 800604a:	e01a      	b.n	8006082 <scaraInitDuty+0xab2>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 800604c:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8006050:	2b00      	cmp	r3, #0
 8006052:	d113      	bne.n	800607c <scaraInitDuty+0xaac>
					abs_position = command.sub_para_double;
 8006054:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8006058:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
					s			 = command.sub_para_double - myDUTY.joint.theta4_start;
 800605c:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8006060:	4b3d      	ldr	r3, [pc, #244]	; (8006158 <scaraInitDuty+0xb88>)
 8006062:	f503 6323 	add.w	r3, r3, #2608	; 0xa30
 8006066:	e9d3 3400 	ldrd	r3, r4, [r3]
 800606a:	461a      	mov	r2, r3
 800606c:	4623      	mov	r3, r4
 800606e:	f7fa f90b 	bl	8000288 <__aeabi_dsub>
 8006072:	4603      	mov	r3, r0
 8006074:	460c      	mov	r4, r1
 8006076:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
 800607a:	e002      	b.n	8006082 <scaraInitDuty+0xab2>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 800607c:	230c      	movs	r3, #12
 800607e:	f000 be30 	b.w	8006ce2 <scaraInitDuty+0x1712>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J3, abs_position)) {
 8006082:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 8006086:	2003      	movs	r0, #3
 8006088:	f004 f9fa 	bl	800a480 <scaraCheckWorkSpace1>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00b      	beq.n	80060aa <scaraInitDuty+0xada>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8006092:	2307      	movs	r3, #7
 8006094:	f000 be25 	b.w	8006ce2 <scaraInitDuty+0x1712>
				}
				break;
			default:
				return SCARA_STATUS_ERROR_JOINT_NUM;
 8006098:	230b      	movs	r3, #11
 800609a:	f000 be22 	b.w	8006ce2 <scaraInitDuty+0x1712>
				break;
 800609e:	bf00      	nop
 80060a0:	e004      	b.n	80060ac <scaraInitDuty+0xadc>
				break;
 80060a2:	bf00      	nop
 80060a4:	e002      	b.n	80060ac <scaraInitDuty+0xadc>
				break;
 80060a6:	bf00      	nop
 80060a8:	e000      	b.n	80060ac <scaraInitDuty+0xadc>
				break;
 80060aa:	bf00      	nop
			}

			// LSPB
			if ( DUTY_TRAJECTORY_LSPB == command.trajec_type) {
 80060ac:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	f040 8132 	bne.w	800631a <scaraInitDuty+0xd4a>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 80060b6:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	f040 80a1 	bne.w	8006202 <scaraInitDuty+0xc32>
					for ( uint8_t i = 0; i < 4; i++) {
 80060c0:	2300      	movs	r3, #0
 80060c2:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
 80060c6:	e096      	b.n	80061f6 <scaraInitDuty+0xc26>
						if ( i == command.sub_para_int) {
 80060c8:	f897 218f 	ldrb.w	r2, [r7, #399]	; 0x18f
 80060cc:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d147      	bne.n	8006164 <scaraInitDuty+0xb94>
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 80060d4:	f897 218f 	ldrb.w	r2, [r7, #399]	; 0x18f
 80060d8:	491f      	ldr	r1, [pc, #124]	; (8006158 <scaraInitDuty+0xb88>)
 80060da:	4613      	mov	r3, r2
 80060dc:	005b      	lsls	r3, r3, #1
 80060de:	4413      	add	r3, r2
 80060e0:	01db      	lsls	r3, r3, #7
 80060e2:	440b      	add	r3, r1
 80060e4:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80060e8:	2200      	movs	r2, #0
 80060ea:	701a      	strb	r2, [r3, #0]
							myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 80060ec:	f897 018f 	ldrb.w	r0, [r7, #399]	; 0x18f
 80060f0:	e9d7 127c 	ldrd	r1, r2, [r7, #496]	; 0x1f0
 80060f4:	4c18      	ldr	r4, [pc, #96]	; (8006158 <scaraInitDuty+0xb88>)
 80060f6:	4603      	mov	r3, r0
 80060f8:	005b      	lsls	r3, r3, #1
 80060fa:	4403      	add	r3, r0
 80060fc:	01db      	lsls	r3, r3, #7
 80060fe:	4423      	add	r3, r4
 8006100:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8006104:	e9c3 1200 	strd	r1, r2, [r3]
							status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8006108:	f897 218f 	ldrb.w	r2, [r7, #399]	; 0x18f
 800610c:	4613      	mov	r3, r2
 800610e:	005b      	lsls	r3, r3, #1
 8006110:	4413      	add	r3, r2
 8006112:	01db      	lsls	r3, r3, #7
 8006114:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8006118:	4a0f      	ldr	r2, [pc, #60]	; (8006158 <scaraInitDuty+0xb88>)
 800611a:	1898      	adds	r0, r3, r2
 800611c:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8006120:	4a0f      	ldr	r2, [pc, #60]	; (8006160 <scaraInitDuty+0xb90>)
 8006122:	5cd3      	ldrb	r3, [r2, r3]
 8006124:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006128:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 800612c:	eeb0 2a46 	vmov.f32	s4, s12
 8006130:	eef0 2a66 	vmov.f32	s5, s13
 8006134:	eeb0 1a47 	vmov.f32	s2, s14
 8006138:	eef0 1a67 	vmov.f32	s3, s15
 800613c:	2201      	movs	r2, #1
 800613e:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8006142:	4619      	mov	r1, r3
 8006144:	f001 fae4 	bl	8007710 <scaraInitLSPB>
 8006148:	4603      	mov	r3, r0
 800614a:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
 800614e:	e046      	b.n	80061de <scaraInitDuty+0xc0e>
 8006150:	60000000 	.word	0x60000000
 8006154:	400921fb 	.word	0x400921fb
 8006158:	20005af8 	.word	0x20005af8
 800615c:	40668000 	.word	0x40668000
 8006160:	20000824 	.word	0x20000824
											s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
						} else {
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8006164:	f897 218f 	ldrb.w	r2, [r7, #399]	; 0x18f
 8006168:	49c3      	ldr	r1, [pc, #780]	; (8006478 <scaraInitDuty+0xea8>)
 800616a:	4613      	mov	r3, r2
 800616c:	005b      	lsls	r3, r3, #1
 800616e:	4413      	add	r3, r2
 8006170:	01db      	lsls	r3, r3, #7
 8006172:	440b      	add	r3, r1
 8006174:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006178:	2200      	movs	r2, #0
 800617a:	701a      	strb	r2, [r3, #0]
							myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 800617c:	f897 018f 	ldrb.w	r0, [r7, #399]	; 0x18f
 8006180:	e9d7 127c 	ldrd	r1, r2, [r7, #496]	; 0x1f0
 8006184:	4cbc      	ldr	r4, [pc, #752]	; (8006478 <scaraInitDuty+0xea8>)
 8006186:	4603      	mov	r3, r0
 8006188:	005b      	lsls	r3, r3, #1
 800618a:	4403      	add	r3, r0
 800618c:	01db      	lsls	r3, r3, #7
 800618e:	4423      	add	r3, r4
 8006190:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8006194:	e9c3 1200 	strd	r1, r2, [r3]
							status2 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8006198:	f897 218f 	ldrb.w	r2, [r7, #399]	; 0x18f
 800619c:	4613      	mov	r3, r2
 800619e:	005b      	lsls	r3, r3, #1
 80061a0:	4413      	add	r3, r2
 80061a2:	01db      	lsls	r3, r3, #7
 80061a4:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80061a8:	4ab3      	ldr	r2, [pc, #716]	; (8006478 <scaraInitDuty+0xea8>)
 80061aa:	1898      	adds	r0, r3, r2
 80061ac:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 80061b0:	4ab2      	ldr	r2, [pc, #712]	; (800647c <scaraInitDuty+0xeac>)
 80061b2:	5cd3      	ldrb	r3, [r2, r3]
 80061b4:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 80061b8:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 80061bc:	eeb0 2a46 	vmov.f32	s4, s12
 80061c0:	eef0 2a66 	vmov.f32	s5, s13
 80061c4:	eeb0 1a47 	vmov.f32	s2, s14
 80061c8:	eef0 1a67 	vmov.f32	s3, s15
 80061cc:	2201      	movs	r2, #1
 80061ce:	ed9f 0ba8 	vldr	d0, [pc, #672]	; 8006470 <scaraInitDuty+0xea0>
 80061d2:	4619      	mov	r1, r3
 80061d4:	f001 fa9c 	bl	8007710 <scaraInitLSPB>
 80061d8:	4603      	mov	r3, r0
 80061da:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
											0, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
						}
						myDUTY.time_total = command.time_total;
 80061de:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 80061e2:	4aa5      	ldr	r2, [pc, #660]	; (8006478 <scaraInitDuty+0xea8>)
 80061e4:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 80061e8:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 80061ec:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 80061f0:	3301      	adds	r3, #1
 80061f2:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
 80061f6:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 80061fa:	2b03      	cmp	r3, #3
 80061fc:	f67f af64 	bls.w	80060c8 <scaraInitDuty+0xaf8>
 8006200:	e1c2      	b.n	8006588 <scaraInitDuty+0xfb8>
					}
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8006202:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006206:	2b00      	cmp	r3, #0
 8006208:	f040 8084 	bne.w	8006314 <scaraInitDuty+0xd44>
					for ( uint8_t i = 0; i < 4; i++) {
 800620c:	2300      	movs	r3, #0
 800620e:	f887 318e 	strb.w	r3, [r7, #398]	; 0x18e
 8006212:	e07a      	b.n	800630a <scaraInitDuty+0xd3a>
						if ( i == command.sub_para_int) {
 8006214:	f897 218e 	ldrb.w	r2, [r7, #398]	; 0x18e
 8006218:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800621c:	429a      	cmp	r2, r3
 800621e:	d140      	bne.n	80062a2 <scaraInitDuty+0xcd2>
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8006220:	f897 218e 	ldrb.w	r2, [r7, #398]	; 0x18e
 8006224:	4994      	ldr	r1, [pc, #592]	; (8006478 <scaraInitDuty+0xea8>)
 8006226:	4613      	mov	r3, r2
 8006228:	005b      	lsls	r3, r3, #1
 800622a:	4413      	add	r3, r2
 800622c:	01db      	lsls	r3, r3, #7
 800622e:	440b      	add	r3, r1
 8006230:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006234:	2200      	movs	r2, #0
 8006236:	701a      	strb	r2, [r3, #0]
							status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8006238:	f897 218e 	ldrb.w	r2, [r7, #398]	; 0x18e
 800623c:	4613      	mov	r3, r2
 800623e:	005b      	lsls	r3, r3, #1
 8006240:	4413      	add	r3, r2
 8006242:	01db      	lsls	r3, r3, #7
 8006244:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8006248:	4a8b      	ldr	r2, [pc, #556]	; (8006478 <scaraInitDuty+0xea8>)
 800624a:	1898      	adds	r0, r3, r2
 800624c:	f897 318e 	ldrb.w	r3, [r7, #398]	; 0x18e
 8006250:	4a8a      	ldr	r2, [pc, #552]	; (800647c <scaraInitDuty+0xeac>)
 8006252:	5cd3      	ldrb	r3, [r2, r3]
 8006254:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006258:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 800625c:	eeb0 2a46 	vmov.f32	s4, s12
 8006260:	eef0 2a66 	vmov.f32	s5, s13
 8006264:	eeb0 1a47 	vmov.f32	s2, s14
 8006268:	eef0 1a67 	vmov.f32	s3, s15
 800626c:	2200      	movs	r2, #0
 800626e:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8006272:	4619      	mov	r1, r3
 8006274:	f001 fa4c 	bl	8007710 <scaraInitLSPB>
 8006278:	4603      	mov	r3, r0
 800627a:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
											s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
							myDUTY.time_total = myDUTY.joint.trajectory[i].lspb.Tf;
 800627e:	f897 218e 	ldrb.w	r2, [r7, #398]	; 0x18e
 8006282:	497d      	ldr	r1, [pc, #500]	; (8006478 <scaraInitDuty+0xea8>)
 8006284:	4613      	mov	r3, r2
 8006286:	005b      	lsls	r3, r3, #1
 8006288:	4413      	add	r3, r2
 800628a:	01db      	lsls	r3, r3, #7
 800628c:	440b      	add	r3, r1
 800628e:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8006292:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006296:	4a78      	ldr	r2, [pc, #480]	; (8006478 <scaraInitDuty+0xea8>)
 8006298:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 800629c:	e9c2 3400 	strd	r3, r4, [r2]
 80062a0:	e02e      	b.n	8006300 <scaraInitDuty+0xd30>
						} else {
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 80062a2:	f897 218e 	ldrb.w	r2, [r7, #398]	; 0x18e
 80062a6:	4974      	ldr	r1, [pc, #464]	; (8006478 <scaraInitDuty+0xea8>)
 80062a8:	4613      	mov	r3, r2
 80062aa:	005b      	lsls	r3, r3, #1
 80062ac:	4413      	add	r3, r2
 80062ae:	01db      	lsls	r3, r3, #7
 80062b0:	440b      	add	r3, r1
 80062b2:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80062b6:	2200      	movs	r2, #0
 80062b8:	701a      	strb	r2, [r3, #0]
							status2 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 80062ba:	f897 218e 	ldrb.w	r2, [r7, #398]	; 0x18e
 80062be:	4613      	mov	r3, r2
 80062c0:	005b      	lsls	r3, r3, #1
 80062c2:	4413      	add	r3, r2
 80062c4:	01db      	lsls	r3, r3, #7
 80062c6:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80062ca:	4a6b      	ldr	r2, [pc, #428]	; (8006478 <scaraInitDuty+0xea8>)
 80062cc:	1898      	adds	r0, r3, r2
 80062ce:	f897 318e 	ldrb.w	r3, [r7, #398]	; 0x18e
 80062d2:	4a6a      	ldr	r2, [pc, #424]	; (800647c <scaraInitDuty+0xeac>)
 80062d4:	5cd3      	ldrb	r3, [r2, r3]
 80062d6:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 80062da:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 80062de:	eeb0 2a46 	vmov.f32	s4, s12
 80062e2:	eef0 2a66 	vmov.f32	s5, s13
 80062e6:	eeb0 1a47 	vmov.f32	s2, s14
 80062ea:	eef0 1a67 	vmov.f32	s3, s15
 80062ee:	2200      	movs	r2, #0
 80062f0:	ed9f 0b5f 	vldr	d0, [pc, #380]	; 8006470 <scaraInitDuty+0xea0>
 80062f4:	4619      	mov	r1, r3
 80062f6:	f001 fa0b 	bl	8007710 <scaraInitLSPB>
 80062fa:	4603      	mov	r3, r0
 80062fc:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
					for ( uint8_t i = 0; i < 4; i++) {
 8006300:	f897 318e 	ldrb.w	r3, [r7, #398]	; 0x18e
 8006304:	3301      	adds	r3, #1
 8006306:	f887 318e 	strb.w	r3, [r7, #398]	; 0x18e
 800630a:	f897 318e 	ldrb.w	r3, [r7, #398]	; 0x18e
 800630e:	2b03      	cmp	r3, #3
 8006310:	d980      	bls.n	8006214 <scaraInitDuty+0xc44>
 8006312:	e139      	b.n	8006588 <scaraInitDuty+0xfb8>
											0, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
						}
					}
				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 8006314:	2308      	movs	r3, #8
 8006316:	f000 bce4 	b.w	8006ce2 <scaraInitDuty+0x1712>
				}
			// SCURVE
			} else if ( DUTY_TRAJECTORY_SCURVE == command.trajec_type) {
 800631a:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 800631e:	2b01      	cmp	r3, #1
 8006320:	f040 8130 	bne.w	8006584 <scaraInitDuty+0xfb4>
					// Mode Init Time
					if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8006324:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006328:	2b01      	cmp	r3, #1
 800632a:	f040 8097 	bne.w	800645c <scaraInitDuty+0xe8c>
						for ( uint8_t i = 0; i < 4; i++) {
 800632e:	2300      	movs	r3, #0
 8006330:	f887 318d 	strb.w	r3, [r7, #397]	; 0x18d
 8006334:	e08c      	b.n	8006450 <scaraInitDuty+0xe80>
							if ( i == command.sub_para_int) {
 8006336:	f897 218d 	ldrb.w	r2, [r7, #397]	; 0x18d
 800633a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800633e:	429a      	cmp	r2, r3
 8006340:	d13d      	bne.n	80063be <scaraInitDuty+0xdee>
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8006342:	f897 218d 	ldrb.w	r2, [r7, #397]	; 0x18d
 8006346:	494c      	ldr	r1, [pc, #304]	; (8006478 <scaraInitDuty+0xea8>)
 8006348:	4613      	mov	r3, r2
 800634a:	005b      	lsls	r3, r3, #1
 800634c:	4413      	add	r3, r2
 800634e:	01db      	lsls	r3, r3, #7
 8006350:	440b      	add	r3, r1
 8006352:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006356:	2201      	movs	r2, #1
 8006358:	701a      	strb	r2, [r3, #0]
								myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 800635a:	f897 018d 	ldrb.w	r0, [r7, #397]	; 0x18d
 800635e:	e9d7 127c 	ldrd	r1, r2, [r7, #496]	; 0x1f0
 8006362:	4c45      	ldr	r4, [pc, #276]	; (8006478 <scaraInitDuty+0xea8>)
 8006364:	4603      	mov	r3, r0
 8006366:	005b      	lsls	r3, r3, #1
 8006368:	4403      	add	r3, r0
 800636a:	01db      	lsls	r3, r3, #7
 800636c:	4423      	add	r3, r4
 800636e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006372:	e9c3 1200 	strd	r1, r2, [r3]
								status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 8006376:	f897 218d 	ldrb.w	r2, [r7, #397]	; 0x18d
 800637a:	4613      	mov	r3, r2
 800637c:	005b      	lsls	r3, r3, #1
 800637e:	4413      	add	r3, r2
 8006380:	01db      	lsls	r3, r3, #7
 8006382:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8006386:	4a3c      	ldr	r2, [pc, #240]	; (8006478 <scaraInitDuty+0xea8>)
 8006388:	1898      	adds	r0, r3, r2
 800638a:	f897 318d 	ldrb.w	r3, [r7, #397]	; 0x18d
 800638e:	4a3b      	ldr	r2, [pc, #236]	; (800647c <scaraInitDuty+0xeac>)
 8006390:	5cd3      	ldrb	r3, [r2, r3]
 8006392:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006396:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 800639a:	eeb0 2a46 	vmov.f32	s4, s12
 800639e:	eef0 2a66 	vmov.f32	s5, s13
 80063a2:	eeb0 1a47 	vmov.f32	s2, s14
 80063a6:	eef0 1a67 	vmov.f32	s3, s15
 80063aa:	2201      	movs	r2, #1
 80063ac:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 80063b0:	4619      	mov	r1, r3
 80063b2:	f001 fd8d 	bl	8007ed0 <scaraInitScurve>
 80063b6:	4603      	mov	r3, r0
 80063b8:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
 80063bc:	e03c      	b.n	8006438 <scaraInitDuty+0xe68>
											joint_taget[i],
											s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
							} else {
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80063be:	f897 218d 	ldrb.w	r2, [r7, #397]	; 0x18d
 80063c2:	492d      	ldr	r1, [pc, #180]	; (8006478 <scaraInitDuty+0xea8>)
 80063c4:	4613      	mov	r3, r2
 80063c6:	005b      	lsls	r3, r3, #1
 80063c8:	4413      	add	r3, r2
 80063ca:	01db      	lsls	r3, r3, #7
 80063cc:	440b      	add	r3, r1
 80063ce:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80063d2:	2201      	movs	r2, #1
 80063d4:	701a      	strb	r2, [r3, #0]
								myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 80063d6:	f897 018d 	ldrb.w	r0, [r7, #397]	; 0x18d
 80063da:	e9d7 127c 	ldrd	r1, r2, [r7, #496]	; 0x1f0
 80063de:	4c26      	ldr	r4, [pc, #152]	; (8006478 <scaraInitDuty+0xea8>)
 80063e0:	4603      	mov	r3, r0
 80063e2:	005b      	lsls	r3, r3, #1
 80063e4:	4403      	add	r3, r0
 80063e6:	01db      	lsls	r3, r3, #7
 80063e8:	4423      	add	r3, r4
 80063ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063ee:	e9c3 1200 	strd	r1, r2, [r3]
								status2 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 80063f2:	f897 218d 	ldrb.w	r2, [r7, #397]	; 0x18d
 80063f6:	4613      	mov	r3, r2
 80063f8:	005b      	lsls	r3, r3, #1
 80063fa:	4413      	add	r3, r2
 80063fc:	01db      	lsls	r3, r3, #7
 80063fe:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8006402:	4a1d      	ldr	r2, [pc, #116]	; (8006478 <scaraInitDuty+0xea8>)
 8006404:	1898      	adds	r0, r3, r2
 8006406:	f897 318d 	ldrb.w	r3, [r7, #397]	; 0x18d
 800640a:	4a1c      	ldr	r2, [pc, #112]	; (800647c <scaraInitDuty+0xeac>)
 800640c:	5cd3      	ldrb	r3, [r2, r3]
 800640e:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006412:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8006416:	eeb0 2a46 	vmov.f32	s4, s12
 800641a:	eef0 2a66 	vmov.f32	s5, s13
 800641e:	eeb0 1a47 	vmov.f32	s2, s14
 8006422:	eef0 1a67 	vmov.f32	s3, s15
 8006426:	2201      	movs	r2, #1
 8006428:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8006470 <scaraInitDuty+0xea0>
 800642c:	4619      	mov	r1, r3
 800642e:	f001 fd4f 	bl	8007ed0 <scaraInitScurve>
 8006432:	4603      	mov	r3, r0
 8006434:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
											joint_taget[i],
											0, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
							}
							myDUTY.time_total = command.time_total;
 8006438:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 800643c:	4a0e      	ldr	r2, [pc, #56]	; (8006478 <scaraInitDuty+0xea8>)
 800643e:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8006442:	e9c2 3400 	strd	r3, r4, [r2]
						for ( uint8_t i = 0; i < 4; i++) {
 8006446:	f897 318d 	ldrb.w	r3, [r7, #397]	; 0x18d
 800644a:	3301      	adds	r3, #1
 800644c:	f887 318d 	strb.w	r3, [r7, #397]	; 0x18d
 8006450:	f897 318d 	ldrb.w	r3, [r7, #397]	; 0x18d
 8006454:	2b03      	cmp	r3, #3
 8006456:	f67f af6e 	bls.w	8006336 <scaraInitDuty+0xd66>
 800645a:	e095      	b.n	8006588 <scaraInitDuty+0xfb8>
						}
					// Mode Init Acc
					} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 800645c:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006460:	2b00      	cmp	r3, #0
 8006462:	f040 808d 	bne.w	8006580 <scaraInitDuty+0xfb0>
						for ( uint8_t i = 0; i < 4; i++) {
 8006466:	2300      	movs	r3, #0
 8006468:	f887 318c 	strb.w	r3, [r7, #396]	; 0x18c
 800646c:	e083      	b.n	8006576 <scaraInitDuty+0xfa6>
 800646e:	bf00      	nop
	...
 8006478:	20005af8 	.word	0x20005af8
 800647c:	20000824 	.word	0x20000824
							if ( i == command.sub_para_int) {
 8006480:	f897 218c 	ldrb.w	r2, [r7, #396]	; 0x18c
 8006484:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8006488:	429a      	cmp	r2, r3
 800648a:	d140      	bne.n	800650e <scaraInitDuty+0xf3e>
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 800648c:	f897 218c 	ldrb.w	r2, [r7, #396]	; 0x18c
 8006490:	49b7      	ldr	r1, [pc, #732]	; (8006770 <scaraInitDuty+0x11a0>)
 8006492:	4613      	mov	r3, r2
 8006494:	005b      	lsls	r3, r3, #1
 8006496:	4413      	add	r3, r2
 8006498:	01db      	lsls	r3, r3, #7
 800649a:	440b      	add	r3, r1
 800649c:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80064a0:	2201      	movs	r2, #1
 80064a2:	701a      	strb	r2, [r3, #0]
								status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 80064a4:	f897 218c 	ldrb.w	r2, [r7, #396]	; 0x18c
 80064a8:	4613      	mov	r3, r2
 80064aa:	005b      	lsls	r3, r3, #1
 80064ac:	4413      	add	r3, r2
 80064ae:	01db      	lsls	r3, r3, #7
 80064b0:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 80064b4:	4aae      	ldr	r2, [pc, #696]	; (8006770 <scaraInitDuty+0x11a0>)
 80064b6:	1898      	adds	r0, r3, r2
 80064b8:	f897 318c 	ldrb.w	r3, [r7, #396]	; 0x18c
 80064bc:	4aad      	ldr	r2, [pc, #692]	; (8006774 <scaraInitDuty+0x11a4>)
 80064be:	5cd3      	ldrb	r3, [r2, r3]
 80064c0:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 80064c4:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 80064c8:	eeb0 2a46 	vmov.f32	s4, s12
 80064cc:	eef0 2a66 	vmov.f32	s5, s13
 80064d0:	eeb0 1a47 	vmov.f32	s2, s14
 80064d4:	eef0 1a67 	vmov.f32	s3, s15
 80064d8:	2200      	movs	r2, #0
 80064da:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 80064de:	4619      	mov	r1, r3
 80064e0:	f001 fcf6 	bl	8007ed0 <scaraInitScurve>
 80064e4:	4603      	mov	r3, r0
 80064e6:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
											joint_taget[i],
											s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
								myDUTY.time_total = myDUTY.joint.trajectory[i].scurve.Tf;
 80064ea:	f897 218c 	ldrb.w	r2, [r7, #396]	; 0x18c
 80064ee:	49a0      	ldr	r1, [pc, #640]	; (8006770 <scaraInitDuty+0x11a0>)
 80064f0:	4613      	mov	r3, r2
 80064f2:	005b      	lsls	r3, r3, #1
 80064f4:	4413      	add	r3, r2
 80064f6:	01db      	lsls	r3, r3, #7
 80064f8:	440b      	add	r3, r1
 80064fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006502:	4a9b      	ldr	r2, [pc, #620]	; (8006770 <scaraInitDuty+0x11a0>)
 8006504:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8006508:	e9c2 3400 	strd	r3, r4, [r2]
 800650c:	e02e      	b.n	800656c <scaraInitDuty+0xf9c>
							} else {
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 800650e:	f897 218c 	ldrb.w	r2, [r7, #396]	; 0x18c
 8006512:	4997      	ldr	r1, [pc, #604]	; (8006770 <scaraInitDuty+0x11a0>)
 8006514:	4613      	mov	r3, r2
 8006516:	005b      	lsls	r3, r3, #1
 8006518:	4413      	add	r3, r2
 800651a:	01db      	lsls	r3, r3, #7
 800651c:	440b      	add	r3, r1
 800651e:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006522:	2201      	movs	r2, #1
 8006524:	701a      	strb	r2, [r3, #0]
								status2 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 8006526:	f897 218c 	ldrb.w	r2, [r7, #396]	; 0x18c
 800652a:	4613      	mov	r3, r2
 800652c:	005b      	lsls	r3, r3, #1
 800652e:	4413      	add	r3, r2
 8006530:	01db      	lsls	r3, r3, #7
 8006532:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8006536:	4a8e      	ldr	r2, [pc, #568]	; (8006770 <scaraInitDuty+0x11a0>)
 8006538:	1898      	adds	r0, r3, r2
 800653a:	f897 318c 	ldrb.w	r3, [r7, #396]	; 0x18c
 800653e:	4a8d      	ldr	r2, [pc, #564]	; (8006774 <scaraInitDuty+0x11a4>)
 8006540:	5cd3      	ldrb	r3, [r2, r3]
 8006542:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006546:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 800654a:	eeb0 2a46 	vmov.f32	s4, s12
 800654e:	eef0 2a66 	vmov.f32	s5, s13
 8006552:	eeb0 1a47 	vmov.f32	s2, s14
 8006556:	eef0 1a67 	vmov.f32	s3, s15
 800655a:	2200      	movs	r2, #0
 800655c:	ed9f 0b80 	vldr	d0, [pc, #512]	; 8006760 <scaraInitDuty+0x1190>
 8006560:	4619      	mov	r1, r3
 8006562:	f001 fcb5 	bl	8007ed0 <scaraInitScurve>
 8006566:	4603      	mov	r3, r0
 8006568:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
						for ( uint8_t i = 0; i < 4; i++) {
 800656c:	f897 318c 	ldrb.w	r3, [r7, #396]	; 0x18c
 8006570:	3301      	adds	r3, #1
 8006572:	f887 318c 	strb.w	r3, [r7, #396]	; 0x18c
 8006576:	f897 318c 	ldrb.w	r3, [r7, #396]	; 0x18c
 800657a:	2b03      	cmp	r3, #3
 800657c:	d980      	bls.n	8006480 <scaraInitDuty+0xeb0>
 800657e:	e003      	b.n	8006588 <scaraInitDuty+0xfb8>
											0, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
							}
						}

					} else {
						return SCARA_STATUS_ERROR_MODE_INIT;
 8006580:	2308      	movs	r3, #8
 8006582:	e3ae      	b.n	8006ce2 <scaraInitDuty+0x1712>
					}

			} else {
				return SCARA_STATUS_ERROR_TRAJECTORY;
 8006584:	2305      	movs	r3, #5
 8006586:	e3ac      	b.n	8006ce2 <scaraInitDuty+0x1712>
			}
		// Check Init Status
			if ( SCARA_STATUS_OK != status1) {
 8006588:	f897 31be 	ldrb.w	r3, [r7, #446]	; 0x1be
 800658c:	2b00      	cmp	r3, #0
 800658e:	d002      	beq.n	8006596 <scaraInitDuty+0xfc6>
				return status1;
 8006590:	f897 31be 	ldrb.w	r3, [r7, #446]	; 0x1be
 8006594:	e3a5      	b.n	8006ce2 <scaraInitDuty+0x1712>
			}
			if ( SCARA_STATUS_OK != status2) {
 8006596:	f897 31bd 	ldrb.w	r3, [r7, #445]	; 0x1bd
 800659a:	2b00      	cmp	r3, #0
 800659c:	f000 8373 	beq.w	8006c86 <scaraInitDuty+0x16b6>
				return status2;
 80065a0:	f897 31bd 	ldrb.w	r3, [r7, #445]	; 0x1bd
 80065a4:	e39d      	b.n	8006ce2 <scaraInitDuty+0x1712>
			}

		//----Joint Quadra
		} else if 	( DUTY_JOINT_4DOF == command.joint_type) {
 80065a6:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	f040 8367 	bne.w	8006c7e <scaraInitDuty+0x16ae>
			SCARA_PositionTypeDef	target_point;
			// Change Degree --> Radian
			command.target_point.roll = command.target_point.roll*PI/180.0;
 80065b0:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	; 0x258
 80065b4:	a36c      	add	r3, pc, #432	; (adr r3, 8006768 <scaraInitDuty+0x1198>)
 80065b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ba:	f7fa f81d 	bl	80005f8 <__aeabi_dmul>
 80065be:	4603      	mov	r3, r0
 80065c0:	460c      	mov	r4, r1
 80065c2:	4618      	mov	r0, r3
 80065c4:	4621      	mov	r1, r4
 80065c6:	f04f 0200 	mov.w	r2, #0
 80065ca:	4b6b      	ldr	r3, [pc, #428]	; (8006778 <scaraInitDuty+0x11a8>)
 80065cc:	f7fa f93e 	bl	800084c <__aeabi_ddiv>
 80065d0:	4603      	mov	r3, r0
 80065d2:	460c      	mov	r4, r1
 80065d4:	e9c7 3496 	strd	r3, r4, [r7, #600]	; 0x258
			// Coordinate
			if( DUTY_COORDINATES_REL == command.coordinate_type) {
 80065d8:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d13c      	bne.n	800665a <scaraInitDuty+0x108a>
				target_point.x 		= positionCurrent.x + command.target_point.x;
 80065e0:	4b66      	ldr	r3, [pc, #408]	; (800677c <scaraInitDuty+0x11ac>)
 80065e2:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80065e6:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 80065ea:	461a      	mov	r2, r3
 80065ec:	4623      	mov	r3, r4
 80065ee:	f7f9 fe4d 	bl	800028c <__adddf3>
 80065f2:	4603      	mov	r3, r0
 80065f4:	460c      	mov	r4, r1
 80065f6:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80065fa:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
				target_point.y 		= positionCurrent.y + command.target_point.y;
 80065fe:	4b5f      	ldr	r3, [pc, #380]	; (800677c <scaraInitDuty+0x11ac>)
 8006600:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8006604:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 8006608:	461a      	mov	r2, r3
 800660a:	4623      	mov	r3, r4
 800660c:	f7f9 fe3e 	bl	800028c <__adddf3>
 8006610:	4603      	mov	r3, r0
 8006612:	460c      	mov	r4, r1
 8006614:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8006618:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
				target_point.z 		= positionCurrent.z + command.target_point.z;
 800661c:	4b57      	ldr	r3, [pc, #348]	; (800677c <scaraInitDuty+0x11ac>)
 800661e:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8006622:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 8006626:	461a      	mov	r2, r3
 8006628:	4623      	mov	r3, r4
 800662a:	f7f9 fe2f 	bl	800028c <__adddf3>
 800662e:	4603      	mov	r3, r0
 8006630:	460c      	mov	r4, r1
 8006632:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8006636:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
				target_point.roll	= positionCurrent.roll + command.target_point.roll;
 800663a:	4b50      	ldr	r3, [pc, #320]	; (800677c <scaraInitDuty+0x11ac>)
 800663c:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8006640:	e9d7 3496 	ldrd	r3, r4, [r7, #600]	; 0x258
 8006644:	461a      	mov	r2, r3
 8006646:	4623      	mov	r3, r4
 8006648:	f7f9 fe20 	bl	800028c <__adddf3>
 800664c:	4603      	mov	r3, r0
 800664e:	460c      	mov	r4, r1
 8006650:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8006654:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
 8006658:	e01e      	b.n	8006698 <scaraInitDuty+0x10c8>
			} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 800665a:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 800665e:	2b00      	cmp	r3, #0
 8006660:	d118      	bne.n	8006694 <scaraInitDuty+0x10c4>
				target_point.x 		= command.target_point.x;
 8006662:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 8006666:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800666a:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
				target_point.y 		= command.target_point.y;
 800666e:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 8006672:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8006676:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
				target_point.z 		= command.target_point.z;
 800667a:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 800667e:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8006682:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
				target_point.roll	= command.target_point.roll;
 8006686:	e9d7 3496 	ldrd	r3, r4, [r7, #600]	; 0x258
 800668a:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800668e:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
 8006692:	e001      	b.n	8006698 <scaraInitDuty+0x10c8>
			} else {
				return SCARA_STATUS_ERROR_COORDINATE;
 8006694:	230c      	movs	r3, #12
 8006696:	e324      	b.n	8006ce2 <scaraInitDuty+0x1712>
			}

			if( FALSE == kinematicInverse(&target_point, positionCurrent)) {
 8006698:	4c38      	ldr	r4, [pc, #224]	; (800677c <scaraInitDuty+0x11ac>)
 800669a:	f107 05c0 	add.w	r5, r7, #192	; 0xc0
 800669e:	4668      	mov	r0, sp
 80066a0:	f104 0308 	add.w	r3, r4, #8
 80066a4:	22b8      	movs	r2, #184	; 0xb8
 80066a6:	4619      	mov	r1, r3
 80066a8:	f00f fba0 	bl	8015dec <memcpy>
 80066ac:	e894 000c 	ldmia.w	r4, {r2, r3}
 80066b0:	4628      	mov	r0, r5
 80066b2:	f7fd fc81 	bl	8003fb8 <kinematicInverse>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d101      	bne.n	80066c0 <scaraInitDuty+0x10f0>
				return SCARA_STATUS_ERROR_OVER_WORKSPACE;// Exit with error
 80066bc:	2307      	movs	r3, #7
 80066be:	e310      	b.n	8006ce2 <scaraInitDuty+0x1712>
			}
			// Trajectory 4 profile
			double q[4];
			q[0] = target_point.Theta1 - positionCurrent.Theta1;
 80066c0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80066c4:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80066c8:	4b2c      	ldr	r3, [pc, #176]	; (800677c <scaraInitDuty+0x11ac>)
 80066ca:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 80066ce:	461a      	mov	r2, r3
 80066d0:	4623      	mov	r3, r4
 80066d2:	f7f9 fdd9 	bl	8000288 <__aeabi_dsub>
 80066d6:	4603      	mov	r3, r0
 80066d8:	460c      	mov	r4, r1
 80066da:	463a      	mov	r2, r7
 80066dc:	e9c2 3400 	strd	r3, r4, [r2]
			q[1] = target_point.Theta2 - positionCurrent.Theta2;
 80066e0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80066e4:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 80066e8:	4b24      	ldr	r3, [pc, #144]	; (800677c <scaraInitDuty+0x11ac>)
 80066ea:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 80066ee:	461a      	mov	r2, r3
 80066f0:	4623      	mov	r3, r4
 80066f2:	f7f9 fdc9 	bl	8000288 <__aeabi_dsub>
 80066f6:	4603      	mov	r3, r0
 80066f8:	460c      	mov	r4, r1
 80066fa:	463a      	mov	r2, r7
 80066fc:	e9c2 3402 	strd	r3, r4, [r2, #8]
			q[2] = target_point.D3 	   - positionCurrent.D3;
 8006700:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006704:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8006708:	4b1c      	ldr	r3, [pc, #112]	; (800677c <scaraInitDuty+0x11ac>)
 800670a:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 800670e:	461a      	mov	r2, r3
 8006710:	4623      	mov	r3, r4
 8006712:	f7f9 fdb9 	bl	8000288 <__aeabi_dsub>
 8006716:	4603      	mov	r3, r0
 8006718:	460c      	mov	r4, r1
 800671a:	463a      	mov	r2, r7
 800671c:	e9c2 3404 	strd	r3, r4, [r2, #16]
			q[3] = target_point.Theta4 - positionCurrent.Theta4;
 8006720:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006724:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 8006728:	4b14      	ldr	r3, [pc, #80]	; (800677c <scaraInitDuty+0x11ac>)
 800672a:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 800672e:	461a      	mov	r2, r3
 8006730:	4623      	mov	r3, r4
 8006732:	f7f9 fda9 	bl	8000288 <__aeabi_dsub>
 8006736:	4603      	mov	r3, r0
 8006738:	460c      	mov	r4, r1
 800673a:	463a      	mov	r2, r7
 800673c:	e9c2 3406 	strd	r3, r4, [r2, #24]

			// LSPB
			if ( DUTY_TRAJECTORY_LSPB == command.trajec_type) {
 8006740:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8006744:	2b00      	cmp	r3, #0
 8006746:	f040 8151 	bne.w	80069ec <scaraInitDuty+0x141c>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 800674a:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 800674e:	2b01      	cmp	r3, #1
 8006750:	d16c      	bne.n	800682c <scaraInitDuty+0x125c>
					for ( uint8_t i = 0; i < 4; i++) {
 8006752:	2300      	movs	r3, #0
 8006754:	f887 318b 	strb.w	r3, [r7, #395]	; 0x18b
 8006758:	e05c      	b.n	8006814 <scaraInitDuty+0x1244>
 800675a:	bf00      	nop
 800675c:	f3af 8000 	nop.w
	...
 8006768:	60000000 	.word	0x60000000
 800676c:	400921fb 	.word	0x400921fb
 8006770:	20005af8 	.word	0x20005af8
 8006774:	20000824 	.word	0x20000824
 8006778:	40668000 	.word	0x40668000
 800677c:	200066b8 	.word	0x200066b8
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8006780:	f897 218b 	ldrb.w	r2, [r7, #395]	; 0x18b
 8006784:	49cf      	ldr	r1, [pc, #828]	; (8006ac4 <scaraInitDuty+0x14f4>)
 8006786:	4613      	mov	r3, r2
 8006788:	005b      	lsls	r3, r3, #1
 800678a:	4413      	add	r3, r2
 800678c:	01db      	lsls	r3, r3, #7
 800678e:	440b      	add	r3, r1
 8006790:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006794:	2200      	movs	r2, #0
 8006796:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 8006798:	f897 018b 	ldrb.w	r0, [r7, #395]	; 0x18b
 800679c:	e9d7 127c 	ldrd	r1, r2, [r7, #496]	; 0x1f0
 80067a0:	4cc8      	ldr	r4, [pc, #800]	; (8006ac4 <scaraInitDuty+0x14f4>)
 80067a2:	4603      	mov	r3, r0
 80067a4:	005b      	lsls	r3, r3, #1
 80067a6:	4403      	add	r3, r0
 80067a8:	01db      	lsls	r3, r3, #7
 80067aa:	4423      	add	r3, r4
 80067ac:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 80067b0:	e9c3 1200 	strd	r1, r2, [r3]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 80067b4:	f897 218b 	ldrb.w	r2, [r7, #395]	; 0x18b
 80067b8:	4613      	mov	r3, r2
 80067ba:	005b      	lsls	r3, r3, #1
 80067bc:	4413      	add	r3, r2
 80067be:	01db      	lsls	r3, r3, #7
 80067c0:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80067c4:	4abf      	ldr	r2, [pc, #764]	; (8006ac4 <scaraInitDuty+0x14f4>)
 80067c6:	1898      	adds	r0, r3, r2
 80067c8:	f897 318b 	ldrb.w	r3, [r7, #395]	; 0x18b
 80067cc:	4abe      	ldr	r2, [pc, #760]	; (8006ac8 <scaraInitDuty+0x14f8>)
 80067ce:	5cd1      	ldrb	r1, [r2, r3]
 80067d0:	f897 318b 	ldrb.w	r3, [r7, #395]	; 0x18b
 80067d4:	463a      	mov	r2, r7
 80067d6:	00db      	lsls	r3, r3, #3
 80067d8:	4413      	add	r3, r2
 80067da:	ed93 7b00 	vldr	d7, [r3]
 80067de:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 80067e2:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 80067e6:	eeb0 2a45 	vmov.f32	s4, s10
 80067ea:	eef0 2a65 	vmov.f32	s5, s11
 80067ee:	eeb0 1a46 	vmov.f32	s2, s12
 80067f2:	eef0 1a66 	vmov.f32	s3, s13
 80067f6:	2201      	movs	r2, #1
 80067f8:	eeb0 0a47 	vmov.f32	s0, s14
 80067fc:	eef0 0a67 	vmov.f32	s1, s15
 8006800:	f000 ff86 	bl	8007710 <scaraInitLSPB>
 8006804:	4603      	mov	r3, r0
 8006806:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
					for ( uint8_t i = 0; i < 4; i++) {
 800680a:	f897 318b 	ldrb.w	r3, [r7, #395]	; 0x18b
 800680e:	3301      	adds	r3, #1
 8006810:	f887 318b 	strb.w	r3, [r7, #395]	; 0x18b
 8006814:	f897 318b 	ldrb.w	r3, [r7, #395]	; 0x18b
 8006818:	2b03      	cmp	r3, #3
 800681a:	d9b1      	bls.n	8006780 <scaraInitDuty+0x11b0>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);

					}
					myDUTY.time_total = command.time_total;
 800681c:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8006820:	4aa8      	ldr	r2, [pc, #672]	; (8006ac4 <scaraInitDuty+0x14f4>)
 8006822:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8006826:	e9c2 3400 	strd	r3, r4, [r2]
 800682a:	e22c      	b.n	8006c86 <scaraInitDuty+0x16b6>
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 800682c:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006830:	2b00      	cmp	r3, #0
 8006832:	f040 80d9 	bne.w	80069e8 <scaraInitDuty+0x1418>
					for ( uint8_t i = 0; i < 4; i++) {
 8006836:	2300      	movs	r3, #0
 8006838:	f887 318a 	strb.w	r3, [r7, #394]	; 0x18a
 800683c:	e03b      	b.n	80068b6 <scaraInitDuty+0x12e6>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 800683e:	f897 218a 	ldrb.w	r2, [r7, #394]	; 0x18a
 8006842:	49a0      	ldr	r1, [pc, #640]	; (8006ac4 <scaraInitDuty+0x14f4>)
 8006844:	4613      	mov	r3, r2
 8006846:	005b      	lsls	r3, r3, #1
 8006848:	4413      	add	r3, r2
 800684a:	01db      	lsls	r3, r3, #7
 800684c:	440b      	add	r3, r1
 800684e:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006852:	2200      	movs	r2, #0
 8006854:	701a      	strb	r2, [r3, #0]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8006856:	f897 218a 	ldrb.w	r2, [r7, #394]	; 0x18a
 800685a:	4613      	mov	r3, r2
 800685c:	005b      	lsls	r3, r3, #1
 800685e:	4413      	add	r3, r2
 8006860:	01db      	lsls	r3, r3, #7
 8006862:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8006866:	4a97      	ldr	r2, [pc, #604]	; (8006ac4 <scaraInitDuty+0x14f4>)
 8006868:	1898      	adds	r0, r3, r2
 800686a:	f897 318a 	ldrb.w	r3, [r7, #394]	; 0x18a
 800686e:	4a96      	ldr	r2, [pc, #600]	; (8006ac8 <scaraInitDuty+0x14f8>)
 8006870:	5cd1      	ldrb	r1, [r2, r3]
 8006872:	f897 318a 	ldrb.w	r3, [r7, #394]	; 0x18a
 8006876:	463a      	mov	r2, r7
 8006878:	00db      	lsls	r3, r3, #3
 800687a:	4413      	add	r3, r2
 800687c:	ed93 7b00 	vldr	d7, [r3]
 8006880:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 8006884:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 8006888:	eeb0 2a45 	vmov.f32	s4, s10
 800688c:	eef0 2a65 	vmov.f32	s5, s11
 8006890:	eeb0 1a46 	vmov.f32	s2, s12
 8006894:	eef0 1a66 	vmov.f32	s3, s13
 8006898:	2200      	movs	r2, #0
 800689a:	eeb0 0a47 	vmov.f32	s0, s14
 800689e:	eef0 0a67 	vmov.f32	s1, s15
 80068a2:	f000 ff35 	bl	8007710 <scaraInitLSPB>
 80068a6:	4603      	mov	r3, r0
 80068a8:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
					for ( uint8_t i = 0; i < 4; i++) {
 80068ac:	f897 318a 	ldrb.w	r3, [r7, #394]	; 0x18a
 80068b0:	3301      	adds	r3, #1
 80068b2:	f887 318a 	strb.w	r3, [r7, #394]	; 0x18a
 80068b6:	f897 318a 	ldrb.w	r3, [r7, #394]	; 0x18a
 80068ba:	2b03      	cmp	r3, #3
 80068bc:	d9bf      	bls.n	800683e <scaraInitDuty+0x126e>
											q[i], DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
					}
					myDUTY.time_total = 0;
 80068be:	4b81      	ldr	r3, [pc, #516]	; (8006ac4 <scaraInitDuty+0x14f4>)
 80068c0:	f603 2238 	addw	r2, r3, #2616	; 0xa38
 80068c4:	f04f 0300 	mov.w	r3, #0
 80068c8:	f04f 0400 	mov.w	r4, #0
 80068cc:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 80068d0:	2300      	movs	r3, #0
 80068d2:	f887 3189 	strb.w	r3, [r7, #393]	; 0x189
 80068d6:	e02d      	b.n	8006934 <scaraInitDuty+0x1364>
						if ( myDUTY.joint.trajectory[i].lspb.Tf > myDUTY.time_total) {
 80068d8:	f897 2189 	ldrb.w	r2, [r7, #393]	; 0x189
 80068dc:	4979      	ldr	r1, [pc, #484]	; (8006ac4 <scaraInitDuty+0x14f4>)
 80068de:	4613      	mov	r3, r2
 80068e0:	005b      	lsls	r3, r3, #1
 80068e2:	4413      	add	r3, r2
 80068e4:	01db      	lsls	r3, r3, #7
 80068e6:	440b      	add	r3, r1
 80068e8:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 80068ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80068f0:	4b74      	ldr	r3, [pc, #464]	; (8006ac4 <scaraInitDuty+0x14f4>)
 80068f2:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80068f6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80068fa:	461a      	mov	r2, r3
 80068fc:	4623      	mov	r3, r4
 80068fe:	f7fa f90b 	bl	8000b18 <__aeabi_dcmpgt>
 8006902:	4603      	mov	r3, r0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d010      	beq.n	800692a <scaraInitDuty+0x135a>
							myDUTY.time_total = myDUTY.joint.trajectory[i].lspb.Tf;
 8006908:	f897 2189 	ldrb.w	r2, [r7, #393]	; 0x189
 800690c:	496d      	ldr	r1, [pc, #436]	; (8006ac4 <scaraInitDuty+0x14f4>)
 800690e:	4613      	mov	r3, r2
 8006910:	005b      	lsls	r3, r3, #1
 8006912:	4413      	add	r3, r2
 8006914:	01db      	lsls	r3, r3, #7
 8006916:	440b      	add	r3, r1
 8006918:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 800691c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006920:	4a68      	ldr	r2, [pc, #416]	; (8006ac4 <scaraInitDuty+0x14f4>)
 8006922:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8006926:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 800692a:	f897 3189 	ldrb.w	r3, [r7, #393]	; 0x189
 800692e:	3301      	adds	r3, #1
 8006930:	f887 3189 	strb.w	r3, [r7, #393]	; 0x189
 8006934:	f897 3189 	ldrb.w	r3, [r7, #393]	; 0x189
 8006938:	2b03      	cmp	r3, #3
 800693a:	d9cd      	bls.n	80068d8 <scaraInitDuty+0x1308>
						}
					}
					for ( uint8_t i = 0; i < 4; i++) {
 800693c:	2300      	movs	r3, #0
 800693e:	f887 3188 	strb.w	r3, [r7, #392]	; 0x188
 8006942:	e04c      	b.n	80069de <scaraInitDuty+0x140e>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8006944:	f897 2188 	ldrb.w	r2, [r7, #392]	; 0x188
 8006948:	495e      	ldr	r1, [pc, #376]	; (8006ac4 <scaraInitDuty+0x14f4>)
 800694a:	4613      	mov	r3, r2
 800694c:	005b      	lsls	r3, r3, #1
 800694e:	4413      	add	r3, r2
 8006950:	01db      	lsls	r3, r3, #7
 8006952:	440b      	add	r3, r1
 8006954:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006958:	2200      	movs	r2, #0
 800695a:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].lspb.Tf = myDUTY.time_total;
 800695c:	f897 0188 	ldrb.w	r0, [r7, #392]	; 0x188
 8006960:	4b58      	ldr	r3, [pc, #352]	; (8006ac4 <scaraInitDuty+0x14f4>)
 8006962:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006966:	e9d3 1200 	ldrd	r1, r2, [r3]
 800696a:	4c56      	ldr	r4, [pc, #344]	; (8006ac4 <scaraInitDuty+0x14f4>)
 800696c:	4603      	mov	r3, r0
 800696e:	005b      	lsls	r3, r3, #1
 8006970:	4403      	add	r3, r0
 8006972:	01db      	lsls	r3, r3, #7
 8006974:	4423      	add	r3, r4
 8006976:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 800697a:	e9c3 1200 	strd	r1, r2, [r3]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 800697e:	f897 2188 	ldrb.w	r2, [r7, #392]	; 0x188
 8006982:	4613      	mov	r3, r2
 8006984:	005b      	lsls	r3, r3, #1
 8006986:	4413      	add	r3, r2
 8006988:	01db      	lsls	r3, r3, #7
 800698a:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 800698e:	4a4d      	ldr	r2, [pc, #308]	; (8006ac4 <scaraInitDuty+0x14f4>)
 8006990:	1898      	adds	r0, r3, r2
 8006992:	f897 3188 	ldrb.w	r3, [r7, #392]	; 0x188
 8006996:	4a4c      	ldr	r2, [pc, #304]	; (8006ac8 <scaraInitDuty+0x14f8>)
 8006998:	5cd1      	ldrb	r1, [r2, r3]
 800699a:	f897 3188 	ldrb.w	r3, [r7, #392]	; 0x188
 800699e:	463a      	mov	r2, r7
 80069a0:	00db      	lsls	r3, r3, #3
 80069a2:	4413      	add	r3, r2
 80069a4:	ed93 7b00 	vldr	d7, [r3]
 80069a8:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 80069ac:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 80069b0:	eeb0 2a45 	vmov.f32	s4, s10
 80069b4:	eef0 2a65 	vmov.f32	s5, s11
 80069b8:	eeb0 1a46 	vmov.f32	s2, s12
 80069bc:	eef0 1a66 	vmov.f32	s3, s13
 80069c0:	2201      	movs	r2, #1
 80069c2:	eeb0 0a47 	vmov.f32	s0, s14
 80069c6:	eef0 0a67 	vmov.f32	s1, s15
 80069ca:	f000 fea1 	bl	8007710 <scaraInitLSPB>
 80069ce:	4603      	mov	r3, r0
 80069d0:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
					for ( uint8_t i = 0; i < 4; i++) {
 80069d4:	f897 3188 	ldrb.w	r3, [r7, #392]	; 0x188
 80069d8:	3301      	adds	r3, #1
 80069da:	f887 3188 	strb.w	r3, [r7, #392]	; 0x188
 80069de:	f897 3188 	ldrb.w	r3, [r7, #392]	; 0x188
 80069e2:	2b03      	cmp	r3, #3
 80069e4:	d9ae      	bls.n	8006944 <scaraInitDuty+0x1374>
 80069e6:	e14e      	b.n	8006c86 <scaraInitDuty+0x16b6>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					}

				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 80069e8:	2308      	movs	r3, #8
 80069ea:	e17a      	b.n	8006ce2 <scaraInitDuty+0x1712>
				}
				// SCURVE
			} else if ( DUTY_TRAJECTORY_SCURVE == command.trajec_type) {
 80069ec:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	f040 8142 	bne.w	8006c7a <scaraInitDuty+0x16aa>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 80069f6:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d159      	bne.n	8006ab2 <scaraInitDuty+0x14e2>
					for ( uint8_t i = 0; i < 4; i++) {
 80069fe:	2300      	movs	r3, #0
 8006a00:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 8006a04:	e049      	b.n	8006a9a <scaraInitDuty+0x14ca>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8006a06:	f897 2187 	ldrb.w	r2, [r7, #391]	; 0x187
 8006a0a:	492e      	ldr	r1, [pc, #184]	; (8006ac4 <scaraInitDuty+0x14f4>)
 8006a0c:	4613      	mov	r3, r2
 8006a0e:	005b      	lsls	r3, r3, #1
 8006a10:	4413      	add	r3, r2
 8006a12:	01db      	lsls	r3, r3, #7
 8006a14:	440b      	add	r3, r1
 8006a16:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 8006a1e:	f897 0187 	ldrb.w	r0, [r7, #391]	; 0x187
 8006a22:	e9d7 127c 	ldrd	r1, r2, [r7, #496]	; 0x1f0
 8006a26:	4c27      	ldr	r4, [pc, #156]	; (8006ac4 <scaraInitDuty+0x14f4>)
 8006a28:	4603      	mov	r3, r0
 8006a2a:	005b      	lsls	r3, r3, #1
 8006a2c:	4403      	add	r3, r0
 8006a2e:	01db      	lsls	r3, r3, #7
 8006a30:	4423      	add	r3, r4
 8006a32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a36:	e9c3 1200 	strd	r1, r2, [r3]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8006a3a:	f897 2187 	ldrb.w	r2, [r7, #391]	; 0x187
 8006a3e:	4613      	mov	r3, r2
 8006a40:	005b      	lsls	r3, r3, #1
 8006a42:	4413      	add	r3, r2
 8006a44:	01db      	lsls	r3, r3, #7
 8006a46:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8006a4a:	4a1e      	ldr	r2, [pc, #120]	; (8006ac4 <scaraInitDuty+0x14f4>)
 8006a4c:	1898      	adds	r0, r3, r2
 8006a4e:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8006a52:	4a1d      	ldr	r2, [pc, #116]	; (8006ac8 <scaraInitDuty+0x14f8>)
 8006a54:	5cd1      	ldrb	r1, [r2, r3]
 8006a56:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8006a5a:	463a      	mov	r2, r7
 8006a5c:	00db      	lsls	r3, r3, #3
 8006a5e:	4413      	add	r3, r2
 8006a60:	ed93 7b00 	vldr	d7, [r3]
 8006a64:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 8006a68:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 8006a6c:	eeb0 2a45 	vmov.f32	s4, s10
 8006a70:	eef0 2a65 	vmov.f32	s5, s11
 8006a74:	eeb0 1a46 	vmov.f32	s2, s12
 8006a78:	eef0 1a66 	vmov.f32	s3, s13
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	eeb0 0a47 	vmov.f32	s0, s14
 8006a82:	eef0 0a67 	vmov.f32	s1, s15
 8006a86:	f001 fa23 	bl	8007ed0 <scaraInitScurve>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
					for ( uint8_t i = 0; i < 4; i++) {
 8006a90:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8006a94:	3301      	adds	r3, #1
 8006a96:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 8006a9a:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8006a9e:	2b03      	cmp	r3, #3
 8006aa0:	d9b1      	bls.n	8006a06 <scaraInitDuty+0x1436>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);

					}
					myDUTY.time_total = command.time_total;
 8006aa2:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8006aa6:	4a07      	ldr	r2, [pc, #28]	; (8006ac4 <scaraInitDuty+0x14f4>)
 8006aa8:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8006aac:	e9c2 3400 	strd	r3, r4, [r2]
 8006ab0:	e0e9      	b.n	8006c86 <scaraInitDuty+0x16b6>
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8006ab2:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	f040 80dd 	bne.w	8006c76 <scaraInitDuty+0x16a6>
					for ( uint8_t i = 0; i < 4; i++) {
 8006abc:	2300      	movs	r3, #0
 8006abe:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 8006ac2:	e03f      	b.n	8006b44 <scaraInitDuty+0x1574>
 8006ac4:	20005af8 	.word	0x20005af8
 8006ac8:	20000824 	.word	0x20000824
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8006acc:	f897 2186 	ldrb.w	r2, [r7, #390]	; 0x186
 8006ad0:	4988      	ldr	r1, [pc, #544]	; (8006cf4 <scaraInitDuty+0x1724>)
 8006ad2:	4613      	mov	r3, r2
 8006ad4:	005b      	lsls	r3, r3, #1
 8006ad6:	4413      	add	r3, r2
 8006ad8:	01db      	lsls	r3, r3, #7
 8006ada:	440b      	add	r3, r1
 8006adc:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	701a      	strb	r2, [r3, #0]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8006ae4:	f897 2186 	ldrb.w	r2, [r7, #390]	; 0x186
 8006ae8:	4613      	mov	r3, r2
 8006aea:	005b      	lsls	r3, r3, #1
 8006aec:	4413      	add	r3, r2
 8006aee:	01db      	lsls	r3, r3, #7
 8006af0:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8006af4:	4a7f      	ldr	r2, [pc, #508]	; (8006cf4 <scaraInitDuty+0x1724>)
 8006af6:	1898      	adds	r0, r3, r2
 8006af8:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 8006afc:	4a7e      	ldr	r2, [pc, #504]	; (8006cf8 <scaraInitDuty+0x1728>)
 8006afe:	5cd1      	ldrb	r1, [r2, r3]
 8006b00:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 8006b04:	463a      	mov	r2, r7
 8006b06:	00db      	lsls	r3, r3, #3
 8006b08:	4413      	add	r3, r2
 8006b0a:	ed93 7b00 	vldr	d7, [r3]
 8006b0e:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 8006b12:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 8006b16:	eeb0 2a45 	vmov.f32	s4, s10
 8006b1a:	eef0 2a65 	vmov.f32	s5, s11
 8006b1e:	eeb0 1a46 	vmov.f32	s2, s12
 8006b22:	eef0 1a66 	vmov.f32	s3, s13
 8006b26:	2200      	movs	r2, #0
 8006b28:	eeb0 0a47 	vmov.f32	s0, s14
 8006b2c:	eef0 0a67 	vmov.f32	s1, s15
 8006b30:	f001 f9ce 	bl	8007ed0 <scaraInitScurve>
 8006b34:	4603      	mov	r3, r0
 8006b36:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
					for ( uint8_t i = 0; i < 4; i++) {
 8006b3a:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 8006b3e:	3301      	adds	r3, #1
 8006b40:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 8006b44:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 8006b48:	2b03      	cmp	r3, #3
 8006b4a:	d9bf      	bls.n	8006acc <scaraInitDuty+0x14fc>
											q[i], DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
					}
					myDUTY.time_total = 0;
 8006b4c:	4b69      	ldr	r3, [pc, #420]	; (8006cf4 <scaraInitDuty+0x1724>)
 8006b4e:	f603 2238 	addw	r2, r3, #2616	; 0xa38
 8006b52:	f04f 0300 	mov.w	r3, #0
 8006b56:	f04f 0400 	mov.w	r4, #0
 8006b5a:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 8006b5e:	2300      	movs	r3, #0
 8006b60:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 8006b64:	e02d      	b.n	8006bc2 <scaraInitDuty+0x15f2>
						if ( myDUTY.joint.trajectory[i].scurve.Tf > myDUTY.time_total) {
 8006b66:	f897 2185 	ldrb.w	r2, [r7, #389]	; 0x185
 8006b6a:	4962      	ldr	r1, [pc, #392]	; (8006cf4 <scaraInitDuty+0x1724>)
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	005b      	lsls	r3, r3, #1
 8006b70:	4413      	add	r3, r2
 8006b72:	01db      	lsls	r3, r3, #7
 8006b74:	440b      	add	r3, r1
 8006b76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006b7e:	4b5d      	ldr	r3, [pc, #372]	; (8006cf4 <scaraInitDuty+0x1724>)
 8006b80:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006b84:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006b88:	461a      	mov	r2, r3
 8006b8a:	4623      	mov	r3, r4
 8006b8c:	f7f9 ffc4 	bl	8000b18 <__aeabi_dcmpgt>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d010      	beq.n	8006bb8 <scaraInitDuty+0x15e8>
							myDUTY.time_total = myDUTY.joint.trajectory[i].scurve.Tf;
 8006b96:	f897 2185 	ldrb.w	r2, [r7, #389]	; 0x185
 8006b9a:	4956      	ldr	r1, [pc, #344]	; (8006cf4 <scaraInitDuty+0x1724>)
 8006b9c:	4613      	mov	r3, r2
 8006b9e:	005b      	lsls	r3, r3, #1
 8006ba0:	4413      	add	r3, r2
 8006ba2:	01db      	lsls	r3, r3, #7
 8006ba4:	440b      	add	r3, r1
 8006ba6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006baa:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006bae:	4a51      	ldr	r2, [pc, #324]	; (8006cf4 <scaraInitDuty+0x1724>)
 8006bb0:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8006bb4:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 8006bb8:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 8006bbc:	3301      	adds	r3, #1
 8006bbe:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 8006bc2:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 8006bc6:	2b03      	cmp	r3, #3
 8006bc8:	d9cd      	bls.n	8006b66 <scaraInitDuty+0x1596>
						}
					}
					for ( uint8_t i = 0; i < 4; i++) {
 8006bca:	2300      	movs	r3, #0
 8006bcc:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 8006bd0:	e04c      	b.n	8006c6c <scaraInitDuty+0x169c>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8006bd2:	f897 2184 	ldrb.w	r2, [r7, #388]	; 0x184
 8006bd6:	4947      	ldr	r1, [pc, #284]	; (8006cf4 <scaraInitDuty+0x1724>)
 8006bd8:	4613      	mov	r3, r2
 8006bda:	005b      	lsls	r3, r3, #1
 8006bdc:	4413      	add	r3, r2
 8006bde:	01db      	lsls	r3, r3, #7
 8006be0:	440b      	add	r3, r1
 8006be2:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006be6:	2201      	movs	r2, #1
 8006be8:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].scurve.Tf = myDUTY.time_total;
 8006bea:	f897 0184 	ldrb.w	r0, [r7, #388]	; 0x184
 8006bee:	4b41      	ldr	r3, [pc, #260]	; (8006cf4 <scaraInitDuty+0x1724>)
 8006bf0:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006bf4:	e9d3 1200 	ldrd	r1, r2, [r3]
 8006bf8:	4c3e      	ldr	r4, [pc, #248]	; (8006cf4 <scaraInitDuty+0x1724>)
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	005b      	lsls	r3, r3, #1
 8006bfe:	4403      	add	r3, r0
 8006c00:	01db      	lsls	r3, r3, #7
 8006c02:	4423      	add	r3, r4
 8006c04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c08:	e9c3 1200 	strd	r1, r2, [r3]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8006c0c:	f897 2184 	ldrb.w	r2, [r7, #388]	; 0x184
 8006c10:	4613      	mov	r3, r2
 8006c12:	005b      	lsls	r3, r3, #1
 8006c14:	4413      	add	r3, r2
 8006c16:	01db      	lsls	r3, r3, #7
 8006c18:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8006c1c:	4a35      	ldr	r2, [pc, #212]	; (8006cf4 <scaraInitDuty+0x1724>)
 8006c1e:	1898      	adds	r0, r3, r2
 8006c20:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 8006c24:	4a34      	ldr	r2, [pc, #208]	; (8006cf8 <scaraInitDuty+0x1728>)
 8006c26:	5cd1      	ldrb	r1, [r2, r3]
 8006c28:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 8006c2c:	463a      	mov	r2, r7
 8006c2e:	00db      	lsls	r3, r3, #3
 8006c30:	4413      	add	r3, r2
 8006c32:	ed93 7b00 	vldr	d7, [r3]
 8006c36:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 8006c3a:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 8006c3e:	eeb0 2a45 	vmov.f32	s4, s10
 8006c42:	eef0 2a65 	vmov.f32	s5, s11
 8006c46:	eeb0 1a46 	vmov.f32	s2, s12
 8006c4a:	eef0 1a66 	vmov.f32	s3, s13
 8006c4e:	2201      	movs	r2, #1
 8006c50:	eeb0 0a47 	vmov.f32	s0, s14
 8006c54:	eef0 0a67 	vmov.f32	s1, s15
 8006c58:	f001 f93a 	bl	8007ed0 <scaraInitScurve>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
					for ( uint8_t i = 0; i < 4; i++) {
 8006c62:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 8006c66:	3301      	adds	r3, #1
 8006c68:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 8006c6c:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 8006c70:	2b03      	cmp	r3, #3
 8006c72:	d9ae      	bls.n	8006bd2 <scaraInitDuty+0x1602>
 8006c74:	e007      	b.n	8006c86 <scaraInitDuty+0x16b6>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					}

				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 8006c76:	2308      	movs	r3, #8
 8006c78:	e033      	b.n	8006ce2 <scaraInitDuty+0x1712>
				}

			} else {
				return SCARA_STATUS_ERROR_TRAJECTORY;
 8006c7a:	2305      	movs	r3, #5
 8006c7c:	e031      	b.n	8006ce2 <scaraInitDuty+0x1712>
			}

		} else {
			return SCARA_STATUS_ERROR_JOINT;
 8006c7e:	2304      	movs	r3, #4
 8006c80:	e02f      	b.n	8006ce2 <scaraInitDuty+0x1712>
		}

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 8006c82:	2302      	movs	r3, #2
 8006c84:	e02d      	b.n	8006ce2 <scaraInitDuty+0x1712>
	}

	// Reset time and distance
	positionCurrent.t = 0;
 8006c86:	4a1d      	ldr	r2, [pc, #116]	; (8006cfc <scaraInitDuty+0x172c>)
 8006c88:	f04f 0300 	mov.w	r3, #0
 8006c8c:	f04f 0400 	mov.w	r4, #0
 8006c90:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	positionCurrent.total_time = myDUTY.time_total;
 8006c94:	4b17      	ldr	r3, [pc, #92]	; (8006cf4 <scaraInitDuty+0x1724>)
 8006c96:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006c9a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006c9e:	4a17      	ldr	r2, [pc, #92]	; (8006cfc <scaraInitDuty+0x172c>)
 8006ca0:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	positionNext.t = 0;
 8006ca4:	4a16      	ldr	r2, [pc, #88]	; (8006d00 <scaraInitDuty+0x1730>)
 8006ca6:	f04f 0300 	mov.w	r3, #0
 8006caa:	f04f 0400 	mov.w	r4, #0
 8006cae:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	positionNext.total_time = myDUTY.time_total;
 8006cb2:	4b10      	ldr	r3, [pc, #64]	; (8006cf4 <scaraInitDuty+0x1724>)
 8006cb4:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006cb8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006cbc:	4a10      	ldr	r2, [pc, #64]	; (8006d00 <scaraInitDuty+0x1730>)
 8006cbe:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	positionTrue.t = 0;
 8006cc2:	4a10      	ldr	r2, [pc, #64]	; (8006d04 <scaraInitDuty+0x1734>)
 8006cc4:	f04f 0300 	mov.w	r3, #0
 8006cc8:	f04f 0400 	mov.w	r4, #0
 8006ccc:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	positionTrue.total_time = myDUTY.time_total;
 8006cd0:	4b08      	ldr	r3, [pc, #32]	; (8006cf4 <scaraInitDuty+0x1724>)
 8006cd2:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006cd6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006cda:	4a0a      	ldr	r2, [pc, #40]	; (8006d04 <scaraInitDuty+0x1734>)
 8006cdc:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

	return SCARA_STATUS_OK;
 8006ce0:	2300      	movs	r3, #0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8006cee:	b004      	add	sp, #16
 8006cf0:	4770      	bx	lr
 8006cf2:	bf00      	nop
 8006cf4:	20005af8 	.word	0x20005af8
 8006cf8:	20000824 	.word	0x20000824
 8006cfc:	200066b8 	.word	0x200066b8
 8006d00:	20006838 	.word	0x20006838
 8006d04:	20006778 	.word	0x20006778

08006d08 <scaraInitLine>:

/* Compute straight line path parameters */
SCARA_StatusTypeDef	scaraInitLine		(Path_Line_TypeDef *line,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end) {
 8006d08:	b082      	sub	sp, #8
 8006d0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d0c:	b0b1      	sub	sp, #196	; 0xc4
 8006d0e:	af2e      	add	r7, sp, #184	; 0xb8
 8006d10:	6078      	str	r0, [r7, #4]
 8006d12:	f107 0120 	add.w	r1, r7, #32
 8006d16:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE ==  kinematicInverse(&end, start)) {
 8006d1a:	f107 04e0 	add.w	r4, r7, #224	; 0xe0
 8006d1e:	4668      	mov	r0, sp
 8006d20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006d24:	22b8      	movs	r2, #184	; 0xb8
 8006d26:	4619      	mov	r1, r3
 8006d28:	f00f f860 	bl	8015dec <memcpy>
 8006d2c:	f107 0320 	add.w	r3, r7, #32
 8006d30:	cb0c      	ldmia	r3, {r2, r3}
 8006d32:	4620      	mov	r0, r4
 8006d34:	f7fd f940 	bl	8003fb8 <kinematicInverse>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d101      	bne.n	8006d42 <scaraInitLine+0x3a>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8006d3e:	2307      	movs	r3, #7
 8006d40:	e09e      	b.n	8006e80 <scaraInitLine+0x178>
	}
	// Init line params
	line->x1 = end.x;
 8006d42:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	e9c2 3402 	strd	r3, r4, [r2, #8]
	line->y1 = end.y;
 8006d4c:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	e9c2 3406 	strd	r3, r4, [r2, #24]
	line->z1 = end.z;
 8006d56:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	line->x0 = start.x;
 8006d60:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	e9c2 3400 	strd	r3, r4, [r2]
	line->y0 = start.y;
 8006d6a:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	e9c2 3404 	strd	r3, r4, [r2, #16]
	line->z0 = start.z;
 8006d74:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	e9c2 3408 	strd	r3, r4, [r2, #32]
	line->denta_x = end.x  -  start.x;
 8006d7e:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8006d82:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8006d86:	461a      	mov	r2, r3
 8006d88:	4623      	mov	r3, r4
 8006d8a:	f7f9 fa7d 	bl	8000288 <__aeabi_dsub>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	460c      	mov	r4, r1
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	line->denta_y = end.y  -  start.y;
 8006d98:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 8006d9c:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8006da0:	461a      	mov	r2, r3
 8006da2:	4623      	mov	r3, r4
 8006da4:	f7f9 fa70 	bl	8000288 <__aeabi_dsub>
 8006da8:	4603      	mov	r3, r0
 8006daa:	460c      	mov	r4, r1
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	line->denta_z = end.z  -  start.z;
 8006db2:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8006db6:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8006dba:	461a      	mov	r2, r3
 8006dbc:	4623      	mov	r3, r4
 8006dbe:	f7f9 fa63 	bl	8000288 <__aeabi_dsub>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	460c      	mov	r4, r1
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8006dd8:	461a      	mov	r2, r3
 8006dda:	4623      	mov	r3, r4
 8006ddc:	f7f9 fc0c 	bl	80005f8 <__aeabi_dmul>
 8006de0:	4603      	mov	r3, r0
 8006de2:	460c      	mov	r4, r1
 8006de4:	461d      	mov	r5, r3
 8006de6:	4626      	mov	r6, r4
			       +(line->denta_y)*(line->denta_y)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8006df4:	461a      	mov	r2, r3
 8006df6:	4623      	mov	r3, r4
 8006df8:	f7f9 fbfe 	bl	80005f8 <__aeabi_dmul>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	460c      	mov	r4, r1
 8006e00:	461a      	mov	r2, r3
 8006e02:	4623      	mov	r3, r4
 8006e04:	4628      	mov	r0, r5
 8006e06:	4631      	mov	r1, r6
 8006e08:	f7f9 fa40 	bl	800028c <__adddf3>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	460c      	mov	r4, r1
 8006e10:	461d      	mov	r5, r3
 8006e12:	4626      	mov	r6, r4
				   +(line->denta_z)*(line->denta_z));
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	e9d3 3410 	ldrd	r3, r4, [r3, #64]	; 0x40
 8006e20:	461a      	mov	r2, r3
 8006e22:	4623      	mov	r3, r4
 8006e24:	f7f9 fbe8 	bl	80005f8 <__aeabi_dmul>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	460c      	mov	r4, r1
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	4623      	mov	r3, r4
 8006e30:	4628      	mov	r0, r5
 8006e32:	4631      	mov	r1, r6
 8006e34:	f7f9 fa2a 	bl	800028c <__adddf3>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	460c      	mov	r4, r1
 8006e3c:	ec44 3b17 	vmov	d7, r3, r4
 8006e40:	eeb0 0a47 	vmov.f32	s0, s14
 8006e44:	eef0 0a67 	vmov.f32	s1, s15
 8006e48:	f012 fed8 	bl	8019bfc <sqrt>
 8006e4c:	eeb0 7a40 	vmov.f32	s14, s0
 8006e50:	eef0 7a60 	vmov.f32	s15, s1
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	line->x_current = line->x0;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	line->y_current = line->y0;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	line->z_current = line->z0;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

	return SCARA_STATUS_OK;
 8006e7e:	2300      	movs	r3, #0
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	370c      	adds	r7, #12
 8006e84:	46bd      	mov	sp, r7
 8006e86:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8006e8a:	b002      	add	sp, #8
 8006e8c:	4770      	bx	lr
	...

08006e90 <scaraInitCircle>:
/* Compute circular path parameters */
SCARA_StatusTypeDef	scaraInitCircle		(Path_Circle_TypeDef *circle,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end,
										SCARA_PositionTypeDef center,
										int32_t dir){
 8006e90:	b082      	sub	sp, #8
 8006e92:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006e96:	b0c3      	sub	sp, #268	; 0x10c
 8006e98:	af2e      	add	r7, sp, #184	; 0xb8
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8006ea0:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE == kinematicInverse(&end, start) ) {
 8006ea4:	f507 7698 	add.w	r6, r7, #304	; 0x130
 8006ea8:	4668      	mov	r0, sp
 8006eaa:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006eae:	22b8      	movs	r2, #184	; 0xb8
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	f00e ff9b 	bl	8015dec <memcpy>
 8006eb6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006eba:	cb0c      	ldmia	r3, {r2, r3}
 8006ebc:	4630      	mov	r0, r6
 8006ebe:	f7fd f87b 	bl	8003fb8 <kinematicInverse>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d101      	bne.n	8006ecc <scaraInitCircle+0x3c>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8006ec8:	2307      	movs	r3, #7
 8006eca:	e146      	b.n	800715a <scaraInitCircle+0x2ca>
	}

	if( 1 != dir && -1 != dir) {
 8006ecc:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d006      	beq.n	8006ee2 <scaraInitCircle+0x52>
 8006ed4:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8006ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006edc:	d001      	beq.n	8006ee2 <scaraInitCircle+0x52>
		return SCARA_STATUS_ERROR_PARA;// error direction param !!!
 8006ede:	2306      	movs	r3, #6
 8006ee0:	e13b      	b.n	800715a <scaraInitCircle+0x2ca>
	}

	double v_x_start, v_y_start, v_x_stop, v_y_stop;
	double r1, r2, angle_start, angle_stop, delta_angle;
	v_x_start = start.x - center.x;
 8006ee2:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8006ee6:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	; 0x238
 8006eea:	f7f9 f9cd 	bl	8000288 <__aeabi_dsub>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	v_y_start = start.y - center.y;
 8006ef6:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8006efa:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 8006efe:	f7f9 f9c3 	bl	8000288 <__aeabi_dsub>
 8006f02:	4602      	mov	r2, r0
 8006f04:	460b      	mov	r3, r1
 8006f06:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	v_x_stop  = end.x  - center.x;
 8006f0a:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8006f0e:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	; 0x238
 8006f12:	f7f9 f9b9 	bl	8000288 <__aeabi_dsub>
 8006f16:	4602      	mov	r2, r0
 8006f18:	460b      	mov	r3, r1
 8006f1a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	v_y_stop  = end.y  - center.y;
 8006f1e:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8006f22:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 8006f26:	f7f9 f9af 	bl	8000288 <__aeabi_dsub>
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	r1 = sqrt(v_x_start*v_x_start + v_y_start*v_y_start);
 8006f32:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006f36:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006f3a:	f7f9 fb5d 	bl	80005f8 <__aeabi_dmul>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	460b      	mov	r3, r1
 8006f42:	4690      	mov	r8, r2
 8006f44:	4699      	mov	r9, r3
 8006f46:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006f4a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006f4e:	f7f9 fb53 	bl	80005f8 <__aeabi_dmul>
 8006f52:	4602      	mov	r2, r0
 8006f54:	460b      	mov	r3, r1
 8006f56:	4640      	mov	r0, r8
 8006f58:	4649      	mov	r1, r9
 8006f5a:	f7f9 f997 	bl	800028c <__adddf3>
 8006f5e:	4602      	mov	r2, r0
 8006f60:	460b      	mov	r3, r1
 8006f62:	ec43 2b17 	vmov	d7, r2, r3
 8006f66:	eeb0 0a47 	vmov.f32	s0, s14
 8006f6a:	eef0 0a67 	vmov.f32	s1, s15
 8006f6e:	f012 fe45 	bl	8019bfc <sqrt>
 8006f72:	ed87 0b08 	vstr	d0, [r7, #32]
	r2 = sqrt(v_x_stop*v_x_stop + v_y_stop*v_y_stop);
 8006f76:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006f7a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8006f7e:	f7f9 fb3b 	bl	80005f8 <__aeabi_dmul>
 8006f82:	4602      	mov	r2, r0
 8006f84:	460b      	mov	r3, r1
 8006f86:	4690      	mov	r8, r2
 8006f88:	4699      	mov	r9, r3
 8006f8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006f8e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006f92:	f7f9 fb31 	bl	80005f8 <__aeabi_dmul>
 8006f96:	4602      	mov	r2, r0
 8006f98:	460b      	mov	r3, r1
 8006f9a:	4640      	mov	r0, r8
 8006f9c:	4649      	mov	r1, r9
 8006f9e:	f7f9 f975 	bl	800028c <__adddf3>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	ec43 2b17 	vmov	d7, r2, r3
 8006faa:	eeb0 0a47 	vmov.f32	s0, s14
 8006fae:	eef0 0a67 	vmov.f32	s1, s15
 8006fb2:	f012 fe23 	bl	8019bfc <sqrt>
 8006fb6:	ed87 0b06 	vstr	d0, [r7, #24]

	if( 1.0 < fabs(r1 - r2)) {
 8006fba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006fbe:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006fc2:	f7f9 f961 	bl	8000288 <__aeabi_dsub>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	460b      	mov	r3, r1
 8006fca:	4614      	mov	r4, r2
 8006fcc:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8006fd0:	f04f 0200 	mov.w	r2, #0
 8006fd4:	4b68      	ldr	r3, [pc, #416]	; (8007178 <scaraInitCircle+0x2e8>)
 8006fd6:	4620      	mov	r0, r4
 8006fd8:	4629      	mov	r1, r5
 8006fda:	f7f9 fd9d 	bl	8000b18 <__aeabi_dcmpgt>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d001      	beq.n	8006fe8 <scaraInitCircle+0x158>
		return SCARA_STATUS_ERROR_PARA; //start & stop are not in a circle together !!
 8006fe4:	2306      	movs	r3, #6
 8006fe6:	e0b8      	b.n	800715a <scaraInitCircle+0x2ca>
	}

	if (r1 < 0.1 || r2 < 0.1) {
 8006fe8:	a35f      	add	r3, pc, #380	; (adr r3, 8007168 <scaraInitCircle+0x2d8>)
 8006fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fee:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006ff2:	f7f9 fd73 	bl	8000adc <__aeabi_dcmplt>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d109      	bne.n	8007010 <scaraInitCircle+0x180>
 8006ffc:	a35a      	add	r3, pc, #360	; (adr r3, 8007168 <scaraInitCircle+0x2d8>)
 8006ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007002:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007006:	f7f9 fd69 	bl	8000adc <__aeabi_dcmplt>
 800700a:	4603      	mov	r3, r0
 800700c:	2b00      	cmp	r3, #0
 800700e:	d001      	beq.n	8007014 <scaraInitCircle+0x184>
		return SCARA_STATUS_ERROR_PARA; //start and center almost in the same phace, radius = 0 !!
 8007010:	2306      	movs	r3, #6
 8007012:	e0a2      	b.n	800715a <scaraInitCircle+0x2ca>
	}

	angle_start = atan2(v_y_start, v_x_start);
 8007014:	ed97 1b10 	vldr	d1, [r7, #64]	; 0x40
 8007018:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 800701c:	f012 fdec 	bl	8019bf8 <atan2>
 8007020:	ed87 0b04 	vstr	d0, [r7, #16]
	angle_stop  = atan2(v_y_stop, v_x_stop);
 8007024:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 8007028:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 800702c:	f012 fde4 	bl	8019bf8 <atan2>
 8007030:	ed87 0b02 	vstr	d0, [r7, #8]
	delta_angle = angle_stop - angle_start;
 8007034:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007038:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800703c:	f7f9 f924 	bl	8000288 <__aeabi_dsub>
 8007040:	4603      	mov	r3, r0
 8007042:	460c      	mov	r4, r1
 8007044:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48

	if ( 0 > delta_angle) {
 8007048:	f04f 0200 	mov.w	r2, #0
 800704c:	f04f 0300 	mov.w	r3, #0
 8007050:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007054:	f7f9 fd42 	bl	8000adc <__aeabi_dcmplt>
 8007058:	4603      	mov	r3, r0
 800705a:	2b00      	cmp	r3, #0
 800705c:	d00a      	beq.n	8007074 <scaraInitCircle+0x1e4>
		delta_angle += 2*PI;
 800705e:	a344      	add	r3, pc, #272	; (adr r3, 8007170 <scaraInitCircle+0x2e0>)
 8007060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007064:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007068:	f7f9 f910 	bl	800028c <__adddf3>
 800706c:	4603      	mov	r3, r0
 800706e:	460c      	mov	r4, r1
 8007070:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	} // atan2 range : -PI --> PI

	if ( 0 > dir) {
 8007074:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8007078:	2b00      	cmp	r3, #0
 800707a:	da0a      	bge.n	8007092 <scaraInitCircle+0x202>
		delta_angle = 2*PI - delta_angle;
 800707c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007080:	a13b      	add	r1, pc, #236	; (adr r1, 8007170 <scaraInitCircle+0x2e0>)
 8007082:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007086:	f7f9 f8ff 	bl	8000288 <__aeabi_dsub>
 800708a:	4603      	mov	r3, r0
 800708c:	460c      	mov	r4, r1
 800708e:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	}
	// Init circle params
	circle->dir = dir;
 8007092:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8007096:	b25a      	sxtb	r2, r3
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	701a      	strb	r2, [r3, #0]
	circle->radius = r1;
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80070a2:	e9c2 3402 	strd	r3, r4, [r2, #8]
	circle->angle_start = angle_start;
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80070ac:	e9c2 3404 	strd	r3, r4, [r2, #16]
	circle->angle_stop  = angle_stop;
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80070b6:	e9c2 3406 	strd	r3, r4, [r2, #24]
	circle->total_angle = delta_angle;
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80070c0:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	circle->total_s = delta_angle*r1;
 80070c4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80070c8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80070cc:	f7f9 fa94 	bl	80005f8 <__aeabi_dmul>
 80070d0:	4603      	mov	r3, r0
 80070d2:	460c      	mov	r4, r1
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	circle->x0 = start.x;
 80070da:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	e9c2 3408 	strd	r3, r4, [r2, #32]
	circle->y0 = start.y;
 80070e4:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	circle->x1 = end.x;
 80070ee:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	circle->y1 = end.y;
 80070f8:	e9d7 3460 	ldrd	r3, r4, [r7, #384]	; 0x180
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	circle->xi = center.x;
 8007102:	e9d7 348e 	ldrd	r3, r4, [r7, #568]	; 0x238
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	circle->yi = center.y;
 800710c:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	circle->z0 = start.z;
 8007116:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	circle->z1 = start.z;
 8007120:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	circle->zi = start.z;
 800712a:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	circle->x_current = circle->x0;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	circle->y_current = circle->y0;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8007146:	687a      	ldr	r2, [r7, #4]
 8007148:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	circle->z_current = circle->z0;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

	return SCARA_STATUS_OK;
 8007158:	2300      	movs	r3, #0
}
 800715a:	4618      	mov	r0, r3
 800715c:	3754      	adds	r7, #84	; 0x54
 800715e:	46bd      	mov	sp, r7
 8007160:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007164:	b002      	add	sp, #8
 8007166:	4770      	bx	lr
 8007168:	9999999a 	.word	0x9999999a
 800716c:	3fb99999 	.word	0x3fb99999
 8007170:	60000000 	.word	0x60000000
 8007174:	401921fb 	.word	0x401921fb
 8007178:	3ff00000 	.word	0x3ff00000
 800717c:	00000000 	.word	0x00000000

08007180 <scaraInitLinear>:

SCARA_StatusTypeDef scaraInitLinear(Trajectory_Linear_TypeDef *linear, Trajectory_TargetTypeDef target, double total_s,
									ModeInitTypeDef modeinit, double additional_factor)
{
 8007180:	b590      	push	{r4, r7, lr}
 8007182:	b087      	sub	sp, #28
 8007184:	af00      	add	r7, sp, #0
 8007186:	6178      	str	r0, [r7, #20]
 8007188:	460b      	mov	r3, r1
 800718a:	ed87 0b02 	vstr	d0, [r7, #8]
 800718e:	ed87 1b00 	vstr	d1, [r7]
 8007192:	74fb      	strb	r3, [r7, #19]
 8007194:	4613      	mov	r3, r2
 8007196:	74bb      	strb	r3, [r7, #18]

	if(target == TRAJECTORY_3D){
 8007198:	7cfb      	ldrb	r3, [r7, #19]
 800719a:	2b04      	cmp	r3, #4
 800719c:	d004      	beq.n	80071a8 <scaraInitLinear+0x28>

	}else if(target == TRAJECTORY_ROLL){
 800719e:	7cfb      	ldrb	r3, [r7, #19]
 80071a0:	2b05      	cmp	r3, #5
 80071a2:	d001      	beq.n	80071a8 <scaraInitLinear+0x28>

	}else{
		return SCARA_STATUS_ERROR_PARA;
 80071a4:	2306      	movs	r3, #6
 80071a6:	e04b      	b.n	8007240 <scaraInitLinear+0xc0>
	}

	if(modeinit == DUTY_MODE_INIT_QT){
 80071a8:	7cbb      	ldrb	r3, [r7, #18]
 80071aa:	2b03      	cmp	r3, #3
 80071ac:	d125      	bne.n	80071fa <scaraInitLinear+0x7a>
		linear->constant_v = total_s / additional_factor;
 80071ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80071b6:	f7f9 fb49 	bl	800084c <__aeabi_ddiv>
 80071ba:	4603      	mov	r3, r0
 80071bc:	460c      	mov	r4, r1
 80071be:	697a      	ldr	r2, [r7, #20]
 80071c0:	e9c2 3402 	strd	r3, r4, [r2, #8]
		linear->number_of_sample = ceilf(additional_factor / T_SAMPLING); // ceiling
 80071c4:	a322      	add	r3, pc, #136	; (adr r3, 8007250 <scaraInitLinear+0xd0>)
 80071c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80071ce:	f7f9 fb3d 	bl	800084c <__aeabi_ddiv>
 80071d2:	4603      	mov	r3, r0
 80071d4:	460c      	mov	r4, r1
 80071d6:	4618      	mov	r0, r3
 80071d8:	4621      	mov	r1, r4
 80071da:	f7f9 fd05 	bl	8000be8 <__aeabi_d2f>
 80071de:	4603      	mov	r3, r0
 80071e0:	ee00 3a10 	vmov	s0, r3
 80071e4:	f012 fcc8 	bl	8019b78 <ceilf>
 80071e8:	eef0 7a40 	vmov.f32	s15, s0
 80071ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071f0:	ee17 2a90 	vmov	r2, s15
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	621a      	str	r2, [r3, #32]
 80071f8:	e021      	b.n	800723e <scaraInitLinear+0xbe>
	}else if(modeinit == DUTY_MODE_INIT_QV){
 80071fa:	7cbb      	ldrb	r3, [r7, #18]
 80071fc:	2b02      	cmp	r3, #2
 80071fe:	d11c      	bne.n	800723a <scaraInitLinear+0xba>
		linear->constant_v = additional_factor * V_MOVE_MAX;
 8007200:	f04f 0200 	mov.w	r2, #0
 8007204:	4b10      	ldr	r3, [pc, #64]	; (8007248 <scaraInitLinear+0xc8>)
 8007206:	e9d7 0100 	ldrd	r0, r1, [r7]
 800720a:	f7f9 f9f5 	bl	80005f8 <__aeabi_dmul>
 800720e:	4603      	mov	r3, r0
 8007210:	460c      	mov	r4, r1
 8007212:	697a      	ldr	r2, [r7, #20]
 8007214:	e9c2 3402 	strd	r3, r4, [r2, #8]
		myDUTY.time_total = total_s / linear->constant_v;
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800721e:	461a      	mov	r2, r3
 8007220:	4623      	mov	r3, r4
 8007222:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007226:	f7f9 fb11 	bl	800084c <__aeabi_ddiv>
 800722a:	4603      	mov	r3, r0
 800722c:	460c      	mov	r4, r1
 800722e:	4a07      	ldr	r2, [pc, #28]	; (800724c <scaraInitLinear+0xcc>)
 8007230:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8007234:	e9c2 3400 	strd	r3, r4, [r2]
 8007238:	e001      	b.n	800723e <scaraInitLinear+0xbe>
	}else{
		return SCARA_STATUS_ERROR_PARA;
 800723a:	2306      	movs	r3, #6
 800723c:	e000      	b.n	8007240 <scaraInitLinear+0xc0>
	}

	return SCARA_STATUS_OK;
 800723e:	2300      	movs	r3, #0
}
 8007240:	4618      	mov	r0, r3
 8007242:	371c      	adds	r7, #28
 8007244:	46bd      	mov	sp, r7
 8007246:	bd90      	pop	{r4, r7, pc}
 8007248:	40877000 	.word	0x40877000
 800724c:	20005af8 	.word	0x20005af8
 8007250:	40000000 	.word	0x40000000
 8007254:	3f847ae1 	.word	0x3f847ae1

08007258 <scaraInitLSPB1>:
SCARA_StatusTypeDef	scaraInitLSPB1		(Trajectory_LSPB_TypeDef *lspb,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double additional_factor){
 8007258:	b5b0      	push	{r4, r5, r7, lr}
 800725a:	b096      	sub	sp, #88	; 0x58
 800725c:	af00      	add	r7, sp, #0
 800725e:	61f8      	str	r0, [r7, #28]
 8007260:	460b      	mov	r3, r1
 8007262:	ed87 0b04 	vstr	d0, [r7, #16]
 8007266:	ed87 1b02 	vstr	d1, [r7, #8]
 800726a:	ed87 2b00 	vstr	d2, [r7]
 800726e:	76fb      	strb	r3, [r7, #27]
 8007270:	4613      	mov	r3, r2
 8007272:	76bb      	strb	r3, [r7, #26]
	double v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	uint32_t no_sample;
	int8_t dir;
	if(target == TRAJECTORY_3D){
 8007274:	7efb      	ldrb	r3, [r7, #27]
 8007276:	2b04      	cmp	r3, #4
 8007278:	d12c      	bne.n	80072d4 <scaraInitLSPB1+0x7c>
		if(modeinit == DUTY_MODE_INIT_QVT){
 800727a:	7ebb      	ldrb	r3, [r7, #26]
 800727c:	2b01      	cmp	r3, #1
 800727e:	d10f      	bne.n	80072a0 <scaraInitLSPB1+0x48>
			v_design = V_MOVE_MAX*v_factor;
 8007280:	f04f 0200 	mov.w	r2, #0
 8007284:	4b74      	ldr	r3, [pc, #464]	; (8007458 <scaraInitLSPB1+0x200>)
 8007286:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800728a:	f7f9 f9b5 	bl	80005f8 <__aeabi_dmul>
 800728e:	4603      	mov	r3, r0
 8007290:	460c      	mov	r4, r1
 8007292:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			tf = additional_factor;
 8007296:	e9d7 3400 	ldrd	r3, r4, [r7]
 800729a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 800729e:	e01b      	b.n	80072d8 <scaraInitLSPB1+0x80>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
 80072a0:	7ebb      	ldrb	r3, [r7, #26]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d118      	bne.n	80072d8 <scaraInitLSPB1+0x80>
			a_design = A_MOVE_MAX*additional_factor;
 80072a6:	f04f 0200 	mov.w	r2, #0
 80072aa:	4b6c      	ldr	r3, [pc, #432]	; (800745c <scaraInitLSPB1+0x204>)
 80072ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80072b0:	f7f9 f9a2 	bl	80005f8 <__aeabi_dmul>
 80072b4:	4603      	mov	r3, r0
 80072b6:	460c      	mov	r4, r1
 80072b8:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			v_design = V_MOVE_MAX*v_factor;
 80072bc:	f04f 0200 	mov.w	r2, #0
 80072c0:	4b65      	ldr	r3, [pc, #404]	; (8007458 <scaraInitLSPB1+0x200>)
 80072c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80072c6:	f7f9 f997 	bl	80005f8 <__aeabi_dmul>
 80072ca:	4603      	mov	r3, r0
 80072cc:	460c      	mov	r4, r1
 80072ce:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
 80072d2:	e001      	b.n	80072d8 <scaraInitLSPB1+0x80>
		}
	}else{
		return SCARA_STATUS_ERROR_PARA;
 80072d4:	2306      	movs	r3, #6
 80072d6:	e20b      	b.n	80076f0 <scaraInitLSPB1+0x498>
	}
	if(modeinit == DUTY_MODE_INIT_QVT){
 80072d8:	7ebb      	ldrb	r3, [r7, #26]
 80072da:	2b01      	cmp	r3, #1
 80072dc:	f040 80c6 	bne.w	800746c <scaraInitLSPB1+0x214>
		//check if time valid or not
		if(tf < 0.1 && v_design > 7.5){
 80072e0:	a357      	add	r3, pc, #348	; (adr r3, 8007440 <scaraInitLSPB1+0x1e8>)
 80072e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80072ea:	f7f9 fbf7 	bl	8000adc <__aeabi_dcmplt>
 80072ee:	4603      	mov	r3, r0
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d01d      	beq.n	8007330 <scaraInitLSPB1+0xd8>
 80072f4:	f04f 0200 	mov.w	r2, #0
 80072f8:	4b59      	ldr	r3, [pc, #356]	; (8007460 <scaraInitLSPB1+0x208>)
 80072fa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80072fe:	f7f9 fc0b 	bl	8000b18 <__aeabi_dcmpgt>
 8007302:	4603      	mov	r3, r0
 8007304:	2b00      	cmp	r3, #0
 8007306:	d013      	beq.n	8007330 <scaraInitLSPB1+0xd8>
			tf = 1.5*total_s/v_design;
 8007308:	f04f 0200 	mov.w	r2, #0
 800730c:	4b55      	ldr	r3, [pc, #340]	; (8007464 <scaraInitLSPB1+0x20c>)
 800730e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007312:	f7f9 f971 	bl	80005f8 <__aeabi_dmul>
 8007316:	4603      	mov	r3, r0
 8007318:	460c      	mov	r4, r1
 800731a:	4618      	mov	r0, r3
 800731c:	4621      	mov	r1, r4
 800731e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007322:	f7f9 fa93 	bl	800084c <__aeabi_ddiv>
 8007326:	4603      	mov	r3, r0
 8007328:	460c      	mov	r4, r1
 800732a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 800732e:	e060      	b.n	80073f2 <scaraInitLSPB1+0x19a>
		}else if(v_design < 0.0001 && tf > 0.15){ //check if velocity valid or not
 8007330:	a345      	add	r3, pc, #276	; (adr r3, 8007448 <scaraInitLSPB1+0x1f0>)
 8007332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007336:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800733a:	f7f9 fbcf 	bl	8000adc <__aeabi_dcmplt>
 800733e:	4603      	mov	r3, r0
 8007340:	2b00      	cmp	r3, #0
 8007342:	d01d      	beq.n	8007380 <scaraInitLSPB1+0x128>
 8007344:	a342      	add	r3, pc, #264	; (adr r3, 8007450 <scaraInitLSPB1+0x1f8>)
 8007346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800734a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800734e:	f7f9 fbe3 	bl	8000b18 <__aeabi_dcmpgt>
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d013      	beq.n	8007380 <scaraInitLSPB1+0x128>
			v_design = 1.5*total_s/tf;
 8007358:	f04f 0200 	mov.w	r2, #0
 800735c:	4b41      	ldr	r3, [pc, #260]	; (8007464 <scaraInitLSPB1+0x20c>)
 800735e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007362:	f7f9 f949 	bl	80005f8 <__aeabi_dmul>
 8007366:	4603      	mov	r3, r0
 8007368:	460c      	mov	r4, r1
 800736a:	4618      	mov	r0, r3
 800736c:	4621      	mov	r1, r4
 800736e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007372:	f7f9 fa6b 	bl	800084c <__aeabi_ddiv>
 8007376:	4603      	mov	r3, r0
 8007378:	460c      	mov	r4, r1
 800737a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
 800737e:	e038      	b.n	80073f2 <scaraInitLSPB1+0x19a>
		}else{
			v_lim = total_s/tf;
 8007380:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007384:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007388:	f7f9 fa60 	bl	800084c <__aeabi_ddiv>
 800738c:	4603      	mov	r3, r0
 800738e:	460c      	mov	r4, r1
 8007390:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			if(v_design < 1.2*v_lim){
 8007394:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8007398:	4b33      	ldr	r3, [pc, #204]	; (8007468 <scaraInitLSPB1+0x210>)
 800739a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800739e:	f7f9 f92b 	bl	80005f8 <__aeabi_dmul>
 80073a2:	4603      	mov	r3, r0
 80073a4:	460c      	mov	r4, r1
 80073a6:	461a      	mov	r2, r3
 80073a8:	4623      	mov	r3, r4
 80073aa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80073ae:	f7f9 fb95 	bl	8000adc <__aeabi_dcmplt>
 80073b2:	4603      	mov	r3, r0
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d001      	beq.n	80073bc <scaraInitLSPB1+0x164>
				return SCARA_STATUS_ERROR_OVER_VELOC;
 80073b8:	2309      	movs	r3, #9
 80073ba:	e199      	b.n	80076f0 <scaraInitLSPB1+0x498>
			}else if(v_design > 2*v_lim){
 80073bc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80073c0:	4602      	mov	r2, r0
 80073c2:	460b      	mov	r3, r1
 80073c4:	f7f8 ff62 	bl	800028c <__adddf3>
 80073c8:	4603      	mov	r3, r0
 80073ca:	460c      	mov	r4, r1
 80073cc:	461a      	mov	r2, r3
 80073ce:	4623      	mov	r3, r4
 80073d0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80073d4:	f7f9 fba0 	bl	8000b18 <__aeabi_dcmpgt>
 80073d8:	4603      	mov	r3, r0
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d009      	beq.n	80073f2 <scaraInitLSPB1+0x19a>
				v_design = 2*v_lim;
 80073de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80073e2:	4602      	mov	r2, r0
 80073e4:	460b      	mov	r3, r1
 80073e6:	f7f8 ff51 	bl	800028c <__adddf3>
 80073ea:	4603      	mov	r3, r0
 80073ec:	460c      	mov	r4, r1
 80073ee:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			}else{

			}
		}
		ta = tf - total_s/v_design;
 80073f2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80073f6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80073fa:	f7f9 fa27 	bl	800084c <__aeabi_ddiv>
 80073fe:	4603      	mov	r3, r0
 8007400:	460c      	mov	r4, r1
 8007402:	461a      	mov	r2, r3
 8007404:	4623      	mov	r3, r4
 8007406:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800740a:	f7f8 ff3d 	bl	8000288 <__aeabi_dsub>
 800740e:	4603      	mov	r3, r0
 8007410:	460c      	mov	r4, r1
 8007412:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
		a_design = v_design/ta;
 8007416:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800741a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800741e:	f7f9 fa15 	bl	800084c <__aeabi_ddiv>
 8007422:	4603      	mov	r3, r0
 8007424:	460c      	mov	r4, r1
 8007426:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		td = tf - ta;
 800742a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800742e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007432:	f7f8 ff29 	bl	8000288 <__aeabi_dsub>
 8007436:	4603      	mov	r3, r0
 8007438:	460c      	mov	r4, r1
 800743a:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
 800743e:	e0ef      	b.n	8007620 <scaraInitLSPB1+0x3c8>
 8007440:	9999999a 	.word	0x9999999a
 8007444:	3fb99999 	.word	0x3fb99999
 8007448:	eb1c432d 	.word	0xeb1c432d
 800744c:	3f1a36e2 	.word	0x3f1a36e2
 8007450:	33333333 	.word	0x33333333
 8007454:	3fc33333 	.word	0x3fc33333
 8007458:	40877000 	.word	0x40877000
 800745c:	407f4000 	.word	0x407f4000
 8007460:	401e0000 	.word	0x401e0000
 8007464:	3ff80000 	.word	0x3ff80000
 8007468:	3ff33333 	.word	0x3ff33333

	}else if(modeinit == DUTY_MODE_INIT_QVA){
 800746c:	7ebb      	ldrb	r3, [r7, #26]
 800746e:	2b00      	cmp	r3, #0
 8007470:	f040 80d6 	bne.w	8007620 <scaraInitLSPB1+0x3c8>
		//check qva condition
		if(total_s*a_design < v_design*v_design){ //condition for ta smaller than td
 8007474:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007478:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800747c:	f7f9 f8bc 	bl	80005f8 <__aeabi_dmul>
 8007480:	4603      	mov	r3, r0
 8007482:	460c      	mov	r4, r1
 8007484:	4625      	mov	r5, r4
 8007486:	461c      	mov	r4, r3
 8007488:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800748c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007490:	f7f9 f8b2 	bl	80005f8 <__aeabi_dmul>
 8007494:	4602      	mov	r2, r0
 8007496:	460b      	mov	r3, r1
 8007498:	4620      	mov	r0, r4
 800749a:	4629      	mov	r1, r5
 800749c:	f7f9 fb1e 	bl	8000adc <__aeabi_dcmplt>
 80074a0:	4603      	mov	r3, r0
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	f000 8088 	beq.w	80075b8 <scaraInitLSPB1+0x360>
			if(total_s/v_design < 0.8){ //td too small
 80074a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80074ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80074b0:	f7f9 f9cc 	bl	800084c <__aeabi_ddiv>
 80074b4:	4603      	mov	r3, r0
 80074b6:	460c      	mov	r4, r1
 80074b8:	4618      	mov	r0, r3
 80074ba:	4621      	mov	r1, r4
 80074bc:	a392      	add	r3, pc, #584	; (adr r3, 8007708 <scaraInitLSPB1+0x4b0>)
 80074be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c2:	f7f9 fb0b 	bl	8000adc <__aeabi_dcmplt>
 80074c6:	4603      	mov	r3, r0
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d00a      	beq.n	80074e2 <scaraInitLSPB1+0x28a>
				//recalculate v_design
				v_design = 0.8*total_s;
 80074cc:	a38e      	add	r3, pc, #568	; (adr r3, 8007708 <scaraInitLSPB1+0x4b0>)
 80074ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80074d6:	f7f9 f88f 	bl	80005f8 <__aeabi_dmul>
 80074da:	4603      	mov	r3, r0
 80074dc:	460c      	mov	r4, r1
 80074de:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			}
			if(v_design/a_design < 0.5){ //ta is too small
 80074e2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80074e6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80074ea:	f7f9 f9af 	bl	800084c <__aeabi_ddiv>
 80074ee:	4603      	mov	r3, r0
 80074f0:	460c      	mov	r4, r1
 80074f2:	4618      	mov	r0, r3
 80074f4:	4621      	mov	r1, r4
 80074f6:	f04f 0200 	mov.w	r2, #0
 80074fa:	4b81      	ldr	r3, [pc, #516]	; (8007700 <scaraInitLSPB1+0x4a8>)
 80074fc:	f7f9 faee 	bl	8000adc <__aeabi_dcmplt>
 8007500:	4603      	mov	r3, r0
 8007502:	2b00      	cmp	r3, #0
 8007504:	d00a      	beq.n	800751c <scaraInitLSPB1+0x2c4>
				//recalculate a_design
				a_design = v_design/0.5;
 8007506:	f04f 0200 	mov.w	r2, #0
 800750a:	4b7d      	ldr	r3, [pc, #500]	; (8007700 <scaraInitLSPB1+0x4a8>)
 800750c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007510:	f7f9 f99c 	bl	800084c <__aeabi_ddiv>
 8007514:	4603      	mov	r3, r0
 8007516:	460c      	mov	r4, r1
 8007518:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			}
			ta = v_design/a_design;
 800751c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007520:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007524:	f7f9 f992 	bl	800084c <__aeabi_ddiv>
 8007528:	4603      	mov	r3, r0
 800752a:	460c      	mov	r4, r1
 800752c:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
			td = total_s/v_design;
 8007530:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007534:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007538:	f7f9 f988 	bl	800084c <__aeabi_ddiv>
 800753c:	4603      	mov	r3, r0
 800753e:	460c      	mov	r4, r1
 8007540:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
			tf = ta + td;
 8007544:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007548:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800754c:	f7f8 fe9e 	bl	800028c <__adddf3>
 8007550:	4603      	mov	r3, r0
 8007552:	460c      	mov	r4, r1
 8007554:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
			if(v_design/a_design < 1){ //ta is too small
 8007558:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800755c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007560:	f7f9 f974 	bl	800084c <__aeabi_ddiv>
 8007564:	4603      	mov	r3, r0
 8007566:	460c      	mov	r4, r1
 8007568:	4618      	mov	r0, r3
 800756a:	4621      	mov	r1, r4
 800756c:	f04f 0200 	mov.w	r2, #0
 8007570:	4b64      	ldr	r3, [pc, #400]	; (8007704 <scaraInitLSPB1+0x4ac>)
 8007572:	f7f9 fab3 	bl	8000adc <__aeabi_dcmplt>
 8007576:	4603      	mov	r3, r0
 8007578:	2b00      	cmp	r3, #0
 800757a:	d051      	beq.n	8007620 <scaraInitLSPB1+0x3c8>
				//recalculate a_design
				a_design = v_design;
 800757c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8007580:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
				ta = 1;
 8007584:	f04f 0300 	mov.w	r3, #0
 8007588:	4c5e      	ldr	r4, [pc, #376]	; (8007704 <scaraInitLSPB1+0x4ac>)
 800758a:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
				td = total_s/v_design;
 800758e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007592:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007596:	f7f9 f959 	bl	800084c <__aeabi_ddiv>
 800759a:	4603      	mov	r3, r0
 800759c:	460c      	mov	r4, r1
 800759e:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
				tf = ta + td;
 80075a2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80075a6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80075aa:	f7f8 fe6f 	bl	800028c <__adddf3>
 80075ae:	4603      	mov	r3, r0
 80075b0:	460c      	mov	r4, r1
 80075b2:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 80075b6:	e033      	b.n	8007620 <scaraInitLSPB1+0x3c8>
			}

		}else{
			tf = 2*total_s/v_design;
 80075b8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80075bc:	4602      	mov	r2, r0
 80075be:	460b      	mov	r3, r1
 80075c0:	f7f8 fe64 	bl	800028c <__adddf3>
 80075c4:	4603      	mov	r3, r0
 80075c6:	460c      	mov	r4, r1
 80075c8:	4618      	mov	r0, r3
 80075ca:	4621      	mov	r1, r4
 80075cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80075d0:	f7f9 f93c 	bl	800084c <__aeabi_ddiv>
 80075d4:	4603      	mov	r3, r0
 80075d6:	460c      	mov	r4, r1
 80075d8:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
			ta = tf/2;
 80075dc:	f04f 0200 	mov.w	r2, #0
 80075e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80075e4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80075e8:	f7f9 f930 	bl	800084c <__aeabi_ddiv>
 80075ec:	4603      	mov	r3, r0
 80075ee:	460c      	mov	r4, r1
 80075f0:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
			td = tf/2;
 80075f4:	f04f 0200 	mov.w	r2, #0
 80075f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80075fc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007600:	f7f9 f924 	bl	800084c <__aeabi_ddiv>
 8007604:	4603      	mov	r3, r0
 8007606:	460c      	mov	r4, r1
 8007608:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
			a_design = v_design/ta;
 800760c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007610:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007614:	f7f9 f91a 	bl	800084c <__aeabi_ddiv>
 8007618:	4603      	mov	r3, r0
 800761a:	460c      	mov	r4, r1
 800761c:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		}
	}
	no_sample = ceilf(tf / T_SAMPLING); // ceiling
 8007620:	a335      	add	r3, pc, #212	; (adr r3, 80076f8 <scaraInitLSPB1+0x4a0>)
 8007622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007626:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800762a:	f7f9 f90f 	bl	800084c <__aeabi_ddiv>
 800762e:	4603      	mov	r3, r0
 8007630:	460c      	mov	r4, r1
 8007632:	4618      	mov	r0, r3
 8007634:	4621      	mov	r1, r4
 8007636:	f7f9 fad7 	bl	8000be8 <__aeabi_d2f>
 800763a:	4603      	mov	r3, r0
 800763c:	ee00 3a10 	vmov	s0, r3
 8007640:	f012 fa9a 	bl	8019b78 <ceilf>
 8007644:	eef0 7a40 	vmov.f32	s15, s0
 8007648:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800764c:	ee17 3a90 	vmov	r3, s15
 8007650:	627b      	str	r3, [r7, #36]	; 0x24
	 // Init lspb params
	 lspb->dir= dir;
 8007652:	69fb      	ldr	r3, [r7, #28]
 8007654:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8007658:	701a      	strb	r2, [r3, #0]
	 lspb->s0 = 0;
 800765a:	69fa      	ldr	r2, [r7, #28]
 800765c:	f04f 0300 	mov.w	r3, #0
 8007660:	f04f 0400 	mov.w	r4, #0
 8007664:	e9c2 3402 	strd	r3, r4, [r2, #8]
	 lspb->s1 = total_s;
 8007668:	69fa      	ldr	r2, [r7, #28]
 800766a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800766e:	e9c2 3404 	strd	r3, r4, [r2, #16]
	 lspb->Ta = ta;
 8007672:	69fa      	ldr	r2, [r7, #28]
 8007674:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8007678:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	 lspb->Td = td;
 800767c:	69fa      	ldr	r2, [r7, #28]
 800767e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8007682:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	 lspb->Tf = tf;
 8007686:	69fa      	ldr	r2, [r7, #28]
 8007688:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800768c:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	 lspb->a_design = a_design;
 8007690:	69fa      	ldr	r2, [r7, #28]
 8007692:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8007696:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	 lspb->v_design = v_design;
 800769a:	69fa      	ldr	r2, [r7, #28]
 800769c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80076a0:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	 lspb->v_lim = v_design;
 80076a4:	69fa      	ldr	r2, [r7, #28]
 80076a6:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80076aa:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	 lspb->v0 = 0;
 80076ae:	69fa      	ldr	r2, [r7, #28]
 80076b0:	f04f 0300 	mov.w	r3, #0
 80076b4:	f04f 0400 	mov.w	r4, #0
 80076b8:	e9c2 3406 	strd	r3, r4, [r2, #24]
	 lspb->v1 = 0;
 80076bc:	69fa      	ldr	r2, [r7, #28]
 80076be:	f04f 0300 	mov.w	r3, #0
 80076c2:	f04f 0400 	mov.w	r4, #0
 80076c6:	e9c2 3408 	strd	r3, r4, [r2, #32]
	 lspb->num_of_sampling = no_sample;
 80076ca:	69fb      	ldr	r3, [r7, #28]
 80076cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076ce:	659a      	str	r2, [r3, #88]	; 0x58
	 lspb->total_s = lspb->s1 - lspb->s0;
 80076d0:	69fb      	ldr	r3, [r7, #28]
 80076d2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80076d6:	69fb      	ldr	r3, [r7, #28]
 80076d8:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80076dc:	461a      	mov	r2, r3
 80076de:	4623      	mov	r3, r4
 80076e0:	f7f8 fdd2 	bl	8000288 <__aeabi_dsub>
 80076e4:	4603      	mov	r3, r0
 80076e6:	460c      	mov	r4, r1
 80076e8:	69fa      	ldr	r2, [r7, #28]
 80076ea:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

	 return SCARA_STATUS_OK;
 80076ee:	2300      	movs	r3, #0
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3758      	adds	r7, #88	; 0x58
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bdb0      	pop	{r4, r5, r7, pc}
 80076f8:	40000000 	.word	0x40000000
 80076fc:	3f847ae1 	.word	0x3f847ae1
 8007700:	3fe00000 	.word	0x3fe00000
 8007704:	3ff00000 	.word	0x3ff00000
 8007708:	9999999a 	.word	0x9999999a
 800770c:	3fe99999 	.word	0x3fe99999

08007710 <scaraInitLSPB>:
SCARA_StatusTypeDef	scaraInitLSPB		(Trajectory_LSPB_TypeDef *lspb,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double a_factor) {
 8007710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007714:	b0ad      	sub	sp, #180	; 0xb4
 8007716:	af00      	add	r7, sp, #0
 8007718:	62f8      	str	r0, [r7, #44]	; 0x2c
 800771a:	460b      	mov	r3, r1
 800771c:	ed87 0b08 	vstr	d0, [r7, #32]
 8007720:	ed87 1b06 	vstr	d1, [r7, #24]
 8007724:	ed87 2b04 	vstr	d2, [r7, #16]
 8007728:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800772c:	4613      	mov	r3, r2
 800772e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	 double v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	 uint32_t	no_sample;
	 int8_t	dir;

	 if ( TRAJECTORY_3D == target) {
 8007732:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007736:	2b04      	cmp	r3, #4
 8007738:	d118      	bne.n	800776c <scaraInitLSPB+0x5c>
		 v_design = V_DESIGN_3D*v_factor;
 800773a:	f20f 7368 	addw	r3, pc, #1896	; 0x768
 800773e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007742:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007746:	f7f8 ff57 	bl	80005f8 <__aeabi_dmul>
 800774a:	4603      	mov	r3, r0
 800774c:	460c      	mov	r4, r1
 800774e:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_3D*a_factor;
 8007752:	f20f 7350 	addw	r3, pc, #1872	; 0x750
 8007756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800775a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800775e:	f7f8 ff4b 	bl	80005f8 <__aeabi_dmul>
 8007762:	4603      	mov	r3, r0
 8007764:	460c      	mov	r4, r1
 8007766:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 800776a:	e092      	b.n	8007892 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_ROLL == target) {
 800776c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007770:	2b05      	cmp	r3, #5
 8007772:	d118      	bne.n	80077a6 <scaraInitLSPB+0x96>
		 v_design = V_DESIGN_ROLL*v_factor;
 8007774:	f20f 7334 	addw	r3, pc, #1844	; 0x734
 8007778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800777c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007780:	f7f8 ff3a 	bl	80005f8 <__aeabi_dmul>
 8007784:	4603      	mov	r3, r0
 8007786:	460c      	mov	r4, r1
 8007788:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_ROLL*a_factor;
 800778c:	f20f 731c 	addw	r3, pc, #1820	; 0x71c
 8007790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007794:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007798:	f7f8 ff2e 	bl	80005f8 <__aeabi_dmul>
 800779c:	4603      	mov	r3, r0
 800779e:	460c      	mov	r4, r1
 80077a0:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 80077a4:	e075      	b.n	8007892 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J0 == target) {
 80077a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d118      	bne.n	80077e0 <scaraInitLSPB+0xd0>
		 v_design = V_DESIGN_J0*v_factor;
 80077ae:	f20f 63fc 	addw	r3, pc, #1788	; 0x6fc
 80077b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80077ba:	f7f8 ff1d 	bl	80005f8 <__aeabi_dmul>
 80077be:	4603      	mov	r3, r0
 80077c0:	460c      	mov	r4, r1
 80077c2:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J0*a_factor;
 80077c6:	f20f 63e4 	addw	r3, pc, #1764	; 0x6e4
 80077ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80077d2:	f7f8 ff11 	bl	80005f8 <__aeabi_dmul>
 80077d6:	4603      	mov	r3, r0
 80077d8:	460c      	mov	r4, r1
 80077da:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 80077de:	e058      	b.n	8007892 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J1 == target) {
 80077e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d118      	bne.n	800781a <scaraInitLSPB+0x10a>
		 v_design = V_DESIGN_J1*v_factor;
 80077e8:	f20f 63c0 	addw	r3, pc, #1728	; 0x6c0
 80077ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80077f4:	f7f8 ff00 	bl	80005f8 <__aeabi_dmul>
 80077f8:	4603      	mov	r3, r0
 80077fa:	460c      	mov	r4, r1
 80077fc:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J1*a_factor;
 8007800:	f20f 63a8 	addw	r3, pc, #1704	; 0x6a8
 8007804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007808:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800780c:	f7f8 fef4 	bl	80005f8 <__aeabi_dmul>
 8007810:	4603      	mov	r3, r0
 8007812:	460c      	mov	r4, r1
 8007814:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 8007818:	e03b      	b.n	8007892 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J2 == target) {
 800781a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800781e:	2b02      	cmp	r3, #2
 8007820:	d118      	bne.n	8007854 <scaraInitLSPB+0x144>
		 v_design = V_DESIGN_J2*v_factor;
 8007822:	f20f 6380 	addw	r3, pc, #1664	; 0x680
 8007826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800782e:	f7f8 fee3 	bl	80005f8 <__aeabi_dmul>
 8007832:	4603      	mov	r3, r0
 8007834:	460c      	mov	r4, r1
 8007836:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J2*a_factor;
 800783a:	f20f 6368 	addw	r3, pc, #1640	; 0x668
 800783e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007842:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007846:	f7f8 fed7 	bl	80005f8 <__aeabi_dmul>
 800784a:	4603      	mov	r3, r0
 800784c:	460c      	mov	r4, r1
 800784e:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 8007852:	e01e      	b.n	8007892 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J3 == target) {
 8007854:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007858:	2b03      	cmp	r3, #3
 800785a:	d118      	bne.n	800788e <scaraInitLSPB+0x17e>
		 v_design = V_DESIGN_J3*v_factor;
 800785c:	f20f 6354 	addw	r3, pc, #1620	; 0x654
 8007860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007864:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007868:	f7f8 fec6 	bl	80005f8 <__aeabi_dmul>
 800786c:	4603      	mov	r3, r0
 800786e:	460c      	mov	r4, r1
 8007870:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J3*a_factor;
 8007874:	f20f 633c 	addw	r3, pc, #1596	; 0x63c
 8007878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800787c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007880:	f7f8 feba 	bl	80005f8 <__aeabi_dmul>
 8007884:	4603      	mov	r3, r0
 8007886:	460c      	mov	r4, r1
 8007888:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 800788c:	e001      	b.n	8007892 <scaraInitLSPB+0x182>
	 } else {
		 return SCARA_STATUS_ERROR_PARA;
 800788e:	2306      	movs	r3, #6
 8007890:	e2fa      	b.n	8007e88 <scaraInitLSPB+0x778>
	 }

	 q0 = 0;
 8007892:	f04f 0300 	mov.w	r3, #0
 8007896:	f04f 0400 	mov.w	r4, #0
 800789a:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	 q1 = total_s;
 800789e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80078a2:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
	 v0 = 0;
 80078a6:	f04f 0300 	mov.w	r3, #0
 80078aa:	f04f 0400 	mov.w	r4, #0
 80078ae:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	 v1 = 0;
 80078b2:	f04f 0300 	mov.w	r3, #0
 80078b6:	f04f 0400 	mov.w	r4, #0
 80078ba:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50

	 if ( q0 <= q1) {
 80078be:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80078c2:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80078c6:	f7f9 f913 	bl	8000af0 <__aeabi_dcmple>
 80078ca:	4603      	mov	r3, r0
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d003      	beq.n	80078d8 <scaraInitLSPB+0x1c8>
		 dir = 1;
 80078d0:	2301      	movs	r3, #1
 80078d2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80078d6:	e00c      	b.n	80078f2 <scaraInitLSPB+0x1e2>
	 } else {
		 dir = -1;
 80078d8:	23ff      	movs	r3, #255	; 0xff
 80078da:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		 q1 = -q1;
 80078de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80078e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80078e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80078ea:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80078ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	 }

	 if (DUTY_MODE_INIT_QVT == modeinit) {
 80078f2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	f040 809e 	bne.w	8007a38 <scaraInitLSPB+0x328>
		 double v_lower, v_upper, tc_upper, a_upper;
		 tf = lspb->Tf;
 80078fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078fe:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8007902:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		 // Avoid division by 0
		 if (tf > 0.001) {
 8007906:	f20f 53b4 	addw	r3, pc, #1460	; 0x5b4
 800790a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800790e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8007912:	f7f9 f901 	bl	8000b18 <__aeabi_dcmpgt>
 8007916:	4603      	mov	r3, r0
 8007918:	2b00      	cmp	r3, #0
 800791a:	f000 8081 	beq.w	8007a20 <scaraInitLSPB+0x310>
			 v_lower 	= (q1 - q0) / tf;
 800791e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007922:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8007926:	f7f8 fcaf 	bl	8000288 <__aeabi_dsub>
 800792a:	4603      	mov	r3, r0
 800792c:	460c      	mov	r4, r1
 800792e:	4618      	mov	r0, r3
 8007930:	4621      	mov	r1, r4
 8007932:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8007936:	f7f8 ff89 	bl	800084c <__aeabi_ddiv>
 800793a:	4603      	mov	r3, r0
 800793c:	460c      	mov	r4, r1
 800793e:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			 v_upper 	= 2*(q1 - q0) / tf;
 8007942:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007946:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800794a:	f7f8 fc9d 	bl	8000288 <__aeabi_dsub>
 800794e:	4603      	mov	r3, r0
 8007950:	460c      	mov	r4, r1
 8007952:	4618      	mov	r0, r3
 8007954:	4621      	mov	r1, r4
 8007956:	4602      	mov	r2, r0
 8007958:	460b      	mov	r3, r1
 800795a:	f7f8 fc97 	bl	800028c <__adddf3>
 800795e:	4603      	mov	r3, r0
 8007960:	460c      	mov	r4, r1
 8007962:	4618      	mov	r0, r3
 8007964:	4621      	mov	r1, r4
 8007966:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800796a:	f7f8 ff6f 	bl	800084c <__aeabi_ddiv>
 800796e:	4603      	mov	r3, r0
 8007970:	460c      	mov	r4, r1
 8007972:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

			 if ( v_design < v_lower) {
 8007976:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800797a:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800797e:	f7f9 f8ad 	bl	8000adc <__aeabi_dcmplt>
 8007982:	4603      	mov	r3, r0
 8007984:	2b00      	cmp	r3, #0
 8007986:	d001      	beq.n	800798c <scaraInitLSPB+0x27c>
				 return SCARA_STATUS_ERROR_OVER_VELOC;
 8007988:	2309      	movs	r3, #9
 800798a:	e27d      	b.n	8007e88 <scaraInitLSPB+0x778>
			 } else {
				 if ( v_upper <= v_design) {
 800798c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8007990:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007994:	f7f9 f8ac 	bl	8000af0 <__aeabi_dcmple>
 8007998:	4603      	mov	r3, r0
 800799a:	2b00      	cmp	r3, #0
 800799c:	d003      	beq.n	80079a6 <scaraInitLSPB+0x296>
					 v_design = v_upper;
 800799e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80079a2:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
				 }
				 // Avoid division by 0
				 if (v_design > 0.0000001) {
 80079a6:	f20f 531c 	addw	r3, pc, #1308	; 0x51c
 80079aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ae:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80079b2:	f7f9 f8b1 	bl	8000b18 <__aeabi_dcmpgt>
 80079b6:	4603      	mov	r3, r0
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d01a      	beq.n	80079f2 <scaraInitLSPB+0x2e2>
					 tc_upper	= tf - (q1 - q0)/v_design;
 80079bc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80079c0:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80079c4:	f7f8 fc60 	bl	8000288 <__aeabi_dsub>
 80079c8:	4603      	mov	r3, r0
 80079ca:	460c      	mov	r4, r1
 80079cc:	4618      	mov	r0, r3
 80079ce:	4621      	mov	r1, r4
 80079d0:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80079d4:	f7f8 ff3a 	bl	800084c <__aeabi_ddiv>
 80079d8:	4603      	mov	r3, r0
 80079da:	460c      	mov	r4, r1
 80079dc:	461a      	mov	r2, r3
 80079de:	4623      	mov	r3, r4
 80079e0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80079e4:	f7f8 fc50 	bl	8000288 <__aeabi_dsub>
 80079e8:	4603      	mov	r3, r0
 80079ea:	460c      	mov	r4, r1
 80079ec:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
 80079f0:	e00b      	b.n	8007a0a <scaraInitLSPB+0x2fa>
				 } else {
					 tc_upper = tf / 2;
 80079f2:	f04f 0200 	mov.w	r2, #0
 80079f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80079fa:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80079fe:	f7f8 ff25 	bl	800084c <__aeabi_ddiv>
 8007a02:	4603      	mov	r3, r0
 8007a04:	460c      	mov	r4, r1
 8007a06:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
				 }
				 a_upper	= v_design/tc_upper;
 8007a0a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007a0e:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007a12:	f7f8 ff1b 	bl	800084c <__aeabi_ddiv>
 8007a16:	4603      	mov	r3, r0
 8007a18:	460c      	mov	r4, r1
 8007a1a:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
 8007a1e:	e00b      	b.n	8007a38 <scaraInitLSPB+0x328>
				//  } else {
				// 	 a_design = a_upper;
				//  }
			 }
		 } else {
			 v_design = 0;
 8007a20:	f04f 0300 	mov.w	r3, #0
 8007a24:	f04f 0400 	mov.w	r4, #0
 8007a28:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
			 a_design = 0;
 8007a2c:	f04f 0300 	mov.w	r3, #0
 8007a30:	f04f 0400 	mov.w	r4, #0
 8007a34:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
		 }
	}

	 // Check condition trapezoidal ---> triangle
	 // Avoid division by 0
	 if (a_design > 0.0000001 && v_design > 0.0000001) {
 8007a38:	f20f 4388 	addw	r3, pc, #1160	; 0x488
 8007a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a40:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8007a44:	f7f9 f868 	bl	8000b18 <__aeabi_dcmpgt>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	f000 819c 	beq.w	8007d88 <scaraInitLSPB+0x678>
 8007a50:	f20f 4370 	addw	r3, pc, #1136	; 0x470
 8007a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a58:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007a5c:	f7f9 f85c 	bl	8000b18 <__aeabi_dcmpgt>
 8007a60:	4603      	mov	r3, r0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	f000 8190 	beq.w	8007d88 <scaraInitLSPB+0x678>
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 8007a68:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007a6c:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8007a70:	f7f8 fc0a 	bl	8000288 <__aeabi_dsub>
 8007a74:	4603      	mov	r3, r0
 8007a76:	460c      	mov	r4, r1
 8007a78:	461d      	mov	r5, r3
 8007a7a:	f024 4600 	bic.w	r6, r4, #2147483648	; 0x80000000
 8007a7e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8007a82:	4628      	mov	r0, r5
 8007a84:	4631      	mov	r1, r6
 8007a86:	f7f8 fdb7 	bl	80005f8 <__aeabi_dmul>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	460c      	mov	r4, r1
 8007a8e:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8007a92:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8007a96:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007a9a:	f7f8 fdad 	bl	80005f8 <__aeabi_dmul>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	460c      	mov	r4, r1
 8007aa2:	e9c7 3400 	strd	r3, r4, [r7]
 8007aa6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007aaa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007aae:	f7f8 fda3 	bl	80005f8 <__aeabi_dmul>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	460c      	mov	r4, r1
 8007ab6:	461d      	mov	r5, r3
 8007ab8:	4626      	mov	r6, r4
 8007aba:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007abe:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007ac2:	f7f8 fd99 	bl	80005f8 <__aeabi_dmul>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	460c      	mov	r4, r1
 8007aca:	461a      	mov	r2, r3
 8007acc:	4623      	mov	r3, r4
 8007ace:	4628      	mov	r0, r5
 8007ad0:	4631      	mov	r1, r6
 8007ad2:	f7f8 fbdb 	bl	800028c <__adddf3>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	460c      	mov	r4, r1
 8007ada:	4618      	mov	r0, r3
 8007adc:	4621      	mov	r1, r4
 8007ade:	f04f 0200 	mov.w	r2, #0
 8007ae2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007ae6:	f7f8 feb1 	bl	800084c <__aeabi_ddiv>
 8007aea:	4603      	mov	r3, r0
 8007aec:	460c      	mov	r4, r1
 8007aee:	461a      	mov	r2, r3
 8007af0:	4623      	mov	r3, r4
 8007af2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007af6:	f7f8 fbc7 	bl	8000288 <__aeabi_dsub>
 8007afa:	4603      	mov	r3, r0
 8007afc:	460c      	mov	r4, r1
 8007afe:	461a      	mov	r2, r3
 8007b00:	4623      	mov	r3, r4
 8007b02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007b06:	f7f8 fff3 	bl	8000af0 <__aeabi_dcmple>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d075      	beq.n	8007bfc <scaraInitLSPB+0x4ec>
			 v_lim 	= sqrt(fabs(q1 - q0)*a_design + (v0*v0 + v1*v1)/2);
 8007b10:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007b14:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8007b18:	f7f8 fbb6 	bl	8000288 <__aeabi_dsub>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	460c      	mov	r4, r1
 8007b20:	469a      	mov	sl, r3
 8007b22:	f024 4b00 	bic.w	fp, r4, #2147483648	; 0x80000000
 8007b26:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8007b2a:	4650      	mov	r0, sl
 8007b2c:	4659      	mov	r1, fp
 8007b2e:	f7f8 fd63 	bl	80005f8 <__aeabi_dmul>
 8007b32:	4603      	mov	r3, r0
 8007b34:	460c      	mov	r4, r1
 8007b36:	4625      	mov	r5, r4
 8007b38:	461c      	mov	r4, r3
 8007b3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007b3e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007b42:	f7f8 fd59 	bl	80005f8 <__aeabi_dmul>
 8007b46:	4602      	mov	r2, r0
 8007b48:	460b      	mov	r3, r1
 8007b4a:	4690      	mov	r8, r2
 8007b4c:	4699      	mov	r9, r3
 8007b4e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007b52:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007b56:	f7f8 fd4f 	bl	80005f8 <__aeabi_dmul>
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	460b      	mov	r3, r1
 8007b5e:	4640      	mov	r0, r8
 8007b60:	4649      	mov	r1, r9
 8007b62:	f7f8 fb93 	bl	800028c <__adddf3>
 8007b66:	4602      	mov	r2, r0
 8007b68:	460b      	mov	r3, r1
 8007b6a:	4610      	mov	r0, r2
 8007b6c:	4619      	mov	r1, r3
 8007b6e:	f04f 0200 	mov.w	r2, #0
 8007b72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007b76:	f7f8 fe69 	bl	800084c <__aeabi_ddiv>
 8007b7a:	4602      	mov	r2, r0
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	4620      	mov	r0, r4
 8007b80:	4629      	mov	r1, r5
 8007b82:	f7f8 fb83 	bl	800028c <__adddf3>
 8007b86:	4603      	mov	r3, r0
 8007b88:	460c      	mov	r4, r1
 8007b8a:	ec44 3b17 	vmov	d7, r3, r4
 8007b8e:	eeb0 0a47 	vmov.f32	s0, s14
 8007b92:	eef0 0a67 	vmov.f32	s1, s15
 8007b96:	f012 f831 	bl	8019bfc <sqrt>
 8007b9a:	ed87 0b26 	vstr	d0, [r7, #152]	; 0x98
			 ta		= (v_lim - v0)/a_design;
 8007b9e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007ba2:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007ba6:	f7f8 fb6f 	bl	8000288 <__aeabi_dsub>
 8007baa:	4603      	mov	r3, r0
 8007bac:	460c      	mov	r4, r1
 8007bae:	4618      	mov	r0, r3
 8007bb0:	4621      	mov	r1, r4
 8007bb2:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8007bb6:	f7f8 fe49 	bl	800084c <__aeabi_ddiv>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	460c      	mov	r4, r1
 8007bbe:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			 td		= (v_lim - v1)/a_design;
 8007bc2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007bc6:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007bca:	f7f8 fb5d 	bl	8000288 <__aeabi_dsub>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	460c      	mov	r4, r1
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	4621      	mov	r1, r4
 8007bd6:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8007bda:	f7f8 fe37 	bl	800084c <__aeabi_ddiv>
 8007bde:	4603      	mov	r3, r0
 8007be0:	460c      	mov	r4, r1
 8007be2:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
			 tf		= ta + td;
 8007be6:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8007bea:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8007bee:	f7f8 fb4d 	bl	800028c <__adddf3>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	460c      	mov	r4, r1
 8007bf6:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 8007bfa:	e0e3      	b.n	8007dc4 <scaraInitLSPB+0x6b4>
		 } else {
			 v_lim	= v_design;
 8007bfc:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8007c00:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
			 ta		= (v_lim - v0)/a_design;
 8007c04:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007c08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007c0c:	f7f8 fb3c 	bl	8000288 <__aeabi_dsub>
 8007c10:	4603      	mov	r3, r0
 8007c12:	460c      	mov	r4, r1
 8007c14:	4618      	mov	r0, r3
 8007c16:	4621      	mov	r1, r4
 8007c18:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8007c1c:	f7f8 fe16 	bl	800084c <__aeabi_ddiv>
 8007c20:	4603      	mov	r3, r0
 8007c22:	460c      	mov	r4, r1
 8007c24:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			 td		= (v_lim - v1)/a_design;
 8007c28:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007c2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007c30:	f7f8 fb2a 	bl	8000288 <__aeabi_dsub>
 8007c34:	4603      	mov	r3, r0
 8007c36:	460c      	mov	r4, r1
 8007c38:	4618      	mov	r0, r3
 8007c3a:	4621      	mov	r1, r4
 8007c3c:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8007c40:	f7f8 fe04 	bl	800084c <__aeabi_ddiv>
 8007c44:	4603      	mov	r3, r0
 8007c46:	460c      	mov	r4, r1
 8007c48:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
			 tf		= fabs(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 8007c4c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8007c50:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007c54:	f7f8 fb18 	bl	8000288 <__aeabi_dsub>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	460c      	mov	r4, r1
 8007c5c:	4698      	mov	r8, r3
 8007c5e:	f024 4900 	bic.w	r9, r4, #2147483648	; 0x80000000
 8007c62:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8007c66:	4640      	mov	r0, r8
 8007c68:	4649      	mov	r1, r9
 8007c6a:	f7f8 fdef 	bl	800084c <__aeabi_ddiv>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	460c      	mov	r4, r1
 8007c72:	4625      	mov	r5, r4
 8007c74:	461c      	mov	r4, r3
 8007c76:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8007c7a:	4602      	mov	r2, r0
 8007c7c:	460b      	mov	r3, r1
 8007c7e:	f7f8 fb05 	bl	800028c <__adddf3>
 8007c82:	4602      	mov	r2, r0
 8007c84:	460b      	mov	r3, r1
 8007c86:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007c8a:	f7f8 fddf 	bl	800084c <__aeabi_ddiv>
 8007c8e:	4602      	mov	r2, r0
 8007c90:	460b      	mov	r3, r1
 8007c92:	4690      	mov	r8, r2
 8007c94:	4699      	mov	r9, r3
 8007c96:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8007c9a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007c9e:	f7f8 fdd5 	bl	800084c <__aeabi_ddiv>
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	f04f 0000 	mov.w	r0, #0
 8007caa:	497d      	ldr	r1, [pc, #500]	; (8007ea0 <scaraInitLSPB+0x790>)
 8007cac:	f7f8 faec 	bl	8000288 <__aeabi_dsub>
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	4640      	mov	r0, r8
 8007cb6:	4649      	mov	r1, r9
 8007cb8:	f7f8 fc9e 	bl	80005f8 <__aeabi_dmul>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	460b      	mov	r3, r1
 8007cc0:	4690      	mov	r8, r2
 8007cc2:	4699      	mov	r9, r3
 8007cc4:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8007cc8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007ccc:	f7f8 fdbe 	bl	800084c <__aeabi_ddiv>
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	460b      	mov	r3, r1
 8007cd4:	f04f 0000 	mov.w	r0, #0
 8007cd8:	4971      	ldr	r1, [pc, #452]	; (8007ea0 <scaraInitLSPB+0x790>)
 8007cda:	f7f8 fad5 	bl	8000288 <__aeabi_dsub>
 8007cde:	4602      	mov	r2, r0
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	4640      	mov	r0, r8
 8007ce4:	4649      	mov	r1, r9
 8007ce6:	f7f8 fc87 	bl	80005f8 <__aeabi_dmul>
 8007cea:	4602      	mov	r2, r0
 8007cec:	460b      	mov	r3, r1
 8007cee:	4620      	mov	r0, r4
 8007cf0:	4629      	mov	r1, r5
 8007cf2:	f7f8 facb 	bl	800028c <__adddf3>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	460c      	mov	r4, r1
 8007cfa:	4625      	mov	r5, r4
 8007cfc:	461c      	mov	r4, r3
							+ v_lim/(2*a_design)*(1 - v1/v_lim)*(1 - v1/v_lim);
 8007cfe:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8007d02:	4602      	mov	r2, r0
 8007d04:	460b      	mov	r3, r1
 8007d06:	f7f8 fac1 	bl	800028c <__adddf3>
 8007d0a:	4602      	mov	r2, r0
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007d12:	f7f8 fd9b 	bl	800084c <__aeabi_ddiv>
 8007d16:	4602      	mov	r2, r0
 8007d18:	460b      	mov	r3, r1
 8007d1a:	4690      	mov	r8, r2
 8007d1c:	4699      	mov	r9, r3
 8007d1e:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8007d22:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007d26:	f7f8 fd91 	bl	800084c <__aeabi_ddiv>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	f04f 0000 	mov.w	r0, #0
 8007d32:	495b      	ldr	r1, [pc, #364]	; (8007ea0 <scaraInitLSPB+0x790>)
 8007d34:	f7f8 faa8 	bl	8000288 <__aeabi_dsub>
 8007d38:	4602      	mov	r2, r0
 8007d3a:	460b      	mov	r3, r1
 8007d3c:	4640      	mov	r0, r8
 8007d3e:	4649      	mov	r1, r9
 8007d40:	f7f8 fc5a 	bl	80005f8 <__aeabi_dmul>
 8007d44:	4602      	mov	r2, r0
 8007d46:	460b      	mov	r3, r1
 8007d48:	4690      	mov	r8, r2
 8007d4a:	4699      	mov	r9, r3
 8007d4c:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8007d50:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007d54:	f7f8 fd7a 	bl	800084c <__aeabi_ddiv>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	460b      	mov	r3, r1
 8007d5c:	f04f 0000 	mov.w	r0, #0
 8007d60:	494f      	ldr	r1, [pc, #316]	; (8007ea0 <scaraInitLSPB+0x790>)
 8007d62:	f7f8 fa91 	bl	8000288 <__aeabi_dsub>
 8007d66:	4602      	mov	r2, r0
 8007d68:	460b      	mov	r3, r1
 8007d6a:	4640      	mov	r0, r8
 8007d6c:	4649      	mov	r1, r9
 8007d6e:	f7f8 fc43 	bl	80005f8 <__aeabi_dmul>
 8007d72:	4602      	mov	r2, r0
 8007d74:	460b      	mov	r3, r1
			 tf		= fabs(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 8007d76:	4620      	mov	r0, r4
 8007d78:	4629      	mov	r1, r5
 8007d7a:	f7f8 fa87 	bl	800028c <__adddf3>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	460c      	mov	r4, r1
 8007d82:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 8007d86:	e01d      	b.n	8007dc4 <scaraInitLSPB+0x6b4>
		 }
	 } else {
		 v_lim	= 0;
 8007d88:	f04f 0300 	mov.w	r3, #0
 8007d8c:	f04f 0400 	mov.w	r4, #0
 8007d90:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		 ta = tf/2;
 8007d94:	f04f 0200 	mov.w	r2, #0
 8007d98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007d9c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8007da0:	f7f8 fd54 	bl	800084c <__aeabi_ddiv>
 8007da4:	4603      	mov	r3, r0
 8007da6:	460c      	mov	r4, r1
 8007da8:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
		 td = tf/2;
 8007dac:	f04f 0200 	mov.w	r2, #0
 8007db0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007db4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8007db8:	f7f8 fd48 	bl	800084c <__aeabi_ddiv>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	460c      	mov	r4, r1
 8007dc0:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	 }

	 no_sample = ceilf(tf / T_SAMPLING); // ceiling
 8007dc4:	a334      	add	r3, pc, #208	; (adr r3, 8007e98 <scaraInitLSPB+0x788>)
 8007dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dca:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8007dce:	f7f8 fd3d 	bl	800084c <__aeabi_ddiv>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	460c      	mov	r4, r1
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	4621      	mov	r1, r4
 8007dda:	f7f8 ff05 	bl	8000be8 <__aeabi_d2f>
 8007dde:	4603      	mov	r3, r0
 8007de0:	ee00 3a10 	vmov	s0, r3
 8007de4:	f011 fec8 	bl	8019b78 <ceilf>
 8007de8:	eef0 7a40 	vmov.f32	s15, s0
 8007dec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007df0:	ee17 3a90 	vmov	r3, s15
 8007df4:	637b      	str	r3, [r7, #52]	; 0x34
	 // Init lspb params
	 lspb->dir= dir;
 8007df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df8:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8007dfc:	701a      	strb	r2, [r3, #0]
	 lspb->s0 = q0;
 8007dfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e00:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8007e04:	e9c2 3402 	strd	r3, r4, [r2, #8]
	 lspb->s1 = q1;
 8007e08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e0a:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8007e0e:	e9c2 3404 	strd	r3, r4, [r2, #16]
	 lspb->Ta = ta;
 8007e12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e14:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8007e18:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	 lspb->Td = td;
 8007e1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e1e:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8007e22:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	 lspb->Tf = tf;
 8007e26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e28:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8007e2c:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	 lspb->a_design = a_design;
 8007e30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e32:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8007e36:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	 lspb->v_design = v_design;
 8007e3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e3c:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8007e40:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	 lspb->v_lim = v_lim;
 8007e44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e46:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8007e4a:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	 lspb->v0 = v0;
 8007e4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e50:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8007e54:	e9c2 3406 	strd	r3, r4, [r2, #24]
	 lspb->v1 = v1;
 8007e58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e5a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8007e5e:	e9c2 3408 	strd	r3, r4, [r2, #32]
	 lspb->num_of_sampling = no_sample;
 8007e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e66:	659a      	str	r2, [r3, #88]	; 0x58
	 lspb->total_s = lspb->s1 - lspb->s0;
 8007e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e6a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8007e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e70:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8007e74:	461a      	mov	r2, r3
 8007e76:	4623      	mov	r3, r4
 8007e78:	f7f8 fa06 	bl	8000288 <__aeabi_dsub>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	460c      	mov	r4, r1
 8007e80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e82:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

	 return SCARA_STATUS_OK;
 8007e86:	2300      	movs	r3, #0
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	37b4      	adds	r7, #180	; 0xb4
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e92:	bf00      	nop
 8007e94:	f3af 8000 	nop.w
 8007e98:	40000000 	.word	0x40000000
 8007e9c:	3f847ae1 	.word	0x3f847ae1
 8007ea0:	3ff00000 	.word	0x3ff00000
 8007ea4:	00000000 	.word	0x00000000
 8007ea8:	405c2000 	.word	0x405c2000
 8007eac:	14000000 	.word	0x14000000
 8007eb0:	4000f6f0 	.word	0x4000f6f0
 8007eb4:	6b259425 	.word	0x6b259425
 8007eb8:	40069b91 	.word	0x40069b91
 8007ebc:	d2f1a9fc 	.word	0xd2f1a9fc
 8007ec0:	3f50624d 	.word	0x3f50624d
 8007ec4:	9abcaf48 	.word	0x9abcaf48
 8007ec8:	3e7ad7f2 	.word	0x3e7ad7f2
 8007ecc:	00000000 	.word	0x00000000

08007ed0 <scaraInitScurve>:
SCARA_StatusTypeDef	scaraInitScurve		(Trajectory_Scurve_TypeDef *scurve,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double a_factor) {
 8007ed0:	b5b0      	push	{r4, r5, r7, lr}
 8007ed2:	b0ba      	sub	sp, #232	; 0xe8
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	61f8      	str	r0, [r7, #28]
 8007ed8:	460b      	mov	r3, r1
 8007eda:	ed87 0b04 	vstr	d0, [r7, #16]
 8007ede:	ed87 1b02 	vstr	d1, [r7, #8]
 8007ee2:	ed87 2b00 	vstr	d2, [r7]
 8007ee6:	76fb      	strb	r3, [r7, #27]
 8007ee8:	4613      	mov	r3, r2
 8007eea:	76bb      	strb	r3, [r7, #26]
	 double v_design, a_design, q0, q1, v0, v1, v_lim, j_max, tm, tc, tf, dir;
	 double v_1, s_1, v_2, s_2, v_3, s_3, v_4, s_4;
	 uint32_t	 no_sample;
	 uint8_t	 no_phases;

	 if ( TRAJECTORY_3D == target) {
 8007eec:	7efb      	ldrb	r3, [r7, #27]
 8007eee:	2b04      	cmp	r3, #4
 8007ef0:	d118      	bne.n	8007f24 <scaraInitScurve+0x54>
		 v_design = V_DESIGN_3D*v_factor;
 8007ef2:	f20f 4320 	addw	r3, pc, #1056	; 0x420
 8007ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007efa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007efe:	f7f8 fb7b 	bl	80005f8 <__aeabi_dmul>
 8007f02:	4603      	mov	r3, r0
 8007f04:	460c      	mov	r4, r1
 8007f06:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_3D*a_factor;
 8007f0a:	f20f 4308 	addw	r3, pc, #1032	; 0x408
 8007f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f16:	f7f8 fb6f 	bl	80005f8 <__aeabi_dmul>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	460c      	mov	r4, r1
 8007f1e:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8007f22:	e083      	b.n	800802c <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_ROLL == target) {
 8007f24:	7efb      	ldrb	r3, [r7, #27]
 8007f26:	2b05      	cmp	r3, #5
 8007f28:	d116      	bne.n	8007f58 <scaraInitScurve+0x88>
		 v_design = V_DESIGN_ROLL*v_factor;
 8007f2a:	a3fc      	add	r3, pc, #1008	; (adr r3, 800831c <scaraInitScurve+0x44c>)
 8007f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f30:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007f34:	f7f8 fb60 	bl	80005f8 <__aeabi_dmul>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	460c      	mov	r4, r1
 8007f3c:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_ROLL*a_factor;
 8007f40:	a3f6      	add	r3, pc, #984	; (adr r3, 800831c <scaraInitScurve+0x44c>)
 8007f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f46:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f4a:	f7f8 fb55 	bl	80005f8 <__aeabi_dmul>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	460c      	mov	r4, r1
 8007f52:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8007f56:	e069      	b.n	800802c <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_J0 == target) {
 8007f58:	7efb      	ldrb	r3, [r7, #27]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d116      	bne.n	8007f8c <scaraInitScurve+0xbc>
		 v_design = V_DESIGN_J0*v_factor;
 8007f5e:	a3ef      	add	r3, pc, #956	; (adr r3, 800831c <scaraInitScurve+0x44c>)
 8007f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f64:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007f68:	f7f8 fb46 	bl	80005f8 <__aeabi_dmul>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	460c      	mov	r4, r1
 8007f70:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J0*a_factor;
 8007f74:	a3e9      	add	r3, pc, #932	; (adr r3, 800831c <scaraInitScurve+0x44c>)
 8007f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f7a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f7e:	f7f8 fb3b 	bl	80005f8 <__aeabi_dmul>
 8007f82:	4603      	mov	r3, r0
 8007f84:	460c      	mov	r4, r1
 8007f86:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8007f8a:	e04f      	b.n	800802c <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_J1 == target) {
 8007f8c:	7efb      	ldrb	r3, [r7, #27]
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d116      	bne.n	8007fc0 <scaraInitScurve+0xf0>
		 v_design = V_DESIGN_J1*v_factor;
 8007f92:	a3e2      	add	r3, pc, #904	; (adr r3, 800831c <scaraInitScurve+0x44c>)
 8007f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f98:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007f9c:	f7f8 fb2c 	bl	80005f8 <__aeabi_dmul>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	460c      	mov	r4, r1
 8007fa4:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J1*a_factor;
 8007fa8:	a3dc      	add	r3, pc, #880	; (adr r3, 800831c <scaraInitScurve+0x44c>)
 8007faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fae:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007fb2:	f7f8 fb21 	bl	80005f8 <__aeabi_dmul>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	460c      	mov	r4, r1
 8007fba:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8007fbe:	e035      	b.n	800802c <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_J2 == target) {
 8007fc0:	7efb      	ldrb	r3, [r7, #27]
 8007fc2:	2b02      	cmp	r3, #2
 8007fc4:	d116      	bne.n	8007ff4 <scaraInitScurve+0x124>
		 v_design = V_DESIGN_J2*v_factor;
 8007fc6:	a3d3      	add	r3, pc, #844	; (adr r3, 8008314 <scaraInitScurve+0x444>)
 8007fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fcc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007fd0:	f7f8 fb12 	bl	80005f8 <__aeabi_dmul>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	460c      	mov	r4, r1
 8007fd8:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J2*a_factor;
 8007fdc:	a3cd      	add	r3, pc, #820	; (adr r3, 8008314 <scaraInitScurve+0x444>)
 8007fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007fe6:	f7f8 fb07 	bl	80005f8 <__aeabi_dmul>
 8007fea:	4603      	mov	r3, r0
 8007fec:	460c      	mov	r4, r1
 8007fee:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8007ff2:	e01b      	b.n	800802c <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_J3 == target) {
 8007ff4:	7efb      	ldrb	r3, [r7, #27]
 8007ff6:	2b03      	cmp	r3, #3
 8007ff8:	d116      	bne.n	8008028 <scaraInitScurve+0x158>
		 v_design = V_DESIGN_J3*v_factor;
 8007ffa:	a3ca      	add	r3, pc, #808	; (adr r3, 8008324 <scaraInitScurve+0x454>)
 8007ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008000:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008004:	f7f8 faf8 	bl	80005f8 <__aeabi_dmul>
 8008008:	4603      	mov	r3, r0
 800800a:	460c      	mov	r4, r1
 800800c:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J3*a_factor;
 8008010:	a3c4      	add	r3, pc, #784	; (adr r3, 8008324 <scaraInitScurve+0x454>)
 8008012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008016:	e9d7 0100 	ldrd	r0, r1, [r7]
 800801a:	f7f8 faed 	bl	80005f8 <__aeabi_dmul>
 800801e:	4603      	mov	r3, r0
 8008020:	460c      	mov	r4, r1
 8008022:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8008026:	e001      	b.n	800802c <scaraInitScurve+0x15c>
	 } else {
		 return SCARA_STATUS_ERROR_PARA;
 8008028:	2306      	movs	r3, #6
 800802a:	e2c8      	b.n	80085be <scaraInitScurve+0x6ee>
	 }

	 v0 = 0;
 800802c:	f04f 0300 	mov.w	r3, #0
 8008030:	f04f 0400 	mov.w	r4, #0
 8008034:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
	 v1 = 0;
 8008038:	f04f 0300 	mov.w	r3, #0
 800803c:	f04f 0400 	mov.w	r4, #0
 8008040:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	 q0 = 0;
 8008044:	f04f 0300 	mov.w	r3, #0
 8008048:	f04f 0400 	mov.w	r4, #0
 800804c:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	 q1 = total_s;
 8008050:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8008054:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0

	 if ( total_s < 0) {
 8008058:	f04f 0200 	mov.w	r2, #0
 800805c:	f04f 0300 	mov.w	r3, #0
 8008060:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008064:	f7f8 fd3a 	bl	8000adc <__aeabi_dcmplt>
 8008068:	4603      	mov	r3, r0
 800806a:	2b00      	cmp	r3, #0
 800806c:	d015      	beq.n	800809a <scaraInitScurve+0x1ca>
		 dir = -1;
 800806e:	f04f 0300 	mov.w	r3, #0
 8008072:	4ca5      	ldr	r4, [pc, #660]	; (8008308 <scaraInitScurve+0x438>)
 8008074:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
		 q1 = -q1;
 8008078:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800807c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008080:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008084:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008088:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		 total_s = -total_s;
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	613b      	str	r3, [r7, #16]
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008096:	617b      	str	r3, [r7, #20]
 8008098:	e004      	b.n	80080a4 <scaraInitScurve+0x1d4>
	 } else {
		 dir = 1;
 800809a:	f04f 0300 	mov.w	r3, #0
 800809e:	4c9b      	ldr	r4, [pc, #620]	; (800830c <scaraInitScurve+0x43c>)
 80080a0:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
	 }


	 if (DUTY_MODE_INIT_QVT == modeinit) {
 80080a4:	7ebb      	ldrb	r3, [r7, #26]
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	f040 8082 	bne.w	80081b0 <scaraInitScurve+0x2e0>
		 double t_upper, v_upper, a_upper;
		 tf = scurve->Tf;
 80080ac:	69fb      	ldr	r3, [r7, #28]
 80080ae:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 80080b2:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 // Avoid division by 0
		 if (tf > 0.001) {
 80080b6:	a390      	add	r3, pc, #576	; (adr r3, 80082f8 <scaraInitScurve+0x428>)
 80080b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080bc:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80080c0:	f7f8 fd2a 	bl	8000b18 <__aeabi_dcmpgt>
 80080c4:	4603      	mov	r3, r0
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d066      	beq.n	8008198 <scaraInitScurve+0x2c8>
			 // Assume 4 phase
			 t_upper = tf / 4;
 80080ca:	f04f 0200 	mov.w	r2, #0
 80080ce:	4b90      	ldr	r3, [pc, #576]	; (8008310 <scaraInitScurve+0x440>)
 80080d0:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80080d4:	f7f8 fbba 	bl	800084c <__aeabi_ddiv>
 80080d8:	4603      	mov	r3, r0
 80080da:	460c      	mov	r4, r1
 80080dc:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
			 v_upper = total_s / (2*t_upper);
 80080e0:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80080e4:	4602      	mov	r2, r0
 80080e6:	460b      	mov	r3, r1
 80080e8:	f7f8 f8d0 	bl	800028c <__adddf3>
 80080ec:	4603      	mov	r3, r0
 80080ee:	460c      	mov	r4, r1
 80080f0:	461a      	mov	r2, r3
 80080f2:	4623      	mov	r3, r4
 80080f4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80080f8:	f7f8 fba8 	bl	800084c <__aeabi_ddiv>
 80080fc:	4603      	mov	r3, r0
 80080fe:	460c      	mov	r4, r1
 8008100:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
			 // Check 4 phase --> 5 phase
			 if ( v_upper > v_design) {
 8008104:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8008108:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800810c:	f7f8 fd04 	bl	8000b18 <__aeabi_dcmpgt>
 8008110:	4603      	mov	r3, r0
 8008112:	2b00      	cmp	r3, #0
 8008114:	d022      	beq.n	800815c <scaraInitScurve+0x28c>
				 t_upper = tf/2 - total_s/(2*v_design);
 8008116:	f04f 0200 	mov.w	r2, #0
 800811a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800811e:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8008122:	f7f8 fb93 	bl	800084c <__aeabi_ddiv>
 8008126:	4603      	mov	r3, r0
 8008128:	460c      	mov	r4, r1
 800812a:	4625      	mov	r5, r4
 800812c:	461c      	mov	r4, r3
 800812e:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008132:	4602      	mov	r2, r0
 8008134:	460b      	mov	r3, r1
 8008136:	f7f8 f8a9 	bl	800028c <__adddf3>
 800813a:	4602      	mov	r2, r0
 800813c:	460b      	mov	r3, r1
 800813e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008142:	f7f8 fb83 	bl	800084c <__aeabi_ddiv>
 8008146:	4602      	mov	r2, r0
 8008148:	460b      	mov	r3, r1
 800814a:	4620      	mov	r0, r4
 800814c:	4629      	mov	r1, r5
 800814e:	f7f8 f89b 	bl	8000288 <__aeabi_dsub>
 8008152:	4603      	mov	r3, r0
 8008154:	460c      	mov	r4, r1
 8008156:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
 800815a:	e003      	b.n	8008164 <scaraInitScurve+0x294>
			 } else {
				 v_design = v_upper;
 800815c:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8008160:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
			 }
			 a_upper  = v_design / t_upper;
 8008164:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8008168:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800816c:	f7f8 fb6e 	bl	800084c <__aeabi_ddiv>
 8008170:	4603      	mov	r3, r0
 8008172:	460c      	mov	r4, r1
 8008174:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
			 if ( a_upper > a_design) {
 8008178:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800817c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008180:	f7f8 fcca 	bl	8000b18 <__aeabi_dcmpgt>
 8008184:	4603      	mov	r3, r0
 8008186:	2b00      	cmp	r3, #0
 8008188:	d001      	beq.n	800818e <scaraInitScurve+0x2be>
				 return SCARA_STATUS_ERROR_OVER_ACCEL;
 800818a:	230a      	movs	r3, #10
 800818c:	e217      	b.n	80085be <scaraInitScurve+0x6ee>
			 } else {
				 a_design = a_upper;
 800818e:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8008192:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8008196:	e00b      	b.n	80081b0 <scaraInitScurve+0x2e0>
			 }
		 } else {
			 v_design = 0;
 8008198:	f04f 0300 	mov.w	r3, #0
 800819c:	f04f 0400 	mov.w	r4, #0
 80081a0:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
			 a_design = 0;
 80081a4:	f04f 0300 	mov.w	r3, #0
 80081a8:	f04f 0400 	mov.w	r4, #0
 80081ac:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
		 }
	 }
	 // Avoid division by 0
	 if (a_design > 0.0000001 && v_design > 0.0000001) {
 80081b0:	a353      	add	r3, pc, #332	; (adr r3, 8008300 <scaraInitScurve+0x430>)
 80081b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b6:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80081ba:	f7f8 fcad 	bl	8000b18 <__aeabi_dcmpgt>
 80081be:	4603      	mov	r3, r0
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	f000 80b3 	beq.w	800832c <scaraInitScurve+0x45c>
 80081c6:	a34e      	add	r3, pc, #312	; (adr r3, 8008300 <scaraInitScurve+0x430>)
 80081c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80081d0:	f7f8 fca2 	bl	8000b18 <__aeabi_dcmpgt>
 80081d4:	4603      	mov	r3, r0
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	f000 80a8 	beq.w	800832c <scaraInitScurve+0x45c>
		 no_phases = 5;
 80081dc:	2305      	movs	r3, #5
 80081de:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		 tm = v_design/a_design;
 80081e2:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 80081e6:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80081ea:	f7f8 fb2f 	bl	800084c <__aeabi_ddiv>
 80081ee:	4603      	mov	r3, r0
 80081f0:	460c      	mov	r4, r1
 80081f2:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		 tc = total_s/v_design - 2*tm;
 80081f6:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 80081fa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80081fe:	f7f8 fb25 	bl	800084c <__aeabi_ddiv>
 8008202:	4603      	mov	r3, r0
 8008204:	460c      	mov	r4, r1
 8008206:	4625      	mov	r5, r4
 8008208:	461c      	mov	r4, r3
 800820a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800820e:	4602      	mov	r2, r0
 8008210:	460b      	mov	r3, r1
 8008212:	f7f8 f83b 	bl	800028c <__adddf3>
 8008216:	4602      	mov	r2, r0
 8008218:	460b      	mov	r3, r1
 800821a:	4620      	mov	r0, r4
 800821c:	4629      	mov	r1, r5
 800821e:	f7f8 f833 	bl	8000288 <__aeabi_dsub>
 8008222:	4603      	mov	r3, r0
 8008224:	460c      	mov	r4, r1
 8008226:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
		 // Check condition 5 phase ---> 4 phase
		 if (tc < 0.0) {
 800822a:	f04f 0200 	mov.w	r2, #0
 800822e:	f04f 0300 	mov.w	r3, #0
 8008232:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008236:	f7f8 fc51 	bl	8000adc <__aeabi_dcmplt>
 800823a:	4603      	mov	r3, r0
 800823c:	2b00      	cmp	r3, #0
 800823e:	d022      	beq.n	8008286 <scaraInitScurve+0x3b6>
			 tc = 0;
 8008240:	f04f 0300 	mov.w	r3, #0
 8008244:	f04f 0400 	mov.w	r4, #0
 8008248:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
			 no_phases = 4;
 800824c:	2304      	movs	r3, #4
 800824e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			 tm = sqrt(total_s/(2*a_design));
 8008252:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8008256:	4602      	mov	r2, r0
 8008258:	460b      	mov	r3, r1
 800825a:	f7f8 f817 	bl	800028c <__adddf3>
 800825e:	4603      	mov	r3, r0
 8008260:	460c      	mov	r4, r1
 8008262:	461a      	mov	r2, r3
 8008264:	4623      	mov	r3, r4
 8008266:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800826a:	f7f8 faef 	bl	800084c <__aeabi_ddiv>
 800826e:	4603      	mov	r3, r0
 8008270:	460c      	mov	r4, r1
 8008272:	ec44 3b17 	vmov	d7, r3, r4
 8008276:	eeb0 0a47 	vmov.f32	s0, s14
 800827a:	eef0 0a67 	vmov.f32	s1, s15
 800827e:	f011 fcbd 	bl	8019bfc <sqrt>
 8008282:	ed87 0b2e 	vstr	d0, [r7, #184]	; 0xb8
		 }
		 if (tm < 0.001) {
 8008286:	a31c      	add	r3, pc, #112	; (adr r3, 80082f8 <scaraInitScurve+0x428>)
 8008288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800828c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8008290:	f7f8 fc24 	bl	8000adc <__aeabi_dcmplt>
 8008294:	4603      	mov	r3, r0
 8008296:	2b00      	cmp	r3, #0
 8008298:	d006      	beq.n	80082a8 <scaraInitScurve+0x3d8>
			 j_max = 0;
 800829a:	f04f 0300 	mov.w	r3, #0
 800829e:	f04f 0400 	mov.w	r4, #0
 80082a2:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
 80082a6:	e009      	b.n	80082bc <scaraInitScurve+0x3ec>
		 } else {
			 j_max = a_design/tm;
 80082a8:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80082ac:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80082b0:	f7f8 facc 	bl	800084c <__aeabi_ddiv>
 80082b4:	4603      	mov	r3, r0
 80082b6:	460c      	mov	r4, r1
 80082b8:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
		 }
		 v_lim = a_design*tm;
 80082bc:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80082c0:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80082c4:	f7f8 f998 	bl	80005f8 <__aeabi_dmul>
 80082c8:	4603      	mov	r3, r0
 80082ca:	460c      	mov	r4, r1
 80082cc:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
		 tf    = 4*tm + tc;
 80082d0:	f04f 0200 	mov.w	r2, #0
 80082d4:	4b0e      	ldr	r3, [pc, #56]	; (8008310 <scaraInitScurve+0x440>)
 80082d6:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80082da:	f7f8 f98d 	bl	80005f8 <__aeabi_dmul>
 80082de:	4603      	mov	r3, r0
 80082e0:	460c      	mov	r4, r1
 80082e2:	461a      	mov	r2, r3
 80082e4:	4623      	mov	r3, r4
 80082e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80082ea:	f7f7 ffcf 	bl	800028c <__adddf3>
 80082ee:	4603      	mov	r3, r0
 80082f0:	460c      	mov	r4, r1
 80082f2:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
 80082f6:	e039      	b.n	800836c <scaraInitScurve+0x49c>
 80082f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80082fc:	3f50624d 	.word	0x3f50624d
 8008300:	9abcaf48 	.word	0x9abcaf48
 8008304:	3e7ad7f2 	.word	0x3e7ad7f2
 8008308:	bff00000 	.word	0xbff00000
 800830c:	3ff00000 	.word	0x3ff00000
 8008310:	40100000 	.word	0x40100000
 8008314:	00000000 	.word	0x00000000
 8008318:	405c2000 	.word	0x405c2000
 800831c:	14000000 	.word	0x14000000
 8008320:	4000f6f0 	.word	0x4000f6f0
 8008324:	6b259425 	.word	0x6b259425
 8008328:	40069b91 	.word	0x40069b91
	 } else {
		 j_max = 0;
 800832c:	f04f 0300 	mov.w	r3, #0
 8008330:	f04f 0400 	mov.w	r4, #0
 8008334:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
		 tc = 0;
 8008338:	f04f 0300 	mov.w	r3, #0
 800833c:	f04f 0400 	mov.w	r4, #0
 8008340:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
		 no_phases = 4;
 8008344:	2304      	movs	r3, #4
 8008346:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		 tm = tf / 4;
 800834a:	f04f 0200 	mov.w	r2, #0
 800834e:	4ba0      	ldr	r3, [pc, #640]	; (80085d0 <scaraInitScurve+0x700>)
 8008350:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8008354:	f7f8 fa7a 	bl	800084c <__aeabi_ddiv>
 8008358:	4603      	mov	r3, r0
 800835a:	460c      	mov	r4, r1
 800835c:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		 v_lim = 0;
 8008360:	f04f 0300 	mov.w	r3, #0
 8008364:	f04f 0400 	mov.w	r4, #0
 8008368:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
	 }

	 no_sample = ceil(tf / T_SAMPLING);
 800836c:	a396      	add	r3, pc, #600	; (adr r3, 80085c8 <scaraInitScurve+0x6f8>)
 800836e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008372:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8008376:	f7f8 fa69 	bl	800084c <__aeabi_ddiv>
 800837a:	4603      	mov	r3, r0
 800837c:	460c      	mov	r4, r1
 800837e:	ec44 3b17 	vmov	d7, r3, r4
 8008382:	eeb0 0a47 	vmov.f32	s0, s14
 8008386:	eef0 0a67 	vmov.f32	s1, s15
 800838a:	f011 fa9d 	bl	80198c8 <ceil>
 800838e:	ec54 3b10 	vmov	r3, r4, d0
 8008392:	4618      	mov	r0, r3
 8008394:	4621      	mov	r1, r4
 8008396:	f7f8 fc07 	bl	8000ba8 <__aeabi_d2uiz>
 800839a:	4603      	mov	r3, r0
 800839c:	667b      	str	r3, [r7, #100]	; 0x64
	 v_1 = 0.5*j_max*tm*tm;
 800839e:	f04f 0200 	mov.w	r2, #0
 80083a2:	4b8c      	ldr	r3, [pc, #560]	; (80085d4 <scaraInitScurve+0x704>)
 80083a4:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80083a8:	f7f8 f926 	bl	80005f8 <__aeabi_dmul>
 80083ac:	4603      	mov	r3, r0
 80083ae:	460c      	mov	r4, r1
 80083b0:	4618      	mov	r0, r3
 80083b2:	4621      	mov	r1, r4
 80083b4:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80083b8:	f7f8 f91e 	bl	80005f8 <__aeabi_dmul>
 80083bc:	4603      	mov	r3, r0
 80083be:	460c      	mov	r4, r1
 80083c0:	461a      	mov	r2, r3
 80083c2:	4623      	mov	r3, r4
 80083c4:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80083c8:	f7f8 f916 	bl	80005f8 <__aeabi_dmul>
 80083cc:	4603      	mov	r3, r0
 80083ce:	460c      	mov	r4, r1
 80083d0:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	 s_1 = j_max*tm*tm*tm/6;
 80083d4:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80083d8:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80083dc:	f7f8 f90c 	bl	80005f8 <__aeabi_dmul>
 80083e0:	4603      	mov	r3, r0
 80083e2:	460c      	mov	r4, r1
 80083e4:	4618      	mov	r0, r3
 80083e6:	4621      	mov	r1, r4
 80083e8:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80083ec:	f7f8 f904 	bl	80005f8 <__aeabi_dmul>
 80083f0:	4603      	mov	r3, r0
 80083f2:	460c      	mov	r4, r1
 80083f4:	4618      	mov	r0, r3
 80083f6:	4621      	mov	r1, r4
 80083f8:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80083fc:	f7f8 f8fc 	bl	80005f8 <__aeabi_dmul>
 8008400:	4603      	mov	r3, r0
 8008402:	460c      	mov	r4, r1
 8008404:	4618      	mov	r0, r3
 8008406:	4621      	mov	r1, r4
 8008408:	f04f 0200 	mov.w	r2, #0
 800840c:	4b72      	ldr	r3, [pc, #456]	; (80085d8 <scaraInitScurve+0x708>)
 800840e:	f7f8 fa1d 	bl	800084c <__aeabi_ddiv>
 8008412:	4603      	mov	r3, r0
 8008414:	460c      	mov	r4, r1
 8008416:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	 v_2 = j_max*tm*tm;
 800841a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800841e:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8008422:	f7f8 f8e9 	bl	80005f8 <__aeabi_dmul>
 8008426:	4603      	mov	r3, r0
 8008428:	460c      	mov	r4, r1
 800842a:	461a      	mov	r2, r3
 800842c:	4623      	mov	r3, r4
 800842e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8008432:	f7f8 f8e1 	bl	80005f8 <__aeabi_dmul>
 8008436:	4603      	mov	r3, r0
 8008438:	460c      	mov	r4, r1
 800843a:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	 s_2 = v_2*tm;
 800843e:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8008442:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008446:	f7f8 f8d7 	bl	80005f8 <__aeabi_dmul>
 800844a:	4603      	mov	r3, r0
 800844c:	460c      	mov	r4, r1
 800844e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
	 v_3 = v_2;
 8008452:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8008456:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	 s_3 = s_2 + v_2*tc;
 800845a:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 800845e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008462:	f7f8 f8c9 	bl	80005f8 <__aeabi_dmul>
 8008466:	4603      	mov	r3, r0
 8008468:	460c      	mov	r4, r1
 800846a:	461a      	mov	r2, r3
 800846c:	4623      	mov	r3, r4
 800846e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008472:	f7f7 ff0b 	bl	800028c <__adddf3>
 8008476:	4603      	mov	r3, r0
 8008478:	460c      	mov	r4, r1
 800847a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	 v_4 = v_1;
 800847e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8008482:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	 s_4 = s_3 + s_2 - s_1;
 8008486:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800848a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800848e:	f7f7 fefd 	bl	800028c <__adddf3>
 8008492:	4603      	mov	r3, r0
 8008494:	460c      	mov	r4, r1
 8008496:	4618      	mov	r0, r3
 8008498:	4621      	mov	r1, r4
 800849a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800849e:	f7f7 fef3 	bl	8000288 <__aeabi_dsub>
 80084a2:	4603      	mov	r3, r0
 80084a4:	460c      	mov	r4, r1
 80084a6:	e9c7 3408 	strd	r3, r4, [r7, #32]

	 scurve->Tc = tc;
 80084aa:	69fa      	ldr	r2, [r7, #28]
 80084ac:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 80084b0:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	 scurve->Tf = tf;
 80084b4:	69fa      	ldr	r2, [r7, #28]
 80084b6:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 80084ba:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	 scurve->Tm = tm;
 80084be:	69fa      	ldr	r2, [r7, #28]
 80084c0:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 80084c4:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	 scurve->a_design = a_design;
 80084c8:	69fa      	ldr	r2, [r7, #28]
 80084ca:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 80084ce:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	 scurve->v_design = v_design;
 80084d2:	69fa      	ldr	r2, [r7, #28]
 80084d4:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 80084d8:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	 scurve->v_lim = v_lim;
 80084dc:	69fa      	ldr	r2, [r7, #28]
 80084de:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 80084e2:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	 scurve->v0 = v0;
 80084e6:	69fa      	ldr	r2, [r7, #28]
 80084e8:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 80084ec:	e9c2 3406 	strd	r3, r4, [r2, #24]
	 scurve->v1 = v1;
 80084f0:	69fa      	ldr	r2, [r7, #28]
 80084f2:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 80084f6:	e9c2 3408 	strd	r3, r4, [r2, #32]
	 scurve->j_max = j_max;
 80084fa:	69fa      	ldr	r2, [r7, #28]
 80084fc:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8008500:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	 scurve->s0   = q0;
 8008504:	69fa      	ldr	r2, [r7, #28]
 8008506:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800850a:	e9c2 3402 	strd	r3, r4, [r2, #8]
	 scurve->s1   = q1;
 800850e:	69fa      	ldr	r2, [r7, #28]
 8008510:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8008514:	e9c2 3404 	strd	r3, r4, [r2, #16]
	 scurve->num_of_phase = no_phases;
 8008518:	69fb      	ldr	r3, [r7, #28]
 800851a:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 800851e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	 scurve->num_of_sampling = no_sample;
 8008522:	69fb      	ldr	r3, [r7, #28]
 8008524:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008526:	669a      	str	r2, [r3, #104]	; 0x68
	 scurve->total_s = total_s;
 8008528:	69fa      	ldr	r2, [r7, #28]
 800852a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800852e:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	 scurve->dir = dir;
 8008532:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8008536:	f7f8 fb0f 	bl	8000b58 <__aeabi_d2iz>
 800853a:	4603      	mov	r3, r0
 800853c:	b25a      	sxtb	r2, r3
 800853e:	69fb      	ldr	r3, [r7, #28]
 8008540:	701a      	strb	r2, [r3, #0]

	 scurve->a_current = 0;
 8008542:	69fa      	ldr	r2, [r7, #28]
 8008544:	f04f 0300 	mov.w	r3, #0
 8008548:	f04f 0400 	mov.w	r4, #0
 800854c:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
	 scurve->v_current = 0;
 8008550:	69fa      	ldr	r2, [r7, #28]
 8008552:	f04f 0300 	mov.w	r3, #0
 8008556:	f04f 0400 	mov.w	r4, #0
 800855a:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
	 scurve->s_current = 0;
 800855e:	69fa      	ldr	r2, [r7, #28]
 8008560:	f04f 0300 	mov.w	r3, #0
 8008564:	f04f 0400 	mov.w	r4, #0
 8008568:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
	 scurve->v_1 = v_1;
 800856c:	69fa      	ldr	r2, [r7, #28]
 800856e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8008572:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	 scurve->v_2 = v_2;
 8008576:	69fa      	ldr	r2, [r7, #28]
 8008578:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800857c:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
	 scurve->v_3 = v_3;
 8008580:	69fa      	ldr	r2, [r7, #28]
 8008582:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8008586:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
	 scurve->v_4 = v_4;
 800858a:	69fa      	ldr	r2, [r7, #28]
 800858c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8008590:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
	 scurve->s_1 = s_1;
 8008594:	69fa      	ldr	r2, [r7, #28]
 8008596:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800859a:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	 scurve->s_2 = s_2;
 800859e:	69fa      	ldr	r2, [r7, #28]
 80085a0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80085a4:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
	 scurve->s_3 = s_3;
 80085a8:	69fa      	ldr	r2, [r7, #28]
 80085aa:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80085ae:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0
	 scurve->s_4 = s_4;
 80085b2:	69fa      	ldr	r2, [r7, #28]
 80085b4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80085b8:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0

	 return SCARA_STATUS_OK;
 80085bc:	2300      	movs	r3, #0
}
 80085be:	4618      	mov	r0, r3
 80085c0:	37e8      	adds	r7, #232	; 0xe8
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bdb0      	pop	{r4, r5, r7, pc}
 80085c6:	bf00      	nop
 80085c8:	40000000 	.word	0x40000000
 80085cc:	3f847ae1 	.word	0x3f847ae1
 80085d0:	40100000 	.word	0x40100000
 80085d4:	3fe00000 	.word	0x3fe00000
 80085d8:	40180000 	.word	0x40180000

080085dc <scaraFlowDuty>:
}

/* Compute new x, y , z, theta1, theta2 , d3, theta4 corresponding to time */
SCARA_StatusTypeDef	scaraFlowDuty		(double time,
										SCARA_PositionTypeDef *pos_Next ,
										SCARA_PositionTypeDef pos_Current) {
 80085dc:	b082      	sub	sp, #8
 80085de:	b5b0      	push	{r4, r5, r7, lr}
 80085e0:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 80085e4:	af2e      	add	r7, sp, #184	; 0xb8
 80085e6:	f107 0108 	add.w	r1, r7, #8
 80085ea:	ed81 0b00 	vstr	d0, [r1]
 80085ee:	1d39      	adds	r1, r7, #4
 80085f0:	6008      	str	r0, [r1, #0]
 80085f2:	f507 71b8 	add.w	r1, r7, #368	; 0x170
 80085f6:	e881 000c 	stmia.w	r1, {r2, r3}
	SCARA_StatusTypeDef status1, status2, status3, status4;
	SCARA_PositionTypeDef	positionCompute;
	// Update time
	positionCompute.t = time;
 80085fa:	f107 0210 	add.w	r2, r7, #16
 80085fe:	f107 0308 	add.w	r3, r7, #8
 8008602:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008606:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	/*---- Task space ----*/
	if ( DUTY_SPACE_TASK == myDUTY.space_type) {
 800860a:	4ba9      	ldr	r3, [pc, #676]	; (80088b0 <scaraFlowDuty+0x2d4>)
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	2b00      	cmp	r3, #0
 8008610:	f040 815a 	bne.w	80088c8 <scaraFlowDuty+0x2ec>
		double s, angle, x, y, z, v, v_angle;
		int8_t	dir_roll;
		//---Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.task.trajectory_3d.trajectory_type) {
 8008614:	4ba6      	ldr	r3, [pc, #664]	; (80088b0 <scaraFlowDuty+0x2d4>)
 8008616:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800861a:	2b00      	cmp	r3, #0
 800861c:	d12b      	bne.n	8008676 <scaraFlowDuty+0x9a>
//			s = myDUTY.task.trajectory_3d.lspb.s_current;
//			v = myDUTY.task.trajectory_3d.lspb.v_current;
//			angle = myDUTY.task.trajectory_roll.lspb.s_current;
//			v_angle = myDUTY.task.trajectory_roll.lspb.v_current;
//			dir_roll = myDUTY.task.trajectory_roll.lspb.dir;
			status1 = scaraFlowLSPB1(&(myDUTY.task.trajectory_3d.lspb), time);
 800861e:	f107 0308 	add.w	r3, r7, #8
 8008622:	ed93 0b00 	vldr	d0, [r3]
 8008626:	48a3      	ldr	r0, [pc, #652]	; (80088b4 <scaraFlowDuty+0x2d8>)
 8008628:	f000 fc72 	bl	8008f10 <scaraFlowLSPB1>
 800862c:	4603      	mov	r3, r0
 800862e:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			v = myDUTY.task.trajectory_3d.lspb.v_current;
 8008632:	4b9f      	ldr	r3, [pc, #636]	; (80088b0 <scaraFlowDuty+0x2d4>)
 8008634:	e9d3 3462 	ldrd	r3, r4, [r3, #392]	; 0x188
 8008638:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
			s = myDUTY.task.trajectory_3d.lspb.s_current;
 800863c:	4b9c      	ldr	r3, [pc, #624]	; (80088b0 <scaraFlowDuty+0x2d4>)
 800863e:	e9d3 3464 	ldrd	r3, r4, [r3, #400]	; 0x190
 8008642:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
			angle = myDUTY.task.trajectory_roll.linear.constant_v*time;
 8008646:	4b9a      	ldr	r3, [pc, #616]	; (80088b0 <scaraFlowDuty+0x2d4>)
 8008648:	e9d3 34fc 	ldrd	r3, r4, [r3, #1008]	; 0x3f0
 800864c:	f107 0108 	add.w	r1, r7, #8
 8008650:	461a      	mov	r2, r3
 8008652:	4623      	mov	r3, r4
 8008654:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008658:	f7f7 ffce 	bl	80005f8 <__aeabi_dmul>
 800865c:	4603      	mov	r3, r0
 800865e:	460c      	mov	r4, r1
 8008660:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 8008664:	4b92      	ldr	r3, [pc, #584]	; (80088b0 <scaraFlowDuty+0x2d4>)
 8008666:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 800866a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
			status2 = SCARA_STATUS_OK;
 800866e:	2300      	movs	r3, #0
 8008670:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 8008674:	e063      	b.n	800873e <scaraFlowDuty+0x162>
			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.task.trajectory_3d.trajectory_type) {
 8008676:	4b8e      	ldr	r3, [pc, #568]	; (80088b0 <scaraFlowDuty+0x2d4>)
 8008678:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800867c:	2b01      	cmp	r3, #1
 800867e:	d12d      	bne.n	80086dc <scaraFlowDuty+0x100>
			status1 = scaraFLowScurve(&(myDUTY.task.trajectory_3d.scurve), time);
 8008680:	f107 0308 	add.w	r3, r7, #8
 8008684:	ed93 0b00 	vldr	d0, [r3]
 8008688:	488b      	ldr	r0, [pc, #556]	; (80088b8 <scaraFlowDuty+0x2dc>)
 800868a:	f000 ff8b 	bl	80095a4 <scaraFLowScurve>
 800868e:	4603      	mov	r3, r0
 8008690:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = scaraFLowScurve(&(myDUTY.task.trajectory_roll.scurve), time);
 8008694:	f107 0308 	add.w	r3, r7, #8
 8008698:	ed93 0b00 	vldr	d0, [r3]
 800869c:	4887      	ldr	r0, [pc, #540]	; (80088bc <scaraFlowDuty+0x2e0>)
 800869e:	f000 ff81 	bl	80095a4 <scaraFLowScurve>
 80086a2:	4603      	mov	r3, r0
 80086a4:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
			s = myDUTY.task.trajectory_3d.scurve.s_current;
 80086a8:	4b81      	ldr	r3, [pc, #516]	; (80088b0 <scaraFlowDuty+0x2d4>)
 80086aa:	e9d3 3498 	ldrd	r3, r4, [r3, #608]	; 0x260
 80086ae:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
			v = myDUTY.task.trajectory_3d.scurve.v_current;
 80086b2:	4b7f      	ldr	r3, [pc, #508]	; (80088b0 <scaraFlowDuty+0x2d4>)
 80086b4:	e9d3 3496 	ldrd	r3, r4, [r3, #600]	; 0x258
 80086b8:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
			angle = myDUTY.task.trajectory_roll.scurve.s_current;
 80086bc:	4b7c      	ldr	r3, [pc, #496]	; (80088b0 <scaraFlowDuty+0x2d4>)
 80086be:	e9d3 34f8 	ldrd	r3, r4, [r3, #992]	; 0x3e0
 80086c2:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			v_angle = myDUTY.task.trajectory_roll.scurve.v_current;
 80086c6:	4b7a      	ldr	r3, [pc, #488]	; (80088b0 <scaraFlowDuty+0x2d4>)
 80086c8:	e9d3 34f6 	ldrd	r3, r4, [r3, #984]	; 0x3d8
 80086cc:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
			dir_roll = myDUTY.task.trajectory_roll.scurve.dir;
 80086d0:	4b77      	ldr	r3, [pc, #476]	; (80088b0 <scaraFlowDuty+0x2d4>)
 80086d2:	f893 3318 	ldrb.w	r3, [r3, #792]	; 0x318
 80086d6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 80086da:	e030      	b.n	800873e <scaraFlowDuty+0x162>
		}else if( DUTY_TRAJECTORY_LINEAR == myDUTY.task.trajectory_3d.trajectory_type){
 80086dc:	4b74      	ldr	r3, [pc, #464]	; (80088b0 <scaraFlowDuty+0x2d4>)
 80086de:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80086e2:	2b02      	cmp	r3, #2
 80086e4:	d129      	bne.n	800873a <scaraFlowDuty+0x15e>
			s = time*myDUTY.task.trajectory_3d.linear.constant_v;
 80086e6:	4b72      	ldr	r3, [pc, #456]	; (80088b0 <scaraFlowDuty+0x2d4>)
 80086e8:	e9d3 349c 	ldrd	r3, r4, [r3, #624]	; 0x270
 80086ec:	f107 0108 	add.w	r1, r7, #8
 80086f0:	461a      	mov	r2, r3
 80086f2:	4623      	mov	r3, r4
 80086f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086f8:	f7f7 ff7e 	bl	80005f8 <__aeabi_dmul>
 80086fc:	4603      	mov	r3, r0
 80086fe:	460c      	mov	r4, r1
 8008700:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
			angle = myDUTY.task.trajectory_roll.linear.constant_v*time;
 8008704:	4b6a      	ldr	r3, [pc, #424]	; (80088b0 <scaraFlowDuty+0x2d4>)
 8008706:	e9d3 34fc 	ldrd	r3, r4, [r3, #1008]	; 0x3f0
 800870a:	f107 0108 	add.w	r1, r7, #8
 800870e:	461a      	mov	r2, r3
 8008710:	4623      	mov	r3, r4
 8008712:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008716:	f7f7 ff6f 	bl	80005f8 <__aeabi_dmul>
 800871a:	4603      	mov	r3, r0
 800871c:	460c      	mov	r4, r1
 800871e:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 8008722:	4b63      	ldr	r3, [pc, #396]	; (80088b0 <scaraFlowDuty+0x2d4>)
 8008724:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8008728:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
			status1 = SCARA_STATUS_OK;
 800872c:	2300      	movs	r3, #0
 800872e:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = SCARA_STATUS_OK;
 8008732:	2300      	movs	r3, #0
 8008734:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 8008738:	e001      	b.n	800873e <scaraFlowDuty+0x162>
		}else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 800873a:	2305      	movs	r3, #5
 800873c:	e2cd      	b.n	8008cda <scaraFlowDuty+0x6fe>
		}

		if ( SCARA_STATUS_OK != status1) {
 800873e:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8008742:	2b00      	cmp	r3, #0
 8008744:	d002      	beq.n	800874c <scaraFlowDuty+0x170>
			return status1;
 8008746:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 800874a:	e2c6      	b.n	8008cda <scaraFlowDuty+0x6fe>
		}
		if ( SCARA_STATUS_OK != status2) {
 800874c:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8008750:	2b00      	cmp	r3, #0
 8008752:	d002      	beq.n	800875a <scaraFlowDuty+0x17e>
			return status2;
 8008754:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8008758:	e2bf      	b.n	8008cda <scaraFlowDuty+0x6fe>
		}

		//---Path flowing
			// Straight line
		if( DUTY_PATH_LINE == myDUTY.task.path.path_type) {
 800875a:	4b55      	ldr	r3, [pc, #340]	; (80088b0 <scaraFlowDuty+0x2d4>)
 800875c:	7a1b      	ldrb	r3, [r3, #8]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d117      	bne.n	8008792 <scaraFlowDuty+0x1b6>
			status1 = scaraFlowLine(&(myDUTY.task.path.line), s);
 8008762:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 8008766:	4856      	ldr	r0, [pc, #344]	; (80088c0 <scaraFlowDuty+0x2e4>)
 8008768:	f000 fac2 	bl	8008cf0 <scaraFlowLine>
 800876c:	4603      	mov	r3, r0
 800876e:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			x = myDUTY.task.path.line.x_current;
 8008772:	4b4f      	ldr	r3, [pc, #316]	; (80088b0 <scaraFlowDuty+0x2d4>)
 8008774:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 8008778:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			y = myDUTY.task.path.line.y_current;
 800877c:	4b4c      	ldr	r3, [pc, #304]	; (80088b0 <scaraFlowDuty+0x2d4>)
 800877e:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8008782:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
			z = myDUTY.task.path.line.z_current;
 8008786:	4b4a      	ldr	r3, [pc, #296]	; (80088b0 <scaraFlowDuty+0x2d4>)
 8008788:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 800878c:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
 8008790:	e01d      	b.n	80087ce <scaraFlowDuty+0x1f2>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == myDUTY.task.path.path_type) {
 8008792:	4b47      	ldr	r3, [pc, #284]	; (80088b0 <scaraFlowDuty+0x2d4>)
 8008794:	7a1b      	ldrb	r3, [r3, #8]
 8008796:	2b01      	cmp	r3, #1
 8008798:	d117      	bne.n	80087ca <scaraFlowDuty+0x1ee>
			status1 = scaraFlowCircle(&(myDUTY.task.path.circle), s);
 800879a:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 800879e:	4849      	ldr	r0, [pc, #292]	; (80088c4 <scaraFlowDuty+0x2e8>)
 80087a0:	f000 fb2e 	bl	8008e00 <scaraFlowCircle>
 80087a4:	4603      	mov	r3, r0
 80087a6:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			x = myDUTY.task.path.circle.x_current;
 80087aa:	4b41      	ldr	r3, [pc, #260]	; (80088b0 <scaraFlowDuty+0x2d4>)
 80087ac:	e9d3 343e 	ldrd	r3, r4, [r3, #248]	; 0xf8
 80087b0:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			y = myDUTY.task.path.circle.y_current;
 80087b4:	4b3e      	ldr	r3, [pc, #248]	; (80088b0 <scaraFlowDuty+0x2d4>)
 80087b6:	e9d3 3440 	ldrd	r3, r4, [r3, #256]	; 0x100
 80087ba:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
			z = myDUTY.task.path.circle.z_current;
 80087be:	4b3c      	ldr	r3, [pc, #240]	; (80088b0 <scaraFlowDuty+0x2d4>)
 80087c0:	e9d3 3442 	ldrd	r3, r4, [r3, #264]	; 0x108
 80087c4:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
 80087c8:	e001      	b.n	80087ce <scaraFlowDuty+0x1f2>
		} else {
			return SCARA_STATUS_ERROR_TASK;
 80087ca:	2303      	movs	r3, #3
 80087cc:	e285      	b.n	8008cda <scaraFlowDuty+0x6fe>
		}

		positionCompute.x 		= x;
 80087ce:	f107 0210 	add.w	r2, r7, #16
 80087d2:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 80087d6:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
		positionCompute.y		= y;
 80087da:	f107 0210 	add.w	r2, r7, #16
 80087de:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 80087e2:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
		positionCompute.z 		= z;
 80087e6:	f107 0210 	add.w	r2, r7, #16
 80087ea:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 80087ee:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		positionCompute.roll 	= myDUTY.task.roll_start + angle*dir_roll;
 80087f2:	4b2f      	ldr	r3, [pc, #188]	; (80088b0 <scaraFlowDuty+0x2d4>)
 80087f4:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80087f8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80087fc:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8008800:	4618      	mov	r0, r3
 8008802:	f7f7 fe8f 	bl	8000524 <__aeabi_i2d>
 8008806:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800880a:	f7f7 fef5 	bl	80005f8 <__aeabi_dmul>
 800880e:	4602      	mov	r2, r0
 8008810:	460b      	mov	r3, r1
 8008812:	4620      	mov	r0, r4
 8008814:	4629      	mov	r1, r5
 8008816:	f7f7 fd39 	bl	800028c <__adddf3>
 800881a:	4603      	mov	r3, r0
 800881c:	460c      	mov	r4, r1
 800881e:	f107 0210 	add.w	r2, r7, #16
 8008822:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

		positionCompute.q		= s;
 8008826:	f107 0210 	add.w	r2, r7, #16
 800882a:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 800882e:	e9c2 3400 	strd	r3, r4, [r2]
		positionCompute.q_roll  = angle;
 8008832:	f107 0210 	add.w	r2, r7, #16
 8008836:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	; 0x148
 800883a:	e9c2 3402 	strd	r3, r4, [r2, #8]

		positionCompute.v_3d    = v;
 800883e:	f107 0210 	add.w	r2, r7, #16
 8008842:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 8008846:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
		positionCompute.v_roll  = v_angle;
 800884a:	f107 0210 	add.w	r2, r7, #16
 800884e:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8008852:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0

		positionCompute.total_time = myDUTY.time_total;
 8008856:	4b16      	ldr	r3, [pc, #88]	; (80088b0 <scaraFlowDuty+0x2d4>)
 8008858:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800885c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008860:	f107 0210 	add.w	r2, r7, #16
 8008864:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
		positionCompute.t		= time;
 8008868:	f107 0210 	add.w	r2, r7, #16
 800886c:	f107 0308 	add.w	r3, r7, #8
 8008870:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008874:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		if ( FALSE == kinematicInverse(&positionCompute, pos_Current)) {
 8008878:	f107 0410 	add.w	r4, r7, #16
 800887c:	4668      	mov	r0, sp
 800887e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8008882:	22b8      	movs	r2, #184	; 0xb8
 8008884:	4619      	mov	r1, r3
 8008886:	f00d fab1 	bl	8015dec <memcpy>
 800888a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800888e:	cb0c      	ldmia	r3, {r2, r3}
 8008890:	4620      	mov	r0, r4
 8008892:	f7fb fb91 	bl	8003fb8 <kinematicInverse>
 8008896:	4603      	mov	r3, r0
 8008898:	2b00      	cmp	r3, #0
 800889a:	d101      	bne.n	80088a0 <scaraFlowDuty+0x2c4>
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800889c:	2307      	movs	r3, #7
 800889e:	e21c      	b.n	8008cda <scaraFlowDuty+0x6fe>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 80088a0:	f107 0110 	add.w	r1, r7, #16
 80088a4:	1d3b      	adds	r3, r7, #4
 80088a6:	22c0      	movs	r2, #192	; 0xc0
 80088a8:	6818      	ldr	r0, [r3, #0]
 80088aa:	f00d fa9f 	bl	8015dec <memcpy>
 80088ae:	e213      	b.n	8008cd8 <scaraFlowDuty+0x6fc>
 80088b0:	20005af8 	.word	0x20005af8
 80088b4:	20005c10 	.word	0x20005c10
 80088b8:	20005c90 	.word	0x20005c90
 80088bc:	20005e10 	.word	0x20005e10
 80088c0:	20005b08 	.word	0x20005b08
 80088c4:	20005b78 	.word	0x20005b78
		}

	/*---- Joint space -----*/
	} else if (DUTY_SPACE_JOINT == myDUTY.space_type) {
 80088c8:	4b8b      	ldr	r3, [pc, #556]	; (8008af8 <scaraFlowDuty+0x51c>)
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	f040 8201 	bne.w	8008cd4 <scaraFlowDuty+0x6f8>
		double s0, s1, s2, s3;
		double v0, v1, v2, v3;
		int8_t dir0, dir1, dir2, dir3;
		// Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.joint.trajectory[0].trajectory_type) {
 80088d2:	4b89      	ldr	r3, [pc, #548]	; (8008af8 <scaraFlowDuty+0x51c>)
 80088d4:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d174      	bne.n	80089c6 <scaraFlowDuty+0x3ea>
			status1 = scaraFlowLSPB(&(myDUTY.joint.trajectory[0].lspb), time);
 80088dc:	f107 0308 	add.w	r3, r7, #8
 80088e0:	ed93 0b00 	vldr	d0, [r3]
 80088e4:	4885      	ldr	r0, [pc, #532]	; (8008afc <scaraFlowDuty+0x520>)
 80088e6:	f000 fcb1 	bl	800924c <scaraFlowLSPB>
 80088ea:	4603      	mov	r3, r0
 80088ec:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = scaraFlowLSPB(&(myDUTY.joint.trajectory[1].lspb), time);
 80088f0:	f107 0308 	add.w	r3, r7, #8
 80088f4:	ed93 0b00 	vldr	d0, [r3]
 80088f8:	4881      	ldr	r0, [pc, #516]	; (8008b00 <scaraFlowDuty+0x524>)
 80088fa:	f000 fca7 	bl	800924c <scaraFlowLSPB>
 80088fe:	4603      	mov	r3, r0
 8008900:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
			status3 = scaraFlowLSPB(&(myDUTY.joint.trajectory[2].lspb), time);
 8008904:	f107 0308 	add.w	r3, r7, #8
 8008908:	ed93 0b00 	vldr	d0, [r3]
 800890c:	487d      	ldr	r0, [pc, #500]	; (8008b04 <scaraFlowDuty+0x528>)
 800890e:	f000 fc9d 	bl	800924c <scaraFlowLSPB>
 8008912:	4603      	mov	r3, r0
 8008914:	f887 315d 	strb.w	r3, [r7, #349]	; 0x15d
			status4 = scaraFlowLSPB(&(myDUTY.joint.trajectory[3].lspb), time);
 8008918:	f107 0308 	add.w	r3, r7, #8
 800891c:	ed93 0b00 	vldr	d0, [r3]
 8008920:	4879      	ldr	r0, [pc, #484]	; (8008b08 <scaraFlowDuty+0x52c>)
 8008922:	f000 fc93 	bl	800924c <scaraFlowLSPB>
 8008926:	4603      	mov	r3, r0
 8008928:	f887 315c 	strb.w	r3, [r7, #348]	; 0x15c

			dir0 = myDUTY.joint.trajectory[0].lspb.dir;
 800892c:	4b72      	ldr	r3, [pc, #456]	; (8008af8 <scaraFlowDuty+0x51c>)
 800892e:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 8008932:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
			dir1 = myDUTY.joint.trajectory[1].lspb.dir;
 8008936:	4b70      	ldr	r3, [pc, #448]	; (8008af8 <scaraFlowDuty+0x51c>)
 8008938:	f893 35a0 	ldrb.w	r3, [r3, #1440]	; 0x5a0
 800893c:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
			dir2 = myDUTY.joint.trajectory[2].lspb.dir;
 8008940:	4b6d      	ldr	r3, [pc, #436]	; (8008af8 <scaraFlowDuty+0x51c>)
 8008942:	f893 3720 	ldrb.w	r3, [r3, #1824]	; 0x720
 8008946:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
			dir3 = myDUTY.joint.trajectory[3].lspb.dir;
 800894a:	4b6b      	ldr	r3, [pc, #428]	; (8008af8 <scaraFlowDuty+0x51c>)
 800894c:	f893 38a0 	ldrb.w	r3, [r3, #2208]	; 0x8a0
 8008950:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4

			s0 = myDUTY.joint.trajectory[0].lspb.s_current;
 8008954:	4b68      	ldr	r3, [pc, #416]	; (8008af8 <scaraFlowDuty+0x51c>)
 8008956:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 800895a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800895e:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
			s1 = myDUTY.joint.trajectory[1].lspb.s_current;
 8008962:	4b65      	ldr	r3, [pc, #404]	; (8008af8 <scaraFlowDuty+0x51c>)
 8008964:	f503 63c3 	add.w	r3, r3, #1560	; 0x618
 8008968:	e9d3 3400 	ldrd	r3, r4, [r3]
 800896c:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
			s2 = myDUTY.joint.trajectory[2].lspb.s_current;
 8008970:	4b61      	ldr	r3, [pc, #388]	; (8008af8 <scaraFlowDuty+0x51c>)
 8008972:	f503 63f3 	add.w	r3, r3, #1944	; 0x798
 8008976:	e9d3 3400 	ldrd	r3, r4, [r3]
 800897a:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
			s3 = myDUTY.joint.trajectory[3].lspb.s_current;
 800897e:	4b5e      	ldr	r3, [pc, #376]	; (8008af8 <scaraFlowDuty+0x51c>)
 8008980:	f603 1318 	addw	r3, r3, #2328	; 0x918
 8008984:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008988:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8

			v0 = myDUTY.joint.trajectory[0].lspb.v_current;
 800898c:	4b5a      	ldr	r3, [pc, #360]	; (8008af8 <scaraFlowDuty+0x51c>)
 800898e:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8008992:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008996:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
			v1 = myDUTY.joint.trajectory[1].lspb.v_current;
 800899a:	4b57      	ldr	r3, [pc, #348]	; (8008af8 <scaraFlowDuty+0x51c>)
 800899c:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 80089a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80089a4:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
			v2 = myDUTY.joint.trajectory[2].lspb.v_current;
 80089a8:	4b53      	ldr	r3, [pc, #332]	; (8008af8 <scaraFlowDuty+0x51c>)
 80089aa:	f503 63f2 	add.w	r3, r3, #1936	; 0x790
 80089ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 80089b2:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
			v3 = myDUTY.joint.trajectory[3].lspb.v_current;
 80089b6:	4b50      	ldr	r3, [pc, #320]	; (8008af8 <scaraFlowDuty+0x51c>)
 80089b8:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 80089bc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80089c0:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 80089c4:	e07b      	b.n	8008abe <scaraFlowDuty+0x4e2>

			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.joint.trajectory[0].trajectory_type) {
 80089c6:	4b4c      	ldr	r3, [pc, #304]	; (8008af8 <scaraFlowDuty+0x51c>)
 80089c8:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d174      	bne.n	8008aba <scaraFlowDuty+0x4de>
			status1 = scaraFLowScurve(&(myDUTY.joint.trajectory[0].scurve), time);
 80089d0:	f107 0308 	add.w	r3, r7, #8
 80089d4:	ed93 0b00 	vldr	d0, [r3]
 80089d8:	484c      	ldr	r0, [pc, #304]	; (8008b0c <scaraFlowDuty+0x530>)
 80089da:	f000 fde3 	bl	80095a4 <scaraFLowScurve>
 80089de:	4603      	mov	r3, r0
 80089e0:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = scaraFLowScurve(&(myDUTY.joint.trajectory[1].scurve), time);
 80089e4:	f107 0308 	add.w	r3, r7, #8
 80089e8:	ed93 0b00 	vldr	d0, [r3]
 80089ec:	4848      	ldr	r0, [pc, #288]	; (8008b10 <scaraFlowDuty+0x534>)
 80089ee:	f000 fdd9 	bl	80095a4 <scaraFLowScurve>
 80089f2:	4603      	mov	r3, r0
 80089f4:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
			status3 = scaraFLowScurve(&(myDUTY.joint.trajectory[2].scurve), time);
 80089f8:	f107 0308 	add.w	r3, r7, #8
 80089fc:	ed93 0b00 	vldr	d0, [r3]
 8008a00:	4844      	ldr	r0, [pc, #272]	; (8008b14 <scaraFlowDuty+0x538>)
 8008a02:	f000 fdcf 	bl	80095a4 <scaraFLowScurve>
 8008a06:	4603      	mov	r3, r0
 8008a08:	f887 315d 	strb.w	r3, [r7, #349]	; 0x15d
			status4 = scaraFLowScurve(&(myDUTY.joint.trajectory[3].scurve), time);
 8008a0c:	f107 0308 	add.w	r3, r7, #8
 8008a10:	ed93 0b00 	vldr	d0, [r3]
 8008a14:	4840      	ldr	r0, [pc, #256]	; (8008b18 <scaraFlowDuty+0x53c>)
 8008a16:	f000 fdc5 	bl	80095a4 <scaraFLowScurve>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	f887 315c 	strb.w	r3, [r7, #348]	; 0x15c
			dir0 = myDUTY.joint.trajectory[0].scurve.dir;
 8008a20:	4b35      	ldr	r3, [pc, #212]	; (8008af8 <scaraFlowDuty+0x51c>)
 8008a22:	f893 34a0 	ldrb.w	r3, [r3, #1184]	; 0x4a0
 8008a26:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
			dir1 = myDUTY.joint.trajectory[1].scurve.dir;
 8008a2a:	4b33      	ldr	r3, [pc, #204]	; (8008af8 <scaraFlowDuty+0x51c>)
 8008a2c:	f893 3620 	ldrb.w	r3, [r3, #1568]	; 0x620
 8008a30:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
			dir2 = myDUTY.joint.trajectory[2].scurve.dir;
 8008a34:	4b30      	ldr	r3, [pc, #192]	; (8008af8 <scaraFlowDuty+0x51c>)
 8008a36:	f893 37a0 	ldrb.w	r3, [r3, #1952]	; 0x7a0
 8008a3a:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
			dir3 = myDUTY.joint.trajectory[3].scurve.dir;
 8008a3e:	4b2e      	ldr	r3, [pc, #184]	; (8008af8 <scaraFlowDuty+0x51c>)
 8008a40:	f893 3920 	ldrb.w	r3, [r3, #2336]	; 0x920
 8008a44:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
			s0 = myDUTY.joint.trajectory[0].scurve.s_current;
 8008a48:	4b2b      	ldr	r3, [pc, #172]	; (8008af8 <scaraFlowDuty+0x51c>)
 8008a4a:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8008a4e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008a52:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
			s1 = myDUTY.joint.trajectory[1].scurve.s_current;
 8008a56:	4b28      	ldr	r3, [pc, #160]	; (8008af8 <scaraFlowDuty+0x51c>)
 8008a58:	f503 63dd 	add.w	r3, r3, #1768	; 0x6e8
 8008a5c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008a60:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
			s2 = myDUTY.joint.trajectory[2].scurve.s_current;
 8008a64:	4b24      	ldr	r3, [pc, #144]	; (8008af8 <scaraFlowDuty+0x51c>)
 8008a66:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8008a6a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008a6e:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
			s3 = myDUTY.joint.trajectory[3].scurve.s_current;
 8008a72:	4b21      	ldr	r3, [pc, #132]	; (8008af8 <scaraFlowDuty+0x51c>)
 8008a74:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 8008a78:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008a7c:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8

			v0 = myDUTY.joint.trajectory[0].scurve.v_current;
 8008a80:	4b1d      	ldr	r3, [pc, #116]	; (8008af8 <scaraFlowDuty+0x51c>)
 8008a82:	f503 63ac 	add.w	r3, r3, #1376	; 0x560
 8008a86:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008a8a:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
			v1 = myDUTY.joint.trajectory[1].scurve.v_current;
 8008a8e:	4b1a      	ldr	r3, [pc, #104]	; (8008af8 <scaraFlowDuty+0x51c>)
 8008a90:	f503 63dc 	add.w	r3, r3, #1760	; 0x6e0
 8008a94:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008a98:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
			v2 = myDUTY.joint.trajectory[2].scurve.v_current;
 8008a9c:	4b16      	ldr	r3, [pc, #88]	; (8008af8 <scaraFlowDuty+0x51c>)
 8008a9e:	f503 6306 	add.w	r3, r3, #2144	; 0x860
 8008aa2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008aa6:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
			v3 = myDUTY.joint.trajectory[3].scurve.v_current;
 8008aaa:	4b13      	ldr	r3, [pc, #76]	; (8008af8 <scaraFlowDuty+0x51c>)
 8008aac:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
 8008ab0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008ab4:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8008ab8:	e001      	b.n	8008abe <scaraFlowDuty+0x4e2>

		} else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8008aba:	2305      	movs	r3, #5
 8008abc:	e10d      	b.n	8008cda <scaraFlowDuty+0x6fe>
		}
		// Check init status
		if ( SCARA_STATUS_OK != status1) {
 8008abe:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d002      	beq.n	8008acc <scaraFlowDuty+0x4f0>
			return status1;
 8008ac6:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8008aca:	e106      	b.n	8008cda <scaraFlowDuty+0x6fe>
		}
		if ( SCARA_STATUS_OK != status2) {
 8008acc:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d002      	beq.n	8008ada <scaraFlowDuty+0x4fe>
			return status2;
 8008ad4:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8008ad8:	e0ff      	b.n	8008cda <scaraFlowDuty+0x6fe>
		}
		if ( SCARA_STATUS_OK != status3) {
 8008ada:	f897 315d 	ldrb.w	r3, [r7, #349]	; 0x15d
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d002      	beq.n	8008ae8 <scaraFlowDuty+0x50c>
			return status3;
 8008ae2:	f897 315d 	ldrb.w	r3, [r7, #349]	; 0x15d
 8008ae6:	e0f8      	b.n	8008cda <scaraFlowDuty+0x6fe>
		}
		if ( SCARA_STATUS_OK != status4) {
 8008ae8:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d015      	beq.n	8008b1c <scaraFlowDuty+0x540>
			return status4;
 8008af0:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 8008af4:	e0f1      	b.n	8008cda <scaraFlowDuty+0x6fe>
 8008af6:	bf00      	nop
 8008af8:	20005af8 	.word	0x20005af8
 8008afc:	20005f18 	.word	0x20005f18
 8008b00:	20006098 	.word	0x20006098
 8008b04:	20006218 	.word	0x20006218
 8008b08:	20006398 	.word	0x20006398
 8008b0c:	20005f98 	.word	0x20005f98
 8008b10:	20006118 	.word	0x20006118
 8008b14:	20006298 	.word	0x20006298
 8008b18:	20006418 	.word	0x20006418
		}

		positionCompute.Theta1 	= myDUTY.joint.theta1_start + s0*dir0;
 8008b1c:	4b73      	ldr	r3, [pc, #460]	; (8008cec <scaraFlowDuty+0x710>)
 8008b1e:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 8008b22:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008b26:	f997 30d7 	ldrsb.w	r3, [r7, #215]	; 0xd7
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f7f7 fcfa 	bl	8000524 <__aeabi_i2d>
 8008b30:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8008b34:	f7f7 fd60 	bl	80005f8 <__aeabi_dmul>
 8008b38:	4602      	mov	r2, r0
 8008b3a:	460b      	mov	r3, r1
 8008b3c:	4620      	mov	r0, r4
 8008b3e:	4629      	mov	r1, r5
 8008b40:	f7f7 fba4 	bl	800028c <__adddf3>
 8008b44:	4603      	mov	r3, r0
 8008b46:	460c      	mov	r4, r1
 8008b48:	f107 0210 	add.w	r2, r7, #16
 8008b4c:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		positionCompute.Theta2 	= myDUTY.joint.theta2_start + s1*dir1;
 8008b50:	4b66      	ldr	r3, [pc, #408]	; (8008cec <scaraFlowDuty+0x710>)
 8008b52:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8008b56:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008b5a:	f997 30d6 	ldrsb.w	r3, [r7, #214]	; 0xd6
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f7f7 fce0 	bl	8000524 <__aeabi_i2d>
 8008b64:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8008b68:	f7f7 fd46 	bl	80005f8 <__aeabi_dmul>
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	460b      	mov	r3, r1
 8008b70:	4620      	mov	r0, r4
 8008b72:	4629      	mov	r1, r5
 8008b74:	f7f7 fb8a 	bl	800028c <__adddf3>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	460c      	mov	r4, r1
 8008b7c:	f107 0210 	add.w	r2, r7, #16
 8008b80:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		positionCompute.D3 		= myDUTY.joint.d3_start 	+ s2*dir2;
 8008b84:	4b59      	ldr	r3, [pc, #356]	; (8008cec <scaraFlowDuty+0x710>)
 8008b86:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 8008b8a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008b8e:	f997 30d5 	ldrsb.w	r3, [r7, #213]	; 0xd5
 8008b92:	4618      	mov	r0, r3
 8008b94:	f7f7 fcc6 	bl	8000524 <__aeabi_i2d>
 8008b98:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8008b9c:	f7f7 fd2c 	bl	80005f8 <__aeabi_dmul>
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	460b      	mov	r3, r1
 8008ba4:	4620      	mov	r0, r4
 8008ba6:	4629      	mov	r1, r5
 8008ba8:	f7f7 fb70 	bl	800028c <__adddf3>
 8008bac:	4603      	mov	r3, r0
 8008bae:	460c      	mov	r4, r1
 8008bb0:	f107 0210 	add.w	r2, r7, #16
 8008bb4:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		positionCompute.Theta4 	= myDUTY.joint.theta4_start + s3*dir3;
 8008bb8:	4b4c      	ldr	r3, [pc, #304]	; (8008cec <scaraFlowDuty+0x710>)
 8008bba:	f503 6323 	add.w	r3, r3, #2608	; 0xa30
 8008bbe:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008bc2:	f997 30d4 	ldrsb.w	r3, [r7, #212]	; 0xd4
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f7f7 fcac 	bl	8000524 <__aeabi_i2d>
 8008bcc:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8008bd0:	f7f7 fd12 	bl	80005f8 <__aeabi_dmul>
 8008bd4:	4602      	mov	r2, r0
 8008bd6:	460b      	mov	r3, r1
 8008bd8:	4620      	mov	r0, r4
 8008bda:	4629      	mov	r1, r5
 8008bdc:	f7f7 fb56 	bl	800028c <__adddf3>
 8008be0:	4603      	mov	r3, r0
 8008be2:	460c      	mov	r4, r1
 8008be4:	f107 0210 	add.w	r2, r7, #16
 8008be8:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

		positionCompute.v_theta1 	= v0;
 8008bec:	f107 0210 	add.w	r2, r7, #16
 8008bf0:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8008bf4:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		positionCompute.v_theta2 	= v1;
 8008bf8:	f107 0210 	add.w	r2, r7, #16
 8008bfc:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 8008c00:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
		positionCompute.v_d3 		= v2;
 8008c04:	f107 0210 	add.w	r2, r7, #16
 8008c08:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8008c0c:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
		positionCompute.v_theta4 	= v3;
 8008c10:	f107 0210 	add.w	r2, r7, #16
 8008c14:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 8008c18:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0

		positionCompute.q_theta1 = s0;
 8008c1c:	f107 0210 	add.w	r2, r7, #16
 8008c20:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8008c24:	e9c2 3404 	strd	r3, r4, [r2, #16]
		positionCompute.q_theta2 = s1;
 8008c28:	f107 0210 	add.w	r2, r7, #16
 8008c2c:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 8008c30:	e9c2 3406 	strd	r3, r4, [r2, #24]
		positionCompute.q_d3	 = s2;
 8008c34:	f107 0210 	add.w	r2, r7, #16
 8008c38:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8008c3c:	e9c2 3408 	strd	r3, r4, [r2, #32]
		positionCompute.q_theta4 = s3;
 8008c40:	f107 0210 	add.w	r2, r7, #16
 8008c44:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 8008c48:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

		positionCompute.total_time = myDUTY.time_total;
 8008c4c:	4b27      	ldr	r3, [pc, #156]	; (8008cec <scaraFlowDuty+0x710>)
 8008c4e:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8008c52:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008c56:	f107 0210 	add.w	r2, r7, #16
 8008c5a:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
		positionCompute.t		= time;
 8008c5e:	f107 0210 	add.w	r2, r7, #16
 8008c62:	f107 0308 	add.w	r3, r7, #8
 8008c66:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008c6a:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		// Check workspace
		if( SCARA_STATUS_OK != scaraCheckWorkSpace4(positionCompute.Theta1,
 8008c6e:	f107 0310 	add.w	r3, r7, #16
 8008c72:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8008c76:	f107 0310 	add.w	r3, r7, #16
 8008c7a:	ed93 6b1c 	vldr	d6, [r3, #112]	; 0x70
 8008c7e:	f107 0310 	add.w	r3, r7, #16
 8008c82:	ed93 5b1e 	vldr	d5, [r3, #120]	; 0x78
 8008c86:	f107 0310 	add.w	r3, r7, #16
 8008c8a:	ed93 4b20 	vldr	d4, [r3, #128]	; 0x80
 8008c8e:	eeb0 3a44 	vmov.f32	s6, s8
 8008c92:	eef0 3a64 	vmov.f32	s7, s9
 8008c96:	eeb0 2a45 	vmov.f32	s4, s10
 8008c9a:	eef0 2a65 	vmov.f32	s5, s11
 8008c9e:	eeb0 1a46 	vmov.f32	s2, s12
 8008ca2:	eef0 1a66 	vmov.f32	s3, s13
 8008ca6:	eeb0 0a47 	vmov.f32	s0, s14
 8008caa:	eef0 0a67 	vmov.f32	s1, s15
 8008cae:	f001 fb5f 	bl	800a370 <scaraCheckWorkSpace4>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d001      	beq.n	8008cbc <scaraFlowDuty+0x6e0>
							 	 	 	  positionCompute.Theta2,
										  positionCompute.D3,
										  positionCompute.Theta4)) {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8008cb8:	2307      	movs	r3, #7
 8008cba:	e00e      	b.n	8008cda <scaraFlowDuty+0x6fe>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 8008cbc:	f107 0110 	add.w	r1, r7, #16
 8008cc0:	1d3b      	adds	r3, r7, #4
 8008cc2:	22c0      	movs	r2, #192	; 0xc0
 8008cc4:	6818      	ldr	r0, [r3, #0]
 8008cc6:	f00d f891 	bl	8015dec <memcpy>
		}
		kinematicForward(pos_Next);
 8008cca:	1d3b      	adds	r3, r7, #4
 8008ccc:	6818      	ldr	r0, [r3, #0]
 8008cce:	f7fb f837 	bl	8003d40 <kinematicForward>
 8008cd2:	e001      	b.n	8008cd8 <scaraFlowDuty+0x6fc>

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 8008cd4:	2302      	movs	r3, #2
 8008cd6:	e000      	b.n	8008cda <scaraFlowDuty+0x6fe>
	}

	return SCARA_STATUS_OK;
 8008cd8:	2300      	movs	r3, #0
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8008ce6:	b002      	add	sp, #8
 8008ce8:	4770      	bx	lr
 8008cea:	bf00      	nop
 8008cec:	20005af8 	.word	0x20005af8

08008cf0 <scaraFlowLine>:

/* Compute new x, y ,z corresponding to s */
SCARA_StatusTypeDef	scaraFlowLine		(Path_Line_TypeDef *line, double s) {
 8008cf0:	b5b0      	push	{r4, r5, r7, lr}
 8008cf2:	b084      	sub	sp, #16
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	60f8      	str	r0, [r7, #12]
 8008cf8:	ed87 0b00 	vstr	d0, [r7]
	// Avoid div with 0
	if ( line->total_s > 0.01) {
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8008d02:	a33d      	add	r3, pc, #244	; (adr r3, 8008df8 <scaraFlowLine+0x108>)
 8008d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d08:	f7f7 ff06 	bl	8000b18 <__aeabi_dcmpgt>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d05a      	beq.n	8008dc8 <scaraFlowLine+0xd8>
		line->x_current	 = line->x0 + line->denta_x*s/line->total_s;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8008d1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d22:	f7f7 fc69 	bl	80005f8 <__aeabi_dmul>
 8008d26:	4602      	mov	r2, r0
 8008d28:	460b      	mov	r3, r1
 8008d2a:	4610      	mov	r0, r2
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8008d34:	f7f7 fd8a 	bl	800084c <__aeabi_ddiv>
 8008d38:	4602      	mov	r2, r0
 8008d3a:	460b      	mov	r3, r1
 8008d3c:	4620      	mov	r0, r4
 8008d3e:	4629      	mov	r1, r5
 8008d40:	f7f7 faa4 	bl	800028c <__adddf3>
 8008d44:	4603      	mov	r3, r0
 8008d46:	460c      	mov	r4, r1
 8008d48:	68fa      	ldr	r2, [r7, #12]
 8008d4a:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		line->y_current	 = line->y0 + line->denta_y*s/line->total_s;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8008d5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d5e:	f7f7 fc4b 	bl	80005f8 <__aeabi_dmul>
 8008d62:	4602      	mov	r2, r0
 8008d64:	460b      	mov	r3, r1
 8008d66:	4610      	mov	r0, r2
 8008d68:	4619      	mov	r1, r3
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8008d70:	f7f7 fd6c 	bl	800084c <__aeabi_ddiv>
 8008d74:	4602      	mov	r2, r0
 8008d76:	460b      	mov	r3, r1
 8008d78:	4620      	mov	r0, r4
 8008d7a:	4629      	mov	r1, r5
 8008d7c:	f7f7 fa86 	bl	800028c <__adddf3>
 8008d80:	4603      	mov	r3, r0
 8008d82:	460c      	mov	r4, r1
 8008d84:	68fa      	ldr	r2, [r7, #12]
 8008d86:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
		line->z_current	 = line->z0 + line->denta_z*s/line->total_s;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8008d96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d9a:	f7f7 fc2d 	bl	80005f8 <__aeabi_dmul>
 8008d9e:	4602      	mov	r2, r0
 8008da0:	460b      	mov	r3, r1
 8008da2:	4610      	mov	r0, r2
 8008da4:	4619      	mov	r1, r3
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8008dac:	f7f7 fd4e 	bl	800084c <__aeabi_ddiv>
 8008db0:	4602      	mov	r2, r0
 8008db2:	460b      	mov	r3, r1
 8008db4:	4620      	mov	r0, r4
 8008db6:	4629      	mov	r1, r5
 8008db8:	f7f7 fa68 	bl	800028c <__adddf3>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	460c      	mov	r4, r1
 8008dc0:	68fa      	ldr	r2, [r7, #12]
 8008dc2:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
 8008dc6:	e011      	b.n	8008dec <scaraFlowLine+0xfc>
	} else {
		line->x_current = line->x1;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8008dce:	68fa      	ldr	r2, [r7, #12]
 8008dd0:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		line->y_current = line->y1;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8008dda:	68fa      	ldr	r2, [r7, #12]
 8008ddc:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
		line->z_current = line->z1;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8008de6:	68fa      	ldr	r2, [r7, #12]
 8008de8:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	}

	return SCARA_STATUS_OK;
 8008dec:	2300      	movs	r3, #0
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3710      	adds	r7, #16
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bdb0      	pop	{r4, r5, r7, pc}
 8008df6:	bf00      	nop
 8008df8:	47ae147b 	.word	0x47ae147b
 8008dfc:	3f847ae1 	.word	0x3f847ae1

08008e00 <scaraFlowCircle>:

/* Compute new x, y ,z corresponding to s */
SCARA_StatusTypeDef	scaraFlowCircle		(Path_Circle_TypeDef *circle, double s) {
 8008e00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e04:	b086      	sub	sp, #24
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	60f8      	str	r0, [r7, #12]
 8008e0a:	ed87 0b00 	vstr	d0, [r7]
	double angle;
	angle = s/(circle->radius);
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8008e14:	461a      	mov	r2, r3
 8008e16:	4623      	mov	r3, r4
 8008e18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e1c:	f7f7 fd16 	bl	800084c <__aeabi_ddiv>
 8008e20:	4603      	mov	r3, r0
 8008e22:	460c      	mov	r4, r1
 8008e24:	e9c7 3404 	strd	r3, r4, [r7, #16]
	circle->x_current = circle->xi + circle->radius*cos(circle->angle_start + circle->dir*angle);
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	f993 3000 	ldrsb.w	r3, [r3]
 8008e40:	4618      	mov	r0, r3
 8008e42:	f7f7 fb6f 	bl	8000524 <__aeabi_i2d>
 8008e46:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008e4a:	f7f7 fbd5 	bl	80005f8 <__aeabi_dmul>
 8008e4e:	4602      	mov	r2, r0
 8008e50:	460b      	mov	r3, r1
 8008e52:	4650      	mov	r0, sl
 8008e54:	4659      	mov	r1, fp
 8008e56:	f7f7 fa19 	bl	800028c <__adddf3>
 8008e5a:	4602      	mov	r2, r0
 8008e5c:	460b      	mov	r3, r1
 8008e5e:	ec43 2b17 	vmov	d7, r2, r3
 8008e62:	eeb0 0a47 	vmov.f32	s0, s14
 8008e66:	eef0 0a67 	vmov.f32	s1, s15
 8008e6a:	f010 fdad 	bl	80199c8 <cos>
 8008e6e:	ec53 2b10 	vmov	r2, r3, d0
 8008e72:	4640      	mov	r0, r8
 8008e74:	4649      	mov	r1, r9
 8008e76:	f7f7 fbbf 	bl	80005f8 <__aeabi_dmul>
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	460b      	mov	r3, r1
 8008e7e:	4620      	mov	r0, r4
 8008e80:	4629      	mov	r1, r5
 8008e82:	f7f7 fa03 	bl	800028c <__adddf3>
 8008e86:	4603      	mov	r3, r0
 8008e88:	460c      	mov	r4, r1
 8008e8a:	68fa      	ldr	r2, [r7, #12]
 8008e8c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	circle->y_current = circle->yi + circle->radius*sin(circle->angle_start + circle->dir*angle);
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	f993 3000 	ldrsb.w	r3, [r3]
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f7f7 fb3b 	bl	8000524 <__aeabi_i2d>
 8008eae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008eb2:	f7f7 fba1 	bl	80005f8 <__aeabi_dmul>
 8008eb6:	4602      	mov	r2, r0
 8008eb8:	460b      	mov	r3, r1
 8008eba:	4650      	mov	r0, sl
 8008ebc:	4659      	mov	r1, fp
 8008ebe:	f7f7 f9e5 	bl	800028c <__adddf3>
 8008ec2:	4602      	mov	r2, r0
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	ec43 2b17 	vmov	d7, r2, r3
 8008eca:	eeb0 0a47 	vmov.f32	s0, s14
 8008ece:	eef0 0a67 	vmov.f32	s1, s15
 8008ed2:	f010 fe09 	bl	8019ae8 <sin>
 8008ed6:	ec53 2b10 	vmov	r2, r3, d0
 8008eda:	4640      	mov	r0, r8
 8008edc:	4649      	mov	r1, r9
 8008ede:	f7f7 fb8b 	bl	80005f8 <__aeabi_dmul>
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	460b      	mov	r3, r1
 8008ee6:	4620      	mov	r0, r4
 8008ee8:	4629      	mov	r1, r5
 8008eea:	f7f7 f9cf 	bl	800028c <__adddf3>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	460c      	mov	r4, r1
 8008ef2:	68fa      	ldr	r2, [r7, #12]
 8008ef4:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	circle->z_current = circle->zi; // XY plane
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8008efe:	68fa      	ldr	r2, [r7, #12]
 8008f00:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

	return SCARA_STATUS_OK;
 8008f04:	2300      	movs	r3, #0
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3718      	adds	r7, #24
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008f10 <scaraFlowLSPB1>:
SCARA_StatusTypeDef	scaraFlowLSPB1	(Trajectory_LSPB_TypeDef *lspb, double time){
 8008f10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008f14:	b08b      	sub	sp, #44	; 0x2c
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	60f8      	str	r0, [r7, #12]
 8008f1a:	ed87 0b00 	vstr	d0, [r7]
	double tf, td, ta;

	tf = lspb->Tf;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8008f24:	e9c7 2308 	strd	r2, r3, [r7, #32]
	td = lspb->Td;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8008f2e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	ta = lspb->Ta;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8008f38:	e9c7 2304 	strd	r2, r3, [r7, #16]
	// Accelerate
	if ( 0.0f <= time && time <= ta) {
 8008f3c:	f04f 0200 	mov.w	r2, #0
 8008f40:	f04f 0300 	mov.w	r3, #0
 8008f44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f48:	f7f7 fddc 	bl	8000b04 <__aeabi_dcmpge>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d05b      	beq.n	800900a <scaraFlowLSPB1+0xfa>
 8008f52:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008f56:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f5a:	f7f7 fdc9 	bl	8000af0 <__aeabi_dcmple>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d052      	beq.n	800900a <scaraFlowLSPB1+0xfa>
		lspb->a_current		=	lspb->a_design;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8008f6a:	68fa      	ldr	r2, [r7, #12]
 8008f6c:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	lspb->v0 + lspb->a_design*time;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8008f7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f80:	f7f7 fb3a 	bl	80005f8 <__aeabi_dmul>
 8008f84:	4602      	mov	r2, r0
 8008f86:	460b      	mov	r3, r1
 8008f88:	4620      	mov	r0, r4
 8008f8a:	4629      	mov	r1, r5
 8008f8c:	f7f7 f97e 	bl	800028c <__adddf3>
 8008f90:	4603      	mov	r3, r0
 8008f92:	460c      	mov	r4, r1
 8008f94:	68fa      	ldr	r2, [r7, #12]
 8008f96:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*time + 0.5*lspb->a_design*time*time;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8008fa6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008faa:	f7f7 fb25 	bl	80005f8 <__aeabi_dmul>
 8008fae:	4602      	mov	r2, r0
 8008fb0:	460b      	mov	r3, r1
 8008fb2:	4620      	mov	r0, r4
 8008fb4:	4629      	mov	r1, r5
 8008fb6:	f7f7 f969 	bl	800028c <__adddf3>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	460c      	mov	r4, r1
 8008fbe:	4625      	mov	r5, r4
 8008fc0:	461c      	mov	r4, r3
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8008fc8:	f04f 0200 	mov.w	r2, #0
 8008fcc:	4b9e      	ldr	r3, [pc, #632]	; (8009248 <scaraFlowLSPB1+0x338>)
 8008fce:	f7f7 fb13 	bl	80005f8 <__aeabi_dmul>
 8008fd2:	4602      	mov	r2, r0
 8008fd4:	460b      	mov	r3, r1
 8008fd6:	4610      	mov	r0, r2
 8008fd8:	4619      	mov	r1, r3
 8008fda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fde:	f7f7 fb0b 	bl	80005f8 <__aeabi_dmul>
 8008fe2:	4602      	mov	r2, r0
 8008fe4:	460b      	mov	r3, r1
 8008fe6:	4610      	mov	r0, r2
 8008fe8:	4619      	mov	r1, r3
 8008fea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fee:	f7f7 fb03 	bl	80005f8 <__aeabi_dmul>
 8008ff2:	4602      	mov	r2, r0
 8008ff4:	460b      	mov	r3, r1
 8008ff6:	4620      	mov	r0, r4
 8008ff8:	4629      	mov	r1, r5
 8008ffa:	f7f7 f947 	bl	800028c <__adddf3>
 8008ffe:	4603      	mov	r3, r0
 8009000:	460c      	mov	r4, r1
 8009002:	68fa      	ldr	r2, [r7, #12]
 8009004:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8009008:	e117      	b.n	800923a <scaraFlowLSPB1+0x32a>
	// Constant velocity
	} else if (ta <= time && time <= td) {
 800900a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800900e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009012:	f7f7 fd6d 	bl	8000af0 <__aeabi_dcmple>
 8009016:	4603      	mov	r3, r0
 8009018:	2b00      	cmp	r3, #0
 800901a:	d056      	beq.n	80090ca <scaraFlowLSPB1+0x1ba>
 800901c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009020:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009024:	f7f7 fd64 	bl	8000af0 <__aeabi_dcmple>
 8009028:	4603      	mov	r3, r0
 800902a:	2b00      	cmp	r3, #0
 800902c:	d04d      	beq.n	80090ca <scaraFlowLSPB1+0x1ba>
		lspb->a_current		=	0;
 800902e:	68fa      	ldr	r2, [r7, #12]
 8009030:	f04f 0300 	mov.w	r3, #0
 8009034:	f04f 0400 	mov.w	r4, #0
 8009038:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	lspb->v_lim;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8009042:	68fa      	ldr	r2, [r7, #12]
 8009044:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*ta*0.5 + lspb->v_design*(time - ta*0.5);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8009054:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009058:	f7f7 face 	bl	80005f8 <__aeabi_dmul>
 800905c:	4602      	mov	r2, r0
 800905e:	460b      	mov	r3, r1
 8009060:	4610      	mov	r0, r2
 8009062:	4619      	mov	r1, r3
 8009064:	f04f 0200 	mov.w	r2, #0
 8009068:	4b77      	ldr	r3, [pc, #476]	; (8009248 <scaraFlowLSPB1+0x338>)
 800906a:	f7f7 fac5 	bl	80005f8 <__aeabi_dmul>
 800906e:	4602      	mov	r2, r0
 8009070:	460b      	mov	r3, r1
 8009072:	4620      	mov	r0, r4
 8009074:	4629      	mov	r1, r5
 8009076:	f7f7 f909 	bl	800028c <__adddf3>
 800907a:	4603      	mov	r3, r0
 800907c:	460c      	mov	r4, r1
 800907e:	4698      	mov	r8, r3
 8009080:	46a1      	mov	r9, r4
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8009088:	f04f 0200 	mov.w	r2, #0
 800908c:	4b6e      	ldr	r3, [pc, #440]	; (8009248 <scaraFlowLSPB1+0x338>)
 800908e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009092:	f7f7 fab1 	bl	80005f8 <__aeabi_dmul>
 8009096:	4602      	mov	r2, r0
 8009098:	460b      	mov	r3, r1
 800909a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800909e:	f7f7 f8f3 	bl	8000288 <__aeabi_dsub>
 80090a2:	4602      	mov	r2, r0
 80090a4:	460b      	mov	r3, r1
 80090a6:	4620      	mov	r0, r4
 80090a8:	4629      	mov	r1, r5
 80090aa:	f7f7 faa5 	bl	80005f8 <__aeabi_dmul>
 80090ae:	4603      	mov	r3, r0
 80090b0:	460c      	mov	r4, r1
 80090b2:	461a      	mov	r2, r3
 80090b4:	4623      	mov	r3, r4
 80090b6:	4640      	mov	r0, r8
 80090b8:	4649      	mov	r1, r9
 80090ba:	f7f7 f8e7 	bl	800028c <__adddf3>
 80090be:	4603      	mov	r3, r0
 80090c0:	460c      	mov	r4, r1
 80090c2:	68fa      	ldr	r2, [r7, #12]
 80090c4:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 80090c8:	e0b7      	b.n	800923a <scaraFlowLSPB1+0x32a>
	// Decelerate
	} else if (td <= time && time <= tf) {
 80090ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090ce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80090d2:	f7f7 fd0d 	bl	8000af0 <__aeabi_dcmple>
 80090d6:	4603      	mov	r3, r0
 80090d8:	2b00      	cmp	r3, #0
 80090da:	f000 809a 	beq.w	8009212 <scaraFlowLSPB1+0x302>
 80090de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80090e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80090e6:	f7f7 fd03 	bl	8000af0 <__aeabi_dcmple>
 80090ea:	4603      	mov	r3, r0
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	f000 8090 	beq.w	8009212 <scaraFlowLSPB1+0x302>
		lspb->a_current		=	-lspb->a_design;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80090f8:	4614      	mov	r4, r2
 80090fa:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	e9c3 451a 	strd	r4, r5, [r3, #104]	; 0x68
		lspb->v_current		=	lspb->v_design + lspb->a_design*(td - time);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	e9d3 890c 	ldrd	r8, r9, [r3, #48]	; 0x30
 8009110:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009114:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009118:	f7f7 f8b6 	bl	8000288 <__aeabi_dsub>
 800911c:	4602      	mov	r2, r0
 800911e:	460b      	mov	r3, r1
 8009120:	4640      	mov	r0, r8
 8009122:	4649      	mov	r1, r9
 8009124:	f7f7 fa68 	bl	80005f8 <__aeabi_dmul>
 8009128:	4602      	mov	r2, r0
 800912a:	460b      	mov	r3, r1
 800912c:	4620      	mov	r0, r4
 800912e:	4629      	mov	r1, r5
 8009130:	f7f7 f8ac 	bl	800028c <__adddf3>
 8009134:	4603      	mov	r3, r0
 8009136:	460c      	mov	r4, r1
 8009138:	68fa      	ldr	r2, [r7, #12]
 800913a:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s1 - lspb->v0*(tf - time)
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	e9d3 8906 	ldrd	r8, r9, [r3, #24]
 800914a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800914e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009152:	f7f7 f899 	bl	8000288 <__aeabi_dsub>
 8009156:	4602      	mov	r2, r0
 8009158:	460b      	mov	r3, r1
 800915a:	4640      	mov	r0, r8
 800915c:	4649      	mov	r1, r9
 800915e:	f7f7 fa4b 	bl	80005f8 <__aeabi_dmul>
 8009162:	4602      	mov	r2, r0
 8009164:	460b      	mov	r3, r1
 8009166:	4620      	mov	r0, r4
 8009168:	4629      	mov	r1, r5
 800916a:	f7f7 f88d 	bl	8000288 <__aeabi_dsub>
 800916e:	4603      	mov	r3, r0
 8009170:	460c      	mov	r4, r1
 8009172:	461d      	mov	r5, r3
 8009174:	4626      	mov	r6, r4
								- (lspb->v_lim - lspb->v0)*(tf - time)*(tf - time)/(2*ta);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8009182:	461a      	mov	r2, r3
 8009184:	4623      	mov	r3, r4
 8009186:	f7f7 f87f 	bl	8000288 <__aeabi_dsub>
 800918a:	4603      	mov	r3, r0
 800918c:	460c      	mov	r4, r1
 800918e:	4698      	mov	r8, r3
 8009190:	46a1      	mov	r9, r4
 8009192:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009196:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800919a:	f7f7 f875 	bl	8000288 <__aeabi_dsub>
 800919e:	4603      	mov	r3, r0
 80091a0:	460c      	mov	r4, r1
 80091a2:	461a      	mov	r2, r3
 80091a4:	4623      	mov	r3, r4
 80091a6:	4640      	mov	r0, r8
 80091a8:	4649      	mov	r1, r9
 80091aa:	f7f7 fa25 	bl	80005f8 <__aeabi_dmul>
 80091ae:	4603      	mov	r3, r0
 80091b0:	460c      	mov	r4, r1
 80091b2:	4698      	mov	r8, r3
 80091b4:	46a1      	mov	r9, r4
 80091b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091ba:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80091be:	f7f7 f863 	bl	8000288 <__aeabi_dsub>
 80091c2:	4603      	mov	r3, r0
 80091c4:	460c      	mov	r4, r1
 80091c6:	461a      	mov	r2, r3
 80091c8:	4623      	mov	r3, r4
 80091ca:	4640      	mov	r0, r8
 80091cc:	4649      	mov	r1, r9
 80091ce:	f7f7 fa13 	bl	80005f8 <__aeabi_dmul>
 80091d2:	4603      	mov	r3, r0
 80091d4:	460c      	mov	r4, r1
 80091d6:	4698      	mov	r8, r3
 80091d8:	46a1      	mov	r9, r4
 80091da:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80091de:	4602      	mov	r2, r0
 80091e0:	460b      	mov	r3, r1
 80091e2:	f7f7 f853 	bl	800028c <__adddf3>
 80091e6:	4603      	mov	r3, r0
 80091e8:	460c      	mov	r4, r1
 80091ea:	461a      	mov	r2, r3
 80091ec:	4623      	mov	r3, r4
 80091ee:	4640      	mov	r0, r8
 80091f0:	4649      	mov	r1, r9
 80091f2:	f7f7 fb2b 	bl	800084c <__aeabi_ddiv>
 80091f6:	4603      	mov	r3, r0
 80091f8:	460c      	mov	r4, r1
 80091fa:	461a      	mov	r2, r3
 80091fc:	4623      	mov	r3, r4
 80091fe:	4628      	mov	r0, r5
 8009200:	4631      	mov	r1, r6
 8009202:	f7f7 f841 	bl	8000288 <__aeabi_dsub>
 8009206:	4603      	mov	r3, r0
 8009208:	460c      	mov	r4, r1
		lspb->s_current		=	lspb->s1 - lspb->v0*(tf - time)
 800920a:	68fa      	ldr	r2, [r7, #12]
 800920c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8009210:	e013      	b.n	800923a <scaraFlowLSPB1+0x32a>
	} else {
		lspb->a_current 	=	0;
 8009212:	68fa      	ldr	r2, [r7, #12]
 8009214:	f04f 0300 	mov.w	r3, #0
 8009218:	f04f 0400 	mov.w	r4, #0
 800921c:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	0;
 8009220:	68fa      	ldr	r2, [r7, #12]
 8009222:	f04f 0300 	mov.w	r3, #0
 8009226:	f04f 0400 	mov.w	r4, #0
 800922a:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->total_s;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8009234:	68fa      	ldr	r2, [r7, #12]
 8009236:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	}

	return SCARA_STATUS_OK;
 800923a:	2300      	movs	r3, #0
}
 800923c:	4618      	mov	r0, r3
 800923e:	372c      	adds	r7, #44	; 0x2c
 8009240:	46bd      	mov	sp, r7
 8009242:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009246:	bf00      	nop
 8009248:	3fe00000 	.word	0x3fe00000

0800924c <scaraFlowLSPB>:
/* Compute new s corresponding to time */
SCARA_StatusTypeDef	scaraFlowLSPB		(Trajectory_LSPB_TypeDef *lspb, double time) {
 800924c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009250:	b08b      	sub	sp, #44	; 0x2c
 8009252:	af00      	add	r7, sp, #0
 8009254:	60f8      	str	r0, [r7, #12]
 8009256:	ed87 0b00 	vstr	d0, [r7]
	double tf, td, ta;

	tf = lspb->Tf;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8009260:	e9c7 2308 	strd	r2, r3, [r7, #32]
	td = lspb->Td;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800926a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	ta = lspb->Ta;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8009274:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Accelerate
	if ( 0.0f <= time && time <= ta) {
 8009278:	f04f 0200 	mov.w	r2, #0
 800927c:	f04f 0300 	mov.w	r3, #0
 8009280:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009284:	f7f7 fc3e 	bl	8000b04 <__aeabi_dcmpge>
 8009288:	4603      	mov	r3, r0
 800928a:	2b00      	cmp	r3, #0
 800928c:	d05b      	beq.n	8009346 <scaraFlowLSPB+0xfa>
 800928e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009292:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009296:	f7f7 fc2b 	bl	8000af0 <__aeabi_dcmple>
 800929a:	4603      	mov	r3, r0
 800929c:	2b00      	cmp	r3, #0
 800929e:	d052      	beq.n	8009346 <scaraFlowLSPB+0xfa>
		lspb->a_current		=	lspb->a_design;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 80092a6:	68fa      	ldr	r2, [r7, #12]
 80092a8:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	lspb->v0 + lspb->a_design*time;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80092b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092bc:	f7f7 f99c 	bl	80005f8 <__aeabi_dmul>
 80092c0:	4602      	mov	r2, r0
 80092c2:	460b      	mov	r3, r1
 80092c4:	4620      	mov	r0, r4
 80092c6:	4629      	mov	r1, r5
 80092c8:	f7f6 ffe0 	bl	800028c <__adddf3>
 80092cc:	4603      	mov	r3, r0
 80092ce:	460c      	mov	r4, r1
 80092d0:	68fa      	ldr	r2, [r7, #12]
 80092d2:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*time + 0.5*lspb->a_design*time*time;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80092e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092e6:	f7f7 f987 	bl	80005f8 <__aeabi_dmul>
 80092ea:	4602      	mov	r2, r0
 80092ec:	460b      	mov	r3, r1
 80092ee:	4620      	mov	r0, r4
 80092f0:	4629      	mov	r1, r5
 80092f2:	f7f6 ffcb 	bl	800028c <__adddf3>
 80092f6:	4603      	mov	r3, r0
 80092f8:	460c      	mov	r4, r1
 80092fa:	4625      	mov	r5, r4
 80092fc:	461c      	mov	r4, r3
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8009304:	f04f 0200 	mov.w	r2, #0
 8009308:	4ba5      	ldr	r3, [pc, #660]	; (80095a0 <scaraFlowLSPB+0x354>)
 800930a:	f7f7 f975 	bl	80005f8 <__aeabi_dmul>
 800930e:	4602      	mov	r2, r0
 8009310:	460b      	mov	r3, r1
 8009312:	4610      	mov	r0, r2
 8009314:	4619      	mov	r1, r3
 8009316:	e9d7 2300 	ldrd	r2, r3, [r7]
 800931a:	f7f7 f96d 	bl	80005f8 <__aeabi_dmul>
 800931e:	4602      	mov	r2, r0
 8009320:	460b      	mov	r3, r1
 8009322:	4610      	mov	r0, r2
 8009324:	4619      	mov	r1, r3
 8009326:	e9d7 2300 	ldrd	r2, r3, [r7]
 800932a:	f7f7 f965 	bl	80005f8 <__aeabi_dmul>
 800932e:	4602      	mov	r2, r0
 8009330:	460b      	mov	r3, r1
 8009332:	4620      	mov	r0, r4
 8009334:	4629      	mov	r1, r5
 8009336:	f7f6 ffa9 	bl	800028c <__adddf3>
 800933a:	4603      	mov	r3, r0
 800933c:	460c      	mov	r4, r1
 800933e:	68fa      	ldr	r2, [r7, #12]
 8009340:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8009344:	e125      	b.n	8009592 <scaraFlowLSPB+0x346>
	// Constant velocity
	} else if (ta <= time && time <= (tf - td)) {
 8009346:	e9d7 2300 	ldrd	r2, r3, [r7]
 800934a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800934e:	f7f7 fbcf 	bl	8000af0 <__aeabi_dcmple>
 8009352:	4603      	mov	r3, r0
 8009354:	2b00      	cmp	r3, #0
 8009356:	d05e      	beq.n	8009416 <scaraFlowLSPB+0x1ca>
 8009358:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800935c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009360:	f7f6 ff92 	bl	8000288 <__aeabi_dsub>
 8009364:	4602      	mov	r2, r0
 8009366:	460b      	mov	r3, r1
 8009368:	e9d7 0100 	ldrd	r0, r1, [r7]
 800936c:	f7f7 fbc0 	bl	8000af0 <__aeabi_dcmple>
 8009370:	4603      	mov	r3, r0
 8009372:	2b00      	cmp	r3, #0
 8009374:	d04f      	beq.n	8009416 <scaraFlowLSPB+0x1ca>
		lspb->a_current		=	0;
 8009376:	68fa      	ldr	r2, [r7, #12]
 8009378:	f04f 0300 	mov.w	r3, #0
 800937c:	f04f 0400 	mov.w	r4, #0
 8009380:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	lspb->v_lim;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800938a:	68fa      	ldr	r2, [r7, #12]
 800938c:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*ta/2 + lspb->v_lim*(time - ta/2);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800939c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80093a0:	f7f7 f92a 	bl	80005f8 <__aeabi_dmul>
 80093a4:	4602      	mov	r2, r0
 80093a6:	460b      	mov	r3, r1
 80093a8:	4610      	mov	r0, r2
 80093aa:	4619      	mov	r1, r3
 80093ac:	f04f 0200 	mov.w	r2, #0
 80093b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80093b4:	f7f7 fa4a 	bl	800084c <__aeabi_ddiv>
 80093b8:	4602      	mov	r2, r0
 80093ba:	460b      	mov	r3, r1
 80093bc:	4620      	mov	r0, r4
 80093be:	4629      	mov	r1, r5
 80093c0:	f7f6 ff64 	bl	800028c <__adddf3>
 80093c4:	4603      	mov	r3, r0
 80093c6:	460c      	mov	r4, r1
 80093c8:	4698      	mov	r8, r3
 80093ca:	46a1      	mov	r9, r4
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80093d2:	f04f 0200 	mov.w	r2, #0
 80093d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80093da:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80093de:	f7f7 fa35 	bl	800084c <__aeabi_ddiv>
 80093e2:	4602      	mov	r2, r0
 80093e4:	460b      	mov	r3, r1
 80093e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80093ea:	f7f6 ff4d 	bl	8000288 <__aeabi_dsub>
 80093ee:	4602      	mov	r2, r0
 80093f0:	460b      	mov	r3, r1
 80093f2:	4620      	mov	r0, r4
 80093f4:	4629      	mov	r1, r5
 80093f6:	f7f7 f8ff 	bl	80005f8 <__aeabi_dmul>
 80093fa:	4603      	mov	r3, r0
 80093fc:	460c      	mov	r4, r1
 80093fe:	461a      	mov	r2, r3
 8009400:	4623      	mov	r3, r4
 8009402:	4640      	mov	r0, r8
 8009404:	4649      	mov	r1, r9
 8009406:	f7f6 ff41 	bl	800028c <__adddf3>
 800940a:	4603      	mov	r3, r0
 800940c:	460c      	mov	r4, r1
 800940e:	68fa      	ldr	r2, [r7, #12]
 8009410:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8009414:	e0bd      	b.n	8009592 <scaraFlowLSPB+0x346>
	// Decelerate
	} else if ((tf - td) <= time && time <= tf) {
 8009416:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800941a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800941e:	f7f6 ff33 	bl	8000288 <__aeabi_dsub>
 8009422:	4602      	mov	r2, r0
 8009424:	460b      	mov	r3, r1
 8009426:	e9d7 0100 	ldrd	r0, r1, [r7]
 800942a:	f7f7 fb6b 	bl	8000b04 <__aeabi_dcmpge>
 800942e:	4603      	mov	r3, r0
 8009430:	2b00      	cmp	r3, #0
 8009432:	f000 809a 	beq.w	800956a <scaraFlowLSPB+0x31e>
 8009436:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800943a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800943e:	f7f7 fb57 	bl	8000af0 <__aeabi_dcmple>
 8009442:	4603      	mov	r3, r0
 8009444:	2b00      	cmp	r3, #0
 8009446:	f000 8090 	beq.w	800956a <scaraFlowLSPB+0x31e>
		lspb->a_current		=	-lspb->a_design;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8009450:	4614      	mov	r4, r2
 8009452:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	e9c3 451a 	strd	r4, r5, [r3, #104]	; 0x68
		lspb->v_current		=	lspb->v1 + lspb->a_design*(tf - time);
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	e9d3 890c 	ldrd	r8, r9, [r3, #48]	; 0x30
 8009468:	e9d7 2300 	ldrd	r2, r3, [r7]
 800946c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009470:	f7f6 ff0a 	bl	8000288 <__aeabi_dsub>
 8009474:	4602      	mov	r2, r0
 8009476:	460b      	mov	r3, r1
 8009478:	4640      	mov	r0, r8
 800947a:	4649      	mov	r1, r9
 800947c:	f7f7 f8bc 	bl	80005f8 <__aeabi_dmul>
 8009480:	4602      	mov	r2, r0
 8009482:	460b      	mov	r3, r1
 8009484:	4620      	mov	r0, r4
 8009486:	4629      	mov	r1, r5
 8009488:	f7f6 ff00 	bl	800028c <__adddf3>
 800948c:	4603      	mov	r3, r0
 800948e:	460c      	mov	r4, r1
 8009490:	68fa      	ldr	r2, [r7, #12]
 8009492:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s1 - lspb->v1*(tf - time)
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 80094a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094a6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80094aa:	f7f6 feed 	bl	8000288 <__aeabi_dsub>
 80094ae:	4602      	mov	r2, r0
 80094b0:	460b      	mov	r3, r1
 80094b2:	4640      	mov	r0, r8
 80094b4:	4649      	mov	r1, r9
 80094b6:	f7f7 f89f 	bl	80005f8 <__aeabi_dmul>
 80094ba:	4602      	mov	r2, r0
 80094bc:	460b      	mov	r3, r1
 80094be:	4620      	mov	r0, r4
 80094c0:	4629      	mov	r1, r5
 80094c2:	f7f6 fee1 	bl	8000288 <__aeabi_dsub>
 80094c6:	4603      	mov	r3, r0
 80094c8:	460c      	mov	r4, r1
 80094ca:	461d      	mov	r5, r3
 80094cc:	4626      	mov	r6, r4
								- (lspb->v_lim - lspb->v1)*(tf - time)*(tf - time)/(2*td);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 80094da:	461a      	mov	r2, r3
 80094dc:	4623      	mov	r3, r4
 80094de:	f7f6 fed3 	bl	8000288 <__aeabi_dsub>
 80094e2:	4603      	mov	r3, r0
 80094e4:	460c      	mov	r4, r1
 80094e6:	4698      	mov	r8, r3
 80094e8:	46a1      	mov	r9, r4
 80094ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094ee:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80094f2:	f7f6 fec9 	bl	8000288 <__aeabi_dsub>
 80094f6:	4603      	mov	r3, r0
 80094f8:	460c      	mov	r4, r1
 80094fa:	461a      	mov	r2, r3
 80094fc:	4623      	mov	r3, r4
 80094fe:	4640      	mov	r0, r8
 8009500:	4649      	mov	r1, r9
 8009502:	f7f7 f879 	bl	80005f8 <__aeabi_dmul>
 8009506:	4603      	mov	r3, r0
 8009508:	460c      	mov	r4, r1
 800950a:	4698      	mov	r8, r3
 800950c:	46a1      	mov	r9, r4
 800950e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009512:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009516:	f7f6 feb7 	bl	8000288 <__aeabi_dsub>
 800951a:	4603      	mov	r3, r0
 800951c:	460c      	mov	r4, r1
 800951e:	461a      	mov	r2, r3
 8009520:	4623      	mov	r3, r4
 8009522:	4640      	mov	r0, r8
 8009524:	4649      	mov	r1, r9
 8009526:	f7f7 f867 	bl	80005f8 <__aeabi_dmul>
 800952a:	4603      	mov	r3, r0
 800952c:	460c      	mov	r4, r1
 800952e:	4698      	mov	r8, r3
 8009530:	46a1      	mov	r9, r4
 8009532:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009536:	4602      	mov	r2, r0
 8009538:	460b      	mov	r3, r1
 800953a:	f7f6 fea7 	bl	800028c <__adddf3>
 800953e:	4603      	mov	r3, r0
 8009540:	460c      	mov	r4, r1
 8009542:	461a      	mov	r2, r3
 8009544:	4623      	mov	r3, r4
 8009546:	4640      	mov	r0, r8
 8009548:	4649      	mov	r1, r9
 800954a:	f7f7 f97f 	bl	800084c <__aeabi_ddiv>
 800954e:	4603      	mov	r3, r0
 8009550:	460c      	mov	r4, r1
 8009552:	461a      	mov	r2, r3
 8009554:	4623      	mov	r3, r4
 8009556:	4628      	mov	r0, r5
 8009558:	4631      	mov	r1, r6
 800955a:	f7f6 fe95 	bl	8000288 <__aeabi_dsub>
 800955e:	4603      	mov	r3, r0
 8009560:	460c      	mov	r4, r1
		lspb->s_current		=	lspb->s1 - lspb->v1*(tf - time)
 8009562:	68fa      	ldr	r2, [r7, #12]
 8009564:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8009568:	e013      	b.n	8009592 <scaraFlowLSPB+0x346>
	} else {
		lspb->a_current 	=	0;
 800956a:	68fa      	ldr	r2, [r7, #12]
 800956c:	f04f 0300 	mov.w	r3, #0
 8009570:	f04f 0400 	mov.w	r4, #0
 8009574:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	0;
 8009578:	68fa      	ldr	r2, [r7, #12]
 800957a:	f04f 0300 	mov.w	r3, #0
 800957e:	f04f 0400 	mov.w	r4, #0
 8009582:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->total_s;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 800958c:	68fa      	ldr	r2, [r7, #12]
 800958e:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	}

	return SCARA_STATUS_OK;
 8009592:	2300      	movs	r3, #0
}
 8009594:	4618      	mov	r0, r3
 8009596:	372c      	adds	r7, #44	; 0x2c
 8009598:	46bd      	mov	sp, r7
 800959a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800959e:	bf00      	nop
 80095a0:	3fe00000 	.word	0x3fe00000

080095a4 <scaraFLowScurve>:


/* Compute new s corresponding to time */
SCARA_StatusTypeDef	scaraFLowScurve		(Trajectory_Scurve_TypeDef *scurve, double time) {
 80095a4:	b5b0      	push	{r4, r5, r7, lr}
 80095a6:	b092      	sub	sp, #72	; 0x48
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6278      	str	r0, [r7, #36]	; 0x24
 80095ac:	ed87 0b06 	vstr	d0, [r7, #24]
	double j_max, tm, tc, t;

	j_max = scurve->j_max;
 80095b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b2:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80095b6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	tm	  = scurve->Tm;
 80095ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095bc:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80095c0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	tc	  = scurve->Tc;
 80095c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c6:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80095ca:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	 // SCURVE 4 PHASE: tc = 0;
	 if ( 4 == scurve->num_of_phase) {
 80095ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80095d4:	2b04      	cmp	r3, #4
 80095d6:	f040 8321 	bne.w	8009c1c <scaraFLowScurve+0x678>
		 // Phase 1
		 if ( (0.0f <= time) && ( time < tm)) {
 80095da:	f04f 0200 	mov.w	r2, #0
 80095de:	f04f 0300 	mov.w	r3, #0
 80095e2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80095e6:	f7f7 fa8d 	bl	8000b04 <__aeabi_dcmpge>
 80095ea:	4603      	mov	r3, r0
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d059      	beq.n	80096a4 <scaraFLowScurve+0x100>
 80095f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80095f4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80095f8:	f7f7 fa70 	bl	8000adc <__aeabi_dcmplt>
 80095fc:	4603      	mov	r3, r0
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d050      	beq.n	80096a4 <scaraFLowScurve+0x100>
			 t = time;
 8009602:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8009606:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*t;
 800960a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800960e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009612:	f7f6 fff1 	bl	80005f8 <__aeabi_dmul>
 8009616:	4603      	mov	r3, r0
 8009618:	460c      	mov	r4, r1
 800961a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800961c:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	= 	0.5*j_max*t*t;
 8009620:	f04f 0200 	mov.w	r2, #0
 8009624:	4b93      	ldr	r3, [pc, #588]	; (8009874 <scaraFLowScurve+0x2d0>)
 8009626:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800962a:	f7f6 ffe5 	bl	80005f8 <__aeabi_dmul>
 800962e:	4603      	mov	r3, r0
 8009630:	460c      	mov	r4, r1
 8009632:	4618      	mov	r0, r3
 8009634:	4621      	mov	r1, r4
 8009636:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800963a:	f7f6 ffdd 	bl	80005f8 <__aeabi_dmul>
 800963e:	4603      	mov	r3, r0
 8009640:	460c      	mov	r4, r1
 8009642:	4618      	mov	r0, r3
 8009644:	4621      	mov	r1, r4
 8009646:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800964a:	f7f6 ffd5 	bl	80005f8 <__aeabi_dmul>
 800964e:	4603      	mov	r3, r0
 8009650:	460c      	mov	r4, r1
 8009652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009654:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	= 	j_max*t*t*t/6;
 8009658:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800965c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009660:	f7f6 ffca 	bl	80005f8 <__aeabi_dmul>
 8009664:	4603      	mov	r3, r0
 8009666:	460c      	mov	r4, r1
 8009668:	4618      	mov	r0, r3
 800966a:	4621      	mov	r1, r4
 800966c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009670:	f7f6 ffc2 	bl	80005f8 <__aeabi_dmul>
 8009674:	4603      	mov	r3, r0
 8009676:	460c      	mov	r4, r1
 8009678:	4618      	mov	r0, r3
 800967a:	4621      	mov	r1, r4
 800967c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009680:	f7f6 ffba 	bl	80005f8 <__aeabi_dmul>
 8009684:	4603      	mov	r3, r0
 8009686:	460c      	mov	r4, r1
 8009688:	4618      	mov	r0, r3
 800968a:	4621      	mov	r1, r4
 800968c:	f04f 0200 	mov.w	r2, #0
 8009690:	4b79      	ldr	r3, [pc, #484]	; (8009878 <scaraFLowScurve+0x2d4>)
 8009692:	f7f7 f8db 	bl	800084c <__aeabi_ddiv>
 8009696:	4603      	mov	r3, r0
 8009698:	460c      	mov	r4, r1
 800969a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800969c:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 80096a0:	f000 be56 	b.w	800a350 <scaraFLowScurve+0xdac>
		 // Phase 2
		 } else if ( (tm <= time) && ( time < (2*tm) ) ) {
 80096a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80096a8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80096ac:	f7f7 fa20 	bl	8000af0 <__aeabi_dcmple>
 80096b0:	4603      	mov	r3, r0
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	f000 80e2 	beq.w	800987c <scaraFLowScurve+0x2d8>
 80096b8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80096bc:	4602      	mov	r2, r0
 80096be:	460b      	mov	r3, r1
 80096c0:	f7f6 fde4 	bl	800028c <__adddf3>
 80096c4:	4603      	mov	r3, r0
 80096c6:	460c      	mov	r4, r1
 80096c8:	461a      	mov	r2, r3
 80096ca:	4623      	mov	r3, r4
 80096cc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80096d0:	f7f7 fa04 	bl	8000adc <__aeabi_dcmplt>
 80096d4:	4603      	mov	r3, r0
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	f000 80d0 	beq.w	800987c <scaraFLowScurve+0x2d8>
			 t = time - tm;
 80096dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80096e0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80096e4:	f7f6 fdd0 	bl	8000288 <__aeabi_dsub>
 80096e8:	4603      	mov	r3, r0
 80096ea:	460c      	mov	r4, r1
 80096ec:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*tm - j_max*t;
 80096f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80096f4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80096f8:	f7f6 ff7e 	bl	80005f8 <__aeabi_dmul>
 80096fc:	4603      	mov	r3, r0
 80096fe:	460c      	mov	r4, r1
 8009700:	4625      	mov	r5, r4
 8009702:	461c      	mov	r4, r3
 8009704:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009708:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800970c:	f7f6 ff74 	bl	80005f8 <__aeabi_dmul>
 8009710:	4602      	mov	r2, r0
 8009712:	460b      	mov	r3, r1
 8009714:	4620      	mov	r0, r4
 8009716:	4629      	mov	r1, r5
 8009718:	f7f6 fdb6 	bl	8000288 <__aeabi_dsub>
 800971c:	4603      	mov	r3, r0
 800971e:	460c      	mov	r4, r1
 8009720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009722:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current 	= 	scurve->v_1 + j_max*tm*t - 0.5*j_max*t*t;
 8009726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009728:	e9d3 451e 	ldrd	r4, r5, [r3, #120]	; 0x78
 800972c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009730:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009734:	f7f6 ff60 	bl	80005f8 <__aeabi_dmul>
 8009738:	4602      	mov	r2, r0
 800973a:	460b      	mov	r3, r1
 800973c:	4610      	mov	r0, r2
 800973e:	4619      	mov	r1, r3
 8009740:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009744:	f7f6 ff58 	bl	80005f8 <__aeabi_dmul>
 8009748:	4602      	mov	r2, r0
 800974a:	460b      	mov	r3, r1
 800974c:	4620      	mov	r0, r4
 800974e:	4629      	mov	r1, r5
 8009750:	f7f6 fd9c 	bl	800028c <__adddf3>
 8009754:	4603      	mov	r3, r0
 8009756:	460c      	mov	r4, r1
 8009758:	4625      	mov	r5, r4
 800975a:	461c      	mov	r4, r3
 800975c:	f04f 0200 	mov.w	r2, #0
 8009760:	4b44      	ldr	r3, [pc, #272]	; (8009874 <scaraFLowScurve+0x2d0>)
 8009762:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009766:	f7f6 ff47 	bl	80005f8 <__aeabi_dmul>
 800976a:	4602      	mov	r2, r0
 800976c:	460b      	mov	r3, r1
 800976e:	4610      	mov	r0, r2
 8009770:	4619      	mov	r1, r3
 8009772:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009776:	f7f6 ff3f 	bl	80005f8 <__aeabi_dmul>
 800977a:	4602      	mov	r2, r0
 800977c:	460b      	mov	r3, r1
 800977e:	4610      	mov	r0, r2
 8009780:	4619      	mov	r1, r3
 8009782:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009786:	f7f6 ff37 	bl	80005f8 <__aeabi_dmul>
 800978a:	4602      	mov	r2, r0
 800978c:	460b      	mov	r3, r1
 800978e:	4620      	mov	r0, r4
 8009790:	4629      	mov	r1, r5
 8009792:	f7f6 fd79 	bl	8000288 <__aeabi_dsub>
 8009796:	4603      	mov	r3, r0
 8009798:	460c      	mov	r4, r1
 800979a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800979c:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	=	scurve->s_1 + scurve->v_1*t + 0.5*j_max*tm*t*t - j_max*t*t*t/6;
 80097a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a2:	e9d3 4520 	ldrd	r4, r5, [r3, #128]	; 0x80
 80097a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a8:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 80097ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80097b0:	f7f6 ff22 	bl	80005f8 <__aeabi_dmul>
 80097b4:	4602      	mov	r2, r0
 80097b6:	460b      	mov	r3, r1
 80097b8:	4620      	mov	r0, r4
 80097ba:	4629      	mov	r1, r5
 80097bc:	f7f6 fd66 	bl	800028c <__adddf3>
 80097c0:	4603      	mov	r3, r0
 80097c2:	460c      	mov	r4, r1
 80097c4:	4625      	mov	r5, r4
 80097c6:	461c      	mov	r4, r3
 80097c8:	f04f 0200 	mov.w	r2, #0
 80097cc:	4b29      	ldr	r3, [pc, #164]	; (8009874 <scaraFLowScurve+0x2d0>)
 80097ce:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80097d2:	f7f6 ff11 	bl	80005f8 <__aeabi_dmul>
 80097d6:	4602      	mov	r2, r0
 80097d8:	460b      	mov	r3, r1
 80097da:	4610      	mov	r0, r2
 80097dc:	4619      	mov	r1, r3
 80097de:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80097e2:	f7f6 ff09 	bl	80005f8 <__aeabi_dmul>
 80097e6:	4602      	mov	r2, r0
 80097e8:	460b      	mov	r3, r1
 80097ea:	4610      	mov	r0, r2
 80097ec:	4619      	mov	r1, r3
 80097ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80097f2:	f7f6 ff01 	bl	80005f8 <__aeabi_dmul>
 80097f6:	4602      	mov	r2, r0
 80097f8:	460b      	mov	r3, r1
 80097fa:	4610      	mov	r0, r2
 80097fc:	4619      	mov	r1, r3
 80097fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009802:	f7f6 fef9 	bl	80005f8 <__aeabi_dmul>
 8009806:	4602      	mov	r2, r0
 8009808:	460b      	mov	r3, r1
 800980a:	4620      	mov	r0, r4
 800980c:	4629      	mov	r1, r5
 800980e:	f7f6 fd3d 	bl	800028c <__adddf3>
 8009812:	4603      	mov	r3, r0
 8009814:	460c      	mov	r4, r1
 8009816:	4625      	mov	r5, r4
 8009818:	461c      	mov	r4, r3
 800981a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800981e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009822:	f7f6 fee9 	bl	80005f8 <__aeabi_dmul>
 8009826:	4602      	mov	r2, r0
 8009828:	460b      	mov	r3, r1
 800982a:	4610      	mov	r0, r2
 800982c:	4619      	mov	r1, r3
 800982e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009832:	f7f6 fee1 	bl	80005f8 <__aeabi_dmul>
 8009836:	4602      	mov	r2, r0
 8009838:	460b      	mov	r3, r1
 800983a:	4610      	mov	r0, r2
 800983c:	4619      	mov	r1, r3
 800983e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009842:	f7f6 fed9 	bl	80005f8 <__aeabi_dmul>
 8009846:	4602      	mov	r2, r0
 8009848:	460b      	mov	r3, r1
 800984a:	4610      	mov	r0, r2
 800984c:	4619      	mov	r1, r3
 800984e:	f04f 0200 	mov.w	r2, #0
 8009852:	4b09      	ldr	r3, [pc, #36]	; (8009878 <scaraFLowScurve+0x2d4>)
 8009854:	f7f6 fffa 	bl	800084c <__aeabi_ddiv>
 8009858:	4602      	mov	r2, r0
 800985a:	460b      	mov	r3, r1
 800985c:	4620      	mov	r0, r4
 800985e:	4629      	mov	r1, r5
 8009860:	f7f6 fd12 	bl	8000288 <__aeabi_dsub>
 8009864:	4603      	mov	r3, r0
 8009866:	460c      	mov	r4, r1
 8009868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800986a:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 800986e:	f000 bd6f 	b.w	800a350 <scaraFLowScurve+0xdac>
 8009872:	bf00      	nop
 8009874:	3fe00000 	.word	0x3fe00000
 8009878:	40180000 	.word	0x40180000
		 // Phase 3: does not exist
		 // Phase 4
		 } else if ( ((2*tm) <= time) && ( time < (3*tm)) ) {
 800987c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009880:	4602      	mov	r2, r0
 8009882:	460b      	mov	r3, r1
 8009884:	f7f6 fd02 	bl	800028c <__adddf3>
 8009888:	4603      	mov	r3, r0
 800988a:	460c      	mov	r4, r1
 800988c:	461a      	mov	r2, r3
 800988e:	4623      	mov	r3, r4
 8009890:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009894:	f7f7 f936 	bl	8000b04 <__aeabi_dcmpge>
 8009898:	4603      	mov	r3, r0
 800989a:	2b00      	cmp	r3, #0
 800989c:	f000 80a2 	beq.w	80099e4 <scaraFLowScurve+0x440>
 80098a0:	f04f 0200 	mov.w	r2, #0
 80098a4:	4b4c      	ldr	r3, [pc, #304]	; (80099d8 <scaraFLowScurve+0x434>)
 80098a6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80098aa:	f7f6 fea5 	bl	80005f8 <__aeabi_dmul>
 80098ae:	4603      	mov	r3, r0
 80098b0:	460c      	mov	r4, r1
 80098b2:	461a      	mov	r2, r3
 80098b4:	4623      	mov	r3, r4
 80098b6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80098ba:	f7f7 f90f 	bl	8000adc <__aeabi_dcmplt>
 80098be:	4603      	mov	r3, r0
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	f000 808f 	beq.w	80099e4 <scaraFLowScurve+0x440>
			 t = time - 2*tm;
 80098c6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80098ca:	4602      	mov	r2, r0
 80098cc:	460b      	mov	r3, r1
 80098ce:	f7f6 fcdd 	bl	800028c <__adddf3>
 80098d2:	4603      	mov	r3, r0
 80098d4:	460c      	mov	r4, r1
 80098d6:	461a      	mov	r2, r3
 80098d8:	4623      	mov	r3, r4
 80098da:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80098de:	f7f6 fcd3 	bl	8000288 <__aeabi_dsub>
 80098e2:	4603      	mov	r3, r0
 80098e4:	460c      	mov	r4, r1
 80098e6:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	=	-j_max*t;
 80098ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098ec:	613b      	str	r3, [r7, #16]
 80098ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80098f4:	617b      	str	r3, [r7, #20]
 80098f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80098fa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80098fe:	f7f6 fe7b 	bl	80005f8 <__aeabi_dmul>
 8009902:	4603      	mov	r3, r0
 8009904:	460c      	mov	r4, r1
 8009906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009908:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_2 - 0.5*j_max*t*t;
 800990c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800990e:	e9d3 4522 	ldrd	r4, r5, [r3, #136]	; 0x88
 8009912:	f04f 0200 	mov.w	r2, #0
 8009916:	4b31      	ldr	r3, [pc, #196]	; (80099dc <scaraFLowScurve+0x438>)
 8009918:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800991c:	f7f6 fe6c 	bl	80005f8 <__aeabi_dmul>
 8009920:	4602      	mov	r2, r0
 8009922:	460b      	mov	r3, r1
 8009924:	4610      	mov	r0, r2
 8009926:	4619      	mov	r1, r3
 8009928:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800992c:	f7f6 fe64 	bl	80005f8 <__aeabi_dmul>
 8009930:	4602      	mov	r2, r0
 8009932:	460b      	mov	r3, r1
 8009934:	4610      	mov	r0, r2
 8009936:	4619      	mov	r1, r3
 8009938:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800993c:	f7f6 fe5c 	bl	80005f8 <__aeabi_dmul>
 8009940:	4602      	mov	r2, r0
 8009942:	460b      	mov	r3, r1
 8009944:	4620      	mov	r0, r4
 8009946:	4629      	mov	r1, r5
 8009948:	f7f6 fc9e 	bl	8000288 <__aeabi_dsub>
 800994c:	4603      	mov	r3, r0
 800994e:	460c      	mov	r4, r1
 8009950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009952:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_2 + scurve->v_2*t - j_max*t*t*t/6;
 8009956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009958:	e9d3 4524 	ldrd	r4, r5, [r3, #144]	; 0x90
 800995c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800995e:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 8009962:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009966:	f7f6 fe47 	bl	80005f8 <__aeabi_dmul>
 800996a:	4602      	mov	r2, r0
 800996c:	460b      	mov	r3, r1
 800996e:	4620      	mov	r0, r4
 8009970:	4629      	mov	r1, r5
 8009972:	f7f6 fc8b 	bl	800028c <__adddf3>
 8009976:	4603      	mov	r3, r0
 8009978:	460c      	mov	r4, r1
 800997a:	4625      	mov	r5, r4
 800997c:	461c      	mov	r4, r3
 800997e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009982:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009986:	f7f6 fe37 	bl	80005f8 <__aeabi_dmul>
 800998a:	4602      	mov	r2, r0
 800998c:	460b      	mov	r3, r1
 800998e:	4610      	mov	r0, r2
 8009990:	4619      	mov	r1, r3
 8009992:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009996:	f7f6 fe2f 	bl	80005f8 <__aeabi_dmul>
 800999a:	4602      	mov	r2, r0
 800999c:	460b      	mov	r3, r1
 800999e:	4610      	mov	r0, r2
 80099a0:	4619      	mov	r1, r3
 80099a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80099a6:	f7f6 fe27 	bl	80005f8 <__aeabi_dmul>
 80099aa:	4602      	mov	r2, r0
 80099ac:	460b      	mov	r3, r1
 80099ae:	4610      	mov	r0, r2
 80099b0:	4619      	mov	r1, r3
 80099b2:	f04f 0200 	mov.w	r2, #0
 80099b6:	4b0a      	ldr	r3, [pc, #40]	; (80099e0 <scaraFLowScurve+0x43c>)
 80099b8:	f7f6 ff48 	bl	800084c <__aeabi_ddiv>
 80099bc:	4602      	mov	r2, r0
 80099be:	460b      	mov	r3, r1
 80099c0:	4620      	mov	r0, r4
 80099c2:	4629      	mov	r1, r5
 80099c4:	f7f6 fc60 	bl	8000288 <__aeabi_dsub>
 80099c8:	4603      	mov	r3, r0
 80099ca:	460c      	mov	r4, r1
 80099cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099ce:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 80099d2:	f000 bcbd 	b.w	800a350 <scaraFLowScurve+0xdac>
 80099d6:	bf00      	nop
 80099d8:	40080000 	.word	0x40080000
 80099dc:	3fe00000 	.word	0x3fe00000
 80099e0:	40180000 	.word	0x40180000
		 // Phase 5
		 } else if ( ((3*tm) <= time) && ( time < (4*tm)) ) {
 80099e4:	f04f 0200 	mov.w	r2, #0
 80099e8:	4b88      	ldr	r3, [pc, #544]	; (8009c0c <scaraFLowScurve+0x668>)
 80099ea:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80099ee:	f7f6 fe03 	bl	80005f8 <__aeabi_dmul>
 80099f2:	4603      	mov	r3, r0
 80099f4:	460c      	mov	r4, r1
 80099f6:	461a      	mov	r2, r3
 80099f8:	4623      	mov	r3, r4
 80099fa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80099fe:	f7f7 f881 	bl	8000b04 <__aeabi_dcmpge>
 8009a02:	4603      	mov	r3, r0
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	f000 80ec 	beq.w	8009be2 <scaraFLowScurve+0x63e>
 8009a0a:	f04f 0200 	mov.w	r2, #0
 8009a0e:	4b80      	ldr	r3, [pc, #512]	; (8009c10 <scaraFLowScurve+0x66c>)
 8009a10:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009a14:	f7f6 fdf0 	bl	80005f8 <__aeabi_dmul>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	460c      	mov	r4, r1
 8009a1c:	461a      	mov	r2, r3
 8009a1e:	4623      	mov	r3, r4
 8009a20:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009a24:	f7f7 f85a 	bl	8000adc <__aeabi_dcmplt>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	f000 80d9 	beq.w	8009be2 <scaraFLowScurve+0x63e>
			 t = time - 3*tm;
 8009a30:	f04f 0200 	mov.w	r2, #0
 8009a34:	4b75      	ldr	r3, [pc, #468]	; (8009c0c <scaraFLowScurve+0x668>)
 8009a36:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009a3a:	f7f6 fddd 	bl	80005f8 <__aeabi_dmul>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	460c      	mov	r4, r1
 8009a42:	461a      	mov	r2, r3
 8009a44:	4623      	mov	r3, r4
 8009a46:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009a4a:	f7f6 fc1d 	bl	8000288 <__aeabi_dsub>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	460c      	mov	r4, r1
 8009a52:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current	=	-j_max*tm + j_max*t;
 8009a56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a58:	60bb      	str	r3, [r7, #8]
 8009a5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a5c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009a60:	60fb      	str	r3, [r7, #12]
 8009a62:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009a66:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009a6a:	f7f6 fdc5 	bl	80005f8 <__aeabi_dmul>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	460c      	mov	r4, r1
 8009a72:	4625      	mov	r5, r4
 8009a74:	461c      	mov	r4, r3
 8009a76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009a7a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009a7e:	f7f6 fdbb 	bl	80005f8 <__aeabi_dmul>
 8009a82:	4602      	mov	r2, r0
 8009a84:	460b      	mov	r3, r1
 8009a86:	4620      	mov	r0, r4
 8009a88:	4629      	mov	r1, r5
 8009a8a:	f7f6 fbff 	bl	800028c <__adddf3>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	460c      	mov	r4, r1
 8009a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a94:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_4 - j_max*tm*t + 0.5*j_max*t*t;
 8009a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a9a:	e9d3 452a 	ldrd	r4, r5, [r3, #168]	; 0xa8
 8009a9e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009aa2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009aa6:	f7f6 fda7 	bl	80005f8 <__aeabi_dmul>
 8009aaa:	4602      	mov	r2, r0
 8009aac:	460b      	mov	r3, r1
 8009aae:	4610      	mov	r0, r2
 8009ab0:	4619      	mov	r1, r3
 8009ab2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009ab6:	f7f6 fd9f 	bl	80005f8 <__aeabi_dmul>
 8009aba:	4602      	mov	r2, r0
 8009abc:	460b      	mov	r3, r1
 8009abe:	4620      	mov	r0, r4
 8009ac0:	4629      	mov	r1, r5
 8009ac2:	f7f6 fbe1 	bl	8000288 <__aeabi_dsub>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	460c      	mov	r4, r1
 8009aca:	4625      	mov	r5, r4
 8009acc:	461c      	mov	r4, r3
 8009ace:	f04f 0200 	mov.w	r2, #0
 8009ad2:	4b50      	ldr	r3, [pc, #320]	; (8009c14 <scaraFLowScurve+0x670>)
 8009ad4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009ad8:	f7f6 fd8e 	bl	80005f8 <__aeabi_dmul>
 8009adc:	4602      	mov	r2, r0
 8009ade:	460b      	mov	r3, r1
 8009ae0:	4610      	mov	r0, r2
 8009ae2:	4619      	mov	r1, r3
 8009ae4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009ae8:	f7f6 fd86 	bl	80005f8 <__aeabi_dmul>
 8009aec:	4602      	mov	r2, r0
 8009aee:	460b      	mov	r3, r1
 8009af0:	4610      	mov	r0, r2
 8009af2:	4619      	mov	r1, r3
 8009af4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009af8:	f7f6 fd7e 	bl	80005f8 <__aeabi_dmul>
 8009afc:	4602      	mov	r2, r0
 8009afe:	460b      	mov	r3, r1
 8009b00:	4620      	mov	r0, r4
 8009b02:	4629      	mov	r1, r5
 8009b04:	f7f6 fbc2 	bl	800028c <__adddf3>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	460c      	mov	r4, r1
 8009b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b0e:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t
 8009b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b14:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 8009b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b1a:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
 8009b1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009b22:	f7f6 fd69 	bl	80005f8 <__aeabi_dmul>
 8009b26:	4602      	mov	r2, r0
 8009b28:	460b      	mov	r3, r1
 8009b2a:	4620      	mov	r0, r4
 8009b2c:	4629      	mov	r1, r5
 8009b2e:	f7f6 fbad 	bl	800028c <__adddf3>
 8009b32:	4603      	mov	r3, r0
 8009b34:	460c      	mov	r4, r1
 8009b36:	4625      	mov	r5, r4
 8009b38:	461c      	mov	r4, r3
									- 0.5*j_max*tm*t*t
 8009b3a:	f04f 0200 	mov.w	r2, #0
 8009b3e:	4b35      	ldr	r3, [pc, #212]	; (8009c14 <scaraFLowScurve+0x670>)
 8009b40:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009b44:	f7f6 fd58 	bl	80005f8 <__aeabi_dmul>
 8009b48:	4602      	mov	r2, r0
 8009b4a:	460b      	mov	r3, r1
 8009b4c:	4610      	mov	r0, r2
 8009b4e:	4619      	mov	r1, r3
 8009b50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009b54:	f7f6 fd50 	bl	80005f8 <__aeabi_dmul>
 8009b58:	4602      	mov	r2, r0
 8009b5a:	460b      	mov	r3, r1
 8009b5c:	4610      	mov	r0, r2
 8009b5e:	4619      	mov	r1, r3
 8009b60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009b64:	f7f6 fd48 	bl	80005f8 <__aeabi_dmul>
 8009b68:	4602      	mov	r2, r0
 8009b6a:	460b      	mov	r3, r1
 8009b6c:	4610      	mov	r0, r2
 8009b6e:	4619      	mov	r1, r3
 8009b70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009b74:	f7f6 fd40 	bl	80005f8 <__aeabi_dmul>
 8009b78:	4602      	mov	r2, r0
 8009b7a:	460b      	mov	r3, r1
 8009b7c:	4620      	mov	r0, r4
 8009b7e:	4629      	mov	r1, r5
 8009b80:	f7f6 fb82 	bl	8000288 <__aeabi_dsub>
 8009b84:	4603      	mov	r3, r0
 8009b86:	460c      	mov	r4, r1
 8009b88:	4625      	mov	r5, r4
 8009b8a:	461c      	mov	r4, r3
									+ j_max*t*t*t/6;
 8009b8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009b90:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009b94:	f7f6 fd30 	bl	80005f8 <__aeabi_dmul>
 8009b98:	4602      	mov	r2, r0
 8009b9a:	460b      	mov	r3, r1
 8009b9c:	4610      	mov	r0, r2
 8009b9e:	4619      	mov	r1, r3
 8009ba0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009ba4:	f7f6 fd28 	bl	80005f8 <__aeabi_dmul>
 8009ba8:	4602      	mov	r2, r0
 8009baa:	460b      	mov	r3, r1
 8009bac:	4610      	mov	r0, r2
 8009bae:	4619      	mov	r1, r3
 8009bb0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009bb4:	f7f6 fd20 	bl	80005f8 <__aeabi_dmul>
 8009bb8:	4602      	mov	r2, r0
 8009bba:	460b      	mov	r3, r1
 8009bbc:	4610      	mov	r0, r2
 8009bbe:	4619      	mov	r1, r3
 8009bc0:	f04f 0200 	mov.w	r2, #0
 8009bc4:	4b14      	ldr	r3, [pc, #80]	; (8009c18 <scaraFLowScurve+0x674>)
 8009bc6:	f7f6 fe41 	bl	800084c <__aeabi_ddiv>
 8009bca:	4602      	mov	r2, r0
 8009bcc:	460b      	mov	r3, r1
 8009bce:	4620      	mov	r0, r4
 8009bd0:	4629      	mov	r1, r5
 8009bd2:	f7f6 fb5b 	bl	800028c <__adddf3>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	460c      	mov	r4, r1
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t
 8009bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bdc:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8009be0:	e3b6      	b.n	800a350 <scaraFLowScurve+0xdac>
		 } else {
			 scurve->a_current = 0;
 8009be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009be4:	f04f 0300 	mov.w	r3, #0
 8009be8:	f04f 0400 	mov.w	r4, #0
 8009bec:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current = 0;
 8009bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bf2:	f04f 0300 	mov.w	r3, #0
 8009bf6:	f04f 0400 	mov.w	r4, #0
 8009bfa:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current = scurve->total_s;
 8009bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c00:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8009c04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c06:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8009c0a:	e3a1      	b.n	800a350 <scaraFLowScurve+0xdac>
 8009c0c:	40080000 	.word	0x40080000
 8009c10:	40100000 	.word	0x40100000
 8009c14:	3fe00000 	.word	0x3fe00000
 8009c18:	40180000 	.word	0x40180000
		 }

	 // SCURVE 5 PHASE: tc > 0
	 } else if ( 5 == scurve->num_of_phase) {
 8009c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009c22:	2b05      	cmp	r3, #5
 8009c24:	f040 8392 	bne.w	800a34c <scaraFLowScurve+0xda8>
		 // Phase 1
		 if ( (0 <= time) && ( time < tm)) {
 8009c28:	f04f 0200 	mov.w	r2, #0
 8009c2c:	f04f 0300 	mov.w	r3, #0
 8009c30:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009c34:	f7f6 ff66 	bl	8000b04 <__aeabi_dcmpge>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d058      	beq.n	8009cf0 <scaraFLowScurve+0x74c>
 8009c3e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009c42:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009c46:	f7f6 ff49 	bl	8000adc <__aeabi_dcmplt>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d04f      	beq.n	8009cf0 <scaraFLowScurve+0x74c>
			 t = time;
 8009c50:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8009c54:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*t;
 8009c58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009c5c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009c60:	f7f6 fcca 	bl	80005f8 <__aeabi_dmul>
 8009c64:	4603      	mov	r3, r0
 8009c66:	460c      	mov	r4, r1
 8009c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c6a:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	= 	0.5*j_max*t*t;
 8009c6e:	f04f 0200 	mov.w	r2, #0
 8009c72:	4b91      	ldr	r3, [pc, #580]	; (8009eb8 <scaraFLowScurve+0x914>)
 8009c74:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009c78:	f7f6 fcbe 	bl	80005f8 <__aeabi_dmul>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	460c      	mov	r4, r1
 8009c80:	4618      	mov	r0, r3
 8009c82:	4621      	mov	r1, r4
 8009c84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009c88:	f7f6 fcb6 	bl	80005f8 <__aeabi_dmul>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	460c      	mov	r4, r1
 8009c90:	4618      	mov	r0, r3
 8009c92:	4621      	mov	r1, r4
 8009c94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009c98:	f7f6 fcae 	bl	80005f8 <__aeabi_dmul>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	460c      	mov	r4, r1
 8009ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ca2:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	= 	j_max*t*t*t/6;
 8009ca6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009caa:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009cae:	f7f6 fca3 	bl	80005f8 <__aeabi_dmul>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	460c      	mov	r4, r1
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	4621      	mov	r1, r4
 8009cba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009cbe:	f7f6 fc9b 	bl	80005f8 <__aeabi_dmul>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	460c      	mov	r4, r1
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	4621      	mov	r1, r4
 8009cca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009cce:	f7f6 fc93 	bl	80005f8 <__aeabi_dmul>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	460c      	mov	r4, r1
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	4621      	mov	r1, r4
 8009cda:	f04f 0200 	mov.w	r2, #0
 8009cde:	4b77      	ldr	r3, [pc, #476]	; (8009ebc <scaraFLowScurve+0x918>)
 8009ce0:	f7f6 fdb4 	bl	800084c <__aeabi_ddiv>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	460c      	mov	r4, r1
 8009ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cea:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8009cee:	e32f      	b.n	800a350 <scaraFLowScurve+0xdac>
		 // Phase 2
		 } else if ( (tm <= time) && ( time < (2*tm) ) ) {
 8009cf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009cf4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009cf8:	f7f6 fefa 	bl	8000af0 <__aeabi_dcmple>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	f000 80de 	beq.w	8009ec0 <scaraFLowScurve+0x91c>
 8009d04:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009d08:	4602      	mov	r2, r0
 8009d0a:	460b      	mov	r3, r1
 8009d0c:	f7f6 fabe 	bl	800028c <__adddf3>
 8009d10:	4602      	mov	r2, r0
 8009d12:	460b      	mov	r3, r1
 8009d14:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009d18:	f7f6 fee0 	bl	8000adc <__aeabi_dcmplt>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	f000 80ce 	beq.w	8009ec0 <scaraFLowScurve+0x91c>
			 t = time - tm;
 8009d24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009d28:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009d2c:	f7f6 faac 	bl	8000288 <__aeabi_dsub>
 8009d30:	4603      	mov	r3, r0
 8009d32:	460c      	mov	r4, r1
 8009d34:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*tm - j_max*t;
 8009d38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009d3c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009d40:	f7f6 fc5a 	bl	80005f8 <__aeabi_dmul>
 8009d44:	4603      	mov	r3, r0
 8009d46:	460c      	mov	r4, r1
 8009d48:	4625      	mov	r5, r4
 8009d4a:	461c      	mov	r4, r3
 8009d4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009d50:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009d54:	f7f6 fc50 	bl	80005f8 <__aeabi_dmul>
 8009d58:	4602      	mov	r2, r0
 8009d5a:	460b      	mov	r3, r1
 8009d5c:	4620      	mov	r0, r4
 8009d5e:	4629      	mov	r1, r5
 8009d60:	f7f6 fa92 	bl	8000288 <__aeabi_dsub>
 8009d64:	4603      	mov	r3, r0
 8009d66:	460c      	mov	r4, r1
 8009d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d6a:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current 	= 	scurve->v_1 + j_max*tm*t - 0.5*j_max*t*t;
 8009d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d70:	e9d3 451e 	ldrd	r4, r5, [r3, #120]	; 0x78
 8009d74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009d78:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009d7c:	f7f6 fc3c 	bl	80005f8 <__aeabi_dmul>
 8009d80:	4602      	mov	r2, r0
 8009d82:	460b      	mov	r3, r1
 8009d84:	4610      	mov	r0, r2
 8009d86:	4619      	mov	r1, r3
 8009d88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009d8c:	f7f6 fc34 	bl	80005f8 <__aeabi_dmul>
 8009d90:	4602      	mov	r2, r0
 8009d92:	460b      	mov	r3, r1
 8009d94:	4620      	mov	r0, r4
 8009d96:	4629      	mov	r1, r5
 8009d98:	f7f6 fa78 	bl	800028c <__adddf3>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	460c      	mov	r4, r1
 8009da0:	4625      	mov	r5, r4
 8009da2:	461c      	mov	r4, r3
 8009da4:	f04f 0200 	mov.w	r2, #0
 8009da8:	4b43      	ldr	r3, [pc, #268]	; (8009eb8 <scaraFLowScurve+0x914>)
 8009daa:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009dae:	f7f6 fc23 	bl	80005f8 <__aeabi_dmul>
 8009db2:	4602      	mov	r2, r0
 8009db4:	460b      	mov	r3, r1
 8009db6:	4610      	mov	r0, r2
 8009db8:	4619      	mov	r1, r3
 8009dba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009dbe:	f7f6 fc1b 	bl	80005f8 <__aeabi_dmul>
 8009dc2:	4602      	mov	r2, r0
 8009dc4:	460b      	mov	r3, r1
 8009dc6:	4610      	mov	r0, r2
 8009dc8:	4619      	mov	r1, r3
 8009dca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009dce:	f7f6 fc13 	bl	80005f8 <__aeabi_dmul>
 8009dd2:	4602      	mov	r2, r0
 8009dd4:	460b      	mov	r3, r1
 8009dd6:	4620      	mov	r0, r4
 8009dd8:	4629      	mov	r1, r5
 8009dda:	f7f6 fa55 	bl	8000288 <__aeabi_dsub>
 8009dde:	4603      	mov	r3, r0
 8009de0:	460c      	mov	r4, r1
 8009de2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009de4:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	=	scurve->s_1 + scurve->v_1*t + 0.5*j_max*tm*t*t - j_max*t*t*t/6;
 8009de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dea:	e9d3 4520 	ldrd	r4, r5, [r3, #128]	; 0x80
 8009dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df0:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8009df4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009df8:	f7f6 fbfe 	bl	80005f8 <__aeabi_dmul>
 8009dfc:	4602      	mov	r2, r0
 8009dfe:	460b      	mov	r3, r1
 8009e00:	4620      	mov	r0, r4
 8009e02:	4629      	mov	r1, r5
 8009e04:	f7f6 fa42 	bl	800028c <__adddf3>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	460c      	mov	r4, r1
 8009e0c:	4625      	mov	r5, r4
 8009e0e:	461c      	mov	r4, r3
 8009e10:	f04f 0200 	mov.w	r2, #0
 8009e14:	4b28      	ldr	r3, [pc, #160]	; (8009eb8 <scaraFLowScurve+0x914>)
 8009e16:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009e1a:	f7f6 fbed 	bl	80005f8 <__aeabi_dmul>
 8009e1e:	4602      	mov	r2, r0
 8009e20:	460b      	mov	r3, r1
 8009e22:	4610      	mov	r0, r2
 8009e24:	4619      	mov	r1, r3
 8009e26:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009e2a:	f7f6 fbe5 	bl	80005f8 <__aeabi_dmul>
 8009e2e:	4602      	mov	r2, r0
 8009e30:	460b      	mov	r3, r1
 8009e32:	4610      	mov	r0, r2
 8009e34:	4619      	mov	r1, r3
 8009e36:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009e3a:	f7f6 fbdd 	bl	80005f8 <__aeabi_dmul>
 8009e3e:	4602      	mov	r2, r0
 8009e40:	460b      	mov	r3, r1
 8009e42:	4610      	mov	r0, r2
 8009e44:	4619      	mov	r1, r3
 8009e46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009e4a:	f7f6 fbd5 	bl	80005f8 <__aeabi_dmul>
 8009e4e:	4602      	mov	r2, r0
 8009e50:	460b      	mov	r3, r1
 8009e52:	4620      	mov	r0, r4
 8009e54:	4629      	mov	r1, r5
 8009e56:	f7f6 fa19 	bl	800028c <__adddf3>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	460c      	mov	r4, r1
 8009e5e:	4625      	mov	r5, r4
 8009e60:	461c      	mov	r4, r3
 8009e62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009e66:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009e6a:	f7f6 fbc5 	bl	80005f8 <__aeabi_dmul>
 8009e6e:	4602      	mov	r2, r0
 8009e70:	460b      	mov	r3, r1
 8009e72:	4610      	mov	r0, r2
 8009e74:	4619      	mov	r1, r3
 8009e76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009e7a:	f7f6 fbbd 	bl	80005f8 <__aeabi_dmul>
 8009e7e:	4602      	mov	r2, r0
 8009e80:	460b      	mov	r3, r1
 8009e82:	4610      	mov	r0, r2
 8009e84:	4619      	mov	r1, r3
 8009e86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009e8a:	f7f6 fbb5 	bl	80005f8 <__aeabi_dmul>
 8009e8e:	4602      	mov	r2, r0
 8009e90:	460b      	mov	r3, r1
 8009e92:	4610      	mov	r0, r2
 8009e94:	4619      	mov	r1, r3
 8009e96:	f04f 0200 	mov.w	r2, #0
 8009e9a:	4b08      	ldr	r3, [pc, #32]	; (8009ebc <scaraFLowScurve+0x918>)
 8009e9c:	f7f6 fcd6 	bl	800084c <__aeabi_ddiv>
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	460b      	mov	r3, r1
 8009ea4:	4620      	mov	r0, r4
 8009ea6:	4629      	mov	r1, r5
 8009ea8:	f7f6 f9ee 	bl	8000288 <__aeabi_dsub>
 8009eac:	4603      	mov	r3, r0
 8009eae:	460c      	mov	r4, r1
 8009eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009eb2:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8009eb6:	e24b      	b.n	800a350 <scaraFLowScurve+0xdac>
 8009eb8:	3fe00000 	.word	0x3fe00000
 8009ebc:	40180000 	.word	0x40180000
		 // Phase 3
		 } else if ( ((2*tm) <= time) && ( time < (2*tm + tc)) ) {
 8009ec0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009ec4:	4602      	mov	r2, r0
 8009ec6:	460b      	mov	r3, r1
 8009ec8:	f7f6 f9e0 	bl	800028c <__adddf3>
 8009ecc:	4602      	mov	r2, r0
 8009ece:	460b      	mov	r3, r1
 8009ed0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009ed4:	f7f6 fe16 	bl	8000b04 <__aeabi_dcmpge>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d04b      	beq.n	8009f76 <scaraFLowScurve+0x9d2>
 8009ede:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009ee2:	4602      	mov	r2, r0
 8009ee4:	460b      	mov	r3, r1
 8009ee6:	f7f6 f9d1 	bl	800028c <__adddf3>
 8009eea:	4602      	mov	r2, r0
 8009eec:	460b      	mov	r3, r1
 8009eee:	4610      	mov	r0, r2
 8009ef0:	4619      	mov	r1, r3
 8009ef2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009ef6:	f7f6 f9c9 	bl	800028c <__adddf3>
 8009efa:	4602      	mov	r2, r0
 8009efc:	460b      	mov	r3, r1
 8009efe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009f02:	f7f6 fdeb 	bl	8000adc <__aeabi_dcmplt>
 8009f06:	4603      	mov	r3, r0
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d034      	beq.n	8009f76 <scaraFLowScurve+0x9d2>
			 t = time - 2*tm;
 8009f0c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009f10:	4602      	mov	r2, r0
 8009f12:	460b      	mov	r3, r1
 8009f14:	f7f6 f9ba 	bl	800028c <__adddf3>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	460c      	mov	r4, r1
 8009f1c:	461a      	mov	r2, r3
 8009f1e:	4623      	mov	r3, r4
 8009f20:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009f24:	f7f6 f9b0 	bl	8000288 <__aeabi_dsub>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	460c      	mov	r4, r1
 8009f2c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	=	0;
 8009f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f32:	f04f 0300 	mov.w	r3, #0
 8009f36:	f04f 0400 	mov.w	r4, #0
 8009f3a:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_2;
 8009f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f40:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 8009f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f46:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_2 + scurve->v_2*t;
 8009f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f4c:	e9d3 4524 	ldrd	r4, r5, [r3, #144]	; 0x90
 8009f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f52:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 8009f56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009f5a:	f7f6 fb4d 	bl	80005f8 <__aeabi_dmul>
 8009f5e:	4602      	mov	r2, r0
 8009f60:	460b      	mov	r3, r1
 8009f62:	4620      	mov	r0, r4
 8009f64:	4629      	mov	r1, r5
 8009f66:	f7f6 f991 	bl	800028c <__adddf3>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	460c      	mov	r4, r1
 8009f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f70:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8009f74:	e1ec      	b.n	800a350 <scaraFLowScurve+0xdac>
		 // Phase 4
		 } else if ( ((2*tm + tc) <= time) && ( time < (3*tm + tc)) ) {
 8009f76:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009f7a:	4602      	mov	r2, r0
 8009f7c:	460b      	mov	r3, r1
 8009f7e:	f7f6 f985 	bl	800028c <__adddf3>
 8009f82:	4602      	mov	r2, r0
 8009f84:	460b      	mov	r3, r1
 8009f86:	4610      	mov	r0, r2
 8009f88:	4619      	mov	r1, r3
 8009f8a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009f8e:	f7f6 f97d 	bl	800028c <__adddf3>
 8009f92:	4602      	mov	r2, r0
 8009f94:	460b      	mov	r3, r1
 8009f96:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009f9a:	f7f6 fdb3 	bl	8000b04 <__aeabi_dcmpge>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	f000 80af 	beq.w	800a104 <scaraFLowScurve+0xb60>
 8009fa6:	f04f 0200 	mov.w	r2, #0
 8009faa:	4b53      	ldr	r3, [pc, #332]	; (800a0f8 <scaraFLowScurve+0xb54>)
 8009fac:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009fb0:	f7f6 fb22 	bl	80005f8 <__aeabi_dmul>
 8009fb4:	4602      	mov	r2, r0
 8009fb6:	460b      	mov	r3, r1
 8009fb8:	4610      	mov	r0, r2
 8009fba:	4619      	mov	r1, r3
 8009fbc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009fc0:	f7f6 f964 	bl	800028c <__adddf3>
 8009fc4:	4602      	mov	r2, r0
 8009fc6:	460b      	mov	r3, r1
 8009fc8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009fcc:	f7f6 fd86 	bl	8000adc <__aeabi_dcmplt>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	f000 8096 	beq.w	800a104 <scaraFLowScurve+0xb60>
			 t = time - (2*tm + tc);
 8009fd8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009fdc:	4602      	mov	r2, r0
 8009fde:	460b      	mov	r3, r1
 8009fe0:	f7f6 f954 	bl	800028c <__adddf3>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	460c      	mov	r4, r1
 8009fe8:	4618      	mov	r0, r3
 8009fea:	4621      	mov	r1, r4
 8009fec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009ff0:	f7f6 f94c 	bl	800028c <__adddf3>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	460c      	mov	r4, r1
 8009ff8:	461a      	mov	r2, r3
 8009ffa:	4623      	mov	r3, r4
 8009ffc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a000:	f7f6 f942 	bl	8000288 <__aeabi_dsub>
 800a004:	4603      	mov	r3, r0
 800a006:	460c      	mov	r4, r1
 800a008:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	=	-j_max*t;
 800a00c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a00e:	603b      	str	r3, [r7, #0]
 800a010:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a012:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a016:	607b      	str	r3, [r7, #4]
 800a018:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a01c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a020:	f7f6 faea 	bl	80005f8 <__aeabi_dmul>
 800a024:	4603      	mov	r3, r0
 800a026:	460c      	mov	r4, r1
 800a028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a02a:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_3 - 0.5*j_max*t*t;
 800a02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a030:	e9d3 4526 	ldrd	r4, r5, [r3, #152]	; 0x98
 800a034:	f04f 0200 	mov.w	r2, #0
 800a038:	4b30      	ldr	r3, [pc, #192]	; (800a0fc <scaraFLowScurve+0xb58>)
 800a03a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800a03e:	f7f6 fadb 	bl	80005f8 <__aeabi_dmul>
 800a042:	4602      	mov	r2, r0
 800a044:	460b      	mov	r3, r1
 800a046:	4610      	mov	r0, r2
 800a048:	4619      	mov	r1, r3
 800a04a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a04e:	f7f6 fad3 	bl	80005f8 <__aeabi_dmul>
 800a052:	4602      	mov	r2, r0
 800a054:	460b      	mov	r3, r1
 800a056:	4610      	mov	r0, r2
 800a058:	4619      	mov	r1, r3
 800a05a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a05e:	f7f6 facb 	bl	80005f8 <__aeabi_dmul>
 800a062:	4602      	mov	r2, r0
 800a064:	460b      	mov	r3, r1
 800a066:	4620      	mov	r0, r4
 800a068:	4629      	mov	r1, r5
 800a06a:	f7f6 f90d 	bl	8000288 <__aeabi_dsub>
 800a06e:	4603      	mov	r3, r0
 800a070:	460c      	mov	r4, r1
 800a072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a074:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_3 + scurve->v_3*t - j_max*t*t*t/6;
 800a078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a07a:	e9d3 4528 	ldrd	r4, r5, [r3, #160]	; 0xa0
 800a07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a080:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 800a084:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a088:	f7f6 fab6 	bl	80005f8 <__aeabi_dmul>
 800a08c:	4602      	mov	r2, r0
 800a08e:	460b      	mov	r3, r1
 800a090:	4620      	mov	r0, r4
 800a092:	4629      	mov	r1, r5
 800a094:	f7f6 f8fa 	bl	800028c <__adddf3>
 800a098:	4603      	mov	r3, r0
 800a09a:	460c      	mov	r4, r1
 800a09c:	4625      	mov	r5, r4
 800a09e:	461c      	mov	r4, r3
 800a0a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a0a4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800a0a8:	f7f6 faa6 	bl	80005f8 <__aeabi_dmul>
 800a0ac:	4602      	mov	r2, r0
 800a0ae:	460b      	mov	r3, r1
 800a0b0:	4610      	mov	r0, r2
 800a0b2:	4619      	mov	r1, r3
 800a0b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a0b8:	f7f6 fa9e 	bl	80005f8 <__aeabi_dmul>
 800a0bc:	4602      	mov	r2, r0
 800a0be:	460b      	mov	r3, r1
 800a0c0:	4610      	mov	r0, r2
 800a0c2:	4619      	mov	r1, r3
 800a0c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a0c8:	f7f6 fa96 	bl	80005f8 <__aeabi_dmul>
 800a0cc:	4602      	mov	r2, r0
 800a0ce:	460b      	mov	r3, r1
 800a0d0:	4610      	mov	r0, r2
 800a0d2:	4619      	mov	r1, r3
 800a0d4:	f04f 0200 	mov.w	r2, #0
 800a0d8:	4b09      	ldr	r3, [pc, #36]	; (800a100 <scaraFLowScurve+0xb5c>)
 800a0da:	f7f6 fbb7 	bl	800084c <__aeabi_ddiv>
 800a0de:	4602      	mov	r2, r0
 800a0e0:	460b      	mov	r3, r1
 800a0e2:	4620      	mov	r0, r4
 800a0e4:	4629      	mov	r1, r5
 800a0e6:	f7f6 f8cf 	bl	8000288 <__aeabi_dsub>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	460c      	mov	r4, r1
 800a0ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0f0:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 800a0f4:	e12c      	b.n	800a350 <scaraFLowScurve+0xdac>
 800a0f6:	bf00      	nop
 800a0f8:	40080000 	.word	0x40080000
 800a0fc:	3fe00000 	.word	0x3fe00000
 800a100:	40180000 	.word	0x40180000
		 // Phase 5
		 } else if ( ((3*tm + tc) <= time) && ( time < (4*tm + tc)) ) {
 800a104:	f04f 0200 	mov.w	r2, #0
 800a108:	4b94      	ldr	r3, [pc, #592]	; (800a35c <scaraFLowScurve+0xdb8>)
 800a10a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a10e:	f7f6 fa73 	bl	80005f8 <__aeabi_dmul>
 800a112:	4602      	mov	r2, r0
 800a114:	460b      	mov	r3, r1
 800a116:	4610      	mov	r0, r2
 800a118:	4619      	mov	r1, r3
 800a11a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a11e:	f7f6 f8b5 	bl	800028c <__adddf3>
 800a122:	4602      	mov	r2, r0
 800a124:	460b      	mov	r3, r1
 800a126:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a12a:	f7f6 fceb 	bl	8000b04 <__aeabi_dcmpge>
 800a12e:	4603      	mov	r3, r0
 800a130:	2b00      	cmp	r3, #0
 800a132:	f000 80f6 	beq.w	800a322 <scaraFLowScurve+0xd7e>
 800a136:	f04f 0200 	mov.w	r2, #0
 800a13a:	4b89      	ldr	r3, [pc, #548]	; (800a360 <scaraFLowScurve+0xdbc>)
 800a13c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a140:	f7f6 fa5a 	bl	80005f8 <__aeabi_dmul>
 800a144:	4602      	mov	r2, r0
 800a146:	460b      	mov	r3, r1
 800a148:	4610      	mov	r0, r2
 800a14a:	4619      	mov	r1, r3
 800a14c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a150:	f7f6 f89c 	bl	800028c <__adddf3>
 800a154:	4602      	mov	r2, r0
 800a156:	460b      	mov	r3, r1
 800a158:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a15c:	f7f6 fcbe 	bl	8000adc <__aeabi_dcmplt>
 800a160:	4603      	mov	r3, r0
 800a162:	2b00      	cmp	r3, #0
 800a164:	f000 80dd 	beq.w	800a322 <scaraFLowScurve+0xd7e>
			 t = time - (3*tm + tc);
 800a168:	f04f 0200 	mov.w	r2, #0
 800a16c:	4b7b      	ldr	r3, [pc, #492]	; (800a35c <scaraFLowScurve+0xdb8>)
 800a16e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a172:	f7f6 fa41 	bl	80005f8 <__aeabi_dmul>
 800a176:	4602      	mov	r2, r0
 800a178:	460b      	mov	r3, r1
 800a17a:	4610      	mov	r0, r2
 800a17c:	4619      	mov	r1, r3
 800a17e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a182:	f7f6 f883 	bl	800028c <__adddf3>
 800a186:	4602      	mov	r2, r0
 800a188:	460b      	mov	r3, r1
 800a18a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a18e:	f7f6 f87b 	bl	8000288 <__aeabi_dsub>
 800a192:	4602      	mov	r2, r0
 800a194:	460b      	mov	r3, r1
 800a196:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			 scurve->a_current	=	-j_max*tm + j_max*t;
 800a19a:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800a19c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a19e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800a1a2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a1a6:	4620      	mov	r0, r4
 800a1a8:	4629      	mov	r1, r5
 800a1aa:	f7f6 fa25 	bl	80005f8 <__aeabi_dmul>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	460c      	mov	r4, r1
 800a1b2:	4625      	mov	r5, r4
 800a1b4:	461c      	mov	r4, r3
 800a1b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a1ba:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800a1be:	f7f6 fa1b 	bl	80005f8 <__aeabi_dmul>
 800a1c2:	4602      	mov	r2, r0
 800a1c4:	460b      	mov	r3, r1
 800a1c6:	4620      	mov	r0, r4
 800a1c8:	4629      	mov	r1, r5
 800a1ca:	f7f6 f85f 	bl	800028c <__adddf3>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	460c      	mov	r4, r1
 800a1d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1d4:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_4 - j_max*tm*t + 0.5*j_max*t*t;
 800a1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1da:	e9d3 452a 	ldrd	r4, r5, [r3, #168]	; 0xa8
 800a1de:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a1e2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800a1e6:	f7f6 fa07 	bl	80005f8 <__aeabi_dmul>
 800a1ea:	4602      	mov	r2, r0
 800a1ec:	460b      	mov	r3, r1
 800a1ee:	4610      	mov	r0, r2
 800a1f0:	4619      	mov	r1, r3
 800a1f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a1f6:	f7f6 f9ff 	bl	80005f8 <__aeabi_dmul>
 800a1fa:	4602      	mov	r2, r0
 800a1fc:	460b      	mov	r3, r1
 800a1fe:	4620      	mov	r0, r4
 800a200:	4629      	mov	r1, r5
 800a202:	f7f6 f841 	bl	8000288 <__aeabi_dsub>
 800a206:	4603      	mov	r3, r0
 800a208:	460c      	mov	r4, r1
 800a20a:	4625      	mov	r5, r4
 800a20c:	461c      	mov	r4, r3
 800a20e:	f04f 0200 	mov.w	r2, #0
 800a212:	4b54      	ldr	r3, [pc, #336]	; (800a364 <scaraFLowScurve+0xdc0>)
 800a214:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800a218:	f7f6 f9ee 	bl	80005f8 <__aeabi_dmul>
 800a21c:	4602      	mov	r2, r0
 800a21e:	460b      	mov	r3, r1
 800a220:	4610      	mov	r0, r2
 800a222:	4619      	mov	r1, r3
 800a224:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a228:	f7f6 f9e6 	bl	80005f8 <__aeabi_dmul>
 800a22c:	4602      	mov	r2, r0
 800a22e:	460b      	mov	r3, r1
 800a230:	4610      	mov	r0, r2
 800a232:	4619      	mov	r1, r3
 800a234:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a238:	f7f6 f9de 	bl	80005f8 <__aeabi_dmul>
 800a23c:	4602      	mov	r2, r0
 800a23e:	460b      	mov	r3, r1
 800a240:	4620      	mov	r0, r4
 800a242:	4629      	mov	r1, r5
 800a244:	f7f6 f822 	bl	800028c <__adddf3>
 800a248:	4603      	mov	r3, r0
 800a24a:	460c      	mov	r4, r1
 800a24c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a24e:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t - 0.5*j_max*tm*t*t + j_max*t*t*t/6;
 800a252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a254:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 800a258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a25a:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
 800a25e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a262:	f7f6 f9c9 	bl	80005f8 <__aeabi_dmul>
 800a266:	4602      	mov	r2, r0
 800a268:	460b      	mov	r3, r1
 800a26a:	4620      	mov	r0, r4
 800a26c:	4629      	mov	r1, r5
 800a26e:	f7f6 f80d 	bl	800028c <__adddf3>
 800a272:	4603      	mov	r3, r0
 800a274:	460c      	mov	r4, r1
 800a276:	4625      	mov	r5, r4
 800a278:	461c      	mov	r4, r3
 800a27a:	f04f 0200 	mov.w	r2, #0
 800a27e:	4b39      	ldr	r3, [pc, #228]	; (800a364 <scaraFLowScurve+0xdc0>)
 800a280:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800a284:	f7f6 f9b8 	bl	80005f8 <__aeabi_dmul>
 800a288:	4602      	mov	r2, r0
 800a28a:	460b      	mov	r3, r1
 800a28c:	4610      	mov	r0, r2
 800a28e:	4619      	mov	r1, r3
 800a290:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a294:	f7f6 f9b0 	bl	80005f8 <__aeabi_dmul>
 800a298:	4602      	mov	r2, r0
 800a29a:	460b      	mov	r3, r1
 800a29c:	4610      	mov	r0, r2
 800a29e:	4619      	mov	r1, r3
 800a2a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a2a4:	f7f6 f9a8 	bl	80005f8 <__aeabi_dmul>
 800a2a8:	4602      	mov	r2, r0
 800a2aa:	460b      	mov	r3, r1
 800a2ac:	4610      	mov	r0, r2
 800a2ae:	4619      	mov	r1, r3
 800a2b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a2b4:	f7f6 f9a0 	bl	80005f8 <__aeabi_dmul>
 800a2b8:	4602      	mov	r2, r0
 800a2ba:	460b      	mov	r3, r1
 800a2bc:	4620      	mov	r0, r4
 800a2be:	4629      	mov	r1, r5
 800a2c0:	f7f5 ffe2 	bl	8000288 <__aeabi_dsub>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	460c      	mov	r4, r1
 800a2c8:	4625      	mov	r5, r4
 800a2ca:	461c      	mov	r4, r3
 800a2cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a2d0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800a2d4:	f7f6 f990 	bl	80005f8 <__aeabi_dmul>
 800a2d8:	4602      	mov	r2, r0
 800a2da:	460b      	mov	r3, r1
 800a2dc:	4610      	mov	r0, r2
 800a2de:	4619      	mov	r1, r3
 800a2e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a2e4:	f7f6 f988 	bl	80005f8 <__aeabi_dmul>
 800a2e8:	4602      	mov	r2, r0
 800a2ea:	460b      	mov	r3, r1
 800a2ec:	4610      	mov	r0, r2
 800a2ee:	4619      	mov	r1, r3
 800a2f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a2f4:	f7f6 f980 	bl	80005f8 <__aeabi_dmul>
 800a2f8:	4602      	mov	r2, r0
 800a2fa:	460b      	mov	r3, r1
 800a2fc:	4610      	mov	r0, r2
 800a2fe:	4619      	mov	r1, r3
 800a300:	f04f 0200 	mov.w	r2, #0
 800a304:	4b18      	ldr	r3, [pc, #96]	; (800a368 <scaraFLowScurve+0xdc4>)
 800a306:	f7f6 faa1 	bl	800084c <__aeabi_ddiv>
 800a30a:	4602      	mov	r2, r0
 800a30c:	460b      	mov	r3, r1
 800a30e:	4620      	mov	r0, r4
 800a310:	4629      	mov	r1, r5
 800a312:	f7f5 ffbb 	bl	800028c <__adddf3>
 800a316:	4603      	mov	r3, r0
 800a318:	460c      	mov	r4, r1
 800a31a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a31c:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 800a320:	e016      	b.n	800a350 <scaraFLowScurve+0xdac>
		 } else {
			 scurve->a_current = 0;
 800a322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a324:	f04f 0300 	mov.w	r3, #0
 800a328:	f04f 0400 	mov.w	r4, #0
 800a32c:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current = 0;
 800a330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a332:	f04f 0300 	mov.w	r3, #0
 800a336:	f04f 0400 	mov.w	r4, #0
 800a33a:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current = scurve->total_s;
 800a33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a340:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 800a344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a346:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 800a34a:	e001      	b.n	800a350 <scaraFLowScurve+0xdac>
		 }

	 } else {
		 return SCARA_STATUS_ERROR;
 800a34c:	2301      	movs	r3, #1
 800a34e:	e000      	b.n	800a352 <scaraFLowScurve+0xdae>
	 }

	 return SCARA_STATUS_OK;
 800a350:	2300      	movs	r3, #0
}
 800a352:	4618      	mov	r0, r3
 800a354:	3748      	adds	r7, #72	; 0x48
 800a356:	46bd      	mov	sp, r7
 800a358:	bdb0      	pop	{r4, r5, r7, pc}
 800a35a:	bf00      	nop
 800a35c:	40080000 	.word	0x40080000
 800a360:	40100000 	.word	0x40100000
 800a364:	3fe00000 	.word	0x3fe00000
 800a368:	40180000 	.word	0x40180000
 800a36c:	00000000 	.word	0x00000000

0800a370 <scaraCheckWorkSpace4>:

/* Check limit 4 joint variable */
SCARA_StatusTypeDef	scaraCheckWorkSpace4 (double theta1, double theta2, double d3, double theta4) {
 800a370:	b580      	push	{r7, lr}
 800a372:	b088      	sub	sp, #32
 800a374:	af00      	add	r7, sp, #0
 800a376:	ed87 0b06 	vstr	d0, [r7, #24]
 800a37a:	ed87 1b04 	vstr	d1, [r7, #16]
 800a37e:	ed87 2b02 	vstr	d2, [r7, #8]
 800a382:	ed87 3b00 	vstr	d3, [r7]
	// check theta 1
	if ( theta1 < LIM_MIN_J0-0.1 || theta1 > LIM_MAX_J0+0.1) {
 800a386:	a335      	add	r3, pc, #212	; (adr r3, 800a45c <scaraCheckWorkSpace4+0xec>)
 800a388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a38c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a390:	f7f6 fba4 	bl	8000adc <__aeabi_dcmplt>
 800a394:	4603      	mov	r3, r0
 800a396:	2b00      	cmp	r3, #0
 800a398:	d109      	bne.n	800a3ae <scaraCheckWorkSpace4+0x3e>
 800a39a:	a332      	add	r3, pc, #200	; (adr r3, 800a464 <scaraCheckWorkSpace4+0xf4>)
 800a39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a3a4:	f7f6 fbb8 	bl	8000b18 <__aeabi_dcmpgt>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d001      	beq.n	800a3b2 <scaraCheckWorkSpace4+0x42>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a3ae:	2307      	movs	r3, #7
 800a3b0:	e043      	b.n	800a43a <scaraCheckWorkSpace4+0xca>
	}
	// check theta 2
	if ( theta2 < LIM_MIN_J1-0.1 || theta2 > LIM_MAX_J1+0.1) {
 800a3b2:	a32e      	add	r3, pc, #184	; (adr r3, 800a46c <scaraCheckWorkSpace4+0xfc>)
 800a3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a3bc:	f7f6 fb8e 	bl	8000adc <__aeabi_dcmplt>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d109      	bne.n	800a3da <scaraCheckWorkSpace4+0x6a>
 800a3c6:	a32b      	add	r3, pc, #172	; (adr r3, 800a474 <scaraCheckWorkSpace4+0x104>)
 800a3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3cc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a3d0:	f7f6 fba2 	bl	8000b18 <__aeabi_dcmpgt>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d001      	beq.n	800a3de <scaraCheckWorkSpace4+0x6e>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a3da:	2307      	movs	r3, #7
 800a3dc:	e02d      	b.n	800a43a <scaraCheckWorkSpace4+0xca>
	}
	// check d 3
	if ( d3 < LIM_MIN_J2 || d3 > LIM_MAX_J2) {
 800a3de:	f04f 0200 	mov.w	r2, #0
 800a3e2:	f04f 0300 	mov.w	r3, #0
 800a3e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a3ea:	f7f6 fb77 	bl	8000adc <__aeabi_dcmplt>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d109      	bne.n	800a408 <scaraCheckWorkSpace4+0x98>
 800a3f4:	f04f 0200 	mov.w	r2, #0
 800a3f8:	4b17      	ldr	r3, [pc, #92]	; (800a458 <scaraCheckWorkSpace4+0xe8>)
 800a3fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a3fe:	f7f6 fb8b 	bl	8000b18 <__aeabi_dcmpgt>
 800a402:	4603      	mov	r3, r0
 800a404:	2b00      	cmp	r3, #0
 800a406:	d001      	beq.n	800a40c <scaraCheckWorkSpace4+0x9c>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a408:	2307      	movs	r3, #7
 800a40a:	e016      	b.n	800a43a <scaraCheckWorkSpace4+0xca>
	}
	// check theta 4
	if ( theta4 < LIM_MIN_J3-0.1 || theta4 > LIM_MAX_J3+0.1) {
 800a40c:	a30e      	add	r3, pc, #56	; (adr r3, 800a448 <scaraCheckWorkSpace4+0xd8>)
 800a40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a412:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a416:	f7f6 fb61 	bl	8000adc <__aeabi_dcmplt>
 800a41a:	4603      	mov	r3, r0
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d109      	bne.n	800a434 <scaraCheckWorkSpace4+0xc4>
 800a420:	a30b      	add	r3, pc, #44	; (adr r3, 800a450 <scaraCheckWorkSpace4+0xe0>)
 800a422:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a426:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a42a:	f7f6 fb75 	bl	8000b18 <__aeabi_dcmpgt>
 800a42e:	4603      	mov	r3, r0
 800a430:	2b00      	cmp	r3, #0
 800a432:	d001      	beq.n	800a438 <scaraCheckWorkSpace4+0xc8>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a434:	2307      	movs	r3, #7
 800a436:	e000      	b.n	800a43a <scaraCheckWorkSpace4+0xca>
	}
	return SCARA_STATUS_OK;
 800a438:	2300      	movs	r3, #0
}
 800a43a:	4618      	mov	r0, r3
 800a43c:	3720      	adds	r7, #32
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd80      	pop	{r7, pc}
 800a442:	bf00      	nop
 800a444:	f3af 8000 	nop.w
 800a448:	a7777778 	.word	0xa7777778
 800a44c:	c0088956 	.word	0xc0088956
 800a450:	a7777778 	.word	0xa7777778
 800a454:	40088956 	.word	0x40088956
 800a458:	40590000 	.word	0x40590000
 800a45c:	74444445 	.word	0x74444445
 800a460:	bff95623 	.word	0xbff95623
 800a464:	74444445 	.word	0x74444445
 800a468:	3ff95623 	.word	0x3ff95623
 800a46c:	54cccccd 	.word	0x54cccccd
 800a470:	c003a649 	.word	0xc003a649
 800a474:	54cccccd 	.word	0x54cccccd
 800a478:	4003a649 	.word	0x4003a649
 800a47c:	00000000 	.word	0x00000000

0800a480 <scaraCheckWorkSpace1>:

/* Check limit 1 joint variable */
SCARA_StatusTypeDef	scaraCheckWorkSpace1 (Trajectory_TargetTypeDef target, double value) {
 800a480:	b580      	push	{r7, lr}
 800a482:	b084      	sub	sp, #16
 800a484:	af00      	add	r7, sp, #0
 800a486:	4603      	mov	r3, r0
 800a488:	ed87 0b00 	vstr	d0, [r7]
 800a48c:	73fb      	strb	r3, [r7, #15]
	if ( TRAJECTORY_J0 == target) {
 800a48e:	7bfb      	ldrb	r3, [r7, #15]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d117      	bne.n	800a4c4 <scaraCheckWorkSpace1+0x44>
		if ( (LIM_MIN_J0 <= value) && ( value <= LIM_MAX_J0)) {
 800a494:	a33d      	add	r3, pc, #244	; (adr r3, 800a58c <scaraCheckWorkSpace1+0x10c>)
 800a496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a49a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a49e:	f7f6 fb31 	bl	8000b04 <__aeabi_dcmpge>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d00b      	beq.n	800a4c0 <scaraCheckWorkSpace1+0x40>
 800a4a8:	a33a      	add	r3, pc, #232	; (adr r3, 800a594 <scaraCheckWorkSpace1+0x114>)
 800a4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a4b2:	f7f6 fb1d 	bl	8000af0 <__aeabi_dcmple>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d001      	beq.n	800a4c0 <scaraCheckWorkSpace1+0x40>
			return SCARA_STATUS_OK;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	e054      	b.n	800a56a <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a4c0:	2307      	movs	r3, #7
 800a4c2:	e052      	b.n	800a56a <scaraCheckWorkSpace1+0xea>
		}
	} else if (TRAJECTORY_J1 == target) {
 800a4c4:	7bfb      	ldrb	r3, [r7, #15]
 800a4c6:	2b01      	cmp	r3, #1
 800a4c8:	d117      	bne.n	800a4fa <scaraCheckWorkSpace1+0x7a>
		if ( (LIM_MIN_J1 <= value) && ( value <= LIM_MAX_J1)) {
 800a4ca:	a334      	add	r3, pc, #208	; (adr r3, 800a59c <scaraCheckWorkSpace1+0x11c>)
 800a4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a4d4:	f7f6 fb16 	bl	8000b04 <__aeabi_dcmpge>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d00b      	beq.n	800a4f6 <scaraCheckWorkSpace1+0x76>
 800a4de:	a331      	add	r3, pc, #196	; (adr r3, 800a5a4 <scaraCheckWorkSpace1+0x124>)
 800a4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a4e8:	f7f6 fb02 	bl	8000af0 <__aeabi_dcmple>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d001      	beq.n	800a4f6 <scaraCheckWorkSpace1+0x76>
			return SCARA_STATUS_OK;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	e039      	b.n	800a56a <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a4f6:	2307      	movs	r3, #7
 800a4f8:	e037      	b.n	800a56a <scaraCheckWorkSpace1+0xea>
		}
	} else if (TRAJECTORY_J2 == target) {
 800a4fa:	7bfb      	ldrb	r3, [r7, #15]
 800a4fc:	2b02      	cmp	r3, #2
 800a4fe:	d118      	bne.n	800a532 <scaraCheckWorkSpace1+0xb2>
		if ( (LIM_MIN_J2 <= value) && ( value <= LIM_MAX_J2)) {
 800a500:	f04f 0200 	mov.w	r2, #0
 800a504:	f04f 0300 	mov.w	r3, #0
 800a508:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a50c:	f7f6 fafa 	bl	8000b04 <__aeabi_dcmpge>
 800a510:	4603      	mov	r3, r0
 800a512:	2b00      	cmp	r3, #0
 800a514:	d00b      	beq.n	800a52e <scaraCheckWorkSpace1+0xae>
 800a516:	f04f 0200 	mov.w	r2, #0
 800a51a:	4b1b      	ldr	r3, [pc, #108]	; (800a588 <scaraCheckWorkSpace1+0x108>)
 800a51c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a520:	f7f6 fae6 	bl	8000af0 <__aeabi_dcmple>
 800a524:	4603      	mov	r3, r0
 800a526:	2b00      	cmp	r3, #0
 800a528:	d001      	beq.n	800a52e <scaraCheckWorkSpace1+0xae>
			return SCARA_STATUS_OK;
 800a52a:	2300      	movs	r3, #0
 800a52c:	e01d      	b.n	800a56a <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a52e:	2307      	movs	r3, #7
 800a530:	e01b      	b.n	800a56a <scaraCheckWorkSpace1+0xea>
		}
	} else if (TRAJECTORY_J3 == target) {
 800a532:	7bfb      	ldrb	r3, [r7, #15]
 800a534:	2b03      	cmp	r3, #3
 800a536:	d117      	bne.n	800a568 <scaraCheckWorkSpace1+0xe8>
		if ( (LIM_MIN_J3 <= value) && ( value <= LIM_MAX_J3)) {
 800a538:	a30f      	add	r3, pc, #60	; (adr r3, 800a578 <scaraCheckWorkSpace1+0xf8>)
 800a53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a53e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a542:	f7f6 fadf 	bl	8000b04 <__aeabi_dcmpge>
 800a546:	4603      	mov	r3, r0
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d00b      	beq.n	800a564 <scaraCheckWorkSpace1+0xe4>
 800a54c:	a30c      	add	r3, pc, #48	; (adr r3, 800a580 <scaraCheckWorkSpace1+0x100>)
 800a54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a552:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a556:	f7f6 facb 	bl	8000af0 <__aeabi_dcmple>
 800a55a:	4603      	mov	r3, r0
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d001      	beq.n	800a564 <scaraCheckWorkSpace1+0xe4>
			return SCARA_STATUS_OK;
 800a560:	2300      	movs	r3, #0
 800a562:	e002      	b.n	800a56a <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a564:	2307      	movs	r3, #7
 800a566:	e000      	b.n	800a56a <scaraCheckWorkSpace1+0xea>
		}
	} else {
		return SCARA_STATUS_ERROR;
 800a568:	2301      	movs	r3, #1
	}
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	3710      	adds	r7, #16
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}
 800a572:	bf00      	nop
 800a574:	f3af 8000 	nop.w
 800a578:	daaaaaab 	.word	0xdaaaaaab
 800a57c:	c007bc89 	.word	0xc007bc89
 800a580:	daaaaaab 	.word	0xdaaaaaab
 800a584:	4007bc89 	.word	0x4007bc89
 800a588:	40590000 	.word	0x40590000
 800a58c:	daaaaaab 	.word	0xdaaaaaab
 800a590:	bff7bc89 	.word	0xbff7bc89
 800a594:	daaaaaab 	.word	0xdaaaaaab
 800a598:	3ff7bc89 	.word	0x3ff7bc89
 800a59c:	88000000 	.word	0x88000000
 800a5a0:	c002d97c 	.word	0xc002d97c
 800a5a4:	88000000 	.word	0x88000000
 800a5a8:	4002d97c 	.word	0x4002d97c
 800a5ac:	00000000 	.word	0x00000000

0800a5b0 <scaraTestDuty>:
	}
	return SCARA_STATUS_OK;
}

/* Check all of point in travel */
SCARA_StatusTypeDef	scaraTestDuty(void) {
 800a5b0:	b5b0      	push	{r4, r5, r7, lr}
 800a5b2:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 800a5b6:	af2e      	add	r7, sp, #184	; 0xb8
	int32_t sample_count;
	double run_time = 0;
 800a5b8:	f04f 0300 	mov.w	r3, #0
 800a5bc:	f04f 0400 	mov.w	r4, #0
 800a5c0:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
	SCARA_PositionTypeDef test_Next, test_Current;
	SCARA_StatusTypeDef status;
	memcpy(&test_Current, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 800a5c4:	463b      	mov	r3, r7
 800a5c6:	4a36      	ldr	r2, [pc, #216]	; (800a6a0 <scaraTestDuty+0xf0>)
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	4611      	mov	r1, r2
 800a5cc:	23c0      	movs	r3, #192	; 0xc0
 800a5ce:	461a      	mov	r2, r3
 800a5d0:	f00b fc0c 	bl	8015dec <memcpy>
	sample_count = ceil(myDUTY.time_total/T_SAMPLING);
 800a5d4:	4b33      	ldr	r3, [pc, #204]	; (800a6a4 <scaraTestDuty+0xf4>)
 800a5d6:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800a5da:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a5de:	a32e      	add	r3, pc, #184	; (adr r3, 800a698 <scaraTestDuty+0xe8>)
 800a5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e4:	f7f6 f932 	bl	800084c <__aeabi_ddiv>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	460c      	mov	r4, r1
 800a5ec:	ec44 3b17 	vmov	d7, r3, r4
 800a5f0:	eeb0 0a47 	vmov.f32	s0, s14
 800a5f4:	eef0 0a67 	vmov.f32	s1, s15
 800a5f8:	f00f f966 	bl	80198c8 <ceil>
 800a5fc:	ec54 3b10 	vmov	r3, r4, d0
 800a600:	4618      	mov	r0, r3
 800a602:	4621      	mov	r1, r4
 800a604:	f7f6 faa8 	bl	8000b58 <__aeabi_d2iz>
 800a608:	4603      	mov	r3, r0
 800a60a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	for (int32_t i = 1; i < sample_count; i++) {
 800a60e:	2301      	movs	r3, #1
 800a610:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800a614:	e032      	b.n	800a67c <scaraTestDuty+0xcc>
		run_time += T_SAMPLING;
 800a616:	a320      	add	r3, pc, #128	; (adr r3, 800a698 <scaraTestDuty+0xe8>)
 800a618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a61c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800a620:	f7f5 fe34 	bl	800028c <__adddf3>
 800a624:	4603      	mov	r3, r0
 800a626:	460c      	mov	r4, r1
 800a628:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
		status = scaraFlowDuty(run_time, &test_Next, test_Current);
 800a62c:	463c      	mov	r4, r7
 800a62e:	f107 05c0 	add.w	r5, r7, #192	; 0xc0
 800a632:	4668      	mov	r0, sp
 800a634:	f104 0308 	add.w	r3, r4, #8
 800a638:	22b8      	movs	r2, #184	; 0xb8
 800a63a:	4619      	mov	r1, r3
 800a63c:	f00b fbd6 	bl	8015dec <memcpy>
 800a640:	e894 000c 	ldmia.w	r4, {r2, r3}
 800a644:	4628      	mov	r0, r5
 800a646:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 800a64a:	f7fd ffc7 	bl	80085dc <scaraFlowDuty>
 800a64e:	4603      	mov	r3, r0
 800a650:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
		if (status != SCARA_STATUS_OK) {
 800a654:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d002      	beq.n	800a662 <scaraTestDuty+0xb2>
			return status;
 800a65c:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800a660:	e013      	b.n	800a68a <scaraTestDuty+0xda>
		}
		memcpy(&test_Next, &test_Current, sizeof(SCARA_PositionTypeDef));
 800a662:	463a      	mov	r2, r7
 800a664:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800a668:	4611      	mov	r1, r2
 800a66a:	22c0      	movs	r2, #192	; 0xc0
 800a66c:	4618      	mov	r0, r3
 800a66e:	f00b fbbd 	bl	8015dec <memcpy>
	for (int32_t i = 1; i < sample_count; i++) {
 800a672:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800a676:	3301      	adds	r3, #1
 800a678:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800a67c:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800a680:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800a684:	429a      	cmp	r2, r3
 800a686:	dbc6      	blt.n	800a616 <scaraTestDuty+0x66>
	}
	return SCARA_STATUS_OK;
 800a688:	2300      	movs	r3, #0
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 800a690:	46bd      	mov	sp, r7
 800a692:	bdb0      	pop	{r4, r5, r7, pc}
 800a694:	f3af 8000 	nop.w
 800a698:	40000000 	.word	0x40000000
 800a69c:	3f847ae1 	.word	0x3f847ae1
 800a6a0:	200066b8 	.word	0x200066b8
 800a6a4:	20005af8 	.word	0x20005af8

0800a6a8 <scaraSetScanFlag>:

void				scaraSetScanFlag(void) {
 800a6a8:	b480      	push	{r7}
 800a6aa:	af00      	add	r7, sp, #0
	mySCARA.isScanLitmit = TRUE;
 800a6ac:	4b03      	ldr	r3, [pc, #12]	; (800a6bc <scaraSetScanFlag+0x14>)
 800a6ae:	2201      	movs	r2, #1
 800a6b0:	70da      	strb	r2, [r3, #3]
}
 800a6b2:	bf00      	nop
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ba:	4770      	bx	lr
 800a6bc:	2000081c 	.word	0x2000081c

0800a6c0 <scaraSetOutput>:

void				scaraSetOutput		(uint8_t level) {
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b082      	sub	sp, #8
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	71fb      	strb	r3, [r7, #7]
	mySCARA.outputSet	 = level;
 800a6ca:	4a05      	ldr	r2, [pc, #20]	; (800a6e0 <scaraSetOutput+0x20>)
 800a6cc:	79fb      	ldrb	r3, [r7, #7]
 800a6ce:	7113      	strb	r3, [r2, #4]
	lowlayer_setOutput(level);
 800a6d0:	79fb      	ldrb	r3, [r7, #7]
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f7fa ff30 	bl	8005538 <lowlayer_setOutput>
}
 800a6d8:	bf00      	nop
 800a6da:	3708      	adds	r7, #8
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}
 800a6e0:	2000081c 	.word	0x2000081c

0800a6e4 <scaraSetDutyState>:

void				scaraSetDutyState(SCARA_DutyStateTypeDef state) {
 800a6e4:	b480      	push	{r7}
 800a6e6:	b083      	sub	sp, #12
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	71fb      	strb	r3, [r7, #7]
	mySCARA.duty_State = state;
 800a6ee:	4a04      	ldr	r2, [pc, #16]	; (800a700 <scaraSetDutyState+0x1c>)
 800a6f0:	79fb      	ldrb	r3, [r7, #7]
 800a6f2:	7093      	strb	r3, [r2, #2]
}
 800a6f4:	bf00      	nop
 800a6f6:	370c      	adds	r7, #12
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fe:	4770      	bx	lr
 800a700:	2000081c 	.word	0x2000081c

0800a704 <scaraSetMode>:

void				scaraSetMode(SCARA_ModeTypeDef mode) {
 800a704:	b480      	push	{r7}
 800a706:	b083      	sub	sp, #12
 800a708:	af00      	add	r7, sp, #0
 800a70a:	4603      	mov	r3, r0
 800a70c:	71fb      	strb	r3, [r7, #7]
	mySCARA.mode = mode;
 800a70e:	4a04      	ldr	r2, [pc, #16]	; (800a720 <scaraSetMode+0x1c>)
 800a710:	79fb      	ldrb	r3, [r7, #7]
 800a712:	7053      	strb	r3, [r2, #1]
}
 800a714:	bf00      	nop
 800a716:	370c      	adds	r7, #12
 800a718:	46bd      	mov	sp, r7
 800a71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71e:	4770      	bx	lr
 800a720:	2000081c 	.word	0x2000081c

0800a724 <scaraSetMethod>:

void				scaraSetMethod(SCARA_MethodTypeDef method) {
 800a724:	b480      	push	{r7}
 800a726:	b083      	sub	sp, #12
 800a728:	af00      	add	r7, sp, #0
 800a72a:	4603      	mov	r3, r0
 800a72c:	71fb      	strb	r3, [r7, #7]
	mySCARA.method = method;
 800a72e:	4a04      	ldr	r2, [pc, #16]	; (800a740 <scaraSetMethod+0x1c>)
 800a730:	79fb      	ldrb	r3, [r7, #7]
 800a732:	7013      	strb	r3, [r2, #0]
}
 800a734:	bf00      	nop
 800a736:	370c      	adds	r7, #12
 800a738:	46bd      	mov	sp, r7
 800a73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73e:	4770      	bx	lr
 800a740:	2000081c 	.word	0x2000081c

0800a744 <scaraGetPosition>:


void				scaraGetPosition	(SCARA_PositionTypeDef *pos) {
 800a744:	b580      	push	{r7, lr}
 800a746:	b082      	sub	sp, #8
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
	memcpy(pos, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 800a74c:	22c0      	movs	r2, #192	; 0xc0
 800a74e:	4904      	ldr	r1, [pc, #16]	; (800a760 <scaraGetPosition+0x1c>)
 800a750:	6878      	ldr	r0, [r7, #4]
 800a752:	f00b fb4b 	bl	8015dec <memcpy>
}
 800a756:	bf00      	nop
 800a758:	3708      	adds	r7, #8
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}
 800a75e:	bf00      	nop
 800a760:	200066b8 	.word	0x200066b8

0800a764 <scaraUpdatePosition>:

void				scaraUpdatePosition (SCARA_PositionTypeDef *pos) {
 800a764:	b580      	push	{r7, lr}
 800a766:	b082      	sub	sp, #8
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
	memcpy(&positionNext, pos, sizeof(SCARA_PositionTypeDef));
 800a76c:	22c0      	movs	r2, #192	; 0xc0
 800a76e:	6879      	ldr	r1, [r7, #4]
 800a770:	4803      	ldr	r0, [pc, #12]	; (800a780 <scaraUpdatePosition+0x1c>)
 800a772:	f00b fb3b 	bl	8015dec <memcpy>
}
 800a776:	bf00      	nop
 800a778:	3708      	adds	r7, #8
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}
 800a77e:	bf00      	nop
 800a780:	20006838 	.word	0x20006838

0800a784 <scaraGetMode>:


SCARA_ModeTypeDef	scaraGetMode(void) {
 800a784:	b480      	push	{r7}
 800a786:	af00      	add	r7, sp, #0
	return mySCARA.mode;
 800a788:	4b03      	ldr	r3, [pc, #12]	; (800a798 <scaraGetMode+0x14>)
 800a78a:	785b      	ldrb	r3, [r3, #1]
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	46bd      	mov	sp, r7
 800a790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a794:	4770      	bx	lr
 800a796:	bf00      	nop
 800a798:	2000081c 	.word	0x2000081c

0800a79c <scaraGetMethod>:

SCARA_MethodTypeDef	scaraGetMethod(void) {
 800a79c:	b480      	push	{r7}
 800a79e:	af00      	add	r7, sp, #0
	return mySCARA.method;
 800a7a0:	4b03      	ldr	r3, [pc, #12]	; (800a7b0 <scaraGetMethod+0x14>)
 800a7a2:	781b      	ldrb	r3, [r3, #0]
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ac:	4770      	bx	lr
 800a7ae:	bf00      	nop
 800a7b0:	2000081c 	.word	0x2000081c

0800a7b4 <scaraGetDutyState>:

SCARA_DutyStateTypeDef	scaraGetDutyState(void) {
 800a7b4:	b480      	push	{r7}
 800a7b6:	af00      	add	r7, sp, #0
	return mySCARA.duty_State;
 800a7b8:	4b03      	ldr	r3, [pc, #12]	; (800a7c8 <scaraGetDutyState+0x14>)
 800a7ba:	789b      	ldrb	r3, [r3, #2]
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c4:	4770      	bx	lr
 800a7c6:	bf00      	nop
 800a7c8:	2000081c 	.word	0x2000081c

0800a7cc <scaraIsScanLimit>:

uint8_t					scaraIsScanLimit(void) {
 800a7cc:	b480      	push	{r7}
 800a7ce:	af00      	add	r7, sp, #0
	return mySCARA.isScanLitmit;
 800a7d0:	4b03      	ldr	r3, [pc, #12]	; (800a7e0 <scaraIsScanLimit+0x14>)
 800a7d2:	78db      	ldrb	r3, [r3, #3]
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7dc:	4770      	bx	lr
 800a7de:	bf00      	nop
 800a7e0:	2000081c 	.word	0x2000081c

0800a7e4 <scaraIsFinish>:

uint8_t					scaraIsFinish		(double run_time) {
 800a7e4:	b590      	push	{r4, r7, lr}
 800a7e6:	b083      	sub	sp, #12
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	ed87 0b00 	vstr	d0, [r7]
	if(myDUTY.time_total  < run_time) {
 800a7ee:	4b0a      	ldr	r3, [pc, #40]	; (800a818 <scaraIsFinish+0x34>)
 800a7f0:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800a7f4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a7f8:	461a      	mov	r2, r3
 800a7fa:	4623      	mov	r3, r4
 800a7fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a800:	f7f6 f98a 	bl	8000b18 <__aeabi_dcmpgt>
 800a804:	4603      	mov	r3, r0
 800a806:	2b00      	cmp	r3, #0
 800a808:	d001      	beq.n	800a80e <scaraIsFinish+0x2a>
		return TRUE;
 800a80a:	2301      	movs	r3, #1
 800a80c:	e000      	b.n	800a810 <scaraIsFinish+0x2c>
	} else {
		return FALSE;
 800a80e:	2300      	movs	r3, #0
	}
}
 800a810:	4618      	mov	r0, r3
 800a812:	370c      	adds	r7, #12
 800a814:	46bd      	mov	sp, r7
 800a816:	bd90      	pop	{r4, r7, pc}
 800a818:	20005af8 	.word	0x20005af8
 800a81c:	00000000 	.word	0x00000000

0800a820 <scaraPosition_packaging>:
						time);
	return lenght_buff;
}

int32_t scaraPosition_packaging(uint8_t *data_packet, SCARA_PositionTypeDef position)
{
 800a820:	b082      	sub	sp, #8
 800a822:	b590      	push	{r4, r7, lr}
 800a824:	b085      	sub	sp, #20
 800a826:	af00      	add	r7, sp, #0
 800a828:	6078      	str	r0, [r7, #4]
 800a82a:	f107 0120 	add.w	r1, r7, #32
 800a82e:	e881 000c 	stmia.w	r1, {r2, r3}
	int32_t cur_ptr = -4;
 800a832:	f06f 0303 	mvn.w	r3, #3
 800a836:	60fb      	str	r3, [r7, #12]
	Append_Coordinate_Value((int32_t)(position.x*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a838:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a83c:	a35c      	add	r3, pc, #368	; (adr r3, 800a9b0 <scaraPosition_packaging+0x190>)
 800a83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a842:	f7f5 fed9 	bl	80005f8 <__aeabi_dmul>
 800a846:	4603      	mov	r3, r0
 800a848:	460c      	mov	r4, r1
 800a84a:	4618      	mov	r0, r3
 800a84c:	4621      	mov	r1, r4
 800a84e:	f7f6 f983 	bl	8000b58 <__aeabi_d2iz>
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	3304      	adds	r3, #4
 800a856:	60fb      	str	r3, [r7, #12]
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	687a      	ldr	r2, [r7, #4]
 800a85c:	4413      	add	r3, r2
 800a85e:	4619      	mov	r1, r3
 800a860:	f000 f8aa 	bl	800a9b8 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.y*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a864:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800a868:	a351      	add	r3, pc, #324	; (adr r3, 800a9b0 <scaraPosition_packaging+0x190>)
 800a86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a86e:	f7f5 fec3 	bl	80005f8 <__aeabi_dmul>
 800a872:	4603      	mov	r3, r0
 800a874:	460c      	mov	r4, r1
 800a876:	4618      	mov	r0, r3
 800a878:	4621      	mov	r1, r4
 800a87a:	f7f6 f96d 	bl	8000b58 <__aeabi_d2iz>
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	3304      	adds	r3, #4
 800a882:	60fb      	str	r3, [r7, #12]
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	687a      	ldr	r2, [r7, #4]
 800a888:	4413      	add	r3, r2
 800a88a:	4619      	mov	r1, r3
 800a88c:	f000 f894 	bl	800a9b8 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.z*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a890:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800a894:	a346      	add	r3, pc, #280	; (adr r3, 800a9b0 <scaraPosition_packaging+0x190>)
 800a896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a89a:	f7f5 fead 	bl	80005f8 <__aeabi_dmul>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	460c      	mov	r4, r1
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	4621      	mov	r1, r4
 800a8a6:	f7f6 f957 	bl	8000b58 <__aeabi_d2iz>
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	3304      	adds	r3, #4
 800a8ae:	60fb      	str	r3, [r7, #12]
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	687a      	ldr	r2, [r7, #4]
 800a8b4:	4413      	add	r3, r2
 800a8b6:	4619      	mov	r1, r3
 800a8b8:	f000 f87e 	bl	800a9b8 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.roll*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a8bc:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a8c0:	a33b      	add	r3, pc, #236	; (adr r3, 800a9b0 <scaraPosition_packaging+0x190>)
 800a8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c6:	f7f5 fe97 	bl	80005f8 <__aeabi_dmul>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	460c      	mov	r4, r1
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	4621      	mov	r1, r4
 800a8d2:	f7f6 f941 	bl	8000b58 <__aeabi_d2iz>
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	3304      	adds	r3, #4
 800a8da:	60fb      	str	r3, [r7, #12]
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	687a      	ldr	r2, [r7, #4]
 800a8e0:	4413      	add	r3, r2
 800a8e2:	4619      	mov	r1, r3
 800a8e4:	f000 f868 	bl	800a9b8 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta1*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a8e8:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800a8ec:	a330      	add	r3, pc, #192	; (adr r3, 800a9b0 <scaraPosition_packaging+0x190>)
 800a8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f2:	f7f5 fe81 	bl	80005f8 <__aeabi_dmul>
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	460c      	mov	r4, r1
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	4621      	mov	r1, r4
 800a8fe:	f7f6 f92b 	bl	8000b58 <__aeabi_d2iz>
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	3304      	adds	r3, #4
 800a906:	60fb      	str	r3, [r7, #12]
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	687a      	ldr	r2, [r7, #4]
 800a90c:	4413      	add	r3, r2
 800a90e:	4619      	mov	r1, r3
 800a910:	f000 f852 	bl	800a9b8 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta2*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a914:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800a918:	a325      	add	r3, pc, #148	; (adr r3, 800a9b0 <scaraPosition_packaging+0x190>)
 800a91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a91e:	f7f5 fe6b 	bl	80005f8 <__aeabi_dmul>
 800a922:	4603      	mov	r3, r0
 800a924:	460c      	mov	r4, r1
 800a926:	4618      	mov	r0, r3
 800a928:	4621      	mov	r1, r4
 800a92a:	f7f6 f915 	bl	8000b58 <__aeabi_d2iz>
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	3304      	adds	r3, #4
 800a932:	60fb      	str	r3, [r7, #12]
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	687a      	ldr	r2, [r7, #4]
 800a938:	4413      	add	r3, r2
 800a93a:	4619      	mov	r1, r3
 800a93c:	f000 f83c 	bl	800a9b8 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.D3*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a940:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a944:	a31a      	add	r3, pc, #104	; (adr r3, 800a9b0 <scaraPosition_packaging+0x190>)
 800a946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a94a:	f7f5 fe55 	bl	80005f8 <__aeabi_dmul>
 800a94e:	4603      	mov	r3, r0
 800a950:	460c      	mov	r4, r1
 800a952:	4618      	mov	r0, r3
 800a954:	4621      	mov	r1, r4
 800a956:	f7f6 f8ff 	bl	8000b58 <__aeabi_d2iz>
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	3304      	adds	r3, #4
 800a95e:	60fb      	str	r3, [r7, #12]
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	687a      	ldr	r2, [r7, #4]
 800a964:	4413      	add	r3, r2
 800a966:	4619      	mov	r1, r3
 800a968:	f000 f826 	bl	800a9b8 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta4*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a96c:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800a970:	a30f      	add	r3, pc, #60	; (adr r3, 800a9b0 <scaraPosition_packaging+0x190>)
 800a972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a976:	f7f5 fe3f 	bl	80005f8 <__aeabi_dmul>
 800a97a:	4603      	mov	r3, r0
 800a97c:	460c      	mov	r4, r1
 800a97e:	4618      	mov	r0, r3
 800a980:	4621      	mov	r1, r4
 800a982:	f7f6 f8e9 	bl	8000b58 <__aeabi_d2iz>
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	3304      	adds	r3, #4
 800a98a:	60fb      	str	r3, [r7, #12]
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	687a      	ldr	r2, [r7, #4]
 800a990:	4413      	add	r3, r2
 800a992:	4619      	mov	r1, r3
 800a994:	f000 f810 	bl	800a9b8 <Append_Coordinate_Value>
	return cur_ptr + 4;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	3304      	adds	r3, #4
}
 800a99c:	4618      	mov	r0, r3
 800a99e:	3714      	adds	r7, #20
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800a9a6:	b002      	add	sp, #8
 800a9a8:	4770      	bx	lr
 800a9aa:	bf00      	nop
 800a9ac:	f3af 8000 	nop.w
 800a9b0:	00000000 	.word	0x00000000
 800a9b4:	412e8480 	.word	0x412e8480

0800a9b8 <Append_Coordinate_Value>:

void Append_Coordinate_Value(int32_t append_value, uint8_t* append_position)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b083      	sub	sp, #12
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	6039      	str	r1, [r7, #0]
	append_position[0] = (uint8_t)(append_value & 0xff);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	b2da      	uxtb	r2, r3
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	701a      	strb	r2, [r3, #0]
	append_position[1] = (uint8_t)(append_value >> 8 & 0xff);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	121a      	asrs	r2, r3, #8
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	3301      	adds	r3, #1
 800a9d2:	b2d2      	uxtb	r2, r2
 800a9d4:	701a      	strb	r2, [r3, #0]
	append_position[2] = (uint8_t)(append_value >> 16 & 0xff);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	141a      	asrs	r2, r3, #16
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	3302      	adds	r3, #2
 800a9de:	b2d2      	uxtb	r2, r2
 800a9e0:	701a      	strb	r2, [r3, #0]
	append_position[3] = (uint8_t)(append_value >> 24 & 0xff);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	161a      	asrs	r2, r3, #24
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	3303      	adds	r3, #3
 800a9ea:	b2d2      	uxtb	r2, r2
 800a9ec:	701a      	strb	r2, [r3, #0]
}
 800a9ee:	bf00      	nop
 800a9f0:	370c      	adds	r7, #12
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f8:	4770      	bx	lr
 800a9fa:	0000      	movs	r0, r0
 800a9fc:	0000      	movs	r0, r0
	...

0800aa00 <scaraKeyInit1>:
SCARA_StatusTypeDef  scaraKeyInit1(SCARA_KeyTypeDef key, int32_t speed)
{
 800aa00:	b590      	push	{r4, r7, lr}
 800aa02:	f5ad 7d63 	sub.w	sp, sp, #908	; 0x38c
 800aa06:	af6c      	add	r7, sp, #432	; 0x1b0
 800aa08:	4602      	mov	r2, r0
 800aa0a:	463b      	mov	r3, r7
 800aa0c:	6019      	str	r1, [r3, #0]
 800aa0e:	1dfb      	adds	r3, r7, #7
 800aa10:	701a      	strb	r2, [r3, #0]
	DUTY_Command_TypeDef cmd;
	SCARA_StatusTypeDef status;
	cmd.coordinate_type = DUTY_COORDINATES_REL;
 800aa12:	f107 0308 	add.w	r3, r7, #8
 800aa16:	2201      	movs	r2, #1
 800aa18:	731a      	strb	r2, [r3, #12]
	cmd.trajec_type = DUTY_TRAJECTORY_LSPB;
 800aa1a:	f107 0308 	add.w	r3, r7, #8
 800aa1e:	2200      	movs	r2, #0
 800aa20:	741a      	strb	r2, [r3, #16]
	cmd.modeInit_type = DUTY_MODE_INIT_QVT;
 800aa22:	f107 0308 	add.w	r3, r7, #8
 800aa26:	2201      	movs	r2, #1
 800aa28:	745a      	strb	r2, [r3, #17]
	double v_current = 0;
 800aa2a:	f04f 0300 	mov.w	r3, #0
 800aa2e:	f04f 0400 	mov.w	r4, #0
 800aa32:	e9c7 3474 	strd	r3, r4, [r7, #464]	; 0x1d0
	Trajectory_LSPB_TypeDef *lspb;
	if(speed < SHIFT_SPEED_MIN || speed > SHIFT_SPEED_MAX){
 800aa36:	463b      	mov	r3, r7
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	dd03      	ble.n	800aa46 <scaraKeyInit1+0x46>
 800aa3e:	463b      	mov	r3, r7
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	2b0e      	cmp	r3, #14
 800aa44:	dd01      	ble.n	800aa4a <scaraKeyInit1+0x4a>
		return SCARA_STATUS_ERROR_PARA;
 800aa46:	2306      	movs	r3, #6
 800aa48:	e2c0      	b.n	800afcc <scaraKeyInit1+0x5cc>
	}
	switch(key){
 800aa4a:	1dfb      	adds	r3, r7, #7
 800aa4c:	781b      	ldrb	r3, [r3, #0]
 800aa4e:	2b07      	cmp	r3, #7
 800aa50:	f200 8298 	bhi.w	800af84 <scaraKeyInit1+0x584>
 800aa54:	a201      	add	r2, pc, #4	; (adr r2, 800aa5c <scaraKeyInit1+0x5c>)
 800aa56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa5a:	bf00      	nop
 800aa5c:	0800aa7d 	.word	0x0800aa7d
 800aa60:	0800ab1f 	.word	0x0800ab1f
 800aa64:	0800abc5 	.word	0x0800abc5
 800aa68:	0800ac63 	.word	0x0800ac63
 800aa6c:	0800ad05 	.word	0x0800ad05
 800aa70:	0800ada3 	.word	0x0800ada3
 800aa74:	0800ae45 	.word	0x0800ae45
 800aa78:	0800aee3 	.word	0x0800aee3
		case SCARA_KEY_X_INC:{
			cmd.v_factor = 0;
 800aa7c:	f107 0208 	add.w	r2, r7, #8
 800aa80:	f04f 0300 	mov.w	r3, #0
 800aa84:	f04f 0400 	mov.w	r4, #0
 800aa88:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800aa8c:	f107 0308 	add.w	r3, r7, #8
 800aa90:	2200      	movs	r2, #0
 800aa92:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800aa94:	f107 0308 	add.w	r3, r7, #8
 800aa98:	2200      	movs	r2, #0
 800aa9a:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= speed*SHIFT_KEY_S;
 800aa9c:	463b      	mov	r3, r7
 800aa9e:	681a      	ldr	r2, [r3, #0]
 800aaa0:	4613      	mov	r3, r2
 800aaa2:	009b      	lsls	r3, r3, #2
 800aaa4:	4413      	add	r3, r2
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f7f5 fd3c 	bl	8000524 <__aeabi_i2d>
 800aaac:	4603      	mov	r3, r0
 800aaae:	460c      	mov	r4, r1
 800aab0:	f107 0208 	add.w	r2, r7, #8
 800aab4:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800aab8:	f107 0208 	add.w	r2, r7, #8
 800aabc:	f04f 0300 	mov.w	r3, #0
 800aac0:	f04f 0400 	mov.w	r4, #0
 800aac4:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800aac8:	f107 0208 	add.w	r2, r7, #8
 800aacc:	f04f 0300 	mov.w	r3, #0
 800aad0:	f04f 0400 	mov.w	r4, #0
 800aad4:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800aad8:	f107 0208 	add.w	r2, r7, #8
 800aadc:	f04f 0300 	mov.w	r3, #0
 800aae0:	f04f 0400 	mov.w	r4, #0
 800aae4:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800aae8:	463b      	mov	r3, r7
 800aaea:	6818      	ldr	r0, [r3, #0]
 800aaec:	f7f5 fd1a 	bl	8000524 <__aeabi_i2d>
 800aaf0:	f20f 43e4 	addw	r3, pc, #1252	; 0x4e4
 800aaf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf8:	f7f5 fd7e 	bl	80005f8 <__aeabi_dmul>
 800aafc:	4603      	mov	r3, r0
 800aafe:	460c      	mov	r4, r1
 800ab00:	4618      	mov	r0, r3
 800ab02:	4621      	mov	r1, r4
 800ab04:	f20f 43d8 	addw	r3, pc, #1240	; 0x4d8
 800ab08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab0c:	f7f5 fbbe 	bl	800028c <__adddf3>
 800ab10:	4603      	mov	r3, r0
 800ab12:	460c      	mov	r4, r1
 800ab14:	f107 0208 	add.w	r2, r7, #8
 800ab18:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800ab1c:	e232      	b.n	800af84 <scaraKeyInit1+0x584>
		case SCARA_KEY_X_DEC:{
			cmd.v_factor = 0;
 800ab1e:	f107 0208 	add.w	r2, r7, #8
 800ab22:	f04f 0300 	mov.w	r3, #0
 800ab26:	f04f 0400 	mov.w	r4, #0
 800ab2a:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800ab2e:	f107 0308 	add.w	r3, r7, #8
 800ab32:	2200      	movs	r2, #0
 800ab34:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800ab36:	f107 0308 	add.w	r3, r7, #8
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= -speed*SHIFT_KEY_S;
 800ab3e:	463b      	mov	r3, r7
 800ab40:	681a      	ldr	r2, [r3, #0]
 800ab42:	4613      	mov	r3, r2
 800ab44:	079b      	lsls	r3, r3, #30
 800ab46:	1a9b      	subs	r3, r3, r2
 800ab48:	009b      	lsls	r3, r3, #2
 800ab4a:	1a9b      	subs	r3, r3, r2
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	f7f5 fce9 	bl	8000524 <__aeabi_i2d>
 800ab52:	4603      	mov	r3, r0
 800ab54:	460c      	mov	r4, r1
 800ab56:	f107 0208 	add.w	r2, r7, #8
 800ab5a:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800ab5e:	f107 0208 	add.w	r2, r7, #8
 800ab62:	f04f 0300 	mov.w	r3, #0
 800ab66:	f04f 0400 	mov.w	r4, #0
 800ab6a:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800ab6e:	f107 0208 	add.w	r2, r7, #8
 800ab72:	f04f 0300 	mov.w	r3, #0
 800ab76:	f04f 0400 	mov.w	r4, #0
 800ab7a:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800ab7e:	f107 0208 	add.w	r2, r7, #8
 800ab82:	f04f 0300 	mov.w	r3, #0
 800ab86:	f04f 0400 	mov.w	r4, #0
 800ab8a:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800ab8e:	463b      	mov	r3, r7
 800ab90:	6818      	ldr	r0, [r3, #0]
 800ab92:	f7f5 fcc7 	bl	8000524 <__aeabi_i2d>
 800ab96:	f20f 4340 	addw	r3, pc, #1088	; 0x440
 800ab9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab9e:	f7f5 fd2b 	bl	80005f8 <__aeabi_dmul>
 800aba2:	4603      	mov	r3, r0
 800aba4:	460c      	mov	r4, r1
 800aba6:	4618      	mov	r0, r3
 800aba8:	4621      	mov	r1, r4
 800abaa:	f20f 4334 	addw	r3, pc, #1076	; 0x434
 800abae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb2:	f7f5 fb6b 	bl	800028c <__adddf3>
 800abb6:	4603      	mov	r3, r0
 800abb8:	460c      	mov	r4, r1
 800abba:	f107 0208 	add.w	r2, r7, #8
 800abbe:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800abc2:	e1df      	b.n	800af84 <scaraKeyInit1+0x584>
		case SCARA_KEY_Y_INC:{
			cmd.v_factor = 0;
 800abc4:	f107 0208 	add.w	r2, r7, #8
 800abc8:	f04f 0300 	mov.w	r3, #0
 800abcc:	f04f 0400 	mov.w	r4, #0
 800abd0:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800abd4:	f107 0308 	add.w	r3, r7, #8
 800abd8:	2200      	movs	r2, #0
 800abda:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800abdc:	f107 0308 	add.w	r3, r7, #8
 800abe0:	2200      	movs	r2, #0
 800abe2:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800abe4:	f107 0208 	add.w	r2, r7, #8
 800abe8:	f04f 0300 	mov.w	r3, #0
 800abec:	f04f 0400 	mov.w	r4, #0
 800abf0:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= speed*SHIFT_KEY_S;
 800abf4:	463b      	mov	r3, r7
 800abf6:	681a      	ldr	r2, [r3, #0]
 800abf8:	4613      	mov	r3, r2
 800abfa:	009b      	lsls	r3, r3, #2
 800abfc:	4413      	add	r3, r2
 800abfe:	4618      	mov	r0, r3
 800ac00:	f7f5 fc90 	bl	8000524 <__aeabi_i2d>
 800ac04:	4603      	mov	r3, r0
 800ac06:	460c      	mov	r4, r1
 800ac08:	f107 0208 	add.w	r2, r7, #8
 800ac0c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800ac10:	f107 0208 	add.w	r2, r7, #8
 800ac14:	f04f 0300 	mov.w	r3, #0
 800ac18:	f04f 0400 	mov.w	r4, #0
 800ac1c:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800ac20:	f107 0208 	add.w	r2, r7, #8
 800ac24:	f04f 0300 	mov.w	r3, #0
 800ac28:	f04f 0400 	mov.w	r4, #0
 800ac2c:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800ac30:	463b      	mov	r3, r7
 800ac32:	6818      	ldr	r0, [r3, #0]
 800ac34:	f7f5 fc76 	bl	8000524 <__aeabi_i2d>
 800ac38:	a3e7      	add	r3, pc, #924	; (adr r3, 800afd8 <scaraKeyInit1+0x5d8>)
 800ac3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac3e:	f7f5 fcdb 	bl	80005f8 <__aeabi_dmul>
 800ac42:	4603      	mov	r3, r0
 800ac44:	460c      	mov	r4, r1
 800ac46:	4618      	mov	r0, r3
 800ac48:	4621      	mov	r1, r4
 800ac4a:	a3e5      	add	r3, pc, #916	; (adr r3, 800afe0 <scaraKeyInit1+0x5e0>)
 800ac4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac50:	f7f5 fb1c 	bl	800028c <__adddf3>
 800ac54:	4603      	mov	r3, r0
 800ac56:	460c      	mov	r4, r1
 800ac58:	f107 0208 	add.w	r2, r7, #8
 800ac5c:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800ac60:	e190      	b.n	800af84 <scaraKeyInit1+0x584>

		case SCARA_KEY_Y_DEC:{
			cmd.v_factor = 0;
 800ac62:	f107 0208 	add.w	r2, r7, #8
 800ac66:	f04f 0300 	mov.w	r3, #0
 800ac6a:	f04f 0400 	mov.w	r4, #0
 800ac6e:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800ac72:	f107 0308 	add.w	r3, r7, #8
 800ac76:	2200      	movs	r2, #0
 800ac78:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800ac7a:	f107 0308 	add.w	r3, r7, #8
 800ac7e:	2200      	movs	r2, #0
 800ac80:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800ac82:	f107 0208 	add.w	r2, r7, #8
 800ac86:	f04f 0300 	mov.w	r3, #0
 800ac8a:	f04f 0400 	mov.w	r4, #0
 800ac8e:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= -speed*SHIFT_KEY_S;
 800ac92:	463b      	mov	r3, r7
 800ac94:	681a      	ldr	r2, [r3, #0]
 800ac96:	4613      	mov	r3, r2
 800ac98:	079b      	lsls	r3, r3, #30
 800ac9a:	1a9b      	subs	r3, r3, r2
 800ac9c:	009b      	lsls	r3, r3, #2
 800ac9e:	1a9b      	subs	r3, r3, r2
 800aca0:	4618      	mov	r0, r3
 800aca2:	f7f5 fc3f 	bl	8000524 <__aeabi_i2d>
 800aca6:	4603      	mov	r3, r0
 800aca8:	460c      	mov	r4, r1
 800acaa:	f107 0208 	add.w	r2, r7, #8
 800acae:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800acb2:	f107 0208 	add.w	r2, r7, #8
 800acb6:	f04f 0300 	mov.w	r3, #0
 800acba:	f04f 0400 	mov.w	r4, #0
 800acbe:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800acc2:	f107 0208 	add.w	r2, r7, #8
 800acc6:	f04f 0300 	mov.w	r3, #0
 800acca:	f04f 0400 	mov.w	r4, #0
 800acce:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800acd2:	463b      	mov	r3, r7
 800acd4:	6818      	ldr	r0, [r3, #0]
 800acd6:	f7f5 fc25 	bl	8000524 <__aeabi_i2d>
 800acda:	a3bf      	add	r3, pc, #764	; (adr r3, 800afd8 <scaraKeyInit1+0x5d8>)
 800acdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace0:	f7f5 fc8a 	bl	80005f8 <__aeabi_dmul>
 800ace4:	4603      	mov	r3, r0
 800ace6:	460c      	mov	r4, r1
 800ace8:	4618      	mov	r0, r3
 800acea:	4621      	mov	r1, r4
 800acec:	a3bc      	add	r3, pc, #752	; (adr r3, 800afe0 <scaraKeyInit1+0x5e0>)
 800acee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acf2:	f7f5 facb 	bl	800028c <__adddf3>
 800acf6:	4603      	mov	r3, r0
 800acf8:	460c      	mov	r4, r1
 800acfa:	f107 0208 	add.w	r2, r7, #8
 800acfe:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800ad02:	e13f      	b.n	800af84 <scaraKeyInit1+0x584>
		case SCARA_KEY_Z_INC:{
			cmd.v_factor = 0;
 800ad04:	f107 0208 	add.w	r2, r7, #8
 800ad08:	f04f 0300 	mov.w	r3, #0
 800ad0c:	f04f 0400 	mov.w	r4, #0
 800ad10:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800ad14:	f107 0308 	add.w	r3, r7, #8
 800ad18:	2200      	movs	r2, #0
 800ad1a:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800ad1c:	f107 0308 	add.w	r3, r7, #8
 800ad20:	2200      	movs	r2, #0
 800ad22:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800ad24:	f107 0208 	add.w	r2, r7, #8
 800ad28:	f04f 0300 	mov.w	r3, #0
 800ad2c:	f04f 0400 	mov.w	r4, #0
 800ad30:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800ad34:	f107 0208 	add.w	r2, r7, #8
 800ad38:	f04f 0300 	mov.w	r3, #0
 800ad3c:	f04f 0400 	mov.w	r4, #0
 800ad40:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= speed*SHIFT_KEY_S;
 800ad44:	463b      	mov	r3, r7
 800ad46:	681a      	ldr	r2, [r3, #0]
 800ad48:	4613      	mov	r3, r2
 800ad4a:	009b      	lsls	r3, r3, #2
 800ad4c:	4413      	add	r3, r2
 800ad4e:	4618      	mov	r0, r3
 800ad50:	f7f5 fbe8 	bl	8000524 <__aeabi_i2d>
 800ad54:	4603      	mov	r3, r0
 800ad56:	460c      	mov	r4, r1
 800ad58:	f107 0208 	add.w	r2, r7, #8
 800ad5c:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800ad60:	f107 0208 	add.w	r2, r7, #8
 800ad64:	f04f 0300 	mov.w	r3, #0
 800ad68:	f04f 0400 	mov.w	r4, #0
 800ad6c:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800ad70:	463b      	mov	r3, r7
 800ad72:	6818      	ldr	r0, [r3, #0]
 800ad74:	f7f5 fbd6 	bl	8000524 <__aeabi_i2d>
 800ad78:	a397      	add	r3, pc, #604	; (adr r3, 800afd8 <scaraKeyInit1+0x5d8>)
 800ad7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad7e:	f7f5 fc3b 	bl	80005f8 <__aeabi_dmul>
 800ad82:	4603      	mov	r3, r0
 800ad84:	460c      	mov	r4, r1
 800ad86:	4618      	mov	r0, r3
 800ad88:	4621      	mov	r1, r4
 800ad8a:	a395      	add	r3, pc, #596	; (adr r3, 800afe0 <scaraKeyInit1+0x5e0>)
 800ad8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad90:	f7f5 fa7c 	bl	800028c <__adddf3>
 800ad94:	4603      	mov	r3, r0
 800ad96:	460c      	mov	r4, r1
 800ad98:	f107 0208 	add.w	r2, r7, #8
 800ad9c:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800ada0:	e0f0      	b.n	800af84 <scaraKeyInit1+0x584>
		case SCARA_KEY_Z_DEC:{
			cmd.v_factor = 0;
 800ada2:	f107 0208 	add.w	r2, r7, #8
 800ada6:	f04f 0300 	mov.w	r3, #0
 800adaa:	f04f 0400 	mov.w	r4, #0
 800adae:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800adb2:	f107 0308 	add.w	r3, r7, #8
 800adb6:	2200      	movs	r2, #0
 800adb8:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800adba:	f107 0308 	add.w	r3, r7, #8
 800adbe:	2200      	movs	r2, #0
 800adc0:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800adc2:	f107 0208 	add.w	r2, r7, #8
 800adc6:	f04f 0300 	mov.w	r3, #0
 800adca:	f04f 0400 	mov.w	r4, #0
 800adce:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800add2:	f107 0208 	add.w	r2, r7, #8
 800add6:	f04f 0300 	mov.w	r3, #0
 800adda:	f04f 0400 	mov.w	r4, #0
 800adde:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= -speed*SHIFT_KEY_S;
 800ade2:	463b      	mov	r3, r7
 800ade4:	681a      	ldr	r2, [r3, #0]
 800ade6:	4613      	mov	r3, r2
 800ade8:	079b      	lsls	r3, r3, #30
 800adea:	1a9b      	subs	r3, r3, r2
 800adec:	009b      	lsls	r3, r3, #2
 800adee:	1a9b      	subs	r3, r3, r2
 800adf0:	4618      	mov	r0, r3
 800adf2:	f7f5 fb97 	bl	8000524 <__aeabi_i2d>
 800adf6:	4603      	mov	r3, r0
 800adf8:	460c      	mov	r4, r1
 800adfa:	f107 0208 	add.w	r2, r7, #8
 800adfe:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800ae02:	f107 0208 	add.w	r2, r7, #8
 800ae06:	f04f 0300 	mov.w	r3, #0
 800ae0a:	f04f 0400 	mov.w	r4, #0
 800ae0e:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800ae12:	463b      	mov	r3, r7
 800ae14:	6818      	ldr	r0, [r3, #0]
 800ae16:	f7f5 fb85 	bl	8000524 <__aeabi_i2d>
 800ae1a:	a36f      	add	r3, pc, #444	; (adr r3, 800afd8 <scaraKeyInit1+0x5d8>)
 800ae1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae20:	f7f5 fbea 	bl	80005f8 <__aeabi_dmul>
 800ae24:	4603      	mov	r3, r0
 800ae26:	460c      	mov	r4, r1
 800ae28:	4618      	mov	r0, r3
 800ae2a:	4621      	mov	r1, r4
 800ae2c:	a36c      	add	r3, pc, #432	; (adr r3, 800afe0 <scaraKeyInit1+0x5e0>)
 800ae2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae32:	f7f5 fa2b 	bl	800028c <__adddf3>
 800ae36:	4603      	mov	r3, r0
 800ae38:	460c      	mov	r4, r1
 800ae3a:	f107 0208 	add.w	r2, r7, #8
 800ae3e:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800ae42:	e09f      	b.n	800af84 <scaraKeyInit1+0x584>
		case SCARA_KEY_ROLL_INC:{
			cmd.v_factor = 0;
 800ae44:	f107 0208 	add.w	r2, r7, #8
 800ae48:	f04f 0300 	mov.w	r3, #0
 800ae4c:	f04f 0400 	mov.w	r4, #0
 800ae50:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800ae54:	f107 0308 	add.w	r3, r7, #8
 800ae58:	2200      	movs	r2, #0
 800ae5a:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800ae5c:	f107 0308 	add.w	r3, r7, #8
 800ae60:	2200      	movs	r2, #0
 800ae62:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800ae64:	f107 0208 	add.w	r2, r7, #8
 800ae68:	f04f 0300 	mov.w	r3, #0
 800ae6c:	f04f 0400 	mov.w	r4, #0
 800ae70:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800ae74:	f107 0208 	add.w	r2, r7, #8
 800ae78:	f04f 0300 	mov.w	r3, #0
 800ae7c:	f04f 0400 	mov.w	r4, #0
 800ae80:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800ae84:	f107 0208 	add.w	r2, r7, #8
 800ae88:	f04f 0300 	mov.w	r3, #0
 800ae8c:	f04f 0400 	mov.w	r4, #0
 800ae90:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= speed*SHIFT_KEY_S;
 800ae94:	463b      	mov	r3, r7
 800ae96:	681a      	ldr	r2, [r3, #0]
 800ae98:	4613      	mov	r3, r2
 800ae9a:	009b      	lsls	r3, r3, #2
 800ae9c:	4413      	add	r3, r2
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f7f5 fb40 	bl	8000524 <__aeabi_i2d>
 800aea4:	4603      	mov	r3, r0
 800aea6:	460c      	mov	r4, r1
 800aea8:	f107 0208 	add.w	r2, r7, #8
 800aeac:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800aeb0:	463b      	mov	r3, r7
 800aeb2:	6818      	ldr	r0, [r3, #0]
 800aeb4:	f7f5 fb36 	bl	8000524 <__aeabi_i2d>
 800aeb8:	a347      	add	r3, pc, #284	; (adr r3, 800afd8 <scaraKeyInit1+0x5d8>)
 800aeba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aebe:	f7f5 fb9b 	bl	80005f8 <__aeabi_dmul>
 800aec2:	4603      	mov	r3, r0
 800aec4:	460c      	mov	r4, r1
 800aec6:	4618      	mov	r0, r3
 800aec8:	4621      	mov	r1, r4
 800aeca:	a345      	add	r3, pc, #276	; (adr r3, 800afe0 <scaraKeyInit1+0x5e0>)
 800aecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed0:	f7f5 f9dc 	bl	800028c <__adddf3>
 800aed4:	4603      	mov	r3, r0
 800aed6:	460c      	mov	r4, r1
 800aed8:	f107 0208 	add.w	r2, r7, #8
 800aedc:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800aee0:	e050      	b.n	800af84 <scaraKeyInit1+0x584>
		case SCARA_KEY_ROLL_DEC:{
			cmd.v_factor = 0;
 800aee2:	f107 0208 	add.w	r2, r7, #8
 800aee6:	f04f 0300 	mov.w	r3, #0
 800aeea:	f04f 0400 	mov.w	r4, #0
 800aeee:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800aef2:	f107 0308 	add.w	r3, r7, #8
 800aef6:	2200      	movs	r2, #0
 800aef8:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800aefa:	f107 0308 	add.w	r3, r7, #8
 800aefe:	2200      	movs	r2, #0
 800af00:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800af02:	f107 0208 	add.w	r2, r7, #8
 800af06:	f04f 0300 	mov.w	r3, #0
 800af0a:	f04f 0400 	mov.w	r4, #0
 800af0e:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800af12:	f107 0208 	add.w	r2, r7, #8
 800af16:	f04f 0300 	mov.w	r3, #0
 800af1a:	f04f 0400 	mov.w	r4, #0
 800af1e:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800af22:	f107 0208 	add.w	r2, r7, #8
 800af26:	f04f 0300 	mov.w	r3, #0
 800af2a:	f04f 0400 	mov.w	r4, #0
 800af2e:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= -speed*SHIFT_KEY_S;
 800af32:	463b      	mov	r3, r7
 800af34:	681a      	ldr	r2, [r3, #0]
 800af36:	4613      	mov	r3, r2
 800af38:	079b      	lsls	r3, r3, #30
 800af3a:	1a9b      	subs	r3, r3, r2
 800af3c:	009b      	lsls	r3, r3, #2
 800af3e:	1a9b      	subs	r3, r3, r2
 800af40:	4618      	mov	r0, r3
 800af42:	f7f5 faef 	bl	8000524 <__aeabi_i2d>
 800af46:	4603      	mov	r3, r0
 800af48:	460c      	mov	r4, r1
 800af4a:	f107 0208 	add.w	r2, r7, #8
 800af4e:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800af52:	463b      	mov	r3, r7
 800af54:	6818      	ldr	r0, [r3, #0]
 800af56:	f7f5 fae5 	bl	8000524 <__aeabi_i2d>
 800af5a:	a31f      	add	r3, pc, #124	; (adr r3, 800afd8 <scaraKeyInit1+0x5d8>)
 800af5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af60:	f7f5 fb4a 	bl	80005f8 <__aeabi_dmul>
 800af64:	4603      	mov	r3, r0
 800af66:	460c      	mov	r4, r1
 800af68:	4618      	mov	r0, r3
 800af6a:	4621      	mov	r1, r4
 800af6c:	a31c      	add	r3, pc, #112	; (adr r3, 800afe0 <scaraKeyInit1+0x5e0>)
 800af6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af72:	f7f5 f98b 	bl	800028c <__adddf3>
 800af76:	4603      	mov	r3, r0
 800af78:	460c      	mov	r4, r1
 800af7a:	f107 0208 	add.w	r2, r7, #8
 800af7e:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800af82:	bf00      	nop
	}

	status = scaraInitDuty(cmd);
 800af84:	f107 0408 	add.w	r4, r7, #8
 800af88:	4668      	mov	r0, sp
 800af8a:	f104 0310 	add.w	r3, r4, #16
 800af8e:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 800af92:	4619      	mov	r1, r3
 800af94:	f00a ff2a 	bl	8015dec <memcpy>
 800af98:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800af9c:	f7fa fb18 	bl	80055d0 <scaraInitDuty>
 800afa0:	4603      	mov	r3, r0
 800afa2:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
	if (status == SCARA_STATUS_OK) {
 800afa6:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d10b      	bne.n	800afc6 <scaraKeyInit1+0x5c6>
		status = scaraTestDuty();
 800afae:	f7ff faff 	bl	800a5b0 <scaraTestDuty>
 800afb2:	4603      	mov	r3, r0
 800afb4:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
		if (status != SCARA_STATUS_OK) {
 800afb8:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d005      	beq.n	800afcc <scaraKeyInit1+0x5cc>
			return status;
 800afc0:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800afc4:	e002      	b.n	800afcc <scaraKeyInit1+0x5cc>
		// tinh lai run time so vs v hien tai
//		*(runtime) = (v_current - lspb->v0)/(lspb->a_design);
//		scaraFlowDuty(*runtime, &positionKeyInit, positionCurrent);
//		return status;
	} else {
		return status;
 800afc6:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800afca:	e7ff      	b.n	800afcc <scaraKeyInit1+0x5cc>
	}
}
 800afcc:	4618      	mov	r0, r3
 800afce:	f507 77ee 	add.w	r7, r7, #476	; 0x1dc
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd90      	pop	{r4, r7, pc}
 800afd6:	bf00      	nop
 800afd8:	9999999a 	.word	0x9999999a
 800afdc:	3fa99999 	.word	0x3fa99999
 800afe0:	9999999a 	.word	0x9999999a
 800afe4:	3fe99999 	.word	0x3fe99999

0800afe8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b082      	sub	sp, #8
 800afec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800afee:	2300      	movs	r3, #0
 800aff0:	607b      	str	r3, [r7, #4]
 800aff2:	4b12      	ldr	r3, [pc, #72]	; (800b03c <HAL_MspInit+0x54>)
 800aff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aff6:	4a11      	ldr	r2, [pc, #68]	; (800b03c <HAL_MspInit+0x54>)
 800aff8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800affc:	6453      	str	r3, [r2, #68]	; 0x44
 800affe:	4b0f      	ldr	r3, [pc, #60]	; (800b03c <HAL_MspInit+0x54>)
 800b000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b006:	607b      	str	r3, [r7, #4]
 800b008:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b00a:	2300      	movs	r3, #0
 800b00c:	603b      	str	r3, [r7, #0]
 800b00e:	4b0b      	ldr	r3, [pc, #44]	; (800b03c <HAL_MspInit+0x54>)
 800b010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b012:	4a0a      	ldr	r2, [pc, #40]	; (800b03c <HAL_MspInit+0x54>)
 800b014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b018:	6413      	str	r3, [r2, #64]	; 0x40
 800b01a:	4b08      	ldr	r3, [pc, #32]	; (800b03c <HAL_MspInit+0x54>)
 800b01c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b01e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b022:	603b      	str	r3, [r7, #0]
 800b024:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800b026:	2200      	movs	r2, #0
 800b028:	210f      	movs	r1, #15
 800b02a:	f06f 0001 	mvn.w	r0, #1
 800b02e:	f000 fbe7 	bl	800b800 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b032:	bf00      	nop
 800b034:	3708      	adds	r7, #8
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}
 800b03a:	bf00      	nop
 800b03c:	40023800 	.word	0x40023800

0800b040 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b08c      	sub	sp, #48	; 0x30
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800b048:	2300      	movs	r3, #0
 800b04a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800b04c:	2300      	movs	r3, #0
 800b04e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800b050:	2200      	movs	r2, #0
 800b052:	6879      	ldr	r1, [r7, #4]
 800b054:	2036      	movs	r0, #54	; 0x36
 800b056:	f000 fbd3 	bl	800b800 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800b05a:	2036      	movs	r0, #54	; 0x36
 800b05c:	f000 fbec 	bl	800b838 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800b060:	2300      	movs	r3, #0
 800b062:	60fb      	str	r3, [r7, #12]
 800b064:	4b1f      	ldr	r3, [pc, #124]	; (800b0e4 <HAL_InitTick+0xa4>)
 800b066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b068:	4a1e      	ldr	r2, [pc, #120]	; (800b0e4 <HAL_InitTick+0xa4>)
 800b06a:	f043 0310 	orr.w	r3, r3, #16
 800b06e:	6413      	str	r3, [r2, #64]	; 0x40
 800b070:	4b1c      	ldr	r3, [pc, #112]	; (800b0e4 <HAL_InitTick+0xa4>)
 800b072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b074:	f003 0310 	and.w	r3, r3, #16
 800b078:	60fb      	str	r3, [r7, #12]
 800b07a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800b07c:	f107 0210 	add.w	r2, r7, #16
 800b080:	f107 0314 	add.w	r3, r7, #20
 800b084:	4611      	mov	r1, r2
 800b086:	4618      	mov	r0, r3
 800b088:	f002 ff72 	bl	800df70 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800b08c:	f002 ff48 	bl	800df20 <HAL_RCC_GetPCLK1Freq>
 800b090:	4603      	mov	r3, r0
 800b092:	005b      	lsls	r3, r3, #1
 800b094:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800b096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b098:	4a13      	ldr	r2, [pc, #76]	; (800b0e8 <HAL_InitTick+0xa8>)
 800b09a:	fba2 2303 	umull	r2, r3, r2, r3
 800b09e:	0c9b      	lsrs	r3, r3, #18
 800b0a0:	3b01      	subs	r3, #1
 800b0a2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800b0a4:	4b11      	ldr	r3, [pc, #68]	; (800b0ec <HAL_InitTick+0xac>)
 800b0a6:	4a12      	ldr	r2, [pc, #72]	; (800b0f0 <HAL_InitTick+0xb0>)
 800b0a8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800b0aa:	4b10      	ldr	r3, [pc, #64]	; (800b0ec <HAL_InitTick+0xac>)
 800b0ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b0b0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800b0b2:	4a0e      	ldr	r2, [pc, #56]	; (800b0ec <HAL_InitTick+0xac>)
 800b0b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0b6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800b0b8:	4b0c      	ldr	r3, [pc, #48]	; (800b0ec <HAL_InitTick+0xac>)
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b0be:	4b0b      	ldr	r3, [pc, #44]	; (800b0ec <HAL_InitTick+0xac>)
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800b0c4:	4809      	ldr	r0, [pc, #36]	; (800b0ec <HAL_InitTick+0xac>)
 800b0c6:	f002 ff85 	bl	800dfd4 <HAL_TIM_Base_Init>
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d104      	bne.n	800b0da <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800b0d0:	4806      	ldr	r0, [pc, #24]	; (800b0ec <HAL_InitTick+0xac>)
 800b0d2:	f002 ffce 	bl	800e072 <HAL_TIM_Base_Start_IT>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	e000      	b.n	800b0dc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800b0da:	2301      	movs	r3, #1
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3730      	adds	r7, #48	; 0x30
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}
 800b0e4:	40023800 	.word	0x40023800
 800b0e8:	431bde83 	.word	0x431bde83
 800b0ec:	200068f8 	.word	0x200068f8
 800b0f0:	40001000 	.word	0x40001000

0800b0f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800b0f8:	bf00      	nop
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b100:	4770      	bx	lr
	...

0800b104 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  LOG_REPORT("ic.c: HARDFAULT ERROR", __LINE__);
 800b108:	2162      	movs	r1, #98	; 0x62
 800b10a:	4802      	ldr	r0, [pc, #8]	; (800b114 <HardFault_Handler+0x10>)
 800b10c:	f7f6 fe32 	bl	8001d74 <LOG_REPORT>
 800b110:	e7fa      	b.n	800b108 <HardFault_Handler+0x4>
 800b112:	bf00      	nop
 800b114:	0801b4f8 	.word	0x0801b4f8

0800b118 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  LOG_REPORT("ic.c: MEMORY ERROR", __LINE__);
 800b11c:	2172      	movs	r1, #114	; 0x72
 800b11e:	4802      	ldr	r0, [pc, #8]	; (800b128 <MemManage_Handler+0x10>)
 800b120:	f7f6 fe28 	bl	8001d74 <LOG_REPORT>
 800b124:	e7fa      	b.n	800b11c <MemManage_Handler+0x4>
 800b126:	bf00      	nop
 800b128:	0801b510 	.word	0x0801b510

0800b12c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  LOG_REPORT("ic.c: BUS ERROR", __LINE__);
 800b130:	2182      	movs	r1, #130	; 0x82
 800b132:	4802      	ldr	r0, [pc, #8]	; (800b13c <BusFault_Handler+0x10>)
 800b134:	f7f6 fe1e 	bl	8001d74 <LOG_REPORT>
 800b138:	e7fa      	b.n	800b130 <BusFault_Handler+0x4>
 800b13a:	bf00      	nop
 800b13c:	0801b524 	.word	0x0801b524

0800b140 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b140:	b480      	push	{r7}
 800b142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b144:	e7fe      	b.n	800b144 <UsageFault_Handler+0x4>

0800b146 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b146:	b480      	push	{r7}
 800b148:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b14a:	bf00      	nop
 800b14c:	46bd      	mov	sp, r7
 800b14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b152:	4770      	bx	lr

0800b154 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800b158:	4802      	ldr	r0, [pc, #8]	; (800b164 <DMA1_Stream4_IRQHandler+0x10>)
 800b15a:	f000 fca3 	bl	800baa4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800b15e:	bf00      	nop
 800b160:	bd80      	pop	{r7, pc}
 800b162:	bf00      	nop
 800b164:	200069f8 	.word	0x200069f8

0800b168 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800b16c:	4802      	ldr	r0, [pc, #8]	; (800b178 <UART4_IRQHandler+0x10>)
 800b16e:	f003 fc0f 	bl	800e990 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800b172:	bf00      	nop
 800b174:	bd80      	pop	{r7, pc}
 800b176:	bf00      	nop
 800b178:	200069b8 	.word	0x200069b8

0800b17c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800b180:	4802      	ldr	r0, [pc, #8]	; (800b18c <TIM6_DAC_IRQHandler+0x10>)
 800b182:	f002 ff9a 	bl	800e0ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800b186:	bf00      	nop
 800b188:	bd80      	pop	{r7, pc}
 800b18a:	bf00      	nop
 800b18c:	200068f8 	.word	0x200068f8

0800b190 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	osSignalSet(defaultTaskHandle, 0x01);
 800b194:	4b05      	ldr	r3, [pc, #20]	; (800b1ac <TIM7_IRQHandler+0x1c>)
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	2101      	movs	r1, #1
 800b19a:	4618      	mov	r0, r3
 800b19c:	f007 fadc 	bl	8012758 <osSignalSet>
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800b1a0:	4803      	ldr	r0, [pc, #12]	; (800b1b0 <TIM7_IRQHandler+0x20>)
 800b1a2:	f002 ff8a 	bl	800e0ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  /* USER CODE END TIM7_IRQn 1 */
}
 800b1a6:	bf00      	nop
 800b1a8:	bd80      	pop	{r7, pc}
 800b1aa:	bf00      	nop
 800b1ac:	20005a34 	.word	0x20005a34
 800b1b0:	20006978 	.word	0x20006978

0800b1b4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800b1b8:	4802      	ldr	r0, [pc, #8]	; (800b1c4 <OTG_FS_IRQHandler+0x10>)
 800b1ba:	f001 fa43 	bl	800c644 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800b1be:	bf00      	nop
 800b1c0:	bd80      	pop	{r7, pc}
 800b1c2:	bf00      	nop
 800b1c4:	20007334 	.word	0x20007334

0800b1c8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b084      	sub	sp, #16
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800b1d0:	4b11      	ldr	r3, [pc, #68]	; (800b218 <_sbrk+0x50>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d102      	bne.n	800b1de <_sbrk+0x16>
		heap_end = &end;
 800b1d8:	4b0f      	ldr	r3, [pc, #60]	; (800b218 <_sbrk+0x50>)
 800b1da:	4a10      	ldr	r2, [pc, #64]	; (800b21c <_sbrk+0x54>)
 800b1dc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800b1de:	4b0e      	ldr	r3, [pc, #56]	; (800b218 <_sbrk+0x50>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800b1e4:	4b0c      	ldr	r3, [pc, #48]	; (800b218 <_sbrk+0x50>)
 800b1e6:	681a      	ldr	r2, [r3, #0]
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	4413      	add	r3, r2
 800b1ec:	466a      	mov	r2, sp
 800b1ee:	4293      	cmp	r3, r2
 800b1f0:	d907      	bls.n	800b202 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800b1f2:	f00a fdc1 	bl	8015d78 <__errno>
 800b1f6:	4602      	mov	r2, r0
 800b1f8:	230c      	movs	r3, #12
 800b1fa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800b1fc:	f04f 33ff 	mov.w	r3, #4294967295
 800b200:	e006      	b.n	800b210 <_sbrk+0x48>
	}

	heap_end += incr;
 800b202:	4b05      	ldr	r3, [pc, #20]	; (800b218 <_sbrk+0x50>)
 800b204:	681a      	ldr	r2, [r3, #0]
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	4413      	add	r3, r2
 800b20a:	4a03      	ldr	r2, [pc, #12]	; (800b218 <_sbrk+0x50>)
 800b20c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800b20e:	68fb      	ldr	r3, [r7, #12]
}
 800b210:	4618      	mov	r0, r3
 800b212:	3710      	adds	r7, #16
 800b214:	46bd      	mov	sp, r7
 800b216:	bd80      	pop	{r7, pc}
 800b218:	20001000 	.word	0x20001000
 800b21c:	20007740 	.word	0x20007740

0800b220 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b220:	b480      	push	{r7}
 800b222:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b224:	4b08      	ldr	r3, [pc, #32]	; (800b248 <SystemInit+0x28>)
 800b226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b22a:	4a07      	ldr	r2, [pc, #28]	; (800b248 <SystemInit+0x28>)
 800b22c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b230:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b234:	4b04      	ldr	r3, [pc, #16]	; (800b248 <SystemInit+0x28>)
 800b236:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b23a:	609a      	str	r2, [r3, #8]
#endif
}
 800b23c:	bf00      	nop
 800b23e:	46bd      	mov	sp, r7
 800b240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b244:	4770      	bx	lr
 800b246:	bf00      	nop
 800b248:	e000ed00 	.word	0xe000ed00

0800b24c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b086      	sub	sp, #24
 800b250:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b252:	f107 0308 	add.w	r3, r7, #8
 800b256:	2200      	movs	r2, #0
 800b258:	601a      	str	r2, [r3, #0]
 800b25a:	605a      	str	r2, [r3, #4]
 800b25c:	609a      	str	r2, [r3, #8]
 800b25e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b260:	463b      	mov	r3, r7
 800b262:	2200      	movs	r2, #0
 800b264:	601a      	str	r2, [r3, #0]
 800b266:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800b268:	4b1e      	ldr	r3, [pc, #120]	; (800b2e4 <MX_TIM2_Init+0x98>)
 800b26a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b26e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 25000;
 800b270:	4b1c      	ldr	r3, [pc, #112]	; (800b2e4 <MX_TIM2_Init+0x98>)
 800b272:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800b276:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b278:	4b1a      	ldr	r3, [pc, #104]	; (800b2e4 <MX_TIM2_Init+0x98>)
 800b27a:	2200      	movs	r2, #0
 800b27c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff;
 800b27e:	4b19      	ldr	r3, [pc, #100]	; (800b2e4 <MX_TIM2_Init+0x98>)
 800b280:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b284:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b286:	4b17      	ldr	r3, [pc, #92]	; (800b2e4 <MX_TIM2_Init+0x98>)
 800b288:	2200      	movs	r2, #0
 800b28a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b28c:	4b15      	ldr	r3, [pc, #84]	; (800b2e4 <MX_TIM2_Init+0x98>)
 800b28e:	2200      	movs	r2, #0
 800b290:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800b292:	4814      	ldr	r0, [pc, #80]	; (800b2e4 <MX_TIM2_Init+0x98>)
 800b294:	f002 fe9e 	bl	800dfd4 <HAL_TIM_Base_Init>
 800b298:	4603      	mov	r3, r0
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d001      	beq.n	800b2a2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800b29e:	f7f9 f91d 	bl	80044dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b2a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b2a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800b2a8:	f107 0308 	add.w	r3, r7, #8
 800b2ac:	4619      	mov	r1, r3
 800b2ae:	480d      	ldr	r0, [pc, #52]	; (800b2e4 <MX_TIM2_Init+0x98>)
 800b2b0:	f003 f80b 	bl	800e2ca <HAL_TIM_ConfigClockSource>
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d001      	beq.n	800b2be <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800b2ba:	f7f9 f90f 	bl	80044dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800b2c6:	463b      	mov	r3, r7
 800b2c8:	4619      	mov	r1, r3
 800b2ca:	4806      	ldr	r0, [pc, #24]	; (800b2e4 <MX_TIM2_Init+0x98>)
 800b2cc:	f003 fa16 	bl	800e6fc <HAL_TIMEx_MasterConfigSynchronization>
 800b2d0:	4603      	mov	r3, r0
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d001      	beq.n	800b2da <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800b2d6:	f7f9 f901 	bl	80044dc <Error_Handler>
  }

}
 800b2da:	bf00      	nop
 800b2dc:	3718      	adds	r7, #24
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}
 800b2e2:	bf00      	nop
 800b2e4:	20006938 	.word	0x20006938

0800b2e8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b082      	sub	sp, #8
 800b2ec:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b2ee:	463b      	mov	r3, r7
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	601a      	str	r2, [r3, #0]
 800b2f4:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 800b2f6:	4b15      	ldr	r3, [pc, #84]	; (800b34c <MX_TIM7_Init+0x64>)
 800b2f8:	4a15      	ldr	r2, [pc, #84]	; (800b350 <MX_TIM7_Init+0x68>)
 800b2fa:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 800b2fc:	4b13      	ldr	r3, [pc, #76]	; (800b34c <MX_TIM7_Init+0x64>)
 800b2fe:	2253      	movs	r2, #83	; 0x53
 800b300:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b302:	4b12      	ldr	r3, [pc, #72]	; (800b34c <MX_TIM7_Init+0x64>)
 800b304:	2200      	movs	r2, #0
 800b306:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 800b308:	4b10      	ldr	r3, [pc, #64]	; (800b34c <MX_TIM7_Init+0x64>)
 800b30a:	f242 720f 	movw	r2, #9999	; 0x270f
 800b30e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b310:	4b0e      	ldr	r3, [pc, #56]	; (800b34c <MX_TIM7_Init+0x64>)
 800b312:	2200      	movs	r2, #0
 800b314:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800b316:	480d      	ldr	r0, [pc, #52]	; (800b34c <MX_TIM7_Init+0x64>)
 800b318:	f002 fe5c 	bl	800dfd4 <HAL_TIM_Base_Init>
 800b31c:	4603      	mov	r3, r0
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d001      	beq.n	800b326 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800b322:	f7f9 f8db 	bl	80044dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b326:	2300      	movs	r3, #0
 800b328:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b32a:	2300      	movs	r3, #0
 800b32c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800b32e:	463b      	mov	r3, r7
 800b330:	4619      	mov	r1, r3
 800b332:	4806      	ldr	r0, [pc, #24]	; (800b34c <MX_TIM7_Init+0x64>)
 800b334:	f003 f9e2 	bl	800e6fc <HAL_TIMEx_MasterConfigSynchronization>
 800b338:	4603      	mov	r3, r0
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d001      	beq.n	800b342 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800b33e:	f7f9 f8cd 	bl	80044dc <Error_Handler>
  }

}
 800b342:	bf00      	nop
 800b344:	3708      	adds	r7, #8
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}
 800b34a:	bf00      	nop
 800b34c:	20006978 	.word	0x20006978
 800b350:	40001400 	.word	0x40001400

0800b354 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b084      	sub	sp, #16
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b364:	d10e      	bne.n	800b384 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b366:	2300      	movs	r3, #0
 800b368:	60fb      	str	r3, [r7, #12]
 800b36a:	4b16      	ldr	r3, [pc, #88]	; (800b3c4 <HAL_TIM_Base_MspInit+0x70>)
 800b36c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b36e:	4a15      	ldr	r2, [pc, #84]	; (800b3c4 <HAL_TIM_Base_MspInit+0x70>)
 800b370:	f043 0301 	orr.w	r3, r3, #1
 800b374:	6413      	str	r3, [r2, #64]	; 0x40
 800b376:	4b13      	ldr	r3, [pc, #76]	; (800b3c4 <HAL_TIM_Base_MspInit+0x70>)
 800b378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b37a:	f003 0301 	and.w	r3, r3, #1
 800b37e:	60fb      	str	r3, [r7, #12]
 800b380:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800b382:	e01a      	b.n	800b3ba <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM7)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	4a0f      	ldr	r2, [pc, #60]	; (800b3c8 <HAL_TIM_Base_MspInit+0x74>)
 800b38a:	4293      	cmp	r3, r2
 800b38c:	d115      	bne.n	800b3ba <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800b38e:	2300      	movs	r3, #0
 800b390:	60bb      	str	r3, [r7, #8]
 800b392:	4b0c      	ldr	r3, [pc, #48]	; (800b3c4 <HAL_TIM_Base_MspInit+0x70>)
 800b394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b396:	4a0b      	ldr	r2, [pc, #44]	; (800b3c4 <HAL_TIM_Base_MspInit+0x70>)
 800b398:	f043 0320 	orr.w	r3, r3, #32
 800b39c:	6413      	str	r3, [r2, #64]	; 0x40
 800b39e:	4b09      	ldr	r3, [pc, #36]	; (800b3c4 <HAL_TIM_Base_MspInit+0x70>)
 800b3a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3a2:	f003 0320 	and.w	r3, r3, #32
 800b3a6:	60bb      	str	r3, [r7, #8]
 800b3a8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	2105      	movs	r1, #5
 800b3ae:	2037      	movs	r0, #55	; 0x37
 800b3b0:	f000 fa26 	bl	800b800 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800b3b4:	2037      	movs	r0, #55	; 0x37
 800b3b6:	f000 fa3f 	bl	800b838 <HAL_NVIC_EnableIRQ>
}
 800b3ba:	bf00      	nop
 800b3bc:	3710      	adds	r7, #16
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}
 800b3c2:	bf00      	nop
 800b3c4:	40023800 	.word	0x40023800
 800b3c8:	40001400 	.word	0x40001400

0800b3cc <MX_UART4_Init>:
UART_HandleTypeDef huart4;
DMA_HandleTypeDef hdma_uart4_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 800b3d0:	4b11      	ldr	r3, [pc, #68]	; (800b418 <MX_UART4_Init+0x4c>)
 800b3d2:	4a12      	ldr	r2, [pc, #72]	; (800b41c <MX_UART4_Init+0x50>)
 800b3d4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800b3d6:	4b10      	ldr	r3, [pc, #64]	; (800b418 <MX_UART4_Init+0x4c>)
 800b3d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b3dc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800b3de:	4b0e      	ldr	r3, [pc, #56]	; (800b418 <MX_UART4_Init+0x4c>)
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800b3e4:	4b0c      	ldr	r3, [pc, #48]	; (800b418 <MX_UART4_Init+0x4c>)
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800b3ea:	4b0b      	ldr	r3, [pc, #44]	; (800b418 <MX_UART4_Init+0x4c>)
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800b3f0:	4b09      	ldr	r3, [pc, #36]	; (800b418 <MX_UART4_Init+0x4c>)
 800b3f2:	220c      	movs	r2, #12
 800b3f4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b3f6:	4b08      	ldr	r3, [pc, #32]	; (800b418 <MX_UART4_Init+0x4c>)
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800b3fc:	4b06      	ldr	r3, [pc, #24]	; (800b418 <MX_UART4_Init+0x4c>)
 800b3fe:	2200      	movs	r2, #0
 800b400:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800b402:	4805      	ldr	r0, [pc, #20]	; (800b418 <MX_UART4_Init+0x4c>)
 800b404:	f003 fa0a 	bl	800e81c <HAL_UART_Init>
 800b408:	4603      	mov	r3, r0
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d001      	beq.n	800b412 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800b40e:	f7f9 f865 	bl	80044dc <Error_Handler>
  }

}
 800b412:	bf00      	nop
 800b414:	bd80      	pop	{r7, pc}
 800b416:	bf00      	nop
 800b418:	200069b8 	.word	0x200069b8
 800b41c:	40004c00 	.word	0x40004c00

0800b420 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b08a      	sub	sp, #40	; 0x28
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b428:	f107 0314 	add.w	r3, r7, #20
 800b42c:	2200      	movs	r2, #0
 800b42e:	601a      	str	r2, [r3, #0]
 800b430:	605a      	str	r2, [r3, #4]
 800b432:	609a      	str	r2, [r3, #8]
 800b434:	60da      	str	r2, [r3, #12]
 800b436:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	4a34      	ldr	r2, [pc, #208]	; (800b510 <HAL_UART_MspInit+0xf0>)
 800b43e:	4293      	cmp	r3, r2
 800b440:	d161      	bne.n	800b506 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800b442:	2300      	movs	r3, #0
 800b444:	613b      	str	r3, [r7, #16]
 800b446:	4b33      	ldr	r3, [pc, #204]	; (800b514 <HAL_UART_MspInit+0xf4>)
 800b448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b44a:	4a32      	ldr	r2, [pc, #200]	; (800b514 <HAL_UART_MspInit+0xf4>)
 800b44c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b450:	6413      	str	r3, [r2, #64]	; 0x40
 800b452:	4b30      	ldr	r3, [pc, #192]	; (800b514 <HAL_UART_MspInit+0xf4>)
 800b454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b456:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b45a:	613b      	str	r3, [r7, #16]
 800b45c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b45e:	2300      	movs	r3, #0
 800b460:	60fb      	str	r3, [r7, #12]
 800b462:	4b2c      	ldr	r3, [pc, #176]	; (800b514 <HAL_UART_MspInit+0xf4>)
 800b464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b466:	4a2b      	ldr	r2, [pc, #172]	; (800b514 <HAL_UART_MspInit+0xf4>)
 800b468:	f043 0301 	orr.w	r3, r3, #1
 800b46c:	6313      	str	r3, [r2, #48]	; 0x30
 800b46e:	4b29      	ldr	r3, [pc, #164]	; (800b514 <HAL_UART_MspInit+0xf4>)
 800b470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b472:	f003 0301 	and.w	r3, r3, #1
 800b476:	60fb      	str	r3, [r7, #12]
 800b478:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800b47a:	2303      	movs	r3, #3
 800b47c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b47e:	2302      	movs	r3, #2
 800b480:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b482:	2301      	movs	r3, #1
 800b484:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b486:	2303      	movs	r3, #3
 800b488:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800b48a:	2308      	movs	r3, #8
 800b48c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b48e:	f107 0314 	add.w	r3, r7, #20
 800b492:	4619      	mov	r1, r3
 800b494:	4820      	ldr	r0, [pc, #128]	; (800b518 <HAL_UART_MspInit+0xf8>)
 800b496:	f000 fd7b 	bl	800bf90 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800b49a:	4b20      	ldr	r3, [pc, #128]	; (800b51c <HAL_UART_MspInit+0xfc>)
 800b49c:	4a20      	ldr	r2, [pc, #128]	; (800b520 <HAL_UART_MspInit+0x100>)
 800b49e:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 800b4a0:	4b1e      	ldr	r3, [pc, #120]	; (800b51c <HAL_UART_MspInit+0xfc>)
 800b4a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b4a6:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b4a8:	4b1c      	ldr	r3, [pc, #112]	; (800b51c <HAL_UART_MspInit+0xfc>)
 800b4aa:	2240      	movs	r2, #64	; 0x40
 800b4ac:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b4ae:	4b1b      	ldr	r3, [pc, #108]	; (800b51c <HAL_UART_MspInit+0xfc>)
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b4b4:	4b19      	ldr	r3, [pc, #100]	; (800b51c <HAL_UART_MspInit+0xfc>)
 800b4b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b4ba:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b4bc:	4b17      	ldr	r3, [pc, #92]	; (800b51c <HAL_UART_MspInit+0xfc>)
 800b4be:	2200      	movs	r2, #0
 800b4c0:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b4c2:	4b16      	ldr	r3, [pc, #88]	; (800b51c <HAL_UART_MspInit+0xfc>)
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800b4c8:	4b14      	ldr	r3, [pc, #80]	; (800b51c <HAL_UART_MspInit+0xfc>)
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800b4ce:	4b13      	ldr	r3, [pc, #76]	; (800b51c <HAL_UART_MspInit+0xfc>)
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b4d4:	4b11      	ldr	r3, [pc, #68]	; (800b51c <HAL_UART_MspInit+0xfc>)
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800b4da:	4810      	ldr	r0, [pc, #64]	; (800b51c <HAL_UART_MspInit+0xfc>)
 800b4dc:	f000 f9ba 	bl	800b854 <HAL_DMA_Init>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d001      	beq.n	800b4ea <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800b4e6:	f7f8 fff9 	bl	80044dc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	4a0b      	ldr	r2, [pc, #44]	; (800b51c <HAL_UART_MspInit+0xfc>)
 800b4ee:	631a      	str	r2, [r3, #48]	; 0x30
 800b4f0:	4a0a      	ldr	r2, [pc, #40]	; (800b51c <HAL_UART_MspInit+0xfc>)
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	2105      	movs	r1, #5
 800b4fa:	2034      	movs	r0, #52	; 0x34
 800b4fc:	f000 f980 	bl	800b800 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800b500:	2034      	movs	r0, #52	; 0x34
 800b502:	f000 f999 	bl	800b838 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 800b506:	bf00      	nop
 800b508:	3728      	adds	r7, #40	; 0x28
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bd80      	pop	{r7, pc}
 800b50e:	bf00      	nop
 800b510:	40004c00 	.word	0x40004c00
 800b514:	40023800 	.word	0x40023800
 800b518:	40020000 	.word	0x40020000
 800b51c:	200069f8 	.word	0x200069f8
 800b520:	40026070 	.word	0x40026070

0800b524 <HAL_UART_TxCpltCallback>:
  /* USER CODE END UART4_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800b524:	b580      	push	{r7, lr}
 800b526:	b084      	sub	sp, #16
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
	if (UART4 == huart->Instance) {
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	4a0c      	ldr	r2, [pc, #48]	; (800b564 <HAL_UART_TxCpltCallback+0x40>)
 800b532:	4293      	cmp	r3, r2
 800b534:	d112      	bne.n	800b55c <HAL_UART_TxCpltCallback+0x38>
		uint16_t size_dma;
		size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 800b536:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b53a:	490b      	ldr	r1, [pc, #44]	; (800b568 <HAL_UART_TxCpltCallback+0x44>)
 800b53c:	480b      	ldr	r0, [pc, #44]	; (800b56c <HAL_UART_TxCpltCallback+0x48>)
 800b53e:	f7f9 f86c 	bl	800461a <ringBuff_PopArray>
 800b542:	4603      	mov	r3, r0
 800b544:	81fb      	strh	r3, [r7, #14]
		if (0 == size_dma) {
 800b546:	89fb      	ldrh	r3, [r7, #14]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d006      	beq.n	800b55a <HAL_UART_TxCpltCallback+0x36>
			return;
		}
		HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 800b54c:	89fb      	ldrh	r3, [r7, #14]
 800b54e:	461a      	mov	r2, r3
 800b550:	4905      	ldr	r1, [pc, #20]	; (800b568 <HAL_UART_TxCpltCallback+0x44>)
 800b552:	4807      	ldr	r0, [pc, #28]	; (800b570 <HAL_UART_TxCpltCallback+0x4c>)
 800b554:	f003 f9b0 	bl	800e8b8 <HAL_UART_Transmit_DMA>
 800b558:	e000      	b.n	800b55c <HAL_UART_TxCpltCallback+0x38>
			return;
 800b55a:	bf00      	nop
	}
}
 800b55c:	3710      	adds	r7, #16
 800b55e:	46bd      	mov	sp, r7
 800b560:	bd80      	pop	{r7, pc}
 800b562:	bf00      	nop
 800b564:	40004c00 	.word	0x40004c00
 800b568:	20005930 	.word	0x20005930
 800b56c:	20000410 	.word	0x20000410
 800b570:	200069b8 	.word	0x200069b8

0800b574 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800b574:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b5ac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b578:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b57a:	e003      	b.n	800b584 <LoopCopyDataInit>

0800b57c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b57c:	4b0c      	ldr	r3, [pc, #48]	; (800b5b0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b57e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b580:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b582:	3104      	adds	r1, #4

0800b584 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b584:	480b      	ldr	r0, [pc, #44]	; (800b5b4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b586:	4b0c      	ldr	r3, [pc, #48]	; (800b5b8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b588:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b58a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b58c:	d3f6      	bcc.n	800b57c <CopyDataInit>
  ldr  r2, =_sbss
 800b58e:	4a0b      	ldr	r2, [pc, #44]	; (800b5bc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b590:	e002      	b.n	800b598 <LoopFillZerobss>

0800b592 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b592:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b594:	f842 3b04 	str.w	r3, [r2], #4

0800b598 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b598:	4b09      	ldr	r3, [pc, #36]	; (800b5c0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b59a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b59c:	d3f9      	bcc.n	800b592 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b59e:	f7ff fe3f 	bl	800b220 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b5a2:	f00a fbef 	bl	8015d84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b5a6:	f7f8 ff05 	bl	80043b4 <main>
  bx  lr    
 800b5aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800b5ac:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800b5b0:	0801ba90 	.word	0x0801ba90
  ldr  r0, =_sdata
 800b5b4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800b5b8:	20000b80 	.word	0x20000b80
  ldr  r2, =_sbss
 800b5bc:	20000b80 	.word	0x20000b80
  ldr  r3, = _ebss
 800b5c0:	20007740 	.word	0x20007740

0800b5c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b5c4:	e7fe      	b.n	800b5c4 <ADC_IRQHandler>
	...

0800b5c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800b5cc:	4b0e      	ldr	r3, [pc, #56]	; (800b608 <HAL_Init+0x40>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	4a0d      	ldr	r2, [pc, #52]	; (800b608 <HAL_Init+0x40>)
 800b5d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b5d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800b5d8:	4b0b      	ldr	r3, [pc, #44]	; (800b608 <HAL_Init+0x40>)
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	4a0a      	ldr	r2, [pc, #40]	; (800b608 <HAL_Init+0x40>)
 800b5de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b5e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800b5e4:	4b08      	ldr	r3, [pc, #32]	; (800b608 <HAL_Init+0x40>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	4a07      	ldr	r2, [pc, #28]	; (800b608 <HAL_Init+0x40>)
 800b5ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b5ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b5f0:	2003      	movs	r0, #3
 800b5f2:	f000 f8fa 	bl	800b7ea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b5f6:	2000      	movs	r0, #0
 800b5f8:	f7ff fd22 	bl	800b040 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800b5fc:	f7ff fcf4 	bl	800afe8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b600:	2300      	movs	r3, #0
}
 800b602:	4618      	mov	r0, r3
 800b604:	bd80      	pop	{r7, pc}
 800b606:	bf00      	nop
 800b608:	40023c00 	.word	0x40023c00

0800b60c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b60c:	b480      	push	{r7}
 800b60e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b610:	4b06      	ldr	r3, [pc, #24]	; (800b62c <HAL_IncTick+0x20>)
 800b612:	781b      	ldrb	r3, [r3, #0]
 800b614:	461a      	mov	r2, r3
 800b616:	4b06      	ldr	r3, [pc, #24]	; (800b630 <HAL_IncTick+0x24>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	4413      	add	r3, r2
 800b61c:	4a04      	ldr	r2, [pc, #16]	; (800b630 <HAL_IncTick+0x24>)
 800b61e:	6013      	str	r3, [r2, #0]
}
 800b620:	bf00      	nop
 800b622:	46bd      	mov	sp, r7
 800b624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b628:	4770      	bx	lr
 800b62a:	bf00      	nop
 800b62c:	20000830 	.word	0x20000830
 800b630:	20006a58 	.word	0x20006a58

0800b634 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b634:	b480      	push	{r7}
 800b636:	af00      	add	r7, sp, #0
  return uwTick;
 800b638:	4b03      	ldr	r3, [pc, #12]	; (800b648 <HAL_GetTick+0x14>)
 800b63a:	681b      	ldr	r3, [r3, #0]
}
 800b63c:	4618      	mov	r0, r3
 800b63e:	46bd      	mov	sp, r7
 800b640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b644:	4770      	bx	lr
 800b646:	bf00      	nop
 800b648:	20006a58 	.word	0x20006a58

0800b64c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b084      	sub	sp, #16
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b654:	f7ff ffee 	bl	800b634 <HAL_GetTick>
 800b658:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b664:	d005      	beq.n	800b672 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b666:	4b09      	ldr	r3, [pc, #36]	; (800b68c <HAL_Delay+0x40>)
 800b668:	781b      	ldrb	r3, [r3, #0]
 800b66a:	461a      	mov	r2, r3
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	4413      	add	r3, r2
 800b670:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800b672:	bf00      	nop
 800b674:	f7ff ffde 	bl	800b634 <HAL_GetTick>
 800b678:	4602      	mov	r2, r0
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	1ad3      	subs	r3, r2, r3
 800b67e:	68fa      	ldr	r2, [r7, #12]
 800b680:	429a      	cmp	r2, r3
 800b682:	d8f7      	bhi.n	800b674 <HAL_Delay+0x28>
  {
  }
}
 800b684:	bf00      	nop
 800b686:	3710      	adds	r7, #16
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd80      	pop	{r7, pc}
 800b68c:	20000830 	.word	0x20000830

0800b690 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b690:	b480      	push	{r7}
 800b692:	b085      	sub	sp, #20
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	f003 0307 	and.w	r3, r3, #7
 800b69e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b6a0:	4b0c      	ldr	r3, [pc, #48]	; (800b6d4 <__NVIC_SetPriorityGrouping+0x44>)
 800b6a2:	68db      	ldr	r3, [r3, #12]
 800b6a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b6a6:	68ba      	ldr	r2, [r7, #8]
 800b6a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b6ac:	4013      	ands	r3, r2
 800b6ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b6b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b6bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b6c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b6c2:	4a04      	ldr	r2, [pc, #16]	; (800b6d4 <__NVIC_SetPriorityGrouping+0x44>)
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	60d3      	str	r3, [r2, #12]
}
 800b6c8:	bf00      	nop
 800b6ca:	3714      	adds	r7, #20
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d2:	4770      	bx	lr
 800b6d4:	e000ed00 	.word	0xe000ed00

0800b6d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b6d8:	b480      	push	{r7}
 800b6da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b6dc:	4b04      	ldr	r3, [pc, #16]	; (800b6f0 <__NVIC_GetPriorityGrouping+0x18>)
 800b6de:	68db      	ldr	r3, [r3, #12]
 800b6e0:	0a1b      	lsrs	r3, r3, #8
 800b6e2:	f003 0307 	and.w	r3, r3, #7
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ee:	4770      	bx	lr
 800b6f0:	e000ed00 	.word	0xe000ed00

0800b6f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	b083      	sub	sp, #12
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b6fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b702:	2b00      	cmp	r3, #0
 800b704:	db0b      	blt.n	800b71e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b706:	79fb      	ldrb	r3, [r7, #7]
 800b708:	f003 021f 	and.w	r2, r3, #31
 800b70c:	4907      	ldr	r1, [pc, #28]	; (800b72c <__NVIC_EnableIRQ+0x38>)
 800b70e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b712:	095b      	lsrs	r3, r3, #5
 800b714:	2001      	movs	r0, #1
 800b716:	fa00 f202 	lsl.w	r2, r0, r2
 800b71a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800b71e:	bf00      	nop
 800b720:	370c      	adds	r7, #12
 800b722:	46bd      	mov	sp, r7
 800b724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b728:	4770      	bx	lr
 800b72a:	bf00      	nop
 800b72c:	e000e100 	.word	0xe000e100

0800b730 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b730:	b480      	push	{r7}
 800b732:	b083      	sub	sp, #12
 800b734:	af00      	add	r7, sp, #0
 800b736:	4603      	mov	r3, r0
 800b738:	6039      	str	r1, [r7, #0]
 800b73a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b73c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b740:	2b00      	cmp	r3, #0
 800b742:	db0a      	blt.n	800b75a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	b2da      	uxtb	r2, r3
 800b748:	490c      	ldr	r1, [pc, #48]	; (800b77c <__NVIC_SetPriority+0x4c>)
 800b74a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b74e:	0112      	lsls	r2, r2, #4
 800b750:	b2d2      	uxtb	r2, r2
 800b752:	440b      	add	r3, r1
 800b754:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b758:	e00a      	b.n	800b770 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	b2da      	uxtb	r2, r3
 800b75e:	4908      	ldr	r1, [pc, #32]	; (800b780 <__NVIC_SetPriority+0x50>)
 800b760:	79fb      	ldrb	r3, [r7, #7]
 800b762:	f003 030f 	and.w	r3, r3, #15
 800b766:	3b04      	subs	r3, #4
 800b768:	0112      	lsls	r2, r2, #4
 800b76a:	b2d2      	uxtb	r2, r2
 800b76c:	440b      	add	r3, r1
 800b76e:	761a      	strb	r2, [r3, #24]
}
 800b770:	bf00      	nop
 800b772:	370c      	adds	r7, #12
 800b774:	46bd      	mov	sp, r7
 800b776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77a:	4770      	bx	lr
 800b77c:	e000e100 	.word	0xe000e100
 800b780:	e000ed00 	.word	0xe000ed00

0800b784 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b784:	b480      	push	{r7}
 800b786:	b089      	sub	sp, #36	; 0x24
 800b788:	af00      	add	r7, sp, #0
 800b78a:	60f8      	str	r0, [r7, #12]
 800b78c:	60b9      	str	r1, [r7, #8]
 800b78e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	f003 0307 	and.w	r3, r3, #7
 800b796:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b798:	69fb      	ldr	r3, [r7, #28]
 800b79a:	f1c3 0307 	rsb	r3, r3, #7
 800b79e:	2b04      	cmp	r3, #4
 800b7a0:	bf28      	it	cs
 800b7a2:	2304      	movcs	r3, #4
 800b7a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b7a6:	69fb      	ldr	r3, [r7, #28]
 800b7a8:	3304      	adds	r3, #4
 800b7aa:	2b06      	cmp	r3, #6
 800b7ac:	d902      	bls.n	800b7b4 <NVIC_EncodePriority+0x30>
 800b7ae:	69fb      	ldr	r3, [r7, #28]
 800b7b0:	3b03      	subs	r3, #3
 800b7b2:	e000      	b.n	800b7b6 <NVIC_EncodePriority+0x32>
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b7b8:	f04f 32ff 	mov.w	r2, #4294967295
 800b7bc:	69bb      	ldr	r3, [r7, #24]
 800b7be:	fa02 f303 	lsl.w	r3, r2, r3
 800b7c2:	43da      	mvns	r2, r3
 800b7c4:	68bb      	ldr	r3, [r7, #8]
 800b7c6:	401a      	ands	r2, r3
 800b7c8:	697b      	ldr	r3, [r7, #20]
 800b7ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b7cc:	f04f 31ff 	mov.w	r1, #4294967295
 800b7d0:	697b      	ldr	r3, [r7, #20]
 800b7d2:	fa01 f303 	lsl.w	r3, r1, r3
 800b7d6:	43d9      	mvns	r1, r3
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b7dc:	4313      	orrs	r3, r2
         );
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	3724      	adds	r7, #36	; 0x24
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e8:	4770      	bx	lr

0800b7ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b7ea:	b580      	push	{r7, lr}
 800b7ec:	b082      	sub	sp, #8
 800b7ee:	af00      	add	r7, sp, #0
 800b7f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b7f2:	6878      	ldr	r0, [r7, #4]
 800b7f4:	f7ff ff4c 	bl	800b690 <__NVIC_SetPriorityGrouping>
}
 800b7f8:	bf00      	nop
 800b7fa:	3708      	adds	r7, #8
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	bd80      	pop	{r7, pc}

0800b800 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b800:	b580      	push	{r7, lr}
 800b802:	b086      	sub	sp, #24
 800b804:	af00      	add	r7, sp, #0
 800b806:	4603      	mov	r3, r0
 800b808:	60b9      	str	r1, [r7, #8]
 800b80a:	607a      	str	r2, [r7, #4]
 800b80c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800b80e:	2300      	movs	r3, #0
 800b810:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b812:	f7ff ff61 	bl	800b6d8 <__NVIC_GetPriorityGrouping>
 800b816:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b818:	687a      	ldr	r2, [r7, #4]
 800b81a:	68b9      	ldr	r1, [r7, #8]
 800b81c:	6978      	ldr	r0, [r7, #20]
 800b81e:	f7ff ffb1 	bl	800b784 <NVIC_EncodePriority>
 800b822:	4602      	mov	r2, r0
 800b824:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b828:	4611      	mov	r1, r2
 800b82a:	4618      	mov	r0, r3
 800b82c:	f7ff ff80 	bl	800b730 <__NVIC_SetPriority>
}
 800b830:	bf00      	nop
 800b832:	3718      	adds	r7, #24
 800b834:	46bd      	mov	sp, r7
 800b836:	bd80      	pop	{r7, pc}

0800b838 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b082      	sub	sp, #8
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	4603      	mov	r3, r0
 800b840:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b846:	4618      	mov	r0, r3
 800b848:	f7ff ff54 	bl	800b6f4 <__NVIC_EnableIRQ>
}
 800b84c:	bf00      	nop
 800b84e:	3708      	adds	r7, #8
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}

0800b854 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b086      	sub	sp, #24
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800b85c:	2300      	movs	r3, #0
 800b85e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800b860:	f7ff fee8 	bl	800b634 <HAL_GetTick>
 800b864:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d101      	bne.n	800b870 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800b86c:	2301      	movs	r3, #1
 800b86e:	e099      	b.n	800b9a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2200      	movs	r2, #0
 800b874:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2202      	movs	r2, #2
 800b87c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	681a      	ldr	r2, [r3, #0]
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	f022 0201 	bic.w	r2, r2, #1
 800b88e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b890:	e00f      	b.n	800b8b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b892:	f7ff fecf 	bl	800b634 <HAL_GetTick>
 800b896:	4602      	mov	r2, r0
 800b898:	693b      	ldr	r3, [r7, #16]
 800b89a:	1ad3      	subs	r3, r2, r3
 800b89c:	2b05      	cmp	r3, #5
 800b89e:	d908      	bls.n	800b8b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2220      	movs	r2, #32
 800b8a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2203      	movs	r2, #3
 800b8aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800b8ae:	2303      	movs	r3, #3
 800b8b0:	e078      	b.n	800b9a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	f003 0301 	and.w	r3, r3, #1
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d1e8      	bne.n	800b892 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b8c8:	697a      	ldr	r2, [r7, #20]
 800b8ca:	4b38      	ldr	r3, [pc, #224]	; (800b9ac <HAL_DMA_Init+0x158>)
 800b8cc:	4013      	ands	r3, r2
 800b8ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	685a      	ldr	r2, [r3, #4]
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	689b      	ldr	r3, [r3, #8]
 800b8d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b8de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	691b      	ldr	r3, [r3, #16]
 800b8e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b8ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	699b      	ldr	r3, [r3, #24]
 800b8f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b8f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	6a1b      	ldr	r3, [r3, #32]
 800b8fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b8fe:	697a      	ldr	r2, [r7, #20]
 800b900:	4313      	orrs	r3, r2
 800b902:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b908:	2b04      	cmp	r3, #4
 800b90a:	d107      	bne.n	800b91c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b914:	4313      	orrs	r3, r2
 800b916:	697a      	ldr	r2, [r7, #20]
 800b918:	4313      	orrs	r3, r2
 800b91a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	697a      	ldr	r2, [r7, #20]
 800b922:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	695b      	ldr	r3, [r3, #20]
 800b92a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b92c:	697b      	ldr	r3, [r7, #20]
 800b92e:	f023 0307 	bic.w	r3, r3, #7
 800b932:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b938:	697a      	ldr	r2, [r7, #20]
 800b93a:	4313      	orrs	r3, r2
 800b93c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b942:	2b04      	cmp	r3, #4
 800b944:	d117      	bne.n	800b976 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b94a:	697a      	ldr	r2, [r7, #20]
 800b94c:	4313      	orrs	r3, r2
 800b94e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b954:	2b00      	cmp	r3, #0
 800b956:	d00e      	beq.n	800b976 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800b958:	6878      	ldr	r0, [r7, #4]
 800b95a:	f000 fa9f 	bl	800be9c <DMA_CheckFifoParam>
 800b95e:	4603      	mov	r3, r0
 800b960:	2b00      	cmp	r3, #0
 800b962:	d008      	beq.n	800b976 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2240      	movs	r2, #64	; 0x40
 800b968:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2201      	movs	r2, #1
 800b96e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800b972:	2301      	movs	r3, #1
 800b974:	e016      	b.n	800b9a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	697a      	ldr	r2, [r7, #20]
 800b97c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b97e:	6878      	ldr	r0, [r7, #4]
 800b980:	f000 fa56 	bl	800be30 <DMA_CalcBaseAndBitshift>
 800b984:	4603      	mov	r3, r0
 800b986:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b98c:	223f      	movs	r2, #63	; 0x3f
 800b98e:	409a      	lsls	r2, r3
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2200      	movs	r2, #0
 800b998:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2201      	movs	r2, #1
 800b99e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800b9a2:	2300      	movs	r3, #0
}
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	3718      	adds	r7, #24
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	bd80      	pop	{r7, pc}
 800b9ac:	f010803f 	.word	0xf010803f

0800b9b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b086      	sub	sp, #24
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	60f8      	str	r0, [r7, #12]
 800b9b8:	60b9      	str	r1, [r7, #8]
 800b9ba:	607a      	str	r2, [r7, #4]
 800b9bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b9be:	2300      	movs	r3, #0
 800b9c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b9ce:	2b01      	cmp	r3, #1
 800b9d0:	d101      	bne.n	800b9d6 <HAL_DMA_Start_IT+0x26>
 800b9d2:	2302      	movs	r3, #2
 800b9d4:	e040      	b.n	800ba58 <HAL_DMA_Start_IT+0xa8>
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	2201      	movs	r2, #1
 800b9da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b9e4:	b2db      	uxtb	r3, r3
 800b9e6:	2b01      	cmp	r3, #1
 800b9e8:	d12f      	bne.n	800ba4a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	2202      	movs	r2, #2
 800b9ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	687a      	ldr	r2, [r7, #4]
 800b9fc:	68b9      	ldr	r1, [r7, #8]
 800b9fe:	68f8      	ldr	r0, [r7, #12]
 800ba00:	f000 f9e8 	bl	800bdd4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba08:	223f      	movs	r2, #63	; 0x3f
 800ba0a:	409a      	lsls	r2, r3
 800ba0c:	693b      	ldr	r3, [r7, #16]
 800ba0e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	681a      	ldr	r2, [r3, #0]
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	f042 0216 	orr.w	r2, r2, #22
 800ba1e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d007      	beq.n	800ba38 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	681a      	ldr	r2, [r3, #0]
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	f042 0208 	orr.w	r2, r2, #8
 800ba36:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	681a      	ldr	r2, [r3, #0]
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	f042 0201 	orr.w	r2, r2, #1
 800ba46:	601a      	str	r2, [r3, #0]
 800ba48:	e005      	b.n	800ba56 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800ba52:	2302      	movs	r3, #2
 800ba54:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800ba56:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba58:	4618      	mov	r0, r3
 800ba5a:	3718      	adds	r7, #24
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bd80      	pop	{r7, pc}

0800ba60 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800ba60:	b480      	push	{r7}
 800ba62:	b083      	sub	sp, #12
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ba6e:	b2db      	uxtb	r3, r3
 800ba70:	2b02      	cmp	r3, #2
 800ba72:	d004      	beq.n	800ba7e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2280      	movs	r2, #128	; 0x80
 800ba78:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800ba7a:	2301      	movs	r3, #1
 800ba7c:	e00c      	b.n	800ba98 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	2205      	movs	r2, #5
 800ba82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	681a      	ldr	r2, [r3, #0]
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	f022 0201 	bic.w	r2, r2, #1
 800ba94:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800ba96:	2300      	movs	r3, #0
}
 800ba98:	4618      	mov	r0, r3
 800ba9a:	370c      	adds	r7, #12
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa2:	4770      	bx	lr

0800baa4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b086      	sub	sp, #24
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800baac:	2300      	movs	r3, #0
 800baae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800bab0:	4b92      	ldr	r3, [pc, #584]	; (800bcfc <HAL_DMA_IRQHandler+0x258>)
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	4a92      	ldr	r2, [pc, #584]	; (800bd00 <HAL_DMA_IRQHandler+0x25c>)
 800bab6:	fba2 2303 	umull	r2, r3, r2, r3
 800baba:	0a9b      	lsrs	r3, r3, #10
 800babc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bac2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800bac4:	693b      	ldr	r3, [r7, #16]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bace:	2208      	movs	r2, #8
 800bad0:	409a      	lsls	r2, r3
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	4013      	ands	r3, r2
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d01a      	beq.n	800bb10 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	f003 0304 	and.w	r3, r3, #4
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d013      	beq.n	800bb10 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	681a      	ldr	r2, [r3, #0]
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	f022 0204 	bic.w	r2, r2, #4
 800baf6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bafc:	2208      	movs	r2, #8
 800bafe:	409a      	lsls	r2, r3
 800bb00:	693b      	ldr	r3, [r7, #16]
 800bb02:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb08:	f043 0201 	orr.w	r2, r3, #1
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb14:	2201      	movs	r2, #1
 800bb16:	409a      	lsls	r2, r3
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	4013      	ands	r3, r2
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d012      	beq.n	800bb46 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	695b      	ldr	r3, [r3, #20]
 800bb26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d00b      	beq.n	800bb46 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb32:	2201      	movs	r2, #1
 800bb34:	409a      	lsls	r2, r3
 800bb36:	693b      	ldr	r3, [r7, #16]
 800bb38:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb3e:	f043 0202 	orr.w	r2, r3, #2
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb4a:	2204      	movs	r2, #4
 800bb4c:	409a      	lsls	r2, r3
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	4013      	ands	r3, r2
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d012      	beq.n	800bb7c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	f003 0302 	and.w	r3, r3, #2
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d00b      	beq.n	800bb7c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb68:	2204      	movs	r2, #4
 800bb6a:	409a      	lsls	r2, r3
 800bb6c:	693b      	ldr	r3, [r7, #16]
 800bb6e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb74:	f043 0204 	orr.w	r2, r3, #4
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb80:	2210      	movs	r2, #16
 800bb82:	409a      	lsls	r2, r3
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	4013      	ands	r3, r2
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d043      	beq.n	800bc14 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	f003 0308 	and.w	r3, r3, #8
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d03c      	beq.n	800bc14 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb9e:	2210      	movs	r2, #16
 800bba0:	409a      	lsls	r2, r3
 800bba2:	693b      	ldr	r3, [r7, #16]
 800bba4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d018      	beq.n	800bbe6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d108      	bne.n	800bbd4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d024      	beq.n	800bc14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbce:	6878      	ldr	r0, [r7, #4]
 800bbd0:	4798      	blx	r3
 800bbd2:	e01f      	b.n	800bc14 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d01b      	beq.n	800bc14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bbe0:	6878      	ldr	r0, [r7, #4]
 800bbe2:	4798      	blx	r3
 800bbe4:	e016      	b.n	800bc14 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d107      	bne.n	800bc04 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	681a      	ldr	r2, [r3, #0]
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	f022 0208 	bic.w	r2, r2, #8
 800bc02:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d003      	beq.n	800bc14 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc10:	6878      	ldr	r0, [r7, #4]
 800bc12:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc18:	2220      	movs	r2, #32
 800bc1a:	409a      	lsls	r2, r3
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	4013      	ands	r3, r2
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	f000 808e 	beq.w	800bd42 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	f003 0310 	and.w	r3, r3, #16
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	f000 8086 	beq.w	800bd42 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc3a:	2220      	movs	r2, #32
 800bc3c:	409a      	lsls	r2, r3
 800bc3e:	693b      	ldr	r3, [r7, #16]
 800bc40:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bc48:	b2db      	uxtb	r3, r3
 800bc4a:	2b05      	cmp	r3, #5
 800bc4c:	d136      	bne.n	800bcbc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	681a      	ldr	r2, [r3, #0]
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	f022 0216 	bic.w	r2, r2, #22
 800bc5c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	695a      	ldr	r2, [r3, #20]
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bc6c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d103      	bne.n	800bc7e <HAL_DMA_IRQHandler+0x1da>
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d007      	beq.n	800bc8e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	681a      	ldr	r2, [r3, #0]
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	f022 0208 	bic.w	r2, r2, #8
 800bc8c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc92:	223f      	movs	r2, #63	; 0x3f
 800bc94:	409a      	lsls	r2, r3
 800bc96:	693b      	ldr	r3, [r7, #16]
 800bc98:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	2201      	movs	r2, #1
 800bca6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d07d      	beq.n	800bdae <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcb6:	6878      	ldr	r0, [r7, #4]
 800bcb8:	4798      	blx	r3
        }
        return;
 800bcba:	e078      	b.n	800bdae <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d01c      	beq.n	800bd04 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d108      	bne.n	800bcea <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d030      	beq.n	800bd42 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	4798      	blx	r3
 800bce8:	e02b      	b.n	800bd42 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d027      	beq.n	800bd42 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	4798      	blx	r3
 800bcfa:	e022      	b.n	800bd42 <HAL_DMA_IRQHandler+0x29e>
 800bcfc:	20000828 	.word	0x20000828
 800bd00:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d10f      	bne.n	800bd32 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	681a      	ldr	r2, [r3, #0]
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	f022 0210 	bic.w	r2, r2, #16
 800bd20:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2200      	movs	r2, #0
 800bd26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2201      	movs	r2, #1
 800bd2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d003      	beq.n	800bd42 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd3e:	6878      	ldr	r0, [r7, #4]
 800bd40:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d032      	beq.n	800bdb0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd4e:	f003 0301 	and.w	r3, r3, #1
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d022      	beq.n	800bd9c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	2205      	movs	r2, #5
 800bd5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	681a      	ldr	r2, [r3, #0]
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	f022 0201 	bic.w	r2, r2, #1
 800bd6c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	3301      	adds	r3, #1
 800bd72:	60bb      	str	r3, [r7, #8]
 800bd74:	697a      	ldr	r2, [r7, #20]
 800bd76:	429a      	cmp	r2, r3
 800bd78:	d307      	bcc.n	800bd8a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	f003 0301 	and.w	r3, r3, #1
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d1f2      	bne.n	800bd6e <HAL_DMA_IRQHandler+0x2ca>
 800bd88:	e000      	b.n	800bd8c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800bd8a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2200      	movs	r2, #0
 800bd90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2201      	movs	r2, #1
 800bd98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d005      	beq.n	800bdb0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bda8:	6878      	ldr	r0, [r7, #4]
 800bdaa:	4798      	blx	r3
 800bdac:	e000      	b.n	800bdb0 <HAL_DMA_IRQHandler+0x30c>
        return;
 800bdae:	bf00      	nop
    }
  }
}
 800bdb0:	3718      	adds	r7, #24
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	bd80      	pop	{r7, pc}
 800bdb6:	bf00      	nop

0800bdb8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800bdb8:	b480      	push	{r7}
 800bdba:	b083      	sub	sp, #12
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bdc6:	b2db      	uxtb	r3, r3
}
 800bdc8:	4618      	mov	r0, r3
 800bdca:	370c      	adds	r7, #12
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd2:	4770      	bx	lr

0800bdd4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	b085      	sub	sp, #20
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	60f8      	str	r0, [r7, #12]
 800bddc:	60b9      	str	r1, [r7, #8]
 800bdde:	607a      	str	r2, [r7, #4]
 800bde0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	681a      	ldr	r2, [r3, #0]
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800bdf0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	683a      	ldr	r2, [r7, #0]
 800bdf8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	689b      	ldr	r3, [r3, #8]
 800bdfe:	2b40      	cmp	r3, #64	; 0x40
 800be00:	d108      	bne.n	800be14 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	687a      	ldr	r2, [r7, #4]
 800be08:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	68ba      	ldr	r2, [r7, #8]
 800be10:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800be12:	e007      	b.n	800be24 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	68ba      	ldr	r2, [r7, #8]
 800be1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	687a      	ldr	r2, [r7, #4]
 800be22:	60da      	str	r2, [r3, #12]
}
 800be24:	bf00      	nop
 800be26:	3714      	adds	r7, #20
 800be28:	46bd      	mov	sp, r7
 800be2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2e:	4770      	bx	lr

0800be30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800be30:	b480      	push	{r7}
 800be32:	b085      	sub	sp, #20
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	b2db      	uxtb	r3, r3
 800be3e:	3b10      	subs	r3, #16
 800be40:	4a14      	ldr	r2, [pc, #80]	; (800be94 <DMA_CalcBaseAndBitshift+0x64>)
 800be42:	fba2 2303 	umull	r2, r3, r2, r3
 800be46:	091b      	lsrs	r3, r3, #4
 800be48:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800be4a:	4a13      	ldr	r2, [pc, #76]	; (800be98 <DMA_CalcBaseAndBitshift+0x68>)
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	4413      	add	r3, r2
 800be50:	781b      	ldrb	r3, [r3, #0]
 800be52:	461a      	mov	r2, r3
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	2b03      	cmp	r3, #3
 800be5c:	d909      	bls.n	800be72 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800be66:	f023 0303 	bic.w	r3, r3, #3
 800be6a:	1d1a      	adds	r2, r3, #4
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	659a      	str	r2, [r3, #88]	; 0x58
 800be70:	e007      	b.n	800be82 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800be7a:	f023 0303 	bic.w	r3, r3, #3
 800be7e:	687a      	ldr	r2, [r7, #4]
 800be80:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800be86:	4618      	mov	r0, r3
 800be88:	3714      	adds	r7, #20
 800be8a:	46bd      	mov	sp, r7
 800be8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be90:	4770      	bx	lr
 800be92:	bf00      	nop
 800be94:	aaaaaaab 	.word	0xaaaaaaab
 800be98:	0801b5a0 	.word	0x0801b5a0

0800be9c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800be9c:	b480      	push	{r7}
 800be9e:	b085      	sub	sp, #20
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bea4:	2300      	movs	r3, #0
 800bea6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800beac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	699b      	ldr	r3, [r3, #24]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d11f      	bne.n	800bef6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	2b03      	cmp	r3, #3
 800beba:	d855      	bhi.n	800bf68 <DMA_CheckFifoParam+0xcc>
 800bebc:	a201      	add	r2, pc, #4	; (adr r2, 800bec4 <DMA_CheckFifoParam+0x28>)
 800bebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bec2:	bf00      	nop
 800bec4:	0800bed5 	.word	0x0800bed5
 800bec8:	0800bee7 	.word	0x0800bee7
 800becc:	0800bed5 	.word	0x0800bed5
 800bed0:	0800bf69 	.word	0x0800bf69
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bed8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d045      	beq.n	800bf6c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800bee0:	2301      	movs	r3, #1
 800bee2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bee4:	e042      	b.n	800bf6c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800beee:	d13f      	bne.n	800bf70 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800bef0:	2301      	movs	r3, #1
 800bef2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bef4:	e03c      	b.n	800bf70 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	699b      	ldr	r3, [r3, #24]
 800befa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800befe:	d121      	bne.n	800bf44 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	2b03      	cmp	r3, #3
 800bf04:	d836      	bhi.n	800bf74 <DMA_CheckFifoParam+0xd8>
 800bf06:	a201      	add	r2, pc, #4	; (adr r2, 800bf0c <DMA_CheckFifoParam+0x70>)
 800bf08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf0c:	0800bf1d 	.word	0x0800bf1d
 800bf10:	0800bf23 	.word	0x0800bf23
 800bf14:	0800bf1d 	.word	0x0800bf1d
 800bf18:	0800bf35 	.word	0x0800bf35
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	73fb      	strb	r3, [r7, #15]
      break;
 800bf20:	e02f      	b.n	800bf82 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d024      	beq.n	800bf78 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800bf2e:	2301      	movs	r3, #1
 800bf30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bf32:	e021      	b.n	800bf78 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf38:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800bf3c:	d11e      	bne.n	800bf7c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800bf3e:	2301      	movs	r3, #1
 800bf40:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800bf42:	e01b      	b.n	800bf7c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800bf44:	68bb      	ldr	r3, [r7, #8]
 800bf46:	2b02      	cmp	r3, #2
 800bf48:	d902      	bls.n	800bf50 <DMA_CheckFifoParam+0xb4>
 800bf4a:	2b03      	cmp	r3, #3
 800bf4c:	d003      	beq.n	800bf56 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800bf4e:	e018      	b.n	800bf82 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800bf50:	2301      	movs	r3, #1
 800bf52:	73fb      	strb	r3, [r7, #15]
      break;
 800bf54:	e015      	b.n	800bf82 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d00e      	beq.n	800bf80 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800bf62:	2301      	movs	r3, #1
 800bf64:	73fb      	strb	r3, [r7, #15]
      break;
 800bf66:	e00b      	b.n	800bf80 <DMA_CheckFifoParam+0xe4>
      break;
 800bf68:	bf00      	nop
 800bf6a:	e00a      	b.n	800bf82 <DMA_CheckFifoParam+0xe6>
      break;
 800bf6c:	bf00      	nop
 800bf6e:	e008      	b.n	800bf82 <DMA_CheckFifoParam+0xe6>
      break;
 800bf70:	bf00      	nop
 800bf72:	e006      	b.n	800bf82 <DMA_CheckFifoParam+0xe6>
      break;
 800bf74:	bf00      	nop
 800bf76:	e004      	b.n	800bf82 <DMA_CheckFifoParam+0xe6>
      break;
 800bf78:	bf00      	nop
 800bf7a:	e002      	b.n	800bf82 <DMA_CheckFifoParam+0xe6>
      break;   
 800bf7c:	bf00      	nop
 800bf7e:	e000      	b.n	800bf82 <DMA_CheckFifoParam+0xe6>
      break;
 800bf80:	bf00      	nop
    }
  } 
  
  return status; 
 800bf82:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf84:	4618      	mov	r0, r3
 800bf86:	3714      	adds	r7, #20
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8e:	4770      	bx	lr

0800bf90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bf90:	b480      	push	{r7}
 800bf92:	b089      	sub	sp, #36	; 0x24
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
 800bf98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	61fb      	str	r3, [r7, #28]
 800bfaa:	e16b      	b.n	800c284 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800bfac:	2201      	movs	r2, #1
 800bfae:	69fb      	ldr	r3, [r7, #28]
 800bfb0:	fa02 f303 	lsl.w	r3, r2, r3
 800bfb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	697a      	ldr	r2, [r7, #20]
 800bfbc:	4013      	ands	r3, r2
 800bfbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800bfc0:	693a      	ldr	r2, [r7, #16]
 800bfc2:	697b      	ldr	r3, [r7, #20]
 800bfc4:	429a      	cmp	r2, r3
 800bfc6:	f040 815a 	bne.w	800c27e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	685b      	ldr	r3, [r3, #4]
 800bfce:	2b01      	cmp	r3, #1
 800bfd0:	d00b      	beq.n	800bfea <HAL_GPIO_Init+0x5a>
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	685b      	ldr	r3, [r3, #4]
 800bfd6:	2b02      	cmp	r3, #2
 800bfd8:	d007      	beq.n	800bfea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800bfde:	2b11      	cmp	r3, #17
 800bfe0:	d003      	beq.n	800bfea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	685b      	ldr	r3, [r3, #4]
 800bfe6:	2b12      	cmp	r3, #18
 800bfe8:	d130      	bne.n	800c04c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	689b      	ldr	r3, [r3, #8]
 800bfee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800bff0:	69fb      	ldr	r3, [r7, #28]
 800bff2:	005b      	lsls	r3, r3, #1
 800bff4:	2203      	movs	r2, #3
 800bff6:	fa02 f303 	lsl.w	r3, r2, r3
 800bffa:	43db      	mvns	r3, r3
 800bffc:	69ba      	ldr	r2, [r7, #24]
 800bffe:	4013      	ands	r3, r2
 800c000:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	68da      	ldr	r2, [r3, #12]
 800c006:	69fb      	ldr	r3, [r7, #28]
 800c008:	005b      	lsls	r3, r3, #1
 800c00a:	fa02 f303 	lsl.w	r3, r2, r3
 800c00e:	69ba      	ldr	r2, [r7, #24]
 800c010:	4313      	orrs	r3, r2
 800c012:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	69ba      	ldr	r2, [r7, #24]
 800c018:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	685b      	ldr	r3, [r3, #4]
 800c01e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c020:	2201      	movs	r2, #1
 800c022:	69fb      	ldr	r3, [r7, #28]
 800c024:	fa02 f303 	lsl.w	r3, r2, r3
 800c028:	43db      	mvns	r3, r3
 800c02a:	69ba      	ldr	r2, [r7, #24]
 800c02c:	4013      	ands	r3, r2
 800c02e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	685b      	ldr	r3, [r3, #4]
 800c034:	091b      	lsrs	r3, r3, #4
 800c036:	f003 0201 	and.w	r2, r3, #1
 800c03a:	69fb      	ldr	r3, [r7, #28]
 800c03c:	fa02 f303 	lsl.w	r3, r2, r3
 800c040:	69ba      	ldr	r2, [r7, #24]
 800c042:	4313      	orrs	r3, r2
 800c044:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	69ba      	ldr	r2, [r7, #24]
 800c04a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	68db      	ldr	r3, [r3, #12]
 800c050:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800c052:	69fb      	ldr	r3, [r7, #28]
 800c054:	005b      	lsls	r3, r3, #1
 800c056:	2203      	movs	r2, #3
 800c058:	fa02 f303 	lsl.w	r3, r2, r3
 800c05c:	43db      	mvns	r3, r3
 800c05e:	69ba      	ldr	r2, [r7, #24]
 800c060:	4013      	ands	r3, r2
 800c062:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	689a      	ldr	r2, [r3, #8]
 800c068:	69fb      	ldr	r3, [r7, #28]
 800c06a:	005b      	lsls	r3, r3, #1
 800c06c:	fa02 f303 	lsl.w	r3, r2, r3
 800c070:	69ba      	ldr	r2, [r7, #24]
 800c072:	4313      	orrs	r3, r2
 800c074:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	69ba      	ldr	r2, [r7, #24]
 800c07a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	685b      	ldr	r3, [r3, #4]
 800c080:	2b02      	cmp	r3, #2
 800c082:	d003      	beq.n	800c08c <HAL_GPIO_Init+0xfc>
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	685b      	ldr	r3, [r3, #4]
 800c088:	2b12      	cmp	r3, #18
 800c08a:	d123      	bne.n	800c0d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c08c:	69fb      	ldr	r3, [r7, #28]
 800c08e:	08da      	lsrs	r2, r3, #3
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	3208      	adds	r2, #8
 800c094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c098:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800c09a:	69fb      	ldr	r3, [r7, #28]
 800c09c:	f003 0307 	and.w	r3, r3, #7
 800c0a0:	009b      	lsls	r3, r3, #2
 800c0a2:	220f      	movs	r2, #15
 800c0a4:	fa02 f303 	lsl.w	r3, r2, r3
 800c0a8:	43db      	mvns	r3, r3
 800c0aa:	69ba      	ldr	r2, [r7, #24]
 800c0ac:	4013      	ands	r3, r2
 800c0ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800c0b0:	683b      	ldr	r3, [r7, #0]
 800c0b2:	691a      	ldr	r2, [r3, #16]
 800c0b4:	69fb      	ldr	r3, [r7, #28]
 800c0b6:	f003 0307 	and.w	r3, r3, #7
 800c0ba:	009b      	lsls	r3, r3, #2
 800c0bc:	fa02 f303 	lsl.w	r3, r2, r3
 800c0c0:	69ba      	ldr	r2, [r7, #24]
 800c0c2:	4313      	orrs	r3, r2
 800c0c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800c0c6:	69fb      	ldr	r3, [r7, #28]
 800c0c8:	08da      	lsrs	r2, r3, #3
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	3208      	adds	r2, #8
 800c0ce:	69b9      	ldr	r1, [r7, #24]
 800c0d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800c0da:	69fb      	ldr	r3, [r7, #28]
 800c0dc:	005b      	lsls	r3, r3, #1
 800c0de:	2203      	movs	r2, #3
 800c0e0:	fa02 f303 	lsl.w	r3, r2, r3
 800c0e4:	43db      	mvns	r3, r3
 800c0e6:	69ba      	ldr	r2, [r7, #24]
 800c0e8:	4013      	ands	r3, r2
 800c0ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	685b      	ldr	r3, [r3, #4]
 800c0f0:	f003 0203 	and.w	r2, r3, #3
 800c0f4:	69fb      	ldr	r3, [r7, #28]
 800c0f6:	005b      	lsls	r3, r3, #1
 800c0f8:	fa02 f303 	lsl.w	r3, r2, r3
 800c0fc:	69ba      	ldr	r2, [r7, #24]
 800c0fe:	4313      	orrs	r3, r2
 800c100:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	69ba      	ldr	r2, [r7, #24]
 800c106:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	685b      	ldr	r3, [r3, #4]
 800c10c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c110:	2b00      	cmp	r3, #0
 800c112:	f000 80b4 	beq.w	800c27e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c116:	2300      	movs	r3, #0
 800c118:	60fb      	str	r3, [r7, #12]
 800c11a:	4b5f      	ldr	r3, [pc, #380]	; (800c298 <HAL_GPIO_Init+0x308>)
 800c11c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c11e:	4a5e      	ldr	r2, [pc, #376]	; (800c298 <HAL_GPIO_Init+0x308>)
 800c120:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c124:	6453      	str	r3, [r2, #68]	; 0x44
 800c126:	4b5c      	ldr	r3, [pc, #368]	; (800c298 <HAL_GPIO_Init+0x308>)
 800c128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c12a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c12e:	60fb      	str	r3, [r7, #12]
 800c130:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c132:	4a5a      	ldr	r2, [pc, #360]	; (800c29c <HAL_GPIO_Init+0x30c>)
 800c134:	69fb      	ldr	r3, [r7, #28]
 800c136:	089b      	lsrs	r3, r3, #2
 800c138:	3302      	adds	r3, #2
 800c13a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c13e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800c140:	69fb      	ldr	r3, [r7, #28]
 800c142:	f003 0303 	and.w	r3, r3, #3
 800c146:	009b      	lsls	r3, r3, #2
 800c148:	220f      	movs	r2, #15
 800c14a:	fa02 f303 	lsl.w	r3, r2, r3
 800c14e:	43db      	mvns	r3, r3
 800c150:	69ba      	ldr	r2, [r7, #24]
 800c152:	4013      	ands	r3, r2
 800c154:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	4a51      	ldr	r2, [pc, #324]	; (800c2a0 <HAL_GPIO_Init+0x310>)
 800c15a:	4293      	cmp	r3, r2
 800c15c:	d02b      	beq.n	800c1b6 <HAL_GPIO_Init+0x226>
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	4a50      	ldr	r2, [pc, #320]	; (800c2a4 <HAL_GPIO_Init+0x314>)
 800c162:	4293      	cmp	r3, r2
 800c164:	d025      	beq.n	800c1b2 <HAL_GPIO_Init+0x222>
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	4a4f      	ldr	r2, [pc, #316]	; (800c2a8 <HAL_GPIO_Init+0x318>)
 800c16a:	4293      	cmp	r3, r2
 800c16c:	d01f      	beq.n	800c1ae <HAL_GPIO_Init+0x21e>
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	4a4e      	ldr	r2, [pc, #312]	; (800c2ac <HAL_GPIO_Init+0x31c>)
 800c172:	4293      	cmp	r3, r2
 800c174:	d019      	beq.n	800c1aa <HAL_GPIO_Init+0x21a>
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	4a4d      	ldr	r2, [pc, #308]	; (800c2b0 <HAL_GPIO_Init+0x320>)
 800c17a:	4293      	cmp	r3, r2
 800c17c:	d013      	beq.n	800c1a6 <HAL_GPIO_Init+0x216>
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	4a4c      	ldr	r2, [pc, #304]	; (800c2b4 <HAL_GPIO_Init+0x324>)
 800c182:	4293      	cmp	r3, r2
 800c184:	d00d      	beq.n	800c1a2 <HAL_GPIO_Init+0x212>
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	4a4b      	ldr	r2, [pc, #300]	; (800c2b8 <HAL_GPIO_Init+0x328>)
 800c18a:	4293      	cmp	r3, r2
 800c18c:	d007      	beq.n	800c19e <HAL_GPIO_Init+0x20e>
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	4a4a      	ldr	r2, [pc, #296]	; (800c2bc <HAL_GPIO_Init+0x32c>)
 800c192:	4293      	cmp	r3, r2
 800c194:	d101      	bne.n	800c19a <HAL_GPIO_Init+0x20a>
 800c196:	2307      	movs	r3, #7
 800c198:	e00e      	b.n	800c1b8 <HAL_GPIO_Init+0x228>
 800c19a:	2308      	movs	r3, #8
 800c19c:	e00c      	b.n	800c1b8 <HAL_GPIO_Init+0x228>
 800c19e:	2306      	movs	r3, #6
 800c1a0:	e00a      	b.n	800c1b8 <HAL_GPIO_Init+0x228>
 800c1a2:	2305      	movs	r3, #5
 800c1a4:	e008      	b.n	800c1b8 <HAL_GPIO_Init+0x228>
 800c1a6:	2304      	movs	r3, #4
 800c1a8:	e006      	b.n	800c1b8 <HAL_GPIO_Init+0x228>
 800c1aa:	2303      	movs	r3, #3
 800c1ac:	e004      	b.n	800c1b8 <HAL_GPIO_Init+0x228>
 800c1ae:	2302      	movs	r3, #2
 800c1b0:	e002      	b.n	800c1b8 <HAL_GPIO_Init+0x228>
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	e000      	b.n	800c1b8 <HAL_GPIO_Init+0x228>
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	69fa      	ldr	r2, [r7, #28]
 800c1ba:	f002 0203 	and.w	r2, r2, #3
 800c1be:	0092      	lsls	r2, r2, #2
 800c1c0:	4093      	lsls	r3, r2
 800c1c2:	69ba      	ldr	r2, [r7, #24]
 800c1c4:	4313      	orrs	r3, r2
 800c1c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c1c8:	4934      	ldr	r1, [pc, #208]	; (800c29c <HAL_GPIO_Init+0x30c>)
 800c1ca:	69fb      	ldr	r3, [r7, #28]
 800c1cc:	089b      	lsrs	r3, r3, #2
 800c1ce:	3302      	adds	r3, #2
 800c1d0:	69ba      	ldr	r2, [r7, #24]
 800c1d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c1d6:	4b3a      	ldr	r3, [pc, #232]	; (800c2c0 <HAL_GPIO_Init+0x330>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c1dc:	693b      	ldr	r3, [r7, #16]
 800c1de:	43db      	mvns	r3, r3
 800c1e0:	69ba      	ldr	r2, [r7, #24]
 800c1e2:	4013      	ands	r3, r2
 800c1e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	685b      	ldr	r3, [r3, #4]
 800c1ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d003      	beq.n	800c1fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800c1f2:	69ba      	ldr	r2, [r7, #24]
 800c1f4:	693b      	ldr	r3, [r7, #16]
 800c1f6:	4313      	orrs	r3, r2
 800c1f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800c1fa:	4a31      	ldr	r2, [pc, #196]	; (800c2c0 <HAL_GPIO_Init+0x330>)
 800c1fc:	69bb      	ldr	r3, [r7, #24]
 800c1fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800c200:	4b2f      	ldr	r3, [pc, #188]	; (800c2c0 <HAL_GPIO_Init+0x330>)
 800c202:	685b      	ldr	r3, [r3, #4]
 800c204:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c206:	693b      	ldr	r3, [r7, #16]
 800c208:	43db      	mvns	r3, r3
 800c20a:	69ba      	ldr	r2, [r7, #24]
 800c20c:	4013      	ands	r3, r2
 800c20e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800c210:	683b      	ldr	r3, [r7, #0]
 800c212:	685b      	ldr	r3, [r3, #4]
 800c214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d003      	beq.n	800c224 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800c21c:	69ba      	ldr	r2, [r7, #24]
 800c21e:	693b      	ldr	r3, [r7, #16]
 800c220:	4313      	orrs	r3, r2
 800c222:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800c224:	4a26      	ldr	r2, [pc, #152]	; (800c2c0 <HAL_GPIO_Init+0x330>)
 800c226:	69bb      	ldr	r3, [r7, #24]
 800c228:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c22a:	4b25      	ldr	r3, [pc, #148]	; (800c2c0 <HAL_GPIO_Init+0x330>)
 800c22c:	689b      	ldr	r3, [r3, #8]
 800c22e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c230:	693b      	ldr	r3, [r7, #16]
 800c232:	43db      	mvns	r3, r3
 800c234:	69ba      	ldr	r2, [r7, #24]
 800c236:	4013      	ands	r3, r2
 800c238:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	685b      	ldr	r3, [r3, #4]
 800c23e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c242:	2b00      	cmp	r3, #0
 800c244:	d003      	beq.n	800c24e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800c246:	69ba      	ldr	r2, [r7, #24]
 800c248:	693b      	ldr	r3, [r7, #16]
 800c24a:	4313      	orrs	r3, r2
 800c24c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800c24e:	4a1c      	ldr	r2, [pc, #112]	; (800c2c0 <HAL_GPIO_Init+0x330>)
 800c250:	69bb      	ldr	r3, [r7, #24]
 800c252:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800c254:	4b1a      	ldr	r3, [pc, #104]	; (800c2c0 <HAL_GPIO_Init+0x330>)
 800c256:	68db      	ldr	r3, [r3, #12]
 800c258:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c25a:	693b      	ldr	r3, [r7, #16]
 800c25c:	43db      	mvns	r3, r3
 800c25e:	69ba      	ldr	r2, [r7, #24]
 800c260:	4013      	ands	r3, r2
 800c262:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	685b      	ldr	r3, [r3, #4]
 800c268:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d003      	beq.n	800c278 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800c270:	69ba      	ldr	r2, [r7, #24]
 800c272:	693b      	ldr	r3, [r7, #16]
 800c274:	4313      	orrs	r3, r2
 800c276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800c278:	4a11      	ldr	r2, [pc, #68]	; (800c2c0 <HAL_GPIO_Init+0x330>)
 800c27a:	69bb      	ldr	r3, [r7, #24]
 800c27c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c27e:	69fb      	ldr	r3, [r7, #28]
 800c280:	3301      	adds	r3, #1
 800c282:	61fb      	str	r3, [r7, #28]
 800c284:	69fb      	ldr	r3, [r7, #28]
 800c286:	2b0f      	cmp	r3, #15
 800c288:	f67f ae90 	bls.w	800bfac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800c28c:	bf00      	nop
 800c28e:	3724      	adds	r7, #36	; 0x24
 800c290:	46bd      	mov	sp, r7
 800c292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c296:	4770      	bx	lr
 800c298:	40023800 	.word	0x40023800
 800c29c:	40013800 	.word	0x40013800
 800c2a0:	40020000 	.word	0x40020000
 800c2a4:	40020400 	.word	0x40020400
 800c2a8:	40020800 	.word	0x40020800
 800c2ac:	40020c00 	.word	0x40020c00
 800c2b0:	40021000 	.word	0x40021000
 800c2b4:	40021400 	.word	0x40021400
 800c2b8:	40021800 	.word	0x40021800
 800c2bc:	40021c00 	.word	0x40021c00
 800c2c0:	40013c00 	.word	0x40013c00

0800c2c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c2c4:	b480      	push	{r7}
 800c2c6:	b083      	sub	sp, #12
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
 800c2cc:	460b      	mov	r3, r1
 800c2ce:	807b      	strh	r3, [r7, #2]
 800c2d0:	4613      	mov	r3, r2
 800c2d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c2d4:	787b      	ldrb	r3, [r7, #1]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d003      	beq.n	800c2e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c2da:	887a      	ldrh	r2, [r7, #2]
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800c2e0:	e003      	b.n	800c2ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800c2e2:	887b      	ldrh	r3, [r7, #2]
 800c2e4:	041a      	lsls	r2, r3, #16
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	619a      	str	r2, [r3, #24]
}
 800c2ea:	bf00      	nop
 800c2ec:	370c      	adds	r7, #12
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f4:	4770      	bx	lr
	...

0800c2f8 <HAL_NOR_Init>:
  * @param  Timing pointer to NOR control timing structure 
  * @param  ExtTiming pointer to NOR extended mode timing structure    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_Init(NOR_HandleTypeDef *hnor, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b084      	sub	sp, #16
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	60f8      	str	r0, [r7, #12]
 800c300:	60b9      	str	r1, [r7, #8]
 800c302:	607a      	str	r2, [r7, #4]
  /* Check the NOR handle parameter */
  if(hnor == NULL)
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d101      	bne.n	800c30e <HAL_NOR_Init+0x16>
  {
     return HAL_ERROR;
 800c30a:	2301      	movs	r3, #1
 800c30c:	e043      	b.n	800c396 <HAL_NOR_Init+0x9e>
  }
  
  if(hnor->State == HAL_NOR_STATE_RESET)
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800c314:	b2db      	uxtb	r3, r3
 800c316:	2b00      	cmp	r3, #0
 800c318:	d106      	bne.n	800c328 <HAL_NOR_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnor->Lock = HAL_UNLOCKED;
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	2200      	movs	r2, #0
 800c31e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hnor->MspInitCallback(hnor);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NOR_MspInit(hnor);
 800c322:	68f8      	ldr	r0, [r7, #12]
 800c324:	f7f7 fb9c 	bl	8003a60 <HAL_NOR_MspInit>
#endif /* (USE_HAL_NOR_REGISTER_CALLBACKS) */
  }
  
  /* Initialize NOR control Interface */
  FMC_NORSRAM_Init(hnor->Instance, &(hnor->Init));
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	681a      	ldr	r2, [r3, #0]
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	3308      	adds	r3, #8
 800c330:	4619      	mov	r1, r3
 800c332:	4610      	mov	r0, r2
 800c334:	f003 f97e 	bl	800f634 <FSMC_NORSRAM_Init>

  /* Initialize NOR timing Interface */
  FMC_NORSRAM_Timing_Init(hnor->Instance, Timing, hnor->Init.NSBank); 
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	6818      	ldr	r0, [r3, #0]
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	689b      	ldr	r3, [r3, #8]
 800c340:	461a      	mov	r2, r3
 800c342:	68b9      	ldr	r1, [r7, #8]
 800c344:	f003 f9c8 	bl	800f6d8 <FSMC_NORSRAM_Timing_Init>

  /* Initialize NOR extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hnor->Extended, ExtTiming, hnor->Init.NSBank, hnor->Init.ExtendedMode);
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	6858      	ldr	r0, [r3, #4]
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	689a      	ldr	r2, [r3, #8]
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c354:	6879      	ldr	r1, [r7, #4]
 800c356:	f003 f9fd 	bl	800f754 <FSMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	68fa      	ldr	r2, [r7, #12]
 800c360:	6892      	ldr	r2, [r2, #8]
 800c362:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	68fa      	ldr	r2, [r7, #12]
 800c36c:	6892      	ldr	r2, [r2, #8]
 800c36e:	f041 0101 	orr.w	r1, r1, #1
 800c372:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize NOR Memory Data Width*/
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	695b      	ldr	r3, [r3, #20]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d103      	bne.n	800c386 <HAL_NOR_Init+0x8e>
  {
    uwNORMemoryDataWidth = NOR_MEMORY_8B;
 800c37e:	4b08      	ldr	r3, [pc, #32]	; (800c3a0 <HAL_NOR_Init+0xa8>)
 800c380:	2200      	movs	r2, #0
 800c382:	601a      	str	r2, [r3, #0]
 800c384:	e002      	b.n	800c38c <HAL_NOR_Init+0x94>
  }
  else
  {
    uwNORMemoryDataWidth = NOR_MEMORY_16B;
 800c386:	4b06      	ldr	r3, [pc, #24]	; (800c3a0 <HAL_NOR_Init+0xa8>)
 800c388:	2201      	movs	r2, #1
 800c38a:	601a      	str	r2, [r3, #0]
  }

  /* Check the NOR controller state */
  hnor->State = HAL_NOR_STATE_READY; 
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	2201      	movs	r2, #1
 800c390:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  return HAL_OK;
 800c394:	2300      	movs	r3, #0
}
 800c396:	4618      	mov	r0, r3
 800c398:	3710      	adds	r7, #16
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bd80      	pop	{r7, pc}
 800c39e:	bf00      	nop
 800c3a0:	20001004 	.word	0x20001004

0800c3a4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800c3a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3a6:	b08f      	sub	sp, #60	; 0x3c
 800c3a8:	af0a      	add	r7, sp, #40	; 0x28
 800c3aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d101      	bne.n	800c3b6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800c3b2:	2301      	movs	r3, #1
 800c3b4:	e10f      	b.n	800c5d6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800c3c2:	b2db      	uxtb	r3, r3
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d106      	bne.n	800c3d6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800c3d0:	6878      	ldr	r0, [r7, #4]
 800c3d2:	f009 f9d5 	bl	8015780 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	2203      	movs	r2, #3
 800c3da:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800c3de:	68bb      	ldr	r3, [r7, #8]
 800c3e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d102      	bne.n	800c3f0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	f003 fb02 	bl	800f9fe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	603b      	str	r3, [r7, #0]
 800c400:	687e      	ldr	r6, [r7, #4]
 800c402:	466d      	mov	r5, sp
 800c404:	f106 0410 	add.w	r4, r6, #16
 800c408:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c40a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c40c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c40e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c410:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c414:	e885 0003 	stmia.w	r5, {r0, r1}
 800c418:	1d33      	adds	r3, r6, #4
 800c41a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c41c:	6838      	ldr	r0, [r7, #0]
 800c41e:	f003 f9d9 	bl	800f7d4 <USB_CoreInit>
 800c422:	4603      	mov	r3, r0
 800c424:	2b00      	cmp	r3, #0
 800c426:	d005      	beq.n	800c434 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2202      	movs	r2, #2
 800c42c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800c430:	2301      	movs	r3, #1
 800c432:	e0d0      	b.n	800c5d6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	2100      	movs	r1, #0
 800c43a:	4618      	mov	r0, r3
 800c43c:	f003 faf0 	bl	800fa20 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c440:	2300      	movs	r3, #0
 800c442:	73fb      	strb	r3, [r7, #15]
 800c444:	e04a      	b.n	800c4dc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800c446:	7bfa      	ldrb	r2, [r7, #15]
 800c448:	6879      	ldr	r1, [r7, #4]
 800c44a:	4613      	mov	r3, r2
 800c44c:	00db      	lsls	r3, r3, #3
 800c44e:	1a9b      	subs	r3, r3, r2
 800c450:	009b      	lsls	r3, r3, #2
 800c452:	440b      	add	r3, r1
 800c454:	333d      	adds	r3, #61	; 0x3d
 800c456:	2201      	movs	r2, #1
 800c458:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800c45a:	7bfa      	ldrb	r2, [r7, #15]
 800c45c:	6879      	ldr	r1, [r7, #4]
 800c45e:	4613      	mov	r3, r2
 800c460:	00db      	lsls	r3, r3, #3
 800c462:	1a9b      	subs	r3, r3, r2
 800c464:	009b      	lsls	r3, r3, #2
 800c466:	440b      	add	r3, r1
 800c468:	333c      	adds	r3, #60	; 0x3c
 800c46a:	7bfa      	ldrb	r2, [r7, #15]
 800c46c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800c46e:	7bfa      	ldrb	r2, [r7, #15]
 800c470:	7bfb      	ldrb	r3, [r7, #15]
 800c472:	b298      	uxth	r0, r3
 800c474:	6879      	ldr	r1, [r7, #4]
 800c476:	4613      	mov	r3, r2
 800c478:	00db      	lsls	r3, r3, #3
 800c47a:	1a9b      	subs	r3, r3, r2
 800c47c:	009b      	lsls	r3, r3, #2
 800c47e:	440b      	add	r3, r1
 800c480:	3342      	adds	r3, #66	; 0x42
 800c482:	4602      	mov	r2, r0
 800c484:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800c486:	7bfa      	ldrb	r2, [r7, #15]
 800c488:	6879      	ldr	r1, [r7, #4]
 800c48a:	4613      	mov	r3, r2
 800c48c:	00db      	lsls	r3, r3, #3
 800c48e:	1a9b      	subs	r3, r3, r2
 800c490:	009b      	lsls	r3, r3, #2
 800c492:	440b      	add	r3, r1
 800c494:	333f      	adds	r3, #63	; 0x3f
 800c496:	2200      	movs	r2, #0
 800c498:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800c49a:	7bfa      	ldrb	r2, [r7, #15]
 800c49c:	6879      	ldr	r1, [r7, #4]
 800c49e:	4613      	mov	r3, r2
 800c4a0:	00db      	lsls	r3, r3, #3
 800c4a2:	1a9b      	subs	r3, r3, r2
 800c4a4:	009b      	lsls	r3, r3, #2
 800c4a6:	440b      	add	r3, r1
 800c4a8:	3344      	adds	r3, #68	; 0x44
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800c4ae:	7bfa      	ldrb	r2, [r7, #15]
 800c4b0:	6879      	ldr	r1, [r7, #4]
 800c4b2:	4613      	mov	r3, r2
 800c4b4:	00db      	lsls	r3, r3, #3
 800c4b6:	1a9b      	subs	r3, r3, r2
 800c4b8:	009b      	lsls	r3, r3, #2
 800c4ba:	440b      	add	r3, r1
 800c4bc:	3348      	adds	r3, #72	; 0x48
 800c4be:	2200      	movs	r2, #0
 800c4c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800c4c2:	7bfa      	ldrb	r2, [r7, #15]
 800c4c4:	6879      	ldr	r1, [r7, #4]
 800c4c6:	4613      	mov	r3, r2
 800c4c8:	00db      	lsls	r3, r3, #3
 800c4ca:	1a9b      	subs	r3, r3, r2
 800c4cc:	009b      	lsls	r3, r3, #2
 800c4ce:	440b      	add	r3, r1
 800c4d0:	3350      	adds	r3, #80	; 0x50
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c4d6:	7bfb      	ldrb	r3, [r7, #15]
 800c4d8:	3301      	adds	r3, #1
 800c4da:	73fb      	strb	r3, [r7, #15]
 800c4dc:	7bfa      	ldrb	r2, [r7, #15]
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	685b      	ldr	r3, [r3, #4]
 800c4e2:	429a      	cmp	r2, r3
 800c4e4:	d3af      	bcc.n	800c446 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	73fb      	strb	r3, [r7, #15]
 800c4ea:	e044      	b.n	800c576 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800c4ec:	7bfa      	ldrb	r2, [r7, #15]
 800c4ee:	6879      	ldr	r1, [r7, #4]
 800c4f0:	4613      	mov	r3, r2
 800c4f2:	00db      	lsls	r3, r3, #3
 800c4f4:	1a9b      	subs	r3, r3, r2
 800c4f6:	009b      	lsls	r3, r3, #2
 800c4f8:	440b      	add	r3, r1
 800c4fa:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800c4fe:	2200      	movs	r2, #0
 800c500:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800c502:	7bfa      	ldrb	r2, [r7, #15]
 800c504:	6879      	ldr	r1, [r7, #4]
 800c506:	4613      	mov	r3, r2
 800c508:	00db      	lsls	r3, r3, #3
 800c50a:	1a9b      	subs	r3, r3, r2
 800c50c:	009b      	lsls	r3, r3, #2
 800c50e:	440b      	add	r3, r1
 800c510:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800c514:	7bfa      	ldrb	r2, [r7, #15]
 800c516:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800c518:	7bfa      	ldrb	r2, [r7, #15]
 800c51a:	6879      	ldr	r1, [r7, #4]
 800c51c:	4613      	mov	r3, r2
 800c51e:	00db      	lsls	r3, r3, #3
 800c520:	1a9b      	subs	r3, r3, r2
 800c522:	009b      	lsls	r3, r3, #2
 800c524:	440b      	add	r3, r1
 800c526:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800c52a:	2200      	movs	r2, #0
 800c52c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800c52e:	7bfa      	ldrb	r2, [r7, #15]
 800c530:	6879      	ldr	r1, [r7, #4]
 800c532:	4613      	mov	r3, r2
 800c534:	00db      	lsls	r3, r3, #3
 800c536:	1a9b      	subs	r3, r3, r2
 800c538:	009b      	lsls	r3, r3, #2
 800c53a:	440b      	add	r3, r1
 800c53c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800c540:	2200      	movs	r2, #0
 800c542:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800c544:	7bfa      	ldrb	r2, [r7, #15]
 800c546:	6879      	ldr	r1, [r7, #4]
 800c548:	4613      	mov	r3, r2
 800c54a:	00db      	lsls	r3, r3, #3
 800c54c:	1a9b      	subs	r3, r3, r2
 800c54e:	009b      	lsls	r3, r3, #2
 800c550:	440b      	add	r3, r1
 800c552:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c556:	2200      	movs	r2, #0
 800c558:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800c55a:	7bfa      	ldrb	r2, [r7, #15]
 800c55c:	6879      	ldr	r1, [r7, #4]
 800c55e:	4613      	mov	r3, r2
 800c560:	00db      	lsls	r3, r3, #3
 800c562:	1a9b      	subs	r3, r3, r2
 800c564:	009b      	lsls	r3, r3, #2
 800c566:	440b      	add	r3, r1
 800c568:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800c56c:	2200      	movs	r2, #0
 800c56e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c570:	7bfb      	ldrb	r3, [r7, #15]
 800c572:	3301      	adds	r3, #1
 800c574:	73fb      	strb	r3, [r7, #15]
 800c576:	7bfa      	ldrb	r2, [r7, #15]
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	685b      	ldr	r3, [r3, #4]
 800c57c:	429a      	cmp	r2, r3
 800c57e:	d3b5      	bcc.n	800c4ec <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	603b      	str	r3, [r7, #0]
 800c586:	687e      	ldr	r6, [r7, #4]
 800c588:	466d      	mov	r5, sp
 800c58a:	f106 0410 	add.w	r4, r6, #16
 800c58e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c590:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c592:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c594:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c596:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c59a:	e885 0003 	stmia.w	r5, {r0, r1}
 800c59e:	1d33      	adds	r3, r6, #4
 800c5a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c5a2:	6838      	ldr	r0, [r7, #0]
 800c5a4:	f003 fa66 	bl	800fa74 <USB_DevInit>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d005      	beq.n	800c5ba <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	2202      	movs	r2, #2
 800c5b2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800c5b6:	2301      	movs	r3, #1
 800c5b8:	e00d      	b.n	800c5d6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	2200      	movs	r2, #0
 800c5be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	2201      	movs	r2, #1
 800c5c6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	f004 faae 	bl	8010b30 <USB_DevDisconnect>

  return HAL_OK;
 800c5d4:	2300      	movs	r3, #0
}
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	3714      	adds	r7, #20
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c5de <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800c5de:	b580      	push	{r7, lr}
 800c5e0:	b084      	sub	sp, #16
 800c5e2:	af00      	add	r7, sp, #0
 800c5e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800c5f2:	2b01      	cmp	r3, #1
 800c5f4:	d101      	bne.n	800c5fa <HAL_PCD_Start+0x1c>
 800c5f6:	2302      	movs	r3, #2
 800c5f8:	e020      	b.n	800c63c <HAL_PCD_Start+0x5e>
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	2201      	movs	r2, #1
 800c5fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c606:	2b01      	cmp	r3, #1
 800c608:	d109      	bne.n	800c61e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800c60e:	2b01      	cmp	r3, #1
 800c610:	d005      	beq.n	800c61e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c616:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	4618      	mov	r0, r3
 800c624:	f003 f9da 	bl	800f9dc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	4618      	mov	r0, r3
 800c62e:	f004 fa5e 	bl	8010aee <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	2200      	movs	r2, #0
 800c636:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800c63a:	2300      	movs	r3, #0
}
 800c63c:	4618      	mov	r0, r3
 800c63e:	3710      	adds	r7, #16
 800c640:	46bd      	mov	sp, r7
 800c642:	bd80      	pop	{r7, pc}

0800c644 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800c644:	b590      	push	{r4, r7, lr}
 800c646:	b08d      	sub	sp, #52	; 0x34
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c652:	6a3b      	ldr	r3, [r7, #32]
 800c654:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	4618      	mov	r0, r3
 800c65c:	f004 fb1c 	bl	8010c98 <USB_GetMode>
 800c660:	4603      	mov	r3, r0
 800c662:	2b00      	cmp	r3, #0
 800c664:	f040 839d 	bne.w	800cda2 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	4618      	mov	r0, r3
 800c66e:	f004 fa80 	bl	8010b72 <USB_ReadInterrupts>
 800c672:	4603      	mov	r3, r0
 800c674:	2b00      	cmp	r3, #0
 800c676:	f000 8393 	beq.w	800cda0 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	4618      	mov	r0, r3
 800c680:	f004 fa77 	bl	8010b72 <USB_ReadInterrupts>
 800c684:	4603      	mov	r3, r0
 800c686:	f003 0302 	and.w	r3, r3, #2
 800c68a:	2b02      	cmp	r3, #2
 800c68c:	d107      	bne.n	800c69e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	695a      	ldr	r2, [r3, #20]
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	f002 0202 	and.w	r2, r2, #2
 800c69c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	f004 fa65 	bl	8010b72 <USB_ReadInterrupts>
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	f003 0310 	and.w	r3, r3, #16
 800c6ae:	2b10      	cmp	r3, #16
 800c6b0:	d161      	bne.n	800c776 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	699a      	ldr	r2, [r3, #24]
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	f022 0210 	bic.w	r2, r2, #16
 800c6c0:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800c6c2:	6a3b      	ldr	r3, [r7, #32]
 800c6c4:	6a1b      	ldr	r3, [r3, #32]
 800c6c6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800c6c8:	69bb      	ldr	r3, [r7, #24]
 800c6ca:	f003 020f 	and.w	r2, r3, #15
 800c6ce:	4613      	mov	r3, r2
 800c6d0:	00db      	lsls	r3, r3, #3
 800c6d2:	1a9b      	subs	r3, r3, r2
 800c6d4:	009b      	lsls	r3, r3, #2
 800c6d6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c6da:	687a      	ldr	r2, [r7, #4]
 800c6dc:	4413      	add	r3, r2
 800c6de:	3304      	adds	r3, #4
 800c6e0:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800c6e2:	69bb      	ldr	r3, [r7, #24]
 800c6e4:	0c5b      	lsrs	r3, r3, #17
 800c6e6:	f003 030f 	and.w	r3, r3, #15
 800c6ea:	2b02      	cmp	r3, #2
 800c6ec:	d124      	bne.n	800c738 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800c6ee:	69ba      	ldr	r2, [r7, #24]
 800c6f0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800c6f4:	4013      	ands	r3, r2
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d035      	beq.n	800c766 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c6fa:	697b      	ldr	r3, [r7, #20]
 800c6fc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800c6fe:	69bb      	ldr	r3, [r7, #24]
 800c700:	091b      	lsrs	r3, r3, #4
 800c702:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c704:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c708:	b29b      	uxth	r3, r3
 800c70a:	461a      	mov	r2, r3
 800c70c:	6a38      	ldr	r0, [r7, #32]
 800c70e:	f004 f8cb 	bl	80108a8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c712:	697b      	ldr	r3, [r7, #20]
 800c714:	68da      	ldr	r2, [r3, #12]
 800c716:	69bb      	ldr	r3, [r7, #24]
 800c718:	091b      	lsrs	r3, r3, #4
 800c71a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c71e:	441a      	add	r2, r3
 800c720:	697b      	ldr	r3, [r7, #20]
 800c722:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c724:	697b      	ldr	r3, [r7, #20]
 800c726:	699a      	ldr	r2, [r3, #24]
 800c728:	69bb      	ldr	r3, [r7, #24]
 800c72a:	091b      	lsrs	r3, r3, #4
 800c72c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c730:	441a      	add	r2, r3
 800c732:	697b      	ldr	r3, [r7, #20]
 800c734:	619a      	str	r2, [r3, #24]
 800c736:	e016      	b.n	800c766 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800c738:	69bb      	ldr	r3, [r7, #24]
 800c73a:	0c5b      	lsrs	r3, r3, #17
 800c73c:	f003 030f 	and.w	r3, r3, #15
 800c740:	2b06      	cmp	r3, #6
 800c742:	d110      	bne.n	800c766 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c74a:	2208      	movs	r2, #8
 800c74c:	4619      	mov	r1, r3
 800c74e:	6a38      	ldr	r0, [r7, #32]
 800c750:	f004 f8aa 	bl	80108a8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c754:	697b      	ldr	r3, [r7, #20]
 800c756:	699a      	ldr	r2, [r3, #24]
 800c758:	69bb      	ldr	r3, [r7, #24]
 800c75a:	091b      	lsrs	r3, r3, #4
 800c75c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c760:	441a      	add	r2, r3
 800c762:	697b      	ldr	r3, [r7, #20]
 800c764:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	699a      	ldr	r2, [r3, #24]
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	f042 0210 	orr.w	r2, r2, #16
 800c774:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	4618      	mov	r0, r3
 800c77c:	f004 f9f9 	bl	8010b72 <USB_ReadInterrupts>
 800c780:	4603      	mov	r3, r0
 800c782:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c786:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c78a:	d16e      	bne.n	800c86a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800c78c:	2300      	movs	r3, #0
 800c78e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	4618      	mov	r0, r3
 800c796:	f004 f9ff 	bl	8010b98 <USB_ReadDevAllOutEpInterrupt>
 800c79a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800c79c:	e062      	b.n	800c864 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800c79e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7a0:	f003 0301 	and.w	r3, r3, #1
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d057      	beq.n	800c858 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7ae:	b2d2      	uxtb	r2, r2
 800c7b0:	4611      	mov	r1, r2
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	f004 fa24 	bl	8010c00 <USB_ReadDevOutEPInterrupt>
 800c7b8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800c7ba:	693b      	ldr	r3, [r7, #16]
 800c7bc:	f003 0301 	and.w	r3, r3, #1
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d00c      	beq.n	800c7de <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800c7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7c6:	015a      	lsls	r2, r3, #5
 800c7c8:	69fb      	ldr	r3, [r7, #28]
 800c7ca:	4413      	add	r3, r2
 800c7cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7d0:	461a      	mov	r2, r3
 800c7d2:	2301      	movs	r3, #1
 800c7d4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800c7d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c7d8:	6878      	ldr	r0, [r7, #4]
 800c7da:	f000 fdb1 	bl	800d340 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800c7de:	693b      	ldr	r3, [r7, #16]
 800c7e0:	f003 0308 	and.w	r3, r3, #8
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d00c      	beq.n	800c802 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800c7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ea:	015a      	lsls	r2, r3, #5
 800c7ec:	69fb      	ldr	r3, [r7, #28]
 800c7ee:	4413      	add	r3, r2
 800c7f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7f4:	461a      	mov	r2, r3
 800c7f6:	2308      	movs	r3, #8
 800c7f8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800c7fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c7fc:	6878      	ldr	r0, [r7, #4]
 800c7fe:	f000 feab 	bl	800d558 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800c802:	693b      	ldr	r3, [r7, #16]
 800c804:	f003 0310 	and.w	r3, r3, #16
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d008      	beq.n	800c81e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800c80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c80e:	015a      	lsls	r2, r3, #5
 800c810:	69fb      	ldr	r3, [r7, #28]
 800c812:	4413      	add	r3, r2
 800c814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c818:	461a      	mov	r2, r3
 800c81a:	2310      	movs	r3, #16
 800c81c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c81e:	693b      	ldr	r3, [r7, #16]
 800c820:	f003 0320 	and.w	r3, r3, #32
 800c824:	2b00      	cmp	r3, #0
 800c826:	d008      	beq.n	800c83a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c82a:	015a      	lsls	r2, r3, #5
 800c82c:	69fb      	ldr	r3, [r7, #28]
 800c82e:	4413      	add	r3, r2
 800c830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c834:	461a      	mov	r2, r3
 800c836:	2320      	movs	r3, #32
 800c838:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800c83a:	693b      	ldr	r3, [r7, #16]
 800c83c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c840:	2b00      	cmp	r3, #0
 800c842:	d009      	beq.n	800c858 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800c844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c846:	015a      	lsls	r2, r3, #5
 800c848:	69fb      	ldr	r3, [r7, #28]
 800c84a:	4413      	add	r3, r2
 800c84c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c850:	461a      	mov	r2, r3
 800c852:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c856:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800c858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c85a:	3301      	adds	r3, #1
 800c85c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800c85e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c860:	085b      	lsrs	r3, r3, #1
 800c862:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800c864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c866:	2b00      	cmp	r3, #0
 800c868:	d199      	bne.n	800c79e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	4618      	mov	r0, r3
 800c870:	f004 f97f 	bl	8010b72 <USB_ReadInterrupts>
 800c874:	4603      	mov	r3, r0
 800c876:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c87a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c87e:	f040 80c0 	bne.w	800ca02 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	4618      	mov	r0, r3
 800c888:	f004 f9a0 	bl	8010bcc <USB_ReadDevAllInEpInterrupt>
 800c88c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800c88e:	2300      	movs	r3, #0
 800c890:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800c892:	e0b2      	b.n	800c9fa <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800c894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c896:	f003 0301 	and.w	r3, r3, #1
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	f000 80a7 	beq.w	800c9ee <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8a6:	b2d2      	uxtb	r2, r2
 800c8a8:	4611      	mov	r1, r2
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	f004 f9c6 	bl	8010c3c <USB_ReadDevInEPInterrupt>
 800c8b0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800c8b2:	693b      	ldr	r3, [r7, #16]
 800c8b4:	f003 0301 	and.w	r3, r3, #1
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d057      	beq.n	800c96c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8be:	f003 030f 	and.w	r3, r3, #15
 800c8c2:	2201      	movs	r2, #1
 800c8c4:	fa02 f303 	lsl.w	r3, r2, r3
 800c8c8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c8ca:	69fb      	ldr	r3, [r7, #28]
 800c8cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	43db      	mvns	r3, r3
 800c8d6:	69f9      	ldr	r1, [r7, #28]
 800c8d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c8dc:	4013      	ands	r3, r2
 800c8de:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800c8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8e2:	015a      	lsls	r2, r3, #5
 800c8e4:	69fb      	ldr	r3, [r7, #28]
 800c8e6:	4413      	add	r3, r2
 800c8e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8ec:	461a      	mov	r2, r3
 800c8ee:	2301      	movs	r3, #1
 800c8f0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	691b      	ldr	r3, [r3, #16]
 800c8f6:	2b01      	cmp	r3, #1
 800c8f8:	d132      	bne.n	800c960 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800c8fa:	6879      	ldr	r1, [r7, #4]
 800c8fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8fe:	4613      	mov	r3, r2
 800c900:	00db      	lsls	r3, r3, #3
 800c902:	1a9b      	subs	r3, r3, r2
 800c904:	009b      	lsls	r3, r3, #2
 800c906:	440b      	add	r3, r1
 800c908:	3348      	adds	r3, #72	; 0x48
 800c90a:	6819      	ldr	r1, [r3, #0]
 800c90c:	6878      	ldr	r0, [r7, #4]
 800c90e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c910:	4613      	mov	r3, r2
 800c912:	00db      	lsls	r3, r3, #3
 800c914:	1a9b      	subs	r3, r3, r2
 800c916:	009b      	lsls	r3, r3, #2
 800c918:	4403      	add	r3, r0
 800c91a:	3344      	adds	r3, #68	; 0x44
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	4419      	add	r1, r3
 800c920:	6878      	ldr	r0, [r7, #4]
 800c922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c924:	4613      	mov	r3, r2
 800c926:	00db      	lsls	r3, r3, #3
 800c928:	1a9b      	subs	r3, r3, r2
 800c92a:	009b      	lsls	r3, r3, #2
 800c92c:	4403      	add	r3, r0
 800c92e:	3348      	adds	r3, #72	; 0x48
 800c930:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800c932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c934:	2b00      	cmp	r3, #0
 800c936:	d113      	bne.n	800c960 <HAL_PCD_IRQHandler+0x31c>
 800c938:	6879      	ldr	r1, [r7, #4]
 800c93a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c93c:	4613      	mov	r3, r2
 800c93e:	00db      	lsls	r3, r3, #3
 800c940:	1a9b      	subs	r3, r3, r2
 800c942:	009b      	lsls	r3, r3, #2
 800c944:	440b      	add	r3, r1
 800c946:	3350      	adds	r3, #80	; 0x50
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d108      	bne.n	800c960 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	6818      	ldr	r0, [r3, #0]
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c958:	461a      	mov	r2, r3
 800c95a:	2101      	movs	r1, #1
 800c95c:	f004 f9ce 	bl	8010cfc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800c960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c962:	b2db      	uxtb	r3, r3
 800c964:	4619      	mov	r1, r3
 800c966:	6878      	ldr	r0, [r7, #4]
 800c968:	f008 ff8b 	bl	8015882 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800c96c:	693b      	ldr	r3, [r7, #16]
 800c96e:	f003 0308 	and.w	r3, r3, #8
 800c972:	2b00      	cmp	r3, #0
 800c974:	d008      	beq.n	800c988 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800c976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c978:	015a      	lsls	r2, r3, #5
 800c97a:	69fb      	ldr	r3, [r7, #28]
 800c97c:	4413      	add	r3, r2
 800c97e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c982:	461a      	mov	r2, r3
 800c984:	2308      	movs	r3, #8
 800c986:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800c988:	693b      	ldr	r3, [r7, #16]
 800c98a:	f003 0310 	and.w	r3, r3, #16
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d008      	beq.n	800c9a4 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800c992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c994:	015a      	lsls	r2, r3, #5
 800c996:	69fb      	ldr	r3, [r7, #28]
 800c998:	4413      	add	r3, r2
 800c99a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c99e:	461a      	mov	r2, r3
 800c9a0:	2310      	movs	r3, #16
 800c9a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800c9a4:	693b      	ldr	r3, [r7, #16]
 800c9a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d008      	beq.n	800c9c0 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800c9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9b0:	015a      	lsls	r2, r3, #5
 800c9b2:	69fb      	ldr	r3, [r7, #28]
 800c9b4:	4413      	add	r3, r2
 800c9b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9ba:	461a      	mov	r2, r3
 800c9bc:	2340      	movs	r3, #64	; 0x40
 800c9be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800c9c0:	693b      	ldr	r3, [r7, #16]
 800c9c2:	f003 0302 	and.w	r3, r3, #2
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d008      	beq.n	800c9dc <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800c9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9cc:	015a      	lsls	r2, r3, #5
 800c9ce:	69fb      	ldr	r3, [r7, #28]
 800c9d0:	4413      	add	r3, r2
 800c9d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9d6:	461a      	mov	r2, r3
 800c9d8:	2302      	movs	r3, #2
 800c9da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800c9dc:	693b      	ldr	r3, [r7, #16]
 800c9de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d003      	beq.n	800c9ee <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800c9e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c9e8:	6878      	ldr	r0, [r7, #4]
 800c9ea:	f000 fc1b 	bl	800d224 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800c9ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9f0:	3301      	adds	r3, #1
 800c9f2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800c9f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9f6:	085b      	lsrs	r3, r3, #1
 800c9f8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800c9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	f47f af49 	bne.w	800c894 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	4618      	mov	r0, r3
 800ca08:	f004 f8b3 	bl	8010b72 <USB_ReadInterrupts>
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ca12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ca16:	d122      	bne.n	800ca5e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800ca18:	69fb      	ldr	r3, [r7, #28]
 800ca1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca1e:	685b      	ldr	r3, [r3, #4]
 800ca20:	69fa      	ldr	r2, [r7, #28]
 800ca22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ca26:	f023 0301 	bic.w	r3, r3, #1
 800ca2a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800ca32:	2b01      	cmp	r3, #1
 800ca34:	d108      	bne.n	800ca48 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	2200      	movs	r2, #0
 800ca3a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800ca3e:	2100      	movs	r1, #0
 800ca40:	6878      	ldr	r0, [r7, #4]
 800ca42:	f000 fe27 	bl	800d694 <HAL_PCDEx_LPM_Callback>
 800ca46:	e002      	b.n	800ca4e <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800ca48:	6878      	ldr	r0, [r7, #4]
 800ca4a:	f008 ff91 	bl	8015970 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	695a      	ldr	r2, [r3, #20]
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800ca5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	4618      	mov	r0, r3
 800ca64:	f004 f885 	bl	8010b72 <USB_ReadInterrupts>
 800ca68:	4603      	mov	r3, r0
 800ca6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ca6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ca72:	d112      	bne.n	800ca9a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800ca74:	69fb      	ldr	r3, [r7, #28]
 800ca76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca7a:	689b      	ldr	r3, [r3, #8]
 800ca7c:	f003 0301 	and.w	r3, r3, #1
 800ca80:	2b01      	cmp	r3, #1
 800ca82:	d102      	bne.n	800ca8a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800ca84:	6878      	ldr	r0, [r7, #4]
 800ca86:	f008 ff4d 	bl	8015924 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	695a      	ldr	r2, [r3, #20]
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800ca98:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	4618      	mov	r0, r3
 800caa0:	f004 f867 	bl	8010b72 <USB_ReadInterrupts>
 800caa4:	4603      	mov	r3, r0
 800caa6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800caaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800caae:	f040 80c7 	bne.w	800cc40 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800cab2:	69fb      	ldr	r3, [r7, #28]
 800cab4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cab8:	685b      	ldr	r3, [r3, #4]
 800caba:	69fa      	ldr	r2, [r7, #28]
 800cabc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cac0:	f023 0301 	bic.w	r3, r3, #1
 800cac4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	2110      	movs	r1, #16
 800cacc:	4618      	mov	r0, r3
 800cace:	f003 f935 	bl	800fd3c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cad2:	2300      	movs	r3, #0
 800cad4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cad6:	e056      	b.n	800cb86 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800cad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cada:	015a      	lsls	r2, r3, #5
 800cadc:	69fb      	ldr	r3, [r7, #28]
 800cade:	4413      	add	r3, r2
 800cae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cae4:	461a      	mov	r2, r3
 800cae6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800caea:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800caec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caee:	015a      	lsls	r2, r3, #5
 800caf0:	69fb      	ldr	r3, [r7, #28]
 800caf2:	4413      	add	r3, r2
 800caf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cafc:	0151      	lsls	r1, r2, #5
 800cafe:	69fa      	ldr	r2, [r7, #28]
 800cb00:	440a      	add	r2, r1
 800cb02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cb0a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800cb0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb0e:	015a      	lsls	r2, r3, #5
 800cb10:	69fb      	ldr	r3, [r7, #28]
 800cb12:	4413      	add	r3, r2
 800cb14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb1c:	0151      	lsls	r1, r2, #5
 800cb1e:	69fa      	ldr	r2, [r7, #28]
 800cb20:	440a      	add	r2, r1
 800cb22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb26:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cb2a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800cb2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb2e:	015a      	lsls	r2, r3, #5
 800cb30:	69fb      	ldr	r3, [r7, #28]
 800cb32:	4413      	add	r3, r2
 800cb34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb38:	461a      	mov	r2, r3
 800cb3a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cb3e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800cb40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb42:	015a      	lsls	r2, r3, #5
 800cb44:	69fb      	ldr	r3, [r7, #28]
 800cb46:	4413      	add	r3, r2
 800cb48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb50:	0151      	lsls	r1, r2, #5
 800cb52:	69fa      	ldr	r2, [r7, #28]
 800cb54:	440a      	add	r2, r1
 800cb56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cb5e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800cb60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb62:	015a      	lsls	r2, r3, #5
 800cb64:	69fb      	ldr	r3, [r7, #28]
 800cb66:	4413      	add	r3, r2
 800cb68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb70:	0151      	lsls	r1, r2, #5
 800cb72:	69fa      	ldr	r2, [r7, #28]
 800cb74:	440a      	add	r2, r1
 800cb76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb7a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cb7e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cb80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb82:	3301      	adds	r3, #1
 800cb84:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	685b      	ldr	r3, [r3, #4]
 800cb8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb8c:	429a      	cmp	r2, r3
 800cb8e:	d3a3      	bcc.n	800cad8 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800cb90:	69fb      	ldr	r3, [r7, #28]
 800cb92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb96:	69db      	ldr	r3, [r3, #28]
 800cb98:	69fa      	ldr	r2, [r7, #28]
 800cb9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cb9e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800cba2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d016      	beq.n	800cbda <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800cbac:	69fb      	ldr	r3, [r7, #28]
 800cbae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cbb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cbb6:	69fa      	ldr	r2, [r7, #28]
 800cbb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cbbc:	f043 030b 	orr.w	r3, r3, #11
 800cbc0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800cbc4:	69fb      	ldr	r3, [r7, #28]
 800cbc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cbca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbcc:	69fa      	ldr	r2, [r7, #28]
 800cbce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cbd2:	f043 030b 	orr.w	r3, r3, #11
 800cbd6:	6453      	str	r3, [r2, #68]	; 0x44
 800cbd8:	e015      	b.n	800cc06 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800cbda:	69fb      	ldr	r3, [r7, #28]
 800cbdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cbe0:	695b      	ldr	r3, [r3, #20]
 800cbe2:	69fa      	ldr	r2, [r7, #28]
 800cbe4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cbe8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800cbec:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800cbf0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800cbf2:	69fb      	ldr	r3, [r7, #28]
 800cbf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cbf8:	691b      	ldr	r3, [r3, #16]
 800cbfa:	69fa      	ldr	r2, [r7, #28]
 800cbfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cc00:	f043 030b 	orr.w	r3, r3, #11
 800cc04:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800cc06:	69fb      	ldr	r3, [r7, #28]
 800cc08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	69fa      	ldr	r2, [r7, #28]
 800cc10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cc14:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800cc18:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	6818      	ldr	r0, [r3, #0]
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	691b      	ldr	r3, [r3, #16]
 800cc22:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800cc2a:	461a      	mov	r2, r3
 800cc2c:	f004 f866 	bl	8010cfc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	695a      	ldr	r2, [r3, #20]
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800cc3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	4618      	mov	r0, r3
 800cc46:	f003 ff94 	bl	8010b72 <USB_ReadInterrupts>
 800cc4a:	4603      	mov	r3, r0
 800cc4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cc50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cc54:	d124      	bne.n	800cca0 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	f004 f82a 	bl	8010cb4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	4618      	mov	r0, r3
 800cc66:	f003 f8ca 	bl	800fdfe <USB_GetDevSpeed>
 800cc6a:	4603      	mov	r3, r0
 800cc6c:	461a      	mov	r2, r3
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681c      	ldr	r4, [r3, #0]
 800cc76:	f001 f947 	bl	800df08 <HAL_RCC_GetHCLKFreq>
 800cc7a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800cc80:	b2db      	uxtb	r3, r3
 800cc82:	461a      	mov	r2, r3
 800cc84:	4620      	mov	r0, r4
 800cc86:	f002 fe07 	bl	800f898 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800cc8a:	6878      	ldr	r0, [r7, #4]
 800cc8c:	f008 fe21 	bl	80158d2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	695a      	ldr	r2, [r3, #20]
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800cc9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	4618      	mov	r0, r3
 800cca6:	f003 ff64 	bl	8010b72 <USB_ReadInterrupts>
 800ccaa:	4603      	mov	r3, r0
 800ccac:	f003 0308 	and.w	r3, r3, #8
 800ccb0:	2b08      	cmp	r3, #8
 800ccb2:	d10a      	bne.n	800ccca <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800ccb4:	6878      	ldr	r0, [r7, #4]
 800ccb6:	f008 fdfe 	bl	80158b6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	695a      	ldr	r2, [r3, #20]
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	f002 0208 	and.w	r2, r2, #8
 800ccc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	4618      	mov	r0, r3
 800ccd0:	f003 ff4f 	bl	8010b72 <USB_ReadInterrupts>
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ccda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ccde:	d10f      	bne.n	800cd00 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800cce0:	2300      	movs	r3, #0
 800cce2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800cce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cce6:	b2db      	uxtb	r3, r3
 800cce8:	4619      	mov	r1, r3
 800ccea:	6878      	ldr	r0, [r7, #4]
 800ccec:	f008 fe60 	bl	80159b0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	695a      	ldr	r2, [r3, #20]
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800ccfe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	4618      	mov	r0, r3
 800cd06:	f003 ff34 	bl	8010b72 <USB_ReadInterrupts>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cd10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cd14:	d10f      	bne.n	800cd36 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800cd16:	2300      	movs	r3, #0
 800cd18:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800cd1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd1c:	b2db      	uxtb	r3, r3
 800cd1e:	4619      	mov	r1, r3
 800cd20:	6878      	ldr	r0, [r7, #4]
 800cd22:	f008 fe33 	bl	801598c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	695a      	ldr	r2, [r3, #20]
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800cd34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	f003 ff19 	bl	8010b72 <USB_ReadInterrupts>
 800cd40:	4603      	mov	r3, r0
 800cd42:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cd46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd4a:	d10a      	bne.n	800cd62 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800cd4c:	6878      	ldr	r0, [r7, #4]
 800cd4e:	f008 fe41 	bl	80159d4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	695a      	ldr	r2, [r3, #20]
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800cd60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	4618      	mov	r0, r3
 800cd68:	f003 ff03 	bl	8010b72 <USB_ReadInterrupts>
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	f003 0304 	and.w	r3, r3, #4
 800cd72:	2b04      	cmp	r3, #4
 800cd74:	d115      	bne.n	800cda2 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	685b      	ldr	r3, [r3, #4]
 800cd7c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800cd7e:	69bb      	ldr	r3, [r7, #24]
 800cd80:	f003 0304 	and.w	r3, r3, #4
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d002      	beq.n	800cd8e <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800cd88:	6878      	ldr	r0, [r7, #4]
 800cd8a:	f008 fe31 	bl	80159f0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	6859      	ldr	r1, [r3, #4]
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	69ba      	ldr	r2, [r7, #24]
 800cd9a:	430a      	orrs	r2, r1
 800cd9c:	605a      	str	r2, [r3, #4]
 800cd9e:	e000      	b.n	800cda2 <HAL_PCD_IRQHandler+0x75e>
      return;
 800cda0:	bf00      	nop
    }
  }
}
 800cda2:	3734      	adds	r7, #52	; 0x34
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bd90      	pop	{r4, r7, pc}

0800cda8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b082      	sub	sp, #8
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
 800cdb0:	460b      	mov	r3, r1
 800cdb2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800cdba:	2b01      	cmp	r3, #1
 800cdbc:	d101      	bne.n	800cdc2 <HAL_PCD_SetAddress+0x1a>
 800cdbe:	2302      	movs	r3, #2
 800cdc0:	e013      	b.n	800cdea <HAL_PCD_SetAddress+0x42>
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	2201      	movs	r2, #1
 800cdc6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	78fa      	ldrb	r2, [r7, #3]
 800cdce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	78fa      	ldrb	r2, [r7, #3]
 800cdd8:	4611      	mov	r1, r2
 800cdda:	4618      	mov	r0, r3
 800cddc:	f003 fe61 	bl	8010aa2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	2200      	movs	r2, #0
 800cde4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800cde8:	2300      	movs	r3, #0
}
 800cdea:	4618      	mov	r0, r3
 800cdec:	3708      	adds	r7, #8
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	bd80      	pop	{r7, pc}

0800cdf2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800cdf2:	b580      	push	{r7, lr}
 800cdf4:	b084      	sub	sp, #16
 800cdf6:	af00      	add	r7, sp, #0
 800cdf8:	6078      	str	r0, [r7, #4]
 800cdfa:	4608      	mov	r0, r1
 800cdfc:	4611      	mov	r1, r2
 800cdfe:	461a      	mov	r2, r3
 800ce00:	4603      	mov	r3, r0
 800ce02:	70fb      	strb	r3, [r7, #3]
 800ce04:	460b      	mov	r3, r1
 800ce06:	803b      	strh	r3, [r7, #0]
 800ce08:	4613      	mov	r3, r2
 800ce0a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800ce10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	da0f      	bge.n	800ce38 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ce18:	78fb      	ldrb	r3, [r7, #3]
 800ce1a:	f003 020f 	and.w	r2, r3, #15
 800ce1e:	4613      	mov	r3, r2
 800ce20:	00db      	lsls	r3, r3, #3
 800ce22:	1a9b      	subs	r3, r3, r2
 800ce24:	009b      	lsls	r3, r3, #2
 800ce26:	3338      	adds	r3, #56	; 0x38
 800ce28:	687a      	ldr	r2, [r7, #4]
 800ce2a:	4413      	add	r3, r2
 800ce2c:	3304      	adds	r3, #4
 800ce2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	2201      	movs	r2, #1
 800ce34:	705a      	strb	r2, [r3, #1]
 800ce36:	e00f      	b.n	800ce58 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ce38:	78fb      	ldrb	r3, [r7, #3]
 800ce3a:	f003 020f 	and.w	r2, r3, #15
 800ce3e:	4613      	mov	r3, r2
 800ce40:	00db      	lsls	r3, r3, #3
 800ce42:	1a9b      	subs	r3, r3, r2
 800ce44:	009b      	lsls	r3, r3, #2
 800ce46:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ce4a:	687a      	ldr	r2, [r7, #4]
 800ce4c:	4413      	add	r3, r2
 800ce4e:	3304      	adds	r3, #4
 800ce50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	2200      	movs	r2, #0
 800ce56:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800ce58:	78fb      	ldrb	r3, [r7, #3]
 800ce5a:	f003 030f 	and.w	r3, r3, #15
 800ce5e:	b2da      	uxtb	r2, r3
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800ce64:	883a      	ldrh	r2, [r7, #0]
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	78ba      	ldrb	r2, [r7, #2]
 800ce6e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	785b      	ldrb	r3, [r3, #1]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d004      	beq.n	800ce82 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	781b      	ldrb	r3, [r3, #0]
 800ce7c:	b29a      	uxth	r2, r3
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800ce82:	78bb      	ldrb	r3, [r7, #2]
 800ce84:	2b02      	cmp	r3, #2
 800ce86:	d102      	bne.n	800ce8e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ce94:	2b01      	cmp	r3, #1
 800ce96:	d101      	bne.n	800ce9c <HAL_PCD_EP_Open+0xaa>
 800ce98:	2302      	movs	r3, #2
 800ce9a:	e00e      	b.n	800ceba <HAL_PCD_EP_Open+0xc8>
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2201      	movs	r2, #1
 800cea0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	68f9      	ldr	r1, [r7, #12]
 800ceaa:	4618      	mov	r0, r3
 800ceac:	f002 ffcc 	bl	800fe48 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800ceb8:	7afb      	ldrb	r3, [r7, #11]
}
 800ceba:	4618      	mov	r0, r3
 800cebc:	3710      	adds	r7, #16
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd80      	pop	{r7, pc}

0800cec2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cec2:	b580      	push	{r7, lr}
 800cec4:	b084      	sub	sp, #16
 800cec6:	af00      	add	r7, sp, #0
 800cec8:	6078      	str	r0, [r7, #4]
 800ceca:	460b      	mov	r3, r1
 800cecc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800cece:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	da0f      	bge.n	800cef6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ced6:	78fb      	ldrb	r3, [r7, #3]
 800ced8:	f003 020f 	and.w	r2, r3, #15
 800cedc:	4613      	mov	r3, r2
 800cede:	00db      	lsls	r3, r3, #3
 800cee0:	1a9b      	subs	r3, r3, r2
 800cee2:	009b      	lsls	r3, r3, #2
 800cee4:	3338      	adds	r3, #56	; 0x38
 800cee6:	687a      	ldr	r2, [r7, #4]
 800cee8:	4413      	add	r3, r2
 800ceea:	3304      	adds	r3, #4
 800ceec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	2201      	movs	r2, #1
 800cef2:	705a      	strb	r2, [r3, #1]
 800cef4:	e00f      	b.n	800cf16 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cef6:	78fb      	ldrb	r3, [r7, #3]
 800cef8:	f003 020f 	and.w	r2, r3, #15
 800cefc:	4613      	mov	r3, r2
 800cefe:	00db      	lsls	r3, r3, #3
 800cf00:	1a9b      	subs	r3, r3, r2
 800cf02:	009b      	lsls	r3, r3, #2
 800cf04:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800cf08:	687a      	ldr	r2, [r7, #4]
 800cf0a:	4413      	add	r3, r2
 800cf0c:	3304      	adds	r3, #4
 800cf0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	2200      	movs	r2, #0
 800cf14:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800cf16:	78fb      	ldrb	r3, [r7, #3]
 800cf18:	f003 030f 	and.w	r3, r3, #15
 800cf1c:	b2da      	uxtb	r2, r3
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800cf28:	2b01      	cmp	r3, #1
 800cf2a:	d101      	bne.n	800cf30 <HAL_PCD_EP_Close+0x6e>
 800cf2c:	2302      	movs	r3, #2
 800cf2e:	e00e      	b.n	800cf4e <HAL_PCD_EP_Close+0x8c>
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2201      	movs	r2, #1
 800cf34:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	68f9      	ldr	r1, [r7, #12]
 800cf3e:	4618      	mov	r0, r3
 800cf40:	f003 f80a 	bl	800ff58 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	2200      	movs	r2, #0
 800cf48:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800cf4c:	2300      	movs	r3, #0
}
 800cf4e:	4618      	mov	r0, r3
 800cf50:	3710      	adds	r7, #16
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bd80      	pop	{r7, pc}

0800cf56 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800cf56:	b580      	push	{r7, lr}
 800cf58:	b086      	sub	sp, #24
 800cf5a:	af00      	add	r7, sp, #0
 800cf5c:	60f8      	str	r0, [r7, #12]
 800cf5e:	607a      	str	r2, [r7, #4]
 800cf60:	603b      	str	r3, [r7, #0]
 800cf62:	460b      	mov	r3, r1
 800cf64:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cf66:	7afb      	ldrb	r3, [r7, #11]
 800cf68:	f003 020f 	and.w	r2, r3, #15
 800cf6c:	4613      	mov	r3, r2
 800cf6e:	00db      	lsls	r3, r3, #3
 800cf70:	1a9b      	subs	r3, r3, r2
 800cf72:	009b      	lsls	r3, r3, #2
 800cf74:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800cf78:	68fa      	ldr	r2, [r7, #12]
 800cf7a:	4413      	add	r3, r2
 800cf7c:	3304      	adds	r3, #4
 800cf7e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800cf80:	697b      	ldr	r3, [r7, #20]
 800cf82:	687a      	ldr	r2, [r7, #4]
 800cf84:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800cf86:	697b      	ldr	r3, [r7, #20]
 800cf88:	683a      	ldr	r2, [r7, #0]
 800cf8a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800cf8c:	697b      	ldr	r3, [r7, #20]
 800cf8e:	2200      	movs	r2, #0
 800cf90:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800cf92:	697b      	ldr	r3, [r7, #20]
 800cf94:	2200      	movs	r2, #0
 800cf96:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cf98:	7afb      	ldrb	r3, [r7, #11]
 800cf9a:	f003 030f 	and.w	r3, r3, #15
 800cf9e:	b2da      	uxtb	r2, r3
 800cfa0:	697b      	ldr	r3, [r7, #20]
 800cfa2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	691b      	ldr	r3, [r3, #16]
 800cfa8:	2b01      	cmp	r3, #1
 800cfaa:	d102      	bne.n	800cfb2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800cfac:	687a      	ldr	r2, [r7, #4]
 800cfae:	697b      	ldr	r3, [r7, #20]
 800cfb0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800cfb2:	7afb      	ldrb	r3, [r7, #11]
 800cfb4:	f003 030f 	and.w	r3, r3, #15
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d109      	bne.n	800cfd0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	6818      	ldr	r0, [r3, #0]
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	691b      	ldr	r3, [r3, #16]
 800cfc4:	b2db      	uxtb	r3, r3
 800cfc6:	461a      	mov	r2, r3
 800cfc8:	6979      	ldr	r1, [r7, #20]
 800cfca:	f003 fae5 	bl	8010598 <USB_EP0StartXfer>
 800cfce:	e008      	b.n	800cfe2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	6818      	ldr	r0, [r3, #0]
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	691b      	ldr	r3, [r3, #16]
 800cfd8:	b2db      	uxtb	r3, r3
 800cfda:	461a      	mov	r2, r3
 800cfdc:	6979      	ldr	r1, [r7, #20]
 800cfde:	f003 f897 	bl	8010110 <USB_EPStartXfer>
  }

  return HAL_OK;
 800cfe2:	2300      	movs	r3, #0
}
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	3718      	adds	r7, #24
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	bd80      	pop	{r7, pc}

0800cfec <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cfec:	b480      	push	{r7}
 800cfee:	b083      	sub	sp, #12
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
 800cff4:	460b      	mov	r3, r1
 800cff6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800cff8:	78fb      	ldrb	r3, [r7, #3]
 800cffa:	f003 020f 	and.w	r2, r3, #15
 800cffe:	6879      	ldr	r1, [r7, #4]
 800d000:	4613      	mov	r3, r2
 800d002:	00db      	lsls	r3, r3, #3
 800d004:	1a9b      	subs	r3, r3, r2
 800d006:	009b      	lsls	r3, r3, #2
 800d008:	440b      	add	r3, r1
 800d00a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800d00e:	681b      	ldr	r3, [r3, #0]
}
 800d010:	4618      	mov	r0, r3
 800d012:	370c      	adds	r7, #12
 800d014:	46bd      	mov	sp, r7
 800d016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01a:	4770      	bx	lr

0800d01c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b086      	sub	sp, #24
 800d020:	af00      	add	r7, sp, #0
 800d022:	60f8      	str	r0, [r7, #12]
 800d024:	607a      	str	r2, [r7, #4]
 800d026:	603b      	str	r3, [r7, #0]
 800d028:	460b      	mov	r3, r1
 800d02a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d02c:	7afb      	ldrb	r3, [r7, #11]
 800d02e:	f003 020f 	and.w	r2, r3, #15
 800d032:	4613      	mov	r3, r2
 800d034:	00db      	lsls	r3, r3, #3
 800d036:	1a9b      	subs	r3, r3, r2
 800d038:	009b      	lsls	r3, r3, #2
 800d03a:	3338      	adds	r3, #56	; 0x38
 800d03c:	68fa      	ldr	r2, [r7, #12]
 800d03e:	4413      	add	r3, r2
 800d040:	3304      	adds	r3, #4
 800d042:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800d044:	697b      	ldr	r3, [r7, #20]
 800d046:	687a      	ldr	r2, [r7, #4]
 800d048:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800d04a:	697b      	ldr	r3, [r7, #20]
 800d04c:	683a      	ldr	r2, [r7, #0]
 800d04e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800d050:	697b      	ldr	r3, [r7, #20]
 800d052:	2200      	movs	r2, #0
 800d054:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800d056:	697b      	ldr	r3, [r7, #20]
 800d058:	2201      	movs	r2, #1
 800d05a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d05c:	7afb      	ldrb	r3, [r7, #11]
 800d05e:	f003 030f 	and.w	r3, r3, #15
 800d062:	b2da      	uxtb	r2, r3
 800d064:	697b      	ldr	r3, [r7, #20]
 800d066:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	691b      	ldr	r3, [r3, #16]
 800d06c:	2b01      	cmp	r3, #1
 800d06e:	d102      	bne.n	800d076 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800d070:	687a      	ldr	r2, [r7, #4]
 800d072:	697b      	ldr	r3, [r7, #20]
 800d074:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800d076:	7afb      	ldrb	r3, [r7, #11]
 800d078:	f003 030f 	and.w	r3, r3, #15
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d109      	bne.n	800d094 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	6818      	ldr	r0, [r3, #0]
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	691b      	ldr	r3, [r3, #16]
 800d088:	b2db      	uxtb	r3, r3
 800d08a:	461a      	mov	r2, r3
 800d08c:	6979      	ldr	r1, [r7, #20]
 800d08e:	f003 fa83 	bl	8010598 <USB_EP0StartXfer>
 800d092:	e008      	b.n	800d0a6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	6818      	ldr	r0, [r3, #0]
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	691b      	ldr	r3, [r3, #16]
 800d09c:	b2db      	uxtb	r3, r3
 800d09e:	461a      	mov	r2, r3
 800d0a0:	6979      	ldr	r1, [r7, #20]
 800d0a2:	f003 f835 	bl	8010110 <USB_EPStartXfer>
  }

  return HAL_OK;
 800d0a6:	2300      	movs	r3, #0
}
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	3718      	adds	r7, #24
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	bd80      	pop	{r7, pc}

0800d0b0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b084      	sub	sp, #16
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
 800d0b8:	460b      	mov	r3, r1
 800d0ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800d0bc:	78fb      	ldrb	r3, [r7, #3]
 800d0be:	f003 020f 	and.w	r2, r3, #15
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	685b      	ldr	r3, [r3, #4]
 800d0c6:	429a      	cmp	r2, r3
 800d0c8:	d901      	bls.n	800d0ce <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800d0ca:	2301      	movs	r3, #1
 800d0cc:	e050      	b.n	800d170 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800d0ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	da0f      	bge.n	800d0f6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d0d6:	78fb      	ldrb	r3, [r7, #3]
 800d0d8:	f003 020f 	and.w	r2, r3, #15
 800d0dc:	4613      	mov	r3, r2
 800d0de:	00db      	lsls	r3, r3, #3
 800d0e0:	1a9b      	subs	r3, r3, r2
 800d0e2:	009b      	lsls	r3, r3, #2
 800d0e4:	3338      	adds	r3, #56	; 0x38
 800d0e6:	687a      	ldr	r2, [r7, #4]
 800d0e8:	4413      	add	r3, r2
 800d0ea:	3304      	adds	r3, #4
 800d0ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	2201      	movs	r2, #1
 800d0f2:	705a      	strb	r2, [r3, #1]
 800d0f4:	e00d      	b.n	800d112 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800d0f6:	78fa      	ldrb	r2, [r7, #3]
 800d0f8:	4613      	mov	r3, r2
 800d0fa:	00db      	lsls	r3, r3, #3
 800d0fc:	1a9b      	subs	r3, r3, r2
 800d0fe:	009b      	lsls	r3, r3, #2
 800d100:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d104:	687a      	ldr	r2, [r7, #4]
 800d106:	4413      	add	r3, r2
 800d108:	3304      	adds	r3, #4
 800d10a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	2200      	movs	r2, #0
 800d110:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	2201      	movs	r2, #1
 800d116:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d118:	78fb      	ldrb	r3, [r7, #3]
 800d11a:	f003 030f 	and.w	r3, r3, #15
 800d11e:	b2da      	uxtb	r2, r3
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d12a:	2b01      	cmp	r3, #1
 800d12c:	d101      	bne.n	800d132 <HAL_PCD_EP_SetStall+0x82>
 800d12e:	2302      	movs	r3, #2
 800d130:	e01e      	b.n	800d170 <HAL_PCD_EP_SetStall+0xc0>
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	2201      	movs	r2, #1
 800d136:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	68f9      	ldr	r1, [r7, #12]
 800d140:	4618      	mov	r0, r3
 800d142:	f003 fbda 	bl	80108fa <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800d146:	78fb      	ldrb	r3, [r7, #3]
 800d148:	f003 030f 	and.w	r3, r3, #15
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d10a      	bne.n	800d166 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	6818      	ldr	r0, [r3, #0]
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	691b      	ldr	r3, [r3, #16]
 800d158:	b2d9      	uxtb	r1, r3
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d160:	461a      	mov	r2, r3
 800d162:	f003 fdcb 	bl	8010cfc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2200      	movs	r2, #0
 800d16a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800d16e:	2300      	movs	r3, #0
}
 800d170:	4618      	mov	r0, r3
 800d172:	3710      	adds	r7, #16
 800d174:	46bd      	mov	sp, r7
 800d176:	bd80      	pop	{r7, pc}

0800d178 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b084      	sub	sp, #16
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
 800d180:	460b      	mov	r3, r1
 800d182:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800d184:	78fb      	ldrb	r3, [r7, #3]
 800d186:	f003 020f 	and.w	r2, r3, #15
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	685b      	ldr	r3, [r3, #4]
 800d18e:	429a      	cmp	r2, r3
 800d190:	d901      	bls.n	800d196 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800d192:	2301      	movs	r3, #1
 800d194:	e042      	b.n	800d21c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800d196:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	da0f      	bge.n	800d1be <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d19e:	78fb      	ldrb	r3, [r7, #3]
 800d1a0:	f003 020f 	and.w	r2, r3, #15
 800d1a4:	4613      	mov	r3, r2
 800d1a6:	00db      	lsls	r3, r3, #3
 800d1a8:	1a9b      	subs	r3, r3, r2
 800d1aa:	009b      	lsls	r3, r3, #2
 800d1ac:	3338      	adds	r3, #56	; 0x38
 800d1ae:	687a      	ldr	r2, [r7, #4]
 800d1b0:	4413      	add	r3, r2
 800d1b2:	3304      	adds	r3, #4
 800d1b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	2201      	movs	r2, #1
 800d1ba:	705a      	strb	r2, [r3, #1]
 800d1bc:	e00f      	b.n	800d1de <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d1be:	78fb      	ldrb	r3, [r7, #3]
 800d1c0:	f003 020f 	and.w	r2, r3, #15
 800d1c4:	4613      	mov	r3, r2
 800d1c6:	00db      	lsls	r3, r3, #3
 800d1c8:	1a9b      	subs	r3, r3, r2
 800d1ca:	009b      	lsls	r3, r3, #2
 800d1cc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d1d0:	687a      	ldr	r2, [r7, #4]
 800d1d2:	4413      	add	r3, r2
 800d1d4:	3304      	adds	r3, #4
 800d1d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	2200      	movs	r2, #0
 800d1dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d1e4:	78fb      	ldrb	r3, [r7, #3]
 800d1e6:	f003 030f 	and.w	r3, r3, #15
 800d1ea:	b2da      	uxtb	r2, r3
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d1f6:	2b01      	cmp	r3, #1
 800d1f8:	d101      	bne.n	800d1fe <HAL_PCD_EP_ClrStall+0x86>
 800d1fa:	2302      	movs	r3, #2
 800d1fc:	e00e      	b.n	800d21c <HAL_PCD_EP_ClrStall+0xa4>
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	2201      	movs	r2, #1
 800d202:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	68f9      	ldr	r1, [r7, #12]
 800d20c:	4618      	mov	r0, r3
 800d20e:	f003 fbe2 	bl	80109d6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	2200      	movs	r2, #0
 800d216:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800d21a:	2300      	movs	r3, #0
}
 800d21c:	4618      	mov	r0, r3
 800d21e:	3710      	adds	r7, #16
 800d220:	46bd      	mov	sp, r7
 800d222:	bd80      	pop	{r7, pc}

0800d224 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d224:	b580      	push	{r7, lr}
 800d226:	b08a      	sub	sp, #40	; 0x28
 800d228:	af02      	add	r7, sp, #8
 800d22a:	6078      	str	r0, [r7, #4]
 800d22c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d234:	697b      	ldr	r3, [r7, #20]
 800d236:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800d238:	683a      	ldr	r2, [r7, #0]
 800d23a:	4613      	mov	r3, r2
 800d23c:	00db      	lsls	r3, r3, #3
 800d23e:	1a9b      	subs	r3, r3, r2
 800d240:	009b      	lsls	r3, r3, #2
 800d242:	3338      	adds	r3, #56	; 0x38
 800d244:	687a      	ldr	r2, [r7, #4]
 800d246:	4413      	add	r3, r2
 800d248:	3304      	adds	r3, #4
 800d24a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	699a      	ldr	r2, [r3, #24]
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	695b      	ldr	r3, [r3, #20]
 800d254:	429a      	cmp	r2, r3
 800d256:	d901      	bls.n	800d25c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800d258:	2301      	movs	r3, #1
 800d25a:	e06c      	b.n	800d336 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	695a      	ldr	r2, [r3, #20]
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	699b      	ldr	r3, [r3, #24]
 800d264:	1ad3      	subs	r3, r2, r3
 800d266:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	689b      	ldr	r3, [r3, #8]
 800d26c:	69fa      	ldr	r2, [r7, #28]
 800d26e:	429a      	cmp	r2, r3
 800d270:	d902      	bls.n	800d278 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	689b      	ldr	r3, [r3, #8]
 800d276:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800d278:	69fb      	ldr	r3, [r7, #28]
 800d27a:	3303      	adds	r3, #3
 800d27c:	089b      	lsrs	r3, r3, #2
 800d27e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d280:	e02b      	b.n	800d2da <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	695a      	ldr	r2, [r3, #20]
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	699b      	ldr	r3, [r3, #24]
 800d28a:	1ad3      	subs	r3, r2, r3
 800d28c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	689b      	ldr	r3, [r3, #8]
 800d292:	69fa      	ldr	r2, [r7, #28]
 800d294:	429a      	cmp	r2, r3
 800d296:	d902      	bls.n	800d29e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	689b      	ldr	r3, [r3, #8]
 800d29c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800d29e:	69fb      	ldr	r3, [r7, #28]
 800d2a0:	3303      	adds	r3, #3
 800d2a2:	089b      	lsrs	r3, r3, #2
 800d2a4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	68d9      	ldr	r1, [r3, #12]
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	b2da      	uxtb	r2, r3
 800d2ae:	69fb      	ldr	r3, [r7, #28]
 800d2b0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800d2b6:	b2db      	uxtb	r3, r3
 800d2b8:	9300      	str	r3, [sp, #0]
 800d2ba:	4603      	mov	r3, r0
 800d2bc:	6978      	ldr	r0, [r7, #20]
 800d2be:	f003 fabe 	bl	801083e <USB_WritePacket>

    ep->xfer_buff  += len;
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	68da      	ldr	r2, [r3, #12]
 800d2c6:	69fb      	ldr	r3, [r7, #28]
 800d2c8:	441a      	add	r2, r3
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	699a      	ldr	r2, [r3, #24]
 800d2d2:	69fb      	ldr	r3, [r7, #28]
 800d2d4:	441a      	add	r2, r3
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d2da:	683b      	ldr	r3, [r7, #0]
 800d2dc:	015a      	lsls	r2, r3, #5
 800d2de:	693b      	ldr	r3, [r7, #16]
 800d2e0:	4413      	add	r3, r2
 800d2e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2e6:	699b      	ldr	r3, [r3, #24]
 800d2e8:	b29b      	uxth	r3, r3
 800d2ea:	69ba      	ldr	r2, [r7, #24]
 800d2ec:	429a      	cmp	r2, r3
 800d2ee:	d809      	bhi.n	800d304 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	699a      	ldr	r2, [r3, #24]
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d2f8:	429a      	cmp	r2, r3
 800d2fa:	d203      	bcs.n	800d304 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	695b      	ldr	r3, [r3, #20]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d1be      	bne.n	800d282 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	695a      	ldr	r2, [r3, #20]
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	699b      	ldr	r3, [r3, #24]
 800d30c:	429a      	cmp	r2, r3
 800d30e:	d811      	bhi.n	800d334 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	f003 030f 	and.w	r3, r3, #15
 800d316:	2201      	movs	r2, #1
 800d318:	fa02 f303 	lsl.w	r3, r2, r3
 800d31c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800d31e:	693b      	ldr	r3, [r7, #16]
 800d320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d324:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d326:	68bb      	ldr	r3, [r7, #8]
 800d328:	43db      	mvns	r3, r3
 800d32a:	6939      	ldr	r1, [r7, #16]
 800d32c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d330:	4013      	ands	r3, r2
 800d332:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800d334:	2300      	movs	r3, #0
}
 800d336:	4618      	mov	r0, r3
 800d338:	3720      	adds	r7, #32
 800d33a:	46bd      	mov	sp, r7
 800d33c:	bd80      	pop	{r7, pc}
	...

0800d340 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b086      	sub	sp, #24
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
 800d348:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d350:	697b      	ldr	r3, [r7, #20]
 800d352:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d354:	697b      	ldr	r3, [r7, #20]
 800d356:	333c      	adds	r3, #60	; 0x3c
 800d358:	3304      	adds	r3, #4
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d35e:	683b      	ldr	r3, [r7, #0]
 800d360:	015a      	lsls	r2, r3, #5
 800d362:	693b      	ldr	r3, [r7, #16]
 800d364:	4413      	add	r3, r2
 800d366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d36a:	689b      	ldr	r3, [r3, #8]
 800d36c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	691b      	ldr	r3, [r3, #16]
 800d372:	2b01      	cmp	r3, #1
 800d374:	f040 80a0 	bne.w	800d4b8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800d378:	68bb      	ldr	r3, [r7, #8]
 800d37a:	f003 0308 	and.w	r3, r3, #8
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d015      	beq.n	800d3ae <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	4a72      	ldr	r2, [pc, #456]	; (800d550 <PCD_EP_OutXfrComplete_int+0x210>)
 800d386:	4293      	cmp	r3, r2
 800d388:	f240 80dd 	bls.w	800d546 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d38c:	68bb      	ldr	r3, [r7, #8]
 800d38e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d392:	2b00      	cmp	r3, #0
 800d394:	f000 80d7 	beq.w	800d546 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d398:	683b      	ldr	r3, [r7, #0]
 800d39a:	015a      	lsls	r2, r3, #5
 800d39c:	693b      	ldr	r3, [r7, #16]
 800d39e:	4413      	add	r3, r2
 800d3a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3a4:	461a      	mov	r2, r3
 800d3a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d3aa:	6093      	str	r3, [r2, #8]
 800d3ac:	e0cb      	b.n	800d546 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800d3ae:	68bb      	ldr	r3, [r7, #8]
 800d3b0:	f003 0320 	and.w	r3, r3, #32
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d009      	beq.n	800d3cc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	015a      	lsls	r2, r3, #5
 800d3bc:	693b      	ldr	r3, [r7, #16]
 800d3be:	4413      	add	r3, r2
 800d3c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3c4:	461a      	mov	r2, r3
 800d3c6:	2320      	movs	r3, #32
 800d3c8:	6093      	str	r3, [r2, #8]
 800d3ca:	e0bc      	b.n	800d546 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800d3cc:	68bb      	ldr	r3, [r7, #8]
 800d3ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	f040 80b7 	bne.w	800d546 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	4a5d      	ldr	r2, [pc, #372]	; (800d550 <PCD_EP_OutXfrComplete_int+0x210>)
 800d3dc:	4293      	cmp	r3, r2
 800d3de:	d90f      	bls.n	800d400 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d3e0:	68bb      	ldr	r3, [r7, #8]
 800d3e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d00a      	beq.n	800d400 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d3ea:	683b      	ldr	r3, [r7, #0]
 800d3ec:	015a      	lsls	r2, r3, #5
 800d3ee:	693b      	ldr	r3, [r7, #16]
 800d3f0:	4413      	add	r3, r2
 800d3f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3f6:	461a      	mov	r2, r3
 800d3f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d3fc:	6093      	str	r3, [r2, #8]
 800d3fe:	e0a2      	b.n	800d546 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800d400:	6879      	ldr	r1, [r7, #4]
 800d402:	683a      	ldr	r2, [r7, #0]
 800d404:	4613      	mov	r3, r2
 800d406:	00db      	lsls	r3, r3, #3
 800d408:	1a9b      	subs	r3, r3, r2
 800d40a:	009b      	lsls	r3, r3, #2
 800d40c:	440b      	add	r3, r1
 800d40e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800d412:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	0159      	lsls	r1, r3, #5
 800d418:	693b      	ldr	r3, [r7, #16]
 800d41a:	440b      	add	r3, r1
 800d41c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d420:	691b      	ldr	r3, [r3, #16]
 800d422:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800d426:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800d428:	6878      	ldr	r0, [r7, #4]
 800d42a:	683a      	ldr	r2, [r7, #0]
 800d42c:	4613      	mov	r3, r2
 800d42e:	00db      	lsls	r3, r3, #3
 800d430:	1a9b      	subs	r3, r3, r2
 800d432:	009b      	lsls	r3, r3, #2
 800d434:	4403      	add	r3, r0
 800d436:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800d43a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800d43c:	6879      	ldr	r1, [r7, #4]
 800d43e:	683a      	ldr	r2, [r7, #0]
 800d440:	4613      	mov	r3, r2
 800d442:	00db      	lsls	r3, r3, #3
 800d444:	1a9b      	subs	r3, r3, r2
 800d446:	009b      	lsls	r3, r3, #2
 800d448:	440b      	add	r3, r1
 800d44a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d44e:	6819      	ldr	r1, [r3, #0]
 800d450:	6878      	ldr	r0, [r7, #4]
 800d452:	683a      	ldr	r2, [r7, #0]
 800d454:	4613      	mov	r3, r2
 800d456:	00db      	lsls	r3, r3, #3
 800d458:	1a9b      	subs	r3, r3, r2
 800d45a:	009b      	lsls	r3, r3, #2
 800d45c:	4403      	add	r3, r0
 800d45e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	4419      	add	r1, r3
 800d466:	6878      	ldr	r0, [r7, #4]
 800d468:	683a      	ldr	r2, [r7, #0]
 800d46a:	4613      	mov	r3, r2
 800d46c:	00db      	lsls	r3, r3, #3
 800d46e:	1a9b      	subs	r3, r3, r2
 800d470:	009b      	lsls	r3, r3, #2
 800d472:	4403      	add	r3, r0
 800d474:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d478:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800d47a:	683b      	ldr	r3, [r7, #0]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d114      	bne.n	800d4aa <PCD_EP_OutXfrComplete_int+0x16a>
 800d480:	6879      	ldr	r1, [r7, #4]
 800d482:	683a      	ldr	r2, [r7, #0]
 800d484:	4613      	mov	r3, r2
 800d486:	00db      	lsls	r3, r3, #3
 800d488:	1a9b      	subs	r3, r3, r2
 800d48a:	009b      	lsls	r3, r3, #2
 800d48c:	440b      	add	r3, r1
 800d48e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d108      	bne.n	800d4aa <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	6818      	ldr	r0, [r3, #0]
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d4a2:	461a      	mov	r2, r3
 800d4a4:	2101      	movs	r1, #1
 800d4a6:	f003 fc29 	bl	8010cfc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d4aa:	683b      	ldr	r3, [r7, #0]
 800d4ac:	b2db      	uxtb	r3, r3
 800d4ae:	4619      	mov	r1, r3
 800d4b0:	6878      	ldr	r0, [r7, #4]
 800d4b2:	f008 f9cb 	bl	801584c <HAL_PCD_DataOutStageCallback>
 800d4b6:	e046      	b.n	800d546 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	4a26      	ldr	r2, [pc, #152]	; (800d554 <PCD_EP_OutXfrComplete_int+0x214>)
 800d4bc:	4293      	cmp	r3, r2
 800d4be:	d124      	bne.n	800d50a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800d4c0:	68bb      	ldr	r3, [r7, #8]
 800d4c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d00a      	beq.n	800d4e0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d4ca:	683b      	ldr	r3, [r7, #0]
 800d4cc:	015a      	lsls	r2, r3, #5
 800d4ce:	693b      	ldr	r3, [r7, #16]
 800d4d0:	4413      	add	r3, r2
 800d4d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4d6:	461a      	mov	r2, r3
 800d4d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d4dc:	6093      	str	r3, [r2, #8]
 800d4de:	e032      	b.n	800d546 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800d4e0:	68bb      	ldr	r3, [r7, #8]
 800d4e2:	f003 0320 	and.w	r3, r3, #32
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d008      	beq.n	800d4fc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d4ea:	683b      	ldr	r3, [r7, #0]
 800d4ec:	015a      	lsls	r2, r3, #5
 800d4ee:	693b      	ldr	r3, [r7, #16]
 800d4f0:	4413      	add	r3, r2
 800d4f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4f6:	461a      	mov	r2, r3
 800d4f8:	2320      	movs	r3, #32
 800d4fa:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d4fc:	683b      	ldr	r3, [r7, #0]
 800d4fe:	b2db      	uxtb	r3, r3
 800d500:	4619      	mov	r1, r3
 800d502:	6878      	ldr	r0, [r7, #4]
 800d504:	f008 f9a2 	bl	801584c <HAL_PCD_DataOutStageCallback>
 800d508:	e01d      	b.n	800d546 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800d50a:	683b      	ldr	r3, [r7, #0]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d114      	bne.n	800d53a <PCD_EP_OutXfrComplete_int+0x1fa>
 800d510:	6879      	ldr	r1, [r7, #4]
 800d512:	683a      	ldr	r2, [r7, #0]
 800d514:	4613      	mov	r3, r2
 800d516:	00db      	lsls	r3, r3, #3
 800d518:	1a9b      	subs	r3, r3, r2
 800d51a:	009b      	lsls	r3, r3, #2
 800d51c:	440b      	add	r3, r1
 800d51e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d108      	bne.n	800d53a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	6818      	ldr	r0, [r3, #0]
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d532:	461a      	mov	r2, r3
 800d534:	2100      	movs	r1, #0
 800d536:	f003 fbe1 	bl	8010cfc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d53a:	683b      	ldr	r3, [r7, #0]
 800d53c:	b2db      	uxtb	r3, r3
 800d53e:	4619      	mov	r1, r3
 800d540:	6878      	ldr	r0, [r7, #4]
 800d542:	f008 f983 	bl	801584c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800d546:	2300      	movs	r3, #0
}
 800d548:	4618      	mov	r0, r3
 800d54a:	3718      	adds	r7, #24
 800d54c:	46bd      	mov	sp, r7
 800d54e:	bd80      	pop	{r7, pc}
 800d550:	4f54300a 	.word	0x4f54300a
 800d554:	4f54310a 	.word	0x4f54310a

0800d558 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d558:	b580      	push	{r7, lr}
 800d55a:	b086      	sub	sp, #24
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
 800d560:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d568:	697b      	ldr	r3, [r7, #20]
 800d56a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d56c:	697b      	ldr	r3, [r7, #20]
 800d56e:	333c      	adds	r3, #60	; 0x3c
 800d570:	3304      	adds	r3, #4
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d576:	683b      	ldr	r3, [r7, #0]
 800d578:	015a      	lsls	r2, r3, #5
 800d57a:	693b      	ldr	r3, [r7, #16]
 800d57c:	4413      	add	r3, r2
 800d57e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d582:	689b      	ldr	r3, [r3, #8]
 800d584:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	4a15      	ldr	r2, [pc, #84]	; (800d5e0 <PCD_EP_OutSetupPacket_int+0x88>)
 800d58a:	4293      	cmp	r3, r2
 800d58c:	d90e      	bls.n	800d5ac <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d58e:	68bb      	ldr	r3, [r7, #8]
 800d590:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d594:	2b00      	cmp	r3, #0
 800d596:	d009      	beq.n	800d5ac <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d598:	683b      	ldr	r3, [r7, #0]
 800d59a:	015a      	lsls	r2, r3, #5
 800d59c:	693b      	ldr	r3, [r7, #16]
 800d59e:	4413      	add	r3, r2
 800d5a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5a4:	461a      	mov	r2, r3
 800d5a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d5aa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800d5ac:	6878      	ldr	r0, [r7, #4]
 800d5ae:	f008 f93b 	bl	8015828 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	4a0a      	ldr	r2, [pc, #40]	; (800d5e0 <PCD_EP_OutSetupPacket_int+0x88>)
 800d5b6:	4293      	cmp	r3, r2
 800d5b8:	d90c      	bls.n	800d5d4 <PCD_EP_OutSetupPacket_int+0x7c>
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	691b      	ldr	r3, [r3, #16]
 800d5be:	2b01      	cmp	r3, #1
 800d5c0:	d108      	bne.n	800d5d4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	6818      	ldr	r0, [r3, #0]
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d5cc:	461a      	mov	r2, r3
 800d5ce:	2101      	movs	r1, #1
 800d5d0:	f003 fb94 	bl	8010cfc <USB_EP0_OutStart>
  }

  return HAL_OK;
 800d5d4:	2300      	movs	r3, #0
}
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	3718      	adds	r7, #24
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	bd80      	pop	{r7, pc}
 800d5de:	bf00      	nop
 800d5e0:	4f54300a 	.word	0x4f54300a

0800d5e4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800d5e4:	b480      	push	{r7}
 800d5e6:	b085      	sub	sp, #20
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
 800d5ec:	460b      	mov	r3, r1
 800d5ee:	70fb      	strb	r3, [r7, #3]
 800d5f0:	4613      	mov	r3, r2
 800d5f2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5fa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800d5fc:	78fb      	ldrb	r3, [r7, #3]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d107      	bne.n	800d612 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800d602:	883b      	ldrh	r3, [r7, #0]
 800d604:	0419      	lsls	r1, r3, #16
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	68ba      	ldr	r2, [r7, #8]
 800d60c:	430a      	orrs	r2, r1
 800d60e:	629a      	str	r2, [r3, #40]	; 0x28
 800d610:	e028      	b.n	800d664 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d618:	0c1b      	lsrs	r3, r3, #16
 800d61a:	68ba      	ldr	r2, [r7, #8]
 800d61c:	4413      	add	r3, r2
 800d61e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d620:	2300      	movs	r3, #0
 800d622:	73fb      	strb	r3, [r7, #15]
 800d624:	e00d      	b.n	800d642 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	681a      	ldr	r2, [r3, #0]
 800d62a:	7bfb      	ldrb	r3, [r7, #15]
 800d62c:	3340      	adds	r3, #64	; 0x40
 800d62e:	009b      	lsls	r3, r3, #2
 800d630:	4413      	add	r3, r2
 800d632:	685b      	ldr	r3, [r3, #4]
 800d634:	0c1b      	lsrs	r3, r3, #16
 800d636:	68ba      	ldr	r2, [r7, #8]
 800d638:	4413      	add	r3, r2
 800d63a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d63c:	7bfb      	ldrb	r3, [r7, #15]
 800d63e:	3301      	adds	r3, #1
 800d640:	73fb      	strb	r3, [r7, #15]
 800d642:	7bfa      	ldrb	r2, [r7, #15]
 800d644:	78fb      	ldrb	r3, [r7, #3]
 800d646:	3b01      	subs	r3, #1
 800d648:	429a      	cmp	r2, r3
 800d64a:	d3ec      	bcc.n	800d626 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800d64c:	883b      	ldrh	r3, [r7, #0]
 800d64e:	0418      	lsls	r0, r3, #16
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	6819      	ldr	r1, [r3, #0]
 800d654:	78fb      	ldrb	r3, [r7, #3]
 800d656:	3b01      	subs	r3, #1
 800d658:	68ba      	ldr	r2, [r7, #8]
 800d65a:	4302      	orrs	r2, r0
 800d65c:	3340      	adds	r3, #64	; 0x40
 800d65e:	009b      	lsls	r3, r3, #2
 800d660:	440b      	add	r3, r1
 800d662:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800d664:	2300      	movs	r3, #0
}
 800d666:	4618      	mov	r0, r3
 800d668:	3714      	adds	r7, #20
 800d66a:	46bd      	mov	sp, r7
 800d66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d670:	4770      	bx	lr

0800d672 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800d672:	b480      	push	{r7}
 800d674:	b083      	sub	sp, #12
 800d676:	af00      	add	r7, sp, #0
 800d678:	6078      	str	r0, [r7, #4]
 800d67a:	460b      	mov	r3, r1
 800d67c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	887a      	ldrh	r2, [r7, #2]
 800d684:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800d686:	2300      	movs	r3, #0
}
 800d688:	4618      	mov	r0, r3
 800d68a:	370c      	adds	r7, #12
 800d68c:	46bd      	mov	sp, r7
 800d68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d692:	4770      	bx	lr

0800d694 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d694:	b480      	push	{r7}
 800d696:	b083      	sub	sp, #12
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]
 800d69c:	460b      	mov	r3, r1
 800d69e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800d6a0:	bf00      	nop
 800d6a2:	370c      	adds	r7, #12
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6aa:	4770      	bx	lr

0800d6ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b086      	sub	sp, #24
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d101      	bne.n	800d6be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d6ba:	2301      	movs	r3, #1
 800d6bc:	e25b      	b.n	800db76 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	f003 0301 	and.w	r3, r3, #1
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d075      	beq.n	800d7b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d6ca:	4ba3      	ldr	r3, [pc, #652]	; (800d958 <HAL_RCC_OscConfig+0x2ac>)
 800d6cc:	689b      	ldr	r3, [r3, #8]
 800d6ce:	f003 030c 	and.w	r3, r3, #12
 800d6d2:	2b04      	cmp	r3, #4
 800d6d4:	d00c      	beq.n	800d6f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d6d6:	4ba0      	ldr	r3, [pc, #640]	; (800d958 <HAL_RCC_OscConfig+0x2ac>)
 800d6d8:	689b      	ldr	r3, [r3, #8]
 800d6da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d6de:	2b08      	cmp	r3, #8
 800d6e0:	d112      	bne.n	800d708 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d6e2:	4b9d      	ldr	r3, [pc, #628]	; (800d958 <HAL_RCC_OscConfig+0x2ac>)
 800d6e4:	685b      	ldr	r3, [r3, #4]
 800d6e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d6ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d6ee:	d10b      	bne.n	800d708 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d6f0:	4b99      	ldr	r3, [pc, #612]	; (800d958 <HAL_RCC_OscConfig+0x2ac>)
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d05b      	beq.n	800d7b4 <HAL_RCC_OscConfig+0x108>
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	685b      	ldr	r3, [r3, #4]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d157      	bne.n	800d7b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800d704:	2301      	movs	r3, #1
 800d706:	e236      	b.n	800db76 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	685b      	ldr	r3, [r3, #4]
 800d70c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d710:	d106      	bne.n	800d720 <HAL_RCC_OscConfig+0x74>
 800d712:	4b91      	ldr	r3, [pc, #580]	; (800d958 <HAL_RCC_OscConfig+0x2ac>)
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	4a90      	ldr	r2, [pc, #576]	; (800d958 <HAL_RCC_OscConfig+0x2ac>)
 800d718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d71c:	6013      	str	r3, [r2, #0]
 800d71e:	e01d      	b.n	800d75c <HAL_RCC_OscConfig+0xb0>
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	685b      	ldr	r3, [r3, #4]
 800d724:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d728:	d10c      	bne.n	800d744 <HAL_RCC_OscConfig+0x98>
 800d72a:	4b8b      	ldr	r3, [pc, #556]	; (800d958 <HAL_RCC_OscConfig+0x2ac>)
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	4a8a      	ldr	r2, [pc, #552]	; (800d958 <HAL_RCC_OscConfig+0x2ac>)
 800d730:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d734:	6013      	str	r3, [r2, #0]
 800d736:	4b88      	ldr	r3, [pc, #544]	; (800d958 <HAL_RCC_OscConfig+0x2ac>)
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	4a87      	ldr	r2, [pc, #540]	; (800d958 <HAL_RCC_OscConfig+0x2ac>)
 800d73c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d740:	6013      	str	r3, [r2, #0]
 800d742:	e00b      	b.n	800d75c <HAL_RCC_OscConfig+0xb0>
 800d744:	4b84      	ldr	r3, [pc, #528]	; (800d958 <HAL_RCC_OscConfig+0x2ac>)
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	4a83      	ldr	r2, [pc, #524]	; (800d958 <HAL_RCC_OscConfig+0x2ac>)
 800d74a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d74e:	6013      	str	r3, [r2, #0]
 800d750:	4b81      	ldr	r3, [pc, #516]	; (800d958 <HAL_RCC_OscConfig+0x2ac>)
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	4a80      	ldr	r2, [pc, #512]	; (800d958 <HAL_RCC_OscConfig+0x2ac>)
 800d756:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d75a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	685b      	ldr	r3, [r3, #4]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d013      	beq.n	800d78c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d764:	f7fd ff66 	bl	800b634 <HAL_GetTick>
 800d768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d76a:	e008      	b.n	800d77e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d76c:	f7fd ff62 	bl	800b634 <HAL_GetTick>
 800d770:	4602      	mov	r2, r0
 800d772:	693b      	ldr	r3, [r7, #16]
 800d774:	1ad3      	subs	r3, r2, r3
 800d776:	2b64      	cmp	r3, #100	; 0x64
 800d778:	d901      	bls.n	800d77e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800d77a:	2303      	movs	r3, #3
 800d77c:	e1fb      	b.n	800db76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d77e:	4b76      	ldr	r3, [pc, #472]	; (800d958 <HAL_RCC_OscConfig+0x2ac>)
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d786:	2b00      	cmp	r3, #0
 800d788:	d0f0      	beq.n	800d76c <HAL_RCC_OscConfig+0xc0>
 800d78a:	e014      	b.n	800d7b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d78c:	f7fd ff52 	bl	800b634 <HAL_GetTick>
 800d790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d792:	e008      	b.n	800d7a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d794:	f7fd ff4e 	bl	800b634 <HAL_GetTick>
 800d798:	4602      	mov	r2, r0
 800d79a:	693b      	ldr	r3, [r7, #16]
 800d79c:	1ad3      	subs	r3, r2, r3
 800d79e:	2b64      	cmp	r3, #100	; 0x64
 800d7a0:	d901      	bls.n	800d7a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d7a2:	2303      	movs	r3, #3
 800d7a4:	e1e7      	b.n	800db76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d7a6:	4b6c      	ldr	r3, [pc, #432]	; (800d958 <HAL_RCC_OscConfig+0x2ac>)
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d1f0      	bne.n	800d794 <HAL_RCC_OscConfig+0xe8>
 800d7b2:	e000      	b.n	800d7b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d7b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	f003 0302 	and.w	r3, r3, #2
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d063      	beq.n	800d88a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d7c2:	4b65      	ldr	r3, [pc, #404]	; (800d958 <HAL_RCC_OscConfig+0x2ac>)
 800d7c4:	689b      	ldr	r3, [r3, #8]
 800d7c6:	f003 030c 	and.w	r3, r3, #12
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d00b      	beq.n	800d7e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d7ce:	4b62      	ldr	r3, [pc, #392]	; (800d958 <HAL_RCC_OscConfig+0x2ac>)
 800d7d0:	689b      	ldr	r3, [r3, #8]
 800d7d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d7d6:	2b08      	cmp	r3, #8
 800d7d8:	d11c      	bne.n	800d814 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d7da:	4b5f      	ldr	r3, [pc, #380]	; (800d958 <HAL_RCC_OscConfig+0x2ac>)
 800d7dc:	685b      	ldr	r3, [r3, #4]
 800d7de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d116      	bne.n	800d814 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d7e6:	4b5c      	ldr	r3, [pc, #368]	; (800d958 <HAL_RCC_OscConfig+0x2ac>)
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	f003 0302 	and.w	r3, r3, #2
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d005      	beq.n	800d7fe <HAL_RCC_OscConfig+0x152>
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	68db      	ldr	r3, [r3, #12]
 800d7f6:	2b01      	cmp	r3, #1
 800d7f8:	d001      	beq.n	800d7fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800d7fa:	2301      	movs	r3, #1
 800d7fc:	e1bb      	b.n	800db76 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d7fe:	4b56      	ldr	r3, [pc, #344]	; (800d958 <HAL_RCC_OscConfig+0x2ac>)
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	691b      	ldr	r3, [r3, #16]
 800d80a:	00db      	lsls	r3, r3, #3
 800d80c:	4952      	ldr	r1, [pc, #328]	; (800d958 <HAL_RCC_OscConfig+0x2ac>)
 800d80e:	4313      	orrs	r3, r2
 800d810:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d812:	e03a      	b.n	800d88a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	68db      	ldr	r3, [r3, #12]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d020      	beq.n	800d85e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d81c:	4b4f      	ldr	r3, [pc, #316]	; (800d95c <HAL_RCC_OscConfig+0x2b0>)
 800d81e:	2201      	movs	r2, #1
 800d820:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d822:	f7fd ff07 	bl	800b634 <HAL_GetTick>
 800d826:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d828:	e008      	b.n	800d83c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d82a:	f7fd ff03 	bl	800b634 <HAL_GetTick>
 800d82e:	4602      	mov	r2, r0
 800d830:	693b      	ldr	r3, [r7, #16]
 800d832:	1ad3      	subs	r3, r2, r3
 800d834:	2b02      	cmp	r3, #2
 800d836:	d901      	bls.n	800d83c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800d838:	2303      	movs	r3, #3
 800d83a:	e19c      	b.n	800db76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d83c:	4b46      	ldr	r3, [pc, #280]	; (800d958 <HAL_RCC_OscConfig+0x2ac>)
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	f003 0302 	and.w	r3, r3, #2
 800d844:	2b00      	cmp	r3, #0
 800d846:	d0f0      	beq.n	800d82a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d848:	4b43      	ldr	r3, [pc, #268]	; (800d958 <HAL_RCC_OscConfig+0x2ac>)
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	691b      	ldr	r3, [r3, #16]
 800d854:	00db      	lsls	r3, r3, #3
 800d856:	4940      	ldr	r1, [pc, #256]	; (800d958 <HAL_RCC_OscConfig+0x2ac>)
 800d858:	4313      	orrs	r3, r2
 800d85a:	600b      	str	r3, [r1, #0]
 800d85c:	e015      	b.n	800d88a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d85e:	4b3f      	ldr	r3, [pc, #252]	; (800d95c <HAL_RCC_OscConfig+0x2b0>)
 800d860:	2200      	movs	r2, #0
 800d862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d864:	f7fd fee6 	bl	800b634 <HAL_GetTick>
 800d868:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d86a:	e008      	b.n	800d87e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d86c:	f7fd fee2 	bl	800b634 <HAL_GetTick>
 800d870:	4602      	mov	r2, r0
 800d872:	693b      	ldr	r3, [r7, #16]
 800d874:	1ad3      	subs	r3, r2, r3
 800d876:	2b02      	cmp	r3, #2
 800d878:	d901      	bls.n	800d87e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800d87a:	2303      	movs	r3, #3
 800d87c:	e17b      	b.n	800db76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d87e:	4b36      	ldr	r3, [pc, #216]	; (800d958 <HAL_RCC_OscConfig+0x2ac>)
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	f003 0302 	and.w	r3, r3, #2
 800d886:	2b00      	cmp	r3, #0
 800d888:	d1f0      	bne.n	800d86c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	f003 0308 	and.w	r3, r3, #8
 800d892:	2b00      	cmp	r3, #0
 800d894:	d030      	beq.n	800d8f8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	695b      	ldr	r3, [r3, #20]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d016      	beq.n	800d8cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d89e:	4b30      	ldr	r3, [pc, #192]	; (800d960 <HAL_RCC_OscConfig+0x2b4>)
 800d8a0:	2201      	movs	r2, #1
 800d8a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d8a4:	f7fd fec6 	bl	800b634 <HAL_GetTick>
 800d8a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d8aa:	e008      	b.n	800d8be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d8ac:	f7fd fec2 	bl	800b634 <HAL_GetTick>
 800d8b0:	4602      	mov	r2, r0
 800d8b2:	693b      	ldr	r3, [r7, #16]
 800d8b4:	1ad3      	subs	r3, r2, r3
 800d8b6:	2b02      	cmp	r3, #2
 800d8b8:	d901      	bls.n	800d8be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800d8ba:	2303      	movs	r3, #3
 800d8bc:	e15b      	b.n	800db76 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d8be:	4b26      	ldr	r3, [pc, #152]	; (800d958 <HAL_RCC_OscConfig+0x2ac>)
 800d8c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d8c2:	f003 0302 	and.w	r3, r3, #2
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d0f0      	beq.n	800d8ac <HAL_RCC_OscConfig+0x200>
 800d8ca:	e015      	b.n	800d8f8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d8cc:	4b24      	ldr	r3, [pc, #144]	; (800d960 <HAL_RCC_OscConfig+0x2b4>)
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d8d2:	f7fd feaf 	bl	800b634 <HAL_GetTick>
 800d8d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d8d8:	e008      	b.n	800d8ec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d8da:	f7fd feab 	bl	800b634 <HAL_GetTick>
 800d8de:	4602      	mov	r2, r0
 800d8e0:	693b      	ldr	r3, [r7, #16]
 800d8e2:	1ad3      	subs	r3, r2, r3
 800d8e4:	2b02      	cmp	r3, #2
 800d8e6:	d901      	bls.n	800d8ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800d8e8:	2303      	movs	r3, #3
 800d8ea:	e144      	b.n	800db76 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d8ec:	4b1a      	ldr	r3, [pc, #104]	; (800d958 <HAL_RCC_OscConfig+0x2ac>)
 800d8ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d8f0:	f003 0302 	and.w	r3, r3, #2
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d1f0      	bne.n	800d8da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	f003 0304 	and.w	r3, r3, #4
 800d900:	2b00      	cmp	r3, #0
 800d902:	f000 80a0 	beq.w	800da46 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d906:	2300      	movs	r3, #0
 800d908:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d90a:	4b13      	ldr	r3, [pc, #76]	; (800d958 <HAL_RCC_OscConfig+0x2ac>)
 800d90c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d90e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d912:	2b00      	cmp	r3, #0
 800d914:	d10f      	bne.n	800d936 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d916:	2300      	movs	r3, #0
 800d918:	60bb      	str	r3, [r7, #8]
 800d91a:	4b0f      	ldr	r3, [pc, #60]	; (800d958 <HAL_RCC_OscConfig+0x2ac>)
 800d91c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d91e:	4a0e      	ldr	r2, [pc, #56]	; (800d958 <HAL_RCC_OscConfig+0x2ac>)
 800d920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d924:	6413      	str	r3, [r2, #64]	; 0x40
 800d926:	4b0c      	ldr	r3, [pc, #48]	; (800d958 <HAL_RCC_OscConfig+0x2ac>)
 800d928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d92a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d92e:	60bb      	str	r3, [r7, #8]
 800d930:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d932:	2301      	movs	r3, #1
 800d934:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d936:	4b0b      	ldr	r3, [pc, #44]	; (800d964 <HAL_RCC_OscConfig+0x2b8>)
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d121      	bne.n	800d986 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800d942:	4b08      	ldr	r3, [pc, #32]	; (800d964 <HAL_RCC_OscConfig+0x2b8>)
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	4a07      	ldr	r2, [pc, #28]	; (800d964 <HAL_RCC_OscConfig+0x2b8>)
 800d948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d94c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d94e:	f7fd fe71 	bl	800b634 <HAL_GetTick>
 800d952:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d954:	e011      	b.n	800d97a <HAL_RCC_OscConfig+0x2ce>
 800d956:	bf00      	nop
 800d958:	40023800 	.word	0x40023800
 800d95c:	42470000 	.word	0x42470000
 800d960:	42470e80 	.word	0x42470e80
 800d964:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d968:	f7fd fe64 	bl	800b634 <HAL_GetTick>
 800d96c:	4602      	mov	r2, r0
 800d96e:	693b      	ldr	r3, [r7, #16]
 800d970:	1ad3      	subs	r3, r2, r3
 800d972:	2b02      	cmp	r3, #2
 800d974:	d901      	bls.n	800d97a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800d976:	2303      	movs	r3, #3
 800d978:	e0fd      	b.n	800db76 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d97a:	4b81      	ldr	r3, [pc, #516]	; (800db80 <HAL_RCC_OscConfig+0x4d4>)
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d982:	2b00      	cmp	r3, #0
 800d984:	d0f0      	beq.n	800d968 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	689b      	ldr	r3, [r3, #8]
 800d98a:	2b01      	cmp	r3, #1
 800d98c:	d106      	bne.n	800d99c <HAL_RCC_OscConfig+0x2f0>
 800d98e:	4b7d      	ldr	r3, [pc, #500]	; (800db84 <HAL_RCC_OscConfig+0x4d8>)
 800d990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d992:	4a7c      	ldr	r2, [pc, #496]	; (800db84 <HAL_RCC_OscConfig+0x4d8>)
 800d994:	f043 0301 	orr.w	r3, r3, #1
 800d998:	6713      	str	r3, [r2, #112]	; 0x70
 800d99a:	e01c      	b.n	800d9d6 <HAL_RCC_OscConfig+0x32a>
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	689b      	ldr	r3, [r3, #8]
 800d9a0:	2b05      	cmp	r3, #5
 800d9a2:	d10c      	bne.n	800d9be <HAL_RCC_OscConfig+0x312>
 800d9a4:	4b77      	ldr	r3, [pc, #476]	; (800db84 <HAL_RCC_OscConfig+0x4d8>)
 800d9a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9a8:	4a76      	ldr	r2, [pc, #472]	; (800db84 <HAL_RCC_OscConfig+0x4d8>)
 800d9aa:	f043 0304 	orr.w	r3, r3, #4
 800d9ae:	6713      	str	r3, [r2, #112]	; 0x70
 800d9b0:	4b74      	ldr	r3, [pc, #464]	; (800db84 <HAL_RCC_OscConfig+0x4d8>)
 800d9b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9b4:	4a73      	ldr	r2, [pc, #460]	; (800db84 <HAL_RCC_OscConfig+0x4d8>)
 800d9b6:	f043 0301 	orr.w	r3, r3, #1
 800d9ba:	6713      	str	r3, [r2, #112]	; 0x70
 800d9bc:	e00b      	b.n	800d9d6 <HAL_RCC_OscConfig+0x32a>
 800d9be:	4b71      	ldr	r3, [pc, #452]	; (800db84 <HAL_RCC_OscConfig+0x4d8>)
 800d9c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9c2:	4a70      	ldr	r2, [pc, #448]	; (800db84 <HAL_RCC_OscConfig+0x4d8>)
 800d9c4:	f023 0301 	bic.w	r3, r3, #1
 800d9c8:	6713      	str	r3, [r2, #112]	; 0x70
 800d9ca:	4b6e      	ldr	r3, [pc, #440]	; (800db84 <HAL_RCC_OscConfig+0x4d8>)
 800d9cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9ce:	4a6d      	ldr	r2, [pc, #436]	; (800db84 <HAL_RCC_OscConfig+0x4d8>)
 800d9d0:	f023 0304 	bic.w	r3, r3, #4
 800d9d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	689b      	ldr	r3, [r3, #8]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d015      	beq.n	800da0a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d9de:	f7fd fe29 	bl	800b634 <HAL_GetTick>
 800d9e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d9e4:	e00a      	b.n	800d9fc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d9e6:	f7fd fe25 	bl	800b634 <HAL_GetTick>
 800d9ea:	4602      	mov	r2, r0
 800d9ec:	693b      	ldr	r3, [r7, #16]
 800d9ee:	1ad3      	subs	r3, r2, r3
 800d9f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800d9f4:	4293      	cmp	r3, r2
 800d9f6:	d901      	bls.n	800d9fc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800d9f8:	2303      	movs	r3, #3
 800d9fa:	e0bc      	b.n	800db76 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d9fc:	4b61      	ldr	r3, [pc, #388]	; (800db84 <HAL_RCC_OscConfig+0x4d8>)
 800d9fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da00:	f003 0302 	and.w	r3, r3, #2
 800da04:	2b00      	cmp	r3, #0
 800da06:	d0ee      	beq.n	800d9e6 <HAL_RCC_OscConfig+0x33a>
 800da08:	e014      	b.n	800da34 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800da0a:	f7fd fe13 	bl	800b634 <HAL_GetTick>
 800da0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800da10:	e00a      	b.n	800da28 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800da12:	f7fd fe0f 	bl	800b634 <HAL_GetTick>
 800da16:	4602      	mov	r2, r0
 800da18:	693b      	ldr	r3, [r7, #16]
 800da1a:	1ad3      	subs	r3, r2, r3
 800da1c:	f241 3288 	movw	r2, #5000	; 0x1388
 800da20:	4293      	cmp	r3, r2
 800da22:	d901      	bls.n	800da28 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800da24:	2303      	movs	r3, #3
 800da26:	e0a6      	b.n	800db76 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800da28:	4b56      	ldr	r3, [pc, #344]	; (800db84 <HAL_RCC_OscConfig+0x4d8>)
 800da2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da2c:	f003 0302 	and.w	r3, r3, #2
 800da30:	2b00      	cmp	r3, #0
 800da32:	d1ee      	bne.n	800da12 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800da34:	7dfb      	ldrb	r3, [r7, #23]
 800da36:	2b01      	cmp	r3, #1
 800da38:	d105      	bne.n	800da46 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800da3a:	4b52      	ldr	r3, [pc, #328]	; (800db84 <HAL_RCC_OscConfig+0x4d8>)
 800da3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da3e:	4a51      	ldr	r2, [pc, #324]	; (800db84 <HAL_RCC_OscConfig+0x4d8>)
 800da40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800da44:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	699b      	ldr	r3, [r3, #24]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	f000 8092 	beq.w	800db74 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800da50:	4b4c      	ldr	r3, [pc, #304]	; (800db84 <HAL_RCC_OscConfig+0x4d8>)
 800da52:	689b      	ldr	r3, [r3, #8]
 800da54:	f003 030c 	and.w	r3, r3, #12
 800da58:	2b08      	cmp	r3, #8
 800da5a:	d05c      	beq.n	800db16 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	699b      	ldr	r3, [r3, #24]
 800da60:	2b02      	cmp	r3, #2
 800da62:	d141      	bne.n	800dae8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800da64:	4b48      	ldr	r3, [pc, #288]	; (800db88 <HAL_RCC_OscConfig+0x4dc>)
 800da66:	2200      	movs	r2, #0
 800da68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800da6a:	f7fd fde3 	bl	800b634 <HAL_GetTick>
 800da6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800da70:	e008      	b.n	800da84 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800da72:	f7fd fddf 	bl	800b634 <HAL_GetTick>
 800da76:	4602      	mov	r2, r0
 800da78:	693b      	ldr	r3, [r7, #16]
 800da7a:	1ad3      	subs	r3, r2, r3
 800da7c:	2b02      	cmp	r3, #2
 800da7e:	d901      	bls.n	800da84 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800da80:	2303      	movs	r3, #3
 800da82:	e078      	b.n	800db76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800da84:	4b3f      	ldr	r3, [pc, #252]	; (800db84 <HAL_RCC_OscConfig+0x4d8>)
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d1f0      	bne.n	800da72 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	69da      	ldr	r2, [r3, #28]
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	6a1b      	ldr	r3, [r3, #32]
 800da98:	431a      	orrs	r2, r3
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da9e:	019b      	lsls	r3, r3, #6
 800daa0:	431a      	orrs	r2, r3
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800daa6:	085b      	lsrs	r3, r3, #1
 800daa8:	3b01      	subs	r3, #1
 800daaa:	041b      	lsls	r3, r3, #16
 800daac:	431a      	orrs	r2, r3
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dab2:	061b      	lsls	r3, r3, #24
 800dab4:	4933      	ldr	r1, [pc, #204]	; (800db84 <HAL_RCC_OscConfig+0x4d8>)
 800dab6:	4313      	orrs	r3, r2
 800dab8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800daba:	4b33      	ldr	r3, [pc, #204]	; (800db88 <HAL_RCC_OscConfig+0x4dc>)
 800dabc:	2201      	movs	r2, #1
 800dabe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dac0:	f7fd fdb8 	bl	800b634 <HAL_GetTick>
 800dac4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dac6:	e008      	b.n	800dada <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800dac8:	f7fd fdb4 	bl	800b634 <HAL_GetTick>
 800dacc:	4602      	mov	r2, r0
 800dace:	693b      	ldr	r3, [r7, #16]
 800dad0:	1ad3      	subs	r3, r2, r3
 800dad2:	2b02      	cmp	r3, #2
 800dad4:	d901      	bls.n	800dada <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800dad6:	2303      	movs	r3, #3
 800dad8:	e04d      	b.n	800db76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dada:	4b2a      	ldr	r3, [pc, #168]	; (800db84 <HAL_RCC_OscConfig+0x4d8>)
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d0f0      	beq.n	800dac8 <HAL_RCC_OscConfig+0x41c>
 800dae6:	e045      	b.n	800db74 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dae8:	4b27      	ldr	r3, [pc, #156]	; (800db88 <HAL_RCC_OscConfig+0x4dc>)
 800daea:	2200      	movs	r2, #0
 800daec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800daee:	f7fd fda1 	bl	800b634 <HAL_GetTick>
 800daf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800daf4:	e008      	b.n	800db08 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800daf6:	f7fd fd9d 	bl	800b634 <HAL_GetTick>
 800dafa:	4602      	mov	r2, r0
 800dafc:	693b      	ldr	r3, [r7, #16]
 800dafe:	1ad3      	subs	r3, r2, r3
 800db00:	2b02      	cmp	r3, #2
 800db02:	d901      	bls.n	800db08 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800db04:	2303      	movs	r3, #3
 800db06:	e036      	b.n	800db76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800db08:	4b1e      	ldr	r3, [pc, #120]	; (800db84 <HAL_RCC_OscConfig+0x4d8>)
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800db10:	2b00      	cmp	r3, #0
 800db12:	d1f0      	bne.n	800daf6 <HAL_RCC_OscConfig+0x44a>
 800db14:	e02e      	b.n	800db74 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	699b      	ldr	r3, [r3, #24]
 800db1a:	2b01      	cmp	r3, #1
 800db1c:	d101      	bne.n	800db22 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800db1e:	2301      	movs	r3, #1
 800db20:	e029      	b.n	800db76 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800db22:	4b18      	ldr	r3, [pc, #96]	; (800db84 <HAL_RCC_OscConfig+0x4d8>)
 800db24:	685b      	ldr	r3, [r3, #4]
 800db26:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	69db      	ldr	r3, [r3, #28]
 800db32:	429a      	cmp	r2, r3
 800db34:	d11c      	bne.n	800db70 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800db40:	429a      	cmp	r2, r3
 800db42:	d115      	bne.n	800db70 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800db44:	68fa      	ldr	r2, [r7, #12]
 800db46:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800db4a:	4013      	ands	r3, r2
 800db4c:	687a      	ldr	r2, [r7, #4]
 800db4e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800db50:	4293      	cmp	r3, r2
 800db52:	d10d      	bne.n	800db70 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800db5e:	429a      	cmp	r2, r3
 800db60:	d106      	bne.n	800db70 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800db6c:	429a      	cmp	r2, r3
 800db6e:	d001      	beq.n	800db74 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800db70:	2301      	movs	r3, #1
 800db72:	e000      	b.n	800db76 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800db74:	2300      	movs	r3, #0
}
 800db76:	4618      	mov	r0, r3
 800db78:	3718      	adds	r7, #24
 800db7a:	46bd      	mov	sp, r7
 800db7c:	bd80      	pop	{r7, pc}
 800db7e:	bf00      	nop
 800db80:	40007000 	.word	0x40007000
 800db84:	40023800 	.word	0x40023800
 800db88:	42470060 	.word	0x42470060

0800db8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b084      	sub	sp, #16
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
 800db94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d101      	bne.n	800dba0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800db9c:	2301      	movs	r3, #1
 800db9e:	e0cc      	b.n	800dd3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800dba0:	4b68      	ldr	r3, [pc, #416]	; (800dd44 <HAL_RCC_ClockConfig+0x1b8>)
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	f003 030f 	and.w	r3, r3, #15
 800dba8:	683a      	ldr	r2, [r7, #0]
 800dbaa:	429a      	cmp	r2, r3
 800dbac:	d90c      	bls.n	800dbc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dbae:	4b65      	ldr	r3, [pc, #404]	; (800dd44 <HAL_RCC_ClockConfig+0x1b8>)
 800dbb0:	683a      	ldr	r2, [r7, #0]
 800dbb2:	b2d2      	uxtb	r2, r2
 800dbb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800dbb6:	4b63      	ldr	r3, [pc, #396]	; (800dd44 <HAL_RCC_ClockConfig+0x1b8>)
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	f003 030f 	and.w	r3, r3, #15
 800dbbe:	683a      	ldr	r2, [r7, #0]
 800dbc0:	429a      	cmp	r2, r3
 800dbc2:	d001      	beq.n	800dbc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800dbc4:	2301      	movs	r3, #1
 800dbc6:	e0b8      	b.n	800dd3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	f003 0302 	and.w	r3, r3, #2
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d020      	beq.n	800dc16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	f003 0304 	and.w	r3, r3, #4
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d005      	beq.n	800dbec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800dbe0:	4b59      	ldr	r3, [pc, #356]	; (800dd48 <HAL_RCC_ClockConfig+0x1bc>)
 800dbe2:	689b      	ldr	r3, [r3, #8]
 800dbe4:	4a58      	ldr	r2, [pc, #352]	; (800dd48 <HAL_RCC_ClockConfig+0x1bc>)
 800dbe6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800dbea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	f003 0308 	and.w	r3, r3, #8
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d005      	beq.n	800dc04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800dbf8:	4b53      	ldr	r3, [pc, #332]	; (800dd48 <HAL_RCC_ClockConfig+0x1bc>)
 800dbfa:	689b      	ldr	r3, [r3, #8]
 800dbfc:	4a52      	ldr	r2, [pc, #328]	; (800dd48 <HAL_RCC_ClockConfig+0x1bc>)
 800dbfe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800dc02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800dc04:	4b50      	ldr	r3, [pc, #320]	; (800dd48 <HAL_RCC_ClockConfig+0x1bc>)
 800dc06:	689b      	ldr	r3, [r3, #8]
 800dc08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	689b      	ldr	r3, [r3, #8]
 800dc10:	494d      	ldr	r1, [pc, #308]	; (800dd48 <HAL_RCC_ClockConfig+0x1bc>)
 800dc12:	4313      	orrs	r3, r2
 800dc14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	f003 0301 	and.w	r3, r3, #1
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d044      	beq.n	800dcac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	685b      	ldr	r3, [r3, #4]
 800dc26:	2b01      	cmp	r3, #1
 800dc28:	d107      	bne.n	800dc3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800dc2a:	4b47      	ldr	r3, [pc, #284]	; (800dd48 <HAL_RCC_ClockConfig+0x1bc>)
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d119      	bne.n	800dc6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800dc36:	2301      	movs	r3, #1
 800dc38:	e07f      	b.n	800dd3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	685b      	ldr	r3, [r3, #4]
 800dc3e:	2b02      	cmp	r3, #2
 800dc40:	d003      	beq.n	800dc4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800dc46:	2b03      	cmp	r3, #3
 800dc48:	d107      	bne.n	800dc5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dc4a:	4b3f      	ldr	r3, [pc, #252]	; (800dd48 <HAL_RCC_ClockConfig+0x1bc>)
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d109      	bne.n	800dc6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800dc56:	2301      	movs	r3, #1
 800dc58:	e06f      	b.n	800dd3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dc5a:	4b3b      	ldr	r3, [pc, #236]	; (800dd48 <HAL_RCC_ClockConfig+0x1bc>)
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	f003 0302 	and.w	r3, r3, #2
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d101      	bne.n	800dc6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800dc66:	2301      	movs	r3, #1
 800dc68:	e067      	b.n	800dd3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800dc6a:	4b37      	ldr	r3, [pc, #220]	; (800dd48 <HAL_RCC_ClockConfig+0x1bc>)
 800dc6c:	689b      	ldr	r3, [r3, #8]
 800dc6e:	f023 0203 	bic.w	r2, r3, #3
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	685b      	ldr	r3, [r3, #4]
 800dc76:	4934      	ldr	r1, [pc, #208]	; (800dd48 <HAL_RCC_ClockConfig+0x1bc>)
 800dc78:	4313      	orrs	r3, r2
 800dc7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800dc7c:	f7fd fcda 	bl	800b634 <HAL_GetTick>
 800dc80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dc82:	e00a      	b.n	800dc9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800dc84:	f7fd fcd6 	bl	800b634 <HAL_GetTick>
 800dc88:	4602      	mov	r2, r0
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	1ad3      	subs	r3, r2, r3
 800dc8e:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc92:	4293      	cmp	r3, r2
 800dc94:	d901      	bls.n	800dc9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800dc96:	2303      	movs	r3, #3
 800dc98:	e04f      	b.n	800dd3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dc9a:	4b2b      	ldr	r3, [pc, #172]	; (800dd48 <HAL_RCC_ClockConfig+0x1bc>)
 800dc9c:	689b      	ldr	r3, [r3, #8]
 800dc9e:	f003 020c 	and.w	r2, r3, #12
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	685b      	ldr	r3, [r3, #4]
 800dca6:	009b      	lsls	r3, r3, #2
 800dca8:	429a      	cmp	r2, r3
 800dcaa:	d1eb      	bne.n	800dc84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800dcac:	4b25      	ldr	r3, [pc, #148]	; (800dd44 <HAL_RCC_ClockConfig+0x1b8>)
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	f003 030f 	and.w	r3, r3, #15
 800dcb4:	683a      	ldr	r2, [r7, #0]
 800dcb6:	429a      	cmp	r2, r3
 800dcb8:	d20c      	bcs.n	800dcd4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dcba:	4b22      	ldr	r3, [pc, #136]	; (800dd44 <HAL_RCC_ClockConfig+0x1b8>)
 800dcbc:	683a      	ldr	r2, [r7, #0]
 800dcbe:	b2d2      	uxtb	r2, r2
 800dcc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800dcc2:	4b20      	ldr	r3, [pc, #128]	; (800dd44 <HAL_RCC_ClockConfig+0x1b8>)
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	f003 030f 	and.w	r3, r3, #15
 800dcca:	683a      	ldr	r2, [r7, #0]
 800dccc:	429a      	cmp	r2, r3
 800dcce:	d001      	beq.n	800dcd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800dcd0:	2301      	movs	r3, #1
 800dcd2:	e032      	b.n	800dd3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	f003 0304 	and.w	r3, r3, #4
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d008      	beq.n	800dcf2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800dce0:	4b19      	ldr	r3, [pc, #100]	; (800dd48 <HAL_RCC_ClockConfig+0x1bc>)
 800dce2:	689b      	ldr	r3, [r3, #8]
 800dce4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	68db      	ldr	r3, [r3, #12]
 800dcec:	4916      	ldr	r1, [pc, #88]	; (800dd48 <HAL_RCC_ClockConfig+0x1bc>)
 800dcee:	4313      	orrs	r3, r2
 800dcf0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	f003 0308 	and.w	r3, r3, #8
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d009      	beq.n	800dd12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800dcfe:	4b12      	ldr	r3, [pc, #72]	; (800dd48 <HAL_RCC_ClockConfig+0x1bc>)
 800dd00:	689b      	ldr	r3, [r3, #8]
 800dd02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	691b      	ldr	r3, [r3, #16]
 800dd0a:	00db      	lsls	r3, r3, #3
 800dd0c:	490e      	ldr	r1, [pc, #56]	; (800dd48 <HAL_RCC_ClockConfig+0x1bc>)
 800dd0e:	4313      	orrs	r3, r2
 800dd10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800dd12:	f000 f821 	bl	800dd58 <HAL_RCC_GetSysClockFreq>
 800dd16:	4601      	mov	r1, r0
 800dd18:	4b0b      	ldr	r3, [pc, #44]	; (800dd48 <HAL_RCC_ClockConfig+0x1bc>)
 800dd1a:	689b      	ldr	r3, [r3, #8]
 800dd1c:	091b      	lsrs	r3, r3, #4
 800dd1e:	f003 030f 	and.w	r3, r3, #15
 800dd22:	4a0a      	ldr	r2, [pc, #40]	; (800dd4c <HAL_RCC_ClockConfig+0x1c0>)
 800dd24:	5cd3      	ldrb	r3, [r2, r3]
 800dd26:	fa21 f303 	lsr.w	r3, r1, r3
 800dd2a:	4a09      	ldr	r2, [pc, #36]	; (800dd50 <HAL_RCC_ClockConfig+0x1c4>)
 800dd2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800dd2e:	4b09      	ldr	r3, [pc, #36]	; (800dd54 <HAL_RCC_ClockConfig+0x1c8>)
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	4618      	mov	r0, r3
 800dd34:	f7fd f984 	bl	800b040 <HAL_InitTick>

  return HAL_OK;
 800dd38:	2300      	movs	r3, #0
}
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	3710      	adds	r7, #16
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	bd80      	pop	{r7, pc}
 800dd42:	bf00      	nop
 800dd44:	40023c00 	.word	0x40023c00
 800dd48:	40023800 	.word	0x40023800
 800dd4c:	0801b588 	.word	0x0801b588
 800dd50:	20000828 	.word	0x20000828
 800dd54:	2000082c 	.word	0x2000082c

0800dd58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800dd58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd5a:	b085      	sub	sp, #20
 800dd5c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800dd5e:	2300      	movs	r3, #0
 800dd60:	607b      	str	r3, [r7, #4]
 800dd62:	2300      	movs	r3, #0
 800dd64:	60fb      	str	r3, [r7, #12]
 800dd66:	2300      	movs	r3, #0
 800dd68:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800dd6e:	4b63      	ldr	r3, [pc, #396]	; (800defc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800dd70:	689b      	ldr	r3, [r3, #8]
 800dd72:	f003 030c 	and.w	r3, r3, #12
 800dd76:	2b04      	cmp	r3, #4
 800dd78:	d007      	beq.n	800dd8a <HAL_RCC_GetSysClockFreq+0x32>
 800dd7a:	2b08      	cmp	r3, #8
 800dd7c:	d008      	beq.n	800dd90 <HAL_RCC_GetSysClockFreq+0x38>
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	f040 80b4 	bne.w	800deec <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800dd84:	4b5e      	ldr	r3, [pc, #376]	; (800df00 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800dd86:	60bb      	str	r3, [r7, #8]
       break;
 800dd88:	e0b3      	b.n	800def2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800dd8a:	4b5e      	ldr	r3, [pc, #376]	; (800df04 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800dd8c:	60bb      	str	r3, [r7, #8]
      break;
 800dd8e:	e0b0      	b.n	800def2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800dd90:	4b5a      	ldr	r3, [pc, #360]	; (800defc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800dd92:	685b      	ldr	r3, [r3, #4]
 800dd94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dd98:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800dd9a:	4b58      	ldr	r3, [pc, #352]	; (800defc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800dd9c:	685b      	ldr	r3, [r3, #4]
 800dd9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d04a      	beq.n	800de3c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800dda6:	4b55      	ldr	r3, [pc, #340]	; (800defc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800dda8:	685b      	ldr	r3, [r3, #4]
 800ddaa:	099b      	lsrs	r3, r3, #6
 800ddac:	f04f 0400 	mov.w	r4, #0
 800ddb0:	f240 11ff 	movw	r1, #511	; 0x1ff
 800ddb4:	f04f 0200 	mov.w	r2, #0
 800ddb8:	ea03 0501 	and.w	r5, r3, r1
 800ddbc:	ea04 0602 	and.w	r6, r4, r2
 800ddc0:	4629      	mov	r1, r5
 800ddc2:	4632      	mov	r2, r6
 800ddc4:	f04f 0300 	mov.w	r3, #0
 800ddc8:	f04f 0400 	mov.w	r4, #0
 800ddcc:	0154      	lsls	r4, r2, #5
 800ddce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800ddd2:	014b      	lsls	r3, r1, #5
 800ddd4:	4619      	mov	r1, r3
 800ddd6:	4622      	mov	r2, r4
 800ddd8:	1b49      	subs	r1, r1, r5
 800ddda:	eb62 0206 	sbc.w	r2, r2, r6
 800ddde:	f04f 0300 	mov.w	r3, #0
 800dde2:	f04f 0400 	mov.w	r4, #0
 800dde6:	0194      	lsls	r4, r2, #6
 800dde8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800ddec:	018b      	lsls	r3, r1, #6
 800ddee:	1a5b      	subs	r3, r3, r1
 800ddf0:	eb64 0402 	sbc.w	r4, r4, r2
 800ddf4:	f04f 0100 	mov.w	r1, #0
 800ddf8:	f04f 0200 	mov.w	r2, #0
 800ddfc:	00e2      	lsls	r2, r4, #3
 800ddfe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800de02:	00d9      	lsls	r1, r3, #3
 800de04:	460b      	mov	r3, r1
 800de06:	4614      	mov	r4, r2
 800de08:	195b      	adds	r3, r3, r5
 800de0a:	eb44 0406 	adc.w	r4, r4, r6
 800de0e:	f04f 0100 	mov.w	r1, #0
 800de12:	f04f 0200 	mov.w	r2, #0
 800de16:	0262      	lsls	r2, r4, #9
 800de18:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800de1c:	0259      	lsls	r1, r3, #9
 800de1e:	460b      	mov	r3, r1
 800de20:	4614      	mov	r4, r2
 800de22:	4618      	mov	r0, r3
 800de24:	4621      	mov	r1, r4
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	f04f 0400 	mov.w	r4, #0
 800de2c:	461a      	mov	r2, r3
 800de2e:	4623      	mov	r3, r4
 800de30:	f7f2 ff2a 	bl	8000c88 <__aeabi_uldivmod>
 800de34:	4603      	mov	r3, r0
 800de36:	460c      	mov	r4, r1
 800de38:	60fb      	str	r3, [r7, #12]
 800de3a:	e049      	b.n	800ded0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800de3c:	4b2f      	ldr	r3, [pc, #188]	; (800defc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800de3e:	685b      	ldr	r3, [r3, #4]
 800de40:	099b      	lsrs	r3, r3, #6
 800de42:	f04f 0400 	mov.w	r4, #0
 800de46:	f240 11ff 	movw	r1, #511	; 0x1ff
 800de4a:	f04f 0200 	mov.w	r2, #0
 800de4e:	ea03 0501 	and.w	r5, r3, r1
 800de52:	ea04 0602 	and.w	r6, r4, r2
 800de56:	4629      	mov	r1, r5
 800de58:	4632      	mov	r2, r6
 800de5a:	f04f 0300 	mov.w	r3, #0
 800de5e:	f04f 0400 	mov.w	r4, #0
 800de62:	0154      	lsls	r4, r2, #5
 800de64:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800de68:	014b      	lsls	r3, r1, #5
 800de6a:	4619      	mov	r1, r3
 800de6c:	4622      	mov	r2, r4
 800de6e:	1b49      	subs	r1, r1, r5
 800de70:	eb62 0206 	sbc.w	r2, r2, r6
 800de74:	f04f 0300 	mov.w	r3, #0
 800de78:	f04f 0400 	mov.w	r4, #0
 800de7c:	0194      	lsls	r4, r2, #6
 800de7e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800de82:	018b      	lsls	r3, r1, #6
 800de84:	1a5b      	subs	r3, r3, r1
 800de86:	eb64 0402 	sbc.w	r4, r4, r2
 800de8a:	f04f 0100 	mov.w	r1, #0
 800de8e:	f04f 0200 	mov.w	r2, #0
 800de92:	00e2      	lsls	r2, r4, #3
 800de94:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800de98:	00d9      	lsls	r1, r3, #3
 800de9a:	460b      	mov	r3, r1
 800de9c:	4614      	mov	r4, r2
 800de9e:	195b      	adds	r3, r3, r5
 800dea0:	eb44 0406 	adc.w	r4, r4, r6
 800dea4:	f04f 0100 	mov.w	r1, #0
 800dea8:	f04f 0200 	mov.w	r2, #0
 800deac:	02a2      	lsls	r2, r4, #10
 800deae:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800deb2:	0299      	lsls	r1, r3, #10
 800deb4:	460b      	mov	r3, r1
 800deb6:	4614      	mov	r4, r2
 800deb8:	4618      	mov	r0, r3
 800deba:	4621      	mov	r1, r4
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	f04f 0400 	mov.w	r4, #0
 800dec2:	461a      	mov	r2, r3
 800dec4:	4623      	mov	r3, r4
 800dec6:	f7f2 fedf 	bl	8000c88 <__aeabi_uldivmod>
 800deca:	4603      	mov	r3, r0
 800decc:	460c      	mov	r4, r1
 800dece:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800ded0:	4b0a      	ldr	r3, [pc, #40]	; (800defc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800ded2:	685b      	ldr	r3, [r3, #4]
 800ded4:	0c1b      	lsrs	r3, r3, #16
 800ded6:	f003 0303 	and.w	r3, r3, #3
 800deda:	3301      	adds	r3, #1
 800dedc:	005b      	lsls	r3, r3, #1
 800dede:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800dee0:	68fa      	ldr	r2, [r7, #12]
 800dee2:	683b      	ldr	r3, [r7, #0]
 800dee4:	fbb2 f3f3 	udiv	r3, r2, r3
 800dee8:	60bb      	str	r3, [r7, #8]
      break;
 800deea:	e002      	b.n	800def2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800deec:	4b04      	ldr	r3, [pc, #16]	; (800df00 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800deee:	60bb      	str	r3, [r7, #8]
      break;
 800def0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800def2:	68bb      	ldr	r3, [r7, #8]
}
 800def4:	4618      	mov	r0, r3
 800def6:	3714      	adds	r7, #20
 800def8:	46bd      	mov	sp, r7
 800defa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800defc:	40023800 	.word	0x40023800
 800df00:	00f42400 	.word	0x00f42400
 800df04:	007a1200 	.word	0x007a1200

0800df08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800df08:	b480      	push	{r7}
 800df0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800df0c:	4b03      	ldr	r3, [pc, #12]	; (800df1c <HAL_RCC_GetHCLKFreq+0x14>)
 800df0e:	681b      	ldr	r3, [r3, #0]
}
 800df10:	4618      	mov	r0, r3
 800df12:	46bd      	mov	sp, r7
 800df14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df18:	4770      	bx	lr
 800df1a:	bf00      	nop
 800df1c:	20000828 	.word	0x20000828

0800df20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800df20:	b580      	push	{r7, lr}
 800df22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800df24:	f7ff fff0 	bl	800df08 <HAL_RCC_GetHCLKFreq>
 800df28:	4601      	mov	r1, r0
 800df2a:	4b05      	ldr	r3, [pc, #20]	; (800df40 <HAL_RCC_GetPCLK1Freq+0x20>)
 800df2c:	689b      	ldr	r3, [r3, #8]
 800df2e:	0a9b      	lsrs	r3, r3, #10
 800df30:	f003 0307 	and.w	r3, r3, #7
 800df34:	4a03      	ldr	r2, [pc, #12]	; (800df44 <HAL_RCC_GetPCLK1Freq+0x24>)
 800df36:	5cd3      	ldrb	r3, [r2, r3]
 800df38:	fa21 f303 	lsr.w	r3, r1, r3
}
 800df3c:	4618      	mov	r0, r3
 800df3e:	bd80      	pop	{r7, pc}
 800df40:	40023800 	.word	0x40023800
 800df44:	0801b598 	.word	0x0801b598

0800df48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800df4c:	f7ff ffdc 	bl	800df08 <HAL_RCC_GetHCLKFreq>
 800df50:	4601      	mov	r1, r0
 800df52:	4b05      	ldr	r3, [pc, #20]	; (800df68 <HAL_RCC_GetPCLK2Freq+0x20>)
 800df54:	689b      	ldr	r3, [r3, #8]
 800df56:	0b5b      	lsrs	r3, r3, #13
 800df58:	f003 0307 	and.w	r3, r3, #7
 800df5c:	4a03      	ldr	r2, [pc, #12]	; (800df6c <HAL_RCC_GetPCLK2Freq+0x24>)
 800df5e:	5cd3      	ldrb	r3, [r2, r3]
 800df60:	fa21 f303 	lsr.w	r3, r1, r3
}
 800df64:	4618      	mov	r0, r3
 800df66:	bd80      	pop	{r7, pc}
 800df68:	40023800 	.word	0x40023800
 800df6c:	0801b598 	.word	0x0801b598

0800df70 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800df70:	b480      	push	{r7}
 800df72:	b083      	sub	sp, #12
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
 800df78:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	220f      	movs	r2, #15
 800df7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800df80:	4b12      	ldr	r3, [pc, #72]	; (800dfcc <HAL_RCC_GetClockConfig+0x5c>)
 800df82:	689b      	ldr	r3, [r3, #8]
 800df84:	f003 0203 	and.w	r2, r3, #3
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800df8c:	4b0f      	ldr	r3, [pc, #60]	; (800dfcc <HAL_RCC_GetClockConfig+0x5c>)
 800df8e:	689b      	ldr	r3, [r3, #8]
 800df90:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800df98:	4b0c      	ldr	r3, [pc, #48]	; (800dfcc <HAL_RCC_GetClockConfig+0x5c>)
 800df9a:	689b      	ldr	r3, [r3, #8]
 800df9c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800dfa4:	4b09      	ldr	r3, [pc, #36]	; (800dfcc <HAL_RCC_GetClockConfig+0x5c>)
 800dfa6:	689b      	ldr	r3, [r3, #8]
 800dfa8:	08db      	lsrs	r3, r3, #3
 800dfaa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800dfb2:	4b07      	ldr	r3, [pc, #28]	; (800dfd0 <HAL_RCC_GetClockConfig+0x60>)
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	f003 020f 	and.w	r2, r3, #15
 800dfba:	683b      	ldr	r3, [r7, #0]
 800dfbc:	601a      	str	r2, [r3, #0]
}
 800dfbe:	bf00      	nop
 800dfc0:	370c      	adds	r7, #12
 800dfc2:	46bd      	mov	sp, r7
 800dfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc8:	4770      	bx	lr
 800dfca:	bf00      	nop
 800dfcc:	40023800 	.word	0x40023800
 800dfd0:	40023c00 	.word	0x40023c00

0800dfd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800dfd4:	b580      	push	{r7, lr}
 800dfd6:	b082      	sub	sp, #8
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d101      	bne.n	800dfe6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800dfe2:	2301      	movs	r3, #1
 800dfe4:	e01d      	b.n	800e022 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dfec:	b2db      	uxtb	r3, r3
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d106      	bne.n	800e000 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	2200      	movs	r2, #0
 800dff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800dffa:	6878      	ldr	r0, [r7, #4]
 800dffc:	f7fd f9aa 	bl	800b354 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	2202      	movs	r2, #2
 800e004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681a      	ldr	r2, [r3, #0]
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	3304      	adds	r3, #4
 800e010:	4619      	mov	r1, r3
 800e012:	4610      	mov	r0, r2
 800e014:	f000 fa38 	bl	800e488 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	2201      	movs	r2, #1
 800e01c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e020:	2300      	movs	r3, #0
}
 800e022:	4618      	mov	r0, r3
 800e024:	3708      	adds	r7, #8
 800e026:	46bd      	mov	sp, r7
 800e028:	bd80      	pop	{r7, pc}

0800e02a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800e02a:	b480      	push	{r7}
 800e02c:	b085      	sub	sp, #20
 800e02e:	af00      	add	r7, sp, #0
 800e030:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	2202      	movs	r2, #2
 800e036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	689b      	ldr	r3, [r3, #8]
 800e040:	f003 0307 	and.w	r3, r3, #7
 800e044:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	2b06      	cmp	r3, #6
 800e04a:	d007      	beq.n	800e05c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	681a      	ldr	r2, [r3, #0]
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	f042 0201 	orr.w	r2, r2, #1
 800e05a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	2201      	movs	r2, #1
 800e060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800e064:	2300      	movs	r3, #0
}
 800e066:	4618      	mov	r0, r3
 800e068:	3714      	adds	r7, #20
 800e06a:	46bd      	mov	sp, r7
 800e06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e070:	4770      	bx	lr

0800e072 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e072:	b480      	push	{r7}
 800e074:	b085      	sub	sp, #20
 800e076:	af00      	add	r7, sp, #0
 800e078:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	68da      	ldr	r2, [r3, #12]
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	f042 0201 	orr.w	r2, r2, #1
 800e088:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	689b      	ldr	r3, [r3, #8]
 800e090:	f003 0307 	and.w	r3, r3, #7
 800e094:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	2b06      	cmp	r3, #6
 800e09a:	d007      	beq.n	800e0ac <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	681a      	ldr	r2, [r3, #0]
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	f042 0201 	orr.w	r2, r2, #1
 800e0aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e0ac:	2300      	movs	r3, #0
}
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	3714      	adds	r7, #20
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b8:	4770      	bx	lr

0800e0ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e0ba:	b580      	push	{r7, lr}
 800e0bc:	b082      	sub	sp, #8
 800e0be:	af00      	add	r7, sp, #0
 800e0c0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	691b      	ldr	r3, [r3, #16]
 800e0c8:	f003 0302 	and.w	r3, r3, #2
 800e0cc:	2b02      	cmp	r3, #2
 800e0ce:	d122      	bne.n	800e116 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	68db      	ldr	r3, [r3, #12]
 800e0d6:	f003 0302 	and.w	r3, r3, #2
 800e0da:	2b02      	cmp	r3, #2
 800e0dc:	d11b      	bne.n	800e116 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	f06f 0202 	mvn.w	r2, #2
 800e0e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	2201      	movs	r2, #1
 800e0ec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	699b      	ldr	r3, [r3, #24]
 800e0f4:	f003 0303 	and.w	r3, r3, #3
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d003      	beq.n	800e104 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e0fc:	6878      	ldr	r0, [r7, #4]
 800e0fe:	f000 f9a5 	bl	800e44c <HAL_TIM_IC_CaptureCallback>
 800e102:	e005      	b.n	800e110 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e104:	6878      	ldr	r0, [r7, #4]
 800e106:	f000 f997 	bl	800e438 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e10a:	6878      	ldr	r0, [r7, #4]
 800e10c:	f000 f9a8 	bl	800e460 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	2200      	movs	r2, #0
 800e114:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	691b      	ldr	r3, [r3, #16]
 800e11c:	f003 0304 	and.w	r3, r3, #4
 800e120:	2b04      	cmp	r3, #4
 800e122:	d122      	bne.n	800e16a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	68db      	ldr	r3, [r3, #12]
 800e12a:	f003 0304 	and.w	r3, r3, #4
 800e12e:	2b04      	cmp	r3, #4
 800e130:	d11b      	bne.n	800e16a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	f06f 0204 	mvn.w	r2, #4
 800e13a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	2202      	movs	r2, #2
 800e140:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	699b      	ldr	r3, [r3, #24]
 800e148:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d003      	beq.n	800e158 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e150:	6878      	ldr	r0, [r7, #4]
 800e152:	f000 f97b 	bl	800e44c <HAL_TIM_IC_CaptureCallback>
 800e156:	e005      	b.n	800e164 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e158:	6878      	ldr	r0, [r7, #4]
 800e15a:	f000 f96d 	bl	800e438 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e15e:	6878      	ldr	r0, [r7, #4]
 800e160:	f000 f97e 	bl	800e460 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	2200      	movs	r2, #0
 800e168:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	691b      	ldr	r3, [r3, #16]
 800e170:	f003 0308 	and.w	r3, r3, #8
 800e174:	2b08      	cmp	r3, #8
 800e176:	d122      	bne.n	800e1be <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	68db      	ldr	r3, [r3, #12]
 800e17e:	f003 0308 	and.w	r3, r3, #8
 800e182:	2b08      	cmp	r3, #8
 800e184:	d11b      	bne.n	800e1be <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	f06f 0208 	mvn.w	r2, #8
 800e18e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	2204      	movs	r2, #4
 800e194:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	69db      	ldr	r3, [r3, #28]
 800e19c:	f003 0303 	and.w	r3, r3, #3
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d003      	beq.n	800e1ac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e1a4:	6878      	ldr	r0, [r7, #4]
 800e1a6:	f000 f951 	bl	800e44c <HAL_TIM_IC_CaptureCallback>
 800e1aa:	e005      	b.n	800e1b8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e1ac:	6878      	ldr	r0, [r7, #4]
 800e1ae:	f000 f943 	bl	800e438 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e1b2:	6878      	ldr	r0, [r7, #4]
 800e1b4:	f000 f954 	bl	800e460 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	691b      	ldr	r3, [r3, #16]
 800e1c4:	f003 0310 	and.w	r3, r3, #16
 800e1c8:	2b10      	cmp	r3, #16
 800e1ca:	d122      	bne.n	800e212 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	68db      	ldr	r3, [r3, #12]
 800e1d2:	f003 0310 	and.w	r3, r3, #16
 800e1d6:	2b10      	cmp	r3, #16
 800e1d8:	d11b      	bne.n	800e212 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	f06f 0210 	mvn.w	r2, #16
 800e1e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	2208      	movs	r2, #8
 800e1e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	69db      	ldr	r3, [r3, #28]
 800e1f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d003      	beq.n	800e200 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e1f8:	6878      	ldr	r0, [r7, #4]
 800e1fa:	f000 f927 	bl	800e44c <HAL_TIM_IC_CaptureCallback>
 800e1fe:	e005      	b.n	800e20c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e200:	6878      	ldr	r0, [r7, #4]
 800e202:	f000 f919 	bl	800e438 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e206:	6878      	ldr	r0, [r7, #4]
 800e208:	f000 f92a 	bl	800e460 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	2200      	movs	r2, #0
 800e210:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	691b      	ldr	r3, [r3, #16]
 800e218:	f003 0301 	and.w	r3, r3, #1
 800e21c:	2b01      	cmp	r3, #1
 800e21e:	d10e      	bne.n	800e23e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	68db      	ldr	r3, [r3, #12]
 800e226:	f003 0301 	and.w	r3, r3, #1
 800e22a:	2b01      	cmp	r3, #1
 800e22c:	d107      	bne.n	800e23e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	f06f 0201 	mvn.w	r2, #1
 800e236:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e238:	6878      	ldr	r0, [r7, #4]
 800e23a:	f7f6 f93d 	bl	80044b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	691b      	ldr	r3, [r3, #16]
 800e244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e248:	2b80      	cmp	r3, #128	; 0x80
 800e24a:	d10e      	bne.n	800e26a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	68db      	ldr	r3, [r3, #12]
 800e252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e256:	2b80      	cmp	r3, #128	; 0x80
 800e258:	d107      	bne.n	800e26a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e262:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e264:	6878      	ldr	r0, [r7, #4]
 800e266:	f000 facf 	bl	800e808 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	691b      	ldr	r3, [r3, #16]
 800e270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e274:	2b40      	cmp	r3, #64	; 0x40
 800e276:	d10e      	bne.n	800e296 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	68db      	ldr	r3, [r3, #12]
 800e27e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e282:	2b40      	cmp	r3, #64	; 0x40
 800e284:	d107      	bne.n	800e296 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e28e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e290:	6878      	ldr	r0, [r7, #4]
 800e292:	f000 f8ef 	bl	800e474 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	691b      	ldr	r3, [r3, #16]
 800e29c:	f003 0320 	and.w	r3, r3, #32
 800e2a0:	2b20      	cmp	r3, #32
 800e2a2:	d10e      	bne.n	800e2c2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	68db      	ldr	r3, [r3, #12]
 800e2aa:	f003 0320 	and.w	r3, r3, #32
 800e2ae:	2b20      	cmp	r3, #32
 800e2b0:	d107      	bne.n	800e2c2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	f06f 0220 	mvn.w	r2, #32
 800e2ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e2bc:	6878      	ldr	r0, [r7, #4]
 800e2be:	f000 fa99 	bl	800e7f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e2c2:	bf00      	nop
 800e2c4:	3708      	adds	r7, #8
 800e2c6:	46bd      	mov	sp, r7
 800e2c8:	bd80      	pop	{r7, pc}

0800e2ca <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e2ca:	b580      	push	{r7, lr}
 800e2cc:	b084      	sub	sp, #16
 800e2ce:	af00      	add	r7, sp, #0
 800e2d0:	6078      	str	r0, [r7, #4]
 800e2d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e2da:	2b01      	cmp	r3, #1
 800e2dc:	d101      	bne.n	800e2e2 <HAL_TIM_ConfigClockSource+0x18>
 800e2de:	2302      	movs	r3, #2
 800e2e0:	e0a6      	b.n	800e430 <HAL_TIM_ConfigClockSource+0x166>
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	2201      	movs	r2, #1
 800e2e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	2202      	movs	r2, #2
 800e2ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	689b      	ldr	r3, [r3, #8]
 800e2f8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800e300:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e308:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	68fa      	ldr	r2, [r7, #12]
 800e310:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e312:	683b      	ldr	r3, [r7, #0]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	2b40      	cmp	r3, #64	; 0x40
 800e318:	d067      	beq.n	800e3ea <HAL_TIM_ConfigClockSource+0x120>
 800e31a:	2b40      	cmp	r3, #64	; 0x40
 800e31c:	d80b      	bhi.n	800e336 <HAL_TIM_ConfigClockSource+0x6c>
 800e31e:	2b10      	cmp	r3, #16
 800e320:	d073      	beq.n	800e40a <HAL_TIM_ConfigClockSource+0x140>
 800e322:	2b10      	cmp	r3, #16
 800e324:	d802      	bhi.n	800e32c <HAL_TIM_ConfigClockSource+0x62>
 800e326:	2b00      	cmp	r3, #0
 800e328:	d06f      	beq.n	800e40a <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800e32a:	e078      	b.n	800e41e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800e32c:	2b20      	cmp	r3, #32
 800e32e:	d06c      	beq.n	800e40a <HAL_TIM_ConfigClockSource+0x140>
 800e330:	2b30      	cmp	r3, #48	; 0x30
 800e332:	d06a      	beq.n	800e40a <HAL_TIM_ConfigClockSource+0x140>
      break;
 800e334:	e073      	b.n	800e41e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800e336:	2b70      	cmp	r3, #112	; 0x70
 800e338:	d00d      	beq.n	800e356 <HAL_TIM_ConfigClockSource+0x8c>
 800e33a:	2b70      	cmp	r3, #112	; 0x70
 800e33c:	d804      	bhi.n	800e348 <HAL_TIM_ConfigClockSource+0x7e>
 800e33e:	2b50      	cmp	r3, #80	; 0x50
 800e340:	d033      	beq.n	800e3aa <HAL_TIM_ConfigClockSource+0xe0>
 800e342:	2b60      	cmp	r3, #96	; 0x60
 800e344:	d041      	beq.n	800e3ca <HAL_TIM_ConfigClockSource+0x100>
      break;
 800e346:	e06a      	b.n	800e41e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800e348:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e34c:	d066      	beq.n	800e41c <HAL_TIM_ConfigClockSource+0x152>
 800e34e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e352:	d017      	beq.n	800e384 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800e354:	e063      	b.n	800e41e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	6818      	ldr	r0, [r3, #0]
 800e35a:	683b      	ldr	r3, [r7, #0]
 800e35c:	6899      	ldr	r1, [r3, #8]
 800e35e:	683b      	ldr	r3, [r7, #0]
 800e360:	685a      	ldr	r2, [r3, #4]
 800e362:	683b      	ldr	r3, [r7, #0]
 800e364:	68db      	ldr	r3, [r3, #12]
 800e366:	f000 f9a9 	bl	800e6bc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	689b      	ldr	r3, [r3, #8]
 800e370:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e378:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	68fa      	ldr	r2, [r7, #12]
 800e380:	609a      	str	r2, [r3, #8]
      break;
 800e382:	e04c      	b.n	800e41e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	6818      	ldr	r0, [r3, #0]
 800e388:	683b      	ldr	r3, [r7, #0]
 800e38a:	6899      	ldr	r1, [r3, #8]
 800e38c:	683b      	ldr	r3, [r7, #0]
 800e38e:	685a      	ldr	r2, [r3, #4]
 800e390:	683b      	ldr	r3, [r7, #0]
 800e392:	68db      	ldr	r3, [r3, #12]
 800e394:	f000 f992 	bl	800e6bc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	689a      	ldr	r2, [r3, #8]
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e3a6:	609a      	str	r2, [r3, #8]
      break;
 800e3a8:	e039      	b.n	800e41e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	6818      	ldr	r0, [r3, #0]
 800e3ae:	683b      	ldr	r3, [r7, #0]
 800e3b0:	6859      	ldr	r1, [r3, #4]
 800e3b2:	683b      	ldr	r3, [r7, #0]
 800e3b4:	68db      	ldr	r3, [r3, #12]
 800e3b6:	461a      	mov	r2, r3
 800e3b8:	f000 f906 	bl	800e5c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	2150      	movs	r1, #80	; 0x50
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	f000 f95f 	bl	800e686 <TIM_ITRx_SetConfig>
      break;
 800e3c8:	e029      	b.n	800e41e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	6818      	ldr	r0, [r3, #0]
 800e3ce:	683b      	ldr	r3, [r7, #0]
 800e3d0:	6859      	ldr	r1, [r3, #4]
 800e3d2:	683b      	ldr	r3, [r7, #0]
 800e3d4:	68db      	ldr	r3, [r3, #12]
 800e3d6:	461a      	mov	r2, r3
 800e3d8:	f000 f925 	bl	800e626 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	2160      	movs	r1, #96	; 0x60
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	f000 f94f 	bl	800e686 <TIM_ITRx_SetConfig>
      break;
 800e3e8:	e019      	b.n	800e41e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	6818      	ldr	r0, [r3, #0]
 800e3ee:	683b      	ldr	r3, [r7, #0]
 800e3f0:	6859      	ldr	r1, [r3, #4]
 800e3f2:	683b      	ldr	r3, [r7, #0]
 800e3f4:	68db      	ldr	r3, [r3, #12]
 800e3f6:	461a      	mov	r2, r3
 800e3f8:	f000 f8e6 	bl	800e5c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	2140      	movs	r1, #64	; 0x40
 800e402:	4618      	mov	r0, r3
 800e404:	f000 f93f 	bl	800e686 <TIM_ITRx_SetConfig>
      break;
 800e408:	e009      	b.n	800e41e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681a      	ldr	r2, [r3, #0]
 800e40e:	683b      	ldr	r3, [r7, #0]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	4619      	mov	r1, r3
 800e414:	4610      	mov	r0, r2
 800e416:	f000 f936 	bl	800e686 <TIM_ITRx_SetConfig>
      break;
 800e41a:	e000      	b.n	800e41e <HAL_TIM_ConfigClockSource+0x154>
      break;
 800e41c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	2201      	movs	r2, #1
 800e422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	2200      	movs	r2, #0
 800e42a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e42e:	2300      	movs	r3, #0
}
 800e430:	4618      	mov	r0, r3
 800e432:	3710      	adds	r7, #16
 800e434:	46bd      	mov	sp, r7
 800e436:	bd80      	pop	{r7, pc}

0800e438 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e438:	b480      	push	{r7}
 800e43a:	b083      	sub	sp, #12
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e440:	bf00      	nop
 800e442:	370c      	adds	r7, #12
 800e444:	46bd      	mov	sp, r7
 800e446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44a:	4770      	bx	lr

0800e44c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e44c:	b480      	push	{r7}
 800e44e:	b083      	sub	sp, #12
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e454:	bf00      	nop
 800e456:	370c      	adds	r7, #12
 800e458:	46bd      	mov	sp, r7
 800e45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e45e:	4770      	bx	lr

0800e460 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e460:	b480      	push	{r7}
 800e462:	b083      	sub	sp, #12
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e468:	bf00      	nop
 800e46a:	370c      	adds	r7, #12
 800e46c:	46bd      	mov	sp, r7
 800e46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e472:	4770      	bx	lr

0800e474 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e474:	b480      	push	{r7}
 800e476:	b083      	sub	sp, #12
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e47c:	bf00      	nop
 800e47e:	370c      	adds	r7, #12
 800e480:	46bd      	mov	sp, r7
 800e482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e486:	4770      	bx	lr

0800e488 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e488:	b480      	push	{r7}
 800e48a:	b085      	sub	sp, #20
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	6078      	str	r0, [r7, #4]
 800e490:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	4a40      	ldr	r2, [pc, #256]	; (800e59c <TIM_Base_SetConfig+0x114>)
 800e49c:	4293      	cmp	r3, r2
 800e49e:	d013      	beq.n	800e4c8 <TIM_Base_SetConfig+0x40>
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e4a6:	d00f      	beq.n	800e4c8 <TIM_Base_SetConfig+0x40>
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	4a3d      	ldr	r2, [pc, #244]	; (800e5a0 <TIM_Base_SetConfig+0x118>)
 800e4ac:	4293      	cmp	r3, r2
 800e4ae:	d00b      	beq.n	800e4c8 <TIM_Base_SetConfig+0x40>
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	4a3c      	ldr	r2, [pc, #240]	; (800e5a4 <TIM_Base_SetConfig+0x11c>)
 800e4b4:	4293      	cmp	r3, r2
 800e4b6:	d007      	beq.n	800e4c8 <TIM_Base_SetConfig+0x40>
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	4a3b      	ldr	r2, [pc, #236]	; (800e5a8 <TIM_Base_SetConfig+0x120>)
 800e4bc:	4293      	cmp	r3, r2
 800e4be:	d003      	beq.n	800e4c8 <TIM_Base_SetConfig+0x40>
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	4a3a      	ldr	r2, [pc, #232]	; (800e5ac <TIM_Base_SetConfig+0x124>)
 800e4c4:	4293      	cmp	r3, r2
 800e4c6:	d108      	bne.n	800e4da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e4ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e4d0:	683b      	ldr	r3, [r7, #0]
 800e4d2:	685b      	ldr	r3, [r3, #4]
 800e4d4:	68fa      	ldr	r2, [r7, #12]
 800e4d6:	4313      	orrs	r3, r2
 800e4d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	4a2f      	ldr	r2, [pc, #188]	; (800e59c <TIM_Base_SetConfig+0x114>)
 800e4de:	4293      	cmp	r3, r2
 800e4e0:	d02b      	beq.n	800e53a <TIM_Base_SetConfig+0xb2>
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e4e8:	d027      	beq.n	800e53a <TIM_Base_SetConfig+0xb2>
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	4a2c      	ldr	r2, [pc, #176]	; (800e5a0 <TIM_Base_SetConfig+0x118>)
 800e4ee:	4293      	cmp	r3, r2
 800e4f0:	d023      	beq.n	800e53a <TIM_Base_SetConfig+0xb2>
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	4a2b      	ldr	r2, [pc, #172]	; (800e5a4 <TIM_Base_SetConfig+0x11c>)
 800e4f6:	4293      	cmp	r3, r2
 800e4f8:	d01f      	beq.n	800e53a <TIM_Base_SetConfig+0xb2>
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	4a2a      	ldr	r2, [pc, #168]	; (800e5a8 <TIM_Base_SetConfig+0x120>)
 800e4fe:	4293      	cmp	r3, r2
 800e500:	d01b      	beq.n	800e53a <TIM_Base_SetConfig+0xb2>
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	4a29      	ldr	r2, [pc, #164]	; (800e5ac <TIM_Base_SetConfig+0x124>)
 800e506:	4293      	cmp	r3, r2
 800e508:	d017      	beq.n	800e53a <TIM_Base_SetConfig+0xb2>
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	4a28      	ldr	r2, [pc, #160]	; (800e5b0 <TIM_Base_SetConfig+0x128>)
 800e50e:	4293      	cmp	r3, r2
 800e510:	d013      	beq.n	800e53a <TIM_Base_SetConfig+0xb2>
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	4a27      	ldr	r2, [pc, #156]	; (800e5b4 <TIM_Base_SetConfig+0x12c>)
 800e516:	4293      	cmp	r3, r2
 800e518:	d00f      	beq.n	800e53a <TIM_Base_SetConfig+0xb2>
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	4a26      	ldr	r2, [pc, #152]	; (800e5b8 <TIM_Base_SetConfig+0x130>)
 800e51e:	4293      	cmp	r3, r2
 800e520:	d00b      	beq.n	800e53a <TIM_Base_SetConfig+0xb2>
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	4a25      	ldr	r2, [pc, #148]	; (800e5bc <TIM_Base_SetConfig+0x134>)
 800e526:	4293      	cmp	r3, r2
 800e528:	d007      	beq.n	800e53a <TIM_Base_SetConfig+0xb2>
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	4a24      	ldr	r2, [pc, #144]	; (800e5c0 <TIM_Base_SetConfig+0x138>)
 800e52e:	4293      	cmp	r3, r2
 800e530:	d003      	beq.n	800e53a <TIM_Base_SetConfig+0xb2>
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	4a23      	ldr	r2, [pc, #140]	; (800e5c4 <TIM_Base_SetConfig+0x13c>)
 800e536:	4293      	cmp	r3, r2
 800e538:	d108      	bne.n	800e54c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e540:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e542:	683b      	ldr	r3, [r7, #0]
 800e544:	68db      	ldr	r3, [r3, #12]
 800e546:	68fa      	ldr	r2, [r7, #12]
 800e548:	4313      	orrs	r3, r2
 800e54a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e552:	683b      	ldr	r3, [r7, #0]
 800e554:	695b      	ldr	r3, [r3, #20]
 800e556:	4313      	orrs	r3, r2
 800e558:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	68fa      	ldr	r2, [r7, #12]
 800e55e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e560:	683b      	ldr	r3, [r7, #0]
 800e562:	689a      	ldr	r2, [r3, #8]
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e568:	683b      	ldr	r3, [r7, #0]
 800e56a:	681a      	ldr	r2, [r3, #0]
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	4a0a      	ldr	r2, [pc, #40]	; (800e59c <TIM_Base_SetConfig+0x114>)
 800e574:	4293      	cmp	r3, r2
 800e576:	d003      	beq.n	800e580 <TIM_Base_SetConfig+0xf8>
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	4a0c      	ldr	r2, [pc, #48]	; (800e5ac <TIM_Base_SetConfig+0x124>)
 800e57c:	4293      	cmp	r3, r2
 800e57e:	d103      	bne.n	800e588 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e580:	683b      	ldr	r3, [r7, #0]
 800e582:	691a      	ldr	r2, [r3, #16]
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	2201      	movs	r2, #1
 800e58c:	615a      	str	r2, [r3, #20]
}
 800e58e:	bf00      	nop
 800e590:	3714      	adds	r7, #20
 800e592:	46bd      	mov	sp, r7
 800e594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e598:	4770      	bx	lr
 800e59a:	bf00      	nop
 800e59c:	40010000 	.word	0x40010000
 800e5a0:	40000400 	.word	0x40000400
 800e5a4:	40000800 	.word	0x40000800
 800e5a8:	40000c00 	.word	0x40000c00
 800e5ac:	40010400 	.word	0x40010400
 800e5b0:	40014000 	.word	0x40014000
 800e5b4:	40014400 	.word	0x40014400
 800e5b8:	40014800 	.word	0x40014800
 800e5bc:	40001800 	.word	0x40001800
 800e5c0:	40001c00 	.word	0x40001c00
 800e5c4:	40002000 	.word	0x40002000

0800e5c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e5c8:	b480      	push	{r7}
 800e5ca:	b087      	sub	sp, #28
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	60f8      	str	r0, [r7, #12]
 800e5d0:	60b9      	str	r1, [r7, #8]
 800e5d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	6a1b      	ldr	r3, [r3, #32]
 800e5d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	6a1b      	ldr	r3, [r3, #32]
 800e5de:	f023 0201 	bic.w	r2, r3, #1
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	699b      	ldr	r3, [r3, #24]
 800e5ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e5ec:	693b      	ldr	r3, [r7, #16]
 800e5ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e5f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	011b      	lsls	r3, r3, #4
 800e5f8:	693a      	ldr	r2, [r7, #16]
 800e5fa:	4313      	orrs	r3, r2
 800e5fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e5fe:	697b      	ldr	r3, [r7, #20]
 800e600:	f023 030a 	bic.w	r3, r3, #10
 800e604:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e606:	697a      	ldr	r2, [r7, #20]
 800e608:	68bb      	ldr	r3, [r7, #8]
 800e60a:	4313      	orrs	r3, r2
 800e60c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	693a      	ldr	r2, [r7, #16]
 800e612:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	697a      	ldr	r2, [r7, #20]
 800e618:	621a      	str	r2, [r3, #32]
}
 800e61a:	bf00      	nop
 800e61c:	371c      	adds	r7, #28
 800e61e:	46bd      	mov	sp, r7
 800e620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e624:	4770      	bx	lr

0800e626 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e626:	b480      	push	{r7}
 800e628:	b087      	sub	sp, #28
 800e62a:	af00      	add	r7, sp, #0
 800e62c:	60f8      	str	r0, [r7, #12]
 800e62e:	60b9      	str	r1, [r7, #8]
 800e630:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	6a1b      	ldr	r3, [r3, #32]
 800e636:	f023 0210 	bic.w	r2, r3, #16
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	699b      	ldr	r3, [r3, #24]
 800e642:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	6a1b      	ldr	r3, [r3, #32]
 800e648:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e64a:	697b      	ldr	r3, [r7, #20]
 800e64c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e650:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	031b      	lsls	r3, r3, #12
 800e656:	697a      	ldr	r2, [r7, #20]
 800e658:	4313      	orrs	r3, r2
 800e65a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e65c:	693b      	ldr	r3, [r7, #16]
 800e65e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e662:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e664:	68bb      	ldr	r3, [r7, #8]
 800e666:	011b      	lsls	r3, r3, #4
 800e668:	693a      	ldr	r2, [r7, #16]
 800e66a:	4313      	orrs	r3, r2
 800e66c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	697a      	ldr	r2, [r7, #20]
 800e672:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	693a      	ldr	r2, [r7, #16]
 800e678:	621a      	str	r2, [r3, #32]
}
 800e67a:	bf00      	nop
 800e67c:	371c      	adds	r7, #28
 800e67e:	46bd      	mov	sp, r7
 800e680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e684:	4770      	bx	lr

0800e686 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e686:	b480      	push	{r7}
 800e688:	b085      	sub	sp, #20
 800e68a:	af00      	add	r7, sp, #0
 800e68c:	6078      	str	r0, [r7, #4]
 800e68e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	689b      	ldr	r3, [r3, #8]
 800e694:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e69c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e69e:	683a      	ldr	r2, [r7, #0]
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	4313      	orrs	r3, r2
 800e6a4:	f043 0307 	orr.w	r3, r3, #7
 800e6a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	68fa      	ldr	r2, [r7, #12]
 800e6ae:	609a      	str	r2, [r3, #8]
}
 800e6b0:	bf00      	nop
 800e6b2:	3714      	adds	r7, #20
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ba:	4770      	bx	lr

0800e6bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e6bc:	b480      	push	{r7}
 800e6be:	b087      	sub	sp, #28
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	60f8      	str	r0, [r7, #12]
 800e6c4:	60b9      	str	r1, [r7, #8]
 800e6c6:	607a      	str	r2, [r7, #4]
 800e6c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	689b      	ldr	r3, [r3, #8]
 800e6ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e6d0:	697b      	ldr	r3, [r7, #20]
 800e6d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e6d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e6d8:	683b      	ldr	r3, [r7, #0]
 800e6da:	021a      	lsls	r2, r3, #8
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	431a      	orrs	r2, r3
 800e6e0:	68bb      	ldr	r3, [r7, #8]
 800e6e2:	4313      	orrs	r3, r2
 800e6e4:	697a      	ldr	r2, [r7, #20]
 800e6e6:	4313      	orrs	r3, r2
 800e6e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	697a      	ldr	r2, [r7, #20]
 800e6ee:	609a      	str	r2, [r3, #8]
}
 800e6f0:	bf00      	nop
 800e6f2:	371c      	adds	r7, #28
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fa:	4770      	bx	lr

0800e6fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e6fc:	b480      	push	{r7}
 800e6fe:	b085      	sub	sp, #20
 800e700:	af00      	add	r7, sp, #0
 800e702:	6078      	str	r0, [r7, #4]
 800e704:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e70c:	2b01      	cmp	r3, #1
 800e70e:	d101      	bne.n	800e714 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e710:	2302      	movs	r3, #2
 800e712:	e05a      	b.n	800e7ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	2201      	movs	r2, #1
 800e718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	2202      	movs	r2, #2
 800e720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	685b      	ldr	r3, [r3, #4]
 800e72a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	689b      	ldr	r3, [r3, #8]
 800e732:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e73a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e73c:	683b      	ldr	r3, [r7, #0]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	68fa      	ldr	r2, [r7, #12]
 800e742:	4313      	orrs	r3, r2
 800e744:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	68fa      	ldr	r2, [r7, #12]
 800e74c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	4a21      	ldr	r2, [pc, #132]	; (800e7d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800e754:	4293      	cmp	r3, r2
 800e756:	d022      	beq.n	800e79e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e760:	d01d      	beq.n	800e79e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	4a1d      	ldr	r2, [pc, #116]	; (800e7dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800e768:	4293      	cmp	r3, r2
 800e76a:	d018      	beq.n	800e79e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	4a1b      	ldr	r2, [pc, #108]	; (800e7e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800e772:	4293      	cmp	r3, r2
 800e774:	d013      	beq.n	800e79e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	4a1a      	ldr	r2, [pc, #104]	; (800e7e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800e77c:	4293      	cmp	r3, r2
 800e77e:	d00e      	beq.n	800e79e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	4a18      	ldr	r2, [pc, #96]	; (800e7e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800e786:	4293      	cmp	r3, r2
 800e788:	d009      	beq.n	800e79e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	4a17      	ldr	r2, [pc, #92]	; (800e7ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800e790:	4293      	cmp	r3, r2
 800e792:	d004      	beq.n	800e79e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	4a15      	ldr	r2, [pc, #84]	; (800e7f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800e79a:	4293      	cmp	r3, r2
 800e79c:	d10c      	bne.n	800e7b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e79e:	68bb      	ldr	r3, [r7, #8]
 800e7a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e7a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e7a6:	683b      	ldr	r3, [r7, #0]
 800e7a8:	685b      	ldr	r3, [r3, #4]
 800e7aa:	68ba      	ldr	r2, [r7, #8]
 800e7ac:	4313      	orrs	r3, r2
 800e7ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	68ba      	ldr	r2, [r7, #8]
 800e7b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	2201      	movs	r2, #1
 800e7bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e7c8:	2300      	movs	r3, #0
}
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	3714      	adds	r7, #20
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d4:	4770      	bx	lr
 800e7d6:	bf00      	nop
 800e7d8:	40010000 	.word	0x40010000
 800e7dc:	40000400 	.word	0x40000400
 800e7e0:	40000800 	.word	0x40000800
 800e7e4:	40000c00 	.word	0x40000c00
 800e7e8:	40010400 	.word	0x40010400
 800e7ec:	40014000 	.word	0x40014000
 800e7f0:	40001800 	.word	0x40001800

0800e7f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e7f4:	b480      	push	{r7}
 800e7f6:	b083      	sub	sp, #12
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e7fc:	bf00      	nop
 800e7fe:	370c      	adds	r7, #12
 800e800:	46bd      	mov	sp, r7
 800e802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e806:	4770      	bx	lr

0800e808 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e808:	b480      	push	{r7}
 800e80a:	b083      	sub	sp, #12
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e810:	bf00      	nop
 800e812:	370c      	adds	r7, #12
 800e814:	46bd      	mov	sp, r7
 800e816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81a:	4770      	bx	lr

0800e81c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e81c:	b580      	push	{r7, lr}
 800e81e:	b082      	sub	sp, #8
 800e820:	af00      	add	r7, sp, #0
 800e822:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	2b00      	cmp	r3, #0
 800e828:	d101      	bne.n	800e82e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e82a:	2301      	movs	r3, #1
 800e82c:	e03f      	b.n	800e8ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e834:	b2db      	uxtb	r3, r3
 800e836:	2b00      	cmp	r3, #0
 800e838:	d106      	bne.n	800e848 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	2200      	movs	r2, #0
 800e83e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e842:	6878      	ldr	r0, [r7, #4]
 800e844:	f7fc fdec 	bl	800b420 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	2224      	movs	r2, #36	; 0x24
 800e84c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	68da      	ldr	r2, [r3, #12]
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e85e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800e860:	6878      	ldr	r0, [r7, #4]
 800e862:	f000 fb6b 	bl	800ef3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	691a      	ldr	r2, [r3, #16]
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e874:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	695a      	ldr	r2, [r3, #20]
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e884:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	68da      	ldr	r2, [r3, #12]
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e894:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	2200      	movs	r2, #0
 800e89a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	2220      	movs	r2, #32
 800e8a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	2220      	movs	r2, #32
 800e8a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800e8ac:	2300      	movs	r3, #0
}
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	3708      	adds	r7, #8
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	bd80      	pop	{r7, pc}
	...

0800e8b8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b086      	sub	sp, #24
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	60f8      	str	r0, [r7, #12]
 800e8c0:	60b9      	str	r1, [r7, #8]
 800e8c2:	4613      	mov	r3, r2
 800e8c4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e8cc:	b2db      	uxtb	r3, r3
 800e8ce:	2b20      	cmp	r3, #32
 800e8d0:	d153      	bne.n	800e97a <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800e8d2:	68bb      	ldr	r3, [r7, #8]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d002      	beq.n	800e8de <HAL_UART_Transmit_DMA+0x26>
 800e8d8:	88fb      	ldrh	r3, [r7, #6]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d101      	bne.n	800e8e2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800e8de:	2301      	movs	r3, #1
 800e8e0:	e04c      	b.n	800e97c <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e8e8:	2b01      	cmp	r3, #1
 800e8ea:	d101      	bne.n	800e8f0 <HAL_UART_Transmit_DMA+0x38>
 800e8ec:	2302      	movs	r3, #2
 800e8ee:	e045      	b.n	800e97c <HAL_UART_Transmit_DMA+0xc4>
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	2201      	movs	r2, #1
 800e8f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800e8f8:	68ba      	ldr	r2, [r7, #8]
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	88fa      	ldrh	r2, [r7, #6]
 800e902:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	88fa      	ldrh	r2, [r7, #6]
 800e908:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	2200      	movs	r2, #0
 800e90e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	2221      	movs	r2, #33	; 0x21
 800e914:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e91c:	4a19      	ldr	r2, [pc, #100]	; (800e984 <HAL_UART_Transmit_DMA+0xcc>)
 800e91e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e924:	4a18      	ldr	r2, [pc, #96]	; (800e988 <HAL_UART_Transmit_DMA+0xd0>)
 800e926:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e92c:	4a17      	ldr	r2, [pc, #92]	; (800e98c <HAL_UART_Transmit_DMA+0xd4>)
 800e92e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e934:	2200      	movs	r2, #0
 800e936:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800e938:	f107 0308 	add.w	r3, r7, #8
 800e93c:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e942:	697b      	ldr	r3, [r7, #20]
 800e944:	6819      	ldr	r1, [r3, #0]
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	3304      	adds	r3, #4
 800e94c:	461a      	mov	r2, r3
 800e94e:	88fb      	ldrh	r3, [r7, #6]
 800e950:	f7fd f82e 	bl	800b9b0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e95c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	2200      	movs	r2, #0
 800e962:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	695a      	ldr	r2, [r3, #20]
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e974:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800e976:	2300      	movs	r3, #0
 800e978:	e000      	b.n	800e97c <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800e97a:	2302      	movs	r3, #2
  }
}
 800e97c:	4618      	mov	r0, r3
 800e97e:	3718      	adds	r7, #24
 800e980:	46bd      	mov	sp, r7
 800e982:	bd80      	pop	{r7, pc}
 800e984:	0800ebcd 	.word	0x0800ebcd
 800e988:	0800ec1f 	.word	0x0800ec1f
 800e98c:	0800ec3b 	.word	0x0800ec3b

0800e990 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e990:	b580      	push	{r7, lr}
 800e992:	b088      	sub	sp, #32
 800e994:	af00      	add	r7, sp, #0
 800e996:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	68db      	ldr	r3, [r3, #12]
 800e9a6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	695b      	ldr	r3, [r3, #20]
 800e9ae:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800e9b8:	69fb      	ldr	r3, [r7, #28]
 800e9ba:	f003 030f 	and.w	r3, r3, #15
 800e9be:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800e9c0:	693b      	ldr	r3, [r7, #16]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d10d      	bne.n	800e9e2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e9c6:	69fb      	ldr	r3, [r7, #28]
 800e9c8:	f003 0320 	and.w	r3, r3, #32
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d008      	beq.n	800e9e2 <HAL_UART_IRQHandler+0x52>
 800e9d0:	69bb      	ldr	r3, [r7, #24]
 800e9d2:	f003 0320 	and.w	r3, r3, #32
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d003      	beq.n	800e9e2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800e9da:	6878      	ldr	r0, [r7, #4]
 800e9dc:	f000 fa2d 	bl	800ee3a <UART_Receive_IT>
      return;
 800e9e0:	e0d1      	b.n	800eb86 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800e9e2:	693b      	ldr	r3, [r7, #16]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	f000 80b0 	beq.w	800eb4a <HAL_UART_IRQHandler+0x1ba>
 800e9ea:	697b      	ldr	r3, [r7, #20]
 800e9ec:	f003 0301 	and.w	r3, r3, #1
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d105      	bne.n	800ea00 <HAL_UART_IRQHandler+0x70>
 800e9f4:	69bb      	ldr	r3, [r7, #24]
 800e9f6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	f000 80a5 	beq.w	800eb4a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ea00:	69fb      	ldr	r3, [r7, #28]
 800ea02:	f003 0301 	and.w	r3, r3, #1
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d00a      	beq.n	800ea20 <HAL_UART_IRQHandler+0x90>
 800ea0a:	69bb      	ldr	r3, [r7, #24]
 800ea0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d005      	beq.n	800ea20 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea18:	f043 0201 	orr.w	r2, r3, #1
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ea20:	69fb      	ldr	r3, [r7, #28]
 800ea22:	f003 0304 	and.w	r3, r3, #4
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d00a      	beq.n	800ea40 <HAL_UART_IRQHandler+0xb0>
 800ea2a:	697b      	ldr	r3, [r7, #20]
 800ea2c:	f003 0301 	and.w	r3, r3, #1
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d005      	beq.n	800ea40 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea38:	f043 0202 	orr.w	r2, r3, #2
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ea40:	69fb      	ldr	r3, [r7, #28]
 800ea42:	f003 0302 	and.w	r3, r3, #2
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d00a      	beq.n	800ea60 <HAL_UART_IRQHandler+0xd0>
 800ea4a:	697b      	ldr	r3, [r7, #20]
 800ea4c:	f003 0301 	and.w	r3, r3, #1
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d005      	beq.n	800ea60 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea58:	f043 0204 	orr.w	r2, r3, #4
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800ea60:	69fb      	ldr	r3, [r7, #28]
 800ea62:	f003 0308 	and.w	r3, r3, #8
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d00f      	beq.n	800ea8a <HAL_UART_IRQHandler+0xfa>
 800ea6a:	69bb      	ldr	r3, [r7, #24]
 800ea6c:	f003 0320 	and.w	r3, r3, #32
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d104      	bne.n	800ea7e <HAL_UART_IRQHandler+0xee>
 800ea74:	697b      	ldr	r3, [r7, #20]
 800ea76:	f003 0301 	and.w	r3, r3, #1
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d005      	beq.n	800ea8a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea82:	f043 0208 	orr.w	r2, r3, #8
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d078      	beq.n	800eb84 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ea92:	69fb      	ldr	r3, [r7, #28]
 800ea94:	f003 0320 	and.w	r3, r3, #32
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d007      	beq.n	800eaac <HAL_UART_IRQHandler+0x11c>
 800ea9c:	69bb      	ldr	r3, [r7, #24]
 800ea9e:	f003 0320 	and.w	r3, r3, #32
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d002      	beq.n	800eaac <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800eaa6:	6878      	ldr	r0, [r7, #4]
 800eaa8:	f000 f9c7 	bl	800ee3a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	695b      	ldr	r3, [r3, #20]
 800eab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eab6:	2b40      	cmp	r3, #64	; 0x40
 800eab8:	bf0c      	ite	eq
 800eaba:	2301      	moveq	r3, #1
 800eabc:	2300      	movne	r3, #0
 800eabe:	b2db      	uxtb	r3, r3
 800eac0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eac6:	f003 0308 	and.w	r3, r3, #8
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d102      	bne.n	800ead4 <HAL_UART_IRQHandler+0x144>
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d031      	beq.n	800eb38 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ead4:	6878      	ldr	r0, [r7, #4]
 800ead6:	f000 f910 	bl	800ecfa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	695b      	ldr	r3, [r3, #20]
 800eae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eae4:	2b40      	cmp	r3, #64	; 0x40
 800eae6:	d123      	bne.n	800eb30 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	695a      	ldr	r2, [r3, #20]
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eaf6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d013      	beq.n	800eb28 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb04:	4a21      	ldr	r2, [pc, #132]	; (800eb8c <HAL_UART_IRQHandler+0x1fc>)
 800eb06:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb0c:	4618      	mov	r0, r3
 800eb0e:	f7fc ffa7 	bl	800ba60 <HAL_DMA_Abort_IT>
 800eb12:	4603      	mov	r3, r0
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d016      	beq.n	800eb46 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb1e:	687a      	ldr	r2, [r7, #4]
 800eb20:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800eb22:	4610      	mov	r0, r2
 800eb24:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eb26:	e00e      	b.n	800eb46 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800eb28:	6878      	ldr	r0, [r7, #4]
 800eb2a:	f000 f845 	bl	800ebb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eb2e:	e00a      	b.n	800eb46 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800eb30:	6878      	ldr	r0, [r7, #4]
 800eb32:	f000 f841 	bl	800ebb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eb36:	e006      	b.n	800eb46 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800eb38:	6878      	ldr	r0, [r7, #4]
 800eb3a:	f000 f83d 	bl	800ebb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	2200      	movs	r2, #0
 800eb42:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800eb44:	e01e      	b.n	800eb84 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eb46:	bf00      	nop
    return;
 800eb48:	e01c      	b.n	800eb84 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800eb4a:	69fb      	ldr	r3, [r7, #28]
 800eb4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d008      	beq.n	800eb66 <HAL_UART_IRQHandler+0x1d6>
 800eb54:	69bb      	ldr	r3, [r7, #24]
 800eb56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d003      	beq.n	800eb66 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800eb5e:	6878      	ldr	r0, [r7, #4]
 800eb60:	f000 f8fd 	bl	800ed5e <UART_Transmit_IT>
    return;
 800eb64:	e00f      	b.n	800eb86 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800eb66:	69fb      	ldr	r3, [r7, #28]
 800eb68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d00a      	beq.n	800eb86 <HAL_UART_IRQHandler+0x1f6>
 800eb70:	69bb      	ldr	r3, [r7, #24]
 800eb72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d005      	beq.n	800eb86 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800eb7a:	6878      	ldr	r0, [r7, #4]
 800eb7c:	f000 f945 	bl	800ee0a <UART_EndTransmit_IT>
    return;
 800eb80:	bf00      	nop
 800eb82:	e000      	b.n	800eb86 <HAL_UART_IRQHandler+0x1f6>
    return;
 800eb84:	bf00      	nop
  }
}
 800eb86:	3720      	adds	r7, #32
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	bd80      	pop	{r7, pc}
 800eb8c:	0800ed37 	.word	0x0800ed37

0800eb90 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800eb90:	b480      	push	{r7}
 800eb92:	b083      	sub	sp, #12
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800eb98:	bf00      	nop
 800eb9a:	370c      	adds	r7, #12
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba2:	4770      	bx	lr

0800eba4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800eba4:	b480      	push	{r7}
 800eba6:	b083      	sub	sp, #12
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800ebac:	bf00      	nop
 800ebae:	370c      	adds	r7, #12
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb6:	4770      	bx	lr

0800ebb8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ebb8:	b480      	push	{r7}
 800ebba:	b083      	sub	sp, #12
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ebc0:	bf00      	nop
 800ebc2:	370c      	adds	r7, #12
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebca:	4770      	bx	lr

0800ebcc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ebcc:	b580      	push	{r7, lr}
 800ebce:	b084      	sub	sp, #16
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebd8:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d113      	bne.n	800ec10 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	2200      	movs	r2, #0
 800ebec:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	695a      	ldr	r2, [r3, #20]
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ebfc:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	68da      	ldr	r2, [r3, #12]
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ec0c:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ec0e:	e002      	b.n	800ec16 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800ec10:	68f8      	ldr	r0, [r7, #12]
 800ec12:	f7fc fc87 	bl	800b524 <HAL_UART_TxCpltCallback>
}
 800ec16:	bf00      	nop
 800ec18:	3710      	adds	r7, #16
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	bd80      	pop	{r7, pc}

0800ec1e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ec1e:	b580      	push	{r7, lr}
 800ec20:	b084      	sub	sp, #16
 800ec22:	af00      	add	r7, sp, #0
 800ec24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec2a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ec2c:	68f8      	ldr	r0, [r7, #12]
 800ec2e:	f7ff ffaf 	bl	800eb90 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ec32:	bf00      	nop
 800ec34:	3710      	adds	r7, #16
 800ec36:	46bd      	mov	sp, r7
 800ec38:	bd80      	pop	{r7, pc}

0800ec3a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ec3a:	b580      	push	{r7, lr}
 800ec3c:	b084      	sub	sp, #16
 800ec3e:	af00      	add	r7, sp, #0
 800ec40:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800ec42:	2300      	movs	r3, #0
 800ec44:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec4a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800ec4c:	68bb      	ldr	r3, [r7, #8]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	695b      	ldr	r3, [r3, #20]
 800ec52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec56:	2b80      	cmp	r3, #128	; 0x80
 800ec58:	bf0c      	ite	eq
 800ec5a:	2301      	moveq	r3, #1
 800ec5c:	2300      	movne	r3, #0
 800ec5e:	b2db      	uxtb	r3, r3
 800ec60:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800ec62:	68bb      	ldr	r3, [r7, #8]
 800ec64:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ec68:	b2db      	uxtb	r3, r3
 800ec6a:	2b21      	cmp	r3, #33	; 0x21
 800ec6c:	d108      	bne.n	800ec80 <UART_DMAError+0x46>
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d005      	beq.n	800ec80 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800ec74:	68bb      	ldr	r3, [r7, #8]
 800ec76:	2200      	movs	r2, #0
 800ec78:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800ec7a:	68b8      	ldr	r0, [r7, #8]
 800ec7c:	f000 f827 	bl	800ecce <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ec80:	68bb      	ldr	r3, [r7, #8]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	695b      	ldr	r3, [r3, #20]
 800ec86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec8a:	2b40      	cmp	r3, #64	; 0x40
 800ec8c:	bf0c      	ite	eq
 800ec8e:	2301      	moveq	r3, #1
 800ec90:	2300      	movne	r3, #0
 800ec92:	b2db      	uxtb	r3, r3
 800ec94:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ec96:	68bb      	ldr	r3, [r7, #8]
 800ec98:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ec9c:	b2db      	uxtb	r3, r3
 800ec9e:	2b22      	cmp	r3, #34	; 0x22
 800eca0:	d108      	bne.n	800ecb4 <UART_DMAError+0x7a>
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d005      	beq.n	800ecb4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800eca8:	68bb      	ldr	r3, [r7, #8]
 800ecaa:	2200      	movs	r2, #0
 800ecac:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800ecae:	68b8      	ldr	r0, [r7, #8]
 800ecb0:	f000 f823 	bl	800ecfa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ecb4:	68bb      	ldr	r3, [r7, #8]
 800ecb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecb8:	f043 0210 	orr.w	r2, r3, #16
 800ecbc:	68bb      	ldr	r3, [r7, #8]
 800ecbe:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ecc0:	68b8      	ldr	r0, [r7, #8]
 800ecc2:	f7ff ff79 	bl	800ebb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ecc6:	bf00      	nop
 800ecc8:	3710      	adds	r7, #16
 800ecca:	46bd      	mov	sp, r7
 800eccc:	bd80      	pop	{r7, pc}

0800ecce <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ecce:	b480      	push	{r7}
 800ecd0:	b083      	sub	sp, #12
 800ecd2:	af00      	add	r7, sp, #0
 800ecd4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	68da      	ldr	r2, [r3, #12]
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800ece4:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	2220      	movs	r2, #32
 800ecea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800ecee:	bf00      	nop
 800ecf0:	370c      	adds	r7, #12
 800ecf2:	46bd      	mov	sp, r7
 800ecf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf8:	4770      	bx	lr

0800ecfa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ecfa:	b480      	push	{r7}
 800ecfc:	b083      	sub	sp, #12
 800ecfe:	af00      	add	r7, sp, #0
 800ed00:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	68da      	ldr	r2, [r3, #12]
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ed10:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	695a      	ldr	r2, [r3, #20]
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	f022 0201 	bic.w	r2, r2, #1
 800ed20:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	2220      	movs	r2, #32
 800ed26:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800ed2a:	bf00      	nop
 800ed2c:	370c      	adds	r7, #12
 800ed2e:	46bd      	mov	sp, r7
 800ed30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed34:	4770      	bx	lr

0800ed36 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ed36:	b580      	push	{r7, lr}
 800ed38:	b084      	sub	sp, #16
 800ed3a:	af00      	add	r7, sp, #0
 800ed3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed42:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	2200      	movs	r2, #0
 800ed48:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	2200      	movs	r2, #0
 800ed4e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ed50:	68f8      	ldr	r0, [r7, #12]
 800ed52:	f7ff ff31 	bl	800ebb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ed56:	bf00      	nop
 800ed58:	3710      	adds	r7, #16
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	bd80      	pop	{r7, pc}

0800ed5e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ed5e:	b480      	push	{r7}
 800ed60:	b085      	sub	sp, #20
 800ed62:	af00      	add	r7, sp, #0
 800ed64:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ed6c:	b2db      	uxtb	r3, r3
 800ed6e:	2b21      	cmp	r3, #33	; 0x21
 800ed70:	d144      	bne.n	800edfc <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	689b      	ldr	r3, [r3, #8]
 800ed76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ed7a:	d11a      	bne.n	800edb2 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	6a1b      	ldr	r3, [r3, #32]
 800ed80:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	881b      	ldrh	r3, [r3, #0]
 800ed86:	461a      	mov	r2, r3
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ed90:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	691b      	ldr	r3, [r3, #16]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d105      	bne.n	800eda6 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	6a1b      	ldr	r3, [r3, #32]
 800ed9e:	1c9a      	adds	r2, r3, #2
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	621a      	str	r2, [r3, #32]
 800eda4:	e00e      	b.n	800edc4 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	6a1b      	ldr	r3, [r3, #32]
 800edaa:	1c5a      	adds	r2, r3, #1
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	621a      	str	r2, [r3, #32]
 800edb0:	e008      	b.n	800edc4 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	6a1b      	ldr	r3, [r3, #32]
 800edb6:	1c59      	adds	r1, r3, #1
 800edb8:	687a      	ldr	r2, [r7, #4]
 800edba:	6211      	str	r1, [r2, #32]
 800edbc:	781a      	ldrb	r2, [r3, #0]
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800edc8:	b29b      	uxth	r3, r3
 800edca:	3b01      	subs	r3, #1
 800edcc:	b29b      	uxth	r3, r3
 800edce:	687a      	ldr	r2, [r7, #4]
 800edd0:	4619      	mov	r1, r3
 800edd2:	84d1      	strh	r1, [r2, #38]	; 0x26
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d10f      	bne.n	800edf8 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	68da      	ldr	r2, [r3, #12]
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ede6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	68da      	ldr	r2, [r3, #12]
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800edf6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800edf8:	2300      	movs	r3, #0
 800edfa:	e000      	b.n	800edfe <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800edfc:	2302      	movs	r3, #2
  }
}
 800edfe:	4618      	mov	r0, r3
 800ee00:	3714      	adds	r7, #20
 800ee02:	46bd      	mov	sp, r7
 800ee04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee08:	4770      	bx	lr

0800ee0a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ee0a:	b580      	push	{r7, lr}
 800ee0c:	b082      	sub	sp, #8
 800ee0e:	af00      	add	r7, sp, #0
 800ee10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	68da      	ldr	r2, [r3, #12]
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ee20:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	2220      	movs	r2, #32
 800ee26:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ee2a:	6878      	ldr	r0, [r7, #4]
 800ee2c:	f7fc fb7a 	bl	800b524 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ee30:	2300      	movs	r3, #0
}
 800ee32:	4618      	mov	r0, r3
 800ee34:	3708      	adds	r7, #8
 800ee36:	46bd      	mov	sp, r7
 800ee38:	bd80      	pop	{r7, pc}

0800ee3a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ee3a:	b580      	push	{r7, lr}
 800ee3c:	b084      	sub	sp, #16
 800ee3e:	af00      	add	r7, sp, #0
 800ee40:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ee48:	b2db      	uxtb	r3, r3
 800ee4a:	2b22      	cmp	r3, #34	; 0x22
 800ee4c:	d171      	bne.n	800ef32 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	689b      	ldr	r3, [r3, #8]
 800ee52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ee56:	d123      	bne.n	800eea0 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee5c:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	691b      	ldr	r3, [r3, #16]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d10e      	bne.n	800ee84 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	685b      	ldr	r3, [r3, #4]
 800ee6c:	b29b      	uxth	r3, r3
 800ee6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee72:	b29a      	uxth	r2, r3
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee7c:	1c9a      	adds	r2, r3, #2
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	629a      	str	r2, [r3, #40]	; 0x28
 800ee82:	e029      	b.n	800eed8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	685b      	ldr	r3, [r3, #4]
 800ee8a:	b29b      	uxth	r3, r3
 800ee8c:	b2db      	uxtb	r3, r3
 800ee8e:	b29a      	uxth	r2, r3
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee98:	1c5a      	adds	r2, r3, #1
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	629a      	str	r2, [r3, #40]	; 0x28
 800ee9e:	e01b      	b.n	800eed8 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	691b      	ldr	r3, [r3, #16]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d10a      	bne.n	800eebe <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	6858      	ldr	r0, [r3, #4]
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eeb2:	1c59      	adds	r1, r3, #1
 800eeb4:	687a      	ldr	r2, [r7, #4]
 800eeb6:	6291      	str	r1, [r2, #40]	; 0x28
 800eeb8:	b2c2      	uxtb	r2, r0
 800eeba:	701a      	strb	r2, [r3, #0]
 800eebc:	e00c      	b.n	800eed8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	685b      	ldr	r3, [r3, #4]
 800eec4:	b2da      	uxtb	r2, r3
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eeca:	1c58      	adds	r0, r3, #1
 800eecc:	6879      	ldr	r1, [r7, #4]
 800eece:	6288      	str	r0, [r1, #40]	; 0x28
 800eed0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800eed4:	b2d2      	uxtb	r2, r2
 800eed6:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800eedc:	b29b      	uxth	r3, r3
 800eede:	3b01      	subs	r3, #1
 800eee0:	b29b      	uxth	r3, r3
 800eee2:	687a      	ldr	r2, [r7, #4]
 800eee4:	4619      	mov	r1, r3
 800eee6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d120      	bne.n	800ef2e <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	68da      	ldr	r2, [r3, #12]
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	f022 0220 	bic.w	r2, r2, #32
 800eefa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	68da      	ldr	r2, [r3, #12]
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ef0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	695a      	ldr	r2, [r3, #20]
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	f022 0201 	bic.w	r2, r2, #1
 800ef1a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	2220      	movs	r2, #32
 800ef20:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800ef24:	6878      	ldr	r0, [r7, #4]
 800ef26:	f7ff fe3d 	bl	800eba4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	e002      	b.n	800ef34 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800ef2e:	2300      	movs	r3, #0
 800ef30:	e000      	b.n	800ef34 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800ef32:	2302      	movs	r3, #2
  }
}
 800ef34:	4618      	mov	r0, r3
 800ef36:	3710      	adds	r7, #16
 800ef38:	46bd      	mov	sp, r7
 800ef3a:	bd80      	pop	{r7, pc}

0800ef3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ef3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef40:	b085      	sub	sp, #20
 800ef42:	af00      	add	r7, sp, #0
 800ef44:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	691b      	ldr	r3, [r3, #16]
 800ef4c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	68da      	ldr	r2, [r3, #12]
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	430a      	orrs	r2, r1
 800ef5a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	689a      	ldr	r2, [r3, #8]
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	691b      	ldr	r3, [r3, #16]
 800ef64:	431a      	orrs	r2, r3
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	695b      	ldr	r3, [r3, #20]
 800ef6a:	431a      	orrs	r2, r3
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	69db      	ldr	r3, [r3, #28]
 800ef70:	4313      	orrs	r3, r2
 800ef72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	68db      	ldr	r3, [r3, #12]
 800ef7a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800ef7e:	f023 030c 	bic.w	r3, r3, #12
 800ef82:	687a      	ldr	r2, [r7, #4]
 800ef84:	6812      	ldr	r2, [r2, #0]
 800ef86:	68f9      	ldr	r1, [r7, #12]
 800ef88:	430b      	orrs	r3, r1
 800ef8a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	695b      	ldr	r3, [r3, #20]
 800ef92:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	699a      	ldr	r2, [r3, #24]
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	430a      	orrs	r2, r1
 800efa0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	69db      	ldr	r3, [r3, #28]
 800efa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800efaa:	f040 818b 	bne.w	800f2c4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	4ac1      	ldr	r2, [pc, #772]	; (800f2b8 <UART_SetConfig+0x37c>)
 800efb4:	4293      	cmp	r3, r2
 800efb6:	d005      	beq.n	800efc4 <UART_SetConfig+0x88>
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	4abf      	ldr	r2, [pc, #764]	; (800f2bc <UART_SetConfig+0x380>)
 800efbe:	4293      	cmp	r3, r2
 800efc0:	f040 80bd 	bne.w	800f13e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800efc4:	f7fe ffc0 	bl	800df48 <HAL_RCC_GetPCLK2Freq>
 800efc8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800efca:	68bb      	ldr	r3, [r7, #8]
 800efcc:	461d      	mov	r5, r3
 800efce:	f04f 0600 	mov.w	r6, #0
 800efd2:	46a8      	mov	r8, r5
 800efd4:	46b1      	mov	r9, r6
 800efd6:	eb18 0308 	adds.w	r3, r8, r8
 800efda:	eb49 0409 	adc.w	r4, r9, r9
 800efde:	4698      	mov	r8, r3
 800efe0:	46a1      	mov	r9, r4
 800efe2:	eb18 0805 	adds.w	r8, r8, r5
 800efe6:	eb49 0906 	adc.w	r9, r9, r6
 800efea:	f04f 0100 	mov.w	r1, #0
 800efee:	f04f 0200 	mov.w	r2, #0
 800eff2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800eff6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800effa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800effe:	4688      	mov	r8, r1
 800f000:	4691      	mov	r9, r2
 800f002:	eb18 0005 	adds.w	r0, r8, r5
 800f006:	eb49 0106 	adc.w	r1, r9, r6
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	685b      	ldr	r3, [r3, #4]
 800f00e:	461d      	mov	r5, r3
 800f010:	f04f 0600 	mov.w	r6, #0
 800f014:	196b      	adds	r3, r5, r5
 800f016:	eb46 0406 	adc.w	r4, r6, r6
 800f01a:	461a      	mov	r2, r3
 800f01c:	4623      	mov	r3, r4
 800f01e:	f7f1 fe33 	bl	8000c88 <__aeabi_uldivmod>
 800f022:	4603      	mov	r3, r0
 800f024:	460c      	mov	r4, r1
 800f026:	461a      	mov	r2, r3
 800f028:	4ba5      	ldr	r3, [pc, #660]	; (800f2c0 <UART_SetConfig+0x384>)
 800f02a:	fba3 2302 	umull	r2, r3, r3, r2
 800f02e:	095b      	lsrs	r3, r3, #5
 800f030:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f034:	68bb      	ldr	r3, [r7, #8]
 800f036:	461d      	mov	r5, r3
 800f038:	f04f 0600 	mov.w	r6, #0
 800f03c:	46a9      	mov	r9, r5
 800f03e:	46b2      	mov	sl, r6
 800f040:	eb19 0309 	adds.w	r3, r9, r9
 800f044:	eb4a 040a 	adc.w	r4, sl, sl
 800f048:	4699      	mov	r9, r3
 800f04a:	46a2      	mov	sl, r4
 800f04c:	eb19 0905 	adds.w	r9, r9, r5
 800f050:	eb4a 0a06 	adc.w	sl, sl, r6
 800f054:	f04f 0100 	mov.w	r1, #0
 800f058:	f04f 0200 	mov.w	r2, #0
 800f05c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f060:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f064:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f068:	4689      	mov	r9, r1
 800f06a:	4692      	mov	sl, r2
 800f06c:	eb19 0005 	adds.w	r0, r9, r5
 800f070:	eb4a 0106 	adc.w	r1, sl, r6
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	685b      	ldr	r3, [r3, #4]
 800f078:	461d      	mov	r5, r3
 800f07a:	f04f 0600 	mov.w	r6, #0
 800f07e:	196b      	adds	r3, r5, r5
 800f080:	eb46 0406 	adc.w	r4, r6, r6
 800f084:	461a      	mov	r2, r3
 800f086:	4623      	mov	r3, r4
 800f088:	f7f1 fdfe 	bl	8000c88 <__aeabi_uldivmod>
 800f08c:	4603      	mov	r3, r0
 800f08e:	460c      	mov	r4, r1
 800f090:	461a      	mov	r2, r3
 800f092:	4b8b      	ldr	r3, [pc, #556]	; (800f2c0 <UART_SetConfig+0x384>)
 800f094:	fba3 1302 	umull	r1, r3, r3, r2
 800f098:	095b      	lsrs	r3, r3, #5
 800f09a:	2164      	movs	r1, #100	; 0x64
 800f09c:	fb01 f303 	mul.w	r3, r1, r3
 800f0a0:	1ad3      	subs	r3, r2, r3
 800f0a2:	00db      	lsls	r3, r3, #3
 800f0a4:	3332      	adds	r3, #50	; 0x32
 800f0a6:	4a86      	ldr	r2, [pc, #536]	; (800f2c0 <UART_SetConfig+0x384>)
 800f0a8:	fba2 2303 	umull	r2, r3, r2, r3
 800f0ac:	095b      	lsrs	r3, r3, #5
 800f0ae:	005b      	lsls	r3, r3, #1
 800f0b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f0b4:	4498      	add	r8, r3
 800f0b6:	68bb      	ldr	r3, [r7, #8]
 800f0b8:	461d      	mov	r5, r3
 800f0ba:	f04f 0600 	mov.w	r6, #0
 800f0be:	46a9      	mov	r9, r5
 800f0c0:	46b2      	mov	sl, r6
 800f0c2:	eb19 0309 	adds.w	r3, r9, r9
 800f0c6:	eb4a 040a 	adc.w	r4, sl, sl
 800f0ca:	4699      	mov	r9, r3
 800f0cc:	46a2      	mov	sl, r4
 800f0ce:	eb19 0905 	adds.w	r9, r9, r5
 800f0d2:	eb4a 0a06 	adc.w	sl, sl, r6
 800f0d6:	f04f 0100 	mov.w	r1, #0
 800f0da:	f04f 0200 	mov.w	r2, #0
 800f0de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f0e2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f0e6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f0ea:	4689      	mov	r9, r1
 800f0ec:	4692      	mov	sl, r2
 800f0ee:	eb19 0005 	adds.w	r0, r9, r5
 800f0f2:	eb4a 0106 	adc.w	r1, sl, r6
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	685b      	ldr	r3, [r3, #4]
 800f0fa:	461d      	mov	r5, r3
 800f0fc:	f04f 0600 	mov.w	r6, #0
 800f100:	196b      	adds	r3, r5, r5
 800f102:	eb46 0406 	adc.w	r4, r6, r6
 800f106:	461a      	mov	r2, r3
 800f108:	4623      	mov	r3, r4
 800f10a:	f7f1 fdbd 	bl	8000c88 <__aeabi_uldivmod>
 800f10e:	4603      	mov	r3, r0
 800f110:	460c      	mov	r4, r1
 800f112:	461a      	mov	r2, r3
 800f114:	4b6a      	ldr	r3, [pc, #424]	; (800f2c0 <UART_SetConfig+0x384>)
 800f116:	fba3 1302 	umull	r1, r3, r3, r2
 800f11a:	095b      	lsrs	r3, r3, #5
 800f11c:	2164      	movs	r1, #100	; 0x64
 800f11e:	fb01 f303 	mul.w	r3, r1, r3
 800f122:	1ad3      	subs	r3, r2, r3
 800f124:	00db      	lsls	r3, r3, #3
 800f126:	3332      	adds	r3, #50	; 0x32
 800f128:	4a65      	ldr	r2, [pc, #404]	; (800f2c0 <UART_SetConfig+0x384>)
 800f12a:	fba2 2303 	umull	r2, r3, r2, r3
 800f12e:	095b      	lsrs	r3, r3, #5
 800f130:	f003 0207 	and.w	r2, r3, #7
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	4442      	add	r2, r8
 800f13a:	609a      	str	r2, [r3, #8]
 800f13c:	e26f      	b.n	800f61e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800f13e:	f7fe feef 	bl	800df20 <HAL_RCC_GetPCLK1Freq>
 800f142:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f144:	68bb      	ldr	r3, [r7, #8]
 800f146:	461d      	mov	r5, r3
 800f148:	f04f 0600 	mov.w	r6, #0
 800f14c:	46a8      	mov	r8, r5
 800f14e:	46b1      	mov	r9, r6
 800f150:	eb18 0308 	adds.w	r3, r8, r8
 800f154:	eb49 0409 	adc.w	r4, r9, r9
 800f158:	4698      	mov	r8, r3
 800f15a:	46a1      	mov	r9, r4
 800f15c:	eb18 0805 	adds.w	r8, r8, r5
 800f160:	eb49 0906 	adc.w	r9, r9, r6
 800f164:	f04f 0100 	mov.w	r1, #0
 800f168:	f04f 0200 	mov.w	r2, #0
 800f16c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f170:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f174:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f178:	4688      	mov	r8, r1
 800f17a:	4691      	mov	r9, r2
 800f17c:	eb18 0005 	adds.w	r0, r8, r5
 800f180:	eb49 0106 	adc.w	r1, r9, r6
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	685b      	ldr	r3, [r3, #4]
 800f188:	461d      	mov	r5, r3
 800f18a:	f04f 0600 	mov.w	r6, #0
 800f18e:	196b      	adds	r3, r5, r5
 800f190:	eb46 0406 	adc.w	r4, r6, r6
 800f194:	461a      	mov	r2, r3
 800f196:	4623      	mov	r3, r4
 800f198:	f7f1 fd76 	bl	8000c88 <__aeabi_uldivmod>
 800f19c:	4603      	mov	r3, r0
 800f19e:	460c      	mov	r4, r1
 800f1a0:	461a      	mov	r2, r3
 800f1a2:	4b47      	ldr	r3, [pc, #284]	; (800f2c0 <UART_SetConfig+0x384>)
 800f1a4:	fba3 2302 	umull	r2, r3, r3, r2
 800f1a8:	095b      	lsrs	r3, r3, #5
 800f1aa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f1ae:	68bb      	ldr	r3, [r7, #8]
 800f1b0:	461d      	mov	r5, r3
 800f1b2:	f04f 0600 	mov.w	r6, #0
 800f1b6:	46a9      	mov	r9, r5
 800f1b8:	46b2      	mov	sl, r6
 800f1ba:	eb19 0309 	adds.w	r3, r9, r9
 800f1be:	eb4a 040a 	adc.w	r4, sl, sl
 800f1c2:	4699      	mov	r9, r3
 800f1c4:	46a2      	mov	sl, r4
 800f1c6:	eb19 0905 	adds.w	r9, r9, r5
 800f1ca:	eb4a 0a06 	adc.w	sl, sl, r6
 800f1ce:	f04f 0100 	mov.w	r1, #0
 800f1d2:	f04f 0200 	mov.w	r2, #0
 800f1d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f1da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f1de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f1e2:	4689      	mov	r9, r1
 800f1e4:	4692      	mov	sl, r2
 800f1e6:	eb19 0005 	adds.w	r0, r9, r5
 800f1ea:	eb4a 0106 	adc.w	r1, sl, r6
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	685b      	ldr	r3, [r3, #4]
 800f1f2:	461d      	mov	r5, r3
 800f1f4:	f04f 0600 	mov.w	r6, #0
 800f1f8:	196b      	adds	r3, r5, r5
 800f1fa:	eb46 0406 	adc.w	r4, r6, r6
 800f1fe:	461a      	mov	r2, r3
 800f200:	4623      	mov	r3, r4
 800f202:	f7f1 fd41 	bl	8000c88 <__aeabi_uldivmod>
 800f206:	4603      	mov	r3, r0
 800f208:	460c      	mov	r4, r1
 800f20a:	461a      	mov	r2, r3
 800f20c:	4b2c      	ldr	r3, [pc, #176]	; (800f2c0 <UART_SetConfig+0x384>)
 800f20e:	fba3 1302 	umull	r1, r3, r3, r2
 800f212:	095b      	lsrs	r3, r3, #5
 800f214:	2164      	movs	r1, #100	; 0x64
 800f216:	fb01 f303 	mul.w	r3, r1, r3
 800f21a:	1ad3      	subs	r3, r2, r3
 800f21c:	00db      	lsls	r3, r3, #3
 800f21e:	3332      	adds	r3, #50	; 0x32
 800f220:	4a27      	ldr	r2, [pc, #156]	; (800f2c0 <UART_SetConfig+0x384>)
 800f222:	fba2 2303 	umull	r2, r3, r2, r3
 800f226:	095b      	lsrs	r3, r3, #5
 800f228:	005b      	lsls	r3, r3, #1
 800f22a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f22e:	4498      	add	r8, r3
 800f230:	68bb      	ldr	r3, [r7, #8]
 800f232:	461d      	mov	r5, r3
 800f234:	f04f 0600 	mov.w	r6, #0
 800f238:	46a9      	mov	r9, r5
 800f23a:	46b2      	mov	sl, r6
 800f23c:	eb19 0309 	adds.w	r3, r9, r9
 800f240:	eb4a 040a 	adc.w	r4, sl, sl
 800f244:	4699      	mov	r9, r3
 800f246:	46a2      	mov	sl, r4
 800f248:	eb19 0905 	adds.w	r9, r9, r5
 800f24c:	eb4a 0a06 	adc.w	sl, sl, r6
 800f250:	f04f 0100 	mov.w	r1, #0
 800f254:	f04f 0200 	mov.w	r2, #0
 800f258:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f25c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f260:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f264:	4689      	mov	r9, r1
 800f266:	4692      	mov	sl, r2
 800f268:	eb19 0005 	adds.w	r0, r9, r5
 800f26c:	eb4a 0106 	adc.w	r1, sl, r6
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	685b      	ldr	r3, [r3, #4]
 800f274:	461d      	mov	r5, r3
 800f276:	f04f 0600 	mov.w	r6, #0
 800f27a:	196b      	adds	r3, r5, r5
 800f27c:	eb46 0406 	adc.w	r4, r6, r6
 800f280:	461a      	mov	r2, r3
 800f282:	4623      	mov	r3, r4
 800f284:	f7f1 fd00 	bl	8000c88 <__aeabi_uldivmod>
 800f288:	4603      	mov	r3, r0
 800f28a:	460c      	mov	r4, r1
 800f28c:	461a      	mov	r2, r3
 800f28e:	4b0c      	ldr	r3, [pc, #48]	; (800f2c0 <UART_SetConfig+0x384>)
 800f290:	fba3 1302 	umull	r1, r3, r3, r2
 800f294:	095b      	lsrs	r3, r3, #5
 800f296:	2164      	movs	r1, #100	; 0x64
 800f298:	fb01 f303 	mul.w	r3, r1, r3
 800f29c:	1ad3      	subs	r3, r2, r3
 800f29e:	00db      	lsls	r3, r3, #3
 800f2a0:	3332      	adds	r3, #50	; 0x32
 800f2a2:	4a07      	ldr	r2, [pc, #28]	; (800f2c0 <UART_SetConfig+0x384>)
 800f2a4:	fba2 2303 	umull	r2, r3, r2, r3
 800f2a8:	095b      	lsrs	r3, r3, #5
 800f2aa:	f003 0207 	and.w	r2, r3, #7
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	4442      	add	r2, r8
 800f2b4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800f2b6:	e1b2      	b.n	800f61e <UART_SetConfig+0x6e2>
 800f2b8:	40011000 	.word	0x40011000
 800f2bc:	40011400 	.word	0x40011400
 800f2c0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	4ad7      	ldr	r2, [pc, #860]	; (800f628 <UART_SetConfig+0x6ec>)
 800f2ca:	4293      	cmp	r3, r2
 800f2cc:	d005      	beq.n	800f2da <UART_SetConfig+0x39e>
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	4ad6      	ldr	r2, [pc, #856]	; (800f62c <UART_SetConfig+0x6f0>)
 800f2d4:	4293      	cmp	r3, r2
 800f2d6:	f040 80d1 	bne.w	800f47c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800f2da:	f7fe fe35 	bl	800df48 <HAL_RCC_GetPCLK2Freq>
 800f2de:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f2e0:	68bb      	ldr	r3, [r7, #8]
 800f2e2:	469a      	mov	sl, r3
 800f2e4:	f04f 0b00 	mov.w	fp, #0
 800f2e8:	46d0      	mov	r8, sl
 800f2ea:	46d9      	mov	r9, fp
 800f2ec:	eb18 0308 	adds.w	r3, r8, r8
 800f2f0:	eb49 0409 	adc.w	r4, r9, r9
 800f2f4:	4698      	mov	r8, r3
 800f2f6:	46a1      	mov	r9, r4
 800f2f8:	eb18 080a 	adds.w	r8, r8, sl
 800f2fc:	eb49 090b 	adc.w	r9, r9, fp
 800f300:	f04f 0100 	mov.w	r1, #0
 800f304:	f04f 0200 	mov.w	r2, #0
 800f308:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f30c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f310:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f314:	4688      	mov	r8, r1
 800f316:	4691      	mov	r9, r2
 800f318:	eb1a 0508 	adds.w	r5, sl, r8
 800f31c:	eb4b 0609 	adc.w	r6, fp, r9
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	685b      	ldr	r3, [r3, #4]
 800f324:	4619      	mov	r1, r3
 800f326:	f04f 0200 	mov.w	r2, #0
 800f32a:	f04f 0300 	mov.w	r3, #0
 800f32e:	f04f 0400 	mov.w	r4, #0
 800f332:	0094      	lsls	r4, r2, #2
 800f334:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f338:	008b      	lsls	r3, r1, #2
 800f33a:	461a      	mov	r2, r3
 800f33c:	4623      	mov	r3, r4
 800f33e:	4628      	mov	r0, r5
 800f340:	4631      	mov	r1, r6
 800f342:	f7f1 fca1 	bl	8000c88 <__aeabi_uldivmod>
 800f346:	4603      	mov	r3, r0
 800f348:	460c      	mov	r4, r1
 800f34a:	461a      	mov	r2, r3
 800f34c:	4bb8      	ldr	r3, [pc, #736]	; (800f630 <UART_SetConfig+0x6f4>)
 800f34e:	fba3 2302 	umull	r2, r3, r3, r2
 800f352:	095b      	lsrs	r3, r3, #5
 800f354:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f358:	68bb      	ldr	r3, [r7, #8]
 800f35a:	469b      	mov	fp, r3
 800f35c:	f04f 0c00 	mov.w	ip, #0
 800f360:	46d9      	mov	r9, fp
 800f362:	46e2      	mov	sl, ip
 800f364:	eb19 0309 	adds.w	r3, r9, r9
 800f368:	eb4a 040a 	adc.w	r4, sl, sl
 800f36c:	4699      	mov	r9, r3
 800f36e:	46a2      	mov	sl, r4
 800f370:	eb19 090b 	adds.w	r9, r9, fp
 800f374:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f378:	f04f 0100 	mov.w	r1, #0
 800f37c:	f04f 0200 	mov.w	r2, #0
 800f380:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f384:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f388:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f38c:	4689      	mov	r9, r1
 800f38e:	4692      	mov	sl, r2
 800f390:	eb1b 0509 	adds.w	r5, fp, r9
 800f394:	eb4c 060a 	adc.w	r6, ip, sl
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	685b      	ldr	r3, [r3, #4]
 800f39c:	4619      	mov	r1, r3
 800f39e:	f04f 0200 	mov.w	r2, #0
 800f3a2:	f04f 0300 	mov.w	r3, #0
 800f3a6:	f04f 0400 	mov.w	r4, #0
 800f3aa:	0094      	lsls	r4, r2, #2
 800f3ac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f3b0:	008b      	lsls	r3, r1, #2
 800f3b2:	461a      	mov	r2, r3
 800f3b4:	4623      	mov	r3, r4
 800f3b6:	4628      	mov	r0, r5
 800f3b8:	4631      	mov	r1, r6
 800f3ba:	f7f1 fc65 	bl	8000c88 <__aeabi_uldivmod>
 800f3be:	4603      	mov	r3, r0
 800f3c0:	460c      	mov	r4, r1
 800f3c2:	461a      	mov	r2, r3
 800f3c4:	4b9a      	ldr	r3, [pc, #616]	; (800f630 <UART_SetConfig+0x6f4>)
 800f3c6:	fba3 1302 	umull	r1, r3, r3, r2
 800f3ca:	095b      	lsrs	r3, r3, #5
 800f3cc:	2164      	movs	r1, #100	; 0x64
 800f3ce:	fb01 f303 	mul.w	r3, r1, r3
 800f3d2:	1ad3      	subs	r3, r2, r3
 800f3d4:	011b      	lsls	r3, r3, #4
 800f3d6:	3332      	adds	r3, #50	; 0x32
 800f3d8:	4a95      	ldr	r2, [pc, #596]	; (800f630 <UART_SetConfig+0x6f4>)
 800f3da:	fba2 2303 	umull	r2, r3, r2, r3
 800f3de:	095b      	lsrs	r3, r3, #5
 800f3e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f3e4:	4498      	add	r8, r3
 800f3e6:	68bb      	ldr	r3, [r7, #8]
 800f3e8:	469b      	mov	fp, r3
 800f3ea:	f04f 0c00 	mov.w	ip, #0
 800f3ee:	46d9      	mov	r9, fp
 800f3f0:	46e2      	mov	sl, ip
 800f3f2:	eb19 0309 	adds.w	r3, r9, r9
 800f3f6:	eb4a 040a 	adc.w	r4, sl, sl
 800f3fa:	4699      	mov	r9, r3
 800f3fc:	46a2      	mov	sl, r4
 800f3fe:	eb19 090b 	adds.w	r9, r9, fp
 800f402:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f406:	f04f 0100 	mov.w	r1, #0
 800f40a:	f04f 0200 	mov.w	r2, #0
 800f40e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f412:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f416:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f41a:	4689      	mov	r9, r1
 800f41c:	4692      	mov	sl, r2
 800f41e:	eb1b 0509 	adds.w	r5, fp, r9
 800f422:	eb4c 060a 	adc.w	r6, ip, sl
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	685b      	ldr	r3, [r3, #4]
 800f42a:	4619      	mov	r1, r3
 800f42c:	f04f 0200 	mov.w	r2, #0
 800f430:	f04f 0300 	mov.w	r3, #0
 800f434:	f04f 0400 	mov.w	r4, #0
 800f438:	0094      	lsls	r4, r2, #2
 800f43a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f43e:	008b      	lsls	r3, r1, #2
 800f440:	461a      	mov	r2, r3
 800f442:	4623      	mov	r3, r4
 800f444:	4628      	mov	r0, r5
 800f446:	4631      	mov	r1, r6
 800f448:	f7f1 fc1e 	bl	8000c88 <__aeabi_uldivmod>
 800f44c:	4603      	mov	r3, r0
 800f44e:	460c      	mov	r4, r1
 800f450:	461a      	mov	r2, r3
 800f452:	4b77      	ldr	r3, [pc, #476]	; (800f630 <UART_SetConfig+0x6f4>)
 800f454:	fba3 1302 	umull	r1, r3, r3, r2
 800f458:	095b      	lsrs	r3, r3, #5
 800f45a:	2164      	movs	r1, #100	; 0x64
 800f45c:	fb01 f303 	mul.w	r3, r1, r3
 800f460:	1ad3      	subs	r3, r2, r3
 800f462:	011b      	lsls	r3, r3, #4
 800f464:	3332      	adds	r3, #50	; 0x32
 800f466:	4a72      	ldr	r2, [pc, #456]	; (800f630 <UART_SetConfig+0x6f4>)
 800f468:	fba2 2303 	umull	r2, r3, r2, r3
 800f46c:	095b      	lsrs	r3, r3, #5
 800f46e:	f003 020f 	and.w	r2, r3, #15
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	4442      	add	r2, r8
 800f478:	609a      	str	r2, [r3, #8]
 800f47a:	e0d0      	b.n	800f61e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800f47c:	f7fe fd50 	bl	800df20 <HAL_RCC_GetPCLK1Freq>
 800f480:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f482:	68bb      	ldr	r3, [r7, #8]
 800f484:	469a      	mov	sl, r3
 800f486:	f04f 0b00 	mov.w	fp, #0
 800f48a:	46d0      	mov	r8, sl
 800f48c:	46d9      	mov	r9, fp
 800f48e:	eb18 0308 	adds.w	r3, r8, r8
 800f492:	eb49 0409 	adc.w	r4, r9, r9
 800f496:	4698      	mov	r8, r3
 800f498:	46a1      	mov	r9, r4
 800f49a:	eb18 080a 	adds.w	r8, r8, sl
 800f49e:	eb49 090b 	adc.w	r9, r9, fp
 800f4a2:	f04f 0100 	mov.w	r1, #0
 800f4a6:	f04f 0200 	mov.w	r2, #0
 800f4aa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f4ae:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f4b2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f4b6:	4688      	mov	r8, r1
 800f4b8:	4691      	mov	r9, r2
 800f4ba:	eb1a 0508 	adds.w	r5, sl, r8
 800f4be:	eb4b 0609 	adc.w	r6, fp, r9
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	685b      	ldr	r3, [r3, #4]
 800f4c6:	4619      	mov	r1, r3
 800f4c8:	f04f 0200 	mov.w	r2, #0
 800f4cc:	f04f 0300 	mov.w	r3, #0
 800f4d0:	f04f 0400 	mov.w	r4, #0
 800f4d4:	0094      	lsls	r4, r2, #2
 800f4d6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f4da:	008b      	lsls	r3, r1, #2
 800f4dc:	461a      	mov	r2, r3
 800f4de:	4623      	mov	r3, r4
 800f4e0:	4628      	mov	r0, r5
 800f4e2:	4631      	mov	r1, r6
 800f4e4:	f7f1 fbd0 	bl	8000c88 <__aeabi_uldivmod>
 800f4e8:	4603      	mov	r3, r0
 800f4ea:	460c      	mov	r4, r1
 800f4ec:	461a      	mov	r2, r3
 800f4ee:	4b50      	ldr	r3, [pc, #320]	; (800f630 <UART_SetConfig+0x6f4>)
 800f4f0:	fba3 2302 	umull	r2, r3, r3, r2
 800f4f4:	095b      	lsrs	r3, r3, #5
 800f4f6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f4fa:	68bb      	ldr	r3, [r7, #8]
 800f4fc:	469b      	mov	fp, r3
 800f4fe:	f04f 0c00 	mov.w	ip, #0
 800f502:	46d9      	mov	r9, fp
 800f504:	46e2      	mov	sl, ip
 800f506:	eb19 0309 	adds.w	r3, r9, r9
 800f50a:	eb4a 040a 	adc.w	r4, sl, sl
 800f50e:	4699      	mov	r9, r3
 800f510:	46a2      	mov	sl, r4
 800f512:	eb19 090b 	adds.w	r9, r9, fp
 800f516:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f51a:	f04f 0100 	mov.w	r1, #0
 800f51e:	f04f 0200 	mov.w	r2, #0
 800f522:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f526:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f52a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f52e:	4689      	mov	r9, r1
 800f530:	4692      	mov	sl, r2
 800f532:	eb1b 0509 	adds.w	r5, fp, r9
 800f536:	eb4c 060a 	adc.w	r6, ip, sl
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	685b      	ldr	r3, [r3, #4]
 800f53e:	4619      	mov	r1, r3
 800f540:	f04f 0200 	mov.w	r2, #0
 800f544:	f04f 0300 	mov.w	r3, #0
 800f548:	f04f 0400 	mov.w	r4, #0
 800f54c:	0094      	lsls	r4, r2, #2
 800f54e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f552:	008b      	lsls	r3, r1, #2
 800f554:	461a      	mov	r2, r3
 800f556:	4623      	mov	r3, r4
 800f558:	4628      	mov	r0, r5
 800f55a:	4631      	mov	r1, r6
 800f55c:	f7f1 fb94 	bl	8000c88 <__aeabi_uldivmod>
 800f560:	4603      	mov	r3, r0
 800f562:	460c      	mov	r4, r1
 800f564:	461a      	mov	r2, r3
 800f566:	4b32      	ldr	r3, [pc, #200]	; (800f630 <UART_SetConfig+0x6f4>)
 800f568:	fba3 1302 	umull	r1, r3, r3, r2
 800f56c:	095b      	lsrs	r3, r3, #5
 800f56e:	2164      	movs	r1, #100	; 0x64
 800f570:	fb01 f303 	mul.w	r3, r1, r3
 800f574:	1ad3      	subs	r3, r2, r3
 800f576:	011b      	lsls	r3, r3, #4
 800f578:	3332      	adds	r3, #50	; 0x32
 800f57a:	4a2d      	ldr	r2, [pc, #180]	; (800f630 <UART_SetConfig+0x6f4>)
 800f57c:	fba2 2303 	umull	r2, r3, r2, r3
 800f580:	095b      	lsrs	r3, r3, #5
 800f582:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f586:	4498      	add	r8, r3
 800f588:	68bb      	ldr	r3, [r7, #8]
 800f58a:	469b      	mov	fp, r3
 800f58c:	f04f 0c00 	mov.w	ip, #0
 800f590:	46d9      	mov	r9, fp
 800f592:	46e2      	mov	sl, ip
 800f594:	eb19 0309 	adds.w	r3, r9, r9
 800f598:	eb4a 040a 	adc.w	r4, sl, sl
 800f59c:	4699      	mov	r9, r3
 800f59e:	46a2      	mov	sl, r4
 800f5a0:	eb19 090b 	adds.w	r9, r9, fp
 800f5a4:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f5a8:	f04f 0100 	mov.w	r1, #0
 800f5ac:	f04f 0200 	mov.w	r2, #0
 800f5b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f5b4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f5b8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f5bc:	4689      	mov	r9, r1
 800f5be:	4692      	mov	sl, r2
 800f5c0:	eb1b 0509 	adds.w	r5, fp, r9
 800f5c4:	eb4c 060a 	adc.w	r6, ip, sl
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	685b      	ldr	r3, [r3, #4]
 800f5cc:	4619      	mov	r1, r3
 800f5ce:	f04f 0200 	mov.w	r2, #0
 800f5d2:	f04f 0300 	mov.w	r3, #0
 800f5d6:	f04f 0400 	mov.w	r4, #0
 800f5da:	0094      	lsls	r4, r2, #2
 800f5dc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f5e0:	008b      	lsls	r3, r1, #2
 800f5e2:	461a      	mov	r2, r3
 800f5e4:	4623      	mov	r3, r4
 800f5e6:	4628      	mov	r0, r5
 800f5e8:	4631      	mov	r1, r6
 800f5ea:	f7f1 fb4d 	bl	8000c88 <__aeabi_uldivmod>
 800f5ee:	4603      	mov	r3, r0
 800f5f0:	460c      	mov	r4, r1
 800f5f2:	461a      	mov	r2, r3
 800f5f4:	4b0e      	ldr	r3, [pc, #56]	; (800f630 <UART_SetConfig+0x6f4>)
 800f5f6:	fba3 1302 	umull	r1, r3, r3, r2
 800f5fa:	095b      	lsrs	r3, r3, #5
 800f5fc:	2164      	movs	r1, #100	; 0x64
 800f5fe:	fb01 f303 	mul.w	r3, r1, r3
 800f602:	1ad3      	subs	r3, r2, r3
 800f604:	011b      	lsls	r3, r3, #4
 800f606:	3332      	adds	r3, #50	; 0x32
 800f608:	4a09      	ldr	r2, [pc, #36]	; (800f630 <UART_SetConfig+0x6f4>)
 800f60a:	fba2 2303 	umull	r2, r3, r2, r3
 800f60e:	095b      	lsrs	r3, r3, #5
 800f610:	f003 020f 	and.w	r2, r3, #15
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	4442      	add	r2, r8
 800f61a:	609a      	str	r2, [r3, #8]
}
 800f61c:	e7ff      	b.n	800f61e <UART_SetConfig+0x6e2>
 800f61e:	bf00      	nop
 800f620:	3714      	adds	r7, #20
 800f622:	46bd      	mov	sp, r7
 800f624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f628:	40011000 	.word	0x40011000
 800f62c:	40011400 	.word	0x40011400
 800f630:	51eb851f 	.word	0x51eb851f

0800f634 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800f634:	b480      	push	{r7}
 800f636:	b085      	sub	sp, #20
 800f638:	af00      	add	r7, sp, #0
 800f63a:	6078      	str	r0, [r7, #4]
 800f63c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800f63e:	2300      	movs	r3, #0
 800f640:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800f642:	683b      	ldr	r3, [r7, #0]
 800f644:	681a      	ldr	r2, [r3, #0]
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f64c:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800f64e:	68fa      	ldr	r2, [r7, #12]
 800f650:	4b20      	ldr	r3, [pc, #128]	; (800f6d4 <FSMC_NORSRAM_Init+0xa0>)
 800f652:	4013      	ands	r3, r2
 800f654:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800f656:	683b      	ldr	r3, [r7, #0]
 800f658:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800f65a:	683b      	ldr	r3, [r7, #0]
 800f65c:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800f65e:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800f660:	683b      	ldr	r3, [r7, #0]
 800f662:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800f664:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800f666:	683b      	ldr	r3, [r7, #0]
 800f668:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800f66a:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800f66c:	683b      	ldr	r3, [r7, #0]
 800f66e:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800f670:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800f672:	683b      	ldr	r3, [r7, #0]
 800f674:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800f676:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800f678:	683b      	ldr	r3, [r7, #0]
 800f67a:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800f67c:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800f67e:	683b      	ldr	r3, [r7, #0]
 800f680:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800f682:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800f684:	683b      	ldr	r3, [r7, #0]
 800f686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800f688:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800f68a:	683b      	ldr	r3, [r7, #0]
 800f68c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800f68e:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800f690:	683b      	ldr	r3, [r7, #0]
 800f692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800f694:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800f696:	683b      	ldr	r3, [r7, #0]
 800f698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800f69a:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800f69c:	683b      	ldr	r3, [r7, #0]
 800f69e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800f6a0:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800f6a2:	68fa      	ldr	r2, [r7, #12]
 800f6a4:	4313      	orrs	r3, r2
 800f6a6:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800f6a8:	683b      	ldr	r3, [r7, #0]
 800f6aa:	689b      	ldr	r3, [r3, #8]
 800f6ac:	2b08      	cmp	r3, #8
 800f6ae:	d103      	bne.n	800f6b8 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f6b6:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800f6b8:	683b      	ldr	r3, [r7, #0]
 800f6ba:	681a      	ldr	r2, [r3, #0]
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	68f9      	ldr	r1, [r7, #12]
 800f6c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800f6c4:	2300      	movs	r3, #0
}
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	3714      	adds	r7, #20
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d0:	4770      	bx	lr
 800f6d2:	bf00      	nop
 800f6d4:	fff00080 	.word	0xfff00080

0800f6d8 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800f6d8:	b480      	push	{r7}
 800f6da:	b087      	sub	sp, #28
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	60f8      	str	r0, [r7, #12]
 800f6e0:	60b9      	str	r1, [r7, #8]
 800f6e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	1c5a      	adds	r2, r3, #1
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6f2:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800f6f4:	697b      	ldr	r3, [r7, #20]
 800f6f6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800f6fa:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f6fc:	68bb      	ldr	r3, [r7, #8]
 800f6fe:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800f700:	68bb      	ldr	r3, [r7, #8]
 800f702:	685b      	ldr	r3, [r3, #4]
 800f704:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f706:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800f708:	68bb      	ldr	r3, [r7, #8]
 800f70a:	689b      	ldr	r3, [r3, #8]
 800f70c:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800f70e:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800f710:	68bb      	ldr	r3, [r7, #8]
 800f712:	68db      	ldr	r3, [r3, #12]
 800f714:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800f716:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800f718:	68bb      	ldr	r3, [r7, #8]
 800f71a:	691b      	ldr	r3, [r3, #16]
 800f71c:	3b01      	subs	r3, #1
 800f71e:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800f720:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800f722:	68bb      	ldr	r3, [r7, #8]
 800f724:	695b      	ldr	r3, [r3, #20]
 800f726:	3b02      	subs	r3, #2
 800f728:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800f72a:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800f72c:	68bb      	ldr	r3, [r7, #8]
 800f72e:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f730:	4313      	orrs	r3, r2
 800f732:	697a      	ldr	r2, [r7, #20]
 800f734:	4313      	orrs	r3, r2
 800f736:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	1c5a      	adds	r2, r3, #1
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	6979      	ldr	r1, [r7, #20]
 800f740:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800f744:	2300      	movs	r3, #0
}
 800f746:	4618      	mov	r0, r3
 800f748:	371c      	adds	r7, #28
 800f74a:	46bd      	mov	sp, r7
 800f74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f750:	4770      	bx	lr
	...

0800f754 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800f754:	b480      	push	{r7}
 800f756:	b087      	sub	sp, #28
 800f758:	af00      	add	r7, sp, #0
 800f75a:	60f8      	str	r0, [r7, #12]
 800f75c:	60b9      	str	r1, [r7, #8]
 800f75e:	607a      	str	r2, [r7, #4]
 800f760:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800f762:	2300      	movs	r3, #0
 800f764:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800f766:	683b      	ldr	r3, [r7, #0]
 800f768:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f76c:	d122      	bne.n	800f7b4 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	687a      	ldr	r2, [r7, #4]
 800f772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f776:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800f778:	697a      	ldr	r2, [r7, #20]
 800f77a:	4b15      	ldr	r3, [pc, #84]	; (800f7d0 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800f77c:	4013      	ands	r3, r2
 800f77e:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f780:	68bb      	ldr	r3, [r7, #8]
 800f782:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800f784:	68bb      	ldr	r3, [r7, #8]
 800f786:	685b      	ldr	r3, [r3, #4]
 800f788:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f78a:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800f78c:	68bb      	ldr	r3, [r7, #8]
 800f78e:	689b      	ldr	r3, [r3, #8]
 800f790:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800f792:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800f794:	68bb      	ldr	r3, [r7, #8]
 800f796:	68db      	ldr	r3, [r3, #12]
 800f798:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800f79a:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800f79c:	68bb      	ldr	r3, [r7, #8]
 800f79e:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800f7a0:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f7a2:	697a      	ldr	r2, [r7, #20]
 800f7a4:	4313      	orrs	r3, r2
 800f7a6:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	687a      	ldr	r2, [r7, #4]
 800f7ac:	6979      	ldr	r1, [r7, #20]
 800f7ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800f7b2:	e005      	b.n	800f7c0 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	687a      	ldr	r2, [r7, #4]
 800f7b8:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800f7bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800f7c0:	2300      	movs	r3, #0
}
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	371c      	adds	r7, #28
 800f7c6:	46bd      	mov	sp, r7
 800f7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7cc:	4770      	bx	lr
 800f7ce:	bf00      	nop
 800f7d0:	cff00000 	.word	0xcff00000

0800f7d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f7d4:	b084      	sub	sp, #16
 800f7d6:	b580      	push	{r7, lr}
 800f7d8:	b084      	sub	sp, #16
 800f7da:	af00      	add	r7, sp, #0
 800f7dc:	6078      	str	r0, [r7, #4]
 800f7de:	f107 001c 	add.w	r0, r7, #28
 800f7e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7e8:	2b01      	cmp	r3, #1
 800f7ea:	d122      	bne.n	800f832 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	68db      	ldr	r3, [r3, #12]
 800f7fc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800f800:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f804:	687a      	ldr	r2, [r7, #4]
 800f806:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	68db      	ldr	r3, [r3, #12]
 800f80c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f814:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f816:	2b01      	cmp	r3, #1
 800f818:	d105      	bne.n	800f826 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	68db      	ldr	r3, [r3, #12]
 800f81e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800f826:	6878      	ldr	r0, [r7, #4]
 800f828:	f001 fac6 	bl	8010db8 <USB_CoreReset>
 800f82c:	4603      	mov	r3, r0
 800f82e:	73fb      	strb	r3, [r7, #15]
 800f830:	e01a      	b.n	800f868 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	68db      	ldr	r3, [r3, #12]
 800f836:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f83e:	6878      	ldr	r0, [r7, #4]
 800f840:	f001 faba 	bl	8010db8 <USB_CoreReset>
 800f844:	4603      	mov	r3, r0
 800f846:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800f848:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d106      	bne.n	800f85c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f852:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	639a      	str	r2, [r3, #56]	; 0x38
 800f85a:	e005      	b.n	800f868 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f860:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800f868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f86a:	2b01      	cmp	r3, #1
 800f86c:	d10b      	bne.n	800f886 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	689b      	ldr	r3, [r3, #8]
 800f872:	f043 0206 	orr.w	r2, r3, #6
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	689b      	ldr	r3, [r3, #8]
 800f87e:	f043 0220 	orr.w	r2, r3, #32
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f886:	7bfb      	ldrb	r3, [r7, #15]
}
 800f888:	4618      	mov	r0, r3
 800f88a:	3710      	adds	r7, #16
 800f88c:	46bd      	mov	sp, r7
 800f88e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f892:	b004      	add	sp, #16
 800f894:	4770      	bx	lr
	...

0800f898 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800f898:	b480      	push	{r7}
 800f89a:	b087      	sub	sp, #28
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	60f8      	str	r0, [r7, #12]
 800f8a0:	60b9      	str	r1, [r7, #8]
 800f8a2:	4613      	mov	r3, r2
 800f8a4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800f8a6:	79fb      	ldrb	r3, [r7, #7]
 800f8a8:	2b02      	cmp	r3, #2
 800f8aa:	d165      	bne.n	800f978 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800f8ac:	68bb      	ldr	r3, [r7, #8]
 800f8ae:	4a41      	ldr	r2, [pc, #260]	; (800f9b4 <USB_SetTurnaroundTime+0x11c>)
 800f8b0:	4293      	cmp	r3, r2
 800f8b2:	d906      	bls.n	800f8c2 <USB_SetTurnaroundTime+0x2a>
 800f8b4:	68bb      	ldr	r3, [r7, #8]
 800f8b6:	4a40      	ldr	r2, [pc, #256]	; (800f9b8 <USB_SetTurnaroundTime+0x120>)
 800f8b8:	4293      	cmp	r3, r2
 800f8ba:	d802      	bhi.n	800f8c2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800f8bc:	230f      	movs	r3, #15
 800f8be:	617b      	str	r3, [r7, #20]
 800f8c0:	e062      	b.n	800f988 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800f8c2:	68bb      	ldr	r3, [r7, #8]
 800f8c4:	4a3c      	ldr	r2, [pc, #240]	; (800f9b8 <USB_SetTurnaroundTime+0x120>)
 800f8c6:	4293      	cmp	r3, r2
 800f8c8:	d906      	bls.n	800f8d8 <USB_SetTurnaroundTime+0x40>
 800f8ca:	68bb      	ldr	r3, [r7, #8]
 800f8cc:	4a3b      	ldr	r2, [pc, #236]	; (800f9bc <USB_SetTurnaroundTime+0x124>)
 800f8ce:	4293      	cmp	r3, r2
 800f8d0:	d802      	bhi.n	800f8d8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800f8d2:	230e      	movs	r3, #14
 800f8d4:	617b      	str	r3, [r7, #20]
 800f8d6:	e057      	b.n	800f988 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800f8d8:	68bb      	ldr	r3, [r7, #8]
 800f8da:	4a38      	ldr	r2, [pc, #224]	; (800f9bc <USB_SetTurnaroundTime+0x124>)
 800f8dc:	4293      	cmp	r3, r2
 800f8de:	d906      	bls.n	800f8ee <USB_SetTurnaroundTime+0x56>
 800f8e0:	68bb      	ldr	r3, [r7, #8]
 800f8e2:	4a37      	ldr	r2, [pc, #220]	; (800f9c0 <USB_SetTurnaroundTime+0x128>)
 800f8e4:	4293      	cmp	r3, r2
 800f8e6:	d802      	bhi.n	800f8ee <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800f8e8:	230d      	movs	r3, #13
 800f8ea:	617b      	str	r3, [r7, #20]
 800f8ec:	e04c      	b.n	800f988 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800f8ee:	68bb      	ldr	r3, [r7, #8]
 800f8f0:	4a33      	ldr	r2, [pc, #204]	; (800f9c0 <USB_SetTurnaroundTime+0x128>)
 800f8f2:	4293      	cmp	r3, r2
 800f8f4:	d906      	bls.n	800f904 <USB_SetTurnaroundTime+0x6c>
 800f8f6:	68bb      	ldr	r3, [r7, #8]
 800f8f8:	4a32      	ldr	r2, [pc, #200]	; (800f9c4 <USB_SetTurnaroundTime+0x12c>)
 800f8fa:	4293      	cmp	r3, r2
 800f8fc:	d802      	bhi.n	800f904 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800f8fe:	230c      	movs	r3, #12
 800f900:	617b      	str	r3, [r7, #20]
 800f902:	e041      	b.n	800f988 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800f904:	68bb      	ldr	r3, [r7, #8]
 800f906:	4a2f      	ldr	r2, [pc, #188]	; (800f9c4 <USB_SetTurnaroundTime+0x12c>)
 800f908:	4293      	cmp	r3, r2
 800f90a:	d906      	bls.n	800f91a <USB_SetTurnaroundTime+0x82>
 800f90c:	68bb      	ldr	r3, [r7, #8]
 800f90e:	4a2e      	ldr	r2, [pc, #184]	; (800f9c8 <USB_SetTurnaroundTime+0x130>)
 800f910:	4293      	cmp	r3, r2
 800f912:	d802      	bhi.n	800f91a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800f914:	230b      	movs	r3, #11
 800f916:	617b      	str	r3, [r7, #20]
 800f918:	e036      	b.n	800f988 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800f91a:	68bb      	ldr	r3, [r7, #8]
 800f91c:	4a2a      	ldr	r2, [pc, #168]	; (800f9c8 <USB_SetTurnaroundTime+0x130>)
 800f91e:	4293      	cmp	r3, r2
 800f920:	d906      	bls.n	800f930 <USB_SetTurnaroundTime+0x98>
 800f922:	68bb      	ldr	r3, [r7, #8]
 800f924:	4a29      	ldr	r2, [pc, #164]	; (800f9cc <USB_SetTurnaroundTime+0x134>)
 800f926:	4293      	cmp	r3, r2
 800f928:	d802      	bhi.n	800f930 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800f92a:	230a      	movs	r3, #10
 800f92c:	617b      	str	r3, [r7, #20]
 800f92e:	e02b      	b.n	800f988 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800f930:	68bb      	ldr	r3, [r7, #8]
 800f932:	4a26      	ldr	r2, [pc, #152]	; (800f9cc <USB_SetTurnaroundTime+0x134>)
 800f934:	4293      	cmp	r3, r2
 800f936:	d906      	bls.n	800f946 <USB_SetTurnaroundTime+0xae>
 800f938:	68bb      	ldr	r3, [r7, #8]
 800f93a:	4a25      	ldr	r2, [pc, #148]	; (800f9d0 <USB_SetTurnaroundTime+0x138>)
 800f93c:	4293      	cmp	r3, r2
 800f93e:	d802      	bhi.n	800f946 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800f940:	2309      	movs	r3, #9
 800f942:	617b      	str	r3, [r7, #20]
 800f944:	e020      	b.n	800f988 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800f946:	68bb      	ldr	r3, [r7, #8]
 800f948:	4a21      	ldr	r2, [pc, #132]	; (800f9d0 <USB_SetTurnaroundTime+0x138>)
 800f94a:	4293      	cmp	r3, r2
 800f94c:	d906      	bls.n	800f95c <USB_SetTurnaroundTime+0xc4>
 800f94e:	68bb      	ldr	r3, [r7, #8]
 800f950:	4a20      	ldr	r2, [pc, #128]	; (800f9d4 <USB_SetTurnaroundTime+0x13c>)
 800f952:	4293      	cmp	r3, r2
 800f954:	d802      	bhi.n	800f95c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800f956:	2308      	movs	r3, #8
 800f958:	617b      	str	r3, [r7, #20]
 800f95a:	e015      	b.n	800f988 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800f95c:	68bb      	ldr	r3, [r7, #8]
 800f95e:	4a1d      	ldr	r2, [pc, #116]	; (800f9d4 <USB_SetTurnaroundTime+0x13c>)
 800f960:	4293      	cmp	r3, r2
 800f962:	d906      	bls.n	800f972 <USB_SetTurnaroundTime+0xda>
 800f964:	68bb      	ldr	r3, [r7, #8]
 800f966:	4a1c      	ldr	r2, [pc, #112]	; (800f9d8 <USB_SetTurnaroundTime+0x140>)
 800f968:	4293      	cmp	r3, r2
 800f96a:	d802      	bhi.n	800f972 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800f96c:	2307      	movs	r3, #7
 800f96e:	617b      	str	r3, [r7, #20]
 800f970:	e00a      	b.n	800f988 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800f972:	2306      	movs	r3, #6
 800f974:	617b      	str	r3, [r7, #20]
 800f976:	e007      	b.n	800f988 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800f978:	79fb      	ldrb	r3, [r7, #7]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d102      	bne.n	800f984 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800f97e:	2309      	movs	r3, #9
 800f980:	617b      	str	r3, [r7, #20]
 800f982:	e001      	b.n	800f988 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800f984:	2309      	movs	r3, #9
 800f986:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	68db      	ldr	r3, [r3, #12]
 800f98c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	68da      	ldr	r2, [r3, #12]
 800f998:	697b      	ldr	r3, [r7, #20]
 800f99a:	029b      	lsls	r3, r3, #10
 800f99c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800f9a0:	431a      	orrs	r2, r3
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f9a6:	2300      	movs	r3, #0
}
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	371c      	adds	r7, #28
 800f9ac:	46bd      	mov	sp, r7
 800f9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b2:	4770      	bx	lr
 800f9b4:	00d8acbf 	.word	0x00d8acbf
 800f9b8:	00e4e1bf 	.word	0x00e4e1bf
 800f9bc:	00f423ff 	.word	0x00f423ff
 800f9c0:	0106737f 	.word	0x0106737f
 800f9c4:	011a499f 	.word	0x011a499f
 800f9c8:	01312cff 	.word	0x01312cff
 800f9cc:	014ca43f 	.word	0x014ca43f
 800f9d0:	016e35ff 	.word	0x016e35ff
 800f9d4:	01a6ab1f 	.word	0x01a6ab1f
 800f9d8:	01e847ff 	.word	0x01e847ff

0800f9dc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f9dc:	b480      	push	{r7}
 800f9de:	b083      	sub	sp, #12
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	689b      	ldr	r3, [r3, #8]
 800f9e8:	f043 0201 	orr.w	r2, r3, #1
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f9f0:	2300      	movs	r3, #0
}
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	370c      	adds	r7, #12
 800f9f6:	46bd      	mov	sp, r7
 800f9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9fc:	4770      	bx	lr

0800f9fe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f9fe:	b480      	push	{r7}
 800fa00:	b083      	sub	sp, #12
 800fa02:	af00      	add	r7, sp, #0
 800fa04:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	689b      	ldr	r3, [r3, #8]
 800fa0a:	f023 0201 	bic.w	r2, r3, #1
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800fa12:	2300      	movs	r3, #0
}
 800fa14:	4618      	mov	r0, r3
 800fa16:	370c      	adds	r7, #12
 800fa18:	46bd      	mov	sp, r7
 800fa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa1e:	4770      	bx	lr

0800fa20 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800fa20:	b580      	push	{r7, lr}
 800fa22:	b082      	sub	sp, #8
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]
 800fa28:	460b      	mov	r3, r1
 800fa2a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	68db      	ldr	r3, [r3, #12]
 800fa30:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800fa38:	78fb      	ldrb	r3, [r7, #3]
 800fa3a:	2b01      	cmp	r3, #1
 800fa3c:	d106      	bne.n	800fa4c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	68db      	ldr	r3, [r3, #12]
 800fa42:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	60da      	str	r2, [r3, #12]
 800fa4a:	e00b      	b.n	800fa64 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800fa4c:	78fb      	ldrb	r3, [r7, #3]
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d106      	bne.n	800fa60 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	68db      	ldr	r3, [r3, #12]
 800fa56:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	60da      	str	r2, [r3, #12]
 800fa5e:	e001      	b.n	800fa64 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800fa60:	2301      	movs	r3, #1
 800fa62:	e003      	b.n	800fa6c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800fa64:	2032      	movs	r0, #50	; 0x32
 800fa66:	f7fb fdf1 	bl	800b64c <HAL_Delay>

  return HAL_OK;
 800fa6a:	2300      	movs	r3, #0
}
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	3708      	adds	r7, #8
 800fa70:	46bd      	mov	sp, r7
 800fa72:	bd80      	pop	{r7, pc}

0800fa74 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fa74:	b084      	sub	sp, #16
 800fa76:	b580      	push	{r7, lr}
 800fa78:	b086      	sub	sp, #24
 800fa7a:	af00      	add	r7, sp, #0
 800fa7c:	6078      	str	r0, [r7, #4]
 800fa7e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800fa82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800fa86:	2300      	movs	r3, #0
 800fa88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800fa8e:	2300      	movs	r3, #0
 800fa90:	613b      	str	r3, [r7, #16]
 800fa92:	e009      	b.n	800faa8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800fa94:	687a      	ldr	r2, [r7, #4]
 800fa96:	693b      	ldr	r3, [r7, #16]
 800fa98:	3340      	adds	r3, #64	; 0x40
 800fa9a:	009b      	lsls	r3, r3, #2
 800fa9c:	4413      	add	r3, r2
 800fa9e:	2200      	movs	r2, #0
 800faa0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800faa2:	693b      	ldr	r3, [r7, #16]
 800faa4:	3301      	adds	r3, #1
 800faa6:	613b      	str	r3, [r7, #16]
 800faa8:	693b      	ldr	r3, [r7, #16]
 800faaa:	2b0e      	cmp	r3, #14
 800faac:	d9f2      	bls.n	800fa94 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800faae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d11c      	bne.n	800faee <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800faba:	685b      	ldr	r3, [r3, #4]
 800fabc:	68fa      	ldr	r2, [r7, #12]
 800fabe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fac2:	f043 0302 	orr.w	r3, r3, #2
 800fac6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800facc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fad8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fae4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	639a      	str	r2, [r3, #56]	; 0x38
 800faec:	e00b      	b.n	800fb06 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800faf2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fafe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fb0c:	461a      	mov	r2, r3
 800fb0e:	2300      	movs	r3, #0
 800fb10:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb18:	4619      	mov	r1, r3
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb20:	461a      	mov	r2, r3
 800fb22:	680b      	ldr	r3, [r1, #0]
 800fb24:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800fb26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb28:	2b01      	cmp	r3, #1
 800fb2a:	d10c      	bne.n	800fb46 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800fb2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d104      	bne.n	800fb3c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800fb32:	2100      	movs	r1, #0
 800fb34:	6878      	ldr	r0, [r7, #4]
 800fb36:	f000 f949 	bl	800fdcc <USB_SetDevSpeed>
 800fb3a:	e008      	b.n	800fb4e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800fb3c:	2101      	movs	r1, #1
 800fb3e:	6878      	ldr	r0, [r7, #4]
 800fb40:	f000 f944 	bl	800fdcc <USB_SetDevSpeed>
 800fb44:	e003      	b.n	800fb4e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800fb46:	2103      	movs	r1, #3
 800fb48:	6878      	ldr	r0, [r7, #4]
 800fb4a:	f000 f93f 	bl	800fdcc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800fb4e:	2110      	movs	r1, #16
 800fb50:	6878      	ldr	r0, [r7, #4]
 800fb52:	f000 f8f3 	bl	800fd3c <USB_FlushTxFifo>
 800fb56:	4603      	mov	r3, r0
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d001      	beq.n	800fb60 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800fb5c:	2301      	movs	r3, #1
 800fb5e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800fb60:	6878      	ldr	r0, [r7, #4]
 800fb62:	f000 f911 	bl	800fd88 <USB_FlushRxFifo>
 800fb66:	4603      	mov	r3, r0
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d001      	beq.n	800fb70 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800fb6c:	2301      	movs	r3, #1
 800fb6e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb76:	461a      	mov	r2, r3
 800fb78:	2300      	movs	r3, #0
 800fb7a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb82:	461a      	mov	r2, r3
 800fb84:	2300      	movs	r3, #0
 800fb86:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb8e:	461a      	mov	r2, r3
 800fb90:	2300      	movs	r3, #0
 800fb92:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fb94:	2300      	movs	r3, #0
 800fb96:	613b      	str	r3, [r7, #16]
 800fb98:	e043      	b.n	800fc22 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fb9a:	693b      	ldr	r3, [r7, #16]
 800fb9c:	015a      	lsls	r2, r3, #5
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	4413      	add	r3, r2
 800fba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fbac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fbb0:	d118      	bne.n	800fbe4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800fbb2:	693b      	ldr	r3, [r7, #16]
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d10a      	bne.n	800fbce <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800fbb8:	693b      	ldr	r3, [r7, #16]
 800fbba:	015a      	lsls	r2, r3, #5
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	4413      	add	r3, r2
 800fbc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbc4:	461a      	mov	r2, r3
 800fbc6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fbca:	6013      	str	r3, [r2, #0]
 800fbcc:	e013      	b.n	800fbf6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800fbce:	693b      	ldr	r3, [r7, #16]
 800fbd0:	015a      	lsls	r2, r3, #5
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	4413      	add	r3, r2
 800fbd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbda:	461a      	mov	r2, r3
 800fbdc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fbe0:	6013      	str	r3, [r2, #0]
 800fbe2:	e008      	b.n	800fbf6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800fbe4:	693b      	ldr	r3, [r7, #16]
 800fbe6:	015a      	lsls	r2, r3, #5
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	4413      	add	r3, r2
 800fbec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbf0:	461a      	mov	r2, r3
 800fbf2:	2300      	movs	r3, #0
 800fbf4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800fbf6:	693b      	ldr	r3, [r7, #16]
 800fbf8:	015a      	lsls	r2, r3, #5
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	4413      	add	r3, r2
 800fbfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc02:	461a      	mov	r2, r3
 800fc04:	2300      	movs	r3, #0
 800fc06:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800fc08:	693b      	ldr	r3, [r7, #16]
 800fc0a:	015a      	lsls	r2, r3, #5
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	4413      	add	r3, r2
 800fc10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc14:	461a      	mov	r2, r3
 800fc16:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fc1a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fc1c:	693b      	ldr	r3, [r7, #16]
 800fc1e:	3301      	adds	r3, #1
 800fc20:	613b      	str	r3, [r7, #16]
 800fc22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc24:	693a      	ldr	r2, [r7, #16]
 800fc26:	429a      	cmp	r2, r3
 800fc28:	d3b7      	bcc.n	800fb9a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fc2a:	2300      	movs	r3, #0
 800fc2c:	613b      	str	r3, [r7, #16]
 800fc2e:	e043      	b.n	800fcb8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fc30:	693b      	ldr	r3, [r7, #16]
 800fc32:	015a      	lsls	r2, r3, #5
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	4413      	add	r3, r2
 800fc38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fc42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fc46:	d118      	bne.n	800fc7a <USB_DevInit+0x206>
    {
      if (i == 0U)
 800fc48:	693b      	ldr	r3, [r7, #16]
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d10a      	bne.n	800fc64 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800fc4e:	693b      	ldr	r3, [r7, #16]
 800fc50:	015a      	lsls	r2, r3, #5
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	4413      	add	r3, r2
 800fc56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc5a:	461a      	mov	r2, r3
 800fc5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fc60:	6013      	str	r3, [r2, #0]
 800fc62:	e013      	b.n	800fc8c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800fc64:	693b      	ldr	r3, [r7, #16]
 800fc66:	015a      	lsls	r2, r3, #5
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	4413      	add	r3, r2
 800fc6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc70:	461a      	mov	r2, r3
 800fc72:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fc76:	6013      	str	r3, [r2, #0]
 800fc78:	e008      	b.n	800fc8c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800fc7a:	693b      	ldr	r3, [r7, #16]
 800fc7c:	015a      	lsls	r2, r3, #5
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	4413      	add	r3, r2
 800fc82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc86:	461a      	mov	r2, r3
 800fc88:	2300      	movs	r3, #0
 800fc8a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800fc8c:	693b      	ldr	r3, [r7, #16]
 800fc8e:	015a      	lsls	r2, r3, #5
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	4413      	add	r3, r2
 800fc94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc98:	461a      	mov	r2, r3
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800fc9e:	693b      	ldr	r3, [r7, #16]
 800fca0:	015a      	lsls	r2, r3, #5
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	4413      	add	r3, r2
 800fca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fcaa:	461a      	mov	r2, r3
 800fcac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fcb0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fcb2:	693b      	ldr	r3, [r7, #16]
 800fcb4:	3301      	adds	r3, #1
 800fcb6:	613b      	str	r3, [r7, #16]
 800fcb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcba:	693a      	ldr	r2, [r7, #16]
 800fcbc:	429a      	cmp	r2, r3
 800fcbe:	d3b7      	bcc.n	800fc30 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fcc6:	691b      	ldr	r3, [r3, #16]
 800fcc8:	68fa      	ldr	r2, [r7, #12]
 800fcca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fcce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fcd2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	2200      	movs	r2, #0
 800fcd8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800fce0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800fce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d105      	bne.n	800fcf4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	699b      	ldr	r3, [r3, #24]
 800fcec:	f043 0210 	orr.w	r2, r3, #16
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	699a      	ldr	r2, [r3, #24]
 800fcf8:	4b0f      	ldr	r3, [pc, #60]	; (800fd38 <USB_DevInit+0x2c4>)
 800fcfa:	4313      	orrs	r3, r2
 800fcfc:	687a      	ldr	r2, [r7, #4]
 800fcfe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800fd00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d005      	beq.n	800fd12 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	699b      	ldr	r3, [r3, #24]
 800fd0a:	f043 0208 	orr.w	r2, r3, #8
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800fd12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd14:	2b01      	cmp	r3, #1
 800fd16:	d107      	bne.n	800fd28 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	699b      	ldr	r3, [r3, #24]
 800fd1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fd20:	f043 0304 	orr.w	r3, r3, #4
 800fd24:	687a      	ldr	r2, [r7, #4]
 800fd26:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800fd28:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	3718      	adds	r7, #24
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fd34:	b004      	add	sp, #16
 800fd36:	4770      	bx	lr
 800fd38:	803c3800 	.word	0x803c3800

0800fd3c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800fd3c:	b480      	push	{r7}
 800fd3e:	b085      	sub	sp, #20
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	6078      	str	r0, [r7, #4]
 800fd44:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800fd46:	2300      	movs	r3, #0
 800fd48:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800fd4a:	683b      	ldr	r3, [r7, #0]
 800fd4c:	019b      	lsls	r3, r3, #6
 800fd4e:	f043 0220 	orr.w	r2, r3, #32
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	3301      	adds	r3, #1
 800fd5a:	60fb      	str	r3, [r7, #12]
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	4a09      	ldr	r2, [pc, #36]	; (800fd84 <USB_FlushTxFifo+0x48>)
 800fd60:	4293      	cmp	r3, r2
 800fd62:	d901      	bls.n	800fd68 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800fd64:	2303      	movs	r3, #3
 800fd66:	e006      	b.n	800fd76 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	691b      	ldr	r3, [r3, #16]
 800fd6c:	f003 0320 	and.w	r3, r3, #32
 800fd70:	2b20      	cmp	r3, #32
 800fd72:	d0f0      	beq.n	800fd56 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800fd74:	2300      	movs	r3, #0
}
 800fd76:	4618      	mov	r0, r3
 800fd78:	3714      	adds	r7, #20
 800fd7a:	46bd      	mov	sp, r7
 800fd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd80:	4770      	bx	lr
 800fd82:	bf00      	nop
 800fd84:	00030d40 	.word	0x00030d40

0800fd88 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800fd88:	b480      	push	{r7}
 800fd8a:	b085      	sub	sp, #20
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800fd90:	2300      	movs	r3, #0
 800fd92:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	2210      	movs	r2, #16
 800fd98:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	3301      	adds	r3, #1
 800fd9e:	60fb      	str	r3, [r7, #12]
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	4a09      	ldr	r2, [pc, #36]	; (800fdc8 <USB_FlushRxFifo+0x40>)
 800fda4:	4293      	cmp	r3, r2
 800fda6:	d901      	bls.n	800fdac <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800fda8:	2303      	movs	r3, #3
 800fdaa:	e006      	b.n	800fdba <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	691b      	ldr	r3, [r3, #16]
 800fdb0:	f003 0310 	and.w	r3, r3, #16
 800fdb4:	2b10      	cmp	r3, #16
 800fdb6:	d0f0      	beq.n	800fd9a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800fdb8:	2300      	movs	r3, #0
}
 800fdba:	4618      	mov	r0, r3
 800fdbc:	3714      	adds	r7, #20
 800fdbe:	46bd      	mov	sp, r7
 800fdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc4:	4770      	bx	lr
 800fdc6:	bf00      	nop
 800fdc8:	00030d40 	.word	0x00030d40

0800fdcc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800fdcc:	b480      	push	{r7}
 800fdce:	b085      	sub	sp, #20
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	6078      	str	r0, [r7, #4]
 800fdd4:	460b      	mov	r3, r1
 800fdd6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fde2:	681a      	ldr	r2, [r3, #0]
 800fde4:	78fb      	ldrb	r3, [r7, #3]
 800fde6:	68f9      	ldr	r1, [r7, #12]
 800fde8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fdec:	4313      	orrs	r3, r2
 800fdee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800fdf0:	2300      	movs	r3, #0
}
 800fdf2:	4618      	mov	r0, r3
 800fdf4:	3714      	adds	r7, #20
 800fdf6:	46bd      	mov	sp, r7
 800fdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdfc:	4770      	bx	lr

0800fdfe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800fdfe:	b480      	push	{r7}
 800fe00:	b087      	sub	sp, #28
 800fe02:	af00      	add	r7, sp, #0
 800fe04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800fe0a:	693b      	ldr	r3, [r7, #16]
 800fe0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe10:	689b      	ldr	r3, [r3, #8]
 800fe12:	f003 0306 	and.w	r3, r3, #6
 800fe16:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d102      	bne.n	800fe24 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800fe1e:	2300      	movs	r3, #0
 800fe20:	75fb      	strb	r3, [r7, #23]
 800fe22:	e00a      	b.n	800fe3a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	2b02      	cmp	r3, #2
 800fe28:	d002      	beq.n	800fe30 <USB_GetDevSpeed+0x32>
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	2b06      	cmp	r3, #6
 800fe2e:	d102      	bne.n	800fe36 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800fe30:	2302      	movs	r3, #2
 800fe32:	75fb      	strb	r3, [r7, #23]
 800fe34:	e001      	b.n	800fe3a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800fe36:	230f      	movs	r3, #15
 800fe38:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800fe3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe3c:	4618      	mov	r0, r3
 800fe3e:	371c      	adds	r7, #28
 800fe40:	46bd      	mov	sp, r7
 800fe42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe46:	4770      	bx	lr

0800fe48 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fe48:	b480      	push	{r7}
 800fe4a:	b085      	sub	sp, #20
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	6078      	str	r0, [r7, #4]
 800fe50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fe56:	683b      	ldr	r3, [r7, #0]
 800fe58:	781b      	ldrb	r3, [r3, #0]
 800fe5a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800fe5c:	683b      	ldr	r3, [r7, #0]
 800fe5e:	785b      	ldrb	r3, [r3, #1]
 800fe60:	2b01      	cmp	r3, #1
 800fe62:	d13a      	bne.n	800feda <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe6a:	69da      	ldr	r2, [r3, #28]
 800fe6c:	683b      	ldr	r3, [r7, #0]
 800fe6e:	781b      	ldrb	r3, [r3, #0]
 800fe70:	f003 030f 	and.w	r3, r3, #15
 800fe74:	2101      	movs	r1, #1
 800fe76:	fa01 f303 	lsl.w	r3, r1, r3
 800fe7a:	b29b      	uxth	r3, r3
 800fe7c:	68f9      	ldr	r1, [r7, #12]
 800fe7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fe82:	4313      	orrs	r3, r2
 800fe84:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800fe86:	68bb      	ldr	r3, [r7, #8]
 800fe88:	015a      	lsls	r2, r3, #5
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	4413      	add	r3, r2
 800fe8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d155      	bne.n	800ff48 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fe9c:	68bb      	ldr	r3, [r7, #8]
 800fe9e:	015a      	lsls	r2, r3, #5
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	4413      	add	r3, r2
 800fea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fea8:	681a      	ldr	r2, [r3, #0]
 800feaa:	683b      	ldr	r3, [r7, #0]
 800feac:	689b      	ldr	r3, [r3, #8]
 800feae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800feb2:	683b      	ldr	r3, [r7, #0]
 800feb4:	78db      	ldrb	r3, [r3, #3]
 800feb6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800feb8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800feba:	68bb      	ldr	r3, [r7, #8]
 800febc:	059b      	lsls	r3, r3, #22
 800febe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fec0:	4313      	orrs	r3, r2
 800fec2:	68ba      	ldr	r2, [r7, #8]
 800fec4:	0151      	lsls	r1, r2, #5
 800fec6:	68fa      	ldr	r2, [r7, #12]
 800fec8:	440a      	add	r2, r1
 800feca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fece:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fed2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fed6:	6013      	str	r3, [r2, #0]
 800fed8:	e036      	b.n	800ff48 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fee0:	69da      	ldr	r2, [r3, #28]
 800fee2:	683b      	ldr	r3, [r7, #0]
 800fee4:	781b      	ldrb	r3, [r3, #0]
 800fee6:	f003 030f 	and.w	r3, r3, #15
 800feea:	2101      	movs	r1, #1
 800feec:	fa01 f303 	lsl.w	r3, r1, r3
 800fef0:	041b      	lsls	r3, r3, #16
 800fef2:	68f9      	ldr	r1, [r7, #12]
 800fef4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fef8:	4313      	orrs	r3, r2
 800fefa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800fefc:	68bb      	ldr	r3, [r7, #8]
 800fefe:	015a      	lsls	r2, r3, #5
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	4413      	add	r3, r2
 800ff04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d11a      	bne.n	800ff48 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ff12:	68bb      	ldr	r3, [r7, #8]
 800ff14:	015a      	lsls	r2, r3, #5
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	4413      	add	r3, r2
 800ff1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff1e:	681a      	ldr	r2, [r3, #0]
 800ff20:	683b      	ldr	r3, [r7, #0]
 800ff22:	689b      	ldr	r3, [r3, #8]
 800ff24:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ff28:	683b      	ldr	r3, [r7, #0]
 800ff2a:	78db      	ldrb	r3, [r3, #3]
 800ff2c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ff2e:	430b      	orrs	r3, r1
 800ff30:	4313      	orrs	r3, r2
 800ff32:	68ba      	ldr	r2, [r7, #8]
 800ff34:	0151      	lsls	r1, r2, #5
 800ff36:	68fa      	ldr	r2, [r7, #12]
 800ff38:	440a      	add	r2, r1
 800ff3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ff3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ff42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ff46:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ff48:	2300      	movs	r3, #0
}
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	3714      	adds	r7, #20
 800ff4e:	46bd      	mov	sp, r7
 800ff50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff54:	4770      	bx	lr
	...

0800ff58 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ff58:	b480      	push	{r7}
 800ff5a:	b085      	sub	sp, #20
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	6078      	str	r0, [r7, #4]
 800ff60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ff66:	683b      	ldr	r3, [r7, #0]
 800ff68:	781b      	ldrb	r3, [r3, #0]
 800ff6a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ff6c:	683b      	ldr	r3, [r7, #0]
 800ff6e:	785b      	ldrb	r3, [r3, #1]
 800ff70:	2b01      	cmp	r3, #1
 800ff72:	d161      	bne.n	8010038 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ff74:	68bb      	ldr	r3, [r7, #8]
 800ff76:	015a      	lsls	r2, r3, #5
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	4413      	add	r3, r2
 800ff7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ff86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ff8a:	d11f      	bne.n	800ffcc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ff8c:	68bb      	ldr	r3, [r7, #8]
 800ff8e:	015a      	lsls	r2, r3, #5
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	4413      	add	r3, r2
 800ff94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	68ba      	ldr	r2, [r7, #8]
 800ff9c:	0151      	lsls	r1, r2, #5
 800ff9e:	68fa      	ldr	r2, [r7, #12]
 800ffa0:	440a      	add	r2, r1
 800ffa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ffa6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ffaa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ffac:	68bb      	ldr	r3, [r7, #8]
 800ffae:	015a      	lsls	r2, r3, #5
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	4413      	add	r3, r2
 800ffb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	68ba      	ldr	r2, [r7, #8]
 800ffbc:	0151      	lsls	r1, r2, #5
 800ffbe:	68fa      	ldr	r2, [r7, #12]
 800ffc0:	440a      	add	r2, r1
 800ffc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ffc6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ffca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ffd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ffd4:	683b      	ldr	r3, [r7, #0]
 800ffd6:	781b      	ldrb	r3, [r3, #0]
 800ffd8:	f003 030f 	and.w	r3, r3, #15
 800ffdc:	2101      	movs	r1, #1
 800ffde:	fa01 f303 	lsl.w	r3, r1, r3
 800ffe2:	b29b      	uxth	r3, r3
 800ffe4:	43db      	mvns	r3, r3
 800ffe6:	68f9      	ldr	r1, [r7, #12]
 800ffe8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ffec:	4013      	ands	r3, r2
 800ffee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fff6:	69da      	ldr	r2, [r3, #28]
 800fff8:	683b      	ldr	r3, [r7, #0]
 800fffa:	781b      	ldrb	r3, [r3, #0]
 800fffc:	f003 030f 	and.w	r3, r3, #15
 8010000:	2101      	movs	r1, #1
 8010002:	fa01 f303 	lsl.w	r3, r1, r3
 8010006:	b29b      	uxth	r3, r3
 8010008:	43db      	mvns	r3, r3
 801000a:	68f9      	ldr	r1, [r7, #12]
 801000c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010010:	4013      	ands	r3, r2
 8010012:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8010014:	68bb      	ldr	r3, [r7, #8]
 8010016:	015a      	lsls	r2, r3, #5
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	4413      	add	r3, r2
 801001c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010020:	681a      	ldr	r2, [r3, #0]
 8010022:	68bb      	ldr	r3, [r7, #8]
 8010024:	0159      	lsls	r1, r3, #5
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	440b      	add	r3, r1
 801002a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801002e:	4619      	mov	r1, r3
 8010030:	4b35      	ldr	r3, [pc, #212]	; (8010108 <USB_DeactivateEndpoint+0x1b0>)
 8010032:	4013      	ands	r3, r2
 8010034:	600b      	str	r3, [r1, #0]
 8010036:	e060      	b.n	80100fa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010038:	68bb      	ldr	r3, [r7, #8]
 801003a:	015a      	lsls	r2, r3, #5
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	4413      	add	r3, r2
 8010040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801004a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801004e:	d11f      	bne.n	8010090 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8010050:	68bb      	ldr	r3, [r7, #8]
 8010052:	015a      	lsls	r2, r3, #5
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	4413      	add	r3, r2
 8010058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	68ba      	ldr	r2, [r7, #8]
 8010060:	0151      	lsls	r1, r2, #5
 8010062:	68fa      	ldr	r2, [r7, #12]
 8010064:	440a      	add	r2, r1
 8010066:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801006a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801006e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8010070:	68bb      	ldr	r3, [r7, #8]
 8010072:	015a      	lsls	r2, r3, #5
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	4413      	add	r3, r2
 8010078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	68ba      	ldr	r2, [r7, #8]
 8010080:	0151      	lsls	r1, r2, #5
 8010082:	68fa      	ldr	r2, [r7, #12]
 8010084:	440a      	add	r2, r1
 8010086:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801008a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801008e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010096:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010098:	683b      	ldr	r3, [r7, #0]
 801009a:	781b      	ldrb	r3, [r3, #0]
 801009c:	f003 030f 	and.w	r3, r3, #15
 80100a0:	2101      	movs	r1, #1
 80100a2:	fa01 f303 	lsl.w	r3, r1, r3
 80100a6:	041b      	lsls	r3, r3, #16
 80100a8:	43db      	mvns	r3, r3
 80100aa:	68f9      	ldr	r1, [r7, #12]
 80100ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80100b0:	4013      	ands	r3, r2
 80100b2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80100ba:	69da      	ldr	r2, [r3, #28]
 80100bc:	683b      	ldr	r3, [r7, #0]
 80100be:	781b      	ldrb	r3, [r3, #0]
 80100c0:	f003 030f 	and.w	r3, r3, #15
 80100c4:	2101      	movs	r1, #1
 80100c6:	fa01 f303 	lsl.w	r3, r1, r3
 80100ca:	041b      	lsls	r3, r3, #16
 80100cc:	43db      	mvns	r3, r3
 80100ce:	68f9      	ldr	r1, [r7, #12]
 80100d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80100d4:	4013      	ands	r3, r2
 80100d6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80100d8:	68bb      	ldr	r3, [r7, #8]
 80100da:	015a      	lsls	r2, r3, #5
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	4413      	add	r3, r2
 80100e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80100e4:	681a      	ldr	r2, [r3, #0]
 80100e6:	68bb      	ldr	r3, [r7, #8]
 80100e8:	0159      	lsls	r1, r3, #5
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	440b      	add	r3, r1
 80100ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80100f2:	4619      	mov	r1, r3
 80100f4:	4b05      	ldr	r3, [pc, #20]	; (801010c <USB_DeactivateEndpoint+0x1b4>)
 80100f6:	4013      	ands	r3, r2
 80100f8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80100fa:	2300      	movs	r3, #0
}
 80100fc:	4618      	mov	r0, r3
 80100fe:	3714      	adds	r7, #20
 8010100:	46bd      	mov	sp, r7
 8010102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010106:	4770      	bx	lr
 8010108:	ec337800 	.word	0xec337800
 801010c:	eff37800 	.word	0xeff37800

08010110 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8010110:	b580      	push	{r7, lr}
 8010112:	b08a      	sub	sp, #40	; 0x28
 8010114:	af02      	add	r7, sp, #8
 8010116:	60f8      	str	r0, [r7, #12]
 8010118:	60b9      	str	r1, [r7, #8]
 801011a:	4613      	mov	r3, r2
 801011c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8010122:	68bb      	ldr	r3, [r7, #8]
 8010124:	781b      	ldrb	r3, [r3, #0]
 8010126:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010128:	68bb      	ldr	r3, [r7, #8]
 801012a:	785b      	ldrb	r3, [r3, #1]
 801012c:	2b01      	cmp	r3, #1
 801012e:	f040 815c 	bne.w	80103ea <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8010132:	68bb      	ldr	r3, [r7, #8]
 8010134:	695b      	ldr	r3, [r3, #20]
 8010136:	2b00      	cmp	r3, #0
 8010138:	d132      	bne.n	80101a0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801013a:	69bb      	ldr	r3, [r7, #24]
 801013c:	015a      	lsls	r2, r3, #5
 801013e:	69fb      	ldr	r3, [r7, #28]
 8010140:	4413      	add	r3, r2
 8010142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010146:	691b      	ldr	r3, [r3, #16]
 8010148:	69ba      	ldr	r2, [r7, #24]
 801014a:	0151      	lsls	r1, r2, #5
 801014c:	69fa      	ldr	r2, [r7, #28]
 801014e:	440a      	add	r2, r1
 8010150:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010154:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010158:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801015c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801015e:	69bb      	ldr	r3, [r7, #24]
 8010160:	015a      	lsls	r2, r3, #5
 8010162:	69fb      	ldr	r3, [r7, #28]
 8010164:	4413      	add	r3, r2
 8010166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801016a:	691b      	ldr	r3, [r3, #16]
 801016c:	69ba      	ldr	r2, [r7, #24]
 801016e:	0151      	lsls	r1, r2, #5
 8010170:	69fa      	ldr	r2, [r7, #28]
 8010172:	440a      	add	r2, r1
 8010174:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010178:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801017c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801017e:	69bb      	ldr	r3, [r7, #24]
 8010180:	015a      	lsls	r2, r3, #5
 8010182:	69fb      	ldr	r3, [r7, #28]
 8010184:	4413      	add	r3, r2
 8010186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801018a:	691b      	ldr	r3, [r3, #16]
 801018c:	69ba      	ldr	r2, [r7, #24]
 801018e:	0151      	lsls	r1, r2, #5
 8010190:	69fa      	ldr	r2, [r7, #28]
 8010192:	440a      	add	r2, r1
 8010194:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010198:	0cdb      	lsrs	r3, r3, #19
 801019a:	04db      	lsls	r3, r3, #19
 801019c:	6113      	str	r3, [r2, #16]
 801019e:	e074      	b.n	801028a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80101a0:	69bb      	ldr	r3, [r7, #24]
 80101a2:	015a      	lsls	r2, r3, #5
 80101a4:	69fb      	ldr	r3, [r7, #28]
 80101a6:	4413      	add	r3, r2
 80101a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101ac:	691b      	ldr	r3, [r3, #16]
 80101ae:	69ba      	ldr	r2, [r7, #24]
 80101b0:	0151      	lsls	r1, r2, #5
 80101b2:	69fa      	ldr	r2, [r7, #28]
 80101b4:	440a      	add	r2, r1
 80101b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80101ba:	0cdb      	lsrs	r3, r3, #19
 80101bc:	04db      	lsls	r3, r3, #19
 80101be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80101c0:	69bb      	ldr	r3, [r7, #24]
 80101c2:	015a      	lsls	r2, r3, #5
 80101c4:	69fb      	ldr	r3, [r7, #28]
 80101c6:	4413      	add	r3, r2
 80101c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101cc:	691b      	ldr	r3, [r3, #16]
 80101ce:	69ba      	ldr	r2, [r7, #24]
 80101d0:	0151      	lsls	r1, r2, #5
 80101d2:	69fa      	ldr	r2, [r7, #28]
 80101d4:	440a      	add	r2, r1
 80101d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80101da:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80101de:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80101e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80101e4:	69bb      	ldr	r3, [r7, #24]
 80101e6:	015a      	lsls	r2, r3, #5
 80101e8:	69fb      	ldr	r3, [r7, #28]
 80101ea:	4413      	add	r3, r2
 80101ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101f0:	691a      	ldr	r2, [r3, #16]
 80101f2:	68bb      	ldr	r3, [r7, #8]
 80101f4:	6959      	ldr	r1, [r3, #20]
 80101f6:	68bb      	ldr	r3, [r7, #8]
 80101f8:	689b      	ldr	r3, [r3, #8]
 80101fa:	440b      	add	r3, r1
 80101fc:	1e59      	subs	r1, r3, #1
 80101fe:	68bb      	ldr	r3, [r7, #8]
 8010200:	689b      	ldr	r3, [r3, #8]
 8010202:	fbb1 f3f3 	udiv	r3, r1, r3
 8010206:	04d9      	lsls	r1, r3, #19
 8010208:	4b9d      	ldr	r3, [pc, #628]	; (8010480 <USB_EPStartXfer+0x370>)
 801020a:	400b      	ands	r3, r1
 801020c:	69b9      	ldr	r1, [r7, #24]
 801020e:	0148      	lsls	r0, r1, #5
 8010210:	69f9      	ldr	r1, [r7, #28]
 8010212:	4401      	add	r1, r0
 8010214:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010218:	4313      	orrs	r3, r2
 801021a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801021c:	69bb      	ldr	r3, [r7, #24]
 801021e:	015a      	lsls	r2, r3, #5
 8010220:	69fb      	ldr	r3, [r7, #28]
 8010222:	4413      	add	r3, r2
 8010224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010228:	691a      	ldr	r2, [r3, #16]
 801022a:	68bb      	ldr	r3, [r7, #8]
 801022c:	695b      	ldr	r3, [r3, #20]
 801022e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010232:	69b9      	ldr	r1, [r7, #24]
 8010234:	0148      	lsls	r0, r1, #5
 8010236:	69f9      	ldr	r1, [r7, #28]
 8010238:	4401      	add	r1, r0
 801023a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801023e:	4313      	orrs	r3, r2
 8010240:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8010242:	68bb      	ldr	r3, [r7, #8]
 8010244:	78db      	ldrb	r3, [r3, #3]
 8010246:	2b01      	cmp	r3, #1
 8010248:	d11f      	bne.n	801028a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801024a:	69bb      	ldr	r3, [r7, #24]
 801024c:	015a      	lsls	r2, r3, #5
 801024e:	69fb      	ldr	r3, [r7, #28]
 8010250:	4413      	add	r3, r2
 8010252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010256:	691b      	ldr	r3, [r3, #16]
 8010258:	69ba      	ldr	r2, [r7, #24]
 801025a:	0151      	lsls	r1, r2, #5
 801025c:	69fa      	ldr	r2, [r7, #28]
 801025e:	440a      	add	r2, r1
 8010260:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010264:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8010268:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801026a:	69bb      	ldr	r3, [r7, #24]
 801026c:	015a      	lsls	r2, r3, #5
 801026e:	69fb      	ldr	r3, [r7, #28]
 8010270:	4413      	add	r3, r2
 8010272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010276:	691b      	ldr	r3, [r3, #16]
 8010278:	69ba      	ldr	r2, [r7, #24]
 801027a:	0151      	lsls	r1, r2, #5
 801027c:	69fa      	ldr	r2, [r7, #28]
 801027e:	440a      	add	r2, r1
 8010280:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010284:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010288:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801028a:	79fb      	ldrb	r3, [r7, #7]
 801028c:	2b01      	cmp	r3, #1
 801028e:	d14b      	bne.n	8010328 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8010290:	68bb      	ldr	r3, [r7, #8]
 8010292:	691b      	ldr	r3, [r3, #16]
 8010294:	2b00      	cmp	r3, #0
 8010296:	d009      	beq.n	80102ac <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8010298:	69bb      	ldr	r3, [r7, #24]
 801029a:	015a      	lsls	r2, r3, #5
 801029c:	69fb      	ldr	r3, [r7, #28]
 801029e:	4413      	add	r3, r2
 80102a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102a4:	461a      	mov	r2, r3
 80102a6:	68bb      	ldr	r3, [r7, #8]
 80102a8:	691b      	ldr	r3, [r3, #16]
 80102aa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80102ac:	68bb      	ldr	r3, [r7, #8]
 80102ae:	78db      	ldrb	r3, [r3, #3]
 80102b0:	2b01      	cmp	r3, #1
 80102b2:	d128      	bne.n	8010306 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80102b4:	69fb      	ldr	r3, [r7, #28]
 80102b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80102ba:	689b      	ldr	r3, [r3, #8]
 80102bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d110      	bne.n	80102e6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80102c4:	69bb      	ldr	r3, [r7, #24]
 80102c6:	015a      	lsls	r2, r3, #5
 80102c8:	69fb      	ldr	r3, [r7, #28]
 80102ca:	4413      	add	r3, r2
 80102cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	69ba      	ldr	r2, [r7, #24]
 80102d4:	0151      	lsls	r1, r2, #5
 80102d6:	69fa      	ldr	r2, [r7, #28]
 80102d8:	440a      	add	r2, r1
 80102da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80102de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80102e2:	6013      	str	r3, [r2, #0]
 80102e4:	e00f      	b.n	8010306 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80102e6:	69bb      	ldr	r3, [r7, #24]
 80102e8:	015a      	lsls	r2, r3, #5
 80102ea:	69fb      	ldr	r3, [r7, #28]
 80102ec:	4413      	add	r3, r2
 80102ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	69ba      	ldr	r2, [r7, #24]
 80102f6:	0151      	lsls	r1, r2, #5
 80102f8:	69fa      	ldr	r2, [r7, #28]
 80102fa:	440a      	add	r2, r1
 80102fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010304:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010306:	69bb      	ldr	r3, [r7, #24]
 8010308:	015a      	lsls	r2, r3, #5
 801030a:	69fb      	ldr	r3, [r7, #28]
 801030c:	4413      	add	r3, r2
 801030e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	69ba      	ldr	r2, [r7, #24]
 8010316:	0151      	lsls	r1, r2, #5
 8010318:	69fa      	ldr	r2, [r7, #28]
 801031a:	440a      	add	r2, r1
 801031c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010320:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010324:	6013      	str	r3, [r2, #0]
 8010326:	e12f      	b.n	8010588 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010328:	69bb      	ldr	r3, [r7, #24]
 801032a:	015a      	lsls	r2, r3, #5
 801032c:	69fb      	ldr	r3, [r7, #28]
 801032e:	4413      	add	r3, r2
 8010330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	69ba      	ldr	r2, [r7, #24]
 8010338:	0151      	lsls	r1, r2, #5
 801033a:	69fa      	ldr	r2, [r7, #28]
 801033c:	440a      	add	r2, r1
 801033e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010342:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010346:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010348:	68bb      	ldr	r3, [r7, #8]
 801034a:	78db      	ldrb	r3, [r3, #3]
 801034c:	2b01      	cmp	r3, #1
 801034e:	d015      	beq.n	801037c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8010350:	68bb      	ldr	r3, [r7, #8]
 8010352:	695b      	ldr	r3, [r3, #20]
 8010354:	2b00      	cmp	r3, #0
 8010356:	f000 8117 	beq.w	8010588 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801035a:	69fb      	ldr	r3, [r7, #28]
 801035c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010360:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010362:	68bb      	ldr	r3, [r7, #8]
 8010364:	781b      	ldrb	r3, [r3, #0]
 8010366:	f003 030f 	and.w	r3, r3, #15
 801036a:	2101      	movs	r1, #1
 801036c:	fa01 f303 	lsl.w	r3, r1, r3
 8010370:	69f9      	ldr	r1, [r7, #28]
 8010372:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010376:	4313      	orrs	r3, r2
 8010378:	634b      	str	r3, [r1, #52]	; 0x34
 801037a:	e105      	b.n	8010588 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801037c:	69fb      	ldr	r3, [r7, #28]
 801037e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010382:	689b      	ldr	r3, [r3, #8]
 8010384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010388:	2b00      	cmp	r3, #0
 801038a:	d110      	bne.n	80103ae <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801038c:	69bb      	ldr	r3, [r7, #24]
 801038e:	015a      	lsls	r2, r3, #5
 8010390:	69fb      	ldr	r3, [r7, #28]
 8010392:	4413      	add	r3, r2
 8010394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	69ba      	ldr	r2, [r7, #24]
 801039c:	0151      	lsls	r1, r2, #5
 801039e:	69fa      	ldr	r2, [r7, #28]
 80103a0:	440a      	add	r2, r1
 80103a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80103a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80103aa:	6013      	str	r3, [r2, #0]
 80103ac:	e00f      	b.n	80103ce <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80103ae:	69bb      	ldr	r3, [r7, #24]
 80103b0:	015a      	lsls	r2, r3, #5
 80103b2:	69fb      	ldr	r3, [r7, #28]
 80103b4:	4413      	add	r3, r2
 80103b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	69ba      	ldr	r2, [r7, #24]
 80103be:	0151      	lsls	r1, r2, #5
 80103c0:	69fa      	ldr	r2, [r7, #28]
 80103c2:	440a      	add	r2, r1
 80103c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80103c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80103cc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80103ce:	68bb      	ldr	r3, [r7, #8]
 80103d0:	68d9      	ldr	r1, [r3, #12]
 80103d2:	68bb      	ldr	r3, [r7, #8]
 80103d4:	781a      	ldrb	r2, [r3, #0]
 80103d6:	68bb      	ldr	r3, [r7, #8]
 80103d8:	695b      	ldr	r3, [r3, #20]
 80103da:	b298      	uxth	r0, r3
 80103dc:	79fb      	ldrb	r3, [r7, #7]
 80103de:	9300      	str	r3, [sp, #0]
 80103e0:	4603      	mov	r3, r0
 80103e2:	68f8      	ldr	r0, [r7, #12]
 80103e4:	f000 fa2b 	bl	801083e <USB_WritePacket>
 80103e8:	e0ce      	b.n	8010588 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80103ea:	69bb      	ldr	r3, [r7, #24]
 80103ec:	015a      	lsls	r2, r3, #5
 80103ee:	69fb      	ldr	r3, [r7, #28]
 80103f0:	4413      	add	r3, r2
 80103f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103f6:	691b      	ldr	r3, [r3, #16]
 80103f8:	69ba      	ldr	r2, [r7, #24]
 80103fa:	0151      	lsls	r1, r2, #5
 80103fc:	69fa      	ldr	r2, [r7, #28]
 80103fe:	440a      	add	r2, r1
 8010400:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010404:	0cdb      	lsrs	r3, r3, #19
 8010406:	04db      	lsls	r3, r3, #19
 8010408:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801040a:	69bb      	ldr	r3, [r7, #24]
 801040c:	015a      	lsls	r2, r3, #5
 801040e:	69fb      	ldr	r3, [r7, #28]
 8010410:	4413      	add	r3, r2
 8010412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010416:	691b      	ldr	r3, [r3, #16]
 8010418:	69ba      	ldr	r2, [r7, #24]
 801041a:	0151      	lsls	r1, r2, #5
 801041c:	69fa      	ldr	r2, [r7, #28]
 801041e:	440a      	add	r2, r1
 8010420:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010424:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010428:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801042c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 801042e:	68bb      	ldr	r3, [r7, #8]
 8010430:	695b      	ldr	r3, [r3, #20]
 8010432:	2b00      	cmp	r3, #0
 8010434:	d126      	bne.n	8010484 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8010436:	69bb      	ldr	r3, [r7, #24]
 8010438:	015a      	lsls	r2, r3, #5
 801043a:	69fb      	ldr	r3, [r7, #28]
 801043c:	4413      	add	r3, r2
 801043e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010442:	691a      	ldr	r2, [r3, #16]
 8010444:	68bb      	ldr	r3, [r7, #8]
 8010446:	689b      	ldr	r3, [r3, #8]
 8010448:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801044c:	69b9      	ldr	r1, [r7, #24]
 801044e:	0148      	lsls	r0, r1, #5
 8010450:	69f9      	ldr	r1, [r7, #28]
 8010452:	4401      	add	r1, r0
 8010454:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010458:	4313      	orrs	r3, r2
 801045a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801045c:	69bb      	ldr	r3, [r7, #24]
 801045e:	015a      	lsls	r2, r3, #5
 8010460:	69fb      	ldr	r3, [r7, #28]
 8010462:	4413      	add	r3, r2
 8010464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010468:	691b      	ldr	r3, [r3, #16]
 801046a:	69ba      	ldr	r2, [r7, #24]
 801046c:	0151      	lsls	r1, r2, #5
 801046e:	69fa      	ldr	r2, [r7, #28]
 8010470:	440a      	add	r2, r1
 8010472:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010476:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801047a:	6113      	str	r3, [r2, #16]
 801047c:	e036      	b.n	80104ec <USB_EPStartXfer+0x3dc>
 801047e:	bf00      	nop
 8010480:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8010484:	68bb      	ldr	r3, [r7, #8]
 8010486:	695a      	ldr	r2, [r3, #20]
 8010488:	68bb      	ldr	r3, [r7, #8]
 801048a:	689b      	ldr	r3, [r3, #8]
 801048c:	4413      	add	r3, r2
 801048e:	1e5a      	subs	r2, r3, #1
 8010490:	68bb      	ldr	r3, [r7, #8]
 8010492:	689b      	ldr	r3, [r3, #8]
 8010494:	fbb2 f3f3 	udiv	r3, r2, r3
 8010498:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801049a:	69bb      	ldr	r3, [r7, #24]
 801049c:	015a      	lsls	r2, r3, #5
 801049e:	69fb      	ldr	r3, [r7, #28]
 80104a0:	4413      	add	r3, r2
 80104a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104a6:	691a      	ldr	r2, [r3, #16]
 80104a8:	8afb      	ldrh	r3, [r7, #22]
 80104aa:	04d9      	lsls	r1, r3, #19
 80104ac:	4b39      	ldr	r3, [pc, #228]	; (8010594 <USB_EPStartXfer+0x484>)
 80104ae:	400b      	ands	r3, r1
 80104b0:	69b9      	ldr	r1, [r7, #24]
 80104b2:	0148      	lsls	r0, r1, #5
 80104b4:	69f9      	ldr	r1, [r7, #28]
 80104b6:	4401      	add	r1, r0
 80104b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80104bc:	4313      	orrs	r3, r2
 80104be:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80104c0:	69bb      	ldr	r3, [r7, #24]
 80104c2:	015a      	lsls	r2, r3, #5
 80104c4:	69fb      	ldr	r3, [r7, #28]
 80104c6:	4413      	add	r3, r2
 80104c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104cc:	691a      	ldr	r2, [r3, #16]
 80104ce:	68bb      	ldr	r3, [r7, #8]
 80104d0:	689b      	ldr	r3, [r3, #8]
 80104d2:	8af9      	ldrh	r1, [r7, #22]
 80104d4:	fb01 f303 	mul.w	r3, r1, r3
 80104d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80104dc:	69b9      	ldr	r1, [r7, #24]
 80104de:	0148      	lsls	r0, r1, #5
 80104e0:	69f9      	ldr	r1, [r7, #28]
 80104e2:	4401      	add	r1, r0
 80104e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80104e8:	4313      	orrs	r3, r2
 80104ea:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80104ec:	79fb      	ldrb	r3, [r7, #7]
 80104ee:	2b01      	cmp	r3, #1
 80104f0:	d10d      	bne.n	801050e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80104f2:	68bb      	ldr	r3, [r7, #8]
 80104f4:	68db      	ldr	r3, [r3, #12]
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d009      	beq.n	801050e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80104fa:	68bb      	ldr	r3, [r7, #8]
 80104fc:	68d9      	ldr	r1, [r3, #12]
 80104fe:	69bb      	ldr	r3, [r7, #24]
 8010500:	015a      	lsls	r2, r3, #5
 8010502:	69fb      	ldr	r3, [r7, #28]
 8010504:	4413      	add	r3, r2
 8010506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801050a:	460a      	mov	r2, r1
 801050c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801050e:	68bb      	ldr	r3, [r7, #8]
 8010510:	78db      	ldrb	r3, [r3, #3]
 8010512:	2b01      	cmp	r3, #1
 8010514:	d128      	bne.n	8010568 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010516:	69fb      	ldr	r3, [r7, #28]
 8010518:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801051c:	689b      	ldr	r3, [r3, #8]
 801051e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010522:	2b00      	cmp	r3, #0
 8010524:	d110      	bne.n	8010548 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8010526:	69bb      	ldr	r3, [r7, #24]
 8010528:	015a      	lsls	r2, r3, #5
 801052a:	69fb      	ldr	r3, [r7, #28]
 801052c:	4413      	add	r3, r2
 801052e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	69ba      	ldr	r2, [r7, #24]
 8010536:	0151      	lsls	r1, r2, #5
 8010538:	69fa      	ldr	r2, [r7, #28]
 801053a:	440a      	add	r2, r1
 801053c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010540:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010544:	6013      	str	r3, [r2, #0]
 8010546:	e00f      	b.n	8010568 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8010548:	69bb      	ldr	r3, [r7, #24]
 801054a:	015a      	lsls	r2, r3, #5
 801054c:	69fb      	ldr	r3, [r7, #28]
 801054e:	4413      	add	r3, r2
 8010550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	69ba      	ldr	r2, [r7, #24]
 8010558:	0151      	lsls	r1, r2, #5
 801055a:	69fa      	ldr	r2, [r7, #28]
 801055c:	440a      	add	r2, r1
 801055e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010566:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010568:	69bb      	ldr	r3, [r7, #24]
 801056a:	015a      	lsls	r2, r3, #5
 801056c:	69fb      	ldr	r3, [r7, #28]
 801056e:	4413      	add	r3, r2
 8010570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	69ba      	ldr	r2, [r7, #24]
 8010578:	0151      	lsls	r1, r2, #5
 801057a:	69fa      	ldr	r2, [r7, #28]
 801057c:	440a      	add	r2, r1
 801057e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010582:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010586:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010588:	2300      	movs	r3, #0
}
 801058a:	4618      	mov	r0, r3
 801058c:	3720      	adds	r7, #32
 801058e:	46bd      	mov	sp, r7
 8010590:	bd80      	pop	{r7, pc}
 8010592:	bf00      	nop
 8010594:	1ff80000 	.word	0x1ff80000

08010598 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8010598:	b480      	push	{r7}
 801059a:	b087      	sub	sp, #28
 801059c:	af00      	add	r7, sp, #0
 801059e:	60f8      	str	r0, [r7, #12]
 80105a0:	60b9      	str	r1, [r7, #8]
 80105a2:	4613      	mov	r3, r2
 80105a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80105aa:	68bb      	ldr	r3, [r7, #8]
 80105ac:	781b      	ldrb	r3, [r3, #0]
 80105ae:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80105b0:	68bb      	ldr	r3, [r7, #8]
 80105b2:	785b      	ldrb	r3, [r3, #1]
 80105b4:	2b01      	cmp	r3, #1
 80105b6:	f040 80cd 	bne.w	8010754 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80105ba:	68bb      	ldr	r3, [r7, #8]
 80105bc:	695b      	ldr	r3, [r3, #20]
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d132      	bne.n	8010628 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80105c2:	693b      	ldr	r3, [r7, #16]
 80105c4:	015a      	lsls	r2, r3, #5
 80105c6:	697b      	ldr	r3, [r7, #20]
 80105c8:	4413      	add	r3, r2
 80105ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105ce:	691b      	ldr	r3, [r3, #16]
 80105d0:	693a      	ldr	r2, [r7, #16]
 80105d2:	0151      	lsls	r1, r2, #5
 80105d4:	697a      	ldr	r2, [r7, #20]
 80105d6:	440a      	add	r2, r1
 80105d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80105dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80105e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80105e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80105e6:	693b      	ldr	r3, [r7, #16]
 80105e8:	015a      	lsls	r2, r3, #5
 80105ea:	697b      	ldr	r3, [r7, #20]
 80105ec:	4413      	add	r3, r2
 80105ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105f2:	691b      	ldr	r3, [r3, #16]
 80105f4:	693a      	ldr	r2, [r7, #16]
 80105f6:	0151      	lsls	r1, r2, #5
 80105f8:	697a      	ldr	r2, [r7, #20]
 80105fa:	440a      	add	r2, r1
 80105fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010600:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010604:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010606:	693b      	ldr	r3, [r7, #16]
 8010608:	015a      	lsls	r2, r3, #5
 801060a:	697b      	ldr	r3, [r7, #20]
 801060c:	4413      	add	r3, r2
 801060e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010612:	691b      	ldr	r3, [r3, #16]
 8010614:	693a      	ldr	r2, [r7, #16]
 8010616:	0151      	lsls	r1, r2, #5
 8010618:	697a      	ldr	r2, [r7, #20]
 801061a:	440a      	add	r2, r1
 801061c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010620:	0cdb      	lsrs	r3, r3, #19
 8010622:	04db      	lsls	r3, r3, #19
 8010624:	6113      	str	r3, [r2, #16]
 8010626:	e04e      	b.n	80106c6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010628:	693b      	ldr	r3, [r7, #16]
 801062a:	015a      	lsls	r2, r3, #5
 801062c:	697b      	ldr	r3, [r7, #20]
 801062e:	4413      	add	r3, r2
 8010630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010634:	691b      	ldr	r3, [r3, #16]
 8010636:	693a      	ldr	r2, [r7, #16]
 8010638:	0151      	lsls	r1, r2, #5
 801063a:	697a      	ldr	r2, [r7, #20]
 801063c:	440a      	add	r2, r1
 801063e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010642:	0cdb      	lsrs	r3, r3, #19
 8010644:	04db      	lsls	r3, r3, #19
 8010646:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010648:	693b      	ldr	r3, [r7, #16]
 801064a:	015a      	lsls	r2, r3, #5
 801064c:	697b      	ldr	r3, [r7, #20]
 801064e:	4413      	add	r3, r2
 8010650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010654:	691b      	ldr	r3, [r3, #16]
 8010656:	693a      	ldr	r2, [r7, #16]
 8010658:	0151      	lsls	r1, r2, #5
 801065a:	697a      	ldr	r2, [r7, #20]
 801065c:	440a      	add	r2, r1
 801065e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010662:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010666:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801066a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 801066c:	68bb      	ldr	r3, [r7, #8]
 801066e:	695a      	ldr	r2, [r3, #20]
 8010670:	68bb      	ldr	r3, [r7, #8]
 8010672:	689b      	ldr	r3, [r3, #8]
 8010674:	429a      	cmp	r2, r3
 8010676:	d903      	bls.n	8010680 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8010678:	68bb      	ldr	r3, [r7, #8]
 801067a:	689a      	ldr	r2, [r3, #8]
 801067c:	68bb      	ldr	r3, [r7, #8]
 801067e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010680:	693b      	ldr	r3, [r7, #16]
 8010682:	015a      	lsls	r2, r3, #5
 8010684:	697b      	ldr	r3, [r7, #20]
 8010686:	4413      	add	r3, r2
 8010688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801068c:	691b      	ldr	r3, [r3, #16]
 801068e:	693a      	ldr	r2, [r7, #16]
 8010690:	0151      	lsls	r1, r2, #5
 8010692:	697a      	ldr	r2, [r7, #20]
 8010694:	440a      	add	r2, r1
 8010696:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801069a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801069e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80106a0:	693b      	ldr	r3, [r7, #16]
 80106a2:	015a      	lsls	r2, r3, #5
 80106a4:	697b      	ldr	r3, [r7, #20]
 80106a6:	4413      	add	r3, r2
 80106a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80106ac:	691a      	ldr	r2, [r3, #16]
 80106ae:	68bb      	ldr	r3, [r7, #8]
 80106b0:	695b      	ldr	r3, [r3, #20]
 80106b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80106b6:	6939      	ldr	r1, [r7, #16]
 80106b8:	0148      	lsls	r0, r1, #5
 80106ba:	6979      	ldr	r1, [r7, #20]
 80106bc:	4401      	add	r1, r0
 80106be:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80106c2:	4313      	orrs	r3, r2
 80106c4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80106c6:	79fb      	ldrb	r3, [r7, #7]
 80106c8:	2b01      	cmp	r3, #1
 80106ca:	d11e      	bne.n	801070a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80106cc:	68bb      	ldr	r3, [r7, #8]
 80106ce:	691b      	ldr	r3, [r3, #16]
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d009      	beq.n	80106e8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80106d4:	693b      	ldr	r3, [r7, #16]
 80106d6:	015a      	lsls	r2, r3, #5
 80106d8:	697b      	ldr	r3, [r7, #20]
 80106da:	4413      	add	r3, r2
 80106dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80106e0:	461a      	mov	r2, r3
 80106e2:	68bb      	ldr	r3, [r7, #8]
 80106e4:	691b      	ldr	r3, [r3, #16]
 80106e6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80106e8:	693b      	ldr	r3, [r7, #16]
 80106ea:	015a      	lsls	r2, r3, #5
 80106ec:	697b      	ldr	r3, [r7, #20]
 80106ee:	4413      	add	r3, r2
 80106f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	693a      	ldr	r2, [r7, #16]
 80106f8:	0151      	lsls	r1, r2, #5
 80106fa:	697a      	ldr	r2, [r7, #20]
 80106fc:	440a      	add	r2, r1
 80106fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010702:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010706:	6013      	str	r3, [r2, #0]
 8010708:	e092      	b.n	8010830 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801070a:	693b      	ldr	r3, [r7, #16]
 801070c:	015a      	lsls	r2, r3, #5
 801070e:	697b      	ldr	r3, [r7, #20]
 8010710:	4413      	add	r3, r2
 8010712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	693a      	ldr	r2, [r7, #16]
 801071a:	0151      	lsls	r1, r2, #5
 801071c:	697a      	ldr	r2, [r7, #20]
 801071e:	440a      	add	r2, r1
 8010720:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010724:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010728:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 801072a:	68bb      	ldr	r3, [r7, #8]
 801072c:	695b      	ldr	r3, [r3, #20]
 801072e:	2b00      	cmp	r3, #0
 8010730:	d07e      	beq.n	8010830 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8010732:	697b      	ldr	r3, [r7, #20]
 8010734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010738:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801073a:	68bb      	ldr	r3, [r7, #8]
 801073c:	781b      	ldrb	r3, [r3, #0]
 801073e:	f003 030f 	and.w	r3, r3, #15
 8010742:	2101      	movs	r1, #1
 8010744:	fa01 f303 	lsl.w	r3, r1, r3
 8010748:	6979      	ldr	r1, [r7, #20]
 801074a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801074e:	4313      	orrs	r3, r2
 8010750:	634b      	str	r3, [r1, #52]	; 0x34
 8010752:	e06d      	b.n	8010830 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010754:	693b      	ldr	r3, [r7, #16]
 8010756:	015a      	lsls	r2, r3, #5
 8010758:	697b      	ldr	r3, [r7, #20]
 801075a:	4413      	add	r3, r2
 801075c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010760:	691b      	ldr	r3, [r3, #16]
 8010762:	693a      	ldr	r2, [r7, #16]
 8010764:	0151      	lsls	r1, r2, #5
 8010766:	697a      	ldr	r2, [r7, #20]
 8010768:	440a      	add	r2, r1
 801076a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801076e:	0cdb      	lsrs	r3, r3, #19
 8010770:	04db      	lsls	r3, r3, #19
 8010772:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010774:	693b      	ldr	r3, [r7, #16]
 8010776:	015a      	lsls	r2, r3, #5
 8010778:	697b      	ldr	r3, [r7, #20]
 801077a:	4413      	add	r3, r2
 801077c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010780:	691b      	ldr	r3, [r3, #16]
 8010782:	693a      	ldr	r2, [r7, #16]
 8010784:	0151      	lsls	r1, r2, #5
 8010786:	697a      	ldr	r2, [r7, #20]
 8010788:	440a      	add	r2, r1
 801078a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801078e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010792:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010796:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8010798:	68bb      	ldr	r3, [r7, #8]
 801079a:	695b      	ldr	r3, [r3, #20]
 801079c:	2b00      	cmp	r3, #0
 801079e:	d003      	beq.n	80107a8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80107a0:	68bb      	ldr	r3, [r7, #8]
 80107a2:	689a      	ldr	r2, [r3, #8]
 80107a4:	68bb      	ldr	r3, [r7, #8]
 80107a6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80107a8:	693b      	ldr	r3, [r7, #16]
 80107aa:	015a      	lsls	r2, r3, #5
 80107ac:	697b      	ldr	r3, [r7, #20]
 80107ae:	4413      	add	r3, r2
 80107b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80107b4:	691b      	ldr	r3, [r3, #16]
 80107b6:	693a      	ldr	r2, [r7, #16]
 80107b8:	0151      	lsls	r1, r2, #5
 80107ba:	697a      	ldr	r2, [r7, #20]
 80107bc:	440a      	add	r2, r1
 80107be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80107c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80107c6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80107c8:	693b      	ldr	r3, [r7, #16]
 80107ca:	015a      	lsls	r2, r3, #5
 80107cc:	697b      	ldr	r3, [r7, #20]
 80107ce:	4413      	add	r3, r2
 80107d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80107d4:	691a      	ldr	r2, [r3, #16]
 80107d6:	68bb      	ldr	r3, [r7, #8]
 80107d8:	689b      	ldr	r3, [r3, #8]
 80107da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80107de:	6939      	ldr	r1, [r7, #16]
 80107e0:	0148      	lsls	r0, r1, #5
 80107e2:	6979      	ldr	r1, [r7, #20]
 80107e4:	4401      	add	r1, r0
 80107e6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80107ea:	4313      	orrs	r3, r2
 80107ec:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80107ee:	79fb      	ldrb	r3, [r7, #7]
 80107f0:	2b01      	cmp	r3, #1
 80107f2:	d10d      	bne.n	8010810 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80107f4:	68bb      	ldr	r3, [r7, #8]
 80107f6:	68db      	ldr	r3, [r3, #12]
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d009      	beq.n	8010810 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80107fc:	68bb      	ldr	r3, [r7, #8]
 80107fe:	68d9      	ldr	r1, [r3, #12]
 8010800:	693b      	ldr	r3, [r7, #16]
 8010802:	015a      	lsls	r2, r3, #5
 8010804:	697b      	ldr	r3, [r7, #20]
 8010806:	4413      	add	r3, r2
 8010808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801080c:	460a      	mov	r2, r1
 801080e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010810:	693b      	ldr	r3, [r7, #16]
 8010812:	015a      	lsls	r2, r3, #5
 8010814:	697b      	ldr	r3, [r7, #20]
 8010816:	4413      	add	r3, r2
 8010818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	693a      	ldr	r2, [r7, #16]
 8010820:	0151      	lsls	r1, r2, #5
 8010822:	697a      	ldr	r2, [r7, #20]
 8010824:	440a      	add	r2, r1
 8010826:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801082a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801082e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010830:	2300      	movs	r3, #0
}
 8010832:	4618      	mov	r0, r3
 8010834:	371c      	adds	r7, #28
 8010836:	46bd      	mov	sp, r7
 8010838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801083c:	4770      	bx	lr

0801083e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 801083e:	b480      	push	{r7}
 8010840:	b089      	sub	sp, #36	; 0x24
 8010842:	af00      	add	r7, sp, #0
 8010844:	60f8      	str	r0, [r7, #12]
 8010846:	60b9      	str	r1, [r7, #8]
 8010848:	4611      	mov	r1, r2
 801084a:	461a      	mov	r2, r3
 801084c:	460b      	mov	r3, r1
 801084e:	71fb      	strb	r3, [r7, #7]
 8010850:	4613      	mov	r3, r2
 8010852:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8010858:	68bb      	ldr	r3, [r7, #8]
 801085a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 801085c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010860:	2b00      	cmp	r3, #0
 8010862:	d11a      	bne.n	801089a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8010864:	88bb      	ldrh	r3, [r7, #4]
 8010866:	3303      	adds	r3, #3
 8010868:	089b      	lsrs	r3, r3, #2
 801086a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801086c:	2300      	movs	r3, #0
 801086e:	61bb      	str	r3, [r7, #24]
 8010870:	e00f      	b.n	8010892 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8010872:	79fb      	ldrb	r3, [r7, #7]
 8010874:	031a      	lsls	r2, r3, #12
 8010876:	697b      	ldr	r3, [r7, #20]
 8010878:	4413      	add	r3, r2
 801087a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801087e:	461a      	mov	r2, r3
 8010880:	69fb      	ldr	r3, [r7, #28]
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	6013      	str	r3, [r2, #0]
      pSrc++;
 8010886:	69fb      	ldr	r3, [r7, #28]
 8010888:	3304      	adds	r3, #4
 801088a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 801088c:	69bb      	ldr	r3, [r7, #24]
 801088e:	3301      	adds	r3, #1
 8010890:	61bb      	str	r3, [r7, #24]
 8010892:	69ba      	ldr	r2, [r7, #24]
 8010894:	693b      	ldr	r3, [r7, #16]
 8010896:	429a      	cmp	r2, r3
 8010898:	d3eb      	bcc.n	8010872 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801089a:	2300      	movs	r3, #0
}
 801089c:	4618      	mov	r0, r3
 801089e:	3724      	adds	r7, #36	; 0x24
 80108a0:	46bd      	mov	sp, r7
 80108a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a6:	4770      	bx	lr

080108a8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80108a8:	b480      	push	{r7}
 80108aa:	b089      	sub	sp, #36	; 0x24
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	60f8      	str	r0, [r7, #12]
 80108b0:	60b9      	str	r1, [r7, #8]
 80108b2:	4613      	mov	r3, r2
 80108b4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80108ba:	68bb      	ldr	r3, [r7, #8]
 80108bc:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80108be:	88fb      	ldrh	r3, [r7, #6]
 80108c0:	3303      	adds	r3, #3
 80108c2:	089b      	lsrs	r3, r3, #2
 80108c4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80108c6:	2300      	movs	r3, #0
 80108c8:	61bb      	str	r3, [r7, #24]
 80108ca:	e00b      	b.n	80108e4 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80108cc:	697b      	ldr	r3, [r7, #20]
 80108ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80108d2:	681a      	ldr	r2, [r3, #0]
 80108d4:	69fb      	ldr	r3, [r7, #28]
 80108d6:	601a      	str	r2, [r3, #0]
    pDest++;
 80108d8:	69fb      	ldr	r3, [r7, #28]
 80108da:	3304      	adds	r3, #4
 80108dc:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80108de:	69bb      	ldr	r3, [r7, #24]
 80108e0:	3301      	adds	r3, #1
 80108e2:	61bb      	str	r3, [r7, #24]
 80108e4:	69ba      	ldr	r2, [r7, #24]
 80108e6:	693b      	ldr	r3, [r7, #16]
 80108e8:	429a      	cmp	r2, r3
 80108ea:	d3ef      	bcc.n	80108cc <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80108ec:	69fb      	ldr	r3, [r7, #28]
}
 80108ee:	4618      	mov	r0, r3
 80108f0:	3724      	adds	r7, #36	; 0x24
 80108f2:	46bd      	mov	sp, r7
 80108f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f8:	4770      	bx	lr

080108fa <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80108fa:	b480      	push	{r7}
 80108fc:	b085      	sub	sp, #20
 80108fe:	af00      	add	r7, sp, #0
 8010900:	6078      	str	r0, [r7, #4]
 8010902:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010908:	683b      	ldr	r3, [r7, #0]
 801090a:	781b      	ldrb	r3, [r3, #0]
 801090c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801090e:	683b      	ldr	r3, [r7, #0]
 8010910:	785b      	ldrb	r3, [r3, #1]
 8010912:	2b01      	cmp	r3, #1
 8010914:	d12c      	bne.n	8010970 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010916:	68bb      	ldr	r3, [r7, #8]
 8010918:	015a      	lsls	r2, r3, #5
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	4413      	add	r3, r2
 801091e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	2b00      	cmp	r3, #0
 8010926:	db12      	blt.n	801094e <USB_EPSetStall+0x54>
 8010928:	68bb      	ldr	r3, [r7, #8]
 801092a:	2b00      	cmp	r3, #0
 801092c:	d00f      	beq.n	801094e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 801092e:	68bb      	ldr	r3, [r7, #8]
 8010930:	015a      	lsls	r2, r3, #5
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	4413      	add	r3, r2
 8010936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	68ba      	ldr	r2, [r7, #8]
 801093e:	0151      	lsls	r1, r2, #5
 8010940:	68fa      	ldr	r2, [r7, #12]
 8010942:	440a      	add	r2, r1
 8010944:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010948:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801094c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 801094e:	68bb      	ldr	r3, [r7, #8]
 8010950:	015a      	lsls	r2, r3, #5
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	4413      	add	r3, r2
 8010956:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	68ba      	ldr	r2, [r7, #8]
 801095e:	0151      	lsls	r1, r2, #5
 8010960:	68fa      	ldr	r2, [r7, #12]
 8010962:	440a      	add	r2, r1
 8010964:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010968:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801096c:	6013      	str	r3, [r2, #0]
 801096e:	e02b      	b.n	80109c8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010970:	68bb      	ldr	r3, [r7, #8]
 8010972:	015a      	lsls	r2, r3, #5
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	4413      	add	r3, r2
 8010978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	2b00      	cmp	r3, #0
 8010980:	db12      	blt.n	80109a8 <USB_EPSetStall+0xae>
 8010982:	68bb      	ldr	r3, [r7, #8]
 8010984:	2b00      	cmp	r3, #0
 8010986:	d00f      	beq.n	80109a8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8010988:	68bb      	ldr	r3, [r7, #8]
 801098a:	015a      	lsls	r2, r3, #5
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	4413      	add	r3, r2
 8010990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	68ba      	ldr	r2, [r7, #8]
 8010998:	0151      	lsls	r1, r2, #5
 801099a:	68fa      	ldr	r2, [r7, #12]
 801099c:	440a      	add	r2, r1
 801099e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80109a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80109a6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80109a8:	68bb      	ldr	r3, [r7, #8]
 80109aa:	015a      	lsls	r2, r3, #5
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	4413      	add	r3, r2
 80109b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	68ba      	ldr	r2, [r7, #8]
 80109b8:	0151      	lsls	r1, r2, #5
 80109ba:	68fa      	ldr	r2, [r7, #12]
 80109bc:	440a      	add	r2, r1
 80109be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80109c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80109c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80109c8:	2300      	movs	r3, #0
}
 80109ca:	4618      	mov	r0, r3
 80109cc:	3714      	adds	r7, #20
 80109ce:	46bd      	mov	sp, r7
 80109d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d4:	4770      	bx	lr

080109d6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80109d6:	b480      	push	{r7}
 80109d8:	b085      	sub	sp, #20
 80109da:	af00      	add	r7, sp, #0
 80109dc:	6078      	str	r0, [r7, #4]
 80109de:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80109e4:	683b      	ldr	r3, [r7, #0]
 80109e6:	781b      	ldrb	r3, [r3, #0]
 80109e8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80109ea:	683b      	ldr	r3, [r7, #0]
 80109ec:	785b      	ldrb	r3, [r3, #1]
 80109ee:	2b01      	cmp	r3, #1
 80109f0:	d128      	bne.n	8010a44 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80109f2:	68bb      	ldr	r3, [r7, #8]
 80109f4:	015a      	lsls	r2, r3, #5
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	4413      	add	r3, r2
 80109fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	68ba      	ldr	r2, [r7, #8]
 8010a02:	0151      	lsls	r1, r2, #5
 8010a04:	68fa      	ldr	r2, [r7, #12]
 8010a06:	440a      	add	r2, r1
 8010a08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010a0c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010a10:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010a12:	683b      	ldr	r3, [r7, #0]
 8010a14:	78db      	ldrb	r3, [r3, #3]
 8010a16:	2b03      	cmp	r3, #3
 8010a18:	d003      	beq.n	8010a22 <USB_EPClearStall+0x4c>
 8010a1a:	683b      	ldr	r3, [r7, #0]
 8010a1c:	78db      	ldrb	r3, [r3, #3]
 8010a1e:	2b02      	cmp	r3, #2
 8010a20:	d138      	bne.n	8010a94 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010a22:	68bb      	ldr	r3, [r7, #8]
 8010a24:	015a      	lsls	r2, r3, #5
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	4413      	add	r3, r2
 8010a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	68ba      	ldr	r2, [r7, #8]
 8010a32:	0151      	lsls	r1, r2, #5
 8010a34:	68fa      	ldr	r2, [r7, #12]
 8010a36:	440a      	add	r2, r1
 8010a38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010a40:	6013      	str	r3, [r2, #0]
 8010a42:	e027      	b.n	8010a94 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8010a44:	68bb      	ldr	r3, [r7, #8]
 8010a46:	015a      	lsls	r2, r3, #5
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	4413      	add	r3, r2
 8010a4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	68ba      	ldr	r2, [r7, #8]
 8010a54:	0151      	lsls	r1, r2, #5
 8010a56:	68fa      	ldr	r2, [r7, #12]
 8010a58:	440a      	add	r2, r1
 8010a5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010a5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010a62:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010a64:	683b      	ldr	r3, [r7, #0]
 8010a66:	78db      	ldrb	r3, [r3, #3]
 8010a68:	2b03      	cmp	r3, #3
 8010a6a:	d003      	beq.n	8010a74 <USB_EPClearStall+0x9e>
 8010a6c:	683b      	ldr	r3, [r7, #0]
 8010a6e:	78db      	ldrb	r3, [r3, #3]
 8010a70:	2b02      	cmp	r3, #2
 8010a72:	d10f      	bne.n	8010a94 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010a74:	68bb      	ldr	r3, [r7, #8]
 8010a76:	015a      	lsls	r2, r3, #5
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	4413      	add	r3, r2
 8010a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	68ba      	ldr	r2, [r7, #8]
 8010a84:	0151      	lsls	r1, r2, #5
 8010a86:	68fa      	ldr	r2, [r7, #12]
 8010a88:	440a      	add	r2, r1
 8010a8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010a8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010a92:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8010a94:	2300      	movs	r3, #0
}
 8010a96:	4618      	mov	r0, r3
 8010a98:	3714      	adds	r7, #20
 8010a9a:	46bd      	mov	sp, r7
 8010a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa0:	4770      	bx	lr

08010aa2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8010aa2:	b480      	push	{r7}
 8010aa4:	b085      	sub	sp, #20
 8010aa6:	af00      	add	r7, sp, #0
 8010aa8:	6078      	str	r0, [r7, #4]
 8010aaa:	460b      	mov	r3, r1
 8010aac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	68fa      	ldr	r2, [r7, #12]
 8010abc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010ac0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8010ac4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010acc:	681a      	ldr	r2, [r3, #0]
 8010ace:	78fb      	ldrb	r3, [r7, #3]
 8010ad0:	011b      	lsls	r3, r3, #4
 8010ad2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8010ad6:	68f9      	ldr	r1, [r7, #12]
 8010ad8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010adc:	4313      	orrs	r3, r2
 8010ade:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8010ae0:	2300      	movs	r3, #0
}
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	3714      	adds	r7, #20
 8010ae6:	46bd      	mov	sp, r7
 8010ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aec:	4770      	bx	lr

08010aee <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010aee:	b480      	push	{r7}
 8010af0:	b085      	sub	sp, #20
 8010af2:	af00      	add	r7, sp, #0
 8010af4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	68fa      	ldr	r2, [r7, #12]
 8010b04:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010b08:	f023 0303 	bic.w	r3, r3, #3
 8010b0c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010b14:	685b      	ldr	r3, [r3, #4]
 8010b16:	68fa      	ldr	r2, [r7, #12]
 8010b18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010b1c:	f023 0302 	bic.w	r3, r3, #2
 8010b20:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010b22:	2300      	movs	r3, #0
}
 8010b24:	4618      	mov	r0, r3
 8010b26:	3714      	adds	r7, #20
 8010b28:	46bd      	mov	sp, r7
 8010b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b2e:	4770      	bx	lr

08010b30 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010b30:	b480      	push	{r7}
 8010b32:	b085      	sub	sp, #20
 8010b34:	af00      	add	r7, sp, #0
 8010b36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	68fa      	ldr	r2, [r7, #12]
 8010b46:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010b4a:	f023 0303 	bic.w	r3, r3, #3
 8010b4e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010b56:	685b      	ldr	r3, [r3, #4]
 8010b58:	68fa      	ldr	r2, [r7, #12]
 8010b5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010b5e:	f043 0302 	orr.w	r3, r3, #2
 8010b62:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010b64:	2300      	movs	r3, #0
}
 8010b66:	4618      	mov	r0, r3
 8010b68:	3714      	adds	r7, #20
 8010b6a:	46bd      	mov	sp, r7
 8010b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b70:	4770      	bx	lr

08010b72 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8010b72:	b480      	push	{r7}
 8010b74:	b085      	sub	sp, #20
 8010b76:	af00      	add	r7, sp, #0
 8010b78:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	695b      	ldr	r3, [r3, #20]
 8010b7e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	699b      	ldr	r3, [r3, #24]
 8010b84:	68fa      	ldr	r2, [r7, #12]
 8010b86:	4013      	ands	r3, r2
 8010b88:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8010b8a:	68fb      	ldr	r3, [r7, #12]
}
 8010b8c:	4618      	mov	r0, r3
 8010b8e:	3714      	adds	r7, #20
 8010b90:	46bd      	mov	sp, r7
 8010b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b96:	4770      	bx	lr

08010b98 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010b98:	b480      	push	{r7}
 8010b9a:	b085      	sub	sp, #20
 8010b9c:	af00      	add	r7, sp, #0
 8010b9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010baa:	699b      	ldr	r3, [r3, #24]
 8010bac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010bb4:	69db      	ldr	r3, [r3, #28]
 8010bb6:	68ba      	ldr	r2, [r7, #8]
 8010bb8:	4013      	ands	r3, r2
 8010bba:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8010bbc:	68bb      	ldr	r3, [r7, #8]
 8010bbe:	0c1b      	lsrs	r3, r3, #16
}
 8010bc0:	4618      	mov	r0, r3
 8010bc2:	3714      	adds	r7, #20
 8010bc4:	46bd      	mov	sp, r7
 8010bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bca:	4770      	bx	lr

08010bcc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010bcc:	b480      	push	{r7}
 8010bce:	b085      	sub	sp, #20
 8010bd0:	af00      	add	r7, sp, #0
 8010bd2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010bde:	699b      	ldr	r3, [r3, #24]
 8010be0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010be8:	69db      	ldr	r3, [r3, #28]
 8010bea:	68ba      	ldr	r2, [r7, #8]
 8010bec:	4013      	ands	r3, r2
 8010bee:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8010bf0:	68bb      	ldr	r3, [r7, #8]
 8010bf2:	b29b      	uxth	r3, r3
}
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	3714      	adds	r7, #20
 8010bf8:	46bd      	mov	sp, r7
 8010bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bfe:	4770      	bx	lr

08010c00 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010c00:	b480      	push	{r7}
 8010c02:	b085      	sub	sp, #20
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	6078      	str	r0, [r7, #4]
 8010c08:	460b      	mov	r3, r1
 8010c0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8010c10:	78fb      	ldrb	r3, [r7, #3]
 8010c12:	015a      	lsls	r2, r3, #5
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	4413      	add	r3, r2
 8010c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c1c:	689b      	ldr	r3, [r3, #8]
 8010c1e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010c26:	695b      	ldr	r3, [r3, #20]
 8010c28:	68ba      	ldr	r2, [r7, #8]
 8010c2a:	4013      	ands	r3, r2
 8010c2c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010c2e:	68bb      	ldr	r3, [r7, #8]
}
 8010c30:	4618      	mov	r0, r3
 8010c32:	3714      	adds	r7, #20
 8010c34:	46bd      	mov	sp, r7
 8010c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c3a:	4770      	bx	lr

08010c3c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010c3c:	b480      	push	{r7}
 8010c3e:	b087      	sub	sp, #28
 8010c40:	af00      	add	r7, sp, #0
 8010c42:	6078      	str	r0, [r7, #4]
 8010c44:	460b      	mov	r3, r1
 8010c46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8010c4c:	697b      	ldr	r3, [r7, #20]
 8010c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010c52:	691b      	ldr	r3, [r3, #16]
 8010c54:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8010c56:	697b      	ldr	r3, [r7, #20]
 8010c58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c5e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8010c60:	78fb      	ldrb	r3, [r7, #3]
 8010c62:	f003 030f 	and.w	r3, r3, #15
 8010c66:	68fa      	ldr	r2, [r7, #12]
 8010c68:	fa22 f303 	lsr.w	r3, r2, r3
 8010c6c:	01db      	lsls	r3, r3, #7
 8010c6e:	b2db      	uxtb	r3, r3
 8010c70:	693a      	ldr	r2, [r7, #16]
 8010c72:	4313      	orrs	r3, r2
 8010c74:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8010c76:	78fb      	ldrb	r3, [r7, #3]
 8010c78:	015a      	lsls	r2, r3, #5
 8010c7a:	697b      	ldr	r3, [r7, #20]
 8010c7c:	4413      	add	r3, r2
 8010c7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c82:	689b      	ldr	r3, [r3, #8]
 8010c84:	693a      	ldr	r2, [r7, #16]
 8010c86:	4013      	ands	r3, r2
 8010c88:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010c8a:	68bb      	ldr	r3, [r7, #8]
}
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	371c      	adds	r7, #28
 8010c90:	46bd      	mov	sp, r7
 8010c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c96:	4770      	bx	lr

08010c98 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8010c98:	b480      	push	{r7}
 8010c9a:	b083      	sub	sp, #12
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	695b      	ldr	r3, [r3, #20]
 8010ca4:	f003 0301 	and.w	r3, r3, #1
}
 8010ca8:	4618      	mov	r0, r3
 8010caa:	370c      	adds	r7, #12
 8010cac:	46bd      	mov	sp, r7
 8010cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb2:	4770      	bx	lr

08010cb4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8010cb4:	b480      	push	{r7}
 8010cb6:	b085      	sub	sp, #20
 8010cb8:	af00      	add	r7, sp, #0
 8010cba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	68fa      	ldr	r2, [r7, #12]
 8010cca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010cce:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8010cd2:	f023 0307 	bic.w	r3, r3, #7
 8010cd6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8010cd8:	68fb      	ldr	r3, [r7, #12]
 8010cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010cde:	685b      	ldr	r3, [r3, #4]
 8010ce0:	68fa      	ldr	r2, [r7, #12]
 8010ce2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010cea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010cec:	2300      	movs	r3, #0
}
 8010cee:	4618      	mov	r0, r3
 8010cf0:	3714      	adds	r7, #20
 8010cf2:	46bd      	mov	sp, r7
 8010cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf8:	4770      	bx	lr
	...

08010cfc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8010cfc:	b480      	push	{r7}
 8010cfe:	b087      	sub	sp, #28
 8010d00:	af00      	add	r7, sp, #0
 8010d02:	60f8      	str	r0, [r7, #12]
 8010d04:	460b      	mov	r3, r1
 8010d06:	607a      	str	r2, [r7, #4]
 8010d08:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	333c      	adds	r3, #60	; 0x3c
 8010d12:	3304      	adds	r3, #4
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8010d18:	693b      	ldr	r3, [r7, #16]
 8010d1a:	4a26      	ldr	r2, [pc, #152]	; (8010db4 <USB_EP0_OutStart+0xb8>)
 8010d1c:	4293      	cmp	r3, r2
 8010d1e:	d90a      	bls.n	8010d36 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010d20:	697b      	ldr	r3, [r7, #20]
 8010d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010d2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010d30:	d101      	bne.n	8010d36 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8010d32:	2300      	movs	r3, #0
 8010d34:	e037      	b.n	8010da6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8010d36:	697b      	ldr	r3, [r7, #20]
 8010d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d3c:	461a      	mov	r2, r3
 8010d3e:	2300      	movs	r3, #0
 8010d40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010d42:	697b      	ldr	r3, [r7, #20]
 8010d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d48:	691b      	ldr	r3, [r3, #16]
 8010d4a:	697a      	ldr	r2, [r7, #20]
 8010d4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010d50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010d54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8010d56:	697b      	ldr	r3, [r7, #20]
 8010d58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d5c:	691b      	ldr	r3, [r3, #16]
 8010d5e:	697a      	ldr	r2, [r7, #20]
 8010d60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010d64:	f043 0318 	orr.w	r3, r3, #24
 8010d68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8010d6a:	697b      	ldr	r3, [r7, #20]
 8010d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d70:	691b      	ldr	r3, [r3, #16]
 8010d72:	697a      	ldr	r2, [r7, #20]
 8010d74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010d78:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8010d7c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8010d7e:	7afb      	ldrb	r3, [r7, #11]
 8010d80:	2b01      	cmp	r3, #1
 8010d82:	d10f      	bne.n	8010da4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8010d84:	697b      	ldr	r3, [r7, #20]
 8010d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d8a:	461a      	mov	r2, r3
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8010d90:	697b      	ldr	r3, [r7, #20]
 8010d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	697a      	ldr	r2, [r7, #20]
 8010d9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010d9e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8010da2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010da4:	2300      	movs	r3, #0
}
 8010da6:	4618      	mov	r0, r3
 8010da8:	371c      	adds	r7, #28
 8010daa:	46bd      	mov	sp, r7
 8010dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db0:	4770      	bx	lr
 8010db2:	bf00      	nop
 8010db4:	4f54300a 	.word	0x4f54300a

08010db8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010db8:	b480      	push	{r7}
 8010dba:	b085      	sub	sp, #20
 8010dbc:	af00      	add	r7, sp, #0
 8010dbe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8010dc0:	2300      	movs	r3, #0
 8010dc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	3301      	adds	r3, #1
 8010dc8:	60fb      	str	r3, [r7, #12]
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	4a13      	ldr	r2, [pc, #76]	; (8010e1c <USB_CoreReset+0x64>)
 8010dce:	4293      	cmp	r3, r2
 8010dd0:	d901      	bls.n	8010dd6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8010dd2:	2303      	movs	r3, #3
 8010dd4:	e01b      	b.n	8010e0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	691b      	ldr	r3, [r3, #16]
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	daf2      	bge.n	8010dc4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010dde:	2300      	movs	r3, #0
 8010de0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	691b      	ldr	r3, [r3, #16]
 8010de6:	f043 0201 	orr.w	r2, r3, #1
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010dee:	68fb      	ldr	r3, [r7, #12]
 8010df0:	3301      	adds	r3, #1
 8010df2:	60fb      	str	r3, [r7, #12]
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	4a09      	ldr	r2, [pc, #36]	; (8010e1c <USB_CoreReset+0x64>)
 8010df8:	4293      	cmp	r3, r2
 8010dfa:	d901      	bls.n	8010e00 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8010dfc:	2303      	movs	r3, #3
 8010dfe:	e006      	b.n	8010e0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	691b      	ldr	r3, [r3, #16]
 8010e04:	f003 0301 	and.w	r3, r3, #1
 8010e08:	2b01      	cmp	r3, #1
 8010e0a:	d0f0      	beq.n	8010dee <USB_CoreReset+0x36>

  return HAL_OK;
 8010e0c:	2300      	movs	r3, #0
}
 8010e0e:	4618      	mov	r0, r3
 8010e10:	3714      	adds	r7, #20
 8010e12:	46bd      	mov	sp, r7
 8010e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e18:	4770      	bx	lr
 8010e1a:	bf00      	nop
 8010e1c:	00030d40 	.word	0x00030d40

08010e20 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010e20:	b580      	push	{r7, lr}
 8010e22:	b084      	sub	sp, #16
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	6078      	str	r0, [r7, #4]
 8010e28:	460b      	mov	r3, r1
 8010e2a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8010e2c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8010e30:	f004 ffcc 	bl	8015dcc <malloc>
 8010e34:	4603      	mov	r3, r0
 8010e36:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d105      	bne.n	8010e4a <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	2200      	movs	r2, #0
 8010e42:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8010e46:	2302      	movs	r3, #2
 8010e48:	e066      	b.n	8010f18 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	68fa      	ldr	r2, [r7, #12]
 8010e4e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	7c1b      	ldrb	r3, [r3, #16]
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d119      	bne.n	8010e8e <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010e5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010e5e:	2202      	movs	r2, #2
 8010e60:	2181      	movs	r1, #129	; 0x81
 8010e62:	6878      	ldr	r0, [r7, #4]
 8010e64:	f004 fe39 	bl	8015ada <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	2201      	movs	r2, #1
 8010e6c:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010e6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010e72:	2202      	movs	r2, #2
 8010e74:	2101      	movs	r1, #1
 8010e76:	6878      	ldr	r0, [r7, #4]
 8010e78:	f004 fe2f 	bl	8015ada <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	2201      	movs	r2, #1
 8010e80:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	2210      	movs	r2, #16
 8010e88:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8010e8c:	e016      	b.n	8010ebc <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010e8e:	2340      	movs	r3, #64	; 0x40
 8010e90:	2202      	movs	r2, #2
 8010e92:	2181      	movs	r1, #129	; 0x81
 8010e94:	6878      	ldr	r0, [r7, #4]
 8010e96:	f004 fe20 	bl	8015ada <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	2201      	movs	r2, #1
 8010e9e:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010ea0:	2340      	movs	r3, #64	; 0x40
 8010ea2:	2202      	movs	r2, #2
 8010ea4:	2101      	movs	r1, #1
 8010ea6:	6878      	ldr	r0, [r7, #4]
 8010ea8:	f004 fe17 	bl	8015ada <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	2201      	movs	r2, #1
 8010eb0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	2210      	movs	r2, #16
 8010eb8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8010ebc:	2308      	movs	r3, #8
 8010ebe:	2203      	movs	r2, #3
 8010ec0:	2182      	movs	r1, #130	; 0x82
 8010ec2:	6878      	ldr	r0, [r7, #4]
 8010ec4:	f004 fe09 	bl	8015ada <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	2201      	movs	r2, #1
 8010ecc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	2200      	movs	r2, #0
 8010ede:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	2200      	movs	r2, #0
 8010ee6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	7c1b      	ldrb	r3, [r3, #16]
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d109      	bne.n	8010f06 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010ef8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010efc:	2101      	movs	r1, #1
 8010efe:	6878      	ldr	r0, [r7, #4]
 8010f00:	f004 feda 	bl	8015cb8 <USBD_LL_PrepareReceive>
 8010f04:	e007      	b.n	8010f16 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010f0c:	2340      	movs	r3, #64	; 0x40
 8010f0e:	2101      	movs	r1, #1
 8010f10:	6878      	ldr	r0, [r7, #4]
 8010f12:	f004 fed1 	bl	8015cb8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010f16:	2300      	movs	r3, #0
}
 8010f18:	4618      	mov	r0, r3
 8010f1a:	3710      	adds	r7, #16
 8010f1c:	46bd      	mov	sp, r7
 8010f1e:	bd80      	pop	{r7, pc}

08010f20 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010f20:	b580      	push	{r7, lr}
 8010f22:	b084      	sub	sp, #16
 8010f24:	af00      	add	r7, sp, #0
 8010f26:	6078      	str	r0, [r7, #4]
 8010f28:	460b      	mov	r3, r1
 8010f2a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8010f2c:	2300      	movs	r3, #0
 8010f2e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8010f30:	2181      	movs	r1, #129	; 0x81
 8010f32:	6878      	ldr	r0, [r7, #4]
 8010f34:	f004 fdf7 	bl	8015b26 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	2200      	movs	r2, #0
 8010f3c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8010f3e:	2101      	movs	r1, #1
 8010f40:	6878      	ldr	r0, [r7, #4]
 8010f42:	f004 fdf0 	bl	8015b26 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	2200      	movs	r2, #0
 8010f4a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8010f4e:	2182      	movs	r1, #130	; 0x82
 8010f50:	6878      	ldr	r0, [r7, #4]
 8010f52:	f004 fde8 	bl	8015b26 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	2200      	movs	r2, #0
 8010f5a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	2200      	movs	r2, #0
 8010f62:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d00e      	beq.n	8010f8e <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010f76:	685b      	ldr	r3, [r3, #4]
 8010f78:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010f80:	4618      	mov	r0, r3
 8010f82:	f004 ff2b 	bl	8015ddc <free>
    pdev->pClassData = NULL;
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	2200      	movs	r2, #0
 8010f8a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8010f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f90:	4618      	mov	r0, r3
 8010f92:	3710      	adds	r7, #16
 8010f94:	46bd      	mov	sp, r7
 8010f96:	bd80      	pop	{r7, pc}

08010f98 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8010f98:	b580      	push	{r7, lr}
 8010f9a:	b086      	sub	sp, #24
 8010f9c:	af00      	add	r7, sp, #0
 8010f9e:	6078      	str	r0, [r7, #4]
 8010fa0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010fa8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8010faa:	2300      	movs	r3, #0
 8010fac:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8010fae:	2300      	movs	r3, #0
 8010fb0:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8010fb2:	2300      	movs	r3, #0
 8010fb4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010fb6:	683b      	ldr	r3, [r7, #0]
 8010fb8:	781b      	ldrb	r3, [r3, #0]
 8010fba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d03a      	beq.n	8011038 <USBD_CDC_Setup+0xa0>
 8010fc2:	2b20      	cmp	r3, #32
 8010fc4:	f040 8097 	bne.w	80110f6 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8010fc8:	683b      	ldr	r3, [r7, #0]
 8010fca:	88db      	ldrh	r3, [r3, #6]
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d029      	beq.n	8011024 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8010fd0:	683b      	ldr	r3, [r7, #0]
 8010fd2:	781b      	ldrb	r3, [r3, #0]
 8010fd4:	b25b      	sxtb	r3, r3
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	da11      	bge.n	8010ffe <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010fe0:	689b      	ldr	r3, [r3, #8]
 8010fe2:	683a      	ldr	r2, [r7, #0]
 8010fe4:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8010fe6:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010fe8:	683a      	ldr	r2, [r7, #0]
 8010fea:	88d2      	ldrh	r2, [r2, #6]
 8010fec:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8010fee:	6939      	ldr	r1, [r7, #16]
 8010ff0:	683b      	ldr	r3, [r7, #0]
 8010ff2:	88db      	ldrh	r3, [r3, #6]
 8010ff4:	461a      	mov	r2, r3
 8010ff6:	6878      	ldr	r0, [r7, #4]
 8010ff8:	f001 fa9d 	bl	8012536 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8010ffc:	e082      	b.n	8011104 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8010ffe:	683b      	ldr	r3, [r7, #0]
 8011000:	785a      	ldrb	r2, [r3, #1]
 8011002:	693b      	ldr	r3, [r7, #16]
 8011004:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8011008:	683b      	ldr	r3, [r7, #0]
 801100a:	88db      	ldrh	r3, [r3, #6]
 801100c:	b2da      	uxtb	r2, r3
 801100e:	693b      	ldr	r3, [r7, #16]
 8011010:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8011014:	6939      	ldr	r1, [r7, #16]
 8011016:	683b      	ldr	r3, [r7, #0]
 8011018:	88db      	ldrh	r3, [r3, #6]
 801101a:	461a      	mov	r2, r3
 801101c:	6878      	ldr	r0, [r7, #4]
 801101e:	f001 fab6 	bl	801258e <USBD_CtlPrepareRx>
    break;
 8011022:	e06f      	b.n	8011104 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801102a:	689b      	ldr	r3, [r3, #8]
 801102c:	683a      	ldr	r2, [r7, #0]
 801102e:	7850      	ldrb	r0, [r2, #1]
 8011030:	2200      	movs	r2, #0
 8011032:	6839      	ldr	r1, [r7, #0]
 8011034:	4798      	blx	r3
    break;
 8011036:	e065      	b.n	8011104 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8011038:	683b      	ldr	r3, [r7, #0]
 801103a:	785b      	ldrb	r3, [r3, #1]
 801103c:	2b0b      	cmp	r3, #11
 801103e:	d84f      	bhi.n	80110e0 <USBD_CDC_Setup+0x148>
 8011040:	a201      	add	r2, pc, #4	; (adr r2, 8011048 <USBD_CDC_Setup+0xb0>)
 8011042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011046:	bf00      	nop
 8011048:	08011079 	.word	0x08011079
 801104c:	080110ef 	.word	0x080110ef
 8011050:	080110e1 	.word	0x080110e1
 8011054:	080110e1 	.word	0x080110e1
 8011058:	080110e1 	.word	0x080110e1
 801105c:	080110e1 	.word	0x080110e1
 8011060:	080110e1 	.word	0x080110e1
 8011064:	080110e1 	.word	0x080110e1
 8011068:	080110e1 	.word	0x080110e1
 801106c:	080110e1 	.word	0x080110e1
 8011070:	080110a1 	.word	0x080110a1
 8011074:	080110c9 	.word	0x080110c9
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801107e:	2b03      	cmp	r3, #3
 8011080:	d107      	bne.n	8011092 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8011082:	f107 030c 	add.w	r3, r7, #12
 8011086:	2202      	movs	r2, #2
 8011088:	4619      	mov	r1, r3
 801108a:	6878      	ldr	r0, [r7, #4]
 801108c:	f001 fa53 	bl	8012536 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8011090:	e030      	b.n	80110f4 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8011092:	6839      	ldr	r1, [r7, #0]
 8011094:	6878      	ldr	r0, [r7, #4]
 8011096:	f001 f9dd 	bl	8012454 <USBD_CtlError>
        ret = USBD_FAIL;
 801109a:	2303      	movs	r3, #3
 801109c:	75fb      	strb	r3, [r7, #23]
      break;
 801109e:	e029      	b.n	80110f4 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80110a6:	2b03      	cmp	r3, #3
 80110a8:	d107      	bne.n	80110ba <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80110aa:	f107 030f 	add.w	r3, r7, #15
 80110ae:	2201      	movs	r2, #1
 80110b0:	4619      	mov	r1, r3
 80110b2:	6878      	ldr	r0, [r7, #4]
 80110b4:	f001 fa3f 	bl	8012536 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80110b8:	e01c      	b.n	80110f4 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80110ba:	6839      	ldr	r1, [r7, #0]
 80110bc:	6878      	ldr	r0, [r7, #4]
 80110be:	f001 f9c9 	bl	8012454 <USBD_CtlError>
        ret = USBD_FAIL;
 80110c2:	2303      	movs	r3, #3
 80110c4:	75fb      	strb	r3, [r7, #23]
      break;
 80110c6:	e015      	b.n	80110f4 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80110ce:	2b03      	cmp	r3, #3
 80110d0:	d00f      	beq.n	80110f2 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 80110d2:	6839      	ldr	r1, [r7, #0]
 80110d4:	6878      	ldr	r0, [r7, #4]
 80110d6:	f001 f9bd 	bl	8012454 <USBD_CtlError>
        ret = USBD_FAIL;
 80110da:	2303      	movs	r3, #3
 80110dc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80110de:	e008      	b.n	80110f2 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80110e0:	6839      	ldr	r1, [r7, #0]
 80110e2:	6878      	ldr	r0, [r7, #4]
 80110e4:	f001 f9b6 	bl	8012454 <USBD_CtlError>
      ret = USBD_FAIL;
 80110e8:	2303      	movs	r3, #3
 80110ea:	75fb      	strb	r3, [r7, #23]
      break;
 80110ec:	e002      	b.n	80110f4 <USBD_CDC_Setup+0x15c>
      break;
 80110ee:	bf00      	nop
 80110f0:	e008      	b.n	8011104 <USBD_CDC_Setup+0x16c>
      break;
 80110f2:	bf00      	nop
    }
    break;
 80110f4:	e006      	b.n	8011104 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 80110f6:	6839      	ldr	r1, [r7, #0]
 80110f8:	6878      	ldr	r0, [r7, #4]
 80110fa:	f001 f9ab 	bl	8012454 <USBD_CtlError>
    ret = USBD_FAIL;
 80110fe:	2303      	movs	r3, #3
 8011100:	75fb      	strb	r3, [r7, #23]
    break;
 8011102:	bf00      	nop
  }

  return (uint8_t)ret;
 8011104:	7dfb      	ldrb	r3, [r7, #23]
}
 8011106:	4618      	mov	r0, r3
 8011108:	3718      	adds	r7, #24
 801110a:	46bd      	mov	sp, r7
 801110c:	bd80      	pop	{r7, pc}
 801110e:	bf00      	nop

08011110 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011110:	b580      	push	{r7, lr}
 8011112:	b084      	sub	sp, #16
 8011114:	af00      	add	r7, sp, #0
 8011116:	6078      	str	r0, [r7, #4]
 8011118:	460b      	mov	r3, r1
 801111a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011122:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801112a:	2b00      	cmp	r3, #0
 801112c:	d101      	bne.n	8011132 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801112e:	2303      	movs	r3, #3
 8011130:	e049      	b.n	80111c6 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011138:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801113a:	78fa      	ldrb	r2, [r7, #3]
 801113c:	6879      	ldr	r1, [r7, #4]
 801113e:	4613      	mov	r3, r2
 8011140:	009b      	lsls	r3, r3, #2
 8011142:	4413      	add	r3, r2
 8011144:	009b      	lsls	r3, r3, #2
 8011146:	440b      	add	r3, r1
 8011148:	3318      	adds	r3, #24
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	2b00      	cmp	r3, #0
 801114e:	d029      	beq.n	80111a4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8011150:	78fa      	ldrb	r2, [r7, #3]
 8011152:	6879      	ldr	r1, [r7, #4]
 8011154:	4613      	mov	r3, r2
 8011156:	009b      	lsls	r3, r3, #2
 8011158:	4413      	add	r3, r2
 801115a:	009b      	lsls	r3, r3, #2
 801115c:	440b      	add	r3, r1
 801115e:	3318      	adds	r3, #24
 8011160:	681a      	ldr	r2, [r3, #0]
 8011162:	78f9      	ldrb	r1, [r7, #3]
 8011164:	68f8      	ldr	r0, [r7, #12]
 8011166:	460b      	mov	r3, r1
 8011168:	00db      	lsls	r3, r3, #3
 801116a:	1a5b      	subs	r3, r3, r1
 801116c:	009b      	lsls	r3, r3, #2
 801116e:	4403      	add	r3, r0
 8011170:	3344      	adds	r3, #68	; 0x44
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	fbb2 f1f3 	udiv	r1, r2, r3
 8011178:	fb03 f301 	mul.w	r3, r3, r1
 801117c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801117e:	2b00      	cmp	r3, #0
 8011180:	d110      	bne.n	80111a4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8011182:	78fa      	ldrb	r2, [r7, #3]
 8011184:	6879      	ldr	r1, [r7, #4]
 8011186:	4613      	mov	r3, r2
 8011188:	009b      	lsls	r3, r3, #2
 801118a:	4413      	add	r3, r2
 801118c:	009b      	lsls	r3, r3, #2
 801118e:	440b      	add	r3, r1
 8011190:	3318      	adds	r3, #24
 8011192:	2200      	movs	r2, #0
 8011194:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8011196:	78f9      	ldrb	r1, [r7, #3]
 8011198:	2300      	movs	r3, #0
 801119a:	2200      	movs	r2, #0
 801119c:	6878      	ldr	r0, [r7, #4]
 801119e:	f004 fd6a 	bl	8015c76 <USBD_LL_Transmit>
 80111a2:	e00f      	b.n	80111c4 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 80111a4:	68bb      	ldr	r3, [r7, #8]
 80111a6:	2200      	movs	r2, #0
 80111a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80111b2:	691b      	ldr	r3, [r3, #16]
 80111b4:	68ba      	ldr	r2, [r7, #8]
 80111b6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80111ba:	68ba      	ldr	r2, [r7, #8]
 80111bc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80111c0:	78fa      	ldrb	r2, [r7, #3]
 80111c2:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 80111c4:	2300      	movs	r3, #0
}
 80111c6:	4618      	mov	r0, r3
 80111c8:	3710      	adds	r7, #16
 80111ca:	46bd      	mov	sp, r7
 80111cc:	bd80      	pop	{r7, pc}

080111ce <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80111ce:	b580      	push	{r7, lr}
 80111d0:	b084      	sub	sp, #16
 80111d2:	af00      	add	r7, sp, #0
 80111d4:	6078      	str	r0, [r7, #4]
 80111d6:	460b      	mov	r3, r1
 80111d8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80111e0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d101      	bne.n	80111f0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80111ec:	2303      	movs	r3, #3
 80111ee:	e015      	b.n	801121c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80111f0:	78fb      	ldrb	r3, [r7, #3]
 80111f2:	4619      	mov	r1, r3
 80111f4:	6878      	ldr	r0, [r7, #4]
 80111f6:	f004 fd80 	bl	8015cfa <USBD_LL_GetRxDataSize>
 80111fa:	4602      	mov	r2, r0
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011208:	68db      	ldr	r3, [r3, #12]
 801120a:	68fa      	ldr	r2, [r7, #12]
 801120c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8011210:	68fa      	ldr	r2, [r7, #12]
 8011212:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8011216:	4611      	mov	r1, r2
 8011218:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 801121a:	2300      	movs	r3, #0
}
 801121c:	4618      	mov	r0, r3
 801121e:	3710      	adds	r7, #16
 8011220:	46bd      	mov	sp, r7
 8011222:	bd80      	pop	{r7, pc}

08011224 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8011224:	b580      	push	{r7, lr}
 8011226:	b084      	sub	sp, #16
 8011228:	af00      	add	r7, sp, #0
 801122a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011232:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801123a:	2b00      	cmp	r3, #0
 801123c:	d015      	beq.n	801126a <USBD_CDC_EP0_RxReady+0x46>
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8011244:	2bff      	cmp	r3, #255	; 0xff
 8011246:	d010      	beq.n	801126a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801124e:	689b      	ldr	r3, [r3, #8]
 8011250:	68fa      	ldr	r2, [r7, #12]
 8011252:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8011256:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8011258:	68fa      	ldr	r2, [r7, #12]
 801125a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801125e:	b292      	uxth	r2, r2
 8011260:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	22ff      	movs	r2, #255	; 0xff
 8011266:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 801126a:	2300      	movs	r3, #0
}
 801126c:	4618      	mov	r0, r3
 801126e:	3710      	adds	r7, #16
 8011270:	46bd      	mov	sp, r7
 8011272:	bd80      	pop	{r7, pc}

08011274 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8011274:	b480      	push	{r7}
 8011276:	b083      	sub	sp, #12
 8011278:	af00      	add	r7, sp, #0
 801127a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	2243      	movs	r2, #67	; 0x43
 8011280:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8011282:	4b03      	ldr	r3, [pc, #12]	; (8011290 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8011284:	4618      	mov	r0, r3
 8011286:	370c      	adds	r7, #12
 8011288:	46bd      	mov	sp, r7
 801128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801128e:	4770      	bx	lr
 8011290:	200008bc 	.word	0x200008bc

08011294 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8011294:	b480      	push	{r7}
 8011296:	b083      	sub	sp, #12
 8011298:	af00      	add	r7, sp, #0
 801129a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	2243      	movs	r2, #67	; 0x43
 80112a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80112a2:	4b03      	ldr	r3, [pc, #12]	; (80112b0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80112a4:	4618      	mov	r0, r3
 80112a6:	370c      	adds	r7, #12
 80112a8:	46bd      	mov	sp, r7
 80112aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ae:	4770      	bx	lr
 80112b0:	20000878 	.word	0x20000878

080112b4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80112b4:	b480      	push	{r7}
 80112b6:	b083      	sub	sp, #12
 80112b8:	af00      	add	r7, sp, #0
 80112ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	2243      	movs	r2, #67	; 0x43
 80112c0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80112c2:	4b03      	ldr	r3, [pc, #12]	; (80112d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80112c4:	4618      	mov	r0, r3
 80112c6:	370c      	adds	r7, #12
 80112c8:	46bd      	mov	sp, r7
 80112ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ce:	4770      	bx	lr
 80112d0:	20000900 	.word	0x20000900

080112d4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80112d4:	b480      	push	{r7}
 80112d6:	b083      	sub	sp, #12
 80112d8:	af00      	add	r7, sp, #0
 80112da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	220a      	movs	r2, #10
 80112e0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80112e2:	4b03      	ldr	r3, [pc, #12]	; (80112f0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80112e4:	4618      	mov	r0, r3
 80112e6:	370c      	adds	r7, #12
 80112e8:	46bd      	mov	sp, r7
 80112ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ee:	4770      	bx	lr
 80112f0:	20000834 	.word	0x20000834

080112f4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80112f4:	b480      	push	{r7}
 80112f6:	b083      	sub	sp, #12
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	6078      	str	r0, [r7, #4]
 80112fc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80112fe:	683b      	ldr	r3, [r7, #0]
 8011300:	2b00      	cmp	r3, #0
 8011302:	d101      	bne.n	8011308 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8011304:	2303      	movs	r3, #3
 8011306:	e004      	b.n	8011312 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	683a      	ldr	r2, [r7, #0]
 801130c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8011310:	2300      	movs	r3, #0
}
 8011312:	4618      	mov	r0, r3
 8011314:	370c      	adds	r7, #12
 8011316:	46bd      	mov	sp, r7
 8011318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801131c:	4770      	bx	lr

0801131e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801131e:	b480      	push	{r7}
 8011320:	b087      	sub	sp, #28
 8011322:	af00      	add	r7, sp, #0
 8011324:	60f8      	str	r0, [r7, #12]
 8011326:	60b9      	str	r1, [r7, #8]
 8011328:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011330:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8011332:	697b      	ldr	r3, [r7, #20]
 8011334:	68ba      	ldr	r2, [r7, #8]
 8011336:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 801133a:	697b      	ldr	r3, [r7, #20]
 801133c:	687a      	ldr	r2, [r7, #4]
 801133e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8011342:	2300      	movs	r3, #0
}
 8011344:	4618      	mov	r0, r3
 8011346:	371c      	adds	r7, #28
 8011348:	46bd      	mov	sp, r7
 801134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801134e:	4770      	bx	lr

08011350 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8011350:	b480      	push	{r7}
 8011352:	b085      	sub	sp, #20
 8011354:	af00      	add	r7, sp, #0
 8011356:	6078      	str	r0, [r7, #4]
 8011358:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011360:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	683a      	ldr	r2, [r7, #0]
 8011366:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 801136a:	2300      	movs	r3, #0
}
 801136c:	4618      	mov	r0, r3
 801136e:	3714      	adds	r7, #20
 8011370:	46bd      	mov	sp, r7
 8011372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011376:	4770      	bx	lr

08011378 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8011378:	b580      	push	{r7, lr}
 801137a:	b084      	sub	sp, #16
 801137c:	af00      	add	r7, sp, #0
 801137e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011386:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8011388:	2301      	movs	r3, #1
 801138a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011392:	2b00      	cmp	r3, #0
 8011394:	d101      	bne.n	801139a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011396:	2303      	movs	r3, #3
 8011398:	e01a      	b.n	80113d0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 801139a:	68bb      	ldr	r3, [r7, #8]
 801139c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d114      	bne.n	80113ce <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80113a4:	68bb      	ldr	r3, [r7, #8]
 80113a6:	2201      	movs	r2, #1
 80113a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80113ac:	68bb      	ldr	r3, [r7, #8]
 80113ae:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80113b6:	68bb      	ldr	r3, [r7, #8]
 80113b8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80113bc:	68bb      	ldr	r3, [r7, #8]
 80113be:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80113c2:	2181      	movs	r1, #129	; 0x81
 80113c4:	6878      	ldr	r0, [r7, #4]
 80113c6:	f004 fc56 	bl	8015c76 <USBD_LL_Transmit>

    ret = USBD_OK;
 80113ca:	2300      	movs	r3, #0
 80113cc:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80113ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80113d0:	4618      	mov	r0, r3
 80113d2:	3710      	adds	r7, #16
 80113d4:	46bd      	mov	sp, r7
 80113d6:	bd80      	pop	{r7, pc}

080113d8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80113d8:	b580      	push	{r7, lr}
 80113da:	b084      	sub	sp, #16
 80113dc:	af00      	add	r7, sp, #0
 80113de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80113e6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d101      	bne.n	80113f6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80113f2:	2303      	movs	r3, #3
 80113f4:	e016      	b.n	8011424 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	7c1b      	ldrb	r3, [r3, #16]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d109      	bne.n	8011412 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011404:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011408:	2101      	movs	r1, #1
 801140a:	6878      	ldr	r0, [r7, #4]
 801140c:	f004 fc54 	bl	8015cb8 <USBD_LL_PrepareReceive>
 8011410:	e007      	b.n	8011422 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011418:	2340      	movs	r3, #64	; 0x40
 801141a:	2101      	movs	r1, #1
 801141c:	6878      	ldr	r0, [r7, #4]
 801141e:	f004 fc4b 	bl	8015cb8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011422:	2300      	movs	r3, #0
}
 8011424:	4618      	mov	r0, r3
 8011426:	3710      	adds	r7, #16
 8011428:	46bd      	mov	sp, r7
 801142a:	bd80      	pop	{r7, pc}

0801142c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801142c:	b580      	push	{r7, lr}
 801142e:	b086      	sub	sp, #24
 8011430:	af00      	add	r7, sp, #0
 8011432:	60f8      	str	r0, [r7, #12]
 8011434:	60b9      	str	r1, [r7, #8]
 8011436:	4613      	mov	r3, r2
 8011438:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	2b00      	cmp	r3, #0
 801143e:	d101      	bne.n	8011444 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8011440:	2303      	movs	r3, #3
 8011442:	e025      	b.n	8011490 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801144a:	2b00      	cmp	r3, #0
 801144c:	d003      	beq.n	8011456 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	2200      	movs	r2, #0
 8011452:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 801145c:	2b00      	cmp	r3, #0
 801145e:	d003      	beq.n	8011468 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	2200      	movs	r2, #0
 8011464:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8011468:	68bb      	ldr	r3, [r7, #8]
 801146a:	2b00      	cmp	r3, #0
 801146c:	d003      	beq.n	8011476 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	68ba      	ldr	r2, [r7, #8]
 8011472:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	2201      	movs	r2, #1
 801147a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	79fa      	ldrb	r2, [r7, #7]
 8011482:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8011484:	68f8      	ldr	r0, [r7, #12]
 8011486:	f004 fac1 	bl	8015a0c <USBD_LL_Init>
 801148a:	4603      	mov	r3, r0
 801148c:	75fb      	strb	r3, [r7, #23]

  return ret;
 801148e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011490:	4618      	mov	r0, r3
 8011492:	3718      	adds	r7, #24
 8011494:	46bd      	mov	sp, r7
 8011496:	bd80      	pop	{r7, pc}

08011498 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011498:	b580      	push	{r7, lr}
 801149a:	b084      	sub	sp, #16
 801149c:	af00      	add	r7, sp, #0
 801149e:	6078      	str	r0, [r7, #4]
 80114a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80114a2:	2300      	movs	r3, #0
 80114a4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80114a6:	683b      	ldr	r3, [r7, #0]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d101      	bne.n	80114b0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80114ac:	2303      	movs	r3, #3
 80114ae:	e010      	b.n	80114d2 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	683a      	ldr	r2, [r7, #0]
 80114b4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80114be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114c0:	f107 020e 	add.w	r2, r7, #14
 80114c4:	4610      	mov	r0, r2
 80114c6:	4798      	blx	r3
 80114c8:	4602      	mov	r2, r0
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80114d0:	2300      	movs	r3, #0
}
 80114d2:	4618      	mov	r0, r3
 80114d4:	3710      	adds	r7, #16
 80114d6:	46bd      	mov	sp, r7
 80114d8:	bd80      	pop	{r7, pc}

080114da <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80114da:	b580      	push	{r7, lr}
 80114dc:	b082      	sub	sp, #8
 80114de:	af00      	add	r7, sp, #0
 80114e0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80114e2:	6878      	ldr	r0, [r7, #4]
 80114e4:	f004 fade 	bl	8015aa4 <USBD_LL_Start>
 80114e8:	4603      	mov	r3, r0
}
 80114ea:	4618      	mov	r0, r3
 80114ec:	3708      	adds	r7, #8
 80114ee:	46bd      	mov	sp, r7
 80114f0:	bd80      	pop	{r7, pc}

080114f2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80114f2:	b480      	push	{r7}
 80114f4:	b083      	sub	sp, #12
 80114f6:	af00      	add	r7, sp, #0
 80114f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80114fa:	2300      	movs	r3, #0
}
 80114fc:	4618      	mov	r0, r3
 80114fe:	370c      	adds	r7, #12
 8011500:	46bd      	mov	sp, r7
 8011502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011506:	4770      	bx	lr

08011508 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011508:	b580      	push	{r7, lr}
 801150a:	b084      	sub	sp, #16
 801150c:	af00      	add	r7, sp, #0
 801150e:	6078      	str	r0, [r7, #4]
 8011510:	460b      	mov	r3, r1
 8011512:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8011514:	2303      	movs	r3, #3
 8011516:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801151e:	2b00      	cmp	r3, #0
 8011520:	d009      	beq.n	8011536 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	78fa      	ldrb	r2, [r7, #3]
 801152c:	4611      	mov	r1, r2
 801152e:	6878      	ldr	r0, [r7, #4]
 8011530:	4798      	blx	r3
 8011532:	4603      	mov	r3, r0
 8011534:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8011536:	7bfb      	ldrb	r3, [r7, #15]
}
 8011538:	4618      	mov	r0, r3
 801153a:	3710      	adds	r7, #16
 801153c:	46bd      	mov	sp, r7
 801153e:	bd80      	pop	{r7, pc}

08011540 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011540:	b580      	push	{r7, lr}
 8011542:	b082      	sub	sp, #8
 8011544:	af00      	add	r7, sp, #0
 8011546:	6078      	str	r0, [r7, #4]
 8011548:	460b      	mov	r3, r1
 801154a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011552:	2b00      	cmp	r3, #0
 8011554:	d007      	beq.n	8011566 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801155c:	685b      	ldr	r3, [r3, #4]
 801155e:	78fa      	ldrb	r2, [r7, #3]
 8011560:	4611      	mov	r1, r2
 8011562:	6878      	ldr	r0, [r7, #4]
 8011564:	4798      	blx	r3
  }

  return USBD_OK;
 8011566:	2300      	movs	r3, #0
}
 8011568:	4618      	mov	r0, r3
 801156a:	3708      	adds	r7, #8
 801156c:	46bd      	mov	sp, r7
 801156e:	bd80      	pop	{r7, pc}

08011570 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011570:	b580      	push	{r7, lr}
 8011572:	b084      	sub	sp, #16
 8011574:	af00      	add	r7, sp, #0
 8011576:	6078      	str	r0, [r7, #4]
 8011578:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011580:	6839      	ldr	r1, [r7, #0]
 8011582:	4618      	mov	r0, r3
 8011584:	f000 ff2c 	bl	80123e0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	2201      	movs	r2, #1
 801158c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8011596:	461a      	mov	r2, r3
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80115a4:	f003 031f 	and.w	r3, r3, #31
 80115a8:	2b01      	cmp	r3, #1
 80115aa:	d00e      	beq.n	80115ca <USBD_LL_SetupStage+0x5a>
 80115ac:	2b01      	cmp	r3, #1
 80115ae:	d302      	bcc.n	80115b6 <USBD_LL_SetupStage+0x46>
 80115b0:	2b02      	cmp	r3, #2
 80115b2:	d014      	beq.n	80115de <USBD_LL_SetupStage+0x6e>
 80115b4:	e01d      	b.n	80115f2 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80115bc:	4619      	mov	r1, r3
 80115be:	6878      	ldr	r0, [r7, #4]
 80115c0:	f000 fa18 	bl	80119f4 <USBD_StdDevReq>
 80115c4:	4603      	mov	r3, r0
 80115c6:	73fb      	strb	r3, [r7, #15]
      break;
 80115c8:	e020      	b.n	801160c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80115d0:	4619      	mov	r1, r3
 80115d2:	6878      	ldr	r0, [r7, #4]
 80115d4:	f000 fa7c 	bl	8011ad0 <USBD_StdItfReq>
 80115d8:	4603      	mov	r3, r0
 80115da:	73fb      	strb	r3, [r7, #15]
      break;
 80115dc:	e016      	b.n	801160c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80115e4:	4619      	mov	r1, r3
 80115e6:	6878      	ldr	r0, [r7, #4]
 80115e8:	f000 fab8 	bl	8011b5c <USBD_StdEPReq>
 80115ec:	4603      	mov	r3, r0
 80115ee:	73fb      	strb	r3, [r7, #15]
      break;
 80115f0:	e00c      	b.n	801160c <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80115f8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80115fc:	b2db      	uxtb	r3, r3
 80115fe:	4619      	mov	r1, r3
 8011600:	6878      	ldr	r0, [r7, #4]
 8011602:	f004 faaf 	bl	8015b64 <USBD_LL_StallEP>
 8011606:	4603      	mov	r3, r0
 8011608:	73fb      	strb	r3, [r7, #15]
      break;
 801160a:	bf00      	nop
  }

  return ret;
 801160c:	7bfb      	ldrb	r3, [r7, #15]
}
 801160e:	4618      	mov	r0, r3
 8011610:	3710      	adds	r7, #16
 8011612:	46bd      	mov	sp, r7
 8011614:	bd80      	pop	{r7, pc}

08011616 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011616:	b580      	push	{r7, lr}
 8011618:	b086      	sub	sp, #24
 801161a:	af00      	add	r7, sp, #0
 801161c:	60f8      	str	r0, [r7, #12]
 801161e:	460b      	mov	r3, r1
 8011620:	607a      	str	r2, [r7, #4]
 8011622:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011624:	7afb      	ldrb	r3, [r7, #11]
 8011626:	2b00      	cmp	r3, #0
 8011628:	d137      	bne.n	801169a <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8011630:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011632:	68fb      	ldr	r3, [r7, #12]
 8011634:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011638:	2b03      	cmp	r3, #3
 801163a:	d14a      	bne.n	80116d2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 801163c:	693b      	ldr	r3, [r7, #16]
 801163e:	689a      	ldr	r2, [r3, #8]
 8011640:	693b      	ldr	r3, [r7, #16]
 8011642:	68db      	ldr	r3, [r3, #12]
 8011644:	429a      	cmp	r2, r3
 8011646:	d913      	bls.n	8011670 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011648:	693b      	ldr	r3, [r7, #16]
 801164a:	689a      	ldr	r2, [r3, #8]
 801164c:	693b      	ldr	r3, [r7, #16]
 801164e:	68db      	ldr	r3, [r3, #12]
 8011650:	1ad2      	subs	r2, r2, r3
 8011652:	693b      	ldr	r3, [r7, #16]
 8011654:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8011656:	693b      	ldr	r3, [r7, #16]
 8011658:	68da      	ldr	r2, [r3, #12]
 801165a:	693b      	ldr	r3, [r7, #16]
 801165c:	689b      	ldr	r3, [r3, #8]
 801165e:	4293      	cmp	r3, r2
 8011660:	bf28      	it	cs
 8011662:	4613      	movcs	r3, r2
 8011664:	461a      	mov	r2, r3
 8011666:	6879      	ldr	r1, [r7, #4]
 8011668:	68f8      	ldr	r0, [r7, #12]
 801166a:	f000 ffad 	bl	80125c8 <USBD_CtlContinueRx>
 801166e:	e030      	b.n	80116d2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011676:	691b      	ldr	r3, [r3, #16]
 8011678:	2b00      	cmp	r3, #0
 801167a:	d00a      	beq.n	8011692 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 801167c:	68fb      	ldr	r3, [r7, #12]
 801167e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8011682:	2b03      	cmp	r3, #3
 8011684:	d105      	bne.n	8011692 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801168c:	691b      	ldr	r3, [r3, #16]
 801168e:	68f8      	ldr	r0, [r7, #12]
 8011690:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8011692:	68f8      	ldr	r0, [r7, #12]
 8011694:	f000 ffa9 	bl	80125ea <USBD_CtlSendStatus>
 8011698:	e01b      	b.n	80116d2 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80116a0:	699b      	ldr	r3, [r3, #24]
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d013      	beq.n	80116ce <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80116ac:	2b03      	cmp	r3, #3
 80116ae:	d10e      	bne.n	80116ce <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80116b6:	699b      	ldr	r3, [r3, #24]
 80116b8:	7afa      	ldrb	r2, [r7, #11]
 80116ba:	4611      	mov	r1, r2
 80116bc:	68f8      	ldr	r0, [r7, #12]
 80116be:	4798      	blx	r3
 80116c0:	4603      	mov	r3, r0
 80116c2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80116c4:	7dfb      	ldrb	r3, [r7, #23]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d003      	beq.n	80116d2 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80116ca:	7dfb      	ldrb	r3, [r7, #23]
 80116cc:	e002      	b.n	80116d4 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80116ce:	2303      	movs	r3, #3
 80116d0:	e000      	b.n	80116d4 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80116d2:	2300      	movs	r3, #0
}
 80116d4:	4618      	mov	r0, r3
 80116d6:	3718      	adds	r7, #24
 80116d8:	46bd      	mov	sp, r7
 80116da:	bd80      	pop	{r7, pc}

080116dc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80116dc:	b580      	push	{r7, lr}
 80116de:	b086      	sub	sp, #24
 80116e0:	af00      	add	r7, sp, #0
 80116e2:	60f8      	str	r0, [r7, #12]
 80116e4:	460b      	mov	r3, r1
 80116e6:	607a      	str	r2, [r7, #4]
 80116e8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80116ea:	7afb      	ldrb	r3, [r7, #11]
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d16a      	bne.n	80117c6 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	3314      	adds	r3, #20
 80116f4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80116f6:	68fb      	ldr	r3, [r7, #12]
 80116f8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80116fc:	2b02      	cmp	r3, #2
 80116fe:	d155      	bne.n	80117ac <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8011700:	693b      	ldr	r3, [r7, #16]
 8011702:	689a      	ldr	r2, [r3, #8]
 8011704:	693b      	ldr	r3, [r7, #16]
 8011706:	68db      	ldr	r3, [r3, #12]
 8011708:	429a      	cmp	r2, r3
 801170a:	d914      	bls.n	8011736 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801170c:	693b      	ldr	r3, [r7, #16]
 801170e:	689a      	ldr	r2, [r3, #8]
 8011710:	693b      	ldr	r3, [r7, #16]
 8011712:	68db      	ldr	r3, [r3, #12]
 8011714:	1ad2      	subs	r2, r2, r3
 8011716:	693b      	ldr	r3, [r7, #16]
 8011718:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801171a:	693b      	ldr	r3, [r7, #16]
 801171c:	689b      	ldr	r3, [r3, #8]
 801171e:	461a      	mov	r2, r3
 8011720:	6879      	ldr	r1, [r7, #4]
 8011722:	68f8      	ldr	r0, [r7, #12]
 8011724:	f000 ff22 	bl	801256c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011728:	2300      	movs	r3, #0
 801172a:	2200      	movs	r2, #0
 801172c:	2100      	movs	r1, #0
 801172e:	68f8      	ldr	r0, [r7, #12]
 8011730:	f004 fac2 	bl	8015cb8 <USBD_LL_PrepareReceive>
 8011734:	e03a      	b.n	80117ac <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8011736:	693b      	ldr	r3, [r7, #16]
 8011738:	68da      	ldr	r2, [r3, #12]
 801173a:	693b      	ldr	r3, [r7, #16]
 801173c:	689b      	ldr	r3, [r3, #8]
 801173e:	429a      	cmp	r2, r3
 8011740:	d11c      	bne.n	801177c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8011742:	693b      	ldr	r3, [r7, #16]
 8011744:	685a      	ldr	r2, [r3, #4]
 8011746:	693b      	ldr	r3, [r7, #16]
 8011748:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801174a:	429a      	cmp	r2, r3
 801174c:	d316      	bcc.n	801177c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801174e:	693b      	ldr	r3, [r7, #16]
 8011750:	685a      	ldr	r2, [r3, #4]
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011758:	429a      	cmp	r2, r3
 801175a:	d20f      	bcs.n	801177c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801175c:	2200      	movs	r2, #0
 801175e:	2100      	movs	r1, #0
 8011760:	68f8      	ldr	r0, [r7, #12]
 8011762:	f000 ff03 	bl	801256c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	2200      	movs	r2, #0
 801176a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801176e:	2300      	movs	r3, #0
 8011770:	2200      	movs	r2, #0
 8011772:	2100      	movs	r1, #0
 8011774:	68f8      	ldr	r0, [r7, #12]
 8011776:	f004 fa9f 	bl	8015cb8 <USBD_LL_PrepareReceive>
 801177a:	e017      	b.n	80117ac <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011782:	68db      	ldr	r3, [r3, #12]
 8011784:	2b00      	cmp	r3, #0
 8011786:	d00a      	beq.n	801179e <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801178e:	2b03      	cmp	r3, #3
 8011790:	d105      	bne.n	801179e <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011798:	68db      	ldr	r3, [r3, #12]
 801179a:	68f8      	ldr	r0, [r7, #12]
 801179c:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801179e:	2180      	movs	r1, #128	; 0x80
 80117a0:	68f8      	ldr	r0, [r7, #12]
 80117a2:	f004 f9df 	bl	8015b64 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80117a6:	68f8      	ldr	r0, [r7, #12]
 80117a8:	f000 ff32 	bl	8012610 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80117b2:	2b01      	cmp	r3, #1
 80117b4:	d123      	bne.n	80117fe <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80117b6:	68f8      	ldr	r0, [r7, #12]
 80117b8:	f7ff fe9b 	bl	80114f2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	2200      	movs	r2, #0
 80117c0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80117c4:	e01b      	b.n	80117fe <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80117cc:	695b      	ldr	r3, [r3, #20]
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d013      	beq.n	80117fa <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80117d8:	2b03      	cmp	r3, #3
 80117da:	d10e      	bne.n	80117fa <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80117e2:	695b      	ldr	r3, [r3, #20]
 80117e4:	7afa      	ldrb	r2, [r7, #11]
 80117e6:	4611      	mov	r1, r2
 80117e8:	68f8      	ldr	r0, [r7, #12]
 80117ea:	4798      	blx	r3
 80117ec:	4603      	mov	r3, r0
 80117ee:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80117f0:	7dfb      	ldrb	r3, [r7, #23]
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d003      	beq.n	80117fe <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80117f6:	7dfb      	ldrb	r3, [r7, #23]
 80117f8:	e002      	b.n	8011800 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80117fa:	2303      	movs	r3, #3
 80117fc:	e000      	b.n	8011800 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80117fe:	2300      	movs	r3, #0
}
 8011800:	4618      	mov	r0, r3
 8011802:	3718      	adds	r7, #24
 8011804:	46bd      	mov	sp, r7
 8011806:	bd80      	pop	{r7, pc}

08011808 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011808:	b580      	push	{r7, lr}
 801180a:	b082      	sub	sp, #8
 801180c:	af00      	add	r7, sp, #0
 801180e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	2201      	movs	r2, #1
 8011814:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	2200      	movs	r2, #0
 801181c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	2200      	movs	r2, #0
 8011824:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	2200      	movs	r2, #0
 801182a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011834:	2b00      	cmp	r3, #0
 8011836:	d009      	beq.n	801184c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801183e:	685b      	ldr	r3, [r3, #4]
 8011840:	687a      	ldr	r2, [r7, #4]
 8011842:	6852      	ldr	r2, [r2, #4]
 8011844:	b2d2      	uxtb	r2, r2
 8011846:	4611      	mov	r1, r2
 8011848:	6878      	ldr	r0, [r7, #4]
 801184a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801184c:	2340      	movs	r3, #64	; 0x40
 801184e:	2200      	movs	r2, #0
 8011850:	2100      	movs	r1, #0
 8011852:	6878      	ldr	r0, [r7, #4]
 8011854:	f004 f941 	bl	8015ada <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	2201      	movs	r2, #1
 801185c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	2240      	movs	r2, #64	; 0x40
 8011864:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011868:	2340      	movs	r3, #64	; 0x40
 801186a:	2200      	movs	r2, #0
 801186c:	2180      	movs	r1, #128	; 0x80
 801186e:	6878      	ldr	r0, [r7, #4]
 8011870:	f004 f933 	bl	8015ada <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	2201      	movs	r2, #1
 8011878:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	2240      	movs	r2, #64	; 0x40
 801187e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8011880:	2300      	movs	r3, #0
}
 8011882:	4618      	mov	r0, r3
 8011884:	3708      	adds	r7, #8
 8011886:	46bd      	mov	sp, r7
 8011888:	bd80      	pop	{r7, pc}

0801188a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801188a:	b480      	push	{r7}
 801188c:	b083      	sub	sp, #12
 801188e:	af00      	add	r7, sp, #0
 8011890:	6078      	str	r0, [r7, #4]
 8011892:	460b      	mov	r3, r1
 8011894:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	78fa      	ldrb	r2, [r7, #3]
 801189a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801189c:	2300      	movs	r3, #0
}
 801189e:	4618      	mov	r0, r3
 80118a0:	370c      	adds	r7, #12
 80118a2:	46bd      	mov	sp, r7
 80118a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118a8:	4770      	bx	lr

080118aa <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80118aa:	b480      	push	{r7}
 80118ac:	b083      	sub	sp, #12
 80118ae:	af00      	add	r7, sp, #0
 80118b0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	2204      	movs	r2, #4
 80118c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80118c6:	2300      	movs	r3, #0
}
 80118c8:	4618      	mov	r0, r3
 80118ca:	370c      	adds	r7, #12
 80118cc:	46bd      	mov	sp, r7
 80118ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d2:	4770      	bx	lr

080118d4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80118d4:	b480      	push	{r7}
 80118d6:	b083      	sub	sp, #12
 80118d8:	af00      	add	r7, sp, #0
 80118da:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80118e2:	2b04      	cmp	r3, #4
 80118e4:	d105      	bne.n	80118f2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80118f2:	2300      	movs	r3, #0
}
 80118f4:	4618      	mov	r0, r3
 80118f6:	370c      	adds	r7, #12
 80118f8:	46bd      	mov	sp, r7
 80118fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118fe:	4770      	bx	lr

08011900 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8011900:	b580      	push	{r7, lr}
 8011902:	b082      	sub	sp, #8
 8011904:	af00      	add	r7, sp, #0
 8011906:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801190e:	2b03      	cmp	r3, #3
 8011910:	d10b      	bne.n	801192a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011918:	69db      	ldr	r3, [r3, #28]
 801191a:	2b00      	cmp	r3, #0
 801191c:	d005      	beq.n	801192a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011924:	69db      	ldr	r3, [r3, #28]
 8011926:	6878      	ldr	r0, [r7, #4]
 8011928:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801192a:	2300      	movs	r3, #0
}
 801192c:	4618      	mov	r0, r3
 801192e:	3708      	adds	r7, #8
 8011930:	46bd      	mov	sp, r7
 8011932:	bd80      	pop	{r7, pc}

08011934 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8011934:	b480      	push	{r7}
 8011936:	b083      	sub	sp, #12
 8011938:	af00      	add	r7, sp, #0
 801193a:	6078      	str	r0, [r7, #4]
 801193c:	460b      	mov	r3, r1
 801193e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8011940:	2300      	movs	r3, #0
}
 8011942:	4618      	mov	r0, r3
 8011944:	370c      	adds	r7, #12
 8011946:	46bd      	mov	sp, r7
 8011948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801194c:	4770      	bx	lr

0801194e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801194e:	b480      	push	{r7}
 8011950:	b083      	sub	sp, #12
 8011952:	af00      	add	r7, sp, #0
 8011954:	6078      	str	r0, [r7, #4]
 8011956:	460b      	mov	r3, r1
 8011958:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 801195a:	2300      	movs	r3, #0
}
 801195c:	4618      	mov	r0, r3
 801195e:	370c      	adds	r7, #12
 8011960:	46bd      	mov	sp, r7
 8011962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011966:	4770      	bx	lr

08011968 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8011968:	b480      	push	{r7}
 801196a:	b083      	sub	sp, #12
 801196c:	af00      	add	r7, sp, #0
 801196e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011970:	2300      	movs	r3, #0
}
 8011972:	4618      	mov	r0, r3
 8011974:	370c      	adds	r7, #12
 8011976:	46bd      	mov	sp, r7
 8011978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801197c:	4770      	bx	lr

0801197e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801197e:	b580      	push	{r7, lr}
 8011980:	b082      	sub	sp, #8
 8011982:	af00      	add	r7, sp, #0
 8011984:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	2201      	movs	r2, #1
 801198a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011994:	2b00      	cmp	r3, #0
 8011996:	d009      	beq.n	80119ac <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801199e:	685b      	ldr	r3, [r3, #4]
 80119a0:	687a      	ldr	r2, [r7, #4]
 80119a2:	6852      	ldr	r2, [r2, #4]
 80119a4:	b2d2      	uxtb	r2, r2
 80119a6:	4611      	mov	r1, r2
 80119a8:	6878      	ldr	r0, [r7, #4]
 80119aa:	4798      	blx	r3
  }

  return USBD_OK;
 80119ac:	2300      	movs	r3, #0
}
 80119ae:	4618      	mov	r0, r3
 80119b0:	3708      	adds	r7, #8
 80119b2:	46bd      	mov	sp, r7
 80119b4:	bd80      	pop	{r7, pc}

080119b6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80119b6:	b480      	push	{r7}
 80119b8:	b087      	sub	sp, #28
 80119ba:	af00      	add	r7, sp, #0
 80119bc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80119c2:	697b      	ldr	r3, [r7, #20]
 80119c4:	781b      	ldrb	r3, [r3, #0]
 80119c6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80119c8:	697b      	ldr	r3, [r7, #20]
 80119ca:	3301      	adds	r3, #1
 80119cc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80119ce:	697b      	ldr	r3, [r7, #20]
 80119d0:	781b      	ldrb	r3, [r3, #0]
 80119d2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80119d4:	8a3b      	ldrh	r3, [r7, #16]
 80119d6:	021b      	lsls	r3, r3, #8
 80119d8:	b21a      	sxth	r2, r3
 80119da:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80119de:	4313      	orrs	r3, r2
 80119e0:	b21b      	sxth	r3, r3
 80119e2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80119e4:	89fb      	ldrh	r3, [r7, #14]
}
 80119e6:	4618      	mov	r0, r3
 80119e8:	371c      	adds	r7, #28
 80119ea:	46bd      	mov	sp, r7
 80119ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119f0:	4770      	bx	lr
	...

080119f4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80119f4:	b580      	push	{r7, lr}
 80119f6:	b084      	sub	sp, #16
 80119f8:	af00      	add	r7, sp, #0
 80119fa:	6078      	str	r0, [r7, #4]
 80119fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80119fe:	2300      	movs	r3, #0
 8011a00:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011a02:	683b      	ldr	r3, [r7, #0]
 8011a04:	781b      	ldrb	r3, [r3, #0]
 8011a06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011a0a:	2b20      	cmp	r3, #32
 8011a0c:	d004      	beq.n	8011a18 <USBD_StdDevReq+0x24>
 8011a0e:	2b40      	cmp	r3, #64	; 0x40
 8011a10:	d002      	beq.n	8011a18 <USBD_StdDevReq+0x24>
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d00a      	beq.n	8011a2c <USBD_StdDevReq+0x38>
 8011a16:	e050      	b.n	8011aba <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a1e:	689b      	ldr	r3, [r3, #8]
 8011a20:	6839      	ldr	r1, [r7, #0]
 8011a22:	6878      	ldr	r0, [r7, #4]
 8011a24:	4798      	blx	r3
 8011a26:	4603      	mov	r3, r0
 8011a28:	73fb      	strb	r3, [r7, #15]
    break;
 8011a2a:	e04b      	b.n	8011ac4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8011a2c:	683b      	ldr	r3, [r7, #0]
 8011a2e:	785b      	ldrb	r3, [r3, #1]
 8011a30:	2b09      	cmp	r3, #9
 8011a32:	d83c      	bhi.n	8011aae <USBD_StdDevReq+0xba>
 8011a34:	a201      	add	r2, pc, #4	; (adr r2, 8011a3c <USBD_StdDevReq+0x48>)
 8011a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a3a:	bf00      	nop
 8011a3c:	08011a91 	.word	0x08011a91
 8011a40:	08011aa5 	.word	0x08011aa5
 8011a44:	08011aaf 	.word	0x08011aaf
 8011a48:	08011a9b 	.word	0x08011a9b
 8011a4c:	08011aaf 	.word	0x08011aaf
 8011a50:	08011a6f 	.word	0x08011a6f
 8011a54:	08011a65 	.word	0x08011a65
 8011a58:	08011aaf 	.word	0x08011aaf
 8011a5c:	08011a87 	.word	0x08011a87
 8011a60:	08011a79 	.word	0x08011a79
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8011a64:	6839      	ldr	r1, [r7, #0]
 8011a66:	6878      	ldr	r0, [r7, #4]
 8011a68:	f000 f9ce 	bl	8011e08 <USBD_GetDescriptor>
      break;
 8011a6c:	e024      	b.n	8011ab8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8011a6e:	6839      	ldr	r1, [r7, #0]
 8011a70:	6878      	ldr	r0, [r7, #4]
 8011a72:	f000 fb33 	bl	80120dc <USBD_SetAddress>
      break;
 8011a76:	e01f      	b.n	8011ab8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8011a78:	6839      	ldr	r1, [r7, #0]
 8011a7a:	6878      	ldr	r0, [r7, #4]
 8011a7c:	f000 fb70 	bl	8012160 <USBD_SetConfig>
 8011a80:	4603      	mov	r3, r0
 8011a82:	73fb      	strb	r3, [r7, #15]
      break;
 8011a84:	e018      	b.n	8011ab8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8011a86:	6839      	ldr	r1, [r7, #0]
 8011a88:	6878      	ldr	r0, [r7, #4]
 8011a8a:	f000 fc0d 	bl	80122a8 <USBD_GetConfig>
      break;
 8011a8e:	e013      	b.n	8011ab8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8011a90:	6839      	ldr	r1, [r7, #0]
 8011a92:	6878      	ldr	r0, [r7, #4]
 8011a94:	f000 fc3c 	bl	8012310 <USBD_GetStatus>
      break;
 8011a98:	e00e      	b.n	8011ab8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8011a9a:	6839      	ldr	r1, [r7, #0]
 8011a9c:	6878      	ldr	r0, [r7, #4]
 8011a9e:	f000 fc6a 	bl	8012376 <USBD_SetFeature>
      break;
 8011aa2:	e009      	b.n	8011ab8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8011aa4:	6839      	ldr	r1, [r7, #0]
 8011aa6:	6878      	ldr	r0, [r7, #4]
 8011aa8:	f000 fc79 	bl	801239e <USBD_ClrFeature>
      break;
 8011aac:	e004      	b.n	8011ab8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8011aae:	6839      	ldr	r1, [r7, #0]
 8011ab0:	6878      	ldr	r0, [r7, #4]
 8011ab2:	f000 fccf 	bl	8012454 <USBD_CtlError>
      break;
 8011ab6:	bf00      	nop
    }
    break;
 8011ab8:	e004      	b.n	8011ac4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8011aba:	6839      	ldr	r1, [r7, #0]
 8011abc:	6878      	ldr	r0, [r7, #4]
 8011abe:	f000 fcc9 	bl	8012454 <USBD_CtlError>
    break;
 8011ac2:	bf00      	nop
  }

  return ret;
 8011ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	3710      	adds	r7, #16
 8011aca:	46bd      	mov	sp, r7
 8011acc:	bd80      	pop	{r7, pc}
 8011ace:	bf00      	nop

08011ad0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011ad0:	b580      	push	{r7, lr}
 8011ad2:	b084      	sub	sp, #16
 8011ad4:	af00      	add	r7, sp, #0
 8011ad6:	6078      	str	r0, [r7, #4]
 8011ad8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011ada:	2300      	movs	r3, #0
 8011adc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011ade:	683b      	ldr	r3, [r7, #0]
 8011ae0:	781b      	ldrb	r3, [r3, #0]
 8011ae2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011ae6:	2b20      	cmp	r3, #32
 8011ae8:	d003      	beq.n	8011af2 <USBD_StdItfReq+0x22>
 8011aea:	2b40      	cmp	r3, #64	; 0x40
 8011aec:	d001      	beq.n	8011af2 <USBD_StdItfReq+0x22>
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d12a      	bne.n	8011b48 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011af8:	3b01      	subs	r3, #1
 8011afa:	2b02      	cmp	r3, #2
 8011afc:	d81d      	bhi.n	8011b3a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011afe:	683b      	ldr	r3, [r7, #0]
 8011b00:	889b      	ldrh	r3, [r3, #4]
 8011b02:	b2db      	uxtb	r3, r3
 8011b04:	2b01      	cmp	r3, #1
 8011b06:	d813      	bhi.n	8011b30 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b0e:	689b      	ldr	r3, [r3, #8]
 8011b10:	6839      	ldr	r1, [r7, #0]
 8011b12:	6878      	ldr	r0, [r7, #4]
 8011b14:	4798      	blx	r3
 8011b16:	4603      	mov	r3, r0
 8011b18:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8011b1a:	683b      	ldr	r3, [r7, #0]
 8011b1c:	88db      	ldrh	r3, [r3, #6]
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d110      	bne.n	8011b44 <USBD_StdItfReq+0x74>
 8011b22:	7bfb      	ldrb	r3, [r7, #15]
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d10d      	bne.n	8011b44 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8011b28:	6878      	ldr	r0, [r7, #4]
 8011b2a:	f000 fd5e 	bl	80125ea <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8011b2e:	e009      	b.n	8011b44 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8011b30:	6839      	ldr	r1, [r7, #0]
 8011b32:	6878      	ldr	r0, [r7, #4]
 8011b34:	f000 fc8e 	bl	8012454 <USBD_CtlError>
      break;
 8011b38:	e004      	b.n	8011b44 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8011b3a:	6839      	ldr	r1, [r7, #0]
 8011b3c:	6878      	ldr	r0, [r7, #4]
 8011b3e:	f000 fc89 	bl	8012454 <USBD_CtlError>
      break;
 8011b42:	e000      	b.n	8011b46 <USBD_StdItfReq+0x76>
      break;
 8011b44:	bf00      	nop
    }
    break;
 8011b46:	e004      	b.n	8011b52 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8011b48:	6839      	ldr	r1, [r7, #0]
 8011b4a:	6878      	ldr	r0, [r7, #4]
 8011b4c:	f000 fc82 	bl	8012454 <USBD_CtlError>
    break;
 8011b50:	bf00      	nop
  }

  return ret;
 8011b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b54:	4618      	mov	r0, r3
 8011b56:	3710      	adds	r7, #16
 8011b58:	46bd      	mov	sp, r7
 8011b5a:	bd80      	pop	{r7, pc}

08011b5c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011b5c:	b580      	push	{r7, lr}
 8011b5e:	b084      	sub	sp, #16
 8011b60:	af00      	add	r7, sp, #0
 8011b62:	6078      	str	r0, [r7, #4]
 8011b64:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8011b66:	2300      	movs	r3, #0
 8011b68:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8011b6a:	683b      	ldr	r3, [r7, #0]
 8011b6c:	889b      	ldrh	r3, [r3, #4]
 8011b6e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011b70:	683b      	ldr	r3, [r7, #0]
 8011b72:	781b      	ldrb	r3, [r3, #0]
 8011b74:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011b78:	2b20      	cmp	r3, #32
 8011b7a:	d004      	beq.n	8011b86 <USBD_StdEPReq+0x2a>
 8011b7c:	2b40      	cmp	r3, #64	; 0x40
 8011b7e:	d002      	beq.n	8011b86 <USBD_StdEPReq+0x2a>
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d00a      	beq.n	8011b9a <USBD_StdEPReq+0x3e>
 8011b84:	e135      	b.n	8011df2 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b8c:	689b      	ldr	r3, [r3, #8]
 8011b8e:	6839      	ldr	r1, [r7, #0]
 8011b90:	6878      	ldr	r0, [r7, #4]
 8011b92:	4798      	blx	r3
 8011b94:	4603      	mov	r3, r0
 8011b96:	73fb      	strb	r3, [r7, #15]
    break;
 8011b98:	e130      	b.n	8011dfc <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8011b9a:	683b      	ldr	r3, [r7, #0]
 8011b9c:	785b      	ldrb	r3, [r3, #1]
 8011b9e:	2b01      	cmp	r3, #1
 8011ba0:	d03e      	beq.n	8011c20 <USBD_StdEPReq+0xc4>
 8011ba2:	2b03      	cmp	r3, #3
 8011ba4:	d002      	beq.n	8011bac <USBD_StdEPReq+0x50>
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d077      	beq.n	8011c9a <USBD_StdEPReq+0x13e>
 8011baa:	e11c      	b.n	8011de6 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011bb2:	2b02      	cmp	r3, #2
 8011bb4:	d002      	beq.n	8011bbc <USBD_StdEPReq+0x60>
 8011bb6:	2b03      	cmp	r3, #3
 8011bb8:	d015      	beq.n	8011be6 <USBD_StdEPReq+0x8a>
 8011bba:	e02b      	b.n	8011c14 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011bbc:	7bbb      	ldrb	r3, [r7, #14]
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d00c      	beq.n	8011bdc <USBD_StdEPReq+0x80>
 8011bc2:	7bbb      	ldrb	r3, [r7, #14]
 8011bc4:	2b80      	cmp	r3, #128	; 0x80
 8011bc6:	d009      	beq.n	8011bdc <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8011bc8:	7bbb      	ldrb	r3, [r7, #14]
 8011bca:	4619      	mov	r1, r3
 8011bcc:	6878      	ldr	r0, [r7, #4]
 8011bce:	f003 ffc9 	bl	8015b64 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011bd2:	2180      	movs	r1, #128	; 0x80
 8011bd4:	6878      	ldr	r0, [r7, #4]
 8011bd6:	f003 ffc5 	bl	8015b64 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8011bda:	e020      	b.n	8011c1e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8011bdc:	6839      	ldr	r1, [r7, #0]
 8011bde:	6878      	ldr	r0, [r7, #4]
 8011be0:	f000 fc38 	bl	8012454 <USBD_CtlError>
        break;
 8011be4:	e01b      	b.n	8011c1e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8011be6:	683b      	ldr	r3, [r7, #0]
 8011be8:	885b      	ldrh	r3, [r3, #2]
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d10e      	bne.n	8011c0c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011bee:	7bbb      	ldrb	r3, [r7, #14]
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d00b      	beq.n	8011c0c <USBD_StdEPReq+0xb0>
 8011bf4:	7bbb      	ldrb	r3, [r7, #14]
 8011bf6:	2b80      	cmp	r3, #128	; 0x80
 8011bf8:	d008      	beq.n	8011c0c <USBD_StdEPReq+0xb0>
 8011bfa:	683b      	ldr	r3, [r7, #0]
 8011bfc:	88db      	ldrh	r3, [r3, #6]
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d104      	bne.n	8011c0c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8011c02:	7bbb      	ldrb	r3, [r7, #14]
 8011c04:	4619      	mov	r1, r3
 8011c06:	6878      	ldr	r0, [r7, #4]
 8011c08:	f003 ffac 	bl	8015b64 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8011c0c:	6878      	ldr	r0, [r7, #4]
 8011c0e:	f000 fcec 	bl	80125ea <USBD_CtlSendStatus>

        break;
 8011c12:	e004      	b.n	8011c1e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8011c14:	6839      	ldr	r1, [r7, #0]
 8011c16:	6878      	ldr	r0, [r7, #4]
 8011c18:	f000 fc1c 	bl	8012454 <USBD_CtlError>
        break;
 8011c1c:	bf00      	nop
      }
      break;
 8011c1e:	e0e7      	b.n	8011df0 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011c26:	2b02      	cmp	r3, #2
 8011c28:	d002      	beq.n	8011c30 <USBD_StdEPReq+0xd4>
 8011c2a:	2b03      	cmp	r3, #3
 8011c2c:	d015      	beq.n	8011c5a <USBD_StdEPReq+0xfe>
 8011c2e:	e02d      	b.n	8011c8c <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011c30:	7bbb      	ldrb	r3, [r7, #14]
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d00c      	beq.n	8011c50 <USBD_StdEPReq+0xf4>
 8011c36:	7bbb      	ldrb	r3, [r7, #14]
 8011c38:	2b80      	cmp	r3, #128	; 0x80
 8011c3a:	d009      	beq.n	8011c50 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8011c3c:	7bbb      	ldrb	r3, [r7, #14]
 8011c3e:	4619      	mov	r1, r3
 8011c40:	6878      	ldr	r0, [r7, #4]
 8011c42:	f003 ff8f 	bl	8015b64 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011c46:	2180      	movs	r1, #128	; 0x80
 8011c48:	6878      	ldr	r0, [r7, #4]
 8011c4a:	f003 ff8b 	bl	8015b64 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8011c4e:	e023      	b.n	8011c98 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8011c50:	6839      	ldr	r1, [r7, #0]
 8011c52:	6878      	ldr	r0, [r7, #4]
 8011c54:	f000 fbfe 	bl	8012454 <USBD_CtlError>
        break;
 8011c58:	e01e      	b.n	8011c98 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8011c5a:	683b      	ldr	r3, [r7, #0]
 8011c5c:	885b      	ldrh	r3, [r3, #2]
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d119      	bne.n	8011c96 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8011c62:	7bbb      	ldrb	r3, [r7, #14]
 8011c64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d004      	beq.n	8011c76 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8011c6c:	7bbb      	ldrb	r3, [r7, #14]
 8011c6e:	4619      	mov	r1, r3
 8011c70:	6878      	ldr	r0, [r7, #4]
 8011c72:	f003 ff96 	bl	8015ba2 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8011c76:	6878      	ldr	r0, [r7, #4]
 8011c78:	f000 fcb7 	bl	80125ea <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c82:	689b      	ldr	r3, [r3, #8]
 8011c84:	6839      	ldr	r1, [r7, #0]
 8011c86:	6878      	ldr	r0, [r7, #4]
 8011c88:	4798      	blx	r3
        }
        break;
 8011c8a:	e004      	b.n	8011c96 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8011c8c:	6839      	ldr	r1, [r7, #0]
 8011c8e:	6878      	ldr	r0, [r7, #4]
 8011c90:	f000 fbe0 	bl	8012454 <USBD_CtlError>
        break;
 8011c94:	e000      	b.n	8011c98 <USBD_StdEPReq+0x13c>
        break;
 8011c96:	bf00      	nop
      }
      break;
 8011c98:	e0aa      	b.n	8011df0 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011ca0:	2b02      	cmp	r3, #2
 8011ca2:	d002      	beq.n	8011caa <USBD_StdEPReq+0x14e>
 8011ca4:	2b03      	cmp	r3, #3
 8011ca6:	d032      	beq.n	8011d0e <USBD_StdEPReq+0x1b2>
 8011ca8:	e097      	b.n	8011dda <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011caa:	7bbb      	ldrb	r3, [r7, #14]
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d007      	beq.n	8011cc0 <USBD_StdEPReq+0x164>
 8011cb0:	7bbb      	ldrb	r3, [r7, #14]
 8011cb2:	2b80      	cmp	r3, #128	; 0x80
 8011cb4:	d004      	beq.n	8011cc0 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8011cb6:	6839      	ldr	r1, [r7, #0]
 8011cb8:	6878      	ldr	r0, [r7, #4]
 8011cba:	f000 fbcb 	bl	8012454 <USBD_CtlError>
          break;
 8011cbe:	e091      	b.n	8011de4 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011cc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	da0b      	bge.n	8011ce0 <USBD_StdEPReq+0x184>
 8011cc8:	7bbb      	ldrb	r3, [r7, #14]
 8011cca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011cce:	4613      	mov	r3, r2
 8011cd0:	009b      	lsls	r3, r3, #2
 8011cd2:	4413      	add	r3, r2
 8011cd4:	009b      	lsls	r3, r3, #2
 8011cd6:	3310      	adds	r3, #16
 8011cd8:	687a      	ldr	r2, [r7, #4]
 8011cda:	4413      	add	r3, r2
 8011cdc:	3304      	adds	r3, #4
 8011cde:	e00b      	b.n	8011cf8 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8011ce0:	7bbb      	ldrb	r3, [r7, #14]
 8011ce2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011ce6:	4613      	mov	r3, r2
 8011ce8:	009b      	lsls	r3, r3, #2
 8011cea:	4413      	add	r3, r2
 8011cec:	009b      	lsls	r3, r3, #2
 8011cee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011cf2:	687a      	ldr	r2, [r7, #4]
 8011cf4:	4413      	add	r3, r2
 8011cf6:	3304      	adds	r3, #4
 8011cf8:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8011cfa:	68bb      	ldr	r3, [r7, #8]
 8011cfc:	2200      	movs	r2, #0
 8011cfe:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011d00:	68bb      	ldr	r3, [r7, #8]
 8011d02:	2202      	movs	r2, #2
 8011d04:	4619      	mov	r1, r3
 8011d06:	6878      	ldr	r0, [r7, #4]
 8011d08:	f000 fc15 	bl	8012536 <USBD_CtlSendData>
        break;
 8011d0c:	e06a      	b.n	8011de4 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8011d0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	da11      	bge.n	8011d3a <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011d16:	7bbb      	ldrb	r3, [r7, #14]
 8011d18:	f003 020f 	and.w	r2, r3, #15
 8011d1c:	6879      	ldr	r1, [r7, #4]
 8011d1e:	4613      	mov	r3, r2
 8011d20:	009b      	lsls	r3, r3, #2
 8011d22:	4413      	add	r3, r2
 8011d24:	009b      	lsls	r3, r3, #2
 8011d26:	440b      	add	r3, r1
 8011d28:	3324      	adds	r3, #36	; 0x24
 8011d2a:	881b      	ldrh	r3, [r3, #0]
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d117      	bne.n	8011d60 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8011d30:	6839      	ldr	r1, [r7, #0]
 8011d32:	6878      	ldr	r0, [r7, #4]
 8011d34:	f000 fb8e 	bl	8012454 <USBD_CtlError>
            break;
 8011d38:	e054      	b.n	8011de4 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011d3a:	7bbb      	ldrb	r3, [r7, #14]
 8011d3c:	f003 020f 	and.w	r2, r3, #15
 8011d40:	6879      	ldr	r1, [r7, #4]
 8011d42:	4613      	mov	r3, r2
 8011d44:	009b      	lsls	r3, r3, #2
 8011d46:	4413      	add	r3, r2
 8011d48:	009b      	lsls	r3, r3, #2
 8011d4a:	440b      	add	r3, r1
 8011d4c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011d50:	881b      	ldrh	r3, [r3, #0]
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d104      	bne.n	8011d60 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8011d56:	6839      	ldr	r1, [r7, #0]
 8011d58:	6878      	ldr	r0, [r7, #4]
 8011d5a:	f000 fb7b 	bl	8012454 <USBD_CtlError>
            break;
 8011d5e:	e041      	b.n	8011de4 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011d60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	da0b      	bge.n	8011d80 <USBD_StdEPReq+0x224>
 8011d68:	7bbb      	ldrb	r3, [r7, #14]
 8011d6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011d6e:	4613      	mov	r3, r2
 8011d70:	009b      	lsls	r3, r3, #2
 8011d72:	4413      	add	r3, r2
 8011d74:	009b      	lsls	r3, r3, #2
 8011d76:	3310      	adds	r3, #16
 8011d78:	687a      	ldr	r2, [r7, #4]
 8011d7a:	4413      	add	r3, r2
 8011d7c:	3304      	adds	r3, #4
 8011d7e:	e00b      	b.n	8011d98 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8011d80:	7bbb      	ldrb	r3, [r7, #14]
 8011d82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011d86:	4613      	mov	r3, r2
 8011d88:	009b      	lsls	r3, r3, #2
 8011d8a:	4413      	add	r3, r2
 8011d8c:	009b      	lsls	r3, r3, #2
 8011d8e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011d92:	687a      	ldr	r2, [r7, #4]
 8011d94:	4413      	add	r3, r2
 8011d96:	3304      	adds	r3, #4
 8011d98:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011d9a:	7bbb      	ldrb	r3, [r7, #14]
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d002      	beq.n	8011da6 <USBD_StdEPReq+0x24a>
 8011da0:	7bbb      	ldrb	r3, [r7, #14]
 8011da2:	2b80      	cmp	r3, #128	; 0x80
 8011da4:	d103      	bne.n	8011dae <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8011da6:	68bb      	ldr	r3, [r7, #8]
 8011da8:	2200      	movs	r2, #0
 8011daa:	601a      	str	r2, [r3, #0]
 8011dac:	e00e      	b.n	8011dcc <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8011dae:	7bbb      	ldrb	r3, [r7, #14]
 8011db0:	4619      	mov	r1, r3
 8011db2:	6878      	ldr	r0, [r7, #4]
 8011db4:	f003 ff14 	bl	8015be0 <USBD_LL_IsStallEP>
 8011db8:	4603      	mov	r3, r0
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d003      	beq.n	8011dc6 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8011dbe:	68bb      	ldr	r3, [r7, #8]
 8011dc0:	2201      	movs	r2, #1
 8011dc2:	601a      	str	r2, [r3, #0]
 8011dc4:	e002      	b.n	8011dcc <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8011dc6:	68bb      	ldr	r3, [r7, #8]
 8011dc8:	2200      	movs	r2, #0
 8011dca:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011dcc:	68bb      	ldr	r3, [r7, #8]
 8011dce:	2202      	movs	r2, #2
 8011dd0:	4619      	mov	r1, r3
 8011dd2:	6878      	ldr	r0, [r7, #4]
 8011dd4:	f000 fbaf 	bl	8012536 <USBD_CtlSendData>
          break;
 8011dd8:	e004      	b.n	8011de4 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8011dda:	6839      	ldr	r1, [r7, #0]
 8011ddc:	6878      	ldr	r0, [r7, #4]
 8011dde:	f000 fb39 	bl	8012454 <USBD_CtlError>
        break;
 8011de2:	bf00      	nop
      }
      break;
 8011de4:	e004      	b.n	8011df0 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8011de6:	6839      	ldr	r1, [r7, #0]
 8011de8:	6878      	ldr	r0, [r7, #4]
 8011dea:	f000 fb33 	bl	8012454 <USBD_CtlError>
      break;
 8011dee:	bf00      	nop
    }
    break;
 8011df0:	e004      	b.n	8011dfc <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8011df2:	6839      	ldr	r1, [r7, #0]
 8011df4:	6878      	ldr	r0, [r7, #4]
 8011df6:	f000 fb2d 	bl	8012454 <USBD_CtlError>
    break;
 8011dfa:	bf00      	nop
  }

  return ret;
 8011dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8011dfe:	4618      	mov	r0, r3
 8011e00:	3710      	adds	r7, #16
 8011e02:	46bd      	mov	sp, r7
 8011e04:	bd80      	pop	{r7, pc}
	...

08011e08 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011e08:	b580      	push	{r7, lr}
 8011e0a:	b084      	sub	sp, #16
 8011e0c:	af00      	add	r7, sp, #0
 8011e0e:	6078      	str	r0, [r7, #4]
 8011e10:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011e12:	2300      	movs	r3, #0
 8011e14:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8011e16:	2300      	movs	r3, #0
 8011e18:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011e1a:	2300      	movs	r3, #0
 8011e1c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8011e1e:	683b      	ldr	r3, [r7, #0]
 8011e20:	885b      	ldrh	r3, [r3, #2]
 8011e22:	0a1b      	lsrs	r3, r3, #8
 8011e24:	b29b      	uxth	r3, r3
 8011e26:	3b01      	subs	r3, #1
 8011e28:	2b06      	cmp	r3, #6
 8011e2a:	f200 8128 	bhi.w	801207e <USBD_GetDescriptor+0x276>
 8011e2e:	a201      	add	r2, pc, #4	; (adr r2, 8011e34 <USBD_GetDescriptor+0x2c>)
 8011e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e34:	08011e51 	.word	0x08011e51
 8011e38:	08011e69 	.word	0x08011e69
 8011e3c:	08011ea9 	.word	0x08011ea9
 8011e40:	0801207f 	.word	0x0801207f
 8011e44:	0801207f 	.word	0x0801207f
 8011e48:	0801201f 	.word	0x0801201f
 8011e4c:	0801204b 	.word	0x0801204b
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011e56:	681b      	ldr	r3, [r3, #0]
 8011e58:	687a      	ldr	r2, [r7, #4]
 8011e5a:	7c12      	ldrb	r2, [r2, #16]
 8011e5c:	f107 0108 	add.w	r1, r7, #8
 8011e60:	4610      	mov	r0, r2
 8011e62:	4798      	blx	r3
 8011e64:	60f8      	str	r0, [r7, #12]
    break;
 8011e66:	e112      	b.n	801208e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	7c1b      	ldrb	r3, [r3, #16]
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d10d      	bne.n	8011e8c <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e78:	f107 0208 	add.w	r2, r7, #8
 8011e7c:	4610      	mov	r0, r2
 8011e7e:	4798      	blx	r3
 8011e80:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011e82:	68fb      	ldr	r3, [r7, #12]
 8011e84:	3301      	adds	r3, #1
 8011e86:	2202      	movs	r2, #2
 8011e88:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8011e8a:	e100      	b.n	801208e <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e94:	f107 0208 	add.w	r2, r7, #8
 8011e98:	4610      	mov	r0, r2
 8011e9a:	4798      	blx	r3
 8011e9c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011e9e:	68fb      	ldr	r3, [r7, #12]
 8011ea0:	3301      	adds	r3, #1
 8011ea2:	2202      	movs	r2, #2
 8011ea4:	701a      	strb	r2, [r3, #0]
    break;
 8011ea6:	e0f2      	b.n	801208e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8011ea8:	683b      	ldr	r3, [r7, #0]
 8011eaa:	885b      	ldrh	r3, [r3, #2]
 8011eac:	b2db      	uxtb	r3, r3
 8011eae:	2b05      	cmp	r3, #5
 8011eb0:	f200 80ac 	bhi.w	801200c <USBD_GetDescriptor+0x204>
 8011eb4:	a201      	add	r2, pc, #4	; (adr r2, 8011ebc <USBD_GetDescriptor+0xb4>)
 8011eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011eba:	bf00      	nop
 8011ebc:	08011ed5 	.word	0x08011ed5
 8011ec0:	08011f09 	.word	0x08011f09
 8011ec4:	08011f3d 	.word	0x08011f3d
 8011ec8:	08011f71 	.word	0x08011f71
 8011ecc:	08011fa5 	.word	0x08011fa5
 8011ed0:	08011fd9 	.word	0x08011fd9
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011eda:	685b      	ldr	r3, [r3, #4]
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d00b      	beq.n	8011ef8 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011ee6:	685b      	ldr	r3, [r3, #4]
 8011ee8:	687a      	ldr	r2, [r7, #4]
 8011eea:	7c12      	ldrb	r2, [r2, #16]
 8011eec:	f107 0108 	add.w	r1, r7, #8
 8011ef0:	4610      	mov	r0, r2
 8011ef2:	4798      	blx	r3
 8011ef4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011ef6:	e091      	b.n	801201c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011ef8:	6839      	ldr	r1, [r7, #0]
 8011efa:	6878      	ldr	r0, [r7, #4]
 8011efc:	f000 faaa 	bl	8012454 <USBD_CtlError>
        err++;
 8011f00:	7afb      	ldrb	r3, [r7, #11]
 8011f02:	3301      	adds	r3, #1
 8011f04:	72fb      	strb	r3, [r7, #11]
      break;
 8011f06:	e089      	b.n	801201c <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011f0e:	689b      	ldr	r3, [r3, #8]
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d00b      	beq.n	8011f2c <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011f1a:	689b      	ldr	r3, [r3, #8]
 8011f1c:	687a      	ldr	r2, [r7, #4]
 8011f1e:	7c12      	ldrb	r2, [r2, #16]
 8011f20:	f107 0108 	add.w	r1, r7, #8
 8011f24:	4610      	mov	r0, r2
 8011f26:	4798      	blx	r3
 8011f28:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011f2a:	e077      	b.n	801201c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011f2c:	6839      	ldr	r1, [r7, #0]
 8011f2e:	6878      	ldr	r0, [r7, #4]
 8011f30:	f000 fa90 	bl	8012454 <USBD_CtlError>
        err++;
 8011f34:	7afb      	ldrb	r3, [r7, #11]
 8011f36:	3301      	adds	r3, #1
 8011f38:	72fb      	strb	r3, [r7, #11]
      break;
 8011f3a:	e06f      	b.n	801201c <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011f42:	68db      	ldr	r3, [r3, #12]
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d00b      	beq.n	8011f60 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011f4e:	68db      	ldr	r3, [r3, #12]
 8011f50:	687a      	ldr	r2, [r7, #4]
 8011f52:	7c12      	ldrb	r2, [r2, #16]
 8011f54:	f107 0108 	add.w	r1, r7, #8
 8011f58:	4610      	mov	r0, r2
 8011f5a:	4798      	blx	r3
 8011f5c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011f5e:	e05d      	b.n	801201c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011f60:	6839      	ldr	r1, [r7, #0]
 8011f62:	6878      	ldr	r0, [r7, #4]
 8011f64:	f000 fa76 	bl	8012454 <USBD_CtlError>
        err++;
 8011f68:	7afb      	ldrb	r3, [r7, #11]
 8011f6a:	3301      	adds	r3, #1
 8011f6c:	72fb      	strb	r3, [r7, #11]
      break;
 8011f6e:	e055      	b.n	801201c <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011f76:	691b      	ldr	r3, [r3, #16]
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d00b      	beq.n	8011f94 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011f82:	691b      	ldr	r3, [r3, #16]
 8011f84:	687a      	ldr	r2, [r7, #4]
 8011f86:	7c12      	ldrb	r2, [r2, #16]
 8011f88:	f107 0108 	add.w	r1, r7, #8
 8011f8c:	4610      	mov	r0, r2
 8011f8e:	4798      	blx	r3
 8011f90:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011f92:	e043      	b.n	801201c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011f94:	6839      	ldr	r1, [r7, #0]
 8011f96:	6878      	ldr	r0, [r7, #4]
 8011f98:	f000 fa5c 	bl	8012454 <USBD_CtlError>
        err++;
 8011f9c:	7afb      	ldrb	r3, [r7, #11]
 8011f9e:	3301      	adds	r3, #1
 8011fa0:	72fb      	strb	r3, [r7, #11]
      break;
 8011fa2:	e03b      	b.n	801201c <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011faa:	695b      	ldr	r3, [r3, #20]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d00b      	beq.n	8011fc8 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011fb6:	695b      	ldr	r3, [r3, #20]
 8011fb8:	687a      	ldr	r2, [r7, #4]
 8011fba:	7c12      	ldrb	r2, [r2, #16]
 8011fbc:	f107 0108 	add.w	r1, r7, #8
 8011fc0:	4610      	mov	r0, r2
 8011fc2:	4798      	blx	r3
 8011fc4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011fc6:	e029      	b.n	801201c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011fc8:	6839      	ldr	r1, [r7, #0]
 8011fca:	6878      	ldr	r0, [r7, #4]
 8011fcc:	f000 fa42 	bl	8012454 <USBD_CtlError>
        err++;
 8011fd0:	7afb      	ldrb	r3, [r7, #11]
 8011fd2:	3301      	adds	r3, #1
 8011fd4:	72fb      	strb	r3, [r7, #11]
      break;
 8011fd6:	e021      	b.n	801201c <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011fde:	699b      	ldr	r3, [r3, #24]
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d00b      	beq.n	8011ffc <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011fea:	699b      	ldr	r3, [r3, #24]
 8011fec:	687a      	ldr	r2, [r7, #4]
 8011fee:	7c12      	ldrb	r2, [r2, #16]
 8011ff0:	f107 0108 	add.w	r1, r7, #8
 8011ff4:	4610      	mov	r0, r2
 8011ff6:	4798      	blx	r3
 8011ff8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011ffa:	e00f      	b.n	801201c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011ffc:	6839      	ldr	r1, [r7, #0]
 8011ffe:	6878      	ldr	r0, [r7, #4]
 8012000:	f000 fa28 	bl	8012454 <USBD_CtlError>
        err++;
 8012004:	7afb      	ldrb	r3, [r7, #11]
 8012006:	3301      	adds	r3, #1
 8012008:	72fb      	strb	r3, [r7, #11]
      break;
 801200a:	e007      	b.n	801201c <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 801200c:	6839      	ldr	r1, [r7, #0]
 801200e:	6878      	ldr	r0, [r7, #4]
 8012010:	f000 fa20 	bl	8012454 <USBD_CtlError>
      err++;
 8012014:	7afb      	ldrb	r3, [r7, #11]
 8012016:	3301      	adds	r3, #1
 8012018:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 801201a:	bf00      	nop
    }
    break;
 801201c:	e037      	b.n	801208e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	7c1b      	ldrb	r3, [r3, #16]
 8012022:	2b00      	cmp	r3, #0
 8012024:	d109      	bne.n	801203a <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801202c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801202e:	f107 0208 	add.w	r2, r7, #8
 8012032:	4610      	mov	r0, r2
 8012034:	4798      	blx	r3
 8012036:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8012038:	e029      	b.n	801208e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 801203a:	6839      	ldr	r1, [r7, #0]
 801203c:	6878      	ldr	r0, [r7, #4]
 801203e:	f000 fa09 	bl	8012454 <USBD_CtlError>
      err++;
 8012042:	7afb      	ldrb	r3, [r7, #11]
 8012044:	3301      	adds	r3, #1
 8012046:	72fb      	strb	r3, [r7, #11]
    break;
 8012048:	e021      	b.n	801208e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	7c1b      	ldrb	r3, [r3, #16]
 801204e:	2b00      	cmp	r3, #0
 8012050:	d10d      	bne.n	801206e <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801205a:	f107 0208 	add.w	r2, r7, #8
 801205e:	4610      	mov	r0, r2
 8012060:	4798      	blx	r3
 8012062:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	3301      	adds	r3, #1
 8012068:	2207      	movs	r2, #7
 801206a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 801206c:	e00f      	b.n	801208e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 801206e:	6839      	ldr	r1, [r7, #0]
 8012070:	6878      	ldr	r0, [r7, #4]
 8012072:	f000 f9ef 	bl	8012454 <USBD_CtlError>
      err++;
 8012076:	7afb      	ldrb	r3, [r7, #11]
 8012078:	3301      	adds	r3, #1
 801207a:	72fb      	strb	r3, [r7, #11]
    break;
 801207c:	e007      	b.n	801208e <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 801207e:	6839      	ldr	r1, [r7, #0]
 8012080:	6878      	ldr	r0, [r7, #4]
 8012082:	f000 f9e7 	bl	8012454 <USBD_CtlError>
    err++;
 8012086:	7afb      	ldrb	r3, [r7, #11]
 8012088:	3301      	adds	r3, #1
 801208a:	72fb      	strb	r3, [r7, #11]
    break;
 801208c:	bf00      	nop
  }

  if (err != 0U)
 801208e:	7afb      	ldrb	r3, [r7, #11]
 8012090:	2b00      	cmp	r3, #0
 8012092:	d11e      	bne.n	80120d2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8012094:	683b      	ldr	r3, [r7, #0]
 8012096:	88db      	ldrh	r3, [r3, #6]
 8012098:	2b00      	cmp	r3, #0
 801209a:	d016      	beq.n	80120ca <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 801209c:	893b      	ldrh	r3, [r7, #8]
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d00e      	beq.n	80120c0 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 80120a2:	683b      	ldr	r3, [r7, #0]
 80120a4:	88da      	ldrh	r2, [r3, #6]
 80120a6:	893b      	ldrh	r3, [r7, #8]
 80120a8:	4293      	cmp	r3, r2
 80120aa:	bf28      	it	cs
 80120ac:	4613      	movcs	r3, r2
 80120ae:	b29b      	uxth	r3, r3
 80120b0:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80120b2:	893b      	ldrh	r3, [r7, #8]
 80120b4:	461a      	mov	r2, r3
 80120b6:	68f9      	ldr	r1, [r7, #12]
 80120b8:	6878      	ldr	r0, [r7, #4]
 80120ba:	f000 fa3c 	bl	8012536 <USBD_CtlSendData>
 80120be:	e009      	b.n	80120d4 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80120c0:	6839      	ldr	r1, [r7, #0]
 80120c2:	6878      	ldr	r0, [r7, #4]
 80120c4:	f000 f9c6 	bl	8012454 <USBD_CtlError>
 80120c8:	e004      	b.n	80120d4 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80120ca:	6878      	ldr	r0, [r7, #4]
 80120cc:	f000 fa8d 	bl	80125ea <USBD_CtlSendStatus>
 80120d0:	e000      	b.n	80120d4 <USBD_GetDescriptor+0x2cc>
    return;
 80120d2:	bf00      	nop
    }
  }
}
 80120d4:	3710      	adds	r7, #16
 80120d6:	46bd      	mov	sp, r7
 80120d8:	bd80      	pop	{r7, pc}
 80120da:	bf00      	nop

080120dc <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80120dc:	b580      	push	{r7, lr}
 80120de:	b084      	sub	sp, #16
 80120e0:	af00      	add	r7, sp, #0
 80120e2:	6078      	str	r0, [r7, #4]
 80120e4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80120e6:	683b      	ldr	r3, [r7, #0]
 80120e8:	889b      	ldrh	r3, [r3, #4]
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d130      	bne.n	8012150 <USBD_SetAddress+0x74>
 80120ee:	683b      	ldr	r3, [r7, #0]
 80120f0:	88db      	ldrh	r3, [r3, #6]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d12c      	bne.n	8012150 <USBD_SetAddress+0x74>
 80120f6:	683b      	ldr	r3, [r7, #0]
 80120f8:	885b      	ldrh	r3, [r3, #2]
 80120fa:	2b7f      	cmp	r3, #127	; 0x7f
 80120fc:	d828      	bhi.n	8012150 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80120fe:	683b      	ldr	r3, [r7, #0]
 8012100:	885b      	ldrh	r3, [r3, #2]
 8012102:	b2db      	uxtb	r3, r3
 8012104:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012108:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012110:	2b03      	cmp	r3, #3
 8012112:	d104      	bne.n	801211e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8012114:	6839      	ldr	r1, [r7, #0]
 8012116:	6878      	ldr	r0, [r7, #4]
 8012118:	f000 f99c 	bl	8012454 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801211c:	e01c      	b.n	8012158 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	7bfa      	ldrb	r2, [r7, #15]
 8012122:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012126:	7bfb      	ldrb	r3, [r7, #15]
 8012128:	4619      	mov	r1, r3
 801212a:	6878      	ldr	r0, [r7, #4]
 801212c:	f003 fd84 	bl	8015c38 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8012130:	6878      	ldr	r0, [r7, #4]
 8012132:	f000 fa5a 	bl	80125ea <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8012136:	7bfb      	ldrb	r3, [r7, #15]
 8012138:	2b00      	cmp	r3, #0
 801213a:	d004      	beq.n	8012146 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	2202      	movs	r2, #2
 8012140:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012144:	e008      	b.n	8012158 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	2201      	movs	r2, #1
 801214a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801214e:	e003      	b.n	8012158 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8012150:	6839      	ldr	r1, [r7, #0]
 8012152:	6878      	ldr	r0, [r7, #4]
 8012154:	f000 f97e 	bl	8012454 <USBD_CtlError>
  }
}
 8012158:	bf00      	nop
 801215a:	3710      	adds	r7, #16
 801215c:	46bd      	mov	sp, r7
 801215e:	bd80      	pop	{r7, pc}

08012160 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012160:	b580      	push	{r7, lr}
 8012162:	b084      	sub	sp, #16
 8012164:	af00      	add	r7, sp, #0
 8012166:	6078      	str	r0, [r7, #4]
 8012168:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801216a:	2300      	movs	r3, #0
 801216c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801216e:	683b      	ldr	r3, [r7, #0]
 8012170:	885b      	ldrh	r3, [r3, #2]
 8012172:	b2da      	uxtb	r2, r3
 8012174:	4b4b      	ldr	r3, [pc, #300]	; (80122a4 <USBD_SetConfig+0x144>)
 8012176:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012178:	4b4a      	ldr	r3, [pc, #296]	; (80122a4 <USBD_SetConfig+0x144>)
 801217a:	781b      	ldrb	r3, [r3, #0]
 801217c:	2b01      	cmp	r3, #1
 801217e:	d905      	bls.n	801218c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8012180:	6839      	ldr	r1, [r7, #0]
 8012182:	6878      	ldr	r0, [r7, #4]
 8012184:	f000 f966 	bl	8012454 <USBD_CtlError>
    return USBD_FAIL;
 8012188:	2303      	movs	r3, #3
 801218a:	e087      	b.n	801229c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012192:	2b02      	cmp	r3, #2
 8012194:	d002      	beq.n	801219c <USBD_SetConfig+0x3c>
 8012196:	2b03      	cmp	r3, #3
 8012198:	d025      	beq.n	80121e6 <USBD_SetConfig+0x86>
 801219a:	e071      	b.n	8012280 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 801219c:	4b41      	ldr	r3, [pc, #260]	; (80122a4 <USBD_SetConfig+0x144>)
 801219e:	781b      	ldrb	r3, [r3, #0]
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d01c      	beq.n	80121de <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80121a4:	4b3f      	ldr	r3, [pc, #252]	; (80122a4 <USBD_SetConfig+0x144>)
 80121a6:	781b      	ldrb	r3, [r3, #0]
 80121a8:	461a      	mov	r2, r3
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80121ae:	4b3d      	ldr	r3, [pc, #244]	; (80122a4 <USBD_SetConfig+0x144>)
 80121b0:	781b      	ldrb	r3, [r3, #0]
 80121b2:	4619      	mov	r1, r3
 80121b4:	6878      	ldr	r0, [r7, #4]
 80121b6:	f7ff f9a7 	bl	8011508 <USBD_SetClassConfig>
 80121ba:	4603      	mov	r3, r0
 80121bc:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80121be:	7bfb      	ldrb	r3, [r7, #15]
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d004      	beq.n	80121ce <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80121c4:	6839      	ldr	r1, [r7, #0]
 80121c6:	6878      	ldr	r0, [r7, #4]
 80121c8:	f000 f944 	bl	8012454 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80121cc:	e065      	b.n	801229a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80121ce:	6878      	ldr	r0, [r7, #4]
 80121d0:	f000 fa0b 	bl	80125ea <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	2203      	movs	r2, #3
 80121d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80121dc:	e05d      	b.n	801229a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80121de:	6878      	ldr	r0, [r7, #4]
 80121e0:	f000 fa03 	bl	80125ea <USBD_CtlSendStatus>
    break;
 80121e4:	e059      	b.n	801229a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 80121e6:	4b2f      	ldr	r3, [pc, #188]	; (80122a4 <USBD_SetConfig+0x144>)
 80121e8:	781b      	ldrb	r3, [r3, #0]
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d112      	bne.n	8012214 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	2202      	movs	r2, #2
 80121f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80121f6:	4b2b      	ldr	r3, [pc, #172]	; (80122a4 <USBD_SetConfig+0x144>)
 80121f8:	781b      	ldrb	r3, [r3, #0]
 80121fa:	461a      	mov	r2, r3
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012200:	4b28      	ldr	r3, [pc, #160]	; (80122a4 <USBD_SetConfig+0x144>)
 8012202:	781b      	ldrb	r3, [r3, #0]
 8012204:	4619      	mov	r1, r3
 8012206:	6878      	ldr	r0, [r7, #4]
 8012208:	f7ff f99a 	bl	8011540 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 801220c:	6878      	ldr	r0, [r7, #4]
 801220e:	f000 f9ec 	bl	80125ea <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8012212:	e042      	b.n	801229a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8012214:	4b23      	ldr	r3, [pc, #140]	; (80122a4 <USBD_SetConfig+0x144>)
 8012216:	781b      	ldrb	r3, [r3, #0]
 8012218:	461a      	mov	r2, r3
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	685b      	ldr	r3, [r3, #4]
 801221e:	429a      	cmp	r2, r3
 8012220:	d02a      	beq.n	8012278 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	685b      	ldr	r3, [r3, #4]
 8012226:	b2db      	uxtb	r3, r3
 8012228:	4619      	mov	r1, r3
 801222a:	6878      	ldr	r0, [r7, #4]
 801222c:	f7ff f988 	bl	8011540 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8012230:	4b1c      	ldr	r3, [pc, #112]	; (80122a4 <USBD_SetConfig+0x144>)
 8012232:	781b      	ldrb	r3, [r3, #0]
 8012234:	461a      	mov	r2, r3
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 801223a:	4b1a      	ldr	r3, [pc, #104]	; (80122a4 <USBD_SetConfig+0x144>)
 801223c:	781b      	ldrb	r3, [r3, #0]
 801223e:	4619      	mov	r1, r3
 8012240:	6878      	ldr	r0, [r7, #4]
 8012242:	f7ff f961 	bl	8011508 <USBD_SetClassConfig>
 8012246:	4603      	mov	r3, r0
 8012248:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 801224a:	7bfb      	ldrb	r3, [r7, #15]
 801224c:	2b00      	cmp	r3, #0
 801224e:	d00f      	beq.n	8012270 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8012250:	6839      	ldr	r1, [r7, #0]
 8012252:	6878      	ldr	r0, [r7, #4]
 8012254:	f000 f8fe 	bl	8012454 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	685b      	ldr	r3, [r3, #4]
 801225c:	b2db      	uxtb	r3, r3
 801225e:	4619      	mov	r1, r3
 8012260:	6878      	ldr	r0, [r7, #4]
 8012262:	f7ff f96d 	bl	8011540 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	2202      	movs	r2, #2
 801226a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 801226e:	e014      	b.n	801229a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8012270:	6878      	ldr	r0, [r7, #4]
 8012272:	f000 f9ba 	bl	80125ea <USBD_CtlSendStatus>
    break;
 8012276:	e010      	b.n	801229a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8012278:	6878      	ldr	r0, [r7, #4]
 801227a:	f000 f9b6 	bl	80125ea <USBD_CtlSendStatus>
    break;
 801227e:	e00c      	b.n	801229a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8012280:	6839      	ldr	r1, [r7, #0]
 8012282:	6878      	ldr	r0, [r7, #4]
 8012284:	f000 f8e6 	bl	8012454 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012288:	4b06      	ldr	r3, [pc, #24]	; (80122a4 <USBD_SetConfig+0x144>)
 801228a:	781b      	ldrb	r3, [r3, #0]
 801228c:	4619      	mov	r1, r3
 801228e:	6878      	ldr	r0, [r7, #4]
 8012290:	f7ff f956 	bl	8011540 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8012294:	2303      	movs	r3, #3
 8012296:	73fb      	strb	r3, [r7, #15]
    break;
 8012298:	bf00      	nop
  }

  return ret;
 801229a:	7bfb      	ldrb	r3, [r7, #15]
}
 801229c:	4618      	mov	r0, r3
 801229e:	3710      	adds	r7, #16
 80122a0:	46bd      	mov	sp, r7
 80122a2:	bd80      	pop	{r7, pc}
 80122a4:	20001008 	.word	0x20001008

080122a8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80122a8:	b580      	push	{r7, lr}
 80122aa:	b082      	sub	sp, #8
 80122ac:	af00      	add	r7, sp, #0
 80122ae:	6078      	str	r0, [r7, #4]
 80122b0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80122b2:	683b      	ldr	r3, [r7, #0]
 80122b4:	88db      	ldrh	r3, [r3, #6]
 80122b6:	2b01      	cmp	r3, #1
 80122b8:	d004      	beq.n	80122c4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80122ba:	6839      	ldr	r1, [r7, #0]
 80122bc:	6878      	ldr	r0, [r7, #4]
 80122be:	f000 f8c9 	bl	8012454 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80122c2:	e021      	b.n	8012308 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80122ca:	2b01      	cmp	r3, #1
 80122cc:	db17      	blt.n	80122fe <USBD_GetConfig+0x56>
 80122ce:	2b02      	cmp	r3, #2
 80122d0:	dd02      	ble.n	80122d8 <USBD_GetConfig+0x30>
 80122d2:	2b03      	cmp	r3, #3
 80122d4:	d00b      	beq.n	80122ee <USBD_GetConfig+0x46>
 80122d6:	e012      	b.n	80122fe <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	2200      	movs	r2, #0
 80122dc:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	3308      	adds	r3, #8
 80122e2:	2201      	movs	r2, #1
 80122e4:	4619      	mov	r1, r3
 80122e6:	6878      	ldr	r0, [r7, #4]
 80122e8:	f000 f925 	bl	8012536 <USBD_CtlSendData>
      break;
 80122ec:	e00c      	b.n	8012308 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	3304      	adds	r3, #4
 80122f2:	2201      	movs	r2, #1
 80122f4:	4619      	mov	r1, r3
 80122f6:	6878      	ldr	r0, [r7, #4]
 80122f8:	f000 f91d 	bl	8012536 <USBD_CtlSendData>
      break;
 80122fc:	e004      	b.n	8012308 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 80122fe:	6839      	ldr	r1, [r7, #0]
 8012300:	6878      	ldr	r0, [r7, #4]
 8012302:	f000 f8a7 	bl	8012454 <USBD_CtlError>
      break;
 8012306:	bf00      	nop
}
 8012308:	bf00      	nop
 801230a:	3708      	adds	r7, #8
 801230c:	46bd      	mov	sp, r7
 801230e:	bd80      	pop	{r7, pc}

08012310 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012310:	b580      	push	{r7, lr}
 8012312:	b082      	sub	sp, #8
 8012314:	af00      	add	r7, sp, #0
 8012316:	6078      	str	r0, [r7, #4]
 8012318:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012320:	3b01      	subs	r3, #1
 8012322:	2b02      	cmp	r3, #2
 8012324:	d81e      	bhi.n	8012364 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8012326:	683b      	ldr	r3, [r7, #0]
 8012328:	88db      	ldrh	r3, [r3, #6]
 801232a:	2b02      	cmp	r3, #2
 801232c:	d004      	beq.n	8012338 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 801232e:	6839      	ldr	r1, [r7, #0]
 8012330:	6878      	ldr	r0, [r7, #4]
 8012332:	f000 f88f 	bl	8012454 <USBD_CtlError>
      break;
 8012336:	e01a      	b.n	801236e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	2201      	movs	r2, #1
 801233c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8012344:	2b00      	cmp	r3, #0
 8012346:	d005      	beq.n	8012354 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	68db      	ldr	r3, [r3, #12]
 801234c:	f043 0202 	orr.w	r2, r3, #2
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	330c      	adds	r3, #12
 8012358:	2202      	movs	r2, #2
 801235a:	4619      	mov	r1, r3
 801235c:	6878      	ldr	r0, [r7, #4]
 801235e:	f000 f8ea 	bl	8012536 <USBD_CtlSendData>
    break;
 8012362:	e004      	b.n	801236e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8012364:	6839      	ldr	r1, [r7, #0]
 8012366:	6878      	ldr	r0, [r7, #4]
 8012368:	f000 f874 	bl	8012454 <USBD_CtlError>
    break;
 801236c:	bf00      	nop
  }
}
 801236e:	bf00      	nop
 8012370:	3708      	adds	r7, #8
 8012372:	46bd      	mov	sp, r7
 8012374:	bd80      	pop	{r7, pc}

08012376 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012376:	b580      	push	{r7, lr}
 8012378:	b082      	sub	sp, #8
 801237a:	af00      	add	r7, sp, #0
 801237c:	6078      	str	r0, [r7, #4]
 801237e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012380:	683b      	ldr	r3, [r7, #0]
 8012382:	885b      	ldrh	r3, [r3, #2]
 8012384:	2b01      	cmp	r3, #1
 8012386:	d106      	bne.n	8012396 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	2201      	movs	r2, #1
 801238c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8012390:	6878      	ldr	r0, [r7, #4]
 8012392:	f000 f92a 	bl	80125ea <USBD_CtlSendStatus>
  }
}
 8012396:	bf00      	nop
 8012398:	3708      	adds	r7, #8
 801239a:	46bd      	mov	sp, r7
 801239c:	bd80      	pop	{r7, pc}

0801239e <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801239e:	b580      	push	{r7, lr}
 80123a0:	b082      	sub	sp, #8
 80123a2:	af00      	add	r7, sp, #0
 80123a4:	6078      	str	r0, [r7, #4]
 80123a6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80123ae:	3b01      	subs	r3, #1
 80123b0:	2b02      	cmp	r3, #2
 80123b2:	d80b      	bhi.n	80123cc <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80123b4:	683b      	ldr	r3, [r7, #0]
 80123b6:	885b      	ldrh	r3, [r3, #2]
 80123b8:	2b01      	cmp	r3, #1
 80123ba:	d10c      	bne.n	80123d6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	2200      	movs	r2, #0
 80123c0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80123c4:	6878      	ldr	r0, [r7, #4]
 80123c6:	f000 f910 	bl	80125ea <USBD_CtlSendStatus>
      }
      break;
 80123ca:	e004      	b.n	80123d6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80123cc:	6839      	ldr	r1, [r7, #0]
 80123ce:	6878      	ldr	r0, [r7, #4]
 80123d0:	f000 f840 	bl	8012454 <USBD_CtlError>
      break;
 80123d4:	e000      	b.n	80123d8 <USBD_ClrFeature+0x3a>
      break;
 80123d6:	bf00      	nop
  }
}
 80123d8:	bf00      	nop
 80123da:	3708      	adds	r7, #8
 80123dc:	46bd      	mov	sp, r7
 80123de:	bd80      	pop	{r7, pc}

080123e0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80123e0:	b580      	push	{r7, lr}
 80123e2:	b084      	sub	sp, #16
 80123e4:	af00      	add	r7, sp, #0
 80123e6:	6078      	str	r0, [r7, #4]
 80123e8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80123ea:	683b      	ldr	r3, [r7, #0]
 80123ec:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80123ee:	68fb      	ldr	r3, [r7, #12]
 80123f0:	781a      	ldrb	r2, [r3, #0]
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	3301      	adds	r3, #1
 80123fa:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	781a      	ldrb	r2, [r3, #0]
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	3301      	adds	r3, #1
 8012408:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801240a:	68f8      	ldr	r0, [r7, #12]
 801240c:	f7ff fad3 	bl	80119b6 <SWAPBYTE>
 8012410:	4603      	mov	r3, r0
 8012412:	461a      	mov	r2, r3
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8012418:	68fb      	ldr	r3, [r7, #12]
 801241a:	3301      	adds	r3, #1
 801241c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	3301      	adds	r3, #1
 8012422:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8012424:	68f8      	ldr	r0, [r7, #12]
 8012426:	f7ff fac6 	bl	80119b6 <SWAPBYTE>
 801242a:	4603      	mov	r3, r0
 801242c:	461a      	mov	r2, r3
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	3301      	adds	r3, #1
 8012436:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	3301      	adds	r3, #1
 801243c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801243e:	68f8      	ldr	r0, [r7, #12]
 8012440:	f7ff fab9 	bl	80119b6 <SWAPBYTE>
 8012444:	4603      	mov	r3, r0
 8012446:	461a      	mov	r2, r3
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	80da      	strh	r2, [r3, #6]
}
 801244c:	bf00      	nop
 801244e:	3710      	adds	r7, #16
 8012450:	46bd      	mov	sp, r7
 8012452:	bd80      	pop	{r7, pc}

08012454 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012454:	b580      	push	{r7, lr}
 8012456:	b082      	sub	sp, #8
 8012458:	af00      	add	r7, sp, #0
 801245a:	6078      	str	r0, [r7, #4]
 801245c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801245e:	2180      	movs	r1, #128	; 0x80
 8012460:	6878      	ldr	r0, [r7, #4]
 8012462:	f003 fb7f 	bl	8015b64 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012466:	2100      	movs	r1, #0
 8012468:	6878      	ldr	r0, [r7, #4]
 801246a:	f003 fb7b 	bl	8015b64 <USBD_LL_StallEP>
}
 801246e:	bf00      	nop
 8012470:	3708      	adds	r7, #8
 8012472:	46bd      	mov	sp, r7
 8012474:	bd80      	pop	{r7, pc}

08012476 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012476:	b580      	push	{r7, lr}
 8012478:	b086      	sub	sp, #24
 801247a:	af00      	add	r7, sp, #0
 801247c:	60f8      	str	r0, [r7, #12]
 801247e:	60b9      	str	r1, [r7, #8]
 8012480:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8012482:	2300      	movs	r3, #0
 8012484:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	2b00      	cmp	r3, #0
 801248a:	d036      	beq.n	80124fa <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8012490:	6938      	ldr	r0, [r7, #16]
 8012492:	f000 f836 	bl	8012502 <USBD_GetLen>
 8012496:	4603      	mov	r3, r0
 8012498:	3301      	adds	r3, #1
 801249a:	b29b      	uxth	r3, r3
 801249c:	005b      	lsls	r3, r3, #1
 801249e:	b29a      	uxth	r2, r3
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80124a4:	7dfb      	ldrb	r3, [r7, #23]
 80124a6:	68ba      	ldr	r2, [r7, #8]
 80124a8:	4413      	add	r3, r2
 80124aa:	687a      	ldr	r2, [r7, #4]
 80124ac:	7812      	ldrb	r2, [r2, #0]
 80124ae:	701a      	strb	r2, [r3, #0]
  idx++;
 80124b0:	7dfb      	ldrb	r3, [r7, #23]
 80124b2:	3301      	adds	r3, #1
 80124b4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80124b6:	7dfb      	ldrb	r3, [r7, #23]
 80124b8:	68ba      	ldr	r2, [r7, #8]
 80124ba:	4413      	add	r3, r2
 80124bc:	2203      	movs	r2, #3
 80124be:	701a      	strb	r2, [r3, #0]
  idx++;
 80124c0:	7dfb      	ldrb	r3, [r7, #23]
 80124c2:	3301      	adds	r3, #1
 80124c4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80124c6:	e013      	b.n	80124f0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80124c8:	7dfb      	ldrb	r3, [r7, #23]
 80124ca:	68ba      	ldr	r2, [r7, #8]
 80124cc:	4413      	add	r3, r2
 80124ce:	693a      	ldr	r2, [r7, #16]
 80124d0:	7812      	ldrb	r2, [r2, #0]
 80124d2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80124d4:	693b      	ldr	r3, [r7, #16]
 80124d6:	3301      	adds	r3, #1
 80124d8:	613b      	str	r3, [r7, #16]
    idx++;
 80124da:	7dfb      	ldrb	r3, [r7, #23]
 80124dc:	3301      	adds	r3, #1
 80124de:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80124e0:	7dfb      	ldrb	r3, [r7, #23]
 80124e2:	68ba      	ldr	r2, [r7, #8]
 80124e4:	4413      	add	r3, r2
 80124e6:	2200      	movs	r2, #0
 80124e8:	701a      	strb	r2, [r3, #0]
    idx++;
 80124ea:	7dfb      	ldrb	r3, [r7, #23]
 80124ec:	3301      	adds	r3, #1
 80124ee:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80124f0:	693b      	ldr	r3, [r7, #16]
 80124f2:	781b      	ldrb	r3, [r3, #0]
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d1e7      	bne.n	80124c8 <USBD_GetString+0x52>
 80124f8:	e000      	b.n	80124fc <USBD_GetString+0x86>
    return;
 80124fa:	bf00      	nop
  }
}
 80124fc:	3718      	adds	r7, #24
 80124fe:	46bd      	mov	sp, r7
 8012500:	bd80      	pop	{r7, pc}

08012502 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8012502:	b480      	push	{r7}
 8012504:	b085      	sub	sp, #20
 8012506:	af00      	add	r7, sp, #0
 8012508:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801250a:	2300      	movs	r3, #0
 801250c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8012512:	e005      	b.n	8012520 <USBD_GetLen+0x1e>
  {
    len++;
 8012514:	7bfb      	ldrb	r3, [r7, #15]
 8012516:	3301      	adds	r3, #1
 8012518:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801251a:	68bb      	ldr	r3, [r7, #8]
 801251c:	3301      	adds	r3, #1
 801251e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8012520:	68bb      	ldr	r3, [r7, #8]
 8012522:	781b      	ldrb	r3, [r3, #0]
 8012524:	2b00      	cmp	r3, #0
 8012526:	d1f5      	bne.n	8012514 <USBD_GetLen+0x12>
  }

  return len;
 8012528:	7bfb      	ldrb	r3, [r7, #15]
}
 801252a:	4618      	mov	r0, r3
 801252c:	3714      	adds	r7, #20
 801252e:	46bd      	mov	sp, r7
 8012530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012534:	4770      	bx	lr

08012536 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8012536:	b580      	push	{r7, lr}
 8012538:	b084      	sub	sp, #16
 801253a:	af00      	add	r7, sp, #0
 801253c:	60f8      	str	r0, [r7, #12]
 801253e:	60b9      	str	r1, [r7, #8]
 8012540:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	2202      	movs	r2, #2
 8012546:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	687a      	ldr	r2, [r7, #4]
 801254e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	687a      	ldr	r2, [r7, #4]
 8012554:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	68ba      	ldr	r2, [r7, #8]
 801255a:	2100      	movs	r1, #0
 801255c:	68f8      	ldr	r0, [r7, #12]
 801255e:	f003 fb8a 	bl	8015c76 <USBD_LL_Transmit>

  return USBD_OK;
 8012562:	2300      	movs	r3, #0
}
 8012564:	4618      	mov	r0, r3
 8012566:	3710      	adds	r7, #16
 8012568:	46bd      	mov	sp, r7
 801256a:	bd80      	pop	{r7, pc}

0801256c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801256c:	b580      	push	{r7, lr}
 801256e:	b084      	sub	sp, #16
 8012570:	af00      	add	r7, sp, #0
 8012572:	60f8      	str	r0, [r7, #12]
 8012574:	60b9      	str	r1, [r7, #8]
 8012576:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	68ba      	ldr	r2, [r7, #8]
 801257c:	2100      	movs	r1, #0
 801257e:	68f8      	ldr	r0, [r7, #12]
 8012580:	f003 fb79 	bl	8015c76 <USBD_LL_Transmit>

  return USBD_OK;
 8012584:	2300      	movs	r3, #0
}
 8012586:	4618      	mov	r0, r3
 8012588:	3710      	adds	r7, #16
 801258a:	46bd      	mov	sp, r7
 801258c:	bd80      	pop	{r7, pc}

0801258e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801258e:	b580      	push	{r7, lr}
 8012590:	b084      	sub	sp, #16
 8012592:	af00      	add	r7, sp, #0
 8012594:	60f8      	str	r0, [r7, #12]
 8012596:	60b9      	str	r1, [r7, #8]
 8012598:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801259a:	68fb      	ldr	r3, [r7, #12]
 801259c:	2203      	movs	r2, #3
 801259e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80125a2:	68fb      	ldr	r3, [r7, #12]
 80125a4:	687a      	ldr	r2, [r7, #4]
 80125a6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80125aa:	68fb      	ldr	r3, [r7, #12]
 80125ac:	687a      	ldr	r2, [r7, #4]
 80125ae:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	68ba      	ldr	r2, [r7, #8]
 80125b6:	2100      	movs	r1, #0
 80125b8:	68f8      	ldr	r0, [r7, #12]
 80125ba:	f003 fb7d 	bl	8015cb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80125be:	2300      	movs	r3, #0
}
 80125c0:	4618      	mov	r0, r3
 80125c2:	3710      	adds	r7, #16
 80125c4:	46bd      	mov	sp, r7
 80125c6:	bd80      	pop	{r7, pc}

080125c8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80125c8:	b580      	push	{r7, lr}
 80125ca:	b084      	sub	sp, #16
 80125cc:	af00      	add	r7, sp, #0
 80125ce:	60f8      	str	r0, [r7, #12]
 80125d0:	60b9      	str	r1, [r7, #8]
 80125d2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	68ba      	ldr	r2, [r7, #8]
 80125d8:	2100      	movs	r1, #0
 80125da:	68f8      	ldr	r0, [r7, #12]
 80125dc:	f003 fb6c 	bl	8015cb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80125e0:	2300      	movs	r3, #0
}
 80125e2:	4618      	mov	r0, r3
 80125e4:	3710      	adds	r7, #16
 80125e6:	46bd      	mov	sp, r7
 80125e8:	bd80      	pop	{r7, pc}

080125ea <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80125ea:	b580      	push	{r7, lr}
 80125ec:	b082      	sub	sp, #8
 80125ee:	af00      	add	r7, sp, #0
 80125f0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	2204      	movs	r2, #4
 80125f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80125fa:	2300      	movs	r3, #0
 80125fc:	2200      	movs	r2, #0
 80125fe:	2100      	movs	r1, #0
 8012600:	6878      	ldr	r0, [r7, #4]
 8012602:	f003 fb38 	bl	8015c76 <USBD_LL_Transmit>

  return USBD_OK;
 8012606:	2300      	movs	r3, #0
}
 8012608:	4618      	mov	r0, r3
 801260a:	3708      	adds	r7, #8
 801260c:	46bd      	mov	sp, r7
 801260e:	bd80      	pop	{r7, pc}

08012610 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012610:	b580      	push	{r7, lr}
 8012612:	b082      	sub	sp, #8
 8012614:	af00      	add	r7, sp, #0
 8012616:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	2205      	movs	r2, #5
 801261c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012620:	2300      	movs	r3, #0
 8012622:	2200      	movs	r2, #0
 8012624:	2100      	movs	r1, #0
 8012626:	6878      	ldr	r0, [r7, #4]
 8012628:	f003 fb46 	bl	8015cb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801262c:	2300      	movs	r3, #0
}
 801262e:	4618      	mov	r0, r3
 8012630:	3708      	adds	r7, #8
 8012632:	46bd      	mov	sp, r7
 8012634:	bd80      	pop	{r7, pc}

08012636 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8012636:	b480      	push	{r7}
 8012638:	b085      	sub	sp, #20
 801263a:	af00      	add	r7, sp, #0
 801263c:	4603      	mov	r3, r0
 801263e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8012640:	2300      	movs	r3, #0
 8012642:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8012644:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012648:	2b84      	cmp	r3, #132	; 0x84
 801264a:	d005      	beq.n	8012658 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 801264c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	4413      	add	r3, r2
 8012654:	3303      	adds	r3, #3
 8012656:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8012658:	68fb      	ldr	r3, [r7, #12]
}
 801265a:	4618      	mov	r0, r3
 801265c:	3714      	adds	r7, #20
 801265e:	46bd      	mov	sp, r7
 8012660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012664:	4770      	bx	lr

08012666 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8012666:	b480      	push	{r7}
 8012668:	b083      	sub	sp, #12
 801266a:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801266c:	f3ef 8305 	mrs	r3, IPSR
 8012670:	607b      	str	r3, [r7, #4]
  return(result);
 8012672:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8012674:	2b00      	cmp	r3, #0
 8012676:	bf14      	ite	ne
 8012678:	2301      	movne	r3, #1
 801267a:	2300      	moveq	r3, #0
 801267c:	b2db      	uxtb	r3, r3
}
 801267e:	4618      	mov	r0, r3
 8012680:	370c      	adds	r7, #12
 8012682:	46bd      	mov	sp, r7
 8012684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012688:	4770      	bx	lr

0801268a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 801268a:	b580      	push	{r7, lr}
 801268c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 801268e:	f001 fb31 	bl	8013cf4 <vTaskStartScheduler>
  
  return osOK;
 8012692:	2300      	movs	r3, #0
}
 8012694:	4618      	mov	r0, r3
 8012696:	bd80      	pop	{r7, pc}

08012698 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8012698:	b5f0      	push	{r4, r5, r6, r7, lr}
 801269a:	b089      	sub	sp, #36	; 0x24
 801269c:	af04      	add	r7, sp, #16
 801269e:	6078      	str	r0, [r7, #4]
 80126a0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	695b      	ldr	r3, [r3, #20]
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d020      	beq.n	80126ec <osThreadCreate+0x54>
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	699b      	ldr	r3, [r3, #24]
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d01c      	beq.n	80126ec <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	685c      	ldr	r4, [r3, #4]
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	681d      	ldr	r5, [r3, #0]
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	691e      	ldr	r6, [r3, #16]
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80126c4:	4618      	mov	r0, r3
 80126c6:	f7ff ffb6 	bl	8012636 <makeFreeRtosPriority>
 80126ca:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	695b      	ldr	r3, [r3, #20]
 80126d0:	687a      	ldr	r2, [r7, #4]
 80126d2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80126d4:	9202      	str	r2, [sp, #8]
 80126d6:	9301      	str	r3, [sp, #4]
 80126d8:	9100      	str	r1, [sp, #0]
 80126da:	683b      	ldr	r3, [r7, #0]
 80126dc:	4632      	mov	r2, r6
 80126de:	4629      	mov	r1, r5
 80126e0:	4620      	mov	r0, r4
 80126e2:	f001 f944 	bl	801396e <xTaskCreateStatic>
 80126e6:	4603      	mov	r3, r0
 80126e8:	60fb      	str	r3, [r7, #12]
 80126ea:	e01c      	b.n	8012726 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	685c      	ldr	r4, [r3, #4]
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80126f8:	b29e      	uxth	r6, r3
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012700:	4618      	mov	r0, r3
 8012702:	f7ff ff98 	bl	8012636 <makeFreeRtosPriority>
 8012706:	4602      	mov	r2, r0
 8012708:	f107 030c 	add.w	r3, r7, #12
 801270c:	9301      	str	r3, [sp, #4]
 801270e:	9200      	str	r2, [sp, #0]
 8012710:	683b      	ldr	r3, [r7, #0]
 8012712:	4632      	mov	r2, r6
 8012714:	4629      	mov	r1, r5
 8012716:	4620      	mov	r0, r4
 8012718:	f001 f983 	bl	8013a22 <xTaskCreate>
 801271c:	4603      	mov	r3, r0
 801271e:	2b01      	cmp	r3, #1
 8012720:	d001      	beq.n	8012726 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8012722:	2300      	movs	r3, #0
 8012724:	e000      	b.n	8012728 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8012726:	68fb      	ldr	r3, [r7, #12]
}
 8012728:	4618      	mov	r0, r3
 801272a:	3714      	adds	r7, #20
 801272c:	46bd      	mov	sp, r7
 801272e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012730 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8012730:	b580      	push	{r7, lr}
 8012732:	b084      	sub	sp, #16
 8012734:	af00      	add	r7, sp, #0
 8012736:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	2b00      	cmp	r3, #0
 8012740:	d001      	beq.n	8012746 <osDelay+0x16>
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	e000      	b.n	8012748 <osDelay+0x18>
 8012746:	2301      	movs	r3, #1
 8012748:	4618      	mov	r0, r3
 801274a:	f001 fa9f 	bl	8013c8c <vTaskDelay>
  
  return osOK;
 801274e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8012750:	4618      	mov	r0, r3
 8012752:	3710      	adds	r7, #16
 8012754:	46bd      	mov	sp, r7
 8012756:	bd80      	pop	{r7, pc}

08012758 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8012758:	b580      	push	{r7, lr}
 801275a:	b086      	sub	sp, #24
 801275c:	af02      	add	r7, sp, #8
 801275e:	6078      	str	r0, [r7, #4]
 8012760:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8012762:	2300      	movs	r3, #0
 8012764:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8012766:	2300      	movs	r3, #0
 8012768:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 801276a:	f7ff ff7c 	bl	8012666 <inHandlerMode>
 801276e:	4603      	mov	r3, r0
 8012770:	2b00      	cmp	r3, #0
 8012772:	d01c      	beq.n	80127ae <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8012774:	6839      	ldr	r1, [r7, #0]
 8012776:	f107 0208 	add.w	r2, r7, #8
 801277a:	f107 030c 	add.w	r3, r7, #12
 801277e:	9300      	str	r3, [sp, #0]
 8012780:	4613      	mov	r3, r2
 8012782:	2201      	movs	r2, #1
 8012784:	6878      	ldr	r0, [r7, #4]
 8012786:	f002 f857 	bl	8014838 <xTaskGenericNotifyFromISR>
 801278a:	4603      	mov	r3, r0
 801278c:	2b01      	cmp	r3, #1
 801278e:	d002      	beq.n	8012796 <osSignalSet+0x3e>
      return 0x80000000;
 8012790:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012794:	e019      	b.n	80127ca <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8012796:	68fb      	ldr	r3, [r7, #12]
 8012798:	2b00      	cmp	r3, #0
 801279a:	d015      	beq.n	80127c8 <osSignalSet+0x70>
 801279c:	4b0d      	ldr	r3, [pc, #52]	; (80127d4 <osSignalSet+0x7c>)
 801279e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80127a2:	601a      	str	r2, [r3, #0]
 80127a4:	f3bf 8f4f 	dsb	sy
 80127a8:	f3bf 8f6f 	isb	sy
 80127ac:	e00c      	b.n	80127c8 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 80127ae:	6839      	ldr	r1, [r7, #0]
 80127b0:	f107 0308 	add.w	r3, r7, #8
 80127b4:	2201      	movs	r2, #1
 80127b6:	6878      	ldr	r0, [r7, #4]
 80127b8:	f001 ff8c 	bl	80146d4 <xTaskGenericNotify>
 80127bc:	4603      	mov	r3, r0
 80127be:	2b01      	cmp	r3, #1
 80127c0:	d002      	beq.n	80127c8 <osSignalSet+0x70>
    return 0x80000000;
 80127c2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80127c6:	e000      	b.n	80127ca <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 80127c8:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 80127ca:	4618      	mov	r0, r3
 80127cc:	3710      	adds	r7, #16
 80127ce:	46bd      	mov	sp, r7
 80127d0:	bd80      	pop	{r7, pc}
 80127d2:	bf00      	nop
 80127d4:	e000ed04 	.word	0xe000ed04

080127d8 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 80127d8:	b590      	push	{r4, r7, lr}
 80127da:	b089      	sub	sp, #36	; 0x24
 80127dc:	af00      	add	r7, sp, #0
 80127de:	60f8      	str	r0, [r7, #12]
 80127e0:	60b9      	str	r1, [r7, #8]
 80127e2:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 80127e4:	2300      	movs	r3, #0
 80127e6:	617b      	str	r3, [r7, #20]
  ticks = 0;
 80127e8:	2300      	movs	r3, #0
 80127ea:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127f2:	d103      	bne.n	80127fc <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 80127f4:	f04f 33ff 	mov.w	r3, #4294967295
 80127f8:	61fb      	str	r3, [r7, #28]
 80127fa:	e009      	b.n	8012810 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d006      	beq.n	8012810 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8012806:	69fb      	ldr	r3, [r7, #28]
 8012808:	2b00      	cmp	r3, #0
 801280a:	d101      	bne.n	8012810 <osSignalWait+0x38>
      ticks = 1;
 801280c:	2301      	movs	r3, #1
 801280e:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8012810:	f7ff ff29 	bl	8012666 <inHandlerMode>
 8012814:	4603      	mov	r3, r0
 8012816:	2b00      	cmp	r3, #0
 8012818:	d002      	beq.n	8012820 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 801281a:	2382      	movs	r3, #130	; 0x82
 801281c:	613b      	str	r3, [r7, #16]
 801281e:	e01b      	b.n	8012858 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8012820:	68b9      	ldr	r1, [r7, #8]
 8012822:	f107 0310 	add.w	r3, r7, #16
 8012826:	1d1a      	adds	r2, r3, #4
 8012828:	69fb      	ldr	r3, [r7, #28]
 801282a:	2000      	movs	r0, #0
 801282c:	f001 fef8 	bl	8014620 <xTaskNotifyWait>
 8012830:	4603      	mov	r3, r0
 8012832:	2b01      	cmp	r3, #1
 8012834:	d008      	beq.n	8012848 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8012836:	69fb      	ldr	r3, [r7, #28]
 8012838:	2b00      	cmp	r3, #0
 801283a:	d102      	bne.n	8012842 <osSignalWait+0x6a>
 801283c:	2300      	movs	r3, #0
 801283e:	613b      	str	r3, [r7, #16]
 8012840:	e00a      	b.n	8012858 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8012842:	2340      	movs	r3, #64	; 0x40
 8012844:	613b      	str	r3, [r7, #16]
 8012846:	e007      	b.n	8012858 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8012848:	697b      	ldr	r3, [r7, #20]
 801284a:	2b00      	cmp	r3, #0
 801284c:	da02      	bge.n	8012854 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 801284e:	2386      	movs	r3, #134	; 0x86
 8012850:	613b      	str	r3, [r7, #16]
 8012852:	e001      	b.n	8012858 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8012854:	2308      	movs	r3, #8
 8012856:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	461c      	mov	r4, r3
 801285c:	f107 0310 	add.w	r3, r7, #16
 8012860:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012864:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8012868:	68f8      	ldr	r0, [r7, #12]
 801286a:	3724      	adds	r7, #36	; 0x24
 801286c:	46bd      	mov	sp, r7
 801286e:	bd90      	pop	{r4, r7, pc}

08012870 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8012870:	b580      	push	{r7, lr}
 8012872:	b082      	sub	sp, #8
 8012874:	af00      	add	r7, sp, #0
 8012876:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	685b      	ldr	r3, [r3, #4]
 801287c:	2b00      	cmp	r3, #0
 801287e:	d007      	beq.n	8012890 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	685b      	ldr	r3, [r3, #4]
 8012884:	4619      	mov	r1, r3
 8012886:	2001      	movs	r0, #1
 8012888:	f000 fc5f 	bl	801314a <xQueueCreateMutexStatic>
 801288c:	4603      	mov	r3, r0
 801288e:	e003      	b.n	8012898 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8012890:	2001      	movs	r0, #1
 8012892:	f000 fc42 	bl	801311a <xQueueCreateMutex>
 8012896:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8012898:	4618      	mov	r0, r3
 801289a:	3708      	adds	r7, #8
 801289c:	46bd      	mov	sp, r7
 801289e:	bd80      	pop	{r7, pc}

080128a0 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 80128a0:	b580      	push	{r7, lr}
 80128a2:	b086      	sub	sp, #24
 80128a4:	af00      	add	r7, sp, #0
 80128a6:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	685b      	ldr	r3, [r3, #4]
 80128ac:	3303      	adds	r3, #3
 80128ae:	f023 0303 	bic.w	r3, r3, #3
 80128b2:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 80128b4:	2014      	movs	r0, #20
 80128b6:	f002 fb3b 	bl	8014f30 <pvPortMalloc>
 80128ba:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 80128bc:	697b      	ldr	r3, [r7, #20]
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d046      	beq.n	8012950 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	681a      	ldr	r2, [r3, #0]
 80128c6:	697b      	ldr	r3, [r7, #20]
 80128c8:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 80128ca:	68fa      	ldr	r2, [r7, #12]
 80128cc:	697b      	ldr	r3, [r7, #20]
 80128ce:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 80128d0:	697b      	ldr	r3, [r7, #20]
 80128d2:	2200      	movs	r2, #0
 80128d4:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	681b      	ldr	r3, [r3, #0]
 80128da:	4618      	mov	r0, r3
 80128dc:	f002 fb28 	bl	8014f30 <pvPortMalloc>
 80128e0:	4602      	mov	r2, r0
 80128e2:	697b      	ldr	r3, [r7, #20]
 80128e4:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 80128e6:	697b      	ldr	r3, [r7, #20]
 80128e8:	685b      	ldr	r3, [r3, #4]
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d02b      	beq.n	8012946 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	68fa      	ldr	r2, [r7, #12]
 80128f4:	fb02 f303 	mul.w	r3, r2, r3
 80128f8:	4618      	mov	r0, r3
 80128fa:	f002 fb19 	bl	8014f30 <pvPortMalloc>
 80128fe:	4602      	mov	r2, r0
 8012900:	697b      	ldr	r3, [r7, #20]
 8012902:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8012904:	697b      	ldr	r3, [r7, #20]
 8012906:	681b      	ldr	r3, [r3, #0]
 8012908:	2b00      	cmp	r3, #0
 801290a:	d011      	beq.n	8012930 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 801290c:	2300      	movs	r3, #0
 801290e:	613b      	str	r3, [r7, #16]
 8012910:	e008      	b.n	8012924 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8012912:	697b      	ldr	r3, [r7, #20]
 8012914:	685a      	ldr	r2, [r3, #4]
 8012916:	693b      	ldr	r3, [r7, #16]
 8012918:	4413      	add	r3, r2
 801291a:	2200      	movs	r2, #0
 801291c:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 801291e:	693b      	ldr	r3, [r7, #16]
 8012920:	3301      	adds	r3, #1
 8012922:	613b      	str	r3, [r7, #16]
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	693a      	ldr	r2, [r7, #16]
 801292a:	429a      	cmp	r2, r3
 801292c:	d3f1      	bcc.n	8012912 <osPoolCreate+0x72>
 801292e:	e00f      	b.n	8012950 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8012930:	697b      	ldr	r3, [r7, #20]
 8012932:	685b      	ldr	r3, [r3, #4]
 8012934:	4618      	mov	r0, r3
 8012936:	f002 fbbd 	bl	80150b4 <vPortFree>
        vPortFree(thePool);
 801293a:	6978      	ldr	r0, [r7, #20]
 801293c:	f002 fbba 	bl	80150b4 <vPortFree>
        thePool = NULL;
 8012940:	2300      	movs	r3, #0
 8012942:	617b      	str	r3, [r7, #20]
 8012944:	e004      	b.n	8012950 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8012946:	6978      	ldr	r0, [r7, #20]
 8012948:	f002 fbb4 	bl	80150b4 <vPortFree>
      thePool = NULL;
 801294c:	2300      	movs	r3, #0
 801294e:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8012950:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8012952:	4618      	mov	r0, r3
 8012954:	3718      	adds	r7, #24
 8012956:	46bd      	mov	sp, r7
 8012958:	bd80      	pop	{r7, pc}

0801295a <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 801295a:	b580      	push	{r7, lr}
 801295c:	b08a      	sub	sp, #40	; 0x28
 801295e:	af00      	add	r7, sp, #0
 8012960:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8012962:	2300      	movs	r3, #0
 8012964:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 8012966:	2300      	movs	r3, #0
 8012968:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 801296a:	f7ff fe7c 	bl	8012666 <inHandlerMode>
 801296e:	4603      	mov	r3, r0
 8012970:	2b00      	cmp	r3, #0
 8012972:	d00e      	beq.n	8012992 <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8012974:	f3ef 8211 	mrs	r2, BASEPRI
 8012978:	f04f 0350 	mov.w	r3, #80	; 0x50
 801297c:	f383 8811 	msr	BASEPRI, r3
 8012980:	f3bf 8f6f 	isb	sy
 8012984:	f3bf 8f4f 	dsb	sy
 8012988:	617a      	str	r2, [r7, #20]
 801298a:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801298c:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 801298e:	627b      	str	r3, [r7, #36]	; 0x24
 8012990:	e001      	b.n	8012996 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8012992:	f002 f9b3 	bl	8014cfc <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8012996:	2300      	movs	r3, #0
 8012998:	61fb      	str	r3, [r7, #28]
 801299a:	e029      	b.n	80129f0 <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	691a      	ldr	r2, [r3, #16]
 80129a0:	69fb      	ldr	r3, [r7, #28]
 80129a2:	4413      	add	r3, r2
 80129a4:	687a      	ldr	r2, [r7, #4]
 80129a6:	6892      	ldr	r2, [r2, #8]
 80129a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80129ac:	fb02 f201 	mul.w	r2, r2, r1
 80129b0:	1a9b      	subs	r3, r3, r2
 80129b2:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	685a      	ldr	r2, [r3, #4]
 80129b8:	69bb      	ldr	r3, [r7, #24]
 80129ba:	4413      	add	r3, r2
 80129bc:	781b      	ldrb	r3, [r3, #0]
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d113      	bne.n	80129ea <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	685a      	ldr	r2, [r3, #4]
 80129c6:	69bb      	ldr	r3, [r7, #24]
 80129c8:	4413      	add	r3, r2
 80129ca:	2201      	movs	r2, #1
 80129cc:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	4619      	mov	r1, r3
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	68db      	ldr	r3, [r3, #12]
 80129d8:	69ba      	ldr	r2, [r7, #24]
 80129da:	fb02 f303 	mul.w	r3, r2, r3
 80129de:	440b      	add	r3, r1
 80129e0:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	69ba      	ldr	r2, [r7, #24]
 80129e6:	611a      	str	r2, [r3, #16]
      break;
 80129e8:	e007      	b.n	80129fa <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 80129ea:	69fb      	ldr	r3, [r7, #28]
 80129ec:	3301      	adds	r3, #1
 80129ee:	61fb      	str	r3, [r7, #28]
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	689b      	ldr	r3, [r3, #8]
 80129f4:	69fa      	ldr	r2, [r7, #28]
 80129f6:	429a      	cmp	r2, r3
 80129f8:	d3d0      	bcc.n	801299c <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 80129fa:	f7ff fe34 	bl	8012666 <inHandlerMode>
 80129fe:	4603      	mov	r3, r0
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d005      	beq.n	8012a10 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8012a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a06:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012a08:	68fb      	ldr	r3, [r7, #12]
 8012a0a:	f383 8811 	msr	BASEPRI, r3
 8012a0e:	e001      	b.n	8012a14 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 8012a10:	f002 f9a2 	bl	8014d58 <vPortExitCritical>
  }
  
  return p;
 8012a14:	6a3b      	ldr	r3, [r7, #32]
}
 8012a16:	4618      	mov	r0, r3
 8012a18:	3728      	adds	r7, #40	; 0x28
 8012a1a:	46bd      	mov	sp, r7
 8012a1c:	bd80      	pop	{r7, pc}

08012a1e <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 8012a1e:	b480      	push	{r7}
 8012a20:	b085      	sub	sp, #20
 8012a22:	af00      	add	r7, sp, #0
 8012a24:	6078      	str	r0, [r7, #4]
 8012a26:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d101      	bne.n	8012a32 <osPoolFree+0x14>
    return osErrorParameter;
 8012a2e:	2380      	movs	r3, #128	; 0x80
 8012a30:	e030      	b.n	8012a94 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 8012a32:	683b      	ldr	r3, [r7, #0]
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d101      	bne.n	8012a3c <osPoolFree+0x1e>
    return osErrorParameter;
 8012a38:	2380      	movs	r3, #128	; 0x80
 8012a3a:	e02b      	b.n	8012a94 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	681b      	ldr	r3, [r3, #0]
 8012a40:	683a      	ldr	r2, [r7, #0]
 8012a42:	429a      	cmp	r2, r3
 8012a44:	d201      	bcs.n	8012a4a <osPoolFree+0x2c>
    return osErrorParameter;
 8012a46:	2380      	movs	r3, #128	; 0x80
 8012a48:	e024      	b.n	8012a94 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8012a4a:	683b      	ldr	r3, [r7, #0]
 8012a4c:	687a      	ldr	r2, [r7, #4]
 8012a4e:	6812      	ldr	r2, [r2, #0]
 8012a50:	1a9b      	subs	r3, r3, r2
 8012a52:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	68da      	ldr	r2, [r3, #12]
 8012a58:	68fb      	ldr	r3, [r7, #12]
 8012a5a:	fbb3 f1f2 	udiv	r1, r3, r2
 8012a5e:	fb02 f201 	mul.w	r2, r2, r1
 8012a62:	1a9b      	subs	r3, r3, r2
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d001      	beq.n	8012a6c <osPoolFree+0x4e>
    return osErrorParameter;
 8012a68:	2380      	movs	r3, #128	; 0x80
 8012a6a:	e013      	b.n	8012a94 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	68db      	ldr	r3, [r3, #12]
 8012a70:	68fa      	ldr	r2, [r7, #12]
 8012a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8012a76:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	689b      	ldr	r3, [r3, #8]
 8012a7c:	68fa      	ldr	r2, [r7, #12]
 8012a7e:	429a      	cmp	r2, r3
 8012a80:	d301      	bcc.n	8012a86 <osPoolFree+0x68>
    return osErrorParameter;
 8012a82:	2380      	movs	r3, #128	; 0x80
 8012a84:	e006      	b.n	8012a94 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	685a      	ldr	r2, [r3, #4]
 8012a8a:	68fb      	ldr	r3, [r7, #12]
 8012a8c:	4413      	add	r3, r2
 8012a8e:	2200      	movs	r2, #0
 8012a90:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 8012a92:	2300      	movs	r3, #0
}
 8012a94:	4618      	mov	r0, r3
 8012a96:	3714      	adds	r7, #20
 8012a98:	46bd      	mov	sp, r7
 8012a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a9e:	4770      	bx	lr

08012aa0 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8012aa0:	b590      	push	{r4, r7, lr}
 8012aa2:	b087      	sub	sp, #28
 8012aa4:	af00      	add	r7, sp, #0
 8012aa6:	6078      	str	r0, [r7, #4]
 8012aa8:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	681b      	ldr	r3, [r3, #0]
 8012aae:	60fb      	str	r3, [r7, #12]
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	685b      	ldr	r3, [r3, #4]
 8012ab4:	613b      	str	r3, [r7, #16]
 8012ab6:	2300      	movs	r3, #0
 8012ab8:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	689c      	ldr	r4, [r3, #8]
 8012abe:	200c      	movs	r0, #12
 8012ac0:	f002 fa36 	bl	8014f30 <pvPortMalloc>
 8012ac4:	4603      	mov	r3, r0
 8012ac6:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	689b      	ldr	r3, [r3, #8]
 8012acc:	681b      	ldr	r3, [r3, #0]
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d101      	bne.n	8012ad6 <osMailCreate+0x36>
    return NULL;
 8012ad2:	2300      	movs	r3, #0
 8012ad4:	e038      	b.n	8012b48 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	689b      	ldr	r3, [r3, #8]
 8012ada:	681b      	ldr	r3, [r3, #0]
 8012adc:	687a      	ldr	r2, [r7, #4]
 8012ade:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	6818      	ldr	r0, [r3, #0]
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	689b      	ldr	r3, [r3, #8]
 8012ae8:	681c      	ldr	r4, [r3, #0]
 8012aea:	2200      	movs	r2, #0
 8012aec:	2104      	movs	r1, #4
 8012aee:	f000 fa9c 	bl	801302a <xQueueGenericCreate>
 8012af2:	4603      	mov	r3, r0
 8012af4:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	689b      	ldr	r3, [r3, #8]
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	685b      	ldr	r3, [r3, #4]
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d107      	bne.n	8012b12 <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	689b      	ldr	r3, [r3, #8]
 8012b06:	681b      	ldr	r3, [r3, #0]
 8012b08:	4618      	mov	r0, r3
 8012b0a:	f002 fad3 	bl	80150b4 <vPortFree>
    return NULL;
 8012b0e:	2300      	movs	r3, #0
 8012b10:	e01a      	b.n	8012b48 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	689b      	ldr	r3, [r3, #8]
 8012b16:	681c      	ldr	r4, [r3, #0]
 8012b18:	f107 030c 	add.w	r3, r7, #12
 8012b1c:	4618      	mov	r0, r3
 8012b1e:	f7ff febf 	bl	80128a0 <osPoolCreate>
 8012b22:	4603      	mov	r3, r0
 8012b24:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	689b      	ldr	r3, [r3, #8]
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	689b      	ldr	r3, [r3, #8]
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d107      	bne.n	8012b42 <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	689b      	ldr	r3, [r3, #8]
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	4618      	mov	r0, r3
 8012b3a:	f002 fabb 	bl	80150b4 <vPortFree>
    return NULL;
 8012b3e:	2300      	movs	r3, #0
 8012b40:	e002      	b.n	8012b48 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	689b      	ldr	r3, [r3, #8]
 8012b46:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 8012b48:	4618      	mov	r0, r3
 8012b4a:	371c      	adds	r7, #28
 8012b4c:	46bd      	mov	sp, r7
 8012b4e:	bd90      	pop	{r4, r7, pc}

08012b50 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 8012b50:	b580      	push	{r7, lr}
 8012b52:	b084      	sub	sp, #16
 8012b54:	af00      	add	r7, sp, #0
 8012b56:	6078      	str	r0, [r7, #4]
 8012b58:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d101      	bne.n	8012b64 <osMailAlloc+0x14>
    return NULL;
 8012b60:	2300      	movs	r3, #0
 8012b62:	e006      	b.n	8012b72 <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	689b      	ldr	r3, [r3, #8]
 8012b68:	4618      	mov	r0, r3
 8012b6a:	f7ff fef6 	bl	801295a <osPoolAlloc>
 8012b6e:	60f8      	str	r0, [r7, #12]
  
  return p;
 8012b70:	68fb      	ldr	r3, [r7, #12]
}
 8012b72:	4618      	mov	r0, r3
 8012b74:	3710      	adds	r7, #16
 8012b76:	46bd      	mov	sp, r7
 8012b78:	bd80      	pop	{r7, pc}
	...

08012b7c <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8012b7c:	b580      	push	{r7, lr}
 8012b7e:	b084      	sub	sp, #16
 8012b80:	af00      	add	r7, sp, #0
 8012b82:	6078      	str	r0, [r7, #4]
 8012b84:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d101      	bne.n	8012b90 <osMailPut+0x14>
    return osErrorParameter;
 8012b8c:	2380      	movs	r3, #128	; 0x80
 8012b8e:	e02c      	b.n	8012bea <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 8012b90:	2300      	movs	r3, #0
 8012b92:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 8012b94:	f7ff fd67 	bl	8012666 <inHandlerMode>
 8012b98:	4603      	mov	r3, r0
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d018      	beq.n	8012bd0 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	6858      	ldr	r0, [r3, #4]
 8012ba2:	f107 020c 	add.w	r2, r7, #12
 8012ba6:	4639      	mov	r1, r7
 8012ba8:	2300      	movs	r3, #0
 8012baa:	f000 fbe3 	bl	8013374 <xQueueGenericSendFromISR>
 8012bae:	4603      	mov	r3, r0
 8012bb0:	2b01      	cmp	r3, #1
 8012bb2:	d001      	beq.n	8012bb8 <osMailPut+0x3c>
      return osErrorOS;
 8012bb4:	23ff      	movs	r3, #255	; 0xff
 8012bb6:	e018      	b.n	8012bea <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012bb8:	68fb      	ldr	r3, [r7, #12]
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d014      	beq.n	8012be8 <osMailPut+0x6c>
 8012bbe:	4b0d      	ldr	r3, [pc, #52]	; (8012bf4 <osMailPut+0x78>)
 8012bc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012bc4:	601a      	str	r2, [r3, #0]
 8012bc6:	f3bf 8f4f 	dsb	sy
 8012bca:	f3bf 8f6f 	isb	sy
 8012bce:	e00b      	b.n	8012be8 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	6858      	ldr	r0, [r3, #4]
 8012bd4:	4639      	mov	r1, r7
 8012bd6:	2300      	movs	r3, #0
 8012bd8:	2200      	movs	r2, #0
 8012bda:	f000 fad1 	bl	8013180 <xQueueGenericSend>
 8012bde:	4603      	mov	r3, r0
 8012be0:	2b01      	cmp	r3, #1
 8012be2:	d001      	beq.n	8012be8 <osMailPut+0x6c>
      return osErrorOS;
 8012be4:	23ff      	movs	r3, #255	; 0xff
 8012be6:	e000      	b.n	8012bea <osMailPut+0x6e>
    }
  }
  
  return osOK;
 8012be8:	2300      	movs	r3, #0
}
 8012bea:	4618      	mov	r0, r3
 8012bec:	3710      	adds	r7, #16
 8012bee:	46bd      	mov	sp, r7
 8012bf0:	bd80      	pop	{r7, pc}
 8012bf2:	bf00      	nop
 8012bf4:	e000ed04 	.word	0xe000ed04

08012bf8 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 8012bf8:	b590      	push	{r4, r7, lr}
 8012bfa:	b08b      	sub	sp, #44	; 0x2c
 8012bfc:	af00      	add	r7, sp, #0
 8012bfe:	60f8      	str	r0, [r7, #12]
 8012c00:	60b9      	str	r1, [r7, #8]
 8012c02:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 8012c04:	68bb      	ldr	r3, [r7, #8]
 8012c06:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 8012c08:	68bb      	ldr	r3, [r7, #8]
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d10a      	bne.n	8012c24 <osMailGet+0x2c>
    event.status = osErrorParameter;
 8012c0e:	2380      	movs	r3, #128	; 0x80
 8012c10:	617b      	str	r3, [r7, #20]
    return event;
 8012c12:	68fb      	ldr	r3, [r7, #12]
 8012c14:	461c      	mov	r4, r3
 8012c16:	f107 0314 	add.w	r3, r7, #20
 8012c1a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012c1e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012c22:	e056      	b.n	8012cd2 <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8012c24:	2300      	movs	r3, #0
 8012c26:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8012c28:	2300      	movs	r3, #0
 8012c2a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c32:	d103      	bne.n	8012c3c <osMailGet+0x44>
    ticks = portMAX_DELAY;
 8012c34:	f04f 33ff 	mov.w	r3, #4294967295
 8012c38:	627b      	str	r3, [r7, #36]	; 0x24
 8012c3a:	e009      	b.n	8012c50 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d006      	beq.n	8012c50 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8012c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d101      	bne.n	8012c50 <osMailGet+0x58>
      ticks = 1;
 8012c4c:	2301      	movs	r3, #1
 8012c4e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8012c50:	f7ff fd09 	bl	8012666 <inHandlerMode>
 8012c54:	4603      	mov	r3, r0
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d01d      	beq.n	8012c96 <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8012c5a:	68bb      	ldr	r3, [r7, #8]
 8012c5c:	6858      	ldr	r0, [r3, #4]
 8012c5e:	f107 0220 	add.w	r2, r7, #32
 8012c62:	f107 0314 	add.w	r3, r7, #20
 8012c66:	3304      	adds	r3, #4
 8012c68:	4619      	mov	r1, r3
 8012c6a:	f000 fcf3 	bl	8013654 <xQueueReceiveFromISR>
 8012c6e:	4603      	mov	r3, r0
 8012c70:	2b01      	cmp	r3, #1
 8012c72:	d102      	bne.n	8012c7a <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 8012c74:	2320      	movs	r3, #32
 8012c76:	617b      	str	r3, [r7, #20]
 8012c78:	e001      	b.n	8012c7e <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 8012c7a:	2300      	movs	r3, #0
 8012c7c:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012c7e:	6a3b      	ldr	r3, [r7, #32]
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d01e      	beq.n	8012cc2 <osMailGet+0xca>
 8012c84:	4b15      	ldr	r3, [pc, #84]	; (8012cdc <osMailGet+0xe4>)
 8012c86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012c8a:	601a      	str	r2, [r3, #0]
 8012c8c:	f3bf 8f4f 	dsb	sy
 8012c90:	f3bf 8f6f 	isb	sy
 8012c94:	e015      	b.n	8012cc2 <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8012c96:	68bb      	ldr	r3, [r7, #8]
 8012c98:	6858      	ldr	r0, [r3, #4]
 8012c9a:	f107 0314 	add.w	r3, r7, #20
 8012c9e:	3304      	adds	r3, #4
 8012ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012ca2:	4619      	mov	r1, r3
 8012ca4:	f000 fbfa 	bl	801349c <xQueueReceive>
 8012ca8:	4603      	mov	r3, r0
 8012caa:	2b01      	cmp	r3, #1
 8012cac:	d102      	bne.n	8012cb4 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 8012cae:	2320      	movs	r3, #32
 8012cb0:	617b      	str	r3, [r7, #20]
 8012cb2:	e006      	b.n	8012cc2 <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8012cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d101      	bne.n	8012cbe <osMailGet+0xc6>
 8012cba:	2300      	movs	r3, #0
 8012cbc:	e000      	b.n	8012cc0 <osMailGet+0xc8>
 8012cbe:	2340      	movs	r3, #64	; 0x40
 8012cc0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8012cc2:	68fb      	ldr	r3, [r7, #12]
 8012cc4:	461c      	mov	r4, r3
 8012cc6:	f107 0314 	add.w	r3, r7, #20
 8012cca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012cce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8012cd2:	68f8      	ldr	r0, [r7, #12]
 8012cd4:	372c      	adds	r7, #44	; 0x2c
 8012cd6:	46bd      	mov	sp, r7
 8012cd8:	bd90      	pop	{r4, r7, pc}
 8012cda:	bf00      	nop
 8012cdc:	e000ed04 	.word	0xe000ed04

08012ce0 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 8012ce0:	b580      	push	{r7, lr}
 8012ce2:	b082      	sub	sp, #8
 8012ce4:	af00      	add	r7, sp, #0
 8012ce6:	6078      	str	r0, [r7, #4]
 8012ce8:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d101      	bne.n	8012cf4 <osMailFree+0x14>
    return osErrorParameter;
 8012cf0:	2380      	movs	r3, #128	; 0x80
 8012cf2:	e006      	b.n	8012d02 <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	689b      	ldr	r3, [r3, #8]
 8012cf8:	6839      	ldr	r1, [r7, #0]
 8012cfa:	4618      	mov	r0, r3
 8012cfc:	f7ff fe8f 	bl	8012a1e <osPoolFree>
 8012d00:	4603      	mov	r3, r0
}
 8012d02:	4618      	mov	r0, r3
 8012d04:	3708      	adds	r7, #8
 8012d06:	46bd      	mov	sp, r7
 8012d08:	bd80      	pop	{r7, pc}

08012d0a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012d0a:	b480      	push	{r7}
 8012d0c:	b083      	sub	sp, #12
 8012d0e:	af00      	add	r7, sp, #0
 8012d10:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	f103 0208 	add.w	r2, r3, #8
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	f04f 32ff 	mov.w	r2, #4294967295
 8012d22:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	f103 0208 	add.w	r2, r3, #8
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	f103 0208 	add.w	r2, r3, #8
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	2200      	movs	r2, #0
 8012d3c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012d3e:	bf00      	nop
 8012d40:	370c      	adds	r7, #12
 8012d42:	46bd      	mov	sp, r7
 8012d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d48:	4770      	bx	lr

08012d4a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012d4a:	b480      	push	{r7}
 8012d4c:	b083      	sub	sp, #12
 8012d4e:	af00      	add	r7, sp, #0
 8012d50:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	2200      	movs	r2, #0
 8012d56:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012d58:	bf00      	nop
 8012d5a:	370c      	adds	r7, #12
 8012d5c:	46bd      	mov	sp, r7
 8012d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d62:	4770      	bx	lr

08012d64 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012d64:	b480      	push	{r7}
 8012d66:	b085      	sub	sp, #20
 8012d68:	af00      	add	r7, sp, #0
 8012d6a:	6078      	str	r0, [r7, #4]
 8012d6c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	685b      	ldr	r3, [r3, #4]
 8012d72:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012d74:	683b      	ldr	r3, [r7, #0]
 8012d76:	68fa      	ldr	r2, [r7, #12]
 8012d78:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012d7a:	68fb      	ldr	r3, [r7, #12]
 8012d7c:	689a      	ldr	r2, [r3, #8]
 8012d7e:	683b      	ldr	r3, [r7, #0]
 8012d80:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	689b      	ldr	r3, [r3, #8]
 8012d86:	683a      	ldr	r2, [r7, #0]
 8012d88:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	683a      	ldr	r2, [r7, #0]
 8012d8e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012d90:	683b      	ldr	r3, [r7, #0]
 8012d92:	687a      	ldr	r2, [r7, #4]
 8012d94:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	681b      	ldr	r3, [r3, #0]
 8012d9a:	1c5a      	adds	r2, r3, #1
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	601a      	str	r2, [r3, #0]
}
 8012da0:	bf00      	nop
 8012da2:	3714      	adds	r7, #20
 8012da4:	46bd      	mov	sp, r7
 8012da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012daa:	4770      	bx	lr

08012dac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012dac:	b480      	push	{r7}
 8012dae:	b085      	sub	sp, #20
 8012db0:	af00      	add	r7, sp, #0
 8012db2:	6078      	str	r0, [r7, #4]
 8012db4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012db6:	683b      	ldr	r3, [r7, #0]
 8012db8:	681b      	ldr	r3, [r3, #0]
 8012dba:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012dbc:	68bb      	ldr	r3, [r7, #8]
 8012dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012dc2:	d103      	bne.n	8012dcc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	691b      	ldr	r3, [r3, #16]
 8012dc8:	60fb      	str	r3, [r7, #12]
 8012dca:	e00c      	b.n	8012de6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	3308      	adds	r3, #8
 8012dd0:	60fb      	str	r3, [r7, #12]
 8012dd2:	e002      	b.n	8012dda <vListInsert+0x2e>
 8012dd4:	68fb      	ldr	r3, [r7, #12]
 8012dd6:	685b      	ldr	r3, [r3, #4]
 8012dd8:	60fb      	str	r3, [r7, #12]
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	685b      	ldr	r3, [r3, #4]
 8012dde:	681b      	ldr	r3, [r3, #0]
 8012de0:	68ba      	ldr	r2, [r7, #8]
 8012de2:	429a      	cmp	r2, r3
 8012de4:	d2f6      	bcs.n	8012dd4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	685a      	ldr	r2, [r3, #4]
 8012dea:	683b      	ldr	r3, [r7, #0]
 8012dec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012dee:	683b      	ldr	r3, [r7, #0]
 8012df0:	685b      	ldr	r3, [r3, #4]
 8012df2:	683a      	ldr	r2, [r7, #0]
 8012df4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012df6:	683b      	ldr	r3, [r7, #0]
 8012df8:	68fa      	ldr	r2, [r7, #12]
 8012dfa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012dfc:	68fb      	ldr	r3, [r7, #12]
 8012dfe:	683a      	ldr	r2, [r7, #0]
 8012e00:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012e02:	683b      	ldr	r3, [r7, #0]
 8012e04:	687a      	ldr	r2, [r7, #4]
 8012e06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	681b      	ldr	r3, [r3, #0]
 8012e0c:	1c5a      	adds	r2, r3, #1
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	601a      	str	r2, [r3, #0]
}
 8012e12:	bf00      	nop
 8012e14:	3714      	adds	r7, #20
 8012e16:	46bd      	mov	sp, r7
 8012e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e1c:	4770      	bx	lr

08012e1e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012e1e:	b480      	push	{r7}
 8012e20:	b085      	sub	sp, #20
 8012e22:	af00      	add	r7, sp, #0
 8012e24:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	691b      	ldr	r3, [r3, #16]
 8012e2a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	685b      	ldr	r3, [r3, #4]
 8012e30:	687a      	ldr	r2, [r7, #4]
 8012e32:	6892      	ldr	r2, [r2, #8]
 8012e34:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	689b      	ldr	r3, [r3, #8]
 8012e3a:	687a      	ldr	r2, [r7, #4]
 8012e3c:	6852      	ldr	r2, [r2, #4]
 8012e3e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012e40:	68fb      	ldr	r3, [r7, #12]
 8012e42:	685b      	ldr	r3, [r3, #4]
 8012e44:	687a      	ldr	r2, [r7, #4]
 8012e46:	429a      	cmp	r2, r3
 8012e48:	d103      	bne.n	8012e52 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	689a      	ldr	r2, [r3, #8]
 8012e4e:	68fb      	ldr	r3, [r7, #12]
 8012e50:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	2200      	movs	r2, #0
 8012e56:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012e58:	68fb      	ldr	r3, [r7, #12]
 8012e5a:	681b      	ldr	r3, [r3, #0]
 8012e5c:	1e5a      	subs	r2, r3, #1
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012e62:	68fb      	ldr	r3, [r7, #12]
 8012e64:	681b      	ldr	r3, [r3, #0]
}
 8012e66:	4618      	mov	r0, r3
 8012e68:	3714      	adds	r7, #20
 8012e6a:	46bd      	mov	sp, r7
 8012e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e70:	4770      	bx	lr
	...

08012e74 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012e74:	b580      	push	{r7, lr}
 8012e76:	b084      	sub	sp, #16
 8012e78:	af00      	add	r7, sp, #0
 8012e7a:	6078      	str	r0, [r7, #4]
 8012e7c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012e82:	68fb      	ldr	r3, [r7, #12]
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d109      	bne.n	8012e9c <xQueueGenericReset+0x28>
	__asm volatile
 8012e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e8c:	f383 8811 	msr	BASEPRI, r3
 8012e90:	f3bf 8f6f 	isb	sy
 8012e94:	f3bf 8f4f 	dsb	sy
 8012e98:	60bb      	str	r3, [r7, #8]
 8012e9a:	e7fe      	b.n	8012e9a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8012e9c:	f001 ff2e 	bl	8014cfc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	681a      	ldr	r2, [r3, #0]
 8012ea4:	68fb      	ldr	r3, [r7, #12]
 8012ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012ea8:	68f9      	ldr	r1, [r7, #12]
 8012eaa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012eac:	fb01 f303 	mul.w	r3, r1, r3
 8012eb0:	441a      	add	r2, r3
 8012eb2:	68fb      	ldr	r3, [r7, #12]
 8012eb4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012eb6:	68fb      	ldr	r3, [r7, #12]
 8012eb8:	2200      	movs	r2, #0
 8012eba:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	681a      	ldr	r2, [r3, #0]
 8012ec0:	68fb      	ldr	r3, [r7, #12]
 8012ec2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012ec4:	68fb      	ldr	r3, [r7, #12]
 8012ec6:	681a      	ldr	r2, [r3, #0]
 8012ec8:	68fb      	ldr	r3, [r7, #12]
 8012eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012ecc:	3b01      	subs	r3, #1
 8012ece:	68f9      	ldr	r1, [r7, #12]
 8012ed0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012ed2:	fb01 f303 	mul.w	r3, r1, r3
 8012ed6:	441a      	add	r2, r3
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	22ff      	movs	r2, #255	; 0xff
 8012ee0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	22ff      	movs	r2, #255	; 0xff
 8012ee8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8012eec:	683b      	ldr	r3, [r7, #0]
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d114      	bne.n	8012f1c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012ef2:	68fb      	ldr	r3, [r7, #12]
 8012ef4:	691b      	ldr	r3, [r3, #16]
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d01a      	beq.n	8012f30 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012efa:	68fb      	ldr	r3, [r7, #12]
 8012efc:	3310      	adds	r3, #16
 8012efe:	4618      	mov	r0, r3
 8012f00:	f001 f936 	bl	8014170 <xTaskRemoveFromEventList>
 8012f04:	4603      	mov	r3, r0
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d012      	beq.n	8012f30 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012f0a:	4b0d      	ldr	r3, [pc, #52]	; (8012f40 <xQueueGenericReset+0xcc>)
 8012f0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f10:	601a      	str	r2, [r3, #0]
 8012f12:	f3bf 8f4f 	dsb	sy
 8012f16:	f3bf 8f6f 	isb	sy
 8012f1a:	e009      	b.n	8012f30 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012f1c:	68fb      	ldr	r3, [r7, #12]
 8012f1e:	3310      	adds	r3, #16
 8012f20:	4618      	mov	r0, r3
 8012f22:	f7ff fef2 	bl	8012d0a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012f26:	68fb      	ldr	r3, [r7, #12]
 8012f28:	3324      	adds	r3, #36	; 0x24
 8012f2a:	4618      	mov	r0, r3
 8012f2c:	f7ff feed 	bl	8012d0a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8012f30:	f001 ff12 	bl	8014d58 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8012f34:	2301      	movs	r3, #1
}
 8012f36:	4618      	mov	r0, r3
 8012f38:	3710      	adds	r7, #16
 8012f3a:	46bd      	mov	sp, r7
 8012f3c:	bd80      	pop	{r7, pc}
 8012f3e:	bf00      	nop
 8012f40:	e000ed04 	.word	0xe000ed04

08012f44 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8012f44:	b580      	push	{r7, lr}
 8012f46:	b08e      	sub	sp, #56	; 0x38
 8012f48:	af02      	add	r7, sp, #8
 8012f4a:	60f8      	str	r0, [r7, #12]
 8012f4c:	60b9      	str	r1, [r7, #8]
 8012f4e:	607a      	str	r2, [r7, #4]
 8012f50:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d109      	bne.n	8012f6c <xQueueGenericCreateStatic+0x28>
 8012f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f5c:	f383 8811 	msr	BASEPRI, r3
 8012f60:	f3bf 8f6f 	isb	sy
 8012f64:	f3bf 8f4f 	dsb	sy
 8012f68:	62bb      	str	r3, [r7, #40]	; 0x28
 8012f6a:	e7fe      	b.n	8012f6a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8012f6c:	683b      	ldr	r3, [r7, #0]
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d109      	bne.n	8012f86 <xQueueGenericCreateStatic+0x42>
 8012f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f76:	f383 8811 	msr	BASEPRI, r3
 8012f7a:	f3bf 8f6f 	isb	sy
 8012f7e:	f3bf 8f4f 	dsb	sy
 8012f82:	627b      	str	r3, [r7, #36]	; 0x24
 8012f84:	e7fe      	b.n	8012f84 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d002      	beq.n	8012f92 <xQueueGenericCreateStatic+0x4e>
 8012f8c:	68bb      	ldr	r3, [r7, #8]
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d001      	beq.n	8012f96 <xQueueGenericCreateStatic+0x52>
 8012f92:	2301      	movs	r3, #1
 8012f94:	e000      	b.n	8012f98 <xQueueGenericCreateStatic+0x54>
 8012f96:	2300      	movs	r3, #0
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d109      	bne.n	8012fb0 <xQueueGenericCreateStatic+0x6c>
 8012f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fa0:	f383 8811 	msr	BASEPRI, r3
 8012fa4:	f3bf 8f6f 	isb	sy
 8012fa8:	f3bf 8f4f 	dsb	sy
 8012fac:	623b      	str	r3, [r7, #32]
 8012fae:	e7fe      	b.n	8012fae <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	d102      	bne.n	8012fbc <xQueueGenericCreateStatic+0x78>
 8012fb6:	68bb      	ldr	r3, [r7, #8]
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d101      	bne.n	8012fc0 <xQueueGenericCreateStatic+0x7c>
 8012fbc:	2301      	movs	r3, #1
 8012fbe:	e000      	b.n	8012fc2 <xQueueGenericCreateStatic+0x7e>
 8012fc0:	2300      	movs	r3, #0
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d109      	bne.n	8012fda <xQueueGenericCreateStatic+0x96>
 8012fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fca:	f383 8811 	msr	BASEPRI, r3
 8012fce:	f3bf 8f6f 	isb	sy
 8012fd2:	f3bf 8f4f 	dsb	sy
 8012fd6:	61fb      	str	r3, [r7, #28]
 8012fd8:	e7fe      	b.n	8012fd8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012fda:	2348      	movs	r3, #72	; 0x48
 8012fdc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012fde:	697b      	ldr	r3, [r7, #20]
 8012fe0:	2b48      	cmp	r3, #72	; 0x48
 8012fe2:	d009      	beq.n	8012ff8 <xQueueGenericCreateStatic+0xb4>
 8012fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fe8:	f383 8811 	msr	BASEPRI, r3
 8012fec:	f3bf 8f6f 	isb	sy
 8012ff0:	f3bf 8f4f 	dsb	sy
 8012ff4:	61bb      	str	r3, [r7, #24]
 8012ff6:	e7fe      	b.n	8012ff6 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012ff8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012ffa:	683b      	ldr	r3, [r7, #0]
 8012ffc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8012ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013000:	2b00      	cmp	r3, #0
 8013002:	d00d      	beq.n	8013020 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8013004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013006:	2201      	movs	r2, #1
 8013008:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801300c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8013010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013012:	9300      	str	r3, [sp, #0]
 8013014:	4613      	mov	r3, r2
 8013016:	687a      	ldr	r2, [r7, #4]
 8013018:	68b9      	ldr	r1, [r7, #8]
 801301a:	68f8      	ldr	r0, [r7, #12]
 801301c:	f000 f844 	bl	80130a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8013022:	4618      	mov	r0, r3
 8013024:	3730      	adds	r7, #48	; 0x30
 8013026:	46bd      	mov	sp, r7
 8013028:	bd80      	pop	{r7, pc}

0801302a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801302a:	b580      	push	{r7, lr}
 801302c:	b08a      	sub	sp, #40	; 0x28
 801302e:	af02      	add	r7, sp, #8
 8013030:	60f8      	str	r0, [r7, #12]
 8013032:	60b9      	str	r1, [r7, #8]
 8013034:	4613      	mov	r3, r2
 8013036:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	2b00      	cmp	r3, #0
 801303c:	d109      	bne.n	8013052 <xQueueGenericCreate+0x28>
 801303e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013042:	f383 8811 	msr	BASEPRI, r3
 8013046:	f3bf 8f6f 	isb	sy
 801304a:	f3bf 8f4f 	dsb	sy
 801304e:	613b      	str	r3, [r7, #16]
 8013050:	e7fe      	b.n	8013050 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8013052:	68bb      	ldr	r3, [r7, #8]
 8013054:	2b00      	cmp	r3, #0
 8013056:	d102      	bne.n	801305e <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8013058:	2300      	movs	r3, #0
 801305a:	61fb      	str	r3, [r7, #28]
 801305c:	e004      	b.n	8013068 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801305e:	68fb      	ldr	r3, [r7, #12]
 8013060:	68ba      	ldr	r2, [r7, #8]
 8013062:	fb02 f303 	mul.w	r3, r2, r3
 8013066:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8013068:	69fb      	ldr	r3, [r7, #28]
 801306a:	3348      	adds	r3, #72	; 0x48
 801306c:	4618      	mov	r0, r3
 801306e:	f001 ff5f 	bl	8014f30 <pvPortMalloc>
 8013072:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8013074:	69bb      	ldr	r3, [r7, #24]
 8013076:	2b00      	cmp	r3, #0
 8013078:	d011      	beq.n	801309e <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801307a:	69bb      	ldr	r3, [r7, #24]
 801307c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801307e:	697b      	ldr	r3, [r7, #20]
 8013080:	3348      	adds	r3, #72	; 0x48
 8013082:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8013084:	69bb      	ldr	r3, [r7, #24]
 8013086:	2200      	movs	r2, #0
 8013088:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801308c:	79fa      	ldrb	r2, [r7, #7]
 801308e:	69bb      	ldr	r3, [r7, #24]
 8013090:	9300      	str	r3, [sp, #0]
 8013092:	4613      	mov	r3, r2
 8013094:	697a      	ldr	r2, [r7, #20]
 8013096:	68b9      	ldr	r1, [r7, #8]
 8013098:	68f8      	ldr	r0, [r7, #12]
 801309a:	f000 f805 	bl	80130a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801309e:	69bb      	ldr	r3, [r7, #24]
	}
 80130a0:	4618      	mov	r0, r3
 80130a2:	3720      	adds	r7, #32
 80130a4:	46bd      	mov	sp, r7
 80130a6:	bd80      	pop	{r7, pc}

080130a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80130a8:	b580      	push	{r7, lr}
 80130aa:	b084      	sub	sp, #16
 80130ac:	af00      	add	r7, sp, #0
 80130ae:	60f8      	str	r0, [r7, #12]
 80130b0:	60b9      	str	r1, [r7, #8]
 80130b2:	607a      	str	r2, [r7, #4]
 80130b4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80130b6:	68bb      	ldr	r3, [r7, #8]
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d103      	bne.n	80130c4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80130bc:	69bb      	ldr	r3, [r7, #24]
 80130be:	69ba      	ldr	r2, [r7, #24]
 80130c0:	601a      	str	r2, [r3, #0]
 80130c2:	e002      	b.n	80130ca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80130c4:	69bb      	ldr	r3, [r7, #24]
 80130c6:	687a      	ldr	r2, [r7, #4]
 80130c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80130ca:	69bb      	ldr	r3, [r7, #24]
 80130cc:	68fa      	ldr	r2, [r7, #12]
 80130ce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80130d0:	69bb      	ldr	r3, [r7, #24]
 80130d2:	68ba      	ldr	r2, [r7, #8]
 80130d4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80130d6:	2101      	movs	r1, #1
 80130d8:	69b8      	ldr	r0, [r7, #24]
 80130da:	f7ff fecb 	bl	8012e74 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80130de:	bf00      	nop
 80130e0:	3710      	adds	r7, #16
 80130e2:	46bd      	mov	sp, r7
 80130e4:	bd80      	pop	{r7, pc}

080130e6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80130e6:	b580      	push	{r7, lr}
 80130e8:	b082      	sub	sp, #8
 80130ea:	af00      	add	r7, sp, #0
 80130ec:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d00e      	beq.n	8013112 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	2200      	movs	r2, #0
 80130f8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	2200      	movs	r2, #0
 80130fe:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	2200      	movs	r2, #0
 8013104:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8013106:	2300      	movs	r3, #0
 8013108:	2200      	movs	r2, #0
 801310a:	2100      	movs	r1, #0
 801310c:	6878      	ldr	r0, [r7, #4]
 801310e:	f000 f837 	bl	8013180 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8013112:	bf00      	nop
 8013114:	3708      	adds	r7, #8
 8013116:	46bd      	mov	sp, r7
 8013118:	bd80      	pop	{r7, pc}

0801311a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 801311a:	b580      	push	{r7, lr}
 801311c:	b086      	sub	sp, #24
 801311e:	af00      	add	r7, sp, #0
 8013120:	4603      	mov	r3, r0
 8013122:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8013124:	2301      	movs	r3, #1
 8013126:	617b      	str	r3, [r7, #20]
 8013128:	2300      	movs	r3, #0
 801312a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 801312c:	79fb      	ldrb	r3, [r7, #7]
 801312e:	461a      	mov	r2, r3
 8013130:	6939      	ldr	r1, [r7, #16]
 8013132:	6978      	ldr	r0, [r7, #20]
 8013134:	f7ff ff79 	bl	801302a <xQueueGenericCreate>
 8013138:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801313a:	68f8      	ldr	r0, [r7, #12]
 801313c:	f7ff ffd3 	bl	80130e6 <prvInitialiseMutex>

		return xNewQueue;
 8013140:	68fb      	ldr	r3, [r7, #12]
	}
 8013142:	4618      	mov	r0, r3
 8013144:	3718      	adds	r7, #24
 8013146:	46bd      	mov	sp, r7
 8013148:	bd80      	pop	{r7, pc}

0801314a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 801314a:	b580      	push	{r7, lr}
 801314c:	b088      	sub	sp, #32
 801314e:	af02      	add	r7, sp, #8
 8013150:	4603      	mov	r3, r0
 8013152:	6039      	str	r1, [r7, #0]
 8013154:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8013156:	2301      	movs	r3, #1
 8013158:	617b      	str	r3, [r7, #20]
 801315a:	2300      	movs	r3, #0
 801315c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 801315e:	79fb      	ldrb	r3, [r7, #7]
 8013160:	9300      	str	r3, [sp, #0]
 8013162:	683b      	ldr	r3, [r7, #0]
 8013164:	2200      	movs	r2, #0
 8013166:	6939      	ldr	r1, [r7, #16]
 8013168:	6978      	ldr	r0, [r7, #20]
 801316a:	f7ff feeb 	bl	8012f44 <xQueueGenericCreateStatic>
 801316e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8013170:	68f8      	ldr	r0, [r7, #12]
 8013172:	f7ff ffb8 	bl	80130e6 <prvInitialiseMutex>

		return xNewQueue;
 8013176:	68fb      	ldr	r3, [r7, #12]
	}
 8013178:	4618      	mov	r0, r3
 801317a:	3718      	adds	r7, #24
 801317c:	46bd      	mov	sp, r7
 801317e:	bd80      	pop	{r7, pc}

08013180 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8013180:	b580      	push	{r7, lr}
 8013182:	b08e      	sub	sp, #56	; 0x38
 8013184:	af00      	add	r7, sp, #0
 8013186:	60f8      	str	r0, [r7, #12]
 8013188:	60b9      	str	r1, [r7, #8]
 801318a:	607a      	str	r2, [r7, #4]
 801318c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801318e:	2300      	movs	r3, #0
 8013190:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013198:	2b00      	cmp	r3, #0
 801319a:	d109      	bne.n	80131b0 <xQueueGenericSend+0x30>
 801319c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131a0:	f383 8811 	msr	BASEPRI, r3
 80131a4:	f3bf 8f6f 	isb	sy
 80131a8:	f3bf 8f4f 	dsb	sy
 80131ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80131ae:	e7fe      	b.n	80131ae <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80131b0:	68bb      	ldr	r3, [r7, #8]
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d103      	bne.n	80131be <xQueueGenericSend+0x3e>
 80131b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d101      	bne.n	80131c2 <xQueueGenericSend+0x42>
 80131be:	2301      	movs	r3, #1
 80131c0:	e000      	b.n	80131c4 <xQueueGenericSend+0x44>
 80131c2:	2300      	movs	r3, #0
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d109      	bne.n	80131dc <xQueueGenericSend+0x5c>
 80131c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131cc:	f383 8811 	msr	BASEPRI, r3
 80131d0:	f3bf 8f6f 	isb	sy
 80131d4:	f3bf 8f4f 	dsb	sy
 80131d8:	627b      	str	r3, [r7, #36]	; 0x24
 80131da:	e7fe      	b.n	80131da <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80131dc:	683b      	ldr	r3, [r7, #0]
 80131de:	2b02      	cmp	r3, #2
 80131e0:	d103      	bne.n	80131ea <xQueueGenericSend+0x6a>
 80131e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80131e6:	2b01      	cmp	r3, #1
 80131e8:	d101      	bne.n	80131ee <xQueueGenericSend+0x6e>
 80131ea:	2301      	movs	r3, #1
 80131ec:	e000      	b.n	80131f0 <xQueueGenericSend+0x70>
 80131ee:	2300      	movs	r3, #0
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d109      	bne.n	8013208 <xQueueGenericSend+0x88>
 80131f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131f8:	f383 8811 	msr	BASEPRI, r3
 80131fc:	f3bf 8f6f 	isb	sy
 8013200:	f3bf 8f4f 	dsb	sy
 8013204:	623b      	str	r3, [r7, #32]
 8013206:	e7fe      	b.n	8013206 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013208:	f001 f968 	bl	80144dc <xTaskGetSchedulerState>
 801320c:	4603      	mov	r3, r0
 801320e:	2b00      	cmp	r3, #0
 8013210:	d102      	bne.n	8013218 <xQueueGenericSend+0x98>
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	2b00      	cmp	r3, #0
 8013216:	d101      	bne.n	801321c <xQueueGenericSend+0x9c>
 8013218:	2301      	movs	r3, #1
 801321a:	e000      	b.n	801321e <xQueueGenericSend+0x9e>
 801321c:	2300      	movs	r3, #0
 801321e:	2b00      	cmp	r3, #0
 8013220:	d109      	bne.n	8013236 <xQueueGenericSend+0xb6>
 8013222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013226:	f383 8811 	msr	BASEPRI, r3
 801322a:	f3bf 8f6f 	isb	sy
 801322e:	f3bf 8f4f 	dsb	sy
 8013232:	61fb      	str	r3, [r7, #28]
 8013234:	e7fe      	b.n	8013234 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013236:	f001 fd61 	bl	8014cfc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801323a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801323c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801323e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013242:	429a      	cmp	r2, r3
 8013244:	d302      	bcc.n	801324c <xQueueGenericSend+0xcc>
 8013246:	683b      	ldr	r3, [r7, #0]
 8013248:	2b02      	cmp	r3, #2
 801324a:	d129      	bne.n	80132a0 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801324c:	683a      	ldr	r2, [r7, #0]
 801324e:	68b9      	ldr	r1, [r7, #8]
 8013250:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013252:	f000 fa7c 	bl	801374e <prvCopyDataToQueue>
 8013256:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801325a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801325c:	2b00      	cmp	r3, #0
 801325e:	d010      	beq.n	8013282 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013262:	3324      	adds	r3, #36	; 0x24
 8013264:	4618      	mov	r0, r3
 8013266:	f000 ff83 	bl	8014170 <xTaskRemoveFromEventList>
 801326a:	4603      	mov	r3, r0
 801326c:	2b00      	cmp	r3, #0
 801326e:	d013      	beq.n	8013298 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8013270:	4b3f      	ldr	r3, [pc, #252]	; (8013370 <xQueueGenericSend+0x1f0>)
 8013272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013276:	601a      	str	r2, [r3, #0]
 8013278:	f3bf 8f4f 	dsb	sy
 801327c:	f3bf 8f6f 	isb	sy
 8013280:	e00a      	b.n	8013298 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8013282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013284:	2b00      	cmp	r3, #0
 8013286:	d007      	beq.n	8013298 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8013288:	4b39      	ldr	r3, [pc, #228]	; (8013370 <xQueueGenericSend+0x1f0>)
 801328a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801328e:	601a      	str	r2, [r3, #0]
 8013290:	f3bf 8f4f 	dsb	sy
 8013294:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8013298:	f001 fd5e 	bl	8014d58 <vPortExitCritical>
				return pdPASS;
 801329c:	2301      	movs	r3, #1
 801329e:	e063      	b.n	8013368 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d103      	bne.n	80132ae <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80132a6:	f001 fd57 	bl	8014d58 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80132aa:	2300      	movs	r3, #0
 80132ac:	e05c      	b.n	8013368 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80132ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d106      	bne.n	80132c2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80132b4:	f107 0314 	add.w	r3, r7, #20
 80132b8:	4618      	mov	r0, r3
 80132ba:	f000 ffbb 	bl	8014234 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80132be:	2301      	movs	r3, #1
 80132c0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80132c2:	f001 fd49 	bl	8014d58 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80132c6:	f000 fd73 	bl	8013db0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80132ca:	f001 fd17 	bl	8014cfc <vPortEnterCritical>
 80132ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80132d4:	b25b      	sxtb	r3, r3
 80132d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132da:	d103      	bne.n	80132e4 <xQueueGenericSend+0x164>
 80132dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132de:	2200      	movs	r2, #0
 80132e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80132e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80132ea:	b25b      	sxtb	r3, r3
 80132ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132f0:	d103      	bne.n	80132fa <xQueueGenericSend+0x17a>
 80132f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132f4:	2200      	movs	r2, #0
 80132f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80132fa:	f001 fd2d 	bl	8014d58 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80132fe:	1d3a      	adds	r2, r7, #4
 8013300:	f107 0314 	add.w	r3, r7, #20
 8013304:	4611      	mov	r1, r2
 8013306:	4618      	mov	r0, r3
 8013308:	f000 ffaa 	bl	8014260 <xTaskCheckForTimeOut>
 801330c:	4603      	mov	r3, r0
 801330e:	2b00      	cmp	r3, #0
 8013310:	d124      	bne.n	801335c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8013312:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013314:	f000 fb13 	bl	801393e <prvIsQueueFull>
 8013318:	4603      	mov	r3, r0
 801331a:	2b00      	cmp	r3, #0
 801331c:	d018      	beq.n	8013350 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801331e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013320:	3310      	adds	r3, #16
 8013322:	687a      	ldr	r2, [r7, #4]
 8013324:	4611      	mov	r1, r2
 8013326:	4618      	mov	r0, r3
 8013328:	f000 fefe 	bl	8014128 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801332c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801332e:	f000 fa9e 	bl	801386e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8013332:	f000 fd4b 	bl	8013dcc <xTaskResumeAll>
 8013336:	4603      	mov	r3, r0
 8013338:	2b00      	cmp	r3, #0
 801333a:	f47f af7c 	bne.w	8013236 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 801333e:	4b0c      	ldr	r3, [pc, #48]	; (8013370 <xQueueGenericSend+0x1f0>)
 8013340:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013344:	601a      	str	r2, [r3, #0]
 8013346:	f3bf 8f4f 	dsb	sy
 801334a:	f3bf 8f6f 	isb	sy
 801334e:	e772      	b.n	8013236 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8013350:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013352:	f000 fa8c 	bl	801386e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013356:	f000 fd39 	bl	8013dcc <xTaskResumeAll>
 801335a:	e76c      	b.n	8013236 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801335c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801335e:	f000 fa86 	bl	801386e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013362:	f000 fd33 	bl	8013dcc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8013366:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8013368:	4618      	mov	r0, r3
 801336a:	3738      	adds	r7, #56	; 0x38
 801336c:	46bd      	mov	sp, r7
 801336e:	bd80      	pop	{r7, pc}
 8013370:	e000ed04 	.word	0xe000ed04

08013374 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8013374:	b580      	push	{r7, lr}
 8013376:	b08e      	sub	sp, #56	; 0x38
 8013378:	af00      	add	r7, sp, #0
 801337a:	60f8      	str	r0, [r7, #12]
 801337c:	60b9      	str	r1, [r7, #8]
 801337e:	607a      	str	r2, [r7, #4]
 8013380:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013388:	2b00      	cmp	r3, #0
 801338a:	d109      	bne.n	80133a0 <xQueueGenericSendFromISR+0x2c>
 801338c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013390:	f383 8811 	msr	BASEPRI, r3
 8013394:	f3bf 8f6f 	isb	sy
 8013398:	f3bf 8f4f 	dsb	sy
 801339c:	627b      	str	r3, [r7, #36]	; 0x24
 801339e:	e7fe      	b.n	801339e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80133a0:	68bb      	ldr	r3, [r7, #8]
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	d103      	bne.n	80133ae <xQueueGenericSendFromISR+0x3a>
 80133a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d101      	bne.n	80133b2 <xQueueGenericSendFromISR+0x3e>
 80133ae:	2301      	movs	r3, #1
 80133b0:	e000      	b.n	80133b4 <xQueueGenericSendFromISR+0x40>
 80133b2:	2300      	movs	r3, #0
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d109      	bne.n	80133cc <xQueueGenericSendFromISR+0x58>
 80133b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133bc:	f383 8811 	msr	BASEPRI, r3
 80133c0:	f3bf 8f6f 	isb	sy
 80133c4:	f3bf 8f4f 	dsb	sy
 80133c8:	623b      	str	r3, [r7, #32]
 80133ca:	e7fe      	b.n	80133ca <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80133cc:	683b      	ldr	r3, [r7, #0]
 80133ce:	2b02      	cmp	r3, #2
 80133d0:	d103      	bne.n	80133da <xQueueGenericSendFromISR+0x66>
 80133d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80133d6:	2b01      	cmp	r3, #1
 80133d8:	d101      	bne.n	80133de <xQueueGenericSendFromISR+0x6a>
 80133da:	2301      	movs	r3, #1
 80133dc:	e000      	b.n	80133e0 <xQueueGenericSendFromISR+0x6c>
 80133de:	2300      	movs	r3, #0
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d109      	bne.n	80133f8 <xQueueGenericSendFromISR+0x84>
 80133e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133e8:	f383 8811 	msr	BASEPRI, r3
 80133ec:	f3bf 8f6f 	isb	sy
 80133f0:	f3bf 8f4f 	dsb	sy
 80133f4:	61fb      	str	r3, [r7, #28]
 80133f6:	e7fe      	b.n	80133f6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80133f8:	f001 fd5c 	bl	8014eb4 <vPortValidateInterruptPriority>
	__asm volatile
 80133fc:	f3ef 8211 	mrs	r2, BASEPRI
 8013400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013404:	f383 8811 	msr	BASEPRI, r3
 8013408:	f3bf 8f6f 	isb	sy
 801340c:	f3bf 8f4f 	dsb	sy
 8013410:	61ba      	str	r2, [r7, #24]
 8013412:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013414:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013416:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801341a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801341c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801341e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013420:	429a      	cmp	r2, r3
 8013422:	d302      	bcc.n	801342a <xQueueGenericSendFromISR+0xb6>
 8013424:	683b      	ldr	r3, [r7, #0]
 8013426:	2b02      	cmp	r3, #2
 8013428:	d12c      	bne.n	8013484 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801342a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801342c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013430:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013434:	683a      	ldr	r2, [r7, #0]
 8013436:	68b9      	ldr	r1, [r7, #8]
 8013438:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801343a:	f000 f988 	bl	801374e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801343e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8013442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013446:	d112      	bne.n	801346e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801344a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801344c:	2b00      	cmp	r3, #0
 801344e:	d016      	beq.n	801347e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013452:	3324      	adds	r3, #36	; 0x24
 8013454:	4618      	mov	r0, r3
 8013456:	f000 fe8b 	bl	8014170 <xTaskRemoveFromEventList>
 801345a:	4603      	mov	r3, r0
 801345c:	2b00      	cmp	r3, #0
 801345e:	d00e      	beq.n	801347e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	2b00      	cmp	r3, #0
 8013464:	d00b      	beq.n	801347e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	2201      	movs	r2, #1
 801346a:	601a      	str	r2, [r3, #0]
 801346c:	e007      	b.n	801347e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801346e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8013472:	3301      	adds	r3, #1
 8013474:	b2db      	uxtb	r3, r3
 8013476:	b25a      	sxtb	r2, r3
 8013478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801347a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801347e:	2301      	movs	r3, #1
 8013480:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8013482:	e001      	b.n	8013488 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013484:	2300      	movs	r3, #0
 8013486:	637b      	str	r3, [r7, #52]	; 0x34
 8013488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801348a:	613b      	str	r3, [r7, #16]
	__asm volatile
 801348c:	693b      	ldr	r3, [r7, #16]
 801348e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013494:	4618      	mov	r0, r3
 8013496:	3738      	adds	r7, #56	; 0x38
 8013498:	46bd      	mov	sp, r7
 801349a:	bd80      	pop	{r7, pc}

0801349c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801349c:	b580      	push	{r7, lr}
 801349e:	b08c      	sub	sp, #48	; 0x30
 80134a0:	af00      	add	r7, sp, #0
 80134a2:	60f8      	str	r0, [r7, #12]
 80134a4:	60b9      	str	r1, [r7, #8]
 80134a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80134a8:	2300      	movs	r3, #0
 80134aa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80134ac:	68fb      	ldr	r3, [r7, #12]
 80134ae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80134b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d109      	bne.n	80134ca <xQueueReceive+0x2e>
	__asm volatile
 80134b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134ba:	f383 8811 	msr	BASEPRI, r3
 80134be:	f3bf 8f6f 	isb	sy
 80134c2:	f3bf 8f4f 	dsb	sy
 80134c6:	623b      	str	r3, [r7, #32]
 80134c8:	e7fe      	b.n	80134c8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80134ca:	68bb      	ldr	r3, [r7, #8]
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d103      	bne.n	80134d8 <xQueueReceive+0x3c>
 80134d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d101      	bne.n	80134dc <xQueueReceive+0x40>
 80134d8:	2301      	movs	r3, #1
 80134da:	e000      	b.n	80134de <xQueueReceive+0x42>
 80134dc:	2300      	movs	r3, #0
 80134de:	2b00      	cmp	r3, #0
 80134e0:	d109      	bne.n	80134f6 <xQueueReceive+0x5a>
 80134e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134e6:	f383 8811 	msr	BASEPRI, r3
 80134ea:	f3bf 8f6f 	isb	sy
 80134ee:	f3bf 8f4f 	dsb	sy
 80134f2:	61fb      	str	r3, [r7, #28]
 80134f4:	e7fe      	b.n	80134f4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80134f6:	f000 fff1 	bl	80144dc <xTaskGetSchedulerState>
 80134fa:	4603      	mov	r3, r0
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d102      	bne.n	8013506 <xQueueReceive+0x6a>
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	2b00      	cmp	r3, #0
 8013504:	d101      	bne.n	801350a <xQueueReceive+0x6e>
 8013506:	2301      	movs	r3, #1
 8013508:	e000      	b.n	801350c <xQueueReceive+0x70>
 801350a:	2300      	movs	r3, #0
 801350c:	2b00      	cmp	r3, #0
 801350e:	d109      	bne.n	8013524 <xQueueReceive+0x88>
 8013510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013514:	f383 8811 	msr	BASEPRI, r3
 8013518:	f3bf 8f6f 	isb	sy
 801351c:	f3bf 8f4f 	dsb	sy
 8013520:	61bb      	str	r3, [r7, #24]
 8013522:	e7fe      	b.n	8013522 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013524:	f001 fbea 	bl	8014cfc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801352a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801352c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801352e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013530:	2b00      	cmp	r3, #0
 8013532:	d01f      	beq.n	8013574 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013534:	68b9      	ldr	r1, [r7, #8]
 8013536:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013538:	f000 f973 	bl	8013822 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801353c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801353e:	1e5a      	subs	r2, r3, #1
 8013540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013542:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013546:	691b      	ldr	r3, [r3, #16]
 8013548:	2b00      	cmp	r3, #0
 801354a:	d00f      	beq.n	801356c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801354c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801354e:	3310      	adds	r3, #16
 8013550:	4618      	mov	r0, r3
 8013552:	f000 fe0d 	bl	8014170 <xTaskRemoveFromEventList>
 8013556:	4603      	mov	r3, r0
 8013558:	2b00      	cmp	r3, #0
 801355a:	d007      	beq.n	801356c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801355c:	4b3c      	ldr	r3, [pc, #240]	; (8013650 <xQueueReceive+0x1b4>)
 801355e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013562:	601a      	str	r2, [r3, #0]
 8013564:	f3bf 8f4f 	dsb	sy
 8013568:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801356c:	f001 fbf4 	bl	8014d58 <vPortExitCritical>
				return pdPASS;
 8013570:	2301      	movs	r3, #1
 8013572:	e069      	b.n	8013648 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	2b00      	cmp	r3, #0
 8013578:	d103      	bne.n	8013582 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801357a:	f001 fbed 	bl	8014d58 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801357e:	2300      	movs	r3, #0
 8013580:	e062      	b.n	8013648 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013584:	2b00      	cmp	r3, #0
 8013586:	d106      	bne.n	8013596 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013588:	f107 0310 	add.w	r3, r7, #16
 801358c:	4618      	mov	r0, r3
 801358e:	f000 fe51 	bl	8014234 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013592:	2301      	movs	r3, #1
 8013594:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013596:	f001 fbdf 	bl	8014d58 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801359a:	f000 fc09 	bl	8013db0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801359e:	f001 fbad 	bl	8014cfc <vPortEnterCritical>
 80135a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80135a8:	b25b      	sxtb	r3, r3
 80135aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135ae:	d103      	bne.n	80135b8 <xQueueReceive+0x11c>
 80135b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135b2:	2200      	movs	r2, #0
 80135b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80135b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80135be:	b25b      	sxtb	r3, r3
 80135c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135c4:	d103      	bne.n	80135ce <xQueueReceive+0x132>
 80135c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135c8:	2200      	movs	r2, #0
 80135ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80135ce:	f001 fbc3 	bl	8014d58 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80135d2:	1d3a      	adds	r2, r7, #4
 80135d4:	f107 0310 	add.w	r3, r7, #16
 80135d8:	4611      	mov	r1, r2
 80135da:	4618      	mov	r0, r3
 80135dc:	f000 fe40 	bl	8014260 <xTaskCheckForTimeOut>
 80135e0:	4603      	mov	r3, r0
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d123      	bne.n	801362e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80135e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80135e8:	f000 f993 	bl	8013912 <prvIsQueueEmpty>
 80135ec:	4603      	mov	r3, r0
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	d017      	beq.n	8013622 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80135f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135f4:	3324      	adds	r3, #36	; 0x24
 80135f6:	687a      	ldr	r2, [r7, #4]
 80135f8:	4611      	mov	r1, r2
 80135fa:	4618      	mov	r0, r3
 80135fc:	f000 fd94 	bl	8014128 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013600:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013602:	f000 f934 	bl	801386e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013606:	f000 fbe1 	bl	8013dcc <xTaskResumeAll>
 801360a:	4603      	mov	r3, r0
 801360c:	2b00      	cmp	r3, #0
 801360e:	d189      	bne.n	8013524 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8013610:	4b0f      	ldr	r3, [pc, #60]	; (8013650 <xQueueReceive+0x1b4>)
 8013612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013616:	601a      	str	r2, [r3, #0]
 8013618:	f3bf 8f4f 	dsb	sy
 801361c:	f3bf 8f6f 	isb	sy
 8013620:	e780      	b.n	8013524 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013622:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013624:	f000 f923 	bl	801386e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013628:	f000 fbd0 	bl	8013dcc <xTaskResumeAll>
 801362c:	e77a      	b.n	8013524 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801362e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013630:	f000 f91d 	bl	801386e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013634:	f000 fbca 	bl	8013dcc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013638:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801363a:	f000 f96a 	bl	8013912 <prvIsQueueEmpty>
 801363e:	4603      	mov	r3, r0
 8013640:	2b00      	cmp	r3, #0
 8013642:	f43f af6f 	beq.w	8013524 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013646:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013648:	4618      	mov	r0, r3
 801364a:	3730      	adds	r7, #48	; 0x30
 801364c:	46bd      	mov	sp, r7
 801364e:	bd80      	pop	{r7, pc}
 8013650:	e000ed04 	.word	0xe000ed04

08013654 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013654:	b580      	push	{r7, lr}
 8013656:	b08e      	sub	sp, #56	; 0x38
 8013658:	af00      	add	r7, sp, #0
 801365a:	60f8      	str	r0, [r7, #12]
 801365c:	60b9      	str	r1, [r7, #8]
 801365e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013666:	2b00      	cmp	r3, #0
 8013668:	d109      	bne.n	801367e <xQueueReceiveFromISR+0x2a>
 801366a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801366e:	f383 8811 	msr	BASEPRI, r3
 8013672:	f3bf 8f6f 	isb	sy
 8013676:	f3bf 8f4f 	dsb	sy
 801367a:	623b      	str	r3, [r7, #32]
 801367c:	e7fe      	b.n	801367c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801367e:	68bb      	ldr	r3, [r7, #8]
 8013680:	2b00      	cmp	r3, #0
 8013682:	d103      	bne.n	801368c <xQueueReceiveFromISR+0x38>
 8013684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013688:	2b00      	cmp	r3, #0
 801368a:	d101      	bne.n	8013690 <xQueueReceiveFromISR+0x3c>
 801368c:	2301      	movs	r3, #1
 801368e:	e000      	b.n	8013692 <xQueueReceiveFromISR+0x3e>
 8013690:	2300      	movs	r3, #0
 8013692:	2b00      	cmp	r3, #0
 8013694:	d109      	bne.n	80136aa <xQueueReceiveFromISR+0x56>
 8013696:	f04f 0350 	mov.w	r3, #80	; 0x50
 801369a:	f383 8811 	msr	BASEPRI, r3
 801369e:	f3bf 8f6f 	isb	sy
 80136a2:	f3bf 8f4f 	dsb	sy
 80136a6:	61fb      	str	r3, [r7, #28]
 80136a8:	e7fe      	b.n	80136a8 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80136aa:	f001 fc03 	bl	8014eb4 <vPortValidateInterruptPriority>
	__asm volatile
 80136ae:	f3ef 8211 	mrs	r2, BASEPRI
 80136b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136b6:	f383 8811 	msr	BASEPRI, r3
 80136ba:	f3bf 8f6f 	isb	sy
 80136be:	f3bf 8f4f 	dsb	sy
 80136c2:	61ba      	str	r2, [r7, #24]
 80136c4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80136c6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80136c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80136ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80136ce:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80136d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d02f      	beq.n	8013736 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80136d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80136dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80136e0:	68b9      	ldr	r1, [r7, #8]
 80136e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80136e4:	f000 f89d 	bl	8013822 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80136e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136ea:	1e5a      	subs	r2, r3, #1
 80136ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136ee:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80136f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80136f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136f8:	d112      	bne.n	8013720 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80136fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136fc:	691b      	ldr	r3, [r3, #16]
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d016      	beq.n	8013730 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013704:	3310      	adds	r3, #16
 8013706:	4618      	mov	r0, r3
 8013708:	f000 fd32 	bl	8014170 <xTaskRemoveFromEventList>
 801370c:	4603      	mov	r3, r0
 801370e:	2b00      	cmp	r3, #0
 8013710:	d00e      	beq.n	8013730 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	2b00      	cmp	r3, #0
 8013716:	d00b      	beq.n	8013730 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	2201      	movs	r2, #1
 801371c:	601a      	str	r2, [r3, #0]
 801371e:	e007      	b.n	8013730 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013720:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013724:	3301      	adds	r3, #1
 8013726:	b2db      	uxtb	r3, r3
 8013728:	b25a      	sxtb	r2, r3
 801372a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801372c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8013730:	2301      	movs	r3, #1
 8013732:	637b      	str	r3, [r7, #52]	; 0x34
 8013734:	e001      	b.n	801373a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8013736:	2300      	movs	r3, #0
 8013738:	637b      	str	r3, [r7, #52]	; 0x34
 801373a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801373c:	613b      	str	r3, [r7, #16]
	__asm volatile
 801373e:	693b      	ldr	r3, [r7, #16]
 8013740:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013746:	4618      	mov	r0, r3
 8013748:	3738      	adds	r7, #56	; 0x38
 801374a:	46bd      	mov	sp, r7
 801374c:	bd80      	pop	{r7, pc}

0801374e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801374e:	b580      	push	{r7, lr}
 8013750:	b086      	sub	sp, #24
 8013752:	af00      	add	r7, sp, #0
 8013754:	60f8      	str	r0, [r7, #12]
 8013756:	60b9      	str	r1, [r7, #8]
 8013758:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801375a:	2300      	movs	r3, #0
 801375c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801375e:	68fb      	ldr	r3, [r7, #12]
 8013760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013762:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013764:	68fb      	ldr	r3, [r7, #12]
 8013766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013768:	2b00      	cmp	r3, #0
 801376a:	d10d      	bne.n	8013788 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801376c:	68fb      	ldr	r3, [r7, #12]
 801376e:	681b      	ldr	r3, [r3, #0]
 8013770:	2b00      	cmp	r3, #0
 8013772:	d14d      	bne.n	8013810 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013774:	68fb      	ldr	r3, [r7, #12]
 8013776:	689b      	ldr	r3, [r3, #8]
 8013778:	4618      	mov	r0, r3
 801377a:	f000 fecd 	bl	8014518 <xTaskPriorityDisinherit>
 801377e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013780:	68fb      	ldr	r3, [r7, #12]
 8013782:	2200      	movs	r2, #0
 8013784:	609a      	str	r2, [r3, #8]
 8013786:	e043      	b.n	8013810 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	2b00      	cmp	r3, #0
 801378c:	d119      	bne.n	80137c2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	6858      	ldr	r0, [r3, #4]
 8013792:	68fb      	ldr	r3, [r7, #12]
 8013794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013796:	461a      	mov	r2, r3
 8013798:	68b9      	ldr	r1, [r7, #8]
 801379a:	f002 fb27 	bl	8015dec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801379e:	68fb      	ldr	r3, [r7, #12]
 80137a0:	685a      	ldr	r2, [r3, #4]
 80137a2:	68fb      	ldr	r3, [r7, #12]
 80137a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80137a6:	441a      	add	r2, r3
 80137a8:	68fb      	ldr	r3, [r7, #12]
 80137aa:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80137ac:	68fb      	ldr	r3, [r7, #12]
 80137ae:	685a      	ldr	r2, [r3, #4]
 80137b0:	68fb      	ldr	r3, [r7, #12]
 80137b2:	689b      	ldr	r3, [r3, #8]
 80137b4:	429a      	cmp	r2, r3
 80137b6:	d32b      	bcc.n	8013810 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	681a      	ldr	r2, [r3, #0]
 80137bc:	68fb      	ldr	r3, [r7, #12]
 80137be:	605a      	str	r2, [r3, #4]
 80137c0:	e026      	b.n	8013810 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80137c2:	68fb      	ldr	r3, [r7, #12]
 80137c4:	68d8      	ldr	r0, [r3, #12]
 80137c6:	68fb      	ldr	r3, [r7, #12]
 80137c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80137ca:	461a      	mov	r2, r3
 80137cc:	68b9      	ldr	r1, [r7, #8]
 80137ce:	f002 fb0d 	bl	8015dec <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80137d2:	68fb      	ldr	r3, [r7, #12]
 80137d4:	68da      	ldr	r2, [r3, #12]
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80137da:	425b      	negs	r3, r3
 80137dc:	441a      	add	r2, r3
 80137de:	68fb      	ldr	r3, [r7, #12]
 80137e0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80137e2:	68fb      	ldr	r3, [r7, #12]
 80137e4:	68da      	ldr	r2, [r3, #12]
 80137e6:	68fb      	ldr	r3, [r7, #12]
 80137e8:	681b      	ldr	r3, [r3, #0]
 80137ea:	429a      	cmp	r2, r3
 80137ec:	d207      	bcs.n	80137fe <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80137ee:	68fb      	ldr	r3, [r7, #12]
 80137f0:	689a      	ldr	r2, [r3, #8]
 80137f2:	68fb      	ldr	r3, [r7, #12]
 80137f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80137f6:	425b      	negs	r3, r3
 80137f8:	441a      	add	r2, r3
 80137fa:	68fb      	ldr	r3, [r7, #12]
 80137fc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	2b02      	cmp	r3, #2
 8013802:	d105      	bne.n	8013810 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013804:	693b      	ldr	r3, [r7, #16]
 8013806:	2b00      	cmp	r3, #0
 8013808:	d002      	beq.n	8013810 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801380a:	693b      	ldr	r3, [r7, #16]
 801380c:	3b01      	subs	r3, #1
 801380e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013810:	693b      	ldr	r3, [r7, #16]
 8013812:	1c5a      	adds	r2, r3, #1
 8013814:	68fb      	ldr	r3, [r7, #12]
 8013816:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8013818:	697b      	ldr	r3, [r7, #20]
}
 801381a:	4618      	mov	r0, r3
 801381c:	3718      	adds	r7, #24
 801381e:	46bd      	mov	sp, r7
 8013820:	bd80      	pop	{r7, pc}

08013822 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013822:	b580      	push	{r7, lr}
 8013824:	b082      	sub	sp, #8
 8013826:	af00      	add	r7, sp, #0
 8013828:	6078      	str	r0, [r7, #4]
 801382a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013830:	2b00      	cmp	r3, #0
 8013832:	d018      	beq.n	8013866 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	68da      	ldr	r2, [r3, #12]
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801383c:	441a      	add	r2, r3
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	68da      	ldr	r2, [r3, #12]
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	689b      	ldr	r3, [r3, #8]
 801384a:	429a      	cmp	r2, r3
 801384c:	d303      	bcc.n	8013856 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	681a      	ldr	r2, [r3, #0]
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	68d9      	ldr	r1, [r3, #12]
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801385e:	461a      	mov	r2, r3
 8013860:	6838      	ldr	r0, [r7, #0]
 8013862:	f002 fac3 	bl	8015dec <memcpy>
	}
}
 8013866:	bf00      	nop
 8013868:	3708      	adds	r7, #8
 801386a:	46bd      	mov	sp, r7
 801386c:	bd80      	pop	{r7, pc}

0801386e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801386e:	b580      	push	{r7, lr}
 8013870:	b084      	sub	sp, #16
 8013872:	af00      	add	r7, sp, #0
 8013874:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013876:	f001 fa41 	bl	8014cfc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013880:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013882:	e011      	b.n	80138a8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013888:	2b00      	cmp	r3, #0
 801388a:	d012      	beq.n	80138b2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	3324      	adds	r3, #36	; 0x24
 8013890:	4618      	mov	r0, r3
 8013892:	f000 fc6d 	bl	8014170 <xTaskRemoveFromEventList>
 8013896:	4603      	mov	r3, r0
 8013898:	2b00      	cmp	r3, #0
 801389a:	d001      	beq.n	80138a0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801389c:	f000 fd40 	bl	8014320 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80138a0:	7bfb      	ldrb	r3, [r7, #15]
 80138a2:	3b01      	subs	r3, #1
 80138a4:	b2db      	uxtb	r3, r3
 80138a6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80138a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	dce9      	bgt.n	8013884 <prvUnlockQueue+0x16>
 80138b0:	e000      	b.n	80138b4 <prvUnlockQueue+0x46>
					break;
 80138b2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	22ff      	movs	r2, #255	; 0xff
 80138b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80138bc:	f001 fa4c 	bl	8014d58 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80138c0:	f001 fa1c 	bl	8014cfc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80138ca:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80138cc:	e011      	b.n	80138f2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	691b      	ldr	r3, [r3, #16]
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d012      	beq.n	80138fc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	3310      	adds	r3, #16
 80138da:	4618      	mov	r0, r3
 80138dc:	f000 fc48 	bl	8014170 <xTaskRemoveFromEventList>
 80138e0:	4603      	mov	r3, r0
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d001      	beq.n	80138ea <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80138e6:	f000 fd1b 	bl	8014320 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80138ea:	7bbb      	ldrb	r3, [r7, #14]
 80138ec:	3b01      	subs	r3, #1
 80138ee:	b2db      	uxtb	r3, r3
 80138f0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80138f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	dce9      	bgt.n	80138ce <prvUnlockQueue+0x60>
 80138fa:	e000      	b.n	80138fe <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80138fc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	22ff      	movs	r2, #255	; 0xff
 8013902:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8013906:	f001 fa27 	bl	8014d58 <vPortExitCritical>
}
 801390a:	bf00      	nop
 801390c:	3710      	adds	r7, #16
 801390e:	46bd      	mov	sp, r7
 8013910:	bd80      	pop	{r7, pc}

08013912 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013912:	b580      	push	{r7, lr}
 8013914:	b084      	sub	sp, #16
 8013916:	af00      	add	r7, sp, #0
 8013918:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801391a:	f001 f9ef 	bl	8014cfc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013922:	2b00      	cmp	r3, #0
 8013924:	d102      	bne.n	801392c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013926:	2301      	movs	r3, #1
 8013928:	60fb      	str	r3, [r7, #12]
 801392a:	e001      	b.n	8013930 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801392c:	2300      	movs	r3, #0
 801392e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013930:	f001 fa12 	bl	8014d58 <vPortExitCritical>

	return xReturn;
 8013934:	68fb      	ldr	r3, [r7, #12]
}
 8013936:	4618      	mov	r0, r3
 8013938:	3710      	adds	r7, #16
 801393a:	46bd      	mov	sp, r7
 801393c:	bd80      	pop	{r7, pc}

0801393e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801393e:	b580      	push	{r7, lr}
 8013940:	b084      	sub	sp, #16
 8013942:	af00      	add	r7, sp, #0
 8013944:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013946:	f001 f9d9 	bl	8014cfc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013952:	429a      	cmp	r2, r3
 8013954:	d102      	bne.n	801395c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013956:	2301      	movs	r3, #1
 8013958:	60fb      	str	r3, [r7, #12]
 801395a:	e001      	b.n	8013960 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801395c:	2300      	movs	r3, #0
 801395e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013960:	f001 f9fa 	bl	8014d58 <vPortExitCritical>

	return xReturn;
 8013964:	68fb      	ldr	r3, [r7, #12]
}
 8013966:	4618      	mov	r0, r3
 8013968:	3710      	adds	r7, #16
 801396a:	46bd      	mov	sp, r7
 801396c:	bd80      	pop	{r7, pc}

0801396e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801396e:	b580      	push	{r7, lr}
 8013970:	b08e      	sub	sp, #56	; 0x38
 8013972:	af04      	add	r7, sp, #16
 8013974:	60f8      	str	r0, [r7, #12]
 8013976:	60b9      	str	r1, [r7, #8]
 8013978:	607a      	str	r2, [r7, #4]
 801397a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801397c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801397e:	2b00      	cmp	r3, #0
 8013980:	d109      	bne.n	8013996 <xTaskCreateStatic+0x28>
	__asm volatile
 8013982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013986:	f383 8811 	msr	BASEPRI, r3
 801398a:	f3bf 8f6f 	isb	sy
 801398e:	f3bf 8f4f 	dsb	sy
 8013992:	623b      	str	r3, [r7, #32]
 8013994:	e7fe      	b.n	8013994 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8013996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013998:	2b00      	cmp	r3, #0
 801399a:	d109      	bne.n	80139b0 <xTaskCreateStatic+0x42>
 801399c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139a0:	f383 8811 	msr	BASEPRI, r3
 80139a4:	f3bf 8f6f 	isb	sy
 80139a8:	f3bf 8f4f 	dsb	sy
 80139ac:	61fb      	str	r3, [r7, #28]
 80139ae:	e7fe      	b.n	80139ae <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80139b0:	2354      	movs	r3, #84	; 0x54
 80139b2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80139b4:	693b      	ldr	r3, [r7, #16]
 80139b6:	2b54      	cmp	r3, #84	; 0x54
 80139b8:	d009      	beq.n	80139ce <xTaskCreateStatic+0x60>
 80139ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139be:	f383 8811 	msr	BASEPRI, r3
 80139c2:	f3bf 8f6f 	isb	sy
 80139c6:	f3bf 8f4f 	dsb	sy
 80139ca:	61bb      	str	r3, [r7, #24]
 80139cc:	e7fe      	b.n	80139cc <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80139ce:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80139d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d01e      	beq.n	8013a14 <xTaskCreateStatic+0xa6>
 80139d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d01b      	beq.n	8013a14 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80139dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139de:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80139e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80139e4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80139e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139e8:	2202      	movs	r2, #2
 80139ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80139ee:	2300      	movs	r3, #0
 80139f0:	9303      	str	r3, [sp, #12]
 80139f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139f4:	9302      	str	r3, [sp, #8]
 80139f6:	f107 0314 	add.w	r3, r7, #20
 80139fa:	9301      	str	r3, [sp, #4]
 80139fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139fe:	9300      	str	r3, [sp, #0]
 8013a00:	683b      	ldr	r3, [r7, #0]
 8013a02:	687a      	ldr	r2, [r7, #4]
 8013a04:	68b9      	ldr	r1, [r7, #8]
 8013a06:	68f8      	ldr	r0, [r7, #12]
 8013a08:	f000 f850 	bl	8013aac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013a0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013a0e:	f000 f8d3 	bl	8013bb8 <prvAddNewTaskToReadyList>
 8013a12:	e001      	b.n	8013a18 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8013a14:	2300      	movs	r3, #0
 8013a16:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8013a18:	697b      	ldr	r3, [r7, #20]
	}
 8013a1a:	4618      	mov	r0, r3
 8013a1c:	3728      	adds	r7, #40	; 0x28
 8013a1e:	46bd      	mov	sp, r7
 8013a20:	bd80      	pop	{r7, pc}

08013a22 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013a22:	b580      	push	{r7, lr}
 8013a24:	b08c      	sub	sp, #48	; 0x30
 8013a26:	af04      	add	r7, sp, #16
 8013a28:	60f8      	str	r0, [r7, #12]
 8013a2a:	60b9      	str	r1, [r7, #8]
 8013a2c:	603b      	str	r3, [r7, #0]
 8013a2e:	4613      	mov	r3, r2
 8013a30:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013a32:	88fb      	ldrh	r3, [r7, #6]
 8013a34:	009b      	lsls	r3, r3, #2
 8013a36:	4618      	mov	r0, r3
 8013a38:	f001 fa7a 	bl	8014f30 <pvPortMalloc>
 8013a3c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013a3e:	697b      	ldr	r3, [r7, #20]
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d00e      	beq.n	8013a62 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013a44:	2054      	movs	r0, #84	; 0x54
 8013a46:	f001 fa73 	bl	8014f30 <pvPortMalloc>
 8013a4a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013a4c:	69fb      	ldr	r3, [r7, #28]
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d003      	beq.n	8013a5a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013a52:	69fb      	ldr	r3, [r7, #28]
 8013a54:	697a      	ldr	r2, [r7, #20]
 8013a56:	631a      	str	r2, [r3, #48]	; 0x30
 8013a58:	e005      	b.n	8013a66 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013a5a:	6978      	ldr	r0, [r7, #20]
 8013a5c:	f001 fb2a 	bl	80150b4 <vPortFree>
 8013a60:	e001      	b.n	8013a66 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013a62:	2300      	movs	r3, #0
 8013a64:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8013a66:	69fb      	ldr	r3, [r7, #28]
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d017      	beq.n	8013a9c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013a6c:	69fb      	ldr	r3, [r7, #28]
 8013a6e:	2200      	movs	r2, #0
 8013a70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013a74:	88fa      	ldrh	r2, [r7, #6]
 8013a76:	2300      	movs	r3, #0
 8013a78:	9303      	str	r3, [sp, #12]
 8013a7a:	69fb      	ldr	r3, [r7, #28]
 8013a7c:	9302      	str	r3, [sp, #8]
 8013a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a80:	9301      	str	r3, [sp, #4]
 8013a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a84:	9300      	str	r3, [sp, #0]
 8013a86:	683b      	ldr	r3, [r7, #0]
 8013a88:	68b9      	ldr	r1, [r7, #8]
 8013a8a:	68f8      	ldr	r0, [r7, #12]
 8013a8c:	f000 f80e 	bl	8013aac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013a90:	69f8      	ldr	r0, [r7, #28]
 8013a92:	f000 f891 	bl	8013bb8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013a96:	2301      	movs	r3, #1
 8013a98:	61bb      	str	r3, [r7, #24]
 8013a9a:	e002      	b.n	8013aa2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8013aa0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013aa2:	69bb      	ldr	r3, [r7, #24]
	}
 8013aa4:	4618      	mov	r0, r3
 8013aa6:	3720      	adds	r7, #32
 8013aa8:	46bd      	mov	sp, r7
 8013aaa:	bd80      	pop	{r7, pc}

08013aac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013aac:	b580      	push	{r7, lr}
 8013aae:	b088      	sub	sp, #32
 8013ab0:	af00      	add	r7, sp, #0
 8013ab2:	60f8      	str	r0, [r7, #12]
 8013ab4:	60b9      	str	r1, [r7, #8]
 8013ab6:	607a      	str	r2, [r7, #4]
 8013ab8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013abc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8013ac4:	3b01      	subs	r3, #1
 8013ac6:	009b      	lsls	r3, r3, #2
 8013ac8:	4413      	add	r3, r2
 8013aca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013acc:	69bb      	ldr	r3, [r7, #24]
 8013ace:	f023 0307 	bic.w	r3, r3, #7
 8013ad2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013ad4:	69bb      	ldr	r3, [r7, #24]
 8013ad6:	f003 0307 	and.w	r3, r3, #7
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d009      	beq.n	8013af2 <prvInitialiseNewTask+0x46>
 8013ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ae2:	f383 8811 	msr	BASEPRI, r3
 8013ae6:	f3bf 8f6f 	isb	sy
 8013aea:	f3bf 8f4f 	dsb	sy
 8013aee:	617b      	str	r3, [r7, #20]
 8013af0:	e7fe      	b.n	8013af0 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013af2:	68bb      	ldr	r3, [r7, #8]
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d01f      	beq.n	8013b38 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013af8:	2300      	movs	r3, #0
 8013afa:	61fb      	str	r3, [r7, #28]
 8013afc:	e012      	b.n	8013b24 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013afe:	68ba      	ldr	r2, [r7, #8]
 8013b00:	69fb      	ldr	r3, [r7, #28]
 8013b02:	4413      	add	r3, r2
 8013b04:	7819      	ldrb	r1, [r3, #0]
 8013b06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013b08:	69fb      	ldr	r3, [r7, #28]
 8013b0a:	4413      	add	r3, r2
 8013b0c:	3334      	adds	r3, #52	; 0x34
 8013b0e:	460a      	mov	r2, r1
 8013b10:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8013b12:	68ba      	ldr	r2, [r7, #8]
 8013b14:	69fb      	ldr	r3, [r7, #28]
 8013b16:	4413      	add	r3, r2
 8013b18:	781b      	ldrb	r3, [r3, #0]
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d006      	beq.n	8013b2c <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013b1e:	69fb      	ldr	r3, [r7, #28]
 8013b20:	3301      	adds	r3, #1
 8013b22:	61fb      	str	r3, [r7, #28]
 8013b24:	69fb      	ldr	r3, [r7, #28]
 8013b26:	2b0f      	cmp	r3, #15
 8013b28:	d9e9      	bls.n	8013afe <prvInitialiseNewTask+0x52>
 8013b2a:	e000      	b.n	8013b2e <prvInitialiseNewTask+0x82>
			{
				break;
 8013b2c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b30:	2200      	movs	r2, #0
 8013b32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013b36:	e003      	b.n	8013b40 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8013b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b3a:	2200      	movs	r2, #0
 8013b3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b42:	2b06      	cmp	r3, #6
 8013b44:	d901      	bls.n	8013b4a <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013b46:	2306      	movs	r3, #6
 8013b48:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013b4e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013b54:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8013b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b58:	2200      	movs	r2, #0
 8013b5a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b5e:	3304      	adds	r3, #4
 8013b60:	4618      	mov	r0, r3
 8013b62:	f7ff f8f2 	bl	8012d4a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b68:	3318      	adds	r3, #24
 8013b6a:	4618      	mov	r0, r3
 8013b6c:	f7ff f8ed 	bl	8012d4a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013b74:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b78:	f1c3 0207 	rsb	r2, r3, #7
 8013b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b7e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013b84:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b88:	2200      	movs	r2, #0
 8013b8a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b8e:	2200      	movs	r2, #0
 8013b90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013b94:	683a      	ldr	r2, [r7, #0]
 8013b96:	68f9      	ldr	r1, [r7, #12]
 8013b98:	69b8      	ldr	r0, [r7, #24]
 8013b9a:	f000 ff8b 	bl	8014ab4 <pxPortInitialiseStack>
 8013b9e:	4602      	mov	r2, r0
 8013ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ba2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	d002      	beq.n	8013bb0 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013bae:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013bb0:	bf00      	nop
 8013bb2:	3720      	adds	r7, #32
 8013bb4:	46bd      	mov	sp, r7
 8013bb6:	bd80      	pop	{r7, pc}

08013bb8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013bb8:	b580      	push	{r7, lr}
 8013bba:	b082      	sub	sp, #8
 8013bbc:	af00      	add	r7, sp, #0
 8013bbe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013bc0:	f001 f89c 	bl	8014cfc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013bc4:	4b2a      	ldr	r3, [pc, #168]	; (8013c70 <prvAddNewTaskToReadyList+0xb8>)
 8013bc6:	681b      	ldr	r3, [r3, #0]
 8013bc8:	3301      	adds	r3, #1
 8013bca:	4a29      	ldr	r2, [pc, #164]	; (8013c70 <prvAddNewTaskToReadyList+0xb8>)
 8013bcc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013bce:	4b29      	ldr	r3, [pc, #164]	; (8013c74 <prvAddNewTaskToReadyList+0xbc>)
 8013bd0:	681b      	ldr	r3, [r3, #0]
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d109      	bne.n	8013bea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8013bd6:	4a27      	ldr	r2, [pc, #156]	; (8013c74 <prvAddNewTaskToReadyList+0xbc>)
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013bdc:	4b24      	ldr	r3, [pc, #144]	; (8013c70 <prvAddNewTaskToReadyList+0xb8>)
 8013bde:	681b      	ldr	r3, [r3, #0]
 8013be0:	2b01      	cmp	r3, #1
 8013be2:	d110      	bne.n	8013c06 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013be4:	f000 fbc0 	bl	8014368 <prvInitialiseTaskLists>
 8013be8:	e00d      	b.n	8013c06 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013bea:	4b23      	ldr	r3, [pc, #140]	; (8013c78 <prvAddNewTaskToReadyList+0xc0>)
 8013bec:	681b      	ldr	r3, [r3, #0]
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	d109      	bne.n	8013c06 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013bf2:	4b20      	ldr	r3, [pc, #128]	; (8013c74 <prvAddNewTaskToReadyList+0xbc>)
 8013bf4:	681b      	ldr	r3, [r3, #0]
 8013bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013bfc:	429a      	cmp	r2, r3
 8013bfe:	d802      	bhi.n	8013c06 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013c00:	4a1c      	ldr	r2, [pc, #112]	; (8013c74 <prvAddNewTaskToReadyList+0xbc>)
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013c06:	4b1d      	ldr	r3, [pc, #116]	; (8013c7c <prvAddNewTaskToReadyList+0xc4>)
 8013c08:	681b      	ldr	r3, [r3, #0]
 8013c0a:	3301      	adds	r3, #1
 8013c0c:	4a1b      	ldr	r2, [pc, #108]	; (8013c7c <prvAddNewTaskToReadyList+0xc4>)
 8013c0e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c14:	2201      	movs	r2, #1
 8013c16:	409a      	lsls	r2, r3
 8013c18:	4b19      	ldr	r3, [pc, #100]	; (8013c80 <prvAddNewTaskToReadyList+0xc8>)
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	4313      	orrs	r3, r2
 8013c1e:	4a18      	ldr	r2, [pc, #96]	; (8013c80 <prvAddNewTaskToReadyList+0xc8>)
 8013c20:	6013      	str	r3, [r2, #0]
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c26:	4613      	mov	r3, r2
 8013c28:	009b      	lsls	r3, r3, #2
 8013c2a:	4413      	add	r3, r2
 8013c2c:	009b      	lsls	r3, r3, #2
 8013c2e:	4a15      	ldr	r2, [pc, #84]	; (8013c84 <prvAddNewTaskToReadyList+0xcc>)
 8013c30:	441a      	add	r2, r3
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	3304      	adds	r3, #4
 8013c36:	4619      	mov	r1, r3
 8013c38:	4610      	mov	r0, r2
 8013c3a:	f7ff f893 	bl	8012d64 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013c3e:	f001 f88b 	bl	8014d58 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013c42:	4b0d      	ldr	r3, [pc, #52]	; (8013c78 <prvAddNewTaskToReadyList+0xc0>)
 8013c44:	681b      	ldr	r3, [r3, #0]
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d00e      	beq.n	8013c68 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013c4a:	4b0a      	ldr	r3, [pc, #40]	; (8013c74 <prvAddNewTaskToReadyList+0xbc>)
 8013c4c:	681b      	ldr	r3, [r3, #0]
 8013c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c54:	429a      	cmp	r2, r3
 8013c56:	d207      	bcs.n	8013c68 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013c58:	4b0b      	ldr	r3, [pc, #44]	; (8013c88 <prvAddNewTaskToReadyList+0xd0>)
 8013c5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c5e:	601a      	str	r2, [r3, #0]
 8013c60:	f3bf 8f4f 	dsb	sy
 8013c64:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013c68:	bf00      	nop
 8013c6a:	3708      	adds	r7, #8
 8013c6c:	46bd      	mov	sp, r7
 8013c6e:	bd80      	pop	{r7, pc}
 8013c70:	2000110c 	.word	0x2000110c
 8013c74:	2000100c 	.word	0x2000100c
 8013c78:	20001118 	.word	0x20001118
 8013c7c:	20001128 	.word	0x20001128
 8013c80:	20001114 	.word	0x20001114
 8013c84:	20001010 	.word	0x20001010
 8013c88:	e000ed04 	.word	0xe000ed04

08013c8c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013c8c:	b580      	push	{r7, lr}
 8013c8e:	b084      	sub	sp, #16
 8013c90:	af00      	add	r7, sp, #0
 8013c92:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013c94:	2300      	movs	r3, #0
 8013c96:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d016      	beq.n	8013ccc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8013c9e:	4b13      	ldr	r3, [pc, #76]	; (8013cec <vTaskDelay+0x60>)
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	d009      	beq.n	8013cba <vTaskDelay+0x2e>
 8013ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013caa:	f383 8811 	msr	BASEPRI, r3
 8013cae:	f3bf 8f6f 	isb	sy
 8013cb2:	f3bf 8f4f 	dsb	sy
 8013cb6:	60bb      	str	r3, [r7, #8]
 8013cb8:	e7fe      	b.n	8013cb8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8013cba:	f000 f879 	bl	8013db0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013cbe:	2100      	movs	r1, #0
 8013cc0:	6878      	ldr	r0, [r7, #4]
 8013cc2:	f000 fe91 	bl	80149e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013cc6:	f000 f881 	bl	8013dcc <xTaskResumeAll>
 8013cca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013ccc:	68fb      	ldr	r3, [r7, #12]
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d107      	bne.n	8013ce2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8013cd2:	4b07      	ldr	r3, [pc, #28]	; (8013cf0 <vTaskDelay+0x64>)
 8013cd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013cd8:	601a      	str	r2, [r3, #0]
 8013cda:	f3bf 8f4f 	dsb	sy
 8013cde:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013ce2:	bf00      	nop
 8013ce4:	3710      	adds	r7, #16
 8013ce6:	46bd      	mov	sp, r7
 8013ce8:	bd80      	pop	{r7, pc}
 8013cea:	bf00      	nop
 8013cec:	20001134 	.word	0x20001134
 8013cf0:	e000ed04 	.word	0xe000ed04

08013cf4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013cf4:	b580      	push	{r7, lr}
 8013cf6:	b08a      	sub	sp, #40	; 0x28
 8013cf8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013cfa:	2300      	movs	r3, #0
 8013cfc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013cfe:	2300      	movs	r3, #0
 8013d00:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013d02:	463a      	mov	r2, r7
 8013d04:	1d39      	adds	r1, r7, #4
 8013d06:	f107 0308 	add.w	r3, r7, #8
 8013d0a:	4618      	mov	r0, r3
 8013d0c:	f7ee f90a 	bl	8001f24 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013d10:	6839      	ldr	r1, [r7, #0]
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	68ba      	ldr	r2, [r7, #8]
 8013d16:	9202      	str	r2, [sp, #8]
 8013d18:	9301      	str	r3, [sp, #4]
 8013d1a:	2300      	movs	r3, #0
 8013d1c:	9300      	str	r3, [sp, #0]
 8013d1e:	2300      	movs	r3, #0
 8013d20:	460a      	mov	r2, r1
 8013d22:	491d      	ldr	r1, [pc, #116]	; (8013d98 <vTaskStartScheduler+0xa4>)
 8013d24:	481d      	ldr	r0, [pc, #116]	; (8013d9c <vTaskStartScheduler+0xa8>)
 8013d26:	f7ff fe22 	bl	801396e <xTaskCreateStatic>
 8013d2a:	4602      	mov	r2, r0
 8013d2c:	4b1c      	ldr	r3, [pc, #112]	; (8013da0 <vTaskStartScheduler+0xac>)
 8013d2e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013d30:	4b1b      	ldr	r3, [pc, #108]	; (8013da0 <vTaskStartScheduler+0xac>)
 8013d32:	681b      	ldr	r3, [r3, #0]
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d002      	beq.n	8013d3e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013d38:	2301      	movs	r3, #1
 8013d3a:	617b      	str	r3, [r7, #20]
 8013d3c:	e001      	b.n	8013d42 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013d3e:	2300      	movs	r3, #0
 8013d40:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013d42:	697b      	ldr	r3, [r7, #20]
 8013d44:	2b01      	cmp	r3, #1
 8013d46:	d115      	bne.n	8013d74 <vTaskStartScheduler+0x80>
 8013d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d4c:	f383 8811 	msr	BASEPRI, r3
 8013d50:	f3bf 8f6f 	isb	sy
 8013d54:	f3bf 8f4f 	dsb	sy
 8013d58:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013d5a:	4b12      	ldr	r3, [pc, #72]	; (8013da4 <vTaskStartScheduler+0xb0>)
 8013d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8013d60:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013d62:	4b11      	ldr	r3, [pc, #68]	; (8013da8 <vTaskStartScheduler+0xb4>)
 8013d64:	2201      	movs	r2, #1
 8013d66:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013d68:	4b10      	ldr	r3, [pc, #64]	; (8013dac <vTaskStartScheduler+0xb8>)
 8013d6a:	2200      	movs	r2, #0
 8013d6c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013d6e:	f000 ff27 	bl	8014bc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013d72:	e00d      	b.n	8013d90 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013d74:	697b      	ldr	r3, [r7, #20]
 8013d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d7a:	d109      	bne.n	8013d90 <vTaskStartScheduler+0x9c>
 8013d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d80:	f383 8811 	msr	BASEPRI, r3
 8013d84:	f3bf 8f6f 	isb	sy
 8013d88:	f3bf 8f4f 	dsb	sy
 8013d8c:	60fb      	str	r3, [r7, #12]
 8013d8e:	e7fe      	b.n	8013d8e <vTaskStartScheduler+0x9a>
}
 8013d90:	bf00      	nop
 8013d92:	3718      	adds	r7, #24
 8013d94:	46bd      	mov	sp, r7
 8013d96:	bd80      	pop	{r7, pc}
 8013d98:	0801b534 	.word	0x0801b534
 8013d9c:	08014339 	.word	0x08014339
 8013da0:	20001130 	.word	0x20001130
 8013da4:	2000112c 	.word	0x2000112c
 8013da8:	20001118 	.word	0x20001118
 8013dac:	20001110 	.word	0x20001110

08013db0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013db0:	b480      	push	{r7}
 8013db2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8013db4:	4b04      	ldr	r3, [pc, #16]	; (8013dc8 <vTaskSuspendAll+0x18>)
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	3301      	adds	r3, #1
 8013dba:	4a03      	ldr	r2, [pc, #12]	; (8013dc8 <vTaskSuspendAll+0x18>)
 8013dbc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8013dbe:	bf00      	nop
 8013dc0:	46bd      	mov	sp, r7
 8013dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dc6:	4770      	bx	lr
 8013dc8:	20001134 	.word	0x20001134

08013dcc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013dcc:	b580      	push	{r7, lr}
 8013dce:	b084      	sub	sp, #16
 8013dd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013dd2:	2300      	movs	r3, #0
 8013dd4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013dd6:	2300      	movs	r3, #0
 8013dd8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013dda:	4b41      	ldr	r3, [pc, #260]	; (8013ee0 <xTaskResumeAll+0x114>)
 8013ddc:	681b      	ldr	r3, [r3, #0]
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d109      	bne.n	8013df6 <xTaskResumeAll+0x2a>
 8013de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013de6:	f383 8811 	msr	BASEPRI, r3
 8013dea:	f3bf 8f6f 	isb	sy
 8013dee:	f3bf 8f4f 	dsb	sy
 8013df2:	603b      	str	r3, [r7, #0]
 8013df4:	e7fe      	b.n	8013df4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013df6:	f000 ff81 	bl	8014cfc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013dfa:	4b39      	ldr	r3, [pc, #228]	; (8013ee0 <xTaskResumeAll+0x114>)
 8013dfc:	681b      	ldr	r3, [r3, #0]
 8013dfe:	3b01      	subs	r3, #1
 8013e00:	4a37      	ldr	r2, [pc, #220]	; (8013ee0 <xTaskResumeAll+0x114>)
 8013e02:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013e04:	4b36      	ldr	r3, [pc, #216]	; (8013ee0 <xTaskResumeAll+0x114>)
 8013e06:	681b      	ldr	r3, [r3, #0]
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d161      	bne.n	8013ed0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013e0c:	4b35      	ldr	r3, [pc, #212]	; (8013ee4 <xTaskResumeAll+0x118>)
 8013e0e:	681b      	ldr	r3, [r3, #0]
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	d05d      	beq.n	8013ed0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013e14:	e02e      	b.n	8013e74 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013e16:	4b34      	ldr	r3, [pc, #208]	; (8013ee8 <xTaskResumeAll+0x11c>)
 8013e18:	68db      	ldr	r3, [r3, #12]
 8013e1a:	68db      	ldr	r3, [r3, #12]
 8013e1c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013e1e:	68fb      	ldr	r3, [r7, #12]
 8013e20:	3318      	adds	r3, #24
 8013e22:	4618      	mov	r0, r3
 8013e24:	f7fe fffb 	bl	8012e1e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013e28:	68fb      	ldr	r3, [r7, #12]
 8013e2a:	3304      	adds	r3, #4
 8013e2c:	4618      	mov	r0, r3
 8013e2e:	f7fe fff6 	bl	8012e1e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013e32:	68fb      	ldr	r3, [r7, #12]
 8013e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e36:	2201      	movs	r2, #1
 8013e38:	409a      	lsls	r2, r3
 8013e3a:	4b2c      	ldr	r3, [pc, #176]	; (8013eec <xTaskResumeAll+0x120>)
 8013e3c:	681b      	ldr	r3, [r3, #0]
 8013e3e:	4313      	orrs	r3, r2
 8013e40:	4a2a      	ldr	r2, [pc, #168]	; (8013eec <xTaskResumeAll+0x120>)
 8013e42:	6013      	str	r3, [r2, #0]
 8013e44:	68fb      	ldr	r3, [r7, #12]
 8013e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e48:	4613      	mov	r3, r2
 8013e4a:	009b      	lsls	r3, r3, #2
 8013e4c:	4413      	add	r3, r2
 8013e4e:	009b      	lsls	r3, r3, #2
 8013e50:	4a27      	ldr	r2, [pc, #156]	; (8013ef0 <xTaskResumeAll+0x124>)
 8013e52:	441a      	add	r2, r3
 8013e54:	68fb      	ldr	r3, [r7, #12]
 8013e56:	3304      	adds	r3, #4
 8013e58:	4619      	mov	r1, r3
 8013e5a:	4610      	mov	r0, r2
 8013e5c:	f7fe ff82 	bl	8012d64 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013e60:	68fb      	ldr	r3, [r7, #12]
 8013e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e64:	4b23      	ldr	r3, [pc, #140]	; (8013ef4 <xTaskResumeAll+0x128>)
 8013e66:	681b      	ldr	r3, [r3, #0]
 8013e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e6a:	429a      	cmp	r2, r3
 8013e6c:	d302      	bcc.n	8013e74 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8013e6e:	4b22      	ldr	r3, [pc, #136]	; (8013ef8 <xTaskResumeAll+0x12c>)
 8013e70:	2201      	movs	r2, #1
 8013e72:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013e74:	4b1c      	ldr	r3, [pc, #112]	; (8013ee8 <xTaskResumeAll+0x11c>)
 8013e76:	681b      	ldr	r3, [r3, #0]
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	d1cc      	bne.n	8013e16 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013e7c:	68fb      	ldr	r3, [r7, #12]
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d001      	beq.n	8013e86 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013e82:	f000 fb0b 	bl	801449c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8013e86:	4b1d      	ldr	r3, [pc, #116]	; (8013efc <xTaskResumeAll+0x130>)
 8013e88:	681b      	ldr	r3, [r3, #0]
 8013e8a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d010      	beq.n	8013eb4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013e92:	f000 f837 	bl	8013f04 <xTaskIncrementTick>
 8013e96:	4603      	mov	r3, r0
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d002      	beq.n	8013ea2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8013e9c:	4b16      	ldr	r3, [pc, #88]	; (8013ef8 <xTaskResumeAll+0x12c>)
 8013e9e:	2201      	movs	r2, #1
 8013ea0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	3b01      	subs	r3, #1
 8013ea6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	d1f1      	bne.n	8013e92 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8013eae:	4b13      	ldr	r3, [pc, #76]	; (8013efc <xTaskResumeAll+0x130>)
 8013eb0:	2200      	movs	r2, #0
 8013eb2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013eb4:	4b10      	ldr	r3, [pc, #64]	; (8013ef8 <xTaskResumeAll+0x12c>)
 8013eb6:	681b      	ldr	r3, [r3, #0]
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d009      	beq.n	8013ed0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013ebc:	2301      	movs	r3, #1
 8013ebe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013ec0:	4b0f      	ldr	r3, [pc, #60]	; (8013f00 <xTaskResumeAll+0x134>)
 8013ec2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013ec6:	601a      	str	r2, [r3, #0]
 8013ec8:	f3bf 8f4f 	dsb	sy
 8013ecc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013ed0:	f000 ff42 	bl	8014d58 <vPortExitCritical>

	return xAlreadyYielded;
 8013ed4:	68bb      	ldr	r3, [r7, #8]
}
 8013ed6:	4618      	mov	r0, r3
 8013ed8:	3710      	adds	r7, #16
 8013eda:	46bd      	mov	sp, r7
 8013edc:	bd80      	pop	{r7, pc}
 8013ede:	bf00      	nop
 8013ee0:	20001134 	.word	0x20001134
 8013ee4:	2000110c 	.word	0x2000110c
 8013ee8:	200010cc 	.word	0x200010cc
 8013eec:	20001114 	.word	0x20001114
 8013ef0:	20001010 	.word	0x20001010
 8013ef4:	2000100c 	.word	0x2000100c
 8013ef8:	20001120 	.word	0x20001120
 8013efc:	2000111c 	.word	0x2000111c
 8013f00:	e000ed04 	.word	0xe000ed04

08013f04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013f04:	b580      	push	{r7, lr}
 8013f06:	b086      	sub	sp, #24
 8013f08:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013f0a:	2300      	movs	r3, #0
 8013f0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013f0e:	4b4e      	ldr	r3, [pc, #312]	; (8014048 <xTaskIncrementTick+0x144>)
 8013f10:	681b      	ldr	r3, [r3, #0]
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	f040 8087 	bne.w	8014026 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013f18:	4b4c      	ldr	r3, [pc, #304]	; (801404c <xTaskIncrementTick+0x148>)
 8013f1a:	681b      	ldr	r3, [r3, #0]
 8013f1c:	3301      	adds	r3, #1
 8013f1e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013f20:	4a4a      	ldr	r2, [pc, #296]	; (801404c <xTaskIncrementTick+0x148>)
 8013f22:	693b      	ldr	r3, [r7, #16]
 8013f24:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013f26:	693b      	ldr	r3, [r7, #16]
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d11f      	bne.n	8013f6c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8013f2c:	4b48      	ldr	r3, [pc, #288]	; (8014050 <xTaskIncrementTick+0x14c>)
 8013f2e:	681b      	ldr	r3, [r3, #0]
 8013f30:	681b      	ldr	r3, [r3, #0]
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d009      	beq.n	8013f4a <xTaskIncrementTick+0x46>
 8013f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f3a:	f383 8811 	msr	BASEPRI, r3
 8013f3e:	f3bf 8f6f 	isb	sy
 8013f42:	f3bf 8f4f 	dsb	sy
 8013f46:	603b      	str	r3, [r7, #0]
 8013f48:	e7fe      	b.n	8013f48 <xTaskIncrementTick+0x44>
 8013f4a:	4b41      	ldr	r3, [pc, #260]	; (8014050 <xTaskIncrementTick+0x14c>)
 8013f4c:	681b      	ldr	r3, [r3, #0]
 8013f4e:	60fb      	str	r3, [r7, #12]
 8013f50:	4b40      	ldr	r3, [pc, #256]	; (8014054 <xTaskIncrementTick+0x150>)
 8013f52:	681b      	ldr	r3, [r3, #0]
 8013f54:	4a3e      	ldr	r2, [pc, #248]	; (8014050 <xTaskIncrementTick+0x14c>)
 8013f56:	6013      	str	r3, [r2, #0]
 8013f58:	4a3e      	ldr	r2, [pc, #248]	; (8014054 <xTaskIncrementTick+0x150>)
 8013f5a:	68fb      	ldr	r3, [r7, #12]
 8013f5c:	6013      	str	r3, [r2, #0]
 8013f5e:	4b3e      	ldr	r3, [pc, #248]	; (8014058 <xTaskIncrementTick+0x154>)
 8013f60:	681b      	ldr	r3, [r3, #0]
 8013f62:	3301      	adds	r3, #1
 8013f64:	4a3c      	ldr	r2, [pc, #240]	; (8014058 <xTaskIncrementTick+0x154>)
 8013f66:	6013      	str	r3, [r2, #0]
 8013f68:	f000 fa98 	bl	801449c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013f6c:	4b3b      	ldr	r3, [pc, #236]	; (801405c <xTaskIncrementTick+0x158>)
 8013f6e:	681b      	ldr	r3, [r3, #0]
 8013f70:	693a      	ldr	r2, [r7, #16]
 8013f72:	429a      	cmp	r2, r3
 8013f74:	d348      	bcc.n	8014008 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013f76:	4b36      	ldr	r3, [pc, #216]	; (8014050 <xTaskIncrementTick+0x14c>)
 8013f78:	681b      	ldr	r3, [r3, #0]
 8013f7a:	681b      	ldr	r3, [r3, #0]
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	d104      	bne.n	8013f8a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013f80:	4b36      	ldr	r3, [pc, #216]	; (801405c <xTaskIncrementTick+0x158>)
 8013f82:	f04f 32ff 	mov.w	r2, #4294967295
 8013f86:	601a      	str	r2, [r3, #0]
					break;
 8013f88:	e03e      	b.n	8014008 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013f8a:	4b31      	ldr	r3, [pc, #196]	; (8014050 <xTaskIncrementTick+0x14c>)
 8013f8c:	681b      	ldr	r3, [r3, #0]
 8013f8e:	68db      	ldr	r3, [r3, #12]
 8013f90:	68db      	ldr	r3, [r3, #12]
 8013f92:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013f94:	68bb      	ldr	r3, [r7, #8]
 8013f96:	685b      	ldr	r3, [r3, #4]
 8013f98:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013f9a:	693a      	ldr	r2, [r7, #16]
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	429a      	cmp	r2, r3
 8013fa0:	d203      	bcs.n	8013faa <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013fa2:	4a2e      	ldr	r2, [pc, #184]	; (801405c <xTaskIncrementTick+0x158>)
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013fa8:	e02e      	b.n	8014008 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013faa:	68bb      	ldr	r3, [r7, #8]
 8013fac:	3304      	adds	r3, #4
 8013fae:	4618      	mov	r0, r3
 8013fb0:	f7fe ff35 	bl	8012e1e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013fb4:	68bb      	ldr	r3, [r7, #8]
 8013fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d004      	beq.n	8013fc6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013fbc:	68bb      	ldr	r3, [r7, #8]
 8013fbe:	3318      	adds	r3, #24
 8013fc0:	4618      	mov	r0, r3
 8013fc2:	f7fe ff2c 	bl	8012e1e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013fc6:	68bb      	ldr	r3, [r7, #8]
 8013fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fca:	2201      	movs	r2, #1
 8013fcc:	409a      	lsls	r2, r3
 8013fce:	4b24      	ldr	r3, [pc, #144]	; (8014060 <xTaskIncrementTick+0x15c>)
 8013fd0:	681b      	ldr	r3, [r3, #0]
 8013fd2:	4313      	orrs	r3, r2
 8013fd4:	4a22      	ldr	r2, [pc, #136]	; (8014060 <xTaskIncrementTick+0x15c>)
 8013fd6:	6013      	str	r3, [r2, #0]
 8013fd8:	68bb      	ldr	r3, [r7, #8]
 8013fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013fdc:	4613      	mov	r3, r2
 8013fde:	009b      	lsls	r3, r3, #2
 8013fe0:	4413      	add	r3, r2
 8013fe2:	009b      	lsls	r3, r3, #2
 8013fe4:	4a1f      	ldr	r2, [pc, #124]	; (8014064 <xTaskIncrementTick+0x160>)
 8013fe6:	441a      	add	r2, r3
 8013fe8:	68bb      	ldr	r3, [r7, #8]
 8013fea:	3304      	adds	r3, #4
 8013fec:	4619      	mov	r1, r3
 8013fee:	4610      	mov	r0, r2
 8013ff0:	f7fe feb8 	bl	8012d64 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013ff4:	68bb      	ldr	r3, [r7, #8]
 8013ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ff8:	4b1b      	ldr	r3, [pc, #108]	; (8014068 <xTaskIncrementTick+0x164>)
 8013ffa:	681b      	ldr	r3, [r3, #0]
 8013ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ffe:	429a      	cmp	r2, r3
 8014000:	d3b9      	bcc.n	8013f76 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8014002:	2301      	movs	r3, #1
 8014004:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014006:	e7b6      	b.n	8013f76 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014008:	4b17      	ldr	r3, [pc, #92]	; (8014068 <xTaskIncrementTick+0x164>)
 801400a:	681b      	ldr	r3, [r3, #0]
 801400c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801400e:	4915      	ldr	r1, [pc, #84]	; (8014064 <xTaskIncrementTick+0x160>)
 8014010:	4613      	mov	r3, r2
 8014012:	009b      	lsls	r3, r3, #2
 8014014:	4413      	add	r3, r2
 8014016:	009b      	lsls	r3, r3, #2
 8014018:	440b      	add	r3, r1
 801401a:	681b      	ldr	r3, [r3, #0]
 801401c:	2b01      	cmp	r3, #1
 801401e:	d907      	bls.n	8014030 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8014020:	2301      	movs	r3, #1
 8014022:	617b      	str	r3, [r7, #20]
 8014024:	e004      	b.n	8014030 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8014026:	4b11      	ldr	r3, [pc, #68]	; (801406c <xTaskIncrementTick+0x168>)
 8014028:	681b      	ldr	r3, [r3, #0]
 801402a:	3301      	adds	r3, #1
 801402c:	4a0f      	ldr	r2, [pc, #60]	; (801406c <xTaskIncrementTick+0x168>)
 801402e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8014030:	4b0f      	ldr	r3, [pc, #60]	; (8014070 <xTaskIncrementTick+0x16c>)
 8014032:	681b      	ldr	r3, [r3, #0]
 8014034:	2b00      	cmp	r3, #0
 8014036:	d001      	beq.n	801403c <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8014038:	2301      	movs	r3, #1
 801403a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801403c:	697b      	ldr	r3, [r7, #20]
}
 801403e:	4618      	mov	r0, r3
 8014040:	3718      	adds	r7, #24
 8014042:	46bd      	mov	sp, r7
 8014044:	bd80      	pop	{r7, pc}
 8014046:	bf00      	nop
 8014048:	20001134 	.word	0x20001134
 801404c:	20001110 	.word	0x20001110
 8014050:	200010c4 	.word	0x200010c4
 8014054:	200010c8 	.word	0x200010c8
 8014058:	20001124 	.word	0x20001124
 801405c:	2000112c 	.word	0x2000112c
 8014060:	20001114 	.word	0x20001114
 8014064:	20001010 	.word	0x20001010
 8014068:	2000100c 	.word	0x2000100c
 801406c:	2000111c 	.word	0x2000111c
 8014070:	20001120 	.word	0x20001120

08014074 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014074:	b480      	push	{r7}
 8014076:	b087      	sub	sp, #28
 8014078:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801407a:	4b26      	ldr	r3, [pc, #152]	; (8014114 <vTaskSwitchContext+0xa0>)
 801407c:	681b      	ldr	r3, [r3, #0]
 801407e:	2b00      	cmp	r3, #0
 8014080:	d003      	beq.n	801408a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014082:	4b25      	ldr	r3, [pc, #148]	; (8014118 <vTaskSwitchContext+0xa4>)
 8014084:	2201      	movs	r2, #1
 8014086:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014088:	e03e      	b.n	8014108 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 801408a:	4b23      	ldr	r3, [pc, #140]	; (8014118 <vTaskSwitchContext+0xa4>)
 801408c:	2200      	movs	r2, #0
 801408e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014090:	4b22      	ldr	r3, [pc, #136]	; (801411c <vTaskSwitchContext+0xa8>)
 8014092:	681b      	ldr	r3, [r3, #0]
 8014094:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8014096:	68fb      	ldr	r3, [r7, #12]
 8014098:	fab3 f383 	clz	r3, r3
 801409c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801409e:	7afb      	ldrb	r3, [r7, #11]
 80140a0:	f1c3 031f 	rsb	r3, r3, #31
 80140a4:	617b      	str	r3, [r7, #20]
 80140a6:	491e      	ldr	r1, [pc, #120]	; (8014120 <vTaskSwitchContext+0xac>)
 80140a8:	697a      	ldr	r2, [r7, #20]
 80140aa:	4613      	mov	r3, r2
 80140ac:	009b      	lsls	r3, r3, #2
 80140ae:	4413      	add	r3, r2
 80140b0:	009b      	lsls	r3, r3, #2
 80140b2:	440b      	add	r3, r1
 80140b4:	681b      	ldr	r3, [r3, #0]
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	d109      	bne.n	80140ce <vTaskSwitchContext+0x5a>
	__asm volatile
 80140ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140be:	f383 8811 	msr	BASEPRI, r3
 80140c2:	f3bf 8f6f 	isb	sy
 80140c6:	f3bf 8f4f 	dsb	sy
 80140ca:	607b      	str	r3, [r7, #4]
 80140cc:	e7fe      	b.n	80140cc <vTaskSwitchContext+0x58>
 80140ce:	697a      	ldr	r2, [r7, #20]
 80140d0:	4613      	mov	r3, r2
 80140d2:	009b      	lsls	r3, r3, #2
 80140d4:	4413      	add	r3, r2
 80140d6:	009b      	lsls	r3, r3, #2
 80140d8:	4a11      	ldr	r2, [pc, #68]	; (8014120 <vTaskSwitchContext+0xac>)
 80140da:	4413      	add	r3, r2
 80140dc:	613b      	str	r3, [r7, #16]
 80140de:	693b      	ldr	r3, [r7, #16]
 80140e0:	685b      	ldr	r3, [r3, #4]
 80140e2:	685a      	ldr	r2, [r3, #4]
 80140e4:	693b      	ldr	r3, [r7, #16]
 80140e6:	605a      	str	r2, [r3, #4]
 80140e8:	693b      	ldr	r3, [r7, #16]
 80140ea:	685a      	ldr	r2, [r3, #4]
 80140ec:	693b      	ldr	r3, [r7, #16]
 80140ee:	3308      	adds	r3, #8
 80140f0:	429a      	cmp	r2, r3
 80140f2:	d104      	bne.n	80140fe <vTaskSwitchContext+0x8a>
 80140f4:	693b      	ldr	r3, [r7, #16]
 80140f6:	685b      	ldr	r3, [r3, #4]
 80140f8:	685a      	ldr	r2, [r3, #4]
 80140fa:	693b      	ldr	r3, [r7, #16]
 80140fc:	605a      	str	r2, [r3, #4]
 80140fe:	693b      	ldr	r3, [r7, #16]
 8014100:	685b      	ldr	r3, [r3, #4]
 8014102:	68db      	ldr	r3, [r3, #12]
 8014104:	4a07      	ldr	r2, [pc, #28]	; (8014124 <vTaskSwitchContext+0xb0>)
 8014106:	6013      	str	r3, [r2, #0]
}
 8014108:	bf00      	nop
 801410a:	371c      	adds	r7, #28
 801410c:	46bd      	mov	sp, r7
 801410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014112:	4770      	bx	lr
 8014114:	20001134 	.word	0x20001134
 8014118:	20001120 	.word	0x20001120
 801411c:	20001114 	.word	0x20001114
 8014120:	20001010 	.word	0x20001010
 8014124:	2000100c 	.word	0x2000100c

08014128 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014128:	b580      	push	{r7, lr}
 801412a:	b084      	sub	sp, #16
 801412c:	af00      	add	r7, sp, #0
 801412e:	6078      	str	r0, [r7, #4]
 8014130:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	2b00      	cmp	r3, #0
 8014136:	d109      	bne.n	801414c <vTaskPlaceOnEventList+0x24>
 8014138:	f04f 0350 	mov.w	r3, #80	; 0x50
 801413c:	f383 8811 	msr	BASEPRI, r3
 8014140:	f3bf 8f6f 	isb	sy
 8014144:	f3bf 8f4f 	dsb	sy
 8014148:	60fb      	str	r3, [r7, #12]
 801414a:	e7fe      	b.n	801414a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801414c:	4b07      	ldr	r3, [pc, #28]	; (801416c <vTaskPlaceOnEventList+0x44>)
 801414e:	681b      	ldr	r3, [r3, #0]
 8014150:	3318      	adds	r3, #24
 8014152:	4619      	mov	r1, r3
 8014154:	6878      	ldr	r0, [r7, #4]
 8014156:	f7fe fe29 	bl	8012dac <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801415a:	2101      	movs	r1, #1
 801415c:	6838      	ldr	r0, [r7, #0]
 801415e:	f000 fc43 	bl	80149e8 <prvAddCurrentTaskToDelayedList>
}
 8014162:	bf00      	nop
 8014164:	3710      	adds	r7, #16
 8014166:	46bd      	mov	sp, r7
 8014168:	bd80      	pop	{r7, pc}
 801416a:	bf00      	nop
 801416c:	2000100c 	.word	0x2000100c

08014170 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014170:	b580      	push	{r7, lr}
 8014172:	b086      	sub	sp, #24
 8014174:	af00      	add	r7, sp, #0
 8014176:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	68db      	ldr	r3, [r3, #12]
 801417c:	68db      	ldr	r3, [r3, #12]
 801417e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014180:	693b      	ldr	r3, [r7, #16]
 8014182:	2b00      	cmp	r3, #0
 8014184:	d109      	bne.n	801419a <xTaskRemoveFromEventList+0x2a>
 8014186:	f04f 0350 	mov.w	r3, #80	; 0x50
 801418a:	f383 8811 	msr	BASEPRI, r3
 801418e:	f3bf 8f6f 	isb	sy
 8014192:	f3bf 8f4f 	dsb	sy
 8014196:	60fb      	str	r3, [r7, #12]
 8014198:	e7fe      	b.n	8014198 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801419a:	693b      	ldr	r3, [r7, #16]
 801419c:	3318      	adds	r3, #24
 801419e:	4618      	mov	r0, r3
 80141a0:	f7fe fe3d 	bl	8012e1e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80141a4:	4b1d      	ldr	r3, [pc, #116]	; (801421c <xTaskRemoveFromEventList+0xac>)
 80141a6:	681b      	ldr	r3, [r3, #0]
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	d11c      	bne.n	80141e6 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80141ac:	693b      	ldr	r3, [r7, #16]
 80141ae:	3304      	adds	r3, #4
 80141b0:	4618      	mov	r0, r3
 80141b2:	f7fe fe34 	bl	8012e1e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80141b6:	693b      	ldr	r3, [r7, #16]
 80141b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141ba:	2201      	movs	r2, #1
 80141bc:	409a      	lsls	r2, r3
 80141be:	4b18      	ldr	r3, [pc, #96]	; (8014220 <xTaskRemoveFromEventList+0xb0>)
 80141c0:	681b      	ldr	r3, [r3, #0]
 80141c2:	4313      	orrs	r3, r2
 80141c4:	4a16      	ldr	r2, [pc, #88]	; (8014220 <xTaskRemoveFromEventList+0xb0>)
 80141c6:	6013      	str	r3, [r2, #0]
 80141c8:	693b      	ldr	r3, [r7, #16]
 80141ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80141cc:	4613      	mov	r3, r2
 80141ce:	009b      	lsls	r3, r3, #2
 80141d0:	4413      	add	r3, r2
 80141d2:	009b      	lsls	r3, r3, #2
 80141d4:	4a13      	ldr	r2, [pc, #76]	; (8014224 <xTaskRemoveFromEventList+0xb4>)
 80141d6:	441a      	add	r2, r3
 80141d8:	693b      	ldr	r3, [r7, #16]
 80141da:	3304      	adds	r3, #4
 80141dc:	4619      	mov	r1, r3
 80141de:	4610      	mov	r0, r2
 80141e0:	f7fe fdc0 	bl	8012d64 <vListInsertEnd>
 80141e4:	e005      	b.n	80141f2 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80141e6:	693b      	ldr	r3, [r7, #16]
 80141e8:	3318      	adds	r3, #24
 80141ea:	4619      	mov	r1, r3
 80141ec:	480e      	ldr	r0, [pc, #56]	; (8014228 <xTaskRemoveFromEventList+0xb8>)
 80141ee:	f7fe fdb9 	bl	8012d64 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80141f2:	693b      	ldr	r3, [r7, #16]
 80141f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80141f6:	4b0d      	ldr	r3, [pc, #52]	; (801422c <xTaskRemoveFromEventList+0xbc>)
 80141f8:	681b      	ldr	r3, [r3, #0]
 80141fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141fc:	429a      	cmp	r2, r3
 80141fe:	d905      	bls.n	801420c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014200:	2301      	movs	r3, #1
 8014202:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014204:	4b0a      	ldr	r3, [pc, #40]	; (8014230 <xTaskRemoveFromEventList+0xc0>)
 8014206:	2201      	movs	r2, #1
 8014208:	601a      	str	r2, [r3, #0]
 801420a:	e001      	b.n	8014210 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 801420c:	2300      	movs	r3, #0
 801420e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014210:	697b      	ldr	r3, [r7, #20]
}
 8014212:	4618      	mov	r0, r3
 8014214:	3718      	adds	r7, #24
 8014216:	46bd      	mov	sp, r7
 8014218:	bd80      	pop	{r7, pc}
 801421a:	bf00      	nop
 801421c:	20001134 	.word	0x20001134
 8014220:	20001114 	.word	0x20001114
 8014224:	20001010 	.word	0x20001010
 8014228:	200010cc 	.word	0x200010cc
 801422c:	2000100c 	.word	0x2000100c
 8014230:	20001120 	.word	0x20001120

08014234 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014234:	b480      	push	{r7}
 8014236:	b083      	sub	sp, #12
 8014238:	af00      	add	r7, sp, #0
 801423a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801423c:	4b06      	ldr	r3, [pc, #24]	; (8014258 <vTaskInternalSetTimeOutState+0x24>)
 801423e:	681a      	ldr	r2, [r3, #0]
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014244:	4b05      	ldr	r3, [pc, #20]	; (801425c <vTaskInternalSetTimeOutState+0x28>)
 8014246:	681a      	ldr	r2, [r3, #0]
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	605a      	str	r2, [r3, #4]
}
 801424c:	bf00      	nop
 801424e:	370c      	adds	r7, #12
 8014250:	46bd      	mov	sp, r7
 8014252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014256:	4770      	bx	lr
 8014258:	20001124 	.word	0x20001124
 801425c:	20001110 	.word	0x20001110

08014260 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014260:	b580      	push	{r7, lr}
 8014262:	b088      	sub	sp, #32
 8014264:	af00      	add	r7, sp, #0
 8014266:	6078      	str	r0, [r7, #4]
 8014268:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	2b00      	cmp	r3, #0
 801426e:	d109      	bne.n	8014284 <xTaskCheckForTimeOut+0x24>
 8014270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014274:	f383 8811 	msr	BASEPRI, r3
 8014278:	f3bf 8f6f 	isb	sy
 801427c:	f3bf 8f4f 	dsb	sy
 8014280:	613b      	str	r3, [r7, #16]
 8014282:	e7fe      	b.n	8014282 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8014284:	683b      	ldr	r3, [r7, #0]
 8014286:	2b00      	cmp	r3, #0
 8014288:	d109      	bne.n	801429e <xTaskCheckForTimeOut+0x3e>
 801428a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801428e:	f383 8811 	msr	BASEPRI, r3
 8014292:	f3bf 8f6f 	isb	sy
 8014296:	f3bf 8f4f 	dsb	sy
 801429a:	60fb      	str	r3, [r7, #12]
 801429c:	e7fe      	b.n	801429c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 801429e:	f000 fd2d 	bl	8014cfc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80142a2:	4b1d      	ldr	r3, [pc, #116]	; (8014318 <xTaskCheckForTimeOut+0xb8>)
 80142a4:	681b      	ldr	r3, [r3, #0]
 80142a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	685b      	ldr	r3, [r3, #4]
 80142ac:	69ba      	ldr	r2, [r7, #24]
 80142ae:	1ad3      	subs	r3, r2, r3
 80142b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80142b2:	683b      	ldr	r3, [r7, #0]
 80142b4:	681b      	ldr	r3, [r3, #0]
 80142b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80142ba:	d102      	bne.n	80142c2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80142bc:	2300      	movs	r3, #0
 80142be:	61fb      	str	r3, [r7, #28]
 80142c0:	e023      	b.n	801430a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	681a      	ldr	r2, [r3, #0]
 80142c6:	4b15      	ldr	r3, [pc, #84]	; (801431c <xTaskCheckForTimeOut+0xbc>)
 80142c8:	681b      	ldr	r3, [r3, #0]
 80142ca:	429a      	cmp	r2, r3
 80142cc:	d007      	beq.n	80142de <xTaskCheckForTimeOut+0x7e>
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	685b      	ldr	r3, [r3, #4]
 80142d2:	69ba      	ldr	r2, [r7, #24]
 80142d4:	429a      	cmp	r2, r3
 80142d6:	d302      	bcc.n	80142de <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80142d8:	2301      	movs	r3, #1
 80142da:	61fb      	str	r3, [r7, #28]
 80142dc:	e015      	b.n	801430a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80142de:	683b      	ldr	r3, [r7, #0]
 80142e0:	681b      	ldr	r3, [r3, #0]
 80142e2:	697a      	ldr	r2, [r7, #20]
 80142e4:	429a      	cmp	r2, r3
 80142e6:	d20b      	bcs.n	8014300 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80142e8:	683b      	ldr	r3, [r7, #0]
 80142ea:	681a      	ldr	r2, [r3, #0]
 80142ec:	697b      	ldr	r3, [r7, #20]
 80142ee:	1ad2      	subs	r2, r2, r3
 80142f0:	683b      	ldr	r3, [r7, #0]
 80142f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80142f4:	6878      	ldr	r0, [r7, #4]
 80142f6:	f7ff ff9d 	bl	8014234 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80142fa:	2300      	movs	r3, #0
 80142fc:	61fb      	str	r3, [r7, #28]
 80142fe:	e004      	b.n	801430a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8014300:	683b      	ldr	r3, [r7, #0]
 8014302:	2200      	movs	r2, #0
 8014304:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014306:	2301      	movs	r3, #1
 8014308:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801430a:	f000 fd25 	bl	8014d58 <vPortExitCritical>

	return xReturn;
 801430e:	69fb      	ldr	r3, [r7, #28]
}
 8014310:	4618      	mov	r0, r3
 8014312:	3720      	adds	r7, #32
 8014314:	46bd      	mov	sp, r7
 8014316:	bd80      	pop	{r7, pc}
 8014318:	20001110 	.word	0x20001110
 801431c:	20001124 	.word	0x20001124

08014320 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014320:	b480      	push	{r7}
 8014322:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014324:	4b03      	ldr	r3, [pc, #12]	; (8014334 <vTaskMissedYield+0x14>)
 8014326:	2201      	movs	r2, #1
 8014328:	601a      	str	r2, [r3, #0]
}
 801432a:	bf00      	nop
 801432c:	46bd      	mov	sp, r7
 801432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014332:	4770      	bx	lr
 8014334:	20001120 	.word	0x20001120

08014338 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014338:	b580      	push	{r7, lr}
 801433a:	b082      	sub	sp, #8
 801433c:	af00      	add	r7, sp, #0
 801433e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014340:	f000 f852 	bl	80143e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014344:	4b06      	ldr	r3, [pc, #24]	; (8014360 <prvIdleTask+0x28>)
 8014346:	681b      	ldr	r3, [r3, #0]
 8014348:	2b01      	cmp	r3, #1
 801434a:	d9f9      	bls.n	8014340 <prvIdleTask+0x8>
			{
				taskYIELD();
 801434c:	4b05      	ldr	r3, [pc, #20]	; (8014364 <prvIdleTask+0x2c>)
 801434e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014352:	601a      	str	r2, [r3, #0]
 8014354:	f3bf 8f4f 	dsb	sy
 8014358:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801435c:	e7f0      	b.n	8014340 <prvIdleTask+0x8>
 801435e:	bf00      	nop
 8014360:	20001010 	.word	0x20001010
 8014364:	e000ed04 	.word	0xe000ed04

08014368 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014368:	b580      	push	{r7, lr}
 801436a:	b082      	sub	sp, #8
 801436c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801436e:	2300      	movs	r3, #0
 8014370:	607b      	str	r3, [r7, #4]
 8014372:	e00c      	b.n	801438e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014374:	687a      	ldr	r2, [r7, #4]
 8014376:	4613      	mov	r3, r2
 8014378:	009b      	lsls	r3, r3, #2
 801437a:	4413      	add	r3, r2
 801437c:	009b      	lsls	r3, r3, #2
 801437e:	4a12      	ldr	r2, [pc, #72]	; (80143c8 <prvInitialiseTaskLists+0x60>)
 8014380:	4413      	add	r3, r2
 8014382:	4618      	mov	r0, r3
 8014384:	f7fe fcc1 	bl	8012d0a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	3301      	adds	r3, #1
 801438c:	607b      	str	r3, [r7, #4]
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	2b06      	cmp	r3, #6
 8014392:	d9ef      	bls.n	8014374 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014394:	480d      	ldr	r0, [pc, #52]	; (80143cc <prvInitialiseTaskLists+0x64>)
 8014396:	f7fe fcb8 	bl	8012d0a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801439a:	480d      	ldr	r0, [pc, #52]	; (80143d0 <prvInitialiseTaskLists+0x68>)
 801439c:	f7fe fcb5 	bl	8012d0a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80143a0:	480c      	ldr	r0, [pc, #48]	; (80143d4 <prvInitialiseTaskLists+0x6c>)
 80143a2:	f7fe fcb2 	bl	8012d0a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80143a6:	480c      	ldr	r0, [pc, #48]	; (80143d8 <prvInitialiseTaskLists+0x70>)
 80143a8:	f7fe fcaf 	bl	8012d0a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80143ac:	480b      	ldr	r0, [pc, #44]	; (80143dc <prvInitialiseTaskLists+0x74>)
 80143ae:	f7fe fcac 	bl	8012d0a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80143b2:	4b0b      	ldr	r3, [pc, #44]	; (80143e0 <prvInitialiseTaskLists+0x78>)
 80143b4:	4a05      	ldr	r2, [pc, #20]	; (80143cc <prvInitialiseTaskLists+0x64>)
 80143b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80143b8:	4b0a      	ldr	r3, [pc, #40]	; (80143e4 <prvInitialiseTaskLists+0x7c>)
 80143ba:	4a05      	ldr	r2, [pc, #20]	; (80143d0 <prvInitialiseTaskLists+0x68>)
 80143bc:	601a      	str	r2, [r3, #0]
}
 80143be:	bf00      	nop
 80143c0:	3708      	adds	r7, #8
 80143c2:	46bd      	mov	sp, r7
 80143c4:	bd80      	pop	{r7, pc}
 80143c6:	bf00      	nop
 80143c8:	20001010 	.word	0x20001010
 80143cc:	2000109c 	.word	0x2000109c
 80143d0:	200010b0 	.word	0x200010b0
 80143d4:	200010cc 	.word	0x200010cc
 80143d8:	200010e0 	.word	0x200010e0
 80143dc:	200010f8 	.word	0x200010f8
 80143e0:	200010c4 	.word	0x200010c4
 80143e4:	200010c8 	.word	0x200010c8

080143e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80143e8:	b580      	push	{r7, lr}
 80143ea:	b082      	sub	sp, #8
 80143ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80143ee:	e019      	b.n	8014424 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80143f0:	f000 fc84 	bl	8014cfc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80143f4:	4b0f      	ldr	r3, [pc, #60]	; (8014434 <prvCheckTasksWaitingTermination+0x4c>)
 80143f6:	68db      	ldr	r3, [r3, #12]
 80143f8:	68db      	ldr	r3, [r3, #12]
 80143fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	3304      	adds	r3, #4
 8014400:	4618      	mov	r0, r3
 8014402:	f7fe fd0c 	bl	8012e1e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014406:	4b0c      	ldr	r3, [pc, #48]	; (8014438 <prvCheckTasksWaitingTermination+0x50>)
 8014408:	681b      	ldr	r3, [r3, #0]
 801440a:	3b01      	subs	r3, #1
 801440c:	4a0a      	ldr	r2, [pc, #40]	; (8014438 <prvCheckTasksWaitingTermination+0x50>)
 801440e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014410:	4b0a      	ldr	r3, [pc, #40]	; (801443c <prvCheckTasksWaitingTermination+0x54>)
 8014412:	681b      	ldr	r3, [r3, #0]
 8014414:	3b01      	subs	r3, #1
 8014416:	4a09      	ldr	r2, [pc, #36]	; (801443c <prvCheckTasksWaitingTermination+0x54>)
 8014418:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801441a:	f000 fc9d 	bl	8014d58 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801441e:	6878      	ldr	r0, [r7, #4]
 8014420:	f000 f80e 	bl	8014440 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014424:	4b05      	ldr	r3, [pc, #20]	; (801443c <prvCheckTasksWaitingTermination+0x54>)
 8014426:	681b      	ldr	r3, [r3, #0]
 8014428:	2b00      	cmp	r3, #0
 801442a:	d1e1      	bne.n	80143f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801442c:	bf00      	nop
 801442e:	3708      	adds	r7, #8
 8014430:	46bd      	mov	sp, r7
 8014432:	bd80      	pop	{r7, pc}
 8014434:	200010e0 	.word	0x200010e0
 8014438:	2000110c 	.word	0x2000110c
 801443c:	200010f4 	.word	0x200010f4

08014440 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014440:	b580      	push	{r7, lr}
 8014442:	b084      	sub	sp, #16
 8014444:	af00      	add	r7, sp, #0
 8014446:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801444e:	2b00      	cmp	r3, #0
 8014450:	d108      	bne.n	8014464 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014456:	4618      	mov	r0, r3
 8014458:	f000 fe2c 	bl	80150b4 <vPortFree>
				vPortFree( pxTCB );
 801445c:	6878      	ldr	r0, [r7, #4]
 801445e:	f000 fe29 	bl	80150b4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014462:	e017      	b.n	8014494 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801446a:	2b01      	cmp	r3, #1
 801446c:	d103      	bne.n	8014476 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801446e:	6878      	ldr	r0, [r7, #4]
 8014470:	f000 fe20 	bl	80150b4 <vPortFree>
	}
 8014474:	e00e      	b.n	8014494 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801447c:	2b02      	cmp	r3, #2
 801447e:	d009      	beq.n	8014494 <prvDeleteTCB+0x54>
 8014480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014484:	f383 8811 	msr	BASEPRI, r3
 8014488:	f3bf 8f6f 	isb	sy
 801448c:	f3bf 8f4f 	dsb	sy
 8014490:	60fb      	str	r3, [r7, #12]
 8014492:	e7fe      	b.n	8014492 <prvDeleteTCB+0x52>
	}
 8014494:	bf00      	nop
 8014496:	3710      	adds	r7, #16
 8014498:	46bd      	mov	sp, r7
 801449a:	bd80      	pop	{r7, pc}

0801449c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801449c:	b480      	push	{r7}
 801449e:	b083      	sub	sp, #12
 80144a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80144a2:	4b0c      	ldr	r3, [pc, #48]	; (80144d4 <prvResetNextTaskUnblockTime+0x38>)
 80144a4:	681b      	ldr	r3, [r3, #0]
 80144a6:	681b      	ldr	r3, [r3, #0]
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d104      	bne.n	80144b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80144ac:	4b0a      	ldr	r3, [pc, #40]	; (80144d8 <prvResetNextTaskUnblockTime+0x3c>)
 80144ae:	f04f 32ff 	mov.w	r2, #4294967295
 80144b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80144b4:	e008      	b.n	80144c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80144b6:	4b07      	ldr	r3, [pc, #28]	; (80144d4 <prvResetNextTaskUnblockTime+0x38>)
 80144b8:	681b      	ldr	r3, [r3, #0]
 80144ba:	68db      	ldr	r3, [r3, #12]
 80144bc:	68db      	ldr	r3, [r3, #12]
 80144be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	685b      	ldr	r3, [r3, #4]
 80144c4:	4a04      	ldr	r2, [pc, #16]	; (80144d8 <prvResetNextTaskUnblockTime+0x3c>)
 80144c6:	6013      	str	r3, [r2, #0]
}
 80144c8:	bf00      	nop
 80144ca:	370c      	adds	r7, #12
 80144cc:	46bd      	mov	sp, r7
 80144ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144d2:	4770      	bx	lr
 80144d4:	200010c4 	.word	0x200010c4
 80144d8:	2000112c 	.word	0x2000112c

080144dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80144dc:	b480      	push	{r7}
 80144de:	b083      	sub	sp, #12
 80144e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80144e2:	4b0b      	ldr	r3, [pc, #44]	; (8014510 <xTaskGetSchedulerState+0x34>)
 80144e4:	681b      	ldr	r3, [r3, #0]
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	d102      	bne.n	80144f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80144ea:	2301      	movs	r3, #1
 80144ec:	607b      	str	r3, [r7, #4]
 80144ee:	e008      	b.n	8014502 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80144f0:	4b08      	ldr	r3, [pc, #32]	; (8014514 <xTaskGetSchedulerState+0x38>)
 80144f2:	681b      	ldr	r3, [r3, #0]
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d102      	bne.n	80144fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80144f8:	2302      	movs	r3, #2
 80144fa:	607b      	str	r3, [r7, #4]
 80144fc:	e001      	b.n	8014502 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80144fe:	2300      	movs	r3, #0
 8014500:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8014502:	687b      	ldr	r3, [r7, #4]
	}
 8014504:	4618      	mov	r0, r3
 8014506:	370c      	adds	r7, #12
 8014508:	46bd      	mov	sp, r7
 801450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801450e:	4770      	bx	lr
 8014510:	20001118 	.word	0x20001118
 8014514:	20001134 	.word	0x20001134

08014518 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014518:	b580      	push	{r7, lr}
 801451a:	b086      	sub	sp, #24
 801451c:	af00      	add	r7, sp, #0
 801451e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014524:	2300      	movs	r3, #0
 8014526:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	2b00      	cmp	r3, #0
 801452c:	d06c      	beq.n	8014608 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801452e:	4b39      	ldr	r3, [pc, #228]	; (8014614 <xTaskPriorityDisinherit+0xfc>)
 8014530:	681b      	ldr	r3, [r3, #0]
 8014532:	693a      	ldr	r2, [r7, #16]
 8014534:	429a      	cmp	r2, r3
 8014536:	d009      	beq.n	801454c <xTaskPriorityDisinherit+0x34>
 8014538:	f04f 0350 	mov.w	r3, #80	; 0x50
 801453c:	f383 8811 	msr	BASEPRI, r3
 8014540:	f3bf 8f6f 	isb	sy
 8014544:	f3bf 8f4f 	dsb	sy
 8014548:	60fb      	str	r3, [r7, #12]
 801454a:	e7fe      	b.n	801454a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 801454c:	693b      	ldr	r3, [r7, #16]
 801454e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014550:	2b00      	cmp	r3, #0
 8014552:	d109      	bne.n	8014568 <xTaskPriorityDisinherit+0x50>
 8014554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014558:	f383 8811 	msr	BASEPRI, r3
 801455c:	f3bf 8f6f 	isb	sy
 8014560:	f3bf 8f4f 	dsb	sy
 8014564:	60bb      	str	r3, [r7, #8]
 8014566:	e7fe      	b.n	8014566 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8014568:	693b      	ldr	r3, [r7, #16]
 801456a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801456c:	1e5a      	subs	r2, r3, #1
 801456e:	693b      	ldr	r3, [r7, #16]
 8014570:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014572:	693b      	ldr	r3, [r7, #16]
 8014574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014576:	693b      	ldr	r3, [r7, #16]
 8014578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801457a:	429a      	cmp	r2, r3
 801457c:	d044      	beq.n	8014608 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801457e:	693b      	ldr	r3, [r7, #16]
 8014580:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014582:	2b00      	cmp	r3, #0
 8014584:	d140      	bne.n	8014608 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014586:	693b      	ldr	r3, [r7, #16]
 8014588:	3304      	adds	r3, #4
 801458a:	4618      	mov	r0, r3
 801458c:	f7fe fc47 	bl	8012e1e <uxListRemove>
 8014590:	4603      	mov	r3, r0
 8014592:	2b00      	cmp	r3, #0
 8014594:	d115      	bne.n	80145c2 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8014596:	693b      	ldr	r3, [r7, #16]
 8014598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801459a:	491f      	ldr	r1, [pc, #124]	; (8014618 <xTaskPriorityDisinherit+0x100>)
 801459c:	4613      	mov	r3, r2
 801459e:	009b      	lsls	r3, r3, #2
 80145a0:	4413      	add	r3, r2
 80145a2:	009b      	lsls	r3, r3, #2
 80145a4:	440b      	add	r3, r1
 80145a6:	681b      	ldr	r3, [r3, #0]
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	d10a      	bne.n	80145c2 <xTaskPriorityDisinherit+0xaa>
 80145ac:	693b      	ldr	r3, [r7, #16]
 80145ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145b0:	2201      	movs	r2, #1
 80145b2:	fa02 f303 	lsl.w	r3, r2, r3
 80145b6:	43da      	mvns	r2, r3
 80145b8:	4b18      	ldr	r3, [pc, #96]	; (801461c <xTaskPriorityDisinherit+0x104>)
 80145ba:	681b      	ldr	r3, [r3, #0]
 80145bc:	4013      	ands	r3, r2
 80145be:	4a17      	ldr	r2, [pc, #92]	; (801461c <xTaskPriorityDisinherit+0x104>)
 80145c0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80145c2:	693b      	ldr	r3, [r7, #16]
 80145c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80145c6:	693b      	ldr	r3, [r7, #16]
 80145c8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80145ca:	693b      	ldr	r3, [r7, #16]
 80145cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145ce:	f1c3 0207 	rsb	r2, r3, #7
 80145d2:	693b      	ldr	r3, [r7, #16]
 80145d4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80145d6:	693b      	ldr	r3, [r7, #16]
 80145d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145da:	2201      	movs	r2, #1
 80145dc:	409a      	lsls	r2, r3
 80145de:	4b0f      	ldr	r3, [pc, #60]	; (801461c <xTaskPriorityDisinherit+0x104>)
 80145e0:	681b      	ldr	r3, [r3, #0]
 80145e2:	4313      	orrs	r3, r2
 80145e4:	4a0d      	ldr	r2, [pc, #52]	; (801461c <xTaskPriorityDisinherit+0x104>)
 80145e6:	6013      	str	r3, [r2, #0]
 80145e8:	693b      	ldr	r3, [r7, #16]
 80145ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80145ec:	4613      	mov	r3, r2
 80145ee:	009b      	lsls	r3, r3, #2
 80145f0:	4413      	add	r3, r2
 80145f2:	009b      	lsls	r3, r3, #2
 80145f4:	4a08      	ldr	r2, [pc, #32]	; (8014618 <xTaskPriorityDisinherit+0x100>)
 80145f6:	441a      	add	r2, r3
 80145f8:	693b      	ldr	r3, [r7, #16]
 80145fa:	3304      	adds	r3, #4
 80145fc:	4619      	mov	r1, r3
 80145fe:	4610      	mov	r0, r2
 8014600:	f7fe fbb0 	bl	8012d64 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014604:	2301      	movs	r3, #1
 8014606:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014608:	697b      	ldr	r3, [r7, #20]
	}
 801460a:	4618      	mov	r0, r3
 801460c:	3718      	adds	r7, #24
 801460e:	46bd      	mov	sp, r7
 8014610:	bd80      	pop	{r7, pc}
 8014612:	bf00      	nop
 8014614:	2000100c 	.word	0x2000100c
 8014618:	20001010 	.word	0x20001010
 801461c:	20001114 	.word	0x20001114

08014620 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8014620:	b580      	push	{r7, lr}
 8014622:	b086      	sub	sp, #24
 8014624:	af00      	add	r7, sp, #0
 8014626:	60f8      	str	r0, [r7, #12]
 8014628:	60b9      	str	r1, [r7, #8]
 801462a:	607a      	str	r2, [r7, #4]
 801462c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 801462e:	f000 fb65 	bl	8014cfc <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8014632:	4b26      	ldr	r3, [pc, #152]	; (80146cc <xTaskNotifyWait+0xac>)
 8014634:	681b      	ldr	r3, [r3, #0]
 8014636:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801463a:	b2db      	uxtb	r3, r3
 801463c:	2b02      	cmp	r3, #2
 801463e:	d01a      	beq.n	8014676 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8014640:	4b22      	ldr	r3, [pc, #136]	; (80146cc <xTaskNotifyWait+0xac>)
 8014642:	681b      	ldr	r3, [r3, #0]
 8014644:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8014646:	68fa      	ldr	r2, [r7, #12]
 8014648:	43d2      	mvns	r2, r2
 801464a:	400a      	ands	r2, r1
 801464c:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801464e:	4b1f      	ldr	r3, [pc, #124]	; (80146cc <xTaskNotifyWait+0xac>)
 8014650:	681b      	ldr	r3, [r3, #0]
 8014652:	2201      	movs	r2, #1
 8014654:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8014658:	683b      	ldr	r3, [r7, #0]
 801465a:	2b00      	cmp	r3, #0
 801465c:	d00b      	beq.n	8014676 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801465e:	2101      	movs	r1, #1
 8014660:	6838      	ldr	r0, [r7, #0]
 8014662:	f000 f9c1 	bl	80149e8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8014666:	4b1a      	ldr	r3, [pc, #104]	; (80146d0 <xTaskNotifyWait+0xb0>)
 8014668:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801466c:	601a      	str	r2, [r3, #0]
 801466e:	f3bf 8f4f 	dsb	sy
 8014672:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8014676:	f000 fb6f 	bl	8014d58 <vPortExitCritical>

		taskENTER_CRITICAL();
 801467a:	f000 fb3f 	bl	8014cfc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	2b00      	cmp	r3, #0
 8014682:	d004      	beq.n	801468e <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8014684:	4b11      	ldr	r3, [pc, #68]	; (80146cc <xTaskNotifyWait+0xac>)
 8014686:	681b      	ldr	r3, [r3, #0]
 8014688:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801468e:	4b0f      	ldr	r3, [pc, #60]	; (80146cc <xTaskNotifyWait+0xac>)
 8014690:	681b      	ldr	r3, [r3, #0]
 8014692:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014696:	b2db      	uxtb	r3, r3
 8014698:	2b02      	cmp	r3, #2
 801469a:	d002      	beq.n	80146a2 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 801469c:	2300      	movs	r3, #0
 801469e:	617b      	str	r3, [r7, #20]
 80146a0:	e008      	b.n	80146b4 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80146a2:	4b0a      	ldr	r3, [pc, #40]	; (80146cc <xTaskNotifyWait+0xac>)
 80146a4:	681b      	ldr	r3, [r3, #0]
 80146a6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80146a8:	68ba      	ldr	r2, [r7, #8]
 80146aa:	43d2      	mvns	r2, r2
 80146ac:	400a      	ands	r2, r1
 80146ae:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 80146b0:	2301      	movs	r3, #1
 80146b2:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80146b4:	4b05      	ldr	r3, [pc, #20]	; (80146cc <xTaskNotifyWait+0xac>)
 80146b6:	681b      	ldr	r3, [r3, #0]
 80146b8:	2200      	movs	r2, #0
 80146ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 80146be:	f000 fb4b 	bl	8014d58 <vPortExitCritical>

		return xReturn;
 80146c2:	697b      	ldr	r3, [r7, #20]
	}
 80146c4:	4618      	mov	r0, r3
 80146c6:	3718      	adds	r7, #24
 80146c8:	46bd      	mov	sp, r7
 80146ca:	bd80      	pop	{r7, pc}
 80146cc:	2000100c 	.word	0x2000100c
 80146d0:	e000ed04 	.word	0xe000ed04

080146d4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80146d4:	b580      	push	{r7, lr}
 80146d6:	b08a      	sub	sp, #40	; 0x28
 80146d8:	af00      	add	r7, sp, #0
 80146da:	60f8      	str	r0, [r7, #12]
 80146dc:	60b9      	str	r1, [r7, #8]
 80146de:	603b      	str	r3, [r7, #0]
 80146e0:	4613      	mov	r3, r2
 80146e2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80146e4:	2301      	movs	r3, #1
 80146e6:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80146e8:	68fb      	ldr	r3, [r7, #12]
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	d109      	bne.n	8014702 <xTaskGenericNotify+0x2e>
 80146ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146f2:	f383 8811 	msr	BASEPRI, r3
 80146f6:	f3bf 8f6f 	isb	sy
 80146fa:	f3bf 8f4f 	dsb	sy
 80146fe:	61bb      	str	r3, [r7, #24]
 8014700:	e7fe      	b.n	8014700 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 8014702:	68fb      	ldr	r3, [r7, #12]
 8014704:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8014706:	f000 faf9 	bl	8014cfc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 801470a:	683b      	ldr	r3, [r7, #0]
 801470c:	2b00      	cmp	r3, #0
 801470e:	d003      	beq.n	8014718 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8014710:	6a3b      	ldr	r3, [r7, #32]
 8014712:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014714:	683b      	ldr	r3, [r7, #0]
 8014716:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8014718:	6a3b      	ldr	r3, [r7, #32]
 801471a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801471e:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8014720:	6a3b      	ldr	r3, [r7, #32]
 8014722:	2202      	movs	r2, #2
 8014724:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8014728:	79fb      	ldrb	r3, [r7, #7]
 801472a:	2b04      	cmp	r3, #4
 801472c:	d827      	bhi.n	801477e <xTaskGenericNotify+0xaa>
 801472e:	a201      	add	r2, pc, #4	; (adr r2, 8014734 <xTaskGenericNotify+0x60>)
 8014730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014734:	0801479d 	.word	0x0801479d
 8014738:	08014749 	.word	0x08014749
 801473c:	08014757 	.word	0x08014757
 8014740:	08014763 	.word	0x08014763
 8014744:	0801476b 	.word	0x0801476b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8014748:	6a3b      	ldr	r3, [r7, #32]
 801474a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801474c:	68bb      	ldr	r3, [r7, #8]
 801474e:	431a      	orrs	r2, r3
 8014750:	6a3b      	ldr	r3, [r7, #32]
 8014752:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014754:	e025      	b.n	80147a2 <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8014756:	6a3b      	ldr	r3, [r7, #32]
 8014758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801475a:	1c5a      	adds	r2, r3, #1
 801475c:	6a3b      	ldr	r3, [r7, #32]
 801475e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014760:	e01f      	b.n	80147a2 <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8014762:	6a3b      	ldr	r3, [r7, #32]
 8014764:	68ba      	ldr	r2, [r7, #8]
 8014766:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014768:	e01b      	b.n	80147a2 <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801476a:	7ffb      	ldrb	r3, [r7, #31]
 801476c:	2b02      	cmp	r3, #2
 801476e:	d003      	beq.n	8014778 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8014770:	6a3b      	ldr	r3, [r7, #32]
 8014772:	68ba      	ldr	r2, [r7, #8]
 8014774:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8014776:	e014      	b.n	80147a2 <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 8014778:	2300      	movs	r3, #0
 801477a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 801477c:	e011      	b.n	80147a2 <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801477e:	6a3b      	ldr	r3, [r7, #32]
 8014780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014786:	d00b      	beq.n	80147a0 <xTaskGenericNotify+0xcc>
 8014788:	f04f 0350 	mov.w	r3, #80	; 0x50
 801478c:	f383 8811 	msr	BASEPRI, r3
 8014790:	f3bf 8f6f 	isb	sy
 8014794:	f3bf 8f4f 	dsb	sy
 8014798:	617b      	str	r3, [r7, #20]
 801479a:	e7fe      	b.n	801479a <xTaskGenericNotify+0xc6>
					break;
 801479c:	bf00      	nop
 801479e:	e000      	b.n	80147a2 <xTaskGenericNotify+0xce>

					break;
 80147a0:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80147a2:	7ffb      	ldrb	r3, [r7, #31]
 80147a4:	2b01      	cmp	r3, #1
 80147a6:	d138      	bne.n	801481a <xTaskGenericNotify+0x146>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80147a8:	6a3b      	ldr	r3, [r7, #32]
 80147aa:	3304      	adds	r3, #4
 80147ac:	4618      	mov	r0, r3
 80147ae:	f7fe fb36 	bl	8012e1e <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80147b2:	6a3b      	ldr	r3, [r7, #32]
 80147b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147b6:	2201      	movs	r2, #1
 80147b8:	409a      	lsls	r2, r3
 80147ba:	4b1b      	ldr	r3, [pc, #108]	; (8014828 <xTaskGenericNotify+0x154>)
 80147bc:	681b      	ldr	r3, [r3, #0]
 80147be:	4313      	orrs	r3, r2
 80147c0:	4a19      	ldr	r2, [pc, #100]	; (8014828 <xTaskGenericNotify+0x154>)
 80147c2:	6013      	str	r3, [r2, #0]
 80147c4:	6a3b      	ldr	r3, [r7, #32]
 80147c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80147c8:	4613      	mov	r3, r2
 80147ca:	009b      	lsls	r3, r3, #2
 80147cc:	4413      	add	r3, r2
 80147ce:	009b      	lsls	r3, r3, #2
 80147d0:	4a16      	ldr	r2, [pc, #88]	; (801482c <xTaskGenericNotify+0x158>)
 80147d2:	441a      	add	r2, r3
 80147d4:	6a3b      	ldr	r3, [r7, #32]
 80147d6:	3304      	adds	r3, #4
 80147d8:	4619      	mov	r1, r3
 80147da:	4610      	mov	r0, r2
 80147dc:	f7fe fac2 	bl	8012d64 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80147e0:	6a3b      	ldr	r3, [r7, #32]
 80147e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d009      	beq.n	80147fc <xTaskGenericNotify+0x128>
 80147e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147ec:	f383 8811 	msr	BASEPRI, r3
 80147f0:	f3bf 8f6f 	isb	sy
 80147f4:	f3bf 8f4f 	dsb	sy
 80147f8:	613b      	str	r3, [r7, #16]
 80147fa:	e7fe      	b.n	80147fa <xTaskGenericNotify+0x126>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80147fc:	6a3b      	ldr	r3, [r7, #32]
 80147fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014800:	4b0b      	ldr	r3, [pc, #44]	; (8014830 <xTaskGenericNotify+0x15c>)
 8014802:	681b      	ldr	r3, [r3, #0]
 8014804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014806:	429a      	cmp	r2, r3
 8014808:	d907      	bls.n	801481a <xTaskGenericNotify+0x146>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 801480a:	4b0a      	ldr	r3, [pc, #40]	; (8014834 <xTaskGenericNotify+0x160>)
 801480c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014810:	601a      	str	r2, [r3, #0]
 8014812:	f3bf 8f4f 	dsb	sy
 8014816:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801481a:	f000 fa9d 	bl	8014d58 <vPortExitCritical>

		return xReturn;
 801481e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8014820:	4618      	mov	r0, r3
 8014822:	3728      	adds	r7, #40	; 0x28
 8014824:	46bd      	mov	sp, r7
 8014826:	bd80      	pop	{r7, pc}
 8014828:	20001114 	.word	0x20001114
 801482c:	20001010 	.word	0x20001010
 8014830:	2000100c 	.word	0x2000100c
 8014834:	e000ed04 	.word	0xe000ed04

08014838 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8014838:	b580      	push	{r7, lr}
 801483a:	b08e      	sub	sp, #56	; 0x38
 801483c:	af00      	add	r7, sp, #0
 801483e:	60f8      	str	r0, [r7, #12]
 8014840:	60b9      	str	r1, [r7, #8]
 8014842:	603b      	str	r3, [r7, #0]
 8014844:	4613      	mov	r3, r2
 8014846:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8014848:	2301      	movs	r3, #1
 801484a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 801484c:	68fb      	ldr	r3, [r7, #12]
 801484e:	2b00      	cmp	r3, #0
 8014850:	d109      	bne.n	8014866 <xTaskGenericNotifyFromISR+0x2e>
 8014852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014856:	f383 8811 	msr	BASEPRI, r3
 801485a:	f3bf 8f6f 	isb	sy
 801485e:	f3bf 8f4f 	dsb	sy
 8014862:	627b      	str	r3, [r7, #36]	; 0x24
 8014864:	e7fe      	b.n	8014864 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014866:	f000 fb25 	bl	8014eb4 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 801486a:	68fb      	ldr	r3, [r7, #12]
 801486c:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 801486e:	f3ef 8211 	mrs	r2, BASEPRI
 8014872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014876:	f383 8811 	msr	BASEPRI, r3
 801487a:	f3bf 8f6f 	isb	sy
 801487e:	f3bf 8f4f 	dsb	sy
 8014882:	623a      	str	r2, [r7, #32]
 8014884:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8014886:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014888:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 801488a:	683b      	ldr	r3, [r7, #0]
 801488c:	2b00      	cmp	r3, #0
 801488e:	d003      	beq.n	8014898 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8014890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014892:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014894:	683b      	ldr	r3, [r7, #0]
 8014896:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8014898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801489a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801489e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80148a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148a4:	2202      	movs	r2, #2
 80148a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 80148aa:	79fb      	ldrb	r3, [r7, #7]
 80148ac:	2b04      	cmp	r3, #4
 80148ae:	d829      	bhi.n	8014904 <xTaskGenericNotifyFromISR+0xcc>
 80148b0:	a201      	add	r2, pc, #4	; (adr r2, 80148b8 <xTaskGenericNotifyFromISR+0x80>)
 80148b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80148b6:	bf00      	nop
 80148b8:	08014923 	.word	0x08014923
 80148bc:	080148cd 	.word	0x080148cd
 80148c0:	080148db 	.word	0x080148db
 80148c4:	080148e7 	.word	0x080148e7
 80148c8:	080148ef 	.word	0x080148ef
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80148cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80148d0:	68bb      	ldr	r3, [r7, #8]
 80148d2:	431a      	orrs	r2, r3
 80148d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148d6:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80148d8:	e026      	b.n	8014928 <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80148da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80148de:	1c5a      	adds	r2, r3, #1
 80148e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148e2:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80148e4:	e020      	b.n	8014928 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80148e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148e8:	68ba      	ldr	r2, [r7, #8]
 80148ea:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80148ec:	e01c      	b.n	8014928 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80148ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80148f2:	2b02      	cmp	r3, #2
 80148f4:	d003      	beq.n	80148fe <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80148f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148f8:	68ba      	ldr	r2, [r7, #8]
 80148fa:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80148fc:	e014      	b.n	8014928 <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 80148fe:	2300      	movs	r3, #0
 8014900:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8014902:	e011      	b.n	8014928 <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8014904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014908:	f1b3 3fff 	cmp.w	r3, #4294967295
 801490c:	d00b      	beq.n	8014926 <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 801490e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014912:	f383 8811 	msr	BASEPRI, r3
 8014916:	f3bf 8f6f 	isb	sy
 801491a:	f3bf 8f4f 	dsb	sy
 801491e:	61bb      	str	r3, [r7, #24]
 8014920:	e7fe      	b.n	8014920 <xTaskGenericNotifyFromISR+0xe8>
					break;
 8014922:	bf00      	nop
 8014924:	e000      	b.n	8014928 <xTaskGenericNotifyFromISR+0xf0>
					break;
 8014926:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8014928:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801492c:	2b01      	cmp	r3, #1
 801492e:	d144      	bne.n	80149ba <xTaskGenericNotifyFromISR+0x182>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8014930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014934:	2b00      	cmp	r3, #0
 8014936:	d009      	beq.n	801494c <xTaskGenericNotifyFromISR+0x114>
 8014938:	f04f 0350 	mov.w	r3, #80	; 0x50
 801493c:	f383 8811 	msr	BASEPRI, r3
 8014940:	f3bf 8f6f 	isb	sy
 8014944:	f3bf 8f4f 	dsb	sy
 8014948:	617b      	str	r3, [r7, #20]
 801494a:	e7fe      	b.n	801494a <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801494c:	4b20      	ldr	r3, [pc, #128]	; (80149d0 <xTaskGenericNotifyFromISR+0x198>)
 801494e:	681b      	ldr	r3, [r3, #0]
 8014950:	2b00      	cmp	r3, #0
 8014952:	d11c      	bne.n	801498e <xTaskGenericNotifyFromISR+0x156>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014956:	3304      	adds	r3, #4
 8014958:	4618      	mov	r0, r3
 801495a:	f7fe fa60 	bl	8012e1e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801495e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014962:	2201      	movs	r2, #1
 8014964:	409a      	lsls	r2, r3
 8014966:	4b1b      	ldr	r3, [pc, #108]	; (80149d4 <xTaskGenericNotifyFromISR+0x19c>)
 8014968:	681b      	ldr	r3, [r3, #0]
 801496a:	4313      	orrs	r3, r2
 801496c:	4a19      	ldr	r2, [pc, #100]	; (80149d4 <xTaskGenericNotifyFromISR+0x19c>)
 801496e:	6013      	str	r3, [r2, #0]
 8014970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014974:	4613      	mov	r3, r2
 8014976:	009b      	lsls	r3, r3, #2
 8014978:	4413      	add	r3, r2
 801497a:	009b      	lsls	r3, r3, #2
 801497c:	4a16      	ldr	r2, [pc, #88]	; (80149d8 <xTaskGenericNotifyFromISR+0x1a0>)
 801497e:	441a      	add	r2, r3
 8014980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014982:	3304      	adds	r3, #4
 8014984:	4619      	mov	r1, r3
 8014986:	4610      	mov	r0, r2
 8014988:	f7fe f9ec 	bl	8012d64 <vListInsertEnd>
 801498c:	e005      	b.n	801499a <xTaskGenericNotifyFromISR+0x162>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801498e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014990:	3318      	adds	r3, #24
 8014992:	4619      	mov	r1, r3
 8014994:	4811      	ldr	r0, [pc, #68]	; (80149dc <xTaskGenericNotifyFromISR+0x1a4>)
 8014996:	f7fe f9e5 	bl	8012d64 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801499a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801499c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801499e:	4b10      	ldr	r3, [pc, #64]	; (80149e0 <xTaskGenericNotifyFromISR+0x1a8>)
 80149a0:	681b      	ldr	r3, [r3, #0]
 80149a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80149a4:	429a      	cmp	r2, r3
 80149a6:	d908      	bls.n	80149ba <xTaskGenericNotifyFromISR+0x182>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80149a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	d002      	beq.n	80149b4 <xTaskGenericNotifyFromISR+0x17c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80149ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80149b0:	2201      	movs	r2, #1
 80149b2:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80149b4:	4b0b      	ldr	r3, [pc, #44]	; (80149e4 <xTaskGenericNotifyFromISR+0x1ac>)
 80149b6:	2201      	movs	r2, #1
 80149b8:	601a      	str	r2, [r3, #0]
 80149ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149bc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80149be:	693b      	ldr	r3, [r7, #16]
 80149c0:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80149c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80149c6:	4618      	mov	r0, r3
 80149c8:	3738      	adds	r7, #56	; 0x38
 80149ca:	46bd      	mov	sp, r7
 80149cc:	bd80      	pop	{r7, pc}
 80149ce:	bf00      	nop
 80149d0:	20001134 	.word	0x20001134
 80149d4:	20001114 	.word	0x20001114
 80149d8:	20001010 	.word	0x20001010
 80149dc:	200010cc 	.word	0x200010cc
 80149e0:	2000100c 	.word	0x2000100c
 80149e4:	20001120 	.word	0x20001120

080149e8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80149e8:	b580      	push	{r7, lr}
 80149ea:	b084      	sub	sp, #16
 80149ec:	af00      	add	r7, sp, #0
 80149ee:	6078      	str	r0, [r7, #4]
 80149f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80149f2:	4b29      	ldr	r3, [pc, #164]	; (8014a98 <prvAddCurrentTaskToDelayedList+0xb0>)
 80149f4:	681b      	ldr	r3, [r3, #0]
 80149f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80149f8:	4b28      	ldr	r3, [pc, #160]	; (8014a9c <prvAddCurrentTaskToDelayedList+0xb4>)
 80149fa:	681b      	ldr	r3, [r3, #0]
 80149fc:	3304      	adds	r3, #4
 80149fe:	4618      	mov	r0, r3
 8014a00:	f7fe fa0d 	bl	8012e1e <uxListRemove>
 8014a04:	4603      	mov	r3, r0
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	d10b      	bne.n	8014a22 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8014a0a:	4b24      	ldr	r3, [pc, #144]	; (8014a9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8014a0c:	681b      	ldr	r3, [r3, #0]
 8014a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a10:	2201      	movs	r2, #1
 8014a12:	fa02 f303 	lsl.w	r3, r2, r3
 8014a16:	43da      	mvns	r2, r3
 8014a18:	4b21      	ldr	r3, [pc, #132]	; (8014aa0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8014a1a:	681b      	ldr	r3, [r3, #0]
 8014a1c:	4013      	ands	r3, r2
 8014a1e:	4a20      	ldr	r2, [pc, #128]	; (8014aa0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8014a20:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a28:	d10a      	bne.n	8014a40 <prvAddCurrentTaskToDelayedList+0x58>
 8014a2a:	683b      	ldr	r3, [r7, #0]
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d007      	beq.n	8014a40 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014a30:	4b1a      	ldr	r3, [pc, #104]	; (8014a9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8014a32:	681b      	ldr	r3, [r3, #0]
 8014a34:	3304      	adds	r3, #4
 8014a36:	4619      	mov	r1, r3
 8014a38:	481a      	ldr	r0, [pc, #104]	; (8014aa4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8014a3a:	f7fe f993 	bl	8012d64 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8014a3e:	e026      	b.n	8014a8e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8014a40:	68fa      	ldr	r2, [r7, #12]
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	4413      	add	r3, r2
 8014a46:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014a48:	4b14      	ldr	r3, [pc, #80]	; (8014a9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8014a4a:	681b      	ldr	r3, [r3, #0]
 8014a4c:	68ba      	ldr	r2, [r7, #8]
 8014a4e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8014a50:	68ba      	ldr	r2, [r7, #8]
 8014a52:	68fb      	ldr	r3, [r7, #12]
 8014a54:	429a      	cmp	r2, r3
 8014a56:	d209      	bcs.n	8014a6c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014a58:	4b13      	ldr	r3, [pc, #76]	; (8014aa8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8014a5a:	681a      	ldr	r2, [r3, #0]
 8014a5c:	4b0f      	ldr	r3, [pc, #60]	; (8014a9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8014a5e:	681b      	ldr	r3, [r3, #0]
 8014a60:	3304      	adds	r3, #4
 8014a62:	4619      	mov	r1, r3
 8014a64:	4610      	mov	r0, r2
 8014a66:	f7fe f9a1 	bl	8012dac <vListInsert>
}
 8014a6a:	e010      	b.n	8014a8e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014a6c:	4b0f      	ldr	r3, [pc, #60]	; (8014aac <prvAddCurrentTaskToDelayedList+0xc4>)
 8014a6e:	681a      	ldr	r2, [r3, #0]
 8014a70:	4b0a      	ldr	r3, [pc, #40]	; (8014a9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8014a72:	681b      	ldr	r3, [r3, #0]
 8014a74:	3304      	adds	r3, #4
 8014a76:	4619      	mov	r1, r3
 8014a78:	4610      	mov	r0, r2
 8014a7a:	f7fe f997 	bl	8012dac <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014a7e:	4b0c      	ldr	r3, [pc, #48]	; (8014ab0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8014a80:	681b      	ldr	r3, [r3, #0]
 8014a82:	68ba      	ldr	r2, [r7, #8]
 8014a84:	429a      	cmp	r2, r3
 8014a86:	d202      	bcs.n	8014a8e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8014a88:	4a09      	ldr	r2, [pc, #36]	; (8014ab0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8014a8a:	68bb      	ldr	r3, [r7, #8]
 8014a8c:	6013      	str	r3, [r2, #0]
}
 8014a8e:	bf00      	nop
 8014a90:	3710      	adds	r7, #16
 8014a92:	46bd      	mov	sp, r7
 8014a94:	bd80      	pop	{r7, pc}
 8014a96:	bf00      	nop
 8014a98:	20001110 	.word	0x20001110
 8014a9c:	2000100c 	.word	0x2000100c
 8014aa0:	20001114 	.word	0x20001114
 8014aa4:	200010f8 	.word	0x200010f8
 8014aa8:	200010c8 	.word	0x200010c8
 8014aac:	200010c4 	.word	0x200010c4
 8014ab0:	2000112c 	.word	0x2000112c

08014ab4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014ab4:	b480      	push	{r7}
 8014ab6:	b085      	sub	sp, #20
 8014ab8:	af00      	add	r7, sp, #0
 8014aba:	60f8      	str	r0, [r7, #12]
 8014abc:	60b9      	str	r1, [r7, #8]
 8014abe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014ac0:	68fb      	ldr	r3, [r7, #12]
 8014ac2:	3b04      	subs	r3, #4
 8014ac4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014ac6:	68fb      	ldr	r3, [r7, #12]
 8014ac8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014acc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014ace:	68fb      	ldr	r3, [r7, #12]
 8014ad0:	3b04      	subs	r3, #4
 8014ad2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014ad4:	68bb      	ldr	r3, [r7, #8]
 8014ad6:	f023 0201 	bic.w	r2, r3, #1
 8014ada:	68fb      	ldr	r3, [r7, #12]
 8014adc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014ade:	68fb      	ldr	r3, [r7, #12]
 8014ae0:	3b04      	subs	r3, #4
 8014ae2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014ae4:	4a0c      	ldr	r2, [pc, #48]	; (8014b18 <pxPortInitialiseStack+0x64>)
 8014ae6:	68fb      	ldr	r3, [r7, #12]
 8014ae8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014aea:	68fb      	ldr	r3, [r7, #12]
 8014aec:	3b14      	subs	r3, #20
 8014aee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014af0:	687a      	ldr	r2, [r7, #4]
 8014af2:	68fb      	ldr	r3, [r7, #12]
 8014af4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014af6:	68fb      	ldr	r3, [r7, #12]
 8014af8:	3b04      	subs	r3, #4
 8014afa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014afc:	68fb      	ldr	r3, [r7, #12]
 8014afe:	f06f 0202 	mvn.w	r2, #2
 8014b02:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014b04:	68fb      	ldr	r3, [r7, #12]
 8014b06:	3b20      	subs	r3, #32
 8014b08:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014b0a:	68fb      	ldr	r3, [r7, #12]
}
 8014b0c:	4618      	mov	r0, r3
 8014b0e:	3714      	adds	r7, #20
 8014b10:	46bd      	mov	sp, r7
 8014b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b16:	4770      	bx	lr
 8014b18:	08014b1d 	.word	0x08014b1d

08014b1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014b1c:	b480      	push	{r7}
 8014b1e:	b085      	sub	sp, #20
 8014b20:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014b22:	2300      	movs	r3, #0
 8014b24:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014b26:	4b11      	ldr	r3, [pc, #68]	; (8014b6c <prvTaskExitError+0x50>)
 8014b28:	681b      	ldr	r3, [r3, #0]
 8014b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b2e:	d009      	beq.n	8014b44 <prvTaskExitError+0x28>
	__asm volatile
 8014b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b34:	f383 8811 	msr	BASEPRI, r3
 8014b38:	f3bf 8f6f 	isb	sy
 8014b3c:	f3bf 8f4f 	dsb	sy
 8014b40:	60fb      	str	r3, [r7, #12]
 8014b42:	e7fe      	b.n	8014b42 <prvTaskExitError+0x26>
 8014b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b48:	f383 8811 	msr	BASEPRI, r3
 8014b4c:	f3bf 8f6f 	isb	sy
 8014b50:	f3bf 8f4f 	dsb	sy
 8014b54:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014b56:	bf00      	nop
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	d0fc      	beq.n	8014b58 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014b5e:	bf00      	nop
 8014b60:	3714      	adds	r7, #20
 8014b62:	46bd      	mov	sp, r7
 8014b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b68:	4770      	bx	lr
 8014b6a:	bf00      	nop
 8014b6c:	20000944 	.word	0x20000944

08014b70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014b70:	4b07      	ldr	r3, [pc, #28]	; (8014b90 <pxCurrentTCBConst2>)
 8014b72:	6819      	ldr	r1, [r3, #0]
 8014b74:	6808      	ldr	r0, [r1, #0]
 8014b76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b7a:	f380 8809 	msr	PSP, r0
 8014b7e:	f3bf 8f6f 	isb	sy
 8014b82:	f04f 0000 	mov.w	r0, #0
 8014b86:	f380 8811 	msr	BASEPRI, r0
 8014b8a:	4770      	bx	lr
 8014b8c:	f3af 8000 	nop.w

08014b90 <pxCurrentTCBConst2>:
 8014b90:	2000100c 	.word	0x2000100c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014b94:	bf00      	nop
 8014b96:	bf00      	nop

08014b98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014b98:	4808      	ldr	r0, [pc, #32]	; (8014bbc <prvPortStartFirstTask+0x24>)
 8014b9a:	6800      	ldr	r0, [r0, #0]
 8014b9c:	6800      	ldr	r0, [r0, #0]
 8014b9e:	f380 8808 	msr	MSP, r0
 8014ba2:	f04f 0000 	mov.w	r0, #0
 8014ba6:	f380 8814 	msr	CONTROL, r0
 8014baa:	b662      	cpsie	i
 8014bac:	b661      	cpsie	f
 8014bae:	f3bf 8f4f 	dsb	sy
 8014bb2:	f3bf 8f6f 	isb	sy
 8014bb6:	df00      	svc	0
 8014bb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8014bba:	bf00      	nop
 8014bbc:	e000ed08 	.word	0xe000ed08

08014bc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014bc0:	b580      	push	{r7, lr}
 8014bc2:	b086      	sub	sp, #24
 8014bc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014bc6:	4b44      	ldr	r3, [pc, #272]	; (8014cd8 <xPortStartScheduler+0x118>)
 8014bc8:	681b      	ldr	r3, [r3, #0]
 8014bca:	4a44      	ldr	r2, [pc, #272]	; (8014cdc <xPortStartScheduler+0x11c>)
 8014bcc:	4293      	cmp	r3, r2
 8014bce:	d109      	bne.n	8014be4 <xPortStartScheduler+0x24>
 8014bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bd4:	f383 8811 	msr	BASEPRI, r3
 8014bd8:	f3bf 8f6f 	isb	sy
 8014bdc:	f3bf 8f4f 	dsb	sy
 8014be0:	613b      	str	r3, [r7, #16]
 8014be2:	e7fe      	b.n	8014be2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014be4:	4b3c      	ldr	r3, [pc, #240]	; (8014cd8 <xPortStartScheduler+0x118>)
 8014be6:	681b      	ldr	r3, [r3, #0]
 8014be8:	4a3d      	ldr	r2, [pc, #244]	; (8014ce0 <xPortStartScheduler+0x120>)
 8014bea:	4293      	cmp	r3, r2
 8014bec:	d109      	bne.n	8014c02 <xPortStartScheduler+0x42>
 8014bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bf2:	f383 8811 	msr	BASEPRI, r3
 8014bf6:	f3bf 8f6f 	isb	sy
 8014bfa:	f3bf 8f4f 	dsb	sy
 8014bfe:	60fb      	str	r3, [r7, #12]
 8014c00:	e7fe      	b.n	8014c00 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014c02:	4b38      	ldr	r3, [pc, #224]	; (8014ce4 <xPortStartScheduler+0x124>)
 8014c04:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014c06:	697b      	ldr	r3, [r7, #20]
 8014c08:	781b      	ldrb	r3, [r3, #0]
 8014c0a:	b2db      	uxtb	r3, r3
 8014c0c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014c0e:	697b      	ldr	r3, [r7, #20]
 8014c10:	22ff      	movs	r2, #255	; 0xff
 8014c12:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014c14:	697b      	ldr	r3, [r7, #20]
 8014c16:	781b      	ldrb	r3, [r3, #0]
 8014c18:	b2db      	uxtb	r3, r3
 8014c1a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014c1c:	78fb      	ldrb	r3, [r7, #3]
 8014c1e:	b2db      	uxtb	r3, r3
 8014c20:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014c24:	b2da      	uxtb	r2, r3
 8014c26:	4b30      	ldr	r3, [pc, #192]	; (8014ce8 <xPortStartScheduler+0x128>)
 8014c28:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014c2a:	4b30      	ldr	r3, [pc, #192]	; (8014cec <xPortStartScheduler+0x12c>)
 8014c2c:	2207      	movs	r2, #7
 8014c2e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014c30:	e009      	b.n	8014c46 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8014c32:	4b2e      	ldr	r3, [pc, #184]	; (8014cec <xPortStartScheduler+0x12c>)
 8014c34:	681b      	ldr	r3, [r3, #0]
 8014c36:	3b01      	subs	r3, #1
 8014c38:	4a2c      	ldr	r2, [pc, #176]	; (8014cec <xPortStartScheduler+0x12c>)
 8014c3a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014c3c:	78fb      	ldrb	r3, [r7, #3]
 8014c3e:	b2db      	uxtb	r3, r3
 8014c40:	005b      	lsls	r3, r3, #1
 8014c42:	b2db      	uxtb	r3, r3
 8014c44:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014c46:	78fb      	ldrb	r3, [r7, #3]
 8014c48:	b2db      	uxtb	r3, r3
 8014c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014c4e:	2b80      	cmp	r3, #128	; 0x80
 8014c50:	d0ef      	beq.n	8014c32 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014c52:	4b26      	ldr	r3, [pc, #152]	; (8014cec <xPortStartScheduler+0x12c>)
 8014c54:	681b      	ldr	r3, [r3, #0]
 8014c56:	f1c3 0307 	rsb	r3, r3, #7
 8014c5a:	2b04      	cmp	r3, #4
 8014c5c:	d009      	beq.n	8014c72 <xPortStartScheduler+0xb2>
 8014c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c62:	f383 8811 	msr	BASEPRI, r3
 8014c66:	f3bf 8f6f 	isb	sy
 8014c6a:	f3bf 8f4f 	dsb	sy
 8014c6e:	60bb      	str	r3, [r7, #8]
 8014c70:	e7fe      	b.n	8014c70 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014c72:	4b1e      	ldr	r3, [pc, #120]	; (8014cec <xPortStartScheduler+0x12c>)
 8014c74:	681b      	ldr	r3, [r3, #0]
 8014c76:	021b      	lsls	r3, r3, #8
 8014c78:	4a1c      	ldr	r2, [pc, #112]	; (8014cec <xPortStartScheduler+0x12c>)
 8014c7a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014c7c:	4b1b      	ldr	r3, [pc, #108]	; (8014cec <xPortStartScheduler+0x12c>)
 8014c7e:	681b      	ldr	r3, [r3, #0]
 8014c80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014c84:	4a19      	ldr	r2, [pc, #100]	; (8014cec <xPortStartScheduler+0x12c>)
 8014c86:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	b2da      	uxtb	r2, r3
 8014c8c:	697b      	ldr	r3, [r7, #20]
 8014c8e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014c90:	4b17      	ldr	r3, [pc, #92]	; (8014cf0 <xPortStartScheduler+0x130>)
 8014c92:	681b      	ldr	r3, [r3, #0]
 8014c94:	4a16      	ldr	r2, [pc, #88]	; (8014cf0 <xPortStartScheduler+0x130>)
 8014c96:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014c9a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014c9c:	4b14      	ldr	r3, [pc, #80]	; (8014cf0 <xPortStartScheduler+0x130>)
 8014c9e:	681b      	ldr	r3, [r3, #0]
 8014ca0:	4a13      	ldr	r2, [pc, #76]	; (8014cf0 <xPortStartScheduler+0x130>)
 8014ca2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8014ca6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014ca8:	f000 f8d6 	bl	8014e58 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014cac:	4b11      	ldr	r3, [pc, #68]	; (8014cf4 <xPortStartScheduler+0x134>)
 8014cae:	2200      	movs	r2, #0
 8014cb0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014cb2:	f000 f8f5 	bl	8014ea0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014cb6:	4b10      	ldr	r3, [pc, #64]	; (8014cf8 <xPortStartScheduler+0x138>)
 8014cb8:	681b      	ldr	r3, [r3, #0]
 8014cba:	4a0f      	ldr	r2, [pc, #60]	; (8014cf8 <xPortStartScheduler+0x138>)
 8014cbc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014cc0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014cc2:	f7ff ff69 	bl	8014b98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014cc6:	f7ff f9d5 	bl	8014074 <vTaskSwitchContext>
	prvTaskExitError();
 8014cca:	f7ff ff27 	bl	8014b1c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014cce:	2300      	movs	r3, #0
}
 8014cd0:	4618      	mov	r0, r3
 8014cd2:	3718      	adds	r7, #24
 8014cd4:	46bd      	mov	sp, r7
 8014cd6:	bd80      	pop	{r7, pc}
 8014cd8:	e000ed00 	.word	0xe000ed00
 8014cdc:	410fc271 	.word	0x410fc271
 8014ce0:	410fc270 	.word	0x410fc270
 8014ce4:	e000e400 	.word	0xe000e400
 8014ce8:	20001138 	.word	0x20001138
 8014cec:	2000113c 	.word	0x2000113c
 8014cf0:	e000ed20 	.word	0xe000ed20
 8014cf4:	20000944 	.word	0x20000944
 8014cf8:	e000ef34 	.word	0xe000ef34

08014cfc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014cfc:	b480      	push	{r7}
 8014cfe:	b083      	sub	sp, #12
 8014d00:	af00      	add	r7, sp, #0
 8014d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d06:	f383 8811 	msr	BASEPRI, r3
 8014d0a:	f3bf 8f6f 	isb	sy
 8014d0e:	f3bf 8f4f 	dsb	sy
 8014d12:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014d14:	4b0e      	ldr	r3, [pc, #56]	; (8014d50 <vPortEnterCritical+0x54>)
 8014d16:	681b      	ldr	r3, [r3, #0]
 8014d18:	3301      	adds	r3, #1
 8014d1a:	4a0d      	ldr	r2, [pc, #52]	; (8014d50 <vPortEnterCritical+0x54>)
 8014d1c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014d1e:	4b0c      	ldr	r3, [pc, #48]	; (8014d50 <vPortEnterCritical+0x54>)
 8014d20:	681b      	ldr	r3, [r3, #0]
 8014d22:	2b01      	cmp	r3, #1
 8014d24:	d10e      	bne.n	8014d44 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014d26:	4b0b      	ldr	r3, [pc, #44]	; (8014d54 <vPortEnterCritical+0x58>)
 8014d28:	681b      	ldr	r3, [r3, #0]
 8014d2a:	b2db      	uxtb	r3, r3
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	d009      	beq.n	8014d44 <vPortEnterCritical+0x48>
 8014d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d34:	f383 8811 	msr	BASEPRI, r3
 8014d38:	f3bf 8f6f 	isb	sy
 8014d3c:	f3bf 8f4f 	dsb	sy
 8014d40:	603b      	str	r3, [r7, #0]
 8014d42:	e7fe      	b.n	8014d42 <vPortEnterCritical+0x46>
	}
}
 8014d44:	bf00      	nop
 8014d46:	370c      	adds	r7, #12
 8014d48:	46bd      	mov	sp, r7
 8014d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d4e:	4770      	bx	lr
 8014d50:	20000944 	.word	0x20000944
 8014d54:	e000ed04 	.word	0xe000ed04

08014d58 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014d58:	b480      	push	{r7}
 8014d5a:	b083      	sub	sp, #12
 8014d5c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8014d5e:	4b11      	ldr	r3, [pc, #68]	; (8014da4 <vPortExitCritical+0x4c>)
 8014d60:	681b      	ldr	r3, [r3, #0]
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	d109      	bne.n	8014d7a <vPortExitCritical+0x22>
 8014d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d6a:	f383 8811 	msr	BASEPRI, r3
 8014d6e:	f3bf 8f6f 	isb	sy
 8014d72:	f3bf 8f4f 	dsb	sy
 8014d76:	607b      	str	r3, [r7, #4]
 8014d78:	e7fe      	b.n	8014d78 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8014d7a:	4b0a      	ldr	r3, [pc, #40]	; (8014da4 <vPortExitCritical+0x4c>)
 8014d7c:	681b      	ldr	r3, [r3, #0]
 8014d7e:	3b01      	subs	r3, #1
 8014d80:	4a08      	ldr	r2, [pc, #32]	; (8014da4 <vPortExitCritical+0x4c>)
 8014d82:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014d84:	4b07      	ldr	r3, [pc, #28]	; (8014da4 <vPortExitCritical+0x4c>)
 8014d86:	681b      	ldr	r3, [r3, #0]
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	d104      	bne.n	8014d96 <vPortExitCritical+0x3e>
 8014d8c:	2300      	movs	r3, #0
 8014d8e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014d90:	683b      	ldr	r3, [r7, #0]
 8014d92:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8014d96:	bf00      	nop
 8014d98:	370c      	adds	r7, #12
 8014d9a:	46bd      	mov	sp, r7
 8014d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014da0:	4770      	bx	lr
 8014da2:	bf00      	nop
 8014da4:	20000944 	.word	0x20000944
	...

08014db0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014db0:	f3ef 8009 	mrs	r0, PSP
 8014db4:	f3bf 8f6f 	isb	sy
 8014db8:	4b15      	ldr	r3, [pc, #84]	; (8014e10 <pxCurrentTCBConst>)
 8014dba:	681a      	ldr	r2, [r3, #0]
 8014dbc:	f01e 0f10 	tst.w	lr, #16
 8014dc0:	bf08      	it	eq
 8014dc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014dc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dca:	6010      	str	r0, [r2, #0]
 8014dcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014dd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014dd4:	f380 8811 	msr	BASEPRI, r0
 8014dd8:	f3bf 8f4f 	dsb	sy
 8014ddc:	f3bf 8f6f 	isb	sy
 8014de0:	f7ff f948 	bl	8014074 <vTaskSwitchContext>
 8014de4:	f04f 0000 	mov.w	r0, #0
 8014de8:	f380 8811 	msr	BASEPRI, r0
 8014dec:	bc09      	pop	{r0, r3}
 8014dee:	6819      	ldr	r1, [r3, #0]
 8014df0:	6808      	ldr	r0, [r1, #0]
 8014df2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014df6:	f01e 0f10 	tst.w	lr, #16
 8014dfa:	bf08      	it	eq
 8014dfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014e00:	f380 8809 	msr	PSP, r0
 8014e04:	f3bf 8f6f 	isb	sy
 8014e08:	4770      	bx	lr
 8014e0a:	bf00      	nop
 8014e0c:	f3af 8000 	nop.w

08014e10 <pxCurrentTCBConst>:
 8014e10:	2000100c 	.word	0x2000100c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014e14:	bf00      	nop
 8014e16:	bf00      	nop

08014e18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014e18:	b580      	push	{r7, lr}
 8014e1a:	b082      	sub	sp, #8
 8014e1c:	af00      	add	r7, sp, #0
	__asm volatile
 8014e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e22:	f383 8811 	msr	BASEPRI, r3
 8014e26:	f3bf 8f6f 	isb	sy
 8014e2a:	f3bf 8f4f 	dsb	sy
 8014e2e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014e30:	f7ff f868 	bl	8013f04 <xTaskIncrementTick>
 8014e34:	4603      	mov	r3, r0
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	d003      	beq.n	8014e42 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014e3a:	4b06      	ldr	r3, [pc, #24]	; (8014e54 <SysTick_Handler+0x3c>)
 8014e3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014e40:	601a      	str	r2, [r3, #0]
 8014e42:	2300      	movs	r3, #0
 8014e44:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014e46:	683b      	ldr	r3, [r7, #0]
 8014e48:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8014e4c:	bf00      	nop
 8014e4e:	3708      	adds	r7, #8
 8014e50:	46bd      	mov	sp, r7
 8014e52:	bd80      	pop	{r7, pc}
 8014e54:	e000ed04 	.word	0xe000ed04

08014e58 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014e58:	b480      	push	{r7}
 8014e5a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014e5c:	4b0b      	ldr	r3, [pc, #44]	; (8014e8c <vPortSetupTimerInterrupt+0x34>)
 8014e5e:	2200      	movs	r2, #0
 8014e60:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014e62:	4b0b      	ldr	r3, [pc, #44]	; (8014e90 <vPortSetupTimerInterrupt+0x38>)
 8014e64:	2200      	movs	r2, #0
 8014e66:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014e68:	4b0a      	ldr	r3, [pc, #40]	; (8014e94 <vPortSetupTimerInterrupt+0x3c>)
 8014e6a:	681b      	ldr	r3, [r3, #0]
 8014e6c:	4a0a      	ldr	r2, [pc, #40]	; (8014e98 <vPortSetupTimerInterrupt+0x40>)
 8014e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8014e72:	099b      	lsrs	r3, r3, #6
 8014e74:	4a09      	ldr	r2, [pc, #36]	; (8014e9c <vPortSetupTimerInterrupt+0x44>)
 8014e76:	3b01      	subs	r3, #1
 8014e78:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8014e7a:	4b04      	ldr	r3, [pc, #16]	; (8014e8c <vPortSetupTimerInterrupt+0x34>)
 8014e7c:	2207      	movs	r2, #7
 8014e7e:	601a      	str	r2, [r3, #0]
}
 8014e80:	bf00      	nop
 8014e82:	46bd      	mov	sp, r7
 8014e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e88:	4770      	bx	lr
 8014e8a:	bf00      	nop
 8014e8c:	e000e010 	.word	0xe000e010
 8014e90:	e000e018 	.word	0xe000e018
 8014e94:	20000828 	.word	0x20000828
 8014e98:	10624dd3 	.word	0x10624dd3
 8014e9c:	e000e014 	.word	0xe000e014

08014ea0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014ea0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014eb0 <vPortEnableVFP+0x10>
 8014ea4:	6801      	ldr	r1, [r0, #0]
 8014ea6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8014eaa:	6001      	str	r1, [r0, #0]
 8014eac:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014eae:	bf00      	nop
 8014eb0:	e000ed88 	.word	0xe000ed88

08014eb4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014eb4:	b480      	push	{r7}
 8014eb6:	b085      	sub	sp, #20
 8014eb8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8014eba:	f3ef 8305 	mrs	r3, IPSR
 8014ebe:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014ec0:	68fb      	ldr	r3, [r7, #12]
 8014ec2:	2b0f      	cmp	r3, #15
 8014ec4:	d913      	bls.n	8014eee <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8014ec6:	4a16      	ldr	r2, [pc, #88]	; (8014f20 <vPortValidateInterruptPriority+0x6c>)
 8014ec8:	68fb      	ldr	r3, [r7, #12]
 8014eca:	4413      	add	r3, r2
 8014ecc:	781b      	ldrb	r3, [r3, #0]
 8014ece:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014ed0:	4b14      	ldr	r3, [pc, #80]	; (8014f24 <vPortValidateInterruptPriority+0x70>)
 8014ed2:	781b      	ldrb	r3, [r3, #0]
 8014ed4:	7afa      	ldrb	r2, [r7, #11]
 8014ed6:	429a      	cmp	r2, r3
 8014ed8:	d209      	bcs.n	8014eee <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8014eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ede:	f383 8811 	msr	BASEPRI, r3
 8014ee2:	f3bf 8f6f 	isb	sy
 8014ee6:	f3bf 8f4f 	dsb	sy
 8014eea:	607b      	str	r3, [r7, #4]
 8014eec:	e7fe      	b.n	8014eec <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014eee:	4b0e      	ldr	r3, [pc, #56]	; (8014f28 <vPortValidateInterruptPriority+0x74>)
 8014ef0:	681b      	ldr	r3, [r3, #0]
 8014ef2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8014ef6:	4b0d      	ldr	r3, [pc, #52]	; (8014f2c <vPortValidateInterruptPriority+0x78>)
 8014ef8:	681b      	ldr	r3, [r3, #0]
 8014efa:	429a      	cmp	r2, r3
 8014efc:	d909      	bls.n	8014f12 <vPortValidateInterruptPriority+0x5e>
 8014efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f02:	f383 8811 	msr	BASEPRI, r3
 8014f06:	f3bf 8f6f 	isb	sy
 8014f0a:	f3bf 8f4f 	dsb	sy
 8014f0e:	603b      	str	r3, [r7, #0]
 8014f10:	e7fe      	b.n	8014f10 <vPortValidateInterruptPriority+0x5c>
	}
 8014f12:	bf00      	nop
 8014f14:	3714      	adds	r7, #20
 8014f16:	46bd      	mov	sp, r7
 8014f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f1c:	4770      	bx	lr
 8014f1e:	bf00      	nop
 8014f20:	e000e3f0 	.word	0xe000e3f0
 8014f24:	20001138 	.word	0x20001138
 8014f28:	e000ed0c 	.word	0xe000ed0c
 8014f2c:	2000113c 	.word	0x2000113c

08014f30 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014f30:	b580      	push	{r7, lr}
 8014f32:	b08a      	sub	sp, #40	; 0x28
 8014f34:	af00      	add	r7, sp, #0
 8014f36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014f38:	2300      	movs	r3, #0
 8014f3a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014f3c:	f7fe ff38 	bl	8013db0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014f40:	4b57      	ldr	r3, [pc, #348]	; (80150a0 <pvPortMalloc+0x170>)
 8014f42:	681b      	ldr	r3, [r3, #0]
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	d101      	bne.n	8014f4c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014f48:	f000 f90c 	bl	8015164 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014f4c:	4b55      	ldr	r3, [pc, #340]	; (80150a4 <pvPortMalloc+0x174>)
 8014f4e:	681a      	ldr	r2, [r3, #0]
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	4013      	ands	r3, r2
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	f040 808c 	bne.w	8015072 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	d01c      	beq.n	8014f9a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8014f60:	2208      	movs	r2, #8
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	4413      	add	r3, r2
 8014f66:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	f003 0307 	and.w	r3, r3, #7
 8014f6e:	2b00      	cmp	r3, #0
 8014f70:	d013      	beq.n	8014f9a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	f023 0307 	bic.w	r3, r3, #7
 8014f78:	3308      	adds	r3, #8
 8014f7a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	f003 0307 	and.w	r3, r3, #7
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	d009      	beq.n	8014f9a <pvPortMalloc+0x6a>
 8014f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f8a:	f383 8811 	msr	BASEPRI, r3
 8014f8e:	f3bf 8f6f 	isb	sy
 8014f92:	f3bf 8f4f 	dsb	sy
 8014f96:	617b      	str	r3, [r7, #20]
 8014f98:	e7fe      	b.n	8014f98 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	d068      	beq.n	8015072 <pvPortMalloc+0x142>
 8014fa0:	4b41      	ldr	r3, [pc, #260]	; (80150a8 <pvPortMalloc+0x178>)
 8014fa2:	681b      	ldr	r3, [r3, #0]
 8014fa4:	687a      	ldr	r2, [r7, #4]
 8014fa6:	429a      	cmp	r2, r3
 8014fa8:	d863      	bhi.n	8015072 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014faa:	4b40      	ldr	r3, [pc, #256]	; (80150ac <pvPortMalloc+0x17c>)
 8014fac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014fae:	4b3f      	ldr	r3, [pc, #252]	; (80150ac <pvPortMalloc+0x17c>)
 8014fb0:	681b      	ldr	r3, [r3, #0]
 8014fb2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014fb4:	e004      	b.n	8014fc0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8014fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fb8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fbc:	681b      	ldr	r3, [r3, #0]
 8014fbe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fc2:	685b      	ldr	r3, [r3, #4]
 8014fc4:	687a      	ldr	r2, [r7, #4]
 8014fc6:	429a      	cmp	r2, r3
 8014fc8:	d903      	bls.n	8014fd2 <pvPortMalloc+0xa2>
 8014fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fcc:	681b      	ldr	r3, [r3, #0]
 8014fce:	2b00      	cmp	r3, #0
 8014fd0:	d1f1      	bne.n	8014fb6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8014fd2:	4b33      	ldr	r3, [pc, #204]	; (80150a0 <pvPortMalloc+0x170>)
 8014fd4:	681b      	ldr	r3, [r3, #0]
 8014fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014fd8:	429a      	cmp	r2, r3
 8014fda:	d04a      	beq.n	8015072 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014fdc:	6a3b      	ldr	r3, [r7, #32]
 8014fde:	681b      	ldr	r3, [r3, #0]
 8014fe0:	2208      	movs	r2, #8
 8014fe2:	4413      	add	r3, r2
 8014fe4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fe8:	681a      	ldr	r2, [r3, #0]
 8014fea:	6a3b      	ldr	r3, [r7, #32]
 8014fec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ff0:	685a      	ldr	r2, [r3, #4]
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	1ad2      	subs	r2, r2, r3
 8014ff6:	2308      	movs	r3, #8
 8014ff8:	005b      	lsls	r3, r3, #1
 8014ffa:	429a      	cmp	r2, r3
 8014ffc:	d91e      	bls.n	801503c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	4413      	add	r3, r2
 8015004:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015006:	69bb      	ldr	r3, [r7, #24]
 8015008:	f003 0307 	and.w	r3, r3, #7
 801500c:	2b00      	cmp	r3, #0
 801500e:	d009      	beq.n	8015024 <pvPortMalloc+0xf4>
 8015010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015014:	f383 8811 	msr	BASEPRI, r3
 8015018:	f3bf 8f6f 	isb	sy
 801501c:	f3bf 8f4f 	dsb	sy
 8015020:	613b      	str	r3, [r7, #16]
 8015022:	e7fe      	b.n	8015022 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015026:	685a      	ldr	r2, [r3, #4]
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	1ad2      	subs	r2, r2, r3
 801502c:	69bb      	ldr	r3, [r7, #24]
 801502e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015032:	687a      	ldr	r2, [r7, #4]
 8015034:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8015036:	69b8      	ldr	r0, [r7, #24]
 8015038:	f000 f8f6 	bl	8015228 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801503c:	4b1a      	ldr	r3, [pc, #104]	; (80150a8 <pvPortMalloc+0x178>)
 801503e:	681a      	ldr	r2, [r3, #0]
 8015040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015042:	685b      	ldr	r3, [r3, #4]
 8015044:	1ad3      	subs	r3, r2, r3
 8015046:	4a18      	ldr	r2, [pc, #96]	; (80150a8 <pvPortMalloc+0x178>)
 8015048:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801504a:	4b17      	ldr	r3, [pc, #92]	; (80150a8 <pvPortMalloc+0x178>)
 801504c:	681a      	ldr	r2, [r3, #0]
 801504e:	4b18      	ldr	r3, [pc, #96]	; (80150b0 <pvPortMalloc+0x180>)
 8015050:	681b      	ldr	r3, [r3, #0]
 8015052:	429a      	cmp	r2, r3
 8015054:	d203      	bcs.n	801505e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8015056:	4b14      	ldr	r3, [pc, #80]	; (80150a8 <pvPortMalloc+0x178>)
 8015058:	681b      	ldr	r3, [r3, #0]
 801505a:	4a15      	ldr	r2, [pc, #84]	; (80150b0 <pvPortMalloc+0x180>)
 801505c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801505e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015060:	685a      	ldr	r2, [r3, #4]
 8015062:	4b10      	ldr	r3, [pc, #64]	; (80150a4 <pvPortMalloc+0x174>)
 8015064:	681b      	ldr	r3, [r3, #0]
 8015066:	431a      	orrs	r2, r3
 8015068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801506a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801506c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801506e:	2200      	movs	r2, #0
 8015070:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015072:	f7fe feab 	bl	8013dcc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015076:	69fb      	ldr	r3, [r7, #28]
 8015078:	f003 0307 	and.w	r3, r3, #7
 801507c:	2b00      	cmp	r3, #0
 801507e:	d009      	beq.n	8015094 <pvPortMalloc+0x164>
 8015080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015084:	f383 8811 	msr	BASEPRI, r3
 8015088:	f3bf 8f6f 	isb	sy
 801508c:	f3bf 8f4f 	dsb	sy
 8015090:	60fb      	str	r3, [r7, #12]
 8015092:	e7fe      	b.n	8015092 <pvPortMalloc+0x162>
	return pvReturn;
 8015094:	69fb      	ldr	r3, [r7, #28]
}
 8015096:	4618      	mov	r0, r3
 8015098:	3728      	adds	r7, #40	; 0x28
 801509a:	46bd      	mov	sp, r7
 801509c:	bd80      	pop	{r7, pc}
 801509e:	bf00      	nop
 80150a0:	20004d48 	.word	0x20004d48
 80150a4:	20004d54 	.word	0x20004d54
 80150a8:	20004d4c 	.word	0x20004d4c
 80150ac:	20004d40 	.word	0x20004d40
 80150b0:	20004d50 	.word	0x20004d50

080150b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80150b4:	b580      	push	{r7, lr}
 80150b6:	b086      	sub	sp, #24
 80150b8:	af00      	add	r7, sp, #0
 80150ba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	d046      	beq.n	8015154 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80150c6:	2308      	movs	r3, #8
 80150c8:	425b      	negs	r3, r3
 80150ca:	697a      	ldr	r2, [r7, #20]
 80150cc:	4413      	add	r3, r2
 80150ce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80150d0:	697b      	ldr	r3, [r7, #20]
 80150d2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80150d4:	693b      	ldr	r3, [r7, #16]
 80150d6:	685a      	ldr	r2, [r3, #4]
 80150d8:	4b20      	ldr	r3, [pc, #128]	; (801515c <vPortFree+0xa8>)
 80150da:	681b      	ldr	r3, [r3, #0]
 80150dc:	4013      	ands	r3, r2
 80150de:	2b00      	cmp	r3, #0
 80150e0:	d109      	bne.n	80150f6 <vPortFree+0x42>
 80150e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150e6:	f383 8811 	msr	BASEPRI, r3
 80150ea:	f3bf 8f6f 	isb	sy
 80150ee:	f3bf 8f4f 	dsb	sy
 80150f2:	60fb      	str	r3, [r7, #12]
 80150f4:	e7fe      	b.n	80150f4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80150f6:	693b      	ldr	r3, [r7, #16]
 80150f8:	681b      	ldr	r3, [r3, #0]
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	d009      	beq.n	8015112 <vPortFree+0x5e>
 80150fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015102:	f383 8811 	msr	BASEPRI, r3
 8015106:	f3bf 8f6f 	isb	sy
 801510a:	f3bf 8f4f 	dsb	sy
 801510e:	60bb      	str	r3, [r7, #8]
 8015110:	e7fe      	b.n	8015110 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8015112:	693b      	ldr	r3, [r7, #16]
 8015114:	685a      	ldr	r2, [r3, #4]
 8015116:	4b11      	ldr	r3, [pc, #68]	; (801515c <vPortFree+0xa8>)
 8015118:	681b      	ldr	r3, [r3, #0]
 801511a:	4013      	ands	r3, r2
 801511c:	2b00      	cmp	r3, #0
 801511e:	d019      	beq.n	8015154 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8015120:	693b      	ldr	r3, [r7, #16]
 8015122:	681b      	ldr	r3, [r3, #0]
 8015124:	2b00      	cmp	r3, #0
 8015126:	d115      	bne.n	8015154 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015128:	693b      	ldr	r3, [r7, #16]
 801512a:	685a      	ldr	r2, [r3, #4]
 801512c:	4b0b      	ldr	r3, [pc, #44]	; (801515c <vPortFree+0xa8>)
 801512e:	681b      	ldr	r3, [r3, #0]
 8015130:	43db      	mvns	r3, r3
 8015132:	401a      	ands	r2, r3
 8015134:	693b      	ldr	r3, [r7, #16]
 8015136:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015138:	f7fe fe3a 	bl	8013db0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801513c:	693b      	ldr	r3, [r7, #16]
 801513e:	685a      	ldr	r2, [r3, #4]
 8015140:	4b07      	ldr	r3, [pc, #28]	; (8015160 <vPortFree+0xac>)
 8015142:	681b      	ldr	r3, [r3, #0]
 8015144:	4413      	add	r3, r2
 8015146:	4a06      	ldr	r2, [pc, #24]	; (8015160 <vPortFree+0xac>)
 8015148:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801514a:	6938      	ldr	r0, [r7, #16]
 801514c:	f000 f86c 	bl	8015228 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8015150:	f7fe fe3c 	bl	8013dcc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8015154:	bf00      	nop
 8015156:	3718      	adds	r7, #24
 8015158:	46bd      	mov	sp, r7
 801515a:	bd80      	pop	{r7, pc}
 801515c:	20004d54 	.word	0x20004d54
 8015160:	20004d4c 	.word	0x20004d4c

08015164 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015164:	b480      	push	{r7}
 8015166:	b085      	sub	sp, #20
 8015168:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801516a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801516e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015170:	4b27      	ldr	r3, [pc, #156]	; (8015210 <prvHeapInit+0xac>)
 8015172:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015174:	68fb      	ldr	r3, [r7, #12]
 8015176:	f003 0307 	and.w	r3, r3, #7
 801517a:	2b00      	cmp	r3, #0
 801517c:	d00c      	beq.n	8015198 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801517e:	68fb      	ldr	r3, [r7, #12]
 8015180:	3307      	adds	r3, #7
 8015182:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015184:	68fb      	ldr	r3, [r7, #12]
 8015186:	f023 0307 	bic.w	r3, r3, #7
 801518a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801518c:	68ba      	ldr	r2, [r7, #8]
 801518e:	68fb      	ldr	r3, [r7, #12]
 8015190:	1ad3      	subs	r3, r2, r3
 8015192:	4a1f      	ldr	r2, [pc, #124]	; (8015210 <prvHeapInit+0xac>)
 8015194:	4413      	add	r3, r2
 8015196:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015198:	68fb      	ldr	r3, [r7, #12]
 801519a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801519c:	4a1d      	ldr	r2, [pc, #116]	; (8015214 <prvHeapInit+0xb0>)
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80151a2:	4b1c      	ldr	r3, [pc, #112]	; (8015214 <prvHeapInit+0xb0>)
 80151a4:	2200      	movs	r2, #0
 80151a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	68ba      	ldr	r2, [r7, #8]
 80151ac:	4413      	add	r3, r2
 80151ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80151b0:	2208      	movs	r2, #8
 80151b2:	68fb      	ldr	r3, [r7, #12]
 80151b4:	1a9b      	subs	r3, r3, r2
 80151b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80151b8:	68fb      	ldr	r3, [r7, #12]
 80151ba:	f023 0307 	bic.w	r3, r3, #7
 80151be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80151c0:	68fb      	ldr	r3, [r7, #12]
 80151c2:	4a15      	ldr	r2, [pc, #84]	; (8015218 <prvHeapInit+0xb4>)
 80151c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80151c6:	4b14      	ldr	r3, [pc, #80]	; (8015218 <prvHeapInit+0xb4>)
 80151c8:	681b      	ldr	r3, [r3, #0]
 80151ca:	2200      	movs	r2, #0
 80151cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80151ce:	4b12      	ldr	r3, [pc, #72]	; (8015218 <prvHeapInit+0xb4>)
 80151d0:	681b      	ldr	r3, [r3, #0]
 80151d2:	2200      	movs	r2, #0
 80151d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80151da:	683b      	ldr	r3, [r7, #0]
 80151dc:	68fa      	ldr	r2, [r7, #12]
 80151de:	1ad2      	subs	r2, r2, r3
 80151e0:	683b      	ldr	r3, [r7, #0]
 80151e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80151e4:	4b0c      	ldr	r3, [pc, #48]	; (8015218 <prvHeapInit+0xb4>)
 80151e6:	681a      	ldr	r2, [r3, #0]
 80151e8:	683b      	ldr	r3, [r7, #0]
 80151ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80151ec:	683b      	ldr	r3, [r7, #0]
 80151ee:	685b      	ldr	r3, [r3, #4]
 80151f0:	4a0a      	ldr	r2, [pc, #40]	; (801521c <prvHeapInit+0xb8>)
 80151f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80151f4:	683b      	ldr	r3, [r7, #0]
 80151f6:	685b      	ldr	r3, [r3, #4]
 80151f8:	4a09      	ldr	r2, [pc, #36]	; (8015220 <prvHeapInit+0xbc>)
 80151fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80151fc:	4b09      	ldr	r3, [pc, #36]	; (8015224 <prvHeapInit+0xc0>)
 80151fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8015202:	601a      	str	r2, [r3, #0]
}
 8015204:	bf00      	nop
 8015206:	3714      	adds	r7, #20
 8015208:	46bd      	mov	sp, r7
 801520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801520e:	4770      	bx	lr
 8015210:	20001140 	.word	0x20001140
 8015214:	20004d40 	.word	0x20004d40
 8015218:	20004d48 	.word	0x20004d48
 801521c:	20004d50 	.word	0x20004d50
 8015220:	20004d4c 	.word	0x20004d4c
 8015224:	20004d54 	.word	0x20004d54

08015228 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015228:	b480      	push	{r7}
 801522a:	b085      	sub	sp, #20
 801522c:	af00      	add	r7, sp, #0
 801522e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015230:	4b28      	ldr	r3, [pc, #160]	; (80152d4 <prvInsertBlockIntoFreeList+0xac>)
 8015232:	60fb      	str	r3, [r7, #12]
 8015234:	e002      	b.n	801523c <prvInsertBlockIntoFreeList+0x14>
 8015236:	68fb      	ldr	r3, [r7, #12]
 8015238:	681b      	ldr	r3, [r3, #0]
 801523a:	60fb      	str	r3, [r7, #12]
 801523c:	68fb      	ldr	r3, [r7, #12]
 801523e:	681b      	ldr	r3, [r3, #0]
 8015240:	687a      	ldr	r2, [r7, #4]
 8015242:	429a      	cmp	r2, r3
 8015244:	d8f7      	bhi.n	8015236 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015246:	68fb      	ldr	r3, [r7, #12]
 8015248:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801524a:	68fb      	ldr	r3, [r7, #12]
 801524c:	685b      	ldr	r3, [r3, #4]
 801524e:	68ba      	ldr	r2, [r7, #8]
 8015250:	4413      	add	r3, r2
 8015252:	687a      	ldr	r2, [r7, #4]
 8015254:	429a      	cmp	r2, r3
 8015256:	d108      	bne.n	801526a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015258:	68fb      	ldr	r3, [r7, #12]
 801525a:	685a      	ldr	r2, [r3, #4]
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	685b      	ldr	r3, [r3, #4]
 8015260:	441a      	add	r2, r3
 8015262:	68fb      	ldr	r3, [r7, #12]
 8015264:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015266:	68fb      	ldr	r3, [r7, #12]
 8015268:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	685b      	ldr	r3, [r3, #4]
 8015272:	68ba      	ldr	r2, [r7, #8]
 8015274:	441a      	add	r2, r3
 8015276:	68fb      	ldr	r3, [r7, #12]
 8015278:	681b      	ldr	r3, [r3, #0]
 801527a:	429a      	cmp	r2, r3
 801527c:	d118      	bne.n	80152b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801527e:	68fb      	ldr	r3, [r7, #12]
 8015280:	681a      	ldr	r2, [r3, #0]
 8015282:	4b15      	ldr	r3, [pc, #84]	; (80152d8 <prvInsertBlockIntoFreeList+0xb0>)
 8015284:	681b      	ldr	r3, [r3, #0]
 8015286:	429a      	cmp	r2, r3
 8015288:	d00d      	beq.n	80152a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	685a      	ldr	r2, [r3, #4]
 801528e:	68fb      	ldr	r3, [r7, #12]
 8015290:	681b      	ldr	r3, [r3, #0]
 8015292:	685b      	ldr	r3, [r3, #4]
 8015294:	441a      	add	r2, r3
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801529a:	68fb      	ldr	r3, [r7, #12]
 801529c:	681b      	ldr	r3, [r3, #0]
 801529e:	681a      	ldr	r2, [r3, #0]
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	601a      	str	r2, [r3, #0]
 80152a4:	e008      	b.n	80152b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80152a6:	4b0c      	ldr	r3, [pc, #48]	; (80152d8 <prvInsertBlockIntoFreeList+0xb0>)
 80152a8:	681a      	ldr	r2, [r3, #0]
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	601a      	str	r2, [r3, #0]
 80152ae:	e003      	b.n	80152b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80152b0:	68fb      	ldr	r3, [r7, #12]
 80152b2:	681a      	ldr	r2, [r3, #0]
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80152b8:	68fa      	ldr	r2, [r7, #12]
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	429a      	cmp	r2, r3
 80152be:	d002      	beq.n	80152c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80152c0:	68fb      	ldr	r3, [r7, #12]
 80152c2:	687a      	ldr	r2, [r7, #4]
 80152c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80152c6:	bf00      	nop
 80152c8:	3714      	adds	r7, #20
 80152ca:	46bd      	mov	sp, r7
 80152cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152d0:	4770      	bx	lr
 80152d2:	bf00      	nop
 80152d4:	20004d40 	.word	0x20004d40
 80152d8:	20004d48 	.word	0x20004d48

080152dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80152dc:	b580      	push	{r7, lr}
 80152de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80152e0:	2200      	movs	r2, #0
 80152e2:	4912      	ldr	r1, [pc, #72]	; (801532c <MX_USB_DEVICE_Init+0x50>)
 80152e4:	4812      	ldr	r0, [pc, #72]	; (8015330 <MX_USB_DEVICE_Init+0x54>)
 80152e6:	f7fc f8a1 	bl	801142c <USBD_Init>
 80152ea:	4603      	mov	r3, r0
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	d001      	beq.n	80152f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80152f0:	f7ef f8f4 	bl	80044dc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80152f4:	490f      	ldr	r1, [pc, #60]	; (8015334 <MX_USB_DEVICE_Init+0x58>)
 80152f6:	480e      	ldr	r0, [pc, #56]	; (8015330 <MX_USB_DEVICE_Init+0x54>)
 80152f8:	f7fc f8ce 	bl	8011498 <USBD_RegisterClass>
 80152fc:	4603      	mov	r3, r0
 80152fe:	2b00      	cmp	r3, #0
 8015300:	d001      	beq.n	8015306 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8015302:	f7ef f8eb 	bl	80044dc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8015306:	490c      	ldr	r1, [pc, #48]	; (8015338 <MX_USB_DEVICE_Init+0x5c>)
 8015308:	4809      	ldr	r0, [pc, #36]	; (8015330 <MX_USB_DEVICE_Init+0x54>)
 801530a:	f7fb fff3 	bl	80112f4 <USBD_CDC_RegisterInterface>
 801530e:	4603      	mov	r3, r0
 8015310:	2b00      	cmp	r3, #0
 8015312:	d001      	beq.n	8015318 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8015314:	f7ef f8e2 	bl	80044dc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8015318:	4805      	ldr	r0, [pc, #20]	; (8015330 <MX_USB_DEVICE_Init+0x54>)
 801531a:	f7fc f8de 	bl	80114da <USBD_Start>
 801531e:	4603      	mov	r3, r0
 8015320:	2b00      	cmp	r3, #0
 8015322:	d001      	beq.n	8015328 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8015324:	f7ef f8da 	bl	80044dc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8015328:	bf00      	nop
 801532a:	bd80      	pop	{r7, pc}
 801532c:	2000095c 	.word	0x2000095c
 8015330:	20006a5c 	.word	0x20006a5c
 8015334:	20000840 	.word	0x20000840
 8015338:	20000948 	.word	0x20000948

0801533c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801533c:	b580      	push	{r7, lr}
 801533e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8015340:	2200      	movs	r2, #0
 8015342:	4905      	ldr	r1, [pc, #20]	; (8015358 <CDC_Init_FS+0x1c>)
 8015344:	4805      	ldr	r0, [pc, #20]	; (801535c <CDC_Init_FS+0x20>)
 8015346:	f7fb ffea 	bl	801131e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801534a:	4905      	ldr	r1, [pc, #20]	; (8015360 <CDC_Init_FS+0x24>)
 801534c:	4803      	ldr	r0, [pc, #12]	; (801535c <CDC_Init_FS+0x20>)
 801534e:	f7fb ffff 	bl	8011350 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8015352:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8015354:	4618      	mov	r0, r3
 8015356:	bd80      	pop	{r7, pc}
 8015358:	20006f2c 	.word	0x20006f2c
 801535c:	20006a5c 	.word	0x20006a5c
 8015360:	20006d2c 	.word	0x20006d2c

08015364 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8015364:	b480      	push	{r7}
 8015366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8015368:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801536a:	4618      	mov	r0, r3
 801536c:	46bd      	mov	sp, r7
 801536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015372:	4770      	bx	lr

08015374 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8015374:	b480      	push	{r7}
 8015376:	b083      	sub	sp, #12
 8015378:	af00      	add	r7, sp, #0
 801537a:	4603      	mov	r3, r0
 801537c:	6039      	str	r1, [r7, #0]
 801537e:	71fb      	strb	r3, [r7, #7]
 8015380:	4613      	mov	r3, r2
 8015382:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8015384:	79fb      	ldrb	r3, [r7, #7]
 8015386:	2b23      	cmp	r3, #35	; 0x23
 8015388:	f200 808c 	bhi.w	80154a4 <CDC_Control_FS+0x130>
 801538c:	a201      	add	r2, pc, #4	; (adr r2, 8015394 <CDC_Control_FS+0x20>)
 801538e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015392:	bf00      	nop
 8015394:	080154a5 	.word	0x080154a5
 8015398:	080154a5 	.word	0x080154a5
 801539c:	080154a5 	.word	0x080154a5
 80153a0:	080154a5 	.word	0x080154a5
 80153a4:	080154a5 	.word	0x080154a5
 80153a8:	080154a5 	.word	0x080154a5
 80153ac:	080154a5 	.word	0x080154a5
 80153b0:	080154a5 	.word	0x080154a5
 80153b4:	080154a5 	.word	0x080154a5
 80153b8:	080154a5 	.word	0x080154a5
 80153bc:	080154a5 	.word	0x080154a5
 80153c0:	080154a5 	.word	0x080154a5
 80153c4:	080154a5 	.word	0x080154a5
 80153c8:	080154a5 	.word	0x080154a5
 80153cc:	080154a5 	.word	0x080154a5
 80153d0:	080154a5 	.word	0x080154a5
 80153d4:	080154a5 	.word	0x080154a5
 80153d8:	080154a5 	.word	0x080154a5
 80153dc:	080154a5 	.word	0x080154a5
 80153e0:	080154a5 	.word	0x080154a5
 80153e4:	080154a5 	.word	0x080154a5
 80153e8:	080154a5 	.word	0x080154a5
 80153ec:	080154a5 	.word	0x080154a5
 80153f0:	080154a5 	.word	0x080154a5
 80153f4:	080154a5 	.word	0x080154a5
 80153f8:	080154a5 	.word	0x080154a5
 80153fc:	080154a5 	.word	0x080154a5
 8015400:	080154a5 	.word	0x080154a5
 8015404:	080154a5 	.word	0x080154a5
 8015408:	080154a5 	.word	0x080154a5
 801540c:	080154a5 	.word	0x080154a5
 8015410:	080154a5 	.word	0x080154a5
 8015414:	08015425 	.word	0x08015425
 8015418:	0801545f 	.word	0x0801545f
 801541c:	080154a5 	.word	0x080154a5
 8015420:	080154a5 	.word	0x080154a5
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	TempBuf_USB[0]=pbuf[0];
 8015424:	683b      	ldr	r3, [r7, #0]
 8015426:	781a      	ldrb	r2, [r3, #0]
 8015428:	4b22      	ldr	r3, [pc, #136]	; (80154b4 <CDC_Control_FS+0x140>)
 801542a:	701a      	strb	r2, [r3, #0]
    	TempBuf_USB[1]=pbuf[1];
 801542c:	683b      	ldr	r3, [r7, #0]
 801542e:	785a      	ldrb	r2, [r3, #1]
 8015430:	4b20      	ldr	r3, [pc, #128]	; (80154b4 <CDC_Control_FS+0x140>)
 8015432:	705a      	strb	r2, [r3, #1]
    	TempBuf_USB[2]=pbuf[2];
 8015434:	683b      	ldr	r3, [r7, #0]
 8015436:	789a      	ldrb	r2, [r3, #2]
 8015438:	4b1e      	ldr	r3, [pc, #120]	; (80154b4 <CDC_Control_FS+0x140>)
 801543a:	709a      	strb	r2, [r3, #2]
    	TempBuf_USB[3]=pbuf[3];
 801543c:	683b      	ldr	r3, [r7, #0]
 801543e:	78da      	ldrb	r2, [r3, #3]
 8015440:	4b1c      	ldr	r3, [pc, #112]	; (80154b4 <CDC_Control_FS+0x140>)
 8015442:	70da      	strb	r2, [r3, #3]
    	TempBuf_USB[4]=pbuf[4];
 8015444:	683b      	ldr	r3, [r7, #0]
 8015446:	791a      	ldrb	r2, [r3, #4]
 8015448:	4b1a      	ldr	r3, [pc, #104]	; (80154b4 <CDC_Control_FS+0x140>)
 801544a:	711a      	strb	r2, [r3, #4]
    	TempBuf_USB[5]=pbuf[5];
 801544c:	683b      	ldr	r3, [r7, #0]
 801544e:	795a      	ldrb	r2, [r3, #5]
 8015450:	4b18      	ldr	r3, [pc, #96]	; (80154b4 <CDC_Control_FS+0x140>)
 8015452:	715a      	strb	r2, [r3, #5]
    	TempBuf_USB[6]=pbuf[6];
 8015454:	683b      	ldr	r3, [r7, #0]
 8015456:	799a      	ldrb	r2, [r3, #6]
 8015458:	4b16      	ldr	r3, [pc, #88]	; (80154b4 <CDC_Control_FS+0x140>)
 801545a:	719a      	strb	r2, [r3, #6]
    	break;
 801545c:	e023      	b.n	80154a6 <CDC_Control_FS+0x132>


    case CDC_GET_LINE_CODING:
        pbuf[0]=TempBuf_USB[0];
 801545e:	4b15      	ldr	r3, [pc, #84]	; (80154b4 <CDC_Control_FS+0x140>)
 8015460:	781a      	ldrb	r2, [r3, #0]
 8015462:	683b      	ldr	r3, [r7, #0]
 8015464:	701a      	strb	r2, [r3, #0]
        pbuf[1]=TempBuf_USB[1];
 8015466:	683b      	ldr	r3, [r7, #0]
 8015468:	3301      	adds	r3, #1
 801546a:	4a12      	ldr	r2, [pc, #72]	; (80154b4 <CDC_Control_FS+0x140>)
 801546c:	7852      	ldrb	r2, [r2, #1]
 801546e:	701a      	strb	r2, [r3, #0]
        pbuf[2]=TempBuf_USB[2];
 8015470:	683b      	ldr	r3, [r7, #0]
 8015472:	3302      	adds	r3, #2
 8015474:	4a0f      	ldr	r2, [pc, #60]	; (80154b4 <CDC_Control_FS+0x140>)
 8015476:	7892      	ldrb	r2, [r2, #2]
 8015478:	701a      	strb	r2, [r3, #0]
        pbuf[3]=TempBuf_USB[3];
 801547a:	683b      	ldr	r3, [r7, #0]
 801547c:	3303      	adds	r3, #3
 801547e:	4a0d      	ldr	r2, [pc, #52]	; (80154b4 <CDC_Control_FS+0x140>)
 8015480:	78d2      	ldrb	r2, [r2, #3]
 8015482:	701a      	strb	r2, [r3, #0]
        pbuf[4]=TempBuf_USB[4];
 8015484:	683b      	ldr	r3, [r7, #0]
 8015486:	3304      	adds	r3, #4
 8015488:	4a0a      	ldr	r2, [pc, #40]	; (80154b4 <CDC_Control_FS+0x140>)
 801548a:	7912      	ldrb	r2, [r2, #4]
 801548c:	701a      	strb	r2, [r3, #0]
        pbuf[5]=TempBuf_USB[5];
 801548e:	683b      	ldr	r3, [r7, #0]
 8015490:	3305      	adds	r3, #5
 8015492:	4a08      	ldr	r2, [pc, #32]	; (80154b4 <CDC_Control_FS+0x140>)
 8015494:	7952      	ldrb	r2, [r2, #5]
 8015496:	701a      	strb	r2, [r3, #0]
        pbuf[6]=TempBuf_USB[6];
 8015498:	683b      	ldr	r3, [r7, #0]
 801549a:	3306      	adds	r3, #6
 801549c:	4a05      	ldr	r2, [pc, #20]	; (80154b4 <CDC_Control_FS+0x140>)
 801549e:	7992      	ldrb	r2, [r2, #6]
 80154a0:	701a      	strb	r2, [r3, #0]
    break;
 80154a2:	e000      	b.n	80154a6 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80154a4:	bf00      	nop
  }

  return (USBD_OK);
 80154a6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80154a8:	4618      	mov	r0, r3
 80154aa:	370c      	adds	r7, #12
 80154ac:	46bd      	mov	sp, r7
 80154ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154b2:	4770      	bx	lr
 80154b4:	2000712c 	.word	0x2000712c

080154b8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80154b8:	b580      	push	{r7, lr}
 80154ba:	b082      	sub	sp, #8
 80154bc:	af00      	add	r7, sp, #0
 80154be:	6078      	str	r0, [r7, #4]
 80154c0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	ringBuff_PushArray(&usb_rx_ringbuff, Buf, (uint16_t)*Len);
 80154c2:	683b      	ldr	r3, [r7, #0]
 80154c4:	681b      	ldr	r3, [r3, #0]
 80154c6:	b29b      	uxth	r3, r3
 80154c8:	461a      	mov	r2, r3
 80154ca:	6879      	ldr	r1, [r7, #4]
 80154cc:	4807      	ldr	r0, [pc, #28]	; (80154ec <CDC_Receive_FS+0x34>)
 80154ce:	f7ef f87c 	bl	80045ca <ringBuff_PushArray>
//	if ( END_CHAR == Buf[*Len - 1]) {
//		osSignalSet(USB_RX_Check_Handle, 0x01);
//	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80154d2:	6879      	ldr	r1, [r7, #4]
 80154d4:	4806      	ldr	r0, [pc, #24]	; (80154f0 <CDC_Receive_FS+0x38>)
 80154d6:	f7fb ff3b 	bl	8011350 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80154da:	4805      	ldr	r0, [pc, #20]	; (80154f0 <CDC_Receive_FS+0x38>)
 80154dc:	f7fb ff7c 	bl	80113d8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80154e0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80154e2:	4618      	mov	r0, r3
 80154e4:	3708      	adds	r7, #8
 80154e6:	46bd      	mov	sp, r7
 80154e8:	bd80      	pop	{r7, pc}
 80154ea:	bf00      	nop
 80154ec:	20000004 	.word	0x20000004
 80154f0:	20006a5c 	.word	0x20006a5c

080154f4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80154f4:	b580      	push	{r7, lr}
 80154f6:	b084      	sub	sp, #16
 80154f8:	af00      	add	r7, sp, #0
 80154fa:	6078      	str	r0, [r7, #4]
 80154fc:	460b      	mov	r3, r1
 80154fe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8015500:	2300      	movs	r3, #0
 8015502:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8015504:	4b0d      	ldr	r3, [pc, #52]	; (801553c <CDC_Transmit_FS+0x48>)
 8015506:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801550a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801550c:	68bb      	ldr	r3, [r7, #8]
 801550e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015512:	2b00      	cmp	r3, #0
 8015514:	d001      	beq.n	801551a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8015516:	2301      	movs	r3, #1
 8015518:	e00b      	b.n	8015532 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801551a:	887b      	ldrh	r3, [r7, #2]
 801551c:	461a      	mov	r2, r3
 801551e:	6879      	ldr	r1, [r7, #4]
 8015520:	4806      	ldr	r0, [pc, #24]	; (801553c <CDC_Transmit_FS+0x48>)
 8015522:	f7fb fefc 	bl	801131e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8015526:	4805      	ldr	r0, [pc, #20]	; (801553c <CDC_Transmit_FS+0x48>)
 8015528:	f7fb ff26 	bl	8011378 <USBD_CDC_TransmitPacket>
 801552c:	4603      	mov	r3, r0
 801552e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8015530:	7bfb      	ldrb	r3, [r7, #15]
}
 8015532:	4618      	mov	r0, r3
 8015534:	3710      	adds	r7, #16
 8015536:	46bd      	mov	sp, r7
 8015538:	bd80      	pop	{r7, pc}
 801553a:	bf00      	nop
 801553c:	20006a5c 	.word	0x20006a5c

08015540 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8015540:	b480      	push	{r7}
 8015542:	b087      	sub	sp, #28
 8015544:	af00      	add	r7, sp, #0
 8015546:	60f8      	str	r0, [r7, #12]
 8015548:	60b9      	str	r1, [r7, #8]
 801554a:	4613      	mov	r3, r2
 801554c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801554e:	2300      	movs	r3, #0
 8015550:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8015552:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015556:	4618      	mov	r0, r3
 8015558:	371c      	adds	r7, #28
 801555a:	46bd      	mov	sp, r7
 801555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015560:	4770      	bx	lr
	...

08015564 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015564:	b480      	push	{r7}
 8015566:	b083      	sub	sp, #12
 8015568:	af00      	add	r7, sp, #0
 801556a:	4603      	mov	r3, r0
 801556c:	6039      	str	r1, [r7, #0]
 801556e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8015570:	683b      	ldr	r3, [r7, #0]
 8015572:	2212      	movs	r2, #18
 8015574:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8015576:	4b03      	ldr	r3, [pc, #12]	; (8015584 <USBD_FS_DeviceDescriptor+0x20>)
}
 8015578:	4618      	mov	r0, r3
 801557a:	370c      	adds	r7, #12
 801557c:	46bd      	mov	sp, r7
 801557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015582:	4770      	bx	lr
 8015584:	20000978 	.word	0x20000978

08015588 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015588:	b480      	push	{r7}
 801558a:	b083      	sub	sp, #12
 801558c:	af00      	add	r7, sp, #0
 801558e:	4603      	mov	r3, r0
 8015590:	6039      	str	r1, [r7, #0]
 8015592:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015594:	683b      	ldr	r3, [r7, #0]
 8015596:	2204      	movs	r2, #4
 8015598:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801559a:	4b03      	ldr	r3, [pc, #12]	; (80155a8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801559c:	4618      	mov	r0, r3
 801559e:	370c      	adds	r7, #12
 80155a0:	46bd      	mov	sp, r7
 80155a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155a6:	4770      	bx	lr
 80155a8:	2000098c 	.word	0x2000098c

080155ac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80155ac:	b580      	push	{r7, lr}
 80155ae:	b082      	sub	sp, #8
 80155b0:	af00      	add	r7, sp, #0
 80155b2:	4603      	mov	r3, r0
 80155b4:	6039      	str	r1, [r7, #0]
 80155b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80155b8:	79fb      	ldrb	r3, [r7, #7]
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	d105      	bne.n	80155ca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80155be:	683a      	ldr	r2, [r7, #0]
 80155c0:	4907      	ldr	r1, [pc, #28]	; (80155e0 <USBD_FS_ProductStrDescriptor+0x34>)
 80155c2:	4808      	ldr	r0, [pc, #32]	; (80155e4 <USBD_FS_ProductStrDescriptor+0x38>)
 80155c4:	f7fc ff57 	bl	8012476 <USBD_GetString>
 80155c8:	e004      	b.n	80155d4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80155ca:	683a      	ldr	r2, [r7, #0]
 80155cc:	4904      	ldr	r1, [pc, #16]	; (80155e0 <USBD_FS_ProductStrDescriptor+0x34>)
 80155ce:	4805      	ldr	r0, [pc, #20]	; (80155e4 <USBD_FS_ProductStrDescriptor+0x38>)
 80155d0:	f7fc ff51 	bl	8012476 <USBD_GetString>
  }
  return USBD_StrDesc;
 80155d4:	4b02      	ldr	r3, [pc, #8]	; (80155e0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80155d6:	4618      	mov	r0, r3
 80155d8:	3708      	adds	r7, #8
 80155da:	46bd      	mov	sp, r7
 80155dc:	bd80      	pop	{r7, pc}
 80155de:	bf00      	nop
 80155e0:	20007134 	.word	0x20007134
 80155e4:	0801b53c 	.word	0x0801b53c

080155e8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80155e8:	b580      	push	{r7, lr}
 80155ea:	b082      	sub	sp, #8
 80155ec:	af00      	add	r7, sp, #0
 80155ee:	4603      	mov	r3, r0
 80155f0:	6039      	str	r1, [r7, #0]
 80155f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80155f4:	683a      	ldr	r2, [r7, #0]
 80155f6:	4904      	ldr	r1, [pc, #16]	; (8015608 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80155f8:	4804      	ldr	r0, [pc, #16]	; (801560c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80155fa:	f7fc ff3c 	bl	8012476 <USBD_GetString>
  return USBD_StrDesc;
 80155fe:	4b02      	ldr	r3, [pc, #8]	; (8015608 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8015600:	4618      	mov	r0, r3
 8015602:	3708      	adds	r7, #8
 8015604:	46bd      	mov	sp, r7
 8015606:	bd80      	pop	{r7, pc}
 8015608:	20007134 	.word	0x20007134
 801560c:	0801b554 	.word	0x0801b554

08015610 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015610:	b580      	push	{r7, lr}
 8015612:	b082      	sub	sp, #8
 8015614:	af00      	add	r7, sp, #0
 8015616:	4603      	mov	r3, r0
 8015618:	6039      	str	r1, [r7, #0]
 801561a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801561c:	683b      	ldr	r3, [r7, #0]
 801561e:	221a      	movs	r2, #26
 8015620:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8015622:	f000 f843 	bl	80156ac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8015626:	4b02      	ldr	r3, [pc, #8]	; (8015630 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8015628:	4618      	mov	r0, r3
 801562a:	3708      	adds	r7, #8
 801562c:	46bd      	mov	sp, r7
 801562e:	bd80      	pop	{r7, pc}
 8015630:	20000990 	.word	0x20000990

08015634 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015634:	b580      	push	{r7, lr}
 8015636:	b082      	sub	sp, #8
 8015638:	af00      	add	r7, sp, #0
 801563a:	4603      	mov	r3, r0
 801563c:	6039      	str	r1, [r7, #0]
 801563e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015640:	79fb      	ldrb	r3, [r7, #7]
 8015642:	2b00      	cmp	r3, #0
 8015644:	d105      	bne.n	8015652 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015646:	683a      	ldr	r2, [r7, #0]
 8015648:	4907      	ldr	r1, [pc, #28]	; (8015668 <USBD_FS_ConfigStrDescriptor+0x34>)
 801564a:	4808      	ldr	r0, [pc, #32]	; (801566c <USBD_FS_ConfigStrDescriptor+0x38>)
 801564c:	f7fc ff13 	bl	8012476 <USBD_GetString>
 8015650:	e004      	b.n	801565c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015652:	683a      	ldr	r2, [r7, #0]
 8015654:	4904      	ldr	r1, [pc, #16]	; (8015668 <USBD_FS_ConfigStrDescriptor+0x34>)
 8015656:	4805      	ldr	r0, [pc, #20]	; (801566c <USBD_FS_ConfigStrDescriptor+0x38>)
 8015658:	f7fc ff0d 	bl	8012476 <USBD_GetString>
  }
  return USBD_StrDesc;
 801565c:	4b02      	ldr	r3, [pc, #8]	; (8015668 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801565e:	4618      	mov	r0, r3
 8015660:	3708      	adds	r7, #8
 8015662:	46bd      	mov	sp, r7
 8015664:	bd80      	pop	{r7, pc}
 8015666:	bf00      	nop
 8015668:	20007134 	.word	0x20007134
 801566c:	0801b568 	.word	0x0801b568

08015670 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015670:	b580      	push	{r7, lr}
 8015672:	b082      	sub	sp, #8
 8015674:	af00      	add	r7, sp, #0
 8015676:	4603      	mov	r3, r0
 8015678:	6039      	str	r1, [r7, #0]
 801567a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801567c:	79fb      	ldrb	r3, [r7, #7]
 801567e:	2b00      	cmp	r3, #0
 8015680:	d105      	bne.n	801568e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015682:	683a      	ldr	r2, [r7, #0]
 8015684:	4907      	ldr	r1, [pc, #28]	; (80156a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015686:	4808      	ldr	r0, [pc, #32]	; (80156a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015688:	f7fc fef5 	bl	8012476 <USBD_GetString>
 801568c:	e004      	b.n	8015698 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801568e:	683a      	ldr	r2, [r7, #0]
 8015690:	4904      	ldr	r1, [pc, #16]	; (80156a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015692:	4805      	ldr	r0, [pc, #20]	; (80156a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015694:	f7fc feef 	bl	8012476 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015698:	4b02      	ldr	r3, [pc, #8]	; (80156a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801569a:	4618      	mov	r0, r3
 801569c:	3708      	adds	r7, #8
 801569e:	46bd      	mov	sp, r7
 80156a0:	bd80      	pop	{r7, pc}
 80156a2:	bf00      	nop
 80156a4:	20007134 	.word	0x20007134
 80156a8:	0801b574 	.word	0x0801b574

080156ac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80156ac:	b580      	push	{r7, lr}
 80156ae:	b084      	sub	sp, #16
 80156b0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80156b2:	4b0f      	ldr	r3, [pc, #60]	; (80156f0 <Get_SerialNum+0x44>)
 80156b4:	681b      	ldr	r3, [r3, #0]
 80156b6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80156b8:	4b0e      	ldr	r3, [pc, #56]	; (80156f4 <Get_SerialNum+0x48>)
 80156ba:	681b      	ldr	r3, [r3, #0]
 80156bc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80156be:	4b0e      	ldr	r3, [pc, #56]	; (80156f8 <Get_SerialNum+0x4c>)
 80156c0:	681b      	ldr	r3, [r3, #0]
 80156c2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80156c4:	68fa      	ldr	r2, [r7, #12]
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	4413      	add	r3, r2
 80156ca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80156cc:	68fb      	ldr	r3, [r7, #12]
 80156ce:	2b00      	cmp	r3, #0
 80156d0:	d009      	beq.n	80156e6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80156d2:	2208      	movs	r2, #8
 80156d4:	4909      	ldr	r1, [pc, #36]	; (80156fc <Get_SerialNum+0x50>)
 80156d6:	68f8      	ldr	r0, [r7, #12]
 80156d8:	f000 f814 	bl	8015704 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80156dc:	2204      	movs	r2, #4
 80156de:	4908      	ldr	r1, [pc, #32]	; (8015700 <Get_SerialNum+0x54>)
 80156e0:	68b8      	ldr	r0, [r7, #8]
 80156e2:	f000 f80f 	bl	8015704 <IntToUnicode>
  }
}
 80156e6:	bf00      	nop
 80156e8:	3710      	adds	r7, #16
 80156ea:	46bd      	mov	sp, r7
 80156ec:	bd80      	pop	{r7, pc}
 80156ee:	bf00      	nop
 80156f0:	1fff7a10 	.word	0x1fff7a10
 80156f4:	1fff7a14 	.word	0x1fff7a14
 80156f8:	1fff7a18 	.word	0x1fff7a18
 80156fc:	20000992 	.word	0x20000992
 8015700:	200009a2 	.word	0x200009a2

08015704 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015704:	b480      	push	{r7}
 8015706:	b087      	sub	sp, #28
 8015708:	af00      	add	r7, sp, #0
 801570a:	60f8      	str	r0, [r7, #12]
 801570c:	60b9      	str	r1, [r7, #8]
 801570e:	4613      	mov	r3, r2
 8015710:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8015712:	2300      	movs	r3, #0
 8015714:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8015716:	2300      	movs	r3, #0
 8015718:	75fb      	strb	r3, [r7, #23]
 801571a:	e027      	b.n	801576c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801571c:	68fb      	ldr	r3, [r7, #12]
 801571e:	0f1b      	lsrs	r3, r3, #28
 8015720:	2b09      	cmp	r3, #9
 8015722:	d80b      	bhi.n	801573c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015724:	68fb      	ldr	r3, [r7, #12]
 8015726:	0f1b      	lsrs	r3, r3, #28
 8015728:	b2da      	uxtb	r2, r3
 801572a:	7dfb      	ldrb	r3, [r7, #23]
 801572c:	005b      	lsls	r3, r3, #1
 801572e:	4619      	mov	r1, r3
 8015730:	68bb      	ldr	r3, [r7, #8]
 8015732:	440b      	add	r3, r1
 8015734:	3230      	adds	r2, #48	; 0x30
 8015736:	b2d2      	uxtb	r2, r2
 8015738:	701a      	strb	r2, [r3, #0]
 801573a:	e00a      	b.n	8015752 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801573c:	68fb      	ldr	r3, [r7, #12]
 801573e:	0f1b      	lsrs	r3, r3, #28
 8015740:	b2da      	uxtb	r2, r3
 8015742:	7dfb      	ldrb	r3, [r7, #23]
 8015744:	005b      	lsls	r3, r3, #1
 8015746:	4619      	mov	r1, r3
 8015748:	68bb      	ldr	r3, [r7, #8]
 801574a:	440b      	add	r3, r1
 801574c:	3237      	adds	r2, #55	; 0x37
 801574e:	b2d2      	uxtb	r2, r2
 8015750:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8015752:	68fb      	ldr	r3, [r7, #12]
 8015754:	011b      	lsls	r3, r3, #4
 8015756:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8015758:	7dfb      	ldrb	r3, [r7, #23]
 801575a:	005b      	lsls	r3, r3, #1
 801575c:	3301      	adds	r3, #1
 801575e:	68ba      	ldr	r2, [r7, #8]
 8015760:	4413      	add	r3, r2
 8015762:	2200      	movs	r2, #0
 8015764:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8015766:	7dfb      	ldrb	r3, [r7, #23]
 8015768:	3301      	adds	r3, #1
 801576a:	75fb      	strb	r3, [r7, #23]
 801576c:	7dfa      	ldrb	r2, [r7, #23]
 801576e:	79fb      	ldrb	r3, [r7, #7]
 8015770:	429a      	cmp	r2, r3
 8015772:	d3d3      	bcc.n	801571c <IntToUnicode+0x18>
  }
}
 8015774:	bf00      	nop
 8015776:	371c      	adds	r7, #28
 8015778:	46bd      	mov	sp, r7
 801577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801577e:	4770      	bx	lr

08015780 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8015780:	b580      	push	{r7, lr}
 8015782:	b08a      	sub	sp, #40	; 0x28
 8015784:	af00      	add	r7, sp, #0
 8015786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015788:	f107 0314 	add.w	r3, r7, #20
 801578c:	2200      	movs	r2, #0
 801578e:	601a      	str	r2, [r3, #0]
 8015790:	605a      	str	r2, [r3, #4]
 8015792:	609a      	str	r2, [r3, #8]
 8015794:	60da      	str	r2, [r3, #12]
 8015796:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	681b      	ldr	r3, [r3, #0]
 801579c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80157a0:	d13a      	bne.n	8015818 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80157a2:	2300      	movs	r3, #0
 80157a4:	613b      	str	r3, [r7, #16]
 80157a6:	4b1e      	ldr	r3, [pc, #120]	; (8015820 <HAL_PCD_MspInit+0xa0>)
 80157a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80157aa:	4a1d      	ldr	r2, [pc, #116]	; (8015820 <HAL_PCD_MspInit+0xa0>)
 80157ac:	f043 0301 	orr.w	r3, r3, #1
 80157b0:	6313      	str	r3, [r2, #48]	; 0x30
 80157b2:	4b1b      	ldr	r3, [pc, #108]	; (8015820 <HAL_PCD_MspInit+0xa0>)
 80157b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80157b6:	f003 0301 	and.w	r3, r3, #1
 80157ba:	613b      	str	r3, [r7, #16]
 80157bc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80157be:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80157c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80157c4:	2302      	movs	r3, #2
 80157c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80157c8:	2300      	movs	r3, #0
 80157ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80157cc:	2303      	movs	r3, #3
 80157ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80157d0:	230a      	movs	r3, #10
 80157d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80157d4:	f107 0314 	add.w	r3, r7, #20
 80157d8:	4619      	mov	r1, r3
 80157da:	4812      	ldr	r0, [pc, #72]	; (8015824 <HAL_PCD_MspInit+0xa4>)
 80157dc:	f7f6 fbd8 	bl	800bf90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80157e0:	4b0f      	ldr	r3, [pc, #60]	; (8015820 <HAL_PCD_MspInit+0xa0>)
 80157e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80157e4:	4a0e      	ldr	r2, [pc, #56]	; (8015820 <HAL_PCD_MspInit+0xa0>)
 80157e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80157ea:	6353      	str	r3, [r2, #52]	; 0x34
 80157ec:	2300      	movs	r3, #0
 80157ee:	60fb      	str	r3, [r7, #12]
 80157f0:	4b0b      	ldr	r3, [pc, #44]	; (8015820 <HAL_PCD_MspInit+0xa0>)
 80157f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80157f4:	4a0a      	ldr	r2, [pc, #40]	; (8015820 <HAL_PCD_MspInit+0xa0>)
 80157f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80157fa:	6453      	str	r3, [r2, #68]	; 0x44
 80157fc:	4b08      	ldr	r3, [pc, #32]	; (8015820 <HAL_PCD_MspInit+0xa0>)
 80157fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015800:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015804:	60fb      	str	r3, [r7, #12]
 8015806:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8015808:	2200      	movs	r2, #0
 801580a:	2105      	movs	r1, #5
 801580c:	2043      	movs	r0, #67	; 0x43
 801580e:	f7f5 fff7 	bl	800b800 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8015812:	2043      	movs	r0, #67	; 0x43
 8015814:	f7f6 f810 	bl	800b838 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8015818:	bf00      	nop
 801581a:	3728      	adds	r7, #40	; 0x28
 801581c:	46bd      	mov	sp, r7
 801581e:	bd80      	pop	{r7, pc}
 8015820:	40023800 	.word	0x40023800
 8015824:	40020000 	.word	0x40020000

08015828 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015828:	b580      	push	{r7, lr}
 801582a:	b082      	sub	sp, #8
 801582c:	af00      	add	r7, sp, #0
 801582e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801583c:	4619      	mov	r1, r3
 801583e:	4610      	mov	r0, r2
 8015840:	f7fb fe96 	bl	8011570 <USBD_LL_SetupStage>
}
 8015844:	bf00      	nop
 8015846:	3708      	adds	r7, #8
 8015848:	46bd      	mov	sp, r7
 801584a:	bd80      	pop	{r7, pc}

0801584c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801584c:	b580      	push	{r7, lr}
 801584e:	b082      	sub	sp, #8
 8015850:	af00      	add	r7, sp, #0
 8015852:	6078      	str	r0, [r7, #4]
 8015854:	460b      	mov	r3, r1
 8015856:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801585e:	78fa      	ldrb	r2, [r7, #3]
 8015860:	6879      	ldr	r1, [r7, #4]
 8015862:	4613      	mov	r3, r2
 8015864:	00db      	lsls	r3, r3, #3
 8015866:	1a9b      	subs	r3, r3, r2
 8015868:	009b      	lsls	r3, r3, #2
 801586a:	440b      	add	r3, r1
 801586c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8015870:	681a      	ldr	r2, [r3, #0]
 8015872:	78fb      	ldrb	r3, [r7, #3]
 8015874:	4619      	mov	r1, r3
 8015876:	f7fb fece 	bl	8011616 <USBD_LL_DataOutStage>
}
 801587a:	bf00      	nop
 801587c:	3708      	adds	r7, #8
 801587e:	46bd      	mov	sp, r7
 8015880:	bd80      	pop	{r7, pc}

08015882 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015882:	b580      	push	{r7, lr}
 8015884:	b082      	sub	sp, #8
 8015886:	af00      	add	r7, sp, #0
 8015888:	6078      	str	r0, [r7, #4]
 801588a:	460b      	mov	r3, r1
 801588c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8015894:	78fa      	ldrb	r2, [r7, #3]
 8015896:	6879      	ldr	r1, [r7, #4]
 8015898:	4613      	mov	r3, r2
 801589a:	00db      	lsls	r3, r3, #3
 801589c:	1a9b      	subs	r3, r3, r2
 801589e:	009b      	lsls	r3, r3, #2
 80158a0:	440b      	add	r3, r1
 80158a2:	3348      	adds	r3, #72	; 0x48
 80158a4:	681a      	ldr	r2, [r3, #0]
 80158a6:	78fb      	ldrb	r3, [r7, #3]
 80158a8:	4619      	mov	r1, r3
 80158aa:	f7fb ff17 	bl	80116dc <USBD_LL_DataInStage>
}
 80158ae:	bf00      	nop
 80158b0:	3708      	adds	r7, #8
 80158b2:	46bd      	mov	sp, r7
 80158b4:	bd80      	pop	{r7, pc}

080158b6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80158b6:	b580      	push	{r7, lr}
 80158b8:	b082      	sub	sp, #8
 80158ba:	af00      	add	r7, sp, #0
 80158bc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80158c4:	4618      	mov	r0, r3
 80158c6:	f7fc f81b 	bl	8011900 <USBD_LL_SOF>
}
 80158ca:	bf00      	nop
 80158cc:	3708      	adds	r7, #8
 80158ce:	46bd      	mov	sp, r7
 80158d0:	bd80      	pop	{r7, pc}

080158d2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80158d2:	b580      	push	{r7, lr}
 80158d4:	b084      	sub	sp, #16
 80158d6:	af00      	add	r7, sp, #0
 80158d8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80158da:	2301      	movs	r3, #1
 80158dc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80158de:	687b      	ldr	r3, [r7, #4]
 80158e0:	68db      	ldr	r3, [r3, #12]
 80158e2:	2b00      	cmp	r3, #0
 80158e4:	d102      	bne.n	80158ec <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80158e6:	2300      	movs	r3, #0
 80158e8:	73fb      	strb	r3, [r7, #15]
 80158ea:	e008      	b.n	80158fe <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	68db      	ldr	r3, [r3, #12]
 80158f0:	2b02      	cmp	r3, #2
 80158f2:	d102      	bne.n	80158fa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80158f4:	2301      	movs	r3, #1
 80158f6:	73fb      	strb	r3, [r7, #15]
 80158f8:	e001      	b.n	80158fe <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80158fa:	f7ee fdef 	bl	80044dc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015904:	7bfa      	ldrb	r2, [r7, #15]
 8015906:	4611      	mov	r1, r2
 8015908:	4618      	mov	r0, r3
 801590a:	f7fb ffbe 	bl	801188a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015914:	4618      	mov	r0, r3
 8015916:	f7fb ff77 	bl	8011808 <USBD_LL_Reset>
}
 801591a:	bf00      	nop
 801591c:	3710      	adds	r7, #16
 801591e:	46bd      	mov	sp, r7
 8015920:	bd80      	pop	{r7, pc}
	...

08015924 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015924:	b580      	push	{r7, lr}
 8015926:	b082      	sub	sp, #8
 8015928:	af00      	add	r7, sp, #0
 801592a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015932:	4618      	mov	r0, r3
 8015934:	f7fb ffb9 	bl	80118aa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	681b      	ldr	r3, [r3, #0]
 801593c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015940:	681b      	ldr	r3, [r3, #0]
 8015942:	687a      	ldr	r2, [r7, #4]
 8015944:	6812      	ldr	r2, [r2, #0]
 8015946:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801594a:	f043 0301 	orr.w	r3, r3, #1
 801594e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015950:	687b      	ldr	r3, [r7, #4]
 8015952:	6a1b      	ldr	r3, [r3, #32]
 8015954:	2b00      	cmp	r3, #0
 8015956:	d005      	beq.n	8015964 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015958:	4b04      	ldr	r3, [pc, #16]	; (801596c <HAL_PCD_SuspendCallback+0x48>)
 801595a:	691b      	ldr	r3, [r3, #16]
 801595c:	4a03      	ldr	r2, [pc, #12]	; (801596c <HAL_PCD_SuspendCallback+0x48>)
 801595e:	f043 0306 	orr.w	r3, r3, #6
 8015962:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8015964:	bf00      	nop
 8015966:	3708      	adds	r7, #8
 8015968:	46bd      	mov	sp, r7
 801596a:	bd80      	pop	{r7, pc}
 801596c:	e000ed00 	.word	0xe000ed00

08015970 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015970:	b580      	push	{r7, lr}
 8015972:	b082      	sub	sp, #8
 8015974:	af00      	add	r7, sp, #0
 8015976:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801597e:	4618      	mov	r0, r3
 8015980:	f7fb ffa8 	bl	80118d4 <USBD_LL_Resume>
}
 8015984:	bf00      	nop
 8015986:	3708      	adds	r7, #8
 8015988:	46bd      	mov	sp, r7
 801598a:	bd80      	pop	{r7, pc}

0801598c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801598c:	b580      	push	{r7, lr}
 801598e:	b082      	sub	sp, #8
 8015990:	af00      	add	r7, sp, #0
 8015992:	6078      	str	r0, [r7, #4]
 8015994:	460b      	mov	r3, r1
 8015996:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801599e:	78fa      	ldrb	r2, [r7, #3]
 80159a0:	4611      	mov	r1, r2
 80159a2:	4618      	mov	r0, r3
 80159a4:	f7fb ffd3 	bl	801194e <USBD_LL_IsoOUTIncomplete>
}
 80159a8:	bf00      	nop
 80159aa:	3708      	adds	r7, #8
 80159ac:	46bd      	mov	sp, r7
 80159ae:	bd80      	pop	{r7, pc}

080159b0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80159b0:	b580      	push	{r7, lr}
 80159b2:	b082      	sub	sp, #8
 80159b4:	af00      	add	r7, sp, #0
 80159b6:	6078      	str	r0, [r7, #4]
 80159b8:	460b      	mov	r3, r1
 80159ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80159c2:	78fa      	ldrb	r2, [r7, #3]
 80159c4:	4611      	mov	r1, r2
 80159c6:	4618      	mov	r0, r3
 80159c8:	f7fb ffb4 	bl	8011934 <USBD_LL_IsoINIncomplete>
}
 80159cc:	bf00      	nop
 80159ce:	3708      	adds	r7, #8
 80159d0:	46bd      	mov	sp, r7
 80159d2:	bd80      	pop	{r7, pc}

080159d4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80159d4:	b580      	push	{r7, lr}
 80159d6:	b082      	sub	sp, #8
 80159d8:	af00      	add	r7, sp, #0
 80159da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80159e2:	4618      	mov	r0, r3
 80159e4:	f7fb ffc0 	bl	8011968 <USBD_LL_DevConnected>
}
 80159e8:	bf00      	nop
 80159ea:	3708      	adds	r7, #8
 80159ec:	46bd      	mov	sp, r7
 80159ee:	bd80      	pop	{r7, pc}

080159f0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80159f0:	b580      	push	{r7, lr}
 80159f2:	b082      	sub	sp, #8
 80159f4:	af00      	add	r7, sp, #0
 80159f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80159fe:	4618      	mov	r0, r3
 8015a00:	f7fb ffbd 	bl	801197e <USBD_LL_DevDisconnected>
}
 8015a04:	bf00      	nop
 8015a06:	3708      	adds	r7, #8
 8015a08:	46bd      	mov	sp, r7
 8015a0a:	bd80      	pop	{r7, pc}

08015a0c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015a0c:	b580      	push	{r7, lr}
 8015a0e:	b082      	sub	sp, #8
 8015a10:	af00      	add	r7, sp, #0
 8015a12:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	781b      	ldrb	r3, [r3, #0]
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	d13c      	bne.n	8015a96 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8015a1c:	4a20      	ldr	r2, [pc, #128]	; (8015aa0 <USBD_LL_Init+0x94>)
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	4a1e      	ldr	r2, [pc, #120]	; (8015aa0 <USBD_LL_Init+0x94>)
 8015a28:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8015a2c:	4b1c      	ldr	r3, [pc, #112]	; (8015aa0 <USBD_LL_Init+0x94>)
 8015a2e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8015a32:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8015a34:	4b1a      	ldr	r3, [pc, #104]	; (8015aa0 <USBD_LL_Init+0x94>)
 8015a36:	2204      	movs	r2, #4
 8015a38:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8015a3a:	4b19      	ldr	r3, [pc, #100]	; (8015aa0 <USBD_LL_Init+0x94>)
 8015a3c:	2202      	movs	r2, #2
 8015a3e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8015a40:	4b17      	ldr	r3, [pc, #92]	; (8015aa0 <USBD_LL_Init+0x94>)
 8015a42:	2200      	movs	r2, #0
 8015a44:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8015a46:	4b16      	ldr	r3, [pc, #88]	; (8015aa0 <USBD_LL_Init+0x94>)
 8015a48:	2202      	movs	r2, #2
 8015a4a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8015a4c:	4b14      	ldr	r3, [pc, #80]	; (8015aa0 <USBD_LL_Init+0x94>)
 8015a4e:	2200      	movs	r2, #0
 8015a50:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8015a52:	4b13      	ldr	r3, [pc, #76]	; (8015aa0 <USBD_LL_Init+0x94>)
 8015a54:	2200      	movs	r2, #0
 8015a56:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8015a58:	4b11      	ldr	r3, [pc, #68]	; (8015aa0 <USBD_LL_Init+0x94>)
 8015a5a:	2200      	movs	r2, #0
 8015a5c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8015a5e:	4b10      	ldr	r3, [pc, #64]	; (8015aa0 <USBD_LL_Init+0x94>)
 8015a60:	2200      	movs	r2, #0
 8015a62:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8015a64:	4b0e      	ldr	r3, [pc, #56]	; (8015aa0 <USBD_LL_Init+0x94>)
 8015a66:	2200      	movs	r2, #0
 8015a68:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8015a6a:	480d      	ldr	r0, [pc, #52]	; (8015aa0 <USBD_LL_Init+0x94>)
 8015a6c:	f7f6 fc9a 	bl	800c3a4 <HAL_PCD_Init>
 8015a70:	4603      	mov	r3, r0
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	d001      	beq.n	8015a7a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8015a76:	f7ee fd31 	bl	80044dc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8015a7a:	2180      	movs	r1, #128	; 0x80
 8015a7c:	4808      	ldr	r0, [pc, #32]	; (8015aa0 <USBD_LL_Init+0x94>)
 8015a7e:	f7f7 fdf8 	bl	800d672 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8015a82:	2240      	movs	r2, #64	; 0x40
 8015a84:	2100      	movs	r1, #0
 8015a86:	4806      	ldr	r0, [pc, #24]	; (8015aa0 <USBD_LL_Init+0x94>)
 8015a88:	f7f7 fdac 	bl	800d5e4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8015a8c:	2280      	movs	r2, #128	; 0x80
 8015a8e:	2101      	movs	r1, #1
 8015a90:	4803      	ldr	r0, [pc, #12]	; (8015aa0 <USBD_LL_Init+0x94>)
 8015a92:	f7f7 fda7 	bl	800d5e4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8015a96:	2300      	movs	r3, #0
}
 8015a98:	4618      	mov	r0, r3
 8015a9a:	3708      	adds	r7, #8
 8015a9c:	46bd      	mov	sp, r7
 8015a9e:	bd80      	pop	{r7, pc}
 8015aa0:	20007334 	.word	0x20007334

08015aa4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015aa4:	b580      	push	{r7, lr}
 8015aa6:	b084      	sub	sp, #16
 8015aa8:	af00      	add	r7, sp, #0
 8015aaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015aac:	2300      	movs	r3, #0
 8015aae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015ab0:	2300      	movs	r3, #0
 8015ab2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015ab4:	687b      	ldr	r3, [r7, #4]
 8015ab6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015aba:	4618      	mov	r0, r3
 8015abc:	f7f6 fd8f 	bl	800c5de <HAL_PCD_Start>
 8015ac0:	4603      	mov	r3, r0
 8015ac2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015ac4:	7bfb      	ldrb	r3, [r7, #15]
 8015ac6:	4618      	mov	r0, r3
 8015ac8:	f000 f92a 	bl	8015d20 <USBD_Get_USB_Status>
 8015acc:	4603      	mov	r3, r0
 8015ace:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015ad0:	7bbb      	ldrb	r3, [r7, #14]
}
 8015ad2:	4618      	mov	r0, r3
 8015ad4:	3710      	adds	r7, #16
 8015ad6:	46bd      	mov	sp, r7
 8015ad8:	bd80      	pop	{r7, pc}

08015ada <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015ada:	b580      	push	{r7, lr}
 8015adc:	b084      	sub	sp, #16
 8015ade:	af00      	add	r7, sp, #0
 8015ae0:	6078      	str	r0, [r7, #4]
 8015ae2:	4608      	mov	r0, r1
 8015ae4:	4611      	mov	r1, r2
 8015ae6:	461a      	mov	r2, r3
 8015ae8:	4603      	mov	r3, r0
 8015aea:	70fb      	strb	r3, [r7, #3]
 8015aec:	460b      	mov	r3, r1
 8015aee:	70bb      	strb	r3, [r7, #2]
 8015af0:	4613      	mov	r3, r2
 8015af2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015af4:	2300      	movs	r3, #0
 8015af6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015af8:	2300      	movs	r3, #0
 8015afa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015b02:	78bb      	ldrb	r3, [r7, #2]
 8015b04:	883a      	ldrh	r2, [r7, #0]
 8015b06:	78f9      	ldrb	r1, [r7, #3]
 8015b08:	f7f7 f973 	bl	800cdf2 <HAL_PCD_EP_Open>
 8015b0c:	4603      	mov	r3, r0
 8015b0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015b10:	7bfb      	ldrb	r3, [r7, #15]
 8015b12:	4618      	mov	r0, r3
 8015b14:	f000 f904 	bl	8015d20 <USBD_Get_USB_Status>
 8015b18:	4603      	mov	r3, r0
 8015b1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015b1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8015b1e:	4618      	mov	r0, r3
 8015b20:	3710      	adds	r7, #16
 8015b22:	46bd      	mov	sp, r7
 8015b24:	bd80      	pop	{r7, pc}

08015b26 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015b26:	b580      	push	{r7, lr}
 8015b28:	b084      	sub	sp, #16
 8015b2a:	af00      	add	r7, sp, #0
 8015b2c:	6078      	str	r0, [r7, #4]
 8015b2e:	460b      	mov	r3, r1
 8015b30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015b32:	2300      	movs	r3, #0
 8015b34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b36:	2300      	movs	r3, #0
 8015b38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015b40:	78fa      	ldrb	r2, [r7, #3]
 8015b42:	4611      	mov	r1, r2
 8015b44:	4618      	mov	r0, r3
 8015b46:	f7f7 f9bc 	bl	800cec2 <HAL_PCD_EP_Close>
 8015b4a:	4603      	mov	r3, r0
 8015b4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015b4e:	7bfb      	ldrb	r3, [r7, #15]
 8015b50:	4618      	mov	r0, r3
 8015b52:	f000 f8e5 	bl	8015d20 <USBD_Get_USB_Status>
 8015b56:	4603      	mov	r3, r0
 8015b58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015b5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8015b5c:	4618      	mov	r0, r3
 8015b5e:	3710      	adds	r7, #16
 8015b60:	46bd      	mov	sp, r7
 8015b62:	bd80      	pop	{r7, pc}

08015b64 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015b64:	b580      	push	{r7, lr}
 8015b66:	b084      	sub	sp, #16
 8015b68:	af00      	add	r7, sp, #0
 8015b6a:	6078      	str	r0, [r7, #4]
 8015b6c:	460b      	mov	r3, r1
 8015b6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015b70:	2300      	movs	r3, #0
 8015b72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b74:	2300      	movs	r3, #0
 8015b76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015b7e:	78fa      	ldrb	r2, [r7, #3]
 8015b80:	4611      	mov	r1, r2
 8015b82:	4618      	mov	r0, r3
 8015b84:	f7f7 fa94 	bl	800d0b0 <HAL_PCD_EP_SetStall>
 8015b88:	4603      	mov	r3, r0
 8015b8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015b8c:	7bfb      	ldrb	r3, [r7, #15]
 8015b8e:	4618      	mov	r0, r3
 8015b90:	f000 f8c6 	bl	8015d20 <USBD_Get_USB_Status>
 8015b94:	4603      	mov	r3, r0
 8015b96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015b98:	7bbb      	ldrb	r3, [r7, #14]
}
 8015b9a:	4618      	mov	r0, r3
 8015b9c:	3710      	adds	r7, #16
 8015b9e:	46bd      	mov	sp, r7
 8015ba0:	bd80      	pop	{r7, pc}

08015ba2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015ba2:	b580      	push	{r7, lr}
 8015ba4:	b084      	sub	sp, #16
 8015ba6:	af00      	add	r7, sp, #0
 8015ba8:	6078      	str	r0, [r7, #4]
 8015baa:	460b      	mov	r3, r1
 8015bac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015bae:	2300      	movs	r3, #0
 8015bb0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015bb2:	2300      	movs	r3, #0
 8015bb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015bbc:	78fa      	ldrb	r2, [r7, #3]
 8015bbe:	4611      	mov	r1, r2
 8015bc0:	4618      	mov	r0, r3
 8015bc2:	f7f7 fad9 	bl	800d178 <HAL_PCD_EP_ClrStall>
 8015bc6:	4603      	mov	r3, r0
 8015bc8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015bca:	7bfb      	ldrb	r3, [r7, #15]
 8015bcc:	4618      	mov	r0, r3
 8015bce:	f000 f8a7 	bl	8015d20 <USBD_Get_USB_Status>
 8015bd2:	4603      	mov	r3, r0
 8015bd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015bd6:	7bbb      	ldrb	r3, [r7, #14]
}
 8015bd8:	4618      	mov	r0, r3
 8015bda:	3710      	adds	r7, #16
 8015bdc:	46bd      	mov	sp, r7
 8015bde:	bd80      	pop	{r7, pc}

08015be0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015be0:	b480      	push	{r7}
 8015be2:	b085      	sub	sp, #20
 8015be4:	af00      	add	r7, sp, #0
 8015be6:	6078      	str	r0, [r7, #4]
 8015be8:	460b      	mov	r3, r1
 8015bea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015bf2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015bf4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015bf8:	2b00      	cmp	r3, #0
 8015bfa:	da0b      	bge.n	8015c14 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015bfc:	78fb      	ldrb	r3, [r7, #3]
 8015bfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015c02:	68f9      	ldr	r1, [r7, #12]
 8015c04:	4613      	mov	r3, r2
 8015c06:	00db      	lsls	r3, r3, #3
 8015c08:	1a9b      	subs	r3, r3, r2
 8015c0a:	009b      	lsls	r3, r3, #2
 8015c0c:	440b      	add	r3, r1
 8015c0e:	333e      	adds	r3, #62	; 0x3e
 8015c10:	781b      	ldrb	r3, [r3, #0]
 8015c12:	e00b      	b.n	8015c2c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015c14:	78fb      	ldrb	r3, [r7, #3]
 8015c16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015c1a:	68f9      	ldr	r1, [r7, #12]
 8015c1c:	4613      	mov	r3, r2
 8015c1e:	00db      	lsls	r3, r3, #3
 8015c20:	1a9b      	subs	r3, r3, r2
 8015c22:	009b      	lsls	r3, r3, #2
 8015c24:	440b      	add	r3, r1
 8015c26:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015c2a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015c2c:	4618      	mov	r0, r3
 8015c2e:	3714      	adds	r7, #20
 8015c30:	46bd      	mov	sp, r7
 8015c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c36:	4770      	bx	lr

08015c38 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015c38:	b580      	push	{r7, lr}
 8015c3a:	b084      	sub	sp, #16
 8015c3c:	af00      	add	r7, sp, #0
 8015c3e:	6078      	str	r0, [r7, #4]
 8015c40:	460b      	mov	r3, r1
 8015c42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015c44:	2300      	movs	r3, #0
 8015c46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015c48:	2300      	movs	r3, #0
 8015c4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015c52:	78fa      	ldrb	r2, [r7, #3]
 8015c54:	4611      	mov	r1, r2
 8015c56:	4618      	mov	r0, r3
 8015c58:	f7f7 f8a6 	bl	800cda8 <HAL_PCD_SetAddress>
 8015c5c:	4603      	mov	r3, r0
 8015c5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015c60:	7bfb      	ldrb	r3, [r7, #15]
 8015c62:	4618      	mov	r0, r3
 8015c64:	f000 f85c 	bl	8015d20 <USBD_Get_USB_Status>
 8015c68:	4603      	mov	r3, r0
 8015c6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015c6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8015c6e:	4618      	mov	r0, r3
 8015c70:	3710      	adds	r7, #16
 8015c72:	46bd      	mov	sp, r7
 8015c74:	bd80      	pop	{r7, pc}

08015c76 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015c76:	b580      	push	{r7, lr}
 8015c78:	b086      	sub	sp, #24
 8015c7a:	af00      	add	r7, sp, #0
 8015c7c:	60f8      	str	r0, [r7, #12]
 8015c7e:	607a      	str	r2, [r7, #4]
 8015c80:	603b      	str	r3, [r7, #0]
 8015c82:	460b      	mov	r3, r1
 8015c84:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015c86:	2300      	movs	r3, #0
 8015c88:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015c8a:	2300      	movs	r3, #0
 8015c8c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015c8e:	68fb      	ldr	r3, [r7, #12]
 8015c90:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015c94:	7af9      	ldrb	r1, [r7, #11]
 8015c96:	683b      	ldr	r3, [r7, #0]
 8015c98:	687a      	ldr	r2, [r7, #4]
 8015c9a:	f7f7 f9bf 	bl	800d01c <HAL_PCD_EP_Transmit>
 8015c9e:	4603      	mov	r3, r0
 8015ca0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015ca2:	7dfb      	ldrb	r3, [r7, #23]
 8015ca4:	4618      	mov	r0, r3
 8015ca6:	f000 f83b 	bl	8015d20 <USBD_Get_USB_Status>
 8015caa:	4603      	mov	r3, r0
 8015cac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015cae:	7dbb      	ldrb	r3, [r7, #22]
}
 8015cb0:	4618      	mov	r0, r3
 8015cb2:	3718      	adds	r7, #24
 8015cb4:	46bd      	mov	sp, r7
 8015cb6:	bd80      	pop	{r7, pc}

08015cb8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015cb8:	b580      	push	{r7, lr}
 8015cba:	b086      	sub	sp, #24
 8015cbc:	af00      	add	r7, sp, #0
 8015cbe:	60f8      	str	r0, [r7, #12]
 8015cc0:	607a      	str	r2, [r7, #4]
 8015cc2:	603b      	str	r3, [r7, #0]
 8015cc4:	460b      	mov	r3, r1
 8015cc6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015cc8:	2300      	movs	r3, #0
 8015cca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015ccc:	2300      	movs	r3, #0
 8015cce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015cd0:	68fb      	ldr	r3, [r7, #12]
 8015cd2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015cd6:	7af9      	ldrb	r1, [r7, #11]
 8015cd8:	683b      	ldr	r3, [r7, #0]
 8015cda:	687a      	ldr	r2, [r7, #4]
 8015cdc:	f7f7 f93b 	bl	800cf56 <HAL_PCD_EP_Receive>
 8015ce0:	4603      	mov	r3, r0
 8015ce2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015ce4:	7dfb      	ldrb	r3, [r7, #23]
 8015ce6:	4618      	mov	r0, r3
 8015ce8:	f000 f81a 	bl	8015d20 <USBD_Get_USB_Status>
 8015cec:	4603      	mov	r3, r0
 8015cee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015cf0:	7dbb      	ldrb	r3, [r7, #22]
}
 8015cf2:	4618      	mov	r0, r3
 8015cf4:	3718      	adds	r7, #24
 8015cf6:	46bd      	mov	sp, r7
 8015cf8:	bd80      	pop	{r7, pc}

08015cfa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015cfa:	b580      	push	{r7, lr}
 8015cfc:	b082      	sub	sp, #8
 8015cfe:	af00      	add	r7, sp, #0
 8015d00:	6078      	str	r0, [r7, #4]
 8015d02:	460b      	mov	r3, r1
 8015d04:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015d0c:	78fa      	ldrb	r2, [r7, #3]
 8015d0e:	4611      	mov	r1, r2
 8015d10:	4618      	mov	r0, r3
 8015d12:	f7f7 f96b 	bl	800cfec <HAL_PCD_EP_GetRxCount>
 8015d16:	4603      	mov	r3, r0
}
 8015d18:	4618      	mov	r0, r3
 8015d1a:	3708      	adds	r7, #8
 8015d1c:	46bd      	mov	sp, r7
 8015d1e:	bd80      	pop	{r7, pc}

08015d20 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015d20:	b480      	push	{r7}
 8015d22:	b085      	sub	sp, #20
 8015d24:	af00      	add	r7, sp, #0
 8015d26:	4603      	mov	r3, r0
 8015d28:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015d2a:	2300      	movs	r3, #0
 8015d2c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015d2e:	79fb      	ldrb	r3, [r7, #7]
 8015d30:	2b03      	cmp	r3, #3
 8015d32:	d817      	bhi.n	8015d64 <USBD_Get_USB_Status+0x44>
 8015d34:	a201      	add	r2, pc, #4	; (adr r2, 8015d3c <USBD_Get_USB_Status+0x1c>)
 8015d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015d3a:	bf00      	nop
 8015d3c:	08015d4d 	.word	0x08015d4d
 8015d40:	08015d53 	.word	0x08015d53
 8015d44:	08015d59 	.word	0x08015d59
 8015d48:	08015d5f 	.word	0x08015d5f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015d4c:	2300      	movs	r3, #0
 8015d4e:	73fb      	strb	r3, [r7, #15]
    break;
 8015d50:	e00b      	b.n	8015d6a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015d52:	2303      	movs	r3, #3
 8015d54:	73fb      	strb	r3, [r7, #15]
    break;
 8015d56:	e008      	b.n	8015d6a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015d58:	2301      	movs	r3, #1
 8015d5a:	73fb      	strb	r3, [r7, #15]
    break;
 8015d5c:	e005      	b.n	8015d6a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015d5e:	2303      	movs	r3, #3
 8015d60:	73fb      	strb	r3, [r7, #15]
    break;
 8015d62:	e002      	b.n	8015d6a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015d64:	2303      	movs	r3, #3
 8015d66:	73fb      	strb	r3, [r7, #15]
    break;
 8015d68:	bf00      	nop
  }
  return usb_status;
 8015d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8015d6c:	4618      	mov	r0, r3
 8015d6e:	3714      	adds	r7, #20
 8015d70:	46bd      	mov	sp, r7
 8015d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d76:	4770      	bx	lr

08015d78 <__errno>:
 8015d78:	4b01      	ldr	r3, [pc, #4]	; (8015d80 <__errno+0x8>)
 8015d7a:	6818      	ldr	r0, [r3, #0]
 8015d7c:	4770      	bx	lr
 8015d7e:	bf00      	nop
 8015d80:	200009ac 	.word	0x200009ac

08015d84 <__libc_init_array>:
 8015d84:	b570      	push	{r4, r5, r6, lr}
 8015d86:	4e0d      	ldr	r6, [pc, #52]	; (8015dbc <__libc_init_array+0x38>)
 8015d88:	4c0d      	ldr	r4, [pc, #52]	; (8015dc0 <__libc_init_array+0x3c>)
 8015d8a:	1ba4      	subs	r4, r4, r6
 8015d8c:	10a4      	asrs	r4, r4, #2
 8015d8e:	2500      	movs	r5, #0
 8015d90:	42a5      	cmp	r5, r4
 8015d92:	d109      	bne.n	8015da8 <__libc_init_array+0x24>
 8015d94:	4e0b      	ldr	r6, [pc, #44]	; (8015dc4 <__libc_init_array+0x40>)
 8015d96:	4c0c      	ldr	r4, [pc, #48]	; (8015dc8 <__libc_init_array+0x44>)
 8015d98:	f005 fa8c 	bl	801b2b4 <_init>
 8015d9c:	1ba4      	subs	r4, r4, r6
 8015d9e:	10a4      	asrs	r4, r4, #2
 8015da0:	2500      	movs	r5, #0
 8015da2:	42a5      	cmp	r5, r4
 8015da4:	d105      	bne.n	8015db2 <__libc_init_array+0x2e>
 8015da6:	bd70      	pop	{r4, r5, r6, pc}
 8015da8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015dac:	4798      	blx	r3
 8015dae:	3501      	adds	r5, #1
 8015db0:	e7ee      	b.n	8015d90 <__libc_init_array+0xc>
 8015db2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015db6:	4798      	blx	r3
 8015db8:	3501      	adds	r5, #1
 8015dba:	e7f2      	b.n	8015da2 <__libc_init_array+0x1e>
 8015dbc:	0801ba88 	.word	0x0801ba88
 8015dc0:	0801ba88 	.word	0x0801ba88
 8015dc4:	0801ba88 	.word	0x0801ba88
 8015dc8:	0801ba8c 	.word	0x0801ba8c

08015dcc <malloc>:
 8015dcc:	4b02      	ldr	r3, [pc, #8]	; (8015dd8 <malloc+0xc>)
 8015dce:	4601      	mov	r1, r0
 8015dd0:	6818      	ldr	r0, [r3, #0]
 8015dd2:	f000 b885 	b.w	8015ee0 <_malloc_r>
 8015dd6:	bf00      	nop
 8015dd8:	200009ac 	.word	0x200009ac

08015ddc <free>:
 8015ddc:	4b02      	ldr	r3, [pc, #8]	; (8015de8 <free+0xc>)
 8015dde:	4601      	mov	r1, r0
 8015de0:	6818      	ldr	r0, [r3, #0]
 8015de2:	f000 b82f 	b.w	8015e44 <_free_r>
 8015de6:	bf00      	nop
 8015de8:	200009ac 	.word	0x200009ac

08015dec <memcpy>:
 8015dec:	b510      	push	{r4, lr}
 8015dee:	1e43      	subs	r3, r0, #1
 8015df0:	440a      	add	r2, r1
 8015df2:	4291      	cmp	r1, r2
 8015df4:	d100      	bne.n	8015df8 <memcpy+0xc>
 8015df6:	bd10      	pop	{r4, pc}
 8015df8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015dfc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015e00:	e7f7      	b.n	8015df2 <memcpy+0x6>

08015e02 <memmove>:
 8015e02:	4288      	cmp	r0, r1
 8015e04:	b510      	push	{r4, lr}
 8015e06:	eb01 0302 	add.w	r3, r1, r2
 8015e0a:	d807      	bhi.n	8015e1c <memmove+0x1a>
 8015e0c:	1e42      	subs	r2, r0, #1
 8015e0e:	4299      	cmp	r1, r3
 8015e10:	d00a      	beq.n	8015e28 <memmove+0x26>
 8015e12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015e16:	f802 4f01 	strb.w	r4, [r2, #1]!
 8015e1a:	e7f8      	b.n	8015e0e <memmove+0xc>
 8015e1c:	4283      	cmp	r3, r0
 8015e1e:	d9f5      	bls.n	8015e0c <memmove+0xa>
 8015e20:	1881      	adds	r1, r0, r2
 8015e22:	1ad2      	subs	r2, r2, r3
 8015e24:	42d3      	cmn	r3, r2
 8015e26:	d100      	bne.n	8015e2a <memmove+0x28>
 8015e28:	bd10      	pop	{r4, pc}
 8015e2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015e2e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8015e32:	e7f7      	b.n	8015e24 <memmove+0x22>

08015e34 <memset>:
 8015e34:	4402      	add	r2, r0
 8015e36:	4603      	mov	r3, r0
 8015e38:	4293      	cmp	r3, r2
 8015e3a:	d100      	bne.n	8015e3e <memset+0xa>
 8015e3c:	4770      	bx	lr
 8015e3e:	f803 1b01 	strb.w	r1, [r3], #1
 8015e42:	e7f9      	b.n	8015e38 <memset+0x4>

08015e44 <_free_r>:
 8015e44:	b538      	push	{r3, r4, r5, lr}
 8015e46:	4605      	mov	r5, r0
 8015e48:	2900      	cmp	r1, #0
 8015e4a:	d045      	beq.n	8015ed8 <_free_r+0x94>
 8015e4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015e50:	1f0c      	subs	r4, r1, #4
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	bfb8      	it	lt
 8015e56:	18e4      	addlt	r4, r4, r3
 8015e58:	f002 ff86 	bl	8018d68 <__malloc_lock>
 8015e5c:	4a1f      	ldr	r2, [pc, #124]	; (8015edc <_free_r+0x98>)
 8015e5e:	6813      	ldr	r3, [r2, #0]
 8015e60:	4610      	mov	r0, r2
 8015e62:	b933      	cbnz	r3, 8015e72 <_free_r+0x2e>
 8015e64:	6063      	str	r3, [r4, #4]
 8015e66:	6014      	str	r4, [r2, #0]
 8015e68:	4628      	mov	r0, r5
 8015e6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015e6e:	f002 bf7c 	b.w	8018d6a <__malloc_unlock>
 8015e72:	42a3      	cmp	r3, r4
 8015e74:	d90c      	bls.n	8015e90 <_free_r+0x4c>
 8015e76:	6821      	ldr	r1, [r4, #0]
 8015e78:	1862      	adds	r2, r4, r1
 8015e7a:	4293      	cmp	r3, r2
 8015e7c:	bf04      	itt	eq
 8015e7e:	681a      	ldreq	r2, [r3, #0]
 8015e80:	685b      	ldreq	r3, [r3, #4]
 8015e82:	6063      	str	r3, [r4, #4]
 8015e84:	bf04      	itt	eq
 8015e86:	1852      	addeq	r2, r2, r1
 8015e88:	6022      	streq	r2, [r4, #0]
 8015e8a:	6004      	str	r4, [r0, #0]
 8015e8c:	e7ec      	b.n	8015e68 <_free_r+0x24>
 8015e8e:	4613      	mov	r3, r2
 8015e90:	685a      	ldr	r2, [r3, #4]
 8015e92:	b10a      	cbz	r2, 8015e98 <_free_r+0x54>
 8015e94:	42a2      	cmp	r2, r4
 8015e96:	d9fa      	bls.n	8015e8e <_free_r+0x4a>
 8015e98:	6819      	ldr	r1, [r3, #0]
 8015e9a:	1858      	adds	r0, r3, r1
 8015e9c:	42a0      	cmp	r0, r4
 8015e9e:	d10b      	bne.n	8015eb8 <_free_r+0x74>
 8015ea0:	6820      	ldr	r0, [r4, #0]
 8015ea2:	4401      	add	r1, r0
 8015ea4:	1858      	adds	r0, r3, r1
 8015ea6:	4282      	cmp	r2, r0
 8015ea8:	6019      	str	r1, [r3, #0]
 8015eaa:	d1dd      	bne.n	8015e68 <_free_r+0x24>
 8015eac:	6810      	ldr	r0, [r2, #0]
 8015eae:	6852      	ldr	r2, [r2, #4]
 8015eb0:	605a      	str	r2, [r3, #4]
 8015eb2:	4401      	add	r1, r0
 8015eb4:	6019      	str	r1, [r3, #0]
 8015eb6:	e7d7      	b.n	8015e68 <_free_r+0x24>
 8015eb8:	d902      	bls.n	8015ec0 <_free_r+0x7c>
 8015eba:	230c      	movs	r3, #12
 8015ebc:	602b      	str	r3, [r5, #0]
 8015ebe:	e7d3      	b.n	8015e68 <_free_r+0x24>
 8015ec0:	6820      	ldr	r0, [r4, #0]
 8015ec2:	1821      	adds	r1, r4, r0
 8015ec4:	428a      	cmp	r2, r1
 8015ec6:	bf04      	itt	eq
 8015ec8:	6811      	ldreq	r1, [r2, #0]
 8015eca:	6852      	ldreq	r2, [r2, #4]
 8015ecc:	6062      	str	r2, [r4, #4]
 8015ece:	bf04      	itt	eq
 8015ed0:	1809      	addeq	r1, r1, r0
 8015ed2:	6021      	streq	r1, [r4, #0]
 8015ed4:	605c      	str	r4, [r3, #4]
 8015ed6:	e7c7      	b.n	8015e68 <_free_r+0x24>
 8015ed8:	bd38      	pop	{r3, r4, r5, pc}
 8015eda:	bf00      	nop
 8015edc:	20004d58 	.word	0x20004d58

08015ee0 <_malloc_r>:
 8015ee0:	b570      	push	{r4, r5, r6, lr}
 8015ee2:	1ccd      	adds	r5, r1, #3
 8015ee4:	f025 0503 	bic.w	r5, r5, #3
 8015ee8:	3508      	adds	r5, #8
 8015eea:	2d0c      	cmp	r5, #12
 8015eec:	bf38      	it	cc
 8015eee:	250c      	movcc	r5, #12
 8015ef0:	2d00      	cmp	r5, #0
 8015ef2:	4606      	mov	r6, r0
 8015ef4:	db01      	blt.n	8015efa <_malloc_r+0x1a>
 8015ef6:	42a9      	cmp	r1, r5
 8015ef8:	d903      	bls.n	8015f02 <_malloc_r+0x22>
 8015efa:	230c      	movs	r3, #12
 8015efc:	6033      	str	r3, [r6, #0]
 8015efe:	2000      	movs	r0, #0
 8015f00:	bd70      	pop	{r4, r5, r6, pc}
 8015f02:	f002 ff31 	bl	8018d68 <__malloc_lock>
 8015f06:	4a21      	ldr	r2, [pc, #132]	; (8015f8c <_malloc_r+0xac>)
 8015f08:	6814      	ldr	r4, [r2, #0]
 8015f0a:	4621      	mov	r1, r4
 8015f0c:	b991      	cbnz	r1, 8015f34 <_malloc_r+0x54>
 8015f0e:	4c20      	ldr	r4, [pc, #128]	; (8015f90 <_malloc_r+0xb0>)
 8015f10:	6823      	ldr	r3, [r4, #0]
 8015f12:	b91b      	cbnz	r3, 8015f1c <_malloc_r+0x3c>
 8015f14:	4630      	mov	r0, r6
 8015f16:	f000 fe7b 	bl	8016c10 <_sbrk_r>
 8015f1a:	6020      	str	r0, [r4, #0]
 8015f1c:	4629      	mov	r1, r5
 8015f1e:	4630      	mov	r0, r6
 8015f20:	f000 fe76 	bl	8016c10 <_sbrk_r>
 8015f24:	1c43      	adds	r3, r0, #1
 8015f26:	d124      	bne.n	8015f72 <_malloc_r+0x92>
 8015f28:	230c      	movs	r3, #12
 8015f2a:	6033      	str	r3, [r6, #0]
 8015f2c:	4630      	mov	r0, r6
 8015f2e:	f002 ff1c 	bl	8018d6a <__malloc_unlock>
 8015f32:	e7e4      	b.n	8015efe <_malloc_r+0x1e>
 8015f34:	680b      	ldr	r3, [r1, #0]
 8015f36:	1b5b      	subs	r3, r3, r5
 8015f38:	d418      	bmi.n	8015f6c <_malloc_r+0x8c>
 8015f3a:	2b0b      	cmp	r3, #11
 8015f3c:	d90f      	bls.n	8015f5e <_malloc_r+0x7e>
 8015f3e:	600b      	str	r3, [r1, #0]
 8015f40:	50cd      	str	r5, [r1, r3]
 8015f42:	18cc      	adds	r4, r1, r3
 8015f44:	4630      	mov	r0, r6
 8015f46:	f002 ff10 	bl	8018d6a <__malloc_unlock>
 8015f4a:	f104 000b 	add.w	r0, r4, #11
 8015f4e:	1d23      	adds	r3, r4, #4
 8015f50:	f020 0007 	bic.w	r0, r0, #7
 8015f54:	1ac3      	subs	r3, r0, r3
 8015f56:	d0d3      	beq.n	8015f00 <_malloc_r+0x20>
 8015f58:	425a      	negs	r2, r3
 8015f5a:	50e2      	str	r2, [r4, r3]
 8015f5c:	e7d0      	b.n	8015f00 <_malloc_r+0x20>
 8015f5e:	428c      	cmp	r4, r1
 8015f60:	684b      	ldr	r3, [r1, #4]
 8015f62:	bf16      	itet	ne
 8015f64:	6063      	strne	r3, [r4, #4]
 8015f66:	6013      	streq	r3, [r2, #0]
 8015f68:	460c      	movne	r4, r1
 8015f6a:	e7eb      	b.n	8015f44 <_malloc_r+0x64>
 8015f6c:	460c      	mov	r4, r1
 8015f6e:	6849      	ldr	r1, [r1, #4]
 8015f70:	e7cc      	b.n	8015f0c <_malloc_r+0x2c>
 8015f72:	1cc4      	adds	r4, r0, #3
 8015f74:	f024 0403 	bic.w	r4, r4, #3
 8015f78:	42a0      	cmp	r0, r4
 8015f7a:	d005      	beq.n	8015f88 <_malloc_r+0xa8>
 8015f7c:	1a21      	subs	r1, r4, r0
 8015f7e:	4630      	mov	r0, r6
 8015f80:	f000 fe46 	bl	8016c10 <_sbrk_r>
 8015f84:	3001      	adds	r0, #1
 8015f86:	d0cf      	beq.n	8015f28 <_malloc_r+0x48>
 8015f88:	6025      	str	r5, [r4, #0]
 8015f8a:	e7db      	b.n	8015f44 <_malloc_r+0x64>
 8015f8c:	20004d58 	.word	0x20004d58
 8015f90:	20004d5c 	.word	0x20004d5c

08015f94 <__cvt>:
 8015f94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015f98:	ec55 4b10 	vmov	r4, r5, d0
 8015f9c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8015f9e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015fa2:	2d00      	cmp	r5, #0
 8015fa4:	460e      	mov	r6, r1
 8015fa6:	4691      	mov	r9, r2
 8015fa8:	4619      	mov	r1, r3
 8015faa:	bfb8      	it	lt
 8015fac:	4622      	movlt	r2, r4
 8015fae:	462b      	mov	r3, r5
 8015fb0:	f027 0720 	bic.w	r7, r7, #32
 8015fb4:	bfbb      	ittet	lt
 8015fb6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8015fba:	461d      	movlt	r5, r3
 8015fbc:	2300      	movge	r3, #0
 8015fbe:	232d      	movlt	r3, #45	; 0x2d
 8015fc0:	bfb8      	it	lt
 8015fc2:	4614      	movlt	r4, r2
 8015fc4:	2f46      	cmp	r7, #70	; 0x46
 8015fc6:	700b      	strb	r3, [r1, #0]
 8015fc8:	d004      	beq.n	8015fd4 <__cvt+0x40>
 8015fca:	2f45      	cmp	r7, #69	; 0x45
 8015fcc:	d100      	bne.n	8015fd0 <__cvt+0x3c>
 8015fce:	3601      	adds	r6, #1
 8015fd0:	2102      	movs	r1, #2
 8015fd2:	e000      	b.n	8015fd6 <__cvt+0x42>
 8015fd4:	2103      	movs	r1, #3
 8015fd6:	ab03      	add	r3, sp, #12
 8015fd8:	9301      	str	r3, [sp, #4]
 8015fda:	ab02      	add	r3, sp, #8
 8015fdc:	9300      	str	r3, [sp, #0]
 8015fde:	4632      	mov	r2, r6
 8015fe0:	4653      	mov	r3, sl
 8015fe2:	ec45 4b10 	vmov	d0, r4, r5
 8015fe6:	f001 fdbb 	bl	8017b60 <_dtoa_r>
 8015fea:	2f47      	cmp	r7, #71	; 0x47
 8015fec:	4680      	mov	r8, r0
 8015fee:	d102      	bne.n	8015ff6 <__cvt+0x62>
 8015ff0:	f019 0f01 	tst.w	r9, #1
 8015ff4:	d026      	beq.n	8016044 <__cvt+0xb0>
 8015ff6:	2f46      	cmp	r7, #70	; 0x46
 8015ff8:	eb08 0906 	add.w	r9, r8, r6
 8015ffc:	d111      	bne.n	8016022 <__cvt+0x8e>
 8015ffe:	f898 3000 	ldrb.w	r3, [r8]
 8016002:	2b30      	cmp	r3, #48	; 0x30
 8016004:	d10a      	bne.n	801601c <__cvt+0x88>
 8016006:	2200      	movs	r2, #0
 8016008:	2300      	movs	r3, #0
 801600a:	4620      	mov	r0, r4
 801600c:	4629      	mov	r1, r5
 801600e:	f7ea fd5b 	bl	8000ac8 <__aeabi_dcmpeq>
 8016012:	b918      	cbnz	r0, 801601c <__cvt+0x88>
 8016014:	f1c6 0601 	rsb	r6, r6, #1
 8016018:	f8ca 6000 	str.w	r6, [sl]
 801601c:	f8da 3000 	ldr.w	r3, [sl]
 8016020:	4499      	add	r9, r3
 8016022:	2200      	movs	r2, #0
 8016024:	2300      	movs	r3, #0
 8016026:	4620      	mov	r0, r4
 8016028:	4629      	mov	r1, r5
 801602a:	f7ea fd4d 	bl	8000ac8 <__aeabi_dcmpeq>
 801602e:	b938      	cbnz	r0, 8016040 <__cvt+0xac>
 8016030:	2230      	movs	r2, #48	; 0x30
 8016032:	9b03      	ldr	r3, [sp, #12]
 8016034:	454b      	cmp	r3, r9
 8016036:	d205      	bcs.n	8016044 <__cvt+0xb0>
 8016038:	1c59      	adds	r1, r3, #1
 801603a:	9103      	str	r1, [sp, #12]
 801603c:	701a      	strb	r2, [r3, #0]
 801603e:	e7f8      	b.n	8016032 <__cvt+0x9e>
 8016040:	f8cd 900c 	str.w	r9, [sp, #12]
 8016044:	9b03      	ldr	r3, [sp, #12]
 8016046:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016048:	eba3 0308 	sub.w	r3, r3, r8
 801604c:	4640      	mov	r0, r8
 801604e:	6013      	str	r3, [r2, #0]
 8016050:	b004      	add	sp, #16
 8016052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08016056 <__exponent>:
 8016056:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016058:	2900      	cmp	r1, #0
 801605a:	4604      	mov	r4, r0
 801605c:	bfba      	itte	lt
 801605e:	4249      	neglt	r1, r1
 8016060:	232d      	movlt	r3, #45	; 0x2d
 8016062:	232b      	movge	r3, #43	; 0x2b
 8016064:	2909      	cmp	r1, #9
 8016066:	f804 2b02 	strb.w	r2, [r4], #2
 801606a:	7043      	strb	r3, [r0, #1]
 801606c:	dd20      	ble.n	80160b0 <__exponent+0x5a>
 801606e:	f10d 0307 	add.w	r3, sp, #7
 8016072:	461f      	mov	r7, r3
 8016074:	260a      	movs	r6, #10
 8016076:	fb91 f5f6 	sdiv	r5, r1, r6
 801607a:	fb06 1115 	mls	r1, r6, r5, r1
 801607e:	3130      	adds	r1, #48	; 0x30
 8016080:	2d09      	cmp	r5, #9
 8016082:	f803 1c01 	strb.w	r1, [r3, #-1]
 8016086:	f103 32ff 	add.w	r2, r3, #4294967295
 801608a:	4629      	mov	r1, r5
 801608c:	dc09      	bgt.n	80160a2 <__exponent+0x4c>
 801608e:	3130      	adds	r1, #48	; 0x30
 8016090:	3b02      	subs	r3, #2
 8016092:	f802 1c01 	strb.w	r1, [r2, #-1]
 8016096:	42bb      	cmp	r3, r7
 8016098:	4622      	mov	r2, r4
 801609a:	d304      	bcc.n	80160a6 <__exponent+0x50>
 801609c:	1a10      	subs	r0, r2, r0
 801609e:	b003      	add	sp, #12
 80160a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80160a2:	4613      	mov	r3, r2
 80160a4:	e7e7      	b.n	8016076 <__exponent+0x20>
 80160a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80160aa:	f804 2b01 	strb.w	r2, [r4], #1
 80160ae:	e7f2      	b.n	8016096 <__exponent+0x40>
 80160b0:	2330      	movs	r3, #48	; 0x30
 80160b2:	4419      	add	r1, r3
 80160b4:	7083      	strb	r3, [r0, #2]
 80160b6:	1d02      	adds	r2, r0, #4
 80160b8:	70c1      	strb	r1, [r0, #3]
 80160ba:	e7ef      	b.n	801609c <__exponent+0x46>

080160bc <_printf_float>:
 80160bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160c0:	b08d      	sub	sp, #52	; 0x34
 80160c2:	460c      	mov	r4, r1
 80160c4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80160c8:	4616      	mov	r6, r2
 80160ca:	461f      	mov	r7, r3
 80160cc:	4605      	mov	r5, r0
 80160ce:	f002 fe2b 	bl	8018d28 <_localeconv_r>
 80160d2:	6803      	ldr	r3, [r0, #0]
 80160d4:	9304      	str	r3, [sp, #16]
 80160d6:	4618      	mov	r0, r3
 80160d8:	f7ea f87a 	bl	80001d0 <strlen>
 80160dc:	2300      	movs	r3, #0
 80160de:	930a      	str	r3, [sp, #40]	; 0x28
 80160e0:	f8d8 3000 	ldr.w	r3, [r8]
 80160e4:	9005      	str	r0, [sp, #20]
 80160e6:	3307      	adds	r3, #7
 80160e8:	f023 0307 	bic.w	r3, r3, #7
 80160ec:	f103 0208 	add.w	r2, r3, #8
 80160f0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80160f4:	f8d4 b000 	ldr.w	fp, [r4]
 80160f8:	f8c8 2000 	str.w	r2, [r8]
 80160fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016100:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8016104:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8016108:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801610c:	9307      	str	r3, [sp, #28]
 801610e:	f8cd 8018 	str.w	r8, [sp, #24]
 8016112:	f04f 32ff 	mov.w	r2, #4294967295
 8016116:	4ba7      	ldr	r3, [pc, #668]	; (80163b4 <_printf_float+0x2f8>)
 8016118:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801611c:	f7ea fd06 	bl	8000b2c <__aeabi_dcmpun>
 8016120:	bb70      	cbnz	r0, 8016180 <_printf_float+0xc4>
 8016122:	f04f 32ff 	mov.w	r2, #4294967295
 8016126:	4ba3      	ldr	r3, [pc, #652]	; (80163b4 <_printf_float+0x2f8>)
 8016128:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801612c:	f7ea fce0 	bl	8000af0 <__aeabi_dcmple>
 8016130:	bb30      	cbnz	r0, 8016180 <_printf_float+0xc4>
 8016132:	2200      	movs	r2, #0
 8016134:	2300      	movs	r3, #0
 8016136:	4640      	mov	r0, r8
 8016138:	4649      	mov	r1, r9
 801613a:	f7ea fccf 	bl	8000adc <__aeabi_dcmplt>
 801613e:	b110      	cbz	r0, 8016146 <_printf_float+0x8a>
 8016140:	232d      	movs	r3, #45	; 0x2d
 8016142:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016146:	4a9c      	ldr	r2, [pc, #624]	; (80163b8 <_printf_float+0x2fc>)
 8016148:	4b9c      	ldr	r3, [pc, #624]	; (80163bc <_printf_float+0x300>)
 801614a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801614e:	bf8c      	ite	hi
 8016150:	4690      	movhi	r8, r2
 8016152:	4698      	movls	r8, r3
 8016154:	2303      	movs	r3, #3
 8016156:	f02b 0204 	bic.w	r2, fp, #4
 801615a:	6123      	str	r3, [r4, #16]
 801615c:	6022      	str	r2, [r4, #0]
 801615e:	f04f 0900 	mov.w	r9, #0
 8016162:	9700      	str	r7, [sp, #0]
 8016164:	4633      	mov	r3, r6
 8016166:	aa0b      	add	r2, sp, #44	; 0x2c
 8016168:	4621      	mov	r1, r4
 801616a:	4628      	mov	r0, r5
 801616c:	f000 f9e6 	bl	801653c <_printf_common>
 8016170:	3001      	adds	r0, #1
 8016172:	f040 808d 	bne.w	8016290 <_printf_float+0x1d4>
 8016176:	f04f 30ff 	mov.w	r0, #4294967295
 801617a:	b00d      	add	sp, #52	; 0x34
 801617c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016180:	4642      	mov	r2, r8
 8016182:	464b      	mov	r3, r9
 8016184:	4640      	mov	r0, r8
 8016186:	4649      	mov	r1, r9
 8016188:	f7ea fcd0 	bl	8000b2c <__aeabi_dcmpun>
 801618c:	b110      	cbz	r0, 8016194 <_printf_float+0xd8>
 801618e:	4a8c      	ldr	r2, [pc, #560]	; (80163c0 <_printf_float+0x304>)
 8016190:	4b8c      	ldr	r3, [pc, #560]	; (80163c4 <_printf_float+0x308>)
 8016192:	e7da      	b.n	801614a <_printf_float+0x8e>
 8016194:	6861      	ldr	r1, [r4, #4]
 8016196:	1c4b      	adds	r3, r1, #1
 8016198:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 801619c:	a80a      	add	r0, sp, #40	; 0x28
 801619e:	d13e      	bne.n	801621e <_printf_float+0x162>
 80161a0:	2306      	movs	r3, #6
 80161a2:	6063      	str	r3, [r4, #4]
 80161a4:	2300      	movs	r3, #0
 80161a6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80161aa:	ab09      	add	r3, sp, #36	; 0x24
 80161ac:	9300      	str	r3, [sp, #0]
 80161ae:	ec49 8b10 	vmov	d0, r8, r9
 80161b2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80161b6:	6022      	str	r2, [r4, #0]
 80161b8:	f8cd a004 	str.w	sl, [sp, #4]
 80161bc:	6861      	ldr	r1, [r4, #4]
 80161be:	4628      	mov	r0, r5
 80161c0:	f7ff fee8 	bl	8015f94 <__cvt>
 80161c4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80161c8:	2b47      	cmp	r3, #71	; 0x47
 80161ca:	4680      	mov	r8, r0
 80161cc:	d109      	bne.n	80161e2 <_printf_float+0x126>
 80161ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80161d0:	1cd8      	adds	r0, r3, #3
 80161d2:	db02      	blt.n	80161da <_printf_float+0x11e>
 80161d4:	6862      	ldr	r2, [r4, #4]
 80161d6:	4293      	cmp	r3, r2
 80161d8:	dd47      	ble.n	801626a <_printf_float+0x1ae>
 80161da:	f1aa 0a02 	sub.w	sl, sl, #2
 80161de:	fa5f fa8a 	uxtb.w	sl, sl
 80161e2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80161e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80161e8:	d824      	bhi.n	8016234 <_printf_float+0x178>
 80161ea:	3901      	subs	r1, #1
 80161ec:	4652      	mov	r2, sl
 80161ee:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80161f2:	9109      	str	r1, [sp, #36]	; 0x24
 80161f4:	f7ff ff2f 	bl	8016056 <__exponent>
 80161f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80161fa:	1813      	adds	r3, r2, r0
 80161fc:	2a01      	cmp	r2, #1
 80161fe:	4681      	mov	r9, r0
 8016200:	6123      	str	r3, [r4, #16]
 8016202:	dc02      	bgt.n	801620a <_printf_float+0x14e>
 8016204:	6822      	ldr	r2, [r4, #0]
 8016206:	07d1      	lsls	r1, r2, #31
 8016208:	d501      	bpl.n	801620e <_printf_float+0x152>
 801620a:	3301      	adds	r3, #1
 801620c:	6123      	str	r3, [r4, #16]
 801620e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8016212:	2b00      	cmp	r3, #0
 8016214:	d0a5      	beq.n	8016162 <_printf_float+0xa6>
 8016216:	232d      	movs	r3, #45	; 0x2d
 8016218:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801621c:	e7a1      	b.n	8016162 <_printf_float+0xa6>
 801621e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8016222:	f000 8177 	beq.w	8016514 <_printf_float+0x458>
 8016226:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801622a:	d1bb      	bne.n	80161a4 <_printf_float+0xe8>
 801622c:	2900      	cmp	r1, #0
 801622e:	d1b9      	bne.n	80161a4 <_printf_float+0xe8>
 8016230:	2301      	movs	r3, #1
 8016232:	e7b6      	b.n	80161a2 <_printf_float+0xe6>
 8016234:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8016238:	d119      	bne.n	801626e <_printf_float+0x1b2>
 801623a:	2900      	cmp	r1, #0
 801623c:	6863      	ldr	r3, [r4, #4]
 801623e:	dd0c      	ble.n	801625a <_printf_float+0x19e>
 8016240:	6121      	str	r1, [r4, #16]
 8016242:	b913      	cbnz	r3, 801624a <_printf_float+0x18e>
 8016244:	6822      	ldr	r2, [r4, #0]
 8016246:	07d2      	lsls	r2, r2, #31
 8016248:	d502      	bpl.n	8016250 <_printf_float+0x194>
 801624a:	3301      	adds	r3, #1
 801624c:	440b      	add	r3, r1
 801624e:	6123      	str	r3, [r4, #16]
 8016250:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016252:	65a3      	str	r3, [r4, #88]	; 0x58
 8016254:	f04f 0900 	mov.w	r9, #0
 8016258:	e7d9      	b.n	801620e <_printf_float+0x152>
 801625a:	b913      	cbnz	r3, 8016262 <_printf_float+0x1a6>
 801625c:	6822      	ldr	r2, [r4, #0]
 801625e:	07d0      	lsls	r0, r2, #31
 8016260:	d501      	bpl.n	8016266 <_printf_float+0x1aa>
 8016262:	3302      	adds	r3, #2
 8016264:	e7f3      	b.n	801624e <_printf_float+0x192>
 8016266:	2301      	movs	r3, #1
 8016268:	e7f1      	b.n	801624e <_printf_float+0x192>
 801626a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801626e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8016272:	4293      	cmp	r3, r2
 8016274:	db05      	blt.n	8016282 <_printf_float+0x1c6>
 8016276:	6822      	ldr	r2, [r4, #0]
 8016278:	6123      	str	r3, [r4, #16]
 801627a:	07d1      	lsls	r1, r2, #31
 801627c:	d5e8      	bpl.n	8016250 <_printf_float+0x194>
 801627e:	3301      	adds	r3, #1
 8016280:	e7e5      	b.n	801624e <_printf_float+0x192>
 8016282:	2b00      	cmp	r3, #0
 8016284:	bfd4      	ite	le
 8016286:	f1c3 0302 	rsble	r3, r3, #2
 801628a:	2301      	movgt	r3, #1
 801628c:	4413      	add	r3, r2
 801628e:	e7de      	b.n	801624e <_printf_float+0x192>
 8016290:	6823      	ldr	r3, [r4, #0]
 8016292:	055a      	lsls	r2, r3, #21
 8016294:	d407      	bmi.n	80162a6 <_printf_float+0x1ea>
 8016296:	6923      	ldr	r3, [r4, #16]
 8016298:	4642      	mov	r2, r8
 801629a:	4631      	mov	r1, r6
 801629c:	4628      	mov	r0, r5
 801629e:	47b8      	blx	r7
 80162a0:	3001      	adds	r0, #1
 80162a2:	d12b      	bne.n	80162fc <_printf_float+0x240>
 80162a4:	e767      	b.n	8016176 <_printf_float+0xba>
 80162a6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80162aa:	f240 80dc 	bls.w	8016466 <_printf_float+0x3aa>
 80162ae:	2200      	movs	r2, #0
 80162b0:	2300      	movs	r3, #0
 80162b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80162b6:	f7ea fc07 	bl	8000ac8 <__aeabi_dcmpeq>
 80162ba:	2800      	cmp	r0, #0
 80162bc:	d033      	beq.n	8016326 <_printf_float+0x26a>
 80162be:	2301      	movs	r3, #1
 80162c0:	4a41      	ldr	r2, [pc, #260]	; (80163c8 <_printf_float+0x30c>)
 80162c2:	4631      	mov	r1, r6
 80162c4:	4628      	mov	r0, r5
 80162c6:	47b8      	blx	r7
 80162c8:	3001      	adds	r0, #1
 80162ca:	f43f af54 	beq.w	8016176 <_printf_float+0xba>
 80162ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80162d2:	429a      	cmp	r2, r3
 80162d4:	db02      	blt.n	80162dc <_printf_float+0x220>
 80162d6:	6823      	ldr	r3, [r4, #0]
 80162d8:	07d8      	lsls	r0, r3, #31
 80162da:	d50f      	bpl.n	80162fc <_printf_float+0x240>
 80162dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80162e0:	4631      	mov	r1, r6
 80162e2:	4628      	mov	r0, r5
 80162e4:	47b8      	blx	r7
 80162e6:	3001      	adds	r0, #1
 80162e8:	f43f af45 	beq.w	8016176 <_printf_float+0xba>
 80162ec:	f04f 0800 	mov.w	r8, #0
 80162f0:	f104 091a 	add.w	r9, r4, #26
 80162f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80162f6:	3b01      	subs	r3, #1
 80162f8:	4543      	cmp	r3, r8
 80162fa:	dc09      	bgt.n	8016310 <_printf_float+0x254>
 80162fc:	6823      	ldr	r3, [r4, #0]
 80162fe:	079b      	lsls	r3, r3, #30
 8016300:	f100 8103 	bmi.w	801650a <_printf_float+0x44e>
 8016304:	68e0      	ldr	r0, [r4, #12]
 8016306:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016308:	4298      	cmp	r0, r3
 801630a:	bfb8      	it	lt
 801630c:	4618      	movlt	r0, r3
 801630e:	e734      	b.n	801617a <_printf_float+0xbe>
 8016310:	2301      	movs	r3, #1
 8016312:	464a      	mov	r2, r9
 8016314:	4631      	mov	r1, r6
 8016316:	4628      	mov	r0, r5
 8016318:	47b8      	blx	r7
 801631a:	3001      	adds	r0, #1
 801631c:	f43f af2b 	beq.w	8016176 <_printf_float+0xba>
 8016320:	f108 0801 	add.w	r8, r8, #1
 8016324:	e7e6      	b.n	80162f4 <_printf_float+0x238>
 8016326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016328:	2b00      	cmp	r3, #0
 801632a:	dc2b      	bgt.n	8016384 <_printf_float+0x2c8>
 801632c:	2301      	movs	r3, #1
 801632e:	4a26      	ldr	r2, [pc, #152]	; (80163c8 <_printf_float+0x30c>)
 8016330:	4631      	mov	r1, r6
 8016332:	4628      	mov	r0, r5
 8016334:	47b8      	blx	r7
 8016336:	3001      	adds	r0, #1
 8016338:	f43f af1d 	beq.w	8016176 <_printf_float+0xba>
 801633c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801633e:	b923      	cbnz	r3, 801634a <_printf_float+0x28e>
 8016340:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016342:	b913      	cbnz	r3, 801634a <_printf_float+0x28e>
 8016344:	6823      	ldr	r3, [r4, #0]
 8016346:	07d9      	lsls	r1, r3, #31
 8016348:	d5d8      	bpl.n	80162fc <_printf_float+0x240>
 801634a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801634e:	4631      	mov	r1, r6
 8016350:	4628      	mov	r0, r5
 8016352:	47b8      	blx	r7
 8016354:	3001      	adds	r0, #1
 8016356:	f43f af0e 	beq.w	8016176 <_printf_float+0xba>
 801635a:	f04f 0900 	mov.w	r9, #0
 801635e:	f104 0a1a 	add.w	sl, r4, #26
 8016362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016364:	425b      	negs	r3, r3
 8016366:	454b      	cmp	r3, r9
 8016368:	dc01      	bgt.n	801636e <_printf_float+0x2b2>
 801636a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801636c:	e794      	b.n	8016298 <_printf_float+0x1dc>
 801636e:	2301      	movs	r3, #1
 8016370:	4652      	mov	r2, sl
 8016372:	4631      	mov	r1, r6
 8016374:	4628      	mov	r0, r5
 8016376:	47b8      	blx	r7
 8016378:	3001      	adds	r0, #1
 801637a:	f43f aefc 	beq.w	8016176 <_printf_float+0xba>
 801637e:	f109 0901 	add.w	r9, r9, #1
 8016382:	e7ee      	b.n	8016362 <_printf_float+0x2a6>
 8016384:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016386:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016388:	429a      	cmp	r2, r3
 801638a:	bfa8      	it	ge
 801638c:	461a      	movge	r2, r3
 801638e:	2a00      	cmp	r2, #0
 8016390:	4691      	mov	r9, r2
 8016392:	dd07      	ble.n	80163a4 <_printf_float+0x2e8>
 8016394:	4613      	mov	r3, r2
 8016396:	4631      	mov	r1, r6
 8016398:	4642      	mov	r2, r8
 801639a:	4628      	mov	r0, r5
 801639c:	47b8      	blx	r7
 801639e:	3001      	adds	r0, #1
 80163a0:	f43f aee9 	beq.w	8016176 <_printf_float+0xba>
 80163a4:	f104 031a 	add.w	r3, r4, #26
 80163a8:	f04f 0b00 	mov.w	fp, #0
 80163ac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80163b0:	9306      	str	r3, [sp, #24]
 80163b2:	e015      	b.n	80163e0 <_printf_float+0x324>
 80163b4:	7fefffff 	.word	0x7fefffff
 80163b8:	0801b5ac 	.word	0x0801b5ac
 80163bc:	0801b5a8 	.word	0x0801b5a8
 80163c0:	0801b5b4 	.word	0x0801b5b4
 80163c4:	0801b5b0 	.word	0x0801b5b0
 80163c8:	0801b5b8 	.word	0x0801b5b8
 80163cc:	2301      	movs	r3, #1
 80163ce:	9a06      	ldr	r2, [sp, #24]
 80163d0:	4631      	mov	r1, r6
 80163d2:	4628      	mov	r0, r5
 80163d4:	47b8      	blx	r7
 80163d6:	3001      	adds	r0, #1
 80163d8:	f43f aecd 	beq.w	8016176 <_printf_float+0xba>
 80163dc:	f10b 0b01 	add.w	fp, fp, #1
 80163e0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80163e4:	ebaa 0309 	sub.w	r3, sl, r9
 80163e8:	455b      	cmp	r3, fp
 80163ea:	dcef      	bgt.n	80163cc <_printf_float+0x310>
 80163ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80163f0:	429a      	cmp	r2, r3
 80163f2:	44d0      	add	r8, sl
 80163f4:	db15      	blt.n	8016422 <_printf_float+0x366>
 80163f6:	6823      	ldr	r3, [r4, #0]
 80163f8:	07da      	lsls	r2, r3, #31
 80163fa:	d412      	bmi.n	8016422 <_printf_float+0x366>
 80163fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80163fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016400:	eba3 020a 	sub.w	r2, r3, sl
 8016404:	eba3 0a01 	sub.w	sl, r3, r1
 8016408:	4592      	cmp	sl, r2
 801640a:	bfa8      	it	ge
 801640c:	4692      	movge	sl, r2
 801640e:	f1ba 0f00 	cmp.w	sl, #0
 8016412:	dc0e      	bgt.n	8016432 <_printf_float+0x376>
 8016414:	f04f 0800 	mov.w	r8, #0
 8016418:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801641c:	f104 091a 	add.w	r9, r4, #26
 8016420:	e019      	b.n	8016456 <_printf_float+0x39a>
 8016422:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016426:	4631      	mov	r1, r6
 8016428:	4628      	mov	r0, r5
 801642a:	47b8      	blx	r7
 801642c:	3001      	adds	r0, #1
 801642e:	d1e5      	bne.n	80163fc <_printf_float+0x340>
 8016430:	e6a1      	b.n	8016176 <_printf_float+0xba>
 8016432:	4653      	mov	r3, sl
 8016434:	4642      	mov	r2, r8
 8016436:	4631      	mov	r1, r6
 8016438:	4628      	mov	r0, r5
 801643a:	47b8      	blx	r7
 801643c:	3001      	adds	r0, #1
 801643e:	d1e9      	bne.n	8016414 <_printf_float+0x358>
 8016440:	e699      	b.n	8016176 <_printf_float+0xba>
 8016442:	2301      	movs	r3, #1
 8016444:	464a      	mov	r2, r9
 8016446:	4631      	mov	r1, r6
 8016448:	4628      	mov	r0, r5
 801644a:	47b8      	blx	r7
 801644c:	3001      	adds	r0, #1
 801644e:	f43f ae92 	beq.w	8016176 <_printf_float+0xba>
 8016452:	f108 0801 	add.w	r8, r8, #1
 8016456:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801645a:	1a9b      	subs	r3, r3, r2
 801645c:	eba3 030a 	sub.w	r3, r3, sl
 8016460:	4543      	cmp	r3, r8
 8016462:	dcee      	bgt.n	8016442 <_printf_float+0x386>
 8016464:	e74a      	b.n	80162fc <_printf_float+0x240>
 8016466:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016468:	2a01      	cmp	r2, #1
 801646a:	dc01      	bgt.n	8016470 <_printf_float+0x3b4>
 801646c:	07db      	lsls	r3, r3, #31
 801646e:	d53a      	bpl.n	80164e6 <_printf_float+0x42a>
 8016470:	2301      	movs	r3, #1
 8016472:	4642      	mov	r2, r8
 8016474:	4631      	mov	r1, r6
 8016476:	4628      	mov	r0, r5
 8016478:	47b8      	blx	r7
 801647a:	3001      	adds	r0, #1
 801647c:	f43f ae7b 	beq.w	8016176 <_printf_float+0xba>
 8016480:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016484:	4631      	mov	r1, r6
 8016486:	4628      	mov	r0, r5
 8016488:	47b8      	blx	r7
 801648a:	3001      	adds	r0, #1
 801648c:	f108 0801 	add.w	r8, r8, #1
 8016490:	f43f ae71 	beq.w	8016176 <_printf_float+0xba>
 8016494:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016496:	2200      	movs	r2, #0
 8016498:	f103 3aff 	add.w	sl, r3, #4294967295
 801649c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80164a0:	2300      	movs	r3, #0
 80164a2:	f7ea fb11 	bl	8000ac8 <__aeabi_dcmpeq>
 80164a6:	b9c8      	cbnz	r0, 80164dc <_printf_float+0x420>
 80164a8:	4653      	mov	r3, sl
 80164aa:	4642      	mov	r2, r8
 80164ac:	4631      	mov	r1, r6
 80164ae:	4628      	mov	r0, r5
 80164b0:	47b8      	blx	r7
 80164b2:	3001      	adds	r0, #1
 80164b4:	d10e      	bne.n	80164d4 <_printf_float+0x418>
 80164b6:	e65e      	b.n	8016176 <_printf_float+0xba>
 80164b8:	2301      	movs	r3, #1
 80164ba:	4652      	mov	r2, sl
 80164bc:	4631      	mov	r1, r6
 80164be:	4628      	mov	r0, r5
 80164c0:	47b8      	blx	r7
 80164c2:	3001      	adds	r0, #1
 80164c4:	f43f ae57 	beq.w	8016176 <_printf_float+0xba>
 80164c8:	f108 0801 	add.w	r8, r8, #1
 80164cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80164ce:	3b01      	subs	r3, #1
 80164d0:	4543      	cmp	r3, r8
 80164d2:	dcf1      	bgt.n	80164b8 <_printf_float+0x3fc>
 80164d4:	464b      	mov	r3, r9
 80164d6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80164da:	e6de      	b.n	801629a <_printf_float+0x1de>
 80164dc:	f04f 0800 	mov.w	r8, #0
 80164e0:	f104 0a1a 	add.w	sl, r4, #26
 80164e4:	e7f2      	b.n	80164cc <_printf_float+0x410>
 80164e6:	2301      	movs	r3, #1
 80164e8:	e7df      	b.n	80164aa <_printf_float+0x3ee>
 80164ea:	2301      	movs	r3, #1
 80164ec:	464a      	mov	r2, r9
 80164ee:	4631      	mov	r1, r6
 80164f0:	4628      	mov	r0, r5
 80164f2:	47b8      	blx	r7
 80164f4:	3001      	adds	r0, #1
 80164f6:	f43f ae3e 	beq.w	8016176 <_printf_float+0xba>
 80164fa:	f108 0801 	add.w	r8, r8, #1
 80164fe:	68e3      	ldr	r3, [r4, #12]
 8016500:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016502:	1a9b      	subs	r3, r3, r2
 8016504:	4543      	cmp	r3, r8
 8016506:	dcf0      	bgt.n	80164ea <_printf_float+0x42e>
 8016508:	e6fc      	b.n	8016304 <_printf_float+0x248>
 801650a:	f04f 0800 	mov.w	r8, #0
 801650e:	f104 0919 	add.w	r9, r4, #25
 8016512:	e7f4      	b.n	80164fe <_printf_float+0x442>
 8016514:	2900      	cmp	r1, #0
 8016516:	f43f ae8b 	beq.w	8016230 <_printf_float+0x174>
 801651a:	2300      	movs	r3, #0
 801651c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8016520:	ab09      	add	r3, sp, #36	; 0x24
 8016522:	9300      	str	r3, [sp, #0]
 8016524:	ec49 8b10 	vmov	d0, r8, r9
 8016528:	6022      	str	r2, [r4, #0]
 801652a:	f8cd a004 	str.w	sl, [sp, #4]
 801652e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8016532:	4628      	mov	r0, r5
 8016534:	f7ff fd2e 	bl	8015f94 <__cvt>
 8016538:	4680      	mov	r8, r0
 801653a:	e648      	b.n	80161ce <_printf_float+0x112>

0801653c <_printf_common>:
 801653c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016540:	4691      	mov	r9, r2
 8016542:	461f      	mov	r7, r3
 8016544:	688a      	ldr	r2, [r1, #8]
 8016546:	690b      	ldr	r3, [r1, #16]
 8016548:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801654c:	4293      	cmp	r3, r2
 801654e:	bfb8      	it	lt
 8016550:	4613      	movlt	r3, r2
 8016552:	f8c9 3000 	str.w	r3, [r9]
 8016556:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801655a:	4606      	mov	r6, r0
 801655c:	460c      	mov	r4, r1
 801655e:	b112      	cbz	r2, 8016566 <_printf_common+0x2a>
 8016560:	3301      	adds	r3, #1
 8016562:	f8c9 3000 	str.w	r3, [r9]
 8016566:	6823      	ldr	r3, [r4, #0]
 8016568:	0699      	lsls	r1, r3, #26
 801656a:	bf42      	ittt	mi
 801656c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8016570:	3302      	addmi	r3, #2
 8016572:	f8c9 3000 	strmi.w	r3, [r9]
 8016576:	6825      	ldr	r5, [r4, #0]
 8016578:	f015 0506 	ands.w	r5, r5, #6
 801657c:	d107      	bne.n	801658e <_printf_common+0x52>
 801657e:	f104 0a19 	add.w	sl, r4, #25
 8016582:	68e3      	ldr	r3, [r4, #12]
 8016584:	f8d9 2000 	ldr.w	r2, [r9]
 8016588:	1a9b      	subs	r3, r3, r2
 801658a:	42ab      	cmp	r3, r5
 801658c:	dc28      	bgt.n	80165e0 <_printf_common+0xa4>
 801658e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8016592:	6822      	ldr	r2, [r4, #0]
 8016594:	3300      	adds	r3, #0
 8016596:	bf18      	it	ne
 8016598:	2301      	movne	r3, #1
 801659a:	0692      	lsls	r2, r2, #26
 801659c:	d42d      	bmi.n	80165fa <_printf_common+0xbe>
 801659e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80165a2:	4639      	mov	r1, r7
 80165a4:	4630      	mov	r0, r6
 80165a6:	47c0      	blx	r8
 80165a8:	3001      	adds	r0, #1
 80165aa:	d020      	beq.n	80165ee <_printf_common+0xb2>
 80165ac:	6823      	ldr	r3, [r4, #0]
 80165ae:	68e5      	ldr	r5, [r4, #12]
 80165b0:	f8d9 2000 	ldr.w	r2, [r9]
 80165b4:	f003 0306 	and.w	r3, r3, #6
 80165b8:	2b04      	cmp	r3, #4
 80165ba:	bf08      	it	eq
 80165bc:	1aad      	subeq	r5, r5, r2
 80165be:	68a3      	ldr	r3, [r4, #8]
 80165c0:	6922      	ldr	r2, [r4, #16]
 80165c2:	bf0c      	ite	eq
 80165c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80165c8:	2500      	movne	r5, #0
 80165ca:	4293      	cmp	r3, r2
 80165cc:	bfc4      	itt	gt
 80165ce:	1a9b      	subgt	r3, r3, r2
 80165d0:	18ed      	addgt	r5, r5, r3
 80165d2:	f04f 0900 	mov.w	r9, #0
 80165d6:	341a      	adds	r4, #26
 80165d8:	454d      	cmp	r5, r9
 80165da:	d11a      	bne.n	8016612 <_printf_common+0xd6>
 80165dc:	2000      	movs	r0, #0
 80165de:	e008      	b.n	80165f2 <_printf_common+0xb6>
 80165e0:	2301      	movs	r3, #1
 80165e2:	4652      	mov	r2, sl
 80165e4:	4639      	mov	r1, r7
 80165e6:	4630      	mov	r0, r6
 80165e8:	47c0      	blx	r8
 80165ea:	3001      	adds	r0, #1
 80165ec:	d103      	bne.n	80165f6 <_printf_common+0xba>
 80165ee:	f04f 30ff 	mov.w	r0, #4294967295
 80165f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80165f6:	3501      	adds	r5, #1
 80165f8:	e7c3      	b.n	8016582 <_printf_common+0x46>
 80165fa:	18e1      	adds	r1, r4, r3
 80165fc:	1c5a      	adds	r2, r3, #1
 80165fe:	2030      	movs	r0, #48	; 0x30
 8016600:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016604:	4422      	add	r2, r4
 8016606:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801660a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801660e:	3302      	adds	r3, #2
 8016610:	e7c5      	b.n	801659e <_printf_common+0x62>
 8016612:	2301      	movs	r3, #1
 8016614:	4622      	mov	r2, r4
 8016616:	4639      	mov	r1, r7
 8016618:	4630      	mov	r0, r6
 801661a:	47c0      	blx	r8
 801661c:	3001      	adds	r0, #1
 801661e:	d0e6      	beq.n	80165ee <_printf_common+0xb2>
 8016620:	f109 0901 	add.w	r9, r9, #1
 8016624:	e7d8      	b.n	80165d8 <_printf_common+0x9c>
	...

08016628 <_printf_i>:
 8016628:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801662c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8016630:	460c      	mov	r4, r1
 8016632:	7e09      	ldrb	r1, [r1, #24]
 8016634:	b085      	sub	sp, #20
 8016636:	296e      	cmp	r1, #110	; 0x6e
 8016638:	4617      	mov	r7, r2
 801663a:	4606      	mov	r6, r0
 801663c:	4698      	mov	r8, r3
 801663e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016640:	f000 80b3 	beq.w	80167aa <_printf_i+0x182>
 8016644:	d822      	bhi.n	801668c <_printf_i+0x64>
 8016646:	2963      	cmp	r1, #99	; 0x63
 8016648:	d036      	beq.n	80166b8 <_printf_i+0x90>
 801664a:	d80a      	bhi.n	8016662 <_printf_i+0x3a>
 801664c:	2900      	cmp	r1, #0
 801664e:	f000 80b9 	beq.w	80167c4 <_printf_i+0x19c>
 8016652:	2958      	cmp	r1, #88	; 0x58
 8016654:	f000 8083 	beq.w	801675e <_printf_i+0x136>
 8016658:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801665c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8016660:	e032      	b.n	80166c8 <_printf_i+0xa0>
 8016662:	2964      	cmp	r1, #100	; 0x64
 8016664:	d001      	beq.n	801666a <_printf_i+0x42>
 8016666:	2969      	cmp	r1, #105	; 0x69
 8016668:	d1f6      	bne.n	8016658 <_printf_i+0x30>
 801666a:	6820      	ldr	r0, [r4, #0]
 801666c:	6813      	ldr	r3, [r2, #0]
 801666e:	0605      	lsls	r5, r0, #24
 8016670:	f103 0104 	add.w	r1, r3, #4
 8016674:	d52a      	bpl.n	80166cc <_printf_i+0xa4>
 8016676:	681b      	ldr	r3, [r3, #0]
 8016678:	6011      	str	r1, [r2, #0]
 801667a:	2b00      	cmp	r3, #0
 801667c:	da03      	bge.n	8016686 <_printf_i+0x5e>
 801667e:	222d      	movs	r2, #45	; 0x2d
 8016680:	425b      	negs	r3, r3
 8016682:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8016686:	486f      	ldr	r0, [pc, #444]	; (8016844 <_printf_i+0x21c>)
 8016688:	220a      	movs	r2, #10
 801668a:	e039      	b.n	8016700 <_printf_i+0xd8>
 801668c:	2973      	cmp	r1, #115	; 0x73
 801668e:	f000 809d 	beq.w	80167cc <_printf_i+0x1a4>
 8016692:	d808      	bhi.n	80166a6 <_printf_i+0x7e>
 8016694:	296f      	cmp	r1, #111	; 0x6f
 8016696:	d020      	beq.n	80166da <_printf_i+0xb2>
 8016698:	2970      	cmp	r1, #112	; 0x70
 801669a:	d1dd      	bne.n	8016658 <_printf_i+0x30>
 801669c:	6823      	ldr	r3, [r4, #0]
 801669e:	f043 0320 	orr.w	r3, r3, #32
 80166a2:	6023      	str	r3, [r4, #0]
 80166a4:	e003      	b.n	80166ae <_printf_i+0x86>
 80166a6:	2975      	cmp	r1, #117	; 0x75
 80166a8:	d017      	beq.n	80166da <_printf_i+0xb2>
 80166aa:	2978      	cmp	r1, #120	; 0x78
 80166ac:	d1d4      	bne.n	8016658 <_printf_i+0x30>
 80166ae:	2378      	movs	r3, #120	; 0x78
 80166b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80166b4:	4864      	ldr	r0, [pc, #400]	; (8016848 <_printf_i+0x220>)
 80166b6:	e055      	b.n	8016764 <_printf_i+0x13c>
 80166b8:	6813      	ldr	r3, [r2, #0]
 80166ba:	1d19      	adds	r1, r3, #4
 80166bc:	681b      	ldr	r3, [r3, #0]
 80166be:	6011      	str	r1, [r2, #0]
 80166c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80166c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80166c8:	2301      	movs	r3, #1
 80166ca:	e08c      	b.n	80167e6 <_printf_i+0x1be>
 80166cc:	681b      	ldr	r3, [r3, #0]
 80166ce:	6011      	str	r1, [r2, #0]
 80166d0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80166d4:	bf18      	it	ne
 80166d6:	b21b      	sxthne	r3, r3
 80166d8:	e7cf      	b.n	801667a <_printf_i+0x52>
 80166da:	6813      	ldr	r3, [r2, #0]
 80166dc:	6825      	ldr	r5, [r4, #0]
 80166de:	1d18      	adds	r0, r3, #4
 80166e0:	6010      	str	r0, [r2, #0]
 80166e2:	0628      	lsls	r0, r5, #24
 80166e4:	d501      	bpl.n	80166ea <_printf_i+0xc2>
 80166e6:	681b      	ldr	r3, [r3, #0]
 80166e8:	e002      	b.n	80166f0 <_printf_i+0xc8>
 80166ea:	0668      	lsls	r0, r5, #25
 80166ec:	d5fb      	bpl.n	80166e6 <_printf_i+0xbe>
 80166ee:	881b      	ldrh	r3, [r3, #0]
 80166f0:	4854      	ldr	r0, [pc, #336]	; (8016844 <_printf_i+0x21c>)
 80166f2:	296f      	cmp	r1, #111	; 0x6f
 80166f4:	bf14      	ite	ne
 80166f6:	220a      	movne	r2, #10
 80166f8:	2208      	moveq	r2, #8
 80166fa:	2100      	movs	r1, #0
 80166fc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016700:	6865      	ldr	r5, [r4, #4]
 8016702:	60a5      	str	r5, [r4, #8]
 8016704:	2d00      	cmp	r5, #0
 8016706:	f2c0 8095 	blt.w	8016834 <_printf_i+0x20c>
 801670a:	6821      	ldr	r1, [r4, #0]
 801670c:	f021 0104 	bic.w	r1, r1, #4
 8016710:	6021      	str	r1, [r4, #0]
 8016712:	2b00      	cmp	r3, #0
 8016714:	d13d      	bne.n	8016792 <_printf_i+0x16a>
 8016716:	2d00      	cmp	r5, #0
 8016718:	f040 808e 	bne.w	8016838 <_printf_i+0x210>
 801671c:	4665      	mov	r5, ip
 801671e:	2a08      	cmp	r2, #8
 8016720:	d10b      	bne.n	801673a <_printf_i+0x112>
 8016722:	6823      	ldr	r3, [r4, #0]
 8016724:	07db      	lsls	r3, r3, #31
 8016726:	d508      	bpl.n	801673a <_printf_i+0x112>
 8016728:	6923      	ldr	r3, [r4, #16]
 801672a:	6862      	ldr	r2, [r4, #4]
 801672c:	429a      	cmp	r2, r3
 801672e:	bfde      	ittt	le
 8016730:	2330      	movle	r3, #48	; 0x30
 8016732:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016736:	f105 35ff 	addle.w	r5, r5, #4294967295
 801673a:	ebac 0305 	sub.w	r3, ip, r5
 801673e:	6123      	str	r3, [r4, #16]
 8016740:	f8cd 8000 	str.w	r8, [sp]
 8016744:	463b      	mov	r3, r7
 8016746:	aa03      	add	r2, sp, #12
 8016748:	4621      	mov	r1, r4
 801674a:	4630      	mov	r0, r6
 801674c:	f7ff fef6 	bl	801653c <_printf_common>
 8016750:	3001      	adds	r0, #1
 8016752:	d14d      	bne.n	80167f0 <_printf_i+0x1c8>
 8016754:	f04f 30ff 	mov.w	r0, #4294967295
 8016758:	b005      	add	sp, #20
 801675a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801675e:	4839      	ldr	r0, [pc, #228]	; (8016844 <_printf_i+0x21c>)
 8016760:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8016764:	6813      	ldr	r3, [r2, #0]
 8016766:	6821      	ldr	r1, [r4, #0]
 8016768:	1d1d      	adds	r5, r3, #4
 801676a:	681b      	ldr	r3, [r3, #0]
 801676c:	6015      	str	r5, [r2, #0]
 801676e:	060a      	lsls	r2, r1, #24
 8016770:	d50b      	bpl.n	801678a <_printf_i+0x162>
 8016772:	07ca      	lsls	r2, r1, #31
 8016774:	bf44      	itt	mi
 8016776:	f041 0120 	orrmi.w	r1, r1, #32
 801677a:	6021      	strmi	r1, [r4, #0]
 801677c:	b91b      	cbnz	r3, 8016786 <_printf_i+0x15e>
 801677e:	6822      	ldr	r2, [r4, #0]
 8016780:	f022 0220 	bic.w	r2, r2, #32
 8016784:	6022      	str	r2, [r4, #0]
 8016786:	2210      	movs	r2, #16
 8016788:	e7b7      	b.n	80166fa <_printf_i+0xd2>
 801678a:	064d      	lsls	r5, r1, #25
 801678c:	bf48      	it	mi
 801678e:	b29b      	uxthmi	r3, r3
 8016790:	e7ef      	b.n	8016772 <_printf_i+0x14a>
 8016792:	4665      	mov	r5, ip
 8016794:	fbb3 f1f2 	udiv	r1, r3, r2
 8016798:	fb02 3311 	mls	r3, r2, r1, r3
 801679c:	5cc3      	ldrb	r3, [r0, r3]
 801679e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80167a2:	460b      	mov	r3, r1
 80167a4:	2900      	cmp	r1, #0
 80167a6:	d1f5      	bne.n	8016794 <_printf_i+0x16c>
 80167a8:	e7b9      	b.n	801671e <_printf_i+0xf6>
 80167aa:	6813      	ldr	r3, [r2, #0]
 80167ac:	6825      	ldr	r5, [r4, #0]
 80167ae:	6961      	ldr	r1, [r4, #20]
 80167b0:	1d18      	adds	r0, r3, #4
 80167b2:	6010      	str	r0, [r2, #0]
 80167b4:	0628      	lsls	r0, r5, #24
 80167b6:	681b      	ldr	r3, [r3, #0]
 80167b8:	d501      	bpl.n	80167be <_printf_i+0x196>
 80167ba:	6019      	str	r1, [r3, #0]
 80167bc:	e002      	b.n	80167c4 <_printf_i+0x19c>
 80167be:	066a      	lsls	r2, r5, #25
 80167c0:	d5fb      	bpl.n	80167ba <_printf_i+0x192>
 80167c2:	8019      	strh	r1, [r3, #0]
 80167c4:	2300      	movs	r3, #0
 80167c6:	6123      	str	r3, [r4, #16]
 80167c8:	4665      	mov	r5, ip
 80167ca:	e7b9      	b.n	8016740 <_printf_i+0x118>
 80167cc:	6813      	ldr	r3, [r2, #0]
 80167ce:	1d19      	adds	r1, r3, #4
 80167d0:	6011      	str	r1, [r2, #0]
 80167d2:	681d      	ldr	r5, [r3, #0]
 80167d4:	6862      	ldr	r2, [r4, #4]
 80167d6:	2100      	movs	r1, #0
 80167d8:	4628      	mov	r0, r5
 80167da:	f7e9 fd01 	bl	80001e0 <memchr>
 80167de:	b108      	cbz	r0, 80167e4 <_printf_i+0x1bc>
 80167e0:	1b40      	subs	r0, r0, r5
 80167e2:	6060      	str	r0, [r4, #4]
 80167e4:	6863      	ldr	r3, [r4, #4]
 80167e6:	6123      	str	r3, [r4, #16]
 80167e8:	2300      	movs	r3, #0
 80167ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80167ee:	e7a7      	b.n	8016740 <_printf_i+0x118>
 80167f0:	6923      	ldr	r3, [r4, #16]
 80167f2:	462a      	mov	r2, r5
 80167f4:	4639      	mov	r1, r7
 80167f6:	4630      	mov	r0, r6
 80167f8:	47c0      	blx	r8
 80167fa:	3001      	adds	r0, #1
 80167fc:	d0aa      	beq.n	8016754 <_printf_i+0x12c>
 80167fe:	6823      	ldr	r3, [r4, #0]
 8016800:	079b      	lsls	r3, r3, #30
 8016802:	d413      	bmi.n	801682c <_printf_i+0x204>
 8016804:	68e0      	ldr	r0, [r4, #12]
 8016806:	9b03      	ldr	r3, [sp, #12]
 8016808:	4298      	cmp	r0, r3
 801680a:	bfb8      	it	lt
 801680c:	4618      	movlt	r0, r3
 801680e:	e7a3      	b.n	8016758 <_printf_i+0x130>
 8016810:	2301      	movs	r3, #1
 8016812:	464a      	mov	r2, r9
 8016814:	4639      	mov	r1, r7
 8016816:	4630      	mov	r0, r6
 8016818:	47c0      	blx	r8
 801681a:	3001      	adds	r0, #1
 801681c:	d09a      	beq.n	8016754 <_printf_i+0x12c>
 801681e:	3501      	adds	r5, #1
 8016820:	68e3      	ldr	r3, [r4, #12]
 8016822:	9a03      	ldr	r2, [sp, #12]
 8016824:	1a9b      	subs	r3, r3, r2
 8016826:	42ab      	cmp	r3, r5
 8016828:	dcf2      	bgt.n	8016810 <_printf_i+0x1e8>
 801682a:	e7eb      	b.n	8016804 <_printf_i+0x1dc>
 801682c:	2500      	movs	r5, #0
 801682e:	f104 0919 	add.w	r9, r4, #25
 8016832:	e7f5      	b.n	8016820 <_printf_i+0x1f8>
 8016834:	2b00      	cmp	r3, #0
 8016836:	d1ac      	bne.n	8016792 <_printf_i+0x16a>
 8016838:	7803      	ldrb	r3, [r0, #0]
 801683a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801683e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016842:	e76c      	b.n	801671e <_printf_i+0xf6>
 8016844:	0801b5ba 	.word	0x0801b5ba
 8016848:	0801b5cb 	.word	0x0801b5cb

0801684c <_scanf_float>:
 801684c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016850:	469a      	mov	sl, r3
 8016852:	688b      	ldr	r3, [r1, #8]
 8016854:	4616      	mov	r6, r2
 8016856:	1e5a      	subs	r2, r3, #1
 8016858:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801685c:	b087      	sub	sp, #28
 801685e:	bf83      	ittte	hi
 8016860:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8016864:	189b      	addhi	r3, r3, r2
 8016866:	9301      	strhi	r3, [sp, #4]
 8016868:	2300      	movls	r3, #0
 801686a:	bf86      	itte	hi
 801686c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016870:	608b      	strhi	r3, [r1, #8]
 8016872:	9301      	strls	r3, [sp, #4]
 8016874:	680b      	ldr	r3, [r1, #0]
 8016876:	4688      	mov	r8, r1
 8016878:	f04f 0b00 	mov.w	fp, #0
 801687c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8016880:	f848 3b1c 	str.w	r3, [r8], #28
 8016884:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8016888:	4607      	mov	r7, r0
 801688a:	460c      	mov	r4, r1
 801688c:	4645      	mov	r5, r8
 801688e:	465a      	mov	r2, fp
 8016890:	46d9      	mov	r9, fp
 8016892:	f8cd b008 	str.w	fp, [sp, #8]
 8016896:	68a1      	ldr	r1, [r4, #8]
 8016898:	b181      	cbz	r1, 80168bc <_scanf_float+0x70>
 801689a:	6833      	ldr	r3, [r6, #0]
 801689c:	781b      	ldrb	r3, [r3, #0]
 801689e:	2b49      	cmp	r3, #73	; 0x49
 80168a0:	d071      	beq.n	8016986 <_scanf_float+0x13a>
 80168a2:	d84d      	bhi.n	8016940 <_scanf_float+0xf4>
 80168a4:	2b39      	cmp	r3, #57	; 0x39
 80168a6:	d840      	bhi.n	801692a <_scanf_float+0xde>
 80168a8:	2b31      	cmp	r3, #49	; 0x31
 80168aa:	f080 8088 	bcs.w	80169be <_scanf_float+0x172>
 80168ae:	2b2d      	cmp	r3, #45	; 0x2d
 80168b0:	f000 8090 	beq.w	80169d4 <_scanf_float+0x188>
 80168b4:	d815      	bhi.n	80168e2 <_scanf_float+0x96>
 80168b6:	2b2b      	cmp	r3, #43	; 0x2b
 80168b8:	f000 808c 	beq.w	80169d4 <_scanf_float+0x188>
 80168bc:	f1b9 0f00 	cmp.w	r9, #0
 80168c0:	d003      	beq.n	80168ca <_scanf_float+0x7e>
 80168c2:	6823      	ldr	r3, [r4, #0]
 80168c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80168c8:	6023      	str	r3, [r4, #0]
 80168ca:	3a01      	subs	r2, #1
 80168cc:	2a01      	cmp	r2, #1
 80168ce:	f200 80ea 	bhi.w	8016aa6 <_scanf_float+0x25a>
 80168d2:	4545      	cmp	r5, r8
 80168d4:	f200 80dc 	bhi.w	8016a90 <_scanf_float+0x244>
 80168d8:	2601      	movs	r6, #1
 80168da:	4630      	mov	r0, r6
 80168dc:	b007      	add	sp, #28
 80168de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168e2:	2b2e      	cmp	r3, #46	; 0x2e
 80168e4:	f000 809f 	beq.w	8016a26 <_scanf_float+0x1da>
 80168e8:	2b30      	cmp	r3, #48	; 0x30
 80168ea:	d1e7      	bne.n	80168bc <_scanf_float+0x70>
 80168ec:	6820      	ldr	r0, [r4, #0]
 80168ee:	f410 7f80 	tst.w	r0, #256	; 0x100
 80168f2:	d064      	beq.n	80169be <_scanf_float+0x172>
 80168f4:	9b01      	ldr	r3, [sp, #4]
 80168f6:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80168fa:	6020      	str	r0, [r4, #0]
 80168fc:	f109 0901 	add.w	r9, r9, #1
 8016900:	b11b      	cbz	r3, 801690a <_scanf_float+0xbe>
 8016902:	3b01      	subs	r3, #1
 8016904:	3101      	adds	r1, #1
 8016906:	9301      	str	r3, [sp, #4]
 8016908:	60a1      	str	r1, [r4, #8]
 801690a:	68a3      	ldr	r3, [r4, #8]
 801690c:	3b01      	subs	r3, #1
 801690e:	60a3      	str	r3, [r4, #8]
 8016910:	6923      	ldr	r3, [r4, #16]
 8016912:	3301      	adds	r3, #1
 8016914:	6123      	str	r3, [r4, #16]
 8016916:	6873      	ldr	r3, [r6, #4]
 8016918:	3b01      	subs	r3, #1
 801691a:	2b00      	cmp	r3, #0
 801691c:	6073      	str	r3, [r6, #4]
 801691e:	f340 80ac 	ble.w	8016a7a <_scanf_float+0x22e>
 8016922:	6833      	ldr	r3, [r6, #0]
 8016924:	3301      	adds	r3, #1
 8016926:	6033      	str	r3, [r6, #0]
 8016928:	e7b5      	b.n	8016896 <_scanf_float+0x4a>
 801692a:	2b45      	cmp	r3, #69	; 0x45
 801692c:	f000 8085 	beq.w	8016a3a <_scanf_float+0x1ee>
 8016930:	2b46      	cmp	r3, #70	; 0x46
 8016932:	d06a      	beq.n	8016a0a <_scanf_float+0x1be>
 8016934:	2b41      	cmp	r3, #65	; 0x41
 8016936:	d1c1      	bne.n	80168bc <_scanf_float+0x70>
 8016938:	2a01      	cmp	r2, #1
 801693a:	d1bf      	bne.n	80168bc <_scanf_float+0x70>
 801693c:	2202      	movs	r2, #2
 801693e:	e046      	b.n	80169ce <_scanf_float+0x182>
 8016940:	2b65      	cmp	r3, #101	; 0x65
 8016942:	d07a      	beq.n	8016a3a <_scanf_float+0x1ee>
 8016944:	d818      	bhi.n	8016978 <_scanf_float+0x12c>
 8016946:	2b54      	cmp	r3, #84	; 0x54
 8016948:	d066      	beq.n	8016a18 <_scanf_float+0x1cc>
 801694a:	d811      	bhi.n	8016970 <_scanf_float+0x124>
 801694c:	2b4e      	cmp	r3, #78	; 0x4e
 801694e:	d1b5      	bne.n	80168bc <_scanf_float+0x70>
 8016950:	2a00      	cmp	r2, #0
 8016952:	d146      	bne.n	80169e2 <_scanf_float+0x196>
 8016954:	f1b9 0f00 	cmp.w	r9, #0
 8016958:	d145      	bne.n	80169e6 <_scanf_float+0x19a>
 801695a:	6821      	ldr	r1, [r4, #0]
 801695c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8016960:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8016964:	d13f      	bne.n	80169e6 <_scanf_float+0x19a>
 8016966:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801696a:	6021      	str	r1, [r4, #0]
 801696c:	2201      	movs	r2, #1
 801696e:	e02e      	b.n	80169ce <_scanf_float+0x182>
 8016970:	2b59      	cmp	r3, #89	; 0x59
 8016972:	d01e      	beq.n	80169b2 <_scanf_float+0x166>
 8016974:	2b61      	cmp	r3, #97	; 0x61
 8016976:	e7de      	b.n	8016936 <_scanf_float+0xea>
 8016978:	2b6e      	cmp	r3, #110	; 0x6e
 801697a:	d0e9      	beq.n	8016950 <_scanf_float+0x104>
 801697c:	d815      	bhi.n	80169aa <_scanf_float+0x15e>
 801697e:	2b66      	cmp	r3, #102	; 0x66
 8016980:	d043      	beq.n	8016a0a <_scanf_float+0x1be>
 8016982:	2b69      	cmp	r3, #105	; 0x69
 8016984:	d19a      	bne.n	80168bc <_scanf_float+0x70>
 8016986:	f1bb 0f00 	cmp.w	fp, #0
 801698a:	d138      	bne.n	80169fe <_scanf_float+0x1b2>
 801698c:	f1b9 0f00 	cmp.w	r9, #0
 8016990:	d197      	bne.n	80168c2 <_scanf_float+0x76>
 8016992:	6821      	ldr	r1, [r4, #0]
 8016994:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8016998:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 801699c:	d195      	bne.n	80168ca <_scanf_float+0x7e>
 801699e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80169a2:	6021      	str	r1, [r4, #0]
 80169a4:	f04f 0b01 	mov.w	fp, #1
 80169a8:	e011      	b.n	80169ce <_scanf_float+0x182>
 80169aa:	2b74      	cmp	r3, #116	; 0x74
 80169ac:	d034      	beq.n	8016a18 <_scanf_float+0x1cc>
 80169ae:	2b79      	cmp	r3, #121	; 0x79
 80169b0:	d184      	bne.n	80168bc <_scanf_float+0x70>
 80169b2:	f1bb 0f07 	cmp.w	fp, #7
 80169b6:	d181      	bne.n	80168bc <_scanf_float+0x70>
 80169b8:	f04f 0b08 	mov.w	fp, #8
 80169bc:	e007      	b.n	80169ce <_scanf_float+0x182>
 80169be:	eb12 0f0b 	cmn.w	r2, fp
 80169c2:	f47f af7b 	bne.w	80168bc <_scanf_float+0x70>
 80169c6:	6821      	ldr	r1, [r4, #0]
 80169c8:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80169cc:	6021      	str	r1, [r4, #0]
 80169ce:	702b      	strb	r3, [r5, #0]
 80169d0:	3501      	adds	r5, #1
 80169d2:	e79a      	b.n	801690a <_scanf_float+0xbe>
 80169d4:	6821      	ldr	r1, [r4, #0]
 80169d6:	0608      	lsls	r0, r1, #24
 80169d8:	f57f af70 	bpl.w	80168bc <_scanf_float+0x70>
 80169dc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80169e0:	e7f4      	b.n	80169cc <_scanf_float+0x180>
 80169e2:	2a02      	cmp	r2, #2
 80169e4:	d047      	beq.n	8016a76 <_scanf_float+0x22a>
 80169e6:	f1bb 0f01 	cmp.w	fp, #1
 80169ea:	d003      	beq.n	80169f4 <_scanf_float+0x1a8>
 80169ec:	f1bb 0f04 	cmp.w	fp, #4
 80169f0:	f47f af64 	bne.w	80168bc <_scanf_float+0x70>
 80169f4:	f10b 0b01 	add.w	fp, fp, #1
 80169f8:	fa5f fb8b 	uxtb.w	fp, fp
 80169fc:	e7e7      	b.n	80169ce <_scanf_float+0x182>
 80169fe:	f1bb 0f03 	cmp.w	fp, #3
 8016a02:	d0f7      	beq.n	80169f4 <_scanf_float+0x1a8>
 8016a04:	f1bb 0f05 	cmp.w	fp, #5
 8016a08:	e7f2      	b.n	80169f0 <_scanf_float+0x1a4>
 8016a0a:	f1bb 0f02 	cmp.w	fp, #2
 8016a0e:	f47f af55 	bne.w	80168bc <_scanf_float+0x70>
 8016a12:	f04f 0b03 	mov.w	fp, #3
 8016a16:	e7da      	b.n	80169ce <_scanf_float+0x182>
 8016a18:	f1bb 0f06 	cmp.w	fp, #6
 8016a1c:	f47f af4e 	bne.w	80168bc <_scanf_float+0x70>
 8016a20:	f04f 0b07 	mov.w	fp, #7
 8016a24:	e7d3      	b.n	80169ce <_scanf_float+0x182>
 8016a26:	6821      	ldr	r1, [r4, #0]
 8016a28:	0588      	lsls	r0, r1, #22
 8016a2a:	f57f af47 	bpl.w	80168bc <_scanf_float+0x70>
 8016a2e:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8016a32:	6021      	str	r1, [r4, #0]
 8016a34:	f8cd 9008 	str.w	r9, [sp, #8]
 8016a38:	e7c9      	b.n	80169ce <_scanf_float+0x182>
 8016a3a:	6821      	ldr	r1, [r4, #0]
 8016a3c:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8016a40:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8016a44:	d006      	beq.n	8016a54 <_scanf_float+0x208>
 8016a46:	0548      	lsls	r0, r1, #21
 8016a48:	f57f af38 	bpl.w	80168bc <_scanf_float+0x70>
 8016a4c:	f1b9 0f00 	cmp.w	r9, #0
 8016a50:	f43f af3b 	beq.w	80168ca <_scanf_float+0x7e>
 8016a54:	0588      	lsls	r0, r1, #22
 8016a56:	bf58      	it	pl
 8016a58:	9802      	ldrpl	r0, [sp, #8]
 8016a5a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8016a5e:	bf58      	it	pl
 8016a60:	eba9 0000 	subpl.w	r0, r9, r0
 8016a64:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8016a68:	bf58      	it	pl
 8016a6a:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8016a6e:	6021      	str	r1, [r4, #0]
 8016a70:	f04f 0900 	mov.w	r9, #0
 8016a74:	e7ab      	b.n	80169ce <_scanf_float+0x182>
 8016a76:	2203      	movs	r2, #3
 8016a78:	e7a9      	b.n	80169ce <_scanf_float+0x182>
 8016a7a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016a7e:	9205      	str	r2, [sp, #20]
 8016a80:	4631      	mov	r1, r6
 8016a82:	4638      	mov	r0, r7
 8016a84:	4798      	blx	r3
 8016a86:	9a05      	ldr	r2, [sp, #20]
 8016a88:	2800      	cmp	r0, #0
 8016a8a:	f43f af04 	beq.w	8016896 <_scanf_float+0x4a>
 8016a8e:	e715      	b.n	80168bc <_scanf_float+0x70>
 8016a90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016a94:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016a98:	4632      	mov	r2, r6
 8016a9a:	4638      	mov	r0, r7
 8016a9c:	4798      	blx	r3
 8016a9e:	6923      	ldr	r3, [r4, #16]
 8016aa0:	3b01      	subs	r3, #1
 8016aa2:	6123      	str	r3, [r4, #16]
 8016aa4:	e715      	b.n	80168d2 <_scanf_float+0x86>
 8016aa6:	f10b 33ff 	add.w	r3, fp, #4294967295
 8016aaa:	2b06      	cmp	r3, #6
 8016aac:	d80a      	bhi.n	8016ac4 <_scanf_float+0x278>
 8016aae:	f1bb 0f02 	cmp.w	fp, #2
 8016ab2:	d968      	bls.n	8016b86 <_scanf_float+0x33a>
 8016ab4:	f1ab 0b03 	sub.w	fp, fp, #3
 8016ab8:	fa5f fb8b 	uxtb.w	fp, fp
 8016abc:	eba5 0b0b 	sub.w	fp, r5, fp
 8016ac0:	455d      	cmp	r5, fp
 8016ac2:	d14b      	bne.n	8016b5c <_scanf_float+0x310>
 8016ac4:	6823      	ldr	r3, [r4, #0]
 8016ac6:	05da      	lsls	r2, r3, #23
 8016ac8:	d51f      	bpl.n	8016b0a <_scanf_float+0x2be>
 8016aca:	055b      	lsls	r3, r3, #21
 8016acc:	d468      	bmi.n	8016ba0 <_scanf_float+0x354>
 8016ace:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016ad2:	6923      	ldr	r3, [r4, #16]
 8016ad4:	2965      	cmp	r1, #101	; 0x65
 8016ad6:	f103 33ff 	add.w	r3, r3, #4294967295
 8016ada:	f105 3bff 	add.w	fp, r5, #4294967295
 8016ade:	6123      	str	r3, [r4, #16]
 8016ae0:	d00d      	beq.n	8016afe <_scanf_float+0x2b2>
 8016ae2:	2945      	cmp	r1, #69	; 0x45
 8016ae4:	d00b      	beq.n	8016afe <_scanf_float+0x2b2>
 8016ae6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016aea:	4632      	mov	r2, r6
 8016aec:	4638      	mov	r0, r7
 8016aee:	4798      	blx	r3
 8016af0:	6923      	ldr	r3, [r4, #16]
 8016af2:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8016af6:	3b01      	subs	r3, #1
 8016af8:	f1a5 0b02 	sub.w	fp, r5, #2
 8016afc:	6123      	str	r3, [r4, #16]
 8016afe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016b02:	4632      	mov	r2, r6
 8016b04:	4638      	mov	r0, r7
 8016b06:	4798      	blx	r3
 8016b08:	465d      	mov	r5, fp
 8016b0a:	6826      	ldr	r6, [r4, #0]
 8016b0c:	f016 0610 	ands.w	r6, r6, #16
 8016b10:	d17a      	bne.n	8016c08 <_scanf_float+0x3bc>
 8016b12:	702e      	strb	r6, [r5, #0]
 8016b14:	6823      	ldr	r3, [r4, #0]
 8016b16:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8016b1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016b1e:	d142      	bne.n	8016ba6 <_scanf_float+0x35a>
 8016b20:	9b02      	ldr	r3, [sp, #8]
 8016b22:	eba9 0303 	sub.w	r3, r9, r3
 8016b26:	425a      	negs	r2, r3
 8016b28:	2b00      	cmp	r3, #0
 8016b2a:	d149      	bne.n	8016bc0 <_scanf_float+0x374>
 8016b2c:	2200      	movs	r2, #0
 8016b2e:	4641      	mov	r1, r8
 8016b30:	4638      	mov	r0, r7
 8016b32:	f000 fee9 	bl	8017908 <_strtod_r>
 8016b36:	6825      	ldr	r5, [r4, #0]
 8016b38:	f8da 3000 	ldr.w	r3, [sl]
 8016b3c:	f015 0f02 	tst.w	r5, #2
 8016b40:	f103 0204 	add.w	r2, r3, #4
 8016b44:	ec59 8b10 	vmov	r8, r9, d0
 8016b48:	f8ca 2000 	str.w	r2, [sl]
 8016b4c:	d043      	beq.n	8016bd6 <_scanf_float+0x38a>
 8016b4e:	681b      	ldr	r3, [r3, #0]
 8016b50:	e9c3 8900 	strd	r8, r9, [r3]
 8016b54:	68e3      	ldr	r3, [r4, #12]
 8016b56:	3301      	adds	r3, #1
 8016b58:	60e3      	str	r3, [r4, #12]
 8016b5a:	e6be      	b.n	80168da <_scanf_float+0x8e>
 8016b5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016b60:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016b64:	4632      	mov	r2, r6
 8016b66:	4638      	mov	r0, r7
 8016b68:	4798      	blx	r3
 8016b6a:	6923      	ldr	r3, [r4, #16]
 8016b6c:	3b01      	subs	r3, #1
 8016b6e:	6123      	str	r3, [r4, #16]
 8016b70:	e7a6      	b.n	8016ac0 <_scanf_float+0x274>
 8016b72:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016b76:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016b7a:	4632      	mov	r2, r6
 8016b7c:	4638      	mov	r0, r7
 8016b7e:	4798      	blx	r3
 8016b80:	6923      	ldr	r3, [r4, #16]
 8016b82:	3b01      	subs	r3, #1
 8016b84:	6123      	str	r3, [r4, #16]
 8016b86:	4545      	cmp	r5, r8
 8016b88:	d8f3      	bhi.n	8016b72 <_scanf_float+0x326>
 8016b8a:	e6a5      	b.n	80168d8 <_scanf_float+0x8c>
 8016b8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016b90:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016b94:	4632      	mov	r2, r6
 8016b96:	4638      	mov	r0, r7
 8016b98:	4798      	blx	r3
 8016b9a:	6923      	ldr	r3, [r4, #16]
 8016b9c:	3b01      	subs	r3, #1
 8016b9e:	6123      	str	r3, [r4, #16]
 8016ba0:	4545      	cmp	r5, r8
 8016ba2:	d8f3      	bhi.n	8016b8c <_scanf_float+0x340>
 8016ba4:	e698      	b.n	80168d8 <_scanf_float+0x8c>
 8016ba6:	9b03      	ldr	r3, [sp, #12]
 8016ba8:	2b00      	cmp	r3, #0
 8016baa:	d0bf      	beq.n	8016b2c <_scanf_float+0x2e0>
 8016bac:	9904      	ldr	r1, [sp, #16]
 8016bae:	230a      	movs	r3, #10
 8016bb0:	4632      	mov	r2, r6
 8016bb2:	3101      	adds	r1, #1
 8016bb4:	4638      	mov	r0, r7
 8016bb6:	f000 ff33 	bl	8017a20 <_strtol_r>
 8016bba:	9b03      	ldr	r3, [sp, #12]
 8016bbc:	9d04      	ldr	r5, [sp, #16]
 8016bbe:	1ac2      	subs	r2, r0, r3
 8016bc0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8016bc4:	429d      	cmp	r5, r3
 8016bc6:	bf28      	it	cs
 8016bc8:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8016bcc:	490f      	ldr	r1, [pc, #60]	; (8016c0c <_scanf_float+0x3c0>)
 8016bce:	4628      	mov	r0, r5
 8016bd0:	f000 f868 	bl	8016ca4 <siprintf>
 8016bd4:	e7aa      	b.n	8016b2c <_scanf_float+0x2e0>
 8016bd6:	f015 0504 	ands.w	r5, r5, #4
 8016bda:	d1b8      	bne.n	8016b4e <_scanf_float+0x302>
 8016bdc:	681f      	ldr	r7, [r3, #0]
 8016bde:	ee10 2a10 	vmov	r2, s0
 8016be2:	464b      	mov	r3, r9
 8016be4:	ee10 0a10 	vmov	r0, s0
 8016be8:	4649      	mov	r1, r9
 8016bea:	f7e9 ff9f 	bl	8000b2c <__aeabi_dcmpun>
 8016bee:	b128      	cbz	r0, 8016bfc <_scanf_float+0x3b0>
 8016bf0:	4628      	mov	r0, r5
 8016bf2:	f000 f81d 	bl	8016c30 <nanf>
 8016bf6:	ed87 0a00 	vstr	s0, [r7]
 8016bfa:	e7ab      	b.n	8016b54 <_scanf_float+0x308>
 8016bfc:	4640      	mov	r0, r8
 8016bfe:	4649      	mov	r1, r9
 8016c00:	f7e9 fff2 	bl	8000be8 <__aeabi_d2f>
 8016c04:	6038      	str	r0, [r7, #0]
 8016c06:	e7a5      	b.n	8016b54 <_scanf_float+0x308>
 8016c08:	2600      	movs	r6, #0
 8016c0a:	e666      	b.n	80168da <_scanf_float+0x8e>
 8016c0c:	0801b5dc 	.word	0x0801b5dc

08016c10 <_sbrk_r>:
 8016c10:	b538      	push	{r3, r4, r5, lr}
 8016c12:	4c06      	ldr	r4, [pc, #24]	; (8016c2c <_sbrk_r+0x1c>)
 8016c14:	2300      	movs	r3, #0
 8016c16:	4605      	mov	r5, r0
 8016c18:	4608      	mov	r0, r1
 8016c1a:	6023      	str	r3, [r4, #0]
 8016c1c:	f7f4 fad4 	bl	800b1c8 <_sbrk>
 8016c20:	1c43      	adds	r3, r0, #1
 8016c22:	d102      	bne.n	8016c2a <_sbrk_r+0x1a>
 8016c24:	6823      	ldr	r3, [r4, #0]
 8016c26:	b103      	cbz	r3, 8016c2a <_sbrk_r+0x1a>
 8016c28:	602b      	str	r3, [r5, #0]
 8016c2a:	bd38      	pop	{r3, r4, r5, pc}
 8016c2c:	2000773c 	.word	0x2000773c

08016c30 <nanf>:
 8016c30:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016c38 <nanf+0x8>
 8016c34:	4770      	bx	lr
 8016c36:	bf00      	nop
 8016c38:	7fc00000 	.word	0x7fc00000

08016c3c <sniprintf>:
 8016c3c:	b40c      	push	{r2, r3}
 8016c3e:	b530      	push	{r4, r5, lr}
 8016c40:	4b17      	ldr	r3, [pc, #92]	; (8016ca0 <sniprintf+0x64>)
 8016c42:	1e0c      	subs	r4, r1, #0
 8016c44:	b09d      	sub	sp, #116	; 0x74
 8016c46:	681d      	ldr	r5, [r3, #0]
 8016c48:	da08      	bge.n	8016c5c <sniprintf+0x20>
 8016c4a:	238b      	movs	r3, #139	; 0x8b
 8016c4c:	602b      	str	r3, [r5, #0]
 8016c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8016c52:	b01d      	add	sp, #116	; 0x74
 8016c54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016c58:	b002      	add	sp, #8
 8016c5a:	4770      	bx	lr
 8016c5c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8016c60:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016c64:	bf14      	ite	ne
 8016c66:	f104 33ff 	addne.w	r3, r4, #4294967295
 8016c6a:	4623      	moveq	r3, r4
 8016c6c:	9304      	str	r3, [sp, #16]
 8016c6e:	9307      	str	r3, [sp, #28]
 8016c70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016c74:	9002      	str	r0, [sp, #8]
 8016c76:	9006      	str	r0, [sp, #24]
 8016c78:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016c7c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016c7e:	ab21      	add	r3, sp, #132	; 0x84
 8016c80:	a902      	add	r1, sp, #8
 8016c82:	4628      	mov	r0, r5
 8016c84:	9301      	str	r3, [sp, #4]
 8016c86:	f002 fcd9 	bl	801963c <_svfiprintf_r>
 8016c8a:	1c43      	adds	r3, r0, #1
 8016c8c:	bfbc      	itt	lt
 8016c8e:	238b      	movlt	r3, #139	; 0x8b
 8016c90:	602b      	strlt	r3, [r5, #0]
 8016c92:	2c00      	cmp	r4, #0
 8016c94:	d0dd      	beq.n	8016c52 <sniprintf+0x16>
 8016c96:	9b02      	ldr	r3, [sp, #8]
 8016c98:	2200      	movs	r2, #0
 8016c9a:	701a      	strb	r2, [r3, #0]
 8016c9c:	e7d9      	b.n	8016c52 <sniprintf+0x16>
 8016c9e:	bf00      	nop
 8016ca0:	200009ac 	.word	0x200009ac

08016ca4 <siprintf>:
 8016ca4:	b40e      	push	{r1, r2, r3}
 8016ca6:	b500      	push	{lr}
 8016ca8:	b09c      	sub	sp, #112	; 0x70
 8016caa:	ab1d      	add	r3, sp, #116	; 0x74
 8016cac:	9002      	str	r0, [sp, #8]
 8016cae:	9006      	str	r0, [sp, #24]
 8016cb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016cb4:	4809      	ldr	r0, [pc, #36]	; (8016cdc <siprintf+0x38>)
 8016cb6:	9107      	str	r1, [sp, #28]
 8016cb8:	9104      	str	r1, [sp, #16]
 8016cba:	4909      	ldr	r1, [pc, #36]	; (8016ce0 <siprintf+0x3c>)
 8016cbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8016cc0:	9105      	str	r1, [sp, #20]
 8016cc2:	6800      	ldr	r0, [r0, #0]
 8016cc4:	9301      	str	r3, [sp, #4]
 8016cc6:	a902      	add	r1, sp, #8
 8016cc8:	f002 fcb8 	bl	801963c <_svfiprintf_r>
 8016ccc:	9b02      	ldr	r3, [sp, #8]
 8016cce:	2200      	movs	r2, #0
 8016cd0:	701a      	strb	r2, [r3, #0]
 8016cd2:	b01c      	add	sp, #112	; 0x70
 8016cd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8016cd8:	b003      	add	sp, #12
 8016cda:	4770      	bx	lr
 8016cdc:	200009ac 	.word	0x200009ac
 8016ce0:	ffff0208 	.word	0xffff0208

08016ce4 <sulp>:
 8016ce4:	b570      	push	{r4, r5, r6, lr}
 8016ce6:	4604      	mov	r4, r0
 8016ce8:	460d      	mov	r5, r1
 8016cea:	ec45 4b10 	vmov	d0, r4, r5
 8016cee:	4616      	mov	r6, r2
 8016cf0:	f002 fb08 	bl	8019304 <__ulp>
 8016cf4:	ec51 0b10 	vmov	r0, r1, d0
 8016cf8:	b17e      	cbz	r6, 8016d1a <sulp+0x36>
 8016cfa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016cfe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016d02:	2b00      	cmp	r3, #0
 8016d04:	dd09      	ble.n	8016d1a <sulp+0x36>
 8016d06:	051b      	lsls	r3, r3, #20
 8016d08:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8016d0c:	2400      	movs	r4, #0
 8016d0e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8016d12:	4622      	mov	r2, r4
 8016d14:	462b      	mov	r3, r5
 8016d16:	f7e9 fc6f 	bl	80005f8 <__aeabi_dmul>
 8016d1a:	bd70      	pop	{r4, r5, r6, pc}
 8016d1c:	0000      	movs	r0, r0
	...

08016d20 <_strtod_l>:
 8016d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d24:	461f      	mov	r7, r3
 8016d26:	b0a1      	sub	sp, #132	; 0x84
 8016d28:	2300      	movs	r3, #0
 8016d2a:	4681      	mov	r9, r0
 8016d2c:	4638      	mov	r0, r7
 8016d2e:	460e      	mov	r6, r1
 8016d30:	9217      	str	r2, [sp, #92]	; 0x5c
 8016d32:	931c      	str	r3, [sp, #112]	; 0x70
 8016d34:	f001 fff5 	bl	8018d22 <__localeconv_l>
 8016d38:	4680      	mov	r8, r0
 8016d3a:	6800      	ldr	r0, [r0, #0]
 8016d3c:	f7e9 fa48 	bl	80001d0 <strlen>
 8016d40:	f04f 0a00 	mov.w	sl, #0
 8016d44:	4604      	mov	r4, r0
 8016d46:	f04f 0b00 	mov.w	fp, #0
 8016d4a:	961b      	str	r6, [sp, #108]	; 0x6c
 8016d4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016d4e:	781a      	ldrb	r2, [r3, #0]
 8016d50:	2a0d      	cmp	r2, #13
 8016d52:	d832      	bhi.n	8016dba <_strtod_l+0x9a>
 8016d54:	2a09      	cmp	r2, #9
 8016d56:	d236      	bcs.n	8016dc6 <_strtod_l+0xa6>
 8016d58:	2a00      	cmp	r2, #0
 8016d5a:	d03e      	beq.n	8016dda <_strtod_l+0xba>
 8016d5c:	2300      	movs	r3, #0
 8016d5e:	930d      	str	r3, [sp, #52]	; 0x34
 8016d60:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8016d62:	782b      	ldrb	r3, [r5, #0]
 8016d64:	2b30      	cmp	r3, #48	; 0x30
 8016d66:	f040 80ac 	bne.w	8016ec2 <_strtod_l+0x1a2>
 8016d6a:	786b      	ldrb	r3, [r5, #1]
 8016d6c:	2b58      	cmp	r3, #88	; 0x58
 8016d6e:	d001      	beq.n	8016d74 <_strtod_l+0x54>
 8016d70:	2b78      	cmp	r3, #120	; 0x78
 8016d72:	d167      	bne.n	8016e44 <_strtod_l+0x124>
 8016d74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016d76:	9301      	str	r3, [sp, #4]
 8016d78:	ab1c      	add	r3, sp, #112	; 0x70
 8016d7a:	9300      	str	r3, [sp, #0]
 8016d7c:	9702      	str	r7, [sp, #8]
 8016d7e:	ab1d      	add	r3, sp, #116	; 0x74
 8016d80:	4a88      	ldr	r2, [pc, #544]	; (8016fa4 <_strtod_l+0x284>)
 8016d82:	a91b      	add	r1, sp, #108	; 0x6c
 8016d84:	4648      	mov	r0, r9
 8016d86:	f001 fcf2 	bl	801876e <__gethex>
 8016d8a:	f010 0407 	ands.w	r4, r0, #7
 8016d8e:	4606      	mov	r6, r0
 8016d90:	d005      	beq.n	8016d9e <_strtod_l+0x7e>
 8016d92:	2c06      	cmp	r4, #6
 8016d94:	d12b      	bne.n	8016dee <_strtod_l+0xce>
 8016d96:	3501      	adds	r5, #1
 8016d98:	2300      	movs	r3, #0
 8016d9a:	951b      	str	r5, [sp, #108]	; 0x6c
 8016d9c:	930d      	str	r3, [sp, #52]	; 0x34
 8016d9e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016da0:	2b00      	cmp	r3, #0
 8016da2:	f040 859a 	bne.w	80178da <_strtod_l+0xbba>
 8016da6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016da8:	b1e3      	cbz	r3, 8016de4 <_strtod_l+0xc4>
 8016daa:	4652      	mov	r2, sl
 8016dac:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8016db0:	ec43 2b10 	vmov	d0, r2, r3
 8016db4:	b021      	add	sp, #132	; 0x84
 8016db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016dba:	2a2b      	cmp	r2, #43	; 0x2b
 8016dbc:	d015      	beq.n	8016dea <_strtod_l+0xca>
 8016dbe:	2a2d      	cmp	r2, #45	; 0x2d
 8016dc0:	d004      	beq.n	8016dcc <_strtod_l+0xac>
 8016dc2:	2a20      	cmp	r2, #32
 8016dc4:	d1ca      	bne.n	8016d5c <_strtod_l+0x3c>
 8016dc6:	3301      	adds	r3, #1
 8016dc8:	931b      	str	r3, [sp, #108]	; 0x6c
 8016dca:	e7bf      	b.n	8016d4c <_strtod_l+0x2c>
 8016dcc:	2201      	movs	r2, #1
 8016dce:	920d      	str	r2, [sp, #52]	; 0x34
 8016dd0:	1c5a      	adds	r2, r3, #1
 8016dd2:	921b      	str	r2, [sp, #108]	; 0x6c
 8016dd4:	785b      	ldrb	r3, [r3, #1]
 8016dd6:	2b00      	cmp	r3, #0
 8016dd8:	d1c2      	bne.n	8016d60 <_strtod_l+0x40>
 8016dda:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016ddc:	961b      	str	r6, [sp, #108]	; 0x6c
 8016dde:	2b00      	cmp	r3, #0
 8016de0:	f040 8579 	bne.w	80178d6 <_strtod_l+0xbb6>
 8016de4:	4652      	mov	r2, sl
 8016de6:	465b      	mov	r3, fp
 8016de8:	e7e2      	b.n	8016db0 <_strtod_l+0x90>
 8016dea:	2200      	movs	r2, #0
 8016dec:	e7ef      	b.n	8016dce <_strtod_l+0xae>
 8016dee:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016df0:	b13a      	cbz	r2, 8016e02 <_strtod_l+0xe2>
 8016df2:	2135      	movs	r1, #53	; 0x35
 8016df4:	a81e      	add	r0, sp, #120	; 0x78
 8016df6:	f002 fb7d 	bl	80194f4 <__copybits>
 8016dfa:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016dfc:	4648      	mov	r0, r9
 8016dfe:	f001 ffe9 	bl	8018dd4 <_Bfree>
 8016e02:	3c01      	subs	r4, #1
 8016e04:	2c04      	cmp	r4, #4
 8016e06:	d806      	bhi.n	8016e16 <_strtod_l+0xf6>
 8016e08:	e8df f004 	tbb	[pc, r4]
 8016e0c:	1714030a 	.word	0x1714030a
 8016e10:	0a          	.byte	0x0a
 8016e11:	00          	.byte	0x00
 8016e12:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8016e16:	0730      	lsls	r0, r6, #28
 8016e18:	d5c1      	bpl.n	8016d9e <_strtod_l+0x7e>
 8016e1a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8016e1e:	e7be      	b.n	8016d9e <_strtod_l+0x7e>
 8016e20:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8016e24:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8016e26:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8016e2a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8016e2e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016e32:	e7f0      	b.n	8016e16 <_strtod_l+0xf6>
 8016e34:	f8df b170 	ldr.w	fp, [pc, #368]	; 8016fa8 <_strtod_l+0x288>
 8016e38:	e7ed      	b.n	8016e16 <_strtod_l+0xf6>
 8016e3a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8016e3e:	f04f 3aff 	mov.w	sl, #4294967295
 8016e42:	e7e8      	b.n	8016e16 <_strtod_l+0xf6>
 8016e44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016e46:	1c5a      	adds	r2, r3, #1
 8016e48:	921b      	str	r2, [sp, #108]	; 0x6c
 8016e4a:	785b      	ldrb	r3, [r3, #1]
 8016e4c:	2b30      	cmp	r3, #48	; 0x30
 8016e4e:	d0f9      	beq.n	8016e44 <_strtod_l+0x124>
 8016e50:	2b00      	cmp	r3, #0
 8016e52:	d0a4      	beq.n	8016d9e <_strtod_l+0x7e>
 8016e54:	2301      	movs	r3, #1
 8016e56:	2500      	movs	r5, #0
 8016e58:	9306      	str	r3, [sp, #24]
 8016e5a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016e5c:	9308      	str	r3, [sp, #32]
 8016e5e:	9507      	str	r5, [sp, #28]
 8016e60:	9505      	str	r5, [sp, #20]
 8016e62:	220a      	movs	r2, #10
 8016e64:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8016e66:	7807      	ldrb	r7, [r0, #0]
 8016e68:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8016e6c:	b2d9      	uxtb	r1, r3
 8016e6e:	2909      	cmp	r1, #9
 8016e70:	d929      	bls.n	8016ec6 <_strtod_l+0x1a6>
 8016e72:	4622      	mov	r2, r4
 8016e74:	f8d8 1000 	ldr.w	r1, [r8]
 8016e78:	f002 fcd8 	bl	801982c <strncmp>
 8016e7c:	2800      	cmp	r0, #0
 8016e7e:	d031      	beq.n	8016ee4 <_strtod_l+0x1c4>
 8016e80:	2000      	movs	r0, #0
 8016e82:	9c05      	ldr	r4, [sp, #20]
 8016e84:	9004      	str	r0, [sp, #16]
 8016e86:	463b      	mov	r3, r7
 8016e88:	4602      	mov	r2, r0
 8016e8a:	2b65      	cmp	r3, #101	; 0x65
 8016e8c:	d001      	beq.n	8016e92 <_strtod_l+0x172>
 8016e8e:	2b45      	cmp	r3, #69	; 0x45
 8016e90:	d114      	bne.n	8016ebc <_strtod_l+0x19c>
 8016e92:	b924      	cbnz	r4, 8016e9e <_strtod_l+0x17e>
 8016e94:	b910      	cbnz	r0, 8016e9c <_strtod_l+0x17c>
 8016e96:	9b06      	ldr	r3, [sp, #24]
 8016e98:	2b00      	cmp	r3, #0
 8016e9a:	d09e      	beq.n	8016dda <_strtod_l+0xba>
 8016e9c:	2400      	movs	r4, #0
 8016e9e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8016ea0:	1c73      	adds	r3, r6, #1
 8016ea2:	931b      	str	r3, [sp, #108]	; 0x6c
 8016ea4:	7873      	ldrb	r3, [r6, #1]
 8016ea6:	2b2b      	cmp	r3, #43	; 0x2b
 8016ea8:	d078      	beq.n	8016f9c <_strtod_l+0x27c>
 8016eaa:	2b2d      	cmp	r3, #45	; 0x2d
 8016eac:	d070      	beq.n	8016f90 <_strtod_l+0x270>
 8016eae:	f04f 0c00 	mov.w	ip, #0
 8016eb2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8016eb6:	2f09      	cmp	r7, #9
 8016eb8:	d97c      	bls.n	8016fb4 <_strtod_l+0x294>
 8016eba:	961b      	str	r6, [sp, #108]	; 0x6c
 8016ebc:	f04f 0e00 	mov.w	lr, #0
 8016ec0:	e09a      	b.n	8016ff8 <_strtod_l+0x2d8>
 8016ec2:	2300      	movs	r3, #0
 8016ec4:	e7c7      	b.n	8016e56 <_strtod_l+0x136>
 8016ec6:	9905      	ldr	r1, [sp, #20]
 8016ec8:	2908      	cmp	r1, #8
 8016eca:	bfdd      	ittte	le
 8016ecc:	9907      	ldrle	r1, [sp, #28]
 8016ece:	fb02 3301 	mlale	r3, r2, r1, r3
 8016ed2:	9307      	strle	r3, [sp, #28]
 8016ed4:	fb02 3505 	mlagt	r5, r2, r5, r3
 8016ed8:	9b05      	ldr	r3, [sp, #20]
 8016eda:	3001      	adds	r0, #1
 8016edc:	3301      	adds	r3, #1
 8016ede:	9305      	str	r3, [sp, #20]
 8016ee0:	901b      	str	r0, [sp, #108]	; 0x6c
 8016ee2:	e7bf      	b.n	8016e64 <_strtod_l+0x144>
 8016ee4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016ee6:	191a      	adds	r2, r3, r4
 8016ee8:	921b      	str	r2, [sp, #108]	; 0x6c
 8016eea:	9a05      	ldr	r2, [sp, #20]
 8016eec:	5d1b      	ldrb	r3, [r3, r4]
 8016eee:	2a00      	cmp	r2, #0
 8016ef0:	d037      	beq.n	8016f62 <_strtod_l+0x242>
 8016ef2:	9c05      	ldr	r4, [sp, #20]
 8016ef4:	4602      	mov	r2, r0
 8016ef6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8016efa:	2909      	cmp	r1, #9
 8016efc:	d913      	bls.n	8016f26 <_strtod_l+0x206>
 8016efe:	2101      	movs	r1, #1
 8016f00:	9104      	str	r1, [sp, #16]
 8016f02:	e7c2      	b.n	8016e8a <_strtod_l+0x16a>
 8016f04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016f06:	1c5a      	adds	r2, r3, #1
 8016f08:	921b      	str	r2, [sp, #108]	; 0x6c
 8016f0a:	785b      	ldrb	r3, [r3, #1]
 8016f0c:	3001      	adds	r0, #1
 8016f0e:	2b30      	cmp	r3, #48	; 0x30
 8016f10:	d0f8      	beq.n	8016f04 <_strtod_l+0x1e4>
 8016f12:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8016f16:	2a08      	cmp	r2, #8
 8016f18:	f200 84e4 	bhi.w	80178e4 <_strtod_l+0xbc4>
 8016f1c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016f1e:	9208      	str	r2, [sp, #32]
 8016f20:	4602      	mov	r2, r0
 8016f22:	2000      	movs	r0, #0
 8016f24:	4604      	mov	r4, r0
 8016f26:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8016f2a:	f100 0101 	add.w	r1, r0, #1
 8016f2e:	d012      	beq.n	8016f56 <_strtod_l+0x236>
 8016f30:	440a      	add	r2, r1
 8016f32:	eb00 0c04 	add.w	ip, r0, r4
 8016f36:	4621      	mov	r1, r4
 8016f38:	270a      	movs	r7, #10
 8016f3a:	458c      	cmp	ip, r1
 8016f3c:	d113      	bne.n	8016f66 <_strtod_l+0x246>
 8016f3e:	1821      	adds	r1, r4, r0
 8016f40:	2908      	cmp	r1, #8
 8016f42:	f104 0401 	add.w	r4, r4, #1
 8016f46:	4404      	add	r4, r0
 8016f48:	dc19      	bgt.n	8016f7e <_strtod_l+0x25e>
 8016f4a:	9b07      	ldr	r3, [sp, #28]
 8016f4c:	210a      	movs	r1, #10
 8016f4e:	fb01 e303 	mla	r3, r1, r3, lr
 8016f52:	9307      	str	r3, [sp, #28]
 8016f54:	2100      	movs	r1, #0
 8016f56:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016f58:	1c58      	adds	r0, r3, #1
 8016f5a:	901b      	str	r0, [sp, #108]	; 0x6c
 8016f5c:	785b      	ldrb	r3, [r3, #1]
 8016f5e:	4608      	mov	r0, r1
 8016f60:	e7c9      	b.n	8016ef6 <_strtod_l+0x1d6>
 8016f62:	9805      	ldr	r0, [sp, #20]
 8016f64:	e7d3      	b.n	8016f0e <_strtod_l+0x1ee>
 8016f66:	2908      	cmp	r1, #8
 8016f68:	f101 0101 	add.w	r1, r1, #1
 8016f6c:	dc03      	bgt.n	8016f76 <_strtod_l+0x256>
 8016f6e:	9b07      	ldr	r3, [sp, #28]
 8016f70:	437b      	muls	r3, r7
 8016f72:	9307      	str	r3, [sp, #28]
 8016f74:	e7e1      	b.n	8016f3a <_strtod_l+0x21a>
 8016f76:	2910      	cmp	r1, #16
 8016f78:	bfd8      	it	le
 8016f7a:	437d      	mulle	r5, r7
 8016f7c:	e7dd      	b.n	8016f3a <_strtod_l+0x21a>
 8016f7e:	2c10      	cmp	r4, #16
 8016f80:	bfdc      	itt	le
 8016f82:	210a      	movle	r1, #10
 8016f84:	fb01 e505 	mlale	r5, r1, r5, lr
 8016f88:	e7e4      	b.n	8016f54 <_strtod_l+0x234>
 8016f8a:	2301      	movs	r3, #1
 8016f8c:	9304      	str	r3, [sp, #16]
 8016f8e:	e781      	b.n	8016e94 <_strtod_l+0x174>
 8016f90:	f04f 0c01 	mov.w	ip, #1
 8016f94:	1cb3      	adds	r3, r6, #2
 8016f96:	931b      	str	r3, [sp, #108]	; 0x6c
 8016f98:	78b3      	ldrb	r3, [r6, #2]
 8016f9a:	e78a      	b.n	8016eb2 <_strtod_l+0x192>
 8016f9c:	f04f 0c00 	mov.w	ip, #0
 8016fa0:	e7f8      	b.n	8016f94 <_strtod_l+0x274>
 8016fa2:	bf00      	nop
 8016fa4:	0801b5e4 	.word	0x0801b5e4
 8016fa8:	7ff00000 	.word	0x7ff00000
 8016fac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016fae:	1c5f      	adds	r7, r3, #1
 8016fb0:	971b      	str	r7, [sp, #108]	; 0x6c
 8016fb2:	785b      	ldrb	r3, [r3, #1]
 8016fb4:	2b30      	cmp	r3, #48	; 0x30
 8016fb6:	d0f9      	beq.n	8016fac <_strtod_l+0x28c>
 8016fb8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8016fbc:	2f08      	cmp	r7, #8
 8016fbe:	f63f af7d 	bhi.w	8016ebc <_strtod_l+0x19c>
 8016fc2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8016fc6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016fc8:	930a      	str	r3, [sp, #40]	; 0x28
 8016fca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016fcc:	1c5f      	adds	r7, r3, #1
 8016fce:	971b      	str	r7, [sp, #108]	; 0x6c
 8016fd0:	785b      	ldrb	r3, [r3, #1]
 8016fd2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8016fd6:	f1b8 0f09 	cmp.w	r8, #9
 8016fda:	d937      	bls.n	801704c <_strtod_l+0x32c>
 8016fdc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016fde:	1a7f      	subs	r7, r7, r1
 8016fe0:	2f08      	cmp	r7, #8
 8016fe2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8016fe6:	dc37      	bgt.n	8017058 <_strtod_l+0x338>
 8016fe8:	45be      	cmp	lr, r7
 8016fea:	bfa8      	it	ge
 8016fec:	46be      	movge	lr, r7
 8016fee:	f1bc 0f00 	cmp.w	ip, #0
 8016ff2:	d001      	beq.n	8016ff8 <_strtod_l+0x2d8>
 8016ff4:	f1ce 0e00 	rsb	lr, lr, #0
 8016ff8:	2c00      	cmp	r4, #0
 8016ffa:	d151      	bne.n	80170a0 <_strtod_l+0x380>
 8016ffc:	2800      	cmp	r0, #0
 8016ffe:	f47f aece 	bne.w	8016d9e <_strtod_l+0x7e>
 8017002:	9a06      	ldr	r2, [sp, #24]
 8017004:	2a00      	cmp	r2, #0
 8017006:	f47f aeca 	bne.w	8016d9e <_strtod_l+0x7e>
 801700a:	9a04      	ldr	r2, [sp, #16]
 801700c:	2a00      	cmp	r2, #0
 801700e:	f47f aee4 	bne.w	8016dda <_strtod_l+0xba>
 8017012:	2b4e      	cmp	r3, #78	; 0x4e
 8017014:	d027      	beq.n	8017066 <_strtod_l+0x346>
 8017016:	dc21      	bgt.n	801705c <_strtod_l+0x33c>
 8017018:	2b49      	cmp	r3, #73	; 0x49
 801701a:	f47f aede 	bne.w	8016dda <_strtod_l+0xba>
 801701e:	49a0      	ldr	r1, [pc, #640]	; (80172a0 <_strtod_l+0x580>)
 8017020:	a81b      	add	r0, sp, #108	; 0x6c
 8017022:	f001 fdd7 	bl	8018bd4 <__match>
 8017026:	2800      	cmp	r0, #0
 8017028:	f43f aed7 	beq.w	8016dda <_strtod_l+0xba>
 801702c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801702e:	499d      	ldr	r1, [pc, #628]	; (80172a4 <_strtod_l+0x584>)
 8017030:	3b01      	subs	r3, #1
 8017032:	a81b      	add	r0, sp, #108	; 0x6c
 8017034:	931b      	str	r3, [sp, #108]	; 0x6c
 8017036:	f001 fdcd 	bl	8018bd4 <__match>
 801703a:	b910      	cbnz	r0, 8017042 <_strtod_l+0x322>
 801703c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801703e:	3301      	adds	r3, #1
 8017040:	931b      	str	r3, [sp, #108]	; 0x6c
 8017042:	f8df b274 	ldr.w	fp, [pc, #628]	; 80172b8 <_strtod_l+0x598>
 8017046:	f04f 0a00 	mov.w	sl, #0
 801704a:	e6a8      	b.n	8016d9e <_strtod_l+0x7e>
 801704c:	210a      	movs	r1, #10
 801704e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8017052:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8017056:	e7b8      	b.n	8016fca <_strtod_l+0x2aa>
 8017058:	46be      	mov	lr, r7
 801705a:	e7c8      	b.n	8016fee <_strtod_l+0x2ce>
 801705c:	2b69      	cmp	r3, #105	; 0x69
 801705e:	d0de      	beq.n	801701e <_strtod_l+0x2fe>
 8017060:	2b6e      	cmp	r3, #110	; 0x6e
 8017062:	f47f aeba 	bne.w	8016dda <_strtod_l+0xba>
 8017066:	4990      	ldr	r1, [pc, #576]	; (80172a8 <_strtod_l+0x588>)
 8017068:	a81b      	add	r0, sp, #108	; 0x6c
 801706a:	f001 fdb3 	bl	8018bd4 <__match>
 801706e:	2800      	cmp	r0, #0
 8017070:	f43f aeb3 	beq.w	8016dda <_strtod_l+0xba>
 8017074:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017076:	781b      	ldrb	r3, [r3, #0]
 8017078:	2b28      	cmp	r3, #40	; 0x28
 801707a:	d10e      	bne.n	801709a <_strtod_l+0x37a>
 801707c:	aa1e      	add	r2, sp, #120	; 0x78
 801707e:	498b      	ldr	r1, [pc, #556]	; (80172ac <_strtod_l+0x58c>)
 8017080:	a81b      	add	r0, sp, #108	; 0x6c
 8017082:	f001 fdbb 	bl	8018bfc <__hexnan>
 8017086:	2805      	cmp	r0, #5
 8017088:	d107      	bne.n	801709a <_strtod_l+0x37a>
 801708a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801708c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8017090:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8017094:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8017098:	e681      	b.n	8016d9e <_strtod_l+0x7e>
 801709a:	f8df b224 	ldr.w	fp, [pc, #548]	; 80172c0 <_strtod_l+0x5a0>
 801709e:	e7d2      	b.n	8017046 <_strtod_l+0x326>
 80170a0:	ebae 0302 	sub.w	r3, lr, r2
 80170a4:	9306      	str	r3, [sp, #24]
 80170a6:	9b05      	ldr	r3, [sp, #20]
 80170a8:	9807      	ldr	r0, [sp, #28]
 80170aa:	2b00      	cmp	r3, #0
 80170ac:	bf08      	it	eq
 80170ae:	4623      	moveq	r3, r4
 80170b0:	2c10      	cmp	r4, #16
 80170b2:	9305      	str	r3, [sp, #20]
 80170b4:	46a0      	mov	r8, r4
 80170b6:	bfa8      	it	ge
 80170b8:	f04f 0810 	movge.w	r8, #16
 80170bc:	f7e9 fa22 	bl	8000504 <__aeabi_ui2d>
 80170c0:	2c09      	cmp	r4, #9
 80170c2:	4682      	mov	sl, r0
 80170c4:	468b      	mov	fp, r1
 80170c6:	dc13      	bgt.n	80170f0 <_strtod_l+0x3d0>
 80170c8:	9b06      	ldr	r3, [sp, #24]
 80170ca:	2b00      	cmp	r3, #0
 80170cc:	f43f ae67 	beq.w	8016d9e <_strtod_l+0x7e>
 80170d0:	9b06      	ldr	r3, [sp, #24]
 80170d2:	dd7a      	ble.n	80171ca <_strtod_l+0x4aa>
 80170d4:	2b16      	cmp	r3, #22
 80170d6:	dc61      	bgt.n	801719c <_strtod_l+0x47c>
 80170d8:	4a75      	ldr	r2, [pc, #468]	; (80172b0 <_strtod_l+0x590>)
 80170da:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80170de:	e9de 0100 	ldrd	r0, r1, [lr]
 80170e2:	4652      	mov	r2, sl
 80170e4:	465b      	mov	r3, fp
 80170e6:	f7e9 fa87 	bl	80005f8 <__aeabi_dmul>
 80170ea:	4682      	mov	sl, r0
 80170ec:	468b      	mov	fp, r1
 80170ee:	e656      	b.n	8016d9e <_strtod_l+0x7e>
 80170f0:	4b6f      	ldr	r3, [pc, #444]	; (80172b0 <_strtod_l+0x590>)
 80170f2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80170f6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80170fa:	f7e9 fa7d 	bl	80005f8 <__aeabi_dmul>
 80170fe:	4606      	mov	r6, r0
 8017100:	4628      	mov	r0, r5
 8017102:	460f      	mov	r7, r1
 8017104:	f7e9 f9fe 	bl	8000504 <__aeabi_ui2d>
 8017108:	4602      	mov	r2, r0
 801710a:	460b      	mov	r3, r1
 801710c:	4630      	mov	r0, r6
 801710e:	4639      	mov	r1, r7
 8017110:	f7e9 f8bc 	bl	800028c <__adddf3>
 8017114:	2c0f      	cmp	r4, #15
 8017116:	4682      	mov	sl, r0
 8017118:	468b      	mov	fp, r1
 801711a:	ddd5      	ble.n	80170c8 <_strtod_l+0x3a8>
 801711c:	9b06      	ldr	r3, [sp, #24]
 801711e:	eba4 0808 	sub.w	r8, r4, r8
 8017122:	4498      	add	r8, r3
 8017124:	f1b8 0f00 	cmp.w	r8, #0
 8017128:	f340 8096 	ble.w	8017258 <_strtod_l+0x538>
 801712c:	f018 030f 	ands.w	r3, r8, #15
 8017130:	d00a      	beq.n	8017148 <_strtod_l+0x428>
 8017132:	495f      	ldr	r1, [pc, #380]	; (80172b0 <_strtod_l+0x590>)
 8017134:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8017138:	4652      	mov	r2, sl
 801713a:	465b      	mov	r3, fp
 801713c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017140:	f7e9 fa5a 	bl	80005f8 <__aeabi_dmul>
 8017144:	4682      	mov	sl, r0
 8017146:	468b      	mov	fp, r1
 8017148:	f038 080f 	bics.w	r8, r8, #15
 801714c:	d073      	beq.n	8017236 <_strtod_l+0x516>
 801714e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8017152:	dd47      	ble.n	80171e4 <_strtod_l+0x4c4>
 8017154:	2400      	movs	r4, #0
 8017156:	46a0      	mov	r8, r4
 8017158:	9407      	str	r4, [sp, #28]
 801715a:	9405      	str	r4, [sp, #20]
 801715c:	2322      	movs	r3, #34	; 0x22
 801715e:	f8df b158 	ldr.w	fp, [pc, #344]	; 80172b8 <_strtod_l+0x598>
 8017162:	f8c9 3000 	str.w	r3, [r9]
 8017166:	f04f 0a00 	mov.w	sl, #0
 801716a:	9b07      	ldr	r3, [sp, #28]
 801716c:	2b00      	cmp	r3, #0
 801716e:	f43f ae16 	beq.w	8016d9e <_strtod_l+0x7e>
 8017172:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017174:	4648      	mov	r0, r9
 8017176:	f001 fe2d 	bl	8018dd4 <_Bfree>
 801717a:	9905      	ldr	r1, [sp, #20]
 801717c:	4648      	mov	r0, r9
 801717e:	f001 fe29 	bl	8018dd4 <_Bfree>
 8017182:	4641      	mov	r1, r8
 8017184:	4648      	mov	r0, r9
 8017186:	f001 fe25 	bl	8018dd4 <_Bfree>
 801718a:	9907      	ldr	r1, [sp, #28]
 801718c:	4648      	mov	r0, r9
 801718e:	f001 fe21 	bl	8018dd4 <_Bfree>
 8017192:	4621      	mov	r1, r4
 8017194:	4648      	mov	r0, r9
 8017196:	f001 fe1d 	bl	8018dd4 <_Bfree>
 801719a:	e600      	b.n	8016d9e <_strtod_l+0x7e>
 801719c:	9a06      	ldr	r2, [sp, #24]
 801719e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80171a2:	4293      	cmp	r3, r2
 80171a4:	dbba      	blt.n	801711c <_strtod_l+0x3fc>
 80171a6:	4d42      	ldr	r5, [pc, #264]	; (80172b0 <_strtod_l+0x590>)
 80171a8:	f1c4 040f 	rsb	r4, r4, #15
 80171ac:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80171b0:	4652      	mov	r2, sl
 80171b2:	465b      	mov	r3, fp
 80171b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80171b8:	f7e9 fa1e 	bl	80005f8 <__aeabi_dmul>
 80171bc:	9b06      	ldr	r3, [sp, #24]
 80171be:	1b1c      	subs	r4, r3, r4
 80171c0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80171c4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80171c8:	e78d      	b.n	80170e6 <_strtod_l+0x3c6>
 80171ca:	f113 0f16 	cmn.w	r3, #22
 80171ce:	dba5      	blt.n	801711c <_strtod_l+0x3fc>
 80171d0:	4a37      	ldr	r2, [pc, #220]	; (80172b0 <_strtod_l+0x590>)
 80171d2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80171d6:	e9d2 2300 	ldrd	r2, r3, [r2]
 80171da:	4650      	mov	r0, sl
 80171dc:	4659      	mov	r1, fp
 80171de:	f7e9 fb35 	bl	800084c <__aeabi_ddiv>
 80171e2:	e782      	b.n	80170ea <_strtod_l+0x3ca>
 80171e4:	2300      	movs	r3, #0
 80171e6:	4e33      	ldr	r6, [pc, #204]	; (80172b4 <_strtod_l+0x594>)
 80171e8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80171ec:	4650      	mov	r0, sl
 80171ee:	4659      	mov	r1, fp
 80171f0:	461d      	mov	r5, r3
 80171f2:	f1b8 0f01 	cmp.w	r8, #1
 80171f6:	dc21      	bgt.n	801723c <_strtod_l+0x51c>
 80171f8:	b10b      	cbz	r3, 80171fe <_strtod_l+0x4de>
 80171fa:	4682      	mov	sl, r0
 80171fc:	468b      	mov	fp, r1
 80171fe:	4b2d      	ldr	r3, [pc, #180]	; (80172b4 <_strtod_l+0x594>)
 8017200:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8017204:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8017208:	4652      	mov	r2, sl
 801720a:	465b      	mov	r3, fp
 801720c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8017210:	f7e9 f9f2 	bl	80005f8 <__aeabi_dmul>
 8017214:	4b28      	ldr	r3, [pc, #160]	; (80172b8 <_strtod_l+0x598>)
 8017216:	460a      	mov	r2, r1
 8017218:	400b      	ands	r3, r1
 801721a:	4928      	ldr	r1, [pc, #160]	; (80172bc <_strtod_l+0x59c>)
 801721c:	428b      	cmp	r3, r1
 801721e:	4682      	mov	sl, r0
 8017220:	d898      	bhi.n	8017154 <_strtod_l+0x434>
 8017222:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8017226:	428b      	cmp	r3, r1
 8017228:	bf86      	itte	hi
 801722a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80172c4 <_strtod_l+0x5a4>
 801722e:	f04f 3aff 	movhi.w	sl, #4294967295
 8017232:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8017236:	2300      	movs	r3, #0
 8017238:	9304      	str	r3, [sp, #16]
 801723a:	e077      	b.n	801732c <_strtod_l+0x60c>
 801723c:	f018 0f01 	tst.w	r8, #1
 8017240:	d006      	beq.n	8017250 <_strtod_l+0x530>
 8017242:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8017246:	e9d3 2300 	ldrd	r2, r3, [r3]
 801724a:	f7e9 f9d5 	bl	80005f8 <__aeabi_dmul>
 801724e:	2301      	movs	r3, #1
 8017250:	3501      	adds	r5, #1
 8017252:	ea4f 0868 	mov.w	r8, r8, asr #1
 8017256:	e7cc      	b.n	80171f2 <_strtod_l+0x4d2>
 8017258:	d0ed      	beq.n	8017236 <_strtod_l+0x516>
 801725a:	f1c8 0800 	rsb	r8, r8, #0
 801725e:	f018 020f 	ands.w	r2, r8, #15
 8017262:	d00a      	beq.n	801727a <_strtod_l+0x55a>
 8017264:	4b12      	ldr	r3, [pc, #72]	; (80172b0 <_strtod_l+0x590>)
 8017266:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801726a:	4650      	mov	r0, sl
 801726c:	4659      	mov	r1, fp
 801726e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017272:	f7e9 faeb 	bl	800084c <__aeabi_ddiv>
 8017276:	4682      	mov	sl, r0
 8017278:	468b      	mov	fp, r1
 801727a:	ea5f 1828 	movs.w	r8, r8, asr #4
 801727e:	d0da      	beq.n	8017236 <_strtod_l+0x516>
 8017280:	f1b8 0f1f 	cmp.w	r8, #31
 8017284:	dd20      	ble.n	80172c8 <_strtod_l+0x5a8>
 8017286:	2400      	movs	r4, #0
 8017288:	46a0      	mov	r8, r4
 801728a:	9407      	str	r4, [sp, #28]
 801728c:	9405      	str	r4, [sp, #20]
 801728e:	2322      	movs	r3, #34	; 0x22
 8017290:	f04f 0a00 	mov.w	sl, #0
 8017294:	f04f 0b00 	mov.w	fp, #0
 8017298:	f8c9 3000 	str.w	r3, [r9]
 801729c:	e765      	b.n	801716a <_strtod_l+0x44a>
 801729e:	bf00      	nop
 80172a0:	0801b5ad 	.word	0x0801b5ad
 80172a4:	0801b63b 	.word	0x0801b63b
 80172a8:	0801b5b5 	.word	0x0801b5b5
 80172ac:	0801b5f8 	.word	0x0801b5f8
 80172b0:	0801b678 	.word	0x0801b678
 80172b4:	0801b650 	.word	0x0801b650
 80172b8:	7ff00000 	.word	0x7ff00000
 80172bc:	7ca00000 	.word	0x7ca00000
 80172c0:	fff80000 	.word	0xfff80000
 80172c4:	7fefffff 	.word	0x7fefffff
 80172c8:	f018 0310 	ands.w	r3, r8, #16
 80172cc:	bf18      	it	ne
 80172ce:	236a      	movne	r3, #106	; 0x6a
 80172d0:	4da0      	ldr	r5, [pc, #640]	; (8017554 <_strtod_l+0x834>)
 80172d2:	9304      	str	r3, [sp, #16]
 80172d4:	4650      	mov	r0, sl
 80172d6:	4659      	mov	r1, fp
 80172d8:	2300      	movs	r3, #0
 80172da:	f1b8 0f00 	cmp.w	r8, #0
 80172de:	f300 810a 	bgt.w	80174f6 <_strtod_l+0x7d6>
 80172e2:	b10b      	cbz	r3, 80172e8 <_strtod_l+0x5c8>
 80172e4:	4682      	mov	sl, r0
 80172e6:	468b      	mov	fp, r1
 80172e8:	9b04      	ldr	r3, [sp, #16]
 80172ea:	b1bb      	cbz	r3, 801731c <_strtod_l+0x5fc>
 80172ec:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80172f0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80172f4:	2b00      	cmp	r3, #0
 80172f6:	4659      	mov	r1, fp
 80172f8:	dd10      	ble.n	801731c <_strtod_l+0x5fc>
 80172fa:	2b1f      	cmp	r3, #31
 80172fc:	f340 8107 	ble.w	801750e <_strtod_l+0x7ee>
 8017300:	2b34      	cmp	r3, #52	; 0x34
 8017302:	bfde      	ittt	le
 8017304:	3b20      	suble	r3, #32
 8017306:	f04f 32ff 	movle.w	r2, #4294967295
 801730a:	fa02 f303 	lslle.w	r3, r2, r3
 801730e:	f04f 0a00 	mov.w	sl, #0
 8017312:	bfcc      	ite	gt
 8017314:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8017318:	ea03 0b01 	andle.w	fp, r3, r1
 801731c:	2200      	movs	r2, #0
 801731e:	2300      	movs	r3, #0
 8017320:	4650      	mov	r0, sl
 8017322:	4659      	mov	r1, fp
 8017324:	f7e9 fbd0 	bl	8000ac8 <__aeabi_dcmpeq>
 8017328:	2800      	cmp	r0, #0
 801732a:	d1ac      	bne.n	8017286 <_strtod_l+0x566>
 801732c:	9b07      	ldr	r3, [sp, #28]
 801732e:	9300      	str	r3, [sp, #0]
 8017330:	9a05      	ldr	r2, [sp, #20]
 8017332:	9908      	ldr	r1, [sp, #32]
 8017334:	4623      	mov	r3, r4
 8017336:	4648      	mov	r0, r9
 8017338:	f001 fd9e 	bl	8018e78 <__s2b>
 801733c:	9007      	str	r0, [sp, #28]
 801733e:	2800      	cmp	r0, #0
 8017340:	f43f af08 	beq.w	8017154 <_strtod_l+0x434>
 8017344:	9a06      	ldr	r2, [sp, #24]
 8017346:	9b06      	ldr	r3, [sp, #24]
 8017348:	2a00      	cmp	r2, #0
 801734a:	f1c3 0300 	rsb	r3, r3, #0
 801734e:	bfa8      	it	ge
 8017350:	2300      	movge	r3, #0
 8017352:	930e      	str	r3, [sp, #56]	; 0x38
 8017354:	2400      	movs	r4, #0
 8017356:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801735a:	9316      	str	r3, [sp, #88]	; 0x58
 801735c:	46a0      	mov	r8, r4
 801735e:	9b07      	ldr	r3, [sp, #28]
 8017360:	4648      	mov	r0, r9
 8017362:	6859      	ldr	r1, [r3, #4]
 8017364:	f001 fd02 	bl	8018d6c <_Balloc>
 8017368:	9005      	str	r0, [sp, #20]
 801736a:	2800      	cmp	r0, #0
 801736c:	f43f aef6 	beq.w	801715c <_strtod_l+0x43c>
 8017370:	9b07      	ldr	r3, [sp, #28]
 8017372:	691a      	ldr	r2, [r3, #16]
 8017374:	3202      	adds	r2, #2
 8017376:	f103 010c 	add.w	r1, r3, #12
 801737a:	0092      	lsls	r2, r2, #2
 801737c:	300c      	adds	r0, #12
 801737e:	f7fe fd35 	bl	8015dec <memcpy>
 8017382:	aa1e      	add	r2, sp, #120	; 0x78
 8017384:	a91d      	add	r1, sp, #116	; 0x74
 8017386:	ec4b ab10 	vmov	d0, sl, fp
 801738a:	4648      	mov	r0, r9
 801738c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8017390:	f002 f82e 	bl	80193f0 <__d2b>
 8017394:	901c      	str	r0, [sp, #112]	; 0x70
 8017396:	2800      	cmp	r0, #0
 8017398:	f43f aee0 	beq.w	801715c <_strtod_l+0x43c>
 801739c:	2101      	movs	r1, #1
 801739e:	4648      	mov	r0, r9
 80173a0:	f001 fdf6 	bl	8018f90 <__i2b>
 80173a4:	4680      	mov	r8, r0
 80173a6:	2800      	cmp	r0, #0
 80173a8:	f43f aed8 	beq.w	801715c <_strtod_l+0x43c>
 80173ac:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80173ae:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80173b0:	2e00      	cmp	r6, #0
 80173b2:	bfab      	itete	ge
 80173b4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80173b6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80173b8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80173ba:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80173bc:	bfac      	ite	ge
 80173be:	18f7      	addge	r7, r6, r3
 80173c0:	1b9d      	sublt	r5, r3, r6
 80173c2:	9b04      	ldr	r3, [sp, #16]
 80173c4:	1af6      	subs	r6, r6, r3
 80173c6:	4416      	add	r6, r2
 80173c8:	4b63      	ldr	r3, [pc, #396]	; (8017558 <_strtod_l+0x838>)
 80173ca:	3e01      	subs	r6, #1
 80173cc:	429e      	cmp	r6, r3
 80173ce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80173d2:	f280 80af 	bge.w	8017534 <_strtod_l+0x814>
 80173d6:	1b9b      	subs	r3, r3, r6
 80173d8:	2b1f      	cmp	r3, #31
 80173da:	eba2 0203 	sub.w	r2, r2, r3
 80173de:	f04f 0101 	mov.w	r1, #1
 80173e2:	f300 809b 	bgt.w	801751c <_strtod_l+0x7fc>
 80173e6:	fa01 f303 	lsl.w	r3, r1, r3
 80173ea:	930f      	str	r3, [sp, #60]	; 0x3c
 80173ec:	2300      	movs	r3, #0
 80173ee:	930a      	str	r3, [sp, #40]	; 0x28
 80173f0:	18be      	adds	r6, r7, r2
 80173f2:	9b04      	ldr	r3, [sp, #16]
 80173f4:	42b7      	cmp	r7, r6
 80173f6:	4415      	add	r5, r2
 80173f8:	441d      	add	r5, r3
 80173fa:	463b      	mov	r3, r7
 80173fc:	bfa8      	it	ge
 80173fe:	4633      	movge	r3, r6
 8017400:	42ab      	cmp	r3, r5
 8017402:	bfa8      	it	ge
 8017404:	462b      	movge	r3, r5
 8017406:	2b00      	cmp	r3, #0
 8017408:	bfc2      	ittt	gt
 801740a:	1af6      	subgt	r6, r6, r3
 801740c:	1aed      	subgt	r5, r5, r3
 801740e:	1aff      	subgt	r7, r7, r3
 8017410:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017412:	b1bb      	cbz	r3, 8017444 <_strtod_l+0x724>
 8017414:	4641      	mov	r1, r8
 8017416:	461a      	mov	r2, r3
 8017418:	4648      	mov	r0, r9
 801741a:	f001 fe59 	bl	80190d0 <__pow5mult>
 801741e:	4680      	mov	r8, r0
 8017420:	2800      	cmp	r0, #0
 8017422:	f43f ae9b 	beq.w	801715c <_strtod_l+0x43c>
 8017426:	4601      	mov	r1, r0
 8017428:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801742a:	4648      	mov	r0, r9
 801742c:	f001 fdb9 	bl	8018fa2 <__multiply>
 8017430:	900c      	str	r0, [sp, #48]	; 0x30
 8017432:	2800      	cmp	r0, #0
 8017434:	f43f ae92 	beq.w	801715c <_strtod_l+0x43c>
 8017438:	991c      	ldr	r1, [sp, #112]	; 0x70
 801743a:	4648      	mov	r0, r9
 801743c:	f001 fcca 	bl	8018dd4 <_Bfree>
 8017440:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017442:	931c      	str	r3, [sp, #112]	; 0x70
 8017444:	2e00      	cmp	r6, #0
 8017446:	dc7a      	bgt.n	801753e <_strtod_l+0x81e>
 8017448:	9b06      	ldr	r3, [sp, #24]
 801744a:	2b00      	cmp	r3, #0
 801744c:	dd08      	ble.n	8017460 <_strtod_l+0x740>
 801744e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8017450:	9905      	ldr	r1, [sp, #20]
 8017452:	4648      	mov	r0, r9
 8017454:	f001 fe3c 	bl	80190d0 <__pow5mult>
 8017458:	9005      	str	r0, [sp, #20]
 801745a:	2800      	cmp	r0, #0
 801745c:	f43f ae7e 	beq.w	801715c <_strtod_l+0x43c>
 8017460:	2d00      	cmp	r5, #0
 8017462:	dd08      	ble.n	8017476 <_strtod_l+0x756>
 8017464:	462a      	mov	r2, r5
 8017466:	9905      	ldr	r1, [sp, #20]
 8017468:	4648      	mov	r0, r9
 801746a:	f001 fe7f 	bl	801916c <__lshift>
 801746e:	9005      	str	r0, [sp, #20]
 8017470:	2800      	cmp	r0, #0
 8017472:	f43f ae73 	beq.w	801715c <_strtod_l+0x43c>
 8017476:	2f00      	cmp	r7, #0
 8017478:	dd08      	ble.n	801748c <_strtod_l+0x76c>
 801747a:	4641      	mov	r1, r8
 801747c:	463a      	mov	r2, r7
 801747e:	4648      	mov	r0, r9
 8017480:	f001 fe74 	bl	801916c <__lshift>
 8017484:	4680      	mov	r8, r0
 8017486:	2800      	cmp	r0, #0
 8017488:	f43f ae68 	beq.w	801715c <_strtod_l+0x43c>
 801748c:	9a05      	ldr	r2, [sp, #20]
 801748e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017490:	4648      	mov	r0, r9
 8017492:	f001 fed9 	bl	8019248 <__mdiff>
 8017496:	4604      	mov	r4, r0
 8017498:	2800      	cmp	r0, #0
 801749a:	f43f ae5f 	beq.w	801715c <_strtod_l+0x43c>
 801749e:	68c3      	ldr	r3, [r0, #12]
 80174a0:	930c      	str	r3, [sp, #48]	; 0x30
 80174a2:	2300      	movs	r3, #0
 80174a4:	60c3      	str	r3, [r0, #12]
 80174a6:	4641      	mov	r1, r8
 80174a8:	f001 feb4 	bl	8019214 <__mcmp>
 80174ac:	2800      	cmp	r0, #0
 80174ae:	da55      	bge.n	801755c <_strtod_l+0x83c>
 80174b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80174b2:	b9e3      	cbnz	r3, 80174ee <_strtod_l+0x7ce>
 80174b4:	f1ba 0f00 	cmp.w	sl, #0
 80174b8:	d119      	bne.n	80174ee <_strtod_l+0x7ce>
 80174ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80174be:	b9b3      	cbnz	r3, 80174ee <_strtod_l+0x7ce>
 80174c0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80174c4:	0d1b      	lsrs	r3, r3, #20
 80174c6:	051b      	lsls	r3, r3, #20
 80174c8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80174cc:	d90f      	bls.n	80174ee <_strtod_l+0x7ce>
 80174ce:	6963      	ldr	r3, [r4, #20]
 80174d0:	b913      	cbnz	r3, 80174d8 <_strtod_l+0x7b8>
 80174d2:	6923      	ldr	r3, [r4, #16]
 80174d4:	2b01      	cmp	r3, #1
 80174d6:	dd0a      	ble.n	80174ee <_strtod_l+0x7ce>
 80174d8:	4621      	mov	r1, r4
 80174da:	2201      	movs	r2, #1
 80174dc:	4648      	mov	r0, r9
 80174de:	f001 fe45 	bl	801916c <__lshift>
 80174e2:	4641      	mov	r1, r8
 80174e4:	4604      	mov	r4, r0
 80174e6:	f001 fe95 	bl	8019214 <__mcmp>
 80174ea:	2800      	cmp	r0, #0
 80174ec:	dc67      	bgt.n	80175be <_strtod_l+0x89e>
 80174ee:	9b04      	ldr	r3, [sp, #16]
 80174f0:	2b00      	cmp	r3, #0
 80174f2:	d171      	bne.n	80175d8 <_strtod_l+0x8b8>
 80174f4:	e63d      	b.n	8017172 <_strtod_l+0x452>
 80174f6:	f018 0f01 	tst.w	r8, #1
 80174fa:	d004      	beq.n	8017506 <_strtod_l+0x7e6>
 80174fc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017500:	f7e9 f87a 	bl	80005f8 <__aeabi_dmul>
 8017504:	2301      	movs	r3, #1
 8017506:	ea4f 0868 	mov.w	r8, r8, asr #1
 801750a:	3508      	adds	r5, #8
 801750c:	e6e5      	b.n	80172da <_strtod_l+0x5ba>
 801750e:	f04f 32ff 	mov.w	r2, #4294967295
 8017512:	fa02 f303 	lsl.w	r3, r2, r3
 8017516:	ea03 0a0a 	and.w	sl, r3, sl
 801751a:	e6ff      	b.n	801731c <_strtod_l+0x5fc>
 801751c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8017520:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8017524:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8017528:	36e2      	adds	r6, #226	; 0xe2
 801752a:	fa01 f306 	lsl.w	r3, r1, r6
 801752e:	930a      	str	r3, [sp, #40]	; 0x28
 8017530:	910f      	str	r1, [sp, #60]	; 0x3c
 8017532:	e75d      	b.n	80173f0 <_strtod_l+0x6d0>
 8017534:	2300      	movs	r3, #0
 8017536:	930a      	str	r3, [sp, #40]	; 0x28
 8017538:	2301      	movs	r3, #1
 801753a:	930f      	str	r3, [sp, #60]	; 0x3c
 801753c:	e758      	b.n	80173f0 <_strtod_l+0x6d0>
 801753e:	4632      	mov	r2, r6
 8017540:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017542:	4648      	mov	r0, r9
 8017544:	f001 fe12 	bl	801916c <__lshift>
 8017548:	901c      	str	r0, [sp, #112]	; 0x70
 801754a:	2800      	cmp	r0, #0
 801754c:	f47f af7c 	bne.w	8017448 <_strtod_l+0x728>
 8017550:	e604      	b.n	801715c <_strtod_l+0x43c>
 8017552:	bf00      	nop
 8017554:	0801b610 	.word	0x0801b610
 8017558:	fffffc02 	.word	0xfffffc02
 801755c:	465d      	mov	r5, fp
 801755e:	f040 8086 	bne.w	801766e <_strtod_l+0x94e>
 8017562:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017564:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017568:	b32a      	cbz	r2, 80175b6 <_strtod_l+0x896>
 801756a:	4aaf      	ldr	r2, [pc, #700]	; (8017828 <_strtod_l+0xb08>)
 801756c:	4293      	cmp	r3, r2
 801756e:	d153      	bne.n	8017618 <_strtod_l+0x8f8>
 8017570:	9b04      	ldr	r3, [sp, #16]
 8017572:	4650      	mov	r0, sl
 8017574:	b1d3      	cbz	r3, 80175ac <_strtod_l+0x88c>
 8017576:	4aad      	ldr	r2, [pc, #692]	; (801782c <_strtod_l+0xb0c>)
 8017578:	402a      	ands	r2, r5
 801757a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801757e:	f04f 31ff 	mov.w	r1, #4294967295
 8017582:	d816      	bhi.n	80175b2 <_strtod_l+0x892>
 8017584:	0d12      	lsrs	r2, r2, #20
 8017586:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801758a:	fa01 f303 	lsl.w	r3, r1, r3
 801758e:	4298      	cmp	r0, r3
 8017590:	d142      	bne.n	8017618 <_strtod_l+0x8f8>
 8017592:	4ba7      	ldr	r3, [pc, #668]	; (8017830 <_strtod_l+0xb10>)
 8017594:	429d      	cmp	r5, r3
 8017596:	d102      	bne.n	801759e <_strtod_l+0x87e>
 8017598:	3001      	adds	r0, #1
 801759a:	f43f addf 	beq.w	801715c <_strtod_l+0x43c>
 801759e:	4ba3      	ldr	r3, [pc, #652]	; (801782c <_strtod_l+0xb0c>)
 80175a0:	402b      	ands	r3, r5
 80175a2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80175a6:	f04f 0a00 	mov.w	sl, #0
 80175aa:	e7a0      	b.n	80174ee <_strtod_l+0x7ce>
 80175ac:	f04f 33ff 	mov.w	r3, #4294967295
 80175b0:	e7ed      	b.n	801758e <_strtod_l+0x86e>
 80175b2:	460b      	mov	r3, r1
 80175b4:	e7eb      	b.n	801758e <_strtod_l+0x86e>
 80175b6:	bb7b      	cbnz	r3, 8017618 <_strtod_l+0x8f8>
 80175b8:	f1ba 0f00 	cmp.w	sl, #0
 80175bc:	d12c      	bne.n	8017618 <_strtod_l+0x8f8>
 80175be:	9904      	ldr	r1, [sp, #16]
 80175c0:	4a9a      	ldr	r2, [pc, #616]	; (801782c <_strtod_l+0xb0c>)
 80175c2:	465b      	mov	r3, fp
 80175c4:	b1f1      	cbz	r1, 8017604 <_strtod_l+0x8e4>
 80175c6:	ea02 010b 	and.w	r1, r2, fp
 80175ca:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80175ce:	dc19      	bgt.n	8017604 <_strtod_l+0x8e4>
 80175d0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80175d4:	f77f ae5b 	ble.w	801728e <_strtod_l+0x56e>
 80175d8:	4a96      	ldr	r2, [pc, #600]	; (8017834 <_strtod_l+0xb14>)
 80175da:	2300      	movs	r3, #0
 80175dc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80175e0:	4650      	mov	r0, sl
 80175e2:	4659      	mov	r1, fp
 80175e4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80175e8:	f7e9 f806 	bl	80005f8 <__aeabi_dmul>
 80175ec:	4682      	mov	sl, r0
 80175ee:	468b      	mov	fp, r1
 80175f0:	2900      	cmp	r1, #0
 80175f2:	f47f adbe 	bne.w	8017172 <_strtod_l+0x452>
 80175f6:	2800      	cmp	r0, #0
 80175f8:	f47f adbb 	bne.w	8017172 <_strtod_l+0x452>
 80175fc:	2322      	movs	r3, #34	; 0x22
 80175fe:	f8c9 3000 	str.w	r3, [r9]
 8017602:	e5b6      	b.n	8017172 <_strtod_l+0x452>
 8017604:	4013      	ands	r3, r2
 8017606:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801760a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801760e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8017612:	f04f 3aff 	mov.w	sl, #4294967295
 8017616:	e76a      	b.n	80174ee <_strtod_l+0x7ce>
 8017618:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801761a:	b193      	cbz	r3, 8017642 <_strtod_l+0x922>
 801761c:	422b      	tst	r3, r5
 801761e:	f43f af66 	beq.w	80174ee <_strtod_l+0x7ce>
 8017622:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017624:	9a04      	ldr	r2, [sp, #16]
 8017626:	4650      	mov	r0, sl
 8017628:	4659      	mov	r1, fp
 801762a:	b173      	cbz	r3, 801764a <_strtod_l+0x92a>
 801762c:	f7ff fb5a 	bl	8016ce4 <sulp>
 8017630:	4602      	mov	r2, r0
 8017632:	460b      	mov	r3, r1
 8017634:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017638:	f7e8 fe28 	bl	800028c <__adddf3>
 801763c:	4682      	mov	sl, r0
 801763e:	468b      	mov	fp, r1
 8017640:	e755      	b.n	80174ee <_strtod_l+0x7ce>
 8017642:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017644:	ea13 0f0a 	tst.w	r3, sl
 8017648:	e7e9      	b.n	801761e <_strtod_l+0x8fe>
 801764a:	f7ff fb4b 	bl	8016ce4 <sulp>
 801764e:	4602      	mov	r2, r0
 8017650:	460b      	mov	r3, r1
 8017652:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017656:	f7e8 fe17 	bl	8000288 <__aeabi_dsub>
 801765a:	2200      	movs	r2, #0
 801765c:	2300      	movs	r3, #0
 801765e:	4682      	mov	sl, r0
 8017660:	468b      	mov	fp, r1
 8017662:	f7e9 fa31 	bl	8000ac8 <__aeabi_dcmpeq>
 8017666:	2800      	cmp	r0, #0
 8017668:	f47f ae11 	bne.w	801728e <_strtod_l+0x56e>
 801766c:	e73f      	b.n	80174ee <_strtod_l+0x7ce>
 801766e:	4641      	mov	r1, r8
 8017670:	4620      	mov	r0, r4
 8017672:	f001 ff0c 	bl	801948e <__ratio>
 8017676:	ec57 6b10 	vmov	r6, r7, d0
 801767a:	2200      	movs	r2, #0
 801767c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017680:	ee10 0a10 	vmov	r0, s0
 8017684:	4639      	mov	r1, r7
 8017686:	f7e9 fa33 	bl	8000af0 <__aeabi_dcmple>
 801768a:	2800      	cmp	r0, #0
 801768c:	d077      	beq.n	801777e <_strtod_l+0xa5e>
 801768e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017690:	2b00      	cmp	r3, #0
 8017692:	d04a      	beq.n	801772a <_strtod_l+0xa0a>
 8017694:	4b68      	ldr	r3, [pc, #416]	; (8017838 <_strtod_l+0xb18>)
 8017696:	2200      	movs	r2, #0
 8017698:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801769c:	4f66      	ldr	r7, [pc, #408]	; (8017838 <_strtod_l+0xb18>)
 801769e:	2600      	movs	r6, #0
 80176a0:	4b62      	ldr	r3, [pc, #392]	; (801782c <_strtod_l+0xb0c>)
 80176a2:	402b      	ands	r3, r5
 80176a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80176a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80176a8:	4b64      	ldr	r3, [pc, #400]	; (801783c <_strtod_l+0xb1c>)
 80176aa:	429a      	cmp	r2, r3
 80176ac:	f040 80ce 	bne.w	801784c <_strtod_l+0xb2c>
 80176b0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80176b4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80176b8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80176bc:	ec4b ab10 	vmov	d0, sl, fp
 80176c0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80176c4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80176c8:	f001 fe1c 	bl	8019304 <__ulp>
 80176cc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80176d0:	ec53 2b10 	vmov	r2, r3, d0
 80176d4:	f7e8 ff90 	bl	80005f8 <__aeabi_dmul>
 80176d8:	4652      	mov	r2, sl
 80176da:	465b      	mov	r3, fp
 80176dc:	f7e8 fdd6 	bl	800028c <__adddf3>
 80176e0:	460b      	mov	r3, r1
 80176e2:	4952      	ldr	r1, [pc, #328]	; (801782c <_strtod_l+0xb0c>)
 80176e4:	4a56      	ldr	r2, [pc, #344]	; (8017840 <_strtod_l+0xb20>)
 80176e6:	4019      	ands	r1, r3
 80176e8:	4291      	cmp	r1, r2
 80176ea:	4682      	mov	sl, r0
 80176ec:	d95b      	bls.n	80177a6 <_strtod_l+0xa86>
 80176ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80176f0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80176f4:	4293      	cmp	r3, r2
 80176f6:	d103      	bne.n	8017700 <_strtod_l+0x9e0>
 80176f8:	9b08      	ldr	r3, [sp, #32]
 80176fa:	3301      	adds	r3, #1
 80176fc:	f43f ad2e 	beq.w	801715c <_strtod_l+0x43c>
 8017700:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8017830 <_strtod_l+0xb10>
 8017704:	f04f 3aff 	mov.w	sl, #4294967295
 8017708:	991c      	ldr	r1, [sp, #112]	; 0x70
 801770a:	4648      	mov	r0, r9
 801770c:	f001 fb62 	bl	8018dd4 <_Bfree>
 8017710:	9905      	ldr	r1, [sp, #20]
 8017712:	4648      	mov	r0, r9
 8017714:	f001 fb5e 	bl	8018dd4 <_Bfree>
 8017718:	4641      	mov	r1, r8
 801771a:	4648      	mov	r0, r9
 801771c:	f001 fb5a 	bl	8018dd4 <_Bfree>
 8017720:	4621      	mov	r1, r4
 8017722:	4648      	mov	r0, r9
 8017724:	f001 fb56 	bl	8018dd4 <_Bfree>
 8017728:	e619      	b.n	801735e <_strtod_l+0x63e>
 801772a:	f1ba 0f00 	cmp.w	sl, #0
 801772e:	d11a      	bne.n	8017766 <_strtod_l+0xa46>
 8017730:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017734:	b9eb      	cbnz	r3, 8017772 <_strtod_l+0xa52>
 8017736:	2200      	movs	r2, #0
 8017738:	4b3f      	ldr	r3, [pc, #252]	; (8017838 <_strtod_l+0xb18>)
 801773a:	4630      	mov	r0, r6
 801773c:	4639      	mov	r1, r7
 801773e:	f7e9 f9cd 	bl	8000adc <__aeabi_dcmplt>
 8017742:	b9c8      	cbnz	r0, 8017778 <_strtod_l+0xa58>
 8017744:	4630      	mov	r0, r6
 8017746:	4639      	mov	r1, r7
 8017748:	2200      	movs	r2, #0
 801774a:	4b3e      	ldr	r3, [pc, #248]	; (8017844 <_strtod_l+0xb24>)
 801774c:	f7e8 ff54 	bl	80005f8 <__aeabi_dmul>
 8017750:	4606      	mov	r6, r0
 8017752:	460f      	mov	r7, r1
 8017754:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8017758:	9618      	str	r6, [sp, #96]	; 0x60
 801775a:	9319      	str	r3, [sp, #100]	; 0x64
 801775c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8017760:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8017764:	e79c      	b.n	80176a0 <_strtod_l+0x980>
 8017766:	f1ba 0f01 	cmp.w	sl, #1
 801776a:	d102      	bne.n	8017772 <_strtod_l+0xa52>
 801776c:	2d00      	cmp	r5, #0
 801776e:	f43f ad8e 	beq.w	801728e <_strtod_l+0x56e>
 8017772:	2200      	movs	r2, #0
 8017774:	4b34      	ldr	r3, [pc, #208]	; (8017848 <_strtod_l+0xb28>)
 8017776:	e78f      	b.n	8017698 <_strtod_l+0x978>
 8017778:	2600      	movs	r6, #0
 801777a:	4f32      	ldr	r7, [pc, #200]	; (8017844 <_strtod_l+0xb24>)
 801777c:	e7ea      	b.n	8017754 <_strtod_l+0xa34>
 801777e:	4b31      	ldr	r3, [pc, #196]	; (8017844 <_strtod_l+0xb24>)
 8017780:	4630      	mov	r0, r6
 8017782:	4639      	mov	r1, r7
 8017784:	2200      	movs	r2, #0
 8017786:	f7e8 ff37 	bl	80005f8 <__aeabi_dmul>
 801778a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801778c:	4606      	mov	r6, r0
 801778e:	460f      	mov	r7, r1
 8017790:	b933      	cbnz	r3, 80177a0 <_strtod_l+0xa80>
 8017792:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017796:	9010      	str	r0, [sp, #64]	; 0x40
 8017798:	9311      	str	r3, [sp, #68]	; 0x44
 801779a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801779e:	e7df      	b.n	8017760 <_strtod_l+0xa40>
 80177a0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80177a4:	e7f9      	b.n	801779a <_strtod_l+0xa7a>
 80177a6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80177aa:	9b04      	ldr	r3, [sp, #16]
 80177ac:	2b00      	cmp	r3, #0
 80177ae:	d1ab      	bne.n	8017708 <_strtod_l+0x9e8>
 80177b0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80177b4:	0d1b      	lsrs	r3, r3, #20
 80177b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80177b8:	051b      	lsls	r3, r3, #20
 80177ba:	429a      	cmp	r2, r3
 80177bc:	465d      	mov	r5, fp
 80177be:	d1a3      	bne.n	8017708 <_strtod_l+0x9e8>
 80177c0:	4639      	mov	r1, r7
 80177c2:	4630      	mov	r0, r6
 80177c4:	f7e9 f9c8 	bl	8000b58 <__aeabi_d2iz>
 80177c8:	f7e8 feac 	bl	8000524 <__aeabi_i2d>
 80177cc:	460b      	mov	r3, r1
 80177ce:	4602      	mov	r2, r0
 80177d0:	4639      	mov	r1, r7
 80177d2:	4630      	mov	r0, r6
 80177d4:	f7e8 fd58 	bl	8000288 <__aeabi_dsub>
 80177d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80177da:	4606      	mov	r6, r0
 80177dc:	460f      	mov	r7, r1
 80177de:	b933      	cbnz	r3, 80177ee <_strtod_l+0xace>
 80177e0:	f1ba 0f00 	cmp.w	sl, #0
 80177e4:	d103      	bne.n	80177ee <_strtod_l+0xace>
 80177e6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80177ea:	2d00      	cmp	r5, #0
 80177ec:	d06d      	beq.n	80178ca <_strtod_l+0xbaa>
 80177ee:	a30a      	add	r3, pc, #40	; (adr r3, 8017818 <_strtod_l+0xaf8>)
 80177f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177f4:	4630      	mov	r0, r6
 80177f6:	4639      	mov	r1, r7
 80177f8:	f7e9 f970 	bl	8000adc <__aeabi_dcmplt>
 80177fc:	2800      	cmp	r0, #0
 80177fe:	f47f acb8 	bne.w	8017172 <_strtod_l+0x452>
 8017802:	a307      	add	r3, pc, #28	; (adr r3, 8017820 <_strtod_l+0xb00>)
 8017804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017808:	4630      	mov	r0, r6
 801780a:	4639      	mov	r1, r7
 801780c:	f7e9 f984 	bl	8000b18 <__aeabi_dcmpgt>
 8017810:	2800      	cmp	r0, #0
 8017812:	f43f af79 	beq.w	8017708 <_strtod_l+0x9e8>
 8017816:	e4ac      	b.n	8017172 <_strtod_l+0x452>
 8017818:	94a03595 	.word	0x94a03595
 801781c:	3fdfffff 	.word	0x3fdfffff
 8017820:	35afe535 	.word	0x35afe535
 8017824:	3fe00000 	.word	0x3fe00000
 8017828:	000fffff 	.word	0x000fffff
 801782c:	7ff00000 	.word	0x7ff00000
 8017830:	7fefffff 	.word	0x7fefffff
 8017834:	39500000 	.word	0x39500000
 8017838:	3ff00000 	.word	0x3ff00000
 801783c:	7fe00000 	.word	0x7fe00000
 8017840:	7c9fffff 	.word	0x7c9fffff
 8017844:	3fe00000 	.word	0x3fe00000
 8017848:	bff00000 	.word	0xbff00000
 801784c:	9b04      	ldr	r3, [sp, #16]
 801784e:	b333      	cbz	r3, 801789e <_strtod_l+0xb7e>
 8017850:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017852:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8017856:	d822      	bhi.n	801789e <_strtod_l+0xb7e>
 8017858:	a327      	add	r3, pc, #156	; (adr r3, 80178f8 <_strtod_l+0xbd8>)
 801785a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801785e:	4630      	mov	r0, r6
 8017860:	4639      	mov	r1, r7
 8017862:	f7e9 f945 	bl	8000af0 <__aeabi_dcmple>
 8017866:	b1a0      	cbz	r0, 8017892 <_strtod_l+0xb72>
 8017868:	4639      	mov	r1, r7
 801786a:	4630      	mov	r0, r6
 801786c:	f7e9 f99c 	bl	8000ba8 <__aeabi_d2uiz>
 8017870:	2800      	cmp	r0, #0
 8017872:	bf08      	it	eq
 8017874:	2001      	moveq	r0, #1
 8017876:	f7e8 fe45 	bl	8000504 <__aeabi_ui2d>
 801787a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801787c:	4606      	mov	r6, r0
 801787e:	460f      	mov	r7, r1
 8017880:	bb03      	cbnz	r3, 80178c4 <_strtod_l+0xba4>
 8017882:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017886:	9012      	str	r0, [sp, #72]	; 0x48
 8017888:	9313      	str	r3, [sp, #76]	; 0x4c
 801788a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801788e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8017892:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017894:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017896:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801789a:	1a9b      	subs	r3, r3, r2
 801789c:	930b      	str	r3, [sp, #44]	; 0x2c
 801789e:	ed9d 0b08 	vldr	d0, [sp, #32]
 80178a2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80178a6:	f001 fd2d 	bl	8019304 <__ulp>
 80178aa:	4650      	mov	r0, sl
 80178ac:	ec53 2b10 	vmov	r2, r3, d0
 80178b0:	4659      	mov	r1, fp
 80178b2:	f7e8 fea1 	bl	80005f8 <__aeabi_dmul>
 80178b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80178ba:	f7e8 fce7 	bl	800028c <__adddf3>
 80178be:	4682      	mov	sl, r0
 80178c0:	468b      	mov	fp, r1
 80178c2:	e772      	b.n	80177aa <_strtod_l+0xa8a>
 80178c4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80178c8:	e7df      	b.n	801788a <_strtod_l+0xb6a>
 80178ca:	a30d      	add	r3, pc, #52	; (adr r3, 8017900 <_strtod_l+0xbe0>)
 80178cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178d0:	f7e9 f904 	bl	8000adc <__aeabi_dcmplt>
 80178d4:	e79c      	b.n	8017810 <_strtod_l+0xaf0>
 80178d6:	2300      	movs	r3, #0
 80178d8:	930d      	str	r3, [sp, #52]	; 0x34
 80178da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80178dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80178de:	6013      	str	r3, [r2, #0]
 80178e0:	f7ff ba61 	b.w	8016da6 <_strtod_l+0x86>
 80178e4:	2b65      	cmp	r3, #101	; 0x65
 80178e6:	f04f 0200 	mov.w	r2, #0
 80178ea:	f43f ab4e 	beq.w	8016f8a <_strtod_l+0x26a>
 80178ee:	2101      	movs	r1, #1
 80178f0:	4614      	mov	r4, r2
 80178f2:	9104      	str	r1, [sp, #16]
 80178f4:	f7ff bacb 	b.w	8016e8e <_strtod_l+0x16e>
 80178f8:	ffc00000 	.word	0xffc00000
 80178fc:	41dfffff 	.word	0x41dfffff
 8017900:	94a03595 	.word	0x94a03595
 8017904:	3fcfffff 	.word	0x3fcfffff

08017908 <_strtod_r>:
 8017908:	4b05      	ldr	r3, [pc, #20]	; (8017920 <_strtod_r+0x18>)
 801790a:	681b      	ldr	r3, [r3, #0]
 801790c:	b410      	push	{r4}
 801790e:	6a1b      	ldr	r3, [r3, #32]
 8017910:	4c04      	ldr	r4, [pc, #16]	; (8017924 <_strtod_r+0x1c>)
 8017912:	2b00      	cmp	r3, #0
 8017914:	bf08      	it	eq
 8017916:	4623      	moveq	r3, r4
 8017918:	f85d 4b04 	ldr.w	r4, [sp], #4
 801791c:	f7ff ba00 	b.w	8016d20 <_strtod_l>
 8017920:	200009ac 	.word	0x200009ac
 8017924:	20000a10 	.word	0x20000a10

08017928 <_strtol_l.isra.0>:
 8017928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801792c:	4680      	mov	r8, r0
 801792e:	4689      	mov	r9, r1
 8017930:	4692      	mov	sl, r2
 8017932:	461e      	mov	r6, r3
 8017934:	460f      	mov	r7, r1
 8017936:	463d      	mov	r5, r7
 8017938:	9808      	ldr	r0, [sp, #32]
 801793a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801793e:	f001 f9ed 	bl	8018d1c <__locale_ctype_ptr_l>
 8017942:	4420      	add	r0, r4
 8017944:	7843      	ldrb	r3, [r0, #1]
 8017946:	f013 0308 	ands.w	r3, r3, #8
 801794a:	d132      	bne.n	80179b2 <_strtol_l.isra.0+0x8a>
 801794c:	2c2d      	cmp	r4, #45	; 0x2d
 801794e:	d132      	bne.n	80179b6 <_strtol_l.isra.0+0x8e>
 8017950:	787c      	ldrb	r4, [r7, #1]
 8017952:	1cbd      	adds	r5, r7, #2
 8017954:	2201      	movs	r2, #1
 8017956:	2e00      	cmp	r6, #0
 8017958:	d05d      	beq.n	8017a16 <_strtol_l.isra.0+0xee>
 801795a:	2e10      	cmp	r6, #16
 801795c:	d109      	bne.n	8017972 <_strtol_l.isra.0+0x4a>
 801795e:	2c30      	cmp	r4, #48	; 0x30
 8017960:	d107      	bne.n	8017972 <_strtol_l.isra.0+0x4a>
 8017962:	782b      	ldrb	r3, [r5, #0]
 8017964:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017968:	2b58      	cmp	r3, #88	; 0x58
 801796a:	d14f      	bne.n	8017a0c <_strtol_l.isra.0+0xe4>
 801796c:	786c      	ldrb	r4, [r5, #1]
 801796e:	2610      	movs	r6, #16
 8017970:	3502      	adds	r5, #2
 8017972:	2a00      	cmp	r2, #0
 8017974:	bf14      	ite	ne
 8017976:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801797a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801797e:	2700      	movs	r7, #0
 8017980:	fbb1 fcf6 	udiv	ip, r1, r6
 8017984:	4638      	mov	r0, r7
 8017986:	fb06 1e1c 	mls	lr, r6, ip, r1
 801798a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801798e:	2b09      	cmp	r3, #9
 8017990:	d817      	bhi.n	80179c2 <_strtol_l.isra.0+0x9a>
 8017992:	461c      	mov	r4, r3
 8017994:	42a6      	cmp	r6, r4
 8017996:	dd23      	ble.n	80179e0 <_strtol_l.isra.0+0xb8>
 8017998:	1c7b      	adds	r3, r7, #1
 801799a:	d007      	beq.n	80179ac <_strtol_l.isra.0+0x84>
 801799c:	4584      	cmp	ip, r0
 801799e:	d31c      	bcc.n	80179da <_strtol_l.isra.0+0xb2>
 80179a0:	d101      	bne.n	80179a6 <_strtol_l.isra.0+0x7e>
 80179a2:	45a6      	cmp	lr, r4
 80179a4:	db19      	blt.n	80179da <_strtol_l.isra.0+0xb2>
 80179a6:	fb00 4006 	mla	r0, r0, r6, r4
 80179aa:	2701      	movs	r7, #1
 80179ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80179b0:	e7eb      	b.n	801798a <_strtol_l.isra.0+0x62>
 80179b2:	462f      	mov	r7, r5
 80179b4:	e7bf      	b.n	8017936 <_strtol_l.isra.0+0xe>
 80179b6:	2c2b      	cmp	r4, #43	; 0x2b
 80179b8:	bf04      	itt	eq
 80179ba:	1cbd      	addeq	r5, r7, #2
 80179bc:	787c      	ldrbeq	r4, [r7, #1]
 80179be:	461a      	mov	r2, r3
 80179c0:	e7c9      	b.n	8017956 <_strtol_l.isra.0+0x2e>
 80179c2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80179c6:	2b19      	cmp	r3, #25
 80179c8:	d801      	bhi.n	80179ce <_strtol_l.isra.0+0xa6>
 80179ca:	3c37      	subs	r4, #55	; 0x37
 80179cc:	e7e2      	b.n	8017994 <_strtol_l.isra.0+0x6c>
 80179ce:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80179d2:	2b19      	cmp	r3, #25
 80179d4:	d804      	bhi.n	80179e0 <_strtol_l.isra.0+0xb8>
 80179d6:	3c57      	subs	r4, #87	; 0x57
 80179d8:	e7dc      	b.n	8017994 <_strtol_l.isra.0+0x6c>
 80179da:	f04f 37ff 	mov.w	r7, #4294967295
 80179de:	e7e5      	b.n	80179ac <_strtol_l.isra.0+0x84>
 80179e0:	1c7b      	adds	r3, r7, #1
 80179e2:	d108      	bne.n	80179f6 <_strtol_l.isra.0+0xce>
 80179e4:	2322      	movs	r3, #34	; 0x22
 80179e6:	f8c8 3000 	str.w	r3, [r8]
 80179ea:	4608      	mov	r0, r1
 80179ec:	f1ba 0f00 	cmp.w	sl, #0
 80179f0:	d107      	bne.n	8017a02 <_strtol_l.isra.0+0xda>
 80179f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80179f6:	b102      	cbz	r2, 80179fa <_strtol_l.isra.0+0xd2>
 80179f8:	4240      	negs	r0, r0
 80179fa:	f1ba 0f00 	cmp.w	sl, #0
 80179fe:	d0f8      	beq.n	80179f2 <_strtol_l.isra.0+0xca>
 8017a00:	b10f      	cbz	r7, 8017a06 <_strtol_l.isra.0+0xde>
 8017a02:	f105 39ff 	add.w	r9, r5, #4294967295
 8017a06:	f8ca 9000 	str.w	r9, [sl]
 8017a0a:	e7f2      	b.n	80179f2 <_strtol_l.isra.0+0xca>
 8017a0c:	2430      	movs	r4, #48	; 0x30
 8017a0e:	2e00      	cmp	r6, #0
 8017a10:	d1af      	bne.n	8017972 <_strtol_l.isra.0+0x4a>
 8017a12:	2608      	movs	r6, #8
 8017a14:	e7ad      	b.n	8017972 <_strtol_l.isra.0+0x4a>
 8017a16:	2c30      	cmp	r4, #48	; 0x30
 8017a18:	d0a3      	beq.n	8017962 <_strtol_l.isra.0+0x3a>
 8017a1a:	260a      	movs	r6, #10
 8017a1c:	e7a9      	b.n	8017972 <_strtol_l.isra.0+0x4a>
	...

08017a20 <_strtol_r>:
 8017a20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017a22:	4c06      	ldr	r4, [pc, #24]	; (8017a3c <_strtol_r+0x1c>)
 8017a24:	4d06      	ldr	r5, [pc, #24]	; (8017a40 <_strtol_r+0x20>)
 8017a26:	6824      	ldr	r4, [r4, #0]
 8017a28:	6a24      	ldr	r4, [r4, #32]
 8017a2a:	2c00      	cmp	r4, #0
 8017a2c:	bf08      	it	eq
 8017a2e:	462c      	moveq	r4, r5
 8017a30:	9400      	str	r4, [sp, #0]
 8017a32:	f7ff ff79 	bl	8017928 <_strtol_l.isra.0>
 8017a36:	b003      	add	sp, #12
 8017a38:	bd30      	pop	{r4, r5, pc}
 8017a3a:	bf00      	nop
 8017a3c:	200009ac 	.word	0x200009ac
 8017a40:	20000a10 	.word	0x20000a10

08017a44 <quorem>:
 8017a44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a48:	6903      	ldr	r3, [r0, #16]
 8017a4a:	690c      	ldr	r4, [r1, #16]
 8017a4c:	42a3      	cmp	r3, r4
 8017a4e:	4680      	mov	r8, r0
 8017a50:	f2c0 8082 	blt.w	8017b58 <quorem+0x114>
 8017a54:	3c01      	subs	r4, #1
 8017a56:	f101 0714 	add.w	r7, r1, #20
 8017a5a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8017a5e:	f100 0614 	add.w	r6, r0, #20
 8017a62:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8017a66:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8017a6a:	eb06 030c 	add.w	r3, r6, ip
 8017a6e:	3501      	adds	r5, #1
 8017a70:	eb07 090c 	add.w	r9, r7, ip
 8017a74:	9301      	str	r3, [sp, #4]
 8017a76:	fbb0 f5f5 	udiv	r5, r0, r5
 8017a7a:	b395      	cbz	r5, 8017ae2 <quorem+0x9e>
 8017a7c:	f04f 0a00 	mov.w	sl, #0
 8017a80:	4638      	mov	r0, r7
 8017a82:	46b6      	mov	lr, r6
 8017a84:	46d3      	mov	fp, sl
 8017a86:	f850 2b04 	ldr.w	r2, [r0], #4
 8017a8a:	b293      	uxth	r3, r2
 8017a8c:	fb05 a303 	mla	r3, r5, r3, sl
 8017a90:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017a94:	b29b      	uxth	r3, r3
 8017a96:	ebab 0303 	sub.w	r3, fp, r3
 8017a9a:	0c12      	lsrs	r2, r2, #16
 8017a9c:	f8de b000 	ldr.w	fp, [lr]
 8017aa0:	fb05 a202 	mla	r2, r5, r2, sl
 8017aa4:	fa13 f38b 	uxtah	r3, r3, fp
 8017aa8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8017aac:	fa1f fb82 	uxth.w	fp, r2
 8017ab0:	f8de 2000 	ldr.w	r2, [lr]
 8017ab4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8017ab8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017abc:	b29b      	uxth	r3, r3
 8017abe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017ac2:	4581      	cmp	r9, r0
 8017ac4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8017ac8:	f84e 3b04 	str.w	r3, [lr], #4
 8017acc:	d2db      	bcs.n	8017a86 <quorem+0x42>
 8017ace:	f856 300c 	ldr.w	r3, [r6, ip]
 8017ad2:	b933      	cbnz	r3, 8017ae2 <quorem+0x9e>
 8017ad4:	9b01      	ldr	r3, [sp, #4]
 8017ad6:	3b04      	subs	r3, #4
 8017ad8:	429e      	cmp	r6, r3
 8017ada:	461a      	mov	r2, r3
 8017adc:	d330      	bcc.n	8017b40 <quorem+0xfc>
 8017ade:	f8c8 4010 	str.w	r4, [r8, #16]
 8017ae2:	4640      	mov	r0, r8
 8017ae4:	f001 fb96 	bl	8019214 <__mcmp>
 8017ae8:	2800      	cmp	r0, #0
 8017aea:	db25      	blt.n	8017b38 <quorem+0xf4>
 8017aec:	3501      	adds	r5, #1
 8017aee:	4630      	mov	r0, r6
 8017af0:	f04f 0c00 	mov.w	ip, #0
 8017af4:	f857 2b04 	ldr.w	r2, [r7], #4
 8017af8:	f8d0 e000 	ldr.w	lr, [r0]
 8017afc:	b293      	uxth	r3, r2
 8017afe:	ebac 0303 	sub.w	r3, ip, r3
 8017b02:	0c12      	lsrs	r2, r2, #16
 8017b04:	fa13 f38e 	uxtah	r3, r3, lr
 8017b08:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8017b0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017b10:	b29b      	uxth	r3, r3
 8017b12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017b16:	45b9      	cmp	r9, r7
 8017b18:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017b1c:	f840 3b04 	str.w	r3, [r0], #4
 8017b20:	d2e8      	bcs.n	8017af4 <quorem+0xb0>
 8017b22:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8017b26:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8017b2a:	b92a      	cbnz	r2, 8017b38 <quorem+0xf4>
 8017b2c:	3b04      	subs	r3, #4
 8017b2e:	429e      	cmp	r6, r3
 8017b30:	461a      	mov	r2, r3
 8017b32:	d30b      	bcc.n	8017b4c <quorem+0x108>
 8017b34:	f8c8 4010 	str.w	r4, [r8, #16]
 8017b38:	4628      	mov	r0, r5
 8017b3a:	b003      	add	sp, #12
 8017b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b40:	6812      	ldr	r2, [r2, #0]
 8017b42:	3b04      	subs	r3, #4
 8017b44:	2a00      	cmp	r2, #0
 8017b46:	d1ca      	bne.n	8017ade <quorem+0x9a>
 8017b48:	3c01      	subs	r4, #1
 8017b4a:	e7c5      	b.n	8017ad8 <quorem+0x94>
 8017b4c:	6812      	ldr	r2, [r2, #0]
 8017b4e:	3b04      	subs	r3, #4
 8017b50:	2a00      	cmp	r2, #0
 8017b52:	d1ef      	bne.n	8017b34 <quorem+0xf0>
 8017b54:	3c01      	subs	r4, #1
 8017b56:	e7ea      	b.n	8017b2e <quorem+0xea>
 8017b58:	2000      	movs	r0, #0
 8017b5a:	e7ee      	b.n	8017b3a <quorem+0xf6>
 8017b5c:	0000      	movs	r0, r0
	...

08017b60 <_dtoa_r>:
 8017b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b64:	ec57 6b10 	vmov	r6, r7, d0
 8017b68:	b097      	sub	sp, #92	; 0x5c
 8017b6a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017b6c:	9106      	str	r1, [sp, #24]
 8017b6e:	4604      	mov	r4, r0
 8017b70:	920b      	str	r2, [sp, #44]	; 0x2c
 8017b72:	9312      	str	r3, [sp, #72]	; 0x48
 8017b74:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017b78:	e9cd 6700 	strd	r6, r7, [sp]
 8017b7c:	b93d      	cbnz	r5, 8017b8e <_dtoa_r+0x2e>
 8017b7e:	2010      	movs	r0, #16
 8017b80:	f7fe f924 	bl	8015dcc <malloc>
 8017b84:	6260      	str	r0, [r4, #36]	; 0x24
 8017b86:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017b8a:	6005      	str	r5, [r0, #0]
 8017b8c:	60c5      	str	r5, [r0, #12]
 8017b8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017b90:	6819      	ldr	r1, [r3, #0]
 8017b92:	b151      	cbz	r1, 8017baa <_dtoa_r+0x4a>
 8017b94:	685a      	ldr	r2, [r3, #4]
 8017b96:	604a      	str	r2, [r1, #4]
 8017b98:	2301      	movs	r3, #1
 8017b9a:	4093      	lsls	r3, r2
 8017b9c:	608b      	str	r3, [r1, #8]
 8017b9e:	4620      	mov	r0, r4
 8017ba0:	f001 f918 	bl	8018dd4 <_Bfree>
 8017ba4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017ba6:	2200      	movs	r2, #0
 8017ba8:	601a      	str	r2, [r3, #0]
 8017baa:	1e3b      	subs	r3, r7, #0
 8017bac:	bfbb      	ittet	lt
 8017bae:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017bb2:	9301      	strlt	r3, [sp, #4]
 8017bb4:	2300      	movge	r3, #0
 8017bb6:	2201      	movlt	r2, #1
 8017bb8:	bfac      	ite	ge
 8017bba:	f8c8 3000 	strge.w	r3, [r8]
 8017bbe:	f8c8 2000 	strlt.w	r2, [r8]
 8017bc2:	4baf      	ldr	r3, [pc, #700]	; (8017e80 <_dtoa_r+0x320>)
 8017bc4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8017bc8:	ea33 0308 	bics.w	r3, r3, r8
 8017bcc:	d114      	bne.n	8017bf8 <_dtoa_r+0x98>
 8017bce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017bd0:	f242 730f 	movw	r3, #9999	; 0x270f
 8017bd4:	6013      	str	r3, [r2, #0]
 8017bd6:	9b00      	ldr	r3, [sp, #0]
 8017bd8:	b923      	cbnz	r3, 8017be4 <_dtoa_r+0x84>
 8017bda:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8017bde:	2800      	cmp	r0, #0
 8017be0:	f000 8542 	beq.w	8018668 <_dtoa_r+0xb08>
 8017be4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017be6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8017e94 <_dtoa_r+0x334>
 8017bea:	2b00      	cmp	r3, #0
 8017bec:	f000 8544 	beq.w	8018678 <_dtoa_r+0xb18>
 8017bf0:	f10b 0303 	add.w	r3, fp, #3
 8017bf4:	f000 bd3e 	b.w	8018674 <_dtoa_r+0xb14>
 8017bf8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017bfc:	2200      	movs	r2, #0
 8017bfe:	2300      	movs	r3, #0
 8017c00:	4630      	mov	r0, r6
 8017c02:	4639      	mov	r1, r7
 8017c04:	f7e8 ff60 	bl	8000ac8 <__aeabi_dcmpeq>
 8017c08:	4681      	mov	r9, r0
 8017c0a:	b168      	cbz	r0, 8017c28 <_dtoa_r+0xc8>
 8017c0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017c0e:	2301      	movs	r3, #1
 8017c10:	6013      	str	r3, [r2, #0]
 8017c12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017c14:	2b00      	cmp	r3, #0
 8017c16:	f000 8524 	beq.w	8018662 <_dtoa_r+0xb02>
 8017c1a:	4b9a      	ldr	r3, [pc, #616]	; (8017e84 <_dtoa_r+0x324>)
 8017c1c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017c1e:	f103 3bff 	add.w	fp, r3, #4294967295
 8017c22:	6013      	str	r3, [r2, #0]
 8017c24:	f000 bd28 	b.w	8018678 <_dtoa_r+0xb18>
 8017c28:	aa14      	add	r2, sp, #80	; 0x50
 8017c2a:	a915      	add	r1, sp, #84	; 0x54
 8017c2c:	ec47 6b10 	vmov	d0, r6, r7
 8017c30:	4620      	mov	r0, r4
 8017c32:	f001 fbdd 	bl	80193f0 <__d2b>
 8017c36:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8017c3a:	9004      	str	r0, [sp, #16]
 8017c3c:	2d00      	cmp	r5, #0
 8017c3e:	d07c      	beq.n	8017d3a <_dtoa_r+0x1da>
 8017c40:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8017c44:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8017c48:	46b2      	mov	sl, r6
 8017c4a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8017c4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8017c52:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8017c56:	2200      	movs	r2, #0
 8017c58:	4b8b      	ldr	r3, [pc, #556]	; (8017e88 <_dtoa_r+0x328>)
 8017c5a:	4650      	mov	r0, sl
 8017c5c:	4659      	mov	r1, fp
 8017c5e:	f7e8 fb13 	bl	8000288 <__aeabi_dsub>
 8017c62:	a381      	add	r3, pc, #516	; (adr r3, 8017e68 <_dtoa_r+0x308>)
 8017c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c68:	f7e8 fcc6 	bl	80005f8 <__aeabi_dmul>
 8017c6c:	a380      	add	r3, pc, #512	; (adr r3, 8017e70 <_dtoa_r+0x310>)
 8017c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c72:	f7e8 fb0b 	bl	800028c <__adddf3>
 8017c76:	4606      	mov	r6, r0
 8017c78:	4628      	mov	r0, r5
 8017c7a:	460f      	mov	r7, r1
 8017c7c:	f7e8 fc52 	bl	8000524 <__aeabi_i2d>
 8017c80:	a37d      	add	r3, pc, #500	; (adr r3, 8017e78 <_dtoa_r+0x318>)
 8017c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c86:	f7e8 fcb7 	bl	80005f8 <__aeabi_dmul>
 8017c8a:	4602      	mov	r2, r0
 8017c8c:	460b      	mov	r3, r1
 8017c8e:	4630      	mov	r0, r6
 8017c90:	4639      	mov	r1, r7
 8017c92:	f7e8 fafb 	bl	800028c <__adddf3>
 8017c96:	4606      	mov	r6, r0
 8017c98:	460f      	mov	r7, r1
 8017c9a:	f7e8 ff5d 	bl	8000b58 <__aeabi_d2iz>
 8017c9e:	2200      	movs	r2, #0
 8017ca0:	4682      	mov	sl, r0
 8017ca2:	2300      	movs	r3, #0
 8017ca4:	4630      	mov	r0, r6
 8017ca6:	4639      	mov	r1, r7
 8017ca8:	f7e8 ff18 	bl	8000adc <__aeabi_dcmplt>
 8017cac:	b148      	cbz	r0, 8017cc2 <_dtoa_r+0x162>
 8017cae:	4650      	mov	r0, sl
 8017cb0:	f7e8 fc38 	bl	8000524 <__aeabi_i2d>
 8017cb4:	4632      	mov	r2, r6
 8017cb6:	463b      	mov	r3, r7
 8017cb8:	f7e8 ff06 	bl	8000ac8 <__aeabi_dcmpeq>
 8017cbc:	b908      	cbnz	r0, 8017cc2 <_dtoa_r+0x162>
 8017cbe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017cc2:	f1ba 0f16 	cmp.w	sl, #22
 8017cc6:	d859      	bhi.n	8017d7c <_dtoa_r+0x21c>
 8017cc8:	4970      	ldr	r1, [pc, #448]	; (8017e8c <_dtoa_r+0x32c>)
 8017cca:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8017cce:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017cd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017cd6:	f7e8 ff1f 	bl	8000b18 <__aeabi_dcmpgt>
 8017cda:	2800      	cmp	r0, #0
 8017cdc:	d050      	beq.n	8017d80 <_dtoa_r+0x220>
 8017cde:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017ce2:	2300      	movs	r3, #0
 8017ce4:	930f      	str	r3, [sp, #60]	; 0x3c
 8017ce6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017ce8:	1b5d      	subs	r5, r3, r5
 8017cea:	f1b5 0801 	subs.w	r8, r5, #1
 8017cee:	bf49      	itett	mi
 8017cf0:	f1c5 0301 	rsbmi	r3, r5, #1
 8017cf4:	2300      	movpl	r3, #0
 8017cf6:	9305      	strmi	r3, [sp, #20]
 8017cf8:	f04f 0800 	movmi.w	r8, #0
 8017cfc:	bf58      	it	pl
 8017cfe:	9305      	strpl	r3, [sp, #20]
 8017d00:	f1ba 0f00 	cmp.w	sl, #0
 8017d04:	db3e      	blt.n	8017d84 <_dtoa_r+0x224>
 8017d06:	2300      	movs	r3, #0
 8017d08:	44d0      	add	r8, sl
 8017d0a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8017d0e:	9307      	str	r3, [sp, #28]
 8017d10:	9b06      	ldr	r3, [sp, #24]
 8017d12:	2b09      	cmp	r3, #9
 8017d14:	f200 8090 	bhi.w	8017e38 <_dtoa_r+0x2d8>
 8017d18:	2b05      	cmp	r3, #5
 8017d1a:	bfc4      	itt	gt
 8017d1c:	3b04      	subgt	r3, #4
 8017d1e:	9306      	strgt	r3, [sp, #24]
 8017d20:	9b06      	ldr	r3, [sp, #24]
 8017d22:	f1a3 0302 	sub.w	r3, r3, #2
 8017d26:	bfcc      	ite	gt
 8017d28:	2500      	movgt	r5, #0
 8017d2a:	2501      	movle	r5, #1
 8017d2c:	2b03      	cmp	r3, #3
 8017d2e:	f200 808f 	bhi.w	8017e50 <_dtoa_r+0x2f0>
 8017d32:	e8df f003 	tbb	[pc, r3]
 8017d36:	7f7d      	.short	0x7f7d
 8017d38:	7131      	.short	0x7131
 8017d3a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8017d3e:	441d      	add	r5, r3
 8017d40:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8017d44:	2820      	cmp	r0, #32
 8017d46:	dd13      	ble.n	8017d70 <_dtoa_r+0x210>
 8017d48:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8017d4c:	9b00      	ldr	r3, [sp, #0]
 8017d4e:	fa08 f800 	lsl.w	r8, r8, r0
 8017d52:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8017d56:	fa23 f000 	lsr.w	r0, r3, r0
 8017d5a:	ea48 0000 	orr.w	r0, r8, r0
 8017d5e:	f7e8 fbd1 	bl	8000504 <__aeabi_ui2d>
 8017d62:	2301      	movs	r3, #1
 8017d64:	4682      	mov	sl, r0
 8017d66:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8017d6a:	3d01      	subs	r5, #1
 8017d6c:	9313      	str	r3, [sp, #76]	; 0x4c
 8017d6e:	e772      	b.n	8017c56 <_dtoa_r+0xf6>
 8017d70:	9b00      	ldr	r3, [sp, #0]
 8017d72:	f1c0 0020 	rsb	r0, r0, #32
 8017d76:	fa03 f000 	lsl.w	r0, r3, r0
 8017d7a:	e7f0      	b.n	8017d5e <_dtoa_r+0x1fe>
 8017d7c:	2301      	movs	r3, #1
 8017d7e:	e7b1      	b.n	8017ce4 <_dtoa_r+0x184>
 8017d80:	900f      	str	r0, [sp, #60]	; 0x3c
 8017d82:	e7b0      	b.n	8017ce6 <_dtoa_r+0x186>
 8017d84:	9b05      	ldr	r3, [sp, #20]
 8017d86:	eba3 030a 	sub.w	r3, r3, sl
 8017d8a:	9305      	str	r3, [sp, #20]
 8017d8c:	f1ca 0300 	rsb	r3, sl, #0
 8017d90:	9307      	str	r3, [sp, #28]
 8017d92:	2300      	movs	r3, #0
 8017d94:	930e      	str	r3, [sp, #56]	; 0x38
 8017d96:	e7bb      	b.n	8017d10 <_dtoa_r+0x1b0>
 8017d98:	2301      	movs	r3, #1
 8017d9a:	930a      	str	r3, [sp, #40]	; 0x28
 8017d9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017d9e:	2b00      	cmp	r3, #0
 8017da0:	dd59      	ble.n	8017e56 <_dtoa_r+0x2f6>
 8017da2:	9302      	str	r3, [sp, #8]
 8017da4:	4699      	mov	r9, r3
 8017da6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017da8:	2200      	movs	r2, #0
 8017daa:	6072      	str	r2, [r6, #4]
 8017dac:	2204      	movs	r2, #4
 8017dae:	f102 0014 	add.w	r0, r2, #20
 8017db2:	4298      	cmp	r0, r3
 8017db4:	6871      	ldr	r1, [r6, #4]
 8017db6:	d953      	bls.n	8017e60 <_dtoa_r+0x300>
 8017db8:	4620      	mov	r0, r4
 8017dba:	f000 ffd7 	bl	8018d6c <_Balloc>
 8017dbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017dc0:	6030      	str	r0, [r6, #0]
 8017dc2:	f1b9 0f0e 	cmp.w	r9, #14
 8017dc6:	f8d3 b000 	ldr.w	fp, [r3]
 8017dca:	f200 80e6 	bhi.w	8017f9a <_dtoa_r+0x43a>
 8017dce:	2d00      	cmp	r5, #0
 8017dd0:	f000 80e3 	beq.w	8017f9a <_dtoa_r+0x43a>
 8017dd4:	ed9d 7b00 	vldr	d7, [sp]
 8017dd8:	f1ba 0f00 	cmp.w	sl, #0
 8017ddc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8017de0:	dd74      	ble.n	8017ecc <_dtoa_r+0x36c>
 8017de2:	4a2a      	ldr	r2, [pc, #168]	; (8017e8c <_dtoa_r+0x32c>)
 8017de4:	f00a 030f 	and.w	r3, sl, #15
 8017de8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8017dec:	ed93 7b00 	vldr	d7, [r3]
 8017df0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8017df4:	06f0      	lsls	r0, r6, #27
 8017df6:	ed8d 7b08 	vstr	d7, [sp, #32]
 8017dfa:	d565      	bpl.n	8017ec8 <_dtoa_r+0x368>
 8017dfc:	4b24      	ldr	r3, [pc, #144]	; (8017e90 <_dtoa_r+0x330>)
 8017dfe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017e02:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017e06:	f7e8 fd21 	bl	800084c <__aeabi_ddiv>
 8017e0a:	e9cd 0100 	strd	r0, r1, [sp]
 8017e0e:	f006 060f 	and.w	r6, r6, #15
 8017e12:	2503      	movs	r5, #3
 8017e14:	4f1e      	ldr	r7, [pc, #120]	; (8017e90 <_dtoa_r+0x330>)
 8017e16:	e04c      	b.n	8017eb2 <_dtoa_r+0x352>
 8017e18:	2301      	movs	r3, #1
 8017e1a:	930a      	str	r3, [sp, #40]	; 0x28
 8017e1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017e1e:	4453      	add	r3, sl
 8017e20:	f103 0901 	add.w	r9, r3, #1
 8017e24:	9302      	str	r3, [sp, #8]
 8017e26:	464b      	mov	r3, r9
 8017e28:	2b01      	cmp	r3, #1
 8017e2a:	bfb8      	it	lt
 8017e2c:	2301      	movlt	r3, #1
 8017e2e:	e7ba      	b.n	8017da6 <_dtoa_r+0x246>
 8017e30:	2300      	movs	r3, #0
 8017e32:	e7b2      	b.n	8017d9a <_dtoa_r+0x23a>
 8017e34:	2300      	movs	r3, #0
 8017e36:	e7f0      	b.n	8017e1a <_dtoa_r+0x2ba>
 8017e38:	2501      	movs	r5, #1
 8017e3a:	2300      	movs	r3, #0
 8017e3c:	9306      	str	r3, [sp, #24]
 8017e3e:	950a      	str	r5, [sp, #40]	; 0x28
 8017e40:	f04f 33ff 	mov.w	r3, #4294967295
 8017e44:	9302      	str	r3, [sp, #8]
 8017e46:	4699      	mov	r9, r3
 8017e48:	2200      	movs	r2, #0
 8017e4a:	2312      	movs	r3, #18
 8017e4c:	920b      	str	r2, [sp, #44]	; 0x2c
 8017e4e:	e7aa      	b.n	8017da6 <_dtoa_r+0x246>
 8017e50:	2301      	movs	r3, #1
 8017e52:	930a      	str	r3, [sp, #40]	; 0x28
 8017e54:	e7f4      	b.n	8017e40 <_dtoa_r+0x2e0>
 8017e56:	2301      	movs	r3, #1
 8017e58:	9302      	str	r3, [sp, #8]
 8017e5a:	4699      	mov	r9, r3
 8017e5c:	461a      	mov	r2, r3
 8017e5e:	e7f5      	b.n	8017e4c <_dtoa_r+0x2ec>
 8017e60:	3101      	adds	r1, #1
 8017e62:	6071      	str	r1, [r6, #4]
 8017e64:	0052      	lsls	r2, r2, #1
 8017e66:	e7a2      	b.n	8017dae <_dtoa_r+0x24e>
 8017e68:	636f4361 	.word	0x636f4361
 8017e6c:	3fd287a7 	.word	0x3fd287a7
 8017e70:	8b60c8b3 	.word	0x8b60c8b3
 8017e74:	3fc68a28 	.word	0x3fc68a28
 8017e78:	509f79fb 	.word	0x509f79fb
 8017e7c:	3fd34413 	.word	0x3fd34413
 8017e80:	7ff00000 	.word	0x7ff00000
 8017e84:	0801b5b9 	.word	0x0801b5b9
 8017e88:	3ff80000 	.word	0x3ff80000
 8017e8c:	0801b678 	.word	0x0801b678
 8017e90:	0801b650 	.word	0x0801b650
 8017e94:	0801b641 	.word	0x0801b641
 8017e98:	07f1      	lsls	r1, r6, #31
 8017e9a:	d508      	bpl.n	8017eae <_dtoa_r+0x34e>
 8017e9c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017ea0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017ea4:	f7e8 fba8 	bl	80005f8 <__aeabi_dmul>
 8017ea8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8017eac:	3501      	adds	r5, #1
 8017eae:	1076      	asrs	r6, r6, #1
 8017eb0:	3708      	adds	r7, #8
 8017eb2:	2e00      	cmp	r6, #0
 8017eb4:	d1f0      	bne.n	8017e98 <_dtoa_r+0x338>
 8017eb6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017eba:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017ebe:	f7e8 fcc5 	bl	800084c <__aeabi_ddiv>
 8017ec2:	e9cd 0100 	strd	r0, r1, [sp]
 8017ec6:	e01a      	b.n	8017efe <_dtoa_r+0x39e>
 8017ec8:	2502      	movs	r5, #2
 8017eca:	e7a3      	b.n	8017e14 <_dtoa_r+0x2b4>
 8017ecc:	f000 80a0 	beq.w	8018010 <_dtoa_r+0x4b0>
 8017ed0:	f1ca 0600 	rsb	r6, sl, #0
 8017ed4:	4b9f      	ldr	r3, [pc, #636]	; (8018154 <_dtoa_r+0x5f4>)
 8017ed6:	4fa0      	ldr	r7, [pc, #640]	; (8018158 <_dtoa_r+0x5f8>)
 8017ed8:	f006 020f 	and.w	r2, r6, #15
 8017edc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ee4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017ee8:	f7e8 fb86 	bl	80005f8 <__aeabi_dmul>
 8017eec:	e9cd 0100 	strd	r0, r1, [sp]
 8017ef0:	1136      	asrs	r6, r6, #4
 8017ef2:	2300      	movs	r3, #0
 8017ef4:	2502      	movs	r5, #2
 8017ef6:	2e00      	cmp	r6, #0
 8017ef8:	d17f      	bne.n	8017ffa <_dtoa_r+0x49a>
 8017efa:	2b00      	cmp	r3, #0
 8017efc:	d1e1      	bne.n	8017ec2 <_dtoa_r+0x362>
 8017efe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017f00:	2b00      	cmp	r3, #0
 8017f02:	f000 8087 	beq.w	8018014 <_dtoa_r+0x4b4>
 8017f06:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017f0a:	2200      	movs	r2, #0
 8017f0c:	4b93      	ldr	r3, [pc, #588]	; (801815c <_dtoa_r+0x5fc>)
 8017f0e:	4630      	mov	r0, r6
 8017f10:	4639      	mov	r1, r7
 8017f12:	f7e8 fde3 	bl	8000adc <__aeabi_dcmplt>
 8017f16:	2800      	cmp	r0, #0
 8017f18:	d07c      	beq.n	8018014 <_dtoa_r+0x4b4>
 8017f1a:	f1b9 0f00 	cmp.w	r9, #0
 8017f1e:	d079      	beq.n	8018014 <_dtoa_r+0x4b4>
 8017f20:	9b02      	ldr	r3, [sp, #8]
 8017f22:	2b00      	cmp	r3, #0
 8017f24:	dd35      	ble.n	8017f92 <_dtoa_r+0x432>
 8017f26:	f10a 33ff 	add.w	r3, sl, #4294967295
 8017f2a:	9308      	str	r3, [sp, #32]
 8017f2c:	4639      	mov	r1, r7
 8017f2e:	2200      	movs	r2, #0
 8017f30:	4b8b      	ldr	r3, [pc, #556]	; (8018160 <_dtoa_r+0x600>)
 8017f32:	4630      	mov	r0, r6
 8017f34:	f7e8 fb60 	bl	80005f8 <__aeabi_dmul>
 8017f38:	e9cd 0100 	strd	r0, r1, [sp]
 8017f3c:	9f02      	ldr	r7, [sp, #8]
 8017f3e:	3501      	adds	r5, #1
 8017f40:	4628      	mov	r0, r5
 8017f42:	f7e8 faef 	bl	8000524 <__aeabi_i2d>
 8017f46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017f4a:	f7e8 fb55 	bl	80005f8 <__aeabi_dmul>
 8017f4e:	2200      	movs	r2, #0
 8017f50:	4b84      	ldr	r3, [pc, #528]	; (8018164 <_dtoa_r+0x604>)
 8017f52:	f7e8 f99b 	bl	800028c <__adddf3>
 8017f56:	4605      	mov	r5, r0
 8017f58:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8017f5c:	2f00      	cmp	r7, #0
 8017f5e:	d15d      	bne.n	801801c <_dtoa_r+0x4bc>
 8017f60:	2200      	movs	r2, #0
 8017f62:	4b81      	ldr	r3, [pc, #516]	; (8018168 <_dtoa_r+0x608>)
 8017f64:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017f68:	f7e8 f98e 	bl	8000288 <__aeabi_dsub>
 8017f6c:	462a      	mov	r2, r5
 8017f6e:	4633      	mov	r3, r6
 8017f70:	e9cd 0100 	strd	r0, r1, [sp]
 8017f74:	f7e8 fdd0 	bl	8000b18 <__aeabi_dcmpgt>
 8017f78:	2800      	cmp	r0, #0
 8017f7a:	f040 8288 	bne.w	801848e <_dtoa_r+0x92e>
 8017f7e:	462a      	mov	r2, r5
 8017f80:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8017f84:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017f88:	f7e8 fda8 	bl	8000adc <__aeabi_dcmplt>
 8017f8c:	2800      	cmp	r0, #0
 8017f8e:	f040 827c 	bne.w	801848a <_dtoa_r+0x92a>
 8017f92:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8017f96:	e9cd 2300 	strd	r2, r3, [sp]
 8017f9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017f9c:	2b00      	cmp	r3, #0
 8017f9e:	f2c0 8150 	blt.w	8018242 <_dtoa_r+0x6e2>
 8017fa2:	f1ba 0f0e 	cmp.w	sl, #14
 8017fa6:	f300 814c 	bgt.w	8018242 <_dtoa_r+0x6e2>
 8017faa:	4b6a      	ldr	r3, [pc, #424]	; (8018154 <_dtoa_r+0x5f4>)
 8017fac:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017fb0:	ed93 7b00 	vldr	d7, [r3]
 8017fb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017fb6:	2b00      	cmp	r3, #0
 8017fb8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017fbc:	f280 80d8 	bge.w	8018170 <_dtoa_r+0x610>
 8017fc0:	f1b9 0f00 	cmp.w	r9, #0
 8017fc4:	f300 80d4 	bgt.w	8018170 <_dtoa_r+0x610>
 8017fc8:	f040 825e 	bne.w	8018488 <_dtoa_r+0x928>
 8017fcc:	2200      	movs	r2, #0
 8017fce:	4b66      	ldr	r3, [pc, #408]	; (8018168 <_dtoa_r+0x608>)
 8017fd0:	ec51 0b17 	vmov	r0, r1, d7
 8017fd4:	f7e8 fb10 	bl	80005f8 <__aeabi_dmul>
 8017fd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017fdc:	f7e8 fd92 	bl	8000b04 <__aeabi_dcmpge>
 8017fe0:	464f      	mov	r7, r9
 8017fe2:	464e      	mov	r6, r9
 8017fe4:	2800      	cmp	r0, #0
 8017fe6:	f040 8234 	bne.w	8018452 <_dtoa_r+0x8f2>
 8017fea:	2331      	movs	r3, #49	; 0x31
 8017fec:	f10b 0501 	add.w	r5, fp, #1
 8017ff0:	f88b 3000 	strb.w	r3, [fp]
 8017ff4:	f10a 0a01 	add.w	sl, sl, #1
 8017ff8:	e22f      	b.n	801845a <_dtoa_r+0x8fa>
 8017ffa:	07f2      	lsls	r2, r6, #31
 8017ffc:	d505      	bpl.n	801800a <_dtoa_r+0x4aa>
 8017ffe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018002:	f7e8 faf9 	bl	80005f8 <__aeabi_dmul>
 8018006:	3501      	adds	r5, #1
 8018008:	2301      	movs	r3, #1
 801800a:	1076      	asrs	r6, r6, #1
 801800c:	3708      	adds	r7, #8
 801800e:	e772      	b.n	8017ef6 <_dtoa_r+0x396>
 8018010:	2502      	movs	r5, #2
 8018012:	e774      	b.n	8017efe <_dtoa_r+0x39e>
 8018014:	f8cd a020 	str.w	sl, [sp, #32]
 8018018:	464f      	mov	r7, r9
 801801a:	e791      	b.n	8017f40 <_dtoa_r+0x3e0>
 801801c:	4b4d      	ldr	r3, [pc, #308]	; (8018154 <_dtoa_r+0x5f4>)
 801801e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8018022:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8018026:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018028:	2b00      	cmp	r3, #0
 801802a:	d047      	beq.n	80180bc <_dtoa_r+0x55c>
 801802c:	4602      	mov	r2, r0
 801802e:	460b      	mov	r3, r1
 8018030:	2000      	movs	r0, #0
 8018032:	494e      	ldr	r1, [pc, #312]	; (801816c <_dtoa_r+0x60c>)
 8018034:	f7e8 fc0a 	bl	800084c <__aeabi_ddiv>
 8018038:	462a      	mov	r2, r5
 801803a:	4633      	mov	r3, r6
 801803c:	f7e8 f924 	bl	8000288 <__aeabi_dsub>
 8018040:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8018044:	465d      	mov	r5, fp
 8018046:	e9dd 0100 	ldrd	r0, r1, [sp]
 801804a:	f7e8 fd85 	bl	8000b58 <__aeabi_d2iz>
 801804e:	4606      	mov	r6, r0
 8018050:	f7e8 fa68 	bl	8000524 <__aeabi_i2d>
 8018054:	4602      	mov	r2, r0
 8018056:	460b      	mov	r3, r1
 8018058:	e9dd 0100 	ldrd	r0, r1, [sp]
 801805c:	f7e8 f914 	bl	8000288 <__aeabi_dsub>
 8018060:	3630      	adds	r6, #48	; 0x30
 8018062:	f805 6b01 	strb.w	r6, [r5], #1
 8018066:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801806a:	e9cd 0100 	strd	r0, r1, [sp]
 801806e:	f7e8 fd35 	bl	8000adc <__aeabi_dcmplt>
 8018072:	2800      	cmp	r0, #0
 8018074:	d163      	bne.n	801813e <_dtoa_r+0x5de>
 8018076:	e9dd 2300 	ldrd	r2, r3, [sp]
 801807a:	2000      	movs	r0, #0
 801807c:	4937      	ldr	r1, [pc, #220]	; (801815c <_dtoa_r+0x5fc>)
 801807e:	f7e8 f903 	bl	8000288 <__aeabi_dsub>
 8018082:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8018086:	f7e8 fd29 	bl	8000adc <__aeabi_dcmplt>
 801808a:	2800      	cmp	r0, #0
 801808c:	f040 80b7 	bne.w	80181fe <_dtoa_r+0x69e>
 8018090:	eba5 030b 	sub.w	r3, r5, fp
 8018094:	429f      	cmp	r7, r3
 8018096:	f77f af7c 	ble.w	8017f92 <_dtoa_r+0x432>
 801809a:	2200      	movs	r2, #0
 801809c:	4b30      	ldr	r3, [pc, #192]	; (8018160 <_dtoa_r+0x600>)
 801809e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80180a2:	f7e8 faa9 	bl	80005f8 <__aeabi_dmul>
 80180a6:	2200      	movs	r2, #0
 80180a8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80180ac:	4b2c      	ldr	r3, [pc, #176]	; (8018160 <_dtoa_r+0x600>)
 80180ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80180b2:	f7e8 faa1 	bl	80005f8 <__aeabi_dmul>
 80180b6:	e9cd 0100 	strd	r0, r1, [sp]
 80180ba:	e7c4      	b.n	8018046 <_dtoa_r+0x4e6>
 80180bc:	462a      	mov	r2, r5
 80180be:	4633      	mov	r3, r6
 80180c0:	f7e8 fa9a 	bl	80005f8 <__aeabi_dmul>
 80180c4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80180c8:	eb0b 0507 	add.w	r5, fp, r7
 80180cc:	465e      	mov	r6, fp
 80180ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80180d2:	f7e8 fd41 	bl	8000b58 <__aeabi_d2iz>
 80180d6:	4607      	mov	r7, r0
 80180d8:	f7e8 fa24 	bl	8000524 <__aeabi_i2d>
 80180dc:	3730      	adds	r7, #48	; 0x30
 80180de:	4602      	mov	r2, r0
 80180e0:	460b      	mov	r3, r1
 80180e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80180e6:	f7e8 f8cf 	bl	8000288 <__aeabi_dsub>
 80180ea:	f806 7b01 	strb.w	r7, [r6], #1
 80180ee:	42ae      	cmp	r6, r5
 80180f0:	e9cd 0100 	strd	r0, r1, [sp]
 80180f4:	f04f 0200 	mov.w	r2, #0
 80180f8:	d126      	bne.n	8018148 <_dtoa_r+0x5e8>
 80180fa:	4b1c      	ldr	r3, [pc, #112]	; (801816c <_dtoa_r+0x60c>)
 80180fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8018100:	f7e8 f8c4 	bl	800028c <__adddf3>
 8018104:	4602      	mov	r2, r0
 8018106:	460b      	mov	r3, r1
 8018108:	e9dd 0100 	ldrd	r0, r1, [sp]
 801810c:	f7e8 fd04 	bl	8000b18 <__aeabi_dcmpgt>
 8018110:	2800      	cmp	r0, #0
 8018112:	d174      	bne.n	80181fe <_dtoa_r+0x69e>
 8018114:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8018118:	2000      	movs	r0, #0
 801811a:	4914      	ldr	r1, [pc, #80]	; (801816c <_dtoa_r+0x60c>)
 801811c:	f7e8 f8b4 	bl	8000288 <__aeabi_dsub>
 8018120:	4602      	mov	r2, r0
 8018122:	460b      	mov	r3, r1
 8018124:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018128:	f7e8 fcd8 	bl	8000adc <__aeabi_dcmplt>
 801812c:	2800      	cmp	r0, #0
 801812e:	f43f af30 	beq.w	8017f92 <_dtoa_r+0x432>
 8018132:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018136:	2b30      	cmp	r3, #48	; 0x30
 8018138:	f105 32ff 	add.w	r2, r5, #4294967295
 801813c:	d002      	beq.n	8018144 <_dtoa_r+0x5e4>
 801813e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8018142:	e04a      	b.n	80181da <_dtoa_r+0x67a>
 8018144:	4615      	mov	r5, r2
 8018146:	e7f4      	b.n	8018132 <_dtoa_r+0x5d2>
 8018148:	4b05      	ldr	r3, [pc, #20]	; (8018160 <_dtoa_r+0x600>)
 801814a:	f7e8 fa55 	bl	80005f8 <__aeabi_dmul>
 801814e:	e9cd 0100 	strd	r0, r1, [sp]
 8018152:	e7bc      	b.n	80180ce <_dtoa_r+0x56e>
 8018154:	0801b678 	.word	0x0801b678
 8018158:	0801b650 	.word	0x0801b650
 801815c:	3ff00000 	.word	0x3ff00000
 8018160:	40240000 	.word	0x40240000
 8018164:	401c0000 	.word	0x401c0000
 8018168:	40140000 	.word	0x40140000
 801816c:	3fe00000 	.word	0x3fe00000
 8018170:	e9dd 6700 	ldrd	r6, r7, [sp]
 8018174:	465d      	mov	r5, fp
 8018176:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801817a:	4630      	mov	r0, r6
 801817c:	4639      	mov	r1, r7
 801817e:	f7e8 fb65 	bl	800084c <__aeabi_ddiv>
 8018182:	f7e8 fce9 	bl	8000b58 <__aeabi_d2iz>
 8018186:	4680      	mov	r8, r0
 8018188:	f7e8 f9cc 	bl	8000524 <__aeabi_i2d>
 801818c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018190:	f7e8 fa32 	bl	80005f8 <__aeabi_dmul>
 8018194:	4602      	mov	r2, r0
 8018196:	460b      	mov	r3, r1
 8018198:	4630      	mov	r0, r6
 801819a:	4639      	mov	r1, r7
 801819c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80181a0:	f7e8 f872 	bl	8000288 <__aeabi_dsub>
 80181a4:	f805 6b01 	strb.w	r6, [r5], #1
 80181a8:	eba5 060b 	sub.w	r6, r5, fp
 80181ac:	45b1      	cmp	r9, r6
 80181ae:	4602      	mov	r2, r0
 80181b0:	460b      	mov	r3, r1
 80181b2:	d139      	bne.n	8018228 <_dtoa_r+0x6c8>
 80181b4:	f7e8 f86a 	bl	800028c <__adddf3>
 80181b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80181bc:	4606      	mov	r6, r0
 80181be:	460f      	mov	r7, r1
 80181c0:	f7e8 fcaa 	bl	8000b18 <__aeabi_dcmpgt>
 80181c4:	b9c8      	cbnz	r0, 80181fa <_dtoa_r+0x69a>
 80181c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80181ca:	4630      	mov	r0, r6
 80181cc:	4639      	mov	r1, r7
 80181ce:	f7e8 fc7b 	bl	8000ac8 <__aeabi_dcmpeq>
 80181d2:	b110      	cbz	r0, 80181da <_dtoa_r+0x67a>
 80181d4:	f018 0f01 	tst.w	r8, #1
 80181d8:	d10f      	bne.n	80181fa <_dtoa_r+0x69a>
 80181da:	9904      	ldr	r1, [sp, #16]
 80181dc:	4620      	mov	r0, r4
 80181de:	f000 fdf9 	bl	8018dd4 <_Bfree>
 80181e2:	2300      	movs	r3, #0
 80181e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80181e6:	702b      	strb	r3, [r5, #0]
 80181e8:	f10a 0301 	add.w	r3, sl, #1
 80181ec:	6013      	str	r3, [r2, #0]
 80181ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80181f0:	2b00      	cmp	r3, #0
 80181f2:	f000 8241 	beq.w	8018678 <_dtoa_r+0xb18>
 80181f6:	601d      	str	r5, [r3, #0]
 80181f8:	e23e      	b.n	8018678 <_dtoa_r+0xb18>
 80181fa:	f8cd a020 	str.w	sl, [sp, #32]
 80181fe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8018202:	2a39      	cmp	r2, #57	; 0x39
 8018204:	f105 33ff 	add.w	r3, r5, #4294967295
 8018208:	d108      	bne.n	801821c <_dtoa_r+0x6bc>
 801820a:	459b      	cmp	fp, r3
 801820c:	d10a      	bne.n	8018224 <_dtoa_r+0x6c4>
 801820e:	9b08      	ldr	r3, [sp, #32]
 8018210:	3301      	adds	r3, #1
 8018212:	9308      	str	r3, [sp, #32]
 8018214:	2330      	movs	r3, #48	; 0x30
 8018216:	f88b 3000 	strb.w	r3, [fp]
 801821a:	465b      	mov	r3, fp
 801821c:	781a      	ldrb	r2, [r3, #0]
 801821e:	3201      	adds	r2, #1
 8018220:	701a      	strb	r2, [r3, #0]
 8018222:	e78c      	b.n	801813e <_dtoa_r+0x5de>
 8018224:	461d      	mov	r5, r3
 8018226:	e7ea      	b.n	80181fe <_dtoa_r+0x69e>
 8018228:	2200      	movs	r2, #0
 801822a:	4b9b      	ldr	r3, [pc, #620]	; (8018498 <_dtoa_r+0x938>)
 801822c:	f7e8 f9e4 	bl	80005f8 <__aeabi_dmul>
 8018230:	2200      	movs	r2, #0
 8018232:	2300      	movs	r3, #0
 8018234:	4606      	mov	r6, r0
 8018236:	460f      	mov	r7, r1
 8018238:	f7e8 fc46 	bl	8000ac8 <__aeabi_dcmpeq>
 801823c:	2800      	cmp	r0, #0
 801823e:	d09a      	beq.n	8018176 <_dtoa_r+0x616>
 8018240:	e7cb      	b.n	80181da <_dtoa_r+0x67a>
 8018242:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018244:	2a00      	cmp	r2, #0
 8018246:	f000 808b 	beq.w	8018360 <_dtoa_r+0x800>
 801824a:	9a06      	ldr	r2, [sp, #24]
 801824c:	2a01      	cmp	r2, #1
 801824e:	dc6e      	bgt.n	801832e <_dtoa_r+0x7ce>
 8018250:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018252:	2a00      	cmp	r2, #0
 8018254:	d067      	beq.n	8018326 <_dtoa_r+0x7c6>
 8018256:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801825a:	9f07      	ldr	r7, [sp, #28]
 801825c:	9d05      	ldr	r5, [sp, #20]
 801825e:	9a05      	ldr	r2, [sp, #20]
 8018260:	2101      	movs	r1, #1
 8018262:	441a      	add	r2, r3
 8018264:	4620      	mov	r0, r4
 8018266:	9205      	str	r2, [sp, #20]
 8018268:	4498      	add	r8, r3
 801826a:	f000 fe91 	bl	8018f90 <__i2b>
 801826e:	4606      	mov	r6, r0
 8018270:	2d00      	cmp	r5, #0
 8018272:	dd0c      	ble.n	801828e <_dtoa_r+0x72e>
 8018274:	f1b8 0f00 	cmp.w	r8, #0
 8018278:	dd09      	ble.n	801828e <_dtoa_r+0x72e>
 801827a:	4545      	cmp	r5, r8
 801827c:	9a05      	ldr	r2, [sp, #20]
 801827e:	462b      	mov	r3, r5
 8018280:	bfa8      	it	ge
 8018282:	4643      	movge	r3, r8
 8018284:	1ad2      	subs	r2, r2, r3
 8018286:	9205      	str	r2, [sp, #20]
 8018288:	1aed      	subs	r5, r5, r3
 801828a:	eba8 0803 	sub.w	r8, r8, r3
 801828e:	9b07      	ldr	r3, [sp, #28]
 8018290:	b1eb      	cbz	r3, 80182ce <_dtoa_r+0x76e>
 8018292:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018294:	2b00      	cmp	r3, #0
 8018296:	d067      	beq.n	8018368 <_dtoa_r+0x808>
 8018298:	b18f      	cbz	r7, 80182be <_dtoa_r+0x75e>
 801829a:	4631      	mov	r1, r6
 801829c:	463a      	mov	r2, r7
 801829e:	4620      	mov	r0, r4
 80182a0:	f000 ff16 	bl	80190d0 <__pow5mult>
 80182a4:	9a04      	ldr	r2, [sp, #16]
 80182a6:	4601      	mov	r1, r0
 80182a8:	4606      	mov	r6, r0
 80182aa:	4620      	mov	r0, r4
 80182ac:	f000 fe79 	bl	8018fa2 <__multiply>
 80182b0:	9904      	ldr	r1, [sp, #16]
 80182b2:	9008      	str	r0, [sp, #32]
 80182b4:	4620      	mov	r0, r4
 80182b6:	f000 fd8d 	bl	8018dd4 <_Bfree>
 80182ba:	9b08      	ldr	r3, [sp, #32]
 80182bc:	9304      	str	r3, [sp, #16]
 80182be:	9b07      	ldr	r3, [sp, #28]
 80182c0:	1bda      	subs	r2, r3, r7
 80182c2:	d004      	beq.n	80182ce <_dtoa_r+0x76e>
 80182c4:	9904      	ldr	r1, [sp, #16]
 80182c6:	4620      	mov	r0, r4
 80182c8:	f000 ff02 	bl	80190d0 <__pow5mult>
 80182cc:	9004      	str	r0, [sp, #16]
 80182ce:	2101      	movs	r1, #1
 80182d0:	4620      	mov	r0, r4
 80182d2:	f000 fe5d 	bl	8018f90 <__i2b>
 80182d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80182d8:	4607      	mov	r7, r0
 80182da:	2b00      	cmp	r3, #0
 80182dc:	f000 81d0 	beq.w	8018680 <_dtoa_r+0xb20>
 80182e0:	461a      	mov	r2, r3
 80182e2:	4601      	mov	r1, r0
 80182e4:	4620      	mov	r0, r4
 80182e6:	f000 fef3 	bl	80190d0 <__pow5mult>
 80182ea:	9b06      	ldr	r3, [sp, #24]
 80182ec:	2b01      	cmp	r3, #1
 80182ee:	4607      	mov	r7, r0
 80182f0:	dc40      	bgt.n	8018374 <_dtoa_r+0x814>
 80182f2:	9b00      	ldr	r3, [sp, #0]
 80182f4:	2b00      	cmp	r3, #0
 80182f6:	d139      	bne.n	801836c <_dtoa_r+0x80c>
 80182f8:	9b01      	ldr	r3, [sp, #4]
 80182fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80182fe:	2b00      	cmp	r3, #0
 8018300:	d136      	bne.n	8018370 <_dtoa_r+0x810>
 8018302:	9b01      	ldr	r3, [sp, #4]
 8018304:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018308:	0d1b      	lsrs	r3, r3, #20
 801830a:	051b      	lsls	r3, r3, #20
 801830c:	b12b      	cbz	r3, 801831a <_dtoa_r+0x7ba>
 801830e:	9b05      	ldr	r3, [sp, #20]
 8018310:	3301      	adds	r3, #1
 8018312:	9305      	str	r3, [sp, #20]
 8018314:	f108 0801 	add.w	r8, r8, #1
 8018318:	2301      	movs	r3, #1
 801831a:	9307      	str	r3, [sp, #28]
 801831c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801831e:	2b00      	cmp	r3, #0
 8018320:	d12a      	bne.n	8018378 <_dtoa_r+0x818>
 8018322:	2001      	movs	r0, #1
 8018324:	e030      	b.n	8018388 <_dtoa_r+0x828>
 8018326:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018328:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801832c:	e795      	b.n	801825a <_dtoa_r+0x6fa>
 801832e:	9b07      	ldr	r3, [sp, #28]
 8018330:	f109 37ff 	add.w	r7, r9, #4294967295
 8018334:	42bb      	cmp	r3, r7
 8018336:	bfbf      	itttt	lt
 8018338:	9b07      	ldrlt	r3, [sp, #28]
 801833a:	9707      	strlt	r7, [sp, #28]
 801833c:	1afa      	sublt	r2, r7, r3
 801833e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8018340:	bfbb      	ittet	lt
 8018342:	189b      	addlt	r3, r3, r2
 8018344:	930e      	strlt	r3, [sp, #56]	; 0x38
 8018346:	1bdf      	subge	r7, r3, r7
 8018348:	2700      	movlt	r7, #0
 801834a:	f1b9 0f00 	cmp.w	r9, #0
 801834e:	bfb5      	itete	lt
 8018350:	9b05      	ldrlt	r3, [sp, #20]
 8018352:	9d05      	ldrge	r5, [sp, #20]
 8018354:	eba3 0509 	sublt.w	r5, r3, r9
 8018358:	464b      	movge	r3, r9
 801835a:	bfb8      	it	lt
 801835c:	2300      	movlt	r3, #0
 801835e:	e77e      	b.n	801825e <_dtoa_r+0x6fe>
 8018360:	9f07      	ldr	r7, [sp, #28]
 8018362:	9d05      	ldr	r5, [sp, #20]
 8018364:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8018366:	e783      	b.n	8018270 <_dtoa_r+0x710>
 8018368:	9a07      	ldr	r2, [sp, #28]
 801836a:	e7ab      	b.n	80182c4 <_dtoa_r+0x764>
 801836c:	2300      	movs	r3, #0
 801836e:	e7d4      	b.n	801831a <_dtoa_r+0x7ba>
 8018370:	9b00      	ldr	r3, [sp, #0]
 8018372:	e7d2      	b.n	801831a <_dtoa_r+0x7ba>
 8018374:	2300      	movs	r3, #0
 8018376:	9307      	str	r3, [sp, #28]
 8018378:	693b      	ldr	r3, [r7, #16]
 801837a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801837e:	6918      	ldr	r0, [r3, #16]
 8018380:	f000 fdb8 	bl	8018ef4 <__hi0bits>
 8018384:	f1c0 0020 	rsb	r0, r0, #32
 8018388:	4440      	add	r0, r8
 801838a:	f010 001f 	ands.w	r0, r0, #31
 801838e:	d047      	beq.n	8018420 <_dtoa_r+0x8c0>
 8018390:	f1c0 0320 	rsb	r3, r0, #32
 8018394:	2b04      	cmp	r3, #4
 8018396:	dd3b      	ble.n	8018410 <_dtoa_r+0x8b0>
 8018398:	9b05      	ldr	r3, [sp, #20]
 801839a:	f1c0 001c 	rsb	r0, r0, #28
 801839e:	4403      	add	r3, r0
 80183a0:	9305      	str	r3, [sp, #20]
 80183a2:	4405      	add	r5, r0
 80183a4:	4480      	add	r8, r0
 80183a6:	9b05      	ldr	r3, [sp, #20]
 80183a8:	2b00      	cmp	r3, #0
 80183aa:	dd05      	ble.n	80183b8 <_dtoa_r+0x858>
 80183ac:	461a      	mov	r2, r3
 80183ae:	9904      	ldr	r1, [sp, #16]
 80183b0:	4620      	mov	r0, r4
 80183b2:	f000 fedb 	bl	801916c <__lshift>
 80183b6:	9004      	str	r0, [sp, #16]
 80183b8:	f1b8 0f00 	cmp.w	r8, #0
 80183bc:	dd05      	ble.n	80183ca <_dtoa_r+0x86a>
 80183be:	4639      	mov	r1, r7
 80183c0:	4642      	mov	r2, r8
 80183c2:	4620      	mov	r0, r4
 80183c4:	f000 fed2 	bl	801916c <__lshift>
 80183c8:	4607      	mov	r7, r0
 80183ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80183cc:	b353      	cbz	r3, 8018424 <_dtoa_r+0x8c4>
 80183ce:	4639      	mov	r1, r7
 80183d0:	9804      	ldr	r0, [sp, #16]
 80183d2:	f000 ff1f 	bl	8019214 <__mcmp>
 80183d6:	2800      	cmp	r0, #0
 80183d8:	da24      	bge.n	8018424 <_dtoa_r+0x8c4>
 80183da:	2300      	movs	r3, #0
 80183dc:	220a      	movs	r2, #10
 80183de:	9904      	ldr	r1, [sp, #16]
 80183e0:	4620      	mov	r0, r4
 80183e2:	f000 fd0e 	bl	8018e02 <__multadd>
 80183e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80183e8:	9004      	str	r0, [sp, #16]
 80183ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80183ee:	2b00      	cmp	r3, #0
 80183f0:	f000 814d 	beq.w	801868e <_dtoa_r+0xb2e>
 80183f4:	2300      	movs	r3, #0
 80183f6:	4631      	mov	r1, r6
 80183f8:	220a      	movs	r2, #10
 80183fa:	4620      	mov	r0, r4
 80183fc:	f000 fd01 	bl	8018e02 <__multadd>
 8018400:	9b02      	ldr	r3, [sp, #8]
 8018402:	2b00      	cmp	r3, #0
 8018404:	4606      	mov	r6, r0
 8018406:	dc4f      	bgt.n	80184a8 <_dtoa_r+0x948>
 8018408:	9b06      	ldr	r3, [sp, #24]
 801840a:	2b02      	cmp	r3, #2
 801840c:	dd4c      	ble.n	80184a8 <_dtoa_r+0x948>
 801840e:	e011      	b.n	8018434 <_dtoa_r+0x8d4>
 8018410:	d0c9      	beq.n	80183a6 <_dtoa_r+0x846>
 8018412:	9a05      	ldr	r2, [sp, #20]
 8018414:	331c      	adds	r3, #28
 8018416:	441a      	add	r2, r3
 8018418:	9205      	str	r2, [sp, #20]
 801841a:	441d      	add	r5, r3
 801841c:	4498      	add	r8, r3
 801841e:	e7c2      	b.n	80183a6 <_dtoa_r+0x846>
 8018420:	4603      	mov	r3, r0
 8018422:	e7f6      	b.n	8018412 <_dtoa_r+0x8b2>
 8018424:	f1b9 0f00 	cmp.w	r9, #0
 8018428:	dc38      	bgt.n	801849c <_dtoa_r+0x93c>
 801842a:	9b06      	ldr	r3, [sp, #24]
 801842c:	2b02      	cmp	r3, #2
 801842e:	dd35      	ble.n	801849c <_dtoa_r+0x93c>
 8018430:	f8cd 9008 	str.w	r9, [sp, #8]
 8018434:	9b02      	ldr	r3, [sp, #8]
 8018436:	b963      	cbnz	r3, 8018452 <_dtoa_r+0x8f2>
 8018438:	4639      	mov	r1, r7
 801843a:	2205      	movs	r2, #5
 801843c:	4620      	mov	r0, r4
 801843e:	f000 fce0 	bl	8018e02 <__multadd>
 8018442:	4601      	mov	r1, r0
 8018444:	4607      	mov	r7, r0
 8018446:	9804      	ldr	r0, [sp, #16]
 8018448:	f000 fee4 	bl	8019214 <__mcmp>
 801844c:	2800      	cmp	r0, #0
 801844e:	f73f adcc 	bgt.w	8017fea <_dtoa_r+0x48a>
 8018452:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018454:	465d      	mov	r5, fp
 8018456:	ea6f 0a03 	mvn.w	sl, r3
 801845a:	f04f 0900 	mov.w	r9, #0
 801845e:	4639      	mov	r1, r7
 8018460:	4620      	mov	r0, r4
 8018462:	f000 fcb7 	bl	8018dd4 <_Bfree>
 8018466:	2e00      	cmp	r6, #0
 8018468:	f43f aeb7 	beq.w	80181da <_dtoa_r+0x67a>
 801846c:	f1b9 0f00 	cmp.w	r9, #0
 8018470:	d005      	beq.n	801847e <_dtoa_r+0x91e>
 8018472:	45b1      	cmp	r9, r6
 8018474:	d003      	beq.n	801847e <_dtoa_r+0x91e>
 8018476:	4649      	mov	r1, r9
 8018478:	4620      	mov	r0, r4
 801847a:	f000 fcab 	bl	8018dd4 <_Bfree>
 801847e:	4631      	mov	r1, r6
 8018480:	4620      	mov	r0, r4
 8018482:	f000 fca7 	bl	8018dd4 <_Bfree>
 8018486:	e6a8      	b.n	80181da <_dtoa_r+0x67a>
 8018488:	2700      	movs	r7, #0
 801848a:	463e      	mov	r6, r7
 801848c:	e7e1      	b.n	8018452 <_dtoa_r+0x8f2>
 801848e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8018492:	463e      	mov	r6, r7
 8018494:	e5a9      	b.n	8017fea <_dtoa_r+0x48a>
 8018496:	bf00      	nop
 8018498:	40240000 	.word	0x40240000
 801849c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801849e:	f8cd 9008 	str.w	r9, [sp, #8]
 80184a2:	2b00      	cmp	r3, #0
 80184a4:	f000 80fa 	beq.w	801869c <_dtoa_r+0xb3c>
 80184a8:	2d00      	cmp	r5, #0
 80184aa:	dd05      	ble.n	80184b8 <_dtoa_r+0x958>
 80184ac:	4631      	mov	r1, r6
 80184ae:	462a      	mov	r2, r5
 80184b0:	4620      	mov	r0, r4
 80184b2:	f000 fe5b 	bl	801916c <__lshift>
 80184b6:	4606      	mov	r6, r0
 80184b8:	9b07      	ldr	r3, [sp, #28]
 80184ba:	2b00      	cmp	r3, #0
 80184bc:	d04c      	beq.n	8018558 <_dtoa_r+0x9f8>
 80184be:	6871      	ldr	r1, [r6, #4]
 80184c0:	4620      	mov	r0, r4
 80184c2:	f000 fc53 	bl	8018d6c <_Balloc>
 80184c6:	6932      	ldr	r2, [r6, #16]
 80184c8:	3202      	adds	r2, #2
 80184ca:	4605      	mov	r5, r0
 80184cc:	0092      	lsls	r2, r2, #2
 80184ce:	f106 010c 	add.w	r1, r6, #12
 80184d2:	300c      	adds	r0, #12
 80184d4:	f7fd fc8a 	bl	8015dec <memcpy>
 80184d8:	2201      	movs	r2, #1
 80184da:	4629      	mov	r1, r5
 80184dc:	4620      	mov	r0, r4
 80184de:	f000 fe45 	bl	801916c <__lshift>
 80184e2:	9b00      	ldr	r3, [sp, #0]
 80184e4:	f8cd b014 	str.w	fp, [sp, #20]
 80184e8:	f003 0301 	and.w	r3, r3, #1
 80184ec:	46b1      	mov	r9, r6
 80184ee:	9307      	str	r3, [sp, #28]
 80184f0:	4606      	mov	r6, r0
 80184f2:	4639      	mov	r1, r7
 80184f4:	9804      	ldr	r0, [sp, #16]
 80184f6:	f7ff faa5 	bl	8017a44 <quorem>
 80184fa:	4649      	mov	r1, r9
 80184fc:	4605      	mov	r5, r0
 80184fe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8018502:	9804      	ldr	r0, [sp, #16]
 8018504:	f000 fe86 	bl	8019214 <__mcmp>
 8018508:	4632      	mov	r2, r6
 801850a:	9000      	str	r0, [sp, #0]
 801850c:	4639      	mov	r1, r7
 801850e:	4620      	mov	r0, r4
 8018510:	f000 fe9a 	bl	8019248 <__mdiff>
 8018514:	68c3      	ldr	r3, [r0, #12]
 8018516:	4602      	mov	r2, r0
 8018518:	bb03      	cbnz	r3, 801855c <_dtoa_r+0x9fc>
 801851a:	4601      	mov	r1, r0
 801851c:	9008      	str	r0, [sp, #32]
 801851e:	9804      	ldr	r0, [sp, #16]
 8018520:	f000 fe78 	bl	8019214 <__mcmp>
 8018524:	9a08      	ldr	r2, [sp, #32]
 8018526:	4603      	mov	r3, r0
 8018528:	4611      	mov	r1, r2
 801852a:	4620      	mov	r0, r4
 801852c:	9308      	str	r3, [sp, #32]
 801852e:	f000 fc51 	bl	8018dd4 <_Bfree>
 8018532:	9b08      	ldr	r3, [sp, #32]
 8018534:	b9a3      	cbnz	r3, 8018560 <_dtoa_r+0xa00>
 8018536:	9a06      	ldr	r2, [sp, #24]
 8018538:	b992      	cbnz	r2, 8018560 <_dtoa_r+0xa00>
 801853a:	9a07      	ldr	r2, [sp, #28]
 801853c:	b982      	cbnz	r2, 8018560 <_dtoa_r+0xa00>
 801853e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8018542:	d029      	beq.n	8018598 <_dtoa_r+0xa38>
 8018544:	9b00      	ldr	r3, [sp, #0]
 8018546:	2b00      	cmp	r3, #0
 8018548:	dd01      	ble.n	801854e <_dtoa_r+0x9ee>
 801854a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 801854e:	9b05      	ldr	r3, [sp, #20]
 8018550:	1c5d      	adds	r5, r3, #1
 8018552:	f883 8000 	strb.w	r8, [r3]
 8018556:	e782      	b.n	801845e <_dtoa_r+0x8fe>
 8018558:	4630      	mov	r0, r6
 801855a:	e7c2      	b.n	80184e2 <_dtoa_r+0x982>
 801855c:	2301      	movs	r3, #1
 801855e:	e7e3      	b.n	8018528 <_dtoa_r+0x9c8>
 8018560:	9a00      	ldr	r2, [sp, #0]
 8018562:	2a00      	cmp	r2, #0
 8018564:	db04      	blt.n	8018570 <_dtoa_r+0xa10>
 8018566:	d125      	bne.n	80185b4 <_dtoa_r+0xa54>
 8018568:	9a06      	ldr	r2, [sp, #24]
 801856a:	bb1a      	cbnz	r2, 80185b4 <_dtoa_r+0xa54>
 801856c:	9a07      	ldr	r2, [sp, #28]
 801856e:	bb0a      	cbnz	r2, 80185b4 <_dtoa_r+0xa54>
 8018570:	2b00      	cmp	r3, #0
 8018572:	ddec      	ble.n	801854e <_dtoa_r+0x9ee>
 8018574:	2201      	movs	r2, #1
 8018576:	9904      	ldr	r1, [sp, #16]
 8018578:	4620      	mov	r0, r4
 801857a:	f000 fdf7 	bl	801916c <__lshift>
 801857e:	4639      	mov	r1, r7
 8018580:	9004      	str	r0, [sp, #16]
 8018582:	f000 fe47 	bl	8019214 <__mcmp>
 8018586:	2800      	cmp	r0, #0
 8018588:	dc03      	bgt.n	8018592 <_dtoa_r+0xa32>
 801858a:	d1e0      	bne.n	801854e <_dtoa_r+0x9ee>
 801858c:	f018 0f01 	tst.w	r8, #1
 8018590:	d0dd      	beq.n	801854e <_dtoa_r+0x9ee>
 8018592:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8018596:	d1d8      	bne.n	801854a <_dtoa_r+0x9ea>
 8018598:	9b05      	ldr	r3, [sp, #20]
 801859a:	9a05      	ldr	r2, [sp, #20]
 801859c:	1c5d      	adds	r5, r3, #1
 801859e:	2339      	movs	r3, #57	; 0x39
 80185a0:	7013      	strb	r3, [r2, #0]
 80185a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80185a6:	2b39      	cmp	r3, #57	; 0x39
 80185a8:	f105 32ff 	add.w	r2, r5, #4294967295
 80185ac:	d04f      	beq.n	801864e <_dtoa_r+0xaee>
 80185ae:	3301      	adds	r3, #1
 80185b0:	7013      	strb	r3, [r2, #0]
 80185b2:	e754      	b.n	801845e <_dtoa_r+0x8fe>
 80185b4:	9a05      	ldr	r2, [sp, #20]
 80185b6:	2b00      	cmp	r3, #0
 80185b8:	f102 0501 	add.w	r5, r2, #1
 80185bc:	dd06      	ble.n	80185cc <_dtoa_r+0xa6c>
 80185be:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80185c2:	d0e9      	beq.n	8018598 <_dtoa_r+0xa38>
 80185c4:	f108 0801 	add.w	r8, r8, #1
 80185c8:	9b05      	ldr	r3, [sp, #20]
 80185ca:	e7c2      	b.n	8018552 <_dtoa_r+0x9f2>
 80185cc:	9a02      	ldr	r2, [sp, #8]
 80185ce:	f805 8c01 	strb.w	r8, [r5, #-1]
 80185d2:	eba5 030b 	sub.w	r3, r5, fp
 80185d6:	4293      	cmp	r3, r2
 80185d8:	d021      	beq.n	801861e <_dtoa_r+0xabe>
 80185da:	2300      	movs	r3, #0
 80185dc:	220a      	movs	r2, #10
 80185de:	9904      	ldr	r1, [sp, #16]
 80185e0:	4620      	mov	r0, r4
 80185e2:	f000 fc0e 	bl	8018e02 <__multadd>
 80185e6:	45b1      	cmp	r9, r6
 80185e8:	9004      	str	r0, [sp, #16]
 80185ea:	f04f 0300 	mov.w	r3, #0
 80185ee:	f04f 020a 	mov.w	r2, #10
 80185f2:	4649      	mov	r1, r9
 80185f4:	4620      	mov	r0, r4
 80185f6:	d105      	bne.n	8018604 <_dtoa_r+0xaa4>
 80185f8:	f000 fc03 	bl	8018e02 <__multadd>
 80185fc:	4681      	mov	r9, r0
 80185fe:	4606      	mov	r6, r0
 8018600:	9505      	str	r5, [sp, #20]
 8018602:	e776      	b.n	80184f2 <_dtoa_r+0x992>
 8018604:	f000 fbfd 	bl	8018e02 <__multadd>
 8018608:	4631      	mov	r1, r6
 801860a:	4681      	mov	r9, r0
 801860c:	2300      	movs	r3, #0
 801860e:	220a      	movs	r2, #10
 8018610:	4620      	mov	r0, r4
 8018612:	f000 fbf6 	bl	8018e02 <__multadd>
 8018616:	4606      	mov	r6, r0
 8018618:	e7f2      	b.n	8018600 <_dtoa_r+0xaa0>
 801861a:	f04f 0900 	mov.w	r9, #0
 801861e:	2201      	movs	r2, #1
 8018620:	9904      	ldr	r1, [sp, #16]
 8018622:	4620      	mov	r0, r4
 8018624:	f000 fda2 	bl	801916c <__lshift>
 8018628:	4639      	mov	r1, r7
 801862a:	9004      	str	r0, [sp, #16]
 801862c:	f000 fdf2 	bl	8019214 <__mcmp>
 8018630:	2800      	cmp	r0, #0
 8018632:	dcb6      	bgt.n	80185a2 <_dtoa_r+0xa42>
 8018634:	d102      	bne.n	801863c <_dtoa_r+0xadc>
 8018636:	f018 0f01 	tst.w	r8, #1
 801863a:	d1b2      	bne.n	80185a2 <_dtoa_r+0xa42>
 801863c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018640:	2b30      	cmp	r3, #48	; 0x30
 8018642:	f105 32ff 	add.w	r2, r5, #4294967295
 8018646:	f47f af0a 	bne.w	801845e <_dtoa_r+0x8fe>
 801864a:	4615      	mov	r5, r2
 801864c:	e7f6      	b.n	801863c <_dtoa_r+0xadc>
 801864e:	4593      	cmp	fp, r2
 8018650:	d105      	bne.n	801865e <_dtoa_r+0xafe>
 8018652:	2331      	movs	r3, #49	; 0x31
 8018654:	f10a 0a01 	add.w	sl, sl, #1
 8018658:	f88b 3000 	strb.w	r3, [fp]
 801865c:	e6ff      	b.n	801845e <_dtoa_r+0x8fe>
 801865e:	4615      	mov	r5, r2
 8018660:	e79f      	b.n	80185a2 <_dtoa_r+0xa42>
 8018662:	f8df b064 	ldr.w	fp, [pc, #100]	; 80186c8 <_dtoa_r+0xb68>
 8018666:	e007      	b.n	8018678 <_dtoa_r+0xb18>
 8018668:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801866a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80186cc <_dtoa_r+0xb6c>
 801866e:	b11b      	cbz	r3, 8018678 <_dtoa_r+0xb18>
 8018670:	f10b 0308 	add.w	r3, fp, #8
 8018674:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018676:	6013      	str	r3, [r2, #0]
 8018678:	4658      	mov	r0, fp
 801867a:	b017      	add	sp, #92	; 0x5c
 801867c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018680:	9b06      	ldr	r3, [sp, #24]
 8018682:	2b01      	cmp	r3, #1
 8018684:	f77f ae35 	ble.w	80182f2 <_dtoa_r+0x792>
 8018688:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801868a:	9307      	str	r3, [sp, #28]
 801868c:	e649      	b.n	8018322 <_dtoa_r+0x7c2>
 801868e:	9b02      	ldr	r3, [sp, #8]
 8018690:	2b00      	cmp	r3, #0
 8018692:	dc03      	bgt.n	801869c <_dtoa_r+0xb3c>
 8018694:	9b06      	ldr	r3, [sp, #24]
 8018696:	2b02      	cmp	r3, #2
 8018698:	f73f aecc 	bgt.w	8018434 <_dtoa_r+0x8d4>
 801869c:	465d      	mov	r5, fp
 801869e:	4639      	mov	r1, r7
 80186a0:	9804      	ldr	r0, [sp, #16]
 80186a2:	f7ff f9cf 	bl	8017a44 <quorem>
 80186a6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80186aa:	f805 8b01 	strb.w	r8, [r5], #1
 80186ae:	9a02      	ldr	r2, [sp, #8]
 80186b0:	eba5 030b 	sub.w	r3, r5, fp
 80186b4:	429a      	cmp	r2, r3
 80186b6:	ddb0      	ble.n	801861a <_dtoa_r+0xaba>
 80186b8:	2300      	movs	r3, #0
 80186ba:	220a      	movs	r2, #10
 80186bc:	9904      	ldr	r1, [sp, #16]
 80186be:	4620      	mov	r0, r4
 80186c0:	f000 fb9f 	bl	8018e02 <__multadd>
 80186c4:	9004      	str	r0, [sp, #16]
 80186c6:	e7ea      	b.n	801869e <_dtoa_r+0xb3e>
 80186c8:	0801b5b8 	.word	0x0801b5b8
 80186cc:	0801b638 	.word	0x0801b638

080186d0 <rshift>:
 80186d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80186d2:	6906      	ldr	r6, [r0, #16]
 80186d4:	114b      	asrs	r3, r1, #5
 80186d6:	429e      	cmp	r6, r3
 80186d8:	f100 0414 	add.w	r4, r0, #20
 80186dc:	dd30      	ble.n	8018740 <rshift+0x70>
 80186de:	f011 011f 	ands.w	r1, r1, #31
 80186e2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80186e6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80186ea:	d108      	bne.n	80186fe <rshift+0x2e>
 80186ec:	4621      	mov	r1, r4
 80186ee:	42b2      	cmp	r2, r6
 80186f0:	460b      	mov	r3, r1
 80186f2:	d211      	bcs.n	8018718 <rshift+0x48>
 80186f4:	f852 3b04 	ldr.w	r3, [r2], #4
 80186f8:	f841 3b04 	str.w	r3, [r1], #4
 80186fc:	e7f7      	b.n	80186ee <rshift+0x1e>
 80186fe:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8018702:	f1c1 0c20 	rsb	ip, r1, #32
 8018706:	40cd      	lsrs	r5, r1
 8018708:	3204      	adds	r2, #4
 801870a:	4623      	mov	r3, r4
 801870c:	42b2      	cmp	r2, r6
 801870e:	4617      	mov	r7, r2
 8018710:	d30c      	bcc.n	801872c <rshift+0x5c>
 8018712:	601d      	str	r5, [r3, #0]
 8018714:	b105      	cbz	r5, 8018718 <rshift+0x48>
 8018716:	3304      	adds	r3, #4
 8018718:	1b1a      	subs	r2, r3, r4
 801871a:	42a3      	cmp	r3, r4
 801871c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018720:	bf08      	it	eq
 8018722:	2300      	moveq	r3, #0
 8018724:	6102      	str	r2, [r0, #16]
 8018726:	bf08      	it	eq
 8018728:	6143      	streq	r3, [r0, #20]
 801872a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801872c:	683f      	ldr	r7, [r7, #0]
 801872e:	fa07 f70c 	lsl.w	r7, r7, ip
 8018732:	433d      	orrs	r5, r7
 8018734:	f843 5b04 	str.w	r5, [r3], #4
 8018738:	f852 5b04 	ldr.w	r5, [r2], #4
 801873c:	40cd      	lsrs	r5, r1
 801873e:	e7e5      	b.n	801870c <rshift+0x3c>
 8018740:	4623      	mov	r3, r4
 8018742:	e7e9      	b.n	8018718 <rshift+0x48>

08018744 <__hexdig_fun>:
 8018744:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018748:	2b09      	cmp	r3, #9
 801874a:	d802      	bhi.n	8018752 <__hexdig_fun+0xe>
 801874c:	3820      	subs	r0, #32
 801874e:	b2c0      	uxtb	r0, r0
 8018750:	4770      	bx	lr
 8018752:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8018756:	2b05      	cmp	r3, #5
 8018758:	d801      	bhi.n	801875e <__hexdig_fun+0x1a>
 801875a:	3847      	subs	r0, #71	; 0x47
 801875c:	e7f7      	b.n	801874e <__hexdig_fun+0xa>
 801875e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8018762:	2b05      	cmp	r3, #5
 8018764:	d801      	bhi.n	801876a <__hexdig_fun+0x26>
 8018766:	3827      	subs	r0, #39	; 0x27
 8018768:	e7f1      	b.n	801874e <__hexdig_fun+0xa>
 801876a:	2000      	movs	r0, #0
 801876c:	4770      	bx	lr

0801876e <__gethex>:
 801876e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018772:	b08b      	sub	sp, #44	; 0x2c
 8018774:	468a      	mov	sl, r1
 8018776:	9002      	str	r0, [sp, #8]
 8018778:	9816      	ldr	r0, [sp, #88]	; 0x58
 801877a:	9306      	str	r3, [sp, #24]
 801877c:	4690      	mov	r8, r2
 801877e:	f000 fad0 	bl	8018d22 <__localeconv_l>
 8018782:	6803      	ldr	r3, [r0, #0]
 8018784:	9303      	str	r3, [sp, #12]
 8018786:	4618      	mov	r0, r3
 8018788:	f7e7 fd22 	bl	80001d0 <strlen>
 801878c:	9b03      	ldr	r3, [sp, #12]
 801878e:	9001      	str	r0, [sp, #4]
 8018790:	4403      	add	r3, r0
 8018792:	f04f 0b00 	mov.w	fp, #0
 8018796:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801879a:	9307      	str	r3, [sp, #28]
 801879c:	f8da 3000 	ldr.w	r3, [sl]
 80187a0:	3302      	adds	r3, #2
 80187a2:	461f      	mov	r7, r3
 80187a4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80187a8:	2830      	cmp	r0, #48	; 0x30
 80187aa:	d06c      	beq.n	8018886 <__gethex+0x118>
 80187ac:	f7ff ffca 	bl	8018744 <__hexdig_fun>
 80187b0:	4604      	mov	r4, r0
 80187b2:	2800      	cmp	r0, #0
 80187b4:	d16a      	bne.n	801888c <__gethex+0x11e>
 80187b6:	9a01      	ldr	r2, [sp, #4]
 80187b8:	9903      	ldr	r1, [sp, #12]
 80187ba:	4638      	mov	r0, r7
 80187bc:	f001 f836 	bl	801982c <strncmp>
 80187c0:	2800      	cmp	r0, #0
 80187c2:	d166      	bne.n	8018892 <__gethex+0x124>
 80187c4:	9b01      	ldr	r3, [sp, #4]
 80187c6:	5cf8      	ldrb	r0, [r7, r3]
 80187c8:	18fe      	adds	r6, r7, r3
 80187ca:	f7ff ffbb 	bl	8018744 <__hexdig_fun>
 80187ce:	2800      	cmp	r0, #0
 80187d0:	d062      	beq.n	8018898 <__gethex+0x12a>
 80187d2:	4633      	mov	r3, r6
 80187d4:	7818      	ldrb	r0, [r3, #0]
 80187d6:	2830      	cmp	r0, #48	; 0x30
 80187d8:	461f      	mov	r7, r3
 80187da:	f103 0301 	add.w	r3, r3, #1
 80187de:	d0f9      	beq.n	80187d4 <__gethex+0x66>
 80187e0:	f7ff ffb0 	bl	8018744 <__hexdig_fun>
 80187e4:	fab0 f580 	clz	r5, r0
 80187e8:	096d      	lsrs	r5, r5, #5
 80187ea:	4634      	mov	r4, r6
 80187ec:	f04f 0b01 	mov.w	fp, #1
 80187f0:	463a      	mov	r2, r7
 80187f2:	4616      	mov	r6, r2
 80187f4:	3201      	adds	r2, #1
 80187f6:	7830      	ldrb	r0, [r6, #0]
 80187f8:	f7ff ffa4 	bl	8018744 <__hexdig_fun>
 80187fc:	2800      	cmp	r0, #0
 80187fe:	d1f8      	bne.n	80187f2 <__gethex+0x84>
 8018800:	9a01      	ldr	r2, [sp, #4]
 8018802:	9903      	ldr	r1, [sp, #12]
 8018804:	4630      	mov	r0, r6
 8018806:	f001 f811 	bl	801982c <strncmp>
 801880a:	b950      	cbnz	r0, 8018822 <__gethex+0xb4>
 801880c:	b954      	cbnz	r4, 8018824 <__gethex+0xb6>
 801880e:	9b01      	ldr	r3, [sp, #4]
 8018810:	18f4      	adds	r4, r6, r3
 8018812:	4622      	mov	r2, r4
 8018814:	4616      	mov	r6, r2
 8018816:	3201      	adds	r2, #1
 8018818:	7830      	ldrb	r0, [r6, #0]
 801881a:	f7ff ff93 	bl	8018744 <__hexdig_fun>
 801881e:	2800      	cmp	r0, #0
 8018820:	d1f8      	bne.n	8018814 <__gethex+0xa6>
 8018822:	b10c      	cbz	r4, 8018828 <__gethex+0xba>
 8018824:	1ba4      	subs	r4, r4, r6
 8018826:	00a4      	lsls	r4, r4, #2
 8018828:	7833      	ldrb	r3, [r6, #0]
 801882a:	2b50      	cmp	r3, #80	; 0x50
 801882c:	d001      	beq.n	8018832 <__gethex+0xc4>
 801882e:	2b70      	cmp	r3, #112	; 0x70
 8018830:	d140      	bne.n	80188b4 <__gethex+0x146>
 8018832:	7873      	ldrb	r3, [r6, #1]
 8018834:	2b2b      	cmp	r3, #43	; 0x2b
 8018836:	d031      	beq.n	801889c <__gethex+0x12e>
 8018838:	2b2d      	cmp	r3, #45	; 0x2d
 801883a:	d033      	beq.n	80188a4 <__gethex+0x136>
 801883c:	1c71      	adds	r1, r6, #1
 801883e:	f04f 0900 	mov.w	r9, #0
 8018842:	7808      	ldrb	r0, [r1, #0]
 8018844:	f7ff ff7e 	bl	8018744 <__hexdig_fun>
 8018848:	1e43      	subs	r3, r0, #1
 801884a:	b2db      	uxtb	r3, r3
 801884c:	2b18      	cmp	r3, #24
 801884e:	d831      	bhi.n	80188b4 <__gethex+0x146>
 8018850:	f1a0 0210 	sub.w	r2, r0, #16
 8018854:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018858:	f7ff ff74 	bl	8018744 <__hexdig_fun>
 801885c:	1e43      	subs	r3, r0, #1
 801885e:	b2db      	uxtb	r3, r3
 8018860:	2b18      	cmp	r3, #24
 8018862:	d922      	bls.n	80188aa <__gethex+0x13c>
 8018864:	f1b9 0f00 	cmp.w	r9, #0
 8018868:	d000      	beq.n	801886c <__gethex+0xfe>
 801886a:	4252      	negs	r2, r2
 801886c:	4414      	add	r4, r2
 801886e:	f8ca 1000 	str.w	r1, [sl]
 8018872:	b30d      	cbz	r5, 80188b8 <__gethex+0x14a>
 8018874:	f1bb 0f00 	cmp.w	fp, #0
 8018878:	bf0c      	ite	eq
 801887a:	2706      	moveq	r7, #6
 801887c:	2700      	movne	r7, #0
 801887e:	4638      	mov	r0, r7
 8018880:	b00b      	add	sp, #44	; 0x2c
 8018882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018886:	f10b 0b01 	add.w	fp, fp, #1
 801888a:	e78a      	b.n	80187a2 <__gethex+0x34>
 801888c:	2500      	movs	r5, #0
 801888e:	462c      	mov	r4, r5
 8018890:	e7ae      	b.n	80187f0 <__gethex+0x82>
 8018892:	463e      	mov	r6, r7
 8018894:	2501      	movs	r5, #1
 8018896:	e7c7      	b.n	8018828 <__gethex+0xba>
 8018898:	4604      	mov	r4, r0
 801889a:	e7fb      	b.n	8018894 <__gethex+0x126>
 801889c:	f04f 0900 	mov.w	r9, #0
 80188a0:	1cb1      	adds	r1, r6, #2
 80188a2:	e7ce      	b.n	8018842 <__gethex+0xd4>
 80188a4:	f04f 0901 	mov.w	r9, #1
 80188a8:	e7fa      	b.n	80188a0 <__gethex+0x132>
 80188aa:	230a      	movs	r3, #10
 80188ac:	fb03 0202 	mla	r2, r3, r2, r0
 80188b0:	3a10      	subs	r2, #16
 80188b2:	e7cf      	b.n	8018854 <__gethex+0xe6>
 80188b4:	4631      	mov	r1, r6
 80188b6:	e7da      	b.n	801886e <__gethex+0x100>
 80188b8:	1bf3      	subs	r3, r6, r7
 80188ba:	3b01      	subs	r3, #1
 80188bc:	4629      	mov	r1, r5
 80188be:	2b07      	cmp	r3, #7
 80188c0:	dc49      	bgt.n	8018956 <__gethex+0x1e8>
 80188c2:	9802      	ldr	r0, [sp, #8]
 80188c4:	f000 fa52 	bl	8018d6c <_Balloc>
 80188c8:	9b01      	ldr	r3, [sp, #4]
 80188ca:	f100 0914 	add.w	r9, r0, #20
 80188ce:	f04f 0b00 	mov.w	fp, #0
 80188d2:	f1c3 0301 	rsb	r3, r3, #1
 80188d6:	4605      	mov	r5, r0
 80188d8:	f8cd 9010 	str.w	r9, [sp, #16]
 80188dc:	46da      	mov	sl, fp
 80188de:	9308      	str	r3, [sp, #32]
 80188e0:	42b7      	cmp	r7, r6
 80188e2:	d33b      	bcc.n	801895c <__gethex+0x1ee>
 80188e4:	9804      	ldr	r0, [sp, #16]
 80188e6:	f840 ab04 	str.w	sl, [r0], #4
 80188ea:	eba0 0009 	sub.w	r0, r0, r9
 80188ee:	1080      	asrs	r0, r0, #2
 80188f0:	6128      	str	r0, [r5, #16]
 80188f2:	0147      	lsls	r7, r0, #5
 80188f4:	4650      	mov	r0, sl
 80188f6:	f000 fafd 	bl	8018ef4 <__hi0bits>
 80188fa:	f8d8 6000 	ldr.w	r6, [r8]
 80188fe:	1a3f      	subs	r7, r7, r0
 8018900:	42b7      	cmp	r7, r6
 8018902:	dd64      	ble.n	80189ce <__gethex+0x260>
 8018904:	1bbf      	subs	r7, r7, r6
 8018906:	4639      	mov	r1, r7
 8018908:	4628      	mov	r0, r5
 801890a:	f000 fe0d 	bl	8019528 <__any_on>
 801890e:	4682      	mov	sl, r0
 8018910:	b178      	cbz	r0, 8018932 <__gethex+0x1c4>
 8018912:	1e7b      	subs	r3, r7, #1
 8018914:	1159      	asrs	r1, r3, #5
 8018916:	f003 021f 	and.w	r2, r3, #31
 801891a:	f04f 0a01 	mov.w	sl, #1
 801891e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8018922:	fa0a f202 	lsl.w	r2, sl, r2
 8018926:	420a      	tst	r2, r1
 8018928:	d003      	beq.n	8018932 <__gethex+0x1c4>
 801892a:	4553      	cmp	r3, sl
 801892c:	dc46      	bgt.n	80189bc <__gethex+0x24e>
 801892e:	f04f 0a02 	mov.w	sl, #2
 8018932:	4639      	mov	r1, r7
 8018934:	4628      	mov	r0, r5
 8018936:	f7ff fecb 	bl	80186d0 <rshift>
 801893a:	443c      	add	r4, r7
 801893c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018940:	42a3      	cmp	r3, r4
 8018942:	da52      	bge.n	80189ea <__gethex+0x27c>
 8018944:	4629      	mov	r1, r5
 8018946:	9802      	ldr	r0, [sp, #8]
 8018948:	f000 fa44 	bl	8018dd4 <_Bfree>
 801894c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801894e:	2300      	movs	r3, #0
 8018950:	6013      	str	r3, [r2, #0]
 8018952:	27a3      	movs	r7, #163	; 0xa3
 8018954:	e793      	b.n	801887e <__gethex+0x110>
 8018956:	3101      	adds	r1, #1
 8018958:	105b      	asrs	r3, r3, #1
 801895a:	e7b0      	b.n	80188be <__gethex+0x150>
 801895c:	1e73      	subs	r3, r6, #1
 801895e:	9305      	str	r3, [sp, #20]
 8018960:	9a07      	ldr	r2, [sp, #28]
 8018962:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8018966:	4293      	cmp	r3, r2
 8018968:	d018      	beq.n	801899c <__gethex+0x22e>
 801896a:	f1bb 0f20 	cmp.w	fp, #32
 801896e:	d107      	bne.n	8018980 <__gethex+0x212>
 8018970:	9b04      	ldr	r3, [sp, #16]
 8018972:	f8c3 a000 	str.w	sl, [r3]
 8018976:	3304      	adds	r3, #4
 8018978:	f04f 0a00 	mov.w	sl, #0
 801897c:	9304      	str	r3, [sp, #16]
 801897e:	46d3      	mov	fp, sl
 8018980:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8018984:	f7ff fede 	bl	8018744 <__hexdig_fun>
 8018988:	f000 000f 	and.w	r0, r0, #15
 801898c:	fa00 f00b 	lsl.w	r0, r0, fp
 8018990:	ea4a 0a00 	orr.w	sl, sl, r0
 8018994:	f10b 0b04 	add.w	fp, fp, #4
 8018998:	9b05      	ldr	r3, [sp, #20]
 801899a:	e00d      	b.n	80189b8 <__gethex+0x24a>
 801899c:	9b05      	ldr	r3, [sp, #20]
 801899e:	9a08      	ldr	r2, [sp, #32]
 80189a0:	4413      	add	r3, r2
 80189a2:	42bb      	cmp	r3, r7
 80189a4:	d3e1      	bcc.n	801896a <__gethex+0x1fc>
 80189a6:	4618      	mov	r0, r3
 80189a8:	9a01      	ldr	r2, [sp, #4]
 80189aa:	9903      	ldr	r1, [sp, #12]
 80189ac:	9309      	str	r3, [sp, #36]	; 0x24
 80189ae:	f000 ff3d 	bl	801982c <strncmp>
 80189b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80189b4:	2800      	cmp	r0, #0
 80189b6:	d1d8      	bne.n	801896a <__gethex+0x1fc>
 80189b8:	461e      	mov	r6, r3
 80189ba:	e791      	b.n	80188e0 <__gethex+0x172>
 80189bc:	1eb9      	subs	r1, r7, #2
 80189be:	4628      	mov	r0, r5
 80189c0:	f000 fdb2 	bl	8019528 <__any_on>
 80189c4:	2800      	cmp	r0, #0
 80189c6:	d0b2      	beq.n	801892e <__gethex+0x1c0>
 80189c8:	f04f 0a03 	mov.w	sl, #3
 80189cc:	e7b1      	b.n	8018932 <__gethex+0x1c4>
 80189ce:	da09      	bge.n	80189e4 <__gethex+0x276>
 80189d0:	1bf7      	subs	r7, r6, r7
 80189d2:	4629      	mov	r1, r5
 80189d4:	463a      	mov	r2, r7
 80189d6:	9802      	ldr	r0, [sp, #8]
 80189d8:	f000 fbc8 	bl	801916c <__lshift>
 80189dc:	1be4      	subs	r4, r4, r7
 80189de:	4605      	mov	r5, r0
 80189e0:	f100 0914 	add.w	r9, r0, #20
 80189e4:	f04f 0a00 	mov.w	sl, #0
 80189e8:	e7a8      	b.n	801893c <__gethex+0x1ce>
 80189ea:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80189ee:	42a0      	cmp	r0, r4
 80189f0:	dd6a      	ble.n	8018ac8 <__gethex+0x35a>
 80189f2:	1b04      	subs	r4, r0, r4
 80189f4:	42a6      	cmp	r6, r4
 80189f6:	dc2e      	bgt.n	8018a56 <__gethex+0x2e8>
 80189f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80189fc:	2b02      	cmp	r3, #2
 80189fe:	d022      	beq.n	8018a46 <__gethex+0x2d8>
 8018a00:	2b03      	cmp	r3, #3
 8018a02:	d024      	beq.n	8018a4e <__gethex+0x2e0>
 8018a04:	2b01      	cmp	r3, #1
 8018a06:	d115      	bne.n	8018a34 <__gethex+0x2c6>
 8018a08:	42a6      	cmp	r6, r4
 8018a0a:	d113      	bne.n	8018a34 <__gethex+0x2c6>
 8018a0c:	2e01      	cmp	r6, #1
 8018a0e:	dc0b      	bgt.n	8018a28 <__gethex+0x2ba>
 8018a10:	9a06      	ldr	r2, [sp, #24]
 8018a12:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018a16:	6013      	str	r3, [r2, #0]
 8018a18:	2301      	movs	r3, #1
 8018a1a:	612b      	str	r3, [r5, #16]
 8018a1c:	f8c9 3000 	str.w	r3, [r9]
 8018a20:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018a22:	2762      	movs	r7, #98	; 0x62
 8018a24:	601d      	str	r5, [r3, #0]
 8018a26:	e72a      	b.n	801887e <__gethex+0x110>
 8018a28:	1e71      	subs	r1, r6, #1
 8018a2a:	4628      	mov	r0, r5
 8018a2c:	f000 fd7c 	bl	8019528 <__any_on>
 8018a30:	2800      	cmp	r0, #0
 8018a32:	d1ed      	bne.n	8018a10 <__gethex+0x2a2>
 8018a34:	4629      	mov	r1, r5
 8018a36:	9802      	ldr	r0, [sp, #8]
 8018a38:	f000 f9cc 	bl	8018dd4 <_Bfree>
 8018a3c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018a3e:	2300      	movs	r3, #0
 8018a40:	6013      	str	r3, [r2, #0]
 8018a42:	2750      	movs	r7, #80	; 0x50
 8018a44:	e71b      	b.n	801887e <__gethex+0x110>
 8018a46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018a48:	2b00      	cmp	r3, #0
 8018a4a:	d0e1      	beq.n	8018a10 <__gethex+0x2a2>
 8018a4c:	e7f2      	b.n	8018a34 <__gethex+0x2c6>
 8018a4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018a50:	2b00      	cmp	r3, #0
 8018a52:	d1dd      	bne.n	8018a10 <__gethex+0x2a2>
 8018a54:	e7ee      	b.n	8018a34 <__gethex+0x2c6>
 8018a56:	1e67      	subs	r7, r4, #1
 8018a58:	f1ba 0f00 	cmp.w	sl, #0
 8018a5c:	d131      	bne.n	8018ac2 <__gethex+0x354>
 8018a5e:	b127      	cbz	r7, 8018a6a <__gethex+0x2fc>
 8018a60:	4639      	mov	r1, r7
 8018a62:	4628      	mov	r0, r5
 8018a64:	f000 fd60 	bl	8019528 <__any_on>
 8018a68:	4682      	mov	sl, r0
 8018a6a:	117a      	asrs	r2, r7, #5
 8018a6c:	2301      	movs	r3, #1
 8018a6e:	f007 071f 	and.w	r7, r7, #31
 8018a72:	fa03 f707 	lsl.w	r7, r3, r7
 8018a76:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8018a7a:	4621      	mov	r1, r4
 8018a7c:	421f      	tst	r7, r3
 8018a7e:	4628      	mov	r0, r5
 8018a80:	bf18      	it	ne
 8018a82:	f04a 0a02 	orrne.w	sl, sl, #2
 8018a86:	1b36      	subs	r6, r6, r4
 8018a88:	f7ff fe22 	bl	80186d0 <rshift>
 8018a8c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8018a90:	2702      	movs	r7, #2
 8018a92:	f1ba 0f00 	cmp.w	sl, #0
 8018a96:	d048      	beq.n	8018b2a <__gethex+0x3bc>
 8018a98:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018a9c:	2b02      	cmp	r3, #2
 8018a9e:	d015      	beq.n	8018acc <__gethex+0x35e>
 8018aa0:	2b03      	cmp	r3, #3
 8018aa2:	d017      	beq.n	8018ad4 <__gethex+0x366>
 8018aa4:	2b01      	cmp	r3, #1
 8018aa6:	d109      	bne.n	8018abc <__gethex+0x34e>
 8018aa8:	f01a 0f02 	tst.w	sl, #2
 8018aac:	d006      	beq.n	8018abc <__gethex+0x34e>
 8018aae:	f8d9 3000 	ldr.w	r3, [r9]
 8018ab2:	ea4a 0a03 	orr.w	sl, sl, r3
 8018ab6:	f01a 0f01 	tst.w	sl, #1
 8018aba:	d10e      	bne.n	8018ada <__gethex+0x36c>
 8018abc:	f047 0710 	orr.w	r7, r7, #16
 8018ac0:	e033      	b.n	8018b2a <__gethex+0x3bc>
 8018ac2:	f04f 0a01 	mov.w	sl, #1
 8018ac6:	e7d0      	b.n	8018a6a <__gethex+0x2fc>
 8018ac8:	2701      	movs	r7, #1
 8018aca:	e7e2      	b.n	8018a92 <__gethex+0x324>
 8018acc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018ace:	f1c3 0301 	rsb	r3, r3, #1
 8018ad2:	9315      	str	r3, [sp, #84]	; 0x54
 8018ad4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018ad6:	2b00      	cmp	r3, #0
 8018ad8:	d0f0      	beq.n	8018abc <__gethex+0x34e>
 8018ada:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8018ade:	f105 0314 	add.w	r3, r5, #20
 8018ae2:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8018ae6:	eb03 010a 	add.w	r1, r3, sl
 8018aea:	f04f 0c00 	mov.w	ip, #0
 8018aee:	4618      	mov	r0, r3
 8018af0:	f853 2b04 	ldr.w	r2, [r3], #4
 8018af4:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018af8:	d01c      	beq.n	8018b34 <__gethex+0x3c6>
 8018afa:	3201      	adds	r2, #1
 8018afc:	6002      	str	r2, [r0, #0]
 8018afe:	2f02      	cmp	r7, #2
 8018b00:	f105 0314 	add.w	r3, r5, #20
 8018b04:	d138      	bne.n	8018b78 <__gethex+0x40a>
 8018b06:	f8d8 2000 	ldr.w	r2, [r8]
 8018b0a:	3a01      	subs	r2, #1
 8018b0c:	42b2      	cmp	r2, r6
 8018b0e:	d10a      	bne.n	8018b26 <__gethex+0x3b8>
 8018b10:	1171      	asrs	r1, r6, #5
 8018b12:	2201      	movs	r2, #1
 8018b14:	f006 061f 	and.w	r6, r6, #31
 8018b18:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018b1c:	fa02 f606 	lsl.w	r6, r2, r6
 8018b20:	421e      	tst	r6, r3
 8018b22:	bf18      	it	ne
 8018b24:	4617      	movne	r7, r2
 8018b26:	f047 0720 	orr.w	r7, r7, #32
 8018b2a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018b2c:	601d      	str	r5, [r3, #0]
 8018b2e:	9b06      	ldr	r3, [sp, #24]
 8018b30:	601c      	str	r4, [r3, #0]
 8018b32:	e6a4      	b.n	801887e <__gethex+0x110>
 8018b34:	4299      	cmp	r1, r3
 8018b36:	f843 cc04 	str.w	ip, [r3, #-4]
 8018b3a:	d8d8      	bhi.n	8018aee <__gethex+0x380>
 8018b3c:	68ab      	ldr	r3, [r5, #8]
 8018b3e:	4599      	cmp	r9, r3
 8018b40:	db12      	blt.n	8018b68 <__gethex+0x3fa>
 8018b42:	6869      	ldr	r1, [r5, #4]
 8018b44:	9802      	ldr	r0, [sp, #8]
 8018b46:	3101      	adds	r1, #1
 8018b48:	f000 f910 	bl	8018d6c <_Balloc>
 8018b4c:	692a      	ldr	r2, [r5, #16]
 8018b4e:	3202      	adds	r2, #2
 8018b50:	f105 010c 	add.w	r1, r5, #12
 8018b54:	4683      	mov	fp, r0
 8018b56:	0092      	lsls	r2, r2, #2
 8018b58:	300c      	adds	r0, #12
 8018b5a:	f7fd f947 	bl	8015dec <memcpy>
 8018b5e:	4629      	mov	r1, r5
 8018b60:	9802      	ldr	r0, [sp, #8]
 8018b62:	f000 f937 	bl	8018dd4 <_Bfree>
 8018b66:	465d      	mov	r5, fp
 8018b68:	692b      	ldr	r3, [r5, #16]
 8018b6a:	1c5a      	adds	r2, r3, #1
 8018b6c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8018b70:	612a      	str	r2, [r5, #16]
 8018b72:	2201      	movs	r2, #1
 8018b74:	615a      	str	r2, [r3, #20]
 8018b76:	e7c2      	b.n	8018afe <__gethex+0x390>
 8018b78:	692a      	ldr	r2, [r5, #16]
 8018b7a:	454a      	cmp	r2, r9
 8018b7c:	dd0b      	ble.n	8018b96 <__gethex+0x428>
 8018b7e:	2101      	movs	r1, #1
 8018b80:	4628      	mov	r0, r5
 8018b82:	f7ff fda5 	bl	80186d0 <rshift>
 8018b86:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018b8a:	3401      	adds	r4, #1
 8018b8c:	42a3      	cmp	r3, r4
 8018b8e:	f6ff aed9 	blt.w	8018944 <__gethex+0x1d6>
 8018b92:	2701      	movs	r7, #1
 8018b94:	e7c7      	b.n	8018b26 <__gethex+0x3b8>
 8018b96:	f016 061f 	ands.w	r6, r6, #31
 8018b9a:	d0fa      	beq.n	8018b92 <__gethex+0x424>
 8018b9c:	449a      	add	sl, r3
 8018b9e:	f1c6 0620 	rsb	r6, r6, #32
 8018ba2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8018ba6:	f000 f9a5 	bl	8018ef4 <__hi0bits>
 8018baa:	42b0      	cmp	r0, r6
 8018bac:	dbe7      	blt.n	8018b7e <__gethex+0x410>
 8018bae:	e7f0      	b.n	8018b92 <__gethex+0x424>

08018bb0 <L_shift>:
 8018bb0:	f1c2 0208 	rsb	r2, r2, #8
 8018bb4:	0092      	lsls	r2, r2, #2
 8018bb6:	b570      	push	{r4, r5, r6, lr}
 8018bb8:	f1c2 0620 	rsb	r6, r2, #32
 8018bbc:	6843      	ldr	r3, [r0, #4]
 8018bbe:	6804      	ldr	r4, [r0, #0]
 8018bc0:	fa03 f506 	lsl.w	r5, r3, r6
 8018bc4:	432c      	orrs	r4, r5
 8018bc6:	40d3      	lsrs	r3, r2
 8018bc8:	6004      	str	r4, [r0, #0]
 8018bca:	f840 3f04 	str.w	r3, [r0, #4]!
 8018bce:	4288      	cmp	r0, r1
 8018bd0:	d3f4      	bcc.n	8018bbc <L_shift+0xc>
 8018bd2:	bd70      	pop	{r4, r5, r6, pc}

08018bd4 <__match>:
 8018bd4:	b530      	push	{r4, r5, lr}
 8018bd6:	6803      	ldr	r3, [r0, #0]
 8018bd8:	3301      	adds	r3, #1
 8018bda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018bde:	b914      	cbnz	r4, 8018be6 <__match+0x12>
 8018be0:	6003      	str	r3, [r0, #0]
 8018be2:	2001      	movs	r0, #1
 8018be4:	bd30      	pop	{r4, r5, pc}
 8018be6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018bea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8018bee:	2d19      	cmp	r5, #25
 8018bf0:	bf98      	it	ls
 8018bf2:	3220      	addls	r2, #32
 8018bf4:	42a2      	cmp	r2, r4
 8018bf6:	d0f0      	beq.n	8018bda <__match+0x6>
 8018bf8:	2000      	movs	r0, #0
 8018bfa:	e7f3      	b.n	8018be4 <__match+0x10>

08018bfc <__hexnan>:
 8018bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c00:	680b      	ldr	r3, [r1, #0]
 8018c02:	6801      	ldr	r1, [r0, #0]
 8018c04:	115f      	asrs	r7, r3, #5
 8018c06:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8018c0a:	f013 031f 	ands.w	r3, r3, #31
 8018c0e:	b087      	sub	sp, #28
 8018c10:	bf18      	it	ne
 8018c12:	3704      	addne	r7, #4
 8018c14:	2500      	movs	r5, #0
 8018c16:	1f3e      	subs	r6, r7, #4
 8018c18:	4682      	mov	sl, r0
 8018c1a:	4690      	mov	r8, r2
 8018c1c:	9301      	str	r3, [sp, #4]
 8018c1e:	f847 5c04 	str.w	r5, [r7, #-4]
 8018c22:	46b1      	mov	r9, r6
 8018c24:	4634      	mov	r4, r6
 8018c26:	9502      	str	r5, [sp, #8]
 8018c28:	46ab      	mov	fp, r5
 8018c2a:	784a      	ldrb	r2, [r1, #1]
 8018c2c:	1c4b      	adds	r3, r1, #1
 8018c2e:	9303      	str	r3, [sp, #12]
 8018c30:	b342      	cbz	r2, 8018c84 <__hexnan+0x88>
 8018c32:	4610      	mov	r0, r2
 8018c34:	9105      	str	r1, [sp, #20]
 8018c36:	9204      	str	r2, [sp, #16]
 8018c38:	f7ff fd84 	bl	8018744 <__hexdig_fun>
 8018c3c:	2800      	cmp	r0, #0
 8018c3e:	d143      	bne.n	8018cc8 <__hexnan+0xcc>
 8018c40:	9a04      	ldr	r2, [sp, #16]
 8018c42:	9905      	ldr	r1, [sp, #20]
 8018c44:	2a20      	cmp	r2, #32
 8018c46:	d818      	bhi.n	8018c7a <__hexnan+0x7e>
 8018c48:	9b02      	ldr	r3, [sp, #8]
 8018c4a:	459b      	cmp	fp, r3
 8018c4c:	dd13      	ble.n	8018c76 <__hexnan+0x7a>
 8018c4e:	454c      	cmp	r4, r9
 8018c50:	d206      	bcs.n	8018c60 <__hexnan+0x64>
 8018c52:	2d07      	cmp	r5, #7
 8018c54:	dc04      	bgt.n	8018c60 <__hexnan+0x64>
 8018c56:	462a      	mov	r2, r5
 8018c58:	4649      	mov	r1, r9
 8018c5a:	4620      	mov	r0, r4
 8018c5c:	f7ff ffa8 	bl	8018bb0 <L_shift>
 8018c60:	4544      	cmp	r4, r8
 8018c62:	d944      	bls.n	8018cee <__hexnan+0xf2>
 8018c64:	2300      	movs	r3, #0
 8018c66:	f1a4 0904 	sub.w	r9, r4, #4
 8018c6a:	f844 3c04 	str.w	r3, [r4, #-4]
 8018c6e:	f8cd b008 	str.w	fp, [sp, #8]
 8018c72:	464c      	mov	r4, r9
 8018c74:	461d      	mov	r5, r3
 8018c76:	9903      	ldr	r1, [sp, #12]
 8018c78:	e7d7      	b.n	8018c2a <__hexnan+0x2e>
 8018c7a:	2a29      	cmp	r2, #41	; 0x29
 8018c7c:	d14a      	bne.n	8018d14 <__hexnan+0x118>
 8018c7e:	3102      	adds	r1, #2
 8018c80:	f8ca 1000 	str.w	r1, [sl]
 8018c84:	f1bb 0f00 	cmp.w	fp, #0
 8018c88:	d044      	beq.n	8018d14 <__hexnan+0x118>
 8018c8a:	454c      	cmp	r4, r9
 8018c8c:	d206      	bcs.n	8018c9c <__hexnan+0xa0>
 8018c8e:	2d07      	cmp	r5, #7
 8018c90:	dc04      	bgt.n	8018c9c <__hexnan+0xa0>
 8018c92:	462a      	mov	r2, r5
 8018c94:	4649      	mov	r1, r9
 8018c96:	4620      	mov	r0, r4
 8018c98:	f7ff ff8a 	bl	8018bb0 <L_shift>
 8018c9c:	4544      	cmp	r4, r8
 8018c9e:	d928      	bls.n	8018cf2 <__hexnan+0xf6>
 8018ca0:	4643      	mov	r3, r8
 8018ca2:	f854 2b04 	ldr.w	r2, [r4], #4
 8018ca6:	f843 2b04 	str.w	r2, [r3], #4
 8018caa:	42a6      	cmp	r6, r4
 8018cac:	d2f9      	bcs.n	8018ca2 <__hexnan+0xa6>
 8018cae:	2200      	movs	r2, #0
 8018cb0:	f843 2b04 	str.w	r2, [r3], #4
 8018cb4:	429e      	cmp	r6, r3
 8018cb6:	d2fb      	bcs.n	8018cb0 <__hexnan+0xb4>
 8018cb8:	6833      	ldr	r3, [r6, #0]
 8018cba:	b91b      	cbnz	r3, 8018cc4 <__hexnan+0xc8>
 8018cbc:	4546      	cmp	r6, r8
 8018cbe:	d127      	bne.n	8018d10 <__hexnan+0x114>
 8018cc0:	2301      	movs	r3, #1
 8018cc2:	6033      	str	r3, [r6, #0]
 8018cc4:	2005      	movs	r0, #5
 8018cc6:	e026      	b.n	8018d16 <__hexnan+0x11a>
 8018cc8:	3501      	adds	r5, #1
 8018cca:	2d08      	cmp	r5, #8
 8018ccc:	f10b 0b01 	add.w	fp, fp, #1
 8018cd0:	dd06      	ble.n	8018ce0 <__hexnan+0xe4>
 8018cd2:	4544      	cmp	r4, r8
 8018cd4:	d9cf      	bls.n	8018c76 <__hexnan+0x7a>
 8018cd6:	2300      	movs	r3, #0
 8018cd8:	f844 3c04 	str.w	r3, [r4, #-4]
 8018cdc:	2501      	movs	r5, #1
 8018cde:	3c04      	subs	r4, #4
 8018ce0:	6822      	ldr	r2, [r4, #0]
 8018ce2:	f000 000f 	and.w	r0, r0, #15
 8018ce6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8018cea:	6020      	str	r0, [r4, #0]
 8018cec:	e7c3      	b.n	8018c76 <__hexnan+0x7a>
 8018cee:	2508      	movs	r5, #8
 8018cf0:	e7c1      	b.n	8018c76 <__hexnan+0x7a>
 8018cf2:	9b01      	ldr	r3, [sp, #4]
 8018cf4:	2b00      	cmp	r3, #0
 8018cf6:	d0df      	beq.n	8018cb8 <__hexnan+0xbc>
 8018cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8018cfc:	f1c3 0320 	rsb	r3, r3, #32
 8018d00:	fa22 f303 	lsr.w	r3, r2, r3
 8018d04:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8018d08:	401a      	ands	r2, r3
 8018d0a:	f847 2c04 	str.w	r2, [r7, #-4]
 8018d0e:	e7d3      	b.n	8018cb8 <__hexnan+0xbc>
 8018d10:	3e04      	subs	r6, #4
 8018d12:	e7d1      	b.n	8018cb8 <__hexnan+0xbc>
 8018d14:	2004      	movs	r0, #4
 8018d16:	b007      	add	sp, #28
 8018d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018d1c <__locale_ctype_ptr_l>:
 8018d1c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8018d20:	4770      	bx	lr

08018d22 <__localeconv_l>:
 8018d22:	30f0      	adds	r0, #240	; 0xf0
 8018d24:	4770      	bx	lr
	...

08018d28 <_localeconv_r>:
 8018d28:	4b04      	ldr	r3, [pc, #16]	; (8018d3c <_localeconv_r+0x14>)
 8018d2a:	681b      	ldr	r3, [r3, #0]
 8018d2c:	6a18      	ldr	r0, [r3, #32]
 8018d2e:	4b04      	ldr	r3, [pc, #16]	; (8018d40 <_localeconv_r+0x18>)
 8018d30:	2800      	cmp	r0, #0
 8018d32:	bf08      	it	eq
 8018d34:	4618      	moveq	r0, r3
 8018d36:	30f0      	adds	r0, #240	; 0xf0
 8018d38:	4770      	bx	lr
 8018d3a:	bf00      	nop
 8018d3c:	200009ac 	.word	0x200009ac
 8018d40:	20000a10 	.word	0x20000a10

08018d44 <__ascii_mbtowc>:
 8018d44:	b082      	sub	sp, #8
 8018d46:	b901      	cbnz	r1, 8018d4a <__ascii_mbtowc+0x6>
 8018d48:	a901      	add	r1, sp, #4
 8018d4a:	b142      	cbz	r2, 8018d5e <__ascii_mbtowc+0x1a>
 8018d4c:	b14b      	cbz	r3, 8018d62 <__ascii_mbtowc+0x1e>
 8018d4e:	7813      	ldrb	r3, [r2, #0]
 8018d50:	600b      	str	r3, [r1, #0]
 8018d52:	7812      	ldrb	r2, [r2, #0]
 8018d54:	1c10      	adds	r0, r2, #0
 8018d56:	bf18      	it	ne
 8018d58:	2001      	movne	r0, #1
 8018d5a:	b002      	add	sp, #8
 8018d5c:	4770      	bx	lr
 8018d5e:	4610      	mov	r0, r2
 8018d60:	e7fb      	b.n	8018d5a <__ascii_mbtowc+0x16>
 8018d62:	f06f 0001 	mvn.w	r0, #1
 8018d66:	e7f8      	b.n	8018d5a <__ascii_mbtowc+0x16>

08018d68 <__malloc_lock>:
 8018d68:	4770      	bx	lr

08018d6a <__malloc_unlock>:
 8018d6a:	4770      	bx	lr

08018d6c <_Balloc>:
 8018d6c:	b570      	push	{r4, r5, r6, lr}
 8018d6e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018d70:	4604      	mov	r4, r0
 8018d72:	460e      	mov	r6, r1
 8018d74:	b93d      	cbnz	r5, 8018d86 <_Balloc+0x1a>
 8018d76:	2010      	movs	r0, #16
 8018d78:	f7fd f828 	bl	8015dcc <malloc>
 8018d7c:	6260      	str	r0, [r4, #36]	; 0x24
 8018d7e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8018d82:	6005      	str	r5, [r0, #0]
 8018d84:	60c5      	str	r5, [r0, #12]
 8018d86:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8018d88:	68eb      	ldr	r3, [r5, #12]
 8018d8a:	b183      	cbz	r3, 8018dae <_Balloc+0x42>
 8018d8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018d8e:	68db      	ldr	r3, [r3, #12]
 8018d90:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8018d94:	b9b8      	cbnz	r0, 8018dc6 <_Balloc+0x5a>
 8018d96:	2101      	movs	r1, #1
 8018d98:	fa01 f506 	lsl.w	r5, r1, r6
 8018d9c:	1d6a      	adds	r2, r5, #5
 8018d9e:	0092      	lsls	r2, r2, #2
 8018da0:	4620      	mov	r0, r4
 8018da2:	f000 fbe2 	bl	801956a <_calloc_r>
 8018da6:	b160      	cbz	r0, 8018dc2 <_Balloc+0x56>
 8018da8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8018dac:	e00e      	b.n	8018dcc <_Balloc+0x60>
 8018dae:	2221      	movs	r2, #33	; 0x21
 8018db0:	2104      	movs	r1, #4
 8018db2:	4620      	mov	r0, r4
 8018db4:	f000 fbd9 	bl	801956a <_calloc_r>
 8018db8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018dba:	60e8      	str	r0, [r5, #12]
 8018dbc:	68db      	ldr	r3, [r3, #12]
 8018dbe:	2b00      	cmp	r3, #0
 8018dc0:	d1e4      	bne.n	8018d8c <_Balloc+0x20>
 8018dc2:	2000      	movs	r0, #0
 8018dc4:	bd70      	pop	{r4, r5, r6, pc}
 8018dc6:	6802      	ldr	r2, [r0, #0]
 8018dc8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8018dcc:	2300      	movs	r3, #0
 8018dce:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018dd2:	e7f7      	b.n	8018dc4 <_Balloc+0x58>

08018dd4 <_Bfree>:
 8018dd4:	b570      	push	{r4, r5, r6, lr}
 8018dd6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8018dd8:	4606      	mov	r6, r0
 8018dda:	460d      	mov	r5, r1
 8018ddc:	b93c      	cbnz	r4, 8018dee <_Bfree+0x1a>
 8018dde:	2010      	movs	r0, #16
 8018de0:	f7fc fff4 	bl	8015dcc <malloc>
 8018de4:	6270      	str	r0, [r6, #36]	; 0x24
 8018de6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018dea:	6004      	str	r4, [r0, #0]
 8018dec:	60c4      	str	r4, [r0, #12]
 8018dee:	b13d      	cbz	r5, 8018e00 <_Bfree+0x2c>
 8018df0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8018df2:	686a      	ldr	r2, [r5, #4]
 8018df4:	68db      	ldr	r3, [r3, #12]
 8018df6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018dfa:	6029      	str	r1, [r5, #0]
 8018dfc:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8018e00:	bd70      	pop	{r4, r5, r6, pc}

08018e02 <__multadd>:
 8018e02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018e06:	690d      	ldr	r5, [r1, #16]
 8018e08:	461f      	mov	r7, r3
 8018e0a:	4606      	mov	r6, r0
 8018e0c:	460c      	mov	r4, r1
 8018e0e:	f101 0c14 	add.w	ip, r1, #20
 8018e12:	2300      	movs	r3, #0
 8018e14:	f8dc 0000 	ldr.w	r0, [ip]
 8018e18:	b281      	uxth	r1, r0
 8018e1a:	fb02 7101 	mla	r1, r2, r1, r7
 8018e1e:	0c0f      	lsrs	r7, r1, #16
 8018e20:	0c00      	lsrs	r0, r0, #16
 8018e22:	fb02 7000 	mla	r0, r2, r0, r7
 8018e26:	b289      	uxth	r1, r1
 8018e28:	3301      	adds	r3, #1
 8018e2a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8018e2e:	429d      	cmp	r5, r3
 8018e30:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8018e34:	f84c 1b04 	str.w	r1, [ip], #4
 8018e38:	dcec      	bgt.n	8018e14 <__multadd+0x12>
 8018e3a:	b1d7      	cbz	r7, 8018e72 <__multadd+0x70>
 8018e3c:	68a3      	ldr	r3, [r4, #8]
 8018e3e:	42ab      	cmp	r3, r5
 8018e40:	dc12      	bgt.n	8018e68 <__multadd+0x66>
 8018e42:	6861      	ldr	r1, [r4, #4]
 8018e44:	4630      	mov	r0, r6
 8018e46:	3101      	adds	r1, #1
 8018e48:	f7ff ff90 	bl	8018d6c <_Balloc>
 8018e4c:	6922      	ldr	r2, [r4, #16]
 8018e4e:	3202      	adds	r2, #2
 8018e50:	f104 010c 	add.w	r1, r4, #12
 8018e54:	4680      	mov	r8, r0
 8018e56:	0092      	lsls	r2, r2, #2
 8018e58:	300c      	adds	r0, #12
 8018e5a:	f7fc ffc7 	bl	8015dec <memcpy>
 8018e5e:	4621      	mov	r1, r4
 8018e60:	4630      	mov	r0, r6
 8018e62:	f7ff ffb7 	bl	8018dd4 <_Bfree>
 8018e66:	4644      	mov	r4, r8
 8018e68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018e6c:	3501      	adds	r5, #1
 8018e6e:	615f      	str	r7, [r3, #20]
 8018e70:	6125      	str	r5, [r4, #16]
 8018e72:	4620      	mov	r0, r4
 8018e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018e78 <__s2b>:
 8018e78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018e7c:	460c      	mov	r4, r1
 8018e7e:	4615      	mov	r5, r2
 8018e80:	461f      	mov	r7, r3
 8018e82:	2209      	movs	r2, #9
 8018e84:	3308      	adds	r3, #8
 8018e86:	4606      	mov	r6, r0
 8018e88:	fb93 f3f2 	sdiv	r3, r3, r2
 8018e8c:	2100      	movs	r1, #0
 8018e8e:	2201      	movs	r2, #1
 8018e90:	429a      	cmp	r2, r3
 8018e92:	db20      	blt.n	8018ed6 <__s2b+0x5e>
 8018e94:	4630      	mov	r0, r6
 8018e96:	f7ff ff69 	bl	8018d6c <_Balloc>
 8018e9a:	9b08      	ldr	r3, [sp, #32]
 8018e9c:	6143      	str	r3, [r0, #20]
 8018e9e:	2d09      	cmp	r5, #9
 8018ea0:	f04f 0301 	mov.w	r3, #1
 8018ea4:	6103      	str	r3, [r0, #16]
 8018ea6:	dd19      	ble.n	8018edc <__s2b+0x64>
 8018ea8:	f104 0809 	add.w	r8, r4, #9
 8018eac:	46c1      	mov	r9, r8
 8018eae:	442c      	add	r4, r5
 8018eb0:	f819 3b01 	ldrb.w	r3, [r9], #1
 8018eb4:	4601      	mov	r1, r0
 8018eb6:	3b30      	subs	r3, #48	; 0x30
 8018eb8:	220a      	movs	r2, #10
 8018eba:	4630      	mov	r0, r6
 8018ebc:	f7ff ffa1 	bl	8018e02 <__multadd>
 8018ec0:	45a1      	cmp	r9, r4
 8018ec2:	d1f5      	bne.n	8018eb0 <__s2b+0x38>
 8018ec4:	eb08 0405 	add.w	r4, r8, r5
 8018ec8:	3c08      	subs	r4, #8
 8018eca:	1b2d      	subs	r5, r5, r4
 8018ecc:	1963      	adds	r3, r4, r5
 8018ece:	42bb      	cmp	r3, r7
 8018ed0:	db07      	blt.n	8018ee2 <__s2b+0x6a>
 8018ed2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018ed6:	0052      	lsls	r2, r2, #1
 8018ed8:	3101      	adds	r1, #1
 8018eda:	e7d9      	b.n	8018e90 <__s2b+0x18>
 8018edc:	340a      	adds	r4, #10
 8018ede:	2509      	movs	r5, #9
 8018ee0:	e7f3      	b.n	8018eca <__s2b+0x52>
 8018ee2:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018ee6:	4601      	mov	r1, r0
 8018ee8:	3b30      	subs	r3, #48	; 0x30
 8018eea:	220a      	movs	r2, #10
 8018eec:	4630      	mov	r0, r6
 8018eee:	f7ff ff88 	bl	8018e02 <__multadd>
 8018ef2:	e7eb      	b.n	8018ecc <__s2b+0x54>

08018ef4 <__hi0bits>:
 8018ef4:	0c02      	lsrs	r2, r0, #16
 8018ef6:	0412      	lsls	r2, r2, #16
 8018ef8:	4603      	mov	r3, r0
 8018efa:	b9b2      	cbnz	r2, 8018f2a <__hi0bits+0x36>
 8018efc:	0403      	lsls	r3, r0, #16
 8018efe:	2010      	movs	r0, #16
 8018f00:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8018f04:	bf04      	itt	eq
 8018f06:	021b      	lsleq	r3, r3, #8
 8018f08:	3008      	addeq	r0, #8
 8018f0a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8018f0e:	bf04      	itt	eq
 8018f10:	011b      	lsleq	r3, r3, #4
 8018f12:	3004      	addeq	r0, #4
 8018f14:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8018f18:	bf04      	itt	eq
 8018f1a:	009b      	lsleq	r3, r3, #2
 8018f1c:	3002      	addeq	r0, #2
 8018f1e:	2b00      	cmp	r3, #0
 8018f20:	db06      	blt.n	8018f30 <__hi0bits+0x3c>
 8018f22:	005b      	lsls	r3, r3, #1
 8018f24:	d503      	bpl.n	8018f2e <__hi0bits+0x3a>
 8018f26:	3001      	adds	r0, #1
 8018f28:	4770      	bx	lr
 8018f2a:	2000      	movs	r0, #0
 8018f2c:	e7e8      	b.n	8018f00 <__hi0bits+0xc>
 8018f2e:	2020      	movs	r0, #32
 8018f30:	4770      	bx	lr

08018f32 <__lo0bits>:
 8018f32:	6803      	ldr	r3, [r0, #0]
 8018f34:	f013 0207 	ands.w	r2, r3, #7
 8018f38:	4601      	mov	r1, r0
 8018f3a:	d00b      	beq.n	8018f54 <__lo0bits+0x22>
 8018f3c:	07da      	lsls	r2, r3, #31
 8018f3e:	d423      	bmi.n	8018f88 <__lo0bits+0x56>
 8018f40:	0798      	lsls	r0, r3, #30
 8018f42:	bf49      	itett	mi
 8018f44:	085b      	lsrmi	r3, r3, #1
 8018f46:	089b      	lsrpl	r3, r3, #2
 8018f48:	2001      	movmi	r0, #1
 8018f4a:	600b      	strmi	r3, [r1, #0]
 8018f4c:	bf5c      	itt	pl
 8018f4e:	600b      	strpl	r3, [r1, #0]
 8018f50:	2002      	movpl	r0, #2
 8018f52:	4770      	bx	lr
 8018f54:	b298      	uxth	r0, r3
 8018f56:	b9a8      	cbnz	r0, 8018f84 <__lo0bits+0x52>
 8018f58:	0c1b      	lsrs	r3, r3, #16
 8018f5a:	2010      	movs	r0, #16
 8018f5c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8018f60:	bf04      	itt	eq
 8018f62:	0a1b      	lsreq	r3, r3, #8
 8018f64:	3008      	addeq	r0, #8
 8018f66:	071a      	lsls	r2, r3, #28
 8018f68:	bf04      	itt	eq
 8018f6a:	091b      	lsreq	r3, r3, #4
 8018f6c:	3004      	addeq	r0, #4
 8018f6e:	079a      	lsls	r2, r3, #30
 8018f70:	bf04      	itt	eq
 8018f72:	089b      	lsreq	r3, r3, #2
 8018f74:	3002      	addeq	r0, #2
 8018f76:	07da      	lsls	r2, r3, #31
 8018f78:	d402      	bmi.n	8018f80 <__lo0bits+0x4e>
 8018f7a:	085b      	lsrs	r3, r3, #1
 8018f7c:	d006      	beq.n	8018f8c <__lo0bits+0x5a>
 8018f7e:	3001      	adds	r0, #1
 8018f80:	600b      	str	r3, [r1, #0]
 8018f82:	4770      	bx	lr
 8018f84:	4610      	mov	r0, r2
 8018f86:	e7e9      	b.n	8018f5c <__lo0bits+0x2a>
 8018f88:	2000      	movs	r0, #0
 8018f8a:	4770      	bx	lr
 8018f8c:	2020      	movs	r0, #32
 8018f8e:	4770      	bx	lr

08018f90 <__i2b>:
 8018f90:	b510      	push	{r4, lr}
 8018f92:	460c      	mov	r4, r1
 8018f94:	2101      	movs	r1, #1
 8018f96:	f7ff fee9 	bl	8018d6c <_Balloc>
 8018f9a:	2201      	movs	r2, #1
 8018f9c:	6144      	str	r4, [r0, #20]
 8018f9e:	6102      	str	r2, [r0, #16]
 8018fa0:	bd10      	pop	{r4, pc}

08018fa2 <__multiply>:
 8018fa2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fa6:	4614      	mov	r4, r2
 8018fa8:	690a      	ldr	r2, [r1, #16]
 8018faa:	6923      	ldr	r3, [r4, #16]
 8018fac:	429a      	cmp	r2, r3
 8018fae:	bfb8      	it	lt
 8018fb0:	460b      	movlt	r3, r1
 8018fb2:	4688      	mov	r8, r1
 8018fb4:	bfbc      	itt	lt
 8018fb6:	46a0      	movlt	r8, r4
 8018fb8:	461c      	movlt	r4, r3
 8018fba:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8018fbe:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8018fc2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018fc6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018fca:	eb07 0609 	add.w	r6, r7, r9
 8018fce:	42b3      	cmp	r3, r6
 8018fd0:	bfb8      	it	lt
 8018fd2:	3101      	addlt	r1, #1
 8018fd4:	f7ff feca 	bl	8018d6c <_Balloc>
 8018fd8:	f100 0514 	add.w	r5, r0, #20
 8018fdc:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8018fe0:	462b      	mov	r3, r5
 8018fe2:	2200      	movs	r2, #0
 8018fe4:	4573      	cmp	r3, lr
 8018fe6:	d316      	bcc.n	8019016 <__multiply+0x74>
 8018fe8:	f104 0214 	add.w	r2, r4, #20
 8018fec:	f108 0114 	add.w	r1, r8, #20
 8018ff0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8018ff4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8018ff8:	9300      	str	r3, [sp, #0]
 8018ffa:	9b00      	ldr	r3, [sp, #0]
 8018ffc:	9201      	str	r2, [sp, #4]
 8018ffe:	4293      	cmp	r3, r2
 8019000:	d80c      	bhi.n	801901c <__multiply+0x7a>
 8019002:	2e00      	cmp	r6, #0
 8019004:	dd03      	ble.n	801900e <__multiply+0x6c>
 8019006:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801900a:	2b00      	cmp	r3, #0
 801900c:	d05d      	beq.n	80190ca <__multiply+0x128>
 801900e:	6106      	str	r6, [r0, #16]
 8019010:	b003      	add	sp, #12
 8019012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019016:	f843 2b04 	str.w	r2, [r3], #4
 801901a:	e7e3      	b.n	8018fe4 <__multiply+0x42>
 801901c:	f8b2 b000 	ldrh.w	fp, [r2]
 8019020:	f1bb 0f00 	cmp.w	fp, #0
 8019024:	d023      	beq.n	801906e <__multiply+0xcc>
 8019026:	4689      	mov	r9, r1
 8019028:	46ac      	mov	ip, r5
 801902a:	f04f 0800 	mov.w	r8, #0
 801902e:	f859 4b04 	ldr.w	r4, [r9], #4
 8019032:	f8dc a000 	ldr.w	sl, [ip]
 8019036:	b2a3      	uxth	r3, r4
 8019038:	fa1f fa8a 	uxth.w	sl, sl
 801903c:	fb0b a303 	mla	r3, fp, r3, sl
 8019040:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8019044:	f8dc 4000 	ldr.w	r4, [ip]
 8019048:	4443      	add	r3, r8
 801904a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801904e:	fb0b 840a 	mla	r4, fp, sl, r8
 8019052:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8019056:	46e2      	mov	sl, ip
 8019058:	b29b      	uxth	r3, r3
 801905a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801905e:	454f      	cmp	r7, r9
 8019060:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8019064:	f84a 3b04 	str.w	r3, [sl], #4
 8019068:	d82b      	bhi.n	80190c2 <__multiply+0x120>
 801906a:	f8cc 8004 	str.w	r8, [ip, #4]
 801906e:	9b01      	ldr	r3, [sp, #4]
 8019070:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8019074:	3204      	adds	r2, #4
 8019076:	f1ba 0f00 	cmp.w	sl, #0
 801907a:	d020      	beq.n	80190be <__multiply+0x11c>
 801907c:	682b      	ldr	r3, [r5, #0]
 801907e:	4689      	mov	r9, r1
 8019080:	46a8      	mov	r8, r5
 8019082:	f04f 0b00 	mov.w	fp, #0
 8019086:	f8b9 c000 	ldrh.w	ip, [r9]
 801908a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801908e:	fb0a 440c 	mla	r4, sl, ip, r4
 8019092:	445c      	add	r4, fp
 8019094:	46c4      	mov	ip, r8
 8019096:	b29b      	uxth	r3, r3
 8019098:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801909c:	f84c 3b04 	str.w	r3, [ip], #4
 80190a0:	f859 3b04 	ldr.w	r3, [r9], #4
 80190a4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80190a8:	0c1b      	lsrs	r3, r3, #16
 80190aa:	fb0a b303 	mla	r3, sl, r3, fp
 80190ae:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80190b2:	454f      	cmp	r7, r9
 80190b4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80190b8:	d805      	bhi.n	80190c6 <__multiply+0x124>
 80190ba:	f8c8 3004 	str.w	r3, [r8, #4]
 80190be:	3504      	adds	r5, #4
 80190c0:	e79b      	b.n	8018ffa <__multiply+0x58>
 80190c2:	46d4      	mov	ip, sl
 80190c4:	e7b3      	b.n	801902e <__multiply+0x8c>
 80190c6:	46e0      	mov	r8, ip
 80190c8:	e7dd      	b.n	8019086 <__multiply+0xe4>
 80190ca:	3e01      	subs	r6, #1
 80190cc:	e799      	b.n	8019002 <__multiply+0x60>
	...

080190d0 <__pow5mult>:
 80190d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80190d4:	4615      	mov	r5, r2
 80190d6:	f012 0203 	ands.w	r2, r2, #3
 80190da:	4606      	mov	r6, r0
 80190dc:	460f      	mov	r7, r1
 80190de:	d007      	beq.n	80190f0 <__pow5mult+0x20>
 80190e0:	3a01      	subs	r2, #1
 80190e2:	4c21      	ldr	r4, [pc, #132]	; (8019168 <__pow5mult+0x98>)
 80190e4:	2300      	movs	r3, #0
 80190e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80190ea:	f7ff fe8a 	bl	8018e02 <__multadd>
 80190ee:	4607      	mov	r7, r0
 80190f0:	10ad      	asrs	r5, r5, #2
 80190f2:	d035      	beq.n	8019160 <__pow5mult+0x90>
 80190f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80190f6:	b93c      	cbnz	r4, 8019108 <__pow5mult+0x38>
 80190f8:	2010      	movs	r0, #16
 80190fa:	f7fc fe67 	bl	8015dcc <malloc>
 80190fe:	6270      	str	r0, [r6, #36]	; 0x24
 8019100:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019104:	6004      	str	r4, [r0, #0]
 8019106:	60c4      	str	r4, [r0, #12]
 8019108:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801910c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019110:	b94c      	cbnz	r4, 8019126 <__pow5mult+0x56>
 8019112:	f240 2171 	movw	r1, #625	; 0x271
 8019116:	4630      	mov	r0, r6
 8019118:	f7ff ff3a 	bl	8018f90 <__i2b>
 801911c:	2300      	movs	r3, #0
 801911e:	f8c8 0008 	str.w	r0, [r8, #8]
 8019122:	4604      	mov	r4, r0
 8019124:	6003      	str	r3, [r0, #0]
 8019126:	f04f 0800 	mov.w	r8, #0
 801912a:	07eb      	lsls	r3, r5, #31
 801912c:	d50a      	bpl.n	8019144 <__pow5mult+0x74>
 801912e:	4639      	mov	r1, r7
 8019130:	4622      	mov	r2, r4
 8019132:	4630      	mov	r0, r6
 8019134:	f7ff ff35 	bl	8018fa2 <__multiply>
 8019138:	4639      	mov	r1, r7
 801913a:	4681      	mov	r9, r0
 801913c:	4630      	mov	r0, r6
 801913e:	f7ff fe49 	bl	8018dd4 <_Bfree>
 8019142:	464f      	mov	r7, r9
 8019144:	106d      	asrs	r5, r5, #1
 8019146:	d00b      	beq.n	8019160 <__pow5mult+0x90>
 8019148:	6820      	ldr	r0, [r4, #0]
 801914a:	b938      	cbnz	r0, 801915c <__pow5mult+0x8c>
 801914c:	4622      	mov	r2, r4
 801914e:	4621      	mov	r1, r4
 8019150:	4630      	mov	r0, r6
 8019152:	f7ff ff26 	bl	8018fa2 <__multiply>
 8019156:	6020      	str	r0, [r4, #0]
 8019158:	f8c0 8000 	str.w	r8, [r0]
 801915c:	4604      	mov	r4, r0
 801915e:	e7e4      	b.n	801912a <__pow5mult+0x5a>
 8019160:	4638      	mov	r0, r7
 8019162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019166:	bf00      	nop
 8019168:	0801b740 	.word	0x0801b740

0801916c <__lshift>:
 801916c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019170:	460c      	mov	r4, r1
 8019172:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8019176:	6923      	ldr	r3, [r4, #16]
 8019178:	6849      	ldr	r1, [r1, #4]
 801917a:	eb0a 0903 	add.w	r9, sl, r3
 801917e:	68a3      	ldr	r3, [r4, #8]
 8019180:	4607      	mov	r7, r0
 8019182:	4616      	mov	r6, r2
 8019184:	f109 0501 	add.w	r5, r9, #1
 8019188:	42ab      	cmp	r3, r5
 801918a:	db32      	blt.n	80191f2 <__lshift+0x86>
 801918c:	4638      	mov	r0, r7
 801918e:	f7ff fded 	bl	8018d6c <_Balloc>
 8019192:	2300      	movs	r3, #0
 8019194:	4680      	mov	r8, r0
 8019196:	f100 0114 	add.w	r1, r0, #20
 801919a:	461a      	mov	r2, r3
 801919c:	4553      	cmp	r3, sl
 801919e:	db2b      	blt.n	80191f8 <__lshift+0x8c>
 80191a0:	6920      	ldr	r0, [r4, #16]
 80191a2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80191a6:	f104 0314 	add.w	r3, r4, #20
 80191aa:	f016 021f 	ands.w	r2, r6, #31
 80191ae:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80191b2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80191b6:	d025      	beq.n	8019204 <__lshift+0x98>
 80191b8:	f1c2 0e20 	rsb	lr, r2, #32
 80191bc:	2000      	movs	r0, #0
 80191be:	681e      	ldr	r6, [r3, #0]
 80191c0:	468a      	mov	sl, r1
 80191c2:	4096      	lsls	r6, r2
 80191c4:	4330      	orrs	r0, r6
 80191c6:	f84a 0b04 	str.w	r0, [sl], #4
 80191ca:	f853 0b04 	ldr.w	r0, [r3], #4
 80191ce:	459c      	cmp	ip, r3
 80191d0:	fa20 f00e 	lsr.w	r0, r0, lr
 80191d4:	d814      	bhi.n	8019200 <__lshift+0x94>
 80191d6:	6048      	str	r0, [r1, #4]
 80191d8:	b108      	cbz	r0, 80191de <__lshift+0x72>
 80191da:	f109 0502 	add.w	r5, r9, #2
 80191de:	3d01      	subs	r5, #1
 80191e0:	4638      	mov	r0, r7
 80191e2:	f8c8 5010 	str.w	r5, [r8, #16]
 80191e6:	4621      	mov	r1, r4
 80191e8:	f7ff fdf4 	bl	8018dd4 <_Bfree>
 80191ec:	4640      	mov	r0, r8
 80191ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80191f2:	3101      	adds	r1, #1
 80191f4:	005b      	lsls	r3, r3, #1
 80191f6:	e7c7      	b.n	8019188 <__lshift+0x1c>
 80191f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80191fc:	3301      	adds	r3, #1
 80191fe:	e7cd      	b.n	801919c <__lshift+0x30>
 8019200:	4651      	mov	r1, sl
 8019202:	e7dc      	b.n	80191be <__lshift+0x52>
 8019204:	3904      	subs	r1, #4
 8019206:	f853 2b04 	ldr.w	r2, [r3], #4
 801920a:	f841 2f04 	str.w	r2, [r1, #4]!
 801920e:	459c      	cmp	ip, r3
 8019210:	d8f9      	bhi.n	8019206 <__lshift+0x9a>
 8019212:	e7e4      	b.n	80191de <__lshift+0x72>

08019214 <__mcmp>:
 8019214:	6903      	ldr	r3, [r0, #16]
 8019216:	690a      	ldr	r2, [r1, #16]
 8019218:	1a9b      	subs	r3, r3, r2
 801921a:	b530      	push	{r4, r5, lr}
 801921c:	d10c      	bne.n	8019238 <__mcmp+0x24>
 801921e:	0092      	lsls	r2, r2, #2
 8019220:	3014      	adds	r0, #20
 8019222:	3114      	adds	r1, #20
 8019224:	1884      	adds	r4, r0, r2
 8019226:	4411      	add	r1, r2
 8019228:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801922c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8019230:	4295      	cmp	r5, r2
 8019232:	d003      	beq.n	801923c <__mcmp+0x28>
 8019234:	d305      	bcc.n	8019242 <__mcmp+0x2e>
 8019236:	2301      	movs	r3, #1
 8019238:	4618      	mov	r0, r3
 801923a:	bd30      	pop	{r4, r5, pc}
 801923c:	42a0      	cmp	r0, r4
 801923e:	d3f3      	bcc.n	8019228 <__mcmp+0x14>
 8019240:	e7fa      	b.n	8019238 <__mcmp+0x24>
 8019242:	f04f 33ff 	mov.w	r3, #4294967295
 8019246:	e7f7      	b.n	8019238 <__mcmp+0x24>

08019248 <__mdiff>:
 8019248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801924c:	460d      	mov	r5, r1
 801924e:	4607      	mov	r7, r0
 8019250:	4611      	mov	r1, r2
 8019252:	4628      	mov	r0, r5
 8019254:	4614      	mov	r4, r2
 8019256:	f7ff ffdd 	bl	8019214 <__mcmp>
 801925a:	1e06      	subs	r6, r0, #0
 801925c:	d108      	bne.n	8019270 <__mdiff+0x28>
 801925e:	4631      	mov	r1, r6
 8019260:	4638      	mov	r0, r7
 8019262:	f7ff fd83 	bl	8018d6c <_Balloc>
 8019266:	2301      	movs	r3, #1
 8019268:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801926c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019270:	bfa4      	itt	ge
 8019272:	4623      	movge	r3, r4
 8019274:	462c      	movge	r4, r5
 8019276:	4638      	mov	r0, r7
 8019278:	6861      	ldr	r1, [r4, #4]
 801927a:	bfa6      	itte	ge
 801927c:	461d      	movge	r5, r3
 801927e:	2600      	movge	r6, #0
 8019280:	2601      	movlt	r6, #1
 8019282:	f7ff fd73 	bl	8018d6c <_Balloc>
 8019286:	692b      	ldr	r3, [r5, #16]
 8019288:	60c6      	str	r6, [r0, #12]
 801928a:	6926      	ldr	r6, [r4, #16]
 801928c:	f105 0914 	add.w	r9, r5, #20
 8019290:	f104 0214 	add.w	r2, r4, #20
 8019294:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8019298:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801929c:	f100 0514 	add.w	r5, r0, #20
 80192a0:	f04f 0e00 	mov.w	lr, #0
 80192a4:	f852 ab04 	ldr.w	sl, [r2], #4
 80192a8:	f859 4b04 	ldr.w	r4, [r9], #4
 80192ac:	fa1e f18a 	uxtah	r1, lr, sl
 80192b0:	b2a3      	uxth	r3, r4
 80192b2:	1ac9      	subs	r1, r1, r3
 80192b4:	0c23      	lsrs	r3, r4, #16
 80192b6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80192ba:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80192be:	b289      	uxth	r1, r1
 80192c0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80192c4:	45c8      	cmp	r8, r9
 80192c6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80192ca:	4694      	mov	ip, r2
 80192cc:	f845 3b04 	str.w	r3, [r5], #4
 80192d0:	d8e8      	bhi.n	80192a4 <__mdiff+0x5c>
 80192d2:	45bc      	cmp	ip, r7
 80192d4:	d304      	bcc.n	80192e0 <__mdiff+0x98>
 80192d6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80192da:	b183      	cbz	r3, 80192fe <__mdiff+0xb6>
 80192dc:	6106      	str	r6, [r0, #16]
 80192de:	e7c5      	b.n	801926c <__mdiff+0x24>
 80192e0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80192e4:	fa1e f381 	uxtah	r3, lr, r1
 80192e8:	141a      	asrs	r2, r3, #16
 80192ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80192ee:	b29b      	uxth	r3, r3
 80192f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80192f4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80192f8:	f845 3b04 	str.w	r3, [r5], #4
 80192fc:	e7e9      	b.n	80192d2 <__mdiff+0x8a>
 80192fe:	3e01      	subs	r6, #1
 8019300:	e7e9      	b.n	80192d6 <__mdiff+0x8e>
	...

08019304 <__ulp>:
 8019304:	4b12      	ldr	r3, [pc, #72]	; (8019350 <__ulp+0x4c>)
 8019306:	ee10 2a90 	vmov	r2, s1
 801930a:	401a      	ands	r2, r3
 801930c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8019310:	2b00      	cmp	r3, #0
 8019312:	dd04      	ble.n	801931e <__ulp+0x1a>
 8019314:	2000      	movs	r0, #0
 8019316:	4619      	mov	r1, r3
 8019318:	ec41 0b10 	vmov	d0, r0, r1
 801931c:	4770      	bx	lr
 801931e:	425b      	negs	r3, r3
 8019320:	151b      	asrs	r3, r3, #20
 8019322:	2b13      	cmp	r3, #19
 8019324:	f04f 0000 	mov.w	r0, #0
 8019328:	f04f 0100 	mov.w	r1, #0
 801932c:	dc04      	bgt.n	8019338 <__ulp+0x34>
 801932e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8019332:	fa42 f103 	asr.w	r1, r2, r3
 8019336:	e7ef      	b.n	8019318 <__ulp+0x14>
 8019338:	3b14      	subs	r3, #20
 801933a:	2b1e      	cmp	r3, #30
 801933c:	f04f 0201 	mov.w	r2, #1
 8019340:	bfda      	itte	le
 8019342:	f1c3 031f 	rsble	r3, r3, #31
 8019346:	fa02 f303 	lslle.w	r3, r2, r3
 801934a:	4613      	movgt	r3, r2
 801934c:	4618      	mov	r0, r3
 801934e:	e7e3      	b.n	8019318 <__ulp+0x14>
 8019350:	7ff00000 	.word	0x7ff00000

08019354 <__b2d>:
 8019354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019356:	6905      	ldr	r5, [r0, #16]
 8019358:	f100 0714 	add.w	r7, r0, #20
 801935c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8019360:	1f2e      	subs	r6, r5, #4
 8019362:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8019366:	4620      	mov	r0, r4
 8019368:	f7ff fdc4 	bl	8018ef4 <__hi0bits>
 801936c:	f1c0 0320 	rsb	r3, r0, #32
 8019370:	280a      	cmp	r0, #10
 8019372:	600b      	str	r3, [r1, #0]
 8019374:	f8df c074 	ldr.w	ip, [pc, #116]	; 80193ec <__b2d+0x98>
 8019378:	dc14      	bgt.n	80193a4 <__b2d+0x50>
 801937a:	f1c0 0e0b 	rsb	lr, r0, #11
 801937e:	fa24 f10e 	lsr.w	r1, r4, lr
 8019382:	42b7      	cmp	r7, r6
 8019384:	ea41 030c 	orr.w	r3, r1, ip
 8019388:	bf34      	ite	cc
 801938a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801938e:	2100      	movcs	r1, #0
 8019390:	3015      	adds	r0, #21
 8019392:	fa04 f000 	lsl.w	r0, r4, r0
 8019396:	fa21 f10e 	lsr.w	r1, r1, lr
 801939a:	ea40 0201 	orr.w	r2, r0, r1
 801939e:	ec43 2b10 	vmov	d0, r2, r3
 80193a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80193a4:	42b7      	cmp	r7, r6
 80193a6:	bf3a      	itte	cc
 80193a8:	f1a5 0608 	subcc.w	r6, r5, #8
 80193ac:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80193b0:	2100      	movcs	r1, #0
 80193b2:	380b      	subs	r0, #11
 80193b4:	d015      	beq.n	80193e2 <__b2d+0x8e>
 80193b6:	4084      	lsls	r4, r0
 80193b8:	f1c0 0520 	rsb	r5, r0, #32
 80193bc:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80193c0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80193c4:	42be      	cmp	r6, r7
 80193c6:	fa21 fc05 	lsr.w	ip, r1, r5
 80193ca:	ea44 030c 	orr.w	r3, r4, ip
 80193ce:	bf8c      	ite	hi
 80193d0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80193d4:	2400      	movls	r4, #0
 80193d6:	fa01 f000 	lsl.w	r0, r1, r0
 80193da:	40ec      	lsrs	r4, r5
 80193dc:	ea40 0204 	orr.w	r2, r0, r4
 80193e0:	e7dd      	b.n	801939e <__b2d+0x4a>
 80193e2:	ea44 030c 	orr.w	r3, r4, ip
 80193e6:	460a      	mov	r2, r1
 80193e8:	e7d9      	b.n	801939e <__b2d+0x4a>
 80193ea:	bf00      	nop
 80193ec:	3ff00000 	.word	0x3ff00000

080193f0 <__d2b>:
 80193f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80193f4:	460e      	mov	r6, r1
 80193f6:	2101      	movs	r1, #1
 80193f8:	ec59 8b10 	vmov	r8, r9, d0
 80193fc:	4615      	mov	r5, r2
 80193fe:	f7ff fcb5 	bl	8018d6c <_Balloc>
 8019402:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8019406:	4607      	mov	r7, r0
 8019408:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801940c:	bb34      	cbnz	r4, 801945c <__d2b+0x6c>
 801940e:	9301      	str	r3, [sp, #4]
 8019410:	f1b8 0300 	subs.w	r3, r8, #0
 8019414:	d027      	beq.n	8019466 <__d2b+0x76>
 8019416:	a802      	add	r0, sp, #8
 8019418:	f840 3d08 	str.w	r3, [r0, #-8]!
 801941c:	f7ff fd89 	bl	8018f32 <__lo0bits>
 8019420:	9900      	ldr	r1, [sp, #0]
 8019422:	b1f0      	cbz	r0, 8019462 <__d2b+0x72>
 8019424:	9a01      	ldr	r2, [sp, #4]
 8019426:	f1c0 0320 	rsb	r3, r0, #32
 801942a:	fa02 f303 	lsl.w	r3, r2, r3
 801942e:	430b      	orrs	r3, r1
 8019430:	40c2      	lsrs	r2, r0
 8019432:	617b      	str	r3, [r7, #20]
 8019434:	9201      	str	r2, [sp, #4]
 8019436:	9b01      	ldr	r3, [sp, #4]
 8019438:	61bb      	str	r3, [r7, #24]
 801943a:	2b00      	cmp	r3, #0
 801943c:	bf14      	ite	ne
 801943e:	2102      	movne	r1, #2
 8019440:	2101      	moveq	r1, #1
 8019442:	6139      	str	r1, [r7, #16]
 8019444:	b1c4      	cbz	r4, 8019478 <__d2b+0x88>
 8019446:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801944a:	4404      	add	r4, r0
 801944c:	6034      	str	r4, [r6, #0]
 801944e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019452:	6028      	str	r0, [r5, #0]
 8019454:	4638      	mov	r0, r7
 8019456:	b003      	add	sp, #12
 8019458:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801945c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019460:	e7d5      	b.n	801940e <__d2b+0x1e>
 8019462:	6179      	str	r1, [r7, #20]
 8019464:	e7e7      	b.n	8019436 <__d2b+0x46>
 8019466:	a801      	add	r0, sp, #4
 8019468:	f7ff fd63 	bl	8018f32 <__lo0bits>
 801946c:	9b01      	ldr	r3, [sp, #4]
 801946e:	617b      	str	r3, [r7, #20]
 8019470:	2101      	movs	r1, #1
 8019472:	6139      	str	r1, [r7, #16]
 8019474:	3020      	adds	r0, #32
 8019476:	e7e5      	b.n	8019444 <__d2b+0x54>
 8019478:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801947c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019480:	6030      	str	r0, [r6, #0]
 8019482:	6918      	ldr	r0, [r3, #16]
 8019484:	f7ff fd36 	bl	8018ef4 <__hi0bits>
 8019488:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801948c:	e7e1      	b.n	8019452 <__d2b+0x62>

0801948e <__ratio>:
 801948e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019492:	4688      	mov	r8, r1
 8019494:	4669      	mov	r1, sp
 8019496:	4681      	mov	r9, r0
 8019498:	f7ff ff5c 	bl	8019354 <__b2d>
 801949c:	a901      	add	r1, sp, #4
 801949e:	4640      	mov	r0, r8
 80194a0:	ec57 6b10 	vmov	r6, r7, d0
 80194a4:	f7ff ff56 	bl	8019354 <__b2d>
 80194a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80194ac:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80194b0:	eba3 0c02 	sub.w	ip, r3, r2
 80194b4:	e9dd 3200 	ldrd	r3, r2, [sp]
 80194b8:	1a9b      	subs	r3, r3, r2
 80194ba:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80194be:	ec5b ab10 	vmov	sl, fp, d0
 80194c2:	2b00      	cmp	r3, #0
 80194c4:	bfce      	itee	gt
 80194c6:	463a      	movgt	r2, r7
 80194c8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80194cc:	465a      	movle	r2, fp
 80194ce:	4659      	mov	r1, fp
 80194d0:	463d      	mov	r5, r7
 80194d2:	bfd4      	ite	le
 80194d4:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80194d8:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80194dc:	4630      	mov	r0, r6
 80194de:	ee10 2a10 	vmov	r2, s0
 80194e2:	460b      	mov	r3, r1
 80194e4:	4629      	mov	r1, r5
 80194e6:	f7e7 f9b1 	bl	800084c <__aeabi_ddiv>
 80194ea:	ec41 0b10 	vmov	d0, r0, r1
 80194ee:	b003      	add	sp, #12
 80194f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080194f4 <__copybits>:
 80194f4:	3901      	subs	r1, #1
 80194f6:	b510      	push	{r4, lr}
 80194f8:	1149      	asrs	r1, r1, #5
 80194fa:	6914      	ldr	r4, [r2, #16]
 80194fc:	3101      	adds	r1, #1
 80194fe:	f102 0314 	add.w	r3, r2, #20
 8019502:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8019506:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801950a:	42a3      	cmp	r3, r4
 801950c:	4602      	mov	r2, r0
 801950e:	d303      	bcc.n	8019518 <__copybits+0x24>
 8019510:	2300      	movs	r3, #0
 8019512:	428a      	cmp	r2, r1
 8019514:	d305      	bcc.n	8019522 <__copybits+0x2e>
 8019516:	bd10      	pop	{r4, pc}
 8019518:	f853 2b04 	ldr.w	r2, [r3], #4
 801951c:	f840 2b04 	str.w	r2, [r0], #4
 8019520:	e7f3      	b.n	801950a <__copybits+0x16>
 8019522:	f842 3b04 	str.w	r3, [r2], #4
 8019526:	e7f4      	b.n	8019512 <__copybits+0x1e>

08019528 <__any_on>:
 8019528:	f100 0214 	add.w	r2, r0, #20
 801952c:	6900      	ldr	r0, [r0, #16]
 801952e:	114b      	asrs	r3, r1, #5
 8019530:	4298      	cmp	r0, r3
 8019532:	b510      	push	{r4, lr}
 8019534:	db11      	blt.n	801955a <__any_on+0x32>
 8019536:	dd0a      	ble.n	801954e <__any_on+0x26>
 8019538:	f011 011f 	ands.w	r1, r1, #31
 801953c:	d007      	beq.n	801954e <__any_on+0x26>
 801953e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8019542:	fa24 f001 	lsr.w	r0, r4, r1
 8019546:	fa00 f101 	lsl.w	r1, r0, r1
 801954a:	428c      	cmp	r4, r1
 801954c:	d10b      	bne.n	8019566 <__any_on+0x3e>
 801954e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019552:	4293      	cmp	r3, r2
 8019554:	d803      	bhi.n	801955e <__any_on+0x36>
 8019556:	2000      	movs	r0, #0
 8019558:	bd10      	pop	{r4, pc}
 801955a:	4603      	mov	r3, r0
 801955c:	e7f7      	b.n	801954e <__any_on+0x26>
 801955e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019562:	2900      	cmp	r1, #0
 8019564:	d0f5      	beq.n	8019552 <__any_on+0x2a>
 8019566:	2001      	movs	r0, #1
 8019568:	e7f6      	b.n	8019558 <__any_on+0x30>

0801956a <_calloc_r>:
 801956a:	b538      	push	{r3, r4, r5, lr}
 801956c:	fb02 f401 	mul.w	r4, r2, r1
 8019570:	4621      	mov	r1, r4
 8019572:	f7fc fcb5 	bl	8015ee0 <_malloc_r>
 8019576:	4605      	mov	r5, r0
 8019578:	b118      	cbz	r0, 8019582 <_calloc_r+0x18>
 801957a:	4622      	mov	r2, r4
 801957c:	2100      	movs	r1, #0
 801957e:	f7fc fc59 	bl	8015e34 <memset>
 8019582:	4628      	mov	r0, r5
 8019584:	bd38      	pop	{r3, r4, r5, pc}

08019586 <__ssputs_r>:
 8019586:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801958a:	688e      	ldr	r6, [r1, #8]
 801958c:	429e      	cmp	r6, r3
 801958e:	4682      	mov	sl, r0
 8019590:	460c      	mov	r4, r1
 8019592:	4690      	mov	r8, r2
 8019594:	4699      	mov	r9, r3
 8019596:	d837      	bhi.n	8019608 <__ssputs_r+0x82>
 8019598:	898a      	ldrh	r2, [r1, #12]
 801959a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801959e:	d031      	beq.n	8019604 <__ssputs_r+0x7e>
 80195a0:	6825      	ldr	r5, [r4, #0]
 80195a2:	6909      	ldr	r1, [r1, #16]
 80195a4:	1a6f      	subs	r7, r5, r1
 80195a6:	6965      	ldr	r5, [r4, #20]
 80195a8:	2302      	movs	r3, #2
 80195aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80195ae:	fb95 f5f3 	sdiv	r5, r5, r3
 80195b2:	f109 0301 	add.w	r3, r9, #1
 80195b6:	443b      	add	r3, r7
 80195b8:	429d      	cmp	r5, r3
 80195ba:	bf38      	it	cc
 80195bc:	461d      	movcc	r5, r3
 80195be:	0553      	lsls	r3, r2, #21
 80195c0:	d530      	bpl.n	8019624 <__ssputs_r+0x9e>
 80195c2:	4629      	mov	r1, r5
 80195c4:	f7fc fc8c 	bl	8015ee0 <_malloc_r>
 80195c8:	4606      	mov	r6, r0
 80195ca:	b950      	cbnz	r0, 80195e2 <__ssputs_r+0x5c>
 80195cc:	230c      	movs	r3, #12
 80195ce:	f8ca 3000 	str.w	r3, [sl]
 80195d2:	89a3      	ldrh	r3, [r4, #12]
 80195d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80195d8:	81a3      	strh	r3, [r4, #12]
 80195da:	f04f 30ff 	mov.w	r0, #4294967295
 80195de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80195e2:	463a      	mov	r2, r7
 80195e4:	6921      	ldr	r1, [r4, #16]
 80195e6:	f7fc fc01 	bl	8015dec <memcpy>
 80195ea:	89a3      	ldrh	r3, [r4, #12]
 80195ec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80195f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80195f4:	81a3      	strh	r3, [r4, #12]
 80195f6:	6126      	str	r6, [r4, #16]
 80195f8:	6165      	str	r5, [r4, #20]
 80195fa:	443e      	add	r6, r7
 80195fc:	1bed      	subs	r5, r5, r7
 80195fe:	6026      	str	r6, [r4, #0]
 8019600:	60a5      	str	r5, [r4, #8]
 8019602:	464e      	mov	r6, r9
 8019604:	454e      	cmp	r6, r9
 8019606:	d900      	bls.n	801960a <__ssputs_r+0x84>
 8019608:	464e      	mov	r6, r9
 801960a:	4632      	mov	r2, r6
 801960c:	4641      	mov	r1, r8
 801960e:	6820      	ldr	r0, [r4, #0]
 8019610:	f7fc fbf7 	bl	8015e02 <memmove>
 8019614:	68a3      	ldr	r3, [r4, #8]
 8019616:	1b9b      	subs	r3, r3, r6
 8019618:	60a3      	str	r3, [r4, #8]
 801961a:	6823      	ldr	r3, [r4, #0]
 801961c:	441e      	add	r6, r3
 801961e:	6026      	str	r6, [r4, #0]
 8019620:	2000      	movs	r0, #0
 8019622:	e7dc      	b.n	80195de <__ssputs_r+0x58>
 8019624:	462a      	mov	r2, r5
 8019626:	f000 f920 	bl	801986a <_realloc_r>
 801962a:	4606      	mov	r6, r0
 801962c:	2800      	cmp	r0, #0
 801962e:	d1e2      	bne.n	80195f6 <__ssputs_r+0x70>
 8019630:	6921      	ldr	r1, [r4, #16]
 8019632:	4650      	mov	r0, sl
 8019634:	f7fc fc06 	bl	8015e44 <_free_r>
 8019638:	e7c8      	b.n	80195cc <__ssputs_r+0x46>
	...

0801963c <_svfiprintf_r>:
 801963c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019640:	461d      	mov	r5, r3
 8019642:	898b      	ldrh	r3, [r1, #12]
 8019644:	061f      	lsls	r7, r3, #24
 8019646:	b09d      	sub	sp, #116	; 0x74
 8019648:	4680      	mov	r8, r0
 801964a:	460c      	mov	r4, r1
 801964c:	4616      	mov	r6, r2
 801964e:	d50f      	bpl.n	8019670 <_svfiprintf_r+0x34>
 8019650:	690b      	ldr	r3, [r1, #16]
 8019652:	b96b      	cbnz	r3, 8019670 <_svfiprintf_r+0x34>
 8019654:	2140      	movs	r1, #64	; 0x40
 8019656:	f7fc fc43 	bl	8015ee0 <_malloc_r>
 801965a:	6020      	str	r0, [r4, #0]
 801965c:	6120      	str	r0, [r4, #16]
 801965e:	b928      	cbnz	r0, 801966c <_svfiprintf_r+0x30>
 8019660:	230c      	movs	r3, #12
 8019662:	f8c8 3000 	str.w	r3, [r8]
 8019666:	f04f 30ff 	mov.w	r0, #4294967295
 801966a:	e0c8      	b.n	80197fe <_svfiprintf_r+0x1c2>
 801966c:	2340      	movs	r3, #64	; 0x40
 801966e:	6163      	str	r3, [r4, #20]
 8019670:	2300      	movs	r3, #0
 8019672:	9309      	str	r3, [sp, #36]	; 0x24
 8019674:	2320      	movs	r3, #32
 8019676:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801967a:	2330      	movs	r3, #48	; 0x30
 801967c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019680:	9503      	str	r5, [sp, #12]
 8019682:	f04f 0b01 	mov.w	fp, #1
 8019686:	4637      	mov	r7, r6
 8019688:	463d      	mov	r5, r7
 801968a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801968e:	b10b      	cbz	r3, 8019694 <_svfiprintf_r+0x58>
 8019690:	2b25      	cmp	r3, #37	; 0x25
 8019692:	d13e      	bne.n	8019712 <_svfiprintf_r+0xd6>
 8019694:	ebb7 0a06 	subs.w	sl, r7, r6
 8019698:	d00b      	beq.n	80196b2 <_svfiprintf_r+0x76>
 801969a:	4653      	mov	r3, sl
 801969c:	4632      	mov	r2, r6
 801969e:	4621      	mov	r1, r4
 80196a0:	4640      	mov	r0, r8
 80196a2:	f7ff ff70 	bl	8019586 <__ssputs_r>
 80196a6:	3001      	adds	r0, #1
 80196a8:	f000 80a4 	beq.w	80197f4 <_svfiprintf_r+0x1b8>
 80196ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80196ae:	4453      	add	r3, sl
 80196b0:	9309      	str	r3, [sp, #36]	; 0x24
 80196b2:	783b      	ldrb	r3, [r7, #0]
 80196b4:	2b00      	cmp	r3, #0
 80196b6:	f000 809d 	beq.w	80197f4 <_svfiprintf_r+0x1b8>
 80196ba:	2300      	movs	r3, #0
 80196bc:	f04f 32ff 	mov.w	r2, #4294967295
 80196c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80196c4:	9304      	str	r3, [sp, #16]
 80196c6:	9307      	str	r3, [sp, #28]
 80196c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80196cc:	931a      	str	r3, [sp, #104]	; 0x68
 80196ce:	462f      	mov	r7, r5
 80196d0:	2205      	movs	r2, #5
 80196d2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80196d6:	4850      	ldr	r0, [pc, #320]	; (8019818 <_svfiprintf_r+0x1dc>)
 80196d8:	f7e6 fd82 	bl	80001e0 <memchr>
 80196dc:	9b04      	ldr	r3, [sp, #16]
 80196de:	b9d0      	cbnz	r0, 8019716 <_svfiprintf_r+0xda>
 80196e0:	06d9      	lsls	r1, r3, #27
 80196e2:	bf44      	itt	mi
 80196e4:	2220      	movmi	r2, #32
 80196e6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80196ea:	071a      	lsls	r2, r3, #28
 80196ec:	bf44      	itt	mi
 80196ee:	222b      	movmi	r2, #43	; 0x2b
 80196f0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80196f4:	782a      	ldrb	r2, [r5, #0]
 80196f6:	2a2a      	cmp	r2, #42	; 0x2a
 80196f8:	d015      	beq.n	8019726 <_svfiprintf_r+0xea>
 80196fa:	9a07      	ldr	r2, [sp, #28]
 80196fc:	462f      	mov	r7, r5
 80196fe:	2000      	movs	r0, #0
 8019700:	250a      	movs	r5, #10
 8019702:	4639      	mov	r1, r7
 8019704:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019708:	3b30      	subs	r3, #48	; 0x30
 801970a:	2b09      	cmp	r3, #9
 801970c:	d94d      	bls.n	80197aa <_svfiprintf_r+0x16e>
 801970e:	b1b8      	cbz	r0, 8019740 <_svfiprintf_r+0x104>
 8019710:	e00f      	b.n	8019732 <_svfiprintf_r+0xf6>
 8019712:	462f      	mov	r7, r5
 8019714:	e7b8      	b.n	8019688 <_svfiprintf_r+0x4c>
 8019716:	4a40      	ldr	r2, [pc, #256]	; (8019818 <_svfiprintf_r+0x1dc>)
 8019718:	1a80      	subs	r0, r0, r2
 801971a:	fa0b f000 	lsl.w	r0, fp, r0
 801971e:	4318      	orrs	r0, r3
 8019720:	9004      	str	r0, [sp, #16]
 8019722:	463d      	mov	r5, r7
 8019724:	e7d3      	b.n	80196ce <_svfiprintf_r+0x92>
 8019726:	9a03      	ldr	r2, [sp, #12]
 8019728:	1d11      	adds	r1, r2, #4
 801972a:	6812      	ldr	r2, [r2, #0]
 801972c:	9103      	str	r1, [sp, #12]
 801972e:	2a00      	cmp	r2, #0
 8019730:	db01      	blt.n	8019736 <_svfiprintf_r+0xfa>
 8019732:	9207      	str	r2, [sp, #28]
 8019734:	e004      	b.n	8019740 <_svfiprintf_r+0x104>
 8019736:	4252      	negs	r2, r2
 8019738:	f043 0302 	orr.w	r3, r3, #2
 801973c:	9207      	str	r2, [sp, #28]
 801973e:	9304      	str	r3, [sp, #16]
 8019740:	783b      	ldrb	r3, [r7, #0]
 8019742:	2b2e      	cmp	r3, #46	; 0x2e
 8019744:	d10c      	bne.n	8019760 <_svfiprintf_r+0x124>
 8019746:	787b      	ldrb	r3, [r7, #1]
 8019748:	2b2a      	cmp	r3, #42	; 0x2a
 801974a:	d133      	bne.n	80197b4 <_svfiprintf_r+0x178>
 801974c:	9b03      	ldr	r3, [sp, #12]
 801974e:	1d1a      	adds	r2, r3, #4
 8019750:	681b      	ldr	r3, [r3, #0]
 8019752:	9203      	str	r2, [sp, #12]
 8019754:	2b00      	cmp	r3, #0
 8019756:	bfb8      	it	lt
 8019758:	f04f 33ff 	movlt.w	r3, #4294967295
 801975c:	3702      	adds	r7, #2
 801975e:	9305      	str	r3, [sp, #20]
 8019760:	4d2e      	ldr	r5, [pc, #184]	; (801981c <_svfiprintf_r+0x1e0>)
 8019762:	7839      	ldrb	r1, [r7, #0]
 8019764:	2203      	movs	r2, #3
 8019766:	4628      	mov	r0, r5
 8019768:	f7e6 fd3a 	bl	80001e0 <memchr>
 801976c:	b138      	cbz	r0, 801977e <_svfiprintf_r+0x142>
 801976e:	2340      	movs	r3, #64	; 0x40
 8019770:	1b40      	subs	r0, r0, r5
 8019772:	fa03 f000 	lsl.w	r0, r3, r0
 8019776:	9b04      	ldr	r3, [sp, #16]
 8019778:	4303      	orrs	r3, r0
 801977a:	3701      	adds	r7, #1
 801977c:	9304      	str	r3, [sp, #16]
 801977e:	7839      	ldrb	r1, [r7, #0]
 8019780:	4827      	ldr	r0, [pc, #156]	; (8019820 <_svfiprintf_r+0x1e4>)
 8019782:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019786:	2206      	movs	r2, #6
 8019788:	1c7e      	adds	r6, r7, #1
 801978a:	f7e6 fd29 	bl	80001e0 <memchr>
 801978e:	2800      	cmp	r0, #0
 8019790:	d038      	beq.n	8019804 <_svfiprintf_r+0x1c8>
 8019792:	4b24      	ldr	r3, [pc, #144]	; (8019824 <_svfiprintf_r+0x1e8>)
 8019794:	bb13      	cbnz	r3, 80197dc <_svfiprintf_r+0x1a0>
 8019796:	9b03      	ldr	r3, [sp, #12]
 8019798:	3307      	adds	r3, #7
 801979a:	f023 0307 	bic.w	r3, r3, #7
 801979e:	3308      	adds	r3, #8
 80197a0:	9303      	str	r3, [sp, #12]
 80197a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80197a4:	444b      	add	r3, r9
 80197a6:	9309      	str	r3, [sp, #36]	; 0x24
 80197a8:	e76d      	b.n	8019686 <_svfiprintf_r+0x4a>
 80197aa:	fb05 3202 	mla	r2, r5, r2, r3
 80197ae:	2001      	movs	r0, #1
 80197b0:	460f      	mov	r7, r1
 80197b2:	e7a6      	b.n	8019702 <_svfiprintf_r+0xc6>
 80197b4:	2300      	movs	r3, #0
 80197b6:	3701      	adds	r7, #1
 80197b8:	9305      	str	r3, [sp, #20]
 80197ba:	4619      	mov	r1, r3
 80197bc:	250a      	movs	r5, #10
 80197be:	4638      	mov	r0, r7
 80197c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80197c4:	3a30      	subs	r2, #48	; 0x30
 80197c6:	2a09      	cmp	r2, #9
 80197c8:	d903      	bls.n	80197d2 <_svfiprintf_r+0x196>
 80197ca:	2b00      	cmp	r3, #0
 80197cc:	d0c8      	beq.n	8019760 <_svfiprintf_r+0x124>
 80197ce:	9105      	str	r1, [sp, #20]
 80197d0:	e7c6      	b.n	8019760 <_svfiprintf_r+0x124>
 80197d2:	fb05 2101 	mla	r1, r5, r1, r2
 80197d6:	2301      	movs	r3, #1
 80197d8:	4607      	mov	r7, r0
 80197da:	e7f0      	b.n	80197be <_svfiprintf_r+0x182>
 80197dc:	ab03      	add	r3, sp, #12
 80197de:	9300      	str	r3, [sp, #0]
 80197e0:	4622      	mov	r2, r4
 80197e2:	4b11      	ldr	r3, [pc, #68]	; (8019828 <_svfiprintf_r+0x1ec>)
 80197e4:	a904      	add	r1, sp, #16
 80197e6:	4640      	mov	r0, r8
 80197e8:	f7fc fc68 	bl	80160bc <_printf_float>
 80197ec:	f1b0 3fff 	cmp.w	r0, #4294967295
 80197f0:	4681      	mov	r9, r0
 80197f2:	d1d6      	bne.n	80197a2 <_svfiprintf_r+0x166>
 80197f4:	89a3      	ldrh	r3, [r4, #12]
 80197f6:	065b      	lsls	r3, r3, #25
 80197f8:	f53f af35 	bmi.w	8019666 <_svfiprintf_r+0x2a>
 80197fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80197fe:	b01d      	add	sp, #116	; 0x74
 8019800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019804:	ab03      	add	r3, sp, #12
 8019806:	9300      	str	r3, [sp, #0]
 8019808:	4622      	mov	r2, r4
 801980a:	4b07      	ldr	r3, [pc, #28]	; (8019828 <_svfiprintf_r+0x1ec>)
 801980c:	a904      	add	r1, sp, #16
 801980e:	4640      	mov	r0, r8
 8019810:	f7fc ff0a 	bl	8016628 <_printf_i>
 8019814:	e7ea      	b.n	80197ec <_svfiprintf_r+0x1b0>
 8019816:	bf00      	nop
 8019818:	0801b74c 	.word	0x0801b74c
 801981c:	0801b752 	.word	0x0801b752
 8019820:	0801b756 	.word	0x0801b756
 8019824:	080160bd 	.word	0x080160bd
 8019828:	08019587 	.word	0x08019587

0801982c <strncmp>:
 801982c:	b510      	push	{r4, lr}
 801982e:	b16a      	cbz	r2, 801984c <strncmp+0x20>
 8019830:	3901      	subs	r1, #1
 8019832:	1884      	adds	r4, r0, r2
 8019834:	f810 3b01 	ldrb.w	r3, [r0], #1
 8019838:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801983c:	4293      	cmp	r3, r2
 801983e:	d103      	bne.n	8019848 <strncmp+0x1c>
 8019840:	42a0      	cmp	r0, r4
 8019842:	d001      	beq.n	8019848 <strncmp+0x1c>
 8019844:	2b00      	cmp	r3, #0
 8019846:	d1f5      	bne.n	8019834 <strncmp+0x8>
 8019848:	1a98      	subs	r0, r3, r2
 801984a:	bd10      	pop	{r4, pc}
 801984c:	4610      	mov	r0, r2
 801984e:	e7fc      	b.n	801984a <strncmp+0x1e>

08019850 <__ascii_wctomb>:
 8019850:	b149      	cbz	r1, 8019866 <__ascii_wctomb+0x16>
 8019852:	2aff      	cmp	r2, #255	; 0xff
 8019854:	bf85      	ittet	hi
 8019856:	238a      	movhi	r3, #138	; 0x8a
 8019858:	6003      	strhi	r3, [r0, #0]
 801985a:	700a      	strbls	r2, [r1, #0]
 801985c:	f04f 30ff 	movhi.w	r0, #4294967295
 8019860:	bf98      	it	ls
 8019862:	2001      	movls	r0, #1
 8019864:	4770      	bx	lr
 8019866:	4608      	mov	r0, r1
 8019868:	4770      	bx	lr

0801986a <_realloc_r>:
 801986a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801986c:	4607      	mov	r7, r0
 801986e:	4614      	mov	r4, r2
 8019870:	460e      	mov	r6, r1
 8019872:	b921      	cbnz	r1, 801987e <_realloc_r+0x14>
 8019874:	4611      	mov	r1, r2
 8019876:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801987a:	f7fc bb31 	b.w	8015ee0 <_malloc_r>
 801987e:	b922      	cbnz	r2, 801988a <_realloc_r+0x20>
 8019880:	f7fc fae0 	bl	8015e44 <_free_r>
 8019884:	4625      	mov	r5, r4
 8019886:	4628      	mov	r0, r5
 8019888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801988a:	f000 f814 	bl	80198b6 <_malloc_usable_size_r>
 801988e:	42a0      	cmp	r0, r4
 8019890:	d20f      	bcs.n	80198b2 <_realloc_r+0x48>
 8019892:	4621      	mov	r1, r4
 8019894:	4638      	mov	r0, r7
 8019896:	f7fc fb23 	bl	8015ee0 <_malloc_r>
 801989a:	4605      	mov	r5, r0
 801989c:	2800      	cmp	r0, #0
 801989e:	d0f2      	beq.n	8019886 <_realloc_r+0x1c>
 80198a0:	4631      	mov	r1, r6
 80198a2:	4622      	mov	r2, r4
 80198a4:	f7fc faa2 	bl	8015dec <memcpy>
 80198a8:	4631      	mov	r1, r6
 80198aa:	4638      	mov	r0, r7
 80198ac:	f7fc faca 	bl	8015e44 <_free_r>
 80198b0:	e7e9      	b.n	8019886 <_realloc_r+0x1c>
 80198b2:	4635      	mov	r5, r6
 80198b4:	e7e7      	b.n	8019886 <_realloc_r+0x1c>

080198b6 <_malloc_usable_size_r>:
 80198b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80198ba:	1f18      	subs	r0, r3, #4
 80198bc:	2b00      	cmp	r3, #0
 80198be:	bfbc      	itt	lt
 80198c0:	580b      	ldrlt	r3, [r1, r0]
 80198c2:	18c0      	addlt	r0, r0, r3
 80198c4:	4770      	bx	lr
	...

080198c8 <ceil>:
 80198c8:	ec51 0b10 	vmov	r0, r1, d0
 80198cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80198d0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80198d4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80198d8:	2e13      	cmp	r6, #19
 80198da:	460c      	mov	r4, r1
 80198dc:	ee10 5a10 	vmov	r5, s0
 80198e0:	4680      	mov	r8, r0
 80198e2:	dc30      	bgt.n	8019946 <ceil+0x7e>
 80198e4:	2e00      	cmp	r6, #0
 80198e6:	da12      	bge.n	801990e <ceil+0x46>
 80198e8:	a333      	add	r3, pc, #204	; (adr r3, 80199b8 <ceil+0xf0>)
 80198ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198ee:	f7e6 fccd 	bl	800028c <__adddf3>
 80198f2:	2200      	movs	r2, #0
 80198f4:	2300      	movs	r3, #0
 80198f6:	f7e7 f90f 	bl	8000b18 <__aeabi_dcmpgt>
 80198fa:	b128      	cbz	r0, 8019908 <ceil+0x40>
 80198fc:	2c00      	cmp	r4, #0
 80198fe:	db55      	blt.n	80199ac <ceil+0xe4>
 8019900:	432c      	orrs	r4, r5
 8019902:	d057      	beq.n	80199b4 <ceil+0xec>
 8019904:	4c2e      	ldr	r4, [pc, #184]	; (80199c0 <ceil+0xf8>)
 8019906:	2500      	movs	r5, #0
 8019908:	4621      	mov	r1, r4
 801990a:	4628      	mov	r0, r5
 801990c:	e025      	b.n	801995a <ceil+0x92>
 801990e:	4f2d      	ldr	r7, [pc, #180]	; (80199c4 <ceil+0xfc>)
 8019910:	4137      	asrs	r7, r6
 8019912:	ea01 0307 	and.w	r3, r1, r7
 8019916:	4303      	orrs	r3, r0
 8019918:	d01f      	beq.n	801995a <ceil+0x92>
 801991a:	a327      	add	r3, pc, #156	; (adr r3, 80199b8 <ceil+0xf0>)
 801991c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019920:	f7e6 fcb4 	bl	800028c <__adddf3>
 8019924:	2200      	movs	r2, #0
 8019926:	2300      	movs	r3, #0
 8019928:	f7e7 f8f6 	bl	8000b18 <__aeabi_dcmpgt>
 801992c:	2800      	cmp	r0, #0
 801992e:	d0eb      	beq.n	8019908 <ceil+0x40>
 8019930:	2c00      	cmp	r4, #0
 8019932:	bfc2      	ittt	gt
 8019934:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8019938:	fa43 f606 	asrgt.w	r6, r3, r6
 801993c:	19a4      	addgt	r4, r4, r6
 801993e:	ea24 0407 	bic.w	r4, r4, r7
 8019942:	2500      	movs	r5, #0
 8019944:	e7e0      	b.n	8019908 <ceil+0x40>
 8019946:	2e33      	cmp	r6, #51	; 0x33
 8019948:	dd0b      	ble.n	8019962 <ceil+0x9a>
 801994a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801994e:	d104      	bne.n	801995a <ceil+0x92>
 8019950:	ee10 2a10 	vmov	r2, s0
 8019954:	460b      	mov	r3, r1
 8019956:	f7e6 fc99 	bl	800028c <__adddf3>
 801995a:	ec41 0b10 	vmov	d0, r0, r1
 801995e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019962:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8019966:	f04f 33ff 	mov.w	r3, #4294967295
 801996a:	fa23 f707 	lsr.w	r7, r3, r7
 801996e:	4207      	tst	r7, r0
 8019970:	d0f3      	beq.n	801995a <ceil+0x92>
 8019972:	a311      	add	r3, pc, #68	; (adr r3, 80199b8 <ceil+0xf0>)
 8019974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019978:	f7e6 fc88 	bl	800028c <__adddf3>
 801997c:	2200      	movs	r2, #0
 801997e:	2300      	movs	r3, #0
 8019980:	f7e7 f8ca 	bl	8000b18 <__aeabi_dcmpgt>
 8019984:	2800      	cmp	r0, #0
 8019986:	d0bf      	beq.n	8019908 <ceil+0x40>
 8019988:	2c00      	cmp	r4, #0
 801998a:	dd02      	ble.n	8019992 <ceil+0xca>
 801998c:	2e14      	cmp	r6, #20
 801998e:	d103      	bne.n	8019998 <ceil+0xd0>
 8019990:	3401      	adds	r4, #1
 8019992:	ea25 0507 	bic.w	r5, r5, r7
 8019996:	e7b7      	b.n	8019908 <ceil+0x40>
 8019998:	2301      	movs	r3, #1
 801999a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801999e:	fa03 f606 	lsl.w	r6, r3, r6
 80199a2:	4435      	add	r5, r6
 80199a4:	4545      	cmp	r5, r8
 80199a6:	bf38      	it	cc
 80199a8:	18e4      	addcc	r4, r4, r3
 80199aa:	e7f2      	b.n	8019992 <ceil+0xca>
 80199ac:	2500      	movs	r5, #0
 80199ae:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80199b2:	e7a9      	b.n	8019908 <ceil+0x40>
 80199b4:	4625      	mov	r5, r4
 80199b6:	e7a7      	b.n	8019908 <ceil+0x40>
 80199b8:	8800759c 	.word	0x8800759c
 80199bc:	7e37e43c 	.word	0x7e37e43c
 80199c0:	3ff00000 	.word	0x3ff00000
 80199c4:	000fffff 	.word	0x000fffff

080199c8 <cos>:
 80199c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80199ca:	ec51 0b10 	vmov	r0, r1, d0
 80199ce:	4a1e      	ldr	r2, [pc, #120]	; (8019a48 <cos+0x80>)
 80199d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80199d4:	4293      	cmp	r3, r2
 80199d6:	dc06      	bgt.n	80199e6 <cos+0x1e>
 80199d8:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8019a40 <cos+0x78>
 80199dc:	f000 fcec 	bl	801a3b8 <__kernel_cos>
 80199e0:	ec51 0b10 	vmov	r0, r1, d0
 80199e4:	e007      	b.n	80199f6 <cos+0x2e>
 80199e6:	4a19      	ldr	r2, [pc, #100]	; (8019a4c <cos+0x84>)
 80199e8:	4293      	cmp	r3, r2
 80199ea:	dd09      	ble.n	8019a00 <cos+0x38>
 80199ec:	ee10 2a10 	vmov	r2, s0
 80199f0:	460b      	mov	r3, r1
 80199f2:	f7e6 fc49 	bl	8000288 <__aeabi_dsub>
 80199f6:	ec41 0b10 	vmov	d0, r0, r1
 80199fa:	b005      	add	sp, #20
 80199fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8019a00:	4668      	mov	r0, sp
 8019a02:	f000 fa35 	bl	8019e70 <__ieee754_rem_pio2>
 8019a06:	f000 0003 	and.w	r0, r0, #3
 8019a0a:	2801      	cmp	r0, #1
 8019a0c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019a10:	ed9d 0b00 	vldr	d0, [sp]
 8019a14:	d007      	beq.n	8019a26 <cos+0x5e>
 8019a16:	2802      	cmp	r0, #2
 8019a18:	d00e      	beq.n	8019a38 <cos+0x70>
 8019a1a:	2800      	cmp	r0, #0
 8019a1c:	d0de      	beq.n	80199dc <cos+0x14>
 8019a1e:	2001      	movs	r0, #1
 8019a20:	f001 f8d2 	bl	801abc8 <__kernel_sin>
 8019a24:	e7dc      	b.n	80199e0 <cos+0x18>
 8019a26:	f001 f8cf 	bl	801abc8 <__kernel_sin>
 8019a2a:	ec53 2b10 	vmov	r2, r3, d0
 8019a2e:	ee10 0a10 	vmov	r0, s0
 8019a32:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8019a36:	e7de      	b.n	80199f6 <cos+0x2e>
 8019a38:	f000 fcbe 	bl	801a3b8 <__kernel_cos>
 8019a3c:	e7f5      	b.n	8019a2a <cos+0x62>
 8019a3e:	bf00      	nop
	...
 8019a48:	3fe921fb 	.word	0x3fe921fb
 8019a4c:	7fefffff 	.word	0x7fefffff

08019a50 <round>:
 8019a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a52:	ec57 6b10 	vmov	r6, r7, d0
 8019a56:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8019a5a:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8019a5e:	2c13      	cmp	r4, #19
 8019a60:	463b      	mov	r3, r7
 8019a62:	463d      	mov	r5, r7
 8019a64:	dc17      	bgt.n	8019a96 <round+0x46>
 8019a66:	2c00      	cmp	r4, #0
 8019a68:	da09      	bge.n	8019a7e <round+0x2e>
 8019a6a:	3401      	adds	r4, #1
 8019a6c:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8019a70:	d103      	bne.n	8019a7a <round+0x2a>
 8019a72:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8019a76:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8019a7a:	2100      	movs	r1, #0
 8019a7c:	e02c      	b.n	8019ad8 <round+0x88>
 8019a7e:	4a18      	ldr	r2, [pc, #96]	; (8019ae0 <round+0x90>)
 8019a80:	4122      	asrs	r2, r4
 8019a82:	4217      	tst	r7, r2
 8019a84:	d100      	bne.n	8019a88 <round+0x38>
 8019a86:	b19e      	cbz	r6, 8019ab0 <round+0x60>
 8019a88:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8019a8c:	4123      	asrs	r3, r4
 8019a8e:	442b      	add	r3, r5
 8019a90:	ea23 0302 	bic.w	r3, r3, r2
 8019a94:	e7f1      	b.n	8019a7a <round+0x2a>
 8019a96:	2c33      	cmp	r4, #51	; 0x33
 8019a98:	dd0d      	ble.n	8019ab6 <round+0x66>
 8019a9a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8019a9e:	d107      	bne.n	8019ab0 <round+0x60>
 8019aa0:	4630      	mov	r0, r6
 8019aa2:	4639      	mov	r1, r7
 8019aa4:	ee10 2a10 	vmov	r2, s0
 8019aa8:	f7e6 fbf0 	bl	800028c <__adddf3>
 8019aac:	4606      	mov	r6, r0
 8019aae:	460f      	mov	r7, r1
 8019ab0:	ec47 6b10 	vmov	d0, r6, r7
 8019ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019ab6:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8019aba:	f04f 30ff 	mov.w	r0, #4294967295
 8019abe:	40d0      	lsrs	r0, r2
 8019ac0:	4206      	tst	r6, r0
 8019ac2:	d0f5      	beq.n	8019ab0 <round+0x60>
 8019ac4:	2201      	movs	r2, #1
 8019ac6:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8019aca:	fa02 f404 	lsl.w	r4, r2, r4
 8019ace:	1931      	adds	r1, r6, r4
 8019ad0:	bf28      	it	cs
 8019ad2:	189b      	addcs	r3, r3, r2
 8019ad4:	ea21 0100 	bic.w	r1, r1, r0
 8019ad8:	461f      	mov	r7, r3
 8019ada:	460e      	mov	r6, r1
 8019adc:	e7e8      	b.n	8019ab0 <round+0x60>
 8019ade:	bf00      	nop
 8019ae0:	000fffff 	.word	0x000fffff
 8019ae4:	00000000 	.word	0x00000000

08019ae8 <sin>:
 8019ae8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019aea:	ec51 0b10 	vmov	r0, r1, d0
 8019aee:	4a20      	ldr	r2, [pc, #128]	; (8019b70 <sin+0x88>)
 8019af0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019af4:	4293      	cmp	r3, r2
 8019af6:	dc07      	bgt.n	8019b08 <sin+0x20>
 8019af8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8019b68 <sin+0x80>
 8019afc:	2000      	movs	r0, #0
 8019afe:	f001 f863 	bl	801abc8 <__kernel_sin>
 8019b02:	ec51 0b10 	vmov	r0, r1, d0
 8019b06:	e007      	b.n	8019b18 <sin+0x30>
 8019b08:	4a1a      	ldr	r2, [pc, #104]	; (8019b74 <sin+0x8c>)
 8019b0a:	4293      	cmp	r3, r2
 8019b0c:	dd09      	ble.n	8019b22 <sin+0x3a>
 8019b0e:	ee10 2a10 	vmov	r2, s0
 8019b12:	460b      	mov	r3, r1
 8019b14:	f7e6 fbb8 	bl	8000288 <__aeabi_dsub>
 8019b18:	ec41 0b10 	vmov	d0, r0, r1
 8019b1c:	b005      	add	sp, #20
 8019b1e:	f85d fb04 	ldr.w	pc, [sp], #4
 8019b22:	4668      	mov	r0, sp
 8019b24:	f000 f9a4 	bl	8019e70 <__ieee754_rem_pio2>
 8019b28:	f000 0003 	and.w	r0, r0, #3
 8019b2c:	2801      	cmp	r0, #1
 8019b2e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019b32:	ed9d 0b00 	vldr	d0, [sp]
 8019b36:	d004      	beq.n	8019b42 <sin+0x5a>
 8019b38:	2802      	cmp	r0, #2
 8019b3a:	d005      	beq.n	8019b48 <sin+0x60>
 8019b3c:	b970      	cbnz	r0, 8019b5c <sin+0x74>
 8019b3e:	2001      	movs	r0, #1
 8019b40:	e7dd      	b.n	8019afe <sin+0x16>
 8019b42:	f000 fc39 	bl	801a3b8 <__kernel_cos>
 8019b46:	e7dc      	b.n	8019b02 <sin+0x1a>
 8019b48:	2001      	movs	r0, #1
 8019b4a:	f001 f83d 	bl	801abc8 <__kernel_sin>
 8019b4e:	ec53 2b10 	vmov	r2, r3, d0
 8019b52:	ee10 0a10 	vmov	r0, s0
 8019b56:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8019b5a:	e7dd      	b.n	8019b18 <sin+0x30>
 8019b5c:	f000 fc2c 	bl	801a3b8 <__kernel_cos>
 8019b60:	e7f5      	b.n	8019b4e <sin+0x66>
 8019b62:	bf00      	nop
 8019b64:	f3af 8000 	nop.w
	...
 8019b70:	3fe921fb 	.word	0x3fe921fb
 8019b74:	7fefffff 	.word	0x7fefffff

08019b78 <ceilf>:
 8019b78:	ee10 3a10 	vmov	r3, s0
 8019b7c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8019b80:	0dca      	lsrs	r2, r1, #23
 8019b82:	3a7f      	subs	r2, #127	; 0x7f
 8019b84:	2a16      	cmp	r2, #22
 8019b86:	dc2a      	bgt.n	8019bde <ceilf+0x66>
 8019b88:	2a00      	cmp	r2, #0
 8019b8a:	da11      	bge.n	8019bb0 <ceilf+0x38>
 8019b8c:	eddf 7a18 	vldr	s15, [pc, #96]	; 8019bf0 <ceilf+0x78>
 8019b90:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019b94:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019b9c:	dd05      	ble.n	8019baa <ceilf+0x32>
 8019b9e:	2b00      	cmp	r3, #0
 8019ba0:	db23      	blt.n	8019bea <ceilf+0x72>
 8019ba2:	2900      	cmp	r1, #0
 8019ba4:	bf18      	it	ne
 8019ba6:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 8019baa:	ee00 3a10 	vmov	s0, r3
 8019bae:	4770      	bx	lr
 8019bb0:	4910      	ldr	r1, [pc, #64]	; (8019bf4 <ceilf+0x7c>)
 8019bb2:	4111      	asrs	r1, r2
 8019bb4:	420b      	tst	r3, r1
 8019bb6:	d0fa      	beq.n	8019bae <ceilf+0x36>
 8019bb8:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8019bf0 <ceilf+0x78>
 8019bbc:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019bc0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019bc8:	ddef      	ble.n	8019baa <ceilf+0x32>
 8019bca:	2b00      	cmp	r3, #0
 8019bcc:	bfc2      	ittt	gt
 8019bce:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 8019bd2:	fa40 f202 	asrgt.w	r2, r0, r2
 8019bd6:	189b      	addgt	r3, r3, r2
 8019bd8:	ea23 0301 	bic.w	r3, r3, r1
 8019bdc:	e7e5      	b.n	8019baa <ceilf+0x32>
 8019bde:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8019be2:	d3e4      	bcc.n	8019bae <ceilf+0x36>
 8019be4:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019be8:	4770      	bx	lr
 8019bea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8019bee:	e7dc      	b.n	8019baa <ceilf+0x32>
 8019bf0:	7149f2ca 	.word	0x7149f2ca
 8019bf4:	007fffff 	.word	0x007fffff

08019bf8 <atan2>:
 8019bf8:	f000 b85a 	b.w	8019cb0 <__ieee754_atan2>

08019bfc <sqrt>:
 8019bfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019c00:	ed2d 8b02 	vpush	{d8}
 8019c04:	b08b      	sub	sp, #44	; 0x2c
 8019c06:	ec55 4b10 	vmov	r4, r5, d0
 8019c0a:	f000 fb23 	bl	801a254 <__ieee754_sqrt>
 8019c0e:	4b26      	ldr	r3, [pc, #152]	; (8019ca8 <sqrt+0xac>)
 8019c10:	eeb0 8a40 	vmov.f32	s16, s0
 8019c14:	eef0 8a60 	vmov.f32	s17, s1
 8019c18:	f993 6000 	ldrsb.w	r6, [r3]
 8019c1c:	1c73      	adds	r3, r6, #1
 8019c1e:	d02a      	beq.n	8019c76 <sqrt+0x7a>
 8019c20:	4622      	mov	r2, r4
 8019c22:	462b      	mov	r3, r5
 8019c24:	4620      	mov	r0, r4
 8019c26:	4629      	mov	r1, r5
 8019c28:	f7e6 ff80 	bl	8000b2c <__aeabi_dcmpun>
 8019c2c:	4607      	mov	r7, r0
 8019c2e:	bb10      	cbnz	r0, 8019c76 <sqrt+0x7a>
 8019c30:	f04f 0800 	mov.w	r8, #0
 8019c34:	f04f 0900 	mov.w	r9, #0
 8019c38:	4642      	mov	r2, r8
 8019c3a:	464b      	mov	r3, r9
 8019c3c:	4620      	mov	r0, r4
 8019c3e:	4629      	mov	r1, r5
 8019c40:	f7e6 ff4c 	bl	8000adc <__aeabi_dcmplt>
 8019c44:	b1b8      	cbz	r0, 8019c76 <sqrt+0x7a>
 8019c46:	2301      	movs	r3, #1
 8019c48:	9300      	str	r3, [sp, #0]
 8019c4a:	4b18      	ldr	r3, [pc, #96]	; (8019cac <sqrt+0xb0>)
 8019c4c:	9301      	str	r3, [sp, #4]
 8019c4e:	9708      	str	r7, [sp, #32]
 8019c50:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8019c54:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8019c58:	b9b6      	cbnz	r6, 8019c88 <sqrt+0x8c>
 8019c5a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8019c5e:	4668      	mov	r0, sp
 8019c60:	f001 fa9e 	bl	801b1a0 <matherr>
 8019c64:	b1d0      	cbz	r0, 8019c9c <sqrt+0xa0>
 8019c66:	9b08      	ldr	r3, [sp, #32]
 8019c68:	b11b      	cbz	r3, 8019c72 <sqrt+0x76>
 8019c6a:	f7fc f885 	bl	8015d78 <__errno>
 8019c6e:	9b08      	ldr	r3, [sp, #32]
 8019c70:	6003      	str	r3, [r0, #0]
 8019c72:	ed9d 8b06 	vldr	d8, [sp, #24]
 8019c76:	eeb0 0a48 	vmov.f32	s0, s16
 8019c7a:	eef0 0a68 	vmov.f32	s1, s17
 8019c7e:	b00b      	add	sp, #44	; 0x2c
 8019c80:	ecbd 8b02 	vpop	{d8}
 8019c84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019c88:	4642      	mov	r2, r8
 8019c8a:	464b      	mov	r3, r9
 8019c8c:	4640      	mov	r0, r8
 8019c8e:	4649      	mov	r1, r9
 8019c90:	f7e6 fddc 	bl	800084c <__aeabi_ddiv>
 8019c94:	2e02      	cmp	r6, #2
 8019c96:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8019c9a:	d1e0      	bne.n	8019c5e <sqrt+0x62>
 8019c9c:	f7fc f86c 	bl	8015d78 <__errno>
 8019ca0:	2321      	movs	r3, #33	; 0x21
 8019ca2:	6003      	str	r3, [r0, #0]
 8019ca4:	e7df      	b.n	8019c66 <sqrt+0x6a>
 8019ca6:	bf00      	nop
 8019ca8:	20000b7c 	.word	0x20000b7c
 8019cac:	0801b85e 	.word	0x0801b85e

08019cb0 <__ieee754_atan2>:
 8019cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019cb4:	ec57 6b11 	vmov	r6, r7, d1
 8019cb8:	4273      	negs	r3, r6
 8019cba:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8019cbe:	4333      	orrs	r3, r6
 8019cc0:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8019e68 <__ieee754_atan2+0x1b8>
 8019cc4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8019cc8:	4573      	cmp	r3, lr
 8019cca:	ec51 0b10 	vmov	r0, r1, d0
 8019cce:	ee11 8a10 	vmov	r8, s2
 8019cd2:	d80a      	bhi.n	8019cea <__ieee754_atan2+0x3a>
 8019cd4:	4244      	negs	r4, r0
 8019cd6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019cda:	4304      	orrs	r4, r0
 8019cdc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8019ce0:	4574      	cmp	r4, lr
 8019ce2:	468c      	mov	ip, r1
 8019ce4:	ee10 9a10 	vmov	r9, s0
 8019ce8:	d907      	bls.n	8019cfa <__ieee754_atan2+0x4a>
 8019cea:	4632      	mov	r2, r6
 8019cec:	463b      	mov	r3, r7
 8019cee:	f7e6 facd 	bl	800028c <__adddf3>
 8019cf2:	ec41 0b10 	vmov	d0, r0, r1
 8019cf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019cfa:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8019cfe:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8019d02:	4334      	orrs	r4, r6
 8019d04:	d103      	bne.n	8019d0e <__ieee754_atan2+0x5e>
 8019d06:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019d0a:	f001 b819 	b.w	801ad40 <atan>
 8019d0e:	17bc      	asrs	r4, r7, #30
 8019d10:	f004 0402 	and.w	r4, r4, #2
 8019d14:	ea53 0909 	orrs.w	r9, r3, r9
 8019d18:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8019d1c:	d107      	bne.n	8019d2e <__ieee754_atan2+0x7e>
 8019d1e:	2c02      	cmp	r4, #2
 8019d20:	d073      	beq.n	8019e0a <__ieee754_atan2+0x15a>
 8019d22:	2c03      	cmp	r4, #3
 8019d24:	d1e5      	bne.n	8019cf2 <__ieee754_atan2+0x42>
 8019d26:	a13e      	add	r1, pc, #248	; (adr r1, 8019e20 <__ieee754_atan2+0x170>)
 8019d28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019d2c:	e7e1      	b.n	8019cf2 <__ieee754_atan2+0x42>
 8019d2e:	ea52 0808 	orrs.w	r8, r2, r8
 8019d32:	d106      	bne.n	8019d42 <__ieee754_atan2+0x92>
 8019d34:	f1bc 0f00 	cmp.w	ip, #0
 8019d38:	da6b      	bge.n	8019e12 <__ieee754_atan2+0x162>
 8019d3a:	a13b      	add	r1, pc, #236	; (adr r1, 8019e28 <__ieee754_atan2+0x178>)
 8019d3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019d40:	e7d7      	b.n	8019cf2 <__ieee754_atan2+0x42>
 8019d42:	4572      	cmp	r2, lr
 8019d44:	d120      	bne.n	8019d88 <__ieee754_atan2+0xd8>
 8019d46:	4293      	cmp	r3, r2
 8019d48:	d111      	bne.n	8019d6e <__ieee754_atan2+0xbe>
 8019d4a:	2c02      	cmp	r4, #2
 8019d4c:	d007      	beq.n	8019d5e <__ieee754_atan2+0xae>
 8019d4e:	2c03      	cmp	r4, #3
 8019d50:	d009      	beq.n	8019d66 <__ieee754_atan2+0xb6>
 8019d52:	2c01      	cmp	r4, #1
 8019d54:	d155      	bne.n	8019e02 <__ieee754_atan2+0x152>
 8019d56:	a136      	add	r1, pc, #216	; (adr r1, 8019e30 <__ieee754_atan2+0x180>)
 8019d58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019d5c:	e7c9      	b.n	8019cf2 <__ieee754_atan2+0x42>
 8019d5e:	a136      	add	r1, pc, #216	; (adr r1, 8019e38 <__ieee754_atan2+0x188>)
 8019d60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019d64:	e7c5      	b.n	8019cf2 <__ieee754_atan2+0x42>
 8019d66:	a136      	add	r1, pc, #216	; (adr r1, 8019e40 <__ieee754_atan2+0x190>)
 8019d68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019d6c:	e7c1      	b.n	8019cf2 <__ieee754_atan2+0x42>
 8019d6e:	2c02      	cmp	r4, #2
 8019d70:	d04b      	beq.n	8019e0a <__ieee754_atan2+0x15a>
 8019d72:	2c03      	cmp	r4, #3
 8019d74:	d0d7      	beq.n	8019d26 <__ieee754_atan2+0x76>
 8019d76:	2c01      	cmp	r4, #1
 8019d78:	f04f 0000 	mov.w	r0, #0
 8019d7c:	d102      	bne.n	8019d84 <__ieee754_atan2+0xd4>
 8019d7e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8019d82:	e7b6      	b.n	8019cf2 <__ieee754_atan2+0x42>
 8019d84:	2100      	movs	r1, #0
 8019d86:	e7b4      	b.n	8019cf2 <__ieee754_atan2+0x42>
 8019d88:	4573      	cmp	r3, lr
 8019d8a:	d0d3      	beq.n	8019d34 <__ieee754_atan2+0x84>
 8019d8c:	1a9b      	subs	r3, r3, r2
 8019d8e:	151b      	asrs	r3, r3, #20
 8019d90:	2b3c      	cmp	r3, #60	; 0x3c
 8019d92:	dc1e      	bgt.n	8019dd2 <__ieee754_atan2+0x122>
 8019d94:	2f00      	cmp	r7, #0
 8019d96:	da01      	bge.n	8019d9c <__ieee754_atan2+0xec>
 8019d98:	333c      	adds	r3, #60	; 0x3c
 8019d9a:	db1e      	blt.n	8019dda <__ieee754_atan2+0x12a>
 8019d9c:	4632      	mov	r2, r6
 8019d9e:	463b      	mov	r3, r7
 8019da0:	f7e6 fd54 	bl	800084c <__aeabi_ddiv>
 8019da4:	ec41 0b10 	vmov	d0, r0, r1
 8019da8:	f001 f96a 	bl	801b080 <fabs>
 8019dac:	f000 ffc8 	bl	801ad40 <atan>
 8019db0:	ec51 0b10 	vmov	r0, r1, d0
 8019db4:	2c01      	cmp	r4, #1
 8019db6:	d013      	beq.n	8019de0 <__ieee754_atan2+0x130>
 8019db8:	2c02      	cmp	r4, #2
 8019dba:	d015      	beq.n	8019de8 <__ieee754_atan2+0x138>
 8019dbc:	2c00      	cmp	r4, #0
 8019dbe:	d098      	beq.n	8019cf2 <__ieee754_atan2+0x42>
 8019dc0:	a321      	add	r3, pc, #132	; (adr r3, 8019e48 <__ieee754_atan2+0x198>)
 8019dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019dc6:	f7e6 fa5f 	bl	8000288 <__aeabi_dsub>
 8019dca:	a321      	add	r3, pc, #132	; (adr r3, 8019e50 <__ieee754_atan2+0x1a0>)
 8019dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019dd0:	e014      	b.n	8019dfc <__ieee754_atan2+0x14c>
 8019dd2:	a121      	add	r1, pc, #132	; (adr r1, 8019e58 <__ieee754_atan2+0x1a8>)
 8019dd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019dd8:	e7ec      	b.n	8019db4 <__ieee754_atan2+0x104>
 8019dda:	2000      	movs	r0, #0
 8019ddc:	2100      	movs	r1, #0
 8019dde:	e7e9      	b.n	8019db4 <__ieee754_atan2+0x104>
 8019de0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019de4:	4619      	mov	r1, r3
 8019de6:	e784      	b.n	8019cf2 <__ieee754_atan2+0x42>
 8019de8:	a317      	add	r3, pc, #92	; (adr r3, 8019e48 <__ieee754_atan2+0x198>)
 8019dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019dee:	f7e6 fa4b 	bl	8000288 <__aeabi_dsub>
 8019df2:	4602      	mov	r2, r0
 8019df4:	460b      	mov	r3, r1
 8019df6:	a116      	add	r1, pc, #88	; (adr r1, 8019e50 <__ieee754_atan2+0x1a0>)
 8019df8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019dfc:	f7e6 fa44 	bl	8000288 <__aeabi_dsub>
 8019e00:	e777      	b.n	8019cf2 <__ieee754_atan2+0x42>
 8019e02:	a117      	add	r1, pc, #92	; (adr r1, 8019e60 <__ieee754_atan2+0x1b0>)
 8019e04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019e08:	e773      	b.n	8019cf2 <__ieee754_atan2+0x42>
 8019e0a:	a111      	add	r1, pc, #68	; (adr r1, 8019e50 <__ieee754_atan2+0x1a0>)
 8019e0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019e10:	e76f      	b.n	8019cf2 <__ieee754_atan2+0x42>
 8019e12:	a111      	add	r1, pc, #68	; (adr r1, 8019e58 <__ieee754_atan2+0x1a8>)
 8019e14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019e18:	e76b      	b.n	8019cf2 <__ieee754_atan2+0x42>
 8019e1a:	bf00      	nop
 8019e1c:	f3af 8000 	nop.w
 8019e20:	54442d18 	.word	0x54442d18
 8019e24:	c00921fb 	.word	0xc00921fb
 8019e28:	54442d18 	.word	0x54442d18
 8019e2c:	bff921fb 	.word	0xbff921fb
 8019e30:	54442d18 	.word	0x54442d18
 8019e34:	bfe921fb 	.word	0xbfe921fb
 8019e38:	7f3321d2 	.word	0x7f3321d2
 8019e3c:	4002d97c 	.word	0x4002d97c
 8019e40:	7f3321d2 	.word	0x7f3321d2
 8019e44:	c002d97c 	.word	0xc002d97c
 8019e48:	33145c07 	.word	0x33145c07
 8019e4c:	3ca1a626 	.word	0x3ca1a626
 8019e50:	54442d18 	.word	0x54442d18
 8019e54:	400921fb 	.word	0x400921fb
 8019e58:	54442d18 	.word	0x54442d18
 8019e5c:	3ff921fb 	.word	0x3ff921fb
 8019e60:	54442d18 	.word	0x54442d18
 8019e64:	3fe921fb 	.word	0x3fe921fb
 8019e68:	7ff00000 	.word	0x7ff00000
 8019e6c:	00000000 	.word	0x00000000

08019e70 <__ieee754_rem_pio2>:
 8019e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e74:	ec57 6b10 	vmov	r6, r7, d0
 8019e78:	4bc3      	ldr	r3, [pc, #780]	; (801a188 <__ieee754_rem_pio2+0x318>)
 8019e7a:	b08d      	sub	sp, #52	; 0x34
 8019e7c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8019e80:	4598      	cmp	r8, r3
 8019e82:	4604      	mov	r4, r0
 8019e84:	9704      	str	r7, [sp, #16]
 8019e86:	dc07      	bgt.n	8019e98 <__ieee754_rem_pio2+0x28>
 8019e88:	2200      	movs	r2, #0
 8019e8a:	2300      	movs	r3, #0
 8019e8c:	ed84 0b00 	vstr	d0, [r4]
 8019e90:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8019e94:	2500      	movs	r5, #0
 8019e96:	e027      	b.n	8019ee8 <__ieee754_rem_pio2+0x78>
 8019e98:	4bbc      	ldr	r3, [pc, #752]	; (801a18c <__ieee754_rem_pio2+0x31c>)
 8019e9a:	4598      	cmp	r8, r3
 8019e9c:	dc75      	bgt.n	8019f8a <__ieee754_rem_pio2+0x11a>
 8019e9e:	9b04      	ldr	r3, [sp, #16]
 8019ea0:	4dbb      	ldr	r5, [pc, #748]	; (801a190 <__ieee754_rem_pio2+0x320>)
 8019ea2:	2b00      	cmp	r3, #0
 8019ea4:	ee10 0a10 	vmov	r0, s0
 8019ea8:	a3a9      	add	r3, pc, #676	; (adr r3, 801a150 <__ieee754_rem_pio2+0x2e0>)
 8019eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019eae:	4639      	mov	r1, r7
 8019eb0:	dd36      	ble.n	8019f20 <__ieee754_rem_pio2+0xb0>
 8019eb2:	f7e6 f9e9 	bl	8000288 <__aeabi_dsub>
 8019eb6:	45a8      	cmp	r8, r5
 8019eb8:	4606      	mov	r6, r0
 8019eba:	460f      	mov	r7, r1
 8019ebc:	d018      	beq.n	8019ef0 <__ieee754_rem_pio2+0x80>
 8019ebe:	a3a6      	add	r3, pc, #664	; (adr r3, 801a158 <__ieee754_rem_pio2+0x2e8>)
 8019ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ec4:	f7e6 f9e0 	bl	8000288 <__aeabi_dsub>
 8019ec8:	4602      	mov	r2, r0
 8019eca:	460b      	mov	r3, r1
 8019ecc:	e9c4 2300 	strd	r2, r3, [r4]
 8019ed0:	4630      	mov	r0, r6
 8019ed2:	4639      	mov	r1, r7
 8019ed4:	f7e6 f9d8 	bl	8000288 <__aeabi_dsub>
 8019ed8:	a39f      	add	r3, pc, #636	; (adr r3, 801a158 <__ieee754_rem_pio2+0x2e8>)
 8019eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ede:	f7e6 f9d3 	bl	8000288 <__aeabi_dsub>
 8019ee2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8019ee6:	2501      	movs	r5, #1
 8019ee8:	4628      	mov	r0, r5
 8019eea:	b00d      	add	sp, #52	; 0x34
 8019eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ef0:	a39b      	add	r3, pc, #620	; (adr r3, 801a160 <__ieee754_rem_pio2+0x2f0>)
 8019ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ef6:	f7e6 f9c7 	bl	8000288 <__aeabi_dsub>
 8019efa:	a39b      	add	r3, pc, #620	; (adr r3, 801a168 <__ieee754_rem_pio2+0x2f8>)
 8019efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f00:	4606      	mov	r6, r0
 8019f02:	460f      	mov	r7, r1
 8019f04:	f7e6 f9c0 	bl	8000288 <__aeabi_dsub>
 8019f08:	4602      	mov	r2, r0
 8019f0a:	460b      	mov	r3, r1
 8019f0c:	e9c4 2300 	strd	r2, r3, [r4]
 8019f10:	4630      	mov	r0, r6
 8019f12:	4639      	mov	r1, r7
 8019f14:	f7e6 f9b8 	bl	8000288 <__aeabi_dsub>
 8019f18:	a393      	add	r3, pc, #588	; (adr r3, 801a168 <__ieee754_rem_pio2+0x2f8>)
 8019f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f1e:	e7de      	b.n	8019ede <__ieee754_rem_pio2+0x6e>
 8019f20:	f7e6 f9b4 	bl	800028c <__adddf3>
 8019f24:	45a8      	cmp	r8, r5
 8019f26:	4606      	mov	r6, r0
 8019f28:	460f      	mov	r7, r1
 8019f2a:	d016      	beq.n	8019f5a <__ieee754_rem_pio2+0xea>
 8019f2c:	a38a      	add	r3, pc, #552	; (adr r3, 801a158 <__ieee754_rem_pio2+0x2e8>)
 8019f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f32:	f7e6 f9ab 	bl	800028c <__adddf3>
 8019f36:	4602      	mov	r2, r0
 8019f38:	460b      	mov	r3, r1
 8019f3a:	e9c4 2300 	strd	r2, r3, [r4]
 8019f3e:	4630      	mov	r0, r6
 8019f40:	4639      	mov	r1, r7
 8019f42:	f7e6 f9a1 	bl	8000288 <__aeabi_dsub>
 8019f46:	a384      	add	r3, pc, #528	; (adr r3, 801a158 <__ieee754_rem_pio2+0x2e8>)
 8019f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f4c:	f7e6 f99e 	bl	800028c <__adddf3>
 8019f50:	f04f 35ff 	mov.w	r5, #4294967295
 8019f54:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8019f58:	e7c6      	b.n	8019ee8 <__ieee754_rem_pio2+0x78>
 8019f5a:	a381      	add	r3, pc, #516	; (adr r3, 801a160 <__ieee754_rem_pio2+0x2f0>)
 8019f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f60:	f7e6 f994 	bl	800028c <__adddf3>
 8019f64:	a380      	add	r3, pc, #512	; (adr r3, 801a168 <__ieee754_rem_pio2+0x2f8>)
 8019f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f6a:	4606      	mov	r6, r0
 8019f6c:	460f      	mov	r7, r1
 8019f6e:	f7e6 f98d 	bl	800028c <__adddf3>
 8019f72:	4602      	mov	r2, r0
 8019f74:	460b      	mov	r3, r1
 8019f76:	e9c4 2300 	strd	r2, r3, [r4]
 8019f7a:	4630      	mov	r0, r6
 8019f7c:	4639      	mov	r1, r7
 8019f7e:	f7e6 f983 	bl	8000288 <__aeabi_dsub>
 8019f82:	a379      	add	r3, pc, #484	; (adr r3, 801a168 <__ieee754_rem_pio2+0x2f8>)
 8019f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f88:	e7e0      	b.n	8019f4c <__ieee754_rem_pio2+0xdc>
 8019f8a:	4b82      	ldr	r3, [pc, #520]	; (801a194 <__ieee754_rem_pio2+0x324>)
 8019f8c:	4598      	cmp	r8, r3
 8019f8e:	f300 80d0 	bgt.w	801a132 <__ieee754_rem_pio2+0x2c2>
 8019f92:	f001 f875 	bl	801b080 <fabs>
 8019f96:	ec57 6b10 	vmov	r6, r7, d0
 8019f9a:	ee10 0a10 	vmov	r0, s0
 8019f9e:	a374      	add	r3, pc, #464	; (adr r3, 801a170 <__ieee754_rem_pio2+0x300>)
 8019fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fa4:	4639      	mov	r1, r7
 8019fa6:	f7e6 fb27 	bl	80005f8 <__aeabi_dmul>
 8019faa:	2200      	movs	r2, #0
 8019fac:	4b7a      	ldr	r3, [pc, #488]	; (801a198 <__ieee754_rem_pio2+0x328>)
 8019fae:	f7e6 f96d 	bl	800028c <__adddf3>
 8019fb2:	f7e6 fdd1 	bl	8000b58 <__aeabi_d2iz>
 8019fb6:	4605      	mov	r5, r0
 8019fb8:	f7e6 fab4 	bl	8000524 <__aeabi_i2d>
 8019fbc:	a364      	add	r3, pc, #400	; (adr r3, 801a150 <__ieee754_rem_pio2+0x2e0>)
 8019fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019fc6:	f7e6 fb17 	bl	80005f8 <__aeabi_dmul>
 8019fca:	4602      	mov	r2, r0
 8019fcc:	460b      	mov	r3, r1
 8019fce:	4630      	mov	r0, r6
 8019fd0:	4639      	mov	r1, r7
 8019fd2:	f7e6 f959 	bl	8000288 <__aeabi_dsub>
 8019fd6:	a360      	add	r3, pc, #384	; (adr r3, 801a158 <__ieee754_rem_pio2+0x2e8>)
 8019fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fdc:	4682      	mov	sl, r0
 8019fde:	468b      	mov	fp, r1
 8019fe0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019fe4:	f7e6 fb08 	bl	80005f8 <__aeabi_dmul>
 8019fe8:	2d1f      	cmp	r5, #31
 8019fea:	4606      	mov	r6, r0
 8019fec:	460f      	mov	r7, r1
 8019fee:	dc0c      	bgt.n	801a00a <__ieee754_rem_pio2+0x19a>
 8019ff0:	1e6a      	subs	r2, r5, #1
 8019ff2:	4b6a      	ldr	r3, [pc, #424]	; (801a19c <__ieee754_rem_pio2+0x32c>)
 8019ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019ff8:	4543      	cmp	r3, r8
 8019ffa:	d006      	beq.n	801a00a <__ieee754_rem_pio2+0x19a>
 8019ffc:	4632      	mov	r2, r6
 8019ffe:	463b      	mov	r3, r7
 801a000:	4650      	mov	r0, sl
 801a002:	4659      	mov	r1, fp
 801a004:	f7e6 f940 	bl	8000288 <__aeabi_dsub>
 801a008:	e00e      	b.n	801a028 <__ieee754_rem_pio2+0x1b8>
 801a00a:	4632      	mov	r2, r6
 801a00c:	463b      	mov	r3, r7
 801a00e:	4650      	mov	r0, sl
 801a010:	4659      	mov	r1, fp
 801a012:	f7e6 f939 	bl	8000288 <__aeabi_dsub>
 801a016:	ea4f 5328 	mov.w	r3, r8, asr #20
 801a01a:	9305      	str	r3, [sp, #20]
 801a01c:	9a05      	ldr	r2, [sp, #20]
 801a01e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801a022:	1ad3      	subs	r3, r2, r3
 801a024:	2b10      	cmp	r3, #16
 801a026:	dc02      	bgt.n	801a02e <__ieee754_rem_pio2+0x1be>
 801a028:	e9c4 0100 	strd	r0, r1, [r4]
 801a02c:	e039      	b.n	801a0a2 <__ieee754_rem_pio2+0x232>
 801a02e:	a34c      	add	r3, pc, #304	; (adr r3, 801a160 <__ieee754_rem_pio2+0x2f0>)
 801a030:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a034:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a038:	f7e6 fade 	bl	80005f8 <__aeabi_dmul>
 801a03c:	4606      	mov	r6, r0
 801a03e:	460f      	mov	r7, r1
 801a040:	4602      	mov	r2, r0
 801a042:	460b      	mov	r3, r1
 801a044:	4650      	mov	r0, sl
 801a046:	4659      	mov	r1, fp
 801a048:	f7e6 f91e 	bl	8000288 <__aeabi_dsub>
 801a04c:	4602      	mov	r2, r0
 801a04e:	460b      	mov	r3, r1
 801a050:	4680      	mov	r8, r0
 801a052:	4689      	mov	r9, r1
 801a054:	4650      	mov	r0, sl
 801a056:	4659      	mov	r1, fp
 801a058:	f7e6 f916 	bl	8000288 <__aeabi_dsub>
 801a05c:	4632      	mov	r2, r6
 801a05e:	463b      	mov	r3, r7
 801a060:	f7e6 f912 	bl	8000288 <__aeabi_dsub>
 801a064:	a340      	add	r3, pc, #256	; (adr r3, 801a168 <__ieee754_rem_pio2+0x2f8>)
 801a066:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a06a:	4606      	mov	r6, r0
 801a06c:	460f      	mov	r7, r1
 801a06e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a072:	f7e6 fac1 	bl	80005f8 <__aeabi_dmul>
 801a076:	4632      	mov	r2, r6
 801a078:	463b      	mov	r3, r7
 801a07a:	f7e6 f905 	bl	8000288 <__aeabi_dsub>
 801a07e:	4602      	mov	r2, r0
 801a080:	460b      	mov	r3, r1
 801a082:	4606      	mov	r6, r0
 801a084:	460f      	mov	r7, r1
 801a086:	4640      	mov	r0, r8
 801a088:	4649      	mov	r1, r9
 801a08a:	f7e6 f8fd 	bl	8000288 <__aeabi_dsub>
 801a08e:	9a05      	ldr	r2, [sp, #20]
 801a090:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801a094:	1ad3      	subs	r3, r2, r3
 801a096:	2b31      	cmp	r3, #49	; 0x31
 801a098:	dc20      	bgt.n	801a0dc <__ieee754_rem_pio2+0x26c>
 801a09a:	e9c4 0100 	strd	r0, r1, [r4]
 801a09e:	46c2      	mov	sl, r8
 801a0a0:	46cb      	mov	fp, r9
 801a0a2:	e9d4 8900 	ldrd	r8, r9, [r4]
 801a0a6:	4650      	mov	r0, sl
 801a0a8:	4642      	mov	r2, r8
 801a0aa:	464b      	mov	r3, r9
 801a0ac:	4659      	mov	r1, fp
 801a0ae:	f7e6 f8eb 	bl	8000288 <__aeabi_dsub>
 801a0b2:	463b      	mov	r3, r7
 801a0b4:	4632      	mov	r2, r6
 801a0b6:	f7e6 f8e7 	bl	8000288 <__aeabi_dsub>
 801a0ba:	9b04      	ldr	r3, [sp, #16]
 801a0bc:	2b00      	cmp	r3, #0
 801a0be:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801a0c2:	f6bf af11 	bge.w	8019ee8 <__ieee754_rem_pio2+0x78>
 801a0c6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801a0ca:	6063      	str	r3, [r4, #4]
 801a0cc:	f8c4 8000 	str.w	r8, [r4]
 801a0d0:	60a0      	str	r0, [r4, #8]
 801a0d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a0d6:	60e3      	str	r3, [r4, #12]
 801a0d8:	426d      	negs	r5, r5
 801a0da:	e705      	b.n	8019ee8 <__ieee754_rem_pio2+0x78>
 801a0dc:	a326      	add	r3, pc, #152	; (adr r3, 801a178 <__ieee754_rem_pio2+0x308>)
 801a0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a0e6:	f7e6 fa87 	bl	80005f8 <__aeabi_dmul>
 801a0ea:	4606      	mov	r6, r0
 801a0ec:	460f      	mov	r7, r1
 801a0ee:	4602      	mov	r2, r0
 801a0f0:	460b      	mov	r3, r1
 801a0f2:	4640      	mov	r0, r8
 801a0f4:	4649      	mov	r1, r9
 801a0f6:	f7e6 f8c7 	bl	8000288 <__aeabi_dsub>
 801a0fa:	4602      	mov	r2, r0
 801a0fc:	460b      	mov	r3, r1
 801a0fe:	4682      	mov	sl, r0
 801a100:	468b      	mov	fp, r1
 801a102:	4640      	mov	r0, r8
 801a104:	4649      	mov	r1, r9
 801a106:	f7e6 f8bf 	bl	8000288 <__aeabi_dsub>
 801a10a:	4632      	mov	r2, r6
 801a10c:	463b      	mov	r3, r7
 801a10e:	f7e6 f8bb 	bl	8000288 <__aeabi_dsub>
 801a112:	a31b      	add	r3, pc, #108	; (adr r3, 801a180 <__ieee754_rem_pio2+0x310>)
 801a114:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a118:	4606      	mov	r6, r0
 801a11a:	460f      	mov	r7, r1
 801a11c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a120:	f7e6 fa6a 	bl	80005f8 <__aeabi_dmul>
 801a124:	4632      	mov	r2, r6
 801a126:	463b      	mov	r3, r7
 801a128:	f7e6 f8ae 	bl	8000288 <__aeabi_dsub>
 801a12c:	4606      	mov	r6, r0
 801a12e:	460f      	mov	r7, r1
 801a130:	e764      	b.n	8019ffc <__ieee754_rem_pio2+0x18c>
 801a132:	4b1b      	ldr	r3, [pc, #108]	; (801a1a0 <__ieee754_rem_pio2+0x330>)
 801a134:	4598      	cmp	r8, r3
 801a136:	dd35      	ble.n	801a1a4 <__ieee754_rem_pio2+0x334>
 801a138:	ee10 2a10 	vmov	r2, s0
 801a13c:	463b      	mov	r3, r7
 801a13e:	4630      	mov	r0, r6
 801a140:	4639      	mov	r1, r7
 801a142:	f7e6 f8a1 	bl	8000288 <__aeabi_dsub>
 801a146:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801a14a:	e9c4 0100 	strd	r0, r1, [r4]
 801a14e:	e6a1      	b.n	8019e94 <__ieee754_rem_pio2+0x24>
 801a150:	54400000 	.word	0x54400000
 801a154:	3ff921fb 	.word	0x3ff921fb
 801a158:	1a626331 	.word	0x1a626331
 801a15c:	3dd0b461 	.word	0x3dd0b461
 801a160:	1a600000 	.word	0x1a600000
 801a164:	3dd0b461 	.word	0x3dd0b461
 801a168:	2e037073 	.word	0x2e037073
 801a16c:	3ba3198a 	.word	0x3ba3198a
 801a170:	6dc9c883 	.word	0x6dc9c883
 801a174:	3fe45f30 	.word	0x3fe45f30
 801a178:	2e000000 	.word	0x2e000000
 801a17c:	3ba3198a 	.word	0x3ba3198a
 801a180:	252049c1 	.word	0x252049c1
 801a184:	397b839a 	.word	0x397b839a
 801a188:	3fe921fb 	.word	0x3fe921fb
 801a18c:	4002d97b 	.word	0x4002d97b
 801a190:	3ff921fb 	.word	0x3ff921fb
 801a194:	413921fb 	.word	0x413921fb
 801a198:	3fe00000 	.word	0x3fe00000
 801a19c:	0801b864 	.word	0x0801b864
 801a1a0:	7fefffff 	.word	0x7fefffff
 801a1a4:	ea4f 5528 	mov.w	r5, r8, asr #20
 801a1a8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 801a1ac:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 801a1b0:	4630      	mov	r0, r6
 801a1b2:	460f      	mov	r7, r1
 801a1b4:	f7e6 fcd0 	bl	8000b58 <__aeabi_d2iz>
 801a1b8:	f7e6 f9b4 	bl	8000524 <__aeabi_i2d>
 801a1bc:	4602      	mov	r2, r0
 801a1be:	460b      	mov	r3, r1
 801a1c0:	4630      	mov	r0, r6
 801a1c2:	4639      	mov	r1, r7
 801a1c4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801a1c8:	f7e6 f85e 	bl	8000288 <__aeabi_dsub>
 801a1cc:	2200      	movs	r2, #0
 801a1ce:	4b1f      	ldr	r3, [pc, #124]	; (801a24c <__ieee754_rem_pio2+0x3dc>)
 801a1d0:	f7e6 fa12 	bl	80005f8 <__aeabi_dmul>
 801a1d4:	460f      	mov	r7, r1
 801a1d6:	4606      	mov	r6, r0
 801a1d8:	f7e6 fcbe 	bl	8000b58 <__aeabi_d2iz>
 801a1dc:	f7e6 f9a2 	bl	8000524 <__aeabi_i2d>
 801a1e0:	4602      	mov	r2, r0
 801a1e2:	460b      	mov	r3, r1
 801a1e4:	4630      	mov	r0, r6
 801a1e6:	4639      	mov	r1, r7
 801a1e8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801a1ec:	f7e6 f84c 	bl	8000288 <__aeabi_dsub>
 801a1f0:	2200      	movs	r2, #0
 801a1f2:	4b16      	ldr	r3, [pc, #88]	; (801a24c <__ieee754_rem_pio2+0x3dc>)
 801a1f4:	f7e6 fa00 	bl	80005f8 <__aeabi_dmul>
 801a1f8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801a1fc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 801a200:	f04f 0803 	mov.w	r8, #3
 801a204:	2600      	movs	r6, #0
 801a206:	2700      	movs	r7, #0
 801a208:	4632      	mov	r2, r6
 801a20a:	463b      	mov	r3, r7
 801a20c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 801a210:	f108 3aff 	add.w	sl, r8, #4294967295
 801a214:	f7e6 fc58 	bl	8000ac8 <__aeabi_dcmpeq>
 801a218:	b9b0      	cbnz	r0, 801a248 <__ieee754_rem_pio2+0x3d8>
 801a21a:	4b0d      	ldr	r3, [pc, #52]	; (801a250 <__ieee754_rem_pio2+0x3e0>)
 801a21c:	9301      	str	r3, [sp, #4]
 801a21e:	2302      	movs	r3, #2
 801a220:	9300      	str	r3, [sp, #0]
 801a222:	462a      	mov	r2, r5
 801a224:	4643      	mov	r3, r8
 801a226:	4621      	mov	r1, r4
 801a228:	a806      	add	r0, sp, #24
 801a22a:	f000 f98d 	bl	801a548 <__kernel_rem_pio2>
 801a22e:	9b04      	ldr	r3, [sp, #16]
 801a230:	2b00      	cmp	r3, #0
 801a232:	4605      	mov	r5, r0
 801a234:	f6bf ae58 	bge.w	8019ee8 <__ieee754_rem_pio2+0x78>
 801a238:	6863      	ldr	r3, [r4, #4]
 801a23a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801a23e:	6063      	str	r3, [r4, #4]
 801a240:	68e3      	ldr	r3, [r4, #12]
 801a242:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801a246:	e746      	b.n	801a0d6 <__ieee754_rem_pio2+0x266>
 801a248:	46d0      	mov	r8, sl
 801a24a:	e7dd      	b.n	801a208 <__ieee754_rem_pio2+0x398>
 801a24c:	41700000 	.word	0x41700000
 801a250:	0801b8e4 	.word	0x0801b8e4

0801a254 <__ieee754_sqrt>:
 801a254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a258:	4955      	ldr	r1, [pc, #340]	; (801a3b0 <__ieee754_sqrt+0x15c>)
 801a25a:	ec55 4b10 	vmov	r4, r5, d0
 801a25e:	43a9      	bics	r1, r5
 801a260:	462b      	mov	r3, r5
 801a262:	462a      	mov	r2, r5
 801a264:	d112      	bne.n	801a28c <__ieee754_sqrt+0x38>
 801a266:	ee10 2a10 	vmov	r2, s0
 801a26a:	ee10 0a10 	vmov	r0, s0
 801a26e:	4629      	mov	r1, r5
 801a270:	f7e6 f9c2 	bl	80005f8 <__aeabi_dmul>
 801a274:	4602      	mov	r2, r0
 801a276:	460b      	mov	r3, r1
 801a278:	4620      	mov	r0, r4
 801a27a:	4629      	mov	r1, r5
 801a27c:	f7e6 f806 	bl	800028c <__adddf3>
 801a280:	4604      	mov	r4, r0
 801a282:	460d      	mov	r5, r1
 801a284:	ec45 4b10 	vmov	d0, r4, r5
 801a288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a28c:	2d00      	cmp	r5, #0
 801a28e:	ee10 0a10 	vmov	r0, s0
 801a292:	4621      	mov	r1, r4
 801a294:	dc0f      	bgt.n	801a2b6 <__ieee754_sqrt+0x62>
 801a296:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801a29a:	4330      	orrs	r0, r6
 801a29c:	d0f2      	beq.n	801a284 <__ieee754_sqrt+0x30>
 801a29e:	b155      	cbz	r5, 801a2b6 <__ieee754_sqrt+0x62>
 801a2a0:	ee10 2a10 	vmov	r2, s0
 801a2a4:	4620      	mov	r0, r4
 801a2a6:	4629      	mov	r1, r5
 801a2a8:	f7e5 ffee 	bl	8000288 <__aeabi_dsub>
 801a2ac:	4602      	mov	r2, r0
 801a2ae:	460b      	mov	r3, r1
 801a2b0:	f7e6 facc 	bl	800084c <__aeabi_ddiv>
 801a2b4:	e7e4      	b.n	801a280 <__ieee754_sqrt+0x2c>
 801a2b6:	151b      	asrs	r3, r3, #20
 801a2b8:	d073      	beq.n	801a3a2 <__ieee754_sqrt+0x14e>
 801a2ba:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801a2be:	07dd      	lsls	r5, r3, #31
 801a2c0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801a2c4:	bf48      	it	mi
 801a2c6:	0fc8      	lsrmi	r0, r1, #31
 801a2c8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801a2cc:	bf44      	itt	mi
 801a2ce:	0049      	lslmi	r1, r1, #1
 801a2d0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801a2d4:	2500      	movs	r5, #0
 801a2d6:	1058      	asrs	r0, r3, #1
 801a2d8:	0fcb      	lsrs	r3, r1, #31
 801a2da:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801a2de:	0049      	lsls	r1, r1, #1
 801a2e0:	2316      	movs	r3, #22
 801a2e2:	462c      	mov	r4, r5
 801a2e4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 801a2e8:	19a7      	adds	r7, r4, r6
 801a2ea:	4297      	cmp	r7, r2
 801a2ec:	bfde      	ittt	le
 801a2ee:	19bc      	addle	r4, r7, r6
 801a2f0:	1bd2      	suble	r2, r2, r7
 801a2f2:	19ad      	addle	r5, r5, r6
 801a2f4:	0fcf      	lsrs	r7, r1, #31
 801a2f6:	3b01      	subs	r3, #1
 801a2f8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 801a2fc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801a300:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801a304:	d1f0      	bne.n	801a2e8 <__ieee754_sqrt+0x94>
 801a306:	f04f 0c20 	mov.w	ip, #32
 801a30a:	469e      	mov	lr, r3
 801a30c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801a310:	42a2      	cmp	r2, r4
 801a312:	eb06 070e 	add.w	r7, r6, lr
 801a316:	dc02      	bgt.n	801a31e <__ieee754_sqrt+0xca>
 801a318:	d112      	bne.n	801a340 <__ieee754_sqrt+0xec>
 801a31a:	428f      	cmp	r7, r1
 801a31c:	d810      	bhi.n	801a340 <__ieee754_sqrt+0xec>
 801a31e:	2f00      	cmp	r7, #0
 801a320:	eb07 0e06 	add.w	lr, r7, r6
 801a324:	da42      	bge.n	801a3ac <__ieee754_sqrt+0x158>
 801a326:	f1be 0f00 	cmp.w	lr, #0
 801a32a:	db3f      	blt.n	801a3ac <__ieee754_sqrt+0x158>
 801a32c:	f104 0801 	add.w	r8, r4, #1
 801a330:	1b12      	subs	r2, r2, r4
 801a332:	428f      	cmp	r7, r1
 801a334:	bf88      	it	hi
 801a336:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801a33a:	1bc9      	subs	r1, r1, r7
 801a33c:	4433      	add	r3, r6
 801a33e:	4644      	mov	r4, r8
 801a340:	0052      	lsls	r2, r2, #1
 801a342:	f1bc 0c01 	subs.w	ip, ip, #1
 801a346:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801a34a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801a34e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801a352:	d1dd      	bne.n	801a310 <__ieee754_sqrt+0xbc>
 801a354:	430a      	orrs	r2, r1
 801a356:	d006      	beq.n	801a366 <__ieee754_sqrt+0x112>
 801a358:	1c5c      	adds	r4, r3, #1
 801a35a:	bf13      	iteet	ne
 801a35c:	3301      	addne	r3, #1
 801a35e:	3501      	addeq	r5, #1
 801a360:	4663      	moveq	r3, ip
 801a362:	f023 0301 	bicne.w	r3, r3, #1
 801a366:	106a      	asrs	r2, r5, #1
 801a368:	085b      	lsrs	r3, r3, #1
 801a36a:	07e9      	lsls	r1, r5, #31
 801a36c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801a370:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801a374:	bf48      	it	mi
 801a376:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801a37a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801a37e:	461c      	mov	r4, r3
 801a380:	e780      	b.n	801a284 <__ieee754_sqrt+0x30>
 801a382:	0aca      	lsrs	r2, r1, #11
 801a384:	3815      	subs	r0, #21
 801a386:	0549      	lsls	r1, r1, #21
 801a388:	2a00      	cmp	r2, #0
 801a38a:	d0fa      	beq.n	801a382 <__ieee754_sqrt+0x12e>
 801a38c:	02d6      	lsls	r6, r2, #11
 801a38e:	d50a      	bpl.n	801a3a6 <__ieee754_sqrt+0x152>
 801a390:	f1c3 0420 	rsb	r4, r3, #32
 801a394:	fa21 f404 	lsr.w	r4, r1, r4
 801a398:	1e5d      	subs	r5, r3, #1
 801a39a:	4099      	lsls	r1, r3
 801a39c:	4322      	orrs	r2, r4
 801a39e:	1b43      	subs	r3, r0, r5
 801a3a0:	e78b      	b.n	801a2ba <__ieee754_sqrt+0x66>
 801a3a2:	4618      	mov	r0, r3
 801a3a4:	e7f0      	b.n	801a388 <__ieee754_sqrt+0x134>
 801a3a6:	0052      	lsls	r2, r2, #1
 801a3a8:	3301      	adds	r3, #1
 801a3aa:	e7ef      	b.n	801a38c <__ieee754_sqrt+0x138>
 801a3ac:	46a0      	mov	r8, r4
 801a3ae:	e7bf      	b.n	801a330 <__ieee754_sqrt+0xdc>
 801a3b0:	7ff00000 	.word	0x7ff00000
 801a3b4:	00000000 	.word	0x00000000

0801a3b8 <__kernel_cos>:
 801a3b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3bc:	ec59 8b10 	vmov	r8, r9, d0
 801a3c0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 801a3c4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 801a3c8:	ed2d 8b02 	vpush	{d8}
 801a3cc:	eeb0 8a41 	vmov.f32	s16, s2
 801a3d0:	eef0 8a61 	vmov.f32	s17, s3
 801a3d4:	da07      	bge.n	801a3e6 <__kernel_cos+0x2e>
 801a3d6:	ee10 0a10 	vmov	r0, s0
 801a3da:	4649      	mov	r1, r9
 801a3dc:	f7e6 fbbc 	bl	8000b58 <__aeabi_d2iz>
 801a3e0:	2800      	cmp	r0, #0
 801a3e2:	f000 8089 	beq.w	801a4f8 <__kernel_cos+0x140>
 801a3e6:	4642      	mov	r2, r8
 801a3e8:	464b      	mov	r3, r9
 801a3ea:	4640      	mov	r0, r8
 801a3ec:	4649      	mov	r1, r9
 801a3ee:	f7e6 f903 	bl	80005f8 <__aeabi_dmul>
 801a3f2:	2200      	movs	r2, #0
 801a3f4:	4b4e      	ldr	r3, [pc, #312]	; (801a530 <__kernel_cos+0x178>)
 801a3f6:	4604      	mov	r4, r0
 801a3f8:	460d      	mov	r5, r1
 801a3fa:	f7e6 f8fd 	bl	80005f8 <__aeabi_dmul>
 801a3fe:	a340      	add	r3, pc, #256	; (adr r3, 801a500 <__kernel_cos+0x148>)
 801a400:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a404:	4682      	mov	sl, r0
 801a406:	468b      	mov	fp, r1
 801a408:	4620      	mov	r0, r4
 801a40a:	4629      	mov	r1, r5
 801a40c:	f7e6 f8f4 	bl	80005f8 <__aeabi_dmul>
 801a410:	a33d      	add	r3, pc, #244	; (adr r3, 801a508 <__kernel_cos+0x150>)
 801a412:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a416:	f7e5 ff39 	bl	800028c <__adddf3>
 801a41a:	4622      	mov	r2, r4
 801a41c:	462b      	mov	r3, r5
 801a41e:	f7e6 f8eb 	bl	80005f8 <__aeabi_dmul>
 801a422:	a33b      	add	r3, pc, #236	; (adr r3, 801a510 <__kernel_cos+0x158>)
 801a424:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a428:	f7e5 ff2e 	bl	8000288 <__aeabi_dsub>
 801a42c:	4622      	mov	r2, r4
 801a42e:	462b      	mov	r3, r5
 801a430:	f7e6 f8e2 	bl	80005f8 <__aeabi_dmul>
 801a434:	a338      	add	r3, pc, #224	; (adr r3, 801a518 <__kernel_cos+0x160>)
 801a436:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a43a:	f7e5 ff27 	bl	800028c <__adddf3>
 801a43e:	4622      	mov	r2, r4
 801a440:	462b      	mov	r3, r5
 801a442:	f7e6 f8d9 	bl	80005f8 <__aeabi_dmul>
 801a446:	a336      	add	r3, pc, #216	; (adr r3, 801a520 <__kernel_cos+0x168>)
 801a448:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a44c:	f7e5 ff1c 	bl	8000288 <__aeabi_dsub>
 801a450:	4622      	mov	r2, r4
 801a452:	462b      	mov	r3, r5
 801a454:	f7e6 f8d0 	bl	80005f8 <__aeabi_dmul>
 801a458:	a333      	add	r3, pc, #204	; (adr r3, 801a528 <__kernel_cos+0x170>)
 801a45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a45e:	f7e5 ff15 	bl	800028c <__adddf3>
 801a462:	4622      	mov	r2, r4
 801a464:	462b      	mov	r3, r5
 801a466:	f7e6 f8c7 	bl	80005f8 <__aeabi_dmul>
 801a46a:	4622      	mov	r2, r4
 801a46c:	462b      	mov	r3, r5
 801a46e:	f7e6 f8c3 	bl	80005f8 <__aeabi_dmul>
 801a472:	ec53 2b18 	vmov	r2, r3, d8
 801a476:	4604      	mov	r4, r0
 801a478:	460d      	mov	r5, r1
 801a47a:	4640      	mov	r0, r8
 801a47c:	4649      	mov	r1, r9
 801a47e:	f7e6 f8bb 	bl	80005f8 <__aeabi_dmul>
 801a482:	460b      	mov	r3, r1
 801a484:	4602      	mov	r2, r0
 801a486:	4629      	mov	r1, r5
 801a488:	4620      	mov	r0, r4
 801a48a:	f7e5 fefd 	bl	8000288 <__aeabi_dsub>
 801a48e:	4b29      	ldr	r3, [pc, #164]	; (801a534 <__kernel_cos+0x17c>)
 801a490:	429e      	cmp	r6, r3
 801a492:	4680      	mov	r8, r0
 801a494:	4689      	mov	r9, r1
 801a496:	dc11      	bgt.n	801a4bc <__kernel_cos+0x104>
 801a498:	4602      	mov	r2, r0
 801a49a:	460b      	mov	r3, r1
 801a49c:	4650      	mov	r0, sl
 801a49e:	4659      	mov	r1, fp
 801a4a0:	f7e5 fef2 	bl	8000288 <__aeabi_dsub>
 801a4a4:	460b      	mov	r3, r1
 801a4a6:	4924      	ldr	r1, [pc, #144]	; (801a538 <__kernel_cos+0x180>)
 801a4a8:	4602      	mov	r2, r0
 801a4aa:	2000      	movs	r0, #0
 801a4ac:	f7e5 feec 	bl	8000288 <__aeabi_dsub>
 801a4b0:	ecbd 8b02 	vpop	{d8}
 801a4b4:	ec41 0b10 	vmov	d0, r0, r1
 801a4b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a4bc:	4b1f      	ldr	r3, [pc, #124]	; (801a53c <__kernel_cos+0x184>)
 801a4be:	491e      	ldr	r1, [pc, #120]	; (801a538 <__kernel_cos+0x180>)
 801a4c0:	429e      	cmp	r6, r3
 801a4c2:	bfcc      	ite	gt
 801a4c4:	4d1e      	ldrgt	r5, [pc, #120]	; (801a540 <__kernel_cos+0x188>)
 801a4c6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 801a4ca:	2400      	movs	r4, #0
 801a4cc:	4622      	mov	r2, r4
 801a4ce:	462b      	mov	r3, r5
 801a4d0:	2000      	movs	r0, #0
 801a4d2:	f7e5 fed9 	bl	8000288 <__aeabi_dsub>
 801a4d6:	4622      	mov	r2, r4
 801a4d8:	4606      	mov	r6, r0
 801a4da:	460f      	mov	r7, r1
 801a4dc:	462b      	mov	r3, r5
 801a4de:	4650      	mov	r0, sl
 801a4e0:	4659      	mov	r1, fp
 801a4e2:	f7e5 fed1 	bl	8000288 <__aeabi_dsub>
 801a4e6:	4642      	mov	r2, r8
 801a4e8:	464b      	mov	r3, r9
 801a4ea:	f7e5 fecd 	bl	8000288 <__aeabi_dsub>
 801a4ee:	4602      	mov	r2, r0
 801a4f0:	460b      	mov	r3, r1
 801a4f2:	4630      	mov	r0, r6
 801a4f4:	4639      	mov	r1, r7
 801a4f6:	e7d9      	b.n	801a4ac <__kernel_cos+0xf4>
 801a4f8:	2000      	movs	r0, #0
 801a4fa:	490f      	ldr	r1, [pc, #60]	; (801a538 <__kernel_cos+0x180>)
 801a4fc:	e7d8      	b.n	801a4b0 <__kernel_cos+0xf8>
 801a4fe:	bf00      	nop
 801a500:	be8838d4 	.word	0xbe8838d4
 801a504:	bda8fae9 	.word	0xbda8fae9
 801a508:	bdb4b1c4 	.word	0xbdb4b1c4
 801a50c:	3e21ee9e 	.word	0x3e21ee9e
 801a510:	809c52ad 	.word	0x809c52ad
 801a514:	3e927e4f 	.word	0x3e927e4f
 801a518:	19cb1590 	.word	0x19cb1590
 801a51c:	3efa01a0 	.word	0x3efa01a0
 801a520:	16c15177 	.word	0x16c15177
 801a524:	3f56c16c 	.word	0x3f56c16c
 801a528:	5555554c 	.word	0x5555554c
 801a52c:	3fa55555 	.word	0x3fa55555
 801a530:	3fe00000 	.word	0x3fe00000
 801a534:	3fd33332 	.word	0x3fd33332
 801a538:	3ff00000 	.word	0x3ff00000
 801a53c:	3fe90000 	.word	0x3fe90000
 801a540:	3fd20000 	.word	0x3fd20000
 801a544:	00000000 	.word	0x00000000

0801a548 <__kernel_rem_pio2>:
 801a548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a54c:	ed2d 8b02 	vpush	{d8}
 801a550:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801a554:	1ed4      	subs	r4, r2, #3
 801a556:	9308      	str	r3, [sp, #32]
 801a558:	9101      	str	r1, [sp, #4]
 801a55a:	4bc5      	ldr	r3, [pc, #788]	; (801a870 <__kernel_rem_pio2+0x328>)
 801a55c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 801a55e:	9009      	str	r0, [sp, #36]	; 0x24
 801a560:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801a564:	9304      	str	r3, [sp, #16]
 801a566:	9b08      	ldr	r3, [sp, #32]
 801a568:	3b01      	subs	r3, #1
 801a56a:	9307      	str	r3, [sp, #28]
 801a56c:	2318      	movs	r3, #24
 801a56e:	fb94 f4f3 	sdiv	r4, r4, r3
 801a572:	f06f 0317 	mvn.w	r3, #23
 801a576:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801a57a:	fb04 3303 	mla	r3, r4, r3, r3
 801a57e:	eb03 0a02 	add.w	sl, r3, r2
 801a582:	9b04      	ldr	r3, [sp, #16]
 801a584:	9a07      	ldr	r2, [sp, #28]
 801a586:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 801a860 <__kernel_rem_pio2+0x318>
 801a58a:	eb03 0802 	add.w	r8, r3, r2
 801a58e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801a590:	1aa7      	subs	r7, r4, r2
 801a592:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801a596:	ae22      	add	r6, sp, #136	; 0x88
 801a598:	2500      	movs	r5, #0
 801a59a:	4545      	cmp	r5, r8
 801a59c:	dd13      	ble.n	801a5c6 <__kernel_rem_pio2+0x7e>
 801a59e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 801a860 <__kernel_rem_pio2+0x318>
 801a5a2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801a5a6:	2600      	movs	r6, #0
 801a5a8:	9b04      	ldr	r3, [sp, #16]
 801a5aa:	429e      	cmp	r6, r3
 801a5ac:	dc32      	bgt.n	801a614 <__kernel_rem_pio2+0xcc>
 801a5ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a5b0:	9302      	str	r3, [sp, #8]
 801a5b2:	9b08      	ldr	r3, [sp, #32]
 801a5b4:	199d      	adds	r5, r3, r6
 801a5b6:	ab22      	add	r3, sp, #136	; 0x88
 801a5b8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801a5bc:	9306      	str	r3, [sp, #24]
 801a5be:	ec59 8b18 	vmov	r8, r9, d8
 801a5c2:	2700      	movs	r7, #0
 801a5c4:	e01f      	b.n	801a606 <__kernel_rem_pio2+0xbe>
 801a5c6:	42ef      	cmn	r7, r5
 801a5c8:	d407      	bmi.n	801a5da <__kernel_rem_pio2+0x92>
 801a5ca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801a5ce:	f7e5 ffa9 	bl	8000524 <__aeabi_i2d>
 801a5d2:	e8e6 0102 	strd	r0, r1, [r6], #8
 801a5d6:	3501      	adds	r5, #1
 801a5d8:	e7df      	b.n	801a59a <__kernel_rem_pio2+0x52>
 801a5da:	ec51 0b18 	vmov	r0, r1, d8
 801a5de:	e7f8      	b.n	801a5d2 <__kernel_rem_pio2+0x8a>
 801a5e0:	9906      	ldr	r1, [sp, #24]
 801a5e2:	9d02      	ldr	r5, [sp, #8]
 801a5e4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 801a5e8:	9106      	str	r1, [sp, #24]
 801a5ea:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 801a5ee:	9502      	str	r5, [sp, #8]
 801a5f0:	f7e6 f802 	bl	80005f8 <__aeabi_dmul>
 801a5f4:	4602      	mov	r2, r0
 801a5f6:	460b      	mov	r3, r1
 801a5f8:	4640      	mov	r0, r8
 801a5fa:	4649      	mov	r1, r9
 801a5fc:	f7e5 fe46 	bl	800028c <__adddf3>
 801a600:	3701      	adds	r7, #1
 801a602:	4680      	mov	r8, r0
 801a604:	4689      	mov	r9, r1
 801a606:	9b07      	ldr	r3, [sp, #28]
 801a608:	429f      	cmp	r7, r3
 801a60a:	dde9      	ble.n	801a5e0 <__kernel_rem_pio2+0x98>
 801a60c:	e8eb 8902 	strd	r8, r9, [fp], #8
 801a610:	3601      	adds	r6, #1
 801a612:	e7c9      	b.n	801a5a8 <__kernel_rem_pio2+0x60>
 801a614:	9b04      	ldr	r3, [sp, #16]
 801a616:	aa0e      	add	r2, sp, #56	; 0x38
 801a618:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a61c:	930c      	str	r3, [sp, #48]	; 0x30
 801a61e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801a620:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801a624:	9c04      	ldr	r4, [sp, #16]
 801a626:	930b      	str	r3, [sp, #44]	; 0x2c
 801a628:	ab9a      	add	r3, sp, #616	; 0x268
 801a62a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 801a62e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801a632:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a636:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 801a63a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801a63e:	ab9a      	add	r3, sp, #616	; 0x268
 801a640:	445b      	add	r3, fp
 801a642:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 801a646:	2500      	movs	r5, #0
 801a648:	1b63      	subs	r3, r4, r5
 801a64a:	2b00      	cmp	r3, #0
 801a64c:	dc78      	bgt.n	801a740 <__kernel_rem_pio2+0x1f8>
 801a64e:	4650      	mov	r0, sl
 801a650:	ec49 8b10 	vmov	d0, r8, r9
 801a654:	f000 fda8 	bl	801b1a8 <scalbn>
 801a658:	ec57 6b10 	vmov	r6, r7, d0
 801a65c:	2200      	movs	r2, #0
 801a65e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801a662:	ee10 0a10 	vmov	r0, s0
 801a666:	4639      	mov	r1, r7
 801a668:	f7e5 ffc6 	bl	80005f8 <__aeabi_dmul>
 801a66c:	ec41 0b10 	vmov	d0, r0, r1
 801a670:	f000 fd12 	bl	801b098 <floor>
 801a674:	2200      	movs	r2, #0
 801a676:	ec51 0b10 	vmov	r0, r1, d0
 801a67a:	4b7e      	ldr	r3, [pc, #504]	; (801a874 <__kernel_rem_pio2+0x32c>)
 801a67c:	f7e5 ffbc 	bl	80005f8 <__aeabi_dmul>
 801a680:	4602      	mov	r2, r0
 801a682:	460b      	mov	r3, r1
 801a684:	4630      	mov	r0, r6
 801a686:	4639      	mov	r1, r7
 801a688:	f7e5 fdfe 	bl	8000288 <__aeabi_dsub>
 801a68c:	460f      	mov	r7, r1
 801a68e:	4606      	mov	r6, r0
 801a690:	f7e6 fa62 	bl	8000b58 <__aeabi_d2iz>
 801a694:	9006      	str	r0, [sp, #24]
 801a696:	f7e5 ff45 	bl	8000524 <__aeabi_i2d>
 801a69a:	4602      	mov	r2, r0
 801a69c:	460b      	mov	r3, r1
 801a69e:	4630      	mov	r0, r6
 801a6a0:	4639      	mov	r1, r7
 801a6a2:	f7e5 fdf1 	bl	8000288 <__aeabi_dsub>
 801a6a6:	f1ba 0f00 	cmp.w	sl, #0
 801a6aa:	4606      	mov	r6, r0
 801a6ac:	460f      	mov	r7, r1
 801a6ae:	dd6c      	ble.n	801a78a <__kernel_rem_pio2+0x242>
 801a6b0:	1e62      	subs	r2, r4, #1
 801a6b2:	ab0e      	add	r3, sp, #56	; 0x38
 801a6b4:	f1ca 0118 	rsb	r1, sl, #24
 801a6b8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801a6bc:	9d06      	ldr	r5, [sp, #24]
 801a6be:	fa40 f301 	asr.w	r3, r0, r1
 801a6c2:	441d      	add	r5, r3
 801a6c4:	408b      	lsls	r3, r1
 801a6c6:	1ac0      	subs	r0, r0, r3
 801a6c8:	ab0e      	add	r3, sp, #56	; 0x38
 801a6ca:	9506      	str	r5, [sp, #24]
 801a6cc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801a6d0:	f1ca 0317 	rsb	r3, sl, #23
 801a6d4:	fa40 f303 	asr.w	r3, r0, r3
 801a6d8:	9302      	str	r3, [sp, #8]
 801a6da:	9b02      	ldr	r3, [sp, #8]
 801a6dc:	2b00      	cmp	r3, #0
 801a6de:	dd62      	ble.n	801a7a6 <__kernel_rem_pio2+0x25e>
 801a6e0:	9b06      	ldr	r3, [sp, #24]
 801a6e2:	2200      	movs	r2, #0
 801a6e4:	3301      	adds	r3, #1
 801a6e6:	9306      	str	r3, [sp, #24]
 801a6e8:	4615      	mov	r5, r2
 801a6ea:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801a6ee:	4294      	cmp	r4, r2
 801a6f0:	f300 8095 	bgt.w	801a81e <__kernel_rem_pio2+0x2d6>
 801a6f4:	f1ba 0f00 	cmp.w	sl, #0
 801a6f8:	dd07      	ble.n	801a70a <__kernel_rem_pio2+0x1c2>
 801a6fa:	f1ba 0f01 	cmp.w	sl, #1
 801a6fe:	f000 80a2 	beq.w	801a846 <__kernel_rem_pio2+0x2fe>
 801a702:	f1ba 0f02 	cmp.w	sl, #2
 801a706:	f000 80c1 	beq.w	801a88c <__kernel_rem_pio2+0x344>
 801a70a:	9b02      	ldr	r3, [sp, #8]
 801a70c:	2b02      	cmp	r3, #2
 801a70e:	d14a      	bne.n	801a7a6 <__kernel_rem_pio2+0x25e>
 801a710:	4632      	mov	r2, r6
 801a712:	463b      	mov	r3, r7
 801a714:	2000      	movs	r0, #0
 801a716:	4958      	ldr	r1, [pc, #352]	; (801a878 <__kernel_rem_pio2+0x330>)
 801a718:	f7e5 fdb6 	bl	8000288 <__aeabi_dsub>
 801a71c:	4606      	mov	r6, r0
 801a71e:	460f      	mov	r7, r1
 801a720:	2d00      	cmp	r5, #0
 801a722:	d040      	beq.n	801a7a6 <__kernel_rem_pio2+0x25e>
 801a724:	4650      	mov	r0, sl
 801a726:	ed9f 0b50 	vldr	d0, [pc, #320]	; 801a868 <__kernel_rem_pio2+0x320>
 801a72a:	f000 fd3d 	bl	801b1a8 <scalbn>
 801a72e:	4630      	mov	r0, r6
 801a730:	4639      	mov	r1, r7
 801a732:	ec53 2b10 	vmov	r2, r3, d0
 801a736:	f7e5 fda7 	bl	8000288 <__aeabi_dsub>
 801a73a:	4606      	mov	r6, r0
 801a73c:	460f      	mov	r7, r1
 801a73e:	e032      	b.n	801a7a6 <__kernel_rem_pio2+0x25e>
 801a740:	2200      	movs	r2, #0
 801a742:	4b4e      	ldr	r3, [pc, #312]	; (801a87c <__kernel_rem_pio2+0x334>)
 801a744:	4640      	mov	r0, r8
 801a746:	4649      	mov	r1, r9
 801a748:	f7e5 ff56 	bl	80005f8 <__aeabi_dmul>
 801a74c:	f7e6 fa04 	bl	8000b58 <__aeabi_d2iz>
 801a750:	f7e5 fee8 	bl	8000524 <__aeabi_i2d>
 801a754:	2200      	movs	r2, #0
 801a756:	4b4a      	ldr	r3, [pc, #296]	; (801a880 <__kernel_rem_pio2+0x338>)
 801a758:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a75c:	f7e5 ff4c 	bl	80005f8 <__aeabi_dmul>
 801a760:	4602      	mov	r2, r0
 801a762:	460b      	mov	r3, r1
 801a764:	4640      	mov	r0, r8
 801a766:	4649      	mov	r1, r9
 801a768:	f7e5 fd8e 	bl	8000288 <__aeabi_dsub>
 801a76c:	f7e6 f9f4 	bl	8000b58 <__aeabi_d2iz>
 801a770:	ab0e      	add	r3, sp, #56	; 0x38
 801a772:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 801a776:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801a77a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a77e:	f7e5 fd85 	bl	800028c <__adddf3>
 801a782:	3501      	adds	r5, #1
 801a784:	4680      	mov	r8, r0
 801a786:	4689      	mov	r9, r1
 801a788:	e75e      	b.n	801a648 <__kernel_rem_pio2+0x100>
 801a78a:	d105      	bne.n	801a798 <__kernel_rem_pio2+0x250>
 801a78c:	1e63      	subs	r3, r4, #1
 801a78e:	aa0e      	add	r2, sp, #56	; 0x38
 801a790:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801a794:	15c3      	asrs	r3, r0, #23
 801a796:	e79f      	b.n	801a6d8 <__kernel_rem_pio2+0x190>
 801a798:	2200      	movs	r2, #0
 801a79a:	4b3a      	ldr	r3, [pc, #232]	; (801a884 <__kernel_rem_pio2+0x33c>)
 801a79c:	f7e6 f9b2 	bl	8000b04 <__aeabi_dcmpge>
 801a7a0:	2800      	cmp	r0, #0
 801a7a2:	d139      	bne.n	801a818 <__kernel_rem_pio2+0x2d0>
 801a7a4:	9002      	str	r0, [sp, #8]
 801a7a6:	2200      	movs	r2, #0
 801a7a8:	2300      	movs	r3, #0
 801a7aa:	4630      	mov	r0, r6
 801a7ac:	4639      	mov	r1, r7
 801a7ae:	f7e6 f98b 	bl	8000ac8 <__aeabi_dcmpeq>
 801a7b2:	2800      	cmp	r0, #0
 801a7b4:	f000 80c7 	beq.w	801a946 <__kernel_rem_pio2+0x3fe>
 801a7b8:	1e65      	subs	r5, r4, #1
 801a7ba:	462b      	mov	r3, r5
 801a7bc:	2200      	movs	r2, #0
 801a7be:	9904      	ldr	r1, [sp, #16]
 801a7c0:	428b      	cmp	r3, r1
 801a7c2:	da6a      	bge.n	801a89a <__kernel_rem_pio2+0x352>
 801a7c4:	2a00      	cmp	r2, #0
 801a7c6:	f000 8088 	beq.w	801a8da <__kernel_rem_pio2+0x392>
 801a7ca:	ab0e      	add	r3, sp, #56	; 0x38
 801a7cc:	f1aa 0a18 	sub.w	sl, sl, #24
 801a7d0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801a7d4:	2b00      	cmp	r3, #0
 801a7d6:	f000 80b4 	beq.w	801a942 <__kernel_rem_pio2+0x3fa>
 801a7da:	4650      	mov	r0, sl
 801a7dc:	ed9f 0b22 	vldr	d0, [pc, #136]	; 801a868 <__kernel_rem_pio2+0x320>
 801a7e0:	f000 fce2 	bl	801b1a8 <scalbn>
 801a7e4:	00ec      	lsls	r4, r5, #3
 801a7e6:	ab72      	add	r3, sp, #456	; 0x1c8
 801a7e8:	191e      	adds	r6, r3, r4
 801a7ea:	ec59 8b10 	vmov	r8, r9, d0
 801a7ee:	f106 0a08 	add.w	sl, r6, #8
 801a7f2:	462f      	mov	r7, r5
 801a7f4:	2f00      	cmp	r7, #0
 801a7f6:	f280 80df 	bge.w	801a9b8 <__kernel_rem_pio2+0x470>
 801a7fa:	ed9f 8b19 	vldr	d8, [pc, #100]	; 801a860 <__kernel_rem_pio2+0x318>
 801a7fe:	f04f 0a00 	mov.w	sl, #0
 801a802:	eba5 030a 	sub.w	r3, r5, sl
 801a806:	2b00      	cmp	r3, #0
 801a808:	f2c0 810a 	blt.w	801aa20 <__kernel_rem_pio2+0x4d8>
 801a80c:	f8df b078 	ldr.w	fp, [pc, #120]	; 801a888 <__kernel_rem_pio2+0x340>
 801a810:	ec59 8b18 	vmov	r8, r9, d8
 801a814:	2700      	movs	r7, #0
 801a816:	e0f5      	b.n	801aa04 <__kernel_rem_pio2+0x4bc>
 801a818:	2302      	movs	r3, #2
 801a81a:	9302      	str	r3, [sp, #8]
 801a81c:	e760      	b.n	801a6e0 <__kernel_rem_pio2+0x198>
 801a81e:	ab0e      	add	r3, sp, #56	; 0x38
 801a820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a824:	b94d      	cbnz	r5, 801a83a <__kernel_rem_pio2+0x2f2>
 801a826:	b12b      	cbz	r3, 801a834 <__kernel_rem_pio2+0x2ec>
 801a828:	a80e      	add	r0, sp, #56	; 0x38
 801a82a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801a82e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801a832:	2301      	movs	r3, #1
 801a834:	3201      	adds	r2, #1
 801a836:	461d      	mov	r5, r3
 801a838:	e759      	b.n	801a6ee <__kernel_rem_pio2+0x1a6>
 801a83a:	a80e      	add	r0, sp, #56	; 0x38
 801a83c:	1acb      	subs	r3, r1, r3
 801a83e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801a842:	462b      	mov	r3, r5
 801a844:	e7f6      	b.n	801a834 <__kernel_rem_pio2+0x2ec>
 801a846:	1e62      	subs	r2, r4, #1
 801a848:	ab0e      	add	r3, sp, #56	; 0x38
 801a84a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a84e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801a852:	a90e      	add	r1, sp, #56	; 0x38
 801a854:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801a858:	e757      	b.n	801a70a <__kernel_rem_pio2+0x1c2>
 801a85a:	bf00      	nop
 801a85c:	f3af 8000 	nop.w
	...
 801a86c:	3ff00000 	.word	0x3ff00000
 801a870:	0801ba30 	.word	0x0801ba30
 801a874:	40200000 	.word	0x40200000
 801a878:	3ff00000 	.word	0x3ff00000
 801a87c:	3e700000 	.word	0x3e700000
 801a880:	41700000 	.word	0x41700000
 801a884:	3fe00000 	.word	0x3fe00000
 801a888:	0801b9f0 	.word	0x0801b9f0
 801a88c:	1e62      	subs	r2, r4, #1
 801a88e:	ab0e      	add	r3, sp, #56	; 0x38
 801a890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a894:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801a898:	e7db      	b.n	801a852 <__kernel_rem_pio2+0x30a>
 801a89a:	a90e      	add	r1, sp, #56	; 0x38
 801a89c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801a8a0:	3b01      	subs	r3, #1
 801a8a2:	430a      	orrs	r2, r1
 801a8a4:	e78b      	b.n	801a7be <__kernel_rem_pio2+0x276>
 801a8a6:	3301      	adds	r3, #1
 801a8a8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801a8ac:	2900      	cmp	r1, #0
 801a8ae:	d0fa      	beq.n	801a8a6 <__kernel_rem_pio2+0x35e>
 801a8b0:	9a08      	ldr	r2, [sp, #32]
 801a8b2:	4422      	add	r2, r4
 801a8b4:	00d2      	lsls	r2, r2, #3
 801a8b6:	a922      	add	r1, sp, #136	; 0x88
 801a8b8:	18e3      	adds	r3, r4, r3
 801a8ba:	9206      	str	r2, [sp, #24]
 801a8bc:	440a      	add	r2, r1
 801a8be:	9302      	str	r3, [sp, #8]
 801a8c0:	f10b 0108 	add.w	r1, fp, #8
 801a8c4:	f102 0308 	add.w	r3, r2, #8
 801a8c8:	1c66      	adds	r6, r4, #1
 801a8ca:	910a      	str	r1, [sp, #40]	; 0x28
 801a8cc:	2500      	movs	r5, #0
 801a8ce:	930d      	str	r3, [sp, #52]	; 0x34
 801a8d0:	9b02      	ldr	r3, [sp, #8]
 801a8d2:	42b3      	cmp	r3, r6
 801a8d4:	da04      	bge.n	801a8e0 <__kernel_rem_pio2+0x398>
 801a8d6:	461c      	mov	r4, r3
 801a8d8:	e6a6      	b.n	801a628 <__kernel_rem_pio2+0xe0>
 801a8da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a8dc:	2301      	movs	r3, #1
 801a8de:	e7e3      	b.n	801a8a8 <__kernel_rem_pio2+0x360>
 801a8e0:	9b06      	ldr	r3, [sp, #24]
 801a8e2:	18ef      	adds	r7, r5, r3
 801a8e4:	ab22      	add	r3, sp, #136	; 0x88
 801a8e6:	441f      	add	r7, r3
 801a8e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a8ea:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801a8ee:	f7e5 fe19 	bl	8000524 <__aeabi_i2d>
 801a8f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a8f4:	461c      	mov	r4, r3
 801a8f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a8f8:	e9c7 0100 	strd	r0, r1, [r7]
 801a8fc:	eb03 0b05 	add.w	fp, r3, r5
 801a900:	2700      	movs	r7, #0
 801a902:	f04f 0800 	mov.w	r8, #0
 801a906:	f04f 0900 	mov.w	r9, #0
 801a90a:	9b07      	ldr	r3, [sp, #28]
 801a90c:	429f      	cmp	r7, r3
 801a90e:	dd08      	ble.n	801a922 <__kernel_rem_pio2+0x3da>
 801a910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a912:	aa72      	add	r2, sp, #456	; 0x1c8
 801a914:	18eb      	adds	r3, r5, r3
 801a916:	4413      	add	r3, r2
 801a918:	e9c3 8902 	strd	r8, r9, [r3, #8]
 801a91c:	3601      	adds	r6, #1
 801a91e:	3508      	adds	r5, #8
 801a920:	e7d6      	b.n	801a8d0 <__kernel_rem_pio2+0x388>
 801a922:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801a926:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801a92a:	f7e5 fe65 	bl	80005f8 <__aeabi_dmul>
 801a92e:	4602      	mov	r2, r0
 801a930:	460b      	mov	r3, r1
 801a932:	4640      	mov	r0, r8
 801a934:	4649      	mov	r1, r9
 801a936:	f7e5 fca9 	bl	800028c <__adddf3>
 801a93a:	3701      	adds	r7, #1
 801a93c:	4680      	mov	r8, r0
 801a93e:	4689      	mov	r9, r1
 801a940:	e7e3      	b.n	801a90a <__kernel_rem_pio2+0x3c2>
 801a942:	3d01      	subs	r5, #1
 801a944:	e741      	b.n	801a7ca <__kernel_rem_pio2+0x282>
 801a946:	f1ca 0000 	rsb	r0, sl, #0
 801a94a:	ec47 6b10 	vmov	d0, r6, r7
 801a94e:	f000 fc2b 	bl	801b1a8 <scalbn>
 801a952:	ec57 6b10 	vmov	r6, r7, d0
 801a956:	2200      	movs	r2, #0
 801a958:	4b99      	ldr	r3, [pc, #612]	; (801abc0 <__kernel_rem_pio2+0x678>)
 801a95a:	ee10 0a10 	vmov	r0, s0
 801a95e:	4639      	mov	r1, r7
 801a960:	f7e6 f8d0 	bl	8000b04 <__aeabi_dcmpge>
 801a964:	b1f8      	cbz	r0, 801a9a6 <__kernel_rem_pio2+0x45e>
 801a966:	2200      	movs	r2, #0
 801a968:	4b96      	ldr	r3, [pc, #600]	; (801abc4 <__kernel_rem_pio2+0x67c>)
 801a96a:	4630      	mov	r0, r6
 801a96c:	4639      	mov	r1, r7
 801a96e:	f7e5 fe43 	bl	80005f8 <__aeabi_dmul>
 801a972:	f7e6 f8f1 	bl	8000b58 <__aeabi_d2iz>
 801a976:	4680      	mov	r8, r0
 801a978:	f7e5 fdd4 	bl	8000524 <__aeabi_i2d>
 801a97c:	2200      	movs	r2, #0
 801a97e:	4b90      	ldr	r3, [pc, #576]	; (801abc0 <__kernel_rem_pio2+0x678>)
 801a980:	f7e5 fe3a 	bl	80005f8 <__aeabi_dmul>
 801a984:	460b      	mov	r3, r1
 801a986:	4602      	mov	r2, r0
 801a988:	4639      	mov	r1, r7
 801a98a:	4630      	mov	r0, r6
 801a98c:	f7e5 fc7c 	bl	8000288 <__aeabi_dsub>
 801a990:	f7e6 f8e2 	bl	8000b58 <__aeabi_d2iz>
 801a994:	1c65      	adds	r5, r4, #1
 801a996:	ab0e      	add	r3, sp, #56	; 0x38
 801a998:	f10a 0a18 	add.w	sl, sl, #24
 801a99c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801a9a0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801a9a4:	e719      	b.n	801a7da <__kernel_rem_pio2+0x292>
 801a9a6:	4630      	mov	r0, r6
 801a9a8:	4639      	mov	r1, r7
 801a9aa:	f7e6 f8d5 	bl	8000b58 <__aeabi_d2iz>
 801a9ae:	ab0e      	add	r3, sp, #56	; 0x38
 801a9b0:	4625      	mov	r5, r4
 801a9b2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801a9b6:	e710      	b.n	801a7da <__kernel_rem_pio2+0x292>
 801a9b8:	ab0e      	add	r3, sp, #56	; 0x38
 801a9ba:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801a9be:	f7e5 fdb1 	bl	8000524 <__aeabi_i2d>
 801a9c2:	4642      	mov	r2, r8
 801a9c4:	464b      	mov	r3, r9
 801a9c6:	f7e5 fe17 	bl	80005f8 <__aeabi_dmul>
 801a9ca:	2200      	movs	r2, #0
 801a9cc:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 801a9d0:	4b7c      	ldr	r3, [pc, #496]	; (801abc4 <__kernel_rem_pio2+0x67c>)
 801a9d2:	4640      	mov	r0, r8
 801a9d4:	4649      	mov	r1, r9
 801a9d6:	f7e5 fe0f 	bl	80005f8 <__aeabi_dmul>
 801a9da:	3f01      	subs	r7, #1
 801a9dc:	4680      	mov	r8, r0
 801a9de:	4689      	mov	r9, r1
 801a9e0:	e708      	b.n	801a7f4 <__kernel_rem_pio2+0x2ac>
 801a9e2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 801a9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9ea:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 801a9ee:	f7e5 fe03 	bl	80005f8 <__aeabi_dmul>
 801a9f2:	4602      	mov	r2, r0
 801a9f4:	460b      	mov	r3, r1
 801a9f6:	4640      	mov	r0, r8
 801a9f8:	4649      	mov	r1, r9
 801a9fa:	f7e5 fc47 	bl	800028c <__adddf3>
 801a9fe:	3701      	adds	r7, #1
 801aa00:	4680      	mov	r8, r0
 801aa02:	4689      	mov	r9, r1
 801aa04:	9b04      	ldr	r3, [sp, #16]
 801aa06:	429f      	cmp	r7, r3
 801aa08:	dc01      	bgt.n	801aa0e <__kernel_rem_pio2+0x4c6>
 801aa0a:	45ba      	cmp	sl, r7
 801aa0c:	dae9      	bge.n	801a9e2 <__kernel_rem_pio2+0x49a>
 801aa0e:	ab4a      	add	r3, sp, #296	; 0x128
 801aa10:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801aa14:	e9c3 8900 	strd	r8, r9, [r3]
 801aa18:	f10a 0a01 	add.w	sl, sl, #1
 801aa1c:	3e08      	subs	r6, #8
 801aa1e:	e6f0      	b.n	801a802 <__kernel_rem_pio2+0x2ba>
 801aa20:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801aa22:	2b03      	cmp	r3, #3
 801aa24:	d85b      	bhi.n	801aade <__kernel_rem_pio2+0x596>
 801aa26:	e8df f003 	tbb	[pc, r3]
 801aa2a:	264a      	.short	0x264a
 801aa2c:	0226      	.short	0x0226
 801aa2e:	ab9a      	add	r3, sp, #616	; 0x268
 801aa30:	441c      	add	r4, r3
 801aa32:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801aa36:	46a2      	mov	sl, r4
 801aa38:	46ab      	mov	fp, r5
 801aa3a:	f1bb 0f00 	cmp.w	fp, #0
 801aa3e:	dc6c      	bgt.n	801ab1a <__kernel_rem_pio2+0x5d2>
 801aa40:	46a2      	mov	sl, r4
 801aa42:	46ab      	mov	fp, r5
 801aa44:	f1bb 0f01 	cmp.w	fp, #1
 801aa48:	f300 8086 	bgt.w	801ab58 <__kernel_rem_pio2+0x610>
 801aa4c:	2000      	movs	r0, #0
 801aa4e:	2100      	movs	r1, #0
 801aa50:	2d01      	cmp	r5, #1
 801aa52:	f300 80a0 	bgt.w	801ab96 <__kernel_rem_pio2+0x64e>
 801aa56:	9b02      	ldr	r3, [sp, #8]
 801aa58:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 801aa5c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 801aa60:	2b00      	cmp	r3, #0
 801aa62:	f040 809e 	bne.w	801aba2 <__kernel_rem_pio2+0x65a>
 801aa66:	9b01      	ldr	r3, [sp, #4]
 801aa68:	e9c3 7800 	strd	r7, r8, [r3]
 801aa6c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801aa70:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801aa74:	e033      	b.n	801aade <__kernel_rem_pio2+0x596>
 801aa76:	3408      	adds	r4, #8
 801aa78:	ab4a      	add	r3, sp, #296	; 0x128
 801aa7a:	441c      	add	r4, r3
 801aa7c:	462e      	mov	r6, r5
 801aa7e:	2000      	movs	r0, #0
 801aa80:	2100      	movs	r1, #0
 801aa82:	2e00      	cmp	r6, #0
 801aa84:	da3a      	bge.n	801aafc <__kernel_rem_pio2+0x5b4>
 801aa86:	9b02      	ldr	r3, [sp, #8]
 801aa88:	2b00      	cmp	r3, #0
 801aa8a:	d03d      	beq.n	801ab08 <__kernel_rem_pio2+0x5c0>
 801aa8c:	4602      	mov	r2, r0
 801aa8e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801aa92:	9c01      	ldr	r4, [sp, #4]
 801aa94:	e9c4 2300 	strd	r2, r3, [r4]
 801aa98:	4602      	mov	r2, r0
 801aa9a:	460b      	mov	r3, r1
 801aa9c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 801aaa0:	f7e5 fbf2 	bl	8000288 <__aeabi_dsub>
 801aaa4:	ae4c      	add	r6, sp, #304	; 0x130
 801aaa6:	2401      	movs	r4, #1
 801aaa8:	42a5      	cmp	r5, r4
 801aaaa:	da30      	bge.n	801ab0e <__kernel_rem_pio2+0x5c6>
 801aaac:	9b02      	ldr	r3, [sp, #8]
 801aaae:	b113      	cbz	r3, 801aab6 <__kernel_rem_pio2+0x56e>
 801aab0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801aab4:	4619      	mov	r1, r3
 801aab6:	9b01      	ldr	r3, [sp, #4]
 801aab8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801aabc:	e00f      	b.n	801aade <__kernel_rem_pio2+0x596>
 801aabe:	ab9a      	add	r3, sp, #616	; 0x268
 801aac0:	441c      	add	r4, r3
 801aac2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801aac6:	2000      	movs	r0, #0
 801aac8:	2100      	movs	r1, #0
 801aaca:	2d00      	cmp	r5, #0
 801aacc:	da10      	bge.n	801aaf0 <__kernel_rem_pio2+0x5a8>
 801aace:	9b02      	ldr	r3, [sp, #8]
 801aad0:	b113      	cbz	r3, 801aad8 <__kernel_rem_pio2+0x590>
 801aad2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801aad6:	4619      	mov	r1, r3
 801aad8:	9b01      	ldr	r3, [sp, #4]
 801aada:	e9c3 0100 	strd	r0, r1, [r3]
 801aade:	9b06      	ldr	r3, [sp, #24]
 801aae0:	f003 0007 	and.w	r0, r3, #7
 801aae4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 801aae8:	ecbd 8b02 	vpop	{d8}
 801aaec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aaf0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801aaf4:	f7e5 fbca 	bl	800028c <__adddf3>
 801aaf8:	3d01      	subs	r5, #1
 801aafa:	e7e6      	b.n	801aaca <__kernel_rem_pio2+0x582>
 801aafc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801ab00:	f7e5 fbc4 	bl	800028c <__adddf3>
 801ab04:	3e01      	subs	r6, #1
 801ab06:	e7bc      	b.n	801aa82 <__kernel_rem_pio2+0x53a>
 801ab08:	4602      	mov	r2, r0
 801ab0a:	460b      	mov	r3, r1
 801ab0c:	e7c1      	b.n	801aa92 <__kernel_rem_pio2+0x54a>
 801ab0e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801ab12:	f7e5 fbbb 	bl	800028c <__adddf3>
 801ab16:	3401      	adds	r4, #1
 801ab18:	e7c6      	b.n	801aaa8 <__kernel_rem_pio2+0x560>
 801ab1a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 801ab1e:	ed3a 7b02 	vldmdb	sl!, {d7}
 801ab22:	4640      	mov	r0, r8
 801ab24:	ec53 2b17 	vmov	r2, r3, d7
 801ab28:	4649      	mov	r1, r9
 801ab2a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801ab2e:	f7e5 fbad 	bl	800028c <__adddf3>
 801ab32:	4602      	mov	r2, r0
 801ab34:	460b      	mov	r3, r1
 801ab36:	4606      	mov	r6, r0
 801ab38:	460f      	mov	r7, r1
 801ab3a:	4640      	mov	r0, r8
 801ab3c:	4649      	mov	r1, r9
 801ab3e:	f7e5 fba3 	bl	8000288 <__aeabi_dsub>
 801ab42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ab46:	f7e5 fba1 	bl	800028c <__adddf3>
 801ab4a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ab4e:	e9ca 0100 	strd	r0, r1, [sl]
 801ab52:	e94a 6702 	strd	r6, r7, [sl, #-8]
 801ab56:	e770      	b.n	801aa3a <__kernel_rem_pio2+0x4f2>
 801ab58:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 801ab5c:	ed3a 7b02 	vldmdb	sl!, {d7}
 801ab60:	4630      	mov	r0, r6
 801ab62:	ec53 2b17 	vmov	r2, r3, d7
 801ab66:	4639      	mov	r1, r7
 801ab68:	ed8d 7b04 	vstr	d7, [sp, #16]
 801ab6c:	f7e5 fb8e 	bl	800028c <__adddf3>
 801ab70:	4602      	mov	r2, r0
 801ab72:	460b      	mov	r3, r1
 801ab74:	4680      	mov	r8, r0
 801ab76:	4689      	mov	r9, r1
 801ab78:	4630      	mov	r0, r6
 801ab7a:	4639      	mov	r1, r7
 801ab7c:	f7e5 fb84 	bl	8000288 <__aeabi_dsub>
 801ab80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ab84:	f7e5 fb82 	bl	800028c <__adddf3>
 801ab88:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ab8c:	e9ca 0100 	strd	r0, r1, [sl]
 801ab90:	e94a 8902 	strd	r8, r9, [sl, #-8]
 801ab94:	e756      	b.n	801aa44 <__kernel_rem_pio2+0x4fc>
 801ab96:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801ab9a:	f7e5 fb77 	bl	800028c <__adddf3>
 801ab9e:	3d01      	subs	r5, #1
 801aba0:	e756      	b.n	801aa50 <__kernel_rem_pio2+0x508>
 801aba2:	9b01      	ldr	r3, [sp, #4]
 801aba4:	9a01      	ldr	r2, [sp, #4]
 801aba6:	601f      	str	r7, [r3, #0]
 801aba8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 801abac:	605c      	str	r4, [r3, #4]
 801abae:	609d      	str	r5, [r3, #8]
 801abb0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801abb4:	60d3      	str	r3, [r2, #12]
 801abb6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801abba:	6110      	str	r0, [r2, #16]
 801abbc:	6153      	str	r3, [r2, #20]
 801abbe:	e78e      	b.n	801aade <__kernel_rem_pio2+0x596>
 801abc0:	41700000 	.word	0x41700000
 801abc4:	3e700000 	.word	0x3e700000

0801abc8 <__kernel_sin>:
 801abc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801abcc:	ec55 4b10 	vmov	r4, r5, d0
 801abd0:	b085      	sub	sp, #20
 801abd2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801abd6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801abda:	ed8d 1b00 	vstr	d1, [sp]
 801abde:	9002      	str	r0, [sp, #8]
 801abe0:	da06      	bge.n	801abf0 <__kernel_sin+0x28>
 801abe2:	ee10 0a10 	vmov	r0, s0
 801abe6:	4629      	mov	r1, r5
 801abe8:	f7e5 ffb6 	bl	8000b58 <__aeabi_d2iz>
 801abec:	2800      	cmp	r0, #0
 801abee:	d051      	beq.n	801ac94 <__kernel_sin+0xcc>
 801abf0:	4622      	mov	r2, r4
 801abf2:	462b      	mov	r3, r5
 801abf4:	4620      	mov	r0, r4
 801abf6:	4629      	mov	r1, r5
 801abf8:	f7e5 fcfe 	bl	80005f8 <__aeabi_dmul>
 801abfc:	4682      	mov	sl, r0
 801abfe:	468b      	mov	fp, r1
 801ac00:	4602      	mov	r2, r0
 801ac02:	460b      	mov	r3, r1
 801ac04:	4620      	mov	r0, r4
 801ac06:	4629      	mov	r1, r5
 801ac08:	f7e5 fcf6 	bl	80005f8 <__aeabi_dmul>
 801ac0c:	a341      	add	r3, pc, #260	; (adr r3, 801ad14 <__kernel_sin+0x14c>)
 801ac0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac12:	4680      	mov	r8, r0
 801ac14:	4689      	mov	r9, r1
 801ac16:	4650      	mov	r0, sl
 801ac18:	4659      	mov	r1, fp
 801ac1a:	f7e5 fced 	bl	80005f8 <__aeabi_dmul>
 801ac1e:	a33f      	add	r3, pc, #252	; (adr r3, 801ad1c <__kernel_sin+0x154>)
 801ac20:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac24:	f7e5 fb30 	bl	8000288 <__aeabi_dsub>
 801ac28:	4652      	mov	r2, sl
 801ac2a:	465b      	mov	r3, fp
 801ac2c:	f7e5 fce4 	bl	80005f8 <__aeabi_dmul>
 801ac30:	a33c      	add	r3, pc, #240	; (adr r3, 801ad24 <__kernel_sin+0x15c>)
 801ac32:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac36:	f7e5 fb29 	bl	800028c <__adddf3>
 801ac3a:	4652      	mov	r2, sl
 801ac3c:	465b      	mov	r3, fp
 801ac3e:	f7e5 fcdb 	bl	80005f8 <__aeabi_dmul>
 801ac42:	a33a      	add	r3, pc, #232	; (adr r3, 801ad2c <__kernel_sin+0x164>)
 801ac44:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac48:	f7e5 fb1e 	bl	8000288 <__aeabi_dsub>
 801ac4c:	4652      	mov	r2, sl
 801ac4e:	465b      	mov	r3, fp
 801ac50:	f7e5 fcd2 	bl	80005f8 <__aeabi_dmul>
 801ac54:	a337      	add	r3, pc, #220	; (adr r3, 801ad34 <__kernel_sin+0x16c>)
 801ac56:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac5a:	f7e5 fb17 	bl	800028c <__adddf3>
 801ac5e:	9b02      	ldr	r3, [sp, #8]
 801ac60:	4606      	mov	r6, r0
 801ac62:	460f      	mov	r7, r1
 801ac64:	b9db      	cbnz	r3, 801ac9e <__kernel_sin+0xd6>
 801ac66:	4602      	mov	r2, r0
 801ac68:	460b      	mov	r3, r1
 801ac6a:	4650      	mov	r0, sl
 801ac6c:	4659      	mov	r1, fp
 801ac6e:	f7e5 fcc3 	bl	80005f8 <__aeabi_dmul>
 801ac72:	a325      	add	r3, pc, #148	; (adr r3, 801ad08 <__kernel_sin+0x140>)
 801ac74:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac78:	f7e5 fb06 	bl	8000288 <__aeabi_dsub>
 801ac7c:	4642      	mov	r2, r8
 801ac7e:	464b      	mov	r3, r9
 801ac80:	f7e5 fcba 	bl	80005f8 <__aeabi_dmul>
 801ac84:	4602      	mov	r2, r0
 801ac86:	460b      	mov	r3, r1
 801ac88:	4620      	mov	r0, r4
 801ac8a:	4629      	mov	r1, r5
 801ac8c:	f7e5 fafe 	bl	800028c <__adddf3>
 801ac90:	4604      	mov	r4, r0
 801ac92:	460d      	mov	r5, r1
 801ac94:	ec45 4b10 	vmov	d0, r4, r5
 801ac98:	b005      	add	sp, #20
 801ac9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac9e:	2200      	movs	r2, #0
 801aca0:	4b1b      	ldr	r3, [pc, #108]	; (801ad10 <__kernel_sin+0x148>)
 801aca2:	e9dd 0100 	ldrd	r0, r1, [sp]
 801aca6:	f7e5 fca7 	bl	80005f8 <__aeabi_dmul>
 801acaa:	4632      	mov	r2, r6
 801acac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801acb0:	463b      	mov	r3, r7
 801acb2:	4640      	mov	r0, r8
 801acb4:	4649      	mov	r1, r9
 801acb6:	f7e5 fc9f 	bl	80005f8 <__aeabi_dmul>
 801acba:	4602      	mov	r2, r0
 801acbc:	460b      	mov	r3, r1
 801acbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801acc2:	f7e5 fae1 	bl	8000288 <__aeabi_dsub>
 801acc6:	4652      	mov	r2, sl
 801acc8:	465b      	mov	r3, fp
 801acca:	f7e5 fc95 	bl	80005f8 <__aeabi_dmul>
 801acce:	e9dd 2300 	ldrd	r2, r3, [sp]
 801acd2:	f7e5 fad9 	bl	8000288 <__aeabi_dsub>
 801acd6:	a30c      	add	r3, pc, #48	; (adr r3, 801ad08 <__kernel_sin+0x140>)
 801acd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acdc:	4606      	mov	r6, r0
 801acde:	460f      	mov	r7, r1
 801ace0:	4640      	mov	r0, r8
 801ace2:	4649      	mov	r1, r9
 801ace4:	f7e5 fc88 	bl	80005f8 <__aeabi_dmul>
 801ace8:	4602      	mov	r2, r0
 801acea:	460b      	mov	r3, r1
 801acec:	4630      	mov	r0, r6
 801acee:	4639      	mov	r1, r7
 801acf0:	f7e5 facc 	bl	800028c <__adddf3>
 801acf4:	4602      	mov	r2, r0
 801acf6:	460b      	mov	r3, r1
 801acf8:	4620      	mov	r0, r4
 801acfa:	4629      	mov	r1, r5
 801acfc:	f7e5 fac4 	bl	8000288 <__aeabi_dsub>
 801ad00:	e7c6      	b.n	801ac90 <__kernel_sin+0xc8>
 801ad02:	bf00      	nop
 801ad04:	f3af 8000 	nop.w
 801ad08:	55555549 	.word	0x55555549
 801ad0c:	3fc55555 	.word	0x3fc55555
 801ad10:	3fe00000 	.word	0x3fe00000
 801ad14:	5acfd57c 	.word	0x5acfd57c
 801ad18:	3de5d93a 	.word	0x3de5d93a
 801ad1c:	8a2b9ceb 	.word	0x8a2b9ceb
 801ad20:	3e5ae5e6 	.word	0x3e5ae5e6
 801ad24:	57b1fe7d 	.word	0x57b1fe7d
 801ad28:	3ec71de3 	.word	0x3ec71de3
 801ad2c:	19c161d5 	.word	0x19c161d5
 801ad30:	3f2a01a0 	.word	0x3f2a01a0
 801ad34:	1110f8a6 	.word	0x1110f8a6
 801ad38:	3f811111 	.word	0x3f811111
 801ad3c:	00000000 	.word	0x00000000

0801ad40 <atan>:
 801ad40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad44:	ec55 4b10 	vmov	r4, r5, d0
 801ad48:	4bc3      	ldr	r3, [pc, #780]	; (801b058 <atan+0x318>)
 801ad4a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801ad4e:	429e      	cmp	r6, r3
 801ad50:	46ab      	mov	fp, r5
 801ad52:	dd18      	ble.n	801ad86 <atan+0x46>
 801ad54:	4bc1      	ldr	r3, [pc, #772]	; (801b05c <atan+0x31c>)
 801ad56:	429e      	cmp	r6, r3
 801ad58:	dc01      	bgt.n	801ad5e <atan+0x1e>
 801ad5a:	d109      	bne.n	801ad70 <atan+0x30>
 801ad5c:	b144      	cbz	r4, 801ad70 <atan+0x30>
 801ad5e:	4622      	mov	r2, r4
 801ad60:	462b      	mov	r3, r5
 801ad62:	4620      	mov	r0, r4
 801ad64:	4629      	mov	r1, r5
 801ad66:	f7e5 fa91 	bl	800028c <__adddf3>
 801ad6a:	4604      	mov	r4, r0
 801ad6c:	460d      	mov	r5, r1
 801ad6e:	e006      	b.n	801ad7e <atan+0x3e>
 801ad70:	f1bb 0f00 	cmp.w	fp, #0
 801ad74:	f340 8131 	ble.w	801afda <atan+0x29a>
 801ad78:	a59b      	add	r5, pc, #620	; (adr r5, 801afe8 <atan+0x2a8>)
 801ad7a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801ad7e:	ec45 4b10 	vmov	d0, r4, r5
 801ad82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad86:	4bb6      	ldr	r3, [pc, #728]	; (801b060 <atan+0x320>)
 801ad88:	429e      	cmp	r6, r3
 801ad8a:	dc14      	bgt.n	801adb6 <atan+0x76>
 801ad8c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801ad90:	429e      	cmp	r6, r3
 801ad92:	dc0d      	bgt.n	801adb0 <atan+0x70>
 801ad94:	a396      	add	r3, pc, #600	; (adr r3, 801aff0 <atan+0x2b0>)
 801ad96:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad9a:	ee10 0a10 	vmov	r0, s0
 801ad9e:	4629      	mov	r1, r5
 801ada0:	f7e5 fa74 	bl	800028c <__adddf3>
 801ada4:	2200      	movs	r2, #0
 801ada6:	4baf      	ldr	r3, [pc, #700]	; (801b064 <atan+0x324>)
 801ada8:	f7e5 feb6 	bl	8000b18 <__aeabi_dcmpgt>
 801adac:	2800      	cmp	r0, #0
 801adae:	d1e6      	bne.n	801ad7e <atan+0x3e>
 801adb0:	f04f 3aff 	mov.w	sl, #4294967295
 801adb4:	e02b      	b.n	801ae0e <atan+0xce>
 801adb6:	f000 f963 	bl	801b080 <fabs>
 801adba:	4bab      	ldr	r3, [pc, #684]	; (801b068 <atan+0x328>)
 801adbc:	429e      	cmp	r6, r3
 801adbe:	ec55 4b10 	vmov	r4, r5, d0
 801adc2:	f300 80bf 	bgt.w	801af44 <atan+0x204>
 801adc6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801adca:	429e      	cmp	r6, r3
 801adcc:	f300 80a0 	bgt.w	801af10 <atan+0x1d0>
 801add0:	ee10 2a10 	vmov	r2, s0
 801add4:	ee10 0a10 	vmov	r0, s0
 801add8:	462b      	mov	r3, r5
 801adda:	4629      	mov	r1, r5
 801addc:	f7e5 fa56 	bl	800028c <__adddf3>
 801ade0:	2200      	movs	r2, #0
 801ade2:	4ba0      	ldr	r3, [pc, #640]	; (801b064 <atan+0x324>)
 801ade4:	f7e5 fa50 	bl	8000288 <__aeabi_dsub>
 801ade8:	2200      	movs	r2, #0
 801adea:	4606      	mov	r6, r0
 801adec:	460f      	mov	r7, r1
 801adee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801adf2:	4620      	mov	r0, r4
 801adf4:	4629      	mov	r1, r5
 801adf6:	f7e5 fa49 	bl	800028c <__adddf3>
 801adfa:	4602      	mov	r2, r0
 801adfc:	460b      	mov	r3, r1
 801adfe:	4630      	mov	r0, r6
 801ae00:	4639      	mov	r1, r7
 801ae02:	f7e5 fd23 	bl	800084c <__aeabi_ddiv>
 801ae06:	f04f 0a00 	mov.w	sl, #0
 801ae0a:	4604      	mov	r4, r0
 801ae0c:	460d      	mov	r5, r1
 801ae0e:	4622      	mov	r2, r4
 801ae10:	462b      	mov	r3, r5
 801ae12:	4620      	mov	r0, r4
 801ae14:	4629      	mov	r1, r5
 801ae16:	f7e5 fbef 	bl	80005f8 <__aeabi_dmul>
 801ae1a:	4602      	mov	r2, r0
 801ae1c:	460b      	mov	r3, r1
 801ae1e:	4680      	mov	r8, r0
 801ae20:	4689      	mov	r9, r1
 801ae22:	f7e5 fbe9 	bl	80005f8 <__aeabi_dmul>
 801ae26:	a374      	add	r3, pc, #464	; (adr r3, 801aff8 <atan+0x2b8>)
 801ae28:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae2c:	4606      	mov	r6, r0
 801ae2e:	460f      	mov	r7, r1
 801ae30:	f7e5 fbe2 	bl	80005f8 <__aeabi_dmul>
 801ae34:	a372      	add	r3, pc, #456	; (adr r3, 801b000 <atan+0x2c0>)
 801ae36:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae3a:	f7e5 fa27 	bl	800028c <__adddf3>
 801ae3e:	4632      	mov	r2, r6
 801ae40:	463b      	mov	r3, r7
 801ae42:	f7e5 fbd9 	bl	80005f8 <__aeabi_dmul>
 801ae46:	a370      	add	r3, pc, #448	; (adr r3, 801b008 <atan+0x2c8>)
 801ae48:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae4c:	f7e5 fa1e 	bl	800028c <__adddf3>
 801ae50:	4632      	mov	r2, r6
 801ae52:	463b      	mov	r3, r7
 801ae54:	f7e5 fbd0 	bl	80005f8 <__aeabi_dmul>
 801ae58:	a36d      	add	r3, pc, #436	; (adr r3, 801b010 <atan+0x2d0>)
 801ae5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae5e:	f7e5 fa15 	bl	800028c <__adddf3>
 801ae62:	4632      	mov	r2, r6
 801ae64:	463b      	mov	r3, r7
 801ae66:	f7e5 fbc7 	bl	80005f8 <__aeabi_dmul>
 801ae6a:	a36b      	add	r3, pc, #428	; (adr r3, 801b018 <atan+0x2d8>)
 801ae6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae70:	f7e5 fa0c 	bl	800028c <__adddf3>
 801ae74:	4632      	mov	r2, r6
 801ae76:	463b      	mov	r3, r7
 801ae78:	f7e5 fbbe 	bl	80005f8 <__aeabi_dmul>
 801ae7c:	a368      	add	r3, pc, #416	; (adr r3, 801b020 <atan+0x2e0>)
 801ae7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae82:	f7e5 fa03 	bl	800028c <__adddf3>
 801ae86:	4642      	mov	r2, r8
 801ae88:	464b      	mov	r3, r9
 801ae8a:	f7e5 fbb5 	bl	80005f8 <__aeabi_dmul>
 801ae8e:	a366      	add	r3, pc, #408	; (adr r3, 801b028 <atan+0x2e8>)
 801ae90:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae94:	4680      	mov	r8, r0
 801ae96:	4689      	mov	r9, r1
 801ae98:	4630      	mov	r0, r6
 801ae9a:	4639      	mov	r1, r7
 801ae9c:	f7e5 fbac 	bl	80005f8 <__aeabi_dmul>
 801aea0:	a363      	add	r3, pc, #396	; (adr r3, 801b030 <atan+0x2f0>)
 801aea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aea6:	f7e5 f9ef 	bl	8000288 <__aeabi_dsub>
 801aeaa:	4632      	mov	r2, r6
 801aeac:	463b      	mov	r3, r7
 801aeae:	f7e5 fba3 	bl	80005f8 <__aeabi_dmul>
 801aeb2:	a361      	add	r3, pc, #388	; (adr r3, 801b038 <atan+0x2f8>)
 801aeb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aeb8:	f7e5 f9e6 	bl	8000288 <__aeabi_dsub>
 801aebc:	4632      	mov	r2, r6
 801aebe:	463b      	mov	r3, r7
 801aec0:	f7e5 fb9a 	bl	80005f8 <__aeabi_dmul>
 801aec4:	a35e      	add	r3, pc, #376	; (adr r3, 801b040 <atan+0x300>)
 801aec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aeca:	f7e5 f9dd 	bl	8000288 <__aeabi_dsub>
 801aece:	4632      	mov	r2, r6
 801aed0:	463b      	mov	r3, r7
 801aed2:	f7e5 fb91 	bl	80005f8 <__aeabi_dmul>
 801aed6:	a35c      	add	r3, pc, #368	; (adr r3, 801b048 <atan+0x308>)
 801aed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aedc:	f7e5 f9d4 	bl	8000288 <__aeabi_dsub>
 801aee0:	4632      	mov	r2, r6
 801aee2:	463b      	mov	r3, r7
 801aee4:	f7e5 fb88 	bl	80005f8 <__aeabi_dmul>
 801aee8:	4602      	mov	r2, r0
 801aeea:	460b      	mov	r3, r1
 801aeec:	4640      	mov	r0, r8
 801aeee:	4649      	mov	r1, r9
 801aef0:	f7e5 f9cc 	bl	800028c <__adddf3>
 801aef4:	4622      	mov	r2, r4
 801aef6:	462b      	mov	r3, r5
 801aef8:	f7e5 fb7e 	bl	80005f8 <__aeabi_dmul>
 801aefc:	f1ba 3fff 	cmp.w	sl, #4294967295
 801af00:	4602      	mov	r2, r0
 801af02:	460b      	mov	r3, r1
 801af04:	d14b      	bne.n	801af9e <atan+0x25e>
 801af06:	4620      	mov	r0, r4
 801af08:	4629      	mov	r1, r5
 801af0a:	f7e5 f9bd 	bl	8000288 <__aeabi_dsub>
 801af0e:	e72c      	b.n	801ad6a <atan+0x2a>
 801af10:	ee10 0a10 	vmov	r0, s0
 801af14:	2200      	movs	r2, #0
 801af16:	4b53      	ldr	r3, [pc, #332]	; (801b064 <atan+0x324>)
 801af18:	4629      	mov	r1, r5
 801af1a:	f7e5 f9b5 	bl	8000288 <__aeabi_dsub>
 801af1e:	2200      	movs	r2, #0
 801af20:	4606      	mov	r6, r0
 801af22:	460f      	mov	r7, r1
 801af24:	4b4f      	ldr	r3, [pc, #316]	; (801b064 <atan+0x324>)
 801af26:	4620      	mov	r0, r4
 801af28:	4629      	mov	r1, r5
 801af2a:	f7e5 f9af 	bl	800028c <__adddf3>
 801af2e:	4602      	mov	r2, r0
 801af30:	460b      	mov	r3, r1
 801af32:	4630      	mov	r0, r6
 801af34:	4639      	mov	r1, r7
 801af36:	f7e5 fc89 	bl	800084c <__aeabi_ddiv>
 801af3a:	f04f 0a01 	mov.w	sl, #1
 801af3e:	4604      	mov	r4, r0
 801af40:	460d      	mov	r5, r1
 801af42:	e764      	b.n	801ae0e <atan+0xce>
 801af44:	4b49      	ldr	r3, [pc, #292]	; (801b06c <atan+0x32c>)
 801af46:	429e      	cmp	r6, r3
 801af48:	dc1d      	bgt.n	801af86 <atan+0x246>
 801af4a:	ee10 0a10 	vmov	r0, s0
 801af4e:	2200      	movs	r2, #0
 801af50:	4b47      	ldr	r3, [pc, #284]	; (801b070 <atan+0x330>)
 801af52:	4629      	mov	r1, r5
 801af54:	f7e5 f998 	bl	8000288 <__aeabi_dsub>
 801af58:	2200      	movs	r2, #0
 801af5a:	4606      	mov	r6, r0
 801af5c:	460f      	mov	r7, r1
 801af5e:	4b44      	ldr	r3, [pc, #272]	; (801b070 <atan+0x330>)
 801af60:	4620      	mov	r0, r4
 801af62:	4629      	mov	r1, r5
 801af64:	f7e5 fb48 	bl	80005f8 <__aeabi_dmul>
 801af68:	2200      	movs	r2, #0
 801af6a:	4b3e      	ldr	r3, [pc, #248]	; (801b064 <atan+0x324>)
 801af6c:	f7e5 f98e 	bl	800028c <__adddf3>
 801af70:	4602      	mov	r2, r0
 801af72:	460b      	mov	r3, r1
 801af74:	4630      	mov	r0, r6
 801af76:	4639      	mov	r1, r7
 801af78:	f7e5 fc68 	bl	800084c <__aeabi_ddiv>
 801af7c:	f04f 0a02 	mov.w	sl, #2
 801af80:	4604      	mov	r4, r0
 801af82:	460d      	mov	r5, r1
 801af84:	e743      	b.n	801ae0e <atan+0xce>
 801af86:	462b      	mov	r3, r5
 801af88:	ee10 2a10 	vmov	r2, s0
 801af8c:	2000      	movs	r0, #0
 801af8e:	4939      	ldr	r1, [pc, #228]	; (801b074 <atan+0x334>)
 801af90:	f7e5 fc5c 	bl	800084c <__aeabi_ddiv>
 801af94:	f04f 0a03 	mov.w	sl, #3
 801af98:	4604      	mov	r4, r0
 801af9a:	460d      	mov	r5, r1
 801af9c:	e737      	b.n	801ae0e <atan+0xce>
 801af9e:	4b36      	ldr	r3, [pc, #216]	; (801b078 <atan+0x338>)
 801afa0:	4e36      	ldr	r6, [pc, #216]	; (801b07c <atan+0x33c>)
 801afa2:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 801afa6:	4456      	add	r6, sl
 801afa8:	449a      	add	sl, r3
 801afaa:	e9da 2300 	ldrd	r2, r3, [sl]
 801afae:	f7e5 f96b 	bl	8000288 <__aeabi_dsub>
 801afb2:	4622      	mov	r2, r4
 801afb4:	462b      	mov	r3, r5
 801afb6:	f7e5 f967 	bl	8000288 <__aeabi_dsub>
 801afba:	4602      	mov	r2, r0
 801afbc:	460b      	mov	r3, r1
 801afbe:	e9d6 0100 	ldrd	r0, r1, [r6]
 801afc2:	f7e5 f961 	bl	8000288 <__aeabi_dsub>
 801afc6:	f1bb 0f00 	cmp.w	fp, #0
 801afca:	4604      	mov	r4, r0
 801afcc:	460d      	mov	r5, r1
 801afce:	f6bf aed6 	bge.w	801ad7e <atan+0x3e>
 801afd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801afd6:	461d      	mov	r5, r3
 801afd8:	e6d1      	b.n	801ad7e <atan+0x3e>
 801afda:	a51d      	add	r5, pc, #116	; (adr r5, 801b050 <atan+0x310>)
 801afdc:	e9d5 4500 	ldrd	r4, r5, [r5]
 801afe0:	e6cd      	b.n	801ad7e <atan+0x3e>
 801afe2:	bf00      	nop
 801afe4:	f3af 8000 	nop.w
 801afe8:	54442d18 	.word	0x54442d18
 801afec:	3ff921fb 	.word	0x3ff921fb
 801aff0:	8800759c 	.word	0x8800759c
 801aff4:	7e37e43c 	.word	0x7e37e43c
 801aff8:	e322da11 	.word	0xe322da11
 801affc:	3f90ad3a 	.word	0x3f90ad3a
 801b000:	24760deb 	.word	0x24760deb
 801b004:	3fa97b4b 	.word	0x3fa97b4b
 801b008:	a0d03d51 	.word	0xa0d03d51
 801b00c:	3fb10d66 	.word	0x3fb10d66
 801b010:	c54c206e 	.word	0xc54c206e
 801b014:	3fb745cd 	.word	0x3fb745cd
 801b018:	920083ff 	.word	0x920083ff
 801b01c:	3fc24924 	.word	0x3fc24924
 801b020:	5555550d 	.word	0x5555550d
 801b024:	3fd55555 	.word	0x3fd55555
 801b028:	2c6a6c2f 	.word	0x2c6a6c2f
 801b02c:	bfa2b444 	.word	0xbfa2b444
 801b030:	52defd9a 	.word	0x52defd9a
 801b034:	3fadde2d 	.word	0x3fadde2d
 801b038:	af749a6d 	.word	0xaf749a6d
 801b03c:	3fb3b0f2 	.word	0x3fb3b0f2
 801b040:	fe231671 	.word	0xfe231671
 801b044:	3fbc71c6 	.word	0x3fbc71c6
 801b048:	9998ebc4 	.word	0x9998ebc4
 801b04c:	3fc99999 	.word	0x3fc99999
 801b050:	54442d18 	.word	0x54442d18
 801b054:	bff921fb 	.word	0xbff921fb
 801b058:	440fffff 	.word	0x440fffff
 801b05c:	7ff00000 	.word	0x7ff00000
 801b060:	3fdbffff 	.word	0x3fdbffff
 801b064:	3ff00000 	.word	0x3ff00000
 801b068:	3ff2ffff 	.word	0x3ff2ffff
 801b06c:	40037fff 	.word	0x40037fff
 801b070:	3ff80000 	.word	0x3ff80000
 801b074:	bff00000 	.word	0xbff00000
 801b078:	0801ba60 	.word	0x0801ba60
 801b07c:	0801ba40 	.word	0x0801ba40

0801b080 <fabs>:
 801b080:	ec51 0b10 	vmov	r0, r1, d0
 801b084:	ee10 2a10 	vmov	r2, s0
 801b088:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801b08c:	ec43 2b10 	vmov	d0, r2, r3
 801b090:	4770      	bx	lr
 801b092:	0000      	movs	r0, r0
 801b094:	0000      	movs	r0, r0
	...

0801b098 <floor>:
 801b098:	ec51 0b10 	vmov	r0, r1, d0
 801b09c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b0a0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801b0a4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801b0a8:	2e13      	cmp	r6, #19
 801b0aa:	460c      	mov	r4, r1
 801b0ac:	ee10 5a10 	vmov	r5, s0
 801b0b0:	4680      	mov	r8, r0
 801b0b2:	dc34      	bgt.n	801b11e <floor+0x86>
 801b0b4:	2e00      	cmp	r6, #0
 801b0b6:	da16      	bge.n	801b0e6 <floor+0x4e>
 801b0b8:	a335      	add	r3, pc, #212	; (adr r3, 801b190 <floor+0xf8>)
 801b0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0be:	f7e5 f8e5 	bl	800028c <__adddf3>
 801b0c2:	2200      	movs	r2, #0
 801b0c4:	2300      	movs	r3, #0
 801b0c6:	f7e5 fd27 	bl	8000b18 <__aeabi_dcmpgt>
 801b0ca:	b148      	cbz	r0, 801b0e0 <floor+0x48>
 801b0cc:	2c00      	cmp	r4, #0
 801b0ce:	da59      	bge.n	801b184 <floor+0xec>
 801b0d0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801b0d4:	4a30      	ldr	r2, [pc, #192]	; (801b198 <floor+0x100>)
 801b0d6:	432b      	orrs	r3, r5
 801b0d8:	2500      	movs	r5, #0
 801b0da:	42ab      	cmp	r3, r5
 801b0dc:	bf18      	it	ne
 801b0de:	4614      	movne	r4, r2
 801b0e0:	4621      	mov	r1, r4
 801b0e2:	4628      	mov	r0, r5
 801b0e4:	e025      	b.n	801b132 <floor+0x9a>
 801b0e6:	4f2d      	ldr	r7, [pc, #180]	; (801b19c <floor+0x104>)
 801b0e8:	4137      	asrs	r7, r6
 801b0ea:	ea01 0307 	and.w	r3, r1, r7
 801b0ee:	4303      	orrs	r3, r0
 801b0f0:	d01f      	beq.n	801b132 <floor+0x9a>
 801b0f2:	a327      	add	r3, pc, #156	; (adr r3, 801b190 <floor+0xf8>)
 801b0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0f8:	f7e5 f8c8 	bl	800028c <__adddf3>
 801b0fc:	2200      	movs	r2, #0
 801b0fe:	2300      	movs	r3, #0
 801b100:	f7e5 fd0a 	bl	8000b18 <__aeabi_dcmpgt>
 801b104:	2800      	cmp	r0, #0
 801b106:	d0eb      	beq.n	801b0e0 <floor+0x48>
 801b108:	2c00      	cmp	r4, #0
 801b10a:	bfbe      	ittt	lt
 801b10c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801b110:	fa43 f606 	asrlt.w	r6, r3, r6
 801b114:	19a4      	addlt	r4, r4, r6
 801b116:	ea24 0407 	bic.w	r4, r4, r7
 801b11a:	2500      	movs	r5, #0
 801b11c:	e7e0      	b.n	801b0e0 <floor+0x48>
 801b11e:	2e33      	cmp	r6, #51	; 0x33
 801b120:	dd0b      	ble.n	801b13a <floor+0xa2>
 801b122:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801b126:	d104      	bne.n	801b132 <floor+0x9a>
 801b128:	ee10 2a10 	vmov	r2, s0
 801b12c:	460b      	mov	r3, r1
 801b12e:	f7e5 f8ad 	bl	800028c <__adddf3>
 801b132:	ec41 0b10 	vmov	d0, r0, r1
 801b136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b13a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801b13e:	f04f 33ff 	mov.w	r3, #4294967295
 801b142:	fa23 f707 	lsr.w	r7, r3, r7
 801b146:	4207      	tst	r7, r0
 801b148:	d0f3      	beq.n	801b132 <floor+0x9a>
 801b14a:	a311      	add	r3, pc, #68	; (adr r3, 801b190 <floor+0xf8>)
 801b14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b150:	f7e5 f89c 	bl	800028c <__adddf3>
 801b154:	2200      	movs	r2, #0
 801b156:	2300      	movs	r3, #0
 801b158:	f7e5 fcde 	bl	8000b18 <__aeabi_dcmpgt>
 801b15c:	2800      	cmp	r0, #0
 801b15e:	d0bf      	beq.n	801b0e0 <floor+0x48>
 801b160:	2c00      	cmp	r4, #0
 801b162:	da02      	bge.n	801b16a <floor+0xd2>
 801b164:	2e14      	cmp	r6, #20
 801b166:	d103      	bne.n	801b170 <floor+0xd8>
 801b168:	3401      	adds	r4, #1
 801b16a:	ea25 0507 	bic.w	r5, r5, r7
 801b16e:	e7b7      	b.n	801b0e0 <floor+0x48>
 801b170:	2301      	movs	r3, #1
 801b172:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801b176:	fa03 f606 	lsl.w	r6, r3, r6
 801b17a:	4435      	add	r5, r6
 801b17c:	4545      	cmp	r5, r8
 801b17e:	bf38      	it	cc
 801b180:	18e4      	addcc	r4, r4, r3
 801b182:	e7f2      	b.n	801b16a <floor+0xd2>
 801b184:	2500      	movs	r5, #0
 801b186:	462c      	mov	r4, r5
 801b188:	e7aa      	b.n	801b0e0 <floor+0x48>
 801b18a:	bf00      	nop
 801b18c:	f3af 8000 	nop.w
 801b190:	8800759c 	.word	0x8800759c
 801b194:	7e37e43c 	.word	0x7e37e43c
 801b198:	bff00000 	.word	0xbff00000
 801b19c:	000fffff 	.word	0x000fffff

0801b1a0 <matherr>:
 801b1a0:	2000      	movs	r0, #0
 801b1a2:	4770      	bx	lr
 801b1a4:	0000      	movs	r0, r0
	...

0801b1a8 <scalbn>:
 801b1a8:	b570      	push	{r4, r5, r6, lr}
 801b1aa:	ec55 4b10 	vmov	r4, r5, d0
 801b1ae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801b1b2:	4606      	mov	r6, r0
 801b1b4:	462b      	mov	r3, r5
 801b1b6:	b9aa      	cbnz	r2, 801b1e4 <scalbn+0x3c>
 801b1b8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801b1bc:	4323      	orrs	r3, r4
 801b1be:	d03b      	beq.n	801b238 <scalbn+0x90>
 801b1c0:	4b31      	ldr	r3, [pc, #196]	; (801b288 <scalbn+0xe0>)
 801b1c2:	4629      	mov	r1, r5
 801b1c4:	2200      	movs	r2, #0
 801b1c6:	ee10 0a10 	vmov	r0, s0
 801b1ca:	f7e5 fa15 	bl	80005f8 <__aeabi_dmul>
 801b1ce:	4b2f      	ldr	r3, [pc, #188]	; (801b28c <scalbn+0xe4>)
 801b1d0:	429e      	cmp	r6, r3
 801b1d2:	4604      	mov	r4, r0
 801b1d4:	460d      	mov	r5, r1
 801b1d6:	da12      	bge.n	801b1fe <scalbn+0x56>
 801b1d8:	a327      	add	r3, pc, #156	; (adr r3, 801b278 <scalbn+0xd0>)
 801b1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1de:	f7e5 fa0b 	bl	80005f8 <__aeabi_dmul>
 801b1e2:	e009      	b.n	801b1f8 <scalbn+0x50>
 801b1e4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801b1e8:	428a      	cmp	r2, r1
 801b1ea:	d10c      	bne.n	801b206 <scalbn+0x5e>
 801b1ec:	ee10 2a10 	vmov	r2, s0
 801b1f0:	4620      	mov	r0, r4
 801b1f2:	4629      	mov	r1, r5
 801b1f4:	f7e5 f84a 	bl	800028c <__adddf3>
 801b1f8:	4604      	mov	r4, r0
 801b1fa:	460d      	mov	r5, r1
 801b1fc:	e01c      	b.n	801b238 <scalbn+0x90>
 801b1fe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801b202:	460b      	mov	r3, r1
 801b204:	3a36      	subs	r2, #54	; 0x36
 801b206:	4432      	add	r2, r6
 801b208:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801b20c:	428a      	cmp	r2, r1
 801b20e:	dd0b      	ble.n	801b228 <scalbn+0x80>
 801b210:	ec45 4b11 	vmov	d1, r4, r5
 801b214:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 801b280 <scalbn+0xd8>
 801b218:	f000 f83c 	bl	801b294 <copysign>
 801b21c:	a318      	add	r3, pc, #96	; (adr r3, 801b280 <scalbn+0xd8>)
 801b21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b222:	ec51 0b10 	vmov	r0, r1, d0
 801b226:	e7da      	b.n	801b1de <scalbn+0x36>
 801b228:	2a00      	cmp	r2, #0
 801b22a:	dd08      	ble.n	801b23e <scalbn+0x96>
 801b22c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b230:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801b234:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801b238:	ec45 4b10 	vmov	d0, r4, r5
 801b23c:	bd70      	pop	{r4, r5, r6, pc}
 801b23e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801b242:	da0d      	bge.n	801b260 <scalbn+0xb8>
 801b244:	f24c 3350 	movw	r3, #50000	; 0xc350
 801b248:	429e      	cmp	r6, r3
 801b24a:	ec45 4b11 	vmov	d1, r4, r5
 801b24e:	dce1      	bgt.n	801b214 <scalbn+0x6c>
 801b250:	ed9f 0b09 	vldr	d0, [pc, #36]	; 801b278 <scalbn+0xd0>
 801b254:	f000 f81e 	bl	801b294 <copysign>
 801b258:	a307      	add	r3, pc, #28	; (adr r3, 801b278 <scalbn+0xd0>)
 801b25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b25e:	e7e0      	b.n	801b222 <scalbn+0x7a>
 801b260:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b264:	3236      	adds	r2, #54	; 0x36
 801b266:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801b26a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801b26e:	4620      	mov	r0, r4
 801b270:	4629      	mov	r1, r5
 801b272:	2200      	movs	r2, #0
 801b274:	4b06      	ldr	r3, [pc, #24]	; (801b290 <scalbn+0xe8>)
 801b276:	e7b2      	b.n	801b1de <scalbn+0x36>
 801b278:	c2f8f359 	.word	0xc2f8f359
 801b27c:	01a56e1f 	.word	0x01a56e1f
 801b280:	8800759c 	.word	0x8800759c
 801b284:	7e37e43c 	.word	0x7e37e43c
 801b288:	43500000 	.word	0x43500000
 801b28c:	ffff3cb0 	.word	0xffff3cb0
 801b290:	3c900000 	.word	0x3c900000

0801b294 <copysign>:
 801b294:	ec51 0b10 	vmov	r0, r1, d0
 801b298:	ee11 0a90 	vmov	r0, s3
 801b29c:	ee10 2a10 	vmov	r2, s0
 801b2a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801b2a4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801b2a8:	ea41 0300 	orr.w	r3, r1, r0
 801b2ac:	ec43 2b10 	vmov	d0, r2, r3
 801b2b0:	4770      	bx	lr
	...

0801b2b4 <_init>:
 801b2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b2b6:	bf00      	nop
 801b2b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b2ba:	bc08      	pop	{r3}
 801b2bc:	469e      	mov	lr, r3
 801b2be:	4770      	bx	lr

0801b2c0 <_fini>:
 801b2c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b2c2:	bf00      	nop
 801b2c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b2c6:	bc08      	pop	{r3}
 801b2c8:	469e      	mov	lr, r3
 801b2ca:	4770      	bx	lr
