
DMA_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001be2c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009e0  0801bfc0  0801bfc0  0002bfc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c9a0  0801c9a0  00030b84  2**0
                  CONTENTS
  4 .ARM          00000008  0801c9a0  0801c9a0  0002c9a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c9a8  0801c9a8  00030b84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c9a8  0801c9a8  0002c9a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c9ac  0801c9ac  0002c9ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000b84  20000000  0801c9b0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005ffc  20000b88  0801d534  00030b88  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20006b84  0801d534  00036b84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030b84  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033191  00000000  00000000  00030bb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006e6d  00000000  00000000  00063d45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e58  00000000  00000000  0006abb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c68  00000000  00000000  0006ca10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aa8d  00000000  00000000  0006e678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028863  00000000  00000000  00099105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ded54  00000000  00000000  000c1968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a06bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009614  00000000  00000000  001a0710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000b88 	.word	0x20000b88
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801bfa4 	.word	0x0801bfa4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000b8c 	.word	0x20000b8c
 80001cc:	0801bfa4 	.word	0x0801bfa4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	0000      	movs	r0, r0
	...

08000ff0 <commandRead>:
												"STOP",
												"ERRO",
												"OKAY"};

Position_DataType position_type;
Robot_CommandTypedef 	commandRead	(uint8_t *message, int32_t length, int32_t *id_command, DUTY_Command_TypeDef *duty_cmd) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08c      	sub	sp, #48	; 0x30
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
 8000ffc:	603b      	str	r3, [r7, #0]
	Transfer_Protocol protocol_id = message[0];
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    Robot_CommandTypedef command_id = message[1];
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	785b      	ldrb	r3, [r3, #1]
 800100a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    duty_cmd->id_command = command_id;
 800100e:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	609a      	str	r2, [r3, #8]
	int32_t temp_pointer = 2;
 8001016:	2302      	movs	r3, #2
 8001018:	62fb      	str	r3, [r7, #44]	; 0x2c
    switch(protocol_id) 
 800101a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800101e:	2b00      	cmp	r3, #0
 8001020:	f000 8328 	beq.w	8001674 <commandRead+0x684>
 8001024:	2b01      	cmp	r3, #1
 8001026:	f040 8318 	bne.w	800165a <commandRead+0x66a>
        break;

        // command control from pc
        case COMMAND_TRANSMISION:
        {
            switch(command_id)
 800102a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800102e:	2b19      	cmp	r3, #25
 8001030:	f200 8311 	bhi.w	8001656 <commandRead+0x666>
 8001034:	a201      	add	r2, pc, #4	; (adr r2, 800103c <commandRead+0x4c>)
 8001036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800103a:	bf00      	nop
 800103c:	080010a5 	.word	0x080010a5
 8001040:	080010bb 	.word	0x080010bb
 8001044:	080010d1 	.word	0x080010d1
 8001048:	08001195 	.word	0x08001195
 800104c:	0800136b 	.word	0x0800136b
 8001050:	0800136f 	.word	0x0800136f
 8001054:	08001373 	.word	0x08001373
 8001058:	08001377 	.word	0x08001377
 800105c:	08001657 	.word	0x08001657
 8001060:	080013b1 	.word	0x080013b1
 8001064:	080013cf 	.word	0x080013cf
 8001068:	0800143b 	.word	0x0800143b
 800106c:	08001509 	.word	0x08001509
 8001070:	08001657 	.word	0x08001657
 8001074:	08001657 	.word	0x08001657
 8001078:	08001657 	.word	0x08001657
 800107c:	08001657 	.word	0x08001657
 8001080:	08001657 	.word	0x08001657
 8001084:	08001657 	.word	0x08001657
 8001088:	08001657 	.word	0x08001657
 800108c:	080014a7 	.word	0x080014a7
 8001090:	080014d1 	.word	0x080014d1
 8001094:	08001657 	.word	0x08001657
 8001098:	08001657 	.word	0x08001657
 800109c:	08001543 	.word	0x08001543
 80010a0:	08001623 	.word	0x08001623
            {
                // Stop now
                case CMD_STOPNOW:
                {
                    duty_cmd->robot_mode = SCARA_MODE_STOP;
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	2200      	movs	r2, #0
 80010a8:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	2201      	movs	r2, #1
 80010ae:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	2200      	movs	r2, #0
 80010b4:	701a      	strb	r2, [r3, #0]
                    return CMD_STOPNOW;
 80010b6:	2300      	movs	r3, #0
 80010b8:	e2dd      	b.n	8001676 <commandRead+0x686>
                break;

                // Scan limit
                case CMD_SCAN_LIMIT:
                {
                    duty_cmd->robot_mode = SCARA_MODE_SCAN;
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	2201      	movs	r2, #1
 80010be:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	2201      	movs	r2, #1
 80010c4:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	2200      	movs	r2, #0
 80010ca:	701a      	strb	r2, [r3, #0]
                    return CMD_SCAN_LIMIT;
 80010cc:	2301      	movs	r3, #1
 80010ce:	e2d2      	b.n	8001676 <commandRead+0x686>
                break;

                // Move home
                case CMD_MOVE_HOME:
                {
                    if (length == 10){ // 2 int32_t number + 2 define byte
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	2b0a      	cmp	r3, #10
 80010d4:	d15c      	bne.n	8001190 <commandRead+0x1a0>
                        // memcpy(&duty_cmd->v_factor, &message[temp_pointer+=8], 8);
						// memcpy(&duty_cmd->a_factor, &message[temp_pointer], 8); 
						temp_pointer = -2;
 80010d6:	f06f 0301 	mvn.w	r3, #1
 80010da:	62fb      	str	r3, [r7, #44]	; 0x2c
						duty_cmd->v_factor = (*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 80010dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010de:	3304      	adds	r3, #4
 80010e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010e4:	68fa      	ldr	r2, [r7, #12]
 80010e6:	4413      	add	r3, r2
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	ee07 3a90 	vmov	s15, r3
 80010ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010f2:	ed9f 7aab 	vldr	s14, [pc, #684]	; 80013a0 <commandRead+0x3b0>
 80010f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010fa:	ee17 0a90 	vmov	r0, s15
 80010fe:	f7ff fa23 	bl	8000548 <__aeabi_f2d>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	6839      	ldr	r1, [r7, #0]
 8001108:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
						duty_cmd->a_factor = (*(int32_t*)(&message[temp_pointer]))*COR_INVERSE_SCALE;
 800110c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800110e:	68fa      	ldr	r2, [r7, #12]
 8001110:	4413      	add	r3, r2
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	ee07 3a90 	vmov	s15, r3
 8001118:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800111c:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 80013a0 <commandRead+0x3b0>
 8001120:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001124:	ee17 0a90 	vmov	r0, s15
 8001128:	f7ff fa0e 	bl	8000548 <__aeabi_f2d>
 800112c:	4602      	mov	r2, r0
 800112e:	460b      	mov	r3, r1
 8001130:	6839      	ldr	r1, [r7, #0]
 8001132:	e9c1 236c 	strd	r2, r3, [r1, #432]	; 0x1b0
                    }else{
                        return CMD_ERROR;
                    }
                    duty_cmd->target_point.x = 250;
 8001136:	6839      	ldr	r1, [r7, #0]
 8001138:	f04f 0200 	mov.w	r2, #0
 800113c:	4b99      	ldr	r3, [pc, #612]	; (80013a4 <commandRead+0x3b4>)
 800113e:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
                    duty_cmd->target_point.y = -200;
 8001142:	6839      	ldr	r1, [r7, #0]
 8001144:	f04f 0200 	mov.w	r2, #0
 8001148:	4b97      	ldr	r3, [pc, #604]	; (80013a8 <commandRead+0x3b8>)
 800114a:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
                    duty_cmd->target_point.z = 120;
 800114e:	6839      	ldr	r1, [r7, #0]
 8001150:	f04f 0200 	mov.w	r2, #0
 8001154:	4b95      	ldr	r3, [pc, #596]	; (80013ac <commandRead+0x3bc>)
 8001156:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
                    duty_cmd->target_point.roll = 0;
 800115a:	6839      	ldr	r1, [r7, #0]
 800115c:	f04f 0200 	mov.w	r2, #0
 8001160:	f04f 0300 	mov.w	r3, #0
 8001164:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88

                    duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	2200      	movs	r2, #0
 800116c:	745a      	strb	r2, [r3, #17]
                    duty_cmd->space_type = DUTY_SPACE_JOINT;
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	2201      	movs	r2, #1
 8001172:	735a      	strb	r2, [r3, #13]
                    duty_cmd->joint_type = DUTY_JOINT_4DOF;
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	2201      	movs	r2, #1
 8001178:	73da      	strb	r2, [r3, #15]
                    duty_cmd->robot_mode = SCARA_MODE_DUTY;
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	2202      	movs	r2, #2
 800117e:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	2201      	movs	r2, #1
 8001184:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	2200      	movs	r2, #0
 800118a:	701a      	strb	r2, [r3, #0]
                    return CMD_MOVE_HOME;
 800118c:	2302      	movs	r3, #2
 800118e:	e272      	b.n	8001676 <commandRead+0x686>
                        return CMD_ERROR;
 8001190:	2316      	movs	r3, #22
 8001192:	e270      	b.n	8001676 <commandRead+0x686>
                break;

                // Move line
                case CMD_MOVE_LINE:
                {
                    if (length == 29){ // 6 int32_t number + 3 byte number + 2 define byte
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	2b1d      	cmp	r3, #29
 8001198:	f040 80e5 	bne.w	8001366 <commandRead+0x376>
						//scaraSetScanFlag();
						uint8_t mode_init;
						temp_pointer = -2;
 800119c:	f06f 0301 	mvn.w	r3, #1
 80011a0:	62fb      	str	r3, [r7, #44]	; 0x2c

						duty_cmd->target_point.x = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 80011a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011a4:	3304      	adds	r3, #4
 80011a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011aa:	68fa      	ldr	r2, [r7, #12]
 80011ac:	4413      	add	r3, r2
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff f9b7 	bl	8000524 <__aeabi_i2d>
 80011b6:	a378      	add	r3, pc, #480	; (adr r3, 8001398 <commandRead+0x3a8>)
 80011b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011bc:	f7ff fa1c 	bl	80005f8 <__aeabi_dmul>
 80011c0:	4602      	mov	r2, r0
 80011c2:	460b      	mov	r3, r1
 80011c4:	6839      	ldr	r1, [r7, #0]
 80011c6:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
						duty_cmd->target_point.y = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 80011ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011cc:	3304      	adds	r3, #4
 80011ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	4413      	add	r3, r2
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff f9a3 	bl	8000524 <__aeabi_i2d>
 80011de:	a36e      	add	r3, pc, #440	; (adr r3, 8001398 <commandRead+0x3a8>)
 80011e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e4:	f7ff fa08 	bl	80005f8 <__aeabi_dmul>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	6839      	ldr	r1, [r7, #0]
 80011ee:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
						duty_cmd->target_point.z = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 80011f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011f4:	3304      	adds	r3, #4
 80011f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011fa:	68fa      	ldr	r2, [r7, #12]
 80011fc:	4413      	add	r3, r2
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff f98f 	bl	8000524 <__aeabi_i2d>
 8001206:	a364      	add	r3, pc, #400	; (adr r3, 8001398 <commandRead+0x3a8>)
 8001208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120c:	f7ff f9f4 	bl	80005f8 <__aeabi_dmul>
 8001210:	4602      	mov	r2, r0
 8001212:	460b      	mov	r3, r1
 8001214:	6839      	ldr	r1, [r7, #0]
 8001216:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
						duty_cmd->target_point.roll = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 800121a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800121c:	3304      	adds	r3, #4
 800121e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001222:	68fa      	ldr	r2, [r7, #12]
 8001224:	4413      	add	r3, r2
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff f97b 	bl	8000524 <__aeabi_i2d>
 800122e:	a35a      	add	r3, pc, #360	; (adr r3, 8001398 <commandRead+0x3a8>)
 8001230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001234:	f7ff f9e0 	bl	80005f8 <__aeabi_dmul>
 8001238:	4602      	mov	r2, r0
 800123a:	460b      	mov	r3, r1
 800123c:	6839      	ldr	r1, [r7, #0]
 800123e:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
						duty_cmd->v_factor = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 8001242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001244:	3304      	adds	r3, #4
 8001246:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800124a:	68fa      	ldr	r2, [r7, #12]
 800124c:	4413      	add	r3, r2
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff f967 	bl	8000524 <__aeabi_i2d>
 8001256:	a350      	add	r3, pc, #320	; (adr r3, 8001398 <commandRead+0x3a8>)
 8001258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125c:	f7ff f9cc 	bl	80005f8 <__aeabi_dmul>
 8001260:	4602      	mov	r2, r0
 8001262:	460b      	mov	r3, r1
 8001264:	6839      	ldr	r1, [r7, #0]
 8001266:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
						mode_init = message[temp_pointer+=4];
 800126a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800126c:	3304      	adds	r3, #4
 800126e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	4413      	add	r3, r2
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	74fb      	strb	r3, [r7, #19]

						if(mode_init == DUTY_MODE_INIT_QVA){
 800127a:	7cfb      	ldrb	r3, [r7, #19]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d117      	bne.n	80012b0 <commandRead+0x2c0>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	2200      	movs	r2, #0
 8001284:	745a      	strb	r2, [r3, #17]
							duty_cmd->a_factor = (double)(*(int32_t*)(&message[temp_pointer+=1]))*COR_INVERSE_SCALE;
 8001286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001288:	3301      	adds	r3, #1
 800128a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800128c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	4413      	add	r3, r2
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff f945 	bl	8000524 <__aeabi_i2d>
 800129a:	a33f      	add	r3, pc, #252	; (adr r3, 8001398 <commandRead+0x3a8>)
 800129c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a0:	f7ff f9aa 	bl	80005f8 <__aeabi_dmul>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	6839      	ldr	r1, [r7, #0]
 80012aa:	e9c1 236c 	strd	r2, r3, [r1, #432]	; 0x1b0
 80012ae:	e037      	b.n	8001320 <commandRead+0x330>
						}else if(mode_init == DUTY_MODE_INIT_QVT){
 80012b0:	7cfb      	ldrb	r3, [r7, #19]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d117      	bne.n	80012e6 <commandRead+0x2f6>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	2201      	movs	r2, #1
 80012ba:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)(*(int32_t*)(&message[temp_pointer+=1]))*COR_INVERSE_SCALE;
 80012bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012be:	3301      	adds	r3, #1
 80012c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012c4:	68fa      	ldr	r2, [r7, #12]
 80012c6:	4413      	add	r3, r2
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff f92a 	bl	8000524 <__aeabi_i2d>
 80012d0:	a331      	add	r3, pc, #196	; (adr r3, 8001398 <commandRead+0x3a8>)
 80012d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d6:	f7ff f98f 	bl	80005f8 <__aeabi_dmul>
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	6839      	ldr	r1, [r7, #0]
 80012e0:	e9c1 2308 	strd	r2, r3, [r1, #32]
 80012e4:	e01c      	b.n	8001320 <commandRead+0x330>
						}else if(mode_init == DUTY_MODE_INIT_QT){
 80012e6:	7cfb      	ldrb	r3, [r7, #19]
 80012e8:	2b03      	cmp	r3, #3
 80012ea:	d117      	bne.n	800131c <commandRead+0x32c>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QT;
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	2203      	movs	r2, #3
 80012f0:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)(*(int32_t*)(&message[temp_pointer+=1]))*COR_INVERSE_SCALE;
 80012f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012f4:	3301      	adds	r3, #1
 80012f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	4413      	add	r3, r2
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff f90f 	bl	8000524 <__aeabi_i2d>
 8001306:	a324      	add	r3, pc, #144	; (adr r3, 8001398 <commandRead+0x3a8>)
 8001308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130c:	f7ff f974 	bl	80005f8 <__aeabi_dmul>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	6839      	ldr	r1, [r7, #0]
 8001316:	e9c1 2308 	strd	r2, r3, [r1, #32]
 800131a:	e001      	b.n	8001320 <commandRead+0x330>
						}else{
							return CMD_ERROR;
 800131c:	2316      	movs	r3, #22
 800131e:	e1aa      	b.n	8001676 <commandRead+0x686>
						}
						duty_cmd->coordinate_type = message[temp_pointer+=4];
 8001320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001322:	3304      	adds	r3, #4
 8001324:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001328:	68fa      	ldr	r2, [r7, #12]
 800132a:	4413      	add	r3, r2
 800132c:	781a      	ldrb	r2, [r3, #0]
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	731a      	strb	r2, [r3, #12]
						duty_cmd->trajec_type = message[temp_pointer+=1];
 8001332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001334:	3301      	adds	r3, #1
 8001336:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800133a:	68fa      	ldr	r2, [r7, #12]
 800133c:	4413      	add	r3, r2
 800133e:	781a      	ldrb	r2, [r3, #0]
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	741a      	strb	r2, [r3, #16]
						duty_cmd->path_type = DUTY_PATH_LINE;
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	2200      	movs	r2, #0
 8001348:	739a      	strb	r2, [r3, #14]
						duty_cmd->space_type = DUTY_SPACE_TASK;
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	2200      	movs	r2, #0
 800134e:	735a      	strb	r2, [r3, #13]
					}else{
						return CMD_ERROR;
					}
					duty_cmd->robot_mode = SCARA_MODE_DUTY;
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	2202      	movs	r2, #2
 8001354:	709a      	strb	r2, [r3, #2]
					duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	2201      	movs	r2, #1
 800135a:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	2200      	movs	r2, #0
 8001360:	701a      	strb	r2, [r3, #0]
					return CMD_MOVE_LINE;
 8001362:	2303      	movs	r3, #3
 8001364:	e187      	b.n	8001676 <commandRead+0x686>
						return CMD_ERROR;
 8001366:	2316      	movs	r3, #22
 8001368:	e185      	b.n	8001676 <commandRead+0x686>
				break;

				// Move circle
				case CMD_MOVE_CIRCLE:
				{
					return CMD_MOVE_CIRCLE;
 800136a:	2304      	movs	r3, #4
 800136c:	e183      	b.n	8001676 <commandRead+0x686>
				break;

				// Move joint
				case CMD_MOVE_JOINT:
				{
					return CMD_MOVE_JOINT;
 800136e:	2305      	movs	r3, #5
 8001370:	e181      	b.n	8001676 <commandRead+0x686>
				break;

				// Rotate Single
				case CMD_ROTATE_SINGLE:
				{
					return CMD_ROTATE_SINGLE;
 8001372:	2306      	movs	r3, #6
 8001374:	e17f      	b.n	8001676 <commandRead+0x686>
				break;

				// Set output
				case CMD_OUTPUT:
				{
					if(length == 3){ // 1 byte output value + 2 byte define
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	2b03      	cmp	r3, #3
 800137a:	d10a      	bne.n	8001392 <commandRead+0x3a2>
						temp_pointer = 2;
 800137c:	2302      	movs	r3, #2
 800137e:	62fb      	str	r3, [r7, #44]	; 0x2c
						duty_cmd->sub_para_int = message[temp_pointer];
 8001380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001382:	68fa      	ldr	r2, [r7, #12]
 8001384:	4413      	add	r3, r2
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	461a      	mov	r2, r3
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	615a      	str	r2, [r3, #20]
						return CMD_OUTPUT;
 800138e:	2307      	movs	r3, #7
 8001390:	e171      	b.n	8001676 <commandRead+0x686>
					}else{
						return CMD_ERROR;
 8001392:	2316      	movs	r3, #22
 8001394:	e16f      	b.n	8001676 <commandRead+0x686>
 8001396:	bf00      	nop
 8001398:	a0000000 	.word	0xa0000000
 800139c:	3eb0c6f7 	.word	0x3eb0c6f7
 80013a0:	358637bd 	.word	0x358637bd
 80013a4:	406f4000 	.word	0x406f4000
 80013a8:	c0690000 	.word	0xc0690000
 80013ac:	405e0000 	.word	0x405e0000
				break;

				// Read position
				case CMD_READ_POSITION:
				{
					if(length == 3){ // 1 byte categorize read type + 2 byte define
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	2b03      	cmp	r3, #3
 80013b4:	d109      	bne.n	80013ca <commandRead+0x3da>
						temp_pointer = 2;
 80013b6:	2302      	movs	r3, #2
 80013b8:	62fb      	str	r3, [r7, #44]	; 0x2c
						position_type = message[temp_pointer];
 80013ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013bc:	68fa      	ldr	r2, [r7, #12]
 80013be:	4413      	add	r3, r2
 80013c0:	781a      	ldrb	r2, [r3, #0]
 80013c2:	4ba9      	ldr	r3, [pc, #676]	; (8001668 <commandRead+0x678>)
 80013c4:	701a      	strb	r2, [r3, #0]
						return CMD_READ_POSITION;
 80013c6:	2309      	movs	r3, #9
 80013c8:	e155      	b.n	8001676 <commandRead+0x686>
					}else{
						return CMD_ERROR;
 80013ca:	2316      	movs	r3, #22
 80013cc:	e153      	b.n	8001676 <commandRead+0x686>
				break;			

				// Setting
				case CMD_SETTING:
				{
					if (length == 4){ // 2 byte configure + 2 byte define
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	2b04      	cmp	r3, #4
 80013d2:	d130      	bne.n	8001436 <commandRead+0x446>
						uint8_t mode_traject;
						uint8_t mode_coordinate;
						temp_pointer = 2;
 80013d4:	2302      	movs	r3, #2
 80013d6:	62fb      	str	r3, [r7, #44]	; 0x2c
						mode_coordinate = message[temp_pointer++];
 80013d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013da:	1c5a      	adds	r2, r3, #1
 80013dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80013de:	461a      	mov	r2, r3
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	4413      	add	r3, r2
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	757b      	strb	r3, [r7, #21]
						mode_traject = message[temp_pointer];
 80013e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	4413      	add	r3, r2
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	753b      	strb	r3, [r7, #20]

						if (mode_coordinate == DUTY_COORDINATES_ABS) {
 80013f2:	7d7b      	ldrb	r3, [r7, #21]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d103      	bne.n	8001400 <commandRead+0x410>
							duty_cmd->coordinate_type = DUTY_COORDINATES_ABS;
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	2200      	movs	r2, #0
 80013fc:	731a      	strb	r2, [r3, #12]
 80013fe:	e008      	b.n	8001412 <commandRead+0x422>
						} else if (mode_coordinate == DUTY_COORDINATES_REL) {
 8001400:	7d7b      	ldrb	r3, [r7, #21]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d103      	bne.n	800140e <commandRead+0x41e>
							duty_cmd->coordinate_type = DUTY_COORDINATES_REL;
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	2201      	movs	r2, #1
 800140a:	731a      	strb	r2, [r3, #12]
 800140c:	e001      	b.n	8001412 <commandRead+0x422>
						} else {
							return CMD_ERROR;
 800140e:	2316      	movs	r3, #22
 8001410:	e131      	b.n	8001676 <commandRead+0x686>
						}

						if (mode_traject == DUTY_TRAJECTORY_LSPB) {
 8001412:	7d3b      	ldrb	r3, [r7, #20]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d103      	bne.n	8001420 <commandRead+0x430>
							duty_cmd->trajec_type = DUTY_TRAJECTORY_LSPB;
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	2200      	movs	r2, #0
 800141c:	741a      	strb	r2, [r3, #16]
 800141e:	e008      	b.n	8001432 <commandRead+0x442>
						} else if (mode_traject == DUTY_TRAJECTORY_SCURVE) {
 8001420:	7d3b      	ldrb	r3, [r7, #20]
 8001422:	2b01      	cmp	r3, #1
 8001424:	d103      	bne.n	800142e <commandRead+0x43e>
							duty_cmd->trajec_type = DUTY_TRAJECTORY_SCURVE;
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	2201      	movs	r2, #1
 800142a:	741a      	strb	r2, [r3, #16]
 800142c:	e001      	b.n	8001432 <commandRead+0x442>
						} else {
							return CMD_ERROR;
 800142e:	2316      	movs	r3, #22
 8001430:	e121      	b.n	8001676 <commandRead+0x686>
						}
						return CMD_SETTING;
 8001432:	230a      	movs	r3, #10
 8001434:	e11f      	b.n	8001676 <commandRead+0x686>
					}else{
						return CMD_ERROR;
 8001436:	2316      	movs	r3, #22
 8001438:	e11d      	b.n	8001676 <commandRead+0x686>
				break;

				// Change method
				case CMD_METHOD_CHANGE:
				{
					if(length == 3){ // 1 byte configure + 2 byte define
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	2b03      	cmp	r3, #3
 800143e:	d130      	bne.n	80014a2 <commandRead+0x4b2>
						uint8_t method;
						temp_pointer = 2;
 8001440:	2302      	movs	r3, #2
 8001442:	62fb      	str	r3, [r7, #44]	; 0x2c
						method = message[temp_pointer];
 8001444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	4413      	add	r3, r2
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	75bb      	strb	r3, [r7, #22]
						if (SCARA_METHOD_MANUAL == method) {
 800144e:	7dbb      	ldrb	r3, [r7, #22]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d103      	bne.n	800145c <commandRead+0x46c>
							duty_cmd->robot_method = SCARA_METHOD_MANUAL;
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	2200      	movs	r2, #0
 8001458:	705a      	strb	r2, [r3, #1]
 800145a:	e01d      	b.n	8001498 <commandRead+0x4a8>
						} else if (SCARA_METHOD_SEMI_AUTO == method) {
 800145c:	7dbb      	ldrb	r3, [r7, #22]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d103      	bne.n	800146a <commandRead+0x47a>
							duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	2201      	movs	r2, #1
 8001466:	705a      	strb	r2, [r3, #1]
 8001468:	e016      	b.n	8001498 <commandRead+0x4a8>
						} else if (SCARA_METHOD_AUTO == method) {
 800146a:	7dbb      	ldrb	r3, [r7, #22]
 800146c:	2b02      	cmp	r3, #2
 800146e:	d103      	bne.n	8001478 <commandRead+0x488>
							duty_cmd->robot_method = SCARA_METHOD_AUTO;
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	2202      	movs	r2, #2
 8001474:	705a      	strb	r2, [r3, #1]
 8001476:	e00f      	b.n	8001498 <commandRead+0x4a8>
						}else if(SCARA_METHOD_TEST == method){
 8001478:	7dbb      	ldrb	r3, [r7, #22]
 800147a:	2b03      	cmp	r3, #3
 800147c:	d103      	bne.n	8001486 <commandRead+0x496>
							duty_cmd->robot_method = SCARA_METHOD_TEST;
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	2203      	movs	r2, #3
 8001482:	705a      	strb	r2, [r3, #1]
 8001484:	e008      	b.n	8001498 <commandRead+0x4a8>
						}else if(SCARA_METHOD_PICK_AND_PLACE == method){
 8001486:	7dbb      	ldrb	r3, [r7, #22]
 8001488:	2b04      	cmp	r3, #4
 800148a:	d103      	bne.n	8001494 <commandRead+0x4a4>
							duty_cmd->robot_method = SCARA_METHOD_PICK_AND_PLACE;
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	2204      	movs	r2, #4
 8001490:	705a      	strb	r2, [r3, #1]
 8001492:	e001      	b.n	8001498 <commandRead+0x4a8>
						}else {
							return CMD_ERROR;
 8001494:	2316      	movs	r3, #22
 8001496:	e0ee      	b.n	8001676 <commandRead+0x686>
						}
						duty_cmd->change_method = TRUE;
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	2201      	movs	r2, #1
 800149c:	701a      	strb	r2, [r3, #0]
						return CMD_METHOD_CHANGE;
 800149e:	230b      	movs	r3, #11
 80014a0:	e0e9      	b.n	8001676 <commandRead+0x686>
					}else{
						return CMD_ERROR;
 80014a2:	2316      	movs	r3, #22
 80014a4:	e0e7      	b.n	8001676 <commandRead+0x686>
				break;

				// Set manual key
				case CMD_KEYBOARD:
				{
					if(length == 3){ // 1 byte output value + 2 byte define
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	2b03      	cmp	r3, #3
 80014aa:	d10f      	bne.n	80014cc <commandRead+0x4dc>
						int temp_pointer = 2;
 80014ac:	2302      	movs	r3, #2
 80014ae:	61fb      	str	r3, [r7, #28]
						duty_cmd->keyboard = (SCARA_KeyTypeDef)message[temp_pointer];
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	4413      	add	r3, r2
 80014b6:	781a      	ldrb	r2, [r3, #0]
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	70da      	strb	r2, [r3, #3]
						duty_cmd->robot_method = SCARA_METHOD_MANUAL;
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	2200      	movs	r2, #0
 80014c0:	705a      	strb	r2, [r3, #1]
						duty_cmd->change_method = FALSE;
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	2200      	movs	r2, #0
 80014c6:	701a      	strb	r2, [r3, #0]
						return CMD_KEYBOARD;
 80014c8:	2314      	movs	r3, #20
 80014ca:	e0d4      	b.n	8001676 <commandRead+0x686>
					}else{
						return CMD_ERROR;
 80014cc:	2316      	movs	r3, #22
 80014ce:	e0d2      	b.n	8001676 <commandRead+0x686>
				break;

				// Set manual key speed
				case CMD_KEY_SPEED:
				{
					if(length == 3){ // 1 byte key value + 2 byte define
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	2b03      	cmp	r3, #3
 80014d4:	d116      	bne.n	8001504 <commandRead+0x514>
						int temp_pointer = 2;
 80014d6:	2302      	movs	r3, #2
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24
						int32_t speed = (int32_t)message[temp_pointer];
 80014da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014dc:	68fa      	ldr	r2, [r7, #12]
 80014de:	4413      	add	r3, r2
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	623b      	str	r3, [r7, #32]
						// check limit
						if ((speed < SHIFT_SPEED_MIN) || (speed > SHIFT_SPEED_MAX)) {
 80014e4:	6a3b      	ldr	r3, [r7, #32]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	dd02      	ble.n	80014f0 <commandRead+0x500>
 80014ea:	6a3b      	ldr	r3, [r7, #32]
 80014ec:	2b0e      	cmp	r3, #14
 80014ee:	dd01      	ble.n	80014f4 <commandRead+0x504>
							return CMD_ERROR;
 80014f0:	2316      	movs	r3, #22
 80014f2:	e0c0      	b.n	8001676 <commandRead+0x686>
						}
						duty_cmd->key_speed = speed;
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	6a3a      	ldr	r2, [r7, #32]
 80014f8:	605a      	str	r2, [r3, #4]
						current_key_speed1 = speed;
 80014fa:	4a5c      	ldr	r2, [pc, #368]	; (800166c <commandRead+0x67c>)
 80014fc:	6a3b      	ldr	r3, [r7, #32]
 80014fe:	6013      	str	r3, [r2, #0]
						return CMD_KEY_SPEED;
 8001500:	2315      	movs	r3, #21
 8001502:	e0b8      	b.n	8001676 <commandRead+0x686>
					}else{
						return CMD_ERROR;
 8001504:	2316      	movs	r3, #22
 8001506:	e0b6      	b.n	8001676 <commandRead+0x686>
				break;

				// Set test mode
				case CMD_MOTOR_TEST:
				{
					if(length == 3){ // 1byte key mode + 2 byte define
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	2b03      	cmp	r3, #3
 800150c:	d117      	bne.n	800153e <commandRead+0x54e>
						int temp_pointer = 2;
 800150e:	2302      	movs	r3, #2
 8001510:	61bb      	str	r3, [r7, #24]
						uint8_t test_key = message[temp_pointer];
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	68fa      	ldr	r2, [r7, #12]
 8001516:	4413      	add	r3, r2
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	75fb      	strb	r3, [r7, #23]
						if(test_key < 0 || test_key > 8){
 800151c:	7dfb      	ldrb	r3, [r7, #23]
 800151e:	2b08      	cmp	r3, #8
 8001520:	d901      	bls.n	8001526 <commandRead+0x536>
							return CMD_ERROR;
 8001522:	2316      	movs	r3, #22
 8001524:	e0a7      	b.n	8001676 <commandRead+0x686>
						}
						duty_cmd->test_key = test_key;
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	7dfa      	ldrb	r2, [r7, #23]
 800152a:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
						duty_cmd->robot_method = SCARA_METHOD_TEST;	
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	2203      	movs	r2, #3
 8001532:	705a      	strb	r2, [r3, #1]
						duty_cmd->change_method = FALSE;
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	2200      	movs	r2, #0
 8001538:	701a      	strb	r2, [r3, #0]
						return CMD_MOTOR_TEST;
 800153a:	230c      	movs	r3, #12
 800153c:	e09b      	b.n	8001676 <commandRead+0x686>
					}else{
						return CMD_ERROR;
 800153e:	2316      	movs	r3, #22
 8001540:	e099      	b.n	8001676 <commandRead+0x686>
				}
				break;

				case CMD_OBJECT_DETECTED:
				{
					if (length == 15){ // 3 int32_t number + 1 byte object type + 2 define byte
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	2b0f      	cmp	r3, #15
 8001546:	d16a      	bne.n	800161e <commandRead+0x62e>
						temp_pointer = -2;
 8001548:	f06f 0301 	mvn.w	r3, #1
 800154c:	62fb      	str	r3, [r7, #44]	; 0x2c
						duty_cmd->target_point.x = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 800154e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001550:	3304      	adds	r3, #4
 8001552:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	4413      	add	r3, r2
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4618      	mov	r0, r3
 800155e:	f7fe ffe1 	bl	8000524 <__aeabi_i2d>
 8001562:	a33f      	add	r3, pc, #252	; (adr r3, 8001660 <commandRead+0x670>)
 8001564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001568:	f7ff f846 	bl	80005f8 <__aeabi_dmul>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	6839      	ldr	r1, [r7, #0]
 8001572:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
						duty_cmd->target_point.y = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 8001576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001578:	3304      	adds	r3, #4
 800157a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800157c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800157e:	68fa      	ldr	r2, [r7, #12]
 8001580:	4413      	add	r3, r2
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f7fe ffcd 	bl	8000524 <__aeabi_i2d>
 800158a:	a335      	add	r3, pc, #212	; (adr r3, 8001660 <commandRead+0x670>)
 800158c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001590:	f7ff f832 	bl	80005f8 <__aeabi_dmul>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	6839      	ldr	r1, [r7, #0]
 800159a:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
						//duty_cmd->target_point.z = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
						duty_cmd->target_point.roll = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 800159e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a0:	3304      	adds	r3, #4
 80015a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	4413      	add	r3, r2
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7fe ffb9 	bl	8000524 <__aeabi_i2d>
 80015b2:	a32b      	add	r3, pc, #172	; (adr r3, 8001660 <commandRead+0x670>)
 80015b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b8:	f7ff f81e 	bl	80005f8 <__aeabi_dmul>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	6839      	ldr	r1, [r7, #0]
 80015c2:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
						duty_cmd->target_point.object_type = message[temp_pointer+=4];
 80015c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015c8:	3304      	adds	r3, #4
 80015ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	4413      	add	r3, r2
 80015d2:	781a      	ldrb	r2, [r3, #0]
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
						duty_cmd->target_point.t = (double)(TIM2->CNT);
 80015da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7fe ff8f 	bl	8000504 <__aeabi_ui2d>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	6839      	ldr	r1, [r7, #0]
 80015ec:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
						duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	2201      	movs	r2, #1
 80015f4:	745a      	strb	r2, [r3, #17]
						duty_cmd->path_type = DUTY_PATH_LINE;
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	2200      	movs	r2, #0
 80015fa:	739a      	strb	r2, [r3, #14]
						duty_cmd->space_type = DUTY_SPACE_TASK;
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	2200      	movs	r2, #0
 8001600:	735a      	strb	r2, [r3, #13]
						duty_cmd->coordinate_type = DUTY_COORDINATES_ABS;
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	2200      	movs	r2, #0
 8001606:	731a      	strb	r2, [r3, #12]
						duty_cmd->trajec_type = DUTY_TRAJECTORY_LSPB;
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	2200      	movs	r2, #0
 800160c:	741a      	strb	r2, [r3, #16]
					}else{
						return CMD_ERROR;
					}
					duty_cmd->robot_method = SCARA_METHOD_PICK_AND_PLACE;
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	2204      	movs	r2, #4
 8001612:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	2200      	movs	r2, #0
 8001618:	701a      	strb	r2, [r3, #0]
					return CMD_OBJECT_DETECTED;
 800161a:	2318      	movs	r3, #24
 800161c:	e02b      	b.n	8001676 <commandRead+0x686>
						return CMD_ERROR;
 800161e:	2316      	movs	r3, #22
 8001620:	e029      	b.n	8001676 <commandRead+0x686>
				}
				break;

				case CMD_SETUP_CONVEYOR_SPEED:
				{
					if (length == 6) { // 1 int32_t number + 2 define byte
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	2b06      	cmp	r3, #6
 8001626:	d114      	bne.n	8001652 <commandRead+0x662>
						temp_pointer = 2;
 8001628:	2302      	movs	r3, #2
 800162a:	62fb      	str	r3, [r7, #44]	; 0x2c
						conveyor_speed = (double)(*(int32_t*)(&message[temp_pointer]))*COR_INVERSE_SCALE;
 800162c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	4413      	add	r3, r2
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f7fe ff75 	bl	8000524 <__aeabi_i2d>
 800163a:	a309      	add	r3, pc, #36	; (adr r3, 8001660 <commandRead+0x670>)
 800163c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001640:	f7fe ffda 	bl	80005f8 <__aeabi_dmul>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	4909      	ldr	r1, [pc, #36]	; (8001670 <commandRead+0x680>)
 800164a:	e9c1 2300 	strd	r2, r3, [r1]
						return CMD_SETUP_CONVEYOR_SPEED;
 800164e:	2319      	movs	r3, #25
 8001650:	e011      	b.n	8001676 <commandRead+0x686>
					}else{
						return CMD_ERROR;
 8001652:	2316      	movs	r3, #22
 8001654:	e00f      	b.n	8001676 <commandRead+0x686>
				break;

				//Unknow command id
				default:
				{
					return CMD_ERROR;
 8001656:	2316      	movs	r3, #22
 8001658:	e00d      	b.n	8001676 <commandRead+0x686>
        break;

        //unknow protocol id
        default:
        {
            return PROTOCOL_ERROR;
 800165a:	2317      	movs	r3, #23
 800165c:	e00b      	b.n	8001676 <commandRead+0x686>
 800165e:	bf00      	nop
 8001660:	a0000000 	.word	0xa0000000
 8001664:	3eb0c6f7 	.word	0x3eb0c6f7
 8001668:	20004d68 	.word	0x20004d68
 800166c:	20000000 	.word	0x20000000
 8001670:	20000ba8 	.word	0x20000ba8
        break;
 8001674:	bf00      	nop
        }
    }
}
 8001676:	4618      	mov	r0, r3
 8001678:	3730      	adds	r7, #48	; 0x30
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop

08001680 <commandReply>:

Robot_RespondTypedef	commandReply	(Robot_CommandTypedef cmd_type,
										DUTY_Command_TypeDef duty_cmd,
										uint8_t *detail, int32_t *detail_length) {
 8001680:	b082      	sub	sp, #8
 8001682:	b580      	push	{r7, lr}
 8001684:	b0e2      	sub	sp, #392	; 0x188
 8001686:	af2e      	add	r7, sp, #184	; 0xb8
 8001688:	4601      	mov	r1, r0
 800168a:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 800168e:	e880 000c 	stmia.w	r0, {r2, r3}
 8001692:	460b      	mov	r3, r1
 8001694:	71fb      	strb	r3, [r7, #7]
	Robot_RespondTypedef ret;

	switch(cmd_type) {
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	2b19      	cmp	r3, #25
 800169a:	f200 8188 	bhi.w	80019ae <commandReply+0x32e>
 800169e:	a201      	add	r2, pc, #4	; (adr r2, 80016a4 <commandReply+0x24>)
 80016a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016a4:	0800170d 	.word	0x0800170d
 80016a8:	0800170d 	.word	0x0800170d
 80016ac:	0800170d 	.word	0x0800170d
 80016b0:	0800170d 	.word	0x0800170d
 80016b4:	0800170d 	.word	0x0800170d
 80016b8:	0800170d 	.word	0x0800170d
 80016bc:	0800170d 	.word	0x0800170d
 80016c0:	08001715 	.word	0x08001715
 80016c4:	0800178f 	.word	0x0800178f
 80016c8:	080017c3 	.word	0x080017c3
 80016cc:	08001859 	.word	0x08001859
 80016d0:	08001935 	.word	0x08001935
 80016d4:	0800170d 	.word	0x0800170d
 80016d8:	080019d1 	.word	0x080019d1
 80016dc:	080019d1 	.word	0x080019d1
 80016e0:	080019d1 	.word	0x080019d1
 80016e4:	080019d1 	.word	0x080019d1
 80016e8:	080019d1 	.word	0x080019d1
 80016ec:	080019d1 	.word	0x080019d1
 80016f0:	0800193d 	.word	0x0800193d
 80016f4:	08001945 	.word	0x08001945
 80016f8:	0800194d 	.word	0x0800194d
 80016fc:	0800198d 	.word	0x0800198d
 8001700:	080019af 	.word	0x080019af
 8001704:	0800170d 	.word	0x0800170d
 8001708:	0800192d 	.word	0x0800192d
	case CMD_MOTOR_TEST:
	case CMD_MOVE_CIRCLE:
	case CMD_MOVE_JOINT:
	case CMD_OBJECT_DETECTED:
	case CMD_ROTATE_SINGLE:
		ret = RPD_DUTY;
 800170c:	2309      	movs	r3, #9
 800170e:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8001712:	e15e      	b.n	80019d2 <commandReply+0x352>
	case CMD_OUTPUT:
		{
			if (1 == duty_cmd.sub_para_int) {
 8001714:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001718:	2b01      	cmp	r3, #1
 800171a:	d110      	bne.n	800173e <commandReply+0xbe>
				scaraSetOutput(1);
 800171c:	2001      	movs	r0, #1
 800171e:	f008 fe6b 	bl	800a3f8 <scaraSetOutput>
				// strcpy( (char *)detail, "Output ON");
				// detail_length += 9;
				detail[(*detail_length)++] = OUTPUT_ON;
 8001722:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	1c59      	adds	r1, r3, #1
 800172a:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 800172e:	6011      	str	r1, [r2, #0]
 8001730:	461a      	mov	r2, r3
 8001732:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001736:	4413      	add	r3, r2
 8001738:	220d      	movs	r2, #13
 800173a:	701a      	strb	r2, [r3, #0]
 800173c:	e023      	b.n	8001786 <commandReply+0x106>
			} else if (0 == duty_cmd.sub_para_int) {
 800173e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001742:	2b00      	cmp	r3, #0
 8001744:	d110      	bne.n	8001768 <commandReply+0xe8>
				scaraSetOutput(0);
 8001746:	2000      	movs	r0, #0
 8001748:	f008 fe56 	bl	800a3f8 <scaraSetOutput>
				detail[(*detail_length)++] = OUTPUT_OFF;
 800174c:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	1c59      	adds	r1, r3, #1
 8001754:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001758:	6011      	str	r1, [r2, #0]
 800175a:	461a      	mov	r2, r3
 800175c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001760:	4413      	add	r3, r2
 8001762:	220e      	movs	r2, #14
 8001764:	701a      	strb	r2, [r3, #0]
 8001766:	e00e      	b.n	8001786 <commandReply+0x106>
			} else {
				// strcpy( (char *)detail, "Wrong Value");
				// detail_length += 11;
				detail[(*detail_length)++] = WRONG_OUTPUT_VALUE ;
 8001768:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	1c59      	adds	r1, r3, #1
 8001770:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001774:	6011      	str	r1, [r2, #0]
 8001776:	461a      	mov	r2, r3
 8001778:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800177c:	4413      	add	r3, r2
 800177e:	220f      	movs	r2, #15
 8001780:	701a      	strb	r2, [r3, #0]
				return RPD_ERROR;
 8001782:	2307      	movs	r3, #7
 8001784:	e127      	b.n	80019d6 <commandReply+0x356>
			}
			ret = RPD_OK;
 8001786:	2308      	movs	r3, #8
 8001788:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		}
		break;
 800178c:	e121      	b.n	80019d2 <commandReply+0x352>
	case CMD_READ_STATUS:
		{
			SCARA_ModeTypeDef		current_mode;
			SCARA_DutyStateTypeDef 	current_state;
			current_mode	 = scaraGetMode();
 800178e:	f008 fe95 	bl	800a4bc <scaraGetMode>
 8001792:	4603      	mov	r3, r0
 8001794:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
			current_state	 = scaraGetDutyState();
 8001798:	f008 fea8 	bl	800a4ec <scaraGetDutyState>
 800179c:	4603      	mov	r3, r0
 800179e:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
			if ( SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_state) {
 80017a2:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d107      	bne.n	80017ba <commandReply+0x13a>
 80017aa:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d103      	bne.n	80017ba <commandReply+0x13a>
				ret = RPD_IDLE;
 80017b2:	2300      	movs	r3, #0
 80017b4:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			} else {
				ret = RPD_BUSY;
			}
		}
		break;
 80017b8:	e10b      	b.n	80019d2 <commandReply+0x352>
				ret = RPD_BUSY;
 80017ba:	2301      	movs	r3, #1
 80017bc:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 80017c0:	e107      	b.n	80019d2 <commandReply+0x352>
	case CMD_READ_POSITION:
		{
			SCARA_PositionTypeDef position;
			if(position_type == REAL_POSITION_DATA || position_type == REAL_POSITION_DATA_PLUS_UPDATE){
 80017c2:	4b88      	ldr	r3, [pc, #544]	; (80019e4 <commandReply+0x364>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d003      	beq.n	80017d2 <commandReply+0x152>
 80017ca:	4b86      	ldr	r3, [pc, #536]	; (80019e4 <commandReply+0x364>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d113      	bne.n	80017fa <commandReply+0x17a>
				lowlayer_readTruePosition(&position);
 80017d2:	f107 0308 	add.w	r3, r7, #8
 80017d6:	4618      	mov	r0, r3
 80017d8:	f002 ff16 	bl	8004608 <lowlayer_readTruePosition>
				kinematicForward(&position);
 80017dc:	f107 0308 	add.w	r3, r7, #8
 80017e0:	4618      	mov	r0, r3
 80017e2:	f002 f83d 	bl	8003860 <kinematicForward>
				if(position_type == REAL_POSITION_DATA_PLUS_UPDATE){
 80017e6:	4b7f      	ldr	r3, [pc, #508]	; (80019e4 <commandReply+0x364>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d11e      	bne.n	800182c <commandReply+0x1ac>
					scaraUpdatePosition(&position);
 80017ee:	f107 0308 	add.w	r3, r7, #8
 80017f2:	4618      	mov	r0, r3
 80017f4:	f008 fe52 	bl	800a49c <scaraUpdatePosition>
				if(position_type == REAL_POSITION_DATA_PLUS_UPDATE){
 80017f8:	e018      	b.n	800182c <commandReply+0x1ac>
				}
			}else if(position_type == ESTIMATE_POSITION_DATA){
 80017fa:	4b7a      	ldr	r3, [pc, #488]	; (80019e4 <commandReply+0x364>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d105      	bne.n	800180e <commandReply+0x18e>
				scaraGetPosition(&position);
 8001802:	f107 0308 	add.w	r3, r7, #8
 8001806:	4618      	mov	r0, r3
 8001808:	f008 fe38 	bl	800a47c <scaraGetPosition>
 800180c:	e00e      	b.n	800182c <commandReply+0x1ac>
			}else{
				detail[(*detail_length)++] = WRONG_READ_POSITION_TYPE;
 800180e:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	1c59      	adds	r1, r3, #1
 8001816:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 800181a:	6011      	str	r1, [r2, #0]
 800181c:	461a      	mov	r2, r3
 800181e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001822:	4413      	add	r3, r2
 8001824:	2210      	movs	r2, #16
 8001826:	701a      	strb	r2, [r3, #0]
				return RPD_ERROR;
 8001828:	2307      	movs	r3, #7
 800182a:	e0d4      	b.n	80019d6 <commandReply+0x356>
			}
			*detail_length = scaraPosition_packaging(detail, position);
 800182c:	4668      	mov	r0, sp
 800182e:	f107 0310 	add.w	r3, r7, #16
 8001832:	22b8      	movs	r2, #184	; 0xb8
 8001834:	4619      	mov	r1, r3
 8001836:	f014 fa6b 	bl	8015d10 <memcpy>
 800183a:	f107 0308 	add.w	r3, r7, #8
 800183e:	cb0c      	ldmia	r3, {r2, r3}
 8001840:	f8d7 0298 	ldr.w	r0, [r7, #664]	; 0x298
 8001844:	f008 fe84 	bl	800a550 <scaraPosition_packaging>
 8001848:	4602      	mov	r2, r0
 800184a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800184e:	601a      	str	r2, [r3, #0]
			ret =  RPD_POSITION;
 8001850:	2302      	movs	r3, #2
 8001852:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		}
		break;
 8001856:	e0bc      	b.n	80019d2 <commandReply+0x352>
	case CMD_SETTING:
		if ( DUTY_COORDINATES_ABS == duty_cmd.coordinate_type) {
 8001858:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 800185c:	2b00      	cmp	r3, #0
 800185e:	d10d      	bne.n	800187c <commandReply+0x1fc>
			// strcpy( (char *)detail, "ABSOLUTE.");
			// detail_length += 9;
			detail[(*detail_length)++] = ABSOLUTE;
 8001860:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	1c59      	adds	r1, r3, #1
 8001868:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 800186c:	6011      	str	r1, [r2, #0]
 800186e:	461a      	mov	r2, r3
 8001870:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001874:	4413      	add	r3, r2
 8001876:	2211      	movs	r2, #17
 8001878:	701a      	strb	r2, [r3, #0]
 800187a:	e020      	b.n	80018be <commandReply+0x23e>
		} else if ( DUTY_COORDINATES_REL == duty_cmd.coordinate_type) {
 800187c:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8001880:	2b01      	cmp	r3, #1
 8001882:	d10d      	bne.n	80018a0 <commandReply+0x220>
			detail[(*detail_length)++] = RELATIVE;
 8001884:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	1c59      	adds	r1, r3, #1
 800188c:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001890:	6011      	str	r1, [r2, #0]
 8001892:	461a      	mov	r2, r3
 8001894:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001898:	4413      	add	r3, r2
 800189a:	2212      	movs	r2, #18
 800189c:	701a      	strb	r2, [r3, #0]
 800189e:	e00e      	b.n	80018be <commandReply+0x23e>
		} else {
			detail[(*detail_length)++] = WRONG_COORDINATE;
 80018a0:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	1c59      	adds	r1, r3, #1
 80018a8:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80018ac:	6011      	str	r1, [r2, #0]
 80018ae:	461a      	mov	r2, r3
 80018b0:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80018b4:	4413      	add	r3, r2
 80018b6:	220c      	movs	r2, #12
 80018b8:	701a      	strb	r2, [r3, #0]
			return RPD_ERROR;
 80018ba:	2307      	movs	r3, #7
 80018bc:	e08b      	b.n	80019d6 <commandReply+0x356>
		}

		if ( DUTY_TRAJECTORY_LSPB == duty_cmd.trajec_type) {
 80018be:	f897 30e8 	ldrb.w	r3, [r7, #232]	; 0xe8
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d10d      	bne.n	80018e2 <commandReply+0x262>
			detail[(*detail_length)++] = LSPB;
 80018c6:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	1c59      	adds	r1, r3, #1
 80018ce:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80018d2:	6011      	str	r1, [r2, #0]
 80018d4:	461a      	mov	r2, r3
 80018d6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80018da:	4413      	add	r3, r2
 80018dc:	2213      	movs	r2, #19
 80018de:	701a      	strb	r2, [r3, #0]
 80018e0:	e020      	b.n	8001924 <commandReply+0x2a4>
		} else if ( DUTY_TRAJECTORY_SCURVE == duty_cmd.trajec_type) {
 80018e2:	f897 30e8 	ldrb.w	r3, [r7, #232]	; 0xe8
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d10d      	bne.n	8001906 <commandReply+0x286>
			detail[(*detail_length)++] = S_CURVE;
 80018ea:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	1c59      	adds	r1, r3, #1
 80018f2:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80018f6:	6011      	str	r1, [r2, #0]
 80018f8:	461a      	mov	r2, r3
 80018fa:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80018fe:	4413      	add	r3, r2
 8001900:	2214      	movs	r2, #20
 8001902:	701a      	strb	r2, [r3, #0]
 8001904:	e00e      	b.n	8001924 <commandReply+0x2a4>
		} else {
			detail[(*detail_length)++] = WRONG_TRAJECTORY_TYPE;
 8001906:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	1c59      	adds	r1, r3, #1
 800190e:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001912:	6011      	str	r1, [r2, #0]
 8001914:	461a      	mov	r2, r3
 8001916:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800191a:	4413      	add	r3, r2
 800191c:	2205      	movs	r2, #5
 800191e:	701a      	strb	r2, [r3, #0]
			return RPD_ERROR;
 8001920:	2307      	movs	r3, #7
 8001922:	e058      	b.n	80019d6 <commandReply+0x356>
		}		
		ret = RPD_OK;
 8001924:	2308      	movs	r3, #8
 8001926:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 800192a:	e052      	b.n	80019d2 <commandReply+0x352>
	case CMD_SETUP_CONVEYOR_SPEED:
		ret = RPD_OK;
 800192c:	2308      	movs	r3, #8
 800192e:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8001932:	e04e      	b.n	80019d2 <commandReply+0x352>
	case CMD_METHOD_CHANGE:
		ret = RPD_DUTY;
 8001934:	2309      	movs	r3, #9
 8001936:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 800193a:	e04a      	b.n	80019d2 <commandReply+0x352>
	case CMD_JOB_PUSH_OUTPUT:
		break;
	case CMD_JOB_TEST:
		break;
	case CMD_JOB_RUN:
		ret = RPD_DUTY;
 800193c:	2309      	movs	r3, #9
 800193e:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8001942:	e046      	b.n	80019d2 <commandReply+0x352>
	case CMD_KEYBOARD:
		ret = RPD_DUTY;
 8001944:	2309      	movs	r3, #9
 8001946:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 800194a:	e042      	b.n	80019d2 <commandReply+0x352>
	case CMD_KEY_SPEED:
		// sprintf((char*) detail, "MANUAL SPEED = %d", duty_cmd.key_speed);
		detail[(*detail_length)++] = MANUAL_SPEED;
 800194c:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	1c59      	adds	r1, r3, #1
 8001954:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001958:	6011      	str	r1, [r2, #0]
 800195a:	461a      	mov	r2, r3
 800195c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001960:	4413      	add	r3, r2
 8001962:	2216      	movs	r2, #22
 8001964:	701a      	strb	r2, [r3, #0]
		detail[(*detail_length)++] = (uint8_t)(duty_cmd.key_speed);
 8001966:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800196a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	1c59      	adds	r1, r3, #1
 8001972:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001976:	6011      	str	r1, [r2, #0]
 8001978:	461a      	mov	r2, r3
 800197a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800197e:	4413      	add	r3, r2
 8001980:	b2c2      	uxtb	r2, r0
 8001982:	701a      	strb	r2, [r3, #0]
		ret = RPD_OK;
 8001984:	2308      	movs	r3, #8
 8001986:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 800198a:	e022      	b.n	80019d2 <commandReply+0x352>
	case CMD_ERROR:
		// strcpy( (char *)detail, "Check parameters");
		detail[(*detail_length)++] = CHECK_PARAMETER;
 800198c:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	1c59      	adds	r1, r3, #1
 8001994:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001998:	6011      	str	r1, [r2, #0]
 800199a:	461a      	mov	r2, r3
 800199c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80019a0:	4413      	add	r3, r2
 80019a2:	2215      	movs	r2, #21
 80019a4:	701a      	strb	r2, [r3, #0]
		ret = RPD_ERROR;
 80019a6:	2307      	movs	r3, #7
 80019a8:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 80019ac:	e011      	b.n	80019d2 <commandReply+0x352>
	default:
		// strcpy( (char *)detail, "Unknown command");
		detail[(*detail_length)++] = UNKNOW_COMMAND;
 80019ae:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	1c59      	adds	r1, r3, #1
 80019b6:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80019ba:	6011      	str	r1, [r2, #0]
 80019bc:	461a      	mov	r2, r3
 80019be:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80019c2:	4413      	add	r3, r2
 80019c4:	2217      	movs	r2, #23
 80019c6:	701a      	strb	r2, [r3, #0]
		ret = RPD_ERROR;
 80019c8:	2307      	movs	r3, #7
 80019ca:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
 80019ce:	e000      	b.n	80019d2 <commandReply+0x352>
		break;
 80019d0:	bf00      	nop
	}
	return ret;
 80019d2:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	37d0      	adds	r7, #208	; 0xd0
 80019da:	46bd      	mov	sp, r7
 80019dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80019e0:	b002      	add	sp, #8
 80019e2:	4770      	bx	lr
 80019e4:	20004d68 	.word	0x20004d68

080019e8 <commandRespond1>:

int32_t				commandRespond1	(Robot_RespondTypedef rpd,
										int32_t id_command,
										char *detail,
										int32_t detail_length,
										char *respond) {
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60b9      	str	r1, [r7, #8]
 80019f0:	607a      	str	r2, [r7, #4]
 80019f2:	603b      	str	r3, [r7, #0]
 80019f4:	4603      	mov	r3, r0
 80019f6:	73fb      	strb	r3, [r7, #15]
	int32_t out_length = 0;
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]
	respond[out_length++] = 0x28;
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	1c5a      	adds	r2, r3, #1
 8001a00:	617a      	str	r2, [r7, #20]
 8001a02:	461a      	mov	r2, r3
 8001a04:	6a3b      	ldr	r3, [r7, #32]
 8001a06:	4413      	add	r3, r2
 8001a08:	2228      	movs	r2, #40	; 0x28
 8001a0a:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = RESPONSE_TRANSMISION;
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	1c5a      	adds	r2, r3, #1
 8001a10:	617a      	str	r2, [r7, #20]
 8001a12:	461a      	mov	r2, r3
 8001a14:	6a3b      	ldr	r3, [r7, #32]
 8001a16:	4413      	add	r3, r2
 8001a18:	2202      	movs	r2, #2
 8001a1a:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = rpd;
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	1c5a      	adds	r2, r3, #1
 8001a20:	617a      	str	r2, [r7, #20]
 8001a22:	461a      	mov	r2, r3
 8001a24:	6a3b      	ldr	r3, [r7, #32]
 8001a26:	4413      	add	r3, r2
 8001a28:	7bfa      	ldrb	r2, [r7, #15]
 8001a2a:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = id_command;
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	1c5a      	adds	r2, r3, #1
 8001a30:	617a      	str	r2, [r7, #20]
 8001a32:	461a      	mov	r2, r3
 8001a34:	6a3b      	ldr	r3, [r7, #32]
 8001a36:	4413      	add	r3, r2
 8001a38:	68ba      	ldr	r2, [r7, #8]
 8001a3a:	b2d2      	uxtb	r2, r2
 8001a3c:	701a      	strb	r2, [r3, #0]
	if(detail_length != 0){
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d00c      	beq.n	8001a5e <commandRespond1+0x76>
		memcpy(&respond[out_length], detail, detail_length);
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	6a3a      	ldr	r2, [r7, #32]
 8001a48:	4413      	add	r3, r2
 8001a4a:	683a      	ldr	r2, [r7, #0]
 8001a4c:	6879      	ldr	r1, [r7, #4]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f014 f95e 	bl	8015d10 <memcpy>
		out_length += detail_length;
 8001a54:	697a      	ldr	r2, [r7, #20]
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	4413      	add	r3, r2
 8001a5a:	617b      	str	r3, [r7, #20]
 8001a5c:	e007      	b.n	8001a6e <commandRespond1+0x86>
	}else{
		respond[out_length++] = NONE;
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	1c5a      	adds	r2, r3, #1
 8001a62:	617a      	str	r2, [r7, #20]
 8001a64:	461a      	mov	r2, r3
 8001a66:	6a3b      	ldr	r3, [r7, #32]
 8001a68:	4413      	add	r3, r2
 8001a6a:	2223      	movs	r2, #35	; 0x23
 8001a6c:	701a      	strb	r2, [r3, #0]
	}
	respond[out_length++] = 0x29;
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	1c5a      	adds	r2, r3, #1
 8001a72:	617a      	str	r2, [r7, #20]
 8001a74:	461a      	mov	r2, r3
 8001a76:	6a3b      	ldr	r3, [r7, #32]
 8001a78:	4413      	add	r3, r2
 8001a7a:	2229      	movs	r2, #41	; 0x29
 8001a7c:	701a      	strb	r2, [r3, #0]

	return out_length;
 8001a7e:	697b      	ldr	r3, [r7, #20]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3718      	adds	r7, #24
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <LOG_REPORT>:
 *  line		: line code number
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t LOG_REPORT(char *message, uint16_t line) {
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b096      	sub	sp, #88	; 0x58
 8001a8c:	af02      	add	r7, sp, #8
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	460b      	mov	r3, r1
 8001a92:	807b      	strh	r3, [r7, #2]
	uint8_t temp_buff[64];
	int32_t len;

	len = snprintf((char*)temp_buff, 63, "%d, %s \r\n", line, message);
 8001a94:	887a      	ldrh	r2, [r7, #2]
 8001a96:	f107 0008 	add.w	r0, r7, #8
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	4a17      	ldr	r2, [pc, #92]	; (8001b00 <LOG_REPORT+0x78>)
 8001aa2:	213f      	movs	r1, #63	; 0x3f
 8001aa4:	f015 f89e 	bl	8016be4 <sniprintf>
 8001aa8:	64f8      	str	r0, [r7, #76]	; 0x4c
	if (-1 == len) {
 8001aaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab0:	d101      	bne.n	8001ab6 <LOG_REPORT+0x2e>
		return FALSE;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	e01f      	b.n	8001af6 <LOG_REPORT+0x6e>
	}
	ringBuff_PushArray(&uart_tx_ringbuff, temp_buff, len);
 8001ab6:	f107 0308 	add.w	r3, r7, #8
 8001aba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001abc:	4619      	mov	r1, r3
 8001abe:	4811      	ldr	r0, [pc, #68]	; (8001b04 <LOG_REPORT+0x7c>)
 8001ac0:	f002 faf7 	bl	80040b2 <ringBuff_PushArray>
	if (HAL_DMA_GetState(&hdma_uart4_tx) == HAL_DMA_STATE_BUSY) {
 8001ac4:	4810      	ldr	r0, [pc, #64]	; (8001b08 <LOG_REPORT+0x80>)
 8001ac6:	f00a f8a1 	bl	800bc0c <HAL_DMA_GetState>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d101      	bne.n	8001ad4 <LOG_REPORT+0x4c>
		return TRUE;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e010      	b.n	8001af6 <LOG_REPORT+0x6e>
	}// dma busy
	uint16_t size_dma;
	size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 8001ad4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ad8:	490c      	ldr	r1, [pc, #48]	; (8001b0c <LOG_REPORT+0x84>)
 8001ada:	480a      	ldr	r0, [pc, #40]	; (8001b04 <LOG_REPORT+0x7c>)
 8001adc:	f002 fb11 	bl	8004102 <ringBuff_PopArray>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 8001ae6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001aea:	461a      	mov	r2, r3
 8001aec:	4907      	ldr	r1, [pc, #28]	; (8001b0c <LOG_REPORT+0x84>)
 8001aee:	4808      	ldr	r0, [pc, #32]	; (8001b10 <LOG_REPORT+0x88>)
 8001af0:	f00c fe04 	bl	800e6fc <HAL_UART_Transmit_DMA>
	return TRUE;
 8001af4:	2301      	movs	r3, #1
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3750      	adds	r7, #80	; 0x50
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	0801bfc0 	.word	0x0801bfc0
 8001b04:	20000410 	.word	0x20000410
 8001b08:	20005e30 	.word	0x20005e30
 8001b0c:	20004d6c 	.word	0x20004d6c
 8001b10:	20005df0 	.word	0x20005df0

08001b14 <unPackPayload>:
 *  in_lenght		: lenght of input_buff
 *
 *  returns:		: lenght of output_buff
 *  				  -1 if error
 */
int32_t	unPackPayload	(uint8_t *message_buff, int32_t in_lenght) {
 8001b14:	b5b0      	push	{r4, r5, r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
 8001b1e:	466b      	mov	r3, sp
 8001b20:	461d      	mov	r5, r3
	if (in_lenght < MIN_MESSAGE_LENGHT) {
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	2b03      	cmp	r3, #3
 8001b26:	dc02      	bgt.n	8001b2e <unPackPayload+0x1a>
		return -1;
 8001b28:	f04f 33ff 	mov.w	r3, #4294967295
 8001b2c:	e063      	b.n	8001bf6 <unPackPayload+0xe2>
	}// check minimum lenght

	if ( (START_CHAR != message_buff[0]) || (END_CHAR != message_buff[in_lenght - 1]) ) {
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	2b28      	cmp	r3, #40	; 0x28
 8001b34:	d106      	bne.n	8001b44 <unPackPayload+0x30>
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b29      	cmp	r3, #41	; 0x29
 8001b42:	d002      	beq.n	8001b4a <unPackPayload+0x36>
		return -1;
 8001b44:	f04f 33ff 	mov.w	r3, #4294967295
 8001b48:	e055      	b.n	8001bf6 <unPackPayload+0xe2>
	}// check start char and end char

	int32_t out_lenght = in_lenght - 2;
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	3b02      	subs	r3, #2
 8001b4e:	613b      	str	r3, [r7, #16]
//		if ( (START_CHAR == message_buff[i]) || (END_CHAR == message_buff[i]) || (ADD_CHAR == message_buff[i]) ) {
//			out_lenght--;
//		}
//	}// compute output buffer lenght

	uint8_t temp_buff[out_lenght];
 8001b50:	693c      	ldr	r4, [r7, #16]
 8001b52:	1e63      	subs	r3, r4, #1
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	4623      	mov	r3, r4
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f04f 0100 	mov.w	r1, #0
 8001b5e:	f04f 0200 	mov.w	r2, #0
 8001b62:	f04f 0300 	mov.w	r3, #0
 8001b66:	00cb      	lsls	r3, r1, #3
 8001b68:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001b6c:	00c2      	lsls	r2, r0, #3
 8001b6e:	4623      	mov	r3, r4
 8001b70:	4618      	mov	r0, r3
 8001b72:	f04f 0100 	mov.w	r1, #0
 8001b76:	f04f 0200 	mov.w	r2, #0
 8001b7a:	f04f 0300 	mov.w	r3, #0
 8001b7e:	00cb      	lsls	r3, r1, #3
 8001b80:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001b84:	00c2      	lsls	r2, r0, #3
 8001b86:	4623      	mov	r3, r4
 8001b88:	3307      	adds	r3, #7
 8001b8a:	08db      	lsrs	r3, r3, #3
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	ebad 0d03 	sub.w	sp, sp, r3
 8001b92:	466b      	mov	r3, sp
 8001b94:	3300      	adds	r3, #0
 8001b96:	60bb      	str	r3, [r7, #8]

	out_lenght = 0;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	613b      	str	r3, [r7, #16]
	for (int32_t i = 0; i < (in_lenght - 1); i++) {
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]
 8001ba0:	e017      	b.n	8001bd2 <unPackPayload+0xbe>
		if ( (START_CHAR == message_buff[i]) ||	(END_CHAR == message_buff[i]) ) {
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	2b28      	cmp	r3, #40	; 0x28
 8001bac:	d00e      	beq.n	8001bcc <unPackPayload+0xb8>
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	2b29      	cmp	r3, #41	; 0x29
 8001bb8:	d008      	beq.n	8001bcc <unPackPayload+0xb8>
			;
//		} else if ( (ADD_CHAR == message_buff[i]) ) {
//			temp_buff[out_lenght++] = message_buff[++i] ^ XOR_CHAR;
		}
		else {
			temp_buff[out_lenght++] = message_buff[i];
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	441a      	add	r2, r3
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	1c59      	adds	r1, r3, #1
 8001bc4:	6139      	str	r1, [r7, #16]
 8001bc6:	7811      	ldrb	r1, [r2, #0]
 8001bc8:	68ba      	ldr	r2, [r7, #8]
 8001bca:	54d1      	strb	r1, [r2, r3]
	for (int32_t i = 0; i < (in_lenght - 1); i++) {
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	617b      	str	r3, [r7, #20]
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	697a      	ldr	r2, [r7, #20]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	dbe2      	blt.n	8001ba2 <unPackPayload+0x8e>
		}
	}
	memset((uint8_t*)message_buff, 0, in_lenght);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	461a      	mov	r2, r3
 8001be0:	2100      	movs	r1, #0
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f014 f8bc 	bl	8015d60 <memset>
	memmove(message_buff, temp_buff, out_lenght);
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	4619      	mov	r1, r3
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f014 f89c 	bl	8015d2c <memmove>

	return out_lenght;
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	46ad      	mov	sp, r5
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3718      	adds	r7, #24
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bdb0      	pop	{r4, r5, r7, pc}

08001c00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	607b      	str	r3, [r7, #4]
 8001c0a:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <MX_DMA_Init+0x3c>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	4a0b      	ldr	r2, [pc, #44]	; (8001c3c <MX_DMA_Init+0x3c>)
 8001c10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c14:	6313      	str	r3, [r2, #48]	; 0x30
 8001c16:	4b09      	ldr	r3, [pc, #36]	; (8001c3c <MX_DMA_Init+0x3c>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c1e:	607b      	str	r3, [r7, #4]
 8001c20:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8001c22:	2200      	movs	r2, #0
 8001c24:	2105      	movs	r1, #5
 8001c26:	200f      	movs	r0, #15
 8001c28:	f009 fd14 	bl	800b654 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001c2c:	200f      	movs	r0, #15
 8001c2e:	f009 fd2d 	bl	800b68c <HAL_NVIC_EnableIRQ>

}
 8001c32:	bf00      	nop
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40023800 	.word	0x40023800

08001c40 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	4a07      	ldr	r2, [pc, #28]	; (8001c6c <vApplicationGetIdleTaskMemory+0x2c>)
 8001c50:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	4a06      	ldr	r2, [pc, #24]	; (8001c70 <vApplicationGetIdleTaskMemory+0x30>)
 8001c56:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c5e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8001c60:	bf00      	nop
 8001c62:	3714      	adds	r7, #20
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	20000bb0 	.word	0x20000bb0
 8001c70:	20000c04 	.word	0x20000c04

08001c74 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001c74:	b5b0      	push	{r4, r5, r7, lr}
 8001c76:	b094      	sub	sp, #80	; 0x50
 8001c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
       
  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of usbTxMutex */
  osMutexDef(usbTxMutex);
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c7e:	2300      	movs	r3, #0
 8001c80:	64fb      	str	r3, [r7, #76]	; 0x4c
  usbTxMutexHandle = osMutexCreate(osMutex(usbTxMutex));
 8001c82:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c86:	4618      	mov	r0, r3
 8001c88:	f010 fd44 	bl	8012714 <osMutexCreate>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	4a1d      	ldr	r2, [pc, #116]	; (8001d04 <MX_FREERTOS_Init+0x90>)
 8001c90:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	  /* Create the queue(s) */
	  /* definition and creation of commandMail */
	  osMailQDef(commandMail, 1, DUTY_Command_TypeDef);
 8001c92:	2301      	movs	r3, #1
 8001c94:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c96:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c9c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ca0:	643b      	str	r3, [r7, #64]	; 0x40
	  commandMailHandle = osMailCreate(osMailQ(commandMail), NULL);
 8001ca2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f010 fe4b 	bl	8012944 <osMailCreate>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	4a15      	ldr	r2, [pc, #84]	; (8001d08 <MX_FREERTOS_Init+0x94>)
 8001cb2:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityHigh, 0, 2048);
 8001cb4:	4b15      	ldr	r3, [pc, #84]	; (8001d0c <MX_FREERTOS_Init+0x98>)
 8001cb6:	f107 041c 	add.w	r4, r7, #28
 8001cba:	461d      	mov	r5, r3
 8001cbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cc0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001cc4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001cc8:	f107 031c 	add.w	r3, r7, #28
 8001ccc:	2100      	movs	r1, #0
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f010 fc33 	bl	801253a <osThreadCreate>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	4a0e      	ldr	r2, [pc, #56]	; (8001d10 <MX_FREERTOS_Init+0x9c>)
 8001cd8:	6013      	str	r3, [r2, #0]

  /* definition and creation of USB_RX_Check_ */
  osThreadDef(USB_RX_Check_, Start_USB_RX_Task, osPriorityNormal, 0, 1024);
 8001cda:	4b0e      	ldr	r3, [pc, #56]	; (8001d14 <MX_FREERTOS_Init+0xa0>)
 8001cdc:	463c      	mov	r4, r7
 8001cde:	461d      	mov	r5, r3
 8001ce0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ce2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ce4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ce8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  USB_RX_Check_Handle = osThreadCreate(osThread(USB_RX_Check_), NULL);
 8001cec:	463b      	mov	r3, r7
 8001cee:	2100      	movs	r1, #0
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f010 fc22 	bl	801253a <osThreadCreate>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	4a07      	ldr	r2, [pc, #28]	; (8001d18 <MX_FREERTOS_Init+0xa4>)
 8001cfa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001cfc:	bf00      	nop
 8001cfe:	3750      	adds	r7, #80	; 0x50
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bdb0      	pop	{r4, r5, r7, pc}
 8001d04:	20004e70 	.word	0x20004e70
 8001d08:	20004e74 	.word	0x20004e74
 8001d0c:	0801bfec 	.word	0x0801bfec
 8001d10:	20004e6c 	.word	0x20004e6c
 8001d14:	0801c008 	.word	0x0801c008
 8001d18:	20004e78 	.word	0x20004e78
 8001d1c:	00000000 	.word	0x00000000

08001d20 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d22:	f6ad 6dec 	subw	sp, sp, #3820	; 0xeec
 8001d26:	af6c      	add	r7, sp, #432	; 0x1b0
 8001d28:	f107 0314 	add.w	r3, r7, #20
 8001d2c:	6018      	str	r0, [r3, #0]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001d2e:	f013 fa65 	bl	80151fc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  HAL_GPIO_WritePin(USB_SIGN_GPIO_Port, USB_SIGN_Pin, GPIO_PIN_SET); // Pull-up Resistor
 8001d32:	2201      	movs	r2, #1
 8001d34:	2110      	movs	r1, #16
 8001d36:	48d8      	ldr	r0, [pc, #864]	; (8002098 <StartDefaultTask+0x378>)
 8001d38:	f00a f9f2 	bl	800c120 <HAL_GPIO_WritePin>

  osEvent 				ret_mail;
  DUTY_Command_TypeDef 	duty_cmd;
  DUTY_Command_TypeDef 	*dataMail;
  uint8_t 				isNewDuty = FALSE;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	f887 3d37 	strb.w	r3, [r7, #3383]	; 0xd37
  int32_t					current_key_speed;
  double						run_time;

  SCARA_Pick_And_Place_Package Object[8];
  SCARA_Pick_And_Place_State  operation_state;
  uint8_t object_tail_pointer = 0;
 8001d42:	2300      	movs	r3, #0
 8001d44:	f887 3d16 	strb.w	r3, [r7, #3350]	; 0xd16
  uint8_t object_head_pointer = 0;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	f887 3d15 	strb.w	r3, [r7, #3349]	; 0xd15
  double state_time = 0;
 8001d4e:	f04f 0200 	mov.w	r2, #0
 8001d52:	f04f 0300 	mov.w	r3, #0
 8001d56:	f607 5108 	addw	r1, r7, #3336	; 0xd08
 8001d5a:	e9c1 2300 	strd	r2, r3, [r1]
  const SCARA_Slot_TypeDef SLot_Cordinate[NUM_OF_OBJECT] = {
 8001d5e:	f107 0318 	add.w	r3, r7, #24
 8001d62:	4ace      	ldr	r2, [pc, #824]	; (800209c <StartDefaultTask+0x37c>)
 8001d64:	4618      	mov	r0, r3
 8001d66:	4611      	mov	r1, r2
 8001d68:	2390      	movs	r3, #144	; 0x90
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	f013 ffd0 	bl	8015d10 <memcpy>
  		{203.859f, -101.616f, 0.0f} ,
		{203.859f, -101.616f, 0.0f} ,
		{203.859f, -101.616f, 0.0f}
  };

  LOG_REPORT("free_rtos.c: PROGRAM START...", __LINE__);
 8001d70:	21e2      	movs	r1, #226	; 0xe2
 8001d72:	48cb      	ldr	r0, [pc, #812]	; (80020a0 <StartDefaultTask+0x380>)
 8001d74:	f7ff fe88 	bl	8001a88 <LOG_REPORT>

  // Init value
  current_method = scaraGetMethod();
 8001d78:	f008 fbac 	bl	800a4d4 <scaraGetMethod>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	f887 3d2f 	strb.w	r3, [r7, #3375]	; 0xd2f
  current_mode	 = scaraGetMode();
 8001d82:	f008 fb9b 	bl	800a4bc <scaraGetMode>
 8001d86:	4603      	mov	r3, r0
 8001d88:	f887 3d2e 	strb.w	r3, [r7, #3374]	; 0xd2e
  current_duty_state	 = scaraGetDutyState();
 8001d8c:	f008 fbae 	bl	800a4ec <scaraGetDutyState>
 8001d90:	4603      	mov	r3, r0
 8001d92:	f887 3d2d 	strb.w	r3, [r7, #3373]	; 0xd2d

  // Start up robot
  scaraStartup();
 8001d96:	f003 f953 	bl	8005040 <scaraStartup>
  osDelay(10);
 8001d9a:	200a      	movs	r0, #10
 8001d9c:	f010 fc19 	bl	80125d2 <osDelay>
//   positionNext.Theta2 = PI/3;
//   positionNext.D3 = 10;
//   positionNext.Theta4 = 0;
//   positionNext.t = 0;

  positionNext.Theta1 = -1.48267f;
 8001da0:	49c0      	ldr	r1, [pc, #768]	; (80020a4 <StartDefaultTask+0x384>)
 8001da2:	a3b5      	add	r3, pc, #724	; (adr r3, 8002078 <StartDefaultTask+0x358>)
 8001da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da8:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
  positionNext.Theta2 = 2.35575f;
 8001dac:	49bd      	ldr	r1, [pc, #756]	; (80020a4 <StartDefaultTask+0x384>)
 8001dae:	a3b4      	add	r3, pc, #720	; (adr r3, 8002080 <StartDefaultTask+0x360>)
 8001db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db4:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
  positionNext.D3 = 0.034999;
 8001db8:	49ba      	ldr	r1, [pc, #744]	; (80020a4 <StartDefaultTask+0x384>)
 8001dba:	a3b3      	add	r3, pc, #716	; (adr r3, 8002088 <StartDefaultTask+0x368>)
 8001dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc0:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
  positionNext.Theta4 = 2.96586;
 8001dc4:	49b7      	ldr	r1, [pc, #732]	; (80020a4 <StartDefaultTask+0x384>)
 8001dc6:	a3b2      	add	r3, pc, #712	; (adr r3, 8002090 <StartDefaultTask+0x370>)
 8001dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dcc:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
  positionNext.t = 0;
 8001dd0:	49b4      	ldr	r1, [pc, #720]	; (80020a4 <StartDefaultTask+0x384>)
 8001dd2:	f04f 0200 	mov.w	r2, #0
 8001dd6:	f04f 0300 	mov.w	r3, #0
 8001dda:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

  kinematicForward(&positionNext);
 8001dde:	48b1      	ldr	r0, [pc, #708]	; (80020a4 <StartDefaultTask+0x384>)
 8001de0:	f001 fd3e 	bl	8003860 <kinematicForward>
  /* Infinite loop */
//Start Timer 7
	  HAL_TIM_Base_Start_IT(&htim7);
 8001de4:	48b0      	ldr	r0, [pc, #704]	; (80020a8 <StartDefaultTask+0x388>)
 8001de6:	f00c f858 	bl	800de9a <HAL_TIM_Base_Start_IT>

  for(;;)
  {
	  /*---------Wait for Timer Trigger-----------*/
	  osSignalWait(0x01, osWaitForever); // Very Important
 8001dea:	463b      	mov	r3, r7
 8001dec:	f04f 32ff 	mov.w	r2, #4294967295
 8001df0:	2101      	movs	r1, #1
 8001df2:	4618      	mov	r0, r3
 8001df4:	f010 fc42 	bl	801267c <osSignalWait>
	  /* 1--- Reset Value ---*/
	  respond_lenght		= 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	f8c7 3d00 	str.w	r3, [r7, #3328]	; 0xd00
	  respond_packed_lenght = 0;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	f8c7 3cfc 	str.w	r3, [r7, #3324]	; 0xcfc
	  infor_lenght			= 0;
 8001e04:	2300      	movs	r3, #0
 8001e06:	f8c7 3cf8 	str.w	r3, [r7, #3320]	; 0xcf8
	  infor_packed_lenght	= 0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	f8c7 3cf4 	str.w	r3, [r7, #3316]	; 0xcf4
	  task_usb_lenght		= 0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	f8c7 3cf0 	str.w	r3, [r7, #3312]	; 0xcf0
	  usb_lenght			= 0;
 8001e16:	2300      	movs	r3, #0
 8001e18:	f8c7 3cec 	str.w	r3, [r7, #3308]	; 0xcec
	  total_respond_length  = 0;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	f8c7 3d30 	str.w	r3, [r7, #3376]	; 0xd30
	  detail_ptr 			= 0;
 8001e22:	2300      	movs	r3, #0
 8001e24:	f8c7 3ce8 	str.w	r3, [r7, #3304]	; 0xce8
	  // Update new position
	  memcpy(&positionPrevios, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 8001e28:	4aa0      	ldr	r2, [pc, #640]	; (80020ac <StartDefaultTask+0x38c>)
 8001e2a:	4ba1      	ldr	r3, [pc, #644]	; (80020b0 <StartDefaultTask+0x390>)
 8001e2c:	4610      	mov	r0, r2
 8001e2e:	4619      	mov	r1, r3
 8001e30:	23c0      	movs	r3, #192	; 0xc0
 8001e32:	461a      	mov	r2, r3
 8001e34:	f013 ff6c 	bl	8015d10 <memcpy>
	  memcpy(&positionCurrent, &positionNext, sizeof(SCARA_PositionTypeDef));
 8001e38:	4a9d      	ldr	r2, [pc, #628]	; (80020b0 <StartDefaultTask+0x390>)
 8001e3a:	4b9a      	ldr	r3, [pc, #616]	; (80020a4 <StartDefaultTask+0x384>)
 8001e3c:	4610      	mov	r0, r2
 8001e3e:	4619      	mov	r1, r3
 8001e40:	23c0      	movs	r3, #192	; 0xc0
 8001e42:	461a      	mov	r2, r3
 8001e44:	f013 ff64 	bl	8015d10 <memcpy>
//		  positionTrue.q = positionCurrent.q;
//	  }
//#endif
	  /* 2--- Check New Duty Phase ---*/
	  // Check mail
	  ret_mail = osMailGet(commandMailHandle, 0);
 8001e48:	4b9a      	ldr	r3, [pc, #616]	; (80020b4 <StartDefaultTask+0x394>)
 8001e4a:	6819      	ldr	r1, [r3, #0]
 8001e4c:	f607 43c4 	addw	r3, r7, #3268	; 0xcc4
 8001e50:	2200      	movs	r2, #0
 8001e52:	4618      	mov	r0, r3
 8001e54:	f010 fe22 	bl	8012a9c <osMailGet>
	  if ( ret_mail.status == osEventMail) {
 8001e58:	f8d7 3cc4 	ldr.w	r3, [r7, #3268]	; 0xcc4
 8001e5c:	2b20      	cmp	r3, #32
 8001e5e:	d116      	bne.n	8001e8e <StartDefaultTask+0x16e>
		   dataMail = ret_mail.value.p;
 8001e60:	f8d7 3cc8 	ldr.w	r3, [r7, #3272]	; 0xcc8
 8001e64:	f8c7 3ce4 	str.w	r3, [r7, #3300]	; 0xce4
		   memcpy( &duty_cmd, dataMail, sizeof(DUTY_Command_TypeDef));
 8001e68:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8001e6c:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8001e70:	f8d7 1ce4 	ldr.w	r1, [r7, #3300]	; 0xce4
 8001e74:	4618      	mov	r0, r3
 8001e76:	f013 ff4b 	bl	8015d10 <memcpy>
		   isNewDuty = TRUE;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	f887 3d37 	strb.w	r3, [r7, #3383]	; 0xd37
		   osMailFree(commandMailHandle, dataMail);/* free memory allocated for mail */
 8001e80:	4b8c      	ldr	r3, [pc, #560]	; (80020b4 <StartDefaultTask+0x394>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f8d7 1ce4 	ldr.w	r1, [r7, #3300]	; 0xce4
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f010 fe7b 	bl	8012b84 <osMailFree>
	  }
	  if(isNewDuty) {
 8001e8e:	f897 3d37 	ldrb.w	r3, [r7, #3383]	; 0xd37
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f000 8328 	beq.w	80024e8 <StartDefaultTask+0x7c8>
		  //memset(respond, 0, 40);
		  // Check change method
		  if (duty_cmd.change_method == TRUE) {
 8001e98:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	f040 80cd 	bne.w	800203e <StartDefaultTask+0x31e>
			  //free(Object);
			  if (SCARA_METHOD_MANUAL == duty_cmd.robot_method) {
 8001ea4:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8001ea8:	785b      	ldrb	r3, [r3, #1]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d11f      	bne.n	8001eee <StartDefaultTask+0x1ce>
				  // Need add check condition idle in each method
				  current_method = SCARA_METHOD_MANUAL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	f887 3d2f 	strb.w	r3, [r7, #3375]	; 0xd2f
				//   respond_lenght = commandRespond(RPD_OK,
				// 								duty_cmd.id_command,
				// 								"Changed MANUAL Method",
				// 								(char *)respond);
				detail_array[0] = MANUAL_METHOD;
 8001eb4:	f607 1314 	addw	r3, r7, #2324	; 0x914
 8001eb8:	2218      	movs	r2, #24
 8001eba:	701a      	strb	r2, [r3, #0]
				respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8001ebc:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8001ec0:	6899      	ldr	r1, [r3, #8]
 8001ec2:	f607 22d4 	addw	r2, r7, #2772	; 0xad4
 8001ec6:	f8d7 3d30 	ldr.w	r3, [r7, #3376]	; 0xd30
 8001eca:	4413      	add	r3, r2
 8001ecc:	f607 1214 	addw	r2, r7, #2324	; 0x914
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	2008      	movs	r0, #8
 8001ed6:	f7ff fd87 	bl	80019e8 <commandRespond1>
 8001eda:	f8c7 0d00 	str.w	r0, [r7, #3328]	; 0xd00
				total_respond_length += respond_lenght;
 8001ede:	f8d7 2d30 	ldr.w	r2, [r7, #3376]	; 0xd30
 8001ee2:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8001ee6:	4413      	add	r3, r2
 8001ee8:	f8c7 3d30 	str.w	r3, [r7, #3376]	; 0xd30
 8001eec:	e2f9      	b.n	80024e2 <StartDefaultTask+0x7c2>
			  } else if (SCARA_METHOD_SEMI_AUTO == duty_cmd.robot_method) {
 8001eee:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8001ef2:	785b      	ldrb	r3, [r3, #1]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d11f      	bne.n	8001f38 <StartDefaultTask+0x218>
				  current_method = SCARA_METHOD_SEMI_AUTO;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	f887 3d2f 	strb.w	r3, [r7, #3375]	; 0xd2f
				//   respond_lenght = commandRespond(RPD_OK,
				// 								duty_cmd.id_command,
				// 								"Changed SEMI AUTO Method",
				// 								(char *)respond);
				detail_array[0] = SEMI_AUTO_METHOD;
 8001efe:	f607 1314 	addw	r3, r7, #2324	; 0x914
 8001f02:	2219      	movs	r2, #25
 8001f04:	701a      	strb	r2, [r3, #0]
				respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8001f06:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8001f0a:	6899      	ldr	r1, [r3, #8]
 8001f0c:	f607 22d4 	addw	r2, r7, #2772	; 0xad4
 8001f10:	f8d7 3d30 	ldr.w	r3, [r7, #3376]	; 0xd30
 8001f14:	4413      	add	r3, r2
 8001f16:	f607 1214 	addw	r2, r7, #2324	; 0x914
 8001f1a:	9300      	str	r3, [sp, #0]
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	2008      	movs	r0, #8
 8001f20:	f7ff fd62 	bl	80019e8 <commandRespond1>
 8001f24:	f8c7 0d00 	str.w	r0, [r7, #3328]	; 0xd00
				total_respond_length += respond_lenght;
 8001f28:	f8d7 2d30 	ldr.w	r2, [r7, #3376]	; 0xd30
 8001f2c:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8001f30:	4413      	add	r3, r2
 8001f32:	f8c7 3d30 	str.w	r3, [r7, #3376]	; 0xd30
 8001f36:	e2d4      	b.n	80024e2 <StartDefaultTask+0x7c2>
			  } else if (SCARA_METHOD_AUTO == duty_cmd.robot_method) {
 8001f38:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8001f3c:	785b      	ldrb	r3, [r3, #1]
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d11f      	bne.n	8001f82 <StartDefaultTask+0x262>
				  current_method = SCARA_METHOD_AUTO;
 8001f42:	2302      	movs	r3, #2
 8001f44:	f887 3d2f 	strb.w	r3, [r7, #3375]	; 0xd2f
				//   respond_lenght = commandRespond(RPD_OK,
				// 								duty_cmd.id_command,
				// 								"Changed AUTO Method",
				// 								(char *)respond);
				detail_array[0] = AUTO_METHOD;
 8001f48:	f607 1314 	addw	r3, r7, #2324	; 0x914
 8001f4c:	221a      	movs	r2, #26
 8001f4e:	701a      	strb	r2, [r3, #0]
				respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8001f50:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8001f54:	6899      	ldr	r1, [r3, #8]
 8001f56:	f607 22d4 	addw	r2, r7, #2772	; 0xad4
 8001f5a:	f8d7 3d30 	ldr.w	r3, [r7, #3376]	; 0xd30
 8001f5e:	4413      	add	r3, r2
 8001f60:	f607 1214 	addw	r2, r7, #2324	; 0x914
 8001f64:	9300      	str	r3, [sp, #0]
 8001f66:	2301      	movs	r3, #1
 8001f68:	2008      	movs	r0, #8
 8001f6a:	f7ff fd3d 	bl	80019e8 <commandRespond1>
 8001f6e:	f8c7 0d00 	str.w	r0, [r7, #3328]	; 0xd00
				total_respond_length += respond_lenght;
 8001f72:	f8d7 2d30 	ldr.w	r2, [r7, #3376]	; 0xd30
 8001f76:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8001f7a:	4413      	add	r3, r2
 8001f7c:	f8c7 3d30 	str.w	r3, [r7, #3376]	; 0xd30
 8001f80:	e2af      	b.n	80024e2 <StartDefaultTask+0x7c2>
			  }else if(SCARA_METHOD_TEST == duty_cmd.robot_method){
 8001f82:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8001f86:	785b      	ldrb	r3, [r3, #1]
 8001f88:	2b03      	cmp	r3, #3
 8001f8a:	d12f      	bne.n	8001fec <StartDefaultTask+0x2cc>
				  test_value[0] = 0;
 8001f8c:	f607 23fc 	addw	r3, r7, #2812	; 0xafc
 8001f90:	2200      	movs	r2, #0
 8001f92:	701a      	strb	r2, [r3, #0]
				  test_value[1] = 0;
 8001f94:	f607 23fc 	addw	r3, r7, #2812	; 0xafc
 8001f98:	2200      	movs	r2, #0
 8001f9a:	705a      	strb	r2, [r3, #1]
				  test_value[2] = 0;
 8001f9c:	f607 23fc 	addw	r3, r7, #2812	; 0xafc
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	709a      	strb	r2, [r3, #2]
				  test_value[3] = 0;
 8001fa4:	f607 23fc 	addw	r3, r7, #2812	; 0xafc
 8001fa8:	2200      	movs	r2, #0
 8001faa:	70da      	strb	r2, [r3, #3]
				  current_method = SCARA_METHOD_TEST;
 8001fac:	2303      	movs	r3, #3
 8001fae:	f887 3d2f 	strb.w	r3, [r7, #3375]	; 0xd2f
				  detail_array[0] = TEST_METHOD;
 8001fb2:	f607 1314 	addw	r3, r7, #2324	; 0x914
 8001fb6:	221b      	movs	r2, #27
 8001fb8:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8001fba:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8001fbe:	6899      	ldr	r1, [r3, #8]
 8001fc0:	f607 22d4 	addw	r2, r7, #2772	; 0xad4
 8001fc4:	f8d7 3d30 	ldr.w	r3, [r7, #3376]	; 0xd30
 8001fc8:	4413      	add	r3, r2
 8001fca:	f607 1214 	addw	r2, r7, #2324	; 0x914
 8001fce:	9300      	str	r3, [sp, #0]
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	2008      	movs	r0, #8
 8001fd4:	f7ff fd08 	bl	80019e8 <commandRespond1>
 8001fd8:	f8c7 0d00 	str.w	r0, [r7, #3328]	; 0xd00
				  total_respond_length += respond_lenght;
 8001fdc:	f8d7 2d30 	ldr.w	r2, [r7, #3376]	; 0xd30
 8001fe0:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f8c7 3d30 	str.w	r3, [r7, #3376]	; 0xd30
 8001fea:	e27a      	b.n	80024e2 <StartDefaultTask+0x7c2>
			  }else if(SCARA_METHOD_PICK_AND_PLACE == duty_cmd.robot_method){
 8001fec:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8001ff0:	785b      	ldrb	r3, [r3, #1]
 8001ff2:	2b04      	cmp	r3, #4
 8001ff4:	f040 8275 	bne.w	80024e2 <StartDefaultTask+0x7c2>
				  current_method = SCARA_METHOD_PICK_AND_PLACE;
 8001ff8:	2304      	movs	r3, #4
 8001ffa:	f887 3d2f 	strb.w	r3, [r7, #3375]	; 0xd2f
				  current_duty_state = SCARA_DUTY_STATE_INIT;
 8001ffe:	2301      	movs	r3, #1
 8002000:	f887 3d2d 	strb.w	r3, [r7, #3373]	; 0xd2d
				  detail_array[0] = PICK_AND_PLACE_METHOD;
 8002004:	f607 1314 	addw	r3, r7, #2324	; 0x914
 8002008:	221c      	movs	r2, #28
 800200a:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800200c:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8002010:	6899      	ldr	r1, [r3, #8]
 8002012:	f607 22d4 	addw	r2, r7, #2772	; 0xad4
 8002016:	f8d7 3d30 	ldr.w	r3, [r7, #3376]	; 0xd30
 800201a:	4413      	add	r3, r2
 800201c:	f607 1214 	addw	r2, r7, #2324	; 0x914
 8002020:	9300      	str	r3, [sp, #0]
 8002022:	2301      	movs	r3, #1
 8002024:	2008      	movs	r0, #8
 8002026:	f7ff fcdf 	bl	80019e8 <commandRespond1>
 800202a:	f8c7 0d00 	str.w	r0, [r7, #3328]	; 0xd00
				  total_respond_length += respond_lenght;
 800202e:	f8d7 2d30 	ldr.w	r2, [r7, #3376]	; 0xd30
 8002032:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8002036:	4413      	add	r3, r2
 8002038:	f8c7 3d30 	str.w	r3, [r7, #3376]	; 0xd30
 800203c:	e251      	b.n	80024e2 <StartDefaultTask+0x7c2>
			  }
		  } else {
			  	  // Check current method & cmd method
			  	  if (current_method == duty_cmd.robot_method) {
 800203e:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8002042:	785b      	ldrb	r3, [r3, #1]
 8002044:	f897 2d2f 	ldrb.w	r2, [r7, #3375]	; 0xd2f
 8002048:	429a      	cmp	r2, r3
 800204a:	f040 821e 	bne.w	800248a <StartDefaultTask+0x76a>
				  	  switch( duty_cmd.robot_method) {
 800204e:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8002052:	785b      	ldrb	r3, [r3, #1]
 8002054:	2b04      	cmp	r3, #4
 8002056:	f200 8212 	bhi.w	800247e <StartDefaultTask+0x75e>
 800205a:	a201      	add	r2, pc, #4	; (adr r2, 8002060 <StartDefaultTask+0x340>)
 800205c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002060:	080020b9 	.word	0x080020b9
 8002064:	0800210f 	.word	0x0800210f
 8002068:	080024c5 	.word	0x080024c5
 800206c:	080022cd 	.word	0x080022cd
 8002070:	080023e5 	.word	0x080023e5
 8002074:	f3af 8000 	nop.w
 8002078:	20000000 	.word	0x20000000
 800207c:	bff7b904 	.word	0xbff7b904
 8002080:	80000000 	.word	0x80000000
 8002084:	4002d893 	.word	0x4002d893
 8002088:	90c91080 	.word	0x90c91080
 800208c:	3fa1eb63 	.word	0x3fa1eb63
 8002090:	cec41dd2 	.word	0xcec41dd2
 8002094:	4007ba14 	.word	0x4007ba14
 8002098:	40020400 	.word	0x40020400
 800209c:	0801c108 	.word	0x0801c108
 80020a0:	0801c024 	.word	0x0801c024
 80020a4:	20005c70 	.word	0x20005c70
 80020a8:	20005db0 	.word	0x20005db0
 80020ac:	20005970 	.word	0x20005970
 80020b0:	20005af0 	.word	0x20005af0
 80020b4:	20004e74 	.word	0x20004e74
				  	  case SCARA_METHOD_MANUAL:
				  	  {
				  		  if (current_key_state == SCARA_KEY_STATE_READY) {
 80020b8:	f897 3d2b 	ldrb.w	r3, [r7, #3371]	; 0xd2b
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d10d      	bne.n	80020dc <StartDefaultTask+0x3bc>
				  			  current_key = duty_cmd.keyboard;
 80020c0:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80020c4:	78db      	ldrb	r3, [r3, #3]
 80020c6:	f887 3d2a 	strb.w	r3, [r7, #3370]	; 0xd2a
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Init new path
 80020ca:	2301      	movs	r3, #1
 80020cc:	f887 3d2b 	strb.w	r3, [r7, #3371]	; 0xd2b
				  			  current_key_speed = duty_cmd.key_speed;
 80020d0:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f8c7 3d24 	str.w	r3, [r7, #3364]	; 0xd24
				  				  	  && current_key_state == SCARA_KEY_STATE_FLOW
									  && current_key_speed == duty_cmd.key_speed) {
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Continue old path
				  		  }
				  	  }
				  	  break;
 80020da:	e201      	b.n	80024e0 <StartDefaultTask+0x7c0>
				  		  } else if (current_key == duty_cmd.keyboard
 80020dc:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80020e0:	78db      	ldrb	r3, [r3, #3]
 80020e2:	f897 2d2a 	ldrb.w	r2, [r7, #3370]	; 0xd2a
 80020e6:	429a      	cmp	r2, r3
 80020e8:	f040 81fa 	bne.w	80024e0 <StartDefaultTask+0x7c0>
				  				  	  && current_key_state == SCARA_KEY_STATE_FLOW
 80020ec:	f897 3d2b 	ldrb.w	r3, [r7, #3371]	; 0xd2b
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	f040 81f5 	bne.w	80024e0 <StartDefaultTask+0x7c0>
									  && current_key_speed == duty_cmd.key_speed) {
 80020f6:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f8d7 2d24 	ldr.w	r2, [r7, #3364]	; 0xd24
 8002100:	429a      	cmp	r2, r3
 8002102:	f040 81ed 	bne.w	80024e0 <StartDefaultTask+0x7c0>
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Continue old path
 8002106:	2301      	movs	r3, #1
 8002108:	f887 3d2b 	strb.w	r3, [r7, #3371]	; 0xd2b
				  	  break;
 800210c:	e1e8      	b.n	80024e0 <StartDefaultTask+0x7c0>
				  	  case SCARA_METHOD_SEMI_AUTO:
				  	  {
						  switch( duty_cmd.robot_mode) {
 800210e:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8002112:	789b      	ldrb	r3, [r3, #2]
 8002114:	2b02      	cmp	r3, #2
 8002116:	d079      	beq.n	800220c <StartDefaultTask+0x4ec>
 8002118:	2b02      	cmp	r3, #2
 800211a:	f300 80d0 	bgt.w	80022be <StartDefaultTask+0x59e>
 800211e:	2b00      	cmp	r3, #0
 8002120:	d002      	beq.n	8002128 <StartDefaultTask+0x408>
 8002122:	2b01      	cmp	r3, #1
 8002124:	d025      	beq.n	8002172 <StartDefaultTask+0x452>
 8002126:	e0ca      	b.n	80022be <StartDefaultTask+0x59e>
						  case SCARA_MODE_STOP:
							  {
								  current_mode	 = SCARA_MODE_STOP;
 8002128:	2300      	movs	r3, #0
 800212a:	f887 3d2e 	strb.w	r3, [r7, #3374]	; 0xd2e
								//   respond_lenght = commandRespond(RPD_OK,
								// 								  duty_cmd.id_command,
								// 								  "Stop Now",
								// 								  (char *)respond);
								detail_array[0] = STOP_NOW;
 800212e:	f607 1314 	addw	r3, r7, #2324	; 0x914
 8002132:	221e      	movs	r2, #30
 8002134:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002136:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 800213a:	6899      	ldr	r1, [r3, #8]
 800213c:	f607 22d4 	addw	r2, r7, #2772	; 0xad4
 8002140:	f8d7 3d30 	ldr.w	r3, [r7, #3376]	; 0xd30
 8002144:	4413      	add	r3, r2
 8002146:	f607 1214 	addw	r2, r7, #2324	; 0x914
 800214a:	9300      	str	r3, [sp, #0]
 800214c:	2301      	movs	r3, #1
 800214e:	2008      	movs	r0, #8
 8002150:	f7ff fc4a 	bl	80019e8 <commandRespond1>
 8002154:	f8c7 0d00 	str.w	r0, [r7, #3328]	; 0xd00
								total_respond_length += respond_lenght;
 8002158:	f8d7 2d30 	ldr.w	r2, [r7, #3376]	; 0xd30
 800215c:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8002160:	4413      	add	r3, r2
 8002162:	f8c7 3d30 	str.w	r3, [r7, #3376]	; 0xd30
								  LOG_REPORT("ROBOT STOP !!!", __LINE__);
 8002166:	f240 116f 	movw	r1, #367	; 0x16f
 800216a:	48d7      	ldr	r0, [pc, #860]	; (80024c8 <StartDefaultTask+0x7a8>)
 800216c:	f7ff fc8c 	bl	8001a88 <LOG_REPORT>
							  }
							  break;
 8002170:	e0ab      	b.n	80022ca <StartDefaultTask+0x5aa>

						  case SCARA_MODE_SCAN:
							  {
								  if (SCARA_MODE_DUTY == current_mode
 8002172:	f897 3d2e 	ldrb.w	r3, [r7, #3374]	; 0xd2e
 8002176:	2b02      	cmp	r3, #2
 8002178:	d126      	bne.n	80021c8 <StartDefaultTask+0x4a8>
									  && SCARA_DUTY_STATE_READY == current_duty_state) {
 800217a:	f897 3d2d 	ldrb.w	r3, [r7, #3373]	; 0xd2d
 800217e:	2b00      	cmp	r3, #0
 8002180:	d122      	bne.n	80021c8 <StartDefaultTask+0x4a8>
									  current_mode = SCARA_MODE_SCAN;
 8002182:	2301      	movs	r3, #1
 8002184:	f887 3d2e 	strb.w	r3, [r7, #3374]	; 0xd2e
									  current_scan_state = SCARA_SCAN_STATE_INIT;
 8002188:	2300      	movs	r3, #0
 800218a:	f887 3d2c 	strb.w	r3, [r7, #3372]	; 0xd2c
									//   respond_lenght = commandRespond(RPD_OK,
									// 								  duty_cmd.id_command,
									// 								  "Start Scan",
									// 								  (char *)respond);
									detail_array[0] = START_SCAN;
 800218e:	f607 1314 	addw	r3, r7, #2324	; 0x914
 8002192:	221f      	movs	r2, #31
 8002194:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002196:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 800219a:	6899      	ldr	r1, [r3, #8]
 800219c:	f607 22d4 	addw	r2, r7, #2772	; 0xad4
 80021a0:	f8d7 3d30 	ldr.w	r3, [r7, #3376]	; 0xd30
 80021a4:	4413      	add	r3, r2
 80021a6:	f607 1214 	addw	r2, r7, #2324	; 0x914
 80021aa:	9300      	str	r3, [sp, #0]
 80021ac:	2301      	movs	r3, #1
 80021ae:	2008      	movs	r0, #8
 80021b0:	f7ff fc1a 	bl	80019e8 <commandRespond1>
 80021b4:	f8c7 0d00 	str.w	r0, [r7, #3328]	; 0xd00
									total_respond_length += respond_lenght;
 80021b8:	f8d7 2d30 	ldr.w	r2, [r7, #3376]	; 0xd30
 80021bc:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 80021c0:	4413      	add	r3, r2
 80021c2:	f8c7 3d30 	str.w	r3, [r7, #3376]	; 0xd30
									respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
									total_respond_length += respond_lenght;
									  LOG_REPORT("SCAN FAIL: BUSY", __LINE__);
								  }
							  }
							  break;
 80021c6:	e080      	b.n	80022ca <StartDefaultTask+0x5aa>
									detail_array[0] = BUSY;
 80021c8:	f607 1314 	addw	r3, r7, #2324	; 0x914
 80021cc:	2220      	movs	r2, #32
 80021ce:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80021d0:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80021d4:	6899      	ldr	r1, [r3, #8]
 80021d6:	f607 22d4 	addw	r2, r7, #2772	; 0xad4
 80021da:	f8d7 3d30 	ldr.w	r3, [r7, #3376]	; 0xd30
 80021de:	4413      	add	r3, r2
 80021e0:	f607 1214 	addw	r2, r7, #2324	; 0x914
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	2301      	movs	r3, #1
 80021e8:	2007      	movs	r0, #7
 80021ea:	f7ff fbfd 	bl	80019e8 <commandRespond1>
 80021ee:	f8c7 0d00 	str.w	r0, [r7, #3328]	; 0xd00
									total_respond_length += respond_lenght;
 80021f2:	f8d7 2d30 	ldr.w	r2, [r7, #3376]	; 0xd30
 80021f6:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 80021fa:	4413      	add	r3, r2
 80021fc:	f8c7 3d30 	str.w	r3, [r7, #3376]	; 0xd30
									  LOG_REPORT("SCAN FAIL: BUSY", __LINE__);
 8002200:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8002204:	48b1      	ldr	r0, [pc, #708]	; (80024cc <StartDefaultTask+0x7ac>)
 8002206:	f7ff fc3f 	bl	8001a88 <LOG_REPORT>
							  break;
 800220a:	e05e      	b.n	80022ca <StartDefaultTask+0x5aa>

						  case SCARA_MODE_DUTY:
							  {
								  if (SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_duty_state) {
 800220c:	f897 3d2e 	ldrb.w	r3, [r7, #3374]	; 0xd2e
 8002210:	2b02      	cmp	r3, #2
 8002212:	d131      	bne.n	8002278 <StartDefaultTask+0x558>
 8002214:	f897 3d2d 	ldrb.w	r3, [r7, #3373]	; 0xd2d
 8002218:	2b00      	cmp	r3, #0
 800221a:	d12d      	bne.n	8002278 <StartDefaultTask+0x558>
									  //scaraSetScanFlag();
//									  if(duty_cmd.modeInit_type == DUTY_MODE_INIT_LINEAR){
//										  current_method = SCARA_METHOD_AUTO;
//									  }
									  if (scaraIsScanLimit()) {
 800221c:	f008 f972 	bl	800a504 <scaraIsScanLimit>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d006      	beq.n	8002234 <StartDefaultTask+0x514>
										  current_mode	 = SCARA_MODE_DUTY;
 8002226:	2302      	movs	r3, #2
 8002228:	f887 3d2e 	strb.w	r3, [r7, #3374]	; 0xd2e
										  current_duty_state	 = SCARA_DUTY_STATE_INIT;
 800222c:	2301      	movs	r3, #1
 800222e:	f887 3d2d 	strb.w	r3, [r7, #3373]	; 0xd2d
									  if (scaraIsScanLimit()) {
 8002232:	e043      	b.n	80022bc <StartDefaultTask+0x59c>
									  } else {
										//   respond_lenght = commandRespond(RPD_ERROR,
										// 								  duty_cmd.id_command,
										// 								  "Has Not Scan Yet.",
										// 								  (char *)respond);
										detail_array[0] = NOT_SCAN;
 8002234:	f607 1314 	addw	r3, r7, #2324	; 0x914
 8002238:	2221      	movs	r2, #33	; 0x21
 800223a:	701a      	strb	r2, [r3, #0]
										respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800223c:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8002240:	6899      	ldr	r1, [r3, #8]
 8002242:	f607 22d4 	addw	r2, r7, #2772	; 0xad4
 8002246:	f8d7 3d30 	ldr.w	r3, [r7, #3376]	; 0xd30
 800224a:	4413      	add	r3, r2
 800224c:	f607 1214 	addw	r2, r7, #2324	; 0x914
 8002250:	9300      	str	r3, [sp, #0]
 8002252:	2301      	movs	r3, #1
 8002254:	2007      	movs	r0, #7
 8002256:	f7ff fbc7 	bl	80019e8 <commandRespond1>
 800225a:	f8c7 0d00 	str.w	r0, [r7, #3328]	; 0xd00
										total_respond_length += respond_lenght;
 800225e:	f8d7 2d30 	ldr.w	r2, [r7, #3376]	; 0xd30
 8002262:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8002266:	4413      	add	r3, r2
 8002268:	f8c7 3d30 	str.w	r3, [r7, #3376]	; 0xd30
										  LOG_REPORT("MOVE FAIL:NOT SCAN", __LINE__);
 800226c:	f240 119f 	movw	r1, #415	; 0x19f
 8002270:	4897      	ldr	r0, [pc, #604]	; (80024d0 <StartDefaultTask+0x7b0>)
 8002272:	f7ff fc09 	bl	8001a88 <LOG_REPORT>
									  if (scaraIsScanLimit()) {
 8002276:	e021      	b.n	80022bc <StartDefaultTask+0x59c>
								  } else {
									//   respond_lenght	= commandRespond(RPD_ERROR,
									// 									  duty_cmd.id_command,
									// 									  "Busy.",
									// 									  (char *)respond);
									detail_array[0] = BUSY;
 8002278:	f607 1314 	addw	r3, r7, #2324	; 0x914
 800227c:	2220      	movs	r2, #32
 800227e:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002280:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8002284:	6899      	ldr	r1, [r3, #8]
 8002286:	f607 22d4 	addw	r2, r7, #2772	; 0xad4
 800228a:	f8d7 3d30 	ldr.w	r3, [r7, #3376]	; 0xd30
 800228e:	4413      	add	r3, r2
 8002290:	f607 1214 	addw	r2, r7, #2324	; 0x914
 8002294:	9300      	str	r3, [sp, #0]
 8002296:	2301      	movs	r3, #1
 8002298:	2007      	movs	r0, #7
 800229a:	f7ff fba5 	bl	80019e8 <commandRespond1>
 800229e:	f8c7 0d00 	str.w	r0, [r7, #3328]	; 0xd00
									total_respond_length += respond_lenght;
 80022a2:	f8d7 2d30 	ldr.w	r2, [r7, #3376]	; 0xd30
 80022a6:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 80022aa:	4413      	add	r3, r2
 80022ac:	f8c7 3d30 	str.w	r3, [r7, #3376]	; 0xd30
									  LOG_REPORT("MOVE FAIL:BUSY", __LINE__);
 80022b0:	f240 11a9 	movw	r1, #425	; 0x1a9
 80022b4:	4887      	ldr	r0, [pc, #540]	; (80024d4 <StartDefaultTask+0x7b4>)
 80022b6:	f7ff fbe7 	bl	8001a88 <LOG_REPORT>
								  }
							  }
							  break;
 80022ba:	e006      	b.n	80022ca <StartDefaultTask+0x5aa>
 80022bc:	e005      	b.n	80022ca <StartDefaultTask+0x5aa>
						  default:
							  {
								  LOG_REPORT("CMD Error Mode !!!", __LINE__);
 80022be:	f240 11af 	movw	r1, #431	; 0x1af
 80022c2:	4885      	ldr	r0, [pc, #532]	; (80024d8 <StartDefaultTask+0x7b8>)
 80022c4:	f7ff fbe0 	bl	8001a88 <LOG_REPORT>
							  }
						  }
					  }
					  break;
 80022c8:	e10b      	b.n	80024e2 <StartDefaultTask+0x7c2>
 80022ca:	e10a      	b.n	80024e2 <StartDefaultTask+0x7c2>
					  case SCARA_METHOD_TEST:
					  {
						  test_value[0] = 0;
 80022cc:	f607 23fc 	addw	r3, r7, #2812	; 0xafc
 80022d0:	2200      	movs	r2, #0
 80022d2:	701a      	strb	r2, [r3, #0]
						  test_value[1] = 0;
 80022d4:	f607 23fc 	addw	r3, r7, #2812	; 0xafc
 80022d8:	2200      	movs	r2, #0
 80022da:	705a      	strb	r2, [r3, #1]
						  test_value[2] = 0;
 80022dc:	f607 23fc 	addw	r3, r7, #2812	; 0xafc
 80022e0:	2200      	movs	r2, #0
 80022e2:	709a      	strb	r2, [r3, #2]
						  test_value[3] = 0;
 80022e4:	f607 23fc 	addw	r3, r7, #2812	; 0xafc
 80022e8:	2200      	movs	r2, #0
 80022ea:	70da      	strb	r2, [r3, #3]
						  switch (duty_cmd.test_key)
 80022ec:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80022f0:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 80022f4:	2b07      	cmp	r3, #7
 80022f6:	d873      	bhi.n	80023e0 <StartDefaultTask+0x6c0>
 80022f8:	a201      	add	r2, pc, #4	; (adr r2, 8002300 <StartDefaultTask+0x5e0>)
 80022fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022fe:	bf00      	nop
 8002300:	08002321 	.word	0x08002321
 8002304:	08002339 	.word	0x08002339
 8002308:	08002351 	.word	0x08002351
 800230c:	08002369 	.word	0x08002369
 8002310:	08002381 	.word	0x08002381
 8002314:	08002399 	.word	0x08002399
 8002318:	080023b1 	.word	0x080023b1
 800231c:	080023c9 	.word	0x080023c9
						  {
						  case SCARA_TEST_MOTOR1_POS:
							 test_value[duty_cmd.test_key/2] = 5;
 8002320:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8002324:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002328:	085b      	lsrs	r3, r3, #1
 800232a:	b2db      	uxtb	r3, r3
 800232c:	461a      	mov	r2, r3
 800232e:	f607 23fc 	addw	r3, r7, #2812	; 0xafc
 8002332:	2105      	movs	r1, #5
 8002334:	5499      	strb	r1, [r3, r2]
						  break;
 8002336:	e054      	b.n	80023e2 <StartDefaultTask+0x6c2>
						  case SCARA_TEST_MOTOR1_NEG:
							 test_value[duty_cmd.test_key/2] = -5;
 8002338:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 800233c:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002340:	085b      	lsrs	r3, r3, #1
 8002342:	b2db      	uxtb	r3, r3
 8002344:	461a      	mov	r2, r3
 8002346:	f607 23fc 	addw	r3, r7, #2812	; 0xafc
 800234a:	21fb      	movs	r1, #251	; 0xfb
 800234c:	5499      	strb	r1, [r3, r2]
						  break;
 800234e:	e048      	b.n	80023e2 <StartDefaultTask+0x6c2>
						  case SCARA_TEST_MOTOR2_POS:
							 test_value[duty_cmd.test_key/2] = 5;
 8002350:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8002354:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002358:	085b      	lsrs	r3, r3, #1
 800235a:	b2db      	uxtb	r3, r3
 800235c:	461a      	mov	r2, r3
 800235e:	f607 23fc 	addw	r3, r7, #2812	; 0xafc
 8002362:	2105      	movs	r1, #5
 8002364:	5499      	strb	r1, [r3, r2]
						  break;
 8002366:	e03c      	b.n	80023e2 <StartDefaultTask+0x6c2>
						  case SCARA_TEST_MOTOR2_NEG:
							 test_value[duty_cmd.test_key/2] = -5;
 8002368:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 800236c:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002370:	085b      	lsrs	r3, r3, #1
 8002372:	b2db      	uxtb	r3, r3
 8002374:	461a      	mov	r2, r3
 8002376:	f607 23fc 	addw	r3, r7, #2812	; 0xafc
 800237a:	21fb      	movs	r1, #251	; 0xfb
 800237c:	5499      	strb	r1, [r3, r2]
						  break;
 800237e:	e030      	b.n	80023e2 <StartDefaultTask+0x6c2>
						  case SCARA_TEST_MOTOR3_POS:
							 test_value[duty_cmd.test_key/2] = 5;
 8002380:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8002384:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002388:	085b      	lsrs	r3, r3, #1
 800238a:	b2db      	uxtb	r3, r3
 800238c:	461a      	mov	r2, r3
 800238e:	f607 23fc 	addw	r3, r7, #2812	; 0xafc
 8002392:	2105      	movs	r1, #5
 8002394:	5499      	strb	r1, [r3, r2]
						  break;
 8002396:	e024      	b.n	80023e2 <StartDefaultTask+0x6c2>
						  case SCARA_TEST_MOTOR3_NEG:
							 test_value[duty_cmd.test_key/2] = -5;
 8002398:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 800239c:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 80023a0:	085b      	lsrs	r3, r3, #1
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	461a      	mov	r2, r3
 80023a6:	f607 23fc 	addw	r3, r7, #2812	; 0xafc
 80023aa:	21fb      	movs	r1, #251	; 0xfb
 80023ac:	5499      	strb	r1, [r3, r2]
						  break;
 80023ae:	e018      	b.n	80023e2 <StartDefaultTask+0x6c2>
						  case SCARA_TEST_MOTOR4_POS:
							 test_value[duty_cmd.test_key/2] = 10;
 80023b0:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80023b4:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 80023b8:	085b      	lsrs	r3, r3, #1
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	461a      	mov	r2, r3
 80023be:	f607 23fc 	addw	r3, r7, #2812	; 0xafc
 80023c2:	210a      	movs	r1, #10
 80023c4:	5499      	strb	r1, [r3, r2]
						  break;
 80023c6:	e00c      	b.n	80023e2 <StartDefaultTask+0x6c2>
						  case SCARA_TEST_MOTOR4_NEG:
							 test_value[duty_cmd.test_key/2] = -10;
 80023c8:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80023cc:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 80023d0:	085b      	lsrs	r3, r3, #1
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	461a      	mov	r2, r3
 80023d6:	f607 23fc 	addw	r3, r7, #2812	; 0xafc
 80023da:	21f6      	movs	r1, #246	; 0xf6
 80023dc:	5499      	strb	r1, [r3, r2]
						  break;						  
 80023de:	e000      	b.n	80023e2 <StartDefaultTask+0x6c2>
						  default:
							  break;
 80023e0:	bf00      	nop
						  }
					  }
					  break;
 80023e2:	e07e      	b.n	80024e2 <StartDefaultTask+0x7c2>
				  	  {

				  	  }
				  	  break;
				  	  case SCARA_METHOD_PICK_AND_PLACE:{
				  		  memcpy(&Object[object_head_pointer].object_position, &duty_cmd.target_point, sizeof(SCARA_PositionTypeDef));
 80023e4:	f897 3d15 	ldrb.w	r3, [r7, #3349]	; 0xd15
 80023e8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80023ec:	21c8      	movs	r1, #200	; 0xc8
 80023ee:	fb01 f303 	mul.w	r3, r1, r3
 80023f2:	18d0      	adds	r0, r2, r3
 80023f4:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80023f8:	3328      	adds	r3, #40	; 0x28
 80023fa:	22c0      	movs	r2, #192	; 0xc0
 80023fc:	4619      	mov	r1, r3
 80023fe:	f013 fc87 	bl	8015d10 <memcpy>
				  		  Object[object_head_pointer].timer_value = (uint16_t)duty_cmd.target_point.t;
 8002402:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8002406:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800240a:	f897 4d15 	ldrb.w	r4, [r7, #3349]	; 0xd15
 800240e:	4610      	mov	r0, r2
 8002410:	4619      	mov	r1, r3
 8002412:	f7fe fbc9 	bl	8000ba8 <__aeabi_d2uiz>
 8002416:	4603      	mov	r3, r0
 8002418:	b299      	uxth	r1, r3
 800241a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800241e:	23c8      	movs	r3, #200	; 0xc8
 8002420:	fb03 f304 	mul.w	r3, r3, r4
 8002424:	4413      	add	r3, r2
 8002426:	33c0      	adds	r3, #192	; 0xc0
 8002428:	460a      	mov	r2, r1
 800242a:	801a      	strh	r2, [r3, #0]
				  		  object_head_pointer = (object_head_pointer+1)%8;
 800242c:	f897 3d15 	ldrb.w	r3, [r7, #3349]	; 0xd15
 8002430:	3301      	adds	r3, #1
 8002432:	425a      	negs	r2, r3
 8002434:	f003 0307 	and.w	r3, r3, #7
 8002438:	f002 0207 	and.w	r2, r2, #7
 800243c:	bf58      	it	pl
 800243e:	4253      	negpl	r3, r2
 8002440:	f887 3d15 	strb.w	r3, [r7, #3349]	; 0xd15
				  		  detail_array[0] = OBJECT_DETECTED;
 8002444:	f607 1314 	addw	r3, r7, #2324	; 0x914
 8002448:	221d      	movs	r2, #29
 800244a:	701a      	strb	r2, [r3, #0]
						  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800244c:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8002450:	6899      	ldr	r1, [r3, #8]
 8002452:	f607 22d4 	addw	r2, r7, #2772	; 0xad4
 8002456:	f8d7 3d30 	ldr.w	r3, [r7, #3376]	; 0xd30
 800245a:	4413      	add	r3, r2
 800245c:	f607 1214 	addw	r2, r7, #2324	; 0x914
 8002460:	9300      	str	r3, [sp, #0]
 8002462:	2301      	movs	r3, #1
 8002464:	2008      	movs	r0, #8
 8002466:	f7ff fabf 	bl	80019e8 <commandRespond1>
 800246a:	f8c7 0d00 	str.w	r0, [r7, #3328]	; 0xd00
						  total_respond_length += respond_lenght;
 800246e:	f8d7 2d30 	ldr.w	r2, [r7, #3376]	; 0xd30
 8002472:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8002476:	4413      	add	r3, r2
 8002478:	f8c7 3d30 	str.w	r3, [r7, #3376]	; 0xd30
				  	  }
				  	  break;
 800247c:	e031      	b.n	80024e2 <StartDefaultTask+0x7c2>
				  	  default:
				  	  {
				  		  LOG_REPORT("CMD Error Method !!!", __LINE__);
 800247e:	f240 11e9 	movw	r1, #489	; 0x1e9
 8002482:	4816      	ldr	r0, [pc, #88]	; (80024dc <StartDefaultTask+0x7bc>)
 8002484:	f7ff fb00 	bl	8001a88 <LOG_REPORT>
 8002488:	e02b      	b.n	80024e2 <StartDefaultTask+0x7c2>
			  	  } else {
					//   respond_lenght = commandRespond(RPD_ERROR,
					// 								duty_cmd.id_command,
					// 								"METHOD isn't correct",
					// 								(char *)respond);
					detail_array[0] = INCORRECT_METHOD;
 800248a:	f607 1314 	addw	r3, r7, #2324	; 0x914
 800248e:	2222      	movs	r2, #34	; 0x22
 8002490:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002492:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8002496:	6899      	ldr	r1, [r3, #8]
 8002498:	f607 22d4 	addw	r2, r7, #2772	; 0xad4
 800249c:	f8d7 3d30 	ldr.w	r3, [r7, #3376]	; 0xd30
 80024a0:	4413      	add	r3, r2
 80024a2:	f607 1214 	addw	r2, r7, #2324	; 0x914
 80024a6:	9300      	str	r3, [sp, #0]
 80024a8:	2301      	movs	r3, #1
 80024aa:	2007      	movs	r0, #7
 80024ac:	f7ff fa9c 	bl	80019e8 <commandRespond1>
 80024b0:	f8c7 0d00 	str.w	r0, [r7, #3328]	; 0xd00
					total_respond_length += respond_lenght;
 80024b4:	f8d7 2d30 	ldr.w	r2, [r7, #3376]	; 0xd30
 80024b8:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 80024bc:	4413      	add	r3, r2
 80024be:	f8c7 3d30 	str.w	r3, [r7, #3376]	; 0xd30
 80024c2:	e00e      	b.n	80024e2 <StartDefaultTask+0x7c2>
				  	  break;
 80024c4:	bf00      	nop
 80024c6:	e00c      	b.n	80024e2 <StartDefaultTask+0x7c2>
 80024c8:	0801c044 	.word	0x0801c044
 80024cc:	0801c054 	.word	0x0801c054
 80024d0:	0801c064 	.word	0x0801c064
 80024d4:	0801c078 	.word	0x0801c078
 80024d8:	0801c088 	.word	0x0801c088
 80024dc:	0801c09c 	.word	0x0801c09c
				  	  break;
 80024e0:	bf00      	nop
			  	  }

			  }
		  isNewDuty = FALSE;
 80024e2:	2300      	movs	r3, #0
 80024e4:	f887 3d37 	strb.w	r3, [r7, #3383]	; 0xd37
	  }

	  /* 3--- Execute Phase ---*/
	  switch(current_method) {
 80024e8:	f897 3d2f 	ldrb.w	r3, [r7, #3375]	; 0xd2f
 80024ec:	2b04      	cmp	r3, #4
 80024ee:	f200 86fc 	bhi.w	80032ea <StartDefaultTask+0x15ca>
 80024f2:	a201      	add	r2, pc, #4	; (adr r2, 80024f8 <StartDefaultTask+0x7d8>)
 80024f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024f8:	0800250d 	.word	0x0800250d
 80024fc:	080026bb 	.word	0x080026bb
 8002500:	08002aab 	.word	0x08002aab
 8002504:	08002d5f 	.word	0x08002d5f
 8002508:	08002d85 	.word	0x08002d85
	  case SCARA_METHOD_MANUAL:
	  {
		  switch( current_key_state) {
 800250c:	f897 3d2b 	ldrb.w	r3, [r7, #3371]	; 0xd2b
 8002510:	2b03      	cmp	r3, #3
 8002512:	f200 86e7 	bhi.w	80032e4 <StartDefaultTask+0x15c4>
 8002516:	a201      	add	r2, pc, #4	; (adr r2, 800251c <StartDefaultTask+0x7fc>)
 8002518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800251c:	080026b5 	.word	0x080026b5
 8002520:	0800252d 	.word	0x0800252d
 8002524:	0800259b 	.word	0x0800259b
 8002528:	08002677 	.word	0x08002677
		  case SCARA_KEY_STATE_READY:
			  /* Wait for application keyboard , do nothing*/
		  break;
		  case SCARA_KEY_STATE_INIT:
		  {
			  if (scaraKeyInit1(current_key, current_key_speed1) == SCARA_STATUS_OK) {
 800252c:	4ba6      	ldr	r3, [pc, #664]	; (80027c8 <StartDefaultTask+0xaa8>)
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	f897 3d2a 	ldrb.w	r3, [r7, #3370]	; 0xd2a
 8002534:	4611      	mov	r1, r2
 8002536:	4618      	mov	r0, r3
 8002538:	f008 f8fa 	bl	800a730 <scaraKeyInit1>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d127      	bne.n	8002592 <StartDefaultTask+0x872>
				  run_time = 0;
 8002542:	f04f 0200 	mov.w	r2, #0
 8002546:	f04f 0300 	mov.w	r3, #0
 800254a:	f607 5118 	addw	r1, r7, #3352	; 0xd18
 800254e:	e9c1 2300 	strd	r2, r3, [r1]
				  current_key_state = SCARA_KEY_STATE_FLOW;
 8002552:	2302      	movs	r3, #2
 8002554:	f887 3d2b 	strb.w	r3, [r7, #3371]	; 0xd2b
// #endif
// 				  infor_lenght 		= commandRespond(RPD_START,
// 													  0,
// 													  (char *)position,
// 													  (char *)infor);
					detail_array[0] = NONE;
 8002558:	f607 1314 	addw	r3, r7, #2324	; 0x914
 800255c:	2223      	movs	r2, #35	; 0x23
 800255e:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_START, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002560:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8002564:	6899      	ldr	r1, [r3, #8]
 8002566:	f607 22d4 	addw	r2, r7, #2772	; 0xad4
 800256a:	f8d7 3d30 	ldr.w	r3, [r7, #3376]	; 0xd30
 800256e:	4413      	add	r3, r2
 8002570:	f607 1214 	addw	r2, r7, #2324	; 0x914
 8002574:	9300      	str	r3, [sp, #0]
 8002576:	2301      	movs	r3, #1
 8002578:	2003      	movs	r0, #3
 800257a:	f7ff fa35 	bl	80019e8 <commandRespond1>
 800257e:	f8c7 0d00 	str.w	r0, [r7, #3328]	; 0xd00
					total_respond_length += respond_lenght;
 8002582:	f8d7 2d30 	ldr.w	r2, [r7, #3376]	; 0xd30
 8002586:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 800258a:	4413      	add	r3, r2
 800258c:	f8c7 3d30 	str.w	r3, [r7, #3376]	; 0xd30
			  } else {
				  current_key_state = SCARA_KEY_STATE_READY;
			  }
		  }
		  break;
 8002590:	e091      	b.n	80026b6 <StartDefaultTask+0x996>
				  current_key_state = SCARA_KEY_STATE_READY;
 8002592:	2300      	movs	r3, #0
 8002594:	f887 3d2b 	strb.w	r3, [r7, #3371]	; 0xd2b
		  break;
 8002598:	e08d      	b.n	80026b6 <StartDefaultTask+0x996>
		  case SCARA_KEY_STATE_FLOW:
		  {
			  SCARA_StatusTypeDef status;
			  // Increase run time
			  run_time += T_SAMPLING;
 800259a:	a389      	add	r3, pc, #548	; (adr r3, 80027c0 <StartDefaultTask+0xaa0>)
 800259c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a0:	f607 5118 	addw	r1, r7, #3352	; 0xd18
 80025a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80025a8:	f7fd fe70 	bl	800028c <__adddf3>
 80025ac:	4602      	mov	r2, r0
 80025ae:	460b      	mov	r3, r1
 80025b0:	f607 5118 	addw	r1, r7, #3352	; 0xd18
 80025b4:	e9c1 2300 	strd	r2, r3, [r1]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 80025b8:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 80025bc:	ed93 0b00 	vldr	d0, [r3]
 80025c0:	f007 ffac 	bl	800a51c <scaraIsFinish>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d003      	beq.n	80025d2 <StartDefaultTask+0x8b2>
				  current_key_state = SCARA_KEY_STATE_FINISH;// Key Done
 80025ca:	2303      	movs	r3, #3
 80025cc:	f887 3d2b 	strb.w	r3, [r7, #3371]	; 0xd2b
					total_respond_length += respond_lenght;
					  LOG_REPORT("STOP KEY", __LINE__);
				  }
			  }
		  }
		  break;
 80025d0:	e071      	b.n	80026b6 <StartDefaultTask+0x996>
				  status = scaraFlowDuty(run_time, &positionNext, positionCurrent);
 80025d2:	4c7e      	ldr	r4, [pc, #504]	; (80027cc <StartDefaultTask+0xaac>)
 80025d4:	4668      	mov	r0, sp
 80025d6:	f104 0308 	add.w	r3, r4, #8
 80025da:	22b8      	movs	r2, #184	; 0xb8
 80025dc:	4619      	mov	r1, r3
 80025de:	f013 fb97 	bl	8015d10 <memcpy>
 80025e2:	e894 000c 	ldmia.w	r4, {r2, r3}
 80025e6:	487a      	ldr	r0, [pc, #488]	; (80027d0 <StartDefaultTask+0xab0>)
 80025e8:	f607 5118 	addw	r1, r7, #3352	; 0xd18
 80025ec:	ed91 0b00 	vldr	d0, [r1]
 80025f0:	f005 fe46 	bl	8008280 <scaraFlowDuty>
 80025f4:	4603      	mov	r3, r0
 80025f6:	f887 3cd0 	strb.w	r3, [r7, #3280]	; 0xcd0
				  if ( SCARA_STATUS_OK == status) {
 80025fa:	f897 3cd0 	ldrb.w	r3, [r7, #3280]	; 0xcd0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d113      	bne.n	800262a <StartDefaultTask+0x90a>
					  lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 8002602:	4c72      	ldr	r4, [pc, #456]	; (80027cc <StartDefaultTask+0xaac>)
 8002604:	4a72      	ldr	r2, [pc, #456]	; (80027d0 <StartDefaultTask+0xab0>)
 8002606:	ab2c      	add	r3, sp, #176	; 0xb0
 8002608:	4611      	mov	r1, r2
 800260a:	22c0      	movs	r2, #192	; 0xc0
 800260c:	4618      	mov	r0, r3
 800260e:	f013 fb7f 	bl	8015d10 <memcpy>
 8002612:	4668      	mov	r0, sp
 8002614:	f104 0310 	add.w	r3, r4, #16
 8002618:	22b0      	movs	r2, #176	; 0xb0
 800261a:	4619      	mov	r1, r3
 800261c:	f013 fb78 	bl	8015d10 <memcpy>
 8002620:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002624:	f002 f980 	bl	8004928 <lowlayer_computeAndWritePulse>
		  break;
 8002628:	e045      	b.n	80026b6 <StartDefaultTask+0x996>
					  current_key_state = SCARA_KEY_STATE_FINISH;
 800262a:	2303      	movs	r3, #3
 800262c:	f887 3d2b 	strb.w	r3, [r7, #3371]	; 0xd2b
					detail_array[0] = status;
 8002630:	f607 1314 	addw	r3, r7, #2324	; 0x914
 8002634:	f897 2cd0 	ldrb.w	r2, [r7, #3280]	; 0xcd0
 8002638:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_STOP, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800263a:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 800263e:	6899      	ldr	r1, [r3, #8]
 8002640:	f607 22d4 	addw	r2, r7, #2772	; 0xad4
 8002644:	f8d7 3d30 	ldr.w	r3, [r7, #3376]	; 0xd30
 8002648:	4413      	add	r3, r2
 800264a:	f607 1214 	addw	r2, r7, #2324	; 0x914
 800264e:	9300      	str	r3, [sp, #0]
 8002650:	2301      	movs	r3, #1
 8002652:	2006      	movs	r0, #6
 8002654:	f7ff f9c8 	bl	80019e8 <commandRespond1>
 8002658:	f8c7 0d00 	str.w	r0, [r7, #3328]	; 0xd00
					total_respond_length += respond_lenght;
 800265c:	f8d7 2d30 	ldr.w	r2, [r7, #3376]	; 0xd30
 8002660:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8002664:	4413      	add	r3, r2
 8002666:	f8c7 3d30 	str.w	r3, [r7, #3376]	; 0xd30
					  LOG_REPORT("STOP KEY", __LINE__);
 800266a:	f240 213e 	movw	r1, #574	; 0x23e
 800266e:	4859      	ldr	r0, [pc, #356]	; (80027d4 <StartDefaultTask+0xab4>)
 8002670:	f7ff fa0a 	bl	8001a88 <LOG_REPORT>
		  break;
 8002674:	e01f      	b.n	80026b6 <StartDefaultTask+0x996>
		  case SCARA_KEY_STATE_FINISH:
		  {
			  lowlayer_readTruePosition(&positionNext);
 8002676:	4856      	ldr	r0, [pc, #344]	; (80027d0 <StartDefaultTask+0xab0>)
 8002678:	f001 ffc6 	bl	8004608 <lowlayer_readTruePosition>
			  kinematicForward(&positionNext);
 800267c:	4854      	ldr	r0, [pc, #336]	; (80027d0 <StartDefaultTask+0xab0>)
 800267e:	f001 f8ef 	bl	8003860 <kinematicForward>
			  current_key_state = SCARA_KEY_STATE_READY;
 8002682:	2300      	movs	r3, #0
 8002684:	f887 3d2b 	strb.w	r3, [r7, #3371]	; 0xd2b
			  positionNext.t = 0;
 8002688:	4951      	ldr	r1, [pc, #324]	; (80027d0 <StartDefaultTask+0xab0>)
 800268a:	f04f 0200 	mov.w	r2, #0
 800268e:	f04f 0300 	mov.w	r3, #0
 8002692:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
			  positionNext.total_time = 0;
 8002696:	494e      	ldr	r1, [pc, #312]	; (80027d0 <StartDefaultTask+0xab0>)
 8002698:	f04f 0200 	mov.w	r2, #0
 800269c:	f04f 0300 	mov.w	r3, #0
 80026a0:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
			  positionNext.q = 0;
 80026a4:	494a      	ldr	r1, [pc, #296]	; (80027d0 <StartDefaultTask+0xab0>)
 80026a6:	f04f 0200 	mov.w	r2, #0
 80026aa:	f04f 0300 	mov.w	r3, #0
 80026ae:	e9c1 2300 	strd	r2, r3, [r1]
		  }
		  break;
 80026b2:	e000      	b.n	80026b6 <StartDefaultTask+0x996>
		  break;
 80026b4:	bf00      	nop
		  }
	  }
	  break;
 80026b6:	f000 be15 	b.w	80032e4 <StartDefaultTask+0x15c4>

	  case SCARA_METHOD_SEMI_AUTO:
	  {
		  switch( current_mode) {
 80026ba:	f897 3d2e 	ldrb.w	r3, [r7, #3374]	; 0xd2e
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d06c      	beq.n	800279c <StartDefaultTask+0xa7c>
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	f300 81e9 	bgt.w	8002a9a <StartDefaultTask+0xd7a>
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d002      	beq.n	80026d2 <StartDefaultTask+0x9b2>
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d007      	beq.n	80026e0 <StartDefaultTask+0x9c0>
 80026d0:	e1e3      	b.n	8002a9a <StartDefaultTask+0xd7a>
		  case SCARA_MODE_STOP:
			  {
				  current_mode 	= SCARA_MODE_DUTY;
 80026d2:	2302      	movs	r3, #2
 80026d4:	f887 3d2e 	strb.w	r3, [r7, #3374]	; 0xd2e
				  current_duty_state = SCARA_DUTY_STATE_READY;
 80026d8:	2300      	movs	r3, #0
 80026da:	f887 3d2d 	strb.w	r3, [r7, #3373]	; 0xd2d
			  }
			  break;
 80026de:	e1e2      	b.n	8002aa6 <StartDefaultTask+0xd86>

		  case SCARA_MODE_SCAN:
			  {
				  switch (current_scan_state) {
 80026e0:	f897 3d2c 	ldrb.w	r3, [r7, #3372]	; 0xd2c
 80026e4:	2b03      	cmp	r3, #3
 80026e6:	d84f      	bhi.n	8002788 <StartDefaultTask+0xa68>
 80026e8:	a201      	add	r2, pc, #4	; (adr r2, 80026f0 <StartDefaultTask+0x9d0>)
 80026ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ee:	bf00      	nop
 80026f0:	08002701 	.word	0x08002701
 80026f4:	0800270d 	.word	0x0800270d
 80026f8:	0800271f 	.word	0x0800271f
 80026fc:	08002733 	.word	0x08002733
				  case SCARA_SCAN_STATE_INIT:
					  {
						  lowlayer_scanReset();
 8002700:	f001 fd7c 	bl	80041fc <lowlayer_scanReset>
						  current_scan_state = SCARA_SCAN_STATE_HARD;
 8002704:	2301      	movs	r3, #1
 8002706:	f887 3d2c 	strb.w	r3, [r7, #3372]	; 0xd2c
					  }
					  break;
 800270a:	e046      	b.n	800279a <StartDefaultTask+0xa7a>
				  case SCARA_SCAN_STATE_HARD:
					  {
						  if(lowlayer_scanFlow()) {
 800270c:	f001 fda8 	bl	8004260 <lowlayer_scanFlow>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d03e      	beq.n	8002794 <StartDefaultTask+0xa74>
							  current_scan_state = SCARA_SCAN_STATE_SOFT;
 8002716:	2302      	movs	r3, #2
 8002718:	f887 3d2c 	strb.w	r3, [r7, #3372]	; 0xd2c
						  }
					  }
					  break;
 800271c:	e03a      	b.n	8002794 <StartDefaultTask+0xa74>
				  case SCARA_SCAN_STATE_SOFT:
					  {
						  if(lowlayer_goToSoftLimit(&positionNext)) {
 800271e:	482c      	ldr	r0, [pc, #176]	; (80027d0 <StartDefaultTask+0xab0>)
 8002720:	f001 fef6 	bl	8004510 <lowlayer_goToSoftLimit>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d036      	beq.n	8002798 <StartDefaultTask+0xa78>
							  current_scan_state = SCARA_SCAN_STATE_FINISH;
 800272a:	2303      	movs	r3, #3
 800272c:	f887 3d2c 	strb.w	r3, [r7, #3372]	; 0xd2c
							}
					  }
					  break;
 8002730:	e032      	b.n	8002798 <StartDefaultTask+0xa78>
				  case SCARA_SCAN_STATE_FINISH:
					  {
						  //lowlayer_readSetPosition(&positionNext);
						  lowlayer_readTruePosition(&positionNext);
 8002732:	4827      	ldr	r0, [pc, #156]	; (80027d0 <StartDefaultTask+0xab0>)
 8002734:	f001 ff68 	bl	8004608 <lowlayer_readTruePosition>
						  kinematicForward(&positionNext);
 8002738:	4825      	ldr	r0, [pc, #148]	; (80027d0 <StartDefaultTask+0xab0>)
 800273a:	f001 f891 	bl	8003860 <kinematicForward>
						  current_mode 	= SCARA_MODE_DUTY;
 800273e:	2302      	movs	r3, #2
 8002740:	f887 3d2e 	strb.w	r3, [r7, #3374]	; 0xd2e
						  current_duty_state = SCARA_DUTY_STATE_READY;
 8002744:	2300      	movs	r3, #0
 8002746:	f887 3d2d 	strb.w	r3, [r7, #3373]	; 0xd2d
						  scaraSetScanFlag();
 800274a:	f007 fe49 	bl	800a3e0 <scaraSetScanFlag>
						//   scaraPosition2String((char *)position, positionNext);
						//   infor_lenght 		= commandRespond(RPD_DONE,
						// 									 0,
						// 									(char *)position,
						// 									(char *)infor);
						detail_array[0] = NONE;
 800274e:	f607 1314 	addw	r3, r7, #2324	; 0x914
 8002752:	2223      	movs	r2, #35	; 0x23
 8002754:	701a      	strb	r2, [r3, #0]
						respond_lenght = commandRespond1(RPD_DONE, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002756:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 800275a:	6899      	ldr	r1, [r3, #8]
 800275c:	f607 22d4 	addw	r2, r7, #2772	; 0xad4
 8002760:	f8d7 3d30 	ldr.w	r3, [r7, #3376]	; 0xd30
 8002764:	4413      	add	r3, r2
 8002766:	f607 1214 	addw	r2, r7, #2324	; 0x914
 800276a:	9300      	str	r3, [sp, #0]
 800276c:	2301      	movs	r3, #1
 800276e:	2005      	movs	r0, #5
 8002770:	f7ff f93a 	bl	80019e8 <commandRespond1>
 8002774:	f8c7 0d00 	str.w	r0, [r7, #3328]	; 0xd00
						total_respond_length += respond_lenght;
 8002778:	f8d7 2d30 	ldr.w	r2, [r7, #3376]	; 0xd30
 800277c:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8002780:	4413      	add	r3, r2
 8002782:	f8c7 3d30 	str.w	r3, [r7, #3376]	; 0xd30
					  }
					  break;
 8002786:	e008      	b.n	800279a <StartDefaultTask+0xa7a>
				  default:
					  {
						  LOG_REPORT("ERROR STATE !!!", __LINE__);
 8002788:	f240 2187 	movw	r1, #647	; 0x287
 800278c:	4812      	ldr	r0, [pc, #72]	; (80027d8 <StartDefaultTask+0xab8>)
 800278e:	f7ff f97b 	bl	8001a88 <LOG_REPORT>
						  while(1);
 8002792:	e7fe      	b.n	8002792 <StartDefaultTask+0xa72>
					  break;
 8002794:	bf00      	nop
 8002796:	e186      	b.n	8002aa6 <StartDefaultTask+0xd86>
					  break;
 8002798:	bf00      	nop
					  }
				  }

			  }
			  break;
 800279a:	e184      	b.n	8002aa6 <StartDefaultTask+0xd86>

		  case SCARA_MODE_DUTY:
			  {
				  switch (current_duty_state) {
 800279c:	f897 3d2d 	ldrb.w	r3, [r7, #3373]	; 0xd2d
 80027a0:	2b03      	cmp	r3, #3
 80027a2:	f200 8173 	bhi.w	8002a8c <StartDefaultTask+0xd6c>
 80027a6:	a201      	add	r2, pc, #4	; (adr r2, 80027ac <StartDefaultTask+0xa8c>)
 80027a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ac:	080027bd 	.word	0x080027bd
 80027b0:	080027dd 	.word	0x080027dd
 80027b4:	0800293b 	.word	0x0800293b
 80027b8:	08002a17 	.word	0x08002a17
				  case SCARA_DUTY_STATE_READY:
					  {
						  // Do nothing();
						  __NOP();
 80027bc:	bf00      	nop

					  }
				  break;
 80027be:	e16b      	b.n	8002a98 <StartDefaultTask+0xd78>
 80027c0:	40000000 	.word	0x40000000
 80027c4:	3f847ae1 	.word	0x3f847ae1
 80027c8:	20000000 	.word	0x20000000
 80027cc:	20005af0 	.word	0x20005af0
 80027d0:	20005c70 	.word	0x20005c70
 80027d4:	0801c0b4 	.word	0x0801c0b4
 80027d8:	0801c0c0 	.word	0x0801c0c0

				  case SCARA_DUTY_STATE_INIT:
					  {

						  SCARA_StatusTypeDef status1, status2;
						  status1 = scaraInitDuty(duty_cmd);
 80027dc:	f507 6430 	add.w	r4, r7, #2816	; 0xb00
 80027e0:	4668      	mov	r0, sp
 80027e2:	f104 0310 	add.w	r3, r4, #16
 80027e6:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 80027ea:	4619      	mov	r1, r3
 80027ec:	f013 fa90 	bl	8015d10 <memcpy>
 80027f0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80027f4:	f002 fd64 	bl	80052c0 <scaraInitDuty>
 80027f8:	4603      	mov	r3, r0
 80027fa:	f887 3cd2 	strb.w	r3, [r7, #3282]	; 0xcd2
						  if ( SCARA_STATUS_OK == status1) {
 80027fe:	f897 3cd2 	ldrb.w	r3, [r7, #3282]	; 0xcd2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d173      	bne.n	80028ee <StartDefaultTask+0xbce>
							  status2 = scaraTestDuty();
 8002806:	f007 fd6f 	bl	800a2e8 <scaraTestDuty>
 800280a:	4603      	mov	r3, r0
 800280c:	f887 3cd1 	strb.w	r3, [r7, #3281]	; 0xcd1
							  if (SCARA_STATUS_OK == status2) {
 8002810:	f897 3cd1 	ldrb.w	r3, [r7, #3281]	; 0xcd1
 8002814:	2b00      	cmp	r3, #0
 8002816:	d144      	bne.n	80028a2 <StartDefaultTask+0xb82>
							  current_duty_state = SCARA_DUTY_STATE_FLOW;
 8002818:	2302      	movs	r3, #2
 800281a:	f887 3d2d 	strb.w	r3, [r7, #3373]	; 0xd2d
							  //current_duty_state = SCARA_DUTY_STATE_FINISH;
							  run_time			= 0;
 800281e:	f04f 0200 	mov.w	r2, #0
 8002822:	f04f 0300 	mov.w	r3, #0
 8002826:	f607 5118 	addw	r1, r7, #3352	; 0xd18
 800282a:	e9c1 2300 	strd	r2, r3, [r1]
							  // Respond
							  detail_array[0] = status1;
 800282e:	f607 1314 	addw	r3, r7, #2324	; 0x914
 8002832:	f897 2cd2 	ldrb.w	r2, [r7, #3282]	; 0xcd2
 8002836:	701a      	strb	r2, [r3, #0]
							  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002838:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 800283c:	6899      	ldr	r1, [r3, #8]
 800283e:	f607 22d4 	addw	r2, r7, #2772	; 0xad4
 8002842:	f8d7 3d30 	ldr.w	r3, [r7, #3376]	; 0xd30
 8002846:	4413      	add	r3, r2
 8002848:	f607 1214 	addw	r2, r7, #2324	; 0x914
 800284c:	9300      	str	r3, [sp, #0]
 800284e:	2301      	movs	r3, #1
 8002850:	2008      	movs	r0, #8
 8002852:	f7ff f8c9 	bl	80019e8 <commandRespond1>
 8002856:	f8c7 0d00 	str.w	r0, [r7, #3328]	; 0xd00
							  total_respond_length += respond_lenght;
 800285a:	f8d7 2d30 	ldr.w	r2, [r7, #3376]	; 0xd30
 800285e:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8002862:	4413      	add	r3, r2
 8002864:	f8c7 3d30 	str.w	r3, [r7, #3376]	; 0xd30
							  detail_array[0] = NONE;
 8002868:	f607 1314 	addw	r3, r7, #2324	; 0x914
 800286c:	2223      	movs	r2, #35	; 0x23
 800286e:	701a      	strb	r2, [r3, #0]
							  respond_lenght = commandRespond1(RPD_START, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002870:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8002874:	6899      	ldr	r1, [r3, #8]
 8002876:	f607 22d4 	addw	r2, r7, #2772	; 0xad4
 800287a:	f8d7 3d30 	ldr.w	r3, [r7, #3376]	; 0xd30
 800287e:	4413      	add	r3, r2
 8002880:	f607 1214 	addw	r2, r7, #2324	; 0x914
 8002884:	9300      	str	r3, [sp, #0]
 8002886:	2301      	movs	r3, #1
 8002888:	2003      	movs	r0, #3
 800288a:	f7ff f8ad 	bl	80019e8 <commandRespond1>
 800288e:	f8c7 0d00 	str.w	r0, [r7, #3328]	; 0xd00
							  total_respond_length += respond_lenght;
 8002892:	f8d7 2d30 	ldr.w	r2, [r7, #3376]	; 0xd30
 8002896:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 800289a:	4413      	add	r3, r2
 800289c:	f8c7 3d30 	str.w	r3, [r7, #3376]	; 0xd30
							respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
							total_respond_length += respond_lenght;
							  LOG_REPORT("INIT FAIL", __LINE__);
						  }
					  }
				  break;
 80028a0:	e0fa      	b.n	8002a98 <StartDefaultTask+0xd78>
								  current_duty_state 	= SCARA_DUTY_STATE_READY;
 80028a2:	2300      	movs	r3, #0
 80028a4:	f887 3d2d 	strb.w	r3, [r7, #3373]	; 0xd2d
								  LOG_REPORT("TEST FAIL", __LINE__);
 80028a8:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 80028ac:	48d0      	ldr	r0, [pc, #832]	; (8002bf0 <StartDefaultTask+0xed0>)
 80028ae:	f7ff f8eb 	bl	8001a88 <LOG_REPORT>
								detail_array[0] = status2;
 80028b2:	f607 1314 	addw	r3, r7, #2324	; 0x914
 80028b6:	f897 2cd1 	ldrb.w	r2, [r7, #3281]	; 0xcd1
 80028ba:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80028bc:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80028c0:	6899      	ldr	r1, [r3, #8]
 80028c2:	f607 22d4 	addw	r2, r7, #2772	; 0xad4
 80028c6:	f8d7 3d30 	ldr.w	r3, [r7, #3376]	; 0xd30
 80028ca:	4413      	add	r3, r2
 80028cc:	f607 1214 	addw	r2, r7, #2324	; 0x914
 80028d0:	9300      	str	r3, [sp, #0]
 80028d2:	2301      	movs	r3, #1
 80028d4:	2007      	movs	r0, #7
 80028d6:	f7ff f887 	bl	80019e8 <commandRespond1>
 80028da:	f8c7 0d00 	str.w	r0, [r7, #3328]	; 0xd00
								total_respond_length += respond_lenght;
 80028de:	f8d7 2d30 	ldr.w	r2, [r7, #3376]	; 0xd30
 80028e2:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 80028e6:	4413      	add	r3, r2
 80028e8:	f8c7 3d30 	str.w	r3, [r7, #3376]	; 0xd30
				  break;
 80028ec:	e0d4      	b.n	8002a98 <StartDefaultTask+0xd78>
							  current_duty_state 	= SCARA_DUTY_STATE_READY;
 80028ee:	2300      	movs	r3, #0
 80028f0:	f887 3d2d 	strb.w	r3, [r7, #3373]	; 0xd2d
							detail_array[0] = status1;
 80028f4:	f607 1314 	addw	r3, r7, #2324	; 0x914
 80028f8:	f897 2cd2 	ldrb.w	r2, [r7, #3282]	; 0xcd2
 80028fc:	701a      	strb	r2, [r3, #0]
							respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80028fe:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8002902:	6899      	ldr	r1, [r3, #8]
 8002904:	f607 22d4 	addw	r2, r7, #2772	; 0xad4
 8002908:	f8d7 3d30 	ldr.w	r3, [r7, #3376]	; 0xd30
 800290c:	4413      	add	r3, r2
 800290e:	f607 1214 	addw	r2, r7, #2324	; 0x914
 8002912:	9300      	str	r3, [sp, #0]
 8002914:	2301      	movs	r3, #1
 8002916:	2007      	movs	r0, #7
 8002918:	f7ff f866 	bl	80019e8 <commandRespond1>
 800291c:	f8c7 0d00 	str.w	r0, [r7, #3328]	; 0xd00
							total_respond_length += respond_lenght;
 8002920:	f8d7 2d30 	ldr.w	r2, [r7, #3376]	; 0xd30
 8002924:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8002928:	4413      	add	r3, r2
 800292a:	f8c7 3d30 	str.w	r3, [r7, #3376]	; 0xd30
							  LOG_REPORT("INIT FAIL", __LINE__);
 800292e:	f240 21ce 	movw	r1, #718	; 0x2ce
 8002932:	48b0      	ldr	r0, [pc, #704]	; (8002bf4 <StartDefaultTask+0xed4>)
 8002934:	f7ff f8a8 	bl	8001a88 <LOG_REPORT>
				  break;
 8002938:	e0ae      	b.n	8002a98 <StartDefaultTask+0xd78>

				  case SCARA_DUTY_STATE_FLOW:
					  {
						  SCARA_StatusTypeDef status;
						  // Increase run time
						  run_time += T_SAMPLING;
 800293a:	a3ab      	add	r3, pc, #684	; (adr r3, 8002be8 <StartDefaultTask+0xec8>)
 800293c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002940:	f607 5118 	addw	r1, r7, #3352	; 0xd18
 8002944:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002948:	f7fd fca0 	bl	800028c <__adddf3>
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	f607 5118 	addw	r1, r7, #3352	; 0xd18
 8002954:	e9c1 2300 	strd	r2, r3, [r1]
						  // Check Time Out
						  if (scaraIsFinish(run_time)) {
 8002958:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 800295c:	ed93 0b00 	vldr	d0, [r3]
 8002960:	f007 fddc 	bl	800a51c <scaraIsFinish>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d003      	beq.n	8002972 <StartDefaultTask+0xc52>
							  current_duty_state = SCARA_DUTY_STATE_FINISH;// Work Done
 800296a:	2303      	movs	r3, #3
 800296c:	f887 3d2d 	strb.w	r3, [r7, #3373]	; 0xd2d
								total_respond_length += respond_lenght;
								  LOG_REPORT("STOP DUTY", __LINE__);
							  }
						  }
					  }
				  break;
 8002970:	e092      	b.n	8002a98 <StartDefaultTask+0xd78>
							  status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 8002972:	4ca1      	ldr	r4, [pc, #644]	; (8002bf8 <StartDefaultTask+0xed8>)
 8002974:	4668      	mov	r0, sp
 8002976:	f104 0308 	add.w	r3, r4, #8
 800297a:	22b8      	movs	r2, #184	; 0xb8
 800297c:	4619      	mov	r1, r3
 800297e:	f013 f9c7 	bl	8015d10 <memcpy>
 8002982:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002986:	489d      	ldr	r0, [pc, #628]	; (8002bfc <StartDefaultTask+0xedc>)
 8002988:	f607 5118 	addw	r1, r7, #3352	; 0xd18
 800298c:	ed91 0b00 	vldr	d0, [r1]
 8002990:	f005 fc76 	bl	8008280 <scaraFlowDuty>
 8002994:	4603      	mov	r3, r0
 8002996:	f887 3cd3 	strb.w	r3, [r7, #3283]	; 0xcd3
							  if ( SCARA_STATUS_OK == status) {
 800299a:	f897 3cd3 	ldrb.w	r3, [r7, #3283]	; 0xcd3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d113      	bne.n	80029ca <StartDefaultTask+0xcaa>
								  lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 80029a2:	4c95      	ldr	r4, [pc, #596]	; (8002bf8 <StartDefaultTask+0xed8>)
 80029a4:	4a95      	ldr	r2, [pc, #596]	; (8002bfc <StartDefaultTask+0xedc>)
 80029a6:	ab2c      	add	r3, sp, #176	; 0xb0
 80029a8:	4611      	mov	r1, r2
 80029aa:	22c0      	movs	r2, #192	; 0xc0
 80029ac:	4618      	mov	r0, r3
 80029ae:	f013 f9af 	bl	8015d10 <memcpy>
 80029b2:	4668      	mov	r0, sp
 80029b4:	f104 0310 	add.w	r3, r4, #16
 80029b8:	22b0      	movs	r2, #176	; 0xb0
 80029ba:	4619      	mov	r1, r3
 80029bc:	f013 f9a8 	bl	8015d10 <memcpy>
 80029c0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80029c4:	f001 ffb0 	bl	8004928 <lowlayer_computeAndWritePulse>
				  break;
 80029c8:	e066      	b.n	8002a98 <StartDefaultTask+0xd78>
								  current_duty_state = SCARA_DUTY_STATE_FINISH;
 80029ca:	2303      	movs	r3, #3
 80029cc:	f887 3d2d 	strb.w	r3, [r7, #3373]	; 0xd2d
								detail_array[0] = status;
 80029d0:	f607 1314 	addw	r3, r7, #2324	; 0x914
 80029d4:	f897 2cd3 	ldrb.w	r2, [r7, #3283]	; 0xcd3
 80029d8:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond1(RPD_STOP, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80029da:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80029de:	6899      	ldr	r1, [r3, #8]
 80029e0:	f607 22d4 	addw	r2, r7, #2772	; 0xad4
 80029e4:	f8d7 3d30 	ldr.w	r3, [r7, #3376]	; 0xd30
 80029e8:	4413      	add	r3, r2
 80029ea:	f607 1214 	addw	r2, r7, #2324	; 0x914
 80029ee:	9300      	str	r3, [sp, #0]
 80029f0:	2301      	movs	r3, #1
 80029f2:	2006      	movs	r0, #6
 80029f4:	f7fe fff8 	bl	80019e8 <commandRespond1>
 80029f8:	f8c7 0d00 	str.w	r0, [r7, #3328]	; 0xd00
								total_respond_length += respond_lenght;
 80029fc:	f8d7 2d30 	ldr.w	r2, [r7, #3376]	; 0xd30
 8002a00:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8002a04:	4413      	add	r3, r2
 8002a06:	f8c7 3d30 	str.w	r3, [r7, #3376]	; 0xd30
								  LOG_REPORT("STOP DUTY", __LINE__);
 8002a0a:	f44f 713d 	mov.w	r1, #756	; 0x2f4
 8002a0e:	487c      	ldr	r0, [pc, #496]	; (8002c00 <StartDefaultTask+0xee0>)
 8002a10:	f7ff f83a 	bl	8001a88 <LOG_REPORT>
				  break;
 8002a14:	e040      	b.n	8002a98 <StartDefaultTask+0xd78>

				  case SCARA_DUTY_STATE_FINISH:
					  {
						  lowlayer_readTruePosition(&positionNext);
 8002a16:	4879      	ldr	r0, [pc, #484]	; (8002bfc <StartDefaultTask+0xedc>)
 8002a18:	f001 fdf6 	bl	8004608 <lowlayer_readTruePosition>
						  kinematicForward(&positionNext);
 8002a1c:	4877      	ldr	r0, [pc, #476]	; (8002bfc <StartDefaultTask+0xedc>)
 8002a1e:	f000 ff1f 	bl	8003860 <kinematicForward>
						  current_duty_state = SCARA_DUTY_STATE_READY;
 8002a22:	2300      	movs	r3, #0
 8002a24:	f887 3d2d 	strb.w	r3, [r7, #3373]	; 0xd2d
						  positionNext.t = 0;
 8002a28:	4974      	ldr	r1, [pc, #464]	; (8002bfc <StartDefaultTask+0xedc>)
 8002a2a:	f04f 0200 	mov.w	r2, #0
 8002a2e:	f04f 0300 	mov.w	r3, #0
 8002a32:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
						  positionNext.total_time = 0;
 8002a36:	4971      	ldr	r1, [pc, #452]	; (8002bfc <StartDefaultTask+0xedc>)
 8002a38:	f04f 0200 	mov.w	r2, #0
 8002a3c:	f04f 0300 	mov.w	r3, #0
 8002a40:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
						  positionNext.q = 0;
 8002a44:	496d      	ldr	r1, [pc, #436]	; (8002bfc <StartDefaultTask+0xedc>)
 8002a46:	f04f 0200 	mov.w	r2, #0
 8002a4a:	f04f 0300 	mov.w	r3, #0
 8002a4e:	e9c1 2300 	strd	r2, r3, [r1]
// #endif
// 						  infor_lenght 		= commandRespond(RPD_DONE,
// 															 0,
// 															 (char *)position,
// 															 (char *)infor);
					detail_array[0] = NONE;
 8002a52:	f607 1314 	addw	r3, r7, #2324	; 0x914
 8002a56:	2223      	movs	r2, #35	; 0x23
 8002a58:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_DONE, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002a5a:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8002a5e:	6899      	ldr	r1, [r3, #8]
 8002a60:	f607 22d4 	addw	r2, r7, #2772	; 0xad4
 8002a64:	f8d7 3d30 	ldr.w	r3, [r7, #3376]	; 0xd30
 8002a68:	4413      	add	r3, r2
 8002a6a:	f607 1214 	addw	r2, r7, #2324	; 0x914
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	2301      	movs	r3, #1
 8002a72:	2005      	movs	r0, #5
 8002a74:	f7fe ffb8 	bl	80019e8 <commandRespond1>
 8002a78:	f8c7 0d00 	str.w	r0, [r7, #3328]	; 0xd00
					total_respond_length += respond_lenght;
 8002a7c:	f8d7 2d30 	ldr.w	r2, [r7, #3376]	; 0xd30
 8002a80:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8002a84:	4413      	add	r3, r2
 8002a86:	f8c7 3d30 	str.w	r3, [r7, #3376]	; 0xd30
					  }
				  break;
 8002a8a:	e005      	b.n	8002a98 <StartDefaultTask+0xd78>

				  default:
					  {
						  LOG_REPORT("ERROR STATE !!!", __LINE__);
 8002a8c:	f44f 7145 	mov.w	r1, #788	; 0x314
 8002a90:	485c      	ldr	r0, [pc, #368]	; (8002c04 <StartDefaultTask+0xee4>)
 8002a92:	f7fe fff9 	bl	8001a88 <LOG_REPORT>
						  while(1);
 8002a96:	e7fe      	b.n	8002a96 <StartDefaultTask+0xd76>
					  }
				  }

			  }
			  break;
 8002a98:	e005      	b.n	8002aa6 <StartDefaultTask+0xd86>

		  default:
			  {
				  LOG_REPORT("ERROR MODE !!!", __LINE__);
 8002a9a:	f240 311e 	movw	r1, #798	; 0x31e
 8002a9e:	485a      	ldr	r0, [pc, #360]	; (8002c08 <StartDefaultTask+0xee8>)
 8002aa0:	f7fe fff2 	bl	8001a88 <LOG_REPORT>
				  while(1);
 8002aa4:	e7fe      	b.n	8002aa4 <StartDefaultTask+0xd84>
			  }
		  }
	  }
	  break;
 8002aa6:	f000 bc20 	b.w	80032ea <StartDefaultTask+0x15ca>

	  case SCARA_METHOD_AUTO:
	  {
		  switch (current_duty_state)
 8002aaa:	f897 3d2d 	ldrb.w	r3, [r7, #3373]	; 0xd2d
 8002aae:	2b03      	cmp	r3, #3
 8002ab0:	f200 8153 	bhi.w	8002d5a <StartDefaultTask+0x103a>
 8002ab4:	a201      	add	r2, pc, #4	; (adr r2, 8002abc <StartDefaultTask+0xd9c>)
 8002ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aba:	bf00      	nop
 8002abc:	08002d5b 	.word	0x08002d5b
 8002ac0:	08002acd 	.word	0x08002acd
 8002ac4:	08002c59 	.word	0x08002c59
 8002ac8:	08002cf1 	.word	0x08002cf1
		  case SCARA_DUTY_STATE_READY:
			  
		  break;
		  case SCARA_DUTY_STATE_INIT:{
			  SCARA_StatusTypeDef status1, status2;
			  status1 = scara_test_InitDuty(duty_cmd);
 8002acc:	f507 6430 	add.w	r4, r7, #2816	; 0xb00
 8002ad0:	4668      	mov	r0, sp
 8002ad2:	f104 0310 	add.w	r3, r4, #16
 8002ad6:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8002ada:	4619      	mov	r1, r3
 8002adc:	f013 f918 	bl	8015d10 <memcpy>
 8002ae0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002ae4:	f002 fab8 	bl	8005058 <scara_test_InitDuty>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	f887 3cd5 	strb.w	r3, [r7, #3285]	; 0xcd5
			  if ( SCARA_STATUS_OK == status1) {
 8002aee:	f897 3cd5 	ldrb.w	r3, [r7, #3285]	; 0xcd5
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f040 808a 	bne.w	8002c0c <StartDefaultTask+0xeec>
				  current_duty_state = SCARA_DUTY_STATE_FLOW;
 8002af8:	2302      	movs	r3, #2
 8002afa:	f887 3d2d 	strb.w	r3, [r7, #3373]	; 0xd2d
			  	status2 = scaraTestLinearDuty();
 8002afe:	f007 fb77 	bl	800a1f0 <scaraTestLinearDuty>
 8002b02:	4603      	mov	r3, r0
 8002b04:	f887 3cd4 	strb.w	r3, [r7, #3284]	; 0xcd4
			  	if (SCARA_STATUS_OK == status2) {
 8002b08:	f897 3cd4 	ldrb.w	r3, [r7, #3284]	; 0xcd4
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d144      	bne.n	8002b9a <StartDefaultTask+0xe7a>
			  		current_duty_state = SCARA_DUTY_STATE_FLOW;
 8002b10:	2302      	movs	r3, #2
 8002b12:	f887 3d2d 	strb.w	r3, [r7, #3373]	; 0xd2d
			  		run_time			= 0;
 8002b16:	f04f 0200 	mov.w	r2, #0
 8002b1a:	f04f 0300 	mov.w	r3, #0
 8002b1e:	f607 5118 	addw	r1, r7, #3352	; 0xd18
 8002b22:	e9c1 2300 	strd	r2, r3, [r1]
			  		// Respond
			  		detail_array[0] = status1;
 8002b26:	f607 1314 	addw	r3, r7, #2324	; 0x914
 8002b2a:	f897 2cd5 	ldrb.w	r2, [r7, #3285]	; 0xcd5
 8002b2e:	701a      	strb	r2, [r3, #0]
			  		respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002b30:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8002b34:	6899      	ldr	r1, [r3, #8]
 8002b36:	f607 22d4 	addw	r2, r7, #2772	; 0xad4
 8002b3a:	f8d7 3d30 	ldr.w	r3, [r7, #3376]	; 0xd30
 8002b3e:	4413      	add	r3, r2
 8002b40:	f607 1214 	addw	r2, r7, #2324	; 0x914
 8002b44:	9300      	str	r3, [sp, #0]
 8002b46:	2301      	movs	r3, #1
 8002b48:	2008      	movs	r0, #8
 8002b4a:	f7fe ff4d 	bl	80019e8 <commandRespond1>
 8002b4e:	f8c7 0d00 	str.w	r0, [r7, #3328]	; 0xd00
			  		total_respond_length += respond_lenght;
 8002b52:	f8d7 2d30 	ldr.w	r2, [r7, #3376]	; 0xd30
 8002b56:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8002b5a:	4413      	add	r3, r2
 8002b5c:	f8c7 3d30 	str.w	r3, [r7, #3376]	; 0xd30
			  		detail_array[0] = NONE;
 8002b60:	f607 1314 	addw	r3, r7, #2324	; 0x914
 8002b64:	2223      	movs	r2, #35	; 0x23
 8002b66:	701a      	strb	r2, [r3, #0]
			  		respond_lenght = commandRespond1(RPD_START, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002b68:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8002b6c:	6899      	ldr	r1, [r3, #8]
 8002b6e:	f607 22d4 	addw	r2, r7, #2772	; 0xad4
 8002b72:	f8d7 3d30 	ldr.w	r3, [r7, #3376]	; 0xd30
 8002b76:	4413      	add	r3, r2
 8002b78:	f607 1214 	addw	r2, r7, #2324	; 0x914
 8002b7c:	9300      	str	r3, [sp, #0]
 8002b7e:	2301      	movs	r3, #1
 8002b80:	2003      	movs	r0, #3
 8002b82:	f7fe ff31 	bl	80019e8 <commandRespond1>
 8002b86:	f8c7 0d00 	str.w	r0, [r7, #3328]	; 0xd00
			  		total_respond_length += respond_lenght;
 8002b8a:	f8d7 2d30 	ldr.w	r2, [r7, #3376]	; 0xd30
 8002b8e:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8002b92:	4413      	add	r3, r2
 8002b94:	f8c7 3d30 	str.w	r3, [r7, #3376]	; 0xd30
			    respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
			    total_respond_length += respond_lenght;
			  	LOG_REPORT("INIT FAIL", __LINE__);
			  }
			}
		  break;
 8002b98:	e0e0      	b.n	8002d5c <StartDefaultTask+0x103c>
					current_duty_state 	= SCARA_DUTY_STATE_READY;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	f887 3d2d 	strb.w	r3, [r7, #3373]	; 0xd2d
					LOG_REPORT("TEST FAIL", __LINE__);
 8002ba0:	f240 313e 	movw	r1, #830	; 0x33e
 8002ba4:	4812      	ldr	r0, [pc, #72]	; (8002bf0 <StartDefaultTask+0xed0>)
 8002ba6:	f7fe ff6f 	bl	8001a88 <LOG_REPORT>
					detail_array[0] = status2;
 8002baa:	f607 1314 	addw	r3, r7, #2324	; 0x914
 8002bae:	f897 2cd4 	ldrb.w	r2, [r7, #3284]	; 0xcd4
 8002bb2:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002bb4:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8002bb8:	6899      	ldr	r1, [r3, #8]
 8002bba:	f607 22d4 	addw	r2, r7, #2772	; 0xad4
 8002bbe:	f8d7 3d30 	ldr.w	r3, [r7, #3376]	; 0xd30
 8002bc2:	4413      	add	r3, r2
 8002bc4:	f607 1214 	addw	r2, r7, #2324	; 0x914
 8002bc8:	9300      	str	r3, [sp, #0]
 8002bca:	2301      	movs	r3, #1
 8002bcc:	2007      	movs	r0, #7
 8002bce:	f7fe ff0b 	bl	80019e8 <commandRespond1>
 8002bd2:	f8c7 0d00 	str.w	r0, [r7, #3328]	; 0xd00
					total_respond_length += respond_lenght;
 8002bd6:	f8d7 2d30 	ldr.w	r2, [r7, #3376]	; 0xd30
 8002bda:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8002bde:	4413      	add	r3, r2
 8002be0:	f8c7 3d30 	str.w	r3, [r7, #3376]	; 0xd30
		  break;
 8002be4:	e0ba      	b.n	8002d5c <StartDefaultTask+0x103c>
 8002be6:	bf00      	nop
 8002be8:	40000000 	.word	0x40000000
 8002bec:	3f847ae1 	.word	0x3f847ae1
 8002bf0:	0801c0d0 	.word	0x0801c0d0
 8002bf4:	0801c0dc 	.word	0x0801c0dc
 8002bf8:	20005af0 	.word	0x20005af0
 8002bfc:	20005c70 	.word	0x20005c70
 8002c00:	0801c0e8 	.word	0x0801c0e8
 8002c04:	0801c0c0 	.word	0x0801c0c0
 8002c08:	0801c0f4 	.word	0x0801c0f4
			  	current_duty_state 	= SCARA_DUTY_STATE_READY;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	f887 3d2d 	strb.w	r3, [r7, #3373]	; 0xd2d
			    detail_array[0] = status1;
 8002c12:	f607 1314 	addw	r3, r7, #2324	; 0x914
 8002c16:	f897 2cd5 	ldrb.w	r2, [r7, #3285]	; 0xcd5
 8002c1a:	701a      	strb	r2, [r3, #0]
			    respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002c1c:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8002c20:	6899      	ldr	r1, [r3, #8]
 8002c22:	f607 22d4 	addw	r2, r7, #2772	; 0xad4
 8002c26:	f8d7 3d30 	ldr.w	r3, [r7, #3376]	; 0xd30
 8002c2a:	4413      	add	r3, r2
 8002c2c:	f607 1214 	addw	r2, r7, #2324	; 0x914
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	2301      	movs	r3, #1
 8002c34:	2007      	movs	r0, #7
 8002c36:	f7fe fed7 	bl	80019e8 <commandRespond1>
 8002c3a:	f8c7 0d00 	str.w	r0, [r7, #3328]	; 0xd00
			    total_respond_length += respond_lenght;
 8002c3e:	f8d7 2d30 	ldr.w	r2, [r7, #3376]	; 0xd30
 8002c42:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8002c46:	4413      	add	r3, r2
 8002c48:	f8c7 3d30 	str.w	r3, [r7, #3376]	; 0xd30
			  	LOG_REPORT("INIT FAIL", __LINE__);
 8002c4c:	f44f 7152 	mov.w	r1, #840	; 0x348
 8002c50:	48cb      	ldr	r0, [pc, #812]	; (8002f80 <StartDefaultTask+0x1260>)
 8002c52:	f7fe ff19 	bl	8001a88 <LOG_REPORT>
		  break;
 8002c56:	e081      	b.n	8002d5c <StartDefaultTask+0x103c>

		  case SCARA_DUTY_STATE_FLOW:{
			  SCARA_StatusTypeDef status;
			  // Increase run time
			  run_time += T_SAMPLING;
 8002c58:	a3c1      	add	r3, pc, #772	; (adr r3, 8002f60 <StartDefaultTask+0x1240>)
 8002c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c5e:	f607 5118 	addw	r1, r7, #3352	; 0xd18
 8002c62:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002c66:	f7fd fb11 	bl	800028c <__adddf3>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	f607 5118 	addw	r1, r7, #3352	; 0xd18
 8002c72:	e9c1 2300 	strd	r2, r3, [r1]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 8002c76:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 8002c7a:	ed93 0b00 	vldr	d0, [r3]
 8002c7e:	f007 fc4d 	bl	800a51c <scaraIsFinish>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d003      	beq.n	8002c90 <StartDefaultTask+0xf70>
			  	current_duty_state = SCARA_DUTY_STATE_FINISH;// Work Done
 8002c88:	2303      	movs	r3, #3
 8002c8a:	f887 3d2d 	strb.w	r3, [r7, #3373]	; 0xd2d
				  }else{
					  current_duty_state = SCARA_DUTY_STATE_FINISH;
				  }
			  }
		  }
		  break;
 8002c8e:	e065      	b.n	8002d5c <StartDefaultTask+0x103c>
			  	status = scaraTestFlowDuty(run_time , &positionNext, positionCurrent);
 8002c90:	4cbc      	ldr	r4, [pc, #752]	; (8002f84 <StartDefaultTask+0x1264>)
 8002c92:	4668      	mov	r0, sp
 8002c94:	f104 0308 	add.w	r3, r4, #8
 8002c98:	22b8      	movs	r2, #184	; 0xb8
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	f013 f838 	bl	8015d10 <memcpy>
 8002ca0:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002ca4:	48b8      	ldr	r0, [pc, #736]	; (8002f88 <StartDefaultTask+0x1268>)
 8002ca6:	f607 5118 	addw	r1, r7, #3352	; 0xd18
 8002caa:	ed91 0b00 	vldr	d0, [r1]
 8002cae:	f005 fa7d 	bl	80081ac <scaraTestFlowDuty>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	f887 3cd6 	strb.w	r3, [r7, #3286]	; 0xcd6
			  	if ( SCARA_STATUS_OK == status) {
 8002cb8:	f897 3cd6 	ldrb.w	r3, [r7, #3286]	; 0xcd6
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d113      	bne.n	8002ce8 <StartDefaultTask+0xfc8>
			  		lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 8002cc0:	4cb0      	ldr	r4, [pc, #704]	; (8002f84 <StartDefaultTask+0x1264>)
 8002cc2:	4ab1      	ldr	r2, [pc, #708]	; (8002f88 <StartDefaultTask+0x1268>)
 8002cc4:	ab2c      	add	r3, sp, #176	; 0xb0
 8002cc6:	4611      	mov	r1, r2
 8002cc8:	22c0      	movs	r2, #192	; 0xc0
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f013 f820 	bl	8015d10 <memcpy>
 8002cd0:	4668      	mov	r0, sp
 8002cd2:	f104 0310 	add.w	r3, r4, #16
 8002cd6:	22b0      	movs	r2, #176	; 0xb0
 8002cd8:	4619      	mov	r1, r3
 8002cda:	f013 f819 	bl	8015d10 <memcpy>
 8002cde:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002ce2:	f001 fe21 	bl	8004928 <lowlayer_computeAndWritePulse>
		  break;
 8002ce6:	e039      	b.n	8002d5c <StartDefaultTask+0x103c>
					  current_duty_state = SCARA_DUTY_STATE_FINISH;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	f887 3d2d 	strb.w	r3, [r7, #3373]	; 0xd2d
		  break;
 8002cee:	e035      	b.n	8002d5c <StartDefaultTask+0x103c>

		  case SCARA_DUTY_STATE_FINISH:{
		  	current_duty_state = SCARA_DUTY_STATE_READY;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	f887 3d2d 	strb.w	r3, [r7, #3373]	; 0xd2d
			positionNext.t = 0;
 8002cf6:	49a4      	ldr	r1, [pc, #656]	; (8002f88 <StartDefaultTask+0x1268>)
 8002cf8:	f04f 0200 	mov.w	r2, #0
 8002cfc:	f04f 0300 	mov.w	r3, #0
 8002d00:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
			positionNext.total_time = 0;
 8002d04:	49a0      	ldr	r1, [pc, #640]	; (8002f88 <StartDefaultTask+0x1268>)
 8002d06:	f04f 0200 	mov.w	r2, #0
 8002d0a:	f04f 0300 	mov.w	r3, #0
 8002d0e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
			positionNext.q = 0;
 8002d12:	499d      	ldr	r1, [pc, #628]	; (8002f88 <StartDefaultTask+0x1268>)
 8002d14:	f04f 0200 	mov.w	r2, #0
 8002d18:	f04f 0300 	mov.w	r3, #0
 8002d1c:	e9c1 2300 	strd	r2, r3, [r1]

			detail_array[0] = NONE;
 8002d20:	f607 1314 	addw	r3, r7, #2324	; 0x914
 8002d24:	2223      	movs	r2, #35	; 0x23
 8002d26:	701a      	strb	r2, [r3, #0]
			respond_lenght = commandRespond1(RPD_DONE, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002d28:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8002d2c:	6899      	ldr	r1, [r3, #8]
 8002d2e:	f607 22d4 	addw	r2, r7, #2772	; 0xad4
 8002d32:	f8d7 3d30 	ldr.w	r3, [r7, #3376]	; 0xd30
 8002d36:	4413      	add	r3, r2
 8002d38:	f607 1214 	addw	r2, r7, #2324	; 0x914
 8002d3c:	9300      	str	r3, [sp, #0]
 8002d3e:	2301      	movs	r3, #1
 8002d40:	2005      	movs	r0, #5
 8002d42:	f7fe fe51 	bl	80019e8 <commandRespond1>
 8002d46:	f8c7 0d00 	str.w	r0, [r7, #3328]	; 0xd00
			total_respond_length += respond_lenght;
 8002d4a:	f8d7 2d30 	ldr.w	r2, [r7, #3376]	; 0xd30
 8002d4e:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8002d52:	4413      	add	r3, r2
 8002d54:	f8c7 3d30 	str.w	r3, [r7, #3376]	; 0xd30
		  }
		  break;
 8002d58:	e000      	b.n	8002d5c <StartDefaultTask+0x103c>
		  
		  default:
			  break;
 8002d5a:	bf00      	nop
		  }
	  }

	  break;
 8002d5c:	e2c5      	b.n	80032ea <StartDefaultTask+0x15ca>
	  case SCARA_METHOD_TEST:
	  {
		  lowlayer_writePulse(test_value[0], test_value[1], test_value[2], test_value[3]);
 8002d5e:	f607 23fc 	addw	r3, r7, #2812	; 0xafc
 8002d62:	f993 0000 	ldrsb.w	r0, [r3]
 8002d66:	f607 23fc 	addw	r3, r7, #2812	; 0xafc
 8002d6a:	f993 1001 	ldrsb.w	r1, [r3, #1]
 8002d6e:	f607 23fc 	addw	r3, r7, #2812	; 0xafc
 8002d72:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8002d76:	f607 23fc 	addw	r3, r7, #2812	; 0xafc
 8002d7a:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8002d7e:	f001 ff7b 	bl	8004c78 <lowlayer_writePulse>
	  }
	  break;
 8002d82:	e2b2      	b.n	80032ea <StartDefaultTask+0x15ca>


	  case SCARA_METHOD_PICK_AND_PLACE:
	  {
		  switch(current_duty_state) {
 8002d84:	f897 3d2d 	ldrb.w	r3, [r7, #3373]	; 0xd2d
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	2b03      	cmp	r3, #3
 8002d8c:	f200 82ac 	bhi.w	80032e8 <StartDefaultTask+0x15c8>
 8002d90:	a201      	add	r2, pc, #4	; (adr r2, 8002d98 <StartDefaultTask+0x1078>)
 8002d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d96:	bf00      	nop
 8002d98:	08002da9 	.word	0x08002da9
 8002d9c:	080031f3 	.word	0x080031f3
 8002da0:	080032d9 	.word	0x080032d9
 8002da4:	08002ddb 	.word	0x08002ddb
		  case SCARA_DUTY_STATE_INIT:{
			  //Object = calloc(8, sizeof(SCARA_Pick_And_Place_Package));
			  object_tail_pointer = 0;
 8002da8:	2300      	movs	r3, #0
 8002daa:	f887 3d16 	strb.w	r3, [r7, #3350]	; 0xd16
			  object_head_pointer = 0;
 8002dae:	2300      	movs	r3, #0
 8002db0:	f887 3d15 	strb.w	r3, [r7, #3349]	; 0xd15
			  operation_state = SCARA_MOVE_TO_TARGET;
 8002db4:	2300      	movs	r3, #0
 8002db6:	f887 3d17 	strb.w	r3, [r7, #3351]	; 0xd17
			  current_duty_state = SCARA_DUTY_STATE_OPERATION;
 8002dba:	2304      	movs	r3, #4
 8002dbc:	f887 3d2d 	strb.w	r3, [r7, #3373]	; 0xd2d
			  duty_cmd.robot_method = SCARA_METHOD_PICK_AND_PLACE;
 8002dc0:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8002dc4:	2204      	movs	r2, #4
 8002dc6:	705a      	strb	r2, [r3, #1]
			  duty_cmd.path_type = DUTY_PATH_LINE;
 8002dc8:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8002dcc:	2200      	movs	r2, #0
 8002dce:	739a      	strb	r2, [r3, #14]
			  duty_cmd.space_type = DUTY_SPACE_TASK;
 8002dd0:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	735a      	strb	r2, [r3, #13]
		  }
		  break;
 8002dd8:	e283      	b.n	80032e2 <StartDefaultTask+0x15c2>

		  case SCARA_DUTY_STATE_OPERATION:{
			  if(object_tail_pointer != object_head_pointer){
 8002dda:	f897 2d16 	ldrb.w	r2, [r7, #3350]	; 0xd16
 8002dde:	f897 3d15 	ldrb.w	r3, [r7, #3349]	; 0xd15
 8002de2:	429a      	cmp	r2, r3
 8002de4:	f000 827a 	beq.w	80032dc <StartDefaultTask+0x15bc>
				  switch(operation_state){
 8002de8:	f897 3d17 	ldrb.w	r3, [r7, #3351]	; 0xd17
 8002dec:	2b07      	cmp	r3, #7
 8002dee:	f200 8182 	bhi.w	80030f6 <StartDefaultTask+0x13d6>
 8002df2:	a201      	add	r2, pc, #4	; (adr r2, 8002df8 <StartDefaultTask+0x10d8>)
 8002df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df8:	08002e19 	.word	0x08002e19
 8002dfc:	08002ee9 	.word	0x08002ee9
 8002e00:	08002f17 	.word	0x08002f17
 8002e04:	08002f2d 	.word	0x08002f2d
 8002e08:	08002f99 	.word	0x08002f99
 8002e0c:	08003085 	.word	0x08003085
 8002e10:	080030b3 	.word	0x080030b3
 8002e14:	080030c9 	.word	0x080030c9
					  case SCARA_MOVE_TO_TARGET:{
						  double wait_time = TIMER_SCALE*((uint16_t)(TIM2->CNT - Object[object_tail_pointer].timer_value)) + MOVE_TIME + PUT_DOWN_TIME_ON_OBJECT;
 8002e18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1e:	b29a      	uxth	r2, r3
 8002e20:	f897 3d16 	ldrb.w	r3, [r7, #3350]	; 0xd16
 8002e24:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8002e28:	20c8      	movs	r0, #200	; 0xc8
 8002e2a:	fb00 f303 	mul.w	r3, r0, r3
 8002e2e:	440b      	add	r3, r1
 8002e30:	33c0      	adds	r3, #192	; 0xc0
 8002e32:	881b      	ldrh	r3, [r3, #0]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	ee07 3a90 	vmov	s15, r3
 8002e3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e40:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8002f8c <StartDefaultTask+0x126c>
 8002e44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e48:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8002f90 <StartDefaultTask+0x1270>
 8002e4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e50:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8002f90 <StartDefaultTask+0x1270>
 8002e54:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e58:	ee17 0a90 	vmov	r0, s15
 8002e5c:	f7fd fb74 	bl	8000548 <__aeabi_f2d>
 8002e60:	4602      	mov	r2, r0
 8002e62:	460b      	mov	r3, r1
 8002e64:	f607 41d8 	addw	r1, r7, #3288	; 0xcd8
 8002e68:	e9c1 2300 	strd	r2, r3, [r1]
						  Object[object_tail_pointer].object_position.y += wait_time*conveyor_speed;
 8002e6c:	f897 3d16 	ldrb.w	r3, [r7, #3350]	; 0xd16
 8002e70:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002e74:	21c8      	movs	r1, #200	; 0xc8
 8002e76:	fb01 f303 	mul.w	r3, r1, r3
 8002e7a:	4413      	add	r3, r2
 8002e7c:	3350      	adds	r3, #80	; 0x50
 8002e7e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002e82:	4b44      	ldr	r3, [pc, #272]	; (8002f94 <StartDefaultTask+0x1274>)
 8002e84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e88:	f607 43d8 	addw	r3, r7, #3288	; 0xcd8
 8002e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e90:	f7fd fbb2 	bl	80005f8 <__aeabi_dmul>
 8002e94:	4602      	mov	r2, r0
 8002e96:	460b      	mov	r3, r1
 8002e98:	f897 6d16 	ldrb.w	r6, [r7, #3350]	; 0xd16
 8002e9c:	4620      	mov	r0, r4
 8002e9e:	4629      	mov	r1, r5
 8002ea0:	f7fd f9f4 	bl	800028c <__adddf3>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 8002eac:	21c8      	movs	r1, #200	; 0xc8
 8002eae:	fb01 f106 	mul.w	r1, r1, r6
 8002eb2:	4401      	add	r1, r0
 8002eb4:	3150      	adds	r1, #80	; 0x50
 8002eb6:	e9c1 2300 	strd	r2, r3, [r1]
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 8002eba:	f897 3d16 	ldrb.w	r3, [r7, #3350]	; 0xd16
 8002ebe:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002ec2:	21c8      	movs	r1, #200	; 0xc8
 8002ec4:	fb01 f303 	mul.w	r3, r1, r3
 8002ec8:	4413      	add	r3, r2
 8002eca:	f103 0158 	add.w	r1, r3, #88	; 0x58
 8002ece:	a326      	add	r3, pc, #152	; (adr r3, 8002f68 <StartDefaultTask+0x1248>)
 8002ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed4:	e9c1 2300 	strd	r2, r3, [r1]
						  state_time = MOVE_TIME;
 8002ed8:	a325      	add	r3, pc, #148	; (adr r3, 8002f70 <StartDefaultTask+0x1250>)
 8002eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ede:	f607 5108 	addw	r1, r7, #3336	; 0xd08
 8002ee2:	e9c1 2300 	strd	r2, r3, [r1]
					  }
					  break;
 8002ee6:	e106      	b.n	80030f6 <StartDefaultTask+0x13d6>

					  case SCARA_MOVE_DOWN_ON_OBJECT:{
						  Object[object_tail_pointer].object_position.z = DOWN_HEIGHT_ON_OBJECT;
 8002ee8:	f897 3d16 	ldrb.w	r3, [r7, #3350]	; 0xd16
 8002eec:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002ef0:	21c8      	movs	r1, #200	; 0xc8
 8002ef2:	fb01 f303 	mul.w	r3, r1, r3
 8002ef6:	4413      	add	r3, r2
 8002ef8:	f103 0158 	add.w	r1, r3, #88	; 0x58
 8002efc:	a31e      	add	r3, pc, #120	; (adr r3, 8002f78 <StartDefaultTask+0x1258>)
 8002efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f02:	e9c1 2300 	strd	r2, r3, [r1]
						  state_time = PUT_DOWN_TIME_ON_OBJECT;
 8002f06:	a31a      	add	r3, pc, #104	; (adr r3, 8002f70 <StartDefaultTask+0x1250>)
 8002f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f0c:	f607 5108 	addw	r1, r7, #3336	; 0xd08
 8002f10:	e9c1 2300 	strd	r2, r3, [r1]
					  }
					  break;
 8002f14:	e0ef      	b.n	80030f6 <StartDefaultTask+0x13d6>
					  case SCARA_ATTACH:{
						  state_time = ATTACH_TIME;
 8002f16:	a312      	add	r3, pc, #72	; (adr r3, 8002f60 <StartDefaultTask+0x1240>)
 8002f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f1c:	f607 5108 	addw	r1, r7, #3336	; 0xd08
 8002f20:	e9c1 2300 	strd	r2, r3, [r1]
						  scaraSetOutput(1);
 8002f24:	2001      	movs	r0, #1
 8002f26:	f007 fa67 	bl	800a3f8 <scaraSetOutput>
					  }
					  break;
 8002f2a:	e0e4      	b.n	80030f6 <StartDefaultTask+0x13d6>
					  case SCARA_MOVE_UP_ON_OBJECT:{
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 8002f2c:	f897 3d16 	ldrb.w	r3, [r7, #3350]	; 0xd16
 8002f30:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002f34:	21c8      	movs	r1, #200	; 0xc8
 8002f36:	fb01 f303 	mul.w	r3, r1, r3
 8002f3a:	4413      	add	r3, r2
 8002f3c:	f103 0158 	add.w	r1, r3, #88	; 0x58
 8002f40:	a309      	add	r3, pc, #36	; (adr r3, 8002f68 <StartDefaultTask+0x1248>)
 8002f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f46:	e9c1 2300 	strd	r2, r3, [r1]
						  state_time = PICK_UP_TIME_ON_OBJECT;
 8002f4a:	a309      	add	r3, pc, #36	; (adr r3, 8002f70 <StartDefaultTask+0x1250>)
 8002f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f50:	f607 5108 	addw	r1, r7, #3336	; 0xd08
 8002f54:	e9c1 2300 	strd	r2, r3, [r1]
					  }
					  break;
 8002f58:	e0cd      	b.n	80030f6 <StartDefaultTask+0x13d6>
 8002f5a:	bf00      	nop
 8002f5c:	f3af 8000 	nop.w
 8002f60:	40000000 	.word	0x40000000
 8002f64:	3f847ae1 	.word	0x3f847ae1
 8002f68:	00000000 	.word	0x00000000
 8002f6c:	40606000 	.word	0x40606000
 8002f70:	60000000 	.word	0x60000000
 8002f74:	3fe66666 	.word	0x3fe66666
 8002f78:	00000000 	.word	0x00000000
 8002f7c:	405fa000 	.word	0x405fa000
 8002f80:	0801c0dc 	.word	0x0801c0dc
 8002f84:	20005af0 	.word	0x20005af0
 8002f88:	20005c70 	.word	0x20005c70
 8002f8c:	399c09bf 	.word	0x399c09bf
 8002f90:	3f333333 	.word	0x3f333333
 8002f94:	20000ba8 	.word	0x20000ba8
					  case SCARA_MOVE_TO_SLOT :{

						  Object[object_tail_pointer].object_position.x = SLot_Cordinate[Object[object_tail_pointer].object_position.object_type].posx;
 8002f98:	f897 3d16 	ldrb.w	r3, [r7, #3350]	; 0xd16
 8002f9c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002fa0:	21c8      	movs	r1, #200	; 0xc8
 8002fa2:	fb01 f303 	mul.w	r3, r1, r3
 8002fa6:	4413      	add	r3, r2
 8002fa8:	33b8      	adds	r3, #184	; 0xb8
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f897 1d16 	ldrb.w	r1, [r7, #3350]	; 0xd16
 8002fb2:	f107 0218 	add.w	r2, r7, #24
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	4403      	add	r3, r0
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	4413      	add	r3, r2
 8002fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc4:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 8002fc8:	24c8      	movs	r4, #200	; 0xc8
 8002fca:	fb04 f101 	mul.w	r1, r4, r1
 8002fce:	4401      	add	r1, r0
 8002fd0:	3148      	adds	r1, #72	; 0x48
 8002fd2:	e9c1 2300 	strd	r2, r3, [r1]
						  Object[object_tail_pointer].object_position.y = SLot_Cordinate[Object[object_tail_pointer].object_position.object_type].posy;
 8002fd6:	f897 3d16 	ldrb.w	r3, [r7, #3350]	; 0xd16
 8002fda:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002fde:	21c8      	movs	r1, #200	; 0xc8
 8002fe0:	fb01 f303 	mul.w	r3, r1, r3
 8002fe4:	4413      	add	r3, r2
 8002fe6:	33b8      	adds	r3, #184	; 0xb8
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f897 1d16 	ldrb.w	r1, [r7, #3350]	; 0xd16
 8002ff0:	f107 0218 	add.w	r2, r7, #24
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	005b      	lsls	r3, r3, #1
 8002ff8:	4403      	add	r3, r0
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	4413      	add	r3, r2
 8002ffe:	3308      	adds	r3, #8
 8003000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003004:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 8003008:	24c8      	movs	r4, #200	; 0xc8
 800300a:	fb04 f101 	mul.w	r1, r4, r1
 800300e:	4401      	add	r1, r0
 8003010:	3150      	adds	r1, #80	; 0x50
 8003012:	e9c1 2300 	strd	r2, r3, [r1]
						  Object[object_tail_pointer].object_position.roll = SLot_Cordinate[Object[object_tail_pointer].object_position.object_type].roll;
 8003016:	f897 3d16 	ldrb.w	r3, [r7, #3350]	; 0xd16
 800301a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800301e:	21c8      	movs	r1, #200	; 0xc8
 8003020:	fb01 f303 	mul.w	r3, r1, r3
 8003024:	4413      	add	r3, r2
 8003026:	33b8      	adds	r3, #184	; 0xb8
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	4618      	mov	r0, r3
 800302c:	f897 1d16 	ldrb.w	r1, [r7, #3350]	; 0xd16
 8003030:	f107 0218 	add.w	r2, r7, #24
 8003034:	4603      	mov	r3, r0
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	4403      	add	r3, r0
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	4413      	add	r3, r2
 800303e:	3310      	adds	r3, #16
 8003040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003044:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 8003048:	24c8      	movs	r4, #200	; 0xc8
 800304a:	fb04 f101 	mul.w	r1, r4, r1
 800304e:	4401      	add	r1, r0
 8003050:	3160      	adds	r1, #96	; 0x60
 8003052:	e9c1 2300 	strd	r2, r3, [r1]
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 8003056:	f897 3d16 	ldrb.w	r3, [r7, #3350]	; 0xd16
 800305a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800305e:	21c8      	movs	r1, #200	; 0xc8
 8003060:	fb01 f303 	mul.w	r3, r1, r3
 8003064:	4413      	add	r3, r2
 8003066:	f103 0158 	add.w	r1, r3, #88	; 0x58
 800306a:	a3b6      	add	r3, pc, #728	; (adr r3, 8003344 <StartDefaultTask+0x1624>)
 800306c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003070:	e9c1 2300 	strd	r2, r3, [r1]
						  state_time = MOVE_TIME;
 8003074:	a3b5      	add	r3, pc, #724	; (adr r3, 800334c <StartDefaultTask+0x162c>)
 8003076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800307a:	f607 5108 	addw	r1, r7, #3336	; 0xd08
 800307e:	e9c1 2300 	strd	r2, r3, [r1]
					  }
					  break;
 8003082:	e038      	b.n	80030f6 <StartDefaultTask+0x13d6>
					  case SCARA_MOVE_DOWN_ON_SLOT:{
						  Object[object_tail_pointer].object_position.z = DOWN_HEIGHT_ON_SLOT;
 8003084:	f897 3d16 	ldrb.w	r3, [r7, #3350]	; 0xd16
 8003088:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800308c:	21c8      	movs	r1, #200	; 0xc8
 800308e:	fb01 f303 	mul.w	r3, r1, r3
 8003092:	4413      	add	r3, r2
 8003094:	f103 0158 	add.w	r1, r3, #88	; 0x58
 8003098:	a3ae      	add	r3, pc, #696	; (adr r3, 8003354 <StartDefaultTask+0x1634>)
 800309a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800309e:	e9c1 2300 	strd	r2, r3, [r1]
						  state_time = PUT_DOWN_TIME_ON_SLOT;
 80030a2:	a3ae      	add	r3, pc, #696	; (adr r3, 800335c <StartDefaultTask+0x163c>)
 80030a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a8:	f607 5108 	addw	r1, r7, #3336	; 0xd08
 80030ac:	e9c1 2300 	strd	r2, r3, [r1]
					  }
					  break;
 80030b0:	e021      	b.n	80030f6 <StartDefaultTask+0x13d6>
					  case SCARA_RELEASE:{
						  state_time = DETACH_TIME;
 80030b2:	a39f      	add	r3, pc, #636	; (adr r3, 8003330 <StartDefaultTask+0x1610>)
 80030b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b8:	f607 5108 	addw	r1, r7, #3336	; 0xd08
 80030bc:	e9c1 2300 	strd	r2, r3, [r1]
						  scaraSetOutput(0);
 80030c0:	2000      	movs	r0, #0
 80030c2:	f007 f999 	bl	800a3f8 <scaraSetOutput>
					  }
					  break;
 80030c6:	e016      	b.n	80030f6 <StartDefaultTask+0x13d6>
					  case SCARA_MOVE_UP_ON_SLOT:{
						  state_time = PICK_UP_TIME_ON_SLOT;
 80030c8:	a3a4      	add	r3, pc, #656	; (adr r3, 800335c <StartDefaultTask+0x163c>)
 80030ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ce:	f607 5108 	addw	r1, r7, #3336	; 0xd08
 80030d2:	e9c1 2300 	strd	r2, r3, [r1]
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 80030d6:	f897 3d16 	ldrb.w	r3, [r7, #3350]	; 0xd16
 80030da:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80030de:	21c8      	movs	r1, #200	; 0xc8
 80030e0:	fb01 f303 	mul.w	r3, r1, r3
 80030e4:	4413      	add	r3, r2
 80030e6:	f103 0158 	add.w	r1, r3, #88	; 0x58
 80030ea:	a396      	add	r3, pc, #600	; (adr r3, 8003344 <StartDefaultTask+0x1624>)
 80030ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f0:	e9c1 2300 	strd	r2, r3, [r1]
					  }
					  break;
 80030f4:	bf00      	nop
				  }
				  memcpy(&duty_cmd.target_point, &Object[object_tail_pointer].object_position, sizeof(SCARA_PositionTypeDef));
 80030f6:	f897 3d16 	ldrb.w	r3, [r7, #3350]	; 0xd16
 80030fa:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80030fe:	21c8      	movs	r1, #200	; 0xc8
 8003100:	fb01 f303 	mul.w	r3, r1, r3
 8003104:	18d1      	adds	r1, r2, r3
 8003106:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 800310a:	3328      	adds	r3, #40	; 0x28
 800310c:	22c0      	movs	r2, #192	; 0xc0
 800310e:	4618      	mov	r0, r3
 8003110:	f012 fdfe 	bl	8015d10 <memcpy>
				  duty_cmd.time_total = state_time;
 8003114:	f507 6130 	add.w	r1, r7, #2816	; 0xb00
 8003118:	f607 5308 	addw	r3, r7, #3336	; 0xd08
 800311c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003120:	e9c1 2308 	strd	r2, r3, [r1, #32]
				  SCARA_StatusTypeDef status1;
				  duty_cmd.v_factor = 0;
 8003124:	f507 6130 	add.w	r1, r7, #2816	; 0xb00
 8003128:	f04f 0200 	mov.w	r2, #0
 800312c:	f04f 0300 	mov.w	r3, #0
 8003130:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
				  if(operation_state == SCARA_ATTACH || operation_state == SCARA_RELEASE){
 8003134:	f897 3d17 	ldrb.w	r3, [r7, #3351]	; 0xd17
 8003138:	2b02      	cmp	r3, #2
 800313a:	d003      	beq.n	8003144 <StartDefaultTask+0x1424>
 800313c:	f897 3d17 	ldrb.w	r3, [r7, #3351]	; 0xd17
 8003140:	2b06      	cmp	r3, #6
 8003142:	d103      	bne.n	800314c <StartDefaultTask+0x142c>
					  status1 = SCARA_STATUS_OK;
 8003144:	2300      	movs	r3, #0
 8003146:	f887 3d07 	strb.w	r3, [r7, #3335]	; 0xd07
 800314a:	e010      	b.n	800316e <StartDefaultTask+0x144e>
				  }else{
					  status1 = scaraInitDuty(duty_cmd);
 800314c:	f507 6430 	add.w	r4, r7, #2816	; 0xb00
 8003150:	4668      	mov	r0, sp
 8003152:	f104 0310 	add.w	r3, r4, #16
 8003156:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 800315a:	4619      	mov	r1, r3
 800315c:	f012 fdd8 	bl	8015d10 <memcpy>
 8003160:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003164:	f002 f8ac 	bl	80052c0 <scaraInitDuty>
 8003168:	4603      	mov	r3, r0
 800316a:	f887 3d07 	strb.w	r3, [r7, #3335]	; 0xd07
				  }
				  if ( SCARA_STATUS_OK == status1) {
 800316e:	f897 3d07 	ldrb.w	r3, [r7, #3335]	; 0xd07
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10b      	bne.n	800318e <StartDefaultTask+0x146e>
				  	current_duty_state = SCARA_DUTY_STATE_FLOW;
 8003176:	2302      	movs	r3, #2
 8003178:	f887 3d2d 	strb.w	r3, [r7, #3373]	; 0xd2d
				  	run_time = 0;
 800317c:	f04f 0200 	mov.w	r2, #0
 8003180:	f04f 0300 	mov.w	r3, #0
 8003184:	f607 5118 	addw	r1, r7, #3352	; 0xd18
 8003188:	e9c1 2300 	strd	r2, r3, [r1]
 800318c:	e031      	b.n	80031f2 <StartDefaultTask+0x14d2>
				  } else {
					object_tail_pointer = (object_tail_pointer+1)%8;
 800318e:	f897 3d16 	ldrb.w	r3, [r7, #3350]	; 0xd16
 8003192:	3301      	adds	r3, #1
 8003194:	425a      	negs	r2, r3
 8003196:	f003 0307 	and.w	r3, r3, #7
 800319a:	f002 0207 	and.w	r2, r2, #7
 800319e:	bf58      	it	pl
 80031a0:	4253      	negpl	r3, r2
 80031a2:	f887 3d16 	strb.w	r3, [r7, #3350]	; 0xd16
					operation_state = SCARA_MOVE_TO_TARGET;
 80031a6:	2300      	movs	r3, #0
 80031a8:	f887 3d17 	strb.w	r3, [r7, #3351]	; 0xd17
					detail_array[0] = status1;
 80031ac:	f607 1314 	addw	r3, r7, #2324	; 0x914
 80031b0:	f897 2d07 	ldrb.w	r2, [r7, #3335]	; 0xd07
 80031b4:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80031b6:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80031ba:	6899      	ldr	r1, [r3, #8]
 80031bc:	f607 22d4 	addw	r2, r7, #2772	; 0xad4
 80031c0:	f8d7 3d30 	ldr.w	r3, [r7, #3376]	; 0xd30
 80031c4:	4413      	add	r3, r2
 80031c6:	f607 1214 	addw	r2, r7, #2324	; 0x914
 80031ca:	9300      	str	r3, [sp, #0]
 80031cc:	2301      	movs	r3, #1
 80031ce:	2007      	movs	r0, #7
 80031d0:	f7fe fc0a 	bl	80019e8 <commandRespond1>
 80031d4:	f8c7 0d00 	str.w	r0, [r7, #3328]	; 0xd00
					total_respond_length += respond_lenght;
 80031d8:	f8d7 2d30 	ldr.w	r2, [r7, #3376]	; 0xd30
 80031dc:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 80031e0:	4413      	add	r3, r2
 80031e2:	f8c7 3d30 	str.w	r3, [r7, #3376]	; 0xd30
					LOG_REPORT("INIT FAIL", __LINE__);
 80031e6:	f44f 7173 	mov.w	r1, #972	; 0x3cc
 80031ea:	4853      	ldr	r0, [pc, #332]	; (8003338 <StartDefaultTask+0x1618>)
 80031ec:	f7fe fc4c 	bl	8001a88 <LOG_REPORT>
					break;
 80031f0:	e077      	b.n	80032e2 <StartDefaultTask+0x15c2>


		  case SCARA_DUTY_STATE_FLOW:{
			  SCARA_StatusTypeDef status;
			  // Increase run time
			  run_time += T_SAMPLING;
 80031f2:	a34f      	add	r3, pc, #316	; (adr r3, 8003330 <StartDefaultTask+0x1610>)
 80031f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f8:	f607 5118 	addw	r1, r7, #3352	; 0xd18
 80031fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003200:	f7fd f844 	bl	800028c <__adddf3>
 8003204:	4602      	mov	r2, r0
 8003206:	460b      	mov	r3, r1
 8003208:	f607 5118 	addw	r1, r7, #3352	; 0xd18
 800320c:	e9c1 2300 	strd	r2, r3, [r1]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 8003210:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 8003214:	ed93 0b00 	vldr	d0, [r3]
 8003218:	f007 f980 	bl	800a51c <scaraIsFinish>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d022      	beq.n	8003268 <StartDefaultTask+0x1548>
				current_duty_state = SCARA_DUTY_STATE_OPERATION;
 8003222:	2304      	movs	r3, #4
 8003224:	f887 3d2d 	strb.w	r3, [r7, #3373]	; 0xd2d
				if(operation_state == SCARA_MOVE_UP_ON_SLOT){
 8003228:	f897 3d17 	ldrb.w	r3, [r7, #3351]	; 0xd17
 800322c:	2b07      	cmp	r3, #7
 800322e:	d10f      	bne.n	8003250 <StartDefaultTask+0x1530>
					operation_state = SCARA_MOVE_TO_TARGET;
 8003230:	2300      	movs	r3, #0
 8003232:	f887 3d17 	strb.w	r3, [r7, #3351]	; 0xd17
					object_tail_pointer = (object_tail_pointer+1)%8;
 8003236:	f897 3d16 	ldrb.w	r3, [r7, #3350]	; 0xd16
 800323a:	3301      	adds	r3, #1
 800323c:	425a      	negs	r2, r3
 800323e:	f003 0307 	and.w	r3, r3, #7
 8003242:	f002 0207 	and.w	r2, r2, #7
 8003246:	bf58      	it	pl
 8003248:	4253      	negpl	r3, r2
 800324a:	f887 3d16 	strb.w	r3, [r7, #3350]	; 0xd16
 800324e:	e004      	b.n	800325a <StartDefaultTask+0x153a>
				}else{
					operation_state += 1; //next state
 8003250:	f897 3d17 	ldrb.w	r3, [r7, #3351]	; 0xd17
 8003254:	3301      	adds	r3, #1
 8003256:	f887 3d17 	strb.w	r3, [r7, #3351]	; 0xd17
				}
				lowlayer_readTruePosition(&positionNext);
 800325a:	4838      	ldr	r0, [pc, #224]	; (800333c <StartDefaultTask+0x161c>)
 800325c:	f001 f9d4 	bl	8004608 <lowlayer_readTruePosition>
				kinematicForward(&positionNext);
 8003260:	4836      	ldr	r0, [pc, #216]	; (800333c <StartDefaultTask+0x161c>)
 8003262:	f000 fafd 	bl	8003860 <kinematicForward>
				  }else{
					  current_duty_state = SCARA_DUTY_STATE_FINISH;
				  }
			  }
		  }
		  break;
 8003266:	e03b      	b.n	80032e0 <StartDefaultTask+0x15c0>
			  } else if(operation_state != SCARA_ATTACH && operation_state != SCARA_RELEASE){
 8003268:	f897 3d17 	ldrb.w	r3, [r7, #3351]	; 0xd17
 800326c:	2b02      	cmp	r3, #2
 800326e:	d037      	beq.n	80032e0 <StartDefaultTask+0x15c0>
 8003270:	f897 3d17 	ldrb.w	r3, [r7, #3351]	; 0xd17
 8003274:	2b06      	cmp	r3, #6
 8003276:	d033      	beq.n	80032e0 <StartDefaultTask+0x15c0>
				status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 8003278:	4c31      	ldr	r4, [pc, #196]	; (8003340 <StartDefaultTask+0x1620>)
 800327a:	4668      	mov	r0, sp
 800327c:	f104 0308 	add.w	r3, r4, #8
 8003280:	22b8      	movs	r2, #184	; 0xb8
 8003282:	4619      	mov	r1, r3
 8003284:	f012 fd44 	bl	8015d10 <memcpy>
 8003288:	e894 000c 	ldmia.w	r4, {r2, r3}
 800328c:	482b      	ldr	r0, [pc, #172]	; (800333c <StartDefaultTask+0x161c>)
 800328e:	f607 5118 	addw	r1, r7, #3352	; 0xd18
 8003292:	ed91 0b00 	vldr	d0, [r1]
 8003296:	f004 fff3 	bl	8008280 <scaraFlowDuty>
 800329a:	4603      	mov	r3, r0
 800329c:	f887 3cd7 	strb.w	r3, [r7, #3287]	; 0xcd7
				if ( SCARA_STATUS_OK == status) {
 80032a0:	f897 3cd7 	ldrb.w	r3, [r7, #3287]	; 0xcd7
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d113      	bne.n	80032d0 <StartDefaultTask+0x15b0>
					lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 80032a8:	4c25      	ldr	r4, [pc, #148]	; (8003340 <StartDefaultTask+0x1620>)
 80032aa:	4a24      	ldr	r2, [pc, #144]	; (800333c <StartDefaultTask+0x161c>)
 80032ac:	ab2c      	add	r3, sp, #176	; 0xb0
 80032ae:	4611      	mov	r1, r2
 80032b0:	22c0      	movs	r2, #192	; 0xc0
 80032b2:	4618      	mov	r0, r3
 80032b4:	f012 fd2c 	bl	8015d10 <memcpy>
 80032b8:	4668      	mov	r0, sp
 80032ba:	f104 0310 	add.w	r3, r4, #16
 80032be:	22b0      	movs	r2, #176	; 0xb0
 80032c0:	4619      	mov	r1, r3
 80032c2:	f012 fd25 	bl	8015d10 <memcpy>
 80032c6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80032ca:	f001 fb2d 	bl	8004928 <lowlayer_computeAndWritePulse>
		  break;
 80032ce:	e007      	b.n	80032e0 <StartDefaultTask+0x15c0>
					  current_duty_state = SCARA_DUTY_STATE_FINISH;
 80032d0:	2303      	movs	r3, #3
 80032d2:	f887 3d2d 	strb.w	r3, [r7, #3373]	; 0xd2d
		  break;
 80032d6:	e003      	b.n	80032e0 <StartDefaultTask+0x15c0>

		  case SCARA_DUTY_STATE_FINISH:
			  //error
			  //free(Object);
		  break;
 80032d8:	bf00      	nop
 80032da:	e005      	b.n	80032e8 <StartDefaultTask+0x15c8>
				  break;
 80032dc:	bf00      	nop
 80032de:	e003      	b.n	80032e8 <StartDefaultTask+0x15c8>
		  break;
 80032e0:	bf00      	nop
		  }
	  }
	  break;
 80032e2:	e001      	b.n	80032e8 <StartDefaultTask+0x15c8>
	  break;
 80032e4:	bf00      	nop
 80032e6:	e000      	b.n	80032ea <StartDefaultTask+0x15ca>
	  break;
 80032e8:	bf00      	nop
	//   // Send through USB
	//   if (usb_lenght > 0) {
	// 	  CDC_Transmit_FS(usb_buff, (uint16_t)usb_lenght);
	//   }

	if(total_respond_length > 0){
 80032ea:	f8d7 3d30 	ldr.w	r3, [r7, #3376]	; 0xd30
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	dd08      	ble.n	8003304 <StartDefaultTask+0x15e4>
		CDC_Transmit_FS(respond, total_respond_length);
 80032f2:	f8d7 3d30 	ldr.w	r3, [r7, #3376]	; 0xd30
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	f607 23d4 	addw	r3, r7, #2772	; 0xad4
 80032fc:	4611      	mov	r1, r2
 80032fe:	4618      	mov	r0, r3
 8003300:	f012 f888 	bl	8015414 <CDC_Transmit_FS>
	}

	  /* 5--- Update ---*/
	  scaraSetMethod(current_method);
 8003304:	f897 3d2f 	ldrb.w	r3, [r7, #3375]	; 0xd2f
 8003308:	4618      	mov	r0, r3
 800330a:	f007 f8a7 	bl	800a45c <scaraSetMethod>
	  scaraSetMode(current_mode);
 800330e:	f897 3d2e 	ldrb.w	r3, [r7, #3374]	; 0xd2e
 8003312:	4618      	mov	r0, r3
 8003314:	f007 f892 	bl	800a43c <scaraSetMode>
	  scaraSetDutyState(current_duty_state);
 8003318:	f897 3d2d 	ldrb.w	r3, [r7, #3373]	; 0xd2d
 800331c:	4618      	mov	r0, r3
 800331e:	f007 f87d 	bl	800a41c <scaraSetDutyState>

    osDelay(1);
 8003322:	2001      	movs	r0, #1
 8003324:	f00f f955 	bl	80125d2 <osDelay>
	  osSignalWait(0x01, osWaitForever); // Very Important
 8003328:	f7fe bd5f 	b.w	8001dea <StartDefaultTask+0xca>
 800332c:	f3af 8000 	nop.w
 8003330:	40000000 	.word	0x40000000
 8003334:	3f847ae1 	.word	0x3f847ae1
 8003338:	0801c0dc 	.word	0x0801c0dc
 800333c:	20005c70 	.word	0x20005c70
 8003340:	20005af0 	.word	0x20005af0
 8003344:	00000000 	.word	0x00000000
 8003348:	40606000 	.word	0x40606000
 800334c:	60000000 	.word	0x60000000
 8003350:	3fe66666 	.word	0x3fe66666
 8003354:	40000000 	.word	0x40000000
 8003358:	404d278d 	.word	0x404d278d
 800335c:	a0000000 	.word	0xa0000000
 8003360:	3fe99999 	.word	0x3fe99999

08003364 <Start_USB_RX_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_USB_RX_Task */
void Start_USB_RX_Task(void const * argument)
{
 8003364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003366:	f2ad 5d6c 	subw	sp, sp, #1388	; 0x56c
 800336a:	af70      	add	r7, sp, #448	; 0x1c0
 800336c:	1d3b      	adds	r3, r7, #4
 800336e:	6018      	str	r0, [r3, #0]
	int32_t				respond_lenght;
	int32_t				message_lenght;
	int32_t 			detail_length;

	// Default value
	duty_cmd.key_speed = 1;
 8003370:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8003374:	2201      	movs	r2, #1
 8003376:	605a      	str	r2, [r3, #4]

  /* Infinite loop */
  for(;;)
  {
	  for(;;) {
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, END_CHAR);
 8003378:	2129      	movs	r1, #41	; 0x29
 800337a:	4868      	ldr	r0, [pc, #416]	; (800351c <Start_USB_RX_Task+0x1b8>)
 800337c:	f000 fee2 	bl	8004144 <ringBuff_DistanceOf>
 8003380:	f8c7 03a0 	str.w	r0, [r7, #928]	; 0x3a0
		  if ( -1 != distance ) {
 8003384:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8003388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800338c:	d0f4      	beq.n	8003378 <Start_USB_RX_Task+0x14>
 800338e:	466b      	mov	r3, sp
 8003390:	461e      	mov	r6, r3
			  uint8_t temp[distance+1];
 8003392:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8003396:	1c5c      	adds	r4, r3, #1
 8003398:	1e63      	subs	r3, r4, #1
 800339a:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
 800339e:	4623      	mov	r3, r4
 80033a0:	4618      	mov	r0, r3
 80033a2:	f04f 0100 	mov.w	r1, #0
 80033a6:	f04f 0200 	mov.w	r2, #0
 80033aa:	f04f 0300 	mov.w	r3, #0
 80033ae:	00cb      	lsls	r3, r1, #3
 80033b0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80033b4:	00c2      	lsls	r2, r0, #3
 80033b6:	4623      	mov	r3, r4
 80033b8:	4618      	mov	r0, r3
 80033ba:	f04f 0100 	mov.w	r1, #0
 80033be:	f04f 0200 	mov.w	r2, #0
 80033c2:	f04f 0300 	mov.w	r3, #0
 80033c6:	00cb      	lsls	r3, r1, #3
 80033c8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80033cc:	00c2      	lsls	r2, r0, #3
 80033ce:	4623      	mov	r3, r4
 80033d0:	3307      	adds	r3, #7
 80033d2:	08db      	lsrs	r3, r3, #3
 80033d4:	00db      	lsls	r3, r3, #3
 80033d6:	ebad 0d03 	sub.w	sp, sp, r3
 80033da:	ab70      	add	r3, sp, #448	; 0x1c0
 80033dc:	3300      	adds	r3, #0
 80033de:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
			  int32_t ret;
			  ringBuff_PopArray(&usb_rx_ringbuff, temp, distance + 1);
 80033e2:	f8d7 1398 	ldr.w	r1, [r7, #920]	; 0x398
 80033e6:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 80033ea:	3301      	adds	r3, #1
 80033ec:	461a      	mov	r2, r3
 80033ee:	484b      	ldr	r0, [pc, #300]	; (800351c <Start_USB_RX_Task+0x1b8>)
 80033f0:	f000 fe87 	bl	8004102 <ringBuff_PopArray>
			  ret = unPackPayload(temp, distance + 1);
 80033f4:	f8d7 2398 	ldr.w	r2, [r7, #920]	; 0x398
 80033f8:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 80033fc:	3301      	adds	r3, #1
 80033fe:	4619      	mov	r1, r3
 8003400:	4610      	mov	r0, r2
 8003402:	f7fe fb87 	bl	8001b14 <unPackPayload>
 8003406:	f8c7 0394 	str.w	r0, [r7, #916]	; 0x394
			  if( -1 == ret) {
 800340a:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 800340e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003412:	d105      	bne.n	8003420 <Start_USB_RX_Task+0xbc>
				  LOG_REPORT("UNPACK FAIL", __LINE__);
 8003414:	f240 4146 	movw	r1, #1094	; 0x446
 8003418:	4841      	ldr	r0, [pc, #260]	; (8003520 <Start_USB_RX_Task+0x1bc>)
 800341a:	f7fe fb35 	bl	8001a88 <LOG_REPORT>
 800341e:	e07a      	b.n	8003516 <Start_USB_RX_Task+0x1b2>
			  } else {
				  LOG_REPORT((char*) temp, __LINE__);
 8003420:	f8d7 3398 	ldr.w	r3, [r7, #920]	; 0x398
 8003424:	f44f 6189 	mov.w	r1, #1096	; 0x448
 8003428:	4618      	mov	r0, r3
 800342a:	f7fe fb2d 	bl	8001a88 <LOG_REPORT>
				  cmd_type = commandRead(temp, ret, &id_command, &duty_cmd);
 800342e:	f8d7 0398 	ldr.w	r0, [r7, #920]	; 0x398
 8003432:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8003436:	f507 7261 	add.w	r2, r7, #900	; 0x384
 800343a:	f8d7 1394 	ldr.w	r1, [r7, #916]	; 0x394
 800343e:	f7fd fdd7 	bl	8000ff0 <commandRead>
 8003442:	4603      	mov	r3, r0
 8003444:	f887 3393 	strb.w	r3, [r7, #915]	; 0x393
				  memset(detail, 0, sizeof(detail));
 8003448:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800344c:	2287      	movs	r2, #135	; 0x87
 800344e:	2100      	movs	r1, #0
 8003450:	4618      	mov	r0, r3
 8003452:	f012 fc85 	bl	8015d60 <memset>
				  detail_length = 0;
 8003456:	f107 0308 	add.w	r3, r7, #8
 800345a:	2200      	movs	r2, #0
 800345c:	601a      	str	r2, [r3, #0]
				  rpd_type = commandReply(cmd_type, duty_cmd, detail, &detail_length);
 800345e:	f507 74e0 	add.w	r4, r7, #448	; 0x1c0
 8003462:	f897 5393 	ldrb.w	r5, [r7, #915]	; 0x393
 8003466:	f107 0308 	add.w	r3, r7, #8
 800346a:	936f      	str	r3, [sp, #444]	; 0x1bc
 800346c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003470:	936e      	str	r3, [sp, #440]	; 0x1b8
 8003472:	4668      	mov	r0, sp
 8003474:	f104 0308 	add.w	r3, r4, #8
 8003478:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800347c:	4619      	mov	r1, r3
 800347e:	f012 fc47 	bl	8015d10 <memcpy>
 8003482:	e894 000c 	ldmia.w	r4, {r2, r3}
 8003486:	4628      	mov	r0, r5
 8003488:	f7fe f8fa 	bl	8001680 <commandReply>
 800348c:	4603      	mov	r3, r0
 800348e:	f887 3392 	strb.w	r3, [r7, #914]	; 0x392

				  if ( RPD_DUTY == rpd_type) {
 8003492:	f897 3392 	ldrb.w	r3, [r7, #914]	; 0x392
 8003496:	2b09      	cmp	r3, #9
 8003498:	d123      	bne.n	80034e2 <Start_USB_RX_Task+0x17e>
					  DUTY_Command_TypeDef *dataMail;
					  dataMail = NULL;
 800349a:	2300      	movs	r3, #0
 800349c:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
					  // Wait allocate
					  while (dataMail == NULL) {
 80034a0:	e008      	b.n	80034b4 <Start_USB_RX_Task+0x150>
						  dataMail = osMailAlloc(commandMailHandle, osWaitForever);
 80034a2:	4b20      	ldr	r3, [pc, #128]	; (8003524 <Start_USB_RX_Task+0x1c0>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f04f 31ff 	mov.w	r1, #4294967295
 80034aa:	4618      	mov	r0, r3
 80034ac:	f00f faa2 	bl	80129f4 <osMailAlloc>
 80034b0:	f8c7 03a4 	str.w	r0, [r7, #932]	; 0x3a4
					  while (dataMail == NULL) {
 80034b4:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0f2      	beq.n	80034a2 <Start_USB_RX_Task+0x13e>
					  }
					  memcpy( dataMail, &duty_cmd, sizeof(DUTY_Command_TypeDef));
 80034bc:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80034c0:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 80034c4:	4619      	mov	r1, r3
 80034c6:	f8d7 03a4 	ldr.w	r0, [r7, #932]	; 0x3a4
 80034ca:	f012 fc21 	bl	8015d10 <memcpy>
					  osStatus result;
					  result = osMailPut(commandMailHandle, dataMail);
 80034ce:	4b15      	ldr	r3, [pc, #84]	; (8003524 <Start_USB_RX_Task+0x1c0>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f8d7 13a4 	ldr.w	r1, [r7, #932]	; 0x3a4
 80034d6:	4618      	mov	r0, r3
 80034d8:	f00f faa2 	bl	8012a20 <osMailPut>
 80034dc:	f8c7 0388 	str.w	r0, [r7, #904]	; 0x388
 80034e0:	e019      	b.n	8003516 <Start_USB_RX_Task+0x1b2>
				//   }else if( RPD_POSITION == rpd_type) { 
				// 	  CDC_Transmit_FS(detail, 84);
				  }else {
					//   memset(respond, 0, sizeof(respond));
					//   memset(message, 0, sizeof(message));
					  respond_lenght	= commandRespond1(rpd_type, cmd_type,
 80034e2:	f897 1393 	ldrb.w	r1, [r7, #915]	; 0x393
 80034e6:	f107 0308 	add.w	r3, r7, #8
 80034ea:	681c      	ldr	r4, [r3, #0]
 80034ec:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80034f0:	f897 0392 	ldrb.w	r0, [r7, #914]	; 0x392
 80034f4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80034f8:	9300      	str	r3, [sp, #0]
 80034fa:	4623      	mov	r3, r4
 80034fc:	f7fe fa74 	bl	80019e8 <commandRespond1>
 8003500:	f8c7 038c 	str.w	r0, [r7, #908]	; 0x38c
							  	  	  	  (char *)detail, detail_length,
										  (char *)respond);
					  //message_lenght	= packPayload(respond, message, respond_lenght);
					  CDC_Transmit_FS(respond, respond_lenght);
 8003504:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 8003508:	b29a      	uxth	r2, r3
 800350a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800350e:	4611      	mov	r1, r2
 8003510:	4618      	mov	r0, r3
 8003512:	f011 ff7f 	bl	8015414 <CDC_Transmit_FS>
 8003516:	46b5      	mov	sp, r6
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, END_CHAR);
 8003518:	e72e      	b.n	8003378 <Start_USB_RX_Task+0x14>
 800351a:	bf00      	nop
 800351c:	20000004 	.word	0x20000004
 8003520:	0801c198 	.word	0x0801c198
 8003524:	20004e74 	.word	0x20004e74

08003528 <FSMC_Write>:
/* Includes ------------------------------------------------------------------*/
#include "fsmc.h"

/* USER CODE BEGIN 0 */
void FSMC_Write(uint32_t ui_address, uint32_t ui_data)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
	*(volatile uint16_t *)ui_address = ui_data;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	b292      	uxth	r2, r2
 8003538:	801a      	strh	r2, [r3, #0]
}
 800353a:	bf00      	nop
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr

08003546 <FSMC_Read>:

uint16_t FSMC_Read(uint32_t ui_address) {
 8003546:	b480      	push	{r7}
 8003548:	b083      	sub	sp, #12
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
	return *(volatile uint16_t *)ui_address;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	881b      	ldrh	r3, [r3, #0]
 8003552:	b29b      	uxth	r3, r3
}
 8003554:	4618      	mov	r0, r3
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <MX_FSMC_Init>:

NOR_HandleTypeDef hnor1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b088      	sub	sp, #32
 8003564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8003566:	1d3b      	adds	r3, r7, #4
 8003568:	2200      	movs	r2, #0
 800356a:	601a      	str	r2, [r3, #0]
 800356c:	605a      	str	r2, [r3, #4]
 800356e:	609a      	str	r2, [r3, #8]
 8003570:	60da      	str	r2, [r3, #12]
 8003572:	611a      	str	r2, [r3, #16]
 8003574:	615a      	str	r2, [r3, #20]
 8003576:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the NOR1 memory initialization sequence
  */
  hnor1.Instance = FSMC_NORSRAM_DEVICE;
 8003578:	4b27      	ldr	r3, [pc, #156]	; (8003618 <MX_FSMC_Init+0xb8>)
 800357a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800357e:	601a      	str	r2, [r3, #0]
  hnor1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8003580:	4b25      	ldr	r3, [pc, #148]	; (8003618 <MX_FSMC_Init+0xb8>)
 8003582:	4a26      	ldr	r2, [pc, #152]	; (800361c <MX_FSMC_Init+0xbc>)
 8003584:	605a      	str	r2, [r3, #4]
  /* hnor1.Init */
  hnor1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8003586:	4b24      	ldr	r3, [pc, #144]	; (8003618 <MX_FSMC_Init+0xb8>)
 8003588:	2200      	movs	r2, #0
 800358a:	609a      	str	r2, [r3, #8]
  hnor1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_ENABLE;
 800358c:	4b22      	ldr	r3, [pc, #136]	; (8003618 <MX_FSMC_Init+0xb8>)
 800358e:	2202      	movs	r2, #2
 8003590:	60da      	str	r2, [r3, #12]
  hnor1.Init.MemoryType = FSMC_MEMORY_TYPE_NOR;
 8003592:	4b21      	ldr	r3, [pc, #132]	; (8003618 <MX_FSMC_Init+0xb8>)
 8003594:	2208      	movs	r2, #8
 8003596:	611a      	str	r2, [r3, #16]
  hnor1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8003598:	4b1f      	ldr	r3, [pc, #124]	; (8003618 <MX_FSMC_Init+0xb8>)
 800359a:	2210      	movs	r2, #16
 800359c:	615a      	str	r2, [r3, #20]
  hnor1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800359e:	4b1e      	ldr	r3, [pc, #120]	; (8003618 <MX_FSMC_Init+0xb8>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	619a      	str	r2, [r3, #24]
  hnor1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80035a4:	4b1c      	ldr	r3, [pc, #112]	; (8003618 <MX_FSMC_Init+0xb8>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	61da      	str	r2, [r3, #28]
  hnor1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80035aa:	4b1b      	ldr	r3, [pc, #108]	; (8003618 <MX_FSMC_Init+0xb8>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	621a      	str	r2, [r3, #32]
  hnor1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80035b0:	4b19      	ldr	r3, [pc, #100]	; (8003618 <MX_FSMC_Init+0xb8>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	625a      	str	r2, [r3, #36]	; 0x24
  hnor1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80035b6:	4b18      	ldr	r3, [pc, #96]	; (8003618 <MX_FSMC_Init+0xb8>)
 80035b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80035bc:	629a      	str	r2, [r3, #40]	; 0x28
  hnor1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80035be:	4b16      	ldr	r3, [pc, #88]	; (8003618 <MX_FSMC_Init+0xb8>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80035c4:	4b14      	ldr	r3, [pc, #80]	; (8003618 <MX_FSMC_Init+0xb8>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	631a      	str	r2, [r3, #48]	; 0x30
  hnor1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80035ca:	4b13      	ldr	r3, [pc, #76]	; (8003618 <MX_FSMC_Init+0xb8>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	635a      	str	r2, [r3, #52]	; 0x34
  hnor1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80035d0:	4b11      	ldr	r3, [pc, #68]	; (8003618 <MX_FSMC_Init+0xb8>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	639a      	str	r2, [r3, #56]	; 0x38
  hnor1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80035d6:	4b10      	ldr	r3, [pc, #64]	; (8003618 <MX_FSMC_Init+0xb8>)
 80035d8:	2200      	movs	r2, #0
 80035da:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 80035dc:	230f      	movs	r3, #15
 80035de:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80035e0:	230f      	movs	r3, #15
 80035e2:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80035e4:	23ff      	movs	r3, #255	; 0xff
 80035e6:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80035e8:	230f      	movs	r3, #15
 80035ea:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80035ec:	2310      	movs	r3, #16
 80035ee:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80035f0:	2311      	movs	r3, #17
 80035f2:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80035f4:	2300      	movs	r3, #0
 80035f6:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_NOR_Init(&hnor1, &Timing, NULL) != HAL_OK)
 80035f8:	1d3b      	adds	r3, r7, #4
 80035fa:	2200      	movs	r2, #0
 80035fc:	4619      	mov	r1, r3
 80035fe:	4806      	ldr	r0, [pc, #24]	; (8003618 <MX_FSMC_Init+0xb8>)
 8003600:	f008 fda8 	bl	800c154 <HAL_NOR_Init>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 800360a:	f000 fcdb 	bl	8003fc4 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800360e:	bf00      	nop
 8003610:	3720      	adds	r7, #32
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	20004e7c 	.word	0x20004e7c
 800361c:	a0000104 	.word	0xa0000104

08003620 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003626:	1d3b      	adds	r3, r7, #4
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	605a      	str	r2, [r3, #4]
 800362e:	609a      	str	r2, [r3, #8]
 8003630:	60da      	str	r2, [r3, #12]
 8003632:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8003634:	4b24      	ldr	r3, [pc, #144]	; (80036c8 <HAL_FSMC_MspInit+0xa8>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d140      	bne.n	80036be <HAL_FSMC_MspInit+0x9e>
    return;
  }
  FSMC_Initialized = 1;
 800363c:	4b22      	ldr	r3, [pc, #136]	; (80036c8 <HAL_FSMC_MspInit+0xa8>)
 800363e:	2201      	movs	r2, #1
 8003640:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8003642:	2300      	movs	r3, #0
 8003644:	603b      	str	r3, [r7, #0]
 8003646:	4b21      	ldr	r3, [pc, #132]	; (80036cc <HAL_FSMC_MspInit+0xac>)
 8003648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364a:	4a20      	ldr	r2, [pc, #128]	; (80036cc <HAL_FSMC_MspInit+0xac>)
 800364c:	f043 0301 	orr.w	r3, r3, #1
 8003650:	6393      	str	r3, [r2, #56]	; 0x38
 8003652:	4b1e      	ldr	r3, [pc, #120]	; (80036cc <HAL_FSMC_MspInit+0xac>)
 8003654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	603b      	str	r3, [r7, #0]
 800365c:	683b      	ldr	r3, [r7, #0]
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  PB7   ------> FSMC_NL
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800365e:	f64f 7380 	movw	r3, #65408	; 0xff80
 8003662:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003664:	2302      	movs	r3, #2
 8003666:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003668:	2300      	movs	r3, #0
 800366a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800366c:	2303      	movs	r3, #3
 800366e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8003670:	230c      	movs	r3, #12
 8003672:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003674:	1d3b      	adds	r3, r7, #4
 8003676:	4619      	mov	r1, r3
 8003678:	4815      	ldr	r0, [pc, #84]	; (80036d0 <HAL_FSMC_MspInit+0xb0>)
 800367a:	f008 fbb5 	bl	800bde8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800367e:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8003682:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003684:	2302      	movs	r3, #2
 8003686:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003688:	2300      	movs	r3, #0
 800368a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800368c:	2303      	movs	r3, #3
 800368e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8003690:	230c      	movs	r3, #12
 8003692:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003694:	1d3b      	adds	r3, r7, #4
 8003696:	4619      	mov	r1, r3
 8003698:	480e      	ldr	r0, [pc, #56]	; (80036d4 <HAL_FSMC_MspInit+0xb4>)
 800369a:	f008 fba5 	bl	800bde8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800369e:	2380      	movs	r3, #128	; 0x80
 80036a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a2:	2302      	movs	r3, #2
 80036a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a6:	2300      	movs	r3, #0
 80036a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036aa:	2303      	movs	r3, #3
 80036ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80036ae:	230c      	movs	r3, #12
 80036b0:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036b2:	1d3b      	adds	r3, r7, #4
 80036b4:	4619      	mov	r1, r3
 80036b6:	4808      	ldr	r0, [pc, #32]	; (80036d8 <HAL_FSMC_MspInit+0xb8>)
 80036b8:	f008 fb96 	bl	800bde8 <HAL_GPIO_Init>
 80036bc:	e000      	b.n	80036c0 <HAL_FSMC_MspInit+0xa0>
    return;
 80036be:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80036c0:	3718      	adds	r7, #24
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	20001004 	.word	0x20001004
 80036cc:	40023800 	.word	0x40023800
 80036d0:	40021000 	.word	0x40021000
 80036d4:	40020c00 	.word	0x40020c00
 80036d8:	40020400 	.word	0x40020400

080036dc <HAL_NOR_MspInit>:

void HAL_NOR_MspInit(NOR_HandleTypeDef* norHandle){
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NOR_MspInit 0 */

  /* USER CODE END NOR_MspInit 0 */
  HAL_FSMC_MspInit();
 80036e4:	f7ff ff9c 	bl	8003620 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NOR_MspInit 1 */

  /* USER CODE END NOR_MspInit 1 */
}
 80036e8:	bf00      	nop
 80036ea:	3708      	adds	r7, #8
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b08a      	sub	sp, #40	; 0x28
 80036f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036f6:	f107 0314 	add.w	r3, r7, #20
 80036fa:	2200      	movs	r2, #0
 80036fc:	601a      	str	r2, [r3, #0]
 80036fe:	605a      	str	r2, [r3, #4]
 8003700:	609a      	str	r2, [r3, #8]
 8003702:	60da      	str	r2, [r3, #12]
 8003704:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003706:	2300      	movs	r3, #0
 8003708:	613b      	str	r3, [r7, #16]
 800370a:	4b51      	ldr	r3, [pc, #324]	; (8003850 <MX_GPIO_Init+0x160>)
 800370c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370e:	4a50      	ldr	r2, [pc, #320]	; (8003850 <MX_GPIO_Init+0x160>)
 8003710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003714:	6313      	str	r3, [r2, #48]	; 0x30
 8003716:	4b4e      	ldr	r3, [pc, #312]	; (8003850 <MX_GPIO_Init+0x160>)
 8003718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800371e:	613b      	str	r3, [r7, #16]
 8003720:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003722:	2300      	movs	r3, #0
 8003724:	60fb      	str	r3, [r7, #12]
 8003726:	4b4a      	ldr	r3, [pc, #296]	; (8003850 <MX_GPIO_Init+0x160>)
 8003728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372a:	4a49      	ldr	r2, [pc, #292]	; (8003850 <MX_GPIO_Init+0x160>)
 800372c:	f043 0301 	orr.w	r3, r3, #1
 8003730:	6313      	str	r3, [r2, #48]	; 0x30
 8003732:	4b47      	ldr	r3, [pc, #284]	; (8003850 <MX_GPIO_Init+0x160>)
 8003734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	60fb      	str	r3, [r7, #12]
 800373c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800373e:	2300      	movs	r3, #0
 8003740:	60bb      	str	r3, [r7, #8]
 8003742:	4b43      	ldr	r3, [pc, #268]	; (8003850 <MX_GPIO_Init+0x160>)
 8003744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003746:	4a42      	ldr	r2, [pc, #264]	; (8003850 <MX_GPIO_Init+0x160>)
 8003748:	f043 0310 	orr.w	r3, r3, #16
 800374c:	6313      	str	r3, [r2, #48]	; 0x30
 800374e:	4b40      	ldr	r3, [pc, #256]	; (8003850 <MX_GPIO_Init+0x160>)
 8003750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003752:	f003 0310 	and.w	r3, r3, #16
 8003756:	60bb      	str	r3, [r7, #8]
 8003758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800375a:	2300      	movs	r3, #0
 800375c:	607b      	str	r3, [r7, #4]
 800375e:	4b3c      	ldr	r3, [pc, #240]	; (8003850 <MX_GPIO_Init+0x160>)
 8003760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003762:	4a3b      	ldr	r2, [pc, #236]	; (8003850 <MX_GPIO_Init+0x160>)
 8003764:	f043 0302 	orr.w	r3, r3, #2
 8003768:	6313      	str	r3, [r2, #48]	; 0x30
 800376a:	4b39      	ldr	r3, [pc, #228]	; (8003850 <MX_GPIO_Init+0x160>)
 800376c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	607b      	str	r3, [r7, #4]
 8003774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003776:	2300      	movs	r3, #0
 8003778:	603b      	str	r3, [r7, #0]
 800377a:	4b35      	ldr	r3, [pc, #212]	; (8003850 <MX_GPIO_Init+0x160>)
 800377c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377e:	4a34      	ldr	r2, [pc, #208]	; (8003850 <MX_GPIO_Init+0x160>)
 8003780:	f043 0308 	orr.w	r3, r3, #8
 8003784:	6313      	str	r3, [r2, #48]	; 0x30
 8003786:	4b32      	ldr	r3, [pc, #200]	; (8003850 <MX_GPIO_Init+0x160>)
 8003788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378a:	f003 0308 	and.w	r3, r3, #8
 800378e:	603b      	str	r3, [r7, #0]
 8003790:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUTPUT_1_Pin|OUTPUT_2_Pin|USB_SIGN_Pin, GPIO_PIN_RESET);
 8003792:	2200      	movs	r2, #0
 8003794:	f44f 6141 	mov.w	r1, #3088	; 0xc10
 8003798:	482e      	ldr	r0, [pc, #184]	; (8003854 <MX_GPIO_Init+0x164>)
 800379a:	f008 fcc1 	bl	800c120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ENCODER_RESET_Pin|PULSE_WRITE_Pin|CAPTURE_ENABLE_Pin|STOP_Pin, GPIO_PIN_RESET);
 800379e:	2200      	movs	r2, #0
 80037a0:	f641 0148 	movw	r1, #6216	; 0x1848
 80037a4:	482c      	ldr	r0, [pc, #176]	; (8003858 <MX_GPIO_Init+0x168>)
 80037a6:	f008 fcbb 	bl	800c120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEP_SLEEP_Pin|STEP_RESET_Pin|STEP_ENABLE_Pin, GPIO_PIN_RESET);
 80037aa:	2200      	movs	r2, #0
 80037ac:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80037b0:	482a      	ldr	r0, [pc, #168]	; (800385c <MX_GPIO_Init+0x16c>)
 80037b2:	f008 fcb5 	bl	800c120 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OUTPUT_1_Pin|OUTPUT_2_Pin|USB_SIGN_Pin;
 80037b6:	f44f 6341 	mov.w	r3, #3088	; 0xc10
 80037ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037bc:	2301      	movs	r3, #1
 80037be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c0:	2300      	movs	r3, #0
 80037c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037c4:	2300      	movs	r3, #0
 80037c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037c8:	f107 0314 	add.w	r3, r7, #20
 80037cc:	4619      	mov	r1, r3
 80037ce:	4821      	ldr	r0, [pc, #132]	; (8003854 <MX_GPIO_Init+0x164>)
 80037d0:	f008 fb0a 	bl	800bde8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = ENCODER_RESET_Pin|CAPTURE_ENABLE_Pin|STOP_Pin;
 80037d4:	f640 0348 	movw	r3, #2120	; 0x848
 80037d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037da:	2301      	movs	r3, #1
 80037dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037de:	2300      	movs	r3, #0
 80037e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037e2:	2300      	movs	r3, #0
 80037e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037e6:	f107 0314 	add.w	r3, r7, #20
 80037ea:	4619      	mov	r1, r3
 80037ec:	481a      	ldr	r0, [pc, #104]	; (8003858 <MX_GPIO_Init+0x168>)
 80037ee:	f008 fafb 	bl	800bde8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PULSE_WRITE_Pin;
 80037f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037f8:	2301      	movs	r3, #1
 80037fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037fc:	2300      	movs	r3, #0
 80037fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003800:	2303      	movs	r3, #3
 8003802:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PULSE_WRITE_GPIO_Port, &GPIO_InitStruct);
 8003804:	f107 0314 	add.w	r3, r7, #20
 8003808:	4619      	mov	r1, r3
 800380a:	4813      	ldr	r0, [pc, #76]	; (8003858 <MX_GPIO_Init+0x168>)
 800380c:	f008 faec 	bl	800bde8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = CPLD_LIMIT_Pin|CPLD_BUSY_Pin;
 8003810:	f242 0304 	movw	r3, #8196	; 0x2004
 8003814:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003816:	2300      	movs	r3, #0
 8003818:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800381a:	2301      	movs	r3, #1
 800381c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800381e:	f107 0314 	add.w	r3, r7, #20
 8003822:	4619      	mov	r1, r3
 8003824:	480c      	ldr	r0, [pc, #48]	; (8003858 <MX_GPIO_Init+0x168>)
 8003826:	f008 fadf 	bl	800bde8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = STEP_SLEEP_Pin|STEP_RESET_Pin|STEP_ENABLE_Pin;
 800382a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800382e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003830:	2301      	movs	r3, #1
 8003832:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003834:	2300      	movs	r3, #0
 8003836:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003838:	2300      	movs	r3, #0
 800383a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800383c:	f107 0314 	add.w	r3, r7, #20
 8003840:	4619      	mov	r1, r3
 8003842:	4806      	ldr	r0, [pc, #24]	; (800385c <MX_GPIO_Init+0x16c>)
 8003844:	f008 fad0 	bl	800bde8 <HAL_GPIO_Init>

}
 8003848:	bf00      	nop
 800384a:	3728      	adds	r7, #40	; 0x28
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	40023800 	.word	0x40023800
 8003854:	40020400 	.word	0x40020400
 8003858:	40020c00 	.word	0x40020c00
 800385c:	40020000 	.word	0x40020000

08003860 <kinematicForward>:
#include "kinematic.h"
#include "common_def.h"
#include "math.h"
#include "system_params.h"

uint8_t		kinematicForward(SCARA_PositionTypeDef *pnt) {
 8003860:	b5b0      	push	{r4, r5, r7, lr}
 8003862:	b08a      	sub	sp, #40	; 0x28
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
	double x, y, z, roll;

	x =   a1*cos(pnt->Theta1)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800386e:	eeb0 0a47 	vmov.f32	s0, s14
 8003872:	eef0 0a67 	vmov.f32	s1, s15
 8003876:	f016 ff2b 	bl	801a6d0 <cos>
 800387a:	ec51 0b10 	vmov	r0, r1, d0
 800387e:	a382      	add	r3, pc, #520	; (adr r3, 8003a88 <kinematicForward+0x228>)
 8003880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003884:	f7fc feb8 	bl	80005f8 <__aeabi_dmul>
 8003888:	4602      	mov	r2, r0
 800388a:	460b      	mov	r3, r1
 800388c:	4614      	mov	r4, r2
 800388e:	461d      	mov	r5, r3
		+ a2*cos(pnt->Theta1 + pnt->Theta2)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800389c:	f7fc fcf6 	bl	800028c <__adddf3>
 80038a0:	4602      	mov	r2, r0
 80038a2:	460b      	mov	r3, r1
 80038a4:	ec43 2b17 	vmov	d7, r2, r3
 80038a8:	eeb0 0a47 	vmov.f32	s0, s14
 80038ac:	eef0 0a67 	vmov.f32	s1, s15
 80038b0:	f016 ff0e 	bl	801a6d0 <cos>
 80038b4:	ec51 0b10 	vmov	r0, r1, d0
 80038b8:	f04f 0200 	mov.w	r2, #0
 80038bc:	4b78      	ldr	r3, [pc, #480]	; (8003aa0 <kinematicForward+0x240>)
 80038be:	f7fc fe9b 	bl	80005f8 <__aeabi_dmul>
 80038c2:	4602      	mov	r2, r0
 80038c4:	460b      	mov	r3, r1
 80038c6:	4620      	mov	r0, r4
 80038c8:	4629      	mov	r1, r5
 80038ca:	f7fc fcdf 	bl	800028c <__adddf3>
 80038ce:	4602      	mov	r2, r0
 80038d0:	460b      	mov	r3, r1
 80038d2:	4614      	mov	r4, r2
 80038d4:	461d      	mov	r5, r3
		+ a4*cos(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80038e2:	f7fc fcd3 	bl	800028c <__adddf3>
 80038e6:	4602      	mov	r2, r0
 80038e8:	460b      	mov	r3, r1
 80038ea:	4610      	mov	r0, r2
 80038ec:	4619      	mov	r1, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80038f4:	f7fc fcc8 	bl	8000288 <__aeabi_dsub>
 80038f8:	4602      	mov	r2, r0
 80038fa:	460b      	mov	r3, r1
 80038fc:	ec43 2b17 	vmov	d7, r2, r3
 8003900:	eeb0 0a47 	vmov.f32	s0, s14
 8003904:	eef0 0a67 	vmov.f32	s1, s15
 8003908:	f016 fee2 	bl	801a6d0 <cos>
 800390c:	ec51 0b10 	vmov	r0, r1, d0
 8003910:	a35b      	add	r3, pc, #364	; (adr r3, 8003a80 <kinematicForward+0x220>)
 8003912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003916:	f7fc fe6f 	bl	80005f8 <__aeabi_dmul>
 800391a:	4602      	mov	r2, r0
 800391c:	460b      	mov	r3, r1
	x =   a1*cos(pnt->Theta1)
 800391e:	4620      	mov	r0, r4
 8003920:	4629      	mov	r1, r5
 8003922:	f7fc fcb3 	bl	800028c <__adddf3>
 8003926:	4602      	mov	r2, r0
 8003928:	460b      	mov	r3, r1
 800392a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	y =   a1*sin(pnt->Theta1)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8003934:	eeb0 0a47 	vmov.f32	s0, s14
 8003938:	eef0 0a67 	vmov.f32	s1, s15
 800393c:	f016 ff60 	bl	801a800 <sin>
 8003940:	ec51 0b10 	vmov	r0, r1, d0
 8003944:	a350      	add	r3, pc, #320	; (adr r3, 8003a88 <kinematicForward+0x228>)
 8003946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800394a:	f7fc fe55 	bl	80005f8 <__aeabi_dmul>
 800394e:	4602      	mov	r2, r0
 8003950:	460b      	mov	r3, r1
 8003952:	4614      	mov	r4, r2
 8003954:	461d      	mov	r5, r3
		+ a2*sin(pnt->Theta1 + pnt->Theta2)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8003962:	f7fc fc93 	bl	800028c <__adddf3>
 8003966:	4602      	mov	r2, r0
 8003968:	460b      	mov	r3, r1
 800396a:	ec43 2b17 	vmov	d7, r2, r3
 800396e:	eeb0 0a47 	vmov.f32	s0, s14
 8003972:	eef0 0a67 	vmov.f32	s1, s15
 8003976:	f016 ff43 	bl	801a800 <sin>
 800397a:	ec51 0b10 	vmov	r0, r1, d0
 800397e:	f04f 0200 	mov.w	r2, #0
 8003982:	4b47      	ldr	r3, [pc, #284]	; (8003aa0 <kinematicForward+0x240>)
 8003984:	f7fc fe38 	bl	80005f8 <__aeabi_dmul>
 8003988:	4602      	mov	r2, r0
 800398a:	460b      	mov	r3, r1
 800398c:	4620      	mov	r0, r4
 800398e:	4629      	mov	r1, r5
 8003990:	f7fc fc7c 	bl	800028c <__adddf3>
 8003994:	4602      	mov	r2, r0
 8003996:	460b      	mov	r3, r1
 8003998:	4614      	mov	r4, r2
 800399a:	461d      	mov	r5, r3
		+ a4*sin(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80039a8:	f7fc fc70 	bl	800028c <__adddf3>
 80039ac:	4602      	mov	r2, r0
 80039ae:	460b      	mov	r3, r1
 80039b0:	4610      	mov	r0, r2
 80039b2:	4619      	mov	r1, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80039ba:	f7fc fc65 	bl	8000288 <__aeabi_dsub>
 80039be:	4602      	mov	r2, r0
 80039c0:	460b      	mov	r3, r1
 80039c2:	ec43 2b17 	vmov	d7, r2, r3
 80039c6:	eeb0 0a47 	vmov.f32	s0, s14
 80039ca:	eef0 0a67 	vmov.f32	s1, s15
 80039ce:	f016 ff17 	bl	801a800 <sin>
 80039d2:	ec51 0b10 	vmov	r0, r1, d0
 80039d6:	a32a      	add	r3, pc, #168	; (adr r3, 8003a80 <kinematicForward+0x220>)
 80039d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039dc:	f7fc fe0c 	bl	80005f8 <__aeabi_dmul>
 80039e0:	4602      	mov	r2, r0
 80039e2:	460b      	mov	r3, r1
	y =   a1*sin(pnt->Theta1)
 80039e4:	4620      	mov	r0, r4
 80039e6:	4629      	mov	r1, r5
 80039e8:	f7fc fc50 	bl	800028c <__adddf3>
 80039ec:	4602      	mov	r2, r0
 80039ee:	460b      	mov	r3, r1
 80039f0:	e9c7 2306 	strd	r2, r3, [r7, #24]
	z =   d1 - pnt->D3 - d4;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80039fa:	a125      	add	r1, pc, #148	; (adr r1, 8003a90 <kinematicForward+0x230>)
 80039fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003a00:	f7fc fc42 	bl	8000288 <__aeabi_dsub>
 8003a04:	4602      	mov	r2, r0
 8003a06:	460b      	mov	r3, r1
 8003a08:	4610      	mov	r0, r2
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	a322      	add	r3, pc, #136	; (adr r3, 8003a98 <kinematicForward+0x238>)
 8003a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a12:	f7fc fc39 	bl	8000288 <__aeabi_dsub>
 8003a16:	4602      	mov	r2, r0
 8003a18:	460b      	mov	r3, r1
 8003a1a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	roll = pnt->Theta1 + pnt->Theta2 - pnt->Theta4;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8003a2a:	f7fc fc2f 	bl	800028c <__adddf3>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	460b      	mov	r3, r1
 8003a32:	4610      	mov	r0, r2
 8003a34:	4619      	mov	r1, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8003a3c:	f7fc fc24 	bl	8000288 <__aeabi_dsub>
 8003a40:	4602      	mov	r2, r0
 8003a42:	460b      	mov	r3, r1
 8003a44:	e9c7 2302 	strd	r2, r3, [r7, #8]

	pnt->x = x;
 8003a48:	6879      	ldr	r1, [r7, #4]
 8003a4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a4e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	pnt->y = y;
 8003a52:	6879      	ldr	r1, [r7, #4]
 8003a54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a58:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	pnt->z = z;
 8003a5c:	6879      	ldr	r1, [r7, #4]
 8003a5e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003a62:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	pnt->roll = roll;
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a6c:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

	return TRUE;
 8003a70:	2301      	movs	r3, #1
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3728      	adds	r7, #40	; 0x28
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bdb0      	pop	{r4, r5, r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	f3af 8000 	nop.w
 8003a80:	80000000 	.word	0x80000000
 8003a84:	40402e14 	.word	0x40402e14
 8003a88:	00000000 	.word	0x00000000
 8003a8c:	4068a000 	.word	0x4068a000
 8003a90:	00000000 	.word	0x00000000
 8003a94:	406a6000 	.word	0x406a6000
 8003a98:	e0000000 	.word	0xe0000000
 8003a9c:	40536b22 	.word	0x40536b22
 8003aa0:	40640000 	.word	0x40640000
 8003aa4:	00000000 	.word	0x00000000

08003aa8 <kinematicInverse>:

uint8_t		kinematicInverse(SCARA_PositionTypeDef *pnt, SCARA_PositionTypeDef current) {
 8003aa8:	b082      	sub	sp, #8
 8003aaa:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003aae:	b0a0      	sub	sp, #128	; 0x80
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8003ab8:	e881 000c 	stmia.w	r1, {r2, r3}
	double theta1, theta2, theta2_positive, theta2_negative, d3, theta4 , pWx, pWy;
	double s1, c1, s2, s2_positive, s2_negative, c2 , temp;

	d3  = d1 - d4 - pnt->z;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8003ac2:	a1f0      	add	r1, pc, #960	; (adr r1, 8003e84 <kinematicInverse+0x3dc>)
 8003ac4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003ac8:	f7fc fbde 	bl	8000288 <__aeabi_dsub>
 8003acc:	4602      	mov	r2, r0
 8003ace:	460b      	mov	r3, r1
 8003ad0:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	pWx = pnt->x - a4*cos(pnt->roll);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	e9d3 ab12 	ldrd	sl, fp, [r3, #72]	; 0x48
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8003ae0:	eeb0 0a47 	vmov.f32	s0, s14
 8003ae4:	eef0 0a67 	vmov.f32	s1, s15
 8003ae8:	f016 fdf2 	bl	801a6d0 <cos>
 8003aec:	ec51 0b10 	vmov	r0, r1, d0
 8003af0:	a3e6      	add	r3, pc, #920	; (adr r3, 8003e8c <kinematicInverse+0x3e4>)
 8003af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af6:	f7fc fd7f 	bl	80005f8 <__aeabi_dmul>
 8003afa:	4602      	mov	r2, r0
 8003afc:	460b      	mov	r3, r1
 8003afe:	4650      	mov	r0, sl
 8003b00:	4659      	mov	r1, fp
 8003b02:	f7fc fbc1 	bl	8000288 <__aeabi_dsub>
 8003b06:	4602      	mov	r2, r0
 8003b08:	460b      	mov	r3, r1
 8003b0a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	pWy = pnt->y - a4*sin(pnt->roll);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	e9d3 ab14 	ldrd	sl, fp, [r3, #80]	; 0x50
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8003b1a:	eeb0 0a47 	vmov.f32	s0, s14
 8003b1e:	eef0 0a67 	vmov.f32	s1, s15
 8003b22:	f016 fe6d 	bl	801a800 <sin>
 8003b26:	ec51 0b10 	vmov	r0, r1, d0
 8003b2a:	a3d8      	add	r3, pc, #864	; (adr r3, 8003e8c <kinematicInverse+0x3e4>)
 8003b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b30:	f7fc fd62 	bl	80005f8 <__aeabi_dmul>
 8003b34:	4602      	mov	r2, r0
 8003b36:	460b      	mov	r3, r1
 8003b38:	4650      	mov	r0, sl
 8003b3a:	4659      	mov	r1, fp
 8003b3c:	f7fc fba4 	bl	8000288 <__aeabi_dsub>
 8003b40:	4602      	mov	r2, r0
 8003b42:	460b      	mov	r3, r1
 8003b44:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	c2  = (pWx*pWx + pWy*pWy - a1*a1 - a2*a2) / (2*a1*a2);
 8003b48:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003b4c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003b50:	f7fc fd52 	bl	80005f8 <__aeabi_dmul>
 8003b54:	4602      	mov	r2, r0
 8003b56:	460b      	mov	r3, r1
 8003b58:	4692      	mov	sl, r2
 8003b5a:	469b      	mov	fp, r3
 8003b5c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003b60:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003b64:	f7fc fd48 	bl	80005f8 <__aeabi_dmul>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	4650      	mov	r0, sl
 8003b6e:	4659      	mov	r1, fp
 8003b70:	f7fc fb8c 	bl	800028c <__adddf3>
 8003b74:	4602      	mov	r2, r0
 8003b76:	460b      	mov	r3, r1
 8003b78:	4610      	mov	r0, r2
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	a3c5      	add	r3, pc, #788	; (adr r3, 8003e94 <kinematicInverse+0x3ec>)
 8003b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b82:	f7fc fb81 	bl	8000288 <__aeabi_dsub>
 8003b86:	4602      	mov	r2, r0
 8003b88:	460b      	mov	r3, r1
 8003b8a:	4610      	mov	r0, r2
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	f04f 0200 	mov.w	r2, #0
 8003b92:	4bb9      	ldr	r3, [pc, #740]	; (8003e78 <kinematicInverse+0x3d0>)
 8003b94:	f7fc fb78 	bl	8000288 <__aeabi_dsub>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	4610      	mov	r0, r2
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	a3b1      	add	r3, pc, #708	; (adr r3, 8003e68 <kinematicInverse+0x3c0>)
 8003ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba6:	f7fc fe51 	bl	800084c <__aeabi_ddiv>
 8003baa:	4602      	mov	r2, r0
 8003bac:	460b      	mov	r3, r1
 8003bae:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp = 1 - c2*c2;
 8003bb2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003bb6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003bba:	f7fc fd1d 	bl	80005f8 <__aeabi_dmul>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	f04f 0000 	mov.w	r0, #0
 8003bc6:	49ad      	ldr	r1, [pc, #692]	; (8003e7c <kinematicInverse+0x3d4>)
 8003bc8:	f7fc fb5e 	bl	8000288 <__aeabi_dsub>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	460b      	mov	r3, r1
 8003bd0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	if ( temp < 0 ) {
 8003bd4:	f04f 0200 	mov.w	r2, #0
 8003bd8:	f04f 0300 	mov.w	r3, #0
 8003bdc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003be0:	f7fc ff7c 	bl	8000adc <__aeabi_dcmplt>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <kinematicInverse+0x146>
		return FALSE;
 8003bea:	2300      	movs	r3, #0
 8003bec:	e134      	b.n	8003e58 <kinematicInverse+0x3b0>
	}
	s2_positive  = sqrt(temp); // Note that there are 2 solution: elbow up & elbow down
 8003bee:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8003bf2:	f016 fe9d 	bl	801a930 <sqrt>
 8003bf6:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
	s2_negative	 = -s2_positive;
 8003bfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bfc:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c00:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003c04:	63fb      	str	r3, [r7, #60]	; 0x3c

	theta2_positive = atan2(s2_positive,c2);
 8003c06:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 8003c0a:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8003c0e:	f016 fe8d 	bl	801a92c <atan2>
 8003c12:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
	theta2_negative = atan2(s2_negative,c2);
 8003c16:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 8003c1a:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8003c1e:	f016 fe85 	bl	801a92c <atan2>
 8003c22:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	// Choose relevant situation : nearest
	if ( fabs( theta2_positive - current.Theta2) <= fabs( theta2_negative - current.Theta2)) {
 8003c26:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8003c2a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003c2e:	f7fc fb2b 	bl	8000288 <__aeabi_dsub>
 8003c32:	4602      	mov	r2, r0
 8003c34:	460b      	mov	r3, r1
 8003c36:	4614      	mov	r4, r2
 8003c38:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8003c3c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8003c40:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003c44:	f7fc fb20 	bl	8000288 <__aeabi_dsub>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	4690      	mov	r8, r2
 8003c4e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8003c52:	4642      	mov	r2, r8
 8003c54:	464b      	mov	r3, r9
 8003c56:	4620      	mov	r0, r4
 8003c58:	4629      	mov	r1, r5
 8003c5a:	f7fc ff49 	bl	8000af0 <__aeabi_dcmple>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d008      	beq.n	8003c76 <kinematicInverse+0x1ce>
		s2 		= s2_positive;
 8003c64:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003c68:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		theta2 	= theta2_positive;
 8003c6c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003c70:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
 8003c74:	e007      	b.n	8003c86 <kinematicInverse+0x1de>
	} else {
		s2 		= s2_negative;
 8003c76:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003c7a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		theta2 	= theta2_negative;
 8003c7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c82:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	}

	s1 = ((a1 + a2*c2)*pWy - a2*s2*pWx) / (pWx*pWx + pWy*pWy);
 8003c86:	f04f 0200 	mov.w	r2, #0
 8003c8a:	4b7d      	ldr	r3, [pc, #500]	; (8003e80 <kinematicInverse+0x3d8>)
 8003c8c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003c90:	f7fc fcb2 	bl	80005f8 <__aeabi_dmul>
 8003c94:	4602      	mov	r2, r0
 8003c96:	460b      	mov	r3, r1
 8003c98:	4610      	mov	r0, r2
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	a374      	add	r3, pc, #464	; (adr r3, 8003e70 <kinematicInverse+0x3c8>)
 8003c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca2:	f7fc faf3 	bl	800028c <__adddf3>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	460b      	mov	r3, r1
 8003caa:	4610      	mov	r0, r2
 8003cac:	4619      	mov	r1, r3
 8003cae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003cb2:	f7fc fca1 	bl	80005f8 <__aeabi_dmul>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	460b      	mov	r3, r1
 8003cba:	4614      	mov	r4, r2
 8003cbc:	461d      	mov	r5, r3
 8003cbe:	f04f 0200 	mov.w	r2, #0
 8003cc2:	4b6f      	ldr	r3, [pc, #444]	; (8003e80 <kinematicInverse+0x3d8>)
 8003cc4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003cc8:	f7fc fc96 	bl	80005f8 <__aeabi_dmul>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	460b      	mov	r3, r1
 8003cd0:	4610      	mov	r0, r2
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003cd8:	f7fc fc8e 	bl	80005f8 <__aeabi_dmul>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	460b      	mov	r3, r1
 8003ce0:	4620      	mov	r0, r4
 8003ce2:	4629      	mov	r1, r5
 8003ce4:	f7fc fad0 	bl	8000288 <__aeabi_dsub>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	460b      	mov	r3, r1
 8003cec:	4614      	mov	r4, r2
 8003cee:	461d      	mov	r5, r3
 8003cf0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003cf4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003cf8:	f7fc fc7e 	bl	80005f8 <__aeabi_dmul>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	460b      	mov	r3, r1
 8003d00:	4690      	mov	r8, r2
 8003d02:	4699      	mov	r9, r3
 8003d04:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003d08:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003d0c:	f7fc fc74 	bl	80005f8 <__aeabi_dmul>
 8003d10:	4602      	mov	r2, r0
 8003d12:	460b      	mov	r3, r1
 8003d14:	4640      	mov	r0, r8
 8003d16:	4649      	mov	r1, r9
 8003d18:	f7fc fab8 	bl	800028c <__adddf3>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	460b      	mov	r3, r1
 8003d20:	4620      	mov	r0, r4
 8003d22:	4629      	mov	r1, r5
 8003d24:	f7fc fd92 	bl	800084c <__aeabi_ddiv>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	c1 = ((a1 + a2*c2)*pWx + a2*s2*pWy) / (pWx*pWx + pWy*pWy);
 8003d30:	f04f 0200 	mov.w	r2, #0
 8003d34:	4b52      	ldr	r3, [pc, #328]	; (8003e80 <kinematicInverse+0x3d8>)
 8003d36:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003d3a:	f7fc fc5d 	bl	80005f8 <__aeabi_dmul>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	460b      	mov	r3, r1
 8003d42:	4610      	mov	r0, r2
 8003d44:	4619      	mov	r1, r3
 8003d46:	a34a      	add	r3, pc, #296	; (adr r3, 8003e70 <kinematicInverse+0x3c8>)
 8003d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d4c:	f7fc fa9e 	bl	800028c <__adddf3>
 8003d50:	4602      	mov	r2, r0
 8003d52:	460b      	mov	r3, r1
 8003d54:	4610      	mov	r0, r2
 8003d56:	4619      	mov	r1, r3
 8003d58:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003d5c:	f7fc fc4c 	bl	80005f8 <__aeabi_dmul>
 8003d60:	4602      	mov	r2, r0
 8003d62:	460b      	mov	r3, r1
 8003d64:	4614      	mov	r4, r2
 8003d66:	461d      	mov	r5, r3
 8003d68:	f04f 0200 	mov.w	r2, #0
 8003d6c:	4b44      	ldr	r3, [pc, #272]	; (8003e80 <kinematicInverse+0x3d8>)
 8003d6e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003d72:	f7fc fc41 	bl	80005f8 <__aeabi_dmul>
 8003d76:	4602      	mov	r2, r0
 8003d78:	460b      	mov	r3, r1
 8003d7a:	4610      	mov	r0, r2
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003d82:	f7fc fc39 	bl	80005f8 <__aeabi_dmul>
 8003d86:	4602      	mov	r2, r0
 8003d88:	460b      	mov	r3, r1
 8003d8a:	4620      	mov	r0, r4
 8003d8c:	4629      	mov	r1, r5
 8003d8e:	f7fc fa7d 	bl	800028c <__adddf3>
 8003d92:	4602      	mov	r2, r0
 8003d94:	460b      	mov	r3, r1
 8003d96:	4614      	mov	r4, r2
 8003d98:	461d      	mov	r5, r3
 8003d9a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003d9e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003da2:	f7fc fc29 	bl	80005f8 <__aeabi_dmul>
 8003da6:	4602      	mov	r2, r0
 8003da8:	460b      	mov	r3, r1
 8003daa:	4690      	mov	r8, r2
 8003dac:	4699      	mov	r9, r3
 8003dae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003db2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003db6:	f7fc fc1f 	bl	80005f8 <__aeabi_dmul>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	4640      	mov	r0, r8
 8003dc0:	4649      	mov	r1, r9
 8003dc2:	f7fc fa63 	bl	800028c <__adddf3>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	460b      	mov	r3, r1
 8003dca:	4620      	mov	r0, r4
 8003dcc:	4629      	mov	r1, r5
 8003dce:	f7fc fd3d 	bl	800084c <__aeabi_ddiv>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	e9c7 2306 	strd	r2, r3, [r7, #24]
	theta1 = atan2(s1,c1);
 8003dda:	ed97 1b06 	vldr	d1, [r7, #24]
 8003dde:	ed97 0b08 	vldr	d0, [r7, #32]
 8003de2:	f016 fda3 	bl	801a92c <atan2>
 8003de6:	ed87 0b04 	vstr	d0, [r7, #16]
 	theta4 = theta1 + theta2 - pnt->roll;
 8003dea:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003dee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003df2:	f7fc fa4b 	bl	800028c <__adddf3>
 8003df6:	4602      	mov	r2, r0
 8003df8:	460b      	mov	r3, r1
 8003dfa:	4610      	mov	r0, r2
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003e04:	f7fc fa40 	bl	8000288 <__aeabi_dsub>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if ( SCARA_STATUS_OK != scaraCheckWorkSpace4(theta1, theta2, d3, theta4)) {
 8003e10:	ed97 3b02 	vldr	d3, [r7, #8]
 8003e14:	ed97 2b1a 	vldr	d2, [r7, #104]	; 0x68
 8003e18:	ed97 1b1e 	vldr	d1, [r7, #120]	; 0x78
 8003e1c:	ed97 0b04 	vldr	d0, [r7, #16]
 8003e20:	f006 f8c6 	bl	8009fb0 <scaraCheckWorkSpace4>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <kinematicInverse+0x386>
		return FALSE; // Over workspace !!!
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	e014      	b.n	8003e58 <kinematicInverse+0x3b0>
	}
	pnt->Theta1 = theta1;
 8003e2e:	6879      	ldr	r1, [r7, #4]
 8003e30:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003e34:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	pnt->Theta2 = theta2;
 8003e38:	6879      	ldr	r1, [r7, #4]
 8003e3a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003e3e:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	pnt->D3		= d3;
 8003e42:	6879      	ldr	r1, [r7, #4]
 8003e44:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003e48:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	pnt->Theta4 = theta4;
 8003e4c:	6879      	ldr	r1, [r7, #4]
 8003e4e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e52:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80

	return TRUE; // All is well
 8003e56:	2301      	movs	r3, #1
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3780      	adds	r7, #128	; 0x80
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	e8bd 4fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e62:	b002      	add	sp, #8
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	00000000 	.word	0x00000000
 8003e6c:	40eec800 	.word	0x40eec800
 8003e70:	00000000 	.word	0x00000000
 8003e74:	4068a000 	.word	0x4068a000
 8003e78:	40d90000 	.word	0x40d90000
 8003e7c:	3ff00000 	.word	0x3ff00000
 8003e80:	40640000 	.word	0x40640000
 8003e84:	80000000 	.word	0x80000000
 8003e88:	4060aa6e 	.word	0x4060aa6e
 8003e8c:	80000000 	.word	0x80000000
 8003e90:	40402e14 	.word	0x40402e14
 8003e94:	00000000 	.word	0x00000000
 8003e98:	40e2f320 	.word	0x40e2f320

08003e9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003ea0:	f007 faba 	bl	800b418 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003ea4:	f000 f812 	bl	8003ecc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003ea8:	f7ff fc22 	bl	80036f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8003eac:	f7fd fea8 	bl	8001c00 <MX_DMA_Init>
  MX_UART4_Init();
 8003eb0:	f007 f9b4 	bl	800b21c <MX_UART4_Init>
  MX_FSMC_Init();
 8003eb4:	f7ff fb54 	bl	8003560 <MX_FSMC_Init>
  MX_TIM7_Init();
 8003eb8:	f007 f93e 	bl	800b138 <MX_TIM7_Init>
  MX_TIM2_Init();
 8003ebc:	f007 f8ee 	bl	800b09c <MX_TIM2_Init>
  //lowlayer_writePulse(0, 0, 0, 0);
  //HAL_Delay(10);
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8003ec0:	f7fd fed8 	bl	8001c74 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8003ec4:	f00e fb32 	bl	801252c <osKernelStart>
//  		  HAL_Delay(10);
//  	  }
//  lowlayer_writePulse(0, 0, 0, 0);
//  __NOP();

  while (1)
 8003ec8:	e7fe      	b.n	8003ec8 <main+0x2c>
	...

08003ecc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b094      	sub	sp, #80	; 0x50
 8003ed0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ed2:	f107 0320 	add.w	r3, r7, #32
 8003ed6:	2230      	movs	r2, #48	; 0x30
 8003ed8:	2100      	movs	r1, #0
 8003eda:	4618      	mov	r0, r3
 8003edc:	f011 ff40 	bl	8015d60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ee0:	f107 030c 	add.w	r3, r7, #12
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	601a      	str	r2, [r3, #0]
 8003ee8:	605a      	str	r2, [r3, #4]
 8003eea:	609a      	str	r2, [r3, #8]
 8003eec:	60da      	str	r2, [r3, #12]
 8003eee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	60bb      	str	r3, [r7, #8]
 8003ef4:	4b28      	ldr	r3, [pc, #160]	; (8003f98 <SystemClock_Config+0xcc>)
 8003ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef8:	4a27      	ldr	r2, [pc, #156]	; (8003f98 <SystemClock_Config+0xcc>)
 8003efa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003efe:	6413      	str	r3, [r2, #64]	; 0x40
 8003f00:	4b25      	ldr	r3, [pc, #148]	; (8003f98 <SystemClock_Config+0xcc>)
 8003f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f08:	60bb      	str	r3, [r7, #8]
 8003f0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	607b      	str	r3, [r7, #4]
 8003f10:	4b22      	ldr	r3, [pc, #136]	; (8003f9c <SystemClock_Config+0xd0>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a21      	ldr	r2, [pc, #132]	; (8003f9c <SystemClock_Config+0xd0>)
 8003f16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f1a:	6013      	str	r3, [r2, #0]
 8003f1c:	4b1f      	ldr	r3, [pc, #124]	; (8003f9c <SystemClock_Config+0xd0>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f24:	607b      	str	r3, [r7, #4]
 8003f26:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003f2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f30:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f32:	2302      	movs	r3, #2
 8003f34:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003f36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003f3c:	2308      	movs	r3, #8
 8003f3e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003f40:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8003f44:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003f46:	2302      	movs	r3, #2
 8003f48:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003f4a:	2307      	movs	r3, #7
 8003f4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f4e:	f107 0320 	add.w	r3, r7, #32
 8003f52:	4618      	mov	r0, r3
 8003f54:	f009 fad8 	bl	800d508 <HAL_RCC_OscConfig>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8003f5e:	f000 f831 	bl	8003fc4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003f62:	230f      	movs	r3, #15
 8003f64:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003f66:	2302      	movs	r3, #2
 8003f68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003f6e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003f72:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003f74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f78:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003f7a:	f107 030c 	add.w	r3, r7, #12
 8003f7e:	2105      	movs	r1, #5
 8003f80:	4618      	mov	r0, r3
 8003f82:	f009 fd31 	bl	800d9e8 <HAL_RCC_ClockConfig>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d001      	beq.n	8003f90 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003f8c:	f000 f81a 	bl	8003fc4 <Error_Handler>
  }
}
 8003f90:	bf00      	nop
 8003f92:	3750      	adds	r7, #80	; 0x50
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	40023800 	.word	0x40023800
 8003f9c:	40007000 	.word	0x40007000

08003fa0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a04      	ldr	r2, [pc, #16]	; (8003fc0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d101      	bne.n	8003fb6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003fb2:	f007 fa53 	bl	800b45c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003fb6:	bf00      	nop
 8003fb8:	3708      	adds	r7, #8
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	40001000 	.word	0x40001000

08003fc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003fc8:	bf00      	nop
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr

08003fd2 <ringBuff_PushChar>:
 *  data		: data to write
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PushChar(RINGBUFFER_TypeDef *ringbuff, uint8_t data) {
 8003fd2:	b480      	push	{r7}
 8003fd4:	b083      	sub	sp, #12
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
 8003fda:	460b      	mov	r3, r1
 8003fdc:	70fb      	strb	r3, [r7, #3]
	if (ringbuff->isFull_Flag) {
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <ringBuff_PushChar+0x1a>
		return FALSE;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	e024      	b.n	8004036 <ringBuff_PushChar+0x64>
	} else {
			ringbuff->Array[ringbuff->head]	= data;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	78f9      	ldrb	r1, [r7, #3]
 8003ff6:	54d1      	strb	r1, [r2, r3]
			ringbuff->head					= (ringbuff->head + 1) % RINGBUFFER_SIZE;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003ffe:	3301      	adds	r3, #1
 8004000:	425a      	negs	r2, r3
 8004002:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004006:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800400a:	bf58      	it	pl
 800400c:	4253      	negpl	r3, r2
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
			if (ringbuff->head == ringbuff->tail) {
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004020:	429a      	cmp	r2, r3
 8004022:	d103      	bne.n	800402c <ringBuff_PushChar+0x5a>
				ringbuff->isFull_Flag = TRUE;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			}
			ringbuff->isEmpty_Flag = FALSE;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
			return TRUE;
 8004034:	2301      	movs	r3, #1
	}
}
 8004036:	4618      	mov	r0, r3
 8004038:	370c      	adds	r7, #12
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr

08004042 <ringBuff_PopChar>:
 *  *ptr_data	: pointer of destination
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PopChar(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data) {
 8004042:	b480      	push	{r7}
 8004044:	b083      	sub	sp, #12
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
 800404a:	6039      	str	r1, [r7, #0]
	if (ringbuff->isEmpty_Flag) {
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f893 3409 	ldrb.w	r3, [r3, #1033]	; 0x409
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <ringBuff_PopChar+0x18>
		return FALSE;
 8004056:	2300      	movs	r3, #0
 8004058:	e025      	b.n	80040a6 <ringBuff_PopChar+0x64>
	} else {
			*ptr_data		= ringbuff->Array[ringbuff->tail];
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	5cd2      	ldrb	r2, [r2, r3]
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	701a      	strb	r2, [r3, #0]
			ringbuff->tail	= (ringbuff->tail +1) % RINGBUFFER_SIZE;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800406e:	3301      	adds	r3, #1
 8004070:	425a      	negs	r2, r3
 8004072:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004076:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800407a:	bf58      	it	pl
 800407c:	4253      	negpl	r3, r2
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			if (ringbuff->head == ringbuff->tail) {
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004090:	429a      	cmp	r2, r3
 8004092:	d103      	bne.n	800409c <ringBuff_PopChar+0x5a>
				ringbuff->isEmpty_Flag = TRUE;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
			}
			ringbuff->isFull_Flag = FALSE;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			return TRUE;
 80040a4:	2301      	movs	r3, #1
	}
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	370c      	adds	r7, #12
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr

080040b2 <ringBuff_PushArray>:
 *  *ptr_data	: pointer of source
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PushArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b086      	sub	sp, #24
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	60f8      	str	r0, [r7, #12]
 80040ba:	60b9      	str	r1, [r7, #8]
 80040bc:	607a      	str	r2, [r7, #4]
	int16_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 80040be:	2300      	movs	r3, #0
 80040c0:	82fb      	strh	r3, [r7, #22]
 80040c2:	e011      	b.n	80040e8 <ringBuff_PushArray+0x36>
		if ( !ringBuff_PushChar(ringbuff, *(ptr_data + success_number))) {
 80040c4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80040c8:	68ba      	ldr	r2, [r7, #8]
 80040ca:	4413      	add	r3, r2
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	4619      	mov	r1, r3
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	f7ff ff7e 	bl	8003fd2 <ringBuff_PushChar>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00b      	beq.n	80040f4 <ringBuff_PushArray+0x42>
	for (success_number = 0; success_number < len; success_number++) {
 80040dc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	3301      	adds	r3, #1
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	82fb      	strh	r3, [r7, #22]
 80040e8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	dce8      	bgt.n	80040c4 <ringBuff_PushArray+0x12>
 80040f2:	e000      	b.n	80040f6 <ringBuff_PushArray+0x44>
			break;
 80040f4:	bf00      	nop
		}// stop when ring buffer FULL
	}
	return success_number;
 80040f6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3718      	adds	r7, #24
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <ringBuff_PopArray>:
 *  *ptr_data	: pointer of destination
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PopArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 8004102:	b580      	push	{r7, lr}
 8004104:	b086      	sub	sp, #24
 8004106:	af00      	add	r7, sp, #0
 8004108:	60f8      	str	r0, [r7, #12]
 800410a:	60b9      	str	r1, [r7, #8]
 800410c:	607a      	str	r2, [r7, #4]
	int32_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 800410e:	2300      	movs	r3, #0
 8004110:	617b      	str	r3, [r7, #20]
 8004112:	e00c      	b.n	800412e <ringBuff_PopArray+0x2c>
		if ( !ringBuff_PopChar(ringbuff, (ptr_data + success_number))) {
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	68ba      	ldr	r2, [r7, #8]
 8004118:	4413      	add	r3, r2
 800411a:	4619      	mov	r1, r3
 800411c:	68f8      	ldr	r0, [r7, #12]
 800411e:	f7ff ff90 	bl	8004042 <ringBuff_PopChar>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d007      	beq.n	8004138 <ringBuff_PopArray+0x36>
	for (success_number = 0; success_number < len; success_number++) {
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	3301      	adds	r3, #1
 800412c:	617b      	str	r3, [r7, #20]
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	429a      	cmp	r2, r3
 8004134:	dbee      	blt.n	8004114 <ringBuff_PopArray+0x12>
 8004136:	e000      	b.n	800413a <ringBuff_PopArray+0x38>
			break;
 8004138:	bf00      	nop
		}// stop when ring buffer EMPTY
	}
	return success_number;
 800413a:	697b      	ldr	r3, [r7, #20]
}
 800413c:	4618      	mov	r0, r3
 800413e:	3718      	adds	r7, #24
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <ringBuff_DistanceOf>:
 *  cmp_char	: compare character
 *
 *  returns:	: distance from 'tail' to 'cmp_char'
 *  			  -1 'cmp_char' could not be found.
 */
int32_t	ringBuff_DistanceOf	(RINGBUFFER_TypeDef *ringbuff, uint8_t cmp_char) {
 8004144:	b480      	push	{r7}
 8004146:	b087      	sub	sp, #28
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	460b      	mov	r3, r1
 800414e:	70fb      	strb	r3, [r7, #3]
	int32_t index;
	int32_t distance = 0;
 8004150:	2300      	movs	r3, #0
 8004152:	613b      	str	r3, [r7, #16]

	index = ringbuff->tail;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800415a:	617b      	str	r3, [r7, #20]
	if (ringbuff->isFull_Flag) {
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 8004162:	2b00      	cmp	r3, #0
 8004164:	d036      	beq.n	80041d4 <ringBuff_DistanceOf+0x90>
		for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 8004166:	2300      	movs	r3, #0
 8004168:	60fb      	str	r3, [r7, #12]
 800416a:	e018      	b.n	800419e <ringBuff_DistanceOf+0x5a>
				if ( cmp_char == ringbuff->Array[index]) {
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	4413      	add	r3, r2
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	78fa      	ldrb	r2, [r7, #3]
 8004176:	429a      	cmp	r2, r3
 8004178:	d101      	bne.n	800417e <ringBuff_DistanceOf+0x3a>
					return distance;
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	e037      	b.n	80041ee <ringBuff_DistanceOf+0xaa>
				}
				distance++;
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	3301      	adds	r3, #1
 8004182:	613b      	str	r3, [r7, #16]
		for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	3301      	adds	r3, #1
 8004188:	60fb      	str	r3, [r7, #12]
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	3301      	adds	r3, #1
 800418e:	425a      	negs	r2, r3
 8004190:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004194:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004198:	bf58      	it	pl
 800419a:	4253      	negpl	r3, r2
 800419c:	617b      	str	r3, [r7, #20]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041a4:	dbe2      	blt.n	800416c <ringBuff_DistanceOf+0x28>
 80041a6:	e020      	b.n	80041ea <ringBuff_DistanceOf+0xa6>
			}

	} else {
		for ( ; (index != ringbuff->head) || !ringbuff->isEmpty_Flag; index = (index + 1) % RINGBUFFER_SIZE) {
				if ( cmp_char == ringbuff->Array[index]) {
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	4413      	add	r3, r2
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	78fa      	ldrb	r2, [r7, #3]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d101      	bne.n	80041ba <ringBuff_DistanceOf+0x76>
					return distance;
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	e019      	b.n	80041ee <ringBuff_DistanceOf+0xaa>
				}
				distance++;
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	3301      	adds	r3, #1
 80041be:	613b      	str	r3, [r7, #16]
		for ( ; (index != ringbuff->head) || !ringbuff->isEmpty_Flag; index = (index + 1) % RINGBUFFER_SIZE) {
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	3301      	adds	r3, #1
 80041c4:	425a      	negs	r2, r3
 80041c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041ca:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80041ce:	bf58      	it	pl
 80041d0:	4253      	negpl	r3, r2
 80041d2:	617b      	str	r3, [r7, #20]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d1e3      	bne.n	80041a8 <ringBuff_DistanceOf+0x64>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f893 3409 	ldrb.w	r3, [r3, #1033]	; 0x409
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d0de      	beq.n	80041a8 <ringBuff_DistanceOf+0x64>
			}
	}
	return -1;
 80041ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	371c      	adds	r7, #28
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
	...

080041fc <lowlayer_scanReset>:
uint8_t state_scan;
uint8_t scan_flag;

const int8_t	pulse_scan[4] = {3, 5, 5, 10};

void	lowlayer_scanReset(void) {
 80041fc:	b580      	push	{r7, lr}
 80041fe:	af00      	add	r7, sp, #0
	lowlayer_resetEncoder();
 8004200:	f000 fdfe 	bl	8004e00 <lowlayer_resetEncoder>
	pulse_accumulate[0] = 0;
 8004204:	4b10      	ldr	r3, [pc, #64]	; (8004248 <lowlayer_scanReset+0x4c>)
 8004206:	2200      	movs	r2, #0
 8004208:	601a      	str	r2, [r3, #0]
	pulse_accumulate[1] = 0;
 800420a:	4b0f      	ldr	r3, [pc, #60]	; (8004248 <lowlayer_scanReset+0x4c>)
 800420c:	2200      	movs	r2, #0
 800420e:	605a      	str	r2, [r3, #4]
	pulse_accumulate[2] = 0;
 8004210:	4b0d      	ldr	r3, [pc, #52]	; (8004248 <lowlayer_scanReset+0x4c>)
 8004212:	2200      	movs	r2, #0
 8004214:	609a      	str	r2, [r3, #8]
	pulse_accumulate[3] = 0;
 8004216:	4b0c      	ldr	r3, [pc, #48]	; (8004248 <lowlayer_scanReset+0x4c>)
 8004218:	2200      	movs	r2, #0
 800421a:	60da      	str	r2, [r3, #12]

	position_encoder[0] = 0;
 800421c:	4b0b      	ldr	r3, [pc, #44]	; (800424c <lowlayer_scanReset+0x50>)
 800421e:	2200      	movs	r2, #0
 8004220:	601a      	str	r2, [r3, #0]
	position_encoder[1] = 0;
 8004222:	4b0a      	ldr	r3, [pc, #40]	; (800424c <lowlayer_scanReset+0x50>)
 8004224:	2200      	movs	r2, #0
 8004226:	605a      	str	r2, [r3, #4]
	position_encoder[2] = 0;
 8004228:	4b08      	ldr	r3, [pc, #32]	; (800424c <lowlayer_scanReset+0x50>)
 800422a:	2200      	movs	r2, #0
 800422c:	609a      	str	r2, [r3, #8]

	scan_flag = 0;
 800422e:	4b08      	ldr	r3, [pc, #32]	; (8004250 <lowlayer_scanReset+0x54>)
 8004230:	2200      	movs	r2, #0
 8004232:	701a      	strb	r2, [r3, #0]
	state_scan = 0;
 8004234:	4b07      	ldr	r3, [pc, #28]	; (8004254 <lowlayer_scanReset+0x58>)
 8004236:	2200      	movs	r2, #0
 8004238:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CAPTURE_ENABLE_GPIO_Port, CAPTURE_ENABLE_Pin, GPIO_PIN_RESET);
 800423a:	2200      	movs	r2, #0
 800423c:	2108      	movs	r1, #8
 800423e:	4806      	ldr	r0, [pc, #24]	; (8004258 <lowlayer_scanReset+0x5c>)
 8004240:	f007 ff6e 	bl	800c120 <HAL_GPIO_WritePin>
}
 8004244:	bf00      	nop
 8004246:	bd80      	pop	{r7, pc}
 8004248:	20004ec8 	.word	0x20004ec8
 800424c:	20004edc 	.word	0x20004edc
 8004250:	20004ed8 	.word	0x20004ed8
 8004254:	20004ef8 	.word	0x20004ef8
 8004258:	40020c00 	.word	0x40020c00
 800425c:	00000000 	.word	0x00000000

08004260 <lowlayer_scanFlow>:

uint8_t	lowlayer_scanFlow(void) {
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
	// Scan limit switch from 3 to 0
	int8_t pulse[4] = {0, 0, 0 ,0};
 8004266:	2300      	movs	r3, #0
 8004268:	607b      	str	r3, [r7, #4]
	lowlayer_updateLimit();
 800426a:	f000 fe87 	bl	8004f7c <lowlayer_updateLimit>
	if (state_scan < 4) {
 800426e:	4b96      	ldr	r3, [pc, #600]	; (80044c8 <lowlayer_scanFlow+0x268>)
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	2b03      	cmp	r3, #3
 8004274:	d837      	bhi.n	80042e6 <lowlayer_scanFlow+0x86>
		if (limit_switch[3 - state_scan] == 0) {
 8004276:	4b94      	ldr	r3, [pc, #592]	; (80044c8 <lowlayer_scanFlow+0x268>)
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	f1c3 0303 	rsb	r3, r3, #3
 800427e:	4a93      	ldr	r2, [pc, #588]	; (80044cc <lowlayer_scanFlow+0x26c>)
 8004280:	5cd3      	ldrb	r3, [r2, r3]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d121      	bne.n	80042ca <lowlayer_scanFlow+0x6a>
			pulse[3 - state_scan] = pulse_scan[3 - state_scan];
 8004286:	4b90      	ldr	r3, [pc, #576]	; (80044c8 <lowlayer_scanFlow+0x268>)
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	f1c3 0203 	rsb	r2, r3, #3
 800428e:	4b8e      	ldr	r3, [pc, #568]	; (80044c8 <lowlayer_scanFlow+0x268>)
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	f1c3 0303 	rsb	r3, r3, #3
 8004296:	498e      	ldr	r1, [pc, #568]	; (80044d0 <lowlayer_scanFlow+0x270>)
 8004298:	568a      	ldrsb	r2, [r1, r2]
 800429a:	f107 0108 	add.w	r1, r7, #8
 800429e:	440b      	add	r3, r1
 80042a0:	f803 2c04 	strb.w	r2, [r3, #-4]
			lowlayer_writePulse(-pulse[0], pulse[1], -pulse[2], pulse[3]);
 80042a4:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	425b      	negs	r3, r3
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	b258      	sxtb	r0, r3
 80042b0:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80042b4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	425b      	negs	r3, r3
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	b25a      	sxtb	r2, r3
 80042c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042c4:	f000 fcd8 	bl	8004c78 <lowlayer_writePulse>
 80042c8:	e00b      	b.n	80042e2 <lowlayer_scanFlow+0x82>
		} else {
			state_scan++;
 80042ca:	4b7f      	ldr	r3, [pc, #508]	; (80044c8 <lowlayer_scanFlow+0x268>)
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	3301      	adds	r3, #1
 80042d0:	b2da      	uxtb	r2, r3
 80042d2:	4b7d      	ldr	r3, [pc, #500]	; (80044c8 <lowlayer_scanFlow+0x268>)
 80042d4:	701a      	strb	r2, [r3, #0]
			lowlayer_writePulse(0, 0, 0, 0);
 80042d6:	2300      	movs	r3, #0
 80042d8:	2200      	movs	r2, #0
 80042da:	2100      	movs	r1, #0
 80042dc:	2000      	movs	r0, #0
 80042de:	f000 fccb 	bl	8004c78 <lowlayer_writePulse>
		}

		return FALSE;
 80042e2:	2300      	movs	r3, #0
 80042e4:	e0d2      	b.n	800448c <lowlayer_scanFlow+0x22c>
	} else {
		HAL_GPIO_WritePin(CAPTURE_ENABLE_GPIO_Port, CAPTURE_ENABLE_Pin, GPIO_PIN_SET);
 80042e6:	2201      	movs	r2, #1
 80042e8:	2108      	movs	r1, #8
 80042ea:	487a      	ldr	r0, [pc, #488]	; (80044d4 <lowlayer_scanFlow+0x274>)
 80042ec:	f007 ff18 	bl	800c120 <HAL_GPIO_WritePin>
		lowlayer_updateCapture();
 80042f0:	f000 fe28 	bl	8004f44 <lowlayer_updateCapture>
		lowlayer_writePulse(0, 0, 0, 0);
 80042f4:	2300      	movs	r3, #0
 80042f6:	2200      	movs	r2, #0
 80042f8:	2100      	movs	r1, #0
 80042fa:	2000      	movs	r0, #0
 80042fc:	f000 fcbc 	bl	8004c78 <lowlayer_writePulse>
		scan_flag = 1;
 8004300:	4b75      	ldr	r3, [pc, #468]	; (80044d8 <lowlayer_scanFlow+0x278>)
 8004302:	2201      	movs	r2, #1
 8004304:	701a      	strb	r2, [r3, #0]
		// Update offset
		offset_encoder[0] 	= position_capture[0];
 8004306:	4b75      	ldr	r3, [pc, #468]	; (80044dc <lowlayer_scanFlow+0x27c>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a75      	ldr	r2, [pc, #468]	; (80044e0 <lowlayer_scanFlow+0x280>)
 800430c:	6013      	str	r3, [r2, #0]
		offset_encoder[1] 	= position_capture[1];
 800430e:	4b73      	ldr	r3, [pc, #460]	; (80044dc <lowlayer_scanFlow+0x27c>)
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	4a73      	ldr	r2, [pc, #460]	; (80044e0 <lowlayer_scanFlow+0x280>)
 8004314:	6053      	str	r3, [r2, #4]
		offset_encoder[2] 	= position_capture[2];
 8004316:	4b71      	ldr	r3, [pc, #452]	; (80044dc <lowlayer_scanFlow+0x27c>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	4a71      	ldr	r2, [pc, #452]	; (80044e0 <lowlayer_scanFlow+0x280>)
 800431c:	6093      	str	r3, [r2, #8]
		offset_stepper		= pulse_accumulate[3];
 800431e:	4b71      	ldr	r3, [pc, #452]	; (80044e4 <lowlayer_scanFlow+0x284>)
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	4a71      	ldr	r2, [pc, #452]	; (80044e8 <lowlayer_scanFlow+0x288>)
 8004324:	6013      	str	r3, [r2, #0]
		// LOG offset
		LOG_REPORT("offset encoder 0", offset_encoder[0]);
 8004326:	4b6e      	ldr	r3, [pc, #440]	; (80044e0 <lowlayer_scanFlow+0x280>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	b29b      	uxth	r3, r3
 800432c:	4619      	mov	r1, r3
 800432e:	486f      	ldr	r0, [pc, #444]	; (80044ec <lowlayer_scanFlow+0x28c>)
 8004330:	f7fd fbaa 	bl	8001a88 <LOG_REPORT>
		LOG_REPORT("offset encoder 1", offset_encoder[1]);
 8004334:	4b6a      	ldr	r3, [pc, #424]	; (80044e0 <lowlayer_scanFlow+0x280>)
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	b29b      	uxth	r3, r3
 800433a:	4619      	mov	r1, r3
 800433c:	486c      	ldr	r0, [pc, #432]	; (80044f0 <lowlayer_scanFlow+0x290>)
 800433e:	f7fd fba3 	bl	8001a88 <LOG_REPORT>
		LOG_REPORT("offset encoder 2", offset_encoder[2]);
 8004342:	4b67      	ldr	r3, [pc, #412]	; (80044e0 <lowlayer_scanFlow+0x280>)
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	b29b      	uxth	r3, r3
 8004348:	4619      	mov	r1, r3
 800434a:	486a      	ldr	r0, [pc, #424]	; (80044f4 <lowlayer_scanFlow+0x294>)
 800434c:	f7fd fb9c 	bl	8001a88 <LOG_REPORT>
		LOG_REPORT("offset stepper", offset_stepper);
 8004350:	4b65      	ldr	r3, [pc, #404]	; (80044e8 <lowlayer_scanFlow+0x288>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	b29b      	uxth	r3, r3
 8004356:	4619      	mov	r1, r3
 8004358:	4867      	ldr	r0, [pc, #412]	; (80044f8 <lowlayer_scanFlow+0x298>)
 800435a:	f7fd fb95 	bl	8001a88 <LOG_REPORT>

		offset_setpoint[0]	= HARD_LIM0_NEG
				- DIR_ENCODER_0*offset_encoder[0]*2.0*PI/ENCODER_J0;
 800435e:	4b60      	ldr	r3, [pc, #384]	; (80044e0 <lowlayer_scanFlow+0x280>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	ee07 3a90 	vmov	s15, r3
 8004366:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800436a:	ee17 0a90 	vmov	r0, s15
 800436e:	f7fc f8eb 	bl	8000548 <__aeabi_f2d>
 8004372:	4602      	mov	r2, r0
 8004374:	460b      	mov	r3, r1
 8004376:	f7fb ff89 	bl	800028c <__adddf3>
 800437a:	4602      	mov	r2, r0
 800437c:	460b      	mov	r3, r1
 800437e:	4610      	mov	r0, r2
 8004380:	4619      	mov	r1, r3
 8004382:	a345      	add	r3, pc, #276	; (adr r3, 8004498 <lowlayer_scanFlow+0x238>)
 8004384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004388:	f7fc f936 	bl	80005f8 <__aeabi_dmul>
 800438c:	4602      	mov	r2, r0
 800438e:	460b      	mov	r3, r1
 8004390:	4610      	mov	r0, r2
 8004392:	4619      	mov	r1, r3
 8004394:	a342      	add	r3, pc, #264	; (adr r3, 80044a0 <lowlayer_scanFlow+0x240>)
 8004396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439a:	f7fc fa57 	bl	800084c <__aeabi_ddiv>
 800439e:	4602      	mov	r2, r0
 80043a0:	460b      	mov	r3, r1
 80043a2:	a141      	add	r1, pc, #260	; (adr r1, 80044a8 <lowlayer_scanFlow+0x248>)
 80043a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80043a8:	f7fb ff6e 	bl	8000288 <__aeabi_dsub>
 80043ac:	4602      	mov	r2, r0
 80043ae:	460b      	mov	r3, r1
		offset_setpoint[0]	= HARD_LIM0_NEG
 80043b0:	4952      	ldr	r1, [pc, #328]	; (80044fc <lowlayer_scanFlow+0x29c>)
 80043b2:	e9c1 2300 	strd	r2, r3, [r1]
		offset_setpoint[1]	= HARD_LIM1_POS
				- DIR_ENCODER_1*offset_encoder[1]*2.0*PI/ENCODER_J1;
 80043b6:	4b4a      	ldr	r3, [pc, #296]	; (80044e0 <lowlayer_scanFlow+0x280>)
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	ee07 3a90 	vmov	s15, r3
 80043be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043c2:	ee17 0a90 	vmov	r0, s15
 80043c6:	f7fc f8bf 	bl	8000548 <__aeabi_f2d>
 80043ca:	4602      	mov	r2, r0
 80043cc:	460b      	mov	r3, r1
 80043ce:	f7fb ff5d 	bl	800028c <__adddf3>
 80043d2:	4602      	mov	r2, r0
 80043d4:	460b      	mov	r3, r1
 80043d6:	4610      	mov	r0, r2
 80043d8:	4619      	mov	r1, r3
 80043da:	a32f      	add	r3, pc, #188	; (adr r3, 8004498 <lowlayer_scanFlow+0x238>)
 80043dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e0:	f7fc f90a 	bl	80005f8 <__aeabi_dmul>
 80043e4:	4602      	mov	r2, r0
 80043e6:	460b      	mov	r3, r1
 80043e8:	4610      	mov	r0, r2
 80043ea:	4619      	mov	r1, r3
 80043ec:	f04f 0200 	mov.w	r2, #0
 80043f0:	4b43      	ldr	r3, [pc, #268]	; (8004500 <lowlayer_scanFlow+0x2a0>)
 80043f2:	f7fc fa2b 	bl	800084c <__aeabi_ddiv>
 80043f6:	4602      	mov	r2, r0
 80043f8:	460b      	mov	r3, r1
 80043fa:	a12d      	add	r1, pc, #180	; (adr r1, 80044b0 <lowlayer_scanFlow+0x250>)
 80043fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004400:	f7fb ff42 	bl	8000288 <__aeabi_dsub>
 8004404:	4602      	mov	r2, r0
 8004406:	460b      	mov	r3, r1
		offset_setpoint[1]	= HARD_LIM1_POS
 8004408:	493c      	ldr	r1, [pc, #240]	; (80044fc <lowlayer_scanFlow+0x29c>)
 800440a:	e9c1 2302 	strd	r2, r3, [r1, #8]
		offset_setpoint[2]	= HARD_LIM2_NEG
				- DIR_ENCODER_2*offset_encoder[2]/ENCODER_J2;
 800440e:	4b34      	ldr	r3, [pc, #208]	; (80044e0 <lowlayer_scanFlow+0x280>)
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	ee07 3a90 	vmov	s15, r3
 8004416:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800441a:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8004504 <lowlayer_scanFlow+0x2a4>
 800441e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004422:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8004508 <lowlayer_scanFlow+0x2a8>
 8004426:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800442a:	ee17 0a90 	vmov	r0, s15
 800442e:	f7fc f88b 	bl	8000548 <__aeabi_f2d>
 8004432:	4602      	mov	r2, r0
 8004434:	460b      	mov	r3, r1
		offset_setpoint[2]	= HARD_LIM2_NEG
 8004436:	4931      	ldr	r1, [pc, #196]	; (80044fc <lowlayer_scanFlow+0x29c>)
 8004438:	e9c1 2304 	strd	r2, r3, [r1, #16]
		offset_setpoint[3]  = HARD_LIM3_POS
				- offset_stepper*2.0*PI/GEAR_J3;
 800443c:	4b2a      	ldr	r3, [pc, #168]	; (80044e8 <lowlayer_scanFlow+0x288>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4618      	mov	r0, r3
 8004442:	f7fc f86f 	bl	8000524 <__aeabi_i2d>
 8004446:	4602      	mov	r2, r0
 8004448:	460b      	mov	r3, r1
 800444a:	f7fb ff1f 	bl	800028c <__adddf3>
 800444e:	4602      	mov	r2, r0
 8004450:	460b      	mov	r3, r1
 8004452:	4610      	mov	r0, r2
 8004454:	4619      	mov	r1, r3
 8004456:	a310      	add	r3, pc, #64	; (adr r3, 8004498 <lowlayer_scanFlow+0x238>)
 8004458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800445c:	f7fc f8cc 	bl	80005f8 <__aeabi_dmul>
 8004460:	4602      	mov	r2, r0
 8004462:	460b      	mov	r3, r1
 8004464:	4610      	mov	r0, r2
 8004466:	4619      	mov	r1, r3
 8004468:	a313      	add	r3, pc, #76	; (adr r3, 80044b8 <lowlayer_scanFlow+0x258>)
 800446a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446e:	f7fc f9ed 	bl	800084c <__aeabi_ddiv>
 8004472:	4602      	mov	r2, r0
 8004474:	460b      	mov	r3, r1
 8004476:	a112      	add	r1, pc, #72	; (adr r1, 80044c0 <lowlayer_scanFlow+0x260>)
 8004478:	e9d1 0100 	ldrd	r0, r1, [r1]
 800447c:	f7fb ff04 	bl	8000288 <__aeabi_dsub>
 8004480:	4602      	mov	r2, r0
 8004482:	460b      	mov	r3, r1
		offset_setpoint[3]  = HARD_LIM3_POS
 8004484:	491d      	ldr	r1, [pc, #116]	; (80044fc <lowlayer_scanFlow+0x29c>)
 8004486:	e9c1 2306 	strd	r2, r3, [r1, #24]

		return TRUE;
 800448a:	2301      	movs	r3, #1
	}
}
 800448c:	4618      	mov	r0, r3
 800448e:	3708      	adds	r7, #8
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	f3af 8000 	nop.w
 8004498:	60000000 	.word	0x60000000
 800449c:	400921fb 	.word	0x400921fb
 80044a0:	00000000 	.word	0x00000000
 80044a4:	40f38800 	.word	0x40f38800
 80044a8:	40000000 	.word	0x40000000
 80044ac:	bff9f17a 	.word	0xbff9f17a
 80044b0:	80000000 	.word	0x80000000
 80044b4:	40039716 	.word	0x40039716
 80044b8:	a0000000 	.word	0xa0000000
 80044bc:	40d3bca1 	.word	0x40d3bca1
 80044c0:	a0000000 	.word	0xa0000000
 80044c4:	4008330d 	.word	0x4008330d
 80044c8:	20004ef8 	.word	0x20004ef8
 80044cc:	20004ee8 	.word	0x20004ee8
 80044d0:	0801c27c 	.word	0x0801c27c
 80044d4:	40020c00 	.word	0x40020c00
 80044d8:	20004ed8 	.word	0x20004ed8
 80044dc:	20004eec 	.word	0x20004eec
 80044e0:	20004f20 	.word	0x20004f20
 80044e4:	20004ec8 	.word	0x20004ec8
 80044e8:	20004efc 	.word	0x20004efc
 80044ec:	0801c1a4 	.word	0x0801c1a4
 80044f0:	0801c1b8 	.word	0x0801c1b8
 80044f4:	0801c1cc 	.word	0x0801c1cc
 80044f8:	0801c1e0 	.word	0x0801c1e0
 80044fc:	20004f00 	.word	0x20004f00
 8004500:	40ff4000 	.word	0x40ff4000
 8004504:	4426aaab 	.word	0x4426aaab
 8004508:	400f1aa0 	.word	0x400f1aa0
 800450c:	00000000 	.word	0x00000000

08004510 <lowlayer_goToSoftLimit>:

uint8_t	lowlayer_goToSoftLimit(SCARA_PositionTypeDef *setpoint) {
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
	int8_t pulse[4] = {0, 0, 0 ,0};
 8004518:	2300      	movs	r3, #0
 800451a:	60bb      	str	r3, [r7, #8]
	uint8_t check = 0;
 800451c:	2300      	movs	r3, #0
 800451e:	73fb      	strb	r3, [r7, #15]
	lowlayer_readSetPosition(setpoint);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 f94d 	bl	80047c0 <lowlayer_readSetPosition>
	if (setpoint->Theta1 < LIM_MIN_J0) {
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800452c:	a330      	add	r3, pc, #192	; (adr r3, 80045f0 <lowlayer_goToSoftLimit+0xe0>)
 800452e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004532:	f7fc fad3 	bl	8000adc <__aeabi_dcmplt>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d004      	beq.n	8004546 <lowlayer_goToSoftLimit+0x36>
		pulse[0] = pulse_scan[0];
 800453c:	2303      	movs	r3, #3
 800453e:	723b      	strb	r3, [r7, #8]
		check++;
 8004540:	7bfb      	ldrb	r3, [r7, #15]
 8004542:	3301      	adds	r3, #1
 8004544:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->Theta2 > LIM_MAX_J1) {
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 800454c:	a32a      	add	r3, pc, #168	; (adr r3, 80045f8 <lowlayer_goToSoftLimit+0xe8>)
 800454e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004552:	f7fc fae1 	bl	8000b18 <__aeabi_dcmpgt>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d004      	beq.n	8004566 <lowlayer_goToSoftLimit+0x56>
		pulse[1] = pulse_scan[1];
 800455c:	2305      	movs	r3, #5
 800455e:	727b      	strb	r3, [r7, #9]
		check++;
 8004560:	7bfb      	ldrb	r3, [r7, #15]
 8004562:	3301      	adds	r3, #1
 8004564:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->D3 < LIM_MIN_J2) {
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 800456c:	f04f 0200 	mov.w	r2, #0
 8004570:	f04f 0300 	mov.w	r3, #0
 8004574:	f7fc fab2 	bl	8000adc <__aeabi_dcmplt>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d004      	beq.n	8004588 <lowlayer_goToSoftLimit+0x78>
		pulse[2] = pulse_scan[2];
 800457e:	2305      	movs	r3, #5
 8004580:	72bb      	strb	r3, [r7, #10]
		check++;
 8004582:	7bfb      	ldrb	r3, [r7, #15]
 8004584:	3301      	adds	r3, #1
 8004586:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->Theta4 > LIM_MAX_J3) {
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 800458e:	a31c      	add	r3, pc, #112	; (adr r3, 8004600 <lowlayer_goToSoftLimit+0xf0>)
 8004590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004594:	f7fc fac0 	bl	8000b18 <__aeabi_dcmpgt>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d004      	beq.n	80045a8 <lowlayer_goToSoftLimit+0x98>
		pulse[3] = pulse_scan[3];
 800459e:	230a      	movs	r3, #10
 80045a0:	72fb      	strb	r3, [r7, #11]
		check++;
 80045a2:	7bfb      	ldrb	r3, [r7, #15]
 80045a4:	3301      	adds	r3, #1
 80045a6:	73fb      	strb	r3, [r7, #15]
	}

	if (check > 0) {
 80045a8:	7bfb      	ldrb	r3, [r7, #15]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d013      	beq.n	80045d6 <lowlayer_goToSoftLimit+0xc6>
		lowlayer_writePulse(pulse[0], -pulse[1], pulse[2], -pulse[3]);
 80045ae:	f997 0008 	ldrsb.w	r0, [r7, #8]
 80045b2:	f997 3009 	ldrsb.w	r3, [r7, #9]
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	425b      	negs	r3, r3
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	b259      	sxtb	r1, r3
 80045be:	f997 200a 	ldrsb.w	r2, [r7, #10]
 80045c2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	425b      	negs	r3, r3
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	b25b      	sxtb	r3, r3
 80045ce:	f000 fb53 	bl	8004c78 <lowlayer_writePulse>
		return FALSE;
 80045d2:	2300      	movs	r3, #0
 80045d4:	e006      	b.n	80045e4 <lowlayer_goToSoftLimit+0xd4>
	} else {
		lowlayer_writePulse(0, 0, 0, 0);
 80045d6:	2300      	movs	r3, #0
 80045d8:	2200      	movs	r2, #0
 80045da:	2100      	movs	r1, #0
 80045dc:	2000      	movs	r0, #0
 80045de:	f000 fb4b 	bl	8004c78 <lowlayer_writePulse>
		return TRUE;
 80045e2:	2301      	movs	r3, #1
	}
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3710      	adds	r7, #16
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	f3af 8000 	nop.w
 80045f0:	daaaaaab 	.word	0xdaaaaaab
 80045f4:	bff7bc89 	.word	0xbff7bc89
 80045f8:	88000000 	.word	0x88000000
 80045fc:	4002d97c 	.word	0x4002d97c
 8004600:	daaaaaab 	.word	0xdaaaaaab
 8004604:	4007bc89 	.word	0x4007bc89

08004608 <lowlayer_readTruePosition>:

void	lowlayer_readTruePosition(SCARA_PositionTypeDef *true) {
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
	lowlayer_updateEncoder();
 8004610:	f000 fc7c 	bl	8004f0c <lowlayer_updateEncoder>
	true->Theta1 = HARD_LIM0_NEG
			+ DIR_ENCODER_0*(position_encoder[0] - offset_encoder[0])*2.0*PI/ENCODER_J0; // Servo Motor
 8004614:	4b62      	ldr	r3, [pc, #392]	; (80047a0 <lowlayer_readTruePosition+0x198>)
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	4b62      	ldr	r3, [pc, #392]	; (80047a4 <lowlayer_readTruePosition+0x19c>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	ee07 3a90 	vmov	s15, r3
 8004622:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004626:	ee17 0a90 	vmov	r0, s15
 800462a:	f7fb ff8d 	bl	8000548 <__aeabi_f2d>
 800462e:	4602      	mov	r2, r0
 8004630:	460b      	mov	r3, r1
 8004632:	f7fb fe2b 	bl	800028c <__adddf3>
 8004636:	4602      	mov	r2, r0
 8004638:	460b      	mov	r3, r1
 800463a:	4610      	mov	r0, r2
 800463c:	4619      	mov	r1, r3
 800463e:	a34c      	add	r3, pc, #304	; (adr r3, 8004770 <lowlayer_readTruePosition+0x168>)
 8004640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004644:	f7fb ffd8 	bl	80005f8 <__aeabi_dmul>
 8004648:	4602      	mov	r2, r0
 800464a:	460b      	mov	r3, r1
 800464c:	4610      	mov	r0, r2
 800464e:	4619      	mov	r1, r3
 8004650:	a349      	add	r3, pc, #292	; (adr r3, 8004778 <lowlayer_readTruePosition+0x170>)
 8004652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004656:	f7fc f8f9 	bl	800084c <__aeabi_ddiv>
 800465a:	4602      	mov	r2, r0
 800465c:	460b      	mov	r3, r1
 800465e:	4610      	mov	r0, r2
 8004660:	4619      	mov	r1, r3
 8004662:	a347      	add	r3, pc, #284	; (adr r3, 8004780 <lowlayer_readTruePosition+0x178>)
 8004664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004668:	f7fb fe0e 	bl	8000288 <__aeabi_dsub>
 800466c:	4602      	mov	r2, r0
 800466e:	460b      	mov	r3, r1
	true->Theta1 = HARD_LIM0_NEG
 8004670:	6879      	ldr	r1, [r7, #4]
 8004672:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

	true->Theta2 = HARD_LIM1_POS
			+ DIR_ENCODER_1*(position_encoder[1] - offset_encoder[1])*2.0*PI/ENCODER_J1; // Servo Motor
 8004676:	4b4a      	ldr	r3, [pc, #296]	; (80047a0 <lowlayer_readTruePosition+0x198>)
 8004678:	685a      	ldr	r2, [r3, #4]
 800467a:	4b4a      	ldr	r3, [pc, #296]	; (80047a4 <lowlayer_readTruePosition+0x19c>)
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	ee07 3a90 	vmov	s15, r3
 8004684:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004688:	ee17 0a90 	vmov	r0, s15
 800468c:	f7fb ff5c 	bl	8000548 <__aeabi_f2d>
 8004690:	4602      	mov	r2, r0
 8004692:	460b      	mov	r3, r1
 8004694:	f7fb fdfa 	bl	800028c <__adddf3>
 8004698:	4602      	mov	r2, r0
 800469a:	460b      	mov	r3, r1
 800469c:	4610      	mov	r0, r2
 800469e:	4619      	mov	r1, r3
 80046a0:	a333      	add	r3, pc, #204	; (adr r3, 8004770 <lowlayer_readTruePosition+0x168>)
 80046a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a6:	f7fb ffa7 	bl	80005f8 <__aeabi_dmul>
 80046aa:	4602      	mov	r2, r0
 80046ac:	460b      	mov	r3, r1
 80046ae:	4610      	mov	r0, r2
 80046b0:	4619      	mov	r1, r3
 80046b2:	f04f 0200 	mov.w	r2, #0
 80046b6:	4b3c      	ldr	r3, [pc, #240]	; (80047a8 <lowlayer_readTruePosition+0x1a0>)
 80046b8:	f7fc f8c8 	bl	800084c <__aeabi_ddiv>
 80046bc:	4602      	mov	r2, r0
 80046be:	460b      	mov	r3, r1
 80046c0:	4610      	mov	r0, r2
 80046c2:	4619      	mov	r1, r3
 80046c4:	a330      	add	r3, pc, #192	; (adr r3, 8004788 <lowlayer_readTruePosition+0x180>)
 80046c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ca:	f7fb fddf 	bl	800028c <__adddf3>
 80046ce:	4602      	mov	r2, r0
 80046d0:	460b      	mov	r3, r1
	true->Theta2 = HARD_LIM1_POS
 80046d2:	6879      	ldr	r1, [r7, #4]
 80046d4:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

	true->D3	 = HARD_LIM2_NEG
			+ DIR_ENCODER_2*(position_encoder[2] - offset_encoder[2])/ENCODER_J2; // Servo Motor
 80046d8:	4b31      	ldr	r3, [pc, #196]	; (80047a0 <lowlayer_readTruePosition+0x198>)
 80046da:	689a      	ldr	r2, [r3, #8]
 80046dc:	4b31      	ldr	r3, [pc, #196]	; (80047a4 <lowlayer_readTruePosition+0x19c>)
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	ee07 3a90 	vmov	s15, r3
 80046e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046ea:	eeb1 7a67 	vneg.f32	s14, s15
 80046ee:	eddf 6a2f 	vldr	s13, [pc, #188]	; 80047ac <lowlayer_readTruePosition+0x1a4>
 80046f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80046f6:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80047b0 <lowlayer_readTruePosition+0x1a8>
 80046fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80046fe:	ee17 0a90 	vmov	r0, s15
 8004702:	f7fb ff21 	bl	8000548 <__aeabi_f2d>
 8004706:	4602      	mov	r2, r0
 8004708:	460b      	mov	r3, r1
	true->D3	 = HARD_LIM2_NEG
 800470a:	6879      	ldr	r1, [r7, #4]
 800470c:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78

	true->Theta4 = HARD_LIM3_POS
			+ (pulse_accumulate[3] - offset_stepper)*2.0*PI/GEAR_J3; // Stepper Motor
 8004710:	4b28      	ldr	r3, [pc, #160]	; (80047b4 <lowlayer_readTruePosition+0x1ac>)
 8004712:	68da      	ldr	r2, [r3, #12]
 8004714:	4b28      	ldr	r3, [pc, #160]	; (80047b8 <lowlayer_readTruePosition+0x1b0>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	4618      	mov	r0, r3
 800471c:	f7fb ff02 	bl	8000524 <__aeabi_i2d>
 8004720:	4602      	mov	r2, r0
 8004722:	460b      	mov	r3, r1
 8004724:	f7fb fdb2 	bl	800028c <__adddf3>
 8004728:	4602      	mov	r2, r0
 800472a:	460b      	mov	r3, r1
 800472c:	4610      	mov	r0, r2
 800472e:	4619      	mov	r1, r3
 8004730:	a30f      	add	r3, pc, #60	; (adr r3, 8004770 <lowlayer_readTruePosition+0x168>)
 8004732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004736:	f7fb ff5f 	bl	80005f8 <__aeabi_dmul>
 800473a:	4602      	mov	r2, r0
 800473c:	460b      	mov	r3, r1
 800473e:	4610      	mov	r0, r2
 8004740:	4619      	mov	r1, r3
 8004742:	a313      	add	r3, pc, #76	; (adr r3, 8004790 <lowlayer_readTruePosition+0x188>)
 8004744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004748:	f7fc f880 	bl	800084c <__aeabi_ddiv>
 800474c:	4602      	mov	r2, r0
 800474e:	460b      	mov	r3, r1
 8004750:	4610      	mov	r0, r2
 8004752:	4619      	mov	r1, r3
 8004754:	a310      	add	r3, pc, #64	; (adr r3, 8004798 <lowlayer_readTruePosition+0x190>)
 8004756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800475a:	f7fb fd97 	bl	800028c <__adddf3>
 800475e:	4602      	mov	r2, r0
 8004760:	460b      	mov	r3, r1
	true->Theta4 = HARD_LIM3_POS
 8004762:	6879      	ldr	r1, [r7, #4]
 8004764:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
}
 8004768:	bf00      	nop
 800476a:	3708      	adds	r7, #8
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	60000000 	.word	0x60000000
 8004774:	400921fb 	.word	0x400921fb
 8004778:	00000000 	.word	0x00000000
 800477c:	40f38800 	.word	0x40f38800
 8004780:	40000000 	.word	0x40000000
 8004784:	3ff9f17a 	.word	0x3ff9f17a
 8004788:	80000000 	.word	0x80000000
 800478c:	40039716 	.word	0x40039716
 8004790:	a0000000 	.word	0xa0000000
 8004794:	40d3bca1 	.word	0x40d3bca1
 8004798:	a0000000 	.word	0xa0000000
 800479c:	4008330d 	.word	0x4008330d
 80047a0:	20004edc 	.word	0x20004edc
 80047a4:	20004f20 	.word	0x20004f20
 80047a8:	40ff4000 	.word	0x40ff4000
 80047ac:	4426aaab 	.word	0x4426aaab
 80047b0:	400f1aa0 	.word	0x400f1aa0
 80047b4:	20004ec8 	.word	0x20004ec8
 80047b8:	20004efc 	.word	0x20004efc
 80047bc:	00000000 	.word	0x00000000

080047c0 <lowlayer_readSetPosition>:

void	lowlayer_readSetPosition(SCARA_PositionTypeDef *setpoint) {
 80047c0:	b5b0      	push	{r4, r5, r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
	setpoint->Theta1 = offset_setpoint[0] + pulse_accumulate[0]*2.0*PI/GEAR_J0;
 80047c8:	4b53      	ldr	r3, [pc, #332]	; (8004918 <lowlayer_readSetPosition+0x158>)
 80047ca:	e9d3 4500 	ldrd	r4, r5, [r3]
 80047ce:	4b53      	ldr	r3, [pc, #332]	; (800491c <lowlayer_readSetPosition+0x15c>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7fb fea6 	bl	8000524 <__aeabi_i2d>
 80047d8:	4602      	mov	r2, r0
 80047da:	460b      	mov	r3, r1
 80047dc:	f7fb fd56 	bl	800028c <__adddf3>
 80047e0:	4602      	mov	r2, r0
 80047e2:	460b      	mov	r3, r1
 80047e4:	4610      	mov	r0, r2
 80047e6:	4619      	mov	r1, r3
 80047e8:	a345      	add	r3, pc, #276	; (adr r3, 8004900 <lowlayer_readSetPosition+0x140>)
 80047ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ee:	f7fb ff03 	bl	80005f8 <__aeabi_dmul>
 80047f2:	4602      	mov	r2, r0
 80047f4:	460b      	mov	r3, r1
 80047f6:	4610      	mov	r0, r2
 80047f8:	4619      	mov	r1, r3
 80047fa:	a343      	add	r3, pc, #268	; (adr r3, 8004908 <lowlayer_readSetPosition+0x148>)
 80047fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004800:	f7fc f824 	bl	800084c <__aeabi_ddiv>
 8004804:	4602      	mov	r2, r0
 8004806:	460b      	mov	r3, r1
 8004808:	4620      	mov	r0, r4
 800480a:	4629      	mov	r1, r5
 800480c:	f7fb fd3e 	bl	800028c <__adddf3>
 8004810:	4602      	mov	r2, r0
 8004812:	460b      	mov	r3, r1
 8004814:	6879      	ldr	r1, [r7, #4]
 8004816:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

	setpoint->Theta2 = offset_setpoint[1] + pulse_accumulate[1]*2.0*PI/GEAR_J1;
 800481a:	4b3f      	ldr	r3, [pc, #252]	; (8004918 <lowlayer_readSetPosition+0x158>)
 800481c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8004820:	4b3e      	ldr	r3, [pc, #248]	; (800491c <lowlayer_readSetPosition+0x15c>)
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	4618      	mov	r0, r3
 8004826:	f7fb fe7d 	bl	8000524 <__aeabi_i2d>
 800482a:	4602      	mov	r2, r0
 800482c:	460b      	mov	r3, r1
 800482e:	f7fb fd2d 	bl	800028c <__adddf3>
 8004832:	4602      	mov	r2, r0
 8004834:	460b      	mov	r3, r1
 8004836:	4610      	mov	r0, r2
 8004838:	4619      	mov	r1, r3
 800483a:	a331      	add	r3, pc, #196	; (adr r3, 8004900 <lowlayer_readSetPosition+0x140>)
 800483c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004840:	f7fb feda 	bl	80005f8 <__aeabi_dmul>
 8004844:	4602      	mov	r2, r0
 8004846:	460b      	mov	r3, r1
 8004848:	4610      	mov	r0, r2
 800484a:	4619      	mov	r1, r3
 800484c:	f04f 0200 	mov.w	r2, #0
 8004850:	4b33      	ldr	r3, [pc, #204]	; (8004920 <lowlayer_readSetPosition+0x160>)
 8004852:	f7fb fffb 	bl	800084c <__aeabi_ddiv>
 8004856:	4602      	mov	r2, r0
 8004858:	460b      	mov	r3, r1
 800485a:	4620      	mov	r0, r4
 800485c:	4629      	mov	r1, r5
 800485e:	f7fb fd15 	bl	800028c <__adddf3>
 8004862:	4602      	mov	r2, r0
 8004864:	460b      	mov	r3, r1
 8004866:	6879      	ldr	r1, [r7, #4]
 8004868:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

	setpoint->D3	 = offset_setpoint[2] + pulse_accumulate[2]/GEAR_J2;
 800486c:	4b2a      	ldr	r3, [pc, #168]	; (8004918 <lowlayer_readSetPosition+0x158>)
 800486e:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004872:	4b2a      	ldr	r3, [pc, #168]	; (800491c <lowlayer_readSetPosition+0x15c>)
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	ee07 3a90 	vmov	s15, r3
 800487a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800487e:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8004924 <lowlayer_readSetPosition+0x164>
 8004882:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004886:	ee16 0a90 	vmov	r0, s13
 800488a:	f7fb fe5d 	bl	8000548 <__aeabi_f2d>
 800488e:	4602      	mov	r2, r0
 8004890:	460b      	mov	r3, r1
 8004892:	4620      	mov	r0, r4
 8004894:	4629      	mov	r1, r5
 8004896:	f7fb fcf9 	bl	800028c <__adddf3>
 800489a:	4602      	mov	r2, r0
 800489c:	460b      	mov	r3, r1
 800489e:	6879      	ldr	r1, [r7, #4]
 80048a0:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78

	setpoint->Theta4 = offset_setpoint[3] + pulse_accumulate[3]*2.0*PI/GEAR_J3;
 80048a4:	4b1c      	ldr	r3, [pc, #112]	; (8004918 <lowlayer_readSetPosition+0x158>)
 80048a6:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80048aa:	4b1c      	ldr	r3, [pc, #112]	; (800491c <lowlayer_readSetPosition+0x15c>)
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7fb fe38 	bl	8000524 <__aeabi_i2d>
 80048b4:	4602      	mov	r2, r0
 80048b6:	460b      	mov	r3, r1
 80048b8:	f7fb fce8 	bl	800028c <__adddf3>
 80048bc:	4602      	mov	r2, r0
 80048be:	460b      	mov	r3, r1
 80048c0:	4610      	mov	r0, r2
 80048c2:	4619      	mov	r1, r3
 80048c4:	a30e      	add	r3, pc, #56	; (adr r3, 8004900 <lowlayer_readSetPosition+0x140>)
 80048c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ca:	f7fb fe95 	bl	80005f8 <__aeabi_dmul>
 80048ce:	4602      	mov	r2, r0
 80048d0:	460b      	mov	r3, r1
 80048d2:	4610      	mov	r0, r2
 80048d4:	4619      	mov	r1, r3
 80048d6:	a30e      	add	r3, pc, #56	; (adr r3, 8004910 <lowlayer_readSetPosition+0x150>)
 80048d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048dc:	f7fb ffb6 	bl	800084c <__aeabi_ddiv>
 80048e0:	4602      	mov	r2, r0
 80048e2:	460b      	mov	r3, r1
 80048e4:	4620      	mov	r0, r4
 80048e6:	4629      	mov	r1, r5
 80048e8:	f7fb fcd0 	bl	800028c <__adddf3>
 80048ec:	4602      	mov	r2, r0
 80048ee:	460b      	mov	r3, r1
 80048f0:	6879      	ldr	r1, [r7, #4]
 80048f2:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
}
 80048f6:	bf00      	nop
 80048f8:	3708      	adds	r7, #8
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bdb0      	pop	{r4, r5, r7, pc}
 80048fe:	bf00      	nop
 8004900:	60000000 	.word	0x60000000
 8004904:	400921fb 	.word	0x400921fb
 8004908:	00000000 	.word	0x00000000
 800490c:	40d38800 	.word	0x40d38800
 8004910:	a0000000 	.word	0xa0000000
 8004914:	40d3bca1 	.word	0x40d3bca1
 8004918:	20004f00 	.word	0x20004f00
 800491c:	20004ec8 	.word	0x20004ec8
 8004920:	40df4000 	.word	0x40df4000
 8004924:	42c80000 	.word	0x42c80000

08004928 <lowlayer_computeAndWritePulse>:

uint8_t	lowlayer_computeAndWritePulse(SCARA_PositionTypeDef current, SCARA_PositionTypeDef next) {
 8004928:	b084      	sub	sp, #16
 800492a:	b580      	push	{r7, lr}
 800492c:	b092      	sub	sp, #72	; 0x48
 800492e:	af00      	add	r7, sp, #0
 8004930:	f107 0c50 	add.w	ip, r7, #80	; 0x50
 8004934:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t	current_var0, current_var1, current_var2, current_var3;
	uint32_t	next_var0, next_var1, next_var2, next_var3;
	int64_t		delta_var0, delta_var1, delta_var2, delta_var3;
	uint8_t 	result;

	current_var0	= round((current.Theta1 - LIM_MIN_J0) * GEAR_J0/(2*PI));
 8004938:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800493c:	a3c6      	add	r3, pc, #792	; (adr r3, 8004c58 <lowlayer_computeAndWritePulse+0x330>)
 800493e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004942:	f7fb fca3 	bl	800028c <__adddf3>
 8004946:	4602      	mov	r2, r0
 8004948:	460b      	mov	r3, r1
 800494a:	4610      	mov	r0, r2
 800494c:	4619      	mov	r1, r3
 800494e:	a3c4      	add	r3, pc, #784	; (adr r3, 8004c60 <lowlayer_computeAndWritePulse+0x338>)
 8004950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004954:	f7fb fe50 	bl	80005f8 <__aeabi_dmul>
 8004958:	4602      	mov	r2, r0
 800495a:	460b      	mov	r3, r1
 800495c:	4610      	mov	r0, r2
 800495e:	4619      	mov	r1, r3
 8004960:	a3b7      	add	r3, pc, #732	; (adr r3, 8004c40 <lowlayer_computeAndWritePulse+0x318>)
 8004962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004966:	f7fb ff71 	bl	800084c <__aeabi_ddiv>
 800496a:	4602      	mov	r2, r0
 800496c:	460b      	mov	r3, r1
 800496e:	ec43 2b17 	vmov	d7, r2, r3
 8004972:	eeb0 0a47 	vmov.f32	s0, s14
 8004976:	eef0 0a67 	vmov.f32	s1, s15
 800497a:	f015 fef9 	bl	801a770 <round>
 800497e:	ec53 2b10 	vmov	r2, r3, d0
 8004982:	4610      	mov	r0, r2
 8004984:	4619      	mov	r1, r3
 8004986:	f7fc f90f 	bl	8000ba8 <__aeabi_d2uiz>
 800498a:	4603      	mov	r3, r0
 800498c:	647b      	str	r3, [r7, #68]	; 0x44
	current_var1 	= round((current.Theta2 - LIM_MIN_J1) * GEAR_J1/(2*PI));
 800498e:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8004992:	a3b5      	add	r3, pc, #724	; (adr r3, 8004c68 <lowlayer_computeAndWritePulse+0x340>)
 8004994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004998:	f7fb fc78 	bl	800028c <__adddf3>
 800499c:	4602      	mov	r2, r0
 800499e:	460b      	mov	r3, r1
 80049a0:	4610      	mov	r0, r2
 80049a2:	4619      	mov	r1, r3
 80049a4:	f04f 0200 	mov.w	r2, #0
 80049a8:	4bb1      	ldr	r3, [pc, #708]	; (8004c70 <lowlayer_computeAndWritePulse+0x348>)
 80049aa:	f7fb fe25 	bl	80005f8 <__aeabi_dmul>
 80049ae:	4602      	mov	r2, r0
 80049b0:	460b      	mov	r3, r1
 80049b2:	4610      	mov	r0, r2
 80049b4:	4619      	mov	r1, r3
 80049b6:	a3a2      	add	r3, pc, #648	; (adr r3, 8004c40 <lowlayer_computeAndWritePulse+0x318>)
 80049b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049bc:	f7fb ff46 	bl	800084c <__aeabi_ddiv>
 80049c0:	4602      	mov	r2, r0
 80049c2:	460b      	mov	r3, r1
 80049c4:	ec43 2b17 	vmov	d7, r2, r3
 80049c8:	eeb0 0a47 	vmov.f32	s0, s14
 80049cc:	eef0 0a67 	vmov.f32	s1, s15
 80049d0:	f015 fece 	bl	801a770 <round>
 80049d4:	ec53 2b10 	vmov	r2, r3, d0
 80049d8:	4610      	mov	r0, r2
 80049da:	4619      	mov	r1, r3
 80049dc:	f7fc f8e4 	bl	8000ba8 <__aeabi_d2uiz>
 80049e0:	4603      	mov	r3, r0
 80049e2:	643b      	str	r3, [r7, #64]	; 0x40
	current_var2 	= round((current.D3 - LIM_MIN_J2) * GEAR_J2);
 80049e4:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80049e8:	f04f 0200 	mov.w	r2, #0
 80049ec:	4ba1      	ldr	r3, [pc, #644]	; (8004c74 <lowlayer_computeAndWritePulse+0x34c>)
 80049ee:	f7fb fe03 	bl	80005f8 <__aeabi_dmul>
 80049f2:	4602      	mov	r2, r0
 80049f4:	460b      	mov	r3, r1
 80049f6:	ec43 2b17 	vmov	d7, r2, r3
 80049fa:	eeb0 0a47 	vmov.f32	s0, s14
 80049fe:	eef0 0a67 	vmov.f32	s1, s15
 8004a02:	f015 feb5 	bl	801a770 <round>
 8004a06:	ec53 2b10 	vmov	r2, r3, d0
 8004a0a:	4610      	mov	r0, r2
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	f7fc f8cb 	bl	8000ba8 <__aeabi_d2uiz>
 8004a12:	4603      	mov	r3, r0
 8004a14:	63fb      	str	r3, [r7, #60]	; 0x3c
	current_var3 	= round((current.Theta4 - LIM_MIN_J3) * GEAR_J3/(2*PI));
 8004a16:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004a1a:	a38b      	add	r3, pc, #556	; (adr r3, 8004c48 <lowlayer_computeAndWritePulse+0x320>)
 8004a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a20:	f7fb fc34 	bl	800028c <__adddf3>
 8004a24:	4602      	mov	r2, r0
 8004a26:	460b      	mov	r3, r1
 8004a28:	4610      	mov	r0, r2
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	a388      	add	r3, pc, #544	; (adr r3, 8004c50 <lowlayer_computeAndWritePulse+0x328>)
 8004a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a32:	f7fb fde1 	bl	80005f8 <__aeabi_dmul>
 8004a36:	4602      	mov	r2, r0
 8004a38:	460b      	mov	r3, r1
 8004a3a:	4610      	mov	r0, r2
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	a380      	add	r3, pc, #512	; (adr r3, 8004c40 <lowlayer_computeAndWritePulse+0x318>)
 8004a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a44:	f7fb ff02 	bl	800084c <__aeabi_ddiv>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	ec43 2b17 	vmov	d7, r2, r3
 8004a50:	eeb0 0a47 	vmov.f32	s0, s14
 8004a54:	eef0 0a67 	vmov.f32	s1, s15
 8004a58:	f015 fe8a 	bl	801a770 <round>
 8004a5c:	ec53 2b10 	vmov	r2, r3, d0
 8004a60:	4610      	mov	r0, r2
 8004a62:	4619      	mov	r1, r3
 8004a64:	f7fc f8a0 	bl	8000ba8 <__aeabi_d2uiz>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	63bb      	str	r3, [r7, #56]	; 0x38
	next_var0 		= round((next.Theta1 - LIM_MIN_J0) * GEAR_J0/(2*PI));
 8004a6c:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8004a70:	a379      	add	r3, pc, #484	; (adr r3, 8004c58 <lowlayer_computeAndWritePulse+0x330>)
 8004a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a76:	f7fb fc09 	bl	800028c <__adddf3>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	4610      	mov	r0, r2
 8004a80:	4619      	mov	r1, r3
 8004a82:	a377      	add	r3, pc, #476	; (adr r3, 8004c60 <lowlayer_computeAndWritePulse+0x338>)
 8004a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a88:	f7fb fdb6 	bl	80005f8 <__aeabi_dmul>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	460b      	mov	r3, r1
 8004a90:	4610      	mov	r0, r2
 8004a92:	4619      	mov	r1, r3
 8004a94:	a36a      	add	r3, pc, #424	; (adr r3, 8004c40 <lowlayer_computeAndWritePulse+0x318>)
 8004a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a9a:	f7fb fed7 	bl	800084c <__aeabi_ddiv>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	ec43 2b17 	vmov	d7, r2, r3
 8004aa6:	eeb0 0a47 	vmov.f32	s0, s14
 8004aaa:	eef0 0a67 	vmov.f32	s1, s15
 8004aae:	f015 fe5f 	bl	801a770 <round>
 8004ab2:	ec53 2b10 	vmov	r2, r3, d0
 8004ab6:	4610      	mov	r0, r2
 8004ab8:	4619      	mov	r1, r3
 8004aba:	f7fc f875 	bl	8000ba8 <__aeabi_d2uiz>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	637b      	str	r3, [r7, #52]	; 0x34
	next_var1 		= round((next.Theta2 - LIM_MIN_J1) * GEAR_J1/(2*PI));
 8004ac2:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8004ac6:	a368      	add	r3, pc, #416	; (adr r3, 8004c68 <lowlayer_computeAndWritePulse+0x340>)
 8004ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004acc:	f7fb fbde 	bl	800028c <__adddf3>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	4610      	mov	r0, r2
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	f04f 0200 	mov.w	r2, #0
 8004adc:	4b64      	ldr	r3, [pc, #400]	; (8004c70 <lowlayer_computeAndWritePulse+0x348>)
 8004ade:	f7fb fd8b 	bl	80005f8 <__aeabi_dmul>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	4610      	mov	r0, r2
 8004ae8:	4619      	mov	r1, r3
 8004aea:	a355      	add	r3, pc, #340	; (adr r3, 8004c40 <lowlayer_computeAndWritePulse+0x318>)
 8004aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af0:	f7fb feac 	bl	800084c <__aeabi_ddiv>
 8004af4:	4602      	mov	r2, r0
 8004af6:	460b      	mov	r3, r1
 8004af8:	ec43 2b17 	vmov	d7, r2, r3
 8004afc:	eeb0 0a47 	vmov.f32	s0, s14
 8004b00:	eef0 0a67 	vmov.f32	s1, s15
 8004b04:	f015 fe34 	bl	801a770 <round>
 8004b08:	ec53 2b10 	vmov	r2, r3, d0
 8004b0c:	4610      	mov	r0, r2
 8004b0e:	4619      	mov	r1, r3
 8004b10:	f7fc f84a 	bl	8000ba8 <__aeabi_d2uiz>
 8004b14:	4603      	mov	r3, r0
 8004b16:	633b      	str	r3, [r7, #48]	; 0x30
	next_var2 		= round((next.D3 - LIM_MIN_J2) * GEAR_J2);
 8004b18:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8004b1c:	f04f 0200 	mov.w	r2, #0
 8004b20:	4b54      	ldr	r3, [pc, #336]	; (8004c74 <lowlayer_computeAndWritePulse+0x34c>)
 8004b22:	f7fb fd69 	bl	80005f8 <__aeabi_dmul>
 8004b26:	4602      	mov	r2, r0
 8004b28:	460b      	mov	r3, r1
 8004b2a:	ec43 2b17 	vmov	d7, r2, r3
 8004b2e:	eeb0 0a47 	vmov.f32	s0, s14
 8004b32:	eef0 0a67 	vmov.f32	s1, s15
 8004b36:	f015 fe1b 	bl	801a770 <round>
 8004b3a:	ec53 2b10 	vmov	r2, r3, d0
 8004b3e:	4610      	mov	r0, r2
 8004b40:	4619      	mov	r1, r3
 8004b42:	f7fc f831 	bl	8000ba8 <__aeabi_d2uiz>
 8004b46:	4603      	mov	r3, r0
 8004b48:	62fb      	str	r3, [r7, #44]	; 0x2c
	next_var3 		= round((next.Theta4 - LIM_MIN_J3) * GEAR_J3/(2*PI));
 8004b4a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8004b4e:	a33e      	add	r3, pc, #248	; (adr r3, 8004c48 <lowlayer_computeAndWritePulse+0x320>)
 8004b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b54:	f7fb fb9a 	bl	800028c <__adddf3>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	4610      	mov	r0, r2
 8004b5e:	4619      	mov	r1, r3
 8004b60:	a33b      	add	r3, pc, #236	; (adr r3, 8004c50 <lowlayer_computeAndWritePulse+0x328>)
 8004b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b66:	f7fb fd47 	bl	80005f8 <__aeabi_dmul>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	4610      	mov	r0, r2
 8004b70:	4619      	mov	r1, r3
 8004b72:	a333      	add	r3, pc, #204	; (adr r3, 8004c40 <lowlayer_computeAndWritePulse+0x318>)
 8004b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b78:	f7fb fe68 	bl	800084c <__aeabi_ddiv>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	460b      	mov	r3, r1
 8004b80:	ec43 2b17 	vmov	d7, r2, r3
 8004b84:	eeb0 0a47 	vmov.f32	s0, s14
 8004b88:	eef0 0a67 	vmov.f32	s1, s15
 8004b8c:	f015 fdf0 	bl	801a770 <round>
 8004b90:	ec53 2b10 	vmov	r2, r3, d0
 8004b94:	4610      	mov	r0, r2
 8004b96:	4619      	mov	r1, r3
 8004b98:	f7fc f806 	bl	8000ba8 <__aeabi_d2uiz>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	62bb      	str	r3, [r7, #40]	; 0x28

	delta_var0 = next_var0 - current_var0;
 8004ba0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ba2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	f04f 0300 	mov.w	r3, #0
 8004bac:	e9c7 2308 	strd	r2, r3, [r7, #32]
	delta_var1 = next_var1 - current_var1;
 8004bb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	f04f 0300 	mov.w	r3, #0
 8004bbc:	e9c7 2306 	strd	r2, r3, [r7, #24]
	delta_var2 = next_var2 - current_var2;
 8004bc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	f04f 0300 	mov.w	r3, #0
 8004bcc:	e9c7 2304 	strd	r2, r3, [r7, #16]
	delta_var3 = next_var3 - current_var3;
 8004bd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	f04f 0300 	mov.w	r3, #0
 8004bdc:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if (abs(delta_var0) > 127
 8004be0:	6a3b      	ldr	r3, [r7, #32]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	bfb8      	it	lt
 8004be6:	425b      	neglt	r3, r3
 8004be8:	2b7f      	cmp	r3, #127	; 0x7f
 8004bea:	dc11      	bgt.n	8004c10 <lowlayer_computeAndWritePulse+0x2e8>
		|| abs(delta_var1) > 127
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	bfb8      	it	lt
 8004bf2:	425b      	neglt	r3, r3
 8004bf4:	2b7f      	cmp	r3, #127	; 0x7f
 8004bf6:	dc0b      	bgt.n	8004c10 <lowlayer_computeAndWritePulse+0x2e8>
		|| abs(delta_var2) > 127
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	bfb8      	it	lt
 8004bfe:	425b      	neglt	r3, r3
 8004c00:	2b7f      	cmp	r3, #127	; 0x7f
 8004c02:	dc05      	bgt.n	8004c10 <lowlayer_computeAndWritePulse+0x2e8>
		|| abs(delta_var3) > 127) {
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	bfb8      	it	lt
 8004c0a:	425b      	neglt	r3, r3
 8004c0c:	2b7f      	cmp	r3, #127	; 0x7f
 8004c0e:	dd01      	ble.n	8004c14 <lowlayer_computeAndWritePulse+0x2ec>
		return FALSE;
 8004c10:	2300      	movs	r3, #0
 8004c12:	e00c      	b.n	8004c2e <lowlayer_computeAndWritePulse+0x306>
	} // Can't convert to int8_t , over range

	result = lowlayer_writePulse((int8_t)delta_var0,
 8004c14:	f997 0020 	ldrsb.w	r0, [r7, #32]
 8004c18:	f997 1018 	ldrsb.w	r1, [r7, #24]
 8004c1c:	f997 2010 	ldrsb.w	r2, [r7, #16]
 8004c20:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8004c24:	f000 f828 	bl	8004c78 <lowlayer_writePulse>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	71fb      	strb	r3, [r7, #7]
								 (int8_t)delta_var1,
								 (int8_t)delta_var2,
								 (int8_t)delta_var3);

	return result;
 8004c2c:	79fb      	ldrb	r3, [r7, #7]
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3748      	adds	r7, #72	; 0x48
 8004c32:	46bd      	mov	sp, r7
 8004c34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c38:	b004      	add	sp, #16
 8004c3a:	4770      	bx	lr
 8004c3c:	f3af 8000 	nop.w
 8004c40:	60000000 	.word	0x60000000
 8004c44:	401921fb 	.word	0x401921fb
 8004c48:	daaaaaab 	.word	0xdaaaaaab
 8004c4c:	4007bc89 	.word	0x4007bc89
 8004c50:	a0000000 	.word	0xa0000000
 8004c54:	40d3bca1 	.word	0x40d3bca1
 8004c58:	daaaaaab 	.word	0xdaaaaaab
 8004c5c:	3ff7bc89 	.word	0x3ff7bc89
 8004c60:	00000000 	.word	0x00000000
 8004c64:	40d38800 	.word	0x40d38800
 8004c68:	88000000 	.word	0x88000000
 8004c6c:	4002d97c 	.word	0x4002d97c
 8004c70:	40df4000 	.word	0x40df4000
 8004c74:	40590000 	.word	0x40590000

08004c78 <lowlayer_writePulse>:


uint8_t	lowlayer_writePulse(int8_t pulse0, int8_t pulse1, int8_t pulse2, int8_t pulse3) {
 8004c78:	b590      	push	{r4, r7, lr}
 8004c7a:	b087      	sub	sp, #28
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	4604      	mov	r4, r0
 8004c80:	4608      	mov	r0, r1
 8004c82:	4611      	mov	r1, r2
 8004c84:	461a      	mov	r2, r3
 8004c86:	4623      	mov	r3, r4
 8004c88:	71fb      	strb	r3, [r7, #7]
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	71bb      	strb	r3, [r7, #6]
 8004c8e:	460b      	mov	r3, r1
 8004c90:	717b      	strb	r3, [r7, #5]
 8004c92:	4613      	mov	r3, r2
 8004c94:	713b      	strb	r3, [r7, #4]
	uint8_t pulse0_combine, pulse1_combine, pulse2_combine, pulse3_combine;
	uint8_t pulse0_abs, pulse1_abs, pulse2_abs, pulse3_abs;

	// Var 0
	if (pulse0 < 0) {
 8004c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	da06      	bge.n	8004cac <lowlayer_writePulse+0x34>
		pulse0_abs = -pulse0;
 8004c9e:	79fb      	ldrb	r3, [r7, #7]
 8004ca0:	425b      	negs	r3, r3
 8004ca2:	74fb      	strb	r3, [r7, #19]
		pulse0_combine = -pulse0 | ((!DIR_J0) << 7); // Negative : Clockwise
 8004ca4:	79fb      	ldrb	r3, [r7, #7]
 8004ca6:	425b      	negs	r3, r3
 8004ca8:	75fb      	strb	r3, [r7, #23]
 8004caa:	e006      	b.n	8004cba <lowlayer_writePulse+0x42>
	} else {
		pulse0_abs = pulse0;
 8004cac:	79fb      	ldrb	r3, [r7, #7]
 8004cae:	74fb      	strb	r3, [r7, #19]
		pulse0_combine = pulse0 | (DIR_J0 << 7); // Positive : Anti-Clockwise
 8004cb0:	79fb      	ldrb	r3, [r7, #7]
 8004cb2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004cb6:	b25b      	sxtb	r3, r3
 8004cb8:	75fb      	strb	r3, [r7, #23]
	}
	// Var 1
	if (pulse1 < 0) {
 8004cba:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	da06      	bge.n	8004cd0 <lowlayer_writePulse+0x58>
		pulse1_abs = -pulse1;
 8004cc2:	79bb      	ldrb	r3, [r7, #6]
 8004cc4:	425b      	negs	r3, r3
 8004cc6:	74bb      	strb	r3, [r7, #18]
		pulse1_combine = -pulse1 | ((!DIR_J1) << 7);
 8004cc8:	79bb      	ldrb	r3, [r7, #6]
 8004cca:	425b      	negs	r3, r3
 8004ccc:	75bb      	strb	r3, [r7, #22]
 8004cce:	e006      	b.n	8004cde <lowlayer_writePulse+0x66>
	} else {
		pulse1_abs = pulse1;
 8004cd0:	79bb      	ldrb	r3, [r7, #6]
 8004cd2:	74bb      	strb	r3, [r7, #18]
		pulse1_combine = pulse1 | (DIR_J1 << 7);
 8004cd4:	79bb      	ldrb	r3, [r7, #6]
 8004cd6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004cda:	b25b      	sxtb	r3, r3
 8004cdc:	75bb      	strb	r3, [r7, #22]
	}
	// Var 2
	if (pulse2 < 0) {
 8004cde:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	da0b      	bge.n	8004cfe <lowlayer_writePulse+0x86>
		pulse2_abs = -pulse2;
 8004ce6:	797b      	ldrb	r3, [r7, #5]
 8004ce8:	425b      	negs	r3, r3
 8004cea:	747b      	strb	r3, [r7, #17]
		pulse2_combine = -pulse2 | ((!DIR_J2) << 7);
 8004cec:	797b      	ldrb	r3, [r7, #5]
 8004cee:	425b      	negs	r3, r3
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	b25b      	sxtb	r3, r3
 8004cf4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004cf8:	b25b      	sxtb	r3, r3
 8004cfa:	757b      	strb	r3, [r7, #21]
 8004cfc:	e003      	b.n	8004d06 <lowlayer_writePulse+0x8e>
	} else {
		pulse2_abs = pulse2;
 8004cfe:	797b      	ldrb	r3, [r7, #5]
 8004d00:	747b      	strb	r3, [r7, #17]
		pulse2_combine = pulse2 | (DIR_J2 << 7);
 8004d02:	797b      	ldrb	r3, [r7, #5]
 8004d04:	757b      	strb	r3, [r7, #21]
	}
	// Var 3
	if (pulse3 < 0) {
 8004d06:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	da06      	bge.n	8004d1c <lowlayer_writePulse+0xa4>
		pulse3_abs = -pulse3;
 8004d0e:	793b      	ldrb	r3, [r7, #4]
 8004d10:	425b      	negs	r3, r3
 8004d12:	743b      	strb	r3, [r7, #16]
		pulse3_combine = -pulse3 | ((!DIR_J3) << 7);
 8004d14:	793b      	ldrb	r3, [r7, #4]
 8004d16:	425b      	negs	r3, r3
 8004d18:	753b      	strb	r3, [r7, #20]
 8004d1a:	e006      	b.n	8004d2a <lowlayer_writePulse+0xb2>
	} else {
		pulse3_abs = pulse3;
 8004d1c:	793b      	ldrb	r3, [r7, #4]
 8004d1e:	743b      	strb	r3, [r7, #16]
		pulse3_combine = pulse3 | (DIR_J3 << 7);
 8004d20:	793b      	ldrb	r3, [r7, #4]
 8004d22:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004d26:	b25b      	sxtb	r3, r3
 8004d28:	753b      	strb	r3, [r7, #20]
	}

	// Check limit
	if (pulse0_abs > LIM_PULSE_J0
 8004d2a:	7cfb      	ldrb	r3, [r7, #19]
 8004d2c:	2b4b      	cmp	r3, #75	; 0x4b
 8004d2e:	d808      	bhi.n	8004d42 <lowlayer_writePulse+0xca>
		|| pulse1_abs > LIM_PULSE_J1
 8004d30:	7cbb      	ldrb	r3, [r7, #18]
 8004d32:	2b78      	cmp	r3, #120	; 0x78
 8004d34:	d805      	bhi.n	8004d42 <lowlayer_writePulse+0xca>
		|| pulse2_abs > LIM_PULSE_J2
 8004d36:	7c7b      	ldrb	r3, [r7, #17]
 8004d38:	2b7d      	cmp	r3, #125	; 0x7d
 8004d3a:	d802      	bhi.n	8004d42 <lowlayer_writePulse+0xca>
		|| pulse3_abs > LIM_PULSE_J3) {
 8004d3c:	7c3b      	ldrb	r3, [r7, #16]
 8004d3e:	2b65      	cmp	r3, #101	; 0x65
 8004d40:	d901      	bls.n	8004d46 <lowlayer_writePulse+0xce>
		return FALSE;
 8004d42:	2300      	movs	r3, #0
 8004d44:	e04b      	b.n	8004dde <lowlayer_writePulse+0x166>
//	if (pulse3_abs == 0) {
//		HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET); // Disable
//	} else {
//		HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
//	}
	HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
 8004d46:	2200      	movs	r2, #0
 8004d48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004d4c:	4826      	ldr	r0, [pc, #152]	; (8004de8 <lowlayer_writePulse+0x170>)
 8004d4e:	f007 f9e7 	bl	800c120 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PULSE_WRITE_GPIO_Port, PULSE_WRITE_Pin, GPIO_PIN_RESET);
 8004d52:	2200      	movs	r2, #0
 8004d54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004d58:	4824      	ldr	r0, [pc, #144]	; (8004dec <lowlayer_writePulse+0x174>)
 8004d5a:	f007 f9e1 	bl	800c120 <HAL_GPIO_WritePin>
	// Write to Module DDA
	FSMC_Write(ADDRESS_DDA_0, (uint32_t)pulse0_combine);
 8004d5e:	7dfb      	ldrb	r3, [r7, #23]
 8004d60:	4619      	mov	r1, r3
 8004d62:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 8004d66:	f7fe fbdf 	bl	8003528 <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_1, (uint32_t)pulse1_combine);
 8004d6a:	7dbb      	ldrb	r3, [r7, #22]
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	4820      	ldr	r0, [pc, #128]	; (8004df0 <lowlayer_writePulse+0x178>)
 8004d70:	f7fe fbda 	bl	8003528 <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_2, (uint32_t)pulse2_combine);
 8004d74:	7d7b      	ldrb	r3, [r7, #21]
 8004d76:	4619      	mov	r1, r3
 8004d78:	481e      	ldr	r0, [pc, #120]	; (8004df4 <lowlayer_writePulse+0x17c>)
 8004d7a:	f7fe fbd5 	bl	8003528 <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_3, (uint32_t)pulse3_combine);
 8004d7e:	7d3b      	ldrb	r3, [r7, #20]
 8004d80:	4619      	mov	r1, r3
 8004d82:	481d      	ldr	r0, [pc, #116]	; (8004df8 <lowlayer_writePulse+0x180>)
 8004d84:	f7fe fbd0 	bl	8003528 <FSMC_Write>

	// Trigger
	uint8_t delay = 100;
 8004d88:	2364      	movs	r3, #100	; 0x64
 8004d8a:	73fb      	strb	r3, [r7, #15]
	
	 while (delay--);
 8004d8c:	bf00      	nop
 8004d8e:	7bfb      	ldrb	r3, [r7, #15]
 8004d90:	1e5a      	subs	r2, r3, #1
 8004d92:	73fa      	strb	r2, [r7, #15]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d1fa      	bne.n	8004d8e <lowlayer_writePulse+0x116>

//	int16_t wow = HAL_GPIO_ReadPin(CPLD_BUSY_GPIO_Port, CPLD_BUSY_Pin);
//	LOG_REPORT(" Busy: ", wow);
	HAL_GPIO_WritePin(PULSE_WRITE_GPIO_Port, PULSE_WRITE_Pin, GPIO_PIN_SET);
 8004d98:	2201      	movs	r2, #1
 8004d9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004d9e:	4813      	ldr	r0, [pc, #76]	; (8004dec <lowlayer_writePulse+0x174>)
 8004da0:	f007 f9be 	bl	800c120 <HAL_GPIO_WritePin>

	// Accumulate
	pulse_accumulate[0] += pulse0;
 8004da4:	4b15      	ldr	r3, [pc, #84]	; (8004dfc <lowlayer_writePulse+0x184>)
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dac:	4413      	add	r3, r2
 8004dae:	4a13      	ldr	r2, [pc, #76]	; (8004dfc <lowlayer_writePulse+0x184>)
 8004db0:	6013      	str	r3, [r2, #0]
	pulse_accumulate[1] += pulse1;
 8004db2:	4b12      	ldr	r3, [pc, #72]	; (8004dfc <lowlayer_writePulse+0x184>)
 8004db4:	685a      	ldr	r2, [r3, #4]
 8004db6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004dba:	4413      	add	r3, r2
 8004dbc:	4a0f      	ldr	r2, [pc, #60]	; (8004dfc <lowlayer_writePulse+0x184>)
 8004dbe:	6053      	str	r3, [r2, #4]
	pulse_accumulate[2] += pulse2;
 8004dc0:	4b0e      	ldr	r3, [pc, #56]	; (8004dfc <lowlayer_writePulse+0x184>)
 8004dc2:	689a      	ldr	r2, [r3, #8]
 8004dc4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004dc8:	4413      	add	r3, r2
 8004dca:	4a0c      	ldr	r2, [pc, #48]	; (8004dfc <lowlayer_writePulse+0x184>)
 8004dcc:	6093      	str	r3, [r2, #8]
	pulse_accumulate[3] += pulse3;
 8004dce:	4b0b      	ldr	r3, [pc, #44]	; (8004dfc <lowlayer_writePulse+0x184>)
 8004dd0:	68da      	ldr	r2, [r3, #12]
 8004dd2:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	4a08      	ldr	r2, [pc, #32]	; (8004dfc <lowlayer_writePulse+0x184>)
 8004dda:	60d3      	str	r3, [r2, #12]

	return TRUE;
 8004ddc:	2301      	movs	r3, #1
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	371c      	adds	r7, #28
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd90      	pop	{r4, r7, pc}
 8004de6:	bf00      	nop
 8004de8:	40020000 	.word	0x40020000
 8004dec:	40020c00 	.word	0x40020c00
 8004df0:	60000002 	.word	0x60000002
 8004df4:	60000004 	.word	0x60000004
 8004df8:	60000006 	.word	0x60000006
 8004dfc:	20004ec8 	.word	0x20004ec8

08004e00 <lowlayer_resetEncoder>:

void	lowlayer_resetEncoder(void) {
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0
	// Trigger
	uint8_t delay = 100;
 8004e06:	2364      	movs	r3, #100	; 0x64
 8004e08:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ENCODER_RESET_GPIO_Port, ENCODER_RESET_Pin, GPIO_PIN_SET);
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004e10:	4809      	ldr	r0, [pc, #36]	; (8004e38 <lowlayer_resetEncoder+0x38>)
 8004e12:	f007 f985 	bl	800c120 <HAL_GPIO_WritePin>
	while (delay--);
 8004e16:	bf00      	nop
 8004e18:	79fb      	ldrb	r3, [r7, #7]
 8004e1a:	1e5a      	subs	r2, r3, #1
 8004e1c:	71fa      	strb	r2, [r7, #7]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1fa      	bne.n	8004e18 <lowlayer_resetEncoder+0x18>
	HAL_GPIO_WritePin(ENCODER_RESET_GPIO_Port, ENCODER_RESET_Pin, GPIO_PIN_RESET);
 8004e22:	2200      	movs	r2, #0
 8004e24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004e28:	4803      	ldr	r0, [pc, #12]	; (8004e38 <lowlayer_resetEncoder+0x38>)
 8004e2a:	f007 f979 	bl	800c120 <HAL_GPIO_WritePin>
}
 8004e2e:	bf00      	nop
 8004e30:	3708      	adds	r7, #8
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	40020c00 	.word	0x40020c00

08004e3c <lowlayer_readLimitSwitch>:

uint8_t lowlayer_readLimitSwitch(void) {
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
	uint16_t read_data = FSMC_Read(ADDRESS_LIMIT);
 8004e42:	4805      	ldr	r0, [pc, #20]	; (8004e58 <lowlayer_readLimitSwitch+0x1c>)
 8004e44:	f7fe fb7f 	bl	8003546 <FSMC_Read>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	80fb      	strh	r3, [r7, #6]

	return (uint8_t)read_data;
 8004e4c:	88fb      	ldrh	r3, [r7, #6]
 8004e4e:	b2db      	uxtb	r3, r3
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3708      	adds	r7, #8
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	60000020 	.word	0x60000020

08004e5c <lowlayer_readEncoder>:

int32_t lowlayer_readEncoder(uint8_t encoder_num) {
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	4603      	mov	r3, r0
 8004e64:	71fb      	strb	r3, [r7, #7]
	int32_t data;
	if (encoder_num <= 2) {
 8004e66:	79fb      	ldrb	r3, [r7, #7]
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d81c      	bhi.n	8004ea6 <lowlayer_readEncoder+0x4a>
		uint16_t low_word = FSMC_Read(ADDRESS_ENC0_LOW + encoder_num*4);
 8004e6c:	79fb      	ldrb	r3, [r7, #7]
 8004e6e:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8004e72:	3310      	adds	r3, #16
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7fe fb65 	bl	8003546 <FSMC_Read>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	817b      	strh	r3, [r7, #10]
		uint16_t high_word = FSMC_Read(ADDRESS_ENC0_LOW + encoder_num*4 + 2);
 8004e80:	79fb      	ldrb	r3, [r7, #7]
 8004e82:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8004e86:	3310      	adds	r3, #16
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	3302      	adds	r3, #2
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f7fe fb5a 	bl	8003546 <FSMC_Read>
 8004e92:	4603      	mov	r3, r0
 8004e94:	813b      	strh	r3, [r7, #8]
		data = high_word;
 8004e96:	893b      	ldrh	r3, [r7, #8]
 8004e98:	60fb      	str	r3, [r7, #12]
		data = (data << 16) | low_word;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	041a      	lsls	r2, r3, #16
 8004e9e:	897b      	ldrh	r3, [r7, #10]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	60fb      	str	r3, [r7, #12]
 8004ea4:	e001      	b.n	8004eaa <lowlayer_readEncoder+0x4e>
	} else {
		data = 0;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	60fb      	str	r3, [r7, #12]
	}
	return data;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3710      	adds	r7, #16
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <lowlayer_readCapture>:

int32_t lowlayer_readCapture(uint8_t capture_num) {
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	4603      	mov	r3, r0
 8004ebc:	71fb      	strb	r3, [r7, #7]
	int32_t data;
	if (capture_num <= 2) {
 8004ebe:	79fb      	ldrb	r3, [r7, #7]
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d81c      	bhi.n	8004efe <lowlayer_readCapture+0x4a>
		uint16_t low_word = FSMC_Read(ADDRESS_CAP0_LOW + capture_num*4);
 8004ec4:	79fb      	ldrb	r3, [r7, #7]
 8004ec6:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8004eca:	3318      	adds	r3, #24
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f7fe fb39 	bl	8003546 <FSMC_Read>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	817b      	strh	r3, [r7, #10]
		uint16_t high_word = FSMC_Read(ADDRESS_CAP0_LOW + capture_num*4 + 2);
 8004ed8:	79fb      	ldrb	r3, [r7, #7]
 8004eda:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8004ede:	3318      	adds	r3, #24
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	3302      	adds	r3, #2
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f7fe fb2e 	bl	8003546 <FSMC_Read>
 8004eea:	4603      	mov	r3, r0
 8004eec:	813b      	strh	r3, [r7, #8]
		data = high_word;
 8004eee:	893b      	ldrh	r3, [r7, #8]
 8004ef0:	60fb      	str	r3, [r7, #12]
		data = (data << 16) | low_word;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	041a      	lsls	r2, r3, #16
 8004ef6:	897b      	ldrh	r3, [r7, #10]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	60fb      	str	r3, [r7, #12]
 8004efc:	e001      	b.n	8004f02 <lowlayer_readCapture+0x4e>
	} else {
		data = 0;
 8004efe:	2300      	movs	r3, #0
 8004f00:	60fb      	str	r3, [r7, #12]
	}
	return data;
 8004f02:	68fb      	ldr	r3, [r7, #12]
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3710      	adds	r7, #16
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <lowlayer_updateEncoder>:

void	lowlayer_updateEncoder(void) {
 8004f0c:	b590      	push	{r4, r7, lr}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 8004f12:	2300      	movs	r3, #0
 8004f14:	71fb      	strb	r3, [r7, #7]
 8004f16:	e00b      	b.n	8004f30 <lowlayer_updateEncoder+0x24>
		position_encoder[i] = lowlayer_readEncoder(i);
 8004f18:	79fc      	ldrb	r4, [r7, #7]
 8004f1a:	79fb      	ldrb	r3, [r7, #7]
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f7ff ff9d 	bl	8004e5c <lowlayer_readEncoder>
 8004f22:	4603      	mov	r3, r0
 8004f24:	4a06      	ldr	r2, [pc, #24]	; (8004f40 <lowlayer_updateEncoder+0x34>)
 8004f26:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for (uint8_t i = 0; i < 3; i++) {
 8004f2a:	79fb      	ldrb	r3, [r7, #7]
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	71fb      	strb	r3, [r7, #7]
 8004f30:	79fb      	ldrb	r3, [r7, #7]
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d9f0      	bls.n	8004f18 <lowlayer_updateEncoder+0xc>
	}
}
 8004f36:	bf00      	nop
 8004f38:	bf00      	nop
 8004f3a:	370c      	adds	r7, #12
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd90      	pop	{r4, r7, pc}
 8004f40:	20004edc 	.word	0x20004edc

08004f44 <lowlayer_updateCapture>:

void	lowlayer_updateCapture(void) {
 8004f44:	b590      	push	{r4, r7, lr}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	71fb      	strb	r3, [r7, #7]
 8004f4e:	e00b      	b.n	8004f68 <lowlayer_updateCapture+0x24>
			position_capture[i] = lowlayer_readCapture(i);
 8004f50:	79fc      	ldrb	r4, [r7, #7]
 8004f52:	79fb      	ldrb	r3, [r7, #7]
 8004f54:	4618      	mov	r0, r3
 8004f56:	f7ff ffad 	bl	8004eb4 <lowlayer_readCapture>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	4a06      	ldr	r2, [pc, #24]	; (8004f78 <lowlayer_updateCapture+0x34>)
 8004f5e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for (uint8_t i = 0; i < 3; i++) {
 8004f62:	79fb      	ldrb	r3, [r7, #7]
 8004f64:	3301      	adds	r3, #1
 8004f66:	71fb      	strb	r3, [r7, #7]
 8004f68:	79fb      	ldrb	r3, [r7, #7]
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d9f0      	bls.n	8004f50 <lowlayer_updateCapture+0xc>
	}
}
 8004f6e:	bf00      	nop
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd90      	pop	{r4, r7, pc}
 8004f78:	20004eec 	.word	0x20004eec

08004f7c <lowlayer_updateLimit>:

void	lowlayer_updateLimit(void) {
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
	uint8_t limit_data = lowlayer_readLimitSwitch();
 8004f82:	f7ff ff5b 	bl	8004e3c <lowlayer_readLimitSwitch>
 8004f86:	4603      	mov	r3, r0
 8004f88:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i = 0; i < 4; i++) {
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	71fb      	strb	r3, [r7, #7]
 8004f8e:	e00d      	b.n	8004fac <lowlayer_updateLimit+0x30>
			limit_switch[i] = (limit_data & (0x01 << i)) ? 1 : 0;
 8004f90:	79ba      	ldrb	r2, [r7, #6]
 8004f92:	79fb      	ldrb	r3, [r7, #7]
 8004f94:	fa42 f303 	asr.w	r3, r2, r3
 8004f98:	b2da      	uxtb	r2, r3
 8004f9a:	79fb      	ldrb	r3, [r7, #7]
 8004f9c:	f002 0201 	and.w	r2, r2, #1
 8004fa0:	b2d1      	uxtb	r1, r2
 8004fa2:	4a06      	ldr	r2, [pc, #24]	; (8004fbc <lowlayer_updateLimit+0x40>)
 8004fa4:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 4; i++) {
 8004fa6:	79fb      	ldrb	r3, [r7, #7]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	71fb      	strb	r3, [r7, #7]
 8004fac:	79fb      	ldrb	r3, [r7, #7]
 8004fae:	2b03      	cmp	r3, #3
 8004fb0:	d9ee      	bls.n	8004f90 <lowlayer_updateLimit+0x14>
	}
}
 8004fb2:	bf00      	nop
 8004fb4:	bf00      	nop
 8004fb6:	3708      	adds	r7, #8
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	20004ee8 	.word	0x20004ee8

08004fc0 <lowlayer_setOutput>:

void	lowlayer_setOutput(uint8_t value) {
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	71fb      	strb	r3, [r7, #7]
	if (value > 0) {
 8004fca:	79fb      	ldrb	r3, [r7, #7]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d006      	beq.n	8004fde <lowlayer_setOutput+0x1e>
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_SET);
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004fd6:	4807      	ldr	r0, [pc, #28]	; (8004ff4 <lowlayer_setOutput+0x34>)
 8004fd8:	f007 f8a2 	bl	800c120 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_RESET);
	}
}
 8004fdc:	e005      	b.n	8004fea <lowlayer_setOutput+0x2a>
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_RESET);
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004fe4:	4803      	ldr	r0, [pc, #12]	; (8004ff4 <lowlayer_setOutput+0x34>)
 8004fe6:	f007 f89b 	bl	800c120 <HAL_GPIO_WritePin>
}
 8004fea:	bf00      	nop
 8004fec:	3708      	adds	r7, #8
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	40020400 	.word	0x40020400

08004ff8 <lowlayer_CPLD_Init>:

void	lowlayer_CPLD_Init(void) {
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STOP_GPIO_Port, STOP_Pin, GPIO_PIN_SET); // STOP low active
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	2140      	movs	r1, #64	; 0x40
 8005000:	4802      	ldr	r0, [pc, #8]	; (800500c <lowlayer_CPLD_Init+0x14>)
 8005002:	f007 f88d 	bl	800c120 <HAL_GPIO_WritePin>
}
 8005006:	bf00      	nop
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	40020c00 	.word	0x40020c00

08005010 <lowlayer_stepMotorInit>:

void	lowlayer_stepMotorInit(void) {
 8005010:	b580      	push	{r7, lr}
 8005012:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET); // ENABLE low active
 8005014:	2201      	movs	r2, #1
 8005016:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800501a:	4808      	ldr	r0, [pc, #32]	; (800503c <lowlayer_stepMotorInit+0x2c>)
 800501c:	f007 f880 	bl	800c120 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_RESET_GPIO_Port, STEP_RESET_Pin, GPIO_PIN_SET); // RESET low active
 8005020:	2201      	movs	r2, #1
 8005022:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005026:	4805      	ldr	r0, [pc, #20]	; (800503c <lowlayer_stepMotorInit+0x2c>)
 8005028:	f007 f87a 	bl	800c120 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_SLEEP_GPIO_Port, STEP_SLEEP_Pin, GPIO_PIN_SET); // SLEEP low active
 800502c:	2201      	movs	r2, #1
 800502e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005032:	4802      	ldr	r0, [pc, #8]	; (800503c <lowlayer_stepMotorInit+0x2c>)
 8005034:	f007 f874 	bl	800c120 <HAL_GPIO_WritePin>
}
 8005038:	bf00      	nop
 800503a:	bd80      	pop	{r7, pc}
 800503c:	40020000 	.word	0x40020000

08005040 <scaraStartup>:
//											 "Over Velocity",
//											 "Over Accelerate",
//											 "Wrong Joint Num",
//											 "Wrong Coordinate"
//											};
void				scaraStartup(void) {
 8005040:	b580      	push	{r7, lr}
 8005042:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	scaraSetScanFlag();
#endif
	lowlayer_CPLD_Init();
 8005044:	f7ff ffd8 	bl	8004ff8 <lowlayer_CPLD_Init>
	lowlayer_stepMotorInit();
 8005048:	f7ff ffe2 	bl	8005010 <lowlayer_stepMotorInit>
	lowlayer_resetEncoder();
 800504c:	f7ff fed8 	bl	8004e00 <lowlayer_resetEncoder>
	//lowlayer_writePulse(0, 0, 0, 0);
}
 8005050:	bf00      	nop
 8005052:	bd80      	pop	{r7, pc}
 8005054:	0000      	movs	r0, r0
	...

08005058 <scara_test_InitDuty>:

SCARA_StatusTypeDef scara_test_InitDuty(DUTY_Command_TypeDef command)
{
 8005058:	b084      	sub	sp, #16
 800505a:	b5b0      	push	{r4, r5, r7, lr}
 800505c:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 8005060:	af5e      	add	r7, sp, #376	; 0x178
 8005062:	f107 0ce8 	add.w	ip, r7, #232	; 0xe8
 8005066:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	SCARA_StatusTypeDef status, status1, status2;
	double total_s, angle_s;
	int8_t dir_angle;
	SCARA_PositionTypeDef target_point;
	command.target_point.roll = command.target_point.roll*PI/180.0;
 800506a:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800506e:	a38c      	add	r3, pc, #560	; (adr r3, 80052a0 <scara_test_InitDuty+0x248>)
 8005070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005074:	f7fb fac0 	bl	80005f8 <__aeabi_dmul>
 8005078:	4602      	mov	r2, r0
 800507a:	460b      	mov	r3, r1
 800507c:	4610      	mov	r0, r2
 800507e:	4619      	mov	r1, r3
 8005080:	f04f 0200 	mov.w	r2, #0
 8005084:	4b88      	ldr	r3, [pc, #544]	; (80052a8 <scara_test_InitDuty+0x250>)
 8005086:	f7fb fbe1 	bl	800084c <__aeabi_ddiv>
 800508a:	4602      	mov	r2, r0
 800508c:	460b      	mov	r3, r1
 800508e:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
	if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8005092:	f897 30f4 	ldrb.w	r3, [r7, #244]	; 0xf4
 8005096:	2b01      	cmp	r3, #1
 8005098:	d12c      	bne.n	80050f4 <scara_test_InitDuty+0x9c>
		target_point.x 		= positionCurrent.x + command.target_point.x;
 800509a:	4b84      	ldr	r3, [pc, #528]	; (80052ac <scara_test_InitDuty+0x254>)
 800509c:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80050a0:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 80050a4:	f7fb f8f2 	bl	800028c <__adddf3>
 80050a8:	4602      	mov	r2, r0
 80050aa:	460b      	mov	r3, r1
 80050ac:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		target_point.y 		= positionCurrent.y + command.target_point.y;
 80050b0:	4b7e      	ldr	r3, [pc, #504]	; (80052ac <scara_test_InitDuty+0x254>)
 80050b2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80050b6:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 80050ba:	f7fb f8e7 	bl	800028c <__adddf3>
 80050be:	4602      	mov	r2, r0
 80050c0:	460b      	mov	r3, r1
 80050c2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		target_point.z 		= positionCurrent.z + command.target_point.z;
 80050c6:	4b79      	ldr	r3, [pc, #484]	; (80052ac <scara_test_InitDuty+0x254>)
 80050c8:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 80050cc:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 80050d0:	f7fb f8dc 	bl	800028c <__adddf3>
 80050d4:	4602      	mov	r2, r0
 80050d6:	460b      	mov	r3, r1
 80050d8:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
		target_point.roll	= positionCurrent.roll + command.target_point.roll;
 80050dc:	4b73      	ldr	r3, [pc, #460]	; (80052ac <scara_test_InitDuty+0x254>)
 80050de:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80050e2:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 80050e6:	f7fb f8d1 	bl	800028c <__adddf3>
 80050ea:	4602      	mov	r2, r0
 80050ec:	460b      	mov	r3, r1
 80050ee:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 80050f2:	e016      	b.n	8005122 <scara_test_InitDuty+0xca>
	} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 80050f4:	f897 30f4 	ldrb.w	r3, [r7, #244]	; 0xf4
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d110      	bne.n	800511e <scara_test_InitDuty+0xc6>
		target_point.x 		= command.target_point.x;
 80050fc:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8005100:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		target_point.y 		= command.target_point.y;
 8005104:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 8005108:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		target_point.z 		= command.target_point.z;
 800510c:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8005110:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
		target_point.roll	= command.target_point.roll;
 8005114:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8005118:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 800511c:	e001      	b.n	8005122 <scara_test_InitDuty+0xca>
	} else {
		return SCARA_STATUS_ERROR_COORDINATE;
 800511e:	230c      	movs	r3, #12
 8005120:	e0b5      	b.n	800528e <scara_test_InitDuty+0x236>
	}
	angle_s = target_point.roll - positionCurrent.roll;
 8005122:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005126:	4b61      	ldr	r3, [pc, #388]	; (80052ac <scara_test_InitDuty+0x254>)
 8005128:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800512c:	f7fb f8ac 	bl	8000288 <__aeabi_dsub>
 8005130:	4602      	mov	r2, r0
 8005132:	460b      	mov	r3, r1
 8005134:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
	dir_angle = 1;
 8005138:	2301      	movs	r3, #1
 800513a:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	if ( angle_s < 0) {
 800513e:	f04f 0200 	mov.w	r2, #0
 8005142:	f04f 0300 	mov.w	r3, #0
 8005146:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800514a:	f7fb fcc7 	bl	8000adc <__aeabi_dcmplt>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d002      	beq.n	800515a <scara_test_InitDuty+0x102>
		dir_angle = -1;
 8005154:	23ff      	movs	r3, #255	; 0xff
 8005156:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	}
	if ( fabs(angle_s) > PI) {
 800515a:	f8d7 40d0 	ldr.w	r4, [r7, #208]	; 0xd0
 800515e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005162:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8005166:	a34e      	add	r3, pc, #312	; (adr r3, 80052a0 <scara_test_InitDuty+0x248>)
 8005168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800516c:	4620      	mov	r0, r4
 800516e:	4629      	mov	r1, r5
 8005170:	f7fb fcd2 	bl	8000b18 <__aeabi_dcmpgt>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d021      	beq.n	80051be <scara_test_InitDuty+0x166>
		dir_angle = -dir_angle;
 800517a:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 800517e:	425b      	negs	r3, r3
 8005180:	b2db      	uxtb	r3, r3
 8005182:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		angle_s = (2*PI - fabsf(angle_s))*dir_angle;
 8005186:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800518a:	f7fb fd2d 	bl	8000be8 <__aeabi_d2f>
 800518e:	ee07 0a90 	vmov	s15, r0
 8005192:	eef0 7ae7 	vabs.f32	s15, s15
 8005196:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80052b0 <scara_test_InitDuty+0x258>
 800519a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800519e:	f997 30cf 	ldrsb.w	r3, [r7, #207]	; 0xcf
 80051a2:	ee07 3a90 	vmov	s15, r3
 80051a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051ae:	ee17 0a90 	vmov	r0, s15
 80051b2:	f7fb f9c9 	bl	8000548 <__aeabi_f2d>
 80051b6:	4602      	mov	r2, r0
 80051b8:	460b      	mov	r3, r1
 80051ba:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
	}
	myDUTY.time_total = command.time_total;
 80051be:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 80051c2:	493c      	ldr	r1, [pc, #240]	; (80052b4 <scara_test_InitDuty+0x25c>)
 80051c4:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 80051c8:	e9c1 2300 	strd	r2, r3, [r1]
	myDUTY.space_type = DUTY_SPACE_TASK;// Change type
 80051cc:	4b39      	ldr	r3, [pc, #228]	; (80052b4 <scara_test_InitDuty+0x25c>)
 80051ce:	2200      	movs	r2, #0
 80051d0:	701a      	strb	r2, [r3, #0]
	myDUTY.task.roll_start = positionCurrent.roll;
 80051d2:	4b36      	ldr	r3, [pc, #216]	; (80052ac <scara_test_InitDuty+0x254>)
 80051d4:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80051d8:	4936      	ldr	r1, [pc, #216]	; (80052b4 <scara_test_InitDuty+0x25c>)
 80051da:	f501 6182 	add.w	r1, r1, #1040	; 0x410
 80051de:	e9c1 2300 	strd	r2, r3, [r1]
	myDUTY.task.path.path_type = DUTY_PATH_LINE;
 80051e2:	4b34      	ldr	r3, [pc, #208]	; (80052b4 <scara_test_InitDuty+0x25c>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	721a      	strb	r2, [r3, #8]
	myDUTY.task.trajectory_roll.lspb.total_s = angle_s;
 80051e8:	4932      	ldr	r1, [pc, #200]	; (80052b4 <scara_test_InitDuty+0x25c>)
 80051ea:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 80051ee:	e9c1 23be 	strd	r2, r3, [r1, #760]	; 0x2f8
	myDUTY.task.trajectory_roll.lspb.dir = dir_angle;
 80051f2:	4a30      	ldr	r2, [pc, #192]	; (80052b4 <scara_test_InitDuty+0x25c>)
 80051f4:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80051f8:	f882 3298 	strb.w	r3, [r2, #664]	; 0x298
	myDUTY.task.trajectory_roll.lspb.v_design = angle_s/command.time_total;
 80051fc:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8005200:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8005204:	f7fb fb22 	bl	800084c <__aeabi_ddiv>
 8005208:	4602      	mov	r2, r0
 800520a:	460b      	mov	r3, r1
 800520c:	4929      	ldr	r1, [pc, #164]	; (80052b4 <scara_test_InitDuty+0x25c>)
 800520e:	e9c1 23b0 	strd	r2, r3, [r1, #704]	; 0x2c0
	myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8005212:	4b28      	ldr	r3, [pc, #160]	; (80052b4 <scara_test_InitDuty+0x25c>)
 8005214:	2202      	movs	r2, #2
 8005216:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
	status = scaraInitLine(&(myDUTY.task.path.line), positionCurrent, target_point);
 800521a:	4c24      	ldr	r4, [pc, #144]	; (80052ac <scara_test_InitDuty+0x254>)
 800521c:	a82e      	add	r0, sp, #184	; 0xb8
 800521e:	463b      	mov	r3, r7
 8005220:	22c0      	movs	r2, #192	; 0xc0
 8005222:	4619      	mov	r1, r3
 8005224:	f010 fd74 	bl	8015d10 <memcpy>
 8005228:	4668      	mov	r0, sp
 800522a:	f104 0308 	add.w	r3, r4, #8
 800522e:	22b8      	movs	r2, #184	; 0xb8
 8005230:	4619      	mov	r1, r3
 8005232:	f010 fd6d 	bl	8015d10 <memcpy>
 8005236:	e894 000c 	ldmia.w	r4, {r2, r3}
 800523a:	481f      	ldr	r0, [pc, #124]	; (80052b8 <scara_test_InitDuty+0x260>)
 800523c:	f001 fb98 	bl	8006970 <scaraInitLine>
 8005240:	4603      	mov	r3, r0
 8005242:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
	total_s = myDUTY.task.path.line.total_s;
 8005246:	4b1b      	ldr	r3, [pc, #108]	; (80052b4 <scara_test_InitDuty+0x25c>)
 8005248:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800524c:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
	if(status != SCARA_STATUS_OK){
 8005250:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8005254:	2b00      	cmp	r3, #0
 8005256:	d002      	beq.n	800525e <scara_test_InitDuty+0x206>
		return status;
 8005258:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 800525c:	e017      	b.n	800528e <scara_test_InitDuty+0x236>
	}
	status = scaraInitLinear(&(myDUTY.task.trajectory_3d.linear), TRAJECTORY_3D, total_s, DUTY_MODE_INIT_QT, command.time_total);
 800525e:	ed97 7b42 	vldr	d7, [r7, #264]	; 0x108
 8005262:	eeb0 1a47 	vmov.f32	s2, s14
 8005266:	eef0 1a67 	vmov.f32	s3, s15
 800526a:	2203      	movs	r2, #3
 800526c:	ed97 0b30 	vldr	d0, [r7, #192]	; 0xc0
 8005270:	2104      	movs	r1, #4
 8005272:	4812      	ldr	r0, [pc, #72]	; (80052bc <scara_test_InitDuty+0x264>)
 8005274:	f001 fda8 	bl	8006dc8 <scaraInitLinear>
 8005278:	4603      	mov	r3, r0
 800527a:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
	if(status != SCARA_STATUS_OK){
 800527e:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8005282:	2b00      	cmp	r3, #0
 8005284:	d002      	beq.n	800528c <scara_test_InitDuty+0x234>
		return status;
 8005286:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 800528a:	e000      	b.n	800528e <scara_test_InitDuty+0x236>
	}

	return SCARA_STATUS_OK;
 800528c:	2300      	movs	r3, #0
	
}
 800528e:	4618      	mov	r0, r3
 8005290:	37d8      	adds	r7, #216	; 0xd8
 8005292:	46bd      	mov	sp, r7
 8005294:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8005298:	b004      	add	sp, #16
 800529a:	4770      	bx	lr
 800529c:	f3af 8000 	nop.w
 80052a0:	60000000 	.word	0x60000000
 80052a4:	400921fb 	.word	0x400921fb
 80052a8:	40668000 	.word	0x40668000
 80052ac:	20005af0 	.word	0x20005af0
 80052b0:	40c90fdb 	.word	0x40c90fdb
 80052b4:	20004f30 	.word	0x20004f30
 80052b8:	20004f40 	.word	0x20004f40
 80052bc:	20005198 	.word	0x20005198

080052c0 <scaraInitDuty>:

/* Compute duty corresponding to new command */
SCARA_StatusTypeDef	scaraInitDuty		(DUTY_Command_TypeDef command) {
 80052c0:	b084      	sub	sp, #16
 80052c2:	b5b0      	push	{r4, r5, r7, lr}
 80052c4:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 80052c8:	af90      	add	r7, sp, #576	; 0x240
 80052ca:	f507 7ce8 	add.w	ip, r7, #464	; 0x1d0
 80052ce:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	SCARA_StatusTypeDef status, status1, status2;

	/*----------- Space Task ------------*/
	if(DUTY_SPACE_TASK == command.space_type) {
 80052d2:	f897 31dd 	ldrb.w	r3, [r7, #477]	; 0x1dd
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	f040 83af 	bne.w	8005a3a <scaraInitDuty+0x77a>
		double total_s, angle_s;
		int8_t dir_angle;
		SCARA_PositionTypeDef	target_point;
		// Change Degree --> Radian
		command.target_point.roll = command.target_point.roll*PI/180.0;
 80052dc:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	; 0x258
 80052e0:	a3b1      	add	r3, pc, #708	; (adr r3, 80055a8 <scaraInitDuty+0x2e8>)
 80052e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e6:	f7fb f987 	bl	80005f8 <__aeabi_dmul>
 80052ea:	4602      	mov	r2, r0
 80052ec:	460b      	mov	r3, r1
 80052ee:	4610      	mov	r0, r2
 80052f0:	4619      	mov	r1, r3
 80052f2:	f04f 0200 	mov.w	r2, #0
 80052f6:	4bae      	ldr	r3, [pc, #696]	; (80055b0 <scaraInitDuty+0x2f0>)
 80052f8:	f7fb faa8 	bl	800084c <__aeabi_ddiv>
 80052fc:	4602      	mov	r2, r0
 80052fe:	460b      	mov	r3, r1
 8005300:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
		// Coordinate
		if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8005304:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8005308:	2b01      	cmp	r3, #1
 800530a:	d130      	bne.n	800536e <scaraInitDuty+0xae>
			target_point.x 		= positionCurrent.x + command.target_point.x;
 800530c:	4ba9      	ldr	r3, [pc, #676]	; (80055b4 <scaraInitDuty+0x2f4>)
 800530e:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8005312:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 8005316:	f7fa ffb9 	bl	800028c <__adddf3>
 800531a:	4602      	mov	r2, r0
 800531c:	460b      	mov	r3, r1
 800531e:	4639      	mov	r1, r7
 8005320:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			target_point.y 		= positionCurrent.y + command.target_point.y;
 8005324:	4ba3      	ldr	r3, [pc, #652]	; (80055b4 <scaraInitDuty+0x2f4>)
 8005326:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800532a:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 800532e:	f7fa ffad 	bl	800028c <__adddf3>
 8005332:	4602      	mov	r2, r0
 8005334:	460b      	mov	r3, r1
 8005336:	4639      	mov	r1, r7
 8005338:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			target_point.z 		= positionCurrent.z + command.target_point.z;
 800533c:	4b9d      	ldr	r3, [pc, #628]	; (80055b4 <scaraInitDuty+0x2f4>)
 800533e:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8005342:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8005346:	f7fa ffa1 	bl	800028c <__adddf3>
 800534a:	4602      	mov	r2, r0
 800534c:	460b      	mov	r3, r1
 800534e:	4639      	mov	r1, r7
 8005350:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			target_point.roll	= positionCurrent.roll + command.target_point.roll;
 8005354:	4b97      	ldr	r3, [pc, #604]	; (80055b4 <scaraInitDuty+0x2f4>)
 8005356:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 800535a:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 800535e:	f7fa ff95 	bl	800028c <__adddf3>
 8005362:	4602      	mov	r2, r0
 8005364:	460b      	mov	r3, r1
 8005366:	4639      	mov	r1, r7
 8005368:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 800536c:	e01b      	b.n	80053a6 <scaraInitDuty+0xe6>
		} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 800536e:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8005372:	2b00      	cmp	r3, #0
 8005374:	d114      	bne.n	80053a0 <scaraInitDuty+0xe0>
			target_point.x 		= command.target_point.x;
 8005376:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 800537a:	4639      	mov	r1, r7
 800537c:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			target_point.y 		= command.target_point.y;
 8005380:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8005384:	4639      	mov	r1, r7
 8005386:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			target_point.z 		= command.target_point.z;
 800538a:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 800538e:	4639      	mov	r1, r7
 8005390:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			target_point.roll	= command.target_point.roll;
 8005394:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 8005398:	4639      	mov	r1, r7
 800539a:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 800539e:	e002      	b.n	80053a6 <scaraInitDuty+0xe6>
		} else {
			return SCARA_STATUS_ERROR_COORDINATE;
 80053a0:	230c      	movs	r3, #12
 80053a2:	f001 bad3 	b.w	800694c <scaraInitDuty+0x168c>
		}

		angle_s = target_point.roll - positionCurrent.roll;
 80053a6:	463b      	mov	r3, r7
 80053a8:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80053ac:	4b81      	ldr	r3, [pc, #516]	; (80055b4 <scaraInitDuty+0x2f4>)
 80053ae:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80053b2:	f7fa ff69 	bl	8000288 <__aeabi_dsub>
 80053b6:	4602      	mov	r2, r0
 80053b8:	460b      	mov	r3, r1
 80053ba:	e9c7 236a 	strd	r2, r3, [r7, #424]	; 0x1a8
		dir_angle = 1;
 80053be:	2301      	movs	r3, #1
 80053c0:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
		if ( angle_s < 0) {
 80053c4:	f04f 0200 	mov.w	r2, #0
 80053c8:	f04f 0300 	mov.w	r3, #0
 80053cc:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	; 0x1a8
 80053d0:	f7fb fb84 	bl	8000adc <__aeabi_dcmplt>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d002      	beq.n	80053e0 <scaraInitDuty+0x120>
			dir_angle = -1;
 80053da:	23ff      	movs	r3, #255	; 0xff
 80053dc:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
		}
		if ( fabs(angle_s) > PI) {
 80053e0:	f8d7 41a8 	ldr.w	r4, [r7, #424]	; 0x1a8
 80053e4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80053e8:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80053ec:	a36e      	add	r3, pc, #440	; (adr r3, 80055a8 <scaraInitDuty+0x2e8>)
 80053ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f2:	4620      	mov	r0, r4
 80053f4:	4629      	mov	r1, r5
 80053f6:	f7fb fb8f 	bl	8000b18 <__aeabi_dcmpgt>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d021      	beq.n	8005444 <scaraInitDuty+0x184>
			dir_angle = -dir_angle;
 8005400:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8005404:	425b      	negs	r3, r3
 8005406:	b2db      	uxtb	r3, r3
 8005408:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
			angle_s = (2*PI - fabsf(angle_s))*dir_angle;
 800540c:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	; 0x1a8
 8005410:	f7fb fbea 	bl	8000be8 <__aeabi_d2f>
 8005414:	ee07 0a90 	vmov	s15, r0
 8005418:	eef0 7ae7 	vabs.f32	s15, s15
 800541c:	ed9f 7a66 	vldr	s14, [pc, #408]	; 80055b8 <scaraInitDuty+0x2f8>
 8005420:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005424:	f997 31a7 	ldrsb.w	r3, [r7, #423]	; 0x1a7
 8005428:	ee07 3a90 	vmov	s15, r3
 800542c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005430:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005434:	ee17 0a90 	vmov	r0, s15
 8005438:	f7fb f886 	bl	8000548 <__aeabi_f2d>
 800543c:	4602      	mov	r2, r0
 800543e:	460b      	mov	r3, r1
 8005440:	e9c7 236a 	strd	r2, r3, [r7, #424]	; 0x1a8
		}


		myDUTY.space_type = DUTY_SPACE_TASK;// Change type
 8005444:	4b5d      	ldr	r3, [pc, #372]	; (80055bc <scaraInitDuty+0x2fc>)
 8005446:	2200      	movs	r2, #0
 8005448:	701a      	strb	r2, [r3, #0]
		myDUTY.task.roll_start = positionCurrent.roll;
 800544a:	4b5a      	ldr	r3, [pc, #360]	; (80055b4 <scaraInitDuty+0x2f4>)
 800544c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8005450:	495a      	ldr	r1, [pc, #360]	; (80055bc <scaraInitDuty+0x2fc>)
 8005452:	f501 6182 	add.w	r1, r1, #1040	; 0x410
 8005456:	e9c1 2300 	strd	r2, r3, [r1]
		// 1-Path Planning
			// Straight Line
		if ( DUTY_PATH_LINE == command.path_type ) {
 800545a:	f897 31de 	ldrb.w	r3, [r7, #478]	; 0x1de
 800545e:	2b00      	cmp	r3, #0
 8005460:	d11f      	bne.n	80054a2 <scaraInitDuty+0x1e2>
			myDUTY.task.path.path_type = DUTY_PATH_LINE;
 8005462:	4b56      	ldr	r3, [pc, #344]	; (80055bc <scaraInitDuty+0x2fc>)
 8005464:	2200      	movs	r2, #0
 8005466:	721a      	strb	r2, [r3, #8]
			status = scaraInitLine(&(myDUTY.task.path.line), positionCurrent, target_point);
 8005468:	4c52      	ldr	r4, [pc, #328]	; (80055b4 <scaraInitDuty+0x2f4>)
 800546a:	463a      	mov	r2, r7
 800546c:	ab2e      	add	r3, sp, #184	; 0xb8
 800546e:	4611      	mov	r1, r2
 8005470:	22c0      	movs	r2, #192	; 0xc0
 8005472:	4618      	mov	r0, r3
 8005474:	f010 fc4c 	bl	8015d10 <memcpy>
 8005478:	4668      	mov	r0, sp
 800547a:	f104 0308 	add.w	r3, r4, #8
 800547e:	22b8      	movs	r2, #184	; 0xb8
 8005480:	4619      	mov	r1, r3
 8005482:	f010 fc45 	bl	8015d10 <memcpy>
 8005486:	e894 000c 	ldmia.w	r4, {r2, r3}
 800548a:	484d      	ldr	r0, [pc, #308]	; (80055c0 <scaraInitDuty+0x300>)
 800548c:	f001 fa70 	bl	8006970 <scaraInitLine>
 8005490:	4603      	mov	r3, r0
 8005492:	f887 31bf 	strb.w	r3, [r7, #447]	; 0x1bf
			total_s = myDUTY.task.path.line.total_s;
 8005496:	4b49      	ldr	r3, [pc, #292]	; (80055bc <scaraInitDuty+0x2fc>)
 8005498:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800549c:	e9c7 236c 	strd	r2, r3, [r7, #432]	; 0x1b0
 80054a0:	e077      	b.n	8005592 <scaraInitDuty+0x2d2>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == command.path_type ) {
 80054a2:	f897 31de 	ldrb.w	r3, [r7, #478]	; 0x1de
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d170      	bne.n	800558c <scaraInitDuty+0x2cc>
			SCARA_PositionTypeDef	center_point;
			if( DUTY_COORDINATES_REL == command.coordinate_type) {
 80054aa:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d127      	bne.n	8005502 <scaraInitDuty+0x242>
				center_point.x 		= positionCurrent.x + command.sub_point.x;
 80054b2:	4b40      	ldr	r3, [pc, #256]	; (80055b4 <scaraInitDuty+0x2f4>)
 80054b4:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80054b8:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 80054bc:	f7fa fee6 	bl	800028c <__adddf3>
 80054c0:	4602      	mov	r2, r0
 80054c2:	460b      	mov	r3, r1
 80054c4:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 80054c8:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
				center_point.y 		= positionCurrent.y + command.sub_point.y;
 80054cc:	4b39      	ldr	r3, [pc, #228]	; (80055b4 <scaraInitDuty+0x2f4>)
 80054ce:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80054d2:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 80054d6:	f7fa fed9 	bl	800028c <__adddf3>
 80054da:	4602      	mov	r2, r0
 80054dc:	460b      	mov	r3, r1
 80054de:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 80054e2:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
				center_point.z 		= positionCurrent.z + command.sub_point.z;
 80054e6:	4b33      	ldr	r3, [pc, #204]	; (80055b4 <scaraInitDuty+0x2f4>)
 80054e8:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 80054ec:	e9d7 23c4 	ldrd	r2, r3, [r7, #784]	; 0x310
 80054f0:	f7fa fecc 	bl	800028c <__adddf3>
 80054f4:	4602      	mov	r2, r0
 80054f6:	460b      	mov	r3, r1
 80054f8:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 80054fc:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 8005500:	e019      	b.n	8005536 <scaraInitDuty+0x276>
			} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8005502:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8005506:	2b00      	cmp	r3, #0
 8005508:	d112      	bne.n	8005530 <scaraInitDuty+0x270>
				center_point.x 		= command.target_point.x;
 800550a:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 800550e:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 8005512:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
				center_point.y 		= command.target_point.y;
 8005516:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 800551a:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 800551e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
				center_point.z 		= command.target_point.z;
 8005522:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8005526:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 800552a:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 800552e:	e002      	b.n	8005536 <scaraInitDuty+0x276>
			} else {
				return SCARA_STATUS_ERROR_COORDINATE;
 8005530:	230c      	movs	r3, #12
			return SCARA_STATUS_ERROR_COORDINATE;
 8005532:	f001 ba0b 	b.w	800694c <scaraInitDuty+0x168c>
			}

			myDUTY.task.path.path_type = DUTY_PATH_CIRCLE;
 8005536:	4b21      	ldr	r3, [pc, #132]	; (80055bc <scaraInitDuty+0x2fc>)
 8005538:	2201      	movs	r2, #1
 800553a:	721a      	strb	r2, [r3, #8]
			status = scaraInitCircle(&(myDUTY.task.path.circle),
 800553c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8005540:	4c1c      	ldr	r4, [pc, #112]	; (80055b4 <scaraInitDuty+0x2f4>)
 8005542:	938e      	str	r3, [sp, #568]	; 0x238
 8005544:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8005548:	ab5e      	add	r3, sp, #376	; 0x178
 800554a:	4611      	mov	r1, r2
 800554c:	22c0      	movs	r2, #192	; 0xc0
 800554e:	4618      	mov	r0, r3
 8005550:	f010 fbde 	bl	8015d10 <memcpy>
 8005554:	463a      	mov	r2, r7
 8005556:	ab2e      	add	r3, sp, #184	; 0xb8
 8005558:	4611      	mov	r1, r2
 800555a:	22c0      	movs	r2, #192	; 0xc0
 800555c:	4618      	mov	r0, r3
 800555e:	f010 fbd7 	bl	8015d10 <memcpy>
 8005562:	4668      	mov	r0, sp
 8005564:	f104 0308 	add.w	r3, r4, #8
 8005568:	22b8      	movs	r2, #184	; 0xb8
 800556a:	4619      	mov	r1, r3
 800556c:	f010 fbd0 	bl	8015d10 <memcpy>
 8005570:	e894 000c 	ldmia.w	r4, {r2, r3}
 8005574:	4813      	ldr	r0, [pc, #76]	; (80055c4 <scaraInitDuty+0x304>)
 8005576:	f001 faaf 	bl	8006ad8 <scaraInitCircle>
 800557a:	4603      	mov	r3, r0
 800557c:	f887 31bf 	strb.w	r3, [r7, #447]	; 0x1bf
										positionCurrent,
										target_point,
										center_point,
										command.sub_para_int );
			total_s = myDUTY.task.path.circle.total_s;
 8005580:	4b0e      	ldr	r3, [pc, #56]	; (80055bc <scaraInitDuty+0x2fc>)
 8005582:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8005586:	e9c7 236c 	strd	r2, r3, [r7, #432]	; 0x1b0
 800558a:	e002      	b.n	8005592 <scaraInitDuty+0x2d2>

		} else {
			return SCARA_STATUS_ERROR_TASK;
 800558c:	2303      	movs	r3, #3
 800558e:	f001 b9dd 	b.w	800694c <scaraInitDuty+0x168c>
		}

		if ( SCARA_STATUS_OK != status) {
 8005592:	f897 31bf 	ldrb.w	r3, [r7, #447]	; 0x1bf
 8005596:	2b00      	cmp	r3, #0
 8005598:	d016      	beq.n	80055c8 <scaraInitDuty+0x308>
			return status;
 800559a:	f897 31bf 	ldrb.w	r3, [r7, #447]	; 0x1bf
 800559e:	f001 b9d5 	b.w	800694c <scaraInitDuty+0x168c>
 80055a2:	bf00      	nop
 80055a4:	f3af 8000 	nop.w
 80055a8:	60000000 	.word	0x60000000
 80055ac:	400921fb 	.word	0x400921fb
 80055b0:	40668000 	.word	0x40668000
 80055b4:	20005af0 	.word	0x20005af0
 80055b8:	40c90fdb 	.word	0x40c90fdb
 80055bc:	20004f30 	.word	0x20004f30
 80055c0:	20004f40 	.word	0x20004f40
 80055c4:	20004fb0 	.word	0x20004fb0
		}

		// 2-Trajectory Planning
			// LSPB
		if ( DUTY_TRAJECTORY_LSPB == command.trajec_type ) {
 80055c8:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	f040 80eb 	bne.w	80057a8 <scaraInitDuty+0x4e8>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 80055d2:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d155      	bne.n	8005686 <scaraInitDuty+0x3c6>
//				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LSPB;
//				status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
//						 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
//				myDUTY.time_total = command.time_total;

				myDUTY.task.trajectory_3d.lspb.Tf = command.time_total;
 80055da:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 80055de:	499a      	ldr	r1, [pc, #616]	; (8005848 <scaraInitDuty+0x588>)
 80055e0:	e9c1 235a 	strd	r2, r3, [r1, #360]	; 0x168
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 80055e4:	4b98      	ldr	r3, [pc, #608]	; (8005848 <scaraInitDuty+0x588>)
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB1(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 80055ec:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 80055f0:	ed97 6b7c 	vldr	d6, [r7, #496]	; 0x1f0
 80055f4:	eeb0 2a46 	vmov.f32	s4, s12
 80055f8:	eef0 2a66 	vmov.f32	s5, s13
 80055fc:	eeb0 1a47 	vmov.f32	s2, s14
 8005600:	eef0 1a67 	vmov.f32	s3, s15
 8005604:	2201      	movs	r2, #1
 8005606:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 800560a:	2104      	movs	r1, #4
 800560c:	488f      	ldr	r0, [pc, #572]	; (800584c <scaraInitDuty+0x58c>)
 800560e:	f001 fc27 	bl	8006e60 <scaraInitLSPB1>
 8005612:	4603      	mov	r3, r0
 8005614:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
										 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.time_total);

				myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8005618:	4a8b      	ldr	r2, [pc, #556]	; (8005848 <scaraInitDuty+0x588>)
 800561a:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 800561e:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
				myDUTY.task.trajectory_roll.linear.Tf = command.time_total;
 8005622:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 8005626:	4988      	ldr	r1, [pc, #544]	; (8005848 <scaraInitDuty+0x588>)
 8005628:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800562c:	e9c1 2300 	strd	r2, r3, [r1]
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8005630:	4b85      	ldr	r3, [pc, #532]	; (8005848 <scaraInitDuty+0x588>)
 8005632:	2202      	movs	r2, #2
 8005634:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, command.time_total);
 8005638:	f997 31a7 	ldrsb.w	r3, [r7, #423]	; 0x1a7
 800563c:	4618      	mov	r0, r3
 800563e:	f7fa ff71 	bl	8000524 <__aeabi_i2d>
 8005642:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	; 0x1a8
 8005646:	f7fa ffd7 	bl	80005f8 <__aeabi_dmul>
 800564a:	4602      	mov	r2, r0
 800564c:	460b      	mov	r3, r1
 800564e:	ec43 2b16 	vmov	d6, r2, r3
 8005652:	ed97 7b7c 	vldr	d7, [r7, #496]	; 0x1f0
 8005656:	eeb0 1a47 	vmov.f32	s2, s14
 800565a:	eef0 1a67 	vmov.f32	s3, s15
 800565e:	2203      	movs	r2, #3
 8005660:	eeb0 0a46 	vmov.f32	s0, s12
 8005664:	eef0 0a66 	vmov.f32	s1, s13
 8005668:	2105      	movs	r1, #5
 800566a:	4879      	ldr	r0, [pc, #484]	; (8005850 <scaraInitDuty+0x590>)
 800566c:	f001 fbac 	bl	8006dc8 <scaraInitLinear>
 8005670:	4603      	mov	r3, r0
 8005672:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
				myDUTY.time_total = command.time_total;
 8005676:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 800567a:	4973      	ldr	r1, [pc, #460]	; (8005848 <scaraInitDuty+0x588>)
 800567c:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8005680:	e9c1 2300 	strd	r2, r3, [r1]
 8005684:	e1c8      	b.n	8005a18 <scaraInitDuty+0x758>
			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8005686:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 800568a:	2b00      	cmp	r3, #0
 800568c:	f040 8089 	bne.w	80057a2 <scaraInitDuty+0x4e2>
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005690:	4b6d      	ldr	r3, [pc, #436]	; (8005848 <scaraInitDuty+0x588>)
 8005692:	2200      	movs	r2, #0
 8005694:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8005698:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 800569c:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 80056a0:	eeb0 2a46 	vmov.f32	s4, s12
 80056a4:	eef0 2a66 	vmov.f32	s5, s13
 80056a8:	eeb0 1a47 	vmov.f32	s2, s14
 80056ac:	eef0 1a67 	vmov.f32	s3, s15
 80056b0:	2200      	movs	r2, #0
 80056b2:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 80056b6:	2104      	movs	r1, #4
 80056b8:	4864      	ldr	r0, [pc, #400]	; (800584c <scaraInitDuty+0x58c>)
 80056ba:	f001 fe29 	bl	8007310 <scaraInitLSPB>
 80056be:	4603      	mov	r3, r0
 80056c0:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
						 total_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LSPB;
 80056c4:	4b60      	ldr	r3, [pc, #384]	; (8005848 <scaraInitDuty+0x588>)
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 80056cc:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 80056d0:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 80056d4:	eeb0 2a46 	vmov.f32	s4, s12
 80056d8:	eef0 2a66 	vmov.f32	s5, s13
 80056dc:	eeb0 1a47 	vmov.f32	s2, s14
 80056e0:	eef0 1a67 	vmov.f32	s3, s15
 80056e4:	2200      	movs	r2, #0
 80056e6:	ed97 0b6a 	vldr	d0, [r7, #424]	; 0x1a8
 80056ea:	2105      	movs	r1, #5
 80056ec:	4859      	ldr	r0, [pc, #356]	; (8005854 <scaraInitDuty+0x594>)
 80056ee:	f001 fe0f 	bl	8007310 <scaraInitLSPB>
 80056f2:	4603      	mov	r3, r0
 80056f4:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
						 angle_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				// Synchronous time end
				if(myDUTY.task.trajectory_3d.lspb.Tf > myDUTY.task.trajectory_roll.lspb.Tf) {
 80056f8:	4b53      	ldr	r3, [pc, #332]	; (8005848 <scaraInitDuty+0x588>)
 80056fa:	e9d3 015a 	ldrd	r0, r1, [r3, #360]	; 0x168
 80056fe:	4b52      	ldr	r3, [pc, #328]	; (8005848 <scaraInitDuty+0x588>)
 8005700:	e9d3 23ba 	ldrd	r2, r3, [r3, #744]	; 0x2e8
 8005704:	f7fb fa08 	bl	8000b18 <__aeabi_dcmpgt>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d024      	beq.n	8005758 <scaraInitDuty+0x498>
					myDUTY.task.trajectory_roll.lspb.Tf = myDUTY.task.trajectory_3d.lspb.Tf;
 800570e:	4b4e      	ldr	r3, [pc, #312]	; (8005848 <scaraInitDuty+0x588>)
 8005710:	e9d3 235a 	ldrd	r2, r3, [r3, #360]	; 0x168
 8005714:	494c      	ldr	r1, [pc, #304]	; (8005848 <scaraInitDuty+0x588>)
 8005716:	e9c1 23ba 	strd	r2, r3, [r1, #744]	; 0x2e8
					status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 800571a:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 800571e:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005722:	eeb0 2a46 	vmov.f32	s4, s12
 8005726:	eef0 2a66 	vmov.f32	s5, s13
 800572a:	eeb0 1a47 	vmov.f32	s2, s14
 800572e:	eef0 1a67 	vmov.f32	s3, s15
 8005732:	2201      	movs	r2, #1
 8005734:	ed97 0b6a 	vldr	d0, [r7, #424]	; 0x1a8
 8005738:	2105      	movs	r1, #5
 800573a:	4846      	ldr	r0, [pc, #280]	; (8005854 <scaraInitDuty+0x594>)
 800573c:	f001 fde8 	bl	8007310 <scaraInitLSPB>
 8005740:	4603      	mov	r3, r0
 8005742:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
							 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_3d.lspb.Tf;
 8005746:	4b40      	ldr	r3, [pc, #256]	; (8005848 <scaraInitDuty+0x588>)
 8005748:	e9d3 235a 	ldrd	r2, r3, [r3, #360]	; 0x168
 800574c:	493e      	ldr	r1, [pc, #248]	; (8005848 <scaraInitDuty+0x588>)
 800574e:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8005752:	e9c1 2300 	strd	r2, r3, [r1]
 8005756:	e15f      	b.n	8005a18 <scaraInitDuty+0x758>
				} else {
					myDUTY.task.trajectory_3d.lspb.Tf = myDUTY.task.trajectory_roll.lspb.Tf;
 8005758:	4b3b      	ldr	r3, [pc, #236]	; (8005848 <scaraInitDuty+0x588>)
 800575a:	e9d3 23ba 	ldrd	r2, r3, [r3, #744]	; 0x2e8
 800575e:	493a      	ldr	r1, [pc, #232]	; (8005848 <scaraInitDuty+0x588>)
 8005760:	e9c1 235a 	strd	r2, r3, [r1, #360]	; 0x168
					status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8005764:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005768:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 800576c:	eeb0 2a46 	vmov.f32	s4, s12
 8005770:	eef0 2a66 	vmov.f32	s5, s13
 8005774:	eeb0 1a47 	vmov.f32	s2, s14
 8005778:	eef0 1a67 	vmov.f32	s3, s15
 800577c:	2201      	movs	r2, #1
 800577e:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 8005782:	2104      	movs	r1, #4
 8005784:	4831      	ldr	r0, [pc, #196]	; (800584c <scaraInitDuty+0x58c>)
 8005786:	f001 fdc3 	bl	8007310 <scaraInitLSPB>
 800578a:	4603      	mov	r3, r0
 800578c:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
							 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_roll.lspb.Tf;
 8005790:	4b2d      	ldr	r3, [pc, #180]	; (8005848 <scaraInitDuty+0x588>)
 8005792:	e9d3 23ba 	ldrd	r2, r3, [r3, #744]	; 0x2e8
 8005796:	492c      	ldr	r1, [pc, #176]	; (8005848 <scaraInitDuty+0x588>)
 8005798:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 800579c:	e9c1 2300 	strd	r2, r3, [r1]
 80057a0:	e13a      	b.n	8005a18 <scaraInitDuty+0x758>
				}
			} else {
				return SCARA_STATUS_ERROR_MODE_INIT ;
 80057a2:	2308      	movs	r3, #8
 80057a4:	f001 b8d2 	b.w	800694c <scaraInitDuty+0x168c>
			}
			// SCURVE
		} else if 	( DUTY_TRAJECTORY_SCURVE == command.trajec_type ){
 80057a8:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	f040 80e8 	bne.w	8005982 <scaraInitDuty+0x6c2>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 80057b2:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d152      	bne.n	8005860 <scaraInitDuty+0x5a0>
				myDUTY.task.trajectory_3d.scurve.Tf = command.time_total;
 80057ba:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 80057be:	4922      	ldr	r1, [pc, #136]	; (8005848 <scaraInitDuty+0x588>)
 80057c0:	e9c1 237e 	strd	r2, r3, [r1, #504]	; 0x1f8
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80057c4:	4b20      	ldr	r3, [pc, #128]	; (8005848 <scaraInitDuty+0x588>)
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 80057cc:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 80057d0:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 80057d4:	eeb0 2a46 	vmov.f32	s4, s12
 80057d8:	eef0 2a66 	vmov.f32	s5, s13
 80057dc:	eeb0 1a47 	vmov.f32	s2, s14
 80057e0:	eef0 1a67 	vmov.f32	s3, s15
 80057e4:	2201      	movs	r2, #1
 80057e6:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 80057ea:	2104      	movs	r1, #4
 80057ec:	481a      	ldr	r0, [pc, #104]	; (8005858 <scaraInitDuty+0x598>)
 80057ee:	f002 f963 	bl	8007ab8 <scaraInitScurve>
 80057f2:	4603      	mov	r3, r0
 80057f4:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
						 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);

				myDUTY.task.trajectory_roll.scurve.Tf = command.time_total;
 80057f8:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 80057fc:	4912      	ldr	r1, [pc, #72]	; (8005848 <scaraInitDuty+0x588>)
 80057fe:	e9c1 23de 	strd	r2, r3, [r1, #888]	; 0x378
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8005802:	4b11      	ldr	r3, [pc, #68]	; (8005848 <scaraInitDuty+0x588>)
 8005804:	2201      	movs	r2, #1
 8005806:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 800580a:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 800580e:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005812:	eeb0 2a46 	vmov.f32	s4, s12
 8005816:	eef0 2a66 	vmov.f32	s5, s13
 800581a:	eeb0 1a47 	vmov.f32	s2, s14
 800581e:	eef0 1a67 	vmov.f32	s3, s15
 8005822:	2201      	movs	r2, #1
 8005824:	ed97 0b6a 	vldr	d0, [r7, #424]	; 0x1a8
 8005828:	2105      	movs	r1, #5
 800582a:	480c      	ldr	r0, [pc, #48]	; (800585c <scaraInitDuty+0x59c>)
 800582c:	f002 f944 	bl	8007ab8 <scaraInitScurve>
 8005830:	4603      	mov	r3, r0
 8005832:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
						 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
				myDUTY.time_total = command.time_total;
 8005836:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 800583a:	4903      	ldr	r1, [pc, #12]	; (8005848 <scaraInitDuty+0x588>)
 800583c:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8005840:	e9c1 2300 	strd	r2, r3, [r1]
 8005844:	e0e8      	b.n	8005a18 <scaraInitDuty+0x758>
 8005846:	bf00      	nop
 8005848:	20004f30 	.word	0x20004f30
 800584c:	20005048 	.word	0x20005048
 8005850:	20005318 	.word	0x20005318
 8005854:	200051c8 	.word	0x200051c8
 8005858:	200050c8 	.word	0x200050c8
 800585c:	20005248 	.word	0x20005248

			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8005860:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8005864:	2b00      	cmp	r3, #0
 8005866:	f040 8089 	bne.w	800597c <scaraInitDuty+0x6bc>
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 800586a:	4bbd      	ldr	r3, [pc, #756]	; (8005b60 <scaraInitDuty+0x8a0>)
 800586c:	2201      	movs	r2, #1
 800586e:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8005872:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005876:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 800587a:	eeb0 2a46 	vmov.f32	s4, s12
 800587e:	eef0 2a66 	vmov.f32	s5, s13
 8005882:	eeb0 1a47 	vmov.f32	s2, s14
 8005886:	eef0 1a67 	vmov.f32	s3, s15
 800588a:	2200      	movs	r2, #0
 800588c:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 8005890:	2104      	movs	r1, #4
 8005892:	48b4      	ldr	r0, [pc, #720]	; (8005b64 <scaraInitDuty+0x8a4>)
 8005894:	f002 f910 	bl	8007ab8 <scaraInitScurve>
 8005898:	4603      	mov	r3, r0
 800589a:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
						 total_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 800589e:	4bb0      	ldr	r3, [pc, #704]	; (8005b60 <scaraInitDuty+0x8a0>)
 80058a0:	2201      	movs	r2, #1
 80058a2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 80058a6:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 80058aa:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 80058ae:	eeb0 2a46 	vmov.f32	s4, s12
 80058b2:	eef0 2a66 	vmov.f32	s5, s13
 80058b6:	eeb0 1a47 	vmov.f32	s2, s14
 80058ba:	eef0 1a67 	vmov.f32	s3, s15
 80058be:	2200      	movs	r2, #0
 80058c0:	ed97 0b6a 	vldr	d0, [r7, #424]	; 0x1a8
 80058c4:	2105      	movs	r1, #5
 80058c6:	48a8      	ldr	r0, [pc, #672]	; (8005b68 <scaraInitDuty+0x8a8>)
 80058c8:	f002 f8f6 	bl	8007ab8 <scaraInitScurve>
 80058cc:	4603      	mov	r3, r0
 80058ce:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
						 angle_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				// synchronous time end
				if(myDUTY.task.trajectory_3d.scurve.Tf > myDUTY.task.trajectory_roll.scurve.Tf) {
 80058d2:	4ba3      	ldr	r3, [pc, #652]	; (8005b60 <scaraInitDuty+0x8a0>)
 80058d4:	e9d3 017e 	ldrd	r0, r1, [r3, #504]	; 0x1f8
 80058d8:	4ba1      	ldr	r3, [pc, #644]	; (8005b60 <scaraInitDuty+0x8a0>)
 80058da:	e9d3 23de 	ldrd	r2, r3, [r3, #888]	; 0x378
 80058de:	f7fb f91b 	bl	8000b18 <__aeabi_dcmpgt>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d024      	beq.n	8005932 <scaraInitDuty+0x672>
					myDUTY.task.trajectory_roll.scurve.Tf = myDUTY.task.trajectory_3d.scurve.Tf;
 80058e8:	4b9d      	ldr	r3, [pc, #628]	; (8005b60 <scaraInitDuty+0x8a0>)
 80058ea:	e9d3 237e 	ldrd	r2, r3, [r3, #504]	; 0x1f8
 80058ee:	499c      	ldr	r1, [pc, #624]	; (8005b60 <scaraInitDuty+0x8a0>)
 80058f0:	e9c1 23de 	strd	r2, r3, [r1, #888]	; 0x378
					status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 80058f4:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 80058f8:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 80058fc:	eeb0 2a46 	vmov.f32	s4, s12
 8005900:	eef0 2a66 	vmov.f32	s5, s13
 8005904:	eeb0 1a47 	vmov.f32	s2, s14
 8005908:	eef0 1a67 	vmov.f32	s3, s15
 800590c:	2201      	movs	r2, #1
 800590e:	ed97 0b6a 	vldr	d0, [r7, #424]	; 0x1a8
 8005912:	2105      	movs	r1, #5
 8005914:	4894      	ldr	r0, [pc, #592]	; (8005b68 <scaraInitDuty+0x8a8>)
 8005916:	f002 f8cf 	bl	8007ab8 <scaraInitScurve>
 800591a:	4603      	mov	r3, r0
 800591c:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
							 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_3d.scurve.Tf;
 8005920:	4b8f      	ldr	r3, [pc, #572]	; (8005b60 <scaraInitDuty+0x8a0>)
 8005922:	e9d3 237e 	ldrd	r2, r3, [r3, #504]	; 0x1f8
 8005926:	498e      	ldr	r1, [pc, #568]	; (8005b60 <scaraInitDuty+0x8a0>)
 8005928:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 800592c:	e9c1 2300 	strd	r2, r3, [r1]
 8005930:	e072      	b.n	8005a18 <scaraInitDuty+0x758>
				} else {
					myDUTY.task.trajectory_3d.scurve.Tf = myDUTY.task.trajectory_roll.scurve.Tf;
 8005932:	4b8b      	ldr	r3, [pc, #556]	; (8005b60 <scaraInitDuty+0x8a0>)
 8005934:	e9d3 23de 	ldrd	r2, r3, [r3, #888]	; 0x378
 8005938:	4989      	ldr	r1, [pc, #548]	; (8005b60 <scaraInitDuty+0x8a0>)
 800593a:	e9c1 237e 	strd	r2, r3, [r1, #504]	; 0x1f8
					status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 800593e:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005942:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005946:	eeb0 2a46 	vmov.f32	s4, s12
 800594a:	eef0 2a66 	vmov.f32	s5, s13
 800594e:	eeb0 1a47 	vmov.f32	s2, s14
 8005952:	eef0 1a67 	vmov.f32	s3, s15
 8005956:	2201      	movs	r2, #1
 8005958:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 800595c:	2104      	movs	r1, #4
 800595e:	4881      	ldr	r0, [pc, #516]	; (8005b64 <scaraInitDuty+0x8a4>)
 8005960:	f002 f8aa 	bl	8007ab8 <scaraInitScurve>
 8005964:	4603      	mov	r3, r0
 8005966:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
							 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_roll.scurve.Tf;
 800596a:	4b7d      	ldr	r3, [pc, #500]	; (8005b60 <scaraInitDuty+0x8a0>)
 800596c:	e9d3 23de 	ldrd	r2, r3, [r3, #888]	; 0x378
 8005970:	497b      	ldr	r1, [pc, #492]	; (8005b60 <scaraInitDuty+0x8a0>)
 8005972:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8005976:	e9c1 2300 	strd	r2, r3, [r1]
 800597a:	e04d      	b.n	8005a18 <scaraInitDuty+0x758>
				}
			}else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 800597c:	2308      	movs	r3, #8
 800597e:	f000 bfe5 	b.w	800694c <scaraInitDuty+0x168c>
			}
		}else if(DUTY_TRAJECTORY_LINEAR == command.trajec_type){
 8005982:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8005986:	2b02      	cmp	r3, #2
 8005988:	d143      	bne.n	8005a12 <scaraInitDuty+0x752>
			myDUTY.time_total = command.time_total;
 800598a:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 800598e:	4974      	ldr	r1, [pc, #464]	; (8005b60 <scaraInitDuty+0x8a0>)
 8005990:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8005994:	e9c1 2300 	strd	r2, r3, [r1]
			myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8005998:	4a71      	ldr	r2, [pc, #452]	; (8005b60 <scaraInitDuty+0x8a0>)
 800599a:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 800599e:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
			myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 80059a2:	4b6f      	ldr	r3, [pc, #444]	; (8005b60 <scaraInitDuty+0x8a0>)
 80059a4:	2202      	movs	r2, #2
 80059a6:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
			myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 80059aa:	4b6d      	ldr	r3, [pc, #436]	; (8005b60 <scaraInitDuty+0x8a0>)
 80059ac:	2202      	movs	r2, #2
 80059ae:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
			status1 = scaraInitLinear(&(myDUTY.task.trajectory_3d.linear), TRAJECTORY_3D, total_s, DUTY_MODE_INIT_QT, command.time_total);
 80059b2:	ed97 7b7c 	vldr	d7, [r7, #496]	; 0x1f0
 80059b6:	eeb0 1a47 	vmov.f32	s2, s14
 80059ba:	eef0 1a67 	vmov.f32	s3, s15
 80059be:	2203      	movs	r2, #3
 80059c0:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 80059c4:	2104      	movs	r1, #4
 80059c6:	4869      	ldr	r0, [pc, #420]	; (8005b6c <scaraInitDuty+0x8ac>)
 80059c8:	f001 f9fe 	bl	8006dc8 <scaraInitLinear>
 80059cc:	4603      	mov	r3, r0
 80059ce:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
			status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, command.time_total);
 80059d2:	f997 31a7 	ldrsb.w	r3, [r7, #423]	; 0x1a7
 80059d6:	4618      	mov	r0, r3
 80059d8:	f7fa fda4 	bl	8000524 <__aeabi_i2d>
 80059dc:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	; 0x1a8
 80059e0:	f7fa fe0a 	bl	80005f8 <__aeabi_dmul>
 80059e4:	4602      	mov	r2, r0
 80059e6:	460b      	mov	r3, r1
 80059e8:	ec43 2b16 	vmov	d6, r2, r3
 80059ec:	ed97 7b7c 	vldr	d7, [r7, #496]	; 0x1f0
 80059f0:	eeb0 1a47 	vmov.f32	s2, s14
 80059f4:	eef0 1a67 	vmov.f32	s3, s15
 80059f8:	2203      	movs	r2, #3
 80059fa:	eeb0 0a46 	vmov.f32	s0, s12
 80059fe:	eef0 0a66 	vmov.f32	s1, s13
 8005a02:	2105      	movs	r1, #5
 8005a04:	485a      	ldr	r0, [pc, #360]	; (8005b70 <scaraInitDuty+0x8b0>)
 8005a06:	f001 f9df 	bl	8006dc8 <scaraInitLinear>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
 8005a10:	e002      	b.n	8005a18 <scaraInitDuty+0x758>
		}else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8005a12:	2305      	movs	r3, #5
 8005a14:	f000 bf9a 	b.w	800694c <scaraInitDuty+0x168c>
		}
		// Check Init Status
		if ( SCARA_STATUS_OK != status1) {
 8005a18:	f897 31be 	ldrb.w	r3, [r7, #446]	; 0x1be
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d003      	beq.n	8005a28 <scaraInitDuty+0x768>
			return status1;
 8005a20:	f897 31be 	ldrb.w	r3, [r7, #446]	; 0x1be
 8005a24:	f000 bf92 	b.w	800694c <scaraInitDuty+0x168c>
		}
		if ( SCARA_STATUS_OK != status2) {
 8005a28:	f897 31bd 	ldrb.w	r3, [r7, #445]	; 0x1bd
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	f000 875f 	beq.w	80068f0 <scaraInitDuty+0x1630>
			return status2;
 8005a32:	f897 31bd 	ldrb.w	r3, [r7, #445]	; 0x1bd
 8005a36:	f000 bf89 	b.w	800694c <scaraInitDuty+0x168c>
		}


	
	} else if (DUTY_SPACE_JOINT == command.space_type) {
 8005a3a:	f897 31dd 	ldrb.w	r3, [r7, #477]	; 0x1dd
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	f040 8754 	bne.w	80068ec <scaraInitDuty+0x162c>
		/*----------- Space Joint ------------*/
		myDUTY.space_type = DUTY_SPACE_JOINT;// Change type
 8005a44:	4b46      	ldr	r3, [pc, #280]	; (8005b60 <scaraInitDuty+0x8a0>)
 8005a46:	2201      	movs	r2, #1
 8005a48:	701a      	strb	r2, [r3, #0]
		myDUTY.joint.theta1_start	 = positionCurrent.Theta1;
 8005a4a:	4b4a      	ldr	r3, [pc, #296]	; (8005b74 <scaraInitDuty+0x8b4>)
 8005a4c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8005a50:	4943      	ldr	r1, [pc, #268]	; (8005b60 <scaraInitDuty+0x8a0>)
 8005a52:	f601 2118 	addw	r1, r1, #2584	; 0xa18
 8005a56:	e9c1 2300 	strd	r2, r3, [r1]
		myDUTY.joint.theta2_start	 = positionCurrent.Theta2;
 8005a5a:	4b46      	ldr	r3, [pc, #280]	; (8005b74 <scaraInitDuty+0x8b4>)
 8005a5c:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8005a60:	493f      	ldr	r1, [pc, #252]	; (8005b60 <scaraInitDuty+0x8a0>)
 8005a62:	f501 6122 	add.w	r1, r1, #2592	; 0xa20
 8005a66:	e9c1 2300 	strd	r2, r3, [r1]
		myDUTY.joint.d3_start		 = positionCurrent.D3;
 8005a6a:	4b42      	ldr	r3, [pc, #264]	; (8005b74 <scaraInitDuty+0x8b4>)
 8005a6c:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8005a70:	493b      	ldr	r1, [pc, #236]	; (8005b60 <scaraInitDuty+0x8a0>)
 8005a72:	f601 2128 	addw	r1, r1, #2600	; 0xa28
 8005a76:	e9c1 2300 	strd	r2, r3, [r1]
		myDUTY.joint.theta4_start 	 = positionCurrent.Theta4;
 8005a7a:	4b3e      	ldr	r3, [pc, #248]	; (8005b74 <scaraInitDuty+0x8b4>)
 8005a7c:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8005a80:	4937      	ldr	r1, [pc, #220]	; (8005b60 <scaraInitDuty+0x8a0>)
 8005a82:	f501 6123 	add.w	r1, r1, #2608	; 0xa30
 8005a86:	e9c1 2300 	strd	r2, r3, [r1]

		//-----Joint Single
		if ( DUTY_JOINT_SINGLE == command.joint_type) {
 8005a8a:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	f040 83d6 	bne.w	8006240 <scaraInitDuty+0xf80>
			// Trajectory 1 profile
			double s, abs_position;
			switch(command.sub_para_int) {
 8005a94:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8005a98:	2b03      	cmp	r3, #3
 8005a9a:	f200 8146 	bhi.w	8005d2a <scaraInitDuty+0xa6a>
 8005a9e:	a201      	add	r2, pc, #4	; (adr r2, 8005aa4 <scaraInitDuty+0x7e4>)
 8005aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa4:	08005ab5 	.word	0x08005ab5
 8005aa8:	08005b7d 	.word	0x08005b7d
 8005aac:	08005c1b 	.word	0x08005c1b
 8005ab0:	08005c8f 	.word	0x08005c8f
			case 0:
				// Change Degree --> Radian
				command.sub_para_double = command.sub_para_double*PI/180.0;
 8005ab4:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8005ab8:	a327      	add	r3, pc, #156	; (adr r3, 8005b58 <scaraInitDuty+0x898>)
 8005aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005abe:	f7fa fd9b 	bl	80005f8 <__aeabi_dmul>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	4610      	mov	r0, r2
 8005ac8:	4619      	mov	r1, r3
 8005aca:	f04f 0200 	mov.w	r2, #0
 8005ace:	4b2a      	ldr	r3, [pc, #168]	; (8005b78 <scaraInitDuty+0x8b8>)
 8005ad0:	f7fa febc 	bl	800084c <__aeabi_ddiv>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	e9c7 237a 	strd	r2, r3, [r7, #488]	; 0x1e8
				// Coordinate
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8005adc:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d111      	bne.n	8005b08 <scaraInitDuty+0x848>
					abs_position = myDUTY.joint.theta1_start + command.sub_para_double;
 8005ae4:	4b1e      	ldr	r3, [pc, #120]	; (8005b60 <scaraInitDuty+0x8a0>)
 8005ae6:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 8005aea:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005aee:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 8005af2:	f7fa fbcb 	bl	800028c <__adddf3>
 8005af6:	4602      	mov	r2, r0
 8005af8:	460b      	mov	r3, r1
 8005afa:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
					s			 = command.sub_para_double;
 8005afe:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 8005b02:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
 8005b06:	e018      	b.n	8005b3a <scaraInitDuty+0x87a>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8005b08:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d111      	bne.n	8005b34 <scaraInitDuty+0x874>
					abs_position = command.sub_para_double;
 8005b10:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 8005b14:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
					s			 = command.sub_para_double - myDUTY.joint.theta1_start;
 8005b18:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8005b1c:	4b10      	ldr	r3, [pc, #64]	; (8005b60 <scaraInitDuty+0x8a0>)
 8005b1e:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 8005b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b26:	f7fa fbaf 	bl	8000288 <__aeabi_dsub>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
 8005b32:	e002      	b.n	8005b3a <scaraInitDuty+0x87a>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8005b34:	230c      	movs	r3, #12
 8005b36:	f000 bf09 	b.w	800694c <scaraInitDuty+0x168c>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J0, abs_position)) {
 8005b3a:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 8005b3e:	2000      	movs	r0, #0
 8005b40:	f004 fabe 	bl	800a0c0 <scaraCheckWorkSpace1>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	f000 80f2 	beq.w	8005d30 <scaraInitDuty+0xa70>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005b4c:	2307      	movs	r3, #7
 8005b4e:	f000 befd 	b.w	800694c <scaraInitDuty+0x168c>
 8005b52:	bf00      	nop
 8005b54:	f3af 8000 	nop.w
 8005b58:	60000000 	.word	0x60000000
 8005b5c:	400921fb 	.word	0x400921fb
 8005b60:	20004f30 	.word	0x20004f30
 8005b64:	200050c8 	.word	0x200050c8
 8005b68:	20005248 	.word	0x20005248
 8005b6c:	20005198 	.word	0x20005198
 8005b70:	20005318 	.word	0x20005318
 8005b74:	20005af0 	.word	0x20005af0
 8005b78:	40668000 	.word	0x40668000
				}
				break;
			case 1:
				// Change Degree --> Radian
				command.sub_para_double = command.sub_para_double*PI/180.0;
 8005b7c:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8005b80:	a3bf      	add	r3, pc, #764	; (adr r3, 8005e80 <scaraInitDuty+0xbc0>)
 8005b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b86:	f7fa fd37 	bl	80005f8 <__aeabi_dmul>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	4610      	mov	r0, r2
 8005b90:	4619      	mov	r1, r3
 8005b92:	f04f 0200 	mov.w	r2, #0
 8005b96:	4bbe      	ldr	r3, [pc, #760]	; (8005e90 <scaraInitDuty+0xbd0>)
 8005b98:	f7fa fe58 	bl	800084c <__aeabi_ddiv>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	460b      	mov	r3, r1
 8005ba0:	e9c7 237a 	strd	r2, r3, [r7, #488]	; 0x1e8
				// Coordinate
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8005ba4:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d111      	bne.n	8005bd0 <scaraInitDuty+0x910>
					abs_position = myDUTY.joint.theta2_start + command.sub_para_double;
 8005bac:	4bb9      	ldr	r3, [pc, #740]	; (8005e94 <scaraInitDuty+0xbd4>)
 8005bae:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8005bb2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005bb6:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 8005bba:	f7fa fb67 	bl	800028c <__adddf3>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
					s			 = command.sub_para_double;
 8005bc6:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 8005bca:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
 8005bce:	e018      	b.n	8005c02 <scaraInitDuty+0x942>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8005bd0:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d111      	bne.n	8005bfc <scaraInitDuty+0x93c>
					abs_position = command.sub_para_double;
 8005bd8:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 8005bdc:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
					s			 = command.sub_para_double - myDUTY.joint.theta2_start;
 8005be0:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8005be4:	4bab      	ldr	r3, [pc, #684]	; (8005e94 <scaraInitDuty+0xbd4>)
 8005be6:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8005bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bee:	f7fa fb4b 	bl	8000288 <__aeabi_dsub>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
 8005bfa:	e002      	b.n	8005c02 <scaraInitDuty+0x942>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8005bfc:	230c      	movs	r3, #12
 8005bfe:	f000 bea5 	b.w	800694c <scaraInitDuty+0x168c>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J1, abs_position)) {
 8005c02:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 8005c06:	2001      	movs	r0, #1
 8005c08:	f004 fa5a 	bl	800a0c0 <scaraCheckWorkSpace1>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	f000 8090 	beq.w	8005d34 <scaraInitDuty+0xa74>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005c14:	2307      	movs	r3, #7
 8005c16:	f000 be99 	b.w	800694c <scaraInitDuty+0x168c>
				}
				break;
			case 2:
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8005c1a:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d111      	bne.n	8005c46 <scaraInitDuty+0x986>
					abs_position = myDUTY.joint.d3_start + command.sub_para_double;
 8005c22:	4b9c      	ldr	r3, [pc, #624]	; (8005e94 <scaraInitDuty+0xbd4>)
 8005c24:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 8005c28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005c2c:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 8005c30:	f7fa fb2c 	bl	800028c <__adddf3>
 8005c34:	4602      	mov	r2, r0
 8005c36:	460b      	mov	r3, r1
 8005c38:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
					s			 = command.sub_para_double;
 8005c3c:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 8005c40:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
 8005c44:	e018      	b.n	8005c78 <scaraInitDuty+0x9b8>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8005c46:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d111      	bne.n	8005c72 <scaraInitDuty+0x9b2>
					abs_position = command.sub_para_double;
 8005c4e:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 8005c52:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
					s			 = command.sub_para_double - myDUTY.joint.d3_start;
 8005c56:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8005c5a:	4b8e      	ldr	r3, [pc, #568]	; (8005e94 <scaraInitDuty+0xbd4>)
 8005c5c:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 8005c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c64:	f7fa fb10 	bl	8000288 <__aeabi_dsub>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
 8005c70:	e002      	b.n	8005c78 <scaraInitDuty+0x9b8>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8005c72:	230c      	movs	r3, #12
 8005c74:	f000 be6a 	b.w	800694c <scaraInitDuty+0x168c>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J2, abs_position)) {
 8005c78:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 8005c7c:	2002      	movs	r0, #2
 8005c7e:	f004 fa1f 	bl	800a0c0 <scaraCheckWorkSpace1>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d057      	beq.n	8005d38 <scaraInitDuty+0xa78>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005c88:	2307      	movs	r3, #7
 8005c8a:	f000 be5f 	b.w	800694c <scaraInitDuty+0x168c>
				}
				break;
			case 3:
				// Change Degree --> Radian
				command.sub_para_double = command.sub_para_double*PI/180.0;
 8005c8e:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8005c92:	a37b      	add	r3, pc, #492	; (adr r3, 8005e80 <scaraInitDuty+0xbc0>)
 8005c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c98:	f7fa fcae 	bl	80005f8 <__aeabi_dmul>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	460b      	mov	r3, r1
 8005ca0:	4610      	mov	r0, r2
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	f04f 0200 	mov.w	r2, #0
 8005ca8:	4b79      	ldr	r3, [pc, #484]	; (8005e90 <scaraInitDuty+0xbd0>)
 8005caa:	f7fa fdcf 	bl	800084c <__aeabi_ddiv>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	e9c7 237a 	strd	r2, r3, [r7, #488]	; 0x1e8
				// Coordinate
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8005cb6:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d111      	bne.n	8005ce2 <scaraInitDuty+0xa22>
					abs_position = myDUTY.joint.theta4_start + command.sub_para_double;
 8005cbe:	4b75      	ldr	r3, [pc, #468]	; (8005e94 <scaraInitDuty+0xbd4>)
 8005cc0:	f503 6323 	add.w	r3, r3, #2608	; 0xa30
 8005cc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005cc8:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 8005ccc:	f7fa fade 	bl	800028c <__adddf3>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
					s			 = command.sub_para_double;
 8005cd8:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 8005cdc:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
 8005ce0:	e018      	b.n	8005d14 <scaraInitDuty+0xa54>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8005ce2:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d111      	bne.n	8005d0e <scaraInitDuty+0xa4e>
					abs_position = command.sub_para_double;
 8005cea:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 8005cee:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
					s			 = command.sub_para_double - myDUTY.joint.theta4_start;
 8005cf2:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8005cf6:	4b67      	ldr	r3, [pc, #412]	; (8005e94 <scaraInitDuty+0xbd4>)
 8005cf8:	f503 6323 	add.w	r3, r3, #2608	; 0xa30
 8005cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d00:	f7fa fac2 	bl	8000288 <__aeabi_dsub>
 8005d04:	4602      	mov	r2, r0
 8005d06:	460b      	mov	r3, r1
 8005d08:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
 8005d0c:	e002      	b.n	8005d14 <scaraInitDuty+0xa54>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8005d0e:	230c      	movs	r3, #12
 8005d10:	f000 be1c 	b.w	800694c <scaraInitDuty+0x168c>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J3, abs_position)) {
 8005d14:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 8005d18:	2003      	movs	r0, #3
 8005d1a:	f004 f9d1 	bl	800a0c0 <scaraCheckWorkSpace1>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d00b      	beq.n	8005d3c <scaraInitDuty+0xa7c>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005d24:	2307      	movs	r3, #7
 8005d26:	f000 be11 	b.w	800694c <scaraInitDuty+0x168c>
				}
				break;
			default:
				return SCARA_STATUS_ERROR_JOINT_NUM;
 8005d2a:	230b      	movs	r3, #11
 8005d2c:	f000 be0e 	b.w	800694c <scaraInitDuty+0x168c>
				break;
 8005d30:	bf00      	nop
 8005d32:	e004      	b.n	8005d3e <scaraInitDuty+0xa7e>
				break;
 8005d34:	bf00      	nop
 8005d36:	e002      	b.n	8005d3e <scaraInitDuty+0xa7e>
				break;
 8005d38:	bf00      	nop
 8005d3a:	e000      	b.n	8005d3e <scaraInitDuty+0xa7e>
				break;
 8005d3c:	bf00      	nop
			}

			// LSPB
			if ( DUTY_TRAJECTORY_LSPB == command.trajec_type) {
 8005d3e:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	f040 8136 	bne.w	8005fb4 <scaraInitDuty+0xcf4>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8005d48:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	f040 80a5 	bne.w	8005e9c <scaraInitDuty+0xbdc>
					for ( uint8_t i = 0; i < 4; i++) {
 8005d52:	2300      	movs	r3, #0
 8005d54:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
 8005d58:	e08c      	b.n	8005e74 <scaraInitDuty+0xbb4>
						if ( i == command.sub_para_int) {
 8005d5a:	f897 218f 	ldrb.w	r2, [r7, #399]	; 0x18f
 8005d5e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d13d      	bne.n	8005de2 <scaraInitDuty+0xb22>
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005d66:	f897 218f 	ldrb.w	r2, [r7, #399]	; 0x18f
 8005d6a:	494a      	ldr	r1, [pc, #296]	; (8005e94 <scaraInitDuty+0xbd4>)
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	005b      	lsls	r3, r3, #1
 8005d70:	4413      	add	r3, r2
 8005d72:	01db      	lsls	r3, r3, #7
 8005d74:	440b      	add	r3, r1
 8005d76:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	701a      	strb	r2, [r3, #0]
							myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 8005d7e:	f897 218f 	ldrb.w	r2, [r7, #399]	; 0x18f
 8005d82:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	; 0x1f0
 8005d86:	4c43      	ldr	r4, [pc, #268]	; (8005e94 <scaraInitDuty+0xbd4>)
 8005d88:	4613      	mov	r3, r2
 8005d8a:	005b      	lsls	r3, r3, #1
 8005d8c:	4413      	add	r3, r2
 8005d8e:	01db      	lsls	r3, r3, #7
 8005d90:	4423      	add	r3, r4
 8005d92:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8005d96:	e9c3 0100 	strd	r0, r1, [r3]
							status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8005d9a:	f897 218f 	ldrb.w	r2, [r7, #399]	; 0x18f
 8005d9e:	4613      	mov	r3, r2
 8005da0:	005b      	lsls	r3, r3, #1
 8005da2:	4413      	add	r3, r2
 8005da4:	01db      	lsls	r3, r3, #7
 8005da6:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8005daa:	4a3a      	ldr	r2, [pc, #232]	; (8005e94 <scaraInitDuty+0xbd4>)
 8005dac:	1898      	adds	r0, r3, r2
 8005dae:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8005db2:	4a39      	ldr	r2, [pc, #228]	; (8005e98 <scaraInitDuty+0xbd8>)
 8005db4:	5cd3      	ldrb	r3, [r2, r3]
 8005db6:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005dba:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005dbe:	eeb0 2a46 	vmov.f32	s4, s12
 8005dc2:	eef0 2a66 	vmov.f32	s5, s13
 8005dc6:	eeb0 1a47 	vmov.f32	s2, s14
 8005dca:	eef0 1a67 	vmov.f32	s3, s15
 8005dce:	2201      	movs	r2, #1
 8005dd0:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	f001 fa9b 	bl	8007310 <scaraInitLSPB>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
 8005de0:	e03c      	b.n	8005e5c <scaraInitDuty+0xb9c>
											s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
						} else {
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005de2:	f897 218f 	ldrb.w	r2, [r7, #399]	; 0x18f
 8005de6:	492b      	ldr	r1, [pc, #172]	; (8005e94 <scaraInitDuty+0xbd4>)
 8005de8:	4613      	mov	r3, r2
 8005dea:	005b      	lsls	r3, r3, #1
 8005dec:	4413      	add	r3, r2
 8005dee:	01db      	lsls	r3, r3, #7
 8005df0:	440b      	add	r3, r1
 8005df2:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8005df6:	2200      	movs	r2, #0
 8005df8:	701a      	strb	r2, [r3, #0]
							myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 8005dfa:	f897 218f 	ldrb.w	r2, [r7, #399]	; 0x18f
 8005dfe:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	; 0x1f0
 8005e02:	4c24      	ldr	r4, [pc, #144]	; (8005e94 <scaraInitDuty+0xbd4>)
 8005e04:	4613      	mov	r3, r2
 8005e06:	005b      	lsls	r3, r3, #1
 8005e08:	4413      	add	r3, r2
 8005e0a:	01db      	lsls	r3, r3, #7
 8005e0c:	4423      	add	r3, r4
 8005e0e:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8005e12:	e9c3 0100 	strd	r0, r1, [r3]
							status2 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8005e16:	f897 218f 	ldrb.w	r2, [r7, #399]	; 0x18f
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	005b      	lsls	r3, r3, #1
 8005e1e:	4413      	add	r3, r2
 8005e20:	01db      	lsls	r3, r3, #7
 8005e22:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8005e26:	4a1b      	ldr	r2, [pc, #108]	; (8005e94 <scaraInitDuty+0xbd4>)
 8005e28:	1898      	adds	r0, r3, r2
 8005e2a:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8005e2e:	4a1a      	ldr	r2, [pc, #104]	; (8005e98 <scaraInitDuty+0xbd8>)
 8005e30:	5cd3      	ldrb	r3, [r2, r3]
 8005e32:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005e36:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005e3a:	eeb0 2a46 	vmov.f32	s4, s12
 8005e3e:	eef0 2a66 	vmov.f32	s5, s13
 8005e42:	eeb0 1a47 	vmov.f32	s2, s14
 8005e46:	eef0 1a67 	vmov.f32	s3, s15
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8005e88 <scaraInitDuty+0xbc8>
 8005e50:	4619      	mov	r1, r3
 8005e52:	f001 fa5d 	bl	8007310 <scaraInitLSPB>
 8005e56:	4603      	mov	r3, r0
 8005e58:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
											0, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
						}
						myDUTY.time_total = command.time_total;
 8005e5c:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 8005e60:	490c      	ldr	r1, [pc, #48]	; (8005e94 <scaraInitDuty+0xbd4>)
 8005e62:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8005e66:	e9c1 2300 	strd	r2, r3, [r1]
					for ( uint8_t i = 0; i < 4; i++) {
 8005e6a:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8005e6e:	3301      	adds	r3, #1
 8005e70:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
 8005e74:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8005e78:	2b03      	cmp	r3, #3
 8005e7a:	f67f af6e 	bls.w	8005d5a <scaraInitDuty+0xa9a>
 8005e7e:	e1c7      	b.n	8006210 <scaraInitDuty+0xf50>
 8005e80:	60000000 	.word	0x60000000
 8005e84:	400921fb 	.word	0x400921fb
	...
 8005e90:	40668000 	.word	0x40668000
 8005e94:	20004f30 	.word	0x20004f30
 8005e98:	20000824 	.word	0x20000824
					}
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8005e9c:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	f040 8084 	bne.w	8005fae <scaraInitDuty+0xcee>
					for ( uint8_t i = 0; i < 4; i++) {
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	f887 318e 	strb.w	r3, [r7, #398]	; 0x18e
 8005eac:	e07a      	b.n	8005fa4 <scaraInitDuty+0xce4>
						if ( i == command.sub_para_int) {
 8005eae:	f897 218e 	ldrb.w	r2, [r7, #398]	; 0x18e
 8005eb2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d140      	bne.n	8005f3c <scaraInitDuty+0xc7c>
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005eba:	f897 218e 	ldrb.w	r2, [r7, #398]	; 0x18e
 8005ebe:	49da      	ldr	r1, [pc, #872]	; (8006228 <scaraInitDuty+0xf68>)
 8005ec0:	4613      	mov	r3, r2
 8005ec2:	005b      	lsls	r3, r3, #1
 8005ec4:	4413      	add	r3, r2
 8005ec6:	01db      	lsls	r3, r3, #7
 8005ec8:	440b      	add	r3, r1
 8005eca:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8005ece:	2200      	movs	r2, #0
 8005ed0:	701a      	strb	r2, [r3, #0]
							status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8005ed2:	f897 218e 	ldrb.w	r2, [r7, #398]	; 0x18e
 8005ed6:	4613      	mov	r3, r2
 8005ed8:	005b      	lsls	r3, r3, #1
 8005eda:	4413      	add	r3, r2
 8005edc:	01db      	lsls	r3, r3, #7
 8005ede:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8005ee2:	4ad1      	ldr	r2, [pc, #836]	; (8006228 <scaraInitDuty+0xf68>)
 8005ee4:	1898      	adds	r0, r3, r2
 8005ee6:	f897 318e 	ldrb.w	r3, [r7, #398]	; 0x18e
 8005eea:	4ad0      	ldr	r2, [pc, #832]	; (800622c <scaraInitDuty+0xf6c>)
 8005eec:	5cd3      	ldrb	r3, [r2, r3]
 8005eee:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005ef2:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005ef6:	eeb0 2a46 	vmov.f32	s4, s12
 8005efa:	eef0 2a66 	vmov.f32	s5, s13
 8005efe:	eeb0 1a47 	vmov.f32	s2, s14
 8005f02:	eef0 1a67 	vmov.f32	s3, s15
 8005f06:	2200      	movs	r2, #0
 8005f08:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	f001 f9ff 	bl	8007310 <scaraInitLSPB>
 8005f12:	4603      	mov	r3, r0
 8005f14:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
											s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
							myDUTY.time_total = myDUTY.joint.trajectory[i].lspb.Tf;
 8005f18:	f897 218e 	ldrb.w	r2, [r7, #398]	; 0x18e
 8005f1c:	49c2      	ldr	r1, [pc, #776]	; (8006228 <scaraInitDuty+0xf68>)
 8005f1e:	4613      	mov	r3, r2
 8005f20:	005b      	lsls	r3, r3, #1
 8005f22:	4413      	add	r3, r2
 8005f24:	01db      	lsls	r3, r3, #7
 8005f26:	440b      	add	r3, r1
 8005f28:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8005f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f30:	49bd      	ldr	r1, [pc, #756]	; (8006228 <scaraInitDuty+0xf68>)
 8005f32:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8005f36:	e9c1 2300 	strd	r2, r3, [r1]
 8005f3a:	e02e      	b.n	8005f9a <scaraInitDuty+0xcda>
						} else {
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005f3c:	f897 218e 	ldrb.w	r2, [r7, #398]	; 0x18e
 8005f40:	49b9      	ldr	r1, [pc, #740]	; (8006228 <scaraInitDuty+0xf68>)
 8005f42:	4613      	mov	r3, r2
 8005f44:	005b      	lsls	r3, r3, #1
 8005f46:	4413      	add	r3, r2
 8005f48:	01db      	lsls	r3, r3, #7
 8005f4a:	440b      	add	r3, r1
 8005f4c:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8005f50:	2200      	movs	r2, #0
 8005f52:	701a      	strb	r2, [r3, #0]
							status2 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8005f54:	f897 218e 	ldrb.w	r2, [r7, #398]	; 0x18e
 8005f58:	4613      	mov	r3, r2
 8005f5a:	005b      	lsls	r3, r3, #1
 8005f5c:	4413      	add	r3, r2
 8005f5e:	01db      	lsls	r3, r3, #7
 8005f60:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8005f64:	4ab0      	ldr	r2, [pc, #704]	; (8006228 <scaraInitDuty+0xf68>)
 8005f66:	1898      	adds	r0, r3, r2
 8005f68:	f897 318e 	ldrb.w	r3, [r7, #398]	; 0x18e
 8005f6c:	4aaf      	ldr	r2, [pc, #700]	; (800622c <scaraInitDuty+0xf6c>)
 8005f6e:	5cd3      	ldrb	r3, [r2, r3]
 8005f70:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005f74:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005f78:	eeb0 2a46 	vmov.f32	s4, s12
 8005f7c:	eef0 2a66 	vmov.f32	s5, s13
 8005f80:	eeb0 1a47 	vmov.f32	s2, s14
 8005f84:	eef0 1a67 	vmov.f32	s3, s15
 8005f88:	2200      	movs	r2, #0
 8005f8a:	ed9f 0ba5 	vldr	d0, [pc, #660]	; 8006220 <scaraInitDuty+0xf60>
 8005f8e:	4619      	mov	r1, r3
 8005f90:	f001 f9be 	bl	8007310 <scaraInitLSPB>
 8005f94:	4603      	mov	r3, r0
 8005f96:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
					for ( uint8_t i = 0; i < 4; i++) {
 8005f9a:	f897 318e 	ldrb.w	r3, [r7, #398]	; 0x18e
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	f887 318e 	strb.w	r3, [r7, #398]	; 0x18e
 8005fa4:	f897 318e 	ldrb.w	r3, [r7, #398]	; 0x18e
 8005fa8:	2b03      	cmp	r3, #3
 8005faa:	d980      	bls.n	8005eae <scaraInitDuty+0xbee>
 8005fac:	e130      	b.n	8006210 <scaraInitDuty+0xf50>
											0, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
						}
					}
				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 8005fae:	2308      	movs	r3, #8
 8005fb0:	f000 bccc 	b.w	800694c <scaraInitDuty+0x168c>
				}
			// SCURVE
			} else if ( DUTY_TRAJECTORY_SCURVE == command.trajec_type) {
 8005fb4:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	f040 8127 	bne.w	800620c <scaraInitDuty+0xf4c>
					// Mode Init Time
					if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8005fbe:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	f040 8097 	bne.w	80060f6 <scaraInitDuty+0xe36>
						for ( uint8_t i = 0; i < 4; i++) {
 8005fc8:	2300      	movs	r3, #0
 8005fca:	f887 318d 	strb.w	r3, [r7, #397]	; 0x18d
 8005fce:	e08c      	b.n	80060ea <scaraInitDuty+0xe2a>
							if ( i == command.sub_para_int) {
 8005fd0:	f897 218d 	ldrb.w	r2, [r7, #397]	; 0x18d
 8005fd4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d13d      	bne.n	8006058 <scaraInitDuty+0xd98>
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8005fdc:	f897 218d 	ldrb.w	r2, [r7, #397]	; 0x18d
 8005fe0:	4991      	ldr	r1, [pc, #580]	; (8006228 <scaraInitDuty+0xf68>)
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	005b      	lsls	r3, r3, #1
 8005fe6:	4413      	add	r3, r2
 8005fe8:	01db      	lsls	r3, r3, #7
 8005fea:	440b      	add	r3, r1
 8005fec:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	701a      	strb	r2, [r3, #0]
								myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 8005ff4:	f897 218d 	ldrb.w	r2, [r7, #397]	; 0x18d
 8005ff8:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	; 0x1f0
 8005ffc:	4c8a      	ldr	r4, [pc, #552]	; (8006228 <scaraInitDuty+0xf68>)
 8005ffe:	4613      	mov	r3, r2
 8006000:	005b      	lsls	r3, r3, #1
 8006002:	4413      	add	r3, r2
 8006004:	01db      	lsls	r3, r3, #7
 8006006:	4423      	add	r3, r4
 8006008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800600c:	e9c3 0100 	strd	r0, r1, [r3]
								status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 8006010:	f897 218d 	ldrb.w	r2, [r7, #397]	; 0x18d
 8006014:	4613      	mov	r3, r2
 8006016:	005b      	lsls	r3, r3, #1
 8006018:	4413      	add	r3, r2
 800601a:	01db      	lsls	r3, r3, #7
 800601c:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8006020:	4a81      	ldr	r2, [pc, #516]	; (8006228 <scaraInitDuty+0xf68>)
 8006022:	1898      	adds	r0, r3, r2
 8006024:	f897 318d 	ldrb.w	r3, [r7, #397]	; 0x18d
 8006028:	4a80      	ldr	r2, [pc, #512]	; (800622c <scaraInitDuty+0xf6c>)
 800602a:	5cd3      	ldrb	r3, [r2, r3]
 800602c:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006030:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8006034:	eeb0 2a46 	vmov.f32	s4, s12
 8006038:	eef0 2a66 	vmov.f32	s5, s13
 800603c:	eeb0 1a47 	vmov.f32	s2, s14
 8006040:	eef0 1a67 	vmov.f32	s3, s15
 8006044:	2201      	movs	r2, #1
 8006046:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 800604a:	4619      	mov	r1, r3
 800604c:	f001 fd34 	bl	8007ab8 <scaraInitScurve>
 8006050:	4603      	mov	r3, r0
 8006052:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
 8006056:	e03c      	b.n	80060d2 <scaraInitDuty+0xe12>
											joint_taget[i],
											s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
							} else {
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8006058:	f897 218d 	ldrb.w	r2, [r7, #397]	; 0x18d
 800605c:	4972      	ldr	r1, [pc, #456]	; (8006228 <scaraInitDuty+0xf68>)
 800605e:	4613      	mov	r3, r2
 8006060:	005b      	lsls	r3, r3, #1
 8006062:	4413      	add	r3, r2
 8006064:	01db      	lsls	r3, r3, #7
 8006066:	440b      	add	r3, r1
 8006068:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800606c:	2201      	movs	r2, #1
 800606e:	701a      	strb	r2, [r3, #0]
								myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 8006070:	f897 218d 	ldrb.w	r2, [r7, #397]	; 0x18d
 8006074:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	; 0x1f0
 8006078:	4c6b      	ldr	r4, [pc, #428]	; (8006228 <scaraInitDuty+0xf68>)
 800607a:	4613      	mov	r3, r2
 800607c:	005b      	lsls	r3, r3, #1
 800607e:	4413      	add	r3, r2
 8006080:	01db      	lsls	r3, r3, #7
 8006082:	4423      	add	r3, r4
 8006084:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006088:	e9c3 0100 	strd	r0, r1, [r3]
								status2 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 800608c:	f897 218d 	ldrb.w	r2, [r7, #397]	; 0x18d
 8006090:	4613      	mov	r3, r2
 8006092:	005b      	lsls	r3, r3, #1
 8006094:	4413      	add	r3, r2
 8006096:	01db      	lsls	r3, r3, #7
 8006098:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 800609c:	4a62      	ldr	r2, [pc, #392]	; (8006228 <scaraInitDuty+0xf68>)
 800609e:	1898      	adds	r0, r3, r2
 80060a0:	f897 318d 	ldrb.w	r3, [r7, #397]	; 0x18d
 80060a4:	4a61      	ldr	r2, [pc, #388]	; (800622c <scaraInitDuty+0xf6c>)
 80060a6:	5cd3      	ldrb	r3, [r2, r3]
 80060a8:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 80060ac:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 80060b0:	eeb0 2a46 	vmov.f32	s4, s12
 80060b4:	eef0 2a66 	vmov.f32	s5, s13
 80060b8:	eeb0 1a47 	vmov.f32	s2, s14
 80060bc:	eef0 1a67 	vmov.f32	s3, s15
 80060c0:	2201      	movs	r2, #1
 80060c2:	ed9f 0b57 	vldr	d0, [pc, #348]	; 8006220 <scaraInitDuty+0xf60>
 80060c6:	4619      	mov	r1, r3
 80060c8:	f001 fcf6 	bl	8007ab8 <scaraInitScurve>
 80060cc:	4603      	mov	r3, r0
 80060ce:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
											joint_taget[i],
											0, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
							}
							myDUTY.time_total = command.time_total;
 80060d2:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 80060d6:	4954      	ldr	r1, [pc, #336]	; (8006228 <scaraInitDuty+0xf68>)
 80060d8:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 80060dc:	e9c1 2300 	strd	r2, r3, [r1]
						for ( uint8_t i = 0; i < 4; i++) {
 80060e0:	f897 318d 	ldrb.w	r3, [r7, #397]	; 0x18d
 80060e4:	3301      	adds	r3, #1
 80060e6:	f887 318d 	strb.w	r3, [r7, #397]	; 0x18d
 80060ea:	f897 318d 	ldrb.w	r3, [r7, #397]	; 0x18d
 80060ee:	2b03      	cmp	r3, #3
 80060f0:	f67f af6e 	bls.w	8005fd0 <scaraInitDuty+0xd10>
 80060f4:	e08c      	b.n	8006210 <scaraInitDuty+0xf50>
						}
					// Mode Init Acc
					} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 80060f6:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	f040 8084 	bne.w	8006208 <scaraInitDuty+0xf48>
						for ( uint8_t i = 0; i < 4; i++) {
 8006100:	2300      	movs	r3, #0
 8006102:	f887 318c 	strb.w	r3, [r7, #396]	; 0x18c
 8006106:	e07a      	b.n	80061fe <scaraInitDuty+0xf3e>
							if ( i == command.sub_para_int) {
 8006108:	f897 218c 	ldrb.w	r2, [r7, #396]	; 0x18c
 800610c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8006110:	429a      	cmp	r2, r3
 8006112:	d140      	bne.n	8006196 <scaraInitDuty+0xed6>
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8006114:	f897 218c 	ldrb.w	r2, [r7, #396]	; 0x18c
 8006118:	4943      	ldr	r1, [pc, #268]	; (8006228 <scaraInitDuty+0xf68>)
 800611a:	4613      	mov	r3, r2
 800611c:	005b      	lsls	r3, r3, #1
 800611e:	4413      	add	r3, r2
 8006120:	01db      	lsls	r3, r3, #7
 8006122:	440b      	add	r3, r1
 8006124:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006128:	2201      	movs	r2, #1
 800612a:	701a      	strb	r2, [r3, #0]
								status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 800612c:	f897 218c 	ldrb.w	r2, [r7, #396]	; 0x18c
 8006130:	4613      	mov	r3, r2
 8006132:	005b      	lsls	r3, r3, #1
 8006134:	4413      	add	r3, r2
 8006136:	01db      	lsls	r3, r3, #7
 8006138:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 800613c:	4a3a      	ldr	r2, [pc, #232]	; (8006228 <scaraInitDuty+0xf68>)
 800613e:	1898      	adds	r0, r3, r2
 8006140:	f897 318c 	ldrb.w	r3, [r7, #396]	; 0x18c
 8006144:	4a39      	ldr	r2, [pc, #228]	; (800622c <scaraInitDuty+0xf6c>)
 8006146:	5cd3      	ldrb	r3, [r2, r3]
 8006148:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 800614c:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8006150:	eeb0 2a46 	vmov.f32	s4, s12
 8006154:	eef0 2a66 	vmov.f32	s5, s13
 8006158:	eeb0 1a47 	vmov.f32	s2, s14
 800615c:	eef0 1a67 	vmov.f32	s3, s15
 8006160:	2200      	movs	r2, #0
 8006162:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8006166:	4619      	mov	r1, r3
 8006168:	f001 fca6 	bl	8007ab8 <scaraInitScurve>
 800616c:	4603      	mov	r3, r0
 800616e:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
											joint_taget[i],
											s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
								myDUTY.time_total = myDUTY.joint.trajectory[i].scurve.Tf;
 8006172:	f897 218c 	ldrb.w	r2, [r7, #396]	; 0x18c
 8006176:	492c      	ldr	r1, [pc, #176]	; (8006228 <scaraInitDuty+0xf68>)
 8006178:	4613      	mov	r3, r2
 800617a:	005b      	lsls	r3, r3, #1
 800617c:	4413      	add	r3, r2
 800617e:	01db      	lsls	r3, r3, #7
 8006180:	440b      	add	r3, r1
 8006182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800618a:	4927      	ldr	r1, [pc, #156]	; (8006228 <scaraInitDuty+0xf68>)
 800618c:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8006190:	e9c1 2300 	strd	r2, r3, [r1]
 8006194:	e02e      	b.n	80061f4 <scaraInitDuty+0xf34>
							} else {
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8006196:	f897 218c 	ldrb.w	r2, [r7, #396]	; 0x18c
 800619a:	4923      	ldr	r1, [pc, #140]	; (8006228 <scaraInitDuty+0xf68>)
 800619c:	4613      	mov	r3, r2
 800619e:	005b      	lsls	r3, r3, #1
 80061a0:	4413      	add	r3, r2
 80061a2:	01db      	lsls	r3, r3, #7
 80061a4:	440b      	add	r3, r1
 80061a6:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80061aa:	2201      	movs	r2, #1
 80061ac:	701a      	strb	r2, [r3, #0]
								status2 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 80061ae:	f897 218c 	ldrb.w	r2, [r7, #396]	; 0x18c
 80061b2:	4613      	mov	r3, r2
 80061b4:	005b      	lsls	r3, r3, #1
 80061b6:	4413      	add	r3, r2
 80061b8:	01db      	lsls	r3, r3, #7
 80061ba:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 80061be:	4a1a      	ldr	r2, [pc, #104]	; (8006228 <scaraInitDuty+0xf68>)
 80061c0:	1898      	adds	r0, r3, r2
 80061c2:	f897 318c 	ldrb.w	r3, [r7, #396]	; 0x18c
 80061c6:	4a19      	ldr	r2, [pc, #100]	; (800622c <scaraInitDuty+0xf6c>)
 80061c8:	5cd3      	ldrb	r3, [r2, r3]
 80061ca:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 80061ce:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 80061d2:	eeb0 2a46 	vmov.f32	s4, s12
 80061d6:	eef0 2a66 	vmov.f32	s5, s13
 80061da:	eeb0 1a47 	vmov.f32	s2, s14
 80061de:	eef0 1a67 	vmov.f32	s3, s15
 80061e2:	2200      	movs	r2, #0
 80061e4:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8006220 <scaraInitDuty+0xf60>
 80061e8:	4619      	mov	r1, r3
 80061ea:	f001 fc65 	bl	8007ab8 <scaraInitScurve>
 80061ee:	4603      	mov	r3, r0
 80061f0:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
						for ( uint8_t i = 0; i < 4; i++) {
 80061f4:	f897 318c 	ldrb.w	r3, [r7, #396]	; 0x18c
 80061f8:	3301      	adds	r3, #1
 80061fa:	f887 318c 	strb.w	r3, [r7, #396]	; 0x18c
 80061fe:	f897 318c 	ldrb.w	r3, [r7, #396]	; 0x18c
 8006202:	2b03      	cmp	r3, #3
 8006204:	d980      	bls.n	8006108 <scaraInitDuty+0xe48>
 8006206:	e003      	b.n	8006210 <scaraInitDuty+0xf50>
											0, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
							}
						}

					} else {
						return SCARA_STATUS_ERROR_MODE_INIT;
 8006208:	2308      	movs	r3, #8
 800620a:	e39f      	b.n	800694c <scaraInitDuty+0x168c>
					}

			} else {
				return SCARA_STATUS_ERROR_TRAJECTORY;
 800620c:	2305      	movs	r3, #5
 800620e:	e39d      	b.n	800694c <scaraInitDuty+0x168c>
			}
		// Check Init Status
			if ( SCARA_STATUS_OK != status1) {
 8006210:	f897 31be 	ldrb.w	r3, [r7, #446]	; 0x1be
 8006214:	2b00      	cmp	r3, #0
 8006216:	d00b      	beq.n	8006230 <scaraInitDuty+0xf70>
				return status1;
 8006218:	f897 31be 	ldrb.w	r3, [r7, #446]	; 0x1be
 800621c:	e396      	b.n	800694c <scaraInitDuty+0x168c>
 800621e:	bf00      	nop
	...
 8006228:	20004f30 	.word	0x20004f30
 800622c:	20000824 	.word	0x20000824
			}
			if ( SCARA_STATUS_OK != status2) {
 8006230:	f897 31bd 	ldrb.w	r3, [r7, #445]	; 0x1bd
 8006234:	2b00      	cmp	r3, #0
 8006236:	f000 835b 	beq.w	80068f0 <scaraInitDuty+0x1630>
				return status2;
 800623a:	f897 31bd 	ldrb.w	r3, [r7, #445]	; 0x1bd
 800623e:	e385      	b.n	800694c <scaraInitDuty+0x168c>
			}

		//----Joint Quadra
		} else if 	( DUTY_JOINT_4DOF == command.joint_type) {
 8006240:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 8006244:	2b01      	cmp	r3, #1
 8006246:	f040 834f 	bne.w	80068e8 <scaraInitDuty+0x1628>
			SCARA_PositionTypeDef	target_point;
			// Change Degree --> Radian
			command.target_point.roll = command.target_point.roll*PI/180.0;
 800624a:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	; 0x258
 800624e:	a3bc      	add	r3, pc, #752	; (adr r3, 8006540 <scaraInitDuty+0x1280>)
 8006250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006254:	f7fa f9d0 	bl	80005f8 <__aeabi_dmul>
 8006258:	4602      	mov	r2, r0
 800625a:	460b      	mov	r3, r1
 800625c:	4610      	mov	r0, r2
 800625e:	4619      	mov	r1, r3
 8006260:	f04f 0200 	mov.w	r2, #0
 8006264:	4bb2      	ldr	r3, [pc, #712]	; (8006530 <scaraInitDuty+0x1270>)
 8006266:	f7fa faf1 	bl	800084c <__aeabi_ddiv>
 800626a:	4602      	mov	r2, r0
 800626c:	460b      	mov	r3, r1
 800626e:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
			// Coordinate
			if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8006272:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8006276:	2b01      	cmp	r3, #1
 8006278:	d134      	bne.n	80062e4 <scaraInitDuty+0x1024>
				target_point.x 		= positionCurrent.x + command.target_point.x;
 800627a:	4bae      	ldr	r3, [pc, #696]	; (8006534 <scaraInitDuty+0x1274>)
 800627c:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8006280:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 8006284:	f7fa f802 	bl	800028c <__adddf3>
 8006288:	4602      	mov	r2, r0
 800628a:	460b      	mov	r3, r1
 800628c:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 8006290:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
				target_point.y 		= positionCurrent.y + command.target_point.y;
 8006294:	4ba7      	ldr	r3, [pc, #668]	; (8006534 <scaraInitDuty+0x1274>)
 8006296:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800629a:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 800629e:	f7f9 fff5 	bl	800028c <__adddf3>
 80062a2:	4602      	mov	r2, r0
 80062a4:	460b      	mov	r3, r1
 80062a6:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 80062aa:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
				target_point.z 		= positionCurrent.z + command.target_point.z;
 80062ae:	4ba1      	ldr	r3, [pc, #644]	; (8006534 <scaraInitDuty+0x1274>)
 80062b0:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 80062b4:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 80062b8:	f7f9 ffe8 	bl	800028c <__adddf3>
 80062bc:	4602      	mov	r2, r0
 80062be:	460b      	mov	r3, r1
 80062c0:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 80062c4:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
				target_point.roll	= positionCurrent.roll + command.target_point.roll;
 80062c8:	4b9a      	ldr	r3, [pc, #616]	; (8006534 <scaraInitDuty+0x1274>)
 80062ca:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80062ce:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 80062d2:	f7f9 ffdb 	bl	800028c <__adddf3>
 80062d6:	4602      	mov	r2, r0
 80062d8:	460b      	mov	r3, r1
 80062da:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 80062de:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 80062e2:	e01e      	b.n	8006322 <scaraInitDuty+0x1062>
			} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 80062e4:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d118      	bne.n	800631e <scaraInitDuty+0x105e>
				target_point.x 		= command.target_point.x;
 80062ec:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 80062f0:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 80062f4:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
				target_point.y 		= command.target_point.y;
 80062f8:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 80062fc:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 8006300:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
				target_point.z 		= command.target_point.z;
 8006304:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8006308:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 800630c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
				target_point.roll	= command.target_point.roll;
 8006310:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 8006314:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 8006318:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 800631c:	e001      	b.n	8006322 <scaraInitDuty+0x1062>
			} else {
				return SCARA_STATUS_ERROR_COORDINATE;
 800631e:	230c      	movs	r3, #12
 8006320:	e314      	b.n	800694c <scaraInitDuty+0x168c>
			}

			if( FALSE == kinematicInverse(&target_point, positionCurrent)) {
 8006322:	4c84      	ldr	r4, [pc, #528]	; (8006534 <scaraInitDuty+0x1274>)
 8006324:	f107 05c0 	add.w	r5, r7, #192	; 0xc0
 8006328:	4668      	mov	r0, sp
 800632a:	f104 0308 	add.w	r3, r4, #8
 800632e:	22b8      	movs	r2, #184	; 0xb8
 8006330:	4619      	mov	r1, r3
 8006332:	f00f fced 	bl	8015d10 <memcpy>
 8006336:	e894 000c 	ldmia.w	r4, {r2, r3}
 800633a:	4628      	mov	r0, r5
 800633c:	f7fd fbb4 	bl	8003aa8 <kinematicInverse>
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d101      	bne.n	800634a <scaraInitDuty+0x108a>
				return SCARA_STATUS_ERROR_OVER_WORKSPACE;// Exit with error
 8006346:	2307      	movs	r3, #7
 8006348:	e300      	b.n	800694c <scaraInitDuty+0x168c>
			}
			// Trajectory 4 profile
			double q[4];
			q[0] = target_point.Theta1 - positionCurrent.Theta1;
 800634a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800634e:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8006352:	4b78      	ldr	r3, [pc, #480]	; (8006534 <scaraInitDuty+0x1274>)
 8006354:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8006358:	f7f9 ff96 	bl	8000288 <__aeabi_dsub>
 800635c:	4602      	mov	r2, r0
 800635e:	460b      	mov	r3, r1
 8006360:	4639      	mov	r1, r7
 8006362:	e9c1 2300 	strd	r2, r3, [r1]
			q[1] = target_point.Theta2 - positionCurrent.Theta2;
 8006366:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800636a:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 800636e:	4b71      	ldr	r3, [pc, #452]	; (8006534 <scaraInitDuty+0x1274>)
 8006370:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8006374:	f7f9 ff88 	bl	8000288 <__aeabi_dsub>
 8006378:	4602      	mov	r2, r0
 800637a:	460b      	mov	r3, r1
 800637c:	4639      	mov	r1, r7
 800637e:	e9c1 2302 	strd	r2, r3, [r1, #8]
			q[2] = target_point.D3 	   - positionCurrent.D3;
 8006382:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006386:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 800638a:	4b6a      	ldr	r3, [pc, #424]	; (8006534 <scaraInitDuty+0x1274>)
 800638c:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8006390:	f7f9 ff7a 	bl	8000288 <__aeabi_dsub>
 8006394:	4602      	mov	r2, r0
 8006396:	460b      	mov	r3, r1
 8006398:	4639      	mov	r1, r7
 800639a:	e9c1 2304 	strd	r2, r3, [r1, #16]
			q[3] = target_point.Theta4 - positionCurrent.Theta4;
 800639e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80063a2:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 80063a6:	4b63      	ldr	r3, [pc, #396]	; (8006534 <scaraInitDuty+0x1274>)
 80063a8:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80063ac:	f7f9 ff6c 	bl	8000288 <__aeabi_dsub>
 80063b0:	4602      	mov	r2, r0
 80063b2:	460b      	mov	r3, r1
 80063b4:	4639      	mov	r1, r7
 80063b6:	e9c1 2306 	strd	r2, r3, [r1, #24]

			// LSPB
			if ( DUTY_TRAJECTORY_LSPB == command.trajec_type) {
 80063ba:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	f040 814a 	bne.w	8006658 <scaraInitDuty+0x1398>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 80063c4:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d159      	bne.n	8006480 <scaraInitDuty+0x11c0>
					for ( uint8_t i = 0; i < 4; i++) {
 80063cc:	2300      	movs	r3, #0
 80063ce:	f887 318b 	strb.w	r3, [r7, #395]	; 0x18b
 80063d2:	e049      	b.n	8006468 <scaraInitDuty+0x11a8>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 80063d4:	f897 218b 	ldrb.w	r2, [r7, #395]	; 0x18b
 80063d8:	4957      	ldr	r1, [pc, #348]	; (8006538 <scaraInitDuty+0x1278>)
 80063da:	4613      	mov	r3, r2
 80063dc:	005b      	lsls	r3, r3, #1
 80063de:	4413      	add	r3, r2
 80063e0:	01db      	lsls	r3, r3, #7
 80063e2:	440b      	add	r3, r1
 80063e4:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80063e8:	2200      	movs	r2, #0
 80063ea:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 80063ec:	f897 218b 	ldrb.w	r2, [r7, #395]	; 0x18b
 80063f0:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	; 0x1f0
 80063f4:	4c50      	ldr	r4, [pc, #320]	; (8006538 <scaraInitDuty+0x1278>)
 80063f6:	4613      	mov	r3, r2
 80063f8:	005b      	lsls	r3, r3, #1
 80063fa:	4413      	add	r3, r2
 80063fc:	01db      	lsls	r3, r3, #7
 80063fe:	4423      	add	r3, r4
 8006400:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8006404:	e9c3 0100 	strd	r0, r1, [r3]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8006408:	f897 218b 	ldrb.w	r2, [r7, #395]	; 0x18b
 800640c:	4613      	mov	r3, r2
 800640e:	005b      	lsls	r3, r3, #1
 8006410:	4413      	add	r3, r2
 8006412:	01db      	lsls	r3, r3, #7
 8006414:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8006418:	4a47      	ldr	r2, [pc, #284]	; (8006538 <scaraInitDuty+0x1278>)
 800641a:	1898      	adds	r0, r3, r2
 800641c:	f897 318b 	ldrb.w	r3, [r7, #395]	; 0x18b
 8006420:	4a46      	ldr	r2, [pc, #280]	; (800653c <scaraInitDuty+0x127c>)
 8006422:	5cd1      	ldrb	r1, [r2, r3]
 8006424:	f897 318b 	ldrb.w	r3, [r7, #395]	; 0x18b
 8006428:	463a      	mov	r2, r7
 800642a:	00db      	lsls	r3, r3, #3
 800642c:	4413      	add	r3, r2
 800642e:	ed93 7b00 	vldr	d7, [r3]
 8006432:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 8006436:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 800643a:	eeb0 2a45 	vmov.f32	s4, s10
 800643e:	eef0 2a65 	vmov.f32	s5, s11
 8006442:	eeb0 1a46 	vmov.f32	s2, s12
 8006446:	eef0 1a66 	vmov.f32	s3, s13
 800644a:	2201      	movs	r2, #1
 800644c:	eeb0 0a47 	vmov.f32	s0, s14
 8006450:	eef0 0a67 	vmov.f32	s1, s15
 8006454:	f000 ff5c 	bl	8007310 <scaraInitLSPB>
 8006458:	4603      	mov	r3, r0
 800645a:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
					for ( uint8_t i = 0; i < 4; i++) {
 800645e:	f897 318b 	ldrb.w	r3, [r7, #395]	; 0x18b
 8006462:	3301      	adds	r3, #1
 8006464:	f887 318b 	strb.w	r3, [r7, #395]	; 0x18b
 8006468:	f897 318b 	ldrb.w	r3, [r7, #395]	; 0x18b
 800646c:	2b03      	cmp	r3, #3
 800646e:	d9b1      	bls.n	80063d4 <scaraInitDuty+0x1114>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);

					}
					myDUTY.time_total = command.time_total;
 8006470:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 8006474:	4930      	ldr	r1, [pc, #192]	; (8006538 <scaraInitDuty+0x1278>)
 8006476:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 800647a:	e9c1 2300 	strd	r2, r3, [r1]
 800647e:	e237      	b.n	80068f0 <scaraInitDuty+0x1630>
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8006480:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006484:	2b00      	cmp	r3, #0
 8006486:	f040 80e5 	bne.w	8006654 <scaraInitDuty+0x1394>
					for ( uint8_t i = 0; i < 4; i++) {
 800648a:	2300      	movs	r3, #0
 800648c:	f887 318a 	strb.w	r3, [r7, #394]	; 0x18a
 8006490:	e03b      	b.n	800650a <scaraInitDuty+0x124a>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8006492:	f897 218a 	ldrb.w	r2, [r7, #394]	; 0x18a
 8006496:	4928      	ldr	r1, [pc, #160]	; (8006538 <scaraInitDuty+0x1278>)
 8006498:	4613      	mov	r3, r2
 800649a:	005b      	lsls	r3, r3, #1
 800649c:	4413      	add	r3, r2
 800649e:	01db      	lsls	r3, r3, #7
 80064a0:	440b      	add	r3, r1
 80064a2:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80064a6:	2200      	movs	r2, #0
 80064a8:	701a      	strb	r2, [r3, #0]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 80064aa:	f897 218a 	ldrb.w	r2, [r7, #394]	; 0x18a
 80064ae:	4613      	mov	r3, r2
 80064b0:	005b      	lsls	r3, r3, #1
 80064b2:	4413      	add	r3, r2
 80064b4:	01db      	lsls	r3, r3, #7
 80064b6:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80064ba:	4a1f      	ldr	r2, [pc, #124]	; (8006538 <scaraInitDuty+0x1278>)
 80064bc:	1898      	adds	r0, r3, r2
 80064be:	f897 318a 	ldrb.w	r3, [r7, #394]	; 0x18a
 80064c2:	4a1e      	ldr	r2, [pc, #120]	; (800653c <scaraInitDuty+0x127c>)
 80064c4:	5cd1      	ldrb	r1, [r2, r3]
 80064c6:	f897 318a 	ldrb.w	r3, [r7, #394]	; 0x18a
 80064ca:	463a      	mov	r2, r7
 80064cc:	00db      	lsls	r3, r3, #3
 80064ce:	4413      	add	r3, r2
 80064d0:	ed93 7b00 	vldr	d7, [r3]
 80064d4:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 80064d8:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 80064dc:	eeb0 2a45 	vmov.f32	s4, s10
 80064e0:	eef0 2a65 	vmov.f32	s5, s11
 80064e4:	eeb0 1a46 	vmov.f32	s2, s12
 80064e8:	eef0 1a66 	vmov.f32	s3, s13
 80064ec:	2200      	movs	r2, #0
 80064ee:	eeb0 0a47 	vmov.f32	s0, s14
 80064f2:	eef0 0a67 	vmov.f32	s1, s15
 80064f6:	f000 ff0b 	bl	8007310 <scaraInitLSPB>
 80064fa:	4603      	mov	r3, r0
 80064fc:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
					for ( uint8_t i = 0; i < 4; i++) {
 8006500:	f897 318a 	ldrb.w	r3, [r7, #394]	; 0x18a
 8006504:	3301      	adds	r3, #1
 8006506:	f887 318a 	strb.w	r3, [r7, #394]	; 0x18a
 800650a:	f897 318a 	ldrb.w	r3, [r7, #394]	; 0x18a
 800650e:	2b03      	cmp	r3, #3
 8006510:	d9bf      	bls.n	8006492 <scaraInitDuty+0x11d2>
											q[i], DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
					}
					myDUTY.time_total = 0;
 8006512:	4b09      	ldr	r3, [pc, #36]	; (8006538 <scaraInitDuty+0x1278>)
 8006514:	f603 2138 	addw	r1, r3, #2616	; 0xa38
 8006518:	f04f 0200 	mov.w	r2, #0
 800651c:	f04f 0300 	mov.w	r3, #0
 8006520:	e9c1 2300 	strd	r2, r3, [r1]
					for ( uint8_t i = 0; i < 4; i++) {
 8006524:	2300      	movs	r3, #0
 8006526:	f887 3189 	strb.w	r3, [r7, #393]	; 0x189
 800652a:	e039      	b.n	80065a0 <scaraInitDuty+0x12e0>
 800652c:	f3af 8000 	nop.w
 8006530:	40668000 	.word	0x40668000
 8006534:	20005af0 	.word	0x20005af0
 8006538:	20004f30 	.word	0x20004f30
 800653c:	20000824 	.word	0x20000824
 8006540:	60000000 	.word	0x60000000
 8006544:	400921fb 	.word	0x400921fb
						if ( myDUTY.joint.trajectory[i].lspb.Tf > myDUTY.time_total) {
 8006548:	f897 2189 	ldrb.w	r2, [r7, #393]	; 0x189
 800654c:	49b9      	ldr	r1, [pc, #740]	; (8006834 <scaraInitDuty+0x1574>)
 800654e:	4613      	mov	r3, r2
 8006550:	005b      	lsls	r3, r3, #1
 8006552:	4413      	add	r3, r2
 8006554:	01db      	lsls	r3, r3, #7
 8006556:	440b      	add	r3, r1
 8006558:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 800655c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006560:	4bb4      	ldr	r3, [pc, #720]	; (8006834 <scaraInitDuty+0x1574>)
 8006562:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656a:	f7fa fad5 	bl	8000b18 <__aeabi_dcmpgt>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d010      	beq.n	8006596 <scaraInitDuty+0x12d6>
							myDUTY.time_total = myDUTY.joint.trajectory[i].lspb.Tf;
 8006574:	f897 2189 	ldrb.w	r2, [r7, #393]	; 0x189
 8006578:	49ae      	ldr	r1, [pc, #696]	; (8006834 <scaraInitDuty+0x1574>)
 800657a:	4613      	mov	r3, r2
 800657c:	005b      	lsls	r3, r3, #1
 800657e:	4413      	add	r3, r2
 8006580:	01db      	lsls	r3, r3, #7
 8006582:	440b      	add	r3, r1
 8006584:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8006588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800658c:	49a9      	ldr	r1, [pc, #676]	; (8006834 <scaraInitDuty+0x1574>)
 800658e:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8006592:	e9c1 2300 	strd	r2, r3, [r1]
					for ( uint8_t i = 0; i < 4; i++) {
 8006596:	f897 3189 	ldrb.w	r3, [r7, #393]	; 0x189
 800659a:	3301      	adds	r3, #1
 800659c:	f887 3189 	strb.w	r3, [r7, #393]	; 0x189
 80065a0:	f897 3189 	ldrb.w	r3, [r7, #393]	; 0x189
 80065a4:	2b03      	cmp	r3, #3
 80065a6:	d9cf      	bls.n	8006548 <scaraInitDuty+0x1288>
						}
					}
					for ( uint8_t i = 0; i < 4; i++) {
 80065a8:	2300      	movs	r3, #0
 80065aa:	f887 3188 	strb.w	r3, [r7, #392]	; 0x188
 80065ae:	e04c      	b.n	800664a <scaraInitDuty+0x138a>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 80065b0:	f897 2188 	ldrb.w	r2, [r7, #392]	; 0x188
 80065b4:	499f      	ldr	r1, [pc, #636]	; (8006834 <scaraInitDuty+0x1574>)
 80065b6:	4613      	mov	r3, r2
 80065b8:	005b      	lsls	r3, r3, #1
 80065ba:	4413      	add	r3, r2
 80065bc:	01db      	lsls	r3, r3, #7
 80065be:	440b      	add	r3, r1
 80065c0:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80065c4:	2200      	movs	r2, #0
 80065c6:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].lspb.Tf = myDUTY.time_total;
 80065c8:	f897 2188 	ldrb.w	r2, [r7, #392]	; 0x188
 80065cc:	4b99      	ldr	r3, [pc, #612]	; (8006834 <scaraInitDuty+0x1574>)
 80065ce:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80065d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80065d6:	4c97      	ldr	r4, [pc, #604]	; (8006834 <scaraInitDuty+0x1574>)
 80065d8:	4613      	mov	r3, r2
 80065da:	005b      	lsls	r3, r3, #1
 80065dc:	4413      	add	r3, r2
 80065de:	01db      	lsls	r3, r3, #7
 80065e0:	4423      	add	r3, r4
 80065e2:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 80065e6:	e9c3 0100 	strd	r0, r1, [r3]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 80065ea:	f897 2188 	ldrb.w	r2, [r7, #392]	; 0x188
 80065ee:	4613      	mov	r3, r2
 80065f0:	005b      	lsls	r3, r3, #1
 80065f2:	4413      	add	r3, r2
 80065f4:	01db      	lsls	r3, r3, #7
 80065f6:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80065fa:	4a8e      	ldr	r2, [pc, #568]	; (8006834 <scaraInitDuty+0x1574>)
 80065fc:	1898      	adds	r0, r3, r2
 80065fe:	f897 3188 	ldrb.w	r3, [r7, #392]	; 0x188
 8006602:	4a8d      	ldr	r2, [pc, #564]	; (8006838 <scaraInitDuty+0x1578>)
 8006604:	5cd1      	ldrb	r1, [r2, r3]
 8006606:	f897 3188 	ldrb.w	r3, [r7, #392]	; 0x188
 800660a:	463a      	mov	r2, r7
 800660c:	00db      	lsls	r3, r3, #3
 800660e:	4413      	add	r3, r2
 8006610:	ed93 7b00 	vldr	d7, [r3]
 8006614:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 8006618:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 800661c:	eeb0 2a45 	vmov.f32	s4, s10
 8006620:	eef0 2a65 	vmov.f32	s5, s11
 8006624:	eeb0 1a46 	vmov.f32	s2, s12
 8006628:	eef0 1a66 	vmov.f32	s3, s13
 800662c:	2201      	movs	r2, #1
 800662e:	eeb0 0a47 	vmov.f32	s0, s14
 8006632:	eef0 0a67 	vmov.f32	s1, s15
 8006636:	f000 fe6b 	bl	8007310 <scaraInitLSPB>
 800663a:	4603      	mov	r3, r0
 800663c:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
					for ( uint8_t i = 0; i < 4; i++) {
 8006640:	f897 3188 	ldrb.w	r3, [r7, #392]	; 0x188
 8006644:	3301      	adds	r3, #1
 8006646:	f887 3188 	strb.w	r3, [r7, #392]	; 0x188
 800664a:	f897 3188 	ldrb.w	r3, [r7, #392]	; 0x188
 800664e:	2b03      	cmp	r3, #3
 8006650:	d9ae      	bls.n	80065b0 <scaraInitDuty+0x12f0>
 8006652:	e14d      	b.n	80068f0 <scaraInitDuty+0x1630>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					}

				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 8006654:	2308      	movs	r3, #8
 8006656:	e179      	b.n	800694c <scaraInitDuty+0x168c>
				}
				// SCURVE
			} else if ( DUTY_TRAJECTORY_SCURVE == command.trajec_type) {
 8006658:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 800665c:	2b01      	cmp	r3, #1
 800665e:	f040 8141 	bne.w	80068e4 <scaraInitDuty+0x1624>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8006662:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006666:	2b01      	cmp	r3, #1
 8006668:	d159      	bne.n	800671e <scaraInitDuty+0x145e>
					for ( uint8_t i = 0; i < 4; i++) {
 800666a:	2300      	movs	r3, #0
 800666c:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 8006670:	e049      	b.n	8006706 <scaraInitDuty+0x1446>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8006672:	f897 2187 	ldrb.w	r2, [r7, #391]	; 0x187
 8006676:	496f      	ldr	r1, [pc, #444]	; (8006834 <scaraInitDuty+0x1574>)
 8006678:	4613      	mov	r3, r2
 800667a:	005b      	lsls	r3, r3, #1
 800667c:	4413      	add	r3, r2
 800667e:	01db      	lsls	r3, r3, #7
 8006680:	440b      	add	r3, r1
 8006682:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006686:	2201      	movs	r2, #1
 8006688:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 800668a:	f897 2187 	ldrb.w	r2, [r7, #391]	; 0x187
 800668e:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	; 0x1f0
 8006692:	4c68      	ldr	r4, [pc, #416]	; (8006834 <scaraInitDuty+0x1574>)
 8006694:	4613      	mov	r3, r2
 8006696:	005b      	lsls	r3, r3, #1
 8006698:	4413      	add	r3, r2
 800669a:	01db      	lsls	r3, r3, #7
 800669c:	4423      	add	r3, r4
 800669e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066a2:	e9c3 0100 	strd	r0, r1, [r3]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 80066a6:	f897 2187 	ldrb.w	r2, [r7, #391]	; 0x187
 80066aa:	4613      	mov	r3, r2
 80066ac:	005b      	lsls	r3, r3, #1
 80066ae:	4413      	add	r3, r2
 80066b0:	01db      	lsls	r3, r3, #7
 80066b2:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 80066b6:	4a5f      	ldr	r2, [pc, #380]	; (8006834 <scaraInitDuty+0x1574>)
 80066b8:	1898      	adds	r0, r3, r2
 80066ba:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 80066be:	4a5e      	ldr	r2, [pc, #376]	; (8006838 <scaraInitDuty+0x1578>)
 80066c0:	5cd1      	ldrb	r1, [r2, r3]
 80066c2:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 80066c6:	463a      	mov	r2, r7
 80066c8:	00db      	lsls	r3, r3, #3
 80066ca:	4413      	add	r3, r2
 80066cc:	ed93 7b00 	vldr	d7, [r3]
 80066d0:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 80066d4:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 80066d8:	eeb0 2a45 	vmov.f32	s4, s10
 80066dc:	eef0 2a65 	vmov.f32	s5, s11
 80066e0:	eeb0 1a46 	vmov.f32	s2, s12
 80066e4:	eef0 1a66 	vmov.f32	s3, s13
 80066e8:	2201      	movs	r2, #1
 80066ea:	eeb0 0a47 	vmov.f32	s0, s14
 80066ee:	eef0 0a67 	vmov.f32	s1, s15
 80066f2:	f001 f9e1 	bl	8007ab8 <scaraInitScurve>
 80066f6:	4603      	mov	r3, r0
 80066f8:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
					for ( uint8_t i = 0; i < 4; i++) {
 80066fc:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8006700:	3301      	adds	r3, #1
 8006702:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 8006706:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800670a:	2b03      	cmp	r3, #3
 800670c:	d9b1      	bls.n	8006672 <scaraInitDuty+0x13b2>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);

					}
					myDUTY.time_total = command.time_total;
 800670e:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 8006712:	4948      	ldr	r1, [pc, #288]	; (8006834 <scaraInitDuty+0x1574>)
 8006714:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8006718:	e9c1 2300 	strd	r2, r3, [r1]
 800671c:	e0e8      	b.n	80068f0 <scaraInitDuty+0x1630>
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 800671e:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006722:	2b00      	cmp	r3, #0
 8006724:	f040 80dc 	bne.w	80068e0 <scaraInitDuty+0x1620>
					for ( uint8_t i = 0; i < 4; i++) {
 8006728:	2300      	movs	r3, #0
 800672a:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 800672e:	e03b      	b.n	80067a8 <scaraInitDuty+0x14e8>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8006730:	f897 2186 	ldrb.w	r2, [r7, #390]	; 0x186
 8006734:	493f      	ldr	r1, [pc, #252]	; (8006834 <scaraInitDuty+0x1574>)
 8006736:	4613      	mov	r3, r2
 8006738:	005b      	lsls	r3, r3, #1
 800673a:	4413      	add	r3, r2
 800673c:	01db      	lsls	r3, r3, #7
 800673e:	440b      	add	r3, r1
 8006740:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006744:	2201      	movs	r2, #1
 8006746:	701a      	strb	r2, [r3, #0]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8006748:	f897 2186 	ldrb.w	r2, [r7, #390]	; 0x186
 800674c:	4613      	mov	r3, r2
 800674e:	005b      	lsls	r3, r3, #1
 8006750:	4413      	add	r3, r2
 8006752:	01db      	lsls	r3, r3, #7
 8006754:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8006758:	4a36      	ldr	r2, [pc, #216]	; (8006834 <scaraInitDuty+0x1574>)
 800675a:	1898      	adds	r0, r3, r2
 800675c:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 8006760:	4a35      	ldr	r2, [pc, #212]	; (8006838 <scaraInitDuty+0x1578>)
 8006762:	5cd1      	ldrb	r1, [r2, r3]
 8006764:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 8006768:	463a      	mov	r2, r7
 800676a:	00db      	lsls	r3, r3, #3
 800676c:	4413      	add	r3, r2
 800676e:	ed93 7b00 	vldr	d7, [r3]
 8006772:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 8006776:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 800677a:	eeb0 2a45 	vmov.f32	s4, s10
 800677e:	eef0 2a65 	vmov.f32	s5, s11
 8006782:	eeb0 1a46 	vmov.f32	s2, s12
 8006786:	eef0 1a66 	vmov.f32	s3, s13
 800678a:	2200      	movs	r2, #0
 800678c:	eeb0 0a47 	vmov.f32	s0, s14
 8006790:	eef0 0a67 	vmov.f32	s1, s15
 8006794:	f001 f990 	bl	8007ab8 <scaraInitScurve>
 8006798:	4603      	mov	r3, r0
 800679a:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
					for ( uint8_t i = 0; i < 4; i++) {
 800679e:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 80067a2:	3301      	adds	r3, #1
 80067a4:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 80067a8:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 80067ac:	2b03      	cmp	r3, #3
 80067ae:	d9bf      	bls.n	8006730 <scaraInitDuty+0x1470>
											q[i], DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
					}
					myDUTY.time_total = 0;
 80067b0:	4b20      	ldr	r3, [pc, #128]	; (8006834 <scaraInitDuty+0x1574>)
 80067b2:	f603 2138 	addw	r1, r3, #2616	; 0xa38
 80067b6:	f04f 0200 	mov.w	r2, #0
 80067ba:	f04f 0300 	mov.w	r3, #0
 80067be:	e9c1 2300 	strd	r2, r3, [r1]
					for ( uint8_t i = 0; i < 4; i++) {
 80067c2:	2300      	movs	r3, #0
 80067c4:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 80067c8:	e02b      	b.n	8006822 <scaraInitDuty+0x1562>
						if ( myDUTY.joint.trajectory[i].scurve.Tf > myDUTY.time_total) {
 80067ca:	f897 2185 	ldrb.w	r2, [r7, #389]	; 0x185
 80067ce:	4919      	ldr	r1, [pc, #100]	; (8006834 <scaraInitDuty+0x1574>)
 80067d0:	4613      	mov	r3, r2
 80067d2:	005b      	lsls	r3, r3, #1
 80067d4:	4413      	add	r3, r2
 80067d6:	01db      	lsls	r3, r3, #7
 80067d8:	440b      	add	r3, r1
 80067da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80067e2:	4b14      	ldr	r3, [pc, #80]	; (8006834 <scaraInitDuty+0x1574>)
 80067e4:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80067e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ec:	f7fa f994 	bl	8000b18 <__aeabi_dcmpgt>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d010      	beq.n	8006818 <scaraInitDuty+0x1558>
							myDUTY.time_total = myDUTY.joint.trajectory[i].scurve.Tf;
 80067f6:	f897 2185 	ldrb.w	r2, [r7, #389]	; 0x185
 80067fa:	490e      	ldr	r1, [pc, #56]	; (8006834 <scaraInitDuty+0x1574>)
 80067fc:	4613      	mov	r3, r2
 80067fe:	005b      	lsls	r3, r3, #1
 8006800:	4413      	add	r3, r2
 8006802:	01db      	lsls	r3, r3, #7
 8006804:	440b      	add	r3, r1
 8006806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800680a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680e:	4909      	ldr	r1, [pc, #36]	; (8006834 <scaraInitDuty+0x1574>)
 8006810:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8006814:	e9c1 2300 	strd	r2, r3, [r1]
					for ( uint8_t i = 0; i < 4; i++) {
 8006818:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 800681c:	3301      	adds	r3, #1
 800681e:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 8006822:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 8006826:	2b03      	cmp	r3, #3
 8006828:	d9cf      	bls.n	80067ca <scaraInitDuty+0x150a>
						}
					}
					for ( uint8_t i = 0; i < 4; i++) {
 800682a:	2300      	movs	r3, #0
 800682c:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 8006830:	e051      	b.n	80068d6 <scaraInitDuty+0x1616>
 8006832:	bf00      	nop
 8006834:	20004f30 	.word	0x20004f30
 8006838:	20000824 	.word	0x20000824
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 800683c:	f897 2184 	ldrb.w	r2, [r7, #388]	; 0x184
 8006840:	4946      	ldr	r1, [pc, #280]	; (800695c <scaraInitDuty+0x169c>)
 8006842:	4613      	mov	r3, r2
 8006844:	005b      	lsls	r3, r3, #1
 8006846:	4413      	add	r3, r2
 8006848:	01db      	lsls	r3, r3, #7
 800684a:	440b      	add	r3, r1
 800684c:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006850:	2201      	movs	r2, #1
 8006852:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].scurve.Tf = myDUTY.time_total;
 8006854:	f897 2184 	ldrb.w	r2, [r7, #388]	; 0x184
 8006858:	4b40      	ldr	r3, [pc, #256]	; (800695c <scaraInitDuty+0x169c>)
 800685a:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800685e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006862:	4c3e      	ldr	r4, [pc, #248]	; (800695c <scaraInitDuty+0x169c>)
 8006864:	4613      	mov	r3, r2
 8006866:	005b      	lsls	r3, r3, #1
 8006868:	4413      	add	r3, r2
 800686a:	01db      	lsls	r3, r3, #7
 800686c:	4423      	add	r3, r4
 800686e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006872:	e9c3 0100 	strd	r0, r1, [r3]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8006876:	f897 2184 	ldrb.w	r2, [r7, #388]	; 0x184
 800687a:	4613      	mov	r3, r2
 800687c:	005b      	lsls	r3, r3, #1
 800687e:	4413      	add	r3, r2
 8006880:	01db      	lsls	r3, r3, #7
 8006882:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8006886:	4a35      	ldr	r2, [pc, #212]	; (800695c <scaraInitDuty+0x169c>)
 8006888:	1898      	adds	r0, r3, r2
 800688a:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 800688e:	4a34      	ldr	r2, [pc, #208]	; (8006960 <scaraInitDuty+0x16a0>)
 8006890:	5cd1      	ldrb	r1, [r2, r3]
 8006892:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 8006896:	463a      	mov	r2, r7
 8006898:	00db      	lsls	r3, r3, #3
 800689a:	4413      	add	r3, r2
 800689c:	ed93 7b00 	vldr	d7, [r3]
 80068a0:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 80068a4:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 80068a8:	eeb0 2a45 	vmov.f32	s4, s10
 80068ac:	eef0 2a65 	vmov.f32	s5, s11
 80068b0:	eeb0 1a46 	vmov.f32	s2, s12
 80068b4:	eef0 1a66 	vmov.f32	s3, s13
 80068b8:	2201      	movs	r2, #1
 80068ba:	eeb0 0a47 	vmov.f32	s0, s14
 80068be:	eef0 0a67 	vmov.f32	s1, s15
 80068c2:	f001 f8f9 	bl	8007ab8 <scaraInitScurve>
 80068c6:	4603      	mov	r3, r0
 80068c8:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
					for ( uint8_t i = 0; i < 4; i++) {
 80068cc:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 80068d0:	3301      	adds	r3, #1
 80068d2:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 80068d6:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 80068da:	2b03      	cmp	r3, #3
 80068dc:	d9ae      	bls.n	800683c <scaraInitDuty+0x157c>
 80068de:	e007      	b.n	80068f0 <scaraInitDuty+0x1630>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					}

				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 80068e0:	2308      	movs	r3, #8
 80068e2:	e033      	b.n	800694c <scaraInitDuty+0x168c>
				}

			} else {
				return SCARA_STATUS_ERROR_TRAJECTORY;
 80068e4:	2305      	movs	r3, #5
 80068e6:	e031      	b.n	800694c <scaraInitDuty+0x168c>
			}

		} else {
			return SCARA_STATUS_ERROR_JOINT;
 80068e8:	2304      	movs	r3, #4
 80068ea:	e02f      	b.n	800694c <scaraInitDuty+0x168c>
		}

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 80068ec:	2302      	movs	r3, #2
 80068ee:	e02d      	b.n	800694c <scaraInitDuty+0x168c>
	}

	// Reset time and distance
	positionCurrent.t = 0;
 80068f0:	491c      	ldr	r1, [pc, #112]	; (8006964 <scaraInitDuty+0x16a4>)
 80068f2:	f04f 0200 	mov.w	r2, #0
 80068f6:	f04f 0300 	mov.w	r3, #0
 80068fa:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	positionCurrent.total_time = myDUTY.time_total;
 80068fe:	4b17      	ldr	r3, [pc, #92]	; (800695c <scaraInitDuty+0x169c>)
 8006900:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006908:	4916      	ldr	r1, [pc, #88]	; (8006964 <scaraInitDuty+0x16a4>)
 800690a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	positionNext.t = 0;
 800690e:	4916      	ldr	r1, [pc, #88]	; (8006968 <scaraInitDuty+0x16a8>)
 8006910:	f04f 0200 	mov.w	r2, #0
 8006914:	f04f 0300 	mov.w	r3, #0
 8006918:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	positionNext.total_time = myDUTY.time_total;
 800691c:	4b0f      	ldr	r3, [pc, #60]	; (800695c <scaraInitDuty+0x169c>)
 800691e:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006926:	4910      	ldr	r1, [pc, #64]	; (8006968 <scaraInitDuty+0x16a8>)
 8006928:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	positionTrue.t = 0;
 800692c:	490f      	ldr	r1, [pc, #60]	; (800696c <scaraInitDuty+0x16ac>)
 800692e:	f04f 0200 	mov.w	r2, #0
 8006932:	f04f 0300 	mov.w	r3, #0
 8006936:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	positionTrue.total_time = myDUTY.time_total;
 800693a:	4b08      	ldr	r3, [pc, #32]	; (800695c <scaraInitDuty+0x169c>)
 800693c:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006944:	4909      	ldr	r1, [pc, #36]	; (800696c <scaraInitDuty+0x16ac>)
 8006946:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	return SCARA_STATUS_OK;
 800694a:	2300      	movs	r3, #0
}
 800694c:	4618      	mov	r0, r3
 800694e:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
 8006952:	46bd      	mov	sp, r7
 8006954:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8006958:	b004      	add	sp, #16
 800695a:	4770      	bx	lr
 800695c:	20004f30 	.word	0x20004f30
 8006960:	20000824 	.word	0x20000824
 8006964:	20005af0 	.word	0x20005af0
 8006968:	20005c70 	.word	0x20005c70
 800696c:	20005bb0 	.word	0x20005bb0

08006970 <scaraInitLine>:

/* Compute straight line path parameters */
SCARA_StatusTypeDef	scaraInitLine		(Path_Line_TypeDef *line,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end) {
 8006970:	b082      	sub	sp, #8
 8006972:	b5b0      	push	{r4, r5, r7, lr}
 8006974:	b0b0      	sub	sp, #192	; 0xc0
 8006976:	af2e      	add	r7, sp, #184	; 0xb8
 8006978:	6078      	str	r0, [r7, #4]
 800697a:	f107 0118 	add.w	r1, r7, #24
 800697e:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE ==  kinematicInverse(&end, start)) {
 8006982:	f107 04d8 	add.w	r4, r7, #216	; 0xd8
 8006986:	4668      	mov	r0, sp
 8006988:	f107 0320 	add.w	r3, r7, #32
 800698c:	22b8      	movs	r2, #184	; 0xb8
 800698e:	4619      	mov	r1, r3
 8006990:	f00f f9be 	bl	8015d10 <memcpy>
 8006994:	f107 0318 	add.w	r3, r7, #24
 8006998:	cb0c      	ldmia	r3, {r2, r3}
 800699a:	4620      	mov	r0, r4
 800699c:	f7fd f884 	bl	8003aa8 <kinematicInverse>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d101      	bne.n	80069aa <scaraInitLine+0x3a>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80069a6:	2307      	movs	r3, #7
 80069a8:	e08e      	b.n	8006ac8 <scaraInitLine+0x158>
	}
	// Init line params
	line->x1 = end.x;
 80069aa:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80069ae:	6879      	ldr	r1, [r7, #4]
 80069b0:	e9c1 2302 	strd	r2, r3, [r1, #8]
	line->y1 = end.y;
 80069b4:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80069b8:	6879      	ldr	r1, [r7, #4]
 80069ba:	e9c1 2306 	strd	r2, r3, [r1, #24]
	line->z1 = end.z;
 80069be:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 80069c2:	6879      	ldr	r1, [r7, #4]
 80069c4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	line->x0 = start.x;
 80069c8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80069cc:	6879      	ldr	r1, [r7, #4]
 80069ce:	e9c1 2300 	strd	r2, r3, [r1]
	line->y0 = start.y;
 80069d2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80069d6:	6879      	ldr	r1, [r7, #4]
 80069d8:	e9c1 2304 	strd	r2, r3, [r1, #16]
	line->z0 = start.z;
 80069dc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80069e0:	6879      	ldr	r1, [r7, #4]
 80069e2:	e9c1 2308 	strd	r2, r3, [r1, #32]
	line->denta_x = end.x  -  start.x;
 80069e6:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 80069ea:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80069ee:	f7f9 fc4b 	bl	8000288 <__aeabi_dsub>
 80069f2:	4602      	mov	r2, r0
 80069f4:	460b      	mov	r3, r1
 80069f6:	6879      	ldr	r1, [r7, #4]
 80069f8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	line->denta_y = end.y  -  start.y;
 80069fc:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8006a00:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8006a04:	f7f9 fc40 	bl	8000288 <__aeabi_dsub>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	460b      	mov	r3, r1
 8006a0c:	6879      	ldr	r1, [r7, #4]
 8006a0e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	line->denta_z = end.z  -  start.z;
 8006a12:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 8006a16:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8006a1a:	f7f9 fc35 	bl	8000288 <__aeabi_dsub>
 8006a1e:	4602      	mov	r2, r0
 8006a20:	460b      	mov	r3, r1
 8006a22:	6879      	ldr	r1, [r7, #4]
 8006a24:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8006a34:	f7f9 fde0 	bl	80005f8 <__aeabi_dmul>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	460b      	mov	r3, r1
 8006a3c:	4614      	mov	r4, r2
 8006a3e:	461d      	mov	r5, r3
			       +(line->denta_y)*(line->denta_y)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8006a4c:	f7f9 fdd4 	bl	80005f8 <__aeabi_dmul>
 8006a50:	4602      	mov	r2, r0
 8006a52:	460b      	mov	r3, r1
 8006a54:	4620      	mov	r0, r4
 8006a56:	4629      	mov	r1, r5
 8006a58:	f7f9 fc18 	bl	800028c <__adddf3>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	460b      	mov	r3, r1
 8006a60:	4614      	mov	r4, r2
 8006a62:	461d      	mov	r5, r3
				   +(line->denta_z)*(line->denta_z));
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8006a70:	f7f9 fdc2 	bl	80005f8 <__aeabi_dmul>
 8006a74:	4602      	mov	r2, r0
 8006a76:	460b      	mov	r3, r1
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 8006a78:	4620      	mov	r0, r4
 8006a7a:	4629      	mov	r1, r5
 8006a7c:	f7f9 fc06 	bl	800028c <__adddf3>
 8006a80:	4602      	mov	r2, r0
 8006a82:	460b      	mov	r3, r1
 8006a84:	ec43 2b17 	vmov	d7, r2, r3
 8006a88:	eeb0 0a47 	vmov.f32	s0, s14
 8006a8c:	eef0 0a67 	vmov.f32	s1, s15
 8006a90:	f013 ff4e 	bl	801a930 <sqrt>
 8006a94:	eeb0 7a40 	vmov.f32	s14, s0
 8006a98:	eef0 7a60 	vmov.f32	s15, s1
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	line->x_current = line->x0;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa8:	6879      	ldr	r1, [r7, #4]
 8006aaa:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	line->y_current = line->y0;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006ab4:	6879      	ldr	r1, [r7, #4]
 8006ab6:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	line->z_current = line->z0;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006ac0:	6879      	ldr	r1, [r7, #4]
 8006ac2:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

	return SCARA_STATUS_OK;
 8006ac6:	2300      	movs	r3, #0
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3708      	adds	r7, #8
 8006acc:	46bd      	mov	sp, r7
 8006ace:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8006ad2:	b002      	add	sp, #8
 8006ad4:	4770      	bx	lr
	...

08006ad8 <scaraInitCircle>:
/* Compute circular path parameters */
SCARA_StatusTypeDef	scaraInitCircle		(Path_Circle_TypeDef *circle,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end,
										SCARA_PositionTypeDef center,
										int32_t dir){
 8006ad8:	b082      	sub	sp, #8
 8006ada:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006ade:	b0c3      	sub	sp, #268	; 0x10c
 8006ae0:	af2e      	add	r7, sp, #184	; 0xb8
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8006ae8:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE == kinematicInverse(&end, start) ) {
 8006aec:	f507 7698 	add.w	r6, r7, #304	; 0x130
 8006af0:	4668      	mov	r0, sp
 8006af2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006af6:	22b8      	movs	r2, #184	; 0xb8
 8006af8:	4619      	mov	r1, r3
 8006afa:	f00f f909 	bl	8015d10 <memcpy>
 8006afe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006b02:	cb0c      	ldmia	r3, {r2, r3}
 8006b04:	4630      	mov	r0, r6
 8006b06:	f7fc ffcf 	bl	8003aa8 <kinematicInverse>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d101      	bne.n	8006b14 <scaraInitCircle+0x3c>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8006b10:	2307      	movs	r3, #7
 8006b12:	e146      	b.n	8006da2 <scaraInitCircle+0x2ca>
	}

	if( 1 != dir && -1 != dir) {
 8006b14:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d006      	beq.n	8006b2a <scaraInitCircle+0x52>
 8006b1c:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8006b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b24:	d001      	beq.n	8006b2a <scaraInitCircle+0x52>
		return SCARA_STATUS_ERROR_PARA;// error direction param !!!
 8006b26:	2306      	movs	r3, #6
 8006b28:	e13b      	b.n	8006da2 <scaraInitCircle+0x2ca>
	}

	double v_x_start, v_y_start, v_x_stop, v_y_stop;
	double r1, r2, angle_start, angle_stop, delta_angle;
	v_x_start = start.x - center.x;
 8006b2a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8006b2e:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	; 0x238
 8006b32:	f7f9 fba9 	bl	8000288 <__aeabi_dsub>
 8006b36:	4602      	mov	r2, r0
 8006b38:	460b      	mov	r3, r1
 8006b3a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	v_y_start = start.y - center.y;
 8006b3e:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8006b42:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 8006b46:	f7f9 fb9f 	bl	8000288 <__aeabi_dsub>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	460b      	mov	r3, r1
 8006b4e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	v_x_stop  = end.x  - center.x;
 8006b52:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8006b56:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	; 0x238
 8006b5a:	f7f9 fb95 	bl	8000288 <__aeabi_dsub>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	460b      	mov	r3, r1
 8006b62:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	v_y_stop  = end.y  - center.y;
 8006b66:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8006b6a:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 8006b6e:	f7f9 fb8b 	bl	8000288 <__aeabi_dsub>
 8006b72:	4602      	mov	r2, r0
 8006b74:	460b      	mov	r3, r1
 8006b76:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	r1 = sqrt(v_x_start*v_x_start + v_y_start*v_y_start);
 8006b7a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006b7e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006b82:	f7f9 fd39 	bl	80005f8 <__aeabi_dmul>
 8006b86:	4602      	mov	r2, r0
 8006b88:	460b      	mov	r3, r1
 8006b8a:	4690      	mov	r8, r2
 8006b8c:	4699      	mov	r9, r3
 8006b8e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006b92:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006b96:	f7f9 fd2f 	bl	80005f8 <__aeabi_dmul>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	4640      	mov	r0, r8
 8006ba0:	4649      	mov	r1, r9
 8006ba2:	f7f9 fb73 	bl	800028c <__adddf3>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	460b      	mov	r3, r1
 8006baa:	ec43 2b17 	vmov	d7, r2, r3
 8006bae:	eeb0 0a47 	vmov.f32	s0, s14
 8006bb2:	eef0 0a67 	vmov.f32	s1, s15
 8006bb6:	f013 febb 	bl	801a930 <sqrt>
 8006bba:	ed87 0b08 	vstr	d0, [r7, #32]
	r2 = sqrt(v_x_stop*v_x_stop + v_y_stop*v_y_stop);
 8006bbe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006bc2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8006bc6:	f7f9 fd17 	bl	80005f8 <__aeabi_dmul>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	460b      	mov	r3, r1
 8006bce:	4690      	mov	r8, r2
 8006bd0:	4699      	mov	r9, r3
 8006bd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006bd6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006bda:	f7f9 fd0d 	bl	80005f8 <__aeabi_dmul>
 8006bde:	4602      	mov	r2, r0
 8006be0:	460b      	mov	r3, r1
 8006be2:	4640      	mov	r0, r8
 8006be4:	4649      	mov	r1, r9
 8006be6:	f7f9 fb51 	bl	800028c <__adddf3>
 8006bea:	4602      	mov	r2, r0
 8006bec:	460b      	mov	r3, r1
 8006bee:	ec43 2b17 	vmov	d7, r2, r3
 8006bf2:	eeb0 0a47 	vmov.f32	s0, s14
 8006bf6:	eef0 0a67 	vmov.f32	s1, s15
 8006bfa:	f013 fe99 	bl	801a930 <sqrt>
 8006bfe:	ed87 0b06 	vstr	d0, [r7, #24]

	if( 1.0 < fabs(r1 - r2)) {
 8006c02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c06:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006c0a:	f7f9 fb3d 	bl	8000288 <__aeabi_dsub>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	460b      	mov	r3, r1
 8006c12:	4614      	mov	r4, r2
 8006c14:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8006c18:	f04f 0200 	mov.w	r2, #0
 8006c1c:	4b68      	ldr	r3, [pc, #416]	; (8006dc0 <scaraInitCircle+0x2e8>)
 8006c1e:	4620      	mov	r0, r4
 8006c20:	4629      	mov	r1, r5
 8006c22:	f7f9 ff79 	bl	8000b18 <__aeabi_dcmpgt>
 8006c26:	4603      	mov	r3, r0
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d001      	beq.n	8006c30 <scaraInitCircle+0x158>
		return SCARA_STATUS_ERROR_PARA; //start & stop are not in a circle together !!
 8006c2c:	2306      	movs	r3, #6
 8006c2e:	e0b8      	b.n	8006da2 <scaraInitCircle+0x2ca>
	}

	if (r1 < 0.1 || r2 < 0.1) {
 8006c30:	a35f      	add	r3, pc, #380	; (adr r3, 8006db0 <scaraInitCircle+0x2d8>)
 8006c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c36:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006c3a:	f7f9 ff4f 	bl	8000adc <__aeabi_dcmplt>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d109      	bne.n	8006c58 <scaraInitCircle+0x180>
 8006c44:	a35a      	add	r3, pc, #360	; (adr r3, 8006db0 <scaraInitCircle+0x2d8>)
 8006c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c4a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006c4e:	f7f9 ff45 	bl	8000adc <__aeabi_dcmplt>
 8006c52:	4603      	mov	r3, r0
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d001      	beq.n	8006c5c <scaraInitCircle+0x184>
		return SCARA_STATUS_ERROR_PARA; //start and center almost in the same phace, radius = 0 !!
 8006c58:	2306      	movs	r3, #6
 8006c5a:	e0a2      	b.n	8006da2 <scaraInitCircle+0x2ca>
	}

	angle_start = atan2(v_y_start, v_x_start);
 8006c5c:	ed97 1b10 	vldr	d1, [r7, #64]	; 0x40
 8006c60:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8006c64:	f013 fe62 	bl	801a92c <atan2>
 8006c68:	ed87 0b04 	vstr	d0, [r7, #16]
	angle_stop  = atan2(v_y_stop, v_x_stop);
 8006c6c:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 8006c70:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8006c74:	f013 fe5a 	bl	801a92c <atan2>
 8006c78:	ed87 0b02 	vstr	d0, [r7, #8]
	delta_angle = angle_stop - angle_start;
 8006c7c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006c80:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006c84:	f7f9 fb00 	bl	8000288 <__aeabi_dsub>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	460b      	mov	r3, r1
 8006c8c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	if ( 0 > delta_angle) {
 8006c90:	f04f 0200 	mov.w	r2, #0
 8006c94:	f04f 0300 	mov.w	r3, #0
 8006c98:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006c9c:	f7f9 ff1e 	bl	8000adc <__aeabi_dcmplt>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d00a      	beq.n	8006cbc <scaraInitCircle+0x1e4>
		delta_angle += 2*PI;
 8006ca6:	a344      	add	r3, pc, #272	; (adr r3, 8006db8 <scaraInitCircle+0x2e0>)
 8006ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cac:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006cb0:	f7f9 faec 	bl	800028c <__adddf3>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	460b      	mov	r3, r1
 8006cb8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	} // atan2 range : -PI --> PI

	if ( 0 > dir) {
 8006cbc:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	da0a      	bge.n	8006cda <scaraInitCircle+0x202>
		delta_angle = 2*PI - delta_angle;
 8006cc4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006cc8:	a13b      	add	r1, pc, #236	; (adr r1, 8006db8 <scaraInitCircle+0x2e0>)
 8006cca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cce:	f7f9 fadb 	bl	8000288 <__aeabi_dsub>
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	460b      	mov	r3, r1
 8006cd6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	}
	// Init circle params
	circle->dir = dir;
 8006cda:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8006cde:	b25a      	sxtb	r2, r3
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	701a      	strb	r2, [r3, #0]
	circle->radius = r1;
 8006ce4:	6879      	ldr	r1, [r7, #4]
 8006ce6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006cea:	e9c1 2302 	strd	r2, r3, [r1, #8]
	circle->angle_start = angle_start;
 8006cee:	6879      	ldr	r1, [r7, #4]
 8006cf0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006cf4:	e9c1 2304 	strd	r2, r3, [r1, #16]
	circle->angle_stop  = angle_stop;
 8006cf8:	6879      	ldr	r1, [r7, #4]
 8006cfa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006cfe:	e9c1 2306 	strd	r2, r3, [r1, #24]
	circle->total_angle = delta_angle;
 8006d02:	6879      	ldr	r1, [r7, #4]
 8006d04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006d08:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	circle->total_s = delta_angle*r1;
 8006d0c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006d10:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006d14:	f7f9 fc70 	bl	80005f8 <__aeabi_dmul>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	6879      	ldr	r1, [r7, #4]
 8006d1e:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	circle->x0 = start.x;
 8006d22:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8006d26:	6879      	ldr	r1, [r7, #4]
 8006d28:	e9c1 2308 	strd	r2, r3, [r1, #32]
	circle->y0 = start.y;
 8006d2c:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8006d30:	6879      	ldr	r1, [r7, #4]
 8006d32:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	circle->x1 = end.x;
 8006d36:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8006d3a:	6879      	ldr	r1, [r7, #4]
 8006d3c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	circle->y1 = end.y;
 8006d40:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 8006d44:	6879      	ldr	r1, [r7, #4]
 8006d46:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	circle->xi = center.x;
 8006d4a:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	; 0x238
 8006d4e:	6879      	ldr	r1, [r7, #4]
 8006d50:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	circle->yi = center.y;
 8006d54:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 8006d58:	6879      	ldr	r1, [r7, #4]
 8006d5a:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	circle->z0 = start.z;
 8006d5e:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8006d62:	6879      	ldr	r1, [r7, #4]
 8006d64:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	circle->z1 = start.z;
 8006d68:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8006d6c:	6879      	ldr	r1, [r7, #4]
 8006d6e:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	circle->zi = start.z;
 8006d72:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8006d76:	6879      	ldr	r1, [r7, #4]
 8006d78:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	circle->x_current = circle->x0;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d82:	6879      	ldr	r1, [r7, #4]
 8006d84:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	circle->y_current = circle->y0;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8006d8e:	6879      	ldr	r1, [r7, #4]
 8006d90:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
	circle->z_current = circle->z0;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8006d9a:	6879      	ldr	r1, [r7, #4]
 8006d9c:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88

	return SCARA_STATUS_OK;
 8006da0:	2300      	movs	r3, #0
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3754      	adds	r7, #84	; 0x54
 8006da6:	46bd      	mov	sp, r7
 8006da8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006dac:	b002      	add	sp, #8
 8006dae:	4770      	bx	lr
 8006db0:	9999999a 	.word	0x9999999a
 8006db4:	3fb99999 	.word	0x3fb99999
 8006db8:	60000000 	.word	0x60000000
 8006dbc:	401921fb 	.word	0x401921fb
 8006dc0:	3ff00000 	.word	0x3ff00000
 8006dc4:	00000000 	.word	0x00000000

08006dc8 <scaraInitLinear>:

SCARA_StatusTypeDef scaraInitLinear(Trajectory_Linear_TypeDef *linear, Trajectory_TargetTypeDef target, double total_s,
									ModeInitTypeDef modeinit, double time)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b086      	sub	sp, #24
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6178      	str	r0, [r7, #20]
 8006dd0:	460b      	mov	r3, r1
 8006dd2:	ed87 0b02 	vstr	d0, [r7, #8]
 8006dd6:	ed87 1b00 	vstr	d1, [r7]
 8006dda:	74fb      	strb	r3, [r7, #19]
 8006ddc:	4613      	mov	r3, r2
 8006dde:	74bb      	strb	r3, [r7, #18]

	if(target == TRAJECTORY_3D){
 8006de0:	7cfb      	ldrb	r3, [r7, #19]
 8006de2:	2b04      	cmp	r3, #4
 8006de4:	d004      	beq.n	8006df0 <scaraInitLinear+0x28>

	}else if(target == TRAJECTORY_ROLL){
 8006de6:	7cfb      	ldrb	r3, [r7, #19]
 8006de8:	2b05      	cmp	r3, #5
 8006dea:	d001      	beq.n	8006df0 <scaraInitLinear+0x28>

	}else{
		return SCARA_STATUS_ERROR_PARA;
 8006dec:	2306      	movs	r3, #6
 8006dee:	e02e      	b.n	8006e4e <scaraInitLinear+0x86>
	}

	if(modeinit == DUTY_MODE_INIT_QT){
 8006df0:	7cbb      	ldrb	r3, [r7, #18]
 8006df2:	2b03      	cmp	r3, #3
 8006df4:	d125      	bne.n	8006e42 <scaraInitLinear+0x7a>
		linear->constant_v = total_s / time;
 8006df6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dfa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006dfe:	f7f9 fd25 	bl	800084c <__aeabi_ddiv>
 8006e02:	4602      	mov	r2, r0
 8006e04:	460b      	mov	r3, r1
 8006e06:	6979      	ldr	r1, [r7, #20]
 8006e08:	e9c1 2302 	strd	r2, r3, [r1, #8]
		linear->number_of_sample = ceilf(time / T_SAMPLING); // ceiling
 8006e0c:	a312      	add	r3, pc, #72	; (adr r3, 8006e58 <scaraInitLinear+0x90>)
 8006e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e16:	f7f9 fd19 	bl	800084c <__aeabi_ddiv>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	4610      	mov	r0, r2
 8006e20:	4619      	mov	r1, r3
 8006e22:	f7f9 fee1 	bl	8000be8 <__aeabi_d2f>
 8006e26:	4603      	mov	r3, r0
 8006e28:	ee00 3a10 	vmov	s0, r3
 8006e2c:	f013 fd3c 	bl	801a8a8 <ceilf>
 8006e30:	eef0 7a40 	vmov.f32	s15, s0
 8006e34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e38:	ee17 2a90 	vmov	r2, s15
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	621a      	str	r2, [r3, #32]
 8006e40:	e004      	b.n	8006e4c <scaraInitLinear+0x84>
	}else if(modeinit == DUTY_MODE_INIT_QV){
 8006e42:	7cbb      	ldrb	r3, [r7, #18]
 8006e44:	2b02      	cmp	r3, #2
 8006e46:	d001      	beq.n	8006e4c <scaraInitLinear+0x84>

	}else{
		return SCARA_STATUS_ERROR_PARA;
 8006e48:	2306      	movs	r3, #6
 8006e4a:	e000      	b.n	8006e4e <scaraInitLinear+0x86>
	}

	return SCARA_STATUS_OK;
 8006e4c:	2300      	movs	r3, #0
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3718      	adds	r7, #24
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	40000000 	.word	0x40000000
 8006e5c:	3f847ae1 	.word	0x3f847ae1

08006e60 <scaraInitLSPB1>:
SCARA_StatusTypeDef	scaraInitLSPB1		(Trajectory_LSPB_TypeDef *lspb,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double additional_factor){
 8006e60:	b5b0      	push	{r4, r5, r7, lr}
 8006e62:	b096      	sub	sp, #88	; 0x58
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	61f8      	str	r0, [r7, #28]
 8006e68:	460b      	mov	r3, r1
 8006e6a:	ed87 0b04 	vstr	d0, [r7, #16]
 8006e6e:	ed87 1b02 	vstr	d1, [r7, #8]
 8006e72:	ed87 2b00 	vstr	d2, [r7]
 8006e76:	76fb      	strb	r3, [r7, #27]
 8006e78:	4613      	mov	r3, r2
 8006e7a:	76bb      	strb	r3, [r7, #26]
	double v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	uint32_t no_sample;
	int8_t dir;
	if(target == TRAJECTORY_3D){
 8006e7c:	7efb      	ldrb	r3, [r7, #27]
 8006e7e:	2b04      	cmp	r3, #4
 8006e80:	d12c      	bne.n	8006edc <scaraInitLSPB1+0x7c>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8006e82:	7ebb      	ldrb	r3, [r7, #26]
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d10f      	bne.n	8006ea8 <scaraInitLSPB1+0x48>
			v_design = V_MOVE_MAX*v_factor;
 8006e88:	f04f 0200 	mov.w	r2, #0
 8006e8c:	4b72      	ldr	r3, [pc, #456]	; (8007058 <scaraInitLSPB1+0x1f8>)
 8006e8e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006e92:	f7f9 fbb1 	bl	80005f8 <__aeabi_dmul>
 8006e96:	4602      	mov	r2, r0
 8006e98:	460b      	mov	r3, r1
 8006e9a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			tf = additional_factor;
 8006e9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ea2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8006ea6:	e01b      	b.n	8006ee0 <scaraInitLSPB1+0x80>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
 8006ea8:	7ebb      	ldrb	r3, [r7, #26]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d118      	bne.n	8006ee0 <scaraInitLSPB1+0x80>
			a_design = A_MOVE_MAX*additional_factor;
 8006eae:	f04f 0200 	mov.w	r2, #0
 8006eb2:	4b6a      	ldr	r3, [pc, #424]	; (800705c <scaraInitLSPB1+0x1fc>)
 8006eb4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006eb8:	f7f9 fb9e 	bl	80005f8 <__aeabi_dmul>
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	460b      	mov	r3, r1
 8006ec0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			v_design = V_MOVE_MAX*v_factor;
 8006ec4:	f04f 0200 	mov.w	r2, #0
 8006ec8:	4b63      	ldr	r3, [pc, #396]	; (8007058 <scaraInitLSPB1+0x1f8>)
 8006eca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006ece:	f7f9 fb93 	bl	80005f8 <__aeabi_dmul>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	460b      	mov	r3, r1
 8006ed6:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8006eda:	e001      	b.n	8006ee0 <scaraInitLSPB1+0x80>
		}
	}else{
		return SCARA_STATUS_ERROR_PARA;
 8006edc:	2306      	movs	r3, #6
 8006ede:	e205      	b.n	80072ec <scaraInitLSPB1+0x48c>
	}
	if(modeinit == DUTY_MODE_INIT_QVT){
 8006ee0:	7ebb      	ldrb	r3, [r7, #26]
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	f040 80c2 	bne.w	800706c <scaraInitLSPB1+0x20c>
		//check if time valid or not
		if(tf < 0.1 && v_design > 7.5){
 8006ee8:	a355      	add	r3, pc, #340	; (adr r3, 8007040 <scaraInitLSPB1+0x1e0>)
 8006eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eee:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8006ef2:	f7f9 fdf3 	bl	8000adc <__aeabi_dcmplt>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d01d      	beq.n	8006f38 <scaraInitLSPB1+0xd8>
 8006efc:	f04f 0200 	mov.w	r2, #0
 8006f00:	4b57      	ldr	r3, [pc, #348]	; (8007060 <scaraInitLSPB1+0x200>)
 8006f02:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006f06:	f7f9 fe07 	bl	8000b18 <__aeabi_dcmpgt>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d013      	beq.n	8006f38 <scaraInitLSPB1+0xd8>
			tf = 1.5*total_s/v_design;
 8006f10:	f04f 0200 	mov.w	r2, #0
 8006f14:	4b53      	ldr	r3, [pc, #332]	; (8007064 <scaraInitLSPB1+0x204>)
 8006f16:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006f1a:	f7f9 fb6d 	bl	80005f8 <__aeabi_dmul>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	460b      	mov	r3, r1
 8006f22:	4610      	mov	r0, r2
 8006f24:	4619      	mov	r1, r3
 8006f26:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006f2a:	f7f9 fc8f 	bl	800084c <__aeabi_ddiv>
 8006f2e:	4602      	mov	r2, r0
 8006f30:	460b      	mov	r3, r1
 8006f32:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8006f36:	e05c      	b.n	8006ff2 <scaraInitLSPB1+0x192>
		}else if(v_design < 0.0001 && tf > 0.15){ //check if velocity valid or not
 8006f38:	a343      	add	r3, pc, #268	; (adr r3, 8007048 <scaraInitLSPB1+0x1e8>)
 8006f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f3e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006f42:	f7f9 fdcb 	bl	8000adc <__aeabi_dcmplt>
 8006f46:	4603      	mov	r3, r0
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d01d      	beq.n	8006f88 <scaraInitLSPB1+0x128>
 8006f4c:	a340      	add	r3, pc, #256	; (adr r3, 8007050 <scaraInitLSPB1+0x1f0>)
 8006f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f52:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8006f56:	f7f9 fddf 	bl	8000b18 <__aeabi_dcmpgt>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d013      	beq.n	8006f88 <scaraInitLSPB1+0x128>
			v_design = 1.5*total_s/tf;
 8006f60:	f04f 0200 	mov.w	r2, #0
 8006f64:	4b3f      	ldr	r3, [pc, #252]	; (8007064 <scaraInitLSPB1+0x204>)
 8006f66:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006f6a:	f7f9 fb45 	bl	80005f8 <__aeabi_dmul>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	460b      	mov	r3, r1
 8006f72:	4610      	mov	r0, r2
 8006f74:	4619      	mov	r1, r3
 8006f76:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006f7a:	f7f9 fc67 	bl	800084c <__aeabi_ddiv>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	460b      	mov	r3, r1
 8006f82:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8006f86:	e034      	b.n	8006ff2 <scaraInitLSPB1+0x192>
		}else{
			v_lim = total_s/tf;
 8006f88:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006f8c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006f90:	f7f9 fc5c 	bl	800084c <__aeabi_ddiv>
 8006f94:	4602      	mov	r2, r0
 8006f96:	460b      	mov	r3, r1
 8006f98:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			if(v_design < 1.2*v_lim){
 8006f9c:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8006fa0:	4b31      	ldr	r3, [pc, #196]	; (8007068 <scaraInitLSPB1+0x208>)
 8006fa2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006fa6:	f7f9 fb27 	bl	80005f8 <__aeabi_dmul>
 8006faa:	4602      	mov	r2, r0
 8006fac:	460b      	mov	r3, r1
 8006fae:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006fb2:	f7f9 fd93 	bl	8000adc <__aeabi_dcmplt>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d001      	beq.n	8006fc0 <scaraInitLSPB1+0x160>
				return SCARA_STATUS_ERROR_OVER_VELOC;
 8006fbc:	2309      	movs	r3, #9
 8006fbe:	e195      	b.n	80072ec <scaraInitLSPB1+0x48c>
			}else if(v_design > 2*v_lim){
 8006fc0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	460b      	mov	r3, r1
 8006fc8:	f7f9 f960 	bl	800028c <__adddf3>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	460b      	mov	r3, r1
 8006fd0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006fd4:	f7f9 fda0 	bl	8000b18 <__aeabi_dcmpgt>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d009      	beq.n	8006ff2 <scaraInitLSPB1+0x192>
				v_design = 2*v_lim;
 8006fde:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	460b      	mov	r3, r1
 8006fe6:	f7f9 f951 	bl	800028c <__adddf3>
 8006fea:	4602      	mov	r2, r0
 8006fec:	460b      	mov	r3, r1
 8006fee:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			}else{

			}
		}
		ta = tf - total_s/v_design;
 8006ff2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006ff6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006ffa:	f7f9 fc27 	bl	800084c <__aeabi_ddiv>
 8006ffe:	4602      	mov	r2, r0
 8007000:	460b      	mov	r3, r1
 8007002:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007006:	f7f9 f93f 	bl	8000288 <__aeabi_dsub>
 800700a:	4602      	mov	r2, r0
 800700c:	460b      	mov	r3, r1
 800700e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		a_design = v_design/ta;
 8007012:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007016:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800701a:	f7f9 fc17 	bl	800084c <__aeabi_ddiv>
 800701e:	4602      	mov	r2, r0
 8007020:	460b      	mov	r3, r1
 8007022:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		td = tf - ta;
 8007026:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800702a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800702e:	f7f9 f92b 	bl	8000288 <__aeabi_dsub>
 8007032:	4602      	mov	r2, r0
 8007034:	460b      	mov	r3, r1
 8007036:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 800703a:	e0f1      	b.n	8007220 <scaraInitLSPB1+0x3c0>
 800703c:	f3af 8000 	nop.w
 8007040:	9999999a 	.word	0x9999999a
 8007044:	3fb99999 	.word	0x3fb99999
 8007048:	eb1c432d 	.word	0xeb1c432d
 800704c:	3f1a36e2 	.word	0x3f1a36e2
 8007050:	33333333 	.word	0x33333333
 8007054:	3fc33333 	.word	0x3fc33333
 8007058:	40877000 	.word	0x40877000
 800705c:	407f4000 	.word	0x407f4000
 8007060:	401e0000 	.word	0x401e0000
 8007064:	3ff80000 	.word	0x3ff80000
 8007068:	3ff33333 	.word	0x3ff33333

	}else if(modeinit == DUTY_MODE_INIT_QVA){
 800706c:	7ebb      	ldrb	r3, [r7, #26]
 800706e:	2b00      	cmp	r3, #0
 8007070:	f040 80d6 	bne.w	8007220 <scaraInitLSPB1+0x3c0>
		//check qva condition
		if(total_s*a_design < v_design*v_design){ //condition for ta smaller than td
 8007074:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007078:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800707c:	f7f9 fabc 	bl	80005f8 <__aeabi_dmul>
 8007080:	4602      	mov	r2, r0
 8007082:	460b      	mov	r3, r1
 8007084:	4614      	mov	r4, r2
 8007086:	461d      	mov	r5, r3
 8007088:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800708c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007090:	f7f9 fab2 	bl	80005f8 <__aeabi_dmul>
 8007094:	4602      	mov	r2, r0
 8007096:	460b      	mov	r3, r1
 8007098:	4620      	mov	r0, r4
 800709a:	4629      	mov	r1, r5
 800709c:	f7f9 fd1e 	bl	8000adc <__aeabi_dcmplt>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	f000 8088 	beq.w	80071b8 <scaraInitLSPB1+0x358>
			if(total_s/v_design < 0.8){ //td too small
 80070a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80070ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80070b0:	f7f9 fbcc 	bl	800084c <__aeabi_ddiv>
 80070b4:	4602      	mov	r2, r0
 80070b6:	460b      	mov	r3, r1
 80070b8:	4610      	mov	r0, r2
 80070ba:	4619      	mov	r1, r3
 80070bc:	a392      	add	r3, pc, #584	; (adr r3, 8007308 <scaraInitLSPB1+0x4a8>)
 80070be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c2:	f7f9 fd0b 	bl	8000adc <__aeabi_dcmplt>
 80070c6:	4603      	mov	r3, r0
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d00a      	beq.n	80070e2 <scaraInitLSPB1+0x282>
				//recalculate v_design
				v_design = 0.8*total_s;
 80070cc:	a38e      	add	r3, pc, #568	; (adr r3, 8007308 <scaraInitLSPB1+0x4a8>)
 80070ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80070d6:	f7f9 fa8f 	bl	80005f8 <__aeabi_dmul>
 80070da:	4602      	mov	r2, r0
 80070dc:	460b      	mov	r3, r1
 80070de:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			}
			if(v_design/a_design < 0.5){ //ta is too small
 80070e2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80070e6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80070ea:	f7f9 fbaf 	bl	800084c <__aeabi_ddiv>
 80070ee:	4602      	mov	r2, r0
 80070f0:	460b      	mov	r3, r1
 80070f2:	4610      	mov	r0, r2
 80070f4:	4619      	mov	r1, r3
 80070f6:	f04f 0200 	mov.w	r2, #0
 80070fa:	4b81      	ldr	r3, [pc, #516]	; (8007300 <scaraInitLSPB1+0x4a0>)
 80070fc:	f7f9 fcee 	bl	8000adc <__aeabi_dcmplt>
 8007100:	4603      	mov	r3, r0
 8007102:	2b00      	cmp	r3, #0
 8007104:	d00a      	beq.n	800711c <scaraInitLSPB1+0x2bc>
				//recalculate a_design
				a_design = v_design/0.5;
 8007106:	f04f 0200 	mov.w	r2, #0
 800710a:	4b7d      	ldr	r3, [pc, #500]	; (8007300 <scaraInitLSPB1+0x4a0>)
 800710c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007110:	f7f9 fb9c 	bl	800084c <__aeabi_ddiv>
 8007114:	4602      	mov	r2, r0
 8007116:	460b      	mov	r3, r1
 8007118:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			}
			ta = v_design/a_design;
 800711c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007120:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007124:	f7f9 fb92 	bl	800084c <__aeabi_ddiv>
 8007128:	4602      	mov	r2, r0
 800712a:	460b      	mov	r3, r1
 800712c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			td = total_s/v_design;
 8007130:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007134:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007138:	f7f9 fb88 	bl	800084c <__aeabi_ddiv>
 800713c:	4602      	mov	r2, r0
 800713e:	460b      	mov	r3, r1
 8007140:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			tf = ta + td;
 8007144:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007148:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800714c:	f7f9 f89e 	bl	800028c <__adddf3>
 8007150:	4602      	mov	r2, r0
 8007152:	460b      	mov	r3, r1
 8007154:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			if(v_design/a_design < 1){ //ta is too small
 8007158:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800715c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007160:	f7f9 fb74 	bl	800084c <__aeabi_ddiv>
 8007164:	4602      	mov	r2, r0
 8007166:	460b      	mov	r3, r1
 8007168:	4610      	mov	r0, r2
 800716a:	4619      	mov	r1, r3
 800716c:	f04f 0200 	mov.w	r2, #0
 8007170:	4b64      	ldr	r3, [pc, #400]	; (8007304 <scaraInitLSPB1+0x4a4>)
 8007172:	f7f9 fcb3 	bl	8000adc <__aeabi_dcmplt>
 8007176:	4603      	mov	r3, r0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d051      	beq.n	8007220 <scaraInitLSPB1+0x3c0>
				//recalculate a_design
				a_design = v_design;
 800717c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007180:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
				ta = 1;
 8007184:	f04f 0200 	mov.w	r2, #0
 8007188:	4b5e      	ldr	r3, [pc, #376]	; (8007304 <scaraInitLSPB1+0x4a4>)
 800718a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
				td = total_s/v_design;
 800718e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007192:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007196:	f7f9 fb59 	bl	800084c <__aeabi_ddiv>
 800719a:	4602      	mov	r2, r0
 800719c:	460b      	mov	r3, r1
 800719e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
				tf = ta + td;
 80071a2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80071a6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80071aa:	f7f9 f86f 	bl	800028c <__adddf3>
 80071ae:	4602      	mov	r2, r0
 80071b0:	460b      	mov	r3, r1
 80071b2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80071b6:	e033      	b.n	8007220 <scaraInitLSPB1+0x3c0>
			}

		}else{
			tf = 2*total_s/v_design;
 80071b8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80071bc:	4602      	mov	r2, r0
 80071be:	460b      	mov	r3, r1
 80071c0:	f7f9 f864 	bl	800028c <__adddf3>
 80071c4:	4602      	mov	r2, r0
 80071c6:	460b      	mov	r3, r1
 80071c8:	4610      	mov	r0, r2
 80071ca:	4619      	mov	r1, r3
 80071cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80071d0:	f7f9 fb3c 	bl	800084c <__aeabi_ddiv>
 80071d4:	4602      	mov	r2, r0
 80071d6:	460b      	mov	r3, r1
 80071d8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			ta = tf/2;
 80071dc:	f04f 0200 	mov.w	r2, #0
 80071e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80071e4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80071e8:	f7f9 fb30 	bl	800084c <__aeabi_ddiv>
 80071ec:	4602      	mov	r2, r0
 80071ee:	460b      	mov	r3, r1
 80071f0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			td = tf/2;
 80071f4:	f04f 0200 	mov.w	r2, #0
 80071f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80071fc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007200:	f7f9 fb24 	bl	800084c <__aeabi_ddiv>
 8007204:	4602      	mov	r2, r0
 8007206:	460b      	mov	r3, r1
 8007208:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			a_design = v_design/ta;
 800720c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007210:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007214:	f7f9 fb1a 	bl	800084c <__aeabi_ddiv>
 8007218:	4602      	mov	r2, r0
 800721a:	460b      	mov	r3, r1
 800721c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		}
	}
	no_sample = ceilf(tf / T_SAMPLING); // ceiling
 8007220:	a335      	add	r3, pc, #212	; (adr r3, 80072f8 <scaraInitLSPB1+0x498>)
 8007222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007226:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800722a:	f7f9 fb0f 	bl	800084c <__aeabi_ddiv>
 800722e:	4602      	mov	r2, r0
 8007230:	460b      	mov	r3, r1
 8007232:	4610      	mov	r0, r2
 8007234:	4619      	mov	r1, r3
 8007236:	f7f9 fcd7 	bl	8000be8 <__aeabi_d2f>
 800723a:	4603      	mov	r3, r0
 800723c:	ee00 3a10 	vmov	s0, r3
 8007240:	f013 fb32 	bl	801a8a8 <ceilf>
 8007244:	eef0 7a40 	vmov.f32	s15, s0
 8007248:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800724c:	ee17 3a90 	vmov	r3, s15
 8007250:	627b      	str	r3, [r7, #36]	; 0x24
	 // Init lspb params
	 lspb->dir= dir;
 8007252:	69fb      	ldr	r3, [r7, #28]
 8007254:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8007258:	701a      	strb	r2, [r3, #0]
	 lspb->s0 = 0;
 800725a:	69f9      	ldr	r1, [r7, #28]
 800725c:	f04f 0200 	mov.w	r2, #0
 8007260:	f04f 0300 	mov.w	r3, #0
 8007264:	e9c1 2302 	strd	r2, r3, [r1, #8]
	 lspb->s1 = total_s;
 8007268:	69f9      	ldr	r1, [r7, #28]
 800726a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800726e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	 lspb->Ta = ta;
 8007272:	69f9      	ldr	r1, [r7, #28]
 8007274:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007278:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	 lspb->Td = td;
 800727c:	69f9      	ldr	r1, [r7, #28]
 800727e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007282:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	 lspb->Tf = tf;
 8007286:	69f9      	ldr	r1, [r7, #28]
 8007288:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800728c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	 lspb->a_design = a_design;
 8007290:	69f9      	ldr	r1, [r7, #28]
 8007292:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007296:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	 lspb->v_design = v_design;
 800729a:	69f9      	ldr	r1, [r7, #28]
 800729c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80072a0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	 lspb->v_lim = v_design;
 80072a4:	69f9      	ldr	r1, [r7, #28]
 80072a6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80072aa:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	 lspb->v0 = 0;
 80072ae:	69f9      	ldr	r1, [r7, #28]
 80072b0:	f04f 0200 	mov.w	r2, #0
 80072b4:	f04f 0300 	mov.w	r3, #0
 80072b8:	e9c1 2306 	strd	r2, r3, [r1, #24]
	 lspb->v1 = 0;
 80072bc:	69f9      	ldr	r1, [r7, #28]
 80072be:	f04f 0200 	mov.w	r2, #0
 80072c2:	f04f 0300 	mov.w	r3, #0
 80072c6:	e9c1 2308 	strd	r2, r3, [r1, #32]
	 lspb->num_of_sampling = no_sample;
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072ce:	659a      	str	r2, [r3, #88]	; 0x58
	 lspb->total_s = lspb->s1 - lspb->s0;
 80072d0:	69fb      	ldr	r3, [r7, #28]
 80072d2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80072d6:	69fb      	ldr	r3, [r7, #28]
 80072d8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80072dc:	f7f8 ffd4 	bl	8000288 <__aeabi_dsub>
 80072e0:	4602      	mov	r2, r0
 80072e2:	460b      	mov	r3, r1
 80072e4:	69f9      	ldr	r1, [r7, #28]
 80072e6:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

	 return SCARA_STATUS_OK;
 80072ea:	2300      	movs	r3, #0
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3758      	adds	r7, #88	; 0x58
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bdb0      	pop	{r4, r5, r7, pc}
 80072f4:	f3af 8000 	nop.w
 80072f8:	40000000 	.word	0x40000000
 80072fc:	3f847ae1 	.word	0x3f847ae1
 8007300:	3fe00000 	.word	0x3fe00000
 8007304:	3ff00000 	.word	0x3ff00000
 8007308:	9999999a 	.word	0x9999999a
 800730c:	3fe99999 	.word	0x3fe99999

08007310 <scaraInitLSPB>:
SCARA_StatusTypeDef	scaraInitLSPB		(Trajectory_LSPB_TypeDef *lspb,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double a_factor) {
 8007310:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007314:	b0ac      	sub	sp, #176	; 0xb0
 8007316:	af00      	add	r7, sp, #0
 8007318:	62f8      	str	r0, [r7, #44]	; 0x2c
 800731a:	460b      	mov	r3, r1
 800731c:	ed87 0b08 	vstr	d0, [r7, #32]
 8007320:	ed87 1b06 	vstr	d1, [r7, #24]
 8007324:	ed87 2b04 	vstr	d2, [r7, #16]
 8007328:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800732c:	4613      	mov	r3, r2
 800732e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	 double v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	 uint32_t	no_sample;
	 int8_t	dir;

	 if ( TRAJECTORY_3D == target) {
 8007332:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007336:	2b04      	cmp	r3, #4
 8007338:	d118      	bne.n	800736c <scaraInitLSPB+0x5c>
		 v_design = V_DESIGN_3D*v_factor;
 800733a:	f20f 7350 	addw	r3, pc, #1872	; 0x750
 800733e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007342:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007346:	f7f9 f957 	bl	80005f8 <__aeabi_dmul>
 800734a:	4602      	mov	r2, r0
 800734c:	460b      	mov	r3, r1
 800734e:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_3D*a_factor;
 8007352:	f20f 7338 	addw	r3, pc, #1848	; 0x738
 8007356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800735a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800735e:	f7f9 f94b 	bl	80005f8 <__aeabi_dmul>
 8007362:	4602      	mov	r2, r0
 8007364:	460b      	mov	r3, r1
 8007366:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 800736a:	e092      	b.n	8007492 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_ROLL == target) {
 800736c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007370:	2b05      	cmp	r3, #5
 8007372:	d118      	bne.n	80073a6 <scaraInitLSPB+0x96>
		 v_design = V_DESIGN_ROLL*v_factor;
 8007374:	f20f 731c 	addw	r3, pc, #1820	; 0x71c
 8007378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007380:	f7f9 f93a 	bl	80005f8 <__aeabi_dmul>
 8007384:	4602      	mov	r2, r0
 8007386:	460b      	mov	r3, r1
 8007388:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_ROLL*a_factor;
 800738c:	f20f 7304 	addw	r3, pc, #1796	; 0x704
 8007390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007394:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007398:	f7f9 f92e 	bl	80005f8 <__aeabi_dmul>
 800739c:	4602      	mov	r2, r0
 800739e:	460b      	mov	r3, r1
 80073a0:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 80073a4:	e075      	b.n	8007492 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J0 == target) {
 80073a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d118      	bne.n	80073e0 <scaraInitLSPB+0xd0>
		 v_design = V_DESIGN_J0*v_factor;
 80073ae:	f20f 63e4 	addw	r3, pc, #1764	; 0x6e4
 80073b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80073ba:	f7f9 f91d 	bl	80005f8 <__aeabi_dmul>
 80073be:	4602      	mov	r2, r0
 80073c0:	460b      	mov	r3, r1
 80073c2:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J0*a_factor;
 80073c6:	f20f 63cc 	addw	r3, pc, #1740	; 0x6cc
 80073ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80073d2:	f7f9 f911 	bl	80005f8 <__aeabi_dmul>
 80073d6:	4602      	mov	r2, r0
 80073d8:	460b      	mov	r3, r1
 80073da:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 80073de:	e058      	b.n	8007492 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J1 == target) {
 80073e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d118      	bne.n	800741a <scaraInitLSPB+0x10a>
		 v_design = V_DESIGN_J1*v_factor;
 80073e8:	f20f 63a8 	addw	r3, pc, #1704	; 0x6a8
 80073ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80073f4:	f7f9 f900 	bl	80005f8 <__aeabi_dmul>
 80073f8:	4602      	mov	r2, r0
 80073fa:	460b      	mov	r3, r1
 80073fc:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J1*a_factor;
 8007400:	f20f 6390 	addw	r3, pc, #1680	; 0x690
 8007404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007408:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800740c:	f7f9 f8f4 	bl	80005f8 <__aeabi_dmul>
 8007410:	4602      	mov	r2, r0
 8007412:	460b      	mov	r3, r1
 8007414:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 8007418:	e03b      	b.n	8007492 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J2 == target) {
 800741a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800741e:	2b02      	cmp	r3, #2
 8007420:	d118      	bne.n	8007454 <scaraInitLSPB+0x144>
		 v_design = V_DESIGN_J2*v_factor;
 8007422:	f20f 6368 	addw	r3, pc, #1640	; 0x668
 8007426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800742a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800742e:	f7f9 f8e3 	bl	80005f8 <__aeabi_dmul>
 8007432:	4602      	mov	r2, r0
 8007434:	460b      	mov	r3, r1
 8007436:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J2*a_factor;
 800743a:	f20f 6350 	addw	r3, pc, #1616	; 0x650
 800743e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007442:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007446:	f7f9 f8d7 	bl	80005f8 <__aeabi_dmul>
 800744a:	4602      	mov	r2, r0
 800744c:	460b      	mov	r3, r1
 800744e:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 8007452:	e01e      	b.n	8007492 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J3 == target) {
 8007454:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007458:	2b03      	cmp	r3, #3
 800745a:	d118      	bne.n	800748e <scaraInitLSPB+0x17e>
		 v_design = V_DESIGN_J3*v_factor;
 800745c:	f20f 633c 	addw	r3, pc, #1596	; 0x63c
 8007460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007464:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007468:	f7f9 f8c6 	bl	80005f8 <__aeabi_dmul>
 800746c:	4602      	mov	r2, r0
 800746e:	460b      	mov	r3, r1
 8007470:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J3*a_factor;
 8007474:	f20f 6324 	addw	r3, pc, #1572	; 0x624
 8007478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007480:	f7f9 f8ba 	bl	80005f8 <__aeabi_dmul>
 8007484:	4602      	mov	r2, r0
 8007486:	460b      	mov	r3, r1
 8007488:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 800748c:	e001      	b.n	8007492 <scaraInitLSPB+0x182>
	 } else {
		 return SCARA_STATUS_ERROR_PARA;
 800748e:	2306      	movs	r3, #6
 8007490:	e2ef      	b.n	8007a72 <scaraInitLSPB+0x762>
	 }

	 q0 = 0;
 8007492:	f04f 0200 	mov.w	r2, #0
 8007496:	f04f 0300 	mov.w	r3, #0
 800749a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	 q1 = total_s;
 800749e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80074a2:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
	 v0 = 0;
 80074a6:	f04f 0200 	mov.w	r2, #0
 80074aa:	f04f 0300 	mov.w	r3, #0
 80074ae:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	 v1 = 0;
 80074b2:	f04f 0200 	mov.w	r2, #0
 80074b6:	f04f 0300 	mov.w	r3, #0
 80074ba:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	 if ( q0 <= q1) {
 80074be:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80074c2:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80074c6:	f7f9 fb13 	bl	8000af0 <__aeabi_dcmple>
 80074ca:	4603      	mov	r3, r0
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d003      	beq.n	80074d8 <scaraInitLSPB+0x1c8>
		 dir = 1;
 80074d0:	2301      	movs	r3, #1
 80074d2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80074d6:	e00c      	b.n	80074f2 <scaraInitLSPB+0x1e2>
	 } else {
		 dir = -1;
 80074d8:	23ff      	movs	r3, #255	; 0xff
 80074da:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		 q1 = -q1;
 80074de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80074e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80074e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80074ea:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80074ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	 }

	 if (DUTY_MODE_INIT_QVT == modeinit) {
 80074f2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	f040 809b 	bne.w	8007632 <scaraInitLSPB+0x322>
		 double v_lower, v_upper, tc_upper, a_upper;
		 tf = lspb->Tf;
 80074fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074fe:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8007502:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		 // Avoid division by 0
		 if (tf > 0.001) {
 8007506:	f20f 539c 	addw	r3, pc, #1436	; 0x59c
 800750a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800750e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8007512:	f7f9 fb01 	bl	8000b18 <__aeabi_dcmpgt>
 8007516:	4603      	mov	r3, r0
 8007518:	2b00      	cmp	r3, #0
 800751a:	d07e      	beq.n	800761a <scaraInitLSPB+0x30a>
			 v_lower 	= (q1 - q0) / tf;
 800751c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007520:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8007524:	f7f8 feb0 	bl	8000288 <__aeabi_dsub>
 8007528:	4602      	mov	r2, r0
 800752a:	460b      	mov	r3, r1
 800752c:	4610      	mov	r0, r2
 800752e:	4619      	mov	r1, r3
 8007530:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8007534:	f7f9 f98a 	bl	800084c <__aeabi_ddiv>
 8007538:	4602      	mov	r2, r0
 800753a:	460b      	mov	r3, r1
 800753c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			 v_upper 	= 2*(q1 - q0) / tf;
 8007540:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007544:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8007548:	f7f8 fe9e 	bl	8000288 <__aeabi_dsub>
 800754c:	4602      	mov	r2, r0
 800754e:	460b      	mov	r3, r1
 8007550:	4610      	mov	r0, r2
 8007552:	4619      	mov	r1, r3
 8007554:	4602      	mov	r2, r0
 8007556:	460b      	mov	r3, r1
 8007558:	f7f8 fe98 	bl	800028c <__adddf3>
 800755c:	4602      	mov	r2, r0
 800755e:	460b      	mov	r3, r1
 8007560:	4610      	mov	r0, r2
 8007562:	4619      	mov	r1, r3
 8007564:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8007568:	f7f9 f970 	bl	800084c <__aeabi_ddiv>
 800756c:	4602      	mov	r2, r0
 800756e:	460b      	mov	r3, r1
 8007570:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

			 if ( v_design < v_lower) {
 8007574:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007578:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800757c:	f7f9 faae 	bl	8000adc <__aeabi_dcmplt>
 8007580:	4603      	mov	r3, r0
 8007582:	2b00      	cmp	r3, #0
 8007584:	d001      	beq.n	800758a <scaraInitLSPB+0x27a>
				 return SCARA_STATUS_ERROR_OVER_VELOC;
 8007586:	2309      	movs	r3, #9
 8007588:	e273      	b.n	8007a72 <scaraInitLSPB+0x762>
			 } else {
				 if ( v_upper <= v_design) {
 800758a:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800758e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007592:	f7f9 faad 	bl	8000af0 <__aeabi_dcmple>
 8007596:	4603      	mov	r3, r0
 8007598:	2b00      	cmp	r3, #0
 800759a:	d003      	beq.n	80075a4 <scaraInitLSPB+0x294>
					 v_design = v_upper;
 800759c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80075a0:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
				 }
				 // Avoid division by 0
				 if (v_design > 0.0000001) {
 80075a4:	f20f 5304 	addw	r3, pc, #1284	; 0x504
 80075a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ac:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80075b0:	f7f9 fab2 	bl	8000b18 <__aeabi_dcmpgt>
 80075b4:	4603      	mov	r3, r0
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d018      	beq.n	80075ec <scaraInitLSPB+0x2dc>
					 tc_upper	= tf - (q1 - q0)/v_design;
 80075ba:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80075be:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80075c2:	f7f8 fe61 	bl	8000288 <__aeabi_dsub>
 80075c6:	4602      	mov	r2, r0
 80075c8:	460b      	mov	r3, r1
 80075ca:	4610      	mov	r0, r2
 80075cc:	4619      	mov	r1, r3
 80075ce:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80075d2:	f7f9 f93b 	bl	800084c <__aeabi_ddiv>
 80075d6:	4602      	mov	r2, r0
 80075d8:	460b      	mov	r3, r1
 80075da:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80075de:	f7f8 fe53 	bl	8000288 <__aeabi_dsub>
 80075e2:	4602      	mov	r2, r0
 80075e4:	460b      	mov	r3, r1
 80075e6:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 80075ea:	e00b      	b.n	8007604 <scaraInitLSPB+0x2f4>
				 } else {
					 tc_upper = tf / 2;
 80075ec:	f04f 0200 	mov.w	r2, #0
 80075f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80075f4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80075f8:	f7f9 f928 	bl	800084c <__aeabi_ddiv>
 80075fc:	4602      	mov	r2, r0
 80075fe:	460b      	mov	r3, r1
 8007600:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
				 }
				 a_upper	= v_design/tc_upper;
 8007604:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007608:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800760c:	f7f9 f91e 	bl	800084c <__aeabi_ddiv>
 8007610:	4602      	mov	r2, r0
 8007612:	460b      	mov	r3, r1
 8007614:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8007618:	e00b      	b.n	8007632 <scaraInitLSPB+0x322>
				//  } else {
				// 	 a_design = a_upper;
				//  }
			 }
		 } else {
			 v_design = 0;
 800761a:	f04f 0200 	mov.w	r2, #0
 800761e:	f04f 0300 	mov.w	r3, #0
 8007622:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
			 a_design = 0;
 8007626:	f04f 0200 	mov.w	r2, #0
 800762a:	f04f 0300 	mov.w	r3, #0
 800762e:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
		 }
	}

	 // Check condition trapezoidal ---> triangle
	 // Avoid division by 0
	 if (a_design > 0.0000001 && v_design > 0.0000001) {
 8007632:	f20f 4378 	addw	r3, pc, #1144	; 0x478
 8007636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800763a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800763e:	f7f9 fa6b 	bl	8000b18 <__aeabi_dcmpgt>
 8007642:	4603      	mov	r3, r0
 8007644:	2b00      	cmp	r3, #0
 8007646:	f000 8196 	beq.w	8007976 <scaraInitLSPB+0x666>
 800764a:	f20f 4360 	addw	r3, pc, #1120	; 0x460
 800764e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007652:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007656:	f7f9 fa5f 	bl	8000b18 <__aeabi_dcmpgt>
 800765a:	4603      	mov	r3, r0
 800765c:	2b00      	cmp	r3, #0
 800765e:	f000 818a 	beq.w	8007976 <scaraInitLSPB+0x666>
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 8007662:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007666:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800766a:	f7f8 fe0d 	bl	8000288 <__aeabi_dsub>
 800766e:	4602      	mov	r2, r0
 8007670:	460b      	mov	r3, r1
 8007672:	4614      	mov	r4, r2
 8007674:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8007678:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800767c:	4620      	mov	r0, r4
 800767e:	4629      	mov	r1, r5
 8007680:	f7f8 ffba 	bl	80005f8 <__aeabi_dmul>
 8007684:	4602      	mov	r2, r0
 8007686:	460b      	mov	r3, r1
 8007688:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800768c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8007690:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007694:	f7f8 ffb0 	bl	80005f8 <__aeabi_dmul>
 8007698:	4602      	mov	r2, r0
 800769a:	460b      	mov	r3, r1
 800769c:	e9c7 2300 	strd	r2, r3, [r7]
 80076a0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80076a4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80076a8:	f7f8 ffa6 	bl	80005f8 <__aeabi_dmul>
 80076ac:	4602      	mov	r2, r0
 80076ae:	460b      	mov	r3, r1
 80076b0:	4614      	mov	r4, r2
 80076b2:	461d      	mov	r5, r3
 80076b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80076b8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80076bc:	f7f8 ff9c 	bl	80005f8 <__aeabi_dmul>
 80076c0:	4602      	mov	r2, r0
 80076c2:	460b      	mov	r3, r1
 80076c4:	4620      	mov	r0, r4
 80076c6:	4629      	mov	r1, r5
 80076c8:	f7f8 fde0 	bl	800028c <__adddf3>
 80076cc:	4602      	mov	r2, r0
 80076ce:	460b      	mov	r3, r1
 80076d0:	4610      	mov	r0, r2
 80076d2:	4619      	mov	r1, r3
 80076d4:	f04f 0200 	mov.w	r2, #0
 80076d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80076dc:	f7f9 f8b6 	bl	800084c <__aeabi_ddiv>
 80076e0:	4602      	mov	r2, r0
 80076e2:	460b      	mov	r3, r1
 80076e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80076e8:	f7f8 fdce 	bl	8000288 <__aeabi_dsub>
 80076ec:	4602      	mov	r2, r0
 80076ee:	460b      	mov	r3, r1
 80076f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80076f4:	f7f9 f9fc 	bl	8000af0 <__aeabi_dcmple>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d075      	beq.n	80077ea <scaraInitLSPB+0x4da>
			 v_lim 	= sqrt(fabs(q1 - q0)*a_design + (v0*v0 + v1*v1)/2);
 80076fe:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007702:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8007706:	f7f8 fdbf 	bl	8000288 <__aeabi_dsub>
 800770a:	4602      	mov	r2, r0
 800770c:	460b      	mov	r3, r1
 800770e:	4692      	mov	sl, r2
 8007710:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8007714:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8007718:	4650      	mov	r0, sl
 800771a:	4659      	mov	r1, fp
 800771c:	f7f8 ff6c 	bl	80005f8 <__aeabi_dmul>
 8007720:	4602      	mov	r2, r0
 8007722:	460b      	mov	r3, r1
 8007724:	4614      	mov	r4, r2
 8007726:	461d      	mov	r5, r3
 8007728:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800772c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007730:	f7f8 ff62 	bl	80005f8 <__aeabi_dmul>
 8007734:	4602      	mov	r2, r0
 8007736:	460b      	mov	r3, r1
 8007738:	4690      	mov	r8, r2
 800773a:	4699      	mov	r9, r3
 800773c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007740:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007744:	f7f8 ff58 	bl	80005f8 <__aeabi_dmul>
 8007748:	4602      	mov	r2, r0
 800774a:	460b      	mov	r3, r1
 800774c:	4640      	mov	r0, r8
 800774e:	4649      	mov	r1, r9
 8007750:	f7f8 fd9c 	bl	800028c <__adddf3>
 8007754:	4602      	mov	r2, r0
 8007756:	460b      	mov	r3, r1
 8007758:	4610      	mov	r0, r2
 800775a:	4619      	mov	r1, r3
 800775c:	f04f 0200 	mov.w	r2, #0
 8007760:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007764:	f7f9 f872 	bl	800084c <__aeabi_ddiv>
 8007768:	4602      	mov	r2, r0
 800776a:	460b      	mov	r3, r1
 800776c:	4620      	mov	r0, r4
 800776e:	4629      	mov	r1, r5
 8007770:	f7f8 fd8c 	bl	800028c <__adddf3>
 8007774:	4602      	mov	r2, r0
 8007776:	460b      	mov	r3, r1
 8007778:	ec43 2b17 	vmov	d7, r2, r3
 800777c:	eeb0 0a47 	vmov.f32	s0, s14
 8007780:	eef0 0a67 	vmov.f32	s1, s15
 8007784:	f013 f8d4 	bl	801a930 <sqrt>
 8007788:	ed87 0b26 	vstr	d0, [r7, #152]	; 0x98
			 ta		= (v_lim - v0)/a_design;
 800778c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007790:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007794:	f7f8 fd78 	bl	8000288 <__aeabi_dsub>
 8007798:	4602      	mov	r2, r0
 800779a:	460b      	mov	r3, r1
 800779c:	4610      	mov	r0, r2
 800779e:	4619      	mov	r1, r3
 80077a0:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80077a4:	f7f9 f852 	bl	800084c <__aeabi_ddiv>
 80077a8:	4602      	mov	r2, r0
 80077aa:	460b      	mov	r3, r1
 80077ac:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
			 td		= (v_lim - v1)/a_design;
 80077b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80077b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80077b8:	f7f8 fd66 	bl	8000288 <__aeabi_dsub>
 80077bc:	4602      	mov	r2, r0
 80077be:	460b      	mov	r3, r1
 80077c0:	4610      	mov	r0, r2
 80077c2:	4619      	mov	r1, r3
 80077c4:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80077c8:	f7f9 f840 	bl	800084c <__aeabi_ddiv>
 80077cc:	4602      	mov	r2, r0
 80077ce:	460b      	mov	r3, r1
 80077d0:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
			 tf		= ta + td;
 80077d4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80077d8:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80077dc:	f7f8 fd56 	bl	800028c <__adddf3>
 80077e0:	4602      	mov	r2, r0
 80077e2:	460b      	mov	r3, r1
 80077e4:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 80077e8:	e0e3      	b.n	80079b2 <scaraInitLSPB+0x6a2>
		 } else {
			 v_lim	= v_design;
 80077ea:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80077ee:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
			 ta		= (v_lim - v0)/a_design;
 80077f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80077f6:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80077fa:	f7f8 fd45 	bl	8000288 <__aeabi_dsub>
 80077fe:	4602      	mov	r2, r0
 8007800:	460b      	mov	r3, r1
 8007802:	4610      	mov	r0, r2
 8007804:	4619      	mov	r1, r3
 8007806:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800780a:	f7f9 f81f 	bl	800084c <__aeabi_ddiv>
 800780e:	4602      	mov	r2, r0
 8007810:	460b      	mov	r3, r1
 8007812:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
			 td		= (v_lim - v1)/a_design;
 8007816:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800781a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800781e:	f7f8 fd33 	bl	8000288 <__aeabi_dsub>
 8007822:	4602      	mov	r2, r0
 8007824:	460b      	mov	r3, r1
 8007826:	4610      	mov	r0, r2
 8007828:	4619      	mov	r1, r3
 800782a:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800782e:	f7f9 f80d 	bl	800084c <__aeabi_ddiv>
 8007832:	4602      	mov	r2, r0
 8007834:	460b      	mov	r3, r1
 8007836:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
			 tf		= fabs(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 800783a:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800783e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007842:	f7f8 fd21 	bl	8000288 <__aeabi_dsub>
 8007846:	4602      	mov	r2, r0
 8007848:	460b      	mov	r3, r1
 800784a:	4690      	mov	r8, r2
 800784c:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8007850:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8007854:	4640      	mov	r0, r8
 8007856:	4649      	mov	r1, r9
 8007858:	f7f8 fff8 	bl	800084c <__aeabi_ddiv>
 800785c:	4602      	mov	r2, r0
 800785e:	460b      	mov	r3, r1
 8007860:	4614      	mov	r4, r2
 8007862:	461d      	mov	r5, r3
 8007864:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8007868:	4602      	mov	r2, r0
 800786a:	460b      	mov	r3, r1
 800786c:	f7f8 fd0e 	bl	800028c <__adddf3>
 8007870:	4602      	mov	r2, r0
 8007872:	460b      	mov	r3, r1
 8007874:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007878:	f7f8 ffe8 	bl	800084c <__aeabi_ddiv>
 800787c:	4602      	mov	r2, r0
 800787e:	460b      	mov	r3, r1
 8007880:	4690      	mov	r8, r2
 8007882:	4699      	mov	r9, r3
 8007884:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8007888:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800788c:	f7f8 ffde 	bl	800084c <__aeabi_ddiv>
 8007890:	4602      	mov	r2, r0
 8007892:	460b      	mov	r3, r1
 8007894:	f04f 0000 	mov.w	r0, #0
 8007898:	497b      	ldr	r1, [pc, #492]	; (8007a88 <scaraInitLSPB+0x778>)
 800789a:	f7f8 fcf5 	bl	8000288 <__aeabi_dsub>
 800789e:	4602      	mov	r2, r0
 80078a0:	460b      	mov	r3, r1
 80078a2:	4640      	mov	r0, r8
 80078a4:	4649      	mov	r1, r9
 80078a6:	f7f8 fea7 	bl	80005f8 <__aeabi_dmul>
 80078aa:	4602      	mov	r2, r0
 80078ac:	460b      	mov	r3, r1
 80078ae:	4690      	mov	r8, r2
 80078b0:	4699      	mov	r9, r3
 80078b2:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80078b6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80078ba:	f7f8 ffc7 	bl	800084c <__aeabi_ddiv>
 80078be:	4602      	mov	r2, r0
 80078c0:	460b      	mov	r3, r1
 80078c2:	f04f 0000 	mov.w	r0, #0
 80078c6:	4970      	ldr	r1, [pc, #448]	; (8007a88 <scaraInitLSPB+0x778>)
 80078c8:	f7f8 fcde 	bl	8000288 <__aeabi_dsub>
 80078cc:	4602      	mov	r2, r0
 80078ce:	460b      	mov	r3, r1
 80078d0:	4640      	mov	r0, r8
 80078d2:	4649      	mov	r1, r9
 80078d4:	f7f8 fe90 	bl	80005f8 <__aeabi_dmul>
 80078d8:	4602      	mov	r2, r0
 80078da:	460b      	mov	r3, r1
 80078dc:	4620      	mov	r0, r4
 80078de:	4629      	mov	r1, r5
 80078e0:	f7f8 fcd4 	bl	800028c <__adddf3>
 80078e4:	4602      	mov	r2, r0
 80078e6:	460b      	mov	r3, r1
 80078e8:	4614      	mov	r4, r2
 80078ea:	461d      	mov	r5, r3
							+ v_lim/(2*a_design)*(1 - v1/v_lim)*(1 - v1/v_lim);
 80078ec:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80078f0:	4602      	mov	r2, r0
 80078f2:	460b      	mov	r3, r1
 80078f4:	f7f8 fcca 	bl	800028c <__adddf3>
 80078f8:	4602      	mov	r2, r0
 80078fa:	460b      	mov	r3, r1
 80078fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007900:	f7f8 ffa4 	bl	800084c <__aeabi_ddiv>
 8007904:	4602      	mov	r2, r0
 8007906:	460b      	mov	r3, r1
 8007908:	4690      	mov	r8, r2
 800790a:	4699      	mov	r9, r3
 800790c:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8007910:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007914:	f7f8 ff9a 	bl	800084c <__aeabi_ddiv>
 8007918:	4602      	mov	r2, r0
 800791a:	460b      	mov	r3, r1
 800791c:	f04f 0000 	mov.w	r0, #0
 8007920:	4959      	ldr	r1, [pc, #356]	; (8007a88 <scaraInitLSPB+0x778>)
 8007922:	f7f8 fcb1 	bl	8000288 <__aeabi_dsub>
 8007926:	4602      	mov	r2, r0
 8007928:	460b      	mov	r3, r1
 800792a:	4640      	mov	r0, r8
 800792c:	4649      	mov	r1, r9
 800792e:	f7f8 fe63 	bl	80005f8 <__aeabi_dmul>
 8007932:	4602      	mov	r2, r0
 8007934:	460b      	mov	r3, r1
 8007936:	4690      	mov	r8, r2
 8007938:	4699      	mov	r9, r3
 800793a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800793e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007942:	f7f8 ff83 	bl	800084c <__aeabi_ddiv>
 8007946:	4602      	mov	r2, r0
 8007948:	460b      	mov	r3, r1
 800794a:	f04f 0000 	mov.w	r0, #0
 800794e:	494e      	ldr	r1, [pc, #312]	; (8007a88 <scaraInitLSPB+0x778>)
 8007950:	f7f8 fc9a 	bl	8000288 <__aeabi_dsub>
 8007954:	4602      	mov	r2, r0
 8007956:	460b      	mov	r3, r1
 8007958:	4640      	mov	r0, r8
 800795a:	4649      	mov	r1, r9
 800795c:	f7f8 fe4c 	bl	80005f8 <__aeabi_dmul>
 8007960:	4602      	mov	r2, r0
 8007962:	460b      	mov	r3, r1
			 tf		= fabs(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 8007964:	4620      	mov	r0, r4
 8007966:	4629      	mov	r1, r5
 8007968:	f7f8 fc90 	bl	800028c <__adddf3>
 800796c:	4602      	mov	r2, r0
 800796e:	460b      	mov	r3, r1
 8007970:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 8007974:	e01d      	b.n	80079b2 <scaraInitLSPB+0x6a2>
		 }
	 } else {
		 v_lim	= 0;
 8007976:	f04f 0200 	mov.w	r2, #0
 800797a:	f04f 0300 	mov.w	r3, #0
 800797e:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
		 ta = tf/2;
 8007982:	f04f 0200 	mov.w	r2, #0
 8007986:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800798a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800798e:	f7f8 ff5d 	bl	800084c <__aeabi_ddiv>
 8007992:	4602      	mov	r2, r0
 8007994:	460b      	mov	r3, r1
 8007996:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
		 td = tf/2;
 800799a:	f04f 0200 	mov.w	r2, #0
 800799e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80079a2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80079a6:	f7f8 ff51 	bl	800084c <__aeabi_ddiv>
 80079aa:	4602      	mov	r2, r0
 80079ac:	460b      	mov	r3, r1
 80079ae:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	 }

	 no_sample = ceilf(tf / T_SAMPLING); // ceiling
 80079b2:	a333      	add	r3, pc, #204	; (adr r3, 8007a80 <scaraInitLSPB+0x770>)
 80079b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80079bc:	f7f8 ff46 	bl	800084c <__aeabi_ddiv>
 80079c0:	4602      	mov	r2, r0
 80079c2:	460b      	mov	r3, r1
 80079c4:	4610      	mov	r0, r2
 80079c6:	4619      	mov	r1, r3
 80079c8:	f7f9 f90e 	bl	8000be8 <__aeabi_d2f>
 80079cc:	4603      	mov	r3, r0
 80079ce:	ee00 3a10 	vmov	s0, r3
 80079d2:	f012 ff69 	bl	801a8a8 <ceilf>
 80079d6:	eef0 7a40 	vmov.f32	s15, s0
 80079da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079de:	ee17 3a90 	vmov	r3, s15
 80079e2:	637b      	str	r3, [r7, #52]	; 0x34
	 // Init lspb params
	 lspb->dir= dir;
 80079e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e6:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 80079ea:	701a      	strb	r2, [r3, #0]
	 lspb->s0 = q0;
 80079ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079ee:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80079f2:	e9c1 2302 	strd	r2, r3, [r1, #8]
	 lspb->s1 = q1;
 80079f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079f8:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80079fc:	e9c1 2304 	strd	r2, r3, [r1, #16]
	 lspb->Ta = ta;
 8007a00:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a02:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007a06:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	 lspb->Td = td;
 8007a0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a0c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8007a10:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	 lspb->Tf = tf;
 8007a14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a16:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8007a1a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	 lspb->a_design = a_design;
 8007a1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a20:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8007a24:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	 lspb->v_design = v_design;
 8007a28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a2a:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8007a2e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	 lspb->v_lim = v_lim;
 8007a32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a34:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8007a38:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	 lspb->v0 = v0;
 8007a3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a3e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007a42:	e9c1 2306 	strd	r2, r3, [r1, #24]
	 lspb->v1 = v1;
 8007a46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a48:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007a4c:	e9c1 2308 	strd	r2, r3, [r1, #32]
	 lspb->num_of_sampling = no_sample;
 8007a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a54:	659a      	str	r2, [r3, #88]	; 0x58
	 lspb->total_s = lspb->s1 - lspb->s0;
 8007a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a58:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8007a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a5e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007a62:	f7f8 fc11 	bl	8000288 <__aeabi_dsub>
 8007a66:	4602      	mov	r2, r0
 8007a68:	460b      	mov	r3, r1
 8007a6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a6c:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

	 return SCARA_STATUS_OK;
 8007a70:	2300      	movs	r3, #0
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	37b0      	adds	r7, #176	; 0xb0
 8007a76:	46bd      	mov	sp, r7
 8007a78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a7c:	f3af 8000 	nop.w
 8007a80:	40000000 	.word	0x40000000
 8007a84:	3f847ae1 	.word	0x3f847ae1
 8007a88:	3ff00000 	.word	0x3ff00000
 8007a8c:	00000000 	.word	0x00000000
 8007a90:	405c2000 	.word	0x405c2000
 8007a94:	14000000 	.word	0x14000000
 8007a98:	4000f6f0 	.word	0x4000f6f0
 8007a9c:	6b259425 	.word	0x6b259425
 8007aa0:	40069b91 	.word	0x40069b91
 8007aa4:	d2f1a9fc 	.word	0xd2f1a9fc
 8007aa8:	3f50624d 	.word	0x3f50624d
 8007aac:	9abcaf48 	.word	0x9abcaf48
 8007ab0:	3e7ad7f2 	.word	0x3e7ad7f2
 8007ab4:	00000000 	.word	0x00000000

08007ab8 <scaraInitScurve>:
SCARA_StatusTypeDef	scaraInitScurve		(Trajectory_Scurve_TypeDef *scurve,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double a_factor) {
 8007ab8:	b5b0      	push	{r4, r5, r7, lr}
 8007aba:	b0ba      	sub	sp, #232	; 0xe8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	61f8      	str	r0, [r7, #28]
 8007ac0:	460b      	mov	r3, r1
 8007ac2:	ed87 0b04 	vstr	d0, [r7, #16]
 8007ac6:	ed87 1b02 	vstr	d1, [r7, #8]
 8007aca:	ed87 2b00 	vstr	d2, [r7]
 8007ace:	76fb      	strb	r3, [r7, #27]
 8007ad0:	4613      	mov	r3, r2
 8007ad2:	76bb      	strb	r3, [r7, #26]
	 double v_design, a_design, q0, q1, v0, v1, v_lim, j_max, tm, tc, tf, dir;
	 double v_1, s_1, v_2, s_2, v_3, s_3, v_4, s_4;
	 uint32_t	 no_sample;
	 uint8_t	 no_phases;

	 if ( TRAJECTORY_3D == target) {
 8007ad4:	7efb      	ldrb	r3, [r7, #27]
 8007ad6:	2b04      	cmp	r3, #4
 8007ad8:	d117      	bne.n	8007b0a <scaraInitScurve+0x52>
		 v_design = V_DESIGN_3D*v_factor;
 8007ada:	f20f 4310 	addw	r3, pc, #1040	; 0x410
 8007ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007ae6:	f7f8 fd87 	bl	80005f8 <__aeabi_dmul>
 8007aea:	4602      	mov	r2, r0
 8007aec:	460b      	mov	r3, r1
 8007aee:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_3D*a_factor;
 8007af2:	a3fe      	add	r3, pc, #1016	; (adr r3, 8007eec <scaraInitScurve+0x434>)
 8007af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007afc:	f7f8 fd7c 	bl	80005f8 <__aeabi_dmul>
 8007b00:	4602      	mov	r2, r0
 8007b02:	460b      	mov	r3, r1
 8007b04:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
 8007b08:	e083      	b.n	8007c12 <scaraInitScurve+0x15a>
	 } else if (TRAJECTORY_ROLL == target) {
 8007b0a:	7efb      	ldrb	r3, [r7, #27]
 8007b0c:	2b05      	cmp	r3, #5
 8007b0e:	d116      	bne.n	8007b3e <scaraInitScurve+0x86>
		 v_design = V_DESIGN_ROLL*v_factor;
 8007b10:	a3f8      	add	r3, pc, #992	; (adr r3, 8007ef4 <scaraInitScurve+0x43c>)
 8007b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007b1a:	f7f8 fd6d 	bl	80005f8 <__aeabi_dmul>
 8007b1e:	4602      	mov	r2, r0
 8007b20:	460b      	mov	r3, r1
 8007b22:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_ROLL*a_factor;
 8007b26:	a3f3      	add	r3, pc, #972	; (adr r3, 8007ef4 <scaraInitScurve+0x43c>)
 8007b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b30:	f7f8 fd62 	bl	80005f8 <__aeabi_dmul>
 8007b34:	4602      	mov	r2, r0
 8007b36:	460b      	mov	r3, r1
 8007b38:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
 8007b3c:	e069      	b.n	8007c12 <scaraInitScurve+0x15a>
	 } else if (TRAJECTORY_J0 == target) {
 8007b3e:	7efb      	ldrb	r3, [r7, #27]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d116      	bne.n	8007b72 <scaraInitScurve+0xba>
		 v_design = V_DESIGN_J0*v_factor;
 8007b44:	a3eb      	add	r3, pc, #940	; (adr r3, 8007ef4 <scaraInitScurve+0x43c>)
 8007b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b4a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007b4e:	f7f8 fd53 	bl	80005f8 <__aeabi_dmul>
 8007b52:	4602      	mov	r2, r0
 8007b54:	460b      	mov	r3, r1
 8007b56:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J0*a_factor;
 8007b5a:	a3e6      	add	r3, pc, #920	; (adr r3, 8007ef4 <scaraInitScurve+0x43c>)
 8007b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b64:	f7f8 fd48 	bl	80005f8 <__aeabi_dmul>
 8007b68:	4602      	mov	r2, r0
 8007b6a:	460b      	mov	r3, r1
 8007b6c:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
 8007b70:	e04f      	b.n	8007c12 <scaraInitScurve+0x15a>
	 } else if (TRAJECTORY_J1 == target) {
 8007b72:	7efb      	ldrb	r3, [r7, #27]
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d116      	bne.n	8007ba6 <scaraInitScurve+0xee>
		 v_design = V_DESIGN_J1*v_factor;
 8007b78:	a3de      	add	r3, pc, #888	; (adr r3, 8007ef4 <scaraInitScurve+0x43c>)
 8007b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b7e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007b82:	f7f8 fd39 	bl	80005f8 <__aeabi_dmul>
 8007b86:	4602      	mov	r2, r0
 8007b88:	460b      	mov	r3, r1
 8007b8a:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J1*a_factor;
 8007b8e:	a3d9      	add	r3, pc, #868	; (adr r3, 8007ef4 <scaraInitScurve+0x43c>)
 8007b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b98:	f7f8 fd2e 	bl	80005f8 <__aeabi_dmul>
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	460b      	mov	r3, r1
 8007ba0:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
 8007ba4:	e035      	b.n	8007c12 <scaraInitScurve+0x15a>
	 } else if (TRAJECTORY_J2 == target) {
 8007ba6:	7efb      	ldrb	r3, [r7, #27]
 8007ba8:	2b02      	cmp	r3, #2
 8007baa:	d116      	bne.n	8007bda <scaraInitScurve+0x122>
		 v_design = V_DESIGN_J2*v_factor;
 8007bac:	a3cf      	add	r3, pc, #828	; (adr r3, 8007eec <scaraInitScurve+0x434>)
 8007bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007bb6:	f7f8 fd1f 	bl	80005f8 <__aeabi_dmul>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J2*a_factor;
 8007bc2:	a3ca      	add	r3, pc, #808	; (adr r3, 8007eec <scaraInitScurve+0x434>)
 8007bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007bcc:	f7f8 fd14 	bl	80005f8 <__aeabi_dmul>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	460b      	mov	r3, r1
 8007bd4:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
 8007bd8:	e01b      	b.n	8007c12 <scaraInitScurve+0x15a>
	 } else if (TRAJECTORY_J3 == target) {
 8007bda:	7efb      	ldrb	r3, [r7, #27]
 8007bdc:	2b03      	cmp	r3, #3
 8007bde:	d116      	bne.n	8007c0e <scaraInitScurve+0x156>
		 v_design = V_DESIGN_J3*v_factor;
 8007be0:	a3c6      	add	r3, pc, #792	; (adr r3, 8007efc <scaraInitScurve+0x444>)
 8007be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007bea:	f7f8 fd05 	bl	80005f8 <__aeabi_dmul>
 8007bee:	4602      	mov	r2, r0
 8007bf0:	460b      	mov	r3, r1
 8007bf2:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J3*a_factor;
 8007bf6:	a3c1      	add	r3, pc, #772	; (adr r3, 8007efc <scaraInitScurve+0x444>)
 8007bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bfc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c00:	f7f8 fcfa 	bl	80005f8 <__aeabi_dmul>
 8007c04:	4602      	mov	r2, r0
 8007c06:	460b      	mov	r3, r1
 8007c08:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
 8007c0c:	e001      	b.n	8007c12 <scaraInitScurve+0x15a>
	 } else {
		 return SCARA_STATUS_ERROR_PARA;
 8007c0e:	2306      	movs	r3, #6
 8007c10:	e2bb      	b.n	800818a <scaraInitScurve+0x6d2>
	 }

	 v0 = 0;
 8007c12:	f04f 0200 	mov.w	r2, #0
 8007c16:	f04f 0300 	mov.w	r3, #0
 8007c1a:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
	 v1 = 0;
 8007c1e:	f04f 0200 	mov.w	r2, #0
 8007c22:	f04f 0300 	mov.w	r3, #0
 8007c26:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	 q0 = 0;
 8007c2a:	f04f 0200 	mov.w	r2, #0
 8007c2e:	f04f 0300 	mov.w	r3, #0
 8007c32:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	 q1 = total_s;
 8007c36:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007c3a:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0

	 if ( total_s < 0) {
 8007c3e:	f04f 0200 	mov.w	r2, #0
 8007c42:	f04f 0300 	mov.w	r3, #0
 8007c46:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007c4a:	f7f8 ff47 	bl	8000adc <__aeabi_dcmplt>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d015      	beq.n	8007c80 <scaraInitScurve+0x1c8>
		 dir = -1;
 8007c54:	f04f 0200 	mov.w	r2, #0
 8007c58:	4ba1      	ldr	r3, [pc, #644]	; (8007ee0 <scaraInitScurve+0x428>)
 8007c5a:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
		 q1 = -q1;
 8007c5e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007c62:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007c66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c6a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007c6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		 total_s = -total_s;
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	613b      	str	r3, [r7, #16]
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007c7c:	617b      	str	r3, [r7, #20]
 8007c7e:	e004      	b.n	8007c8a <scaraInitScurve+0x1d2>
	 } else {
		 dir = 1;
 8007c80:	f04f 0200 	mov.w	r2, #0
 8007c84:	4b97      	ldr	r3, [pc, #604]	; (8007ee4 <scaraInitScurve+0x42c>)
 8007c86:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
	 }


	 if (DUTY_MODE_INIT_QVT == modeinit) {
 8007c8a:	7ebb      	ldrb	r3, [r7, #26]
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d17f      	bne.n	8007d90 <scaraInitScurve+0x2d8>
		 double t_upper, v_upper, a_upper;
		 tf = scurve->Tf;
 8007c90:	69fb      	ldr	r3, [r7, #28]
 8007c92:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8007c96:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		 // Avoid division by 0
		 if (tf > 0.001) {
 8007c9a:	a38d      	add	r3, pc, #564	; (adr r3, 8007ed0 <scaraInitScurve+0x418>)
 8007c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca0:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007ca4:	f7f8 ff38 	bl	8000b18 <__aeabi_dcmpgt>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d064      	beq.n	8007d78 <scaraInitScurve+0x2c0>
			 // Assume 4 phase
			 t_upper = tf / 4;
 8007cae:	f04f 0200 	mov.w	r2, #0
 8007cb2:	4b8d      	ldr	r3, [pc, #564]	; (8007ee8 <scaraInitScurve+0x430>)
 8007cb4:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007cb8:	f7f8 fdc8 	bl	800084c <__aeabi_ddiv>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	460b      	mov	r3, r1
 8007cc0:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
			 v_upper = total_s / (2*t_upper);
 8007cc4:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8007cc8:	4602      	mov	r2, r0
 8007cca:	460b      	mov	r3, r1
 8007ccc:	f7f8 fade 	bl	800028c <__adddf3>
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	460b      	mov	r3, r1
 8007cd4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007cd8:	f7f8 fdb8 	bl	800084c <__aeabi_ddiv>
 8007cdc:	4602      	mov	r2, r0
 8007cde:	460b      	mov	r3, r1
 8007ce0:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
			 // Check 4 phase --> 5 phase
			 if ( v_upper > v_design) {
 8007ce4:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8007ce8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8007cec:	f7f8 ff14 	bl	8000b18 <__aeabi_dcmpgt>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d022      	beq.n	8007d3c <scaraInitScurve+0x284>
				 t_upper = tf/2 - total_s/(2*v_design);
 8007cf6:	f04f 0200 	mov.w	r2, #0
 8007cfa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007cfe:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007d02:	f7f8 fda3 	bl	800084c <__aeabi_ddiv>
 8007d06:	4602      	mov	r2, r0
 8007d08:	460b      	mov	r3, r1
 8007d0a:	4614      	mov	r4, r2
 8007d0c:	461d      	mov	r5, r3
 8007d0e:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007d12:	4602      	mov	r2, r0
 8007d14:	460b      	mov	r3, r1
 8007d16:	f7f8 fab9 	bl	800028c <__adddf3>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007d22:	f7f8 fd93 	bl	800084c <__aeabi_ddiv>
 8007d26:	4602      	mov	r2, r0
 8007d28:	460b      	mov	r3, r1
 8007d2a:	4620      	mov	r0, r4
 8007d2c:	4629      	mov	r1, r5
 8007d2e:	f7f8 faab 	bl	8000288 <__aeabi_dsub>
 8007d32:	4602      	mov	r2, r0
 8007d34:	460b      	mov	r3, r1
 8007d36:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
 8007d3a:	e003      	b.n	8007d44 <scaraInitScurve+0x28c>
			 } else {
				 v_design = v_upper;
 8007d3c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8007d40:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
			 }
			 a_upper  = v_design / t_upper;
 8007d44:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8007d48:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007d4c:	f7f8 fd7e 	bl	800084c <__aeabi_ddiv>
 8007d50:	4602      	mov	r2, r0
 8007d52:	460b      	mov	r3, r1
 8007d54:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			 if ( a_upper > a_design) {
 8007d58:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8007d5c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007d60:	f7f8 feda 	bl	8000b18 <__aeabi_dcmpgt>
 8007d64:	4603      	mov	r3, r0
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d001      	beq.n	8007d6e <scaraInitScurve+0x2b6>
				 return SCARA_STATUS_ERROR_OVER_ACCEL;
 8007d6a:	230a      	movs	r3, #10
 8007d6c:	e20d      	b.n	800818a <scaraInitScurve+0x6d2>
			 } else {
				 a_design = a_upper;
 8007d6e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007d72:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
 8007d76:	e00b      	b.n	8007d90 <scaraInitScurve+0x2d8>
			 }
		 } else {
			 v_design = 0;
 8007d78:	f04f 0200 	mov.w	r2, #0
 8007d7c:	f04f 0300 	mov.w	r3, #0
 8007d80:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
			 a_design = 0;
 8007d84:	f04f 0200 	mov.w	r2, #0
 8007d88:	f04f 0300 	mov.w	r3, #0
 8007d8c:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
		 }
	 }
	 // Avoid division by 0
	 if (a_design > 0.0000001 && v_design > 0.0000001) {
 8007d90:	a351      	add	r3, pc, #324	; (adr r3, 8007ed8 <scaraInitScurve+0x420>)
 8007d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d96:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8007d9a:	f7f8 febd 	bl	8000b18 <__aeabi_dcmpgt>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	f000 80af 	beq.w	8007f04 <scaraInitScurve+0x44c>
 8007da6:	a34c      	add	r3, pc, #304	; (adr r3, 8007ed8 <scaraInitScurve+0x420>)
 8007da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007db0:	f7f8 feb2 	bl	8000b18 <__aeabi_dcmpgt>
 8007db4:	4603      	mov	r3, r0
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	f000 80a4 	beq.w	8007f04 <scaraInitScurve+0x44c>
		 no_phases = 5;
 8007dbc:	2305      	movs	r3, #5
 8007dbe:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		 tm = v_design/a_design;
 8007dc2:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8007dc6:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007dca:	f7f8 fd3f 	bl	800084c <__aeabi_ddiv>
 8007dce:	4602      	mov	r2, r0
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
		 tc = total_s/v_design - 2*tm;
 8007dd6:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8007dda:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007dde:	f7f8 fd35 	bl	800084c <__aeabi_ddiv>
 8007de2:	4602      	mov	r2, r0
 8007de4:	460b      	mov	r3, r1
 8007de6:	4614      	mov	r4, r2
 8007de8:	461d      	mov	r5, r3
 8007dea:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8007dee:	4602      	mov	r2, r0
 8007df0:	460b      	mov	r3, r1
 8007df2:	f7f8 fa4b 	bl	800028c <__adddf3>
 8007df6:	4602      	mov	r2, r0
 8007df8:	460b      	mov	r3, r1
 8007dfa:	4620      	mov	r0, r4
 8007dfc:	4629      	mov	r1, r5
 8007dfe:	f7f8 fa43 	bl	8000288 <__aeabi_dsub>
 8007e02:	4602      	mov	r2, r0
 8007e04:	460b      	mov	r3, r1
 8007e06:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
		 // Check condition 5 phase ---> 4 phase
		 if (tc < 0.0) {
 8007e0a:	f04f 0200 	mov.w	r2, #0
 8007e0e:	f04f 0300 	mov.w	r3, #0
 8007e12:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007e16:	f7f8 fe61 	bl	8000adc <__aeabi_dcmplt>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d020      	beq.n	8007e62 <scaraInitScurve+0x3aa>
			 tc = 0;
 8007e20:	f04f 0200 	mov.w	r2, #0
 8007e24:	f04f 0300 	mov.w	r3, #0
 8007e28:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
			 no_phases = 4;
 8007e2c:	2304      	movs	r3, #4
 8007e2e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			 tm = sqrt(total_s/(2*a_design));
 8007e32:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8007e36:	4602      	mov	r2, r0
 8007e38:	460b      	mov	r3, r1
 8007e3a:	f7f8 fa27 	bl	800028c <__adddf3>
 8007e3e:	4602      	mov	r2, r0
 8007e40:	460b      	mov	r3, r1
 8007e42:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007e46:	f7f8 fd01 	bl	800084c <__aeabi_ddiv>
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	460b      	mov	r3, r1
 8007e4e:	ec43 2b17 	vmov	d7, r2, r3
 8007e52:	eeb0 0a47 	vmov.f32	s0, s14
 8007e56:	eef0 0a67 	vmov.f32	s1, s15
 8007e5a:	f012 fd69 	bl	801a930 <sqrt>
 8007e5e:	ed87 0b2e 	vstr	d0, [r7, #184]	; 0xb8
		 }
		 if (tm < 0.001) {
 8007e62:	a31b      	add	r3, pc, #108	; (adr r3, 8007ed0 <scaraInitScurve+0x418>)
 8007e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e68:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8007e6c:	f7f8 fe36 	bl	8000adc <__aeabi_dcmplt>
 8007e70:	4603      	mov	r3, r0
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d006      	beq.n	8007e84 <scaraInitScurve+0x3cc>
			 j_max = 0;
 8007e76:	f04f 0200 	mov.w	r2, #0
 8007e7a:	f04f 0300 	mov.w	r3, #0
 8007e7e:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
 8007e82:	e009      	b.n	8007e98 <scaraInitScurve+0x3e0>
		 } else {
			 j_max = a_design/tm;
 8007e84:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8007e88:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8007e8c:	f7f8 fcde 	bl	800084c <__aeabi_ddiv>
 8007e90:	4602      	mov	r2, r0
 8007e92:	460b      	mov	r3, r1
 8007e94:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
		 }
		 v_lim = a_design*tm;
 8007e98:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8007e9c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8007ea0:	f7f8 fbaa 	bl	80005f8 <__aeabi_dmul>
 8007ea4:	4602      	mov	r2, r0
 8007ea6:	460b      	mov	r3, r1
 8007ea8:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
		 tf    = 4*tm + tc;
 8007eac:	f04f 0200 	mov.w	r2, #0
 8007eb0:	4b0d      	ldr	r3, [pc, #52]	; (8007ee8 <scaraInitScurve+0x430>)
 8007eb2:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8007eb6:	f7f8 fb9f 	bl	80005f8 <__aeabi_dmul>
 8007eba:	4602      	mov	r2, r0
 8007ebc:	460b      	mov	r3, r1
 8007ebe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007ec2:	f7f8 f9e3 	bl	800028c <__adddf3>
 8007ec6:	4602      	mov	r2, r0
 8007ec8:	460b      	mov	r3, r1
 8007eca:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
 8007ece:	e039      	b.n	8007f44 <scaraInitScurve+0x48c>
 8007ed0:	d2f1a9fc 	.word	0xd2f1a9fc
 8007ed4:	3f50624d 	.word	0x3f50624d
 8007ed8:	9abcaf48 	.word	0x9abcaf48
 8007edc:	3e7ad7f2 	.word	0x3e7ad7f2
 8007ee0:	bff00000 	.word	0xbff00000
 8007ee4:	3ff00000 	.word	0x3ff00000
 8007ee8:	40100000 	.word	0x40100000
 8007eec:	00000000 	.word	0x00000000
 8007ef0:	405c2000 	.word	0x405c2000
 8007ef4:	14000000 	.word	0x14000000
 8007ef8:	4000f6f0 	.word	0x4000f6f0
 8007efc:	6b259425 	.word	0x6b259425
 8007f00:	40069b91 	.word	0x40069b91
	 } else {
		 j_max = 0;
 8007f04:	f04f 0200 	mov.w	r2, #0
 8007f08:	f04f 0300 	mov.w	r3, #0
 8007f0c:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
		 tc = 0;
 8007f10:	f04f 0200 	mov.w	r2, #0
 8007f14:	f04f 0300 	mov.w	r3, #0
 8007f18:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
		 no_phases = 4;
 8007f1c:	2304      	movs	r3, #4
 8007f1e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		 tm = tf / 4;
 8007f22:	f04f 0200 	mov.w	r2, #0
 8007f26:	4b9e      	ldr	r3, [pc, #632]	; (80081a0 <scaraInitScurve+0x6e8>)
 8007f28:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007f2c:	f7f8 fc8e 	bl	800084c <__aeabi_ddiv>
 8007f30:	4602      	mov	r2, r0
 8007f32:	460b      	mov	r3, r1
 8007f34:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
		 v_lim = 0;
 8007f38:	f04f 0200 	mov.w	r2, #0
 8007f3c:	f04f 0300 	mov.w	r3, #0
 8007f40:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
	 }

	 no_sample = ceil(tf / T_SAMPLING);
 8007f44:	a394      	add	r3, pc, #592	; (adr r3, 8008198 <scaraInitScurve+0x6e0>)
 8007f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f4a:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007f4e:	f7f8 fc7d 	bl	800084c <__aeabi_ddiv>
 8007f52:	4602      	mov	r2, r0
 8007f54:	460b      	mov	r3, r1
 8007f56:	ec43 2b17 	vmov	d7, r2, r3
 8007f5a:	eeb0 0a47 	vmov.f32	s0, s14
 8007f5e:	eef0 0a67 	vmov.f32	s1, s15
 8007f62:	f012 fb31 	bl	801a5c8 <ceil>
 8007f66:	ec53 2b10 	vmov	r2, r3, d0
 8007f6a:	4610      	mov	r0, r2
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	f7f8 fe1b 	bl	8000ba8 <__aeabi_d2uiz>
 8007f72:	4603      	mov	r3, r0
 8007f74:	667b      	str	r3, [r7, #100]	; 0x64
	 v_1 = 0.5*j_max*tm*tm;
 8007f76:	f04f 0200 	mov.w	r2, #0
 8007f7a:	4b8a      	ldr	r3, [pc, #552]	; (80081a4 <scaraInitScurve+0x6ec>)
 8007f7c:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8007f80:	f7f8 fb3a 	bl	80005f8 <__aeabi_dmul>
 8007f84:	4602      	mov	r2, r0
 8007f86:	460b      	mov	r3, r1
 8007f88:	4610      	mov	r0, r2
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8007f90:	f7f8 fb32 	bl	80005f8 <__aeabi_dmul>
 8007f94:	4602      	mov	r2, r0
 8007f96:	460b      	mov	r3, r1
 8007f98:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8007f9c:	f7f8 fb2c 	bl	80005f8 <__aeabi_dmul>
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	460b      	mov	r3, r1
 8007fa4:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	 s_1 = j_max*tm*tm*tm/6;
 8007fa8:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8007fac:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8007fb0:	f7f8 fb22 	bl	80005f8 <__aeabi_dmul>
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	460b      	mov	r3, r1
 8007fb8:	4610      	mov	r0, r2
 8007fba:	4619      	mov	r1, r3
 8007fbc:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8007fc0:	f7f8 fb1a 	bl	80005f8 <__aeabi_dmul>
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	460b      	mov	r3, r1
 8007fc8:	4610      	mov	r0, r2
 8007fca:	4619      	mov	r1, r3
 8007fcc:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8007fd0:	f7f8 fb12 	bl	80005f8 <__aeabi_dmul>
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	460b      	mov	r3, r1
 8007fd8:	4610      	mov	r0, r2
 8007fda:	4619      	mov	r1, r3
 8007fdc:	f04f 0200 	mov.w	r2, #0
 8007fe0:	4b71      	ldr	r3, [pc, #452]	; (80081a8 <scaraInitScurve+0x6f0>)
 8007fe2:	f7f8 fc33 	bl	800084c <__aeabi_ddiv>
 8007fe6:	4602      	mov	r2, r0
 8007fe8:	460b      	mov	r3, r1
 8007fea:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	 v_2 = j_max*tm*tm;
 8007fee:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8007ff2:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8007ff6:	f7f8 faff 	bl	80005f8 <__aeabi_dmul>
 8007ffa:	4602      	mov	r2, r0
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8008002:	f7f8 faf9 	bl	80005f8 <__aeabi_dmul>
 8008006:	4602      	mov	r2, r0
 8008008:	460b      	mov	r3, r1
 800800a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	 s_2 = v_2*tm;
 800800e:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8008012:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008016:	f7f8 faef 	bl	80005f8 <__aeabi_dmul>
 800801a:	4602      	mov	r2, r0
 800801c:	460b      	mov	r3, r1
 800801e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	 v_3 = v_2;
 8008022:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008026:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	 s_3 = s_2 + v_2*tc;
 800802a:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 800802e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008032:	f7f8 fae1 	bl	80005f8 <__aeabi_dmul>
 8008036:	4602      	mov	r2, r0
 8008038:	460b      	mov	r3, r1
 800803a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800803e:	f7f8 f925 	bl	800028c <__adddf3>
 8008042:	4602      	mov	r2, r0
 8008044:	460b      	mov	r3, r1
 8008046:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	 v_4 = v_1;
 800804a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800804e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	 s_4 = s_3 + s_2 - s_1;
 8008052:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008056:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800805a:	f7f8 f917 	bl	800028c <__adddf3>
 800805e:	4602      	mov	r2, r0
 8008060:	460b      	mov	r3, r1
 8008062:	4610      	mov	r0, r2
 8008064:	4619      	mov	r1, r3
 8008066:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800806a:	f7f8 f90d 	bl	8000288 <__aeabi_dsub>
 800806e:	4602      	mov	r2, r0
 8008070:	460b      	mov	r3, r1
 8008072:	e9c7 2308 	strd	r2, r3, [r7, #32]

	 scurve->Tc = tc;
 8008076:	69f9      	ldr	r1, [r7, #28]
 8008078:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 800807c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	 scurve->Tf = tf;
 8008080:	69f9      	ldr	r1, [r7, #28]
 8008082:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8008086:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	 scurve->Tm = tm;
 800808a:	69f9      	ldr	r1, [r7, #28]
 800808c:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8008090:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	 scurve->a_design = a_design;
 8008094:	69f9      	ldr	r1, [r7, #28]
 8008096:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800809a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	 scurve->v_design = v_design;
 800809e:	69f9      	ldr	r1, [r7, #28]
 80080a0:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 80080a4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	 scurve->v_lim = v_lim;
 80080a8:	69f9      	ldr	r1, [r7, #28]
 80080aa:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 80080ae:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	 scurve->v0 = v0;
 80080b2:	69f9      	ldr	r1, [r7, #28]
 80080b4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80080b8:	e9c1 2306 	strd	r2, r3, [r1, #24]
	 scurve->v1 = v1;
 80080bc:	69f9      	ldr	r1, [r7, #28]
 80080be:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80080c2:	e9c1 2308 	strd	r2, r3, [r1, #32]
	 scurve->j_max = j_max;
 80080c6:	69f9      	ldr	r1, [r7, #28]
 80080c8:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80080cc:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	 scurve->s0   = q0;
 80080d0:	69f9      	ldr	r1, [r7, #28]
 80080d2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80080d6:	e9c1 2302 	strd	r2, r3, [r1, #8]
	 scurve->s1   = q1;
 80080da:	69f9      	ldr	r1, [r7, #28]
 80080dc:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 80080e0:	e9c1 2304 	strd	r2, r3, [r1, #16]
	 scurve->num_of_phase = no_phases;
 80080e4:	69fb      	ldr	r3, [r7, #28]
 80080e6:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 80080ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	 scurve->num_of_sampling = no_sample;
 80080ee:	69fb      	ldr	r3, [r7, #28]
 80080f0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80080f2:	669a      	str	r2, [r3, #104]	; 0x68
	 scurve->total_s = total_s;
 80080f4:	69f9      	ldr	r1, [r7, #28]
 80080f6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80080fa:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	 scurve->dir = dir;
 80080fe:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8008102:	f7f8 fd29 	bl	8000b58 <__aeabi_d2iz>
 8008106:	4603      	mov	r3, r0
 8008108:	b25a      	sxtb	r2, r3
 800810a:	69fb      	ldr	r3, [r7, #28]
 800810c:	701a      	strb	r2, [r3, #0]

	 scurve->a_current = 0;
 800810e:	69f9      	ldr	r1, [r7, #28]
 8008110:	f04f 0200 	mov.w	r2, #0
 8008114:	f04f 0300 	mov.w	r3, #0
 8008118:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
	 scurve->v_current = 0;
 800811c:	69f9      	ldr	r1, [r7, #28]
 800811e:	f04f 0200 	mov.w	r2, #0
 8008122:	f04f 0300 	mov.w	r3, #0
 8008126:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
	 scurve->s_current = 0;
 800812a:	69f9      	ldr	r1, [r7, #28]
 800812c:	f04f 0200 	mov.w	r2, #0
 8008130:	f04f 0300 	mov.w	r3, #0
 8008134:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
	 scurve->v_1 = v_1;
 8008138:	69f9      	ldr	r1, [r7, #28]
 800813a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800813e:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	 scurve->v_2 = v_2;
 8008142:	69f9      	ldr	r1, [r7, #28]
 8008144:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008148:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	 scurve->v_3 = v_3;
 800814c:	69f9      	ldr	r1, [r7, #28]
 800814e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008152:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
	 scurve->v_4 = v_4;
 8008156:	69f9      	ldr	r1, [r7, #28]
 8008158:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800815c:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
	 scurve->s_1 = s_1;
 8008160:	69f9      	ldr	r1, [r7, #28]
 8008162:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008166:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
	 scurve->s_2 = s_2;
 800816a:	69f9      	ldr	r1, [r7, #28]
 800816c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008170:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
	 scurve->s_3 = s_3;
 8008174:	69f9      	ldr	r1, [r7, #28]
 8008176:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800817a:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
	 scurve->s_4 = s_4;
 800817e:	69f9      	ldr	r1, [r7, #28]
 8008180:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008184:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0

	 return SCARA_STATUS_OK;
 8008188:	2300      	movs	r3, #0
}
 800818a:	4618      	mov	r0, r3
 800818c:	37e8      	adds	r7, #232	; 0xe8
 800818e:	46bd      	mov	sp, r7
 8008190:	bdb0      	pop	{r4, r5, r7, pc}
 8008192:	bf00      	nop
 8008194:	f3af 8000 	nop.w
 8008198:	40000000 	.word	0x40000000
 800819c:	3f847ae1 	.word	0x3f847ae1
 80081a0:	40100000 	.word	0x40100000
 80081a4:	3fe00000 	.word	0x3fe00000
 80081a8:	40180000 	.word	0x40180000

080081ac <scaraTestFlowDuty>:

SCARA_StatusTypeDef scaraTestFlowDuty(double time, SCARA_PositionTypeDef *pos_Next, SCARA_PositionTypeDef pos_Current)
{
 80081ac:	b082      	sub	sp, #8
 80081ae:	b5b0      	push	{r4, r5, r7, lr}
 80081b0:	b0e6      	sub	sp, #408	; 0x198
 80081b2:	af2e      	add	r7, sp, #184	; 0xb8
 80081b4:	ed87 0b02 	vstr	d0, [r7, #8]
 80081b8:	6078      	str	r0, [r7, #4]
 80081ba:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 80081be:	e881 000c 	stmia.w	r1, {r2, r3}
	double current_s;
	SCARA_StatusTypeDef status1;
	SCARA_PositionTypeDef positionCompute;
	current_s = time*myDUTY.task.trajectory_3d.lspb.v_design;
 80081c2:	4b2d      	ldr	r3, [pc, #180]	; (8008278 <scaraTestFlowDuty+0xcc>)
 80081c4:	e9d3 2350 	ldrd	r2, r3, [r3, #320]	; 0x140
 80081c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80081cc:	f7f8 fa14 	bl	80005f8 <__aeabi_dmul>
 80081d0:	4602      	mov	r2, r0
 80081d2:	460b      	mov	r3, r1
 80081d4:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
	status1 = scaraFlowLine(&(myDUTY.task.path.line), current_s);
 80081d8:	ed97 0b36 	vldr	d0, [r7, #216]	; 0xd8
 80081dc:	4827      	ldr	r0, [pc, #156]	; (800827c <scaraTestFlowDuty+0xd0>)
 80081de:	f000 fbd3 	bl	8008988 <scaraFlowLine>
 80081e2:	4603      	mov	r3, r0
 80081e4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	positionCompute.x = myDUTY.task.path.line.x_current;
 80081e8:	4b23      	ldr	r3, [pc, #140]	; (8008278 <scaraTestFlowDuty+0xcc>)
 80081ea:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80081ee:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	positionCompute.y = myDUTY.task.path.line.y_current;
 80081f2:	4b21      	ldr	r3, [pc, #132]	; (8008278 <scaraTestFlowDuty+0xcc>)
 80081f4:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80081f8:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	positionCompute.z = myDUTY.task.path.line.z_current;
 80081fc:	4b1e      	ldr	r3, [pc, #120]	; (8008278 <scaraTestFlowDuty+0xcc>)
 80081fe:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8008202:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	positionCompute.roll = myDUTY.task.roll_start + myDUTY.task.trajectory_roll.lspb.v_design*time;
 8008206:	4b1c      	ldr	r3, [pc, #112]	; (8008278 <scaraTestFlowDuty+0xcc>)
 8008208:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800820c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008210:	4b19      	ldr	r3, [pc, #100]	; (8008278 <scaraTestFlowDuty+0xcc>)
 8008212:	e9d3 01b0 	ldrd	r0, r1, [r3, #704]	; 0x2c0
 8008216:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800821a:	f7f8 f9ed 	bl	80005f8 <__aeabi_dmul>
 800821e:	4602      	mov	r2, r0
 8008220:	460b      	mov	r3, r1
 8008222:	4620      	mov	r0, r4
 8008224:	4629      	mov	r1, r5
 8008226:	f7f8 f831 	bl	800028c <__adddf3>
 800822a:	4602      	mov	r2, r0
 800822c:	460b      	mov	r3, r1
 800822e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	if ( FALSE == kinematicInverse(&positionCompute, pos_Current)) {
 8008232:	f107 0410 	add.w	r4, r7, #16
 8008236:	4668      	mov	r0, sp
 8008238:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800823c:	22b8      	movs	r2, #184	; 0xb8
 800823e:	4619      	mov	r1, r3
 8008240:	f00d fd66 	bl	8015d10 <memcpy>
 8008244:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8008248:	cb0c      	ldmia	r3, {r2, r3}
 800824a:	4620      	mov	r0, r4
 800824c:	f7fb fc2c 	bl	8003aa8 <kinematicInverse>
 8008250:	4603      	mov	r3, r0
 8008252:	2b00      	cmp	r3, #0
 8008254:	d101      	bne.n	800825a <scaraTestFlowDuty+0xae>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8008256:	2307      	movs	r3, #7
 8008258:	e007      	b.n	800826a <scaraTestFlowDuty+0xbe>
	} else {
		memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 800825a:	f107 0310 	add.w	r3, r7, #16
 800825e:	22c0      	movs	r2, #192	; 0xc0
 8008260:	4619      	mov	r1, r3
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f00d fd54 	bl	8015d10 <memcpy>
	}
	return SCARA_STATUS_OK;
 8008268:	2300      	movs	r3, #0
}
 800826a:	4618      	mov	r0, r3
 800826c:	37e0      	adds	r7, #224	; 0xe0
 800826e:	46bd      	mov	sp, r7
 8008270:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8008274:	b002      	add	sp, #8
 8008276:	4770      	bx	lr
 8008278:	20004f30 	.word	0x20004f30
 800827c:	20004f40 	.word	0x20004f40

08008280 <scaraFlowDuty>:

/* Compute new x, y , z, theta1, theta2 , d3, theta4 corresponding to time */
SCARA_StatusTypeDef	scaraFlowDuty		(double time,
										SCARA_PositionTypeDef *pos_Next ,
										SCARA_PositionTypeDef pos_Current) {
 8008280:	b082      	sub	sp, #8
 8008282:	b5b0      	push	{r4, r5, r7, lr}
 8008284:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 8008288:	af2e      	add	r7, sp, #184	; 0xb8
 800828a:	f107 0108 	add.w	r1, r7, #8
 800828e:	ed81 0b00 	vstr	d0, [r1]
 8008292:	1d39      	adds	r1, r7, #4
 8008294:	6008      	str	r0, [r1, #0]
 8008296:	f507 71b8 	add.w	r1, r7, #368	; 0x170
 800829a:	e881 000c 	stmia.w	r1, {r2, r3}
	SCARA_StatusTypeDef status1, status2, status3, status4;
	SCARA_PositionTypeDef	positionCompute;
	// Update time
	positionCompute.t = time;
 800829e:	f107 0110 	add.w	r1, r7, #16
 80082a2:	f107 0308 	add.w	r3, r7, #8
 80082a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082aa:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	/*---- Task space ----*/
	if ( DUTY_SPACE_TASK == myDUTY.space_type) {
 80082ae:	4ba6      	ldr	r3, [pc, #664]	; (8008548 <scaraFlowDuty+0x2c8>)
 80082b0:	781b      	ldrb	r3, [r3, #0]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	f040 8154 	bne.w	8008560 <scaraFlowDuty+0x2e0>
		double s, angle, x, y, z, v, v_angle;
		int8_t	dir_roll;
		//---Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.task.trajectory_3d.trajectory_type) {
 80082b8:	4ba3      	ldr	r3, [pc, #652]	; (8008548 <scaraFlowDuty+0x2c8>)
 80082ba:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d129      	bne.n	8008316 <scaraFlowDuty+0x96>
//			s = myDUTY.task.trajectory_3d.lspb.s_current;
//			v = myDUTY.task.trajectory_3d.lspb.v_current;
//			angle = myDUTY.task.trajectory_roll.lspb.s_current;
//			v_angle = myDUTY.task.trajectory_roll.lspb.v_current;
//			dir_roll = myDUTY.task.trajectory_roll.lspb.dir;
			status1 = scaraFlowLSPB1(&(myDUTY.task.trajectory_3d.lspb), time);
 80082c2:	f107 0308 	add.w	r3, r7, #8
 80082c6:	ed93 0b00 	vldr	d0, [r3]
 80082ca:	48a0      	ldr	r0, [pc, #640]	; (800854c <scaraFlowDuty+0x2cc>)
 80082cc:	f000 fc6a 	bl	8008ba4 <scaraFlowLSPB1>
 80082d0:	4603      	mov	r3, r0
 80082d2:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			v = myDUTY.task.trajectory_3d.lspb.v_current;
 80082d6:	4b9c      	ldr	r3, [pc, #624]	; (8008548 <scaraFlowDuty+0x2c8>)
 80082d8:	e9d3 2362 	ldrd	r2, r3, [r3, #392]	; 0x188
 80082dc:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
			s = myDUTY.task.trajectory_3d.lspb.s_current;
 80082e0:	4b99      	ldr	r3, [pc, #612]	; (8008548 <scaraFlowDuty+0x2c8>)
 80082e2:	e9d3 2364 	ldrd	r2, r3, [r3, #400]	; 0x190
 80082e6:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
			angle = myDUTY.task.trajectory_roll.linear.constant_v*time;
 80082ea:	4b97      	ldr	r3, [pc, #604]	; (8008548 <scaraFlowDuty+0x2c8>)
 80082ec:	e9d3 23fc 	ldrd	r2, r3, [r3, #1008]	; 0x3f0
 80082f0:	f107 0108 	add.w	r1, r7, #8
 80082f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082f8:	f7f8 f97e 	bl	80005f8 <__aeabi_dmul>
 80082fc:	4602      	mov	r2, r0
 80082fe:	460b      	mov	r3, r1
 8008300:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 8008304:	4b90      	ldr	r3, [pc, #576]	; (8008548 <scaraFlowDuty+0x2c8>)
 8008306:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 800830a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
			status2 = SCARA_STATUS_OK;
 800830e:	2300      	movs	r3, #0
 8008310:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 8008314:	e05f      	b.n	80083d6 <scaraFlowDuty+0x156>
			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.task.trajectory_3d.trajectory_type) {
 8008316:	4b8c      	ldr	r3, [pc, #560]	; (8008548 <scaraFlowDuty+0x2c8>)
 8008318:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800831c:	2b01      	cmp	r3, #1
 800831e:	d12d      	bne.n	800837c <scaraFlowDuty+0xfc>
			status1 = scaraFLowScurve(&(myDUTY.task.trajectory_3d.scurve), time);
 8008320:	f107 0308 	add.w	r3, r7, #8
 8008324:	ed93 0b00 	vldr	d0, [r3]
 8008328:	4889      	ldr	r0, [pc, #548]	; (8008550 <scaraFlowDuty+0x2d0>)
 800832a:	f000 ff6d 	bl	8009208 <scaraFLowScurve>
 800832e:	4603      	mov	r3, r0
 8008330:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = scaraFLowScurve(&(myDUTY.task.trajectory_roll.scurve), time);
 8008334:	f107 0308 	add.w	r3, r7, #8
 8008338:	ed93 0b00 	vldr	d0, [r3]
 800833c:	4885      	ldr	r0, [pc, #532]	; (8008554 <scaraFlowDuty+0x2d4>)
 800833e:	f000 ff63 	bl	8009208 <scaraFLowScurve>
 8008342:	4603      	mov	r3, r0
 8008344:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
			s = myDUTY.task.trajectory_3d.scurve.s_current;
 8008348:	4b7f      	ldr	r3, [pc, #508]	; (8008548 <scaraFlowDuty+0x2c8>)
 800834a:	e9d3 2398 	ldrd	r2, r3, [r3, #608]	; 0x260
 800834e:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
			v = myDUTY.task.trajectory_3d.scurve.v_current;
 8008352:	4b7d      	ldr	r3, [pc, #500]	; (8008548 <scaraFlowDuty+0x2c8>)
 8008354:	e9d3 2396 	ldrd	r2, r3, [r3, #600]	; 0x258
 8008358:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
			angle = myDUTY.task.trajectory_roll.scurve.s_current;
 800835c:	4b7a      	ldr	r3, [pc, #488]	; (8008548 <scaraFlowDuty+0x2c8>)
 800835e:	e9d3 23f8 	ldrd	r2, r3, [r3, #992]	; 0x3e0
 8008362:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			v_angle = myDUTY.task.trajectory_roll.scurve.v_current;
 8008366:	4b78      	ldr	r3, [pc, #480]	; (8008548 <scaraFlowDuty+0x2c8>)
 8008368:	e9d3 23f6 	ldrd	r2, r3, [r3, #984]	; 0x3d8
 800836c:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
			dir_roll = myDUTY.task.trajectory_roll.scurve.dir;
 8008370:	4b75      	ldr	r3, [pc, #468]	; (8008548 <scaraFlowDuty+0x2c8>)
 8008372:	f893 3318 	ldrb.w	r3, [r3, #792]	; 0x318
 8008376:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 800837a:	e02c      	b.n	80083d6 <scaraFlowDuty+0x156>
		}else if( DUTY_TRAJECTORY_LINEAR == myDUTY.task.trajectory_3d.trajectory_type){
 800837c:	4b72      	ldr	r3, [pc, #456]	; (8008548 <scaraFlowDuty+0x2c8>)
 800837e:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8008382:	2b02      	cmp	r3, #2
 8008384:	d125      	bne.n	80083d2 <scaraFlowDuty+0x152>
			s = time*myDUTY.task.trajectory_3d.linear.constant_v;
 8008386:	4b70      	ldr	r3, [pc, #448]	; (8008548 <scaraFlowDuty+0x2c8>)
 8008388:	e9d3 239c 	ldrd	r2, r3, [r3, #624]	; 0x270
 800838c:	f107 0108 	add.w	r1, r7, #8
 8008390:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008394:	f7f8 f930 	bl	80005f8 <__aeabi_dmul>
 8008398:	4602      	mov	r2, r0
 800839a:	460b      	mov	r3, r1
 800839c:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
			angle = myDUTY.task.trajectory_roll.linear.constant_v*time;
 80083a0:	4b69      	ldr	r3, [pc, #420]	; (8008548 <scaraFlowDuty+0x2c8>)
 80083a2:	e9d3 23fc 	ldrd	r2, r3, [r3, #1008]	; 0x3f0
 80083a6:	f107 0108 	add.w	r1, r7, #8
 80083aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083ae:	f7f8 f923 	bl	80005f8 <__aeabi_dmul>
 80083b2:	4602      	mov	r2, r0
 80083b4:	460b      	mov	r3, r1
 80083b6:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 80083ba:	4b63      	ldr	r3, [pc, #396]	; (8008548 <scaraFlowDuty+0x2c8>)
 80083bc:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 80083c0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
			status1 = SCARA_STATUS_OK;
 80083c4:	2300      	movs	r3, #0
 80083c6:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = SCARA_STATUS_OK;
 80083ca:	2300      	movs	r3, #0
 80083cc:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 80083d0:	e001      	b.n	80083d6 <scaraFlowDuty+0x156>
		}else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 80083d2:	2305      	movs	r3, #5
 80083d4:	e2cd      	b.n	8008972 <scaraFlowDuty+0x6f2>
		}

		if ( SCARA_STATUS_OK != status1) {
 80083d6:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d002      	beq.n	80083e4 <scaraFlowDuty+0x164>
			return status1;
 80083de:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 80083e2:	e2c6      	b.n	8008972 <scaraFlowDuty+0x6f2>
		}
		if ( SCARA_STATUS_OK != status2) {
 80083e4:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d002      	beq.n	80083f2 <scaraFlowDuty+0x172>
			return status2;
 80083ec:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 80083f0:	e2bf      	b.n	8008972 <scaraFlowDuty+0x6f2>
		}

		//---Path flowing
			// Straight line
		if( DUTY_PATH_LINE == myDUTY.task.path.path_type) {
 80083f2:	4b55      	ldr	r3, [pc, #340]	; (8008548 <scaraFlowDuty+0x2c8>)
 80083f4:	7a1b      	ldrb	r3, [r3, #8]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d117      	bne.n	800842a <scaraFlowDuty+0x1aa>
			status1 = scaraFlowLine(&(myDUTY.task.path.line), s);
 80083fa:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 80083fe:	4856      	ldr	r0, [pc, #344]	; (8008558 <scaraFlowDuty+0x2d8>)
 8008400:	f000 fac2 	bl	8008988 <scaraFlowLine>
 8008404:	4603      	mov	r3, r0
 8008406:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			x = myDUTY.task.path.line.x_current;
 800840a:	4b4f      	ldr	r3, [pc, #316]	; (8008548 <scaraFlowDuty+0x2c8>)
 800840c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8008410:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			y = myDUTY.task.path.line.y_current;
 8008414:	4b4c      	ldr	r3, [pc, #304]	; (8008548 <scaraFlowDuty+0x2c8>)
 8008416:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800841a:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
			z = myDUTY.task.path.line.z_current;
 800841e:	4b4a      	ldr	r3, [pc, #296]	; (8008548 <scaraFlowDuty+0x2c8>)
 8008420:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8008424:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
 8008428:	e01d      	b.n	8008466 <scaraFlowDuty+0x1e6>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == myDUTY.task.path.path_type) {
 800842a:	4b47      	ldr	r3, [pc, #284]	; (8008548 <scaraFlowDuty+0x2c8>)
 800842c:	7a1b      	ldrb	r3, [r3, #8]
 800842e:	2b01      	cmp	r3, #1
 8008430:	d117      	bne.n	8008462 <scaraFlowDuty+0x1e2>
			status1 = scaraFlowCircle(&(myDUTY.task.path.circle), s);
 8008432:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 8008436:	4849      	ldr	r0, [pc, #292]	; (800855c <scaraFlowDuty+0x2dc>)
 8008438:	f000 fb2e 	bl	8008a98 <scaraFlowCircle>
 800843c:	4603      	mov	r3, r0
 800843e:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			x = myDUTY.task.path.circle.x_current;
 8008442:	4b41      	ldr	r3, [pc, #260]	; (8008548 <scaraFlowDuty+0x2c8>)
 8008444:	e9d3 233e 	ldrd	r2, r3, [r3, #248]	; 0xf8
 8008448:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			y = myDUTY.task.path.circle.y_current;
 800844c:	4b3e      	ldr	r3, [pc, #248]	; (8008548 <scaraFlowDuty+0x2c8>)
 800844e:	e9d3 2340 	ldrd	r2, r3, [r3, #256]	; 0x100
 8008452:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
			z = myDUTY.task.path.circle.z_current;
 8008456:	4b3c      	ldr	r3, [pc, #240]	; (8008548 <scaraFlowDuty+0x2c8>)
 8008458:	e9d3 2342 	ldrd	r2, r3, [r3, #264]	; 0x108
 800845c:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
 8008460:	e001      	b.n	8008466 <scaraFlowDuty+0x1e6>
		} else {
			return SCARA_STATUS_ERROR_TASK;
 8008462:	2303      	movs	r3, #3
 8008464:	e285      	b.n	8008972 <scaraFlowDuty+0x6f2>
		}

		positionCompute.x 		= x;
 8008466:	f107 0110 	add.w	r1, r7, #16
 800846a:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 800846e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
		positionCompute.y		= y;
 8008472:	f107 0110 	add.w	r1, r7, #16
 8008476:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800847a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		positionCompute.z 		= z;
 800847e:	f107 0110 	add.w	r1, r7, #16
 8008482:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8008486:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		positionCompute.roll 	= myDUTY.task.roll_start + angle*dir_roll;
 800848a:	4b2f      	ldr	r3, [pc, #188]	; (8008548 <scaraFlowDuty+0x2c8>)
 800848c:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8008490:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008494:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8008498:	4618      	mov	r0, r3
 800849a:	f7f8 f843 	bl	8000524 <__aeabi_i2d>
 800849e:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80084a2:	f7f8 f8a9 	bl	80005f8 <__aeabi_dmul>
 80084a6:	4602      	mov	r2, r0
 80084a8:	460b      	mov	r3, r1
 80084aa:	4620      	mov	r0, r4
 80084ac:	4629      	mov	r1, r5
 80084ae:	f7f7 feed 	bl	800028c <__adddf3>
 80084b2:	4602      	mov	r2, r0
 80084b4:	460b      	mov	r3, r1
 80084b6:	f107 0110 	add.w	r1, r7, #16
 80084ba:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

		positionCompute.q		= s;
 80084be:	f107 0110 	add.w	r1, r7, #16
 80084c2:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 80084c6:	e9c1 2300 	strd	r2, r3, [r1]
		positionCompute.q_roll  = angle;
 80084ca:	f107 0110 	add.w	r1, r7, #16
 80084ce:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80084d2:	e9c1 2302 	strd	r2, r3, [r1, #8]

		positionCompute.v_3d    = v;
 80084d6:	f107 0110 	add.w	r1, r7, #16
 80084da:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80084de:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
		positionCompute.v_roll  = v_angle;
 80084e2:	f107 0110 	add.w	r1, r7, #16
 80084e6:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80084ea:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0

		positionCompute.total_time = myDUTY.time_total;
 80084ee:	4b16      	ldr	r3, [pc, #88]	; (8008548 <scaraFlowDuty+0x2c8>)
 80084f0:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80084f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f8:	f107 0110 	add.w	r1, r7, #16
 80084fc:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		positionCompute.t		= time;
 8008500:	f107 0110 	add.w	r1, r7, #16
 8008504:	f107 0308 	add.w	r3, r7, #8
 8008508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800850c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		if ( FALSE == kinematicInverse(&positionCompute, pos_Current)) {
 8008510:	f107 0410 	add.w	r4, r7, #16
 8008514:	4668      	mov	r0, sp
 8008516:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800851a:	22b8      	movs	r2, #184	; 0xb8
 800851c:	4619      	mov	r1, r3
 800851e:	f00d fbf7 	bl	8015d10 <memcpy>
 8008522:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8008526:	cb0c      	ldmia	r3, {r2, r3}
 8008528:	4620      	mov	r0, r4
 800852a:	f7fb fabd 	bl	8003aa8 <kinematicInverse>
 800852e:	4603      	mov	r3, r0
 8008530:	2b00      	cmp	r3, #0
 8008532:	d101      	bne.n	8008538 <scaraFlowDuty+0x2b8>
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8008534:	2307      	movs	r3, #7
 8008536:	e21c      	b.n	8008972 <scaraFlowDuty+0x6f2>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 8008538:	f107 0110 	add.w	r1, r7, #16
 800853c:	1d3b      	adds	r3, r7, #4
 800853e:	22c0      	movs	r2, #192	; 0xc0
 8008540:	6818      	ldr	r0, [r3, #0]
 8008542:	f00d fbe5 	bl	8015d10 <memcpy>
 8008546:	e213      	b.n	8008970 <scaraFlowDuty+0x6f0>
 8008548:	20004f30 	.word	0x20004f30
 800854c:	20005048 	.word	0x20005048
 8008550:	200050c8 	.word	0x200050c8
 8008554:	20005248 	.word	0x20005248
 8008558:	20004f40 	.word	0x20004f40
 800855c:	20004fb0 	.word	0x20004fb0
		}

	/*---- Joint space -----*/
	} else if (DUTY_SPACE_JOINT == myDUTY.space_type) {
 8008560:	4b8b      	ldr	r3, [pc, #556]	; (8008790 <scaraFlowDuty+0x510>)
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	2b01      	cmp	r3, #1
 8008566:	f040 8201 	bne.w	800896c <scaraFlowDuty+0x6ec>
		double s0, s1, s2, s3;
		double v0, v1, v2, v3;
		int8_t dir0, dir1, dir2, dir3;
		// Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.joint.trajectory[0].trajectory_type) {
 800856a:	4b89      	ldr	r3, [pc, #548]	; (8008790 <scaraFlowDuty+0x510>)
 800856c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8008570:	2b00      	cmp	r3, #0
 8008572:	d174      	bne.n	800865e <scaraFlowDuty+0x3de>
			status1 = scaraFlowLSPB(&(myDUTY.joint.trajectory[0].lspb), time);
 8008574:	f107 0308 	add.w	r3, r7, #8
 8008578:	ed93 0b00 	vldr	d0, [r3]
 800857c:	4885      	ldr	r0, [pc, #532]	; (8008794 <scaraFlowDuty+0x514>)
 800857e:	f000 fca3 	bl	8008ec8 <scaraFlowLSPB>
 8008582:	4603      	mov	r3, r0
 8008584:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = scaraFlowLSPB(&(myDUTY.joint.trajectory[1].lspb), time);
 8008588:	f107 0308 	add.w	r3, r7, #8
 800858c:	ed93 0b00 	vldr	d0, [r3]
 8008590:	4881      	ldr	r0, [pc, #516]	; (8008798 <scaraFlowDuty+0x518>)
 8008592:	f000 fc99 	bl	8008ec8 <scaraFlowLSPB>
 8008596:	4603      	mov	r3, r0
 8008598:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
			status3 = scaraFlowLSPB(&(myDUTY.joint.trajectory[2].lspb), time);
 800859c:	f107 0308 	add.w	r3, r7, #8
 80085a0:	ed93 0b00 	vldr	d0, [r3]
 80085a4:	487d      	ldr	r0, [pc, #500]	; (800879c <scaraFlowDuty+0x51c>)
 80085a6:	f000 fc8f 	bl	8008ec8 <scaraFlowLSPB>
 80085aa:	4603      	mov	r3, r0
 80085ac:	f887 315d 	strb.w	r3, [r7, #349]	; 0x15d
			status4 = scaraFlowLSPB(&(myDUTY.joint.trajectory[3].lspb), time);
 80085b0:	f107 0308 	add.w	r3, r7, #8
 80085b4:	ed93 0b00 	vldr	d0, [r3]
 80085b8:	4879      	ldr	r0, [pc, #484]	; (80087a0 <scaraFlowDuty+0x520>)
 80085ba:	f000 fc85 	bl	8008ec8 <scaraFlowLSPB>
 80085be:	4603      	mov	r3, r0
 80085c0:	f887 315c 	strb.w	r3, [r7, #348]	; 0x15c

			dir0 = myDUTY.joint.trajectory[0].lspb.dir;
 80085c4:	4b72      	ldr	r3, [pc, #456]	; (8008790 <scaraFlowDuty+0x510>)
 80085c6:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 80085ca:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
			dir1 = myDUTY.joint.trajectory[1].lspb.dir;
 80085ce:	4b70      	ldr	r3, [pc, #448]	; (8008790 <scaraFlowDuty+0x510>)
 80085d0:	f893 35a0 	ldrb.w	r3, [r3, #1440]	; 0x5a0
 80085d4:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
			dir2 = myDUTY.joint.trajectory[2].lspb.dir;
 80085d8:	4b6d      	ldr	r3, [pc, #436]	; (8008790 <scaraFlowDuty+0x510>)
 80085da:	f893 3720 	ldrb.w	r3, [r3, #1824]	; 0x720
 80085de:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
			dir3 = myDUTY.joint.trajectory[3].lspb.dir;
 80085e2:	4b6b      	ldr	r3, [pc, #428]	; (8008790 <scaraFlowDuty+0x510>)
 80085e4:	f893 38a0 	ldrb.w	r3, [r3, #2208]	; 0x8a0
 80085e8:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4

			s0 = myDUTY.joint.trajectory[0].lspb.s_current;
 80085ec:	4b68      	ldr	r3, [pc, #416]	; (8008790 <scaraFlowDuty+0x510>)
 80085ee:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 80085f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085f6:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
			s1 = myDUTY.joint.trajectory[1].lspb.s_current;
 80085fa:	4b65      	ldr	r3, [pc, #404]	; (8008790 <scaraFlowDuty+0x510>)
 80085fc:	f503 63c3 	add.w	r3, r3, #1560	; 0x618
 8008600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008604:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
			s2 = myDUTY.joint.trajectory[2].lspb.s_current;
 8008608:	4b61      	ldr	r3, [pc, #388]	; (8008790 <scaraFlowDuty+0x510>)
 800860a:	f503 63f3 	add.w	r3, r3, #1944	; 0x798
 800860e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008612:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
			s3 = myDUTY.joint.trajectory[3].lspb.s_current;
 8008616:	4b5e      	ldr	r3, [pc, #376]	; (8008790 <scaraFlowDuty+0x510>)
 8008618:	f603 1318 	addw	r3, r3, #2328	; 0x918
 800861c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008620:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8

			v0 = myDUTY.joint.trajectory[0].lspb.v_current;
 8008624:	4b5a      	ldr	r3, [pc, #360]	; (8008790 <scaraFlowDuty+0x510>)
 8008626:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 800862a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800862e:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
			v1 = myDUTY.joint.trajectory[1].lspb.v_current;
 8008632:	4b57      	ldr	r3, [pc, #348]	; (8008790 <scaraFlowDuty+0x510>)
 8008634:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 8008638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800863c:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
			v2 = myDUTY.joint.trajectory[2].lspb.v_current;
 8008640:	4b53      	ldr	r3, [pc, #332]	; (8008790 <scaraFlowDuty+0x510>)
 8008642:	f503 63f2 	add.w	r3, r3, #1936	; 0x790
 8008646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800864a:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
			v3 = myDUTY.joint.trajectory[3].lspb.v_current;
 800864e:	4b50      	ldr	r3, [pc, #320]	; (8008790 <scaraFlowDuty+0x510>)
 8008650:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 8008654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008658:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
 800865c:	e07b      	b.n	8008756 <scaraFlowDuty+0x4d6>

			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.joint.trajectory[0].trajectory_type) {
 800865e:	4b4c      	ldr	r3, [pc, #304]	; (8008790 <scaraFlowDuty+0x510>)
 8008660:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8008664:	2b01      	cmp	r3, #1
 8008666:	d174      	bne.n	8008752 <scaraFlowDuty+0x4d2>
			status1 = scaraFLowScurve(&(myDUTY.joint.trajectory[0].scurve), time);
 8008668:	f107 0308 	add.w	r3, r7, #8
 800866c:	ed93 0b00 	vldr	d0, [r3]
 8008670:	484c      	ldr	r0, [pc, #304]	; (80087a4 <scaraFlowDuty+0x524>)
 8008672:	f000 fdc9 	bl	8009208 <scaraFLowScurve>
 8008676:	4603      	mov	r3, r0
 8008678:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = scaraFLowScurve(&(myDUTY.joint.trajectory[1].scurve), time);
 800867c:	f107 0308 	add.w	r3, r7, #8
 8008680:	ed93 0b00 	vldr	d0, [r3]
 8008684:	4848      	ldr	r0, [pc, #288]	; (80087a8 <scaraFlowDuty+0x528>)
 8008686:	f000 fdbf 	bl	8009208 <scaraFLowScurve>
 800868a:	4603      	mov	r3, r0
 800868c:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
			status3 = scaraFLowScurve(&(myDUTY.joint.trajectory[2].scurve), time);
 8008690:	f107 0308 	add.w	r3, r7, #8
 8008694:	ed93 0b00 	vldr	d0, [r3]
 8008698:	4844      	ldr	r0, [pc, #272]	; (80087ac <scaraFlowDuty+0x52c>)
 800869a:	f000 fdb5 	bl	8009208 <scaraFLowScurve>
 800869e:	4603      	mov	r3, r0
 80086a0:	f887 315d 	strb.w	r3, [r7, #349]	; 0x15d
			status4 = scaraFLowScurve(&(myDUTY.joint.trajectory[3].scurve), time);
 80086a4:	f107 0308 	add.w	r3, r7, #8
 80086a8:	ed93 0b00 	vldr	d0, [r3]
 80086ac:	4840      	ldr	r0, [pc, #256]	; (80087b0 <scaraFlowDuty+0x530>)
 80086ae:	f000 fdab 	bl	8009208 <scaraFLowScurve>
 80086b2:	4603      	mov	r3, r0
 80086b4:	f887 315c 	strb.w	r3, [r7, #348]	; 0x15c
			dir0 = myDUTY.joint.trajectory[0].scurve.dir;
 80086b8:	4b35      	ldr	r3, [pc, #212]	; (8008790 <scaraFlowDuty+0x510>)
 80086ba:	f893 34a0 	ldrb.w	r3, [r3, #1184]	; 0x4a0
 80086be:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
			dir1 = myDUTY.joint.trajectory[1].scurve.dir;
 80086c2:	4b33      	ldr	r3, [pc, #204]	; (8008790 <scaraFlowDuty+0x510>)
 80086c4:	f893 3620 	ldrb.w	r3, [r3, #1568]	; 0x620
 80086c8:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
			dir2 = myDUTY.joint.trajectory[2].scurve.dir;
 80086cc:	4b30      	ldr	r3, [pc, #192]	; (8008790 <scaraFlowDuty+0x510>)
 80086ce:	f893 37a0 	ldrb.w	r3, [r3, #1952]	; 0x7a0
 80086d2:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
			dir3 = myDUTY.joint.trajectory[3].scurve.dir;
 80086d6:	4b2e      	ldr	r3, [pc, #184]	; (8008790 <scaraFlowDuty+0x510>)
 80086d8:	f893 3920 	ldrb.w	r3, [r3, #2336]	; 0x920
 80086dc:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
			s0 = myDUTY.joint.trajectory[0].scurve.s_current;
 80086e0:	4b2b      	ldr	r3, [pc, #172]	; (8008790 <scaraFlowDuty+0x510>)
 80086e2:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 80086e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ea:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
			s1 = myDUTY.joint.trajectory[1].scurve.s_current;
 80086ee:	4b28      	ldr	r3, [pc, #160]	; (8008790 <scaraFlowDuty+0x510>)
 80086f0:	f503 63dd 	add.w	r3, r3, #1768	; 0x6e8
 80086f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f8:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
			s2 = myDUTY.joint.trajectory[2].scurve.s_current;
 80086fc:	4b24      	ldr	r3, [pc, #144]	; (8008790 <scaraFlowDuty+0x510>)
 80086fe:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8008702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008706:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
			s3 = myDUTY.joint.trajectory[3].scurve.s_current;
 800870a:	4b21      	ldr	r3, [pc, #132]	; (8008790 <scaraFlowDuty+0x510>)
 800870c:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 8008710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008714:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8

			v0 = myDUTY.joint.trajectory[0].scurve.v_current;
 8008718:	4b1d      	ldr	r3, [pc, #116]	; (8008790 <scaraFlowDuty+0x510>)
 800871a:	f503 63ac 	add.w	r3, r3, #1376	; 0x560
 800871e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008722:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
			v1 = myDUTY.joint.trajectory[1].scurve.v_current;
 8008726:	4b1a      	ldr	r3, [pc, #104]	; (8008790 <scaraFlowDuty+0x510>)
 8008728:	f503 63dc 	add.w	r3, r3, #1760	; 0x6e0
 800872c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008730:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
			v2 = myDUTY.joint.trajectory[2].scurve.v_current;
 8008734:	4b16      	ldr	r3, [pc, #88]	; (8008790 <scaraFlowDuty+0x510>)
 8008736:	f503 6306 	add.w	r3, r3, #2144	; 0x860
 800873a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800873e:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
			v3 = myDUTY.joint.trajectory[3].scurve.v_current;
 8008742:	4b13      	ldr	r3, [pc, #76]	; (8008790 <scaraFlowDuty+0x510>)
 8008744:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
 8008748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800874c:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
 8008750:	e001      	b.n	8008756 <scaraFlowDuty+0x4d6>

		} else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8008752:	2305      	movs	r3, #5
 8008754:	e10d      	b.n	8008972 <scaraFlowDuty+0x6f2>
		}
		// Check init status
		if ( SCARA_STATUS_OK != status1) {
 8008756:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 800875a:	2b00      	cmp	r3, #0
 800875c:	d002      	beq.n	8008764 <scaraFlowDuty+0x4e4>
			return status1;
 800875e:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8008762:	e106      	b.n	8008972 <scaraFlowDuty+0x6f2>
		}
		if ( SCARA_STATUS_OK != status2) {
 8008764:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8008768:	2b00      	cmp	r3, #0
 800876a:	d002      	beq.n	8008772 <scaraFlowDuty+0x4f2>
			return status2;
 800876c:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8008770:	e0ff      	b.n	8008972 <scaraFlowDuty+0x6f2>
		}
		if ( SCARA_STATUS_OK != status3) {
 8008772:	f897 315d 	ldrb.w	r3, [r7, #349]	; 0x15d
 8008776:	2b00      	cmp	r3, #0
 8008778:	d002      	beq.n	8008780 <scaraFlowDuty+0x500>
			return status3;
 800877a:	f897 315d 	ldrb.w	r3, [r7, #349]	; 0x15d
 800877e:	e0f8      	b.n	8008972 <scaraFlowDuty+0x6f2>
		}
		if ( SCARA_STATUS_OK != status4) {
 8008780:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 8008784:	2b00      	cmp	r3, #0
 8008786:	d015      	beq.n	80087b4 <scaraFlowDuty+0x534>
			return status4;
 8008788:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 800878c:	e0f1      	b.n	8008972 <scaraFlowDuty+0x6f2>
 800878e:	bf00      	nop
 8008790:	20004f30 	.word	0x20004f30
 8008794:	20005350 	.word	0x20005350
 8008798:	200054d0 	.word	0x200054d0
 800879c:	20005650 	.word	0x20005650
 80087a0:	200057d0 	.word	0x200057d0
 80087a4:	200053d0 	.word	0x200053d0
 80087a8:	20005550 	.word	0x20005550
 80087ac:	200056d0 	.word	0x200056d0
 80087b0:	20005850 	.word	0x20005850
		}

		positionCompute.Theta1 	= myDUTY.joint.theta1_start + s0*dir0;
 80087b4:	4b73      	ldr	r3, [pc, #460]	; (8008984 <scaraFlowDuty+0x704>)
 80087b6:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 80087ba:	e9d3 4500 	ldrd	r4, r5, [r3]
 80087be:	f997 30d7 	ldrsb.w	r3, [r7, #215]	; 0xd7
 80087c2:	4618      	mov	r0, r3
 80087c4:	f7f7 feae 	bl	8000524 <__aeabi_i2d>
 80087c8:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80087cc:	f7f7 ff14 	bl	80005f8 <__aeabi_dmul>
 80087d0:	4602      	mov	r2, r0
 80087d2:	460b      	mov	r3, r1
 80087d4:	4620      	mov	r0, r4
 80087d6:	4629      	mov	r1, r5
 80087d8:	f7f7 fd58 	bl	800028c <__adddf3>
 80087dc:	4602      	mov	r2, r0
 80087de:	460b      	mov	r3, r1
 80087e0:	f107 0110 	add.w	r1, r7, #16
 80087e4:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		positionCompute.Theta2 	= myDUTY.joint.theta2_start + s1*dir1;
 80087e8:	4b66      	ldr	r3, [pc, #408]	; (8008984 <scaraFlowDuty+0x704>)
 80087ea:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 80087ee:	e9d3 4500 	ldrd	r4, r5, [r3]
 80087f2:	f997 30d6 	ldrsb.w	r3, [r7, #214]	; 0xd6
 80087f6:	4618      	mov	r0, r3
 80087f8:	f7f7 fe94 	bl	8000524 <__aeabi_i2d>
 80087fc:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8008800:	f7f7 fefa 	bl	80005f8 <__aeabi_dmul>
 8008804:	4602      	mov	r2, r0
 8008806:	460b      	mov	r3, r1
 8008808:	4620      	mov	r0, r4
 800880a:	4629      	mov	r1, r5
 800880c:	f7f7 fd3e 	bl	800028c <__adddf3>
 8008810:	4602      	mov	r2, r0
 8008812:	460b      	mov	r3, r1
 8008814:	f107 0110 	add.w	r1, r7, #16
 8008818:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		positionCompute.D3 		= myDUTY.joint.d3_start 	+ s2*dir2;
 800881c:	4b59      	ldr	r3, [pc, #356]	; (8008984 <scaraFlowDuty+0x704>)
 800881e:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 8008822:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008826:	f997 30d5 	ldrsb.w	r3, [r7, #213]	; 0xd5
 800882a:	4618      	mov	r0, r3
 800882c:	f7f7 fe7a 	bl	8000524 <__aeabi_i2d>
 8008830:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8008834:	f7f7 fee0 	bl	80005f8 <__aeabi_dmul>
 8008838:	4602      	mov	r2, r0
 800883a:	460b      	mov	r3, r1
 800883c:	4620      	mov	r0, r4
 800883e:	4629      	mov	r1, r5
 8008840:	f7f7 fd24 	bl	800028c <__adddf3>
 8008844:	4602      	mov	r2, r0
 8008846:	460b      	mov	r3, r1
 8008848:	f107 0110 	add.w	r1, r7, #16
 800884c:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
		positionCompute.Theta4 	= myDUTY.joint.theta4_start + s3*dir3;
 8008850:	4b4c      	ldr	r3, [pc, #304]	; (8008984 <scaraFlowDuty+0x704>)
 8008852:	f503 6323 	add.w	r3, r3, #2608	; 0xa30
 8008856:	e9d3 4500 	ldrd	r4, r5, [r3]
 800885a:	f997 30d4 	ldrsb.w	r3, [r7, #212]	; 0xd4
 800885e:	4618      	mov	r0, r3
 8008860:	f7f7 fe60 	bl	8000524 <__aeabi_i2d>
 8008864:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8008868:	f7f7 fec6 	bl	80005f8 <__aeabi_dmul>
 800886c:	4602      	mov	r2, r0
 800886e:	460b      	mov	r3, r1
 8008870:	4620      	mov	r0, r4
 8008872:	4629      	mov	r1, r5
 8008874:	f7f7 fd0a 	bl	800028c <__adddf3>
 8008878:	4602      	mov	r2, r0
 800887a:	460b      	mov	r3, r1
 800887c:	f107 0110 	add.w	r1, r7, #16
 8008880:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80

		positionCompute.v_theta1 	= v0;
 8008884:	f107 0110 	add.w	r1, r7, #16
 8008888:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 800888c:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
		positionCompute.v_theta2 	= v1;
 8008890:	f107 0110 	add.w	r1, r7, #16
 8008894:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8008898:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
		positionCompute.v_d3 		= v2;
 800889c:	f107 0110 	add.w	r1, r7, #16
 80088a0:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 80088a4:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
		positionCompute.v_theta4 	= v3;
 80088a8:	f107 0110 	add.w	r1, r7, #16
 80088ac:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 80088b0:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0

		positionCompute.q_theta1 = s0;
 80088b4:	f107 0110 	add.w	r1, r7, #16
 80088b8:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80088bc:	e9c1 2304 	strd	r2, r3, [r1, #16]
		positionCompute.q_theta2 = s1;
 80088c0:	f107 0110 	add.w	r1, r7, #16
 80088c4:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 80088c8:	e9c1 2306 	strd	r2, r3, [r1, #24]
		positionCompute.q_d3	 = s2;
 80088cc:	f107 0110 	add.w	r1, r7, #16
 80088d0:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 80088d4:	e9c1 2308 	strd	r2, r3, [r1, #32]
		positionCompute.q_theta4 = s3;
 80088d8:	f107 0110 	add.w	r1, r7, #16
 80088dc:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 80088e0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

		positionCompute.total_time = myDUTY.time_total;
 80088e4:	4b27      	ldr	r3, [pc, #156]	; (8008984 <scaraFlowDuty+0x704>)
 80088e6:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80088ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ee:	f107 0110 	add.w	r1, r7, #16
 80088f2:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		positionCompute.t		= time;
 80088f6:	f107 0110 	add.w	r1, r7, #16
 80088fa:	f107 0308 	add.w	r3, r7, #8
 80088fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008902:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		// Check workspace
		if( SCARA_STATUS_OK != scaraCheckWorkSpace4(positionCompute.Theta1,
 8008906:	f107 0310 	add.w	r3, r7, #16
 800890a:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800890e:	f107 0310 	add.w	r3, r7, #16
 8008912:	ed93 6b1c 	vldr	d6, [r3, #112]	; 0x70
 8008916:	f107 0310 	add.w	r3, r7, #16
 800891a:	ed93 5b1e 	vldr	d5, [r3, #120]	; 0x78
 800891e:	f107 0310 	add.w	r3, r7, #16
 8008922:	ed93 4b20 	vldr	d4, [r3, #128]	; 0x80
 8008926:	eeb0 3a44 	vmov.f32	s6, s8
 800892a:	eef0 3a64 	vmov.f32	s7, s9
 800892e:	eeb0 2a45 	vmov.f32	s4, s10
 8008932:	eef0 2a65 	vmov.f32	s5, s11
 8008936:	eeb0 1a46 	vmov.f32	s2, s12
 800893a:	eef0 1a66 	vmov.f32	s3, s13
 800893e:	eeb0 0a47 	vmov.f32	s0, s14
 8008942:	eef0 0a67 	vmov.f32	s1, s15
 8008946:	f001 fb33 	bl	8009fb0 <scaraCheckWorkSpace4>
 800894a:	4603      	mov	r3, r0
 800894c:	2b00      	cmp	r3, #0
 800894e:	d001      	beq.n	8008954 <scaraFlowDuty+0x6d4>
							 	 	 	  positionCompute.Theta2,
										  positionCompute.D3,
										  positionCompute.Theta4)) {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8008950:	2307      	movs	r3, #7
 8008952:	e00e      	b.n	8008972 <scaraFlowDuty+0x6f2>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 8008954:	f107 0110 	add.w	r1, r7, #16
 8008958:	1d3b      	adds	r3, r7, #4
 800895a:	22c0      	movs	r2, #192	; 0xc0
 800895c:	6818      	ldr	r0, [r3, #0]
 800895e:	f00d f9d7 	bl	8015d10 <memcpy>
		}
		kinematicForward(pos_Next);
 8008962:	1d3b      	adds	r3, r7, #4
 8008964:	6818      	ldr	r0, [r3, #0]
 8008966:	f7fa ff7b 	bl	8003860 <kinematicForward>
 800896a:	e001      	b.n	8008970 <scaraFlowDuty+0x6f0>

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 800896c:	2302      	movs	r3, #2
 800896e:	e000      	b.n	8008972 <scaraFlowDuty+0x6f2>
	}

	return SCARA_STATUS_OK;
 8008970:	2300      	movs	r3, #0
}
 8008972:	4618      	mov	r0, r3
 8008974:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 8008978:	46bd      	mov	sp, r7
 800897a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800897e:	b002      	add	sp, #8
 8008980:	4770      	bx	lr
 8008982:	bf00      	nop
 8008984:	20004f30 	.word	0x20004f30

08008988 <scaraFlowLine>:

/* Compute new x, y ,z corresponding to s */
SCARA_StatusTypeDef	scaraFlowLine		(Path_Line_TypeDef *line, double s) {
 8008988:	b5b0      	push	{r4, r5, r7, lr}
 800898a:	b084      	sub	sp, #16
 800898c:	af00      	add	r7, sp, #0
 800898e:	60f8      	str	r0, [r7, #12]
 8008990:	ed87 0b00 	vstr	d0, [r7]
	// Avoid div with 0
	if ( line->total_s > 0.01) {
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800899a:	a33d      	add	r3, pc, #244	; (adr r3, 8008a90 <scaraFlowLine+0x108>)
 800899c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a0:	f7f8 f8ba 	bl	8000b18 <__aeabi_dcmpgt>
 80089a4:	4603      	mov	r3, r0
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d05a      	beq.n	8008a60 <scaraFlowLine+0xd8>
		line->x_current	 = line->x0 + line->denta_x*s/line->total_s;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	e9d3 4500 	ldrd	r4, r5, [r3]
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80089b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089ba:	f7f7 fe1d 	bl	80005f8 <__aeabi_dmul>
 80089be:	4602      	mov	r2, r0
 80089c0:	460b      	mov	r3, r1
 80089c2:	4610      	mov	r0, r2
 80089c4:	4619      	mov	r1, r3
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80089cc:	f7f7 ff3e 	bl	800084c <__aeabi_ddiv>
 80089d0:	4602      	mov	r2, r0
 80089d2:	460b      	mov	r3, r1
 80089d4:	4620      	mov	r0, r4
 80089d6:	4629      	mov	r1, r5
 80089d8:	f7f7 fc58 	bl	800028c <__adddf3>
 80089dc:	4602      	mov	r2, r0
 80089de:	460b      	mov	r3, r1
 80089e0:	68f9      	ldr	r1, [r7, #12]
 80089e2:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		line->y_current	 = line->y0 + line->denta_y*s/line->total_s;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80089f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089f6:	f7f7 fdff 	bl	80005f8 <__aeabi_dmul>
 80089fa:	4602      	mov	r2, r0
 80089fc:	460b      	mov	r3, r1
 80089fe:	4610      	mov	r0, r2
 8008a00:	4619      	mov	r1, r3
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8008a08:	f7f7 ff20 	bl	800084c <__aeabi_ddiv>
 8008a0c:	4602      	mov	r2, r0
 8008a0e:	460b      	mov	r3, r1
 8008a10:	4620      	mov	r0, r4
 8008a12:	4629      	mov	r1, r5
 8008a14:	f7f7 fc3a 	bl	800028c <__adddf3>
 8008a18:	4602      	mov	r2, r0
 8008a1a:	460b      	mov	r3, r1
 8008a1c:	68f9      	ldr	r1, [r7, #12]
 8008a1e:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
		line->z_current	 = line->z0 + line->denta_z*s/line->total_s;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8008a2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a32:	f7f7 fde1 	bl	80005f8 <__aeabi_dmul>
 8008a36:	4602      	mov	r2, r0
 8008a38:	460b      	mov	r3, r1
 8008a3a:	4610      	mov	r0, r2
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8008a44:	f7f7 ff02 	bl	800084c <__aeabi_ddiv>
 8008a48:	4602      	mov	r2, r0
 8008a4a:	460b      	mov	r3, r1
 8008a4c:	4620      	mov	r0, r4
 8008a4e:	4629      	mov	r1, r5
 8008a50:	f7f7 fc1c 	bl	800028c <__adddf3>
 8008a54:	4602      	mov	r2, r0
 8008a56:	460b      	mov	r3, r1
 8008a58:	68f9      	ldr	r1, [r7, #12]
 8008a5a:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8008a5e:	e011      	b.n	8008a84 <scaraFlowLine+0xfc>
	} else {
		line->x_current = line->x1;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8008a66:	68f9      	ldr	r1, [r7, #12]
 8008a68:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		line->y_current = line->y1;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8008a72:	68f9      	ldr	r1, [r7, #12]
 8008a74:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
		line->z_current = line->z1;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8008a7e:	68f9      	ldr	r1, [r7, #12]
 8008a80:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	}

	return SCARA_STATUS_OK;
 8008a84:	2300      	movs	r3, #0
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3710      	adds	r7, #16
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bdb0      	pop	{r4, r5, r7, pc}
 8008a8e:	bf00      	nop
 8008a90:	47ae147b 	.word	0x47ae147b
 8008a94:	3f847ae1 	.word	0x3f847ae1

08008a98 <scaraFlowCircle>:

/* Compute new x, y ,z corresponding to s */
SCARA_StatusTypeDef	scaraFlowCircle		(Path_Circle_TypeDef *circle, double s) {
 8008a98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a9c:	b086      	sub	sp, #24
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	60f8      	str	r0, [r7, #12]
 8008aa2:	ed87 0b00 	vstr	d0, [r7]
	double angle;
	angle = s/(circle->radius);
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8008aac:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ab0:	f7f7 fecc 	bl	800084c <__aeabi_ddiv>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	460b      	mov	r3, r1
 8008ab8:	e9c7 2304 	strd	r2, r3, [r7, #16]
	circle->x_current = circle->xi + circle->radius*cos(circle->angle_start + circle->dir*angle);
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	f993 3000 	ldrsb.w	r3, [r3]
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f7f7 fd25 	bl	8000524 <__aeabi_i2d>
 8008ada:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008ade:	f7f7 fd8b 	bl	80005f8 <__aeabi_dmul>
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	460b      	mov	r3, r1
 8008ae6:	4650      	mov	r0, sl
 8008ae8:	4659      	mov	r1, fp
 8008aea:	f7f7 fbcf 	bl	800028c <__adddf3>
 8008aee:	4602      	mov	r2, r0
 8008af0:	460b      	mov	r3, r1
 8008af2:	ec43 2b17 	vmov	d7, r2, r3
 8008af6:	eeb0 0a47 	vmov.f32	s0, s14
 8008afa:	eef0 0a67 	vmov.f32	s1, s15
 8008afe:	f011 fde7 	bl	801a6d0 <cos>
 8008b02:	ec53 2b10 	vmov	r2, r3, d0
 8008b06:	4640      	mov	r0, r8
 8008b08:	4649      	mov	r1, r9
 8008b0a:	f7f7 fd75 	bl	80005f8 <__aeabi_dmul>
 8008b0e:	4602      	mov	r2, r0
 8008b10:	460b      	mov	r3, r1
 8008b12:	4620      	mov	r0, r4
 8008b14:	4629      	mov	r1, r5
 8008b16:	f7f7 fbb9 	bl	800028c <__adddf3>
 8008b1a:	4602      	mov	r2, r0
 8008b1c:	460b      	mov	r3, r1
 8008b1e:	68f9      	ldr	r1, [r7, #12]
 8008b20:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	circle->y_current = circle->yi + circle->radius*sin(circle->angle_start + circle->dir*angle);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	f993 3000 	ldrsb.w	r3, [r3]
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f7f7 fcf1 	bl	8000524 <__aeabi_i2d>
 8008b42:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008b46:	f7f7 fd57 	bl	80005f8 <__aeabi_dmul>
 8008b4a:	4602      	mov	r2, r0
 8008b4c:	460b      	mov	r3, r1
 8008b4e:	4650      	mov	r0, sl
 8008b50:	4659      	mov	r1, fp
 8008b52:	f7f7 fb9b 	bl	800028c <__adddf3>
 8008b56:	4602      	mov	r2, r0
 8008b58:	460b      	mov	r3, r1
 8008b5a:	ec43 2b17 	vmov	d7, r2, r3
 8008b5e:	eeb0 0a47 	vmov.f32	s0, s14
 8008b62:	eef0 0a67 	vmov.f32	s1, s15
 8008b66:	f011 fe4b 	bl	801a800 <sin>
 8008b6a:	ec53 2b10 	vmov	r2, r3, d0
 8008b6e:	4640      	mov	r0, r8
 8008b70:	4649      	mov	r1, r9
 8008b72:	f7f7 fd41 	bl	80005f8 <__aeabi_dmul>
 8008b76:	4602      	mov	r2, r0
 8008b78:	460b      	mov	r3, r1
 8008b7a:	4620      	mov	r0, r4
 8008b7c:	4629      	mov	r1, r5
 8008b7e:	f7f7 fb85 	bl	800028c <__adddf3>
 8008b82:	4602      	mov	r2, r0
 8008b84:	460b      	mov	r3, r1
 8008b86:	68f9      	ldr	r1, [r7, #12]
 8008b88:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
	circle->z_current = circle->zi; // XY plane
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8008b92:	68f9      	ldr	r1, [r7, #12]
 8008b94:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88

	return SCARA_STATUS_OK;
 8008b98:	2300      	movs	r3, #0
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3718      	adds	r7, #24
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008ba4 <scaraFlowLSPB1>:
SCARA_StatusTypeDef	scaraFlowLSPB1	(Trajectory_LSPB_TypeDef *lspb, double time){
 8008ba4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008ba8:	b08a      	sub	sp, #40	; 0x28
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	60f8      	str	r0, [r7, #12]
 8008bae:	ed87 0b00 	vstr	d0, [r7]
	double tf, td, ta;

	tf = lspb->Tf;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8008bb8:	e9c7 2308 	strd	r2, r3, [r7, #32]
	td = lspb->Td;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8008bc2:	e9c7 2306 	strd	r2, r3, [r7, #24]
	ta = lspb->Ta;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8008bcc:	e9c7 2304 	strd	r2, r3, [r7, #16]
	// Accelerate
	if ( 0.0f <= time && time <= ta) {
 8008bd0:	f04f 0200 	mov.w	r2, #0
 8008bd4:	f04f 0300 	mov.w	r3, #0
 8008bd8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008bdc:	f7f7 ff92 	bl	8000b04 <__aeabi_dcmpge>
 8008be0:	4603      	mov	r3, r0
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d05b      	beq.n	8008c9e <scaraFlowLSPB1+0xfa>
 8008be6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008bea:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008bee:	f7f7 ff7f 	bl	8000af0 <__aeabi_dcmple>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d052      	beq.n	8008c9e <scaraFlowLSPB1+0xfa>
		lspb->a_current		=	lspb->a_design;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8008bfe:	68f9      	ldr	r1, [r7, #12]
 8008c00:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		lspb->v_current		=	lspb->v0 + lspb->a_design*time;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8008c10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c14:	f7f7 fcf0 	bl	80005f8 <__aeabi_dmul>
 8008c18:	4602      	mov	r2, r0
 8008c1a:	460b      	mov	r3, r1
 8008c1c:	4620      	mov	r0, r4
 8008c1e:	4629      	mov	r1, r5
 8008c20:	f7f7 fb34 	bl	800028c <__adddf3>
 8008c24:	4602      	mov	r2, r0
 8008c26:	460b      	mov	r3, r1
 8008c28:	68f9      	ldr	r1, [r7, #12]
 8008c2a:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*time + 0.5*lspb->a_design*time*time;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8008c3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c3e:	f7f7 fcdb 	bl	80005f8 <__aeabi_dmul>
 8008c42:	4602      	mov	r2, r0
 8008c44:	460b      	mov	r3, r1
 8008c46:	4620      	mov	r0, r4
 8008c48:	4629      	mov	r1, r5
 8008c4a:	f7f7 fb1f 	bl	800028c <__adddf3>
 8008c4e:	4602      	mov	r2, r0
 8008c50:	460b      	mov	r3, r1
 8008c52:	4614      	mov	r4, r2
 8008c54:	461d      	mov	r5, r3
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8008c5c:	f04f 0200 	mov.w	r2, #0
 8008c60:	4b98      	ldr	r3, [pc, #608]	; (8008ec4 <scaraFlowLSPB1+0x320>)
 8008c62:	f7f7 fcc9 	bl	80005f8 <__aeabi_dmul>
 8008c66:	4602      	mov	r2, r0
 8008c68:	460b      	mov	r3, r1
 8008c6a:	4610      	mov	r0, r2
 8008c6c:	4619      	mov	r1, r3
 8008c6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c72:	f7f7 fcc1 	bl	80005f8 <__aeabi_dmul>
 8008c76:	4602      	mov	r2, r0
 8008c78:	460b      	mov	r3, r1
 8008c7a:	4610      	mov	r0, r2
 8008c7c:	4619      	mov	r1, r3
 8008c7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c82:	f7f7 fcb9 	bl	80005f8 <__aeabi_dmul>
 8008c86:	4602      	mov	r2, r0
 8008c88:	460b      	mov	r3, r1
 8008c8a:	4620      	mov	r0, r4
 8008c8c:	4629      	mov	r1, r5
 8008c8e:	f7f7 fafd 	bl	800028c <__adddf3>
 8008c92:	4602      	mov	r2, r0
 8008c94:	460b      	mov	r3, r1
 8008c96:	68f9      	ldr	r1, [r7, #12]
 8008c98:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
 8008c9c:	e10b      	b.n	8008eb6 <scaraFlowLSPB1+0x312>
	// Constant velocity
	} else if (ta <= time && time <= td) {
 8008c9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ca2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008ca6:	f7f7 ff23 	bl	8000af0 <__aeabi_dcmple>
 8008caa:	4603      	mov	r3, r0
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d054      	beq.n	8008d5a <scaraFlowLSPB1+0x1b6>
 8008cb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008cb4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008cb8:	f7f7 ff1a 	bl	8000af0 <__aeabi_dcmple>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d04b      	beq.n	8008d5a <scaraFlowLSPB1+0x1b6>
		lspb->a_current		=	0;
 8008cc2:	68f9      	ldr	r1, [r7, #12]
 8008cc4:	f04f 0200 	mov.w	r2, #0
 8008cc8:	f04f 0300 	mov.w	r3, #0
 8008ccc:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		lspb->v_current		=	lspb->v_lim;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8008cd6:	68f9      	ldr	r1, [r7, #12]
 8008cd8:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*ta*0.5 + lspb->v_design*(time - ta*0.5);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8008ce8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008cec:	f7f7 fc84 	bl	80005f8 <__aeabi_dmul>
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	460b      	mov	r3, r1
 8008cf4:	4610      	mov	r0, r2
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	f04f 0200 	mov.w	r2, #0
 8008cfc:	4b71      	ldr	r3, [pc, #452]	; (8008ec4 <scaraFlowLSPB1+0x320>)
 8008cfe:	f7f7 fc7b 	bl	80005f8 <__aeabi_dmul>
 8008d02:	4602      	mov	r2, r0
 8008d04:	460b      	mov	r3, r1
 8008d06:	4620      	mov	r0, r4
 8008d08:	4629      	mov	r1, r5
 8008d0a:	f7f7 fabf 	bl	800028c <__adddf3>
 8008d0e:	4602      	mov	r2, r0
 8008d10:	460b      	mov	r3, r1
 8008d12:	4690      	mov	r8, r2
 8008d14:	4699      	mov	r9, r3
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8008d1c:	f04f 0200 	mov.w	r2, #0
 8008d20:	4b68      	ldr	r3, [pc, #416]	; (8008ec4 <scaraFlowLSPB1+0x320>)
 8008d22:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008d26:	f7f7 fc67 	bl	80005f8 <__aeabi_dmul>
 8008d2a:	4602      	mov	r2, r0
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d32:	f7f7 faa9 	bl	8000288 <__aeabi_dsub>
 8008d36:	4602      	mov	r2, r0
 8008d38:	460b      	mov	r3, r1
 8008d3a:	4620      	mov	r0, r4
 8008d3c:	4629      	mov	r1, r5
 8008d3e:	f7f7 fc5b 	bl	80005f8 <__aeabi_dmul>
 8008d42:	4602      	mov	r2, r0
 8008d44:	460b      	mov	r3, r1
 8008d46:	4640      	mov	r0, r8
 8008d48:	4649      	mov	r1, r9
 8008d4a:	f7f7 fa9f 	bl	800028c <__adddf3>
 8008d4e:	4602      	mov	r2, r0
 8008d50:	460b      	mov	r3, r1
 8008d52:	68f9      	ldr	r1, [r7, #12]
 8008d54:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
 8008d58:	e0ad      	b.n	8008eb6 <scaraFlowLSPB1+0x312>
	// Decelerate
	} else if (td <= time && time <= tf) {
 8008d5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d5e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008d62:	f7f7 fec5 	bl	8000af0 <__aeabi_dcmple>
 8008d66:	4603      	mov	r3, r0
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	f000 8090 	beq.w	8008e8e <scaraFlowLSPB1+0x2ea>
 8008d6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008d72:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d76:	f7f7 febb 	bl	8000af0 <__aeabi_dcmple>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	f000 8086 	beq.w	8008e8e <scaraFlowLSPB1+0x2ea>
		lspb->a_current		=	-lspb->a_design;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8008d88:	4614      	mov	r4, r2
 8008d8a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	e9c3 451a 	strd	r4, r5, [r3, #104]	; 0x68
		lspb->v_current		=	lspb->v_design + lspb->a_design*(td - time);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	e9d3 890c 	ldrd	r8, r9, [r3, #48]	; 0x30
 8008da0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008da4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008da8:	f7f7 fa6e 	bl	8000288 <__aeabi_dsub>
 8008dac:	4602      	mov	r2, r0
 8008dae:	460b      	mov	r3, r1
 8008db0:	4640      	mov	r0, r8
 8008db2:	4649      	mov	r1, r9
 8008db4:	f7f7 fc20 	bl	80005f8 <__aeabi_dmul>
 8008db8:	4602      	mov	r2, r0
 8008dba:	460b      	mov	r3, r1
 8008dbc:	4620      	mov	r0, r4
 8008dbe:	4629      	mov	r1, r5
 8008dc0:	f7f7 fa64 	bl	800028c <__adddf3>
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	460b      	mov	r3, r1
 8008dc8:	68f9      	ldr	r1, [r7, #12]
 8008dca:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		lspb->s_current		=	lspb->s1 - lspb->v0*(tf - time)
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	e9d3 8906 	ldrd	r8, r9, [r3, #24]
 8008dda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dde:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008de2:	f7f7 fa51 	bl	8000288 <__aeabi_dsub>
 8008de6:	4602      	mov	r2, r0
 8008de8:	460b      	mov	r3, r1
 8008dea:	4640      	mov	r0, r8
 8008dec:	4649      	mov	r1, r9
 8008dee:	f7f7 fc03 	bl	80005f8 <__aeabi_dmul>
 8008df2:	4602      	mov	r2, r0
 8008df4:	460b      	mov	r3, r1
 8008df6:	4620      	mov	r0, r4
 8008df8:	4629      	mov	r1, r5
 8008dfa:	f7f7 fa45 	bl	8000288 <__aeabi_dsub>
 8008dfe:	4602      	mov	r2, r0
 8008e00:	460b      	mov	r3, r1
 8008e02:	4614      	mov	r4, r2
 8008e04:	461d      	mov	r5, r3
								- (lspb->v_lim - lspb->v0)*(tf - time)*(tf - time)/(2*ta);
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8008e12:	f7f7 fa39 	bl	8000288 <__aeabi_dsub>
 8008e16:	4602      	mov	r2, r0
 8008e18:	460b      	mov	r3, r1
 8008e1a:	4690      	mov	r8, r2
 8008e1c:	4699      	mov	r9, r3
 8008e1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e22:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008e26:	f7f7 fa2f 	bl	8000288 <__aeabi_dsub>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	460b      	mov	r3, r1
 8008e2e:	4640      	mov	r0, r8
 8008e30:	4649      	mov	r1, r9
 8008e32:	f7f7 fbe1 	bl	80005f8 <__aeabi_dmul>
 8008e36:	4602      	mov	r2, r0
 8008e38:	460b      	mov	r3, r1
 8008e3a:	4690      	mov	r8, r2
 8008e3c:	4699      	mov	r9, r3
 8008e3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e42:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008e46:	f7f7 fa1f 	bl	8000288 <__aeabi_dsub>
 8008e4a:	4602      	mov	r2, r0
 8008e4c:	460b      	mov	r3, r1
 8008e4e:	4640      	mov	r0, r8
 8008e50:	4649      	mov	r1, r9
 8008e52:	f7f7 fbd1 	bl	80005f8 <__aeabi_dmul>
 8008e56:	4602      	mov	r2, r0
 8008e58:	460b      	mov	r3, r1
 8008e5a:	4690      	mov	r8, r2
 8008e5c:	4699      	mov	r9, r3
 8008e5e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008e62:	4602      	mov	r2, r0
 8008e64:	460b      	mov	r3, r1
 8008e66:	f7f7 fa11 	bl	800028c <__adddf3>
 8008e6a:	4602      	mov	r2, r0
 8008e6c:	460b      	mov	r3, r1
 8008e6e:	4640      	mov	r0, r8
 8008e70:	4649      	mov	r1, r9
 8008e72:	f7f7 fceb 	bl	800084c <__aeabi_ddiv>
 8008e76:	4602      	mov	r2, r0
 8008e78:	460b      	mov	r3, r1
 8008e7a:	4620      	mov	r0, r4
 8008e7c:	4629      	mov	r1, r5
 8008e7e:	f7f7 fa03 	bl	8000288 <__aeabi_dsub>
 8008e82:	4602      	mov	r2, r0
 8008e84:	460b      	mov	r3, r1
		lspb->s_current		=	lspb->s1 - lspb->v0*(tf - time)
 8008e86:	68f9      	ldr	r1, [r7, #12]
 8008e88:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
 8008e8c:	e013      	b.n	8008eb6 <scaraFlowLSPB1+0x312>
	} else {
		lspb->a_current 	=	0;
 8008e8e:	68f9      	ldr	r1, [r7, #12]
 8008e90:	f04f 0200 	mov.w	r2, #0
 8008e94:	f04f 0300 	mov.w	r3, #0
 8008e98:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		lspb->v_current		=	0;
 8008e9c:	68f9      	ldr	r1, [r7, #12]
 8008e9e:	f04f 0200 	mov.w	r2, #0
 8008ea2:	f04f 0300 	mov.w	r3, #0
 8008ea6:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		lspb->s_current		=	lspb->total_s;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8008eb0:	68f9      	ldr	r1, [r7, #12]
 8008eb2:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	}

	return SCARA_STATUS_OK;
 8008eb6:	2300      	movs	r3, #0
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3728      	adds	r7, #40	; 0x28
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008ec2:	bf00      	nop
 8008ec4:	3fe00000 	.word	0x3fe00000

08008ec8 <scaraFlowLSPB>:
/* Compute new s corresponding to time */
SCARA_StatusTypeDef	scaraFlowLSPB		(Trajectory_LSPB_TypeDef *lspb, double time) {
 8008ec8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008ecc:	b08a      	sub	sp, #40	; 0x28
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	60f8      	str	r0, [r7, #12]
 8008ed2:	ed87 0b00 	vstr	d0, [r7]
	double tf, td, ta;

	tf = lspb->Tf;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8008edc:	e9c7 2308 	strd	r2, r3, [r7, #32]
	td = lspb->Td;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8008ee6:	e9c7 2306 	strd	r2, r3, [r7, #24]
	ta = lspb->Ta;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8008ef0:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Accelerate
	if ( 0.0f <= time && time <= ta) {
 8008ef4:	f04f 0200 	mov.w	r2, #0
 8008ef8:	f04f 0300 	mov.w	r3, #0
 8008efc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f00:	f7f7 fe00 	bl	8000b04 <__aeabi_dcmpge>
 8008f04:	4603      	mov	r3, r0
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d05b      	beq.n	8008fc2 <scaraFlowLSPB+0xfa>
 8008f0a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008f0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f12:	f7f7 fded 	bl	8000af0 <__aeabi_dcmple>
 8008f16:	4603      	mov	r3, r0
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d052      	beq.n	8008fc2 <scaraFlowLSPB+0xfa>
		lspb->a_current		=	lspb->a_design;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8008f22:	68f9      	ldr	r1, [r7, #12]
 8008f24:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		lspb->v_current		=	lspb->v0 + lspb->a_design*time;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8008f34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f38:	f7f7 fb5e 	bl	80005f8 <__aeabi_dmul>
 8008f3c:	4602      	mov	r2, r0
 8008f3e:	460b      	mov	r3, r1
 8008f40:	4620      	mov	r0, r4
 8008f42:	4629      	mov	r1, r5
 8008f44:	f7f7 f9a2 	bl	800028c <__adddf3>
 8008f48:	4602      	mov	r2, r0
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	68f9      	ldr	r1, [r7, #12]
 8008f4e:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*time + 0.5*lspb->a_design*time*time;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8008f5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f62:	f7f7 fb49 	bl	80005f8 <__aeabi_dmul>
 8008f66:	4602      	mov	r2, r0
 8008f68:	460b      	mov	r3, r1
 8008f6a:	4620      	mov	r0, r4
 8008f6c:	4629      	mov	r1, r5
 8008f6e:	f7f7 f98d 	bl	800028c <__adddf3>
 8008f72:	4602      	mov	r2, r0
 8008f74:	460b      	mov	r3, r1
 8008f76:	4614      	mov	r4, r2
 8008f78:	461d      	mov	r5, r3
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8008f80:	f04f 0200 	mov.w	r2, #0
 8008f84:	4b9f      	ldr	r3, [pc, #636]	; (8009204 <scaraFlowLSPB+0x33c>)
 8008f86:	f7f7 fb37 	bl	80005f8 <__aeabi_dmul>
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	460b      	mov	r3, r1
 8008f8e:	4610      	mov	r0, r2
 8008f90:	4619      	mov	r1, r3
 8008f92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f96:	f7f7 fb2f 	bl	80005f8 <__aeabi_dmul>
 8008f9a:	4602      	mov	r2, r0
 8008f9c:	460b      	mov	r3, r1
 8008f9e:	4610      	mov	r0, r2
 8008fa0:	4619      	mov	r1, r3
 8008fa2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fa6:	f7f7 fb27 	bl	80005f8 <__aeabi_dmul>
 8008faa:	4602      	mov	r2, r0
 8008fac:	460b      	mov	r3, r1
 8008fae:	4620      	mov	r0, r4
 8008fb0:	4629      	mov	r1, r5
 8008fb2:	f7f7 f96b 	bl	800028c <__adddf3>
 8008fb6:	4602      	mov	r2, r0
 8008fb8:	460b      	mov	r3, r1
 8008fba:	68f9      	ldr	r1, [r7, #12]
 8008fbc:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
 8008fc0:	e119      	b.n	80091f6 <scaraFlowLSPB+0x32e>
	// Constant velocity
	} else if (ta <= time && time <= (tf - td)) {
 8008fc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fc6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008fca:	f7f7 fd91 	bl	8000af0 <__aeabi_dcmple>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d05c      	beq.n	800908e <scaraFlowLSPB+0x1c6>
 8008fd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008fd8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008fdc:	f7f7 f954 	bl	8000288 <__aeabi_dsub>
 8008fe0:	4602      	mov	r2, r0
 8008fe2:	460b      	mov	r3, r1
 8008fe4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008fe8:	f7f7 fd82 	bl	8000af0 <__aeabi_dcmple>
 8008fec:	4603      	mov	r3, r0
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d04d      	beq.n	800908e <scaraFlowLSPB+0x1c6>
		lspb->a_current		=	0;
 8008ff2:	68f9      	ldr	r1, [r7, #12]
 8008ff4:	f04f 0200 	mov.w	r2, #0
 8008ff8:	f04f 0300 	mov.w	r3, #0
 8008ffc:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		lspb->v_current		=	lspb->v_lim;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8009006:	68f9      	ldr	r1, [r7, #12]
 8009008:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*ta/2 + lspb->v_lim*(time - ta/2);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8009018:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800901c:	f7f7 faec 	bl	80005f8 <__aeabi_dmul>
 8009020:	4602      	mov	r2, r0
 8009022:	460b      	mov	r3, r1
 8009024:	4610      	mov	r0, r2
 8009026:	4619      	mov	r1, r3
 8009028:	f04f 0200 	mov.w	r2, #0
 800902c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009030:	f7f7 fc0c 	bl	800084c <__aeabi_ddiv>
 8009034:	4602      	mov	r2, r0
 8009036:	460b      	mov	r3, r1
 8009038:	4620      	mov	r0, r4
 800903a:	4629      	mov	r1, r5
 800903c:	f7f7 f926 	bl	800028c <__adddf3>
 8009040:	4602      	mov	r2, r0
 8009042:	460b      	mov	r3, r1
 8009044:	4690      	mov	r8, r2
 8009046:	4699      	mov	r9, r3
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 800904e:	f04f 0200 	mov.w	r2, #0
 8009052:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009056:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800905a:	f7f7 fbf7 	bl	800084c <__aeabi_ddiv>
 800905e:	4602      	mov	r2, r0
 8009060:	460b      	mov	r3, r1
 8009062:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009066:	f7f7 f90f 	bl	8000288 <__aeabi_dsub>
 800906a:	4602      	mov	r2, r0
 800906c:	460b      	mov	r3, r1
 800906e:	4620      	mov	r0, r4
 8009070:	4629      	mov	r1, r5
 8009072:	f7f7 fac1 	bl	80005f8 <__aeabi_dmul>
 8009076:	4602      	mov	r2, r0
 8009078:	460b      	mov	r3, r1
 800907a:	4640      	mov	r0, r8
 800907c:	4649      	mov	r1, r9
 800907e:	f7f7 f905 	bl	800028c <__adddf3>
 8009082:	4602      	mov	r2, r0
 8009084:	460b      	mov	r3, r1
 8009086:	68f9      	ldr	r1, [r7, #12]
 8009088:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
 800908c:	e0b3      	b.n	80091f6 <scaraFlowLSPB+0x32e>
	// Decelerate
	} else if ((tf - td) <= time && time <= tf) {
 800908e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009092:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009096:	f7f7 f8f7 	bl	8000288 <__aeabi_dsub>
 800909a:	4602      	mov	r2, r0
 800909c:	460b      	mov	r3, r1
 800909e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80090a2:	f7f7 fd2f 	bl	8000b04 <__aeabi_dcmpge>
 80090a6:	4603      	mov	r3, r0
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	f000 8090 	beq.w	80091ce <scaraFlowLSPB+0x306>
 80090ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80090b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80090b6:	f7f7 fd1b 	bl	8000af0 <__aeabi_dcmple>
 80090ba:	4603      	mov	r3, r0
 80090bc:	2b00      	cmp	r3, #0
 80090be:	f000 8086 	beq.w	80091ce <scaraFlowLSPB+0x306>
		lspb->a_current		=	-lspb->a_design;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80090c8:	4614      	mov	r4, r2
 80090ca:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	e9c3 451a 	strd	r4, r5, [r3, #104]	; 0x68
		lspb->v_current		=	lspb->v1 + lspb->a_design*(tf - time);
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	e9d3 890c 	ldrd	r8, r9, [r3, #48]	; 0x30
 80090e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090e4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80090e8:	f7f7 f8ce 	bl	8000288 <__aeabi_dsub>
 80090ec:	4602      	mov	r2, r0
 80090ee:	460b      	mov	r3, r1
 80090f0:	4640      	mov	r0, r8
 80090f2:	4649      	mov	r1, r9
 80090f4:	f7f7 fa80 	bl	80005f8 <__aeabi_dmul>
 80090f8:	4602      	mov	r2, r0
 80090fa:	460b      	mov	r3, r1
 80090fc:	4620      	mov	r0, r4
 80090fe:	4629      	mov	r1, r5
 8009100:	f7f7 f8c4 	bl	800028c <__adddf3>
 8009104:	4602      	mov	r2, r0
 8009106:	460b      	mov	r3, r1
 8009108:	68f9      	ldr	r1, [r7, #12]
 800910a:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		lspb->s_current		=	lspb->s1 - lspb->v1*(tf - time)
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 800911a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800911e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009122:	f7f7 f8b1 	bl	8000288 <__aeabi_dsub>
 8009126:	4602      	mov	r2, r0
 8009128:	460b      	mov	r3, r1
 800912a:	4640      	mov	r0, r8
 800912c:	4649      	mov	r1, r9
 800912e:	f7f7 fa63 	bl	80005f8 <__aeabi_dmul>
 8009132:	4602      	mov	r2, r0
 8009134:	460b      	mov	r3, r1
 8009136:	4620      	mov	r0, r4
 8009138:	4629      	mov	r1, r5
 800913a:	f7f7 f8a5 	bl	8000288 <__aeabi_dsub>
 800913e:	4602      	mov	r2, r0
 8009140:	460b      	mov	r3, r1
 8009142:	4614      	mov	r4, r2
 8009144:	461d      	mov	r5, r3
								- (lspb->v_lim - lspb->v1)*(tf - time)*(tf - time)/(2*td);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009152:	f7f7 f899 	bl	8000288 <__aeabi_dsub>
 8009156:	4602      	mov	r2, r0
 8009158:	460b      	mov	r3, r1
 800915a:	4690      	mov	r8, r2
 800915c:	4699      	mov	r9, r3
 800915e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009162:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009166:	f7f7 f88f 	bl	8000288 <__aeabi_dsub>
 800916a:	4602      	mov	r2, r0
 800916c:	460b      	mov	r3, r1
 800916e:	4640      	mov	r0, r8
 8009170:	4649      	mov	r1, r9
 8009172:	f7f7 fa41 	bl	80005f8 <__aeabi_dmul>
 8009176:	4602      	mov	r2, r0
 8009178:	460b      	mov	r3, r1
 800917a:	4690      	mov	r8, r2
 800917c:	4699      	mov	r9, r3
 800917e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009182:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009186:	f7f7 f87f 	bl	8000288 <__aeabi_dsub>
 800918a:	4602      	mov	r2, r0
 800918c:	460b      	mov	r3, r1
 800918e:	4640      	mov	r0, r8
 8009190:	4649      	mov	r1, r9
 8009192:	f7f7 fa31 	bl	80005f8 <__aeabi_dmul>
 8009196:	4602      	mov	r2, r0
 8009198:	460b      	mov	r3, r1
 800919a:	4690      	mov	r8, r2
 800919c:	4699      	mov	r9, r3
 800919e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80091a2:	4602      	mov	r2, r0
 80091a4:	460b      	mov	r3, r1
 80091a6:	f7f7 f871 	bl	800028c <__adddf3>
 80091aa:	4602      	mov	r2, r0
 80091ac:	460b      	mov	r3, r1
 80091ae:	4640      	mov	r0, r8
 80091b0:	4649      	mov	r1, r9
 80091b2:	f7f7 fb4b 	bl	800084c <__aeabi_ddiv>
 80091b6:	4602      	mov	r2, r0
 80091b8:	460b      	mov	r3, r1
 80091ba:	4620      	mov	r0, r4
 80091bc:	4629      	mov	r1, r5
 80091be:	f7f7 f863 	bl	8000288 <__aeabi_dsub>
 80091c2:	4602      	mov	r2, r0
 80091c4:	460b      	mov	r3, r1
		lspb->s_current		=	lspb->s1 - lspb->v1*(tf - time)
 80091c6:	68f9      	ldr	r1, [r7, #12]
 80091c8:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
 80091cc:	e013      	b.n	80091f6 <scaraFlowLSPB+0x32e>
	} else {
		lspb->a_current 	=	0;
 80091ce:	68f9      	ldr	r1, [r7, #12]
 80091d0:	f04f 0200 	mov.w	r2, #0
 80091d4:	f04f 0300 	mov.w	r3, #0
 80091d8:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		lspb->v_current		=	0;
 80091dc:	68f9      	ldr	r1, [r7, #12]
 80091de:	f04f 0200 	mov.w	r2, #0
 80091e2:	f04f 0300 	mov.w	r3, #0
 80091e6:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		lspb->s_current		=	lspb->total_s;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80091f0:	68f9      	ldr	r1, [r7, #12]
 80091f2:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	}

	return SCARA_STATUS_OK;
 80091f6:	2300      	movs	r3, #0
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3728      	adds	r7, #40	; 0x28
 80091fc:	46bd      	mov	sp, r7
 80091fe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009202:	bf00      	nop
 8009204:	3fe00000 	.word	0x3fe00000

08009208 <scaraFLowScurve>:


/* Compute new s corresponding to time */
SCARA_StatusTypeDef	scaraFLowScurve		(Trajectory_Scurve_TypeDef *scurve, double time) {
 8009208:	b5b0      	push	{r4, r5, r7, lr}
 800920a:	b092      	sub	sp, #72	; 0x48
 800920c:	af00      	add	r7, sp, #0
 800920e:	6278      	str	r0, [r7, #36]	; 0x24
 8009210:	ed87 0b06 	vstr	d0, [r7, #24]
	double j_max, tm, tc, t;

	j_max = scurve->j_max;
 8009214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009216:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800921a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	tm	  = scurve->Tm;
 800921e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009220:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8009224:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	tc	  = scurve->Tc;
 8009228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800922e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	 // SCURVE 4 PHASE: tc = 0;
	 if ( 4 == scurve->num_of_phase) {
 8009232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009234:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009238:	2b04      	cmp	r3, #4
 800923a:	f040 8313 	bne.w	8009864 <scaraFLowScurve+0x65c>
		 // Phase 1
		 if ( (0.0f <= time) && ( time < tm)) {
 800923e:	f04f 0200 	mov.w	r2, #0
 8009242:	f04f 0300 	mov.w	r3, #0
 8009246:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800924a:	f7f7 fc5b 	bl	8000b04 <__aeabi_dcmpge>
 800924e:	4603      	mov	r3, r0
 8009250:	2b00      	cmp	r3, #0
 8009252:	d059      	beq.n	8009308 <scaraFLowScurve+0x100>
 8009254:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009258:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800925c:	f7f7 fc3e 	bl	8000adc <__aeabi_dcmplt>
 8009260:	4603      	mov	r3, r0
 8009262:	2b00      	cmp	r3, #0
 8009264:	d050      	beq.n	8009308 <scaraFLowScurve+0x100>
			 t = time;
 8009266:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800926a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*t;
 800926e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009272:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009276:	f7f7 f9bf 	bl	80005f8 <__aeabi_dmul>
 800927a:	4602      	mov	r2, r0
 800927c:	460b      	mov	r3, r1
 800927e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009280:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
			 scurve->v_current	= 	0.5*j_max*t*t;
 8009284:	f04f 0200 	mov.w	r2, #0
 8009288:	4b92      	ldr	r3, [pc, #584]	; (80094d4 <scaraFLowScurve+0x2cc>)
 800928a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800928e:	f7f7 f9b3 	bl	80005f8 <__aeabi_dmul>
 8009292:	4602      	mov	r2, r0
 8009294:	460b      	mov	r3, r1
 8009296:	4610      	mov	r0, r2
 8009298:	4619      	mov	r1, r3
 800929a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800929e:	f7f7 f9ab 	bl	80005f8 <__aeabi_dmul>
 80092a2:	4602      	mov	r2, r0
 80092a4:	460b      	mov	r3, r1
 80092a6:	4610      	mov	r0, r2
 80092a8:	4619      	mov	r1, r3
 80092aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80092ae:	f7f7 f9a3 	bl	80005f8 <__aeabi_dmul>
 80092b2:	4602      	mov	r2, r0
 80092b4:	460b      	mov	r3, r1
 80092b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80092b8:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
			 scurve->s_current 	= 	j_max*t*t*t/6;
 80092bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80092c0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80092c4:	f7f7 f998 	bl	80005f8 <__aeabi_dmul>
 80092c8:	4602      	mov	r2, r0
 80092ca:	460b      	mov	r3, r1
 80092cc:	4610      	mov	r0, r2
 80092ce:	4619      	mov	r1, r3
 80092d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80092d4:	f7f7 f990 	bl	80005f8 <__aeabi_dmul>
 80092d8:	4602      	mov	r2, r0
 80092da:	460b      	mov	r3, r1
 80092dc:	4610      	mov	r0, r2
 80092de:	4619      	mov	r1, r3
 80092e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80092e4:	f7f7 f988 	bl	80005f8 <__aeabi_dmul>
 80092e8:	4602      	mov	r2, r0
 80092ea:	460b      	mov	r3, r1
 80092ec:	4610      	mov	r0, r2
 80092ee:	4619      	mov	r1, r3
 80092f0:	f04f 0200 	mov.w	r2, #0
 80092f4:	4b78      	ldr	r3, [pc, #480]	; (80094d8 <scaraFLowScurve+0x2d0>)
 80092f6:	f7f7 faa9 	bl	800084c <__aeabi_ddiv>
 80092fa:	4602      	mov	r2, r0
 80092fc:	460b      	mov	r3, r1
 80092fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009300:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 8009304:	f000 be44 	b.w	8009f90 <scaraFLowScurve+0xd88>
		 // Phase 2
		 } else if ( (tm <= time) && ( time < (2*tm) ) ) {
 8009308:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800930c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009310:	f7f7 fbee 	bl	8000af0 <__aeabi_dcmple>
 8009314:	4603      	mov	r3, r0
 8009316:	2b00      	cmp	r3, #0
 8009318:	f000 80e0 	beq.w	80094dc <scaraFLowScurve+0x2d4>
 800931c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009320:	4602      	mov	r2, r0
 8009322:	460b      	mov	r3, r1
 8009324:	f7f6 ffb2 	bl	800028c <__adddf3>
 8009328:	4602      	mov	r2, r0
 800932a:	460b      	mov	r3, r1
 800932c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009330:	f7f7 fbd4 	bl	8000adc <__aeabi_dcmplt>
 8009334:	4603      	mov	r3, r0
 8009336:	2b00      	cmp	r3, #0
 8009338:	f000 80d0 	beq.w	80094dc <scaraFLowScurve+0x2d4>
			 t = time - tm;
 800933c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009340:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009344:	f7f6 ffa0 	bl	8000288 <__aeabi_dsub>
 8009348:	4602      	mov	r2, r0
 800934a:	460b      	mov	r3, r1
 800934c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*tm - j_max*t;
 8009350:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009354:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009358:	f7f7 f94e 	bl	80005f8 <__aeabi_dmul>
 800935c:	4602      	mov	r2, r0
 800935e:	460b      	mov	r3, r1
 8009360:	4614      	mov	r4, r2
 8009362:	461d      	mov	r5, r3
 8009364:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009368:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800936c:	f7f7 f944 	bl	80005f8 <__aeabi_dmul>
 8009370:	4602      	mov	r2, r0
 8009372:	460b      	mov	r3, r1
 8009374:	4620      	mov	r0, r4
 8009376:	4629      	mov	r1, r5
 8009378:	f7f6 ff86 	bl	8000288 <__aeabi_dsub>
 800937c:	4602      	mov	r2, r0
 800937e:	460b      	mov	r3, r1
 8009380:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009382:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
			 scurve->v_current 	= 	scurve->v_1 + j_max*tm*t - 0.5*j_max*t*t;
 8009386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009388:	e9d3 451e 	ldrd	r4, r5, [r3, #120]	; 0x78
 800938c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009390:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009394:	f7f7 f930 	bl	80005f8 <__aeabi_dmul>
 8009398:	4602      	mov	r2, r0
 800939a:	460b      	mov	r3, r1
 800939c:	4610      	mov	r0, r2
 800939e:	4619      	mov	r1, r3
 80093a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80093a4:	f7f7 f928 	bl	80005f8 <__aeabi_dmul>
 80093a8:	4602      	mov	r2, r0
 80093aa:	460b      	mov	r3, r1
 80093ac:	4620      	mov	r0, r4
 80093ae:	4629      	mov	r1, r5
 80093b0:	f7f6 ff6c 	bl	800028c <__adddf3>
 80093b4:	4602      	mov	r2, r0
 80093b6:	460b      	mov	r3, r1
 80093b8:	4614      	mov	r4, r2
 80093ba:	461d      	mov	r5, r3
 80093bc:	f04f 0200 	mov.w	r2, #0
 80093c0:	4b44      	ldr	r3, [pc, #272]	; (80094d4 <scaraFLowScurve+0x2cc>)
 80093c2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80093c6:	f7f7 f917 	bl	80005f8 <__aeabi_dmul>
 80093ca:	4602      	mov	r2, r0
 80093cc:	460b      	mov	r3, r1
 80093ce:	4610      	mov	r0, r2
 80093d0:	4619      	mov	r1, r3
 80093d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80093d6:	f7f7 f90f 	bl	80005f8 <__aeabi_dmul>
 80093da:	4602      	mov	r2, r0
 80093dc:	460b      	mov	r3, r1
 80093de:	4610      	mov	r0, r2
 80093e0:	4619      	mov	r1, r3
 80093e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80093e6:	f7f7 f907 	bl	80005f8 <__aeabi_dmul>
 80093ea:	4602      	mov	r2, r0
 80093ec:	460b      	mov	r3, r1
 80093ee:	4620      	mov	r0, r4
 80093f0:	4629      	mov	r1, r5
 80093f2:	f7f6 ff49 	bl	8000288 <__aeabi_dsub>
 80093f6:	4602      	mov	r2, r0
 80093f8:	460b      	mov	r3, r1
 80093fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80093fc:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
			 scurve->s_current 	=	scurve->s_1 + scurve->v_1*t + 0.5*j_max*tm*t*t - j_max*t*t*t/6;
 8009400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009402:	e9d3 4520 	ldrd	r4, r5, [r3, #128]	; 0x80
 8009406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009408:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 800940c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009410:	f7f7 f8f2 	bl	80005f8 <__aeabi_dmul>
 8009414:	4602      	mov	r2, r0
 8009416:	460b      	mov	r3, r1
 8009418:	4620      	mov	r0, r4
 800941a:	4629      	mov	r1, r5
 800941c:	f7f6 ff36 	bl	800028c <__adddf3>
 8009420:	4602      	mov	r2, r0
 8009422:	460b      	mov	r3, r1
 8009424:	4614      	mov	r4, r2
 8009426:	461d      	mov	r5, r3
 8009428:	f04f 0200 	mov.w	r2, #0
 800942c:	4b29      	ldr	r3, [pc, #164]	; (80094d4 <scaraFLowScurve+0x2cc>)
 800942e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009432:	f7f7 f8e1 	bl	80005f8 <__aeabi_dmul>
 8009436:	4602      	mov	r2, r0
 8009438:	460b      	mov	r3, r1
 800943a:	4610      	mov	r0, r2
 800943c:	4619      	mov	r1, r3
 800943e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009442:	f7f7 f8d9 	bl	80005f8 <__aeabi_dmul>
 8009446:	4602      	mov	r2, r0
 8009448:	460b      	mov	r3, r1
 800944a:	4610      	mov	r0, r2
 800944c:	4619      	mov	r1, r3
 800944e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009452:	f7f7 f8d1 	bl	80005f8 <__aeabi_dmul>
 8009456:	4602      	mov	r2, r0
 8009458:	460b      	mov	r3, r1
 800945a:	4610      	mov	r0, r2
 800945c:	4619      	mov	r1, r3
 800945e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009462:	f7f7 f8c9 	bl	80005f8 <__aeabi_dmul>
 8009466:	4602      	mov	r2, r0
 8009468:	460b      	mov	r3, r1
 800946a:	4620      	mov	r0, r4
 800946c:	4629      	mov	r1, r5
 800946e:	f7f6 ff0d 	bl	800028c <__adddf3>
 8009472:	4602      	mov	r2, r0
 8009474:	460b      	mov	r3, r1
 8009476:	4614      	mov	r4, r2
 8009478:	461d      	mov	r5, r3
 800947a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800947e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009482:	f7f7 f8b9 	bl	80005f8 <__aeabi_dmul>
 8009486:	4602      	mov	r2, r0
 8009488:	460b      	mov	r3, r1
 800948a:	4610      	mov	r0, r2
 800948c:	4619      	mov	r1, r3
 800948e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009492:	f7f7 f8b1 	bl	80005f8 <__aeabi_dmul>
 8009496:	4602      	mov	r2, r0
 8009498:	460b      	mov	r3, r1
 800949a:	4610      	mov	r0, r2
 800949c:	4619      	mov	r1, r3
 800949e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80094a2:	f7f7 f8a9 	bl	80005f8 <__aeabi_dmul>
 80094a6:	4602      	mov	r2, r0
 80094a8:	460b      	mov	r3, r1
 80094aa:	4610      	mov	r0, r2
 80094ac:	4619      	mov	r1, r3
 80094ae:	f04f 0200 	mov.w	r2, #0
 80094b2:	4b09      	ldr	r3, [pc, #36]	; (80094d8 <scaraFLowScurve+0x2d0>)
 80094b4:	f7f7 f9ca 	bl	800084c <__aeabi_ddiv>
 80094b8:	4602      	mov	r2, r0
 80094ba:	460b      	mov	r3, r1
 80094bc:	4620      	mov	r0, r4
 80094be:	4629      	mov	r1, r5
 80094c0:	f7f6 fee2 	bl	8000288 <__aeabi_dsub>
 80094c4:	4602      	mov	r2, r0
 80094c6:	460b      	mov	r3, r1
 80094c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80094ca:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 80094ce:	f000 bd5f 	b.w	8009f90 <scaraFLowScurve+0xd88>
 80094d2:	bf00      	nop
 80094d4:	3fe00000 	.word	0x3fe00000
 80094d8:	40180000 	.word	0x40180000
		 // Phase 3: does not exist
		 // Phase 4
		 } else if ( ((2*tm) <= time) && ( time < (3*tm)) ) {
 80094dc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80094e0:	4602      	mov	r2, r0
 80094e2:	460b      	mov	r3, r1
 80094e4:	f7f6 fed2 	bl	800028c <__adddf3>
 80094e8:	4602      	mov	r2, r0
 80094ea:	460b      	mov	r3, r1
 80094ec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80094f0:	f7f7 fb08 	bl	8000b04 <__aeabi_dcmpge>
 80094f4:	4603      	mov	r3, r0
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	f000 809e 	beq.w	8009638 <scaraFLowScurve+0x430>
 80094fc:	f04f 0200 	mov.w	r2, #0
 8009500:	4b4a      	ldr	r3, [pc, #296]	; (800962c <scaraFLowScurve+0x424>)
 8009502:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009506:	f7f7 f877 	bl	80005f8 <__aeabi_dmul>
 800950a:	4602      	mov	r2, r0
 800950c:	460b      	mov	r3, r1
 800950e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009512:	f7f7 fae3 	bl	8000adc <__aeabi_dcmplt>
 8009516:	4603      	mov	r3, r0
 8009518:	2b00      	cmp	r3, #0
 800951a:	f000 808d 	beq.w	8009638 <scaraFLowScurve+0x430>
			 t = time - 2*tm;
 800951e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009522:	4602      	mov	r2, r0
 8009524:	460b      	mov	r3, r1
 8009526:	f7f6 feb1 	bl	800028c <__adddf3>
 800952a:	4602      	mov	r2, r0
 800952c:	460b      	mov	r3, r1
 800952e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009532:	f7f6 fea9 	bl	8000288 <__aeabi_dsub>
 8009536:	4602      	mov	r2, r0
 8009538:	460b      	mov	r3, r1
 800953a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			 scurve->a_current 	=	-j_max*t;
 800953e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009540:	613b      	str	r3, [r7, #16]
 8009542:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009544:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009548:	617b      	str	r3, [r7, #20]
 800954a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800954e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009552:	f7f7 f851 	bl	80005f8 <__aeabi_dmul>
 8009556:	4602      	mov	r2, r0
 8009558:	460b      	mov	r3, r1
 800955a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800955c:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_2 - 0.5*j_max*t*t;
 8009560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009562:	e9d3 4522 	ldrd	r4, r5, [r3, #136]	; 0x88
 8009566:	f04f 0200 	mov.w	r2, #0
 800956a:	4b31      	ldr	r3, [pc, #196]	; (8009630 <scaraFLowScurve+0x428>)
 800956c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009570:	f7f7 f842 	bl	80005f8 <__aeabi_dmul>
 8009574:	4602      	mov	r2, r0
 8009576:	460b      	mov	r3, r1
 8009578:	4610      	mov	r0, r2
 800957a:	4619      	mov	r1, r3
 800957c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009580:	f7f7 f83a 	bl	80005f8 <__aeabi_dmul>
 8009584:	4602      	mov	r2, r0
 8009586:	460b      	mov	r3, r1
 8009588:	4610      	mov	r0, r2
 800958a:	4619      	mov	r1, r3
 800958c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009590:	f7f7 f832 	bl	80005f8 <__aeabi_dmul>
 8009594:	4602      	mov	r2, r0
 8009596:	460b      	mov	r3, r1
 8009598:	4620      	mov	r0, r4
 800959a:	4629      	mov	r1, r5
 800959c:	f7f6 fe74 	bl	8000288 <__aeabi_dsub>
 80095a0:	4602      	mov	r2, r0
 80095a2:	460b      	mov	r3, r1
 80095a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80095a6:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_2 + scurve->v_2*t - j_max*t*t*t/6;
 80095aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ac:	e9d3 4524 	ldrd	r4, r5, [r3, #144]	; 0x90
 80095b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b2:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 80095b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80095ba:	f7f7 f81d 	bl	80005f8 <__aeabi_dmul>
 80095be:	4602      	mov	r2, r0
 80095c0:	460b      	mov	r3, r1
 80095c2:	4620      	mov	r0, r4
 80095c4:	4629      	mov	r1, r5
 80095c6:	f7f6 fe61 	bl	800028c <__adddf3>
 80095ca:	4602      	mov	r2, r0
 80095cc:	460b      	mov	r3, r1
 80095ce:	4614      	mov	r4, r2
 80095d0:	461d      	mov	r5, r3
 80095d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80095d6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80095da:	f7f7 f80d 	bl	80005f8 <__aeabi_dmul>
 80095de:	4602      	mov	r2, r0
 80095e0:	460b      	mov	r3, r1
 80095e2:	4610      	mov	r0, r2
 80095e4:	4619      	mov	r1, r3
 80095e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80095ea:	f7f7 f805 	bl	80005f8 <__aeabi_dmul>
 80095ee:	4602      	mov	r2, r0
 80095f0:	460b      	mov	r3, r1
 80095f2:	4610      	mov	r0, r2
 80095f4:	4619      	mov	r1, r3
 80095f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80095fa:	f7f6 fffd 	bl	80005f8 <__aeabi_dmul>
 80095fe:	4602      	mov	r2, r0
 8009600:	460b      	mov	r3, r1
 8009602:	4610      	mov	r0, r2
 8009604:	4619      	mov	r1, r3
 8009606:	f04f 0200 	mov.w	r2, #0
 800960a:	4b0a      	ldr	r3, [pc, #40]	; (8009634 <scaraFLowScurve+0x42c>)
 800960c:	f7f7 f91e 	bl	800084c <__aeabi_ddiv>
 8009610:	4602      	mov	r2, r0
 8009612:	460b      	mov	r3, r1
 8009614:	4620      	mov	r0, r4
 8009616:	4629      	mov	r1, r5
 8009618:	f7f6 fe36 	bl	8000288 <__aeabi_dsub>
 800961c:	4602      	mov	r2, r0
 800961e:	460b      	mov	r3, r1
 8009620:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009622:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 8009626:	f000 bcb3 	b.w	8009f90 <scaraFLowScurve+0xd88>
 800962a:	bf00      	nop
 800962c:	40080000 	.word	0x40080000
 8009630:	3fe00000 	.word	0x3fe00000
 8009634:	40180000 	.word	0x40180000
		 // Phase 5
		 } else if ( ((3*tm) <= time) && ( time < (4*tm)) ) {
 8009638:	f04f 0200 	mov.w	r2, #0
 800963c:	4b85      	ldr	r3, [pc, #532]	; (8009854 <scaraFLowScurve+0x64c>)
 800963e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009642:	f7f6 ffd9 	bl	80005f8 <__aeabi_dmul>
 8009646:	4602      	mov	r2, r0
 8009648:	460b      	mov	r3, r1
 800964a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800964e:	f7f7 fa59 	bl	8000b04 <__aeabi_dcmpge>
 8009652:	4603      	mov	r3, r0
 8009654:	2b00      	cmp	r3, #0
 8009656:	f000 80e8 	beq.w	800982a <scaraFLowScurve+0x622>
 800965a:	f04f 0200 	mov.w	r2, #0
 800965e:	4b7e      	ldr	r3, [pc, #504]	; (8009858 <scaraFLowScurve+0x650>)
 8009660:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009664:	f7f6 ffc8 	bl	80005f8 <__aeabi_dmul>
 8009668:	4602      	mov	r2, r0
 800966a:	460b      	mov	r3, r1
 800966c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009670:	f7f7 fa34 	bl	8000adc <__aeabi_dcmplt>
 8009674:	4603      	mov	r3, r0
 8009676:	2b00      	cmp	r3, #0
 8009678:	f000 80d7 	beq.w	800982a <scaraFLowScurve+0x622>
			 t = time - 3*tm;
 800967c:	f04f 0200 	mov.w	r2, #0
 8009680:	4b74      	ldr	r3, [pc, #464]	; (8009854 <scaraFLowScurve+0x64c>)
 8009682:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009686:	f7f6 ffb7 	bl	80005f8 <__aeabi_dmul>
 800968a:	4602      	mov	r2, r0
 800968c:	460b      	mov	r3, r1
 800968e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009692:	f7f6 fdf9 	bl	8000288 <__aeabi_dsub>
 8009696:	4602      	mov	r2, r0
 8009698:	460b      	mov	r3, r1
 800969a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			 scurve->a_current	=	-j_max*tm + j_max*t;
 800969e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096a0:	60bb      	str	r3, [r7, #8]
 80096a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096a4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80096a8:	60fb      	str	r3, [r7, #12]
 80096aa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80096ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80096b2:	f7f6 ffa1 	bl	80005f8 <__aeabi_dmul>
 80096b6:	4602      	mov	r2, r0
 80096b8:	460b      	mov	r3, r1
 80096ba:	4614      	mov	r4, r2
 80096bc:	461d      	mov	r5, r3
 80096be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80096c2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80096c6:	f7f6 ff97 	bl	80005f8 <__aeabi_dmul>
 80096ca:	4602      	mov	r2, r0
 80096cc:	460b      	mov	r3, r1
 80096ce:	4620      	mov	r0, r4
 80096d0:	4629      	mov	r1, r5
 80096d2:	f7f6 fddb 	bl	800028c <__adddf3>
 80096d6:	4602      	mov	r2, r0
 80096d8:	460b      	mov	r3, r1
 80096da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80096dc:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_4 - j_max*tm*t + 0.5*j_max*t*t;
 80096e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e2:	e9d3 452a 	ldrd	r4, r5, [r3, #168]	; 0xa8
 80096e6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80096ea:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80096ee:	f7f6 ff83 	bl	80005f8 <__aeabi_dmul>
 80096f2:	4602      	mov	r2, r0
 80096f4:	460b      	mov	r3, r1
 80096f6:	4610      	mov	r0, r2
 80096f8:	4619      	mov	r1, r3
 80096fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80096fe:	f7f6 ff7b 	bl	80005f8 <__aeabi_dmul>
 8009702:	4602      	mov	r2, r0
 8009704:	460b      	mov	r3, r1
 8009706:	4620      	mov	r0, r4
 8009708:	4629      	mov	r1, r5
 800970a:	f7f6 fdbd 	bl	8000288 <__aeabi_dsub>
 800970e:	4602      	mov	r2, r0
 8009710:	460b      	mov	r3, r1
 8009712:	4614      	mov	r4, r2
 8009714:	461d      	mov	r5, r3
 8009716:	f04f 0200 	mov.w	r2, #0
 800971a:	4b50      	ldr	r3, [pc, #320]	; (800985c <scaraFLowScurve+0x654>)
 800971c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009720:	f7f6 ff6a 	bl	80005f8 <__aeabi_dmul>
 8009724:	4602      	mov	r2, r0
 8009726:	460b      	mov	r3, r1
 8009728:	4610      	mov	r0, r2
 800972a:	4619      	mov	r1, r3
 800972c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009730:	f7f6 ff62 	bl	80005f8 <__aeabi_dmul>
 8009734:	4602      	mov	r2, r0
 8009736:	460b      	mov	r3, r1
 8009738:	4610      	mov	r0, r2
 800973a:	4619      	mov	r1, r3
 800973c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009740:	f7f6 ff5a 	bl	80005f8 <__aeabi_dmul>
 8009744:	4602      	mov	r2, r0
 8009746:	460b      	mov	r3, r1
 8009748:	4620      	mov	r0, r4
 800974a:	4629      	mov	r1, r5
 800974c:	f7f6 fd9e 	bl	800028c <__adddf3>
 8009750:	4602      	mov	r2, r0
 8009752:	460b      	mov	r3, r1
 8009754:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009756:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t
 800975a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800975c:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 8009760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009762:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
 8009766:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800976a:	f7f6 ff45 	bl	80005f8 <__aeabi_dmul>
 800976e:	4602      	mov	r2, r0
 8009770:	460b      	mov	r3, r1
 8009772:	4620      	mov	r0, r4
 8009774:	4629      	mov	r1, r5
 8009776:	f7f6 fd89 	bl	800028c <__adddf3>
 800977a:	4602      	mov	r2, r0
 800977c:	460b      	mov	r3, r1
 800977e:	4614      	mov	r4, r2
 8009780:	461d      	mov	r5, r3
									- 0.5*j_max*tm*t*t
 8009782:	f04f 0200 	mov.w	r2, #0
 8009786:	4b35      	ldr	r3, [pc, #212]	; (800985c <scaraFLowScurve+0x654>)
 8009788:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800978c:	f7f6 ff34 	bl	80005f8 <__aeabi_dmul>
 8009790:	4602      	mov	r2, r0
 8009792:	460b      	mov	r3, r1
 8009794:	4610      	mov	r0, r2
 8009796:	4619      	mov	r1, r3
 8009798:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800979c:	f7f6 ff2c 	bl	80005f8 <__aeabi_dmul>
 80097a0:	4602      	mov	r2, r0
 80097a2:	460b      	mov	r3, r1
 80097a4:	4610      	mov	r0, r2
 80097a6:	4619      	mov	r1, r3
 80097a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80097ac:	f7f6 ff24 	bl	80005f8 <__aeabi_dmul>
 80097b0:	4602      	mov	r2, r0
 80097b2:	460b      	mov	r3, r1
 80097b4:	4610      	mov	r0, r2
 80097b6:	4619      	mov	r1, r3
 80097b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80097bc:	f7f6 ff1c 	bl	80005f8 <__aeabi_dmul>
 80097c0:	4602      	mov	r2, r0
 80097c2:	460b      	mov	r3, r1
 80097c4:	4620      	mov	r0, r4
 80097c6:	4629      	mov	r1, r5
 80097c8:	f7f6 fd5e 	bl	8000288 <__aeabi_dsub>
 80097cc:	4602      	mov	r2, r0
 80097ce:	460b      	mov	r3, r1
 80097d0:	4614      	mov	r4, r2
 80097d2:	461d      	mov	r5, r3
									+ j_max*t*t*t/6;
 80097d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80097d8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80097dc:	f7f6 ff0c 	bl	80005f8 <__aeabi_dmul>
 80097e0:	4602      	mov	r2, r0
 80097e2:	460b      	mov	r3, r1
 80097e4:	4610      	mov	r0, r2
 80097e6:	4619      	mov	r1, r3
 80097e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80097ec:	f7f6 ff04 	bl	80005f8 <__aeabi_dmul>
 80097f0:	4602      	mov	r2, r0
 80097f2:	460b      	mov	r3, r1
 80097f4:	4610      	mov	r0, r2
 80097f6:	4619      	mov	r1, r3
 80097f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80097fc:	f7f6 fefc 	bl	80005f8 <__aeabi_dmul>
 8009800:	4602      	mov	r2, r0
 8009802:	460b      	mov	r3, r1
 8009804:	4610      	mov	r0, r2
 8009806:	4619      	mov	r1, r3
 8009808:	f04f 0200 	mov.w	r2, #0
 800980c:	4b14      	ldr	r3, [pc, #80]	; (8009860 <scaraFLowScurve+0x658>)
 800980e:	f7f7 f81d 	bl	800084c <__aeabi_ddiv>
 8009812:	4602      	mov	r2, r0
 8009814:	460b      	mov	r3, r1
 8009816:	4620      	mov	r0, r4
 8009818:	4629      	mov	r1, r5
 800981a:	f7f6 fd37 	bl	800028c <__adddf3>
 800981e:	4602      	mov	r2, r0
 8009820:	460b      	mov	r3, r1
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t
 8009822:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009824:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 8009828:	e3b2      	b.n	8009f90 <scaraFLowScurve+0xd88>
		 } else {
			 scurve->a_current = 0;
 800982a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800982c:	f04f 0200 	mov.w	r2, #0
 8009830:	f04f 0300 	mov.w	r3, #0
 8009834:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
			 scurve->v_current = 0;
 8009838:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800983a:	f04f 0200 	mov.w	r2, #0
 800983e:	f04f 0300 	mov.w	r3, #0
 8009842:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
			 scurve->s_current = scurve->total_s;
 8009846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009848:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800984c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800984e:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 8009852:	e39d      	b.n	8009f90 <scaraFLowScurve+0xd88>
 8009854:	40080000 	.word	0x40080000
 8009858:	40100000 	.word	0x40100000
 800985c:	3fe00000 	.word	0x3fe00000
 8009860:	40180000 	.word	0x40180000
		 }

	 // SCURVE 5 PHASE: tc > 0
	 } else if ( 5 == scurve->num_of_phase) {
 8009864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009866:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800986a:	2b05      	cmp	r3, #5
 800986c:	f040 838e 	bne.w	8009f8c <scaraFLowScurve+0xd84>
		 // Phase 1
		 if ( (0 <= time) && ( time < tm)) {
 8009870:	f04f 0200 	mov.w	r2, #0
 8009874:	f04f 0300 	mov.w	r3, #0
 8009878:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800987c:	f7f7 f942 	bl	8000b04 <__aeabi_dcmpge>
 8009880:	4603      	mov	r3, r0
 8009882:	2b00      	cmp	r3, #0
 8009884:	d058      	beq.n	8009938 <scaraFLowScurve+0x730>
 8009886:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800988a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800988e:	f7f7 f925 	bl	8000adc <__aeabi_dcmplt>
 8009892:	4603      	mov	r3, r0
 8009894:	2b00      	cmp	r3, #0
 8009896:	d04f      	beq.n	8009938 <scaraFLowScurve+0x730>
			 t = time;
 8009898:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800989c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*t;
 80098a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80098a4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80098a8:	f7f6 fea6 	bl	80005f8 <__aeabi_dmul>
 80098ac:	4602      	mov	r2, r0
 80098ae:	460b      	mov	r3, r1
 80098b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80098b2:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
			 scurve->v_current	= 	0.5*j_max*t*t;
 80098b6:	f04f 0200 	mov.w	r2, #0
 80098ba:	4b91      	ldr	r3, [pc, #580]	; (8009b00 <scaraFLowScurve+0x8f8>)
 80098bc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80098c0:	f7f6 fe9a 	bl	80005f8 <__aeabi_dmul>
 80098c4:	4602      	mov	r2, r0
 80098c6:	460b      	mov	r3, r1
 80098c8:	4610      	mov	r0, r2
 80098ca:	4619      	mov	r1, r3
 80098cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80098d0:	f7f6 fe92 	bl	80005f8 <__aeabi_dmul>
 80098d4:	4602      	mov	r2, r0
 80098d6:	460b      	mov	r3, r1
 80098d8:	4610      	mov	r0, r2
 80098da:	4619      	mov	r1, r3
 80098dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80098e0:	f7f6 fe8a 	bl	80005f8 <__aeabi_dmul>
 80098e4:	4602      	mov	r2, r0
 80098e6:	460b      	mov	r3, r1
 80098e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80098ea:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
			 scurve->s_current 	= 	j_max*t*t*t/6;
 80098ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80098f2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80098f6:	f7f6 fe7f 	bl	80005f8 <__aeabi_dmul>
 80098fa:	4602      	mov	r2, r0
 80098fc:	460b      	mov	r3, r1
 80098fe:	4610      	mov	r0, r2
 8009900:	4619      	mov	r1, r3
 8009902:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009906:	f7f6 fe77 	bl	80005f8 <__aeabi_dmul>
 800990a:	4602      	mov	r2, r0
 800990c:	460b      	mov	r3, r1
 800990e:	4610      	mov	r0, r2
 8009910:	4619      	mov	r1, r3
 8009912:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009916:	f7f6 fe6f 	bl	80005f8 <__aeabi_dmul>
 800991a:	4602      	mov	r2, r0
 800991c:	460b      	mov	r3, r1
 800991e:	4610      	mov	r0, r2
 8009920:	4619      	mov	r1, r3
 8009922:	f04f 0200 	mov.w	r2, #0
 8009926:	4b77      	ldr	r3, [pc, #476]	; (8009b04 <scaraFLowScurve+0x8fc>)
 8009928:	f7f6 ff90 	bl	800084c <__aeabi_ddiv>
 800992c:	4602      	mov	r2, r0
 800992e:	460b      	mov	r3, r1
 8009930:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009932:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 8009936:	e32b      	b.n	8009f90 <scaraFLowScurve+0xd88>
		 // Phase 2
		 } else if ( (tm <= time) && ( time < (2*tm) ) ) {
 8009938:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800993c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009940:	f7f7 f8d6 	bl	8000af0 <__aeabi_dcmple>
 8009944:	4603      	mov	r3, r0
 8009946:	2b00      	cmp	r3, #0
 8009948:	f000 80de 	beq.w	8009b08 <scaraFLowScurve+0x900>
 800994c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009950:	4602      	mov	r2, r0
 8009952:	460b      	mov	r3, r1
 8009954:	f7f6 fc9a 	bl	800028c <__adddf3>
 8009958:	4602      	mov	r2, r0
 800995a:	460b      	mov	r3, r1
 800995c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009960:	f7f7 f8bc 	bl	8000adc <__aeabi_dcmplt>
 8009964:	4603      	mov	r3, r0
 8009966:	2b00      	cmp	r3, #0
 8009968:	f000 80ce 	beq.w	8009b08 <scaraFLowScurve+0x900>
			 t = time - tm;
 800996c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009970:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009974:	f7f6 fc88 	bl	8000288 <__aeabi_dsub>
 8009978:	4602      	mov	r2, r0
 800997a:	460b      	mov	r3, r1
 800997c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*tm - j_max*t;
 8009980:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009984:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009988:	f7f6 fe36 	bl	80005f8 <__aeabi_dmul>
 800998c:	4602      	mov	r2, r0
 800998e:	460b      	mov	r3, r1
 8009990:	4614      	mov	r4, r2
 8009992:	461d      	mov	r5, r3
 8009994:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009998:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800999c:	f7f6 fe2c 	bl	80005f8 <__aeabi_dmul>
 80099a0:	4602      	mov	r2, r0
 80099a2:	460b      	mov	r3, r1
 80099a4:	4620      	mov	r0, r4
 80099a6:	4629      	mov	r1, r5
 80099a8:	f7f6 fc6e 	bl	8000288 <__aeabi_dsub>
 80099ac:	4602      	mov	r2, r0
 80099ae:	460b      	mov	r3, r1
 80099b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80099b2:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
			 scurve->v_current 	= 	scurve->v_1 + j_max*tm*t - 0.5*j_max*t*t;
 80099b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b8:	e9d3 451e 	ldrd	r4, r5, [r3, #120]	; 0x78
 80099bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80099c0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80099c4:	f7f6 fe18 	bl	80005f8 <__aeabi_dmul>
 80099c8:	4602      	mov	r2, r0
 80099ca:	460b      	mov	r3, r1
 80099cc:	4610      	mov	r0, r2
 80099ce:	4619      	mov	r1, r3
 80099d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80099d4:	f7f6 fe10 	bl	80005f8 <__aeabi_dmul>
 80099d8:	4602      	mov	r2, r0
 80099da:	460b      	mov	r3, r1
 80099dc:	4620      	mov	r0, r4
 80099de:	4629      	mov	r1, r5
 80099e0:	f7f6 fc54 	bl	800028c <__adddf3>
 80099e4:	4602      	mov	r2, r0
 80099e6:	460b      	mov	r3, r1
 80099e8:	4614      	mov	r4, r2
 80099ea:	461d      	mov	r5, r3
 80099ec:	f04f 0200 	mov.w	r2, #0
 80099f0:	4b43      	ldr	r3, [pc, #268]	; (8009b00 <scaraFLowScurve+0x8f8>)
 80099f2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80099f6:	f7f6 fdff 	bl	80005f8 <__aeabi_dmul>
 80099fa:	4602      	mov	r2, r0
 80099fc:	460b      	mov	r3, r1
 80099fe:	4610      	mov	r0, r2
 8009a00:	4619      	mov	r1, r3
 8009a02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009a06:	f7f6 fdf7 	bl	80005f8 <__aeabi_dmul>
 8009a0a:	4602      	mov	r2, r0
 8009a0c:	460b      	mov	r3, r1
 8009a0e:	4610      	mov	r0, r2
 8009a10:	4619      	mov	r1, r3
 8009a12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009a16:	f7f6 fdef 	bl	80005f8 <__aeabi_dmul>
 8009a1a:	4602      	mov	r2, r0
 8009a1c:	460b      	mov	r3, r1
 8009a1e:	4620      	mov	r0, r4
 8009a20:	4629      	mov	r1, r5
 8009a22:	f7f6 fc31 	bl	8000288 <__aeabi_dsub>
 8009a26:	4602      	mov	r2, r0
 8009a28:	460b      	mov	r3, r1
 8009a2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009a2c:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
			 scurve->s_current 	=	scurve->s_1 + scurve->v_1*t + 0.5*j_max*tm*t*t - j_max*t*t*t/6;
 8009a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a32:	e9d3 4520 	ldrd	r4, r5, [r3, #128]	; 0x80
 8009a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a38:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8009a3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009a40:	f7f6 fdda 	bl	80005f8 <__aeabi_dmul>
 8009a44:	4602      	mov	r2, r0
 8009a46:	460b      	mov	r3, r1
 8009a48:	4620      	mov	r0, r4
 8009a4a:	4629      	mov	r1, r5
 8009a4c:	f7f6 fc1e 	bl	800028c <__adddf3>
 8009a50:	4602      	mov	r2, r0
 8009a52:	460b      	mov	r3, r1
 8009a54:	4614      	mov	r4, r2
 8009a56:	461d      	mov	r5, r3
 8009a58:	f04f 0200 	mov.w	r2, #0
 8009a5c:	4b28      	ldr	r3, [pc, #160]	; (8009b00 <scaraFLowScurve+0x8f8>)
 8009a5e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009a62:	f7f6 fdc9 	bl	80005f8 <__aeabi_dmul>
 8009a66:	4602      	mov	r2, r0
 8009a68:	460b      	mov	r3, r1
 8009a6a:	4610      	mov	r0, r2
 8009a6c:	4619      	mov	r1, r3
 8009a6e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009a72:	f7f6 fdc1 	bl	80005f8 <__aeabi_dmul>
 8009a76:	4602      	mov	r2, r0
 8009a78:	460b      	mov	r3, r1
 8009a7a:	4610      	mov	r0, r2
 8009a7c:	4619      	mov	r1, r3
 8009a7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009a82:	f7f6 fdb9 	bl	80005f8 <__aeabi_dmul>
 8009a86:	4602      	mov	r2, r0
 8009a88:	460b      	mov	r3, r1
 8009a8a:	4610      	mov	r0, r2
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009a92:	f7f6 fdb1 	bl	80005f8 <__aeabi_dmul>
 8009a96:	4602      	mov	r2, r0
 8009a98:	460b      	mov	r3, r1
 8009a9a:	4620      	mov	r0, r4
 8009a9c:	4629      	mov	r1, r5
 8009a9e:	f7f6 fbf5 	bl	800028c <__adddf3>
 8009aa2:	4602      	mov	r2, r0
 8009aa4:	460b      	mov	r3, r1
 8009aa6:	4614      	mov	r4, r2
 8009aa8:	461d      	mov	r5, r3
 8009aaa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009aae:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009ab2:	f7f6 fda1 	bl	80005f8 <__aeabi_dmul>
 8009ab6:	4602      	mov	r2, r0
 8009ab8:	460b      	mov	r3, r1
 8009aba:	4610      	mov	r0, r2
 8009abc:	4619      	mov	r1, r3
 8009abe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009ac2:	f7f6 fd99 	bl	80005f8 <__aeabi_dmul>
 8009ac6:	4602      	mov	r2, r0
 8009ac8:	460b      	mov	r3, r1
 8009aca:	4610      	mov	r0, r2
 8009acc:	4619      	mov	r1, r3
 8009ace:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009ad2:	f7f6 fd91 	bl	80005f8 <__aeabi_dmul>
 8009ad6:	4602      	mov	r2, r0
 8009ad8:	460b      	mov	r3, r1
 8009ada:	4610      	mov	r0, r2
 8009adc:	4619      	mov	r1, r3
 8009ade:	f04f 0200 	mov.w	r2, #0
 8009ae2:	4b08      	ldr	r3, [pc, #32]	; (8009b04 <scaraFLowScurve+0x8fc>)
 8009ae4:	f7f6 feb2 	bl	800084c <__aeabi_ddiv>
 8009ae8:	4602      	mov	r2, r0
 8009aea:	460b      	mov	r3, r1
 8009aec:	4620      	mov	r0, r4
 8009aee:	4629      	mov	r1, r5
 8009af0:	f7f6 fbca 	bl	8000288 <__aeabi_dsub>
 8009af4:	4602      	mov	r2, r0
 8009af6:	460b      	mov	r3, r1
 8009af8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009afa:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 8009afe:	e247      	b.n	8009f90 <scaraFLowScurve+0xd88>
 8009b00:	3fe00000 	.word	0x3fe00000
 8009b04:	40180000 	.word	0x40180000
		 // Phase 3
		 } else if ( ((2*tm) <= time) && ( time < (2*tm + tc)) ) {
 8009b08:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009b0c:	4602      	mov	r2, r0
 8009b0e:	460b      	mov	r3, r1
 8009b10:	f7f6 fbbc 	bl	800028c <__adddf3>
 8009b14:	4602      	mov	r2, r0
 8009b16:	460b      	mov	r3, r1
 8009b18:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009b1c:	f7f6 fff2 	bl	8000b04 <__aeabi_dcmpge>
 8009b20:	4603      	mov	r3, r0
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d049      	beq.n	8009bba <scaraFLowScurve+0x9b2>
 8009b26:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009b2a:	4602      	mov	r2, r0
 8009b2c:	460b      	mov	r3, r1
 8009b2e:	f7f6 fbad 	bl	800028c <__adddf3>
 8009b32:	4602      	mov	r2, r0
 8009b34:	460b      	mov	r3, r1
 8009b36:	4610      	mov	r0, r2
 8009b38:	4619      	mov	r1, r3
 8009b3a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009b3e:	f7f6 fba5 	bl	800028c <__adddf3>
 8009b42:	4602      	mov	r2, r0
 8009b44:	460b      	mov	r3, r1
 8009b46:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009b4a:	f7f6 ffc7 	bl	8000adc <__aeabi_dcmplt>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d032      	beq.n	8009bba <scaraFLowScurve+0x9b2>
			 t = time - 2*tm;
 8009b54:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009b58:	4602      	mov	r2, r0
 8009b5a:	460b      	mov	r3, r1
 8009b5c:	f7f6 fb96 	bl	800028c <__adddf3>
 8009b60:	4602      	mov	r2, r0
 8009b62:	460b      	mov	r3, r1
 8009b64:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009b68:	f7f6 fb8e 	bl	8000288 <__aeabi_dsub>
 8009b6c:	4602      	mov	r2, r0
 8009b6e:	460b      	mov	r3, r1
 8009b70:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			 scurve->a_current 	=	0;
 8009b74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009b76:	f04f 0200 	mov.w	r2, #0
 8009b7a:	f04f 0300 	mov.w	r3, #0
 8009b7e:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_2;
 8009b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b84:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8009b88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009b8a:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_2 + scurve->v_2*t;
 8009b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b90:	e9d3 4524 	ldrd	r4, r5, [r3, #144]	; 0x90
 8009b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b96:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 8009b9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009b9e:	f7f6 fd2b 	bl	80005f8 <__aeabi_dmul>
 8009ba2:	4602      	mov	r2, r0
 8009ba4:	460b      	mov	r3, r1
 8009ba6:	4620      	mov	r0, r4
 8009ba8:	4629      	mov	r1, r5
 8009baa:	f7f6 fb6f 	bl	800028c <__adddf3>
 8009bae:	4602      	mov	r2, r0
 8009bb0:	460b      	mov	r3, r1
 8009bb2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009bb4:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 8009bb8:	e1ea      	b.n	8009f90 <scaraFLowScurve+0xd88>
		 // Phase 4
		 } else if ( ((2*tm + tc) <= time) && ( time < (3*tm + tc)) ) {
 8009bba:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009bbe:	4602      	mov	r2, r0
 8009bc0:	460b      	mov	r3, r1
 8009bc2:	f7f6 fb63 	bl	800028c <__adddf3>
 8009bc6:	4602      	mov	r2, r0
 8009bc8:	460b      	mov	r3, r1
 8009bca:	4610      	mov	r0, r2
 8009bcc:	4619      	mov	r1, r3
 8009bce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009bd2:	f7f6 fb5b 	bl	800028c <__adddf3>
 8009bd6:	4602      	mov	r2, r0
 8009bd8:	460b      	mov	r3, r1
 8009bda:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009bde:	f7f6 ff91 	bl	8000b04 <__aeabi_dcmpge>
 8009be2:	4603      	mov	r3, r0
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	f000 80ad 	beq.w	8009d44 <scaraFLowScurve+0xb3c>
 8009bea:	f04f 0200 	mov.w	r2, #0
 8009bee:	4b52      	ldr	r3, [pc, #328]	; (8009d38 <scaraFLowScurve+0xb30>)
 8009bf0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009bf4:	f7f6 fd00 	bl	80005f8 <__aeabi_dmul>
 8009bf8:	4602      	mov	r2, r0
 8009bfa:	460b      	mov	r3, r1
 8009bfc:	4610      	mov	r0, r2
 8009bfe:	4619      	mov	r1, r3
 8009c00:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009c04:	f7f6 fb42 	bl	800028c <__adddf3>
 8009c08:	4602      	mov	r2, r0
 8009c0a:	460b      	mov	r3, r1
 8009c0c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009c10:	f7f6 ff64 	bl	8000adc <__aeabi_dcmplt>
 8009c14:	4603      	mov	r3, r0
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	f000 8094 	beq.w	8009d44 <scaraFLowScurve+0xb3c>
			 t = time - (2*tm + tc);
 8009c1c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009c20:	4602      	mov	r2, r0
 8009c22:	460b      	mov	r3, r1
 8009c24:	f7f6 fb32 	bl	800028c <__adddf3>
 8009c28:	4602      	mov	r2, r0
 8009c2a:	460b      	mov	r3, r1
 8009c2c:	4610      	mov	r0, r2
 8009c2e:	4619      	mov	r1, r3
 8009c30:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009c34:	f7f6 fb2a 	bl	800028c <__adddf3>
 8009c38:	4602      	mov	r2, r0
 8009c3a:	460b      	mov	r3, r1
 8009c3c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009c40:	f7f6 fb22 	bl	8000288 <__aeabi_dsub>
 8009c44:	4602      	mov	r2, r0
 8009c46:	460b      	mov	r3, r1
 8009c48:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			 scurve->a_current 	=	-j_max*t;
 8009c4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c4e:	603b      	str	r3, [r7, #0]
 8009c50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c52:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009c56:	607b      	str	r3, [r7, #4]
 8009c58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009c5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009c60:	f7f6 fcca 	bl	80005f8 <__aeabi_dmul>
 8009c64:	4602      	mov	r2, r0
 8009c66:	460b      	mov	r3, r1
 8009c68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c6a:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_3 - 0.5*j_max*t*t;
 8009c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c70:	e9d3 4526 	ldrd	r4, r5, [r3, #152]	; 0x98
 8009c74:	f04f 0200 	mov.w	r2, #0
 8009c78:	4b30      	ldr	r3, [pc, #192]	; (8009d3c <scaraFLowScurve+0xb34>)
 8009c7a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009c7e:	f7f6 fcbb 	bl	80005f8 <__aeabi_dmul>
 8009c82:	4602      	mov	r2, r0
 8009c84:	460b      	mov	r3, r1
 8009c86:	4610      	mov	r0, r2
 8009c88:	4619      	mov	r1, r3
 8009c8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009c8e:	f7f6 fcb3 	bl	80005f8 <__aeabi_dmul>
 8009c92:	4602      	mov	r2, r0
 8009c94:	460b      	mov	r3, r1
 8009c96:	4610      	mov	r0, r2
 8009c98:	4619      	mov	r1, r3
 8009c9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009c9e:	f7f6 fcab 	bl	80005f8 <__aeabi_dmul>
 8009ca2:	4602      	mov	r2, r0
 8009ca4:	460b      	mov	r3, r1
 8009ca6:	4620      	mov	r0, r4
 8009ca8:	4629      	mov	r1, r5
 8009caa:	f7f6 faed 	bl	8000288 <__aeabi_dsub>
 8009cae:	4602      	mov	r2, r0
 8009cb0:	460b      	mov	r3, r1
 8009cb2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009cb4:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_3 + scurve->v_3*t - j_max*t*t*t/6;
 8009cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cba:	e9d3 4528 	ldrd	r4, r5, [r3, #160]	; 0xa0
 8009cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc0:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 8009cc4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009cc8:	f7f6 fc96 	bl	80005f8 <__aeabi_dmul>
 8009ccc:	4602      	mov	r2, r0
 8009cce:	460b      	mov	r3, r1
 8009cd0:	4620      	mov	r0, r4
 8009cd2:	4629      	mov	r1, r5
 8009cd4:	f7f6 fada 	bl	800028c <__adddf3>
 8009cd8:	4602      	mov	r2, r0
 8009cda:	460b      	mov	r3, r1
 8009cdc:	4614      	mov	r4, r2
 8009cde:	461d      	mov	r5, r3
 8009ce0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009ce4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009ce8:	f7f6 fc86 	bl	80005f8 <__aeabi_dmul>
 8009cec:	4602      	mov	r2, r0
 8009cee:	460b      	mov	r3, r1
 8009cf0:	4610      	mov	r0, r2
 8009cf2:	4619      	mov	r1, r3
 8009cf4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009cf8:	f7f6 fc7e 	bl	80005f8 <__aeabi_dmul>
 8009cfc:	4602      	mov	r2, r0
 8009cfe:	460b      	mov	r3, r1
 8009d00:	4610      	mov	r0, r2
 8009d02:	4619      	mov	r1, r3
 8009d04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009d08:	f7f6 fc76 	bl	80005f8 <__aeabi_dmul>
 8009d0c:	4602      	mov	r2, r0
 8009d0e:	460b      	mov	r3, r1
 8009d10:	4610      	mov	r0, r2
 8009d12:	4619      	mov	r1, r3
 8009d14:	f04f 0200 	mov.w	r2, #0
 8009d18:	4b09      	ldr	r3, [pc, #36]	; (8009d40 <scaraFLowScurve+0xb38>)
 8009d1a:	f7f6 fd97 	bl	800084c <__aeabi_ddiv>
 8009d1e:	4602      	mov	r2, r0
 8009d20:	460b      	mov	r3, r1
 8009d22:	4620      	mov	r0, r4
 8009d24:	4629      	mov	r1, r5
 8009d26:	f7f6 faaf 	bl	8000288 <__aeabi_dsub>
 8009d2a:	4602      	mov	r2, r0
 8009d2c:	460b      	mov	r3, r1
 8009d2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009d30:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 8009d34:	e12c      	b.n	8009f90 <scaraFLowScurve+0xd88>
 8009d36:	bf00      	nop
 8009d38:	40080000 	.word	0x40080000
 8009d3c:	3fe00000 	.word	0x3fe00000
 8009d40:	40180000 	.word	0x40180000
		 // Phase 5
		 } else if ( ((3*tm + tc) <= time) && ( time < (4*tm + tc)) ) {
 8009d44:	f04f 0200 	mov.w	r2, #0
 8009d48:	4b94      	ldr	r3, [pc, #592]	; (8009f9c <scaraFLowScurve+0xd94>)
 8009d4a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009d4e:	f7f6 fc53 	bl	80005f8 <__aeabi_dmul>
 8009d52:	4602      	mov	r2, r0
 8009d54:	460b      	mov	r3, r1
 8009d56:	4610      	mov	r0, r2
 8009d58:	4619      	mov	r1, r3
 8009d5a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009d5e:	f7f6 fa95 	bl	800028c <__adddf3>
 8009d62:	4602      	mov	r2, r0
 8009d64:	460b      	mov	r3, r1
 8009d66:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009d6a:	f7f6 fecb 	bl	8000b04 <__aeabi_dcmpge>
 8009d6e:	4603      	mov	r3, r0
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	f000 80f6 	beq.w	8009f62 <scaraFLowScurve+0xd5a>
 8009d76:	f04f 0200 	mov.w	r2, #0
 8009d7a:	4b89      	ldr	r3, [pc, #548]	; (8009fa0 <scaraFLowScurve+0xd98>)
 8009d7c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009d80:	f7f6 fc3a 	bl	80005f8 <__aeabi_dmul>
 8009d84:	4602      	mov	r2, r0
 8009d86:	460b      	mov	r3, r1
 8009d88:	4610      	mov	r0, r2
 8009d8a:	4619      	mov	r1, r3
 8009d8c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009d90:	f7f6 fa7c 	bl	800028c <__adddf3>
 8009d94:	4602      	mov	r2, r0
 8009d96:	460b      	mov	r3, r1
 8009d98:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009d9c:	f7f6 fe9e 	bl	8000adc <__aeabi_dcmplt>
 8009da0:	4603      	mov	r3, r0
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	f000 80dd 	beq.w	8009f62 <scaraFLowScurve+0xd5a>
			 t = time - (3*tm + tc);
 8009da8:	f04f 0200 	mov.w	r2, #0
 8009dac:	4b7b      	ldr	r3, [pc, #492]	; (8009f9c <scaraFLowScurve+0xd94>)
 8009dae:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009db2:	f7f6 fc21 	bl	80005f8 <__aeabi_dmul>
 8009db6:	4602      	mov	r2, r0
 8009db8:	460b      	mov	r3, r1
 8009dba:	4610      	mov	r0, r2
 8009dbc:	4619      	mov	r1, r3
 8009dbe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009dc2:	f7f6 fa63 	bl	800028c <__adddf3>
 8009dc6:	4602      	mov	r2, r0
 8009dc8:	460b      	mov	r3, r1
 8009dca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009dce:	f7f6 fa5b 	bl	8000288 <__aeabi_dsub>
 8009dd2:	4602      	mov	r2, r0
 8009dd4:	460b      	mov	r3, r1
 8009dd6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			 scurve->a_current	=	-j_max*tm + j_max*t;
 8009dda:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8009ddc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009dde:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8009de2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009de6:	4620      	mov	r0, r4
 8009de8:	4629      	mov	r1, r5
 8009dea:	f7f6 fc05 	bl	80005f8 <__aeabi_dmul>
 8009dee:	4602      	mov	r2, r0
 8009df0:	460b      	mov	r3, r1
 8009df2:	4614      	mov	r4, r2
 8009df4:	461d      	mov	r5, r3
 8009df6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009dfa:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009dfe:	f7f6 fbfb 	bl	80005f8 <__aeabi_dmul>
 8009e02:	4602      	mov	r2, r0
 8009e04:	460b      	mov	r3, r1
 8009e06:	4620      	mov	r0, r4
 8009e08:	4629      	mov	r1, r5
 8009e0a:	f7f6 fa3f 	bl	800028c <__adddf3>
 8009e0e:	4602      	mov	r2, r0
 8009e10:	460b      	mov	r3, r1
 8009e12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009e14:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_4 - j_max*tm*t + 0.5*j_max*t*t;
 8009e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e1a:	e9d3 452a 	ldrd	r4, r5, [r3, #168]	; 0xa8
 8009e1e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009e22:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009e26:	f7f6 fbe7 	bl	80005f8 <__aeabi_dmul>
 8009e2a:	4602      	mov	r2, r0
 8009e2c:	460b      	mov	r3, r1
 8009e2e:	4610      	mov	r0, r2
 8009e30:	4619      	mov	r1, r3
 8009e32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009e36:	f7f6 fbdf 	bl	80005f8 <__aeabi_dmul>
 8009e3a:	4602      	mov	r2, r0
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	4620      	mov	r0, r4
 8009e40:	4629      	mov	r1, r5
 8009e42:	f7f6 fa21 	bl	8000288 <__aeabi_dsub>
 8009e46:	4602      	mov	r2, r0
 8009e48:	460b      	mov	r3, r1
 8009e4a:	4614      	mov	r4, r2
 8009e4c:	461d      	mov	r5, r3
 8009e4e:	f04f 0200 	mov.w	r2, #0
 8009e52:	4b54      	ldr	r3, [pc, #336]	; (8009fa4 <scaraFLowScurve+0xd9c>)
 8009e54:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009e58:	f7f6 fbce 	bl	80005f8 <__aeabi_dmul>
 8009e5c:	4602      	mov	r2, r0
 8009e5e:	460b      	mov	r3, r1
 8009e60:	4610      	mov	r0, r2
 8009e62:	4619      	mov	r1, r3
 8009e64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009e68:	f7f6 fbc6 	bl	80005f8 <__aeabi_dmul>
 8009e6c:	4602      	mov	r2, r0
 8009e6e:	460b      	mov	r3, r1
 8009e70:	4610      	mov	r0, r2
 8009e72:	4619      	mov	r1, r3
 8009e74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009e78:	f7f6 fbbe 	bl	80005f8 <__aeabi_dmul>
 8009e7c:	4602      	mov	r2, r0
 8009e7e:	460b      	mov	r3, r1
 8009e80:	4620      	mov	r0, r4
 8009e82:	4629      	mov	r1, r5
 8009e84:	f7f6 fa02 	bl	800028c <__adddf3>
 8009e88:	4602      	mov	r2, r0
 8009e8a:	460b      	mov	r3, r1
 8009e8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009e8e:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t - 0.5*j_max*tm*t*t + j_max*t*t*t/6;
 8009e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e94:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 8009e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e9a:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
 8009e9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009ea2:	f7f6 fba9 	bl	80005f8 <__aeabi_dmul>
 8009ea6:	4602      	mov	r2, r0
 8009ea8:	460b      	mov	r3, r1
 8009eaa:	4620      	mov	r0, r4
 8009eac:	4629      	mov	r1, r5
 8009eae:	f7f6 f9ed 	bl	800028c <__adddf3>
 8009eb2:	4602      	mov	r2, r0
 8009eb4:	460b      	mov	r3, r1
 8009eb6:	4614      	mov	r4, r2
 8009eb8:	461d      	mov	r5, r3
 8009eba:	f04f 0200 	mov.w	r2, #0
 8009ebe:	4b39      	ldr	r3, [pc, #228]	; (8009fa4 <scaraFLowScurve+0xd9c>)
 8009ec0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009ec4:	f7f6 fb98 	bl	80005f8 <__aeabi_dmul>
 8009ec8:	4602      	mov	r2, r0
 8009eca:	460b      	mov	r3, r1
 8009ecc:	4610      	mov	r0, r2
 8009ece:	4619      	mov	r1, r3
 8009ed0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009ed4:	f7f6 fb90 	bl	80005f8 <__aeabi_dmul>
 8009ed8:	4602      	mov	r2, r0
 8009eda:	460b      	mov	r3, r1
 8009edc:	4610      	mov	r0, r2
 8009ede:	4619      	mov	r1, r3
 8009ee0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009ee4:	f7f6 fb88 	bl	80005f8 <__aeabi_dmul>
 8009ee8:	4602      	mov	r2, r0
 8009eea:	460b      	mov	r3, r1
 8009eec:	4610      	mov	r0, r2
 8009eee:	4619      	mov	r1, r3
 8009ef0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009ef4:	f7f6 fb80 	bl	80005f8 <__aeabi_dmul>
 8009ef8:	4602      	mov	r2, r0
 8009efa:	460b      	mov	r3, r1
 8009efc:	4620      	mov	r0, r4
 8009efe:	4629      	mov	r1, r5
 8009f00:	f7f6 f9c2 	bl	8000288 <__aeabi_dsub>
 8009f04:	4602      	mov	r2, r0
 8009f06:	460b      	mov	r3, r1
 8009f08:	4614      	mov	r4, r2
 8009f0a:	461d      	mov	r5, r3
 8009f0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009f10:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009f14:	f7f6 fb70 	bl	80005f8 <__aeabi_dmul>
 8009f18:	4602      	mov	r2, r0
 8009f1a:	460b      	mov	r3, r1
 8009f1c:	4610      	mov	r0, r2
 8009f1e:	4619      	mov	r1, r3
 8009f20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009f24:	f7f6 fb68 	bl	80005f8 <__aeabi_dmul>
 8009f28:	4602      	mov	r2, r0
 8009f2a:	460b      	mov	r3, r1
 8009f2c:	4610      	mov	r0, r2
 8009f2e:	4619      	mov	r1, r3
 8009f30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009f34:	f7f6 fb60 	bl	80005f8 <__aeabi_dmul>
 8009f38:	4602      	mov	r2, r0
 8009f3a:	460b      	mov	r3, r1
 8009f3c:	4610      	mov	r0, r2
 8009f3e:	4619      	mov	r1, r3
 8009f40:	f04f 0200 	mov.w	r2, #0
 8009f44:	4b18      	ldr	r3, [pc, #96]	; (8009fa8 <scaraFLowScurve+0xda0>)
 8009f46:	f7f6 fc81 	bl	800084c <__aeabi_ddiv>
 8009f4a:	4602      	mov	r2, r0
 8009f4c:	460b      	mov	r3, r1
 8009f4e:	4620      	mov	r0, r4
 8009f50:	4629      	mov	r1, r5
 8009f52:	f7f6 f99b 	bl	800028c <__adddf3>
 8009f56:	4602      	mov	r2, r0
 8009f58:	460b      	mov	r3, r1
 8009f5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009f5c:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 8009f60:	e016      	b.n	8009f90 <scaraFLowScurve+0xd88>
		 } else {
			 scurve->a_current = 0;
 8009f62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009f64:	f04f 0200 	mov.w	r2, #0
 8009f68:	f04f 0300 	mov.w	r3, #0
 8009f6c:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
			 scurve->v_current = 0;
 8009f70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009f72:	f04f 0200 	mov.w	r2, #0
 8009f76:	f04f 0300 	mov.w	r3, #0
 8009f7a:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
			 scurve->s_current = scurve->total_s;
 8009f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f80:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8009f84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009f86:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 8009f8a:	e001      	b.n	8009f90 <scaraFLowScurve+0xd88>
		 }

	 } else {
		 return SCARA_STATUS_ERROR;
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	e000      	b.n	8009f92 <scaraFLowScurve+0xd8a>
	 }

	 return SCARA_STATUS_OK;
 8009f90:	2300      	movs	r3, #0
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	3748      	adds	r7, #72	; 0x48
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bdb0      	pop	{r4, r5, r7, pc}
 8009f9a:	bf00      	nop
 8009f9c:	40080000 	.word	0x40080000
 8009fa0:	40100000 	.word	0x40100000
 8009fa4:	3fe00000 	.word	0x3fe00000
 8009fa8:	40180000 	.word	0x40180000
 8009fac:	00000000 	.word	0x00000000

08009fb0 <scaraCheckWorkSpace4>:

/* Check limit 4 joint variable */
SCARA_StatusTypeDef	scaraCheckWorkSpace4 (double theta1, double theta2, double d3, double theta4) {
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b088      	sub	sp, #32
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	ed87 0b06 	vstr	d0, [r7, #24]
 8009fba:	ed87 1b04 	vstr	d1, [r7, #16]
 8009fbe:	ed87 2b02 	vstr	d2, [r7, #8]
 8009fc2:	ed87 3b00 	vstr	d3, [r7]
	// check theta 1
	if ( theta1 < LIM_MIN_J0-0.1 || theta1 > LIM_MAX_J0+0.1) {
 8009fc6:	a335      	add	r3, pc, #212	; (adr r3, 800a09c <scaraCheckWorkSpace4+0xec>)
 8009fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fcc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009fd0:	f7f6 fd84 	bl	8000adc <__aeabi_dcmplt>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d109      	bne.n	8009fee <scaraCheckWorkSpace4+0x3e>
 8009fda:	a332      	add	r3, pc, #200	; (adr r3, 800a0a4 <scaraCheckWorkSpace4+0xf4>)
 8009fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009fe4:	f7f6 fd98 	bl	8000b18 <__aeabi_dcmpgt>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d001      	beq.n	8009ff2 <scaraCheckWorkSpace4+0x42>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8009fee:	2307      	movs	r3, #7
 8009ff0:	e043      	b.n	800a07a <scaraCheckWorkSpace4+0xca>
	}
	// check theta 2
	if ( theta2 < LIM_MIN_J1-0.1 || theta2 > LIM_MAX_J1+0.1) {
 8009ff2:	a32e      	add	r3, pc, #184	; (adr r3, 800a0ac <scaraCheckWorkSpace4+0xfc>)
 8009ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009ffc:	f7f6 fd6e 	bl	8000adc <__aeabi_dcmplt>
 800a000:	4603      	mov	r3, r0
 800a002:	2b00      	cmp	r3, #0
 800a004:	d109      	bne.n	800a01a <scaraCheckWorkSpace4+0x6a>
 800a006:	a32b      	add	r3, pc, #172	; (adr r3, 800a0b4 <scaraCheckWorkSpace4+0x104>)
 800a008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a00c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a010:	f7f6 fd82 	bl	8000b18 <__aeabi_dcmpgt>
 800a014:	4603      	mov	r3, r0
 800a016:	2b00      	cmp	r3, #0
 800a018:	d001      	beq.n	800a01e <scaraCheckWorkSpace4+0x6e>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a01a:	2307      	movs	r3, #7
 800a01c:	e02d      	b.n	800a07a <scaraCheckWorkSpace4+0xca>
	}
	// check d 3
	if ( d3 < LIM_MIN_J2 || d3 > LIM_MAX_J2) {
 800a01e:	f04f 0200 	mov.w	r2, #0
 800a022:	f04f 0300 	mov.w	r3, #0
 800a026:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a02a:	f7f6 fd57 	bl	8000adc <__aeabi_dcmplt>
 800a02e:	4603      	mov	r3, r0
 800a030:	2b00      	cmp	r3, #0
 800a032:	d109      	bne.n	800a048 <scaraCheckWorkSpace4+0x98>
 800a034:	f04f 0200 	mov.w	r2, #0
 800a038:	4b17      	ldr	r3, [pc, #92]	; (800a098 <scaraCheckWorkSpace4+0xe8>)
 800a03a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a03e:	f7f6 fd6b 	bl	8000b18 <__aeabi_dcmpgt>
 800a042:	4603      	mov	r3, r0
 800a044:	2b00      	cmp	r3, #0
 800a046:	d001      	beq.n	800a04c <scaraCheckWorkSpace4+0x9c>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a048:	2307      	movs	r3, #7
 800a04a:	e016      	b.n	800a07a <scaraCheckWorkSpace4+0xca>
	}
	// check theta 4
	if ( theta4 < LIM_MIN_J3-0.1 || theta4 > LIM_MAX_J3+0.1) {
 800a04c:	a30e      	add	r3, pc, #56	; (adr r3, 800a088 <scaraCheckWorkSpace4+0xd8>)
 800a04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a052:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a056:	f7f6 fd41 	bl	8000adc <__aeabi_dcmplt>
 800a05a:	4603      	mov	r3, r0
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d109      	bne.n	800a074 <scaraCheckWorkSpace4+0xc4>
 800a060:	a30b      	add	r3, pc, #44	; (adr r3, 800a090 <scaraCheckWorkSpace4+0xe0>)
 800a062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a066:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a06a:	f7f6 fd55 	bl	8000b18 <__aeabi_dcmpgt>
 800a06e:	4603      	mov	r3, r0
 800a070:	2b00      	cmp	r3, #0
 800a072:	d001      	beq.n	800a078 <scaraCheckWorkSpace4+0xc8>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a074:	2307      	movs	r3, #7
 800a076:	e000      	b.n	800a07a <scaraCheckWorkSpace4+0xca>
	}
	return SCARA_STATUS_OK;
 800a078:	2300      	movs	r3, #0
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	3720      	adds	r7, #32
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}
 800a082:	bf00      	nop
 800a084:	f3af 8000 	nop.w
 800a088:	a7777778 	.word	0xa7777778
 800a08c:	c0088956 	.word	0xc0088956
 800a090:	a7777778 	.word	0xa7777778
 800a094:	40088956 	.word	0x40088956
 800a098:	40590000 	.word	0x40590000
 800a09c:	74444445 	.word	0x74444445
 800a0a0:	bff95623 	.word	0xbff95623
 800a0a4:	74444445 	.word	0x74444445
 800a0a8:	3ff95623 	.word	0x3ff95623
 800a0ac:	54cccccd 	.word	0x54cccccd
 800a0b0:	c003a649 	.word	0xc003a649
 800a0b4:	54cccccd 	.word	0x54cccccd
 800a0b8:	4003a649 	.word	0x4003a649
 800a0bc:	00000000 	.word	0x00000000

0800a0c0 <scaraCheckWorkSpace1>:

/* Check limit 1 joint variable */
SCARA_StatusTypeDef	scaraCheckWorkSpace1 (Trajectory_TargetTypeDef target, double value) {
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b084      	sub	sp, #16
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	ed87 0b00 	vstr	d0, [r7]
 800a0cc:	73fb      	strb	r3, [r7, #15]
	if ( TRAJECTORY_J0 == target) {
 800a0ce:	7bfb      	ldrb	r3, [r7, #15]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d117      	bne.n	800a104 <scaraCheckWorkSpace1+0x44>
		if ( (LIM_MIN_J0 <= value) && ( value <= LIM_MAX_J0)) {
 800a0d4:	a33d      	add	r3, pc, #244	; (adr r3, 800a1cc <scaraCheckWorkSpace1+0x10c>)
 800a0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0da:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a0de:	f7f6 fd11 	bl	8000b04 <__aeabi_dcmpge>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d00b      	beq.n	800a100 <scaraCheckWorkSpace1+0x40>
 800a0e8:	a33a      	add	r3, pc, #232	; (adr r3, 800a1d4 <scaraCheckWorkSpace1+0x114>)
 800a0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a0f2:	f7f6 fcfd 	bl	8000af0 <__aeabi_dcmple>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d001      	beq.n	800a100 <scaraCheckWorkSpace1+0x40>
			return SCARA_STATUS_OK;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	e054      	b.n	800a1aa <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a100:	2307      	movs	r3, #7
 800a102:	e052      	b.n	800a1aa <scaraCheckWorkSpace1+0xea>
		}
	} else if (TRAJECTORY_J1 == target) {
 800a104:	7bfb      	ldrb	r3, [r7, #15]
 800a106:	2b01      	cmp	r3, #1
 800a108:	d117      	bne.n	800a13a <scaraCheckWorkSpace1+0x7a>
		if ( (LIM_MIN_J1 <= value) && ( value <= LIM_MAX_J1)) {
 800a10a:	a334      	add	r3, pc, #208	; (adr r3, 800a1dc <scaraCheckWorkSpace1+0x11c>)
 800a10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a110:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a114:	f7f6 fcf6 	bl	8000b04 <__aeabi_dcmpge>
 800a118:	4603      	mov	r3, r0
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d00b      	beq.n	800a136 <scaraCheckWorkSpace1+0x76>
 800a11e:	a331      	add	r3, pc, #196	; (adr r3, 800a1e4 <scaraCheckWorkSpace1+0x124>)
 800a120:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a124:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a128:	f7f6 fce2 	bl	8000af0 <__aeabi_dcmple>
 800a12c:	4603      	mov	r3, r0
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d001      	beq.n	800a136 <scaraCheckWorkSpace1+0x76>
			return SCARA_STATUS_OK;
 800a132:	2300      	movs	r3, #0
 800a134:	e039      	b.n	800a1aa <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a136:	2307      	movs	r3, #7
 800a138:	e037      	b.n	800a1aa <scaraCheckWorkSpace1+0xea>
		}
	} else if (TRAJECTORY_J2 == target) {
 800a13a:	7bfb      	ldrb	r3, [r7, #15]
 800a13c:	2b02      	cmp	r3, #2
 800a13e:	d118      	bne.n	800a172 <scaraCheckWorkSpace1+0xb2>
		if ( (LIM_MIN_J2 <= value) && ( value <= LIM_MAX_J2)) {
 800a140:	f04f 0200 	mov.w	r2, #0
 800a144:	f04f 0300 	mov.w	r3, #0
 800a148:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a14c:	f7f6 fcda 	bl	8000b04 <__aeabi_dcmpge>
 800a150:	4603      	mov	r3, r0
 800a152:	2b00      	cmp	r3, #0
 800a154:	d00b      	beq.n	800a16e <scaraCheckWorkSpace1+0xae>
 800a156:	f04f 0200 	mov.w	r2, #0
 800a15a:	4b1b      	ldr	r3, [pc, #108]	; (800a1c8 <scaraCheckWorkSpace1+0x108>)
 800a15c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a160:	f7f6 fcc6 	bl	8000af0 <__aeabi_dcmple>
 800a164:	4603      	mov	r3, r0
 800a166:	2b00      	cmp	r3, #0
 800a168:	d001      	beq.n	800a16e <scaraCheckWorkSpace1+0xae>
			return SCARA_STATUS_OK;
 800a16a:	2300      	movs	r3, #0
 800a16c:	e01d      	b.n	800a1aa <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a16e:	2307      	movs	r3, #7
 800a170:	e01b      	b.n	800a1aa <scaraCheckWorkSpace1+0xea>
		}
	} else if (TRAJECTORY_J3 == target) {
 800a172:	7bfb      	ldrb	r3, [r7, #15]
 800a174:	2b03      	cmp	r3, #3
 800a176:	d117      	bne.n	800a1a8 <scaraCheckWorkSpace1+0xe8>
		if ( (LIM_MIN_J3 <= value) && ( value <= LIM_MAX_J3)) {
 800a178:	a30f      	add	r3, pc, #60	; (adr r3, 800a1b8 <scaraCheckWorkSpace1+0xf8>)
 800a17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a182:	f7f6 fcbf 	bl	8000b04 <__aeabi_dcmpge>
 800a186:	4603      	mov	r3, r0
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d00b      	beq.n	800a1a4 <scaraCheckWorkSpace1+0xe4>
 800a18c:	a30c      	add	r3, pc, #48	; (adr r3, 800a1c0 <scaraCheckWorkSpace1+0x100>)
 800a18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a192:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a196:	f7f6 fcab 	bl	8000af0 <__aeabi_dcmple>
 800a19a:	4603      	mov	r3, r0
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d001      	beq.n	800a1a4 <scaraCheckWorkSpace1+0xe4>
			return SCARA_STATUS_OK;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	e002      	b.n	800a1aa <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a1a4:	2307      	movs	r3, #7
 800a1a6:	e000      	b.n	800a1aa <scaraCheckWorkSpace1+0xea>
		}
	} else {
		return SCARA_STATUS_ERROR;
 800a1a8:	2301      	movs	r3, #1
	}
}
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	3710      	adds	r7, #16
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}
 800a1b2:	bf00      	nop
 800a1b4:	f3af 8000 	nop.w
 800a1b8:	daaaaaab 	.word	0xdaaaaaab
 800a1bc:	c007bc89 	.word	0xc007bc89
 800a1c0:	daaaaaab 	.word	0xdaaaaaab
 800a1c4:	4007bc89 	.word	0x4007bc89
 800a1c8:	40590000 	.word	0x40590000
 800a1cc:	daaaaaab 	.word	0xdaaaaaab
 800a1d0:	bff7bc89 	.word	0xbff7bc89
 800a1d4:	daaaaaab 	.word	0xdaaaaaab
 800a1d8:	3ff7bc89 	.word	0x3ff7bc89
 800a1dc:	88000000 	.word	0x88000000
 800a1e0:	c002d97c 	.word	0xc002d97c
 800a1e4:	88000000 	.word	0x88000000
 800a1e8:	4002d97c 	.word	0x4002d97c
 800a1ec:	00000000 	.word	0x00000000

0800a1f0 <scaraTestLinearDuty>:

SCARA_StatusTypeDef scaraTestLinearDuty()
{
 800a1f0:	b5b0      	push	{r4, r5, r7, lr}
 800a1f2:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 800a1f6:	af2e      	add	r7, sp, #184	; 0xb8
	int32_t sample_count;
	double run_time = 0;
 800a1f8:	f04f 0200 	mov.w	r2, #0
 800a1fc:	f04f 0300 	mov.w	r3, #0
 800a200:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
	SCARA_PositionTypeDef test_Next, test_Current;
	SCARA_StatusTypeDef status;
	memcpy(&test_Current, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 800a204:	463b      	mov	r3, r7
 800a206:	4a36      	ldr	r2, [pc, #216]	; (800a2e0 <scaraTestLinearDuty+0xf0>)
 800a208:	4618      	mov	r0, r3
 800a20a:	4611      	mov	r1, r2
 800a20c:	23c0      	movs	r3, #192	; 0xc0
 800a20e:	461a      	mov	r2, r3
 800a210:	f00b fd7e 	bl	8015d10 <memcpy>
	sample_count = ceil(myDUTY.time_total/T_SAMPLING);
 800a214:	4b33      	ldr	r3, [pc, #204]	; (800a2e4 <scaraTestLinearDuty+0xf4>)
 800a216:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800a21a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a21e:	a32e      	add	r3, pc, #184	; (adr r3, 800a2d8 <scaraTestLinearDuty+0xe8>)
 800a220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a224:	f7f6 fb12 	bl	800084c <__aeabi_ddiv>
 800a228:	4602      	mov	r2, r0
 800a22a:	460b      	mov	r3, r1
 800a22c:	ec43 2b17 	vmov	d7, r2, r3
 800a230:	eeb0 0a47 	vmov.f32	s0, s14
 800a234:	eef0 0a67 	vmov.f32	s1, s15
 800a238:	f010 f9c6 	bl	801a5c8 <ceil>
 800a23c:	ec53 2b10 	vmov	r2, r3, d0
 800a240:	4610      	mov	r0, r2
 800a242:	4619      	mov	r1, r3
 800a244:	f7f6 fc88 	bl	8000b58 <__aeabi_d2iz>
 800a248:	4603      	mov	r3, r0
 800a24a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	for (int32_t i = 1; i < sample_count; i++) {
 800a24e:	2301      	movs	r3, #1
 800a250:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800a254:	e032      	b.n	800a2bc <scaraTestLinearDuty+0xcc>
		run_time += T_SAMPLING;
 800a256:	a320      	add	r3, pc, #128	; (adr r3, 800a2d8 <scaraTestLinearDuty+0xe8>)
 800a258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a25c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800a260:	f7f6 f814 	bl	800028c <__adddf3>
 800a264:	4602      	mov	r2, r0
 800a266:	460b      	mov	r3, r1
 800a268:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
		status = scaraTestFlowDuty(run_time, &test_Next, test_Current);
 800a26c:	463c      	mov	r4, r7
 800a26e:	f107 05c0 	add.w	r5, r7, #192	; 0xc0
 800a272:	4668      	mov	r0, sp
 800a274:	f104 0308 	add.w	r3, r4, #8
 800a278:	22b8      	movs	r2, #184	; 0xb8
 800a27a:	4619      	mov	r1, r3
 800a27c:	f00b fd48 	bl	8015d10 <memcpy>
 800a280:	e894 000c 	ldmia.w	r4, {r2, r3}
 800a284:	4628      	mov	r0, r5
 800a286:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 800a28a:	f7fd ff8f 	bl	80081ac <scaraTestFlowDuty>
 800a28e:	4603      	mov	r3, r0
 800a290:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
		if (status != SCARA_STATUS_OK) {
 800a294:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d002      	beq.n	800a2a2 <scaraTestLinearDuty+0xb2>
			return status;
 800a29c:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800a2a0:	e013      	b.n	800a2ca <scaraTestLinearDuty+0xda>
		}
		memcpy(&test_Next, &test_Current, sizeof(SCARA_PositionTypeDef));
 800a2a2:	463a      	mov	r2, r7
 800a2a4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800a2a8:	4611      	mov	r1, r2
 800a2aa:	22c0      	movs	r2, #192	; 0xc0
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f00b fd2f 	bl	8015d10 <memcpy>
	for (int32_t i = 1; i < sample_count; i++) {
 800a2b2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800a2b6:	3301      	adds	r3, #1
 800a2b8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800a2bc:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800a2c0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800a2c4:	429a      	cmp	r2, r3
 800a2c6:	dbc6      	blt.n	800a256 <scaraTestLinearDuty+0x66>
	}
	return SCARA_STATUS_OK;
 800a2c8:	2300      	movs	r3, #0
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bdb0      	pop	{r4, r5, r7, pc}
 800a2d4:	f3af 8000 	nop.w
 800a2d8:	40000000 	.word	0x40000000
 800a2dc:	3f847ae1 	.word	0x3f847ae1
 800a2e0:	20005af0 	.word	0x20005af0
 800a2e4:	20004f30 	.word	0x20004f30

0800a2e8 <scaraTestDuty>:

/* Check all of point in travel */
SCARA_StatusTypeDef	scaraTestDuty(void) {
 800a2e8:	b5b0      	push	{r4, r5, r7, lr}
 800a2ea:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 800a2ee:	af2e      	add	r7, sp, #184	; 0xb8
	int32_t sample_count;
	double run_time = 0;
 800a2f0:	f04f 0200 	mov.w	r2, #0
 800a2f4:	f04f 0300 	mov.w	r3, #0
 800a2f8:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
	SCARA_PositionTypeDef test_Next, test_Current;
	SCARA_StatusTypeDef status;
	memcpy(&test_Current, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 800a2fc:	463b      	mov	r3, r7
 800a2fe:	4a36      	ldr	r2, [pc, #216]	; (800a3d8 <scaraTestDuty+0xf0>)
 800a300:	4618      	mov	r0, r3
 800a302:	4611      	mov	r1, r2
 800a304:	23c0      	movs	r3, #192	; 0xc0
 800a306:	461a      	mov	r2, r3
 800a308:	f00b fd02 	bl	8015d10 <memcpy>
	sample_count = ceil(myDUTY.time_total/T_SAMPLING);
 800a30c:	4b33      	ldr	r3, [pc, #204]	; (800a3dc <scaraTestDuty+0xf4>)
 800a30e:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800a312:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a316:	a32e      	add	r3, pc, #184	; (adr r3, 800a3d0 <scaraTestDuty+0xe8>)
 800a318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a31c:	f7f6 fa96 	bl	800084c <__aeabi_ddiv>
 800a320:	4602      	mov	r2, r0
 800a322:	460b      	mov	r3, r1
 800a324:	ec43 2b17 	vmov	d7, r2, r3
 800a328:	eeb0 0a47 	vmov.f32	s0, s14
 800a32c:	eef0 0a67 	vmov.f32	s1, s15
 800a330:	f010 f94a 	bl	801a5c8 <ceil>
 800a334:	ec53 2b10 	vmov	r2, r3, d0
 800a338:	4610      	mov	r0, r2
 800a33a:	4619      	mov	r1, r3
 800a33c:	f7f6 fc0c 	bl	8000b58 <__aeabi_d2iz>
 800a340:	4603      	mov	r3, r0
 800a342:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	for (int32_t i = 1; i < sample_count; i++) {
 800a346:	2301      	movs	r3, #1
 800a348:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800a34c:	e032      	b.n	800a3b4 <scaraTestDuty+0xcc>
		run_time += T_SAMPLING;
 800a34e:	a320      	add	r3, pc, #128	; (adr r3, 800a3d0 <scaraTestDuty+0xe8>)
 800a350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a354:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800a358:	f7f5 ff98 	bl	800028c <__adddf3>
 800a35c:	4602      	mov	r2, r0
 800a35e:	460b      	mov	r3, r1
 800a360:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
		status = scaraFlowDuty(run_time, &test_Next, test_Current);
 800a364:	463c      	mov	r4, r7
 800a366:	f107 05c0 	add.w	r5, r7, #192	; 0xc0
 800a36a:	4668      	mov	r0, sp
 800a36c:	f104 0308 	add.w	r3, r4, #8
 800a370:	22b8      	movs	r2, #184	; 0xb8
 800a372:	4619      	mov	r1, r3
 800a374:	f00b fccc 	bl	8015d10 <memcpy>
 800a378:	e894 000c 	ldmia.w	r4, {r2, r3}
 800a37c:	4628      	mov	r0, r5
 800a37e:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 800a382:	f7fd ff7d 	bl	8008280 <scaraFlowDuty>
 800a386:	4603      	mov	r3, r0
 800a388:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
		if (status != SCARA_STATUS_OK) {
 800a38c:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800a390:	2b00      	cmp	r3, #0
 800a392:	d002      	beq.n	800a39a <scaraTestDuty+0xb2>
			return status;
 800a394:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800a398:	e013      	b.n	800a3c2 <scaraTestDuty+0xda>
		}
		memcpy(&test_Next, &test_Current, sizeof(SCARA_PositionTypeDef));
 800a39a:	463a      	mov	r2, r7
 800a39c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800a3a0:	4611      	mov	r1, r2
 800a3a2:	22c0      	movs	r2, #192	; 0xc0
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f00b fcb3 	bl	8015d10 <memcpy>
	for (int32_t i = 1; i < sample_count; i++) {
 800a3aa:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800a3ae:	3301      	adds	r3, #1
 800a3b0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800a3b4:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800a3b8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800a3bc:	429a      	cmp	r2, r3
 800a3be:	dbc6      	blt.n	800a34e <scaraTestDuty+0x66>
	}
	return SCARA_STATUS_OK;
 800a3c0:	2300      	movs	r3, #0
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bdb0      	pop	{r4, r5, r7, pc}
 800a3cc:	f3af 8000 	nop.w
 800a3d0:	40000000 	.word	0x40000000
 800a3d4:	3f847ae1 	.word	0x3f847ae1
 800a3d8:	20005af0 	.word	0x20005af0
 800a3dc:	20004f30 	.word	0x20004f30

0800a3e0 <scaraSetScanFlag>:

void				scaraSetScanFlag(void) {
 800a3e0:	b480      	push	{r7}
 800a3e2:	af00      	add	r7, sp, #0
	mySCARA.isScanLitmit = TRUE;
 800a3e4:	4b03      	ldr	r3, [pc, #12]	; (800a3f4 <scaraSetScanFlag+0x14>)
 800a3e6:	2201      	movs	r2, #1
 800a3e8:	70da      	strb	r2, [r3, #3]
}
 800a3ea:	bf00      	nop
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f2:	4770      	bx	lr
 800a3f4:	2000081c 	.word	0x2000081c

0800a3f8 <scaraSetOutput>:

void				scaraSetOutput		(uint8_t level) {
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b082      	sub	sp, #8
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	4603      	mov	r3, r0
 800a400:	71fb      	strb	r3, [r7, #7]
	mySCARA.outputSet	 = level;
 800a402:	4a05      	ldr	r2, [pc, #20]	; (800a418 <scaraSetOutput+0x20>)
 800a404:	79fb      	ldrb	r3, [r7, #7]
 800a406:	7113      	strb	r3, [r2, #4]
	lowlayer_setOutput(level);
 800a408:	79fb      	ldrb	r3, [r7, #7]
 800a40a:	4618      	mov	r0, r3
 800a40c:	f7fa fdd8 	bl	8004fc0 <lowlayer_setOutput>
}
 800a410:	bf00      	nop
 800a412:	3708      	adds	r7, #8
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}
 800a418:	2000081c 	.word	0x2000081c

0800a41c <scaraSetDutyState>:

void				scaraSetDutyState(SCARA_DutyStateTypeDef state) {
 800a41c:	b480      	push	{r7}
 800a41e:	b083      	sub	sp, #12
 800a420:	af00      	add	r7, sp, #0
 800a422:	4603      	mov	r3, r0
 800a424:	71fb      	strb	r3, [r7, #7]
	mySCARA.duty_State = state;
 800a426:	4a04      	ldr	r2, [pc, #16]	; (800a438 <scaraSetDutyState+0x1c>)
 800a428:	79fb      	ldrb	r3, [r7, #7]
 800a42a:	7093      	strb	r3, [r2, #2]
}
 800a42c:	bf00      	nop
 800a42e:	370c      	adds	r7, #12
 800a430:	46bd      	mov	sp, r7
 800a432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a436:	4770      	bx	lr
 800a438:	2000081c 	.word	0x2000081c

0800a43c <scaraSetMode>:

void				scaraSetMode(SCARA_ModeTypeDef mode) {
 800a43c:	b480      	push	{r7}
 800a43e:	b083      	sub	sp, #12
 800a440:	af00      	add	r7, sp, #0
 800a442:	4603      	mov	r3, r0
 800a444:	71fb      	strb	r3, [r7, #7]
	mySCARA.mode = mode;
 800a446:	4a04      	ldr	r2, [pc, #16]	; (800a458 <scaraSetMode+0x1c>)
 800a448:	79fb      	ldrb	r3, [r7, #7]
 800a44a:	7053      	strb	r3, [r2, #1]
}
 800a44c:	bf00      	nop
 800a44e:	370c      	adds	r7, #12
 800a450:	46bd      	mov	sp, r7
 800a452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a456:	4770      	bx	lr
 800a458:	2000081c 	.word	0x2000081c

0800a45c <scaraSetMethod>:

void				scaraSetMethod(SCARA_MethodTypeDef method) {
 800a45c:	b480      	push	{r7}
 800a45e:	b083      	sub	sp, #12
 800a460:	af00      	add	r7, sp, #0
 800a462:	4603      	mov	r3, r0
 800a464:	71fb      	strb	r3, [r7, #7]
	mySCARA.method = method;
 800a466:	4a04      	ldr	r2, [pc, #16]	; (800a478 <scaraSetMethod+0x1c>)
 800a468:	79fb      	ldrb	r3, [r7, #7]
 800a46a:	7013      	strb	r3, [r2, #0]
}
 800a46c:	bf00      	nop
 800a46e:	370c      	adds	r7, #12
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr
 800a478:	2000081c 	.word	0x2000081c

0800a47c <scaraGetPosition>:


void				scaraGetPosition	(SCARA_PositionTypeDef *pos) {
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b082      	sub	sp, #8
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
	memcpy(pos, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 800a484:	22c0      	movs	r2, #192	; 0xc0
 800a486:	4904      	ldr	r1, [pc, #16]	; (800a498 <scaraGetPosition+0x1c>)
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f00b fc41 	bl	8015d10 <memcpy>
}
 800a48e:	bf00      	nop
 800a490:	3708      	adds	r7, #8
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}
 800a496:	bf00      	nop
 800a498:	20005af0 	.word	0x20005af0

0800a49c <scaraUpdatePosition>:

void				scaraUpdatePosition (SCARA_PositionTypeDef *pos) {
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b082      	sub	sp, #8
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
	memcpy(&positionNext, pos, sizeof(SCARA_PositionTypeDef));
 800a4a4:	22c0      	movs	r2, #192	; 0xc0
 800a4a6:	6879      	ldr	r1, [r7, #4]
 800a4a8:	4803      	ldr	r0, [pc, #12]	; (800a4b8 <scaraUpdatePosition+0x1c>)
 800a4aa:	f00b fc31 	bl	8015d10 <memcpy>
}
 800a4ae:	bf00      	nop
 800a4b0:	3708      	adds	r7, #8
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}
 800a4b6:	bf00      	nop
 800a4b8:	20005c70 	.word	0x20005c70

0800a4bc <scaraGetMode>:


SCARA_ModeTypeDef	scaraGetMode(void) {
 800a4bc:	b480      	push	{r7}
 800a4be:	af00      	add	r7, sp, #0
	return mySCARA.mode;
 800a4c0:	4b03      	ldr	r3, [pc, #12]	; (800a4d0 <scaraGetMode+0x14>)
 800a4c2:	785b      	ldrb	r3, [r3, #1]
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4cc:	4770      	bx	lr
 800a4ce:	bf00      	nop
 800a4d0:	2000081c 	.word	0x2000081c

0800a4d4 <scaraGetMethod>:

SCARA_MethodTypeDef	scaraGetMethod(void) {
 800a4d4:	b480      	push	{r7}
 800a4d6:	af00      	add	r7, sp, #0
	return mySCARA.method;
 800a4d8:	4b03      	ldr	r3, [pc, #12]	; (800a4e8 <scaraGetMethod+0x14>)
 800a4da:	781b      	ldrb	r3, [r3, #0]
}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e4:	4770      	bx	lr
 800a4e6:	bf00      	nop
 800a4e8:	2000081c 	.word	0x2000081c

0800a4ec <scaraGetDutyState>:

SCARA_DutyStateTypeDef	scaraGetDutyState(void) {
 800a4ec:	b480      	push	{r7}
 800a4ee:	af00      	add	r7, sp, #0
	return mySCARA.duty_State;
 800a4f0:	4b03      	ldr	r3, [pc, #12]	; (800a500 <scaraGetDutyState+0x14>)
 800a4f2:	789b      	ldrb	r3, [r3, #2]
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr
 800a4fe:	bf00      	nop
 800a500:	2000081c 	.word	0x2000081c

0800a504 <scaraIsScanLimit>:

uint8_t					scaraIsScanLimit(void) {
 800a504:	b480      	push	{r7}
 800a506:	af00      	add	r7, sp, #0
	return mySCARA.isScanLitmit;
 800a508:	4b03      	ldr	r3, [pc, #12]	; (800a518 <scaraIsScanLimit+0x14>)
 800a50a:	78db      	ldrb	r3, [r3, #3]
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	46bd      	mov	sp, r7
 800a510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a514:	4770      	bx	lr
 800a516:	bf00      	nop
 800a518:	2000081c 	.word	0x2000081c

0800a51c <scaraIsFinish>:

uint8_t					scaraIsFinish		(double run_time) {
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b082      	sub	sp, #8
 800a520:	af00      	add	r7, sp, #0
 800a522:	ed87 0b00 	vstr	d0, [r7]
	if(myDUTY.time_total  < run_time) {
 800a526:	4b09      	ldr	r3, [pc, #36]	; (800a54c <scaraIsFinish+0x30>)
 800a528:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800a52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a530:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a534:	f7f6 faf0 	bl	8000b18 <__aeabi_dcmpgt>
 800a538:	4603      	mov	r3, r0
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d001      	beq.n	800a542 <scaraIsFinish+0x26>
		return TRUE;
 800a53e:	2301      	movs	r3, #1
 800a540:	e000      	b.n	800a544 <scaraIsFinish+0x28>
	} else {
		return FALSE;
 800a542:	2300      	movs	r3, #0
	}
}
 800a544:	4618      	mov	r0, r3
 800a546:	3708      	adds	r7, #8
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}
 800a54c:	20004f30 	.word	0x20004f30

0800a550 <scaraPosition_packaging>:
						time);
	return lenght_buff;
}

int32_t scaraPosition_packaging(uint8_t *data_packet, SCARA_PositionTypeDef position)
{
 800a550:	b082      	sub	sp, #8
 800a552:	b580      	push	{r7, lr}
 800a554:	b084      	sub	sp, #16
 800a556:	af00      	add	r7, sp, #0
 800a558:	6078      	str	r0, [r7, #4]
 800a55a:	f107 0118 	add.w	r1, r7, #24
 800a55e:	e881 000c 	stmia.w	r1, {r2, r3}
	int32_t cur_ptr = -4;
 800a562:	f06f 0303 	mvn.w	r3, #3
 800a566:	60fb      	str	r3, [r7, #12]
	Append_Coordinate_Value((int32_t)(position.x*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a568:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800a56c:	a35c      	add	r3, pc, #368	; (adr r3, 800a6e0 <scaraPosition_packaging+0x190>)
 800a56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a572:	f7f6 f841 	bl	80005f8 <__aeabi_dmul>
 800a576:	4602      	mov	r2, r0
 800a578:	460b      	mov	r3, r1
 800a57a:	4610      	mov	r0, r2
 800a57c:	4619      	mov	r1, r3
 800a57e:	f7f6 faeb 	bl	8000b58 <__aeabi_d2iz>
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	3304      	adds	r3, #4
 800a586:	60fb      	str	r3, [r7, #12]
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	687a      	ldr	r2, [r7, #4]
 800a58c:	4413      	add	r3, r2
 800a58e:	4619      	mov	r1, r3
 800a590:	f000 f8aa 	bl	800a6e8 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.y*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a594:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a598:	a351      	add	r3, pc, #324	; (adr r3, 800a6e0 <scaraPosition_packaging+0x190>)
 800a59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a59e:	f7f6 f82b 	bl	80005f8 <__aeabi_dmul>
 800a5a2:	4602      	mov	r2, r0
 800a5a4:	460b      	mov	r3, r1
 800a5a6:	4610      	mov	r0, r2
 800a5a8:	4619      	mov	r1, r3
 800a5aa:	f7f6 fad5 	bl	8000b58 <__aeabi_d2iz>
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	3304      	adds	r3, #4
 800a5b2:	60fb      	str	r3, [r7, #12]
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	687a      	ldr	r2, [r7, #4]
 800a5b8:	4413      	add	r3, r2
 800a5ba:	4619      	mov	r1, r3
 800a5bc:	f000 f894 	bl	800a6e8 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.z*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a5c0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800a5c4:	a346      	add	r3, pc, #280	; (adr r3, 800a6e0 <scaraPosition_packaging+0x190>)
 800a5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ca:	f7f6 f815 	bl	80005f8 <__aeabi_dmul>
 800a5ce:	4602      	mov	r2, r0
 800a5d0:	460b      	mov	r3, r1
 800a5d2:	4610      	mov	r0, r2
 800a5d4:	4619      	mov	r1, r3
 800a5d6:	f7f6 fabf 	bl	8000b58 <__aeabi_d2iz>
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	3304      	adds	r3, #4
 800a5de:	60fb      	str	r3, [r7, #12]
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	687a      	ldr	r2, [r7, #4]
 800a5e4:	4413      	add	r3, r2
 800a5e6:	4619      	mov	r1, r3
 800a5e8:	f000 f87e 	bl	800a6e8 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.roll*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a5ec:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800a5f0:	a33b      	add	r3, pc, #236	; (adr r3, 800a6e0 <scaraPosition_packaging+0x190>)
 800a5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5f6:	f7f5 ffff 	bl	80005f8 <__aeabi_dmul>
 800a5fa:	4602      	mov	r2, r0
 800a5fc:	460b      	mov	r3, r1
 800a5fe:	4610      	mov	r0, r2
 800a600:	4619      	mov	r1, r3
 800a602:	f7f6 faa9 	bl	8000b58 <__aeabi_d2iz>
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	3304      	adds	r3, #4
 800a60a:	60fb      	str	r3, [r7, #12]
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	4413      	add	r3, r2
 800a612:	4619      	mov	r1, r3
 800a614:	f000 f868 	bl	800a6e8 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta1*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a618:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a61c:	a330      	add	r3, pc, #192	; (adr r3, 800a6e0 <scaraPosition_packaging+0x190>)
 800a61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a622:	f7f5 ffe9 	bl	80005f8 <__aeabi_dmul>
 800a626:	4602      	mov	r2, r0
 800a628:	460b      	mov	r3, r1
 800a62a:	4610      	mov	r0, r2
 800a62c:	4619      	mov	r1, r3
 800a62e:	f7f6 fa93 	bl	8000b58 <__aeabi_d2iz>
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	3304      	adds	r3, #4
 800a636:	60fb      	str	r3, [r7, #12]
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	687a      	ldr	r2, [r7, #4]
 800a63c:	4413      	add	r3, r2
 800a63e:	4619      	mov	r1, r3
 800a640:	f000 f852 	bl	800a6e8 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta2*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a644:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800a648:	a325      	add	r3, pc, #148	; (adr r3, 800a6e0 <scaraPosition_packaging+0x190>)
 800a64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a64e:	f7f5 ffd3 	bl	80005f8 <__aeabi_dmul>
 800a652:	4602      	mov	r2, r0
 800a654:	460b      	mov	r3, r1
 800a656:	4610      	mov	r0, r2
 800a658:	4619      	mov	r1, r3
 800a65a:	f7f6 fa7d 	bl	8000b58 <__aeabi_d2iz>
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	3304      	adds	r3, #4
 800a662:	60fb      	str	r3, [r7, #12]
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	687a      	ldr	r2, [r7, #4]
 800a668:	4413      	add	r3, r2
 800a66a:	4619      	mov	r1, r3
 800a66c:	f000 f83c 	bl	800a6e8 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.D3*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a670:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800a674:	a31a      	add	r3, pc, #104	; (adr r3, 800a6e0 <scaraPosition_packaging+0x190>)
 800a676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a67a:	f7f5 ffbd 	bl	80005f8 <__aeabi_dmul>
 800a67e:	4602      	mov	r2, r0
 800a680:	460b      	mov	r3, r1
 800a682:	4610      	mov	r0, r2
 800a684:	4619      	mov	r1, r3
 800a686:	f7f6 fa67 	bl	8000b58 <__aeabi_d2iz>
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	3304      	adds	r3, #4
 800a68e:	60fb      	str	r3, [r7, #12]
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	687a      	ldr	r2, [r7, #4]
 800a694:	4413      	add	r3, r2
 800a696:	4619      	mov	r1, r3
 800a698:	f000 f826 	bl	800a6e8 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta4*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a69c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a6a0:	a30f      	add	r3, pc, #60	; (adr r3, 800a6e0 <scaraPosition_packaging+0x190>)
 800a6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a6:	f7f5 ffa7 	bl	80005f8 <__aeabi_dmul>
 800a6aa:	4602      	mov	r2, r0
 800a6ac:	460b      	mov	r3, r1
 800a6ae:	4610      	mov	r0, r2
 800a6b0:	4619      	mov	r1, r3
 800a6b2:	f7f6 fa51 	bl	8000b58 <__aeabi_d2iz>
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	3304      	adds	r3, #4
 800a6ba:	60fb      	str	r3, [r7, #12]
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	687a      	ldr	r2, [r7, #4]
 800a6c0:	4413      	add	r3, r2
 800a6c2:	4619      	mov	r1, r3
 800a6c4:	f000 f810 	bl	800a6e8 <Append_Coordinate_Value>
	return cur_ptr + 4;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	3304      	adds	r3, #4
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	3710      	adds	r7, #16
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a6d6:	b002      	add	sp, #8
 800a6d8:	4770      	bx	lr
 800a6da:	bf00      	nop
 800a6dc:	f3af 8000 	nop.w
 800a6e0:	00000000 	.word	0x00000000
 800a6e4:	412e8480 	.word	0x412e8480

0800a6e8 <Append_Coordinate_Value>:

void Append_Coordinate_Value(int32_t append_value, uint8_t* append_position)
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b083      	sub	sp, #12
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
 800a6f0:	6039      	str	r1, [r7, #0]
	append_position[0] = (uint8_t)(append_value & 0xff);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	b2da      	uxtb	r2, r3
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	701a      	strb	r2, [r3, #0]
	append_position[1] = (uint8_t)(append_value >> 8 & 0xff);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	121a      	asrs	r2, r3, #8
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	3301      	adds	r3, #1
 800a702:	b2d2      	uxtb	r2, r2
 800a704:	701a      	strb	r2, [r3, #0]
	append_position[2] = (uint8_t)(append_value >> 16 & 0xff);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	141a      	asrs	r2, r3, #16
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	3302      	adds	r3, #2
 800a70e:	b2d2      	uxtb	r2, r2
 800a710:	701a      	strb	r2, [r3, #0]
	append_position[3] = (uint8_t)(append_value >> 24 & 0xff);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	161a      	asrs	r2, r3, #24
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	3303      	adds	r3, #3
 800a71a:	b2d2      	uxtb	r2, r2
 800a71c:	701a      	strb	r2, [r3, #0]
}
 800a71e:	bf00      	nop
 800a720:	370c      	adds	r7, #12
 800a722:	46bd      	mov	sp, r7
 800a724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a728:	4770      	bx	lr
 800a72a:	0000      	movs	r0, r0
 800a72c:	0000      	movs	r0, r0
	...

0800a730 <scaraKeyInit1>:
SCARA_StatusTypeDef  scaraKeyInit1(SCARA_KeyTypeDef key, int32_t speed)
{
 800a730:	b590      	push	{r4, r7, lr}
 800a732:	f5ad 7d63 	sub.w	sp, sp, #908	; 0x38c
 800a736:	af6c      	add	r7, sp, #432	; 0x1b0
 800a738:	4602      	mov	r2, r0
 800a73a:	463b      	mov	r3, r7
 800a73c:	6019      	str	r1, [r3, #0]
 800a73e:	1dfb      	adds	r3, r7, #7
 800a740:	701a      	strb	r2, [r3, #0]
	DUTY_Command_TypeDef cmd;
	SCARA_StatusTypeDef status;
	cmd.coordinate_type = DUTY_COORDINATES_REL;
 800a742:	f107 0308 	add.w	r3, r7, #8
 800a746:	2201      	movs	r2, #1
 800a748:	731a      	strb	r2, [r3, #12]
	cmd.trajec_type = DUTY_TRAJECTORY_LSPB;
 800a74a:	f107 0308 	add.w	r3, r7, #8
 800a74e:	2200      	movs	r2, #0
 800a750:	741a      	strb	r2, [r3, #16]
	cmd.modeInit_type = DUTY_MODE_INIT_QVT;
 800a752:	f107 0308 	add.w	r3, r7, #8
 800a756:	2201      	movs	r2, #1
 800a758:	745a      	strb	r2, [r3, #17]
	double v_current = 0;
 800a75a:	f04f 0200 	mov.w	r2, #0
 800a75e:	f04f 0300 	mov.w	r3, #0
 800a762:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
	Trajectory_LSPB_TypeDef *lspb;
	if(speed < SHIFT_SPEED_MIN || speed > SHIFT_SPEED_MAX){
 800a766:	463b      	mov	r3, r7
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	dd03      	ble.n	800a776 <scaraKeyInit1+0x46>
 800a76e:	463b      	mov	r3, r7
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	2b0e      	cmp	r3, #14
 800a774:	dd01      	ble.n	800a77a <scaraKeyInit1+0x4a>
		return SCARA_STATUS_ERROR_PARA;
 800a776:	2306      	movs	r3, #6
 800a778:	e2c0      	b.n	800acfc <scaraKeyInit1+0x5cc>
	}
	switch(key){
 800a77a:	1dfb      	adds	r3, r7, #7
 800a77c:	781b      	ldrb	r3, [r3, #0]
 800a77e:	2b07      	cmp	r3, #7
 800a780:	f200 8298 	bhi.w	800acb4 <scaraKeyInit1+0x584>
 800a784:	a201      	add	r2, pc, #4	; (adr r2, 800a78c <scaraKeyInit1+0x5c>)
 800a786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a78a:	bf00      	nop
 800a78c:	0800a7ad 	.word	0x0800a7ad
 800a790:	0800a84f 	.word	0x0800a84f
 800a794:	0800a8f5 	.word	0x0800a8f5
 800a798:	0800a993 	.word	0x0800a993
 800a79c:	0800aa35 	.word	0x0800aa35
 800a7a0:	0800aad3 	.word	0x0800aad3
 800a7a4:	0800ab75 	.word	0x0800ab75
 800a7a8:	0800ac13 	.word	0x0800ac13
		case SCARA_KEY_X_INC:{
			cmd.v_factor = 0;
 800a7ac:	f107 0108 	add.w	r1, r7, #8
 800a7b0:	f04f 0200 	mov.w	r2, #0
 800a7b4:	f04f 0300 	mov.w	r3, #0
 800a7b8:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800a7bc:	f107 0308 	add.w	r3, r7, #8
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800a7c4:	f107 0308 	add.w	r3, r7, #8
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= speed*SHIFT_KEY_S;
 800a7cc:	463b      	mov	r3, r7
 800a7ce:	681a      	ldr	r2, [r3, #0]
 800a7d0:	4613      	mov	r3, r2
 800a7d2:	009b      	lsls	r3, r3, #2
 800a7d4:	4413      	add	r3, r2
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f7f5 fea4 	bl	8000524 <__aeabi_i2d>
 800a7dc:	4602      	mov	r2, r0
 800a7de:	460b      	mov	r3, r1
 800a7e0:	f107 0108 	add.w	r1, r7, #8
 800a7e4:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800a7e8:	f107 0108 	add.w	r1, r7, #8
 800a7ec:	f04f 0200 	mov.w	r2, #0
 800a7f0:	f04f 0300 	mov.w	r3, #0
 800a7f4:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800a7f8:	f107 0108 	add.w	r1, r7, #8
 800a7fc:	f04f 0200 	mov.w	r2, #0
 800a800:	f04f 0300 	mov.w	r3, #0
 800a804:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800a808:	f107 0108 	add.w	r1, r7, #8
 800a80c:	f04f 0200 	mov.w	r2, #0
 800a810:	f04f 0300 	mov.w	r3, #0
 800a814:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800a818:	463b      	mov	r3, r7
 800a81a:	6818      	ldr	r0, [r3, #0]
 800a81c:	f7f5 fe82 	bl	8000524 <__aeabi_i2d>
 800a820:	f20f 43e4 	addw	r3, pc, #1252	; 0x4e4
 800a824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a828:	f7f5 fee6 	bl	80005f8 <__aeabi_dmul>
 800a82c:	4602      	mov	r2, r0
 800a82e:	460b      	mov	r3, r1
 800a830:	4610      	mov	r0, r2
 800a832:	4619      	mov	r1, r3
 800a834:	f20f 43d8 	addw	r3, pc, #1240	; 0x4d8
 800a838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a83c:	f7f5 fd26 	bl	800028c <__adddf3>
 800a840:	4602      	mov	r2, r0
 800a842:	460b      	mov	r3, r1
 800a844:	f107 0108 	add.w	r1, r7, #8
 800a848:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800a84c:	e232      	b.n	800acb4 <scaraKeyInit1+0x584>
		case SCARA_KEY_X_DEC:{
			cmd.v_factor = 0;
 800a84e:	f107 0108 	add.w	r1, r7, #8
 800a852:	f04f 0200 	mov.w	r2, #0
 800a856:	f04f 0300 	mov.w	r3, #0
 800a85a:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800a85e:	f107 0308 	add.w	r3, r7, #8
 800a862:	2200      	movs	r2, #0
 800a864:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800a866:	f107 0308 	add.w	r3, r7, #8
 800a86a:	2200      	movs	r2, #0
 800a86c:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= -speed*SHIFT_KEY_S;
 800a86e:	463b      	mov	r3, r7
 800a870:	681a      	ldr	r2, [r3, #0]
 800a872:	4613      	mov	r3, r2
 800a874:	079b      	lsls	r3, r3, #30
 800a876:	1a9b      	subs	r3, r3, r2
 800a878:	009b      	lsls	r3, r3, #2
 800a87a:	1a9b      	subs	r3, r3, r2
 800a87c:	4618      	mov	r0, r3
 800a87e:	f7f5 fe51 	bl	8000524 <__aeabi_i2d>
 800a882:	4602      	mov	r2, r0
 800a884:	460b      	mov	r3, r1
 800a886:	f107 0108 	add.w	r1, r7, #8
 800a88a:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800a88e:	f107 0108 	add.w	r1, r7, #8
 800a892:	f04f 0200 	mov.w	r2, #0
 800a896:	f04f 0300 	mov.w	r3, #0
 800a89a:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800a89e:	f107 0108 	add.w	r1, r7, #8
 800a8a2:	f04f 0200 	mov.w	r2, #0
 800a8a6:	f04f 0300 	mov.w	r3, #0
 800a8aa:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800a8ae:	f107 0108 	add.w	r1, r7, #8
 800a8b2:	f04f 0200 	mov.w	r2, #0
 800a8b6:	f04f 0300 	mov.w	r3, #0
 800a8ba:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800a8be:	463b      	mov	r3, r7
 800a8c0:	6818      	ldr	r0, [r3, #0]
 800a8c2:	f7f5 fe2f 	bl	8000524 <__aeabi_i2d>
 800a8c6:	f20f 4340 	addw	r3, pc, #1088	; 0x440
 800a8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ce:	f7f5 fe93 	bl	80005f8 <__aeabi_dmul>
 800a8d2:	4602      	mov	r2, r0
 800a8d4:	460b      	mov	r3, r1
 800a8d6:	4610      	mov	r0, r2
 800a8d8:	4619      	mov	r1, r3
 800a8da:	f20f 4334 	addw	r3, pc, #1076	; 0x434
 800a8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e2:	f7f5 fcd3 	bl	800028c <__adddf3>
 800a8e6:	4602      	mov	r2, r0
 800a8e8:	460b      	mov	r3, r1
 800a8ea:	f107 0108 	add.w	r1, r7, #8
 800a8ee:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800a8f2:	e1df      	b.n	800acb4 <scaraKeyInit1+0x584>
		case SCARA_KEY_Y_INC:{
			cmd.v_factor = 0;
 800a8f4:	f107 0108 	add.w	r1, r7, #8
 800a8f8:	f04f 0200 	mov.w	r2, #0
 800a8fc:	f04f 0300 	mov.w	r3, #0
 800a900:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800a904:	f107 0308 	add.w	r3, r7, #8
 800a908:	2200      	movs	r2, #0
 800a90a:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800a90c:	f107 0308 	add.w	r3, r7, #8
 800a910:	2200      	movs	r2, #0
 800a912:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800a914:	f107 0108 	add.w	r1, r7, #8
 800a918:	f04f 0200 	mov.w	r2, #0
 800a91c:	f04f 0300 	mov.w	r3, #0
 800a920:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= speed*SHIFT_KEY_S;
 800a924:	463b      	mov	r3, r7
 800a926:	681a      	ldr	r2, [r3, #0]
 800a928:	4613      	mov	r3, r2
 800a92a:	009b      	lsls	r3, r3, #2
 800a92c:	4413      	add	r3, r2
 800a92e:	4618      	mov	r0, r3
 800a930:	f7f5 fdf8 	bl	8000524 <__aeabi_i2d>
 800a934:	4602      	mov	r2, r0
 800a936:	460b      	mov	r3, r1
 800a938:	f107 0108 	add.w	r1, r7, #8
 800a93c:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800a940:	f107 0108 	add.w	r1, r7, #8
 800a944:	f04f 0200 	mov.w	r2, #0
 800a948:	f04f 0300 	mov.w	r3, #0
 800a94c:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800a950:	f107 0108 	add.w	r1, r7, #8
 800a954:	f04f 0200 	mov.w	r2, #0
 800a958:	f04f 0300 	mov.w	r3, #0
 800a95c:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800a960:	463b      	mov	r3, r7
 800a962:	6818      	ldr	r0, [r3, #0]
 800a964:	f7f5 fdde 	bl	8000524 <__aeabi_i2d>
 800a968:	a3e7      	add	r3, pc, #924	; (adr r3, 800ad08 <scaraKeyInit1+0x5d8>)
 800a96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a96e:	f7f5 fe43 	bl	80005f8 <__aeabi_dmul>
 800a972:	4602      	mov	r2, r0
 800a974:	460b      	mov	r3, r1
 800a976:	4610      	mov	r0, r2
 800a978:	4619      	mov	r1, r3
 800a97a:	a3e5      	add	r3, pc, #916	; (adr r3, 800ad10 <scaraKeyInit1+0x5e0>)
 800a97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a980:	f7f5 fc84 	bl	800028c <__adddf3>
 800a984:	4602      	mov	r2, r0
 800a986:	460b      	mov	r3, r1
 800a988:	f107 0108 	add.w	r1, r7, #8
 800a98c:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800a990:	e190      	b.n	800acb4 <scaraKeyInit1+0x584>

		case SCARA_KEY_Y_DEC:{
			cmd.v_factor = 0;
 800a992:	f107 0108 	add.w	r1, r7, #8
 800a996:	f04f 0200 	mov.w	r2, #0
 800a99a:	f04f 0300 	mov.w	r3, #0
 800a99e:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800a9a2:	f107 0308 	add.w	r3, r7, #8
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800a9aa:	f107 0308 	add.w	r3, r7, #8
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800a9b2:	f107 0108 	add.w	r1, r7, #8
 800a9b6:	f04f 0200 	mov.w	r2, #0
 800a9ba:	f04f 0300 	mov.w	r3, #0
 800a9be:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= -speed*SHIFT_KEY_S;
 800a9c2:	463b      	mov	r3, r7
 800a9c4:	681a      	ldr	r2, [r3, #0]
 800a9c6:	4613      	mov	r3, r2
 800a9c8:	079b      	lsls	r3, r3, #30
 800a9ca:	1a9b      	subs	r3, r3, r2
 800a9cc:	009b      	lsls	r3, r3, #2
 800a9ce:	1a9b      	subs	r3, r3, r2
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f7f5 fda7 	bl	8000524 <__aeabi_i2d>
 800a9d6:	4602      	mov	r2, r0
 800a9d8:	460b      	mov	r3, r1
 800a9da:	f107 0108 	add.w	r1, r7, #8
 800a9de:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800a9e2:	f107 0108 	add.w	r1, r7, #8
 800a9e6:	f04f 0200 	mov.w	r2, #0
 800a9ea:	f04f 0300 	mov.w	r3, #0
 800a9ee:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800a9f2:	f107 0108 	add.w	r1, r7, #8
 800a9f6:	f04f 0200 	mov.w	r2, #0
 800a9fa:	f04f 0300 	mov.w	r3, #0
 800a9fe:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800aa02:	463b      	mov	r3, r7
 800aa04:	6818      	ldr	r0, [r3, #0]
 800aa06:	f7f5 fd8d 	bl	8000524 <__aeabi_i2d>
 800aa0a:	a3bf      	add	r3, pc, #764	; (adr r3, 800ad08 <scaraKeyInit1+0x5d8>)
 800aa0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa10:	f7f5 fdf2 	bl	80005f8 <__aeabi_dmul>
 800aa14:	4602      	mov	r2, r0
 800aa16:	460b      	mov	r3, r1
 800aa18:	4610      	mov	r0, r2
 800aa1a:	4619      	mov	r1, r3
 800aa1c:	a3bc      	add	r3, pc, #752	; (adr r3, 800ad10 <scaraKeyInit1+0x5e0>)
 800aa1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa22:	f7f5 fc33 	bl	800028c <__adddf3>
 800aa26:	4602      	mov	r2, r0
 800aa28:	460b      	mov	r3, r1
 800aa2a:	f107 0108 	add.w	r1, r7, #8
 800aa2e:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800aa32:	e13f      	b.n	800acb4 <scaraKeyInit1+0x584>
		case SCARA_KEY_Z_INC:{
			cmd.v_factor = 0;
 800aa34:	f107 0108 	add.w	r1, r7, #8
 800aa38:	f04f 0200 	mov.w	r2, #0
 800aa3c:	f04f 0300 	mov.w	r3, #0
 800aa40:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800aa44:	f107 0308 	add.w	r3, r7, #8
 800aa48:	2200      	movs	r2, #0
 800aa4a:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800aa4c:	f107 0308 	add.w	r3, r7, #8
 800aa50:	2200      	movs	r2, #0
 800aa52:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800aa54:	f107 0108 	add.w	r1, r7, #8
 800aa58:	f04f 0200 	mov.w	r2, #0
 800aa5c:	f04f 0300 	mov.w	r3, #0
 800aa60:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800aa64:	f107 0108 	add.w	r1, r7, #8
 800aa68:	f04f 0200 	mov.w	r2, #0
 800aa6c:	f04f 0300 	mov.w	r3, #0
 800aa70:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= speed*SHIFT_KEY_S;
 800aa74:	463b      	mov	r3, r7
 800aa76:	681a      	ldr	r2, [r3, #0]
 800aa78:	4613      	mov	r3, r2
 800aa7a:	009b      	lsls	r3, r3, #2
 800aa7c:	4413      	add	r3, r2
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f7f5 fd50 	bl	8000524 <__aeabi_i2d>
 800aa84:	4602      	mov	r2, r0
 800aa86:	460b      	mov	r3, r1
 800aa88:	f107 0108 	add.w	r1, r7, #8
 800aa8c:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800aa90:	f107 0108 	add.w	r1, r7, #8
 800aa94:	f04f 0200 	mov.w	r2, #0
 800aa98:	f04f 0300 	mov.w	r3, #0
 800aa9c:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800aaa0:	463b      	mov	r3, r7
 800aaa2:	6818      	ldr	r0, [r3, #0]
 800aaa4:	f7f5 fd3e 	bl	8000524 <__aeabi_i2d>
 800aaa8:	a397      	add	r3, pc, #604	; (adr r3, 800ad08 <scaraKeyInit1+0x5d8>)
 800aaaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaae:	f7f5 fda3 	bl	80005f8 <__aeabi_dmul>
 800aab2:	4602      	mov	r2, r0
 800aab4:	460b      	mov	r3, r1
 800aab6:	4610      	mov	r0, r2
 800aab8:	4619      	mov	r1, r3
 800aaba:	a395      	add	r3, pc, #596	; (adr r3, 800ad10 <scaraKeyInit1+0x5e0>)
 800aabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac0:	f7f5 fbe4 	bl	800028c <__adddf3>
 800aac4:	4602      	mov	r2, r0
 800aac6:	460b      	mov	r3, r1
 800aac8:	f107 0108 	add.w	r1, r7, #8
 800aacc:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800aad0:	e0f0      	b.n	800acb4 <scaraKeyInit1+0x584>
		case SCARA_KEY_Z_DEC:{
			cmd.v_factor = 0;
 800aad2:	f107 0108 	add.w	r1, r7, #8
 800aad6:	f04f 0200 	mov.w	r2, #0
 800aada:	f04f 0300 	mov.w	r3, #0
 800aade:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800aae2:	f107 0308 	add.w	r3, r7, #8
 800aae6:	2200      	movs	r2, #0
 800aae8:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800aaea:	f107 0308 	add.w	r3, r7, #8
 800aaee:	2200      	movs	r2, #0
 800aaf0:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800aaf2:	f107 0108 	add.w	r1, r7, #8
 800aaf6:	f04f 0200 	mov.w	r2, #0
 800aafa:	f04f 0300 	mov.w	r3, #0
 800aafe:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800ab02:	f107 0108 	add.w	r1, r7, #8
 800ab06:	f04f 0200 	mov.w	r2, #0
 800ab0a:	f04f 0300 	mov.w	r3, #0
 800ab0e:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= -speed*SHIFT_KEY_S;
 800ab12:	463b      	mov	r3, r7
 800ab14:	681a      	ldr	r2, [r3, #0]
 800ab16:	4613      	mov	r3, r2
 800ab18:	079b      	lsls	r3, r3, #30
 800ab1a:	1a9b      	subs	r3, r3, r2
 800ab1c:	009b      	lsls	r3, r3, #2
 800ab1e:	1a9b      	subs	r3, r3, r2
 800ab20:	4618      	mov	r0, r3
 800ab22:	f7f5 fcff 	bl	8000524 <__aeabi_i2d>
 800ab26:	4602      	mov	r2, r0
 800ab28:	460b      	mov	r3, r1
 800ab2a:	f107 0108 	add.w	r1, r7, #8
 800ab2e:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800ab32:	f107 0108 	add.w	r1, r7, #8
 800ab36:	f04f 0200 	mov.w	r2, #0
 800ab3a:	f04f 0300 	mov.w	r3, #0
 800ab3e:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800ab42:	463b      	mov	r3, r7
 800ab44:	6818      	ldr	r0, [r3, #0]
 800ab46:	f7f5 fced 	bl	8000524 <__aeabi_i2d>
 800ab4a:	a36f      	add	r3, pc, #444	; (adr r3, 800ad08 <scaraKeyInit1+0x5d8>)
 800ab4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab50:	f7f5 fd52 	bl	80005f8 <__aeabi_dmul>
 800ab54:	4602      	mov	r2, r0
 800ab56:	460b      	mov	r3, r1
 800ab58:	4610      	mov	r0, r2
 800ab5a:	4619      	mov	r1, r3
 800ab5c:	a36c      	add	r3, pc, #432	; (adr r3, 800ad10 <scaraKeyInit1+0x5e0>)
 800ab5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab62:	f7f5 fb93 	bl	800028c <__adddf3>
 800ab66:	4602      	mov	r2, r0
 800ab68:	460b      	mov	r3, r1
 800ab6a:	f107 0108 	add.w	r1, r7, #8
 800ab6e:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800ab72:	e09f      	b.n	800acb4 <scaraKeyInit1+0x584>
		case SCARA_KEY_ROLL_INC:{
			cmd.v_factor = 0;
 800ab74:	f107 0108 	add.w	r1, r7, #8
 800ab78:	f04f 0200 	mov.w	r2, #0
 800ab7c:	f04f 0300 	mov.w	r3, #0
 800ab80:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800ab84:	f107 0308 	add.w	r3, r7, #8
 800ab88:	2200      	movs	r2, #0
 800ab8a:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800ab8c:	f107 0308 	add.w	r3, r7, #8
 800ab90:	2200      	movs	r2, #0
 800ab92:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800ab94:	f107 0108 	add.w	r1, r7, #8
 800ab98:	f04f 0200 	mov.w	r2, #0
 800ab9c:	f04f 0300 	mov.w	r3, #0
 800aba0:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800aba4:	f107 0108 	add.w	r1, r7, #8
 800aba8:	f04f 0200 	mov.w	r2, #0
 800abac:	f04f 0300 	mov.w	r3, #0
 800abb0:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800abb4:	f107 0108 	add.w	r1, r7, #8
 800abb8:	f04f 0200 	mov.w	r2, #0
 800abbc:	f04f 0300 	mov.w	r3, #0
 800abc0:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= speed*SHIFT_KEY_S;
 800abc4:	463b      	mov	r3, r7
 800abc6:	681a      	ldr	r2, [r3, #0]
 800abc8:	4613      	mov	r3, r2
 800abca:	009b      	lsls	r3, r3, #2
 800abcc:	4413      	add	r3, r2
 800abce:	4618      	mov	r0, r3
 800abd0:	f7f5 fca8 	bl	8000524 <__aeabi_i2d>
 800abd4:	4602      	mov	r2, r0
 800abd6:	460b      	mov	r3, r1
 800abd8:	f107 0108 	add.w	r1, r7, #8
 800abdc:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800abe0:	463b      	mov	r3, r7
 800abe2:	6818      	ldr	r0, [r3, #0]
 800abe4:	f7f5 fc9e 	bl	8000524 <__aeabi_i2d>
 800abe8:	a347      	add	r3, pc, #284	; (adr r3, 800ad08 <scaraKeyInit1+0x5d8>)
 800abea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abee:	f7f5 fd03 	bl	80005f8 <__aeabi_dmul>
 800abf2:	4602      	mov	r2, r0
 800abf4:	460b      	mov	r3, r1
 800abf6:	4610      	mov	r0, r2
 800abf8:	4619      	mov	r1, r3
 800abfa:	a345      	add	r3, pc, #276	; (adr r3, 800ad10 <scaraKeyInit1+0x5e0>)
 800abfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac00:	f7f5 fb44 	bl	800028c <__adddf3>
 800ac04:	4602      	mov	r2, r0
 800ac06:	460b      	mov	r3, r1
 800ac08:	f107 0108 	add.w	r1, r7, #8
 800ac0c:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800ac10:	e050      	b.n	800acb4 <scaraKeyInit1+0x584>
		case SCARA_KEY_ROLL_DEC:{
			cmd.v_factor = 0;
 800ac12:	f107 0108 	add.w	r1, r7, #8
 800ac16:	f04f 0200 	mov.w	r2, #0
 800ac1a:	f04f 0300 	mov.w	r3, #0
 800ac1e:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800ac22:	f107 0308 	add.w	r3, r7, #8
 800ac26:	2200      	movs	r2, #0
 800ac28:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800ac2a:	f107 0308 	add.w	r3, r7, #8
 800ac2e:	2200      	movs	r2, #0
 800ac30:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800ac32:	f107 0108 	add.w	r1, r7, #8
 800ac36:	f04f 0200 	mov.w	r2, #0
 800ac3a:	f04f 0300 	mov.w	r3, #0
 800ac3e:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800ac42:	f107 0108 	add.w	r1, r7, #8
 800ac46:	f04f 0200 	mov.w	r2, #0
 800ac4a:	f04f 0300 	mov.w	r3, #0
 800ac4e:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800ac52:	f107 0108 	add.w	r1, r7, #8
 800ac56:	f04f 0200 	mov.w	r2, #0
 800ac5a:	f04f 0300 	mov.w	r3, #0
 800ac5e:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= -speed*SHIFT_KEY_S;
 800ac62:	463b      	mov	r3, r7
 800ac64:	681a      	ldr	r2, [r3, #0]
 800ac66:	4613      	mov	r3, r2
 800ac68:	079b      	lsls	r3, r3, #30
 800ac6a:	1a9b      	subs	r3, r3, r2
 800ac6c:	009b      	lsls	r3, r3, #2
 800ac6e:	1a9b      	subs	r3, r3, r2
 800ac70:	4618      	mov	r0, r3
 800ac72:	f7f5 fc57 	bl	8000524 <__aeabi_i2d>
 800ac76:	4602      	mov	r2, r0
 800ac78:	460b      	mov	r3, r1
 800ac7a:	f107 0108 	add.w	r1, r7, #8
 800ac7e:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800ac82:	463b      	mov	r3, r7
 800ac84:	6818      	ldr	r0, [r3, #0]
 800ac86:	f7f5 fc4d 	bl	8000524 <__aeabi_i2d>
 800ac8a:	a31f      	add	r3, pc, #124	; (adr r3, 800ad08 <scaraKeyInit1+0x5d8>)
 800ac8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac90:	f7f5 fcb2 	bl	80005f8 <__aeabi_dmul>
 800ac94:	4602      	mov	r2, r0
 800ac96:	460b      	mov	r3, r1
 800ac98:	4610      	mov	r0, r2
 800ac9a:	4619      	mov	r1, r3
 800ac9c:	a31c      	add	r3, pc, #112	; (adr r3, 800ad10 <scaraKeyInit1+0x5e0>)
 800ac9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca2:	f7f5 faf3 	bl	800028c <__adddf3>
 800aca6:	4602      	mov	r2, r0
 800aca8:	460b      	mov	r3, r1
 800acaa:	f107 0108 	add.w	r1, r7, #8
 800acae:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800acb2:	bf00      	nop
	}

	status = scaraInitDuty(cmd);
 800acb4:	f107 0408 	add.w	r4, r7, #8
 800acb8:	4668      	mov	r0, sp
 800acba:	f104 0310 	add.w	r3, r4, #16
 800acbe:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 800acc2:	4619      	mov	r1, r3
 800acc4:	f00b f824 	bl	8015d10 <memcpy>
 800acc8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800accc:	f7fa faf8 	bl	80052c0 <scaraInitDuty>
 800acd0:	4603      	mov	r3, r0
 800acd2:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
	if (status == SCARA_STATUS_OK) {
 800acd6:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d10b      	bne.n	800acf6 <scaraKeyInit1+0x5c6>
		status = scaraTestDuty();
 800acde:	f7ff fb03 	bl	800a2e8 <scaraTestDuty>
 800ace2:	4603      	mov	r3, r0
 800ace4:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
		if (status != SCARA_STATUS_OK) {
 800ace8:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800acec:	2b00      	cmp	r3, #0
 800acee:	d005      	beq.n	800acfc <scaraKeyInit1+0x5cc>
			return status;
 800acf0:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800acf4:	e002      	b.n	800acfc <scaraKeyInit1+0x5cc>
		// tinh lai run time so vs v hien tai
//		*(runtime) = (v_current - lspb->v0)/(lspb->a_design);
//		scaraFlowDuty(*runtime, &positionKeyInit, positionCurrent);
//		return status;
	} else {
		return status;
 800acf6:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800acfa:	e7ff      	b.n	800acfc <scaraKeyInit1+0x5cc>
	}
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	f507 77ee 	add.w	r7, r7, #476	; 0x1dc
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd90      	pop	{r4, r7, pc}
 800ad06:	bf00      	nop
 800ad08:	9999999a 	.word	0x9999999a
 800ad0c:	3fa99999 	.word	0x3fa99999
 800ad10:	9999999a 	.word	0x9999999a
 800ad14:	3fe99999 	.word	0x3fe99999

0800ad18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b082      	sub	sp, #8
 800ad1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ad1e:	2300      	movs	r3, #0
 800ad20:	607b      	str	r3, [r7, #4]
 800ad22:	4b12      	ldr	r3, [pc, #72]	; (800ad6c <HAL_MspInit+0x54>)
 800ad24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad26:	4a11      	ldr	r2, [pc, #68]	; (800ad6c <HAL_MspInit+0x54>)
 800ad28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ad2c:	6453      	str	r3, [r2, #68]	; 0x44
 800ad2e:	4b0f      	ldr	r3, [pc, #60]	; (800ad6c <HAL_MspInit+0x54>)
 800ad30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad36:	607b      	str	r3, [r7, #4]
 800ad38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	603b      	str	r3, [r7, #0]
 800ad3e:	4b0b      	ldr	r3, [pc, #44]	; (800ad6c <HAL_MspInit+0x54>)
 800ad40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad42:	4a0a      	ldr	r2, [pc, #40]	; (800ad6c <HAL_MspInit+0x54>)
 800ad44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad48:	6413      	str	r3, [r2, #64]	; 0x40
 800ad4a:	4b08      	ldr	r3, [pc, #32]	; (800ad6c <HAL_MspInit+0x54>)
 800ad4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ad52:	603b      	str	r3, [r7, #0]
 800ad54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800ad56:	2200      	movs	r2, #0
 800ad58:	210f      	movs	r1, #15
 800ad5a:	f06f 0001 	mvn.w	r0, #1
 800ad5e:	f000 fc79 	bl	800b654 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ad62:	bf00      	nop
 800ad64:	3708      	adds	r7, #8
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}
 800ad6a:	bf00      	nop
 800ad6c:	40023800 	.word	0x40023800

0800ad70 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b08c      	sub	sp, #48	; 0x30
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800ad78:	2300      	movs	r3, #0
 800ad7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800ad80:	2200      	movs	r2, #0
 800ad82:	6879      	ldr	r1, [r7, #4]
 800ad84:	2036      	movs	r0, #54	; 0x36
 800ad86:	f000 fc65 	bl	800b654 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800ad8a:	2036      	movs	r0, #54	; 0x36
 800ad8c:	f000 fc7e 	bl	800b68c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800ad90:	2300      	movs	r3, #0
 800ad92:	60fb      	str	r3, [r7, #12]
 800ad94:	4b1f      	ldr	r3, [pc, #124]	; (800ae14 <HAL_InitTick+0xa4>)
 800ad96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad98:	4a1e      	ldr	r2, [pc, #120]	; (800ae14 <HAL_InitTick+0xa4>)
 800ad9a:	f043 0310 	orr.w	r3, r3, #16
 800ad9e:	6413      	str	r3, [r2, #64]	; 0x40
 800ada0:	4b1c      	ldr	r3, [pc, #112]	; (800ae14 <HAL_InitTick+0xa4>)
 800ada2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ada4:	f003 0310 	and.w	r3, r3, #16
 800ada8:	60fb      	str	r3, [r7, #12]
 800adaa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800adac:	f107 0210 	add.w	r2, r7, #16
 800adb0:	f107 0314 	add.w	r3, r7, #20
 800adb4:	4611      	mov	r1, r2
 800adb6:	4618      	mov	r0, r3
 800adb8:	f003 f812 	bl	800dde0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800adbc:	f002 ffe8 	bl	800dd90 <HAL_RCC_GetPCLK1Freq>
 800adc0:	4603      	mov	r3, r0
 800adc2:	005b      	lsls	r3, r3, #1
 800adc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800adc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adc8:	4a13      	ldr	r2, [pc, #76]	; (800ae18 <HAL_InitTick+0xa8>)
 800adca:	fba2 2303 	umull	r2, r3, r2, r3
 800adce:	0c9b      	lsrs	r3, r3, #18
 800add0:	3b01      	subs	r3, #1
 800add2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800add4:	4b11      	ldr	r3, [pc, #68]	; (800ae1c <HAL_InitTick+0xac>)
 800add6:	4a12      	ldr	r2, [pc, #72]	; (800ae20 <HAL_InitTick+0xb0>)
 800add8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800adda:	4b10      	ldr	r3, [pc, #64]	; (800ae1c <HAL_InitTick+0xac>)
 800addc:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ade0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800ade2:	4a0e      	ldr	r2, [pc, #56]	; (800ae1c <HAL_InitTick+0xac>)
 800ade4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ade6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800ade8:	4b0c      	ldr	r3, [pc, #48]	; (800ae1c <HAL_InitTick+0xac>)
 800adea:	2200      	movs	r2, #0
 800adec:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800adee:	4b0b      	ldr	r3, [pc, #44]	; (800ae1c <HAL_InitTick+0xac>)
 800adf0:	2200      	movs	r2, #0
 800adf2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800adf4:	4809      	ldr	r0, [pc, #36]	; (800ae1c <HAL_InitTick+0xac>)
 800adf6:	f003 f825 	bl	800de44 <HAL_TIM_Base_Init>
 800adfa:	4603      	mov	r3, r0
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d104      	bne.n	800ae0a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800ae00:	4806      	ldr	r0, [pc, #24]	; (800ae1c <HAL_InitTick+0xac>)
 800ae02:	f003 f84a 	bl	800de9a <HAL_TIM_Base_Start_IT>
 800ae06:	4603      	mov	r3, r0
 800ae08:	e000      	b.n	800ae0c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800ae0a:	2301      	movs	r3, #1
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	3730      	adds	r7, #48	; 0x30
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}
 800ae14:	40023800 	.word	0x40023800
 800ae18:	431bde83 	.word	0x431bde83
 800ae1c:	20005d30 	.word	0x20005d30
 800ae20:	40001000 	.word	0x40001000

0800ae24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ae24:	b480      	push	{r7}
 800ae26:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800ae28:	bf00      	nop
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae30:	4770      	bx	lr
	...

0800ae34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  LOG_REPORT("ic.c: HARDFAULT ERROR", __LINE__);
 800ae38:	2162      	movs	r1, #98	; 0x62
 800ae3a:	4802      	ldr	r0, [pc, #8]	; (800ae44 <HardFault_Handler+0x10>)
 800ae3c:	f7f6 fe24 	bl	8001a88 <LOG_REPORT>
 800ae40:	e7fa      	b.n	800ae38 <HardFault_Handler+0x4>
 800ae42:	bf00      	nop
 800ae44:	0801c1f0 	.word	0x0801c1f0

0800ae48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  LOG_REPORT("ic.c: MEMORY ERROR", __LINE__);
 800ae4c:	2172      	movs	r1, #114	; 0x72
 800ae4e:	4802      	ldr	r0, [pc, #8]	; (800ae58 <MemManage_Handler+0x10>)
 800ae50:	f7f6 fe1a 	bl	8001a88 <LOG_REPORT>
 800ae54:	e7fa      	b.n	800ae4c <MemManage_Handler+0x4>
 800ae56:	bf00      	nop
 800ae58:	0801c208 	.word	0x0801c208

0800ae5c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  LOG_REPORT("ic.c: BUS ERROR", __LINE__);
 800ae60:	2182      	movs	r1, #130	; 0x82
 800ae62:	4802      	ldr	r0, [pc, #8]	; (800ae6c <BusFault_Handler+0x10>)
 800ae64:	f7f6 fe10 	bl	8001a88 <LOG_REPORT>
 800ae68:	e7fa      	b.n	800ae60 <BusFault_Handler+0x4>
 800ae6a:	bf00      	nop
 800ae6c:	0801c21c 	.word	0x0801c21c

0800ae70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ae70:	b480      	push	{r7}
 800ae72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ae74:	e7fe      	b.n	800ae74 <UsageFault_Handler+0x4>

0800ae76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ae76:	b480      	push	{r7}
 800ae78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ae7a:	bf00      	nop
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae82:	4770      	bx	lr

0800ae84 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800ae88:	4802      	ldr	r0, [pc, #8]	; (800ae94 <DMA1_Stream4_IRQHandler+0x10>)
 800ae8a:	f000 fd35 	bl	800b8f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800ae8e:	bf00      	nop
 800ae90:	bd80      	pop	{r7, pc}
 800ae92:	bf00      	nop
 800ae94:	20005e30 	.word	0x20005e30

0800ae98 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800ae9c:	4802      	ldr	r0, [pc, #8]	; (800aea8 <UART4_IRQHandler+0x10>)
 800ae9e:	f003 fc99 	bl	800e7d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800aea2:	bf00      	nop
 800aea4:	bd80      	pop	{r7, pc}
 800aea6:	bf00      	nop
 800aea8:	20005df0 	.word	0x20005df0

0800aeac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800aeb0:	4802      	ldr	r0, [pc, #8]	; (800aebc <TIM6_DAC_IRQHandler+0x10>)
 800aeb2:	f003 f816 	bl	800dee2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800aeb6:	bf00      	nop
 800aeb8:	bd80      	pop	{r7, pc}
 800aeba:	bf00      	nop
 800aebc:	20005d30 	.word	0x20005d30

0800aec0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	osSignalSet(defaultTaskHandle, 0x01);
 800aec4:	4b05      	ldr	r3, [pc, #20]	; (800aedc <TIM7_IRQHandler+0x1c>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	2101      	movs	r1, #1
 800aeca:	4618      	mov	r0, r3
 800aecc:	f007 fb96 	bl	80125fc <osSignalSet>
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800aed0:	4803      	ldr	r0, [pc, #12]	; (800aee0 <TIM7_IRQHandler+0x20>)
 800aed2:	f003 f806 	bl	800dee2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  /* USER CODE END TIM7_IRQn 1 */
}
 800aed6:	bf00      	nop
 800aed8:	bd80      	pop	{r7, pc}
 800aeda:	bf00      	nop
 800aedc:	20004e6c 	.word	0x20004e6c
 800aee0:	20005db0 	.word	0x20005db0

0800aee4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800aee8:	4802      	ldr	r0, [pc, #8]	; (800aef4 <OTG_FS_IRQHandler+0x10>)
 800aeea:	f001 fad9 	bl	800c4a0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800aeee:	bf00      	nop
 800aef0:	bd80      	pop	{r7, pc}
 800aef2:	bf00      	nop
 800aef4:	2000676c 	.word	0x2000676c

0800aef8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800aef8:	b480      	push	{r7}
 800aefa:	af00      	add	r7, sp, #0
	return 1;
 800aefc:	2301      	movs	r3, #1
}
 800aefe:	4618      	mov	r0, r3
 800af00:	46bd      	mov	sp, r7
 800af02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af06:	4770      	bx	lr

0800af08 <_kill>:

int _kill(int pid, int sig)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b082      	sub	sp, #8
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800af12:	f00a fec3 	bl	8015c9c <__errno>
 800af16:	4603      	mov	r3, r0
 800af18:	2216      	movs	r2, #22
 800af1a:	601a      	str	r2, [r3, #0]
	return -1;
 800af1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800af20:	4618      	mov	r0, r3
 800af22:	3708      	adds	r7, #8
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}

0800af28 <_exit>:

void _exit (int status)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b082      	sub	sp, #8
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800af30:	f04f 31ff 	mov.w	r1, #4294967295
 800af34:	6878      	ldr	r0, [r7, #4]
 800af36:	f7ff ffe7 	bl	800af08 <_kill>
	while (1) {}		/* Make sure we hang here */
 800af3a:	e7fe      	b.n	800af3a <_exit+0x12>

0800af3c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b086      	sub	sp, #24
 800af40:	af00      	add	r7, sp, #0
 800af42:	60f8      	str	r0, [r7, #12]
 800af44:	60b9      	str	r1, [r7, #8]
 800af46:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800af48:	2300      	movs	r3, #0
 800af4a:	617b      	str	r3, [r7, #20]
 800af4c:	e00a      	b.n	800af64 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800af4e:	f3af 8000 	nop.w
 800af52:	4601      	mov	r1, r0
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	1c5a      	adds	r2, r3, #1
 800af58:	60ba      	str	r2, [r7, #8]
 800af5a:	b2ca      	uxtb	r2, r1
 800af5c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	3301      	adds	r3, #1
 800af62:	617b      	str	r3, [r7, #20]
 800af64:	697a      	ldr	r2, [r7, #20]
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	429a      	cmp	r2, r3
 800af6a:	dbf0      	blt.n	800af4e <_read+0x12>
	}

return len;
 800af6c:	687b      	ldr	r3, [r7, #4]
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3718      	adds	r7, #24
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}

0800af76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800af76:	b580      	push	{r7, lr}
 800af78:	b086      	sub	sp, #24
 800af7a:	af00      	add	r7, sp, #0
 800af7c:	60f8      	str	r0, [r7, #12]
 800af7e:	60b9      	str	r1, [r7, #8]
 800af80:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800af82:	2300      	movs	r3, #0
 800af84:	617b      	str	r3, [r7, #20]
 800af86:	e009      	b.n	800af9c <_write+0x26>
	{
		__io_putchar(*ptr++);
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	1c5a      	adds	r2, r3, #1
 800af8c:	60ba      	str	r2, [r7, #8]
 800af8e:	781b      	ldrb	r3, [r3, #0]
 800af90:	4618      	mov	r0, r3
 800af92:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800af96:	697b      	ldr	r3, [r7, #20]
 800af98:	3301      	adds	r3, #1
 800af9a:	617b      	str	r3, [r7, #20]
 800af9c:	697a      	ldr	r2, [r7, #20]
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	429a      	cmp	r2, r3
 800afa2:	dbf1      	blt.n	800af88 <_write+0x12>
	}
	return len;
 800afa4:	687b      	ldr	r3, [r7, #4]
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	3718      	adds	r7, #24
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}

0800afae <_close>:

int _close(int file)
{
 800afae:	b480      	push	{r7}
 800afb0:	b083      	sub	sp, #12
 800afb2:	af00      	add	r7, sp, #0
 800afb4:	6078      	str	r0, [r7, #4]
	return -1;
 800afb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800afba:	4618      	mov	r0, r3
 800afbc:	370c      	adds	r7, #12
 800afbe:	46bd      	mov	sp, r7
 800afc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc4:	4770      	bx	lr

0800afc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800afc6:	b480      	push	{r7}
 800afc8:	b083      	sub	sp, #12
 800afca:	af00      	add	r7, sp, #0
 800afcc:	6078      	str	r0, [r7, #4]
 800afce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800afd6:	605a      	str	r2, [r3, #4]
	return 0;
 800afd8:	2300      	movs	r3, #0
}
 800afda:	4618      	mov	r0, r3
 800afdc:	370c      	adds	r7, #12
 800afde:	46bd      	mov	sp, r7
 800afe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe4:	4770      	bx	lr

0800afe6 <_isatty>:

int _isatty(int file)
{
 800afe6:	b480      	push	{r7}
 800afe8:	b083      	sub	sp, #12
 800afea:	af00      	add	r7, sp, #0
 800afec:	6078      	str	r0, [r7, #4]
	return 1;
 800afee:	2301      	movs	r3, #1
}
 800aff0:	4618      	mov	r0, r3
 800aff2:	370c      	adds	r7, #12
 800aff4:	46bd      	mov	sp, r7
 800aff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affa:	4770      	bx	lr

0800affc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800affc:	b480      	push	{r7}
 800affe:	b085      	sub	sp, #20
 800b000:	af00      	add	r7, sp, #0
 800b002:	60f8      	str	r0, [r7, #12]
 800b004:	60b9      	str	r1, [r7, #8]
 800b006:	607a      	str	r2, [r7, #4]
	return 0;
 800b008:	2300      	movs	r3, #0
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	3714      	adds	r7, #20
 800b00e:	46bd      	mov	sp, r7
 800b010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b014:	4770      	bx	lr
	...

0800b018 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b084      	sub	sp, #16
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800b020:	4b11      	ldr	r3, [pc, #68]	; (800b068 <_sbrk+0x50>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d102      	bne.n	800b02e <_sbrk+0x16>
		heap_end = &end;
 800b028:	4b0f      	ldr	r3, [pc, #60]	; (800b068 <_sbrk+0x50>)
 800b02a:	4a10      	ldr	r2, [pc, #64]	; (800b06c <_sbrk+0x54>)
 800b02c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800b02e:	4b0e      	ldr	r3, [pc, #56]	; (800b068 <_sbrk+0x50>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800b034:	4b0c      	ldr	r3, [pc, #48]	; (800b068 <_sbrk+0x50>)
 800b036:	681a      	ldr	r2, [r3, #0]
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	4413      	add	r3, r2
 800b03c:	466a      	mov	r2, sp
 800b03e:	4293      	cmp	r3, r2
 800b040:	d907      	bls.n	800b052 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800b042:	f00a fe2b 	bl	8015c9c <__errno>
 800b046:	4603      	mov	r3, r0
 800b048:	220c      	movs	r2, #12
 800b04a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800b04c:	f04f 33ff 	mov.w	r3, #4294967295
 800b050:	e006      	b.n	800b060 <_sbrk+0x48>
	}

	heap_end += incr;
 800b052:	4b05      	ldr	r3, [pc, #20]	; (800b068 <_sbrk+0x50>)
 800b054:	681a      	ldr	r2, [r3, #0]
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	4413      	add	r3, r2
 800b05a:	4a03      	ldr	r2, [pc, #12]	; (800b068 <_sbrk+0x50>)
 800b05c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800b05e:	68fb      	ldr	r3, [r7, #12]
}
 800b060:	4618      	mov	r0, r3
 800b062:	3710      	adds	r7, #16
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}
 800b068:	20001008 	.word	0x20001008
 800b06c:	20006b88 	.word	0x20006b88

0800b070 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b070:	b480      	push	{r7}
 800b072:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b074:	4b08      	ldr	r3, [pc, #32]	; (800b098 <SystemInit+0x28>)
 800b076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b07a:	4a07      	ldr	r2, [pc, #28]	; (800b098 <SystemInit+0x28>)
 800b07c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b080:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b084:	4b04      	ldr	r3, [pc, #16]	; (800b098 <SystemInit+0x28>)
 800b086:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b08a:	609a      	str	r2, [r3, #8]
#endif
}
 800b08c:	bf00      	nop
 800b08e:	46bd      	mov	sp, r7
 800b090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b094:	4770      	bx	lr
 800b096:	bf00      	nop
 800b098:	e000ed00 	.word	0xe000ed00

0800b09c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b086      	sub	sp, #24
 800b0a0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b0a2:	f107 0308 	add.w	r3, r7, #8
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	601a      	str	r2, [r3, #0]
 800b0aa:	605a      	str	r2, [r3, #4]
 800b0ac:	609a      	str	r2, [r3, #8]
 800b0ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b0b0:	463b      	mov	r3, r7
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	601a      	str	r2, [r3, #0]
 800b0b6:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800b0b8:	4b1e      	ldr	r3, [pc, #120]	; (800b134 <MX_TIM2_Init+0x98>)
 800b0ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b0be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 25000;
 800b0c0:	4b1c      	ldr	r3, [pc, #112]	; (800b134 <MX_TIM2_Init+0x98>)
 800b0c2:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800b0c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b0c8:	4b1a      	ldr	r3, [pc, #104]	; (800b134 <MX_TIM2_Init+0x98>)
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff;
 800b0ce:	4b19      	ldr	r3, [pc, #100]	; (800b134 <MX_TIM2_Init+0x98>)
 800b0d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b0d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b0d6:	4b17      	ldr	r3, [pc, #92]	; (800b134 <MX_TIM2_Init+0x98>)
 800b0d8:	2200      	movs	r2, #0
 800b0da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b0dc:	4b15      	ldr	r3, [pc, #84]	; (800b134 <MX_TIM2_Init+0x98>)
 800b0de:	2200      	movs	r2, #0
 800b0e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800b0e2:	4814      	ldr	r0, [pc, #80]	; (800b134 <MX_TIM2_Init+0x98>)
 800b0e4:	f002 feae 	bl	800de44 <HAL_TIM_Base_Init>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d001      	beq.n	800b0f2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800b0ee:	f7f8 ff69 	bl	8003fc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b0f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b0f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800b0f8:	f107 0308 	add.w	r3, r7, #8
 800b0fc:	4619      	mov	r1, r3
 800b0fe:	480d      	ldr	r0, [pc, #52]	; (800b134 <MX_TIM2_Init+0x98>)
 800b100:	f002 fff7 	bl	800e0f2 <HAL_TIM_ConfigClockSource>
 800b104:	4603      	mov	r3, r0
 800b106:	2b00      	cmp	r3, #0
 800b108:	d001      	beq.n	800b10e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800b10a:	f7f8 ff5b 	bl	8003fc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b10e:	2300      	movs	r3, #0
 800b110:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b112:	2300      	movs	r3, #0
 800b114:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800b116:	463b      	mov	r3, r7
 800b118:	4619      	mov	r1, r3
 800b11a:	4806      	ldr	r0, [pc, #24]	; (800b134 <MX_TIM2_Init+0x98>)
 800b11c:	f003 fa10 	bl	800e540 <HAL_TIMEx_MasterConfigSynchronization>
 800b120:	4603      	mov	r3, r0
 800b122:	2b00      	cmp	r3, #0
 800b124:	d001      	beq.n	800b12a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800b126:	f7f8 ff4d 	bl	8003fc4 <Error_Handler>
  }

}
 800b12a:	bf00      	nop
 800b12c:	3718      	adds	r7, #24
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd80      	pop	{r7, pc}
 800b132:	bf00      	nop
 800b134:	20005d70 	.word	0x20005d70

0800b138 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b082      	sub	sp, #8
 800b13c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b13e:	463b      	mov	r3, r7
 800b140:	2200      	movs	r2, #0
 800b142:	601a      	str	r2, [r3, #0]
 800b144:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 800b146:	4b15      	ldr	r3, [pc, #84]	; (800b19c <MX_TIM7_Init+0x64>)
 800b148:	4a15      	ldr	r2, [pc, #84]	; (800b1a0 <MX_TIM7_Init+0x68>)
 800b14a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 800b14c:	4b13      	ldr	r3, [pc, #76]	; (800b19c <MX_TIM7_Init+0x64>)
 800b14e:	2253      	movs	r2, #83	; 0x53
 800b150:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b152:	4b12      	ldr	r3, [pc, #72]	; (800b19c <MX_TIM7_Init+0x64>)
 800b154:	2200      	movs	r2, #0
 800b156:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 800b158:	4b10      	ldr	r3, [pc, #64]	; (800b19c <MX_TIM7_Init+0x64>)
 800b15a:	f242 720f 	movw	r2, #9999	; 0x270f
 800b15e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b160:	4b0e      	ldr	r3, [pc, #56]	; (800b19c <MX_TIM7_Init+0x64>)
 800b162:	2200      	movs	r2, #0
 800b164:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800b166:	480d      	ldr	r0, [pc, #52]	; (800b19c <MX_TIM7_Init+0x64>)
 800b168:	f002 fe6c 	bl	800de44 <HAL_TIM_Base_Init>
 800b16c:	4603      	mov	r3, r0
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d001      	beq.n	800b176 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800b172:	f7f8 ff27 	bl	8003fc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b176:	2300      	movs	r3, #0
 800b178:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b17a:	2300      	movs	r3, #0
 800b17c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800b17e:	463b      	mov	r3, r7
 800b180:	4619      	mov	r1, r3
 800b182:	4806      	ldr	r0, [pc, #24]	; (800b19c <MX_TIM7_Init+0x64>)
 800b184:	f003 f9dc 	bl	800e540 <HAL_TIMEx_MasterConfigSynchronization>
 800b188:	4603      	mov	r3, r0
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d001      	beq.n	800b192 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800b18e:	f7f8 ff19 	bl	8003fc4 <Error_Handler>
  }

}
 800b192:	bf00      	nop
 800b194:	3708      	adds	r7, #8
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}
 800b19a:	bf00      	nop
 800b19c:	20005db0 	.word	0x20005db0
 800b1a0:	40001400 	.word	0x40001400

0800b1a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b084      	sub	sp, #16
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1b4:	d10e      	bne.n	800b1d4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	60fb      	str	r3, [r7, #12]
 800b1ba:	4b16      	ldr	r3, [pc, #88]	; (800b214 <HAL_TIM_Base_MspInit+0x70>)
 800b1bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1be:	4a15      	ldr	r2, [pc, #84]	; (800b214 <HAL_TIM_Base_MspInit+0x70>)
 800b1c0:	f043 0301 	orr.w	r3, r3, #1
 800b1c4:	6413      	str	r3, [r2, #64]	; 0x40
 800b1c6:	4b13      	ldr	r3, [pc, #76]	; (800b214 <HAL_TIM_Base_MspInit+0x70>)
 800b1c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1ca:	f003 0301 	and.w	r3, r3, #1
 800b1ce:	60fb      	str	r3, [r7, #12]
 800b1d0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800b1d2:	e01a      	b.n	800b20a <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM7)
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	4a0f      	ldr	r2, [pc, #60]	; (800b218 <HAL_TIM_Base_MspInit+0x74>)
 800b1da:	4293      	cmp	r3, r2
 800b1dc:	d115      	bne.n	800b20a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800b1de:	2300      	movs	r3, #0
 800b1e0:	60bb      	str	r3, [r7, #8]
 800b1e2:	4b0c      	ldr	r3, [pc, #48]	; (800b214 <HAL_TIM_Base_MspInit+0x70>)
 800b1e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1e6:	4a0b      	ldr	r2, [pc, #44]	; (800b214 <HAL_TIM_Base_MspInit+0x70>)
 800b1e8:	f043 0320 	orr.w	r3, r3, #32
 800b1ec:	6413      	str	r3, [r2, #64]	; 0x40
 800b1ee:	4b09      	ldr	r3, [pc, #36]	; (800b214 <HAL_TIM_Base_MspInit+0x70>)
 800b1f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1f2:	f003 0320 	and.w	r3, r3, #32
 800b1f6:	60bb      	str	r3, [r7, #8]
 800b1f8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	2105      	movs	r1, #5
 800b1fe:	2037      	movs	r0, #55	; 0x37
 800b200:	f000 fa28 	bl	800b654 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800b204:	2037      	movs	r0, #55	; 0x37
 800b206:	f000 fa41 	bl	800b68c <HAL_NVIC_EnableIRQ>
}
 800b20a:	bf00      	nop
 800b20c:	3710      	adds	r7, #16
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}
 800b212:	bf00      	nop
 800b214:	40023800 	.word	0x40023800
 800b218:	40001400 	.word	0x40001400

0800b21c <MX_UART4_Init>:
UART_HandleTypeDef huart4;
DMA_HandleTypeDef hdma_uart4_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 800b220:	4b11      	ldr	r3, [pc, #68]	; (800b268 <MX_UART4_Init+0x4c>)
 800b222:	4a12      	ldr	r2, [pc, #72]	; (800b26c <MX_UART4_Init+0x50>)
 800b224:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800b226:	4b10      	ldr	r3, [pc, #64]	; (800b268 <MX_UART4_Init+0x4c>)
 800b228:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b22c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800b22e:	4b0e      	ldr	r3, [pc, #56]	; (800b268 <MX_UART4_Init+0x4c>)
 800b230:	2200      	movs	r2, #0
 800b232:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800b234:	4b0c      	ldr	r3, [pc, #48]	; (800b268 <MX_UART4_Init+0x4c>)
 800b236:	2200      	movs	r2, #0
 800b238:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800b23a:	4b0b      	ldr	r3, [pc, #44]	; (800b268 <MX_UART4_Init+0x4c>)
 800b23c:	2200      	movs	r2, #0
 800b23e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800b240:	4b09      	ldr	r3, [pc, #36]	; (800b268 <MX_UART4_Init+0x4c>)
 800b242:	220c      	movs	r2, #12
 800b244:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b246:	4b08      	ldr	r3, [pc, #32]	; (800b268 <MX_UART4_Init+0x4c>)
 800b248:	2200      	movs	r2, #0
 800b24a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800b24c:	4b06      	ldr	r3, [pc, #24]	; (800b268 <MX_UART4_Init+0x4c>)
 800b24e:	2200      	movs	r2, #0
 800b250:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800b252:	4805      	ldr	r0, [pc, #20]	; (800b268 <MX_UART4_Init+0x4c>)
 800b254:	f003 fa04 	bl	800e660 <HAL_UART_Init>
 800b258:	4603      	mov	r3, r0
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d001      	beq.n	800b262 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800b25e:	f7f8 feb1 	bl	8003fc4 <Error_Handler>
  }

}
 800b262:	bf00      	nop
 800b264:	bd80      	pop	{r7, pc}
 800b266:	bf00      	nop
 800b268:	20005df0 	.word	0x20005df0
 800b26c:	40004c00 	.word	0x40004c00

0800b270 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b08a      	sub	sp, #40	; 0x28
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b278:	f107 0314 	add.w	r3, r7, #20
 800b27c:	2200      	movs	r2, #0
 800b27e:	601a      	str	r2, [r3, #0]
 800b280:	605a      	str	r2, [r3, #4]
 800b282:	609a      	str	r2, [r3, #8]
 800b284:	60da      	str	r2, [r3, #12]
 800b286:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	4a34      	ldr	r2, [pc, #208]	; (800b360 <HAL_UART_MspInit+0xf0>)
 800b28e:	4293      	cmp	r3, r2
 800b290:	d161      	bne.n	800b356 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800b292:	2300      	movs	r3, #0
 800b294:	613b      	str	r3, [r7, #16]
 800b296:	4b33      	ldr	r3, [pc, #204]	; (800b364 <HAL_UART_MspInit+0xf4>)
 800b298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b29a:	4a32      	ldr	r2, [pc, #200]	; (800b364 <HAL_UART_MspInit+0xf4>)
 800b29c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b2a0:	6413      	str	r3, [r2, #64]	; 0x40
 800b2a2:	4b30      	ldr	r3, [pc, #192]	; (800b364 <HAL_UART_MspInit+0xf4>)
 800b2a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b2aa:	613b      	str	r3, [r7, #16]
 800b2ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	60fb      	str	r3, [r7, #12]
 800b2b2:	4b2c      	ldr	r3, [pc, #176]	; (800b364 <HAL_UART_MspInit+0xf4>)
 800b2b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2b6:	4a2b      	ldr	r2, [pc, #172]	; (800b364 <HAL_UART_MspInit+0xf4>)
 800b2b8:	f043 0301 	orr.w	r3, r3, #1
 800b2bc:	6313      	str	r3, [r2, #48]	; 0x30
 800b2be:	4b29      	ldr	r3, [pc, #164]	; (800b364 <HAL_UART_MspInit+0xf4>)
 800b2c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2c2:	f003 0301 	and.w	r3, r3, #1
 800b2c6:	60fb      	str	r3, [r7, #12]
 800b2c8:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800b2ca:	2303      	movs	r3, #3
 800b2cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b2ce:	2302      	movs	r3, #2
 800b2d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b2d6:	2303      	movs	r3, #3
 800b2d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800b2da:	2308      	movs	r3, #8
 800b2dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b2de:	f107 0314 	add.w	r3, r7, #20
 800b2e2:	4619      	mov	r1, r3
 800b2e4:	4820      	ldr	r0, [pc, #128]	; (800b368 <HAL_UART_MspInit+0xf8>)
 800b2e6:	f000 fd7f 	bl	800bde8 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800b2ea:	4b20      	ldr	r3, [pc, #128]	; (800b36c <HAL_UART_MspInit+0xfc>)
 800b2ec:	4a20      	ldr	r2, [pc, #128]	; (800b370 <HAL_UART_MspInit+0x100>)
 800b2ee:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 800b2f0:	4b1e      	ldr	r3, [pc, #120]	; (800b36c <HAL_UART_MspInit+0xfc>)
 800b2f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b2f6:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b2f8:	4b1c      	ldr	r3, [pc, #112]	; (800b36c <HAL_UART_MspInit+0xfc>)
 800b2fa:	2240      	movs	r2, #64	; 0x40
 800b2fc:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b2fe:	4b1b      	ldr	r3, [pc, #108]	; (800b36c <HAL_UART_MspInit+0xfc>)
 800b300:	2200      	movs	r2, #0
 800b302:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b304:	4b19      	ldr	r3, [pc, #100]	; (800b36c <HAL_UART_MspInit+0xfc>)
 800b306:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b30a:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b30c:	4b17      	ldr	r3, [pc, #92]	; (800b36c <HAL_UART_MspInit+0xfc>)
 800b30e:	2200      	movs	r2, #0
 800b310:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b312:	4b16      	ldr	r3, [pc, #88]	; (800b36c <HAL_UART_MspInit+0xfc>)
 800b314:	2200      	movs	r2, #0
 800b316:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800b318:	4b14      	ldr	r3, [pc, #80]	; (800b36c <HAL_UART_MspInit+0xfc>)
 800b31a:	2200      	movs	r2, #0
 800b31c:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800b31e:	4b13      	ldr	r3, [pc, #76]	; (800b36c <HAL_UART_MspInit+0xfc>)
 800b320:	2200      	movs	r2, #0
 800b322:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b324:	4b11      	ldr	r3, [pc, #68]	; (800b36c <HAL_UART_MspInit+0xfc>)
 800b326:	2200      	movs	r2, #0
 800b328:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800b32a:	4810      	ldr	r0, [pc, #64]	; (800b36c <HAL_UART_MspInit+0xfc>)
 800b32c:	f000 f9bc 	bl	800b6a8 <HAL_DMA_Init>
 800b330:	4603      	mov	r3, r0
 800b332:	2b00      	cmp	r3, #0
 800b334:	d001      	beq.n	800b33a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800b336:	f7f8 fe45 	bl	8003fc4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	4a0b      	ldr	r2, [pc, #44]	; (800b36c <HAL_UART_MspInit+0xfc>)
 800b33e:	631a      	str	r2, [r3, #48]	; 0x30
 800b340:	4a0a      	ldr	r2, [pc, #40]	; (800b36c <HAL_UART_MspInit+0xfc>)
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800b346:	2200      	movs	r2, #0
 800b348:	2105      	movs	r1, #5
 800b34a:	2034      	movs	r0, #52	; 0x34
 800b34c:	f000 f982 	bl	800b654 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800b350:	2034      	movs	r0, #52	; 0x34
 800b352:	f000 f99b 	bl	800b68c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 800b356:	bf00      	nop
 800b358:	3728      	adds	r7, #40	; 0x28
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}
 800b35e:	bf00      	nop
 800b360:	40004c00 	.word	0x40004c00
 800b364:	40023800 	.word	0x40023800
 800b368:	40020000 	.word	0x40020000
 800b36c:	20005e30 	.word	0x20005e30
 800b370:	40026070 	.word	0x40026070

0800b374 <HAL_UART_TxCpltCallback>:
  /* USER CODE END UART4_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800b374:	b580      	push	{r7, lr}
 800b376:	b084      	sub	sp, #16
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
	if (UART4 == huart->Instance) {
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	4a0c      	ldr	r2, [pc, #48]	; (800b3b4 <HAL_UART_TxCpltCallback+0x40>)
 800b382:	4293      	cmp	r3, r2
 800b384:	d112      	bne.n	800b3ac <HAL_UART_TxCpltCallback+0x38>
		uint16_t size_dma;
		size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 800b386:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b38a:	490b      	ldr	r1, [pc, #44]	; (800b3b8 <HAL_UART_TxCpltCallback+0x44>)
 800b38c:	480b      	ldr	r0, [pc, #44]	; (800b3bc <HAL_UART_TxCpltCallback+0x48>)
 800b38e:	f7f8 feb8 	bl	8004102 <ringBuff_PopArray>
 800b392:	4603      	mov	r3, r0
 800b394:	81fb      	strh	r3, [r7, #14]
		if (0 == size_dma) {
 800b396:	89fb      	ldrh	r3, [r7, #14]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d006      	beq.n	800b3aa <HAL_UART_TxCpltCallback+0x36>
			return;
		}
		HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 800b39c:	89fb      	ldrh	r3, [r7, #14]
 800b39e:	461a      	mov	r2, r3
 800b3a0:	4905      	ldr	r1, [pc, #20]	; (800b3b8 <HAL_UART_TxCpltCallback+0x44>)
 800b3a2:	4807      	ldr	r0, [pc, #28]	; (800b3c0 <HAL_UART_TxCpltCallback+0x4c>)
 800b3a4:	f003 f9aa 	bl	800e6fc <HAL_UART_Transmit_DMA>
 800b3a8:	e000      	b.n	800b3ac <HAL_UART_TxCpltCallback+0x38>
			return;
 800b3aa:	bf00      	nop
	}
}
 800b3ac:	3710      	adds	r7, #16
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bd80      	pop	{r7, pc}
 800b3b2:	bf00      	nop
 800b3b4:	40004c00 	.word	0x40004c00
 800b3b8:	20004d6c 	.word	0x20004d6c
 800b3bc:	20000410 	.word	0x20000410
 800b3c0:	20005df0 	.word	0x20005df0

0800b3c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800b3c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b3fc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b3c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b3ca:	e003      	b.n	800b3d4 <LoopCopyDataInit>

0800b3cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b3cc:	4b0c      	ldr	r3, [pc, #48]	; (800b400 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b3ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b3d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b3d2:	3104      	adds	r1, #4

0800b3d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b3d4:	480b      	ldr	r0, [pc, #44]	; (800b404 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b3d6:	4b0c      	ldr	r3, [pc, #48]	; (800b408 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b3d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b3da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b3dc:	d3f6      	bcc.n	800b3cc <CopyDataInit>
  ldr  r2, =_sbss
 800b3de:	4a0b      	ldr	r2, [pc, #44]	; (800b40c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b3e0:	e002      	b.n	800b3e8 <LoopFillZerobss>

0800b3e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b3e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b3e4:	f842 3b04 	str.w	r3, [r2], #4

0800b3e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b3e8:	4b09      	ldr	r3, [pc, #36]	; (800b410 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b3ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b3ec:	d3f9      	bcc.n	800b3e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b3ee:	f7ff fe3f 	bl	800b070 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b3f2:	f00a fc59 	bl	8015ca8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b3f6:	f7f8 fd51 	bl	8003e9c <main>
  bx  lr    
 800b3fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800b3fc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800b400:	0801c9b0 	.word	0x0801c9b0
  ldr  r0, =_sdata
 800b404:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800b408:	20000b84 	.word	0x20000b84
  ldr  r2, =_sbss
 800b40c:	20000b88 	.word	0x20000b88
  ldr  r3, = _ebss
 800b410:	20006b84 	.word	0x20006b84

0800b414 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b414:	e7fe      	b.n	800b414 <ADC_IRQHandler>
	...

0800b418 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800b41c:	4b0e      	ldr	r3, [pc, #56]	; (800b458 <HAL_Init+0x40>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	4a0d      	ldr	r2, [pc, #52]	; (800b458 <HAL_Init+0x40>)
 800b422:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b426:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800b428:	4b0b      	ldr	r3, [pc, #44]	; (800b458 <HAL_Init+0x40>)
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	4a0a      	ldr	r2, [pc, #40]	; (800b458 <HAL_Init+0x40>)
 800b42e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b432:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800b434:	4b08      	ldr	r3, [pc, #32]	; (800b458 <HAL_Init+0x40>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	4a07      	ldr	r2, [pc, #28]	; (800b458 <HAL_Init+0x40>)
 800b43a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b43e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b440:	2003      	movs	r0, #3
 800b442:	f000 f8fc 	bl	800b63e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b446:	2000      	movs	r0, #0
 800b448:	f7ff fc92 	bl	800ad70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800b44c:	f7ff fc64 	bl	800ad18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b450:	2300      	movs	r3, #0
}
 800b452:	4618      	mov	r0, r3
 800b454:	bd80      	pop	{r7, pc}
 800b456:	bf00      	nop
 800b458:	40023c00 	.word	0x40023c00

0800b45c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b45c:	b480      	push	{r7}
 800b45e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b460:	4b06      	ldr	r3, [pc, #24]	; (800b47c <HAL_IncTick+0x20>)
 800b462:	781b      	ldrb	r3, [r3, #0]
 800b464:	461a      	mov	r2, r3
 800b466:	4b06      	ldr	r3, [pc, #24]	; (800b480 <HAL_IncTick+0x24>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	4413      	add	r3, r2
 800b46c:	4a04      	ldr	r2, [pc, #16]	; (800b480 <HAL_IncTick+0x24>)
 800b46e:	6013      	str	r3, [r2, #0]
}
 800b470:	bf00      	nop
 800b472:	46bd      	mov	sp, r7
 800b474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b478:	4770      	bx	lr
 800b47a:	bf00      	nop
 800b47c:	20000830 	.word	0x20000830
 800b480:	20005e90 	.word	0x20005e90

0800b484 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b484:	b480      	push	{r7}
 800b486:	af00      	add	r7, sp, #0
  return uwTick;
 800b488:	4b03      	ldr	r3, [pc, #12]	; (800b498 <HAL_GetTick+0x14>)
 800b48a:	681b      	ldr	r3, [r3, #0]
}
 800b48c:	4618      	mov	r0, r3
 800b48e:	46bd      	mov	sp, r7
 800b490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b494:	4770      	bx	lr
 800b496:	bf00      	nop
 800b498:	20005e90 	.word	0x20005e90

0800b49c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b084      	sub	sp, #16
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b4a4:	f7ff ffee 	bl	800b484 <HAL_GetTick>
 800b4a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4b4:	d005      	beq.n	800b4c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b4b6:	4b0a      	ldr	r3, [pc, #40]	; (800b4e0 <HAL_Delay+0x44>)
 800b4b8:	781b      	ldrb	r3, [r3, #0]
 800b4ba:	461a      	mov	r2, r3
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	4413      	add	r3, r2
 800b4c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800b4c2:	bf00      	nop
 800b4c4:	f7ff ffde 	bl	800b484 <HAL_GetTick>
 800b4c8:	4602      	mov	r2, r0
 800b4ca:	68bb      	ldr	r3, [r7, #8]
 800b4cc:	1ad3      	subs	r3, r2, r3
 800b4ce:	68fa      	ldr	r2, [r7, #12]
 800b4d0:	429a      	cmp	r2, r3
 800b4d2:	d8f7      	bhi.n	800b4c4 <HAL_Delay+0x28>
  {
  }
}
 800b4d4:	bf00      	nop
 800b4d6:	bf00      	nop
 800b4d8:	3710      	adds	r7, #16
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}
 800b4de:	bf00      	nop
 800b4e0:	20000830 	.word	0x20000830

0800b4e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	b085      	sub	sp, #20
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f003 0307 	and.w	r3, r3, #7
 800b4f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b4f4:	4b0c      	ldr	r3, [pc, #48]	; (800b528 <__NVIC_SetPriorityGrouping+0x44>)
 800b4f6:	68db      	ldr	r3, [r3, #12]
 800b4f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b4fa:	68ba      	ldr	r2, [r7, #8]
 800b4fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b500:	4013      	ands	r3, r2
 800b502:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b508:	68bb      	ldr	r3, [r7, #8]
 800b50a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b50c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b514:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b516:	4a04      	ldr	r2, [pc, #16]	; (800b528 <__NVIC_SetPriorityGrouping+0x44>)
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	60d3      	str	r3, [r2, #12]
}
 800b51c:	bf00      	nop
 800b51e:	3714      	adds	r7, #20
 800b520:	46bd      	mov	sp, r7
 800b522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b526:	4770      	bx	lr
 800b528:	e000ed00 	.word	0xe000ed00

0800b52c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b52c:	b480      	push	{r7}
 800b52e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b530:	4b04      	ldr	r3, [pc, #16]	; (800b544 <__NVIC_GetPriorityGrouping+0x18>)
 800b532:	68db      	ldr	r3, [r3, #12]
 800b534:	0a1b      	lsrs	r3, r3, #8
 800b536:	f003 0307 	and.w	r3, r3, #7
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	46bd      	mov	sp, r7
 800b53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b542:	4770      	bx	lr
 800b544:	e000ed00 	.word	0xe000ed00

0800b548 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b548:	b480      	push	{r7}
 800b54a:	b083      	sub	sp, #12
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	4603      	mov	r3, r0
 800b550:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b556:	2b00      	cmp	r3, #0
 800b558:	db0b      	blt.n	800b572 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b55a:	79fb      	ldrb	r3, [r7, #7]
 800b55c:	f003 021f 	and.w	r2, r3, #31
 800b560:	4907      	ldr	r1, [pc, #28]	; (800b580 <__NVIC_EnableIRQ+0x38>)
 800b562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b566:	095b      	lsrs	r3, r3, #5
 800b568:	2001      	movs	r0, #1
 800b56a:	fa00 f202 	lsl.w	r2, r0, r2
 800b56e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800b572:	bf00      	nop
 800b574:	370c      	adds	r7, #12
 800b576:	46bd      	mov	sp, r7
 800b578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57c:	4770      	bx	lr
 800b57e:	bf00      	nop
 800b580:	e000e100 	.word	0xe000e100

0800b584 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b584:	b480      	push	{r7}
 800b586:	b083      	sub	sp, #12
 800b588:	af00      	add	r7, sp, #0
 800b58a:	4603      	mov	r3, r0
 800b58c:	6039      	str	r1, [r7, #0]
 800b58e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b594:	2b00      	cmp	r3, #0
 800b596:	db0a      	blt.n	800b5ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	b2da      	uxtb	r2, r3
 800b59c:	490c      	ldr	r1, [pc, #48]	; (800b5d0 <__NVIC_SetPriority+0x4c>)
 800b59e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b5a2:	0112      	lsls	r2, r2, #4
 800b5a4:	b2d2      	uxtb	r2, r2
 800b5a6:	440b      	add	r3, r1
 800b5a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b5ac:	e00a      	b.n	800b5c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	b2da      	uxtb	r2, r3
 800b5b2:	4908      	ldr	r1, [pc, #32]	; (800b5d4 <__NVIC_SetPriority+0x50>)
 800b5b4:	79fb      	ldrb	r3, [r7, #7]
 800b5b6:	f003 030f 	and.w	r3, r3, #15
 800b5ba:	3b04      	subs	r3, #4
 800b5bc:	0112      	lsls	r2, r2, #4
 800b5be:	b2d2      	uxtb	r2, r2
 800b5c0:	440b      	add	r3, r1
 800b5c2:	761a      	strb	r2, [r3, #24]
}
 800b5c4:	bf00      	nop
 800b5c6:	370c      	adds	r7, #12
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ce:	4770      	bx	lr
 800b5d0:	e000e100 	.word	0xe000e100
 800b5d4:	e000ed00 	.word	0xe000ed00

0800b5d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b5d8:	b480      	push	{r7}
 800b5da:	b089      	sub	sp, #36	; 0x24
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	60f8      	str	r0, [r7, #12]
 800b5e0:	60b9      	str	r1, [r7, #8]
 800b5e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	f003 0307 	and.w	r3, r3, #7
 800b5ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b5ec:	69fb      	ldr	r3, [r7, #28]
 800b5ee:	f1c3 0307 	rsb	r3, r3, #7
 800b5f2:	2b04      	cmp	r3, #4
 800b5f4:	bf28      	it	cs
 800b5f6:	2304      	movcs	r3, #4
 800b5f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b5fa:	69fb      	ldr	r3, [r7, #28]
 800b5fc:	3304      	adds	r3, #4
 800b5fe:	2b06      	cmp	r3, #6
 800b600:	d902      	bls.n	800b608 <NVIC_EncodePriority+0x30>
 800b602:	69fb      	ldr	r3, [r7, #28]
 800b604:	3b03      	subs	r3, #3
 800b606:	e000      	b.n	800b60a <NVIC_EncodePriority+0x32>
 800b608:	2300      	movs	r3, #0
 800b60a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b60c:	f04f 32ff 	mov.w	r2, #4294967295
 800b610:	69bb      	ldr	r3, [r7, #24]
 800b612:	fa02 f303 	lsl.w	r3, r2, r3
 800b616:	43da      	mvns	r2, r3
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	401a      	ands	r2, r3
 800b61c:	697b      	ldr	r3, [r7, #20]
 800b61e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b620:	f04f 31ff 	mov.w	r1, #4294967295
 800b624:	697b      	ldr	r3, [r7, #20]
 800b626:	fa01 f303 	lsl.w	r3, r1, r3
 800b62a:	43d9      	mvns	r1, r3
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b630:	4313      	orrs	r3, r2
         );
}
 800b632:	4618      	mov	r0, r3
 800b634:	3724      	adds	r7, #36	; 0x24
 800b636:	46bd      	mov	sp, r7
 800b638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63c:	4770      	bx	lr

0800b63e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b63e:	b580      	push	{r7, lr}
 800b640:	b082      	sub	sp, #8
 800b642:	af00      	add	r7, sp, #0
 800b644:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f7ff ff4c 	bl	800b4e4 <__NVIC_SetPriorityGrouping>
}
 800b64c:	bf00      	nop
 800b64e:	3708      	adds	r7, #8
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}

0800b654 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b654:	b580      	push	{r7, lr}
 800b656:	b086      	sub	sp, #24
 800b658:	af00      	add	r7, sp, #0
 800b65a:	4603      	mov	r3, r0
 800b65c:	60b9      	str	r1, [r7, #8]
 800b65e:	607a      	str	r2, [r7, #4]
 800b660:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800b662:	2300      	movs	r3, #0
 800b664:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b666:	f7ff ff61 	bl	800b52c <__NVIC_GetPriorityGrouping>
 800b66a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b66c:	687a      	ldr	r2, [r7, #4]
 800b66e:	68b9      	ldr	r1, [r7, #8]
 800b670:	6978      	ldr	r0, [r7, #20]
 800b672:	f7ff ffb1 	bl	800b5d8 <NVIC_EncodePriority>
 800b676:	4602      	mov	r2, r0
 800b678:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b67c:	4611      	mov	r1, r2
 800b67e:	4618      	mov	r0, r3
 800b680:	f7ff ff80 	bl	800b584 <__NVIC_SetPriority>
}
 800b684:	bf00      	nop
 800b686:	3718      	adds	r7, #24
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd80      	pop	{r7, pc}

0800b68c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b082      	sub	sp, #8
 800b690:	af00      	add	r7, sp, #0
 800b692:	4603      	mov	r3, r0
 800b694:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b69a:	4618      	mov	r0, r3
 800b69c:	f7ff ff54 	bl	800b548 <__NVIC_EnableIRQ>
}
 800b6a0:	bf00      	nop
 800b6a2:	3708      	adds	r7, #8
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}

0800b6a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b086      	sub	sp, #24
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800b6b4:	f7ff fee6 	bl	800b484 <HAL_GetTick>
 800b6b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d101      	bne.n	800b6c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800b6c0:	2301      	movs	r3, #1
 800b6c2:	e099      	b.n	800b7f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2202      	movs	r2, #2
 800b6d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	681a      	ldr	r2, [r3, #0]
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	f022 0201 	bic.w	r2, r2, #1
 800b6e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b6e4:	e00f      	b.n	800b706 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b6e6:	f7ff fecd 	bl	800b484 <HAL_GetTick>
 800b6ea:	4602      	mov	r2, r0
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	1ad3      	subs	r3, r2, r3
 800b6f0:	2b05      	cmp	r3, #5
 800b6f2:	d908      	bls.n	800b706 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2220      	movs	r2, #32
 800b6f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2203      	movs	r2, #3
 800b6fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800b702:	2303      	movs	r3, #3
 800b704:	e078      	b.n	800b7f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	f003 0301 	and.w	r3, r3, #1
 800b710:	2b00      	cmp	r3, #0
 800b712:	d1e8      	bne.n	800b6e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b71c:	697a      	ldr	r2, [r7, #20]
 800b71e:	4b38      	ldr	r3, [pc, #224]	; (800b800 <HAL_DMA_Init+0x158>)
 800b720:	4013      	ands	r3, r2
 800b722:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	685a      	ldr	r2, [r3, #4]
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	689b      	ldr	r3, [r3, #8]
 800b72c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b732:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	691b      	ldr	r3, [r3, #16]
 800b738:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b73e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	699b      	ldr	r3, [r3, #24]
 800b744:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b74a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	6a1b      	ldr	r3, [r3, #32]
 800b750:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b752:	697a      	ldr	r2, [r7, #20]
 800b754:	4313      	orrs	r3, r2
 800b756:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b75c:	2b04      	cmp	r3, #4
 800b75e:	d107      	bne.n	800b770 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b768:	4313      	orrs	r3, r2
 800b76a:	697a      	ldr	r2, [r7, #20]
 800b76c:	4313      	orrs	r3, r2
 800b76e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	697a      	ldr	r2, [r7, #20]
 800b776:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	695b      	ldr	r3, [r3, #20]
 800b77e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b780:	697b      	ldr	r3, [r7, #20]
 800b782:	f023 0307 	bic.w	r3, r3, #7
 800b786:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b78c:	697a      	ldr	r2, [r7, #20]
 800b78e:	4313      	orrs	r3, r2
 800b790:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b796:	2b04      	cmp	r3, #4
 800b798:	d117      	bne.n	800b7ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b79e:	697a      	ldr	r2, [r7, #20]
 800b7a0:	4313      	orrs	r3, r2
 800b7a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d00e      	beq.n	800b7ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f000 fa9f 	bl	800bcf0 <DMA_CheckFifoParam>
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d008      	beq.n	800b7ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2240      	movs	r2, #64	; 0x40
 800b7bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2201      	movs	r2, #1
 800b7c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	e016      	b.n	800b7f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	697a      	ldr	r2, [r7, #20]
 800b7d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f000 fa56 	bl	800bc84 <DMA_CalcBaseAndBitshift>
 800b7d8:	4603      	mov	r3, r0
 800b7da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b7e0:	223f      	movs	r2, #63	; 0x3f
 800b7e2:	409a      	lsls	r2, r3
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2201      	movs	r2, #1
 800b7f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800b7f6:	2300      	movs	r3, #0
}
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	3718      	adds	r7, #24
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	bd80      	pop	{r7, pc}
 800b800:	f010803f 	.word	0xf010803f

0800b804 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b086      	sub	sp, #24
 800b808:	af00      	add	r7, sp, #0
 800b80a:	60f8      	str	r0, [r7, #12]
 800b80c:	60b9      	str	r1, [r7, #8]
 800b80e:	607a      	str	r2, [r7, #4]
 800b810:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b812:	2300      	movs	r3, #0
 800b814:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b81a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b822:	2b01      	cmp	r3, #1
 800b824:	d101      	bne.n	800b82a <HAL_DMA_Start_IT+0x26>
 800b826:	2302      	movs	r3, #2
 800b828:	e040      	b.n	800b8ac <HAL_DMA_Start_IT+0xa8>
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	2201      	movs	r2, #1
 800b82e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b838:	b2db      	uxtb	r3, r3
 800b83a:	2b01      	cmp	r3, #1
 800b83c:	d12f      	bne.n	800b89e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	2202      	movs	r2, #2
 800b842:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	2200      	movs	r2, #0
 800b84a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	687a      	ldr	r2, [r7, #4]
 800b850:	68b9      	ldr	r1, [r7, #8]
 800b852:	68f8      	ldr	r0, [r7, #12]
 800b854:	f000 f9e8 	bl	800bc28 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b85c:	223f      	movs	r2, #63	; 0x3f
 800b85e:	409a      	lsls	r2, r3
 800b860:	693b      	ldr	r3, [r7, #16]
 800b862:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	681a      	ldr	r2, [r3, #0]
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	f042 0216 	orr.w	r2, r2, #22
 800b872:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d007      	beq.n	800b88c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	681a      	ldr	r2, [r3, #0]
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	f042 0208 	orr.w	r2, r2, #8
 800b88a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	681a      	ldr	r2, [r3, #0]
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	f042 0201 	orr.w	r2, r2, #1
 800b89a:	601a      	str	r2, [r3, #0]
 800b89c:	e005      	b.n	800b8aa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800b8a6:	2302      	movs	r3, #2
 800b8a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800b8aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	3718      	adds	r7, #24
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	bd80      	pop	{r7, pc}

0800b8b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800b8b4:	b480      	push	{r7}
 800b8b6:	b083      	sub	sp, #12
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b8c2:	b2db      	uxtb	r3, r3
 800b8c4:	2b02      	cmp	r3, #2
 800b8c6:	d004      	beq.n	800b8d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2280      	movs	r2, #128	; 0x80
 800b8cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800b8ce:	2301      	movs	r3, #1
 800b8d0:	e00c      	b.n	800b8ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2205      	movs	r2, #5
 800b8d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	681a      	ldr	r2, [r3, #0]
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	f022 0201 	bic.w	r2, r2, #1
 800b8e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800b8ea:	2300      	movs	r3, #0
}
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	370c      	adds	r7, #12
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f6:	4770      	bx	lr

0800b8f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b086      	sub	sp, #24
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800b900:	2300      	movs	r3, #0
 800b902:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800b904:	4b92      	ldr	r3, [pc, #584]	; (800bb50 <HAL_DMA_IRQHandler+0x258>)
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	4a92      	ldr	r2, [pc, #584]	; (800bb54 <HAL_DMA_IRQHandler+0x25c>)
 800b90a:	fba2 2303 	umull	r2, r3, r2, r3
 800b90e:	0a9b      	lsrs	r3, r3, #10
 800b910:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b916:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800b918:	693b      	ldr	r3, [r7, #16]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b922:	2208      	movs	r2, #8
 800b924:	409a      	lsls	r2, r3
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	4013      	ands	r3, r2
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d01a      	beq.n	800b964 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	f003 0304 	and.w	r3, r3, #4
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d013      	beq.n	800b964 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	681a      	ldr	r2, [r3, #0]
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	f022 0204 	bic.w	r2, r2, #4
 800b94a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b950:	2208      	movs	r2, #8
 800b952:	409a      	lsls	r2, r3
 800b954:	693b      	ldr	r3, [r7, #16]
 800b956:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b95c:	f043 0201 	orr.w	r2, r3, #1
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b968:	2201      	movs	r2, #1
 800b96a:	409a      	lsls	r2, r3
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	4013      	ands	r3, r2
 800b970:	2b00      	cmp	r3, #0
 800b972:	d012      	beq.n	800b99a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	695b      	ldr	r3, [r3, #20]
 800b97a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d00b      	beq.n	800b99a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b986:	2201      	movs	r2, #1
 800b988:	409a      	lsls	r2, r3
 800b98a:	693b      	ldr	r3, [r7, #16]
 800b98c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b992:	f043 0202 	orr.w	r2, r3, #2
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b99e:	2204      	movs	r2, #4
 800b9a0:	409a      	lsls	r2, r3
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	4013      	ands	r3, r2
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d012      	beq.n	800b9d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	f003 0302 	and.w	r3, r3, #2
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d00b      	beq.n	800b9d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b9bc:	2204      	movs	r2, #4
 800b9be:	409a      	lsls	r2, r3
 800b9c0:	693b      	ldr	r3, [r7, #16]
 800b9c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9c8:	f043 0204 	orr.w	r2, r3, #4
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b9d4:	2210      	movs	r2, #16
 800b9d6:	409a      	lsls	r2, r3
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	4013      	ands	r3, r2
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d043      	beq.n	800ba68 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	f003 0308 	and.w	r3, r3, #8
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d03c      	beq.n	800ba68 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b9f2:	2210      	movs	r2, #16
 800b9f4:	409a      	lsls	r2, r3
 800b9f6:	693b      	ldr	r3, [r7, #16]
 800b9f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d018      	beq.n	800ba3a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d108      	bne.n	800ba28 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d024      	beq.n	800ba68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	4798      	blx	r3
 800ba26:	e01f      	b.n	800ba68 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d01b      	beq.n	800ba68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	4798      	blx	r3
 800ba38:	e016      	b.n	800ba68 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d107      	bne.n	800ba58 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	681a      	ldr	r2, [r3, #0]
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	f022 0208 	bic.w	r2, r2, #8
 800ba56:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d003      	beq.n	800ba68 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba64:	6878      	ldr	r0, [r7, #4]
 800ba66:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba6c:	2220      	movs	r2, #32
 800ba6e:	409a      	lsls	r2, r3
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	4013      	ands	r3, r2
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	f000 808e 	beq.w	800bb96 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	f003 0310 	and.w	r3, r3, #16
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	f000 8086 	beq.w	800bb96 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba8e:	2220      	movs	r2, #32
 800ba90:	409a      	lsls	r2, r3
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ba9c:	b2db      	uxtb	r3, r3
 800ba9e:	2b05      	cmp	r3, #5
 800baa0:	d136      	bne.n	800bb10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	681a      	ldr	r2, [r3, #0]
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	f022 0216 	bic.w	r2, r2, #22
 800bab0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	695a      	ldr	r2, [r3, #20]
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bac0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d103      	bne.n	800bad2 <HAL_DMA_IRQHandler+0x1da>
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d007      	beq.n	800bae2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	681a      	ldr	r2, [r3, #0]
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f022 0208 	bic.w	r2, r2, #8
 800bae0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bae6:	223f      	movs	r2, #63	; 0x3f
 800bae8:	409a      	lsls	r2, r3
 800baea:	693b      	ldr	r3, [r7, #16]
 800baec:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	2200      	movs	r2, #0
 800baf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	2201      	movs	r2, #1
 800bafa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d07d      	beq.n	800bc02 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	4798      	blx	r3
        }
        return;
 800bb0e:	e078      	b.n	800bc02 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d01c      	beq.n	800bb58 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d108      	bne.n	800bb3e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d030      	beq.n	800bb96 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb38:	6878      	ldr	r0, [r7, #4]
 800bb3a:	4798      	blx	r3
 800bb3c:	e02b      	b.n	800bb96 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d027      	beq.n	800bb96 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb4a:	6878      	ldr	r0, [r7, #4]
 800bb4c:	4798      	blx	r3
 800bb4e:	e022      	b.n	800bb96 <HAL_DMA_IRQHandler+0x29e>
 800bb50:	20000828 	.word	0x20000828
 800bb54:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d10f      	bne.n	800bb86 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	681a      	ldr	r2, [r3, #0]
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	f022 0210 	bic.w	r2, r2, #16
 800bb74:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	2200      	movs	r2, #0
 800bb7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	2201      	movs	r2, #1
 800bb82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d003      	beq.n	800bb96 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d032      	beq.n	800bc04 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bba2:	f003 0301 	and.w	r3, r3, #1
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d022      	beq.n	800bbf0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	2205      	movs	r2, #5
 800bbae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	681a      	ldr	r2, [r3, #0]
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	f022 0201 	bic.w	r2, r2, #1
 800bbc0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800bbc2:	68bb      	ldr	r3, [r7, #8]
 800bbc4:	3301      	adds	r3, #1
 800bbc6:	60bb      	str	r3, [r7, #8]
 800bbc8:	697a      	ldr	r2, [r7, #20]
 800bbca:	429a      	cmp	r2, r3
 800bbcc:	d307      	bcc.n	800bbde <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	f003 0301 	and.w	r3, r3, #1
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d1f2      	bne.n	800bbc2 <HAL_DMA_IRQHandler+0x2ca>
 800bbdc:	e000      	b.n	800bbe0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800bbde:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2201      	movs	r2, #1
 800bbec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d005      	beq.n	800bc04 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbfc:	6878      	ldr	r0, [r7, #4]
 800bbfe:	4798      	blx	r3
 800bc00:	e000      	b.n	800bc04 <HAL_DMA_IRQHandler+0x30c>
        return;
 800bc02:	bf00      	nop
    }
  }
}
 800bc04:	3718      	adds	r7, #24
 800bc06:	46bd      	mov	sp, r7
 800bc08:	bd80      	pop	{r7, pc}
 800bc0a:	bf00      	nop

0800bc0c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800bc0c:	b480      	push	{r7}
 800bc0e:	b083      	sub	sp, #12
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bc1a:	b2db      	uxtb	r3, r3
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	370c      	adds	r7, #12
 800bc20:	46bd      	mov	sp, r7
 800bc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc26:	4770      	bx	lr

0800bc28 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800bc28:	b480      	push	{r7}
 800bc2a:	b085      	sub	sp, #20
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	60f8      	str	r0, [r7, #12]
 800bc30:	60b9      	str	r1, [r7, #8]
 800bc32:	607a      	str	r2, [r7, #4]
 800bc34:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	681a      	ldr	r2, [r3, #0]
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800bc44:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	683a      	ldr	r2, [r7, #0]
 800bc4c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	689b      	ldr	r3, [r3, #8]
 800bc52:	2b40      	cmp	r3, #64	; 0x40
 800bc54:	d108      	bne.n	800bc68 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	687a      	ldr	r2, [r7, #4]
 800bc5c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	68ba      	ldr	r2, [r7, #8]
 800bc64:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800bc66:	e007      	b.n	800bc78 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	68ba      	ldr	r2, [r7, #8]
 800bc6e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	687a      	ldr	r2, [r7, #4]
 800bc76:	60da      	str	r2, [r3, #12]
}
 800bc78:	bf00      	nop
 800bc7a:	3714      	adds	r7, #20
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc82:	4770      	bx	lr

0800bc84 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800bc84:	b480      	push	{r7}
 800bc86:	b085      	sub	sp, #20
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	b2db      	uxtb	r3, r3
 800bc92:	3b10      	subs	r3, #16
 800bc94:	4a14      	ldr	r2, [pc, #80]	; (800bce8 <DMA_CalcBaseAndBitshift+0x64>)
 800bc96:	fba2 2303 	umull	r2, r3, r2, r3
 800bc9a:	091b      	lsrs	r3, r3, #4
 800bc9c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800bc9e:	4a13      	ldr	r2, [pc, #76]	; (800bcec <DMA_CalcBaseAndBitshift+0x68>)
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	4413      	add	r3, r2
 800bca4:	781b      	ldrb	r3, [r3, #0]
 800bca6:	461a      	mov	r2, r3
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	2b03      	cmp	r3, #3
 800bcb0:	d909      	bls.n	800bcc6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800bcba:	f023 0303 	bic.w	r3, r3, #3
 800bcbe:	1d1a      	adds	r2, r3, #4
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	659a      	str	r2, [r3, #88]	; 0x58
 800bcc4:	e007      	b.n	800bcd6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800bcce:	f023 0303 	bic.w	r3, r3, #3
 800bcd2:	687a      	ldr	r2, [r7, #4]
 800bcd4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	3714      	adds	r7, #20
 800bcde:	46bd      	mov	sp, r7
 800bce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce4:	4770      	bx	lr
 800bce6:	bf00      	nop
 800bce8:	aaaaaaab 	.word	0xaaaaaaab
 800bcec:	0801c298 	.word	0x0801c298

0800bcf0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	b085      	sub	sp, #20
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd00:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	699b      	ldr	r3, [r3, #24]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d11f      	bne.n	800bd4a <DMA_CheckFifoParam+0x5a>
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	2b03      	cmp	r3, #3
 800bd0e:	d856      	bhi.n	800bdbe <DMA_CheckFifoParam+0xce>
 800bd10:	a201      	add	r2, pc, #4	; (adr r2, 800bd18 <DMA_CheckFifoParam+0x28>)
 800bd12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd16:	bf00      	nop
 800bd18:	0800bd29 	.word	0x0800bd29
 800bd1c:	0800bd3b 	.word	0x0800bd3b
 800bd20:	0800bd29 	.word	0x0800bd29
 800bd24:	0800bdbf 	.word	0x0800bdbf
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d046      	beq.n	800bdc2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800bd34:	2301      	movs	r3, #1
 800bd36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bd38:	e043      	b.n	800bdc2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd3e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800bd42:	d140      	bne.n	800bdc6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800bd44:	2301      	movs	r3, #1
 800bd46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bd48:	e03d      	b.n	800bdc6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	699b      	ldr	r3, [r3, #24]
 800bd4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd52:	d121      	bne.n	800bd98 <DMA_CheckFifoParam+0xa8>
 800bd54:	68bb      	ldr	r3, [r7, #8]
 800bd56:	2b03      	cmp	r3, #3
 800bd58:	d837      	bhi.n	800bdca <DMA_CheckFifoParam+0xda>
 800bd5a:	a201      	add	r2, pc, #4	; (adr r2, 800bd60 <DMA_CheckFifoParam+0x70>)
 800bd5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd60:	0800bd71 	.word	0x0800bd71
 800bd64:	0800bd77 	.word	0x0800bd77
 800bd68:	0800bd71 	.word	0x0800bd71
 800bd6c:	0800bd89 	.word	0x0800bd89
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800bd70:	2301      	movs	r3, #1
 800bd72:	73fb      	strb	r3, [r7, #15]
      break;
 800bd74:	e030      	b.n	800bdd8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d025      	beq.n	800bdce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800bd82:	2301      	movs	r3, #1
 800bd84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bd86:	e022      	b.n	800bdce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd8c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800bd90:	d11f      	bne.n	800bdd2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800bd92:	2301      	movs	r3, #1
 800bd94:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800bd96:	e01c      	b.n	800bdd2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800bd98:	68bb      	ldr	r3, [r7, #8]
 800bd9a:	2b02      	cmp	r3, #2
 800bd9c:	d903      	bls.n	800bda6 <DMA_CheckFifoParam+0xb6>
 800bd9e:	68bb      	ldr	r3, [r7, #8]
 800bda0:	2b03      	cmp	r3, #3
 800bda2:	d003      	beq.n	800bdac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800bda4:	e018      	b.n	800bdd8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800bda6:	2301      	movs	r3, #1
 800bda8:	73fb      	strb	r3, [r7, #15]
      break;
 800bdaa:	e015      	b.n	800bdd8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d00e      	beq.n	800bdd6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800bdb8:	2301      	movs	r3, #1
 800bdba:	73fb      	strb	r3, [r7, #15]
      break;
 800bdbc:	e00b      	b.n	800bdd6 <DMA_CheckFifoParam+0xe6>
      break;
 800bdbe:	bf00      	nop
 800bdc0:	e00a      	b.n	800bdd8 <DMA_CheckFifoParam+0xe8>
      break;
 800bdc2:	bf00      	nop
 800bdc4:	e008      	b.n	800bdd8 <DMA_CheckFifoParam+0xe8>
      break;
 800bdc6:	bf00      	nop
 800bdc8:	e006      	b.n	800bdd8 <DMA_CheckFifoParam+0xe8>
      break;
 800bdca:	bf00      	nop
 800bdcc:	e004      	b.n	800bdd8 <DMA_CheckFifoParam+0xe8>
      break;
 800bdce:	bf00      	nop
 800bdd0:	e002      	b.n	800bdd8 <DMA_CheckFifoParam+0xe8>
      break;   
 800bdd2:	bf00      	nop
 800bdd4:	e000      	b.n	800bdd8 <DMA_CheckFifoParam+0xe8>
      break;
 800bdd6:	bf00      	nop
    }
  } 
  
  return status; 
 800bdd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdda:	4618      	mov	r0, r3
 800bddc:	3714      	adds	r7, #20
 800bdde:	46bd      	mov	sp, r7
 800bde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde4:	4770      	bx	lr
 800bde6:	bf00      	nop

0800bde8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bde8:	b480      	push	{r7}
 800bdea:	b089      	sub	sp, #36	; 0x24
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
 800bdf0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800bdfe:	2300      	movs	r3, #0
 800be00:	61fb      	str	r3, [r7, #28]
 800be02:	e16b      	b.n	800c0dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800be04:	2201      	movs	r2, #1
 800be06:	69fb      	ldr	r3, [r7, #28]
 800be08:	fa02 f303 	lsl.w	r3, r2, r3
 800be0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	697a      	ldr	r2, [r7, #20]
 800be14:	4013      	ands	r3, r2
 800be16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800be18:	693a      	ldr	r2, [r7, #16]
 800be1a:	697b      	ldr	r3, [r7, #20]
 800be1c:	429a      	cmp	r2, r3
 800be1e:	f040 815a 	bne.w	800c0d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	685b      	ldr	r3, [r3, #4]
 800be26:	2b01      	cmp	r3, #1
 800be28:	d00b      	beq.n	800be42 <HAL_GPIO_Init+0x5a>
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	685b      	ldr	r3, [r3, #4]
 800be2e:	2b02      	cmp	r3, #2
 800be30:	d007      	beq.n	800be42 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800be36:	2b11      	cmp	r3, #17
 800be38:	d003      	beq.n	800be42 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	685b      	ldr	r3, [r3, #4]
 800be3e:	2b12      	cmp	r3, #18
 800be40:	d130      	bne.n	800bea4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	689b      	ldr	r3, [r3, #8]
 800be46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800be48:	69fb      	ldr	r3, [r7, #28]
 800be4a:	005b      	lsls	r3, r3, #1
 800be4c:	2203      	movs	r2, #3
 800be4e:	fa02 f303 	lsl.w	r3, r2, r3
 800be52:	43db      	mvns	r3, r3
 800be54:	69ba      	ldr	r2, [r7, #24]
 800be56:	4013      	ands	r3, r2
 800be58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	68da      	ldr	r2, [r3, #12]
 800be5e:	69fb      	ldr	r3, [r7, #28]
 800be60:	005b      	lsls	r3, r3, #1
 800be62:	fa02 f303 	lsl.w	r3, r2, r3
 800be66:	69ba      	ldr	r2, [r7, #24]
 800be68:	4313      	orrs	r3, r2
 800be6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	69ba      	ldr	r2, [r7, #24]
 800be70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	685b      	ldr	r3, [r3, #4]
 800be76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800be78:	2201      	movs	r2, #1
 800be7a:	69fb      	ldr	r3, [r7, #28]
 800be7c:	fa02 f303 	lsl.w	r3, r2, r3
 800be80:	43db      	mvns	r3, r3
 800be82:	69ba      	ldr	r2, [r7, #24]
 800be84:	4013      	ands	r3, r2
 800be86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	685b      	ldr	r3, [r3, #4]
 800be8c:	091b      	lsrs	r3, r3, #4
 800be8e:	f003 0201 	and.w	r2, r3, #1
 800be92:	69fb      	ldr	r3, [r7, #28]
 800be94:	fa02 f303 	lsl.w	r3, r2, r3
 800be98:	69ba      	ldr	r2, [r7, #24]
 800be9a:	4313      	orrs	r3, r2
 800be9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	69ba      	ldr	r2, [r7, #24]
 800bea2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	68db      	ldr	r3, [r3, #12]
 800bea8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800beaa:	69fb      	ldr	r3, [r7, #28]
 800beac:	005b      	lsls	r3, r3, #1
 800beae:	2203      	movs	r2, #3
 800beb0:	fa02 f303 	lsl.w	r3, r2, r3
 800beb4:	43db      	mvns	r3, r3
 800beb6:	69ba      	ldr	r2, [r7, #24]
 800beb8:	4013      	ands	r3, r2
 800beba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	689a      	ldr	r2, [r3, #8]
 800bec0:	69fb      	ldr	r3, [r7, #28]
 800bec2:	005b      	lsls	r3, r3, #1
 800bec4:	fa02 f303 	lsl.w	r3, r2, r3
 800bec8:	69ba      	ldr	r2, [r7, #24]
 800beca:	4313      	orrs	r3, r2
 800becc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	69ba      	ldr	r2, [r7, #24]
 800bed2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	685b      	ldr	r3, [r3, #4]
 800bed8:	2b02      	cmp	r3, #2
 800beda:	d003      	beq.n	800bee4 <HAL_GPIO_Init+0xfc>
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	685b      	ldr	r3, [r3, #4]
 800bee0:	2b12      	cmp	r3, #18
 800bee2:	d123      	bne.n	800bf2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800bee4:	69fb      	ldr	r3, [r7, #28]
 800bee6:	08da      	lsrs	r2, r3, #3
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	3208      	adds	r2, #8
 800beec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800bef2:	69fb      	ldr	r3, [r7, #28]
 800bef4:	f003 0307 	and.w	r3, r3, #7
 800bef8:	009b      	lsls	r3, r3, #2
 800befa:	220f      	movs	r2, #15
 800befc:	fa02 f303 	lsl.w	r3, r2, r3
 800bf00:	43db      	mvns	r3, r3
 800bf02:	69ba      	ldr	r2, [r7, #24]
 800bf04:	4013      	ands	r3, r2
 800bf06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	691a      	ldr	r2, [r3, #16]
 800bf0c:	69fb      	ldr	r3, [r7, #28]
 800bf0e:	f003 0307 	and.w	r3, r3, #7
 800bf12:	009b      	lsls	r3, r3, #2
 800bf14:	fa02 f303 	lsl.w	r3, r2, r3
 800bf18:	69ba      	ldr	r2, [r7, #24]
 800bf1a:	4313      	orrs	r3, r2
 800bf1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800bf1e:	69fb      	ldr	r3, [r7, #28]
 800bf20:	08da      	lsrs	r2, r3, #3
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	3208      	adds	r2, #8
 800bf26:	69b9      	ldr	r1, [r7, #24]
 800bf28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800bf32:	69fb      	ldr	r3, [r7, #28]
 800bf34:	005b      	lsls	r3, r3, #1
 800bf36:	2203      	movs	r2, #3
 800bf38:	fa02 f303 	lsl.w	r3, r2, r3
 800bf3c:	43db      	mvns	r3, r3
 800bf3e:	69ba      	ldr	r2, [r7, #24]
 800bf40:	4013      	ands	r3, r2
 800bf42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	685b      	ldr	r3, [r3, #4]
 800bf48:	f003 0203 	and.w	r2, r3, #3
 800bf4c:	69fb      	ldr	r3, [r7, #28]
 800bf4e:	005b      	lsls	r3, r3, #1
 800bf50:	fa02 f303 	lsl.w	r3, r2, r3
 800bf54:	69ba      	ldr	r2, [r7, #24]
 800bf56:	4313      	orrs	r3, r2
 800bf58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	69ba      	ldr	r2, [r7, #24]
 800bf5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	685b      	ldr	r3, [r3, #4]
 800bf64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	f000 80b4 	beq.w	800c0d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bf6e:	2300      	movs	r3, #0
 800bf70:	60fb      	str	r3, [r7, #12]
 800bf72:	4b60      	ldr	r3, [pc, #384]	; (800c0f4 <HAL_GPIO_Init+0x30c>)
 800bf74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf76:	4a5f      	ldr	r2, [pc, #380]	; (800c0f4 <HAL_GPIO_Init+0x30c>)
 800bf78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bf7c:	6453      	str	r3, [r2, #68]	; 0x44
 800bf7e:	4b5d      	ldr	r3, [pc, #372]	; (800c0f4 <HAL_GPIO_Init+0x30c>)
 800bf80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bf86:	60fb      	str	r3, [r7, #12]
 800bf88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800bf8a:	4a5b      	ldr	r2, [pc, #364]	; (800c0f8 <HAL_GPIO_Init+0x310>)
 800bf8c:	69fb      	ldr	r3, [r7, #28]
 800bf8e:	089b      	lsrs	r3, r3, #2
 800bf90:	3302      	adds	r3, #2
 800bf92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800bf98:	69fb      	ldr	r3, [r7, #28]
 800bf9a:	f003 0303 	and.w	r3, r3, #3
 800bf9e:	009b      	lsls	r3, r3, #2
 800bfa0:	220f      	movs	r2, #15
 800bfa2:	fa02 f303 	lsl.w	r3, r2, r3
 800bfa6:	43db      	mvns	r3, r3
 800bfa8:	69ba      	ldr	r2, [r7, #24]
 800bfaa:	4013      	ands	r3, r2
 800bfac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	4a52      	ldr	r2, [pc, #328]	; (800c0fc <HAL_GPIO_Init+0x314>)
 800bfb2:	4293      	cmp	r3, r2
 800bfb4:	d02b      	beq.n	800c00e <HAL_GPIO_Init+0x226>
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	4a51      	ldr	r2, [pc, #324]	; (800c100 <HAL_GPIO_Init+0x318>)
 800bfba:	4293      	cmp	r3, r2
 800bfbc:	d025      	beq.n	800c00a <HAL_GPIO_Init+0x222>
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	4a50      	ldr	r2, [pc, #320]	; (800c104 <HAL_GPIO_Init+0x31c>)
 800bfc2:	4293      	cmp	r3, r2
 800bfc4:	d01f      	beq.n	800c006 <HAL_GPIO_Init+0x21e>
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	4a4f      	ldr	r2, [pc, #316]	; (800c108 <HAL_GPIO_Init+0x320>)
 800bfca:	4293      	cmp	r3, r2
 800bfcc:	d019      	beq.n	800c002 <HAL_GPIO_Init+0x21a>
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	4a4e      	ldr	r2, [pc, #312]	; (800c10c <HAL_GPIO_Init+0x324>)
 800bfd2:	4293      	cmp	r3, r2
 800bfd4:	d013      	beq.n	800bffe <HAL_GPIO_Init+0x216>
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	4a4d      	ldr	r2, [pc, #308]	; (800c110 <HAL_GPIO_Init+0x328>)
 800bfda:	4293      	cmp	r3, r2
 800bfdc:	d00d      	beq.n	800bffa <HAL_GPIO_Init+0x212>
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	4a4c      	ldr	r2, [pc, #304]	; (800c114 <HAL_GPIO_Init+0x32c>)
 800bfe2:	4293      	cmp	r3, r2
 800bfe4:	d007      	beq.n	800bff6 <HAL_GPIO_Init+0x20e>
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	4a4b      	ldr	r2, [pc, #300]	; (800c118 <HAL_GPIO_Init+0x330>)
 800bfea:	4293      	cmp	r3, r2
 800bfec:	d101      	bne.n	800bff2 <HAL_GPIO_Init+0x20a>
 800bfee:	2307      	movs	r3, #7
 800bff0:	e00e      	b.n	800c010 <HAL_GPIO_Init+0x228>
 800bff2:	2308      	movs	r3, #8
 800bff4:	e00c      	b.n	800c010 <HAL_GPIO_Init+0x228>
 800bff6:	2306      	movs	r3, #6
 800bff8:	e00a      	b.n	800c010 <HAL_GPIO_Init+0x228>
 800bffa:	2305      	movs	r3, #5
 800bffc:	e008      	b.n	800c010 <HAL_GPIO_Init+0x228>
 800bffe:	2304      	movs	r3, #4
 800c000:	e006      	b.n	800c010 <HAL_GPIO_Init+0x228>
 800c002:	2303      	movs	r3, #3
 800c004:	e004      	b.n	800c010 <HAL_GPIO_Init+0x228>
 800c006:	2302      	movs	r3, #2
 800c008:	e002      	b.n	800c010 <HAL_GPIO_Init+0x228>
 800c00a:	2301      	movs	r3, #1
 800c00c:	e000      	b.n	800c010 <HAL_GPIO_Init+0x228>
 800c00e:	2300      	movs	r3, #0
 800c010:	69fa      	ldr	r2, [r7, #28]
 800c012:	f002 0203 	and.w	r2, r2, #3
 800c016:	0092      	lsls	r2, r2, #2
 800c018:	4093      	lsls	r3, r2
 800c01a:	69ba      	ldr	r2, [r7, #24]
 800c01c:	4313      	orrs	r3, r2
 800c01e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c020:	4935      	ldr	r1, [pc, #212]	; (800c0f8 <HAL_GPIO_Init+0x310>)
 800c022:	69fb      	ldr	r3, [r7, #28]
 800c024:	089b      	lsrs	r3, r3, #2
 800c026:	3302      	adds	r3, #2
 800c028:	69ba      	ldr	r2, [r7, #24]
 800c02a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c02e:	4b3b      	ldr	r3, [pc, #236]	; (800c11c <HAL_GPIO_Init+0x334>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c034:	693b      	ldr	r3, [r7, #16]
 800c036:	43db      	mvns	r3, r3
 800c038:	69ba      	ldr	r2, [r7, #24]
 800c03a:	4013      	ands	r3, r2
 800c03c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800c03e:	683b      	ldr	r3, [r7, #0]
 800c040:	685b      	ldr	r3, [r3, #4]
 800c042:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c046:	2b00      	cmp	r3, #0
 800c048:	d003      	beq.n	800c052 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800c04a:	69ba      	ldr	r2, [r7, #24]
 800c04c:	693b      	ldr	r3, [r7, #16]
 800c04e:	4313      	orrs	r3, r2
 800c050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800c052:	4a32      	ldr	r2, [pc, #200]	; (800c11c <HAL_GPIO_Init+0x334>)
 800c054:	69bb      	ldr	r3, [r7, #24]
 800c056:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800c058:	4b30      	ldr	r3, [pc, #192]	; (800c11c <HAL_GPIO_Init+0x334>)
 800c05a:	685b      	ldr	r3, [r3, #4]
 800c05c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c05e:	693b      	ldr	r3, [r7, #16]
 800c060:	43db      	mvns	r3, r3
 800c062:	69ba      	ldr	r2, [r7, #24]
 800c064:	4013      	ands	r3, r2
 800c066:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	685b      	ldr	r3, [r3, #4]
 800c06c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c070:	2b00      	cmp	r3, #0
 800c072:	d003      	beq.n	800c07c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800c074:	69ba      	ldr	r2, [r7, #24]
 800c076:	693b      	ldr	r3, [r7, #16]
 800c078:	4313      	orrs	r3, r2
 800c07a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800c07c:	4a27      	ldr	r2, [pc, #156]	; (800c11c <HAL_GPIO_Init+0x334>)
 800c07e:	69bb      	ldr	r3, [r7, #24]
 800c080:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c082:	4b26      	ldr	r3, [pc, #152]	; (800c11c <HAL_GPIO_Init+0x334>)
 800c084:	689b      	ldr	r3, [r3, #8]
 800c086:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c088:	693b      	ldr	r3, [r7, #16]
 800c08a:	43db      	mvns	r3, r3
 800c08c:	69ba      	ldr	r2, [r7, #24]
 800c08e:	4013      	ands	r3, r2
 800c090:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	685b      	ldr	r3, [r3, #4]
 800c096:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d003      	beq.n	800c0a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800c09e:	69ba      	ldr	r2, [r7, #24]
 800c0a0:	693b      	ldr	r3, [r7, #16]
 800c0a2:	4313      	orrs	r3, r2
 800c0a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800c0a6:	4a1d      	ldr	r2, [pc, #116]	; (800c11c <HAL_GPIO_Init+0x334>)
 800c0a8:	69bb      	ldr	r3, [r7, #24]
 800c0aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800c0ac:	4b1b      	ldr	r3, [pc, #108]	; (800c11c <HAL_GPIO_Init+0x334>)
 800c0ae:	68db      	ldr	r3, [r3, #12]
 800c0b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c0b2:	693b      	ldr	r3, [r7, #16]
 800c0b4:	43db      	mvns	r3, r3
 800c0b6:	69ba      	ldr	r2, [r7, #24]
 800c0b8:	4013      	ands	r3, r2
 800c0ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	685b      	ldr	r3, [r3, #4]
 800c0c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d003      	beq.n	800c0d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800c0c8:	69ba      	ldr	r2, [r7, #24]
 800c0ca:	693b      	ldr	r3, [r7, #16]
 800c0cc:	4313      	orrs	r3, r2
 800c0ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800c0d0:	4a12      	ldr	r2, [pc, #72]	; (800c11c <HAL_GPIO_Init+0x334>)
 800c0d2:	69bb      	ldr	r3, [r7, #24]
 800c0d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c0d6:	69fb      	ldr	r3, [r7, #28]
 800c0d8:	3301      	adds	r3, #1
 800c0da:	61fb      	str	r3, [r7, #28]
 800c0dc:	69fb      	ldr	r3, [r7, #28]
 800c0de:	2b0f      	cmp	r3, #15
 800c0e0:	f67f ae90 	bls.w	800be04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800c0e4:	bf00      	nop
 800c0e6:	bf00      	nop
 800c0e8:	3724      	adds	r7, #36	; 0x24
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f0:	4770      	bx	lr
 800c0f2:	bf00      	nop
 800c0f4:	40023800 	.word	0x40023800
 800c0f8:	40013800 	.word	0x40013800
 800c0fc:	40020000 	.word	0x40020000
 800c100:	40020400 	.word	0x40020400
 800c104:	40020800 	.word	0x40020800
 800c108:	40020c00 	.word	0x40020c00
 800c10c:	40021000 	.word	0x40021000
 800c110:	40021400 	.word	0x40021400
 800c114:	40021800 	.word	0x40021800
 800c118:	40021c00 	.word	0x40021c00
 800c11c:	40013c00 	.word	0x40013c00

0800c120 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c120:	b480      	push	{r7}
 800c122:	b083      	sub	sp, #12
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
 800c128:	460b      	mov	r3, r1
 800c12a:	807b      	strh	r3, [r7, #2]
 800c12c:	4613      	mov	r3, r2
 800c12e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c130:	787b      	ldrb	r3, [r7, #1]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d003      	beq.n	800c13e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c136:	887a      	ldrh	r2, [r7, #2]
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800c13c:	e003      	b.n	800c146 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800c13e:	887b      	ldrh	r3, [r7, #2]
 800c140:	041a      	lsls	r2, r3, #16
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	619a      	str	r2, [r3, #24]
}
 800c146:	bf00      	nop
 800c148:	370c      	adds	r7, #12
 800c14a:	46bd      	mov	sp, r7
 800c14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c150:	4770      	bx	lr
	...

0800c154 <HAL_NOR_Init>:
  * @param  Timing pointer to NOR control timing structure 
  * @param  ExtTiming pointer to NOR extended mode timing structure    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_Init(NOR_HandleTypeDef *hnor, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b084      	sub	sp, #16
 800c158:	af00      	add	r7, sp, #0
 800c15a:	60f8      	str	r0, [r7, #12]
 800c15c:	60b9      	str	r1, [r7, #8]
 800c15e:	607a      	str	r2, [r7, #4]
  /* Check the NOR handle parameter */
  if(hnor == NULL)
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d101      	bne.n	800c16a <HAL_NOR_Init+0x16>
  {
     return HAL_ERROR;
 800c166:	2301      	movs	r3, #1
 800c168:	e043      	b.n	800c1f2 <HAL_NOR_Init+0x9e>
  }
  
  if(hnor->State == HAL_NOR_STATE_RESET)
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800c170:	b2db      	uxtb	r3, r3
 800c172:	2b00      	cmp	r3, #0
 800c174:	d106      	bne.n	800c184 <HAL_NOR_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnor->Lock = HAL_UNLOCKED;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	2200      	movs	r2, #0
 800c17a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hnor->MspInitCallback(hnor);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NOR_MspInit(hnor);
 800c17e:	68f8      	ldr	r0, [r7, #12]
 800c180:	f7f7 faac 	bl	80036dc <HAL_NOR_MspInit>
#endif /* (USE_HAL_NOR_REGISTER_CALLBACKS) */
  }
  
  /* Initialize NOR control Interface */
  FMC_NORSRAM_Init(hnor->Instance, &(hnor->Init));
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	681a      	ldr	r2, [r3, #0]
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	3308      	adds	r3, #8
 800c18c:	4619      	mov	r1, r3
 800c18e:	4610      	mov	r0, r2
 800c190:	f003 f992 	bl	800f4b8 <FSMC_NORSRAM_Init>

  /* Initialize NOR timing Interface */
  FMC_NORSRAM_Timing_Init(hnor->Instance, Timing, hnor->Init.NSBank); 
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	6818      	ldr	r0, [r3, #0]
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	689b      	ldr	r3, [r3, #8]
 800c19c:	461a      	mov	r2, r3
 800c19e:	68b9      	ldr	r1, [r7, #8]
 800c1a0:	f003 f9dc 	bl	800f55c <FSMC_NORSRAM_Timing_Init>

  /* Initialize NOR extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hnor->Extended, ExtTiming, hnor->Init.NSBank, hnor->Init.ExtendedMode);
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	6858      	ldr	r0, [r3, #4]
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	689a      	ldr	r2, [r3, #8]
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1b0:	6879      	ldr	r1, [r7, #4]
 800c1b2:	f003 fa11 	bl	800f5d8 <FSMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	68fa      	ldr	r2, [r7, #12]
 800c1bc:	6892      	ldr	r2, [r2, #8]
 800c1be:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	68fa      	ldr	r2, [r7, #12]
 800c1c8:	6892      	ldr	r2, [r2, #8]
 800c1ca:	f041 0101 	orr.w	r1, r1, #1
 800c1ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize NOR Memory Data Width*/
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	695b      	ldr	r3, [r3, #20]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d103      	bne.n	800c1e2 <HAL_NOR_Init+0x8e>
  {
    uwNORMemoryDataWidth = NOR_MEMORY_8B;
 800c1da:	4b08      	ldr	r3, [pc, #32]	; (800c1fc <HAL_NOR_Init+0xa8>)
 800c1dc:	2200      	movs	r2, #0
 800c1de:	601a      	str	r2, [r3, #0]
 800c1e0:	e002      	b.n	800c1e8 <HAL_NOR_Init+0x94>
  }
  else
  {
    uwNORMemoryDataWidth = NOR_MEMORY_16B;
 800c1e2:	4b06      	ldr	r3, [pc, #24]	; (800c1fc <HAL_NOR_Init+0xa8>)
 800c1e4:	2201      	movs	r2, #1
 800c1e6:	601a      	str	r2, [r3, #0]
  }

  /* Check the NOR controller state */
  hnor->State = HAL_NOR_STATE_READY; 
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	2201      	movs	r2, #1
 800c1ec:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  return HAL_OK;
 800c1f0:	2300      	movs	r3, #0
}
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	3710      	adds	r7, #16
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd80      	pop	{r7, pc}
 800c1fa:	bf00      	nop
 800c1fc:	2000100c 	.word	0x2000100c

0800c200 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800c200:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c202:	b08f      	sub	sp, #60	; 0x3c
 800c204:	af0a      	add	r7, sp, #40	; 0x28
 800c206:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d101      	bne.n	800c212 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800c20e:	2301      	movs	r3, #1
 800c210:	e10f      	b.n	800c432 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800c21e:	b2db      	uxtb	r3, r3
 800c220:	2b00      	cmp	r3, #0
 800c222:	d106      	bne.n	800c232 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2200      	movs	r2, #0
 800c228:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f009 fa39 	bl	80156a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2203      	movs	r2, #3
 800c236:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800c23a:	68bb      	ldr	r3, [r7, #8]
 800c23c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c23e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c242:	2b00      	cmp	r3, #0
 800c244:	d102      	bne.n	800c24c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2200      	movs	r2, #0
 800c24a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	4618      	mov	r0, r3
 800c252:	f003 fb16 	bl	800f882 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	603b      	str	r3, [r7, #0]
 800c25c:	687e      	ldr	r6, [r7, #4]
 800c25e:	466d      	mov	r5, sp
 800c260:	f106 0410 	add.w	r4, r6, #16
 800c264:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c266:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c268:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c26a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c26c:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c270:	e885 0003 	stmia.w	r5, {r0, r1}
 800c274:	1d33      	adds	r3, r6, #4
 800c276:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c278:	6838      	ldr	r0, [r7, #0]
 800c27a:	f003 f9ed 	bl	800f658 <USB_CoreInit>
 800c27e:	4603      	mov	r3, r0
 800c280:	2b00      	cmp	r3, #0
 800c282:	d005      	beq.n	800c290 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2202      	movs	r2, #2
 800c288:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800c28c:	2301      	movs	r3, #1
 800c28e:	e0d0      	b.n	800c432 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	2100      	movs	r1, #0
 800c296:	4618      	mov	r0, r3
 800c298:	f003 fb04 	bl	800f8a4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c29c:	2300      	movs	r3, #0
 800c29e:	73fb      	strb	r3, [r7, #15]
 800c2a0:	e04a      	b.n	800c338 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800c2a2:	7bfa      	ldrb	r2, [r7, #15]
 800c2a4:	6879      	ldr	r1, [r7, #4]
 800c2a6:	4613      	mov	r3, r2
 800c2a8:	00db      	lsls	r3, r3, #3
 800c2aa:	1a9b      	subs	r3, r3, r2
 800c2ac:	009b      	lsls	r3, r3, #2
 800c2ae:	440b      	add	r3, r1
 800c2b0:	333d      	adds	r3, #61	; 0x3d
 800c2b2:	2201      	movs	r2, #1
 800c2b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800c2b6:	7bfa      	ldrb	r2, [r7, #15]
 800c2b8:	6879      	ldr	r1, [r7, #4]
 800c2ba:	4613      	mov	r3, r2
 800c2bc:	00db      	lsls	r3, r3, #3
 800c2be:	1a9b      	subs	r3, r3, r2
 800c2c0:	009b      	lsls	r3, r3, #2
 800c2c2:	440b      	add	r3, r1
 800c2c4:	333c      	adds	r3, #60	; 0x3c
 800c2c6:	7bfa      	ldrb	r2, [r7, #15]
 800c2c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800c2ca:	7bfa      	ldrb	r2, [r7, #15]
 800c2cc:	7bfb      	ldrb	r3, [r7, #15]
 800c2ce:	b298      	uxth	r0, r3
 800c2d0:	6879      	ldr	r1, [r7, #4]
 800c2d2:	4613      	mov	r3, r2
 800c2d4:	00db      	lsls	r3, r3, #3
 800c2d6:	1a9b      	subs	r3, r3, r2
 800c2d8:	009b      	lsls	r3, r3, #2
 800c2da:	440b      	add	r3, r1
 800c2dc:	3342      	adds	r3, #66	; 0x42
 800c2de:	4602      	mov	r2, r0
 800c2e0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800c2e2:	7bfa      	ldrb	r2, [r7, #15]
 800c2e4:	6879      	ldr	r1, [r7, #4]
 800c2e6:	4613      	mov	r3, r2
 800c2e8:	00db      	lsls	r3, r3, #3
 800c2ea:	1a9b      	subs	r3, r3, r2
 800c2ec:	009b      	lsls	r3, r3, #2
 800c2ee:	440b      	add	r3, r1
 800c2f0:	333f      	adds	r3, #63	; 0x3f
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800c2f6:	7bfa      	ldrb	r2, [r7, #15]
 800c2f8:	6879      	ldr	r1, [r7, #4]
 800c2fa:	4613      	mov	r3, r2
 800c2fc:	00db      	lsls	r3, r3, #3
 800c2fe:	1a9b      	subs	r3, r3, r2
 800c300:	009b      	lsls	r3, r3, #2
 800c302:	440b      	add	r3, r1
 800c304:	3344      	adds	r3, #68	; 0x44
 800c306:	2200      	movs	r2, #0
 800c308:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800c30a:	7bfa      	ldrb	r2, [r7, #15]
 800c30c:	6879      	ldr	r1, [r7, #4]
 800c30e:	4613      	mov	r3, r2
 800c310:	00db      	lsls	r3, r3, #3
 800c312:	1a9b      	subs	r3, r3, r2
 800c314:	009b      	lsls	r3, r3, #2
 800c316:	440b      	add	r3, r1
 800c318:	3348      	adds	r3, #72	; 0x48
 800c31a:	2200      	movs	r2, #0
 800c31c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800c31e:	7bfa      	ldrb	r2, [r7, #15]
 800c320:	6879      	ldr	r1, [r7, #4]
 800c322:	4613      	mov	r3, r2
 800c324:	00db      	lsls	r3, r3, #3
 800c326:	1a9b      	subs	r3, r3, r2
 800c328:	009b      	lsls	r3, r3, #2
 800c32a:	440b      	add	r3, r1
 800c32c:	3350      	adds	r3, #80	; 0x50
 800c32e:	2200      	movs	r2, #0
 800c330:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c332:	7bfb      	ldrb	r3, [r7, #15]
 800c334:	3301      	adds	r3, #1
 800c336:	73fb      	strb	r3, [r7, #15]
 800c338:	7bfa      	ldrb	r2, [r7, #15]
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	685b      	ldr	r3, [r3, #4]
 800c33e:	429a      	cmp	r2, r3
 800c340:	d3af      	bcc.n	800c2a2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c342:	2300      	movs	r3, #0
 800c344:	73fb      	strb	r3, [r7, #15]
 800c346:	e044      	b.n	800c3d2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800c348:	7bfa      	ldrb	r2, [r7, #15]
 800c34a:	6879      	ldr	r1, [r7, #4]
 800c34c:	4613      	mov	r3, r2
 800c34e:	00db      	lsls	r3, r3, #3
 800c350:	1a9b      	subs	r3, r3, r2
 800c352:	009b      	lsls	r3, r3, #2
 800c354:	440b      	add	r3, r1
 800c356:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800c35a:	2200      	movs	r2, #0
 800c35c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800c35e:	7bfa      	ldrb	r2, [r7, #15]
 800c360:	6879      	ldr	r1, [r7, #4]
 800c362:	4613      	mov	r3, r2
 800c364:	00db      	lsls	r3, r3, #3
 800c366:	1a9b      	subs	r3, r3, r2
 800c368:	009b      	lsls	r3, r3, #2
 800c36a:	440b      	add	r3, r1
 800c36c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800c370:	7bfa      	ldrb	r2, [r7, #15]
 800c372:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800c374:	7bfa      	ldrb	r2, [r7, #15]
 800c376:	6879      	ldr	r1, [r7, #4]
 800c378:	4613      	mov	r3, r2
 800c37a:	00db      	lsls	r3, r3, #3
 800c37c:	1a9b      	subs	r3, r3, r2
 800c37e:	009b      	lsls	r3, r3, #2
 800c380:	440b      	add	r3, r1
 800c382:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800c386:	2200      	movs	r2, #0
 800c388:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800c38a:	7bfa      	ldrb	r2, [r7, #15]
 800c38c:	6879      	ldr	r1, [r7, #4]
 800c38e:	4613      	mov	r3, r2
 800c390:	00db      	lsls	r3, r3, #3
 800c392:	1a9b      	subs	r3, r3, r2
 800c394:	009b      	lsls	r3, r3, #2
 800c396:	440b      	add	r3, r1
 800c398:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800c39c:	2200      	movs	r2, #0
 800c39e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800c3a0:	7bfa      	ldrb	r2, [r7, #15]
 800c3a2:	6879      	ldr	r1, [r7, #4]
 800c3a4:	4613      	mov	r3, r2
 800c3a6:	00db      	lsls	r3, r3, #3
 800c3a8:	1a9b      	subs	r3, r3, r2
 800c3aa:	009b      	lsls	r3, r3, #2
 800c3ac:	440b      	add	r3, r1
 800c3ae:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800c3b6:	7bfa      	ldrb	r2, [r7, #15]
 800c3b8:	6879      	ldr	r1, [r7, #4]
 800c3ba:	4613      	mov	r3, r2
 800c3bc:	00db      	lsls	r3, r3, #3
 800c3be:	1a9b      	subs	r3, r3, r2
 800c3c0:	009b      	lsls	r3, r3, #2
 800c3c2:	440b      	add	r3, r1
 800c3c4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c3cc:	7bfb      	ldrb	r3, [r7, #15]
 800c3ce:	3301      	adds	r3, #1
 800c3d0:	73fb      	strb	r3, [r7, #15]
 800c3d2:	7bfa      	ldrb	r2, [r7, #15]
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	685b      	ldr	r3, [r3, #4]
 800c3d8:	429a      	cmp	r2, r3
 800c3da:	d3b5      	bcc.n	800c348 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	603b      	str	r3, [r7, #0]
 800c3e2:	687e      	ldr	r6, [r7, #4]
 800c3e4:	466d      	mov	r5, sp
 800c3e6:	f106 0410 	add.w	r4, r6, #16
 800c3ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c3ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c3ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c3f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c3f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c3f6:	e885 0003 	stmia.w	r5, {r0, r1}
 800c3fa:	1d33      	adds	r3, r6, #4
 800c3fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c3fe:	6838      	ldr	r0, [r7, #0]
 800c400:	f003 fa7a 	bl	800f8f8 <USB_DevInit>
 800c404:	4603      	mov	r3, r0
 800c406:	2b00      	cmp	r3, #0
 800c408:	d005      	beq.n	800c416 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2202      	movs	r2, #2
 800c40e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800c412:	2301      	movs	r3, #1
 800c414:	e00d      	b.n	800c432 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	2200      	movs	r2, #0
 800c41a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2201      	movs	r2, #1
 800c422:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	4618      	mov	r0, r3
 800c42c:	f004 fac2 	bl	80109b4 <USB_DevDisconnect>

  return HAL_OK;
 800c430:	2300      	movs	r3, #0
}
 800c432:	4618      	mov	r0, r3
 800c434:	3714      	adds	r7, #20
 800c436:	46bd      	mov	sp, r7
 800c438:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c43a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800c43a:	b580      	push	{r7, lr}
 800c43c:	b084      	sub	sp, #16
 800c43e:	af00      	add	r7, sp, #0
 800c440:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800c44e:	2b01      	cmp	r3, #1
 800c450:	d101      	bne.n	800c456 <HAL_PCD_Start+0x1c>
 800c452:	2302      	movs	r3, #2
 800c454:	e020      	b.n	800c498 <HAL_PCD_Start+0x5e>
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	2201      	movs	r2, #1
 800c45a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c462:	2b01      	cmp	r3, #1
 800c464:	d109      	bne.n	800c47a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800c46a:	2b01      	cmp	r3, #1
 800c46c:	d005      	beq.n	800c47a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c472:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	4618      	mov	r0, r3
 800c480:	f003 f9ee 	bl	800f860 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	4618      	mov	r0, r3
 800c48a:	f004 fa72 	bl	8010972 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	2200      	movs	r2, #0
 800c492:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800c496:	2300      	movs	r3, #0
}
 800c498:	4618      	mov	r0, r3
 800c49a:	3710      	adds	r7, #16
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bd80      	pop	{r7, pc}

0800c4a0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800c4a0:	b590      	push	{r4, r7, lr}
 800c4a2:	b08d      	sub	sp, #52	; 0x34
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4ae:	6a3b      	ldr	r3, [r7, #32]
 800c4b0:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	f004 fb30 	bl	8010b1c <USB_GetMode>
 800c4bc:	4603      	mov	r3, r0
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	f040 839d 	bne.w	800cbfe <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	f004 fa94 	bl	80109f6 <USB_ReadInterrupts>
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	f000 8393 	beq.w	800cbfc <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	4618      	mov	r0, r3
 800c4dc:	f004 fa8b 	bl	80109f6 <USB_ReadInterrupts>
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	f003 0302 	and.w	r3, r3, #2
 800c4e6:	2b02      	cmp	r3, #2
 800c4e8:	d107      	bne.n	800c4fa <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	695a      	ldr	r2, [r3, #20]
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	f002 0202 	and.w	r2, r2, #2
 800c4f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	4618      	mov	r0, r3
 800c500:	f004 fa79 	bl	80109f6 <USB_ReadInterrupts>
 800c504:	4603      	mov	r3, r0
 800c506:	f003 0310 	and.w	r3, r3, #16
 800c50a:	2b10      	cmp	r3, #16
 800c50c:	d161      	bne.n	800c5d2 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	699a      	ldr	r2, [r3, #24]
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	f022 0210 	bic.w	r2, r2, #16
 800c51c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800c51e:	6a3b      	ldr	r3, [r7, #32]
 800c520:	6a1b      	ldr	r3, [r3, #32]
 800c522:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800c524:	69bb      	ldr	r3, [r7, #24]
 800c526:	f003 020f 	and.w	r2, r3, #15
 800c52a:	4613      	mov	r3, r2
 800c52c:	00db      	lsls	r3, r3, #3
 800c52e:	1a9b      	subs	r3, r3, r2
 800c530:	009b      	lsls	r3, r3, #2
 800c532:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c536:	687a      	ldr	r2, [r7, #4]
 800c538:	4413      	add	r3, r2
 800c53a:	3304      	adds	r3, #4
 800c53c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800c53e:	69bb      	ldr	r3, [r7, #24]
 800c540:	0c5b      	lsrs	r3, r3, #17
 800c542:	f003 030f 	and.w	r3, r3, #15
 800c546:	2b02      	cmp	r3, #2
 800c548:	d124      	bne.n	800c594 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800c54a:	69ba      	ldr	r2, [r7, #24]
 800c54c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800c550:	4013      	ands	r3, r2
 800c552:	2b00      	cmp	r3, #0
 800c554:	d035      	beq.n	800c5c2 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c556:	697b      	ldr	r3, [r7, #20]
 800c558:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800c55a:	69bb      	ldr	r3, [r7, #24]
 800c55c:	091b      	lsrs	r3, r3, #4
 800c55e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c560:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c564:	b29b      	uxth	r3, r3
 800c566:	461a      	mov	r2, r3
 800c568:	6a38      	ldr	r0, [r7, #32]
 800c56a:	f004 f8df 	bl	801072c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c56e:	697b      	ldr	r3, [r7, #20]
 800c570:	68da      	ldr	r2, [r3, #12]
 800c572:	69bb      	ldr	r3, [r7, #24]
 800c574:	091b      	lsrs	r3, r3, #4
 800c576:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c57a:	441a      	add	r2, r3
 800c57c:	697b      	ldr	r3, [r7, #20]
 800c57e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c580:	697b      	ldr	r3, [r7, #20]
 800c582:	699a      	ldr	r2, [r3, #24]
 800c584:	69bb      	ldr	r3, [r7, #24]
 800c586:	091b      	lsrs	r3, r3, #4
 800c588:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c58c:	441a      	add	r2, r3
 800c58e:	697b      	ldr	r3, [r7, #20]
 800c590:	619a      	str	r2, [r3, #24]
 800c592:	e016      	b.n	800c5c2 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800c594:	69bb      	ldr	r3, [r7, #24]
 800c596:	0c5b      	lsrs	r3, r3, #17
 800c598:	f003 030f 	and.w	r3, r3, #15
 800c59c:	2b06      	cmp	r3, #6
 800c59e:	d110      	bne.n	800c5c2 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c5a6:	2208      	movs	r2, #8
 800c5a8:	4619      	mov	r1, r3
 800c5aa:	6a38      	ldr	r0, [r7, #32]
 800c5ac:	f004 f8be 	bl	801072c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c5b0:	697b      	ldr	r3, [r7, #20]
 800c5b2:	699a      	ldr	r2, [r3, #24]
 800c5b4:	69bb      	ldr	r3, [r7, #24]
 800c5b6:	091b      	lsrs	r3, r3, #4
 800c5b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c5bc:	441a      	add	r2, r3
 800c5be:	697b      	ldr	r3, [r7, #20]
 800c5c0:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	699a      	ldr	r2, [r3, #24]
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	f042 0210 	orr.w	r2, r2, #16
 800c5d0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	f004 fa0d 	bl	80109f6 <USB_ReadInterrupts>
 800c5dc:	4603      	mov	r3, r0
 800c5de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c5e2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c5e6:	d16e      	bne.n	800c6c6 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	f004 fa13 	bl	8010a1c <USB_ReadDevAllOutEpInterrupt>
 800c5f6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800c5f8:	e062      	b.n	800c6c0 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800c5fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5fc:	f003 0301 	and.w	r3, r3, #1
 800c600:	2b00      	cmp	r3, #0
 800c602:	d057      	beq.n	800c6b4 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c60a:	b2d2      	uxtb	r2, r2
 800c60c:	4611      	mov	r1, r2
 800c60e:	4618      	mov	r0, r3
 800c610:	f004 fa38 	bl	8010a84 <USB_ReadDevOutEPInterrupt>
 800c614:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800c616:	693b      	ldr	r3, [r7, #16]
 800c618:	f003 0301 	and.w	r3, r3, #1
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d00c      	beq.n	800c63a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800c620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c622:	015a      	lsls	r2, r3, #5
 800c624:	69fb      	ldr	r3, [r7, #28]
 800c626:	4413      	add	r3, r2
 800c628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c62c:	461a      	mov	r2, r3
 800c62e:	2301      	movs	r3, #1
 800c630:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800c632:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	f000 fdb1 	bl	800d19c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800c63a:	693b      	ldr	r3, [r7, #16]
 800c63c:	f003 0308 	and.w	r3, r3, #8
 800c640:	2b00      	cmp	r3, #0
 800c642:	d00c      	beq.n	800c65e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800c644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c646:	015a      	lsls	r2, r3, #5
 800c648:	69fb      	ldr	r3, [r7, #28]
 800c64a:	4413      	add	r3, r2
 800c64c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c650:	461a      	mov	r2, r3
 800c652:	2308      	movs	r3, #8
 800c654:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800c656:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c658:	6878      	ldr	r0, [r7, #4]
 800c65a:	f000 feab 	bl	800d3b4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800c65e:	693b      	ldr	r3, [r7, #16]
 800c660:	f003 0310 	and.w	r3, r3, #16
 800c664:	2b00      	cmp	r3, #0
 800c666:	d008      	beq.n	800c67a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800c668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c66a:	015a      	lsls	r2, r3, #5
 800c66c:	69fb      	ldr	r3, [r7, #28]
 800c66e:	4413      	add	r3, r2
 800c670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c674:	461a      	mov	r2, r3
 800c676:	2310      	movs	r3, #16
 800c678:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c67a:	693b      	ldr	r3, [r7, #16]
 800c67c:	f003 0320 	and.w	r3, r3, #32
 800c680:	2b00      	cmp	r3, #0
 800c682:	d008      	beq.n	800c696 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c686:	015a      	lsls	r2, r3, #5
 800c688:	69fb      	ldr	r3, [r7, #28]
 800c68a:	4413      	add	r3, r2
 800c68c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c690:	461a      	mov	r2, r3
 800c692:	2320      	movs	r3, #32
 800c694:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800c696:	693b      	ldr	r3, [r7, #16]
 800c698:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d009      	beq.n	800c6b4 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800c6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6a2:	015a      	lsls	r2, r3, #5
 800c6a4:	69fb      	ldr	r3, [r7, #28]
 800c6a6:	4413      	add	r3, r2
 800c6a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6ac:	461a      	mov	r2, r3
 800c6ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c6b2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800c6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6b6:	3301      	adds	r3, #1
 800c6b8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800c6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6bc:	085b      	lsrs	r3, r3, #1
 800c6be:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800c6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d199      	bne.n	800c5fa <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	f004 f993 	bl	80109f6 <USB_ReadInterrupts>
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c6d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c6da:	f040 80c0 	bne.w	800c85e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	f004 f9b4 	bl	8010a50 <USB_ReadDevAllInEpInterrupt>
 800c6e8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800c6ee:	e0b2      	b.n	800c856 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800c6f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6f2:	f003 0301 	and.w	r3, r3, #1
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	f000 80a7 	beq.w	800c84a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c702:	b2d2      	uxtb	r2, r2
 800c704:	4611      	mov	r1, r2
 800c706:	4618      	mov	r0, r3
 800c708:	f004 f9da 	bl	8010ac0 <USB_ReadDevInEPInterrupt>
 800c70c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800c70e:	693b      	ldr	r3, [r7, #16]
 800c710:	f003 0301 	and.w	r3, r3, #1
 800c714:	2b00      	cmp	r3, #0
 800c716:	d057      	beq.n	800c7c8 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c71a:	f003 030f 	and.w	r3, r3, #15
 800c71e:	2201      	movs	r2, #1
 800c720:	fa02 f303 	lsl.w	r3, r2, r3
 800c724:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c726:	69fb      	ldr	r3, [r7, #28]
 800c728:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c72c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	43db      	mvns	r3, r3
 800c732:	69f9      	ldr	r1, [r7, #28]
 800c734:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c738:	4013      	ands	r3, r2
 800c73a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800c73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c73e:	015a      	lsls	r2, r3, #5
 800c740:	69fb      	ldr	r3, [r7, #28]
 800c742:	4413      	add	r3, r2
 800c744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c748:	461a      	mov	r2, r3
 800c74a:	2301      	movs	r3, #1
 800c74c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	691b      	ldr	r3, [r3, #16]
 800c752:	2b01      	cmp	r3, #1
 800c754:	d132      	bne.n	800c7bc <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800c756:	6879      	ldr	r1, [r7, #4]
 800c758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c75a:	4613      	mov	r3, r2
 800c75c:	00db      	lsls	r3, r3, #3
 800c75e:	1a9b      	subs	r3, r3, r2
 800c760:	009b      	lsls	r3, r3, #2
 800c762:	440b      	add	r3, r1
 800c764:	3348      	adds	r3, #72	; 0x48
 800c766:	6819      	ldr	r1, [r3, #0]
 800c768:	6878      	ldr	r0, [r7, #4]
 800c76a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c76c:	4613      	mov	r3, r2
 800c76e:	00db      	lsls	r3, r3, #3
 800c770:	1a9b      	subs	r3, r3, r2
 800c772:	009b      	lsls	r3, r3, #2
 800c774:	4403      	add	r3, r0
 800c776:	3344      	adds	r3, #68	; 0x44
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	4419      	add	r1, r3
 800c77c:	6878      	ldr	r0, [r7, #4]
 800c77e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c780:	4613      	mov	r3, r2
 800c782:	00db      	lsls	r3, r3, #3
 800c784:	1a9b      	subs	r3, r3, r2
 800c786:	009b      	lsls	r3, r3, #2
 800c788:	4403      	add	r3, r0
 800c78a:	3348      	adds	r3, #72	; 0x48
 800c78c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800c78e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c790:	2b00      	cmp	r3, #0
 800c792:	d113      	bne.n	800c7bc <HAL_PCD_IRQHandler+0x31c>
 800c794:	6879      	ldr	r1, [r7, #4]
 800c796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c798:	4613      	mov	r3, r2
 800c79a:	00db      	lsls	r3, r3, #3
 800c79c:	1a9b      	subs	r3, r3, r2
 800c79e:	009b      	lsls	r3, r3, #2
 800c7a0:	440b      	add	r3, r1
 800c7a2:	3350      	adds	r3, #80	; 0x50
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d108      	bne.n	800c7bc <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	6818      	ldr	r0, [r3, #0]
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c7b4:	461a      	mov	r2, r3
 800c7b6:	2101      	movs	r1, #1
 800c7b8:	f004 f9e2 	bl	8010b80 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800c7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7be:	b2db      	uxtb	r3, r3
 800c7c0:	4619      	mov	r1, r3
 800c7c2:	6878      	ldr	r0, [r7, #4]
 800c7c4:	f008 ffef 	bl	80157a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800c7c8:	693b      	ldr	r3, [r7, #16]
 800c7ca:	f003 0308 	and.w	r3, r3, #8
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d008      	beq.n	800c7e4 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800c7d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7d4:	015a      	lsls	r2, r3, #5
 800c7d6:	69fb      	ldr	r3, [r7, #28]
 800c7d8:	4413      	add	r3, r2
 800c7da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7de:	461a      	mov	r2, r3
 800c7e0:	2308      	movs	r3, #8
 800c7e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800c7e4:	693b      	ldr	r3, [r7, #16]
 800c7e6:	f003 0310 	and.w	r3, r3, #16
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d008      	beq.n	800c800 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800c7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7f0:	015a      	lsls	r2, r3, #5
 800c7f2:	69fb      	ldr	r3, [r7, #28]
 800c7f4:	4413      	add	r3, r2
 800c7f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7fa:	461a      	mov	r2, r3
 800c7fc:	2310      	movs	r3, #16
 800c7fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800c800:	693b      	ldr	r3, [r7, #16]
 800c802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c806:	2b00      	cmp	r3, #0
 800c808:	d008      	beq.n	800c81c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800c80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c80c:	015a      	lsls	r2, r3, #5
 800c80e:	69fb      	ldr	r3, [r7, #28]
 800c810:	4413      	add	r3, r2
 800c812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c816:	461a      	mov	r2, r3
 800c818:	2340      	movs	r3, #64	; 0x40
 800c81a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800c81c:	693b      	ldr	r3, [r7, #16]
 800c81e:	f003 0302 	and.w	r3, r3, #2
 800c822:	2b00      	cmp	r3, #0
 800c824:	d008      	beq.n	800c838 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800c826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c828:	015a      	lsls	r2, r3, #5
 800c82a:	69fb      	ldr	r3, [r7, #28]
 800c82c:	4413      	add	r3, r2
 800c82e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c832:	461a      	mov	r2, r3
 800c834:	2302      	movs	r3, #2
 800c836:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800c838:	693b      	ldr	r3, [r7, #16]
 800c83a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d003      	beq.n	800c84a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800c842:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c844:	6878      	ldr	r0, [r7, #4]
 800c846:	f000 fc1b 	bl	800d080 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800c84a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c84c:	3301      	adds	r3, #1
 800c84e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800c850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c852:	085b      	lsrs	r3, r3, #1
 800c854:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800c856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c858:	2b00      	cmp	r3, #0
 800c85a:	f47f af49 	bne.w	800c6f0 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	4618      	mov	r0, r3
 800c864:	f004 f8c7 	bl	80109f6 <USB_ReadInterrupts>
 800c868:	4603      	mov	r3, r0
 800c86a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c86e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c872:	d122      	bne.n	800c8ba <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c874:	69fb      	ldr	r3, [r7, #28]
 800c876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c87a:	685b      	ldr	r3, [r3, #4]
 800c87c:	69fa      	ldr	r2, [r7, #28]
 800c87e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c882:	f023 0301 	bic.w	r3, r3, #1
 800c886:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800c88e:	2b01      	cmp	r3, #1
 800c890:	d108      	bne.n	800c8a4 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2200      	movs	r2, #0
 800c896:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800c89a:	2100      	movs	r1, #0
 800c89c:	6878      	ldr	r0, [r7, #4]
 800c89e:	f000 fe27 	bl	800d4f0 <HAL_PCDEx_LPM_Callback>
 800c8a2:	e002      	b.n	800c8aa <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f008 fff5 	bl	8015894 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	695a      	ldr	r2, [r3, #20]
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800c8b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f004 f899 	bl	80109f6 <USB_ReadInterrupts>
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c8ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c8ce:	d112      	bne.n	800c8f6 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800c8d0:	69fb      	ldr	r3, [r7, #28]
 800c8d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8d6:	689b      	ldr	r3, [r3, #8]
 800c8d8:	f003 0301 	and.w	r3, r3, #1
 800c8dc:	2b01      	cmp	r3, #1
 800c8de:	d102      	bne.n	800c8e6 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800c8e0:	6878      	ldr	r0, [r7, #4]
 800c8e2:	f008 ffb1 	bl	8015848 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	695a      	ldr	r2, [r3, #20]
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800c8f4:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	f004 f87b 	bl	80109f6 <USB_ReadInterrupts>
 800c900:	4603      	mov	r3, r0
 800c902:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c906:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c90a:	f040 80c7 	bne.w	800ca9c <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c90e:	69fb      	ldr	r3, [r7, #28]
 800c910:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c914:	685b      	ldr	r3, [r3, #4]
 800c916:	69fa      	ldr	r2, [r7, #28]
 800c918:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c91c:	f023 0301 	bic.w	r3, r3, #1
 800c920:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	2110      	movs	r1, #16
 800c928:	4618      	mov	r0, r3
 800c92a:	f003 f949 	bl	800fbc0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c92e:	2300      	movs	r3, #0
 800c930:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c932:	e056      	b.n	800c9e2 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800c934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c936:	015a      	lsls	r2, r3, #5
 800c938:	69fb      	ldr	r3, [r7, #28]
 800c93a:	4413      	add	r3, r2
 800c93c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c940:	461a      	mov	r2, r3
 800c942:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c946:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c94a:	015a      	lsls	r2, r3, #5
 800c94c:	69fb      	ldr	r3, [r7, #28]
 800c94e:	4413      	add	r3, r2
 800c950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c958:	0151      	lsls	r1, r2, #5
 800c95a:	69fa      	ldr	r2, [r7, #28]
 800c95c:	440a      	add	r2, r1
 800c95e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c962:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c966:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c96a:	015a      	lsls	r2, r3, #5
 800c96c:	69fb      	ldr	r3, [r7, #28]
 800c96e:	4413      	add	r3, r2
 800c970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c978:	0151      	lsls	r1, r2, #5
 800c97a:	69fa      	ldr	r2, [r7, #28]
 800c97c:	440a      	add	r2, r1
 800c97e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c982:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c986:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800c988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c98a:	015a      	lsls	r2, r3, #5
 800c98c:	69fb      	ldr	r3, [r7, #28]
 800c98e:	4413      	add	r3, r2
 800c990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c994:	461a      	mov	r2, r3
 800c996:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c99a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c99c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c99e:	015a      	lsls	r2, r3, #5
 800c9a0:	69fb      	ldr	r3, [r7, #28]
 800c9a2:	4413      	add	r3, r2
 800c9a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c9ac:	0151      	lsls	r1, r2, #5
 800c9ae:	69fa      	ldr	r2, [r7, #28]
 800c9b0:	440a      	add	r2, r1
 800c9b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c9b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c9ba:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c9bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9be:	015a      	lsls	r2, r3, #5
 800c9c0:	69fb      	ldr	r3, [r7, #28]
 800c9c2:	4413      	add	r3, r2
 800c9c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c9cc:	0151      	lsls	r1, r2, #5
 800c9ce:	69fa      	ldr	r2, [r7, #28]
 800c9d0:	440a      	add	r2, r1
 800c9d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c9d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c9da:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c9dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9de:	3301      	adds	r3, #1
 800c9e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	685b      	ldr	r3, [r3, #4]
 800c9e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c9e8:	429a      	cmp	r2, r3
 800c9ea:	d3a3      	bcc.n	800c934 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800c9ec:	69fb      	ldr	r3, [r7, #28]
 800c9ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9f2:	69db      	ldr	r3, [r3, #28]
 800c9f4:	69fa      	ldr	r2, [r7, #28]
 800c9f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c9fa:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800c9fe:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d016      	beq.n	800ca36 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800ca08:	69fb      	ldr	r3, [r7, #28]
 800ca0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ca12:	69fa      	ldr	r2, [r7, #28]
 800ca14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ca18:	f043 030b 	orr.w	r3, r3, #11
 800ca1c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800ca20:	69fb      	ldr	r3, [r7, #28]
 800ca22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca28:	69fa      	ldr	r2, [r7, #28]
 800ca2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ca2e:	f043 030b 	orr.w	r3, r3, #11
 800ca32:	6453      	str	r3, [r2, #68]	; 0x44
 800ca34:	e015      	b.n	800ca62 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800ca36:	69fb      	ldr	r3, [r7, #28]
 800ca38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca3c:	695b      	ldr	r3, [r3, #20]
 800ca3e:	69fa      	ldr	r2, [r7, #28]
 800ca40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ca44:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ca48:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800ca4c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800ca4e:	69fb      	ldr	r3, [r7, #28]
 800ca50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca54:	691b      	ldr	r3, [r3, #16]
 800ca56:	69fa      	ldr	r2, [r7, #28]
 800ca58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ca5c:	f043 030b 	orr.w	r3, r3, #11
 800ca60:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800ca62:	69fb      	ldr	r3, [r7, #28]
 800ca64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	69fa      	ldr	r2, [r7, #28]
 800ca6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ca70:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ca74:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	6818      	ldr	r0, [r3, #0]
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	691b      	ldr	r3, [r3, #16]
 800ca7e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800ca86:	461a      	mov	r2, r3
 800ca88:	f004 f87a 	bl	8010b80 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	695a      	ldr	r2, [r3, #20]
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800ca9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	4618      	mov	r0, r3
 800caa2:	f003 ffa8 	bl	80109f6 <USB_ReadInterrupts>
 800caa6:	4603      	mov	r3, r0
 800caa8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800caac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cab0:	d124      	bne.n	800cafc <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	4618      	mov	r0, r3
 800cab8:	f004 f83e 	bl	8010b38 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	4618      	mov	r0, r3
 800cac2:	f003 f8de 	bl	800fc82 <USB_GetDevSpeed>
 800cac6:	4603      	mov	r3, r0
 800cac8:	461a      	mov	r2, r3
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681c      	ldr	r4, [r3, #0]
 800cad2:	f001 f951 	bl	800dd78 <HAL_RCC_GetHCLKFreq>
 800cad6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800cadc:	b2db      	uxtb	r3, r3
 800cade:	461a      	mov	r2, r3
 800cae0:	4620      	mov	r0, r4
 800cae2:	f002 fe1b 	bl	800f71c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	f008 fe85 	bl	80157f6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	695a      	ldr	r2, [r3, #20]
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800cafa:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	4618      	mov	r0, r3
 800cb02:	f003 ff78 	bl	80109f6 <USB_ReadInterrupts>
 800cb06:	4603      	mov	r3, r0
 800cb08:	f003 0308 	and.w	r3, r3, #8
 800cb0c:	2b08      	cmp	r3, #8
 800cb0e:	d10a      	bne.n	800cb26 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800cb10:	6878      	ldr	r0, [r7, #4]
 800cb12:	f008 fe62 	bl	80157da <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	695a      	ldr	r2, [r3, #20]
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	f002 0208 	and.w	r2, r2, #8
 800cb24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	f003 ff63 	bl	80109f6 <USB_ReadInterrupts>
 800cb30:	4603      	mov	r3, r0
 800cb32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cb36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cb3a:	d10f      	bne.n	800cb5c <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800cb40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb42:	b2db      	uxtb	r3, r3
 800cb44:	4619      	mov	r1, r3
 800cb46:	6878      	ldr	r0, [r7, #4]
 800cb48:	f008 fec4 	bl	80158d4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	695a      	ldr	r2, [r3, #20]
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800cb5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	4618      	mov	r0, r3
 800cb62:	f003 ff48 	bl	80109f6 <USB_ReadInterrupts>
 800cb66:	4603      	mov	r3, r0
 800cb68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cb6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cb70:	d10f      	bne.n	800cb92 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800cb72:	2300      	movs	r3, #0
 800cb74:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800cb76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb78:	b2db      	uxtb	r3, r3
 800cb7a:	4619      	mov	r1, r3
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	f008 fe97 	bl	80158b0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	695a      	ldr	r2, [r3, #20]
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800cb90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	4618      	mov	r0, r3
 800cb98:	f003 ff2d 	bl	80109f6 <USB_ReadInterrupts>
 800cb9c:	4603      	mov	r3, r0
 800cb9e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cba2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cba6:	d10a      	bne.n	800cbbe <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800cba8:	6878      	ldr	r0, [r7, #4]
 800cbaa:	f008 fea5 	bl	80158f8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	695a      	ldr	r2, [r3, #20]
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800cbbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	f003 ff17 	bl	80109f6 <USB_ReadInterrupts>
 800cbc8:	4603      	mov	r3, r0
 800cbca:	f003 0304 	and.w	r3, r3, #4
 800cbce:	2b04      	cmp	r3, #4
 800cbd0:	d115      	bne.n	800cbfe <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	685b      	ldr	r3, [r3, #4]
 800cbd8:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800cbda:	69bb      	ldr	r3, [r7, #24]
 800cbdc:	f003 0304 	and.w	r3, r3, #4
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d002      	beq.n	800cbea <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800cbe4:	6878      	ldr	r0, [r7, #4]
 800cbe6:	f008 fe95 	bl	8015914 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	6859      	ldr	r1, [r3, #4]
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	69ba      	ldr	r2, [r7, #24]
 800cbf6:	430a      	orrs	r2, r1
 800cbf8:	605a      	str	r2, [r3, #4]
 800cbfa:	e000      	b.n	800cbfe <HAL_PCD_IRQHandler+0x75e>
      return;
 800cbfc:	bf00      	nop
    }
  }
}
 800cbfe:	3734      	adds	r7, #52	; 0x34
 800cc00:	46bd      	mov	sp, r7
 800cc02:	bd90      	pop	{r4, r7, pc}

0800cc04 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b082      	sub	sp, #8
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
 800cc0c:	460b      	mov	r3, r1
 800cc0e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800cc16:	2b01      	cmp	r3, #1
 800cc18:	d101      	bne.n	800cc1e <HAL_PCD_SetAddress+0x1a>
 800cc1a:	2302      	movs	r3, #2
 800cc1c:	e013      	b.n	800cc46 <HAL_PCD_SetAddress+0x42>
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	2201      	movs	r2, #1
 800cc22:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	78fa      	ldrb	r2, [r7, #3]
 800cc2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	78fa      	ldrb	r2, [r7, #3]
 800cc34:	4611      	mov	r1, r2
 800cc36:	4618      	mov	r0, r3
 800cc38:	f003 fe75 	bl	8010926 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2200      	movs	r2, #0
 800cc40:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800cc44:	2300      	movs	r3, #0
}
 800cc46:	4618      	mov	r0, r3
 800cc48:	3708      	adds	r7, #8
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bd80      	pop	{r7, pc}

0800cc4e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800cc4e:	b580      	push	{r7, lr}
 800cc50:	b084      	sub	sp, #16
 800cc52:	af00      	add	r7, sp, #0
 800cc54:	6078      	str	r0, [r7, #4]
 800cc56:	4608      	mov	r0, r1
 800cc58:	4611      	mov	r1, r2
 800cc5a:	461a      	mov	r2, r3
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	70fb      	strb	r3, [r7, #3]
 800cc60:	460b      	mov	r3, r1
 800cc62:	803b      	strh	r3, [r7, #0]
 800cc64:	4613      	mov	r3, r2
 800cc66:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800cc68:	2300      	movs	r3, #0
 800cc6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800cc6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	da0f      	bge.n	800cc94 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cc74:	78fb      	ldrb	r3, [r7, #3]
 800cc76:	f003 020f 	and.w	r2, r3, #15
 800cc7a:	4613      	mov	r3, r2
 800cc7c:	00db      	lsls	r3, r3, #3
 800cc7e:	1a9b      	subs	r3, r3, r2
 800cc80:	009b      	lsls	r3, r3, #2
 800cc82:	3338      	adds	r3, #56	; 0x38
 800cc84:	687a      	ldr	r2, [r7, #4]
 800cc86:	4413      	add	r3, r2
 800cc88:	3304      	adds	r3, #4
 800cc8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	2201      	movs	r2, #1
 800cc90:	705a      	strb	r2, [r3, #1]
 800cc92:	e00f      	b.n	800ccb4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cc94:	78fb      	ldrb	r3, [r7, #3]
 800cc96:	f003 020f 	and.w	r2, r3, #15
 800cc9a:	4613      	mov	r3, r2
 800cc9c:	00db      	lsls	r3, r3, #3
 800cc9e:	1a9b      	subs	r3, r3, r2
 800cca0:	009b      	lsls	r3, r3, #2
 800cca2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800cca6:	687a      	ldr	r2, [r7, #4]
 800cca8:	4413      	add	r3, r2
 800ccaa:	3304      	adds	r3, #4
 800ccac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800ccb4:	78fb      	ldrb	r3, [r7, #3]
 800ccb6:	f003 030f 	and.w	r3, r3, #15
 800ccba:	b2da      	uxtb	r2, r3
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800ccc0:	883a      	ldrh	r2, [r7, #0]
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	78ba      	ldrb	r2, [r7, #2]
 800ccca:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	785b      	ldrb	r3, [r3, #1]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d004      	beq.n	800ccde <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	781b      	ldrb	r3, [r3, #0]
 800ccd8:	b29a      	uxth	r2, r3
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800ccde:	78bb      	ldrb	r3, [r7, #2]
 800cce0:	2b02      	cmp	r3, #2
 800cce2:	d102      	bne.n	800ccea <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	2200      	movs	r2, #0
 800cce8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ccf0:	2b01      	cmp	r3, #1
 800ccf2:	d101      	bne.n	800ccf8 <HAL_PCD_EP_Open+0xaa>
 800ccf4:	2302      	movs	r3, #2
 800ccf6:	e00e      	b.n	800cd16 <HAL_PCD_EP_Open+0xc8>
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	2201      	movs	r2, #1
 800ccfc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	68f9      	ldr	r1, [r7, #12]
 800cd06:	4618      	mov	r0, r3
 800cd08:	f002 ffe0 	bl	800fccc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2200      	movs	r2, #0
 800cd10:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800cd14:	7afb      	ldrb	r3, [r7, #11]
}
 800cd16:	4618      	mov	r0, r3
 800cd18:	3710      	adds	r7, #16
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	bd80      	pop	{r7, pc}

0800cd1e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cd1e:	b580      	push	{r7, lr}
 800cd20:	b084      	sub	sp, #16
 800cd22:	af00      	add	r7, sp, #0
 800cd24:	6078      	str	r0, [r7, #4]
 800cd26:	460b      	mov	r3, r1
 800cd28:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800cd2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	da0f      	bge.n	800cd52 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cd32:	78fb      	ldrb	r3, [r7, #3]
 800cd34:	f003 020f 	and.w	r2, r3, #15
 800cd38:	4613      	mov	r3, r2
 800cd3a:	00db      	lsls	r3, r3, #3
 800cd3c:	1a9b      	subs	r3, r3, r2
 800cd3e:	009b      	lsls	r3, r3, #2
 800cd40:	3338      	adds	r3, #56	; 0x38
 800cd42:	687a      	ldr	r2, [r7, #4]
 800cd44:	4413      	add	r3, r2
 800cd46:	3304      	adds	r3, #4
 800cd48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	2201      	movs	r2, #1
 800cd4e:	705a      	strb	r2, [r3, #1]
 800cd50:	e00f      	b.n	800cd72 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cd52:	78fb      	ldrb	r3, [r7, #3]
 800cd54:	f003 020f 	and.w	r2, r3, #15
 800cd58:	4613      	mov	r3, r2
 800cd5a:	00db      	lsls	r3, r3, #3
 800cd5c:	1a9b      	subs	r3, r3, r2
 800cd5e:	009b      	lsls	r3, r3, #2
 800cd60:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800cd64:	687a      	ldr	r2, [r7, #4]
 800cd66:	4413      	add	r3, r2
 800cd68:	3304      	adds	r3, #4
 800cd6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	2200      	movs	r2, #0
 800cd70:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800cd72:	78fb      	ldrb	r3, [r7, #3]
 800cd74:	f003 030f 	and.w	r3, r3, #15
 800cd78:	b2da      	uxtb	r2, r3
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800cd84:	2b01      	cmp	r3, #1
 800cd86:	d101      	bne.n	800cd8c <HAL_PCD_EP_Close+0x6e>
 800cd88:	2302      	movs	r3, #2
 800cd8a:	e00e      	b.n	800cdaa <HAL_PCD_EP_Close+0x8c>
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2201      	movs	r2, #1
 800cd90:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	68f9      	ldr	r1, [r7, #12]
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	f003 f81e 	bl	800fddc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	2200      	movs	r2, #0
 800cda4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800cda8:	2300      	movs	r3, #0
}
 800cdaa:	4618      	mov	r0, r3
 800cdac:	3710      	adds	r7, #16
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	bd80      	pop	{r7, pc}

0800cdb2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800cdb2:	b580      	push	{r7, lr}
 800cdb4:	b086      	sub	sp, #24
 800cdb6:	af00      	add	r7, sp, #0
 800cdb8:	60f8      	str	r0, [r7, #12]
 800cdba:	607a      	str	r2, [r7, #4]
 800cdbc:	603b      	str	r3, [r7, #0]
 800cdbe:	460b      	mov	r3, r1
 800cdc0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cdc2:	7afb      	ldrb	r3, [r7, #11]
 800cdc4:	f003 020f 	and.w	r2, r3, #15
 800cdc8:	4613      	mov	r3, r2
 800cdca:	00db      	lsls	r3, r3, #3
 800cdcc:	1a9b      	subs	r3, r3, r2
 800cdce:	009b      	lsls	r3, r3, #2
 800cdd0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800cdd4:	68fa      	ldr	r2, [r7, #12]
 800cdd6:	4413      	add	r3, r2
 800cdd8:	3304      	adds	r3, #4
 800cdda:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800cddc:	697b      	ldr	r3, [r7, #20]
 800cdde:	687a      	ldr	r2, [r7, #4]
 800cde0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800cde2:	697b      	ldr	r3, [r7, #20]
 800cde4:	683a      	ldr	r2, [r7, #0]
 800cde6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800cde8:	697b      	ldr	r3, [r7, #20]
 800cdea:	2200      	movs	r2, #0
 800cdec:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800cdee:	697b      	ldr	r3, [r7, #20]
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cdf4:	7afb      	ldrb	r3, [r7, #11]
 800cdf6:	f003 030f 	and.w	r3, r3, #15
 800cdfa:	b2da      	uxtb	r2, r3
 800cdfc:	697b      	ldr	r3, [r7, #20]
 800cdfe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	691b      	ldr	r3, [r3, #16]
 800ce04:	2b01      	cmp	r3, #1
 800ce06:	d102      	bne.n	800ce0e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800ce08:	687a      	ldr	r2, [r7, #4]
 800ce0a:	697b      	ldr	r3, [r7, #20]
 800ce0c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ce0e:	7afb      	ldrb	r3, [r7, #11]
 800ce10:	f003 030f 	and.w	r3, r3, #15
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d109      	bne.n	800ce2c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	6818      	ldr	r0, [r3, #0]
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	691b      	ldr	r3, [r3, #16]
 800ce20:	b2db      	uxtb	r3, r3
 800ce22:	461a      	mov	r2, r3
 800ce24:	6979      	ldr	r1, [r7, #20]
 800ce26:	f003 faf9 	bl	801041c <USB_EP0StartXfer>
 800ce2a:	e008      	b.n	800ce3e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	6818      	ldr	r0, [r3, #0]
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	691b      	ldr	r3, [r3, #16]
 800ce34:	b2db      	uxtb	r3, r3
 800ce36:	461a      	mov	r2, r3
 800ce38:	6979      	ldr	r1, [r7, #20]
 800ce3a:	f003 f8ab 	bl	800ff94 <USB_EPStartXfer>
  }

  return HAL_OK;
 800ce3e:	2300      	movs	r3, #0
}
 800ce40:	4618      	mov	r0, r3
 800ce42:	3718      	adds	r7, #24
 800ce44:	46bd      	mov	sp, r7
 800ce46:	bd80      	pop	{r7, pc}

0800ce48 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ce48:	b480      	push	{r7}
 800ce4a:	b083      	sub	sp, #12
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
 800ce50:	460b      	mov	r3, r1
 800ce52:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800ce54:	78fb      	ldrb	r3, [r7, #3]
 800ce56:	f003 020f 	and.w	r2, r3, #15
 800ce5a:	6879      	ldr	r1, [r7, #4]
 800ce5c:	4613      	mov	r3, r2
 800ce5e:	00db      	lsls	r3, r3, #3
 800ce60:	1a9b      	subs	r3, r3, r2
 800ce62:	009b      	lsls	r3, r3, #2
 800ce64:	440b      	add	r3, r1
 800ce66:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800ce6a:	681b      	ldr	r3, [r3, #0]
}
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	370c      	adds	r7, #12
 800ce70:	46bd      	mov	sp, r7
 800ce72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce76:	4770      	bx	lr

0800ce78 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b086      	sub	sp, #24
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	60f8      	str	r0, [r7, #12]
 800ce80:	607a      	str	r2, [r7, #4]
 800ce82:	603b      	str	r3, [r7, #0]
 800ce84:	460b      	mov	r3, r1
 800ce86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ce88:	7afb      	ldrb	r3, [r7, #11]
 800ce8a:	f003 020f 	and.w	r2, r3, #15
 800ce8e:	4613      	mov	r3, r2
 800ce90:	00db      	lsls	r3, r3, #3
 800ce92:	1a9b      	subs	r3, r3, r2
 800ce94:	009b      	lsls	r3, r3, #2
 800ce96:	3338      	adds	r3, #56	; 0x38
 800ce98:	68fa      	ldr	r2, [r7, #12]
 800ce9a:	4413      	add	r3, r2
 800ce9c:	3304      	adds	r3, #4
 800ce9e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800cea0:	697b      	ldr	r3, [r7, #20]
 800cea2:	687a      	ldr	r2, [r7, #4]
 800cea4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800cea6:	697b      	ldr	r3, [r7, #20]
 800cea8:	683a      	ldr	r2, [r7, #0]
 800ceaa:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800ceac:	697b      	ldr	r3, [r7, #20]
 800ceae:	2200      	movs	r2, #0
 800ceb0:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800ceb2:	697b      	ldr	r3, [r7, #20]
 800ceb4:	2201      	movs	r2, #1
 800ceb6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ceb8:	7afb      	ldrb	r3, [r7, #11]
 800ceba:	f003 030f 	and.w	r3, r3, #15
 800cebe:	b2da      	uxtb	r2, r3
 800cec0:	697b      	ldr	r3, [r7, #20]
 800cec2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	691b      	ldr	r3, [r3, #16]
 800cec8:	2b01      	cmp	r3, #1
 800ceca:	d102      	bne.n	800ced2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800cecc:	687a      	ldr	r2, [r7, #4]
 800cece:	697b      	ldr	r3, [r7, #20]
 800ced0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ced2:	7afb      	ldrb	r3, [r7, #11]
 800ced4:	f003 030f 	and.w	r3, r3, #15
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d109      	bne.n	800cef0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	6818      	ldr	r0, [r3, #0]
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	691b      	ldr	r3, [r3, #16]
 800cee4:	b2db      	uxtb	r3, r3
 800cee6:	461a      	mov	r2, r3
 800cee8:	6979      	ldr	r1, [r7, #20]
 800ceea:	f003 fa97 	bl	801041c <USB_EP0StartXfer>
 800ceee:	e008      	b.n	800cf02 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	6818      	ldr	r0, [r3, #0]
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	691b      	ldr	r3, [r3, #16]
 800cef8:	b2db      	uxtb	r3, r3
 800cefa:	461a      	mov	r2, r3
 800cefc:	6979      	ldr	r1, [r7, #20]
 800cefe:	f003 f849 	bl	800ff94 <USB_EPStartXfer>
  }

  return HAL_OK;
 800cf02:	2300      	movs	r3, #0
}
 800cf04:	4618      	mov	r0, r3
 800cf06:	3718      	adds	r7, #24
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	bd80      	pop	{r7, pc}

0800cf0c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b084      	sub	sp, #16
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
 800cf14:	460b      	mov	r3, r1
 800cf16:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800cf18:	78fb      	ldrb	r3, [r7, #3]
 800cf1a:	f003 020f 	and.w	r2, r3, #15
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	685b      	ldr	r3, [r3, #4]
 800cf22:	429a      	cmp	r2, r3
 800cf24:	d901      	bls.n	800cf2a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800cf26:	2301      	movs	r3, #1
 800cf28:	e050      	b.n	800cfcc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800cf2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	da0f      	bge.n	800cf52 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cf32:	78fb      	ldrb	r3, [r7, #3]
 800cf34:	f003 020f 	and.w	r2, r3, #15
 800cf38:	4613      	mov	r3, r2
 800cf3a:	00db      	lsls	r3, r3, #3
 800cf3c:	1a9b      	subs	r3, r3, r2
 800cf3e:	009b      	lsls	r3, r3, #2
 800cf40:	3338      	adds	r3, #56	; 0x38
 800cf42:	687a      	ldr	r2, [r7, #4]
 800cf44:	4413      	add	r3, r2
 800cf46:	3304      	adds	r3, #4
 800cf48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	2201      	movs	r2, #1
 800cf4e:	705a      	strb	r2, [r3, #1]
 800cf50:	e00d      	b.n	800cf6e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800cf52:	78fa      	ldrb	r2, [r7, #3]
 800cf54:	4613      	mov	r3, r2
 800cf56:	00db      	lsls	r3, r3, #3
 800cf58:	1a9b      	subs	r3, r3, r2
 800cf5a:	009b      	lsls	r3, r3, #2
 800cf5c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800cf60:	687a      	ldr	r2, [r7, #4]
 800cf62:	4413      	add	r3, r2
 800cf64:	3304      	adds	r3, #4
 800cf66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	2201      	movs	r2, #1
 800cf72:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cf74:	78fb      	ldrb	r3, [r7, #3]
 800cf76:	f003 030f 	and.w	r3, r3, #15
 800cf7a:	b2da      	uxtb	r2, r3
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800cf86:	2b01      	cmp	r3, #1
 800cf88:	d101      	bne.n	800cf8e <HAL_PCD_EP_SetStall+0x82>
 800cf8a:	2302      	movs	r3, #2
 800cf8c:	e01e      	b.n	800cfcc <HAL_PCD_EP_SetStall+0xc0>
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	2201      	movs	r2, #1
 800cf92:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	68f9      	ldr	r1, [r7, #12]
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	f003 fbee 	bl	801077e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800cfa2:	78fb      	ldrb	r3, [r7, #3]
 800cfa4:	f003 030f 	and.w	r3, r3, #15
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d10a      	bne.n	800cfc2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	6818      	ldr	r0, [r3, #0]
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	691b      	ldr	r3, [r3, #16]
 800cfb4:	b2d9      	uxtb	r1, r3
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800cfbc:	461a      	mov	r2, r3
 800cfbe:	f003 fddf 	bl	8010b80 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800cfca:	2300      	movs	r3, #0
}
 800cfcc:	4618      	mov	r0, r3
 800cfce:	3710      	adds	r7, #16
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	bd80      	pop	{r7, pc}

0800cfd4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b084      	sub	sp, #16
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
 800cfdc:	460b      	mov	r3, r1
 800cfde:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800cfe0:	78fb      	ldrb	r3, [r7, #3]
 800cfe2:	f003 020f 	and.w	r2, r3, #15
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	685b      	ldr	r3, [r3, #4]
 800cfea:	429a      	cmp	r2, r3
 800cfec:	d901      	bls.n	800cff2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800cfee:	2301      	movs	r3, #1
 800cff0:	e042      	b.n	800d078 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800cff2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	da0f      	bge.n	800d01a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cffa:	78fb      	ldrb	r3, [r7, #3]
 800cffc:	f003 020f 	and.w	r2, r3, #15
 800d000:	4613      	mov	r3, r2
 800d002:	00db      	lsls	r3, r3, #3
 800d004:	1a9b      	subs	r3, r3, r2
 800d006:	009b      	lsls	r3, r3, #2
 800d008:	3338      	adds	r3, #56	; 0x38
 800d00a:	687a      	ldr	r2, [r7, #4]
 800d00c:	4413      	add	r3, r2
 800d00e:	3304      	adds	r3, #4
 800d010:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	2201      	movs	r2, #1
 800d016:	705a      	strb	r2, [r3, #1]
 800d018:	e00f      	b.n	800d03a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d01a:	78fb      	ldrb	r3, [r7, #3]
 800d01c:	f003 020f 	and.w	r2, r3, #15
 800d020:	4613      	mov	r3, r2
 800d022:	00db      	lsls	r3, r3, #3
 800d024:	1a9b      	subs	r3, r3, r2
 800d026:	009b      	lsls	r3, r3, #2
 800d028:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d02c:	687a      	ldr	r2, [r7, #4]
 800d02e:	4413      	add	r3, r2
 800d030:	3304      	adds	r3, #4
 800d032:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	2200      	movs	r2, #0
 800d038:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	2200      	movs	r2, #0
 800d03e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d040:	78fb      	ldrb	r3, [r7, #3]
 800d042:	f003 030f 	and.w	r3, r3, #15
 800d046:	b2da      	uxtb	r2, r3
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d052:	2b01      	cmp	r3, #1
 800d054:	d101      	bne.n	800d05a <HAL_PCD_EP_ClrStall+0x86>
 800d056:	2302      	movs	r3, #2
 800d058:	e00e      	b.n	800d078 <HAL_PCD_EP_ClrStall+0xa4>
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	2201      	movs	r2, #1
 800d05e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	68f9      	ldr	r1, [r7, #12]
 800d068:	4618      	mov	r0, r3
 800d06a:	f003 fbf6 	bl	801085a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	2200      	movs	r2, #0
 800d072:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800d076:	2300      	movs	r3, #0
}
 800d078:	4618      	mov	r0, r3
 800d07a:	3710      	adds	r7, #16
 800d07c:	46bd      	mov	sp, r7
 800d07e:	bd80      	pop	{r7, pc}

0800d080 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b08a      	sub	sp, #40	; 0x28
 800d084:	af02      	add	r7, sp, #8
 800d086:	6078      	str	r0, [r7, #4]
 800d088:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d090:	697b      	ldr	r3, [r7, #20]
 800d092:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800d094:	683a      	ldr	r2, [r7, #0]
 800d096:	4613      	mov	r3, r2
 800d098:	00db      	lsls	r3, r3, #3
 800d09a:	1a9b      	subs	r3, r3, r2
 800d09c:	009b      	lsls	r3, r3, #2
 800d09e:	3338      	adds	r3, #56	; 0x38
 800d0a0:	687a      	ldr	r2, [r7, #4]
 800d0a2:	4413      	add	r3, r2
 800d0a4:	3304      	adds	r3, #4
 800d0a6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	699a      	ldr	r2, [r3, #24]
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	695b      	ldr	r3, [r3, #20]
 800d0b0:	429a      	cmp	r2, r3
 800d0b2:	d901      	bls.n	800d0b8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800d0b4:	2301      	movs	r3, #1
 800d0b6:	e06c      	b.n	800d192 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	695a      	ldr	r2, [r3, #20]
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	699b      	ldr	r3, [r3, #24]
 800d0c0:	1ad3      	subs	r3, r2, r3
 800d0c2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	689b      	ldr	r3, [r3, #8]
 800d0c8:	69fa      	ldr	r2, [r7, #28]
 800d0ca:	429a      	cmp	r2, r3
 800d0cc:	d902      	bls.n	800d0d4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	689b      	ldr	r3, [r3, #8]
 800d0d2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800d0d4:	69fb      	ldr	r3, [r7, #28]
 800d0d6:	3303      	adds	r3, #3
 800d0d8:	089b      	lsrs	r3, r3, #2
 800d0da:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d0dc:	e02b      	b.n	800d136 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	695a      	ldr	r2, [r3, #20]
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	699b      	ldr	r3, [r3, #24]
 800d0e6:	1ad3      	subs	r3, r2, r3
 800d0e8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	689b      	ldr	r3, [r3, #8]
 800d0ee:	69fa      	ldr	r2, [r7, #28]
 800d0f0:	429a      	cmp	r2, r3
 800d0f2:	d902      	bls.n	800d0fa <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	689b      	ldr	r3, [r3, #8]
 800d0f8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800d0fa:	69fb      	ldr	r3, [r7, #28]
 800d0fc:	3303      	adds	r3, #3
 800d0fe:	089b      	lsrs	r3, r3, #2
 800d100:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	68d9      	ldr	r1, [r3, #12]
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	b2da      	uxtb	r2, r3
 800d10a:	69fb      	ldr	r3, [r7, #28]
 800d10c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800d112:	b2db      	uxtb	r3, r3
 800d114:	9300      	str	r3, [sp, #0]
 800d116:	4603      	mov	r3, r0
 800d118:	6978      	ldr	r0, [r7, #20]
 800d11a:	f003 fad2 	bl	80106c2 <USB_WritePacket>

    ep->xfer_buff  += len;
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	68da      	ldr	r2, [r3, #12]
 800d122:	69fb      	ldr	r3, [r7, #28]
 800d124:	441a      	add	r2, r3
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	699a      	ldr	r2, [r3, #24]
 800d12e:	69fb      	ldr	r3, [r7, #28]
 800d130:	441a      	add	r2, r3
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	015a      	lsls	r2, r3, #5
 800d13a:	693b      	ldr	r3, [r7, #16]
 800d13c:	4413      	add	r3, r2
 800d13e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d142:	699b      	ldr	r3, [r3, #24]
 800d144:	b29b      	uxth	r3, r3
 800d146:	69ba      	ldr	r2, [r7, #24]
 800d148:	429a      	cmp	r2, r3
 800d14a:	d809      	bhi.n	800d160 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	699a      	ldr	r2, [r3, #24]
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d154:	429a      	cmp	r2, r3
 800d156:	d203      	bcs.n	800d160 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	695b      	ldr	r3, [r3, #20]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d1be      	bne.n	800d0de <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	695a      	ldr	r2, [r3, #20]
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	699b      	ldr	r3, [r3, #24]
 800d168:	429a      	cmp	r2, r3
 800d16a:	d811      	bhi.n	800d190 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800d16c:	683b      	ldr	r3, [r7, #0]
 800d16e:	f003 030f 	and.w	r3, r3, #15
 800d172:	2201      	movs	r2, #1
 800d174:	fa02 f303 	lsl.w	r3, r2, r3
 800d178:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800d17a:	693b      	ldr	r3, [r7, #16]
 800d17c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d180:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d182:	68bb      	ldr	r3, [r7, #8]
 800d184:	43db      	mvns	r3, r3
 800d186:	6939      	ldr	r1, [r7, #16]
 800d188:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d18c:	4013      	ands	r3, r2
 800d18e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800d190:	2300      	movs	r3, #0
}
 800d192:	4618      	mov	r0, r3
 800d194:	3720      	adds	r7, #32
 800d196:	46bd      	mov	sp, r7
 800d198:	bd80      	pop	{r7, pc}
	...

0800d19c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b086      	sub	sp, #24
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
 800d1a4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1ac:	697b      	ldr	r3, [r7, #20]
 800d1ae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d1b0:	697b      	ldr	r3, [r7, #20]
 800d1b2:	333c      	adds	r3, #60	; 0x3c
 800d1b4:	3304      	adds	r3, #4
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d1ba:	683b      	ldr	r3, [r7, #0]
 800d1bc:	015a      	lsls	r2, r3, #5
 800d1be:	693b      	ldr	r3, [r7, #16]
 800d1c0:	4413      	add	r3, r2
 800d1c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1c6:	689b      	ldr	r3, [r3, #8]
 800d1c8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	691b      	ldr	r3, [r3, #16]
 800d1ce:	2b01      	cmp	r3, #1
 800d1d0:	f040 80a0 	bne.w	800d314 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800d1d4:	68bb      	ldr	r3, [r7, #8]
 800d1d6:	f003 0308 	and.w	r3, r3, #8
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d015      	beq.n	800d20a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	4a72      	ldr	r2, [pc, #456]	; (800d3ac <PCD_EP_OutXfrComplete_int+0x210>)
 800d1e2:	4293      	cmp	r3, r2
 800d1e4:	f240 80dd 	bls.w	800d3a2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d1e8:	68bb      	ldr	r3, [r7, #8]
 800d1ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	f000 80d7 	beq.w	800d3a2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	015a      	lsls	r2, r3, #5
 800d1f8:	693b      	ldr	r3, [r7, #16]
 800d1fa:	4413      	add	r3, r2
 800d1fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d200:	461a      	mov	r2, r3
 800d202:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d206:	6093      	str	r3, [r2, #8]
 800d208:	e0cb      	b.n	800d3a2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800d20a:	68bb      	ldr	r3, [r7, #8]
 800d20c:	f003 0320 	and.w	r3, r3, #32
 800d210:	2b00      	cmp	r3, #0
 800d212:	d009      	beq.n	800d228 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d214:	683b      	ldr	r3, [r7, #0]
 800d216:	015a      	lsls	r2, r3, #5
 800d218:	693b      	ldr	r3, [r7, #16]
 800d21a:	4413      	add	r3, r2
 800d21c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d220:	461a      	mov	r2, r3
 800d222:	2320      	movs	r3, #32
 800d224:	6093      	str	r3, [r2, #8]
 800d226:	e0bc      	b.n	800d3a2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800d228:	68bb      	ldr	r3, [r7, #8]
 800d22a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d22e:	2b00      	cmp	r3, #0
 800d230:	f040 80b7 	bne.w	800d3a2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	4a5d      	ldr	r2, [pc, #372]	; (800d3ac <PCD_EP_OutXfrComplete_int+0x210>)
 800d238:	4293      	cmp	r3, r2
 800d23a:	d90f      	bls.n	800d25c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d23c:	68bb      	ldr	r3, [r7, #8]
 800d23e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d242:	2b00      	cmp	r3, #0
 800d244:	d00a      	beq.n	800d25c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d246:	683b      	ldr	r3, [r7, #0]
 800d248:	015a      	lsls	r2, r3, #5
 800d24a:	693b      	ldr	r3, [r7, #16]
 800d24c:	4413      	add	r3, r2
 800d24e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d252:	461a      	mov	r2, r3
 800d254:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d258:	6093      	str	r3, [r2, #8]
 800d25a:	e0a2      	b.n	800d3a2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800d25c:	6879      	ldr	r1, [r7, #4]
 800d25e:	683a      	ldr	r2, [r7, #0]
 800d260:	4613      	mov	r3, r2
 800d262:	00db      	lsls	r3, r3, #3
 800d264:	1a9b      	subs	r3, r3, r2
 800d266:	009b      	lsls	r3, r3, #2
 800d268:	440b      	add	r3, r1
 800d26a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800d26e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	0159      	lsls	r1, r3, #5
 800d274:	693b      	ldr	r3, [r7, #16]
 800d276:	440b      	add	r3, r1
 800d278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d27c:	691b      	ldr	r3, [r3, #16]
 800d27e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800d282:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800d284:	6878      	ldr	r0, [r7, #4]
 800d286:	683a      	ldr	r2, [r7, #0]
 800d288:	4613      	mov	r3, r2
 800d28a:	00db      	lsls	r3, r3, #3
 800d28c:	1a9b      	subs	r3, r3, r2
 800d28e:	009b      	lsls	r3, r3, #2
 800d290:	4403      	add	r3, r0
 800d292:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800d296:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800d298:	6879      	ldr	r1, [r7, #4]
 800d29a:	683a      	ldr	r2, [r7, #0]
 800d29c:	4613      	mov	r3, r2
 800d29e:	00db      	lsls	r3, r3, #3
 800d2a0:	1a9b      	subs	r3, r3, r2
 800d2a2:	009b      	lsls	r3, r3, #2
 800d2a4:	440b      	add	r3, r1
 800d2a6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d2aa:	6819      	ldr	r1, [r3, #0]
 800d2ac:	6878      	ldr	r0, [r7, #4]
 800d2ae:	683a      	ldr	r2, [r7, #0]
 800d2b0:	4613      	mov	r3, r2
 800d2b2:	00db      	lsls	r3, r3, #3
 800d2b4:	1a9b      	subs	r3, r3, r2
 800d2b6:	009b      	lsls	r3, r3, #2
 800d2b8:	4403      	add	r3, r0
 800d2ba:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	4419      	add	r1, r3
 800d2c2:	6878      	ldr	r0, [r7, #4]
 800d2c4:	683a      	ldr	r2, [r7, #0]
 800d2c6:	4613      	mov	r3, r2
 800d2c8:	00db      	lsls	r3, r3, #3
 800d2ca:	1a9b      	subs	r3, r3, r2
 800d2cc:	009b      	lsls	r3, r3, #2
 800d2ce:	4403      	add	r3, r0
 800d2d0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d2d4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800d2d6:	683b      	ldr	r3, [r7, #0]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d114      	bne.n	800d306 <PCD_EP_OutXfrComplete_int+0x16a>
 800d2dc:	6879      	ldr	r1, [r7, #4]
 800d2de:	683a      	ldr	r2, [r7, #0]
 800d2e0:	4613      	mov	r3, r2
 800d2e2:	00db      	lsls	r3, r3, #3
 800d2e4:	1a9b      	subs	r3, r3, r2
 800d2e6:	009b      	lsls	r3, r3, #2
 800d2e8:	440b      	add	r3, r1
 800d2ea:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d108      	bne.n	800d306 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	6818      	ldr	r0, [r3, #0]
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d2fe:	461a      	mov	r2, r3
 800d300:	2101      	movs	r1, #1
 800d302:	f003 fc3d 	bl	8010b80 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	b2db      	uxtb	r3, r3
 800d30a:	4619      	mov	r1, r3
 800d30c:	6878      	ldr	r0, [r7, #4]
 800d30e:	f008 fa2f 	bl	8015770 <HAL_PCD_DataOutStageCallback>
 800d312:	e046      	b.n	800d3a2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	4a26      	ldr	r2, [pc, #152]	; (800d3b0 <PCD_EP_OutXfrComplete_int+0x214>)
 800d318:	4293      	cmp	r3, r2
 800d31a:	d124      	bne.n	800d366 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800d31c:	68bb      	ldr	r3, [r7, #8]
 800d31e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d322:	2b00      	cmp	r3, #0
 800d324:	d00a      	beq.n	800d33c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d326:	683b      	ldr	r3, [r7, #0]
 800d328:	015a      	lsls	r2, r3, #5
 800d32a:	693b      	ldr	r3, [r7, #16]
 800d32c:	4413      	add	r3, r2
 800d32e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d332:	461a      	mov	r2, r3
 800d334:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d338:	6093      	str	r3, [r2, #8]
 800d33a:	e032      	b.n	800d3a2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800d33c:	68bb      	ldr	r3, [r7, #8]
 800d33e:	f003 0320 	and.w	r3, r3, #32
 800d342:	2b00      	cmp	r3, #0
 800d344:	d008      	beq.n	800d358 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d346:	683b      	ldr	r3, [r7, #0]
 800d348:	015a      	lsls	r2, r3, #5
 800d34a:	693b      	ldr	r3, [r7, #16]
 800d34c:	4413      	add	r3, r2
 800d34e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d352:	461a      	mov	r2, r3
 800d354:	2320      	movs	r3, #32
 800d356:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d358:	683b      	ldr	r3, [r7, #0]
 800d35a:	b2db      	uxtb	r3, r3
 800d35c:	4619      	mov	r1, r3
 800d35e:	6878      	ldr	r0, [r7, #4]
 800d360:	f008 fa06 	bl	8015770 <HAL_PCD_DataOutStageCallback>
 800d364:	e01d      	b.n	800d3a2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800d366:	683b      	ldr	r3, [r7, #0]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d114      	bne.n	800d396 <PCD_EP_OutXfrComplete_int+0x1fa>
 800d36c:	6879      	ldr	r1, [r7, #4]
 800d36e:	683a      	ldr	r2, [r7, #0]
 800d370:	4613      	mov	r3, r2
 800d372:	00db      	lsls	r3, r3, #3
 800d374:	1a9b      	subs	r3, r3, r2
 800d376:	009b      	lsls	r3, r3, #2
 800d378:	440b      	add	r3, r1
 800d37a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d108      	bne.n	800d396 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	6818      	ldr	r0, [r3, #0]
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d38e:	461a      	mov	r2, r3
 800d390:	2100      	movs	r1, #0
 800d392:	f003 fbf5 	bl	8010b80 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d396:	683b      	ldr	r3, [r7, #0]
 800d398:	b2db      	uxtb	r3, r3
 800d39a:	4619      	mov	r1, r3
 800d39c:	6878      	ldr	r0, [r7, #4]
 800d39e:	f008 f9e7 	bl	8015770 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800d3a2:	2300      	movs	r3, #0
}
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	3718      	adds	r7, #24
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	bd80      	pop	{r7, pc}
 800d3ac:	4f54300a 	.word	0x4f54300a
 800d3b0:	4f54310a 	.word	0x4f54310a

0800d3b4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b086      	sub	sp, #24
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]
 800d3bc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d3c4:	697b      	ldr	r3, [r7, #20]
 800d3c6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d3c8:	697b      	ldr	r3, [r7, #20]
 800d3ca:	333c      	adds	r3, #60	; 0x3c
 800d3cc:	3304      	adds	r3, #4
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d3d2:	683b      	ldr	r3, [r7, #0]
 800d3d4:	015a      	lsls	r2, r3, #5
 800d3d6:	693b      	ldr	r3, [r7, #16]
 800d3d8:	4413      	add	r3, r2
 800d3da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3de:	689b      	ldr	r3, [r3, #8]
 800d3e0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	4a15      	ldr	r2, [pc, #84]	; (800d43c <PCD_EP_OutSetupPacket_int+0x88>)
 800d3e6:	4293      	cmp	r3, r2
 800d3e8:	d90e      	bls.n	800d408 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d3ea:	68bb      	ldr	r3, [r7, #8]
 800d3ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d009      	beq.n	800d408 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	015a      	lsls	r2, r3, #5
 800d3f8:	693b      	ldr	r3, [r7, #16]
 800d3fa:	4413      	add	r3, r2
 800d3fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d400:	461a      	mov	r2, r3
 800d402:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d406:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800d408:	6878      	ldr	r0, [r7, #4]
 800d40a:	f008 f99f 	bl	801574c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	4a0a      	ldr	r2, [pc, #40]	; (800d43c <PCD_EP_OutSetupPacket_int+0x88>)
 800d412:	4293      	cmp	r3, r2
 800d414:	d90c      	bls.n	800d430 <PCD_EP_OutSetupPacket_int+0x7c>
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	691b      	ldr	r3, [r3, #16]
 800d41a:	2b01      	cmp	r3, #1
 800d41c:	d108      	bne.n	800d430 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	6818      	ldr	r0, [r3, #0]
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d428:	461a      	mov	r2, r3
 800d42a:	2101      	movs	r1, #1
 800d42c:	f003 fba8 	bl	8010b80 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800d430:	2300      	movs	r3, #0
}
 800d432:	4618      	mov	r0, r3
 800d434:	3718      	adds	r7, #24
 800d436:	46bd      	mov	sp, r7
 800d438:	bd80      	pop	{r7, pc}
 800d43a:	bf00      	nop
 800d43c:	4f54300a 	.word	0x4f54300a

0800d440 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800d440:	b480      	push	{r7}
 800d442:	b085      	sub	sp, #20
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
 800d448:	460b      	mov	r3, r1
 800d44a:	70fb      	strb	r3, [r7, #3]
 800d44c:	4613      	mov	r3, r2
 800d44e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d456:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800d458:	78fb      	ldrb	r3, [r7, #3]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d107      	bne.n	800d46e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800d45e:	883b      	ldrh	r3, [r7, #0]
 800d460:	0419      	lsls	r1, r3, #16
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	68ba      	ldr	r2, [r7, #8]
 800d468:	430a      	orrs	r2, r1
 800d46a:	629a      	str	r2, [r3, #40]	; 0x28
 800d46c:	e028      	b.n	800d4c0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d474:	0c1b      	lsrs	r3, r3, #16
 800d476:	68ba      	ldr	r2, [r7, #8]
 800d478:	4413      	add	r3, r2
 800d47a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d47c:	2300      	movs	r3, #0
 800d47e:	73fb      	strb	r3, [r7, #15]
 800d480:	e00d      	b.n	800d49e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	681a      	ldr	r2, [r3, #0]
 800d486:	7bfb      	ldrb	r3, [r7, #15]
 800d488:	3340      	adds	r3, #64	; 0x40
 800d48a:	009b      	lsls	r3, r3, #2
 800d48c:	4413      	add	r3, r2
 800d48e:	685b      	ldr	r3, [r3, #4]
 800d490:	0c1b      	lsrs	r3, r3, #16
 800d492:	68ba      	ldr	r2, [r7, #8]
 800d494:	4413      	add	r3, r2
 800d496:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d498:	7bfb      	ldrb	r3, [r7, #15]
 800d49a:	3301      	adds	r3, #1
 800d49c:	73fb      	strb	r3, [r7, #15]
 800d49e:	7bfa      	ldrb	r2, [r7, #15]
 800d4a0:	78fb      	ldrb	r3, [r7, #3]
 800d4a2:	3b01      	subs	r3, #1
 800d4a4:	429a      	cmp	r2, r3
 800d4a6:	d3ec      	bcc.n	800d482 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800d4a8:	883b      	ldrh	r3, [r7, #0]
 800d4aa:	0418      	lsls	r0, r3, #16
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	6819      	ldr	r1, [r3, #0]
 800d4b0:	78fb      	ldrb	r3, [r7, #3]
 800d4b2:	3b01      	subs	r3, #1
 800d4b4:	68ba      	ldr	r2, [r7, #8]
 800d4b6:	4302      	orrs	r2, r0
 800d4b8:	3340      	adds	r3, #64	; 0x40
 800d4ba:	009b      	lsls	r3, r3, #2
 800d4bc:	440b      	add	r3, r1
 800d4be:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800d4c0:	2300      	movs	r3, #0
}
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	3714      	adds	r7, #20
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4cc:	4770      	bx	lr

0800d4ce <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800d4ce:	b480      	push	{r7}
 800d4d0:	b083      	sub	sp, #12
 800d4d2:	af00      	add	r7, sp, #0
 800d4d4:	6078      	str	r0, [r7, #4]
 800d4d6:	460b      	mov	r3, r1
 800d4d8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	887a      	ldrh	r2, [r7, #2]
 800d4e0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800d4e2:	2300      	movs	r3, #0
}
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	370c      	adds	r7, #12
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ee:	4770      	bx	lr

0800d4f0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d4f0:	b480      	push	{r7}
 800d4f2:	b083      	sub	sp, #12
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
 800d4f8:	460b      	mov	r3, r1
 800d4fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800d4fc:	bf00      	nop
 800d4fe:	370c      	adds	r7, #12
 800d500:	46bd      	mov	sp, r7
 800d502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d506:	4770      	bx	lr

0800d508 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d508:	b580      	push	{r7, lr}
 800d50a:	b086      	sub	sp, #24
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d101      	bne.n	800d51a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d516:	2301      	movs	r3, #1
 800d518:	e25b      	b.n	800d9d2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	f003 0301 	and.w	r3, r3, #1
 800d522:	2b00      	cmp	r3, #0
 800d524:	d075      	beq.n	800d612 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d526:	4ba3      	ldr	r3, [pc, #652]	; (800d7b4 <HAL_RCC_OscConfig+0x2ac>)
 800d528:	689b      	ldr	r3, [r3, #8]
 800d52a:	f003 030c 	and.w	r3, r3, #12
 800d52e:	2b04      	cmp	r3, #4
 800d530:	d00c      	beq.n	800d54c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d532:	4ba0      	ldr	r3, [pc, #640]	; (800d7b4 <HAL_RCC_OscConfig+0x2ac>)
 800d534:	689b      	ldr	r3, [r3, #8]
 800d536:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d53a:	2b08      	cmp	r3, #8
 800d53c:	d112      	bne.n	800d564 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d53e:	4b9d      	ldr	r3, [pc, #628]	; (800d7b4 <HAL_RCC_OscConfig+0x2ac>)
 800d540:	685b      	ldr	r3, [r3, #4]
 800d542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d546:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d54a:	d10b      	bne.n	800d564 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d54c:	4b99      	ldr	r3, [pc, #612]	; (800d7b4 <HAL_RCC_OscConfig+0x2ac>)
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d554:	2b00      	cmp	r3, #0
 800d556:	d05b      	beq.n	800d610 <HAL_RCC_OscConfig+0x108>
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	685b      	ldr	r3, [r3, #4]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d157      	bne.n	800d610 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800d560:	2301      	movs	r3, #1
 800d562:	e236      	b.n	800d9d2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	685b      	ldr	r3, [r3, #4]
 800d568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d56c:	d106      	bne.n	800d57c <HAL_RCC_OscConfig+0x74>
 800d56e:	4b91      	ldr	r3, [pc, #580]	; (800d7b4 <HAL_RCC_OscConfig+0x2ac>)
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	4a90      	ldr	r2, [pc, #576]	; (800d7b4 <HAL_RCC_OscConfig+0x2ac>)
 800d574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d578:	6013      	str	r3, [r2, #0]
 800d57a:	e01d      	b.n	800d5b8 <HAL_RCC_OscConfig+0xb0>
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	685b      	ldr	r3, [r3, #4]
 800d580:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d584:	d10c      	bne.n	800d5a0 <HAL_RCC_OscConfig+0x98>
 800d586:	4b8b      	ldr	r3, [pc, #556]	; (800d7b4 <HAL_RCC_OscConfig+0x2ac>)
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	4a8a      	ldr	r2, [pc, #552]	; (800d7b4 <HAL_RCC_OscConfig+0x2ac>)
 800d58c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d590:	6013      	str	r3, [r2, #0]
 800d592:	4b88      	ldr	r3, [pc, #544]	; (800d7b4 <HAL_RCC_OscConfig+0x2ac>)
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	4a87      	ldr	r2, [pc, #540]	; (800d7b4 <HAL_RCC_OscConfig+0x2ac>)
 800d598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d59c:	6013      	str	r3, [r2, #0]
 800d59e:	e00b      	b.n	800d5b8 <HAL_RCC_OscConfig+0xb0>
 800d5a0:	4b84      	ldr	r3, [pc, #528]	; (800d7b4 <HAL_RCC_OscConfig+0x2ac>)
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	4a83      	ldr	r2, [pc, #524]	; (800d7b4 <HAL_RCC_OscConfig+0x2ac>)
 800d5a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d5aa:	6013      	str	r3, [r2, #0]
 800d5ac:	4b81      	ldr	r3, [pc, #516]	; (800d7b4 <HAL_RCC_OscConfig+0x2ac>)
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	4a80      	ldr	r2, [pc, #512]	; (800d7b4 <HAL_RCC_OscConfig+0x2ac>)
 800d5b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d5b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	685b      	ldr	r3, [r3, #4]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d013      	beq.n	800d5e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d5c0:	f7fd ff60 	bl	800b484 <HAL_GetTick>
 800d5c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d5c6:	e008      	b.n	800d5da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d5c8:	f7fd ff5c 	bl	800b484 <HAL_GetTick>
 800d5cc:	4602      	mov	r2, r0
 800d5ce:	693b      	ldr	r3, [r7, #16]
 800d5d0:	1ad3      	subs	r3, r2, r3
 800d5d2:	2b64      	cmp	r3, #100	; 0x64
 800d5d4:	d901      	bls.n	800d5da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800d5d6:	2303      	movs	r3, #3
 800d5d8:	e1fb      	b.n	800d9d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d5da:	4b76      	ldr	r3, [pc, #472]	; (800d7b4 <HAL_RCC_OscConfig+0x2ac>)
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d0f0      	beq.n	800d5c8 <HAL_RCC_OscConfig+0xc0>
 800d5e6:	e014      	b.n	800d612 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d5e8:	f7fd ff4c 	bl	800b484 <HAL_GetTick>
 800d5ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d5ee:	e008      	b.n	800d602 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d5f0:	f7fd ff48 	bl	800b484 <HAL_GetTick>
 800d5f4:	4602      	mov	r2, r0
 800d5f6:	693b      	ldr	r3, [r7, #16]
 800d5f8:	1ad3      	subs	r3, r2, r3
 800d5fa:	2b64      	cmp	r3, #100	; 0x64
 800d5fc:	d901      	bls.n	800d602 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d5fe:	2303      	movs	r3, #3
 800d600:	e1e7      	b.n	800d9d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d602:	4b6c      	ldr	r3, [pc, #432]	; (800d7b4 <HAL_RCC_OscConfig+0x2ac>)
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d1f0      	bne.n	800d5f0 <HAL_RCC_OscConfig+0xe8>
 800d60e:	e000      	b.n	800d612 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d610:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	f003 0302 	and.w	r3, r3, #2
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d063      	beq.n	800d6e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d61e:	4b65      	ldr	r3, [pc, #404]	; (800d7b4 <HAL_RCC_OscConfig+0x2ac>)
 800d620:	689b      	ldr	r3, [r3, #8]
 800d622:	f003 030c 	and.w	r3, r3, #12
 800d626:	2b00      	cmp	r3, #0
 800d628:	d00b      	beq.n	800d642 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d62a:	4b62      	ldr	r3, [pc, #392]	; (800d7b4 <HAL_RCC_OscConfig+0x2ac>)
 800d62c:	689b      	ldr	r3, [r3, #8]
 800d62e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d632:	2b08      	cmp	r3, #8
 800d634:	d11c      	bne.n	800d670 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d636:	4b5f      	ldr	r3, [pc, #380]	; (800d7b4 <HAL_RCC_OscConfig+0x2ac>)
 800d638:	685b      	ldr	r3, [r3, #4]
 800d63a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d116      	bne.n	800d670 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d642:	4b5c      	ldr	r3, [pc, #368]	; (800d7b4 <HAL_RCC_OscConfig+0x2ac>)
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	f003 0302 	and.w	r3, r3, #2
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d005      	beq.n	800d65a <HAL_RCC_OscConfig+0x152>
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	68db      	ldr	r3, [r3, #12]
 800d652:	2b01      	cmp	r3, #1
 800d654:	d001      	beq.n	800d65a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800d656:	2301      	movs	r3, #1
 800d658:	e1bb      	b.n	800d9d2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d65a:	4b56      	ldr	r3, [pc, #344]	; (800d7b4 <HAL_RCC_OscConfig+0x2ac>)
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	691b      	ldr	r3, [r3, #16]
 800d666:	00db      	lsls	r3, r3, #3
 800d668:	4952      	ldr	r1, [pc, #328]	; (800d7b4 <HAL_RCC_OscConfig+0x2ac>)
 800d66a:	4313      	orrs	r3, r2
 800d66c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d66e:	e03a      	b.n	800d6e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	68db      	ldr	r3, [r3, #12]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d020      	beq.n	800d6ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d678:	4b4f      	ldr	r3, [pc, #316]	; (800d7b8 <HAL_RCC_OscConfig+0x2b0>)
 800d67a:	2201      	movs	r2, #1
 800d67c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d67e:	f7fd ff01 	bl	800b484 <HAL_GetTick>
 800d682:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d684:	e008      	b.n	800d698 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d686:	f7fd fefd 	bl	800b484 <HAL_GetTick>
 800d68a:	4602      	mov	r2, r0
 800d68c:	693b      	ldr	r3, [r7, #16]
 800d68e:	1ad3      	subs	r3, r2, r3
 800d690:	2b02      	cmp	r3, #2
 800d692:	d901      	bls.n	800d698 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800d694:	2303      	movs	r3, #3
 800d696:	e19c      	b.n	800d9d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d698:	4b46      	ldr	r3, [pc, #280]	; (800d7b4 <HAL_RCC_OscConfig+0x2ac>)
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	f003 0302 	and.w	r3, r3, #2
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d0f0      	beq.n	800d686 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d6a4:	4b43      	ldr	r3, [pc, #268]	; (800d7b4 <HAL_RCC_OscConfig+0x2ac>)
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	691b      	ldr	r3, [r3, #16]
 800d6b0:	00db      	lsls	r3, r3, #3
 800d6b2:	4940      	ldr	r1, [pc, #256]	; (800d7b4 <HAL_RCC_OscConfig+0x2ac>)
 800d6b4:	4313      	orrs	r3, r2
 800d6b6:	600b      	str	r3, [r1, #0]
 800d6b8:	e015      	b.n	800d6e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d6ba:	4b3f      	ldr	r3, [pc, #252]	; (800d7b8 <HAL_RCC_OscConfig+0x2b0>)
 800d6bc:	2200      	movs	r2, #0
 800d6be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d6c0:	f7fd fee0 	bl	800b484 <HAL_GetTick>
 800d6c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d6c6:	e008      	b.n	800d6da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d6c8:	f7fd fedc 	bl	800b484 <HAL_GetTick>
 800d6cc:	4602      	mov	r2, r0
 800d6ce:	693b      	ldr	r3, [r7, #16]
 800d6d0:	1ad3      	subs	r3, r2, r3
 800d6d2:	2b02      	cmp	r3, #2
 800d6d4:	d901      	bls.n	800d6da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800d6d6:	2303      	movs	r3, #3
 800d6d8:	e17b      	b.n	800d9d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d6da:	4b36      	ldr	r3, [pc, #216]	; (800d7b4 <HAL_RCC_OscConfig+0x2ac>)
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	f003 0302 	and.w	r3, r3, #2
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d1f0      	bne.n	800d6c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	f003 0308 	and.w	r3, r3, #8
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d030      	beq.n	800d754 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	695b      	ldr	r3, [r3, #20]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d016      	beq.n	800d728 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d6fa:	4b30      	ldr	r3, [pc, #192]	; (800d7bc <HAL_RCC_OscConfig+0x2b4>)
 800d6fc:	2201      	movs	r2, #1
 800d6fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d700:	f7fd fec0 	bl	800b484 <HAL_GetTick>
 800d704:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d706:	e008      	b.n	800d71a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d708:	f7fd febc 	bl	800b484 <HAL_GetTick>
 800d70c:	4602      	mov	r2, r0
 800d70e:	693b      	ldr	r3, [r7, #16]
 800d710:	1ad3      	subs	r3, r2, r3
 800d712:	2b02      	cmp	r3, #2
 800d714:	d901      	bls.n	800d71a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800d716:	2303      	movs	r3, #3
 800d718:	e15b      	b.n	800d9d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d71a:	4b26      	ldr	r3, [pc, #152]	; (800d7b4 <HAL_RCC_OscConfig+0x2ac>)
 800d71c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d71e:	f003 0302 	and.w	r3, r3, #2
 800d722:	2b00      	cmp	r3, #0
 800d724:	d0f0      	beq.n	800d708 <HAL_RCC_OscConfig+0x200>
 800d726:	e015      	b.n	800d754 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d728:	4b24      	ldr	r3, [pc, #144]	; (800d7bc <HAL_RCC_OscConfig+0x2b4>)
 800d72a:	2200      	movs	r2, #0
 800d72c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d72e:	f7fd fea9 	bl	800b484 <HAL_GetTick>
 800d732:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d734:	e008      	b.n	800d748 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d736:	f7fd fea5 	bl	800b484 <HAL_GetTick>
 800d73a:	4602      	mov	r2, r0
 800d73c:	693b      	ldr	r3, [r7, #16]
 800d73e:	1ad3      	subs	r3, r2, r3
 800d740:	2b02      	cmp	r3, #2
 800d742:	d901      	bls.n	800d748 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800d744:	2303      	movs	r3, #3
 800d746:	e144      	b.n	800d9d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d748:	4b1a      	ldr	r3, [pc, #104]	; (800d7b4 <HAL_RCC_OscConfig+0x2ac>)
 800d74a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d74c:	f003 0302 	and.w	r3, r3, #2
 800d750:	2b00      	cmp	r3, #0
 800d752:	d1f0      	bne.n	800d736 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	f003 0304 	and.w	r3, r3, #4
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	f000 80a0 	beq.w	800d8a2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d762:	2300      	movs	r3, #0
 800d764:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d766:	4b13      	ldr	r3, [pc, #76]	; (800d7b4 <HAL_RCC_OscConfig+0x2ac>)
 800d768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d76a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d10f      	bne.n	800d792 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d772:	2300      	movs	r3, #0
 800d774:	60bb      	str	r3, [r7, #8]
 800d776:	4b0f      	ldr	r3, [pc, #60]	; (800d7b4 <HAL_RCC_OscConfig+0x2ac>)
 800d778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d77a:	4a0e      	ldr	r2, [pc, #56]	; (800d7b4 <HAL_RCC_OscConfig+0x2ac>)
 800d77c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d780:	6413      	str	r3, [r2, #64]	; 0x40
 800d782:	4b0c      	ldr	r3, [pc, #48]	; (800d7b4 <HAL_RCC_OscConfig+0x2ac>)
 800d784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d78a:	60bb      	str	r3, [r7, #8]
 800d78c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d78e:	2301      	movs	r3, #1
 800d790:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d792:	4b0b      	ldr	r3, [pc, #44]	; (800d7c0 <HAL_RCC_OscConfig+0x2b8>)
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d121      	bne.n	800d7e2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800d79e:	4b08      	ldr	r3, [pc, #32]	; (800d7c0 <HAL_RCC_OscConfig+0x2b8>)
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	4a07      	ldr	r2, [pc, #28]	; (800d7c0 <HAL_RCC_OscConfig+0x2b8>)
 800d7a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d7a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d7aa:	f7fd fe6b 	bl	800b484 <HAL_GetTick>
 800d7ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d7b0:	e011      	b.n	800d7d6 <HAL_RCC_OscConfig+0x2ce>
 800d7b2:	bf00      	nop
 800d7b4:	40023800 	.word	0x40023800
 800d7b8:	42470000 	.word	0x42470000
 800d7bc:	42470e80 	.word	0x42470e80
 800d7c0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d7c4:	f7fd fe5e 	bl	800b484 <HAL_GetTick>
 800d7c8:	4602      	mov	r2, r0
 800d7ca:	693b      	ldr	r3, [r7, #16]
 800d7cc:	1ad3      	subs	r3, r2, r3
 800d7ce:	2b02      	cmp	r3, #2
 800d7d0:	d901      	bls.n	800d7d6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800d7d2:	2303      	movs	r3, #3
 800d7d4:	e0fd      	b.n	800d9d2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d7d6:	4b81      	ldr	r3, [pc, #516]	; (800d9dc <HAL_RCC_OscConfig+0x4d4>)
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d0f0      	beq.n	800d7c4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	689b      	ldr	r3, [r3, #8]
 800d7e6:	2b01      	cmp	r3, #1
 800d7e8:	d106      	bne.n	800d7f8 <HAL_RCC_OscConfig+0x2f0>
 800d7ea:	4b7d      	ldr	r3, [pc, #500]	; (800d9e0 <HAL_RCC_OscConfig+0x4d8>)
 800d7ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7ee:	4a7c      	ldr	r2, [pc, #496]	; (800d9e0 <HAL_RCC_OscConfig+0x4d8>)
 800d7f0:	f043 0301 	orr.w	r3, r3, #1
 800d7f4:	6713      	str	r3, [r2, #112]	; 0x70
 800d7f6:	e01c      	b.n	800d832 <HAL_RCC_OscConfig+0x32a>
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	689b      	ldr	r3, [r3, #8]
 800d7fc:	2b05      	cmp	r3, #5
 800d7fe:	d10c      	bne.n	800d81a <HAL_RCC_OscConfig+0x312>
 800d800:	4b77      	ldr	r3, [pc, #476]	; (800d9e0 <HAL_RCC_OscConfig+0x4d8>)
 800d802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d804:	4a76      	ldr	r2, [pc, #472]	; (800d9e0 <HAL_RCC_OscConfig+0x4d8>)
 800d806:	f043 0304 	orr.w	r3, r3, #4
 800d80a:	6713      	str	r3, [r2, #112]	; 0x70
 800d80c:	4b74      	ldr	r3, [pc, #464]	; (800d9e0 <HAL_RCC_OscConfig+0x4d8>)
 800d80e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d810:	4a73      	ldr	r2, [pc, #460]	; (800d9e0 <HAL_RCC_OscConfig+0x4d8>)
 800d812:	f043 0301 	orr.w	r3, r3, #1
 800d816:	6713      	str	r3, [r2, #112]	; 0x70
 800d818:	e00b      	b.n	800d832 <HAL_RCC_OscConfig+0x32a>
 800d81a:	4b71      	ldr	r3, [pc, #452]	; (800d9e0 <HAL_RCC_OscConfig+0x4d8>)
 800d81c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d81e:	4a70      	ldr	r2, [pc, #448]	; (800d9e0 <HAL_RCC_OscConfig+0x4d8>)
 800d820:	f023 0301 	bic.w	r3, r3, #1
 800d824:	6713      	str	r3, [r2, #112]	; 0x70
 800d826:	4b6e      	ldr	r3, [pc, #440]	; (800d9e0 <HAL_RCC_OscConfig+0x4d8>)
 800d828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d82a:	4a6d      	ldr	r2, [pc, #436]	; (800d9e0 <HAL_RCC_OscConfig+0x4d8>)
 800d82c:	f023 0304 	bic.w	r3, r3, #4
 800d830:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	689b      	ldr	r3, [r3, #8]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d015      	beq.n	800d866 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d83a:	f7fd fe23 	bl	800b484 <HAL_GetTick>
 800d83e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d840:	e00a      	b.n	800d858 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d842:	f7fd fe1f 	bl	800b484 <HAL_GetTick>
 800d846:	4602      	mov	r2, r0
 800d848:	693b      	ldr	r3, [r7, #16]
 800d84a:	1ad3      	subs	r3, r2, r3
 800d84c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d850:	4293      	cmp	r3, r2
 800d852:	d901      	bls.n	800d858 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800d854:	2303      	movs	r3, #3
 800d856:	e0bc      	b.n	800d9d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d858:	4b61      	ldr	r3, [pc, #388]	; (800d9e0 <HAL_RCC_OscConfig+0x4d8>)
 800d85a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d85c:	f003 0302 	and.w	r3, r3, #2
 800d860:	2b00      	cmp	r3, #0
 800d862:	d0ee      	beq.n	800d842 <HAL_RCC_OscConfig+0x33a>
 800d864:	e014      	b.n	800d890 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d866:	f7fd fe0d 	bl	800b484 <HAL_GetTick>
 800d86a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d86c:	e00a      	b.n	800d884 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d86e:	f7fd fe09 	bl	800b484 <HAL_GetTick>
 800d872:	4602      	mov	r2, r0
 800d874:	693b      	ldr	r3, [r7, #16]
 800d876:	1ad3      	subs	r3, r2, r3
 800d878:	f241 3288 	movw	r2, #5000	; 0x1388
 800d87c:	4293      	cmp	r3, r2
 800d87e:	d901      	bls.n	800d884 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800d880:	2303      	movs	r3, #3
 800d882:	e0a6      	b.n	800d9d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d884:	4b56      	ldr	r3, [pc, #344]	; (800d9e0 <HAL_RCC_OscConfig+0x4d8>)
 800d886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d888:	f003 0302 	and.w	r3, r3, #2
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d1ee      	bne.n	800d86e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d890:	7dfb      	ldrb	r3, [r7, #23]
 800d892:	2b01      	cmp	r3, #1
 800d894:	d105      	bne.n	800d8a2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d896:	4b52      	ldr	r3, [pc, #328]	; (800d9e0 <HAL_RCC_OscConfig+0x4d8>)
 800d898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d89a:	4a51      	ldr	r2, [pc, #324]	; (800d9e0 <HAL_RCC_OscConfig+0x4d8>)
 800d89c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d8a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	699b      	ldr	r3, [r3, #24]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	f000 8092 	beq.w	800d9d0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800d8ac:	4b4c      	ldr	r3, [pc, #304]	; (800d9e0 <HAL_RCC_OscConfig+0x4d8>)
 800d8ae:	689b      	ldr	r3, [r3, #8]
 800d8b0:	f003 030c 	and.w	r3, r3, #12
 800d8b4:	2b08      	cmp	r3, #8
 800d8b6:	d05c      	beq.n	800d972 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	699b      	ldr	r3, [r3, #24]
 800d8bc:	2b02      	cmp	r3, #2
 800d8be:	d141      	bne.n	800d944 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d8c0:	4b48      	ldr	r3, [pc, #288]	; (800d9e4 <HAL_RCC_OscConfig+0x4dc>)
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d8c6:	f7fd fddd 	bl	800b484 <HAL_GetTick>
 800d8ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d8cc:	e008      	b.n	800d8e0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d8ce:	f7fd fdd9 	bl	800b484 <HAL_GetTick>
 800d8d2:	4602      	mov	r2, r0
 800d8d4:	693b      	ldr	r3, [r7, #16]
 800d8d6:	1ad3      	subs	r3, r2, r3
 800d8d8:	2b02      	cmp	r3, #2
 800d8da:	d901      	bls.n	800d8e0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800d8dc:	2303      	movs	r3, #3
 800d8de:	e078      	b.n	800d9d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d8e0:	4b3f      	ldr	r3, [pc, #252]	; (800d9e0 <HAL_RCC_OscConfig+0x4d8>)
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d1f0      	bne.n	800d8ce <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	69da      	ldr	r2, [r3, #28]
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	6a1b      	ldr	r3, [r3, #32]
 800d8f4:	431a      	orrs	r2, r3
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8fa:	019b      	lsls	r3, r3, #6
 800d8fc:	431a      	orrs	r2, r3
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d902:	085b      	lsrs	r3, r3, #1
 800d904:	3b01      	subs	r3, #1
 800d906:	041b      	lsls	r3, r3, #16
 800d908:	431a      	orrs	r2, r3
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d90e:	061b      	lsls	r3, r3, #24
 800d910:	4933      	ldr	r1, [pc, #204]	; (800d9e0 <HAL_RCC_OscConfig+0x4d8>)
 800d912:	4313      	orrs	r3, r2
 800d914:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d916:	4b33      	ldr	r3, [pc, #204]	; (800d9e4 <HAL_RCC_OscConfig+0x4dc>)
 800d918:	2201      	movs	r2, #1
 800d91a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d91c:	f7fd fdb2 	bl	800b484 <HAL_GetTick>
 800d920:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d922:	e008      	b.n	800d936 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d924:	f7fd fdae 	bl	800b484 <HAL_GetTick>
 800d928:	4602      	mov	r2, r0
 800d92a:	693b      	ldr	r3, [r7, #16]
 800d92c:	1ad3      	subs	r3, r2, r3
 800d92e:	2b02      	cmp	r3, #2
 800d930:	d901      	bls.n	800d936 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800d932:	2303      	movs	r3, #3
 800d934:	e04d      	b.n	800d9d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d936:	4b2a      	ldr	r3, [pc, #168]	; (800d9e0 <HAL_RCC_OscConfig+0x4d8>)
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d0f0      	beq.n	800d924 <HAL_RCC_OscConfig+0x41c>
 800d942:	e045      	b.n	800d9d0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d944:	4b27      	ldr	r3, [pc, #156]	; (800d9e4 <HAL_RCC_OscConfig+0x4dc>)
 800d946:	2200      	movs	r2, #0
 800d948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d94a:	f7fd fd9b 	bl	800b484 <HAL_GetTick>
 800d94e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d950:	e008      	b.n	800d964 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d952:	f7fd fd97 	bl	800b484 <HAL_GetTick>
 800d956:	4602      	mov	r2, r0
 800d958:	693b      	ldr	r3, [r7, #16]
 800d95a:	1ad3      	subs	r3, r2, r3
 800d95c:	2b02      	cmp	r3, #2
 800d95e:	d901      	bls.n	800d964 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800d960:	2303      	movs	r3, #3
 800d962:	e036      	b.n	800d9d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d964:	4b1e      	ldr	r3, [pc, #120]	; (800d9e0 <HAL_RCC_OscConfig+0x4d8>)
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d1f0      	bne.n	800d952 <HAL_RCC_OscConfig+0x44a>
 800d970:	e02e      	b.n	800d9d0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	699b      	ldr	r3, [r3, #24]
 800d976:	2b01      	cmp	r3, #1
 800d978:	d101      	bne.n	800d97e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800d97a:	2301      	movs	r3, #1
 800d97c:	e029      	b.n	800d9d2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800d97e:	4b18      	ldr	r3, [pc, #96]	; (800d9e0 <HAL_RCC_OscConfig+0x4d8>)
 800d980:	685b      	ldr	r3, [r3, #4]
 800d982:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	69db      	ldr	r3, [r3, #28]
 800d98e:	429a      	cmp	r2, r3
 800d990:	d11c      	bne.n	800d9cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d99c:	429a      	cmp	r2, r3
 800d99e:	d115      	bne.n	800d9cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800d9a0:	68fa      	ldr	r2, [r7, #12]
 800d9a2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800d9a6:	4013      	ands	r3, r2
 800d9a8:	687a      	ldr	r2, [r7, #4]
 800d9aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d9ac:	4293      	cmp	r3, r2
 800d9ae:	d10d      	bne.n	800d9cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800d9ba:	429a      	cmp	r2, r3
 800d9bc:	d106      	bne.n	800d9cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800d9c8:	429a      	cmp	r2, r3
 800d9ca:	d001      	beq.n	800d9d0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800d9cc:	2301      	movs	r3, #1
 800d9ce:	e000      	b.n	800d9d2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800d9d0:	2300      	movs	r3, #0
}
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	3718      	adds	r7, #24
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	bd80      	pop	{r7, pc}
 800d9da:	bf00      	nop
 800d9dc:	40007000 	.word	0x40007000
 800d9e0:	40023800 	.word	0x40023800
 800d9e4:	42470060 	.word	0x42470060

0800d9e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b084      	sub	sp, #16
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
 800d9f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d101      	bne.n	800d9fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d9f8:	2301      	movs	r3, #1
 800d9fa:	e0cc      	b.n	800db96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d9fc:	4b68      	ldr	r3, [pc, #416]	; (800dba0 <HAL_RCC_ClockConfig+0x1b8>)
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	f003 030f 	and.w	r3, r3, #15
 800da04:	683a      	ldr	r2, [r7, #0]
 800da06:	429a      	cmp	r2, r3
 800da08:	d90c      	bls.n	800da24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800da0a:	4b65      	ldr	r3, [pc, #404]	; (800dba0 <HAL_RCC_ClockConfig+0x1b8>)
 800da0c:	683a      	ldr	r2, [r7, #0]
 800da0e:	b2d2      	uxtb	r2, r2
 800da10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800da12:	4b63      	ldr	r3, [pc, #396]	; (800dba0 <HAL_RCC_ClockConfig+0x1b8>)
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	f003 030f 	and.w	r3, r3, #15
 800da1a:	683a      	ldr	r2, [r7, #0]
 800da1c:	429a      	cmp	r2, r3
 800da1e:	d001      	beq.n	800da24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800da20:	2301      	movs	r3, #1
 800da22:	e0b8      	b.n	800db96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	f003 0302 	and.w	r3, r3, #2
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d020      	beq.n	800da72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	f003 0304 	and.w	r3, r3, #4
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d005      	beq.n	800da48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800da3c:	4b59      	ldr	r3, [pc, #356]	; (800dba4 <HAL_RCC_ClockConfig+0x1bc>)
 800da3e:	689b      	ldr	r3, [r3, #8]
 800da40:	4a58      	ldr	r2, [pc, #352]	; (800dba4 <HAL_RCC_ClockConfig+0x1bc>)
 800da42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800da46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	f003 0308 	and.w	r3, r3, #8
 800da50:	2b00      	cmp	r3, #0
 800da52:	d005      	beq.n	800da60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800da54:	4b53      	ldr	r3, [pc, #332]	; (800dba4 <HAL_RCC_ClockConfig+0x1bc>)
 800da56:	689b      	ldr	r3, [r3, #8]
 800da58:	4a52      	ldr	r2, [pc, #328]	; (800dba4 <HAL_RCC_ClockConfig+0x1bc>)
 800da5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800da5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800da60:	4b50      	ldr	r3, [pc, #320]	; (800dba4 <HAL_RCC_ClockConfig+0x1bc>)
 800da62:	689b      	ldr	r3, [r3, #8]
 800da64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	689b      	ldr	r3, [r3, #8]
 800da6c:	494d      	ldr	r1, [pc, #308]	; (800dba4 <HAL_RCC_ClockConfig+0x1bc>)
 800da6e:	4313      	orrs	r3, r2
 800da70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	f003 0301 	and.w	r3, r3, #1
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d044      	beq.n	800db08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	685b      	ldr	r3, [r3, #4]
 800da82:	2b01      	cmp	r3, #1
 800da84:	d107      	bne.n	800da96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800da86:	4b47      	ldr	r3, [pc, #284]	; (800dba4 <HAL_RCC_ClockConfig+0x1bc>)
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d119      	bne.n	800dac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800da92:	2301      	movs	r3, #1
 800da94:	e07f      	b.n	800db96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	685b      	ldr	r3, [r3, #4]
 800da9a:	2b02      	cmp	r3, #2
 800da9c:	d003      	beq.n	800daa6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800daa2:	2b03      	cmp	r3, #3
 800daa4:	d107      	bne.n	800dab6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800daa6:	4b3f      	ldr	r3, [pc, #252]	; (800dba4 <HAL_RCC_ClockConfig+0x1bc>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d109      	bne.n	800dac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800dab2:	2301      	movs	r3, #1
 800dab4:	e06f      	b.n	800db96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dab6:	4b3b      	ldr	r3, [pc, #236]	; (800dba4 <HAL_RCC_ClockConfig+0x1bc>)
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	f003 0302 	and.w	r3, r3, #2
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d101      	bne.n	800dac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800dac2:	2301      	movs	r3, #1
 800dac4:	e067      	b.n	800db96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800dac6:	4b37      	ldr	r3, [pc, #220]	; (800dba4 <HAL_RCC_ClockConfig+0x1bc>)
 800dac8:	689b      	ldr	r3, [r3, #8]
 800daca:	f023 0203 	bic.w	r2, r3, #3
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	685b      	ldr	r3, [r3, #4]
 800dad2:	4934      	ldr	r1, [pc, #208]	; (800dba4 <HAL_RCC_ClockConfig+0x1bc>)
 800dad4:	4313      	orrs	r3, r2
 800dad6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800dad8:	f7fd fcd4 	bl	800b484 <HAL_GetTick>
 800dadc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dade:	e00a      	b.n	800daf6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800dae0:	f7fd fcd0 	bl	800b484 <HAL_GetTick>
 800dae4:	4602      	mov	r2, r0
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	1ad3      	subs	r3, r2, r3
 800daea:	f241 3288 	movw	r2, #5000	; 0x1388
 800daee:	4293      	cmp	r3, r2
 800daf0:	d901      	bls.n	800daf6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800daf2:	2303      	movs	r3, #3
 800daf4:	e04f      	b.n	800db96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800daf6:	4b2b      	ldr	r3, [pc, #172]	; (800dba4 <HAL_RCC_ClockConfig+0x1bc>)
 800daf8:	689b      	ldr	r3, [r3, #8]
 800dafa:	f003 020c 	and.w	r2, r3, #12
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	685b      	ldr	r3, [r3, #4]
 800db02:	009b      	lsls	r3, r3, #2
 800db04:	429a      	cmp	r2, r3
 800db06:	d1eb      	bne.n	800dae0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800db08:	4b25      	ldr	r3, [pc, #148]	; (800dba0 <HAL_RCC_ClockConfig+0x1b8>)
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	f003 030f 	and.w	r3, r3, #15
 800db10:	683a      	ldr	r2, [r7, #0]
 800db12:	429a      	cmp	r2, r3
 800db14:	d20c      	bcs.n	800db30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800db16:	4b22      	ldr	r3, [pc, #136]	; (800dba0 <HAL_RCC_ClockConfig+0x1b8>)
 800db18:	683a      	ldr	r2, [r7, #0]
 800db1a:	b2d2      	uxtb	r2, r2
 800db1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800db1e:	4b20      	ldr	r3, [pc, #128]	; (800dba0 <HAL_RCC_ClockConfig+0x1b8>)
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	f003 030f 	and.w	r3, r3, #15
 800db26:	683a      	ldr	r2, [r7, #0]
 800db28:	429a      	cmp	r2, r3
 800db2a:	d001      	beq.n	800db30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800db2c:	2301      	movs	r3, #1
 800db2e:	e032      	b.n	800db96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	f003 0304 	and.w	r3, r3, #4
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d008      	beq.n	800db4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800db3c:	4b19      	ldr	r3, [pc, #100]	; (800dba4 <HAL_RCC_ClockConfig+0x1bc>)
 800db3e:	689b      	ldr	r3, [r3, #8]
 800db40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	68db      	ldr	r3, [r3, #12]
 800db48:	4916      	ldr	r1, [pc, #88]	; (800dba4 <HAL_RCC_ClockConfig+0x1bc>)
 800db4a:	4313      	orrs	r3, r2
 800db4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	f003 0308 	and.w	r3, r3, #8
 800db56:	2b00      	cmp	r3, #0
 800db58:	d009      	beq.n	800db6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800db5a:	4b12      	ldr	r3, [pc, #72]	; (800dba4 <HAL_RCC_ClockConfig+0x1bc>)
 800db5c:	689b      	ldr	r3, [r3, #8]
 800db5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	691b      	ldr	r3, [r3, #16]
 800db66:	00db      	lsls	r3, r3, #3
 800db68:	490e      	ldr	r1, [pc, #56]	; (800dba4 <HAL_RCC_ClockConfig+0x1bc>)
 800db6a:	4313      	orrs	r3, r2
 800db6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800db6e:	f000 f821 	bl	800dbb4 <HAL_RCC_GetSysClockFreq>
 800db72:	4602      	mov	r2, r0
 800db74:	4b0b      	ldr	r3, [pc, #44]	; (800dba4 <HAL_RCC_ClockConfig+0x1bc>)
 800db76:	689b      	ldr	r3, [r3, #8]
 800db78:	091b      	lsrs	r3, r3, #4
 800db7a:	f003 030f 	and.w	r3, r3, #15
 800db7e:	490a      	ldr	r1, [pc, #40]	; (800dba8 <HAL_RCC_ClockConfig+0x1c0>)
 800db80:	5ccb      	ldrb	r3, [r1, r3]
 800db82:	fa22 f303 	lsr.w	r3, r2, r3
 800db86:	4a09      	ldr	r2, [pc, #36]	; (800dbac <HAL_RCC_ClockConfig+0x1c4>)
 800db88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800db8a:	4b09      	ldr	r3, [pc, #36]	; (800dbb0 <HAL_RCC_ClockConfig+0x1c8>)
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	4618      	mov	r0, r3
 800db90:	f7fd f8ee 	bl	800ad70 <HAL_InitTick>

  return HAL_OK;
 800db94:	2300      	movs	r3, #0
}
 800db96:	4618      	mov	r0, r3
 800db98:	3710      	adds	r7, #16
 800db9a:	46bd      	mov	sp, r7
 800db9c:	bd80      	pop	{r7, pc}
 800db9e:	bf00      	nop
 800dba0:	40023c00 	.word	0x40023c00
 800dba4:	40023800 	.word	0x40023800
 800dba8:	0801c280 	.word	0x0801c280
 800dbac:	20000828 	.word	0x20000828
 800dbb0:	2000082c 	.word	0x2000082c

0800dbb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800dbb4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800dbb8:	b084      	sub	sp, #16
 800dbba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	607b      	str	r3, [r7, #4]
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	60fb      	str	r3, [r7, #12]
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800dbc8:	2300      	movs	r3, #0
 800dbca:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800dbcc:	4b67      	ldr	r3, [pc, #412]	; (800dd6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800dbce:	689b      	ldr	r3, [r3, #8]
 800dbd0:	f003 030c 	and.w	r3, r3, #12
 800dbd4:	2b08      	cmp	r3, #8
 800dbd6:	d00d      	beq.n	800dbf4 <HAL_RCC_GetSysClockFreq+0x40>
 800dbd8:	2b08      	cmp	r3, #8
 800dbda:	f200 80bd 	bhi.w	800dd58 <HAL_RCC_GetSysClockFreq+0x1a4>
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d002      	beq.n	800dbe8 <HAL_RCC_GetSysClockFreq+0x34>
 800dbe2:	2b04      	cmp	r3, #4
 800dbe4:	d003      	beq.n	800dbee <HAL_RCC_GetSysClockFreq+0x3a>
 800dbe6:	e0b7      	b.n	800dd58 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800dbe8:	4b61      	ldr	r3, [pc, #388]	; (800dd70 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800dbea:	60bb      	str	r3, [r7, #8]
       break;
 800dbec:	e0b7      	b.n	800dd5e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800dbee:	4b61      	ldr	r3, [pc, #388]	; (800dd74 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800dbf0:	60bb      	str	r3, [r7, #8]
      break;
 800dbf2:	e0b4      	b.n	800dd5e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800dbf4:	4b5d      	ldr	r3, [pc, #372]	; (800dd6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800dbf6:	685b      	ldr	r3, [r3, #4]
 800dbf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dbfc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800dbfe:	4b5b      	ldr	r3, [pc, #364]	; (800dd6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800dc00:	685b      	ldr	r3, [r3, #4]
 800dc02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d04d      	beq.n	800dca6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800dc0a:	4b58      	ldr	r3, [pc, #352]	; (800dd6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800dc0c:	685b      	ldr	r3, [r3, #4]
 800dc0e:	099b      	lsrs	r3, r3, #6
 800dc10:	461a      	mov	r2, r3
 800dc12:	f04f 0300 	mov.w	r3, #0
 800dc16:	f240 10ff 	movw	r0, #511	; 0x1ff
 800dc1a:	f04f 0100 	mov.w	r1, #0
 800dc1e:	ea02 0800 	and.w	r8, r2, r0
 800dc22:	ea03 0901 	and.w	r9, r3, r1
 800dc26:	4640      	mov	r0, r8
 800dc28:	4649      	mov	r1, r9
 800dc2a:	f04f 0200 	mov.w	r2, #0
 800dc2e:	f04f 0300 	mov.w	r3, #0
 800dc32:	014b      	lsls	r3, r1, #5
 800dc34:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800dc38:	0142      	lsls	r2, r0, #5
 800dc3a:	4610      	mov	r0, r2
 800dc3c:	4619      	mov	r1, r3
 800dc3e:	ebb0 0008 	subs.w	r0, r0, r8
 800dc42:	eb61 0109 	sbc.w	r1, r1, r9
 800dc46:	f04f 0200 	mov.w	r2, #0
 800dc4a:	f04f 0300 	mov.w	r3, #0
 800dc4e:	018b      	lsls	r3, r1, #6
 800dc50:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800dc54:	0182      	lsls	r2, r0, #6
 800dc56:	1a12      	subs	r2, r2, r0
 800dc58:	eb63 0301 	sbc.w	r3, r3, r1
 800dc5c:	f04f 0000 	mov.w	r0, #0
 800dc60:	f04f 0100 	mov.w	r1, #0
 800dc64:	00d9      	lsls	r1, r3, #3
 800dc66:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800dc6a:	00d0      	lsls	r0, r2, #3
 800dc6c:	4602      	mov	r2, r0
 800dc6e:	460b      	mov	r3, r1
 800dc70:	eb12 0208 	adds.w	r2, r2, r8
 800dc74:	eb43 0309 	adc.w	r3, r3, r9
 800dc78:	f04f 0000 	mov.w	r0, #0
 800dc7c:	f04f 0100 	mov.w	r1, #0
 800dc80:	0259      	lsls	r1, r3, #9
 800dc82:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800dc86:	0250      	lsls	r0, r2, #9
 800dc88:	4602      	mov	r2, r0
 800dc8a:	460b      	mov	r3, r1
 800dc8c:	4610      	mov	r0, r2
 800dc8e:	4619      	mov	r1, r3
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	461a      	mov	r2, r3
 800dc94:	f04f 0300 	mov.w	r3, #0
 800dc98:	f7f2 fff6 	bl	8000c88 <__aeabi_uldivmod>
 800dc9c:	4602      	mov	r2, r0
 800dc9e:	460b      	mov	r3, r1
 800dca0:	4613      	mov	r3, r2
 800dca2:	60fb      	str	r3, [r7, #12]
 800dca4:	e04a      	b.n	800dd3c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800dca6:	4b31      	ldr	r3, [pc, #196]	; (800dd6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800dca8:	685b      	ldr	r3, [r3, #4]
 800dcaa:	099b      	lsrs	r3, r3, #6
 800dcac:	461a      	mov	r2, r3
 800dcae:	f04f 0300 	mov.w	r3, #0
 800dcb2:	f240 10ff 	movw	r0, #511	; 0x1ff
 800dcb6:	f04f 0100 	mov.w	r1, #0
 800dcba:	ea02 0400 	and.w	r4, r2, r0
 800dcbe:	ea03 0501 	and.w	r5, r3, r1
 800dcc2:	4620      	mov	r0, r4
 800dcc4:	4629      	mov	r1, r5
 800dcc6:	f04f 0200 	mov.w	r2, #0
 800dcca:	f04f 0300 	mov.w	r3, #0
 800dcce:	014b      	lsls	r3, r1, #5
 800dcd0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800dcd4:	0142      	lsls	r2, r0, #5
 800dcd6:	4610      	mov	r0, r2
 800dcd8:	4619      	mov	r1, r3
 800dcda:	1b00      	subs	r0, r0, r4
 800dcdc:	eb61 0105 	sbc.w	r1, r1, r5
 800dce0:	f04f 0200 	mov.w	r2, #0
 800dce4:	f04f 0300 	mov.w	r3, #0
 800dce8:	018b      	lsls	r3, r1, #6
 800dcea:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800dcee:	0182      	lsls	r2, r0, #6
 800dcf0:	1a12      	subs	r2, r2, r0
 800dcf2:	eb63 0301 	sbc.w	r3, r3, r1
 800dcf6:	f04f 0000 	mov.w	r0, #0
 800dcfa:	f04f 0100 	mov.w	r1, #0
 800dcfe:	00d9      	lsls	r1, r3, #3
 800dd00:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800dd04:	00d0      	lsls	r0, r2, #3
 800dd06:	4602      	mov	r2, r0
 800dd08:	460b      	mov	r3, r1
 800dd0a:	1912      	adds	r2, r2, r4
 800dd0c:	eb45 0303 	adc.w	r3, r5, r3
 800dd10:	f04f 0000 	mov.w	r0, #0
 800dd14:	f04f 0100 	mov.w	r1, #0
 800dd18:	0299      	lsls	r1, r3, #10
 800dd1a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800dd1e:	0290      	lsls	r0, r2, #10
 800dd20:	4602      	mov	r2, r0
 800dd22:	460b      	mov	r3, r1
 800dd24:	4610      	mov	r0, r2
 800dd26:	4619      	mov	r1, r3
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	461a      	mov	r2, r3
 800dd2c:	f04f 0300 	mov.w	r3, #0
 800dd30:	f7f2 ffaa 	bl	8000c88 <__aeabi_uldivmod>
 800dd34:	4602      	mov	r2, r0
 800dd36:	460b      	mov	r3, r1
 800dd38:	4613      	mov	r3, r2
 800dd3a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800dd3c:	4b0b      	ldr	r3, [pc, #44]	; (800dd6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800dd3e:	685b      	ldr	r3, [r3, #4]
 800dd40:	0c1b      	lsrs	r3, r3, #16
 800dd42:	f003 0303 	and.w	r3, r3, #3
 800dd46:	3301      	adds	r3, #1
 800dd48:	005b      	lsls	r3, r3, #1
 800dd4a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800dd4c:	68fa      	ldr	r2, [r7, #12]
 800dd4e:	683b      	ldr	r3, [r7, #0]
 800dd50:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd54:	60bb      	str	r3, [r7, #8]
      break;
 800dd56:	e002      	b.n	800dd5e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800dd58:	4b05      	ldr	r3, [pc, #20]	; (800dd70 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800dd5a:	60bb      	str	r3, [r7, #8]
      break;
 800dd5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800dd5e:	68bb      	ldr	r3, [r7, #8]
}
 800dd60:	4618      	mov	r0, r3
 800dd62:	3710      	adds	r7, #16
 800dd64:	46bd      	mov	sp, r7
 800dd66:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800dd6a:	bf00      	nop
 800dd6c:	40023800 	.word	0x40023800
 800dd70:	00f42400 	.word	0x00f42400
 800dd74:	007a1200 	.word	0x007a1200

0800dd78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800dd78:	b480      	push	{r7}
 800dd7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800dd7c:	4b03      	ldr	r3, [pc, #12]	; (800dd8c <HAL_RCC_GetHCLKFreq+0x14>)
 800dd7e:	681b      	ldr	r3, [r3, #0]
}
 800dd80:	4618      	mov	r0, r3
 800dd82:	46bd      	mov	sp, r7
 800dd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd88:	4770      	bx	lr
 800dd8a:	bf00      	nop
 800dd8c:	20000828 	.word	0x20000828

0800dd90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800dd94:	f7ff fff0 	bl	800dd78 <HAL_RCC_GetHCLKFreq>
 800dd98:	4602      	mov	r2, r0
 800dd9a:	4b05      	ldr	r3, [pc, #20]	; (800ddb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800dd9c:	689b      	ldr	r3, [r3, #8]
 800dd9e:	0a9b      	lsrs	r3, r3, #10
 800dda0:	f003 0307 	and.w	r3, r3, #7
 800dda4:	4903      	ldr	r1, [pc, #12]	; (800ddb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800dda6:	5ccb      	ldrb	r3, [r1, r3]
 800dda8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ddac:	4618      	mov	r0, r3
 800ddae:	bd80      	pop	{r7, pc}
 800ddb0:	40023800 	.word	0x40023800
 800ddb4:	0801c290 	.word	0x0801c290

0800ddb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800ddbc:	f7ff ffdc 	bl	800dd78 <HAL_RCC_GetHCLKFreq>
 800ddc0:	4602      	mov	r2, r0
 800ddc2:	4b05      	ldr	r3, [pc, #20]	; (800ddd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ddc4:	689b      	ldr	r3, [r3, #8]
 800ddc6:	0b5b      	lsrs	r3, r3, #13
 800ddc8:	f003 0307 	and.w	r3, r3, #7
 800ddcc:	4903      	ldr	r1, [pc, #12]	; (800dddc <HAL_RCC_GetPCLK2Freq+0x24>)
 800ddce:	5ccb      	ldrb	r3, [r1, r3]
 800ddd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	bd80      	pop	{r7, pc}
 800ddd8:	40023800 	.word	0x40023800
 800dddc:	0801c290 	.word	0x0801c290

0800dde0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800dde0:	b480      	push	{r7}
 800dde2:	b083      	sub	sp, #12
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
 800dde8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	220f      	movs	r2, #15
 800ddee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ddf0:	4b12      	ldr	r3, [pc, #72]	; (800de3c <HAL_RCC_GetClockConfig+0x5c>)
 800ddf2:	689b      	ldr	r3, [r3, #8]
 800ddf4:	f003 0203 	and.w	r2, r3, #3
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800ddfc:	4b0f      	ldr	r3, [pc, #60]	; (800de3c <HAL_RCC_GetClockConfig+0x5c>)
 800ddfe:	689b      	ldr	r3, [r3, #8]
 800de00:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800de08:	4b0c      	ldr	r3, [pc, #48]	; (800de3c <HAL_RCC_GetClockConfig+0x5c>)
 800de0a:	689b      	ldr	r3, [r3, #8]
 800de0c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800de14:	4b09      	ldr	r3, [pc, #36]	; (800de3c <HAL_RCC_GetClockConfig+0x5c>)
 800de16:	689b      	ldr	r3, [r3, #8]
 800de18:	08db      	lsrs	r3, r3, #3
 800de1a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800de22:	4b07      	ldr	r3, [pc, #28]	; (800de40 <HAL_RCC_GetClockConfig+0x60>)
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	f003 020f 	and.w	r2, r3, #15
 800de2a:	683b      	ldr	r3, [r7, #0]
 800de2c:	601a      	str	r2, [r3, #0]
}
 800de2e:	bf00      	nop
 800de30:	370c      	adds	r7, #12
 800de32:	46bd      	mov	sp, r7
 800de34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de38:	4770      	bx	lr
 800de3a:	bf00      	nop
 800de3c:	40023800 	.word	0x40023800
 800de40:	40023c00 	.word	0x40023c00

0800de44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b082      	sub	sp, #8
 800de48:	af00      	add	r7, sp, #0
 800de4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d101      	bne.n	800de56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800de52:	2301      	movs	r3, #1
 800de54:	e01d      	b.n	800de92 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800de5c:	b2db      	uxtb	r3, r3
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d106      	bne.n	800de70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	2200      	movs	r2, #0
 800de66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800de6a:	6878      	ldr	r0, [r7, #4]
 800de6c:	f7fd f99a 	bl	800b1a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	2202      	movs	r2, #2
 800de74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	681a      	ldr	r2, [r3, #0]
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	3304      	adds	r3, #4
 800de80:	4619      	mov	r1, r3
 800de82:	4610      	mov	r0, r2
 800de84:	f000 fa22 	bl	800e2cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	2201      	movs	r2, #1
 800de8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800de90:	2300      	movs	r3, #0
}
 800de92:	4618      	mov	r0, r3
 800de94:	3708      	adds	r7, #8
 800de96:	46bd      	mov	sp, r7
 800de98:	bd80      	pop	{r7, pc}

0800de9a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800de9a:	b480      	push	{r7}
 800de9c:	b085      	sub	sp, #20
 800de9e:	af00      	add	r7, sp, #0
 800dea0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	68da      	ldr	r2, [r3, #12]
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	f042 0201 	orr.w	r2, r2, #1
 800deb0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	689b      	ldr	r3, [r3, #8]
 800deb8:	f003 0307 	and.w	r3, r3, #7
 800debc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	2b06      	cmp	r3, #6
 800dec2:	d007      	beq.n	800ded4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	681a      	ldr	r2, [r3, #0]
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	f042 0201 	orr.w	r2, r2, #1
 800ded2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ded4:	2300      	movs	r3, #0
}
 800ded6:	4618      	mov	r0, r3
 800ded8:	3714      	adds	r7, #20
 800deda:	46bd      	mov	sp, r7
 800dedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee0:	4770      	bx	lr

0800dee2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800dee2:	b580      	push	{r7, lr}
 800dee4:	b082      	sub	sp, #8
 800dee6:	af00      	add	r7, sp, #0
 800dee8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	691b      	ldr	r3, [r3, #16]
 800def0:	f003 0302 	and.w	r3, r3, #2
 800def4:	2b02      	cmp	r3, #2
 800def6:	d122      	bne.n	800df3e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	68db      	ldr	r3, [r3, #12]
 800defe:	f003 0302 	and.w	r3, r3, #2
 800df02:	2b02      	cmp	r3, #2
 800df04:	d11b      	bne.n	800df3e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	f06f 0202 	mvn.w	r2, #2
 800df0e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	2201      	movs	r2, #1
 800df14:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	699b      	ldr	r3, [r3, #24]
 800df1c:	f003 0303 	and.w	r3, r3, #3
 800df20:	2b00      	cmp	r3, #0
 800df22:	d003      	beq.n	800df2c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800df24:	6878      	ldr	r0, [r7, #4]
 800df26:	f000 f9b2 	bl	800e28e <HAL_TIM_IC_CaptureCallback>
 800df2a:	e005      	b.n	800df38 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800df2c:	6878      	ldr	r0, [r7, #4]
 800df2e:	f000 f9a4 	bl	800e27a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800df32:	6878      	ldr	r0, [r7, #4]
 800df34:	f000 f9b5 	bl	800e2a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	2200      	movs	r2, #0
 800df3c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	691b      	ldr	r3, [r3, #16]
 800df44:	f003 0304 	and.w	r3, r3, #4
 800df48:	2b04      	cmp	r3, #4
 800df4a:	d122      	bne.n	800df92 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	68db      	ldr	r3, [r3, #12]
 800df52:	f003 0304 	and.w	r3, r3, #4
 800df56:	2b04      	cmp	r3, #4
 800df58:	d11b      	bne.n	800df92 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	f06f 0204 	mvn.w	r2, #4
 800df62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	2202      	movs	r2, #2
 800df68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	699b      	ldr	r3, [r3, #24]
 800df70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800df74:	2b00      	cmp	r3, #0
 800df76:	d003      	beq.n	800df80 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800df78:	6878      	ldr	r0, [r7, #4]
 800df7a:	f000 f988 	bl	800e28e <HAL_TIM_IC_CaptureCallback>
 800df7e:	e005      	b.n	800df8c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800df80:	6878      	ldr	r0, [r7, #4]
 800df82:	f000 f97a 	bl	800e27a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800df86:	6878      	ldr	r0, [r7, #4]
 800df88:	f000 f98b 	bl	800e2a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	2200      	movs	r2, #0
 800df90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	691b      	ldr	r3, [r3, #16]
 800df98:	f003 0308 	and.w	r3, r3, #8
 800df9c:	2b08      	cmp	r3, #8
 800df9e:	d122      	bne.n	800dfe6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	68db      	ldr	r3, [r3, #12]
 800dfa6:	f003 0308 	and.w	r3, r3, #8
 800dfaa:	2b08      	cmp	r3, #8
 800dfac:	d11b      	bne.n	800dfe6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	f06f 0208 	mvn.w	r2, #8
 800dfb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	2204      	movs	r2, #4
 800dfbc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	69db      	ldr	r3, [r3, #28]
 800dfc4:	f003 0303 	and.w	r3, r3, #3
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d003      	beq.n	800dfd4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dfcc:	6878      	ldr	r0, [r7, #4]
 800dfce:	f000 f95e 	bl	800e28e <HAL_TIM_IC_CaptureCallback>
 800dfd2:	e005      	b.n	800dfe0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dfd4:	6878      	ldr	r0, [r7, #4]
 800dfd6:	f000 f950 	bl	800e27a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dfda:	6878      	ldr	r0, [r7, #4]
 800dfdc:	f000 f961 	bl	800e2a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	2200      	movs	r2, #0
 800dfe4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	691b      	ldr	r3, [r3, #16]
 800dfec:	f003 0310 	and.w	r3, r3, #16
 800dff0:	2b10      	cmp	r3, #16
 800dff2:	d122      	bne.n	800e03a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	68db      	ldr	r3, [r3, #12]
 800dffa:	f003 0310 	and.w	r3, r3, #16
 800dffe:	2b10      	cmp	r3, #16
 800e000:	d11b      	bne.n	800e03a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	f06f 0210 	mvn.w	r2, #16
 800e00a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	2208      	movs	r2, #8
 800e010:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	69db      	ldr	r3, [r3, #28]
 800e018:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d003      	beq.n	800e028 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e020:	6878      	ldr	r0, [r7, #4]
 800e022:	f000 f934 	bl	800e28e <HAL_TIM_IC_CaptureCallback>
 800e026:	e005      	b.n	800e034 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e028:	6878      	ldr	r0, [r7, #4]
 800e02a:	f000 f926 	bl	800e27a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e02e:	6878      	ldr	r0, [r7, #4]
 800e030:	f000 f937 	bl	800e2a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	2200      	movs	r2, #0
 800e038:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	691b      	ldr	r3, [r3, #16]
 800e040:	f003 0301 	and.w	r3, r3, #1
 800e044:	2b01      	cmp	r3, #1
 800e046:	d10e      	bne.n	800e066 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	68db      	ldr	r3, [r3, #12]
 800e04e:	f003 0301 	and.w	r3, r3, #1
 800e052:	2b01      	cmp	r3, #1
 800e054:	d107      	bne.n	800e066 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	f06f 0201 	mvn.w	r2, #1
 800e05e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e060:	6878      	ldr	r0, [r7, #4]
 800e062:	f7f5 ff9d 	bl	8003fa0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	691b      	ldr	r3, [r3, #16]
 800e06c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e070:	2b80      	cmp	r3, #128	; 0x80
 800e072:	d10e      	bne.n	800e092 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	68db      	ldr	r3, [r3, #12]
 800e07a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e07e:	2b80      	cmp	r3, #128	; 0x80
 800e080:	d107      	bne.n	800e092 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e08a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e08c:	6878      	ldr	r0, [r7, #4]
 800e08e:	f000 fadd 	bl	800e64c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	691b      	ldr	r3, [r3, #16]
 800e098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e09c:	2b40      	cmp	r3, #64	; 0x40
 800e09e:	d10e      	bne.n	800e0be <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	68db      	ldr	r3, [r3, #12]
 800e0a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0aa:	2b40      	cmp	r3, #64	; 0x40
 800e0ac:	d107      	bne.n	800e0be <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e0b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e0b8:	6878      	ldr	r0, [r7, #4]
 800e0ba:	f000 f8fc 	bl	800e2b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	691b      	ldr	r3, [r3, #16]
 800e0c4:	f003 0320 	and.w	r3, r3, #32
 800e0c8:	2b20      	cmp	r3, #32
 800e0ca:	d10e      	bne.n	800e0ea <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	68db      	ldr	r3, [r3, #12]
 800e0d2:	f003 0320 	and.w	r3, r3, #32
 800e0d6:	2b20      	cmp	r3, #32
 800e0d8:	d107      	bne.n	800e0ea <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	f06f 0220 	mvn.w	r2, #32
 800e0e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e0e4:	6878      	ldr	r0, [r7, #4]
 800e0e6:	f000 faa7 	bl	800e638 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e0ea:	bf00      	nop
 800e0ec:	3708      	adds	r7, #8
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	bd80      	pop	{r7, pc}

0800e0f2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e0f2:	b580      	push	{r7, lr}
 800e0f4:	b084      	sub	sp, #16
 800e0f6:	af00      	add	r7, sp, #0
 800e0f8:	6078      	str	r0, [r7, #4]
 800e0fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e102:	2b01      	cmp	r3, #1
 800e104:	d101      	bne.n	800e10a <HAL_TIM_ConfigClockSource+0x18>
 800e106:	2302      	movs	r3, #2
 800e108:	e0b3      	b.n	800e272 <HAL_TIM_ConfigClockSource+0x180>
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	2201      	movs	r2, #1
 800e10e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	2202      	movs	r2, #2
 800e116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	689b      	ldr	r3, [r3, #8]
 800e120:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800e128:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e130:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	68fa      	ldr	r2, [r7, #12]
 800e138:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e13a:	683b      	ldr	r3, [r7, #0]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e142:	d03e      	beq.n	800e1c2 <HAL_TIM_ConfigClockSource+0xd0>
 800e144:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e148:	f200 8087 	bhi.w	800e25a <HAL_TIM_ConfigClockSource+0x168>
 800e14c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e150:	f000 8085 	beq.w	800e25e <HAL_TIM_ConfigClockSource+0x16c>
 800e154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e158:	d87f      	bhi.n	800e25a <HAL_TIM_ConfigClockSource+0x168>
 800e15a:	2b70      	cmp	r3, #112	; 0x70
 800e15c:	d01a      	beq.n	800e194 <HAL_TIM_ConfigClockSource+0xa2>
 800e15e:	2b70      	cmp	r3, #112	; 0x70
 800e160:	d87b      	bhi.n	800e25a <HAL_TIM_ConfigClockSource+0x168>
 800e162:	2b60      	cmp	r3, #96	; 0x60
 800e164:	d050      	beq.n	800e208 <HAL_TIM_ConfigClockSource+0x116>
 800e166:	2b60      	cmp	r3, #96	; 0x60
 800e168:	d877      	bhi.n	800e25a <HAL_TIM_ConfigClockSource+0x168>
 800e16a:	2b50      	cmp	r3, #80	; 0x50
 800e16c:	d03c      	beq.n	800e1e8 <HAL_TIM_ConfigClockSource+0xf6>
 800e16e:	2b50      	cmp	r3, #80	; 0x50
 800e170:	d873      	bhi.n	800e25a <HAL_TIM_ConfigClockSource+0x168>
 800e172:	2b40      	cmp	r3, #64	; 0x40
 800e174:	d058      	beq.n	800e228 <HAL_TIM_ConfigClockSource+0x136>
 800e176:	2b40      	cmp	r3, #64	; 0x40
 800e178:	d86f      	bhi.n	800e25a <HAL_TIM_ConfigClockSource+0x168>
 800e17a:	2b30      	cmp	r3, #48	; 0x30
 800e17c:	d064      	beq.n	800e248 <HAL_TIM_ConfigClockSource+0x156>
 800e17e:	2b30      	cmp	r3, #48	; 0x30
 800e180:	d86b      	bhi.n	800e25a <HAL_TIM_ConfigClockSource+0x168>
 800e182:	2b20      	cmp	r3, #32
 800e184:	d060      	beq.n	800e248 <HAL_TIM_ConfigClockSource+0x156>
 800e186:	2b20      	cmp	r3, #32
 800e188:	d867      	bhi.n	800e25a <HAL_TIM_ConfigClockSource+0x168>
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d05c      	beq.n	800e248 <HAL_TIM_ConfigClockSource+0x156>
 800e18e:	2b10      	cmp	r3, #16
 800e190:	d05a      	beq.n	800e248 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800e192:	e062      	b.n	800e25a <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	6818      	ldr	r0, [r3, #0]
 800e198:	683b      	ldr	r3, [r7, #0]
 800e19a:	6899      	ldr	r1, [r3, #8]
 800e19c:	683b      	ldr	r3, [r7, #0]
 800e19e:	685a      	ldr	r2, [r3, #4]
 800e1a0:	683b      	ldr	r3, [r7, #0]
 800e1a2:	68db      	ldr	r3, [r3, #12]
 800e1a4:	f000 f9ac 	bl	800e500 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	689b      	ldr	r3, [r3, #8]
 800e1ae:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e1b6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	68fa      	ldr	r2, [r7, #12]
 800e1be:	609a      	str	r2, [r3, #8]
      break;
 800e1c0:	e04e      	b.n	800e260 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	6818      	ldr	r0, [r3, #0]
 800e1c6:	683b      	ldr	r3, [r7, #0]
 800e1c8:	6899      	ldr	r1, [r3, #8]
 800e1ca:	683b      	ldr	r3, [r7, #0]
 800e1cc:	685a      	ldr	r2, [r3, #4]
 800e1ce:	683b      	ldr	r3, [r7, #0]
 800e1d0:	68db      	ldr	r3, [r3, #12]
 800e1d2:	f000 f995 	bl	800e500 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	689a      	ldr	r2, [r3, #8]
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e1e4:	609a      	str	r2, [r3, #8]
      break;
 800e1e6:	e03b      	b.n	800e260 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	6818      	ldr	r0, [r3, #0]
 800e1ec:	683b      	ldr	r3, [r7, #0]
 800e1ee:	6859      	ldr	r1, [r3, #4]
 800e1f0:	683b      	ldr	r3, [r7, #0]
 800e1f2:	68db      	ldr	r3, [r3, #12]
 800e1f4:	461a      	mov	r2, r3
 800e1f6:	f000 f909 	bl	800e40c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	2150      	movs	r1, #80	; 0x50
 800e200:	4618      	mov	r0, r3
 800e202:	f000 f962 	bl	800e4ca <TIM_ITRx_SetConfig>
      break;
 800e206:	e02b      	b.n	800e260 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	6818      	ldr	r0, [r3, #0]
 800e20c:	683b      	ldr	r3, [r7, #0]
 800e20e:	6859      	ldr	r1, [r3, #4]
 800e210:	683b      	ldr	r3, [r7, #0]
 800e212:	68db      	ldr	r3, [r3, #12]
 800e214:	461a      	mov	r2, r3
 800e216:	f000 f928 	bl	800e46a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	2160      	movs	r1, #96	; 0x60
 800e220:	4618      	mov	r0, r3
 800e222:	f000 f952 	bl	800e4ca <TIM_ITRx_SetConfig>
      break;
 800e226:	e01b      	b.n	800e260 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	6818      	ldr	r0, [r3, #0]
 800e22c:	683b      	ldr	r3, [r7, #0]
 800e22e:	6859      	ldr	r1, [r3, #4]
 800e230:	683b      	ldr	r3, [r7, #0]
 800e232:	68db      	ldr	r3, [r3, #12]
 800e234:	461a      	mov	r2, r3
 800e236:	f000 f8e9 	bl	800e40c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	2140      	movs	r1, #64	; 0x40
 800e240:	4618      	mov	r0, r3
 800e242:	f000 f942 	bl	800e4ca <TIM_ITRx_SetConfig>
      break;
 800e246:	e00b      	b.n	800e260 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	681a      	ldr	r2, [r3, #0]
 800e24c:	683b      	ldr	r3, [r7, #0]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	4619      	mov	r1, r3
 800e252:	4610      	mov	r0, r2
 800e254:	f000 f939 	bl	800e4ca <TIM_ITRx_SetConfig>
      break;
 800e258:	e002      	b.n	800e260 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800e25a:	bf00      	nop
 800e25c:	e000      	b.n	800e260 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800e25e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	2201      	movs	r2, #1
 800e264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	2200      	movs	r2, #0
 800e26c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e270:	2300      	movs	r3, #0
}
 800e272:	4618      	mov	r0, r3
 800e274:	3710      	adds	r7, #16
 800e276:	46bd      	mov	sp, r7
 800e278:	bd80      	pop	{r7, pc}

0800e27a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e27a:	b480      	push	{r7}
 800e27c:	b083      	sub	sp, #12
 800e27e:	af00      	add	r7, sp, #0
 800e280:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e282:	bf00      	nop
 800e284:	370c      	adds	r7, #12
 800e286:	46bd      	mov	sp, r7
 800e288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e28c:	4770      	bx	lr

0800e28e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e28e:	b480      	push	{r7}
 800e290:	b083      	sub	sp, #12
 800e292:	af00      	add	r7, sp, #0
 800e294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e296:	bf00      	nop
 800e298:	370c      	adds	r7, #12
 800e29a:	46bd      	mov	sp, r7
 800e29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a0:	4770      	bx	lr

0800e2a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e2a2:	b480      	push	{r7}
 800e2a4:	b083      	sub	sp, #12
 800e2a6:	af00      	add	r7, sp, #0
 800e2a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e2aa:	bf00      	nop
 800e2ac:	370c      	adds	r7, #12
 800e2ae:	46bd      	mov	sp, r7
 800e2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b4:	4770      	bx	lr

0800e2b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e2b6:	b480      	push	{r7}
 800e2b8:	b083      	sub	sp, #12
 800e2ba:	af00      	add	r7, sp, #0
 800e2bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e2be:	bf00      	nop
 800e2c0:	370c      	adds	r7, #12
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c8:	4770      	bx	lr
	...

0800e2cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e2cc:	b480      	push	{r7}
 800e2ce:	b085      	sub	sp, #20
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
 800e2d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	4a40      	ldr	r2, [pc, #256]	; (800e3e0 <TIM_Base_SetConfig+0x114>)
 800e2e0:	4293      	cmp	r3, r2
 800e2e2:	d013      	beq.n	800e30c <TIM_Base_SetConfig+0x40>
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e2ea:	d00f      	beq.n	800e30c <TIM_Base_SetConfig+0x40>
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	4a3d      	ldr	r2, [pc, #244]	; (800e3e4 <TIM_Base_SetConfig+0x118>)
 800e2f0:	4293      	cmp	r3, r2
 800e2f2:	d00b      	beq.n	800e30c <TIM_Base_SetConfig+0x40>
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	4a3c      	ldr	r2, [pc, #240]	; (800e3e8 <TIM_Base_SetConfig+0x11c>)
 800e2f8:	4293      	cmp	r3, r2
 800e2fa:	d007      	beq.n	800e30c <TIM_Base_SetConfig+0x40>
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	4a3b      	ldr	r2, [pc, #236]	; (800e3ec <TIM_Base_SetConfig+0x120>)
 800e300:	4293      	cmp	r3, r2
 800e302:	d003      	beq.n	800e30c <TIM_Base_SetConfig+0x40>
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	4a3a      	ldr	r2, [pc, #232]	; (800e3f0 <TIM_Base_SetConfig+0x124>)
 800e308:	4293      	cmp	r3, r2
 800e30a:	d108      	bne.n	800e31e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e312:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e314:	683b      	ldr	r3, [r7, #0]
 800e316:	685b      	ldr	r3, [r3, #4]
 800e318:	68fa      	ldr	r2, [r7, #12]
 800e31a:	4313      	orrs	r3, r2
 800e31c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	4a2f      	ldr	r2, [pc, #188]	; (800e3e0 <TIM_Base_SetConfig+0x114>)
 800e322:	4293      	cmp	r3, r2
 800e324:	d02b      	beq.n	800e37e <TIM_Base_SetConfig+0xb2>
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e32c:	d027      	beq.n	800e37e <TIM_Base_SetConfig+0xb2>
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	4a2c      	ldr	r2, [pc, #176]	; (800e3e4 <TIM_Base_SetConfig+0x118>)
 800e332:	4293      	cmp	r3, r2
 800e334:	d023      	beq.n	800e37e <TIM_Base_SetConfig+0xb2>
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	4a2b      	ldr	r2, [pc, #172]	; (800e3e8 <TIM_Base_SetConfig+0x11c>)
 800e33a:	4293      	cmp	r3, r2
 800e33c:	d01f      	beq.n	800e37e <TIM_Base_SetConfig+0xb2>
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	4a2a      	ldr	r2, [pc, #168]	; (800e3ec <TIM_Base_SetConfig+0x120>)
 800e342:	4293      	cmp	r3, r2
 800e344:	d01b      	beq.n	800e37e <TIM_Base_SetConfig+0xb2>
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	4a29      	ldr	r2, [pc, #164]	; (800e3f0 <TIM_Base_SetConfig+0x124>)
 800e34a:	4293      	cmp	r3, r2
 800e34c:	d017      	beq.n	800e37e <TIM_Base_SetConfig+0xb2>
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	4a28      	ldr	r2, [pc, #160]	; (800e3f4 <TIM_Base_SetConfig+0x128>)
 800e352:	4293      	cmp	r3, r2
 800e354:	d013      	beq.n	800e37e <TIM_Base_SetConfig+0xb2>
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	4a27      	ldr	r2, [pc, #156]	; (800e3f8 <TIM_Base_SetConfig+0x12c>)
 800e35a:	4293      	cmp	r3, r2
 800e35c:	d00f      	beq.n	800e37e <TIM_Base_SetConfig+0xb2>
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	4a26      	ldr	r2, [pc, #152]	; (800e3fc <TIM_Base_SetConfig+0x130>)
 800e362:	4293      	cmp	r3, r2
 800e364:	d00b      	beq.n	800e37e <TIM_Base_SetConfig+0xb2>
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	4a25      	ldr	r2, [pc, #148]	; (800e400 <TIM_Base_SetConfig+0x134>)
 800e36a:	4293      	cmp	r3, r2
 800e36c:	d007      	beq.n	800e37e <TIM_Base_SetConfig+0xb2>
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	4a24      	ldr	r2, [pc, #144]	; (800e404 <TIM_Base_SetConfig+0x138>)
 800e372:	4293      	cmp	r3, r2
 800e374:	d003      	beq.n	800e37e <TIM_Base_SetConfig+0xb2>
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	4a23      	ldr	r2, [pc, #140]	; (800e408 <TIM_Base_SetConfig+0x13c>)
 800e37a:	4293      	cmp	r3, r2
 800e37c:	d108      	bne.n	800e390 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e384:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e386:	683b      	ldr	r3, [r7, #0]
 800e388:	68db      	ldr	r3, [r3, #12]
 800e38a:	68fa      	ldr	r2, [r7, #12]
 800e38c:	4313      	orrs	r3, r2
 800e38e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e396:	683b      	ldr	r3, [r7, #0]
 800e398:	695b      	ldr	r3, [r3, #20]
 800e39a:	4313      	orrs	r3, r2
 800e39c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	68fa      	ldr	r2, [r7, #12]
 800e3a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e3a4:	683b      	ldr	r3, [r7, #0]
 800e3a6:	689a      	ldr	r2, [r3, #8]
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e3ac:	683b      	ldr	r3, [r7, #0]
 800e3ae:	681a      	ldr	r2, [r3, #0]
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	4a0a      	ldr	r2, [pc, #40]	; (800e3e0 <TIM_Base_SetConfig+0x114>)
 800e3b8:	4293      	cmp	r3, r2
 800e3ba:	d003      	beq.n	800e3c4 <TIM_Base_SetConfig+0xf8>
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	4a0c      	ldr	r2, [pc, #48]	; (800e3f0 <TIM_Base_SetConfig+0x124>)
 800e3c0:	4293      	cmp	r3, r2
 800e3c2:	d103      	bne.n	800e3cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e3c4:	683b      	ldr	r3, [r7, #0]
 800e3c6:	691a      	ldr	r2, [r3, #16]
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	2201      	movs	r2, #1
 800e3d0:	615a      	str	r2, [r3, #20]
}
 800e3d2:	bf00      	nop
 800e3d4:	3714      	adds	r7, #20
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3dc:	4770      	bx	lr
 800e3de:	bf00      	nop
 800e3e0:	40010000 	.word	0x40010000
 800e3e4:	40000400 	.word	0x40000400
 800e3e8:	40000800 	.word	0x40000800
 800e3ec:	40000c00 	.word	0x40000c00
 800e3f0:	40010400 	.word	0x40010400
 800e3f4:	40014000 	.word	0x40014000
 800e3f8:	40014400 	.word	0x40014400
 800e3fc:	40014800 	.word	0x40014800
 800e400:	40001800 	.word	0x40001800
 800e404:	40001c00 	.word	0x40001c00
 800e408:	40002000 	.word	0x40002000

0800e40c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e40c:	b480      	push	{r7}
 800e40e:	b087      	sub	sp, #28
 800e410:	af00      	add	r7, sp, #0
 800e412:	60f8      	str	r0, [r7, #12]
 800e414:	60b9      	str	r1, [r7, #8]
 800e416:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	6a1b      	ldr	r3, [r3, #32]
 800e41c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	6a1b      	ldr	r3, [r3, #32]
 800e422:	f023 0201 	bic.w	r2, r3, #1
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	699b      	ldr	r3, [r3, #24]
 800e42e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e430:	693b      	ldr	r3, [r7, #16]
 800e432:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e436:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	011b      	lsls	r3, r3, #4
 800e43c:	693a      	ldr	r2, [r7, #16]
 800e43e:	4313      	orrs	r3, r2
 800e440:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e442:	697b      	ldr	r3, [r7, #20]
 800e444:	f023 030a 	bic.w	r3, r3, #10
 800e448:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e44a:	697a      	ldr	r2, [r7, #20]
 800e44c:	68bb      	ldr	r3, [r7, #8]
 800e44e:	4313      	orrs	r3, r2
 800e450:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	693a      	ldr	r2, [r7, #16]
 800e456:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	697a      	ldr	r2, [r7, #20]
 800e45c:	621a      	str	r2, [r3, #32]
}
 800e45e:	bf00      	nop
 800e460:	371c      	adds	r7, #28
 800e462:	46bd      	mov	sp, r7
 800e464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e468:	4770      	bx	lr

0800e46a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e46a:	b480      	push	{r7}
 800e46c:	b087      	sub	sp, #28
 800e46e:	af00      	add	r7, sp, #0
 800e470:	60f8      	str	r0, [r7, #12]
 800e472:	60b9      	str	r1, [r7, #8]
 800e474:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	6a1b      	ldr	r3, [r3, #32]
 800e47a:	f023 0210 	bic.w	r2, r3, #16
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	699b      	ldr	r3, [r3, #24]
 800e486:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	6a1b      	ldr	r3, [r3, #32]
 800e48c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e48e:	697b      	ldr	r3, [r7, #20]
 800e490:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e494:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	031b      	lsls	r3, r3, #12
 800e49a:	697a      	ldr	r2, [r7, #20]
 800e49c:	4313      	orrs	r3, r2
 800e49e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e4a0:	693b      	ldr	r3, [r7, #16]
 800e4a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e4a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e4a8:	68bb      	ldr	r3, [r7, #8]
 800e4aa:	011b      	lsls	r3, r3, #4
 800e4ac:	693a      	ldr	r2, [r7, #16]
 800e4ae:	4313      	orrs	r3, r2
 800e4b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	697a      	ldr	r2, [r7, #20]
 800e4b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	693a      	ldr	r2, [r7, #16]
 800e4bc:	621a      	str	r2, [r3, #32]
}
 800e4be:	bf00      	nop
 800e4c0:	371c      	adds	r7, #28
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c8:	4770      	bx	lr

0800e4ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e4ca:	b480      	push	{r7}
 800e4cc:	b085      	sub	sp, #20
 800e4ce:	af00      	add	r7, sp, #0
 800e4d0:	6078      	str	r0, [r7, #4]
 800e4d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	689b      	ldr	r3, [r3, #8]
 800e4d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e4e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e4e2:	683a      	ldr	r2, [r7, #0]
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	4313      	orrs	r3, r2
 800e4e8:	f043 0307 	orr.w	r3, r3, #7
 800e4ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	68fa      	ldr	r2, [r7, #12]
 800e4f2:	609a      	str	r2, [r3, #8]
}
 800e4f4:	bf00      	nop
 800e4f6:	3714      	adds	r7, #20
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fe:	4770      	bx	lr

0800e500 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e500:	b480      	push	{r7}
 800e502:	b087      	sub	sp, #28
 800e504:	af00      	add	r7, sp, #0
 800e506:	60f8      	str	r0, [r7, #12]
 800e508:	60b9      	str	r1, [r7, #8]
 800e50a:	607a      	str	r2, [r7, #4]
 800e50c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	689b      	ldr	r3, [r3, #8]
 800e512:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e514:	697b      	ldr	r3, [r7, #20]
 800e516:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e51a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e51c:	683b      	ldr	r3, [r7, #0]
 800e51e:	021a      	lsls	r2, r3, #8
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	431a      	orrs	r2, r3
 800e524:	68bb      	ldr	r3, [r7, #8]
 800e526:	4313      	orrs	r3, r2
 800e528:	697a      	ldr	r2, [r7, #20]
 800e52a:	4313      	orrs	r3, r2
 800e52c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	697a      	ldr	r2, [r7, #20]
 800e532:	609a      	str	r2, [r3, #8]
}
 800e534:	bf00      	nop
 800e536:	371c      	adds	r7, #28
 800e538:	46bd      	mov	sp, r7
 800e53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e53e:	4770      	bx	lr

0800e540 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e540:	b480      	push	{r7}
 800e542:	b085      	sub	sp, #20
 800e544:	af00      	add	r7, sp, #0
 800e546:	6078      	str	r0, [r7, #4]
 800e548:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e550:	2b01      	cmp	r3, #1
 800e552:	d101      	bne.n	800e558 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e554:	2302      	movs	r3, #2
 800e556:	e05a      	b.n	800e60e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	2201      	movs	r2, #1
 800e55c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	2202      	movs	r2, #2
 800e564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	685b      	ldr	r3, [r3, #4]
 800e56e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	689b      	ldr	r3, [r3, #8]
 800e576:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e57e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e580:	683b      	ldr	r3, [r7, #0]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	68fa      	ldr	r2, [r7, #12]
 800e586:	4313      	orrs	r3, r2
 800e588:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	68fa      	ldr	r2, [r7, #12]
 800e590:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	4a21      	ldr	r2, [pc, #132]	; (800e61c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800e598:	4293      	cmp	r3, r2
 800e59a:	d022      	beq.n	800e5e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e5a4:	d01d      	beq.n	800e5e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	4a1d      	ldr	r2, [pc, #116]	; (800e620 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800e5ac:	4293      	cmp	r3, r2
 800e5ae:	d018      	beq.n	800e5e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	4a1b      	ldr	r2, [pc, #108]	; (800e624 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800e5b6:	4293      	cmp	r3, r2
 800e5b8:	d013      	beq.n	800e5e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	4a1a      	ldr	r2, [pc, #104]	; (800e628 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800e5c0:	4293      	cmp	r3, r2
 800e5c2:	d00e      	beq.n	800e5e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	4a18      	ldr	r2, [pc, #96]	; (800e62c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800e5ca:	4293      	cmp	r3, r2
 800e5cc:	d009      	beq.n	800e5e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	4a17      	ldr	r2, [pc, #92]	; (800e630 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800e5d4:	4293      	cmp	r3, r2
 800e5d6:	d004      	beq.n	800e5e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	4a15      	ldr	r2, [pc, #84]	; (800e634 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800e5de:	4293      	cmp	r3, r2
 800e5e0:	d10c      	bne.n	800e5fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e5e2:	68bb      	ldr	r3, [r7, #8]
 800e5e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e5e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e5ea:	683b      	ldr	r3, [r7, #0]
 800e5ec:	685b      	ldr	r3, [r3, #4]
 800e5ee:	68ba      	ldr	r2, [r7, #8]
 800e5f0:	4313      	orrs	r3, r2
 800e5f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	68ba      	ldr	r2, [r7, #8]
 800e5fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	2201      	movs	r2, #1
 800e600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	2200      	movs	r2, #0
 800e608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e60c:	2300      	movs	r3, #0
}
 800e60e:	4618      	mov	r0, r3
 800e610:	3714      	adds	r7, #20
 800e612:	46bd      	mov	sp, r7
 800e614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e618:	4770      	bx	lr
 800e61a:	bf00      	nop
 800e61c:	40010000 	.word	0x40010000
 800e620:	40000400 	.word	0x40000400
 800e624:	40000800 	.word	0x40000800
 800e628:	40000c00 	.word	0x40000c00
 800e62c:	40010400 	.word	0x40010400
 800e630:	40014000 	.word	0x40014000
 800e634:	40001800 	.word	0x40001800

0800e638 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e638:	b480      	push	{r7}
 800e63a:	b083      	sub	sp, #12
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e640:	bf00      	nop
 800e642:	370c      	adds	r7, #12
 800e644:	46bd      	mov	sp, r7
 800e646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e64a:	4770      	bx	lr

0800e64c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e64c:	b480      	push	{r7}
 800e64e:	b083      	sub	sp, #12
 800e650:	af00      	add	r7, sp, #0
 800e652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e654:	bf00      	nop
 800e656:	370c      	adds	r7, #12
 800e658:	46bd      	mov	sp, r7
 800e65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e65e:	4770      	bx	lr

0800e660 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e660:	b580      	push	{r7, lr}
 800e662:	b082      	sub	sp, #8
 800e664:	af00      	add	r7, sp, #0
 800e666:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d101      	bne.n	800e672 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e66e:	2301      	movs	r3, #1
 800e670:	e03f      	b.n	800e6f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e678:	b2db      	uxtb	r3, r3
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d106      	bne.n	800e68c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	2200      	movs	r2, #0
 800e682:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e686:	6878      	ldr	r0, [r7, #4]
 800e688:	f7fc fdf2 	bl	800b270 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	2224      	movs	r2, #36	; 0x24
 800e690:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	68da      	ldr	r2, [r3, #12]
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e6a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800e6a4:	6878      	ldr	r0, [r7, #4]
 800e6a6:	f000 fb6b 	bl	800ed80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	691a      	ldr	r2, [r3, #16]
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e6b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	695a      	ldr	r2, [r3, #20]
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e6c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	68da      	ldr	r2, [r3, #12]
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e6d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	2200      	movs	r2, #0
 800e6de:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	2220      	movs	r2, #32
 800e6e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	2220      	movs	r2, #32
 800e6ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800e6f0:	2300      	movs	r3, #0
}
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	3708      	adds	r7, #8
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	bd80      	pop	{r7, pc}
	...

0800e6fc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e6fc:	b580      	push	{r7, lr}
 800e6fe:	b086      	sub	sp, #24
 800e700:	af00      	add	r7, sp, #0
 800e702:	60f8      	str	r0, [r7, #12]
 800e704:	60b9      	str	r1, [r7, #8]
 800e706:	4613      	mov	r3, r2
 800e708:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e710:	b2db      	uxtb	r3, r3
 800e712:	2b20      	cmp	r3, #32
 800e714:	d153      	bne.n	800e7be <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800e716:	68bb      	ldr	r3, [r7, #8]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d002      	beq.n	800e722 <HAL_UART_Transmit_DMA+0x26>
 800e71c:	88fb      	ldrh	r3, [r7, #6]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d101      	bne.n	800e726 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800e722:	2301      	movs	r3, #1
 800e724:	e04c      	b.n	800e7c0 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e72c:	2b01      	cmp	r3, #1
 800e72e:	d101      	bne.n	800e734 <HAL_UART_Transmit_DMA+0x38>
 800e730:	2302      	movs	r3, #2
 800e732:	e045      	b.n	800e7c0 <HAL_UART_Transmit_DMA+0xc4>
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	2201      	movs	r2, #1
 800e738:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800e73c:	68ba      	ldr	r2, [r7, #8]
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	88fa      	ldrh	r2, [r7, #6]
 800e746:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	88fa      	ldrh	r2, [r7, #6]
 800e74c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	2200      	movs	r2, #0
 800e752:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	2221      	movs	r2, #33	; 0x21
 800e758:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e760:	4a19      	ldr	r2, [pc, #100]	; (800e7c8 <HAL_UART_Transmit_DMA+0xcc>)
 800e762:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e768:	4a18      	ldr	r2, [pc, #96]	; (800e7cc <HAL_UART_Transmit_DMA+0xd0>)
 800e76a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e770:	4a17      	ldr	r2, [pc, #92]	; (800e7d0 <HAL_UART_Transmit_DMA+0xd4>)
 800e772:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e778:	2200      	movs	r2, #0
 800e77a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800e77c:	f107 0308 	add.w	r3, r7, #8
 800e780:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e786:	697b      	ldr	r3, [r7, #20]
 800e788:	6819      	ldr	r1, [r3, #0]
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	3304      	adds	r3, #4
 800e790:	461a      	mov	r2, r3
 800e792:	88fb      	ldrh	r3, [r7, #6]
 800e794:	f7fd f836 	bl	800b804 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e7a0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	2200      	movs	r2, #0
 800e7a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	695a      	ldr	r2, [r3, #20]
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e7b8:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	e000      	b.n	800e7c0 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800e7be:	2302      	movs	r3, #2
  }
}
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	3718      	adds	r7, #24
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	bd80      	pop	{r7, pc}
 800e7c8:	0800ea11 	.word	0x0800ea11
 800e7cc:	0800ea63 	.word	0x0800ea63
 800e7d0:	0800ea7f 	.word	0x0800ea7f

0800e7d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	b088      	sub	sp, #32
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	68db      	ldr	r3, [r3, #12]
 800e7ea:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	695b      	ldr	r3, [r3, #20]
 800e7f2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800e7fc:	69fb      	ldr	r3, [r7, #28]
 800e7fe:	f003 030f 	and.w	r3, r3, #15
 800e802:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800e804:	693b      	ldr	r3, [r7, #16]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d10d      	bne.n	800e826 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e80a:	69fb      	ldr	r3, [r7, #28]
 800e80c:	f003 0320 	and.w	r3, r3, #32
 800e810:	2b00      	cmp	r3, #0
 800e812:	d008      	beq.n	800e826 <HAL_UART_IRQHandler+0x52>
 800e814:	69bb      	ldr	r3, [r7, #24]
 800e816:	f003 0320 	and.w	r3, r3, #32
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d003      	beq.n	800e826 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800e81e:	6878      	ldr	r0, [r7, #4]
 800e820:	f000 fa2d 	bl	800ec7e <UART_Receive_IT>
      return;
 800e824:	e0d0      	b.n	800e9c8 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800e826:	693b      	ldr	r3, [r7, #16]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	f000 80b0 	beq.w	800e98e <HAL_UART_IRQHandler+0x1ba>
 800e82e:	697b      	ldr	r3, [r7, #20]
 800e830:	f003 0301 	and.w	r3, r3, #1
 800e834:	2b00      	cmp	r3, #0
 800e836:	d105      	bne.n	800e844 <HAL_UART_IRQHandler+0x70>
 800e838:	69bb      	ldr	r3, [r7, #24]
 800e83a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800e83e:	2b00      	cmp	r3, #0
 800e840:	f000 80a5 	beq.w	800e98e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800e844:	69fb      	ldr	r3, [r7, #28]
 800e846:	f003 0301 	and.w	r3, r3, #1
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d00a      	beq.n	800e864 <HAL_UART_IRQHandler+0x90>
 800e84e:	69bb      	ldr	r3, [r7, #24]
 800e850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e854:	2b00      	cmp	r3, #0
 800e856:	d005      	beq.n	800e864 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e85c:	f043 0201 	orr.w	r2, r3, #1
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e864:	69fb      	ldr	r3, [r7, #28]
 800e866:	f003 0304 	and.w	r3, r3, #4
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d00a      	beq.n	800e884 <HAL_UART_IRQHandler+0xb0>
 800e86e:	697b      	ldr	r3, [r7, #20]
 800e870:	f003 0301 	and.w	r3, r3, #1
 800e874:	2b00      	cmp	r3, #0
 800e876:	d005      	beq.n	800e884 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e87c:	f043 0202 	orr.w	r2, r3, #2
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e884:	69fb      	ldr	r3, [r7, #28]
 800e886:	f003 0302 	and.w	r3, r3, #2
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d00a      	beq.n	800e8a4 <HAL_UART_IRQHandler+0xd0>
 800e88e:	697b      	ldr	r3, [r7, #20]
 800e890:	f003 0301 	and.w	r3, r3, #1
 800e894:	2b00      	cmp	r3, #0
 800e896:	d005      	beq.n	800e8a4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e89c:	f043 0204 	orr.w	r2, r3, #4
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800e8a4:	69fb      	ldr	r3, [r7, #28]
 800e8a6:	f003 0308 	and.w	r3, r3, #8
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d00f      	beq.n	800e8ce <HAL_UART_IRQHandler+0xfa>
 800e8ae:	69bb      	ldr	r3, [r7, #24]
 800e8b0:	f003 0320 	and.w	r3, r3, #32
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d104      	bne.n	800e8c2 <HAL_UART_IRQHandler+0xee>
 800e8b8:	697b      	ldr	r3, [r7, #20]
 800e8ba:	f003 0301 	and.w	r3, r3, #1
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d005      	beq.n	800e8ce <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8c6:	f043 0208 	orr.w	r2, r3, #8
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d077      	beq.n	800e9c6 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e8d6:	69fb      	ldr	r3, [r7, #28]
 800e8d8:	f003 0320 	and.w	r3, r3, #32
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d007      	beq.n	800e8f0 <HAL_UART_IRQHandler+0x11c>
 800e8e0:	69bb      	ldr	r3, [r7, #24]
 800e8e2:	f003 0320 	and.w	r3, r3, #32
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d002      	beq.n	800e8f0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800e8ea:	6878      	ldr	r0, [r7, #4]
 800e8ec:	f000 f9c7 	bl	800ec7e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	695b      	ldr	r3, [r3, #20]
 800e8f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8fa:	2b40      	cmp	r3, #64	; 0x40
 800e8fc:	bf0c      	ite	eq
 800e8fe:	2301      	moveq	r3, #1
 800e900:	2300      	movne	r3, #0
 800e902:	b2db      	uxtb	r3, r3
 800e904:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e90a:	f003 0308 	and.w	r3, r3, #8
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d102      	bne.n	800e918 <HAL_UART_IRQHandler+0x144>
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d031      	beq.n	800e97c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e918:	6878      	ldr	r0, [r7, #4]
 800e91a:	f000 f910 	bl	800eb3e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	695b      	ldr	r3, [r3, #20]
 800e924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e928:	2b40      	cmp	r3, #64	; 0x40
 800e92a:	d123      	bne.n	800e974 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	695a      	ldr	r2, [r3, #20]
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e93a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e940:	2b00      	cmp	r3, #0
 800e942:	d013      	beq.n	800e96c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e948:	4a21      	ldr	r2, [pc, #132]	; (800e9d0 <HAL_UART_IRQHandler+0x1fc>)
 800e94a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e950:	4618      	mov	r0, r3
 800e952:	f7fc ffaf 	bl	800b8b4 <HAL_DMA_Abort_IT>
 800e956:	4603      	mov	r3, r0
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d016      	beq.n	800e98a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e962:	687a      	ldr	r2, [r7, #4]
 800e964:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800e966:	4610      	mov	r0, r2
 800e968:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e96a:	e00e      	b.n	800e98a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e96c:	6878      	ldr	r0, [r7, #4]
 800e96e:	f000 f845 	bl	800e9fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e972:	e00a      	b.n	800e98a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e974:	6878      	ldr	r0, [r7, #4]
 800e976:	f000 f841 	bl	800e9fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e97a:	e006      	b.n	800e98a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e97c:	6878      	ldr	r0, [r7, #4]
 800e97e:	f000 f83d 	bl	800e9fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	2200      	movs	r2, #0
 800e986:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800e988:	e01d      	b.n	800e9c6 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e98a:	bf00      	nop
    return;
 800e98c:	e01b      	b.n	800e9c6 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800e98e:	69fb      	ldr	r3, [r7, #28]
 800e990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e994:	2b00      	cmp	r3, #0
 800e996:	d008      	beq.n	800e9aa <HAL_UART_IRQHandler+0x1d6>
 800e998:	69bb      	ldr	r3, [r7, #24]
 800e99a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d003      	beq.n	800e9aa <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800e9a2:	6878      	ldr	r0, [r7, #4]
 800e9a4:	f000 f8fd 	bl	800eba2 <UART_Transmit_IT>
    return;
 800e9a8:	e00e      	b.n	800e9c8 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800e9aa:	69fb      	ldr	r3, [r7, #28]
 800e9ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d009      	beq.n	800e9c8 <HAL_UART_IRQHandler+0x1f4>
 800e9b4:	69bb      	ldr	r3, [r7, #24]
 800e9b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d004      	beq.n	800e9c8 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800e9be:	6878      	ldr	r0, [r7, #4]
 800e9c0:	f000 f945 	bl	800ec4e <UART_EndTransmit_IT>
    return;
 800e9c4:	e000      	b.n	800e9c8 <HAL_UART_IRQHandler+0x1f4>
    return;
 800e9c6:	bf00      	nop
  }
}
 800e9c8:	3720      	adds	r7, #32
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	bd80      	pop	{r7, pc}
 800e9ce:	bf00      	nop
 800e9d0:	0800eb7b 	.word	0x0800eb7b

0800e9d4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e9d4:	b480      	push	{r7}
 800e9d6:	b083      	sub	sp, #12
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800e9dc:	bf00      	nop
 800e9de:	370c      	adds	r7, #12
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e6:	4770      	bx	lr

0800e9e8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800e9e8:	b480      	push	{r7}
 800e9ea:	b083      	sub	sp, #12
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800e9f0:	bf00      	nop
 800e9f2:	370c      	adds	r7, #12
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fa:	4770      	bx	lr

0800e9fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e9fc:	b480      	push	{r7}
 800e9fe:	b083      	sub	sp, #12
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ea04:	bf00      	nop
 800ea06:	370c      	adds	r7, #12
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0e:	4770      	bx	lr

0800ea10 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ea10:	b580      	push	{r7, lr}
 800ea12:	b084      	sub	sp, #16
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea1c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d113      	bne.n	800ea54 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	2200      	movs	r2, #0
 800ea30:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	695a      	ldr	r2, [r3, #20]
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ea40:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	68da      	ldr	r2, [r3, #12]
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ea50:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ea52:	e002      	b.n	800ea5a <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800ea54:	68f8      	ldr	r0, [r7, #12]
 800ea56:	f7fc fc8d 	bl	800b374 <HAL_UART_TxCpltCallback>
}
 800ea5a:	bf00      	nop
 800ea5c:	3710      	adds	r7, #16
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	bd80      	pop	{r7, pc}

0800ea62 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ea62:	b580      	push	{r7, lr}
 800ea64:	b084      	sub	sp, #16
 800ea66:	af00      	add	r7, sp, #0
 800ea68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea6e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ea70:	68f8      	ldr	r0, [r7, #12]
 800ea72:	f7ff ffaf 	bl	800e9d4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ea76:	bf00      	nop
 800ea78:	3710      	adds	r7, #16
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	bd80      	pop	{r7, pc}

0800ea7e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ea7e:	b580      	push	{r7, lr}
 800ea80:	b084      	sub	sp, #16
 800ea82:	af00      	add	r7, sp, #0
 800ea84:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800ea86:	2300      	movs	r3, #0
 800ea88:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea8e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800ea90:	68bb      	ldr	r3, [r7, #8]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	695b      	ldr	r3, [r3, #20]
 800ea96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea9a:	2b80      	cmp	r3, #128	; 0x80
 800ea9c:	bf0c      	ite	eq
 800ea9e:	2301      	moveq	r3, #1
 800eaa0:	2300      	movne	r3, #0
 800eaa2:	b2db      	uxtb	r3, r3
 800eaa4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800eaa6:	68bb      	ldr	r3, [r7, #8]
 800eaa8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800eaac:	b2db      	uxtb	r3, r3
 800eaae:	2b21      	cmp	r3, #33	; 0x21
 800eab0:	d108      	bne.n	800eac4 <UART_DMAError+0x46>
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d005      	beq.n	800eac4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800eab8:	68bb      	ldr	r3, [r7, #8]
 800eaba:	2200      	movs	r2, #0
 800eabc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800eabe:	68b8      	ldr	r0, [r7, #8]
 800eac0:	f000 f827 	bl	800eb12 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800eac4:	68bb      	ldr	r3, [r7, #8]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	695b      	ldr	r3, [r3, #20]
 800eaca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eace:	2b40      	cmp	r3, #64	; 0x40
 800ead0:	bf0c      	ite	eq
 800ead2:	2301      	moveq	r3, #1
 800ead4:	2300      	movne	r3, #0
 800ead6:	b2db      	uxtb	r3, r3
 800ead8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800eada:	68bb      	ldr	r3, [r7, #8]
 800eadc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800eae0:	b2db      	uxtb	r3, r3
 800eae2:	2b22      	cmp	r3, #34	; 0x22
 800eae4:	d108      	bne.n	800eaf8 <UART_DMAError+0x7a>
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d005      	beq.n	800eaf8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800eaec:	68bb      	ldr	r3, [r7, #8]
 800eaee:	2200      	movs	r2, #0
 800eaf0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800eaf2:	68b8      	ldr	r0, [r7, #8]
 800eaf4:	f000 f823 	bl	800eb3e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800eaf8:	68bb      	ldr	r3, [r7, #8]
 800eafa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eafc:	f043 0210 	orr.w	r2, r3, #16
 800eb00:	68bb      	ldr	r3, [r7, #8]
 800eb02:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eb04:	68b8      	ldr	r0, [r7, #8]
 800eb06:	f7ff ff79 	bl	800e9fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eb0a:	bf00      	nop
 800eb0c:	3710      	adds	r7, #16
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	bd80      	pop	{r7, pc}

0800eb12 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800eb12:	b480      	push	{r7}
 800eb14:	b083      	sub	sp, #12
 800eb16:	af00      	add	r7, sp, #0
 800eb18:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	68da      	ldr	r2, [r3, #12]
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800eb28:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	2220      	movs	r2, #32
 800eb2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800eb32:	bf00      	nop
 800eb34:	370c      	adds	r7, #12
 800eb36:	46bd      	mov	sp, r7
 800eb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3c:	4770      	bx	lr

0800eb3e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800eb3e:	b480      	push	{r7}
 800eb40:	b083      	sub	sp, #12
 800eb42:	af00      	add	r7, sp, #0
 800eb44:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	68da      	ldr	r2, [r3, #12]
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800eb54:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	695a      	ldr	r2, [r3, #20]
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	f022 0201 	bic.w	r2, r2, #1
 800eb64:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	2220      	movs	r2, #32
 800eb6a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800eb6e:	bf00      	nop
 800eb70:	370c      	adds	r7, #12
 800eb72:	46bd      	mov	sp, r7
 800eb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb78:	4770      	bx	lr

0800eb7a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800eb7a:	b580      	push	{r7, lr}
 800eb7c:	b084      	sub	sp, #16
 800eb7e:	af00      	add	r7, sp, #0
 800eb80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb86:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	2200      	movs	r2, #0
 800eb92:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eb94:	68f8      	ldr	r0, [r7, #12]
 800eb96:	f7ff ff31 	bl	800e9fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eb9a:	bf00      	nop
 800eb9c:	3710      	adds	r7, #16
 800eb9e:	46bd      	mov	sp, r7
 800eba0:	bd80      	pop	{r7, pc}

0800eba2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800eba2:	b480      	push	{r7}
 800eba4:	b085      	sub	sp, #20
 800eba6:	af00      	add	r7, sp, #0
 800eba8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ebb0:	b2db      	uxtb	r3, r3
 800ebb2:	2b21      	cmp	r3, #33	; 0x21
 800ebb4:	d144      	bne.n	800ec40 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	689b      	ldr	r3, [r3, #8]
 800ebba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ebbe:	d11a      	bne.n	800ebf6 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	6a1b      	ldr	r3, [r3, #32]
 800ebc4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	881b      	ldrh	r3, [r3, #0]
 800ebca:	461a      	mov	r2, r3
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ebd4:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	691b      	ldr	r3, [r3, #16]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d105      	bne.n	800ebea <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	6a1b      	ldr	r3, [r3, #32]
 800ebe2:	1c9a      	adds	r2, r3, #2
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	621a      	str	r2, [r3, #32]
 800ebe8:	e00e      	b.n	800ec08 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	6a1b      	ldr	r3, [r3, #32]
 800ebee:	1c5a      	adds	r2, r3, #1
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	621a      	str	r2, [r3, #32]
 800ebf4:	e008      	b.n	800ec08 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	6a1b      	ldr	r3, [r3, #32]
 800ebfa:	1c59      	adds	r1, r3, #1
 800ebfc:	687a      	ldr	r2, [r7, #4]
 800ebfe:	6211      	str	r1, [r2, #32]
 800ec00:	781a      	ldrb	r2, [r3, #0]
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ec0c:	b29b      	uxth	r3, r3
 800ec0e:	3b01      	subs	r3, #1
 800ec10:	b29b      	uxth	r3, r3
 800ec12:	687a      	ldr	r2, [r7, #4]
 800ec14:	4619      	mov	r1, r3
 800ec16:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d10f      	bne.n	800ec3c <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	68da      	ldr	r2, [r3, #12]
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ec2a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	68da      	ldr	r2, [r3, #12]
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ec3a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	e000      	b.n	800ec42 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800ec40:	2302      	movs	r3, #2
  }
}
 800ec42:	4618      	mov	r0, r3
 800ec44:	3714      	adds	r7, #20
 800ec46:	46bd      	mov	sp, r7
 800ec48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec4c:	4770      	bx	lr

0800ec4e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ec4e:	b580      	push	{r7, lr}
 800ec50:	b082      	sub	sp, #8
 800ec52:	af00      	add	r7, sp, #0
 800ec54:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	68da      	ldr	r2, [r3, #12]
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ec64:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	2220      	movs	r2, #32
 800ec6a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ec6e:	6878      	ldr	r0, [r7, #4]
 800ec70:	f7fc fb80 	bl	800b374 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ec74:	2300      	movs	r3, #0
}
 800ec76:	4618      	mov	r0, r3
 800ec78:	3708      	adds	r7, #8
 800ec7a:	46bd      	mov	sp, r7
 800ec7c:	bd80      	pop	{r7, pc}

0800ec7e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ec7e:	b580      	push	{r7, lr}
 800ec80:	b084      	sub	sp, #16
 800ec82:	af00      	add	r7, sp, #0
 800ec84:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ec8c:	b2db      	uxtb	r3, r3
 800ec8e:	2b22      	cmp	r3, #34	; 0x22
 800ec90:	d171      	bne.n	800ed76 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	689b      	ldr	r3, [r3, #8]
 800ec96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ec9a:	d123      	bne.n	800ece4 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eca0:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	691b      	ldr	r3, [r3, #16]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d10e      	bne.n	800ecc8 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	685b      	ldr	r3, [r3, #4]
 800ecb0:	b29b      	uxth	r3, r3
 800ecb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ecb6:	b29a      	uxth	r2, r3
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecc0:	1c9a      	adds	r2, r3, #2
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	629a      	str	r2, [r3, #40]	; 0x28
 800ecc6:	e029      	b.n	800ed1c <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	685b      	ldr	r3, [r3, #4]
 800ecce:	b29b      	uxth	r3, r3
 800ecd0:	b2db      	uxtb	r3, r3
 800ecd2:	b29a      	uxth	r2, r3
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecdc:	1c5a      	adds	r2, r3, #1
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	629a      	str	r2, [r3, #40]	; 0x28
 800ece2:	e01b      	b.n	800ed1c <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	691b      	ldr	r3, [r3, #16]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d10a      	bne.n	800ed02 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	6858      	ldr	r0, [r3, #4]
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecf6:	1c59      	adds	r1, r3, #1
 800ecf8:	687a      	ldr	r2, [r7, #4]
 800ecfa:	6291      	str	r1, [r2, #40]	; 0x28
 800ecfc:	b2c2      	uxtb	r2, r0
 800ecfe:	701a      	strb	r2, [r3, #0]
 800ed00:	e00c      	b.n	800ed1c <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	685b      	ldr	r3, [r3, #4]
 800ed08:	b2da      	uxtb	r2, r3
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed0e:	1c58      	adds	r0, r3, #1
 800ed10:	6879      	ldr	r1, [r7, #4]
 800ed12:	6288      	str	r0, [r1, #40]	; 0x28
 800ed14:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ed18:	b2d2      	uxtb	r2, r2
 800ed1a:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ed20:	b29b      	uxth	r3, r3
 800ed22:	3b01      	subs	r3, #1
 800ed24:	b29b      	uxth	r3, r3
 800ed26:	687a      	ldr	r2, [r7, #4]
 800ed28:	4619      	mov	r1, r3
 800ed2a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d120      	bne.n	800ed72 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	68da      	ldr	r2, [r3, #12]
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	f022 0220 	bic.w	r2, r2, #32
 800ed3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	68da      	ldr	r2, [r3, #12]
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ed4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	695a      	ldr	r2, [r3, #20]
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	f022 0201 	bic.w	r2, r2, #1
 800ed5e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	2220      	movs	r2, #32
 800ed64:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800ed68:	6878      	ldr	r0, [r7, #4]
 800ed6a:	f7ff fe3d 	bl	800e9e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800ed6e:	2300      	movs	r3, #0
 800ed70:	e002      	b.n	800ed78 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800ed72:	2300      	movs	r3, #0
 800ed74:	e000      	b.n	800ed78 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800ed76:	2302      	movs	r3, #2
  }
}
 800ed78:	4618      	mov	r0, r3
 800ed7a:	3710      	adds	r7, #16
 800ed7c:	46bd      	mov	sp, r7
 800ed7e:	bd80      	pop	{r7, pc}

0800ed80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ed80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed84:	b0bd      	sub	sp, #244	; 0xf4
 800ed86:	af00      	add	r7, sp, #0
 800ed88:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ed8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	691b      	ldr	r3, [r3, #16]
 800ed94:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ed98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed9c:	68d9      	ldr	r1, [r3, #12]
 800ed9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eda2:	681a      	ldr	r2, [r3, #0]
 800eda4:	ea40 0301 	orr.w	r3, r0, r1
 800eda8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800edaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800edae:	689a      	ldr	r2, [r3, #8]
 800edb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800edb4:	691b      	ldr	r3, [r3, #16]
 800edb6:	431a      	orrs	r2, r3
 800edb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800edbc:	695b      	ldr	r3, [r3, #20]
 800edbe:	431a      	orrs	r2, r3
 800edc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800edc4:	69db      	ldr	r3, [r3, #28]
 800edc6:	4313      	orrs	r3, r2
 800edc8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 800edcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	68db      	ldr	r3, [r3, #12]
 800edd4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800edd8:	f021 010c 	bic.w	r1, r1, #12
 800eddc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ede0:	681a      	ldr	r2, [r3, #0]
 800ede2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ede6:	430b      	orrs	r3, r1
 800ede8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800edea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	695b      	ldr	r3, [r3, #20]
 800edf2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800edf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800edfa:	6999      	ldr	r1, [r3, #24]
 800edfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ee00:	681a      	ldr	r2, [r3, #0]
 800ee02:	ea40 0301 	orr.w	r3, r0, r1
 800ee06:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ee08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ee0c:	69db      	ldr	r3, [r3, #28]
 800ee0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ee12:	f040 81a5 	bne.w	800f160 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ee16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ee1a:	681a      	ldr	r2, [r3, #0]
 800ee1c:	4bcd      	ldr	r3, [pc, #820]	; (800f154 <UART_SetConfig+0x3d4>)
 800ee1e:	429a      	cmp	r2, r3
 800ee20:	d006      	beq.n	800ee30 <UART_SetConfig+0xb0>
 800ee22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ee26:	681a      	ldr	r2, [r3, #0]
 800ee28:	4bcb      	ldr	r3, [pc, #812]	; (800f158 <UART_SetConfig+0x3d8>)
 800ee2a:	429a      	cmp	r2, r3
 800ee2c:	f040 80cb 	bne.w	800efc6 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ee30:	f7fe ffc2 	bl	800ddb8 <HAL_RCC_GetPCLK2Freq>
 800ee34:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ee38:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ee3c:	461c      	mov	r4, r3
 800ee3e:	f04f 0500 	mov.w	r5, #0
 800ee42:	4622      	mov	r2, r4
 800ee44:	462b      	mov	r3, r5
 800ee46:	1891      	adds	r1, r2, r2
 800ee48:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800ee4c:	415b      	adcs	r3, r3
 800ee4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ee52:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800ee56:	1912      	adds	r2, r2, r4
 800ee58:	eb45 0303 	adc.w	r3, r5, r3
 800ee5c:	f04f 0000 	mov.w	r0, #0
 800ee60:	f04f 0100 	mov.w	r1, #0
 800ee64:	00d9      	lsls	r1, r3, #3
 800ee66:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ee6a:	00d0      	lsls	r0, r2, #3
 800ee6c:	4602      	mov	r2, r0
 800ee6e:	460b      	mov	r3, r1
 800ee70:	1911      	adds	r1, r2, r4
 800ee72:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800ee76:	416b      	adcs	r3, r5
 800ee78:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ee7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ee80:	685b      	ldr	r3, [r3, #4]
 800ee82:	461a      	mov	r2, r3
 800ee84:	f04f 0300 	mov.w	r3, #0
 800ee88:	1891      	adds	r1, r2, r2
 800ee8a:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800ee8e:	415b      	adcs	r3, r3
 800ee90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ee94:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800ee98:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800ee9c:	f7f1 fef4 	bl	8000c88 <__aeabi_uldivmod>
 800eea0:	4602      	mov	r2, r0
 800eea2:	460b      	mov	r3, r1
 800eea4:	4bad      	ldr	r3, [pc, #692]	; (800f15c <UART_SetConfig+0x3dc>)
 800eea6:	fba3 2302 	umull	r2, r3, r3, r2
 800eeaa:	095b      	lsrs	r3, r3, #5
 800eeac:	011e      	lsls	r6, r3, #4
 800eeae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800eeb2:	461c      	mov	r4, r3
 800eeb4:	f04f 0500 	mov.w	r5, #0
 800eeb8:	4622      	mov	r2, r4
 800eeba:	462b      	mov	r3, r5
 800eebc:	1891      	adds	r1, r2, r2
 800eebe:	67b9      	str	r1, [r7, #120]	; 0x78
 800eec0:	415b      	adcs	r3, r3
 800eec2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800eec4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800eec8:	1912      	adds	r2, r2, r4
 800eeca:	eb45 0303 	adc.w	r3, r5, r3
 800eece:	f04f 0000 	mov.w	r0, #0
 800eed2:	f04f 0100 	mov.w	r1, #0
 800eed6:	00d9      	lsls	r1, r3, #3
 800eed8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800eedc:	00d0      	lsls	r0, r2, #3
 800eede:	4602      	mov	r2, r0
 800eee0:	460b      	mov	r3, r1
 800eee2:	1911      	adds	r1, r2, r4
 800eee4:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800eee8:	416b      	adcs	r3, r5
 800eeea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800eeee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eef2:	685b      	ldr	r3, [r3, #4]
 800eef4:	461a      	mov	r2, r3
 800eef6:	f04f 0300 	mov.w	r3, #0
 800eefa:	1891      	adds	r1, r2, r2
 800eefc:	6739      	str	r1, [r7, #112]	; 0x70
 800eefe:	415b      	adcs	r3, r3
 800ef00:	677b      	str	r3, [r7, #116]	; 0x74
 800ef02:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800ef06:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800ef0a:	f7f1 febd 	bl	8000c88 <__aeabi_uldivmod>
 800ef0e:	4602      	mov	r2, r0
 800ef10:	460b      	mov	r3, r1
 800ef12:	4b92      	ldr	r3, [pc, #584]	; (800f15c <UART_SetConfig+0x3dc>)
 800ef14:	fba3 1302 	umull	r1, r3, r3, r2
 800ef18:	095b      	lsrs	r3, r3, #5
 800ef1a:	2164      	movs	r1, #100	; 0x64
 800ef1c:	fb01 f303 	mul.w	r3, r1, r3
 800ef20:	1ad3      	subs	r3, r2, r3
 800ef22:	00db      	lsls	r3, r3, #3
 800ef24:	3332      	adds	r3, #50	; 0x32
 800ef26:	4a8d      	ldr	r2, [pc, #564]	; (800f15c <UART_SetConfig+0x3dc>)
 800ef28:	fba2 2303 	umull	r2, r3, r2, r3
 800ef2c:	095b      	lsrs	r3, r3, #5
 800ef2e:	005b      	lsls	r3, r3, #1
 800ef30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ef34:	441e      	add	r6, r3
 800ef36:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	f04f 0100 	mov.w	r1, #0
 800ef40:	4602      	mov	r2, r0
 800ef42:	460b      	mov	r3, r1
 800ef44:	1894      	adds	r4, r2, r2
 800ef46:	66bc      	str	r4, [r7, #104]	; 0x68
 800ef48:	415b      	adcs	r3, r3
 800ef4a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ef4c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800ef50:	1812      	adds	r2, r2, r0
 800ef52:	eb41 0303 	adc.w	r3, r1, r3
 800ef56:	f04f 0400 	mov.w	r4, #0
 800ef5a:	f04f 0500 	mov.w	r5, #0
 800ef5e:	00dd      	lsls	r5, r3, #3
 800ef60:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ef64:	00d4      	lsls	r4, r2, #3
 800ef66:	4622      	mov	r2, r4
 800ef68:	462b      	mov	r3, r5
 800ef6a:	1814      	adds	r4, r2, r0
 800ef6c:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800ef70:	414b      	adcs	r3, r1
 800ef72:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ef76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ef7a:	685b      	ldr	r3, [r3, #4]
 800ef7c:	461a      	mov	r2, r3
 800ef7e:	f04f 0300 	mov.w	r3, #0
 800ef82:	1891      	adds	r1, r2, r2
 800ef84:	6639      	str	r1, [r7, #96]	; 0x60
 800ef86:	415b      	adcs	r3, r3
 800ef88:	667b      	str	r3, [r7, #100]	; 0x64
 800ef8a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800ef8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800ef92:	f7f1 fe79 	bl	8000c88 <__aeabi_uldivmod>
 800ef96:	4602      	mov	r2, r0
 800ef98:	460b      	mov	r3, r1
 800ef9a:	4b70      	ldr	r3, [pc, #448]	; (800f15c <UART_SetConfig+0x3dc>)
 800ef9c:	fba3 1302 	umull	r1, r3, r3, r2
 800efa0:	095b      	lsrs	r3, r3, #5
 800efa2:	2164      	movs	r1, #100	; 0x64
 800efa4:	fb01 f303 	mul.w	r3, r1, r3
 800efa8:	1ad3      	subs	r3, r2, r3
 800efaa:	00db      	lsls	r3, r3, #3
 800efac:	3332      	adds	r3, #50	; 0x32
 800efae:	4a6b      	ldr	r2, [pc, #428]	; (800f15c <UART_SetConfig+0x3dc>)
 800efb0:	fba2 2303 	umull	r2, r3, r2, r3
 800efb4:	095b      	lsrs	r3, r3, #5
 800efb6:	f003 0207 	and.w	r2, r3, #7
 800efba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	4432      	add	r2, r6
 800efc2:	609a      	str	r2, [r3, #8]
 800efc4:	e26d      	b.n	800f4a2 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800efc6:	f7fe fee3 	bl	800dd90 <HAL_RCC_GetPCLK1Freq>
 800efca:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800efce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800efd2:	461c      	mov	r4, r3
 800efd4:	f04f 0500 	mov.w	r5, #0
 800efd8:	4622      	mov	r2, r4
 800efda:	462b      	mov	r3, r5
 800efdc:	1891      	adds	r1, r2, r2
 800efde:	65b9      	str	r1, [r7, #88]	; 0x58
 800efe0:	415b      	adcs	r3, r3
 800efe2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800efe4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800efe8:	1912      	adds	r2, r2, r4
 800efea:	eb45 0303 	adc.w	r3, r5, r3
 800efee:	f04f 0000 	mov.w	r0, #0
 800eff2:	f04f 0100 	mov.w	r1, #0
 800eff6:	00d9      	lsls	r1, r3, #3
 800eff8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800effc:	00d0      	lsls	r0, r2, #3
 800effe:	4602      	mov	r2, r0
 800f000:	460b      	mov	r3, r1
 800f002:	1911      	adds	r1, r2, r4
 800f004:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800f008:	416b      	adcs	r3, r5
 800f00a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f00e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f012:	685b      	ldr	r3, [r3, #4]
 800f014:	461a      	mov	r2, r3
 800f016:	f04f 0300 	mov.w	r3, #0
 800f01a:	1891      	adds	r1, r2, r2
 800f01c:	6539      	str	r1, [r7, #80]	; 0x50
 800f01e:	415b      	adcs	r3, r3
 800f020:	657b      	str	r3, [r7, #84]	; 0x54
 800f022:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800f026:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800f02a:	f7f1 fe2d 	bl	8000c88 <__aeabi_uldivmod>
 800f02e:	4602      	mov	r2, r0
 800f030:	460b      	mov	r3, r1
 800f032:	4b4a      	ldr	r3, [pc, #296]	; (800f15c <UART_SetConfig+0x3dc>)
 800f034:	fba3 2302 	umull	r2, r3, r3, r2
 800f038:	095b      	lsrs	r3, r3, #5
 800f03a:	011e      	lsls	r6, r3, #4
 800f03c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f040:	461c      	mov	r4, r3
 800f042:	f04f 0500 	mov.w	r5, #0
 800f046:	4622      	mov	r2, r4
 800f048:	462b      	mov	r3, r5
 800f04a:	1891      	adds	r1, r2, r2
 800f04c:	64b9      	str	r1, [r7, #72]	; 0x48
 800f04e:	415b      	adcs	r3, r3
 800f050:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f052:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800f056:	1912      	adds	r2, r2, r4
 800f058:	eb45 0303 	adc.w	r3, r5, r3
 800f05c:	f04f 0000 	mov.w	r0, #0
 800f060:	f04f 0100 	mov.w	r1, #0
 800f064:	00d9      	lsls	r1, r3, #3
 800f066:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f06a:	00d0      	lsls	r0, r2, #3
 800f06c:	4602      	mov	r2, r0
 800f06e:	460b      	mov	r3, r1
 800f070:	1911      	adds	r1, r2, r4
 800f072:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800f076:	416b      	adcs	r3, r5
 800f078:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800f07c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f080:	685b      	ldr	r3, [r3, #4]
 800f082:	461a      	mov	r2, r3
 800f084:	f04f 0300 	mov.w	r3, #0
 800f088:	1891      	adds	r1, r2, r2
 800f08a:	6439      	str	r1, [r7, #64]	; 0x40
 800f08c:	415b      	adcs	r3, r3
 800f08e:	647b      	str	r3, [r7, #68]	; 0x44
 800f090:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800f094:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800f098:	f7f1 fdf6 	bl	8000c88 <__aeabi_uldivmod>
 800f09c:	4602      	mov	r2, r0
 800f09e:	460b      	mov	r3, r1
 800f0a0:	4b2e      	ldr	r3, [pc, #184]	; (800f15c <UART_SetConfig+0x3dc>)
 800f0a2:	fba3 1302 	umull	r1, r3, r3, r2
 800f0a6:	095b      	lsrs	r3, r3, #5
 800f0a8:	2164      	movs	r1, #100	; 0x64
 800f0aa:	fb01 f303 	mul.w	r3, r1, r3
 800f0ae:	1ad3      	subs	r3, r2, r3
 800f0b0:	00db      	lsls	r3, r3, #3
 800f0b2:	3332      	adds	r3, #50	; 0x32
 800f0b4:	4a29      	ldr	r2, [pc, #164]	; (800f15c <UART_SetConfig+0x3dc>)
 800f0b6:	fba2 2303 	umull	r2, r3, r2, r3
 800f0ba:	095b      	lsrs	r3, r3, #5
 800f0bc:	005b      	lsls	r3, r3, #1
 800f0be:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f0c2:	441e      	add	r6, r3
 800f0c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	f04f 0100 	mov.w	r1, #0
 800f0ce:	4602      	mov	r2, r0
 800f0d0:	460b      	mov	r3, r1
 800f0d2:	1894      	adds	r4, r2, r2
 800f0d4:	63bc      	str	r4, [r7, #56]	; 0x38
 800f0d6:	415b      	adcs	r3, r3
 800f0d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f0da:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800f0de:	1812      	adds	r2, r2, r0
 800f0e0:	eb41 0303 	adc.w	r3, r1, r3
 800f0e4:	f04f 0400 	mov.w	r4, #0
 800f0e8:	f04f 0500 	mov.w	r5, #0
 800f0ec:	00dd      	lsls	r5, r3, #3
 800f0ee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f0f2:	00d4      	lsls	r4, r2, #3
 800f0f4:	4622      	mov	r2, r4
 800f0f6:	462b      	mov	r3, r5
 800f0f8:	1814      	adds	r4, r2, r0
 800f0fa:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800f0fe:	414b      	adcs	r3, r1
 800f100:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f108:	685b      	ldr	r3, [r3, #4]
 800f10a:	461a      	mov	r2, r3
 800f10c:	f04f 0300 	mov.w	r3, #0
 800f110:	1891      	adds	r1, r2, r2
 800f112:	6339      	str	r1, [r7, #48]	; 0x30
 800f114:	415b      	adcs	r3, r3
 800f116:	637b      	str	r3, [r7, #52]	; 0x34
 800f118:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f11c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800f120:	f7f1 fdb2 	bl	8000c88 <__aeabi_uldivmod>
 800f124:	4602      	mov	r2, r0
 800f126:	460b      	mov	r3, r1
 800f128:	4b0c      	ldr	r3, [pc, #48]	; (800f15c <UART_SetConfig+0x3dc>)
 800f12a:	fba3 1302 	umull	r1, r3, r3, r2
 800f12e:	095b      	lsrs	r3, r3, #5
 800f130:	2164      	movs	r1, #100	; 0x64
 800f132:	fb01 f303 	mul.w	r3, r1, r3
 800f136:	1ad3      	subs	r3, r2, r3
 800f138:	00db      	lsls	r3, r3, #3
 800f13a:	3332      	adds	r3, #50	; 0x32
 800f13c:	4a07      	ldr	r2, [pc, #28]	; (800f15c <UART_SetConfig+0x3dc>)
 800f13e:	fba2 2303 	umull	r2, r3, r2, r3
 800f142:	095b      	lsrs	r3, r3, #5
 800f144:	f003 0207 	and.w	r2, r3, #7
 800f148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	4432      	add	r2, r6
 800f150:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800f152:	e1a6      	b.n	800f4a2 <UART_SetConfig+0x722>
 800f154:	40011000 	.word	0x40011000
 800f158:	40011400 	.word	0x40011400
 800f15c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f160:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f164:	681a      	ldr	r2, [r3, #0]
 800f166:	4bd1      	ldr	r3, [pc, #836]	; (800f4ac <UART_SetConfig+0x72c>)
 800f168:	429a      	cmp	r2, r3
 800f16a:	d006      	beq.n	800f17a <UART_SetConfig+0x3fa>
 800f16c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f170:	681a      	ldr	r2, [r3, #0]
 800f172:	4bcf      	ldr	r3, [pc, #828]	; (800f4b0 <UART_SetConfig+0x730>)
 800f174:	429a      	cmp	r2, r3
 800f176:	f040 80ca 	bne.w	800f30e <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 800f17a:	f7fe fe1d 	bl	800ddb8 <HAL_RCC_GetPCLK2Freq>
 800f17e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f182:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f186:	461c      	mov	r4, r3
 800f188:	f04f 0500 	mov.w	r5, #0
 800f18c:	4622      	mov	r2, r4
 800f18e:	462b      	mov	r3, r5
 800f190:	1891      	adds	r1, r2, r2
 800f192:	62b9      	str	r1, [r7, #40]	; 0x28
 800f194:	415b      	adcs	r3, r3
 800f196:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f198:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800f19c:	1912      	adds	r2, r2, r4
 800f19e:	eb45 0303 	adc.w	r3, r5, r3
 800f1a2:	f04f 0000 	mov.w	r0, #0
 800f1a6:	f04f 0100 	mov.w	r1, #0
 800f1aa:	00d9      	lsls	r1, r3, #3
 800f1ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f1b0:	00d0      	lsls	r0, r2, #3
 800f1b2:	4602      	mov	r2, r0
 800f1b4:	460b      	mov	r3, r1
 800f1b6:	eb12 0a04 	adds.w	sl, r2, r4
 800f1ba:	eb43 0b05 	adc.w	fp, r3, r5
 800f1be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f1c2:	685b      	ldr	r3, [r3, #4]
 800f1c4:	4618      	mov	r0, r3
 800f1c6:	f04f 0100 	mov.w	r1, #0
 800f1ca:	f04f 0200 	mov.w	r2, #0
 800f1ce:	f04f 0300 	mov.w	r3, #0
 800f1d2:	008b      	lsls	r3, r1, #2
 800f1d4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f1d8:	0082      	lsls	r2, r0, #2
 800f1da:	4650      	mov	r0, sl
 800f1dc:	4659      	mov	r1, fp
 800f1de:	f7f1 fd53 	bl	8000c88 <__aeabi_uldivmod>
 800f1e2:	4602      	mov	r2, r0
 800f1e4:	460b      	mov	r3, r1
 800f1e6:	4bb3      	ldr	r3, [pc, #716]	; (800f4b4 <UART_SetConfig+0x734>)
 800f1e8:	fba3 2302 	umull	r2, r3, r3, r2
 800f1ec:	095b      	lsrs	r3, r3, #5
 800f1ee:	011e      	lsls	r6, r3, #4
 800f1f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	f04f 0100 	mov.w	r1, #0
 800f1fa:	4602      	mov	r2, r0
 800f1fc:	460b      	mov	r3, r1
 800f1fe:	1894      	adds	r4, r2, r2
 800f200:	623c      	str	r4, [r7, #32]
 800f202:	415b      	adcs	r3, r3
 800f204:	627b      	str	r3, [r7, #36]	; 0x24
 800f206:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f20a:	1812      	adds	r2, r2, r0
 800f20c:	eb41 0303 	adc.w	r3, r1, r3
 800f210:	f04f 0400 	mov.w	r4, #0
 800f214:	f04f 0500 	mov.w	r5, #0
 800f218:	00dd      	lsls	r5, r3, #3
 800f21a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f21e:	00d4      	lsls	r4, r2, #3
 800f220:	4622      	mov	r2, r4
 800f222:	462b      	mov	r3, r5
 800f224:	1814      	adds	r4, r2, r0
 800f226:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800f22a:	414b      	adcs	r3, r1
 800f22c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f234:	685b      	ldr	r3, [r3, #4]
 800f236:	4618      	mov	r0, r3
 800f238:	f04f 0100 	mov.w	r1, #0
 800f23c:	f04f 0200 	mov.w	r2, #0
 800f240:	f04f 0300 	mov.w	r3, #0
 800f244:	008b      	lsls	r3, r1, #2
 800f246:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f24a:	0082      	lsls	r2, r0, #2
 800f24c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800f250:	f7f1 fd1a 	bl	8000c88 <__aeabi_uldivmod>
 800f254:	4602      	mov	r2, r0
 800f256:	460b      	mov	r3, r1
 800f258:	4b96      	ldr	r3, [pc, #600]	; (800f4b4 <UART_SetConfig+0x734>)
 800f25a:	fba3 1302 	umull	r1, r3, r3, r2
 800f25e:	095b      	lsrs	r3, r3, #5
 800f260:	2164      	movs	r1, #100	; 0x64
 800f262:	fb01 f303 	mul.w	r3, r1, r3
 800f266:	1ad3      	subs	r3, r2, r3
 800f268:	011b      	lsls	r3, r3, #4
 800f26a:	3332      	adds	r3, #50	; 0x32
 800f26c:	4a91      	ldr	r2, [pc, #580]	; (800f4b4 <UART_SetConfig+0x734>)
 800f26e:	fba2 2303 	umull	r2, r3, r2, r3
 800f272:	095b      	lsrs	r3, r3, #5
 800f274:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f278:	441e      	add	r6, r3
 800f27a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f27e:	4618      	mov	r0, r3
 800f280:	f04f 0100 	mov.w	r1, #0
 800f284:	4602      	mov	r2, r0
 800f286:	460b      	mov	r3, r1
 800f288:	1894      	adds	r4, r2, r2
 800f28a:	61bc      	str	r4, [r7, #24]
 800f28c:	415b      	adcs	r3, r3
 800f28e:	61fb      	str	r3, [r7, #28]
 800f290:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f294:	1812      	adds	r2, r2, r0
 800f296:	eb41 0303 	adc.w	r3, r1, r3
 800f29a:	f04f 0400 	mov.w	r4, #0
 800f29e:	f04f 0500 	mov.w	r5, #0
 800f2a2:	00dd      	lsls	r5, r3, #3
 800f2a4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f2a8:	00d4      	lsls	r4, r2, #3
 800f2aa:	4622      	mov	r2, r4
 800f2ac:	462b      	mov	r3, r5
 800f2ae:	1814      	adds	r4, r2, r0
 800f2b0:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800f2b4:	414b      	adcs	r3, r1
 800f2b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800f2ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f2be:	685b      	ldr	r3, [r3, #4]
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	f04f 0100 	mov.w	r1, #0
 800f2c6:	f04f 0200 	mov.w	r2, #0
 800f2ca:	f04f 0300 	mov.w	r3, #0
 800f2ce:	008b      	lsls	r3, r1, #2
 800f2d0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f2d4:	0082      	lsls	r2, r0, #2
 800f2d6:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800f2da:	f7f1 fcd5 	bl	8000c88 <__aeabi_uldivmod>
 800f2de:	4602      	mov	r2, r0
 800f2e0:	460b      	mov	r3, r1
 800f2e2:	4b74      	ldr	r3, [pc, #464]	; (800f4b4 <UART_SetConfig+0x734>)
 800f2e4:	fba3 1302 	umull	r1, r3, r3, r2
 800f2e8:	095b      	lsrs	r3, r3, #5
 800f2ea:	2164      	movs	r1, #100	; 0x64
 800f2ec:	fb01 f303 	mul.w	r3, r1, r3
 800f2f0:	1ad3      	subs	r3, r2, r3
 800f2f2:	011b      	lsls	r3, r3, #4
 800f2f4:	3332      	adds	r3, #50	; 0x32
 800f2f6:	4a6f      	ldr	r2, [pc, #444]	; (800f4b4 <UART_SetConfig+0x734>)
 800f2f8:	fba2 2303 	umull	r2, r3, r2, r3
 800f2fc:	095b      	lsrs	r3, r3, #5
 800f2fe:	f003 020f 	and.w	r2, r3, #15
 800f302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	4432      	add	r2, r6
 800f30a:	609a      	str	r2, [r3, #8]
 800f30c:	e0c9      	b.n	800f4a2 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 800f30e:	f7fe fd3f 	bl	800dd90 <HAL_RCC_GetPCLK1Freq>
 800f312:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f316:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f31a:	461c      	mov	r4, r3
 800f31c:	f04f 0500 	mov.w	r5, #0
 800f320:	4622      	mov	r2, r4
 800f322:	462b      	mov	r3, r5
 800f324:	1891      	adds	r1, r2, r2
 800f326:	6139      	str	r1, [r7, #16]
 800f328:	415b      	adcs	r3, r3
 800f32a:	617b      	str	r3, [r7, #20]
 800f32c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f330:	1912      	adds	r2, r2, r4
 800f332:	eb45 0303 	adc.w	r3, r5, r3
 800f336:	f04f 0000 	mov.w	r0, #0
 800f33a:	f04f 0100 	mov.w	r1, #0
 800f33e:	00d9      	lsls	r1, r3, #3
 800f340:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f344:	00d0      	lsls	r0, r2, #3
 800f346:	4602      	mov	r2, r0
 800f348:	460b      	mov	r3, r1
 800f34a:	eb12 0804 	adds.w	r8, r2, r4
 800f34e:	eb43 0905 	adc.w	r9, r3, r5
 800f352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f356:	685b      	ldr	r3, [r3, #4]
 800f358:	4618      	mov	r0, r3
 800f35a:	f04f 0100 	mov.w	r1, #0
 800f35e:	f04f 0200 	mov.w	r2, #0
 800f362:	f04f 0300 	mov.w	r3, #0
 800f366:	008b      	lsls	r3, r1, #2
 800f368:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f36c:	0082      	lsls	r2, r0, #2
 800f36e:	4640      	mov	r0, r8
 800f370:	4649      	mov	r1, r9
 800f372:	f7f1 fc89 	bl	8000c88 <__aeabi_uldivmod>
 800f376:	4602      	mov	r2, r0
 800f378:	460b      	mov	r3, r1
 800f37a:	4b4e      	ldr	r3, [pc, #312]	; (800f4b4 <UART_SetConfig+0x734>)
 800f37c:	fba3 2302 	umull	r2, r3, r3, r2
 800f380:	095b      	lsrs	r3, r3, #5
 800f382:	011e      	lsls	r6, r3, #4
 800f384:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f388:	4618      	mov	r0, r3
 800f38a:	f04f 0100 	mov.w	r1, #0
 800f38e:	4602      	mov	r2, r0
 800f390:	460b      	mov	r3, r1
 800f392:	1894      	adds	r4, r2, r2
 800f394:	60bc      	str	r4, [r7, #8]
 800f396:	415b      	adcs	r3, r3
 800f398:	60fb      	str	r3, [r7, #12]
 800f39a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f39e:	1812      	adds	r2, r2, r0
 800f3a0:	eb41 0303 	adc.w	r3, r1, r3
 800f3a4:	f04f 0400 	mov.w	r4, #0
 800f3a8:	f04f 0500 	mov.w	r5, #0
 800f3ac:	00dd      	lsls	r5, r3, #3
 800f3ae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f3b2:	00d4      	lsls	r4, r2, #3
 800f3b4:	4622      	mov	r2, r4
 800f3b6:	462b      	mov	r3, r5
 800f3b8:	1814      	adds	r4, r2, r0
 800f3ba:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800f3be:	414b      	adcs	r3, r1
 800f3c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f3c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f3c8:	685b      	ldr	r3, [r3, #4]
 800f3ca:	4618      	mov	r0, r3
 800f3cc:	f04f 0100 	mov.w	r1, #0
 800f3d0:	f04f 0200 	mov.w	r2, #0
 800f3d4:	f04f 0300 	mov.w	r3, #0
 800f3d8:	008b      	lsls	r3, r1, #2
 800f3da:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f3de:	0082      	lsls	r2, r0, #2
 800f3e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800f3e4:	f7f1 fc50 	bl	8000c88 <__aeabi_uldivmod>
 800f3e8:	4602      	mov	r2, r0
 800f3ea:	460b      	mov	r3, r1
 800f3ec:	4b31      	ldr	r3, [pc, #196]	; (800f4b4 <UART_SetConfig+0x734>)
 800f3ee:	fba3 1302 	umull	r1, r3, r3, r2
 800f3f2:	095b      	lsrs	r3, r3, #5
 800f3f4:	2164      	movs	r1, #100	; 0x64
 800f3f6:	fb01 f303 	mul.w	r3, r1, r3
 800f3fa:	1ad3      	subs	r3, r2, r3
 800f3fc:	011b      	lsls	r3, r3, #4
 800f3fe:	3332      	adds	r3, #50	; 0x32
 800f400:	4a2c      	ldr	r2, [pc, #176]	; (800f4b4 <UART_SetConfig+0x734>)
 800f402:	fba2 2303 	umull	r2, r3, r2, r3
 800f406:	095b      	lsrs	r3, r3, #5
 800f408:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f40c:	441e      	add	r6, r3
 800f40e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f412:	4618      	mov	r0, r3
 800f414:	f04f 0100 	mov.w	r1, #0
 800f418:	4602      	mov	r2, r0
 800f41a:	460b      	mov	r3, r1
 800f41c:	1894      	adds	r4, r2, r2
 800f41e:	603c      	str	r4, [r7, #0]
 800f420:	415b      	adcs	r3, r3
 800f422:	607b      	str	r3, [r7, #4]
 800f424:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f428:	1812      	adds	r2, r2, r0
 800f42a:	eb41 0303 	adc.w	r3, r1, r3
 800f42e:	f04f 0400 	mov.w	r4, #0
 800f432:	f04f 0500 	mov.w	r5, #0
 800f436:	00dd      	lsls	r5, r3, #3
 800f438:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f43c:	00d4      	lsls	r4, r2, #3
 800f43e:	4622      	mov	r2, r4
 800f440:	462b      	mov	r3, r5
 800f442:	1814      	adds	r4, r2, r0
 800f444:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800f448:	414b      	adcs	r3, r1
 800f44a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f44e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f452:	685b      	ldr	r3, [r3, #4]
 800f454:	4618      	mov	r0, r3
 800f456:	f04f 0100 	mov.w	r1, #0
 800f45a:	f04f 0200 	mov.w	r2, #0
 800f45e:	f04f 0300 	mov.w	r3, #0
 800f462:	008b      	lsls	r3, r1, #2
 800f464:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f468:	0082      	lsls	r2, r0, #2
 800f46a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800f46e:	f7f1 fc0b 	bl	8000c88 <__aeabi_uldivmod>
 800f472:	4602      	mov	r2, r0
 800f474:	460b      	mov	r3, r1
 800f476:	4b0f      	ldr	r3, [pc, #60]	; (800f4b4 <UART_SetConfig+0x734>)
 800f478:	fba3 1302 	umull	r1, r3, r3, r2
 800f47c:	095b      	lsrs	r3, r3, #5
 800f47e:	2164      	movs	r1, #100	; 0x64
 800f480:	fb01 f303 	mul.w	r3, r1, r3
 800f484:	1ad3      	subs	r3, r2, r3
 800f486:	011b      	lsls	r3, r3, #4
 800f488:	3332      	adds	r3, #50	; 0x32
 800f48a:	4a0a      	ldr	r2, [pc, #40]	; (800f4b4 <UART_SetConfig+0x734>)
 800f48c:	fba2 2303 	umull	r2, r3, r2, r3
 800f490:	095b      	lsrs	r3, r3, #5
 800f492:	f003 020f 	and.w	r2, r3, #15
 800f496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	4432      	add	r2, r6
 800f49e:	609a      	str	r2, [r3, #8]
}
 800f4a0:	e7ff      	b.n	800f4a2 <UART_SetConfig+0x722>
 800f4a2:	bf00      	nop
 800f4a4:	37f4      	adds	r7, #244	; 0xf4
 800f4a6:	46bd      	mov	sp, r7
 800f4a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4ac:	40011000 	.word	0x40011000
 800f4b0:	40011400 	.word	0x40011400
 800f4b4:	51eb851f 	.word	0x51eb851f

0800f4b8 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800f4b8:	b480      	push	{r7}
 800f4ba:	b085      	sub	sp, #20
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	6078      	str	r0, [r7, #4]
 800f4c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800f4c2:	2300      	movs	r3, #0
 800f4c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800f4c6:	683b      	ldr	r3, [r7, #0]
 800f4c8:	681a      	ldr	r2, [r3, #0]
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f4d0:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800f4d2:	68fa      	ldr	r2, [r7, #12]
 800f4d4:	4b20      	ldr	r3, [pc, #128]	; (800f558 <FSMC_NORSRAM_Init+0xa0>)
 800f4d6:	4013      	ands	r3, r2
 800f4d8:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800f4da:	683b      	ldr	r3, [r7, #0]
 800f4dc:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800f4de:	683b      	ldr	r3, [r7, #0]
 800f4e0:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800f4e2:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800f4e4:	683b      	ldr	r3, [r7, #0]
 800f4e6:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800f4e8:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800f4ea:	683b      	ldr	r3, [r7, #0]
 800f4ec:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800f4ee:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800f4f0:	683b      	ldr	r3, [r7, #0]
 800f4f2:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800f4f4:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800f4f6:	683b      	ldr	r3, [r7, #0]
 800f4f8:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800f4fa:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800f4fc:	683b      	ldr	r3, [r7, #0]
 800f4fe:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800f500:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800f502:	683b      	ldr	r3, [r7, #0]
 800f504:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800f506:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800f508:	683b      	ldr	r3, [r7, #0]
 800f50a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800f50c:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800f50e:	683b      	ldr	r3, [r7, #0]
 800f510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800f512:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800f514:	683b      	ldr	r3, [r7, #0]
 800f516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800f518:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800f51a:	683b      	ldr	r3, [r7, #0]
 800f51c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800f51e:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800f520:	683b      	ldr	r3, [r7, #0]
 800f522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800f524:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800f526:	68fa      	ldr	r2, [r7, #12]
 800f528:	4313      	orrs	r3, r2
 800f52a:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800f52c:	683b      	ldr	r3, [r7, #0]
 800f52e:	689b      	ldr	r3, [r3, #8]
 800f530:	2b08      	cmp	r3, #8
 800f532:	d103      	bne.n	800f53c <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f53a:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800f53c:	683b      	ldr	r3, [r7, #0]
 800f53e:	681a      	ldr	r2, [r3, #0]
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	68f9      	ldr	r1, [r7, #12]
 800f544:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800f548:	2300      	movs	r3, #0
}
 800f54a:	4618      	mov	r0, r3
 800f54c:	3714      	adds	r7, #20
 800f54e:	46bd      	mov	sp, r7
 800f550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f554:	4770      	bx	lr
 800f556:	bf00      	nop
 800f558:	fff00080 	.word	0xfff00080

0800f55c <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800f55c:	b480      	push	{r7}
 800f55e:	b087      	sub	sp, #28
 800f560:	af00      	add	r7, sp, #0
 800f562:	60f8      	str	r0, [r7, #12]
 800f564:	60b9      	str	r1, [r7, #8]
 800f566:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800f568:	2300      	movs	r3, #0
 800f56a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	1c5a      	adds	r2, r3, #1
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f576:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800f578:	697b      	ldr	r3, [r7, #20]
 800f57a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800f57e:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f580:	68bb      	ldr	r3, [r7, #8]
 800f582:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800f584:	68bb      	ldr	r3, [r7, #8]
 800f586:	685b      	ldr	r3, [r3, #4]
 800f588:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f58a:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800f58c:	68bb      	ldr	r3, [r7, #8]
 800f58e:	689b      	ldr	r3, [r3, #8]
 800f590:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800f592:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800f594:	68bb      	ldr	r3, [r7, #8]
 800f596:	68db      	ldr	r3, [r3, #12]
 800f598:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800f59a:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800f59c:	68bb      	ldr	r3, [r7, #8]
 800f59e:	691b      	ldr	r3, [r3, #16]
 800f5a0:	3b01      	subs	r3, #1
 800f5a2:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800f5a4:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800f5a6:	68bb      	ldr	r3, [r7, #8]
 800f5a8:	695b      	ldr	r3, [r3, #20]
 800f5aa:	3b02      	subs	r3, #2
 800f5ac:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800f5ae:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800f5b0:	68bb      	ldr	r3, [r7, #8]
 800f5b2:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f5b4:	4313      	orrs	r3, r2
 800f5b6:	697a      	ldr	r2, [r7, #20]
 800f5b8:	4313      	orrs	r3, r2
 800f5ba:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	1c5a      	adds	r2, r3, #1
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	6979      	ldr	r1, [r7, #20]
 800f5c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800f5c8:	2300      	movs	r3, #0
}
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	371c      	adds	r7, #28
 800f5ce:	46bd      	mov	sp, r7
 800f5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d4:	4770      	bx	lr
	...

0800f5d8 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800f5d8:	b480      	push	{r7}
 800f5da:	b087      	sub	sp, #28
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	60f8      	str	r0, [r7, #12]
 800f5e0:	60b9      	str	r1, [r7, #8]
 800f5e2:	607a      	str	r2, [r7, #4]
 800f5e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800f5ea:	683b      	ldr	r3, [r7, #0]
 800f5ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f5f0:	d122      	bne.n	800f638 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	687a      	ldr	r2, [r7, #4]
 800f5f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5fa:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800f5fc:	697a      	ldr	r2, [r7, #20]
 800f5fe:	4b15      	ldr	r3, [pc, #84]	; (800f654 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800f600:	4013      	ands	r3, r2
 800f602:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f604:	68bb      	ldr	r3, [r7, #8]
 800f606:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800f608:	68bb      	ldr	r3, [r7, #8]
 800f60a:	685b      	ldr	r3, [r3, #4]
 800f60c:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f60e:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800f610:	68bb      	ldr	r3, [r7, #8]
 800f612:	689b      	ldr	r3, [r3, #8]
 800f614:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800f616:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800f618:	68bb      	ldr	r3, [r7, #8]
 800f61a:	68db      	ldr	r3, [r3, #12]
 800f61c:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800f61e:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800f620:	68bb      	ldr	r3, [r7, #8]
 800f622:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800f624:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f626:	697a      	ldr	r2, [r7, #20]
 800f628:	4313      	orrs	r3, r2
 800f62a:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	687a      	ldr	r2, [r7, #4]
 800f630:	6979      	ldr	r1, [r7, #20]
 800f632:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800f636:	e005      	b.n	800f644 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	687a      	ldr	r2, [r7, #4]
 800f63c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800f640:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800f644:	2300      	movs	r3, #0
}
 800f646:	4618      	mov	r0, r3
 800f648:	371c      	adds	r7, #28
 800f64a:	46bd      	mov	sp, r7
 800f64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f650:	4770      	bx	lr
 800f652:	bf00      	nop
 800f654:	cff00000 	.word	0xcff00000

0800f658 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f658:	b084      	sub	sp, #16
 800f65a:	b580      	push	{r7, lr}
 800f65c:	b084      	sub	sp, #16
 800f65e:	af00      	add	r7, sp, #0
 800f660:	6078      	str	r0, [r7, #4]
 800f662:	f107 001c 	add.w	r0, r7, #28
 800f666:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f66c:	2b01      	cmp	r3, #1
 800f66e:	d122      	bne.n	800f6b6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f674:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	68db      	ldr	r3, [r3, #12]
 800f680:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800f684:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f688:	687a      	ldr	r2, [r7, #4]
 800f68a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	68db      	ldr	r3, [r3, #12]
 800f690:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f698:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f69a:	2b01      	cmp	r3, #1
 800f69c:	d105      	bne.n	800f6aa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	68db      	ldr	r3, [r3, #12]
 800f6a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800f6aa:	6878      	ldr	r0, [r7, #4]
 800f6ac:	f001 fac6 	bl	8010c3c <USB_CoreReset>
 800f6b0:	4603      	mov	r3, r0
 800f6b2:	73fb      	strb	r3, [r7, #15]
 800f6b4:	e01a      	b.n	800f6ec <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	68db      	ldr	r3, [r3, #12]
 800f6ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f6c2:	6878      	ldr	r0, [r7, #4]
 800f6c4:	f001 faba 	bl	8010c3c <USB_CoreReset>
 800f6c8:	4603      	mov	r3, r0
 800f6ca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800f6cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d106      	bne.n	800f6e0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	639a      	str	r2, [r3, #56]	; 0x38
 800f6de:	e005      	b.n	800f6ec <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800f6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6ee:	2b01      	cmp	r3, #1
 800f6f0:	d10b      	bne.n	800f70a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	689b      	ldr	r3, [r3, #8]
 800f6f6:	f043 0206 	orr.w	r2, r3, #6
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	689b      	ldr	r3, [r3, #8]
 800f702:	f043 0220 	orr.w	r2, r3, #32
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f70a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f70c:	4618      	mov	r0, r3
 800f70e:	3710      	adds	r7, #16
 800f710:	46bd      	mov	sp, r7
 800f712:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f716:	b004      	add	sp, #16
 800f718:	4770      	bx	lr
	...

0800f71c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800f71c:	b480      	push	{r7}
 800f71e:	b087      	sub	sp, #28
 800f720:	af00      	add	r7, sp, #0
 800f722:	60f8      	str	r0, [r7, #12]
 800f724:	60b9      	str	r1, [r7, #8]
 800f726:	4613      	mov	r3, r2
 800f728:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800f72a:	79fb      	ldrb	r3, [r7, #7]
 800f72c:	2b02      	cmp	r3, #2
 800f72e:	d165      	bne.n	800f7fc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800f730:	68bb      	ldr	r3, [r7, #8]
 800f732:	4a41      	ldr	r2, [pc, #260]	; (800f838 <USB_SetTurnaroundTime+0x11c>)
 800f734:	4293      	cmp	r3, r2
 800f736:	d906      	bls.n	800f746 <USB_SetTurnaroundTime+0x2a>
 800f738:	68bb      	ldr	r3, [r7, #8]
 800f73a:	4a40      	ldr	r2, [pc, #256]	; (800f83c <USB_SetTurnaroundTime+0x120>)
 800f73c:	4293      	cmp	r3, r2
 800f73e:	d202      	bcs.n	800f746 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800f740:	230f      	movs	r3, #15
 800f742:	617b      	str	r3, [r7, #20]
 800f744:	e062      	b.n	800f80c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800f746:	68bb      	ldr	r3, [r7, #8]
 800f748:	4a3c      	ldr	r2, [pc, #240]	; (800f83c <USB_SetTurnaroundTime+0x120>)
 800f74a:	4293      	cmp	r3, r2
 800f74c:	d306      	bcc.n	800f75c <USB_SetTurnaroundTime+0x40>
 800f74e:	68bb      	ldr	r3, [r7, #8]
 800f750:	4a3b      	ldr	r2, [pc, #236]	; (800f840 <USB_SetTurnaroundTime+0x124>)
 800f752:	4293      	cmp	r3, r2
 800f754:	d202      	bcs.n	800f75c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800f756:	230e      	movs	r3, #14
 800f758:	617b      	str	r3, [r7, #20]
 800f75a:	e057      	b.n	800f80c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800f75c:	68bb      	ldr	r3, [r7, #8]
 800f75e:	4a38      	ldr	r2, [pc, #224]	; (800f840 <USB_SetTurnaroundTime+0x124>)
 800f760:	4293      	cmp	r3, r2
 800f762:	d306      	bcc.n	800f772 <USB_SetTurnaroundTime+0x56>
 800f764:	68bb      	ldr	r3, [r7, #8]
 800f766:	4a37      	ldr	r2, [pc, #220]	; (800f844 <USB_SetTurnaroundTime+0x128>)
 800f768:	4293      	cmp	r3, r2
 800f76a:	d202      	bcs.n	800f772 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800f76c:	230d      	movs	r3, #13
 800f76e:	617b      	str	r3, [r7, #20]
 800f770:	e04c      	b.n	800f80c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800f772:	68bb      	ldr	r3, [r7, #8]
 800f774:	4a33      	ldr	r2, [pc, #204]	; (800f844 <USB_SetTurnaroundTime+0x128>)
 800f776:	4293      	cmp	r3, r2
 800f778:	d306      	bcc.n	800f788 <USB_SetTurnaroundTime+0x6c>
 800f77a:	68bb      	ldr	r3, [r7, #8]
 800f77c:	4a32      	ldr	r2, [pc, #200]	; (800f848 <USB_SetTurnaroundTime+0x12c>)
 800f77e:	4293      	cmp	r3, r2
 800f780:	d802      	bhi.n	800f788 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800f782:	230c      	movs	r3, #12
 800f784:	617b      	str	r3, [r7, #20]
 800f786:	e041      	b.n	800f80c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800f788:	68bb      	ldr	r3, [r7, #8]
 800f78a:	4a2f      	ldr	r2, [pc, #188]	; (800f848 <USB_SetTurnaroundTime+0x12c>)
 800f78c:	4293      	cmp	r3, r2
 800f78e:	d906      	bls.n	800f79e <USB_SetTurnaroundTime+0x82>
 800f790:	68bb      	ldr	r3, [r7, #8]
 800f792:	4a2e      	ldr	r2, [pc, #184]	; (800f84c <USB_SetTurnaroundTime+0x130>)
 800f794:	4293      	cmp	r3, r2
 800f796:	d802      	bhi.n	800f79e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800f798:	230b      	movs	r3, #11
 800f79a:	617b      	str	r3, [r7, #20]
 800f79c:	e036      	b.n	800f80c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800f79e:	68bb      	ldr	r3, [r7, #8]
 800f7a0:	4a2a      	ldr	r2, [pc, #168]	; (800f84c <USB_SetTurnaroundTime+0x130>)
 800f7a2:	4293      	cmp	r3, r2
 800f7a4:	d906      	bls.n	800f7b4 <USB_SetTurnaroundTime+0x98>
 800f7a6:	68bb      	ldr	r3, [r7, #8]
 800f7a8:	4a29      	ldr	r2, [pc, #164]	; (800f850 <USB_SetTurnaroundTime+0x134>)
 800f7aa:	4293      	cmp	r3, r2
 800f7ac:	d802      	bhi.n	800f7b4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800f7ae:	230a      	movs	r3, #10
 800f7b0:	617b      	str	r3, [r7, #20]
 800f7b2:	e02b      	b.n	800f80c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800f7b4:	68bb      	ldr	r3, [r7, #8]
 800f7b6:	4a26      	ldr	r2, [pc, #152]	; (800f850 <USB_SetTurnaroundTime+0x134>)
 800f7b8:	4293      	cmp	r3, r2
 800f7ba:	d906      	bls.n	800f7ca <USB_SetTurnaroundTime+0xae>
 800f7bc:	68bb      	ldr	r3, [r7, #8]
 800f7be:	4a25      	ldr	r2, [pc, #148]	; (800f854 <USB_SetTurnaroundTime+0x138>)
 800f7c0:	4293      	cmp	r3, r2
 800f7c2:	d202      	bcs.n	800f7ca <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800f7c4:	2309      	movs	r3, #9
 800f7c6:	617b      	str	r3, [r7, #20]
 800f7c8:	e020      	b.n	800f80c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800f7ca:	68bb      	ldr	r3, [r7, #8]
 800f7cc:	4a21      	ldr	r2, [pc, #132]	; (800f854 <USB_SetTurnaroundTime+0x138>)
 800f7ce:	4293      	cmp	r3, r2
 800f7d0:	d306      	bcc.n	800f7e0 <USB_SetTurnaroundTime+0xc4>
 800f7d2:	68bb      	ldr	r3, [r7, #8]
 800f7d4:	4a20      	ldr	r2, [pc, #128]	; (800f858 <USB_SetTurnaroundTime+0x13c>)
 800f7d6:	4293      	cmp	r3, r2
 800f7d8:	d802      	bhi.n	800f7e0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800f7da:	2308      	movs	r3, #8
 800f7dc:	617b      	str	r3, [r7, #20]
 800f7de:	e015      	b.n	800f80c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800f7e0:	68bb      	ldr	r3, [r7, #8]
 800f7e2:	4a1d      	ldr	r2, [pc, #116]	; (800f858 <USB_SetTurnaroundTime+0x13c>)
 800f7e4:	4293      	cmp	r3, r2
 800f7e6:	d906      	bls.n	800f7f6 <USB_SetTurnaroundTime+0xda>
 800f7e8:	68bb      	ldr	r3, [r7, #8]
 800f7ea:	4a1c      	ldr	r2, [pc, #112]	; (800f85c <USB_SetTurnaroundTime+0x140>)
 800f7ec:	4293      	cmp	r3, r2
 800f7ee:	d202      	bcs.n	800f7f6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800f7f0:	2307      	movs	r3, #7
 800f7f2:	617b      	str	r3, [r7, #20]
 800f7f4:	e00a      	b.n	800f80c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800f7f6:	2306      	movs	r3, #6
 800f7f8:	617b      	str	r3, [r7, #20]
 800f7fa:	e007      	b.n	800f80c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800f7fc:	79fb      	ldrb	r3, [r7, #7]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d102      	bne.n	800f808 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800f802:	2309      	movs	r3, #9
 800f804:	617b      	str	r3, [r7, #20]
 800f806:	e001      	b.n	800f80c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800f808:	2309      	movs	r3, #9
 800f80a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	68db      	ldr	r3, [r3, #12]
 800f810:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	68da      	ldr	r2, [r3, #12]
 800f81c:	697b      	ldr	r3, [r7, #20]
 800f81e:	029b      	lsls	r3, r3, #10
 800f820:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800f824:	431a      	orrs	r2, r3
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f82a:	2300      	movs	r3, #0
}
 800f82c:	4618      	mov	r0, r3
 800f82e:	371c      	adds	r7, #28
 800f830:	46bd      	mov	sp, r7
 800f832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f836:	4770      	bx	lr
 800f838:	00d8acbf 	.word	0x00d8acbf
 800f83c:	00e4e1c0 	.word	0x00e4e1c0
 800f840:	00f42400 	.word	0x00f42400
 800f844:	01067380 	.word	0x01067380
 800f848:	011a499f 	.word	0x011a499f
 800f84c:	01312cff 	.word	0x01312cff
 800f850:	014ca43f 	.word	0x014ca43f
 800f854:	016e3600 	.word	0x016e3600
 800f858:	01a6ab1f 	.word	0x01a6ab1f
 800f85c:	01e84800 	.word	0x01e84800

0800f860 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f860:	b480      	push	{r7}
 800f862:	b083      	sub	sp, #12
 800f864:	af00      	add	r7, sp, #0
 800f866:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	689b      	ldr	r3, [r3, #8]
 800f86c:	f043 0201 	orr.w	r2, r3, #1
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f874:	2300      	movs	r3, #0
}
 800f876:	4618      	mov	r0, r3
 800f878:	370c      	adds	r7, #12
 800f87a:	46bd      	mov	sp, r7
 800f87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f880:	4770      	bx	lr

0800f882 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f882:	b480      	push	{r7}
 800f884:	b083      	sub	sp, #12
 800f886:	af00      	add	r7, sp, #0
 800f888:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	689b      	ldr	r3, [r3, #8]
 800f88e:	f023 0201 	bic.w	r2, r3, #1
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f896:	2300      	movs	r3, #0
}
 800f898:	4618      	mov	r0, r3
 800f89a:	370c      	adds	r7, #12
 800f89c:	46bd      	mov	sp, r7
 800f89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a2:	4770      	bx	lr

0800f8a4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f8a4:	b580      	push	{r7, lr}
 800f8a6:	b082      	sub	sp, #8
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	6078      	str	r0, [r7, #4]
 800f8ac:	460b      	mov	r3, r1
 800f8ae:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	68db      	ldr	r3, [r3, #12]
 800f8b4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f8bc:	78fb      	ldrb	r3, [r7, #3]
 800f8be:	2b01      	cmp	r3, #1
 800f8c0:	d106      	bne.n	800f8d0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	68db      	ldr	r3, [r3, #12]
 800f8c6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	60da      	str	r2, [r3, #12]
 800f8ce:	e00b      	b.n	800f8e8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800f8d0:	78fb      	ldrb	r3, [r7, #3]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d106      	bne.n	800f8e4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	68db      	ldr	r3, [r3, #12]
 800f8da:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	60da      	str	r2, [r3, #12]
 800f8e2:	e001      	b.n	800f8e8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800f8e4:	2301      	movs	r3, #1
 800f8e6:	e003      	b.n	800f8f0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800f8e8:	2032      	movs	r0, #50	; 0x32
 800f8ea:	f7fb fdd7 	bl	800b49c <HAL_Delay>

  return HAL_OK;
 800f8ee:	2300      	movs	r3, #0
}
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	3708      	adds	r7, #8
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	bd80      	pop	{r7, pc}

0800f8f8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f8f8:	b084      	sub	sp, #16
 800f8fa:	b580      	push	{r7, lr}
 800f8fc:	b086      	sub	sp, #24
 800f8fe:	af00      	add	r7, sp, #0
 800f900:	6078      	str	r0, [r7, #4]
 800f902:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800f906:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f90a:	2300      	movs	r3, #0
 800f90c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f912:	2300      	movs	r3, #0
 800f914:	613b      	str	r3, [r7, #16]
 800f916:	e009      	b.n	800f92c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f918:	687a      	ldr	r2, [r7, #4]
 800f91a:	693b      	ldr	r3, [r7, #16]
 800f91c:	3340      	adds	r3, #64	; 0x40
 800f91e:	009b      	lsls	r3, r3, #2
 800f920:	4413      	add	r3, r2
 800f922:	2200      	movs	r2, #0
 800f924:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f926:	693b      	ldr	r3, [r7, #16]
 800f928:	3301      	adds	r3, #1
 800f92a:	613b      	str	r3, [r7, #16]
 800f92c:	693b      	ldr	r3, [r7, #16]
 800f92e:	2b0e      	cmp	r3, #14
 800f930:	d9f2      	bls.n	800f918 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f934:	2b00      	cmp	r3, #0
 800f936:	d11c      	bne.n	800f972 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f93e:	685b      	ldr	r3, [r3, #4]
 800f940:	68fa      	ldr	r2, [r7, #12]
 800f942:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f946:	f043 0302 	orr.w	r3, r3, #2
 800f94a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f950:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f95c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f968:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	639a      	str	r2, [r3, #56]	; 0x38
 800f970:	e00b      	b.n	800f98a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f976:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f982:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f990:	461a      	mov	r2, r3
 800f992:	2300      	movs	r3, #0
 800f994:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f99c:	4619      	mov	r1, r3
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f9a4:	461a      	mov	r2, r3
 800f9a6:	680b      	ldr	r3, [r1, #0]
 800f9a8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f9aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9ac:	2b01      	cmp	r3, #1
 800f9ae:	d10c      	bne.n	800f9ca <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f9b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d104      	bne.n	800f9c0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f9b6:	2100      	movs	r1, #0
 800f9b8:	6878      	ldr	r0, [r7, #4]
 800f9ba:	f000 f949 	bl	800fc50 <USB_SetDevSpeed>
 800f9be:	e008      	b.n	800f9d2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f9c0:	2101      	movs	r1, #1
 800f9c2:	6878      	ldr	r0, [r7, #4]
 800f9c4:	f000 f944 	bl	800fc50 <USB_SetDevSpeed>
 800f9c8:	e003      	b.n	800f9d2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f9ca:	2103      	movs	r1, #3
 800f9cc:	6878      	ldr	r0, [r7, #4]
 800f9ce:	f000 f93f 	bl	800fc50 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f9d2:	2110      	movs	r1, #16
 800f9d4:	6878      	ldr	r0, [r7, #4]
 800f9d6:	f000 f8f3 	bl	800fbc0 <USB_FlushTxFifo>
 800f9da:	4603      	mov	r3, r0
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d001      	beq.n	800f9e4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800f9e0:	2301      	movs	r3, #1
 800f9e2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f9e4:	6878      	ldr	r0, [r7, #4]
 800f9e6:	f000 f911 	bl	800fc0c <USB_FlushRxFifo>
 800f9ea:	4603      	mov	r3, r0
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d001      	beq.n	800f9f4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800f9f0:	2301      	movs	r3, #1
 800f9f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f9fa:	461a      	mov	r2, r3
 800f9fc:	2300      	movs	r3, #0
 800f9fe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa06:	461a      	mov	r2, r3
 800fa08:	2300      	movs	r3, #0
 800fa0a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa12:	461a      	mov	r2, r3
 800fa14:	2300      	movs	r3, #0
 800fa16:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fa18:	2300      	movs	r3, #0
 800fa1a:	613b      	str	r3, [r7, #16]
 800fa1c:	e043      	b.n	800faa6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fa1e:	693b      	ldr	r3, [r7, #16]
 800fa20:	015a      	lsls	r2, r3, #5
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	4413      	add	r3, r2
 800fa26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fa30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fa34:	d118      	bne.n	800fa68 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800fa36:	693b      	ldr	r3, [r7, #16]
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d10a      	bne.n	800fa52 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800fa3c:	693b      	ldr	r3, [r7, #16]
 800fa3e:	015a      	lsls	r2, r3, #5
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	4413      	add	r3, r2
 800fa44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa48:	461a      	mov	r2, r3
 800fa4a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fa4e:	6013      	str	r3, [r2, #0]
 800fa50:	e013      	b.n	800fa7a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800fa52:	693b      	ldr	r3, [r7, #16]
 800fa54:	015a      	lsls	r2, r3, #5
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	4413      	add	r3, r2
 800fa5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa5e:	461a      	mov	r2, r3
 800fa60:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fa64:	6013      	str	r3, [r2, #0]
 800fa66:	e008      	b.n	800fa7a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800fa68:	693b      	ldr	r3, [r7, #16]
 800fa6a:	015a      	lsls	r2, r3, #5
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	4413      	add	r3, r2
 800fa70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa74:	461a      	mov	r2, r3
 800fa76:	2300      	movs	r3, #0
 800fa78:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800fa7a:	693b      	ldr	r3, [r7, #16]
 800fa7c:	015a      	lsls	r2, r3, #5
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	4413      	add	r3, r2
 800fa82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa86:	461a      	mov	r2, r3
 800fa88:	2300      	movs	r3, #0
 800fa8a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800fa8c:	693b      	ldr	r3, [r7, #16]
 800fa8e:	015a      	lsls	r2, r3, #5
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	4413      	add	r3, r2
 800fa94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa98:	461a      	mov	r2, r3
 800fa9a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fa9e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800faa0:	693b      	ldr	r3, [r7, #16]
 800faa2:	3301      	adds	r3, #1
 800faa4:	613b      	str	r3, [r7, #16]
 800faa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faa8:	693a      	ldr	r2, [r7, #16]
 800faaa:	429a      	cmp	r2, r3
 800faac:	d3b7      	bcc.n	800fa1e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800faae:	2300      	movs	r3, #0
 800fab0:	613b      	str	r3, [r7, #16]
 800fab2:	e043      	b.n	800fb3c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fab4:	693b      	ldr	r3, [r7, #16]
 800fab6:	015a      	lsls	r2, r3, #5
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	4413      	add	r3, r2
 800fabc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fac6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800faca:	d118      	bne.n	800fafe <USB_DevInit+0x206>
    {
      if (i == 0U)
 800facc:	693b      	ldr	r3, [r7, #16]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d10a      	bne.n	800fae8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800fad2:	693b      	ldr	r3, [r7, #16]
 800fad4:	015a      	lsls	r2, r3, #5
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	4413      	add	r3, r2
 800fada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fade:	461a      	mov	r2, r3
 800fae0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fae4:	6013      	str	r3, [r2, #0]
 800fae6:	e013      	b.n	800fb10 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800fae8:	693b      	ldr	r3, [r7, #16]
 800faea:	015a      	lsls	r2, r3, #5
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	4413      	add	r3, r2
 800faf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800faf4:	461a      	mov	r2, r3
 800faf6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fafa:	6013      	str	r3, [r2, #0]
 800fafc:	e008      	b.n	800fb10 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800fafe:	693b      	ldr	r3, [r7, #16]
 800fb00:	015a      	lsls	r2, r3, #5
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	4413      	add	r3, r2
 800fb06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb0a:	461a      	mov	r2, r3
 800fb0c:	2300      	movs	r3, #0
 800fb0e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800fb10:	693b      	ldr	r3, [r7, #16]
 800fb12:	015a      	lsls	r2, r3, #5
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	4413      	add	r3, r2
 800fb18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb1c:	461a      	mov	r2, r3
 800fb1e:	2300      	movs	r3, #0
 800fb20:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800fb22:	693b      	ldr	r3, [r7, #16]
 800fb24:	015a      	lsls	r2, r3, #5
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	4413      	add	r3, r2
 800fb2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb2e:	461a      	mov	r2, r3
 800fb30:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fb34:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fb36:	693b      	ldr	r3, [r7, #16]
 800fb38:	3301      	adds	r3, #1
 800fb3a:	613b      	str	r3, [r7, #16]
 800fb3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb3e:	693a      	ldr	r2, [r7, #16]
 800fb40:	429a      	cmp	r2, r3
 800fb42:	d3b7      	bcc.n	800fab4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb4a:	691b      	ldr	r3, [r3, #16]
 800fb4c:	68fa      	ldr	r2, [r7, #12]
 800fb4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fb52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fb56:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	2200      	movs	r2, #0
 800fb5c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800fb64:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800fb66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d105      	bne.n	800fb78 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	699b      	ldr	r3, [r3, #24]
 800fb70:	f043 0210 	orr.w	r2, r3, #16
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	699a      	ldr	r2, [r3, #24]
 800fb7c:	4b0f      	ldr	r3, [pc, #60]	; (800fbbc <USB_DevInit+0x2c4>)
 800fb7e:	4313      	orrs	r3, r2
 800fb80:	687a      	ldr	r2, [r7, #4]
 800fb82:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800fb84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d005      	beq.n	800fb96 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	699b      	ldr	r3, [r3, #24]
 800fb8e:	f043 0208 	orr.w	r2, r3, #8
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800fb96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb98:	2b01      	cmp	r3, #1
 800fb9a:	d107      	bne.n	800fbac <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	699b      	ldr	r3, [r3, #24]
 800fba0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fba4:	f043 0304 	orr.w	r3, r3, #4
 800fba8:	687a      	ldr	r2, [r7, #4]
 800fbaa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800fbac:	7dfb      	ldrb	r3, [r7, #23]
}
 800fbae:	4618      	mov	r0, r3
 800fbb0:	3718      	adds	r7, #24
 800fbb2:	46bd      	mov	sp, r7
 800fbb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fbb8:	b004      	add	sp, #16
 800fbba:	4770      	bx	lr
 800fbbc:	803c3800 	.word	0x803c3800

0800fbc0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800fbc0:	b480      	push	{r7}
 800fbc2:	b085      	sub	sp, #20
 800fbc4:	af00      	add	r7, sp, #0
 800fbc6:	6078      	str	r0, [r7, #4]
 800fbc8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800fbca:	2300      	movs	r3, #0
 800fbcc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800fbce:	683b      	ldr	r3, [r7, #0]
 800fbd0:	019b      	lsls	r3, r3, #6
 800fbd2:	f043 0220 	orr.w	r2, r3, #32
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	3301      	adds	r3, #1
 800fbde:	60fb      	str	r3, [r7, #12]
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	4a09      	ldr	r2, [pc, #36]	; (800fc08 <USB_FlushTxFifo+0x48>)
 800fbe4:	4293      	cmp	r3, r2
 800fbe6:	d901      	bls.n	800fbec <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800fbe8:	2303      	movs	r3, #3
 800fbea:	e006      	b.n	800fbfa <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	691b      	ldr	r3, [r3, #16]
 800fbf0:	f003 0320 	and.w	r3, r3, #32
 800fbf4:	2b20      	cmp	r3, #32
 800fbf6:	d0f0      	beq.n	800fbda <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800fbf8:	2300      	movs	r3, #0
}
 800fbfa:	4618      	mov	r0, r3
 800fbfc:	3714      	adds	r7, #20
 800fbfe:	46bd      	mov	sp, r7
 800fc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc04:	4770      	bx	lr
 800fc06:	bf00      	nop
 800fc08:	00030d40 	.word	0x00030d40

0800fc0c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800fc0c:	b480      	push	{r7}
 800fc0e:	b085      	sub	sp, #20
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800fc14:	2300      	movs	r3, #0
 800fc16:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	2210      	movs	r2, #16
 800fc1c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	3301      	adds	r3, #1
 800fc22:	60fb      	str	r3, [r7, #12]
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	4a09      	ldr	r2, [pc, #36]	; (800fc4c <USB_FlushRxFifo+0x40>)
 800fc28:	4293      	cmp	r3, r2
 800fc2a:	d901      	bls.n	800fc30 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800fc2c:	2303      	movs	r3, #3
 800fc2e:	e006      	b.n	800fc3e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	691b      	ldr	r3, [r3, #16]
 800fc34:	f003 0310 	and.w	r3, r3, #16
 800fc38:	2b10      	cmp	r3, #16
 800fc3a:	d0f0      	beq.n	800fc1e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800fc3c:	2300      	movs	r3, #0
}
 800fc3e:	4618      	mov	r0, r3
 800fc40:	3714      	adds	r7, #20
 800fc42:	46bd      	mov	sp, r7
 800fc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc48:	4770      	bx	lr
 800fc4a:	bf00      	nop
 800fc4c:	00030d40 	.word	0x00030d40

0800fc50 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800fc50:	b480      	push	{r7}
 800fc52:	b085      	sub	sp, #20
 800fc54:	af00      	add	r7, sp, #0
 800fc56:	6078      	str	r0, [r7, #4]
 800fc58:	460b      	mov	r3, r1
 800fc5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc66:	681a      	ldr	r2, [r3, #0]
 800fc68:	78fb      	ldrb	r3, [r7, #3]
 800fc6a:	68f9      	ldr	r1, [r7, #12]
 800fc6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fc70:	4313      	orrs	r3, r2
 800fc72:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800fc74:	2300      	movs	r3, #0
}
 800fc76:	4618      	mov	r0, r3
 800fc78:	3714      	adds	r7, #20
 800fc7a:	46bd      	mov	sp, r7
 800fc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc80:	4770      	bx	lr

0800fc82 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800fc82:	b480      	push	{r7}
 800fc84:	b087      	sub	sp, #28
 800fc86:	af00      	add	r7, sp, #0
 800fc88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800fc8e:	693b      	ldr	r3, [r7, #16]
 800fc90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc94:	689b      	ldr	r3, [r3, #8]
 800fc96:	f003 0306 	and.w	r3, r3, #6
 800fc9a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d102      	bne.n	800fca8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800fca2:	2300      	movs	r3, #0
 800fca4:	75fb      	strb	r3, [r7, #23]
 800fca6:	e00a      	b.n	800fcbe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	2b02      	cmp	r3, #2
 800fcac:	d002      	beq.n	800fcb4 <USB_GetDevSpeed+0x32>
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	2b06      	cmp	r3, #6
 800fcb2:	d102      	bne.n	800fcba <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800fcb4:	2302      	movs	r3, #2
 800fcb6:	75fb      	strb	r3, [r7, #23]
 800fcb8:	e001      	b.n	800fcbe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800fcba:	230f      	movs	r3, #15
 800fcbc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800fcbe:	7dfb      	ldrb	r3, [r7, #23]
}
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	371c      	adds	r7, #28
 800fcc4:	46bd      	mov	sp, r7
 800fcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcca:	4770      	bx	lr

0800fccc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fccc:	b480      	push	{r7}
 800fcce:	b085      	sub	sp, #20
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	6078      	str	r0, [r7, #4]
 800fcd4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fcda:	683b      	ldr	r3, [r7, #0]
 800fcdc:	781b      	ldrb	r3, [r3, #0]
 800fcde:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800fce0:	683b      	ldr	r3, [r7, #0]
 800fce2:	785b      	ldrb	r3, [r3, #1]
 800fce4:	2b01      	cmp	r3, #1
 800fce6:	d13a      	bne.n	800fd5e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fcee:	69da      	ldr	r2, [r3, #28]
 800fcf0:	683b      	ldr	r3, [r7, #0]
 800fcf2:	781b      	ldrb	r3, [r3, #0]
 800fcf4:	f003 030f 	and.w	r3, r3, #15
 800fcf8:	2101      	movs	r1, #1
 800fcfa:	fa01 f303 	lsl.w	r3, r1, r3
 800fcfe:	b29b      	uxth	r3, r3
 800fd00:	68f9      	ldr	r1, [r7, #12]
 800fd02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fd06:	4313      	orrs	r3, r2
 800fd08:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800fd0a:	68bb      	ldr	r3, [r7, #8]
 800fd0c:	015a      	lsls	r2, r3, #5
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	4413      	add	r3, r2
 800fd12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d155      	bne.n	800fdcc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fd20:	68bb      	ldr	r3, [r7, #8]
 800fd22:	015a      	lsls	r2, r3, #5
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	4413      	add	r3, r2
 800fd28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd2c:	681a      	ldr	r2, [r3, #0]
 800fd2e:	683b      	ldr	r3, [r7, #0]
 800fd30:	689b      	ldr	r3, [r3, #8]
 800fd32:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800fd36:	683b      	ldr	r3, [r7, #0]
 800fd38:	78db      	ldrb	r3, [r3, #3]
 800fd3a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fd3c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800fd3e:	68bb      	ldr	r3, [r7, #8]
 800fd40:	059b      	lsls	r3, r3, #22
 800fd42:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fd44:	4313      	orrs	r3, r2
 800fd46:	68ba      	ldr	r2, [r7, #8]
 800fd48:	0151      	lsls	r1, r2, #5
 800fd4a:	68fa      	ldr	r2, [r7, #12]
 800fd4c:	440a      	add	r2, r1
 800fd4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fd56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fd5a:	6013      	str	r3, [r2, #0]
 800fd5c:	e036      	b.n	800fdcc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd64:	69da      	ldr	r2, [r3, #28]
 800fd66:	683b      	ldr	r3, [r7, #0]
 800fd68:	781b      	ldrb	r3, [r3, #0]
 800fd6a:	f003 030f 	and.w	r3, r3, #15
 800fd6e:	2101      	movs	r1, #1
 800fd70:	fa01 f303 	lsl.w	r3, r1, r3
 800fd74:	041b      	lsls	r3, r3, #16
 800fd76:	68f9      	ldr	r1, [r7, #12]
 800fd78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fd7c:	4313      	orrs	r3, r2
 800fd7e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800fd80:	68bb      	ldr	r3, [r7, #8]
 800fd82:	015a      	lsls	r2, r3, #5
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	4413      	add	r3, r2
 800fd88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d11a      	bne.n	800fdcc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800fd96:	68bb      	ldr	r3, [r7, #8]
 800fd98:	015a      	lsls	r2, r3, #5
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	4413      	add	r3, r2
 800fd9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fda2:	681a      	ldr	r2, [r3, #0]
 800fda4:	683b      	ldr	r3, [r7, #0]
 800fda6:	689b      	ldr	r3, [r3, #8]
 800fda8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800fdac:	683b      	ldr	r3, [r7, #0]
 800fdae:	78db      	ldrb	r3, [r3, #3]
 800fdb0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800fdb2:	430b      	orrs	r3, r1
 800fdb4:	4313      	orrs	r3, r2
 800fdb6:	68ba      	ldr	r2, [r7, #8]
 800fdb8:	0151      	lsls	r1, r2, #5
 800fdba:	68fa      	ldr	r2, [r7, #12]
 800fdbc:	440a      	add	r2, r1
 800fdbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fdc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fdc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fdca:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800fdcc:	2300      	movs	r3, #0
}
 800fdce:	4618      	mov	r0, r3
 800fdd0:	3714      	adds	r7, #20
 800fdd2:	46bd      	mov	sp, r7
 800fdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd8:	4770      	bx	lr
	...

0800fddc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fddc:	b480      	push	{r7}
 800fdde:	b085      	sub	sp, #20
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	6078      	str	r0, [r7, #4]
 800fde4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fdea:	683b      	ldr	r3, [r7, #0]
 800fdec:	781b      	ldrb	r3, [r3, #0]
 800fdee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800fdf0:	683b      	ldr	r3, [r7, #0]
 800fdf2:	785b      	ldrb	r3, [r3, #1]
 800fdf4:	2b01      	cmp	r3, #1
 800fdf6:	d161      	bne.n	800febc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fdf8:	68bb      	ldr	r3, [r7, #8]
 800fdfa:	015a      	lsls	r2, r3, #5
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	4413      	add	r3, r2
 800fe00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fe0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fe0e:	d11f      	bne.n	800fe50 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800fe10:	68bb      	ldr	r3, [r7, #8]
 800fe12:	015a      	lsls	r2, r3, #5
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	4413      	add	r3, r2
 800fe18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	68ba      	ldr	r2, [r7, #8]
 800fe20:	0151      	lsls	r1, r2, #5
 800fe22:	68fa      	ldr	r2, [r7, #12]
 800fe24:	440a      	add	r2, r1
 800fe26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800fe2e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800fe30:	68bb      	ldr	r3, [r7, #8]
 800fe32:	015a      	lsls	r2, r3, #5
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	4413      	add	r3, r2
 800fe38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	68ba      	ldr	r2, [r7, #8]
 800fe40:	0151      	lsls	r1, r2, #5
 800fe42:	68fa      	ldr	r2, [r7, #12]
 800fe44:	440a      	add	r2, r1
 800fe46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fe4e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fe58:	683b      	ldr	r3, [r7, #0]
 800fe5a:	781b      	ldrb	r3, [r3, #0]
 800fe5c:	f003 030f 	and.w	r3, r3, #15
 800fe60:	2101      	movs	r1, #1
 800fe62:	fa01 f303 	lsl.w	r3, r1, r3
 800fe66:	b29b      	uxth	r3, r3
 800fe68:	43db      	mvns	r3, r3
 800fe6a:	68f9      	ldr	r1, [r7, #12]
 800fe6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fe70:	4013      	ands	r3, r2
 800fe72:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe7a:	69da      	ldr	r2, [r3, #28]
 800fe7c:	683b      	ldr	r3, [r7, #0]
 800fe7e:	781b      	ldrb	r3, [r3, #0]
 800fe80:	f003 030f 	and.w	r3, r3, #15
 800fe84:	2101      	movs	r1, #1
 800fe86:	fa01 f303 	lsl.w	r3, r1, r3
 800fe8a:	b29b      	uxth	r3, r3
 800fe8c:	43db      	mvns	r3, r3
 800fe8e:	68f9      	ldr	r1, [r7, #12]
 800fe90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fe94:	4013      	ands	r3, r2
 800fe96:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800fe98:	68bb      	ldr	r3, [r7, #8]
 800fe9a:	015a      	lsls	r2, r3, #5
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	4413      	add	r3, r2
 800fea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fea4:	681a      	ldr	r2, [r3, #0]
 800fea6:	68bb      	ldr	r3, [r7, #8]
 800fea8:	0159      	lsls	r1, r3, #5
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	440b      	add	r3, r1
 800feae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800feb2:	4619      	mov	r1, r3
 800feb4:	4b35      	ldr	r3, [pc, #212]	; (800ff8c <USB_DeactivateEndpoint+0x1b0>)
 800feb6:	4013      	ands	r3, r2
 800feb8:	600b      	str	r3, [r1, #0]
 800feba:	e060      	b.n	800ff7e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800febc:	68bb      	ldr	r3, [r7, #8]
 800febe:	015a      	lsls	r2, r3, #5
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	4413      	add	r3, r2
 800fec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fece:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fed2:	d11f      	bne.n	800ff14 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800fed4:	68bb      	ldr	r3, [r7, #8]
 800fed6:	015a      	lsls	r2, r3, #5
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	4413      	add	r3, r2
 800fedc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	68ba      	ldr	r2, [r7, #8]
 800fee4:	0151      	lsls	r1, r2, #5
 800fee6:	68fa      	ldr	r2, [r7, #12]
 800fee8:	440a      	add	r2, r1
 800feea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800feee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800fef2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800fef4:	68bb      	ldr	r3, [r7, #8]
 800fef6:	015a      	lsls	r2, r3, #5
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	4413      	add	r3, r2
 800fefc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	68ba      	ldr	r2, [r7, #8]
 800ff04:	0151      	lsls	r1, r2, #5
 800ff06:	68fa      	ldr	r2, [r7, #12]
 800ff08:	440a      	add	r2, r1
 800ff0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ff0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ff12:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ff1c:	683b      	ldr	r3, [r7, #0]
 800ff1e:	781b      	ldrb	r3, [r3, #0]
 800ff20:	f003 030f 	and.w	r3, r3, #15
 800ff24:	2101      	movs	r1, #1
 800ff26:	fa01 f303 	lsl.w	r3, r1, r3
 800ff2a:	041b      	lsls	r3, r3, #16
 800ff2c:	43db      	mvns	r3, r3
 800ff2e:	68f9      	ldr	r1, [r7, #12]
 800ff30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ff34:	4013      	ands	r3, r2
 800ff36:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff3e:	69da      	ldr	r2, [r3, #28]
 800ff40:	683b      	ldr	r3, [r7, #0]
 800ff42:	781b      	ldrb	r3, [r3, #0]
 800ff44:	f003 030f 	and.w	r3, r3, #15
 800ff48:	2101      	movs	r1, #1
 800ff4a:	fa01 f303 	lsl.w	r3, r1, r3
 800ff4e:	041b      	lsls	r3, r3, #16
 800ff50:	43db      	mvns	r3, r3
 800ff52:	68f9      	ldr	r1, [r7, #12]
 800ff54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ff58:	4013      	ands	r3, r2
 800ff5a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ff5c:	68bb      	ldr	r3, [r7, #8]
 800ff5e:	015a      	lsls	r2, r3, #5
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	4413      	add	r3, r2
 800ff64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff68:	681a      	ldr	r2, [r3, #0]
 800ff6a:	68bb      	ldr	r3, [r7, #8]
 800ff6c:	0159      	lsls	r1, r3, #5
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	440b      	add	r3, r1
 800ff72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff76:	4619      	mov	r1, r3
 800ff78:	4b05      	ldr	r3, [pc, #20]	; (800ff90 <USB_DeactivateEndpoint+0x1b4>)
 800ff7a:	4013      	ands	r3, r2
 800ff7c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ff7e:	2300      	movs	r3, #0
}
 800ff80:	4618      	mov	r0, r3
 800ff82:	3714      	adds	r7, #20
 800ff84:	46bd      	mov	sp, r7
 800ff86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff8a:	4770      	bx	lr
 800ff8c:	ec337800 	.word	0xec337800
 800ff90:	eff37800 	.word	0xeff37800

0800ff94 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b08a      	sub	sp, #40	; 0x28
 800ff98:	af02      	add	r7, sp, #8
 800ff9a:	60f8      	str	r0, [r7, #12]
 800ff9c:	60b9      	str	r1, [r7, #8]
 800ff9e:	4613      	mov	r3, r2
 800ffa0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800ffa6:	68bb      	ldr	r3, [r7, #8]
 800ffa8:	781b      	ldrb	r3, [r3, #0]
 800ffaa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ffac:	68bb      	ldr	r3, [r7, #8]
 800ffae:	785b      	ldrb	r3, [r3, #1]
 800ffb0:	2b01      	cmp	r3, #1
 800ffb2:	f040 815c 	bne.w	801026e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ffb6:	68bb      	ldr	r3, [r7, #8]
 800ffb8:	695b      	ldr	r3, [r3, #20]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d132      	bne.n	8010024 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ffbe:	69bb      	ldr	r3, [r7, #24]
 800ffc0:	015a      	lsls	r2, r3, #5
 800ffc2:	69fb      	ldr	r3, [r7, #28]
 800ffc4:	4413      	add	r3, r2
 800ffc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffca:	691b      	ldr	r3, [r3, #16]
 800ffcc:	69ba      	ldr	r2, [r7, #24]
 800ffce:	0151      	lsls	r1, r2, #5
 800ffd0:	69fa      	ldr	r2, [r7, #28]
 800ffd2:	440a      	add	r2, r1
 800ffd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ffd8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ffdc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ffe0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ffe2:	69bb      	ldr	r3, [r7, #24]
 800ffe4:	015a      	lsls	r2, r3, #5
 800ffe6:	69fb      	ldr	r3, [r7, #28]
 800ffe8:	4413      	add	r3, r2
 800ffea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffee:	691b      	ldr	r3, [r3, #16]
 800fff0:	69ba      	ldr	r2, [r7, #24]
 800fff2:	0151      	lsls	r1, r2, #5
 800fff4:	69fa      	ldr	r2, [r7, #28]
 800fff6:	440a      	add	r2, r1
 800fff8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fffc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010000:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010002:	69bb      	ldr	r3, [r7, #24]
 8010004:	015a      	lsls	r2, r3, #5
 8010006:	69fb      	ldr	r3, [r7, #28]
 8010008:	4413      	add	r3, r2
 801000a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801000e:	691b      	ldr	r3, [r3, #16]
 8010010:	69ba      	ldr	r2, [r7, #24]
 8010012:	0151      	lsls	r1, r2, #5
 8010014:	69fa      	ldr	r2, [r7, #28]
 8010016:	440a      	add	r2, r1
 8010018:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801001c:	0cdb      	lsrs	r3, r3, #19
 801001e:	04db      	lsls	r3, r3, #19
 8010020:	6113      	str	r3, [r2, #16]
 8010022:	e074      	b.n	801010e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010024:	69bb      	ldr	r3, [r7, #24]
 8010026:	015a      	lsls	r2, r3, #5
 8010028:	69fb      	ldr	r3, [r7, #28]
 801002a:	4413      	add	r3, r2
 801002c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010030:	691b      	ldr	r3, [r3, #16]
 8010032:	69ba      	ldr	r2, [r7, #24]
 8010034:	0151      	lsls	r1, r2, #5
 8010036:	69fa      	ldr	r2, [r7, #28]
 8010038:	440a      	add	r2, r1
 801003a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801003e:	0cdb      	lsrs	r3, r3, #19
 8010040:	04db      	lsls	r3, r3, #19
 8010042:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010044:	69bb      	ldr	r3, [r7, #24]
 8010046:	015a      	lsls	r2, r3, #5
 8010048:	69fb      	ldr	r3, [r7, #28]
 801004a:	4413      	add	r3, r2
 801004c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010050:	691b      	ldr	r3, [r3, #16]
 8010052:	69ba      	ldr	r2, [r7, #24]
 8010054:	0151      	lsls	r1, r2, #5
 8010056:	69fa      	ldr	r2, [r7, #28]
 8010058:	440a      	add	r2, r1
 801005a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801005e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010062:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010066:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8010068:	69bb      	ldr	r3, [r7, #24]
 801006a:	015a      	lsls	r2, r3, #5
 801006c:	69fb      	ldr	r3, [r7, #28]
 801006e:	4413      	add	r3, r2
 8010070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010074:	691a      	ldr	r2, [r3, #16]
 8010076:	68bb      	ldr	r3, [r7, #8]
 8010078:	6959      	ldr	r1, [r3, #20]
 801007a:	68bb      	ldr	r3, [r7, #8]
 801007c:	689b      	ldr	r3, [r3, #8]
 801007e:	440b      	add	r3, r1
 8010080:	1e59      	subs	r1, r3, #1
 8010082:	68bb      	ldr	r3, [r7, #8]
 8010084:	689b      	ldr	r3, [r3, #8]
 8010086:	fbb1 f3f3 	udiv	r3, r1, r3
 801008a:	04d9      	lsls	r1, r3, #19
 801008c:	4b9d      	ldr	r3, [pc, #628]	; (8010304 <USB_EPStartXfer+0x370>)
 801008e:	400b      	ands	r3, r1
 8010090:	69b9      	ldr	r1, [r7, #24]
 8010092:	0148      	lsls	r0, r1, #5
 8010094:	69f9      	ldr	r1, [r7, #28]
 8010096:	4401      	add	r1, r0
 8010098:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801009c:	4313      	orrs	r3, r2
 801009e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80100a0:	69bb      	ldr	r3, [r7, #24]
 80100a2:	015a      	lsls	r2, r3, #5
 80100a4:	69fb      	ldr	r3, [r7, #28]
 80100a6:	4413      	add	r3, r2
 80100a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100ac:	691a      	ldr	r2, [r3, #16]
 80100ae:	68bb      	ldr	r3, [r7, #8]
 80100b0:	695b      	ldr	r3, [r3, #20]
 80100b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80100b6:	69b9      	ldr	r1, [r7, #24]
 80100b8:	0148      	lsls	r0, r1, #5
 80100ba:	69f9      	ldr	r1, [r7, #28]
 80100bc:	4401      	add	r1, r0
 80100be:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80100c2:	4313      	orrs	r3, r2
 80100c4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80100c6:	68bb      	ldr	r3, [r7, #8]
 80100c8:	78db      	ldrb	r3, [r3, #3]
 80100ca:	2b01      	cmp	r3, #1
 80100cc:	d11f      	bne.n	801010e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80100ce:	69bb      	ldr	r3, [r7, #24]
 80100d0:	015a      	lsls	r2, r3, #5
 80100d2:	69fb      	ldr	r3, [r7, #28]
 80100d4:	4413      	add	r3, r2
 80100d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100da:	691b      	ldr	r3, [r3, #16]
 80100dc:	69ba      	ldr	r2, [r7, #24]
 80100de:	0151      	lsls	r1, r2, #5
 80100e0:	69fa      	ldr	r2, [r7, #28]
 80100e2:	440a      	add	r2, r1
 80100e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80100e8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80100ec:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80100ee:	69bb      	ldr	r3, [r7, #24]
 80100f0:	015a      	lsls	r2, r3, #5
 80100f2:	69fb      	ldr	r3, [r7, #28]
 80100f4:	4413      	add	r3, r2
 80100f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100fa:	691b      	ldr	r3, [r3, #16]
 80100fc:	69ba      	ldr	r2, [r7, #24]
 80100fe:	0151      	lsls	r1, r2, #5
 8010100:	69fa      	ldr	r2, [r7, #28]
 8010102:	440a      	add	r2, r1
 8010104:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010108:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801010c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801010e:	79fb      	ldrb	r3, [r7, #7]
 8010110:	2b01      	cmp	r3, #1
 8010112:	d14b      	bne.n	80101ac <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8010114:	68bb      	ldr	r3, [r7, #8]
 8010116:	691b      	ldr	r3, [r3, #16]
 8010118:	2b00      	cmp	r3, #0
 801011a:	d009      	beq.n	8010130 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801011c:	69bb      	ldr	r3, [r7, #24]
 801011e:	015a      	lsls	r2, r3, #5
 8010120:	69fb      	ldr	r3, [r7, #28]
 8010122:	4413      	add	r3, r2
 8010124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010128:	461a      	mov	r2, r3
 801012a:	68bb      	ldr	r3, [r7, #8]
 801012c:	691b      	ldr	r3, [r3, #16]
 801012e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8010130:	68bb      	ldr	r3, [r7, #8]
 8010132:	78db      	ldrb	r3, [r3, #3]
 8010134:	2b01      	cmp	r3, #1
 8010136:	d128      	bne.n	801018a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010138:	69fb      	ldr	r3, [r7, #28]
 801013a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801013e:	689b      	ldr	r3, [r3, #8]
 8010140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010144:	2b00      	cmp	r3, #0
 8010146:	d110      	bne.n	801016a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010148:	69bb      	ldr	r3, [r7, #24]
 801014a:	015a      	lsls	r2, r3, #5
 801014c:	69fb      	ldr	r3, [r7, #28]
 801014e:	4413      	add	r3, r2
 8010150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	69ba      	ldr	r2, [r7, #24]
 8010158:	0151      	lsls	r1, r2, #5
 801015a:	69fa      	ldr	r2, [r7, #28]
 801015c:	440a      	add	r2, r1
 801015e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010162:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010166:	6013      	str	r3, [r2, #0]
 8010168:	e00f      	b.n	801018a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801016a:	69bb      	ldr	r3, [r7, #24]
 801016c:	015a      	lsls	r2, r3, #5
 801016e:	69fb      	ldr	r3, [r7, #28]
 8010170:	4413      	add	r3, r2
 8010172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	69ba      	ldr	r2, [r7, #24]
 801017a:	0151      	lsls	r1, r2, #5
 801017c:	69fa      	ldr	r2, [r7, #28]
 801017e:	440a      	add	r2, r1
 8010180:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010188:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801018a:	69bb      	ldr	r3, [r7, #24]
 801018c:	015a      	lsls	r2, r3, #5
 801018e:	69fb      	ldr	r3, [r7, #28]
 8010190:	4413      	add	r3, r2
 8010192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	69ba      	ldr	r2, [r7, #24]
 801019a:	0151      	lsls	r1, r2, #5
 801019c:	69fa      	ldr	r2, [r7, #28]
 801019e:	440a      	add	r2, r1
 80101a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80101a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80101a8:	6013      	str	r3, [r2, #0]
 80101aa:	e12f      	b.n	801040c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80101ac:	69bb      	ldr	r3, [r7, #24]
 80101ae:	015a      	lsls	r2, r3, #5
 80101b0:	69fb      	ldr	r3, [r7, #28]
 80101b2:	4413      	add	r3, r2
 80101b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	69ba      	ldr	r2, [r7, #24]
 80101bc:	0151      	lsls	r1, r2, #5
 80101be:	69fa      	ldr	r2, [r7, #28]
 80101c0:	440a      	add	r2, r1
 80101c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80101c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80101ca:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80101cc:	68bb      	ldr	r3, [r7, #8]
 80101ce:	78db      	ldrb	r3, [r3, #3]
 80101d0:	2b01      	cmp	r3, #1
 80101d2:	d015      	beq.n	8010200 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80101d4:	68bb      	ldr	r3, [r7, #8]
 80101d6:	695b      	ldr	r3, [r3, #20]
 80101d8:	2b00      	cmp	r3, #0
 80101da:	f000 8117 	beq.w	801040c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80101de:	69fb      	ldr	r3, [r7, #28]
 80101e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80101e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80101e6:	68bb      	ldr	r3, [r7, #8]
 80101e8:	781b      	ldrb	r3, [r3, #0]
 80101ea:	f003 030f 	and.w	r3, r3, #15
 80101ee:	2101      	movs	r1, #1
 80101f0:	fa01 f303 	lsl.w	r3, r1, r3
 80101f4:	69f9      	ldr	r1, [r7, #28]
 80101f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80101fa:	4313      	orrs	r3, r2
 80101fc:	634b      	str	r3, [r1, #52]	; 0x34
 80101fe:	e105      	b.n	801040c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010200:	69fb      	ldr	r3, [r7, #28]
 8010202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010206:	689b      	ldr	r3, [r3, #8]
 8010208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801020c:	2b00      	cmp	r3, #0
 801020e:	d110      	bne.n	8010232 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010210:	69bb      	ldr	r3, [r7, #24]
 8010212:	015a      	lsls	r2, r3, #5
 8010214:	69fb      	ldr	r3, [r7, #28]
 8010216:	4413      	add	r3, r2
 8010218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	69ba      	ldr	r2, [r7, #24]
 8010220:	0151      	lsls	r1, r2, #5
 8010222:	69fa      	ldr	r2, [r7, #28]
 8010224:	440a      	add	r2, r1
 8010226:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801022a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801022e:	6013      	str	r3, [r2, #0]
 8010230:	e00f      	b.n	8010252 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8010232:	69bb      	ldr	r3, [r7, #24]
 8010234:	015a      	lsls	r2, r3, #5
 8010236:	69fb      	ldr	r3, [r7, #28]
 8010238:	4413      	add	r3, r2
 801023a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	69ba      	ldr	r2, [r7, #24]
 8010242:	0151      	lsls	r1, r2, #5
 8010244:	69fa      	ldr	r2, [r7, #28]
 8010246:	440a      	add	r2, r1
 8010248:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801024c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010250:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8010252:	68bb      	ldr	r3, [r7, #8]
 8010254:	68d9      	ldr	r1, [r3, #12]
 8010256:	68bb      	ldr	r3, [r7, #8]
 8010258:	781a      	ldrb	r2, [r3, #0]
 801025a:	68bb      	ldr	r3, [r7, #8]
 801025c:	695b      	ldr	r3, [r3, #20]
 801025e:	b298      	uxth	r0, r3
 8010260:	79fb      	ldrb	r3, [r7, #7]
 8010262:	9300      	str	r3, [sp, #0]
 8010264:	4603      	mov	r3, r0
 8010266:	68f8      	ldr	r0, [r7, #12]
 8010268:	f000 fa2b 	bl	80106c2 <USB_WritePacket>
 801026c:	e0ce      	b.n	801040c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801026e:	69bb      	ldr	r3, [r7, #24]
 8010270:	015a      	lsls	r2, r3, #5
 8010272:	69fb      	ldr	r3, [r7, #28]
 8010274:	4413      	add	r3, r2
 8010276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801027a:	691b      	ldr	r3, [r3, #16]
 801027c:	69ba      	ldr	r2, [r7, #24]
 801027e:	0151      	lsls	r1, r2, #5
 8010280:	69fa      	ldr	r2, [r7, #28]
 8010282:	440a      	add	r2, r1
 8010284:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010288:	0cdb      	lsrs	r3, r3, #19
 801028a:	04db      	lsls	r3, r3, #19
 801028c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801028e:	69bb      	ldr	r3, [r7, #24]
 8010290:	015a      	lsls	r2, r3, #5
 8010292:	69fb      	ldr	r3, [r7, #28]
 8010294:	4413      	add	r3, r2
 8010296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801029a:	691b      	ldr	r3, [r3, #16]
 801029c:	69ba      	ldr	r2, [r7, #24]
 801029e:	0151      	lsls	r1, r2, #5
 80102a0:	69fa      	ldr	r2, [r7, #28]
 80102a2:	440a      	add	r2, r1
 80102a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80102a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80102ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80102b0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80102b2:	68bb      	ldr	r3, [r7, #8]
 80102b4:	695b      	ldr	r3, [r3, #20]
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d126      	bne.n	8010308 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80102ba:	69bb      	ldr	r3, [r7, #24]
 80102bc:	015a      	lsls	r2, r3, #5
 80102be:	69fb      	ldr	r3, [r7, #28]
 80102c0:	4413      	add	r3, r2
 80102c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102c6:	691a      	ldr	r2, [r3, #16]
 80102c8:	68bb      	ldr	r3, [r7, #8]
 80102ca:	689b      	ldr	r3, [r3, #8]
 80102cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80102d0:	69b9      	ldr	r1, [r7, #24]
 80102d2:	0148      	lsls	r0, r1, #5
 80102d4:	69f9      	ldr	r1, [r7, #28]
 80102d6:	4401      	add	r1, r0
 80102d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80102dc:	4313      	orrs	r3, r2
 80102de:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80102e0:	69bb      	ldr	r3, [r7, #24]
 80102e2:	015a      	lsls	r2, r3, #5
 80102e4:	69fb      	ldr	r3, [r7, #28]
 80102e6:	4413      	add	r3, r2
 80102e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102ec:	691b      	ldr	r3, [r3, #16]
 80102ee:	69ba      	ldr	r2, [r7, #24]
 80102f0:	0151      	lsls	r1, r2, #5
 80102f2:	69fa      	ldr	r2, [r7, #28]
 80102f4:	440a      	add	r2, r1
 80102f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80102fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80102fe:	6113      	str	r3, [r2, #16]
 8010300:	e036      	b.n	8010370 <USB_EPStartXfer+0x3dc>
 8010302:	bf00      	nop
 8010304:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8010308:	68bb      	ldr	r3, [r7, #8]
 801030a:	695a      	ldr	r2, [r3, #20]
 801030c:	68bb      	ldr	r3, [r7, #8]
 801030e:	689b      	ldr	r3, [r3, #8]
 8010310:	4413      	add	r3, r2
 8010312:	1e5a      	subs	r2, r3, #1
 8010314:	68bb      	ldr	r3, [r7, #8]
 8010316:	689b      	ldr	r3, [r3, #8]
 8010318:	fbb2 f3f3 	udiv	r3, r2, r3
 801031c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801031e:	69bb      	ldr	r3, [r7, #24]
 8010320:	015a      	lsls	r2, r3, #5
 8010322:	69fb      	ldr	r3, [r7, #28]
 8010324:	4413      	add	r3, r2
 8010326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801032a:	691a      	ldr	r2, [r3, #16]
 801032c:	8afb      	ldrh	r3, [r7, #22]
 801032e:	04d9      	lsls	r1, r3, #19
 8010330:	4b39      	ldr	r3, [pc, #228]	; (8010418 <USB_EPStartXfer+0x484>)
 8010332:	400b      	ands	r3, r1
 8010334:	69b9      	ldr	r1, [r7, #24]
 8010336:	0148      	lsls	r0, r1, #5
 8010338:	69f9      	ldr	r1, [r7, #28]
 801033a:	4401      	add	r1, r0
 801033c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010340:	4313      	orrs	r3, r2
 8010342:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8010344:	69bb      	ldr	r3, [r7, #24]
 8010346:	015a      	lsls	r2, r3, #5
 8010348:	69fb      	ldr	r3, [r7, #28]
 801034a:	4413      	add	r3, r2
 801034c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010350:	691a      	ldr	r2, [r3, #16]
 8010352:	68bb      	ldr	r3, [r7, #8]
 8010354:	689b      	ldr	r3, [r3, #8]
 8010356:	8af9      	ldrh	r1, [r7, #22]
 8010358:	fb01 f303 	mul.w	r3, r1, r3
 801035c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010360:	69b9      	ldr	r1, [r7, #24]
 8010362:	0148      	lsls	r0, r1, #5
 8010364:	69f9      	ldr	r1, [r7, #28]
 8010366:	4401      	add	r1, r0
 8010368:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801036c:	4313      	orrs	r3, r2
 801036e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8010370:	79fb      	ldrb	r3, [r7, #7]
 8010372:	2b01      	cmp	r3, #1
 8010374:	d10d      	bne.n	8010392 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8010376:	68bb      	ldr	r3, [r7, #8]
 8010378:	68db      	ldr	r3, [r3, #12]
 801037a:	2b00      	cmp	r3, #0
 801037c:	d009      	beq.n	8010392 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801037e:	68bb      	ldr	r3, [r7, #8]
 8010380:	68d9      	ldr	r1, [r3, #12]
 8010382:	69bb      	ldr	r3, [r7, #24]
 8010384:	015a      	lsls	r2, r3, #5
 8010386:	69fb      	ldr	r3, [r7, #28]
 8010388:	4413      	add	r3, r2
 801038a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801038e:	460a      	mov	r2, r1
 8010390:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8010392:	68bb      	ldr	r3, [r7, #8]
 8010394:	78db      	ldrb	r3, [r3, #3]
 8010396:	2b01      	cmp	r3, #1
 8010398:	d128      	bne.n	80103ec <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801039a:	69fb      	ldr	r3, [r7, #28]
 801039c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80103a0:	689b      	ldr	r3, [r3, #8]
 80103a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d110      	bne.n	80103cc <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80103aa:	69bb      	ldr	r3, [r7, #24]
 80103ac:	015a      	lsls	r2, r3, #5
 80103ae:	69fb      	ldr	r3, [r7, #28]
 80103b0:	4413      	add	r3, r2
 80103b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	69ba      	ldr	r2, [r7, #24]
 80103ba:	0151      	lsls	r1, r2, #5
 80103bc:	69fa      	ldr	r2, [r7, #28]
 80103be:	440a      	add	r2, r1
 80103c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80103c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80103c8:	6013      	str	r3, [r2, #0]
 80103ca:	e00f      	b.n	80103ec <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80103cc:	69bb      	ldr	r3, [r7, #24]
 80103ce:	015a      	lsls	r2, r3, #5
 80103d0:	69fb      	ldr	r3, [r7, #28]
 80103d2:	4413      	add	r3, r2
 80103d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	69ba      	ldr	r2, [r7, #24]
 80103dc:	0151      	lsls	r1, r2, #5
 80103de:	69fa      	ldr	r2, [r7, #28]
 80103e0:	440a      	add	r2, r1
 80103e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80103e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80103ea:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80103ec:	69bb      	ldr	r3, [r7, #24]
 80103ee:	015a      	lsls	r2, r3, #5
 80103f0:	69fb      	ldr	r3, [r7, #28]
 80103f2:	4413      	add	r3, r2
 80103f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	69ba      	ldr	r2, [r7, #24]
 80103fc:	0151      	lsls	r1, r2, #5
 80103fe:	69fa      	ldr	r2, [r7, #28]
 8010400:	440a      	add	r2, r1
 8010402:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010406:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801040a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801040c:	2300      	movs	r3, #0
}
 801040e:	4618      	mov	r0, r3
 8010410:	3720      	adds	r7, #32
 8010412:	46bd      	mov	sp, r7
 8010414:	bd80      	pop	{r7, pc}
 8010416:	bf00      	nop
 8010418:	1ff80000 	.word	0x1ff80000

0801041c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801041c:	b480      	push	{r7}
 801041e:	b087      	sub	sp, #28
 8010420:	af00      	add	r7, sp, #0
 8010422:	60f8      	str	r0, [r7, #12]
 8010424:	60b9      	str	r1, [r7, #8]
 8010426:	4613      	mov	r3, r2
 8010428:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 801042e:	68bb      	ldr	r3, [r7, #8]
 8010430:	781b      	ldrb	r3, [r3, #0]
 8010432:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010434:	68bb      	ldr	r3, [r7, #8]
 8010436:	785b      	ldrb	r3, [r3, #1]
 8010438:	2b01      	cmp	r3, #1
 801043a:	f040 80cd 	bne.w	80105d8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801043e:	68bb      	ldr	r3, [r7, #8]
 8010440:	695b      	ldr	r3, [r3, #20]
 8010442:	2b00      	cmp	r3, #0
 8010444:	d132      	bne.n	80104ac <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010446:	693b      	ldr	r3, [r7, #16]
 8010448:	015a      	lsls	r2, r3, #5
 801044a:	697b      	ldr	r3, [r7, #20]
 801044c:	4413      	add	r3, r2
 801044e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010452:	691b      	ldr	r3, [r3, #16]
 8010454:	693a      	ldr	r2, [r7, #16]
 8010456:	0151      	lsls	r1, r2, #5
 8010458:	697a      	ldr	r2, [r7, #20]
 801045a:	440a      	add	r2, r1
 801045c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010460:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010464:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010468:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801046a:	693b      	ldr	r3, [r7, #16]
 801046c:	015a      	lsls	r2, r3, #5
 801046e:	697b      	ldr	r3, [r7, #20]
 8010470:	4413      	add	r3, r2
 8010472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010476:	691b      	ldr	r3, [r3, #16]
 8010478:	693a      	ldr	r2, [r7, #16]
 801047a:	0151      	lsls	r1, r2, #5
 801047c:	697a      	ldr	r2, [r7, #20]
 801047e:	440a      	add	r2, r1
 8010480:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010484:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010488:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801048a:	693b      	ldr	r3, [r7, #16]
 801048c:	015a      	lsls	r2, r3, #5
 801048e:	697b      	ldr	r3, [r7, #20]
 8010490:	4413      	add	r3, r2
 8010492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010496:	691b      	ldr	r3, [r3, #16]
 8010498:	693a      	ldr	r2, [r7, #16]
 801049a:	0151      	lsls	r1, r2, #5
 801049c:	697a      	ldr	r2, [r7, #20]
 801049e:	440a      	add	r2, r1
 80104a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80104a4:	0cdb      	lsrs	r3, r3, #19
 80104a6:	04db      	lsls	r3, r3, #19
 80104a8:	6113      	str	r3, [r2, #16]
 80104aa:	e04e      	b.n	801054a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80104ac:	693b      	ldr	r3, [r7, #16]
 80104ae:	015a      	lsls	r2, r3, #5
 80104b0:	697b      	ldr	r3, [r7, #20]
 80104b2:	4413      	add	r3, r2
 80104b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80104b8:	691b      	ldr	r3, [r3, #16]
 80104ba:	693a      	ldr	r2, [r7, #16]
 80104bc:	0151      	lsls	r1, r2, #5
 80104be:	697a      	ldr	r2, [r7, #20]
 80104c0:	440a      	add	r2, r1
 80104c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80104c6:	0cdb      	lsrs	r3, r3, #19
 80104c8:	04db      	lsls	r3, r3, #19
 80104ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80104cc:	693b      	ldr	r3, [r7, #16]
 80104ce:	015a      	lsls	r2, r3, #5
 80104d0:	697b      	ldr	r3, [r7, #20]
 80104d2:	4413      	add	r3, r2
 80104d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80104d8:	691b      	ldr	r3, [r3, #16]
 80104da:	693a      	ldr	r2, [r7, #16]
 80104dc:	0151      	lsls	r1, r2, #5
 80104de:	697a      	ldr	r2, [r7, #20]
 80104e0:	440a      	add	r2, r1
 80104e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80104e6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80104ea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80104ee:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80104f0:	68bb      	ldr	r3, [r7, #8]
 80104f2:	695a      	ldr	r2, [r3, #20]
 80104f4:	68bb      	ldr	r3, [r7, #8]
 80104f6:	689b      	ldr	r3, [r3, #8]
 80104f8:	429a      	cmp	r2, r3
 80104fa:	d903      	bls.n	8010504 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80104fc:	68bb      	ldr	r3, [r7, #8]
 80104fe:	689a      	ldr	r2, [r3, #8]
 8010500:	68bb      	ldr	r3, [r7, #8]
 8010502:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010504:	693b      	ldr	r3, [r7, #16]
 8010506:	015a      	lsls	r2, r3, #5
 8010508:	697b      	ldr	r3, [r7, #20]
 801050a:	4413      	add	r3, r2
 801050c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010510:	691b      	ldr	r3, [r3, #16]
 8010512:	693a      	ldr	r2, [r7, #16]
 8010514:	0151      	lsls	r1, r2, #5
 8010516:	697a      	ldr	r2, [r7, #20]
 8010518:	440a      	add	r2, r1
 801051a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801051e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010522:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010524:	693b      	ldr	r3, [r7, #16]
 8010526:	015a      	lsls	r2, r3, #5
 8010528:	697b      	ldr	r3, [r7, #20]
 801052a:	4413      	add	r3, r2
 801052c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010530:	691a      	ldr	r2, [r3, #16]
 8010532:	68bb      	ldr	r3, [r7, #8]
 8010534:	695b      	ldr	r3, [r3, #20]
 8010536:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801053a:	6939      	ldr	r1, [r7, #16]
 801053c:	0148      	lsls	r0, r1, #5
 801053e:	6979      	ldr	r1, [r7, #20]
 8010540:	4401      	add	r1, r0
 8010542:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010546:	4313      	orrs	r3, r2
 8010548:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801054a:	79fb      	ldrb	r3, [r7, #7]
 801054c:	2b01      	cmp	r3, #1
 801054e:	d11e      	bne.n	801058e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8010550:	68bb      	ldr	r3, [r7, #8]
 8010552:	691b      	ldr	r3, [r3, #16]
 8010554:	2b00      	cmp	r3, #0
 8010556:	d009      	beq.n	801056c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8010558:	693b      	ldr	r3, [r7, #16]
 801055a:	015a      	lsls	r2, r3, #5
 801055c:	697b      	ldr	r3, [r7, #20]
 801055e:	4413      	add	r3, r2
 8010560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010564:	461a      	mov	r2, r3
 8010566:	68bb      	ldr	r3, [r7, #8]
 8010568:	691b      	ldr	r3, [r3, #16]
 801056a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801056c:	693b      	ldr	r3, [r7, #16]
 801056e:	015a      	lsls	r2, r3, #5
 8010570:	697b      	ldr	r3, [r7, #20]
 8010572:	4413      	add	r3, r2
 8010574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	693a      	ldr	r2, [r7, #16]
 801057c:	0151      	lsls	r1, r2, #5
 801057e:	697a      	ldr	r2, [r7, #20]
 8010580:	440a      	add	r2, r1
 8010582:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010586:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801058a:	6013      	str	r3, [r2, #0]
 801058c:	e092      	b.n	80106b4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801058e:	693b      	ldr	r3, [r7, #16]
 8010590:	015a      	lsls	r2, r3, #5
 8010592:	697b      	ldr	r3, [r7, #20]
 8010594:	4413      	add	r3, r2
 8010596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	693a      	ldr	r2, [r7, #16]
 801059e:	0151      	lsls	r1, r2, #5
 80105a0:	697a      	ldr	r2, [r7, #20]
 80105a2:	440a      	add	r2, r1
 80105a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80105a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80105ac:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80105ae:	68bb      	ldr	r3, [r7, #8]
 80105b0:	695b      	ldr	r3, [r3, #20]
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d07e      	beq.n	80106b4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80105b6:	697b      	ldr	r3, [r7, #20]
 80105b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80105bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80105be:	68bb      	ldr	r3, [r7, #8]
 80105c0:	781b      	ldrb	r3, [r3, #0]
 80105c2:	f003 030f 	and.w	r3, r3, #15
 80105c6:	2101      	movs	r1, #1
 80105c8:	fa01 f303 	lsl.w	r3, r1, r3
 80105cc:	6979      	ldr	r1, [r7, #20]
 80105ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80105d2:	4313      	orrs	r3, r2
 80105d4:	634b      	str	r3, [r1, #52]	; 0x34
 80105d6:	e06d      	b.n	80106b4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80105d8:	693b      	ldr	r3, [r7, #16]
 80105da:	015a      	lsls	r2, r3, #5
 80105dc:	697b      	ldr	r3, [r7, #20]
 80105de:	4413      	add	r3, r2
 80105e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80105e4:	691b      	ldr	r3, [r3, #16]
 80105e6:	693a      	ldr	r2, [r7, #16]
 80105e8:	0151      	lsls	r1, r2, #5
 80105ea:	697a      	ldr	r2, [r7, #20]
 80105ec:	440a      	add	r2, r1
 80105ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80105f2:	0cdb      	lsrs	r3, r3, #19
 80105f4:	04db      	lsls	r3, r3, #19
 80105f6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80105f8:	693b      	ldr	r3, [r7, #16]
 80105fa:	015a      	lsls	r2, r3, #5
 80105fc:	697b      	ldr	r3, [r7, #20]
 80105fe:	4413      	add	r3, r2
 8010600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010604:	691b      	ldr	r3, [r3, #16]
 8010606:	693a      	ldr	r2, [r7, #16]
 8010608:	0151      	lsls	r1, r2, #5
 801060a:	697a      	ldr	r2, [r7, #20]
 801060c:	440a      	add	r2, r1
 801060e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010612:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010616:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801061a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 801061c:	68bb      	ldr	r3, [r7, #8]
 801061e:	695b      	ldr	r3, [r3, #20]
 8010620:	2b00      	cmp	r3, #0
 8010622:	d003      	beq.n	801062c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8010624:	68bb      	ldr	r3, [r7, #8]
 8010626:	689a      	ldr	r2, [r3, #8]
 8010628:	68bb      	ldr	r3, [r7, #8]
 801062a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801062c:	693b      	ldr	r3, [r7, #16]
 801062e:	015a      	lsls	r2, r3, #5
 8010630:	697b      	ldr	r3, [r7, #20]
 8010632:	4413      	add	r3, r2
 8010634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010638:	691b      	ldr	r3, [r3, #16]
 801063a:	693a      	ldr	r2, [r7, #16]
 801063c:	0151      	lsls	r1, r2, #5
 801063e:	697a      	ldr	r2, [r7, #20]
 8010640:	440a      	add	r2, r1
 8010642:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010646:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801064a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 801064c:	693b      	ldr	r3, [r7, #16]
 801064e:	015a      	lsls	r2, r3, #5
 8010650:	697b      	ldr	r3, [r7, #20]
 8010652:	4413      	add	r3, r2
 8010654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010658:	691a      	ldr	r2, [r3, #16]
 801065a:	68bb      	ldr	r3, [r7, #8]
 801065c:	689b      	ldr	r3, [r3, #8]
 801065e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010662:	6939      	ldr	r1, [r7, #16]
 8010664:	0148      	lsls	r0, r1, #5
 8010666:	6979      	ldr	r1, [r7, #20]
 8010668:	4401      	add	r1, r0
 801066a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801066e:	4313      	orrs	r3, r2
 8010670:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8010672:	79fb      	ldrb	r3, [r7, #7]
 8010674:	2b01      	cmp	r3, #1
 8010676:	d10d      	bne.n	8010694 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8010678:	68bb      	ldr	r3, [r7, #8]
 801067a:	68db      	ldr	r3, [r3, #12]
 801067c:	2b00      	cmp	r3, #0
 801067e:	d009      	beq.n	8010694 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8010680:	68bb      	ldr	r3, [r7, #8]
 8010682:	68d9      	ldr	r1, [r3, #12]
 8010684:	693b      	ldr	r3, [r7, #16]
 8010686:	015a      	lsls	r2, r3, #5
 8010688:	697b      	ldr	r3, [r7, #20]
 801068a:	4413      	add	r3, r2
 801068c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010690:	460a      	mov	r2, r1
 8010692:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010694:	693b      	ldr	r3, [r7, #16]
 8010696:	015a      	lsls	r2, r3, #5
 8010698:	697b      	ldr	r3, [r7, #20]
 801069a:	4413      	add	r3, r2
 801069c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	693a      	ldr	r2, [r7, #16]
 80106a4:	0151      	lsls	r1, r2, #5
 80106a6:	697a      	ldr	r2, [r7, #20]
 80106a8:	440a      	add	r2, r1
 80106aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80106ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80106b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80106b4:	2300      	movs	r3, #0
}
 80106b6:	4618      	mov	r0, r3
 80106b8:	371c      	adds	r7, #28
 80106ba:	46bd      	mov	sp, r7
 80106bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c0:	4770      	bx	lr

080106c2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80106c2:	b480      	push	{r7}
 80106c4:	b089      	sub	sp, #36	; 0x24
 80106c6:	af00      	add	r7, sp, #0
 80106c8:	60f8      	str	r0, [r7, #12]
 80106ca:	60b9      	str	r1, [r7, #8]
 80106cc:	4611      	mov	r1, r2
 80106ce:	461a      	mov	r2, r3
 80106d0:	460b      	mov	r3, r1
 80106d2:	71fb      	strb	r3, [r7, #7]
 80106d4:	4613      	mov	r3, r2
 80106d6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80106dc:	68bb      	ldr	r3, [r7, #8]
 80106de:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80106e0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d11a      	bne.n	801071e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80106e8:	88bb      	ldrh	r3, [r7, #4]
 80106ea:	3303      	adds	r3, #3
 80106ec:	089b      	lsrs	r3, r3, #2
 80106ee:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80106f0:	2300      	movs	r3, #0
 80106f2:	61bb      	str	r3, [r7, #24]
 80106f4:	e00f      	b.n	8010716 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80106f6:	79fb      	ldrb	r3, [r7, #7]
 80106f8:	031a      	lsls	r2, r3, #12
 80106fa:	697b      	ldr	r3, [r7, #20]
 80106fc:	4413      	add	r3, r2
 80106fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010702:	461a      	mov	r2, r3
 8010704:	69fb      	ldr	r3, [r7, #28]
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	6013      	str	r3, [r2, #0]
      pSrc++;
 801070a:	69fb      	ldr	r3, [r7, #28]
 801070c:	3304      	adds	r3, #4
 801070e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8010710:	69bb      	ldr	r3, [r7, #24]
 8010712:	3301      	adds	r3, #1
 8010714:	61bb      	str	r3, [r7, #24]
 8010716:	69ba      	ldr	r2, [r7, #24]
 8010718:	693b      	ldr	r3, [r7, #16]
 801071a:	429a      	cmp	r2, r3
 801071c:	d3eb      	bcc.n	80106f6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801071e:	2300      	movs	r3, #0
}
 8010720:	4618      	mov	r0, r3
 8010722:	3724      	adds	r7, #36	; 0x24
 8010724:	46bd      	mov	sp, r7
 8010726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801072a:	4770      	bx	lr

0801072c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801072c:	b480      	push	{r7}
 801072e:	b089      	sub	sp, #36	; 0x24
 8010730:	af00      	add	r7, sp, #0
 8010732:	60f8      	str	r0, [r7, #12]
 8010734:	60b9      	str	r1, [r7, #8]
 8010736:	4613      	mov	r3, r2
 8010738:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 801073e:	68bb      	ldr	r3, [r7, #8]
 8010740:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8010742:	88fb      	ldrh	r3, [r7, #6]
 8010744:	3303      	adds	r3, #3
 8010746:	089b      	lsrs	r3, r3, #2
 8010748:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 801074a:	2300      	movs	r3, #0
 801074c:	61bb      	str	r3, [r7, #24]
 801074e:	e00b      	b.n	8010768 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8010750:	697b      	ldr	r3, [r7, #20]
 8010752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010756:	681a      	ldr	r2, [r3, #0]
 8010758:	69fb      	ldr	r3, [r7, #28]
 801075a:	601a      	str	r2, [r3, #0]
    pDest++;
 801075c:	69fb      	ldr	r3, [r7, #28]
 801075e:	3304      	adds	r3, #4
 8010760:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8010762:	69bb      	ldr	r3, [r7, #24]
 8010764:	3301      	adds	r3, #1
 8010766:	61bb      	str	r3, [r7, #24]
 8010768:	69ba      	ldr	r2, [r7, #24]
 801076a:	693b      	ldr	r3, [r7, #16]
 801076c:	429a      	cmp	r2, r3
 801076e:	d3ef      	bcc.n	8010750 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8010770:	69fb      	ldr	r3, [r7, #28]
}
 8010772:	4618      	mov	r0, r3
 8010774:	3724      	adds	r7, #36	; 0x24
 8010776:	46bd      	mov	sp, r7
 8010778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801077c:	4770      	bx	lr

0801077e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801077e:	b480      	push	{r7}
 8010780:	b085      	sub	sp, #20
 8010782:	af00      	add	r7, sp, #0
 8010784:	6078      	str	r0, [r7, #4]
 8010786:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801078c:	683b      	ldr	r3, [r7, #0]
 801078e:	781b      	ldrb	r3, [r3, #0]
 8010790:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010792:	683b      	ldr	r3, [r7, #0]
 8010794:	785b      	ldrb	r3, [r3, #1]
 8010796:	2b01      	cmp	r3, #1
 8010798:	d12c      	bne.n	80107f4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801079a:	68bb      	ldr	r3, [r7, #8]
 801079c:	015a      	lsls	r2, r3, #5
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	4413      	add	r3, r2
 80107a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	db12      	blt.n	80107d2 <USB_EPSetStall+0x54>
 80107ac:	68bb      	ldr	r3, [r7, #8]
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d00f      	beq.n	80107d2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80107b2:	68bb      	ldr	r3, [r7, #8]
 80107b4:	015a      	lsls	r2, r3, #5
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	4413      	add	r3, r2
 80107ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	68ba      	ldr	r2, [r7, #8]
 80107c2:	0151      	lsls	r1, r2, #5
 80107c4:	68fa      	ldr	r2, [r7, #12]
 80107c6:	440a      	add	r2, r1
 80107c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80107cc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80107d0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80107d2:	68bb      	ldr	r3, [r7, #8]
 80107d4:	015a      	lsls	r2, r3, #5
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	4413      	add	r3, r2
 80107da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	68ba      	ldr	r2, [r7, #8]
 80107e2:	0151      	lsls	r1, r2, #5
 80107e4:	68fa      	ldr	r2, [r7, #12]
 80107e6:	440a      	add	r2, r1
 80107e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80107ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80107f0:	6013      	str	r3, [r2, #0]
 80107f2:	e02b      	b.n	801084c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80107f4:	68bb      	ldr	r3, [r7, #8]
 80107f6:	015a      	lsls	r2, r3, #5
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	4413      	add	r3, r2
 80107fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	2b00      	cmp	r3, #0
 8010804:	db12      	blt.n	801082c <USB_EPSetStall+0xae>
 8010806:	68bb      	ldr	r3, [r7, #8]
 8010808:	2b00      	cmp	r3, #0
 801080a:	d00f      	beq.n	801082c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801080c:	68bb      	ldr	r3, [r7, #8]
 801080e:	015a      	lsls	r2, r3, #5
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	4413      	add	r3, r2
 8010814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	68ba      	ldr	r2, [r7, #8]
 801081c:	0151      	lsls	r1, r2, #5
 801081e:	68fa      	ldr	r2, [r7, #12]
 8010820:	440a      	add	r2, r1
 8010822:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010826:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801082a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801082c:	68bb      	ldr	r3, [r7, #8]
 801082e:	015a      	lsls	r2, r3, #5
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	4413      	add	r3, r2
 8010834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	68ba      	ldr	r2, [r7, #8]
 801083c:	0151      	lsls	r1, r2, #5
 801083e:	68fa      	ldr	r2, [r7, #12]
 8010840:	440a      	add	r2, r1
 8010842:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010846:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801084a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801084c:	2300      	movs	r3, #0
}
 801084e:	4618      	mov	r0, r3
 8010850:	3714      	adds	r7, #20
 8010852:	46bd      	mov	sp, r7
 8010854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010858:	4770      	bx	lr

0801085a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801085a:	b480      	push	{r7}
 801085c:	b085      	sub	sp, #20
 801085e:	af00      	add	r7, sp, #0
 8010860:	6078      	str	r0, [r7, #4]
 8010862:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010868:	683b      	ldr	r3, [r7, #0]
 801086a:	781b      	ldrb	r3, [r3, #0]
 801086c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801086e:	683b      	ldr	r3, [r7, #0]
 8010870:	785b      	ldrb	r3, [r3, #1]
 8010872:	2b01      	cmp	r3, #1
 8010874:	d128      	bne.n	80108c8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8010876:	68bb      	ldr	r3, [r7, #8]
 8010878:	015a      	lsls	r2, r3, #5
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	4413      	add	r3, r2
 801087e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	68ba      	ldr	r2, [r7, #8]
 8010886:	0151      	lsls	r1, r2, #5
 8010888:	68fa      	ldr	r2, [r7, #12]
 801088a:	440a      	add	r2, r1
 801088c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010890:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010894:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010896:	683b      	ldr	r3, [r7, #0]
 8010898:	78db      	ldrb	r3, [r3, #3]
 801089a:	2b03      	cmp	r3, #3
 801089c:	d003      	beq.n	80108a6 <USB_EPClearStall+0x4c>
 801089e:	683b      	ldr	r3, [r7, #0]
 80108a0:	78db      	ldrb	r3, [r3, #3]
 80108a2:	2b02      	cmp	r3, #2
 80108a4:	d138      	bne.n	8010918 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80108a6:	68bb      	ldr	r3, [r7, #8]
 80108a8:	015a      	lsls	r2, r3, #5
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	4413      	add	r3, r2
 80108ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	68ba      	ldr	r2, [r7, #8]
 80108b6:	0151      	lsls	r1, r2, #5
 80108b8:	68fa      	ldr	r2, [r7, #12]
 80108ba:	440a      	add	r2, r1
 80108bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80108c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80108c4:	6013      	str	r3, [r2, #0]
 80108c6:	e027      	b.n	8010918 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80108c8:	68bb      	ldr	r3, [r7, #8]
 80108ca:	015a      	lsls	r2, r3, #5
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	4413      	add	r3, r2
 80108d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	68ba      	ldr	r2, [r7, #8]
 80108d8:	0151      	lsls	r1, r2, #5
 80108da:	68fa      	ldr	r2, [r7, #12]
 80108dc:	440a      	add	r2, r1
 80108de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80108e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80108e6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80108e8:	683b      	ldr	r3, [r7, #0]
 80108ea:	78db      	ldrb	r3, [r3, #3]
 80108ec:	2b03      	cmp	r3, #3
 80108ee:	d003      	beq.n	80108f8 <USB_EPClearStall+0x9e>
 80108f0:	683b      	ldr	r3, [r7, #0]
 80108f2:	78db      	ldrb	r3, [r3, #3]
 80108f4:	2b02      	cmp	r3, #2
 80108f6:	d10f      	bne.n	8010918 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80108f8:	68bb      	ldr	r3, [r7, #8]
 80108fa:	015a      	lsls	r2, r3, #5
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	4413      	add	r3, r2
 8010900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	68ba      	ldr	r2, [r7, #8]
 8010908:	0151      	lsls	r1, r2, #5
 801090a:	68fa      	ldr	r2, [r7, #12]
 801090c:	440a      	add	r2, r1
 801090e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010912:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010916:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8010918:	2300      	movs	r3, #0
}
 801091a:	4618      	mov	r0, r3
 801091c:	3714      	adds	r7, #20
 801091e:	46bd      	mov	sp, r7
 8010920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010924:	4770      	bx	lr

08010926 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8010926:	b480      	push	{r7}
 8010928:	b085      	sub	sp, #20
 801092a:	af00      	add	r7, sp, #0
 801092c:	6078      	str	r0, [r7, #4]
 801092e:	460b      	mov	r3, r1
 8010930:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	68fa      	ldr	r2, [r7, #12]
 8010940:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010944:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8010948:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010950:	681a      	ldr	r2, [r3, #0]
 8010952:	78fb      	ldrb	r3, [r7, #3]
 8010954:	011b      	lsls	r3, r3, #4
 8010956:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 801095a:	68f9      	ldr	r1, [r7, #12]
 801095c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010960:	4313      	orrs	r3, r2
 8010962:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8010964:	2300      	movs	r3, #0
}
 8010966:	4618      	mov	r0, r3
 8010968:	3714      	adds	r7, #20
 801096a:	46bd      	mov	sp, r7
 801096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010970:	4770      	bx	lr

08010972 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010972:	b480      	push	{r7}
 8010974:	b085      	sub	sp, #20
 8010976:	af00      	add	r7, sp, #0
 8010978:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	68fa      	ldr	r2, [r7, #12]
 8010988:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801098c:	f023 0303 	bic.w	r3, r3, #3
 8010990:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010998:	685b      	ldr	r3, [r3, #4]
 801099a:	68fa      	ldr	r2, [r7, #12]
 801099c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80109a0:	f023 0302 	bic.w	r3, r3, #2
 80109a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80109a6:	2300      	movs	r3, #0
}
 80109a8:	4618      	mov	r0, r3
 80109aa:	3714      	adds	r7, #20
 80109ac:	46bd      	mov	sp, r7
 80109ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b2:	4770      	bx	lr

080109b4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80109b4:	b480      	push	{r7}
 80109b6:	b085      	sub	sp, #20
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	68fa      	ldr	r2, [r7, #12]
 80109ca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80109ce:	f023 0303 	bic.w	r3, r3, #3
 80109d2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80109da:	685b      	ldr	r3, [r3, #4]
 80109dc:	68fa      	ldr	r2, [r7, #12]
 80109de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80109e2:	f043 0302 	orr.w	r3, r3, #2
 80109e6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80109e8:	2300      	movs	r3, #0
}
 80109ea:	4618      	mov	r0, r3
 80109ec:	3714      	adds	r7, #20
 80109ee:	46bd      	mov	sp, r7
 80109f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f4:	4770      	bx	lr

080109f6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80109f6:	b480      	push	{r7}
 80109f8:	b085      	sub	sp, #20
 80109fa:	af00      	add	r7, sp, #0
 80109fc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	695b      	ldr	r3, [r3, #20]
 8010a02:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	699b      	ldr	r3, [r3, #24]
 8010a08:	68fa      	ldr	r2, [r7, #12]
 8010a0a:	4013      	ands	r3, r2
 8010a0c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8010a0e:	68fb      	ldr	r3, [r7, #12]
}
 8010a10:	4618      	mov	r0, r3
 8010a12:	3714      	adds	r7, #20
 8010a14:	46bd      	mov	sp, r7
 8010a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a1a:	4770      	bx	lr

08010a1c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010a1c:	b480      	push	{r7}
 8010a1e:	b085      	sub	sp, #20
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010a2e:	699b      	ldr	r3, [r3, #24]
 8010a30:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010a38:	69db      	ldr	r3, [r3, #28]
 8010a3a:	68ba      	ldr	r2, [r7, #8]
 8010a3c:	4013      	ands	r3, r2
 8010a3e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8010a40:	68bb      	ldr	r3, [r7, #8]
 8010a42:	0c1b      	lsrs	r3, r3, #16
}
 8010a44:	4618      	mov	r0, r3
 8010a46:	3714      	adds	r7, #20
 8010a48:	46bd      	mov	sp, r7
 8010a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a4e:	4770      	bx	lr

08010a50 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010a50:	b480      	push	{r7}
 8010a52:	b085      	sub	sp, #20
 8010a54:	af00      	add	r7, sp, #0
 8010a56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010a62:	699b      	ldr	r3, [r3, #24]
 8010a64:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010a6c:	69db      	ldr	r3, [r3, #28]
 8010a6e:	68ba      	ldr	r2, [r7, #8]
 8010a70:	4013      	ands	r3, r2
 8010a72:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8010a74:	68bb      	ldr	r3, [r7, #8]
 8010a76:	b29b      	uxth	r3, r3
}
 8010a78:	4618      	mov	r0, r3
 8010a7a:	3714      	adds	r7, #20
 8010a7c:	46bd      	mov	sp, r7
 8010a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a82:	4770      	bx	lr

08010a84 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010a84:	b480      	push	{r7}
 8010a86:	b085      	sub	sp, #20
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	6078      	str	r0, [r7, #4]
 8010a8c:	460b      	mov	r3, r1
 8010a8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8010a94:	78fb      	ldrb	r3, [r7, #3]
 8010a96:	015a      	lsls	r2, r3, #5
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	4413      	add	r3, r2
 8010a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010aa0:	689b      	ldr	r3, [r3, #8]
 8010aa2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010aaa:	695b      	ldr	r3, [r3, #20]
 8010aac:	68ba      	ldr	r2, [r7, #8]
 8010aae:	4013      	ands	r3, r2
 8010ab0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010ab2:	68bb      	ldr	r3, [r7, #8]
}
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	3714      	adds	r7, #20
 8010ab8:	46bd      	mov	sp, r7
 8010aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010abe:	4770      	bx	lr

08010ac0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010ac0:	b480      	push	{r7}
 8010ac2:	b087      	sub	sp, #28
 8010ac4:	af00      	add	r7, sp, #0
 8010ac6:	6078      	str	r0, [r7, #4]
 8010ac8:	460b      	mov	r3, r1
 8010aca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8010ad0:	697b      	ldr	r3, [r7, #20]
 8010ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ad6:	691b      	ldr	r3, [r3, #16]
 8010ad8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8010ada:	697b      	ldr	r3, [r7, #20]
 8010adc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ae2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8010ae4:	78fb      	ldrb	r3, [r7, #3]
 8010ae6:	f003 030f 	and.w	r3, r3, #15
 8010aea:	68fa      	ldr	r2, [r7, #12]
 8010aec:	fa22 f303 	lsr.w	r3, r2, r3
 8010af0:	01db      	lsls	r3, r3, #7
 8010af2:	b2db      	uxtb	r3, r3
 8010af4:	693a      	ldr	r2, [r7, #16]
 8010af6:	4313      	orrs	r3, r2
 8010af8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8010afa:	78fb      	ldrb	r3, [r7, #3]
 8010afc:	015a      	lsls	r2, r3, #5
 8010afe:	697b      	ldr	r3, [r7, #20]
 8010b00:	4413      	add	r3, r2
 8010b02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010b06:	689b      	ldr	r3, [r3, #8]
 8010b08:	693a      	ldr	r2, [r7, #16]
 8010b0a:	4013      	ands	r3, r2
 8010b0c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010b0e:	68bb      	ldr	r3, [r7, #8]
}
 8010b10:	4618      	mov	r0, r3
 8010b12:	371c      	adds	r7, #28
 8010b14:	46bd      	mov	sp, r7
 8010b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b1a:	4770      	bx	lr

08010b1c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8010b1c:	b480      	push	{r7}
 8010b1e:	b083      	sub	sp, #12
 8010b20:	af00      	add	r7, sp, #0
 8010b22:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	695b      	ldr	r3, [r3, #20]
 8010b28:	f003 0301 	and.w	r3, r3, #1
}
 8010b2c:	4618      	mov	r0, r3
 8010b2e:	370c      	adds	r7, #12
 8010b30:	46bd      	mov	sp, r7
 8010b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b36:	4770      	bx	lr

08010b38 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8010b38:	b480      	push	{r7}
 8010b3a:	b085      	sub	sp, #20
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	68fa      	ldr	r2, [r7, #12]
 8010b4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010b52:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8010b56:	f023 0307 	bic.w	r3, r3, #7
 8010b5a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010b62:	685b      	ldr	r3, [r3, #4]
 8010b64:	68fa      	ldr	r2, [r7, #12]
 8010b66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010b6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010b6e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010b70:	2300      	movs	r3, #0
}
 8010b72:	4618      	mov	r0, r3
 8010b74:	3714      	adds	r7, #20
 8010b76:	46bd      	mov	sp, r7
 8010b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b7c:	4770      	bx	lr
	...

08010b80 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8010b80:	b480      	push	{r7}
 8010b82:	b087      	sub	sp, #28
 8010b84:	af00      	add	r7, sp, #0
 8010b86:	60f8      	str	r0, [r7, #12]
 8010b88:	460b      	mov	r3, r1
 8010b8a:	607a      	str	r2, [r7, #4]
 8010b8c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	333c      	adds	r3, #60	; 0x3c
 8010b96:	3304      	adds	r3, #4
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8010b9c:	693b      	ldr	r3, [r7, #16]
 8010b9e:	4a26      	ldr	r2, [pc, #152]	; (8010c38 <USB_EP0_OutStart+0xb8>)
 8010ba0:	4293      	cmp	r3, r2
 8010ba2:	d90a      	bls.n	8010bba <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010ba4:	697b      	ldr	r3, [r7, #20]
 8010ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010bb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010bb4:	d101      	bne.n	8010bba <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8010bb6:	2300      	movs	r3, #0
 8010bb8:	e037      	b.n	8010c2a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8010bba:	697b      	ldr	r3, [r7, #20]
 8010bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010bc0:	461a      	mov	r2, r3
 8010bc2:	2300      	movs	r3, #0
 8010bc4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010bc6:	697b      	ldr	r3, [r7, #20]
 8010bc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010bcc:	691b      	ldr	r3, [r3, #16]
 8010bce:	697a      	ldr	r2, [r7, #20]
 8010bd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010bd4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010bd8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8010bda:	697b      	ldr	r3, [r7, #20]
 8010bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010be0:	691b      	ldr	r3, [r3, #16]
 8010be2:	697a      	ldr	r2, [r7, #20]
 8010be4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010be8:	f043 0318 	orr.w	r3, r3, #24
 8010bec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8010bee:	697b      	ldr	r3, [r7, #20]
 8010bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010bf4:	691b      	ldr	r3, [r3, #16]
 8010bf6:	697a      	ldr	r2, [r7, #20]
 8010bf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010bfc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8010c00:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8010c02:	7afb      	ldrb	r3, [r7, #11]
 8010c04:	2b01      	cmp	r3, #1
 8010c06:	d10f      	bne.n	8010c28 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8010c08:	697b      	ldr	r3, [r7, #20]
 8010c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c0e:	461a      	mov	r2, r3
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8010c14:	697b      	ldr	r3, [r7, #20]
 8010c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	697a      	ldr	r2, [r7, #20]
 8010c1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010c22:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8010c26:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010c28:	2300      	movs	r3, #0
}
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	371c      	adds	r7, #28
 8010c2e:	46bd      	mov	sp, r7
 8010c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c34:	4770      	bx	lr
 8010c36:	bf00      	nop
 8010c38:	4f54300a 	.word	0x4f54300a

08010c3c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010c3c:	b480      	push	{r7}
 8010c3e:	b085      	sub	sp, #20
 8010c40:	af00      	add	r7, sp, #0
 8010c42:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8010c44:	2300      	movs	r3, #0
 8010c46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	3301      	adds	r3, #1
 8010c4c:	60fb      	str	r3, [r7, #12]
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	4a13      	ldr	r2, [pc, #76]	; (8010ca0 <USB_CoreReset+0x64>)
 8010c52:	4293      	cmp	r3, r2
 8010c54:	d901      	bls.n	8010c5a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8010c56:	2303      	movs	r3, #3
 8010c58:	e01b      	b.n	8010c92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	691b      	ldr	r3, [r3, #16]
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	daf2      	bge.n	8010c48 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010c62:	2300      	movs	r3, #0
 8010c64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	691b      	ldr	r3, [r3, #16]
 8010c6a:	f043 0201 	orr.w	r2, r3, #1
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	3301      	adds	r3, #1
 8010c76:	60fb      	str	r3, [r7, #12]
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	4a09      	ldr	r2, [pc, #36]	; (8010ca0 <USB_CoreReset+0x64>)
 8010c7c:	4293      	cmp	r3, r2
 8010c7e:	d901      	bls.n	8010c84 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8010c80:	2303      	movs	r3, #3
 8010c82:	e006      	b.n	8010c92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	691b      	ldr	r3, [r3, #16]
 8010c88:	f003 0301 	and.w	r3, r3, #1
 8010c8c:	2b01      	cmp	r3, #1
 8010c8e:	d0f0      	beq.n	8010c72 <USB_CoreReset+0x36>

  return HAL_OK;
 8010c90:	2300      	movs	r3, #0
}
 8010c92:	4618      	mov	r0, r3
 8010c94:	3714      	adds	r7, #20
 8010c96:	46bd      	mov	sp, r7
 8010c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c9c:	4770      	bx	lr
 8010c9e:	bf00      	nop
 8010ca0:	00030d40 	.word	0x00030d40

08010ca4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010ca4:	b580      	push	{r7, lr}
 8010ca6:	b084      	sub	sp, #16
 8010ca8:	af00      	add	r7, sp, #0
 8010caa:	6078      	str	r0, [r7, #4]
 8010cac:	460b      	mov	r3, r1
 8010cae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8010cb0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8010cb4:	f005 f81c 	bl	8015cf0 <malloc>
 8010cb8:	4603      	mov	r3, r0
 8010cba:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d105      	bne.n	8010cce <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	2200      	movs	r2, #0
 8010cc6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8010cca:	2302      	movs	r3, #2
 8010ccc:	e066      	b.n	8010d9c <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	68fa      	ldr	r2, [r7, #12]
 8010cd2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	7c1b      	ldrb	r3, [r3, #16]
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d119      	bne.n	8010d12 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010cde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010ce2:	2202      	movs	r2, #2
 8010ce4:	2181      	movs	r1, #129	; 0x81
 8010ce6:	6878      	ldr	r0, [r7, #4]
 8010ce8:	f004 fe89 	bl	80159fe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	2201      	movs	r2, #1
 8010cf0:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010cf2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010cf6:	2202      	movs	r2, #2
 8010cf8:	2101      	movs	r1, #1
 8010cfa:	6878      	ldr	r0, [r7, #4]
 8010cfc:	f004 fe7f 	bl	80159fe <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	2201      	movs	r2, #1
 8010d04:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	2210      	movs	r2, #16
 8010d0c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8010d10:	e016      	b.n	8010d40 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010d12:	2340      	movs	r3, #64	; 0x40
 8010d14:	2202      	movs	r2, #2
 8010d16:	2181      	movs	r1, #129	; 0x81
 8010d18:	6878      	ldr	r0, [r7, #4]
 8010d1a:	f004 fe70 	bl	80159fe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	2201      	movs	r2, #1
 8010d22:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010d24:	2340      	movs	r3, #64	; 0x40
 8010d26:	2202      	movs	r2, #2
 8010d28:	2101      	movs	r1, #1
 8010d2a:	6878      	ldr	r0, [r7, #4]
 8010d2c:	f004 fe67 	bl	80159fe <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	2201      	movs	r2, #1
 8010d34:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	2210      	movs	r2, #16
 8010d3c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8010d40:	2308      	movs	r3, #8
 8010d42:	2203      	movs	r2, #3
 8010d44:	2182      	movs	r1, #130	; 0x82
 8010d46:	6878      	ldr	r0, [r7, #4]
 8010d48:	f004 fe59 	bl	80159fe <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	2201      	movs	r2, #1
 8010d50:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	2200      	movs	r2, #0
 8010d62:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	2200      	movs	r2, #0
 8010d6a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	7c1b      	ldrb	r3, [r3, #16]
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d109      	bne.n	8010d8a <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010d7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010d80:	2101      	movs	r1, #1
 8010d82:	6878      	ldr	r0, [r7, #4]
 8010d84:	f004 ff2a 	bl	8015bdc <USBD_LL_PrepareReceive>
 8010d88:	e007      	b.n	8010d9a <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010d90:	2340      	movs	r3, #64	; 0x40
 8010d92:	2101      	movs	r1, #1
 8010d94:	6878      	ldr	r0, [r7, #4]
 8010d96:	f004 ff21 	bl	8015bdc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010d9a:	2300      	movs	r3, #0
}
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	3710      	adds	r7, #16
 8010da0:	46bd      	mov	sp, r7
 8010da2:	bd80      	pop	{r7, pc}

08010da4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010da4:	b580      	push	{r7, lr}
 8010da6:	b084      	sub	sp, #16
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	6078      	str	r0, [r7, #4]
 8010dac:	460b      	mov	r3, r1
 8010dae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8010db0:	2300      	movs	r3, #0
 8010db2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8010db4:	2181      	movs	r1, #129	; 0x81
 8010db6:	6878      	ldr	r0, [r7, #4]
 8010db8:	f004 fe47 	bl	8015a4a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	2200      	movs	r2, #0
 8010dc0:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8010dc2:	2101      	movs	r1, #1
 8010dc4:	6878      	ldr	r0, [r7, #4]
 8010dc6:	f004 fe40 	bl	8015a4a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	2200      	movs	r2, #0
 8010dce:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8010dd2:	2182      	movs	r1, #130	; 0x82
 8010dd4:	6878      	ldr	r0, [r7, #4]
 8010dd6:	f004 fe38 	bl	8015a4a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	2200      	movs	r2, #0
 8010dde:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	2200      	movs	r2, #0
 8010de6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d00e      	beq.n	8010e12 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010dfa:	685b      	ldr	r3, [r3, #4]
 8010dfc:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010e04:	4618      	mov	r0, r3
 8010e06:	f004 ff7b 	bl	8015d00 <free>
    pdev->pClassData = NULL;
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	2200      	movs	r2, #0
 8010e0e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8010e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e14:	4618      	mov	r0, r3
 8010e16:	3710      	adds	r7, #16
 8010e18:	46bd      	mov	sp, r7
 8010e1a:	bd80      	pop	{r7, pc}

08010e1c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8010e1c:	b580      	push	{r7, lr}
 8010e1e:	b086      	sub	sp, #24
 8010e20:	af00      	add	r7, sp, #0
 8010e22:	6078      	str	r0, [r7, #4]
 8010e24:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010e2c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8010e2e:	2300      	movs	r3, #0
 8010e30:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8010e32:	2300      	movs	r3, #0
 8010e34:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8010e36:	2300      	movs	r3, #0
 8010e38:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010e3a:	683b      	ldr	r3, [r7, #0]
 8010e3c:	781b      	ldrb	r3, [r3, #0]
 8010e3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d03a      	beq.n	8010ebc <USBD_CDC_Setup+0xa0>
 8010e46:	2b20      	cmp	r3, #32
 8010e48:	f040 8097 	bne.w	8010f7a <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8010e4c:	683b      	ldr	r3, [r7, #0]
 8010e4e:	88db      	ldrh	r3, [r3, #6]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d029      	beq.n	8010ea8 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8010e54:	683b      	ldr	r3, [r7, #0]
 8010e56:	781b      	ldrb	r3, [r3, #0]
 8010e58:	b25b      	sxtb	r3, r3
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	da11      	bge.n	8010e82 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010e64:	689b      	ldr	r3, [r3, #8]
 8010e66:	683a      	ldr	r2, [r7, #0]
 8010e68:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8010e6a:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010e6c:	683a      	ldr	r2, [r7, #0]
 8010e6e:	88d2      	ldrh	r2, [r2, #6]
 8010e70:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8010e72:	6939      	ldr	r1, [r7, #16]
 8010e74:	683b      	ldr	r3, [r7, #0]
 8010e76:	88db      	ldrh	r3, [r3, #6]
 8010e78:	461a      	mov	r2, r3
 8010e7a:	6878      	ldr	r0, [r7, #4]
 8010e7c:	f001 faac 	bl	80123d8 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8010e80:	e082      	b.n	8010f88 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8010e82:	683b      	ldr	r3, [r7, #0]
 8010e84:	785a      	ldrb	r2, [r3, #1]
 8010e86:	693b      	ldr	r3, [r7, #16]
 8010e88:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8010e8c:	683b      	ldr	r3, [r7, #0]
 8010e8e:	88db      	ldrh	r3, [r3, #6]
 8010e90:	b2da      	uxtb	r2, r3
 8010e92:	693b      	ldr	r3, [r7, #16]
 8010e94:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8010e98:	6939      	ldr	r1, [r7, #16]
 8010e9a:	683b      	ldr	r3, [r7, #0]
 8010e9c:	88db      	ldrh	r3, [r3, #6]
 8010e9e:	461a      	mov	r2, r3
 8010ea0:	6878      	ldr	r0, [r7, #4]
 8010ea2:	f001 fac5 	bl	8012430 <USBD_CtlPrepareRx>
    break;
 8010ea6:	e06f      	b.n	8010f88 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010eae:	689b      	ldr	r3, [r3, #8]
 8010eb0:	683a      	ldr	r2, [r7, #0]
 8010eb2:	7850      	ldrb	r0, [r2, #1]
 8010eb4:	2200      	movs	r2, #0
 8010eb6:	6839      	ldr	r1, [r7, #0]
 8010eb8:	4798      	blx	r3
    break;
 8010eba:	e065      	b.n	8010f88 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8010ebc:	683b      	ldr	r3, [r7, #0]
 8010ebe:	785b      	ldrb	r3, [r3, #1]
 8010ec0:	2b0b      	cmp	r3, #11
 8010ec2:	d84f      	bhi.n	8010f64 <USBD_CDC_Setup+0x148>
 8010ec4:	a201      	add	r2, pc, #4	; (adr r2, 8010ecc <USBD_CDC_Setup+0xb0>)
 8010ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010eca:	bf00      	nop
 8010ecc:	08010efd 	.word	0x08010efd
 8010ed0:	08010f73 	.word	0x08010f73
 8010ed4:	08010f65 	.word	0x08010f65
 8010ed8:	08010f65 	.word	0x08010f65
 8010edc:	08010f65 	.word	0x08010f65
 8010ee0:	08010f65 	.word	0x08010f65
 8010ee4:	08010f65 	.word	0x08010f65
 8010ee8:	08010f65 	.word	0x08010f65
 8010eec:	08010f65 	.word	0x08010f65
 8010ef0:	08010f65 	.word	0x08010f65
 8010ef4:	08010f25 	.word	0x08010f25
 8010ef8:	08010f4d 	.word	0x08010f4d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010f02:	2b03      	cmp	r3, #3
 8010f04:	d107      	bne.n	8010f16 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8010f06:	f107 030c 	add.w	r3, r7, #12
 8010f0a:	2202      	movs	r2, #2
 8010f0c:	4619      	mov	r1, r3
 8010f0e:	6878      	ldr	r0, [r7, #4]
 8010f10:	f001 fa62 	bl	80123d8 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8010f14:	e030      	b.n	8010f78 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8010f16:	6839      	ldr	r1, [r7, #0]
 8010f18:	6878      	ldr	r0, [r7, #4]
 8010f1a:	f001 f9ec 	bl	80122f6 <USBD_CtlError>
        ret = USBD_FAIL;
 8010f1e:	2303      	movs	r3, #3
 8010f20:	75fb      	strb	r3, [r7, #23]
      break;
 8010f22:	e029      	b.n	8010f78 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010f2a:	2b03      	cmp	r3, #3
 8010f2c:	d107      	bne.n	8010f3e <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8010f2e:	f107 030f 	add.w	r3, r7, #15
 8010f32:	2201      	movs	r2, #1
 8010f34:	4619      	mov	r1, r3
 8010f36:	6878      	ldr	r0, [r7, #4]
 8010f38:	f001 fa4e 	bl	80123d8 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8010f3c:	e01c      	b.n	8010f78 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8010f3e:	6839      	ldr	r1, [r7, #0]
 8010f40:	6878      	ldr	r0, [r7, #4]
 8010f42:	f001 f9d8 	bl	80122f6 <USBD_CtlError>
        ret = USBD_FAIL;
 8010f46:	2303      	movs	r3, #3
 8010f48:	75fb      	strb	r3, [r7, #23]
      break;
 8010f4a:	e015      	b.n	8010f78 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010f52:	2b03      	cmp	r3, #3
 8010f54:	d00f      	beq.n	8010f76 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8010f56:	6839      	ldr	r1, [r7, #0]
 8010f58:	6878      	ldr	r0, [r7, #4]
 8010f5a:	f001 f9cc 	bl	80122f6 <USBD_CtlError>
        ret = USBD_FAIL;
 8010f5e:	2303      	movs	r3, #3
 8010f60:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8010f62:	e008      	b.n	8010f76 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8010f64:	6839      	ldr	r1, [r7, #0]
 8010f66:	6878      	ldr	r0, [r7, #4]
 8010f68:	f001 f9c5 	bl	80122f6 <USBD_CtlError>
      ret = USBD_FAIL;
 8010f6c:	2303      	movs	r3, #3
 8010f6e:	75fb      	strb	r3, [r7, #23]
      break;
 8010f70:	e002      	b.n	8010f78 <USBD_CDC_Setup+0x15c>
      break;
 8010f72:	bf00      	nop
 8010f74:	e008      	b.n	8010f88 <USBD_CDC_Setup+0x16c>
      break;
 8010f76:	bf00      	nop
    }
    break;
 8010f78:	e006      	b.n	8010f88 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8010f7a:	6839      	ldr	r1, [r7, #0]
 8010f7c:	6878      	ldr	r0, [r7, #4]
 8010f7e:	f001 f9ba 	bl	80122f6 <USBD_CtlError>
    ret = USBD_FAIL;
 8010f82:	2303      	movs	r3, #3
 8010f84:	75fb      	strb	r3, [r7, #23]
    break;
 8010f86:	bf00      	nop
  }

  return (uint8_t)ret;
 8010f88:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	3718      	adds	r7, #24
 8010f8e:	46bd      	mov	sp, r7
 8010f90:	bd80      	pop	{r7, pc}
 8010f92:	bf00      	nop

08010f94 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010f94:	b580      	push	{r7, lr}
 8010f96:	b084      	sub	sp, #16
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	6078      	str	r0, [r7, #4]
 8010f9c:	460b      	mov	r3, r1
 8010f9e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010fa6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d101      	bne.n	8010fb6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010fb2:	2303      	movs	r3, #3
 8010fb4:	e049      	b.n	801104a <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010fbc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8010fbe:	78fa      	ldrb	r2, [r7, #3]
 8010fc0:	6879      	ldr	r1, [r7, #4]
 8010fc2:	4613      	mov	r3, r2
 8010fc4:	009b      	lsls	r3, r3, #2
 8010fc6:	4413      	add	r3, r2
 8010fc8:	009b      	lsls	r3, r3, #2
 8010fca:	440b      	add	r3, r1
 8010fcc:	3318      	adds	r3, #24
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d029      	beq.n	8011028 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8010fd4:	78fa      	ldrb	r2, [r7, #3]
 8010fd6:	6879      	ldr	r1, [r7, #4]
 8010fd8:	4613      	mov	r3, r2
 8010fda:	009b      	lsls	r3, r3, #2
 8010fdc:	4413      	add	r3, r2
 8010fde:	009b      	lsls	r3, r3, #2
 8010fe0:	440b      	add	r3, r1
 8010fe2:	3318      	adds	r3, #24
 8010fe4:	681a      	ldr	r2, [r3, #0]
 8010fe6:	78f9      	ldrb	r1, [r7, #3]
 8010fe8:	68f8      	ldr	r0, [r7, #12]
 8010fea:	460b      	mov	r3, r1
 8010fec:	00db      	lsls	r3, r3, #3
 8010fee:	1a5b      	subs	r3, r3, r1
 8010ff0:	009b      	lsls	r3, r3, #2
 8010ff2:	4403      	add	r3, r0
 8010ff4:	3344      	adds	r3, #68	; 0x44
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	fbb2 f1f3 	udiv	r1, r2, r3
 8010ffc:	fb03 f301 	mul.w	r3, r3, r1
 8011000:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8011002:	2b00      	cmp	r3, #0
 8011004:	d110      	bne.n	8011028 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8011006:	78fa      	ldrb	r2, [r7, #3]
 8011008:	6879      	ldr	r1, [r7, #4]
 801100a:	4613      	mov	r3, r2
 801100c:	009b      	lsls	r3, r3, #2
 801100e:	4413      	add	r3, r2
 8011010:	009b      	lsls	r3, r3, #2
 8011012:	440b      	add	r3, r1
 8011014:	3318      	adds	r3, #24
 8011016:	2200      	movs	r2, #0
 8011018:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801101a:	78f9      	ldrb	r1, [r7, #3]
 801101c:	2300      	movs	r3, #0
 801101e:	2200      	movs	r2, #0
 8011020:	6878      	ldr	r0, [r7, #4]
 8011022:	f004 fdba 	bl	8015b9a <USBD_LL_Transmit>
 8011026:	e00f      	b.n	8011048 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8011028:	68bb      	ldr	r3, [r7, #8]
 801102a:	2200      	movs	r2, #0
 801102c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011036:	691b      	ldr	r3, [r3, #16]
 8011038:	68ba      	ldr	r2, [r7, #8]
 801103a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801103e:	68ba      	ldr	r2, [r7, #8]
 8011040:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8011044:	78fa      	ldrb	r2, [r7, #3]
 8011046:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8011048:	2300      	movs	r3, #0
}
 801104a:	4618      	mov	r0, r3
 801104c:	3710      	adds	r7, #16
 801104e:	46bd      	mov	sp, r7
 8011050:	bd80      	pop	{r7, pc}

08011052 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011052:	b580      	push	{r7, lr}
 8011054:	b084      	sub	sp, #16
 8011056:	af00      	add	r7, sp, #0
 8011058:	6078      	str	r0, [r7, #4]
 801105a:	460b      	mov	r3, r1
 801105c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011064:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801106c:	2b00      	cmp	r3, #0
 801106e:	d101      	bne.n	8011074 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011070:	2303      	movs	r3, #3
 8011072:	e015      	b.n	80110a0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8011074:	78fb      	ldrb	r3, [r7, #3]
 8011076:	4619      	mov	r1, r3
 8011078:	6878      	ldr	r0, [r7, #4]
 801107a:	f004 fdd0 	bl	8015c1e <USBD_LL_GetRxDataSize>
 801107e:	4602      	mov	r2, r0
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801108c:	68db      	ldr	r3, [r3, #12]
 801108e:	68fa      	ldr	r2, [r7, #12]
 8011090:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8011094:	68fa      	ldr	r2, [r7, #12]
 8011096:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 801109a:	4611      	mov	r1, r2
 801109c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 801109e:	2300      	movs	r3, #0
}
 80110a0:	4618      	mov	r0, r3
 80110a2:	3710      	adds	r7, #16
 80110a4:	46bd      	mov	sp, r7
 80110a6:	bd80      	pop	{r7, pc}

080110a8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80110a8:	b580      	push	{r7, lr}
 80110aa:	b084      	sub	sp, #16
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80110b6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d015      	beq.n	80110ee <USBD_CDC_EP0_RxReady+0x46>
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80110c8:	2bff      	cmp	r3, #255	; 0xff
 80110ca:	d010      	beq.n	80110ee <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80110d2:	689b      	ldr	r3, [r3, #8]
 80110d4:	68fa      	ldr	r2, [r7, #12]
 80110d6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80110da:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80110dc:	68fa      	ldr	r2, [r7, #12]
 80110de:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80110e2:	b292      	uxth	r2, r2
 80110e4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	22ff      	movs	r2, #255	; 0xff
 80110ea:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 80110ee:	2300      	movs	r3, #0
}
 80110f0:	4618      	mov	r0, r3
 80110f2:	3710      	adds	r7, #16
 80110f4:	46bd      	mov	sp, r7
 80110f6:	bd80      	pop	{r7, pc}

080110f8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80110f8:	b480      	push	{r7}
 80110fa:	b083      	sub	sp, #12
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	2243      	movs	r2, #67	; 0x43
 8011104:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8011106:	4b03      	ldr	r3, [pc, #12]	; (8011114 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8011108:	4618      	mov	r0, r3
 801110a:	370c      	adds	r7, #12
 801110c:	46bd      	mov	sp, r7
 801110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011112:	4770      	bx	lr
 8011114:	200008bc 	.word	0x200008bc

08011118 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8011118:	b480      	push	{r7}
 801111a:	b083      	sub	sp, #12
 801111c:	af00      	add	r7, sp, #0
 801111e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	2243      	movs	r2, #67	; 0x43
 8011124:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8011126:	4b03      	ldr	r3, [pc, #12]	; (8011134 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8011128:	4618      	mov	r0, r3
 801112a:	370c      	adds	r7, #12
 801112c:	46bd      	mov	sp, r7
 801112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011132:	4770      	bx	lr
 8011134:	20000878 	.word	0x20000878

08011138 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011138:	b480      	push	{r7}
 801113a:	b083      	sub	sp, #12
 801113c:	af00      	add	r7, sp, #0
 801113e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	2243      	movs	r2, #67	; 0x43
 8011144:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8011146:	4b03      	ldr	r3, [pc, #12]	; (8011154 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8011148:	4618      	mov	r0, r3
 801114a:	370c      	adds	r7, #12
 801114c:	46bd      	mov	sp, r7
 801114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011152:	4770      	bx	lr
 8011154:	20000900 	.word	0x20000900

08011158 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8011158:	b480      	push	{r7}
 801115a:	b083      	sub	sp, #12
 801115c:	af00      	add	r7, sp, #0
 801115e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	220a      	movs	r2, #10
 8011164:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8011166:	4b03      	ldr	r3, [pc, #12]	; (8011174 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8011168:	4618      	mov	r0, r3
 801116a:	370c      	adds	r7, #12
 801116c:	46bd      	mov	sp, r7
 801116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011172:	4770      	bx	lr
 8011174:	20000834 	.word	0x20000834

08011178 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8011178:	b480      	push	{r7}
 801117a:	b083      	sub	sp, #12
 801117c:	af00      	add	r7, sp, #0
 801117e:	6078      	str	r0, [r7, #4]
 8011180:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8011182:	683b      	ldr	r3, [r7, #0]
 8011184:	2b00      	cmp	r3, #0
 8011186:	d101      	bne.n	801118c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8011188:	2303      	movs	r3, #3
 801118a:	e004      	b.n	8011196 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	683a      	ldr	r2, [r7, #0]
 8011190:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8011194:	2300      	movs	r3, #0
}
 8011196:	4618      	mov	r0, r3
 8011198:	370c      	adds	r7, #12
 801119a:	46bd      	mov	sp, r7
 801119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a0:	4770      	bx	lr

080111a2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80111a2:	b480      	push	{r7}
 80111a4:	b087      	sub	sp, #28
 80111a6:	af00      	add	r7, sp, #0
 80111a8:	60f8      	str	r0, [r7, #12]
 80111aa:	60b9      	str	r1, [r7, #8]
 80111ac:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80111b4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80111b6:	697b      	ldr	r3, [r7, #20]
 80111b8:	68ba      	ldr	r2, [r7, #8]
 80111ba:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80111be:	697b      	ldr	r3, [r7, #20]
 80111c0:	687a      	ldr	r2, [r7, #4]
 80111c2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80111c6:	2300      	movs	r3, #0
}
 80111c8:	4618      	mov	r0, r3
 80111ca:	371c      	adds	r7, #28
 80111cc:	46bd      	mov	sp, r7
 80111ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111d2:	4770      	bx	lr

080111d4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80111d4:	b480      	push	{r7}
 80111d6:	b085      	sub	sp, #20
 80111d8:	af00      	add	r7, sp, #0
 80111da:	6078      	str	r0, [r7, #4]
 80111dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80111e4:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	683a      	ldr	r2, [r7, #0]
 80111ea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80111ee:	2300      	movs	r3, #0
}
 80111f0:	4618      	mov	r0, r3
 80111f2:	3714      	adds	r7, #20
 80111f4:	46bd      	mov	sp, r7
 80111f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111fa:	4770      	bx	lr

080111fc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80111fc:	b580      	push	{r7, lr}
 80111fe:	b084      	sub	sp, #16
 8011200:	af00      	add	r7, sp, #0
 8011202:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801120a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 801120c:	2301      	movs	r3, #1
 801120e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011216:	2b00      	cmp	r3, #0
 8011218:	d101      	bne.n	801121e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801121a:	2303      	movs	r3, #3
 801121c:	e01a      	b.n	8011254 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 801121e:	68bb      	ldr	r3, [r7, #8]
 8011220:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011224:	2b00      	cmp	r3, #0
 8011226:	d114      	bne.n	8011252 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8011228:	68bb      	ldr	r3, [r7, #8]
 801122a:	2201      	movs	r2, #1
 801122c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8011230:	68bb      	ldr	r3, [r7, #8]
 8011232:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 801123a:	68bb      	ldr	r3, [r7, #8]
 801123c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8011240:	68bb      	ldr	r3, [r7, #8]
 8011242:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011246:	2181      	movs	r1, #129	; 0x81
 8011248:	6878      	ldr	r0, [r7, #4]
 801124a:	f004 fca6 	bl	8015b9a <USBD_LL_Transmit>

    ret = USBD_OK;
 801124e:	2300      	movs	r3, #0
 8011250:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8011252:	7bfb      	ldrb	r3, [r7, #15]
}
 8011254:	4618      	mov	r0, r3
 8011256:	3710      	adds	r7, #16
 8011258:	46bd      	mov	sp, r7
 801125a:	bd80      	pop	{r7, pc}

0801125c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801125c:	b580      	push	{r7, lr}
 801125e:	b084      	sub	sp, #16
 8011260:	af00      	add	r7, sp, #0
 8011262:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801126a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011272:	2b00      	cmp	r3, #0
 8011274:	d101      	bne.n	801127a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8011276:	2303      	movs	r3, #3
 8011278:	e016      	b.n	80112a8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	7c1b      	ldrb	r3, [r3, #16]
 801127e:	2b00      	cmp	r3, #0
 8011280:	d109      	bne.n	8011296 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011288:	f44f 7300 	mov.w	r3, #512	; 0x200
 801128c:	2101      	movs	r1, #1
 801128e:	6878      	ldr	r0, [r7, #4]
 8011290:	f004 fca4 	bl	8015bdc <USBD_LL_PrepareReceive>
 8011294:	e007      	b.n	80112a6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801129c:	2340      	movs	r3, #64	; 0x40
 801129e:	2101      	movs	r1, #1
 80112a0:	6878      	ldr	r0, [r7, #4]
 80112a2:	f004 fc9b 	bl	8015bdc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80112a6:	2300      	movs	r3, #0
}
 80112a8:	4618      	mov	r0, r3
 80112aa:	3710      	adds	r7, #16
 80112ac:	46bd      	mov	sp, r7
 80112ae:	bd80      	pop	{r7, pc}

080112b0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80112b0:	b580      	push	{r7, lr}
 80112b2:	b086      	sub	sp, #24
 80112b4:	af00      	add	r7, sp, #0
 80112b6:	60f8      	str	r0, [r7, #12]
 80112b8:	60b9      	str	r1, [r7, #8]
 80112ba:	4613      	mov	r3, r2
 80112bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d101      	bne.n	80112c8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80112c4:	2303      	movs	r3, #3
 80112c6:	e025      	b.n	8011314 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d003      	beq.n	80112da <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	2200      	movs	r2, #0
 80112d6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d003      	beq.n	80112ec <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	2200      	movs	r2, #0
 80112e8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80112ec:	68bb      	ldr	r3, [r7, #8]
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d003      	beq.n	80112fa <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	68ba      	ldr	r2, [r7, #8]
 80112f6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	2201      	movs	r2, #1
 80112fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	79fa      	ldrb	r2, [r7, #7]
 8011306:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8011308:	68f8      	ldr	r0, [r7, #12]
 801130a:	f004 fb11 	bl	8015930 <USBD_LL_Init>
 801130e:	4603      	mov	r3, r0
 8011310:	75fb      	strb	r3, [r7, #23]

  return ret;
 8011312:	7dfb      	ldrb	r3, [r7, #23]
}
 8011314:	4618      	mov	r0, r3
 8011316:	3718      	adds	r7, #24
 8011318:	46bd      	mov	sp, r7
 801131a:	bd80      	pop	{r7, pc}

0801131c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801131c:	b580      	push	{r7, lr}
 801131e:	b084      	sub	sp, #16
 8011320:	af00      	add	r7, sp, #0
 8011322:	6078      	str	r0, [r7, #4]
 8011324:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011326:	2300      	movs	r3, #0
 8011328:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801132a:	683b      	ldr	r3, [r7, #0]
 801132c:	2b00      	cmp	r3, #0
 801132e:	d101      	bne.n	8011334 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8011330:	2303      	movs	r3, #3
 8011332:	e010      	b.n	8011356 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	683a      	ldr	r2, [r7, #0]
 8011338:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011344:	f107 020e 	add.w	r2, r7, #14
 8011348:	4610      	mov	r0, r2
 801134a:	4798      	blx	r3
 801134c:	4602      	mov	r2, r0
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8011354:	2300      	movs	r3, #0
}
 8011356:	4618      	mov	r0, r3
 8011358:	3710      	adds	r7, #16
 801135a:	46bd      	mov	sp, r7
 801135c:	bd80      	pop	{r7, pc}

0801135e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801135e:	b580      	push	{r7, lr}
 8011360:	b082      	sub	sp, #8
 8011362:	af00      	add	r7, sp, #0
 8011364:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8011366:	6878      	ldr	r0, [r7, #4]
 8011368:	f004 fb2e 	bl	80159c8 <USBD_LL_Start>
 801136c:	4603      	mov	r3, r0
}
 801136e:	4618      	mov	r0, r3
 8011370:	3708      	adds	r7, #8
 8011372:	46bd      	mov	sp, r7
 8011374:	bd80      	pop	{r7, pc}

08011376 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8011376:	b480      	push	{r7}
 8011378:	b083      	sub	sp, #12
 801137a:	af00      	add	r7, sp, #0
 801137c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801137e:	2300      	movs	r3, #0
}
 8011380:	4618      	mov	r0, r3
 8011382:	370c      	adds	r7, #12
 8011384:	46bd      	mov	sp, r7
 8011386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801138a:	4770      	bx	lr

0801138c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801138c:	b580      	push	{r7, lr}
 801138e:	b084      	sub	sp, #16
 8011390:	af00      	add	r7, sp, #0
 8011392:	6078      	str	r0, [r7, #4]
 8011394:	460b      	mov	r3, r1
 8011396:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8011398:	2303      	movs	r3, #3
 801139a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d009      	beq.n	80113ba <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	78fa      	ldrb	r2, [r7, #3]
 80113b0:	4611      	mov	r1, r2
 80113b2:	6878      	ldr	r0, [r7, #4]
 80113b4:	4798      	blx	r3
 80113b6:	4603      	mov	r3, r0
 80113b8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80113ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80113bc:	4618      	mov	r0, r3
 80113be:	3710      	adds	r7, #16
 80113c0:	46bd      	mov	sp, r7
 80113c2:	bd80      	pop	{r7, pc}

080113c4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80113c4:	b580      	push	{r7, lr}
 80113c6:	b082      	sub	sp, #8
 80113c8:	af00      	add	r7, sp, #0
 80113ca:	6078      	str	r0, [r7, #4]
 80113cc:	460b      	mov	r3, r1
 80113ce:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d007      	beq.n	80113ea <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80113e0:	685b      	ldr	r3, [r3, #4]
 80113e2:	78fa      	ldrb	r2, [r7, #3]
 80113e4:	4611      	mov	r1, r2
 80113e6:	6878      	ldr	r0, [r7, #4]
 80113e8:	4798      	blx	r3
  }

  return USBD_OK;
 80113ea:	2300      	movs	r3, #0
}
 80113ec:	4618      	mov	r0, r3
 80113ee:	3708      	adds	r7, #8
 80113f0:	46bd      	mov	sp, r7
 80113f2:	bd80      	pop	{r7, pc}

080113f4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80113f4:	b580      	push	{r7, lr}
 80113f6:	b084      	sub	sp, #16
 80113f8:	af00      	add	r7, sp, #0
 80113fa:	6078      	str	r0, [r7, #4]
 80113fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011404:	6839      	ldr	r1, [r7, #0]
 8011406:	4618      	mov	r0, r3
 8011408:	f000 ff3b 	bl	8012282 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	2201      	movs	r2, #1
 8011410:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 801141a:	461a      	mov	r2, r3
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011428:	f003 031f 	and.w	r3, r3, #31
 801142c:	2b02      	cmp	r3, #2
 801142e:	d01a      	beq.n	8011466 <USBD_LL_SetupStage+0x72>
 8011430:	2b02      	cmp	r3, #2
 8011432:	d822      	bhi.n	801147a <USBD_LL_SetupStage+0x86>
 8011434:	2b00      	cmp	r3, #0
 8011436:	d002      	beq.n	801143e <USBD_LL_SetupStage+0x4a>
 8011438:	2b01      	cmp	r3, #1
 801143a:	d00a      	beq.n	8011452 <USBD_LL_SetupStage+0x5e>
 801143c:	e01d      	b.n	801147a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011444:	4619      	mov	r1, r3
 8011446:	6878      	ldr	r0, [r7, #4]
 8011448:	f000 fa18 	bl	801187c <USBD_StdDevReq>
 801144c:	4603      	mov	r3, r0
 801144e:	73fb      	strb	r3, [r7, #15]
      break;
 8011450:	e020      	b.n	8011494 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011458:	4619      	mov	r1, r3
 801145a:	6878      	ldr	r0, [r7, #4]
 801145c:	f000 fa7c 	bl	8011958 <USBD_StdItfReq>
 8011460:	4603      	mov	r3, r0
 8011462:	73fb      	strb	r3, [r7, #15]
      break;
 8011464:	e016      	b.n	8011494 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801146c:	4619      	mov	r1, r3
 801146e:	6878      	ldr	r0, [r7, #4]
 8011470:	f000 faba 	bl	80119e8 <USBD_StdEPReq>
 8011474:	4603      	mov	r3, r0
 8011476:	73fb      	strb	r3, [r7, #15]
      break;
 8011478:	e00c      	b.n	8011494 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011480:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011484:	b2db      	uxtb	r3, r3
 8011486:	4619      	mov	r1, r3
 8011488:	6878      	ldr	r0, [r7, #4]
 801148a:	f004 fafd 	bl	8015a88 <USBD_LL_StallEP>
 801148e:	4603      	mov	r3, r0
 8011490:	73fb      	strb	r3, [r7, #15]
      break;
 8011492:	bf00      	nop
  }

  return ret;
 8011494:	7bfb      	ldrb	r3, [r7, #15]
}
 8011496:	4618      	mov	r0, r3
 8011498:	3710      	adds	r7, #16
 801149a:	46bd      	mov	sp, r7
 801149c:	bd80      	pop	{r7, pc}

0801149e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801149e:	b580      	push	{r7, lr}
 80114a0:	b086      	sub	sp, #24
 80114a2:	af00      	add	r7, sp, #0
 80114a4:	60f8      	str	r0, [r7, #12]
 80114a6:	460b      	mov	r3, r1
 80114a8:	607a      	str	r2, [r7, #4]
 80114aa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80114ac:	7afb      	ldrb	r3, [r7, #11]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d137      	bne.n	8011522 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80114b8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80114c0:	2b03      	cmp	r3, #3
 80114c2:	d14a      	bne.n	801155a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80114c4:	693b      	ldr	r3, [r7, #16]
 80114c6:	689a      	ldr	r2, [r3, #8]
 80114c8:	693b      	ldr	r3, [r7, #16]
 80114ca:	68db      	ldr	r3, [r3, #12]
 80114cc:	429a      	cmp	r2, r3
 80114ce:	d913      	bls.n	80114f8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80114d0:	693b      	ldr	r3, [r7, #16]
 80114d2:	689a      	ldr	r2, [r3, #8]
 80114d4:	693b      	ldr	r3, [r7, #16]
 80114d6:	68db      	ldr	r3, [r3, #12]
 80114d8:	1ad2      	subs	r2, r2, r3
 80114da:	693b      	ldr	r3, [r7, #16]
 80114dc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80114de:	693b      	ldr	r3, [r7, #16]
 80114e0:	68da      	ldr	r2, [r3, #12]
 80114e2:	693b      	ldr	r3, [r7, #16]
 80114e4:	689b      	ldr	r3, [r3, #8]
 80114e6:	4293      	cmp	r3, r2
 80114e8:	bf28      	it	cs
 80114ea:	4613      	movcs	r3, r2
 80114ec:	461a      	mov	r2, r3
 80114ee:	6879      	ldr	r1, [r7, #4]
 80114f0:	68f8      	ldr	r0, [r7, #12]
 80114f2:	f000 ffba 	bl	801246a <USBD_CtlContinueRx>
 80114f6:	e030      	b.n	801155a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80114fe:	691b      	ldr	r3, [r3, #16]
 8011500:	2b00      	cmp	r3, #0
 8011502:	d00a      	beq.n	801151a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801150a:	2b03      	cmp	r3, #3
 801150c:	d105      	bne.n	801151a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011514:	691b      	ldr	r3, [r3, #16]
 8011516:	68f8      	ldr	r0, [r7, #12]
 8011518:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 801151a:	68f8      	ldr	r0, [r7, #12]
 801151c:	f000 ffb6 	bl	801248c <USBD_CtlSendStatus>
 8011520:	e01b      	b.n	801155a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011528:	699b      	ldr	r3, [r3, #24]
 801152a:	2b00      	cmp	r3, #0
 801152c:	d013      	beq.n	8011556 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8011534:	2b03      	cmp	r3, #3
 8011536:	d10e      	bne.n	8011556 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801153e:	699b      	ldr	r3, [r3, #24]
 8011540:	7afa      	ldrb	r2, [r7, #11]
 8011542:	4611      	mov	r1, r2
 8011544:	68f8      	ldr	r0, [r7, #12]
 8011546:	4798      	blx	r3
 8011548:	4603      	mov	r3, r0
 801154a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 801154c:	7dfb      	ldrb	r3, [r7, #23]
 801154e:	2b00      	cmp	r3, #0
 8011550:	d003      	beq.n	801155a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8011552:	7dfb      	ldrb	r3, [r7, #23]
 8011554:	e002      	b.n	801155c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8011556:	2303      	movs	r3, #3
 8011558:	e000      	b.n	801155c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 801155a:	2300      	movs	r3, #0
}
 801155c:	4618      	mov	r0, r3
 801155e:	3718      	adds	r7, #24
 8011560:	46bd      	mov	sp, r7
 8011562:	bd80      	pop	{r7, pc}

08011564 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011564:	b580      	push	{r7, lr}
 8011566:	b086      	sub	sp, #24
 8011568:	af00      	add	r7, sp, #0
 801156a:	60f8      	str	r0, [r7, #12]
 801156c:	460b      	mov	r3, r1
 801156e:	607a      	str	r2, [r7, #4]
 8011570:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011572:	7afb      	ldrb	r3, [r7, #11]
 8011574:	2b00      	cmp	r3, #0
 8011576:	d16a      	bne.n	801164e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	3314      	adds	r3, #20
 801157c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011584:	2b02      	cmp	r3, #2
 8011586:	d155      	bne.n	8011634 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8011588:	693b      	ldr	r3, [r7, #16]
 801158a:	689a      	ldr	r2, [r3, #8]
 801158c:	693b      	ldr	r3, [r7, #16]
 801158e:	68db      	ldr	r3, [r3, #12]
 8011590:	429a      	cmp	r2, r3
 8011592:	d914      	bls.n	80115be <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011594:	693b      	ldr	r3, [r7, #16]
 8011596:	689a      	ldr	r2, [r3, #8]
 8011598:	693b      	ldr	r3, [r7, #16]
 801159a:	68db      	ldr	r3, [r3, #12]
 801159c:	1ad2      	subs	r2, r2, r3
 801159e:	693b      	ldr	r3, [r7, #16]
 80115a0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80115a2:	693b      	ldr	r3, [r7, #16]
 80115a4:	689b      	ldr	r3, [r3, #8]
 80115a6:	461a      	mov	r2, r3
 80115a8:	6879      	ldr	r1, [r7, #4]
 80115aa:	68f8      	ldr	r0, [r7, #12]
 80115ac:	f000 ff2f 	bl	801240e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80115b0:	2300      	movs	r3, #0
 80115b2:	2200      	movs	r2, #0
 80115b4:	2100      	movs	r1, #0
 80115b6:	68f8      	ldr	r0, [r7, #12]
 80115b8:	f004 fb10 	bl	8015bdc <USBD_LL_PrepareReceive>
 80115bc:	e03a      	b.n	8011634 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80115be:	693b      	ldr	r3, [r7, #16]
 80115c0:	68da      	ldr	r2, [r3, #12]
 80115c2:	693b      	ldr	r3, [r7, #16]
 80115c4:	689b      	ldr	r3, [r3, #8]
 80115c6:	429a      	cmp	r2, r3
 80115c8:	d11c      	bne.n	8011604 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80115ca:	693b      	ldr	r3, [r7, #16]
 80115cc:	685a      	ldr	r2, [r3, #4]
 80115ce:	693b      	ldr	r3, [r7, #16]
 80115d0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80115d2:	429a      	cmp	r2, r3
 80115d4:	d316      	bcc.n	8011604 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80115d6:	693b      	ldr	r3, [r7, #16]
 80115d8:	685a      	ldr	r2, [r3, #4]
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80115e0:	429a      	cmp	r2, r3
 80115e2:	d20f      	bcs.n	8011604 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80115e4:	2200      	movs	r2, #0
 80115e6:	2100      	movs	r1, #0
 80115e8:	68f8      	ldr	r0, [r7, #12]
 80115ea:	f000 ff10 	bl	801240e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80115ee:	68fb      	ldr	r3, [r7, #12]
 80115f0:	2200      	movs	r2, #0
 80115f2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80115f6:	2300      	movs	r3, #0
 80115f8:	2200      	movs	r2, #0
 80115fa:	2100      	movs	r1, #0
 80115fc:	68f8      	ldr	r0, [r7, #12]
 80115fe:	f004 faed 	bl	8015bdc <USBD_LL_PrepareReceive>
 8011602:	e017      	b.n	8011634 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8011604:	68fb      	ldr	r3, [r7, #12]
 8011606:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801160a:	68db      	ldr	r3, [r3, #12]
 801160c:	2b00      	cmp	r3, #0
 801160e:	d00a      	beq.n	8011626 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8011616:	2b03      	cmp	r3, #3
 8011618:	d105      	bne.n	8011626 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011620:	68db      	ldr	r3, [r3, #12]
 8011622:	68f8      	ldr	r0, [r7, #12]
 8011624:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011626:	2180      	movs	r1, #128	; 0x80
 8011628:	68f8      	ldr	r0, [r7, #12]
 801162a:	f004 fa2d 	bl	8015a88 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801162e:	68f8      	ldr	r0, [r7, #12]
 8011630:	f000 ff3f 	bl	80124b2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8011634:	68fb      	ldr	r3, [r7, #12]
 8011636:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801163a:	2b01      	cmp	r3, #1
 801163c:	d123      	bne.n	8011686 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 801163e:	68f8      	ldr	r0, [r7, #12]
 8011640:	f7ff fe99 	bl	8011376 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011644:	68fb      	ldr	r3, [r7, #12]
 8011646:	2200      	movs	r2, #0
 8011648:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801164c:	e01b      	b.n	8011686 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011654:	695b      	ldr	r3, [r3, #20]
 8011656:	2b00      	cmp	r3, #0
 8011658:	d013      	beq.n	8011682 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8011660:	2b03      	cmp	r3, #3
 8011662:	d10e      	bne.n	8011682 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801166a:	695b      	ldr	r3, [r3, #20]
 801166c:	7afa      	ldrb	r2, [r7, #11]
 801166e:	4611      	mov	r1, r2
 8011670:	68f8      	ldr	r0, [r7, #12]
 8011672:	4798      	blx	r3
 8011674:	4603      	mov	r3, r0
 8011676:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8011678:	7dfb      	ldrb	r3, [r7, #23]
 801167a:	2b00      	cmp	r3, #0
 801167c:	d003      	beq.n	8011686 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 801167e:	7dfb      	ldrb	r3, [r7, #23]
 8011680:	e002      	b.n	8011688 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8011682:	2303      	movs	r3, #3
 8011684:	e000      	b.n	8011688 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8011686:	2300      	movs	r3, #0
}
 8011688:	4618      	mov	r0, r3
 801168a:	3718      	adds	r7, #24
 801168c:	46bd      	mov	sp, r7
 801168e:	bd80      	pop	{r7, pc}

08011690 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011690:	b580      	push	{r7, lr}
 8011692:	b082      	sub	sp, #8
 8011694:	af00      	add	r7, sp, #0
 8011696:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	2201      	movs	r2, #1
 801169c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	2200      	movs	r2, #0
 80116a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	2200      	movs	r2, #0
 80116ac:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	2200      	movs	r2, #0
 80116b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d009      	beq.n	80116d4 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80116c6:	685b      	ldr	r3, [r3, #4]
 80116c8:	687a      	ldr	r2, [r7, #4]
 80116ca:	6852      	ldr	r2, [r2, #4]
 80116cc:	b2d2      	uxtb	r2, r2
 80116ce:	4611      	mov	r1, r2
 80116d0:	6878      	ldr	r0, [r7, #4]
 80116d2:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80116d4:	2340      	movs	r3, #64	; 0x40
 80116d6:	2200      	movs	r2, #0
 80116d8:	2100      	movs	r1, #0
 80116da:	6878      	ldr	r0, [r7, #4]
 80116dc:	f004 f98f 	bl	80159fe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	2201      	movs	r2, #1
 80116e4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	2240      	movs	r2, #64	; 0x40
 80116ec:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80116f0:	2340      	movs	r3, #64	; 0x40
 80116f2:	2200      	movs	r2, #0
 80116f4:	2180      	movs	r1, #128	; 0x80
 80116f6:	6878      	ldr	r0, [r7, #4]
 80116f8:	f004 f981 	bl	80159fe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	2201      	movs	r2, #1
 8011700:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	2240      	movs	r2, #64	; 0x40
 8011706:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8011708:	2300      	movs	r3, #0
}
 801170a:	4618      	mov	r0, r3
 801170c:	3708      	adds	r7, #8
 801170e:	46bd      	mov	sp, r7
 8011710:	bd80      	pop	{r7, pc}

08011712 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8011712:	b480      	push	{r7}
 8011714:	b083      	sub	sp, #12
 8011716:	af00      	add	r7, sp, #0
 8011718:	6078      	str	r0, [r7, #4]
 801171a:	460b      	mov	r3, r1
 801171c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	78fa      	ldrb	r2, [r7, #3]
 8011722:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8011724:	2300      	movs	r3, #0
}
 8011726:	4618      	mov	r0, r3
 8011728:	370c      	adds	r7, #12
 801172a:	46bd      	mov	sp, r7
 801172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011730:	4770      	bx	lr

08011732 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8011732:	b480      	push	{r7}
 8011734:	b083      	sub	sp, #12
 8011736:	af00      	add	r7, sp, #0
 8011738:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	2204      	movs	r2, #4
 801174a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801174e:	2300      	movs	r3, #0
}
 8011750:	4618      	mov	r0, r3
 8011752:	370c      	adds	r7, #12
 8011754:	46bd      	mov	sp, r7
 8011756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801175a:	4770      	bx	lr

0801175c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801175c:	b480      	push	{r7}
 801175e:	b083      	sub	sp, #12
 8011760:	af00      	add	r7, sp, #0
 8011762:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801176a:	2b04      	cmp	r3, #4
 801176c:	d105      	bne.n	801177a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801177a:	2300      	movs	r3, #0
}
 801177c:	4618      	mov	r0, r3
 801177e:	370c      	adds	r7, #12
 8011780:	46bd      	mov	sp, r7
 8011782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011786:	4770      	bx	lr

08011788 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8011788:	b580      	push	{r7, lr}
 801178a:	b082      	sub	sp, #8
 801178c:	af00      	add	r7, sp, #0
 801178e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011796:	2b03      	cmp	r3, #3
 8011798:	d10b      	bne.n	80117b2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80117a0:	69db      	ldr	r3, [r3, #28]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d005      	beq.n	80117b2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80117ac:	69db      	ldr	r3, [r3, #28]
 80117ae:	6878      	ldr	r0, [r7, #4]
 80117b0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80117b2:	2300      	movs	r3, #0
}
 80117b4:	4618      	mov	r0, r3
 80117b6:	3708      	adds	r7, #8
 80117b8:	46bd      	mov	sp, r7
 80117ba:	bd80      	pop	{r7, pc}

080117bc <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80117bc:	b480      	push	{r7}
 80117be:	b083      	sub	sp, #12
 80117c0:	af00      	add	r7, sp, #0
 80117c2:	6078      	str	r0, [r7, #4]
 80117c4:	460b      	mov	r3, r1
 80117c6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80117c8:	2300      	movs	r3, #0
}
 80117ca:	4618      	mov	r0, r3
 80117cc:	370c      	adds	r7, #12
 80117ce:	46bd      	mov	sp, r7
 80117d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117d4:	4770      	bx	lr

080117d6 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80117d6:	b480      	push	{r7}
 80117d8:	b083      	sub	sp, #12
 80117da:	af00      	add	r7, sp, #0
 80117dc:	6078      	str	r0, [r7, #4]
 80117de:	460b      	mov	r3, r1
 80117e0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80117e2:	2300      	movs	r3, #0
}
 80117e4:	4618      	mov	r0, r3
 80117e6:	370c      	adds	r7, #12
 80117e8:	46bd      	mov	sp, r7
 80117ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ee:	4770      	bx	lr

080117f0 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80117f0:	b480      	push	{r7}
 80117f2:	b083      	sub	sp, #12
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80117f8:	2300      	movs	r3, #0
}
 80117fa:	4618      	mov	r0, r3
 80117fc:	370c      	adds	r7, #12
 80117fe:	46bd      	mov	sp, r7
 8011800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011804:	4770      	bx	lr

08011806 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8011806:	b580      	push	{r7, lr}
 8011808:	b082      	sub	sp, #8
 801180a:	af00      	add	r7, sp, #0
 801180c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	2201      	movs	r2, #1
 8011812:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801181c:	2b00      	cmp	r3, #0
 801181e:	d009      	beq.n	8011834 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011826:	685b      	ldr	r3, [r3, #4]
 8011828:	687a      	ldr	r2, [r7, #4]
 801182a:	6852      	ldr	r2, [r2, #4]
 801182c:	b2d2      	uxtb	r2, r2
 801182e:	4611      	mov	r1, r2
 8011830:	6878      	ldr	r0, [r7, #4]
 8011832:	4798      	blx	r3
  }

  return USBD_OK;
 8011834:	2300      	movs	r3, #0
}
 8011836:	4618      	mov	r0, r3
 8011838:	3708      	adds	r7, #8
 801183a:	46bd      	mov	sp, r7
 801183c:	bd80      	pop	{r7, pc}

0801183e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801183e:	b480      	push	{r7}
 8011840:	b087      	sub	sp, #28
 8011842:	af00      	add	r7, sp, #0
 8011844:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801184a:	697b      	ldr	r3, [r7, #20]
 801184c:	781b      	ldrb	r3, [r3, #0]
 801184e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011850:	697b      	ldr	r3, [r7, #20]
 8011852:	3301      	adds	r3, #1
 8011854:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8011856:	697b      	ldr	r3, [r7, #20]
 8011858:	781b      	ldrb	r3, [r3, #0]
 801185a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801185c:	8a3b      	ldrh	r3, [r7, #16]
 801185e:	021b      	lsls	r3, r3, #8
 8011860:	b21a      	sxth	r2, r3
 8011862:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011866:	4313      	orrs	r3, r2
 8011868:	b21b      	sxth	r3, r3
 801186a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801186c:	89fb      	ldrh	r3, [r7, #14]
}
 801186e:	4618      	mov	r0, r3
 8011870:	371c      	adds	r7, #28
 8011872:	46bd      	mov	sp, r7
 8011874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011878:	4770      	bx	lr
	...

0801187c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801187c:	b580      	push	{r7, lr}
 801187e:	b084      	sub	sp, #16
 8011880:	af00      	add	r7, sp, #0
 8011882:	6078      	str	r0, [r7, #4]
 8011884:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011886:	2300      	movs	r3, #0
 8011888:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801188a:	683b      	ldr	r3, [r7, #0]
 801188c:	781b      	ldrb	r3, [r3, #0]
 801188e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011892:	2b40      	cmp	r3, #64	; 0x40
 8011894:	d005      	beq.n	80118a2 <USBD_StdDevReq+0x26>
 8011896:	2b40      	cmp	r3, #64	; 0x40
 8011898:	d853      	bhi.n	8011942 <USBD_StdDevReq+0xc6>
 801189a:	2b00      	cmp	r3, #0
 801189c:	d00b      	beq.n	80118b6 <USBD_StdDevReq+0x3a>
 801189e:	2b20      	cmp	r3, #32
 80118a0:	d14f      	bne.n	8011942 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80118a8:	689b      	ldr	r3, [r3, #8]
 80118aa:	6839      	ldr	r1, [r7, #0]
 80118ac:	6878      	ldr	r0, [r7, #4]
 80118ae:	4798      	blx	r3
 80118b0:	4603      	mov	r3, r0
 80118b2:	73fb      	strb	r3, [r7, #15]
    break;
 80118b4:	e04a      	b.n	801194c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80118b6:	683b      	ldr	r3, [r7, #0]
 80118b8:	785b      	ldrb	r3, [r3, #1]
 80118ba:	2b09      	cmp	r3, #9
 80118bc:	d83b      	bhi.n	8011936 <USBD_StdDevReq+0xba>
 80118be:	a201      	add	r2, pc, #4	; (adr r2, 80118c4 <USBD_StdDevReq+0x48>)
 80118c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118c4:	08011919 	.word	0x08011919
 80118c8:	0801192d 	.word	0x0801192d
 80118cc:	08011937 	.word	0x08011937
 80118d0:	08011923 	.word	0x08011923
 80118d4:	08011937 	.word	0x08011937
 80118d8:	080118f7 	.word	0x080118f7
 80118dc:	080118ed 	.word	0x080118ed
 80118e0:	08011937 	.word	0x08011937
 80118e4:	0801190f 	.word	0x0801190f
 80118e8:	08011901 	.word	0x08011901
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80118ec:	6839      	ldr	r1, [r7, #0]
 80118ee:	6878      	ldr	r0, [r7, #4]
 80118f0:	f000 f9d8 	bl	8011ca4 <USBD_GetDescriptor>
      break;
 80118f4:	e024      	b.n	8011940 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80118f6:	6839      	ldr	r1, [r7, #0]
 80118f8:	6878      	ldr	r0, [r7, #4]
 80118fa:	f000 fb3d 	bl	8011f78 <USBD_SetAddress>
      break;
 80118fe:	e01f      	b.n	8011940 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8011900:	6839      	ldr	r1, [r7, #0]
 8011902:	6878      	ldr	r0, [r7, #4]
 8011904:	f000 fb7c 	bl	8012000 <USBD_SetConfig>
 8011908:	4603      	mov	r3, r0
 801190a:	73fb      	strb	r3, [r7, #15]
      break;
 801190c:	e018      	b.n	8011940 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 801190e:	6839      	ldr	r1, [r7, #0]
 8011910:	6878      	ldr	r0, [r7, #4]
 8011912:	f000 fc19 	bl	8012148 <USBD_GetConfig>
      break;
 8011916:	e013      	b.n	8011940 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8011918:	6839      	ldr	r1, [r7, #0]
 801191a:	6878      	ldr	r0, [r7, #4]
 801191c:	f000 fc49 	bl	80121b2 <USBD_GetStatus>
      break;
 8011920:	e00e      	b.n	8011940 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8011922:	6839      	ldr	r1, [r7, #0]
 8011924:	6878      	ldr	r0, [r7, #4]
 8011926:	f000 fc77 	bl	8012218 <USBD_SetFeature>
      break;
 801192a:	e009      	b.n	8011940 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 801192c:	6839      	ldr	r1, [r7, #0]
 801192e:	6878      	ldr	r0, [r7, #4]
 8011930:	f000 fc86 	bl	8012240 <USBD_ClrFeature>
      break;
 8011934:	e004      	b.n	8011940 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8011936:	6839      	ldr	r1, [r7, #0]
 8011938:	6878      	ldr	r0, [r7, #4]
 801193a:	f000 fcdc 	bl	80122f6 <USBD_CtlError>
      break;
 801193e:	bf00      	nop
    }
    break;
 8011940:	e004      	b.n	801194c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8011942:	6839      	ldr	r1, [r7, #0]
 8011944:	6878      	ldr	r0, [r7, #4]
 8011946:	f000 fcd6 	bl	80122f6 <USBD_CtlError>
    break;
 801194a:	bf00      	nop
  }

  return ret;
 801194c:	7bfb      	ldrb	r3, [r7, #15]
}
 801194e:	4618      	mov	r0, r3
 8011950:	3710      	adds	r7, #16
 8011952:	46bd      	mov	sp, r7
 8011954:	bd80      	pop	{r7, pc}
 8011956:	bf00      	nop

08011958 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011958:	b580      	push	{r7, lr}
 801195a:	b084      	sub	sp, #16
 801195c:	af00      	add	r7, sp, #0
 801195e:	6078      	str	r0, [r7, #4]
 8011960:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011962:	2300      	movs	r3, #0
 8011964:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011966:	683b      	ldr	r3, [r7, #0]
 8011968:	781b      	ldrb	r3, [r3, #0]
 801196a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801196e:	2b40      	cmp	r3, #64	; 0x40
 8011970:	d005      	beq.n	801197e <USBD_StdItfReq+0x26>
 8011972:	2b40      	cmp	r3, #64	; 0x40
 8011974:	d82e      	bhi.n	80119d4 <USBD_StdItfReq+0x7c>
 8011976:	2b00      	cmp	r3, #0
 8011978:	d001      	beq.n	801197e <USBD_StdItfReq+0x26>
 801197a:	2b20      	cmp	r3, #32
 801197c:	d12a      	bne.n	80119d4 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011984:	3b01      	subs	r3, #1
 8011986:	2b02      	cmp	r3, #2
 8011988:	d81d      	bhi.n	80119c6 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801198a:	683b      	ldr	r3, [r7, #0]
 801198c:	889b      	ldrh	r3, [r3, #4]
 801198e:	b2db      	uxtb	r3, r3
 8011990:	2b01      	cmp	r3, #1
 8011992:	d813      	bhi.n	80119bc <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801199a:	689b      	ldr	r3, [r3, #8]
 801199c:	6839      	ldr	r1, [r7, #0]
 801199e:	6878      	ldr	r0, [r7, #4]
 80119a0:	4798      	blx	r3
 80119a2:	4603      	mov	r3, r0
 80119a4:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80119a6:	683b      	ldr	r3, [r7, #0]
 80119a8:	88db      	ldrh	r3, [r3, #6]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d110      	bne.n	80119d0 <USBD_StdItfReq+0x78>
 80119ae:	7bfb      	ldrb	r3, [r7, #15]
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d10d      	bne.n	80119d0 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 80119b4:	6878      	ldr	r0, [r7, #4]
 80119b6:	f000 fd69 	bl	801248c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80119ba:	e009      	b.n	80119d0 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 80119bc:	6839      	ldr	r1, [r7, #0]
 80119be:	6878      	ldr	r0, [r7, #4]
 80119c0:	f000 fc99 	bl	80122f6 <USBD_CtlError>
      break;
 80119c4:	e004      	b.n	80119d0 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 80119c6:	6839      	ldr	r1, [r7, #0]
 80119c8:	6878      	ldr	r0, [r7, #4]
 80119ca:	f000 fc94 	bl	80122f6 <USBD_CtlError>
      break;
 80119ce:	e000      	b.n	80119d2 <USBD_StdItfReq+0x7a>
      break;
 80119d0:	bf00      	nop
    }
    break;
 80119d2:	e004      	b.n	80119de <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 80119d4:	6839      	ldr	r1, [r7, #0]
 80119d6:	6878      	ldr	r0, [r7, #4]
 80119d8:	f000 fc8d 	bl	80122f6 <USBD_CtlError>
    break;
 80119dc:	bf00      	nop
  }

  return ret;
 80119de:	7bfb      	ldrb	r3, [r7, #15]
}
 80119e0:	4618      	mov	r0, r3
 80119e2:	3710      	adds	r7, #16
 80119e4:	46bd      	mov	sp, r7
 80119e6:	bd80      	pop	{r7, pc}

080119e8 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80119e8:	b580      	push	{r7, lr}
 80119ea:	b084      	sub	sp, #16
 80119ec:	af00      	add	r7, sp, #0
 80119ee:	6078      	str	r0, [r7, #4]
 80119f0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80119f2:	2300      	movs	r3, #0
 80119f4:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80119f6:	683b      	ldr	r3, [r7, #0]
 80119f8:	889b      	ldrh	r3, [r3, #4]
 80119fa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80119fc:	683b      	ldr	r3, [r7, #0]
 80119fe:	781b      	ldrb	r3, [r3, #0]
 8011a00:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011a04:	2b40      	cmp	r3, #64	; 0x40
 8011a06:	d007      	beq.n	8011a18 <USBD_StdEPReq+0x30>
 8011a08:	2b40      	cmp	r3, #64	; 0x40
 8011a0a:	f200 8140 	bhi.w	8011c8e <USBD_StdEPReq+0x2a6>
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d00c      	beq.n	8011a2c <USBD_StdEPReq+0x44>
 8011a12:	2b20      	cmp	r3, #32
 8011a14:	f040 813b 	bne.w	8011c8e <USBD_StdEPReq+0x2a6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a1e:	689b      	ldr	r3, [r3, #8]
 8011a20:	6839      	ldr	r1, [r7, #0]
 8011a22:	6878      	ldr	r0, [r7, #4]
 8011a24:	4798      	blx	r3
 8011a26:	4603      	mov	r3, r0
 8011a28:	73fb      	strb	r3, [r7, #15]
    break;
 8011a2a:	e135      	b.n	8011c98 <USBD_StdEPReq+0x2b0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8011a2c:	683b      	ldr	r3, [r7, #0]
 8011a2e:	785b      	ldrb	r3, [r3, #1]
 8011a30:	2b03      	cmp	r3, #3
 8011a32:	d007      	beq.n	8011a44 <USBD_StdEPReq+0x5c>
 8011a34:	2b03      	cmp	r3, #3
 8011a36:	f300 8124 	bgt.w	8011c82 <USBD_StdEPReq+0x29a>
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d07b      	beq.n	8011b36 <USBD_StdEPReq+0x14e>
 8011a3e:	2b01      	cmp	r3, #1
 8011a40:	d03b      	beq.n	8011aba <USBD_StdEPReq+0xd2>
 8011a42:	e11e      	b.n	8011c82 <USBD_StdEPReq+0x29a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011a4a:	2b02      	cmp	r3, #2
 8011a4c:	d002      	beq.n	8011a54 <USBD_StdEPReq+0x6c>
 8011a4e:	2b03      	cmp	r3, #3
 8011a50:	d016      	beq.n	8011a80 <USBD_StdEPReq+0x98>
 8011a52:	e02c      	b.n	8011aae <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011a54:	7bbb      	ldrb	r3, [r7, #14]
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d00d      	beq.n	8011a76 <USBD_StdEPReq+0x8e>
 8011a5a:	7bbb      	ldrb	r3, [r7, #14]
 8011a5c:	2b80      	cmp	r3, #128	; 0x80
 8011a5e:	d00a      	beq.n	8011a76 <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8011a60:	7bbb      	ldrb	r3, [r7, #14]
 8011a62:	4619      	mov	r1, r3
 8011a64:	6878      	ldr	r0, [r7, #4]
 8011a66:	f004 f80f 	bl	8015a88 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011a6a:	2180      	movs	r1, #128	; 0x80
 8011a6c:	6878      	ldr	r0, [r7, #4]
 8011a6e:	f004 f80b 	bl	8015a88 <USBD_LL_StallEP>
 8011a72:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8011a74:	e020      	b.n	8011ab8 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 8011a76:	6839      	ldr	r1, [r7, #0]
 8011a78:	6878      	ldr	r0, [r7, #4]
 8011a7a:	f000 fc3c 	bl	80122f6 <USBD_CtlError>
        break;
 8011a7e:	e01b      	b.n	8011ab8 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8011a80:	683b      	ldr	r3, [r7, #0]
 8011a82:	885b      	ldrh	r3, [r3, #2]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d10e      	bne.n	8011aa6 <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011a88:	7bbb      	ldrb	r3, [r7, #14]
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d00b      	beq.n	8011aa6 <USBD_StdEPReq+0xbe>
 8011a8e:	7bbb      	ldrb	r3, [r7, #14]
 8011a90:	2b80      	cmp	r3, #128	; 0x80
 8011a92:	d008      	beq.n	8011aa6 <USBD_StdEPReq+0xbe>
 8011a94:	683b      	ldr	r3, [r7, #0]
 8011a96:	88db      	ldrh	r3, [r3, #6]
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d104      	bne.n	8011aa6 <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8011a9c:	7bbb      	ldrb	r3, [r7, #14]
 8011a9e:	4619      	mov	r1, r3
 8011aa0:	6878      	ldr	r0, [r7, #4]
 8011aa2:	f003 fff1 	bl	8015a88 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8011aa6:	6878      	ldr	r0, [r7, #4]
 8011aa8:	f000 fcf0 	bl	801248c <USBD_CtlSendStatus>

        break;
 8011aac:	e004      	b.n	8011ab8 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 8011aae:	6839      	ldr	r1, [r7, #0]
 8011ab0:	6878      	ldr	r0, [r7, #4]
 8011ab2:	f000 fc20 	bl	80122f6 <USBD_CtlError>
        break;
 8011ab6:	bf00      	nop
      }
      break;
 8011ab8:	e0e8      	b.n	8011c8c <USBD_StdEPReq+0x2a4>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011ac0:	2b02      	cmp	r3, #2
 8011ac2:	d002      	beq.n	8011aca <USBD_StdEPReq+0xe2>
 8011ac4:	2b03      	cmp	r3, #3
 8011ac6:	d016      	beq.n	8011af6 <USBD_StdEPReq+0x10e>
 8011ac8:	e02e      	b.n	8011b28 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011aca:	7bbb      	ldrb	r3, [r7, #14]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d00d      	beq.n	8011aec <USBD_StdEPReq+0x104>
 8011ad0:	7bbb      	ldrb	r3, [r7, #14]
 8011ad2:	2b80      	cmp	r3, #128	; 0x80
 8011ad4:	d00a      	beq.n	8011aec <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8011ad6:	7bbb      	ldrb	r3, [r7, #14]
 8011ad8:	4619      	mov	r1, r3
 8011ada:	6878      	ldr	r0, [r7, #4]
 8011adc:	f003 ffd4 	bl	8015a88 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011ae0:	2180      	movs	r1, #128	; 0x80
 8011ae2:	6878      	ldr	r0, [r7, #4]
 8011ae4:	f003 ffd0 	bl	8015a88 <USBD_LL_StallEP>
 8011ae8:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8011aea:	e023      	b.n	8011b34 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8011aec:	6839      	ldr	r1, [r7, #0]
 8011aee:	6878      	ldr	r0, [r7, #4]
 8011af0:	f000 fc01 	bl	80122f6 <USBD_CtlError>
        break;
 8011af4:	e01e      	b.n	8011b34 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8011af6:	683b      	ldr	r3, [r7, #0]
 8011af8:	885b      	ldrh	r3, [r3, #2]
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d119      	bne.n	8011b32 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8011afe:	7bbb      	ldrb	r3, [r7, #14]
 8011b00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d004      	beq.n	8011b12 <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8011b08:	7bbb      	ldrb	r3, [r7, #14]
 8011b0a:	4619      	mov	r1, r3
 8011b0c:	6878      	ldr	r0, [r7, #4]
 8011b0e:	f003 ffda 	bl	8015ac6 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8011b12:	6878      	ldr	r0, [r7, #4]
 8011b14:	f000 fcba 	bl	801248c <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b1e:	689b      	ldr	r3, [r3, #8]
 8011b20:	6839      	ldr	r1, [r7, #0]
 8011b22:	6878      	ldr	r0, [r7, #4]
 8011b24:	4798      	blx	r3
        }
        break;
 8011b26:	e004      	b.n	8011b32 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8011b28:	6839      	ldr	r1, [r7, #0]
 8011b2a:	6878      	ldr	r0, [r7, #4]
 8011b2c:	f000 fbe3 	bl	80122f6 <USBD_CtlError>
        break;
 8011b30:	e000      	b.n	8011b34 <USBD_StdEPReq+0x14c>
        break;
 8011b32:	bf00      	nop
      }
      break;
 8011b34:	e0aa      	b.n	8011c8c <USBD_StdEPReq+0x2a4>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011b3c:	2b02      	cmp	r3, #2
 8011b3e:	d002      	beq.n	8011b46 <USBD_StdEPReq+0x15e>
 8011b40:	2b03      	cmp	r3, #3
 8011b42:	d032      	beq.n	8011baa <USBD_StdEPReq+0x1c2>
 8011b44:	e097      	b.n	8011c76 <USBD_StdEPReq+0x28e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011b46:	7bbb      	ldrb	r3, [r7, #14]
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d007      	beq.n	8011b5c <USBD_StdEPReq+0x174>
 8011b4c:	7bbb      	ldrb	r3, [r7, #14]
 8011b4e:	2b80      	cmp	r3, #128	; 0x80
 8011b50:	d004      	beq.n	8011b5c <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8011b52:	6839      	ldr	r1, [r7, #0]
 8011b54:	6878      	ldr	r0, [r7, #4]
 8011b56:	f000 fbce 	bl	80122f6 <USBD_CtlError>
          break;
 8011b5a:	e091      	b.n	8011c80 <USBD_StdEPReq+0x298>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011b5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	da0b      	bge.n	8011b7c <USBD_StdEPReq+0x194>
 8011b64:	7bbb      	ldrb	r3, [r7, #14]
 8011b66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011b6a:	4613      	mov	r3, r2
 8011b6c:	009b      	lsls	r3, r3, #2
 8011b6e:	4413      	add	r3, r2
 8011b70:	009b      	lsls	r3, r3, #2
 8011b72:	3310      	adds	r3, #16
 8011b74:	687a      	ldr	r2, [r7, #4]
 8011b76:	4413      	add	r3, r2
 8011b78:	3304      	adds	r3, #4
 8011b7a:	e00b      	b.n	8011b94 <USBD_StdEPReq+0x1ac>
              &pdev->ep_out[ep_addr & 0x7FU];
 8011b7c:	7bbb      	ldrb	r3, [r7, #14]
 8011b7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011b82:	4613      	mov	r3, r2
 8011b84:	009b      	lsls	r3, r3, #2
 8011b86:	4413      	add	r3, r2
 8011b88:	009b      	lsls	r3, r3, #2
 8011b8a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011b8e:	687a      	ldr	r2, [r7, #4]
 8011b90:	4413      	add	r3, r2
 8011b92:	3304      	adds	r3, #4
 8011b94:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8011b96:	68bb      	ldr	r3, [r7, #8]
 8011b98:	2200      	movs	r2, #0
 8011b9a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011b9c:	68bb      	ldr	r3, [r7, #8]
 8011b9e:	2202      	movs	r2, #2
 8011ba0:	4619      	mov	r1, r3
 8011ba2:	6878      	ldr	r0, [r7, #4]
 8011ba4:	f000 fc18 	bl	80123d8 <USBD_CtlSendData>
        break;
 8011ba8:	e06a      	b.n	8011c80 <USBD_StdEPReq+0x298>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8011baa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	da11      	bge.n	8011bd6 <USBD_StdEPReq+0x1ee>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011bb2:	7bbb      	ldrb	r3, [r7, #14]
 8011bb4:	f003 020f 	and.w	r2, r3, #15
 8011bb8:	6879      	ldr	r1, [r7, #4]
 8011bba:	4613      	mov	r3, r2
 8011bbc:	009b      	lsls	r3, r3, #2
 8011bbe:	4413      	add	r3, r2
 8011bc0:	009b      	lsls	r3, r3, #2
 8011bc2:	440b      	add	r3, r1
 8011bc4:	3324      	adds	r3, #36	; 0x24
 8011bc6:	881b      	ldrh	r3, [r3, #0]
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d117      	bne.n	8011bfc <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8011bcc:	6839      	ldr	r1, [r7, #0]
 8011bce:	6878      	ldr	r0, [r7, #4]
 8011bd0:	f000 fb91 	bl	80122f6 <USBD_CtlError>
            break;
 8011bd4:	e054      	b.n	8011c80 <USBD_StdEPReq+0x298>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011bd6:	7bbb      	ldrb	r3, [r7, #14]
 8011bd8:	f003 020f 	and.w	r2, r3, #15
 8011bdc:	6879      	ldr	r1, [r7, #4]
 8011bde:	4613      	mov	r3, r2
 8011be0:	009b      	lsls	r3, r3, #2
 8011be2:	4413      	add	r3, r2
 8011be4:	009b      	lsls	r3, r3, #2
 8011be6:	440b      	add	r3, r1
 8011be8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011bec:	881b      	ldrh	r3, [r3, #0]
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d104      	bne.n	8011bfc <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8011bf2:	6839      	ldr	r1, [r7, #0]
 8011bf4:	6878      	ldr	r0, [r7, #4]
 8011bf6:	f000 fb7e 	bl	80122f6 <USBD_CtlError>
            break;
 8011bfa:	e041      	b.n	8011c80 <USBD_StdEPReq+0x298>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011bfc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	da0b      	bge.n	8011c1c <USBD_StdEPReq+0x234>
 8011c04:	7bbb      	ldrb	r3, [r7, #14]
 8011c06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011c0a:	4613      	mov	r3, r2
 8011c0c:	009b      	lsls	r3, r3, #2
 8011c0e:	4413      	add	r3, r2
 8011c10:	009b      	lsls	r3, r3, #2
 8011c12:	3310      	adds	r3, #16
 8011c14:	687a      	ldr	r2, [r7, #4]
 8011c16:	4413      	add	r3, r2
 8011c18:	3304      	adds	r3, #4
 8011c1a:	e00b      	b.n	8011c34 <USBD_StdEPReq+0x24c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8011c1c:	7bbb      	ldrb	r3, [r7, #14]
 8011c1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011c22:	4613      	mov	r3, r2
 8011c24:	009b      	lsls	r3, r3, #2
 8011c26:	4413      	add	r3, r2
 8011c28:	009b      	lsls	r3, r3, #2
 8011c2a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011c2e:	687a      	ldr	r2, [r7, #4]
 8011c30:	4413      	add	r3, r2
 8011c32:	3304      	adds	r3, #4
 8011c34:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011c36:	7bbb      	ldrb	r3, [r7, #14]
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d002      	beq.n	8011c42 <USBD_StdEPReq+0x25a>
 8011c3c:	7bbb      	ldrb	r3, [r7, #14]
 8011c3e:	2b80      	cmp	r3, #128	; 0x80
 8011c40:	d103      	bne.n	8011c4a <USBD_StdEPReq+0x262>
          {
            pep->status = 0x0000U;
 8011c42:	68bb      	ldr	r3, [r7, #8]
 8011c44:	2200      	movs	r2, #0
 8011c46:	601a      	str	r2, [r3, #0]
 8011c48:	e00e      	b.n	8011c68 <USBD_StdEPReq+0x280>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8011c4a:	7bbb      	ldrb	r3, [r7, #14]
 8011c4c:	4619      	mov	r1, r3
 8011c4e:	6878      	ldr	r0, [r7, #4]
 8011c50:	f003 ff58 	bl	8015b04 <USBD_LL_IsStallEP>
 8011c54:	4603      	mov	r3, r0
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d003      	beq.n	8011c62 <USBD_StdEPReq+0x27a>
          {
            pep->status = 0x0001U;
 8011c5a:	68bb      	ldr	r3, [r7, #8]
 8011c5c:	2201      	movs	r2, #1
 8011c5e:	601a      	str	r2, [r3, #0]
 8011c60:	e002      	b.n	8011c68 <USBD_StdEPReq+0x280>
          }
          else
          {
            pep->status = 0x0000U;
 8011c62:	68bb      	ldr	r3, [r7, #8]
 8011c64:	2200      	movs	r2, #0
 8011c66:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011c68:	68bb      	ldr	r3, [r7, #8]
 8011c6a:	2202      	movs	r2, #2
 8011c6c:	4619      	mov	r1, r3
 8011c6e:	6878      	ldr	r0, [r7, #4]
 8011c70:	f000 fbb2 	bl	80123d8 <USBD_CtlSendData>
          break;
 8011c74:	e004      	b.n	8011c80 <USBD_StdEPReq+0x298>

      default:
        USBD_CtlError(pdev, req);
 8011c76:	6839      	ldr	r1, [r7, #0]
 8011c78:	6878      	ldr	r0, [r7, #4]
 8011c7a:	f000 fb3c 	bl	80122f6 <USBD_CtlError>
        break;
 8011c7e:	bf00      	nop
      }
      break;
 8011c80:	e004      	b.n	8011c8c <USBD_StdEPReq+0x2a4>

    default:
      USBD_CtlError(pdev, req);
 8011c82:	6839      	ldr	r1, [r7, #0]
 8011c84:	6878      	ldr	r0, [r7, #4]
 8011c86:	f000 fb36 	bl	80122f6 <USBD_CtlError>
      break;
 8011c8a:	bf00      	nop
    }
    break;
 8011c8c:	e004      	b.n	8011c98 <USBD_StdEPReq+0x2b0>

  default:
    USBD_CtlError(pdev, req);
 8011c8e:	6839      	ldr	r1, [r7, #0]
 8011c90:	6878      	ldr	r0, [r7, #4]
 8011c92:	f000 fb30 	bl	80122f6 <USBD_CtlError>
    break;
 8011c96:	bf00      	nop
  }

  return ret;
 8011c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c9a:	4618      	mov	r0, r3
 8011c9c:	3710      	adds	r7, #16
 8011c9e:	46bd      	mov	sp, r7
 8011ca0:	bd80      	pop	{r7, pc}
	...

08011ca4 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011ca4:	b580      	push	{r7, lr}
 8011ca6:	b084      	sub	sp, #16
 8011ca8:	af00      	add	r7, sp, #0
 8011caa:	6078      	str	r0, [r7, #4]
 8011cac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011cae:	2300      	movs	r3, #0
 8011cb0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8011cb2:	2300      	movs	r3, #0
 8011cb4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011cb6:	2300      	movs	r3, #0
 8011cb8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8011cba:	683b      	ldr	r3, [r7, #0]
 8011cbc:	885b      	ldrh	r3, [r3, #2]
 8011cbe:	0a1b      	lsrs	r3, r3, #8
 8011cc0:	b29b      	uxth	r3, r3
 8011cc2:	3b01      	subs	r3, #1
 8011cc4:	2b06      	cmp	r3, #6
 8011cc6:	f200 8128 	bhi.w	8011f1a <USBD_GetDescriptor+0x276>
 8011cca:	a201      	add	r2, pc, #4	; (adr r2, 8011cd0 <USBD_GetDescriptor+0x2c>)
 8011ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cd0:	08011ced 	.word	0x08011ced
 8011cd4:	08011d05 	.word	0x08011d05
 8011cd8:	08011d45 	.word	0x08011d45
 8011cdc:	08011f1b 	.word	0x08011f1b
 8011ce0:	08011f1b 	.word	0x08011f1b
 8011ce4:	08011ebb 	.word	0x08011ebb
 8011ce8:	08011ee7 	.word	0x08011ee7
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	687a      	ldr	r2, [r7, #4]
 8011cf6:	7c12      	ldrb	r2, [r2, #16]
 8011cf8:	f107 0108 	add.w	r1, r7, #8
 8011cfc:	4610      	mov	r0, r2
 8011cfe:	4798      	blx	r3
 8011d00:	60f8      	str	r0, [r7, #12]
    break;
 8011d02:	e112      	b.n	8011f2a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	7c1b      	ldrb	r3, [r3, #16]
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d10d      	bne.n	8011d28 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d14:	f107 0208 	add.w	r2, r7, #8
 8011d18:	4610      	mov	r0, r2
 8011d1a:	4798      	blx	r3
 8011d1c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011d1e:	68fb      	ldr	r3, [r7, #12]
 8011d20:	3301      	adds	r3, #1
 8011d22:	2202      	movs	r2, #2
 8011d24:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8011d26:	e100      	b.n	8011f2a <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d30:	f107 0208 	add.w	r2, r7, #8
 8011d34:	4610      	mov	r0, r2
 8011d36:	4798      	blx	r3
 8011d38:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011d3a:	68fb      	ldr	r3, [r7, #12]
 8011d3c:	3301      	adds	r3, #1
 8011d3e:	2202      	movs	r2, #2
 8011d40:	701a      	strb	r2, [r3, #0]
    break;
 8011d42:	e0f2      	b.n	8011f2a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8011d44:	683b      	ldr	r3, [r7, #0]
 8011d46:	885b      	ldrh	r3, [r3, #2]
 8011d48:	b2db      	uxtb	r3, r3
 8011d4a:	2b05      	cmp	r3, #5
 8011d4c:	f200 80ac 	bhi.w	8011ea8 <USBD_GetDescriptor+0x204>
 8011d50:	a201      	add	r2, pc, #4	; (adr r2, 8011d58 <USBD_GetDescriptor+0xb4>)
 8011d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d56:	bf00      	nop
 8011d58:	08011d71 	.word	0x08011d71
 8011d5c:	08011da5 	.word	0x08011da5
 8011d60:	08011dd9 	.word	0x08011dd9
 8011d64:	08011e0d 	.word	0x08011e0d
 8011d68:	08011e41 	.word	0x08011e41
 8011d6c:	08011e75 	.word	0x08011e75
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011d76:	685b      	ldr	r3, [r3, #4]
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d00b      	beq.n	8011d94 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011d82:	685b      	ldr	r3, [r3, #4]
 8011d84:	687a      	ldr	r2, [r7, #4]
 8011d86:	7c12      	ldrb	r2, [r2, #16]
 8011d88:	f107 0108 	add.w	r1, r7, #8
 8011d8c:	4610      	mov	r0, r2
 8011d8e:	4798      	blx	r3
 8011d90:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011d92:	e091      	b.n	8011eb8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011d94:	6839      	ldr	r1, [r7, #0]
 8011d96:	6878      	ldr	r0, [r7, #4]
 8011d98:	f000 faad 	bl	80122f6 <USBD_CtlError>
        err++;
 8011d9c:	7afb      	ldrb	r3, [r7, #11]
 8011d9e:	3301      	adds	r3, #1
 8011da0:	72fb      	strb	r3, [r7, #11]
      break;
 8011da2:	e089      	b.n	8011eb8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011daa:	689b      	ldr	r3, [r3, #8]
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d00b      	beq.n	8011dc8 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011db6:	689b      	ldr	r3, [r3, #8]
 8011db8:	687a      	ldr	r2, [r7, #4]
 8011dba:	7c12      	ldrb	r2, [r2, #16]
 8011dbc:	f107 0108 	add.w	r1, r7, #8
 8011dc0:	4610      	mov	r0, r2
 8011dc2:	4798      	blx	r3
 8011dc4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011dc6:	e077      	b.n	8011eb8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011dc8:	6839      	ldr	r1, [r7, #0]
 8011dca:	6878      	ldr	r0, [r7, #4]
 8011dcc:	f000 fa93 	bl	80122f6 <USBD_CtlError>
        err++;
 8011dd0:	7afb      	ldrb	r3, [r7, #11]
 8011dd2:	3301      	adds	r3, #1
 8011dd4:	72fb      	strb	r3, [r7, #11]
      break;
 8011dd6:	e06f      	b.n	8011eb8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011dde:	68db      	ldr	r3, [r3, #12]
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d00b      	beq.n	8011dfc <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011dea:	68db      	ldr	r3, [r3, #12]
 8011dec:	687a      	ldr	r2, [r7, #4]
 8011dee:	7c12      	ldrb	r2, [r2, #16]
 8011df0:	f107 0108 	add.w	r1, r7, #8
 8011df4:	4610      	mov	r0, r2
 8011df6:	4798      	blx	r3
 8011df8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011dfa:	e05d      	b.n	8011eb8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011dfc:	6839      	ldr	r1, [r7, #0]
 8011dfe:	6878      	ldr	r0, [r7, #4]
 8011e00:	f000 fa79 	bl	80122f6 <USBD_CtlError>
        err++;
 8011e04:	7afb      	ldrb	r3, [r7, #11]
 8011e06:	3301      	adds	r3, #1
 8011e08:	72fb      	strb	r3, [r7, #11]
      break;
 8011e0a:	e055      	b.n	8011eb8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011e12:	691b      	ldr	r3, [r3, #16]
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d00b      	beq.n	8011e30 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011e1e:	691b      	ldr	r3, [r3, #16]
 8011e20:	687a      	ldr	r2, [r7, #4]
 8011e22:	7c12      	ldrb	r2, [r2, #16]
 8011e24:	f107 0108 	add.w	r1, r7, #8
 8011e28:	4610      	mov	r0, r2
 8011e2a:	4798      	blx	r3
 8011e2c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011e2e:	e043      	b.n	8011eb8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011e30:	6839      	ldr	r1, [r7, #0]
 8011e32:	6878      	ldr	r0, [r7, #4]
 8011e34:	f000 fa5f 	bl	80122f6 <USBD_CtlError>
        err++;
 8011e38:	7afb      	ldrb	r3, [r7, #11]
 8011e3a:	3301      	adds	r3, #1
 8011e3c:	72fb      	strb	r3, [r7, #11]
      break;
 8011e3e:	e03b      	b.n	8011eb8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011e46:	695b      	ldr	r3, [r3, #20]
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d00b      	beq.n	8011e64 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011e52:	695b      	ldr	r3, [r3, #20]
 8011e54:	687a      	ldr	r2, [r7, #4]
 8011e56:	7c12      	ldrb	r2, [r2, #16]
 8011e58:	f107 0108 	add.w	r1, r7, #8
 8011e5c:	4610      	mov	r0, r2
 8011e5e:	4798      	blx	r3
 8011e60:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011e62:	e029      	b.n	8011eb8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011e64:	6839      	ldr	r1, [r7, #0]
 8011e66:	6878      	ldr	r0, [r7, #4]
 8011e68:	f000 fa45 	bl	80122f6 <USBD_CtlError>
        err++;
 8011e6c:	7afb      	ldrb	r3, [r7, #11]
 8011e6e:	3301      	adds	r3, #1
 8011e70:	72fb      	strb	r3, [r7, #11]
      break;
 8011e72:	e021      	b.n	8011eb8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011e7a:	699b      	ldr	r3, [r3, #24]
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d00b      	beq.n	8011e98 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011e86:	699b      	ldr	r3, [r3, #24]
 8011e88:	687a      	ldr	r2, [r7, #4]
 8011e8a:	7c12      	ldrb	r2, [r2, #16]
 8011e8c:	f107 0108 	add.w	r1, r7, #8
 8011e90:	4610      	mov	r0, r2
 8011e92:	4798      	blx	r3
 8011e94:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011e96:	e00f      	b.n	8011eb8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011e98:	6839      	ldr	r1, [r7, #0]
 8011e9a:	6878      	ldr	r0, [r7, #4]
 8011e9c:	f000 fa2b 	bl	80122f6 <USBD_CtlError>
        err++;
 8011ea0:	7afb      	ldrb	r3, [r7, #11]
 8011ea2:	3301      	adds	r3, #1
 8011ea4:	72fb      	strb	r3, [r7, #11]
      break;
 8011ea6:	e007      	b.n	8011eb8 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8011ea8:	6839      	ldr	r1, [r7, #0]
 8011eaa:	6878      	ldr	r0, [r7, #4]
 8011eac:	f000 fa23 	bl	80122f6 <USBD_CtlError>
      err++;
 8011eb0:	7afb      	ldrb	r3, [r7, #11]
 8011eb2:	3301      	adds	r3, #1
 8011eb4:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8011eb6:	bf00      	nop
    }
    break;
 8011eb8:	e037      	b.n	8011f2a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	7c1b      	ldrb	r3, [r3, #16]
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d109      	bne.n	8011ed6 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011eca:	f107 0208 	add.w	r2, r7, #8
 8011ece:	4610      	mov	r0, r2
 8011ed0:	4798      	blx	r3
 8011ed2:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8011ed4:	e029      	b.n	8011f2a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8011ed6:	6839      	ldr	r1, [r7, #0]
 8011ed8:	6878      	ldr	r0, [r7, #4]
 8011eda:	f000 fa0c 	bl	80122f6 <USBD_CtlError>
      err++;
 8011ede:	7afb      	ldrb	r3, [r7, #11]
 8011ee0:	3301      	adds	r3, #1
 8011ee2:	72fb      	strb	r3, [r7, #11]
    break;
 8011ee4:	e021      	b.n	8011f2a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	7c1b      	ldrb	r3, [r3, #16]
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d10d      	bne.n	8011f0a <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ef6:	f107 0208 	add.w	r2, r7, #8
 8011efa:	4610      	mov	r0, r2
 8011efc:	4798      	blx	r3
 8011efe:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	3301      	adds	r3, #1
 8011f04:	2207      	movs	r2, #7
 8011f06:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8011f08:	e00f      	b.n	8011f2a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8011f0a:	6839      	ldr	r1, [r7, #0]
 8011f0c:	6878      	ldr	r0, [r7, #4]
 8011f0e:	f000 f9f2 	bl	80122f6 <USBD_CtlError>
      err++;
 8011f12:	7afb      	ldrb	r3, [r7, #11]
 8011f14:	3301      	adds	r3, #1
 8011f16:	72fb      	strb	r3, [r7, #11]
    break;
 8011f18:	e007      	b.n	8011f2a <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8011f1a:	6839      	ldr	r1, [r7, #0]
 8011f1c:	6878      	ldr	r0, [r7, #4]
 8011f1e:	f000 f9ea 	bl	80122f6 <USBD_CtlError>
    err++;
 8011f22:	7afb      	ldrb	r3, [r7, #11]
 8011f24:	3301      	adds	r3, #1
 8011f26:	72fb      	strb	r3, [r7, #11]
    break;
 8011f28:	bf00      	nop
  }

  if (err != 0U)
 8011f2a:	7afb      	ldrb	r3, [r7, #11]
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d11e      	bne.n	8011f6e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8011f30:	683b      	ldr	r3, [r7, #0]
 8011f32:	88db      	ldrh	r3, [r3, #6]
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d016      	beq.n	8011f66 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8011f38:	893b      	ldrh	r3, [r7, #8]
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d00e      	beq.n	8011f5c <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8011f3e:	683b      	ldr	r3, [r7, #0]
 8011f40:	88da      	ldrh	r2, [r3, #6]
 8011f42:	893b      	ldrh	r3, [r7, #8]
 8011f44:	4293      	cmp	r3, r2
 8011f46:	bf28      	it	cs
 8011f48:	4613      	movcs	r3, r2
 8011f4a:	b29b      	uxth	r3, r3
 8011f4c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8011f4e:	893b      	ldrh	r3, [r7, #8]
 8011f50:	461a      	mov	r2, r3
 8011f52:	68f9      	ldr	r1, [r7, #12]
 8011f54:	6878      	ldr	r0, [r7, #4]
 8011f56:	f000 fa3f 	bl	80123d8 <USBD_CtlSendData>
 8011f5a:	e009      	b.n	8011f70 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8011f5c:	6839      	ldr	r1, [r7, #0]
 8011f5e:	6878      	ldr	r0, [r7, #4]
 8011f60:	f000 f9c9 	bl	80122f6 <USBD_CtlError>
 8011f64:	e004      	b.n	8011f70 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8011f66:	6878      	ldr	r0, [r7, #4]
 8011f68:	f000 fa90 	bl	801248c <USBD_CtlSendStatus>
 8011f6c:	e000      	b.n	8011f70 <USBD_GetDescriptor+0x2cc>
    return;
 8011f6e:	bf00      	nop
    }
  }
}
 8011f70:	3710      	adds	r7, #16
 8011f72:	46bd      	mov	sp, r7
 8011f74:	bd80      	pop	{r7, pc}
 8011f76:	bf00      	nop

08011f78 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011f78:	b580      	push	{r7, lr}
 8011f7a:	b084      	sub	sp, #16
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	6078      	str	r0, [r7, #4]
 8011f80:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8011f82:	683b      	ldr	r3, [r7, #0]
 8011f84:	889b      	ldrh	r3, [r3, #4]
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d130      	bne.n	8011fec <USBD_SetAddress+0x74>
 8011f8a:	683b      	ldr	r3, [r7, #0]
 8011f8c:	88db      	ldrh	r3, [r3, #6]
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d12c      	bne.n	8011fec <USBD_SetAddress+0x74>
 8011f92:	683b      	ldr	r3, [r7, #0]
 8011f94:	885b      	ldrh	r3, [r3, #2]
 8011f96:	2b7f      	cmp	r3, #127	; 0x7f
 8011f98:	d828      	bhi.n	8011fec <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8011f9a:	683b      	ldr	r3, [r7, #0]
 8011f9c:	885b      	ldrh	r3, [r3, #2]
 8011f9e:	b2db      	uxtb	r3, r3
 8011fa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011fa4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011fac:	2b03      	cmp	r3, #3
 8011fae:	d104      	bne.n	8011fba <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8011fb0:	6839      	ldr	r1, [r7, #0]
 8011fb2:	6878      	ldr	r0, [r7, #4]
 8011fb4:	f000 f99f 	bl	80122f6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011fb8:	e01d      	b.n	8011ff6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	7bfa      	ldrb	r2, [r7, #15]
 8011fbe:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011fc2:	7bfb      	ldrb	r3, [r7, #15]
 8011fc4:	4619      	mov	r1, r3
 8011fc6:	6878      	ldr	r0, [r7, #4]
 8011fc8:	f003 fdc8 	bl	8015b5c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8011fcc:	6878      	ldr	r0, [r7, #4]
 8011fce:	f000 fa5d 	bl	801248c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8011fd2:	7bfb      	ldrb	r3, [r7, #15]
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d004      	beq.n	8011fe2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	2202      	movs	r2, #2
 8011fdc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011fe0:	e009      	b.n	8011ff6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	2201      	movs	r2, #1
 8011fe6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011fea:	e004      	b.n	8011ff6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011fec:	6839      	ldr	r1, [r7, #0]
 8011fee:	6878      	ldr	r0, [r7, #4]
 8011ff0:	f000 f981 	bl	80122f6 <USBD_CtlError>
  }
}
 8011ff4:	bf00      	nop
 8011ff6:	bf00      	nop
 8011ff8:	3710      	adds	r7, #16
 8011ffa:	46bd      	mov	sp, r7
 8011ffc:	bd80      	pop	{r7, pc}
	...

08012000 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012000:	b580      	push	{r7, lr}
 8012002:	b084      	sub	sp, #16
 8012004:	af00      	add	r7, sp, #0
 8012006:	6078      	str	r0, [r7, #4]
 8012008:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801200a:	2300      	movs	r3, #0
 801200c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801200e:	683b      	ldr	r3, [r7, #0]
 8012010:	885b      	ldrh	r3, [r3, #2]
 8012012:	b2da      	uxtb	r2, r3
 8012014:	4b4b      	ldr	r3, [pc, #300]	; (8012144 <USBD_SetConfig+0x144>)
 8012016:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012018:	4b4a      	ldr	r3, [pc, #296]	; (8012144 <USBD_SetConfig+0x144>)
 801201a:	781b      	ldrb	r3, [r3, #0]
 801201c:	2b01      	cmp	r3, #1
 801201e:	d905      	bls.n	801202c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8012020:	6839      	ldr	r1, [r7, #0]
 8012022:	6878      	ldr	r0, [r7, #4]
 8012024:	f000 f967 	bl	80122f6 <USBD_CtlError>
    return USBD_FAIL;
 8012028:	2303      	movs	r3, #3
 801202a:	e087      	b.n	801213c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012032:	2b02      	cmp	r3, #2
 8012034:	d002      	beq.n	801203c <USBD_SetConfig+0x3c>
 8012036:	2b03      	cmp	r3, #3
 8012038:	d025      	beq.n	8012086 <USBD_SetConfig+0x86>
 801203a:	e071      	b.n	8012120 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 801203c:	4b41      	ldr	r3, [pc, #260]	; (8012144 <USBD_SetConfig+0x144>)
 801203e:	781b      	ldrb	r3, [r3, #0]
 8012040:	2b00      	cmp	r3, #0
 8012042:	d01c      	beq.n	801207e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8012044:	4b3f      	ldr	r3, [pc, #252]	; (8012144 <USBD_SetConfig+0x144>)
 8012046:	781b      	ldrb	r3, [r3, #0]
 8012048:	461a      	mov	r2, r3
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 801204e:	4b3d      	ldr	r3, [pc, #244]	; (8012144 <USBD_SetConfig+0x144>)
 8012050:	781b      	ldrb	r3, [r3, #0]
 8012052:	4619      	mov	r1, r3
 8012054:	6878      	ldr	r0, [r7, #4]
 8012056:	f7ff f999 	bl	801138c <USBD_SetClassConfig>
 801205a:	4603      	mov	r3, r0
 801205c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 801205e:	7bfb      	ldrb	r3, [r7, #15]
 8012060:	2b00      	cmp	r3, #0
 8012062:	d004      	beq.n	801206e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8012064:	6839      	ldr	r1, [r7, #0]
 8012066:	6878      	ldr	r0, [r7, #4]
 8012068:	f000 f945 	bl	80122f6 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 801206c:	e065      	b.n	801213a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 801206e:	6878      	ldr	r0, [r7, #4]
 8012070:	f000 fa0c 	bl	801248c <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	2203      	movs	r2, #3
 8012078:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 801207c:	e05d      	b.n	801213a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 801207e:	6878      	ldr	r0, [r7, #4]
 8012080:	f000 fa04 	bl	801248c <USBD_CtlSendStatus>
    break;
 8012084:	e059      	b.n	801213a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8012086:	4b2f      	ldr	r3, [pc, #188]	; (8012144 <USBD_SetConfig+0x144>)
 8012088:	781b      	ldrb	r3, [r3, #0]
 801208a:	2b00      	cmp	r3, #0
 801208c:	d112      	bne.n	80120b4 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	2202      	movs	r2, #2
 8012092:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8012096:	4b2b      	ldr	r3, [pc, #172]	; (8012144 <USBD_SetConfig+0x144>)
 8012098:	781b      	ldrb	r3, [r3, #0]
 801209a:	461a      	mov	r2, r3
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80120a0:	4b28      	ldr	r3, [pc, #160]	; (8012144 <USBD_SetConfig+0x144>)
 80120a2:	781b      	ldrb	r3, [r3, #0]
 80120a4:	4619      	mov	r1, r3
 80120a6:	6878      	ldr	r0, [r7, #4]
 80120a8:	f7ff f98c 	bl	80113c4 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80120ac:	6878      	ldr	r0, [r7, #4]
 80120ae:	f000 f9ed 	bl	801248c <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80120b2:	e042      	b.n	801213a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80120b4:	4b23      	ldr	r3, [pc, #140]	; (8012144 <USBD_SetConfig+0x144>)
 80120b6:	781b      	ldrb	r3, [r3, #0]
 80120b8:	461a      	mov	r2, r3
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	685b      	ldr	r3, [r3, #4]
 80120be:	429a      	cmp	r2, r3
 80120c0:	d02a      	beq.n	8012118 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	685b      	ldr	r3, [r3, #4]
 80120c6:	b2db      	uxtb	r3, r3
 80120c8:	4619      	mov	r1, r3
 80120ca:	6878      	ldr	r0, [r7, #4]
 80120cc:	f7ff f97a 	bl	80113c4 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80120d0:	4b1c      	ldr	r3, [pc, #112]	; (8012144 <USBD_SetConfig+0x144>)
 80120d2:	781b      	ldrb	r3, [r3, #0]
 80120d4:	461a      	mov	r2, r3
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80120da:	4b1a      	ldr	r3, [pc, #104]	; (8012144 <USBD_SetConfig+0x144>)
 80120dc:	781b      	ldrb	r3, [r3, #0]
 80120de:	4619      	mov	r1, r3
 80120e0:	6878      	ldr	r0, [r7, #4]
 80120e2:	f7ff f953 	bl	801138c <USBD_SetClassConfig>
 80120e6:	4603      	mov	r3, r0
 80120e8:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80120ea:	7bfb      	ldrb	r3, [r7, #15]
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d00f      	beq.n	8012110 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80120f0:	6839      	ldr	r1, [r7, #0]
 80120f2:	6878      	ldr	r0, [r7, #4]
 80120f4:	f000 f8ff 	bl	80122f6 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	685b      	ldr	r3, [r3, #4]
 80120fc:	b2db      	uxtb	r3, r3
 80120fe:	4619      	mov	r1, r3
 8012100:	6878      	ldr	r0, [r7, #4]
 8012102:	f7ff f95f 	bl	80113c4 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	2202      	movs	r2, #2
 801210a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 801210e:	e014      	b.n	801213a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8012110:	6878      	ldr	r0, [r7, #4]
 8012112:	f000 f9bb 	bl	801248c <USBD_CtlSendStatus>
    break;
 8012116:	e010      	b.n	801213a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8012118:	6878      	ldr	r0, [r7, #4]
 801211a:	f000 f9b7 	bl	801248c <USBD_CtlSendStatus>
    break;
 801211e:	e00c      	b.n	801213a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8012120:	6839      	ldr	r1, [r7, #0]
 8012122:	6878      	ldr	r0, [r7, #4]
 8012124:	f000 f8e7 	bl	80122f6 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012128:	4b06      	ldr	r3, [pc, #24]	; (8012144 <USBD_SetConfig+0x144>)
 801212a:	781b      	ldrb	r3, [r3, #0]
 801212c:	4619      	mov	r1, r3
 801212e:	6878      	ldr	r0, [r7, #4]
 8012130:	f7ff f948 	bl	80113c4 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8012134:	2303      	movs	r3, #3
 8012136:	73fb      	strb	r3, [r7, #15]
    break;
 8012138:	bf00      	nop
  }

  return ret;
 801213a:	7bfb      	ldrb	r3, [r7, #15]
}
 801213c:	4618      	mov	r0, r3
 801213e:	3710      	adds	r7, #16
 8012140:	46bd      	mov	sp, r7
 8012142:	bd80      	pop	{r7, pc}
 8012144:	20001010 	.word	0x20001010

08012148 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012148:	b580      	push	{r7, lr}
 801214a:	b082      	sub	sp, #8
 801214c:	af00      	add	r7, sp, #0
 801214e:	6078      	str	r0, [r7, #4]
 8012150:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8012152:	683b      	ldr	r3, [r7, #0]
 8012154:	88db      	ldrh	r3, [r3, #6]
 8012156:	2b01      	cmp	r3, #1
 8012158:	d004      	beq.n	8012164 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801215a:	6839      	ldr	r1, [r7, #0]
 801215c:	6878      	ldr	r0, [r7, #4]
 801215e:	f000 f8ca 	bl	80122f6 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8012162:	e022      	b.n	80121aa <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801216a:	2b02      	cmp	r3, #2
 801216c:	dc02      	bgt.n	8012174 <USBD_GetConfig+0x2c>
 801216e:	2b00      	cmp	r3, #0
 8012170:	dc03      	bgt.n	801217a <USBD_GetConfig+0x32>
 8012172:	e015      	b.n	80121a0 <USBD_GetConfig+0x58>
 8012174:	2b03      	cmp	r3, #3
 8012176:	d00b      	beq.n	8012190 <USBD_GetConfig+0x48>
 8012178:	e012      	b.n	80121a0 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	2200      	movs	r2, #0
 801217e:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	3308      	adds	r3, #8
 8012184:	2201      	movs	r2, #1
 8012186:	4619      	mov	r1, r3
 8012188:	6878      	ldr	r0, [r7, #4]
 801218a:	f000 f925 	bl	80123d8 <USBD_CtlSendData>
      break;
 801218e:	e00c      	b.n	80121aa <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	3304      	adds	r3, #4
 8012194:	2201      	movs	r2, #1
 8012196:	4619      	mov	r1, r3
 8012198:	6878      	ldr	r0, [r7, #4]
 801219a:	f000 f91d 	bl	80123d8 <USBD_CtlSendData>
      break;
 801219e:	e004      	b.n	80121aa <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 80121a0:	6839      	ldr	r1, [r7, #0]
 80121a2:	6878      	ldr	r0, [r7, #4]
 80121a4:	f000 f8a7 	bl	80122f6 <USBD_CtlError>
      break;
 80121a8:	bf00      	nop
}
 80121aa:	bf00      	nop
 80121ac:	3708      	adds	r7, #8
 80121ae:	46bd      	mov	sp, r7
 80121b0:	bd80      	pop	{r7, pc}

080121b2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80121b2:	b580      	push	{r7, lr}
 80121b4:	b082      	sub	sp, #8
 80121b6:	af00      	add	r7, sp, #0
 80121b8:	6078      	str	r0, [r7, #4]
 80121ba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80121c2:	3b01      	subs	r3, #1
 80121c4:	2b02      	cmp	r3, #2
 80121c6:	d81e      	bhi.n	8012206 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80121c8:	683b      	ldr	r3, [r7, #0]
 80121ca:	88db      	ldrh	r3, [r3, #6]
 80121cc:	2b02      	cmp	r3, #2
 80121ce:	d004      	beq.n	80121da <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80121d0:	6839      	ldr	r1, [r7, #0]
 80121d2:	6878      	ldr	r0, [r7, #4]
 80121d4:	f000 f88f 	bl	80122f6 <USBD_CtlError>
      break;
 80121d8:	e01a      	b.n	8012210 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	2201      	movs	r2, #1
 80121de:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d005      	beq.n	80121f6 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	68db      	ldr	r3, [r3, #12]
 80121ee:	f043 0202 	orr.w	r2, r3, #2
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	330c      	adds	r3, #12
 80121fa:	2202      	movs	r2, #2
 80121fc:	4619      	mov	r1, r3
 80121fe:	6878      	ldr	r0, [r7, #4]
 8012200:	f000 f8ea 	bl	80123d8 <USBD_CtlSendData>
    break;
 8012204:	e004      	b.n	8012210 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8012206:	6839      	ldr	r1, [r7, #0]
 8012208:	6878      	ldr	r0, [r7, #4]
 801220a:	f000 f874 	bl	80122f6 <USBD_CtlError>
    break;
 801220e:	bf00      	nop
  }
}
 8012210:	bf00      	nop
 8012212:	3708      	adds	r7, #8
 8012214:	46bd      	mov	sp, r7
 8012216:	bd80      	pop	{r7, pc}

08012218 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012218:	b580      	push	{r7, lr}
 801221a:	b082      	sub	sp, #8
 801221c:	af00      	add	r7, sp, #0
 801221e:	6078      	str	r0, [r7, #4]
 8012220:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012222:	683b      	ldr	r3, [r7, #0]
 8012224:	885b      	ldrh	r3, [r3, #2]
 8012226:	2b01      	cmp	r3, #1
 8012228:	d106      	bne.n	8012238 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	2201      	movs	r2, #1
 801222e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8012232:	6878      	ldr	r0, [r7, #4]
 8012234:	f000 f92a 	bl	801248c <USBD_CtlSendStatus>
  }
}
 8012238:	bf00      	nop
 801223a:	3708      	adds	r7, #8
 801223c:	46bd      	mov	sp, r7
 801223e:	bd80      	pop	{r7, pc}

08012240 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012240:	b580      	push	{r7, lr}
 8012242:	b082      	sub	sp, #8
 8012244:	af00      	add	r7, sp, #0
 8012246:	6078      	str	r0, [r7, #4]
 8012248:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012250:	3b01      	subs	r3, #1
 8012252:	2b02      	cmp	r3, #2
 8012254:	d80b      	bhi.n	801226e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012256:	683b      	ldr	r3, [r7, #0]
 8012258:	885b      	ldrh	r3, [r3, #2]
 801225a:	2b01      	cmp	r3, #1
 801225c:	d10c      	bne.n	8012278 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	2200      	movs	r2, #0
 8012262:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8012266:	6878      	ldr	r0, [r7, #4]
 8012268:	f000 f910 	bl	801248c <USBD_CtlSendStatus>
      }
      break;
 801226c:	e004      	b.n	8012278 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 801226e:	6839      	ldr	r1, [r7, #0]
 8012270:	6878      	ldr	r0, [r7, #4]
 8012272:	f000 f840 	bl	80122f6 <USBD_CtlError>
      break;
 8012276:	e000      	b.n	801227a <USBD_ClrFeature+0x3a>
      break;
 8012278:	bf00      	nop
  }
}
 801227a:	bf00      	nop
 801227c:	3708      	adds	r7, #8
 801227e:	46bd      	mov	sp, r7
 8012280:	bd80      	pop	{r7, pc}

08012282 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012282:	b580      	push	{r7, lr}
 8012284:	b084      	sub	sp, #16
 8012286:	af00      	add	r7, sp, #0
 8012288:	6078      	str	r0, [r7, #4]
 801228a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801228c:	683b      	ldr	r3, [r7, #0]
 801228e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8012290:	68fb      	ldr	r3, [r7, #12]
 8012292:	781a      	ldrb	r2, [r3, #0]
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012298:	68fb      	ldr	r3, [r7, #12]
 801229a:	3301      	adds	r3, #1
 801229c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801229e:	68fb      	ldr	r3, [r7, #12]
 80122a0:	781a      	ldrb	r2, [r3, #0]
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80122a6:	68fb      	ldr	r3, [r7, #12]
 80122a8:	3301      	adds	r3, #1
 80122aa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80122ac:	68f8      	ldr	r0, [r7, #12]
 80122ae:	f7ff fac6 	bl	801183e <SWAPBYTE>
 80122b2:	4603      	mov	r3, r0
 80122b4:	461a      	mov	r2, r3
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80122ba:	68fb      	ldr	r3, [r7, #12]
 80122bc:	3301      	adds	r3, #1
 80122be:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80122c0:	68fb      	ldr	r3, [r7, #12]
 80122c2:	3301      	adds	r3, #1
 80122c4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80122c6:	68f8      	ldr	r0, [r7, #12]
 80122c8:	f7ff fab9 	bl	801183e <SWAPBYTE>
 80122cc:	4603      	mov	r3, r0
 80122ce:	461a      	mov	r2, r3
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80122d4:	68fb      	ldr	r3, [r7, #12]
 80122d6:	3301      	adds	r3, #1
 80122d8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	3301      	adds	r3, #1
 80122de:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80122e0:	68f8      	ldr	r0, [r7, #12]
 80122e2:	f7ff faac 	bl	801183e <SWAPBYTE>
 80122e6:	4603      	mov	r3, r0
 80122e8:	461a      	mov	r2, r3
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	80da      	strh	r2, [r3, #6]
}
 80122ee:	bf00      	nop
 80122f0:	3710      	adds	r7, #16
 80122f2:	46bd      	mov	sp, r7
 80122f4:	bd80      	pop	{r7, pc}

080122f6 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80122f6:	b580      	push	{r7, lr}
 80122f8:	b082      	sub	sp, #8
 80122fa:	af00      	add	r7, sp, #0
 80122fc:	6078      	str	r0, [r7, #4]
 80122fe:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012300:	2180      	movs	r1, #128	; 0x80
 8012302:	6878      	ldr	r0, [r7, #4]
 8012304:	f003 fbc0 	bl	8015a88 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012308:	2100      	movs	r1, #0
 801230a:	6878      	ldr	r0, [r7, #4]
 801230c:	f003 fbbc 	bl	8015a88 <USBD_LL_StallEP>
}
 8012310:	bf00      	nop
 8012312:	3708      	adds	r7, #8
 8012314:	46bd      	mov	sp, r7
 8012316:	bd80      	pop	{r7, pc}

08012318 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012318:	b580      	push	{r7, lr}
 801231a:	b086      	sub	sp, #24
 801231c:	af00      	add	r7, sp, #0
 801231e:	60f8      	str	r0, [r7, #12]
 8012320:	60b9      	str	r1, [r7, #8]
 8012322:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8012324:	2300      	movs	r3, #0
 8012326:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8012328:	68fb      	ldr	r3, [r7, #12]
 801232a:	2b00      	cmp	r3, #0
 801232c:	d036      	beq.n	801239c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801232e:	68fb      	ldr	r3, [r7, #12]
 8012330:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8012332:	6938      	ldr	r0, [r7, #16]
 8012334:	f000 f836 	bl	80123a4 <USBD_GetLen>
 8012338:	4603      	mov	r3, r0
 801233a:	3301      	adds	r3, #1
 801233c:	b29b      	uxth	r3, r3
 801233e:	005b      	lsls	r3, r3, #1
 8012340:	b29a      	uxth	r2, r3
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8012346:	7dfb      	ldrb	r3, [r7, #23]
 8012348:	68ba      	ldr	r2, [r7, #8]
 801234a:	4413      	add	r3, r2
 801234c:	687a      	ldr	r2, [r7, #4]
 801234e:	7812      	ldrb	r2, [r2, #0]
 8012350:	701a      	strb	r2, [r3, #0]
  idx++;
 8012352:	7dfb      	ldrb	r3, [r7, #23]
 8012354:	3301      	adds	r3, #1
 8012356:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012358:	7dfb      	ldrb	r3, [r7, #23]
 801235a:	68ba      	ldr	r2, [r7, #8]
 801235c:	4413      	add	r3, r2
 801235e:	2203      	movs	r2, #3
 8012360:	701a      	strb	r2, [r3, #0]
  idx++;
 8012362:	7dfb      	ldrb	r3, [r7, #23]
 8012364:	3301      	adds	r3, #1
 8012366:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8012368:	e013      	b.n	8012392 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801236a:	7dfb      	ldrb	r3, [r7, #23]
 801236c:	68ba      	ldr	r2, [r7, #8]
 801236e:	4413      	add	r3, r2
 8012370:	693a      	ldr	r2, [r7, #16]
 8012372:	7812      	ldrb	r2, [r2, #0]
 8012374:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8012376:	693b      	ldr	r3, [r7, #16]
 8012378:	3301      	adds	r3, #1
 801237a:	613b      	str	r3, [r7, #16]
    idx++;
 801237c:	7dfb      	ldrb	r3, [r7, #23]
 801237e:	3301      	adds	r3, #1
 8012380:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8012382:	7dfb      	ldrb	r3, [r7, #23]
 8012384:	68ba      	ldr	r2, [r7, #8]
 8012386:	4413      	add	r3, r2
 8012388:	2200      	movs	r2, #0
 801238a:	701a      	strb	r2, [r3, #0]
    idx++;
 801238c:	7dfb      	ldrb	r3, [r7, #23]
 801238e:	3301      	adds	r3, #1
 8012390:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8012392:	693b      	ldr	r3, [r7, #16]
 8012394:	781b      	ldrb	r3, [r3, #0]
 8012396:	2b00      	cmp	r3, #0
 8012398:	d1e7      	bne.n	801236a <USBD_GetString+0x52>
 801239a:	e000      	b.n	801239e <USBD_GetString+0x86>
    return;
 801239c:	bf00      	nop
  }
}
 801239e:	3718      	adds	r7, #24
 80123a0:	46bd      	mov	sp, r7
 80123a2:	bd80      	pop	{r7, pc}

080123a4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80123a4:	b480      	push	{r7}
 80123a6:	b085      	sub	sp, #20
 80123a8:	af00      	add	r7, sp, #0
 80123aa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80123ac:	2300      	movs	r3, #0
 80123ae:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80123b4:	e005      	b.n	80123c2 <USBD_GetLen+0x1e>
  {
    len++;
 80123b6:	7bfb      	ldrb	r3, [r7, #15]
 80123b8:	3301      	adds	r3, #1
 80123ba:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80123bc:	68bb      	ldr	r3, [r7, #8]
 80123be:	3301      	adds	r3, #1
 80123c0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80123c2:	68bb      	ldr	r3, [r7, #8]
 80123c4:	781b      	ldrb	r3, [r3, #0]
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d1f5      	bne.n	80123b6 <USBD_GetLen+0x12>
  }

  return len;
 80123ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80123cc:	4618      	mov	r0, r3
 80123ce:	3714      	adds	r7, #20
 80123d0:	46bd      	mov	sp, r7
 80123d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123d6:	4770      	bx	lr

080123d8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80123d8:	b580      	push	{r7, lr}
 80123da:	b084      	sub	sp, #16
 80123dc:	af00      	add	r7, sp, #0
 80123de:	60f8      	str	r0, [r7, #12]
 80123e0:	60b9      	str	r1, [r7, #8]
 80123e2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80123e4:	68fb      	ldr	r3, [r7, #12]
 80123e6:	2202      	movs	r2, #2
 80123e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	687a      	ldr	r2, [r7, #4]
 80123f0:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	687a      	ldr	r2, [r7, #4]
 80123f6:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	68ba      	ldr	r2, [r7, #8]
 80123fc:	2100      	movs	r1, #0
 80123fe:	68f8      	ldr	r0, [r7, #12]
 8012400:	f003 fbcb 	bl	8015b9a <USBD_LL_Transmit>

  return USBD_OK;
 8012404:	2300      	movs	r3, #0
}
 8012406:	4618      	mov	r0, r3
 8012408:	3710      	adds	r7, #16
 801240a:	46bd      	mov	sp, r7
 801240c:	bd80      	pop	{r7, pc}

0801240e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801240e:	b580      	push	{r7, lr}
 8012410:	b084      	sub	sp, #16
 8012412:	af00      	add	r7, sp, #0
 8012414:	60f8      	str	r0, [r7, #12]
 8012416:	60b9      	str	r1, [r7, #8]
 8012418:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	68ba      	ldr	r2, [r7, #8]
 801241e:	2100      	movs	r1, #0
 8012420:	68f8      	ldr	r0, [r7, #12]
 8012422:	f003 fbba 	bl	8015b9a <USBD_LL_Transmit>

  return USBD_OK;
 8012426:	2300      	movs	r3, #0
}
 8012428:	4618      	mov	r0, r3
 801242a:	3710      	adds	r7, #16
 801242c:	46bd      	mov	sp, r7
 801242e:	bd80      	pop	{r7, pc}

08012430 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8012430:	b580      	push	{r7, lr}
 8012432:	b084      	sub	sp, #16
 8012434:	af00      	add	r7, sp, #0
 8012436:	60f8      	str	r0, [r7, #12]
 8012438:	60b9      	str	r1, [r7, #8]
 801243a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	2203      	movs	r2, #3
 8012440:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8012444:	68fb      	ldr	r3, [r7, #12]
 8012446:	687a      	ldr	r2, [r7, #4]
 8012448:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 801244c:	68fb      	ldr	r3, [r7, #12]
 801244e:	687a      	ldr	r2, [r7, #4]
 8012450:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	68ba      	ldr	r2, [r7, #8]
 8012458:	2100      	movs	r1, #0
 801245a:	68f8      	ldr	r0, [r7, #12]
 801245c:	f003 fbbe 	bl	8015bdc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012460:	2300      	movs	r3, #0
}
 8012462:	4618      	mov	r0, r3
 8012464:	3710      	adds	r7, #16
 8012466:	46bd      	mov	sp, r7
 8012468:	bd80      	pop	{r7, pc}

0801246a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801246a:	b580      	push	{r7, lr}
 801246c:	b084      	sub	sp, #16
 801246e:	af00      	add	r7, sp, #0
 8012470:	60f8      	str	r0, [r7, #12]
 8012472:	60b9      	str	r1, [r7, #8]
 8012474:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	68ba      	ldr	r2, [r7, #8]
 801247a:	2100      	movs	r1, #0
 801247c:	68f8      	ldr	r0, [r7, #12]
 801247e:	f003 fbad 	bl	8015bdc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012482:	2300      	movs	r3, #0
}
 8012484:	4618      	mov	r0, r3
 8012486:	3710      	adds	r7, #16
 8012488:	46bd      	mov	sp, r7
 801248a:	bd80      	pop	{r7, pc}

0801248c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801248c:	b580      	push	{r7, lr}
 801248e:	b082      	sub	sp, #8
 8012490:	af00      	add	r7, sp, #0
 8012492:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	2204      	movs	r2, #4
 8012498:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801249c:	2300      	movs	r3, #0
 801249e:	2200      	movs	r2, #0
 80124a0:	2100      	movs	r1, #0
 80124a2:	6878      	ldr	r0, [r7, #4]
 80124a4:	f003 fb79 	bl	8015b9a <USBD_LL_Transmit>

  return USBD_OK;
 80124a8:	2300      	movs	r3, #0
}
 80124aa:	4618      	mov	r0, r3
 80124ac:	3708      	adds	r7, #8
 80124ae:	46bd      	mov	sp, r7
 80124b0:	bd80      	pop	{r7, pc}

080124b2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80124b2:	b580      	push	{r7, lr}
 80124b4:	b082      	sub	sp, #8
 80124b6:	af00      	add	r7, sp, #0
 80124b8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	2205      	movs	r2, #5
 80124be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80124c2:	2300      	movs	r3, #0
 80124c4:	2200      	movs	r2, #0
 80124c6:	2100      	movs	r1, #0
 80124c8:	6878      	ldr	r0, [r7, #4]
 80124ca:	f003 fb87 	bl	8015bdc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80124ce:	2300      	movs	r3, #0
}
 80124d0:	4618      	mov	r0, r3
 80124d2:	3708      	adds	r7, #8
 80124d4:	46bd      	mov	sp, r7
 80124d6:	bd80      	pop	{r7, pc}

080124d8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80124d8:	b480      	push	{r7}
 80124da:	b085      	sub	sp, #20
 80124dc:	af00      	add	r7, sp, #0
 80124de:	4603      	mov	r3, r0
 80124e0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80124e2:	2300      	movs	r3, #0
 80124e4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80124e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80124ea:	2b84      	cmp	r3, #132	; 0x84
 80124ec:	d005      	beq.n	80124fa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80124ee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	4413      	add	r3, r2
 80124f6:	3303      	adds	r3, #3
 80124f8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80124fa:	68fb      	ldr	r3, [r7, #12]
}
 80124fc:	4618      	mov	r0, r3
 80124fe:	3714      	adds	r7, #20
 8012500:	46bd      	mov	sp, r7
 8012502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012506:	4770      	bx	lr

08012508 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8012508:	b480      	push	{r7}
 801250a:	b083      	sub	sp, #12
 801250c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801250e:	f3ef 8305 	mrs	r3, IPSR
 8012512:	607b      	str	r3, [r7, #4]
  return(result);
 8012514:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8012516:	2b00      	cmp	r3, #0
 8012518:	bf14      	ite	ne
 801251a:	2301      	movne	r3, #1
 801251c:	2300      	moveq	r3, #0
 801251e:	b2db      	uxtb	r3, r3
}
 8012520:	4618      	mov	r0, r3
 8012522:	370c      	adds	r7, #12
 8012524:	46bd      	mov	sp, r7
 8012526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801252a:	4770      	bx	lr

0801252c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 801252c:	b580      	push	{r7, lr}
 801252e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8012530:	f001 fb4c 	bl	8013bcc <vTaskStartScheduler>
  
  return osOK;
 8012534:	2300      	movs	r3, #0
}
 8012536:	4618      	mov	r0, r3
 8012538:	bd80      	pop	{r7, pc}

0801253a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 801253a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801253c:	b089      	sub	sp, #36	; 0x24
 801253e:	af04      	add	r7, sp, #16
 8012540:	6078      	str	r0, [r7, #4]
 8012542:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	695b      	ldr	r3, [r3, #20]
 8012548:	2b00      	cmp	r3, #0
 801254a:	d020      	beq.n	801258e <osThreadCreate+0x54>
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	699b      	ldr	r3, [r3, #24]
 8012550:	2b00      	cmp	r3, #0
 8012552:	d01c      	beq.n	801258e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	685c      	ldr	r4, [r3, #4]
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	681d      	ldr	r5, [r3, #0]
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	691e      	ldr	r6, [r3, #16]
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012566:	4618      	mov	r0, r3
 8012568:	f7ff ffb6 	bl	80124d8 <makeFreeRtosPriority>
 801256c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	695b      	ldr	r3, [r3, #20]
 8012572:	687a      	ldr	r2, [r7, #4]
 8012574:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012576:	9202      	str	r2, [sp, #8]
 8012578:	9301      	str	r3, [sp, #4]
 801257a:	9100      	str	r1, [sp, #0]
 801257c:	683b      	ldr	r3, [r7, #0]
 801257e:	4632      	mov	r2, r6
 8012580:	4629      	mov	r1, r5
 8012582:	4620      	mov	r0, r4
 8012584:	f001 f95a 	bl	801383c <xTaskCreateStatic>
 8012588:	4603      	mov	r3, r0
 801258a:	60fb      	str	r3, [r7, #12]
 801258c:	e01c      	b.n	80125c8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	685c      	ldr	r4, [r3, #4]
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801259a:	b29e      	uxth	r6, r3
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80125a2:	4618      	mov	r0, r3
 80125a4:	f7ff ff98 	bl	80124d8 <makeFreeRtosPriority>
 80125a8:	4602      	mov	r2, r0
 80125aa:	f107 030c 	add.w	r3, r7, #12
 80125ae:	9301      	str	r3, [sp, #4]
 80125b0:	9200      	str	r2, [sp, #0]
 80125b2:	683b      	ldr	r3, [r7, #0]
 80125b4:	4632      	mov	r2, r6
 80125b6:	4629      	mov	r1, r5
 80125b8:	4620      	mov	r0, r4
 80125ba:	f001 f99c 	bl	80138f6 <xTaskCreate>
 80125be:	4603      	mov	r3, r0
 80125c0:	2b01      	cmp	r3, #1
 80125c2:	d001      	beq.n	80125c8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80125c4:	2300      	movs	r3, #0
 80125c6:	e000      	b.n	80125ca <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80125c8:	68fb      	ldr	r3, [r7, #12]
}
 80125ca:	4618      	mov	r0, r3
 80125cc:	3714      	adds	r7, #20
 80125ce:	46bd      	mov	sp, r7
 80125d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080125d2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80125d2:	b580      	push	{r7, lr}
 80125d4:	b084      	sub	sp, #16
 80125d6:	af00      	add	r7, sp, #0
 80125d8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d001      	beq.n	80125e8 <osDelay+0x16>
 80125e4:	68fb      	ldr	r3, [r7, #12]
 80125e6:	e000      	b.n	80125ea <osDelay+0x18>
 80125e8:	2301      	movs	r3, #1
 80125ea:	4618      	mov	r0, r3
 80125ec:	f001 faba 	bl	8013b64 <vTaskDelay>
  
  return osOK;
 80125f0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80125f2:	4618      	mov	r0, r3
 80125f4:	3710      	adds	r7, #16
 80125f6:	46bd      	mov	sp, r7
 80125f8:	bd80      	pop	{r7, pc}
	...

080125fc <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 80125fc:	b580      	push	{r7, lr}
 80125fe:	b086      	sub	sp, #24
 8012600:	af02      	add	r7, sp, #8
 8012602:	6078      	str	r0, [r7, #4]
 8012604:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8012606:	2300      	movs	r3, #0
 8012608:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 801260a:	2300      	movs	r3, #0
 801260c:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 801260e:	f7ff ff7b 	bl	8012508 <inHandlerMode>
 8012612:	4603      	mov	r3, r0
 8012614:	2b00      	cmp	r3, #0
 8012616:	d01c      	beq.n	8012652 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8012618:	6839      	ldr	r1, [r7, #0]
 801261a:	f107 0208 	add.w	r2, r7, #8
 801261e:	f107 030c 	add.w	r3, r7, #12
 8012622:	9300      	str	r3, [sp, #0]
 8012624:	4613      	mov	r3, r2
 8012626:	2201      	movs	r2, #1
 8012628:	6878      	ldr	r0, [r7, #4]
 801262a:	f002 f881 	bl	8014730 <xTaskGenericNotifyFromISR>
 801262e:	4603      	mov	r3, r0
 8012630:	2b01      	cmp	r3, #1
 8012632:	d002      	beq.n	801263a <osSignalSet+0x3e>
      return 0x80000000;
 8012634:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012638:	e019      	b.n	801266e <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	2b00      	cmp	r3, #0
 801263e:	d015      	beq.n	801266c <osSignalSet+0x70>
 8012640:	4b0d      	ldr	r3, [pc, #52]	; (8012678 <osSignalSet+0x7c>)
 8012642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012646:	601a      	str	r2, [r3, #0]
 8012648:	f3bf 8f4f 	dsb	sy
 801264c:	f3bf 8f6f 	isb	sy
 8012650:	e00c      	b.n	801266c <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8012652:	6839      	ldr	r1, [r7, #0]
 8012654:	f107 0308 	add.w	r3, r7, #8
 8012658:	2201      	movs	r2, #1
 801265a:	6878      	ldr	r0, [r7, #4]
 801265c:	f001 ffb2 	bl	80145c4 <xTaskGenericNotify>
 8012660:	4603      	mov	r3, r0
 8012662:	2b01      	cmp	r3, #1
 8012664:	d002      	beq.n	801266c <osSignalSet+0x70>
    return 0x80000000;
 8012666:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801266a:	e000      	b.n	801266e <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 801266c:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 801266e:	4618      	mov	r0, r3
 8012670:	3710      	adds	r7, #16
 8012672:	46bd      	mov	sp, r7
 8012674:	bd80      	pop	{r7, pc}
 8012676:	bf00      	nop
 8012678:	e000ed04 	.word	0xe000ed04

0801267c <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 801267c:	b590      	push	{r4, r7, lr}
 801267e:	b089      	sub	sp, #36	; 0x24
 8012680:	af00      	add	r7, sp, #0
 8012682:	60f8      	str	r0, [r7, #12]
 8012684:	60b9      	str	r1, [r7, #8]
 8012686:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8012688:	2300      	movs	r3, #0
 801268a:	617b      	str	r3, [r7, #20]
  ticks = 0;
 801268c:	2300      	movs	r3, #0
 801268e:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012696:	d103      	bne.n	80126a0 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8012698:	f04f 33ff 	mov.w	r3, #4294967295
 801269c:	61fb      	str	r3, [r7, #28]
 801269e:	e009      	b.n	80126b4 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d006      	beq.n	80126b4 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 80126aa:	69fb      	ldr	r3, [r7, #28]
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d101      	bne.n	80126b4 <osSignalWait+0x38>
      ticks = 1;
 80126b0:	2301      	movs	r3, #1
 80126b2:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 80126b4:	f7ff ff28 	bl	8012508 <inHandlerMode>
 80126b8:	4603      	mov	r3, r0
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d002      	beq.n	80126c4 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 80126be:	2382      	movs	r3, #130	; 0x82
 80126c0:	613b      	str	r3, [r7, #16]
 80126c2:	e01b      	b.n	80126fc <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 80126c4:	68b9      	ldr	r1, [r7, #8]
 80126c6:	f107 0310 	add.w	r3, r7, #16
 80126ca:	1d1a      	adds	r2, r3, #4
 80126cc:	69fb      	ldr	r3, [r7, #28]
 80126ce:	2000      	movs	r0, #0
 80126d0:	f001 ff1e 	bl	8014510 <xTaskNotifyWait>
 80126d4:	4603      	mov	r3, r0
 80126d6:	2b01      	cmp	r3, #1
 80126d8:	d008      	beq.n	80126ec <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 80126da:	69fb      	ldr	r3, [r7, #28]
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d102      	bne.n	80126e6 <osSignalWait+0x6a>
 80126e0:	2300      	movs	r3, #0
 80126e2:	613b      	str	r3, [r7, #16]
 80126e4:	e00a      	b.n	80126fc <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 80126e6:	2340      	movs	r3, #64	; 0x40
 80126e8:	613b      	str	r3, [r7, #16]
 80126ea:	e007      	b.n	80126fc <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 80126ec:	697b      	ldr	r3, [r7, #20]
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	da02      	bge.n	80126f8 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 80126f2:	2386      	movs	r3, #134	; 0x86
 80126f4:	613b      	str	r3, [r7, #16]
 80126f6:	e001      	b.n	80126fc <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 80126f8:	2308      	movs	r3, #8
 80126fa:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 80126fc:	68fb      	ldr	r3, [r7, #12]
 80126fe:	461c      	mov	r4, r3
 8012700:	f107 0310 	add.w	r3, r7, #16
 8012704:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012708:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 801270c:	68f8      	ldr	r0, [r7, #12]
 801270e:	3724      	adds	r7, #36	; 0x24
 8012710:	46bd      	mov	sp, r7
 8012712:	bd90      	pop	{r4, r7, pc}

08012714 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8012714:	b580      	push	{r7, lr}
 8012716:	b082      	sub	sp, #8
 8012718:	af00      	add	r7, sp, #0
 801271a:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	685b      	ldr	r3, [r3, #4]
 8012720:	2b00      	cmp	r3, #0
 8012722:	d007      	beq.n	8012734 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	685b      	ldr	r3, [r3, #4]
 8012728:	4619      	mov	r1, r3
 801272a:	2001      	movs	r0, #1
 801272c:	f000 fc65 	bl	8012ffa <xQueueCreateMutexStatic>
 8012730:	4603      	mov	r3, r0
 8012732:	e003      	b.n	801273c <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8012734:	2001      	movs	r0, #1
 8012736:	f000 fc48 	bl	8012fca <xQueueCreateMutex>
 801273a:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 801273c:	4618      	mov	r0, r3
 801273e:	3708      	adds	r7, #8
 8012740:	46bd      	mov	sp, r7
 8012742:	bd80      	pop	{r7, pc}

08012744 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8012744:	b580      	push	{r7, lr}
 8012746:	b086      	sub	sp, #24
 8012748:	af00      	add	r7, sp, #0
 801274a:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	685b      	ldr	r3, [r3, #4]
 8012750:	3303      	adds	r3, #3
 8012752:	f023 0303 	bic.w	r3, r3, #3
 8012756:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8012758:	2014      	movs	r0, #20
 801275a:	f002 fb75 	bl	8014e48 <pvPortMalloc>
 801275e:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8012760:	697b      	ldr	r3, [r7, #20]
 8012762:	2b00      	cmp	r3, #0
 8012764:	d046      	beq.n	80127f4 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	681a      	ldr	r2, [r3, #0]
 801276a:	697b      	ldr	r3, [r7, #20]
 801276c:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 801276e:	68fa      	ldr	r2, [r7, #12]
 8012770:	697b      	ldr	r3, [r7, #20]
 8012772:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8012774:	697b      	ldr	r3, [r7, #20]
 8012776:	2200      	movs	r2, #0
 8012778:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	4618      	mov	r0, r3
 8012780:	f002 fb62 	bl	8014e48 <pvPortMalloc>
 8012784:	4602      	mov	r2, r0
 8012786:	697b      	ldr	r3, [r7, #20]
 8012788:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 801278a:	697b      	ldr	r3, [r7, #20]
 801278c:	685b      	ldr	r3, [r3, #4]
 801278e:	2b00      	cmp	r3, #0
 8012790:	d02b      	beq.n	80127ea <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	68fa      	ldr	r2, [r7, #12]
 8012798:	fb02 f303 	mul.w	r3, r2, r3
 801279c:	4618      	mov	r0, r3
 801279e:	f002 fb53 	bl	8014e48 <pvPortMalloc>
 80127a2:	4602      	mov	r2, r0
 80127a4:	697b      	ldr	r3, [r7, #20]
 80127a6:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 80127a8:	697b      	ldr	r3, [r7, #20]
 80127aa:	681b      	ldr	r3, [r3, #0]
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d011      	beq.n	80127d4 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 80127b0:	2300      	movs	r3, #0
 80127b2:	613b      	str	r3, [r7, #16]
 80127b4:	e008      	b.n	80127c8 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 80127b6:	697b      	ldr	r3, [r7, #20]
 80127b8:	685a      	ldr	r2, [r3, #4]
 80127ba:	693b      	ldr	r3, [r7, #16]
 80127bc:	4413      	add	r3, r2
 80127be:	2200      	movs	r2, #0
 80127c0:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 80127c2:	693b      	ldr	r3, [r7, #16]
 80127c4:	3301      	adds	r3, #1
 80127c6:	613b      	str	r3, [r7, #16]
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	693a      	ldr	r2, [r7, #16]
 80127ce:	429a      	cmp	r2, r3
 80127d0:	d3f1      	bcc.n	80127b6 <osPoolCreate+0x72>
 80127d2:	e00f      	b.n	80127f4 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 80127d4:	697b      	ldr	r3, [r7, #20]
 80127d6:	685b      	ldr	r3, [r3, #4]
 80127d8:	4618      	mov	r0, r3
 80127da:	f002 fbf9 	bl	8014fd0 <vPortFree>
        vPortFree(thePool);
 80127de:	6978      	ldr	r0, [r7, #20]
 80127e0:	f002 fbf6 	bl	8014fd0 <vPortFree>
        thePool = NULL;
 80127e4:	2300      	movs	r3, #0
 80127e6:	617b      	str	r3, [r7, #20]
 80127e8:	e004      	b.n	80127f4 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 80127ea:	6978      	ldr	r0, [r7, #20]
 80127ec:	f002 fbf0 	bl	8014fd0 <vPortFree>
      thePool = NULL;
 80127f0:	2300      	movs	r3, #0
 80127f2:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 80127f4:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 80127f6:	4618      	mov	r0, r3
 80127f8:	3718      	adds	r7, #24
 80127fa:	46bd      	mov	sp, r7
 80127fc:	bd80      	pop	{r7, pc}

080127fe <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 80127fe:	b580      	push	{r7, lr}
 8012800:	b08a      	sub	sp, #40	; 0x28
 8012802:	af00      	add	r7, sp, #0
 8012804:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8012806:	2300      	movs	r3, #0
 8012808:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 801280a:	2300      	movs	r3, #0
 801280c:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 801280e:	f7ff fe7b 	bl	8012508 <inHandlerMode>
 8012812:	4603      	mov	r3, r0
 8012814:	2b00      	cmp	r3, #0
 8012816:	d00e      	beq.n	8012836 <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8012818:	f3ef 8211 	mrs	r2, BASEPRI
 801281c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012820:	f383 8811 	msr	BASEPRI, r3
 8012824:	f3bf 8f6f 	isb	sy
 8012828:	f3bf 8f4f 	dsb	sy
 801282c:	617a      	str	r2, [r7, #20]
 801282e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8012830:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8012832:	627b      	str	r3, [r7, #36]	; 0x24
 8012834:	e001      	b.n	801283a <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8012836:	f002 f9e5 	bl	8014c04 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 801283a:	2300      	movs	r3, #0
 801283c:	61fb      	str	r3, [r7, #28]
 801283e:	e029      	b.n	8012894 <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	691a      	ldr	r2, [r3, #16]
 8012844:	69fb      	ldr	r3, [r7, #28]
 8012846:	4413      	add	r3, r2
 8012848:	687a      	ldr	r2, [r7, #4]
 801284a:	6892      	ldr	r2, [r2, #8]
 801284c:	fbb3 f1f2 	udiv	r1, r3, r2
 8012850:	fb02 f201 	mul.w	r2, r2, r1
 8012854:	1a9b      	subs	r3, r3, r2
 8012856:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	685a      	ldr	r2, [r3, #4]
 801285c:	69bb      	ldr	r3, [r7, #24]
 801285e:	4413      	add	r3, r2
 8012860:	781b      	ldrb	r3, [r3, #0]
 8012862:	2b00      	cmp	r3, #0
 8012864:	d113      	bne.n	801288e <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	685a      	ldr	r2, [r3, #4]
 801286a:	69bb      	ldr	r3, [r7, #24]
 801286c:	4413      	add	r3, r2
 801286e:	2201      	movs	r2, #1
 8012870:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	4619      	mov	r1, r3
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	68db      	ldr	r3, [r3, #12]
 801287c:	69ba      	ldr	r2, [r7, #24]
 801287e:	fb02 f303 	mul.w	r3, r2, r3
 8012882:	440b      	add	r3, r1
 8012884:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	69ba      	ldr	r2, [r7, #24]
 801288a:	611a      	str	r2, [r3, #16]
      break;
 801288c:	e007      	b.n	801289e <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 801288e:	69fb      	ldr	r3, [r7, #28]
 8012890:	3301      	adds	r3, #1
 8012892:	61fb      	str	r3, [r7, #28]
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	689b      	ldr	r3, [r3, #8]
 8012898:	69fa      	ldr	r2, [r7, #28]
 801289a:	429a      	cmp	r2, r3
 801289c:	d3d0      	bcc.n	8012840 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 801289e:	f7ff fe33 	bl	8012508 <inHandlerMode>
 80128a2:	4603      	mov	r3, r0
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d005      	beq.n	80128b4 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 80128a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128aa:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80128ac:	68fb      	ldr	r3, [r7, #12]
 80128ae:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80128b2:	e001      	b.n	80128b8 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 80128b4:	f002 f9d6 	bl	8014c64 <vPortExitCritical>
  }
  
  return p;
 80128b8:	6a3b      	ldr	r3, [r7, #32]
}
 80128ba:	4618      	mov	r0, r3
 80128bc:	3728      	adds	r7, #40	; 0x28
 80128be:	46bd      	mov	sp, r7
 80128c0:	bd80      	pop	{r7, pc}

080128c2 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 80128c2:	b480      	push	{r7}
 80128c4:	b085      	sub	sp, #20
 80128c6:	af00      	add	r7, sp, #0
 80128c8:	6078      	str	r0, [r7, #4]
 80128ca:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d101      	bne.n	80128d6 <osPoolFree+0x14>
    return osErrorParameter;
 80128d2:	2380      	movs	r3, #128	; 0x80
 80128d4:	e030      	b.n	8012938 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 80128d6:	683b      	ldr	r3, [r7, #0]
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d101      	bne.n	80128e0 <osPoolFree+0x1e>
    return osErrorParameter;
 80128dc:	2380      	movs	r3, #128	; 0x80
 80128de:	e02b      	b.n	8012938 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	683a      	ldr	r2, [r7, #0]
 80128e6:	429a      	cmp	r2, r3
 80128e8:	d201      	bcs.n	80128ee <osPoolFree+0x2c>
    return osErrorParameter;
 80128ea:	2380      	movs	r3, #128	; 0x80
 80128ec:	e024      	b.n	8012938 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 80128ee:	683b      	ldr	r3, [r7, #0]
 80128f0:	687a      	ldr	r2, [r7, #4]
 80128f2:	6812      	ldr	r2, [r2, #0]
 80128f4:	1a9b      	subs	r3, r3, r2
 80128f6:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	68da      	ldr	r2, [r3, #12]
 80128fc:	68fb      	ldr	r3, [r7, #12]
 80128fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8012902:	fb02 f201 	mul.w	r2, r2, r1
 8012906:	1a9b      	subs	r3, r3, r2
 8012908:	2b00      	cmp	r3, #0
 801290a:	d001      	beq.n	8012910 <osPoolFree+0x4e>
    return osErrorParameter;
 801290c:	2380      	movs	r3, #128	; 0x80
 801290e:	e013      	b.n	8012938 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	68db      	ldr	r3, [r3, #12]
 8012914:	68fa      	ldr	r2, [r7, #12]
 8012916:	fbb2 f3f3 	udiv	r3, r2, r3
 801291a:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	689b      	ldr	r3, [r3, #8]
 8012920:	68fa      	ldr	r2, [r7, #12]
 8012922:	429a      	cmp	r2, r3
 8012924:	d301      	bcc.n	801292a <osPoolFree+0x68>
    return osErrorParameter;
 8012926:	2380      	movs	r3, #128	; 0x80
 8012928:	e006      	b.n	8012938 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	685a      	ldr	r2, [r3, #4]
 801292e:	68fb      	ldr	r3, [r7, #12]
 8012930:	4413      	add	r3, r2
 8012932:	2200      	movs	r2, #0
 8012934:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 8012936:	2300      	movs	r3, #0
}
 8012938:	4618      	mov	r0, r3
 801293a:	3714      	adds	r7, #20
 801293c:	46bd      	mov	sp, r7
 801293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012942:	4770      	bx	lr

08012944 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8012944:	b590      	push	{r4, r7, lr}
 8012946:	b087      	sub	sp, #28
 8012948:	af00      	add	r7, sp, #0
 801294a:	6078      	str	r0, [r7, #4]
 801294c:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	681b      	ldr	r3, [r3, #0]
 8012952:	60fb      	str	r3, [r7, #12]
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	685b      	ldr	r3, [r3, #4]
 8012958:	613b      	str	r3, [r7, #16]
 801295a:	2300      	movs	r3, #0
 801295c:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	689c      	ldr	r4, [r3, #8]
 8012962:	200c      	movs	r0, #12
 8012964:	f002 fa70 	bl	8014e48 <pvPortMalloc>
 8012968:	4603      	mov	r3, r0
 801296a:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	689b      	ldr	r3, [r3, #8]
 8012970:	681b      	ldr	r3, [r3, #0]
 8012972:	2b00      	cmp	r3, #0
 8012974:	d101      	bne.n	801297a <osMailCreate+0x36>
    return NULL;
 8012976:	2300      	movs	r3, #0
 8012978:	e038      	b.n	80129ec <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	689b      	ldr	r3, [r3, #8]
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	687a      	ldr	r2, [r7, #4]
 8012982:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	6818      	ldr	r0, [r3, #0]
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	689b      	ldr	r3, [r3, #8]
 801298c:	681c      	ldr	r4, [r3, #0]
 801298e:	2200      	movs	r2, #0
 8012990:	2104      	movs	r1, #4
 8012992:	f000 faa1 	bl	8012ed8 <xQueueGenericCreate>
 8012996:	4603      	mov	r3, r0
 8012998:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	689b      	ldr	r3, [r3, #8]
 801299e:	681b      	ldr	r3, [r3, #0]
 80129a0:	685b      	ldr	r3, [r3, #4]
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d107      	bne.n	80129b6 <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	689b      	ldr	r3, [r3, #8]
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	4618      	mov	r0, r3
 80129ae:	f002 fb0f 	bl	8014fd0 <vPortFree>
    return NULL;
 80129b2:	2300      	movs	r3, #0
 80129b4:	e01a      	b.n	80129ec <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	689b      	ldr	r3, [r3, #8]
 80129ba:	681c      	ldr	r4, [r3, #0]
 80129bc:	f107 030c 	add.w	r3, r7, #12
 80129c0:	4618      	mov	r0, r3
 80129c2:	f7ff febf 	bl	8012744 <osPoolCreate>
 80129c6:	4603      	mov	r3, r0
 80129c8:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	689b      	ldr	r3, [r3, #8]
 80129ce:	681b      	ldr	r3, [r3, #0]
 80129d0:	689b      	ldr	r3, [r3, #8]
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d107      	bne.n	80129e6 <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	689b      	ldr	r3, [r3, #8]
 80129da:	681b      	ldr	r3, [r3, #0]
 80129dc:	4618      	mov	r0, r3
 80129de:	f002 faf7 	bl	8014fd0 <vPortFree>
    return NULL;
 80129e2:	2300      	movs	r3, #0
 80129e4:	e002      	b.n	80129ec <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	689b      	ldr	r3, [r3, #8]
 80129ea:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 80129ec:	4618      	mov	r0, r3
 80129ee:	371c      	adds	r7, #28
 80129f0:	46bd      	mov	sp, r7
 80129f2:	bd90      	pop	{r4, r7, pc}

080129f4 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 80129f4:	b580      	push	{r7, lr}
 80129f6:	b084      	sub	sp, #16
 80129f8:	af00      	add	r7, sp, #0
 80129fa:	6078      	str	r0, [r7, #4]
 80129fc:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d101      	bne.n	8012a08 <osMailAlloc+0x14>
    return NULL;
 8012a04:	2300      	movs	r3, #0
 8012a06:	e006      	b.n	8012a16 <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	689b      	ldr	r3, [r3, #8]
 8012a0c:	4618      	mov	r0, r3
 8012a0e:	f7ff fef6 	bl	80127fe <osPoolAlloc>
 8012a12:	60f8      	str	r0, [r7, #12]
  
  return p;
 8012a14:	68fb      	ldr	r3, [r7, #12]
}
 8012a16:	4618      	mov	r0, r3
 8012a18:	3710      	adds	r7, #16
 8012a1a:	46bd      	mov	sp, r7
 8012a1c:	bd80      	pop	{r7, pc}
	...

08012a20 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8012a20:	b580      	push	{r7, lr}
 8012a22:	b084      	sub	sp, #16
 8012a24:	af00      	add	r7, sp, #0
 8012a26:	6078      	str	r0, [r7, #4]
 8012a28:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d101      	bne.n	8012a34 <osMailPut+0x14>
    return osErrorParameter;
 8012a30:	2380      	movs	r3, #128	; 0x80
 8012a32:	e02c      	b.n	8012a8e <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 8012a34:	2300      	movs	r3, #0
 8012a36:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 8012a38:	f7ff fd66 	bl	8012508 <inHandlerMode>
 8012a3c:	4603      	mov	r3, r0
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d018      	beq.n	8012a74 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	6858      	ldr	r0, [r3, #4]
 8012a46:	f107 020c 	add.w	r2, r7, #12
 8012a4a:	4639      	mov	r1, r7
 8012a4c:	2300      	movs	r3, #0
 8012a4e:	f000 fbed 	bl	801322c <xQueueGenericSendFromISR>
 8012a52:	4603      	mov	r3, r0
 8012a54:	2b01      	cmp	r3, #1
 8012a56:	d001      	beq.n	8012a5c <osMailPut+0x3c>
      return osErrorOS;
 8012a58:	23ff      	movs	r3, #255	; 0xff
 8012a5a:	e018      	b.n	8012a8e <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012a5c:	68fb      	ldr	r3, [r7, #12]
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d014      	beq.n	8012a8c <osMailPut+0x6c>
 8012a62:	4b0d      	ldr	r3, [pc, #52]	; (8012a98 <osMailPut+0x78>)
 8012a64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a68:	601a      	str	r2, [r3, #0]
 8012a6a:	f3bf 8f4f 	dsb	sy
 8012a6e:	f3bf 8f6f 	isb	sy
 8012a72:	e00b      	b.n	8012a8c <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	6858      	ldr	r0, [r3, #4]
 8012a78:	4639      	mov	r1, r7
 8012a7a:	2300      	movs	r3, #0
 8012a7c:	2200      	movs	r2, #0
 8012a7e:	f000 fad7 	bl	8013030 <xQueueGenericSend>
 8012a82:	4603      	mov	r3, r0
 8012a84:	2b01      	cmp	r3, #1
 8012a86:	d001      	beq.n	8012a8c <osMailPut+0x6c>
      return osErrorOS;
 8012a88:	23ff      	movs	r3, #255	; 0xff
 8012a8a:	e000      	b.n	8012a8e <osMailPut+0x6e>
    }
  }
  
  return osOK;
 8012a8c:	2300      	movs	r3, #0
}
 8012a8e:	4618      	mov	r0, r3
 8012a90:	3710      	adds	r7, #16
 8012a92:	46bd      	mov	sp, r7
 8012a94:	bd80      	pop	{r7, pc}
 8012a96:	bf00      	nop
 8012a98:	e000ed04 	.word	0xe000ed04

08012a9c <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 8012a9c:	b590      	push	{r4, r7, lr}
 8012a9e:	b08b      	sub	sp, #44	; 0x2c
 8012aa0:	af00      	add	r7, sp, #0
 8012aa2:	60f8      	str	r0, [r7, #12]
 8012aa4:	60b9      	str	r1, [r7, #8]
 8012aa6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 8012aa8:	68bb      	ldr	r3, [r7, #8]
 8012aaa:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 8012aac:	68bb      	ldr	r3, [r7, #8]
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d10a      	bne.n	8012ac8 <osMailGet+0x2c>
    event.status = osErrorParameter;
 8012ab2:	2380      	movs	r3, #128	; 0x80
 8012ab4:	617b      	str	r3, [r7, #20]
    return event;
 8012ab6:	68fb      	ldr	r3, [r7, #12]
 8012ab8:	461c      	mov	r4, r3
 8012aba:	f107 0314 	add.w	r3, r7, #20
 8012abe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012ac2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012ac6:	e056      	b.n	8012b76 <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8012ac8:	2300      	movs	r3, #0
 8012aca:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8012acc:	2300      	movs	r3, #0
 8012ace:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ad6:	d103      	bne.n	8012ae0 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 8012ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8012adc:	627b      	str	r3, [r7, #36]	; 0x24
 8012ade:	e009      	b.n	8012af4 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	d006      	beq.n	8012af4 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8012aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d101      	bne.n	8012af4 <osMailGet+0x58>
      ticks = 1;
 8012af0:	2301      	movs	r3, #1
 8012af2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8012af4:	f7ff fd08 	bl	8012508 <inHandlerMode>
 8012af8:	4603      	mov	r3, r0
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d01d      	beq.n	8012b3a <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8012afe:	68bb      	ldr	r3, [r7, #8]
 8012b00:	6858      	ldr	r0, [r3, #4]
 8012b02:	f107 0220 	add.w	r2, r7, #32
 8012b06:	f107 0314 	add.w	r3, r7, #20
 8012b0a:	3304      	adds	r3, #4
 8012b0c:	4619      	mov	r1, r3
 8012b0e:	f000 fd05 	bl	801351c <xQueueReceiveFromISR>
 8012b12:	4603      	mov	r3, r0
 8012b14:	2b01      	cmp	r3, #1
 8012b16:	d102      	bne.n	8012b1e <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 8012b18:	2320      	movs	r3, #32
 8012b1a:	617b      	str	r3, [r7, #20]
 8012b1c:	e001      	b.n	8012b22 <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 8012b1e:	2300      	movs	r3, #0
 8012b20:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012b22:	6a3b      	ldr	r3, [r7, #32]
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d01e      	beq.n	8012b66 <osMailGet+0xca>
 8012b28:	4b15      	ldr	r3, [pc, #84]	; (8012b80 <osMailGet+0xe4>)
 8012b2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012b2e:	601a      	str	r2, [r3, #0]
 8012b30:	f3bf 8f4f 	dsb	sy
 8012b34:	f3bf 8f6f 	isb	sy
 8012b38:	e015      	b.n	8012b66 <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8012b3a:	68bb      	ldr	r3, [r7, #8]
 8012b3c:	6858      	ldr	r0, [r3, #4]
 8012b3e:	f107 0314 	add.w	r3, r7, #20
 8012b42:	3304      	adds	r3, #4
 8012b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b46:	4619      	mov	r1, r3
 8012b48:	f000 fc08 	bl	801335c <xQueueReceive>
 8012b4c:	4603      	mov	r3, r0
 8012b4e:	2b01      	cmp	r3, #1
 8012b50:	d102      	bne.n	8012b58 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 8012b52:	2320      	movs	r3, #32
 8012b54:	617b      	str	r3, [r7, #20]
 8012b56:	e006      	b.n	8012b66 <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8012b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d101      	bne.n	8012b62 <osMailGet+0xc6>
 8012b5e:	2300      	movs	r3, #0
 8012b60:	e000      	b.n	8012b64 <osMailGet+0xc8>
 8012b62:	2340      	movs	r3, #64	; 0x40
 8012b64:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8012b66:	68fb      	ldr	r3, [r7, #12]
 8012b68:	461c      	mov	r4, r3
 8012b6a:	f107 0314 	add.w	r3, r7, #20
 8012b6e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012b72:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8012b76:	68f8      	ldr	r0, [r7, #12]
 8012b78:	372c      	adds	r7, #44	; 0x2c
 8012b7a:	46bd      	mov	sp, r7
 8012b7c:	bd90      	pop	{r4, r7, pc}
 8012b7e:	bf00      	nop
 8012b80:	e000ed04 	.word	0xe000ed04

08012b84 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 8012b84:	b580      	push	{r7, lr}
 8012b86:	b082      	sub	sp, #8
 8012b88:	af00      	add	r7, sp, #0
 8012b8a:	6078      	str	r0, [r7, #4]
 8012b8c:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d101      	bne.n	8012b98 <osMailFree+0x14>
    return osErrorParameter;
 8012b94:	2380      	movs	r3, #128	; 0x80
 8012b96:	e006      	b.n	8012ba6 <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	689b      	ldr	r3, [r3, #8]
 8012b9c:	6839      	ldr	r1, [r7, #0]
 8012b9e:	4618      	mov	r0, r3
 8012ba0:	f7ff fe8f 	bl	80128c2 <osPoolFree>
 8012ba4:	4603      	mov	r3, r0
}
 8012ba6:	4618      	mov	r0, r3
 8012ba8:	3708      	adds	r7, #8
 8012baa:	46bd      	mov	sp, r7
 8012bac:	bd80      	pop	{r7, pc}

08012bae <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012bae:	b480      	push	{r7}
 8012bb0:	b083      	sub	sp, #12
 8012bb2:	af00      	add	r7, sp, #0
 8012bb4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	f103 0208 	add.w	r2, r3, #8
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	f04f 32ff 	mov.w	r2, #4294967295
 8012bc6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	f103 0208 	add.w	r2, r3, #8
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	f103 0208 	add.w	r2, r3, #8
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	2200      	movs	r2, #0
 8012be0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012be2:	bf00      	nop
 8012be4:	370c      	adds	r7, #12
 8012be6:	46bd      	mov	sp, r7
 8012be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bec:	4770      	bx	lr

08012bee <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012bee:	b480      	push	{r7}
 8012bf0:	b083      	sub	sp, #12
 8012bf2:	af00      	add	r7, sp, #0
 8012bf4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	2200      	movs	r2, #0
 8012bfa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012bfc:	bf00      	nop
 8012bfe:	370c      	adds	r7, #12
 8012c00:	46bd      	mov	sp, r7
 8012c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c06:	4770      	bx	lr

08012c08 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012c08:	b480      	push	{r7}
 8012c0a:	b085      	sub	sp, #20
 8012c0c:	af00      	add	r7, sp, #0
 8012c0e:	6078      	str	r0, [r7, #4]
 8012c10:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	685b      	ldr	r3, [r3, #4]
 8012c16:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012c18:	683b      	ldr	r3, [r7, #0]
 8012c1a:	68fa      	ldr	r2, [r7, #12]
 8012c1c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012c1e:	68fb      	ldr	r3, [r7, #12]
 8012c20:	689a      	ldr	r2, [r3, #8]
 8012c22:	683b      	ldr	r3, [r7, #0]
 8012c24:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	689b      	ldr	r3, [r3, #8]
 8012c2a:	683a      	ldr	r2, [r7, #0]
 8012c2c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012c2e:	68fb      	ldr	r3, [r7, #12]
 8012c30:	683a      	ldr	r2, [r7, #0]
 8012c32:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012c34:	683b      	ldr	r3, [r7, #0]
 8012c36:	687a      	ldr	r2, [r7, #4]
 8012c38:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	1c5a      	adds	r2, r3, #1
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	601a      	str	r2, [r3, #0]
}
 8012c44:	bf00      	nop
 8012c46:	3714      	adds	r7, #20
 8012c48:	46bd      	mov	sp, r7
 8012c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c4e:	4770      	bx	lr

08012c50 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012c50:	b480      	push	{r7}
 8012c52:	b085      	sub	sp, #20
 8012c54:	af00      	add	r7, sp, #0
 8012c56:	6078      	str	r0, [r7, #4]
 8012c58:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012c5a:	683b      	ldr	r3, [r7, #0]
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012c60:	68bb      	ldr	r3, [r7, #8]
 8012c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c66:	d103      	bne.n	8012c70 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	691b      	ldr	r3, [r3, #16]
 8012c6c:	60fb      	str	r3, [r7, #12]
 8012c6e:	e00c      	b.n	8012c8a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	3308      	adds	r3, #8
 8012c74:	60fb      	str	r3, [r7, #12]
 8012c76:	e002      	b.n	8012c7e <vListInsert+0x2e>
 8012c78:	68fb      	ldr	r3, [r7, #12]
 8012c7a:	685b      	ldr	r3, [r3, #4]
 8012c7c:	60fb      	str	r3, [r7, #12]
 8012c7e:	68fb      	ldr	r3, [r7, #12]
 8012c80:	685b      	ldr	r3, [r3, #4]
 8012c82:	681b      	ldr	r3, [r3, #0]
 8012c84:	68ba      	ldr	r2, [r7, #8]
 8012c86:	429a      	cmp	r2, r3
 8012c88:	d2f6      	bcs.n	8012c78 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012c8a:	68fb      	ldr	r3, [r7, #12]
 8012c8c:	685a      	ldr	r2, [r3, #4]
 8012c8e:	683b      	ldr	r3, [r7, #0]
 8012c90:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012c92:	683b      	ldr	r3, [r7, #0]
 8012c94:	685b      	ldr	r3, [r3, #4]
 8012c96:	683a      	ldr	r2, [r7, #0]
 8012c98:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012c9a:	683b      	ldr	r3, [r7, #0]
 8012c9c:	68fa      	ldr	r2, [r7, #12]
 8012c9e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012ca0:	68fb      	ldr	r3, [r7, #12]
 8012ca2:	683a      	ldr	r2, [r7, #0]
 8012ca4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012ca6:	683b      	ldr	r3, [r7, #0]
 8012ca8:	687a      	ldr	r2, [r7, #4]
 8012caa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	681b      	ldr	r3, [r3, #0]
 8012cb0:	1c5a      	adds	r2, r3, #1
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	601a      	str	r2, [r3, #0]
}
 8012cb6:	bf00      	nop
 8012cb8:	3714      	adds	r7, #20
 8012cba:	46bd      	mov	sp, r7
 8012cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cc0:	4770      	bx	lr

08012cc2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012cc2:	b480      	push	{r7}
 8012cc4:	b085      	sub	sp, #20
 8012cc6:	af00      	add	r7, sp, #0
 8012cc8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	691b      	ldr	r3, [r3, #16]
 8012cce:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	685b      	ldr	r3, [r3, #4]
 8012cd4:	687a      	ldr	r2, [r7, #4]
 8012cd6:	6892      	ldr	r2, [r2, #8]
 8012cd8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	689b      	ldr	r3, [r3, #8]
 8012cde:	687a      	ldr	r2, [r7, #4]
 8012ce0:	6852      	ldr	r2, [r2, #4]
 8012ce2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012ce4:	68fb      	ldr	r3, [r7, #12]
 8012ce6:	685b      	ldr	r3, [r3, #4]
 8012ce8:	687a      	ldr	r2, [r7, #4]
 8012cea:	429a      	cmp	r2, r3
 8012cec:	d103      	bne.n	8012cf6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	689a      	ldr	r2, [r3, #8]
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	2200      	movs	r2, #0
 8012cfa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	1e5a      	subs	r2, r3, #1
 8012d02:	68fb      	ldr	r3, [r7, #12]
 8012d04:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012d06:	68fb      	ldr	r3, [r7, #12]
 8012d08:	681b      	ldr	r3, [r3, #0]
}
 8012d0a:	4618      	mov	r0, r3
 8012d0c:	3714      	adds	r7, #20
 8012d0e:	46bd      	mov	sp, r7
 8012d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d14:	4770      	bx	lr
	...

08012d18 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012d18:	b580      	push	{r7, lr}
 8012d1a:	b084      	sub	sp, #16
 8012d1c:	af00      	add	r7, sp, #0
 8012d1e:	6078      	str	r0, [r7, #4]
 8012d20:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d10a      	bne.n	8012d42 <xQueueGenericReset+0x2a>
	__asm volatile
 8012d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d30:	f383 8811 	msr	BASEPRI, r3
 8012d34:	f3bf 8f6f 	isb	sy
 8012d38:	f3bf 8f4f 	dsb	sy
 8012d3c:	60bb      	str	r3, [r7, #8]
}
 8012d3e:	bf00      	nop
 8012d40:	e7fe      	b.n	8012d40 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8012d42:	f001 ff5f 	bl	8014c04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012d46:	68fb      	ldr	r3, [r7, #12]
 8012d48:	681a      	ldr	r2, [r3, #0]
 8012d4a:	68fb      	ldr	r3, [r7, #12]
 8012d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012d4e:	68f9      	ldr	r1, [r7, #12]
 8012d50:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012d52:	fb01 f303 	mul.w	r3, r1, r3
 8012d56:	441a      	add	r2, r3
 8012d58:	68fb      	ldr	r3, [r7, #12]
 8012d5a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012d5c:	68fb      	ldr	r3, [r7, #12]
 8012d5e:	2200      	movs	r2, #0
 8012d60:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012d62:	68fb      	ldr	r3, [r7, #12]
 8012d64:	681a      	ldr	r2, [r3, #0]
 8012d66:	68fb      	ldr	r3, [r7, #12]
 8012d68:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012d6a:	68fb      	ldr	r3, [r7, #12]
 8012d6c:	681a      	ldr	r2, [r3, #0]
 8012d6e:	68fb      	ldr	r3, [r7, #12]
 8012d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012d72:	3b01      	subs	r3, #1
 8012d74:	68f9      	ldr	r1, [r7, #12]
 8012d76:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012d78:	fb01 f303 	mul.w	r3, r1, r3
 8012d7c:	441a      	add	r2, r3
 8012d7e:	68fb      	ldr	r3, [r7, #12]
 8012d80:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	22ff      	movs	r2, #255	; 0xff
 8012d86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	22ff      	movs	r2, #255	; 0xff
 8012d8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8012d92:	683b      	ldr	r3, [r7, #0]
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d114      	bne.n	8012dc2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012d98:	68fb      	ldr	r3, [r7, #12]
 8012d9a:	691b      	ldr	r3, [r3, #16]
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	d01a      	beq.n	8012dd6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012da0:	68fb      	ldr	r3, [r7, #12]
 8012da2:	3310      	adds	r3, #16
 8012da4:	4618      	mov	r0, r3
 8012da6:	f001 f953 	bl	8014050 <xTaskRemoveFromEventList>
 8012daa:	4603      	mov	r3, r0
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d012      	beq.n	8012dd6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012db0:	4b0c      	ldr	r3, [pc, #48]	; (8012de4 <xQueueGenericReset+0xcc>)
 8012db2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012db6:	601a      	str	r2, [r3, #0]
 8012db8:	f3bf 8f4f 	dsb	sy
 8012dbc:	f3bf 8f6f 	isb	sy
 8012dc0:	e009      	b.n	8012dd6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	3310      	adds	r3, #16
 8012dc6:	4618      	mov	r0, r3
 8012dc8:	f7ff fef1 	bl	8012bae <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	3324      	adds	r3, #36	; 0x24
 8012dd0:	4618      	mov	r0, r3
 8012dd2:	f7ff feec 	bl	8012bae <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8012dd6:	f001 ff45 	bl	8014c64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8012dda:	2301      	movs	r3, #1
}
 8012ddc:	4618      	mov	r0, r3
 8012dde:	3710      	adds	r7, #16
 8012de0:	46bd      	mov	sp, r7
 8012de2:	bd80      	pop	{r7, pc}
 8012de4:	e000ed04 	.word	0xe000ed04

08012de8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8012de8:	b580      	push	{r7, lr}
 8012dea:	b08e      	sub	sp, #56	; 0x38
 8012dec:	af02      	add	r7, sp, #8
 8012dee:	60f8      	str	r0, [r7, #12]
 8012df0:	60b9      	str	r1, [r7, #8]
 8012df2:	607a      	str	r2, [r7, #4]
 8012df4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d10a      	bne.n	8012e12 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8012dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e00:	f383 8811 	msr	BASEPRI, r3
 8012e04:	f3bf 8f6f 	isb	sy
 8012e08:	f3bf 8f4f 	dsb	sy
 8012e0c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012e0e:	bf00      	nop
 8012e10:	e7fe      	b.n	8012e10 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8012e12:	683b      	ldr	r3, [r7, #0]
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d10a      	bne.n	8012e2e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8012e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e1c:	f383 8811 	msr	BASEPRI, r3
 8012e20:	f3bf 8f6f 	isb	sy
 8012e24:	f3bf 8f4f 	dsb	sy
 8012e28:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012e2a:	bf00      	nop
 8012e2c:	e7fe      	b.n	8012e2c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d002      	beq.n	8012e3a <xQueueGenericCreateStatic+0x52>
 8012e34:	68bb      	ldr	r3, [r7, #8]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d001      	beq.n	8012e3e <xQueueGenericCreateStatic+0x56>
 8012e3a:	2301      	movs	r3, #1
 8012e3c:	e000      	b.n	8012e40 <xQueueGenericCreateStatic+0x58>
 8012e3e:	2300      	movs	r3, #0
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d10a      	bne.n	8012e5a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8012e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e48:	f383 8811 	msr	BASEPRI, r3
 8012e4c:	f3bf 8f6f 	isb	sy
 8012e50:	f3bf 8f4f 	dsb	sy
 8012e54:	623b      	str	r3, [r7, #32]
}
 8012e56:	bf00      	nop
 8012e58:	e7fe      	b.n	8012e58 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d102      	bne.n	8012e66 <xQueueGenericCreateStatic+0x7e>
 8012e60:	68bb      	ldr	r3, [r7, #8]
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d101      	bne.n	8012e6a <xQueueGenericCreateStatic+0x82>
 8012e66:	2301      	movs	r3, #1
 8012e68:	e000      	b.n	8012e6c <xQueueGenericCreateStatic+0x84>
 8012e6a:	2300      	movs	r3, #0
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d10a      	bne.n	8012e86 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8012e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e74:	f383 8811 	msr	BASEPRI, r3
 8012e78:	f3bf 8f6f 	isb	sy
 8012e7c:	f3bf 8f4f 	dsb	sy
 8012e80:	61fb      	str	r3, [r7, #28]
}
 8012e82:	bf00      	nop
 8012e84:	e7fe      	b.n	8012e84 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012e86:	2348      	movs	r3, #72	; 0x48
 8012e88:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012e8a:	697b      	ldr	r3, [r7, #20]
 8012e8c:	2b48      	cmp	r3, #72	; 0x48
 8012e8e:	d00a      	beq.n	8012ea6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8012e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e94:	f383 8811 	msr	BASEPRI, r3
 8012e98:	f3bf 8f6f 	isb	sy
 8012e9c:	f3bf 8f4f 	dsb	sy
 8012ea0:	61bb      	str	r3, [r7, #24]
}
 8012ea2:	bf00      	nop
 8012ea4:	e7fe      	b.n	8012ea4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012ea6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012ea8:	683b      	ldr	r3, [r7, #0]
 8012eaa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8012eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	d00d      	beq.n	8012ece <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8012eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012eb4:	2201      	movs	r2, #1
 8012eb6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012eba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8012ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ec0:	9300      	str	r3, [sp, #0]
 8012ec2:	4613      	mov	r3, r2
 8012ec4:	687a      	ldr	r2, [r7, #4]
 8012ec6:	68b9      	ldr	r1, [r7, #8]
 8012ec8:	68f8      	ldr	r0, [r7, #12]
 8012eca:	f000 f845 	bl	8012f58 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8012ed0:	4618      	mov	r0, r3
 8012ed2:	3730      	adds	r7, #48	; 0x30
 8012ed4:	46bd      	mov	sp, r7
 8012ed6:	bd80      	pop	{r7, pc}

08012ed8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012ed8:	b580      	push	{r7, lr}
 8012eda:	b08a      	sub	sp, #40	; 0x28
 8012edc:	af02      	add	r7, sp, #8
 8012ede:	60f8      	str	r0, [r7, #12]
 8012ee0:	60b9      	str	r1, [r7, #8]
 8012ee2:	4613      	mov	r3, r2
 8012ee4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d10a      	bne.n	8012f02 <xQueueGenericCreate+0x2a>
	__asm volatile
 8012eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ef0:	f383 8811 	msr	BASEPRI, r3
 8012ef4:	f3bf 8f6f 	isb	sy
 8012ef8:	f3bf 8f4f 	dsb	sy
 8012efc:	613b      	str	r3, [r7, #16]
}
 8012efe:	bf00      	nop
 8012f00:	e7fe      	b.n	8012f00 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8012f02:	68bb      	ldr	r3, [r7, #8]
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d102      	bne.n	8012f0e <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8012f08:	2300      	movs	r3, #0
 8012f0a:	61fb      	str	r3, [r7, #28]
 8012f0c:	e004      	b.n	8012f18 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	68ba      	ldr	r2, [r7, #8]
 8012f12:	fb02 f303 	mul.w	r3, r2, r3
 8012f16:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012f18:	69fb      	ldr	r3, [r7, #28]
 8012f1a:	3348      	adds	r3, #72	; 0x48
 8012f1c:	4618      	mov	r0, r3
 8012f1e:	f001 ff93 	bl	8014e48 <pvPortMalloc>
 8012f22:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012f24:	69bb      	ldr	r3, [r7, #24]
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d011      	beq.n	8012f4e <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8012f2a:	69bb      	ldr	r3, [r7, #24]
 8012f2c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012f2e:	697b      	ldr	r3, [r7, #20]
 8012f30:	3348      	adds	r3, #72	; 0x48
 8012f32:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012f34:	69bb      	ldr	r3, [r7, #24]
 8012f36:	2200      	movs	r2, #0
 8012f38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012f3c:	79fa      	ldrb	r2, [r7, #7]
 8012f3e:	69bb      	ldr	r3, [r7, #24]
 8012f40:	9300      	str	r3, [sp, #0]
 8012f42:	4613      	mov	r3, r2
 8012f44:	697a      	ldr	r2, [r7, #20]
 8012f46:	68b9      	ldr	r1, [r7, #8]
 8012f48:	68f8      	ldr	r0, [r7, #12]
 8012f4a:	f000 f805 	bl	8012f58 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012f4e:	69bb      	ldr	r3, [r7, #24]
	}
 8012f50:	4618      	mov	r0, r3
 8012f52:	3720      	adds	r7, #32
 8012f54:	46bd      	mov	sp, r7
 8012f56:	bd80      	pop	{r7, pc}

08012f58 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012f58:	b580      	push	{r7, lr}
 8012f5a:	b084      	sub	sp, #16
 8012f5c:	af00      	add	r7, sp, #0
 8012f5e:	60f8      	str	r0, [r7, #12]
 8012f60:	60b9      	str	r1, [r7, #8]
 8012f62:	607a      	str	r2, [r7, #4]
 8012f64:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8012f66:	68bb      	ldr	r3, [r7, #8]
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d103      	bne.n	8012f74 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012f6c:	69bb      	ldr	r3, [r7, #24]
 8012f6e:	69ba      	ldr	r2, [r7, #24]
 8012f70:	601a      	str	r2, [r3, #0]
 8012f72:	e002      	b.n	8012f7a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012f74:	69bb      	ldr	r3, [r7, #24]
 8012f76:	687a      	ldr	r2, [r7, #4]
 8012f78:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8012f7a:	69bb      	ldr	r3, [r7, #24]
 8012f7c:	68fa      	ldr	r2, [r7, #12]
 8012f7e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012f80:	69bb      	ldr	r3, [r7, #24]
 8012f82:	68ba      	ldr	r2, [r7, #8]
 8012f84:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012f86:	2101      	movs	r1, #1
 8012f88:	69b8      	ldr	r0, [r7, #24]
 8012f8a:	f7ff fec5 	bl	8012d18 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8012f8e:	bf00      	nop
 8012f90:	3710      	adds	r7, #16
 8012f92:	46bd      	mov	sp, r7
 8012f94:	bd80      	pop	{r7, pc}

08012f96 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8012f96:	b580      	push	{r7, lr}
 8012f98:	b082      	sub	sp, #8
 8012f9a:	af00      	add	r7, sp, #0
 8012f9c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d00e      	beq.n	8012fc2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	2200      	movs	r2, #0
 8012fa8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	2200      	movs	r2, #0
 8012fae:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	2200      	movs	r2, #0
 8012fb4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8012fb6:	2300      	movs	r3, #0
 8012fb8:	2200      	movs	r2, #0
 8012fba:	2100      	movs	r1, #0
 8012fbc:	6878      	ldr	r0, [r7, #4]
 8012fbe:	f000 f837 	bl	8013030 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8012fc2:	bf00      	nop
 8012fc4:	3708      	adds	r7, #8
 8012fc6:	46bd      	mov	sp, r7
 8012fc8:	bd80      	pop	{r7, pc}

08012fca <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8012fca:	b580      	push	{r7, lr}
 8012fcc:	b086      	sub	sp, #24
 8012fce:	af00      	add	r7, sp, #0
 8012fd0:	4603      	mov	r3, r0
 8012fd2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8012fd4:	2301      	movs	r3, #1
 8012fd6:	617b      	str	r3, [r7, #20]
 8012fd8:	2300      	movs	r3, #0
 8012fda:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8012fdc:	79fb      	ldrb	r3, [r7, #7]
 8012fde:	461a      	mov	r2, r3
 8012fe0:	6939      	ldr	r1, [r7, #16]
 8012fe2:	6978      	ldr	r0, [r7, #20]
 8012fe4:	f7ff ff78 	bl	8012ed8 <xQueueGenericCreate>
 8012fe8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8012fea:	68f8      	ldr	r0, [r7, #12]
 8012fec:	f7ff ffd3 	bl	8012f96 <prvInitialiseMutex>

		return xNewQueue;
 8012ff0:	68fb      	ldr	r3, [r7, #12]
	}
 8012ff2:	4618      	mov	r0, r3
 8012ff4:	3718      	adds	r7, #24
 8012ff6:	46bd      	mov	sp, r7
 8012ff8:	bd80      	pop	{r7, pc}

08012ffa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8012ffa:	b580      	push	{r7, lr}
 8012ffc:	b088      	sub	sp, #32
 8012ffe:	af02      	add	r7, sp, #8
 8013000:	4603      	mov	r3, r0
 8013002:	6039      	str	r1, [r7, #0]
 8013004:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8013006:	2301      	movs	r3, #1
 8013008:	617b      	str	r3, [r7, #20]
 801300a:	2300      	movs	r3, #0
 801300c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 801300e:	79fb      	ldrb	r3, [r7, #7]
 8013010:	9300      	str	r3, [sp, #0]
 8013012:	683b      	ldr	r3, [r7, #0]
 8013014:	2200      	movs	r2, #0
 8013016:	6939      	ldr	r1, [r7, #16]
 8013018:	6978      	ldr	r0, [r7, #20]
 801301a:	f7ff fee5 	bl	8012de8 <xQueueGenericCreateStatic>
 801301e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8013020:	68f8      	ldr	r0, [r7, #12]
 8013022:	f7ff ffb8 	bl	8012f96 <prvInitialiseMutex>

		return xNewQueue;
 8013026:	68fb      	ldr	r3, [r7, #12]
	}
 8013028:	4618      	mov	r0, r3
 801302a:	3718      	adds	r7, #24
 801302c:	46bd      	mov	sp, r7
 801302e:	bd80      	pop	{r7, pc}

08013030 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8013030:	b580      	push	{r7, lr}
 8013032:	b08e      	sub	sp, #56	; 0x38
 8013034:	af00      	add	r7, sp, #0
 8013036:	60f8      	str	r0, [r7, #12]
 8013038:	60b9      	str	r1, [r7, #8]
 801303a:	607a      	str	r2, [r7, #4]
 801303c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801303e:	2300      	movs	r3, #0
 8013040:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013042:	68fb      	ldr	r3, [r7, #12]
 8013044:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013048:	2b00      	cmp	r3, #0
 801304a:	d10a      	bne.n	8013062 <xQueueGenericSend+0x32>
	__asm volatile
 801304c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013050:	f383 8811 	msr	BASEPRI, r3
 8013054:	f3bf 8f6f 	isb	sy
 8013058:	f3bf 8f4f 	dsb	sy
 801305c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801305e:	bf00      	nop
 8013060:	e7fe      	b.n	8013060 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013062:	68bb      	ldr	r3, [r7, #8]
 8013064:	2b00      	cmp	r3, #0
 8013066:	d103      	bne.n	8013070 <xQueueGenericSend+0x40>
 8013068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801306a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801306c:	2b00      	cmp	r3, #0
 801306e:	d101      	bne.n	8013074 <xQueueGenericSend+0x44>
 8013070:	2301      	movs	r3, #1
 8013072:	e000      	b.n	8013076 <xQueueGenericSend+0x46>
 8013074:	2300      	movs	r3, #0
 8013076:	2b00      	cmp	r3, #0
 8013078:	d10a      	bne.n	8013090 <xQueueGenericSend+0x60>
	__asm volatile
 801307a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801307e:	f383 8811 	msr	BASEPRI, r3
 8013082:	f3bf 8f6f 	isb	sy
 8013086:	f3bf 8f4f 	dsb	sy
 801308a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801308c:	bf00      	nop
 801308e:	e7fe      	b.n	801308e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013090:	683b      	ldr	r3, [r7, #0]
 8013092:	2b02      	cmp	r3, #2
 8013094:	d103      	bne.n	801309e <xQueueGenericSend+0x6e>
 8013096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801309a:	2b01      	cmp	r3, #1
 801309c:	d101      	bne.n	80130a2 <xQueueGenericSend+0x72>
 801309e:	2301      	movs	r3, #1
 80130a0:	e000      	b.n	80130a4 <xQueueGenericSend+0x74>
 80130a2:	2300      	movs	r3, #0
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d10a      	bne.n	80130be <xQueueGenericSend+0x8e>
	__asm volatile
 80130a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130ac:	f383 8811 	msr	BASEPRI, r3
 80130b0:	f3bf 8f6f 	isb	sy
 80130b4:	f3bf 8f4f 	dsb	sy
 80130b8:	623b      	str	r3, [r7, #32]
}
 80130ba:	bf00      	nop
 80130bc:	e7fe      	b.n	80130bc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80130be:	f001 f983 	bl	80143c8 <xTaskGetSchedulerState>
 80130c2:	4603      	mov	r3, r0
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d102      	bne.n	80130ce <xQueueGenericSend+0x9e>
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d101      	bne.n	80130d2 <xQueueGenericSend+0xa2>
 80130ce:	2301      	movs	r3, #1
 80130d0:	e000      	b.n	80130d4 <xQueueGenericSend+0xa4>
 80130d2:	2300      	movs	r3, #0
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d10a      	bne.n	80130ee <xQueueGenericSend+0xbe>
	__asm volatile
 80130d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130dc:	f383 8811 	msr	BASEPRI, r3
 80130e0:	f3bf 8f6f 	isb	sy
 80130e4:	f3bf 8f4f 	dsb	sy
 80130e8:	61fb      	str	r3, [r7, #28]
}
 80130ea:	bf00      	nop
 80130ec:	e7fe      	b.n	80130ec <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80130ee:	f001 fd89 	bl	8014c04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80130f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80130f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80130fa:	429a      	cmp	r2, r3
 80130fc:	d302      	bcc.n	8013104 <xQueueGenericSend+0xd4>
 80130fe:	683b      	ldr	r3, [r7, #0]
 8013100:	2b02      	cmp	r3, #2
 8013102:	d129      	bne.n	8013158 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013104:	683a      	ldr	r2, [r7, #0]
 8013106:	68b9      	ldr	r1, [r7, #8]
 8013108:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801310a:	f000 fa87 	bl	801361c <prvCopyDataToQueue>
 801310e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013114:	2b00      	cmp	r3, #0
 8013116:	d010      	beq.n	801313a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801311a:	3324      	adds	r3, #36	; 0x24
 801311c:	4618      	mov	r0, r3
 801311e:	f000 ff97 	bl	8014050 <xTaskRemoveFromEventList>
 8013122:	4603      	mov	r3, r0
 8013124:	2b00      	cmp	r3, #0
 8013126:	d013      	beq.n	8013150 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8013128:	4b3f      	ldr	r3, [pc, #252]	; (8013228 <xQueueGenericSend+0x1f8>)
 801312a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801312e:	601a      	str	r2, [r3, #0]
 8013130:	f3bf 8f4f 	dsb	sy
 8013134:	f3bf 8f6f 	isb	sy
 8013138:	e00a      	b.n	8013150 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801313a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801313c:	2b00      	cmp	r3, #0
 801313e:	d007      	beq.n	8013150 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8013140:	4b39      	ldr	r3, [pc, #228]	; (8013228 <xQueueGenericSend+0x1f8>)
 8013142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013146:	601a      	str	r2, [r3, #0]
 8013148:	f3bf 8f4f 	dsb	sy
 801314c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8013150:	f001 fd88 	bl	8014c64 <vPortExitCritical>
				return pdPASS;
 8013154:	2301      	movs	r3, #1
 8013156:	e063      	b.n	8013220 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	2b00      	cmp	r3, #0
 801315c:	d103      	bne.n	8013166 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801315e:	f001 fd81 	bl	8014c64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8013162:	2300      	movs	r3, #0
 8013164:	e05c      	b.n	8013220 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013168:	2b00      	cmp	r3, #0
 801316a:	d106      	bne.n	801317a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801316c:	f107 0314 	add.w	r3, r7, #20
 8013170:	4618      	mov	r0, r3
 8013172:	f000 ffcf 	bl	8014114 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013176:	2301      	movs	r3, #1
 8013178:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801317a:	f001 fd73 	bl	8014c64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801317e:	f000 fd85 	bl	8013c8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013182:	f001 fd3f 	bl	8014c04 <vPortEnterCritical>
 8013186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013188:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801318c:	b25b      	sxtb	r3, r3
 801318e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013192:	d103      	bne.n	801319c <xQueueGenericSend+0x16c>
 8013194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013196:	2200      	movs	r2, #0
 8013198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801319c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801319e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80131a2:	b25b      	sxtb	r3, r3
 80131a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80131a8:	d103      	bne.n	80131b2 <xQueueGenericSend+0x182>
 80131aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131ac:	2200      	movs	r2, #0
 80131ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80131b2:	f001 fd57 	bl	8014c64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80131b6:	1d3a      	adds	r2, r7, #4
 80131b8:	f107 0314 	add.w	r3, r7, #20
 80131bc:	4611      	mov	r1, r2
 80131be:	4618      	mov	r0, r3
 80131c0:	f000 ffbe 	bl	8014140 <xTaskCheckForTimeOut>
 80131c4:	4603      	mov	r3, r0
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d124      	bne.n	8013214 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80131ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80131cc:	f000 fb1e 	bl	801380c <prvIsQueueFull>
 80131d0:	4603      	mov	r3, r0
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d018      	beq.n	8013208 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80131d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131d8:	3310      	adds	r3, #16
 80131da:	687a      	ldr	r2, [r7, #4]
 80131dc:	4611      	mov	r1, r2
 80131de:	4618      	mov	r0, r3
 80131e0:	f000 ff12 	bl	8014008 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80131e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80131e6:	f000 faa9 	bl	801373c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80131ea:	f000 fd5d 	bl	8013ca8 <xTaskResumeAll>
 80131ee:	4603      	mov	r3, r0
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	f47f af7c 	bne.w	80130ee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80131f6:	4b0c      	ldr	r3, [pc, #48]	; (8013228 <xQueueGenericSend+0x1f8>)
 80131f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80131fc:	601a      	str	r2, [r3, #0]
 80131fe:	f3bf 8f4f 	dsb	sy
 8013202:	f3bf 8f6f 	isb	sy
 8013206:	e772      	b.n	80130ee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8013208:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801320a:	f000 fa97 	bl	801373c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801320e:	f000 fd4b 	bl	8013ca8 <xTaskResumeAll>
 8013212:	e76c      	b.n	80130ee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8013214:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013216:	f000 fa91 	bl	801373c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801321a:	f000 fd45 	bl	8013ca8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801321e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8013220:	4618      	mov	r0, r3
 8013222:	3738      	adds	r7, #56	; 0x38
 8013224:	46bd      	mov	sp, r7
 8013226:	bd80      	pop	{r7, pc}
 8013228:	e000ed04 	.word	0xe000ed04

0801322c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801322c:	b580      	push	{r7, lr}
 801322e:	b08e      	sub	sp, #56	; 0x38
 8013230:	af00      	add	r7, sp, #0
 8013232:	60f8      	str	r0, [r7, #12]
 8013234:	60b9      	str	r1, [r7, #8]
 8013236:	607a      	str	r2, [r7, #4]
 8013238:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801323a:	68fb      	ldr	r3, [r7, #12]
 801323c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801323e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013240:	2b00      	cmp	r3, #0
 8013242:	d10a      	bne.n	801325a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8013244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013248:	f383 8811 	msr	BASEPRI, r3
 801324c:	f3bf 8f6f 	isb	sy
 8013250:	f3bf 8f4f 	dsb	sy
 8013254:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013256:	bf00      	nop
 8013258:	e7fe      	b.n	8013258 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801325a:	68bb      	ldr	r3, [r7, #8]
 801325c:	2b00      	cmp	r3, #0
 801325e:	d103      	bne.n	8013268 <xQueueGenericSendFromISR+0x3c>
 8013260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013264:	2b00      	cmp	r3, #0
 8013266:	d101      	bne.n	801326c <xQueueGenericSendFromISR+0x40>
 8013268:	2301      	movs	r3, #1
 801326a:	e000      	b.n	801326e <xQueueGenericSendFromISR+0x42>
 801326c:	2300      	movs	r3, #0
 801326e:	2b00      	cmp	r3, #0
 8013270:	d10a      	bne.n	8013288 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8013272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013276:	f383 8811 	msr	BASEPRI, r3
 801327a:	f3bf 8f6f 	isb	sy
 801327e:	f3bf 8f4f 	dsb	sy
 8013282:	623b      	str	r3, [r7, #32]
}
 8013284:	bf00      	nop
 8013286:	e7fe      	b.n	8013286 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013288:	683b      	ldr	r3, [r7, #0]
 801328a:	2b02      	cmp	r3, #2
 801328c:	d103      	bne.n	8013296 <xQueueGenericSendFromISR+0x6a>
 801328e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013292:	2b01      	cmp	r3, #1
 8013294:	d101      	bne.n	801329a <xQueueGenericSendFromISR+0x6e>
 8013296:	2301      	movs	r3, #1
 8013298:	e000      	b.n	801329c <xQueueGenericSendFromISR+0x70>
 801329a:	2300      	movs	r3, #0
 801329c:	2b00      	cmp	r3, #0
 801329e:	d10a      	bne.n	80132b6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80132a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132a4:	f383 8811 	msr	BASEPRI, r3
 80132a8:	f3bf 8f6f 	isb	sy
 80132ac:	f3bf 8f4f 	dsb	sy
 80132b0:	61fb      	str	r3, [r7, #28]
}
 80132b2:	bf00      	nop
 80132b4:	e7fe      	b.n	80132b4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80132b6:	f001 fd87 	bl	8014dc8 <vPortValidateInterruptPriority>
	__asm volatile
 80132ba:	f3ef 8211 	mrs	r2, BASEPRI
 80132be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132c2:	f383 8811 	msr	BASEPRI, r3
 80132c6:	f3bf 8f6f 	isb	sy
 80132ca:	f3bf 8f4f 	dsb	sy
 80132ce:	61ba      	str	r2, [r7, #24]
 80132d0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80132d2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80132d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80132d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80132da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80132de:	429a      	cmp	r2, r3
 80132e0:	d302      	bcc.n	80132e8 <xQueueGenericSendFromISR+0xbc>
 80132e2:	683b      	ldr	r3, [r7, #0]
 80132e4:	2b02      	cmp	r3, #2
 80132e6:	d12c      	bne.n	8013342 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80132e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80132ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80132f2:	683a      	ldr	r2, [r7, #0]
 80132f4:	68b9      	ldr	r1, [r7, #8]
 80132f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80132f8:	f000 f990 	bl	801361c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80132fc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8013300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013304:	d112      	bne.n	801332c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801330a:	2b00      	cmp	r3, #0
 801330c:	d016      	beq.n	801333c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801330e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013310:	3324      	adds	r3, #36	; 0x24
 8013312:	4618      	mov	r0, r3
 8013314:	f000 fe9c 	bl	8014050 <xTaskRemoveFromEventList>
 8013318:	4603      	mov	r3, r0
 801331a:	2b00      	cmp	r3, #0
 801331c:	d00e      	beq.n	801333c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	2b00      	cmp	r3, #0
 8013322:	d00b      	beq.n	801333c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	2201      	movs	r2, #1
 8013328:	601a      	str	r2, [r3, #0]
 801332a:	e007      	b.n	801333c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801332c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8013330:	3301      	adds	r3, #1
 8013332:	b2db      	uxtb	r3, r3
 8013334:	b25a      	sxtb	r2, r3
 8013336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013338:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801333c:	2301      	movs	r3, #1
 801333e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8013340:	e001      	b.n	8013346 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013342:	2300      	movs	r3, #0
 8013344:	637b      	str	r3, [r7, #52]	; 0x34
 8013346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013348:	613b      	str	r3, [r7, #16]
	__asm volatile
 801334a:	693b      	ldr	r3, [r7, #16]
 801334c:	f383 8811 	msr	BASEPRI, r3
}
 8013350:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013354:	4618      	mov	r0, r3
 8013356:	3738      	adds	r7, #56	; 0x38
 8013358:	46bd      	mov	sp, r7
 801335a:	bd80      	pop	{r7, pc}

0801335c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801335c:	b580      	push	{r7, lr}
 801335e:	b08c      	sub	sp, #48	; 0x30
 8013360:	af00      	add	r7, sp, #0
 8013362:	60f8      	str	r0, [r7, #12]
 8013364:	60b9      	str	r1, [r7, #8]
 8013366:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013368:	2300      	movs	r3, #0
 801336a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013372:	2b00      	cmp	r3, #0
 8013374:	d10a      	bne.n	801338c <xQueueReceive+0x30>
	__asm volatile
 8013376:	f04f 0350 	mov.w	r3, #80	; 0x50
 801337a:	f383 8811 	msr	BASEPRI, r3
 801337e:	f3bf 8f6f 	isb	sy
 8013382:	f3bf 8f4f 	dsb	sy
 8013386:	623b      	str	r3, [r7, #32]
}
 8013388:	bf00      	nop
 801338a:	e7fe      	b.n	801338a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801338c:	68bb      	ldr	r3, [r7, #8]
 801338e:	2b00      	cmp	r3, #0
 8013390:	d103      	bne.n	801339a <xQueueReceive+0x3e>
 8013392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013396:	2b00      	cmp	r3, #0
 8013398:	d101      	bne.n	801339e <xQueueReceive+0x42>
 801339a:	2301      	movs	r3, #1
 801339c:	e000      	b.n	80133a0 <xQueueReceive+0x44>
 801339e:	2300      	movs	r3, #0
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d10a      	bne.n	80133ba <xQueueReceive+0x5e>
	__asm volatile
 80133a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133a8:	f383 8811 	msr	BASEPRI, r3
 80133ac:	f3bf 8f6f 	isb	sy
 80133b0:	f3bf 8f4f 	dsb	sy
 80133b4:	61fb      	str	r3, [r7, #28]
}
 80133b6:	bf00      	nop
 80133b8:	e7fe      	b.n	80133b8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80133ba:	f001 f805 	bl	80143c8 <xTaskGetSchedulerState>
 80133be:	4603      	mov	r3, r0
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	d102      	bne.n	80133ca <xQueueReceive+0x6e>
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d101      	bne.n	80133ce <xQueueReceive+0x72>
 80133ca:	2301      	movs	r3, #1
 80133cc:	e000      	b.n	80133d0 <xQueueReceive+0x74>
 80133ce:	2300      	movs	r3, #0
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d10a      	bne.n	80133ea <xQueueReceive+0x8e>
	__asm volatile
 80133d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133d8:	f383 8811 	msr	BASEPRI, r3
 80133dc:	f3bf 8f6f 	isb	sy
 80133e0:	f3bf 8f4f 	dsb	sy
 80133e4:	61bb      	str	r3, [r7, #24]
}
 80133e6:	bf00      	nop
 80133e8:	e7fe      	b.n	80133e8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80133ea:	f001 fc0b 	bl	8014c04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80133ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80133f2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80133f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d01f      	beq.n	801343a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80133fa:	68b9      	ldr	r1, [r7, #8]
 80133fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80133fe:	f000 f977 	bl	80136f0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013404:	1e5a      	subs	r2, r3, #1
 8013406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013408:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801340a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801340c:	691b      	ldr	r3, [r3, #16]
 801340e:	2b00      	cmp	r3, #0
 8013410:	d00f      	beq.n	8013432 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013414:	3310      	adds	r3, #16
 8013416:	4618      	mov	r0, r3
 8013418:	f000 fe1a 	bl	8014050 <xTaskRemoveFromEventList>
 801341c:	4603      	mov	r3, r0
 801341e:	2b00      	cmp	r3, #0
 8013420:	d007      	beq.n	8013432 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013422:	4b3d      	ldr	r3, [pc, #244]	; (8013518 <xQueueReceive+0x1bc>)
 8013424:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013428:	601a      	str	r2, [r3, #0]
 801342a:	f3bf 8f4f 	dsb	sy
 801342e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013432:	f001 fc17 	bl	8014c64 <vPortExitCritical>
				return pdPASS;
 8013436:	2301      	movs	r3, #1
 8013438:	e069      	b.n	801350e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	2b00      	cmp	r3, #0
 801343e:	d103      	bne.n	8013448 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013440:	f001 fc10 	bl	8014c64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013444:	2300      	movs	r3, #0
 8013446:	e062      	b.n	801350e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801344a:	2b00      	cmp	r3, #0
 801344c:	d106      	bne.n	801345c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801344e:	f107 0310 	add.w	r3, r7, #16
 8013452:	4618      	mov	r0, r3
 8013454:	f000 fe5e 	bl	8014114 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013458:	2301      	movs	r3, #1
 801345a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801345c:	f001 fc02 	bl	8014c64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013460:	f000 fc14 	bl	8013c8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013464:	f001 fbce 	bl	8014c04 <vPortEnterCritical>
 8013468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801346a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801346e:	b25b      	sxtb	r3, r3
 8013470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013474:	d103      	bne.n	801347e <xQueueReceive+0x122>
 8013476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013478:	2200      	movs	r2, #0
 801347a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801347e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013480:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013484:	b25b      	sxtb	r3, r3
 8013486:	f1b3 3fff 	cmp.w	r3, #4294967295
 801348a:	d103      	bne.n	8013494 <xQueueReceive+0x138>
 801348c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801348e:	2200      	movs	r2, #0
 8013490:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013494:	f001 fbe6 	bl	8014c64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013498:	1d3a      	adds	r2, r7, #4
 801349a:	f107 0310 	add.w	r3, r7, #16
 801349e:	4611      	mov	r1, r2
 80134a0:	4618      	mov	r0, r3
 80134a2:	f000 fe4d 	bl	8014140 <xTaskCheckForTimeOut>
 80134a6:	4603      	mov	r3, r0
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d123      	bne.n	80134f4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80134ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80134ae:	f000 f997 	bl	80137e0 <prvIsQueueEmpty>
 80134b2:	4603      	mov	r3, r0
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	d017      	beq.n	80134e8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80134b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134ba:	3324      	adds	r3, #36	; 0x24
 80134bc:	687a      	ldr	r2, [r7, #4]
 80134be:	4611      	mov	r1, r2
 80134c0:	4618      	mov	r0, r3
 80134c2:	f000 fda1 	bl	8014008 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80134c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80134c8:	f000 f938 	bl	801373c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80134cc:	f000 fbec 	bl	8013ca8 <xTaskResumeAll>
 80134d0:	4603      	mov	r3, r0
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	d189      	bne.n	80133ea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80134d6:	4b10      	ldr	r3, [pc, #64]	; (8013518 <xQueueReceive+0x1bc>)
 80134d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80134dc:	601a      	str	r2, [r3, #0]
 80134de:	f3bf 8f4f 	dsb	sy
 80134e2:	f3bf 8f6f 	isb	sy
 80134e6:	e780      	b.n	80133ea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80134e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80134ea:	f000 f927 	bl	801373c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80134ee:	f000 fbdb 	bl	8013ca8 <xTaskResumeAll>
 80134f2:	e77a      	b.n	80133ea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80134f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80134f6:	f000 f921 	bl	801373c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80134fa:	f000 fbd5 	bl	8013ca8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80134fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013500:	f000 f96e 	bl	80137e0 <prvIsQueueEmpty>
 8013504:	4603      	mov	r3, r0
 8013506:	2b00      	cmp	r3, #0
 8013508:	f43f af6f 	beq.w	80133ea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801350c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801350e:	4618      	mov	r0, r3
 8013510:	3730      	adds	r7, #48	; 0x30
 8013512:	46bd      	mov	sp, r7
 8013514:	bd80      	pop	{r7, pc}
 8013516:	bf00      	nop
 8013518:	e000ed04 	.word	0xe000ed04

0801351c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801351c:	b580      	push	{r7, lr}
 801351e:	b08e      	sub	sp, #56	; 0x38
 8013520:	af00      	add	r7, sp, #0
 8013522:	60f8      	str	r0, [r7, #12]
 8013524:	60b9      	str	r1, [r7, #8]
 8013526:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013528:	68fb      	ldr	r3, [r7, #12]
 801352a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801352c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801352e:	2b00      	cmp	r3, #0
 8013530:	d10a      	bne.n	8013548 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8013532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013536:	f383 8811 	msr	BASEPRI, r3
 801353a:	f3bf 8f6f 	isb	sy
 801353e:	f3bf 8f4f 	dsb	sy
 8013542:	623b      	str	r3, [r7, #32]
}
 8013544:	bf00      	nop
 8013546:	e7fe      	b.n	8013546 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013548:	68bb      	ldr	r3, [r7, #8]
 801354a:	2b00      	cmp	r3, #0
 801354c:	d103      	bne.n	8013556 <xQueueReceiveFromISR+0x3a>
 801354e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013552:	2b00      	cmp	r3, #0
 8013554:	d101      	bne.n	801355a <xQueueReceiveFromISR+0x3e>
 8013556:	2301      	movs	r3, #1
 8013558:	e000      	b.n	801355c <xQueueReceiveFromISR+0x40>
 801355a:	2300      	movs	r3, #0
 801355c:	2b00      	cmp	r3, #0
 801355e:	d10a      	bne.n	8013576 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8013560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013564:	f383 8811 	msr	BASEPRI, r3
 8013568:	f3bf 8f6f 	isb	sy
 801356c:	f3bf 8f4f 	dsb	sy
 8013570:	61fb      	str	r3, [r7, #28]
}
 8013572:	bf00      	nop
 8013574:	e7fe      	b.n	8013574 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013576:	f001 fc27 	bl	8014dc8 <vPortValidateInterruptPriority>
	__asm volatile
 801357a:	f3ef 8211 	mrs	r2, BASEPRI
 801357e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013582:	f383 8811 	msr	BASEPRI, r3
 8013586:	f3bf 8f6f 	isb	sy
 801358a:	f3bf 8f4f 	dsb	sy
 801358e:	61ba      	str	r2, [r7, #24]
 8013590:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013592:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013594:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801359a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801359c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d02f      	beq.n	8013602 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80135a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80135a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80135ac:	68b9      	ldr	r1, [r7, #8]
 80135ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80135b0:	f000 f89e 	bl	80136f0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80135b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135b6:	1e5a      	subs	r2, r3, #1
 80135b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135ba:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80135bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80135c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135c4:	d112      	bne.n	80135ec <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80135c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135c8:	691b      	ldr	r3, [r3, #16]
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d016      	beq.n	80135fc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80135ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135d0:	3310      	adds	r3, #16
 80135d2:	4618      	mov	r0, r3
 80135d4:	f000 fd3c 	bl	8014050 <xTaskRemoveFromEventList>
 80135d8:	4603      	mov	r3, r0
 80135da:	2b00      	cmp	r3, #0
 80135dc:	d00e      	beq.n	80135fc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	d00b      	beq.n	80135fc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	2201      	movs	r2, #1
 80135e8:	601a      	str	r2, [r3, #0]
 80135ea:	e007      	b.n	80135fc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80135ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80135f0:	3301      	adds	r3, #1
 80135f2:	b2db      	uxtb	r3, r3
 80135f4:	b25a      	sxtb	r2, r3
 80135f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80135fc:	2301      	movs	r3, #1
 80135fe:	637b      	str	r3, [r7, #52]	; 0x34
 8013600:	e001      	b.n	8013606 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8013602:	2300      	movs	r3, #0
 8013604:	637b      	str	r3, [r7, #52]	; 0x34
 8013606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013608:	613b      	str	r3, [r7, #16]
	__asm volatile
 801360a:	693b      	ldr	r3, [r7, #16]
 801360c:	f383 8811 	msr	BASEPRI, r3
}
 8013610:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013614:	4618      	mov	r0, r3
 8013616:	3738      	adds	r7, #56	; 0x38
 8013618:	46bd      	mov	sp, r7
 801361a:	bd80      	pop	{r7, pc}

0801361c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801361c:	b580      	push	{r7, lr}
 801361e:	b086      	sub	sp, #24
 8013620:	af00      	add	r7, sp, #0
 8013622:	60f8      	str	r0, [r7, #12]
 8013624:	60b9      	str	r1, [r7, #8]
 8013626:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013628:	2300      	movs	r3, #0
 801362a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013630:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013636:	2b00      	cmp	r3, #0
 8013638:	d10d      	bne.n	8013656 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801363a:	68fb      	ldr	r3, [r7, #12]
 801363c:	681b      	ldr	r3, [r3, #0]
 801363e:	2b00      	cmp	r3, #0
 8013640:	d14d      	bne.n	80136de <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013642:	68fb      	ldr	r3, [r7, #12]
 8013644:	689b      	ldr	r3, [r3, #8]
 8013646:	4618      	mov	r0, r3
 8013648:	f000 fedc 	bl	8014404 <xTaskPriorityDisinherit>
 801364c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801364e:	68fb      	ldr	r3, [r7, #12]
 8013650:	2200      	movs	r2, #0
 8013652:	609a      	str	r2, [r3, #8]
 8013654:	e043      	b.n	80136de <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	2b00      	cmp	r3, #0
 801365a:	d119      	bne.n	8013690 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801365c:	68fb      	ldr	r3, [r7, #12]
 801365e:	6858      	ldr	r0, [r3, #4]
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013664:	461a      	mov	r2, r3
 8013666:	68b9      	ldr	r1, [r7, #8]
 8013668:	f002 fb52 	bl	8015d10 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801366c:	68fb      	ldr	r3, [r7, #12]
 801366e:	685a      	ldr	r2, [r3, #4]
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013674:	441a      	add	r2, r3
 8013676:	68fb      	ldr	r3, [r7, #12]
 8013678:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801367a:	68fb      	ldr	r3, [r7, #12]
 801367c:	685a      	ldr	r2, [r3, #4]
 801367e:	68fb      	ldr	r3, [r7, #12]
 8013680:	689b      	ldr	r3, [r3, #8]
 8013682:	429a      	cmp	r2, r3
 8013684:	d32b      	bcc.n	80136de <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013686:	68fb      	ldr	r3, [r7, #12]
 8013688:	681a      	ldr	r2, [r3, #0]
 801368a:	68fb      	ldr	r3, [r7, #12]
 801368c:	605a      	str	r2, [r3, #4]
 801368e:	e026      	b.n	80136de <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	68d8      	ldr	r0, [r3, #12]
 8013694:	68fb      	ldr	r3, [r7, #12]
 8013696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013698:	461a      	mov	r2, r3
 801369a:	68b9      	ldr	r1, [r7, #8]
 801369c:	f002 fb38 	bl	8015d10 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	68da      	ldr	r2, [r3, #12]
 80136a4:	68fb      	ldr	r3, [r7, #12]
 80136a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80136a8:	425b      	negs	r3, r3
 80136aa:	441a      	add	r2, r3
 80136ac:	68fb      	ldr	r3, [r7, #12]
 80136ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80136b0:	68fb      	ldr	r3, [r7, #12]
 80136b2:	68da      	ldr	r2, [r3, #12]
 80136b4:	68fb      	ldr	r3, [r7, #12]
 80136b6:	681b      	ldr	r3, [r3, #0]
 80136b8:	429a      	cmp	r2, r3
 80136ba:	d207      	bcs.n	80136cc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80136bc:	68fb      	ldr	r3, [r7, #12]
 80136be:	689a      	ldr	r2, [r3, #8]
 80136c0:	68fb      	ldr	r3, [r7, #12]
 80136c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80136c4:	425b      	negs	r3, r3
 80136c6:	441a      	add	r2, r3
 80136c8:	68fb      	ldr	r3, [r7, #12]
 80136ca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	2b02      	cmp	r3, #2
 80136d0:	d105      	bne.n	80136de <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80136d2:	693b      	ldr	r3, [r7, #16]
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d002      	beq.n	80136de <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80136d8:	693b      	ldr	r3, [r7, #16]
 80136da:	3b01      	subs	r3, #1
 80136dc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80136de:	693b      	ldr	r3, [r7, #16]
 80136e0:	1c5a      	adds	r2, r3, #1
 80136e2:	68fb      	ldr	r3, [r7, #12]
 80136e4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80136e6:	697b      	ldr	r3, [r7, #20]
}
 80136e8:	4618      	mov	r0, r3
 80136ea:	3718      	adds	r7, #24
 80136ec:	46bd      	mov	sp, r7
 80136ee:	bd80      	pop	{r7, pc}

080136f0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80136f0:	b580      	push	{r7, lr}
 80136f2:	b082      	sub	sp, #8
 80136f4:	af00      	add	r7, sp, #0
 80136f6:	6078      	str	r0, [r7, #4]
 80136f8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d018      	beq.n	8013734 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	68da      	ldr	r2, [r3, #12]
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801370a:	441a      	add	r2, r3
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	68da      	ldr	r2, [r3, #12]
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	689b      	ldr	r3, [r3, #8]
 8013718:	429a      	cmp	r2, r3
 801371a:	d303      	bcc.n	8013724 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	681a      	ldr	r2, [r3, #0]
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	68d9      	ldr	r1, [r3, #12]
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801372c:	461a      	mov	r2, r3
 801372e:	6838      	ldr	r0, [r7, #0]
 8013730:	f002 faee 	bl	8015d10 <memcpy>
	}
}
 8013734:	bf00      	nop
 8013736:	3708      	adds	r7, #8
 8013738:	46bd      	mov	sp, r7
 801373a:	bd80      	pop	{r7, pc}

0801373c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801373c:	b580      	push	{r7, lr}
 801373e:	b084      	sub	sp, #16
 8013740:	af00      	add	r7, sp, #0
 8013742:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013744:	f001 fa5e 	bl	8014c04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801374e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013750:	e011      	b.n	8013776 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013756:	2b00      	cmp	r3, #0
 8013758:	d012      	beq.n	8013780 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	3324      	adds	r3, #36	; 0x24
 801375e:	4618      	mov	r0, r3
 8013760:	f000 fc76 	bl	8014050 <xTaskRemoveFromEventList>
 8013764:	4603      	mov	r3, r0
 8013766:	2b00      	cmp	r3, #0
 8013768:	d001      	beq.n	801376e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801376a:	f000 fd4b 	bl	8014204 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801376e:	7bfb      	ldrb	r3, [r7, #15]
 8013770:	3b01      	subs	r3, #1
 8013772:	b2db      	uxtb	r3, r3
 8013774:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801377a:	2b00      	cmp	r3, #0
 801377c:	dce9      	bgt.n	8013752 <prvUnlockQueue+0x16>
 801377e:	e000      	b.n	8013782 <prvUnlockQueue+0x46>
					break;
 8013780:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	22ff      	movs	r2, #255	; 0xff
 8013786:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801378a:	f001 fa6b 	bl	8014c64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801378e:	f001 fa39 	bl	8014c04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013798:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801379a:	e011      	b.n	80137c0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	691b      	ldr	r3, [r3, #16]
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d012      	beq.n	80137ca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	3310      	adds	r3, #16
 80137a8:	4618      	mov	r0, r3
 80137aa:	f000 fc51 	bl	8014050 <xTaskRemoveFromEventList>
 80137ae:	4603      	mov	r3, r0
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d001      	beq.n	80137b8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80137b4:	f000 fd26 	bl	8014204 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80137b8:	7bbb      	ldrb	r3, [r7, #14]
 80137ba:	3b01      	subs	r3, #1
 80137bc:	b2db      	uxtb	r3, r3
 80137be:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80137c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	dce9      	bgt.n	801379c <prvUnlockQueue+0x60>
 80137c8:	e000      	b.n	80137cc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80137ca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	22ff      	movs	r2, #255	; 0xff
 80137d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80137d4:	f001 fa46 	bl	8014c64 <vPortExitCritical>
}
 80137d8:	bf00      	nop
 80137da:	3710      	adds	r7, #16
 80137dc:	46bd      	mov	sp, r7
 80137de:	bd80      	pop	{r7, pc}

080137e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80137e0:	b580      	push	{r7, lr}
 80137e2:	b084      	sub	sp, #16
 80137e4:	af00      	add	r7, sp, #0
 80137e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80137e8:	f001 fa0c 	bl	8014c04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d102      	bne.n	80137fa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80137f4:	2301      	movs	r3, #1
 80137f6:	60fb      	str	r3, [r7, #12]
 80137f8:	e001      	b.n	80137fe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80137fa:	2300      	movs	r3, #0
 80137fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80137fe:	f001 fa31 	bl	8014c64 <vPortExitCritical>

	return xReturn;
 8013802:	68fb      	ldr	r3, [r7, #12]
}
 8013804:	4618      	mov	r0, r3
 8013806:	3710      	adds	r7, #16
 8013808:	46bd      	mov	sp, r7
 801380a:	bd80      	pop	{r7, pc}

0801380c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801380c:	b580      	push	{r7, lr}
 801380e:	b084      	sub	sp, #16
 8013810:	af00      	add	r7, sp, #0
 8013812:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013814:	f001 f9f6 	bl	8014c04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013820:	429a      	cmp	r2, r3
 8013822:	d102      	bne.n	801382a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013824:	2301      	movs	r3, #1
 8013826:	60fb      	str	r3, [r7, #12]
 8013828:	e001      	b.n	801382e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801382a:	2300      	movs	r3, #0
 801382c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801382e:	f001 fa19 	bl	8014c64 <vPortExitCritical>

	return xReturn;
 8013832:	68fb      	ldr	r3, [r7, #12]
}
 8013834:	4618      	mov	r0, r3
 8013836:	3710      	adds	r7, #16
 8013838:	46bd      	mov	sp, r7
 801383a:	bd80      	pop	{r7, pc}

0801383c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801383c:	b580      	push	{r7, lr}
 801383e:	b08e      	sub	sp, #56	; 0x38
 8013840:	af04      	add	r7, sp, #16
 8013842:	60f8      	str	r0, [r7, #12]
 8013844:	60b9      	str	r1, [r7, #8]
 8013846:	607a      	str	r2, [r7, #4]
 8013848:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801384a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801384c:	2b00      	cmp	r3, #0
 801384e:	d10a      	bne.n	8013866 <xTaskCreateStatic+0x2a>
	__asm volatile
 8013850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013854:	f383 8811 	msr	BASEPRI, r3
 8013858:	f3bf 8f6f 	isb	sy
 801385c:	f3bf 8f4f 	dsb	sy
 8013860:	623b      	str	r3, [r7, #32]
}
 8013862:	bf00      	nop
 8013864:	e7fe      	b.n	8013864 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8013866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013868:	2b00      	cmp	r3, #0
 801386a:	d10a      	bne.n	8013882 <xTaskCreateStatic+0x46>
	__asm volatile
 801386c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013870:	f383 8811 	msr	BASEPRI, r3
 8013874:	f3bf 8f6f 	isb	sy
 8013878:	f3bf 8f4f 	dsb	sy
 801387c:	61fb      	str	r3, [r7, #28]
}
 801387e:	bf00      	nop
 8013880:	e7fe      	b.n	8013880 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013882:	2354      	movs	r3, #84	; 0x54
 8013884:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013886:	693b      	ldr	r3, [r7, #16]
 8013888:	2b54      	cmp	r3, #84	; 0x54
 801388a:	d00a      	beq.n	80138a2 <xTaskCreateStatic+0x66>
	__asm volatile
 801388c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013890:	f383 8811 	msr	BASEPRI, r3
 8013894:	f3bf 8f6f 	isb	sy
 8013898:	f3bf 8f4f 	dsb	sy
 801389c:	61bb      	str	r3, [r7, #24]
}
 801389e:	bf00      	nop
 80138a0:	e7fe      	b.n	80138a0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80138a2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80138a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	d01e      	beq.n	80138e8 <xTaskCreateStatic+0xac>
 80138aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d01b      	beq.n	80138e8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80138b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138b2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80138b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80138b8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80138ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138bc:	2202      	movs	r2, #2
 80138be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80138c2:	2300      	movs	r3, #0
 80138c4:	9303      	str	r3, [sp, #12]
 80138c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138c8:	9302      	str	r3, [sp, #8]
 80138ca:	f107 0314 	add.w	r3, r7, #20
 80138ce:	9301      	str	r3, [sp, #4]
 80138d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138d2:	9300      	str	r3, [sp, #0]
 80138d4:	683b      	ldr	r3, [r7, #0]
 80138d6:	687a      	ldr	r2, [r7, #4]
 80138d8:	68b9      	ldr	r1, [r7, #8]
 80138da:	68f8      	ldr	r0, [r7, #12]
 80138dc:	f000 f850 	bl	8013980 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80138e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80138e2:	f000 f8d5 	bl	8013a90 <prvAddNewTaskToReadyList>
 80138e6:	e001      	b.n	80138ec <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80138e8:	2300      	movs	r3, #0
 80138ea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80138ec:	697b      	ldr	r3, [r7, #20]
	}
 80138ee:	4618      	mov	r0, r3
 80138f0:	3728      	adds	r7, #40	; 0x28
 80138f2:	46bd      	mov	sp, r7
 80138f4:	bd80      	pop	{r7, pc}

080138f6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80138f6:	b580      	push	{r7, lr}
 80138f8:	b08c      	sub	sp, #48	; 0x30
 80138fa:	af04      	add	r7, sp, #16
 80138fc:	60f8      	str	r0, [r7, #12]
 80138fe:	60b9      	str	r1, [r7, #8]
 8013900:	603b      	str	r3, [r7, #0]
 8013902:	4613      	mov	r3, r2
 8013904:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013906:	88fb      	ldrh	r3, [r7, #6]
 8013908:	009b      	lsls	r3, r3, #2
 801390a:	4618      	mov	r0, r3
 801390c:	f001 fa9c 	bl	8014e48 <pvPortMalloc>
 8013910:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013912:	697b      	ldr	r3, [r7, #20]
 8013914:	2b00      	cmp	r3, #0
 8013916:	d00e      	beq.n	8013936 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013918:	2054      	movs	r0, #84	; 0x54
 801391a:	f001 fa95 	bl	8014e48 <pvPortMalloc>
 801391e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013920:	69fb      	ldr	r3, [r7, #28]
 8013922:	2b00      	cmp	r3, #0
 8013924:	d003      	beq.n	801392e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013926:	69fb      	ldr	r3, [r7, #28]
 8013928:	697a      	ldr	r2, [r7, #20]
 801392a:	631a      	str	r2, [r3, #48]	; 0x30
 801392c:	e005      	b.n	801393a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801392e:	6978      	ldr	r0, [r7, #20]
 8013930:	f001 fb4e 	bl	8014fd0 <vPortFree>
 8013934:	e001      	b.n	801393a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013936:	2300      	movs	r3, #0
 8013938:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801393a:	69fb      	ldr	r3, [r7, #28]
 801393c:	2b00      	cmp	r3, #0
 801393e:	d017      	beq.n	8013970 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013940:	69fb      	ldr	r3, [r7, #28]
 8013942:	2200      	movs	r2, #0
 8013944:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013948:	88fa      	ldrh	r2, [r7, #6]
 801394a:	2300      	movs	r3, #0
 801394c:	9303      	str	r3, [sp, #12]
 801394e:	69fb      	ldr	r3, [r7, #28]
 8013950:	9302      	str	r3, [sp, #8]
 8013952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013954:	9301      	str	r3, [sp, #4]
 8013956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013958:	9300      	str	r3, [sp, #0]
 801395a:	683b      	ldr	r3, [r7, #0]
 801395c:	68b9      	ldr	r1, [r7, #8]
 801395e:	68f8      	ldr	r0, [r7, #12]
 8013960:	f000 f80e 	bl	8013980 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013964:	69f8      	ldr	r0, [r7, #28]
 8013966:	f000 f893 	bl	8013a90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801396a:	2301      	movs	r3, #1
 801396c:	61bb      	str	r3, [r7, #24]
 801396e:	e002      	b.n	8013976 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013970:	f04f 33ff 	mov.w	r3, #4294967295
 8013974:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013976:	69bb      	ldr	r3, [r7, #24]
	}
 8013978:	4618      	mov	r0, r3
 801397a:	3720      	adds	r7, #32
 801397c:	46bd      	mov	sp, r7
 801397e:	bd80      	pop	{r7, pc}

08013980 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013980:	b580      	push	{r7, lr}
 8013982:	b088      	sub	sp, #32
 8013984:	af00      	add	r7, sp, #0
 8013986:	60f8      	str	r0, [r7, #12]
 8013988:	60b9      	str	r1, [r7, #8]
 801398a:	607a      	str	r2, [r7, #4]
 801398c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801398e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013990:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8013998:	3b01      	subs	r3, #1
 801399a:	009b      	lsls	r3, r3, #2
 801399c:	4413      	add	r3, r2
 801399e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80139a0:	69bb      	ldr	r3, [r7, #24]
 80139a2:	f023 0307 	bic.w	r3, r3, #7
 80139a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80139a8:	69bb      	ldr	r3, [r7, #24]
 80139aa:	f003 0307 	and.w	r3, r3, #7
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d00a      	beq.n	80139c8 <prvInitialiseNewTask+0x48>
	__asm volatile
 80139b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139b6:	f383 8811 	msr	BASEPRI, r3
 80139ba:	f3bf 8f6f 	isb	sy
 80139be:	f3bf 8f4f 	dsb	sy
 80139c2:	617b      	str	r3, [r7, #20]
}
 80139c4:	bf00      	nop
 80139c6:	e7fe      	b.n	80139c6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80139c8:	68bb      	ldr	r3, [r7, #8]
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d01f      	beq.n	8013a0e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80139ce:	2300      	movs	r3, #0
 80139d0:	61fb      	str	r3, [r7, #28]
 80139d2:	e012      	b.n	80139fa <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80139d4:	68ba      	ldr	r2, [r7, #8]
 80139d6:	69fb      	ldr	r3, [r7, #28]
 80139d8:	4413      	add	r3, r2
 80139da:	7819      	ldrb	r1, [r3, #0]
 80139dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80139de:	69fb      	ldr	r3, [r7, #28]
 80139e0:	4413      	add	r3, r2
 80139e2:	3334      	adds	r3, #52	; 0x34
 80139e4:	460a      	mov	r2, r1
 80139e6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80139e8:	68ba      	ldr	r2, [r7, #8]
 80139ea:	69fb      	ldr	r3, [r7, #28]
 80139ec:	4413      	add	r3, r2
 80139ee:	781b      	ldrb	r3, [r3, #0]
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d006      	beq.n	8013a02 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80139f4:	69fb      	ldr	r3, [r7, #28]
 80139f6:	3301      	adds	r3, #1
 80139f8:	61fb      	str	r3, [r7, #28]
 80139fa:	69fb      	ldr	r3, [r7, #28]
 80139fc:	2b0f      	cmp	r3, #15
 80139fe:	d9e9      	bls.n	80139d4 <prvInitialiseNewTask+0x54>
 8013a00:	e000      	b.n	8013a04 <prvInitialiseNewTask+0x84>
			{
				break;
 8013a02:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a06:	2200      	movs	r2, #0
 8013a08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013a0c:	e003      	b.n	8013a16 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8013a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a10:	2200      	movs	r2, #0
 8013a12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a18:	2b06      	cmp	r3, #6
 8013a1a:	d901      	bls.n	8013a20 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013a1c:	2306      	movs	r3, #6
 8013a1e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013a24:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013a2a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8013a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a2e:	2200      	movs	r2, #0
 8013a30:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a34:	3304      	adds	r3, #4
 8013a36:	4618      	mov	r0, r3
 8013a38:	f7ff f8d9 	bl	8012bee <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a3e:	3318      	adds	r3, #24
 8013a40:	4618      	mov	r0, r3
 8013a42:	f7ff f8d4 	bl	8012bee <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013a4a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a4e:	f1c3 0207 	rsb	r2, r3, #7
 8013a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a54:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013a5a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a5e:	2200      	movs	r2, #0
 8013a60:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a64:	2200      	movs	r2, #0
 8013a66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013a6a:	683a      	ldr	r2, [r7, #0]
 8013a6c:	68f9      	ldr	r1, [r7, #12]
 8013a6e:	69b8      	ldr	r0, [r7, #24]
 8013a70:	f000 ff9e 	bl	80149b0 <pxPortInitialiseStack>
 8013a74:	4602      	mov	r2, r0
 8013a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a78:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d002      	beq.n	8013a86 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013a84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013a86:	bf00      	nop
 8013a88:	3720      	adds	r7, #32
 8013a8a:	46bd      	mov	sp, r7
 8013a8c:	bd80      	pop	{r7, pc}
	...

08013a90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013a90:	b580      	push	{r7, lr}
 8013a92:	b082      	sub	sp, #8
 8013a94:	af00      	add	r7, sp, #0
 8013a96:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013a98:	f001 f8b4 	bl	8014c04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013a9c:	4b2a      	ldr	r3, [pc, #168]	; (8013b48 <prvAddNewTaskToReadyList+0xb8>)
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	3301      	adds	r3, #1
 8013aa2:	4a29      	ldr	r2, [pc, #164]	; (8013b48 <prvAddNewTaskToReadyList+0xb8>)
 8013aa4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013aa6:	4b29      	ldr	r3, [pc, #164]	; (8013b4c <prvAddNewTaskToReadyList+0xbc>)
 8013aa8:	681b      	ldr	r3, [r3, #0]
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d109      	bne.n	8013ac2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8013aae:	4a27      	ldr	r2, [pc, #156]	; (8013b4c <prvAddNewTaskToReadyList+0xbc>)
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013ab4:	4b24      	ldr	r3, [pc, #144]	; (8013b48 <prvAddNewTaskToReadyList+0xb8>)
 8013ab6:	681b      	ldr	r3, [r3, #0]
 8013ab8:	2b01      	cmp	r3, #1
 8013aba:	d110      	bne.n	8013ade <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013abc:	f000 fbc6 	bl	801424c <prvInitialiseTaskLists>
 8013ac0:	e00d      	b.n	8013ade <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013ac2:	4b23      	ldr	r3, [pc, #140]	; (8013b50 <prvAddNewTaskToReadyList+0xc0>)
 8013ac4:	681b      	ldr	r3, [r3, #0]
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d109      	bne.n	8013ade <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013aca:	4b20      	ldr	r3, [pc, #128]	; (8013b4c <prvAddNewTaskToReadyList+0xbc>)
 8013acc:	681b      	ldr	r3, [r3, #0]
 8013ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ad4:	429a      	cmp	r2, r3
 8013ad6:	d802      	bhi.n	8013ade <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013ad8:	4a1c      	ldr	r2, [pc, #112]	; (8013b4c <prvAddNewTaskToReadyList+0xbc>)
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013ade:	4b1d      	ldr	r3, [pc, #116]	; (8013b54 <prvAddNewTaskToReadyList+0xc4>)
 8013ae0:	681b      	ldr	r3, [r3, #0]
 8013ae2:	3301      	adds	r3, #1
 8013ae4:	4a1b      	ldr	r2, [pc, #108]	; (8013b54 <prvAddNewTaskToReadyList+0xc4>)
 8013ae6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013aec:	2201      	movs	r2, #1
 8013aee:	409a      	lsls	r2, r3
 8013af0:	4b19      	ldr	r3, [pc, #100]	; (8013b58 <prvAddNewTaskToReadyList+0xc8>)
 8013af2:	681b      	ldr	r3, [r3, #0]
 8013af4:	4313      	orrs	r3, r2
 8013af6:	4a18      	ldr	r2, [pc, #96]	; (8013b58 <prvAddNewTaskToReadyList+0xc8>)
 8013af8:	6013      	str	r3, [r2, #0]
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013afe:	4613      	mov	r3, r2
 8013b00:	009b      	lsls	r3, r3, #2
 8013b02:	4413      	add	r3, r2
 8013b04:	009b      	lsls	r3, r3, #2
 8013b06:	4a15      	ldr	r2, [pc, #84]	; (8013b5c <prvAddNewTaskToReadyList+0xcc>)
 8013b08:	441a      	add	r2, r3
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	3304      	adds	r3, #4
 8013b0e:	4619      	mov	r1, r3
 8013b10:	4610      	mov	r0, r2
 8013b12:	f7ff f879 	bl	8012c08 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013b16:	f001 f8a5 	bl	8014c64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013b1a:	4b0d      	ldr	r3, [pc, #52]	; (8013b50 <prvAddNewTaskToReadyList+0xc0>)
 8013b1c:	681b      	ldr	r3, [r3, #0]
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d00e      	beq.n	8013b40 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013b22:	4b0a      	ldr	r3, [pc, #40]	; (8013b4c <prvAddNewTaskToReadyList+0xbc>)
 8013b24:	681b      	ldr	r3, [r3, #0]
 8013b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b2c:	429a      	cmp	r2, r3
 8013b2e:	d207      	bcs.n	8013b40 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013b30:	4b0b      	ldr	r3, [pc, #44]	; (8013b60 <prvAddNewTaskToReadyList+0xd0>)
 8013b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013b36:	601a      	str	r2, [r3, #0]
 8013b38:	f3bf 8f4f 	dsb	sy
 8013b3c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013b40:	bf00      	nop
 8013b42:	3708      	adds	r7, #8
 8013b44:	46bd      	mov	sp, r7
 8013b46:	bd80      	pop	{r7, pc}
 8013b48:	20001114 	.word	0x20001114
 8013b4c:	20001014 	.word	0x20001014
 8013b50:	20001120 	.word	0x20001120
 8013b54:	20001130 	.word	0x20001130
 8013b58:	2000111c 	.word	0x2000111c
 8013b5c:	20001018 	.word	0x20001018
 8013b60:	e000ed04 	.word	0xe000ed04

08013b64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013b64:	b580      	push	{r7, lr}
 8013b66:	b084      	sub	sp, #16
 8013b68:	af00      	add	r7, sp, #0
 8013b6a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013b6c:	2300      	movs	r3, #0
 8013b6e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d017      	beq.n	8013ba6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8013b76:	4b13      	ldr	r3, [pc, #76]	; (8013bc4 <vTaskDelay+0x60>)
 8013b78:	681b      	ldr	r3, [r3, #0]
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	d00a      	beq.n	8013b94 <vTaskDelay+0x30>
	__asm volatile
 8013b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b82:	f383 8811 	msr	BASEPRI, r3
 8013b86:	f3bf 8f6f 	isb	sy
 8013b8a:	f3bf 8f4f 	dsb	sy
 8013b8e:	60bb      	str	r3, [r7, #8]
}
 8013b90:	bf00      	nop
 8013b92:	e7fe      	b.n	8013b92 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8013b94:	f000 f87a 	bl	8013c8c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013b98:	2100      	movs	r1, #0
 8013b9a:	6878      	ldr	r0, [r7, #4]
 8013b9c:	f000 fea2 	bl	80148e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013ba0:	f000 f882 	bl	8013ca8 <xTaskResumeAll>
 8013ba4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013ba6:	68fb      	ldr	r3, [r7, #12]
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d107      	bne.n	8013bbc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8013bac:	4b06      	ldr	r3, [pc, #24]	; (8013bc8 <vTaskDelay+0x64>)
 8013bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013bb2:	601a      	str	r2, [r3, #0]
 8013bb4:	f3bf 8f4f 	dsb	sy
 8013bb8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013bbc:	bf00      	nop
 8013bbe:	3710      	adds	r7, #16
 8013bc0:	46bd      	mov	sp, r7
 8013bc2:	bd80      	pop	{r7, pc}
 8013bc4:	2000113c 	.word	0x2000113c
 8013bc8:	e000ed04 	.word	0xe000ed04

08013bcc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013bcc:	b580      	push	{r7, lr}
 8013bce:	b08a      	sub	sp, #40	; 0x28
 8013bd0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013bd2:	2300      	movs	r3, #0
 8013bd4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013bd6:	2300      	movs	r3, #0
 8013bd8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013bda:	463a      	mov	r2, r7
 8013bdc:	1d39      	adds	r1, r7, #4
 8013bde:	f107 0308 	add.w	r3, r7, #8
 8013be2:	4618      	mov	r0, r3
 8013be4:	f7ee f82c 	bl	8001c40 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013be8:	6839      	ldr	r1, [r7, #0]
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	68ba      	ldr	r2, [r7, #8]
 8013bee:	9202      	str	r2, [sp, #8]
 8013bf0:	9301      	str	r3, [sp, #4]
 8013bf2:	2300      	movs	r3, #0
 8013bf4:	9300      	str	r3, [sp, #0]
 8013bf6:	2300      	movs	r3, #0
 8013bf8:	460a      	mov	r2, r1
 8013bfa:	491e      	ldr	r1, [pc, #120]	; (8013c74 <vTaskStartScheduler+0xa8>)
 8013bfc:	481e      	ldr	r0, [pc, #120]	; (8013c78 <vTaskStartScheduler+0xac>)
 8013bfe:	f7ff fe1d 	bl	801383c <xTaskCreateStatic>
 8013c02:	4603      	mov	r3, r0
 8013c04:	4a1d      	ldr	r2, [pc, #116]	; (8013c7c <vTaskStartScheduler+0xb0>)
 8013c06:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013c08:	4b1c      	ldr	r3, [pc, #112]	; (8013c7c <vTaskStartScheduler+0xb0>)
 8013c0a:	681b      	ldr	r3, [r3, #0]
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d002      	beq.n	8013c16 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013c10:	2301      	movs	r3, #1
 8013c12:	617b      	str	r3, [r7, #20]
 8013c14:	e001      	b.n	8013c1a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013c16:	2300      	movs	r3, #0
 8013c18:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013c1a:	697b      	ldr	r3, [r7, #20]
 8013c1c:	2b01      	cmp	r3, #1
 8013c1e:	d116      	bne.n	8013c4e <vTaskStartScheduler+0x82>
	__asm volatile
 8013c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c24:	f383 8811 	msr	BASEPRI, r3
 8013c28:	f3bf 8f6f 	isb	sy
 8013c2c:	f3bf 8f4f 	dsb	sy
 8013c30:	613b      	str	r3, [r7, #16]
}
 8013c32:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013c34:	4b12      	ldr	r3, [pc, #72]	; (8013c80 <vTaskStartScheduler+0xb4>)
 8013c36:	f04f 32ff 	mov.w	r2, #4294967295
 8013c3a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013c3c:	4b11      	ldr	r3, [pc, #68]	; (8013c84 <vTaskStartScheduler+0xb8>)
 8013c3e:	2201      	movs	r2, #1
 8013c40:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013c42:	4b11      	ldr	r3, [pc, #68]	; (8013c88 <vTaskStartScheduler+0xbc>)
 8013c44:	2200      	movs	r2, #0
 8013c46:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013c48:	f000 ff3a 	bl	8014ac0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013c4c:	e00e      	b.n	8013c6c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013c4e:	697b      	ldr	r3, [r7, #20]
 8013c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c54:	d10a      	bne.n	8013c6c <vTaskStartScheduler+0xa0>
	__asm volatile
 8013c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c5a:	f383 8811 	msr	BASEPRI, r3
 8013c5e:	f3bf 8f6f 	isb	sy
 8013c62:	f3bf 8f4f 	dsb	sy
 8013c66:	60fb      	str	r3, [r7, #12]
}
 8013c68:	bf00      	nop
 8013c6a:	e7fe      	b.n	8013c6a <vTaskStartScheduler+0x9e>
}
 8013c6c:	bf00      	nop
 8013c6e:	3718      	adds	r7, #24
 8013c70:	46bd      	mov	sp, r7
 8013c72:	bd80      	pop	{r7, pc}
 8013c74:	0801c22c 	.word	0x0801c22c
 8013c78:	0801421d 	.word	0x0801421d
 8013c7c:	20001138 	.word	0x20001138
 8013c80:	20001134 	.word	0x20001134
 8013c84:	20001120 	.word	0x20001120
 8013c88:	20001118 	.word	0x20001118

08013c8c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013c8c:	b480      	push	{r7}
 8013c8e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8013c90:	4b04      	ldr	r3, [pc, #16]	; (8013ca4 <vTaskSuspendAll+0x18>)
 8013c92:	681b      	ldr	r3, [r3, #0]
 8013c94:	3301      	adds	r3, #1
 8013c96:	4a03      	ldr	r2, [pc, #12]	; (8013ca4 <vTaskSuspendAll+0x18>)
 8013c98:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8013c9a:	bf00      	nop
 8013c9c:	46bd      	mov	sp, r7
 8013c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ca2:	4770      	bx	lr
 8013ca4:	2000113c 	.word	0x2000113c

08013ca8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013ca8:	b580      	push	{r7, lr}
 8013caa:	b084      	sub	sp, #16
 8013cac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013cae:	2300      	movs	r3, #0
 8013cb0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013cb2:	2300      	movs	r3, #0
 8013cb4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013cb6:	4b41      	ldr	r3, [pc, #260]	; (8013dbc <xTaskResumeAll+0x114>)
 8013cb8:	681b      	ldr	r3, [r3, #0]
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d10a      	bne.n	8013cd4 <xTaskResumeAll+0x2c>
	__asm volatile
 8013cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cc2:	f383 8811 	msr	BASEPRI, r3
 8013cc6:	f3bf 8f6f 	isb	sy
 8013cca:	f3bf 8f4f 	dsb	sy
 8013cce:	603b      	str	r3, [r7, #0]
}
 8013cd0:	bf00      	nop
 8013cd2:	e7fe      	b.n	8013cd2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013cd4:	f000 ff96 	bl	8014c04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013cd8:	4b38      	ldr	r3, [pc, #224]	; (8013dbc <xTaskResumeAll+0x114>)
 8013cda:	681b      	ldr	r3, [r3, #0]
 8013cdc:	3b01      	subs	r3, #1
 8013cde:	4a37      	ldr	r2, [pc, #220]	; (8013dbc <xTaskResumeAll+0x114>)
 8013ce0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013ce2:	4b36      	ldr	r3, [pc, #216]	; (8013dbc <xTaskResumeAll+0x114>)
 8013ce4:	681b      	ldr	r3, [r3, #0]
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d161      	bne.n	8013dae <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013cea:	4b35      	ldr	r3, [pc, #212]	; (8013dc0 <xTaskResumeAll+0x118>)
 8013cec:	681b      	ldr	r3, [r3, #0]
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d05d      	beq.n	8013dae <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013cf2:	e02e      	b.n	8013d52 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013cf4:	4b33      	ldr	r3, [pc, #204]	; (8013dc4 <xTaskResumeAll+0x11c>)
 8013cf6:	68db      	ldr	r3, [r3, #12]
 8013cf8:	68db      	ldr	r3, [r3, #12]
 8013cfa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013cfc:	68fb      	ldr	r3, [r7, #12]
 8013cfe:	3318      	adds	r3, #24
 8013d00:	4618      	mov	r0, r3
 8013d02:	f7fe ffde 	bl	8012cc2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013d06:	68fb      	ldr	r3, [r7, #12]
 8013d08:	3304      	adds	r3, #4
 8013d0a:	4618      	mov	r0, r3
 8013d0c:	f7fe ffd9 	bl	8012cc2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013d10:	68fb      	ldr	r3, [r7, #12]
 8013d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d14:	2201      	movs	r2, #1
 8013d16:	409a      	lsls	r2, r3
 8013d18:	4b2b      	ldr	r3, [pc, #172]	; (8013dc8 <xTaskResumeAll+0x120>)
 8013d1a:	681b      	ldr	r3, [r3, #0]
 8013d1c:	4313      	orrs	r3, r2
 8013d1e:	4a2a      	ldr	r2, [pc, #168]	; (8013dc8 <xTaskResumeAll+0x120>)
 8013d20:	6013      	str	r3, [r2, #0]
 8013d22:	68fb      	ldr	r3, [r7, #12]
 8013d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d26:	4613      	mov	r3, r2
 8013d28:	009b      	lsls	r3, r3, #2
 8013d2a:	4413      	add	r3, r2
 8013d2c:	009b      	lsls	r3, r3, #2
 8013d2e:	4a27      	ldr	r2, [pc, #156]	; (8013dcc <xTaskResumeAll+0x124>)
 8013d30:	441a      	add	r2, r3
 8013d32:	68fb      	ldr	r3, [r7, #12]
 8013d34:	3304      	adds	r3, #4
 8013d36:	4619      	mov	r1, r3
 8013d38:	4610      	mov	r0, r2
 8013d3a:	f7fe ff65 	bl	8012c08 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013d3e:	68fb      	ldr	r3, [r7, #12]
 8013d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d42:	4b23      	ldr	r3, [pc, #140]	; (8013dd0 <xTaskResumeAll+0x128>)
 8013d44:	681b      	ldr	r3, [r3, #0]
 8013d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d48:	429a      	cmp	r2, r3
 8013d4a:	d302      	bcc.n	8013d52 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8013d4c:	4b21      	ldr	r3, [pc, #132]	; (8013dd4 <xTaskResumeAll+0x12c>)
 8013d4e:	2201      	movs	r2, #1
 8013d50:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013d52:	4b1c      	ldr	r3, [pc, #112]	; (8013dc4 <xTaskResumeAll+0x11c>)
 8013d54:	681b      	ldr	r3, [r3, #0]
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d1cc      	bne.n	8013cf4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013d5a:	68fb      	ldr	r3, [r7, #12]
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	d001      	beq.n	8013d64 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013d60:	f000 fb12 	bl	8014388 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8013d64:	4b1c      	ldr	r3, [pc, #112]	; (8013dd8 <xTaskResumeAll+0x130>)
 8013d66:	681b      	ldr	r3, [r3, #0]
 8013d68:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d010      	beq.n	8013d92 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013d70:	f000 f836 	bl	8013de0 <xTaskIncrementTick>
 8013d74:	4603      	mov	r3, r0
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d002      	beq.n	8013d80 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8013d7a:	4b16      	ldr	r3, [pc, #88]	; (8013dd4 <xTaskResumeAll+0x12c>)
 8013d7c:	2201      	movs	r2, #1
 8013d7e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	3b01      	subs	r3, #1
 8013d84:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d1f1      	bne.n	8013d70 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8013d8c:	4b12      	ldr	r3, [pc, #72]	; (8013dd8 <xTaskResumeAll+0x130>)
 8013d8e:	2200      	movs	r2, #0
 8013d90:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013d92:	4b10      	ldr	r3, [pc, #64]	; (8013dd4 <xTaskResumeAll+0x12c>)
 8013d94:	681b      	ldr	r3, [r3, #0]
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d009      	beq.n	8013dae <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013d9a:	2301      	movs	r3, #1
 8013d9c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013d9e:	4b0f      	ldr	r3, [pc, #60]	; (8013ddc <xTaskResumeAll+0x134>)
 8013da0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013da4:	601a      	str	r2, [r3, #0]
 8013da6:	f3bf 8f4f 	dsb	sy
 8013daa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013dae:	f000 ff59 	bl	8014c64 <vPortExitCritical>

	return xAlreadyYielded;
 8013db2:	68bb      	ldr	r3, [r7, #8]
}
 8013db4:	4618      	mov	r0, r3
 8013db6:	3710      	adds	r7, #16
 8013db8:	46bd      	mov	sp, r7
 8013dba:	bd80      	pop	{r7, pc}
 8013dbc:	2000113c 	.word	0x2000113c
 8013dc0:	20001114 	.word	0x20001114
 8013dc4:	200010d4 	.word	0x200010d4
 8013dc8:	2000111c 	.word	0x2000111c
 8013dcc:	20001018 	.word	0x20001018
 8013dd0:	20001014 	.word	0x20001014
 8013dd4:	20001128 	.word	0x20001128
 8013dd8:	20001124 	.word	0x20001124
 8013ddc:	e000ed04 	.word	0xe000ed04

08013de0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013de0:	b580      	push	{r7, lr}
 8013de2:	b086      	sub	sp, #24
 8013de4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013de6:	2300      	movs	r3, #0
 8013de8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013dea:	4b4e      	ldr	r3, [pc, #312]	; (8013f24 <xTaskIncrementTick+0x144>)
 8013dec:	681b      	ldr	r3, [r3, #0]
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	f040 8088 	bne.w	8013f04 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013df4:	4b4c      	ldr	r3, [pc, #304]	; (8013f28 <xTaskIncrementTick+0x148>)
 8013df6:	681b      	ldr	r3, [r3, #0]
 8013df8:	3301      	adds	r3, #1
 8013dfa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013dfc:	4a4a      	ldr	r2, [pc, #296]	; (8013f28 <xTaskIncrementTick+0x148>)
 8013dfe:	693b      	ldr	r3, [r7, #16]
 8013e00:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013e02:	693b      	ldr	r3, [r7, #16]
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d120      	bne.n	8013e4a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8013e08:	4b48      	ldr	r3, [pc, #288]	; (8013f2c <xTaskIncrementTick+0x14c>)
 8013e0a:	681b      	ldr	r3, [r3, #0]
 8013e0c:	681b      	ldr	r3, [r3, #0]
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d00a      	beq.n	8013e28 <xTaskIncrementTick+0x48>
	__asm volatile
 8013e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e16:	f383 8811 	msr	BASEPRI, r3
 8013e1a:	f3bf 8f6f 	isb	sy
 8013e1e:	f3bf 8f4f 	dsb	sy
 8013e22:	603b      	str	r3, [r7, #0]
}
 8013e24:	bf00      	nop
 8013e26:	e7fe      	b.n	8013e26 <xTaskIncrementTick+0x46>
 8013e28:	4b40      	ldr	r3, [pc, #256]	; (8013f2c <xTaskIncrementTick+0x14c>)
 8013e2a:	681b      	ldr	r3, [r3, #0]
 8013e2c:	60fb      	str	r3, [r7, #12]
 8013e2e:	4b40      	ldr	r3, [pc, #256]	; (8013f30 <xTaskIncrementTick+0x150>)
 8013e30:	681b      	ldr	r3, [r3, #0]
 8013e32:	4a3e      	ldr	r2, [pc, #248]	; (8013f2c <xTaskIncrementTick+0x14c>)
 8013e34:	6013      	str	r3, [r2, #0]
 8013e36:	4a3e      	ldr	r2, [pc, #248]	; (8013f30 <xTaskIncrementTick+0x150>)
 8013e38:	68fb      	ldr	r3, [r7, #12]
 8013e3a:	6013      	str	r3, [r2, #0]
 8013e3c:	4b3d      	ldr	r3, [pc, #244]	; (8013f34 <xTaskIncrementTick+0x154>)
 8013e3e:	681b      	ldr	r3, [r3, #0]
 8013e40:	3301      	adds	r3, #1
 8013e42:	4a3c      	ldr	r2, [pc, #240]	; (8013f34 <xTaskIncrementTick+0x154>)
 8013e44:	6013      	str	r3, [r2, #0]
 8013e46:	f000 fa9f 	bl	8014388 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013e4a:	4b3b      	ldr	r3, [pc, #236]	; (8013f38 <xTaskIncrementTick+0x158>)
 8013e4c:	681b      	ldr	r3, [r3, #0]
 8013e4e:	693a      	ldr	r2, [r7, #16]
 8013e50:	429a      	cmp	r2, r3
 8013e52:	d348      	bcc.n	8013ee6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013e54:	4b35      	ldr	r3, [pc, #212]	; (8013f2c <xTaskIncrementTick+0x14c>)
 8013e56:	681b      	ldr	r3, [r3, #0]
 8013e58:	681b      	ldr	r3, [r3, #0]
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d104      	bne.n	8013e68 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013e5e:	4b36      	ldr	r3, [pc, #216]	; (8013f38 <xTaskIncrementTick+0x158>)
 8013e60:	f04f 32ff 	mov.w	r2, #4294967295
 8013e64:	601a      	str	r2, [r3, #0]
					break;
 8013e66:	e03e      	b.n	8013ee6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013e68:	4b30      	ldr	r3, [pc, #192]	; (8013f2c <xTaskIncrementTick+0x14c>)
 8013e6a:	681b      	ldr	r3, [r3, #0]
 8013e6c:	68db      	ldr	r3, [r3, #12]
 8013e6e:	68db      	ldr	r3, [r3, #12]
 8013e70:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013e72:	68bb      	ldr	r3, [r7, #8]
 8013e74:	685b      	ldr	r3, [r3, #4]
 8013e76:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013e78:	693a      	ldr	r2, [r7, #16]
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	429a      	cmp	r2, r3
 8013e7e:	d203      	bcs.n	8013e88 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013e80:	4a2d      	ldr	r2, [pc, #180]	; (8013f38 <xTaskIncrementTick+0x158>)
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013e86:	e02e      	b.n	8013ee6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013e88:	68bb      	ldr	r3, [r7, #8]
 8013e8a:	3304      	adds	r3, #4
 8013e8c:	4618      	mov	r0, r3
 8013e8e:	f7fe ff18 	bl	8012cc2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013e92:	68bb      	ldr	r3, [r7, #8]
 8013e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d004      	beq.n	8013ea4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013e9a:	68bb      	ldr	r3, [r7, #8]
 8013e9c:	3318      	adds	r3, #24
 8013e9e:	4618      	mov	r0, r3
 8013ea0:	f7fe ff0f 	bl	8012cc2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013ea4:	68bb      	ldr	r3, [r7, #8]
 8013ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ea8:	2201      	movs	r2, #1
 8013eaa:	409a      	lsls	r2, r3
 8013eac:	4b23      	ldr	r3, [pc, #140]	; (8013f3c <xTaskIncrementTick+0x15c>)
 8013eae:	681b      	ldr	r3, [r3, #0]
 8013eb0:	4313      	orrs	r3, r2
 8013eb2:	4a22      	ldr	r2, [pc, #136]	; (8013f3c <xTaskIncrementTick+0x15c>)
 8013eb4:	6013      	str	r3, [r2, #0]
 8013eb6:	68bb      	ldr	r3, [r7, #8]
 8013eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013eba:	4613      	mov	r3, r2
 8013ebc:	009b      	lsls	r3, r3, #2
 8013ebe:	4413      	add	r3, r2
 8013ec0:	009b      	lsls	r3, r3, #2
 8013ec2:	4a1f      	ldr	r2, [pc, #124]	; (8013f40 <xTaskIncrementTick+0x160>)
 8013ec4:	441a      	add	r2, r3
 8013ec6:	68bb      	ldr	r3, [r7, #8]
 8013ec8:	3304      	adds	r3, #4
 8013eca:	4619      	mov	r1, r3
 8013ecc:	4610      	mov	r0, r2
 8013ece:	f7fe fe9b 	bl	8012c08 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013ed2:	68bb      	ldr	r3, [r7, #8]
 8013ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ed6:	4b1b      	ldr	r3, [pc, #108]	; (8013f44 <xTaskIncrementTick+0x164>)
 8013ed8:	681b      	ldr	r3, [r3, #0]
 8013eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013edc:	429a      	cmp	r2, r3
 8013ede:	d3b9      	bcc.n	8013e54 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8013ee0:	2301      	movs	r3, #1
 8013ee2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013ee4:	e7b6      	b.n	8013e54 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013ee6:	4b17      	ldr	r3, [pc, #92]	; (8013f44 <xTaskIncrementTick+0x164>)
 8013ee8:	681b      	ldr	r3, [r3, #0]
 8013eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013eec:	4914      	ldr	r1, [pc, #80]	; (8013f40 <xTaskIncrementTick+0x160>)
 8013eee:	4613      	mov	r3, r2
 8013ef0:	009b      	lsls	r3, r3, #2
 8013ef2:	4413      	add	r3, r2
 8013ef4:	009b      	lsls	r3, r3, #2
 8013ef6:	440b      	add	r3, r1
 8013ef8:	681b      	ldr	r3, [r3, #0]
 8013efa:	2b01      	cmp	r3, #1
 8013efc:	d907      	bls.n	8013f0e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8013efe:	2301      	movs	r3, #1
 8013f00:	617b      	str	r3, [r7, #20]
 8013f02:	e004      	b.n	8013f0e <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8013f04:	4b10      	ldr	r3, [pc, #64]	; (8013f48 <xTaskIncrementTick+0x168>)
 8013f06:	681b      	ldr	r3, [r3, #0]
 8013f08:	3301      	adds	r3, #1
 8013f0a:	4a0f      	ldr	r2, [pc, #60]	; (8013f48 <xTaskIncrementTick+0x168>)
 8013f0c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8013f0e:	4b0f      	ldr	r3, [pc, #60]	; (8013f4c <xTaskIncrementTick+0x16c>)
 8013f10:	681b      	ldr	r3, [r3, #0]
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d001      	beq.n	8013f1a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8013f16:	2301      	movs	r3, #1
 8013f18:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8013f1a:	697b      	ldr	r3, [r7, #20]
}
 8013f1c:	4618      	mov	r0, r3
 8013f1e:	3718      	adds	r7, #24
 8013f20:	46bd      	mov	sp, r7
 8013f22:	bd80      	pop	{r7, pc}
 8013f24:	2000113c 	.word	0x2000113c
 8013f28:	20001118 	.word	0x20001118
 8013f2c:	200010cc 	.word	0x200010cc
 8013f30:	200010d0 	.word	0x200010d0
 8013f34:	2000112c 	.word	0x2000112c
 8013f38:	20001134 	.word	0x20001134
 8013f3c:	2000111c 	.word	0x2000111c
 8013f40:	20001018 	.word	0x20001018
 8013f44:	20001014 	.word	0x20001014
 8013f48:	20001124 	.word	0x20001124
 8013f4c:	20001128 	.word	0x20001128

08013f50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013f50:	b480      	push	{r7}
 8013f52:	b087      	sub	sp, #28
 8013f54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013f56:	4b27      	ldr	r3, [pc, #156]	; (8013ff4 <vTaskSwitchContext+0xa4>)
 8013f58:	681b      	ldr	r3, [r3, #0]
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d003      	beq.n	8013f66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013f5e:	4b26      	ldr	r3, [pc, #152]	; (8013ff8 <vTaskSwitchContext+0xa8>)
 8013f60:	2201      	movs	r2, #1
 8013f62:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013f64:	e03f      	b.n	8013fe6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8013f66:	4b24      	ldr	r3, [pc, #144]	; (8013ff8 <vTaskSwitchContext+0xa8>)
 8013f68:	2200      	movs	r2, #0
 8013f6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013f6c:	4b23      	ldr	r3, [pc, #140]	; (8013ffc <vTaskSwitchContext+0xac>)
 8013f6e:	681b      	ldr	r3, [r3, #0]
 8013f70:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	fab3 f383 	clz	r3, r3
 8013f78:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8013f7a:	7afb      	ldrb	r3, [r7, #11]
 8013f7c:	f1c3 031f 	rsb	r3, r3, #31
 8013f80:	617b      	str	r3, [r7, #20]
 8013f82:	491f      	ldr	r1, [pc, #124]	; (8014000 <vTaskSwitchContext+0xb0>)
 8013f84:	697a      	ldr	r2, [r7, #20]
 8013f86:	4613      	mov	r3, r2
 8013f88:	009b      	lsls	r3, r3, #2
 8013f8a:	4413      	add	r3, r2
 8013f8c:	009b      	lsls	r3, r3, #2
 8013f8e:	440b      	add	r3, r1
 8013f90:	681b      	ldr	r3, [r3, #0]
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d10a      	bne.n	8013fac <vTaskSwitchContext+0x5c>
	__asm volatile
 8013f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f9a:	f383 8811 	msr	BASEPRI, r3
 8013f9e:	f3bf 8f6f 	isb	sy
 8013fa2:	f3bf 8f4f 	dsb	sy
 8013fa6:	607b      	str	r3, [r7, #4]
}
 8013fa8:	bf00      	nop
 8013faa:	e7fe      	b.n	8013faa <vTaskSwitchContext+0x5a>
 8013fac:	697a      	ldr	r2, [r7, #20]
 8013fae:	4613      	mov	r3, r2
 8013fb0:	009b      	lsls	r3, r3, #2
 8013fb2:	4413      	add	r3, r2
 8013fb4:	009b      	lsls	r3, r3, #2
 8013fb6:	4a12      	ldr	r2, [pc, #72]	; (8014000 <vTaskSwitchContext+0xb0>)
 8013fb8:	4413      	add	r3, r2
 8013fba:	613b      	str	r3, [r7, #16]
 8013fbc:	693b      	ldr	r3, [r7, #16]
 8013fbe:	685b      	ldr	r3, [r3, #4]
 8013fc0:	685a      	ldr	r2, [r3, #4]
 8013fc2:	693b      	ldr	r3, [r7, #16]
 8013fc4:	605a      	str	r2, [r3, #4]
 8013fc6:	693b      	ldr	r3, [r7, #16]
 8013fc8:	685a      	ldr	r2, [r3, #4]
 8013fca:	693b      	ldr	r3, [r7, #16]
 8013fcc:	3308      	adds	r3, #8
 8013fce:	429a      	cmp	r2, r3
 8013fd0:	d104      	bne.n	8013fdc <vTaskSwitchContext+0x8c>
 8013fd2:	693b      	ldr	r3, [r7, #16]
 8013fd4:	685b      	ldr	r3, [r3, #4]
 8013fd6:	685a      	ldr	r2, [r3, #4]
 8013fd8:	693b      	ldr	r3, [r7, #16]
 8013fda:	605a      	str	r2, [r3, #4]
 8013fdc:	693b      	ldr	r3, [r7, #16]
 8013fde:	685b      	ldr	r3, [r3, #4]
 8013fe0:	68db      	ldr	r3, [r3, #12]
 8013fe2:	4a08      	ldr	r2, [pc, #32]	; (8014004 <vTaskSwitchContext+0xb4>)
 8013fe4:	6013      	str	r3, [r2, #0]
}
 8013fe6:	bf00      	nop
 8013fe8:	371c      	adds	r7, #28
 8013fea:	46bd      	mov	sp, r7
 8013fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ff0:	4770      	bx	lr
 8013ff2:	bf00      	nop
 8013ff4:	2000113c 	.word	0x2000113c
 8013ff8:	20001128 	.word	0x20001128
 8013ffc:	2000111c 	.word	0x2000111c
 8014000:	20001018 	.word	0x20001018
 8014004:	20001014 	.word	0x20001014

08014008 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014008:	b580      	push	{r7, lr}
 801400a:	b084      	sub	sp, #16
 801400c:	af00      	add	r7, sp, #0
 801400e:	6078      	str	r0, [r7, #4]
 8014010:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	2b00      	cmp	r3, #0
 8014016:	d10a      	bne.n	801402e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8014018:	f04f 0350 	mov.w	r3, #80	; 0x50
 801401c:	f383 8811 	msr	BASEPRI, r3
 8014020:	f3bf 8f6f 	isb	sy
 8014024:	f3bf 8f4f 	dsb	sy
 8014028:	60fb      	str	r3, [r7, #12]
}
 801402a:	bf00      	nop
 801402c:	e7fe      	b.n	801402c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801402e:	4b07      	ldr	r3, [pc, #28]	; (801404c <vTaskPlaceOnEventList+0x44>)
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	3318      	adds	r3, #24
 8014034:	4619      	mov	r1, r3
 8014036:	6878      	ldr	r0, [r7, #4]
 8014038:	f7fe fe0a 	bl	8012c50 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801403c:	2101      	movs	r1, #1
 801403e:	6838      	ldr	r0, [r7, #0]
 8014040:	f000 fc50 	bl	80148e4 <prvAddCurrentTaskToDelayedList>
}
 8014044:	bf00      	nop
 8014046:	3710      	adds	r7, #16
 8014048:	46bd      	mov	sp, r7
 801404a:	bd80      	pop	{r7, pc}
 801404c:	20001014 	.word	0x20001014

08014050 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014050:	b580      	push	{r7, lr}
 8014052:	b086      	sub	sp, #24
 8014054:	af00      	add	r7, sp, #0
 8014056:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	68db      	ldr	r3, [r3, #12]
 801405c:	68db      	ldr	r3, [r3, #12]
 801405e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014060:	693b      	ldr	r3, [r7, #16]
 8014062:	2b00      	cmp	r3, #0
 8014064:	d10a      	bne.n	801407c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8014066:	f04f 0350 	mov.w	r3, #80	; 0x50
 801406a:	f383 8811 	msr	BASEPRI, r3
 801406e:	f3bf 8f6f 	isb	sy
 8014072:	f3bf 8f4f 	dsb	sy
 8014076:	60fb      	str	r3, [r7, #12]
}
 8014078:	bf00      	nop
 801407a:	e7fe      	b.n	801407a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801407c:	693b      	ldr	r3, [r7, #16]
 801407e:	3318      	adds	r3, #24
 8014080:	4618      	mov	r0, r3
 8014082:	f7fe fe1e 	bl	8012cc2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014086:	4b1d      	ldr	r3, [pc, #116]	; (80140fc <xTaskRemoveFromEventList+0xac>)
 8014088:	681b      	ldr	r3, [r3, #0]
 801408a:	2b00      	cmp	r3, #0
 801408c:	d11c      	bne.n	80140c8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801408e:	693b      	ldr	r3, [r7, #16]
 8014090:	3304      	adds	r3, #4
 8014092:	4618      	mov	r0, r3
 8014094:	f7fe fe15 	bl	8012cc2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014098:	693b      	ldr	r3, [r7, #16]
 801409a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801409c:	2201      	movs	r2, #1
 801409e:	409a      	lsls	r2, r3
 80140a0:	4b17      	ldr	r3, [pc, #92]	; (8014100 <xTaskRemoveFromEventList+0xb0>)
 80140a2:	681b      	ldr	r3, [r3, #0]
 80140a4:	4313      	orrs	r3, r2
 80140a6:	4a16      	ldr	r2, [pc, #88]	; (8014100 <xTaskRemoveFromEventList+0xb0>)
 80140a8:	6013      	str	r3, [r2, #0]
 80140aa:	693b      	ldr	r3, [r7, #16]
 80140ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80140ae:	4613      	mov	r3, r2
 80140b0:	009b      	lsls	r3, r3, #2
 80140b2:	4413      	add	r3, r2
 80140b4:	009b      	lsls	r3, r3, #2
 80140b6:	4a13      	ldr	r2, [pc, #76]	; (8014104 <xTaskRemoveFromEventList+0xb4>)
 80140b8:	441a      	add	r2, r3
 80140ba:	693b      	ldr	r3, [r7, #16]
 80140bc:	3304      	adds	r3, #4
 80140be:	4619      	mov	r1, r3
 80140c0:	4610      	mov	r0, r2
 80140c2:	f7fe fda1 	bl	8012c08 <vListInsertEnd>
 80140c6:	e005      	b.n	80140d4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80140c8:	693b      	ldr	r3, [r7, #16]
 80140ca:	3318      	adds	r3, #24
 80140cc:	4619      	mov	r1, r3
 80140ce:	480e      	ldr	r0, [pc, #56]	; (8014108 <xTaskRemoveFromEventList+0xb8>)
 80140d0:	f7fe fd9a 	bl	8012c08 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80140d4:	693b      	ldr	r3, [r7, #16]
 80140d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80140d8:	4b0c      	ldr	r3, [pc, #48]	; (801410c <xTaskRemoveFromEventList+0xbc>)
 80140da:	681b      	ldr	r3, [r3, #0]
 80140dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140de:	429a      	cmp	r2, r3
 80140e0:	d905      	bls.n	80140ee <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80140e2:	2301      	movs	r3, #1
 80140e4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80140e6:	4b0a      	ldr	r3, [pc, #40]	; (8014110 <xTaskRemoveFromEventList+0xc0>)
 80140e8:	2201      	movs	r2, #1
 80140ea:	601a      	str	r2, [r3, #0]
 80140ec:	e001      	b.n	80140f2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80140ee:	2300      	movs	r3, #0
 80140f0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80140f2:	697b      	ldr	r3, [r7, #20]
}
 80140f4:	4618      	mov	r0, r3
 80140f6:	3718      	adds	r7, #24
 80140f8:	46bd      	mov	sp, r7
 80140fa:	bd80      	pop	{r7, pc}
 80140fc:	2000113c 	.word	0x2000113c
 8014100:	2000111c 	.word	0x2000111c
 8014104:	20001018 	.word	0x20001018
 8014108:	200010d4 	.word	0x200010d4
 801410c:	20001014 	.word	0x20001014
 8014110:	20001128 	.word	0x20001128

08014114 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014114:	b480      	push	{r7}
 8014116:	b083      	sub	sp, #12
 8014118:	af00      	add	r7, sp, #0
 801411a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801411c:	4b06      	ldr	r3, [pc, #24]	; (8014138 <vTaskInternalSetTimeOutState+0x24>)
 801411e:	681a      	ldr	r2, [r3, #0]
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014124:	4b05      	ldr	r3, [pc, #20]	; (801413c <vTaskInternalSetTimeOutState+0x28>)
 8014126:	681a      	ldr	r2, [r3, #0]
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	605a      	str	r2, [r3, #4]
}
 801412c:	bf00      	nop
 801412e:	370c      	adds	r7, #12
 8014130:	46bd      	mov	sp, r7
 8014132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014136:	4770      	bx	lr
 8014138:	2000112c 	.word	0x2000112c
 801413c:	20001118 	.word	0x20001118

08014140 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014140:	b580      	push	{r7, lr}
 8014142:	b088      	sub	sp, #32
 8014144:	af00      	add	r7, sp, #0
 8014146:	6078      	str	r0, [r7, #4]
 8014148:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	2b00      	cmp	r3, #0
 801414e:	d10a      	bne.n	8014166 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8014150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014154:	f383 8811 	msr	BASEPRI, r3
 8014158:	f3bf 8f6f 	isb	sy
 801415c:	f3bf 8f4f 	dsb	sy
 8014160:	613b      	str	r3, [r7, #16]
}
 8014162:	bf00      	nop
 8014164:	e7fe      	b.n	8014164 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8014166:	683b      	ldr	r3, [r7, #0]
 8014168:	2b00      	cmp	r3, #0
 801416a:	d10a      	bne.n	8014182 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801416c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014170:	f383 8811 	msr	BASEPRI, r3
 8014174:	f3bf 8f6f 	isb	sy
 8014178:	f3bf 8f4f 	dsb	sy
 801417c:	60fb      	str	r3, [r7, #12]
}
 801417e:	bf00      	nop
 8014180:	e7fe      	b.n	8014180 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8014182:	f000 fd3f 	bl	8014c04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014186:	4b1d      	ldr	r3, [pc, #116]	; (80141fc <xTaskCheckForTimeOut+0xbc>)
 8014188:	681b      	ldr	r3, [r3, #0]
 801418a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	685b      	ldr	r3, [r3, #4]
 8014190:	69ba      	ldr	r2, [r7, #24]
 8014192:	1ad3      	subs	r3, r2, r3
 8014194:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014196:	683b      	ldr	r3, [r7, #0]
 8014198:	681b      	ldr	r3, [r3, #0]
 801419a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801419e:	d102      	bne.n	80141a6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80141a0:	2300      	movs	r3, #0
 80141a2:	61fb      	str	r3, [r7, #28]
 80141a4:	e023      	b.n	80141ee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	681a      	ldr	r2, [r3, #0]
 80141aa:	4b15      	ldr	r3, [pc, #84]	; (8014200 <xTaskCheckForTimeOut+0xc0>)
 80141ac:	681b      	ldr	r3, [r3, #0]
 80141ae:	429a      	cmp	r2, r3
 80141b0:	d007      	beq.n	80141c2 <xTaskCheckForTimeOut+0x82>
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	685b      	ldr	r3, [r3, #4]
 80141b6:	69ba      	ldr	r2, [r7, #24]
 80141b8:	429a      	cmp	r2, r3
 80141ba:	d302      	bcc.n	80141c2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80141bc:	2301      	movs	r3, #1
 80141be:	61fb      	str	r3, [r7, #28]
 80141c0:	e015      	b.n	80141ee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80141c2:	683b      	ldr	r3, [r7, #0]
 80141c4:	681b      	ldr	r3, [r3, #0]
 80141c6:	697a      	ldr	r2, [r7, #20]
 80141c8:	429a      	cmp	r2, r3
 80141ca:	d20b      	bcs.n	80141e4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80141cc:	683b      	ldr	r3, [r7, #0]
 80141ce:	681a      	ldr	r2, [r3, #0]
 80141d0:	697b      	ldr	r3, [r7, #20]
 80141d2:	1ad2      	subs	r2, r2, r3
 80141d4:	683b      	ldr	r3, [r7, #0]
 80141d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80141d8:	6878      	ldr	r0, [r7, #4]
 80141da:	f7ff ff9b 	bl	8014114 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80141de:	2300      	movs	r3, #0
 80141e0:	61fb      	str	r3, [r7, #28]
 80141e2:	e004      	b.n	80141ee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80141e4:	683b      	ldr	r3, [r7, #0]
 80141e6:	2200      	movs	r2, #0
 80141e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80141ea:	2301      	movs	r3, #1
 80141ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80141ee:	f000 fd39 	bl	8014c64 <vPortExitCritical>

	return xReturn;
 80141f2:	69fb      	ldr	r3, [r7, #28]
}
 80141f4:	4618      	mov	r0, r3
 80141f6:	3720      	adds	r7, #32
 80141f8:	46bd      	mov	sp, r7
 80141fa:	bd80      	pop	{r7, pc}
 80141fc:	20001118 	.word	0x20001118
 8014200:	2000112c 	.word	0x2000112c

08014204 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014204:	b480      	push	{r7}
 8014206:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014208:	4b03      	ldr	r3, [pc, #12]	; (8014218 <vTaskMissedYield+0x14>)
 801420a:	2201      	movs	r2, #1
 801420c:	601a      	str	r2, [r3, #0]
}
 801420e:	bf00      	nop
 8014210:	46bd      	mov	sp, r7
 8014212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014216:	4770      	bx	lr
 8014218:	20001128 	.word	0x20001128

0801421c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801421c:	b580      	push	{r7, lr}
 801421e:	b082      	sub	sp, #8
 8014220:	af00      	add	r7, sp, #0
 8014222:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014224:	f000 f852 	bl	80142cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014228:	4b06      	ldr	r3, [pc, #24]	; (8014244 <prvIdleTask+0x28>)
 801422a:	681b      	ldr	r3, [r3, #0]
 801422c:	2b01      	cmp	r3, #1
 801422e:	d9f9      	bls.n	8014224 <prvIdleTask+0x8>
			{
				taskYIELD();
 8014230:	4b05      	ldr	r3, [pc, #20]	; (8014248 <prvIdleTask+0x2c>)
 8014232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014236:	601a      	str	r2, [r3, #0]
 8014238:	f3bf 8f4f 	dsb	sy
 801423c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014240:	e7f0      	b.n	8014224 <prvIdleTask+0x8>
 8014242:	bf00      	nop
 8014244:	20001018 	.word	0x20001018
 8014248:	e000ed04 	.word	0xe000ed04

0801424c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801424c:	b580      	push	{r7, lr}
 801424e:	b082      	sub	sp, #8
 8014250:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014252:	2300      	movs	r3, #0
 8014254:	607b      	str	r3, [r7, #4]
 8014256:	e00c      	b.n	8014272 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014258:	687a      	ldr	r2, [r7, #4]
 801425a:	4613      	mov	r3, r2
 801425c:	009b      	lsls	r3, r3, #2
 801425e:	4413      	add	r3, r2
 8014260:	009b      	lsls	r3, r3, #2
 8014262:	4a12      	ldr	r2, [pc, #72]	; (80142ac <prvInitialiseTaskLists+0x60>)
 8014264:	4413      	add	r3, r2
 8014266:	4618      	mov	r0, r3
 8014268:	f7fe fca1 	bl	8012bae <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	3301      	adds	r3, #1
 8014270:	607b      	str	r3, [r7, #4]
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	2b06      	cmp	r3, #6
 8014276:	d9ef      	bls.n	8014258 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014278:	480d      	ldr	r0, [pc, #52]	; (80142b0 <prvInitialiseTaskLists+0x64>)
 801427a:	f7fe fc98 	bl	8012bae <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801427e:	480d      	ldr	r0, [pc, #52]	; (80142b4 <prvInitialiseTaskLists+0x68>)
 8014280:	f7fe fc95 	bl	8012bae <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014284:	480c      	ldr	r0, [pc, #48]	; (80142b8 <prvInitialiseTaskLists+0x6c>)
 8014286:	f7fe fc92 	bl	8012bae <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801428a:	480c      	ldr	r0, [pc, #48]	; (80142bc <prvInitialiseTaskLists+0x70>)
 801428c:	f7fe fc8f 	bl	8012bae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014290:	480b      	ldr	r0, [pc, #44]	; (80142c0 <prvInitialiseTaskLists+0x74>)
 8014292:	f7fe fc8c 	bl	8012bae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014296:	4b0b      	ldr	r3, [pc, #44]	; (80142c4 <prvInitialiseTaskLists+0x78>)
 8014298:	4a05      	ldr	r2, [pc, #20]	; (80142b0 <prvInitialiseTaskLists+0x64>)
 801429a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801429c:	4b0a      	ldr	r3, [pc, #40]	; (80142c8 <prvInitialiseTaskLists+0x7c>)
 801429e:	4a05      	ldr	r2, [pc, #20]	; (80142b4 <prvInitialiseTaskLists+0x68>)
 80142a0:	601a      	str	r2, [r3, #0]
}
 80142a2:	bf00      	nop
 80142a4:	3708      	adds	r7, #8
 80142a6:	46bd      	mov	sp, r7
 80142a8:	bd80      	pop	{r7, pc}
 80142aa:	bf00      	nop
 80142ac:	20001018 	.word	0x20001018
 80142b0:	200010a4 	.word	0x200010a4
 80142b4:	200010b8 	.word	0x200010b8
 80142b8:	200010d4 	.word	0x200010d4
 80142bc:	200010e8 	.word	0x200010e8
 80142c0:	20001100 	.word	0x20001100
 80142c4:	200010cc 	.word	0x200010cc
 80142c8:	200010d0 	.word	0x200010d0

080142cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80142cc:	b580      	push	{r7, lr}
 80142ce:	b082      	sub	sp, #8
 80142d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80142d2:	e019      	b.n	8014308 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80142d4:	f000 fc96 	bl	8014c04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80142d8:	4b10      	ldr	r3, [pc, #64]	; (801431c <prvCheckTasksWaitingTermination+0x50>)
 80142da:	68db      	ldr	r3, [r3, #12]
 80142dc:	68db      	ldr	r3, [r3, #12]
 80142de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	3304      	adds	r3, #4
 80142e4:	4618      	mov	r0, r3
 80142e6:	f7fe fcec 	bl	8012cc2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80142ea:	4b0d      	ldr	r3, [pc, #52]	; (8014320 <prvCheckTasksWaitingTermination+0x54>)
 80142ec:	681b      	ldr	r3, [r3, #0]
 80142ee:	3b01      	subs	r3, #1
 80142f0:	4a0b      	ldr	r2, [pc, #44]	; (8014320 <prvCheckTasksWaitingTermination+0x54>)
 80142f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80142f4:	4b0b      	ldr	r3, [pc, #44]	; (8014324 <prvCheckTasksWaitingTermination+0x58>)
 80142f6:	681b      	ldr	r3, [r3, #0]
 80142f8:	3b01      	subs	r3, #1
 80142fa:	4a0a      	ldr	r2, [pc, #40]	; (8014324 <prvCheckTasksWaitingTermination+0x58>)
 80142fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80142fe:	f000 fcb1 	bl	8014c64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014302:	6878      	ldr	r0, [r7, #4]
 8014304:	f000 f810 	bl	8014328 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014308:	4b06      	ldr	r3, [pc, #24]	; (8014324 <prvCheckTasksWaitingTermination+0x58>)
 801430a:	681b      	ldr	r3, [r3, #0]
 801430c:	2b00      	cmp	r3, #0
 801430e:	d1e1      	bne.n	80142d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014310:	bf00      	nop
 8014312:	bf00      	nop
 8014314:	3708      	adds	r7, #8
 8014316:	46bd      	mov	sp, r7
 8014318:	bd80      	pop	{r7, pc}
 801431a:	bf00      	nop
 801431c:	200010e8 	.word	0x200010e8
 8014320:	20001114 	.word	0x20001114
 8014324:	200010fc 	.word	0x200010fc

08014328 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014328:	b580      	push	{r7, lr}
 801432a:	b084      	sub	sp, #16
 801432c:	af00      	add	r7, sp, #0
 801432e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014336:	2b00      	cmp	r3, #0
 8014338:	d108      	bne.n	801434c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801433e:	4618      	mov	r0, r3
 8014340:	f000 fe46 	bl	8014fd0 <vPortFree>
				vPortFree( pxTCB );
 8014344:	6878      	ldr	r0, [r7, #4]
 8014346:	f000 fe43 	bl	8014fd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801434a:	e018      	b.n	801437e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014352:	2b01      	cmp	r3, #1
 8014354:	d103      	bne.n	801435e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8014356:	6878      	ldr	r0, [r7, #4]
 8014358:	f000 fe3a 	bl	8014fd0 <vPortFree>
	}
 801435c:	e00f      	b.n	801437e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014364:	2b02      	cmp	r3, #2
 8014366:	d00a      	beq.n	801437e <prvDeleteTCB+0x56>
	__asm volatile
 8014368:	f04f 0350 	mov.w	r3, #80	; 0x50
 801436c:	f383 8811 	msr	BASEPRI, r3
 8014370:	f3bf 8f6f 	isb	sy
 8014374:	f3bf 8f4f 	dsb	sy
 8014378:	60fb      	str	r3, [r7, #12]
}
 801437a:	bf00      	nop
 801437c:	e7fe      	b.n	801437c <prvDeleteTCB+0x54>
	}
 801437e:	bf00      	nop
 8014380:	3710      	adds	r7, #16
 8014382:	46bd      	mov	sp, r7
 8014384:	bd80      	pop	{r7, pc}
	...

08014388 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014388:	b480      	push	{r7}
 801438a:	b083      	sub	sp, #12
 801438c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801438e:	4b0c      	ldr	r3, [pc, #48]	; (80143c0 <prvResetNextTaskUnblockTime+0x38>)
 8014390:	681b      	ldr	r3, [r3, #0]
 8014392:	681b      	ldr	r3, [r3, #0]
 8014394:	2b00      	cmp	r3, #0
 8014396:	d104      	bne.n	80143a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014398:	4b0a      	ldr	r3, [pc, #40]	; (80143c4 <prvResetNextTaskUnblockTime+0x3c>)
 801439a:	f04f 32ff 	mov.w	r2, #4294967295
 801439e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80143a0:	e008      	b.n	80143b4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80143a2:	4b07      	ldr	r3, [pc, #28]	; (80143c0 <prvResetNextTaskUnblockTime+0x38>)
 80143a4:	681b      	ldr	r3, [r3, #0]
 80143a6:	68db      	ldr	r3, [r3, #12]
 80143a8:	68db      	ldr	r3, [r3, #12]
 80143aa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	685b      	ldr	r3, [r3, #4]
 80143b0:	4a04      	ldr	r2, [pc, #16]	; (80143c4 <prvResetNextTaskUnblockTime+0x3c>)
 80143b2:	6013      	str	r3, [r2, #0]
}
 80143b4:	bf00      	nop
 80143b6:	370c      	adds	r7, #12
 80143b8:	46bd      	mov	sp, r7
 80143ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143be:	4770      	bx	lr
 80143c0:	200010cc 	.word	0x200010cc
 80143c4:	20001134 	.word	0x20001134

080143c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80143c8:	b480      	push	{r7}
 80143ca:	b083      	sub	sp, #12
 80143cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80143ce:	4b0b      	ldr	r3, [pc, #44]	; (80143fc <xTaskGetSchedulerState+0x34>)
 80143d0:	681b      	ldr	r3, [r3, #0]
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d102      	bne.n	80143dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80143d6:	2301      	movs	r3, #1
 80143d8:	607b      	str	r3, [r7, #4]
 80143da:	e008      	b.n	80143ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80143dc:	4b08      	ldr	r3, [pc, #32]	; (8014400 <xTaskGetSchedulerState+0x38>)
 80143de:	681b      	ldr	r3, [r3, #0]
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d102      	bne.n	80143ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80143e4:	2302      	movs	r3, #2
 80143e6:	607b      	str	r3, [r7, #4]
 80143e8:	e001      	b.n	80143ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80143ea:	2300      	movs	r3, #0
 80143ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80143ee:	687b      	ldr	r3, [r7, #4]
	}
 80143f0:	4618      	mov	r0, r3
 80143f2:	370c      	adds	r7, #12
 80143f4:	46bd      	mov	sp, r7
 80143f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143fa:	4770      	bx	lr
 80143fc:	20001120 	.word	0x20001120
 8014400:	2000113c 	.word	0x2000113c

08014404 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014404:	b580      	push	{r7, lr}
 8014406:	b086      	sub	sp, #24
 8014408:	af00      	add	r7, sp, #0
 801440a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014410:	2300      	movs	r3, #0
 8014412:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	2b00      	cmp	r3, #0
 8014418:	d06e      	beq.n	80144f8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801441a:	4b3a      	ldr	r3, [pc, #232]	; (8014504 <xTaskPriorityDisinherit+0x100>)
 801441c:	681b      	ldr	r3, [r3, #0]
 801441e:	693a      	ldr	r2, [r7, #16]
 8014420:	429a      	cmp	r2, r3
 8014422:	d00a      	beq.n	801443a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8014424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014428:	f383 8811 	msr	BASEPRI, r3
 801442c:	f3bf 8f6f 	isb	sy
 8014430:	f3bf 8f4f 	dsb	sy
 8014434:	60fb      	str	r3, [r7, #12]
}
 8014436:	bf00      	nop
 8014438:	e7fe      	b.n	8014438 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801443a:	693b      	ldr	r3, [r7, #16]
 801443c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801443e:	2b00      	cmp	r3, #0
 8014440:	d10a      	bne.n	8014458 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8014442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014446:	f383 8811 	msr	BASEPRI, r3
 801444a:	f3bf 8f6f 	isb	sy
 801444e:	f3bf 8f4f 	dsb	sy
 8014452:	60bb      	str	r3, [r7, #8]
}
 8014454:	bf00      	nop
 8014456:	e7fe      	b.n	8014456 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8014458:	693b      	ldr	r3, [r7, #16]
 801445a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801445c:	1e5a      	subs	r2, r3, #1
 801445e:	693b      	ldr	r3, [r7, #16]
 8014460:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014462:	693b      	ldr	r3, [r7, #16]
 8014464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014466:	693b      	ldr	r3, [r7, #16]
 8014468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801446a:	429a      	cmp	r2, r3
 801446c:	d044      	beq.n	80144f8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801446e:	693b      	ldr	r3, [r7, #16]
 8014470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014472:	2b00      	cmp	r3, #0
 8014474:	d140      	bne.n	80144f8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014476:	693b      	ldr	r3, [r7, #16]
 8014478:	3304      	adds	r3, #4
 801447a:	4618      	mov	r0, r3
 801447c:	f7fe fc21 	bl	8012cc2 <uxListRemove>
 8014480:	4603      	mov	r3, r0
 8014482:	2b00      	cmp	r3, #0
 8014484:	d115      	bne.n	80144b2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8014486:	693b      	ldr	r3, [r7, #16]
 8014488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801448a:	491f      	ldr	r1, [pc, #124]	; (8014508 <xTaskPriorityDisinherit+0x104>)
 801448c:	4613      	mov	r3, r2
 801448e:	009b      	lsls	r3, r3, #2
 8014490:	4413      	add	r3, r2
 8014492:	009b      	lsls	r3, r3, #2
 8014494:	440b      	add	r3, r1
 8014496:	681b      	ldr	r3, [r3, #0]
 8014498:	2b00      	cmp	r3, #0
 801449a:	d10a      	bne.n	80144b2 <xTaskPriorityDisinherit+0xae>
 801449c:	693b      	ldr	r3, [r7, #16]
 801449e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144a0:	2201      	movs	r2, #1
 80144a2:	fa02 f303 	lsl.w	r3, r2, r3
 80144a6:	43da      	mvns	r2, r3
 80144a8:	4b18      	ldr	r3, [pc, #96]	; (801450c <xTaskPriorityDisinherit+0x108>)
 80144aa:	681b      	ldr	r3, [r3, #0]
 80144ac:	4013      	ands	r3, r2
 80144ae:	4a17      	ldr	r2, [pc, #92]	; (801450c <xTaskPriorityDisinherit+0x108>)
 80144b0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80144b2:	693b      	ldr	r3, [r7, #16]
 80144b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80144b6:	693b      	ldr	r3, [r7, #16]
 80144b8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80144ba:	693b      	ldr	r3, [r7, #16]
 80144bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144be:	f1c3 0207 	rsb	r2, r3, #7
 80144c2:	693b      	ldr	r3, [r7, #16]
 80144c4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80144c6:	693b      	ldr	r3, [r7, #16]
 80144c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144ca:	2201      	movs	r2, #1
 80144cc:	409a      	lsls	r2, r3
 80144ce:	4b0f      	ldr	r3, [pc, #60]	; (801450c <xTaskPriorityDisinherit+0x108>)
 80144d0:	681b      	ldr	r3, [r3, #0]
 80144d2:	4313      	orrs	r3, r2
 80144d4:	4a0d      	ldr	r2, [pc, #52]	; (801450c <xTaskPriorityDisinherit+0x108>)
 80144d6:	6013      	str	r3, [r2, #0]
 80144d8:	693b      	ldr	r3, [r7, #16]
 80144da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80144dc:	4613      	mov	r3, r2
 80144de:	009b      	lsls	r3, r3, #2
 80144e0:	4413      	add	r3, r2
 80144e2:	009b      	lsls	r3, r3, #2
 80144e4:	4a08      	ldr	r2, [pc, #32]	; (8014508 <xTaskPriorityDisinherit+0x104>)
 80144e6:	441a      	add	r2, r3
 80144e8:	693b      	ldr	r3, [r7, #16]
 80144ea:	3304      	adds	r3, #4
 80144ec:	4619      	mov	r1, r3
 80144ee:	4610      	mov	r0, r2
 80144f0:	f7fe fb8a 	bl	8012c08 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80144f4:	2301      	movs	r3, #1
 80144f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80144f8:	697b      	ldr	r3, [r7, #20]
	}
 80144fa:	4618      	mov	r0, r3
 80144fc:	3718      	adds	r7, #24
 80144fe:	46bd      	mov	sp, r7
 8014500:	bd80      	pop	{r7, pc}
 8014502:	bf00      	nop
 8014504:	20001014 	.word	0x20001014
 8014508:	20001018 	.word	0x20001018
 801450c:	2000111c 	.word	0x2000111c

08014510 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8014510:	b580      	push	{r7, lr}
 8014512:	b086      	sub	sp, #24
 8014514:	af00      	add	r7, sp, #0
 8014516:	60f8      	str	r0, [r7, #12]
 8014518:	60b9      	str	r1, [r7, #8]
 801451a:	607a      	str	r2, [r7, #4]
 801451c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 801451e:	f000 fb71 	bl	8014c04 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8014522:	4b26      	ldr	r3, [pc, #152]	; (80145bc <xTaskNotifyWait+0xac>)
 8014524:	681b      	ldr	r3, [r3, #0]
 8014526:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801452a:	b2db      	uxtb	r3, r3
 801452c:	2b02      	cmp	r3, #2
 801452e:	d01a      	beq.n	8014566 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8014530:	4b22      	ldr	r3, [pc, #136]	; (80145bc <xTaskNotifyWait+0xac>)
 8014532:	681b      	ldr	r3, [r3, #0]
 8014534:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8014536:	68fa      	ldr	r2, [r7, #12]
 8014538:	43d2      	mvns	r2, r2
 801453a:	400a      	ands	r2, r1
 801453c:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801453e:	4b1f      	ldr	r3, [pc, #124]	; (80145bc <xTaskNotifyWait+0xac>)
 8014540:	681b      	ldr	r3, [r3, #0]
 8014542:	2201      	movs	r2, #1
 8014544:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8014548:	683b      	ldr	r3, [r7, #0]
 801454a:	2b00      	cmp	r3, #0
 801454c:	d00b      	beq.n	8014566 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801454e:	2101      	movs	r1, #1
 8014550:	6838      	ldr	r0, [r7, #0]
 8014552:	f000 f9c7 	bl	80148e4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8014556:	4b1a      	ldr	r3, [pc, #104]	; (80145c0 <xTaskNotifyWait+0xb0>)
 8014558:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801455c:	601a      	str	r2, [r3, #0]
 801455e:	f3bf 8f4f 	dsb	sy
 8014562:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8014566:	f000 fb7d 	bl	8014c64 <vPortExitCritical>

		taskENTER_CRITICAL();
 801456a:	f000 fb4b 	bl	8014c04 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	2b00      	cmp	r3, #0
 8014572:	d004      	beq.n	801457e <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8014574:	4b11      	ldr	r3, [pc, #68]	; (80145bc <xTaskNotifyWait+0xac>)
 8014576:	681b      	ldr	r3, [r3, #0]
 8014578:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801457e:	4b0f      	ldr	r3, [pc, #60]	; (80145bc <xTaskNotifyWait+0xac>)
 8014580:	681b      	ldr	r3, [r3, #0]
 8014582:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014586:	b2db      	uxtb	r3, r3
 8014588:	2b02      	cmp	r3, #2
 801458a:	d002      	beq.n	8014592 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 801458c:	2300      	movs	r3, #0
 801458e:	617b      	str	r3, [r7, #20]
 8014590:	e008      	b.n	80145a4 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8014592:	4b0a      	ldr	r3, [pc, #40]	; (80145bc <xTaskNotifyWait+0xac>)
 8014594:	681b      	ldr	r3, [r3, #0]
 8014596:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8014598:	68ba      	ldr	r2, [r7, #8]
 801459a:	43d2      	mvns	r2, r2
 801459c:	400a      	ands	r2, r1
 801459e:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 80145a0:	2301      	movs	r3, #1
 80145a2:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80145a4:	4b05      	ldr	r3, [pc, #20]	; (80145bc <xTaskNotifyWait+0xac>)
 80145a6:	681b      	ldr	r3, [r3, #0]
 80145a8:	2200      	movs	r2, #0
 80145aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 80145ae:	f000 fb59 	bl	8014c64 <vPortExitCritical>

		return xReturn;
 80145b2:	697b      	ldr	r3, [r7, #20]
	}
 80145b4:	4618      	mov	r0, r3
 80145b6:	3718      	adds	r7, #24
 80145b8:	46bd      	mov	sp, r7
 80145ba:	bd80      	pop	{r7, pc}
 80145bc:	20001014 	.word	0x20001014
 80145c0:	e000ed04 	.word	0xe000ed04

080145c4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80145c4:	b580      	push	{r7, lr}
 80145c6:	b08a      	sub	sp, #40	; 0x28
 80145c8:	af00      	add	r7, sp, #0
 80145ca:	60f8      	str	r0, [r7, #12]
 80145cc:	60b9      	str	r1, [r7, #8]
 80145ce:	603b      	str	r3, [r7, #0]
 80145d0:	4613      	mov	r3, r2
 80145d2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80145d4:	2301      	movs	r3, #1
 80145d6:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80145d8:	68fb      	ldr	r3, [r7, #12]
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d10a      	bne.n	80145f4 <xTaskGenericNotify+0x30>
	__asm volatile
 80145de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145e2:	f383 8811 	msr	BASEPRI, r3
 80145e6:	f3bf 8f6f 	isb	sy
 80145ea:	f3bf 8f4f 	dsb	sy
 80145ee:	61bb      	str	r3, [r7, #24]
}
 80145f0:	bf00      	nop
 80145f2:	e7fe      	b.n	80145f2 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 80145f4:	68fb      	ldr	r3, [r7, #12]
 80145f6:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80145f8:	f000 fb04 	bl	8014c04 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80145fc:	683b      	ldr	r3, [r7, #0]
 80145fe:	2b00      	cmp	r3, #0
 8014600:	d003      	beq.n	801460a <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8014602:	6a3b      	ldr	r3, [r7, #32]
 8014604:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014606:	683b      	ldr	r3, [r7, #0]
 8014608:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801460a:	6a3b      	ldr	r3, [r7, #32]
 801460c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014610:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8014612:	6a3b      	ldr	r3, [r7, #32]
 8014614:	2202      	movs	r2, #2
 8014616:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 801461a:	79fb      	ldrb	r3, [r7, #7]
 801461c:	2b04      	cmp	r3, #4
 801461e:	d828      	bhi.n	8014672 <xTaskGenericNotify+0xae>
 8014620:	a201      	add	r2, pc, #4	; (adr r2, 8014628 <xTaskGenericNotify+0x64>)
 8014622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014626:	bf00      	nop
 8014628:	08014693 	.word	0x08014693
 801462c:	0801463d 	.word	0x0801463d
 8014630:	0801464b 	.word	0x0801464b
 8014634:	08014657 	.word	0x08014657
 8014638:	0801465f 	.word	0x0801465f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 801463c:	6a3b      	ldr	r3, [r7, #32]
 801463e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014640:	68bb      	ldr	r3, [r7, #8]
 8014642:	431a      	orrs	r2, r3
 8014644:	6a3b      	ldr	r3, [r7, #32]
 8014646:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014648:	e026      	b.n	8014698 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801464a:	6a3b      	ldr	r3, [r7, #32]
 801464c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801464e:	1c5a      	adds	r2, r3, #1
 8014650:	6a3b      	ldr	r3, [r7, #32]
 8014652:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014654:	e020      	b.n	8014698 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8014656:	6a3b      	ldr	r3, [r7, #32]
 8014658:	68ba      	ldr	r2, [r7, #8]
 801465a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 801465c:	e01c      	b.n	8014698 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801465e:	7ffb      	ldrb	r3, [r7, #31]
 8014660:	2b02      	cmp	r3, #2
 8014662:	d003      	beq.n	801466c <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8014664:	6a3b      	ldr	r3, [r7, #32]
 8014666:	68ba      	ldr	r2, [r7, #8]
 8014668:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801466a:	e015      	b.n	8014698 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 801466c:	2300      	movs	r3, #0
 801466e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8014670:	e012      	b.n	8014698 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8014672:	6a3b      	ldr	r3, [r7, #32]
 8014674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014676:	f1b3 3fff 	cmp.w	r3, #4294967295
 801467a:	d00c      	beq.n	8014696 <xTaskGenericNotify+0xd2>
	__asm volatile
 801467c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014680:	f383 8811 	msr	BASEPRI, r3
 8014684:	f3bf 8f6f 	isb	sy
 8014688:	f3bf 8f4f 	dsb	sy
 801468c:	617b      	str	r3, [r7, #20]
}
 801468e:	bf00      	nop
 8014690:	e7fe      	b.n	8014690 <xTaskGenericNotify+0xcc>
					break;
 8014692:	bf00      	nop
 8014694:	e000      	b.n	8014698 <xTaskGenericNotify+0xd4>

					break;
 8014696:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8014698:	7ffb      	ldrb	r3, [r7, #31]
 801469a:	2b01      	cmp	r3, #1
 801469c:	d139      	bne.n	8014712 <xTaskGenericNotify+0x14e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801469e:	6a3b      	ldr	r3, [r7, #32]
 80146a0:	3304      	adds	r3, #4
 80146a2:	4618      	mov	r0, r3
 80146a4:	f7fe fb0d 	bl	8012cc2 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80146a8:	6a3b      	ldr	r3, [r7, #32]
 80146aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146ac:	2201      	movs	r2, #1
 80146ae:	409a      	lsls	r2, r3
 80146b0:	4b1b      	ldr	r3, [pc, #108]	; (8014720 <xTaskGenericNotify+0x15c>)
 80146b2:	681b      	ldr	r3, [r3, #0]
 80146b4:	4313      	orrs	r3, r2
 80146b6:	4a1a      	ldr	r2, [pc, #104]	; (8014720 <xTaskGenericNotify+0x15c>)
 80146b8:	6013      	str	r3, [r2, #0]
 80146ba:	6a3b      	ldr	r3, [r7, #32]
 80146bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80146be:	4613      	mov	r3, r2
 80146c0:	009b      	lsls	r3, r3, #2
 80146c2:	4413      	add	r3, r2
 80146c4:	009b      	lsls	r3, r3, #2
 80146c6:	4a17      	ldr	r2, [pc, #92]	; (8014724 <xTaskGenericNotify+0x160>)
 80146c8:	441a      	add	r2, r3
 80146ca:	6a3b      	ldr	r3, [r7, #32]
 80146cc:	3304      	adds	r3, #4
 80146ce:	4619      	mov	r1, r3
 80146d0:	4610      	mov	r0, r2
 80146d2:	f7fe fa99 	bl	8012c08 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80146d6:	6a3b      	ldr	r3, [r7, #32]
 80146d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d00a      	beq.n	80146f4 <xTaskGenericNotify+0x130>
	__asm volatile
 80146de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146e2:	f383 8811 	msr	BASEPRI, r3
 80146e6:	f3bf 8f6f 	isb	sy
 80146ea:	f3bf 8f4f 	dsb	sy
 80146ee:	613b      	str	r3, [r7, #16]
}
 80146f0:	bf00      	nop
 80146f2:	e7fe      	b.n	80146f2 <xTaskGenericNotify+0x12e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80146f4:	6a3b      	ldr	r3, [r7, #32]
 80146f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80146f8:	4b0b      	ldr	r3, [pc, #44]	; (8014728 <xTaskGenericNotify+0x164>)
 80146fa:	681b      	ldr	r3, [r3, #0]
 80146fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146fe:	429a      	cmp	r2, r3
 8014700:	d907      	bls.n	8014712 <xTaskGenericNotify+0x14e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8014702:	4b0a      	ldr	r3, [pc, #40]	; (801472c <xTaskGenericNotify+0x168>)
 8014704:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014708:	601a      	str	r2, [r3, #0]
 801470a:	f3bf 8f4f 	dsb	sy
 801470e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8014712:	f000 faa7 	bl	8014c64 <vPortExitCritical>

		return xReturn;
 8014716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8014718:	4618      	mov	r0, r3
 801471a:	3728      	adds	r7, #40	; 0x28
 801471c:	46bd      	mov	sp, r7
 801471e:	bd80      	pop	{r7, pc}
 8014720:	2000111c 	.word	0x2000111c
 8014724:	20001018 	.word	0x20001018
 8014728:	20001014 	.word	0x20001014
 801472c:	e000ed04 	.word	0xe000ed04

08014730 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8014730:	b580      	push	{r7, lr}
 8014732:	b08e      	sub	sp, #56	; 0x38
 8014734:	af00      	add	r7, sp, #0
 8014736:	60f8      	str	r0, [r7, #12]
 8014738:	60b9      	str	r1, [r7, #8]
 801473a:	603b      	str	r3, [r7, #0]
 801473c:	4613      	mov	r3, r2
 801473e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8014740:	2301      	movs	r3, #1
 8014742:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8014744:	68fb      	ldr	r3, [r7, #12]
 8014746:	2b00      	cmp	r3, #0
 8014748:	d10a      	bne.n	8014760 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 801474a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801474e:	f383 8811 	msr	BASEPRI, r3
 8014752:	f3bf 8f6f 	isb	sy
 8014756:	f3bf 8f4f 	dsb	sy
 801475a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801475c:	bf00      	nop
 801475e:	e7fe      	b.n	801475e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014760:	f000 fb32 	bl	8014dc8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8014764:	68fb      	ldr	r3, [r7, #12]
 8014766:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8014768:	f3ef 8211 	mrs	r2, BASEPRI
 801476c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014770:	f383 8811 	msr	BASEPRI, r3
 8014774:	f3bf 8f6f 	isb	sy
 8014778:	f3bf 8f4f 	dsb	sy
 801477c:	623a      	str	r2, [r7, #32]
 801477e:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8014780:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014782:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8014784:	683b      	ldr	r3, [r7, #0]
 8014786:	2b00      	cmp	r3, #0
 8014788:	d003      	beq.n	8014792 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801478a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801478c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801478e:	683b      	ldr	r3, [r7, #0]
 8014790:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8014792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014794:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014798:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801479c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801479e:	2202      	movs	r2, #2
 80147a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 80147a4:	79fb      	ldrb	r3, [r7, #7]
 80147a6:	2b04      	cmp	r3, #4
 80147a8:	d828      	bhi.n	80147fc <xTaskGenericNotifyFromISR+0xcc>
 80147aa:	a201      	add	r2, pc, #4	; (adr r2, 80147b0 <xTaskGenericNotifyFromISR+0x80>)
 80147ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80147b0:	0801481d 	.word	0x0801481d
 80147b4:	080147c5 	.word	0x080147c5
 80147b8:	080147d3 	.word	0x080147d3
 80147bc:	080147df 	.word	0x080147df
 80147c0:	080147e7 	.word	0x080147e7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80147c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80147c8:	68bb      	ldr	r3, [r7, #8]
 80147ca:	431a      	orrs	r2, r3
 80147cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147ce:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80147d0:	e027      	b.n	8014822 <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80147d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80147d6:	1c5a      	adds	r2, r3, #1
 80147d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147da:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80147dc:	e021      	b.n	8014822 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80147de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147e0:	68ba      	ldr	r2, [r7, #8]
 80147e2:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80147e4:	e01d      	b.n	8014822 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80147e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80147ea:	2b02      	cmp	r3, #2
 80147ec:	d003      	beq.n	80147f6 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80147ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147f0:	68ba      	ldr	r2, [r7, #8]
 80147f2:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80147f4:	e015      	b.n	8014822 <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 80147f6:	2300      	movs	r3, #0
 80147f8:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80147fa:	e012      	b.n	8014822 <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80147fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014804:	d00c      	beq.n	8014820 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 8014806:	f04f 0350 	mov.w	r3, #80	; 0x50
 801480a:	f383 8811 	msr	BASEPRI, r3
 801480e:	f3bf 8f6f 	isb	sy
 8014812:	f3bf 8f4f 	dsb	sy
 8014816:	61bb      	str	r3, [r7, #24]
}
 8014818:	bf00      	nop
 801481a:	e7fe      	b.n	801481a <xTaskGenericNotifyFromISR+0xea>
					break;
 801481c:	bf00      	nop
 801481e:	e000      	b.n	8014822 <xTaskGenericNotifyFromISR+0xf2>
					break;
 8014820:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8014822:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8014826:	2b01      	cmp	r3, #1
 8014828:	d145      	bne.n	80148b6 <xTaskGenericNotifyFromISR+0x186>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801482a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801482c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801482e:	2b00      	cmp	r3, #0
 8014830:	d00a      	beq.n	8014848 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 8014832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014836:	f383 8811 	msr	BASEPRI, r3
 801483a:	f3bf 8f6f 	isb	sy
 801483e:	f3bf 8f4f 	dsb	sy
 8014842:	617b      	str	r3, [r7, #20]
}
 8014844:	bf00      	nop
 8014846:	e7fe      	b.n	8014846 <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014848:	4b20      	ldr	r3, [pc, #128]	; (80148cc <xTaskGenericNotifyFromISR+0x19c>)
 801484a:	681b      	ldr	r3, [r3, #0]
 801484c:	2b00      	cmp	r3, #0
 801484e:	d11c      	bne.n	801488a <xTaskGenericNotifyFromISR+0x15a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014852:	3304      	adds	r3, #4
 8014854:	4618      	mov	r0, r3
 8014856:	f7fe fa34 	bl	8012cc2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801485a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801485c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801485e:	2201      	movs	r2, #1
 8014860:	409a      	lsls	r2, r3
 8014862:	4b1b      	ldr	r3, [pc, #108]	; (80148d0 <xTaskGenericNotifyFromISR+0x1a0>)
 8014864:	681b      	ldr	r3, [r3, #0]
 8014866:	4313      	orrs	r3, r2
 8014868:	4a19      	ldr	r2, [pc, #100]	; (80148d0 <xTaskGenericNotifyFromISR+0x1a0>)
 801486a:	6013      	str	r3, [r2, #0]
 801486c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801486e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014870:	4613      	mov	r3, r2
 8014872:	009b      	lsls	r3, r3, #2
 8014874:	4413      	add	r3, r2
 8014876:	009b      	lsls	r3, r3, #2
 8014878:	4a16      	ldr	r2, [pc, #88]	; (80148d4 <xTaskGenericNotifyFromISR+0x1a4>)
 801487a:	441a      	add	r2, r3
 801487c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801487e:	3304      	adds	r3, #4
 8014880:	4619      	mov	r1, r3
 8014882:	4610      	mov	r0, r2
 8014884:	f7fe f9c0 	bl	8012c08 <vListInsertEnd>
 8014888:	e005      	b.n	8014896 <xTaskGenericNotifyFromISR+0x166>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801488a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801488c:	3318      	adds	r3, #24
 801488e:	4619      	mov	r1, r3
 8014890:	4811      	ldr	r0, [pc, #68]	; (80148d8 <xTaskGenericNotifyFromISR+0x1a8>)
 8014892:	f7fe f9b9 	bl	8012c08 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801489a:	4b10      	ldr	r3, [pc, #64]	; (80148dc <xTaskGenericNotifyFromISR+0x1ac>)
 801489c:	681b      	ldr	r3, [r3, #0]
 801489e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148a0:	429a      	cmp	r2, r3
 80148a2:	d908      	bls.n	80148b6 <xTaskGenericNotifyFromISR+0x186>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80148a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	d002      	beq.n	80148b0 <xTaskGenericNotifyFromISR+0x180>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80148aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80148ac:	2201      	movs	r2, #1
 80148ae:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80148b0:	4b0b      	ldr	r3, [pc, #44]	; (80148e0 <xTaskGenericNotifyFromISR+0x1b0>)
 80148b2:	2201      	movs	r2, #1
 80148b4:	601a      	str	r2, [r3, #0]
 80148b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148b8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80148ba:	693b      	ldr	r3, [r7, #16]
 80148bc:	f383 8811 	msr	BASEPRI, r3
}
 80148c0:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80148c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80148c4:	4618      	mov	r0, r3
 80148c6:	3738      	adds	r7, #56	; 0x38
 80148c8:	46bd      	mov	sp, r7
 80148ca:	bd80      	pop	{r7, pc}
 80148cc:	2000113c 	.word	0x2000113c
 80148d0:	2000111c 	.word	0x2000111c
 80148d4:	20001018 	.word	0x20001018
 80148d8:	200010d4 	.word	0x200010d4
 80148dc:	20001014 	.word	0x20001014
 80148e0:	20001128 	.word	0x20001128

080148e4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80148e4:	b580      	push	{r7, lr}
 80148e6:	b084      	sub	sp, #16
 80148e8:	af00      	add	r7, sp, #0
 80148ea:	6078      	str	r0, [r7, #4]
 80148ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80148ee:	4b29      	ldr	r3, [pc, #164]	; (8014994 <prvAddCurrentTaskToDelayedList+0xb0>)
 80148f0:	681b      	ldr	r3, [r3, #0]
 80148f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80148f4:	4b28      	ldr	r3, [pc, #160]	; (8014998 <prvAddCurrentTaskToDelayedList+0xb4>)
 80148f6:	681b      	ldr	r3, [r3, #0]
 80148f8:	3304      	adds	r3, #4
 80148fa:	4618      	mov	r0, r3
 80148fc:	f7fe f9e1 	bl	8012cc2 <uxListRemove>
 8014900:	4603      	mov	r3, r0
 8014902:	2b00      	cmp	r3, #0
 8014904:	d10b      	bne.n	801491e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8014906:	4b24      	ldr	r3, [pc, #144]	; (8014998 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014908:	681b      	ldr	r3, [r3, #0]
 801490a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801490c:	2201      	movs	r2, #1
 801490e:	fa02 f303 	lsl.w	r3, r2, r3
 8014912:	43da      	mvns	r2, r3
 8014914:	4b21      	ldr	r3, [pc, #132]	; (801499c <prvAddCurrentTaskToDelayedList+0xb8>)
 8014916:	681b      	ldr	r3, [r3, #0]
 8014918:	4013      	ands	r3, r2
 801491a:	4a20      	ldr	r2, [pc, #128]	; (801499c <prvAddCurrentTaskToDelayedList+0xb8>)
 801491c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014924:	d10a      	bne.n	801493c <prvAddCurrentTaskToDelayedList+0x58>
 8014926:	683b      	ldr	r3, [r7, #0]
 8014928:	2b00      	cmp	r3, #0
 801492a:	d007      	beq.n	801493c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801492c:	4b1a      	ldr	r3, [pc, #104]	; (8014998 <prvAddCurrentTaskToDelayedList+0xb4>)
 801492e:	681b      	ldr	r3, [r3, #0]
 8014930:	3304      	adds	r3, #4
 8014932:	4619      	mov	r1, r3
 8014934:	481a      	ldr	r0, [pc, #104]	; (80149a0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8014936:	f7fe f967 	bl	8012c08 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801493a:	e026      	b.n	801498a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801493c:	68fa      	ldr	r2, [r7, #12]
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	4413      	add	r3, r2
 8014942:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014944:	4b14      	ldr	r3, [pc, #80]	; (8014998 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014946:	681b      	ldr	r3, [r3, #0]
 8014948:	68ba      	ldr	r2, [r7, #8]
 801494a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801494c:	68ba      	ldr	r2, [r7, #8]
 801494e:	68fb      	ldr	r3, [r7, #12]
 8014950:	429a      	cmp	r2, r3
 8014952:	d209      	bcs.n	8014968 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014954:	4b13      	ldr	r3, [pc, #76]	; (80149a4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8014956:	681a      	ldr	r2, [r3, #0]
 8014958:	4b0f      	ldr	r3, [pc, #60]	; (8014998 <prvAddCurrentTaskToDelayedList+0xb4>)
 801495a:	681b      	ldr	r3, [r3, #0]
 801495c:	3304      	adds	r3, #4
 801495e:	4619      	mov	r1, r3
 8014960:	4610      	mov	r0, r2
 8014962:	f7fe f975 	bl	8012c50 <vListInsert>
}
 8014966:	e010      	b.n	801498a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014968:	4b0f      	ldr	r3, [pc, #60]	; (80149a8 <prvAddCurrentTaskToDelayedList+0xc4>)
 801496a:	681a      	ldr	r2, [r3, #0]
 801496c:	4b0a      	ldr	r3, [pc, #40]	; (8014998 <prvAddCurrentTaskToDelayedList+0xb4>)
 801496e:	681b      	ldr	r3, [r3, #0]
 8014970:	3304      	adds	r3, #4
 8014972:	4619      	mov	r1, r3
 8014974:	4610      	mov	r0, r2
 8014976:	f7fe f96b 	bl	8012c50 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801497a:	4b0c      	ldr	r3, [pc, #48]	; (80149ac <prvAddCurrentTaskToDelayedList+0xc8>)
 801497c:	681b      	ldr	r3, [r3, #0]
 801497e:	68ba      	ldr	r2, [r7, #8]
 8014980:	429a      	cmp	r2, r3
 8014982:	d202      	bcs.n	801498a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8014984:	4a09      	ldr	r2, [pc, #36]	; (80149ac <prvAddCurrentTaskToDelayedList+0xc8>)
 8014986:	68bb      	ldr	r3, [r7, #8]
 8014988:	6013      	str	r3, [r2, #0]
}
 801498a:	bf00      	nop
 801498c:	3710      	adds	r7, #16
 801498e:	46bd      	mov	sp, r7
 8014990:	bd80      	pop	{r7, pc}
 8014992:	bf00      	nop
 8014994:	20001118 	.word	0x20001118
 8014998:	20001014 	.word	0x20001014
 801499c:	2000111c 	.word	0x2000111c
 80149a0:	20001100 	.word	0x20001100
 80149a4:	200010d0 	.word	0x200010d0
 80149a8:	200010cc 	.word	0x200010cc
 80149ac:	20001134 	.word	0x20001134

080149b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80149b0:	b480      	push	{r7}
 80149b2:	b085      	sub	sp, #20
 80149b4:	af00      	add	r7, sp, #0
 80149b6:	60f8      	str	r0, [r7, #12]
 80149b8:	60b9      	str	r1, [r7, #8]
 80149ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80149bc:	68fb      	ldr	r3, [r7, #12]
 80149be:	3b04      	subs	r3, #4
 80149c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80149c2:	68fb      	ldr	r3, [r7, #12]
 80149c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80149c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80149ca:	68fb      	ldr	r3, [r7, #12]
 80149cc:	3b04      	subs	r3, #4
 80149ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80149d0:	68bb      	ldr	r3, [r7, #8]
 80149d2:	f023 0201 	bic.w	r2, r3, #1
 80149d6:	68fb      	ldr	r3, [r7, #12]
 80149d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80149da:	68fb      	ldr	r3, [r7, #12]
 80149dc:	3b04      	subs	r3, #4
 80149de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80149e0:	4a0c      	ldr	r2, [pc, #48]	; (8014a14 <pxPortInitialiseStack+0x64>)
 80149e2:	68fb      	ldr	r3, [r7, #12]
 80149e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80149e6:	68fb      	ldr	r3, [r7, #12]
 80149e8:	3b14      	subs	r3, #20
 80149ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80149ec:	687a      	ldr	r2, [r7, #4]
 80149ee:	68fb      	ldr	r3, [r7, #12]
 80149f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80149f2:	68fb      	ldr	r3, [r7, #12]
 80149f4:	3b04      	subs	r3, #4
 80149f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80149f8:	68fb      	ldr	r3, [r7, #12]
 80149fa:	f06f 0202 	mvn.w	r2, #2
 80149fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014a00:	68fb      	ldr	r3, [r7, #12]
 8014a02:	3b20      	subs	r3, #32
 8014a04:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014a06:	68fb      	ldr	r3, [r7, #12]
}
 8014a08:	4618      	mov	r0, r3
 8014a0a:	3714      	adds	r7, #20
 8014a0c:	46bd      	mov	sp, r7
 8014a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a12:	4770      	bx	lr
 8014a14:	08014a19 	.word	0x08014a19

08014a18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014a18:	b480      	push	{r7}
 8014a1a:	b085      	sub	sp, #20
 8014a1c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014a1e:	2300      	movs	r3, #0
 8014a20:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014a22:	4b12      	ldr	r3, [pc, #72]	; (8014a6c <prvTaskExitError+0x54>)
 8014a24:	681b      	ldr	r3, [r3, #0]
 8014a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a2a:	d00a      	beq.n	8014a42 <prvTaskExitError+0x2a>
	__asm volatile
 8014a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a30:	f383 8811 	msr	BASEPRI, r3
 8014a34:	f3bf 8f6f 	isb	sy
 8014a38:	f3bf 8f4f 	dsb	sy
 8014a3c:	60fb      	str	r3, [r7, #12]
}
 8014a3e:	bf00      	nop
 8014a40:	e7fe      	b.n	8014a40 <prvTaskExitError+0x28>
	__asm volatile
 8014a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a46:	f383 8811 	msr	BASEPRI, r3
 8014a4a:	f3bf 8f6f 	isb	sy
 8014a4e:	f3bf 8f4f 	dsb	sy
 8014a52:	60bb      	str	r3, [r7, #8]
}
 8014a54:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014a56:	bf00      	nop
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d0fc      	beq.n	8014a58 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014a5e:	bf00      	nop
 8014a60:	bf00      	nop
 8014a62:	3714      	adds	r7, #20
 8014a64:	46bd      	mov	sp, r7
 8014a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a6a:	4770      	bx	lr
 8014a6c:	20000944 	.word	0x20000944

08014a70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014a70:	4b07      	ldr	r3, [pc, #28]	; (8014a90 <pxCurrentTCBConst2>)
 8014a72:	6819      	ldr	r1, [r3, #0]
 8014a74:	6808      	ldr	r0, [r1, #0]
 8014a76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a7a:	f380 8809 	msr	PSP, r0
 8014a7e:	f3bf 8f6f 	isb	sy
 8014a82:	f04f 0000 	mov.w	r0, #0
 8014a86:	f380 8811 	msr	BASEPRI, r0
 8014a8a:	4770      	bx	lr
 8014a8c:	f3af 8000 	nop.w

08014a90 <pxCurrentTCBConst2>:
 8014a90:	20001014 	.word	0x20001014
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014a94:	bf00      	nop
 8014a96:	bf00      	nop

08014a98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014a98:	4808      	ldr	r0, [pc, #32]	; (8014abc <prvPortStartFirstTask+0x24>)
 8014a9a:	6800      	ldr	r0, [r0, #0]
 8014a9c:	6800      	ldr	r0, [r0, #0]
 8014a9e:	f380 8808 	msr	MSP, r0
 8014aa2:	f04f 0000 	mov.w	r0, #0
 8014aa6:	f380 8814 	msr	CONTROL, r0
 8014aaa:	b662      	cpsie	i
 8014aac:	b661      	cpsie	f
 8014aae:	f3bf 8f4f 	dsb	sy
 8014ab2:	f3bf 8f6f 	isb	sy
 8014ab6:	df00      	svc	0
 8014ab8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8014aba:	bf00      	nop
 8014abc:	e000ed08 	.word	0xe000ed08

08014ac0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014ac0:	b580      	push	{r7, lr}
 8014ac2:	b086      	sub	sp, #24
 8014ac4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014ac6:	4b46      	ldr	r3, [pc, #280]	; (8014be0 <xPortStartScheduler+0x120>)
 8014ac8:	681b      	ldr	r3, [r3, #0]
 8014aca:	4a46      	ldr	r2, [pc, #280]	; (8014be4 <xPortStartScheduler+0x124>)
 8014acc:	4293      	cmp	r3, r2
 8014ace:	d10a      	bne.n	8014ae6 <xPortStartScheduler+0x26>
	__asm volatile
 8014ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ad4:	f383 8811 	msr	BASEPRI, r3
 8014ad8:	f3bf 8f6f 	isb	sy
 8014adc:	f3bf 8f4f 	dsb	sy
 8014ae0:	613b      	str	r3, [r7, #16]
}
 8014ae2:	bf00      	nop
 8014ae4:	e7fe      	b.n	8014ae4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014ae6:	4b3e      	ldr	r3, [pc, #248]	; (8014be0 <xPortStartScheduler+0x120>)
 8014ae8:	681b      	ldr	r3, [r3, #0]
 8014aea:	4a3f      	ldr	r2, [pc, #252]	; (8014be8 <xPortStartScheduler+0x128>)
 8014aec:	4293      	cmp	r3, r2
 8014aee:	d10a      	bne.n	8014b06 <xPortStartScheduler+0x46>
	__asm volatile
 8014af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014af4:	f383 8811 	msr	BASEPRI, r3
 8014af8:	f3bf 8f6f 	isb	sy
 8014afc:	f3bf 8f4f 	dsb	sy
 8014b00:	60fb      	str	r3, [r7, #12]
}
 8014b02:	bf00      	nop
 8014b04:	e7fe      	b.n	8014b04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014b06:	4b39      	ldr	r3, [pc, #228]	; (8014bec <xPortStartScheduler+0x12c>)
 8014b08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014b0a:	697b      	ldr	r3, [r7, #20]
 8014b0c:	781b      	ldrb	r3, [r3, #0]
 8014b0e:	b2db      	uxtb	r3, r3
 8014b10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014b12:	697b      	ldr	r3, [r7, #20]
 8014b14:	22ff      	movs	r2, #255	; 0xff
 8014b16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014b18:	697b      	ldr	r3, [r7, #20]
 8014b1a:	781b      	ldrb	r3, [r3, #0]
 8014b1c:	b2db      	uxtb	r3, r3
 8014b1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014b20:	78fb      	ldrb	r3, [r7, #3]
 8014b22:	b2db      	uxtb	r3, r3
 8014b24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014b28:	b2da      	uxtb	r2, r3
 8014b2a:	4b31      	ldr	r3, [pc, #196]	; (8014bf0 <xPortStartScheduler+0x130>)
 8014b2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014b2e:	4b31      	ldr	r3, [pc, #196]	; (8014bf4 <xPortStartScheduler+0x134>)
 8014b30:	2207      	movs	r2, #7
 8014b32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014b34:	e009      	b.n	8014b4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8014b36:	4b2f      	ldr	r3, [pc, #188]	; (8014bf4 <xPortStartScheduler+0x134>)
 8014b38:	681b      	ldr	r3, [r3, #0]
 8014b3a:	3b01      	subs	r3, #1
 8014b3c:	4a2d      	ldr	r2, [pc, #180]	; (8014bf4 <xPortStartScheduler+0x134>)
 8014b3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014b40:	78fb      	ldrb	r3, [r7, #3]
 8014b42:	b2db      	uxtb	r3, r3
 8014b44:	005b      	lsls	r3, r3, #1
 8014b46:	b2db      	uxtb	r3, r3
 8014b48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014b4a:	78fb      	ldrb	r3, [r7, #3]
 8014b4c:	b2db      	uxtb	r3, r3
 8014b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014b52:	2b80      	cmp	r3, #128	; 0x80
 8014b54:	d0ef      	beq.n	8014b36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014b56:	4b27      	ldr	r3, [pc, #156]	; (8014bf4 <xPortStartScheduler+0x134>)
 8014b58:	681b      	ldr	r3, [r3, #0]
 8014b5a:	f1c3 0307 	rsb	r3, r3, #7
 8014b5e:	2b04      	cmp	r3, #4
 8014b60:	d00a      	beq.n	8014b78 <xPortStartScheduler+0xb8>
	__asm volatile
 8014b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b66:	f383 8811 	msr	BASEPRI, r3
 8014b6a:	f3bf 8f6f 	isb	sy
 8014b6e:	f3bf 8f4f 	dsb	sy
 8014b72:	60bb      	str	r3, [r7, #8]
}
 8014b74:	bf00      	nop
 8014b76:	e7fe      	b.n	8014b76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014b78:	4b1e      	ldr	r3, [pc, #120]	; (8014bf4 <xPortStartScheduler+0x134>)
 8014b7a:	681b      	ldr	r3, [r3, #0]
 8014b7c:	021b      	lsls	r3, r3, #8
 8014b7e:	4a1d      	ldr	r2, [pc, #116]	; (8014bf4 <xPortStartScheduler+0x134>)
 8014b80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014b82:	4b1c      	ldr	r3, [pc, #112]	; (8014bf4 <xPortStartScheduler+0x134>)
 8014b84:	681b      	ldr	r3, [r3, #0]
 8014b86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014b8a:	4a1a      	ldr	r2, [pc, #104]	; (8014bf4 <xPortStartScheduler+0x134>)
 8014b8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	b2da      	uxtb	r2, r3
 8014b92:	697b      	ldr	r3, [r7, #20]
 8014b94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014b96:	4b18      	ldr	r3, [pc, #96]	; (8014bf8 <xPortStartScheduler+0x138>)
 8014b98:	681b      	ldr	r3, [r3, #0]
 8014b9a:	4a17      	ldr	r2, [pc, #92]	; (8014bf8 <xPortStartScheduler+0x138>)
 8014b9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014ba0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014ba2:	4b15      	ldr	r3, [pc, #84]	; (8014bf8 <xPortStartScheduler+0x138>)
 8014ba4:	681b      	ldr	r3, [r3, #0]
 8014ba6:	4a14      	ldr	r2, [pc, #80]	; (8014bf8 <xPortStartScheduler+0x138>)
 8014ba8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8014bac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014bae:	f000 f8dd 	bl	8014d6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014bb2:	4b12      	ldr	r3, [pc, #72]	; (8014bfc <xPortStartScheduler+0x13c>)
 8014bb4:	2200      	movs	r2, #0
 8014bb6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014bb8:	f000 f8fc 	bl	8014db4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014bbc:	4b10      	ldr	r3, [pc, #64]	; (8014c00 <xPortStartScheduler+0x140>)
 8014bbe:	681b      	ldr	r3, [r3, #0]
 8014bc0:	4a0f      	ldr	r2, [pc, #60]	; (8014c00 <xPortStartScheduler+0x140>)
 8014bc2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014bc6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014bc8:	f7ff ff66 	bl	8014a98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014bcc:	f7ff f9c0 	bl	8013f50 <vTaskSwitchContext>
	prvTaskExitError();
 8014bd0:	f7ff ff22 	bl	8014a18 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014bd4:	2300      	movs	r3, #0
}
 8014bd6:	4618      	mov	r0, r3
 8014bd8:	3718      	adds	r7, #24
 8014bda:	46bd      	mov	sp, r7
 8014bdc:	bd80      	pop	{r7, pc}
 8014bde:	bf00      	nop
 8014be0:	e000ed00 	.word	0xe000ed00
 8014be4:	410fc271 	.word	0x410fc271
 8014be8:	410fc270 	.word	0x410fc270
 8014bec:	e000e400 	.word	0xe000e400
 8014bf0:	20001140 	.word	0x20001140
 8014bf4:	20001144 	.word	0x20001144
 8014bf8:	e000ed20 	.word	0xe000ed20
 8014bfc:	20000944 	.word	0x20000944
 8014c00:	e000ef34 	.word	0xe000ef34

08014c04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014c04:	b480      	push	{r7}
 8014c06:	b083      	sub	sp, #12
 8014c08:	af00      	add	r7, sp, #0
	__asm volatile
 8014c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c0e:	f383 8811 	msr	BASEPRI, r3
 8014c12:	f3bf 8f6f 	isb	sy
 8014c16:	f3bf 8f4f 	dsb	sy
 8014c1a:	607b      	str	r3, [r7, #4]
}
 8014c1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014c1e:	4b0f      	ldr	r3, [pc, #60]	; (8014c5c <vPortEnterCritical+0x58>)
 8014c20:	681b      	ldr	r3, [r3, #0]
 8014c22:	3301      	adds	r3, #1
 8014c24:	4a0d      	ldr	r2, [pc, #52]	; (8014c5c <vPortEnterCritical+0x58>)
 8014c26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014c28:	4b0c      	ldr	r3, [pc, #48]	; (8014c5c <vPortEnterCritical+0x58>)
 8014c2a:	681b      	ldr	r3, [r3, #0]
 8014c2c:	2b01      	cmp	r3, #1
 8014c2e:	d10f      	bne.n	8014c50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014c30:	4b0b      	ldr	r3, [pc, #44]	; (8014c60 <vPortEnterCritical+0x5c>)
 8014c32:	681b      	ldr	r3, [r3, #0]
 8014c34:	b2db      	uxtb	r3, r3
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	d00a      	beq.n	8014c50 <vPortEnterCritical+0x4c>
	__asm volatile
 8014c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c3e:	f383 8811 	msr	BASEPRI, r3
 8014c42:	f3bf 8f6f 	isb	sy
 8014c46:	f3bf 8f4f 	dsb	sy
 8014c4a:	603b      	str	r3, [r7, #0]
}
 8014c4c:	bf00      	nop
 8014c4e:	e7fe      	b.n	8014c4e <vPortEnterCritical+0x4a>
	}
}
 8014c50:	bf00      	nop
 8014c52:	370c      	adds	r7, #12
 8014c54:	46bd      	mov	sp, r7
 8014c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c5a:	4770      	bx	lr
 8014c5c:	20000944 	.word	0x20000944
 8014c60:	e000ed04 	.word	0xe000ed04

08014c64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014c64:	b480      	push	{r7}
 8014c66:	b083      	sub	sp, #12
 8014c68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8014c6a:	4b12      	ldr	r3, [pc, #72]	; (8014cb4 <vPortExitCritical+0x50>)
 8014c6c:	681b      	ldr	r3, [r3, #0]
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	d10a      	bne.n	8014c88 <vPortExitCritical+0x24>
	__asm volatile
 8014c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c76:	f383 8811 	msr	BASEPRI, r3
 8014c7a:	f3bf 8f6f 	isb	sy
 8014c7e:	f3bf 8f4f 	dsb	sy
 8014c82:	607b      	str	r3, [r7, #4]
}
 8014c84:	bf00      	nop
 8014c86:	e7fe      	b.n	8014c86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8014c88:	4b0a      	ldr	r3, [pc, #40]	; (8014cb4 <vPortExitCritical+0x50>)
 8014c8a:	681b      	ldr	r3, [r3, #0]
 8014c8c:	3b01      	subs	r3, #1
 8014c8e:	4a09      	ldr	r2, [pc, #36]	; (8014cb4 <vPortExitCritical+0x50>)
 8014c90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014c92:	4b08      	ldr	r3, [pc, #32]	; (8014cb4 <vPortExitCritical+0x50>)
 8014c94:	681b      	ldr	r3, [r3, #0]
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d105      	bne.n	8014ca6 <vPortExitCritical+0x42>
 8014c9a:	2300      	movs	r3, #0
 8014c9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014c9e:	683b      	ldr	r3, [r7, #0]
 8014ca0:	f383 8811 	msr	BASEPRI, r3
}
 8014ca4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8014ca6:	bf00      	nop
 8014ca8:	370c      	adds	r7, #12
 8014caa:	46bd      	mov	sp, r7
 8014cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cb0:	4770      	bx	lr
 8014cb2:	bf00      	nop
 8014cb4:	20000944 	.word	0x20000944
	...

08014cc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014cc0:	f3ef 8009 	mrs	r0, PSP
 8014cc4:	f3bf 8f6f 	isb	sy
 8014cc8:	4b15      	ldr	r3, [pc, #84]	; (8014d20 <pxCurrentTCBConst>)
 8014cca:	681a      	ldr	r2, [r3, #0]
 8014ccc:	f01e 0f10 	tst.w	lr, #16
 8014cd0:	bf08      	it	eq
 8014cd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014cd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cda:	6010      	str	r0, [r2, #0]
 8014cdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014ce0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014ce4:	f380 8811 	msr	BASEPRI, r0
 8014ce8:	f3bf 8f4f 	dsb	sy
 8014cec:	f3bf 8f6f 	isb	sy
 8014cf0:	f7ff f92e 	bl	8013f50 <vTaskSwitchContext>
 8014cf4:	f04f 0000 	mov.w	r0, #0
 8014cf8:	f380 8811 	msr	BASEPRI, r0
 8014cfc:	bc09      	pop	{r0, r3}
 8014cfe:	6819      	ldr	r1, [r3, #0]
 8014d00:	6808      	ldr	r0, [r1, #0]
 8014d02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d06:	f01e 0f10 	tst.w	lr, #16
 8014d0a:	bf08      	it	eq
 8014d0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014d10:	f380 8809 	msr	PSP, r0
 8014d14:	f3bf 8f6f 	isb	sy
 8014d18:	4770      	bx	lr
 8014d1a:	bf00      	nop
 8014d1c:	f3af 8000 	nop.w

08014d20 <pxCurrentTCBConst>:
 8014d20:	20001014 	.word	0x20001014
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014d24:	bf00      	nop
 8014d26:	bf00      	nop

08014d28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014d28:	b580      	push	{r7, lr}
 8014d2a:	b082      	sub	sp, #8
 8014d2c:	af00      	add	r7, sp, #0
	__asm volatile
 8014d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d32:	f383 8811 	msr	BASEPRI, r3
 8014d36:	f3bf 8f6f 	isb	sy
 8014d3a:	f3bf 8f4f 	dsb	sy
 8014d3e:	607b      	str	r3, [r7, #4]
}
 8014d40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014d42:	f7ff f84d 	bl	8013de0 <xTaskIncrementTick>
 8014d46:	4603      	mov	r3, r0
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d003      	beq.n	8014d54 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014d4c:	4b06      	ldr	r3, [pc, #24]	; (8014d68 <SysTick_Handler+0x40>)
 8014d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014d52:	601a      	str	r2, [r3, #0]
 8014d54:	2300      	movs	r3, #0
 8014d56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014d58:	683b      	ldr	r3, [r7, #0]
 8014d5a:	f383 8811 	msr	BASEPRI, r3
}
 8014d5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8014d60:	bf00      	nop
 8014d62:	3708      	adds	r7, #8
 8014d64:	46bd      	mov	sp, r7
 8014d66:	bd80      	pop	{r7, pc}
 8014d68:	e000ed04 	.word	0xe000ed04

08014d6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014d6c:	b480      	push	{r7}
 8014d6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014d70:	4b0b      	ldr	r3, [pc, #44]	; (8014da0 <vPortSetupTimerInterrupt+0x34>)
 8014d72:	2200      	movs	r2, #0
 8014d74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014d76:	4b0b      	ldr	r3, [pc, #44]	; (8014da4 <vPortSetupTimerInterrupt+0x38>)
 8014d78:	2200      	movs	r2, #0
 8014d7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014d7c:	4b0a      	ldr	r3, [pc, #40]	; (8014da8 <vPortSetupTimerInterrupt+0x3c>)
 8014d7e:	681b      	ldr	r3, [r3, #0]
 8014d80:	4a0a      	ldr	r2, [pc, #40]	; (8014dac <vPortSetupTimerInterrupt+0x40>)
 8014d82:	fba2 2303 	umull	r2, r3, r2, r3
 8014d86:	099b      	lsrs	r3, r3, #6
 8014d88:	4a09      	ldr	r2, [pc, #36]	; (8014db0 <vPortSetupTimerInterrupt+0x44>)
 8014d8a:	3b01      	subs	r3, #1
 8014d8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8014d8e:	4b04      	ldr	r3, [pc, #16]	; (8014da0 <vPortSetupTimerInterrupt+0x34>)
 8014d90:	2207      	movs	r2, #7
 8014d92:	601a      	str	r2, [r3, #0]
}
 8014d94:	bf00      	nop
 8014d96:	46bd      	mov	sp, r7
 8014d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d9c:	4770      	bx	lr
 8014d9e:	bf00      	nop
 8014da0:	e000e010 	.word	0xe000e010
 8014da4:	e000e018 	.word	0xe000e018
 8014da8:	20000828 	.word	0x20000828
 8014dac:	10624dd3 	.word	0x10624dd3
 8014db0:	e000e014 	.word	0xe000e014

08014db4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014db4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014dc4 <vPortEnableVFP+0x10>
 8014db8:	6801      	ldr	r1, [r0, #0]
 8014dba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8014dbe:	6001      	str	r1, [r0, #0]
 8014dc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014dc2:	bf00      	nop
 8014dc4:	e000ed88 	.word	0xe000ed88

08014dc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014dc8:	b480      	push	{r7}
 8014dca:	b085      	sub	sp, #20
 8014dcc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8014dce:	f3ef 8305 	mrs	r3, IPSR
 8014dd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014dd4:	68fb      	ldr	r3, [r7, #12]
 8014dd6:	2b0f      	cmp	r3, #15
 8014dd8:	d914      	bls.n	8014e04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8014dda:	4a17      	ldr	r2, [pc, #92]	; (8014e38 <vPortValidateInterruptPriority+0x70>)
 8014ddc:	68fb      	ldr	r3, [r7, #12]
 8014dde:	4413      	add	r3, r2
 8014de0:	781b      	ldrb	r3, [r3, #0]
 8014de2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014de4:	4b15      	ldr	r3, [pc, #84]	; (8014e3c <vPortValidateInterruptPriority+0x74>)
 8014de6:	781b      	ldrb	r3, [r3, #0]
 8014de8:	7afa      	ldrb	r2, [r7, #11]
 8014dea:	429a      	cmp	r2, r3
 8014dec:	d20a      	bcs.n	8014e04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8014dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014df2:	f383 8811 	msr	BASEPRI, r3
 8014df6:	f3bf 8f6f 	isb	sy
 8014dfa:	f3bf 8f4f 	dsb	sy
 8014dfe:	607b      	str	r3, [r7, #4]
}
 8014e00:	bf00      	nop
 8014e02:	e7fe      	b.n	8014e02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014e04:	4b0e      	ldr	r3, [pc, #56]	; (8014e40 <vPortValidateInterruptPriority+0x78>)
 8014e06:	681b      	ldr	r3, [r3, #0]
 8014e08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8014e0c:	4b0d      	ldr	r3, [pc, #52]	; (8014e44 <vPortValidateInterruptPriority+0x7c>)
 8014e0e:	681b      	ldr	r3, [r3, #0]
 8014e10:	429a      	cmp	r2, r3
 8014e12:	d90a      	bls.n	8014e2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8014e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e18:	f383 8811 	msr	BASEPRI, r3
 8014e1c:	f3bf 8f6f 	isb	sy
 8014e20:	f3bf 8f4f 	dsb	sy
 8014e24:	603b      	str	r3, [r7, #0]
}
 8014e26:	bf00      	nop
 8014e28:	e7fe      	b.n	8014e28 <vPortValidateInterruptPriority+0x60>
	}
 8014e2a:	bf00      	nop
 8014e2c:	3714      	adds	r7, #20
 8014e2e:	46bd      	mov	sp, r7
 8014e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e34:	4770      	bx	lr
 8014e36:	bf00      	nop
 8014e38:	e000e3f0 	.word	0xe000e3f0
 8014e3c:	20001140 	.word	0x20001140
 8014e40:	e000ed0c 	.word	0xe000ed0c
 8014e44:	20001144 	.word	0x20001144

08014e48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014e48:	b580      	push	{r7, lr}
 8014e4a:	b08a      	sub	sp, #40	; 0x28
 8014e4c:	af00      	add	r7, sp, #0
 8014e4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014e50:	2300      	movs	r3, #0
 8014e52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014e54:	f7fe ff1a 	bl	8013c8c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014e58:	4b58      	ldr	r3, [pc, #352]	; (8014fbc <pvPortMalloc+0x174>)
 8014e5a:	681b      	ldr	r3, [r3, #0]
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	d101      	bne.n	8014e64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014e60:	f000 f910 	bl	8015084 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014e64:	4b56      	ldr	r3, [pc, #344]	; (8014fc0 <pvPortMalloc+0x178>)
 8014e66:	681a      	ldr	r2, [r3, #0]
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	4013      	ands	r3, r2
 8014e6c:	2b00      	cmp	r3, #0
 8014e6e:	f040 808e 	bne.w	8014f8e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d01d      	beq.n	8014eb4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8014e78:	2208      	movs	r2, #8
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	4413      	add	r3, r2
 8014e7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	f003 0307 	and.w	r3, r3, #7
 8014e86:	2b00      	cmp	r3, #0
 8014e88:	d014      	beq.n	8014eb4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	f023 0307 	bic.w	r3, r3, #7
 8014e90:	3308      	adds	r3, #8
 8014e92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	f003 0307 	and.w	r3, r3, #7
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	d00a      	beq.n	8014eb4 <pvPortMalloc+0x6c>
	__asm volatile
 8014e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ea2:	f383 8811 	msr	BASEPRI, r3
 8014ea6:	f3bf 8f6f 	isb	sy
 8014eaa:	f3bf 8f4f 	dsb	sy
 8014eae:	617b      	str	r3, [r7, #20]
}
 8014eb0:	bf00      	nop
 8014eb2:	e7fe      	b.n	8014eb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	d069      	beq.n	8014f8e <pvPortMalloc+0x146>
 8014eba:	4b42      	ldr	r3, [pc, #264]	; (8014fc4 <pvPortMalloc+0x17c>)
 8014ebc:	681b      	ldr	r3, [r3, #0]
 8014ebe:	687a      	ldr	r2, [r7, #4]
 8014ec0:	429a      	cmp	r2, r3
 8014ec2:	d864      	bhi.n	8014f8e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014ec4:	4b40      	ldr	r3, [pc, #256]	; (8014fc8 <pvPortMalloc+0x180>)
 8014ec6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014ec8:	4b3f      	ldr	r3, [pc, #252]	; (8014fc8 <pvPortMalloc+0x180>)
 8014eca:	681b      	ldr	r3, [r3, #0]
 8014ecc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014ece:	e004      	b.n	8014eda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8014ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ed2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ed6:	681b      	ldr	r3, [r3, #0]
 8014ed8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014edc:	685b      	ldr	r3, [r3, #4]
 8014ede:	687a      	ldr	r2, [r7, #4]
 8014ee0:	429a      	cmp	r2, r3
 8014ee2:	d903      	bls.n	8014eec <pvPortMalloc+0xa4>
 8014ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ee6:	681b      	ldr	r3, [r3, #0]
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	d1f1      	bne.n	8014ed0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8014eec:	4b33      	ldr	r3, [pc, #204]	; (8014fbc <pvPortMalloc+0x174>)
 8014eee:	681b      	ldr	r3, [r3, #0]
 8014ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014ef2:	429a      	cmp	r2, r3
 8014ef4:	d04b      	beq.n	8014f8e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014ef6:	6a3b      	ldr	r3, [r7, #32]
 8014ef8:	681b      	ldr	r3, [r3, #0]
 8014efa:	2208      	movs	r2, #8
 8014efc:	4413      	add	r3, r2
 8014efe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f02:	681a      	ldr	r2, [r3, #0]
 8014f04:	6a3b      	ldr	r3, [r7, #32]
 8014f06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f0a:	685a      	ldr	r2, [r3, #4]
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	1ad2      	subs	r2, r2, r3
 8014f10:	2308      	movs	r3, #8
 8014f12:	005b      	lsls	r3, r3, #1
 8014f14:	429a      	cmp	r2, r3
 8014f16:	d91f      	bls.n	8014f58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	4413      	add	r3, r2
 8014f1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014f20:	69bb      	ldr	r3, [r7, #24]
 8014f22:	f003 0307 	and.w	r3, r3, #7
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d00a      	beq.n	8014f40 <pvPortMalloc+0xf8>
	__asm volatile
 8014f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f2e:	f383 8811 	msr	BASEPRI, r3
 8014f32:	f3bf 8f6f 	isb	sy
 8014f36:	f3bf 8f4f 	dsb	sy
 8014f3a:	613b      	str	r3, [r7, #16]
}
 8014f3c:	bf00      	nop
 8014f3e:	e7fe      	b.n	8014f3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f42:	685a      	ldr	r2, [r3, #4]
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	1ad2      	subs	r2, r2, r3
 8014f48:	69bb      	ldr	r3, [r7, #24]
 8014f4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8014f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f4e:	687a      	ldr	r2, [r7, #4]
 8014f50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014f52:	69b8      	ldr	r0, [r7, #24]
 8014f54:	f000 f8f8 	bl	8015148 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014f58:	4b1a      	ldr	r3, [pc, #104]	; (8014fc4 <pvPortMalloc+0x17c>)
 8014f5a:	681a      	ldr	r2, [r3, #0]
 8014f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f5e:	685b      	ldr	r3, [r3, #4]
 8014f60:	1ad3      	subs	r3, r2, r3
 8014f62:	4a18      	ldr	r2, [pc, #96]	; (8014fc4 <pvPortMalloc+0x17c>)
 8014f64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014f66:	4b17      	ldr	r3, [pc, #92]	; (8014fc4 <pvPortMalloc+0x17c>)
 8014f68:	681a      	ldr	r2, [r3, #0]
 8014f6a:	4b18      	ldr	r3, [pc, #96]	; (8014fcc <pvPortMalloc+0x184>)
 8014f6c:	681b      	ldr	r3, [r3, #0]
 8014f6e:	429a      	cmp	r2, r3
 8014f70:	d203      	bcs.n	8014f7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014f72:	4b14      	ldr	r3, [pc, #80]	; (8014fc4 <pvPortMalloc+0x17c>)
 8014f74:	681b      	ldr	r3, [r3, #0]
 8014f76:	4a15      	ldr	r2, [pc, #84]	; (8014fcc <pvPortMalloc+0x184>)
 8014f78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8014f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f7c:	685a      	ldr	r2, [r3, #4]
 8014f7e:	4b10      	ldr	r3, [pc, #64]	; (8014fc0 <pvPortMalloc+0x178>)
 8014f80:	681b      	ldr	r3, [r3, #0]
 8014f82:	431a      	orrs	r2, r3
 8014f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f8a:	2200      	movs	r2, #0
 8014f8c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014f8e:	f7fe fe8b 	bl	8013ca8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8014f92:	69fb      	ldr	r3, [r7, #28]
 8014f94:	f003 0307 	and.w	r3, r3, #7
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	d00a      	beq.n	8014fb2 <pvPortMalloc+0x16a>
	__asm volatile
 8014f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fa0:	f383 8811 	msr	BASEPRI, r3
 8014fa4:	f3bf 8f6f 	isb	sy
 8014fa8:	f3bf 8f4f 	dsb	sy
 8014fac:	60fb      	str	r3, [r7, #12]
}
 8014fae:	bf00      	nop
 8014fb0:	e7fe      	b.n	8014fb0 <pvPortMalloc+0x168>
	return pvReturn;
 8014fb2:	69fb      	ldr	r3, [r7, #28]
}
 8014fb4:	4618      	mov	r0, r3
 8014fb6:	3728      	adds	r7, #40	; 0x28
 8014fb8:	46bd      	mov	sp, r7
 8014fba:	bd80      	pop	{r7, pc}
 8014fbc:	20004d50 	.word	0x20004d50
 8014fc0:	20004d5c 	.word	0x20004d5c
 8014fc4:	20004d54 	.word	0x20004d54
 8014fc8:	20004d48 	.word	0x20004d48
 8014fcc:	20004d58 	.word	0x20004d58

08014fd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014fd0:	b580      	push	{r7, lr}
 8014fd2:	b086      	sub	sp, #24
 8014fd4:	af00      	add	r7, sp, #0
 8014fd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d048      	beq.n	8015074 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8014fe2:	2308      	movs	r3, #8
 8014fe4:	425b      	negs	r3, r3
 8014fe6:	697a      	ldr	r2, [r7, #20]
 8014fe8:	4413      	add	r3, r2
 8014fea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8014fec:	697b      	ldr	r3, [r7, #20]
 8014fee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014ff0:	693b      	ldr	r3, [r7, #16]
 8014ff2:	685a      	ldr	r2, [r3, #4]
 8014ff4:	4b21      	ldr	r3, [pc, #132]	; (801507c <vPortFree+0xac>)
 8014ff6:	681b      	ldr	r3, [r3, #0]
 8014ff8:	4013      	ands	r3, r2
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d10a      	bne.n	8015014 <vPortFree+0x44>
	__asm volatile
 8014ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015002:	f383 8811 	msr	BASEPRI, r3
 8015006:	f3bf 8f6f 	isb	sy
 801500a:	f3bf 8f4f 	dsb	sy
 801500e:	60fb      	str	r3, [r7, #12]
}
 8015010:	bf00      	nop
 8015012:	e7fe      	b.n	8015012 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8015014:	693b      	ldr	r3, [r7, #16]
 8015016:	681b      	ldr	r3, [r3, #0]
 8015018:	2b00      	cmp	r3, #0
 801501a:	d00a      	beq.n	8015032 <vPortFree+0x62>
	__asm volatile
 801501c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015020:	f383 8811 	msr	BASEPRI, r3
 8015024:	f3bf 8f6f 	isb	sy
 8015028:	f3bf 8f4f 	dsb	sy
 801502c:	60bb      	str	r3, [r7, #8]
}
 801502e:	bf00      	nop
 8015030:	e7fe      	b.n	8015030 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8015032:	693b      	ldr	r3, [r7, #16]
 8015034:	685a      	ldr	r2, [r3, #4]
 8015036:	4b11      	ldr	r3, [pc, #68]	; (801507c <vPortFree+0xac>)
 8015038:	681b      	ldr	r3, [r3, #0]
 801503a:	4013      	ands	r3, r2
 801503c:	2b00      	cmp	r3, #0
 801503e:	d019      	beq.n	8015074 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8015040:	693b      	ldr	r3, [r7, #16]
 8015042:	681b      	ldr	r3, [r3, #0]
 8015044:	2b00      	cmp	r3, #0
 8015046:	d115      	bne.n	8015074 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015048:	693b      	ldr	r3, [r7, #16]
 801504a:	685a      	ldr	r2, [r3, #4]
 801504c:	4b0b      	ldr	r3, [pc, #44]	; (801507c <vPortFree+0xac>)
 801504e:	681b      	ldr	r3, [r3, #0]
 8015050:	43db      	mvns	r3, r3
 8015052:	401a      	ands	r2, r3
 8015054:	693b      	ldr	r3, [r7, #16]
 8015056:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015058:	f7fe fe18 	bl	8013c8c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801505c:	693b      	ldr	r3, [r7, #16]
 801505e:	685a      	ldr	r2, [r3, #4]
 8015060:	4b07      	ldr	r3, [pc, #28]	; (8015080 <vPortFree+0xb0>)
 8015062:	681b      	ldr	r3, [r3, #0]
 8015064:	4413      	add	r3, r2
 8015066:	4a06      	ldr	r2, [pc, #24]	; (8015080 <vPortFree+0xb0>)
 8015068:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801506a:	6938      	ldr	r0, [r7, #16]
 801506c:	f000 f86c 	bl	8015148 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8015070:	f7fe fe1a 	bl	8013ca8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8015074:	bf00      	nop
 8015076:	3718      	adds	r7, #24
 8015078:	46bd      	mov	sp, r7
 801507a:	bd80      	pop	{r7, pc}
 801507c:	20004d5c 	.word	0x20004d5c
 8015080:	20004d54 	.word	0x20004d54

08015084 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015084:	b480      	push	{r7}
 8015086:	b085      	sub	sp, #20
 8015088:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801508a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801508e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015090:	4b27      	ldr	r3, [pc, #156]	; (8015130 <prvHeapInit+0xac>)
 8015092:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015094:	68fb      	ldr	r3, [r7, #12]
 8015096:	f003 0307 	and.w	r3, r3, #7
 801509a:	2b00      	cmp	r3, #0
 801509c:	d00c      	beq.n	80150b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801509e:	68fb      	ldr	r3, [r7, #12]
 80150a0:	3307      	adds	r3, #7
 80150a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80150a4:	68fb      	ldr	r3, [r7, #12]
 80150a6:	f023 0307 	bic.w	r3, r3, #7
 80150aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80150ac:	68ba      	ldr	r2, [r7, #8]
 80150ae:	68fb      	ldr	r3, [r7, #12]
 80150b0:	1ad3      	subs	r3, r2, r3
 80150b2:	4a1f      	ldr	r2, [pc, #124]	; (8015130 <prvHeapInit+0xac>)
 80150b4:	4413      	add	r3, r2
 80150b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80150b8:	68fb      	ldr	r3, [r7, #12]
 80150ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80150bc:	4a1d      	ldr	r2, [pc, #116]	; (8015134 <prvHeapInit+0xb0>)
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80150c2:	4b1c      	ldr	r3, [pc, #112]	; (8015134 <prvHeapInit+0xb0>)
 80150c4:	2200      	movs	r2, #0
 80150c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	68ba      	ldr	r2, [r7, #8]
 80150cc:	4413      	add	r3, r2
 80150ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80150d0:	2208      	movs	r2, #8
 80150d2:	68fb      	ldr	r3, [r7, #12]
 80150d4:	1a9b      	subs	r3, r3, r2
 80150d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80150d8:	68fb      	ldr	r3, [r7, #12]
 80150da:	f023 0307 	bic.w	r3, r3, #7
 80150de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80150e0:	68fb      	ldr	r3, [r7, #12]
 80150e2:	4a15      	ldr	r2, [pc, #84]	; (8015138 <prvHeapInit+0xb4>)
 80150e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80150e6:	4b14      	ldr	r3, [pc, #80]	; (8015138 <prvHeapInit+0xb4>)
 80150e8:	681b      	ldr	r3, [r3, #0]
 80150ea:	2200      	movs	r2, #0
 80150ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80150ee:	4b12      	ldr	r3, [pc, #72]	; (8015138 <prvHeapInit+0xb4>)
 80150f0:	681b      	ldr	r3, [r3, #0]
 80150f2:	2200      	movs	r2, #0
 80150f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80150fa:	683b      	ldr	r3, [r7, #0]
 80150fc:	68fa      	ldr	r2, [r7, #12]
 80150fe:	1ad2      	subs	r2, r2, r3
 8015100:	683b      	ldr	r3, [r7, #0]
 8015102:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015104:	4b0c      	ldr	r3, [pc, #48]	; (8015138 <prvHeapInit+0xb4>)
 8015106:	681a      	ldr	r2, [r3, #0]
 8015108:	683b      	ldr	r3, [r7, #0]
 801510a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801510c:	683b      	ldr	r3, [r7, #0]
 801510e:	685b      	ldr	r3, [r3, #4]
 8015110:	4a0a      	ldr	r2, [pc, #40]	; (801513c <prvHeapInit+0xb8>)
 8015112:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015114:	683b      	ldr	r3, [r7, #0]
 8015116:	685b      	ldr	r3, [r3, #4]
 8015118:	4a09      	ldr	r2, [pc, #36]	; (8015140 <prvHeapInit+0xbc>)
 801511a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801511c:	4b09      	ldr	r3, [pc, #36]	; (8015144 <prvHeapInit+0xc0>)
 801511e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8015122:	601a      	str	r2, [r3, #0]
}
 8015124:	bf00      	nop
 8015126:	3714      	adds	r7, #20
 8015128:	46bd      	mov	sp, r7
 801512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801512e:	4770      	bx	lr
 8015130:	20001148 	.word	0x20001148
 8015134:	20004d48 	.word	0x20004d48
 8015138:	20004d50 	.word	0x20004d50
 801513c:	20004d58 	.word	0x20004d58
 8015140:	20004d54 	.word	0x20004d54
 8015144:	20004d5c 	.word	0x20004d5c

08015148 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015148:	b480      	push	{r7}
 801514a:	b085      	sub	sp, #20
 801514c:	af00      	add	r7, sp, #0
 801514e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015150:	4b28      	ldr	r3, [pc, #160]	; (80151f4 <prvInsertBlockIntoFreeList+0xac>)
 8015152:	60fb      	str	r3, [r7, #12]
 8015154:	e002      	b.n	801515c <prvInsertBlockIntoFreeList+0x14>
 8015156:	68fb      	ldr	r3, [r7, #12]
 8015158:	681b      	ldr	r3, [r3, #0]
 801515a:	60fb      	str	r3, [r7, #12]
 801515c:	68fb      	ldr	r3, [r7, #12]
 801515e:	681b      	ldr	r3, [r3, #0]
 8015160:	687a      	ldr	r2, [r7, #4]
 8015162:	429a      	cmp	r2, r3
 8015164:	d8f7      	bhi.n	8015156 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015166:	68fb      	ldr	r3, [r7, #12]
 8015168:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801516a:	68fb      	ldr	r3, [r7, #12]
 801516c:	685b      	ldr	r3, [r3, #4]
 801516e:	68ba      	ldr	r2, [r7, #8]
 8015170:	4413      	add	r3, r2
 8015172:	687a      	ldr	r2, [r7, #4]
 8015174:	429a      	cmp	r2, r3
 8015176:	d108      	bne.n	801518a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015178:	68fb      	ldr	r3, [r7, #12]
 801517a:	685a      	ldr	r2, [r3, #4]
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	685b      	ldr	r3, [r3, #4]
 8015180:	441a      	add	r2, r3
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015186:	68fb      	ldr	r3, [r7, #12]
 8015188:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	685b      	ldr	r3, [r3, #4]
 8015192:	68ba      	ldr	r2, [r7, #8]
 8015194:	441a      	add	r2, r3
 8015196:	68fb      	ldr	r3, [r7, #12]
 8015198:	681b      	ldr	r3, [r3, #0]
 801519a:	429a      	cmp	r2, r3
 801519c:	d118      	bne.n	80151d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801519e:	68fb      	ldr	r3, [r7, #12]
 80151a0:	681a      	ldr	r2, [r3, #0]
 80151a2:	4b15      	ldr	r3, [pc, #84]	; (80151f8 <prvInsertBlockIntoFreeList+0xb0>)
 80151a4:	681b      	ldr	r3, [r3, #0]
 80151a6:	429a      	cmp	r2, r3
 80151a8:	d00d      	beq.n	80151c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	685a      	ldr	r2, [r3, #4]
 80151ae:	68fb      	ldr	r3, [r7, #12]
 80151b0:	681b      	ldr	r3, [r3, #0]
 80151b2:	685b      	ldr	r3, [r3, #4]
 80151b4:	441a      	add	r2, r3
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80151ba:	68fb      	ldr	r3, [r7, #12]
 80151bc:	681b      	ldr	r3, [r3, #0]
 80151be:	681a      	ldr	r2, [r3, #0]
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	601a      	str	r2, [r3, #0]
 80151c4:	e008      	b.n	80151d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80151c6:	4b0c      	ldr	r3, [pc, #48]	; (80151f8 <prvInsertBlockIntoFreeList+0xb0>)
 80151c8:	681a      	ldr	r2, [r3, #0]
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	601a      	str	r2, [r3, #0]
 80151ce:	e003      	b.n	80151d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80151d0:	68fb      	ldr	r3, [r7, #12]
 80151d2:	681a      	ldr	r2, [r3, #0]
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80151d8:	68fa      	ldr	r2, [r7, #12]
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	429a      	cmp	r2, r3
 80151de:	d002      	beq.n	80151e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80151e0:	68fb      	ldr	r3, [r7, #12]
 80151e2:	687a      	ldr	r2, [r7, #4]
 80151e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80151e6:	bf00      	nop
 80151e8:	3714      	adds	r7, #20
 80151ea:	46bd      	mov	sp, r7
 80151ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151f0:	4770      	bx	lr
 80151f2:	bf00      	nop
 80151f4:	20004d48 	.word	0x20004d48
 80151f8:	20004d50 	.word	0x20004d50

080151fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80151fc:	b580      	push	{r7, lr}
 80151fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8015200:	2200      	movs	r2, #0
 8015202:	4912      	ldr	r1, [pc, #72]	; (801524c <MX_USB_DEVICE_Init+0x50>)
 8015204:	4812      	ldr	r0, [pc, #72]	; (8015250 <MX_USB_DEVICE_Init+0x54>)
 8015206:	f7fc f853 	bl	80112b0 <USBD_Init>
 801520a:	4603      	mov	r3, r0
 801520c:	2b00      	cmp	r3, #0
 801520e:	d001      	beq.n	8015214 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8015210:	f7ee fed8 	bl	8003fc4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8015214:	490f      	ldr	r1, [pc, #60]	; (8015254 <MX_USB_DEVICE_Init+0x58>)
 8015216:	480e      	ldr	r0, [pc, #56]	; (8015250 <MX_USB_DEVICE_Init+0x54>)
 8015218:	f7fc f880 	bl	801131c <USBD_RegisterClass>
 801521c:	4603      	mov	r3, r0
 801521e:	2b00      	cmp	r3, #0
 8015220:	d001      	beq.n	8015226 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8015222:	f7ee fecf 	bl	8003fc4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8015226:	490c      	ldr	r1, [pc, #48]	; (8015258 <MX_USB_DEVICE_Init+0x5c>)
 8015228:	4809      	ldr	r0, [pc, #36]	; (8015250 <MX_USB_DEVICE_Init+0x54>)
 801522a:	f7fb ffa5 	bl	8011178 <USBD_CDC_RegisterInterface>
 801522e:	4603      	mov	r3, r0
 8015230:	2b00      	cmp	r3, #0
 8015232:	d001      	beq.n	8015238 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8015234:	f7ee fec6 	bl	8003fc4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8015238:	4805      	ldr	r0, [pc, #20]	; (8015250 <MX_USB_DEVICE_Init+0x54>)
 801523a:	f7fc f890 	bl	801135e <USBD_Start>
 801523e:	4603      	mov	r3, r0
 8015240:	2b00      	cmp	r3, #0
 8015242:	d001      	beq.n	8015248 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8015244:	f7ee febe 	bl	8003fc4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8015248:	bf00      	nop
 801524a:	bd80      	pop	{r7, pc}
 801524c:	2000095c 	.word	0x2000095c
 8015250:	20005e94 	.word	0x20005e94
 8015254:	20000840 	.word	0x20000840
 8015258:	20000948 	.word	0x20000948

0801525c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801525c:	b580      	push	{r7, lr}
 801525e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8015260:	2200      	movs	r2, #0
 8015262:	4905      	ldr	r1, [pc, #20]	; (8015278 <CDC_Init_FS+0x1c>)
 8015264:	4805      	ldr	r0, [pc, #20]	; (801527c <CDC_Init_FS+0x20>)
 8015266:	f7fb ff9c 	bl	80111a2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801526a:	4905      	ldr	r1, [pc, #20]	; (8015280 <CDC_Init_FS+0x24>)
 801526c:	4803      	ldr	r0, [pc, #12]	; (801527c <CDC_Init_FS+0x20>)
 801526e:	f7fb ffb1 	bl	80111d4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8015272:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8015274:	4618      	mov	r0, r3
 8015276:	bd80      	pop	{r7, pc}
 8015278:	20006364 	.word	0x20006364
 801527c:	20005e94 	.word	0x20005e94
 8015280:	20006164 	.word	0x20006164

08015284 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8015284:	b480      	push	{r7}
 8015286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8015288:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801528a:	4618      	mov	r0, r3
 801528c:	46bd      	mov	sp, r7
 801528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015292:	4770      	bx	lr

08015294 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8015294:	b480      	push	{r7}
 8015296:	b083      	sub	sp, #12
 8015298:	af00      	add	r7, sp, #0
 801529a:	4603      	mov	r3, r0
 801529c:	6039      	str	r1, [r7, #0]
 801529e:	71fb      	strb	r3, [r7, #7]
 80152a0:	4613      	mov	r3, r2
 80152a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80152a4:	79fb      	ldrb	r3, [r7, #7]
 80152a6:	2b23      	cmp	r3, #35	; 0x23
 80152a8:	f200 808c 	bhi.w	80153c4 <CDC_Control_FS+0x130>
 80152ac:	a201      	add	r2, pc, #4	; (adr r2, 80152b4 <CDC_Control_FS+0x20>)
 80152ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80152b2:	bf00      	nop
 80152b4:	080153c5 	.word	0x080153c5
 80152b8:	080153c5 	.word	0x080153c5
 80152bc:	080153c5 	.word	0x080153c5
 80152c0:	080153c5 	.word	0x080153c5
 80152c4:	080153c5 	.word	0x080153c5
 80152c8:	080153c5 	.word	0x080153c5
 80152cc:	080153c5 	.word	0x080153c5
 80152d0:	080153c5 	.word	0x080153c5
 80152d4:	080153c5 	.word	0x080153c5
 80152d8:	080153c5 	.word	0x080153c5
 80152dc:	080153c5 	.word	0x080153c5
 80152e0:	080153c5 	.word	0x080153c5
 80152e4:	080153c5 	.word	0x080153c5
 80152e8:	080153c5 	.word	0x080153c5
 80152ec:	080153c5 	.word	0x080153c5
 80152f0:	080153c5 	.word	0x080153c5
 80152f4:	080153c5 	.word	0x080153c5
 80152f8:	080153c5 	.word	0x080153c5
 80152fc:	080153c5 	.word	0x080153c5
 8015300:	080153c5 	.word	0x080153c5
 8015304:	080153c5 	.word	0x080153c5
 8015308:	080153c5 	.word	0x080153c5
 801530c:	080153c5 	.word	0x080153c5
 8015310:	080153c5 	.word	0x080153c5
 8015314:	080153c5 	.word	0x080153c5
 8015318:	080153c5 	.word	0x080153c5
 801531c:	080153c5 	.word	0x080153c5
 8015320:	080153c5 	.word	0x080153c5
 8015324:	080153c5 	.word	0x080153c5
 8015328:	080153c5 	.word	0x080153c5
 801532c:	080153c5 	.word	0x080153c5
 8015330:	080153c5 	.word	0x080153c5
 8015334:	08015345 	.word	0x08015345
 8015338:	0801537f 	.word	0x0801537f
 801533c:	080153c5 	.word	0x080153c5
 8015340:	080153c5 	.word	0x080153c5
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	TempBuf_USB[0]=pbuf[0];
 8015344:	683b      	ldr	r3, [r7, #0]
 8015346:	781a      	ldrb	r2, [r3, #0]
 8015348:	4b22      	ldr	r3, [pc, #136]	; (80153d4 <CDC_Control_FS+0x140>)
 801534a:	701a      	strb	r2, [r3, #0]
    	TempBuf_USB[1]=pbuf[1];
 801534c:	683b      	ldr	r3, [r7, #0]
 801534e:	785a      	ldrb	r2, [r3, #1]
 8015350:	4b20      	ldr	r3, [pc, #128]	; (80153d4 <CDC_Control_FS+0x140>)
 8015352:	705a      	strb	r2, [r3, #1]
    	TempBuf_USB[2]=pbuf[2];
 8015354:	683b      	ldr	r3, [r7, #0]
 8015356:	789a      	ldrb	r2, [r3, #2]
 8015358:	4b1e      	ldr	r3, [pc, #120]	; (80153d4 <CDC_Control_FS+0x140>)
 801535a:	709a      	strb	r2, [r3, #2]
    	TempBuf_USB[3]=pbuf[3];
 801535c:	683b      	ldr	r3, [r7, #0]
 801535e:	78da      	ldrb	r2, [r3, #3]
 8015360:	4b1c      	ldr	r3, [pc, #112]	; (80153d4 <CDC_Control_FS+0x140>)
 8015362:	70da      	strb	r2, [r3, #3]
    	TempBuf_USB[4]=pbuf[4];
 8015364:	683b      	ldr	r3, [r7, #0]
 8015366:	791a      	ldrb	r2, [r3, #4]
 8015368:	4b1a      	ldr	r3, [pc, #104]	; (80153d4 <CDC_Control_FS+0x140>)
 801536a:	711a      	strb	r2, [r3, #4]
    	TempBuf_USB[5]=pbuf[5];
 801536c:	683b      	ldr	r3, [r7, #0]
 801536e:	795a      	ldrb	r2, [r3, #5]
 8015370:	4b18      	ldr	r3, [pc, #96]	; (80153d4 <CDC_Control_FS+0x140>)
 8015372:	715a      	strb	r2, [r3, #5]
    	TempBuf_USB[6]=pbuf[6];
 8015374:	683b      	ldr	r3, [r7, #0]
 8015376:	799a      	ldrb	r2, [r3, #6]
 8015378:	4b16      	ldr	r3, [pc, #88]	; (80153d4 <CDC_Control_FS+0x140>)
 801537a:	719a      	strb	r2, [r3, #6]
    	break;
 801537c:	e023      	b.n	80153c6 <CDC_Control_FS+0x132>


    case CDC_GET_LINE_CODING:
        pbuf[0]=TempBuf_USB[0];
 801537e:	4b15      	ldr	r3, [pc, #84]	; (80153d4 <CDC_Control_FS+0x140>)
 8015380:	781a      	ldrb	r2, [r3, #0]
 8015382:	683b      	ldr	r3, [r7, #0]
 8015384:	701a      	strb	r2, [r3, #0]
        pbuf[1]=TempBuf_USB[1];
 8015386:	683b      	ldr	r3, [r7, #0]
 8015388:	3301      	adds	r3, #1
 801538a:	4a12      	ldr	r2, [pc, #72]	; (80153d4 <CDC_Control_FS+0x140>)
 801538c:	7852      	ldrb	r2, [r2, #1]
 801538e:	701a      	strb	r2, [r3, #0]
        pbuf[2]=TempBuf_USB[2];
 8015390:	683b      	ldr	r3, [r7, #0]
 8015392:	3302      	adds	r3, #2
 8015394:	4a0f      	ldr	r2, [pc, #60]	; (80153d4 <CDC_Control_FS+0x140>)
 8015396:	7892      	ldrb	r2, [r2, #2]
 8015398:	701a      	strb	r2, [r3, #0]
        pbuf[3]=TempBuf_USB[3];
 801539a:	683b      	ldr	r3, [r7, #0]
 801539c:	3303      	adds	r3, #3
 801539e:	4a0d      	ldr	r2, [pc, #52]	; (80153d4 <CDC_Control_FS+0x140>)
 80153a0:	78d2      	ldrb	r2, [r2, #3]
 80153a2:	701a      	strb	r2, [r3, #0]
        pbuf[4]=TempBuf_USB[4];
 80153a4:	683b      	ldr	r3, [r7, #0]
 80153a6:	3304      	adds	r3, #4
 80153a8:	4a0a      	ldr	r2, [pc, #40]	; (80153d4 <CDC_Control_FS+0x140>)
 80153aa:	7912      	ldrb	r2, [r2, #4]
 80153ac:	701a      	strb	r2, [r3, #0]
        pbuf[5]=TempBuf_USB[5];
 80153ae:	683b      	ldr	r3, [r7, #0]
 80153b0:	3305      	adds	r3, #5
 80153b2:	4a08      	ldr	r2, [pc, #32]	; (80153d4 <CDC_Control_FS+0x140>)
 80153b4:	7952      	ldrb	r2, [r2, #5]
 80153b6:	701a      	strb	r2, [r3, #0]
        pbuf[6]=TempBuf_USB[6];
 80153b8:	683b      	ldr	r3, [r7, #0]
 80153ba:	3306      	adds	r3, #6
 80153bc:	4a05      	ldr	r2, [pc, #20]	; (80153d4 <CDC_Control_FS+0x140>)
 80153be:	7992      	ldrb	r2, [r2, #6]
 80153c0:	701a      	strb	r2, [r3, #0]
    break;
 80153c2:	e000      	b.n	80153c6 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80153c4:	bf00      	nop
  }

  return (USBD_OK);
 80153c6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80153c8:	4618      	mov	r0, r3
 80153ca:	370c      	adds	r7, #12
 80153cc:	46bd      	mov	sp, r7
 80153ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153d2:	4770      	bx	lr
 80153d4:	20006564 	.word	0x20006564

080153d8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80153d8:	b580      	push	{r7, lr}
 80153da:	b082      	sub	sp, #8
 80153dc:	af00      	add	r7, sp, #0
 80153de:	6078      	str	r0, [r7, #4]
 80153e0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	ringBuff_PushArray(&usb_rx_ringbuff, Buf, (uint16_t)*Len);
 80153e2:	683b      	ldr	r3, [r7, #0]
 80153e4:	681b      	ldr	r3, [r3, #0]
 80153e6:	b29b      	uxth	r3, r3
 80153e8:	461a      	mov	r2, r3
 80153ea:	6879      	ldr	r1, [r7, #4]
 80153ec:	4807      	ldr	r0, [pc, #28]	; (801540c <CDC_Receive_FS+0x34>)
 80153ee:	f7ee fe60 	bl	80040b2 <ringBuff_PushArray>
//	if ( END_CHAR == Buf[*Len - 1]) {
//		osSignalSet(USB_RX_Check_Handle, 0x01);
//	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80153f2:	6879      	ldr	r1, [r7, #4]
 80153f4:	4806      	ldr	r0, [pc, #24]	; (8015410 <CDC_Receive_FS+0x38>)
 80153f6:	f7fb feed 	bl	80111d4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80153fa:	4805      	ldr	r0, [pc, #20]	; (8015410 <CDC_Receive_FS+0x38>)
 80153fc:	f7fb ff2e 	bl	801125c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8015400:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8015402:	4618      	mov	r0, r3
 8015404:	3708      	adds	r7, #8
 8015406:	46bd      	mov	sp, r7
 8015408:	bd80      	pop	{r7, pc}
 801540a:	bf00      	nop
 801540c:	20000004 	.word	0x20000004
 8015410:	20005e94 	.word	0x20005e94

08015414 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8015414:	b580      	push	{r7, lr}
 8015416:	b084      	sub	sp, #16
 8015418:	af00      	add	r7, sp, #0
 801541a:	6078      	str	r0, [r7, #4]
 801541c:	460b      	mov	r3, r1
 801541e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8015420:	2300      	movs	r3, #0
 8015422:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8015424:	4b0d      	ldr	r3, [pc, #52]	; (801545c <CDC_Transmit_FS+0x48>)
 8015426:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801542a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801542c:	68bb      	ldr	r3, [r7, #8]
 801542e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015432:	2b00      	cmp	r3, #0
 8015434:	d001      	beq.n	801543a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8015436:	2301      	movs	r3, #1
 8015438:	e00b      	b.n	8015452 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801543a:	887b      	ldrh	r3, [r7, #2]
 801543c:	461a      	mov	r2, r3
 801543e:	6879      	ldr	r1, [r7, #4]
 8015440:	4806      	ldr	r0, [pc, #24]	; (801545c <CDC_Transmit_FS+0x48>)
 8015442:	f7fb feae 	bl	80111a2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8015446:	4805      	ldr	r0, [pc, #20]	; (801545c <CDC_Transmit_FS+0x48>)
 8015448:	f7fb fed8 	bl	80111fc <USBD_CDC_TransmitPacket>
 801544c:	4603      	mov	r3, r0
 801544e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8015450:	7bfb      	ldrb	r3, [r7, #15]
}
 8015452:	4618      	mov	r0, r3
 8015454:	3710      	adds	r7, #16
 8015456:	46bd      	mov	sp, r7
 8015458:	bd80      	pop	{r7, pc}
 801545a:	bf00      	nop
 801545c:	20005e94 	.word	0x20005e94

08015460 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8015460:	b480      	push	{r7}
 8015462:	b087      	sub	sp, #28
 8015464:	af00      	add	r7, sp, #0
 8015466:	60f8      	str	r0, [r7, #12]
 8015468:	60b9      	str	r1, [r7, #8]
 801546a:	4613      	mov	r3, r2
 801546c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801546e:	2300      	movs	r3, #0
 8015470:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8015472:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015476:	4618      	mov	r0, r3
 8015478:	371c      	adds	r7, #28
 801547a:	46bd      	mov	sp, r7
 801547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015480:	4770      	bx	lr
	...

08015484 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015484:	b480      	push	{r7}
 8015486:	b083      	sub	sp, #12
 8015488:	af00      	add	r7, sp, #0
 801548a:	4603      	mov	r3, r0
 801548c:	6039      	str	r1, [r7, #0]
 801548e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8015490:	683b      	ldr	r3, [r7, #0]
 8015492:	2212      	movs	r2, #18
 8015494:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8015496:	4b03      	ldr	r3, [pc, #12]	; (80154a4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8015498:	4618      	mov	r0, r3
 801549a:	370c      	adds	r7, #12
 801549c:	46bd      	mov	sp, r7
 801549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154a2:	4770      	bx	lr
 80154a4:	20000978 	.word	0x20000978

080154a8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80154a8:	b480      	push	{r7}
 80154aa:	b083      	sub	sp, #12
 80154ac:	af00      	add	r7, sp, #0
 80154ae:	4603      	mov	r3, r0
 80154b0:	6039      	str	r1, [r7, #0]
 80154b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80154b4:	683b      	ldr	r3, [r7, #0]
 80154b6:	2204      	movs	r2, #4
 80154b8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80154ba:	4b03      	ldr	r3, [pc, #12]	; (80154c8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80154bc:	4618      	mov	r0, r3
 80154be:	370c      	adds	r7, #12
 80154c0:	46bd      	mov	sp, r7
 80154c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154c6:	4770      	bx	lr
 80154c8:	2000098c 	.word	0x2000098c

080154cc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80154cc:	b580      	push	{r7, lr}
 80154ce:	b082      	sub	sp, #8
 80154d0:	af00      	add	r7, sp, #0
 80154d2:	4603      	mov	r3, r0
 80154d4:	6039      	str	r1, [r7, #0]
 80154d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80154d8:	79fb      	ldrb	r3, [r7, #7]
 80154da:	2b00      	cmp	r3, #0
 80154dc:	d105      	bne.n	80154ea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80154de:	683a      	ldr	r2, [r7, #0]
 80154e0:	4907      	ldr	r1, [pc, #28]	; (8015500 <USBD_FS_ProductStrDescriptor+0x34>)
 80154e2:	4808      	ldr	r0, [pc, #32]	; (8015504 <USBD_FS_ProductStrDescriptor+0x38>)
 80154e4:	f7fc ff18 	bl	8012318 <USBD_GetString>
 80154e8:	e004      	b.n	80154f4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80154ea:	683a      	ldr	r2, [r7, #0]
 80154ec:	4904      	ldr	r1, [pc, #16]	; (8015500 <USBD_FS_ProductStrDescriptor+0x34>)
 80154ee:	4805      	ldr	r0, [pc, #20]	; (8015504 <USBD_FS_ProductStrDescriptor+0x38>)
 80154f0:	f7fc ff12 	bl	8012318 <USBD_GetString>
  }
  return USBD_StrDesc;
 80154f4:	4b02      	ldr	r3, [pc, #8]	; (8015500 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80154f6:	4618      	mov	r0, r3
 80154f8:	3708      	adds	r7, #8
 80154fa:	46bd      	mov	sp, r7
 80154fc:	bd80      	pop	{r7, pc}
 80154fe:	bf00      	nop
 8015500:	2000656c 	.word	0x2000656c
 8015504:	0801c234 	.word	0x0801c234

08015508 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015508:	b580      	push	{r7, lr}
 801550a:	b082      	sub	sp, #8
 801550c:	af00      	add	r7, sp, #0
 801550e:	4603      	mov	r3, r0
 8015510:	6039      	str	r1, [r7, #0]
 8015512:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015514:	683a      	ldr	r2, [r7, #0]
 8015516:	4904      	ldr	r1, [pc, #16]	; (8015528 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8015518:	4804      	ldr	r0, [pc, #16]	; (801552c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801551a:	f7fc fefd 	bl	8012318 <USBD_GetString>
  return USBD_StrDesc;
 801551e:	4b02      	ldr	r3, [pc, #8]	; (8015528 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8015520:	4618      	mov	r0, r3
 8015522:	3708      	adds	r7, #8
 8015524:	46bd      	mov	sp, r7
 8015526:	bd80      	pop	{r7, pc}
 8015528:	2000656c 	.word	0x2000656c
 801552c:	0801c24c 	.word	0x0801c24c

08015530 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015530:	b580      	push	{r7, lr}
 8015532:	b082      	sub	sp, #8
 8015534:	af00      	add	r7, sp, #0
 8015536:	4603      	mov	r3, r0
 8015538:	6039      	str	r1, [r7, #0]
 801553a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801553c:	683b      	ldr	r3, [r7, #0]
 801553e:	221a      	movs	r2, #26
 8015540:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8015542:	f000 f843 	bl	80155cc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8015546:	4b02      	ldr	r3, [pc, #8]	; (8015550 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8015548:	4618      	mov	r0, r3
 801554a:	3708      	adds	r7, #8
 801554c:	46bd      	mov	sp, r7
 801554e:	bd80      	pop	{r7, pc}
 8015550:	20000990 	.word	0x20000990

08015554 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015554:	b580      	push	{r7, lr}
 8015556:	b082      	sub	sp, #8
 8015558:	af00      	add	r7, sp, #0
 801555a:	4603      	mov	r3, r0
 801555c:	6039      	str	r1, [r7, #0]
 801555e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015560:	79fb      	ldrb	r3, [r7, #7]
 8015562:	2b00      	cmp	r3, #0
 8015564:	d105      	bne.n	8015572 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015566:	683a      	ldr	r2, [r7, #0]
 8015568:	4907      	ldr	r1, [pc, #28]	; (8015588 <USBD_FS_ConfigStrDescriptor+0x34>)
 801556a:	4808      	ldr	r0, [pc, #32]	; (801558c <USBD_FS_ConfigStrDescriptor+0x38>)
 801556c:	f7fc fed4 	bl	8012318 <USBD_GetString>
 8015570:	e004      	b.n	801557c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015572:	683a      	ldr	r2, [r7, #0]
 8015574:	4904      	ldr	r1, [pc, #16]	; (8015588 <USBD_FS_ConfigStrDescriptor+0x34>)
 8015576:	4805      	ldr	r0, [pc, #20]	; (801558c <USBD_FS_ConfigStrDescriptor+0x38>)
 8015578:	f7fc fece 	bl	8012318 <USBD_GetString>
  }
  return USBD_StrDesc;
 801557c:	4b02      	ldr	r3, [pc, #8]	; (8015588 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801557e:	4618      	mov	r0, r3
 8015580:	3708      	adds	r7, #8
 8015582:	46bd      	mov	sp, r7
 8015584:	bd80      	pop	{r7, pc}
 8015586:	bf00      	nop
 8015588:	2000656c 	.word	0x2000656c
 801558c:	0801c260 	.word	0x0801c260

08015590 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015590:	b580      	push	{r7, lr}
 8015592:	b082      	sub	sp, #8
 8015594:	af00      	add	r7, sp, #0
 8015596:	4603      	mov	r3, r0
 8015598:	6039      	str	r1, [r7, #0]
 801559a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801559c:	79fb      	ldrb	r3, [r7, #7]
 801559e:	2b00      	cmp	r3, #0
 80155a0:	d105      	bne.n	80155ae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80155a2:	683a      	ldr	r2, [r7, #0]
 80155a4:	4907      	ldr	r1, [pc, #28]	; (80155c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80155a6:	4808      	ldr	r0, [pc, #32]	; (80155c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80155a8:	f7fc feb6 	bl	8012318 <USBD_GetString>
 80155ac:	e004      	b.n	80155b8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80155ae:	683a      	ldr	r2, [r7, #0]
 80155b0:	4904      	ldr	r1, [pc, #16]	; (80155c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80155b2:	4805      	ldr	r0, [pc, #20]	; (80155c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80155b4:	f7fc feb0 	bl	8012318 <USBD_GetString>
  }
  return USBD_StrDesc;
 80155b8:	4b02      	ldr	r3, [pc, #8]	; (80155c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80155ba:	4618      	mov	r0, r3
 80155bc:	3708      	adds	r7, #8
 80155be:	46bd      	mov	sp, r7
 80155c0:	bd80      	pop	{r7, pc}
 80155c2:	bf00      	nop
 80155c4:	2000656c 	.word	0x2000656c
 80155c8:	0801c26c 	.word	0x0801c26c

080155cc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80155cc:	b580      	push	{r7, lr}
 80155ce:	b084      	sub	sp, #16
 80155d0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80155d2:	4b0f      	ldr	r3, [pc, #60]	; (8015610 <Get_SerialNum+0x44>)
 80155d4:	681b      	ldr	r3, [r3, #0]
 80155d6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80155d8:	4b0e      	ldr	r3, [pc, #56]	; (8015614 <Get_SerialNum+0x48>)
 80155da:	681b      	ldr	r3, [r3, #0]
 80155dc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80155de:	4b0e      	ldr	r3, [pc, #56]	; (8015618 <Get_SerialNum+0x4c>)
 80155e0:	681b      	ldr	r3, [r3, #0]
 80155e2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80155e4:	68fa      	ldr	r2, [r7, #12]
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	4413      	add	r3, r2
 80155ea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80155ec:	68fb      	ldr	r3, [r7, #12]
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	d009      	beq.n	8015606 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80155f2:	2208      	movs	r2, #8
 80155f4:	4909      	ldr	r1, [pc, #36]	; (801561c <Get_SerialNum+0x50>)
 80155f6:	68f8      	ldr	r0, [r7, #12]
 80155f8:	f000 f814 	bl	8015624 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80155fc:	2204      	movs	r2, #4
 80155fe:	4908      	ldr	r1, [pc, #32]	; (8015620 <Get_SerialNum+0x54>)
 8015600:	68b8      	ldr	r0, [r7, #8]
 8015602:	f000 f80f 	bl	8015624 <IntToUnicode>
  }
}
 8015606:	bf00      	nop
 8015608:	3710      	adds	r7, #16
 801560a:	46bd      	mov	sp, r7
 801560c:	bd80      	pop	{r7, pc}
 801560e:	bf00      	nop
 8015610:	1fff7a10 	.word	0x1fff7a10
 8015614:	1fff7a14 	.word	0x1fff7a14
 8015618:	1fff7a18 	.word	0x1fff7a18
 801561c:	20000992 	.word	0x20000992
 8015620:	200009a2 	.word	0x200009a2

08015624 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015624:	b480      	push	{r7}
 8015626:	b087      	sub	sp, #28
 8015628:	af00      	add	r7, sp, #0
 801562a:	60f8      	str	r0, [r7, #12]
 801562c:	60b9      	str	r1, [r7, #8]
 801562e:	4613      	mov	r3, r2
 8015630:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8015632:	2300      	movs	r3, #0
 8015634:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8015636:	2300      	movs	r3, #0
 8015638:	75fb      	strb	r3, [r7, #23]
 801563a:	e027      	b.n	801568c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801563c:	68fb      	ldr	r3, [r7, #12]
 801563e:	0f1b      	lsrs	r3, r3, #28
 8015640:	2b09      	cmp	r3, #9
 8015642:	d80b      	bhi.n	801565c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015644:	68fb      	ldr	r3, [r7, #12]
 8015646:	0f1b      	lsrs	r3, r3, #28
 8015648:	b2da      	uxtb	r2, r3
 801564a:	7dfb      	ldrb	r3, [r7, #23]
 801564c:	005b      	lsls	r3, r3, #1
 801564e:	4619      	mov	r1, r3
 8015650:	68bb      	ldr	r3, [r7, #8]
 8015652:	440b      	add	r3, r1
 8015654:	3230      	adds	r2, #48	; 0x30
 8015656:	b2d2      	uxtb	r2, r2
 8015658:	701a      	strb	r2, [r3, #0]
 801565a:	e00a      	b.n	8015672 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801565c:	68fb      	ldr	r3, [r7, #12]
 801565e:	0f1b      	lsrs	r3, r3, #28
 8015660:	b2da      	uxtb	r2, r3
 8015662:	7dfb      	ldrb	r3, [r7, #23]
 8015664:	005b      	lsls	r3, r3, #1
 8015666:	4619      	mov	r1, r3
 8015668:	68bb      	ldr	r3, [r7, #8]
 801566a:	440b      	add	r3, r1
 801566c:	3237      	adds	r2, #55	; 0x37
 801566e:	b2d2      	uxtb	r2, r2
 8015670:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8015672:	68fb      	ldr	r3, [r7, #12]
 8015674:	011b      	lsls	r3, r3, #4
 8015676:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8015678:	7dfb      	ldrb	r3, [r7, #23]
 801567a:	005b      	lsls	r3, r3, #1
 801567c:	3301      	adds	r3, #1
 801567e:	68ba      	ldr	r2, [r7, #8]
 8015680:	4413      	add	r3, r2
 8015682:	2200      	movs	r2, #0
 8015684:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8015686:	7dfb      	ldrb	r3, [r7, #23]
 8015688:	3301      	adds	r3, #1
 801568a:	75fb      	strb	r3, [r7, #23]
 801568c:	7dfa      	ldrb	r2, [r7, #23]
 801568e:	79fb      	ldrb	r3, [r7, #7]
 8015690:	429a      	cmp	r2, r3
 8015692:	d3d3      	bcc.n	801563c <IntToUnicode+0x18>
  }
}
 8015694:	bf00      	nop
 8015696:	bf00      	nop
 8015698:	371c      	adds	r7, #28
 801569a:	46bd      	mov	sp, r7
 801569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156a0:	4770      	bx	lr
	...

080156a4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80156a4:	b580      	push	{r7, lr}
 80156a6:	b08a      	sub	sp, #40	; 0x28
 80156a8:	af00      	add	r7, sp, #0
 80156aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80156ac:	f107 0314 	add.w	r3, r7, #20
 80156b0:	2200      	movs	r2, #0
 80156b2:	601a      	str	r2, [r3, #0]
 80156b4:	605a      	str	r2, [r3, #4]
 80156b6:	609a      	str	r2, [r3, #8]
 80156b8:	60da      	str	r2, [r3, #12]
 80156ba:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	681b      	ldr	r3, [r3, #0]
 80156c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80156c4:	d13a      	bne.n	801573c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80156c6:	2300      	movs	r3, #0
 80156c8:	613b      	str	r3, [r7, #16]
 80156ca:	4b1e      	ldr	r3, [pc, #120]	; (8015744 <HAL_PCD_MspInit+0xa0>)
 80156cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80156ce:	4a1d      	ldr	r2, [pc, #116]	; (8015744 <HAL_PCD_MspInit+0xa0>)
 80156d0:	f043 0301 	orr.w	r3, r3, #1
 80156d4:	6313      	str	r3, [r2, #48]	; 0x30
 80156d6:	4b1b      	ldr	r3, [pc, #108]	; (8015744 <HAL_PCD_MspInit+0xa0>)
 80156d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80156da:	f003 0301 	and.w	r3, r3, #1
 80156de:	613b      	str	r3, [r7, #16]
 80156e0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80156e2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80156e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80156e8:	2302      	movs	r3, #2
 80156ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80156ec:	2300      	movs	r3, #0
 80156ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80156f0:	2303      	movs	r3, #3
 80156f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80156f4:	230a      	movs	r3, #10
 80156f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80156f8:	f107 0314 	add.w	r3, r7, #20
 80156fc:	4619      	mov	r1, r3
 80156fe:	4812      	ldr	r0, [pc, #72]	; (8015748 <HAL_PCD_MspInit+0xa4>)
 8015700:	f7f6 fb72 	bl	800bde8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8015704:	4b0f      	ldr	r3, [pc, #60]	; (8015744 <HAL_PCD_MspInit+0xa0>)
 8015706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015708:	4a0e      	ldr	r2, [pc, #56]	; (8015744 <HAL_PCD_MspInit+0xa0>)
 801570a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801570e:	6353      	str	r3, [r2, #52]	; 0x34
 8015710:	2300      	movs	r3, #0
 8015712:	60fb      	str	r3, [r7, #12]
 8015714:	4b0b      	ldr	r3, [pc, #44]	; (8015744 <HAL_PCD_MspInit+0xa0>)
 8015716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015718:	4a0a      	ldr	r2, [pc, #40]	; (8015744 <HAL_PCD_MspInit+0xa0>)
 801571a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801571e:	6453      	str	r3, [r2, #68]	; 0x44
 8015720:	4b08      	ldr	r3, [pc, #32]	; (8015744 <HAL_PCD_MspInit+0xa0>)
 8015722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015724:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015728:	60fb      	str	r3, [r7, #12]
 801572a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801572c:	2200      	movs	r2, #0
 801572e:	2105      	movs	r1, #5
 8015730:	2043      	movs	r0, #67	; 0x43
 8015732:	f7f5 ff8f 	bl	800b654 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8015736:	2043      	movs	r0, #67	; 0x43
 8015738:	f7f5 ffa8 	bl	800b68c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801573c:	bf00      	nop
 801573e:	3728      	adds	r7, #40	; 0x28
 8015740:	46bd      	mov	sp, r7
 8015742:	bd80      	pop	{r7, pc}
 8015744:	40023800 	.word	0x40023800
 8015748:	40020000 	.word	0x40020000

0801574c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801574c:	b580      	push	{r7, lr}
 801574e:	b082      	sub	sp, #8
 8015750:	af00      	add	r7, sp, #0
 8015752:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8015760:	4619      	mov	r1, r3
 8015762:	4610      	mov	r0, r2
 8015764:	f7fb fe46 	bl	80113f4 <USBD_LL_SetupStage>
}
 8015768:	bf00      	nop
 801576a:	3708      	adds	r7, #8
 801576c:	46bd      	mov	sp, r7
 801576e:	bd80      	pop	{r7, pc}

08015770 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015770:	b580      	push	{r7, lr}
 8015772:	b082      	sub	sp, #8
 8015774:	af00      	add	r7, sp, #0
 8015776:	6078      	str	r0, [r7, #4]
 8015778:	460b      	mov	r3, r1
 801577a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8015782:	78fa      	ldrb	r2, [r7, #3]
 8015784:	6879      	ldr	r1, [r7, #4]
 8015786:	4613      	mov	r3, r2
 8015788:	00db      	lsls	r3, r3, #3
 801578a:	1a9b      	subs	r3, r3, r2
 801578c:	009b      	lsls	r3, r3, #2
 801578e:	440b      	add	r3, r1
 8015790:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8015794:	681a      	ldr	r2, [r3, #0]
 8015796:	78fb      	ldrb	r3, [r7, #3]
 8015798:	4619      	mov	r1, r3
 801579a:	f7fb fe80 	bl	801149e <USBD_LL_DataOutStage>
}
 801579e:	bf00      	nop
 80157a0:	3708      	adds	r7, #8
 80157a2:	46bd      	mov	sp, r7
 80157a4:	bd80      	pop	{r7, pc}

080157a6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80157a6:	b580      	push	{r7, lr}
 80157a8:	b082      	sub	sp, #8
 80157aa:	af00      	add	r7, sp, #0
 80157ac:	6078      	str	r0, [r7, #4]
 80157ae:	460b      	mov	r3, r1
 80157b0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80157b8:	78fa      	ldrb	r2, [r7, #3]
 80157ba:	6879      	ldr	r1, [r7, #4]
 80157bc:	4613      	mov	r3, r2
 80157be:	00db      	lsls	r3, r3, #3
 80157c0:	1a9b      	subs	r3, r3, r2
 80157c2:	009b      	lsls	r3, r3, #2
 80157c4:	440b      	add	r3, r1
 80157c6:	3348      	adds	r3, #72	; 0x48
 80157c8:	681a      	ldr	r2, [r3, #0]
 80157ca:	78fb      	ldrb	r3, [r7, #3]
 80157cc:	4619      	mov	r1, r3
 80157ce:	f7fb fec9 	bl	8011564 <USBD_LL_DataInStage>
}
 80157d2:	bf00      	nop
 80157d4:	3708      	adds	r7, #8
 80157d6:	46bd      	mov	sp, r7
 80157d8:	bd80      	pop	{r7, pc}

080157da <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80157da:	b580      	push	{r7, lr}
 80157dc:	b082      	sub	sp, #8
 80157de:	af00      	add	r7, sp, #0
 80157e0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80157e8:	4618      	mov	r0, r3
 80157ea:	f7fb ffcd 	bl	8011788 <USBD_LL_SOF>
}
 80157ee:	bf00      	nop
 80157f0:	3708      	adds	r7, #8
 80157f2:	46bd      	mov	sp, r7
 80157f4:	bd80      	pop	{r7, pc}

080157f6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80157f6:	b580      	push	{r7, lr}
 80157f8:	b084      	sub	sp, #16
 80157fa:	af00      	add	r7, sp, #0
 80157fc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80157fe:	2301      	movs	r3, #1
 8015800:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8015802:	687b      	ldr	r3, [r7, #4]
 8015804:	68db      	ldr	r3, [r3, #12]
 8015806:	2b00      	cmp	r3, #0
 8015808:	d102      	bne.n	8015810 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801580a:	2300      	movs	r3, #0
 801580c:	73fb      	strb	r3, [r7, #15]
 801580e:	e008      	b.n	8015822 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	68db      	ldr	r3, [r3, #12]
 8015814:	2b02      	cmp	r3, #2
 8015816:	d102      	bne.n	801581e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8015818:	2301      	movs	r3, #1
 801581a:	73fb      	strb	r3, [r7, #15]
 801581c:	e001      	b.n	8015822 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801581e:	f7ee fbd1 	bl	8003fc4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015828:	7bfa      	ldrb	r2, [r7, #15]
 801582a:	4611      	mov	r1, r2
 801582c:	4618      	mov	r0, r3
 801582e:	f7fb ff70 	bl	8011712 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015838:	4618      	mov	r0, r3
 801583a:	f7fb ff29 	bl	8011690 <USBD_LL_Reset>
}
 801583e:	bf00      	nop
 8015840:	3710      	adds	r7, #16
 8015842:	46bd      	mov	sp, r7
 8015844:	bd80      	pop	{r7, pc}
	...

08015848 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015848:	b580      	push	{r7, lr}
 801584a:	b082      	sub	sp, #8
 801584c:	af00      	add	r7, sp, #0
 801584e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015856:	4618      	mov	r0, r3
 8015858:	f7fb ff6b 	bl	8011732 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	681b      	ldr	r3, [r3, #0]
 8015860:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015864:	681b      	ldr	r3, [r3, #0]
 8015866:	687a      	ldr	r2, [r7, #4]
 8015868:	6812      	ldr	r2, [r2, #0]
 801586a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801586e:	f043 0301 	orr.w	r3, r3, #1
 8015872:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	6a1b      	ldr	r3, [r3, #32]
 8015878:	2b00      	cmp	r3, #0
 801587a:	d005      	beq.n	8015888 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801587c:	4b04      	ldr	r3, [pc, #16]	; (8015890 <HAL_PCD_SuspendCallback+0x48>)
 801587e:	691b      	ldr	r3, [r3, #16]
 8015880:	4a03      	ldr	r2, [pc, #12]	; (8015890 <HAL_PCD_SuspendCallback+0x48>)
 8015882:	f043 0306 	orr.w	r3, r3, #6
 8015886:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8015888:	bf00      	nop
 801588a:	3708      	adds	r7, #8
 801588c:	46bd      	mov	sp, r7
 801588e:	bd80      	pop	{r7, pc}
 8015890:	e000ed00 	.word	0xe000ed00

08015894 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015894:	b580      	push	{r7, lr}
 8015896:	b082      	sub	sp, #8
 8015898:	af00      	add	r7, sp, #0
 801589a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80158a2:	4618      	mov	r0, r3
 80158a4:	f7fb ff5a 	bl	801175c <USBD_LL_Resume>
}
 80158a8:	bf00      	nop
 80158aa:	3708      	adds	r7, #8
 80158ac:	46bd      	mov	sp, r7
 80158ae:	bd80      	pop	{r7, pc}

080158b0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80158b0:	b580      	push	{r7, lr}
 80158b2:	b082      	sub	sp, #8
 80158b4:	af00      	add	r7, sp, #0
 80158b6:	6078      	str	r0, [r7, #4]
 80158b8:	460b      	mov	r3, r1
 80158ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80158c2:	78fa      	ldrb	r2, [r7, #3]
 80158c4:	4611      	mov	r1, r2
 80158c6:	4618      	mov	r0, r3
 80158c8:	f7fb ff85 	bl	80117d6 <USBD_LL_IsoOUTIncomplete>
}
 80158cc:	bf00      	nop
 80158ce:	3708      	adds	r7, #8
 80158d0:	46bd      	mov	sp, r7
 80158d2:	bd80      	pop	{r7, pc}

080158d4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80158d4:	b580      	push	{r7, lr}
 80158d6:	b082      	sub	sp, #8
 80158d8:	af00      	add	r7, sp, #0
 80158da:	6078      	str	r0, [r7, #4]
 80158dc:	460b      	mov	r3, r1
 80158de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80158e6:	78fa      	ldrb	r2, [r7, #3]
 80158e8:	4611      	mov	r1, r2
 80158ea:	4618      	mov	r0, r3
 80158ec:	f7fb ff66 	bl	80117bc <USBD_LL_IsoINIncomplete>
}
 80158f0:	bf00      	nop
 80158f2:	3708      	adds	r7, #8
 80158f4:	46bd      	mov	sp, r7
 80158f6:	bd80      	pop	{r7, pc}

080158f8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80158f8:	b580      	push	{r7, lr}
 80158fa:	b082      	sub	sp, #8
 80158fc:	af00      	add	r7, sp, #0
 80158fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015906:	4618      	mov	r0, r3
 8015908:	f7fb ff72 	bl	80117f0 <USBD_LL_DevConnected>
}
 801590c:	bf00      	nop
 801590e:	3708      	adds	r7, #8
 8015910:	46bd      	mov	sp, r7
 8015912:	bd80      	pop	{r7, pc}

08015914 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015914:	b580      	push	{r7, lr}
 8015916:	b082      	sub	sp, #8
 8015918:	af00      	add	r7, sp, #0
 801591a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015922:	4618      	mov	r0, r3
 8015924:	f7fb ff6f 	bl	8011806 <USBD_LL_DevDisconnected>
}
 8015928:	bf00      	nop
 801592a:	3708      	adds	r7, #8
 801592c:	46bd      	mov	sp, r7
 801592e:	bd80      	pop	{r7, pc}

08015930 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015930:	b580      	push	{r7, lr}
 8015932:	b082      	sub	sp, #8
 8015934:	af00      	add	r7, sp, #0
 8015936:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	781b      	ldrb	r3, [r3, #0]
 801593c:	2b00      	cmp	r3, #0
 801593e:	d13c      	bne.n	80159ba <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8015940:	4a20      	ldr	r2, [pc, #128]	; (80159c4 <USBD_LL_Init+0x94>)
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	4a1e      	ldr	r2, [pc, #120]	; (80159c4 <USBD_LL_Init+0x94>)
 801594c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8015950:	4b1c      	ldr	r3, [pc, #112]	; (80159c4 <USBD_LL_Init+0x94>)
 8015952:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8015956:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8015958:	4b1a      	ldr	r3, [pc, #104]	; (80159c4 <USBD_LL_Init+0x94>)
 801595a:	2204      	movs	r2, #4
 801595c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801595e:	4b19      	ldr	r3, [pc, #100]	; (80159c4 <USBD_LL_Init+0x94>)
 8015960:	2202      	movs	r2, #2
 8015962:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8015964:	4b17      	ldr	r3, [pc, #92]	; (80159c4 <USBD_LL_Init+0x94>)
 8015966:	2200      	movs	r2, #0
 8015968:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801596a:	4b16      	ldr	r3, [pc, #88]	; (80159c4 <USBD_LL_Init+0x94>)
 801596c:	2202      	movs	r2, #2
 801596e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8015970:	4b14      	ldr	r3, [pc, #80]	; (80159c4 <USBD_LL_Init+0x94>)
 8015972:	2200      	movs	r2, #0
 8015974:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8015976:	4b13      	ldr	r3, [pc, #76]	; (80159c4 <USBD_LL_Init+0x94>)
 8015978:	2200      	movs	r2, #0
 801597a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801597c:	4b11      	ldr	r3, [pc, #68]	; (80159c4 <USBD_LL_Init+0x94>)
 801597e:	2200      	movs	r2, #0
 8015980:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8015982:	4b10      	ldr	r3, [pc, #64]	; (80159c4 <USBD_LL_Init+0x94>)
 8015984:	2200      	movs	r2, #0
 8015986:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8015988:	4b0e      	ldr	r3, [pc, #56]	; (80159c4 <USBD_LL_Init+0x94>)
 801598a:	2200      	movs	r2, #0
 801598c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801598e:	480d      	ldr	r0, [pc, #52]	; (80159c4 <USBD_LL_Init+0x94>)
 8015990:	f7f6 fc36 	bl	800c200 <HAL_PCD_Init>
 8015994:	4603      	mov	r3, r0
 8015996:	2b00      	cmp	r3, #0
 8015998:	d001      	beq.n	801599e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801599a:	f7ee fb13 	bl	8003fc4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801599e:	2180      	movs	r1, #128	; 0x80
 80159a0:	4808      	ldr	r0, [pc, #32]	; (80159c4 <USBD_LL_Init+0x94>)
 80159a2:	f7f7 fd94 	bl	800d4ce <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80159a6:	2240      	movs	r2, #64	; 0x40
 80159a8:	2100      	movs	r1, #0
 80159aa:	4806      	ldr	r0, [pc, #24]	; (80159c4 <USBD_LL_Init+0x94>)
 80159ac:	f7f7 fd48 	bl	800d440 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80159b0:	2280      	movs	r2, #128	; 0x80
 80159b2:	2101      	movs	r1, #1
 80159b4:	4803      	ldr	r0, [pc, #12]	; (80159c4 <USBD_LL_Init+0x94>)
 80159b6:	f7f7 fd43 	bl	800d440 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80159ba:	2300      	movs	r3, #0
}
 80159bc:	4618      	mov	r0, r3
 80159be:	3708      	adds	r7, #8
 80159c0:	46bd      	mov	sp, r7
 80159c2:	bd80      	pop	{r7, pc}
 80159c4:	2000676c 	.word	0x2000676c

080159c8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80159c8:	b580      	push	{r7, lr}
 80159ca:	b084      	sub	sp, #16
 80159cc:	af00      	add	r7, sp, #0
 80159ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80159d0:	2300      	movs	r3, #0
 80159d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80159d4:	2300      	movs	r3, #0
 80159d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80159de:	4618      	mov	r0, r3
 80159e0:	f7f6 fd2b 	bl	800c43a <HAL_PCD_Start>
 80159e4:	4603      	mov	r3, r0
 80159e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80159e8:	7bfb      	ldrb	r3, [r7, #15]
 80159ea:	4618      	mov	r0, r3
 80159ec:	f000 f92a 	bl	8015c44 <USBD_Get_USB_Status>
 80159f0:	4603      	mov	r3, r0
 80159f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80159f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80159f6:	4618      	mov	r0, r3
 80159f8:	3710      	adds	r7, #16
 80159fa:	46bd      	mov	sp, r7
 80159fc:	bd80      	pop	{r7, pc}

080159fe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80159fe:	b580      	push	{r7, lr}
 8015a00:	b084      	sub	sp, #16
 8015a02:	af00      	add	r7, sp, #0
 8015a04:	6078      	str	r0, [r7, #4]
 8015a06:	4608      	mov	r0, r1
 8015a08:	4611      	mov	r1, r2
 8015a0a:	461a      	mov	r2, r3
 8015a0c:	4603      	mov	r3, r0
 8015a0e:	70fb      	strb	r3, [r7, #3]
 8015a10:	460b      	mov	r3, r1
 8015a12:	70bb      	strb	r3, [r7, #2]
 8015a14:	4613      	mov	r3, r2
 8015a16:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015a18:	2300      	movs	r3, #0
 8015a1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015a1c:	2300      	movs	r3, #0
 8015a1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015a26:	78bb      	ldrb	r3, [r7, #2]
 8015a28:	883a      	ldrh	r2, [r7, #0]
 8015a2a:	78f9      	ldrb	r1, [r7, #3]
 8015a2c:	f7f7 f90f 	bl	800cc4e <HAL_PCD_EP_Open>
 8015a30:	4603      	mov	r3, r0
 8015a32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015a34:	7bfb      	ldrb	r3, [r7, #15]
 8015a36:	4618      	mov	r0, r3
 8015a38:	f000 f904 	bl	8015c44 <USBD_Get_USB_Status>
 8015a3c:	4603      	mov	r3, r0
 8015a3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015a40:	7bbb      	ldrb	r3, [r7, #14]
}
 8015a42:	4618      	mov	r0, r3
 8015a44:	3710      	adds	r7, #16
 8015a46:	46bd      	mov	sp, r7
 8015a48:	bd80      	pop	{r7, pc}

08015a4a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015a4a:	b580      	push	{r7, lr}
 8015a4c:	b084      	sub	sp, #16
 8015a4e:	af00      	add	r7, sp, #0
 8015a50:	6078      	str	r0, [r7, #4]
 8015a52:	460b      	mov	r3, r1
 8015a54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015a56:	2300      	movs	r3, #0
 8015a58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015a5a:	2300      	movs	r3, #0
 8015a5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015a64:	78fa      	ldrb	r2, [r7, #3]
 8015a66:	4611      	mov	r1, r2
 8015a68:	4618      	mov	r0, r3
 8015a6a:	f7f7 f958 	bl	800cd1e <HAL_PCD_EP_Close>
 8015a6e:	4603      	mov	r3, r0
 8015a70:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015a72:	7bfb      	ldrb	r3, [r7, #15]
 8015a74:	4618      	mov	r0, r3
 8015a76:	f000 f8e5 	bl	8015c44 <USBD_Get_USB_Status>
 8015a7a:	4603      	mov	r3, r0
 8015a7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015a7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8015a80:	4618      	mov	r0, r3
 8015a82:	3710      	adds	r7, #16
 8015a84:	46bd      	mov	sp, r7
 8015a86:	bd80      	pop	{r7, pc}

08015a88 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015a88:	b580      	push	{r7, lr}
 8015a8a:	b084      	sub	sp, #16
 8015a8c:	af00      	add	r7, sp, #0
 8015a8e:	6078      	str	r0, [r7, #4]
 8015a90:	460b      	mov	r3, r1
 8015a92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015a94:	2300      	movs	r3, #0
 8015a96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015a98:	2300      	movs	r3, #0
 8015a9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015a9c:	687b      	ldr	r3, [r7, #4]
 8015a9e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015aa2:	78fa      	ldrb	r2, [r7, #3]
 8015aa4:	4611      	mov	r1, r2
 8015aa6:	4618      	mov	r0, r3
 8015aa8:	f7f7 fa30 	bl	800cf0c <HAL_PCD_EP_SetStall>
 8015aac:	4603      	mov	r3, r0
 8015aae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015ab0:	7bfb      	ldrb	r3, [r7, #15]
 8015ab2:	4618      	mov	r0, r3
 8015ab4:	f000 f8c6 	bl	8015c44 <USBD_Get_USB_Status>
 8015ab8:	4603      	mov	r3, r0
 8015aba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015abc:	7bbb      	ldrb	r3, [r7, #14]
}
 8015abe:	4618      	mov	r0, r3
 8015ac0:	3710      	adds	r7, #16
 8015ac2:	46bd      	mov	sp, r7
 8015ac4:	bd80      	pop	{r7, pc}

08015ac6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015ac6:	b580      	push	{r7, lr}
 8015ac8:	b084      	sub	sp, #16
 8015aca:	af00      	add	r7, sp, #0
 8015acc:	6078      	str	r0, [r7, #4]
 8015ace:	460b      	mov	r3, r1
 8015ad0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015ad2:	2300      	movs	r3, #0
 8015ad4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015ad6:	2300      	movs	r3, #0
 8015ad8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015ae0:	78fa      	ldrb	r2, [r7, #3]
 8015ae2:	4611      	mov	r1, r2
 8015ae4:	4618      	mov	r0, r3
 8015ae6:	f7f7 fa75 	bl	800cfd4 <HAL_PCD_EP_ClrStall>
 8015aea:	4603      	mov	r3, r0
 8015aec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015aee:	7bfb      	ldrb	r3, [r7, #15]
 8015af0:	4618      	mov	r0, r3
 8015af2:	f000 f8a7 	bl	8015c44 <USBD_Get_USB_Status>
 8015af6:	4603      	mov	r3, r0
 8015af8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015afa:	7bbb      	ldrb	r3, [r7, #14]
}
 8015afc:	4618      	mov	r0, r3
 8015afe:	3710      	adds	r7, #16
 8015b00:	46bd      	mov	sp, r7
 8015b02:	bd80      	pop	{r7, pc}

08015b04 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015b04:	b480      	push	{r7}
 8015b06:	b085      	sub	sp, #20
 8015b08:	af00      	add	r7, sp, #0
 8015b0a:	6078      	str	r0, [r7, #4]
 8015b0c:	460b      	mov	r3, r1
 8015b0e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015b10:	687b      	ldr	r3, [r7, #4]
 8015b12:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015b16:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015b18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	da0b      	bge.n	8015b38 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015b20:	78fb      	ldrb	r3, [r7, #3]
 8015b22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015b26:	68f9      	ldr	r1, [r7, #12]
 8015b28:	4613      	mov	r3, r2
 8015b2a:	00db      	lsls	r3, r3, #3
 8015b2c:	1a9b      	subs	r3, r3, r2
 8015b2e:	009b      	lsls	r3, r3, #2
 8015b30:	440b      	add	r3, r1
 8015b32:	333e      	adds	r3, #62	; 0x3e
 8015b34:	781b      	ldrb	r3, [r3, #0]
 8015b36:	e00b      	b.n	8015b50 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015b38:	78fb      	ldrb	r3, [r7, #3]
 8015b3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015b3e:	68f9      	ldr	r1, [r7, #12]
 8015b40:	4613      	mov	r3, r2
 8015b42:	00db      	lsls	r3, r3, #3
 8015b44:	1a9b      	subs	r3, r3, r2
 8015b46:	009b      	lsls	r3, r3, #2
 8015b48:	440b      	add	r3, r1
 8015b4a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015b4e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015b50:	4618      	mov	r0, r3
 8015b52:	3714      	adds	r7, #20
 8015b54:	46bd      	mov	sp, r7
 8015b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b5a:	4770      	bx	lr

08015b5c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015b5c:	b580      	push	{r7, lr}
 8015b5e:	b084      	sub	sp, #16
 8015b60:	af00      	add	r7, sp, #0
 8015b62:	6078      	str	r0, [r7, #4]
 8015b64:	460b      	mov	r3, r1
 8015b66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015b68:	2300      	movs	r3, #0
 8015b6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b6c:	2300      	movs	r3, #0
 8015b6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015b76:	78fa      	ldrb	r2, [r7, #3]
 8015b78:	4611      	mov	r1, r2
 8015b7a:	4618      	mov	r0, r3
 8015b7c:	f7f7 f842 	bl	800cc04 <HAL_PCD_SetAddress>
 8015b80:	4603      	mov	r3, r0
 8015b82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015b84:	7bfb      	ldrb	r3, [r7, #15]
 8015b86:	4618      	mov	r0, r3
 8015b88:	f000 f85c 	bl	8015c44 <USBD_Get_USB_Status>
 8015b8c:	4603      	mov	r3, r0
 8015b8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015b90:	7bbb      	ldrb	r3, [r7, #14]
}
 8015b92:	4618      	mov	r0, r3
 8015b94:	3710      	adds	r7, #16
 8015b96:	46bd      	mov	sp, r7
 8015b98:	bd80      	pop	{r7, pc}

08015b9a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015b9a:	b580      	push	{r7, lr}
 8015b9c:	b086      	sub	sp, #24
 8015b9e:	af00      	add	r7, sp, #0
 8015ba0:	60f8      	str	r0, [r7, #12]
 8015ba2:	607a      	str	r2, [r7, #4]
 8015ba4:	603b      	str	r3, [r7, #0]
 8015ba6:	460b      	mov	r3, r1
 8015ba8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015baa:	2300      	movs	r3, #0
 8015bac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015bae:	2300      	movs	r3, #0
 8015bb0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015bb2:	68fb      	ldr	r3, [r7, #12]
 8015bb4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015bb8:	7af9      	ldrb	r1, [r7, #11]
 8015bba:	683b      	ldr	r3, [r7, #0]
 8015bbc:	687a      	ldr	r2, [r7, #4]
 8015bbe:	f7f7 f95b 	bl	800ce78 <HAL_PCD_EP_Transmit>
 8015bc2:	4603      	mov	r3, r0
 8015bc4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015bc6:	7dfb      	ldrb	r3, [r7, #23]
 8015bc8:	4618      	mov	r0, r3
 8015bca:	f000 f83b 	bl	8015c44 <USBD_Get_USB_Status>
 8015bce:	4603      	mov	r3, r0
 8015bd0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015bd2:	7dbb      	ldrb	r3, [r7, #22]
}
 8015bd4:	4618      	mov	r0, r3
 8015bd6:	3718      	adds	r7, #24
 8015bd8:	46bd      	mov	sp, r7
 8015bda:	bd80      	pop	{r7, pc}

08015bdc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015bdc:	b580      	push	{r7, lr}
 8015bde:	b086      	sub	sp, #24
 8015be0:	af00      	add	r7, sp, #0
 8015be2:	60f8      	str	r0, [r7, #12]
 8015be4:	607a      	str	r2, [r7, #4]
 8015be6:	603b      	str	r3, [r7, #0]
 8015be8:	460b      	mov	r3, r1
 8015bea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015bec:	2300      	movs	r3, #0
 8015bee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015bf0:	2300      	movs	r3, #0
 8015bf2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015bf4:	68fb      	ldr	r3, [r7, #12]
 8015bf6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015bfa:	7af9      	ldrb	r1, [r7, #11]
 8015bfc:	683b      	ldr	r3, [r7, #0]
 8015bfe:	687a      	ldr	r2, [r7, #4]
 8015c00:	f7f7 f8d7 	bl	800cdb2 <HAL_PCD_EP_Receive>
 8015c04:	4603      	mov	r3, r0
 8015c06:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015c08:	7dfb      	ldrb	r3, [r7, #23]
 8015c0a:	4618      	mov	r0, r3
 8015c0c:	f000 f81a 	bl	8015c44 <USBD_Get_USB_Status>
 8015c10:	4603      	mov	r3, r0
 8015c12:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015c14:	7dbb      	ldrb	r3, [r7, #22]
}
 8015c16:	4618      	mov	r0, r3
 8015c18:	3718      	adds	r7, #24
 8015c1a:	46bd      	mov	sp, r7
 8015c1c:	bd80      	pop	{r7, pc}

08015c1e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015c1e:	b580      	push	{r7, lr}
 8015c20:	b082      	sub	sp, #8
 8015c22:	af00      	add	r7, sp, #0
 8015c24:	6078      	str	r0, [r7, #4]
 8015c26:	460b      	mov	r3, r1
 8015c28:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015c30:	78fa      	ldrb	r2, [r7, #3]
 8015c32:	4611      	mov	r1, r2
 8015c34:	4618      	mov	r0, r3
 8015c36:	f7f7 f907 	bl	800ce48 <HAL_PCD_EP_GetRxCount>
 8015c3a:	4603      	mov	r3, r0
}
 8015c3c:	4618      	mov	r0, r3
 8015c3e:	3708      	adds	r7, #8
 8015c40:	46bd      	mov	sp, r7
 8015c42:	bd80      	pop	{r7, pc}

08015c44 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015c44:	b480      	push	{r7}
 8015c46:	b085      	sub	sp, #20
 8015c48:	af00      	add	r7, sp, #0
 8015c4a:	4603      	mov	r3, r0
 8015c4c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015c4e:	2300      	movs	r3, #0
 8015c50:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015c52:	79fb      	ldrb	r3, [r7, #7]
 8015c54:	2b03      	cmp	r3, #3
 8015c56:	d817      	bhi.n	8015c88 <USBD_Get_USB_Status+0x44>
 8015c58:	a201      	add	r2, pc, #4	; (adr r2, 8015c60 <USBD_Get_USB_Status+0x1c>)
 8015c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c5e:	bf00      	nop
 8015c60:	08015c71 	.word	0x08015c71
 8015c64:	08015c77 	.word	0x08015c77
 8015c68:	08015c7d 	.word	0x08015c7d
 8015c6c:	08015c83 	.word	0x08015c83
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015c70:	2300      	movs	r3, #0
 8015c72:	73fb      	strb	r3, [r7, #15]
    break;
 8015c74:	e00b      	b.n	8015c8e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015c76:	2303      	movs	r3, #3
 8015c78:	73fb      	strb	r3, [r7, #15]
    break;
 8015c7a:	e008      	b.n	8015c8e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015c7c:	2301      	movs	r3, #1
 8015c7e:	73fb      	strb	r3, [r7, #15]
    break;
 8015c80:	e005      	b.n	8015c8e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015c82:	2303      	movs	r3, #3
 8015c84:	73fb      	strb	r3, [r7, #15]
    break;
 8015c86:	e002      	b.n	8015c8e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015c88:	2303      	movs	r3, #3
 8015c8a:	73fb      	strb	r3, [r7, #15]
    break;
 8015c8c:	bf00      	nop
  }
  return usb_status;
 8015c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c90:	4618      	mov	r0, r3
 8015c92:	3714      	adds	r7, #20
 8015c94:	46bd      	mov	sp, r7
 8015c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c9a:	4770      	bx	lr

08015c9c <__errno>:
 8015c9c:	4b01      	ldr	r3, [pc, #4]	; (8015ca4 <__errno+0x8>)
 8015c9e:	6818      	ldr	r0, [r3, #0]
 8015ca0:	4770      	bx	lr
 8015ca2:	bf00      	nop
 8015ca4:	200009ac 	.word	0x200009ac

08015ca8 <__libc_init_array>:
 8015ca8:	b570      	push	{r4, r5, r6, lr}
 8015caa:	4d0d      	ldr	r5, [pc, #52]	; (8015ce0 <__libc_init_array+0x38>)
 8015cac:	4c0d      	ldr	r4, [pc, #52]	; (8015ce4 <__libc_init_array+0x3c>)
 8015cae:	1b64      	subs	r4, r4, r5
 8015cb0:	10a4      	asrs	r4, r4, #2
 8015cb2:	2600      	movs	r6, #0
 8015cb4:	42a6      	cmp	r6, r4
 8015cb6:	d109      	bne.n	8015ccc <__libc_init_array+0x24>
 8015cb8:	4d0b      	ldr	r5, [pc, #44]	; (8015ce8 <__libc_init_array+0x40>)
 8015cba:	4c0c      	ldr	r4, [pc, #48]	; (8015cec <__libc_init_array+0x44>)
 8015cbc:	f006 f972 	bl	801bfa4 <_init>
 8015cc0:	1b64      	subs	r4, r4, r5
 8015cc2:	10a4      	asrs	r4, r4, #2
 8015cc4:	2600      	movs	r6, #0
 8015cc6:	42a6      	cmp	r6, r4
 8015cc8:	d105      	bne.n	8015cd6 <__libc_init_array+0x2e>
 8015cca:	bd70      	pop	{r4, r5, r6, pc}
 8015ccc:	f855 3b04 	ldr.w	r3, [r5], #4
 8015cd0:	4798      	blx	r3
 8015cd2:	3601      	adds	r6, #1
 8015cd4:	e7ee      	b.n	8015cb4 <__libc_init_array+0xc>
 8015cd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8015cda:	4798      	blx	r3
 8015cdc:	3601      	adds	r6, #1
 8015cde:	e7f2      	b.n	8015cc6 <__libc_init_array+0x1e>
 8015ce0:	0801c9a8 	.word	0x0801c9a8
 8015ce4:	0801c9a8 	.word	0x0801c9a8
 8015ce8:	0801c9a8 	.word	0x0801c9a8
 8015cec:	0801c9ac 	.word	0x0801c9ac

08015cf0 <malloc>:
 8015cf0:	4b02      	ldr	r3, [pc, #8]	; (8015cfc <malloc+0xc>)
 8015cf2:	4601      	mov	r1, r0
 8015cf4:	6818      	ldr	r0, [r3, #0]
 8015cf6:	f000 b88b 	b.w	8015e10 <_malloc_r>
 8015cfa:	bf00      	nop
 8015cfc:	200009ac 	.word	0x200009ac

08015d00 <free>:
 8015d00:	4b02      	ldr	r3, [pc, #8]	; (8015d0c <free+0xc>)
 8015d02:	4601      	mov	r1, r0
 8015d04:	6818      	ldr	r0, [r3, #0]
 8015d06:	f000 b833 	b.w	8015d70 <_free_r>
 8015d0a:	bf00      	nop
 8015d0c:	200009ac 	.word	0x200009ac

08015d10 <memcpy>:
 8015d10:	440a      	add	r2, r1
 8015d12:	4291      	cmp	r1, r2
 8015d14:	f100 33ff 	add.w	r3, r0, #4294967295
 8015d18:	d100      	bne.n	8015d1c <memcpy+0xc>
 8015d1a:	4770      	bx	lr
 8015d1c:	b510      	push	{r4, lr}
 8015d1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015d22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015d26:	4291      	cmp	r1, r2
 8015d28:	d1f9      	bne.n	8015d1e <memcpy+0xe>
 8015d2a:	bd10      	pop	{r4, pc}

08015d2c <memmove>:
 8015d2c:	4288      	cmp	r0, r1
 8015d2e:	b510      	push	{r4, lr}
 8015d30:	eb01 0402 	add.w	r4, r1, r2
 8015d34:	d902      	bls.n	8015d3c <memmove+0x10>
 8015d36:	4284      	cmp	r4, r0
 8015d38:	4623      	mov	r3, r4
 8015d3a:	d807      	bhi.n	8015d4c <memmove+0x20>
 8015d3c:	1e43      	subs	r3, r0, #1
 8015d3e:	42a1      	cmp	r1, r4
 8015d40:	d008      	beq.n	8015d54 <memmove+0x28>
 8015d42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015d46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015d4a:	e7f8      	b.n	8015d3e <memmove+0x12>
 8015d4c:	4402      	add	r2, r0
 8015d4e:	4601      	mov	r1, r0
 8015d50:	428a      	cmp	r2, r1
 8015d52:	d100      	bne.n	8015d56 <memmove+0x2a>
 8015d54:	bd10      	pop	{r4, pc}
 8015d56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015d5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015d5e:	e7f7      	b.n	8015d50 <memmove+0x24>

08015d60 <memset>:
 8015d60:	4402      	add	r2, r0
 8015d62:	4603      	mov	r3, r0
 8015d64:	4293      	cmp	r3, r2
 8015d66:	d100      	bne.n	8015d6a <memset+0xa>
 8015d68:	4770      	bx	lr
 8015d6a:	f803 1b01 	strb.w	r1, [r3], #1
 8015d6e:	e7f9      	b.n	8015d64 <memset+0x4>

08015d70 <_free_r>:
 8015d70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015d72:	2900      	cmp	r1, #0
 8015d74:	d048      	beq.n	8015e08 <_free_r+0x98>
 8015d76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015d7a:	9001      	str	r0, [sp, #4]
 8015d7c:	2b00      	cmp	r3, #0
 8015d7e:	f1a1 0404 	sub.w	r4, r1, #4
 8015d82:	bfb8      	it	lt
 8015d84:	18e4      	addlt	r4, r4, r3
 8015d86:	f003 f835 	bl	8018df4 <__malloc_lock>
 8015d8a:	4a20      	ldr	r2, [pc, #128]	; (8015e0c <_free_r+0x9c>)
 8015d8c:	9801      	ldr	r0, [sp, #4]
 8015d8e:	6813      	ldr	r3, [r2, #0]
 8015d90:	4615      	mov	r5, r2
 8015d92:	b933      	cbnz	r3, 8015da2 <_free_r+0x32>
 8015d94:	6063      	str	r3, [r4, #4]
 8015d96:	6014      	str	r4, [r2, #0]
 8015d98:	b003      	add	sp, #12
 8015d9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015d9e:	f003 b82f 	b.w	8018e00 <__malloc_unlock>
 8015da2:	42a3      	cmp	r3, r4
 8015da4:	d90b      	bls.n	8015dbe <_free_r+0x4e>
 8015da6:	6821      	ldr	r1, [r4, #0]
 8015da8:	1862      	adds	r2, r4, r1
 8015daa:	4293      	cmp	r3, r2
 8015dac:	bf04      	itt	eq
 8015dae:	681a      	ldreq	r2, [r3, #0]
 8015db0:	685b      	ldreq	r3, [r3, #4]
 8015db2:	6063      	str	r3, [r4, #4]
 8015db4:	bf04      	itt	eq
 8015db6:	1852      	addeq	r2, r2, r1
 8015db8:	6022      	streq	r2, [r4, #0]
 8015dba:	602c      	str	r4, [r5, #0]
 8015dbc:	e7ec      	b.n	8015d98 <_free_r+0x28>
 8015dbe:	461a      	mov	r2, r3
 8015dc0:	685b      	ldr	r3, [r3, #4]
 8015dc2:	b10b      	cbz	r3, 8015dc8 <_free_r+0x58>
 8015dc4:	42a3      	cmp	r3, r4
 8015dc6:	d9fa      	bls.n	8015dbe <_free_r+0x4e>
 8015dc8:	6811      	ldr	r1, [r2, #0]
 8015dca:	1855      	adds	r5, r2, r1
 8015dcc:	42a5      	cmp	r5, r4
 8015dce:	d10b      	bne.n	8015de8 <_free_r+0x78>
 8015dd0:	6824      	ldr	r4, [r4, #0]
 8015dd2:	4421      	add	r1, r4
 8015dd4:	1854      	adds	r4, r2, r1
 8015dd6:	42a3      	cmp	r3, r4
 8015dd8:	6011      	str	r1, [r2, #0]
 8015dda:	d1dd      	bne.n	8015d98 <_free_r+0x28>
 8015ddc:	681c      	ldr	r4, [r3, #0]
 8015dde:	685b      	ldr	r3, [r3, #4]
 8015de0:	6053      	str	r3, [r2, #4]
 8015de2:	4421      	add	r1, r4
 8015de4:	6011      	str	r1, [r2, #0]
 8015de6:	e7d7      	b.n	8015d98 <_free_r+0x28>
 8015de8:	d902      	bls.n	8015df0 <_free_r+0x80>
 8015dea:	230c      	movs	r3, #12
 8015dec:	6003      	str	r3, [r0, #0]
 8015dee:	e7d3      	b.n	8015d98 <_free_r+0x28>
 8015df0:	6825      	ldr	r5, [r4, #0]
 8015df2:	1961      	adds	r1, r4, r5
 8015df4:	428b      	cmp	r3, r1
 8015df6:	bf04      	itt	eq
 8015df8:	6819      	ldreq	r1, [r3, #0]
 8015dfa:	685b      	ldreq	r3, [r3, #4]
 8015dfc:	6063      	str	r3, [r4, #4]
 8015dfe:	bf04      	itt	eq
 8015e00:	1949      	addeq	r1, r1, r5
 8015e02:	6021      	streq	r1, [r4, #0]
 8015e04:	6054      	str	r4, [r2, #4]
 8015e06:	e7c7      	b.n	8015d98 <_free_r+0x28>
 8015e08:	b003      	add	sp, #12
 8015e0a:	bd30      	pop	{r4, r5, pc}
 8015e0c:	20004d60 	.word	0x20004d60

08015e10 <_malloc_r>:
 8015e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e12:	1ccd      	adds	r5, r1, #3
 8015e14:	f025 0503 	bic.w	r5, r5, #3
 8015e18:	3508      	adds	r5, #8
 8015e1a:	2d0c      	cmp	r5, #12
 8015e1c:	bf38      	it	cc
 8015e1e:	250c      	movcc	r5, #12
 8015e20:	2d00      	cmp	r5, #0
 8015e22:	4606      	mov	r6, r0
 8015e24:	db01      	blt.n	8015e2a <_malloc_r+0x1a>
 8015e26:	42a9      	cmp	r1, r5
 8015e28:	d903      	bls.n	8015e32 <_malloc_r+0x22>
 8015e2a:	230c      	movs	r3, #12
 8015e2c:	6033      	str	r3, [r6, #0]
 8015e2e:	2000      	movs	r0, #0
 8015e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015e32:	f002 ffdf 	bl	8018df4 <__malloc_lock>
 8015e36:	4921      	ldr	r1, [pc, #132]	; (8015ebc <_malloc_r+0xac>)
 8015e38:	680a      	ldr	r2, [r1, #0]
 8015e3a:	4614      	mov	r4, r2
 8015e3c:	b99c      	cbnz	r4, 8015e66 <_malloc_r+0x56>
 8015e3e:	4f20      	ldr	r7, [pc, #128]	; (8015ec0 <_malloc_r+0xb0>)
 8015e40:	683b      	ldr	r3, [r7, #0]
 8015e42:	b923      	cbnz	r3, 8015e4e <_malloc_r+0x3e>
 8015e44:	4621      	mov	r1, r4
 8015e46:	4630      	mov	r0, r6
 8015e48:	f000 feb6 	bl	8016bb8 <_sbrk_r>
 8015e4c:	6038      	str	r0, [r7, #0]
 8015e4e:	4629      	mov	r1, r5
 8015e50:	4630      	mov	r0, r6
 8015e52:	f000 feb1 	bl	8016bb8 <_sbrk_r>
 8015e56:	1c43      	adds	r3, r0, #1
 8015e58:	d123      	bne.n	8015ea2 <_malloc_r+0x92>
 8015e5a:	230c      	movs	r3, #12
 8015e5c:	6033      	str	r3, [r6, #0]
 8015e5e:	4630      	mov	r0, r6
 8015e60:	f002 ffce 	bl	8018e00 <__malloc_unlock>
 8015e64:	e7e3      	b.n	8015e2e <_malloc_r+0x1e>
 8015e66:	6823      	ldr	r3, [r4, #0]
 8015e68:	1b5b      	subs	r3, r3, r5
 8015e6a:	d417      	bmi.n	8015e9c <_malloc_r+0x8c>
 8015e6c:	2b0b      	cmp	r3, #11
 8015e6e:	d903      	bls.n	8015e78 <_malloc_r+0x68>
 8015e70:	6023      	str	r3, [r4, #0]
 8015e72:	441c      	add	r4, r3
 8015e74:	6025      	str	r5, [r4, #0]
 8015e76:	e004      	b.n	8015e82 <_malloc_r+0x72>
 8015e78:	6863      	ldr	r3, [r4, #4]
 8015e7a:	42a2      	cmp	r2, r4
 8015e7c:	bf0c      	ite	eq
 8015e7e:	600b      	streq	r3, [r1, #0]
 8015e80:	6053      	strne	r3, [r2, #4]
 8015e82:	4630      	mov	r0, r6
 8015e84:	f002 ffbc 	bl	8018e00 <__malloc_unlock>
 8015e88:	f104 000b 	add.w	r0, r4, #11
 8015e8c:	1d23      	adds	r3, r4, #4
 8015e8e:	f020 0007 	bic.w	r0, r0, #7
 8015e92:	1ac2      	subs	r2, r0, r3
 8015e94:	d0cc      	beq.n	8015e30 <_malloc_r+0x20>
 8015e96:	1a1b      	subs	r3, r3, r0
 8015e98:	50a3      	str	r3, [r4, r2]
 8015e9a:	e7c9      	b.n	8015e30 <_malloc_r+0x20>
 8015e9c:	4622      	mov	r2, r4
 8015e9e:	6864      	ldr	r4, [r4, #4]
 8015ea0:	e7cc      	b.n	8015e3c <_malloc_r+0x2c>
 8015ea2:	1cc4      	adds	r4, r0, #3
 8015ea4:	f024 0403 	bic.w	r4, r4, #3
 8015ea8:	42a0      	cmp	r0, r4
 8015eaa:	d0e3      	beq.n	8015e74 <_malloc_r+0x64>
 8015eac:	1a21      	subs	r1, r4, r0
 8015eae:	4630      	mov	r0, r6
 8015eb0:	f000 fe82 	bl	8016bb8 <_sbrk_r>
 8015eb4:	3001      	adds	r0, #1
 8015eb6:	d1dd      	bne.n	8015e74 <_malloc_r+0x64>
 8015eb8:	e7cf      	b.n	8015e5a <_malloc_r+0x4a>
 8015eba:	bf00      	nop
 8015ebc:	20004d60 	.word	0x20004d60
 8015ec0:	20004d64 	.word	0x20004d64

08015ec4 <__cvt>:
 8015ec4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015ec8:	ec55 4b10 	vmov	r4, r5, d0
 8015ecc:	2d00      	cmp	r5, #0
 8015ece:	460e      	mov	r6, r1
 8015ed0:	4619      	mov	r1, r3
 8015ed2:	462b      	mov	r3, r5
 8015ed4:	bfbb      	ittet	lt
 8015ed6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8015eda:	461d      	movlt	r5, r3
 8015edc:	2300      	movge	r3, #0
 8015ede:	232d      	movlt	r3, #45	; 0x2d
 8015ee0:	700b      	strb	r3, [r1, #0]
 8015ee2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015ee4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015ee8:	4691      	mov	r9, r2
 8015eea:	f023 0820 	bic.w	r8, r3, #32
 8015eee:	bfbc      	itt	lt
 8015ef0:	4622      	movlt	r2, r4
 8015ef2:	4614      	movlt	r4, r2
 8015ef4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8015ef8:	d005      	beq.n	8015f06 <__cvt+0x42>
 8015efa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8015efe:	d100      	bne.n	8015f02 <__cvt+0x3e>
 8015f00:	3601      	adds	r6, #1
 8015f02:	2102      	movs	r1, #2
 8015f04:	e000      	b.n	8015f08 <__cvt+0x44>
 8015f06:	2103      	movs	r1, #3
 8015f08:	ab03      	add	r3, sp, #12
 8015f0a:	9301      	str	r3, [sp, #4]
 8015f0c:	ab02      	add	r3, sp, #8
 8015f0e:	9300      	str	r3, [sp, #0]
 8015f10:	ec45 4b10 	vmov	d0, r4, r5
 8015f14:	4653      	mov	r3, sl
 8015f16:	4632      	mov	r2, r6
 8015f18:	f001 fdfa 	bl	8017b10 <_dtoa_r>
 8015f1c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8015f20:	4607      	mov	r7, r0
 8015f22:	d102      	bne.n	8015f2a <__cvt+0x66>
 8015f24:	f019 0f01 	tst.w	r9, #1
 8015f28:	d022      	beq.n	8015f70 <__cvt+0xac>
 8015f2a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8015f2e:	eb07 0906 	add.w	r9, r7, r6
 8015f32:	d110      	bne.n	8015f56 <__cvt+0x92>
 8015f34:	783b      	ldrb	r3, [r7, #0]
 8015f36:	2b30      	cmp	r3, #48	; 0x30
 8015f38:	d10a      	bne.n	8015f50 <__cvt+0x8c>
 8015f3a:	2200      	movs	r2, #0
 8015f3c:	2300      	movs	r3, #0
 8015f3e:	4620      	mov	r0, r4
 8015f40:	4629      	mov	r1, r5
 8015f42:	f7ea fdc1 	bl	8000ac8 <__aeabi_dcmpeq>
 8015f46:	b918      	cbnz	r0, 8015f50 <__cvt+0x8c>
 8015f48:	f1c6 0601 	rsb	r6, r6, #1
 8015f4c:	f8ca 6000 	str.w	r6, [sl]
 8015f50:	f8da 3000 	ldr.w	r3, [sl]
 8015f54:	4499      	add	r9, r3
 8015f56:	2200      	movs	r2, #0
 8015f58:	2300      	movs	r3, #0
 8015f5a:	4620      	mov	r0, r4
 8015f5c:	4629      	mov	r1, r5
 8015f5e:	f7ea fdb3 	bl	8000ac8 <__aeabi_dcmpeq>
 8015f62:	b108      	cbz	r0, 8015f68 <__cvt+0xa4>
 8015f64:	f8cd 900c 	str.w	r9, [sp, #12]
 8015f68:	2230      	movs	r2, #48	; 0x30
 8015f6a:	9b03      	ldr	r3, [sp, #12]
 8015f6c:	454b      	cmp	r3, r9
 8015f6e:	d307      	bcc.n	8015f80 <__cvt+0xbc>
 8015f70:	9b03      	ldr	r3, [sp, #12]
 8015f72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015f74:	1bdb      	subs	r3, r3, r7
 8015f76:	4638      	mov	r0, r7
 8015f78:	6013      	str	r3, [r2, #0]
 8015f7a:	b004      	add	sp, #16
 8015f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f80:	1c59      	adds	r1, r3, #1
 8015f82:	9103      	str	r1, [sp, #12]
 8015f84:	701a      	strb	r2, [r3, #0]
 8015f86:	e7f0      	b.n	8015f6a <__cvt+0xa6>

08015f88 <__exponent>:
 8015f88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015f8a:	4603      	mov	r3, r0
 8015f8c:	2900      	cmp	r1, #0
 8015f8e:	bfb8      	it	lt
 8015f90:	4249      	neglt	r1, r1
 8015f92:	f803 2b02 	strb.w	r2, [r3], #2
 8015f96:	bfb4      	ite	lt
 8015f98:	222d      	movlt	r2, #45	; 0x2d
 8015f9a:	222b      	movge	r2, #43	; 0x2b
 8015f9c:	2909      	cmp	r1, #9
 8015f9e:	7042      	strb	r2, [r0, #1]
 8015fa0:	dd2a      	ble.n	8015ff8 <__exponent+0x70>
 8015fa2:	f10d 0407 	add.w	r4, sp, #7
 8015fa6:	46a4      	mov	ip, r4
 8015fa8:	270a      	movs	r7, #10
 8015faa:	46a6      	mov	lr, r4
 8015fac:	460a      	mov	r2, r1
 8015fae:	fb91 f6f7 	sdiv	r6, r1, r7
 8015fb2:	fb07 1516 	mls	r5, r7, r6, r1
 8015fb6:	3530      	adds	r5, #48	; 0x30
 8015fb8:	2a63      	cmp	r2, #99	; 0x63
 8015fba:	f104 34ff 	add.w	r4, r4, #4294967295
 8015fbe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8015fc2:	4631      	mov	r1, r6
 8015fc4:	dcf1      	bgt.n	8015faa <__exponent+0x22>
 8015fc6:	3130      	adds	r1, #48	; 0x30
 8015fc8:	f1ae 0502 	sub.w	r5, lr, #2
 8015fcc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8015fd0:	1c44      	adds	r4, r0, #1
 8015fd2:	4629      	mov	r1, r5
 8015fd4:	4561      	cmp	r1, ip
 8015fd6:	d30a      	bcc.n	8015fee <__exponent+0x66>
 8015fd8:	f10d 0209 	add.w	r2, sp, #9
 8015fdc:	eba2 020e 	sub.w	r2, r2, lr
 8015fe0:	4565      	cmp	r5, ip
 8015fe2:	bf88      	it	hi
 8015fe4:	2200      	movhi	r2, #0
 8015fe6:	4413      	add	r3, r2
 8015fe8:	1a18      	subs	r0, r3, r0
 8015fea:	b003      	add	sp, #12
 8015fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015fee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015ff2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8015ff6:	e7ed      	b.n	8015fd4 <__exponent+0x4c>
 8015ff8:	2330      	movs	r3, #48	; 0x30
 8015ffa:	3130      	adds	r1, #48	; 0x30
 8015ffc:	7083      	strb	r3, [r0, #2]
 8015ffe:	70c1      	strb	r1, [r0, #3]
 8016000:	1d03      	adds	r3, r0, #4
 8016002:	e7f1      	b.n	8015fe8 <__exponent+0x60>

08016004 <_printf_float>:
 8016004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016008:	ed2d 8b02 	vpush	{d8}
 801600c:	b08d      	sub	sp, #52	; 0x34
 801600e:	460c      	mov	r4, r1
 8016010:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8016014:	4616      	mov	r6, r2
 8016016:	461f      	mov	r7, r3
 8016018:	4605      	mov	r5, r0
 801601a:	f002 fed5 	bl	8018dc8 <_localeconv_r>
 801601e:	f8d0 a000 	ldr.w	sl, [r0]
 8016022:	4650      	mov	r0, sl
 8016024:	f7ea f8d4 	bl	80001d0 <strlen>
 8016028:	2300      	movs	r3, #0
 801602a:	930a      	str	r3, [sp, #40]	; 0x28
 801602c:	6823      	ldr	r3, [r4, #0]
 801602e:	9305      	str	r3, [sp, #20]
 8016030:	f8d8 3000 	ldr.w	r3, [r8]
 8016034:	f894 b018 	ldrb.w	fp, [r4, #24]
 8016038:	3307      	adds	r3, #7
 801603a:	f023 0307 	bic.w	r3, r3, #7
 801603e:	f103 0208 	add.w	r2, r3, #8
 8016042:	f8c8 2000 	str.w	r2, [r8]
 8016046:	e9d3 2300 	ldrd	r2, r3, [r3]
 801604a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801604e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8016052:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016056:	9307      	str	r3, [sp, #28]
 8016058:	f8cd 8018 	str.w	r8, [sp, #24]
 801605c:	ee08 0a10 	vmov	s16, r0
 8016060:	4b9f      	ldr	r3, [pc, #636]	; (80162e0 <_printf_float+0x2dc>)
 8016062:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016066:	f04f 32ff 	mov.w	r2, #4294967295
 801606a:	f7ea fd5f 	bl	8000b2c <__aeabi_dcmpun>
 801606e:	bb88      	cbnz	r0, 80160d4 <_printf_float+0xd0>
 8016070:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016074:	4b9a      	ldr	r3, [pc, #616]	; (80162e0 <_printf_float+0x2dc>)
 8016076:	f04f 32ff 	mov.w	r2, #4294967295
 801607a:	f7ea fd39 	bl	8000af0 <__aeabi_dcmple>
 801607e:	bb48      	cbnz	r0, 80160d4 <_printf_float+0xd0>
 8016080:	2200      	movs	r2, #0
 8016082:	2300      	movs	r3, #0
 8016084:	4640      	mov	r0, r8
 8016086:	4649      	mov	r1, r9
 8016088:	f7ea fd28 	bl	8000adc <__aeabi_dcmplt>
 801608c:	b110      	cbz	r0, 8016094 <_printf_float+0x90>
 801608e:	232d      	movs	r3, #45	; 0x2d
 8016090:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016094:	4b93      	ldr	r3, [pc, #588]	; (80162e4 <_printf_float+0x2e0>)
 8016096:	4894      	ldr	r0, [pc, #592]	; (80162e8 <_printf_float+0x2e4>)
 8016098:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801609c:	bf94      	ite	ls
 801609e:	4698      	movls	r8, r3
 80160a0:	4680      	movhi	r8, r0
 80160a2:	2303      	movs	r3, #3
 80160a4:	6123      	str	r3, [r4, #16]
 80160a6:	9b05      	ldr	r3, [sp, #20]
 80160a8:	f023 0204 	bic.w	r2, r3, #4
 80160ac:	6022      	str	r2, [r4, #0]
 80160ae:	f04f 0900 	mov.w	r9, #0
 80160b2:	9700      	str	r7, [sp, #0]
 80160b4:	4633      	mov	r3, r6
 80160b6:	aa0b      	add	r2, sp, #44	; 0x2c
 80160b8:	4621      	mov	r1, r4
 80160ba:	4628      	mov	r0, r5
 80160bc:	f000 f9d8 	bl	8016470 <_printf_common>
 80160c0:	3001      	adds	r0, #1
 80160c2:	f040 8090 	bne.w	80161e6 <_printf_float+0x1e2>
 80160c6:	f04f 30ff 	mov.w	r0, #4294967295
 80160ca:	b00d      	add	sp, #52	; 0x34
 80160cc:	ecbd 8b02 	vpop	{d8}
 80160d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160d4:	4642      	mov	r2, r8
 80160d6:	464b      	mov	r3, r9
 80160d8:	4640      	mov	r0, r8
 80160da:	4649      	mov	r1, r9
 80160dc:	f7ea fd26 	bl	8000b2c <__aeabi_dcmpun>
 80160e0:	b140      	cbz	r0, 80160f4 <_printf_float+0xf0>
 80160e2:	464b      	mov	r3, r9
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	bfbc      	itt	lt
 80160e8:	232d      	movlt	r3, #45	; 0x2d
 80160ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80160ee:	487f      	ldr	r0, [pc, #508]	; (80162ec <_printf_float+0x2e8>)
 80160f0:	4b7f      	ldr	r3, [pc, #508]	; (80162f0 <_printf_float+0x2ec>)
 80160f2:	e7d1      	b.n	8016098 <_printf_float+0x94>
 80160f4:	6863      	ldr	r3, [r4, #4]
 80160f6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80160fa:	9206      	str	r2, [sp, #24]
 80160fc:	1c5a      	adds	r2, r3, #1
 80160fe:	d13f      	bne.n	8016180 <_printf_float+0x17c>
 8016100:	2306      	movs	r3, #6
 8016102:	6063      	str	r3, [r4, #4]
 8016104:	9b05      	ldr	r3, [sp, #20]
 8016106:	6861      	ldr	r1, [r4, #4]
 8016108:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801610c:	2300      	movs	r3, #0
 801610e:	9303      	str	r3, [sp, #12]
 8016110:	ab0a      	add	r3, sp, #40	; 0x28
 8016112:	e9cd b301 	strd	fp, r3, [sp, #4]
 8016116:	ab09      	add	r3, sp, #36	; 0x24
 8016118:	ec49 8b10 	vmov	d0, r8, r9
 801611c:	9300      	str	r3, [sp, #0]
 801611e:	6022      	str	r2, [r4, #0]
 8016120:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8016124:	4628      	mov	r0, r5
 8016126:	f7ff fecd 	bl	8015ec4 <__cvt>
 801612a:	9b06      	ldr	r3, [sp, #24]
 801612c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801612e:	2b47      	cmp	r3, #71	; 0x47
 8016130:	4680      	mov	r8, r0
 8016132:	d108      	bne.n	8016146 <_printf_float+0x142>
 8016134:	1cc8      	adds	r0, r1, #3
 8016136:	db02      	blt.n	801613e <_printf_float+0x13a>
 8016138:	6863      	ldr	r3, [r4, #4]
 801613a:	4299      	cmp	r1, r3
 801613c:	dd41      	ble.n	80161c2 <_printf_float+0x1be>
 801613e:	f1ab 0b02 	sub.w	fp, fp, #2
 8016142:	fa5f fb8b 	uxtb.w	fp, fp
 8016146:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801614a:	d820      	bhi.n	801618e <_printf_float+0x18a>
 801614c:	3901      	subs	r1, #1
 801614e:	465a      	mov	r2, fp
 8016150:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8016154:	9109      	str	r1, [sp, #36]	; 0x24
 8016156:	f7ff ff17 	bl	8015f88 <__exponent>
 801615a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801615c:	1813      	adds	r3, r2, r0
 801615e:	2a01      	cmp	r2, #1
 8016160:	4681      	mov	r9, r0
 8016162:	6123      	str	r3, [r4, #16]
 8016164:	dc02      	bgt.n	801616c <_printf_float+0x168>
 8016166:	6822      	ldr	r2, [r4, #0]
 8016168:	07d2      	lsls	r2, r2, #31
 801616a:	d501      	bpl.n	8016170 <_printf_float+0x16c>
 801616c:	3301      	adds	r3, #1
 801616e:	6123      	str	r3, [r4, #16]
 8016170:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8016174:	2b00      	cmp	r3, #0
 8016176:	d09c      	beq.n	80160b2 <_printf_float+0xae>
 8016178:	232d      	movs	r3, #45	; 0x2d
 801617a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801617e:	e798      	b.n	80160b2 <_printf_float+0xae>
 8016180:	9a06      	ldr	r2, [sp, #24]
 8016182:	2a47      	cmp	r2, #71	; 0x47
 8016184:	d1be      	bne.n	8016104 <_printf_float+0x100>
 8016186:	2b00      	cmp	r3, #0
 8016188:	d1bc      	bne.n	8016104 <_printf_float+0x100>
 801618a:	2301      	movs	r3, #1
 801618c:	e7b9      	b.n	8016102 <_printf_float+0xfe>
 801618e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8016192:	d118      	bne.n	80161c6 <_printf_float+0x1c2>
 8016194:	2900      	cmp	r1, #0
 8016196:	6863      	ldr	r3, [r4, #4]
 8016198:	dd0b      	ble.n	80161b2 <_printf_float+0x1ae>
 801619a:	6121      	str	r1, [r4, #16]
 801619c:	b913      	cbnz	r3, 80161a4 <_printf_float+0x1a0>
 801619e:	6822      	ldr	r2, [r4, #0]
 80161a0:	07d0      	lsls	r0, r2, #31
 80161a2:	d502      	bpl.n	80161aa <_printf_float+0x1a6>
 80161a4:	3301      	adds	r3, #1
 80161a6:	440b      	add	r3, r1
 80161a8:	6123      	str	r3, [r4, #16]
 80161aa:	65a1      	str	r1, [r4, #88]	; 0x58
 80161ac:	f04f 0900 	mov.w	r9, #0
 80161b0:	e7de      	b.n	8016170 <_printf_float+0x16c>
 80161b2:	b913      	cbnz	r3, 80161ba <_printf_float+0x1b6>
 80161b4:	6822      	ldr	r2, [r4, #0]
 80161b6:	07d2      	lsls	r2, r2, #31
 80161b8:	d501      	bpl.n	80161be <_printf_float+0x1ba>
 80161ba:	3302      	adds	r3, #2
 80161bc:	e7f4      	b.n	80161a8 <_printf_float+0x1a4>
 80161be:	2301      	movs	r3, #1
 80161c0:	e7f2      	b.n	80161a8 <_printf_float+0x1a4>
 80161c2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80161c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80161c8:	4299      	cmp	r1, r3
 80161ca:	db05      	blt.n	80161d8 <_printf_float+0x1d4>
 80161cc:	6823      	ldr	r3, [r4, #0]
 80161ce:	6121      	str	r1, [r4, #16]
 80161d0:	07d8      	lsls	r0, r3, #31
 80161d2:	d5ea      	bpl.n	80161aa <_printf_float+0x1a6>
 80161d4:	1c4b      	adds	r3, r1, #1
 80161d6:	e7e7      	b.n	80161a8 <_printf_float+0x1a4>
 80161d8:	2900      	cmp	r1, #0
 80161da:	bfd4      	ite	le
 80161dc:	f1c1 0202 	rsble	r2, r1, #2
 80161e0:	2201      	movgt	r2, #1
 80161e2:	4413      	add	r3, r2
 80161e4:	e7e0      	b.n	80161a8 <_printf_float+0x1a4>
 80161e6:	6823      	ldr	r3, [r4, #0]
 80161e8:	055a      	lsls	r2, r3, #21
 80161ea:	d407      	bmi.n	80161fc <_printf_float+0x1f8>
 80161ec:	6923      	ldr	r3, [r4, #16]
 80161ee:	4642      	mov	r2, r8
 80161f0:	4631      	mov	r1, r6
 80161f2:	4628      	mov	r0, r5
 80161f4:	47b8      	blx	r7
 80161f6:	3001      	adds	r0, #1
 80161f8:	d12c      	bne.n	8016254 <_printf_float+0x250>
 80161fa:	e764      	b.n	80160c6 <_printf_float+0xc2>
 80161fc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8016200:	f240 80e0 	bls.w	80163c4 <_printf_float+0x3c0>
 8016204:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016208:	2200      	movs	r2, #0
 801620a:	2300      	movs	r3, #0
 801620c:	f7ea fc5c 	bl	8000ac8 <__aeabi_dcmpeq>
 8016210:	2800      	cmp	r0, #0
 8016212:	d034      	beq.n	801627e <_printf_float+0x27a>
 8016214:	4a37      	ldr	r2, [pc, #220]	; (80162f4 <_printf_float+0x2f0>)
 8016216:	2301      	movs	r3, #1
 8016218:	4631      	mov	r1, r6
 801621a:	4628      	mov	r0, r5
 801621c:	47b8      	blx	r7
 801621e:	3001      	adds	r0, #1
 8016220:	f43f af51 	beq.w	80160c6 <_printf_float+0xc2>
 8016224:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016228:	429a      	cmp	r2, r3
 801622a:	db02      	blt.n	8016232 <_printf_float+0x22e>
 801622c:	6823      	ldr	r3, [r4, #0]
 801622e:	07d8      	lsls	r0, r3, #31
 8016230:	d510      	bpl.n	8016254 <_printf_float+0x250>
 8016232:	ee18 3a10 	vmov	r3, s16
 8016236:	4652      	mov	r2, sl
 8016238:	4631      	mov	r1, r6
 801623a:	4628      	mov	r0, r5
 801623c:	47b8      	blx	r7
 801623e:	3001      	adds	r0, #1
 8016240:	f43f af41 	beq.w	80160c6 <_printf_float+0xc2>
 8016244:	f04f 0800 	mov.w	r8, #0
 8016248:	f104 091a 	add.w	r9, r4, #26
 801624c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801624e:	3b01      	subs	r3, #1
 8016250:	4543      	cmp	r3, r8
 8016252:	dc09      	bgt.n	8016268 <_printf_float+0x264>
 8016254:	6823      	ldr	r3, [r4, #0]
 8016256:	079b      	lsls	r3, r3, #30
 8016258:	f100 8105 	bmi.w	8016466 <_printf_float+0x462>
 801625c:	68e0      	ldr	r0, [r4, #12]
 801625e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016260:	4298      	cmp	r0, r3
 8016262:	bfb8      	it	lt
 8016264:	4618      	movlt	r0, r3
 8016266:	e730      	b.n	80160ca <_printf_float+0xc6>
 8016268:	2301      	movs	r3, #1
 801626a:	464a      	mov	r2, r9
 801626c:	4631      	mov	r1, r6
 801626e:	4628      	mov	r0, r5
 8016270:	47b8      	blx	r7
 8016272:	3001      	adds	r0, #1
 8016274:	f43f af27 	beq.w	80160c6 <_printf_float+0xc2>
 8016278:	f108 0801 	add.w	r8, r8, #1
 801627c:	e7e6      	b.n	801624c <_printf_float+0x248>
 801627e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016280:	2b00      	cmp	r3, #0
 8016282:	dc39      	bgt.n	80162f8 <_printf_float+0x2f4>
 8016284:	4a1b      	ldr	r2, [pc, #108]	; (80162f4 <_printf_float+0x2f0>)
 8016286:	2301      	movs	r3, #1
 8016288:	4631      	mov	r1, r6
 801628a:	4628      	mov	r0, r5
 801628c:	47b8      	blx	r7
 801628e:	3001      	adds	r0, #1
 8016290:	f43f af19 	beq.w	80160c6 <_printf_float+0xc2>
 8016294:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016298:	4313      	orrs	r3, r2
 801629a:	d102      	bne.n	80162a2 <_printf_float+0x29e>
 801629c:	6823      	ldr	r3, [r4, #0]
 801629e:	07d9      	lsls	r1, r3, #31
 80162a0:	d5d8      	bpl.n	8016254 <_printf_float+0x250>
 80162a2:	ee18 3a10 	vmov	r3, s16
 80162a6:	4652      	mov	r2, sl
 80162a8:	4631      	mov	r1, r6
 80162aa:	4628      	mov	r0, r5
 80162ac:	47b8      	blx	r7
 80162ae:	3001      	adds	r0, #1
 80162b0:	f43f af09 	beq.w	80160c6 <_printf_float+0xc2>
 80162b4:	f04f 0900 	mov.w	r9, #0
 80162b8:	f104 0a1a 	add.w	sl, r4, #26
 80162bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80162be:	425b      	negs	r3, r3
 80162c0:	454b      	cmp	r3, r9
 80162c2:	dc01      	bgt.n	80162c8 <_printf_float+0x2c4>
 80162c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80162c6:	e792      	b.n	80161ee <_printf_float+0x1ea>
 80162c8:	2301      	movs	r3, #1
 80162ca:	4652      	mov	r2, sl
 80162cc:	4631      	mov	r1, r6
 80162ce:	4628      	mov	r0, r5
 80162d0:	47b8      	blx	r7
 80162d2:	3001      	adds	r0, #1
 80162d4:	f43f aef7 	beq.w	80160c6 <_printf_float+0xc2>
 80162d8:	f109 0901 	add.w	r9, r9, #1
 80162dc:	e7ee      	b.n	80162bc <_printf_float+0x2b8>
 80162de:	bf00      	nop
 80162e0:	7fefffff 	.word	0x7fefffff
 80162e4:	0801c2a4 	.word	0x0801c2a4
 80162e8:	0801c2a8 	.word	0x0801c2a8
 80162ec:	0801c2b0 	.word	0x0801c2b0
 80162f0:	0801c2ac 	.word	0x0801c2ac
 80162f4:	0801c2b4 	.word	0x0801c2b4
 80162f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80162fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80162fc:	429a      	cmp	r2, r3
 80162fe:	bfa8      	it	ge
 8016300:	461a      	movge	r2, r3
 8016302:	2a00      	cmp	r2, #0
 8016304:	4691      	mov	r9, r2
 8016306:	dc37      	bgt.n	8016378 <_printf_float+0x374>
 8016308:	f04f 0b00 	mov.w	fp, #0
 801630c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016310:	f104 021a 	add.w	r2, r4, #26
 8016314:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016316:	9305      	str	r3, [sp, #20]
 8016318:	eba3 0309 	sub.w	r3, r3, r9
 801631c:	455b      	cmp	r3, fp
 801631e:	dc33      	bgt.n	8016388 <_printf_float+0x384>
 8016320:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016324:	429a      	cmp	r2, r3
 8016326:	db3b      	blt.n	80163a0 <_printf_float+0x39c>
 8016328:	6823      	ldr	r3, [r4, #0]
 801632a:	07da      	lsls	r2, r3, #31
 801632c:	d438      	bmi.n	80163a0 <_printf_float+0x39c>
 801632e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016330:	9b05      	ldr	r3, [sp, #20]
 8016332:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016334:	1ad3      	subs	r3, r2, r3
 8016336:	eba2 0901 	sub.w	r9, r2, r1
 801633a:	4599      	cmp	r9, r3
 801633c:	bfa8      	it	ge
 801633e:	4699      	movge	r9, r3
 8016340:	f1b9 0f00 	cmp.w	r9, #0
 8016344:	dc35      	bgt.n	80163b2 <_printf_float+0x3ae>
 8016346:	f04f 0800 	mov.w	r8, #0
 801634a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801634e:	f104 0a1a 	add.w	sl, r4, #26
 8016352:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016356:	1a9b      	subs	r3, r3, r2
 8016358:	eba3 0309 	sub.w	r3, r3, r9
 801635c:	4543      	cmp	r3, r8
 801635e:	f77f af79 	ble.w	8016254 <_printf_float+0x250>
 8016362:	2301      	movs	r3, #1
 8016364:	4652      	mov	r2, sl
 8016366:	4631      	mov	r1, r6
 8016368:	4628      	mov	r0, r5
 801636a:	47b8      	blx	r7
 801636c:	3001      	adds	r0, #1
 801636e:	f43f aeaa 	beq.w	80160c6 <_printf_float+0xc2>
 8016372:	f108 0801 	add.w	r8, r8, #1
 8016376:	e7ec      	b.n	8016352 <_printf_float+0x34e>
 8016378:	4613      	mov	r3, r2
 801637a:	4631      	mov	r1, r6
 801637c:	4642      	mov	r2, r8
 801637e:	4628      	mov	r0, r5
 8016380:	47b8      	blx	r7
 8016382:	3001      	adds	r0, #1
 8016384:	d1c0      	bne.n	8016308 <_printf_float+0x304>
 8016386:	e69e      	b.n	80160c6 <_printf_float+0xc2>
 8016388:	2301      	movs	r3, #1
 801638a:	4631      	mov	r1, r6
 801638c:	4628      	mov	r0, r5
 801638e:	9205      	str	r2, [sp, #20]
 8016390:	47b8      	blx	r7
 8016392:	3001      	adds	r0, #1
 8016394:	f43f ae97 	beq.w	80160c6 <_printf_float+0xc2>
 8016398:	9a05      	ldr	r2, [sp, #20]
 801639a:	f10b 0b01 	add.w	fp, fp, #1
 801639e:	e7b9      	b.n	8016314 <_printf_float+0x310>
 80163a0:	ee18 3a10 	vmov	r3, s16
 80163a4:	4652      	mov	r2, sl
 80163a6:	4631      	mov	r1, r6
 80163a8:	4628      	mov	r0, r5
 80163aa:	47b8      	blx	r7
 80163ac:	3001      	adds	r0, #1
 80163ae:	d1be      	bne.n	801632e <_printf_float+0x32a>
 80163b0:	e689      	b.n	80160c6 <_printf_float+0xc2>
 80163b2:	9a05      	ldr	r2, [sp, #20]
 80163b4:	464b      	mov	r3, r9
 80163b6:	4442      	add	r2, r8
 80163b8:	4631      	mov	r1, r6
 80163ba:	4628      	mov	r0, r5
 80163bc:	47b8      	blx	r7
 80163be:	3001      	adds	r0, #1
 80163c0:	d1c1      	bne.n	8016346 <_printf_float+0x342>
 80163c2:	e680      	b.n	80160c6 <_printf_float+0xc2>
 80163c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80163c6:	2a01      	cmp	r2, #1
 80163c8:	dc01      	bgt.n	80163ce <_printf_float+0x3ca>
 80163ca:	07db      	lsls	r3, r3, #31
 80163cc:	d538      	bpl.n	8016440 <_printf_float+0x43c>
 80163ce:	2301      	movs	r3, #1
 80163d0:	4642      	mov	r2, r8
 80163d2:	4631      	mov	r1, r6
 80163d4:	4628      	mov	r0, r5
 80163d6:	47b8      	blx	r7
 80163d8:	3001      	adds	r0, #1
 80163da:	f43f ae74 	beq.w	80160c6 <_printf_float+0xc2>
 80163de:	ee18 3a10 	vmov	r3, s16
 80163e2:	4652      	mov	r2, sl
 80163e4:	4631      	mov	r1, r6
 80163e6:	4628      	mov	r0, r5
 80163e8:	47b8      	blx	r7
 80163ea:	3001      	adds	r0, #1
 80163ec:	f43f ae6b 	beq.w	80160c6 <_printf_float+0xc2>
 80163f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80163f4:	2200      	movs	r2, #0
 80163f6:	2300      	movs	r3, #0
 80163f8:	f7ea fb66 	bl	8000ac8 <__aeabi_dcmpeq>
 80163fc:	b9d8      	cbnz	r0, 8016436 <_printf_float+0x432>
 80163fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016400:	f108 0201 	add.w	r2, r8, #1
 8016404:	3b01      	subs	r3, #1
 8016406:	4631      	mov	r1, r6
 8016408:	4628      	mov	r0, r5
 801640a:	47b8      	blx	r7
 801640c:	3001      	adds	r0, #1
 801640e:	d10e      	bne.n	801642e <_printf_float+0x42a>
 8016410:	e659      	b.n	80160c6 <_printf_float+0xc2>
 8016412:	2301      	movs	r3, #1
 8016414:	4652      	mov	r2, sl
 8016416:	4631      	mov	r1, r6
 8016418:	4628      	mov	r0, r5
 801641a:	47b8      	blx	r7
 801641c:	3001      	adds	r0, #1
 801641e:	f43f ae52 	beq.w	80160c6 <_printf_float+0xc2>
 8016422:	f108 0801 	add.w	r8, r8, #1
 8016426:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016428:	3b01      	subs	r3, #1
 801642a:	4543      	cmp	r3, r8
 801642c:	dcf1      	bgt.n	8016412 <_printf_float+0x40e>
 801642e:	464b      	mov	r3, r9
 8016430:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8016434:	e6dc      	b.n	80161f0 <_printf_float+0x1ec>
 8016436:	f04f 0800 	mov.w	r8, #0
 801643a:	f104 0a1a 	add.w	sl, r4, #26
 801643e:	e7f2      	b.n	8016426 <_printf_float+0x422>
 8016440:	2301      	movs	r3, #1
 8016442:	4642      	mov	r2, r8
 8016444:	e7df      	b.n	8016406 <_printf_float+0x402>
 8016446:	2301      	movs	r3, #1
 8016448:	464a      	mov	r2, r9
 801644a:	4631      	mov	r1, r6
 801644c:	4628      	mov	r0, r5
 801644e:	47b8      	blx	r7
 8016450:	3001      	adds	r0, #1
 8016452:	f43f ae38 	beq.w	80160c6 <_printf_float+0xc2>
 8016456:	f108 0801 	add.w	r8, r8, #1
 801645a:	68e3      	ldr	r3, [r4, #12]
 801645c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801645e:	1a5b      	subs	r3, r3, r1
 8016460:	4543      	cmp	r3, r8
 8016462:	dcf0      	bgt.n	8016446 <_printf_float+0x442>
 8016464:	e6fa      	b.n	801625c <_printf_float+0x258>
 8016466:	f04f 0800 	mov.w	r8, #0
 801646a:	f104 0919 	add.w	r9, r4, #25
 801646e:	e7f4      	b.n	801645a <_printf_float+0x456>

08016470 <_printf_common>:
 8016470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016474:	4616      	mov	r6, r2
 8016476:	4699      	mov	r9, r3
 8016478:	688a      	ldr	r2, [r1, #8]
 801647a:	690b      	ldr	r3, [r1, #16]
 801647c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016480:	4293      	cmp	r3, r2
 8016482:	bfb8      	it	lt
 8016484:	4613      	movlt	r3, r2
 8016486:	6033      	str	r3, [r6, #0]
 8016488:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801648c:	4607      	mov	r7, r0
 801648e:	460c      	mov	r4, r1
 8016490:	b10a      	cbz	r2, 8016496 <_printf_common+0x26>
 8016492:	3301      	adds	r3, #1
 8016494:	6033      	str	r3, [r6, #0]
 8016496:	6823      	ldr	r3, [r4, #0]
 8016498:	0699      	lsls	r1, r3, #26
 801649a:	bf42      	ittt	mi
 801649c:	6833      	ldrmi	r3, [r6, #0]
 801649e:	3302      	addmi	r3, #2
 80164a0:	6033      	strmi	r3, [r6, #0]
 80164a2:	6825      	ldr	r5, [r4, #0]
 80164a4:	f015 0506 	ands.w	r5, r5, #6
 80164a8:	d106      	bne.n	80164b8 <_printf_common+0x48>
 80164aa:	f104 0a19 	add.w	sl, r4, #25
 80164ae:	68e3      	ldr	r3, [r4, #12]
 80164b0:	6832      	ldr	r2, [r6, #0]
 80164b2:	1a9b      	subs	r3, r3, r2
 80164b4:	42ab      	cmp	r3, r5
 80164b6:	dc26      	bgt.n	8016506 <_printf_common+0x96>
 80164b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80164bc:	1e13      	subs	r3, r2, #0
 80164be:	6822      	ldr	r2, [r4, #0]
 80164c0:	bf18      	it	ne
 80164c2:	2301      	movne	r3, #1
 80164c4:	0692      	lsls	r2, r2, #26
 80164c6:	d42b      	bmi.n	8016520 <_printf_common+0xb0>
 80164c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80164cc:	4649      	mov	r1, r9
 80164ce:	4638      	mov	r0, r7
 80164d0:	47c0      	blx	r8
 80164d2:	3001      	adds	r0, #1
 80164d4:	d01e      	beq.n	8016514 <_printf_common+0xa4>
 80164d6:	6823      	ldr	r3, [r4, #0]
 80164d8:	68e5      	ldr	r5, [r4, #12]
 80164da:	6832      	ldr	r2, [r6, #0]
 80164dc:	f003 0306 	and.w	r3, r3, #6
 80164e0:	2b04      	cmp	r3, #4
 80164e2:	bf08      	it	eq
 80164e4:	1aad      	subeq	r5, r5, r2
 80164e6:	68a3      	ldr	r3, [r4, #8]
 80164e8:	6922      	ldr	r2, [r4, #16]
 80164ea:	bf0c      	ite	eq
 80164ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80164f0:	2500      	movne	r5, #0
 80164f2:	4293      	cmp	r3, r2
 80164f4:	bfc4      	itt	gt
 80164f6:	1a9b      	subgt	r3, r3, r2
 80164f8:	18ed      	addgt	r5, r5, r3
 80164fa:	2600      	movs	r6, #0
 80164fc:	341a      	adds	r4, #26
 80164fe:	42b5      	cmp	r5, r6
 8016500:	d11a      	bne.n	8016538 <_printf_common+0xc8>
 8016502:	2000      	movs	r0, #0
 8016504:	e008      	b.n	8016518 <_printf_common+0xa8>
 8016506:	2301      	movs	r3, #1
 8016508:	4652      	mov	r2, sl
 801650a:	4649      	mov	r1, r9
 801650c:	4638      	mov	r0, r7
 801650e:	47c0      	blx	r8
 8016510:	3001      	adds	r0, #1
 8016512:	d103      	bne.n	801651c <_printf_common+0xac>
 8016514:	f04f 30ff 	mov.w	r0, #4294967295
 8016518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801651c:	3501      	adds	r5, #1
 801651e:	e7c6      	b.n	80164ae <_printf_common+0x3e>
 8016520:	18e1      	adds	r1, r4, r3
 8016522:	1c5a      	adds	r2, r3, #1
 8016524:	2030      	movs	r0, #48	; 0x30
 8016526:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801652a:	4422      	add	r2, r4
 801652c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016530:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016534:	3302      	adds	r3, #2
 8016536:	e7c7      	b.n	80164c8 <_printf_common+0x58>
 8016538:	2301      	movs	r3, #1
 801653a:	4622      	mov	r2, r4
 801653c:	4649      	mov	r1, r9
 801653e:	4638      	mov	r0, r7
 8016540:	47c0      	blx	r8
 8016542:	3001      	adds	r0, #1
 8016544:	d0e6      	beq.n	8016514 <_printf_common+0xa4>
 8016546:	3601      	adds	r6, #1
 8016548:	e7d9      	b.n	80164fe <_printf_common+0x8e>
	...

0801654c <_printf_i>:
 801654c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016550:	460c      	mov	r4, r1
 8016552:	4691      	mov	r9, r2
 8016554:	7e27      	ldrb	r7, [r4, #24]
 8016556:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016558:	2f78      	cmp	r7, #120	; 0x78
 801655a:	4680      	mov	r8, r0
 801655c:	469a      	mov	sl, r3
 801655e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016562:	d807      	bhi.n	8016574 <_printf_i+0x28>
 8016564:	2f62      	cmp	r7, #98	; 0x62
 8016566:	d80a      	bhi.n	801657e <_printf_i+0x32>
 8016568:	2f00      	cmp	r7, #0
 801656a:	f000 80d8 	beq.w	801671e <_printf_i+0x1d2>
 801656e:	2f58      	cmp	r7, #88	; 0x58
 8016570:	f000 80a3 	beq.w	80166ba <_printf_i+0x16e>
 8016574:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016578:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801657c:	e03a      	b.n	80165f4 <_printf_i+0xa8>
 801657e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8016582:	2b15      	cmp	r3, #21
 8016584:	d8f6      	bhi.n	8016574 <_printf_i+0x28>
 8016586:	a001      	add	r0, pc, #4	; (adr r0, 801658c <_printf_i+0x40>)
 8016588:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801658c:	080165e5 	.word	0x080165e5
 8016590:	080165f9 	.word	0x080165f9
 8016594:	08016575 	.word	0x08016575
 8016598:	08016575 	.word	0x08016575
 801659c:	08016575 	.word	0x08016575
 80165a0:	08016575 	.word	0x08016575
 80165a4:	080165f9 	.word	0x080165f9
 80165a8:	08016575 	.word	0x08016575
 80165ac:	08016575 	.word	0x08016575
 80165b0:	08016575 	.word	0x08016575
 80165b4:	08016575 	.word	0x08016575
 80165b8:	08016705 	.word	0x08016705
 80165bc:	08016629 	.word	0x08016629
 80165c0:	080166e7 	.word	0x080166e7
 80165c4:	08016575 	.word	0x08016575
 80165c8:	08016575 	.word	0x08016575
 80165cc:	08016727 	.word	0x08016727
 80165d0:	08016575 	.word	0x08016575
 80165d4:	08016629 	.word	0x08016629
 80165d8:	08016575 	.word	0x08016575
 80165dc:	08016575 	.word	0x08016575
 80165e0:	080166ef 	.word	0x080166ef
 80165e4:	680b      	ldr	r3, [r1, #0]
 80165e6:	1d1a      	adds	r2, r3, #4
 80165e8:	681b      	ldr	r3, [r3, #0]
 80165ea:	600a      	str	r2, [r1, #0]
 80165ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80165f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80165f4:	2301      	movs	r3, #1
 80165f6:	e0a3      	b.n	8016740 <_printf_i+0x1f4>
 80165f8:	6825      	ldr	r5, [r4, #0]
 80165fa:	6808      	ldr	r0, [r1, #0]
 80165fc:	062e      	lsls	r6, r5, #24
 80165fe:	f100 0304 	add.w	r3, r0, #4
 8016602:	d50a      	bpl.n	801661a <_printf_i+0xce>
 8016604:	6805      	ldr	r5, [r0, #0]
 8016606:	600b      	str	r3, [r1, #0]
 8016608:	2d00      	cmp	r5, #0
 801660a:	da03      	bge.n	8016614 <_printf_i+0xc8>
 801660c:	232d      	movs	r3, #45	; 0x2d
 801660e:	426d      	negs	r5, r5
 8016610:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016614:	485e      	ldr	r0, [pc, #376]	; (8016790 <_printf_i+0x244>)
 8016616:	230a      	movs	r3, #10
 8016618:	e019      	b.n	801664e <_printf_i+0x102>
 801661a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801661e:	6805      	ldr	r5, [r0, #0]
 8016620:	600b      	str	r3, [r1, #0]
 8016622:	bf18      	it	ne
 8016624:	b22d      	sxthne	r5, r5
 8016626:	e7ef      	b.n	8016608 <_printf_i+0xbc>
 8016628:	680b      	ldr	r3, [r1, #0]
 801662a:	6825      	ldr	r5, [r4, #0]
 801662c:	1d18      	adds	r0, r3, #4
 801662e:	6008      	str	r0, [r1, #0]
 8016630:	0628      	lsls	r0, r5, #24
 8016632:	d501      	bpl.n	8016638 <_printf_i+0xec>
 8016634:	681d      	ldr	r5, [r3, #0]
 8016636:	e002      	b.n	801663e <_printf_i+0xf2>
 8016638:	0669      	lsls	r1, r5, #25
 801663a:	d5fb      	bpl.n	8016634 <_printf_i+0xe8>
 801663c:	881d      	ldrh	r5, [r3, #0]
 801663e:	4854      	ldr	r0, [pc, #336]	; (8016790 <_printf_i+0x244>)
 8016640:	2f6f      	cmp	r7, #111	; 0x6f
 8016642:	bf0c      	ite	eq
 8016644:	2308      	moveq	r3, #8
 8016646:	230a      	movne	r3, #10
 8016648:	2100      	movs	r1, #0
 801664a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801664e:	6866      	ldr	r6, [r4, #4]
 8016650:	60a6      	str	r6, [r4, #8]
 8016652:	2e00      	cmp	r6, #0
 8016654:	bfa2      	ittt	ge
 8016656:	6821      	ldrge	r1, [r4, #0]
 8016658:	f021 0104 	bicge.w	r1, r1, #4
 801665c:	6021      	strge	r1, [r4, #0]
 801665e:	b90d      	cbnz	r5, 8016664 <_printf_i+0x118>
 8016660:	2e00      	cmp	r6, #0
 8016662:	d04d      	beq.n	8016700 <_printf_i+0x1b4>
 8016664:	4616      	mov	r6, r2
 8016666:	fbb5 f1f3 	udiv	r1, r5, r3
 801666a:	fb03 5711 	mls	r7, r3, r1, r5
 801666e:	5dc7      	ldrb	r7, [r0, r7]
 8016670:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016674:	462f      	mov	r7, r5
 8016676:	42bb      	cmp	r3, r7
 8016678:	460d      	mov	r5, r1
 801667a:	d9f4      	bls.n	8016666 <_printf_i+0x11a>
 801667c:	2b08      	cmp	r3, #8
 801667e:	d10b      	bne.n	8016698 <_printf_i+0x14c>
 8016680:	6823      	ldr	r3, [r4, #0]
 8016682:	07df      	lsls	r7, r3, #31
 8016684:	d508      	bpl.n	8016698 <_printf_i+0x14c>
 8016686:	6923      	ldr	r3, [r4, #16]
 8016688:	6861      	ldr	r1, [r4, #4]
 801668a:	4299      	cmp	r1, r3
 801668c:	bfde      	ittt	le
 801668e:	2330      	movle	r3, #48	; 0x30
 8016690:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016694:	f106 36ff 	addle.w	r6, r6, #4294967295
 8016698:	1b92      	subs	r2, r2, r6
 801669a:	6122      	str	r2, [r4, #16]
 801669c:	f8cd a000 	str.w	sl, [sp]
 80166a0:	464b      	mov	r3, r9
 80166a2:	aa03      	add	r2, sp, #12
 80166a4:	4621      	mov	r1, r4
 80166a6:	4640      	mov	r0, r8
 80166a8:	f7ff fee2 	bl	8016470 <_printf_common>
 80166ac:	3001      	adds	r0, #1
 80166ae:	d14c      	bne.n	801674a <_printf_i+0x1fe>
 80166b0:	f04f 30ff 	mov.w	r0, #4294967295
 80166b4:	b004      	add	sp, #16
 80166b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80166ba:	4835      	ldr	r0, [pc, #212]	; (8016790 <_printf_i+0x244>)
 80166bc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80166c0:	6823      	ldr	r3, [r4, #0]
 80166c2:	680e      	ldr	r6, [r1, #0]
 80166c4:	061f      	lsls	r7, r3, #24
 80166c6:	f856 5b04 	ldr.w	r5, [r6], #4
 80166ca:	600e      	str	r6, [r1, #0]
 80166cc:	d514      	bpl.n	80166f8 <_printf_i+0x1ac>
 80166ce:	07d9      	lsls	r1, r3, #31
 80166d0:	bf44      	itt	mi
 80166d2:	f043 0320 	orrmi.w	r3, r3, #32
 80166d6:	6023      	strmi	r3, [r4, #0]
 80166d8:	b91d      	cbnz	r5, 80166e2 <_printf_i+0x196>
 80166da:	6823      	ldr	r3, [r4, #0]
 80166dc:	f023 0320 	bic.w	r3, r3, #32
 80166e0:	6023      	str	r3, [r4, #0]
 80166e2:	2310      	movs	r3, #16
 80166e4:	e7b0      	b.n	8016648 <_printf_i+0xfc>
 80166e6:	6823      	ldr	r3, [r4, #0]
 80166e8:	f043 0320 	orr.w	r3, r3, #32
 80166ec:	6023      	str	r3, [r4, #0]
 80166ee:	2378      	movs	r3, #120	; 0x78
 80166f0:	4828      	ldr	r0, [pc, #160]	; (8016794 <_printf_i+0x248>)
 80166f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80166f6:	e7e3      	b.n	80166c0 <_printf_i+0x174>
 80166f8:	065e      	lsls	r6, r3, #25
 80166fa:	bf48      	it	mi
 80166fc:	b2ad      	uxthmi	r5, r5
 80166fe:	e7e6      	b.n	80166ce <_printf_i+0x182>
 8016700:	4616      	mov	r6, r2
 8016702:	e7bb      	b.n	801667c <_printf_i+0x130>
 8016704:	680b      	ldr	r3, [r1, #0]
 8016706:	6826      	ldr	r6, [r4, #0]
 8016708:	6960      	ldr	r0, [r4, #20]
 801670a:	1d1d      	adds	r5, r3, #4
 801670c:	600d      	str	r5, [r1, #0]
 801670e:	0635      	lsls	r5, r6, #24
 8016710:	681b      	ldr	r3, [r3, #0]
 8016712:	d501      	bpl.n	8016718 <_printf_i+0x1cc>
 8016714:	6018      	str	r0, [r3, #0]
 8016716:	e002      	b.n	801671e <_printf_i+0x1d2>
 8016718:	0671      	lsls	r1, r6, #25
 801671a:	d5fb      	bpl.n	8016714 <_printf_i+0x1c8>
 801671c:	8018      	strh	r0, [r3, #0]
 801671e:	2300      	movs	r3, #0
 8016720:	6123      	str	r3, [r4, #16]
 8016722:	4616      	mov	r6, r2
 8016724:	e7ba      	b.n	801669c <_printf_i+0x150>
 8016726:	680b      	ldr	r3, [r1, #0]
 8016728:	1d1a      	adds	r2, r3, #4
 801672a:	600a      	str	r2, [r1, #0]
 801672c:	681e      	ldr	r6, [r3, #0]
 801672e:	6862      	ldr	r2, [r4, #4]
 8016730:	2100      	movs	r1, #0
 8016732:	4630      	mov	r0, r6
 8016734:	f7e9 fd54 	bl	80001e0 <memchr>
 8016738:	b108      	cbz	r0, 801673e <_printf_i+0x1f2>
 801673a:	1b80      	subs	r0, r0, r6
 801673c:	6060      	str	r0, [r4, #4]
 801673e:	6863      	ldr	r3, [r4, #4]
 8016740:	6123      	str	r3, [r4, #16]
 8016742:	2300      	movs	r3, #0
 8016744:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016748:	e7a8      	b.n	801669c <_printf_i+0x150>
 801674a:	6923      	ldr	r3, [r4, #16]
 801674c:	4632      	mov	r2, r6
 801674e:	4649      	mov	r1, r9
 8016750:	4640      	mov	r0, r8
 8016752:	47d0      	blx	sl
 8016754:	3001      	adds	r0, #1
 8016756:	d0ab      	beq.n	80166b0 <_printf_i+0x164>
 8016758:	6823      	ldr	r3, [r4, #0]
 801675a:	079b      	lsls	r3, r3, #30
 801675c:	d413      	bmi.n	8016786 <_printf_i+0x23a>
 801675e:	68e0      	ldr	r0, [r4, #12]
 8016760:	9b03      	ldr	r3, [sp, #12]
 8016762:	4298      	cmp	r0, r3
 8016764:	bfb8      	it	lt
 8016766:	4618      	movlt	r0, r3
 8016768:	e7a4      	b.n	80166b4 <_printf_i+0x168>
 801676a:	2301      	movs	r3, #1
 801676c:	4632      	mov	r2, r6
 801676e:	4649      	mov	r1, r9
 8016770:	4640      	mov	r0, r8
 8016772:	47d0      	blx	sl
 8016774:	3001      	adds	r0, #1
 8016776:	d09b      	beq.n	80166b0 <_printf_i+0x164>
 8016778:	3501      	adds	r5, #1
 801677a:	68e3      	ldr	r3, [r4, #12]
 801677c:	9903      	ldr	r1, [sp, #12]
 801677e:	1a5b      	subs	r3, r3, r1
 8016780:	42ab      	cmp	r3, r5
 8016782:	dcf2      	bgt.n	801676a <_printf_i+0x21e>
 8016784:	e7eb      	b.n	801675e <_printf_i+0x212>
 8016786:	2500      	movs	r5, #0
 8016788:	f104 0619 	add.w	r6, r4, #25
 801678c:	e7f5      	b.n	801677a <_printf_i+0x22e>
 801678e:	bf00      	nop
 8016790:	0801c2b6 	.word	0x0801c2b6
 8016794:	0801c2c7 	.word	0x0801c2c7

08016798 <_scanf_float>:
 8016798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801679c:	b087      	sub	sp, #28
 801679e:	4617      	mov	r7, r2
 80167a0:	9303      	str	r3, [sp, #12]
 80167a2:	688b      	ldr	r3, [r1, #8]
 80167a4:	1e5a      	subs	r2, r3, #1
 80167a6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80167aa:	bf83      	ittte	hi
 80167ac:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80167b0:	195b      	addhi	r3, r3, r5
 80167b2:	9302      	strhi	r3, [sp, #8]
 80167b4:	2300      	movls	r3, #0
 80167b6:	bf86      	itte	hi
 80167b8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80167bc:	608b      	strhi	r3, [r1, #8]
 80167be:	9302      	strls	r3, [sp, #8]
 80167c0:	680b      	ldr	r3, [r1, #0]
 80167c2:	468b      	mov	fp, r1
 80167c4:	2500      	movs	r5, #0
 80167c6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80167ca:	f84b 3b1c 	str.w	r3, [fp], #28
 80167ce:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80167d2:	4680      	mov	r8, r0
 80167d4:	460c      	mov	r4, r1
 80167d6:	465e      	mov	r6, fp
 80167d8:	46aa      	mov	sl, r5
 80167da:	46a9      	mov	r9, r5
 80167dc:	9501      	str	r5, [sp, #4]
 80167de:	68a2      	ldr	r2, [r4, #8]
 80167e0:	b152      	cbz	r2, 80167f8 <_scanf_float+0x60>
 80167e2:	683b      	ldr	r3, [r7, #0]
 80167e4:	781b      	ldrb	r3, [r3, #0]
 80167e6:	2b4e      	cmp	r3, #78	; 0x4e
 80167e8:	d864      	bhi.n	80168b4 <_scanf_float+0x11c>
 80167ea:	2b40      	cmp	r3, #64	; 0x40
 80167ec:	d83c      	bhi.n	8016868 <_scanf_float+0xd0>
 80167ee:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80167f2:	b2c8      	uxtb	r0, r1
 80167f4:	280e      	cmp	r0, #14
 80167f6:	d93a      	bls.n	801686e <_scanf_float+0xd6>
 80167f8:	f1b9 0f00 	cmp.w	r9, #0
 80167fc:	d003      	beq.n	8016806 <_scanf_float+0x6e>
 80167fe:	6823      	ldr	r3, [r4, #0]
 8016800:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016804:	6023      	str	r3, [r4, #0]
 8016806:	f10a 3aff 	add.w	sl, sl, #4294967295
 801680a:	f1ba 0f01 	cmp.w	sl, #1
 801680e:	f200 8113 	bhi.w	8016a38 <_scanf_float+0x2a0>
 8016812:	455e      	cmp	r6, fp
 8016814:	f200 8105 	bhi.w	8016a22 <_scanf_float+0x28a>
 8016818:	2501      	movs	r5, #1
 801681a:	4628      	mov	r0, r5
 801681c:	b007      	add	sp, #28
 801681e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016822:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8016826:	2a0d      	cmp	r2, #13
 8016828:	d8e6      	bhi.n	80167f8 <_scanf_float+0x60>
 801682a:	a101      	add	r1, pc, #4	; (adr r1, 8016830 <_scanf_float+0x98>)
 801682c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8016830:	0801696f 	.word	0x0801696f
 8016834:	080167f9 	.word	0x080167f9
 8016838:	080167f9 	.word	0x080167f9
 801683c:	080167f9 	.word	0x080167f9
 8016840:	080169cf 	.word	0x080169cf
 8016844:	080169a7 	.word	0x080169a7
 8016848:	080167f9 	.word	0x080167f9
 801684c:	080167f9 	.word	0x080167f9
 8016850:	0801697d 	.word	0x0801697d
 8016854:	080167f9 	.word	0x080167f9
 8016858:	080167f9 	.word	0x080167f9
 801685c:	080167f9 	.word	0x080167f9
 8016860:	080167f9 	.word	0x080167f9
 8016864:	08016935 	.word	0x08016935
 8016868:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801686c:	e7db      	b.n	8016826 <_scanf_float+0x8e>
 801686e:	290e      	cmp	r1, #14
 8016870:	d8c2      	bhi.n	80167f8 <_scanf_float+0x60>
 8016872:	a001      	add	r0, pc, #4	; (adr r0, 8016878 <_scanf_float+0xe0>)
 8016874:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8016878:	08016927 	.word	0x08016927
 801687c:	080167f9 	.word	0x080167f9
 8016880:	08016927 	.word	0x08016927
 8016884:	080169bb 	.word	0x080169bb
 8016888:	080167f9 	.word	0x080167f9
 801688c:	080168d5 	.word	0x080168d5
 8016890:	08016911 	.word	0x08016911
 8016894:	08016911 	.word	0x08016911
 8016898:	08016911 	.word	0x08016911
 801689c:	08016911 	.word	0x08016911
 80168a0:	08016911 	.word	0x08016911
 80168a4:	08016911 	.word	0x08016911
 80168a8:	08016911 	.word	0x08016911
 80168ac:	08016911 	.word	0x08016911
 80168b0:	08016911 	.word	0x08016911
 80168b4:	2b6e      	cmp	r3, #110	; 0x6e
 80168b6:	d809      	bhi.n	80168cc <_scanf_float+0x134>
 80168b8:	2b60      	cmp	r3, #96	; 0x60
 80168ba:	d8b2      	bhi.n	8016822 <_scanf_float+0x8a>
 80168bc:	2b54      	cmp	r3, #84	; 0x54
 80168be:	d077      	beq.n	80169b0 <_scanf_float+0x218>
 80168c0:	2b59      	cmp	r3, #89	; 0x59
 80168c2:	d199      	bne.n	80167f8 <_scanf_float+0x60>
 80168c4:	2d07      	cmp	r5, #7
 80168c6:	d197      	bne.n	80167f8 <_scanf_float+0x60>
 80168c8:	2508      	movs	r5, #8
 80168ca:	e029      	b.n	8016920 <_scanf_float+0x188>
 80168cc:	2b74      	cmp	r3, #116	; 0x74
 80168ce:	d06f      	beq.n	80169b0 <_scanf_float+0x218>
 80168d0:	2b79      	cmp	r3, #121	; 0x79
 80168d2:	e7f6      	b.n	80168c2 <_scanf_float+0x12a>
 80168d4:	6821      	ldr	r1, [r4, #0]
 80168d6:	05c8      	lsls	r0, r1, #23
 80168d8:	d51a      	bpl.n	8016910 <_scanf_float+0x178>
 80168da:	9b02      	ldr	r3, [sp, #8]
 80168dc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80168e0:	6021      	str	r1, [r4, #0]
 80168e2:	f109 0901 	add.w	r9, r9, #1
 80168e6:	b11b      	cbz	r3, 80168f0 <_scanf_float+0x158>
 80168e8:	3b01      	subs	r3, #1
 80168ea:	3201      	adds	r2, #1
 80168ec:	9302      	str	r3, [sp, #8]
 80168ee:	60a2      	str	r2, [r4, #8]
 80168f0:	68a3      	ldr	r3, [r4, #8]
 80168f2:	3b01      	subs	r3, #1
 80168f4:	60a3      	str	r3, [r4, #8]
 80168f6:	6923      	ldr	r3, [r4, #16]
 80168f8:	3301      	adds	r3, #1
 80168fa:	6123      	str	r3, [r4, #16]
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	3b01      	subs	r3, #1
 8016900:	2b00      	cmp	r3, #0
 8016902:	607b      	str	r3, [r7, #4]
 8016904:	f340 8084 	ble.w	8016a10 <_scanf_float+0x278>
 8016908:	683b      	ldr	r3, [r7, #0]
 801690a:	3301      	adds	r3, #1
 801690c:	603b      	str	r3, [r7, #0]
 801690e:	e766      	b.n	80167de <_scanf_float+0x46>
 8016910:	eb1a 0f05 	cmn.w	sl, r5
 8016914:	f47f af70 	bne.w	80167f8 <_scanf_float+0x60>
 8016918:	6822      	ldr	r2, [r4, #0]
 801691a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801691e:	6022      	str	r2, [r4, #0]
 8016920:	f806 3b01 	strb.w	r3, [r6], #1
 8016924:	e7e4      	b.n	80168f0 <_scanf_float+0x158>
 8016926:	6822      	ldr	r2, [r4, #0]
 8016928:	0610      	lsls	r0, r2, #24
 801692a:	f57f af65 	bpl.w	80167f8 <_scanf_float+0x60>
 801692e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016932:	e7f4      	b.n	801691e <_scanf_float+0x186>
 8016934:	f1ba 0f00 	cmp.w	sl, #0
 8016938:	d10e      	bne.n	8016958 <_scanf_float+0x1c0>
 801693a:	f1b9 0f00 	cmp.w	r9, #0
 801693e:	d10e      	bne.n	801695e <_scanf_float+0x1c6>
 8016940:	6822      	ldr	r2, [r4, #0]
 8016942:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8016946:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801694a:	d108      	bne.n	801695e <_scanf_float+0x1c6>
 801694c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016950:	6022      	str	r2, [r4, #0]
 8016952:	f04f 0a01 	mov.w	sl, #1
 8016956:	e7e3      	b.n	8016920 <_scanf_float+0x188>
 8016958:	f1ba 0f02 	cmp.w	sl, #2
 801695c:	d055      	beq.n	8016a0a <_scanf_float+0x272>
 801695e:	2d01      	cmp	r5, #1
 8016960:	d002      	beq.n	8016968 <_scanf_float+0x1d0>
 8016962:	2d04      	cmp	r5, #4
 8016964:	f47f af48 	bne.w	80167f8 <_scanf_float+0x60>
 8016968:	3501      	adds	r5, #1
 801696a:	b2ed      	uxtb	r5, r5
 801696c:	e7d8      	b.n	8016920 <_scanf_float+0x188>
 801696e:	f1ba 0f01 	cmp.w	sl, #1
 8016972:	f47f af41 	bne.w	80167f8 <_scanf_float+0x60>
 8016976:	f04f 0a02 	mov.w	sl, #2
 801697a:	e7d1      	b.n	8016920 <_scanf_float+0x188>
 801697c:	b97d      	cbnz	r5, 801699e <_scanf_float+0x206>
 801697e:	f1b9 0f00 	cmp.w	r9, #0
 8016982:	f47f af3c 	bne.w	80167fe <_scanf_float+0x66>
 8016986:	6822      	ldr	r2, [r4, #0]
 8016988:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801698c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8016990:	f47f af39 	bne.w	8016806 <_scanf_float+0x6e>
 8016994:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016998:	6022      	str	r2, [r4, #0]
 801699a:	2501      	movs	r5, #1
 801699c:	e7c0      	b.n	8016920 <_scanf_float+0x188>
 801699e:	2d03      	cmp	r5, #3
 80169a0:	d0e2      	beq.n	8016968 <_scanf_float+0x1d0>
 80169a2:	2d05      	cmp	r5, #5
 80169a4:	e7de      	b.n	8016964 <_scanf_float+0x1cc>
 80169a6:	2d02      	cmp	r5, #2
 80169a8:	f47f af26 	bne.w	80167f8 <_scanf_float+0x60>
 80169ac:	2503      	movs	r5, #3
 80169ae:	e7b7      	b.n	8016920 <_scanf_float+0x188>
 80169b0:	2d06      	cmp	r5, #6
 80169b2:	f47f af21 	bne.w	80167f8 <_scanf_float+0x60>
 80169b6:	2507      	movs	r5, #7
 80169b8:	e7b2      	b.n	8016920 <_scanf_float+0x188>
 80169ba:	6822      	ldr	r2, [r4, #0]
 80169bc:	0591      	lsls	r1, r2, #22
 80169be:	f57f af1b 	bpl.w	80167f8 <_scanf_float+0x60>
 80169c2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80169c6:	6022      	str	r2, [r4, #0]
 80169c8:	f8cd 9004 	str.w	r9, [sp, #4]
 80169cc:	e7a8      	b.n	8016920 <_scanf_float+0x188>
 80169ce:	6822      	ldr	r2, [r4, #0]
 80169d0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80169d4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80169d8:	d006      	beq.n	80169e8 <_scanf_float+0x250>
 80169da:	0550      	lsls	r0, r2, #21
 80169dc:	f57f af0c 	bpl.w	80167f8 <_scanf_float+0x60>
 80169e0:	f1b9 0f00 	cmp.w	r9, #0
 80169e4:	f43f af0f 	beq.w	8016806 <_scanf_float+0x6e>
 80169e8:	0591      	lsls	r1, r2, #22
 80169ea:	bf58      	it	pl
 80169ec:	9901      	ldrpl	r1, [sp, #4]
 80169ee:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80169f2:	bf58      	it	pl
 80169f4:	eba9 0101 	subpl.w	r1, r9, r1
 80169f8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80169fc:	bf58      	it	pl
 80169fe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8016a02:	6022      	str	r2, [r4, #0]
 8016a04:	f04f 0900 	mov.w	r9, #0
 8016a08:	e78a      	b.n	8016920 <_scanf_float+0x188>
 8016a0a:	f04f 0a03 	mov.w	sl, #3
 8016a0e:	e787      	b.n	8016920 <_scanf_float+0x188>
 8016a10:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016a14:	4639      	mov	r1, r7
 8016a16:	4640      	mov	r0, r8
 8016a18:	4798      	blx	r3
 8016a1a:	2800      	cmp	r0, #0
 8016a1c:	f43f aedf 	beq.w	80167de <_scanf_float+0x46>
 8016a20:	e6ea      	b.n	80167f8 <_scanf_float+0x60>
 8016a22:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016a26:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016a2a:	463a      	mov	r2, r7
 8016a2c:	4640      	mov	r0, r8
 8016a2e:	4798      	blx	r3
 8016a30:	6923      	ldr	r3, [r4, #16]
 8016a32:	3b01      	subs	r3, #1
 8016a34:	6123      	str	r3, [r4, #16]
 8016a36:	e6ec      	b.n	8016812 <_scanf_float+0x7a>
 8016a38:	1e6b      	subs	r3, r5, #1
 8016a3a:	2b06      	cmp	r3, #6
 8016a3c:	d825      	bhi.n	8016a8a <_scanf_float+0x2f2>
 8016a3e:	2d02      	cmp	r5, #2
 8016a40:	d836      	bhi.n	8016ab0 <_scanf_float+0x318>
 8016a42:	455e      	cmp	r6, fp
 8016a44:	f67f aee8 	bls.w	8016818 <_scanf_float+0x80>
 8016a48:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016a4c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016a50:	463a      	mov	r2, r7
 8016a52:	4640      	mov	r0, r8
 8016a54:	4798      	blx	r3
 8016a56:	6923      	ldr	r3, [r4, #16]
 8016a58:	3b01      	subs	r3, #1
 8016a5a:	6123      	str	r3, [r4, #16]
 8016a5c:	e7f1      	b.n	8016a42 <_scanf_float+0x2aa>
 8016a5e:	9802      	ldr	r0, [sp, #8]
 8016a60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016a64:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8016a68:	9002      	str	r0, [sp, #8]
 8016a6a:	463a      	mov	r2, r7
 8016a6c:	4640      	mov	r0, r8
 8016a6e:	4798      	blx	r3
 8016a70:	6923      	ldr	r3, [r4, #16]
 8016a72:	3b01      	subs	r3, #1
 8016a74:	6123      	str	r3, [r4, #16]
 8016a76:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016a7a:	fa5f fa8a 	uxtb.w	sl, sl
 8016a7e:	f1ba 0f02 	cmp.w	sl, #2
 8016a82:	d1ec      	bne.n	8016a5e <_scanf_float+0x2c6>
 8016a84:	3d03      	subs	r5, #3
 8016a86:	b2ed      	uxtb	r5, r5
 8016a88:	1b76      	subs	r6, r6, r5
 8016a8a:	6823      	ldr	r3, [r4, #0]
 8016a8c:	05da      	lsls	r2, r3, #23
 8016a8e:	d52f      	bpl.n	8016af0 <_scanf_float+0x358>
 8016a90:	055b      	lsls	r3, r3, #21
 8016a92:	d510      	bpl.n	8016ab6 <_scanf_float+0x31e>
 8016a94:	455e      	cmp	r6, fp
 8016a96:	f67f aebf 	bls.w	8016818 <_scanf_float+0x80>
 8016a9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016a9e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016aa2:	463a      	mov	r2, r7
 8016aa4:	4640      	mov	r0, r8
 8016aa6:	4798      	blx	r3
 8016aa8:	6923      	ldr	r3, [r4, #16]
 8016aaa:	3b01      	subs	r3, #1
 8016aac:	6123      	str	r3, [r4, #16]
 8016aae:	e7f1      	b.n	8016a94 <_scanf_float+0x2fc>
 8016ab0:	46aa      	mov	sl, r5
 8016ab2:	9602      	str	r6, [sp, #8]
 8016ab4:	e7df      	b.n	8016a76 <_scanf_float+0x2de>
 8016ab6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8016aba:	6923      	ldr	r3, [r4, #16]
 8016abc:	2965      	cmp	r1, #101	; 0x65
 8016abe:	f103 33ff 	add.w	r3, r3, #4294967295
 8016ac2:	f106 35ff 	add.w	r5, r6, #4294967295
 8016ac6:	6123      	str	r3, [r4, #16]
 8016ac8:	d00c      	beq.n	8016ae4 <_scanf_float+0x34c>
 8016aca:	2945      	cmp	r1, #69	; 0x45
 8016acc:	d00a      	beq.n	8016ae4 <_scanf_float+0x34c>
 8016ace:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016ad2:	463a      	mov	r2, r7
 8016ad4:	4640      	mov	r0, r8
 8016ad6:	4798      	blx	r3
 8016ad8:	6923      	ldr	r3, [r4, #16]
 8016ada:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8016ade:	3b01      	subs	r3, #1
 8016ae0:	1eb5      	subs	r5, r6, #2
 8016ae2:	6123      	str	r3, [r4, #16]
 8016ae4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016ae8:	463a      	mov	r2, r7
 8016aea:	4640      	mov	r0, r8
 8016aec:	4798      	blx	r3
 8016aee:	462e      	mov	r6, r5
 8016af0:	6825      	ldr	r5, [r4, #0]
 8016af2:	f015 0510 	ands.w	r5, r5, #16
 8016af6:	d158      	bne.n	8016baa <_scanf_float+0x412>
 8016af8:	7035      	strb	r5, [r6, #0]
 8016afa:	6823      	ldr	r3, [r4, #0]
 8016afc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8016b00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016b04:	d11c      	bne.n	8016b40 <_scanf_float+0x3a8>
 8016b06:	9b01      	ldr	r3, [sp, #4]
 8016b08:	454b      	cmp	r3, r9
 8016b0a:	eba3 0209 	sub.w	r2, r3, r9
 8016b0e:	d124      	bne.n	8016b5a <_scanf_float+0x3c2>
 8016b10:	2200      	movs	r2, #0
 8016b12:	4659      	mov	r1, fp
 8016b14:	4640      	mov	r0, r8
 8016b16:	f000 fee1 	bl	80178dc <_strtod_r>
 8016b1a:	9b03      	ldr	r3, [sp, #12]
 8016b1c:	6821      	ldr	r1, [r4, #0]
 8016b1e:	681b      	ldr	r3, [r3, #0]
 8016b20:	f011 0f02 	tst.w	r1, #2
 8016b24:	ec57 6b10 	vmov	r6, r7, d0
 8016b28:	f103 0204 	add.w	r2, r3, #4
 8016b2c:	d020      	beq.n	8016b70 <_scanf_float+0x3d8>
 8016b2e:	9903      	ldr	r1, [sp, #12]
 8016b30:	600a      	str	r2, [r1, #0]
 8016b32:	681b      	ldr	r3, [r3, #0]
 8016b34:	e9c3 6700 	strd	r6, r7, [r3]
 8016b38:	68e3      	ldr	r3, [r4, #12]
 8016b3a:	3301      	adds	r3, #1
 8016b3c:	60e3      	str	r3, [r4, #12]
 8016b3e:	e66c      	b.n	801681a <_scanf_float+0x82>
 8016b40:	9b04      	ldr	r3, [sp, #16]
 8016b42:	2b00      	cmp	r3, #0
 8016b44:	d0e4      	beq.n	8016b10 <_scanf_float+0x378>
 8016b46:	9905      	ldr	r1, [sp, #20]
 8016b48:	230a      	movs	r3, #10
 8016b4a:	462a      	mov	r2, r5
 8016b4c:	3101      	adds	r1, #1
 8016b4e:	4640      	mov	r0, r8
 8016b50:	f000 ff4e 	bl	80179f0 <_strtol_r>
 8016b54:	9b04      	ldr	r3, [sp, #16]
 8016b56:	9e05      	ldr	r6, [sp, #20]
 8016b58:	1ac2      	subs	r2, r0, r3
 8016b5a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8016b5e:	429e      	cmp	r6, r3
 8016b60:	bf28      	it	cs
 8016b62:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8016b66:	4912      	ldr	r1, [pc, #72]	; (8016bb0 <_scanf_float+0x418>)
 8016b68:	4630      	mov	r0, r6
 8016b6a:	f000 f86f 	bl	8016c4c <siprintf>
 8016b6e:	e7cf      	b.n	8016b10 <_scanf_float+0x378>
 8016b70:	f011 0f04 	tst.w	r1, #4
 8016b74:	9903      	ldr	r1, [sp, #12]
 8016b76:	600a      	str	r2, [r1, #0]
 8016b78:	d1db      	bne.n	8016b32 <_scanf_float+0x39a>
 8016b7a:	f8d3 8000 	ldr.w	r8, [r3]
 8016b7e:	ee10 2a10 	vmov	r2, s0
 8016b82:	ee10 0a10 	vmov	r0, s0
 8016b86:	463b      	mov	r3, r7
 8016b88:	4639      	mov	r1, r7
 8016b8a:	f7e9 ffcf 	bl	8000b2c <__aeabi_dcmpun>
 8016b8e:	b128      	cbz	r0, 8016b9c <_scanf_float+0x404>
 8016b90:	4808      	ldr	r0, [pc, #32]	; (8016bb4 <_scanf_float+0x41c>)
 8016b92:	f000 f821 	bl	8016bd8 <nanf>
 8016b96:	ed88 0a00 	vstr	s0, [r8]
 8016b9a:	e7cd      	b.n	8016b38 <_scanf_float+0x3a0>
 8016b9c:	4630      	mov	r0, r6
 8016b9e:	4639      	mov	r1, r7
 8016ba0:	f7ea f822 	bl	8000be8 <__aeabi_d2f>
 8016ba4:	f8c8 0000 	str.w	r0, [r8]
 8016ba8:	e7c6      	b.n	8016b38 <_scanf_float+0x3a0>
 8016baa:	2500      	movs	r5, #0
 8016bac:	e635      	b.n	801681a <_scanf_float+0x82>
 8016bae:	bf00      	nop
 8016bb0:	0801c2d8 	.word	0x0801c2d8
 8016bb4:	0801c6f0 	.word	0x0801c6f0

08016bb8 <_sbrk_r>:
 8016bb8:	b538      	push	{r3, r4, r5, lr}
 8016bba:	4d06      	ldr	r5, [pc, #24]	; (8016bd4 <_sbrk_r+0x1c>)
 8016bbc:	2300      	movs	r3, #0
 8016bbe:	4604      	mov	r4, r0
 8016bc0:	4608      	mov	r0, r1
 8016bc2:	602b      	str	r3, [r5, #0]
 8016bc4:	f7f4 fa28 	bl	800b018 <_sbrk>
 8016bc8:	1c43      	adds	r3, r0, #1
 8016bca:	d102      	bne.n	8016bd2 <_sbrk_r+0x1a>
 8016bcc:	682b      	ldr	r3, [r5, #0]
 8016bce:	b103      	cbz	r3, 8016bd2 <_sbrk_r+0x1a>
 8016bd0:	6023      	str	r3, [r4, #0]
 8016bd2:	bd38      	pop	{r3, r4, r5, pc}
 8016bd4:	20006b74 	.word	0x20006b74

08016bd8 <nanf>:
 8016bd8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016be0 <nanf+0x8>
 8016bdc:	4770      	bx	lr
 8016bde:	bf00      	nop
 8016be0:	7fc00000 	.word	0x7fc00000

08016be4 <sniprintf>:
 8016be4:	b40c      	push	{r2, r3}
 8016be6:	b530      	push	{r4, r5, lr}
 8016be8:	4b17      	ldr	r3, [pc, #92]	; (8016c48 <sniprintf+0x64>)
 8016bea:	1e0c      	subs	r4, r1, #0
 8016bec:	681d      	ldr	r5, [r3, #0]
 8016bee:	b09d      	sub	sp, #116	; 0x74
 8016bf0:	da08      	bge.n	8016c04 <sniprintf+0x20>
 8016bf2:	238b      	movs	r3, #139	; 0x8b
 8016bf4:	602b      	str	r3, [r5, #0]
 8016bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8016bfa:	b01d      	add	sp, #116	; 0x74
 8016bfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016c00:	b002      	add	sp, #8
 8016c02:	4770      	bx	lr
 8016c04:	f44f 7302 	mov.w	r3, #520	; 0x208
 8016c08:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016c0c:	bf14      	ite	ne
 8016c0e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8016c12:	4623      	moveq	r3, r4
 8016c14:	9304      	str	r3, [sp, #16]
 8016c16:	9307      	str	r3, [sp, #28]
 8016c18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016c1c:	9002      	str	r0, [sp, #8]
 8016c1e:	9006      	str	r0, [sp, #24]
 8016c20:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016c24:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016c26:	ab21      	add	r3, sp, #132	; 0x84
 8016c28:	a902      	add	r1, sp, #8
 8016c2a:	4628      	mov	r0, r5
 8016c2c:	9301      	str	r3, [sp, #4]
 8016c2e:	f002 fe13 	bl	8019858 <_svfiprintf_r>
 8016c32:	1c43      	adds	r3, r0, #1
 8016c34:	bfbc      	itt	lt
 8016c36:	238b      	movlt	r3, #139	; 0x8b
 8016c38:	602b      	strlt	r3, [r5, #0]
 8016c3a:	2c00      	cmp	r4, #0
 8016c3c:	d0dd      	beq.n	8016bfa <sniprintf+0x16>
 8016c3e:	9b02      	ldr	r3, [sp, #8]
 8016c40:	2200      	movs	r2, #0
 8016c42:	701a      	strb	r2, [r3, #0]
 8016c44:	e7d9      	b.n	8016bfa <sniprintf+0x16>
 8016c46:	bf00      	nop
 8016c48:	200009ac 	.word	0x200009ac

08016c4c <siprintf>:
 8016c4c:	b40e      	push	{r1, r2, r3}
 8016c4e:	b500      	push	{lr}
 8016c50:	b09c      	sub	sp, #112	; 0x70
 8016c52:	ab1d      	add	r3, sp, #116	; 0x74
 8016c54:	9002      	str	r0, [sp, #8]
 8016c56:	9006      	str	r0, [sp, #24]
 8016c58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016c5c:	4809      	ldr	r0, [pc, #36]	; (8016c84 <siprintf+0x38>)
 8016c5e:	9107      	str	r1, [sp, #28]
 8016c60:	9104      	str	r1, [sp, #16]
 8016c62:	4909      	ldr	r1, [pc, #36]	; (8016c88 <siprintf+0x3c>)
 8016c64:	f853 2b04 	ldr.w	r2, [r3], #4
 8016c68:	9105      	str	r1, [sp, #20]
 8016c6a:	6800      	ldr	r0, [r0, #0]
 8016c6c:	9301      	str	r3, [sp, #4]
 8016c6e:	a902      	add	r1, sp, #8
 8016c70:	f002 fdf2 	bl	8019858 <_svfiprintf_r>
 8016c74:	9b02      	ldr	r3, [sp, #8]
 8016c76:	2200      	movs	r2, #0
 8016c78:	701a      	strb	r2, [r3, #0]
 8016c7a:	b01c      	add	sp, #112	; 0x70
 8016c7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016c80:	b003      	add	sp, #12
 8016c82:	4770      	bx	lr
 8016c84:	200009ac 	.word	0x200009ac
 8016c88:	ffff0208 	.word	0xffff0208

08016c8c <sulp>:
 8016c8c:	b570      	push	{r4, r5, r6, lr}
 8016c8e:	4604      	mov	r4, r0
 8016c90:	460d      	mov	r5, r1
 8016c92:	ec45 4b10 	vmov	d0, r4, r5
 8016c96:	4616      	mov	r6, r2
 8016c98:	f002 fc24 	bl	80194e4 <__ulp>
 8016c9c:	ec51 0b10 	vmov	r0, r1, d0
 8016ca0:	b17e      	cbz	r6, 8016cc2 <sulp+0x36>
 8016ca2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016ca6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016caa:	2b00      	cmp	r3, #0
 8016cac:	dd09      	ble.n	8016cc2 <sulp+0x36>
 8016cae:	051b      	lsls	r3, r3, #20
 8016cb0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8016cb4:	2400      	movs	r4, #0
 8016cb6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8016cba:	4622      	mov	r2, r4
 8016cbc:	462b      	mov	r3, r5
 8016cbe:	f7e9 fc9b 	bl	80005f8 <__aeabi_dmul>
 8016cc2:	bd70      	pop	{r4, r5, r6, pc}
 8016cc4:	0000      	movs	r0, r0
	...

08016cc8 <_strtod_l>:
 8016cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ccc:	b0a3      	sub	sp, #140	; 0x8c
 8016cce:	461f      	mov	r7, r3
 8016cd0:	2300      	movs	r3, #0
 8016cd2:	931e      	str	r3, [sp, #120]	; 0x78
 8016cd4:	4ba4      	ldr	r3, [pc, #656]	; (8016f68 <_strtod_l+0x2a0>)
 8016cd6:	9219      	str	r2, [sp, #100]	; 0x64
 8016cd8:	681b      	ldr	r3, [r3, #0]
 8016cda:	9307      	str	r3, [sp, #28]
 8016cdc:	4604      	mov	r4, r0
 8016cde:	4618      	mov	r0, r3
 8016ce0:	4688      	mov	r8, r1
 8016ce2:	f7e9 fa75 	bl	80001d0 <strlen>
 8016ce6:	f04f 0a00 	mov.w	sl, #0
 8016cea:	4605      	mov	r5, r0
 8016cec:	f04f 0b00 	mov.w	fp, #0
 8016cf0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8016cf4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016cf6:	781a      	ldrb	r2, [r3, #0]
 8016cf8:	2a2b      	cmp	r2, #43	; 0x2b
 8016cfa:	d04c      	beq.n	8016d96 <_strtod_l+0xce>
 8016cfc:	d839      	bhi.n	8016d72 <_strtod_l+0xaa>
 8016cfe:	2a0d      	cmp	r2, #13
 8016d00:	d832      	bhi.n	8016d68 <_strtod_l+0xa0>
 8016d02:	2a08      	cmp	r2, #8
 8016d04:	d832      	bhi.n	8016d6c <_strtod_l+0xa4>
 8016d06:	2a00      	cmp	r2, #0
 8016d08:	d03c      	beq.n	8016d84 <_strtod_l+0xbc>
 8016d0a:	2300      	movs	r3, #0
 8016d0c:	930e      	str	r3, [sp, #56]	; 0x38
 8016d0e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8016d10:	7833      	ldrb	r3, [r6, #0]
 8016d12:	2b30      	cmp	r3, #48	; 0x30
 8016d14:	f040 80b4 	bne.w	8016e80 <_strtod_l+0x1b8>
 8016d18:	7873      	ldrb	r3, [r6, #1]
 8016d1a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016d1e:	2b58      	cmp	r3, #88	; 0x58
 8016d20:	d16c      	bne.n	8016dfc <_strtod_l+0x134>
 8016d22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016d24:	9301      	str	r3, [sp, #4]
 8016d26:	ab1e      	add	r3, sp, #120	; 0x78
 8016d28:	9702      	str	r7, [sp, #8]
 8016d2a:	9300      	str	r3, [sp, #0]
 8016d2c:	4a8f      	ldr	r2, [pc, #572]	; (8016f6c <_strtod_l+0x2a4>)
 8016d2e:	ab1f      	add	r3, sp, #124	; 0x7c
 8016d30:	a91d      	add	r1, sp, #116	; 0x74
 8016d32:	4620      	mov	r0, r4
 8016d34:	f001 fd40 	bl	80187b8 <__gethex>
 8016d38:	f010 0707 	ands.w	r7, r0, #7
 8016d3c:	4605      	mov	r5, r0
 8016d3e:	d005      	beq.n	8016d4c <_strtod_l+0x84>
 8016d40:	2f06      	cmp	r7, #6
 8016d42:	d12a      	bne.n	8016d9a <_strtod_l+0xd2>
 8016d44:	3601      	adds	r6, #1
 8016d46:	2300      	movs	r3, #0
 8016d48:	961d      	str	r6, [sp, #116]	; 0x74
 8016d4a:	930e      	str	r3, [sp, #56]	; 0x38
 8016d4c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016d4e:	2b00      	cmp	r3, #0
 8016d50:	f040 8596 	bne.w	8017880 <_strtod_l+0xbb8>
 8016d54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016d56:	b1db      	cbz	r3, 8016d90 <_strtod_l+0xc8>
 8016d58:	4652      	mov	r2, sl
 8016d5a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8016d5e:	ec43 2b10 	vmov	d0, r2, r3
 8016d62:	b023      	add	sp, #140	; 0x8c
 8016d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d68:	2a20      	cmp	r2, #32
 8016d6a:	d1ce      	bne.n	8016d0a <_strtod_l+0x42>
 8016d6c:	3301      	adds	r3, #1
 8016d6e:	931d      	str	r3, [sp, #116]	; 0x74
 8016d70:	e7c0      	b.n	8016cf4 <_strtod_l+0x2c>
 8016d72:	2a2d      	cmp	r2, #45	; 0x2d
 8016d74:	d1c9      	bne.n	8016d0a <_strtod_l+0x42>
 8016d76:	2201      	movs	r2, #1
 8016d78:	920e      	str	r2, [sp, #56]	; 0x38
 8016d7a:	1c5a      	adds	r2, r3, #1
 8016d7c:	921d      	str	r2, [sp, #116]	; 0x74
 8016d7e:	785b      	ldrb	r3, [r3, #1]
 8016d80:	2b00      	cmp	r3, #0
 8016d82:	d1c4      	bne.n	8016d0e <_strtod_l+0x46>
 8016d84:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016d86:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	f040 8576 	bne.w	801787c <_strtod_l+0xbb4>
 8016d90:	4652      	mov	r2, sl
 8016d92:	465b      	mov	r3, fp
 8016d94:	e7e3      	b.n	8016d5e <_strtod_l+0x96>
 8016d96:	2200      	movs	r2, #0
 8016d98:	e7ee      	b.n	8016d78 <_strtod_l+0xb0>
 8016d9a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016d9c:	b13a      	cbz	r2, 8016dae <_strtod_l+0xe6>
 8016d9e:	2135      	movs	r1, #53	; 0x35
 8016da0:	a820      	add	r0, sp, #128	; 0x80
 8016da2:	f002 fcaa 	bl	80196fa <__copybits>
 8016da6:	991e      	ldr	r1, [sp, #120]	; 0x78
 8016da8:	4620      	mov	r0, r4
 8016daa:	f002 f86f 	bl	8018e8c <_Bfree>
 8016dae:	3f01      	subs	r7, #1
 8016db0:	2f05      	cmp	r7, #5
 8016db2:	d807      	bhi.n	8016dc4 <_strtod_l+0xfc>
 8016db4:	e8df f007 	tbb	[pc, r7]
 8016db8:	1d180b0e 	.word	0x1d180b0e
 8016dbc:	030e      	.short	0x030e
 8016dbe:	f04f 0b00 	mov.w	fp, #0
 8016dc2:	46da      	mov	sl, fp
 8016dc4:	0728      	lsls	r0, r5, #28
 8016dc6:	d5c1      	bpl.n	8016d4c <_strtod_l+0x84>
 8016dc8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8016dcc:	e7be      	b.n	8016d4c <_strtod_l+0x84>
 8016dce:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8016dd2:	e7f7      	b.n	8016dc4 <_strtod_l+0xfc>
 8016dd4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8016dd8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8016dda:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8016dde:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8016de2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016de6:	e7ed      	b.n	8016dc4 <_strtod_l+0xfc>
 8016de8:	f8df b184 	ldr.w	fp, [pc, #388]	; 8016f70 <_strtod_l+0x2a8>
 8016dec:	f04f 0a00 	mov.w	sl, #0
 8016df0:	e7e8      	b.n	8016dc4 <_strtod_l+0xfc>
 8016df2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8016df6:	f04f 3aff 	mov.w	sl, #4294967295
 8016dfa:	e7e3      	b.n	8016dc4 <_strtod_l+0xfc>
 8016dfc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016dfe:	1c5a      	adds	r2, r3, #1
 8016e00:	921d      	str	r2, [sp, #116]	; 0x74
 8016e02:	785b      	ldrb	r3, [r3, #1]
 8016e04:	2b30      	cmp	r3, #48	; 0x30
 8016e06:	d0f9      	beq.n	8016dfc <_strtod_l+0x134>
 8016e08:	2b00      	cmp	r3, #0
 8016e0a:	d09f      	beq.n	8016d4c <_strtod_l+0x84>
 8016e0c:	2301      	movs	r3, #1
 8016e0e:	f04f 0900 	mov.w	r9, #0
 8016e12:	9304      	str	r3, [sp, #16]
 8016e14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016e16:	930a      	str	r3, [sp, #40]	; 0x28
 8016e18:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8016e1c:	464f      	mov	r7, r9
 8016e1e:	220a      	movs	r2, #10
 8016e20:	981d      	ldr	r0, [sp, #116]	; 0x74
 8016e22:	7806      	ldrb	r6, [r0, #0]
 8016e24:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8016e28:	b2d9      	uxtb	r1, r3
 8016e2a:	2909      	cmp	r1, #9
 8016e2c:	d92a      	bls.n	8016e84 <_strtod_l+0x1bc>
 8016e2e:	9907      	ldr	r1, [sp, #28]
 8016e30:	462a      	mov	r2, r5
 8016e32:	f002 fe19 	bl	8019a68 <strncmp>
 8016e36:	b398      	cbz	r0, 8016ea0 <_strtod_l+0x1d8>
 8016e38:	2000      	movs	r0, #0
 8016e3a:	4633      	mov	r3, r6
 8016e3c:	463d      	mov	r5, r7
 8016e3e:	9007      	str	r0, [sp, #28]
 8016e40:	4602      	mov	r2, r0
 8016e42:	2b65      	cmp	r3, #101	; 0x65
 8016e44:	d001      	beq.n	8016e4a <_strtod_l+0x182>
 8016e46:	2b45      	cmp	r3, #69	; 0x45
 8016e48:	d118      	bne.n	8016e7c <_strtod_l+0x1b4>
 8016e4a:	b91d      	cbnz	r5, 8016e54 <_strtod_l+0x18c>
 8016e4c:	9b04      	ldr	r3, [sp, #16]
 8016e4e:	4303      	orrs	r3, r0
 8016e50:	d098      	beq.n	8016d84 <_strtod_l+0xbc>
 8016e52:	2500      	movs	r5, #0
 8016e54:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8016e58:	f108 0301 	add.w	r3, r8, #1
 8016e5c:	931d      	str	r3, [sp, #116]	; 0x74
 8016e5e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8016e62:	2b2b      	cmp	r3, #43	; 0x2b
 8016e64:	d075      	beq.n	8016f52 <_strtod_l+0x28a>
 8016e66:	2b2d      	cmp	r3, #45	; 0x2d
 8016e68:	d07b      	beq.n	8016f62 <_strtod_l+0x29a>
 8016e6a:	f04f 0c00 	mov.w	ip, #0
 8016e6e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8016e72:	2909      	cmp	r1, #9
 8016e74:	f240 8082 	bls.w	8016f7c <_strtod_l+0x2b4>
 8016e78:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8016e7c:	2600      	movs	r6, #0
 8016e7e:	e09d      	b.n	8016fbc <_strtod_l+0x2f4>
 8016e80:	2300      	movs	r3, #0
 8016e82:	e7c4      	b.n	8016e0e <_strtod_l+0x146>
 8016e84:	2f08      	cmp	r7, #8
 8016e86:	bfd8      	it	le
 8016e88:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8016e8a:	f100 0001 	add.w	r0, r0, #1
 8016e8e:	bfda      	itte	le
 8016e90:	fb02 3301 	mlale	r3, r2, r1, r3
 8016e94:	9309      	strle	r3, [sp, #36]	; 0x24
 8016e96:	fb02 3909 	mlagt	r9, r2, r9, r3
 8016e9a:	3701      	adds	r7, #1
 8016e9c:	901d      	str	r0, [sp, #116]	; 0x74
 8016e9e:	e7bf      	b.n	8016e20 <_strtod_l+0x158>
 8016ea0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016ea2:	195a      	adds	r2, r3, r5
 8016ea4:	921d      	str	r2, [sp, #116]	; 0x74
 8016ea6:	5d5b      	ldrb	r3, [r3, r5]
 8016ea8:	2f00      	cmp	r7, #0
 8016eaa:	d037      	beq.n	8016f1c <_strtod_l+0x254>
 8016eac:	9007      	str	r0, [sp, #28]
 8016eae:	463d      	mov	r5, r7
 8016eb0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8016eb4:	2a09      	cmp	r2, #9
 8016eb6:	d912      	bls.n	8016ede <_strtod_l+0x216>
 8016eb8:	2201      	movs	r2, #1
 8016eba:	e7c2      	b.n	8016e42 <_strtod_l+0x17a>
 8016ebc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016ebe:	1c5a      	adds	r2, r3, #1
 8016ec0:	921d      	str	r2, [sp, #116]	; 0x74
 8016ec2:	785b      	ldrb	r3, [r3, #1]
 8016ec4:	3001      	adds	r0, #1
 8016ec6:	2b30      	cmp	r3, #48	; 0x30
 8016ec8:	d0f8      	beq.n	8016ebc <_strtod_l+0x1f4>
 8016eca:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8016ece:	2a08      	cmp	r2, #8
 8016ed0:	f200 84db 	bhi.w	801788a <_strtod_l+0xbc2>
 8016ed4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8016ed6:	9007      	str	r0, [sp, #28]
 8016ed8:	2000      	movs	r0, #0
 8016eda:	920a      	str	r2, [sp, #40]	; 0x28
 8016edc:	4605      	mov	r5, r0
 8016ede:	3b30      	subs	r3, #48	; 0x30
 8016ee0:	f100 0201 	add.w	r2, r0, #1
 8016ee4:	d014      	beq.n	8016f10 <_strtod_l+0x248>
 8016ee6:	9907      	ldr	r1, [sp, #28]
 8016ee8:	4411      	add	r1, r2
 8016eea:	9107      	str	r1, [sp, #28]
 8016eec:	462a      	mov	r2, r5
 8016eee:	eb00 0e05 	add.w	lr, r0, r5
 8016ef2:	210a      	movs	r1, #10
 8016ef4:	4572      	cmp	r2, lr
 8016ef6:	d113      	bne.n	8016f20 <_strtod_l+0x258>
 8016ef8:	182a      	adds	r2, r5, r0
 8016efa:	2a08      	cmp	r2, #8
 8016efc:	f105 0501 	add.w	r5, r5, #1
 8016f00:	4405      	add	r5, r0
 8016f02:	dc1c      	bgt.n	8016f3e <_strtod_l+0x276>
 8016f04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016f06:	220a      	movs	r2, #10
 8016f08:	fb02 3301 	mla	r3, r2, r1, r3
 8016f0c:	9309      	str	r3, [sp, #36]	; 0x24
 8016f0e:	2200      	movs	r2, #0
 8016f10:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016f12:	1c59      	adds	r1, r3, #1
 8016f14:	911d      	str	r1, [sp, #116]	; 0x74
 8016f16:	785b      	ldrb	r3, [r3, #1]
 8016f18:	4610      	mov	r0, r2
 8016f1a:	e7c9      	b.n	8016eb0 <_strtod_l+0x1e8>
 8016f1c:	4638      	mov	r0, r7
 8016f1e:	e7d2      	b.n	8016ec6 <_strtod_l+0x1fe>
 8016f20:	2a08      	cmp	r2, #8
 8016f22:	dc04      	bgt.n	8016f2e <_strtod_l+0x266>
 8016f24:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8016f26:	434e      	muls	r6, r1
 8016f28:	9609      	str	r6, [sp, #36]	; 0x24
 8016f2a:	3201      	adds	r2, #1
 8016f2c:	e7e2      	b.n	8016ef4 <_strtod_l+0x22c>
 8016f2e:	f102 0c01 	add.w	ip, r2, #1
 8016f32:	f1bc 0f10 	cmp.w	ip, #16
 8016f36:	bfd8      	it	le
 8016f38:	fb01 f909 	mulle.w	r9, r1, r9
 8016f3c:	e7f5      	b.n	8016f2a <_strtod_l+0x262>
 8016f3e:	2d10      	cmp	r5, #16
 8016f40:	bfdc      	itt	le
 8016f42:	220a      	movle	r2, #10
 8016f44:	fb02 3909 	mlale	r9, r2, r9, r3
 8016f48:	e7e1      	b.n	8016f0e <_strtod_l+0x246>
 8016f4a:	2300      	movs	r3, #0
 8016f4c:	9307      	str	r3, [sp, #28]
 8016f4e:	2201      	movs	r2, #1
 8016f50:	e77c      	b.n	8016e4c <_strtod_l+0x184>
 8016f52:	f04f 0c00 	mov.w	ip, #0
 8016f56:	f108 0302 	add.w	r3, r8, #2
 8016f5a:	931d      	str	r3, [sp, #116]	; 0x74
 8016f5c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8016f60:	e785      	b.n	8016e6e <_strtod_l+0x1a6>
 8016f62:	f04f 0c01 	mov.w	ip, #1
 8016f66:	e7f6      	b.n	8016f56 <_strtod_l+0x28e>
 8016f68:	0801c530 	.word	0x0801c530
 8016f6c:	0801c2e0 	.word	0x0801c2e0
 8016f70:	7ff00000 	.word	0x7ff00000
 8016f74:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016f76:	1c59      	adds	r1, r3, #1
 8016f78:	911d      	str	r1, [sp, #116]	; 0x74
 8016f7a:	785b      	ldrb	r3, [r3, #1]
 8016f7c:	2b30      	cmp	r3, #48	; 0x30
 8016f7e:	d0f9      	beq.n	8016f74 <_strtod_l+0x2ac>
 8016f80:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8016f84:	2908      	cmp	r1, #8
 8016f86:	f63f af79 	bhi.w	8016e7c <_strtod_l+0x1b4>
 8016f8a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8016f8e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016f90:	9308      	str	r3, [sp, #32]
 8016f92:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016f94:	1c59      	adds	r1, r3, #1
 8016f96:	911d      	str	r1, [sp, #116]	; 0x74
 8016f98:	785b      	ldrb	r3, [r3, #1]
 8016f9a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8016f9e:	2e09      	cmp	r6, #9
 8016fa0:	d937      	bls.n	8017012 <_strtod_l+0x34a>
 8016fa2:	9e08      	ldr	r6, [sp, #32]
 8016fa4:	1b89      	subs	r1, r1, r6
 8016fa6:	2908      	cmp	r1, #8
 8016fa8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8016fac:	dc02      	bgt.n	8016fb4 <_strtod_l+0x2ec>
 8016fae:	4576      	cmp	r6, lr
 8016fb0:	bfa8      	it	ge
 8016fb2:	4676      	movge	r6, lr
 8016fb4:	f1bc 0f00 	cmp.w	ip, #0
 8016fb8:	d000      	beq.n	8016fbc <_strtod_l+0x2f4>
 8016fba:	4276      	negs	r6, r6
 8016fbc:	2d00      	cmp	r5, #0
 8016fbe:	d14f      	bne.n	8017060 <_strtod_l+0x398>
 8016fc0:	9904      	ldr	r1, [sp, #16]
 8016fc2:	4301      	orrs	r1, r0
 8016fc4:	f47f aec2 	bne.w	8016d4c <_strtod_l+0x84>
 8016fc8:	2a00      	cmp	r2, #0
 8016fca:	f47f aedb 	bne.w	8016d84 <_strtod_l+0xbc>
 8016fce:	2b69      	cmp	r3, #105	; 0x69
 8016fd0:	d027      	beq.n	8017022 <_strtod_l+0x35a>
 8016fd2:	dc24      	bgt.n	801701e <_strtod_l+0x356>
 8016fd4:	2b49      	cmp	r3, #73	; 0x49
 8016fd6:	d024      	beq.n	8017022 <_strtod_l+0x35a>
 8016fd8:	2b4e      	cmp	r3, #78	; 0x4e
 8016fda:	f47f aed3 	bne.w	8016d84 <_strtod_l+0xbc>
 8016fde:	499e      	ldr	r1, [pc, #632]	; (8017258 <_strtod_l+0x590>)
 8016fe0:	a81d      	add	r0, sp, #116	; 0x74
 8016fe2:	f001 fe41 	bl	8018c68 <__match>
 8016fe6:	2800      	cmp	r0, #0
 8016fe8:	f43f aecc 	beq.w	8016d84 <_strtod_l+0xbc>
 8016fec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016fee:	781b      	ldrb	r3, [r3, #0]
 8016ff0:	2b28      	cmp	r3, #40	; 0x28
 8016ff2:	d12d      	bne.n	8017050 <_strtod_l+0x388>
 8016ff4:	4999      	ldr	r1, [pc, #612]	; (801725c <_strtod_l+0x594>)
 8016ff6:	aa20      	add	r2, sp, #128	; 0x80
 8016ff8:	a81d      	add	r0, sp, #116	; 0x74
 8016ffa:	f001 fe49 	bl	8018c90 <__hexnan>
 8016ffe:	2805      	cmp	r0, #5
 8017000:	d126      	bne.n	8017050 <_strtod_l+0x388>
 8017002:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017004:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8017008:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801700c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8017010:	e69c      	b.n	8016d4c <_strtod_l+0x84>
 8017012:	210a      	movs	r1, #10
 8017014:	fb01 3e0e 	mla	lr, r1, lr, r3
 8017018:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801701c:	e7b9      	b.n	8016f92 <_strtod_l+0x2ca>
 801701e:	2b6e      	cmp	r3, #110	; 0x6e
 8017020:	e7db      	b.n	8016fda <_strtod_l+0x312>
 8017022:	498f      	ldr	r1, [pc, #572]	; (8017260 <_strtod_l+0x598>)
 8017024:	a81d      	add	r0, sp, #116	; 0x74
 8017026:	f001 fe1f 	bl	8018c68 <__match>
 801702a:	2800      	cmp	r0, #0
 801702c:	f43f aeaa 	beq.w	8016d84 <_strtod_l+0xbc>
 8017030:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017032:	498c      	ldr	r1, [pc, #560]	; (8017264 <_strtod_l+0x59c>)
 8017034:	3b01      	subs	r3, #1
 8017036:	a81d      	add	r0, sp, #116	; 0x74
 8017038:	931d      	str	r3, [sp, #116]	; 0x74
 801703a:	f001 fe15 	bl	8018c68 <__match>
 801703e:	b910      	cbnz	r0, 8017046 <_strtod_l+0x37e>
 8017040:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017042:	3301      	adds	r3, #1
 8017044:	931d      	str	r3, [sp, #116]	; 0x74
 8017046:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8017274 <_strtod_l+0x5ac>
 801704a:	f04f 0a00 	mov.w	sl, #0
 801704e:	e67d      	b.n	8016d4c <_strtod_l+0x84>
 8017050:	4885      	ldr	r0, [pc, #532]	; (8017268 <_strtod_l+0x5a0>)
 8017052:	f002 fd01 	bl	8019a58 <nan>
 8017056:	ed8d 0b04 	vstr	d0, [sp, #16]
 801705a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801705e:	e675      	b.n	8016d4c <_strtod_l+0x84>
 8017060:	9b07      	ldr	r3, [sp, #28]
 8017062:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017064:	1af3      	subs	r3, r6, r3
 8017066:	2f00      	cmp	r7, #0
 8017068:	bf08      	it	eq
 801706a:	462f      	moveq	r7, r5
 801706c:	2d10      	cmp	r5, #16
 801706e:	9308      	str	r3, [sp, #32]
 8017070:	46a8      	mov	r8, r5
 8017072:	bfa8      	it	ge
 8017074:	f04f 0810 	movge.w	r8, #16
 8017078:	f7e9 fa44 	bl	8000504 <__aeabi_ui2d>
 801707c:	2d09      	cmp	r5, #9
 801707e:	4682      	mov	sl, r0
 8017080:	468b      	mov	fp, r1
 8017082:	dd13      	ble.n	80170ac <_strtod_l+0x3e4>
 8017084:	4b79      	ldr	r3, [pc, #484]	; (801726c <_strtod_l+0x5a4>)
 8017086:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801708a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801708e:	f7e9 fab3 	bl	80005f8 <__aeabi_dmul>
 8017092:	4682      	mov	sl, r0
 8017094:	4648      	mov	r0, r9
 8017096:	468b      	mov	fp, r1
 8017098:	f7e9 fa34 	bl	8000504 <__aeabi_ui2d>
 801709c:	4602      	mov	r2, r0
 801709e:	460b      	mov	r3, r1
 80170a0:	4650      	mov	r0, sl
 80170a2:	4659      	mov	r1, fp
 80170a4:	f7e9 f8f2 	bl	800028c <__adddf3>
 80170a8:	4682      	mov	sl, r0
 80170aa:	468b      	mov	fp, r1
 80170ac:	2d0f      	cmp	r5, #15
 80170ae:	dc38      	bgt.n	8017122 <_strtod_l+0x45a>
 80170b0:	9b08      	ldr	r3, [sp, #32]
 80170b2:	2b00      	cmp	r3, #0
 80170b4:	f43f ae4a 	beq.w	8016d4c <_strtod_l+0x84>
 80170b8:	dd24      	ble.n	8017104 <_strtod_l+0x43c>
 80170ba:	2b16      	cmp	r3, #22
 80170bc:	dc0b      	bgt.n	80170d6 <_strtod_l+0x40e>
 80170be:	4d6b      	ldr	r5, [pc, #428]	; (801726c <_strtod_l+0x5a4>)
 80170c0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80170c4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80170c8:	4652      	mov	r2, sl
 80170ca:	465b      	mov	r3, fp
 80170cc:	f7e9 fa94 	bl	80005f8 <__aeabi_dmul>
 80170d0:	4682      	mov	sl, r0
 80170d2:	468b      	mov	fp, r1
 80170d4:	e63a      	b.n	8016d4c <_strtod_l+0x84>
 80170d6:	9a08      	ldr	r2, [sp, #32]
 80170d8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80170dc:	4293      	cmp	r3, r2
 80170de:	db20      	blt.n	8017122 <_strtod_l+0x45a>
 80170e0:	4c62      	ldr	r4, [pc, #392]	; (801726c <_strtod_l+0x5a4>)
 80170e2:	f1c5 050f 	rsb	r5, r5, #15
 80170e6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80170ea:	4652      	mov	r2, sl
 80170ec:	465b      	mov	r3, fp
 80170ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80170f2:	f7e9 fa81 	bl	80005f8 <__aeabi_dmul>
 80170f6:	9b08      	ldr	r3, [sp, #32]
 80170f8:	1b5d      	subs	r5, r3, r5
 80170fa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80170fe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017102:	e7e3      	b.n	80170cc <_strtod_l+0x404>
 8017104:	9b08      	ldr	r3, [sp, #32]
 8017106:	3316      	adds	r3, #22
 8017108:	db0b      	blt.n	8017122 <_strtod_l+0x45a>
 801710a:	9b07      	ldr	r3, [sp, #28]
 801710c:	4a57      	ldr	r2, [pc, #348]	; (801726c <_strtod_l+0x5a4>)
 801710e:	1b9e      	subs	r6, r3, r6
 8017110:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8017114:	e9d6 2300 	ldrd	r2, r3, [r6]
 8017118:	4650      	mov	r0, sl
 801711a:	4659      	mov	r1, fp
 801711c:	f7e9 fb96 	bl	800084c <__aeabi_ddiv>
 8017120:	e7d6      	b.n	80170d0 <_strtod_l+0x408>
 8017122:	9b08      	ldr	r3, [sp, #32]
 8017124:	eba5 0808 	sub.w	r8, r5, r8
 8017128:	4498      	add	r8, r3
 801712a:	f1b8 0f00 	cmp.w	r8, #0
 801712e:	dd71      	ble.n	8017214 <_strtod_l+0x54c>
 8017130:	f018 030f 	ands.w	r3, r8, #15
 8017134:	d00a      	beq.n	801714c <_strtod_l+0x484>
 8017136:	494d      	ldr	r1, [pc, #308]	; (801726c <_strtod_l+0x5a4>)
 8017138:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801713c:	4652      	mov	r2, sl
 801713e:	465b      	mov	r3, fp
 8017140:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017144:	f7e9 fa58 	bl	80005f8 <__aeabi_dmul>
 8017148:	4682      	mov	sl, r0
 801714a:	468b      	mov	fp, r1
 801714c:	f038 080f 	bics.w	r8, r8, #15
 8017150:	d04d      	beq.n	80171ee <_strtod_l+0x526>
 8017152:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8017156:	dd22      	ble.n	801719e <_strtod_l+0x4d6>
 8017158:	2500      	movs	r5, #0
 801715a:	462e      	mov	r6, r5
 801715c:	9509      	str	r5, [sp, #36]	; 0x24
 801715e:	9507      	str	r5, [sp, #28]
 8017160:	2322      	movs	r3, #34	; 0x22
 8017162:	f8df b110 	ldr.w	fp, [pc, #272]	; 8017274 <_strtod_l+0x5ac>
 8017166:	6023      	str	r3, [r4, #0]
 8017168:	f04f 0a00 	mov.w	sl, #0
 801716c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801716e:	2b00      	cmp	r3, #0
 8017170:	f43f adec 	beq.w	8016d4c <_strtod_l+0x84>
 8017174:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017176:	4620      	mov	r0, r4
 8017178:	f001 fe88 	bl	8018e8c <_Bfree>
 801717c:	9907      	ldr	r1, [sp, #28]
 801717e:	4620      	mov	r0, r4
 8017180:	f001 fe84 	bl	8018e8c <_Bfree>
 8017184:	4631      	mov	r1, r6
 8017186:	4620      	mov	r0, r4
 8017188:	f001 fe80 	bl	8018e8c <_Bfree>
 801718c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801718e:	4620      	mov	r0, r4
 8017190:	f001 fe7c 	bl	8018e8c <_Bfree>
 8017194:	4629      	mov	r1, r5
 8017196:	4620      	mov	r0, r4
 8017198:	f001 fe78 	bl	8018e8c <_Bfree>
 801719c:	e5d6      	b.n	8016d4c <_strtod_l+0x84>
 801719e:	2300      	movs	r3, #0
 80171a0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80171a4:	4650      	mov	r0, sl
 80171a6:	4659      	mov	r1, fp
 80171a8:	4699      	mov	r9, r3
 80171aa:	f1b8 0f01 	cmp.w	r8, #1
 80171ae:	dc21      	bgt.n	80171f4 <_strtod_l+0x52c>
 80171b0:	b10b      	cbz	r3, 80171b6 <_strtod_l+0x4ee>
 80171b2:	4682      	mov	sl, r0
 80171b4:	468b      	mov	fp, r1
 80171b6:	4b2e      	ldr	r3, [pc, #184]	; (8017270 <_strtod_l+0x5a8>)
 80171b8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80171bc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80171c0:	4652      	mov	r2, sl
 80171c2:	465b      	mov	r3, fp
 80171c4:	e9d9 0100 	ldrd	r0, r1, [r9]
 80171c8:	f7e9 fa16 	bl	80005f8 <__aeabi_dmul>
 80171cc:	4b29      	ldr	r3, [pc, #164]	; (8017274 <_strtod_l+0x5ac>)
 80171ce:	460a      	mov	r2, r1
 80171d0:	400b      	ands	r3, r1
 80171d2:	4929      	ldr	r1, [pc, #164]	; (8017278 <_strtod_l+0x5b0>)
 80171d4:	428b      	cmp	r3, r1
 80171d6:	4682      	mov	sl, r0
 80171d8:	d8be      	bhi.n	8017158 <_strtod_l+0x490>
 80171da:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80171de:	428b      	cmp	r3, r1
 80171e0:	bf86      	itte	hi
 80171e2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801727c <_strtod_l+0x5b4>
 80171e6:	f04f 3aff 	movhi.w	sl, #4294967295
 80171ea:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80171ee:	2300      	movs	r3, #0
 80171f0:	9304      	str	r3, [sp, #16]
 80171f2:	e081      	b.n	80172f8 <_strtod_l+0x630>
 80171f4:	f018 0f01 	tst.w	r8, #1
 80171f8:	d007      	beq.n	801720a <_strtod_l+0x542>
 80171fa:	4b1d      	ldr	r3, [pc, #116]	; (8017270 <_strtod_l+0x5a8>)
 80171fc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8017200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017204:	f7e9 f9f8 	bl	80005f8 <__aeabi_dmul>
 8017208:	2301      	movs	r3, #1
 801720a:	f109 0901 	add.w	r9, r9, #1
 801720e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8017212:	e7ca      	b.n	80171aa <_strtod_l+0x4e2>
 8017214:	d0eb      	beq.n	80171ee <_strtod_l+0x526>
 8017216:	f1c8 0800 	rsb	r8, r8, #0
 801721a:	f018 020f 	ands.w	r2, r8, #15
 801721e:	d00a      	beq.n	8017236 <_strtod_l+0x56e>
 8017220:	4b12      	ldr	r3, [pc, #72]	; (801726c <_strtod_l+0x5a4>)
 8017222:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017226:	4650      	mov	r0, sl
 8017228:	4659      	mov	r1, fp
 801722a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801722e:	f7e9 fb0d 	bl	800084c <__aeabi_ddiv>
 8017232:	4682      	mov	sl, r0
 8017234:	468b      	mov	fp, r1
 8017236:	ea5f 1828 	movs.w	r8, r8, asr #4
 801723a:	d0d8      	beq.n	80171ee <_strtod_l+0x526>
 801723c:	f1b8 0f1f 	cmp.w	r8, #31
 8017240:	dd1e      	ble.n	8017280 <_strtod_l+0x5b8>
 8017242:	2500      	movs	r5, #0
 8017244:	462e      	mov	r6, r5
 8017246:	9509      	str	r5, [sp, #36]	; 0x24
 8017248:	9507      	str	r5, [sp, #28]
 801724a:	2322      	movs	r3, #34	; 0x22
 801724c:	f04f 0a00 	mov.w	sl, #0
 8017250:	f04f 0b00 	mov.w	fp, #0
 8017254:	6023      	str	r3, [r4, #0]
 8017256:	e789      	b.n	801716c <_strtod_l+0x4a4>
 8017258:	0801c2b1 	.word	0x0801c2b1
 801725c:	0801c2f4 	.word	0x0801c2f4
 8017260:	0801c2a9 	.word	0x0801c2a9
 8017264:	0801c434 	.word	0x0801c434
 8017268:	0801c6f0 	.word	0x0801c6f0
 801726c:	0801c5d0 	.word	0x0801c5d0
 8017270:	0801c5a8 	.word	0x0801c5a8
 8017274:	7ff00000 	.word	0x7ff00000
 8017278:	7ca00000 	.word	0x7ca00000
 801727c:	7fefffff 	.word	0x7fefffff
 8017280:	f018 0310 	ands.w	r3, r8, #16
 8017284:	bf18      	it	ne
 8017286:	236a      	movne	r3, #106	; 0x6a
 8017288:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8017640 <_strtod_l+0x978>
 801728c:	9304      	str	r3, [sp, #16]
 801728e:	4650      	mov	r0, sl
 8017290:	4659      	mov	r1, fp
 8017292:	2300      	movs	r3, #0
 8017294:	f018 0f01 	tst.w	r8, #1
 8017298:	d004      	beq.n	80172a4 <_strtod_l+0x5dc>
 801729a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801729e:	f7e9 f9ab 	bl	80005f8 <__aeabi_dmul>
 80172a2:	2301      	movs	r3, #1
 80172a4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80172a8:	f109 0908 	add.w	r9, r9, #8
 80172ac:	d1f2      	bne.n	8017294 <_strtod_l+0x5cc>
 80172ae:	b10b      	cbz	r3, 80172b4 <_strtod_l+0x5ec>
 80172b0:	4682      	mov	sl, r0
 80172b2:	468b      	mov	fp, r1
 80172b4:	9b04      	ldr	r3, [sp, #16]
 80172b6:	b1bb      	cbz	r3, 80172e8 <_strtod_l+0x620>
 80172b8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80172bc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80172c0:	2b00      	cmp	r3, #0
 80172c2:	4659      	mov	r1, fp
 80172c4:	dd10      	ble.n	80172e8 <_strtod_l+0x620>
 80172c6:	2b1f      	cmp	r3, #31
 80172c8:	f340 8128 	ble.w	801751c <_strtod_l+0x854>
 80172cc:	2b34      	cmp	r3, #52	; 0x34
 80172ce:	bfde      	ittt	le
 80172d0:	3b20      	suble	r3, #32
 80172d2:	f04f 32ff 	movle.w	r2, #4294967295
 80172d6:	fa02 f303 	lslle.w	r3, r2, r3
 80172da:	f04f 0a00 	mov.w	sl, #0
 80172de:	bfcc      	ite	gt
 80172e0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80172e4:	ea03 0b01 	andle.w	fp, r3, r1
 80172e8:	2200      	movs	r2, #0
 80172ea:	2300      	movs	r3, #0
 80172ec:	4650      	mov	r0, sl
 80172ee:	4659      	mov	r1, fp
 80172f0:	f7e9 fbea 	bl	8000ac8 <__aeabi_dcmpeq>
 80172f4:	2800      	cmp	r0, #0
 80172f6:	d1a4      	bne.n	8017242 <_strtod_l+0x57a>
 80172f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80172fa:	9300      	str	r3, [sp, #0]
 80172fc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80172fe:	462b      	mov	r3, r5
 8017300:	463a      	mov	r2, r7
 8017302:	4620      	mov	r0, r4
 8017304:	f001 fe2e 	bl	8018f64 <__s2b>
 8017308:	9009      	str	r0, [sp, #36]	; 0x24
 801730a:	2800      	cmp	r0, #0
 801730c:	f43f af24 	beq.w	8017158 <_strtod_l+0x490>
 8017310:	9b07      	ldr	r3, [sp, #28]
 8017312:	1b9e      	subs	r6, r3, r6
 8017314:	9b08      	ldr	r3, [sp, #32]
 8017316:	2b00      	cmp	r3, #0
 8017318:	bfb4      	ite	lt
 801731a:	4633      	movlt	r3, r6
 801731c:	2300      	movge	r3, #0
 801731e:	9310      	str	r3, [sp, #64]	; 0x40
 8017320:	9b08      	ldr	r3, [sp, #32]
 8017322:	2500      	movs	r5, #0
 8017324:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017328:	9318      	str	r3, [sp, #96]	; 0x60
 801732a:	462e      	mov	r6, r5
 801732c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801732e:	4620      	mov	r0, r4
 8017330:	6859      	ldr	r1, [r3, #4]
 8017332:	f001 fd6b 	bl	8018e0c <_Balloc>
 8017336:	9007      	str	r0, [sp, #28]
 8017338:	2800      	cmp	r0, #0
 801733a:	f43f af11 	beq.w	8017160 <_strtod_l+0x498>
 801733e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017340:	691a      	ldr	r2, [r3, #16]
 8017342:	3202      	adds	r2, #2
 8017344:	f103 010c 	add.w	r1, r3, #12
 8017348:	0092      	lsls	r2, r2, #2
 801734a:	300c      	adds	r0, #12
 801734c:	f7fe fce0 	bl	8015d10 <memcpy>
 8017350:	ec4b ab10 	vmov	d0, sl, fp
 8017354:	aa20      	add	r2, sp, #128	; 0x80
 8017356:	a91f      	add	r1, sp, #124	; 0x7c
 8017358:	4620      	mov	r0, r4
 801735a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801735e:	f002 f93d 	bl	80195dc <__d2b>
 8017362:	901e      	str	r0, [sp, #120]	; 0x78
 8017364:	2800      	cmp	r0, #0
 8017366:	f43f aefb 	beq.w	8017160 <_strtod_l+0x498>
 801736a:	2101      	movs	r1, #1
 801736c:	4620      	mov	r0, r4
 801736e:	f001 fe93 	bl	8019098 <__i2b>
 8017372:	4606      	mov	r6, r0
 8017374:	2800      	cmp	r0, #0
 8017376:	f43f aef3 	beq.w	8017160 <_strtod_l+0x498>
 801737a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801737c:	9904      	ldr	r1, [sp, #16]
 801737e:	2b00      	cmp	r3, #0
 8017380:	bfab      	itete	ge
 8017382:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8017384:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8017386:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8017388:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801738c:	bfac      	ite	ge
 801738e:	eb03 0902 	addge.w	r9, r3, r2
 8017392:	1ad7      	sublt	r7, r2, r3
 8017394:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017396:	eba3 0801 	sub.w	r8, r3, r1
 801739a:	4490      	add	r8, r2
 801739c:	4ba3      	ldr	r3, [pc, #652]	; (801762c <_strtod_l+0x964>)
 801739e:	f108 38ff 	add.w	r8, r8, #4294967295
 80173a2:	4598      	cmp	r8, r3
 80173a4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80173a8:	f280 80cc 	bge.w	8017544 <_strtod_l+0x87c>
 80173ac:	eba3 0308 	sub.w	r3, r3, r8
 80173b0:	2b1f      	cmp	r3, #31
 80173b2:	eba2 0203 	sub.w	r2, r2, r3
 80173b6:	f04f 0101 	mov.w	r1, #1
 80173ba:	f300 80b6 	bgt.w	801752a <_strtod_l+0x862>
 80173be:	fa01 f303 	lsl.w	r3, r1, r3
 80173c2:	9311      	str	r3, [sp, #68]	; 0x44
 80173c4:	2300      	movs	r3, #0
 80173c6:	930c      	str	r3, [sp, #48]	; 0x30
 80173c8:	eb09 0802 	add.w	r8, r9, r2
 80173cc:	9b04      	ldr	r3, [sp, #16]
 80173ce:	45c1      	cmp	r9, r8
 80173d0:	4417      	add	r7, r2
 80173d2:	441f      	add	r7, r3
 80173d4:	464b      	mov	r3, r9
 80173d6:	bfa8      	it	ge
 80173d8:	4643      	movge	r3, r8
 80173da:	42bb      	cmp	r3, r7
 80173dc:	bfa8      	it	ge
 80173de:	463b      	movge	r3, r7
 80173e0:	2b00      	cmp	r3, #0
 80173e2:	bfc2      	ittt	gt
 80173e4:	eba8 0803 	subgt.w	r8, r8, r3
 80173e8:	1aff      	subgt	r7, r7, r3
 80173ea:	eba9 0903 	subgt.w	r9, r9, r3
 80173ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80173f0:	2b00      	cmp	r3, #0
 80173f2:	dd17      	ble.n	8017424 <_strtod_l+0x75c>
 80173f4:	4631      	mov	r1, r6
 80173f6:	461a      	mov	r2, r3
 80173f8:	4620      	mov	r0, r4
 80173fa:	f001 ff09 	bl	8019210 <__pow5mult>
 80173fe:	4606      	mov	r6, r0
 8017400:	2800      	cmp	r0, #0
 8017402:	f43f aead 	beq.w	8017160 <_strtod_l+0x498>
 8017406:	4601      	mov	r1, r0
 8017408:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801740a:	4620      	mov	r0, r4
 801740c:	f001 fe5a 	bl	80190c4 <__multiply>
 8017410:	900f      	str	r0, [sp, #60]	; 0x3c
 8017412:	2800      	cmp	r0, #0
 8017414:	f43f aea4 	beq.w	8017160 <_strtod_l+0x498>
 8017418:	991e      	ldr	r1, [sp, #120]	; 0x78
 801741a:	4620      	mov	r0, r4
 801741c:	f001 fd36 	bl	8018e8c <_Bfree>
 8017420:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017422:	931e      	str	r3, [sp, #120]	; 0x78
 8017424:	f1b8 0f00 	cmp.w	r8, #0
 8017428:	f300 8091 	bgt.w	801754e <_strtod_l+0x886>
 801742c:	9b08      	ldr	r3, [sp, #32]
 801742e:	2b00      	cmp	r3, #0
 8017430:	dd08      	ble.n	8017444 <_strtod_l+0x77c>
 8017432:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8017434:	9907      	ldr	r1, [sp, #28]
 8017436:	4620      	mov	r0, r4
 8017438:	f001 feea 	bl	8019210 <__pow5mult>
 801743c:	9007      	str	r0, [sp, #28]
 801743e:	2800      	cmp	r0, #0
 8017440:	f43f ae8e 	beq.w	8017160 <_strtod_l+0x498>
 8017444:	2f00      	cmp	r7, #0
 8017446:	dd08      	ble.n	801745a <_strtod_l+0x792>
 8017448:	9907      	ldr	r1, [sp, #28]
 801744a:	463a      	mov	r2, r7
 801744c:	4620      	mov	r0, r4
 801744e:	f001 ff39 	bl	80192c4 <__lshift>
 8017452:	9007      	str	r0, [sp, #28]
 8017454:	2800      	cmp	r0, #0
 8017456:	f43f ae83 	beq.w	8017160 <_strtod_l+0x498>
 801745a:	f1b9 0f00 	cmp.w	r9, #0
 801745e:	dd08      	ble.n	8017472 <_strtod_l+0x7aa>
 8017460:	4631      	mov	r1, r6
 8017462:	464a      	mov	r2, r9
 8017464:	4620      	mov	r0, r4
 8017466:	f001 ff2d 	bl	80192c4 <__lshift>
 801746a:	4606      	mov	r6, r0
 801746c:	2800      	cmp	r0, #0
 801746e:	f43f ae77 	beq.w	8017160 <_strtod_l+0x498>
 8017472:	9a07      	ldr	r2, [sp, #28]
 8017474:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017476:	4620      	mov	r0, r4
 8017478:	f001 ffac 	bl	80193d4 <__mdiff>
 801747c:	4605      	mov	r5, r0
 801747e:	2800      	cmp	r0, #0
 8017480:	f43f ae6e 	beq.w	8017160 <_strtod_l+0x498>
 8017484:	68c3      	ldr	r3, [r0, #12]
 8017486:	930f      	str	r3, [sp, #60]	; 0x3c
 8017488:	2300      	movs	r3, #0
 801748a:	60c3      	str	r3, [r0, #12]
 801748c:	4631      	mov	r1, r6
 801748e:	f001 ff85 	bl	801939c <__mcmp>
 8017492:	2800      	cmp	r0, #0
 8017494:	da65      	bge.n	8017562 <_strtod_l+0x89a>
 8017496:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017498:	ea53 030a 	orrs.w	r3, r3, sl
 801749c:	f040 8087 	bne.w	80175ae <_strtod_l+0x8e6>
 80174a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80174a4:	2b00      	cmp	r3, #0
 80174a6:	f040 8082 	bne.w	80175ae <_strtod_l+0x8e6>
 80174aa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80174ae:	0d1b      	lsrs	r3, r3, #20
 80174b0:	051b      	lsls	r3, r3, #20
 80174b2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80174b6:	d97a      	bls.n	80175ae <_strtod_l+0x8e6>
 80174b8:	696b      	ldr	r3, [r5, #20]
 80174ba:	b913      	cbnz	r3, 80174c2 <_strtod_l+0x7fa>
 80174bc:	692b      	ldr	r3, [r5, #16]
 80174be:	2b01      	cmp	r3, #1
 80174c0:	dd75      	ble.n	80175ae <_strtod_l+0x8e6>
 80174c2:	4629      	mov	r1, r5
 80174c4:	2201      	movs	r2, #1
 80174c6:	4620      	mov	r0, r4
 80174c8:	f001 fefc 	bl	80192c4 <__lshift>
 80174cc:	4631      	mov	r1, r6
 80174ce:	4605      	mov	r5, r0
 80174d0:	f001 ff64 	bl	801939c <__mcmp>
 80174d4:	2800      	cmp	r0, #0
 80174d6:	dd6a      	ble.n	80175ae <_strtod_l+0x8e6>
 80174d8:	9904      	ldr	r1, [sp, #16]
 80174da:	4a55      	ldr	r2, [pc, #340]	; (8017630 <_strtod_l+0x968>)
 80174dc:	465b      	mov	r3, fp
 80174de:	2900      	cmp	r1, #0
 80174e0:	f000 8085 	beq.w	80175ee <_strtod_l+0x926>
 80174e4:	ea02 010b 	and.w	r1, r2, fp
 80174e8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80174ec:	dc7f      	bgt.n	80175ee <_strtod_l+0x926>
 80174ee:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80174f2:	f77f aeaa 	ble.w	801724a <_strtod_l+0x582>
 80174f6:	4a4f      	ldr	r2, [pc, #316]	; (8017634 <_strtod_l+0x96c>)
 80174f8:	2300      	movs	r3, #0
 80174fa:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80174fe:	4650      	mov	r0, sl
 8017500:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8017504:	4659      	mov	r1, fp
 8017506:	f7e9 f877 	bl	80005f8 <__aeabi_dmul>
 801750a:	460b      	mov	r3, r1
 801750c:	4303      	orrs	r3, r0
 801750e:	bf08      	it	eq
 8017510:	2322      	moveq	r3, #34	; 0x22
 8017512:	4682      	mov	sl, r0
 8017514:	468b      	mov	fp, r1
 8017516:	bf08      	it	eq
 8017518:	6023      	streq	r3, [r4, #0]
 801751a:	e62b      	b.n	8017174 <_strtod_l+0x4ac>
 801751c:	f04f 32ff 	mov.w	r2, #4294967295
 8017520:	fa02 f303 	lsl.w	r3, r2, r3
 8017524:	ea03 0a0a 	and.w	sl, r3, sl
 8017528:	e6de      	b.n	80172e8 <_strtod_l+0x620>
 801752a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801752e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8017532:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8017536:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801753a:	fa01 f308 	lsl.w	r3, r1, r8
 801753e:	930c      	str	r3, [sp, #48]	; 0x30
 8017540:	9111      	str	r1, [sp, #68]	; 0x44
 8017542:	e741      	b.n	80173c8 <_strtod_l+0x700>
 8017544:	2300      	movs	r3, #0
 8017546:	930c      	str	r3, [sp, #48]	; 0x30
 8017548:	2301      	movs	r3, #1
 801754a:	9311      	str	r3, [sp, #68]	; 0x44
 801754c:	e73c      	b.n	80173c8 <_strtod_l+0x700>
 801754e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017550:	4642      	mov	r2, r8
 8017552:	4620      	mov	r0, r4
 8017554:	f001 feb6 	bl	80192c4 <__lshift>
 8017558:	901e      	str	r0, [sp, #120]	; 0x78
 801755a:	2800      	cmp	r0, #0
 801755c:	f47f af66 	bne.w	801742c <_strtod_l+0x764>
 8017560:	e5fe      	b.n	8017160 <_strtod_l+0x498>
 8017562:	465f      	mov	r7, fp
 8017564:	d16e      	bne.n	8017644 <_strtod_l+0x97c>
 8017566:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017568:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801756c:	b342      	cbz	r2, 80175c0 <_strtod_l+0x8f8>
 801756e:	4a32      	ldr	r2, [pc, #200]	; (8017638 <_strtod_l+0x970>)
 8017570:	4293      	cmp	r3, r2
 8017572:	d128      	bne.n	80175c6 <_strtod_l+0x8fe>
 8017574:	9b04      	ldr	r3, [sp, #16]
 8017576:	4650      	mov	r0, sl
 8017578:	b1eb      	cbz	r3, 80175b6 <_strtod_l+0x8ee>
 801757a:	4a2d      	ldr	r2, [pc, #180]	; (8017630 <_strtod_l+0x968>)
 801757c:	403a      	ands	r2, r7
 801757e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8017582:	f04f 31ff 	mov.w	r1, #4294967295
 8017586:	d819      	bhi.n	80175bc <_strtod_l+0x8f4>
 8017588:	0d12      	lsrs	r2, r2, #20
 801758a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801758e:	fa01 f303 	lsl.w	r3, r1, r3
 8017592:	4298      	cmp	r0, r3
 8017594:	d117      	bne.n	80175c6 <_strtod_l+0x8fe>
 8017596:	4b29      	ldr	r3, [pc, #164]	; (801763c <_strtod_l+0x974>)
 8017598:	429f      	cmp	r7, r3
 801759a:	d102      	bne.n	80175a2 <_strtod_l+0x8da>
 801759c:	3001      	adds	r0, #1
 801759e:	f43f addf 	beq.w	8017160 <_strtod_l+0x498>
 80175a2:	4b23      	ldr	r3, [pc, #140]	; (8017630 <_strtod_l+0x968>)
 80175a4:	403b      	ands	r3, r7
 80175a6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80175aa:	f04f 0a00 	mov.w	sl, #0
 80175ae:	9b04      	ldr	r3, [sp, #16]
 80175b0:	2b00      	cmp	r3, #0
 80175b2:	d1a0      	bne.n	80174f6 <_strtod_l+0x82e>
 80175b4:	e5de      	b.n	8017174 <_strtod_l+0x4ac>
 80175b6:	f04f 33ff 	mov.w	r3, #4294967295
 80175ba:	e7ea      	b.n	8017592 <_strtod_l+0x8ca>
 80175bc:	460b      	mov	r3, r1
 80175be:	e7e8      	b.n	8017592 <_strtod_l+0x8ca>
 80175c0:	ea53 030a 	orrs.w	r3, r3, sl
 80175c4:	d088      	beq.n	80174d8 <_strtod_l+0x810>
 80175c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80175c8:	b1db      	cbz	r3, 8017602 <_strtod_l+0x93a>
 80175ca:	423b      	tst	r3, r7
 80175cc:	d0ef      	beq.n	80175ae <_strtod_l+0x8e6>
 80175ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80175d0:	9a04      	ldr	r2, [sp, #16]
 80175d2:	4650      	mov	r0, sl
 80175d4:	4659      	mov	r1, fp
 80175d6:	b1c3      	cbz	r3, 801760a <_strtod_l+0x942>
 80175d8:	f7ff fb58 	bl	8016c8c <sulp>
 80175dc:	4602      	mov	r2, r0
 80175de:	460b      	mov	r3, r1
 80175e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80175e4:	f7e8 fe52 	bl	800028c <__adddf3>
 80175e8:	4682      	mov	sl, r0
 80175ea:	468b      	mov	fp, r1
 80175ec:	e7df      	b.n	80175ae <_strtod_l+0x8e6>
 80175ee:	4013      	ands	r3, r2
 80175f0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80175f4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80175f8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80175fc:	f04f 3aff 	mov.w	sl, #4294967295
 8017600:	e7d5      	b.n	80175ae <_strtod_l+0x8e6>
 8017602:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017604:	ea13 0f0a 	tst.w	r3, sl
 8017608:	e7e0      	b.n	80175cc <_strtod_l+0x904>
 801760a:	f7ff fb3f 	bl	8016c8c <sulp>
 801760e:	4602      	mov	r2, r0
 8017610:	460b      	mov	r3, r1
 8017612:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017616:	f7e8 fe37 	bl	8000288 <__aeabi_dsub>
 801761a:	2200      	movs	r2, #0
 801761c:	2300      	movs	r3, #0
 801761e:	4682      	mov	sl, r0
 8017620:	468b      	mov	fp, r1
 8017622:	f7e9 fa51 	bl	8000ac8 <__aeabi_dcmpeq>
 8017626:	2800      	cmp	r0, #0
 8017628:	d0c1      	beq.n	80175ae <_strtod_l+0x8e6>
 801762a:	e60e      	b.n	801724a <_strtod_l+0x582>
 801762c:	fffffc02 	.word	0xfffffc02
 8017630:	7ff00000 	.word	0x7ff00000
 8017634:	39500000 	.word	0x39500000
 8017638:	000fffff 	.word	0x000fffff
 801763c:	7fefffff 	.word	0x7fefffff
 8017640:	0801c308 	.word	0x0801c308
 8017644:	4631      	mov	r1, r6
 8017646:	4628      	mov	r0, r5
 8017648:	f002 f824 	bl	8019694 <__ratio>
 801764c:	ec59 8b10 	vmov	r8, r9, d0
 8017650:	ee10 0a10 	vmov	r0, s0
 8017654:	2200      	movs	r2, #0
 8017656:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801765a:	4649      	mov	r1, r9
 801765c:	f7e9 fa48 	bl	8000af0 <__aeabi_dcmple>
 8017660:	2800      	cmp	r0, #0
 8017662:	d07c      	beq.n	801775e <_strtod_l+0xa96>
 8017664:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017666:	2b00      	cmp	r3, #0
 8017668:	d04c      	beq.n	8017704 <_strtod_l+0xa3c>
 801766a:	4b95      	ldr	r3, [pc, #596]	; (80178c0 <_strtod_l+0xbf8>)
 801766c:	2200      	movs	r2, #0
 801766e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8017672:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80178c0 <_strtod_l+0xbf8>
 8017676:	f04f 0800 	mov.w	r8, #0
 801767a:	4b92      	ldr	r3, [pc, #584]	; (80178c4 <_strtod_l+0xbfc>)
 801767c:	403b      	ands	r3, r7
 801767e:	9311      	str	r3, [sp, #68]	; 0x44
 8017680:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017682:	4b91      	ldr	r3, [pc, #580]	; (80178c8 <_strtod_l+0xc00>)
 8017684:	429a      	cmp	r2, r3
 8017686:	f040 80b2 	bne.w	80177ee <_strtod_l+0xb26>
 801768a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801768e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017692:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8017696:	ec4b ab10 	vmov	d0, sl, fp
 801769a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801769e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80176a2:	f001 ff1f 	bl	80194e4 <__ulp>
 80176a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80176aa:	ec53 2b10 	vmov	r2, r3, d0
 80176ae:	f7e8 ffa3 	bl	80005f8 <__aeabi_dmul>
 80176b2:	4652      	mov	r2, sl
 80176b4:	465b      	mov	r3, fp
 80176b6:	f7e8 fde9 	bl	800028c <__adddf3>
 80176ba:	460b      	mov	r3, r1
 80176bc:	4981      	ldr	r1, [pc, #516]	; (80178c4 <_strtod_l+0xbfc>)
 80176be:	4a83      	ldr	r2, [pc, #524]	; (80178cc <_strtod_l+0xc04>)
 80176c0:	4019      	ands	r1, r3
 80176c2:	4291      	cmp	r1, r2
 80176c4:	4682      	mov	sl, r0
 80176c6:	d95e      	bls.n	8017786 <_strtod_l+0xabe>
 80176c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80176ca:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80176ce:	4293      	cmp	r3, r2
 80176d0:	d103      	bne.n	80176da <_strtod_l+0xa12>
 80176d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80176d4:	3301      	adds	r3, #1
 80176d6:	f43f ad43 	beq.w	8017160 <_strtod_l+0x498>
 80176da:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80178d8 <_strtod_l+0xc10>
 80176de:	f04f 3aff 	mov.w	sl, #4294967295
 80176e2:	991e      	ldr	r1, [sp, #120]	; 0x78
 80176e4:	4620      	mov	r0, r4
 80176e6:	f001 fbd1 	bl	8018e8c <_Bfree>
 80176ea:	9907      	ldr	r1, [sp, #28]
 80176ec:	4620      	mov	r0, r4
 80176ee:	f001 fbcd 	bl	8018e8c <_Bfree>
 80176f2:	4631      	mov	r1, r6
 80176f4:	4620      	mov	r0, r4
 80176f6:	f001 fbc9 	bl	8018e8c <_Bfree>
 80176fa:	4629      	mov	r1, r5
 80176fc:	4620      	mov	r0, r4
 80176fe:	f001 fbc5 	bl	8018e8c <_Bfree>
 8017702:	e613      	b.n	801732c <_strtod_l+0x664>
 8017704:	f1ba 0f00 	cmp.w	sl, #0
 8017708:	d11b      	bne.n	8017742 <_strtod_l+0xa7a>
 801770a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801770e:	b9f3      	cbnz	r3, 801774e <_strtod_l+0xa86>
 8017710:	4b6b      	ldr	r3, [pc, #428]	; (80178c0 <_strtod_l+0xbf8>)
 8017712:	2200      	movs	r2, #0
 8017714:	4640      	mov	r0, r8
 8017716:	4649      	mov	r1, r9
 8017718:	f7e9 f9e0 	bl	8000adc <__aeabi_dcmplt>
 801771c:	b9d0      	cbnz	r0, 8017754 <_strtod_l+0xa8c>
 801771e:	4640      	mov	r0, r8
 8017720:	4649      	mov	r1, r9
 8017722:	4b6b      	ldr	r3, [pc, #428]	; (80178d0 <_strtod_l+0xc08>)
 8017724:	2200      	movs	r2, #0
 8017726:	f7e8 ff67 	bl	80005f8 <__aeabi_dmul>
 801772a:	4680      	mov	r8, r0
 801772c:	4689      	mov	r9, r1
 801772e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8017732:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8017736:	931b      	str	r3, [sp, #108]	; 0x6c
 8017738:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801773c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8017740:	e79b      	b.n	801767a <_strtod_l+0x9b2>
 8017742:	f1ba 0f01 	cmp.w	sl, #1
 8017746:	d102      	bne.n	801774e <_strtod_l+0xa86>
 8017748:	2f00      	cmp	r7, #0
 801774a:	f43f ad7e 	beq.w	801724a <_strtod_l+0x582>
 801774e:	4b61      	ldr	r3, [pc, #388]	; (80178d4 <_strtod_l+0xc0c>)
 8017750:	2200      	movs	r2, #0
 8017752:	e78c      	b.n	801766e <_strtod_l+0x9a6>
 8017754:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80178d0 <_strtod_l+0xc08>
 8017758:	f04f 0800 	mov.w	r8, #0
 801775c:	e7e7      	b.n	801772e <_strtod_l+0xa66>
 801775e:	4b5c      	ldr	r3, [pc, #368]	; (80178d0 <_strtod_l+0xc08>)
 8017760:	4640      	mov	r0, r8
 8017762:	4649      	mov	r1, r9
 8017764:	2200      	movs	r2, #0
 8017766:	f7e8 ff47 	bl	80005f8 <__aeabi_dmul>
 801776a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801776c:	4680      	mov	r8, r0
 801776e:	4689      	mov	r9, r1
 8017770:	b933      	cbnz	r3, 8017780 <_strtod_l+0xab8>
 8017772:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017776:	9012      	str	r0, [sp, #72]	; 0x48
 8017778:	9313      	str	r3, [sp, #76]	; 0x4c
 801777a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801777e:	e7dd      	b.n	801773c <_strtod_l+0xa74>
 8017780:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8017784:	e7f9      	b.n	801777a <_strtod_l+0xab2>
 8017786:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801778a:	9b04      	ldr	r3, [sp, #16]
 801778c:	2b00      	cmp	r3, #0
 801778e:	d1a8      	bne.n	80176e2 <_strtod_l+0xa1a>
 8017790:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017794:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017796:	0d1b      	lsrs	r3, r3, #20
 8017798:	051b      	lsls	r3, r3, #20
 801779a:	429a      	cmp	r2, r3
 801779c:	d1a1      	bne.n	80176e2 <_strtod_l+0xa1a>
 801779e:	4640      	mov	r0, r8
 80177a0:	4649      	mov	r1, r9
 80177a2:	f7e9 fa89 	bl	8000cb8 <__aeabi_d2lz>
 80177a6:	f7e8 fef9 	bl	800059c <__aeabi_l2d>
 80177aa:	4602      	mov	r2, r0
 80177ac:	460b      	mov	r3, r1
 80177ae:	4640      	mov	r0, r8
 80177b0:	4649      	mov	r1, r9
 80177b2:	f7e8 fd69 	bl	8000288 <__aeabi_dsub>
 80177b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80177b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80177bc:	ea43 030a 	orr.w	r3, r3, sl
 80177c0:	4313      	orrs	r3, r2
 80177c2:	4680      	mov	r8, r0
 80177c4:	4689      	mov	r9, r1
 80177c6:	d053      	beq.n	8017870 <_strtod_l+0xba8>
 80177c8:	a335      	add	r3, pc, #212	; (adr r3, 80178a0 <_strtod_l+0xbd8>)
 80177ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177ce:	f7e9 f985 	bl	8000adc <__aeabi_dcmplt>
 80177d2:	2800      	cmp	r0, #0
 80177d4:	f47f acce 	bne.w	8017174 <_strtod_l+0x4ac>
 80177d8:	a333      	add	r3, pc, #204	; (adr r3, 80178a8 <_strtod_l+0xbe0>)
 80177da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177de:	4640      	mov	r0, r8
 80177e0:	4649      	mov	r1, r9
 80177e2:	f7e9 f999 	bl	8000b18 <__aeabi_dcmpgt>
 80177e6:	2800      	cmp	r0, #0
 80177e8:	f43f af7b 	beq.w	80176e2 <_strtod_l+0xa1a>
 80177ec:	e4c2      	b.n	8017174 <_strtod_l+0x4ac>
 80177ee:	9b04      	ldr	r3, [sp, #16]
 80177f0:	b333      	cbz	r3, 8017840 <_strtod_l+0xb78>
 80177f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80177f4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80177f8:	d822      	bhi.n	8017840 <_strtod_l+0xb78>
 80177fa:	a32d      	add	r3, pc, #180	; (adr r3, 80178b0 <_strtod_l+0xbe8>)
 80177fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017800:	4640      	mov	r0, r8
 8017802:	4649      	mov	r1, r9
 8017804:	f7e9 f974 	bl	8000af0 <__aeabi_dcmple>
 8017808:	b1a0      	cbz	r0, 8017834 <_strtod_l+0xb6c>
 801780a:	4649      	mov	r1, r9
 801780c:	4640      	mov	r0, r8
 801780e:	f7e9 f9cb 	bl	8000ba8 <__aeabi_d2uiz>
 8017812:	2801      	cmp	r0, #1
 8017814:	bf38      	it	cc
 8017816:	2001      	movcc	r0, #1
 8017818:	f7e8 fe74 	bl	8000504 <__aeabi_ui2d>
 801781c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801781e:	4680      	mov	r8, r0
 8017820:	4689      	mov	r9, r1
 8017822:	bb13      	cbnz	r3, 801786a <_strtod_l+0xba2>
 8017824:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017828:	9014      	str	r0, [sp, #80]	; 0x50
 801782a:	9315      	str	r3, [sp, #84]	; 0x54
 801782c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8017830:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8017834:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017836:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017838:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801783c:	1a9b      	subs	r3, r3, r2
 801783e:	930d      	str	r3, [sp, #52]	; 0x34
 8017840:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017844:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8017848:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801784c:	f001 fe4a 	bl	80194e4 <__ulp>
 8017850:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017854:	ec53 2b10 	vmov	r2, r3, d0
 8017858:	f7e8 fece 	bl	80005f8 <__aeabi_dmul>
 801785c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017860:	f7e8 fd14 	bl	800028c <__adddf3>
 8017864:	4682      	mov	sl, r0
 8017866:	468b      	mov	fp, r1
 8017868:	e78f      	b.n	801778a <_strtod_l+0xac2>
 801786a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801786e:	e7dd      	b.n	801782c <_strtod_l+0xb64>
 8017870:	a311      	add	r3, pc, #68	; (adr r3, 80178b8 <_strtod_l+0xbf0>)
 8017872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017876:	f7e9 f931 	bl	8000adc <__aeabi_dcmplt>
 801787a:	e7b4      	b.n	80177e6 <_strtod_l+0xb1e>
 801787c:	2300      	movs	r3, #0
 801787e:	930e      	str	r3, [sp, #56]	; 0x38
 8017880:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8017882:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017884:	6013      	str	r3, [r2, #0]
 8017886:	f7ff ba65 	b.w	8016d54 <_strtod_l+0x8c>
 801788a:	2b65      	cmp	r3, #101	; 0x65
 801788c:	f43f ab5d 	beq.w	8016f4a <_strtod_l+0x282>
 8017890:	2b45      	cmp	r3, #69	; 0x45
 8017892:	f43f ab5a 	beq.w	8016f4a <_strtod_l+0x282>
 8017896:	2201      	movs	r2, #1
 8017898:	f7ff bb92 	b.w	8016fc0 <_strtod_l+0x2f8>
 801789c:	f3af 8000 	nop.w
 80178a0:	94a03595 	.word	0x94a03595
 80178a4:	3fdfffff 	.word	0x3fdfffff
 80178a8:	35afe535 	.word	0x35afe535
 80178ac:	3fe00000 	.word	0x3fe00000
 80178b0:	ffc00000 	.word	0xffc00000
 80178b4:	41dfffff 	.word	0x41dfffff
 80178b8:	94a03595 	.word	0x94a03595
 80178bc:	3fcfffff 	.word	0x3fcfffff
 80178c0:	3ff00000 	.word	0x3ff00000
 80178c4:	7ff00000 	.word	0x7ff00000
 80178c8:	7fe00000 	.word	0x7fe00000
 80178cc:	7c9fffff 	.word	0x7c9fffff
 80178d0:	3fe00000 	.word	0x3fe00000
 80178d4:	bff00000 	.word	0xbff00000
 80178d8:	7fefffff 	.word	0x7fefffff

080178dc <_strtod_r>:
 80178dc:	4b01      	ldr	r3, [pc, #4]	; (80178e4 <_strtod_r+0x8>)
 80178de:	f7ff b9f3 	b.w	8016cc8 <_strtod_l>
 80178e2:	bf00      	nop
 80178e4:	20000a14 	.word	0x20000a14

080178e8 <_strtol_l.isra.0>:
 80178e8:	2b01      	cmp	r3, #1
 80178ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80178ee:	d001      	beq.n	80178f4 <_strtol_l.isra.0+0xc>
 80178f0:	2b24      	cmp	r3, #36	; 0x24
 80178f2:	d906      	bls.n	8017902 <_strtol_l.isra.0+0x1a>
 80178f4:	f7fe f9d2 	bl	8015c9c <__errno>
 80178f8:	2316      	movs	r3, #22
 80178fa:	6003      	str	r3, [r0, #0]
 80178fc:	2000      	movs	r0, #0
 80178fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017902:	4f3a      	ldr	r7, [pc, #232]	; (80179ec <_strtol_l.isra.0+0x104>)
 8017904:	468e      	mov	lr, r1
 8017906:	4676      	mov	r6, lr
 8017908:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801790c:	5de5      	ldrb	r5, [r4, r7]
 801790e:	f015 0508 	ands.w	r5, r5, #8
 8017912:	d1f8      	bne.n	8017906 <_strtol_l.isra.0+0x1e>
 8017914:	2c2d      	cmp	r4, #45	; 0x2d
 8017916:	d134      	bne.n	8017982 <_strtol_l.isra.0+0x9a>
 8017918:	f89e 4000 	ldrb.w	r4, [lr]
 801791c:	f04f 0801 	mov.w	r8, #1
 8017920:	f106 0e02 	add.w	lr, r6, #2
 8017924:	2b00      	cmp	r3, #0
 8017926:	d05c      	beq.n	80179e2 <_strtol_l.isra.0+0xfa>
 8017928:	2b10      	cmp	r3, #16
 801792a:	d10c      	bne.n	8017946 <_strtol_l.isra.0+0x5e>
 801792c:	2c30      	cmp	r4, #48	; 0x30
 801792e:	d10a      	bne.n	8017946 <_strtol_l.isra.0+0x5e>
 8017930:	f89e 4000 	ldrb.w	r4, [lr]
 8017934:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8017938:	2c58      	cmp	r4, #88	; 0x58
 801793a:	d14d      	bne.n	80179d8 <_strtol_l.isra.0+0xf0>
 801793c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8017940:	2310      	movs	r3, #16
 8017942:	f10e 0e02 	add.w	lr, lr, #2
 8017946:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801794a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801794e:	2600      	movs	r6, #0
 8017950:	fbbc f9f3 	udiv	r9, ip, r3
 8017954:	4635      	mov	r5, r6
 8017956:	fb03 ca19 	mls	sl, r3, r9, ip
 801795a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801795e:	2f09      	cmp	r7, #9
 8017960:	d818      	bhi.n	8017994 <_strtol_l.isra.0+0xac>
 8017962:	463c      	mov	r4, r7
 8017964:	42a3      	cmp	r3, r4
 8017966:	dd24      	ble.n	80179b2 <_strtol_l.isra.0+0xca>
 8017968:	2e00      	cmp	r6, #0
 801796a:	db1f      	blt.n	80179ac <_strtol_l.isra.0+0xc4>
 801796c:	45a9      	cmp	r9, r5
 801796e:	d31d      	bcc.n	80179ac <_strtol_l.isra.0+0xc4>
 8017970:	d101      	bne.n	8017976 <_strtol_l.isra.0+0x8e>
 8017972:	45a2      	cmp	sl, r4
 8017974:	db1a      	blt.n	80179ac <_strtol_l.isra.0+0xc4>
 8017976:	fb05 4503 	mla	r5, r5, r3, r4
 801797a:	2601      	movs	r6, #1
 801797c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8017980:	e7eb      	b.n	801795a <_strtol_l.isra.0+0x72>
 8017982:	2c2b      	cmp	r4, #43	; 0x2b
 8017984:	bf08      	it	eq
 8017986:	f89e 4000 	ldrbeq.w	r4, [lr]
 801798a:	46a8      	mov	r8, r5
 801798c:	bf08      	it	eq
 801798e:	f106 0e02 	addeq.w	lr, r6, #2
 8017992:	e7c7      	b.n	8017924 <_strtol_l.isra.0+0x3c>
 8017994:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8017998:	2f19      	cmp	r7, #25
 801799a:	d801      	bhi.n	80179a0 <_strtol_l.isra.0+0xb8>
 801799c:	3c37      	subs	r4, #55	; 0x37
 801799e:	e7e1      	b.n	8017964 <_strtol_l.isra.0+0x7c>
 80179a0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80179a4:	2f19      	cmp	r7, #25
 80179a6:	d804      	bhi.n	80179b2 <_strtol_l.isra.0+0xca>
 80179a8:	3c57      	subs	r4, #87	; 0x57
 80179aa:	e7db      	b.n	8017964 <_strtol_l.isra.0+0x7c>
 80179ac:	f04f 36ff 	mov.w	r6, #4294967295
 80179b0:	e7e4      	b.n	801797c <_strtol_l.isra.0+0x94>
 80179b2:	2e00      	cmp	r6, #0
 80179b4:	da05      	bge.n	80179c2 <_strtol_l.isra.0+0xda>
 80179b6:	2322      	movs	r3, #34	; 0x22
 80179b8:	6003      	str	r3, [r0, #0]
 80179ba:	4665      	mov	r5, ip
 80179bc:	b942      	cbnz	r2, 80179d0 <_strtol_l.isra.0+0xe8>
 80179be:	4628      	mov	r0, r5
 80179c0:	e79d      	b.n	80178fe <_strtol_l.isra.0+0x16>
 80179c2:	f1b8 0f00 	cmp.w	r8, #0
 80179c6:	d000      	beq.n	80179ca <_strtol_l.isra.0+0xe2>
 80179c8:	426d      	negs	r5, r5
 80179ca:	2a00      	cmp	r2, #0
 80179cc:	d0f7      	beq.n	80179be <_strtol_l.isra.0+0xd6>
 80179ce:	b10e      	cbz	r6, 80179d4 <_strtol_l.isra.0+0xec>
 80179d0:	f10e 31ff 	add.w	r1, lr, #4294967295
 80179d4:	6011      	str	r1, [r2, #0]
 80179d6:	e7f2      	b.n	80179be <_strtol_l.isra.0+0xd6>
 80179d8:	2430      	movs	r4, #48	; 0x30
 80179da:	2b00      	cmp	r3, #0
 80179dc:	d1b3      	bne.n	8017946 <_strtol_l.isra.0+0x5e>
 80179de:	2308      	movs	r3, #8
 80179e0:	e7b1      	b.n	8017946 <_strtol_l.isra.0+0x5e>
 80179e2:	2c30      	cmp	r4, #48	; 0x30
 80179e4:	d0a4      	beq.n	8017930 <_strtol_l.isra.0+0x48>
 80179e6:	230a      	movs	r3, #10
 80179e8:	e7ad      	b.n	8017946 <_strtol_l.isra.0+0x5e>
 80179ea:	bf00      	nop
 80179ec:	0801c331 	.word	0x0801c331

080179f0 <_strtol_r>:
 80179f0:	f7ff bf7a 	b.w	80178e8 <_strtol_l.isra.0>

080179f4 <quorem>:
 80179f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179f8:	6903      	ldr	r3, [r0, #16]
 80179fa:	690c      	ldr	r4, [r1, #16]
 80179fc:	42a3      	cmp	r3, r4
 80179fe:	4607      	mov	r7, r0
 8017a00:	f2c0 8081 	blt.w	8017b06 <quorem+0x112>
 8017a04:	3c01      	subs	r4, #1
 8017a06:	f101 0814 	add.w	r8, r1, #20
 8017a0a:	f100 0514 	add.w	r5, r0, #20
 8017a0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017a12:	9301      	str	r3, [sp, #4]
 8017a14:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017a18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017a1c:	3301      	adds	r3, #1
 8017a1e:	429a      	cmp	r2, r3
 8017a20:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8017a24:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8017a28:	fbb2 f6f3 	udiv	r6, r2, r3
 8017a2c:	d331      	bcc.n	8017a92 <quorem+0x9e>
 8017a2e:	f04f 0e00 	mov.w	lr, #0
 8017a32:	4640      	mov	r0, r8
 8017a34:	46ac      	mov	ip, r5
 8017a36:	46f2      	mov	sl, lr
 8017a38:	f850 2b04 	ldr.w	r2, [r0], #4
 8017a3c:	b293      	uxth	r3, r2
 8017a3e:	fb06 e303 	mla	r3, r6, r3, lr
 8017a42:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8017a46:	b29b      	uxth	r3, r3
 8017a48:	ebaa 0303 	sub.w	r3, sl, r3
 8017a4c:	0c12      	lsrs	r2, r2, #16
 8017a4e:	f8dc a000 	ldr.w	sl, [ip]
 8017a52:	fb06 e202 	mla	r2, r6, r2, lr
 8017a56:	fa13 f38a 	uxtah	r3, r3, sl
 8017a5a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017a5e:	fa1f fa82 	uxth.w	sl, r2
 8017a62:	f8dc 2000 	ldr.w	r2, [ip]
 8017a66:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8017a6a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017a6e:	b29b      	uxth	r3, r3
 8017a70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017a74:	4581      	cmp	r9, r0
 8017a76:	f84c 3b04 	str.w	r3, [ip], #4
 8017a7a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8017a7e:	d2db      	bcs.n	8017a38 <quorem+0x44>
 8017a80:	f855 300b 	ldr.w	r3, [r5, fp]
 8017a84:	b92b      	cbnz	r3, 8017a92 <quorem+0x9e>
 8017a86:	9b01      	ldr	r3, [sp, #4]
 8017a88:	3b04      	subs	r3, #4
 8017a8a:	429d      	cmp	r5, r3
 8017a8c:	461a      	mov	r2, r3
 8017a8e:	d32e      	bcc.n	8017aee <quorem+0xfa>
 8017a90:	613c      	str	r4, [r7, #16]
 8017a92:	4638      	mov	r0, r7
 8017a94:	f001 fc82 	bl	801939c <__mcmp>
 8017a98:	2800      	cmp	r0, #0
 8017a9a:	db24      	blt.n	8017ae6 <quorem+0xf2>
 8017a9c:	3601      	adds	r6, #1
 8017a9e:	4628      	mov	r0, r5
 8017aa0:	f04f 0c00 	mov.w	ip, #0
 8017aa4:	f858 2b04 	ldr.w	r2, [r8], #4
 8017aa8:	f8d0 e000 	ldr.w	lr, [r0]
 8017aac:	b293      	uxth	r3, r2
 8017aae:	ebac 0303 	sub.w	r3, ip, r3
 8017ab2:	0c12      	lsrs	r2, r2, #16
 8017ab4:	fa13 f38e 	uxtah	r3, r3, lr
 8017ab8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8017abc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017ac0:	b29b      	uxth	r3, r3
 8017ac2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017ac6:	45c1      	cmp	r9, r8
 8017ac8:	f840 3b04 	str.w	r3, [r0], #4
 8017acc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017ad0:	d2e8      	bcs.n	8017aa4 <quorem+0xb0>
 8017ad2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017ad6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017ada:	b922      	cbnz	r2, 8017ae6 <quorem+0xf2>
 8017adc:	3b04      	subs	r3, #4
 8017ade:	429d      	cmp	r5, r3
 8017ae0:	461a      	mov	r2, r3
 8017ae2:	d30a      	bcc.n	8017afa <quorem+0x106>
 8017ae4:	613c      	str	r4, [r7, #16]
 8017ae6:	4630      	mov	r0, r6
 8017ae8:	b003      	add	sp, #12
 8017aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017aee:	6812      	ldr	r2, [r2, #0]
 8017af0:	3b04      	subs	r3, #4
 8017af2:	2a00      	cmp	r2, #0
 8017af4:	d1cc      	bne.n	8017a90 <quorem+0x9c>
 8017af6:	3c01      	subs	r4, #1
 8017af8:	e7c7      	b.n	8017a8a <quorem+0x96>
 8017afa:	6812      	ldr	r2, [r2, #0]
 8017afc:	3b04      	subs	r3, #4
 8017afe:	2a00      	cmp	r2, #0
 8017b00:	d1f0      	bne.n	8017ae4 <quorem+0xf0>
 8017b02:	3c01      	subs	r4, #1
 8017b04:	e7eb      	b.n	8017ade <quorem+0xea>
 8017b06:	2000      	movs	r0, #0
 8017b08:	e7ee      	b.n	8017ae8 <quorem+0xf4>
 8017b0a:	0000      	movs	r0, r0
 8017b0c:	0000      	movs	r0, r0
	...

08017b10 <_dtoa_r>:
 8017b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b14:	ed2d 8b02 	vpush	{d8}
 8017b18:	ec57 6b10 	vmov	r6, r7, d0
 8017b1c:	b095      	sub	sp, #84	; 0x54
 8017b1e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017b20:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017b24:	9105      	str	r1, [sp, #20]
 8017b26:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8017b2a:	4604      	mov	r4, r0
 8017b2c:	9209      	str	r2, [sp, #36]	; 0x24
 8017b2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8017b30:	b975      	cbnz	r5, 8017b50 <_dtoa_r+0x40>
 8017b32:	2010      	movs	r0, #16
 8017b34:	f7fe f8dc 	bl	8015cf0 <malloc>
 8017b38:	4602      	mov	r2, r0
 8017b3a:	6260      	str	r0, [r4, #36]	; 0x24
 8017b3c:	b920      	cbnz	r0, 8017b48 <_dtoa_r+0x38>
 8017b3e:	4bb2      	ldr	r3, [pc, #712]	; (8017e08 <_dtoa_r+0x2f8>)
 8017b40:	21ea      	movs	r1, #234	; 0xea
 8017b42:	48b2      	ldr	r0, [pc, #712]	; (8017e0c <_dtoa_r+0x2fc>)
 8017b44:	f001 ffb0 	bl	8019aa8 <__assert_func>
 8017b48:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017b4c:	6005      	str	r5, [r0, #0]
 8017b4e:	60c5      	str	r5, [r0, #12]
 8017b50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017b52:	6819      	ldr	r1, [r3, #0]
 8017b54:	b151      	cbz	r1, 8017b6c <_dtoa_r+0x5c>
 8017b56:	685a      	ldr	r2, [r3, #4]
 8017b58:	604a      	str	r2, [r1, #4]
 8017b5a:	2301      	movs	r3, #1
 8017b5c:	4093      	lsls	r3, r2
 8017b5e:	608b      	str	r3, [r1, #8]
 8017b60:	4620      	mov	r0, r4
 8017b62:	f001 f993 	bl	8018e8c <_Bfree>
 8017b66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017b68:	2200      	movs	r2, #0
 8017b6a:	601a      	str	r2, [r3, #0]
 8017b6c:	1e3b      	subs	r3, r7, #0
 8017b6e:	bfb9      	ittee	lt
 8017b70:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017b74:	9303      	strlt	r3, [sp, #12]
 8017b76:	2300      	movge	r3, #0
 8017b78:	f8c8 3000 	strge.w	r3, [r8]
 8017b7c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8017b80:	4ba3      	ldr	r3, [pc, #652]	; (8017e10 <_dtoa_r+0x300>)
 8017b82:	bfbc      	itt	lt
 8017b84:	2201      	movlt	r2, #1
 8017b86:	f8c8 2000 	strlt.w	r2, [r8]
 8017b8a:	ea33 0309 	bics.w	r3, r3, r9
 8017b8e:	d11b      	bne.n	8017bc8 <_dtoa_r+0xb8>
 8017b90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017b92:	f242 730f 	movw	r3, #9999	; 0x270f
 8017b96:	6013      	str	r3, [r2, #0]
 8017b98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017b9c:	4333      	orrs	r3, r6
 8017b9e:	f000 857a 	beq.w	8018696 <_dtoa_r+0xb86>
 8017ba2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017ba4:	b963      	cbnz	r3, 8017bc0 <_dtoa_r+0xb0>
 8017ba6:	4b9b      	ldr	r3, [pc, #620]	; (8017e14 <_dtoa_r+0x304>)
 8017ba8:	e024      	b.n	8017bf4 <_dtoa_r+0xe4>
 8017baa:	4b9b      	ldr	r3, [pc, #620]	; (8017e18 <_dtoa_r+0x308>)
 8017bac:	9300      	str	r3, [sp, #0]
 8017bae:	3308      	adds	r3, #8
 8017bb0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017bb2:	6013      	str	r3, [r2, #0]
 8017bb4:	9800      	ldr	r0, [sp, #0]
 8017bb6:	b015      	add	sp, #84	; 0x54
 8017bb8:	ecbd 8b02 	vpop	{d8}
 8017bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017bc0:	4b94      	ldr	r3, [pc, #592]	; (8017e14 <_dtoa_r+0x304>)
 8017bc2:	9300      	str	r3, [sp, #0]
 8017bc4:	3303      	adds	r3, #3
 8017bc6:	e7f3      	b.n	8017bb0 <_dtoa_r+0xa0>
 8017bc8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017bcc:	2200      	movs	r2, #0
 8017bce:	ec51 0b17 	vmov	r0, r1, d7
 8017bd2:	2300      	movs	r3, #0
 8017bd4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8017bd8:	f7e8 ff76 	bl	8000ac8 <__aeabi_dcmpeq>
 8017bdc:	4680      	mov	r8, r0
 8017bde:	b158      	cbz	r0, 8017bf8 <_dtoa_r+0xe8>
 8017be0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017be2:	2301      	movs	r3, #1
 8017be4:	6013      	str	r3, [r2, #0]
 8017be6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017be8:	2b00      	cmp	r3, #0
 8017bea:	f000 8551 	beq.w	8018690 <_dtoa_r+0xb80>
 8017bee:	488b      	ldr	r0, [pc, #556]	; (8017e1c <_dtoa_r+0x30c>)
 8017bf0:	6018      	str	r0, [r3, #0]
 8017bf2:	1e43      	subs	r3, r0, #1
 8017bf4:	9300      	str	r3, [sp, #0]
 8017bf6:	e7dd      	b.n	8017bb4 <_dtoa_r+0xa4>
 8017bf8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8017bfc:	aa12      	add	r2, sp, #72	; 0x48
 8017bfe:	a913      	add	r1, sp, #76	; 0x4c
 8017c00:	4620      	mov	r0, r4
 8017c02:	f001 fceb 	bl	80195dc <__d2b>
 8017c06:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8017c0a:	4683      	mov	fp, r0
 8017c0c:	2d00      	cmp	r5, #0
 8017c0e:	d07c      	beq.n	8017d0a <_dtoa_r+0x1fa>
 8017c10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017c12:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8017c16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017c1a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8017c1e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8017c22:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8017c26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8017c2a:	4b7d      	ldr	r3, [pc, #500]	; (8017e20 <_dtoa_r+0x310>)
 8017c2c:	2200      	movs	r2, #0
 8017c2e:	4630      	mov	r0, r6
 8017c30:	4639      	mov	r1, r7
 8017c32:	f7e8 fb29 	bl	8000288 <__aeabi_dsub>
 8017c36:	a36e      	add	r3, pc, #440	; (adr r3, 8017df0 <_dtoa_r+0x2e0>)
 8017c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c3c:	f7e8 fcdc 	bl	80005f8 <__aeabi_dmul>
 8017c40:	a36d      	add	r3, pc, #436	; (adr r3, 8017df8 <_dtoa_r+0x2e8>)
 8017c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c46:	f7e8 fb21 	bl	800028c <__adddf3>
 8017c4a:	4606      	mov	r6, r0
 8017c4c:	4628      	mov	r0, r5
 8017c4e:	460f      	mov	r7, r1
 8017c50:	f7e8 fc68 	bl	8000524 <__aeabi_i2d>
 8017c54:	a36a      	add	r3, pc, #424	; (adr r3, 8017e00 <_dtoa_r+0x2f0>)
 8017c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c5a:	f7e8 fccd 	bl	80005f8 <__aeabi_dmul>
 8017c5e:	4602      	mov	r2, r0
 8017c60:	460b      	mov	r3, r1
 8017c62:	4630      	mov	r0, r6
 8017c64:	4639      	mov	r1, r7
 8017c66:	f7e8 fb11 	bl	800028c <__adddf3>
 8017c6a:	4606      	mov	r6, r0
 8017c6c:	460f      	mov	r7, r1
 8017c6e:	f7e8 ff73 	bl	8000b58 <__aeabi_d2iz>
 8017c72:	2200      	movs	r2, #0
 8017c74:	4682      	mov	sl, r0
 8017c76:	2300      	movs	r3, #0
 8017c78:	4630      	mov	r0, r6
 8017c7a:	4639      	mov	r1, r7
 8017c7c:	f7e8 ff2e 	bl	8000adc <__aeabi_dcmplt>
 8017c80:	b148      	cbz	r0, 8017c96 <_dtoa_r+0x186>
 8017c82:	4650      	mov	r0, sl
 8017c84:	f7e8 fc4e 	bl	8000524 <__aeabi_i2d>
 8017c88:	4632      	mov	r2, r6
 8017c8a:	463b      	mov	r3, r7
 8017c8c:	f7e8 ff1c 	bl	8000ac8 <__aeabi_dcmpeq>
 8017c90:	b908      	cbnz	r0, 8017c96 <_dtoa_r+0x186>
 8017c92:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017c96:	f1ba 0f16 	cmp.w	sl, #22
 8017c9a:	d854      	bhi.n	8017d46 <_dtoa_r+0x236>
 8017c9c:	4b61      	ldr	r3, [pc, #388]	; (8017e24 <_dtoa_r+0x314>)
 8017c9e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ca6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017caa:	f7e8 ff17 	bl	8000adc <__aeabi_dcmplt>
 8017cae:	2800      	cmp	r0, #0
 8017cb0:	d04b      	beq.n	8017d4a <_dtoa_r+0x23a>
 8017cb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017cb6:	2300      	movs	r3, #0
 8017cb8:	930e      	str	r3, [sp, #56]	; 0x38
 8017cba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017cbc:	1b5d      	subs	r5, r3, r5
 8017cbe:	1e6b      	subs	r3, r5, #1
 8017cc0:	9304      	str	r3, [sp, #16]
 8017cc2:	bf43      	ittte	mi
 8017cc4:	2300      	movmi	r3, #0
 8017cc6:	f1c5 0801 	rsbmi	r8, r5, #1
 8017cca:	9304      	strmi	r3, [sp, #16]
 8017ccc:	f04f 0800 	movpl.w	r8, #0
 8017cd0:	f1ba 0f00 	cmp.w	sl, #0
 8017cd4:	db3b      	blt.n	8017d4e <_dtoa_r+0x23e>
 8017cd6:	9b04      	ldr	r3, [sp, #16]
 8017cd8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8017cdc:	4453      	add	r3, sl
 8017cde:	9304      	str	r3, [sp, #16]
 8017ce0:	2300      	movs	r3, #0
 8017ce2:	9306      	str	r3, [sp, #24]
 8017ce4:	9b05      	ldr	r3, [sp, #20]
 8017ce6:	2b09      	cmp	r3, #9
 8017ce8:	d869      	bhi.n	8017dbe <_dtoa_r+0x2ae>
 8017cea:	2b05      	cmp	r3, #5
 8017cec:	bfc4      	itt	gt
 8017cee:	3b04      	subgt	r3, #4
 8017cf0:	9305      	strgt	r3, [sp, #20]
 8017cf2:	9b05      	ldr	r3, [sp, #20]
 8017cf4:	f1a3 0302 	sub.w	r3, r3, #2
 8017cf8:	bfcc      	ite	gt
 8017cfa:	2500      	movgt	r5, #0
 8017cfc:	2501      	movle	r5, #1
 8017cfe:	2b03      	cmp	r3, #3
 8017d00:	d869      	bhi.n	8017dd6 <_dtoa_r+0x2c6>
 8017d02:	e8df f003 	tbb	[pc, r3]
 8017d06:	4e2c      	.short	0x4e2c
 8017d08:	5a4c      	.short	0x5a4c
 8017d0a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8017d0e:	441d      	add	r5, r3
 8017d10:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8017d14:	2b20      	cmp	r3, #32
 8017d16:	bfc1      	itttt	gt
 8017d18:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8017d1c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8017d20:	fa09 f303 	lslgt.w	r3, r9, r3
 8017d24:	fa26 f000 	lsrgt.w	r0, r6, r0
 8017d28:	bfda      	itte	le
 8017d2a:	f1c3 0320 	rsble	r3, r3, #32
 8017d2e:	fa06 f003 	lslle.w	r0, r6, r3
 8017d32:	4318      	orrgt	r0, r3
 8017d34:	f7e8 fbe6 	bl	8000504 <__aeabi_ui2d>
 8017d38:	2301      	movs	r3, #1
 8017d3a:	4606      	mov	r6, r0
 8017d3c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8017d40:	3d01      	subs	r5, #1
 8017d42:	9310      	str	r3, [sp, #64]	; 0x40
 8017d44:	e771      	b.n	8017c2a <_dtoa_r+0x11a>
 8017d46:	2301      	movs	r3, #1
 8017d48:	e7b6      	b.n	8017cb8 <_dtoa_r+0x1a8>
 8017d4a:	900e      	str	r0, [sp, #56]	; 0x38
 8017d4c:	e7b5      	b.n	8017cba <_dtoa_r+0x1aa>
 8017d4e:	f1ca 0300 	rsb	r3, sl, #0
 8017d52:	9306      	str	r3, [sp, #24]
 8017d54:	2300      	movs	r3, #0
 8017d56:	eba8 080a 	sub.w	r8, r8, sl
 8017d5a:	930d      	str	r3, [sp, #52]	; 0x34
 8017d5c:	e7c2      	b.n	8017ce4 <_dtoa_r+0x1d4>
 8017d5e:	2300      	movs	r3, #0
 8017d60:	9308      	str	r3, [sp, #32]
 8017d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d64:	2b00      	cmp	r3, #0
 8017d66:	dc39      	bgt.n	8017ddc <_dtoa_r+0x2cc>
 8017d68:	f04f 0901 	mov.w	r9, #1
 8017d6c:	f8cd 9004 	str.w	r9, [sp, #4]
 8017d70:	464b      	mov	r3, r9
 8017d72:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8017d76:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8017d78:	2200      	movs	r2, #0
 8017d7a:	6042      	str	r2, [r0, #4]
 8017d7c:	2204      	movs	r2, #4
 8017d7e:	f102 0614 	add.w	r6, r2, #20
 8017d82:	429e      	cmp	r6, r3
 8017d84:	6841      	ldr	r1, [r0, #4]
 8017d86:	d92f      	bls.n	8017de8 <_dtoa_r+0x2d8>
 8017d88:	4620      	mov	r0, r4
 8017d8a:	f001 f83f 	bl	8018e0c <_Balloc>
 8017d8e:	9000      	str	r0, [sp, #0]
 8017d90:	2800      	cmp	r0, #0
 8017d92:	d14b      	bne.n	8017e2c <_dtoa_r+0x31c>
 8017d94:	4b24      	ldr	r3, [pc, #144]	; (8017e28 <_dtoa_r+0x318>)
 8017d96:	4602      	mov	r2, r0
 8017d98:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8017d9c:	e6d1      	b.n	8017b42 <_dtoa_r+0x32>
 8017d9e:	2301      	movs	r3, #1
 8017da0:	e7de      	b.n	8017d60 <_dtoa_r+0x250>
 8017da2:	2300      	movs	r3, #0
 8017da4:	9308      	str	r3, [sp, #32]
 8017da6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017da8:	eb0a 0903 	add.w	r9, sl, r3
 8017dac:	f109 0301 	add.w	r3, r9, #1
 8017db0:	2b01      	cmp	r3, #1
 8017db2:	9301      	str	r3, [sp, #4]
 8017db4:	bfb8      	it	lt
 8017db6:	2301      	movlt	r3, #1
 8017db8:	e7dd      	b.n	8017d76 <_dtoa_r+0x266>
 8017dba:	2301      	movs	r3, #1
 8017dbc:	e7f2      	b.n	8017da4 <_dtoa_r+0x294>
 8017dbe:	2501      	movs	r5, #1
 8017dc0:	2300      	movs	r3, #0
 8017dc2:	9305      	str	r3, [sp, #20]
 8017dc4:	9508      	str	r5, [sp, #32]
 8017dc6:	f04f 39ff 	mov.w	r9, #4294967295
 8017dca:	2200      	movs	r2, #0
 8017dcc:	f8cd 9004 	str.w	r9, [sp, #4]
 8017dd0:	2312      	movs	r3, #18
 8017dd2:	9209      	str	r2, [sp, #36]	; 0x24
 8017dd4:	e7cf      	b.n	8017d76 <_dtoa_r+0x266>
 8017dd6:	2301      	movs	r3, #1
 8017dd8:	9308      	str	r3, [sp, #32]
 8017dda:	e7f4      	b.n	8017dc6 <_dtoa_r+0x2b6>
 8017ddc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8017de0:	f8cd 9004 	str.w	r9, [sp, #4]
 8017de4:	464b      	mov	r3, r9
 8017de6:	e7c6      	b.n	8017d76 <_dtoa_r+0x266>
 8017de8:	3101      	adds	r1, #1
 8017dea:	6041      	str	r1, [r0, #4]
 8017dec:	0052      	lsls	r2, r2, #1
 8017dee:	e7c6      	b.n	8017d7e <_dtoa_r+0x26e>
 8017df0:	636f4361 	.word	0x636f4361
 8017df4:	3fd287a7 	.word	0x3fd287a7
 8017df8:	8b60c8b3 	.word	0x8b60c8b3
 8017dfc:	3fc68a28 	.word	0x3fc68a28
 8017e00:	509f79fb 	.word	0x509f79fb
 8017e04:	3fd34413 	.word	0x3fd34413
 8017e08:	0801c43e 	.word	0x0801c43e
 8017e0c:	0801c455 	.word	0x0801c455
 8017e10:	7ff00000 	.word	0x7ff00000
 8017e14:	0801c43a 	.word	0x0801c43a
 8017e18:	0801c431 	.word	0x0801c431
 8017e1c:	0801c2b5 	.word	0x0801c2b5
 8017e20:	3ff80000 	.word	0x3ff80000
 8017e24:	0801c5d0 	.word	0x0801c5d0
 8017e28:	0801c4b4 	.word	0x0801c4b4
 8017e2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017e2e:	9a00      	ldr	r2, [sp, #0]
 8017e30:	601a      	str	r2, [r3, #0]
 8017e32:	9b01      	ldr	r3, [sp, #4]
 8017e34:	2b0e      	cmp	r3, #14
 8017e36:	f200 80ad 	bhi.w	8017f94 <_dtoa_r+0x484>
 8017e3a:	2d00      	cmp	r5, #0
 8017e3c:	f000 80aa 	beq.w	8017f94 <_dtoa_r+0x484>
 8017e40:	f1ba 0f00 	cmp.w	sl, #0
 8017e44:	dd36      	ble.n	8017eb4 <_dtoa_r+0x3a4>
 8017e46:	4ac3      	ldr	r2, [pc, #780]	; (8018154 <_dtoa_r+0x644>)
 8017e48:	f00a 030f 	and.w	r3, sl, #15
 8017e4c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8017e50:	ed93 7b00 	vldr	d7, [r3]
 8017e54:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8017e58:	ea4f 172a 	mov.w	r7, sl, asr #4
 8017e5c:	eeb0 8a47 	vmov.f32	s16, s14
 8017e60:	eef0 8a67 	vmov.f32	s17, s15
 8017e64:	d016      	beq.n	8017e94 <_dtoa_r+0x384>
 8017e66:	4bbc      	ldr	r3, [pc, #752]	; (8018158 <_dtoa_r+0x648>)
 8017e68:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017e6c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017e70:	f7e8 fcec 	bl	800084c <__aeabi_ddiv>
 8017e74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017e78:	f007 070f 	and.w	r7, r7, #15
 8017e7c:	2503      	movs	r5, #3
 8017e7e:	4eb6      	ldr	r6, [pc, #728]	; (8018158 <_dtoa_r+0x648>)
 8017e80:	b957      	cbnz	r7, 8017e98 <_dtoa_r+0x388>
 8017e82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017e86:	ec53 2b18 	vmov	r2, r3, d8
 8017e8a:	f7e8 fcdf 	bl	800084c <__aeabi_ddiv>
 8017e8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017e92:	e029      	b.n	8017ee8 <_dtoa_r+0x3d8>
 8017e94:	2502      	movs	r5, #2
 8017e96:	e7f2      	b.n	8017e7e <_dtoa_r+0x36e>
 8017e98:	07f9      	lsls	r1, r7, #31
 8017e9a:	d508      	bpl.n	8017eae <_dtoa_r+0x39e>
 8017e9c:	ec51 0b18 	vmov	r0, r1, d8
 8017ea0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8017ea4:	f7e8 fba8 	bl	80005f8 <__aeabi_dmul>
 8017ea8:	ec41 0b18 	vmov	d8, r0, r1
 8017eac:	3501      	adds	r5, #1
 8017eae:	107f      	asrs	r7, r7, #1
 8017eb0:	3608      	adds	r6, #8
 8017eb2:	e7e5      	b.n	8017e80 <_dtoa_r+0x370>
 8017eb4:	f000 80a6 	beq.w	8018004 <_dtoa_r+0x4f4>
 8017eb8:	f1ca 0600 	rsb	r6, sl, #0
 8017ebc:	4ba5      	ldr	r3, [pc, #660]	; (8018154 <_dtoa_r+0x644>)
 8017ebe:	4fa6      	ldr	r7, [pc, #664]	; (8018158 <_dtoa_r+0x648>)
 8017ec0:	f006 020f 	and.w	r2, r6, #15
 8017ec4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ecc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017ed0:	f7e8 fb92 	bl	80005f8 <__aeabi_dmul>
 8017ed4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017ed8:	1136      	asrs	r6, r6, #4
 8017eda:	2300      	movs	r3, #0
 8017edc:	2502      	movs	r5, #2
 8017ede:	2e00      	cmp	r6, #0
 8017ee0:	f040 8085 	bne.w	8017fee <_dtoa_r+0x4de>
 8017ee4:	2b00      	cmp	r3, #0
 8017ee6:	d1d2      	bne.n	8017e8e <_dtoa_r+0x37e>
 8017ee8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017eea:	2b00      	cmp	r3, #0
 8017eec:	f000 808c 	beq.w	8018008 <_dtoa_r+0x4f8>
 8017ef0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8017ef4:	4b99      	ldr	r3, [pc, #612]	; (801815c <_dtoa_r+0x64c>)
 8017ef6:	2200      	movs	r2, #0
 8017ef8:	4630      	mov	r0, r6
 8017efa:	4639      	mov	r1, r7
 8017efc:	f7e8 fdee 	bl	8000adc <__aeabi_dcmplt>
 8017f00:	2800      	cmp	r0, #0
 8017f02:	f000 8081 	beq.w	8018008 <_dtoa_r+0x4f8>
 8017f06:	9b01      	ldr	r3, [sp, #4]
 8017f08:	2b00      	cmp	r3, #0
 8017f0a:	d07d      	beq.n	8018008 <_dtoa_r+0x4f8>
 8017f0c:	f1b9 0f00 	cmp.w	r9, #0
 8017f10:	dd3c      	ble.n	8017f8c <_dtoa_r+0x47c>
 8017f12:	f10a 33ff 	add.w	r3, sl, #4294967295
 8017f16:	9307      	str	r3, [sp, #28]
 8017f18:	2200      	movs	r2, #0
 8017f1a:	4b91      	ldr	r3, [pc, #580]	; (8018160 <_dtoa_r+0x650>)
 8017f1c:	4630      	mov	r0, r6
 8017f1e:	4639      	mov	r1, r7
 8017f20:	f7e8 fb6a 	bl	80005f8 <__aeabi_dmul>
 8017f24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017f28:	3501      	adds	r5, #1
 8017f2a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8017f2e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8017f32:	4628      	mov	r0, r5
 8017f34:	f7e8 faf6 	bl	8000524 <__aeabi_i2d>
 8017f38:	4632      	mov	r2, r6
 8017f3a:	463b      	mov	r3, r7
 8017f3c:	f7e8 fb5c 	bl	80005f8 <__aeabi_dmul>
 8017f40:	4b88      	ldr	r3, [pc, #544]	; (8018164 <_dtoa_r+0x654>)
 8017f42:	2200      	movs	r2, #0
 8017f44:	f7e8 f9a2 	bl	800028c <__adddf3>
 8017f48:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8017f4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017f50:	9303      	str	r3, [sp, #12]
 8017f52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017f54:	2b00      	cmp	r3, #0
 8017f56:	d15c      	bne.n	8018012 <_dtoa_r+0x502>
 8017f58:	4b83      	ldr	r3, [pc, #524]	; (8018168 <_dtoa_r+0x658>)
 8017f5a:	2200      	movs	r2, #0
 8017f5c:	4630      	mov	r0, r6
 8017f5e:	4639      	mov	r1, r7
 8017f60:	f7e8 f992 	bl	8000288 <__aeabi_dsub>
 8017f64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017f68:	4606      	mov	r6, r0
 8017f6a:	460f      	mov	r7, r1
 8017f6c:	f7e8 fdd4 	bl	8000b18 <__aeabi_dcmpgt>
 8017f70:	2800      	cmp	r0, #0
 8017f72:	f040 8296 	bne.w	80184a2 <_dtoa_r+0x992>
 8017f76:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8017f7a:	4630      	mov	r0, r6
 8017f7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017f80:	4639      	mov	r1, r7
 8017f82:	f7e8 fdab 	bl	8000adc <__aeabi_dcmplt>
 8017f86:	2800      	cmp	r0, #0
 8017f88:	f040 8288 	bne.w	801849c <_dtoa_r+0x98c>
 8017f8c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017f90:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8017f94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017f96:	2b00      	cmp	r3, #0
 8017f98:	f2c0 8158 	blt.w	801824c <_dtoa_r+0x73c>
 8017f9c:	f1ba 0f0e 	cmp.w	sl, #14
 8017fa0:	f300 8154 	bgt.w	801824c <_dtoa_r+0x73c>
 8017fa4:	4b6b      	ldr	r3, [pc, #428]	; (8018154 <_dtoa_r+0x644>)
 8017fa6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017faa:	e9d3 8900 	ldrd	r8, r9, [r3]
 8017fae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017fb0:	2b00      	cmp	r3, #0
 8017fb2:	f280 80e3 	bge.w	801817c <_dtoa_r+0x66c>
 8017fb6:	9b01      	ldr	r3, [sp, #4]
 8017fb8:	2b00      	cmp	r3, #0
 8017fba:	f300 80df 	bgt.w	801817c <_dtoa_r+0x66c>
 8017fbe:	f040 826d 	bne.w	801849c <_dtoa_r+0x98c>
 8017fc2:	4b69      	ldr	r3, [pc, #420]	; (8018168 <_dtoa_r+0x658>)
 8017fc4:	2200      	movs	r2, #0
 8017fc6:	4640      	mov	r0, r8
 8017fc8:	4649      	mov	r1, r9
 8017fca:	f7e8 fb15 	bl	80005f8 <__aeabi_dmul>
 8017fce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017fd2:	f7e8 fd97 	bl	8000b04 <__aeabi_dcmpge>
 8017fd6:	9e01      	ldr	r6, [sp, #4]
 8017fd8:	4637      	mov	r7, r6
 8017fda:	2800      	cmp	r0, #0
 8017fdc:	f040 8243 	bne.w	8018466 <_dtoa_r+0x956>
 8017fe0:	9d00      	ldr	r5, [sp, #0]
 8017fe2:	2331      	movs	r3, #49	; 0x31
 8017fe4:	f805 3b01 	strb.w	r3, [r5], #1
 8017fe8:	f10a 0a01 	add.w	sl, sl, #1
 8017fec:	e23f      	b.n	801846e <_dtoa_r+0x95e>
 8017fee:	07f2      	lsls	r2, r6, #31
 8017ff0:	d505      	bpl.n	8017ffe <_dtoa_r+0x4ee>
 8017ff2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017ff6:	f7e8 faff 	bl	80005f8 <__aeabi_dmul>
 8017ffa:	3501      	adds	r5, #1
 8017ffc:	2301      	movs	r3, #1
 8017ffe:	1076      	asrs	r6, r6, #1
 8018000:	3708      	adds	r7, #8
 8018002:	e76c      	b.n	8017ede <_dtoa_r+0x3ce>
 8018004:	2502      	movs	r5, #2
 8018006:	e76f      	b.n	8017ee8 <_dtoa_r+0x3d8>
 8018008:	9b01      	ldr	r3, [sp, #4]
 801800a:	f8cd a01c 	str.w	sl, [sp, #28]
 801800e:	930c      	str	r3, [sp, #48]	; 0x30
 8018010:	e78d      	b.n	8017f2e <_dtoa_r+0x41e>
 8018012:	9900      	ldr	r1, [sp, #0]
 8018014:	980c      	ldr	r0, [sp, #48]	; 0x30
 8018016:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018018:	4b4e      	ldr	r3, [pc, #312]	; (8018154 <_dtoa_r+0x644>)
 801801a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801801e:	4401      	add	r1, r0
 8018020:	9102      	str	r1, [sp, #8]
 8018022:	9908      	ldr	r1, [sp, #32]
 8018024:	eeb0 8a47 	vmov.f32	s16, s14
 8018028:	eef0 8a67 	vmov.f32	s17, s15
 801802c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018030:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8018034:	2900      	cmp	r1, #0
 8018036:	d045      	beq.n	80180c4 <_dtoa_r+0x5b4>
 8018038:	494c      	ldr	r1, [pc, #304]	; (801816c <_dtoa_r+0x65c>)
 801803a:	2000      	movs	r0, #0
 801803c:	f7e8 fc06 	bl	800084c <__aeabi_ddiv>
 8018040:	ec53 2b18 	vmov	r2, r3, d8
 8018044:	f7e8 f920 	bl	8000288 <__aeabi_dsub>
 8018048:	9d00      	ldr	r5, [sp, #0]
 801804a:	ec41 0b18 	vmov	d8, r0, r1
 801804e:	4639      	mov	r1, r7
 8018050:	4630      	mov	r0, r6
 8018052:	f7e8 fd81 	bl	8000b58 <__aeabi_d2iz>
 8018056:	900c      	str	r0, [sp, #48]	; 0x30
 8018058:	f7e8 fa64 	bl	8000524 <__aeabi_i2d>
 801805c:	4602      	mov	r2, r0
 801805e:	460b      	mov	r3, r1
 8018060:	4630      	mov	r0, r6
 8018062:	4639      	mov	r1, r7
 8018064:	f7e8 f910 	bl	8000288 <__aeabi_dsub>
 8018068:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801806a:	3330      	adds	r3, #48	; 0x30
 801806c:	f805 3b01 	strb.w	r3, [r5], #1
 8018070:	ec53 2b18 	vmov	r2, r3, d8
 8018074:	4606      	mov	r6, r0
 8018076:	460f      	mov	r7, r1
 8018078:	f7e8 fd30 	bl	8000adc <__aeabi_dcmplt>
 801807c:	2800      	cmp	r0, #0
 801807e:	d165      	bne.n	801814c <_dtoa_r+0x63c>
 8018080:	4632      	mov	r2, r6
 8018082:	463b      	mov	r3, r7
 8018084:	4935      	ldr	r1, [pc, #212]	; (801815c <_dtoa_r+0x64c>)
 8018086:	2000      	movs	r0, #0
 8018088:	f7e8 f8fe 	bl	8000288 <__aeabi_dsub>
 801808c:	ec53 2b18 	vmov	r2, r3, d8
 8018090:	f7e8 fd24 	bl	8000adc <__aeabi_dcmplt>
 8018094:	2800      	cmp	r0, #0
 8018096:	f040 80b9 	bne.w	801820c <_dtoa_r+0x6fc>
 801809a:	9b02      	ldr	r3, [sp, #8]
 801809c:	429d      	cmp	r5, r3
 801809e:	f43f af75 	beq.w	8017f8c <_dtoa_r+0x47c>
 80180a2:	4b2f      	ldr	r3, [pc, #188]	; (8018160 <_dtoa_r+0x650>)
 80180a4:	ec51 0b18 	vmov	r0, r1, d8
 80180a8:	2200      	movs	r2, #0
 80180aa:	f7e8 faa5 	bl	80005f8 <__aeabi_dmul>
 80180ae:	4b2c      	ldr	r3, [pc, #176]	; (8018160 <_dtoa_r+0x650>)
 80180b0:	ec41 0b18 	vmov	d8, r0, r1
 80180b4:	2200      	movs	r2, #0
 80180b6:	4630      	mov	r0, r6
 80180b8:	4639      	mov	r1, r7
 80180ba:	f7e8 fa9d 	bl	80005f8 <__aeabi_dmul>
 80180be:	4606      	mov	r6, r0
 80180c0:	460f      	mov	r7, r1
 80180c2:	e7c4      	b.n	801804e <_dtoa_r+0x53e>
 80180c4:	ec51 0b17 	vmov	r0, r1, d7
 80180c8:	f7e8 fa96 	bl	80005f8 <__aeabi_dmul>
 80180cc:	9b02      	ldr	r3, [sp, #8]
 80180ce:	9d00      	ldr	r5, [sp, #0]
 80180d0:	930c      	str	r3, [sp, #48]	; 0x30
 80180d2:	ec41 0b18 	vmov	d8, r0, r1
 80180d6:	4639      	mov	r1, r7
 80180d8:	4630      	mov	r0, r6
 80180da:	f7e8 fd3d 	bl	8000b58 <__aeabi_d2iz>
 80180de:	9011      	str	r0, [sp, #68]	; 0x44
 80180e0:	f7e8 fa20 	bl	8000524 <__aeabi_i2d>
 80180e4:	4602      	mov	r2, r0
 80180e6:	460b      	mov	r3, r1
 80180e8:	4630      	mov	r0, r6
 80180ea:	4639      	mov	r1, r7
 80180ec:	f7e8 f8cc 	bl	8000288 <__aeabi_dsub>
 80180f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80180f2:	3330      	adds	r3, #48	; 0x30
 80180f4:	f805 3b01 	strb.w	r3, [r5], #1
 80180f8:	9b02      	ldr	r3, [sp, #8]
 80180fa:	429d      	cmp	r5, r3
 80180fc:	4606      	mov	r6, r0
 80180fe:	460f      	mov	r7, r1
 8018100:	f04f 0200 	mov.w	r2, #0
 8018104:	d134      	bne.n	8018170 <_dtoa_r+0x660>
 8018106:	4b19      	ldr	r3, [pc, #100]	; (801816c <_dtoa_r+0x65c>)
 8018108:	ec51 0b18 	vmov	r0, r1, d8
 801810c:	f7e8 f8be 	bl	800028c <__adddf3>
 8018110:	4602      	mov	r2, r0
 8018112:	460b      	mov	r3, r1
 8018114:	4630      	mov	r0, r6
 8018116:	4639      	mov	r1, r7
 8018118:	f7e8 fcfe 	bl	8000b18 <__aeabi_dcmpgt>
 801811c:	2800      	cmp	r0, #0
 801811e:	d175      	bne.n	801820c <_dtoa_r+0x6fc>
 8018120:	ec53 2b18 	vmov	r2, r3, d8
 8018124:	4911      	ldr	r1, [pc, #68]	; (801816c <_dtoa_r+0x65c>)
 8018126:	2000      	movs	r0, #0
 8018128:	f7e8 f8ae 	bl	8000288 <__aeabi_dsub>
 801812c:	4602      	mov	r2, r0
 801812e:	460b      	mov	r3, r1
 8018130:	4630      	mov	r0, r6
 8018132:	4639      	mov	r1, r7
 8018134:	f7e8 fcd2 	bl	8000adc <__aeabi_dcmplt>
 8018138:	2800      	cmp	r0, #0
 801813a:	f43f af27 	beq.w	8017f8c <_dtoa_r+0x47c>
 801813e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018140:	1e6b      	subs	r3, r5, #1
 8018142:	930c      	str	r3, [sp, #48]	; 0x30
 8018144:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018148:	2b30      	cmp	r3, #48	; 0x30
 801814a:	d0f8      	beq.n	801813e <_dtoa_r+0x62e>
 801814c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8018150:	e04a      	b.n	80181e8 <_dtoa_r+0x6d8>
 8018152:	bf00      	nop
 8018154:	0801c5d0 	.word	0x0801c5d0
 8018158:	0801c5a8 	.word	0x0801c5a8
 801815c:	3ff00000 	.word	0x3ff00000
 8018160:	40240000 	.word	0x40240000
 8018164:	401c0000 	.word	0x401c0000
 8018168:	40140000 	.word	0x40140000
 801816c:	3fe00000 	.word	0x3fe00000
 8018170:	4baf      	ldr	r3, [pc, #700]	; (8018430 <_dtoa_r+0x920>)
 8018172:	f7e8 fa41 	bl	80005f8 <__aeabi_dmul>
 8018176:	4606      	mov	r6, r0
 8018178:	460f      	mov	r7, r1
 801817a:	e7ac      	b.n	80180d6 <_dtoa_r+0x5c6>
 801817c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018180:	9d00      	ldr	r5, [sp, #0]
 8018182:	4642      	mov	r2, r8
 8018184:	464b      	mov	r3, r9
 8018186:	4630      	mov	r0, r6
 8018188:	4639      	mov	r1, r7
 801818a:	f7e8 fb5f 	bl	800084c <__aeabi_ddiv>
 801818e:	f7e8 fce3 	bl	8000b58 <__aeabi_d2iz>
 8018192:	9002      	str	r0, [sp, #8]
 8018194:	f7e8 f9c6 	bl	8000524 <__aeabi_i2d>
 8018198:	4642      	mov	r2, r8
 801819a:	464b      	mov	r3, r9
 801819c:	f7e8 fa2c 	bl	80005f8 <__aeabi_dmul>
 80181a0:	4602      	mov	r2, r0
 80181a2:	460b      	mov	r3, r1
 80181a4:	4630      	mov	r0, r6
 80181a6:	4639      	mov	r1, r7
 80181a8:	f7e8 f86e 	bl	8000288 <__aeabi_dsub>
 80181ac:	9e02      	ldr	r6, [sp, #8]
 80181ae:	9f01      	ldr	r7, [sp, #4]
 80181b0:	3630      	adds	r6, #48	; 0x30
 80181b2:	f805 6b01 	strb.w	r6, [r5], #1
 80181b6:	9e00      	ldr	r6, [sp, #0]
 80181b8:	1bae      	subs	r6, r5, r6
 80181ba:	42b7      	cmp	r7, r6
 80181bc:	4602      	mov	r2, r0
 80181be:	460b      	mov	r3, r1
 80181c0:	d137      	bne.n	8018232 <_dtoa_r+0x722>
 80181c2:	f7e8 f863 	bl	800028c <__adddf3>
 80181c6:	4642      	mov	r2, r8
 80181c8:	464b      	mov	r3, r9
 80181ca:	4606      	mov	r6, r0
 80181cc:	460f      	mov	r7, r1
 80181ce:	f7e8 fca3 	bl	8000b18 <__aeabi_dcmpgt>
 80181d2:	b9c8      	cbnz	r0, 8018208 <_dtoa_r+0x6f8>
 80181d4:	4642      	mov	r2, r8
 80181d6:	464b      	mov	r3, r9
 80181d8:	4630      	mov	r0, r6
 80181da:	4639      	mov	r1, r7
 80181dc:	f7e8 fc74 	bl	8000ac8 <__aeabi_dcmpeq>
 80181e0:	b110      	cbz	r0, 80181e8 <_dtoa_r+0x6d8>
 80181e2:	9b02      	ldr	r3, [sp, #8]
 80181e4:	07d9      	lsls	r1, r3, #31
 80181e6:	d40f      	bmi.n	8018208 <_dtoa_r+0x6f8>
 80181e8:	4620      	mov	r0, r4
 80181ea:	4659      	mov	r1, fp
 80181ec:	f000 fe4e 	bl	8018e8c <_Bfree>
 80181f0:	2300      	movs	r3, #0
 80181f2:	702b      	strb	r3, [r5, #0]
 80181f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80181f6:	f10a 0001 	add.w	r0, sl, #1
 80181fa:	6018      	str	r0, [r3, #0]
 80181fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80181fe:	2b00      	cmp	r3, #0
 8018200:	f43f acd8 	beq.w	8017bb4 <_dtoa_r+0xa4>
 8018204:	601d      	str	r5, [r3, #0]
 8018206:	e4d5      	b.n	8017bb4 <_dtoa_r+0xa4>
 8018208:	f8cd a01c 	str.w	sl, [sp, #28]
 801820c:	462b      	mov	r3, r5
 801820e:	461d      	mov	r5, r3
 8018210:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018214:	2a39      	cmp	r2, #57	; 0x39
 8018216:	d108      	bne.n	801822a <_dtoa_r+0x71a>
 8018218:	9a00      	ldr	r2, [sp, #0]
 801821a:	429a      	cmp	r2, r3
 801821c:	d1f7      	bne.n	801820e <_dtoa_r+0x6fe>
 801821e:	9a07      	ldr	r2, [sp, #28]
 8018220:	9900      	ldr	r1, [sp, #0]
 8018222:	3201      	adds	r2, #1
 8018224:	9207      	str	r2, [sp, #28]
 8018226:	2230      	movs	r2, #48	; 0x30
 8018228:	700a      	strb	r2, [r1, #0]
 801822a:	781a      	ldrb	r2, [r3, #0]
 801822c:	3201      	adds	r2, #1
 801822e:	701a      	strb	r2, [r3, #0]
 8018230:	e78c      	b.n	801814c <_dtoa_r+0x63c>
 8018232:	4b7f      	ldr	r3, [pc, #508]	; (8018430 <_dtoa_r+0x920>)
 8018234:	2200      	movs	r2, #0
 8018236:	f7e8 f9df 	bl	80005f8 <__aeabi_dmul>
 801823a:	2200      	movs	r2, #0
 801823c:	2300      	movs	r3, #0
 801823e:	4606      	mov	r6, r0
 8018240:	460f      	mov	r7, r1
 8018242:	f7e8 fc41 	bl	8000ac8 <__aeabi_dcmpeq>
 8018246:	2800      	cmp	r0, #0
 8018248:	d09b      	beq.n	8018182 <_dtoa_r+0x672>
 801824a:	e7cd      	b.n	80181e8 <_dtoa_r+0x6d8>
 801824c:	9a08      	ldr	r2, [sp, #32]
 801824e:	2a00      	cmp	r2, #0
 8018250:	f000 80c4 	beq.w	80183dc <_dtoa_r+0x8cc>
 8018254:	9a05      	ldr	r2, [sp, #20]
 8018256:	2a01      	cmp	r2, #1
 8018258:	f300 80a8 	bgt.w	80183ac <_dtoa_r+0x89c>
 801825c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801825e:	2a00      	cmp	r2, #0
 8018260:	f000 80a0 	beq.w	80183a4 <_dtoa_r+0x894>
 8018264:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8018268:	9e06      	ldr	r6, [sp, #24]
 801826a:	4645      	mov	r5, r8
 801826c:	9a04      	ldr	r2, [sp, #16]
 801826e:	2101      	movs	r1, #1
 8018270:	441a      	add	r2, r3
 8018272:	4620      	mov	r0, r4
 8018274:	4498      	add	r8, r3
 8018276:	9204      	str	r2, [sp, #16]
 8018278:	f000 ff0e 	bl	8019098 <__i2b>
 801827c:	4607      	mov	r7, r0
 801827e:	2d00      	cmp	r5, #0
 8018280:	dd0b      	ble.n	801829a <_dtoa_r+0x78a>
 8018282:	9b04      	ldr	r3, [sp, #16]
 8018284:	2b00      	cmp	r3, #0
 8018286:	dd08      	ble.n	801829a <_dtoa_r+0x78a>
 8018288:	42ab      	cmp	r3, r5
 801828a:	9a04      	ldr	r2, [sp, #16]
 801828c:	bfa8      	it	ge
 801828e:	462b      	movge	r3, r5
 8018290:	eba8 0803 	sub.w	r8, r8, r3
 8018294:	1aed      	subs	r5, r5, r3
 8018296:	1ad3      	subs	r3, r2, r3
 8018298:	9304      	str	r3, [sp, #16]
 801829a:	9b06      	ldr	r3, [sp, #24]
 801829c:	b1fb      	cbz	r3, 80182de <_dtoa_r+0x7ce>
 801829e:	9b08      	ldr	r3, [sp, #32]
 80182a0:	2b00      	cmp	r3, #0
 80182a2:	f000 809f 	beq.w	80183e4 <_dtoa_r+0x8d4>
 80182a6:	2e00      	cmp	r6, #0
 80182a8:	dd11      	ble.n	80182ce <_dtoa_r+0x7be>
 80182aa:	4639      	mov	r1, r7
 80182ac:	4632      	mov	r2, r6
 80182ae:	4620      	mov	r0, r4
 80182b0:	f000 ffae 	bl	8019210 <__pow5mult>
 80182b4:	465a      	mov	r2, fp
 80182b6:	4601      	mov	r1, r0
 80182b8:	4607      	mov	r7, r0
 80182ba:	4620      	mov	r0, r4
 80182bc:	f000 ff02 	bl	80190c4 <__multiply>
 80182c0:	4659      	mov	r1, fp
 80182c2:	9007      	str	r0, [sp, #28]
 80182c4:	4620      	mov	r0, r4
 80182c6:	f000 fde1 	bl	8018e8c <_Bfree>
 80182ca:	9b07      	ldr	r3, [sp, #28]
 80182cc:	469b      	mov	fp, r3
 80182ce:	9b06      	ldr	r3, [sp, #24]
 80182d0:	1b9a      	subs	r2, r3, r6
 80182d2:	d004      	beq.n	80182de <_dtoa_r+0x7ce>
 80182d4:	4659      	mov	r1, fp
 80182d6:	4620      	mov	r0, r4
 80182d8:	f000 ff9a 	bl	8019210 <__pow5mult>
 80182dc:	4683      	mov	fp, r0
 80182de:	2101      	movs	r1, #1
 80182e0:	4620      	mov	r0, r4
 80182e2:	f000 fed9 	bl	8019098 <__i2b>
 80182e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80182e8:	2b00      	cmp	r3, #0
 80182ea:	4606      	mov	r6, r0
 80182ec:	dd7c      	ble.n	80183e8 <_dtoa_r+0x8d8>
 80182ee:	461a      	mov	r2, r3
 80182f0:	4601      	mov	r1, r0
 80182f2:	4620      	mov	r0, r4
 80182f4:	f000 ff8c 	bl	8019210 <__pow5mult>
 80182f8:	9b05      	ldr	r3, [sp, #20]
 80182fa:	2b01      	cmp	r3, #1
 80182fc:	4606      	mov	r6, r0
 80182fe:	dd76      	ble.n	80183ee <_dtoa_r+0x8de>
 8018300:	2300      	movs	r3, #0
 8018302:	9306      	str	r3, [sp, #24]
 8018304:	6933      	ldr	r3, [r6, #16]
 8018306:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801830a:	6918      	ldr	r0, [r3, #16]
 801830c:	f000 fe74 	bl	8018ff8 <__hi0bits>
 8018310:	f1c0 0020 	rsb	r0, r0, #32
 8018314:	9b04      	ldr	r3, [sp, #16]
 8018316:	4418      	add	r0, r3
 8018318:	f010 001f 	ands.w	r0, r0, #31
 801831c:	f000 8086 	beq.w	801842c <_dtoa_r+0x91c>
 8018320:	f1c0 0320 	rsb	r3, r0, #32
 8018324:	2b04      	cmp	r3, #4
 8018326:	dd7f      	ble.n	8018428 <_dtoa_r+0x918>
 8018328:	f1c0 001c 	rsb	r0, r0, #28
 801832c:	9b04      	ldr	r3, [sp, #16]
 801832e:	4403      	add	r3, r0
 8018330:	4480      	add	r8, r0
 8018332:	4405      	add	r5, r0
 8018334:	9304      	str	r3, [sp, #16]
 8018336:	f1b8 0f00 	cmp.w	r8, #0
 801833a:	dd05      	ble.n	8018348 <_dtoa_r+0x838>
 801833c:	4659      	mov	r1, fp
 801833e:	4642      	mov	r2, r8
 8018340:	4620      	mov	r0, r4
 8018342:	f000 ffbf 	bl	80192c4 <__lshift>
 8018346:	4683      	mov	fp, r0
 8018348:	9b04      	ldr	r3, [sp, #16]
 801834a:	2b00      	cmp	r3, #0
 801834c:	dd05      	ble.n	801835a <_dtoa_r+0x84a>
 801834e:	4631      	mov	r1, r6
 8018350:	461a      	mov	r2, r3
 8018352:	4620      	mov	r0, r4
 8018354:	f000 ffb6 	bl	80192c4 <__lshift>
 8018358:	4606      	mov	r6, r0
 801835a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801835c:	2b00      	cmp	r3, #0
 801835e:	d069      	beq.n	8018434 <_dtoa_r+0x924>
 8018360:	4631      	mov	r1, r6
 8018362:	4658      	mov	r0, fp
 8018364:	f001 f81a 	bl	801939c <__mcmp>
 8018368:	2800      	cmp	r0, #0
 801836a:	da63      	bge.n	8018434 <_dtoa_r+0x924>
 801836c:	2300      	movs	r3, #0
 801836e:	4659      	mov	r1, fp
 8018370:	220a      	movs	r2, #10
 8018372:	4620      	mov	r0, r4
 8018374:	f000 fdac 	bl	8018ed0 <__multadd>
 8018378:	9b08      	ldr	r3, [sp, #32]
 801837a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801837e:	4683      	mov	fp, r0
 8018380:	2b00      	cmp	r3, #0
 8018382:	f000 818f 	beq.w	80186a4 <_dtoa_r+0xb94>
 8018386:	4639      	mov	r1, r7
 8018388:	2300      	movs	r3, #0
 801838a:	220a      	movs	r2, #10
 801838c:	4620      	mov	r0, r4
 801838e:	f000 fd9f 	bl	8018ed0 <__multadd>
 8018392:	f1b9 0f00 	cmp.w	r9, #0
 8018396:	4607      	mov	r7, r0
 8018398:	f300 808e 	bgt.w	80184b8 <_dtoa_r+0x9a8>
 801839c:	9b05      	ldr	r3, [sp, #20]
 801839e:	2b02      	cmp	r3, #2
 80183a0:	dc50      	bgt.n	8018444 <_dtoa_r+0x934>
 80183a2:	e089      	b.n	80184b8 <_dtoa_r+0x9a8>
 80183a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80183a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80183aa:	e75d      	b.n	8018268 <_dtoa_r+0x758>
 80183ac:	9b01      	ldr	r3, [sp, #4]
 80183ae:	1e5e      	subs	r6, r3, #1
 80183b0:	9b06      	ldr	r3, [sp, #24]
 80183b2:	42b3      	cmp	r3, r6
 80183b4:	bfbf      	itttt	lt
 80183b6:	9b06      	ldrlt	r3, [sp, #24]
 80183b8:	9606      	strlt	r6, [sp, #24]
 80183ba:	1af2      	sublt	r2, r6, r3
 80183bc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80183be:	bfb6      	itet	lt
 80183c0:	189b      	addlt	r3, r3, r2
 80183c2:	1b9e      	subge	r6, r3, r6
 80183c4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80183c6:	9b01      	ldr	r3, [sp, #4]
 80183c8:	bfb8      	it	lt
 80183ca:	2600      	movlt	r6, #0
 80183cc:	2b00      	cmp	r3, #0
 80183ce:	bfb5      	itete	lt
 80183d0:	eba8 0503 	sublt.w	r5, r8, r3
 80183d4:	9b01      	ldrge	r3, [sp, #4]
 80183d6:	2300      	movlt	r3, #0
 80183d8:	4645      	movge	r5, r8
 80183da:	e747      	b.n	801826c <_dtoa_r+0x75c>
 80183dc:	9e06      	ldr	r6, [sp, #24]
 80183de:	9f08      	ldr	r7, [sp, #32]
 80183e0:	4645      	mov	r5, r8
 80183e2:	e74c      	b.n	801827e <_dtoa_r+0x76e>
 80183e4:	9a06      	ldr	r2, [sp, #24]
 80183e6:	e775      	b.n	80182d4 <_dtoa_r+0x7c4>
 80183e8:	9b05      	ldr	r3, [sp, #20]
 80183ea:	2b01      	cmp	r3, #1
 80183ec:	dc18      	bgt.n	8018420 <_dtoa_r+0x910>
 80183ee:	9b02      	ldr	r3, [sp, #8]
 80183f0:	b9b3      	cbnz	r3, 8018420 <_dtoa_r+0x910>
 80183f2:	9b03      	ldr	r3, [sp, #12]
 80183f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80183f8:	b9a3      	cbnz	r3, 8018424 <_dtoa_r+0x914>
 80183fa:	9b03      	ldr	r3, [sp, #12]
 80183fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018400:	0d1b      	lsrs	r3, r3, #20
 8018402:	051b      	lsls	r3, r3, #20
 8018404:	b12b      	cbz	r3, 8018412 <_dtoa_r+0x902>
 8018406:	9b04      	ldr	r3, [sp, #16]
 8018408:	3301      	adds	r3, #1
 801840a:	9304      	str	r3, [sp, #16]
 801840c:	f108 0801 	add.w	r8, r8, #1
 8018410:	2301      	movs	r3, #1
 8018412:	9306      	str	r3, [sp, #24]
 8018414:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018416:	2b00      	cmp	r3, #0
 8018418:	f47f af74 	bne.w	8018304 <_dtoa_r+0x7f4>
 801841c:	2001      	movs	r0, #1
 801841e:	e779      	b.n	8018314 <_dtoa_r+0x804>
 8018420:	2300      	movs	r3, #0
 8018422:	e7f6      	b.n	8018412 <_dtoa_r+0x902>
 8018424:	9b02      	ldr	r3, [sp, #8]
 8018426:	e7f4      	b.n	8018412 <_dtoa_r+0x902>
 8018428:	d085      	beq.n	8018336 <_dtoa_r+0x826>
 801842a:	4618      	mov	r0, r3
 801842c:	301c      	adds	r0, #28
 801842e:	e77d      	b.n	801832c <_dtoa_r+0x81c>
 8018430:	40240000 	.word	0x40240000
 8018434:	9b01      	ldr	r3, [sp, #4]
 8018436:	2b00      	cmp	r3, #0
 8018438:	dc38      	bgt.n	80184ac <_dtoa_r+0x99c>
 801843a:	9b05      	ldr	r3, [sp, #20]
 801843c:	2b02      	cmp	r3, #2
 801843e:	dd35      	ble.n	80184ac <_dtoa_r+0x99c>
 8018440:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8018444:	f1b9 0f00 	cmp.w	r9, #0
 8018448:	d10d      	bne.n	8018466 <_dtoa_r+0x956>
 801844a:	4631      	mov	r1, r6
 801844c:	464b      	mov	r3, r9
 801844e:	2205      	movs	r2, #5
 8018450:	4620      	mov	r0, r4
 8018452:	f000 fd3d 	bl	8018ed0 <__multadd>
 8018456:	4601      	mov	r1, r0
 8018458:	4606      	mov	r6, r0
 801845a:	4658      	mov	r0, fp
 801845c:	f000 ff9e 	bl	801939c <__mcmp>
 8018460:	2800      	cmp	r0, #0
 8018462:	f73f adbd 	bgt.w	8017fe0 <_dtoa_r+0x4d0>
 8018466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018468:	9d00      	ldr	r5, [sp, #0]
 801846a:	ea6f 0a03 	mvn.w	sl, r3
 801846e:	f04f 0800 	mov.w	r8, #0
 8018472:	4631      	mov	r1, r6
 8018474:	4620      	mov	r0, r4
 8018476:	f000 fd09 	bl	8018e8c <_Bfree>
 801847a:	2f00      	cmp	r7, #0
 801847c:	f43f aeb4 	beq.w	80181e8 <_dtoa_r+0x6d8>
 8018480:	f1b8 0f00 	cmp.w	r8, #0
 8018484:	d005      	beq.n	8018492 <_dtoa_r+0x982>
 8018486:	45b8      	cmp	r8, r7
 8018488:	d003      	beq.n	8018492 <_dtoa_r+0x982>
 801848a:	4641      	mov	r1, r8
 801848c:	4620      	mov	r0, r4
 801848e:	f000 fcfd 	bl	8018e8c <_Bfree>
 8018492:	4639      	mov	r1, r7
 8018494:	4620      	mov	r0, r4
 8018496:	f000 fcf9 	bl	8018e8c <_Bfree>
 801849a:	e6a5      	b.n	80181e8 <_dtoa_r+0x6d8>
 801849c:	2600      	movs	r6, #0
 801849e:	4637      	mov	r7, r6
 80184a0:	e7e1      	b.n	8018466 <_dtoa_r+0x956>
 80184a2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80184a4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80184a8:	4637      	mov	r7, r6
 80184aa:	e599      	b.n	8017fe0 <_dtoa_r+0x4d0>
 80184ac:	9b08      	ldr	r3, [sp, #32]
 80184ae:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80184b2:	2b00      	cmp	r3, #0
 80184b4:	f000 80fd 	beq.w	80186b2 <_dtoa_r+0xba2>
 80184b8:	2d00      	cmp	r5, #0
 80184ba:	dd05      	ble.n	80184c8 <_dtoa_r+0x9b8>
 80184bc:	4639      	mov	r1, r7
 80184be:	462a      	mov	r2, r5
 80184c0:	4620      	mov	r0, r4
 80184c2:	f000 feff 	bl	80192c4 <__lshift>
 80184c6:	4607      	mov	r7, r0
 80184c8:	9b06      	ldr	r3, [sp, #24]
 80184ca:	2b00      	cmp	r3, #0
 80184cc:	d05c      	beq.n	8018588 <_dtoa_r+0xa78>
 80184ce:	6879      	ldr	r1, [r7, #4]
 80184d0:	4620      	mov	r0, r4
 80184d2:	f000 fc9b 	bl	8018e0c <_Balloc>
 80184d6:	4605      	mov	r5, r0
 80184d8:	b928      	cbnz	r0, 80184e6 <_dtoa_r+0x9d6>
 80184da:	4b80      	ldr	r3, [pc, #512]	; (80186dc <_dtoa_r+0xbcc>)
 80184dc:	4602      	mov	r2, r0
 80184de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80184e2:	f7ff bb2e 	b.w	8017b42 <_dtoa_r+0x32>
 80184e6:	693a      	ldr	r2, [r7, #16]
 80184e8:	3202      	adds	r2, #2
 80184ea:	0092      	lsls	r2, r2, #2
 80184ec:	f107 010c 	add.w	r1, r7, #12
 80184f0:	300c      	adds	r0, #12
 80184f2:	f7fd fc0d 	bl	8015d10 <memcpy>
 80184f6:	2201      	movs	r2, #1
 80184f8:	4629      	mov	r1, r5
 80184fa:	4620      	mov	r0, r4
 80184fc:	f000 fee2 	bl	80192c4 <__lshift>
 8018500:	9b00      	ldr	r3, [sp, #0]
 8018502:	3301      	adds	r3, #1
 8018504:	9301      	str	r3, [sp, #4]
 8018506:	9b00      	ldr	r3, [sp, #0]
 8018508:	444b      	add	r3, r9
 801850a:	9307      	str	r3, [sp, #28]
 801850c:	9b02      	ldr	r3, [sp, #8]
 801850e:	f003 0301 	and.w	r3, r3, #1
 8018512:	46b8      	mov	r8, r7
 8018514:	9306      	str	r3, [sp, #24]
 8018516:	4607      	mov	r7, r0
 8018518:	9b01      	ldr	r3, [sp, #4]
 801851a:	4631      	mov	r1, r6
 801851c:	3b01      	subs	r3, #1
 801851e:	4658      	mov	r0, fp
 8018520:	9302      	str	r3, [sp, #8]
 8018522:	f7ff fa67 	bl	80179f4 <quorem>
 8018526:	4603      	mov	r3, r0
 8018528:	3330      	adds	r3, #48	; 0x30
 801852a:	9004      	str	r0, [sp, #16]
 801852c:	4641      	mov	r1, r8
 801852e:	4658      	mov	r0, fp
 8018530:	9308      	str	r3, [sp, #32]
 8018532:	f000 ff33 	bl	801939c <__mcmp>
 8018536:	463a      	mov	r2, r7
 8018538:	4681      	mov	r9, r0
 801853a:	4631      	mov	r1, r6
 801853c:	4620      	mov	r0, r4
 801853e:	f000 ff49 	bl	80193d4 <__mdiff>
 8018542:	68c2      	ldr	r2, [r0, #12]
 8018544:	9b08      	ldr	r3, [sp, #32]
 8018546:	4605      	mov	r5, r0
 8018548:	bb02      	cbnz	r2, 801858c <_dtoa_r+0xa7c>
 801854a:	4601      	mov	r1, r0
 801854c:	4658      	mov	r0, fp
 801854e:	f000 ff25 	bl	801939c <__mcmp>
 8018552:	9b08      	ldr	r3, [sp, #32]
 8018554:	4602      	mov	r2, r0
 8018556:	4629      	mov	r1, r5
 8018558:	4620      	mov	r0, r4
 801855a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801855e:	f000 fc95 	bl	8018e8c <_Bfree>
 8018562:	9b05      	ldr	r3, [sp, #20]
 8018564:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018566:	9d01      	ldr	r5, [sp, #4]
 8018568:	ea43 0102 	orr.w	r1, r3, r2
 801856c:	9b06      	ldr	r3, [sp, #24]
 801856e:	430b      	orrs	r3, r1
 8018570:	9b08      	ldr	r3, [sp, #32]
 8018572:	d10d      	bne.n	8018590 <_dtoa_r+0xa80>
 8018574:	2b39      	cmp	r3, #57	; 0x39
 8018576:	d029      	beq.n	80185cc <_dtoa_r+0xabc>
 8018578:	f1b9 0f00 	cmp.w	r9, #0
 801857c:	dd01      	ble.n	8018582 <_dtoa_r+0xa72>
 801857e:	9b04      	ldr	r3, [sp, #16]
 8018580:	3331      	adds	r3, #49	; 0x31
 8018582:	9a02      	ldr	r2, [sp, #8]
 8018584:	7013      	strb	r3, [r2, #0]
 8018586:	e774      	b.n	8018472 <_dtoa_r+0x962>
 8018588:	4638      	mov	r0, r7
 801858a:	e7b9      	b.n	8018500 <_dtoa_r+0x9f0>
 801858c:	2201      	movs	r2, #1
 801858e:	e7e2      	b.n	8018556 <_dtoa_r+0xa46>
 8018590:	f1b9 0f00 	cmp.w	r9, #0
 8018594:	db06      	blt.n	80185a4 <_dtoa_r+0xa94>
 8018596:	9905      	ldr	r1, [sp, #20]
 8018598:	ea41 0909 	orr.w	r9, r1, r9
 801859c:	9906      	ldr	r1, [sp, #24]
 801859e:	ea59 0101 	orrs.w	r1, r9, r1
 80185a2:	d120      	bne.n	80185e6 <_dtoa_r+0xad6>
 80185a4:	2a00      	cmp	r2, #0
 80185a6:	ddec      	ble.n	8018582 <_dtoa_r+0xa72>
 80185a8:	4659      	mov	r1, fp
 80185aa:	2201      	movs	r2, #1
 80185ac:	4620      	mov	r0, r4
 80185ae:	9301      	str	r3, [sp, #4]
 80185b0:	f000 fe88 	bl	80192c4 <__lshift>
 80185b4:	4631      	mov	r1, r6
 80185b6:	4683      	mov	fp, r0
 80185b8:	f000 fef0 	bl	801939c <__mcmp>
 80185bc:	2800      	cmp	r0, #0
 80185be:	9b01      	ldr	r3, [sp, #4]
 80185c0:	dc02      	bgt.n	80185c8 <_dtoa_r+0xab8>
 80185c2:	d1de      	bne.n	8018582 <_dtoa_r+0xa72>
 80185c4:	07da      	lsls	r2, r3, #31
 80185c6:	d5dc      	bpl.n	8018582 <_dtoa_r+0xa72>
 80185c8:	2b39      	cmp	r3, #57	; 0x39
 80185ca:	d1d8      	bne.n	801857e <_dtoa_r+0xa6e>
 80185cc:	9a02      	ldr	r2, [sp, #8]
 80185ce:	2339      	movs	r3, #57	; 0x39
 80185d0:	7013      	strb	r3, [r2, #0]
 80185d2:	462b      	mov	r3, r5
 80185d4:	461d      	mov	r5, r3
 80185d6:	3b01      	subs	r3, #1
 80185d8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80185dc:	2a39      	cmp	r2, #57	; 0x39
 80185de:	d050      	beq.n	8018682 <_dtoa_r+0xb72>
 80185e0:	3201      	adds	r2, #1
 80185e2:	701a      	strb	r2, [r3, #0]
 80185e4:	e745      	b.n	8018472 <_dtoa_r+0x962>
 80185e6:	2a00      	cmp	r2, #0
 80185e8:	dd03      	ble.n	80185f2 <_dtoa_r+0xae2>
 80185ea:	2b39      	cmp	r3, #57	; 0x39
 80185ec:	d0ee      	beq.n	80185cc <_dtoa_r+0xabc>
 80185ee:	3301      	adds	r3, #1
 80185f0:	e7c7      	b.n	8018582 <_dtoa_r+0xa72>
 80185f2:	9a01      	ldr	r2, [sp, #4]
 80185f4:	9907      	ldr	r1, [sp, #28]
 80185f6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80185fa:	428a      	cmp	r2, r1
 80185fc:	d02a      	beq.n	8018654 <_dtoa_r+0xb44>
 80185fe:	4659      	mov	r1, fp
 8018600:	2300      	movs	r3, #0
 8018602:	220a      	movs	r2, #10
 8018604:	4620      	mov	r0, r4
 8018606:	f000 fc63 	bl	8018ed0 <__multadd>
 801860a:	45b8      	cmp	r8, r7
 801860c:	4683      	mov	fp, r0
 801860e:	f04f 0300 	mov.w	r3, #0
 8018612:	f04f 020a 	mov.w	r2, #10
 8018616:	4641      	mov	r1, r8
 8018618:	4620      	mov	r0, r4
 801861a:	d107      	bne.n	801862c <_dtoa_r+0xb1c>
 801861c:	f000 fc58 	bl	8018ed0 <__multadd>
 8018620:	4680      	mov	r8, r0
 8018622:	4607      	mov	r7, r0
 8018624:	9b01      	ldr	r3, [sp, #4]
 8018626:	3301      	adds	r3, #1
 8018628:	9301      	str	r3, [sp, #4]
 801862a:	e775      	b.n	8018518 <_dtoa_r+0xa08>
 801862c:	f000 fc50 	bl	8018ed0 <__multadd>
 8018630:	4639      	mov	r1, r7
 8018632:	4680      	mov	r8, r0
 8018634:	2300      	movs	r3, #0
 8018636:	220a      	movs	r2, #10
 8018638:	4620      	mov	r0, r4
 801863a:	f000 fc49 	bl	8018ed0 <__multadd>
 801863e:	4607      	mov	r7, r0
 8018640:	e7f0      	b.n	8018624 <_dtoa_r+0xb14>
 8018642:	f1b9 0f00 	cmp.w	r9, #0
 8018646:	9a00      	ldr	r2, [sp, #0]
 8018648:	bfcc      	ite	gt
 801864a:	464d      	movgt	r5, r9
 801864c:	2501      	movle	r5, #1
 801864e:	4415      	add	r5, r2
 8018650:	f04f 0800 	mov.w	r8, #0
 8018654:	4659      	mov	r1, fp
 8018656:	2201      	movs	r2, #1
 8018658:	4620      	mov	r0, r4
 801865a:	9301      	str	r3, [sp, #4]
 801865c:	f000 fe32 	bl	80192c4 <__lshift>
 8018660:	4631      	mov	r1, r6
 8018662:	4683      	mov	fp, r0
 8018664:	f000 fe9a 	bl	801939c <__mcmp>
 8018668:	2800      	cmp	r0, #0
 801866a:	dcb2      	bgt.n	80185d2 <_dtoa_r+0xac2>
 801866c:	d102      	bne.n	8018674 <_dtoa_r+0xb64>
 801866e:	9b01      	ldr	r3, [sp, #4]
 8018670:	07db      	lsls	r3, r3, #31
 8018672:	d4ae      	bmi.n	80185d2 <_dtoa_r+0xac2>
 8018674:	462b      	mov	r3, r5
 8018676:	461d      	mov	r5, r3
 8018678:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801867c:	2a30      	cmp	r2, #48	; 0x30
 801867e:	d0fa      	beq.n	8018676 <_dtoa_r+0xb66>
 8018680:	e6f7      	b.n	8018472 <_dtoa_r+0x962>
 8018682:	9a00      	ldr	r2, [sp, #0]
 8018684:	429a      	cmp	r2, r3
 8018686:	d1a5      	bne.n	80185d4 <_dtoa_r+0xac4>
 8018688:	f10a 0a01 	add.w	sl, sl, #1
 801868c:	2331      	movs	r3, #49	; 0x31
 801868e:	e779      	b.n	8018584 <_dtoa_r+0xa74>
 8018690:	4b13      	ldr	r3, [pc, #76]	; (80186e0 <_dtoa_r+0xbd0>)
 8018692:	f7ff baaf 	b.w	8017bf4 <_dtoa_r+0xe4>
 8018696:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018698:	2b00      	cmp	r3, #0
 801869a:	f47f aa86 	bne.w	8017baa <_dtoa_r+0x9a>
 801869e:	4b11      	ldr	r3, [pc, #68]	; (80186e4 <_dtoa_r+0xbd4>)
 80186a0:	f7ff baa8 	b.w	8017bf4 <_dtoa_r+0xe4>
 80186a4:	f1b9 0f00 	cmp.w	r9, #0
 80186a8:	dc03      	bgt.n	80186b2 <_dtoa_r+0xba2>
 80186aa:	9b05      	ldr	r3, [sp, #20]
 80186ac:	2b02      	cmp	r3, #2
 80186ae:	f73f aec9 	bgt.w	8018444 <_dtoa_r+0x934>
 80186b2:	9d00      	ldr	r5, [sp, #0]
 80186b4:	4631      	mov	r1, r6
 80186b6:	4658      	mov	r0, fp
 80186b8:	f7ff f99c 	bl	80179f4 <quorem>
 80186bc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80186c0:	f805 3b01 	strb.w	r3, [r5], #1
 80186c4:	9a00      	ldr	r2, [sp, #0]
 80186c6:	1aaa      	subs	r2, r5, r2
 80186c8:	4591      	cmp	r9, r2
 80186ca:	ddba      	ble.n	8018642 <_dtoa_r+0xb32>
 80186cc:	4659      	mov	r1, fp
 80186ce:	2300      	movs	r3, #0
 80186d0:	220a      	movs	r2, #10
 80186d2:	4620      	mov	r0, r4
 80186d4:	f000 fbfc 	bl	8018ed0 <__multadd>
 80186d8:	4683      	mov	fp, r0
 80186da:	e7eb      	b.n	80186b4 <_dtoa_r+0xba4>
 80186dc:	0801c4b4 	.word	0x0801c4b4
 80186e0:	0801c2b4 	.word	0x0801c2b4
 80186e4:	0801c431 	.word	0x0801c431

080186e8 <rshift>:
 80186e8:	6903      	ldr	r3, [r0, #16]
 80186ea:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80186ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80186f2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80186f6:	f100 0414 	add.w	r4, r0, #20
 80186fa:	dd45      	ble.n	8018788 <rshift+0xa0>
 80186fc:	f011 011f 	ands.w	r1, r1, #31
 8018700:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8018704:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8018708:	d10c      	bne.n	8018724 <rshift+0x3c>
 801870a:	f100 0710 	add.w	r7, r0, #16
 801870e:	4629      	mov	r1, r5
 8018710:	42b1      	cmp	r1, r6
 8018712:	d334      	bcc.n	801877e <rshift+0x96>
 8018714:	1a9b      	subs	r3, r3, r2
 8018716:	009b      	lsls	r3, r3, #2
 8018718:	1eea      	subs	r2, r5, #3
 801871a:	4296      	cmp	r6, r2
 801871c:	bf38      	it	cc
 801871e:	2300      	movcc	r3, #0
 8018720:	4423      	add	r3, r4
 8018722:	e015      	b.n	8018750 <rshift+0x68>
 8018724:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8018728:	f1c1 0820 	rsb	r8, r1, #32
 801872c:	40cf      	lsrs	r7, r1
 801872e:	f105 0e04 	add.w	lr, r5, #4
 8018732:	46a1      	mov	r9, r4
 8018734:	4576      	cmp	r6, lr
 8018736:	46f4      	mov	ip, lr
 8018738:	d815      	bhi.n	8018766 <rshift+0x7e>
 801873a:	1a9b      	subs	r3, r3, r2
 801873c:	009a      	lsls	r2, r3, #2
 801873e:	3a04      	subs	r2, #4
 8018740:	3501      	adds	r5, #1
 8018742:	42ae      	cmp	r6, r5
 8018744:	bf38      	it	cc
 8018746:	2200      	movcc	r2, #0
 8018748:	18a3      	adds	r3, r4, r2
 801874a:	50a7      	str	r7, [r4, r2]
 801874c:	b107      	cbz	r7, 8018750 <rshift+0x68>
 801874e:	3304      	adds	r3, #4
 8018750:	1b1a      	subs	r2, r3, r4
 8018752:	42a3      	cmp	r3, r4
 8018754:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018758:	bf08      	it	eq
 801875a:	2300      	moveq	r3, #0
 801875c:	6102      	str	r2, [r0, #16]
 801875e:	bf08      	it	eq
 8018760:	6143      	streq	r3, [r0, #20]
 8018762:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018766:	f8dc c000 	ldr.w	ip, [ip]
 801876a:	fa0c fc08 	lsl.w	ip, ip, r8
 801876e:	ea4c 0707 	orr.w	r7, ip, r7
 8018772:	f849 7b04 	str.w	r7, [r9], #4
 8018776:	f85e 7b04 	ldr.w	r7, [lr], #4
 801877a:	40cf      	lsrs	r7, r1
 801877c:	e7da      	b.n	8018734 <rshift+0x4c>
 801877e:	f851 cb04 	ldr.w	ip, [r1], #4
 8018782:	f847 cf04 	str.w	ip, [r7, #4]!
 8018786:	e7c3      	b.n	8018710 <rshift+0x28>
 8018788:	4623      	mov	r3, r4
 801878a:	e7e1      	b.n	8018750 <rshift+0x68>

0801878c <__hexdig_fun>:
 801878c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018790:	2b09      	cmp	r3, #9
 8018792:	d802      	bhi.n	801879a <__hexdig_fun+0xe>
 8018794:	3820      	subs	r0, #32
 8018796:	b2c0      	uxtb	r0, r0
 8018798:	4770      	bx	lr
 801879a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801879e:	2b05      	cmp	r3, #5
 80187a0:	d801      	bhi.n	80187a6 <__hexdig_fun+0x1a>
 80187a2:	3847      	subs	r0, #71	; 0x47
 80187a4:	e7f7      	b.n	8018796 <__hexdig_fun+0xa>
 80187a6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80187aa:	2b05      	cmp	r3, #5
 80187ac:	d801      	bhi.n	80187b2 <__hexdig_fun+0x26>
 80187ae:	3827      	subs	r0, #39	; 0x27
 80187b0:	e7f1      	b.n	8018796 <__hexdig_fun+0xa>
 80187b2:	2000      	movs	r0, #0
 80187b4:	4770      	bx	lr
	...

080187b8 <__gethex>:
 80187b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187bc:	ed2d 8b02 	vpush	{d8}
 80187c0:	b089      	sub	sp, #36	; 0x24
 80187c2:	ee08 0a10 	vmov	s16, r0
 80187c6:	9304      	str	r3, [sp, #16]
 80187c8:	4bbc      	ldr	r3, [pc, #752]	; (8018abc <__gethex+0x304>)
 80187ca:	681b      	ldr	r3, [r3, #0]
 80187cc:	9301      	str	r3, [sp, #4]
 80187ce:	4618      	mov	r0, r3
 80187d0:	468b      	mov	fp, r1
 80187d2:	4690      	mov	r8, r2
 80187d4:	f7e7 fcfc 	bl	80001d0 <strlen>
 80187d8:	9b01      	ldr	r3, [sp, #4]
 80187da:	f8db 2000 	ldr.w	r2, [fp]
 80187de:	4403      	add	r3, r0
 80187e0:	4682      	mov	sl, r0
 80187e2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80187e6:	9305      	str	r3, [sp, #20]
 80187e8:	1c93      	adds	r3, r2, #2
 80187ea:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80187ee:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80187f2:	32fe      	adds	r2, #254	; 0xfe
 80187f4:	18d1      	adds	r1, r2, r3
 80187f6:	461f      	mov	r7, r3
 80187f8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80187fc:	9100      	str	r1, [sp, #0]
 80187fe:	2830      	cmp	r0, #48	; 0x30
 8018800:	d0f8      	beq.n	80187f4 <__gethex+0x3c>
 8018802:	f7ff ffc3 	bl	801878c <__hexdig_fun>
 8018806:	4604      	mov	r4, r0
 8018808:	2800      	cmp	r0, #0
 801880a:	d13a      	bne.n	8018882 <__gethex+0xca>
 801880c:	9901      	ldr	r1, [sp, #4]
 801880e:	4652      	mov	r2, sl
 8018810:	4638      	mov	r0, r7
 8018812:	f001 f929 	bl	8019a68 <strncmp>
 8018816:	4605      	mov	r5, r0
 8018818:	2800      	cmp	r0, #0
 801881a:	d168      	bne.n	80188ee <__gethex+0x136>
 801881c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8018820:	eb07 060a 	add.w	r6, r7, sl
 8018824:	f7ff ffb2 	bl	801878c <__hexdig_fun>
 8018828:	2800      	cmp	r0, #0
 801882a:	d062      	beq.n	80188f2 <__gethex+0x13a>
 801882c:	4633      	mov	r3, r6
 801882e:	7818      	ldrb	r0, [r3, #0]
 8018830:	2830      	cmp	r0, #48	; 0x30
 8018832:	461f      	mov	r7, r3
 8018834:	f103 0301 	add.w	r3, r3, #1
 8018838:	d0f9      	beq.n	801882e <__gethex+0x76>
 801883a:	f7ff ffa7 	bl	801878c <__hexdig_fun>
 801883e:	2301      	movs	r3, #1
 8018840:	fab0 f480 	clz	r4, r0
 8018844:	0964      	lsrs	r4, r4, #5
 8018846:	4635      	mov	r5, r6
 8018848:	9300      	str	r3, [sp, #0]
 801884a:	463a      	mov	r2, r7
 801884c:	4616      	mov	r6, r2
 801884e:	3201      	adds	r2, #1
 8018850:	7830      	ldrb	r0, [r6, #0]
 8018852:	f7ff ff9b 	bl	801878c <__hexdig_fun>
 8018856:	2800      	cmp	r0, #0
 8018858:	d1f8      	bne.n	801884c <__gethex+0x94>
 801885a:	9901      	ldr	r1, [sp, #4]
 801885c:	4652      	mov	r2, sl
 801885e:	4630      	mov	r0, r6
 8018860:	f001 f902 	bl	8019a68 <strncmp>
 8018864:	b980      	cbnz	r0, 8018888 <__gethex+0xd0>
 8018866:	b94d      	cbnz	r5, 801887c <__gethex+0xc4>
 8018868:	eb06 050a 	add.w	r5, r6, sl
 801886c:	462a      	mov	r2, r5
 801886e:	4616      	mov	r6, r2
 8018870:	3201      	adds	r2, #1
 8018872:	7830      	ldrb	r0, [r6, #0]
 8018874:	f7ff ff8a 	bl	801878c <__hexdig_fun>
 8018878:	2800      	cmp	r0, #0
 801887a:	d1f8      	bne.n	801886e <__gethex+0xb6>
 801887c:	1bad      	subs	r5, r5, r6
 801887e:	00ad      	lsls	r5, r5, #2
 8018880:	e004      	b.n	801888c <__gethex+0xd4>
 8018882:	2400      	movs	r4, #0
 8018884:	4625      	mov	r5, r4
 8018886:	e7e0      	b.n	801884a <__gethex+0x92>
 8018888:	2d00      	cmp	r5, #0
 801888a:	d1f7      	bne.n	801887c <__gethex+0xc4>
 801888c:	7833      	ldrb	r3, [r6, #0]
 801888e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018892:	2b50      	cmp	r3, #80	; 0x50
 8018894:	d13b      	bne.n	801890e <__gethex+0x156>
 8018896:	7873      	ldrb	r3, [r6, #1]
 8018898:	2b2b      	cmp	r3, #43	; 0x2b
 801889a:	d02c      	beq.n	80188f6 <__gethex+0x13e>
 801889c:	2b2d      	cmp	r3, #45	; 0x2d
 801889e:	d02e      	beq.n	80188fe <__gethex+0x146>
 80188a0:	1c71      	adds	r1, r6, #1
 80188a2:	f04f 0900 	mov.w	r9, #0
 80188a6:	7808      	ldrb	r0, [r1, #0]
 80188a8:	f7ff ff70 	bl	801878c <__hexdig_fun>
 80188ac:	1e43      	subs	r3, r0, #1
 80188ae:	b2db      	uxtb	r3, r3
 80188b0:	2b18      	cmp	r3, #24
 80188b2:	d82c      	bhi.n	801890e <__gethex+0x156>
 80188b4:	f1a0 0210 	sub.w	r2, r0, #16
 80188b8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80188bc:	f7ff ff66 	bl	801878c <__hexdig_fun>
 80188c0:	1e43      	subs	r3, r0, #1
 80188c2:	b2db      	uxtb	r3, r3
 80188c4:	2b18      	cmp	r3, #24
 80188c6:	d91d      	bls.n	8018904 <__gethex+0x14c>
 80188c8:	f1b9 0f00 	cmp.w	r9, #0
 80188cc:	d000      	beq.n	80188d0 <__gethex+0x118>
 80188ce:	4252      	negs	r2, r2
 80188d0:	4415      	add	r5, r2
 80188d2:	f8cb 1000 	str.w	r1, [fp]
 80188d6:	b1e4      	cbz	r4, 8018912 <__gethex+0x15a>
 80188d8:	9b00      	ldr	r3, [sp, #0]
 80188da:	2b00      	cmp	r3, #0
 80188dc:	bf14      	ite	ne
 80188de:	2700      	movne	r7, #0
 80188e0:	2706      	moveq	r7, #6
 80188e2:	4638      	mov	r0, r7
 80188e4:	b009      	add	sp, #36	; 0x24
 80188e6:	ecbd 8b02 	vpop	{d8}
 80188ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188ee:	463e      	mov	r6, r7
 80188f0:	4625      	mov	r5, r4
 80188f2:	2401      	movs	r4, #1
 80188f4:	e7ca      	b.n	801888c <__gethex+0xd4>
 80188f6:	f04f 0900 	mov.w	r9, #0
 80188fa:	1cb1      	adds	r1, r6, #2
 80188fc:	e7d3      	b.n	80188a6 <__gethex+0xee>
 80188fe:	f04f 0901 	mov.w	r9, #1
 8018902:	e7fa      	b.n	80188fa <__gethex+0x142>
 8018904:	230a      	movs	r3, #10
 8018906:	fb03 0202 	mla	r2, r3, r2, r0
 801890a:	3a10      	subs	r2, #16
 801890c:	e7d4      	b.n	80188b8 <__gethex+0x100>
 801890e:	4631      	mov	r1, r6
 8018910:	e7df      	b.n	80188d2 <__gethex+0x11a>
 8018912:	1bf3      	subs	r3, r6, r7
 8018914:	3b01      	subs	r3, #1
 8018916:	4621      	mov	r1, r4
 8018918:	2b07      	cmp	r3, #7
 801891a:	dc0b      	bgt.n	8018934 <__gethex+0x17c>
 801891c:	ee18 0a10 	vmov	r0, s16
 8018920:	f000 fa74 	bl	8018e0c <_Balloc>
 8018924:	4604      	mov	r4, r0
 8018926:	b940      	cbnz	r0, 801893a <__gethex+0x182>
 8018928:	4b65      	ldr	r3, [pc, #404]	; (8018ac0 <__gethex+0x308>)
 801892a:	4602      	mov	r2, r0
 801892c:	21de      	movs	r1, #222	; 0xde
 801892e:	4865      	ldr	r0, [pc, #404]	; (8018ac4 <__gethex+0x30c>)
 8018930:	f001 f8ba 	bl	8019aa8 <__assert_func>
 8018934:	3101      	adds	r1, #1
 8018936:	105b      	asrs	r3, r3, #1
 8018938:	e7ee      	b.n	8018918 <__gethex+0x160>
 801893a:	f100 0914 	add.w	r9, r0, #20
 801893e:	f04f 0b00 	mov.w	fp, #0
 8018942:	f1ca 0301 	rsb	r3, sl, #1
 8018946:	f8cd 9008 	str.w	r9, [sp, #8]
 801894a:	f8cd b000 	str.w	fp, [sp]
 801894e:	9306      	str	r3, [sp, #24]
 8018950:	42b7      	cmp	r7, r6
 8018952:	d340      	bcc.n	80189d6 <__gethex+0x21e>
 8018954:	9802      	ldr	r0, [sp, #8]
 8018956:	9b00      	ldr	r3, [sp, #0]
 8018958:	f840 3b04 	str.w	r3, [r0], #4
 801895c:	eba0 0009 	sub.w	r0, r0, r9
 8018960:	1080      	asrs	r0, r0, #2
 8018962:	0146      	lsls	r6, r0, #5
 8018964:	6120      	str	r0, [r4, #16]
 8018966:	4618      	mov	r0, r3
 8018968:	f000 fb46 	bl	8018ff8 <__hi0bits>
 801896c:	1a30      	subs	r0, r6, r0
 801896e:	f8d8 6000 	ldr.w	r6, [r8]
 8018972:	42b0      	cmp	r0, r6
 8018974:	dd63      	ble.n	8018a3e <__gethex+0x286>
 8018976:	1b87      	subs	r7, r0, r6
 8018978:	4639      	mov	r1, r7
 801897a:	4620      	mov	r0, r4
 801897c:	f000 fee0 	bl	8019740 <__any_on>
 8018980:	4682      	mov	sl, r0
 8018982:	b1a8      	cbz	r0, 80189b0 <__gethex+0x1f8>
 8018984:	1e7b      	subs	r3, r7, #1
 8018986:	1159      	asrs	r1, r3, #5
 8018988:	f003 021f 	and.w	r2, r3, #31
 801898c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8018990:	f04f 0a01 	mov.w	sl, #1
 8018994:	fa0a f202 	lsl.w	r2, sl, r2
 8018998:	420a      	tst	r2, r1
 801899a:	d009      	beq.n	80189b0 <__gethex+0x1f8>
 801899c:	4553      	cmp	r3, sl
 801899e:	dd05      	ble.n	80189ac <__gethex+0x1f4>
 80189a0:	1eb9      	subs	r1, r7, #2
 80189a2:	4620      	mov	r0, r4
 80189a4:	f000 fecc 	bl	8019740 <__any_on>
 80189a8:	2800      	cmp	r0, #0
 80189aa:	d145      	bne.n	8018a38 <__gethex+0x280>
 80189ac:	f04f 0a02 	mov.w	sl, #2
 80189b0:	4639      	mov	r1, r7
 80189b2:	4620      	mov	r0, r4
 80189b4:	f7ff fe98 	bl	80186e8 <rshift>
 80189b8:	443d      	add	r5, r7
 80189ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80189be:	42ab      	cmp	r3, r5
 80189c0:	da4c      	bge.n	8018a5c <__gethex+0x2a4>
 80189c2:	ee18 0a10 	vmov	r0, s16
 80189c6:	4621      	mov	r1, r4
 80189c8:	f000 fa60 	bl	8018e8c <_Bfree>
 80189cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80189ce:	2300      	movs	r3, #0
 80189d0:	6013      	str	r3, [r2, #0]
 80189d2:	27a3      	movs	r7, #163	; 0xa3
 80189d4:	e785      	b.n	80188e2 <__gethex+0x12a>
 80189d6:	1e73      	subs	r3, r6, #1
 80189d8:	9a05      	ldr	r2, [sp, #20]
 80189da:	9303      	str	r3, [sp, #12]
 80189dc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80189e0:	4293      	cmp	r3, r2
 80189e2:	d019      	beq.n	8018a18 <__gethex+0x260>
 80189e4:	f1bb 0f20 	cmp.w	fp, #32
 80189e8:	d107      	bne.n	80189fa <__gethex+0x242>
 80189ea:	9b02      	ldr	r3, [sp, #8]
 80189ec:	9a00      	ldr	r2, [sp, #0]
 80189ee:	f843 2b04 	str.w	r2, [r3], #4
 80189f2:	9302      	str	r3, [sp, #8]
 80189f4:	2300      	movs	r3, #0
 80189f6:	9300      	str	r3, [sp, #0]
 80189f8:	469b      	mov	fp, r3
 80189fa:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80189fe:	f7ff fec5 	bl	801878c <__hexdig_fun>
 8018a02:	9b00      	ldr	r3, [sp, #0]
 8018a04:	f000 000f 	and.w	r0, r0, #15
 8018a08:	fa00 f00b 	lsl.w	r0, r0, fp
 8018a0c:	4303      	orrs	r3, r0
 8018a0e:	9300      	str	r3, [sp, #0]
 8018a10:	f10b 0b04 	add.w	fp, fp, #4
 8018a14:	9b03      	ldr	r3, [sp, #12]
 8018a16:	e00d      	b.n	8018a34 <__gethex+0x27c>
 8018a18:	9b03      	ldr	r3, [sp, #12]
 8018a1a:	9a06      	ldr	r2, [sp, #24]
 8018a1c:	4413      	add	r3, r2
 8018a1e:	42bb      	cmp	r3, r7
 8018a20:	d3e0      	bcc.n	80189e4 <__gethex+0x22c>
 8018a22:	4618      	mov	r0, r3
 8018a24:	9901      	ldr	r1, [sp, #4]
 8018a26:	9307      	str	r3, [sp, #28]
 8018a28:	4652      	mov	r2, sl
 8018a2a:	f001 f81d 	bl	8019a68 <strncmp>
 8018a2e:	9b07      	ldr	r3, [sp, #28]
 8018a30:	2800      	cmp	r0, #0
 8018a32:	d1d7      	bne.n	80189e4 <__gethex+0x22c>
 8018a34:	461e      	mov	r6, r3
 8018a36:	e78b      	b.n	8018950 <__gethex+0x198>
 8018a38:	f04f 0a03 	mov.w	sl, #3
 8018a3c:	e7b8      	b.n	80189b0 <__gethex+0x1f8>
 8018a3e:	da0a      	bge.n	8018a56 <__gethex+0x29e>
 8018a40:	1a37      	subs	r7, r6, r0
 8018a42:	4621      	mov	r1, r4
 8018a44:	ee18 0a10 	vmov	r0, s16
 8018a48:	463a      	mov	r2, r7
 8018a4a:	f000 fc3b 	bl	80192c4 <__lshift>
 8018a4e:	1bed      	subs	r5, r5, r7
 8018a50:	4604      	mov	r4, r0
 8018a52:	f100 0914 	add.w	r9, r0, #20
 8018a56:	f04f 0a00 	mov.w	sl, #0
 8018a5a:	e7ae      	b.n	80189ba <__gethex+0x202>
 8018a5c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018a60:	42a8      	cmp	r0, r5
 8018a62:	dd72      	ble.n	8018b4a <__gethex+0x392>
 8018a64:	1b45      	subs	r5, r0, r5
 8018a66:	42ae      	cmp	r6, r5
 8018a68:	dc36      	bgt.n	8018ad8 <__gethex+0x320>
 8018a6a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018a6e:	2b02      	cmp	r3, #2
 8018a70:	d02a      	beq.n	8018ac8 <__gethex+0x310>
 8018a72:	2b03      	cmp	r3, #3
 8018a74:	d02c      	beq.n	8018ad0 <__gethex+0x318>
 8018a76:	2b01      	cmp	r3, #1
 8018a78:	d115      	bne.n	8018aa6 <__gethex+0x2ee>
 8018a7a:	42ae      	cmp	r6, r5
 8018a7c:	d113      	bne.n	8018aa6 <__gethex+0x2ee>
 8018a7e:	2e01      	cmp	r6, #1
 8018a80:	d10b      	bne.n	8018a9a <__gethex+0x2e2>
 8018a82:	9a04      	ldr	r2, [sp, #16]
 8018a84:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018a88:	6013      	str	r3, [r2, #0]
 8018a8a:	2301      	movs	r3, #1
 8018a8c:	6123      	str	r3, [r4, #16]
 8018a8e:	f8c9 3000 	str.w	r3, [r9]
 8018a92:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018a94:	2762      	movs	r7, #98	; 0x62
 8018a96:	601c      	str	r4, [r3, #0]
 8018a98:	e723      	b.n	80188e2 <__gethex+0x12a>
 8018a9a:	1e71      	subs	r1, r6, #1
 8018a9c:	4620      	mov	r0, r4
 8018a9e:	f000 fe4f 	bl	8019740 <__any_on>
 8018aa2:	2800      	cmp	r0, #0
 8018aa4:	d1ed      	bne.n	8018a82 <__gethex+0x2ca>
 8018aa6:	ee18 0a10 	vmov	r0, s16
 8018aaa:	4621      	mov	r1, r4
 8018aac:	f000 f9ee 	bl	8018e8c <_Bfree>
 8018ab0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018ab2:	2300      	movs	r3, #0
 8018ab4:	6013      	str	r3, [r2, #0]
 8018ab6:	2750      	movs	r7, #80	; 0x50
 8018ab8:	e713      	b.n	80188e2 <__gethex+0x12a>
 8018aba:	bf00      	nop
 8018abc:	0801c530 	.word	0x0801c530
 8018ac0:	0801c4b4 	.word	0x0801c4b4
 8018ac4:	0801c4c5 	.word	0x0801c4c5
 8018ac8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018aca:	2b00      	cmp	r3, #0
 8018acc:	d1eb      	bne.n	8018aa6 <__gethex+0x2ee>
 8018ace:	e7d8      	b.n	8018a82 <__gethex+0x2ca>
 8018ad0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018ad2:	2b00      	cmp	r3, #0
 8018ad4:	d1d5      	bne.n	8018a82 <__gethex+0x2ca>
 8018ad6:	e7e6      	b.n	8018aa6 <__gethex+0x2ee>
 8018ad8:	1e6f      	subs	r7, r5, #1
 8018ada:	f1ba 0f00 	cmp.w	sl, #0
 8018ade:	d131      	bne.n	8018b44 <__gethex+0x38c>
 8018ae0:	b127      	cbz	r7, 8018aec <__gethex+0x334>
 8018ae2:	4639      	mov	r1, r7
 8018ae4:	4620      	mov	r0, r4
 8018ae6:	f000 fe2b 	bl	8019740 <__any_on>
 8018aea:	4682      	mov	sl, r0
 8018aec:	117b      	asrs	r3, r7, #5
 8018aee:	2101      	movs	r1, #1
 8018af0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8018af4:	f007 071f 	and.w	r7, r7, #31
 8018af8:	fa01 f707 	lsl.w	r7, r1, r7
 8018afc:	421f      	tst	r7, r3
 8018afe:	4629      	mov	r1, r5
 8018b00:	4620      	mov	r0, r4
 8018b02:	bf18      	it	ne
 8018b04:	f04a 0a02 	orrne.w	sl, sl, #2
 8018b08:	1b76      	subs	r6, r6, r5
 8018b0a:	f7ff fded 	bl	80186e8 <rshift>
 8018b0e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8018b12:	2702      	movs	r7, #2
 8018b14:	f1ba 0f00 	cmp.w	sl, #0
 8018b18:	d048      	beq.n	8018bac <__gethex+0x3f4>
 8018b1a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018b1e:	2b02      	cmp	r3, #2
 8018b20:	d015      	beq.n	8018b4e <__gethex+0x396>
 8018b22:	2b03      	cmp	r3, #3
 8018b24:	d017      	beq.n	8018b56 <__gethex+0x39e>
 8018b26:	2b01      	cmp	r3, #1
 8018b28:	d109      	bne.n	8018b3e <__gethex+0x386>
 8018b2a:	f01a 0f02 	tst.w	sl, #2
 8018b2e:	d006      	beq.n	8018b3e <__gethex+0x386>
 8018b30:	f8d9 0000 	ldr.w	r0, [r9]
 8018b34:	ea4a 0a00 	orr.w	sl, sl, r0
 8018b38:	f01a 0f01 	tst.w	sl, #1
 8018b3c:	d10e      	bne.n	8018b5c <__gethex+0x3a4>
 8018b3e:	f047 0710 	orr.w	r7, r7, #16
 8018b42:	e033      	b.n	8018bac <__gethex+0x3f4>
 8018b44:	f04f 0a01 	mov.w	sl, #1
 8018b48:	e7d0      	b.n	8018aec <__gethex+0x334>
 8018b4a:	2701      	movs	r7, #1
 8018b4c:	e7e2      	b.n	8018b14 <__gethex+0x35c>
 8018b4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018b50:	f1c3 0301 	rsb	r3, r3, #1
 8018b54:	9315      	str	r3, [sp, #84]	; 0x54
 8018b56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018b58:	2b00      	cmp	r3, #0
 8018b5a:	d0f0      	beq.n	8018b3e <__gethex+0x386>
 8018b5c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8018b60:	f104 0314 	add.w	r3, r4, #20
 8018b64:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8018b68:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8018b6c:	f04f 0c00 	mov.w	ip, #0
 8018b70:	4618      	mov	r0, r3
 8018b72:	f853 2b04 	ldr.w	r2, [r3], #4
 8018b76:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018b7a:	d01c      	beq.n	8018bb6 <__gethex+0x3fe>
 8018b7c:	3201      	adds	r2, #1
 8018b7e:	6002      	str	r2, [r0, #0]
 8018b80:	2f02      	cmp	r7, #2
 8018b82:	f104 0314 	add.w	r3, r4, #20
 8018b86:	d13f      	bne.n	8018c08 <__gethex+0x450>
 8018b88:	f8d8 2000 	ldr.w	r2, [r8]
 8018b8c:	3a01      	subs	r2, #1
 8018b8e:	42b2      	cmp	r2, r6
 8018b90:	d10a      	bne.n	8018ba8 <__gethex+0x3f0>
 8018b92:	1171      	asrs	r1, r6, #5
 8018b94:	2201      	movs	r2, #1
 8018b96:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018b9a:	f006 061f 	and.w	r6, r6, #31
 8018b9e:	fa02 f606 	lsl.w	r6, r2, r6
 8018ba2:	421e      	tst	r6, r3
 8018ba4:	bf18      	it	ne
 8018ba6:	4617      	movne	r7, r2
 8018ba8:	f047 0720 	orr.w	r7, r7, #32
 8018bac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018bae:	601c      	str	r4, [r3, #0]
 8018bb0:	9b04      	ldr	r3, [sp, #16]
 8018bb2:	601d      	str	r5, [r3, #0]
 8018bb4:	e695      	b.n	80188e2 <__gethex+0x12a>
 8018bb6:	4299      	cmp	r1, r3
 8018bb8:	f843 cc04 	str.w	ip, [r3, #-4]
 8018bbc:	d8d8      	bhi.n	8018b70 <__gethex+0x3b8>
 8018bbe:	68a3      	ldr	r3, [r4, #8]
 8018bc0:	459b      	cmp	fp, r3
 8018bc2:	db19      	blt.n	8018bf8 <__gethex+0x440>
 8018bc4:	6861      	ldr	r1, [r4, #4]
 8018bc6:	ee18 0a10 	vmov	r0, s16
 8018bca:	3101      	adds	r1, #1
 8018bcc:	f000 f91e 	bl	8018e0c <_Balloc>
 8018bd0:	4681      	mov	r9, r0
 8018bd2:	b918      	cbnz	r0, 8018bdc <__gethex+0x424>
 8018bd4:	4b1a      	ldr	r3, [pc, #104]	; (8018c40 <__gethex+0x488>)
 8018bd6:	4602      	mov	r2, r0
 8018bd8:	2184      	movs	r1, #132	; 0x84
 8018bda:	e6a8      	b.n	801892e <__gethex+0x176>
 8018bdc:	6922      	ldr	r2, [r4, #16]
 8018bde:	3202      	adds	r2, #2
 8018be0:	f104 010c 	add.w	r1, r4, #12
 8018be4:	0092      	lsls	r2, r2, #2
 8018be6:	300c      	adds	r0, #12
 8018be8:	f7fd f892 	bl	8015d10 <memcpy>
 8018bec:	4621      	mov	r1, r4
 8018bee:	ee18 0a10 	vmov	r0, s16
 8018bf2:	f000 f94b 	bl	8018e8c <_Bfree>
 8018bf6:	464c      	mov	r4, r9
 8018bf8:	6923      	ldr	r3, [r4, #16]
 8018bfa:	1c5a      	adds	r2, r3, #1
 8018bfc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018c00:	6122      	str	r2, [r4, #16]
 8018c02:	2201      	movs	r2, #1
 8018c04:	615a      	str	r2, [r3, #20]
 8018c06:	e7bb      	b.n	8018b80 <__gethex+0x3c8>
 8018c08:	6922      	ldr	r2, [r4, #16]
 8018c0a:	455a      	cmp	r2, fp
 8018c0c:	dd0b      	ble.n	8018c26 <__gethex+0x46e>
 8018c0e:	2101      	movs	r1, #1
 8018c10:	4620      	mov	r0, r4
 8018c12:	f7ff fd69 	bl	80186e8 <rshift>
 8018c16:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018c1a:	3501      	adds	r5, #1
 8018c1c:	42ab      	cmp	r3, r5
 8018c1e:	f6ff aed0 	blt.w	80189c2 <__gethex+0x20a>
 8018c22:	2701      	movs	r7, #1
 8018c24:	e7c0      	b.n	8018ba8 <__gethex+0x3f0>
 8018c26:	f016 061f 	ands.w	r6, r6, #31
 8018c2a:	d0fa      	beq.n	8018c22 <__gethex+0x46a>
 8018c2c:	449a      	add	sl, r3
 8018c2e:	f1c6 0620 	rsb	r6, r6, #32
 8018c32:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8018c36:	f000 f9df 	bl	8018ff8 <__hi0bits>
 8018c3a:	42b0      	cmp	r0, r6
 8018c3c:	dbe7      	blt.n	8018c0e <__gethex+0x456>
 8018c3e:	e7f0      	b.n	8018c22 <__gethex+0x46a>
 8018c40:	0801c4b4 	.word	0x0801c4b4

08018c44 <L_shift>:
 8018c44:	f1c2 0208 	rsb	r2, r2, #8
 8018c48:	0092      	lsls	r2, r2, #2
 8018c4a:	b570      	push	{r4, r5, r6, lr}
 8018c4c:	f1c2 0620 	rsb	r6, r2, #32
 8018c50:	6843      	ldr	r3, [r0, #4]
 8018c52:	6804      	ldr	r4, [r0, #0]
 8018c54:	fa03 f506 	lsl.w	r5, r3, r6
 8018c58:	432c      	orrs	r4, r5
 8018c5a:	40d3      	lsrs	r3, r2
 8018c5c:	6004      	str	r4, [r0, #0]
 8018c5e:	f840 3f04 	str.w	r3, [r0, #4]!
 8018c62:	4288      	cmp	r0, r1
 8018c64:	d3f4      	bcc.n	8018c50 <L_shift+0xc>
 8018c66:	bd70      	pop	{r4, r5, r6, pc}

08018c68 <__match>:
 8018c68:	b530      	push	{r4, r5, lr}
 8018c6a:	6803      	ldr	r3, [r0, #0]
 8018c6c:	3301      	adds	r3, #1
 8018c6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018c72:	b914      	cbnz	r4, 8018c7a <__match+0x12>
 8018c74:	6003      	str	r3, [r0, #0]
 8018c76:	2001      	movs	r0, #1
 8018c78:	bd30      	pop	{r4, r5, pc}
 8018c7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018c7e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8018c82:	2d19      	cmp	r5, #25
 8018c84:	bf98      	it	ls
 8018c86:	3220      	addls	r2, #32
 8018c88:	42a2      	cmp	r2, r4
 8018c8a:	d0f0      	beq.n	8018c6e <__match+0x6>
 8018c8c:	2000      	movs	r0, #0
 8018c8e:	e7f3      	b.n	8018c78 <__match+0x10>

08018c90 <__hexnan>:
 8018c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c94:	680b      	ldr	r3, [r1, #0]
 8018c96:	6801      	ldr	r1, [r0, #0]
 8018c98:	115e      	asrs	r6, r3, #5
 8018c9a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8018c9e:	f013 031f 	ands.w	r3, r3, #31
 8018ca2:	b087      	sub	sp, #28
 8018ca4:	bf18      	it	ne
 8018ca6:	3604      	addne	r6, #4
 8018ca8:	2500      	movs	r5, #0
 8018caa:	1f37      	subs	r7, r6, #4
 8018cac:	4682      	mov	sl, r0
 8018cae:	4690      	mov	r8, r2
 8018cb0:	9301      	str	r3, [sp, #4]
 8018cb2:	f846 5c04 	str.w	r5, [r6, #-4]
 8018cb6:	46b9      	mov	r9, r7
 8018cb8:	463c      	mov	r4, r7
 8018cba:	9502      	str	r5, [sp, #8]
 8018cbc:	46ab      	mov	fp, r5
 8018cbe:	784a      	ldrb	r2, [r1, #1]
 8018cc0:	1c4b      	adds	r3, r1, #1
 8018cc2:	9303      	str	r3, [sp, #12]
 8018cc4:	b342      	cbz	r2, 8018d18 <__hexnan+0x88>
 8018cc6:	4610      	mov	r0, r2
 8018cc8:	9105      	str	r1, [sp, #20]
 8018cca:	9204      	str	r2, [sp, #16]
 8018ccc:	f7ff fd5e 	bl	801878c <__hexdig_fun>
 8018cd0:	2800      	cmp	r0, #0
 8018cd2:	d14f      	bne.n	8018d74 <__hexnan+0xe4>
 8018cd4:	9a04      	ldr	r2, [sp, #16]
 8018cd6:	9905      	ldr	r1, [sp, #20]
 8018cd8:	2a20      	cmp	r2, #32
 8018cda:	d818      	bhi.n	8018d0e <__hexnan+0x7e>
 8018cdc:	9b02      	ldr	r3, [sp, #8]
 8018cde:	459b      	cmp	fp, r3
 8018ce0:	dd13      	ble.n	8018d0a <__hexnan+0x7a>
 8018ce2:	454c      	cmp	r4, r9
 8018ce4:	d206      	bcs.n	8018cf4 <__hexnan+0x64>
 8018ce6:	2d07      	cmp	r5, #7
 8018ce8:	dc04      	bgt.n	8018cf4 <__hexnan+0x64>
 8018cea:	462a      	mov	r2, r5
 8018cec:	4649      	mov	r1, r9
 8018cee:	4620      	mov	r0, r4
 8018cf0:	f7ff ffa8 	bl	8018c44 <L_shift>
 8018cf4:	4544      	cmp	r4, r8
 8018cf6:	d950      	bls.n	8018d9a <__hexnan+0x10a>
 8018cf8:	2300      	movs	r3, #0
 8018cfa:	f1a4 0904 	sub.w	r9, r4, #4
 8018cfe:	f844 3c04 	str.w	r3, [r4, #-4]
 8018d02:	f8cd b008 	str.w	fp, [sp, #8]
 8018d06:	464c      	mov	r4, r9
 8018d08:	461d      	mov	r5, r3
 8018d0a:	9903      	ldr	r1, [sp, #12]
 8018d0c:	e7d7      	b.n	8018cbe <__hexnan+0x2e>
 8018d0e:	2a29      	cmp	r2, #41	; 0x29
 8018d10:	d156      	bne.n	8018dc0 <__hexnan+0x130>
 8018d12:	3102      	adds	r1, #2
 8018d14:	f8ca 1000 	str.w	r1, [sl]
 8018d18:	f1bb 0f00 	cmp.w	fp, #0
 8018d1c:	d050      	beq.n	8018dc0 <__hexnan+0x130>
 8018d1e:	454c      	cmp	r4, r9
 8018d20:	d206      	bcs.n	8018d30 <__hexnan+0xa0>
 8018d22:	2d07      	cmp	r5, #7
 8018d24:	dc04      	bgt.n	8018d30 <__hexnan+0xa0>
 8018d26:	462a      	mov	r2, r5
 8018d28:	4649      	mov	r1, r9
 8018d2a:	4620      	mov	r0, r4
 8018d2c:	f7ff ff8a 	bl	8018c44 <L_shift>
 8018d30:	4544      	cmp	r4, r8
 8018d32:	d934      	bls.n	8018d9e <__hexnan+0x10e>
 8018d34:	f1a8 0204 	sub.w	r2, r8, #4
 8018d38:	4623      	mov	r3, r4
 8018d3a:	f853 1b04 	ldr.w	r1, [r3], #4
 8018d3e:	f842 1f04 	str.w	r1, [r2, #4]!
 8018d42:	429f      	cmp	r7, r3
 8018d44:	d2f9      	bcs.n	8018d3a <__hexnan+0xaa>
 8018d46:	1b3b      	subs	r3, r7, r4
 8018d48:	f023 0303 	bic.w	r3, r3, #3
 8018d4c:	3304      	adds	r3, #4
 8018d4e:	3401      	adds	r4, #1
 8018d50:	3e03      	subs	r6, #3
 8018d52:	42b4      	cmp	r4, r6
 8018d54:	bf88      	it	hi
 8018d56:	2304      	movhi	r3, #4
 8018d58:	4443      	add	r3, r8
 8018d5a:	2200      	movs	r2, #0
 8018d5c:	f843 2b04 	str.w	r2, [r3], #4
 8018d60:	429f      	cmp	r7, r3
 8018d62:	d2fb      	bcs.n	8018d5c <__hexnan+0xcc>
 8018d64:	683b      	ldr	r3, [r7, #0]
 8018d66:	b91b      	cbnz	r3, 8018d70 <__hexnan+0xe0>
 8018d68:	4547      	cmp	r7, r8
 8018d6a:	d127      	bne.n	8018dbc <__hexnan+0x12c>
 8018d6c:	2301      	movs	r3, #1
 8018d6e:	603b      	str	r3, [r7, #0]
 8018d70:	2005      	movs	r0, #5
 8018d72:	e026      	b.n	8018dc2 <__hexnan+0x132>
 8018d74:	3501      	adds	r5, #1
 8018d76:	2d08      	cmp	r5, #8
 8018d78:	f10b 0b01 	add.w	fp, fp, #1
 8018d7c:	dd06      	ble.n	8018d8c <__hexnan+0xfc>
 8018d7e:	4544      	cmp	r4, r8
 8018d80:	d9c3      	bls.n	8018d0a <__hexnan+0x7a>
 8018d82:	2300      	movs	r3, #0
 8018d84:	f844 3c04 	str.w	r3, [r4, #-4]
 8018d88:	2501      	movs	r5, #1
 8018d8a:	3c04      	subs	r4, #4
 8018d8c:	6822      	ldr	r2, [r4, #0]
 8018d8e:	f000 000f 	and.w	r0, r0, #15
 8018d92:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8018d96:	6022      	str	r2, [r4, #0]
 8018d98:	e7b7      	b.n	8018d0a <__hexnan+0x7a>
 8018d9a:	2508      	movs	r5, #8
 8018d9c:	e7b5      	b.n	8018d0a <__hexnan+0x7a>
 8018d9e:	9b01      	ldr	r3, [sp, #4]
 8018da0:	2b00      	cmp	r3, #0
 8018da2:	d0df      	beq.n	8018d64 <__hexnan+0xd4>
 8018da4:	f04f 32ff 	mov.w	r2, #4294967295
 8018da8:	f1c3 0320 	rsb	r3, r3, #32
 8018dac:	fa22 f303 	lsr.w	r3, r2, r3
 8018db0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8018db4:	401a      	ands	r2, r3
 8018db6:	f846 2c04 	str.w	r2, [r6, #-4]
 8018dba:	e7d3      	b.n	8018d64 <__hexnan+0xd4>
 8018dbc:	3f04      	subs	r7, #4
 8018dbe:	e7d1      	b.n	8018d64 <__hexnan+0xd4>
 8018dc0:	2004      	movs	r0, #4
 8018dc2:	b007      	add	sp, #28
 8018dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018dc8 <_localeconv_r>:
 8018dc8:	4800      	ldr	r0, [pc, #0]	; (8018dcc <_localeconv_r+0x4>)
 8018dca:	4770      	bx	lr
 8018dcc:	20000b04 	.word	0x20000b04

08018dd0 <__ascii_mbtowc>:
 8018dd0:	b082      	sub	sp, #8
 8018dd2:	b901      	cbnz	r1, 8018dd6 <__ascii_mbtowc+0x6>
 8018dd4:	a901      	add	r1, sp, #4
 8018dd6:	b142      	cbz	r2, 8018dea <__ascii_mbtowc+0x1a>
 8018dd8:	b14b      	cbz	r3, 8018dee <__ascii_mbtowc+0x1e>
 8018dda:	7813      	ldrb	r3, [r2, #0]
 8018ddc:	600b      	str	r3, [r1, #0]
 8018dde:	7812      	ldrb	r2, [r2, #0]
 8018de0:	1e10      	subs	r0, r2, #0
 8018de2:	bf18      	it	ne
 8018de4:	2001      	movne	r0, #1
 8018de6:	b002      	add	sp, #8
 8018de8:	4770      	bx	lr
 8018dea:	4610      	mov	r0, r2
 8018dec:	e7fb      	b.n	8018de6 <__ascii_mbtowc+0x16>
 8018dee:	f06f 0001 	mvn.w	r0, #1
 8018df2:	e7f8      	b.n	8018de6 <__ascii_mbtowc+0x16>

08018df4 <__malloc_lock>:
 8018df4:	4801      	ldr	r0, [pc, #4]	; (8018dfc <__malloc_lock+0x8>)
 8018df6:	f000 be88 	b.w	8019b0a <__retarget_lock_acquire_recursive>
 8018dfa:	bf00      	nop
 8018dfc:	20006b7c 	.word	0x20006b7c

08018e00 <__malloc_unlock>:
 8018e00:	4801      	ldr	r0, [pc, #4]	; (8018e08 <__malloc_unlock+0x8>)
 8018e02:	f000 be83 	b.w	8019b0c <__retarget_lock_release_recursive>
 8018e06:	bf00      	nop
 8018e08:	20006b7c 	.word	0x20006b7c

08018e0c <_Balloc>:
 8018e0c:	b570      	push	{r4, r5, r6, lr}
 8018e0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018e10:	4604      	mov	r4, r0
 8018e12:	460d      	mov	r5, r1
 8018e14:	b976      	cbnz	r6, 8018e34 <_Balloc+0x28>
 8018e16:	2010      	movs	r0, #16
 8018e18:	f7fc ff6a 	bl	8015cf0 <malloc>
 8018e1c:	4602      	mov	r2, r0
 8018e1e:	6260      	str	r0, [r4, #36]	; 0x24
 8018e20:	b920      	cbnz	r0, 8018e2c <_Balloc+0x20>
 8018e22:	4b18      	ldr	r3, [pc, #96]	; (8018e84 <_Balloc+0x78>)
 8018e24:	4818      	ldr	r0, [pc, #96]	; (8018e88 <_Balloc+0x7c>)
 8018e26:	2166      	movs	r1, #102	; 0x66
 8018e28:	f000 fe3e 	bl	8019aa8 <__assert_func>
 8018e2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018e30:	6006      	str	r6, [r0, #0]
 8018e32:	60c6      	str	r6, [r0, #12]
 8018e34:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8018e36:	68f3      	ldr	r3, [r6, #12]
 8018e38:	b183      	cbz	r3, 8018e5c <_Balloc+0x50>
 8018e3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018e3c:	68db      	ldr	r3, [r3, #12]
 8018e3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018e42:	b9b8      	cbnz	r0, 8018e74 <_Balloc+0x68>
 8018e44:	2101      	movs	r1, #1
 8018e46:	fa01 f605 	lsl.w	r6, r1, r5
 8018e4a:	1d72      	adds	r2, r6, #5
 8018e4c:	0092      	lsls	r2, r2, #2
 8018e4e:	4620      	mov	r0, r4
 8018e50:	f000 fc97 	bl	8019782 <_calloc_r>
 8018e54:	b160      	cbz	r0, 8018e70 <_Balloc+0x64>
 8018e56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8018e5a:	e00e      	b.n	8018e7a <_Balloc+0x6e>
 8018e5c:	2221      	movs	r2, #33	; 0x21
 8018e5e:	2104      	movs	r1, #4
 8018e60:	4620      	mov	r0, r4
 8018e62:	f000 fc8e 	bl	8019782 <_calloc_r>
 8018e66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018e68:	60f0      	str	r0, [r6, #12]
 8018e6a:	68db      	ldr	r3, [r3, #12]
 8018e6c:	2b00      	cmp	r3, #0
 8018e6e:	d1e4      	bne.n	8018e3a <_Balloc+0x2e>
 8018e70:	2000      	movs	r0, #0
 8018e72:	bd70      	pop	{r4, r5, r6, pc}
 8018e74:	6802      	ldr	r2, [r0, #0]
 8018e76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018e7a:	2300      	movs	r3, #0
 8018e7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018e80:	e7f7      	b.n	8018e72 <_Balloc+0x66>
 8018e82:	bf00      	nop
 8018e84:	0801c43e 	.word	0x0801c43e
 8018e88:	0801c544 	.word	0x0801c544

08018e8c <_Bfree>:
 8018e8c:	b570      	push	{r4, r5, r6, lr}
 8018e8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018e90:	4605      	mov	r5, r0
 8018e92:	460c      	mov	r4, r1
 8018e94:	b976      	cbnz	r6, 8018eb4 <_Bfree+0x28>
 8018e96:	2010      	movs	r0, #16
 8018e98:	f7fc ff2a 	bl	8015cf0 <malloc>
 8018e9c:	4602      	mov	r2, r0
 8018e9e:	6268      	str	r0, [r5, #36]	; 0x24
 8018ea0:	b920      	cbnz	r0, 8018eac <_Bfree+0x20>
 8018ea2:	4b09      	ldr	r3, [pc, #36]	; (8018ec8 <_Bfree+0x3c>)
 8018ea4:	4809      	ldr	r0, [pc, #36]	; (8018ecc <_Bfree+0x40>)
 8018ea6:	218a      	movs	r1, #138	; 0x8a
 8018ea8:	f000 fdfe 	bl	8019aa8 <__assert_func>
 8018eac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018eb0:	6006      	str	r6, [r0, #0]
 8018eb2:	60c6      	str	r6, [r0, #12]
 8018eb4:	b13c      	cbz	r4, 8018ec6 <_Bfree+0x3a>
 8018eb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018eb8:	6862      	ldr	r2, [r4, #4]
 8018eba:	68db      	ldr	r3, [r3, #12]
 8018ebc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018ec0:	6021      	str	r1, [r4, #0]
 8018ec2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8018ec6:	bd70      	pop	{r4, r5, r6, pc}
 8018ec8:	0801c43e 	.word	0x0801c43e
 8018ecc:	0801c544 	.word	0x0801c544

08018ed0 <__multadd>:
 8018ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018ed4:	690e      	ldr	r6, [r1, #16]
 8018ed6:	4607      	mov	r7, r0
 8018ed8:	4698      	mov	r8, r3
 8018eda:	460c      	mov	r4, r1
 8018edc:	f101 0014 	add.w	r0, r1, #20
 8018ee0:	2300      	movs	r3, #0
 8018ee2:	6805      	ldr	r5, [r0, #0]
 8018ee4:	b2a9      	uxth	r1, r5
 8018ee6:	fb02 8101 	mla	r1, r2, r1, r8
 8018eea:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8018eee:	0c2d      	lsrs	r5, r5, #16
 8018ef0:	fb02 c505 	mla	r5, r2, r5, ip
 8018ef4:	b289      	uxth	r1, r1
 8018ef6:	3301      	adds	r3, #1
 8018ef8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8018efc:	429e      	cmp	r6, r3
 8018efe:	f840 1b04 	str.w	r1, [r0], #4
 8018f02:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8018f06:	dcec      	bgt.n	8018ee2 <__multadd+0x12>
 8018f08:	f1b8 0f00 	cmp.w	r8, #0
 8018f0c:	d022      	beq.n	8018f54 <__multadd+0x84>
 8018f0e:	68a3      	ldr	r3, [r4, #8]
 8018f10:	42b3      	cmp	r3, r6
 8018f12:	dc19      	bgt.n	8018f48 <__multadd+0x78>
 8018f14:	6861      	ldr	r1, [r4, #4]
 8018f16:	4638      	mov	r0, r7
 8018f18:	3101      	adds	r1, #1
 8018f1a:	f7ff ff77 	bl	8018e0c <_Balloc>
 8018f1e:	4605      	mov	r5, r0
 8018f20:	b928      	cbnz	r0, 8018f2e <__multadd+0x5e>
 8018f22:	4602      	mov	r2, r0
 8018f24:	4b0d      	ldr	r3, [pc, #52]	; (8018f5c <__multadd+0x8c>)
 8018f26:	480e      	ldr	r0, [pc, #56]	; (8018f60 <__multadd+0x90>)
 8018f28:	21b5      	movs	r1, #181	; 0xb5
 8018f2a:	f000 fdbd 	bl	8019aa8 <__assert_func>
 8018f2e:	6922      	ldr	r2, [r4, #16]
 8018f30:	3202      	adds	r2, #2
 8018f32:	f104 010c 	add.w	r1, r4, #12
 8018f36:	0092      	lsls	r2, r2, #2
 8018f38:	300c      	adds	r0, #12
 8018f3a:	f7fc fee9 	bl	8015d10 <memcpy>
 8018f3e:	4621      	mov	r1, r4
 8018f40:	4638      	mov	r0, r7
 8018f42:	f7ff ffa3 	bl	8018e8c <_Bfree>
 8018f46:	462c      	mov	r4, r5
 8018f48:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8018f4c:	3601      	adds	r6, #1
 8018f4e:	f8c3 8014 	str.w	r8, [r3, #20]
 8018f52:	6126      	str	r6, [r4, #16]
 8018f54:	4620      	mov	r0, r4
 8018f56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f5a:	bf00      	nop
 8018f5c:	0801c4b4 	.word	0x0801c4b4
 8018f60:	0801c544 	.word	0x0801c544

08018f64 <__s2b>:
 8018f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018f68:	460c      	mov	r4, r1
 8018f6a:	4615      	mov	r5, r2
 8018f6c:	461f      	mov	r7, r3
 8018f6e:	2209      	movs	r2, #9
 8018f70:	3308      	adds	r3, #8
 8018f72:	4606      	mov	r6, r0
 8018f74:	fb93 f3f2 	sdiv	r3, r3, r2
 8018f78:	2100      	movs	r1, #0
 8018f7a:	2201      	movs	r2, #1
 8018f7c:	429a      	cmp	r2, r3
 8018f7e:	db09      	blt.n	8018f94 <__s2b+0x30>
 8018f80:	4630      	mov	r0, r6
 8018f82:	f7ff ff43 	bl	8018e0c <_Balloc>
 8018f86:	b940      	cbnz	r0, 8018f9a <__s2b+0x36>
 8018f88:	4602      	mov	r2, r0
 8018f8a:	4b19      	ldr	r3, [pc, #100]	; (8018ff0 <__s2b+0x8c>)
 8018f8c:	4819      	ldr	r0, [pc, #100]	; (8018ff4 <__s2b+0x90>)
 8018f8e:	21ce      	movs	r1, #206	; 0xce
 8018f90:	f000 fd8a 	bl	8019aa8 <__assert_func>
 8018f94:	0052      	lsls	r2, r2, #1
 8018f96:	3101      	adds	r1, #1
 8018f98:	e7f0      	b.n	8018f7c <__s2b+0x18>
 8018f9a:	9b08      	ldr	r3, [sp, #32]
 8018f9c:	6143      	str	r3, [r0, #20]
 8018f9e:	2d09      	cmp	r5, #9
 8018fa0:	f04f 0301 	mov.w	r3, #1
 8018fa4:	6103      	str	r3, [r0, #16]
 8018fa6:	dd16      	ble.n	8018fd6 <__s2b+0x72>
 8018fa8:	f104 0909 	add.w	r9, r4, #9
 8018fac:	46c8      	mov	r8, r9
 8018fae:	442c      	add	r4, r5
 8018fb0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8018fb4:	4601      	mov	r1, r0
 8018fb6:	3b30      	subs	r3, #48	; 0x30
 8018fb8:	220a      	movs	r2, #10
 8018fba:	4630      	mov	r0, r6
 8018fbc:	f7ff ff88 	bl	8018ed0 <__multadd>
 8018fc0:	45a0      	cmp	r8, r4
 8018fc2:	d1f5      	bne.n	8018fb0 <__s2b+0x4c>
 8018fc4:	f1a5 0408 	sub.w	r4, r5, #8
 8018fc8:	444c      	add	r4, r9
 8018fca:	1b2d      	subs	r5, r5, r4
 8018fcc:	1963      	adds	r3, r4, r5
 8018fce:	42bb      	cmp	r3, r7
 8018fd0:	db04      	blt.n	8018fdc <__s2b+0x78>
 8018fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018fd6:	340a      	adds	r4, #10
 8018fd8:	2509      	movs	r5, #9
 8018fda:	e7f6      	b.n	8018fca <__s2b+0x66>
 8018fdc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018fe0:	4601      	mov	r1, r0
 8018fe2:	3b30      	subs	r3, #48	; 0x30
 8018fe4:	220a      	movs	r2, #10
 8018fe6:	4630      	mov	r0, r6
 8018fe8:	f7ff ff72 	bl	8018ed0 <__multadd>
 8018fec:	e7ee      	b.n	8018fcc <__s2b+0x68>
 8018fee:	bf00      	nop
 8018ff0:	0801c4b4 	.word	0x0801c4b4
 8018ff4:	0801c544 	.word	0x0801c544

08018ff8 <__hi0bits>:
 8018ff8:	0c03      	lsrs	r3, r0, #16
 8018ffa:	041b      	lsls	r3, r3, #16
 8018ffc:	b9d3      	cbnz	r3, 8019034 <__hi0bits+0x3c>
 8018ffe:	0400      	lsls	r0, r0, #16
 8019000:	2310      	movs	r3, #16
 8019002:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8019006:	bf04      	itt	eq
 8019008:	0200      	lsleq	r0, r0, #8
 801900a:	3308      	addeq	r3, #8
 801900c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8019010:	bf04      	itt	eq
 8019012:	0100      	lsleq	r0, r0, #4
 8019014:	3304      	addeq	r3, #4
 8019016:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801901a:	bf04      	itt	eq
 801901c:	0080      	lsleq	r0, r0, #2
 801901e:	3302      	addeq	r3, #2
 8019020:	2800      	cmp	r0, #0
 8019022:	db05      	blt.n	8019030 <__hi0bits+0x38>
 8019024:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8019028:	f103 0301 	add.w	r3, r3, #1
 801902c:	bf08      	it	eq
 801902e:	2320      	moveq	r3, #32
 8019030:	4618      	mov	r0, r3
 8019032:	4770      	bx	lr
 8019034:	2300      	movs	r3, #0
 8019036:	e7e4      	b.n	8019002 <__hi0bits+0xa>

08019038 <__lo0bits>:
 8019038:	6803      	ldr	r3, [r0, #0]
 801903a:	f013 0207 	ands.w	r2, r3, #7
 801903e:	4601      	mov	r1, r0
 8019040:	d00b      	beq.n	801905a <__lo0bits+0x22>
 8019042:	07da      	lsls	r2, r3, #31
 8019044:	d424      	bmi.n	8019090 <__lo0bits+0x58>
 8019046:	0798      	lsls	r0, r3, #30
 8019048:	bf49      	itett	mi
 801904a:	085b      	lsrmi	r3, r3, #1
 801904c:	089b      	lsrpl	r3, r3, #2
 801904e:	2001      	movmi	r0, #1
 8019050:	600b      	strmi	r3, [r1, #0]
 8019052:	bf5c      	itt	pl
 8019054:	600b      	strpl	r3, [r1, #0]
 8019056:	2002      	movpl	r0, #2
 8019058:	4770      	bx	lr
 801905a:	b298      	uxth	r0, r3
 801905c:	b9b0      	cbnz	r0, 801908c <__lo0bits+0x54>
 801905e:	0c1b      	lsrs	r3, r3, #16
 8019060:	2010      	movs	r0, #16
 8019062:	f013 0fff 	tst.w	r3, #255	; 0xff
 8019066:	bf04      	itt	eq
 8019068:	0a1b      	lsreq	r3, r3, #8
 801906a:	3008      	addeq	r0, #8
 801906c:	071a      	lsls	r2, r3, #28
 801906e:	bf04      	itt	eq
 8019070:	091b      	lsreq	r3, r3, #4
 8019072:	3004      	addeq	r0, #4
 8019074:	079a      	lsls	r2, r3, #30
 8019076:	bf04      	itt	eq
 8019078:	089b      	lsreq	r3, r3, #2
 801907a:	3002      	addeq	r0, #2
 801907c:	07da      	lsls	r2, r3, #31
 801907e:	d403      	bmi.n	8019088 <__lo0bits+0x50>
 8019080:	085b      	lsrs	r3, r3, #1
 8019082:	f100 0001 	add.w	r0, r0, #1
 8019086:	d005      	beq.n	8019094 <__lo0bits+0x5c>
 8019088:	600b      	str	r3, [r1, #0]
 801908a:	4770      	bx	lr
 801908c:	4610      	mov	r0, r2
 801908e:	e7e8      	b.n	8019062 <__lo0bits+0x2a>
 8019090:	2000      	movs	r0, #0
 8019092:	4770      	bx	lr
 8019094:	2020      	movs	r0, #32
 8019096:	4770      	bx	lr

08019098 <__i2b>:
 8019098:	b510      	push	{r4, lr}
 801909a:	460c      	mov	r4, r1
 801909c:	2101      	movs	r1, #1
 801909e:	f7ff feb5 	bl	8018e0c <_Balloc>
 80190a2:	4602      	mov	r2, r0
 80190a4:	b928      	cbnz	r0, 80190b2 <__i2b+0x1a>
 80190a6:	4b05      	ldr	r3, [pc, #20]	; (80190bc <__i2b+0x24>)
 80190a8:	4805      	ldr	r0, [pc, #20]	; (80190c0 <__i2b+0x28>)
 80190aa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80190ae:	f000 fcfb 	bl	8019aa8 <__assert_func>
 80190b2:	2301      	movs	r3, #1
 80190b4:	6144      	str	r4, [r0, #20]
 80190b6:	6103      	str	r3, [r0, #16]
 80190b8:	bd10      	pop	{r4, pc}
 80190ba:	bf00      	nop
 80190bc:	0801c4b4 	.word	0x0801c4b4
 80190c0:	0801c544 	.word	0x0801c544

080190c4 <__multiply>:
 80190c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190c8:	4614      	mov	r4, r2
 80190ca:	690a      	ldr	r2, [r1, #16]
 80190cc:	6923      	ldr	r3, [r4, #16]
 80190ce:	429a      	cmp	r2, r3
 80190d0:	bfb8      	it	lt
 80190d2:	460b      	movlt	r3, r1
 80190d4:	460d      	mov	r5, r1
 80190d6:	bfbc      	itt	lt
 80190d8:	4625      	movlt	r5, r4
 80190da:	461c      	movlt	r4, r3
 80190dc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80190e0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80190e4:	68ab      	ldr	r3, [r5, #8]
 80190e6:	6869      	ldr	r1, [r5, #4]
 80190e8:	eb0a 0709 	add.w	r7, sl, r9
 80190ec:	42bb      	cmp	r3, r7
 80190ee:	b085      	sub	sp, #20
 80190f0:	bfb8      	it	lt
 80190f2:	3101      	addlt	r1, #1
 80190f4:	f7ff fe8a 	bl	8018e0c <_Balloc>
 80190f8:	b930      	cbnz	r0, 8019108 <__multiply+0x44>
 80190fa:	4602      	mov	r2, r0
 80190fc:	4b42      	ldr	r3, [pc, #264]	; (8019208 <__multiply+0x144>)
 80190fe:	4843      	ldr	r0, [pc, #268]	; (801920c <__multiply+0x148>)
 8019100:	f240 115d 	movw	r1, #349	; 0x15d
 8019104:	f000 fcd0 	bl	8019aa8 <__assert_func>
 8019108:	f100 0614 	add.w	r6, r0, #20
 801910c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8019110:	4633      	mov	r3, r6
 8019112:	2200      	movs	r2, #0
 8019114:	4543      	cmp	r3, r8
 8019116:	d31e      	bcc.n	8019156 <__multiply+0x92>
 8019118:	f105 0c14 	add.w	ip, r5, #20
 801911c:	f104 0314 	add.w	r3, r4, #20
 8019120:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8019124:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8019128:	9202      	str	r2, [sp, #8]
 801912a:	ebac 0205 	sub.w	r2, ip, r5
 801912e:	3a15      	subs	r2, #21
 8019130:	f022 0203 	bic.w	r2, r2, #3
 8019134:	3204      	adds	r2, #4
 8019136:	f105 0115 	add.w	r1, r5, #21
 801913a:	458c      	cmp	ip, r1
 801913c:	bf38      	it	cc
 801913e:	2204      	movcc	r2, #4
 8019140:	9201      	str	r2, [sp, #4]
 8019142:	9a02      	ldr	r2, [sp, #8]
 8019144:	9303      	str	r3, [sp, #12]
 8019146:	429a      	cmp	r2, r3
 8019148:	d808      	bhi.n	801915c <__multiply+0x98>
 801914a:	2f00      	cmp	r7, #0
 801914c:	dc55      	bgt.n	80191fa <__multiply+0x136>
 801914e:	6107      	str	r7, [r0, #16]
 8019150:	b005      	add	sp, #20
 8019152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019156:	f843 2b04 	str.w	r2, [r3], #4
 801915a:	e7db      	b.n	8019114 <__multiply+0x50>
 801915c:	f8b3 a000 	ldrh.w	sl, [r3]
 8019160:	f1ba 0f00 	cmp.w	sl, #0
 8019164:	d020      	beq.n	80191a8 <__multiply+0xe4>
 8019166:	f105 0e14 	add.w	lr, r5, #20
 801916a:	46b1      	mov	r9, r6
 801916c:	2200      	movs	r2, #0
 801916e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8019172:	f8d9 b000 	ldr.w	fp, [r9]
 8019176:	b2a1      	uxth	r1, r4
 8019178:	fa1f fb8b 	uxth.w	fp, fp
 801917c:	fb0a b101 	mla	r1, sl, r1, fp
 8019180:	4411      	add	r1, r2
 8019182:	f8d9 2000 	ldr.w	r2, [r9]
 8019186:	0c24      	lsrs	r4, r4, #16
 8019188:	0c12      	lsrs	r2, r2, #16
 801918a:	fb0a 2404 	mla	r4, sl, r4, r2
 801918e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8019192:	b289      	uxth	r1, r1
 8019194:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8019198:	45f4      	cmp	ip, lr
 801919a:	f849 1b04 	str.w	r1, [r9], #4
 801919e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80191a2:	d8e4      	bhi.n	801916e <__multiply+0xaa>
 80191a4:	9901      	ldr	r1, [sp, #4]
 80191a6:	5072      	str	r2, [r6, r1]
 80191a8:	9a03      	ldr	r2, [sp, #12]
 80191aa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80191ae:	3304      	adds	r3, #4
 80191b0:	f1b9 0f00 	cmp.w	r9, #0
 80191b4:	d01f      	beq.n	80191f6 <__multiply+0x132>
 80191b6:	6834      	ldr	r4, [r6, #0]
 80191b8:	f105 0114 	add.w	r1, r5, #20
 80191bc:	46b6      	mov	lr, r6
 80191be:	f04f 0a00 	mov.w	sl, #0
 80191c2:	880a      	ldrh	r2, [r1, #0]
 80191c4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80191c8:	fb09 b202 	mla	r2, r9, r2, fp
 80191cc:	4492      	add	sl, r2
 80191ce:	b2a4      	uxth	r4, r4
 80191d0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80191d4:	f84e 4b04 	str.w	r4, [lr], #4
 80191d8:	f851 4b04 	ldr.w	r4, [r1], #4
 80191dc:	f8be 2000 	ldrh.w	r2, [lr]
 80191e0:	0c24      	lsrs	r4, r4, #16
 80191e2:	fb09 2404 	mla	r4, r9, r4, r2
 80191e6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80191ea:	458c      	cmp	ip, r1
 80191ec:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80191f0:	d8e7      	bhi.n	80191c2 <__multiply+0xfe>
 80191f2:	9a01      	ldr	r2, [sp, #4]
 80191f4:	50b4      	str	r4, [r6, r2]
 80191f6:	3604      	adds	r6, #4
 80191f8:	e7a3      	b.n	8019142 <__multiply+0x7e>
 80191fa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80191fe:	2b00      	cmp	r3, #0
 8019200:	d1a5      	bne.n	801914e <__multiply+0x8a>
 8019202:	3f01      	subs	r7, #1
 8019204:	e7a1      	b.n	801914a <__multiply+0x86>
 8019206:	bf00      	nop
 8019208:	0801c4b4 	.word	0x0801c4b4
 801920c:	0801c544 	.word	0x0801c544

08019210 <__pow5mult>:
 8019210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019214:	4615      	mov	r5, r2
 8019216:	f012 0203 	ands.w	r2, r2, #3
 801921a:	4606      	mov	r6, r0
 801921c:	460f      	mov	r7, r1
 801921e:	d007      	beq.n	8019230 <__pow5mult+0x20>
 8019220:	4c25      	ldr	r4, [pc, #148]	; (80192b8 <__pow5mult+0xa8>)
 8019222:	3a01      	subs	r2, #1
 8019224:	2300      	movs	r3, #0
 8019226:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801922a:	f7ff fe51 	bl	8018ed0 <__multadd>
 801922e:	4607      	mov	r7, r0
 8019230:	10ad      	asrs	r5, r5, #2
 8019232:	d03d      	beq.n	80192b0 <__pow5mult+0xa0>
 8019234:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8019236:	b97c      	cbnz	r4, 8019258 <__pow5mult+0x48>
 8019238:	2010      	movs	r0, #16
 801923a:	f7fc fd59 	bl	8015cf0 <malloc>
 801923e:	4602      	mov	r2, r0
 8019240:	6270      	str	r0, [r6, #36]	; 0x24
 8019242:	b928      	cbnz	r0, 8019250 <__pow5mult+0x40>
 8019244:	4b1d      	ldr	r3, [pc, #116]	; (80192bc <__pow5mult+0xac>)
 8019246:	481e      	ldr	r0, [pc, #120]	; (80192c0 <__pow5mult+0xb0>)
 8019248:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801924c:	f000 fc2c 	bl	8019aa8 <__assert_func>
 8019250:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019254:	6004      	str	r4, [r0, #0]
 8019256:	60c4      	str	r4, [r0, #12]
 8019258:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801925c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019260:	b94c      	cbnz	r4, 8019276 <__pow5mult+0x66>
 8019262:	f240 2171 	movw	r1, #625	; 0x271
 8019266:	4630      	mov	r0, r6
 8019268:	f7ff ff16 	bl	8019098 <__i2b>
 801926c:	2300      	movs	r3, #0
 801926e:	f8c8 0008 	str.w	r0, [r8, #8]
 8019272:	4604      	mov	r4, r0
 8019274:	6003      	str	r3, [r0, #0]
 8019276:	f04f 0900 	mov.w	r9, #0
 801927a:	07eb      	lsls	r3, r5, #31
 801927c:	d50a      	bpl.n	8019294 <__pow5mult+0x84>
 801927e:	4639      	mov	r1, r7
 8019280:	4622      	mov	r2, r4
 8019282:	4630      	mov	r0, r6
 8019284:	f7ff ff1e 	bl	80190c4 <__multiply>
 8019288:	4639      	mov	r1, r7
 801928a:	4680      	mov	r8, r0
 801928c:	4630      	mov	r0, r6
 801928e:	f7ff fdfd 	bl	8018e8c <_Bfree>
 8019292:	4647      	mov	r7, r8
 8019294:	106d      	asrs	r5, r5, #1
 8019296:	d00b      	beq.n	80192b0 <__pow5mult+0xa0>
 8019298:	6820      	ldr	r0, [r4, #0]
 801929a:	b938      	cbnz	r0, 80192ac <__pow5mult+0x9c>
 801929c:	4622      	mov	r2, r4
 801929e:	4621      	mov	r1, r4
 80192a0:	4630      	mov	r0, r6
 80192a2:	f7ff ff0f 	bl	80190c4 <__multiply>
 80192a6:	6020      	str	r0, [r4, #0]
 80192a8:	f8c0 9000 	str.w	r9, [r0]
 80192ac:	4604      	mov	r4, r0
 80192ae:	e7e4      	b.n	801927a <__pow5mult+0x6a>
 80192b0:	4638      	mov	r0, r7
 80192b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80192b6:	bf00      	nop
 80192b8:	0801c698 	.word	0x0801c698
 80192bc:	0801c43e 	.word	0x0801c43e
 80192c0:	0801c544 	.word	0x0801c544

080192c4 <__lshift>:
 80192c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80192c8:	460c      	mov	r4, r1
 80192ca:	6849      	ldr	r1, [r1, #4]
 80192cc:	6923      	ldr	r3, [r4, #16]
 80192ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80192d2:	68a3      	ldr	r3, [r4, #8]
 80192d4:	4607      	mov	r7, r0
 80192d6:	4691      	mov	r9, r2
 80192d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80192dc:	f108 0601 	add.w	r6, r8, #1
 80192e0:	42b3      	cmp	r3, r6
 80192e2:	db0b      	blt.n	80192fc <__lshift+0x38>
 80192e4:	4638      	mov	r0, r7
 80192e6:	f7ff fd91 	bl	8018e0c <_Balloc>
 80192ea:	4605      	mov	r5, r0
 80192ec:	b948      	cbnz	r0, 8019302 <__lshift+0x3e>
 80192ee:	4602      	mov	r2, r0
 80192f0:	4b28      	ldr	r3, [pc, #160]	; (8019394 <__lshift+0xd0>)
 80192f2:	4829      	ldr	r0, [pc, #164]	; (8019398 <__lshift+0xd4>)
 80192f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80192f8:	f000 fbd6 	bl	8019aa8 <__assert_func>
 80192fc:	3101      	adds	r1, #1
 80192fe:	005b      	lsls	r3, r3, #1
 8019300:	e7ee      	b.n	80192e0 <__lshift+0x1c>
 8019302:	2300      	movs	r3, #0
 8019304:	f100 0114 	add.w	r1, r0, #20
 8019308:	f100 0210 	add.w	r2, r0, #16
 801930c:	4618      	mov	r0, r3
 801930e:	4553      	cmp	r3, sl
 8019310:	db33      	blt.n	801937a <__lshift+0xb6>
 8019312:	6920      	ldr	r0, [r4, #16]
 8019314:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019318:	f104 0314 	add.w	r3, r4, #20
 801931c:	f019 091f 	ands.w	r9, r9, #31
 8019320:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019324:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8019328:	d02b      	beq.n	8019382 <__lshift+0xbe>
 801932a:	f1c9 0e20 	rsb	lr, r9, #32
 801932e:	468a      	mov	sl, r1
 8019330:	2200      	movs	r2, #0
 8019332:	6818      	ldr	r0, [r3, #0]
 8019334:	fa00 f009 	lsl.w	r0, r0, r9
 8019338:	4302      	orrs	r2, r0
 801933a:	f84a 2b04 	str.w	r2, [sl], #4
 801933e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019342:	459c      	cmp	ip, r3
 8019344:	fa22 f20e 	lsr.w	r2, r2, lr
 8019348:	d8f3      	bhi.n	8019332 <__lshift+0x6e>
 801934a:	ebac 0304 	sub.w	r3, ip, r4
 801934e:	3b15      	subs	r3, #21
 8019350:	f023 0303 	bic.w	r3, r3, #3
 8019354:	3304      	adds	r3, #4
 8019356:	f104 0015 	add.w	r0, r4, #21
 801935a:	4584      	cmp	ip, r0
 801935c:	bf38      	it	cc
 801935e:	2304      	movcc	r3, #4
 8019360:	50ca      	str	r2, [r1, r3]
 8019362:	b10a      	cbz	r2, 8019368 <__lshift+0xa4>
 8019364:	f108 0602 	add.w	r6, r8, #2
 8019368:	3e01      	subs	r6, #1
 801936a:	4638      	mov	r0, r7
 801936c:	612e      	str	r6, [r5, #16]
 801936e:	4621      	mov	r1, r4
 8019370:	f7ff fd8c 	bl	8018e8c <_Bfree>
 8019374:	4628      	mov	r0, r5
 8019376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801937a:	f842 0f04 	str.w	r0, [r2, #4]!
 801937e:	3301      	adds	r3, #1
 8019380:	e7c5      	b.n	801930e <__lshift+0x4a>
 8019382:	3904      	subs	r1, #4
 8019384:	f853 2b04 	ldr.w	r2, [r3], #4
 8019388:	f841 2f04 	str.w	r2, [r1, #4]!
 801938c:	459c      	cmp	ip, r3
 801938e:	d8f9      	bhi.n	8019384 <__lshift+0xc0>
 8019390:	e7ea      	b.n	8019368 <__lshift+0xa4>
 8019392:	bf00      	nop
 8019394:	0801c4b4 	.word	0x0801c4b4
 8019398:	0801c544 	.word	0x0801c544

0801939c <__mcmp>:
 801939c:	b530      	push	{r4, r5, lr}
 801939e:	6902      	ldr	r2, [r0, #16]
 80193a0:	690c      	ldr	r4, [r1, #16]
 80193a2:	1b12      	subs	r2, r2, r4
 80193a4:	d10e      	bne.n	80193c4 <__mcmp+0x28>
 80193a6:	f100 0314 	add.w	r3, r0, #20
 80193aa:	3114      	adds	r1, #20
 80193ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80193b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80193b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80193b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80193bc:	42a5      	cmp	r5, r4
 80193be:	d003      	beq.n	80193c8 <__mcmp+0x2c>
 80193c0:	d305      	bcc.n	80193ce <__mcmp+0x32>
 80193c2:	2201      	movs	r2, #1
 80193c4:	4610      	mov	r0, r2
 80193c6:	bd30      	pop	{r4, r5, pc}
 80193c8:	4283      	cmp	r3, r0
 80193ca:	d3f3      	bcc.n	80193b4 <__mcmp+0x18>
 80193cc:	e7fa      	b.n	80193c4 <__mcmp+0x28>
 80193ce:	f04f 32ff 	mov.w	r2, #4294967295
 80193d2:	e7f7      	b.n	80193c4 <__mcmp+0x28>

080193d4 <__mdiff>:
 80193d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193d8:	460c      	mov	r4, r1
 80193da:	4606      	mov	r6, r0
 80193dc:	4611      	mov	r1, r2
 80193de:	4620      	mov	r0, r4
 80193e0:	4617      	mov	r7, r2
 80193e2:	f7ff ffdb 	bl	801939c <__mcmp>
 80193e6:	1e05      	subs	r5, r0, #0
 80193e8:	d110      	bne.n	801940c <__mdiff+0x38>
 80193ea:	4629      	mov	r1, r5
 80193ec:	4630      	mov	r0, r6
 80193ee:	f7ff fd0d 	bl	8018e0c <_Balloc>
 80193f2:	b930      	cbnz	r0, 8019402 <__mdiff+0x2e>
 80193f4:	4b39      	ldr	r3, [pc, #228]	; (80194dc <__mdiff+0x108>)
 80193f6:	4602      	mov	r2, r0
 80193f8:	f240 2132 	movw	r1, #562	; 0x232
 80193fc:	4838      	ldr	r0, [pc, #224]	; (80194e0 <__mdiff+0x10c>)
 80193fe:	f000 fb53 	bl	8019aa8 <__assert_func>
 8019402:	2301      	movs	r3, #1
 8019404:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8019408:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801940c:	bfa4      	itt	ge
 801940e:	463b      	movge	r3, r7
 8019410:	4627      	movge	r7, r4
 8019412:	4630      	mov	r0, r6
 8019414:	6879      	ldr	r1, [r7, #4]
 8019416:	bfa6      	itte	ge
 8019418:	461c      	movge	r4, r3
 801941a:	2500      	movge	r5, #0
 801941c:	2501      	movlt	r5, #1
 801941e:	f7ff fcf5 	bl	8018e0c <_Balloc>
 8019422:	b920      	cbnz	r0, 801942e <__mdiff+0x5a>
 8019424:	4b2d      	ldr	r3, [pc, #180]	; (80194dc <__mdiff+0x108>)
 8019426:	4602      	mov	r2, r0
 8019428:	f44f 7110 	mov.w	r1, #576	; 0x240
 801942c:	e7e6      	b.n	80193fc <__mdiff+0x28>
 801942e:	693e      	ldr	r6, [r7, #16]
 8019430:	60c5      	str	r5, [r0, #12]
 8019432:	6925      	ldr	r5, [r4, #16]
 8019434:	f107 0114 	add.w	r1, r7, #20
 8019438:	f104 0914 	add.w	r9, r4, #20
 801943c:	f100 0e14 	add.w	lr, r0, #20
 8019440:	f107 0210 	add.w	r2, r7, #16
 8019444:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8019448:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801944c:	46f2      	mov	sl, lr
 801944e:	2700      	movs	r7, #0
 8019450:	f859 3b04 	ldr.w	r3, [r9], #4
 8019454:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8019458:	fa1f f883 	uxth.w	r8, r3
 801945c:	fa17 f78b 	uxtah	r7, r7, fp
 8019460:	0c1b      	lsrs	r3, r3, #16
 8019462:	eba7 0808 	sub.w	r8, r7, r8
 8019466:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801946a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801946e:	fa1f f888 	uxth.w	r8, r8
 8019472:	141f      	asrs	r7, r3, #16
 8019474:	454d      	cmp	r5, r9
 8019476:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801947a:	f84a 3b04 	str.w	r3, [sl], #4
 801947e:	d8e7      	bhi.n	8019450 <__mdiff+0x7c>
 8019480:	1b2b      	subs	r3, r5, r4
 8019482:	3b15      	subs	r3, #21
 8019484:	f023 0303 	bic.w	r3, r3, #3
 8019488:	3304      	adds	r3, #4
 801948a:	3415      	adds	r4, #21
 801948c:	42a5      	cmp	r5, r4
 801948e:	bf38      	it	cc
 8019490:	2304      	movcc	r3, #4
 8019492:	4419      	add	r1, r3
 8019494:	4473      	add	r3, lr
 8019496:	469e      	mov	lr, r3
 8019498:	460d      	mov	r5, r1
 801949a:	4565      	cmp	r5, ip
 801949c:	d30e      	bcc.n	80194bc <__mdiff+0xe8>
 801949e:	f10c 0203 	add.w	r2, ip, #3
 80194a2:	1a52      	subs	r2, r2, r1
 80194a4:	f022 0203 	bic.w	r2, r2, #3
 80194a8:	3903      	subs	r1, #3
 80194aa:	458c      	cmp	ip, r1
 80194ac:	bf38      	it	cc
 80194ae:	2200      	movcc	r2, #0
 80194b0:	441a      	add	r2, r3
 80194b2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80194b6:	b17b      	cbz	r3, 80194d8 <__mdiff+0x104>
 80194b8:	6106      	str	r6, [r0, #16]
 80194ba:	e7a5      	b.n	8019408 <__mdiff+0x34>
 80194bc:	f855 8b04 	ldr.w	r8, [r5], #4
 80194c0:	fa17 f488 	uxtah	r4, r7, r8
 80194c4:	1422      	asrs	r2, r4, #16
 80194c6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80194ca:	b2a4      	uxth	r4, r4
 80194cc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80194d0:	f84e 4b04 	str.w	r4, [lr], #4
 80194d4:	1417      	asrs	r7, r2, #16
 80194d6:	e7e0      	b.n	801949a <__mdiff+0xc6>
 80194d8:	3e01      	subs	r6, #1
 80194da:	e7ea      	b.n	80194b2 <__mdiff+0xde>
 80194dc:	0801c4b4 	.word	0x0801c4b4
 80194e0:	0801c544 	.word	0x0801c544

080194e4 <__ulp>:
 80194e4:	b082      	sub	sp, #8
 80194e6:	ed8d 0b00 	vstr	d0, [sp]
 80194ea:	9b01      	ldr	r3, [sp, #4]
 80194ec:	4912      	ldr	r1, [pc, #72]	; (8019538 <__ulp+0x54>)
 80194ee:	4019      	ands	r1, r3
 80194f0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80194f4:	2900      	cmp	r1, #0
 80194f6:	dd05      	ble.n	8019504 <__ulp+0x20>
 80194f8:	2200      	movs	r2, #0
 80194fa:	460b      	mov	r3, r1
 80194fc:	ec43 2b10 	vmov	d0, r2, r3
 8019500:	b002      	add	sp, #8
 8019502:	4770      	bx	lr
 8019504:	4249      	negs	r1, r1
 8019506:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801950a:	ea4f 5021 	mov.w	r0, r1, asr #20
 801950e:	f04f 0200 	mov.w	r2, #0
 8019512:	f04f 0300 	mov.w	r3, #0
 8019516:	da04      	bge.n	8019522 <__ulp+0x3e>
 8019518:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801951c:	fa41 f300 	asr.w	r3, r1, r0
 8019520:	e7ec      	b.n	80194fc <__ulp+0x18>
 8019522:	f1a0 0114 	sub.w	r1, r0, #20
 8019526:	291e      	cmp	r1, #30
 8019528:	bfda      	itte	le
 801952a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801952e:	fa20 f101 	lsrle.w	r1, r0, r1
 8019532:	2101      	movgt	r1, #1
 8019534:	460a      	mov	r2, r1
 8019536:	e7e1      	b.n	80194fc <__ulp+0x18>
 8019538:	7ff00000 	.word	0x7ff00000

0801953c <__b2d>:
 801953c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801953e:	6905      	ldr	r5, [r0, #16]
 8019540:	f100 0714 	add.w	r7, r0, #20
 8019544:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8019548:	1f2e      	subs	r6, r5, #4
 801954a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801954e:	4620      	mov	r0, r4
 8019550:	f7ff fd52 	bl	8018ff8 <__hi0bits>
 8019554:	f1c0 0320 	rsb	r3, r0, #32
 8019558:	280a      	cmp	r0, #10
 801955a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80195d8 <__b2d+0x9c>
 801955e:	600b      	str	r3, [r1, #0]
 8019560:	dc14      	bgt.n	801958c <__b2d+0x50>
 8019562:	f1c0 0e0b 	rsb	lr, r0, #11
 8019566:	fa24 f10e 	lsr.w	r1, r4, lr
 801956a:	42b7      	cmp	r7, r6
 801956c:	ea41 030c 	orr.w	r3, r1, ip
 8019570:	bf34      	ite	cc
 8019572:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019576:	2100      	movcs	r1, #0
 8019578:	3015      	adds	r0, #21
 801957a:	fa04 f000 	lsl.w	r0, r4, r0
 801957e:	fa21 f10e 	lsr.w	r1, r1, lr
 8019582:	ea40 0201 	orr.w	r2, r0, r1
 8019586:	ec43 2b10 	vmov	d0, r2, r3
 801958a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801958c:	42b7      	cmp	r7, r6
 801958e:	bf3a      	itte	cc
 8019590:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019594:	f1a5 0608 	subcc.w	r6, r5, #8
 8019598:	2100      	movcs	r1, #0
 801959a:	380b      	subs	r0, #11
 801959c:	d017      	beq.n	80195ce <__b2d+0x92>
 801959e:	f1c0 0c20 	rsb	ip, r0, #32
 80195a2:	fa04 f500 	lsl.w	r5, r4, r0
 80195a6:	42be      	cmp	r6, r7
 80195a8:	fa21 f40c 	lsr.w	r4, r1, ip
 80195ac:	ea45 0504 	orr.w	r5, r5, r4
 80195b0:	bf8c      	ite	hi
 80195b2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80195b6:	2400      	movls	r4, #0
 80195b8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80195bc:	fa01 f000 	lsl.w	r0, r1, r0
 80195c0:	fa24 f40c 	lsr.w	r4, r4, ip
 80195c4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80195c8:	ea40 0204 	orr.w	r2, r0, r4
 80195cc:	e7db      	b.n	8019586 <__b2d+0x4a>
 80195ce:	ea44 030c 	orr.w	r3, r4, ip
 80195d2:	460a      	mov	r2, r1
 80195d4:	e7d7      	b.n	8019586 <__b2d+0x4a>
 80195d6:	bf00      	nop
 80195d8:	3ff00000 	.word	0x3ff00000

080195dc <__d2b>:
 80195dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80195e0:	4689      	mov	r9, r1
 80195e2:	2101      	movs	r1, #1
 80195e4:	ec57 6b10 	vmov	r6, r7, d0
 80195e8:	4690      	mov	r8, r2
 80195ea:	f7ff fc0f 	bl	8018e0c <_Balloc>
 80195ee:	4604      	mov	r4, r0
 80195f0:	b930      	cbnz	r0, 8019600 <__d2b+0x24>
 80195f2:	4602      	mov	r2, r0
 80195f4:	4b25      	ldr	r3, [pc, #148]	; (801968c <__d2b+0xb0>)
 80195f6:	4826      	ldr	r0, [pc, #152]	; (8019690 <__d2b+0xb4>)
 80195f8:	f240 310a 	movw	r1, #778	; 0x30a
 80195fc:	f000 fa54 	bl	8019aa8 <__assert_func>
 8019600:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8019604:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8019608:	bb35      	cbnz	r5, 8019658 <__d2b+0x7c>
 801960a:	2e00      	cmp	r6, #0
 801960c:	9301      	str	r3, [sp, #4]
 801960e:	d028      	beq.n	8019662 <__d2b+0x86>
 8019610:	4668      	mov	r0, sp
 8019612:	9600      	str	r6, [sp, #0]
 8019614:	f7ff fd10 	bl	8019038 <__lo0bits>
 8019618:	9900      	ldr	r1, [sp, #0]
 801961a:	b300      	cbz	r0, 801965e <__d2b+0x82>
 801961c:	9a01      	ldr	r2, [sp, #4]
 801961e:	f1c0 0320 	rsb	r3, r0, #32
 8019622:	fa02 f303 	lsl.w	r3, r2, r3
 8019626:	430b      	orrs	r3, r1
 8019628:	40c2      	lsrs	r2, r0
 801962a:	6163      	str	r3, [r4, #20]
 801962c:	9201      	str	r2, [sp, #4]
 801962e:	9b01      	ldr	r3, [sp, #4]
 8019630:	61a3      	str	r3, [r4, #24]
 8019632:	2b00      	cmp	r3, #0
 8019634:	bf14      	ite	ne
 8019636:	2202      	movne	r2, #2
 8019638:	2201      	moveq	r2, #1
 801963a:	6122      	str	r2, [r4, #16]
 801963c:	b1d5      	cbz	r5, 8019674 <__d2b+0x98>
 801963e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8019642:	4405      	add	r5, r0
 8019644:	f8c9 5000 	str.w	r5, [r9]
 8019648:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801964c:	f8c8 0000 	str.w	r0, [r8]
 8019650:	4620      	mov	r0, r4
 8019652:	b003      	add	sp, #12
 8019654:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019658:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801965c:	e7d5      	b.n	801960a <__d2b+0x2e>
 801965e:	6161      	str	r1, [r4, #20]
 8019660:	e7e5      	b.n	801962e <__d2b+0x52>
 8019662:	a801      	add	r0, sp, #4
 8019664:	f7ff fce8 	bl	8019038 <__lo0bits>
 8019668:	9b01      	ldr	r3, [sp, #4]
 801966a:	6163      	str	r3, [r4, #20]
 801966c:	2201      	movs	r2, #1
 801966e:	6122      	str	r2, [r4, #16]
 8019670:	3020      	adds	r0, #32
 8019672:	e7e3      	b.n	801963c <__d2b+0x60>
 8019674:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019678:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801967c:	f8c9 0000 	str.w	r0, [r9]
 8019680:	6918      	ldr	r0, [r3, #16]
 8019682:	f7ff fcb9 	bl	8018ff8 <__hi0bits>
 8019686:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801968a:	e7df      	b.n	801964c <__d2b+0x70>
 801968c:	0801c4b4 	.word	0x0801c4b4
 8019690:	0801c544 	.word	0x0801c544

08019694 <__ratio>:
 8019694:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019698:	4688      	mov	r8, r1
 801969a:	4669      	mov	r1, sp
 801969c:	4681      	mov	r9, r0
 801969e:	f7ff ff4d 	bl	801953c <__b2d>
 80196a2:	a901      	add	r1, sp, #4
 80196a4:	4640      	mov	r0, r8
 80196a6:	ec55 4b10 	vmov	r4, r5, d0
 80196aa:	f7ff ff47 	bl	801953c <__b2d>
 80196ae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80196b2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80196b6:	eba3 0c02 	sub.w	ip, r3, r2
 80196ba:	e9dd 3200 	ldrd	r3, r2, [sp]
 80196be:	1a9b      	subs	r3, r3, r2
 80196c0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80196c4:	ec51 0b10 	vmov	r0, r1, d0
 80196c8:	2b00      	cmp	r3, #0
 80196ca:	bfd6      	itet	le
 80196cc:	460a      	movle	r2, r1
 80196ce:	462a      	movgt	r2, r5
 80196d0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80196d4:	468b      	mov	fp, r1
 80196d6:	462f      	mov	r7, r5
 80196d8:	bfd4      	ite	le
 80196da:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80196de:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80196e2:	4620      	mov	r0, r4
 80196e4:	ee10 2a10 	vmov	r2, s0
 80196e8:	465b      	mov	r3, fp
 80196ea:	4639      	mov	r1, r7
 80196ec:	f7e7 f8ae 	bl	800084c <__aeabi_ddiv>
 80196f0:	ec41 0b10 	vmov	d0, r0, r1
 80196f4:	b003      	add	sp, #12
 80196f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080196fa <__copybits>:
 80196fa:	3901      	subs	r1, #1
 80196fc:	b570      	push	{r4, r5, r6, lr}
 80196fe:	1149      	asrs	r1, r1, #5
 8019700:	6914      	ldr	r4, [r2, #16]
 8019702:	3101      	adds	r1, #1
 8019704:	f102 0314 	add.w	r3, r2, #20
 8019708:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801970c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8019710:	1f05      	subs	r5, r0, #4
 8019712:	42a3      	cmp	r3, r4
 8019714:	d30c      	bcc.n	8019730 <__copybits+0x36>
 8019716:	1aa3      	subs	r3, r4, r2
 8019718:	3b11      	subs	r3, #17
 801971a:	f023 0303 	bic.w	r3, r3, #3
 801971e:	3211      	adds	r2, #17
 8019720:	42a2      	cmp	r2, r4
 8019722:	bf88      	it	hi
 8019724:	2300      	movhi	r3, #0
 8019726:	4418      	add	r0, r3
 8019728:	2300      	movs	r3, #0
 801972a:	4288      	cmp	r0, r1
 801972c:	d305      	bcc.n	801973a <__copybits+0x40>
 801972e:	bd70      	pop	{r4, r5, r6, pc}
 8019730:	f853 6b04 	ldr.w	r6, [r3], #4
 8019734:	f845 6f04 	str.w	r6, [r5, #4]!
 8019738:	e7eb      	b.n	8019712 <__copybits+0x18>
 801973a:	f840 3b04 	str.w	r3, [r0], #4
 801973e:	e7f4      	b.n	801972a <__copybits+0x30>

08019740 <__any_on>:
 8019740:	f100 0214 	add.w	r2, r0, #20
 8019744:	6900      	ldr	r0, [r0, #16]
 8019746:	114b      	asrs	r3, r1, #5
 8019748:	4298      	cmp	r0, r3
 801974a:	b510      	push	{r4, lr}
 801974c:	db11      	blt.n	8019772 <__any_on+0x32>
 801974e:	dd0a      	ble.n	8019766 <__any_on+0x26>
 8019750:	f011 011f 	ands.w	r1, r1, #31
 8019754:	d007      	beq.n	8019766 <__any_on+0x26>
 8019756:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801975a:	fa24 f001 	lsr.w	r0, r4, r1
 801975e:	fa00 f101 	lsl.w	r1, r0, r1
 8019762:	428c      	cmp	r4, r1
 8019764:	d10b      	bne.n	801977e <__any_on+0x3e>
 8019766:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801976a:	4293      	cmp	r3, r2
 801976c:	d803      	bhi.n	8019776 <__any_on+0x36>
 801976e:	2000      	movs	r0, #0
 8019770:	bd10      	pop	{r4, pc}
 8019772:	4603      	mov	r3, r0
 8019774:	e7f7      	b.n	8019766 <__any_on+0x26>
 8019776:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801977a:	2900      	cmp	r1, #0
 801977c:	d0f5      	beq.n	801976a <__any_on+0x2a>
 801977e:	2001      	movs	r0, #1
 8019780:	e7f6      	b.n	8019770 <__any_on+0x30>

08019782 <_calloc_r>:
 8019782:	b513      	push	{r0, r1, r4, lr}
 8019784:	434a      	muls	r2, r1
 8019786:	4611      	mov	r1, r2
 8019788:	9201      	str	r2, [sp, #4]
 801978a:	f7fc fb41 	bl	8015e10 <_malloc_r>
 801978e:	4604      	mov	r4, r0
 8019790:	b118      	cbz	r0, 801979a <_calloc_r+0x18>
 8019792:	9a01      	ldr	r2, [sp, #4]
 8019794:	2100      	movs	r1, #0
 8019796:	f7fc fae3 	bl	8015d60 <memset>
 801979a:	4620      	mov	r0, r4
 801979c:	b002      	add	sp, #8
 801979e:	bd10      	pop	{r4, pc}

080197a0 <__ssputs_r>:
 80197a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80197a4:	688e      	ldr	r6, [r1, #8]
 80197a6:	429e      	cmp	r6, r3
 80197a8:	4682      	mov	sl, r0
 80197aa:	460c      	mov	r4, r1
 80197ac:	4690      	mov	r8, r2
 80197ae:	461f      	mov	r7, r3
 80197b0:	d838      	bhi.n	8019824 <__ssputs_r+0x84>
 80197b2:	898a      	ldrh	r2, [r1, #12]
 80197b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80197b8:	d032      	beq.n	8019820 <__ssputs_r+0x80>
 80197ba:	6825      	ldr	r5, [r4, #0]
 80197bc:	6909      	ldr	r1, [r1, #16]
 80197be:	eba5 0901 	sub.w	r9, r5, r1
 80197c2:	6965      	ldr	r5, [r4, #20]
 80197c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80197c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80197cc:	3301      	adds	r3, #1
 80197ce:	444b      	add	r3, r9
 80197d0:	106d      	asrs	r5, r5, #1
 80197d2:	429d      	cmp	r5, r3
 80197d4:	bf38      	it	cc
 80197d6:	461d      	movcc	r5, r3
 80197d8:	0553      	lsls	r3, r2, #21
 80197da:	d531      	bpl.n	8019840 <__ssputs_r+0xa0>
 80197dc:	4629      	mov	r1, r5
 80197de:	f7fc fb17 	bl	8015e10 <_malloc_r>
 80197e2:	4606      	mov	r6, r0
 80197e4:	b950      	cbnz	r0, 80197fc <__ssputs_r+0x5c>
 80197e6:	230c      	movs	r3, #12
 80197e8:	f8ca 3000 	str.w	r3, [sl]
 80197ec:	89a3      	ldrh	r3, [r4, #12]
 80197ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80197f2:	81a3      	strh	r3, [r4, #12]
 80197f4:	f04f 30ff 	mov.w	r0, #4294967295
 80197f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80197fc:	6921      	ldr	r1, [r4, #16]
 80197fe:	464a      	mov	r2, r9
 8019800:	f7fc fa86 	bl	8015d10 <memcpy>
 8019804:	89a3      	ldrh	r3, [r4, #12]
 8019806:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801980a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801980e:	81a3      	strh	r3, [r4, #12]
 8019810:	6126      	str	r6, [r4, #16]
 8019812:	6165      	str	r5, [r4, #20]
 8019814:	444e      	add	r6, r9
 8019816:	eba5 0509 	sub.w	r5, r5, r9
 801981a:	6026      	str	r6, [r4, #0]
 801981c:	60a5      	str	r5, [r4, #8]
 801981e:	463e      	mov	r6, r7
 8019820:	42be      	cmp	r6, r7
 8019822:	d900      	bls.n	8019826 <__ssputs_r+0x86>
 8019824:	463e      	mov	r6, r7
 8019826:	4632      	mov	r2, r6
 8019828:	6820      	ldr	r0, [r4, #0]
 801982a:	4641      	mov	r1, r8
 801982c:	f7fc fa7e 	bl	8015d2c <memmove>
 8019830:	68a3      	ldr	r3, [r4, #8]
 8019832:	6822      	ldr	r2, [r4, #0]
 8019834:	1b9b      	subs	r3, r3, r6
 8019836:	4432      	add	r2, r6
 8019838:	60a3      	str	r3, [r4, #8]
 801983a:	6022      	str	r2, [r4, #0]
 801983c:	2000      	movs	r0, #0
 801983e:	e7db      	b.n	80197f8 <__ssputs_r+0x58>
 8019840:	462a      	mov	r2, r5
 8019842:	f000 f964 	bl	8019b0e <_realloc_r>
 8019846:	4606      	mov	r6, r0
 8019848:	2800      	cmp	r0, #0
 801984a:	d1e1      	bne.n	8019810 <__ssputs_r+0x70>
 801984c:	6921      	ldr	r1, [r4, #16]
 801984e:	4650      	mov	r0, sl
 8019850:	f7fc fa8e 	bl	8015d70 <_free_r>
 8019854:	e7c7      	b.n	80197e6 <__ssputs_r+0x46>
	...

08019858 <_svfiprintf_r>:
 8019858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801985c:	4698      	mov	r8, r3
 801985e:	898b      	ldrh	r3, [r1, #12]
 8019860:	061b      	lsls	r3, r3, #24
 8019862:	b09d      	sub	sp, #116	; 0x74
 8019864:	4607      	mov	r7, r0
 8019866:	460d      	mov	r5, r1
 8019868:	4614      	mov	r4, r2
 801986a:	d50e      	bpl.n	801988a <_svfiprintf_r+0x32>
 801986c:	690b      	ldr	r3, [r1, #16]
 801986e:	b963      	cbnz	r3, 801988a <_svfiprintf_r+0x32>
 8019870:	2140      	movs	r1, #64	; 0x40
 8019872:	f7fc facd 	bl	8015e10 <_malloc_r>
 8019876:	6028      	str	r0, [r5, #0]
 8019878:	6128      	str	r0, [r5, #16]
 801987a:	b920      	cbnz	r0, 8019886 <_svfiprintf_r+0x2e>
 801987c:	230c      	movs	r3, #12
 801987e:	603b      	str	r3, [r7, #0]
 8019880:	f04f 30ff 	mov.w	r0, #4294967295
 8019884:	e0d1      	b.n	8019a2a <_svfiprintf_r+0x1d2>
 8019886:	2340      	movs	r3, #64	; 0x40
 8019888:	616b      	str	r3, [r5, #20]
 801988a:	2300      	movs	r3, #0
 801988c:	9309      	str	r3, [sp, #36]	; 0x24
 801988e:	2320      	movs	r3, #32
 8019890:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019894:	f8cd 800c 	str.w	r8, [sp, #12]
 8019898:	2330      	movs	r3, #48	; 0x30
 801989a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8019a44 <_svfiprintf_r+0x1ec>
 801989e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80198a2:	f04f 0901 	mov.w	r9, #1
 80198a6:	4623      	mov	r3, r4
 80198a8:	469a      	mov	sl, r3
 80198aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80198ae:	b10a      	cbz	r2, 80198b4 <_svfiprintf_r+0x5c>
 80198b0:	2a25      	cmp	r2, #37	; 0x25
 80198b2:	d1f9      	bne.n	80198a8 <_svfiprintf_r+0x50>
 80198b4:	ebba 0b04 	subs.w	fp, sl, r4
 80198b8:	d00b      	beq.n	80198d2 <_svfiprintf_r+0x7a>
 80198ba:	465b      	mov	r3, fp
 80198bc:	4622      	mov	r2, r4
 80198be:	4629      	mov	r1, r5
 80198c0:	4638      	mov	r0, r7
 80198c2:	f7ff ff6d 	bl	80197a0 <__ssputs_r>
 80198c6:	3001      	adds	r0, #1
 80198c8:	f000 80aa 	beq.w	8019a20 <_svfiprintf_r+0x1c8>
 80198cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80198ce:	445a      	add	r2, fp
 80198d0:	9209      	str	r2, [sp, #36]	; 0x24
 80198d2:	f89a 3000 	ldrb.w	r3, [sl]
 80198d6:	2b00      	cmp	r3, #0
 80198d8:	f000 80a2 	beq.w	8019a20 <_svfiprintf_r+0x1c8>
 80198dc:	2300      	movs	r3, #0
 80198de:	f04f 32ff 	mov.w	r2, #4294967295
 80198e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80198e6:	f10a 0a01 	add.w	sl, sl, #1
 80198ea:	9304      	str	r3, [sp, #16]
 80198ec:	9307      	str	r3, [sp, #28]
 80198ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80198f2:	931a      	str	r3, [sp, #104]	; 0x68
 80198f4:	4654      	mov	r4, sl
 80198f6:	2205      	movs	r2, #5
 80198f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80198fc:	4851      	ldr	r0, [pc, #324]	; (8019a44 <_svfiprintf_r+0x1ec>)
 80198fe:	f7e6 fc6f 	bl	80001e0 <memchr>
 8019902:	9a04      	ldr	r2, [sp, #16]
 8019904:	b9d8      	cbnz	r0, 801993e <_svfiprintf_r+0xe6>
 8019906:	06d0      	lsls	r0, r2, #27
 8019908:	bf44      	itt	mi
 801990a:	2320      	movmi	r3, #32
 801990c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019910:	0711      	lsls	r1, r2, #28
 8019912:	bf44      	itt	mi
 8019914:	232b      	movmi	r3, #43	; 0x2b
 8019916:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801991a:	f89a 3000 	ldrb.w	r3, [sl]
 801991e:	2b2a      	cmp	r3, #42	; 0x2a
 8019920:	d015      	beq.n	801994e <_svfiprintf_r+0xf6>
 8019922:	9a07      	ldr	r2, [sp, #28]
 8019924:	4654      	mov	r4, sl
 8019926:	2000      	movs	r0, #0
 8019928:	f04f 0c0a 	mov.w	ip, #10
 801992c:	4621      	mov	r1, r4
 801992e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019932:	3b30      	subs	r3, #48	; 0x30
 8019934:	2b09      	cmp	r3, #9
 8019936:	d94e      	bls.n	80199d6 <_svfiprintf_r+0x17e>
 8019938:	b1b0      	cbz	r0, 8019968 <_svfiprintf_r+0x110>
 801993a:	9207      	str	r2, [sp, #28]
 801993c:	e014      	b.n	8019968 <_svfiprintf_r+0x110>
 801993e:	eba0 0308 	sub.w	r3, r0, r8
 8019942:	fa09 f303 	lsl.w	r3, r9, r3
 8019946:	4313      	orrs	r3, r2
 8019948:	9304      	str	r3, [sp, #16]
 801994a:	46a2      	mov	sl, r4
 801994c:	e7d2      	b.n	80198f4 <_svfiprintf_r+0x9c>
 801994e:	9b03      	ldr	r3, [sp, #12]
 8019950:	1d19      	adds	r1, r3, #4
 8019952:	681b      	ldr	r3, [r3, #0]
 8019954:	9103      	str	r1, [sp, #12]
 8019956:	2b00      	cmp	r3, #0
 8019958:	bfbb      	ittet	lt
 801995a:	425b      	neglt	r3, r3
 801995c:	f042 0202 	orrlt.w	r2, r2, #2
 8019960:	9307      	strge	r3, [sp, #28]
 8019962:	9307      	strlt	r3, [sp, #28]
 8019964:	bfb8      	it	lt
 8019966:	9204      	strlt	r2, [sp, #16]
 8019968:	7823      	ldrb	r3, [r4, #0]
 801996a:	2b2e      	cmp	r3, #46	; 0x2e
 801996c:	d10c      	bne.n	8019988 <_svfiprintf_r+0x130>
 801996e:	7863      	ldrb	r3, [r4, #1]
 8019970:	2b2a      	cmp	r3, #42	; 0x2a
 8019972:	d135      	bne.n	80199e0 <_svfiprintf_r+0x188>
 8019974:	9b03      	ldr	r3, [sp, #12]
 8019976:	1d1a      	adds	r2, r3, #4
 8019978:	681b      	ldr	r3, [r3, #0]
 801997a:	9203      	str	r2, [sp, #12]
 801997c:	2b00      	cmp	r3, #0
 801997e:	bfb8      	it	lt
 8019980:	f04f 33ff 	movlt.w	r3, #4294967295
 8019984:	3402      	adds	r4, #2
 8019986:	9305      	str	r3, [sp, #20]
 8019988:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8019a54 <_svfiprintf_r+0x1fc>
 801998c:	7821      	ldrb	r1, [r4, #0]
 801998e:	2203      	movs	r2, #3
 8019990:	4650      	mov	r0, sl
 8019992:	f7e6 fc25 	bl	80001e0 <memchr>
 8019996:	b140      	cbz	r0, 80199aa <_svfiprintf_r+0x152>
 8019998:	2340      	movs	r3, #64	; 0x40
 801999a:	eba0 000a 	sub.w	r0, r0, sl
 801999e:	fa03 f000 	lsl.w	r0, r3, r0
 80199a2:	9b04      	ldr	r3, [sp, #16]
 80199a4:	4303      	orrs	r3, r0
 80199a6:	3401      	adds	r4, #1
 80199a8:	9304      	str	r3, [sp, #16]
 80199aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80199ae:	4826      	ldr	r0, [pc, #152]	; (8019a48 <_svfiprintf_r+0x1f0>)
 80199b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80199b4:	2206      	movs	r2, #6
 80199b6:	f7e6 fc13 	bl	80001e0 <memchr>
 80199ba:	2800      	cmp	r0, #0
 80199bc:	d038      	beq.n	8019a30 <_svfiprintf_r+0x1d8>
 80199be:	4b23      	ldr	r3, [pc, #140]	; (8019a4c <_svfiprintf_r+0x1f4>)
 80199c0:	bb1b      	cbnz	r3, 8019a0a <_svfiprintf_r+0x1b2>
 80199c2:	9b03      	ldr	r3, [sp, #12]
 80199c4:	3307      	adds	r3, #7
 80199c6:	f023 0307 	bic.w	r3, r3, #7
 80199ca:	3308      	adds	r3, #8
 80199cc:	9303      	str	r3, [sp, #12]
 80199ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80199d0:	4433      	add	r3, r6
 80199d2:	9309      	str	r3, [sp, #36]	; 0x24
 80199d4:	e767      	b.n	80198a6 <_svfiprintf_r+0x4e>
 80199d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80199da:	460c      	mov	r4, r1
 80199dc:	2001      	movs	r0, #1
 80199de:	e7a5      	b.n	801992c <_svfiprintf_r+0xd4>
 80199e0:	2300      	movs	r3, #0
 80199e2:	3401      	adds	r4, #1
 80199e4:	9305      	str	r3, [sp, #20]
 80199e6:	4619      	mov	r1, r3
 80199e8:	f04f 0c0a 	mov.w	ip, #10
 80199ec:	4620      	mov	r0, r4
 80199ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80199f2:	3a30      	subs	r2, #48	; 0x30
 80199f4:	2a09      	cmp	r2, #9
 80199f6:	d903      	bls.n	8019a00 <_svfiprintf_r+0x1a8>
 80199f8:	2b00      	cmp	r3, #0
 80199fa:	d0c5      	beq.n	8019988 <_svfiprintf_r+0x130>
 80199fc:	9105      	str	r1, [sp, #20]
 80199fe:	e7c3      	b.n	8019988 <_svfiprintf_r+0x130>
 8019a00:	fb0c 2101 	mla	r1, ip, r1, r2
 8019a04:	4604      	mov	r4, r0
 8019a06:	2301      	movs	r3, #1
 8019a08:	e7f0      	b.n	80199ec <_svfiprintf_r+0x194>
 8019a0a:	ab03      	add	r3, sp, #12
 8019a0c:	9300      	str	r3, [sp, #0]
 8019a0e:	462a      	mov	r2, r5
 8019a10:	4b0f      	ldr	r3, [pc, #60]	; (8019a50 <_svfiprintf_r+0x1f8>)
 8019a12:	a904      	add	r1, sp, #16
 8019a14:	4638      	mov	r0, r7
 8019a16:	f7fc faf5 	bl	8016004 <_printf_float>
 8019a1a:	1c42      	adds	r2, r0, #1
 8019a1c:	4606      	mov	r6, r0
 8019a1e:	d1d6      	bne.n	80199ce <_svfiprintf_r+0x176>
 8019a20:	89ab      	ldrh	r3, [r5, #12]
 8019a22:	065b      	lsls	r3, r3, #25
 8019a24:	f53f af2c 	bmi.w	8019880 <_svfiprintf_r+0x28>
 8019a28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019a2a:	b01d      	add	sp, #116	; 0x74
 8019a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a30:	ab03      	add	r3, sp, #12
 8019a32:	9300      	str	r3, [sp, #0]
 8019a34:	462a      	mov	r2, r5
 8019a36:	4b06      	ldr	r3, [pc, #24]	; (8019a50 <_svfiprintf_r+0x1f8>)
 8019a38:	a904      	add	r1, sp, #16
 8019a3a:	4638      	mov	r0, r7
 8019a3c:	f7fc fd86 	bl	801654c <_printf_i>
 8019a40:	e7eb      	b.n	8019a1a <_svfiprintf_r+0x1c2>
 8019a42:	bf00      	nop
 8019a44:	0801c6a4 	.word	0x0801c6a4
 8019a48:	0801c6ae 	.word	0x0801c6ae
 8019a4c:	08016005 	.word	0x08016005
 8019a50:	080197a1 	.word	0x080197a1
 8019a54:	0801c6aa 	.word	0x0801c6aa

08019a58 <nan>:
 8019a58:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8019a60 <nan+0x8>
 8019a5c:	4770      	bx	lr
 8019a5e:	bf00      	nop
 8019a60:	00000000 	.word	0x00000000
 8019a64:	7ff80000 	.word	0x7ff80000

08019a68 <strncmp>:
 8019a68:	b510      	push	{r4, lr}
 8019a6a:	b16a      	cbz	r2, 8019a88 <strncmp+0x20>
 8019a6c:	3901      	subs	r1, #1
 8019a6e:	1884      	adds	r4, r0, r2
 8019a70:	f810 3b01 	ldrb.w	r3, [r0], #1
 8019a74:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8019a78:	4293      	cmp	r3, r2
 8019a7a:	d103      	bne.n	8019a84 <strncmp+0x1c>
 8019a7c:	42a0      	cmp	r0, r4
 8019a7e:	d001      	beq.n	8019a84 <strncmp+0x1c>
 8019a80:	2b00      	cmp	r3, #0
 8019a82:	d1f5      	bne.n	8019a70 <strncmp+0x8>
 8019a84:	1a98      	subs	r0, r3, r2
 8019a86:	bd10      	pop	{r4, pc}
 8019a88:	4610      	mov	r0, r2
 8019a8a:	e7fc      	b.n	8019a86 <strncmp+0x1e>

08019a8c <__ascii_wctomb>:
 8019a8c:	b149      	cbz	r1, 8019aa2 <__ascii_wctomb+0x16>
 8019a8e:	2aff      	cmp	r2, #255	; 0xff
 8019a90:	bf85      	ittet	hi
 8019a92:	238a      	movhi	r3, #138	; 0x8a
 8019a94:	6003      	strhi	r3, [r0, #0]
 8019a96:	700a      	strbls	r2, [r1, #0]
 8019a98:	f04f 30ff 	movhi.w	r0, #4294967295
 8019a9c:	bf98      	it	ls
 8019a9e:	2001      	movls	r0, #1
 8019aa0:	4770      	bx	lr
 8019aa2:	4608      	mov	r0, r1
 8019aa4:	4770      	bx	lr
	...

08019aa8 <__assert_func>:
 8019aa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019aaa:	4614      	mov	r4, r2
 8019aac:	461a      	mov	r2, r3
 8019aae:	4b09      	ldr	r3, [pc, #36]	; (8019ad4 <__assert_func+0x2c>)
 8019ab0:	681b      	ldr	r3, [r3, #0]
 8019ab2:	4605      	mov	r5, r0
 8019ab4:	68d8      	ldr	r0, [r3, #12]
 8019ab6:	b14c      	cbz	r4, 8019acc <__assert_func+0x24>
 8019ab8:	4b07      	ldr	r3, [pc, #28]	; (8019ad8 <__assert_func+0x30>)
 8019aba:	9100      	str	r1, [sp, #0]
 8019abc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019ac0:	4906      	ldr	r1, [pc, #24]	; (8019adc <__assert_func+0x34>)
 8019ac2:	462b      	mov	r3, r5
 8019ac4:	f000 f80e 	bl	8019ae4 <fiprintf>
 8019ac8:	f000 fa60 	bl	8019f8c <abort>
 8019acc:	4b04      	ldr	r3, [pc, #16]	; (8019ae0 <__assert_func+0x38>)
 8019ace:	461c      	mov	r4, r3
 8019ad0:	e7f3      	b.n	8019aba <__assert_func+0x12>
 8019ad2:	bf00      	nop
 8019ad4:	200009ac 	.word	0x200009ac
 8019ad8:	0801c6b5 	.word	0x0801c6b5
 8019adc:	0801c6c2 	.word	0x0801c6c2
 8019ae0:	0801c6f0 	.word	0x0801c6f0

08019ae4 <fiprintf>:
 8019ae4:	b40e      	push	{r1, r2, r3}
 8019ae6:	b503      	push	{r0, r1, lr}
 8019ae8:	4601      	mov	r1, r0
 8019aea:	ab03      	add	r3, sp, #12
 8019aec:	4805      	ldr	r0, [pc, #20]	; (8019b04 <fiprintf+0x20>)
 8019aee:	f853 2b04 	ldr.w	r2, [r3], #4
 8019af2:	6800      	ldr	r0, [r0, #0]
 8019af4:	9301      	str	r3, [sp, #4]
 8019af6:	f000 f859 	bl	8019bac <_vfiprintf_r>
 8019afa:	b002      	add	sp, #8
 8019afc:	f85d eb04 	ldr.w	lr, [sp], #4
 8019b00:	b003      	add	sp, #12
 8019b02:	4770      	bx	lr
 8019b04:	200009ac 	.word	0x200009ac

08019b08 <__retarget_lock_init_recursive>:
 8019b08:	4770      	bx	lr

08019b0a <__retarget_lock_acquire_recursive>:
 8019b0a:	4770      	bx	lr

08019b0c <__retarget_lock_release_recursive>:
 8019b0c:	4770      	bx	lr

08019b0e <_realloc_r>:
 8019b0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b10:	4607      	mov	r7, r0
 8019b12:	4614      	mov	r4, r2
 8019b14:	460e      	mov	r6, r1
 8019b16:	b921      	cbnz	r1, 8019b22 <_realloc_r+0x14>
 8019b18:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019b1c:	4611      	mov	r1, r2
 8019b1e:	f7fc b977 	b.w	8015e10 <_malloc_r>
 8019b22:	b922      	cbnz	r2, 8019b2e <_realloc_r+0x20>
 8019b24:	f7fc f924 	bl	8015d70 <_free_r>
 8019b28:	4625      	mov	r5, r4
 8019b2a:	4628      	mov	r0, r5
 8019b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019b2e:	f000 fc51 	bl	801a3d4 <_malloc_usable_size_r>
 8019b32:	42a0      	cmp	r0, r4
 8019b34:	d20f      	bcs.n	8019b56 <_realloc_r+0x48>
 8019b36:	4621      	mov	r1, r4
 8019b38:	4638      	mov	r0, r7
 8019b3a:	f7fc f969 	bl	8015e10 <_malloc_r>
 8019b3e:	4605      	mov	r5, r0
 8019b40:	2800      	cmp	r0, #0
 8019b42:	d0f2      	beq.n	8019b2a <_realloc_r+0x1c>
 8019b44:	4631      	mov	r1, r6
 8019b46:	4622      	mov	r2, r4
 8019b48:	f7fc f8e2 	bl	8015d10 <memcpy>
 8019b4c:	4631      	mov	r1, r6
 8019b4e:	4638      	mov	r0, r7
 8019b50:	f7fc f90e 	bl	8015d70 <_free_r>
 8019b54:	e7e9      	b.n	8019b2a <_realloc_r+0x1c>
 8019b56:	4635      	mov	r5, r6
 8019b58:	e7e7      	b.n	8019b2a <_realloc_r+0x1c>

08019b5a <__sfputc_r>:
 8019b5a:	6893      	ldr	r3, [r2, #8]
 8019b5c:	3b01      	subs	r3, #1
 8019b5e:	2b00      	cmp	r3, #0
 8019b60:	b410      	push	{r4}
 8019b62:	6093      	str	r3, [r2, #8]
 8019b64:	da08      	bge.n	8019b78 <__sfputc_r+0x1e>
 8019b66:	6994      	ldr	r4, [r2, #24]
 8019b68:	42a3      	cmp	r3, r4
 8019b6a:	db01      	blt.n	8019b70 <__sfputc_r+0x16>
 8019b6c:	290a      	cmp	r1, #10
 8019b6e:	d103      	bne.n	8019b78 <__sfputc_r+0x1e>
 8019b70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019b74:	f000 b94a 	b.w	8019e0c <__swbuf_r>
 8019b78:	6813      	ldr	r3, [r2, #0]
 8019b7a:	1c58      	adds	r0, r3, #1
 8019b7c:	6010      	str	r0, [r2, #0]
 8019b7e:	7019      	strb	r1, [r3, #0]
 8019b80:	4608      	mov	r0, r1
 8019b82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019b86:	4770      	bx	lr

08019b88 <__sfputs_r>:
 8019b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b8a:	4606      	mov	r6, r0
 8019b8c:	460f      	mov	r7, r1
 8019b8e:	4614      	mov	r4, r2
 8019b90:	18d5      	adds	r5, r2, r3
 8019b92:	42ac      	cmp	r4, r5
 8019b94:	d101      	bne.n	8019b9a <__sfputs_r+0x12>
 8019b96:	2000      	movs	r0, #0
 8019b98:	e007      	b.n	8019baa <__sfputs_r+0x22>
 8019b9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019b9e:	463a      	mov	r2, r7
 8019ba0:	4630      	mov	r0, r6
 8019ba2:	f7ff ffda 	bl	8019b5a <__sfputc_r>
 8019ba6:	1c43      	adds	r3, r0, #1
 8019ba8:	d1f3      	bne.n	8019b92 <__sfputs_r+0xa>
 8019baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08019bac <_vfiprintf_r>:
 8019bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019bb0:	460d      	mov	r5, r1
 8019bb2:	b09d      	sub	sp, #116	; 0x74
 8019bb4:	4614      	mov	r4, r2
 8019bb6:	4698      	mov	r8, r3
 8019bb8:	4606      	mov	r6, r0
 8019bba:	b118      	cbz	r0, 8019bc4 <_vfiprintf_r+0x18>
 8019bbc:	6983      	ldr	r3, [r0, #24]
 8019bbe:	b90b      	cbnz	r3, 8019bc4 <_vfiprintf_r+0x18>
 8019bc0:	f000 fb06 	bl	801a1d0 <__sinit>
 8019bc4:	4b89      	ldr	r3, [pc, #548]	; (8019dec <_vfiprintf_r+0x240>)
 8019bc6:	429d      	cmp	r5, r3
 8019bc8:	d11b      	bne.n	8019c02 <_vfiprintf_r+0x56>
 8019bca:	6875      	ldr	r5, [r6, #4]
 8019bcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019bce:	07d9      	lsls	r1, r3, #31
 8019bd0:	d405      	bmi.n	8019bde <_vfiprintf_r+0x32>
 8019bd2:	89ab      	ldrh	r3, [r5, #12]
 8019bd4:	059a      	lsls	r2, r3, #22
 8019bd6:	d402      	bmi.n	8019bde <_vfiprintf_r+0x32>
 8019bd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019bda:	f7ff ff96 	bl	8019b0a <__retarget_lock_acquire_recursive>
 8019bde:	89ab      	ldrh	r3, [r5, #12]
 8019be0:	071b      	lsls	r3, r3, #28
 8019be2:	d501      	bpl.n	8019be8 <_vfiprintf_r+0x3c>
 8019be4:	692b      	ldr	r3, [r5, #16]
 8019be6:	b9eb      	cbnz	r3, 8019c24 <_vfiprintf_r+0x78>
 8019be8:	4629      	mov	r1, r5
 8019bea:	4630      	mov	r0, r6
 8019bec:	f000 f960 	bl	8019eb0 <__swsetup_r>
 8019bf0:	b1c0      	cbz	r0, 8019c24 <_vfiprintf_r+0x78>
 8019bf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019bf4:	07dc      	lsls	r4, r3, #31
 8019bf6:	d50e      	bpl.n	8019c16 <_vfiprintf_r+0x6a>
 8019bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8019bfc:	b01d      	add	sp, #116	; 0x74
 8019bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c02:	4b7b      	ldr	r3, [pc, #492]	; (8019df0 <_vfiprintf_r+0x244>)
 8019c04:	429d      	cmp	r5, r3
 8019c06:	d101      	bne.n	8019c0c <_vfiprintf_r+0x60>
 8019c08:	68b5      	ldr	r5, [r6, #8]
 8019c0a:	e7df      	b.n	8019bcc <_vfiprintf_r+0x20>
 8019c0c:	4b79      	ldr	r3, [pc, #484]	; (8019df4 <_vfiprintf_r+0x248>)
 8019c0e:	429d      	cmp	r5, r3
 8019c10:	bf08      	it	eq
 8019c12:	68f5      	ldreq	r5, [r6, #12]
 8019c14:	e7da      	b.n	8019bcc <_vfiprintf_r+0x20>
 8019c16:	89ab      	ldrh	r3, [r5, #12]
 8019c18:	0598      	lsls	r0, r3, #22
 8019c1a:	d4ed      	bmi.n	8019bf8 <_vfiprintf_r+0x4c>
 8019c1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019c1e:	f7ff ff75 	bl	8019b0c <__retarget_lock_release_recursive>
 8019c22:	e7e9      	b.n	8019bf8 <_vfiprintf_r+0x4c>
 8019c24:	2300      	movs	r3, #0
 8019c26:	9309      	str	r3, [sp, #36]	; 0x24
 8019c28:	2320      	movs	r3, #32
 8019c2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019c2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8019c32:	2330      	movs	r3, #48	; 0x30
 8019c34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8019df8 <_vfiprintf_r+0x24c>
 8019c38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019c3c:	f04f 0901 	mov.w	r9, #1
 8019c40:	4623      	mov	r3, r4
 8019c42:	469a      	mov	sl, r3
 8019c44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019c48:	b10a      	cbz	r2, 8019c4e <_vfiprintf_r+0xa2>
 8019c4a:	2a25      	cmp	r2, #37	; 0x25
 8019c4c:	d1f9      	bne.n	8019c42 <_vfiprintf_r+0x96>
 8019c4e:	ebba 0b04 	subs.w	fp, sl, r4
 8019c52:	d00b      	beq.n	8019c6c <_vfiprintf_r+0xc0>
 8019c54:	465b      	mov	r3, fp
 8019c56:	4622      	mov	r2, r4
 8019c58:	4629      	mov	r1, r5
 8019c5a:	4630      	mov	r0, r6
 8019c5c:	f7ff ff94 	bl	8019b88 <__sfputs_r>
 8019c60:	3001      	adds	r0, #1
 8019c62:	f000 80aa 	beq.w	8019dba <_vfiprintf_r+0x20e>
 8019c66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019c68:	445a      	add	r2, fp
 8019c6a:	9209      	str	r2, [sp, #36]	; 0x24
 8019c6c:	f89a 3000 	ldrb.w	r3, [sl]
 8019c70:	2b00      	cmp	r3, #0
 8019c72:	f000 80a2 	beq.w	8019dba <_vfiprintf_r+0x20e>
 8019c76:	2300      	movs	r3, #0
 8019c78:	f04f 32ff 	mov.w	r2, #4294967295
 8019c7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019c80:	f10a 0a01 	add.w	sl, sl, #1
 8019c84:	9304      	str	r3, [sp, #16]
 8019c86:	9307      	str	r3, [sp, #28]
 8019c88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019c8c:	931a      	str	r3, [sp, #104]	; 0x68
 8019c8e:	4654      	mov	r4, sl
 8019c90:	2205      	movs	r2, #5
 8019c92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019c96:	4858      	ldr	r0, [pc, #352]	; (8019df8 <_vfiprintf_r+0x24c>)
 8019c98:	f7e6 faa2 	bl	80001e0 <memchr>
 8019c9c:	9a04      	ldr	r2, [sp, #16]
 8019c9e:	b9d8      	cbnz	r0, 8019cd8 <_vfiprintf_r+0x12c>
 8019ca0:	06d1      	lsls	r1, r2, #27
 8019ca2:	bf44      	itt	mi
 8019ca4:	2320      	movmi	r3, #32
 8019ca6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019caa:	0713      	lsls	r3, r2, #28
 8019cac:	bf44      	itt	mi
 8019cae:	232b      	movmi	r3, #43	; 0x2b
 8019cb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019cb4:	f89a 3000 	ldrb.w	r3, [sl]
 8019cb8:	2b2a      	cmp	r3, #42	; 0x2a
 8019cba:	d015      	beq.n	8019ce8 <_vfiprintf_r+0x13c>
 8019cbc:	9a07      	ldr	r2, [sp, #28]
 8019cbe:	4654      	mov	r4, sl
 8019cc0:	2000      	movs	r0, #0
 8019cc2:	f04f 0c0a 	mov.w	ip, #10
 8019cc6:	4621      	mov	r1, r4
 8019cc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019ccc:	3b30      	subs	r3, #48	; 0x30
 8019cce:	2b09      	cmp	r3, #9
 8019cd0:	d94e      	bls.n	8019d70 <_vfiprintf_r+0x1c4>
 8019cd2:	b1b0      	cbz	r0, 8019d02 <_vfiprintf_r+0x156>
 8019cd4:	9207      	str	r2, [sp, #28]
 8019cd6:	e014      	b.n	8019d02 <_vfiprintf_r+0x156>
 8019cd8:	eba0 0308 	sub.w	r3, r0, r8
 8019cdc:	fa09 f303 	lsl.w	r3, r9, r3
 8019ce0:	4313      	orrs	r3, r2
 8019ce2:	9304      	str	r3, [sp, #16]
 8019ce4:	46a2      	mov	sl, r4
 8019ce6:	e7d2      	b.n	8019c8e <_vfiprintf_r+0xe2>
 8019ce8:	9b03      	ldr	r3, [sp, #12]
 8019cea:	1d19      	adds	r1, r3, #4
 8019cec:	681b      	ldr	r3, [r3, #0]
 8019cee:	9103      	str	r1, [sp, #12]
 8019cf0:	2b00      	cmp	r3, #0
 8019cf2:	bfbb      	ittet	lt
 8019cf4:	425b      	neglt	r3, r3
 8019cf6:	f042 0202 	orrlt.w	r2, r2, #2
 8019cfa:	9307      	strge	r3, [sp, #28]
 8019cfc:	9307      	strlt	r3, [sp, #28]
 8019cfe:	bfb8      	it	lt
 8019d00:	9204      	strlt	r2, [sp, #16]
 8019d02:	7823      	ldrb	r3, [r4, #0]
 8019d04:	2b2e      	cmp	r3, #46	; 0x2e
 8019d06:	d10c      	bne.n	8019d22 <_vfiprintf_r+0x176>
 8019d08:	7863      	ldrb	r3, [r4, #1]
 8019d0a:	2b2a      	cmp	r3, #42	; 0x2a
 8019d0c:	d135      	bne.n	8019d7a <_vfiprintf_r+0x1ce>
 8019d0e:	9b03      	ldr	r3, [sp, #12]
 8019d10:	1d1a      	adds	r2, r3, #4
 8019d12:	681b      	ldr	r3, [r3, #0]
 8019d14:	9203      	str	r2, [sp, #12]
 8019d16:	2b00      	cmp	r3, #0
 8019d18:	bfb8      	it	lt
 8019d1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8019d1e:	3402      	adds	r4, #2
 8019d20:	9305      	str	r3, [sp, #20]
 8019d22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8019e08 <_vfiprintf_r+0x25c>
 8019d26:	7821      	ldrb	r1, [r4, #0]
 8019d28:	2203      	movs	r2, #3
 8019d2a:	4650      	mov	r0, sl
 8019d2c:	f7e6 fa58 	bl	80001e0 <memchr>
 8019d30:	b140      	cbz	r0, 8019d44 <_vfiprintf_r+0x198>
 8019d32:	2340      	movs	r3, #64	; 0x40
 8019d34:	eba0 000a 	sub.w	r0, r0, sl
 8019d38:	fa03 f000 	lsl.w	r0, r3, r0
 8019d3c:	9b04      	ldr	r3, [sp, #16]
 8019d3e:	4303      	orrs	r3, r0
 8019d40:	3401      	adds	r4, #1
 8019d42:	9304      	str	r3, [sp, #16]
 8019d44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019d48:	482c      	ldr	r0, [pc, #176]	; (8019dfc <_vfiprintf_r+0x250>)
 8019d4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019d4e:	2206      	movs	r2, #6
 8019d50:	f7e6 fa46 	bl	80001e0 <memchr>
 8019d54:	2800      	cmp	r0, #0
 8019d56:	d03f      	beq.n	8019dd8 <_vfiprintf_r+0x22c>
 8019d58:	4b29      	ldr	r3, [pc, #164]	; (8019e00 <_vfiprintf_r+0x254>)
 8019d5a:	bb1b      	cbnz	r3, 8019da4 <_vfiprintf_r+0x1f8>
 8019d5c:	9b03      	ldr	r3, [sp, #12]
 8019d5e:	3307      	adds	r3, #7
 8019d60:	f023 0307 	bic.w	r3, r3, #7
 8019d64:	3308      	adds	r3, #8
 8019d66:	9303      	str	r3, [sp, #12]
 8019d68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019d6a:	443b      	add	r3, r7
 8019d6c:	9309      	str	r3, [sp, #36]	; 0x24
 8019d6e:	e767      	b.n	8019c40 <_vfiprintf_r+0x94>
 8019d70:	fb0c 3202 	mla	r2, ip, r2, r3
 8019d74:	460c      	mov	r4, r1
 8019d76:	2001      	movs	r0, #1
 8019d78:	e7a5      	b.n	8019cc6 <_vfiprintf_r+0x11a>
 8019d7a:	2300      	movs	r3, #0
 8019d7c:	3401      	adds	r4, #1
 8019d7e:	9305      	str	r3, [sp, #20]
 8019d80:	4619      	mov	r1, r3
 8019d82:	f04f 0c0a 	mov.w	ip, #10
 8019d86:	4620      	mov	r0, r4
 8019d88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019d8c:	3a30      	subs	r2, #48	; 0x30
 8019d8e:	2a09      	cmp	r2, #9
 8019d90:	d903      	bls.n	8019d9a <_vfiprintf_r+0x1ee>
 8019d92:	2b00      	cmp	r3, #0
 8019d94:	d0c5      	beq.n	8019d22 <_vfiprintf_r+0x176>
 8019d96:	9105      	str	r1, [sp, #20]
 8019d98:	e7c3      	b.n	8019d22 <_vfiprintf_r+0x176>
 8019d9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8019d9e:	4604      	mov	r4, r0
 8019da0:	2301      	movs	r3, #1
 8019da2:	e7f0      	b.n	8019d86 <_vfiprintf_r+0x1da>
 8019da4:	ab03      	add	r3, sp, #12
 8019da6:	9300      	str	r3, [sp, #0]
 8019da8:	462a      	mov	r2, r5
 8019daa:	4b16      	ldr	r3, [pc, #88]	; (8019e04 <_vfiprintf_r+0x258>)
 8019dac:	a904      	add	r1, sp, #16
 8019dae:	4630      	mov	r0, r6
 8019db0:	f7fc f928 	bl	8016004 <_printf_float>
 8019db4:	4607      	mov	r7, r0
 8019db6:	1c78      	adds	r0, r7, #1
 8019db8:	d1d6      	bne.n	8019d68 <_vfiprintf_r+0x1bc>
 8019dba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019dbc:	07d9      	lsls	r1, r3, #31
 8019dbe:	d405      	bmi.n	8019dcc <_vfiprintf_r+0x220>
 8019dc0:	89ab      	ldrh	r3, [r5, #12]
 8019dc2:	059a      	lsls	r2, r3, #22
 8019dc4:	d402      	bmi.n	8019dcc <_vfiprintf_r+0x220>
 8019dc6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019dc8:	f7ff fea0 	bl	8019b0c <__retarget_lock_release_recursive>
 8019dcc:	89ab      	ldrh	r3, [r5, #12]
 8019dce:	065b      	lsls	r3, r3, #25
 8019dd0:	f53f af12 	bmi.w	8019bf8 <_vfiprintf_r+0x4c>
 8019dd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019dd6:	e711      	b.n	8019bfc <_vfiprintf_r+0x50>
 8019dd8:	ab03      	add	r3, sp, #12
 8019dda:	9300      	str	r3, [sp, #0]
 8019ddc:	462a      	mov	r2, r5
 8019dde:	4b09      	ldr	r3, [pc, #36]	; (8019e04 <_vfiprintf_r+0x258>)
 8019de0:	a904      	add	r1, sp, #16
 8019de2:	4630      	mov	r0, r6
 8019de4:	f7fc fbb2 	bl	801654c <_printf_i>
 8019de8:	e7e4      	b.n	8019db4 <_vfiprintf_r+0x208>
 8019dea:	bf00      	nop
 8019dec:	0801c714 	.word	0x0801c714
 8019df0:	0801c734 	.word	0x0801c734
 8019df4:	0801c6f4 	.word	0x0801c6f4
 8019df8:	0801c6a4 	.word	0x0801c6a4
 8019dfc:	0801c6ae 	.word	0x0801c6ae
 8019e00:	08016005 	.word	0x08016005
 8019e04:	08019b89 	.word	0x08019b89
 8019e08:	0801c6aa 	.word	0x0801c6aa

08019e0c <__swbuf_r>:
 8019e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019e0e:	460e      	mov	r6, r1
 8019e10:	4614      	mov	r4, r2
 8019e12:	4605      	mov	r5, r0
 8019e14:	b118      	cbz	r0, 8019e1e <__swbuf_r+0x12>
 8019e16:	6983      	ldr	r3, [r0, #24]
 8019e18:	b90b      	cbnz	r3, 8019e1e <__swbuf_r+0x12>
 8019e1a:	f000 f9d9 	bl	801a1d0 <__sinit>
 8019e1e:	4b21      	ldr	r3, [pc, #132]	; (8019ea4 <__swbuf_r+0x98>)
 8019e20:	429c      	cmp	r4, r3
 8019e22:	d12b      	bne.n	8019e7c <__swbuf_r+0x70>
 8019e24:	686c      	ldr	r4, [r5, #4]
 8019e26:	69a3      	ldr	r3, [r4, #24]
 8019e28:	60a3      	str	r3, [r4, #8]
 8019e2a:	89a3      	ldrh	r3, [r4, #12]
 8019e2c:	071a      	lsls	r2, r3, #28
 8019e2e:	d52f      	bpl.n	8019e90 <__swbuf_r+0x84>
 8019e30:	6923      	ldr	r3, [r4, #16]
 8019e32:	b36b      	cbz	r3, 8019e90 <__swbuf_r+0x84>
 8019e34:	6923      	ldr	r3, [r4, #16]
 8019e36:	6820      	ldr	r0, [r4, #0]
 8019e38:	1ac0      	subs	r0, r0, r3
 8019e3a:	6963      	ldr	r3, [r4, #20]
 8019e3c:	b2f6      	uxtb	r6, r6
 8019e3e:	4283      	cmp	r3, r0
 8019e40:	4637      	mov	r7, r6
 8019e42:	dc04      	bgt.n	8019e4e <__swbuf_r+0x42>
 8019e44:	4621      	mov	r1, r4
 8019e46:	4628      	mov	r0, r5
 8019e48:	f000 f92e 	bl	801a0a8 <_fflush_r>
 8019e4c:	bb30      	cbnz	r0, 8019e9c <__swbuf_r+0x90>
 8019e4e:	68a3      	ldr	r3, [r4, #8]
 8019e50:	3b01      	subs	r3, #1
 8019e52:	60a3      	str	r3, [r4, #8]
 8019e54:	6823      	ldr	r3, [r4, #0]
 8019e56:	1c5a      	adds	r2, r3, #1
 8019e58:	6022      	str	r2, [r4, #0]
 8019e5a:	701e      	strb	r6, [r3, #0]
 8019e5c:	6963      	ldr	r3, [r4, #20]
 8019e5e:	3001      	adds	r0, #1
 8019e60:	4283      	cmp	r3, r0
 8019e62:	d004      	beq.n	8019e6e <__swbuf_r+0x62>
 8019e64:	89a3      	ldrh	r3, [r4, #12]
 8019e66:	07db      	lsls	r3, r3, #31
 8019e68:	d506      	bpl.n	8019e78 <__swbuf_r+0x6c>
 8019e6a:	2e0a      	cmp	r6, #10
 8019e6c:	d104      	bne.n	8019e78 <__swbuf_r+0x6c>
 8019e6e:	4621      	mov	r1, r4
 8019e70:	4628      	mov	r0, r5
 8019e72:	f000 f919 	bl	801a0a8 <_fflush_r>
 8019e76:	b988      	cbnz	r0, 8019e9c <__swbuf_r+0x90>
 8019e78:	4638      	mov	r0, r7
 8019e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019e7c:	4b0a      	ldr	r3, [pc, #40]	; (8019ea8 <__swbuf_r+0x9c>)
 8019e7e:	429c      	cmp	r4, r3
 8019e80:	d101      	bne.n	8019e86 <__swbuf_r+0x7a>
 8019e82:	68ac      	ldr	r4, [r5, #8]
 8019e84:	e7cf      	b.n	8019e26 <__swbuf_r+0x1a>
 8019e86:	4b09      	ldr	r3, [pc, #36]	; (8019eac <__swbuf_r+0xa0>)
 8019e88:	429c      	cmp	r4, r3
 8019e8a:	bf08      	it	eq
 8019e8c:	68ec      	ldreq	r4, [r5, #12]
 8019e8e:	e7ca      	b.n	8019e26 <__swbuf_r+0x1a>
 8019e90:	4621      	mov	r1, r4
 8019e92:	4628      	mov	r0, r5
 8019e94:	f000 f80c 	bl	8019eb0 <__swsetup_r>
 8019e98:	2800      	cmp	r0, #0
 8019e9a:	d0cb      	beq.n	8019e34 <__swbuf_r+0x28>
 8019e9c:	f04f 37ff 	mov.w	r7, #4294967295
 8019ea0:	e7ea      	b.n	8019e78 <__swbuf_r+0x6c>
 8019ea2:	bf00      	nop
 8019ea4:	0801c714 	.word	0x0801c714
 8019ea8:	0801c734 	.word	0x0801c734
 8019eac:	0801c6f4 	.word	0x0801c6f4

08019eb0 <__swsetup_r>:
 8019eb0:	4b32      	ldr	r3, [pc, #200]	; (8019f7c <__swsetup_r+0xcc>)
 8019eb2:	b570      	push	{r4, r5, r6, lr}
 8019eb4:	681d      	ldr	r5, [r3, #0]
 8019eb6:	4606      	mov	r6, r0
 8019eb8:	460c      	mov	r4, r1
 8019eba:	b125      	cbz	r5, 8019ec6 <__swsetup_r+0x16>
 8019ebc:	69ab      	ldr	r3, [r5, #24]
 8019ebe:	b913      	cbnz	r3, 8019ec6 <__swsetup_r+0x16>
 8019ec0:	4628      	mov	r0, r5
 8019ec2:	f000 f985 	bl	801a1d0 <__sinit>
 8019ec6:	4b2e      	ldr	r3, [pc, #184]	; (8019f80 <__swsetup_r+0xd0>)
 8019ec8:	429c      	cmp	r4, r3
 8019eca:	d10f      	bne.n	8019eec <__swsetup_r+0x3c>
 8019ecc:	686c      	ldr	r4, [r5, #4]
 8019ece:	89a3      	ldrh	r3, [r4, #12]
 8019ed0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019ed4:	0719      	lsls	r1, r3, #28
 8019ed6:	d42c      	bmi.n	8019f32 <__swsetup_r+0x82>
 8019ed8:	06dd      	lsls	r5, r3, #27
 8019eda:	d411      	bmi.n	8019f00 <__swsetup_r+0x50>
 8019edc:	2309      	movs	r3, #9
 8019ede:	6033      	str	r3, [r6, #0]
 8019ee0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019ee4:	81a3      	strh	r3, [r4, #12]
 8019ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8019eea:	e03e      	b.n	8019f6a <__swsetup_r+0xba>
 8019eec:	4b25      	ldr	r3, [pc, #148]	; (8019f84 <__swsetup_r+0xd4>)
 8019eee:	429c      	cmp	r4, r3
 8019ef0:	d101      	bne.n	8019ef6 <__swsetup_r+0x46>
 8019ef2:	68ac      	ldr	r4, [r5, #8]
 8019ef4:	e7eb      	b.n	8019ece <__swsetup_r+0x1e>
 8019ef6:	4b24      	ldr	r3, [pc, #144]	; (8019f88 <__swsetup_r+0xd8>)
 8019ef8:	429c      	cmp	r4, r3
 8019efa:	bf08      	it	eq
 8019efc:	68ec      	ldreq	r4, [r5, #12]
 8019efe:	e7e6      	b.n	8019ece <__swsetup_r+0x1e>
 8019f00:	0758      	lsls	r0, r3, #29
 8019f02:	d512      	bpl.n	8019f2a <__swsetup_r+0x7a>
 8019f04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019f06:	b141      	cbz	r1, 8019f1a <__swsetup_r+0x6a>
 8019f08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019f0c:	4299      	cmp	r1, r3
 8019f0e:	d002      	beq.n	8019f16 <__swsetup_r+0x66>
 8019f10:	4630      	mov	r0, r6
 8019f12:	f7fb ff2d 	bl	8015d70 <_free_r>
 8019f16:	2300      	movs	r3, #0
 8019f18:	6363      	str	r3, [r4, #52]	; 0x34
 8019f1a:	89a3      	ldrh	r3, [r4, #12]
 8019f1c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019f20:	81a3      	strh	r3, [r4, #12]
 8019f22:	2300      	movs	r3, #0
 8019f24:	6063      	str	r3, [r4, #4]
 8019f26:	6923      	ldr	r3, [r4, #16]
 8019f28:	6023      	str	r3, [r4, #0]
 8019f2a:	89a3      	ldrh	r3, [r4, #12]
 8019f2c:	f043 0308 	orr.w	r3, r3, #8
 8019f30:	81a3      	strh	r3, [r4, #12]
 8019f32:	6923      	ldr	r3, [r4, #16]
 8019f34:	b94b      	cbnz	r3, 8019f4a <__swsetup_r+0x9a>
 8019f36:	89a3      	ldrh	r3, [r4, #12]
 8019f38:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019f3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019f40:	d003      	beq.n	8019f4a <__swsetup_r+0x9a>
 8019f42:	4621      	mov	r1, r4
 8019f44:	4630      	mov	r0, r6
 8019f46:	f000 fa05 	bl	801a354 <__smakebuf_r>
 8019f4a:	89a0      	ldrh	r0, [r4, #12]
 8019f4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019f50:	f010 0301 	ands.w	r3, r0, #1
 8019f54:	d00a      	beq.n	8019f6c <__swsetup_r+0xbc>
 8019f56:	2300      	movs	r3, #0
 8019f58:	60a3      	str	r3, [r4, #8]
 8019f5a:	6963      	ldr	r3, [r4, #20]
 8019f5c:	425b      	negs	r3, r3
 8019f5e:	61a3      	str	r3, [r4, #24]
 8019f60:	6923      	ldr	r3, [r4, #16]
 8019f62:	b943      	cbnz	r3, 8019f76 <__swsetup_r+0xc6>
 8019f64:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019f68:	d1ba      	bne.n	8019ee0 <__swsetup_r+0x30>
 8019f6a:	bd70      	pop	{r4, r5, r6, pc}
 8019f6c:	0781      	lsls	r1, r0, #30
 8019f6e:	bf58      	it	pl
 8019f70:	6963      	ldrpl	r3, [r4, #20]
 8019f72:	60a3      	str	r3, [r4, #8]
 8019f74:	e7f4      	b.n	8019f60 <__swsetup_r+0xb0>
 8019f76:	2000      	movs	r0, #0
 8019f78:	e7f7      	b.n	8019f6a <__swsetup_r+0xba>
 8019f7a:	bf00      	nop
 8019f7c:	200009ac 	.word	0x200009ac
 8019f80:	0801c714 	.word	0x0801c714
 8019f84:	0801c734 	.word	0x0801c734
 8019f88:	0801c6f4 	.word	0x0801c6f4

08019f8c <abort>:
 8019f8c:	b508      	push	{r3, lr}
 8019f8e:	2006      	movs	r0, #6
 8019f90:	f000 fa50 	bl	801a434 <raise>
 8019f94:	2001      	movs	r0, #1
 8019f96:	f7f0 ffc7 	bl	800af28 <_exit>
	...

08019f9c <__sflush_r>:
 8019f9c:	898a      	ldrh	r2, [r1, #12]
 8019f9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019fa2:	4605      	mov	r5, r0
 8019fa4:	0710      	lsls	r0, r2, #28
 8019fa6:	460c      	mov	r4, r1
 8019fa8:	d458      	bmi.n	801a05c <__sflush_r+0xc0>
 8019faa:	684b      	ldr	r3, [r1, #4]
 8019fac:	2b00      	cmp	r3, #0
 8019fae:	dc05      	bgt.n	8019fbc <__sflush_r+0x20>
 8019fb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019fb2:	2b00      	cmp	r3, #0
 8019fb4:	dc02      	bgt.n	8019fbc <__sflush_r+0x20>
 8019fb6:	2000      	movs	r0, #0
 8019fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019fbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019fbe:	2e00      	cmp	r6, #0
 8019fc0:	d0f9      	beq.n	8019fb6 <__sflush_r+0x1a>
 8019fc2:	2300      	movs	r3, #0
 8019fc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019fc8:	682f      	ldr	r7, [r5, #0]
 8019fca:	602b      	str	r3, [r5, #0]
 8019fcc:	d032      	beq.n	801a034 <__sflush_r+0x98>
 8019fce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019fd0:	89a3      	ldrh	r3, [r4, #12]
 8019fd2:	075a      	lsls	r2, r3, #29
 8019fd4:	d505      	bpl.n	8019fe2 <__sflush_r+0x46>
 8019fd6:	6863      	ldr	r3, [r4, #4]
 8019fd8:	1ac0      	subs	r0, r0, r3
 8019fda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019fdc:	b10b      	cbz	r3, 8019fe2 <__sflush_r+0x46>
 8019fde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019fe0:	1ac0      	subs	r0, r0, r3
 8019fe2:	2300      	movs	r3, #0
 8019fe4:	4602      	mov	r2, r0
 8019fe6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019fe8:	6a21      	ldr	r1, [r4, #32]
 8019fea:	4628      	mov	r0, r5
 8019fec:	47b0      	blx	r6
 8019fee:	1c43      	adds	r3, r0, #1
 8019ff0:	89a3      	ldrh	r3, [r4, #12]
 8019ff2:	d106      	bne.n	801a002 <__sflush_r+0x66>
 8019ff4:	6829      	ldr	r1, [r5, #0]
 8019ff6:	291d      	cmp	r1, #29
 8019ff8:	d82c      	bhi.n	801a054 <__sflush_r+0xb8>
 8019ffa:	4a2a      	ldr	r2, [pc, #168]	; (801a0a4 <__sflush_r+0x108>)
 8019ffc:	40ca      	lsrs	r2, r1
 8019ffe:	07d6      	lsls	r6, r2, #31
 801a000:	d528      	bpl.n	801a054 <__sflush_r+0xb8>
 801a002:	2200      	movs	r2, #0
 801a004:	6062      	str	r2, [r4, #4]
 801a006:	04d9      	lsls	r1, r3, #19
 801a008:	6922      	ldr	r2, [r4, #16]
 801a00a:	6022      	str	r2, [r4, #0]
 801a00c:	d504      	bpl.n	801a018 <__sflush_r+0x7c>
 801a00e:	1c42      	adds	r2, r0, #1
 801a010:	d101      	bne.n	801a016 <__sflush_r+0x7a>
 801a012:	682b      	ldr	r3, [r5, #0]
 801a014:	b903      	cbnz	r3, 801a018 <__sflush_r+0x7c>
 801a016:	6560      	str	r0, [r4, #84]	; 0x54
 801a018:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a01a:	602f      	str	r7, [r5, #0]
 801a01c:	2900      	cmp	r1, #0
 801a01e:	d0ca      	beq.n	8019fb6 <__sflush_r+0x1a>
 801a020:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a024:	4299      	cmp	r1, r3
 801a026:	d002      	beq.n	801a02e <__sflush_r+0x92>
 801a028:	4628      	mov	r0, r5
 801a02a:	f7fb fea1 	bl	8015d70 <_free_r>
 801a02e:	2000      	movs	r0, #0
 801a030:	6360      	str	r0, [r4, #52]	; 0x34
 801a032:	e7c1      	b.n	8019fb8 <__sflush_r+0x1c>
 801a034:	6a21      	ldr	r1, [r4, #32]
 801a036:	2301      	movs	r3, #1
 801a038:	4628      	mov	r0, r5
 801a03a:	47b0      	blx	r6
 801a03c:	1c41      	adds	r1, r0, #1
 801a03e:	d1c7      	bne.n	8019fd0 <__sflush_r+0x34>
 801a040:	682b      	ldr	r3, [r5, #0]
 801a042:	2b00      	cmp	r3, #0
 801a044:	d0c4      	beq.n	8019fd0 <__sflush_r+0x34>
 801a046:	2b1d      	cmp	r3, #29
 801a048:	d001      	beq.n	801a04e <__sflush_r+0xb2>
 801a04a:	2b16      	cmp	r3, #22
 801a04c:	d101      	bne.n	801a052 <__sflush_r+0xb6>
 801a04e:	602f      	str	r7, [r5, #0]
 801a050:	e7b1      	b.n	8019fb6 <__sflush_r+0x1a>
 801a052:	89a3      	ldrh	r3, [r4, #12]
 801a054:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a058:	81a3      	strh	r3, [r4, #12]
 801a05a:	e7ad      	b.n	8019fb8 <__sflush_r+0x1c>
 801a05c:	690f      	ldr	r7, [r1, #16]
 801a05e:	2f00      	cmp	r7, #0
 801a060:	d0a9      	beq.n	8019fb6 <__sflush_r+0x1a>
 801a062:	0793      	lsls	r3, r2, #30
 801a064:	680e      	ldr	r6, [r1, #0]
 801a066:	bf08      	it	eq
 801a068:	694b      	ldreq	r3, [r1, #20]
 801a06a:	600f      	str	r7, [r1, #0]
 801a06c:	bf18      	it	ne
 801a06e:	2300      	movne	r3, #0
 801a070:	eba6 0807 	sub.w	r8, r6, r7
 801a074:	608b      	str	r3, [r1, #8]
 801a076:	f1b8 0f00 	cmp.w	r8, #0
 801a07a:	dd9c      	ble.n	8019fb6 <__sflush_r+0x1a>
 801a07c:	6a21      	ldr	r1, [r4, #32]
 801a07e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a080:	4643      	mov	r3, r8
 801a082:	463a      	mov	r2, r7
 801a084:	4628      	mov	r0, r5
 801a086:	47b0      	blx	r6
 801a088:	2800      	cmp	r0, #0
 801a08a:	dc06      	bgt.n	801a09a <__sflush_r+0xfe>
 801a08c:	89a3      	ldrh	r3, [r4, #12]
 801a08e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a092:	81a3      	strh	r3, [r4, #12]
 801a094:	f04f 30ff 	mov.w	r0, #4294967295
 801a098:	e78e      	b.n	8019fb8 <__sflush_r+0x1c>
 801a09a:	4407      	add	r7, r0
 801a09c:	eba8 0800 	sub.w	r8, r8, r0
 801a0a0:	e7e9      	b.n	801a076 <__sflush_r+0xda>
 801a0a2:	bf00      	nop
 801a0a4:	20400001 	.word	0x20400001

0801a0a8 <_fflush_r>:
 801a0a8:	b538      	push	{r3, r4, r5, lr}
 801a0aa:	690b      	ldr	r3, [r1, #16]
 801a0ac:	4605      	mov	r5, r0
 801a0ae:	460c      	mov	r4, r1
 801a0b0:	b913      	cbnz	r3, 801a0b8 <_fflush_r+0x10>
 801a0b2:	2500      	movs	r5, #0
 801a0b4:	4628      	mov	r0, r5
 801a0b6:	bd38      	pop	{r3, r4, r5, pc}
 801a0b8:	b118      	cbz	r0, 801a0c2 <_fflush_r+0x1a>
 801a0ba:	6983      	ldr	r3, [r0, #24]
 801a0bc:	b90b      	cbnz	r3, 801a0c2 <_fflush_r+0x1a>
 801a0be:	f000 f887 	bl	801a1d0 <__sinit>
 801a0c2:	4b14      	ldr	r3, [pc, #80]	; (801a114 <_fflush_r+0x6c>)
 801a0c4:	429c      	cmp	r4, r3
 801a0c6:	d11b      	bne.n	801a100 <_fflush_r+0x58>
 801a0c8:	686c      	ldr	r4, [r5, #4]
 801a0ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a0ce:	2b00      	cmp	r3, #0
 801a0d0:	d0ef      	beq.n	801a0b2 <_fflush_r+0xa>
 801a0d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a0d4:	07d0      	lsls	r0, r2, #31
 801a0d6:	d404      	bmi.n	801a0e2 <_fflush_r+0x3a>
 801a0d8:	0599      	lsls	r1, r3, #22
 801a0da:	d402      	bmi.n	801a0e2 <_fflush_r+0x3a>
 801a0dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a0de:	f7ff fd14 	bl	8019b0a <__retarget_lock_acquire_recursive>
 801a0e2:	4628      	mov	r0, r5
 801a0e4:	4621      	mov	r1, r4
 801a0e6:	f7ff ff59 	bl	8019f9c <__sflush_r>
 801a0ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a0ec:	07da      	lsls	r2, r3, #31
 801a0ee:	4605      	mov	r5, r0
 801a0f0:	d4e0      	bmi.n	801a0b4 <_fflush_r+0xc>
 801a0f2:	89a3      	ldrh	r3, [r4, #12]
 801a0f4:	059b      	lsls	r3, r3, #22
 801a0f6:	d4dd      	bmi.n	801a0b4 <_fflush_r+0xc>
 801a0f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a0fa:	f7ff fd07 	bl	8019b0c <__retarget_lock_release_recursive>
 801a0fe:	e7d9      	b.n	801a0b4 <_fflush_r+0xc>
 801a100:	4b05      	ldr	r3, [pc, #20]	; (801a118 <_fflush_r+0x70>)
 801a102:	429c      	cmp	r4, r3
 801a104:	d101      	bne.n	801a10a <_fflush_r+0x62>
 801a106:	68ac      	ldr	r4, [r5, #8]
 801a108:	e7df      	b.n	801a0ca <_fflush_r+0x22>
 801a10a:	4b04      	ldr	r3, [pc, #16]	; (801a11c <_fflush_r+0x74>)
 801a10c:	429c      	cmp	r4, r3
 801a10e:	bf08      	it	eq
 801a110:	68ec      	ldreq	r4, [r5, #12]
 801a112:	e7da      	b.n	801a0ca <_fflush_r+0x22>
 801a114:	0801c714 	.word	0x0801c714
 801a118:	0801c734 	.word	0x0801c734
 801a11c:	0801c6f4 	.word	0x0801c6f4

0801a120 <std>:
 801a120:	2300      	movs	r3, #0
 801a122:	b510      	push	{r4, lr}
 801a124:	4604      	mov	r4, r0
 801a126:	e9c0 3300 	strd	r3, r3, [r0]
 801a12a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a12e:	6083      	str	r3, [r0, #8]
 801a130:	8181      	strh	r1, [r0, #12]
 801a132:	6643      	str	r3, [r0, #100]	; 0x64
 801a134:	81c2      	strh	r2, [r0, #14]
 801a136:	6183      	str	r3, [r0, #24]
 801a138:	4619      	mov	r1, r3
 801a13a:	2208      	movs	r2, #8
 801a13c:	305c      	adds	r0, #92	; 0x5c
 801a13e:	f7fb fe0f 	bl	8015d60 <memset>
 801a142:	4b05      	ldr	r3, [pc, #20]	; (801a158 <std+0x38>)
 801a144:	6263      	str	r3, [r4, #36]	; 0x24
 801a146:	4b05      	ldr	r3, [pc, #20]	; (801a15c <std+0x3c>)
 801a148:	62a3      	str	r3, [r4, #40]	; 0x28
 801a14a:	4b05      	ldr	r3, [pc, #20]	; (801a160 <std+0x40>)
 801a14c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a14e:	4b05      	ldr	r3, [pc, #20]	; (801a164 <std+0x44>)
 801a150:	6224      	str	r4, [r4, #32]
 801a152:	6323      	str	r3, [r4, #48]	; 0x30
 801a154:	bd10      	pop	{r4, pc}
 801a156:	bf00      	nop
 801a158:	0801a46d 	.word	0x0801a46d
 801a15c:	0801a48f 	.word	0x0801a48f
 801a160:	0801a4c7 	.word	0x0801a4c7
 801a164:	0801a4eb 	.word	0x0801a4eb

0801a168 <_cleanup_r>:
 801a168:	4901      	ldr	r1, [pc, #4]	; (801a170 <_cleanup_r+0x8>)
 801a16a:	f000 b8af 	b.w	801a2cc <_fwalk_reent>
 801a16e:	bf00      	nop
 801a170:	0801a0a9 	.word	0x0801a0a9

0801a174 <__sfmoreglue>:
 801a174:	b570      	push	{r4, r5, r6, lr}
 801a176:	1e4a      	subs	r2, r1, #1
 801a178:	2568      	movs	r5, #104	; 0x68
 801a17a:	4355      	muls	r5, r2
 801a17c:	460e      	mov	r6, r1
 801a17e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a182:	f7fb fe45 	bl	8015e10 <_malloc_r>
 801a186:	4604      	mov	r4, r0
 801a188:	b140      	cbz	r0, 801a19c <__sfmoreglue+0x28>
 801a18a:	2100      	movs	r1, #0
 801a18c:	e9c0 1600 	strd	r1, r6, [r0]
 801a190:	300c      	adds	r0, #12
 801a192:	60a0      	str	r0, [r4, #8]
 801a194:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a198:	f7fb fde2 	bl	8015d60 <memset>
 801a19c:	4620      	mov	r0, r4
 801a19e:	bd70      	pop	{r4, r5, r6, pc}

0801a1a0 <__sfp_lock_acquire>:
 801a1a0:	4801      	ldr	r0, [pc, #4]	; (801a1a8 <__sfp_lock_acquire+0x8>)
 801a1a2:	f7ff bcb2 	b.w	8019b0a <__retarget_lock_acquire_recursive>
 801a1a6:	bf00      	nop
 801a1a8:	20006b80 	.word	0x20006b80

0801a1ac <__sfp_lock_release>:
 801a1ac:	4801      	ldr	r0, [pc, #4]	; (801a1b4 <__sfp_lock_release+0x8>)
 801a1ae:	f7ff bcad 	b.w	8019b0c <__retarget_lock_release_recursive>
 801a1b2:	bf00      	nop
 801a1b4:	20006b80 	.word	0x20006b80

0801a1b8 <__sinit_lock_acquire>:
 801a1b8:	4801      	ldr	r0, [pc, #4]	; (801a1c0 <__sinit_lock_acquire+0x8>)
 801a1ba:	f7ff bca6 	b.w	8019b0a <__retarget_lock_acquire_recursive>
 801a1be:	bf00      	nop
 801a1c0:	20006b7b 	.word	0x20006b7b

0801a1c4 <__sinit_lock_release>:
 801a1c4:	4801      	ldr	r0, [pc, #4]	; (801a1cc <__sinit_lock_release+0x8>)
 801a1c6:	f7ff bca1 	b.w	8019b0c <__retarget_lock_release_recursive>
 801a1ca:	bf00      	nop
 801a1cc:	20006b7b 	.word	0x20006b7b

0801a1d0 <__sinit>:
 801a1d0:	b510      	push	{r4, lr}
 801a1d2:	4604      	mov	r4, r0
 801a1d4:	f7ff fff0 	bl	801a1b8 <__sinit_lock_acquire>
 801a1d8:	69a3      	ldr	r3, [r4, #24]
 801a1da:	b11b      	cbz	r3, 801a1e4 <__sinit+0x14>
 801a1dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a1e0:	f7ff bff0 	b.w	801a1c4 <__sinit_lock_release>
 801a1e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801a1e8:	6523      	str	r3, [r4, #80]	; 0x50
 801a1ea:	4b13      	ldr	r3, [pc, #76]	; (801a238 <__sinit+0x68>)
 801a1ec:	4a13      	ldr	r2, [pc, #76]	; (801a23c <__sinit+0x6c>)
 801a1ee:	681b      	ldr	r3, [r3, #0]
 801a1f0:	62a2      	str	r2, [r4, #40]	; 0x28
 801a1f2:	42a3      	cmp	r3, r4
 801a1f4:	bf04      	itt	eq
 801a1f6:	2301      	moveq	r3, #1
 801a1f8:	61a3      	streq	r3, [r4, #24]
 801a1fa:	4620      	mov	r0, r4
 801a1fc:	f000 f820 	bl	801a240 <__sfp>
 801a200:	6060      	str	r0, [r4, #4]
 801a202:	4620      	mov	r0, r4
 801a204:	f000 f81c 	bl	801a240 <__sfp>
 801a208:	60a0      	str	r0, [r4, #8]
 801a20a:	4620      	mov	r0, r4
 801a20c:	f000 f818 	bl	801a240 <__sfp>
 801a210:	2200      	movs	r2, #0
 801a212:	60e0      	str	r0, [r4, #12]
 801a214:	2104      	movs	r1, #4
 801a216:	6860      	ldr	r0, [r4, #4]
 801a218:	f7ff ff82 	bl	801a120 <std>
 801a21c:	68a0      	ldr	r0, [r4, #8]
 801a21e:	2201      	movs	r2, #1
 801a220:	2109      	movs	r1, #9
 801a222:	f7ff ff7d 	bl	801a120 <std>
 801a226:	68e0      	ldr	r0, [r4, #12]
 801a228:	2202      	movs	r2, #2
 801a22a:	2112      	movs	r1, #18
 801a22c:	f7ff ff78 	bl	801a120 <std>
 801a230:	2301      	movs	r3, #1
 801a232:	61a3      	str	r3, [r4, #24]
 801a234:	e7d2      	b.n	801a1dc <__sinit+0xc>
 801a236:	bf00      	nop
 801a238:	0801c2a0 	.word	0x0801c2a0
 801a23c:	0801a169 	.word	0x0801a169

0801a240 <__sfp>:
 801a240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a242:	4607      	mov	r7, r0
 801a244:	f7ff ffac 	bl	801a1a0 <__sfp_lock_acquire>
 801a248:	4b1e      	ldr	r3, [pc, #120]	; (801a2c4 <__sfp+0x84>)
 801a24a:	681e      	ldr	r6, [r3, #0]
 801a24c:	69b3      	ldr	r3, [r6, #24]
 801a24e:	b913      	cbnz	r3, 801a256 <__sfp+0x16>
 801a250:	4630      	mov	r0, r6
 801a252:	f7ff ffbd 	bl	801a1d0 <__sinit>
 801a256:	3648      	adds	r6, #72	; 0x48
 801a258:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a25c:	3b01      	subs	r3, #1
 801a25e:	d503      	bpl.n	801a268 <__sfp+0x28>
 801a260:	6833      	ldr	r3, [r6, #0]
 801a262:	b30b      	cbz	r3, 801a2a8 <__sfp+0x68>
 801a264:	6836      	ldr	r6, [r6, #0]
 801a266:	e7f7      	b.n	801a258 <__sfp+0x18>
 801a268:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a26c:	b9d5      	cbnz	r5, 801a2a4 <__sfp+0x64>
 801a26e:	4b16      	ldr	r3, [pc, #88]	; (801a2c8 <__sfp+0x88>)
 801a270:	60e3      	str	r3, [r4, #12]
 801a272:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a276:	6665      	str	r5, [r4, #100]	; 0x64
 801a278:	f7ff fc46 	bl	8019b08 <__retarget_lock_init_recursive>
 801a27c:	f7ff ff96 	bl	801a1ac <__sfp_lock_release>
 801a280:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801a284:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801a288:	6025      	str	r5, [r4, #0]
 801a28a:	61a5      	str	r5, [r4, #24]
 801a28c:	2208      	movs	r2, #8
 801a28e:	4629      	mov	r1, r5
 801a290:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a294:	f7fb fd64 	bl	8015d60 <memset>
 801a298:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a29c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a2a0:	4620      	mov	r0, r4
 801a2a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a2a4:	3468      	adds	r4, #104	; 0x68
 801a2a6:	e7d9      	b.n	801a25c <__sfp+0x1c>
 801a2a8:	2104      	movs	r1, #4
 801a2aa:	4638      	mov	r0, r7
 801a2ac:	f7ff ff62 	bl	801a174 <__sfmoreglue>
 801a2b0:	4604      	mov	r4, r0
 801a2b2:	6030      	str	r0, [r6, #0]
 801a2b4:	2800      	cmp	r0, #0
 801a2b6:	d1d5      	bne.n	801a264 <__sfp+0x24>
 801a2b8:	f7ff ff78 	bl	801a1ac <__sfp_lock_release>
 801a2bc:	230c      	movs	r3, #12
 801a2be:	603b      	str	r3, [r7, #0]
 801a2c0:	e7ee      	b.n	801a2a0 <__sfp+0x60>
 801a2c2:	bf00      	nop
 801a2c4:	0801c2a0 	.word	0x0801c2a0
 801a2c8:	ffff0001 	.word	0xffff0001

0801a2cc <_fwalk_reent>:
 801a2cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a2d0:	4606      	mov	r6, r0
 801a2d2:	4688      	mov	r8, r1
 801a2d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801a2d8:	2700      	movs	r7, #0
 801a2da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a2de:	f1b9 0901 	subs.w	r9, r9, #1
 801a2e2:	d505      	bpl.n	801a2f0 <_fwalk_reent+0x24>
 801a2e4:	6824      	ldr	r4, [r4, #0]
 801a2e6:	2c00      	cmp	r4, #0
 801a2e8:	d1f7      	bne.n	801a2da <_fwalk_reent+0xe>
 801a2ea:	4638      	mov	r0, r7
 801a2ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a2f0:	89ab      	ldrh	r3, [r5, #12]
 801a2f2:	2b01      	cmp	r3, #1
 801a2f4:	d907      	bls.n	801a306 <_fwalk_reent+0x3a>
 801a2f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a2fa:	3301      	adds	r3, #1
 801a2fc:	d003      	beq.n	801a306 <_fwalk_reent+0x3a>
 801a2fe:	4629      	mov	r1, r5
 801a300:	4630      	mov	r0, r6
 801a302:	47c0      	blx	r8
 801a304:	4307      	orrs	r7, r0
 801a306:	3568      	adds	r5, #104	; 0x68
 801a308:	e7e9      	b.n	801a2de <_fwalk_reent+0x12>

0801a30a <__swhatbuf_r>:
 801a30a:	b570      	push	{r4, r5, r6, lr}
 801a30c:	460e      	mov	r6, r1
 801a30e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a312:	2900      	cmp	r1, #0
 801a314:	b096      	sub	sp, #88	; 0x58
 801a316:	4614      	mov	r4, r2
 801a318:	461d      	mov	r5, r3
 801a31a:	da07      	bge.n	801a32c <__swhatbuf_r+0x22>
 801a31c:	2300      	movs	r3, #0
 801a31e:	602b      	str	r3, [r5, #0]
 801a320:	89b3      	ldrh	r3, [r6, #12]
 801a322:	061a      	lsls	r2, r3, #24
 801a324:	d410      	bmi.n	801a348 <__swhatbuf_r+0x3e>
 801a326:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a32a:	e00e      	b.n	801a34a <__swhatbuf_r+0x40>
 801a32c:	466a      	mov	r2, sp
 801a32e:	f000 f903 	bl	801a538 <_fstat_r>
 801a332:	2800      	cmp	r0, #0
 801a334:	dbf2      	blt.n	801a31c <__swhatbuf_r+0x12>
 801a336:	9a01      	ldr	r2, [sp, #4]
 801a338:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a33c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a340:	425a      	negs	r2, r3
 801a342:	415a      	adcs	r2, r3
 801a344:	602a      	str	r2, [r5, #0]
 801a346:	e7ee      	b.n	801a326 <__swhatbuf_r+0x1c>
 801a348:	2340      	movs	r3, #64	; 0x40
 801a34a:	2000      	movs	r0, #0
 801a34c:	6023      	str	r3, [r4, #0]
 801a34e:	b016      	add	sp, #88	; 0x58
 801a350:	bd70      	pop	{r4, r5, r6, pc}
	...

0801a354 <__smakebuf_r>:
 801a354:	898b      	ldrh	r3, [r1, #12]
 801a356:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a358:	079d      	lsls	r5, r3, #30
 801a35a:	4606      	mov	r6, r0
 801a35c:	460c      	mov	r4, r1
 801a35e:	d507      	bpl.n	801a370 <__smakebuf_r+0x1c>
 801a360:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a364:	6023      	str	r3, [r4, #0]
 801a366:	6123      	str	r3, [r4, #16]
 801a368:	2301      	movs	r3, #1
 801a36a:	6163      	str	r3, [r4, #20]
 801a36c:	b002      	add	sp, #8
 801a36e:	bd70      	pop	{r4, r5, r6, pc}
 801a370:	ab01      	add	r3, sp, #4
 801a372:	466a      	mov	r2, sp
 801a374:	f7ff ffc9 	bl	801a30a <__swhatbuf_r>
 801a378:	9900      	ldr	r1, [sp, #0]
 801a37a:	4605      	mov	r5, r0
 801a37c:	4630      	mov	r0, r6
 801a37e:	f7fb fd47 	bl	8015e10 <_malloc_r>
 801a382:	b948      	cbnz	r0, 801a398 <__smakebuf_r+0x44>
 801a384:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a388:	059a      	lsls	r2, r3, #22
 801a38a:	d4ef      	bmi.n	801a36c <__smakebuf_r+0x18>
 801a38c:	f023 0303 	bic.w	r3, r3, #3
 801a390:	f043 0302 	orr.w	r3, r3, #2
 801a394:	81a3      	strh	r3, [r4, #12]
 801a396:	e7e3      	b.n	801a360 <__smakebuf_r+0xc>
 801a398:	4b0d      	ldr	r3, [pc, #52]	; (801a3d0 <__smakebuf_r+0x7c>)
 801a39a:	62b3      	str	r3, [r6, #40]	; 0x28
 801a39c:	89a3      	ldrh	r3, [r4, #12]
 801a39e:	6020      	str	r0, [r4, #0]
 801a3a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a3a4:	81a3      	strh	r3, [r4, #12]
 801a3a6:	9b00      	ldr	r3, [sp, #0]
 801a3a8:	6163      	str	r3, [r4, #20]
 801a3aa:	9b01      	ldr	r3, [sp, #4]
 801a3ac:	6120      	str	r0, [r4, #16]
 801a3ae:	b15b      	cbz	r3, 801a3c8 <__smakebuf_r+0x74>
 801a3b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a3b4:	4630      	mov	r0, r6
 801a3b6:	f000 f8d1 	bl	801a55c <_isatty_r>
 801a3ba:	b128      	cbz	r0, 801a3c8 <__smakebuf_r+0x74>
 801a3bc:	89a3      	ldrh	r3, [r4, #12]
 801a3be:	f023 0303 	bic.w	r3, r3, #3
 801a3c2:	f043 0301 	orr.w	r3, r3, #1
 801a3c6:	81a3      	strh	r3, [r4, #12]
 801a3c8:	89a0      	ldrh	r0, [r4, #12]
 801a3ca:	4305      	orrs	r5, r0
 801a3cc:	81a5      	strh	r5, [r4, #12]
 801a3ce:	e7cd      	b.n	801a36c <__smakebuf_r+0x18>
 801a3d0:	0801a169 	.word	0x0801a169

0801a3d4 <_malloc_usable_size_r>:
 801a3d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a3d8:	1f18      	subs	r0, r3, #4
 801a3da:	2b00      	cmp	r3, #0
 801a3dc:	bfbc      	itt	lt
 801a3de:	580b      	ldrlt	r3, [r1, r0]
 801a3e0:	18c0      	addlt	r0, r0, r3
 801a3e2:	4770      	bx	lr

0801a3e4 <_raise_r>:
 801a3e4:	291f      	cmp	r1, #31
 801a3e6:	b538      	push	{r3, r4, r5, lr}
 801a3e8:	4604      	mov	r4, r0
 801a3ea:	460d      	mov	r5, r1
 801a3ec:	d904      	bls.n	801a3f8 <_raise_r+0x14>
 801a3ee:	2316      	movs	r3, #22
 801a3f0:	6003      	str	r3, [r0, #0]
 801a3f2:	f04f 30ff 	mov.w	r0, #4294967295
 801a3f6:	bd38      	pop	{r3, r4, r5, pc}
 801a3f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801a3fa:	b112      	cbz	r2, 801a402 <_raise_r+0x1e>
 801a3fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a400:	b94b      	cbnz	r3, 801a416 <_raise_r+0x32>
 801a402:	4620      	mov	r0, r4
 801a404:	f000 f830 	bl	801a468 <_getpid_r>
 801a408:	462a      	mov	r2, r5
 801a40a:	4601      	mov	r1, r0
 801a40c:	4620      	mov	r0, r4
 801a40e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a412:	f000 b817 	b.w	801a444 <_kill_r>
 801a416:	2b01      	cmp	r3, #1
 801a418:	d00a      	beq.n	801a430 <_raise_r+0x4c>
 801a41a:	1c59      	adds	r1, r3, #1
 801a41c:	d103      	bne.n	801a426 <_raise_r+0x42>
 801a41e:	2316      	movs	r3, #22
 801a420:	6003      	str	r3, [r0, #0]
 801a422:	2001      	movs	r0, #1
 801a424:	e7e7      	b.n	801a3f6 <_raise_r+0x12>
 801a426:	2400      	movs	r4, #0
 801a428:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a42c:	4628      	mov	r0, r5
 801a42e:	4798      	blx	r3
 801a430:	2000      	movs	r0, #0
 801a432:	e7e0      	b.n	801a3f6 <_raise_r+0x12>

0801a434 <raise>:
 801a434:	4b02      	ldr	r3, [pc, #8]	; (801a440 <raise+0xc>)
 801a436:	4601      	mov	r1, r0
 801a438:	6818      	ldr	r0, [r3, #0]
 801a43a:	f7ff bfd3 	b.w	801a3e4 <_raise_r>
 801a43e:	bf00      	nop
 801a440:	200009ac 	.word	0x200009ac

0801a444 <_kill_r>:
 801a444:	b538      	push	{r3, r4, r5, lr}
 801a446:	4d07      	ldr	r5, [pc, #28]	; (801a464 <_kill_r+0x20>)
 801a448:	2300      	movs	r3, #0
 801a44a:	4604      	mov	r4, r0
 801a44c:	4608      	mov	r0, r1
 801a44e:	4611      	mov	r1, r2
 801a450:	602b      	str	r3, [r5, #0]
 801a452:	f7f0 fd59 	bl	800af08 <_kill>
 801a456:	1c43      	adds	r3, r0, #1
 801a458:	d102      	bne.n	801a460 <_kill_r+0x1c>
 801a45a:	682b      	ldr	r3, [r5, #0]
 801a45c:	b103      	cbz	r3, 801a460 <_kill_r+0x1c>
 801a45e:	6023      	str	r3, [r4, #0]
 801a460:	bd38      	pop	{r3, r4, r5, pc}
 801a462:	bf00      	nop
 801a464:	20006b74 	.word	0x20006b74

0801a468 <_getpid_r>:
 801a468:	f7f0 bd46 	b.w	800aef8 <_getpid>

0801a46c <__sread>:
 801a46c:	b510      	push	{r4, lr}
 801a46e:	460c      	mov	r4, r1
 801a470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a474:	f000 f894 	bl	801a5a0 <_read_r>
 801a478:	2800      	cmp	r0, #0
 801a47a:	bfab      	itete	ge
 801a47c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a47e:	89a3      	ldrhlt	r3, [r4, #12]
 801a480:	181b      	addge	r3, r3, r0
 801a482:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a486:	bfac      	ite	ge
 801a488:	6563      	strge	r3, [r4, #84]	; 0x54
 801a48a:	81a3      	strhlt	r3, [r4, #12]
 801a48c:	bd10      	pop	{r4, pc}

0801a48e <__swrite>:
 801a48e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a492:	461f      	mov	r7, r3
 801a494:	898b      	ldrh	r3, [r1, #12]
 801a496:	05db      	lsls	r3, r3, #23
 801a498:	4605      	mov	r5, r0
 801a49a:	460c      	mov	r4, r1
 801a49c:	4616      	mov	r6, r2
 801a49e:	d505      	bpl.n	801a4ac <__swrite+0x1e>
 801a4a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a4a4:	2302      	movs	r3, #2
 801a4a6:	2200      	movs	r2, #0
 801a4a8:	f000 f868 	bl	801a57c <_lseek_r>
 801a4ac:	89a3      	ldrh	r3, [r4, #12]
 801a4ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a4b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a4b6:	81a3      	strh	r3, [r4, #12]
 801a4b8:	4632      	mov	r2, r6
 801a4ba:	463b      	mov	r3, r7
 801a4bc:	4628      	mov	r0, r5
 801a4be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a4c2:	f000 b817 	b.w	801a4f4 <_write_r>

0801a4c6 <__sseek>:
 801a4c6:	b510      	push	{r4, lr}
 801a4c8:	460c      	mov	r4, r1
 801a4ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a4ce:	f000 f855 	bl	801a57c <_lseek_r>
 801a4d2:	1c43      	adds	r3, r0, #1
 801a4d4:	89a3      	ldrh	r3, [r4, #12]
 801a4d6:	bf15      	itete	ne
 801a4d8:	6560      	strne	r0, [r4, #84]	; 0x54
 801a4da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a4de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a4e2:	81a3      	strheq	r3, [r4, #12]
 801a4e4:	bf18      	it	ne
 801a4e6:	81a3      	strhne	r3, [r4, #12]
 801a4e8:	bd10      	pop	{r4, pc}

0801a4ea <__sclose>:
 801a4ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a4ee:	f000 b813 	b.w	801a518 <_close_r>
	...

0801a4f4 <_write_r>:
 801a4f4:	b538      	push	{r3, r4, r5, lr}
 801a4f6:	4d07      	ldr	r5, [pc, #28]	; (801a514 <_write_r+0x20>)
 801a4f8:	4604      	mov	r4, r0
 801a4fa:	4608      	mov	r0, r1
 801a4fc:	4611      	mov	r1, r2
 801a4fe:	2200      	movs	r2, #0
 801a500:	602a      	str	r2, [r5, #0]
 801a502:	461a      	mov	r2, r3
 801a504:	f7f0 fd37 	bl	800af76 <_write>
 801a508:	1c43      	adds	r3, r0, #1
 801a50a:	d102      	bne.n	801a512 <_write_r+0x1e>
 801a50c:	682b      	ldr	r3, [r5, #0]
 801a50e:	b103      	cbz	r3, 801a512 <_write_r+0x1e>
 801a510:	6023      	str	r3, [r4, #0]
 801a512:	bd38      	pop	{r3, r4, r5, pc}
 801a514:	20006b74 	.word	0x20006b74

0801a518 <_close_r>:
 801a518:	b538      	push	{r3, r4, r5, lr}
 801a51a:	4d06      	ldr	r5, [pc, #24]	; (801a534 <_close_r+0x1c>)
 801a51c:	2300      	movs	r3, #0
 801a51e:	4604      	mov	r4, r0
 801a520:	4608      	mov	r0, r1
 801a522:	602b      	str	r3, [r5, #0]
 801a524:	f7f0 fd43 	bl	800afae <_close>
 801a528:	1c43      	adds	r3, r0, #1
 801a52a:	d102      	bne.n	801a532 <_close_r+0x1a>
 801a52c:	682b      	ldr	r3, [r5, #0]
 801a52e:	b103      	cbz	r3, 801a532 <_close_r+0x1a>
 801a530:	6023      	str	r3, [r4, #0]
 801a532:	bd38      	pop	{r3, r4, r5, pc}
 801a534:	20006b74 	.word	0x20006b74

0801a538 <_fstat_r>:
 801a538:	b538      	push	{r3, r4, r5, lr}
 801a53a:	4d07      	ldr	r5, [pc, #28]	; (801a558 <_fstat_r+0x20>)
 801a53c:	2300      	movs	r3, #0
 801a53e:	4604      	mov	r4, r0
 801a540:	4608      	mov	r0, r1
 801a542:	4611      	mov	r1, r2
 801a544:	602b      	str	r3, [r5, #0]
 801a546:	f7f0 fd3e 	bl	800afc6 <_fstat>
 801a54a:	1c43      	adds	r3, r0, #1
 801a54c:	d102      	bne.n	801a554 <_fstat_r+0x1c>
 801a54e:	682b      	ldr	r3, [r5, #0]
 801a550:	b103      	cbz	r3, 801a554 <_fstat_r+0x1c>
 801a552:	6023      	str	r3, [r4, #0]
 801a554:	bd38      	pop	{r3, r4, r5, pc}
 801a556:	bf00      	nop
 801a558:	20006b74 	.word	0x20006b74

0801a55c <_isatty_r>:
 801a55c:	b538      	push	{r3, r4, r5, lr}
 801a55e:	4d06      	ldr	r5, [pc, #24]	; (801a578 <_isatty_r+0x1c>)
 801a560:	2300      	movs	r3, #0
 801a562:	4604      	mov	r4, r0
 801a564:	4608      	mov	r0, r1
 801a566:	602b      	str	r3, [r5, #0]
 801a568:	f7f0 fd3d 	bl	800afe6 <_isatty>
 801a56c:	1c43      	adds	r3, r0, #1
 801a56e:	d102      	bne.n	801a576 <_isatty_r+0x1a>
 801a570:	682b      	ldr	r3, [r5, #0]
 801a572:	b103      	cbz	r3, 801a576 <_isatty_r+0x1a>
 801a574:	6023      	str	r3, [r4, #0]
 801a576:	bd38      	pop	{r3, r4, r5, pc}
 801a578:	20006b74 	.word	0x20006b74

0801a57c <_lseek_r>:
 801a57c:	b538      	push	{r3, r4, r5, lr}
 801a57e:	4d07      	ldr	r5, [pc, #28]	; (801a59c <_lseek_r+0x20>)
 801a580:	4604      	mov	r4, r0
 801a582:	4608      	mov	r0, r1
 801a584:	4611      	mov	r1, r2
 801a586:	2200      	movs	r2, #0
 801a588:	602a      	str	r2, [r5, #0]
 801a58a:	461a      	mov	r2, r3
 801a58c:	f7f0 fd36 	bl	800affc <_lseek>
 801a590:	1c43      	adds	r3, r0, #1
 801a592:	d102      	bne.n	801a59a <_lseek_r+0x1e>
 801a594:	682b      	ldr	r3, [r5, #0]
 801a596:	b103      	cbz	r3, 801a59a <_lseek_r+0x1e>
 801a598:	6023      	str	r3, [r4, #0]
 801a59a:	bd38      	pop	{r3, r4, r5, pc}
 801a59c:	20006b74 	.word	0x20006b74

0801a5a0 <_read_r>:
 801a5a0:	b538      	push	{r3, r4, r5, lr}
 801a5a2:	4d07      	ldr	r5, [pc, #28]	; (801a5c0 <_read_r+0x20>)
 801a5a4:	4604      	mov	r4, r0
 801a5a6:	4608      	mov	r0, r1
 801a5a8:	4611      	mov	r1, r2
 801a5aa:	2200      	movs	r2, #0
 801a5ac:	602a      	str	r2, [r5, #0]
 801a5ae:	461a      	mov	r2, r3
 801a5b0:	f7f0 fcc4 	bl	800af3c <_read>
 801a5b4:	1c43      	adds	r3, r0, #1
 801a5b6:	d102      	bne.n	801a5be <_read_r+0x1e>
 801a5b8:	682b      	ldr	r3, [r5, #0]
 801a5ba:	b103      	cbz	r3, 801a5be <_read_r+0x1e>
 801a5bc:	6023      	str	r3, [r4, #0]
 801a5be:	bd38      	pop	{r3, r4, r5, pc}
 801a5c0:	20006b74 	.word	0x20006b74
 801a5c4:	00000000 	.word	0x00000000

0801a5c8 <ceil>:
 801a5c8:	ec51 0b10 	vmov	r0, r1, d0
 801a5cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a5d0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801a5d4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801a5d8:	2e13      	cmp	r6, #19
 801a5da:	ee10 5a10 	vmov	r5, s0
 801a5de:	ee10 8a10 	vmov	r8, s0
 801a5e2:	460c      	mov	r4, r1
 801a5e4:	dc30      	bgt.n	801a648 <ceil+0x80>
 801a5e6:	2e00      	cmp	r6, #0
 801a5e8:	da12      	bge.n	801a610 <ceil+0x48>
 801a5ea:	a335      	add	r3, pc, #212	; (adr r3, 801a6c0 <ceil+0xf8>)
 801a5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5f0:	f7e5 fe4c 	bl	800028c <__adddf3>
 801a5f4:	2200      	movs	r2, #0
 801a5f6:	2300      	movs	r3, #0
 801a5f8:	f7e6 fa8e 	bl	8000b18 <__aeabi_dcmpgt>
 801a5fc:	b128      	cbz	r0, 801a60a <ceil+0x42>
 801a5fe:	2c00      	cmp	r4, #0
 801a600:	db55      	blt.n	801a6ae <ceil+0xe6>
 801a602:	432c      	orrs	r4, r5
 801a604:	d057      	beq.n	801a6b6 <ceil+0xee>
 801a606:	4c30      	ldr	r4, [pc, #192]	; (801a6c8 <ceil+0x100>)
 801a608:	2500      	movs	r5, #0
 801a60a:	4621      	mov	r1, r4
 801a60c:	4628      	mov	r0, r5
 801a60e:	e025      	b.n	801a65c <ceil+0x94>
 801a610:	4f2e      	ldr	r7, [pc, #184]	; (801a6cc <ceil+0x104>)
 801a612:	4137      	asrs	r7, r6
 801a614:	ea01 0307 	and.w	r3, r1, r7
 801a618:	4303      	orrs	r3, r0
 801a61a:	d01f      	beq.n	801a65c <ceil+0x94>
 801a61c:	a328      	add	r3, pc, #160	; (adr r3, 801a6c0 <ceil+0xf8>)
 801a61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a622:	f7e5 fe33 	bl	800028c <__adddf3>
 801a626:	2200      	movs	r2, #0
 801a628:	2300      	movs	r3, #0
 801a62a:	f7e6 fa75 	bl	8000b18 <__aeabi_dcmpgt>
 801a62e:	2800      	cmp	r0, #0
 801a630:	d0eb      	beq.n	801a60a <ceil+0x42>
 801a632:	2c00      	cmp	r4, #0
 801a634:	bfc2      	ittt	gt
 801a636:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 801a63a:	fa43 f606 	asrgt.w	r6, r3, r6
 801a63e:	19a4      	addgt	r4, r4, r6
 801a640:	ea24 0407 	bic.w	r4, r4, r7
 801a644:	2500      	movs	r5, #0
 801a646:	e7e0      	b.n	801a60a <ceil+0x42>
 801a648:	2e33      	cmp	r6, #51	; 0x33
 801a64a:	dd0b      	ble.n	801a664 <ceil+0x9c>
 801a64c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801a650:	d104      	bne.n	801a65c <ceil+0x94>
 801a652:	ee10 2a10 	vmov	r2, s0
 801a656:	460b      	mov	r3, r1
 801a658:	f7e5 fe18 	bl	800028c <__adddf3>
 801a65c:	ec41 0b10 	vmov	d0, r0, r1
 801a660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a664:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801a668:	f04f 33ff 	mov.w	r3, #4294967295
 801a66c:	fa23 f707 	lsr.w	r7, r3, r7
 801a670:	4207      	tst	r7, r0
 801a672:	d0f3      	beq.n	801a65c <ceil+0x94>
 801a674:	a312      	add	r3, pc, #72	; (adr r3, 801a6c0 <ceil+0xf8>)
 801a676:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a67a:	f7e5 fe07 	bl	800028c <__adddf3>
 801a67e:	2200      	movs	r2, #0
 801a680:	2300      	movs	r3, #0
 801a682:	f7e6 fa49 	bl	8000b18 <__aeabi_dcmpgt>
 801a686:	2800      	cmp	r0, #0
 801a688:	d0bf      	beq.n	801a60a <ceil+0x42>
 801a68a:	2c00      	cmp	r4, #0
 801a68c:	dd02      	ble.n	801a694 <ceil+0xcc>
 801a68e:	2e14      	cmp	r6, #20
 801a690:	d103      	bne.n	801a69a <ceil+0xd2>
 801a692:	3401      	adds	r4, #1
 801a694:	ea25 0507 	bic.w	r5, r5, r7
 801a698:	e7b7      	b.n	801a60a <ceil+0x42>
 801a69a:	2301      	movs	r3, #1
 801a69c:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801a6a0:	fa03 f606 	lsl.w	r6, r3, r6
 801a6a4:	4435      	add	r5, r6
 801a6a6:	4545      	cmp	r5, r8
 801a6a8:	bf38      	it	cc
 801a6aa:	18e4      	addcc	r4, r4, r3
 801a6ac:	e7f2      	b.n	801a694 <ceil+0xcc>
 801a6ae:	2500      	movs	r5, #0
 801a6b0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801a6b4:	e7a9      	b.n	801a60a <ceil+0x42>
 801a6b6:	4625      	mov	r5, r4
 801a6b8:	e7a7      	b.n	801a60a <ceil+0x42>
 801a6ba:	bf00      	nop
 801a6bc:	f3af 8000 	nop.w
 801a6c0:	8800759c 	.word	0x8800759c
 801a6c4:	7e37e43c 	.word	0x7e37e43c
 801a6c8:	3ff00000 	.word	0x3ff00000
 801a6cc:	000fffff 	.word	0x000fffff

0801a6d0 <cos>:
 801a6d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a6d2:	ec53 2b10 	vmov	r2, r3, d0
 801a6d6:	4824      	ldr	r0, [pc, #144]	; (801a768 <cos+0x98>)
 801a6d8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801a6dc:	4281      	cmp	r1, r0
 801a6de:	dc06      	bgt.n	801a6ee <cos+0x1e>
 801a6e0:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 801a760 <cos+0x90>
 801a6e4:	f000 fce4 	bl	801b0b0 <__kernel_cos>
 801a6e8:	ec51 0b10 	vmov	r0, r1, d0
 801a6ec:	e007      	b.n	801a6fe <cos+0x2e>
 801a6ee:	481f      	ldr	r0, [pc, #124]	; (801a76c <cos+0x9c>)
 801a6f0:	4281      	cmp	r1, r0
 801a6f2:	dd09      	ble.n	801a708 <cos+0x38>
 801a6f4:	ee10 0a10 	vmov	r0, s0
 801a6f8:	4619      	mov	r1, r3
 801a6fa:	f7e5 fdc5 	bl	8000288 <__aeabi_dsub>
 801a6fe:	ec41 0b10 	vmov	d0, r0, r1
 801a702:	b005      	add	sp, #20
 801a704:	f85d fb04 	ldr.w	pc, [sp], #4
 801a708:	4668      	mov	r0, sp
 801a70a:	f000 fa11 	bl	801ab30 <__ieee754_rem_pio2>
 801a70e:	f000 0003 	and.w	r0, r0, #3
 801a712:	2801      	cmp	r0, #1
 801a714:	d007      	beq.n	801a726 <cos+0x56>
 801a716:	2802      	cmp	r0, #2
 801a718:	d012      	beq.n	801a740 <cos+0x70>
 801a71a:	b9c0      	cbnz	r0, 801a74e <cos+0x7e>
 801a71c:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a720:	ed9d 0b00 	vldr	d0, [sp]
 801a724:	e7de      	b.n	801a6e4 <cos+0x14>
 801a726:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a72a:	ed9d 0b00 	vldr	d0, [sp]
 801a72e:	f001 f8c7 	bl	801b8c0 <__kernel_sin>
 801a732:	ec53 2b10 	vmov	r2, r3, d0
 801a736:	ee10 0a10 	vmov	r0, s0
 801a73a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801a73e:	e7de      	b.n	801a6fe <cos+0x2e>
 801a740:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a744:	ed9d 0b00 	vldr	d0, [sp]
 801a748:	f000 fcb2 	bl	801b0b0 <__kernel_cos>
 801a74c:	e7f1      	b.n	801a732 <cos+0x62>
 801a74e:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a752:	ed9d 0b00 	vldr	d0, [sp]
 801a756:	2001      	movs	r0, #1
 801a758:	f001 f8b2 	bl	801b8c0 <__kernel_sin>
 801a75c:	e7c4      	b.n	801a6e8 <cos+0x18>
 801a75e:	bf00      	nop
	...
 801a768:	3fe921fb 	.word	0x3fe921fb
 801a76c:	7fefffff 	.word	0x7fefffff

0801a770 <round>:
 801a770:	ec51 0b10 	vmov	r0, r1, d0
 801a774:	b570      	push	{r4, r5, r6, lr}
 801a776:	f3c1 550a 	ubfx	r5, r1, #20, #11
 801a77a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 801a77e:	2c13      	cmp	r4, #19
 801a780:	ee10 2a10 	vmov	r2, s0
 801a784:	460b      	mov	r3, r1
 801a786:	dc19      	bgt.n	801a7bc <round+0x4c>
 801a788:	2c00      	cmp	r4, #0
 801a78a:	da09      	bge.n	801a7a0 <round+0x30>
 801a78c:	3401      	adds	r4, #1
 801a78e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 801a792:	d103      	bne.n	801a79c <round+0x2c>
 801a794:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801a798:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801a79c:	2100      	movs	r1, #0
 801a79e:	e028      	b.n	801a7f2 <round+0x82>
 801a7a0:	4d15      	ldr	r5, [pc, #84]	; (801a7f8 <round+0x88>)
 801a7a2:	4125      	asrs	r5, r4
 801a7a4:	ea01 0605 	and.w	r6, r1, r5
 801a7a8:	4332      	orrs	r2, r6
 801a7aa:	d00e      	beq.n	801a7ca <round+0x5a>
 801a7ac:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801a7b0:	fa42 f404 	asr.w	r4, r2, r4
 801a7b4:	4423      	add	r3, r4
 801a7b6:	ea23 0305 	bic.w	r3, r3, r5
 801a7ba:	e7ef      	b.n	801a79c <round+0x2c>
 801a7bc:	2c33      	cmp	r4, #51	; 0x33
 801a7be:	dd07      	ble.n	801a7d0 <round+0x60>
 801a7c0:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 801a7c4:	d101      	bne.n	801a7ca <round+0x5a>
 801a7c6:	f7e5 fd61 	bl	800028c <__adddf3>
 801a7ca:	ec41 0b10 	vmov	d0, r0, r1
 801a7ce:	bd70      	pop	{r4, r5, r6, pc}
 801a7d0:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 801a7d4:	f04f 35ff 	mov.w	r5, #4294967295
 801a7d8:	40f5      	lsrs	r5, r6
 801a7da:	4228      	tst	r0, r5
 801a7dc:	d0f5      	beq.n	801a7ca <round+0x5a>
 801a7de:	2101      	movs	r1, #1
 801a7e0:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 801a7e4:	fa01 f404 	lsl.w	r4, r1, r4
 801a7e8:	1912      	adds	r2, r2, r4
 801a7ea:	bf28      	it	cs
 801a7ec:	185b      	addcs	r3, r3, r1
 801a7ee:	ea22 0105 	bic.w	r1, r2, r5
 801a7f2:	4608      	mov	r0, r1
 801a7f4:	4619      	mov	r1, r3
 801a7f6:	e7e8      	b.n	801a7ca <round+0x5a>
 801a7f8:	000fffff 	.word	0x000fffff
 801a7fc:	00000000 	.word	0x00000000

0801a800 <sin>:
 801a800:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a802:	ec53 2b10 	vmov	r2, r3, d0
 801a806:	4826      	ldr	r0, [pc, #152]	; (801a8a0 <sin+0xa0>)
 801a808:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801a80c:	4281      	cmp	r1, r0
 801a80e:	dc07      	bgt.n	801a820 <sin+0x20>
 801a810:	ed9f 1b21 	vldr	d1, [pc, #132]	; 801a898 <sin+0x98>
 801a814:	2000      	movs	r0, #0
 801a816:	f001 f853 	bl	801b8c0 <__kernel_sin>
 801a81a:	ec51 0b10 	vmov	r0, r1, d0
 801a81e:	e007      	b.n	801a830 <sin+0x30>
 801a820:	4820      	ldr	r0, [pc, #128]	; (801a8a4 <sin+0xa4>)
 801a822:	4281      	cmp	r1, r0
 801a824:	dd09      	ble.n	801a83a <sin+0x3a>
 801a826:	ee10 0a10 	vmov	r0, s0
 801a82a:	4619      	mov	r1, r3
 801a82c:	f7e5 fd2c 	bl	8000288 <__aeabi_dsub>
 801a830:	ec41 0b10 	vmov	d0, r0, r1
 801a834:	b005      	add	sp, #20
 801a836:	f85d fb04 	ldr.w	pc, [sp], #4
 801a83a:	4668      	mov	r0, sp
 801a83c:	f000 f978 	bl	801ab30 <__ieee754_rem_pio2>
 801a840:	f000 0003 	and.w	r0, r0, #3
 801a844:	2801      	cmp	r0, #1
 801a846:	d008      	beq.n	801a85a <sin+0x5a>
 801a848:	2802      	cmp	r0, #2
 801a84a:	d00d      	beq.n	801a868 <sin+0x68>
 801a84c:	b9d0      	cbnz	r0, 801a884 <sin+0x84>
 801a84e:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a852:	ed9d 0b00 	vldr	d0, [sp]
 801a856:	2001      	movs	r0, #1
 801a858:	e7dd      	b.n	801a816 <sin+0x16>
 801a85a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a85e:	ed9d 0b00 	vldr	d0, [sp]
 801a862:	f000 fc25 	bl	801b0b0 <__kernel_cos>
 801a866:	e7d8      	b.n	801a81a <sin+0x1a>
 801a868:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a86c:	ed9d 0b00 	vldr	d0, [sp]
 801a870:	2001      	movs	r0, #1
 801a872:	f001 f825 	bl	801b8c0 <__kernel_sin>
 801a876:	ec53 2b10 	vmov	r2, r3, d0
 801a87a:	ee10 0a10 	vmov	r0, s0
 801a87e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801a882:	e7d5      	b.n	801a830 <sin+0x30>
 801a884:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a888:	ed9d 0b00 	vldr	d0, [sp]
 801a88c:	f000 fc10 	bl	801b0b0 <__kernel_cos>
 801a890:	e7f1      	b.n	801a876 <sin+0x76>
 801a892:	bf00      	nop
 801a894:	f3af 8000 	nop.w
	...
 801a8a0:	3fe921fb 	.word	0x3fe921fb
 801a8a4:	7fefffff 	.word	0x7fefffff

0801a8a8 <ceilf>:
 801a8a8:	ee10 3a10 	vmov	r3, s0
 801a8ac:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801a8b0:	3a7f      	subs	r2, #127	; 0x7f
 801a8b2:	2a16      	cmp	r2, #22
 801a8b4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801a8b8:	dc2a      	bgt.n	801a910 <ceilf+0x68>
 801a8ba:	2a00      	cmp	r2, #0
 801a8bc:	da11      	bge.n	801a8e2 <ceilf+0x3a>
 801a8be:	eddf 7a19 	vldr	s15, [pc, #100]	; 801a924 <ceilf+0x7c>
 801a8c2:	ee30 0a27 	vadd.f32	s0, s0, s15
 801a8c6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801a8ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8ce:	dd05      	ble.n	801a8dc <ceilf+0x34>
 801a8d0:	2b00      	cmp	r3, #0
 801a8d2:	db23      	blt.n	801a91c <ceilf+0x74>
 801a8d4:	2900      	cmp	r1, #0
 801a8d6:	bf18      	it	ne
 801a8d8:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 801a8dc:	ee00 3a10 	vmov	s0, r3
 801a8e0:	4770      	bx	lr
 801a8e2:	4911      	ldr	r1, [pc, #68]	; (801a928 <ceilf+0x80>)
 801a8e4:	4111      	asrs	r1, r2
 801a8e6:	420b      	tst	r3, r1
 801a8e8:	d0fa      	beq.n	801a8e0 <ceilf+0x38>
 801a8ea:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801a924 <ceilf+0x7c>
 801a8ee:	ee30 0a27 	vadd.f32	s0, s0, s15
 801a8f2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801a8f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8fa:	ddef      	ble.n	801a8dc <ceilf+0x34>
 801a8fc:	2b00      	cmp	r3, #0
 801a8fe:	bfc2      	ittt	gt
 801a900:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 801a904:	fa40 f202 	asrgt.w	r2, r0, r2
 801a908:	189b      	addgt	r3, r3, r2
 801a90a:	ea23 0301 	bic.w	r3, r3, r1
 801a90e:	e7e5      	b.n	801a8dc <ceilf+0x34>
 801a910:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801a914:	d3e4      	bcc.n	801a8e0 <ceilf+0x38>
 801a916:	ee30 0a00 	vadd.f32	s0, s0, s0
 801a91a:	4770      	bx	lr
 801a91c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801a920:	e7dc      	b.n	801a8dc <ceilf+0x34>
 801a922:	bf00      	nop
 801a924:	7149f2ca 	.word	0x7149f2ca
 801a928:	007fffff 	.word	0x007fffff

0801a92c <atan2>:
 801a92c:	f000 b834 	b.w	801a998 <__ieee754_atan2>

0801a930 <sqrt>:
 801a930:	b538      	push	{r3, r4, r5, lr}
 801a932:	ed2d 8b02 	vpush	{d8}
 801a936:	ec55 4b10 	vmov	r4, r5, d0
 801a93a:	f000 fb03 	bl	801af44 <__ieee754_sqrt>
 801a93e:	4b15      	ldr	r3, [pc, #84]	; (801a994 <sqrt+0x64>)
 801a940:	eeb0 8a40 	vmov.f32	s16, s0
 801a944:	eef0 8a60 	vmov.f32	s17, s1
 801a948:	f993 3000 	ldrsb.w	r3, [r3]
 801a94c:	3301      	adds	r3, #1
 801a94e:	d019      	beq.n	801a984 <sqrt+0x54>
 801a950:	4622      	mov	r2, r4
 801a952:	462b      	mov	r3, r5
 801a954:	4620      	mov	r0, r4
 801a956:	4629      	mov	r1, r5
 801a958:	f7e6 f8e8 	bl	8000b2c <__aeabi_dcmpun>
 801a95c:	b990      	cbnz	r0, 801a984 <sqrt+0x54>
 801a95e:	2200      	movs	r2, #0
 801a960:	2300      	movs	r3, #0
 801a962:	4620      	mov	r0, r4
 801a964:	4629      	mov	r1, r5
 801a966:	f7e6 f8b9 	bl	8000adc <__aeabi_dcmplt>
 801a96a:	b158      	cbz	r0, 801a984 <sqrt+0x54>
 801a96c:	f7fb f996 	bl	8015c9c <__errno>
 801a970:	2321      	movs	r3, #33	; 0x21
 801a972:	6003      	str	r3, [r0, #0]
 801a974:	2200      	movs	r2, #0
 801a976:	2300      	movs	r3, #0
 801a978:	4610      	mov	r0, r2
 801a97a:	4619      	mov	r1, r3
 801a97c:	f7e5 ff66 	bl	800084c <__aeabi_ddiv>
 801a980:	ec41 0b18 	vmov	d8, r0, r1
 801a984:	eeb0 0a48 	vmov.f32	s0, s16
 801a988:	eef0 0a68 	vmov.f32	s1, s17
 801a98c:	ecbd 8b02 	vpop	{d8}
 801a990:	bd38      	pop	{r3, r4, r5, pc}
 801a992:	bf00      	nop
 801a994:	20000b80 	.word	0x20000b80

0801a998 <__ieee754_atan2>:
 801a998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a99c:	ec57 6b11 	vmov	r6, r7, d1
 801a9a0:	4273      	negs	r3, r6
 801a9a2:	f8df e184 	ldr.w	lr, [pc, #388]	; 801ab28 <__ieee754_atan2+0x190>
 801a9a6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801a9aa:	4333      	orrs	r3, r6
 801a9ac:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801a9b0:	4573      	cmp	r3, lr
 801a9b2:	ec51 0b10 	vmov	r0, r1, d0
 801a9b6:	ee11 8a10 	vmov	r8, s2
 801a9ba:	d80a      	bhi.n	801a9d2 <__ieee754_atan2+0x3a>
 801a9bc:	4244      	negs	r4, r0
 801a9be:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a9c2:	4304      	orrs	r4, r0
 801a9c4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801a9c8:	4574      	cmp	r4, lr
 801a9ca:	ee10 9a10 	vmov	r9, s0
 801a9ce:	468c      	mov	ip, r1
 801a9d0:	d907      	bls.n	801a9e2 <__ieee754_atan2+0x4a>
 801a9d2:	4632      	mov	r2, r6
 801a9d4:	463b      	mov	r3, r7
 801a9d6:	f7e5 fc59 	bl	800028c <__adddf3>
 801a9da:	ec41 0b10 	vmov	d0, r0, r1
 801a9de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a9e2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801a9e6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801a9ea:	4334      	orrs	r4, r6
 801a9ec:	d103      	bne.n	801a9f6 <__ieee754_atan2+0x5e>
 801a9ee:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a9f2:	f001 b825 	b.w	801ba40 <atan>
 801a9f6:	17bc      	asrs	r4, r7, #30
 801a9f8:	f004 0402 	and.w	r4, r4, #2
 801a9fc:	ea53 0909 	orrs.w	r9, r3, r9
 801aa00:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801aa04:	d107      	bne.n	801aa16 <__ieee754_atan2+0x7e>
 801aa06:	2c02      	cmp	r4, #2
 801aa08:	d060      	beq.n	801aacc <__ieee754_atan2+0x134>
 801aa0a:	2c03      	cmp	r4, #3
 801aa0c:	d1e5      	bne.n	801a9da <__ieee754_atan2+0x42>
 801aa0e:	a142      	add	r1, pc, #264	; (adr r1, 801ab18 <__ieee754_atan2+0x180>)
 801aa10:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aa14:	e7e1      	b.n	801a9da <__ieee754_atan2+0x42>
 801aa16:	ea52 0808 	orrs.w	r8, r2, r8
 801aa1a:	d106      	bne.n	801aa2a <__ieee754_atan2+0x92>
 801aa1c:	f1bc 0f00 	cmp.w	ip, #0
 801aa20:	da5f      	bge.n	801aae2 <__ieee754_atan2+0x14a>
 801aa22:	a13f      	add	r1, pc, #252	; (adr r1, 801ab20 <__ieee754_atan2+0x188>)
 801aa24:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aa28:	e7d7      	b.n	801a9da <__ieee754_atan2+0x42>
 801aa2a:	4572      	cmp	r2, lr
 801aa2c:	d10f      	bne.n	801aa4e <__ieee754_atan2+0xb6>
 801aa2e:	4293      	cmp	r3, r2
 801aa30:	f104 34ff 	add.w	r4, r4, #4294967295
 801aa34:	d107      	bne.n	801aa46 <__ieee754_atan2+0xae>
 801aa36:	2c02      	cmp	r4, #2
 801aa38:	d84c      	bhi.n	801aad4 <__ieee754_atan2+0x13c>
 801aa3a:	4b35      	ldr	r3, [pc, #212]	; (801ab10 <__ieee754_atan2+0x178>)
 801aa3c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801aa40:	e9d4 0100 	ldrd	r0, r1, [r4]
 801aa44:	e7c9      	b.n	801a9da <__ieee754_atan2+0x42>
 801aa46:	2c02      	cmp	r4, #2
 801aa48:	d848      	bhi.n	801aadc <__ieee754_atan2+0x144>
 801aa4a:	4b32      	ldr	r3, [pc, #200]	; (801ab14 <__ieee754_atan2+0x17c>)
 801aa4c:	e7f6      	b.n	801aa3c <__ieee754_atan2+0xa4>
 801aa4e:	4573      	cmp	r3, lr
 801aa50:	d0e4      	beq.n	801aa1c <__ieee754_atan2+0x84>
 801aa52:	1a9b      	subs	r3, r3, r2
 801aa54:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 801aa58:	ea4f 5223 	mov.w	r2, r3, asr #20
 801aa5c:	da1e      	bge.n	801aa9c <__ieee754_atan2+0x104>
 801aa5e:	2f00      	cmp	r7, #0
 801aa60:	da01      	bge.n	801aa66 <__ieee754_atan2+0xce>
 801aa62:	323c      	adds	r2, #60	; 0x3c
 801aa64:	db1e      	blt.n	801aaa4 <__ieee754_atan2+0x10c>
 801aa66:	4632      	mov	r2, r6
 801aa68:	463b      	mov	r3, r7
 801aa6a:	f7e5 feef 	bl	800084c <__aeabi_ddiv>
 801aa6e:	ec41 0b10 	vmov	d0, r0, r1
 801aa72:	f001 f985 	bl	801bd80 <fabs>
 801aa76:	f000 ffe3 	bl	801ba40 <atan>
 801aa7a:	ec51 0b10 	vmov	r0, r1, d0
 801aa7e:	2c01      	cmp	r4, #1
 801aa80:	d013      	beq.n	801aaaa <__ieee754_atan2+0x112>
 801aa82:	2c02      	cmp	r4, #2
 801aa84:	d015      	beq.n	801aab2 <__ieee754_atan2+0x11a>
 801aa86:	2c00      	cmp	r4, #0
 801aa88:	d0a7      	beq.n	801a9da <__ieee754_atan2+0x42>
 801aa8a:	a319      	add	r3, pc, #100	; (adr r3, 801aaf0 <__ieee754_atan2+0x158>)
 801aa8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa90:	f7e5 fbfa 	bl	8000288 <__aeabi_dsub>
 801aa94:	a318      	add	r3, pc, #96	; (adr r3, 801aaf8 <__ieee754_atan2+0x160>)
 801aa96:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa9a:	e014      	b.n	801aac6 <__ieee754_atan2+0x12e>
 801aa9c:	a118      	add	r1, pc, #96	; (adr r1, 801ab00 <__ieee754_atan2+0x168>)
 801aa9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aaa2:	e7ec      	b.n	801aa7e <__ieee754_atan2+0xe6>
 801aaa4:	2000      	movs	r0, #0
 801aaa6:	2100      	movs	r1, #0
 801aaa8:	e7e9      	b.n	801aa7e <__ieee754_atan2+0xe6>
 801aaaa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801aaae:	4619      	mov	r1, r3
 801aab0:	e793      	b.n	801a9da <__ieee754_atan2+0x42>
 801aab2:	a30f      	add	r3, pc, #60	; (adr r3, 801aaf0 <__ieee754_atan2+0x158>)
 801aab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aab8:	f7e5 fbe6 	bl	8000288 <__aeabi_dsub>
 801aabc:	4602      	mov	r2, r0
 801aabe:	460b      	mov	r3, r1
 801aac0:	a10d      	add	r1, pc, #52	; (adr r1, 801aaf8 <__ieee754_atan2+0x160>)
 801aac2:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aac6:	f7e5 fbdf 	bl	8000288 <__aeabi_dsub>
 801aaca:	e786      	b.n	801a9da <__ieee754_atan2+0x42>
 801aacc:	a10a      	add	r1, pc, #40	; (adr r1, 801aaf8 <__ieee754_atan2+0x160>)
 801aace:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aad2:	e782      	b.n	801a9da <__ieee754_atan2+0x42>
 801aad4:	a10c      	add	r1, pc, #48	; (adr r1, 801ab08 <__ieee754_atan2+0x170>)
 801aad6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aada:	e77e      	b.n	801a9da <__ieee754_atan2+0x42>
 801aadc:	2000      	movs	r0, #0
 801aade:	2100      	movs	r1, #0
 801aae0:	e77b      	b.n	801a9da <__ieee754_atan2+0x42>
 801aae2:	a107      	add	r1, pc, #28	; (adr r1, 801ab00 <__ieee754_atan2+0x168>)
 801aae4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aae8:	e777      	b.n	801a9da <__ieee754_atan2+0x42>
 801aaea:	bf00      	nop
 801aaec:	f3af 8000 	nop.w
 801aaf0:	33145c07 	.word	0x33145c07
 801aaf4:	3ca1a626 	.word	0x3ca1a626
 801aaf8:	54442d18 	.word	0x54442d18
 801aafc:	400921fb 	.word	0x400921fb
 801ab00:	54442d18 	.word	0x54442d18
 801ab04:	3ff921fb 	.word	0x3ff921fb
 801ab08:	54442d18 	.word	0x54442d18
 801ab0c:	3fe921fb 	.word	0x3fe921fb
 801ab10:	0801c758 	.word	0x0801c758
 801ab14:	0801c770 	.word	0x0801c770
 801ab18:	54442d18 	.word	0x54442d18
 801ab1c:	c00921fb 	.word	0xc00921fb
 801ab20:	54442d18 	.word	0x54442d18
 801ab24:	bff921fb 	.word	0xbff921fb
 801ab28:	7ff00000 	.word	0x7ff00000
 801ab2c:	00000000 	.word	0x00000000

0801ab30 <__ieee754_rem_pio2>:
 801ab30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab34:	ed2d 8b02 	vpush	{d8}
 801ab38:	ec55 4b10 	vmov	r4, r5, d0
 801ab3c:	4bca      	ldr	r3, [pc, #808]	; (801ae68 <__ieee754_rem_pio2+0x338>)
 801ab3e:	b08b      	sub	sp, #44	; 0x2c
 801ab40:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801ab44:	4598      	cmp	r8, r3
 801ab46:	4682      	mov	sl, r0
 801ab48:	9502      	str	r5, [sp, #8]
 801ab4a:	dc08      	bgt.n	801ab5e <__ieee754_rem_pio2+0x2e>
 801ab4c:	2200      	movs	r2, #0
 801ab4e:	2300      	movs	r3, #0
 801ab50:	ed80 0b00 	vstr	d0, [r0]
 801ab54:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801ab58:	f04f 0b00 	mov.w	fp, #0
 801ab5c:	e028      	b.n	801abb0 <__ieee754_rem_pio2+0x80>
 801ab5e:	4bc3      	ldr	r3, [pc, #780]	; (801ae6c <__ieee754_rem_pio2+0x33c>)
 801ab60:	4598      	cmp	r8, r3
 801ab62:	dc78      	bgt.n	801ac56 <__ieee754_rem_pio2+0x126>
 801ab64:	9b02      	ldr	r3, [sp, #8]
 801ab66:	4ec2      	ldr	r6, [pc, #776]	; (801ae70 <__ieee754_rem_pio2+0x340>)
 801ab68:	2b00      	cmp	r3, #0
 801ab6a:	ee10 0a10 	vmov	r0, s0
 801ab6e:	a3b0      	add	r3, pc, #704	; (adr r3, 801ae30 <__ieee754_rem_pio2+0x300>)
 801ab70:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab74:	4629      	mov	r1, r5
 801ab76:	dd39      	ble.n	801abec <__ieee754_rem_pio2+0xbc>
 801ab78:	f7e5 fb86 	bl	8000288 <__aeabi_dsub>
 801ab7c:	45b0      	cmp	r8, r6
 801ab7e:	4604      	mov	r4, r0
 801ab80:	460d      	mov	r5, r1
 801ab82:	d01b      	beq.n	801abbc <__ieee754_rem_pio2+0x8c>
 801ab84:	a3ac      	add	r3, pc, #688	; (adr r3, 801ae38 <__ieee754_rem_pio2+0x308>)
 801ab86:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab8a:	f7e5 fb7d 	bl	8000288 <__aeabi_dsub>
 801ab8e:	4602      	mov	r2, r0
 801ab90:	460b      	mov	r3, r1
 801ab92:	e9ca 2300 	strd	r2, r3, [sl]
 801ab96:	4620      	mov	r0, r4
 801ab98:	4629      	mov	r1, r5
 801ab9a:	f7e5 fb75 	bl	8000288 <__aeabi_dsub>
 801ab9e:	a3a6      	add	r3, pc, #664	; (adr r3, 801ae38 <__ieee754_rem_pio2+0x308>)
 801aba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aba4:	f7e5 fb70 	bl	8000288 <__aeabi_dsub>
 801aba8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801abac:	f04f 0b01 	mov.w	fp, #1
 801abb0:	4658      	mov	r0, fp
 801abb2:	b00b      	add	sp, #44	; 0x2c
 801abb4:	ecbd 8b02 	vpop	{d8}
 801abb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801abbc:	a3a0      	add	r3, pc, #640	; (adr r3, 801ae40 <__ieee754_rem_pio2+0x310>)
 801abbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abc2:	f7e5 fb61 	bl	8000288 <__aeabi_dsub>
 801abc6:	a3a0      	add	r3, pc, #640	; (adr r3, 801ae48 <__ieee754_rem_pio2+0x318>)
 801abc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abcc:	4604      	mov	r4, r0
 801abce:	460d      	mov	r5, r1
 801abd0:	f7e5 fb5a 	bl	8000288 <__aeabi_dsub>
 801abd4:	4602      	mov	r2, r0
 801abd6:	460b      	mov	r3, r1
 801abd8:	e9ca 2300 	strd	r2, r3, [sl]
 801abdc:	4620      	mov	r0, r4
 801abde:	4629      	mov	r1, r5
 801abe0:	f7e5 fb52 	bl	8000288 <__aeabi_dsub>
 801abe4:	a398      	add	r3, pc, #608	; (adr r3, 801ae48 <__ieee754_rem_pio2+0x318>)
 801abe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abea:	e7db      	b.n	801aba4 <__ieee754_rem_pio2+0x74>
 801abec:	f7e5 fb4e 	bl	800028c <__adddf3>
 801abf0:	45b0      	cmp	r8, r6
 801abf2:	4604      	mov	r4, r0
 801abf4:	460d      	mov	r5, r1
 801abf6:	d016      	beq.n	801ac26 <__ieee754_rem_pio2+0xf6>
 801abf8:	a38f      	add	r3, pc, #572	; (adr r3, 801ae38 <__ieee754_rem_pio2+0x308>)
 801abfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abfe:	f7e5 fb45 	bl	800028c <__adddf3>
 801ac02:	4602      	mov	r2, r0
 801ac04:	460b      	mov	r3, r1
 801ac06:	e9ca 2300 	strd	r2, r3, [sl]
 801ac0a:	4620      	mov	r0, r4
 801ac0c:	4629      	mov	r1, r5
 801ac0e:	f7e5 fb3b 	bl	8000288 <__aeabi_dsub>
 801ac12:	a389      	add	r3, pc, #548	; (adr r3, 801ae38 <__ieee754_rem_pio2+0x308>)
 801ac14:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac18:	f7e5 fb38 	bl	800028c <__adddf3>
 801ac1c:	f04f 3bff 	mov.w	fp, #4294967295
 801ac20:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801ac24:	e7c4      	b.n	801abb0 <__ieee754_rem_pio2+0x80>
 801ac26:	a386      	add	r3, pc, #536	; (adr r3, 801ae40 <__ieee754_rem_pio2+0x310>)
 801ac28:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac2c:	f7e5 fb2e 	bl	800028c <__adddf3>
 801ac30:	a385      	add	r3, pc, #532	; (adr r3, 801ae48 <__ieee754_rem_pio2+0x318>)
 801ac32:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac36:	4604      	mov	r4, r0
 801ac38:	460d      	mov	r5, r1
 801ac3a:	f7e5 fb27 	bl	800028c <__adddf3>
 801ac3e:	4602      	mov	r2, r0
 801ac40:	460b      	mov	r3, r1
 801ac42:	e9ca 2300 	strd	r2, r3, [sl]
 801ac46:	4620      	mov	r0, r4
 801ac48:	4629      	mov	r1, r5
 801ac4a:	f7e5 fb1d 	bl	8000288 <__aeabi_dsub>
 801ac4e:	a37e      	add	r3, pc, #504	; (adr r3, 801ae48 <__ieee754_rem_pio2+0x318>)
 801ac50:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac54:	e7e0      	b.n	801ac18 <__ieee754_rem_pio2+0xe8>
 801ac56:	4b87      	ldr	r3, [pc, #540]	; (801ae74 <__ieee754_rem_pio2+0x344>)
 801ac58:	4598      	cmp	r8, r3
 801ac5a:	f300 80d9 	bgt.w	801ae10 <__ieee754_rem_pio2+0x2e0>
 801ac5e:	f001 f88f 	bl	801bd80 <fabs>
 801ac62:	ec55 4b10 	vmov	r4, r5, d0
 801ac66:	ee10 0a10 	vmov	r0, s0
 801ac6a:	a379      	add	r3, pc, #484	; (adr r3, 801ae50 <__ieee754_rem_pio2+0x320>)
 801ac6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac70:	4629      	mov	r1, r5
 801ac72:	f7e5 fcc1 	bl	80005f8 <__aeabi_dmul>
 801ac76:	4b80      	ldr	r3, [pc, #512]	; (801ae78 <__ieee754_rem_pio2+0x348>)
 801ac78:	2200      	movs	r2, #0
 801ac7a:	f7e5 fb07 	bl	800028c <__adddf3>
 801ac7e:	f7e5 ff6b 	bl	8000b58 <__aeabi_d2iz>
 801ac82:	4683      	mov	fp, r0
 801ac84:	f7e5 fc4e 	bl	8000524 <__aeabi_i2d>
 801ac88:	4602      	mov	r2, r0
 801ac8a:	460b      	mov	r3, r1
 801ac8c:	ec43 2b18 	vmov	d8, r2, r3
 801ac90:	a367      	add	r3, pc, #412	; (adr r3, 801ae30 <__ieee754_rem_pio2+0x300>)
 801ac92:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac96:	f7e5 fcaf 	bl	80005f8 <__aeabi_dmul>
 801ac9a:	4602      	mov	r2, r0
 801ac9c:	460b      	mov	r3, r1
 801ac9e:	4620      	mov	r0, r4
 801aca0:	4629      	mov	r1, r5
 801aca2:	f7e5 faf1 	bl	8000288 <__aeabi_dsub>
 801aca6:	a364      	add	r3, pc, #400	; (adr r3, 801ae38 <__ieee754_rem_pio2+0x308>)
 801aca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acac:	4606      	mov	r6, r0
 801acae:	460f      	mov	r7, r1
 801acb0:	ec51 0b18 	vmov	r0, r1, d8
 801acb4:	f7e5 fca0 	bl	80005f8 <__aeabi_dmul>
 801acb8:	f1bb 0f1f 	cmp.w	fp, #31
 801acbc:	4604      	mov	r4, r0
 801acbe:	460d      	mov	r5, r1
 801acc0:	dc0d      	bgt.n	801acde <__ieee754_rem_pio2+0x1ae>
 801acc2:	4b6e      	ldr	r3, [pc, #440]	; (801ae7c <__ieee754_rem_pio2+0x34c>)
 801acc4:	f10b 32ff 	add.w	r2, fp, #4294967295
 801acc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801accc:	4543      	cmp	r3, r8
 801acce:	d006      	beq.n	801acde <__ieee754_rem_pio2+0x1ae>
 801acd0:	4622      	mov	r2, r4
 801acd2:	462b      	mov	r3, r5
 801acd4:	4630      	mov	r0, r6
 801acd6:	4639      	mov	r1, r7
 801acd8:	f7e5 fad6 	bl	8000288 <__aeabi_dsub>
 801acdc:	e00f      	b.n	801acfe <__ieee754_rem_pio2+0x1ce>
 801acde:	462b      	mov	r3, r5
 801ace0:	4622      	mov	r2, r4
 801ace2:	4630      	mov	r0, r6
 801ace4:	4639      	mov	r1, r7
 801ace6:	f7e5 facf 	bl	8000288 <__aeabi_dsub>
 801acea:	ea4f 5328 	mov.w	r3, r8, asr #20
 801acee:	9303      	str	r3, [sp, #12]
 801acf0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801acf4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 801acf8:	f1b8 0f10 	cmp.w	r8, #16
 801acfc:	dc02      	bgt.n	801ad04 <__ieee754_rem_pio2+0x1d4>
 801acfe:	e9ca 0100 	strd	r0, r1, [sl]
 801ad02:	e039      	b.n	801ad78 <__ieee754_rem_pio2+0x248>
 801ad04:	a34e      	add	r3, pc, #312	; (adr r3, 801ae40 <__ieee754_rem_pio2+0x310>)
 801ad06:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad0a:	ec51 0b18 	vmov	r0, r1, d8
 801ad0e:	f7e5 fc73 	bl	80005f8 <__aeabi_dmul>
 801ad12:	4604      	mov	r4, r0
 801ad14:	460d      	mov	r5, r1
 801ad16:	4602      	mov	r2, r0
 801ad18:	460b      	mov	r3, r1
 801ad1a:	4630      	mov	r0, r6
 801ad1c:	4639      	mov	r1, r7
 801ad1e:	f7e5 fab3 	bl	8000288 <__aeabi_dsub>
 801ad22:	4602      	mov	r2, r0
 801ad24:	460b      	mov	r3, r1
 801ad26:	4680      	mov	r8, r0
 801ad28:	4689      	mov	r9, r1
 801ad2a:	4630      	mov	r0, r6
 801ad2c:	4639      	mov	r1, r7
 801ad2e:	f7e5 faab 	bl	8000288 <__aeabi_dsub>
 801ad32:	4622      	mov	r2, r4
 801ad34:	462b      	mov	r3, r5
 801ad36:	f7e5 faa7 	bl	8000288 <__aeabi_dsub>
 801ad3a:	a343      	add	r3, pc, #268	; (adr r3, 801ae48 <__ieee754_rem_pio2+0x318>)
 801ad3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad40:	4604      	mov	r4, r0
 801ad42:	460d      	mov	r5, r1
 801ad44:	ec51 0b18 	vmov	r0, r1, d8
 801ad48:	f7e5 fc56 	bl	80005f8 <__aeabi_dmul>
 801ad4c:	4622      	mov	r2, r4
 801ad4e:	462b      	mov	r3, r5
 801ad50:	f7e5 fa9a 	bl	8000288 <__aeabi_dsub>
 801ad54:	4602      	mov	r2, r0
 801ad56:	460b      	mov	r3, r1
 801ad58:	4604      	mov	r4, r0
 801ad5a:	460d      	mov	r5, r1
 801ad5c:	4640      	mov	r0, r8
 801ad5e:	4649      	mov	r1, r9
 801ad60:	f7e5 fa92 	bl	8000288 <__aeabi_dsub>
 801ad64:	9a03      	ldr	r2, [sp, #12]
 801ad66:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801ad6a:	1ad3      	subs	r3, r2, r3
 801ad6c:	2b31      	cmp	r3, #49	; 0x31
 801ad6e:	dc24      	bgt.n	801adba <__ieee754_rem_pio2+0x28a>
 801ad70:	e9ca 0100 	strd	r0, r1, [sl]
 801ad74:	4646      	mov	r6, r8
 801ad76:	464f      	mov	r7, r9
 801ad78:	e9da 8900 	ldrd	r8, r9, [sl]
 801ad7c:	4630      	mov	r0, r6
 801ad7e:	4642      	mov	r2, r8
 801ad80:	464b      	mov	r3, r9
 801ad82:	4639      	mov	r1, r7
 801ad84:	f7e5 fa80 	bl	8000288 <__aeabi_dsub>
 801ad88:	462b      	mov	r3, r5
 801ad8a:	4622      	mov	r2, r4
 801ad8c:	f7e5 fa7c 	bl	8000288 <__aeabi_dsub>
 801ad90:	9b02      	ldr	r3, [sp, #8]
 801ad92:	2b00      	cmp	r3, #0
 801ad94:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801ad98:	f6bf af0a 	bge.w	801abb0 <__ieee754_rem_pio2+0x80>
 801ad9c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801ada0:	f8ca 3004 	str.w	r3, [sl, #4]
 801ada4:	f8ca 8000 	str.w	r8, [sl]
 801ada8:	f8ca 0008 	str.w	r0, [sl, #8]
 801adac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801adb0:	f8ca 300c 	str.w	r3, [sl, #12]
 801adb4:	f1cb 0b00 	rsb	fp, fp, #0
 801adb8:	e6fa      	b.n	801abb0 <__ieee754_rem_pio2+0x80>
 801adba:	a327      	add	r3, pc, #156	; (adr r3, 801ae58 <__ieee754_rem_pio2+0x328>)
 801adbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801adc0:	ec51 0b18 	vmov	r0, r1, d8
 801adc4:	f7e5 fc18 	bl	80005f8 <__aeabi_dmul>
 801adc8:	4604      	mov	r4, r0
 801adca:	460d      	mov	r5, r1
 801adcc:	4602      	mov	r2, r0
 801adce:	460b      	mov	r3, r1
 801add0:	4640      	mov	r0, r8
 801add2:	4649      	mov	r1, r9
 801add4:	f7e5 fa58 	bl	8000288 <__aeabi_dsub>
 801add8:	4602      	mov	r2, r0
 801adda:	460b      	mov	r3, r1
 801addc:	4606      	mov	r6, r0
 801adde:	460f      	mov	r7, r1
 801ade0:	4640      	mov	r0, r8
 801ade2:	4649      	mov	r1, r9
 801ade4:	f7e5 fa50 	bl	8000288 <__aeabi_dsub>
 801ade8:	4622      	mov	r2, r4
 801adea:	462b      	mov	r3, r5
 801adec:	f7e5 fa4c 	bl	8000288 <__aeabi_dsub>
 801adf0:	a31b      	add	r3, pc, #108	; (adr r3, 801ae60 <__ieee754_rem_pio2+0x330>)
 801adf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801adf6:	4604      	mov	r4, r0
 801adf8:	460d      	mov	r5, r1
 801adfa:	ec51 0b18 	vmov	r0, r1, d8
 801adfe:	f7e5 fbfb 	bl	80005f8 <__aeabi_dmul>
 801ae02:	4622      	mov	r2, r4
 801ae04:	462b      	mov	r3, r5
 801ae06:	f7e5 fa3f 	bl	8000288 <__aeabi_dsub>
 801ae0a:	4604      	mov	r4, r0
 801ae0c:	460d      	mov	r5, r1
 801ae0e:	e75f      	b.n	801acd0 <__ieee754_rem_pio2+0x1a0>
 801ae10:	4b1b      	ldr	r3, [pc, #108]	; (801ae80 <__ieee754_rem_pio2+0x350>)
 801ae12:	4598      	cmp	r8, r3
 801ae14:	dd36      	ble.n	801ae84 <__ieee754_rem_pio2+0x354>
 801ae16:	ee10 2a10 	vmov	r2, s0
 801ae1a:	462b      	mov	r3, r5
 801ae1c:	4620      	mov	r0, r4
 801ae1e:	4629      	mov	r1, r5
 801ae20:	f7e5 fa32 	bl	8000288 <__aeabi_dsub>
 801ae24:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801ae28:	e9ca 0100 	strd	r0, r1, [sl]
 801ae2c:	e694      	b.n	801ab58 <__ieee754_rem_pio2+0x28>
 801ae2e:	bf00      	nop
 801ae30:	54400000 	.word	0x54400000
 801ae34:	3ff921fb 	.word	0x3ff921fb
 801ae38:	1a626331 	.word	0x1a626331
 801ae3c:	3dd0b461 	.word	0x3dd0b461
 801ae40:	1a600000 	.word	0x1a600000
 801ae44:	3dd0b461 	.word	0x3dd0b461
 801ae48:	2e037073 	.word	0x2e037073
 801ae4c:	3ba3198a 	.word	0x3ba3198a
 801ae50:	6dc9c883 	.word	0x6dc9c883
 801ae54:	3fe45f30 	.word	0x3fe45f30
 801ae58:	2e000000 	.word	0x2e000000
 801ae5c:	3ba3198a 	.word	0x3ba3198a
 801ae60:	252049c1 	.word	0x252049c1
 801ae64:	397b839a 	.word	0x397b839a
 801ae68:	3fe921fb 	.word	0x3fe921fb
 801ae6c:	4002d97b 	.word	0x4002d97b
 801ae70:	3ff921fb 	.word	0x3ff921fb
 801ae74:	413921fb 	.word	0x413921fb
 801ae78:	3fe00000 	.word	0x3fe00000
 801ae7c:	0801c788 	.word	0x0801c788
 801ae80:	7fefffff 	.word	0x7fefffff
 801ae84:	ea4f 5428 	mov.w	r4, r8, asr #20
 801ae88:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 801ae8c:	ee10 0a10 	vmov	r0, s0
 801ae90:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 801ae94:	ee10 6a10 	vmov	r6, s0
 801ae98:	460f      	mov	r7, r1
 801ae9a:	f7e5 fe5d 	bl	8000b58 <__aeabi_d2iz>
 801ae9e:	f7e5 fb41 	bl	8000524 <__aeabi_i2d>
 801aea2:	4602      	mov	r2, r0
 801aea4:	460b      	mov	r3, r1
 801aea6:	4630      	mov	r0, r6
 801aea8:	4639      	mov	r1, r7
 801aeaa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801aeae:	f7e5 f9eb 	bl	8000288 <__aeabi_dsub>
 801aeb2:	4b22      	ldr	r3, [pc, #136]	; (801af3c <__ieee754_rem_pio2+0x40c>)
 801aeb4:	2200      	movs	r2, #0
 801aeb6:	f7e5 fb9f 	bl	80005f8 <__aeabi_dmul>
 801aeba:	460f      	mov	r7, r1
 801aebc:	4606      	mov	r6, r0
 801aebe:	f7e5 fe4b 	bl	8000b58 <__aeabi_d2iz>
 801aec2:	f7e5 fb2f 	bl	8000524 <__aeabi_i2d>
 801aec6:	4602      	mov	r2, r0
 801aec8:	460b      	mov	r3, r1
 801aeca:	4630      	mov	r0, r6
 801aecc:	4639      	mov	r1, r7
 801aece:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801aed2:	f7e5 f9d9 	bl	8000288 <__aeabi_dsub>
 801aed6:	4b19      	ldr	r3, [pc, #100]	; (801af3c <__ieee754_rem_pio2+0x40c>)
 801aed8:	2200      	movs	r2, #0
 801aeda:	f7e5 fb8d 	bl	80005f8 <__aeabi_dmul>
 801aede:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801aee2:	ad04      	add	r5, sp, #16
 801aee4:	f04f 0803 	mov.w	r8, #3
 801aee8:	46a9      	mov	r9, r5
 801aeea:	2600      	movs	r6, #0
 801aeec:	2700      	movs	r7, #0
 801aeee:	4632      	mov	r2, r6
 801aef0:	463b      	mov	r3, r7
 801aef2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 801aef6:	46c3      	mov	fp, r8
 801aef8:	3d08      	subs	r5, #8
 801aefa:	f108 38ff 	add.w	r8, r8, #4294967295
 801aefe:	f7e5 fde3 	bl	8000ac8 <__aeabi_dcmpeq>
 801af02:	2800      	cmp	r0, #0
 801af04:	d1f3      	bne.n	801aeee <__ieee754_rem_pio2+0x3be>
 801af06:	4b0e      	ldr	r3, [pc, #56]	; (801af40 <__ieee754_rem_pio2+0x410>)
 801af08:	9301      	str	r3, [sp, #4]
 801af0a:	2302      	movs	r3, #2
 801af0c:	9300      	str	r3, [sp, #0]
 801af0e:	4622      	mov	r2, r4
 801af10:	465b      	mov	r3, fp
 801af12:	4651      	mov	r1, sl
 801af14:	4648      	mov	r0, r9
 801af16:	f000 f993 	bl	801b240 <__kernel_rem_pio2>
 801af1a:	9b02      	ldr	r3, [sp, #8]
 801af1c:	2b00      	cmp	r3, #0
 801af1e:	4683      	mov	fp, r0
 801af20:	f6bf ae46 	bge.w	801abb0 <__ieee754_rem_pio2+0x80>
 801af24:	f8da 3004 	ldr.w	r3, [sl, #4]
 801af28:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801af2c:	f8ca 3004 	str.w	r3, [sl, #4]
 801af30:	f8da 300c 	ldr.w	r3, [sl, #12]
 801af34:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801af38:	e73a      	b.n	801adb0 <__ieee754_rem_pio2+0x280>
 801af3a:	bf00      	nop
 801af3c:	41700000 	.word	0x41700000
 801af40:	0801c808 	.word	0x0801c808

0801af44 <__ieee754_sqrt>:
 801af44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801af48:	ec55 4b10 	vmov	r4, r5, d0
 801af4c:	4e56      	ldr	r6, [pc, #344]	; (801b0a8 <__ieee754_sqrt+0x164>)
 801af4e:	43ae      	bics	r6, r5
 801af50:	ee10 0a10 	vmov	r0, s0
 801af54:	ee10 3a10 	vmov	r3, s0
 801af58:	4629      	mov	r1, r5
 801af5a:	462a      	mov	r2, r5
 801af5c:	d110      	bne.n	801af80 <__ieee754_sqrt+0x3c>
 801af5e:	ee10 2a10 	vmov	r2, s0
 801af62:	462b      	mov	r3, r5
 801af64:	f7e5 fb48 	bl	80005f8 <__aeabi_dmul>
 801af68:	4602      	mov	r2, r0
 801af6a:	460b      	mov	r3, r1
 801af6c:	4620      	mov	r0, r4
 801af6e:	4629      	mov	r1, r5
 801af70:	f7e5 f98c 	bl	800028c <__adddf3>
 801af74:	4604      	mov	r4, r0
 801af76:	460d      	mov	r5, r1
 801af78:	ec45 4b10 	vmov	d0, r4, r5
 801af7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801af80:	2d00      	cmp	r5, #0
 801af82:	dc10      	bgt.n	801afa6 <__ieee754_sqrt+0x62>
 801af84:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801af88:	4330      	orrs	r0, r6
 801af8a:	d0f5      	beq.n	801af78 <__ieee754_sqrt+0x34>
 801af8c:	b15d      	cbz	r5, 801afa6 <__ieee754_sqrt+0x62>
 801af8e:	ee10 2a10 	vmov	r2, s0
 801af92:	462b      	mov	r3, r5
 801af94:	ee10 0a10 	vmov	r0, s0
 801af98:	f7e5 f976 	bl	8000288 <__aeabi_dsub>
 801af9c:	4602      	mov	r2, r0
 801af9e:	460b      	mov	r3, r1
 801afa0:	f7e5 fc54 	bl	800084c <__aeabi_ddiv>
 801afa4:	e7e6      	b.n	801af74 <__ieee754_sqrt+0x30>
 801afa6:	1509      	asrs	r1, r1, #20
 801afa8:	d076      	beq.n	801b098 <__ieee754_sqrt+0x154>
 801afaa:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801afae:	07ce      	lsls	r6, r1, #31
 801afb0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801afb4:	bf5e      	ittt	pl
 801afb6:	0fda      	lsrpl	r2, r3, #31
 801afb8:	005b      	lslpl	r3, r3, #1
 801afba:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801afbe:	0fda      	lsrs	r2, r3, #31
 801afc0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801afc4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801afc8:	2000      	movs	r0, #0
 801afca:	106d      	asrs	r5, r5, #1
 801afcc:	005b      	lsls	r3, r3, #1
 801afce:	f04f 0e16 	mov.w	lr, #22
 801afd2:	4684      	mov	ip, r0
 801afd4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801afd8:	eb0c 0401 	add.w	r4, ip, r1
 801afdc:	4294      	cmp	r4, r2
 801afde:	bfde      	ittt	le
 801afe0:	1b12      	suble	r2, r2, r4
 801afe2:	eb04 0c01 	addle.w	ip, r4, r1
 801afe6:	1840      	addle	r0, r0, r1
 801afe8:	0052      	lsls	r2, r2, #1
 801afea:	f1be 0e01 	subs.w	lr, lr, #1
 801afee:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801aff2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801aff6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801affa:	d1ed      	bne.n	801afd8 <__ieee754_sqrt+0x94>
 801affc:	4671      	mov	r1, lr
 801affe:	2720      	movs	r7, #32
 801b000:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801b004:	4562      	cmp	r2, ip
 801b006:	eb04 060e 	add.w	r6, r4, lr
 801b00a:	dc02      	bgt.n	801b012 <__ieee754_sqrt+0xce>
 801b00c:	d113      	bne.n	801b036 <__ieee754_sqrt+0xf2>
 801b00e:	429e      	cmp	r6, r3
 801b010:	d811      	bhi.n	801b036 <__ieee754_sqrt+0xf2>
 801b012:	2e00      	cmp	r6, #0
 801b014:	eb06 0e04 	add.w	lr, r6, r4
 801b018:	da43      	bge.n	801b0a2 <__ieee754_sqrt+0x15e>
 801b01a:	f1be 0f00 	cmp.w	lr, #0
 801b01e:	db40      	blt.n	801b0a2 <__ieee754_sqrt+0x15e>
 801b020:	f10c 0801 	add.w	r8, ip, #1
 801b024:	eba2 020c 	sub.w	r2, r2, ip
 801b028:	429e      	cmp	r6, r3
 801b02a:	bf88      	it	hi
 801b02c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801b030:	1b9b      	subs	r3, r3, r6
 801b032:	4421      	add	r1, r4
 801b034:	46c4      	mov	ip, r8
 801b036:	0052      	lsls	r2, r2, #1
 801b038:	3f01      	subs	r7, #1
 801b03a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801b03e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801b042:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801b046:	d1dd      	bne.n	801b004 <__ieee754_sqrt+0xc0>
 801b048:	4313      	orrs	r3, r2
 801b04a:	d006      	beq.n	801b05a <__ieee754_sqrt+0x116>
 801b04c:	1c4c      	adds	r4, r1, #1
 801b04e:	bf13      	iteet	ne
 801b050:	3101      	addne	r1, #1
 801b052:	3001      	addeq	r0, #1
 801b054:	4639      	moveq	r1, r7
 801b056:	f021 0101 	bicne.w	r1, r1, #1
 801b05a:	1043      	asrs	r3, r0, #1
 801b05c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801b060:	0849      	lsrs	r1, r1, #1
 801b062:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801b066:	07c2      	lsls	r2, r0, #31
 801b068:	bf48      	it	mi
 801b06a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801b06e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801b072:	460c      	mov	r4, r1
 801b074:	463d      	mov	r5, r7
 801b076:	e77f      	b.n	801af78 <__ieee754_sqrt+0x34>
 801b078:	0ada      	lsrs	r2, r3, #11
 801b07a:	3815      	subs	r0, #21
 801b07c:	055b      	lsls	r3, r3, #21
 801b07e:	2a00      	cmp	r2, #0
 801b080:	d0fa      	beq.n	801b078 <__ieee754_sqrt+0x134>
 801b082:	02d7      	lsls	r7, r2, #11
 801b084:	d50a      	bpl.n	801b09c <__ieee754_sqrt+0x158>
 801b086:	f1c1 0420 	rsb	r4, r1, #32
 801b08a:	fa23 f404 	lsr.w	r4, r3, r4
 801b08e:	1e4d      	subs	r5, r1, #1
 801b090:	408b      	lsls	r3, r1
 801b092:	4322      	orrs	r2, r4
 801b094:	1b41      	subs	r1, r0, r5
 801b096:	e788      	b.n	801afaa <__ieee754_sqrt+0x66>
 801b098:	4608      	mov	r0, r1
 801b09a:	e7f0      	b.n	801b07e <__ieee754_sqrt+0x13a>
 801b09c:	0052      	lsls	r2, r2, #1
 801b09e:	3101      	adds	r1, #1
 801b0a0:	e7ef      	b.n	801b082 <__ieee754_sqrt+0x13e>
 801b0a2:	46e0      	mov	r8, ip
 801b0a4:	e7be      	b.n	801b024 <__ieee754_sqrt+0xe0>
 801b0a6:	bf00      	nop
 801b0a8:	7ff00000 	.word	0x7ff00000
 801b0ac:	00000000 	.word	0x00000000

0801b0b0 <__kernel_cos>:
 801b0b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0b4:	ec57 6b10 	vmov	r6, r7, d0
 801b0b8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801b0bc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 801b0c0:	ed8d 1b00 	vstr	d1, [sp]
 801b0c4:	da07      	bge.n	801b0d6 <__kernel_cos+0x26>
 801b0c6:	ee10 0a10 	vmov	r0, s0
 801b0ca:	4639      	mov	r1, r7
 801b0cc:	f7e5 fd44 	bl	8000b58 <__aeabi_d2iz>
 801b0d0:	2800      	cmp	r0, #0
 801b0d2:	f000 8088 	beq.w	801b1e6 <__kernel_cos+0x136>
 801b0d6:	4632      	mov	r2, r6
 801b0d8:	463b      	mov	r3, r7
 801b0da:	4630      	mov	r0, r6
 801b0dc:	4639      	mov	r1, r7
 801b0de:	f7e5 fa8b 	bl	80005f8 <__aeabi_dmul>
 801b0e2:	4b51      	ldr	r3, [pc, #324]	; (801b228 <__kernel_cos+0x178>)
 801b0e4:	2200      	movs	r2, #0
 801b0e6:	4604      	mov	r4, r0
 801b0e8:	460d      	mov	r5, r1
 801b0ea:	f7e5 fa85 	bl	80005f8 <__aeabi_dmul>
 801b0ee:	a340      	add	r3, pc, #256	; (adr r3, 801b1f0 <__kernel_cos+0x140>)
 801b0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0f4:	4682      	mov	sl, r0
 801b0f6:	468b      	mov	fp, r1
 801b0f8:	4620      	mov	r0, r4
 801b0fa:	4629      	mov	r1, r5
 801b0fc:	f7e5 fa7c 	bl	80005f8 <__aeabi_dmul>
 801b100:	a33d      	add	r3, pc, #244	; (adr r3, 801b1f8 <__kernel_cos+0x148>)
 801b102:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b106:	f7e5 f8c1 	bl	800028c <__adddf3>
 801b10a:	4622      	mov	r2, r4
 801b10c:	462b      	mov	r3, r5
 801b10e:	f7e5 fa73 	bl	80005f8 <__aeabi_dmul>
 801b112:	a33b      	add	r3, pc, #236	; (adr r3, 801b200 <__kernel_cos+0x150>)
 801b114:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b118:	f7e5 f8b6 	bl	8000288 <__aeabi_dsub>
 801b11c:	4622      	mov	r2, r4
 801b11e:	462b      	mov	r3, r5
 801b120:	f7e5 fa6a 	bl	80005f8 <__aeabi_dmul>
 801b124:	a338      	add	r3, pc, #224	; (adr r3, 801b208 <__kernel_cos+0x158>)
 801b126:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b12a:	f7e5 f8af 	bl	800028c <__adddf3>
 801b12e:	4622      	mov	r2, r4
 801b130:	462b      	mov	r3, r5
 801b132:	f7e5 fa61 	bl	80005f8 <__aeabi_dmul>
 801b136:	a336      	add	r3, pc, #216	; (adr r3, 801b210 <__kernel_cos+0x160>)
 801b138:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b13c:	f7e5 f8a4 	bl	8000288 <__aeabi_dsub>
 801b140:	4622      	mov	r2, r4
 801b142:	462b      	mov	r3, r5
 801b144:	f7e5 fa58 	bl	80005f8 <__aeabi_dmul>
 801b148:	a333      	add	r3, pc, #204	; (adr r3, 801b218 <__kernel_cos+0x168>)
 801b14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b14e:	f7e5 f89d 	bl	800028c <__adddf3>
 801b152:	4622      	mov	r2, r4
 801b154:	462b      	mov	r3, r5
 801b156:	f7e5 fa4f 	bl	80005f8 <__aeabi_dmul>
 801b15a:	4622      	mov	r2, r4
 801b15c:	462b      	mov	r3, r5
 801b15e:	f7e5 fa4b 	bl	80005f8 <__aeabi_dmul>
 801b162:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b166:	4604      	mov	r4, r0
 801b168:	460d      	mov	r5, r1
 801b16a:	4630      	mov	r0, r6
 801b16c:	4639      	mov	r1, r7
 801b16e:	f7e5 fa43 	bl	80005f8 <__aeabi_dmul>
 801b172:	460b      	mov	r3, r1
 801b174:	4602      	mov	r2, r0
 801b176:	4629      	mov	r1, r5
 801b178:	4620      	mov	r0, r4
 801b17a:	f7e5 f885 	bl	8000288 <__aeabi_dsub>
 801b17e:	4b2b      	ldr	r3, [pc, #172]	; (801b22c <__kernel_cos+0x17c>)
 801b180:	4598      	cmp	r8, r3
 801b182:	4606      	mov	r6, r0
 801b184:	460f      	mov	r7, r1
 801b186:	dc10      	bgt.n	801b1aa <__kernel_cos+0xfa>
 801b188:	4602      	mov	r2, r0
 801b18a:	460b      	mov	r3, r1
 801b18c:	4650      	mov	r0, sl
 801b18e:	4659      	mov	r1, fp
 801b190:	f7e5 f87a 	bl	8000288 <__aeabi_dsub>
 801b194:	460b      	mov	r3, r1
 801b196:	4926      	ldr	r1, [pc, #152]	; (801b230 <__kernel_cos+0x180>)
 801b198:	4602      	mov	r2, r0
 801b19a:	2000      	movs	r0, #0
 801b19c:	f7e5 f874 	bl	8000288 <__aeabi_dsub>
 801b1a0:	ec41 0b10 	vmov	d0, r0, r1
 801b1a4:	b003      	add	sp, #12
 801b1a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b1aa:	4b22      	ldr	r3, [pc, #136]	; (801b234 <__kernel_cos+0x184>)
 801b1ac:	4920      	ldr	r1, [pc, #128]	; (801b230 <__kernel_cos+0x180>)
 801b1ae:	4598      	cmp	r8, r3
 801b1b0:	bfcc      	ite	gt
 801b1b2:	4d21      	ldrgt	r5, [pc, #132]	; (801b238 <__kernel_cos+0x188>)
 801b1b4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 801b1b8:	2400      	movs	r4, #0
 801b1ba:	4622      	mov	r2, r4
 801b1bc:	462b      	mov	r3, r5
 801b1be:	2000      	movs	r0, #0
 801b1c0:	f7e5 f862 	bl	8000288 <__aeabi_dsub>
 801b1c4:	4622      	mov	r2, r4
 801b1c6:	4680      	mov	r8, r0
 801b1c8:	4689      	mov	r9, r1
 801b1ca:	462b      	mov	r3, r5
 801b1cc:	4650      	mov	r0, sl
 801b1ce:	4659      	mov	r1, fp
 801b1d0:	f7e5 f85a 	bl	8000288 <__aeabi_dsub>
 801b1d4:	4632      	mov	r2, r6
 801b1d6:	463b      	mov	r3, r7
 801b1d8:	f7e5 f856 	bl	8000288 <__aeabi_dsub>
 801b1dc:	4602      	mov	r2, r0
 801b1de:	460b      	mov	r3, r1
 801b1e0:	4640      	mov	r0, r8
 801b1e2:	4649      	mov	r1, r9
 801b1e4:	e7da      	b.n	801b19c <__kernel_cos+0xec>
 801b1e6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 801b220 <__kernel_cos+0x170>
 801b1ea:	e7db      	b.n	801b1a4 <__kernel_cos+0xf4>
 801b1ec:	f3af 8000 	nop.w
 801b1f0:	be8838d4 	.word	0xbe8838d4
 801b1f4:	bda8fae9 	.word	0xbda8fae9
 801b1f8:	bdb4b1c4 	.word	0xbdb4b1c4
 801b1fc:	3e21ee9e 	.word	0x3e21ee9e
 801b200:	809c52ad 	.word	0x809c52ad
 801b204:	3e927e4f 	.word	0x3e927e4f
 801b208:	19cb1590 	.word	0x19cb1590
 801b20c:	3efa01a0 	.word	0x3efa01a0
 801b210:	16c15177 	.word	0x16c15177
 801b214:	3f56c16c 	.word	0x3f56c16c
 801b218:	5555554c 	.word	0x5555554c
 801b21c:	3fa55555 	.word	0x3fa55555
 801b220:	00000000 	.word	0x00000000
 801b224:	3ff00000 	.word	0x3ff00000
 801b228:	3fe00000 	.word	0x3fe00000
 801b22c:	3fd33332 	.word	0x3fd33332
 801b230:	3ff00000 	.word	0x3ff00000
 801b234:	3fe90000 	.word	0x3fe90000
 801b238:	3fd20000 	.word	0x3fd20000
 801b23c:	00000000 	.word	0x00000000

0801b240 <__kernel_rem_pio2>:
 801b240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b244:	ed2d 8b02 	vpush	{d8}
 801b248:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 801b24c:	f112 0f14 	cmn.w	r2, #20
 801b250:	9308      	str	r3, [sp, #32]
 801b252:	9101      	str	r1, [sp, #4]
 801b254:	4bc6      	ldr	r3, [pc, #792]	; (801b570 <__kernel_rem_pio2+0x330>)
 801b256:	99a4      	ldr	r1, [sp, #656]	; 0x290
 801b258:	9009      	str	r0, [sp, #36]	; 0x24
 801b25a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801b25e:	9304      	str	r3, [sp, #16]
 801b260:	9b08      	ldr	r3, [sp, #32]
 801b262:	f103 33ff 	add.w	r3, r3, #4294967295
 801b266:	bfa8      	it	ge
 801b268:	1ed4      	subge	r4, r2, #3
 801b26a:	9306      	str	r3, [sp, #24]
 801b26c:	bfb2      	itee	lt
 801b26e:	2400      	movlt	r4, #0
 801b270:	2318      	movge	r3, #24
 801b272:	fb94 f4f3 	sdivge	r4, r4, r3
 801b276:	f06f 0317 	mvn.w	r3, #23
 801b27a:	fb04 3303 	mla	r3, r4, r3, r3
 801b27e:	eb03 0a02 	add.w	sl, r3, r2
 801b282:	9b04      	ldr	r3, [sp, #16]
 801b284:	9a06      	ldr	r2, [sp, #24]
 801b286:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 801b560 <__kernel_rem_pio2+0x320>
 801b28a:	eb03 0802 	add.w	r8, r3, r2
 801b28e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801b290:	1aa7      	subs	r7, r4, r2
 801b292:	ae20      	add	r6, sp, #128	; 0x80
 801b294:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801b298:	2500      	movs	r5, #0
 801b29a:	4545      	cmp	r5, r8
 801b29c:	dd18      	ble.n	801b2d0 <__kernel_rem_pio2+0x90>
 801b29e:	9b08      	ldr	r3, [sp, #32]
 801b2a0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801b2a4:	aa20      	add	r2, sp, #128	; 0x80
 801b2a6:	ed9f 8bae 	vldr	d8, [pc, #696]	; 801b560 <__kernel_rem_pio2+0x320>
 801b2aa:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801b2ae:	f1c3 0301 	rsb	r3, r3, #1
 801b2b2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 801b2b6:	9307      	str	r3, [sp, #28]
 801b2b8:	9b07      	ldr	r3, [sp, #28]
 801b2ba:	9a04      	ldr	r2, [sp, #16]
 801b2bc:	4443      	add	r3, r8
 801b2be:	429a      	cmp	r2, r3
 801b2c0:	db2f      	blt.n	801b322 <__kernel_rem_pio2+0xe2>
 801b2c2:	ed8d 8b02 	vstr	d8, [sp, #8]
 801b2c6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801b2ca:	462f      	mov	r7, r5
 801b2cc:	2600      	movs	r6, #0
 801b2ce:	e01b      	b.n	801b308 <__kernel_rem_pio2+0xc8>
 801b2d0:	42ef      	cmn	r7, r5
 801b2d2:	d407      	bmi.n	801b2e4 <__kernel_rem_pio2+0xa4>
 801b2d4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801b2d8:	f7e5 f924 	bl	8000524 <__aeabi_i2d>
 801b2dc:	e8e6 0102 	strd	r0, r1, [r6], #8
 801b2e0:	3501      	adds	r5, #1
 801b2e2:	e7da      	b.n	801b29a <__kernel_rem_pio2+0x5a>
 801b2e4:	ec51 0b18 	vmov	r0, r1, d8
 801b2e8:	e7f8      	b.n	801b2dc <__kernel_rem_pio2+0x9c>
 801b2ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b2ee:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801b2f2:	f7e5 f981 	bl	80005f8 <__aeabi_dmul>
 801b2f6:	4602      	mov	r2, r0
 801b2f8:	460b      	mov	r3, r1
 801b2fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b2fe:	f7e4 ffc5 	bl	800028c <__adddf3>
 801b302:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b306:	3601      	adds	r6, #1
 801b308:	9b06      	ldr	r3, [sp, #24]
 801b30a:	429e      	cmp	r6, r3
 801b30c:	f1a7 0708 	sub.w	r7, r7, #8
 801b310:	ddeb      	ble.n	801b2ea <__kernel_rem_pio2+0xaa>
 801b312:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b316:	3508      	adds	r5, #8
 801b318:	ecab 7b02 	vstmia	fp!, {d7}
 801b31c:	f108 0801 	add.w	r8, r8, #1
 801b320:	e7ca      	b.n	801b2b8 <__kernel_rem_pio2+0x78>
 801b322:	9b04      	ldr	r3, [sp, #16]
 801b324:	aa0c      	add	r2, sp, #48	; 0x30
 801b326:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b32a:	930b      	str	r3, [sp, #44]	; 0x2c
 801b32c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801b32e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801b332:	9c04      	ldr	r4, [sp, #16]
 801b334:	930a      	str	r3, [sp, #40]	; 0x28
 801b336:	ab98      	add	r3, sp, #608	; 0x260
 801b338:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801b33c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801b340:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 801b344:	f8cd b008 	str.w	fp, [sp, #8]
 801b348:	4625      	mov	r5, r4
 801b34a:	2d00      	cmp	r5, #0
 801b34c:	dc78      	bgt.n	801b440 <__kernel_rem_pio2+0x200>
 801b34e:	ec47 6b10 	vmov	d0, r6, r7
 801b352:	4650      	mov	r0, sl
 801b354:	f000 fda0 	bl	801be98 <scalbn>
 801b358:	ec57 6b10 	vmov	r6, r7, d0
 801b35c:	2200      	movs	r2, #0
 801b35e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801b362:	ee10 0a10 	vmov	r0, s0
 801b366:	4639      	mov	r1, r7
 801b368:	f7e5 f946 	bl	80005f8 <__aeabi_dmul>
 801b36c:	ec41 0b10 	vmov	d0, r0, r1
 801b370:	f000 fd12 	bl	801bd98 <floor>
 801b374:	4b7f      	ldr	r3, [pc, #508]	; (801b574 <__kernel_rem_pio2+0x334>)
 801b376:	ec51 0b10 	vmov	r0, r1, d0
 801b37a:	2200      	movs	r2, #0
 801b37c:	f7e5 f93c 	bl	80005f8 <__aeabi_dmul>
 801b380:	4602      	mov	r2, r0
 801b382:	460b      	mov	r3, r1
 801b384:	4630      	mov	r0, r6
 801b386:	4639      	mov	r1, r7
 801b388:	f7e4 ff7e 	bl	8000288 <__aeabi_dsub>
 801b38c:	460f      	mov	r7, r1
 801b38e:	4606      	mov	r6, r0
 801b390:	f7e5 fbe2 	bl	8000b58 <__aeabi_d2iz>
 801b394:	9007      	str	r0, [sp, #28]
 801b396:	f7e5 f8c5 	bl	8000524 <__aeabi_i2d>
 801b39a:	4602      	mov	r2, r0
 801b39c:	460b      	mov	r3, r1
 801b39e:	4630      	mov	r0, r6
 801b3a0:	4639      	mov	r1, r7
 801b3a2:	f7e4 ff71 	bl	8000288 <__aeabi_dsub>
 801b3a6:	f1ba 0f00 	cmp.w	sl, #0
 801b3aa:	4606      	mov	r6, r0
 801b3ac:	460f      	mov	r7, r1
 801b3ae:	dd70      	ble.n	801b492 <__kernel_rem_pio2+0x252>
 801b3b0:	1e62      	subs	r2, r4, #1
 801b3b2:	ab0c      	add	r3, sp, #48	; 0x30
 801b3b4:	9d07      	ldr	r5, [sp, #28]
 801b3b6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801b3ba:	f1ca 0118 	rsb	r1, sl, #24
 801b3be:	fa40 f301 	asr.w	r3, r0, r1
 801b3c2:	441d      	add	r5, r3
 801b3c4:	408b      	lsls	r3, r1
 801b3c6:	1ac0      	subs	r0, r0, r3
 801b3c8:	ab0c      	add	r3, sp, #48	; 0x30
 801b3ca:	9507      	str	r5, [sp, #28]
 801b3cc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801b3d0:	f1ca 0317 	rsb	r3, sl, #23
 801b3d4:	fa40 f303 	asr.w	r3, r0, r3
 801b3d8:	9302      	str	r3, [sp, #8]
 801b3da:	9b02      	ldr	r3, [sp, #8]
 801b3dc:	2b00      	cmp	r3, #0
 801b3de:	dd66      	ble.n	801b4ae <__kernel_rem_pio2+0x26e>
 801b3e0:	9b07      	ldr	r3, [sp, #28]
 801b3e2:	2200      	movs	r2, #0
 801b3e4:	3301      	adds	r3, #1
 801b3e6:	9307      	str	r3, [sp, #28]
 801b3e8:	4615      	mov	r5, r2
 801b3ea:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801b3ee:	4294      	cmp	r4, r2
 801b3f0:	f300 8099 	bgt.w	801b526 <__kernel_rem_pio2+0x2e6>
 801b3f4:	f1ba 0f00 	cmp.w	sl, #0
 801b3f8:	dd07      	ble.n	801b40a <__kernel_rem_pio2+0x1ca>
 801b3fa:	f1ba 0f01 	cmp.w	sl, #1
 801b3fe:	f000 80a5 	beq.w	801b54c <__kernel_rem_pio2+0x30c>
 801b402:	f1ba 0f02 	cmp.w	sl, #2
 801b406:	f000 80c1 	beq.w	801b58c <__kernel_rem_pio2+0x34c>
 801b40a:	9b02      	ldr	r3, [sp, #8]
 801b40c:	2b02      	cmp	r3, #2
 801b40e:	d14e      	bne.n	801b4ae <__kernel_rem_pio2+0x26e>
 801b410:	4632      	mov	r2, r6
 801b412:	463b      	mov	r3, r7
 801b414:	4958      	ldr	r1, [pc, #352]	; (801b578 <__kernel_rem_pio2+0x338>)
 801b416:	2000      	movs	r0, #0
 801b418:	f7e4 ff36 	bl	8000288 <__aeabi_dsub>
 801b41c:	4606      	mov	r6, r0
 801b41e:	460f      	mov	r7, r1
 801b420:	2d00      	cmp	r5, #0
 801b422:	d044      	beq.n	801b4ae <__kernel_rem_pio2+0x26e>
 801b424:	4650      	mov	r0, sl
 801b426:	ed9f 0b50 	vldr	d0, [pc, #320]	; 801b568 <__kernel_rem_pio2+0x328>
 801b42a:	f000 fd35 	bl	801be98 <scalbn>
 801b42e:	4630      	mov	r0, r6
 801b430:	4639      	mov	r1, r7
 801b432:	ec53 2b10 	vmov	r2, r3, d0
 801b436:	f7e4 ff27 	bl	8000288 <__aeabi_dsub>
 801b43a:	4606      	mov	r6, r0
 801b43c:	460f      	mov	r7, r1
 801b43e:	e036      	b.n	801b4ae <__kernel_rem_pio2+0x26e>
 801b440:	4b4e      	ldr	r3, [pc, #312]	; (801b57c <__kernel_rem_pio2+0x33c>)
 801b442:	2200      	movs	r2, #0
 801b444:	4630      	mov	r0, r6
 801b446:	4639      	mov	r1, r7
 801b448:	f7e5 f8d6 	bl	80005f8 <__aeabi_dmul>
 801b44c:	f7e5 fb84 	bl	8000b58 <__aeabi_d2iz>
 801b450:	f7e5 f868 	bl	8000524 <__aeabi_i2d>
 801b454:	4b4a      	ldr	r3, [pc, #296]	; (801b580 <__kernel_rem_pio2+0x340>)
 801b456:	2200      	movs	r2, #0
 801b458:	4680      	mov	r8, r0
 801b45a:	4689      	mov	r9, r1
 801b45c:	f7e5 f8cc 	bl	80005f8 <__aeabi_dmul>
 801b460:	4602      	mov	r2, r0
 801b462:	460b      	mov	r3, r1
 801b464:	4630      	mov	r0, r6
 801b466:	4639      	mov	r1, r7
 801b468:	f7e4 ff0e 	bl	8000288 <__aeabi_dsub>
 801b46c:	f7e5 fb74 	bl	8000b58 <__aeabi_d2iz>
 801b470:	9b02      	ldr	r3, [sp, #8]
 801b472:	f843 0b04 	str.w	r0, [r3], #4
 801b476:	3d01      	subs	r5, #1
 801b478:	9302      	str	r3, [sp, #8]
 801b47a:	ab70      	add	r3, sp, #448	; 0x1c0
 801b47c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801b480:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b484:	4640      	mov	r0, r8
 801b486:	4649      	mov	r1, r9
 801b488:	f7e4 ff00 	bl	800028c <__adddf3>
 801b48c:	4606      	mov	r6, r0
 801b48e:	460f      	mov	r7, r1
 801b490:	e75b      	b.n	801b34a <__kernel_rem_pio2+0x10a>
 801b492:	d105      	bne.n	801b4a0 <__kernel_rem_pio2+0x260>
 801b494:	1e63      	subs	r3, r4, #1
 801b496:	aa0c      	add	r2, sp, #48	; 0x30
 801b498:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801b49c:	15c3      	asrs	r3, r0, #23
 801b49e:	e79b      	b.n	801b3d8 <__kernel_rem_pio2+0x198>
 801b4a0:	4b38      	ldr	r3, [pc, #224]	; (801b584 <__kernel_rem_pio2+0x344>)
 801b4a2:	2200      	movs	r2, #0
 801b4a4:	f7e5 fb2e 	bl	8000b04 <__aeabi_dcmpge>
 801b4a8:	2800      	cmp	r0, #0
 801b4aa:	d139      	bne.n	801b520 <__kernel_rem_pio2+0x2e0>
 801b4ac:	9002      	str	r0, [sp, #8]
 801b4ae:	2200      	movs	r2, #0
 801b4b0:	2300      	movs	r3, #0
 801b4b2:	4630      	mov	r0, r6
 801b4b4:	4639      	mov	r1, r7
 801b4b6:	f7e5 fb07 	bl	8000ac8 <__aeabi_dcmpeq>
 801b4ba:	2800      	cmp	r0, #0
 801b4bc:	f000 80b4 	beq.w	801b628 <__kernel_rem_pio2+0x3e8>
 801b4c0:	f104 3bff 	add.w	fp, r4, #4294967295
 801b4c4:	465b      	mov	r3, fp
 801b4c6:	2200      	movs	r2, #0
 801b4c8:	9904      	ldr	r1, [sp, #16]
 801b4ca:	428b      	cmp	r3, r1
 801b4cc:	da65      	bge.n	801b59a <__kernel_rem_pio2+0x35a>
 801b4ce:	2a00      	cmp	r2, #0
 801b4d0:	d07b      	beq.n	801b5ca <__kernel_rem_pio2+0x38a>
 801b4d2:	ab0c      	add	r3, sp, #48	; 0x30
 801b4d4:	f1aa 0a18 	sub.w	sl, sl, #24
 801b4d8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801b4dc:	2b00      	cmp	r3, #0
 801b4de:	f000 80a0 	beq.w	801b622 <__kernel_rem_pio2+0x3e2>
 801b4e2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 801b568 <__kernel_rem_pio2+0x328>
 801b4e6:	4650      	mov	r0, sl
 801b4e8:	f000 fcd6 	bl	801be98 <scalbn>
 801b4ec:	4f23      	ldr	r7, [pc, #140]	; (801b57c <__kernel_rem_pio2+0x33c>)
 801b4ee:	ec55 4b10 	vmov	r4, r5, d0
 801b4f2:	46d8      	mov	r8, fp
 801b4f4:	2600      	movs	r6, #0
 801b4f6:	f1b8 0f00 	cmp.w	r8, #0
 801b4fa:	f280 80cf 	bge.w	801b69c <__kernel_rem_pio2+0x45c>
 801b4fe:	ed9f 8b18 	vldr	d8, [pc, #96]	; 801b560 <__kernel_rem_pio2+0x320>
 801b502:	465f      	mov	r7, fp
 801b504:	f04f 0800 	mov.w	r8, #0
 801b508:	2f00      	cmp	r7, #0
 801b50a:	f2c0 80fd 	blt.w	801b708 <__kernel_rem_pio2+0x4c8>
 801b50e:	ab70      	add	r3, sp, #448	; 0x1c0
 801b510:	f8df a074 	ldr.w	sl, [pc, #116]	; 801b588 <__kernel_rem_pio2+0x348>
 801b514:	ec55 4b18 	vmov	r4, r5, d8
 801b518:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 801b51c:	2600      	movs	r6, #0
 801b51e:	e0e5      	b.n	801b6ec <__kernel_rem_pio2+0x4ac>
 801b520:	2302      	movs	r3, #2
 801b522:	9302      	str	r3, [sp, #8]
 801b524:	e75c      	b.n	801b3e0 <__kernel_rem_pio2+0x1a0>
 801b526:	f8db 3000 	ldr.w	r3, [fp]
 801b52a:	b955      	cbnz	r5, 801b542 <__kernel_rem_pio2+0x302>
 801b52c:	b123      	cbz	r3, 801b538 <__kernel_rem_pio2+0x2f8>
 801b52e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801b532:	f8cb 3000 	str.w	r3, [fp]
 801b536:	2301      	movs	r3, #1
 801b538:	3201      	adds	r2, #1
 801b53a:	f10b 0b04 	add.w	fp, fp, #4
 801b53e:	461d      	mov	r5, r3
 801b540:	e755      	b.n	801b3ee <__kernel_rem_pio2+0x1ae>
 801b542:	1acb      	subs	r3, r1, r3
 801b544:	f8cb 3000 	str.w	r3, [fp]
 801b548:	462b      	mov	r3, r5
 801b54a:	e7f5      	b.n	801b538 <__kernel_rem_pio2+0x2f8>
 801b54c:	1e62      	subs	r2, r4, #1
 801b54e:	ab0c      	add	r3, sp, #48	; 0x30
 801b550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b554:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801b558:	a90c      	add	r1, sp, #48	; 0x30
 801b55a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801b55e:	e754      	b.n	801b40a <__kernel_rem_pio2+0x1ca>
	...
 801b56c:	3ff00000 	.word	0x3ff00000
 801b570:	0801c950 	.word	0x0801c950
 801b574:	40200000 	.word	0x40200000
 801b578:	3ff00000 	.word	0x3ff00000
 801b57c:	3e700000 	.word	0x3e700000
 801b580:	41700000 	.word	0x41700000
 801b584:	3fe00000 	.word	0x3fe00000
 801b588:	0801c910 	.word	0x0801c910
 801b58c:	1e62      	subs	r2, r4, #1
 801b58e:	ab0c      	add	r3, sp, #48	; 0x30
 801b590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b594:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801b598:	e7de      	b.n	801b558 <__kernel_rem_pio2+0x318>
 801b59a:	a90c      	add	r1, sp, #48	; 0x30
 801b59c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801b5a0:	3b01      	subs	r3, #1
 801b5a2:	430a      	orrs	r2, r1
 801b5a4:	e790      	b.n	801b4c8 <__kernel_rem_pio2+0x288>
 801b5a6:	3301      	adds	r3, #1
 801b5a8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801b5ac:	2900      	cmp	r1, #0
 801b5ae:	d0fa      	beq.n	801b5a6 <__kernel_rem_pio2+0x366>
 801b5b0:	9a08      	ldr	r2, [sp, #32]
 801b5b2:	18e3      	adds	r3, r4, r3
 801b5b4:	18a6      	adds	r6, r4, r2
 801b5b6:	aa20      	add	r2, sp, #128	; 0x80
 801b5b8:	1c65      	adds	r5, r4, #1
 801b5ba:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801b5be:	9302      	str	r3, [sp, #8]
 801b5c0:	9b02      	ldr	r3, [sp, #8]
 801b5c2:	42ab      	cmp	r3, r5
 801b5c4:	da04      	bge.n	801b5d0 <__kernel_rem_pio2+0x390>
 801b5c6:	461c      	mov	r4, r3
 801b5c8:	e6b5      	b.n	801b336 <__kernel_rem_pio2+0xf6>
 801b5ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b5cc:	2301      	movs	r3, #1
 801b5ce:	e7eb      	b.n	801b5a8 <__kernel_rem_pio2+0x368>
 801b5d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b5d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801b5d6:	f7e4 ffa5 	bl	8000524 <__aeabi_i2d>
 801b5da:	e8e6 0102 	strd	r0, r1, [r6], #8
 801b5de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b5e0:	46b3      	mov	fp, r6
 801b5e2:	461c      	mov	r4, r3
 801b5e4:	2700      	movs	r7, #0
 801b5e6:	f04f 0800 	mov.w	r8, #0
 801b5ea:	f04f 0900 	mov.w	r9, #0
 801b5ee:	9b06      	ldr	r3, [sp, #24]
 801b5f0:	429f      	cmp	r7, r3
 801b5f2:	dd06      	ble.n	801b602 <__kernel_rem_pio2+0x3c2>
 801b5f4:	ab70      	add	r3, sp, #448	; 0x1c0
 801b5f6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801b5fa:	e9c3 8900 	strd	r8, r9, [r3]
 801b5fe:	3501      	adds	r5, #1
 801b600:	e7de      	b.n	801b5c0 <__kernel_rem_pio2+0x380>
 801b602:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801b606:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801b60a:	f7e4 fff5 	bl	80005f8 <__aeabi_dmul>
 801b60e:	4602      	mov	r2, r0
 801b610:	460b      	mov	r3, r1
 801b612:	4640      	mov	r0, r8
 801b614:	4649      	mov	r1, r9
 801b616:	f7e4 fe39 	bl	800028c <__adddf3>
 801b61a:	3701      	adds	r7, #1
 801b61c:	4680      	mov	r8, r0
 801b61e:	4689      	mov	r9, r1
 801b620:	e7e5      	b.n	801b5ee <__kernel_rem_pio2+0x3ae>
 801b622:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b626:	e754      	b.n	801b4d2 <__kernel_rem_pio2+0x292>
 801b628:	ec47 6b10 	vmov	d0, r6, r7
 801b62c:	f1ca 0000 	rsb	r0, sl, #0
 801b630:	f000 fc32 	bl	801be98 <scalbn>
 801b634:	ec57 6b10 	vmov	r6, r7, d0
 801b638:	4b9f      	ldr	r3, [pc, #636]	; (801b8b8 <__kernel_rem_pio2+0x678>)
 801b63a:	ee10 0a10 	vmov	r0, s0
 801b63e:	2200      	movs	r2, #0
 801b640:	4639      	mov	r1, r7
 801b642:	f7e5 fa5f 	bl	8000b04 <__aeabi_dcmpge>
 801b646:	b300      	cbz	r0, 801b68a <__kernel_rem_pio2+0x44a>
 801b648:	4b9c      	ldr	r3, [pc, #624]	; (801b8bc <__kernel_rem_pio2+0x67c>)
 801b64a:	2200      	movs	r2, #0
 801b64c:	4630      	mov	r0, r6
 801b64e:	4639      	mov	r1, r7
 801b650:	f7e4 ffd2 	bl	80005f8 <__aeabi_dmul>
 801b654:	f7e5 fa80 	bl	8000b58 <__aeabi_d2iz>
 801b658:	4605      	mov	r5, r0
 801b65a:	f7e4 ff63 	bl	8000524 <__aeabi_i2d>
 801b65e:	4b96      	ldr	r3, [pc, #600]	; (801b8b8 <__kernel_rem_pio2+0x678>)
 801b660:	2200      	movs	r2, #0
 801b662:	f7e4 ffc9 	bl	80005f8 <__aeabi_dmul>
 801b666:	460b      	mov	r3, r1
 801b668:	4602      	mov	r2, r0
 801b66a:	4639      	mov	r1, r7
 801b66c:	4630      	mov	r0, r6
 801b66e:	f7e4 fe0b 	bl	8000288 <__aeabi_dsub>
 801b672:	f7e5 fa71 	bl	8000b58 <__aeabi_d2iz>
 801b676:	f104 0b01 	add.w	fp, r4, #1
 801b67a:	ab0c      	add	r3, sp, #48	; 0x30
 801b67c:	f10a 0a18 	add.w	sl, sl, #24
 801b680:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801b684:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 801b688:	e72b      	b.n	801b4e2 <__kernel_rem_pio2+0x2a2>
 801b68a:	4630      	mov	r0, r6
 801b68c:	4639      	mov	r1, r7
 801b68e:	f7e5 fa63 	bl	8000b58 <__aeabi_d2iz>
 801b692:	ab0c      	add	r3, sp, #48	; 0x30
 801b694:	46a3      	mov	fp, r4
 801b696:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801b69a:	e722      	b.n	801b4e2 <__kernel_rem_pio2+0x2a2>
 801b69c:	ab70      	add	r3, sp, #448	; 0x1c0
 801b69e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 801b6a2:	ab0c      	add	r3, sp, #48	; 0x30
 801b6a4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801b6a8:	f7e4 ff3c 	bl	8000524 <__aeabi_i2d>
 801b6ac:	4622      	mov	r2, r4
 801b6ae:	462b      	mov	r3, r5
 801b6b0:	f7e4 ffa2 	bl	80005f8 <__aeabi_dmul>
 801b6b4:	4632      	mov	r2, r6
 801b6b6:	e9c9 0100 	strd	r0, r1, [r9]
 801b6ba:	463b      	mov	r3, r7
 801b6bc:	4620      	mov	r0, r4
 801b6be:	4629      	mov	r1, r5
 801b6c0:	f7e4 ff9a 	bl	80005f8 <__aeabi_dmul>
 801b6c4:	f108 38ff 	add.w	r8, r8, #4294967295
 801b6c8:	4604      	mov	r4, r0
 801b6ca:	460d      	mov	r5, r1
 801b6cc:	e713      	b.n	801b4f6 <__kernel_rem_pio2+0x2b6>
 801b6ce:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 801b6d2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 801b6d6:	f7e4 ff8f 	bl	80005f8 <__aeabi_dmul>
 801b6da:	4602      	mov	r2, r0
 801b6dc:	460b      	mov	r3, r1
 801b6de:	4620      	mov	r0, r4
 801b6e0:	4629      	mov	r1, r5
 801b6e2:	f7e4 fdd3 	bl	800028c <__adddf3>
 801b6e6:	3601      	adds	r6, #1
 801b6e8:	4604      	mov	r4, r0
 801b6ea:	460d      	mov	r5, r1
 801b6ec:	9b04      	ldr	r3, [sp, #16]
 801b6ee:	429e      	cmp	r6, r3
 801b6f0:	dc01      	bgt.n	801b6f6 <__kernel_rem_pio2+0x4b6>
 801b6f2:	45b0      	cmp	r8, r6
 801b6f4:	daeb      	bge.n	801b6ce <__kernel_rem_pio2+0x48e>
 801b6f6:	ab48      	add	r3, sp, #288	; 0x120
 801b6f8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801b6fc:	e9c3 4500 	strd	r4, r5, [r3]
 801b700:	3f01      	subs	r7, #1
 801b702:	f108 0801 	add.w	r8, r8, #1
 801b706:	e6ff      	b.n	801b508 <__kernel_rem_pio2+0x2c8>
 801b708:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801b70a:	2b02      	cmp	r3, #2
 801b70c:	dc0b      	bgt.n	801b726 <__kernel_rem_pio2+0x4e6>
 801b70e:	2b00      	cmp	r3, #0
 801b710:	dc6e      	bgt.n	801b7f0 <__kernel_rem_pio2+0x5b0>
 801b712:	d045      	beq.n	801b7a0 <__kernel_rem_pio2+0x560>
 801b714:	9b07      	ldr	r3, [sp, #28]
 801b716:	f003 0007 	and.w	r0, r3, #7
 801b71a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801b71e:	ecbd 8b02 	vpop	{d8}
 801b722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b726:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801b728:	2b03      	cmp	r3, #3
 801b72a:	d1f3      	bne.n	801b714 <__kernel_rem_pio2+0x4d4>
 801b72c:	ab48      	add	r3, sp, #288	; 0x120
 801b72e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 801b732:	46d0      	mov	r8, sl
 801b734:	46d9      	mov	r9, fp
 801b736:	f1b9 0f00 	cmp.w	r9, #0
 801b73a:	f1a8 0808 	sub.w	r8, r8, #8
 801b73e:	dc64      	bgt.n	801b80a <__kernel_rem_pio2+0x5ca>
 801b740:	465c      	mov	r4, fp
 801b742:	2c01      	cmp	r4, #1
 801b744:	f1aa 0a08 	sub.w	sl, sl, #8
 801b748:	dc7e      	bgt.n	801b848 <__kernel_rem_pio2+0x608>
 801b74a:	2000      	movs	r0, #0
 801b74c:	2100      	movs	r1, #0
 801b74e:	f1bb 0f01 	cmp.w	fp, #1
 801b752:	f300 8097 	bgt.w	801b884 <__kernel_rem_pio2+0x644>
 801b756:	9b02      	ldr	r3, [sp, #8]
 801b758:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 801b75c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 801b760:	2b00      	cmp	r3, #0
 801b762:	f040 8099 	bne.w	801b898 <__kernel_rem_pio2+0x658>
 801b766:	9b01      	ldr	r3, [sp, #4]
 801b768:	e9c3 5600 	strd	r5, r6, [r3]
 801b76c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 801b770:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801b774:	e7ce      	b.n	801b714 <__kernel_rem_pio2+0x4d4>
 801b776:	ab48      	add	r3, sp, #288	; 0x120
 801b778:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801b77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b780:	f7e4 fd84 	bl	800028c <__adddf3>
 801b784:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b788:	f1bb 0f00 	cmp.w	fp, #0
 801b78c:	daf3      	bge.n	801b776 <__kernel_rem_pio2+0x536>
 801b78e:	9b02      	ldr	r3, [sp, #8]
 801b790:	b113      	cbz	r3, 801b798 <__kernel_rem_pio2+0x558>
 801b792:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b796:	4619      	mov	r1, r3
 801b798:	9b01      	ldr	r3, [sp, #4]
 801b79a:	e9c3 0100 	strd	r0, r1, [r3]
 801b79e:	e7b9      	b.n	801b714 <__kernel_rem_pio2+0x4d4>
 801b7a0:	2000      	movs	r0, #0
 801b7a2:	2100      	movs	r1, #0
 801b7a4:	e7f0      	b.n	801b788 <__kernel_rem_pio2+0x548>
 801b7a6:	ab48      	add	r3, sp, #288	; 0x120
 801b7a8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801b7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b7b0:	f7e4 fd6c 	bl	800028c <__adddf3>
 801b7b4:	3c01      	subs	r4, #1
 801b7b6:	2c00      	cmp	r4, #0
 801b7b8:	daf5      	bge.n	801b7a6 <__kernel_rem_pio2+0x566>
 801b7ba:	9b02      	ldr	r3, [sp, #8]
 801b7bc:	b1e3      	cbz	r3, 801b7f8 <__kernel_rem_pio2+0x5b8>
 801b7be:	4602      	mov	r2, r0
 801b7c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b7c4:	9c01      	ldr	r4, [sp, #4]
 801b7c6:	e9c4 2300 	strd	r2, r3, [r4]
 801b7ca:	4602      	mov	r2, r0
 801b7cc:	460b      	mov	r3, r1
 801b7ce:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 801b7d2:	f7e4 fd59 	bl	8000288 <__aeabi_dsub>
 801b7d6:	ad4a      	add	r5, sp, #296	; 0x128
 801b7d8:	2401      	movs	r4, #1
 801b7da:	45a3      	cmp	fp, r4
 801b7dc:	da0f      	bge.n	801b7fe <__kernel_rem_pio2+0x5be>
 801b7de:	9b02      	ldr	r3, [sp, #8]
 801b7e0:	b113      	cbz	r3, 801b7e8 <__kernel_rem_pio2+0x5a8>
 801b7e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b7e6:	4619      	mov	r1, r3
 801b7e8:	9b01      	ldr	r3, [sp, #4]
 801b7ea:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801b7ee:	e791      	b.n	801b714 <__kernel_rem_pio2+0x4d4>
 801b7f0:	465c      	mov	r4, fp
 801b7f2:	2000      	movs	r0, #0
 801b7f4:	2100      	movs	r1, #0
 801b7f6:	e7de      	b.n	801b7b6 <__kernel_rem_pio2+0x576>
 801b7f8:	4602      	mov	r2, r0
 801b7fa:	460b      	mov	r3, r1
 801b7fc:	e7e2      	b.n	801b7c4 <__kernel_rem_pio2+0x584>
 801b7fe:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801b802:	f7e4 fd43 	bl	800028c <__adddf3>
 801b806:	3401      	adds	r4, #1
 801b808:	e7e7      	b.n	801b7da <__kernel_rem_pio2+0x59a>
 801b80a:	e9d8 4500 	ldrd	r4, r5, [r8]
 801b80e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 801b812:	4620      	mov	r0, r4
 801b814:	4632      	mov	r2, r6
 801b816:	463b      	mov	r3, r7
 801b818:	4629      	mov	r1, r5
 801b81a:	f7e4 fd37 	bl	800028c <__adddf3>
 801b81e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b822:	4602      	mov	r2, r0
 801b824:	460b      	mov	r3, r1
 801b826:	4620      	mov	r0, r4
 801b828:	4629      	mov	r1, r5
 801b82a:	f7e4 fd2d 	bl	8000288 <__aeabi_dsub>
 801b82e:	4632      	mov	r2, r6
 801b830:	463b      	mov	r3, r7
 801b832:	f7e4 fd2b 	bl	800028c <__adddf3>
 801b836:	ed9d 7b04 	vldr	d7, [sp, #16]
 801b83a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 801b83e:	ed88 7b00 	vstr	d7, [r8]
 801b842:	f109 39ff 	add.w	r9, r9, #4294967295
 801b846:	e776      	b.n	801b736 <__kernel_rem_pio2+0x4f6>
 801b848:	e9da 8900 	ldrd	r8, r9, [sl]
 801b84c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801b850:	4640      	mov	r0, r8
 801b852:	4632      	mov	r2, r6
 801b854:	463b      	mov	r3, r7
 801b856:	4649      	mov	r1, r9
 801b858:	f7e4 fd18 	bl	800028c <__adddf3>
 801b85c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b860:	4602      	mov	r2, r0
 801b862:	460b      	mov	r3, r1
 801b864:	4640      	mov	r0, r8
 801b866:	4649      	mov	r1, r9
 801b868:	f7e4 fd0e 	bl	8000288 <__aeabi_dsub>
 801b86c:	4632      	mov	r2, r6
 801b86e:	463b      	mov	r3, r7
 801b870:	f7e4 fd0c 	bl	800028c <__adddf3>
 801b874:	ed9d 7b04 	vldr	d7, [sp, #16]
 801b878:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801b87c:	ed8a 7b00 	vstr	d7, [sl]
 801b880:	3c01      	subs	r4, #1
 801b882:	e75e      	b.n	801b742 <__kernel_rem_pio2+0x502>
 801b884:	ab48      	add	r3, sp, #288	; 0x120
 801b886:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801b88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b88e:	f7e4 fcfd 	bl	800028c <__adddf3>
 801b892:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b896:	e75a      	b.n	801b74e <__kernel_rem_pio2+0x50e>
 801b898:	9b01      	ldr	r3, [sp, #4]
 801b89a:	9a01      	ldr	r2, [sp, #4]
 801b89c:	601d      	str	r5, [r3, #0]
 801b89e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 801b8a2:	605c      	str	r4, [r3, #4]
 801b8a4:	609f      	str	r7, [r3, #8]
 801b8a6:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 801b8aa:	60d3      	str	r3, [r2, #12]
 801b8ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b8b0:	6110      	str	r0, [r2, #16]
 801b8b2:	6153      	str	r3, [r2, #20]
 801b8b4:	e72e      	b.n	801b714 <__kernel_rem_pio2+0x4d4>
 801b8b6:	bf00      	nop
 801b8b8:	41700000 	.word	0x41700000
 801b8bc:	3e700000 	.word	0x3e700000

0801b8c0 <__kernel_sin>:
 801b8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b8c4:	ed2d 8b04 	vpush	{d8-d9}
 801b8c8:	eeb0 8a41 	vmov.f32	s16, s2
 801b8cc:	eef0 8a61 	vmov.f32	s17, s3
 801b8d0:	ec55 4b10 	vmov	r4, r5, d0
 801b8d4:	b083      	sub	sp, #12
 801b8d6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801b8da:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801b8de:	9001      	str	r0, [sp, #4]
 801b8e0:	da06      	bge.n	801b8f0 <__kernel_sin+0x30>
 801b8e2:	ee10 0a10 	vmov	r0, s0
 801b8e6:	4629      	mov	r1, r5
 801b8e8:	f7e5 f936 	bl	8000b58 <__aeabi_d2iz>
 801b8ec:	2800      	cmp	r0, #0
 801b8ee:	d051      	beq.n	801b994 <__kernel_sin+0xd4>
 801b8f0:	4622      	mov	r2, r4
 801b8f2:	462b      	mov	r3, r5
 801b8f4:	4620      	mov	r0, r4
 801b8f6:	4629      	mov	r1, r5
 801b8f8:	f7e4 fe7e 	bl	80005f8 <__aeabi_dmul>
 801b8fc:	4682      	mov	sl, r0
 801b8fe:	468b      	mov	fp, r1
 801b900:	4602      	mov	r2, r0
 801b902:	460b      	mov	r3, r1
 801b904:	4620      	mov	r0, r4
 801b906:	4629      	mov	r1, r5
 801b908:	f7e4 fe76 	bl	80005f8 <__aeabi_dmul>
 801b90c:	a341      	add	r3, pc, #260	; (adr r3, 801ba14 <__kernel_sin+0x154>)
 801b90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b912:	4680      	mov	r8, r0
 801b914:	4689      	mov	r9, r1
 801b916:	4650      	mov	r0, sl
 801b918:	4659      	mov	r1, fp
 801b91a:	f7e4 fe6d 	bl	80005f8 <__aeabi_dmul>
 801b91e:	a33f      	add	r3, pc, #252	; (adr r3, 801ba1c <__kernel_sin+0x15c>)
 801b920:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b924:	f7e4 fcb0 	bl	8000288 <__aeabi_dsub>
 801b928:	4652      	mov	r2, sl
 801b92a:	465b      	mov	r3, fp
 801b92c:	f7e4 fe64 	bl	80005f8 <__aeabi_dmul>
 801b930:	a33c      	add	r3, pc, #240	; (adr r3, 801ba24 <__kernel_sin+0x164>)
 801b932:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b936:	f7e4 fca9 	bl	800028c <__adddf3>
 801b93a:	4652      	mov	r2, sl
 801b93c:	465b      	mov	r3, fp
 801b93e:	f7e4 fe5b 	bl	80005f8 <__aeabi_dmul>
 801b942:	a33a      	add	r3, pc, #232	; (adr r3, 801ba2c <__kernel_sin+0x16c>)
 801b944:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b948:	f7e4 fc9e 	bl	8000288 <__aeabi_dsub>
 801b94c:	4652      	mov	r2, sl
 801b94e:	465b      	mov	r3, fp
 801b950:	f7e4 fe52 	bl	80005f8 <__aeabi_dmul>
 801b954:	a337      	add	r3, pc, #220	; (adr r3, 801ba34 <__kernel_sin+0x174>)
 801b956:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b95a:	f7e4 fc97 	bl	800028c <__adddf3>
 801b95e:	9b01      	ldr	r3, [sp, #4]
 801b960:	4606      	mov	r6, r0
 801b962:	460f      	mov	r7, r1
 801b964:	b9eb      	cbnz	r3, 801b9a2 <__kernel_sin+0xe2>
 801b966:	4602      	mov	r2, r0
 801b968:	460b      	mov	r3, r1
 801b96a:	4650      	mov	r0, sl
 801b96c:	4659      	mov	r1, fp
 801b96e:	f7e4 fe43 	bl	80005f8 <__aeabi_dmul>
 801b972:	a325      	add	r3, pc, #148	; (adr r3, 801ba08 <__kernel_sin+0x148>)
 801b974:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b978:	f7e4 fc86 	bl	8000288 <__aeabi_dsub>
 801b97c:	4642      	mov	r2, r8
 801b97e:	464b      	mov	r3, r9
 801b980:	f7e4 fe3a 	bl	80005f8 <__aeabi_dmul>
 801b984:	4602      	mov	r2, r0
 801b986:	460b      	mov	r3, r1
 801b988:	4620      	mov	r0, r4
 801b98a:	4629      	mov	r1, r5
 801b98c:	f7e4 fc7e 	bl	800028c <__adddf3>
 801b990:	4604      	mov	r4, r0
 801b992:	460d      	mov	r5, r1
 801b994:	ec45 4b10 	vmov	d0, r4, r5
 801b998:	b003      	add	sp, #12
 801b99a:	ecbd 8b04 	vpop	{d8-d9}
 801b99e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b9a2:	4b1b      	ldr	r3, [pc, #108]	; (801ba10 <__kernel_sin+0x150>)
 801b9a4:	ec51 0b18 	vmov	r0, r1, d8
 801b9a8:	2200      	movs	r2, #0
 801b9aa:	f7e4 fe25 	bl	80005f8 <__aeabi_dmul>
 801b9ae:	4632      	mov	r2, r6
 801b9b0:	ec41 0b19 	vmov	d9, r0, r1
 801b9b4:	463b      	mov	r3, r7
 801b9b6:	4640      	mov	r0, r8
 801b9b8:	4649      	mov	r1, r9
 801b9ba:	f7e4 fe1d 	bl	80005f8 <__aeabi_dmul>
 801b9be:	4602      	mov	r2, r0
 801b9c0:	460b      	mov	r3, r1
 801b9c2:	ec51 0b19 	vmov	r0, r1, d9
 801b9c6:	f7e4 fc5f 	bl	8000288 <__aeabi_dsub>
 801b9ca:	4652      	mov	r2, sl
 801b9cc:	465b      	mov	r3, fp
 801b9ce:	f7e4 fe13 	bl	80005f8 <__aeabi_dmul>
 801b9d2:	ec53 2b18 	vmov	r2, r3, d8
 801b9d6:	f7e4 fc57 	bl	8000288 <__aeabi_dsub>
 801b9da:	a30b      	add	r3, pc, #44	; (adr r3, 801ba08 <__kernel_sin+0x148>)
 801b9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9e0:	4606      	mov	r6, r0
 801b9e2:	460f      	mov	r7, r1
 801b9e4:	4640      	mov	r0, r8
 801b9e6:	4649      	mov	r1, r9
 801b9e8:	f7e4 fe06 	bl	80005f8 <__aeabi_dmul>
 801b9ec:	4602      	mov	r2, r0
 801b9ee:	460b      	mov	r3, r1
 801b9f0:	4630      	mov	r0, r6
 801b9f2:	4639      	mov	r1, r7
 801b9f4:	f7e4 fc4a 	bl	800028c <__adddf3>
 801b9f8:	4602      	mov	r2, r0
 801b9fa:	460b      	mov	r3, r1
 801b9fc:	4620      	mov	r0, r4
 801b9fe:	4629      	mov	r1, r5
 801ba00:	f7e4 fc42 	bl	8000288 <__aeabi_dsub>
 801ba04:	e7c4      	b.n	801b990 <__kernel_sin+0xd0>
 801ba06:	bf00      	nop
 801ba08:	55555549 	.word	0x55555549
 801ba0c:	3fc55555 	.word	0x3fc55555
 801ba10:	3fe00000 	.word	0x3fe00000
 801ba14:	5acfd57c 	.word	0x5acfd57c
 801ba18:	3de5d93a 	.word	0x3de5d93a
 801ba1c:	8a2b9ceb 	.word	0x8a2b9ceb
 801ba20:	3e5ae5e6 	.word	0x3e5ae5e6
 801ba24:	57b1fe7d 	.word	0x57b1fe7d
 801ba28:	3ec71de3 	.word	0x3ec71de3
 801ba2c:	19c161d5 	.word	0x19c161d5
 801ba30:	3f2a01a0 	.word	0x3f2a01a0
 801ba34:	1110f8a6 	.word	0x1110f8a6
 801ba38:	3f811111 	.word	0x3f811111
 801ba3c:	00000000 	.word	0x00000000

0801ba40 <atan>:
 801ba40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba44:	ec55 4b10 	vmov	r4, r5, d0
 801ba48:	4bc3      	ldr	r3, [pc, #780]	; (801bd58 <atan+0x318>)
 801ba4a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801ba4e:	429e      	cmp	r6, r3
 801ba50:	46ab      	mov	fp, r5
 801ba52:	dd18      	ble.n	801ba86 <atan+0x46>
 801ba54:	4bc1      	ldr	r3, [pc, #772]	; (801bd5c <atan+0x31c>)
 801ba56:	429e      	cmp	r6, r3
 801ba58:	dc01      	bgt.n	801ba5e <atan+0x1e>
 801ba5a:	d109      	bne.n	801ba70 <atan+0x30>
 801ba5c:	b144      	cbz	r4, 801ba70 <atan+0x30>
 801ba5e:	4622      	mov	r2, r4
 801ba60:	462b      	mov	r3, r5
 801ba62:	4620      	mov	r0, r4
 801ba64:	4629      	mov	r1, r5
 801ba66:	f7e4 fc11 	bl	800028c <__adddf3>
 801ba6a:	4604      	mov	r4, r0
 801ba6c:	460d      	mov	r5, r1
 801ba6e:	e006      	b.n	801ba7e <atan+0x3e>
 801ba70:	f1bb 0f00 	cmp.w	fp, #0
 801ba74:	f300 8131 	bgt.w	801bcda <atan+0x29a>
 801ba78:	a59b      	add	r5, pc, #620	; (adr r5, 801bce8 <atan+0x2a8>)
 801ba7a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801ba7e:	ec45 4b10 	vmov	d0, r4, r5
 801ba82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba86:	4bb6      	ldr	r3, [pc, #728]	; (801bd60 <atan+0x320>)
 801ba88:	429e      	cmp	r6, r3
 801ba8a:	dc14      	bgt.n	801bab6 <atan+0x76>
 801ba8c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801ba90:	429e      	cmp	r6, r3
 801ba92:	dc0d      	bgt.n	801bab0 <atan+0x70>
 801ba94:	a396      	add	r3, pc, #600	; (adr r3, 801bcf0 <atan+0x2b0>)
 801ba96:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba9a:	ee10 0a10 	vmov	r0, s0
 801ba9e:	4629      	mov	r1, r5
 801baa0:	f7e4 fbf4 	bl	800028c <__adddf3>
 801baa4:	4baf      	ldr	r3, [pc, #700]	; (801bd64 <atan+0x324>)
 801baa6:	2200      	movs	r2, #0
 801baa8:	f7e5 f836 	bl	8000b18 <__aeabi_dcmpgt>
 801baac:	2800      	cmp	r0, #0
 801baae:	d1e6      	bne.n	801ba7e <atan+0x3e>
 801bab0:	f04f 3aff 	mov.w	sl, #4294967295
 801bab4:	e02b      	b.n	801bb0e <atan+0xce>
 801bab6:	f000 f963 	bl	801bd80 <fabs>
 801baba:	4bab      	ldr	r3, [pc, #684]	; (801bd68 <atan+0x328>)
 801babc:	429e      	cmp	r6, r3
 801babe:	ec55 4b10 	vmov	r4, r5, d0
 801bac2:	f300 80bf 	bgt.w	801bc44 <atan+0x204>
 801bac6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801baca:	429e      	cmp	r6, r3
 801bacc:	f300 80a0 	bgt.w	801bc10 <atan+0x1d0>
 801bad0:	ee10 2a10 	vmov	r2, s0
 801bad4:	ee10 0a10 	vmov	r0, s0
 801bad8:	462b      	mov	r3, r5
 801bada:	4629      	mov	r1, r5
 801badc:	f7e4 fbd6 	bl	800028c <__adddf3>
 801bae0:	4ba0      	ldr	r3, [pc, #640]	; (801bd64 <atan+0x324>)
 801bae2:	2200      	movs	r2, #0
 801bae4:	f7e4 fbd0 	bl	8000288 <__aeabi_dsub>
 801bae8:	2200      	movs	r2, #0
 801baea:	4606      	mov	r6, r0
 801baec:	460f      	mov	r7, r1
 801baee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801baf2:	4620      	mov	r0, r4
 801baf4:	4629      	mov	r1, r5
 801baf6:	f7e4 fbc9 	bl	800028c <__adddf3>
 801bafa:	4602      	mov	r2, r0
 801bafc:	460b      	mov	r3, r1
 801bafe:	4630      	mov	r0, r6
 801bb00:	4639      	mov	r1, r7
 801bb02:	f7e4 fea3 	bl	800084c <__aeabi_ddiv>
 801bb06:	f04f 0a00 	mov.w	sl, #0
 801bb0a:	4604      	mov	r4, r0
 801bb0c:	460d      	mov	r5, r1
 801bb0e:	4622      	mov	r2, r4
 801bb10:	462b      	mov	r3, r5
 801bb12:	4620      	mov	r0, r4
 801bb14:	4629      	mov	r1, r5
 801bb16:	f7e4 fd6f 	bl	80005f8 <__aeabi_dmul>
 801bb1a:	4602      	mov	r2, r0
 801bb1c:	460b      	mov	r3, r1
 801bb1e:	4680      	mov	r8, r0
 801bb20:	4689      	mov	r9, r1
 801bb22:	f7e4 fd69 	bl	80005f8 <__aeabi_dmul>
 801bb26:	a374      	add	r3, pc, #464	; (adr r3, 801bcf8 <atan+0x2b8>)
 801bb28:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb2c:	4606      	mov	r6, r0
 801bb2e:	460f      	mov	r7, r1
 801bb30:	f7e4 fd62 	bl	80005f8 <__aeabi_dmul>
 801bb34:	a372      	add	r3, pc, #456	; (adr r3, 801bd00 <atan+0x2c0>)
 801bb36:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb3a:	f7e4 fba7 	bl	800028c <__adddf3>
 801bb3e:	4632      	mov	r2, r6
 801bb40:	463b      	mov	r3, r7
 801bb42:	f7e4 fd59 	bl	80005f8 <__aeabi_dmul>
 801bb46:	a370      	add	r3, pc, #448	; (adr r3, 801bd08 <atan+0x2c8>)
 801bb48:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb4c:	f7e4 fb9e 	bl	800028c <__adddf3>
 801bb50:	4632      	mov	r2, r6
 801bb52:	463b      	mov	r3, r7
 801bb54:	f7e4 fd50 	bl	80005f8 <__aeabi_dmul>
 801bb58:	a36d      	add	r3, pc, #436	; (adr r3, 801bd10 <atan+0x2d0>)
 801bb5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb5e:	f7e4 fb95 	bl	800028c <__adddf3>
 801bb62:	4632      	mov	r2, r6
 801bb64:	463b      	mov	r3, r7
 801bb66:	f7e4 fd47 	bl	80005f8 <__aeabi_dmul>
 801bb6a:	a36b      	add	r3, pc, #428	; (adr r3, 801bd18 <atan+0x2d8>)
 801bb6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb70:	f7e4 fb8c 	bl	800028c <__adddf3>
 801bb74:	4632      	mov	r2, r6
 801bb76:	463b      	mov	r3, r7
 801bb78:	f7e4 fd3e 	bl	80005f8 <__aeabi_dmul>
 801bb7c:	a368      	add	r3, pc, #416	; (adr r3, 801bd20 <atan+0x2e0>)
 801bb7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb82:	f7e4 fb83 	bl	800028c <__adddf3>
 801bb86:	4642      	mov	r2, r8
 801bb88:	464b      	mov	r3, r9
 801bb8a:	f7e4 fd35 	bl	80005f8 <__aeabi_dmul>
 801bb8e:	a366      	add	r3, pc, #408	; (adr r3, 801bd28 <atan+0x2e8>)
 801bb90:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb94:	4680      	mov	r8, r0
 801bb96:	4689      	mov	r9, r1
 801bb98:	4630      	mov	r0, r6
 801bb9a:	4639      	mov	r1, r7
 801bb9c:	f7e4 fd2c 	bl	80005f8 <__aeabi_dmul>
 801bba0:	a363      	add	r3, pc, #396	; (adr r3, 801bd30 <atan+0x2f0>)
 801bba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bba6:	f7e4 fb6f 	bl	8000288 <__aeabi_dsub>
 801bbaa:	4632      	mov	r2, r6
 801bbac:	463b      	mov	r3, r7
 801bbae:	f7e4 fd23 	bl	80005f8 <__aeabi_dmul>
 801bbb2:	a361      	add	r3, pc, #388	; (adr r3, 801bd38 <atan+0x2f8>)
 801bbb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bbb8:	f7e4 fb66 	bl	8000288 <__aeabi_dsub>
 801bbbc:	4632      	mov	r2, r6
 801bbbe:	463b      	mov	r3, r7
 801bbc0:	f7e4 fd1a 	bl	80005f8 <__aeabi_dmul>
 801bbc4:	a35e      	add	r3, pc, #376	; (adr r3, 801bd40 <atan+0x300>)
 801bbc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bbca:	f7e4 fb5d 	bl	8000288 <__aeabi_dsub>
 801bbce:	4632      	mov	r2, r6
 801bbd0:	463b      	mov	r3, r7
 801bbd2:	f7e4 fd11 	bl	80005f8 <__aeabi_dmul>
 801bbd6:	a35c      	add	r3, pc, #368	; (adr r3, 801bd48 <atan+0x308>)
 801bbd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bbdc:	f7e4 fb54 	bl	8000288 <__aeabi_dsub>
 801bbe0:	4632      	mov	r2, r6
 801bbe2:	463b      	mov	r3, r7
 801bbe4:	f7e4 fd08 	bl	80005f8 <__aeabi_dmul>
 801bbe8:	4602      	mov	r2, r0
 801bbea:	460b      	mov	r3, r1
 801bbec:	4640      	mov	r0, r8
 801bbee:	4649      	mov	r1, r9
 801bbf0:	f7e4 fb4c 	bl	800028c <__adddf3>
 801bbf4:	4622      	mov	r2, r4
 801bbf6:	462b      	mov	r3, r5
 801bbf8:	f7e4 fcfe 	bl	80005f8 <__aeabi_dmul>
 801bbfc:	f1ba 3fff 	cmp.w	sl, #4294967295
 801bc00:	4602      	mov	r2, r0
 801bc02:	460b      	mov	r3, r1
 801bc04:	d14b      	bne.n	801bc9e <atan+0x25e>
 801bc06:	4620      	mov	r0, r4
 801bc08:	4629      	mov	r1, r5
 801bc0a:	f7e4 fb3d 	bl	8000288 <__aeabi_dsub>
 801bc0e:	e72c      	b.n	801ba6a <atan+0x2a>
 801bc10:	ee10 0a10 	vmov	r0, s0
 801bc14:	4b53      	ldr	r3, [pc, #332]	; (801bd64 <atan+0x324>)
 801bc16:	2200      	movs	r2, #0
 801bc18:	4629      	mov	r1, r5
 801bc1a:	f7e4 fb35 	bl	8000288 <__aeabi_dsub>
 801bc1e:	4b51      	ldr	r3, [pc, #324]	; (801bd64 <atan+0x324>)
 801bc20:	4606      	mov	r6, r0
 801bc22:	460f      	mov	r7, r1
 801bc24:	2200      	movs	r2, #0
 801bc26:	4620      	mov	r0, r4
 801bc28:	4629      	mov	r1, r5
 801bc2a:	f7e4 fb2f 	bl	800028c <__adddf3>
 801bc2e:	4602      	mov	r2, r0
 801bc30:	460b      	mov	r3, r1
 801bc32:	4630      	mov	r0, r6
 801bc34:	4639      	mov	r1, r7
 801bc36:	f7e4 fe09 	bl	800084c <__aeabi_ddiv>
 801bc3a:	f04f 0a01 	mov.w	sl, #1
 801bc3e:	4604      	mov	r4, r0
 801bc40:	460d      	mov	r5, r1
 801bc42:	e764      	b.n	801bb0e <atan+0xce>
 801bc44:	4b49      	ldr	r3, [pc, #292]	; (801bd6c <atan+0x32c>)
 801bc46:	429e      	cmp	r6, r3
 801bc48:	da1d      	bge.n	801bc86 <atan+0x246>
 801bc4a:	ee10 0a10 	vmov	r0, s0
 801bc4e:	4b48      	ldr	r3, [pc, #288]	; (801bd70 <atan+0x330>)
 801bc50:	2200      	movs	r2, #0
 801bc52:	4629      	mov	r1, r5
 801bc54:	f7e4 fb18 	bl	8000288 <__aeabi_dsub>
 801bc58:	4b45      	ldr	r3, [pc, #276]	; (801bd70 <atan+0x330>)
 801bc5a:	4606      	mov	r6, r0
 801bc5c:	460f      	mov	r7, r1
 801bc5e:	2200      	movs	r2, #0
 801bc60:	4620      	mov	r0, r4
 801bc62:	4629      	mov	r1, r5
 801bc64:	f7e4 fcc8 	bl	80005f8 <__aeabi_dmul>
 801bc68:	4b3e      	ldr	r3, [pc, #248]	; (801bd64 <atan+0x324>)
 801bc6a:	2200      	movs	r2, #0
 801bc6c:	f7e4 fb0e 	bl	800028c <__adddf3>
 801bc70:	4602      	mov	r2, r0
 801bc72:	460b      	mov	r3, r1
 801bc74:	4630      	mov	r0, r6
 801bc76:	4639      	mov	r1, r7
 801bc78:	f7e4 fde8 	bl	800084c <__aeabi_ddiv>
 801bc7c:	f04f 0a02 	mov.w	sl, #2
 801bc80:	4604      	mov	r4, r0
 801bc82:	460d      	mov	r5, r1
 801bc84:	e743      	b.n	801bb0e <atan+0xce>
 801bc86:	462b      	mov	r3, r5
 801bc88:	ee10 2a10 	vmov	r2, s0
 801bc8c:	4939      	ldr	r1, [pc, #228]	; (801bd74 <atan+0x334>)
 801bc8e:	2000      	movs	r0, #0
 801bc90:	f7e4 fddc 	bl	800084c <__aeabi_ddiv>
 801bc94:	f04f 0a03 	mov.w	sl, #3
 801bc98:	4604      	mov	r4, r0
 801bc9a:	460d      	mov	r5, r1
 801bc9c:	e737      	b.n	801bb0e <atan+0xce>
 801bc9e:	4b36      	ldr	r3, [pc, #216]	; (801bd78 <atan+0x338>)
 801bca0:	4e36      	ldr	r6, [pc, #216]	; (801bd7c <atan+0x33c>)
 801bca2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801bca6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 801bcaa:	e9da 2300 	ldrd	r2, r3, [sl]
 801bcae:	f7e4 faeb 	bl	8000288 <__aeabi_dsub>
 801bcb2:	4622      	mov	r2, r4
 801bcb4:	462b      	mov	r3, r5
 801bcb6:	f7e4 fae7 	bl	8000288 <__aeabi_dsub>
 801bcba:	4602      	mov	r2, r0
 801bcbc:	460b      	mov	r3, r1
 801bcbe:	e9d6 0100 	ldrd	r0, r1, [r6]
 801bcc2:	f7e4 fae1 	bl	8000288 <__aeabi_dsub>
 801bcc6:	f1bb 0f00 	cmp.w	fp, #0
 801bcca:	4604      	mov	r4, r0
 801bccc:	460d      	mov	r5, r1
 801bcce:	f6bf aed6 	bge.w	801ba7e <atan+0x3e>
 801bcd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801bcd6:	461d      	mov	r5, r3
 801bcd8:	e6d1      	b.n	801ba7e <atan+0x3e>
 801bcda:	a51d      	add	r5, pc, #116	; (adr r5, 801bd50 <atan+0x310>)
 801bcdc:	e9d5 4500 	ldrd	r4, r5, [r5]
 801bce0:	e6cd      	b.n	801ba7e <atan+0x3e>
 801bce2:	bf00      	nop
 801bce4:	f3af 8000 	nop.w
 801bce8:	54442d18 	.word	0x54442d18
 801bcec:	bff921fb 	.word	0xbff921fb
 801bcf0:	8800759c 	.word	0x8800759c
 801bcf4:	7e37e43c 	.word	0x7e37e43c
 801bcf8:	e322da11 	.word	0xe322da11
 801bcfc:	3f90ad3a 	.word	0x3f90ad3a
 801bd00:	24760deb 	.word	0x24760deb
 801bd04:	3fa97b4b 	.word	0x3fa97b4b
 801bd08:	a0d03d51 	.word	0xa0d03d51
 801bd0c:	3fb10d66 	.word	0x3fb10d66
 801bd10:	c54c206e 	.word	0xc54c206e
 801bd14:	3fb745cd 	.word	0x3fb745cd
 801bd18:	920083ff 	.word	0x920083ff
 801bd1c:	3fc24924 	.word	0x3fc24924
 801bd20:	5555550d 	.word	0x5555550d
 801bd24:	3fd55555 	.word	0x3fd55555
 801bd28:	2c6a6c2f 	.word	0x2c6a6c2f
 801bd2c:	bfa2b444 	.word	0xbfa2b444
 801bd30:	52defd9a 	.word	0x52defd9a
 801bd34:	3fadde2d 	.word	0x3fadde2d
 801bd38:	af749a6d 	.word	0xaf749a6d
 801bd3c:	3fb3b0f2 	.word	0x3fb3b0f2
 801bd40:	fe231671 	.word	0xfe231671
 801bd44:	3fbc71c6 	.word	0x3fbc71c6
 801bd48:	9998ebc4 	.word	0x9998ebc4
 801bd4c:	3fc99999 	.word	0x3fc99999
 801bd50:	54442d18 	.word	0x54442d18
 801bd54:	3ff921fb 	.word	0x3ff921fb
 801bd58:	440fffff 	.word	0x440fffff
 801bd5c:	7ff00000 	.word	0x7ff00000
 801bd60:	3fdbffff 	.word	0x3fdbffff
 801bd64:	3ff00000 	.word	0x3ff00000
 801bd68:	3ff2ffff 	.word	0x3ff2ffff
 801bd6c:	40038000 	.word	0x40038000
 801bd70:	3ff80000 	.word	0x3ff80000
 801bd74:	bff00000 	.word	0xbff00000
 801bd78:	0801c980 	.word	0x0801c980
 801bd7c:	0801c960 	.word	0x0801c960

0801bd80 <fabs>:
 801bd80:	ec51 0b10 	vmov	r0, r1, d0
 801bd84:	ee10 2a10 	vmov	r2, s0
 801bd88:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801bd8c:	ec43 2b10 	vmov	d0, r2, r3
 801bd90:	4770      	bx	lr
 801bd92:	0000      	movs	r0, r0
 801bd94:	0000      	movs	r0, r0
	...

0801bd98 <floor>:
 801bd98:	ec51 0b10 	vmov	r0, r1, d0
 801bd9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bda0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801bda4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801bda8:	2e13      	cmp	r6, #19
 801bdaa:	ee10 5a10 	vmov	r5, s0
 801bdae:	ee10 8a10 	vmov	r8, s0
 801bdb2:	460c      	mov	r4, r1
 801bdb4:	dc32      	bgt.n	801be1c <floor+0x84>
 801bdb6:	2e00      	cmp	r6, #0
 801bdb8:	da14      	bge.n	801bde4 <floor+0x4c>
 801bdba:	a333      	add	r3, pc, #204	; (adr r3, 801be88 <floor+0xf0>)
 801bdbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bdc0:	f7e4 fa64 	bl	800028c <__adddf3>
 801bdc4:	2200      	movs	r2, #0
 801bdc6:	2300      	movs	r3, #0
 801bdc8:	f7e4 fea6 	bl	8000b18 <__aeabi_dcmpgt>
 801bdcc:	b138      	cbz	r0, 801bdde <floor+0x46>
 801bdce:	2c00      	cmp	r4, #0
 801bdd0:	da57      	bge.n	801be82 <floor+0xea>
 801bdd2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801bdd6:	431d      	orrs	r5, r3
 801bdd8:	d001      	beq.n	801bdde <floor+0x46>
 801bdda:	4c2d      	ldr	r4, [pc, #180]	; (801be90 <floor+0xf8>)
 801bddc:	2500      	movs	r5, #0
 801bdde:	4621      	mov	r1, r4
 801bde0:	4628      	mov	r0, r5
 801bde2:	e025      	b.n	801be30 <floor+0x98>
 801bde4:	4f2b      	ldr	r7, [pc, #172]	; (801be94 <floor+0xfc>)
 801bde6:	4137      	asrs	r7, r6
 801bde8:	ea01 0307 	and.w	r3, r1, r7
 801bdec:	4303      	orrs	r3, r0
 801bdee:	d01f      	beq.n	801be30 <floor+0x98>
 801bdf0:	a325      	add	r3, pc, #148	; (adr r3, 801be88 <floor+0xf0>)
 801bdf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bdf6:	f7e4 fa49 	bl	800028c <__adddf3>
 801bdfa:	2200      	movs	r2, #0
 801bdfc:	2300      	movs	r3, #0
 801bdfe:	f7e4 fe8b 	bl	8000b18 <__aeabi_dcmpgt>
 801be02:	2800      	cmp	r0, #0
 801be04:	d0eb      	beq.n	801bdde <floor+0x46>
 801be06:	2c00      	cmp	r4, #0
 801be08:	bfbe      	ittt	lt
 801be0a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801be0e:	fa43 f606 	asrlt.w	r6, r3, r6
 801be12:	19a4      	addlt	r4, r4, r6
 801be14:	ea24 0407 	bic.w	r4, r4, r7
 801be18:	2500      	movs	r5, #0
 801be1a:	e7e0      	b.n	801bdde <floor+0x46>
 801be1c:	2e33      	cmp	r6, #51	; 0x33
 801be1e:	dd0b      	ble.n	801be38 <floor+0xa0>
 801be20:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801be24:	d104      	bne.n	801be30 <floor+0x98>
 801be26:	ee10 2a10 	vmov	r2, s0
 801be2a:	460b      	mov	r3, r1
 801be2c:	f7e4 fa2e 	bl	800028c <__adddf3>
 801be30:	ec41 0b10 	vmov	d0, r0, r1
 801be34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801be38:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801be3c:	f04f 33ff 	mov.w	r3, #4294967295
 801be40:	fa23 f707 	lsr.w	r7, r3, r7
 801be44:	4207      	tst	r7, r0
 801be46:	d0f3      	beq.n	801be30 <floor+0x98>
 801be48:	a30f      	add	r3, pc, #60	; (adr r3, 801be88 <floor+0xf0>)
 801be4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be4e:	f7e4 fa1d 	bl	800028c <__adddf3>
 801be52:	2200      	movs	r2, #0
 801be54:	2300      	movs	r3, #0
 801be56:	f7e4 fe5f 	bl	8000b18 <__aeabi_dcmpgt>
 801be5a:	2800      	cmp	r0, #0
 801be5c:	d0bf      	beq.n	801bdde <floor+0x46>
 801be5e:	2c00      	cmp	r4, #0
 801be60:	da02      	bge.n	801be68 <floor+0xd0>
 801be62:	2e14      	cmp	r6, #20
 801be64:	d103      	bne.n	801be6e <floor+0xd6>
 801be66:	3401      	adds	r4, #1
 801be68:	ea25 0507 	bic.w	r5, r5, r7
 801be6c:	e7b7      	b.n	801bdde <floor+0x46>
 801be6e:	2301      	movs	r3, #1
 801be70:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801be74:	fa03 f606 	lsl.w	r6, r3, r6
 801be78:	4435      	add	r5, r6
 801be7a:	4545      	cmp	r5, r8
 801be7c:	bf38      	it	cc
 801be7e:	18e4      	addcc	r4, r4, r3
 801be80:	e7f2      	b.n	801be68 <floor+0xd0>
 801be82:	2500      	movs	r5, #0
 801be84:	462c      	mov	r4, r5
 801be86:	e7aa      	b.n	801bdde <floor+0x46>
 801be88:	8800759c 	.word	0x8800759c
 801be8c:	7e37e43c 	.word	0x7e37e43c
 801be90:	bff00000 	.word	0xbff00000
 801be94:	000fffff 	.word	0x000fffff

0801be98 <scalbn>:
 801be98:	b570      	push	{r4, r5, r6, lr}
 801be9a:	ec55 4b10 	vmov	r4, r5, d0
 801be9e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801bea2:	4606      	mov	r6, r0
 801bea4:	462b      	mov	r3, r5
 801bea6:	b99a      	cbnz	r2, 801bed0 <scalbn+0x38>
 801bea8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801beac:	4323      	orrs	r3, r4
 801beae:	d036      	beq.n	801bf1e <scalbn+0x86>
 801beb0:	4b39      	ldr	r3, [pc, #228]	; (801bf98 <scalbn+0x100>)
 801beb2:	4629      	mov	r1, r5
 801beb4:	ee10 0a10 	vmov	r0, s0
 801beb8:	2200      	movs	r2, #0
 801beba:	f7e4 fb9d 	bl	80005f8 <__aeabi_dmul>
 801bebe:	4b37      	ldr	r3, [pc, #220]	; (801bf9c <scalbn+0x104>)
 801bec0:	429e      	cmp	r6, r3
 801bec2:	4604      	mov	r4, r0
 801bec4:	460d      	mov	r5, r1
 801bec6:	da10      	bge.n	801beea <scalbn+0x52>
 801bec8:	a32b      	add	r3, pc, #172	; (adr r3, 801bf78 <scalbn+0xe0>)
 801beca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bece:	e03a      	b.n	801bf46 <scalbn+0xae>
 801bed0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801bed4:	428a      	cmp	r2, r1
 801bed6:	d10c      	bne.n	801bef2 <scalbn+0x5a>
 801bed8:	ee10 2a10 	vmov	r2, s0
 801bedc:	4620      	mov	r0, r4
 801bede:	4629      	mov	r1, r5
 801bee0:	f7e4 f9d4 	bl	800028c <__adddf3>
 801bee4:	4604      	mov	r4, r0
 801bee6:	460d      	mov	r5, r1
 801bee8:	e019      	b.n	801bf1e <scalbn+0x86>
 801beea:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801beee:	460b      	mov	r3, r1
 801bef0:	3a36      	subs	r2, #54	; 0x36
 801bef2:	4432      	add	r2, r6
 801bef4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801bef8:	428a      	cmp	r2, r1
 801befa:	dd08      	ble.n	801bf0e <scalbn+0x76>
 801befc:	2d00      	cmp	r5, #0
 801befe:	a120      	add	r1, pc, #128	; (adr r1, 801bf80 <scalbn+0xe8>)
 801bf00:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bf04:	da1c      	bge.n	801bf40 <scalbn+0xa8>
 801bf06:	a120      	add	r1, pc, #128	; (adr r1, 801bf88 <scalbn+0xf0>)
 801bf08:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bf0c:	e018      	b.n	801bf40 <scalbn+0xa8>
 801bf0e:	2a00      	cmp	r2, #0
 801bf10:	dd08      	ble.n	801bf24 <scalbn+0x8c>
 801bf12:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801bf16:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801bf1a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801bf1e:	ec45 4b10 	vmov	d0, r4, r5
 801bf22:	bd70      	pop	{r4, r5, r6, pc}
 801bf24:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801bf28:	da19      	bge.n	801bf5e <scalbn+0xc6>
 801bf2a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801bf2e:	429e      	cmp	r6, r3
 801bf30:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801bf34:	dd0a      	ble.n	801bf4c <scalbn+0xb4>
 801bf36:	a112      	add	r1, pc, #72	; (adr r1, 801bf80 <scalbn+0xe8>)
 801bf38:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bf3c:	2b00      	cmp	r3, #0
 801bf3e:	d1e2      	bne.n	801bf06 <scalbn+0x6e>
 801bf40:	a30f      	add	r3, pc, #60	; (adr r3, 801bf80 <scalbn+0xe8>)
 801bf42:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf46:	f7e4 fb57 	bl	80005f8 <__aeabi_dmul>
 801bf4a:	e7cb      	b.n	801bee4 <scalbn+0x4c>
 801bf4c:	a10a      	add	r1, pc, #40	; (adr r1, 801bf78 <scalbn+0xe0>)
 801bf4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bf52:	2b00      	cmp	r3, #0
 801bf54:	d0b8      	beq.n	801bec8 <scalbn+0x30>
 801bf56:	a10e      	add	r1, pc, #56	; (adr r1, 801bf90 <scalbn+0xf8>)
 801bf58:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bf5c:	e7b4      	b.n	801bec8 <scalbn+0x30>
 801bf5e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801bf62:	3236      	adds	r2, #54	; 0x36
 801bf64:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801bf68:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801bf6c:	4620      	mov	r0, r4
 801bf6e:	4b0c      	ldr	r3, [pc, #48]	; (801bfa0 <scalbn+0x108>)
 801bf70:	2200      	movs	r2, #0
 801bf72:	e7e8      	b.n	801bf46 <scalbn+0xae>
 801bf74:	f3af 8000 	nop.w
 801bf78:	c2f8f359 	.word	0xc2f8f359
 801bf7c:	01a56e1f 	.word	0x01a56e1f
 801bf80:	8800759c 	.word	0x8800759c
 801bf84:	7e37e43c 	.word	0x7e37e43c
 801bf88:	8800759c 	.word	0x8800759c
 801bf8c:	fe37e43c 	.word	0xfe37e43c
 801bf90:	c2f8f359 	.word	0xc2f8f359
 801bf94:	81a56e1f 	.word	0x81a56e1f
 801bf98:	43500000 	.word	0x43500000
 801bf9c:	ffff3cb0 	.word	0xffff3cb0
 801bfa0:	3c900000 	.word	0x3c900000

0801bfa4 <_init>:
 801bfa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bfa6:	bf00      	nop
 801bfa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bfaa:	bc08      	pop	{r3}
 801bfac:	469e      	mov	lr, r3
 801bfae:	4770      	bx	lr

0801bfb0 <_fini>:
 801bfb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bfb2:	bf00      	nop
 801bfb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bfb6:	bc08      	pop	{r3}
 801bfb8:	469e      	mov	lr, r3
 801bfba:	4770      	bx	lr
