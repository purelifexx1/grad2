
DMA_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001be0c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009e8  0801bfa0  0801bfa0  0002bfa0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c988  0801c988  000323e4  2**0
                  CONTENTS
  4 .ARM          00000008  0801c988  0801c988  0002c988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c990  0801c990  000323e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c990  0801c990  0002c990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c994  0801c994  0002c994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000023e4  20000000  0801c998  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d764  200023e8  0801ed7c  000323e8  2**3
                  ALLOC
 10 ._user_heap_stack 000063c4  2000fb4c  0801ed7c  0003fb4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000323e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00035685  00000000  00000000  00032414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000713d  00000000  00000000  00067a99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e88  00000000  00000000  0006ebd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c30  00000000  00000000  00070a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aef0  00000000  00000000  00072690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002919f  00000000  00000000  0009d580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df098  00000000  00000000  000c671f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a57b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000969c  00000000  00000000  001a580c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200023e8 	.word	0x200023e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801bf84 	.word	0x0801bf84

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200023ec 	.word	0x200023ec
 80001cc:	0801bf84 	.word	0x0801bf84

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	0000      	movs	r0, r0
	...

08000ff0 <packetRead>:
extern SCARA_LSPB_Clutch_TypeDef  gcode_clutch_configure[200];
Position_DataType position_type;
SCARA_Gcode_Cor_TypeDef	Gcode_Cor[1000];
uint16_t point_counter = 0, current_clutch_index = 0;

Robot_CommandTypedef 	packetRead	(uint8_t *message, int32_t length, int32_t *id_command, DUTY_Command_TypeDef *duty_cmd) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08c      	sub	sp, #48	; 0x30
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
 8000ffc:	603b      	str	r3, [r7, #0]
	Transfer_Protocol protocol_id = message[0];
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    duty_cmd->id_command = message[1];
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	3301      	adds	r3, #1
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	461a      	mov	r2, r3
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	609a      	str	r2, [r3, #8]
	int32_t temp_pointer = 2;
 8001012:	2302      	movs	r3, #2
 8001014:	62fb      	str	r3, [r7, #44]	; 0x2c
    switch(protocol_id) 
 8001016:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800101a:	2b00      	cmp	r3, #0
 800101c:	d004      	beq.n	8001028 <packetRead+0x38>
 800101e:	2b01      	cmp	r3, #1
 8001020:	f000 8205 	beq.w	800142e <packetRead+0x43e>
 8001024:	f000 bfe1 	b.w	8001fea <packetRead+0xffa>
    {
        // reserved for Gcode file transfer
        case FILE_TRANSMISION:
        {
        	temp_pointer = 1;
 8001028:	2301      	movs	r3, #1
 800102a:	62fb      	str	r3, [r7, #44]	; 0x2c

        	do {
        		Gcode_Packet_Command_TypeDef move_type 	= message[temp_pointer] & 0x0f;
 800102c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800102e:	68fa      	ldr	r2, [r7, #12]
 8001030:	4413      	add	r3, r2
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	f003 030f 	and.w	r3, r3, #15
 8001038:	74bb      	strb	r3, [r7, #18]
				switch (move_type){
 800103a:	7cbb      	ldrb	r3, [r7, #18]
 800103c:	2b04      	cmp	r3, #4
 800103e:	f200 81ee 	bhi.w	800141e <packetRead+0x42e>
 8001042:	a201      	add	r2, pc, #4	; (adr r2, 8001048 <packetRead+0x58>)
 8001044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001048:	0800105d 	.word	0x0800105d
 800104c:	08001175 	.word	0x08001175
 8001050:	080012c1 	.word	0x080012c1
 8001054:	080012c1 	.word	0x080012c1
 8001058:	080010f7 	.word	0x080010f7
				case FIRST_PACKET:{
					Gcode_Mode = message[temp_pointer++] >> 4 & 0x0f;
 800105c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800105e:	1c5a      	adds	r2, r3, #1
 8001060:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001062:	461a      	mov	r2, r3
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	4413      	add	r3, r2
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	091b      	lsrs	r3, r3, #4
 800106c:	b2db      	uxtb	r3, r3
 800106e:	f003 030f 	and.w	r3, r3, #15
 8001072:	b2da      	uxtb	r2, r3
 8001074:	4b88      	ldr	r3, [pc, #544]	; (8001298 <packetRead+0x2a8>)
 8001076:	701a      	strb	r2, [r3, #0]
					down_z_height = (double)B2I(temp_pointer)*COR_INVERSE_SCALE; temp_pointer+=4;
 8001078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800107a:	68fa      	ldr	r2, [r7, #12]
 800107c:	4413      	add	r3, r2
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff fa4f 	bl	8000524 <__aeabi_i2d>
 8001086:	a382      	add	r3, pc, #520	; (adr r3, 8001290 <packetRead+0x2a0>)
 8001088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108c:	f7ff fab4 	bl	80005f8 <__aeabi_dmul>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	4981      	ldr	r1, [pc, #516]	; (800129c <packetRead+0x2ac>)
 8001096:	e9c1 2300 	strd	r2, r3, [r1]
 800109a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800109c:	3304      	adds	r3, #4
 800109e:	62fb      	str	r3, [r7, #44]	; 0x2c
					up_z_height   = (double)B2I(temp_pointer)*COR_INVERSE_SCALE; temp_pointer+=4;
 80010a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	4413      	add	r3, r2
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff fa3b 	bl	8000524 <__aeabi_i2d>
 80010ae:	a378      	add	r3, pc, #480	; (adr r3, 8001290 <packetRead+0x2a0>)
 80010b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b4:	f7ff faa0 	bl	80005f8 <__aeabi_dmul>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	4978      	ldr	r1, [pc, #480]	; (80012a0 <packetRead+0x2b0>)
 80010be:	e9c1 2300 	strd	r2, r3, [r1]
 80010c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010c4:	3304      	adds	r3, #4
 80010c6:	62fb      	str	r3, [r7, #44]	; 0x2c
					total_num_of_point = B2I(temp_pointer);						 temp_pointer+=4;
 80010c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ca:	68fa      	ldr	r2, [r7, #12]
 80010cc:	4413      	add	r3, r2
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a74      	ldr	r2, [pc, #464]	; (80012a4 <packetRead+0x2b4>)
 80010d2:	6013      	str	r3, [r2, #0]
 80010d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010d6:	3304      	adds	r3, #4
 80010d8:	62fb      	str	r3, [r7, #44]	; 0x2c
					point_counter = 0;
 80010da:	4b73      	ldr	r3, [pc, #460]	; (80012a8 <packetRead+0x2b8>)
 80010dc:	2200      	movs	r2, #0
 80010de:	801a      	strh	r2, [r3, #0]
					current_clutch_index = 0;
 80010e0:	4b72      	ldr	r3, [pc, #456]	; (80012ac <packetRead+0x2bc>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	801a      	strh	r2, [r3, #0]
					pre_clutch_index = -1;
 80010e6:	4b72      	ldr	r3, [pc, #456]	; (80012b0 <packetRead+0x2c0>)
 80010e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010ec:	801a      	strh	r2, [r3, #0]
					pre_height = UP_Z;
 80010ee:	4b71      	ldr	r3, [pc, #452]	; (80012b4 <packetRead+0x2c4>)
 80010f0:	2205      	movs	r2, #5
 80010f2:	701a      	strb	r2, [r3, #0]
				}
				break;
 80010f4:	e193      	b.n	800141e <packetRead+0x42e>
				case CLUTCH_HEADER_TYPE:{
					temp_pointer++;
 80010f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010f8:	3301      	adds	r3, #1
 80010fa:	62fb      	str	r3, [r7, #44]	; 0x2c
					gcode_clutch_configure[current_clutch_index].total_s     = B2I(temp_pointer); temp_pointer+=4;
 80010fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	4413      	add	r3, r2
 8001102:	4a6a      	ldr	r2, [pc, #424]	; (80012ac <packetRead+0x2bc>)
 8001104:	8812      	ldrh	r2, [r2, #0]
 8001106:	4610      	mov	r0, r2
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	496b      	ldr	r1, [pc, #428]	; (80012b8 <packetRead+0x2c8>)
 800110c:	4603      	mov	r3, r0
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	4403      	add	r3, r0
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	440b      	add	r3, r1
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800111a:	3304      	adds	r3, #4
 800111c:	62fb      	str	r3, [r7, #44]	; 0x2c
					gcode_clutch_configure[current_clutch_index].veloc 	     = B2I(temp_pointer); temp_pointer+=4;
 800111e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001120:	68fa      	ldr	r2, [r7, #12]
 8001122:	4413      	add	r3, r2
 8001124:	4a61      	ldr	r2, [pc, #388]	; (80012ac <packetRead+0x2bc>)
 8001126:	8812      	ldrh	r2, [r2, #0]
 8001128:	4610      	mov	r0, r2
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	4962      	ldr	r1, [pc, #392]	; (80012b8 <packetRead+0x2c8>)
 800112e:	4603      	mov	r3, r0
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	4403      	add	r3, r0
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	440b      	add	r3, r1
 8001138:	3304      	adds	r3, #4
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800113e:	3304      	adds	r3, #4
 8001140:	62fb      	str	r3, [r7, #44]	; 0x2c
					gcode_clutch_configure[current_clutch_index].Depth_Feed  = B2I(temp_pointer); temp_pointer+=4;
 8001142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001144:	68fa      	ldr	r2, [r7, #12]
 8001146:	4413      	add	r3, r2
 8001148:	4a58      	ldr	r2, [pc, #352]	; (80012ac <packetRead+0x2bc>)
 800114a:	8812      	ldrh	r2, [r2, #0]
 800114c:	4610      	mov	r0, r2
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4959      	ldr	r1, [pc, #356]	; (80012b8 <packetRead+0x2c8>)
 8001152:	4603      	mov	r3, r0
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	4403      	add	r3, r0
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	440b      	add	r3, r1
 800115c:	3308      	adds	r3, #8
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001162:	3304      	adds	r3, #4
 8001164:	62fb      	str	r3, [r7, #44]	; 0x2c
					current_clutch_index++;
 8001166:	4b51      	ldr	r3, [pc, #324]	; (80012ac <packetRead+0x2bc>)
 8001168:	881b      	ldrh	r3, [r3, #0]
 800116a:	3301      	adds	r3, #1
 800116c:	b29a      	uxth	r2, r3
 800116e:	4b4f      	ldr	r3, [pc, #316]	; (80012ac <packetRead+0x2bc>)
 8001170:	801a      	strh	r2, [r3, #0]
				}
				break;
 8001172:	e154      	b.n	800141e <packetRead+0x42e>
				case LINEAR_TYPE:{
					Gcode_Cor[point_counter].configure.type_define[0] = move_type;
 8001174:	4b4c      	ldr	r3, [pc, #304]	; (80012a8 <packetRead+0x2b8>)
 8001176:	881b      	ldrh	r3, [r3, #0]
 8001178:	4619      	mov	r1, r3
 800117a:	4a50      	ldr	r2, [pc, #320]	; (80012bc <packetRead+0x2cc>)
 800117c:	460b      	mov	r3, r1
 800117e:	00db      	lsls	r3, r3, #3
 8001180:	1a5b      	subs	r3, r3, r1
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	4413      	add	r3, r2
 8001186:	331a      	adds	r3, #26
 8001188:	7cba      	ldrb	r2, [r7, #18]
 800118a:	701a      	strb	r2, [r3, #0]
					Gcode_Cor[point_counter].configure.type_define[1] = message[temp_pointer++] >> 4 & 0x0f;
 800118c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800118e:	1c5a      	adds	r2, r3, #1
 8001190:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001192:	461a      	mov	r2, r3
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	4413      	add	r3, r2
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	091b      	lsrs	r3, r3, #4
 800119c:	b2db      	uxtb	r3, r3
 800119e:	4a42      	ldr	r2, [pc, #264]	; (80012a8 <packetRead+0x2b8>)
 80011a0:	8812      	ldrh	r2, [r2, #0]
 80011a2:	4611      	mov	r1, r2
 80011a4:	f003 030f 	and.w	r3, r3, #15
 80011a8:	b2d8      	uxtb	r0, r3
 80011aa:	4a44      	ldr	r2, [pc, #272]	; (80012bc <packetRead+0x2cc>)
 80011ac:	460b      	mov	r3, r1
 80011ae:	00db      	lsls	r3, r3, #3
 80011b0:	1a5b      	subs	r3, r3, r1
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	4413      	add	r3, r2
 80011b6:	331b      	adds	r3, #27
 80011b8:	4602      	mov	r2, r0
 80011ba:	701a      	strb	r2, [r3, #0]
					Gcode_Cor[point_counter].X = B2I(temp_pointer);	temp_pointer+=4;
 80011bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011be:	68fa      	ldr	r2, [r7, #12]
 80011c0:	4413      	add	r3, r2
 80011c2:	4a39      	ldr	r2, [pc, #228]	; (80012a8 <packetRead+0x2b8>)
 80011c4:	8812      	ldrh	r2, [r2, #0]
 80011c6:	4610      	mov	r0, r2
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	493c      	ldr	r1, [pc, #240]	; (80012bc <packetRead+0x2cc>)
 80011cc:	4603      	mov	r3, r0
 80011ce:	00db      	lsls	r3, r3, #3
 80011d0:	1a1b      	subs	r3, r3, r0
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	440b      	add	r3, r1
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011da:	3304      	adds	r3, #4
 80011dc:	62fb      	str	r3, [r7, #44]	; 0x2c
					Gcode_Cor[point_counter].Y = B2I(temp_pointer);	temp_pointer+=4;
 80011de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011e0:	68fa      	ldr	r2, [r7, #12]
 80011e2:	4413      	add	r3, r2
 80011e4:	4a30      	ldr	r2, [pc, #192]	; (80012a8 <packetRead+0x2b8>)
 80011e6:	8812      	ldrh	r2, [r2, #0]
 80011e8:	4610      	mov	r0, r2
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	4933      	ldr	r1, [pc, #204]	; (80012bc <packetRead+0x2cc>)
 80011ee:	4603      	mov	r3, r0
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	1a1b      	subs	r3, r3, r0
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	440b      	add	r3, r1
 80011f8:	3304      	adds	r3, #4
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011fe:	3304      	adds	r3, #4
 8001200:	62fb      	str	r3, [r7, #44]	; 0x2c
					if(Gcode_Mode == GCODE_LINEAR){
 8001202:	4b25      	ldr	r3, [pc, #148]	; (8001298 <packetRead+0x2a8>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	2b07      	cmp	r3, #7
 8001208:	d112      	bne.n	8001230 <packetRead+0x240>
						Gcode_Cor[point_counter].F = B2I(temp_pointer);	temp_pointer+=4;
 800120a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800120c:	68fa      	ldr	r2, [r7, #12]
 800120e:	4413      	add	r3, r2
 8001210:	4a25      	ldr	r2, [pc, #148]	; (80012a8 <packetRead+0x2b8>)
 8001212:	8812      	ldrh	r2, [r2, #0]
 8001214:	4610      	mov	r0, r2
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	4928      	ldr	r1, [pc, #160]	; (80012bc <packetRead+0x2cc>)
 800121a:	4603      	mov	r3, r0
 800121c:	00db      	lsls	r3, r3, #3
 800121e:	1a1b      	subs	r3, r3, r0
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	440b      	add	r3, r1
 8001224:	3308      	adds	r3, #8
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800122a:	3304      	adds	r3, #4
 800122c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800122e:	e025      	b.n	800127c <packetRead+0x28c>
					}else if(Gcode_Mode == GCODE_SMOOTH_LSPB){
 8001230:	4b19      	ldr	r3, [pc, #100]	; (8001298 <packetRead+0x2a8>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b08      	cmp	r3, #8
 8001236:	d121      	bne.n	800127c <packetRead+0x28c>
						Gcode_Cor[point_counter].configure.clutch_index = current_clutch_index - 1;
 8001238:	4b1c      	ldr	r3, [pc, #112]	; (80012ac <packetRead+0x2bc>)
 800123a:	881b      	ldrh	r3, [r3, #0]
 800123c:	4a1a      	ldr	r2, [pc, #104]	; (80012a8 <packetRead+0x2b8>)
 800123e:	8812      	ldrh	r2, [r2, #0]
 8001240:	4611      	mov	r1, r2
 8001242:	3b01      	subs	r3, #1
 8001244:	b298      	uxth	r0, r3
 8001246:	4a1d      	ldr	r2, [pc, #116]	; (80012bc <packetRead+0x2cc>)
 8001248:	460b      	mov	r3, r1
 800124a:	00db      	lsls	r3, r3, #3
 800124c:	1a5b      	subs	r3, r3, r1
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	4413      	add	r3, r2
 8001252:	3318      	adds	r3, #24
 8001254:	4602      	mov	r2, r0
 8001256:	801a      	strh	r2, [r3, #0]
						Gcode_Cor[point_counter].T = B2I(temp_pointer);	temp_pointer+=4;
 8001258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800125a:	68fa      	ldr	r2, [r7, #12]
 800125c:	4413      	add	r3, r2
 800125e:	4a12      	ldr	r2, [pc, #72]	; (80012a8 <packetRead+0x2b8>)
 8001260:	8812      	ldrh	r2, [r2, #0]
 8001262:	4610      	mov	r0, r2
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	4915      	ldr	r1, [pc, #84]	; (80012bc <packetRead+0x2cc>)
 8001268:	4603      	mov	r3, r0
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	1a1b      	subs	r3, r3, r0
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	440b      	add	r3, r1
 8001272:	3314      	adds	r3, #20
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001278:	3304      	adds	r3, #4
 800127a:	62fb      	str	r3, [r7, #44]	; 0x2c
					}
					point_counter++;
 800127c:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <packetRead+0x2b8>)
 800127e:	881b      	ldrh	r3, [r3, #0]
 8001280:	3301      	adds	r3, #1
 8001282:	b29a      	uxth	r2, r3
 8001284:	4b08      	ldr	r3, [pc, #32]	; (80012a8 <packetRead+0x2b8>)
 8001286:	801a      	strh	r2, [r3, #0]
				}
				break;
 8001288:	e0c9      	b.n	800141e <packetRead+0x42e>
 800128a:	bf00      	nop
 800128c:	f3af 8000 	nop.w
 8001290:	a0000000 	.word	0xa0000000
 8001294:	3eb0c6f7 	.word	0x3eb0c6f7
 8001298:	200065c8 	.word	0x200065c8
 800129c:	20006f38 	.word	0x20006f38
 80012a0:	200065c0 	.word	0x200065c0
 80012a4:	20006f90 	.word	0x20006f90
 80012a8:	20002404 	.word	0x20002404
 80012ac:	20002406 	.word	0x20002406
 80012b0:	2000dd0a 	.word	0x2000dd0a
 80012b4:	20006f68 	.word	0x20006f68
 80012b8:	200065d8 	.word	0x200065d8
 80012bc:	20006fa0 	.word	0x20006fa0
				case ARC_CW_TYPE:
				case ARC_AW_TYPE:{
					Gcode_Cor[point_counter].configure.type_define[0] = move_type;
 80012c0:	4bb9      	ldr	r3, [pc, #740]	; (80015a8 <packetRead+0x5b8>)
 80012c2:	881b      	ldrh	r3, [r3, #0]
 80012c4:	4619      	mov	r1, r3
 80012c6:	4ab9      	ldr	r2, [pc, #740]	; (80015ac <packetRead+0x5bc>)
 80012c8:	460b      	mov	r3, r1
 80012ca:	00db      	lsls	r3, r3, #3
 80012cc:	1a5b      	subs	r3, r3, r1
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	4413      	add	r3, r2
 80012d2:	331a      	adds	r3, #26
 80012d4:	7cba      	ldrb	r2, [r7, #18]
 80012d6:	701a      	strb	r2, [r3, #0]
					Gcode_Cor[point_counter].configure.type_define[1] = message[temp_pointer++] >> 4 & 0x0f;
 80012d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012da:	1c5a      	adds	r2, r3, #1
 80012dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80012de:	461a      	mov	r2, r3
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	4413      	add	r3, r2
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	091b      	lsrs	r3, r3, #4
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	4aaf      	ldr	r2, [pc, #700]	; (80015a8 <packetRead+0x5b8>)
 80012ec:	8812      	ldrh	r2, [r2, #0]
 80012ee:	4611      	mov	r1, r2
 80012f0:	f003 030f 	and.w	r3, r3, #15
 80012f4:	b2d8      	uxtb	r0, r3
 80012f6:	4aad      	ldr	r2, [pc, #692]	; (80015ac <packetRead+0x5bc>)
 80012f8:	460b      	mov	r3, r1
 80012fa:	00db      	lsls	r3, r3, #3
 80012fc:	1a5b      	subs	r3, r3, r1
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	4413      	add	r3, r2
 8001302:	331b      	adds	r3, #27
 8001304:	4602      	mov	r2, r0
 8001306:	701a      	strb	r2, [r3, #0]
					Gcode_Cor[point_counter].X = B2I(temp_pointer);	temp_pointer+=4;
 8001308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	4413      	add	r3, r2
 800130e:	4aa6      	ldr	r2, [pc, #664]	; (80015a8 <packetRead+0x5b8>)
 8001310:	8812      	ldrh	r2, [r2, #0]
 8001312:	4610      	mov	r0, r2
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	49a5      	ldr	r1, [pc, #660]	; (80015ac <packetRead+0x5bc>)
 8001318:	4603      	mov	r3, r0
 800131a:	00db      	lsls	r3, r3, #3
 800131c:	1a1b      	subs	r3, r3, r0
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	440b      	add	r3, r1
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001326:	3304      	adds	r3, #4
 8001328:	62fb      	str	r3, [r7, #44]	; 0x2c
					Gcode_Cor[point_counter].Y = B2I(temp_pointer);	temp_pointer+=4;
 800132a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800132c:	68fa      	ldr	r2, [r7, #12]
 800132e:	4413      	add	r3, r2
 8001330:	4a9d      	ldr	r2, [pc, #628]	; (80015a8 <packetRead+0x5b8>)
 8001332:	8812      	ldrh	r2, [r2, #0]
 8001334:	4610      	mov	r0, r2
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	499c      	ldr	r1, [pc, #624]	; (80015ac <packetRead+0x5bc>)
 800133a:	4603      	mov	r3, r0
 800133c:	00db      	lsls	r3, r3, #3
 800133e:	1a1b      	subs	r3, r3, r0
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	440b      	add	r3, r1
 8001344:	3304      	adds	r3, #4
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800134a:	3304      	adds	r3, #4
 800134c:	62fb      	str	r3, [r7, #44]	; 0x2c
					if(Gcode_Mode == GCODE_LINEAR){
 800134e:	4b98      	ldr	r3, [pc, #608]	; (80015b0 <packetRead+0x5c0>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b07      	cmp	r3, #7
 8001354:	d112      	bne.n	800137c <packetRead+0x38c>
						Gcode_Cor[point_counter].F = B2I(temp_pointer);	temp_pointer+=4;
 8001356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001358:	68fa      	ldr	r2, [r7, #12]
 800135a:	4413      	add	r3, r2
 800135c:	4a92      	ldr	r2, [pc, #584]	; (80015a8 <packetRead+0x5b8>)
 800135e:	8812      	ldrh	r2, [r2, #0]
 8001360:	4610      	mov	r0, r2
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	4991      	ldr	r1, [pc, #580]	; (80015ac <packetRead+0x5bc>)
 8001366:	4603      	mov	r3, r0
 8001368:	00db      	lsls	r3, r3, #3
 800136a:	1a1b      	subs	r3, r3, r0
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	440b      	add	r3, r1
 8001370:	3308      	adds	r3, #8
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001376:	3304      	adds	r3, #4
 8001378:	62fb      	str	r3, [r7, #44]	; 0x2c
 800137a:	e025      	b.n	80013c8 <packetRead+0x3d8>
					}else if(Gcode_Mode == GCODE_SMOOTH_LSPB){
 800137c:	4b8c      	ldr	r3, [pc, #560]	; (80015b0 <packetRead+0x5c0>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2b08      	cmp	r3, #8
 8001382:	d121      	bne.n	80013c8 <packetRead+0x3d8>
						Gcode_Cor[point_counter].configure.clutch_index = current_clutch_index - 1;
 8001384:	4b8b      	ldr	r3, [pc, #556]	; (80015b4 <packetRead+0x5c4>)
 8001386:	881b      	ldrh	r3, [r3, #0]
 8001388:	4a87      	ldr	r2, [pc, #540]	; (80015a8 <packetRead+0x5b8>)
 800138a:	8812      	ldrh	r2, [r2, #0]
 800138c:	4611      	mov	r1, r2
 800138e:	3b01      	subs	r3, #1
 8001390:	b298      	uxth	r0, r3
 8001392:	4a86      	ldr	r2, [pc, #536]	; (80015ac <packetRead+0x5bc>)
 8001394:	460b      	mov	r3, r1
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	1a5b      	subs	r3, r3, r1
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	4413      	add	r3, r2
 800139e:	3318      	adds	r3, #24
 80013a0:	4602      	mov	r2, r0
 80013a2:	801a      	strh	r2, [r3, #0]
						Gcode_Cor[point_counter].T = B2I(temp_pointer);	temp_pointer+=4;
 80013a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013a6:	68fa      	ldr	r2, [r7, #12]
 80013a8:	4413      	add	r3, r2
 80013aa:	4a7f      	ldr	r2, [pc, #508]	; (80015a8 <packetRead+0x5b8>)
 80013ac:	8812      	ldrh	r2, [r2, #0]
 80013ae:	4610      	mov	r0, r2
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	497e      	ldr	r1, [pc, #504]	; (80015ac <packetRead+0x5bc>)
 80013b4:	4603      	mov	r3, r0
 80013b6:	00db      	lsls	r3, r3, #3
 80013b8:	1a1b      	subs	r3, r3, r0
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	440b      	add	r3, r1
 80013be:	3314      	adds	r3, #20
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013c4:	3304      	adds	r3, #4
 80013c6:	62fb      	str	r3, [r7, #44]	; 0x2c
					}
					Gcode_Cor[point_counter].I = B2I(temp_pointer);	temp_pointer+=4;
 80013c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ca:	68fa      	ldr	r2, [r7, #12]
 80013cc:	4413      	add	r3, r2
 80013ce:	4a76      	ldr	r2, [pc, #472]	; (80015a8 <packetRead+0x5b8>)
 80013d0:	8812      	ldrh	r2, [r2, #0]
 80013d2:	4610      	mov	r0, r2
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	4975      	ldr	r1, [pc, #468]	; (80015ac <packetRead+0x5bc>)
 80013d8:	4603      	mov	r3, r0
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	1a1b      	subs	r3, r3, r0
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	440b      	add	r3, r1
 80013e2:	330c      	adds	r3, #12
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013e8:	3304      	adds	r3, #4
 80013ea:	62fb      	str	r3, [r7, #44]	; 0x2c
					Gcode_Cor[point_counter].J = B2I(temp_pointer);	temp_pointer+=4;
 80013ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ee:	68fa      	ldr	r2, [r7, #12]
 80013f0:	4413      	add	r3, r2
 80013f2:	4a6d      	ldr	r2, [pc, #436]	; (80015a8 <packetRead+0x5b8>)
 80013f4:	8812      	ldrh	r2, [r2, #0]
 80013f6:	4610      	mov	r0, r2
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	496c      	ldr	r1, [pc, #432]	; (80015ac <packetRead+0x5bc>)
 80013fc:	4603      	mov	r3, r0
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	1a1b      	subs	r3, r3, r0
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	440b      	add	r3, r1
 8001406:	3310      	adds	r3, #16
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800140c:	3304      	adds	r3, #4
 800140e:	62fb      	str	r3, [r7, #44]	; 0x2c
					point_counter++;
 8001410:	4b65      	ldr	r3, [pc, #404]	; (80015a8 <packetRead+0x5b8>)
 8001412:	881b      	ldrh	r3, [r3, #0]
 8001414:	3301      	adds	r3, #1
 8001416:	b29a      	uxth	r2, r3
 8001418:	4b63      	ldr	r3, [pc, #396]	; (80015a8 <packetRead+0x5b8>)
 800141a:	801a      	strh	r2, [r3, #0]
				}
				break;
 800141c:	bf00      	nop
				}
        	}while(temp_pointer < length);
 800141e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	429a      	cmp	r2, r3
 8001424:	f6ff ae02 	blt.w	800102c <packetRead+0x3c>
        	return CMD_GCODE;
 8001428:	231a      	movs	r3, #26
 800142a:	f000 bddf 	b.w	8001fec <packetRead+0xffc>
        break;

        // command control from pc
        case COMMAND_TRANSMISION:
        {
        	Robot_CommandTypedef command_id = message[1];
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	785b      	ldrb	r3, [r3, #1]
 8001432:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
            switch(command_id)
 8001436:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800143a:	2b19      	cmp	r3, #25
 800143c:	f200 85d3 	bhi.w	8001fe6 <packetRead+0xff6>
 8001440:	a201      	add	r2, pc, #4	; (adr r2, 8001448 <packetRead+0x458>)
 8001442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001446:	bf00      	nop
 8001448:	080014b1 	.word	0x080014b1
 800144c:	080014c9 	.word	0x080014c9
 8001450:	080014e1 	.word	0x080014e1
 8001454:	080015c9 	.word	0x080015c9
 8001458:	0800180f 	.word	0x0800180f
 800145c:	080015c9 	.word	0x080015c9
 8001460:	08001a81 	.word	0x08001a81
 8001464:	08001a85 	.word	0x08001a85
 8001468:	08001fe7 	.word	0x08001fe7
 800146c:	08001aa5 	.word	0x08001aa5
 8001470:	08001ac3 	.word	0x08001ac3
 8001474:	08001b25 	.word	0x08001b25
 8001478:	08001bf3 	.word	0x08001bf3
 800147c:	08001fb7 	.word	0x08001fb7
 8001480:	08001fc7 	.word	0x08001fc7
 8001484:	08001fe7 	.word	0x08001fe7
 8001488:	08001fe7 	.word	0x08001fe7
 800148c:	08001ef3 	.word	0x08001ef3
 8001490:	08001fd7 	.word	0x08001fd7
 8001494:	08001fa7 	.word	0x08001fa7
 8001498:	08001b91 	.word	0x08001b91
 800149c:	08001bbb 	.word	0x08001bbb
 80014a0:	08001fe7 	.word	0x08001fe7
 80014a4:	08001fe7 	.word	0x08001fe7
 80014a8:	08001c2d 	.word	0x08001c2d
 80014ac:	08001d25 	.word	0x08001d25
            {
                // Stop now
                case CMD_STOPNOW:
                {
                    duty_cmd->robot_mode = SCARA_MODE_STOP;
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	2200      	movs	r2, #0
 80014b4:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	2201      	movs	r2, #1
 80014ba:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	2200      	movs	r2, #0
 80014c0:	701a      	strb	r2, [r3, #0]
                    return CMD_STOPNOW;
 80014c2:	2300      	movs	r3, #0
 80014c4:	f000 bd92 	b.w	8001fec <packetRead+0xffc>
                break;

                // Scan limit
                case CMD_SCAN_LIMIT:
                {
                    duty_cmd->robot_mode = SCARA_MODE_SCAN;
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	2201      	movs	r2, #1
 80014cc:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	2201      	movs	r2, #1
 80014d2:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	2200      	movs	r2, #0
 80014d8:	701a      	strb	r2, [r3, #0]
                    return CMD_SCAN_LIMIT;
 80014da:	2301      	movs	r3, #1
 80014dc:	f000 bd86 	b.w	8001fec <packetRead+0xffc>
                break;

                // Move home
                case CMD_MOVE_HOME:
                {
                    if (length == 10){ // 2 int32_t number + 2 define byte
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	2b0a      	cmp	r3, #10
 80014e4:	d15d      	bne.n	80015a2 <packetRead+0x5b2>
						temp_pointer = -2;
 80014e6:	f06f 0301 	mvn.w	r3, #1
 80014ea:	62fb      	str	r3, [r7, #44]	; 0x2c
						duty_cmd->v_factor = B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 80014ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ee:	3304      	adds	r3, #4
 80014f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014f4:	68fa      	ldr	r2, [r7, #12]
 80014f6:	4413      	add	r3, r2
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	ee07 3a90 	vmov	s15, r3
 80014fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001502:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80015b8 <packetRead+0x5c8>
 8001506:	ee67 7a87 	vmul.f32	s15, s15, s14
 800150a:	ee17 0a90 	vmov	r0, s15
 800150e:	f7ff f81b 	bl	8000548 <__aeabi_f2d>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	6839      	ldr	r1, [r7, #0]
 8001518:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
						duty_cmd->a_factor = B2I(temp_pointer)*COR_INVERSE_SCALE;
 800151c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	4413      	add	r3, r2
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	ee07 3a90 	vmov	s15, r3
 8001528:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800152c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80015b8 <packetRead+0x5c8>
 8001530:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001534:	ee17 0a90 	vmov	r0, s15
 8001538:	f7ff f806 	bl	8000548 <__aeabi_f2d>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	6839      	ldr	r1, [r7, #0]
 8001542:	e9c1 236c 	strd	r2, r3, [r1, #432]	; 0x1b0
                    }else{
                        return CMD_ERROR;
                    }
                    duty_cmd->target_point.x = 250;
 8001546:	6839      	ldr	r1, [r7, #0]
 8001548:	f04f 0200 	mov.w	r2, #0
 800154c:	4b1b      	ldr	r3, [pc, #108]	; (80015bc <packetRead+0x5cc>)
 800154e:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
                    duty_cmd->target_point.y = -200;
 8001552:	6839      	ldr	r1, [r7, #0]
 8001554:	f04f 0200 	mov.w	r2, #0
 8001558:	4b19      	ldr	r3, [pc, #100]	; (80015c0 <packetRead+0x5d0>)
 800155a:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
                    duty_cmd->target_point.z = 120;
 800155e:	6839      	ldr	r1, [r7, #0]
 8001560:	f04f 0200 	mov.w	r2, #0
 8001564:	4b17      	ldr	r3, [pc, #92]	; (80015c4 <packetRead+0x5d4>)
 8001566:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
                    duty_cmd->target_point.roll = 0;
 800156a:	6839      	ldr	r1, [r7, #0]
 800156c:	f04f 0200 	mov.w	r2, #0
 8001570:	f04f 0300 	mov.w	r3, #0
 8001574:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88

                    duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	2200      	movs	r2, #0
 800157c:	745a      	strb	r2, [r3, #17]
                    duty_cmd->space_type = DUTY_SPACE_JOINT;
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	2201      	movs	r2, #1
 8001582:	735a      	strb	r2, [r3, #13]
                    duty_cmd->joint_type = DUTY_JOINT_4DOF;
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	2201      	movs	r2, #1
 8001588:	73da      	strb	r2, [r3, #15]
                    duty_cmd->robot_mode = SCARA_MODE_DUTY;
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	2202      	movs	r2, #2
 800158e:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	2201      	movs	r2, #1
 8001594:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	2200      	movs	r2, #0
 800159a:	701a      	strb	r2, [r3, #0]
                    return CMD_MOVE_HOME;
 800159c:	2302      	movs	r3, #2
 800159e:	f000 bd25 	b.w	8001fec <packetRead+0xffc>
                        return CMD_ERROR;
 80015a2:	2316      	movs	r3, #22
 80015a4:	f000 bd22 	b.w	8001fec <packetRead+0xffc>
 80015a8:	20002404 	.word	0x20002404
 80015ac:	20006fa0 	.word	0x20006fa0
 80015b0:	200065c8 	.word	0x200065c8
 80015b4:	20002406 	.word	0x20002406
 80015b8:	358637bd 	.word	0x358637bd
 80015bc:	406f4000 	.word	0x406f4000
 80015c0:	c0690000 	.word	0xc0690000
 80015c4:	405e0000 	.word	0x405e0000

                case CMD_MOVE_JOINT:
                // Move line
                case CMD_MOVE_LINE:
                {
                    if (length == 29){ // 6 int32_t number + 3 byte number + 2 define byte
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	2b1d      	cmp	r3, #29
 80015cc:	f040 8111 	bne.w	80017f2 <packetRead+0x802>
						//scaraSetScanFlag();
						uint8_t mode_init;
						temp_pointer = -2;
 80015d0:	f06f 0301 	mvn.w	r3, #1
 80015d4:	62fb      	str	r3, [r7, #44]	; 0x2c

						duty_cmd->target_point.x = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 80015d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015d8:	3304      	adds	r3, #4
 80015da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	4413      	add	r3, r2
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7fe ff9d 	bl	8000524 <__aeabi_i2d>
 80015ea:	f20f 7324 	addw	r3, pc, #1828	; 0x724
 80015ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f2:	f7ff f801 	bl	80005f8 <__aeabi_dmul>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	6839      	ldr	r1, [r7, #0]
 80015fc:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
						duty_cmd->target_point.y = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001602:	3304      	adds	r3, #4
 8001604:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001608:	68fa      	ldr	r2, [r7, #12]
 800160a:	4413      	add	r3, r2
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4618      	mov	r0, r3
 8001610:	f7fe ff88 	bl	8000524 <__aeabi_i2d>
 8001614:	f20f 63f8 	addw	r3, pc, #1784	; 0x6f8
 8001618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161c:	f7fe ffec 	bl	80005f8 <__aeabi_dmul>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	6839      	ldr	r1, [r7, #0]
 8001626:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
						duty_cmd->target_point.z = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 800162a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800162c:	3304      	adds	r3, #4
 800162e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001632:	68fa      	ldr	r2, [r7, #12]
 8001634:	4413      	add	r3, r2
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f7fe ff73 	bl	8000524 <__aeabi_i2d>
 800163e:	f20f 63d0 	addw	r3, pc, #1744	; 0x6d0
 8001642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001646:	f7fe ffd7 	bl	80005f8 <__aeabi_dmul>
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	6839      	ldr	r1, [r7, #0]
 8001650:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
						duty_cmd->target_point.roll = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001656:	3304      	adds	r3, #4
 8001658:	62fb      	str	r3, [r7, #44]	; 0x2c
 800165a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800165c:	68fa      	ldr	r2, [r7, #12]
 800165e:	4413      	add	r3, r2
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4618      	mov	r0, r3
 8001664:	f7fe ff5e 	bl	8000524 <__aeabi_i2d>
 8001668:	f20f 63a4 	addw	r3, pc, #1700	; 0x6a4
 800166c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001670:	f7fe ffc2 	bl	80005f8 <__aeabi_dmul>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	6839      	ldr	r1, [r7, #0]
 800167a:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
						duty_cmd->v_factor = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 800167e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001680:	3304      	adds	r3, #4
 8001682:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	4413      	add	r3, r2
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f7fe ff49 	bl	8000524 <__aeabi_i2d>
 8001692:	f20f 637c 	addw	r3, pc, #1660	; 0x67c
 8001696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169a:	f7fe ffad 	bl	80005f8 <__aeabi_dmul>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	6839      	ldr	r1, [r7, #0]
 80016a4:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
						mode_init = message[temp_pointer+=4];
 80016a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016aa:	3304      	adds	r3, #4
 80016ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b0:	68fa      	ldr	r2, [r7, #12]
 80016b2:	4413      	add	r3, r2
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	74fb      	strb	r3, [r7, #19]

						if(mode_init == DUTY_MODE_INIT_QVA){
 80016b8:	7cfb      	ldrb	r3, [r7, #19]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d118      	bne.n	80016f0 <packetRead+0x700>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	2200      	movs	r2, #0
 80016c2:	745a      	strb	r2, [r3, #17]
							duty_cmd->a_factor = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 80016c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016c6:	3301      	adds	r3, #1
 80016c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016cc:	68fa      	ldr	r2, [r7, #12]
 80016ce:	4413      	add	r3, r2
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7fe ff26 	bl	8000524 <__aeabi_i2d>
 80016d8:	f20f 6334 	addw	r3, pc, #1588	; 0x634
 80016dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e0:	f7fe ff8a 	bl	80005f8 <__aeabi_dmul>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	6839      	ldr	r1, [r7, #0]
 80016ea:	e9c1 236c 	strd	r2, r3, [r1, #432]	; 0x1b0
 80016ee:	e056      	b.n	800179e <packetRead+0x7ae>
						}else if(mode_init == DUTY_MODE_INIT_QVT){
 80016f0:	7cfb      	ldrb	r3, [r7, #19]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d118      	bne.n	8001728 <packetRead+0x738>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	2201      	movs	r2, #1
 80016fa:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 80016fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016fe:	3301      	adds	r3, #1
 8001700:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001704:	68fa      	ldr	r2, [r7, #12]
 8001706:	4413      	add	r3, r2
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4618      	mov	r0, r3
 800170c:	f7fe ff0a 	bl	8000524 <__aeabi_i2d>
 8001710:	f20f 53fc 	addw	r3, pc, #1532	; 0x5fc
 8001714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001718:	f7fe ff6e 	bl	80005f8 <__aeabi_dmul>
 800171c:	4602      	mov	r2, r0
 800171e:	460b      	mov	r3, r1
 8001720:	6839      	ldr	r1, [r7, #0]
 8001722:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8001726:	e03a      	b.n	800179e <packetRead+0x7ae>
						}else if(mode_init == DUTY_MODE_INIT_QT){
 8001728:	7cfb      	ldrb	r3, [r7, #19]
 800172a:	2b03      	cmp	r3, #3
 800172c:	d118      	bne.n	8001760 <packetRead+0x770>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QT;
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	2203      	movs	r2, #3
 8001732:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 8001734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001736:	3301      	adds	r3, #1
 8001738:	62fb      	str	r3, [r7, #44]	; 0x2c
 800173a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800173c:	68fa      	ldr	r2, [r7, #12]
 800173e:	4413      	add	r3, r2
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f7fe feee 	bl	8000524 <__aeabi_i2d>
 8001748:	f20f 53c4 	addw	r3, pc, #1476	; 0x5c4
 800174c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001750:	f7fe ff52 	bl	80005f8 <__aeabi_dmul>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	6839      	ldr	r1, [r7, #0]
 800175a:	e9c1 2308 	strd	r2, r3, [r1, #32]
 800175e:	e01e      	b.n	800179e <packetRead+0x7ae>
						}else if(mode_init == DUTY_MODE_INIT_QV){
 8001760:	7cfb      	ldrb	r3, [r7, #19]
 8001762:	2b02      	cmp	r3, #2
 8001764:	d118      	bne.n	8001798 <packetRead+0x7a8>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QV;
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	2202      	movs	r2, #2
 800176a:	745a      	strb	r2, [r3, #17]
							duty_cmd->v_factor = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 800176c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800176e:	3301      	adds	r3, #1
 8001770:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001774:	68fa      	ldr	r2, [r7, #12]
 8001776:	4413      	add	r3, r2
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f7fe fed2 	bl	8000524 <__aeabi_i2d>
 8001780:	f20f 538c 	addw	r3, pc, #1420	; 0x58c
 8001784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001788:	f7fe ff36 	bl	80005f8 <__aeabi_dmul>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	6839      	ldr	r1, [r7, #0]
 8001792:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
 8001796:	e002      	b.n	800179e <packetRead+0x7ae>
						}else{
							return CMD_ERROR;
 8001798:	2316      	movs	r3, #22
 800179a:	f000 bc27 	b.w	8001fec <packetRead+0xffc>
						}
						duty_cmd->coordinate_type = message[temp_pointer+=4];
 800179e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017a0:	3304      	adds	r3, #4
 80017a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017a6:	68fa      	ldr	r2, [r7, #12]
 80017a8:	4413      	add	r3, r2
 80017aa:	781a      	ldrb	r2, [r3, #0]
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	731a      	strb	r2, [r3, #12]
						duty_cmd->trajec_type = message[temp_pointer+=1];
 80017b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b2:	3301      	adds	r3, #1
 80017b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b8:	68fa      	ldr	r2, [r7, #12]
 80017ba:	4413      	add	r3, r2
 80017bc:	781a      	ldrb	r2, [r3, #0]
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	741a      	strb	r2, [r3, #16]
						if(command_id == CMD_MOVE_LINE){
 80017c2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80017c6:	2b03      	cmp	r3, #3
 80017c8:	d106      	bne.n	80017d8 <packetRead+0x7e8>
							duty_cmd->path_type = DUTY_PATH_LINE;
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	2200      	movs	r2, #0
 80017ce:	739a      	strb	r2, [r3, #14]
							duty_cmd->space_type = DUTY_SPACE_TASK;
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	2200      	movs	r2, #0
 80017d4:	735a      	strb	r2, [r3, #13]
 80017d6:	e00e      	b.n	80017f6 <packetRead+0x806>
						}else if(command_id == CMD_MOVE_JOINT){
 80017d8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80017dc:	2b05      	cmp	r3, #5
 80017de:	d106      	bne.n	80017ee <packetRead+0x7fe>
							duty_cmd->joint_type = DUTY_JOINT_4DOF;
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	2201      	movs	r2, #1
 80017e4:	73da      	strb	r2, [r3, #15]
							duty_cmd->space_type = DUTY_SPACE_JOINT;
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	2201      	movs	r2, #1
 80017ea:	735a      	strb	r2, [r3, #13]
 80017ec:	e003      	b.n	80017f6 <packetRead+0x806>
						}else{
							return CMD_ERROR;
 80017ee:	2316      	movs	r3, #22
 80017f0:	e3fc      	b.n	8001fec <packetRead+0xffc>
						}

					}else{
						return CMD_ERROR;
 80017f2:	2316      	movs	r3, #22
 80017f4:	e3fa      	b.n	8001fec <packetRead+0xffc>
					}
					duty_cmd->robot_mode = SCARA_MODE_DUTY;
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	2202      	movs	r2, #2
 80017fa:	709a      	strb	r2, [r3, #2]
					duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	2201      	movs	r2, #1
 8001800:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	2200      	movs	r2, #0
 8001806:	701a      	strb	r2, [r3, #0]
					return command_id;
 8001808:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800180c:	e3ee      	b.n	8001fec <packetRead+0xffc>
				break;


				// Move circle
                case CMD_MOVE_CIRCLE:{
                	if(length == 34){ // 7 int32_t number + 4 byte number + 2 define byte
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	2b22      	cmp	r3, #34	; 0x22
 8001812:	f040 8133 	bne.w	8001a7c <packetRead+0xa8c>
                		uint8_t mode_init, arc_type;
                		temp_pointer = -2;
 8001816:	f06f 0301 	mvn.w	r3, #1
 800181a:	62fb      	str	r3, [r7, #44]	; 0x2c
                		duty_cmd->target_point.x      = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 800181c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800181e:	3304      	adds	r3, #4
 8001820:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	4413      	add	r3, r2
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4618      	mov	r0, r3
 800182c:	f7fe fe7a 	bl	8000524 <__aeabi_i2d>
 8001830:	f20f 43dc 	addw	r3, pc, #1244	; 0x4dc
 8001834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001838:	f7fe fede 	bl	80005f8 <__aeabi_dmul>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	6839      	ldr	r1, [r7, #0]
 8001842:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
                		duty_cmd->target_point.y      = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001848:	3304      	adds	r3, #4
 800184a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800184c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	4413      	add	r3, r2
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4618      	mov	r0, r3
 8001856:	f7fe fe65 	bl	8000524 <__aeabi_i2d>
 800185a:	f20f 43b4 	addw	r3, pc, #1204	; 0x4b4
 800185e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001862:	f7fe fec9 	bl	80005f8 <__aeabi_dmul>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	6839      	ldr	r1, [r7, #0]
 800186c:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
                		duty_cmd->sub_point.x 	      = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001872:	3304      	adds	r3, #4
 8001874:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001878:	68fa      	ldr	r2, [r7, #12]
 800187a:	4413      	add	r3, r2
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4618      	mov	r0, r3
 8001880:	f7fe fe50 	bl	8000524 <__aeabi_i2d>
 8001884:	f20f 4388 	addw	r3, pc, #1160	; 0x488
 8001888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800188c:	f7fe feb4 	bl	80005f8 <__aeabi_dmul>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	6839      	ldr	r1, [r7, #0]
 8001896:	e9c1 234c 	strd	r2, r3, [r1, #304]	; 0x130
                		duty_cmd->sub_point.y         = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 800189a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800189c:	3304      	adds	r3, #4
 800189e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	4413      	add	r3, r2
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7fe fe3b 	bl	8000524 <__aeabi_i2d>
 80018ae:	f20f 4360 	addw	r3, pc, #1120	; 0x460
 80018b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b6:	f7fe fe9f 	bl	80005f8 <__aeabi_dmul>
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	6839      	ldr	r1, [r7, #0]
 80018c0:	e9c1 234e 	strd	r2, r3, [r1, #312]	; 0x138
                		duty_cmd->target_point.roll   = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 80018c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018c6:	3304      	adds	r3, #4
 80018c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018cc:	68fa      	ldr	r2, [r7, #12]
 80018ce:	4413      	add	r3, r2
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fe26 	bl	8000524 <__aeabi_i2d>
 80018d8:	f20f 4334 	addw	r3, pc, #1076	; 0x434
 80018dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e0:	f7fe fe8a 	bl	80005f8 <__aeabi_dmul>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	6839      	ldr	r1, [r7, #0]
 80018ea:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
                		duty_cmd->v_factor			  = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 80018ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f0:	3304      	adds	r3, #4
 80018f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	4413      	add	r3, r2
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7fe fe11 	bl	8000524 <__aeabi_i2d>
 8001902:	f20f 430c 	addw	r3, pc, #1036	; 0x40c
 8001906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800190a:	f7fe fe75 	bl	80005f8 <__aeabi_dmul>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	6839      	ldr	r1, [r7, #0]
 8001914:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
                		arc_type = message[temp_pointer+=4];
 8001918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800191a:	3304      	adds	r3, #4
 800191c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800191e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001920:	68fa      	ldr	r2, [r7, #12]
 8001922:	4413      	add	r3, r2
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	757b      	strb	r3, [r7, #21]
                		if(arc_type == ARC_AW_TYPE){
 8001928:	7d7b      	ldrb	r3, [r7, #21]
 800192a:	2b03      	cmp	r3, #3
 800192c:	d103      	bne.n	8001936 <packetRead+0x946>
                			duty_cmd->arc_dir = 1;
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	2201      	movs	r2, #1
 8001932:	615a      	str	r2, [r3, #20]
 8001934:	e009      	b.n	800194a <packetRead+0x95a>
                		}else if(arc_type == ARC_CW_TYPE){
 8001936:	7d7b      	ldrb	r3, [r7, #21]
 8001938:	2b02      	cmp	r3, #2
 800193a:	d104      	bne.n	8001946 <packetRead+0x956>
                			duty_cmd->arc_dir = -1;
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	f04f 32ff 	mov.w	r2, #4294967295
 8001942:	615a      	str	r2, [r3, #20]
 8001944:	e001      	b.n	800194a <packetRead+0x95a>
                		}else{
                			return CMD_ERROR;
 8001946:	2316      	movs	r3, #22
 8001948:	e350      	b.n	8001fec <packetRead+0xffc>
                		}
                		mode_init = message[temp_pointer+=1];
 800194a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800194c:	3301      	adds	r3, #1
 800194e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	4413      	add	r3, r2
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	753b      	strb	r3, [r7, #20]
						if(mode_init == DUTY_MODE_INIT_QVA){
 800195a:	7d3b      	ldrb	r3, [r7, #20]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d117      	bne.n	8001990 <packetRead+0x9a0>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	2200      	movs	r2, #0
 8001964:	745a      	strb	r2, [r3, #17]
							duty_cmd->a_factor = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 8001966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001968:	3301      	adds	r3, #1
 800196a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800196c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800196e:	68fa      	ldr	r2, [r7, #12]
 8001970:	4413      	add	r3, r2
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4618      	mov	r0, r3
 8001976:	f7fe fdd5 	bl	8000524 <__aeabi_i2d>
 800197a:	a3e5      	add	r3, pc, #916	; (adr r3, 8001d10 <packetRead+0xd20>)
 800197c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001980:	f7fe fe3a 	bl	80005f8 <__aeabi_dmul>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	6839      	ldr	r1, [r7, #0]
 800198a:	e9c1 236c 	strd	r2, r3, [r1, #432]	; 0x1b0
 800198e:	e052      	b.n	8001a36 <packetRead+0xa46>
						}else if(mode_init == DUTY_MODE_INIT_QVT){
 8001990:	7d3b      	ldrb	r3, [r7, #20]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d117      	bne.n	80019c6 <packetRead+0x9d6>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	2201      	movs	r2, #1
 800199a:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 800199c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800199e:	3301      	adds	r3, #1
 80019a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a4:	68fa      	ldr	r2, [r7, #12]
 80019a6:	4413      	add	r3, r2
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7fe fdba 	bl	8000524 <__aeabi_i2d>
 80019b0:	a3d7      	add	r3, pc, #860	; (adr r3, 8001d10 <packetRead+0xd20>)
 80019b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b6:	f7fe fe1f 	bl	80005f8 <__aeabi_dmul>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	6839      	ldr	r1, [r7, #0]
 80019c0:	e9c1 2308 	strd	r2, r3, [r1, #32]
 80019c4:	e037      	b.n	8001a36 <packetRead+0xa46>
						}else if(mode_init == DUTY_MODE_INIT_QT){
 80019c6:	7d3b      	ldrb	r3, [r7, #20]
 80019c8:	2b03      	cmp	r3, #3
 80019ca:	d117      	bne.n	80019fc <packetRead+0xa0c>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QT;
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	2203      	movs	r2, #3
 80019d0:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 80019d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019d4:	3301      	adds	r3, #1
 80019d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	4413      	add	r3, r2
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7fe fd9f 	bl	8000524 <__aeabi_i2d>
 80019e6:	a3ca      	add	r3, pc, #808	; (adr r3, 8001d10 <packetRead+0xd20>)
 80019e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ec:	f7fe fe04 	bl	80005f8 <__aeabi_dmul>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	6839      	ldr	r1, [r7, #0]
 80019f6:	e9c1 2308 	strd	r2, r3, [r1, #32]
 80019fa:	e01c      	b.n	8001a36 <packetRead+0xa46>
						}else if(mode_init == DUTY_MODE_INIT_QV){
 80019fc:	7d3b      	ldrb	r3, [r7, #20]
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d117      	bne.n	8001a32 <packetRead+0xa42>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QV;
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	2202      	movs	r2, #2
 8001a06:	745a      	strb	r2, [r3, #17]
							duty_cmd->v_factor = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 8001a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a10:	68fa      	ldr	r2, [r7, #12]
 8001a12:	4413      	add	r3, r2
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7fe fd84 	bl	8000524 <__aeabi_i2d>
 8001a1c:	a3bc      	add	r3, pc, #752	; (adr r3, 8001d10 <packetRead+0xd20>)
 8001a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a22:	f7fe fde9 	bl	80005f8 <__aeabi_dmul>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	6839      	ldr	r1, [r7, #0]
 8001a2c:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
 8001a30:	e001      	b.n	8001a36 <packetRead+0xa46>
						}else{
							return CMD_ERROR;
 8001a32:	2316      	movs	r3, #22
 8001a34:	e2da      	b.n	8001fec <packetRead+0xffc>
						}
						duty_cmd->coordinate_type = message[temp_pointer+=4];
 8001a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a38:	3304      	adds	r3, #4
 8001a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a3e:	68fa      	ldr	r2, [r7, #12]
 8001a40:	4413      	add	r3, r2
 8001a42:	781a      	ldrb	r2, [r3, #0]
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	731a      	strb	r2, [r3, #12]
						duty_cmd->trajec_type = message[temp_pointer+=1];
 8001a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a50:	68fa      	ldr	r2, [r7, #12]
 8001a52:	4413      	add	r3, r2
 8001a54:	781a      	ldrb	r2, [r3, #0]
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	741a      	strb	r2, [r3, #16]
						duty_cmd->path_type = DUTY_PATH_CIRCLE;
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	739a      	strb	r2, [r3, #14]
						duty_cmd->space_type = DUTY_SPACE_TASK;
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	2200      	movs	r2, #0
 8001a64:	735a      	strb	r2, [r3, #13]
                	}else{
                		return CMD_ERROR;
                	}
                	duty_cmd->robot_mode = SCARA_MODE_DUTY;
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	2202      	movs	r2, #2
 8001a6a:	709a      	strb	r2, [r3, #2]
					duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	2200      	movs	r2, #0
 8001a76:	701a      	strb	r2, [r3, #0]
					return CMD_MOVE_CIRCLE;
 8001a78:	2304      	movs	r3, #4
 8001a7a:	e2b7      	b.n	8001fec <packetRead+0xffc>
                		return CMD_ERROR;
 8001a7c:	2316      	movs	r3, #22
 8001a7e:	e2b5      	b.n	8001fec <packetRead+0xffc>
                break;

				// Rotate Single
				case CMD_ROTATE_SINGLE:
				{
					return CMD_ROTATE_SINGLE;
 8001a80:	2306      	movs	r3, #6
 8001a82:	e2b3      	b.n	8001fec <packetRead+0xffc>
				break;

				// Set output
				case CMD_OUTPUT:
				{
					if(length == 3){ // 1 byte output value + 2 byte define
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	2b03      	cmp	r3, #3
 8001a88:	d10a      	bne.n	8001aa0 <packetRead+0xab0>
						temp_pointer = 2;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
						duty_cmd->arc_dir = message[temp_pointer];
 8001a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a90:	68fa      	ldr	r2, [r7, #12]
 8001a92:	4413      	add	r3, r2
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	461a      	mov	r2, r3
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	615a      	str	r2, [r3, #20]
						return CMD_OUTPUT;
 8001a9c:	2307      	movs	r3, #7
 8001a9e:	e2a5      	b.n	8001fec <packetRead+0xffc>
					}else{
						return CMD_ERROR;
 8001aa0:	2316      	movs	r3, #22
 8001aa2:	e2a3      	b.n	8001fec <packetRead+0xffc>
				break;

				// Read position
				case CMD_READ_POSITION:
				{
					if(length == 3){ // 1 byte categorize read type + 2 byte define
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	2b03      	cmp	r3, #3
 8001aa8:	d109      	bne.n	8001abe <packetRead+0xace>
						temp_pointer = 2;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	62fb      	str	r3, [r7, #44]	; 0x2c
						position_type = message[temp_pointer];
 8001aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ab0:	68fa      	ldr	r2, [r7, #12]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	781a      	ldrb	r2, [r3, #0]
 8001ab6:	4b98      	ldr	r3, [pc, #608]	; (8001d18 <packetRead+0xd28>)
 8001ab8:	701a      	strb	r2, [r3, #0]
						return CMD_READ_POSITION;
 8001aba:	2309      	movs	r3, #9
 8001abc:	e296      	b.n	8001fec <packetRead+0xffc>
					}else{
						return CMD_ERROR;
 8001abe:	2316      	movs	r3, #22
 8001ac0:	e294      	b.n	8001fec <packetRead+0xffc>
				break;			

				// Setting
				case CMD_TEST_METHOD_SETTING:
				{
					if (length == 6){ // 4 byte configure + 2 byte define
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	2b06      	cmp	r3, #6
 8001ac6:	d12b      	bne.n	8001b20 <packetRead+0xb30>
						temp_pointer = 2;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	62fb      	str	r3, [r7, #44]	; 0x2c
						test_value_array[0] = message[temp_pointer++];
 8001acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ace:	1c5a      	adds	r2, r3, #1
 8001ad0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	b25a      	sxtb	r2, r3
 8001adc:	4b8f      	ldr	r3, [pc, #572]	; (8001d1c <packetRead+0xd2c>)
 8001ade:	701a      	strb	r2, [r3, #0]
						test_value_array[1] = message[temp_pointer++];
 8001ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae2:	1c5a      	adds	r2, r3, #1
 8001ae4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	4413      	add	r3, r2
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	b25a      	sxtb	r2, r3
 8001af0:	4b8a      	ldr	r3, [pc, #552]	; (8001d1c <packetRead+0xd2c>)
 8001af2:	705a      	strb	r2, [r3, #1]
						test_value_array[2] = message[temp_pointer++];
 8001af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001af6:	1c5a      	adds	r2, r3, #1
 8001af8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001afa:	461a      	mov	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	4413      	add	r3, r2
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	b25a      	sxtb	r2, r3
 8001b04:	4b85      	ldr	r3, [pc, #532]	; (8001d1c <packetRead+0xd2c>)
 8001b06:	709a      	strb	r2, [r3, #2]
						test_value_array[3] = message[temp_pointer++];
 8001b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b0a:	1c5a      	adds	r2, r3, #1
 8001b0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b0e:	461a      	mov	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	4413      	add	r3, r2
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	b25a      	sxtb	r2, r3
 8001b18:	4b80      	ldr	r3, [pc, #512]	; (8001d1c <packetRead+0xd2c>)
 8001b1a:	70da      	strb	r2, [r3, #3]
						return CMD_TEST_METHOD_SETTING;
 8001b1c:	230a      	movs	r3, #10
 8001b1e:	e265      	b.n	8001fec <packetRead+0xffc>
					}else{
						return CMD_ERROR;
 8001b20:	2316      	movs	r3, #22
 8001b22:	e263      	b.n	8001fec <packetRead+0xffc>
				break;

				// Change method
				case CMD_METHOD_CHANGE:
				{
					if(length == 3){ // 1 byte configure + 2 byte define
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	2b03      	cmp	r3, #3
 8001b28:	d130      	bne.n	8001b8c <packetRead+0xb9c>
						uint8_t method;
						temp_pointer = 2;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
						method = message[temp_pointer];
 8001b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b30:	68fa      	ldr	r2, [r7, #12]
 8001b32:	4413      	add	r3, r2
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	75bb      	strb	r3, [r7, #22]
						if (SCARA_METHOD_MANUAL == method) {
 8001b38:	7dbb      	ldrb	r3, [r7, #22]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d103      	bne.n	8001b46 <packetRead+0xb56>
							duty_cmd->robot_method = SCARA_METHOD_MANUAL;
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	2200      	movs	r2, #0
 8001b42:	705a      	strb	r2, [r3, #1]
 8001b44:	e01d      	b.n	8001b82 <packetRead+0xb92>
						} else if (SCARA_METHOD_SEMI_AUTO == method) {
 8001b46:	7dbb      	ldrb	r3, [r7, #22]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d103      	bne.n	8001b54 <packetRead+0xb64>
							duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	705a      	strb	r2, [r3, #1]
 8001b52:	e016      	b.n	8001b82 <packetRead+0xb92>
						} else if (SCARA_METHOD_GCODE == method) {
 8001b54:	7dbb      	ldrb	r3, [r7, #22]
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d103      	bne.n	8001b62 <packetRead+0xb72>
							duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	2202      	movs	r2, #2
 8001b5e:	705a      	strb	r2, [r3, #1]
 8001b60:	e00f      	b.n	8001b82 <packetRead+0xb92>
						}else if(SCARA_METHOD_TEST == method){
 8001b62:	7dbb      	ldrb	r3, [r7, #22]
 8001b64:	2b03      	cmp	r3, #3
 8001b66:	d103      	bne.n	8001b70 <packetRead+0xb80>
							duty_cmd->robot_method = SCARA_METHOD_TEST;
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	2203      	movs	r2, #3
 8001b6c:	705a      	strb	r2, [r3, #1]
 8001b6e:	e008      	b.n	8001b82 <packetRead+0xb92>
						}else if(SCARA_METHOD_PICK_AND_PLACE == method){
 8001b70:	7dbb      	ldrb	r3, [r7, #22]
 8001b72:	2b04      	cmp	r3, #4
 8001b74:	d103      	bne.n	8001b7e <packetRead+0xb8e>
							duty_cmd->robot_method = SCARA_METHOD_PICK_AND_PLACE;
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	2204      	movs	r2, #4
 8001b7a:	705a      	strb	r2, [r3, #1]
 8001b7c:	e001      	b.n	8001b82 <packetRead+0xb92>
						}else {
							return CMD_ERROR;
 8001b7e:	2316      	movs	r3, #22
 8001b80:	e234      	b.n	8001fec <packetRead+0xffc>
						}
						duty_cmd->change_method = TRUE;
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	2201      	movs	r2, #1
 8001b86:	701a      	strb	r2, [r3, #0]
						return CMD_METHOD_CHANGE;
 8001b88:	230b      	movs	r3, #11
 8001b8a:	e22f      	b.n	8001fec <packetRead+0xffc>
					}else{
						return CMD_ERROR;
 8001b8c:	2316      	movs	r3, #22
 8001b8e:	e22d      	b.n	8001fec <packetRead+0xffc>
				break;

				// Set manual key
				case CMD_KEYBOARD:
				{
					if(length == 3){ // 1 byte output value + 2 byte define
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	2b03      	cmp	r3, #3
 8001b94:	d10f      	bne.n	8001bb6 <packetRead+0xbc6>
						int temp_pointer = 2;
 8001b96:	2302      	movs	r3, #2
 8001b98:	61fb      	str	r3, [r7, #28]
						duty_cmd->keyboard = (SCARA_KeyTypeDef)message[temp_pointer];
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	68fa      	ldr	r2, [r7, #12]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	781a      	ldrb	r2, [r3, #0]
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	70da      	strb	r2, [r3, #3]
						duty_cmd->robot_method = SCARA_METHOD_MANUAL;
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	705a      	strb	r2, [r3, #1]
						duty_cmd->change_method = FALSE;
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	701a      	strb	r2, [r3, #0]
						return CMD_KEYBOARD;
 8001bb2:	2314      	movs	r3, #20
 8001bb4:	e21a      	b.n	8001fec <packetRead+0xffc>
					}else{
						return CMD_ERROR;
 8001bb6:	2316      	movs	r3, #22
 8001bb8:	e218      	b.n	8001fec <packetRead+0xffc>
				break;

				// Set manual key speed
				case CMD_KEY_SPEED:
				{
					if(length == 3){ // 1 byte key value + 2 byte define
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	2b03      	cmp	r3, #3
 8001bbe:	d116      	bne.n	8001bee <packetRead+0xbfe>
						int temp_pointer = 2;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	627b      	str	r3, [r7, #36]	; 0x24
						int32_t speed = (int32_t)message[temp_pointer];
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	4413      	add	r3, r2
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	623b      	str	r3, [r7, #32]
						// check limit
						if ((speed < SHIFT_SPEED_MIN) || (speed > SHIFT_SPEED_MAX)) {
 8001bce:	6a3b      	ldr	r3, [r7, #32]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	dd02      	ble.n	8001bda <packetRead+0xbea>
 8001bd4:	6a3b      	ldr	r3, [r7, #32]
 8001bd6:	2b0e      	cmp	r3, #14
 8001bd8:	dd01      	ble.n	8001bde <packetRead+0xbee>
							return CMD_ERROR;
 8001bda:	2316      	movs	r3, #22
 8001bdc:	e206      	b.n	8001fec <packetRead+0xffc>
						}
						duty_cmd->key_speed = speed;
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	6a3a      	ldr	r2, [r7, #32]
 8001be2:	605a      	str	r2, [r3, #4]
						current_key_speed1 = speed;
 8001be4:	4a4e      	ldr	r2, [pc, #312]	; (8001d20 <packetRead+0xd30>)
 8001be6:	6a3b      	ldr	r3, [r7, #32]
 8001be8:	6013      	str	r3, [r2, #0]
						return CMD_KEY_SPEED;
 8001bea:	2315      	movs	r3, #21
 8001bec:	e1fe      	b.n	8001fec <packetRead+0xffc>
					}else{
						return CMD_ERROR;
 8001bee:	2316      	movs	r3, #22
 8001bf0:	e1fc      	b.n	8001fec <packetRead+0xffc>
				break;

				// Set test mode
				case CMD_MOTOR_TEST:
				{
					if(length == 3){ // 1byte key mode + 2 byte define
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	2b03      	cmp	r3, #3
 8001bf6:	d117      	bne.n	8001c28 <packetRead+0xc38>
						int temp_pointer = 2;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	61bb      	str	r3, [r7, #24]
						uint8_t test_key = message[temp_pointer];
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	68fa      	ldr	r2, [r7, #12]
 8001c00:	4413      	add	r3, r2
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	75fb      	strb	r3, [r7, #23]
						if(test_key < 0 || test_key > 8){
 8001c06:	7dfb      	ldrb	r3, [r7, #23]
 8001c08:	2b08      	cmp	r3, #8
 8001c0a:	d901      	bls.n	8001c10 <packetRead+0xc20>
							return CMD_ERROR;
 8001c0c:	2316      	movs	r3, #22
 8001c0e:	e1ed      	b.n	8001fec <packetRead+0xffc>
						}
						duty_cmd->test_key = test_key;
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	7dfa      	ldrb	r2, [r7, #23]
 8001c14:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
						duty_cmd->robot_method = SCARA_METHOD_TEST;	
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	2203      	movs	r2, #3
 8001c1c:	705a      	strb	r2, [r3, #1]
						duty_cmd->change_method = FALSE;
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	2200      	movs	r2, #0
 8001c22:	701a      	strb	r2, [r3, #0]
						return CMD_MOTOR_TEST;
 8001c24:	230c      	movs	r3, #12
 8001c26:	e1e1      	b.n	8001fec <packetRead+0xffc>
					}else{
						return CMD_ERROR;
 8001c28:	2316      	movs	r3, #22
 8001c2a:	e1df      	b.n	8001fec <packetRead+0xffc>
				}
				break;

				case CMD_OBJECT_DETECTED:
				{
					if (length == 15){ // 3 int32_t number + 1 byte object type + 2 define byte
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	2b0f      	cmp	r3, #15
 8001c30:	d16a      	bne.n	8001d08 <packetRead+0xd18>
						temp_pointer = -2;
 8001c32:	f06f 0301 	mvn.w	r3, #1
 8001c36:	62fb      	str	r3, [r7, #44]	; 0x2c
						duty_cmd->target_point.x = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c3a:	3304      	adds	r3, #4
 8001c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c40:	68fa      	ldr	r2, [r7, #12]
 8001c42:	4413      	add	r3, r2
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7fe fc6c 	bl	8000524 <__aeabi_i2d>
 8001c4c:	a330      	add	r3, pc, #192	; (adr r3, 8001d10 <packetRead+0xd20>)
 8001c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c52:	f7fe fcd1 	bl	80005f8 <__aeabi_dmul>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	6839      	ldr	r1, [r7, #0]
 8001c5c:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
						duty_cmd->target_point.y = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c62:	3304      	adds	r3, #4
 8001c64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c68:	68fa      	ldr	r2, [r7, #12]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7fe fc58 	bl	8000524 <__aeabi_i2d>
 8001c74:	a326      	add	r3, pc, #152	; (adr r3, 8001d10 <packetRead+0xd20>)
 8001c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c7a:	f7fe fcbd 	bl	80005f8 <__aeabi_dmul>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	6839      	ldr	r1, [r7, #0]
 8001c84:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
						//duty_cmd->target_point.z = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
						duty_cmd->target_point.roll = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c8a:	3304      	adds	r3, #4
 8001c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c90:	68fa      	ldr	r2, [r7, #12]
 8001c92:	4413      	add	r3, r2
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7fe fc44 	bl	8000524 <__aeabi_i2d>
 8001c9c:	a31c      	add	r3, pc, #112	; (adr r3, 8001d10 <packetRead+0xd20>)
 8001c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca2:	f7fe fca9 	bl	80005f8 <__aeabi_dmul>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	460b      	mov	r3, r1
 8001caa:	6839      	ldr	r1, [r7, #0]
 8001cac:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
						duty_cmd->target_point.object_type = message[temp_pointer+=4];
 8001cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cb2:	3304      	adds	r3, #4
 8001cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	4413      	add	r3, r2
 8001cbc:	781a      	ldrb	r2, [r3, #0]
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
						duty_cmd->target_point.t = (double)(TIM2->CNT);
 8001cc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7fe fc1a 	bl	8000504 <__aeabi_ui2d>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	6839      	ldr	r1, [r7, #0]
 8001cd6:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
						duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	745a      	strb	r2, [r3, #17]
						duty_cmd->path_type = DUTY_PATH_LINE;
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	739a      	strb	r2, [r3, #14]
						duty_cmd->space_type = DUTY_SPACE_TASK;
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	735a      	strb	r2, [r3, #13]
						duty_cmd->coordinate_type = DUTY_COORDINATES_ABS;
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	731a      	strb	r2, [r3, #12]
						duty_cmd->trajec_type = DUTY_TRAJECTORY_SCURVE;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	741a      	strb	r2, [r3, #16]
					}else{
						return CMD_ERROR;
					}
					duty_cmd->robot_method = SCARA_METHOD_PICK_AND_PLACE;
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	2204      	movs	r2, #4
 8001cfc:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	2200      	movs	r2, #0
 8001d02:	701a      	strb	r2, [r3, #0]
					return CMD_OBJECT_DETECTED;
 8001d04:	2318      	movs	r3, #24
 8001d06:	e171      	b.n	8001fec <packetRead+0xffc>
						return CMD_ERROR;
 8001d08:	2316      	movs	r3, #22
 8001d0a:	e16f      	b.n	8001fec <packetRead+0xffc>
 8001d0c:	f3af 8000 	nop.w
 8001d10:	a0000000 	.word	0xa0000000
 8001d14:	3eb0c6f7 	.word	0x3eb0c6f7
 8001d18:	2000dd08 	.word	0x2000dd08
 8001d1c:	20000000 	.word	0x20000000
 8001d20:	20000060 	.word	0x20000060
				}
				break;

				case CMD_SETUP_CONVEYOR_SPEED:
				{
					if (length == 46) { // 11 int32_t number + 2 define byte
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	2b2e      	cmp	r3, #46	; 0x2e
 8001d28:	f040 80e1 	bne.w	8001eee <packetRead+0xefe>
						temp_pointer = -2;
 8001d2c:	f06f 0301 	mvn.w	r3, #1
 8001d30:	62fb      	str	r3, [r7, #44]	; 0x2c
						conveyor_speed           = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d34:	3304      	adds	r3, #4
 8001d36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7fe fbef 	bl	8000524 <__aeabi_i2d>
 8001d46:	a3ac      	add	r3, pc, #688	; (adr r3, 8001ff8 <packetRead+0x1008>)
 8001d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d4c:	f7fe fc54 	bl	80005f8 <__aeabi_dmul>
 8001d50:	4602      	mov	r2, r0
 8001d52:	460b      	mov	r3, r1
 8001d54:	49aa      	ldr	r1, [pc, #680]	; (8002000 <packetRead+0x1010>)
 8001d56:	e9c1 2300 	strd	r2, r3, [r1]
						PUT_DOWN_TIME_ON_SLOT 	 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d5c:	3304      	adds	r3, #4
 8001d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	4413      	add	r3, r2
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7fe fbdb 	bl	8000524 <__aeabi_i2d>
 8001d6e:	a3a2      	add	r3, pc, #648	; (adr r3, 8001ff8 <packetRead+0x1008>)
 8001d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d74:	f7fe fc40 	bl	80005f8 <__aeabi_dmul>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	49a1      	ldr	r1, [pc, #644]	; (8002004 <packetRead+0x1014>)
 8001d7e:	e9c1 2300 	strd	r2, r3, [r1]
						PUT_DOWN_TIME_ON_OBJECT	 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d84:	3304      	adds	r3, #4
 8001d86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7fe fbc7 	bl	8000524 <__aeabi_i2d>
 8001d96:	a398      	add	r3, pc, #608	; (adr r3, 8001ff8 <packetRead+0x1008>)
 8001d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d9c:	f7fe fc2c 	bl	80005f8 <__aeabi_dmul>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	4998      	ldr	r1, [pc, #608]	; (8002008 <packetRead+0x1018>)
 8001da6:	e9c1 2300 	strd	r2, r3, [r1]
						PICK_UP_TIME_ON_OBJECT 	 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dac:	3304      	adds	r3, #4
 8001dae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	4413      	add	r3, r2
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7fe fbb3 	bl	8000524 <__aeabi_i2d>
 8001dbe:	a38e      	add	r3, pc, #568	; (adr r3, 8001ff8 <packetRead+0x1008>)
 8001dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc4:	f7fe fc18 	bl	80005f8 <__aeabi_dmul>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	460b      	mov	r3, r1
 8001dcc:	498f      	ldr	r1, [pc, #572]	; (800200c <packetRead+0x101c>)
 8001dce:	e9c1 2300 	strd	r2, r3, [r1]
						PICK_UP_TIME_ON_SLOT	 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dd4:	3304      	adds	r3, #4
 8001dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	4413      	add	r3, r2
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7fe fb9f 	bl	8000524 <__aeabi_i2d>
 8001de6:	a384      	add	r3, pc, #528	; (adr r3, 8001ff8 <packetRead+0x1008>)
 8001de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dec:	f7fe fc04 	bl	80005f8 <__aeabi_dmul>
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	4986      	ldr	r1, [pc, #536]	; (8002010 <packetRead+0x1020>)
 8001df6:	e9c1 2300 	strd	r2, r3, [r1]
						MOVE_TIME 				 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	4413      	add	r3, r2
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7fe fb8b 	bl	8000524 <__aeabi_i2d>
 8001e0e:	a37a      	add	r3, pc, #488	; (adr r3, 8001ff8 <packetRead+0x1008>)
 8001e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e14:	f7fe fbf0 	bl	80005f8 <__aeabi_dmul>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	497d      	ldr	r1, [pc, #500]	; (8002014 <packetRead+0x1024>)
 8001e1e:	e9c1 2300 	strd	r2, r3, [r1]
						ATTACH_TIME 			 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e24:	3304      	adds	r3, #4
 8001e26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7fe fb77 	bl	8000524 <__aeabi_i2d>
 8001e36:	a370      	add	r3, pc, #448	; (adr r3, 8001ff8 <packetRead+0x1008>)
 8001e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3c:	f7fe fbdc 	bl	80005f8 <__aeabi_dmul>
 8001e40:	4602      	mov	r2, r0
 8001e42:	460b      	mov	r3, r1
 8001e44:	4974      	ldr	r1, [pc, #464]	; (8002018 <packetRead+0x1028>)
 8001e46:	e9c1 2300 	strd	r2, r3, [r1]
						DETACH_TIME 			 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	4413      	add	r3, r2
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7fe fb63 	bl	8000524 <__aeabi_i2d>
 8001e5e:	a366      	add	r3, pc, #408	; (adr r3, 8001ff8 <packetRead+0x1008>)
 8001e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e64:	f7fe fbc8 	bl	80005f8 <__aeabi_dmul>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	496b      	ldr	r1, [pc, #428]	; (800201c <packetRead+0x102c>)
 8001e6e:	e9c1 2300 	strd	r2, r3, [r1]
						UP_HEIGHT 				 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e74:	3304      	adds	r3, #4
 8001e76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7fe fb4f 	bl	8000524 <__aeabi_i2d>
 8001e86:	a35c      	add	r3, pc, #368	; (adr r3, 8001ff8 <packetRead+0x1008>)
 8001e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8c:	f7fe fbb4 	bl	80005f8 <__aeabi_dmul>
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	4962      	ldr	r1, [pc, #392]	; (8002020 <packetRead+0x1030>)
 8001e96:	e9c1 2300 	strd	r2, r3, [r1]
						DOWN_HEIGHT_ON_OBJECT 	 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e9c:	3304      	adds	r3, #4
 8001e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7fe fb3b 	bl	8000524 <__aeabi_i2d>
 8001eae:	a352      	add	r3, pc, #328	; (adr r3, 8001ff8 <packetRead+0x1008>)
 8001eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb4:	f7fe fba0 	bl	80005f8 <__aeabi_dmul>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
 8001ebc:	4959      	ldr	r1, [pc, #356]	; (8002024 <packetRead+0x1034>)
 8001ebe:	e9c1 2300 	strd	r2, r3, [r1]
						DOWN_HEIGHT_ON_SLOT 	 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ec4:	3304      	adds	r3, #4
 8001ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	4413      	add	r3, r2
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7fe fb27 	bl	8000524 <__aeabi_i2d>
 8001ed6:	a348      	add	r3, pc, #288	; (adr r3, 8001ff8 <packetRead+0x1008>)
 8001ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001edc:	f7fe fb8c 	bl	80005f8 <__aeabi_dmul>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	4950      	ldr	r1, [pc, #320]	; (8002028 <packetRead+0x1038>)
 8001ee6:	e9c1 2300 	strd	r2, r3, [r1]
						return CMD_SETUP_CONVEYOR_SPEED;
 8001eea:	2319      	movs	r3, #25
 8001eec:	e07e      	b.n	8001fec <packetRead+0xffc>
					}else{
						return CMD_ERROR;
 8001eee:	2316      	movs	r3, #22
 8001ef0:	e07c      	b.n	8001fec <packetRead+0xffc>
					}
				}
				break;
				case CMD_GCODE_CONFIGURE:
				{
					if(length == 18) { // 4 int32_t number + 2 define byte
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	2b12      	cmp	r3, #18
 8001ef6:	d154      	bne.n	8001fa2 <packetRead+0xfb2>
						temp_pointer = -2;
 8001ef8:	f06f 0301 	mvn.w	r3, #1
 8001efc:	62fb      	str	r3, [r7, #44]	; 0x2c
						offset_x = 	(double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f00:	3304      	adds	r3, #4
 8001f02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	4413      	add	r3, r2
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7fe fb09 	bl	8000524 <__aeabi_i2d>
 8001f12:	a339      	add	r3, pc, #228	; (adr r3, 8001ff8 <packetRead+0x1008>)
 8001f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f18:	f7fe fb6e 	bl	80005f8 <__aeabi_dmul>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	4942      	ldr	r1, [pc, #264]	; (800202c <packetRead+0x103c>)
 8001f22:	e9c1 2300 	strd	r2, r3, [r1]
						offset_y = 	(double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f28:	3304      	adds	r3, #4
 8001f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	4413      	add	r3, r2
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7fe faf5 	bl	8000524 <__aeabi_i2d>
 8001f3a:	a32f      	add	r3, pc, #188	; (adr r3, 8001ff8 <packetRead+0x1008>)
 8001f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f40:	f7fe fb5a 	bl	80005f8 <__aeabi_dmul>
 8001f44:	4602      	mov	r2, r0
 8001f46:	460b      	mov	r3, r1
 8001f48:	4939      	ldr	r1, [pc, #228]	; (8002030 <packetRead+0x1040>)
 8001f4a:	e9c1 2300 	strd	r2, r3, [r1]
						offset_z = 	(double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f50:	3304      	adds	r3, #4
 8001f52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	4413      	add	r3, r2
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7fe fae1 	bl	8000524 <__aeabi_i2d>
 8001f62:	a325      	add	r3, pc, #148	; (adr r3, 8001ff8 <packetRead+0x1008>)
 8001f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f68:	f7fe fb46 	bl	80005f8 <__aeabi_dmul>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	460b      	mov	r3, r1
 8001f70:	4930      	ldr	r1, [pc, #192]	; (8002034 <packetRead+0x1044>)
 8001f72:	e9c1 2300 	strd	r2, r3, [r1]
						roll_angle =(double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f78:	3304      	adds	r3, #4
 8001f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	4413      	add	r3, r2
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7fe facd 	bl	8000524 <__aeabi_i2d>
 8001f8a:	a31b      	add	r3, pc, #108	; (adr r3, 8001ff8 <packetRead+0x1008>)
 8001f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f90:	f7fe fb32 	bl	80005f8 <__aeabi_dmul>
 8001f94:	4602      	mov	r2, r0
 8001f96:	460b      	mov	r3, r1
 8001f98:	4927      	ldr	r1, [pc, #156]	; (8002038 <packetRead+0x1048>)
 8001f9a:	e9c1 2300 	strd	r2, r3, [r1]
						return CMD_GCODE_CONFIGURE;
 8001f9e:	2311      	movs	r3, #17
 8001fa0:	e024      	b.n	8001fec <packetRead+0xffc>
					}else{
						return CMD_ERROR;
 8001fa2:	2316      	movs	r3, #22
 8001fa4:	e022      	b.n	8001fec <packetRead+0xffc>
					}
				}
				break;
				case CMD_GCODE_RUN:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	2202      	movs	r2, #2
 8001faa:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_RUN;
 8001fb2:	2313      	movs	r3, #19
 8001fb4:	e01a      	b.n	8001fec <packetRead+0xffc>
				}
				break;
				case CMD_GCODE_STOP:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	2202      	movs	r2, #2
 8001fba:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_STOP;
 8001fc2:	230d      	movs	r3, #13
 8001fc4:	e012      	b.n	8001fec <packetRead+0xffc>
				}
				break;
				case CMD_GCODE_PAUSE:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	2202      	movs	r2, #2
 8001fca:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_PAUSE;
 8001fd2:	230e      	movs	r3, #14
 8001fd4:	e00a      	b.n	8001fec <packetRead+0xffc>
				}
				break;
				case CMD_GCODE_RESUME:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	2202      	movs	r2, #2
 8001fda:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_RESUME;
 8001fe2:	2312      	movs	r3, #18
 8001fe4:	e002      	b.n	8001fec <packetRead+0xffc>
				}
				break;
				//Unknow command id
				default:
				{
					return CMD_ERROR;
 8001fe6:	2316      	movs	r3, #22
 8001fe8:	e000      	b.n	8001fec <packetRead+0xffc>
        break;

        //unknow protocol id
        default:
        {
            return PROTOCOL_ERROR;
 8001fea:	2317      	movs	r3, #23
        }
    }
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3730      	adds	r7, #48	; 0x30
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	f3af 8000 	nop.w
 8001ff8:	a0000000 	.word	0xa0000000
 8001ffc:	3eb0c6f7 	.word	0x3eb0c6f7
 8002000:	20000058 	.word	0x20000058
 8002004:	20000008 	.word	0x20000008
 8002008:	20000010 	.word	0x20000010
 800200c:	20000018 	.word	0x20000018
 8002010:	20000020 	.word	0x20000020
 8002014:	20000028 	.word	0x20000028
 8002018:	20000030 	.word	0x20000030
 800201c:	20000038 	.word	0x20000038
 8002020:	20000040 	.word	0x20000040
 8002024:	20000048 	.word	0x20000048
 8002028:	20000050 	.word	0x20000050
 800202c:	20006f88 	.word	0x20006f88
 8002030:	2000dd20 	.word	0x2000dd20
 8002034:	2000dd10 	.word	0x2000dd10
 8002038:	20006f80 	.word	0x20006f80

0800203c <commandReply>:

Robot_RespondTypedef	commandReply	(Robot_CommandTypedef cmd_type,
										DUTY_Command_TypeDef duty_cmd,
										uint8_t *detail, int32_t *detail_length) {
 800203c:	b082      	sub	sp, #8
 800203e:	b580      	push	{r7, lr}
 8002040:	b0e2      	sub	sp, #392	; 0x188
 8002042:	af2e      	add	r7, sp, #184	; 0xb8
 8002044:	4601      	mov	r1, r0
 8002046:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 800204a:	e880 000c 	stmia.w	r0, {r2, r3}
 800204e:	460b      	mov	r3, r1
 8002050:	71fb      	strb	r3, [r7, #7]
	Robot_RespondTypedef ret;

	switch(cmd_type) {
 8002052:	79fb      	ldrb	r3, [r7, #7]
 8002054:	2b1a      	cmp	r3, #26
 8002056:	f200 815e 	bhi.w	8002316 <commandReply+0x2da>
 800205a:	a201      	add	r2, pc, #4	; (adr r2, 8002060 <commandReply+0x24>)
 800205c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002060:	080020cd 	.word	0x080020cd
 8002064:	080020cd 	.word	0x080020cd
 8002068:	080020cd 	.word	0x080020cd
 800206c:	080020cd 	.word	0x080020cd
 8002070:	080020cd 	.word	0x080020cd
 8002074:	080020cd 	.word	0x080020cd
 8002078:	080020cd 	.word	0x080020cd
 800207c:	080020d5 	.word	0x080020d5
 8002080:	0800214f 	.word	0x0800214f
 8002084:	08002183 	.word	0x08002183
 8002088:	08002219 	.word	0x08002219
 800208c:	08002243 	.word	0x08002243
 8002090:	080020cd 	.word	0x080020cd
 8002094:	080022a5 	.word	0x080022a5
 8002098:	080022a5 	.word	0x080022a5
 800209c:	080022a5 	.word	0x080022a5
 80020a0:	080022a5 	.word	0x080022a5
 80020a4:	08002283 	.word	0x08002283
 80020a8:	080022a5 	.word	0x080022a5
 80020ac:	080022a5 	.word	0x080022a5
 80020b0:	080022ad 	.word	0x080022ad
 80020b4:	080022b5 	.word	0x080022b5
 80020b8:	080022f5 	.word	0x080022f5
 80020bc:	08002317 	.word	0x08002317
 80020c0:	080020cd 	.word	0x080020cd
 80020c4:	0800223b 	.word	0x0800223b
 80020c8:	0800224b 	.word	0x0800224b
	case CMD_MOTOR_TEST:
	case CMD_MOVE_CIRCLE:
	case CMD_MOVE_JOINT:
	case CMD_OBJECT_DETECTED:
	case CMD_ROTATE_SINGLE:
		ret = RPD_DUTY;
 80020cc:	2309      	movs	r3, #9
 80020ce:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 80020d2:	e130      	b.n	8002336 <commandReply+0x2fa>
	case CMD_OUTPUT:
		{
			if (1 == duty_cmd.arc_dir) {
 80020d4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d110      	bne.n	80020fe <commandReply+0xc2>
				scaraSetOutput(1);
 80020dc:	2001      	movs	r0, #1
 80020de:	f008 f957 	bl	800a390 <scaraSetOutput>
				// strcpy( (char *)detail, "Output ON");
				// detail_length += 9;
				detail[(*detail_length)++] = OUTPUT_ON;
 80020e2:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	1c59      	adds	r1, r3, #1
 80020ea:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80020ee:	6011      	str	r1, [r2, #0]
 80020f0:	461a      	mov	r2, r3
 80020f2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80020f6:	4413      	add	r3, r2
 80020f8:	220d      	movs	r2, #13
 80020fa:	701a      	strb	r2, [r3, #0]
 80020fc:	e023      	b.n	8002146 <commandReply+0x10a>
			} else if (0 == duty_cmd.arc_dir) {
 80020fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002102:	2b00      	cmp	r3, #0
 8002104:	d110      	bne.n	8002128 <commandReply+0xec>
				scaraSetOutput(0);
 8002106:	2000      	movs	r0, #0
 8002108:	f008 f942 	bl	800a390 <scaraSetOutput>
				detail[(*detail_length)++] = OUTPUT_OFF;
 800210c:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	1c59      	adds	r1, r3, #1
 8002114:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002118:	6011      	str	r1, [r2, #0]
 800211a:	461a      	mov	r2, r3
 800211c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8002120:	4413      	add	r3, r2
 8002122:	220e      	movs	r2, #14
 8002124:	701a      	strb	r2, [r3, #0]
 8002126:	e00e      	b.n	8002146 <commandReply+0x10a>
			} else {
				// strcpy( (char *)detail, "Wrong Value");
				// detail_length += 11;
				detail[(*detail_length)++] = WRONG_OUTPUT_VALUE ;
 8002128:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	1c59      	adds	r1, r3, #1
 8002130:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002134:	6011      	str	r1, [r2, #0]
 8002136:	461a      	mov	r2, r3
 8002138:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800213c:	4413      	add	r3, r2
 800213e:	220f      	movs	r2, #15
 8002140:	701a      	strb	r2, [r3, #0]
				return RPD_ERROR;
 8002142:	2307      	movs	r3, #7
 8002144:	e0f9      	b.n	800233a <commandReply+0x2fe>
			}
			ret = RPD_OK;
 8002146:	2308      	movs	r3, #8
 8002148:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		}
		break;
 800214c:	e0f3      	b.n	8002336 <commandReply+0x2fa>
	case CMD_READ_STATUS:
		{
			SCARA_ModeTypeDef		current_mode;
			SCARA_DutyStateTypeDef 	current_state;
			current_mode	 = scaraGetMode();
 800214e:	f008 f981 	bl	800a454 <scaraGetMode>
 8002152:	4603      	mov	r3, r0
 8002154:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
			current_state	 = scaraGetDutyState();
 8002158:	f008 f994 	bl	800a484 <scaraGetDutyState>
 800215c:	4603      	mov	r3, r0
 800215e:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
			if ( SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_state) {
 8002162:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8002166:	2b02      	cmp	r3, #2
 8002168:	d107      	bne.n	800217a <commandReply+0x13e>
 800216a:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 800216e:	2b00      	cmp	r3, #0
 8002170:	d103      	bne.n	800217a <commandReply+0x13e>
				ret = RPD_IDLE;
 8002172:	2300      	movs	r3, #0
 8002174:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			} else {
				ret = RPD_BUSY;
			}
		}
		break;
 8002178:	e0dd      	b.n	8002336 <commandReply+0x2fa>
				ret = RPD_BUSY;
 800217a:	2301      	movs	r3, #1
 800217c:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8002180:	e0d9      	b.n	8002336 <commandReply+0x2fa>
	case CMD_READ_POSITION:
		{
			SCARA_PositionTypeDef position;
			if(position_type == REAL_POSITION_DATA || position_type == REAL_POSITION_DATA_PLUS_UPDATE){
 8002182:	4b71      	ldr	r3, [pc, #452]	; (8002348 <commandReply+0x30c>)
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <commandReply+0x156>
 800218a:	4b6f      	ldr	r3, [pc, #444]	; (8002348 <commandReply+0x30c>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d113      	bne.n	80021ba <commandReply+0x17e>
				lowlayer_readTruePosition(&position);
 8002192:	f107 0308 	add.w	r3, r7, #8
 8002196:	4618      	mov	r0, r3
 8002198:	f003 fd8a 	bl	8005cb0 <lowlayer_readTruePosition>
				kinematicForward(&position);
 800219c:	f107 0308 	add.w	r3, r7, #8
 80021a0:	4618      	mov	r0, r3
 80021a2:	f002 fe61 	bl	8004e68 <kinematicForward>
				if(position_type == REAL_POSITION_DATA_PLUS_UPDATE){
 80021a6:	4b68      	ldr	r3, [pc, #416]	; (8002348 <commandReply+0x30c>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d11e      	bne.n	80021ec <commandReply+0x1b0>
					scaraUpdatePosition(&position);
 80021ae:	f107 0308 	add.w	r3, r7, #8
 80021b2:	4618      	mov	r0, r3
 80021b4:	f008 f93e 	bl	800a434 <scaraUpdatePosition>
				if(position_type == REAL_POSITION_DATA_PLUS_UPDATE){
 80021b8:	e018      	b.n	80021ec <commandReply+0x1b0>
				}
			}else if(position_type == ESTIMATE_POSITION_DATA){
 80021ba:	4b63      	ldr	r3, [pc, #396]	; (8002348 <commandReply+0x30c>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d105      	bne.n	80021ce <commandReply+0x192>
				scaraGetPosition(&position);
 80021c2:	f107 0308 	add.w	r3, r7, #8
 80021c6:	4618      	mov	r0, r3
 80021c8:	f008 f924 	bl	800a414 <scaraGetPosition>
 80021cc:	e00e      	b.n	80021ec <commandReply+0x1b0>
			}else{
				detail[(*detail_length)++] = WRONG_READ_POSITION_TYPE;
 80021ce:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	1c59      	adds	r1, r3, #1
 80021d6:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80021da:	6011      	str	r1, [r2, #0]
 80021dc:	461a      	mov	r2, r3
 80021de:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80021e2:	4413      	add	r3, r2
 80021e4:	2210      	movs	r2, #16
 80021e6:	701a      	strb	r2, [r3, #0]
				return RPD_ERROR;
 80021e8:	2307      	movs	r3, #7
 80021ea:	e0a6      	b.n	800233a <commandReply+0x2fe>
			}
			*detail_length = scaraPosition_packaging(detail, position);
 80021ec:	4668      	mov	r0, sp
 80021ee:	f107 0310 	add.w	r3, r7, #16
 80021f2:	22b8      	movs	r2, #184	; 0xb8
 80021f4:	4619      	mov	r1, r3
 80021f6:	f013 fd7b 	bl	8015cf0 <memcpy>
 80021fa:	f107 0308 	add.w	r3, r7, #8
 80021fe:	cb0c      	ldmia	r3, {r2, r3}
 8002200:	f8d7 0298 	ldr.w	r0, [r7, #664]	; 0x298
 8002204:	f008 f970 	bl	800a4e8 <scaraPosition_packaging>
 8002208:	4602      	mov	r2, r0
 800220a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800220e:	601a      	str	r2, [r3, #0]
			ret =  RPD_POSITION;
 8002210:	2302      	movs	r3, #2
 8002212:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		}
		break;
 8002216:	e08e      	b.n	8002336 <commandReply+0x2fa>
	case CMD_TEST_METHOD_SETTING:
		detail[(*detail_length)++] = TEST_VALUE_SETTING;
 8002218:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	1c59      	adds	r1, r3, #1
 8002220:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002224:	6011      	str	r1, [r2, #0]
 8002226:	461a      	mov	r2, r3
 8002228:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800222c:	4413      	add	r3, r2
 800222e:	2211      	movs	r2, #17
 8002230:	701a      	strb	r2, [r3, #0]
		ret = RPD_OK;
 8002232:	2308      	movs	r3, #8
 8002234:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8002238:	e07d      	b.n	8002336 <commandReply+0x2fa>
	case CMD_SETUP_CONVEYOR_SPEED:
		ret = RPD_OK;
 800223a:	2308      	movs	r3, #8
 800223c:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8002240:	e079      	b.n	8002336 <commandReply+0x2fa>
	case CMD_METHOD_CHANGE:
		ret = RPD_DUTY;
 8002242:	2309      	movs	r3, #9
 8002244:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8002248:	e075      	b.n	8002336 <commandReply+0x2fa>
	case CMD_GCODE:{
		if(point_counter == total_num_of_point){
 800224a:	4b40      	ldr	r3, [pc, #256]	; (800234c <commandReply+0x310>)
 800224c:	881b      	ldrh	r3, [r3, #0]
 800224e:	461a      	mov	r2, r3
 8002250:	4b3f      	ldr	r3, [pc, #252]	; (8002350 <commandReply+0x314>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	429a      	cmp	r2, r3
 8002256:	d110      	bne.n	800227a <commandReply+0x23e>
			detail[(*detail_length)++] = GCODE_TRANSFER_FINISH;
 8002258:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	1c59      	adds	r1, r3, #1
 8002260:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002264:	6011      	str	r1, [r2, #0]
 8002266:	461a      	mov	r2, r3
 8002268:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800226c:	4413      	add	r3, r2
 800226e:	221e      	movs	r2, #30
 8002270:	701a      	strb	r2, [r3, #0]
			ret = RPD_OK;
 8002272:	2308      	movs	r3, #8
 8002274:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		}else{
			ret = RPD_TRANSFER;
		}
	}
	break;
 8002278:	e05d      	b.n	8002336 <commandReply+0x2fa>
			ret = RPD_TRANSFER;
 800227a:	230a      	movs	r3, #10
 800227c:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	break;
 8002280:	e059      	b.n	8002336 <commandReply+0x2fa>
	case CMD_GCODE_CONFIGURE:
	{
		detail[(*detail_length)++] = GCODE_OFFSET_CONFIGURE;
 8002282:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	1c59      	adds	r1, r3, #1
 800228a:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 800228e:	6011      	str	r1, [r2, #0]
 8002290:	461a      	mov	r2, r3
 8002292:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8002296:	4413      	add	r3, r2
 8002298:	221f      	movs	r2, #31
 800229a:	701a      	strb	r2, [r3, #0]
		ret = RPD_OK;
 800229c:	2308      	movs	r3, #8
 800229e:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	}
	break;
 80022a2:	e048      	b.n	8002336 <commandReply+0x2fa>
	case CMD_GCODE_PAUSE:
	case CMD_JOB_PUSH_MOVE_LINE:
	case CMD_JOB_PUSH_MOVE_JOINT:
	case CMD_GCODE_RESUME:
	case CMD_GCODE_RUN:
		ret = RPD_DUTY;
 80022a4:	2309      	movs	r3, #9
 80022a6:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 80022aa:	e044      	b.n	8002336 <commandReply+0x2fa>
	case CMD_KEYBOARD:
		ret = RPD_DUTY;
 80022ac:	2309      	movs	r3, #9
 80022ae:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 80022b2:	e040      	b.n	8002336 <commandReply+0x2fa>
	case CMD_KEY_SPEED:{
		detail[(*detail_length)++] = MANUAL_SPEED;
 80022b4:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	1c59      	adds	r1, r3, #1
 80022bc:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80022c0:	6011      	str	r1, [r2, #0]
 80022c2:	461a      	mov	r2, r3
 80022c4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80022c8:	4413      	add	r3, r2
 80022ca:	2216      	movs	r2, #22
 80022cc:	701a      	strb	r2, [r3, #0]
		detail[(*detail_length)++] = (uint8_t)(duty_cmd.key_speed);
 80022ce:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80022d2:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	1c59      	adds	r1, r3, #1
 80022da:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80022de:	6011      	str	r1, [r2, #0]
 80022e0:	461a      	mov	r2, r3
 80022e2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80022e6:	4413      	add	r3, r2
 80022e8:	b2c2      	uxtb	r2, r0
 80022ea:	701a      	strb	r2, [r3, #0]
		ret = RPD_OK;
 80022ec:	2308      	movs	r3, #8
 80022ee:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	}
		break;
 80022f2:	e020      	b.n	8002336 <commandReply+0x2fa>
	case CMD_ERROR:{
		detail[(*detail_length)++] = CHECK_PARAMETER;
 80022f4:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	1c59      	adds	r1, r3, #1
 80022fc:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002300:	6011      	str	r1, [r2, #0]
 8002302:	461a      	mov	r2, r3
 8002304:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8002308:	4413      	add	r3, r2
 800230a:	2215      	movs	r2, #21
 800230c:	701a      	strb	r2, [r3, #0]
		ret = RPD_ERROR;
 800230e:	2307      	movs	r3, #7
 8002310:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	}
		break;
 8002314:	e00f      	b.n	8002336 <commandReply+0x2fa>
	default:
		detail[(*detail_length)++] = UNKNOW_COMMAND;
 8002316:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	1c59      	adds	r1, r3, #1
 800231e:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002322:	6011      	str	r1, [r2, #0]
 8002324:	461a      	mov	r2, r3
 8002326:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800232a:	4413      	add	r3, r2
 800232c:	2217      	movs	r2, #23
 800232e:	701a      	strb	r2, [r3, #0]
		ret = RPD_ERROR;
 8002330:	2307      	movs	r3, #7
 8002332:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	}
	return ret;
 8002336:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
}
 800233a:	4618      	mov	r0, r3
 800233c:	37d0      	adds	r7, #208	; 0xd0
 800233e:	46bd      	mov	sp, r7
 8002340:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002344:	b002      	add	sp, #8
 8002346:	4770      	bx	lr
 8002348:	2000dd08 	.word	0x2000dd08
 800234c:	20002404 	.word	0x20002404
 8002350:	20006f90 	.word	0x20006f90

08002354 <commandRespond1>:

int32_t				commandRespond1	(Robot_RespondTypedef rpd,
										int32_t id_command,
										char *detail,
										int32_t detail_length,
										char *respond) {
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	60b9      	str	r1, [r7, #8]
 800235c:	607a      	str	r2, [r7, #4]
 800235e:	603b      	str	r3, [r7, #0]
 8002360:	4603      	mov	r3, r0
 8002362:	73fb      	strb	r3, [r7, #15]
	int32_t out_length = 0;
 8002364:	2300      	movs	r3, #0
 8002366:	617b      	str	r3, [r7, #20]
	respond[out_length++] = 0x28;
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	1c5a      	adds	r2, r3, #1
 800236c:	617a      	str	r2, [r7, #20]
 800236e:	461a      	mov	r2, r3
 8002370:	6a3b      	ldr	r3, [r7, #32]
 8002372:	4413      	add	r3, r2
 8002374:	2228      	movs	r2, #40	; 0x28
 8002376:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = 0;
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	1c5a      	adds	r2, r3, #1
 800237c:	617a      	str	r2, [r7, #20]
 800237e:	461a      	mov	r2, r3
 8002380:	6a3b      	ldr	r3, [r7, #32]
 8002382:	4413      	add	r3, r2
 8002384:	2200      	movs	r2, #0
 8002386:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = RESPONSE_TRANSMISION;
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	1c5a      	adds	r2, r3, #1
 800238c:	617a      	str	r2, [r7, #20]
 800238e:	461a      	mov	r2, r3
 8002390:	6a3b      	ldr	r3, [r7, #32]
 8002392:	4413      	add	r3, r2
 8002394:	2202      	movs	r2, #2
 8002396:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = rpd;
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	1c5a      	adds	r2, r3, #1
 800239c:	617a      	str	r2, [r7, #20]
 800239e:	461a      	mov	r2, r3
 80023a0:	6a3b      	ldr	r3, [r7, #32]
 80023a2:	4413      	add	r3, r2
 80023a4:	7bfa      	ldrb	r2, [r7, #15]
 80023a6:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = id_command;
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	1c5a      	adds	r2, r3, #1
 80023ac:	617a      	str	r2, [r7, #20]
 80023ae:	461a      	mov	r2, r3
 80023b0:	6a3b      	ldr	r3, [r7, #32]
 80023b2:	4413      	add	r3, r2
 80023b4:	68ba      	ldr	r2, [r7, #8]
 80023b6:	b2d2      	uxtb	r2, r2
 80023b8:	701a      	strb	r2, [r3, #0]
	if(detail_length != 0){
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d00c      	beq.n	80023da <commandRespond1+0x86>
		memcpy(&respond[out_length], detail, detail_length);
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	6a3a      	ldr	r2, [r7, #32]
 80023c4:	4413      	add	r3, r2
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	6879      	ldr	r1, [r7, #4]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f013 fc90 	bl	8015cf0 <memcpy>
		out_length += detail_length;
 80023d0:	697a      	ldr	r2, [r7, #20]
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	4413      	add	r3, r2
 80023d6:	617b      	str	r3, [r7, #20]
 80023d8:	e007      	b.n	80023ea <commandRespond1+0x96>
	}else{
		respond[out_length++] = NONE;
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	1c5a      	adds	r2, r3, #1
 80023de:	617a      	str	r2, [r7, #20]
 80023e0:	461a      	mov	r2, r3
 80023e2:	6a3b      	ldr	r3, [r7, #32]
 80023e4:	4413      	add	r3, r2
 80023e6:	2225      	movs	r2, #37	; 0x25
 80023e8:	701a      	strb	r2, [r3, #0]
	}
	respond[out_length++] = 0x7d;
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	1c5a      	adds	r2, r3, #1
 80023ee:	617a      	str	r2, [r7, #20]
 80023f0:	461a      	mov	r2, r3
 80023f2:	6a3b      	ldr	r3, [r7, #32]
 80023f4:	4413      	add	r3, r2
 80023f6:	227d      	movs	r2, #125	; 0x7d
 80023f8:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = 0x29;
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	1c5a      	adds	r2, r3, #1
 80023fe:	617a      	str	r2, [r7, #20]
 8002400:	461a      	mov	r2, r3
 8002402:	6a3b      	ldr	r3, [r7, #32]
 8002404:	4413      	add	r3, r2
 8002406:	2229      	movs	r2, #41	; 0x29
 8002408:	701a      	strb	r2, [r3, #0]
	respond[1] = out_length - 2;
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	b2da      	uxtb	r2, r3
 800240e:	6a3b      	ldr	r3, [r7, #32]
 8002410:	3301      	adds	r3, #1
 8002412:	3a02      	subs	r2, #2
 8002414:	b2d2      	uxtb	r2, r2
 8002416:	701a      	strb	r2, [r3, #0]
	return out_length;
 8002418:	697b      	ldr	r3, [r7, #20]
}
 800241a:	4618      	mov	r0, r3
 800241c:	3718      	adds	r7, #24
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
	...

08002424 <LOG_REPORT>:
 *  line		: line code number
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t LOG_REPORT(char *message, uint16_t line) {
 8002424:	b580      	push	{r7, lr}
 8002426:	b096      	sub	sp, #88	; 0x58
 8002428:	af02      	add	r7, sp, #8
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	460b      	mov	r3, r1
 800242e:	807b      	strh	r3, [r7, #2]
	uint8_t temp_buff[64];
	int32_t len;

	len = snprintf((char*)temp_buff, 63, "%d, %s \r\n", line, message);
 8002430:	887a      	ldrh	r2, [r7, #2]
 8002432:	f107 0008 	add.w	r0, r7, #8
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	9300      	str	r3, [sp, #0]
 800243a:	4613      	mov	r3, r2
 800243c:	4a17      	ldr	r2, [pc, #92]	; (800249c <LOG_REPORT+0x78>)
 800243e:	213f      	movs	r1, #63	; 0x3f
 8002440:	f014 fbc0 	bl	8016bc4 <sniprintf>
 8002444:	64f8      	str	r0, [r7, #76]	; 0x4c
	if (-1 == len) {
 8002446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800244c:	d101      	bne.n	8002452 <LOG_REPORT+0x2e>
		return FALSE;
 800244e:	2300      	movs	r3, #0
 8002450:	e01f      	b.n	8002492 <LOG_REPORT+0x6e>
	}
	ringBuff_PushArray(&uart_tx_ringbuff, temp_buff, len);
 8002452:	f107 0308 	add.w	r3, r7, #8
 8002456:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002458:	4619      	mov	r1, r3
 800245a:	4811      	ldr	r0, [pc, #68]	; (80024a0 <LOG_REPORT+0x7c>)
 800245c:	f003 f948 	bl	80056f0 <ringBuff_PushArray>
	if (HAL_DMA_GetState(&hdma_uart4_tx) == HAL_DMA_STATE_BUSY) {
 8002460:	4810      	ldr	r0, [pc, #64]	; (80024a4 <LOG_REPORT+0x80>)
 8002462:	f009 fb9f 	bl	800bba4 <HAL_DMA_GetState>
 8002466:	4603      	mov	r3, r0
 8002468:	2b02      	cmp	r3, #2
 800246a:	d101      	bne.n	8002470 <LOG_REPORT+0x4c>
		return TRUE;
 800246c:	2301      	movs	r3, #1
 800246e:	e010      	b.n	8002492 <LOG_REPORT+0x6e>
	}// dma busy
	uint16_t size_dma;
	size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 8002470:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002474:	490c      	ldr	r1, [pc, #48]	; (80024a8 <LOG_REPORT+0x84>)
 8002476:	480a      	ldr	r0, [pc, #40]	; (80024a0 <LOG_REPORT+0x7c>)
 8002478:	f003 f962 	bl	8005740 <ringBuff_PopArray>
 800247c:	4603      	mov	r3, r0
 800247e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 8002482:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002486:	461a      	mov	r2, r3
 8002488:	4907      	ldr	r1, [pc, #28]	; (80024a8 <LOG_REPORT+0x84>)
 800248a:	4808      	ldr	r0, [pc, #32]	; (80024ac <LOG_REPORT+0x88>)
 800248c:	f00c f926 	bl	800e6dc <HAL_UART_Transmit_DMA>
	return TRUE;
 8002490:	2301      	movs	r3, #1
}
 8002492:	4618      	mov	r0, r3
 8002494:	3750      	adds	r7, #80	; 0x50
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	0801bfa0 	.word	0x0801bfa0
 80024a0:	20001070 	.word	0x20001070
 80024a4:	2000edf8 	.word	0x2000edf8
 80024a8:	2000dd28 	.word	0x2000dd28
 80024ac:	2000edb8 	.word	0x2000edb8

080024b0 <unPackPayload>:
 *  in_lenght		: lenght of input_buff
 *
 *  returns:		: lenght of output_buff
 *  				  -1 if error
 */
int32_t	unPackPayload	(uint8_t *message_buff, int32_t in_length, uint8_t*data_packet) {
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]

	int32_t data_length = in_length - 2;
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	3b02      	subs	r3, #2
 80024c0:	617b      	str	r3, [r7, #20]
	//check packet length
	if(message_buff[1] == data_length && backup_available == 0){
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	3301      	adds	r3, #1
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	461a      	mov	r2, r3
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d119      	bne.n	8002504 <unPackPayload+0x54>
 80024d0:	4b2e      	ldr	r3, [pc, #184]	; (800258c <unPackPayload+0xdc>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d115      	bne.n	8002504 <unPackPayload+0x54>
		// check minimum lenght
		if (in_length < MIN_MESSAGE_LENGHT) {
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	2b03      	cmp	r3, #3
 80024dc:	dc02      	bgt.n	80024e4 <unPackPayload+0x34>
			return -1;
 80024de:	f04f 33ff 	mov.w	r3, #4294967295
 80024e2:	e04f      	b.n	8002584 <unPackPayload+0xd4>
		}

		// check start char
		if(message_buff[0] != START_CHAR){
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b28      	cmp	r3, #40	; 0x28
 80024ea:	d002      	beq.n	80024f2 <unPackPayload+0x42>
			return -1;
 80024ec:	f04f 33ff 	mov.w	r3, #4294967295
 80024f0:	e048      	b.n	8002584 <unPackPayload+0xd4>
		}
		memcpy(data_packet, &message_buff[2], data_length - RECEIVE_END_LENGTH);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	1c99      	adds	r1, r3, #2
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	3b02      	subs	r3, #2
 80024fa:	461a      	mov	r2, r3
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f013 fbf7 	bl	8015cf0 <memcpy>
 8002502:	e03d      	b.n	8002580 <unPackPayload+0xd0>
	}else if(message_buff[1] != data_length && backup_available == 0){
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	3301      	adds	r3, #1
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	461a      	mov	r2, r3
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	4293      	cmp	r3, r2
 8002510:	d01b      	beq.n	800254a <unPackPayload+0x9a>
 8002512:	4b1e      	ldr	r3, [pc, #120]	; (800258c <unPackPayload+0xdc>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d117      	bne.n	800254a <unPackPayload+0x9a>
		backup_available = 1;
 800251a:	4b1c      	ldr	r3, [pc, #112]	; (800258c <unPackPayload+0xdc>)
 800251c:	2201      	movs	r2, #1
 800251e:	701a      	strb	r2, [r3, #0]
		// check start char
		if(message_buff[0] != START_CHAR){
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	2b28      	cmp	r3, #40	; 0x28
 8002526:	d002      	beq.n	800252e <unPackPayload+0x7e>
			return -1;
 8002528:	f04f 33ff 	mov.w	r3, #4294967295
 800252c:	e02a      	b.n	8002584 <unPackPayload+0xd4>
		}
		memcpy(data_packet, &message_buff[2], data_length);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	3302      	adds	r3, #2
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	4619      	mov	r1, r3
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f013 fbda 	bl	8015cf0 <memcpy>
		backup_length = data_length;
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	b2da      	uxtb	r2, r3
 8002540:	4b13      	ldr	r3, [pc, #76]	; (8002590 <unPackPayload+0xe0>)
 8002542:	701a      	strb	r2, [r3, #0]
		return - 1;
 8002544:	f04f 33ff 	mov.w	r3, #4294967295
 8002548:	e01c      	b.n	8002584 <unPackPayload+0xd4>
	}else if(backup_available == 1){
 800254a:	4b10      	ldr	r3, [pc, #64]	; (800258c <unPackPayload+0xdc>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d113      	bne.n	800257a <unPackPayload+0xca>
		backup_available = 0;
 8002552:	4b0e      	ldr	r3, [pc, #56]	; (800258c <unPackPayload+0xdc>)
 8002554:	2200      	movs	r2, #0
 8002556:	701a      	strb	r2, [r3, #0]
		memcpy(&data_packet[backup_length], message_buff, in_length);
 8002558:	4b0d      	ldr	r3, [pc, #52]	; (8002590 <unPackPayload+0xe0>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	461a      	mov	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4413      	add	r3, r2
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	68f9      	ldr	r1, [r7, #12]
 8002566:	4618      	mov	r0, r3
 8002568:	f013 fbc2 	bl	8015cf0 <memcpy>
		data_length = backup_length + in_length;
 800256c:	4b08      	ldr	r3, [pc, #32]	; (8002590 <unPackPayload+0xe0>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	461a      	mov	r2, r3
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	4413      	add	r3, r2
 8002576:	617b      	str	r3, [r7, #20]
 8002578:	e002      	b.n	8002580 <unPackPayload+0xd0>
	}else{
		return - 1;
 800257a:	f04f 33ff 	mov.w	r3, #4294967295
 800257e:	e001      	b.n	8002584 <unPackPayload+0xd4>
	}


	return data_length - RECEIVE_END_LENGTH;
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	3b02      	subs	r3, #2
}
 8002584:	4618      	mov	r0, r3
 8002586:	3718      	adds	r7, #24
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	2000de28 	.word	0x2000de28
 8002590:	2000de29 	.word	0x2000de29

08002594 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	607b      	str	r3, [r7, #4]
 800259e:	4b0c      	ldr	r3, [pc, #48]	; (80025d0 <MX_DMA_Init+0x3c>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	4a0b      	ldr	r2, [pc, #44]	; (80025d0 <MX_DMA_Init+0x3c>)
 80025a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025a8:	6313      	str	r3, [r2, #48]	; 0x30
 80025aa:	4b09      	ldr	r3, [pc, #36]	; (80025d0 <MX_DMA_Init+0x3c>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025b2:	607b      	str	r3, [r7, #4]
 80025b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 80025b6:	2200      	movs	r2, #0
 80025b8:	2105      	movs	r1, #5
 80025ba:	200f      	movs	r0, #15
 80025bc:	f009 f816 	bl	800b5ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80025c0:	200f      	movs	r0, #15
 80025c2:	f009 f82f 	bl	800b624 <HAL_NVIC_EnableIRQ>

}
 80025c6:	bf00      	nop
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40023800 	.word	0x40023800

080025d4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	4a07      	ldr	r2, [pc, #28]	; (8002600 <vApplicationGetIdleTaskMemory+0x2c>)
 80025e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	4a06      	ldr	r2, [pc, #24]	; (8002604 <vApplicationGetIdleTaskMemory+0x30>)
 80025ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025f2:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80025f4:	bf00      	nop
 80025f6:	3714      	adds	r7, #20
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	20002408 	.word	0x20002408
 8002604:	2000245c 	.word	0x2000245c

08002608 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002608:	b5b0      	push	{r4, r5, r7, lr}
 800260a:	b094      	sub	sp, #80	; 0x50
 800260c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
       
  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of usbTxMutex */
  osMutexDef(usbTxMutex);
 800260e:	2300      	movs	r3, #0
 8002610:	64bb      	str	r3, [r7, #72]	; 0x48
 8002612:	2300      	movs	r3, #0
 8002614:	64fb      	str	r3, [r7, #76]	; 0x4c
  usbTxMutexHandle = osMutexCreate(osMutex(usbTxMutex));
 8002616:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800261a:	4618      	mov	r0, r3
 800261c:	f010 f86a 	bl	80126f4 <osMutexCreate>
 8002620:	4603      	mov	r3, r0
 8002622:	4a1d      	ldr	r2, [pc, #116]	; (8002698 <MX_FREERTOS_Init+0x90>)
 8002624:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	  /* Create the queue(s) */
	  /* definition and creation of commandMail */
	  osMailQDef(commandMail, 1, DUTY_Command_TypeDef);
 8002626:	2301      	movs	r3, #1
 8002628:	63bb      	str	r3, [r7, #56]	; 0x38
 800262a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800262e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002630:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002634:	643b      	str	r3, [r7, #64]	; 0x40
	  commandMailHandle = osMailCreate(osMailQ(commandMail), NULL);
 8002636:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800263a:	2100      	movs	r1, #0
 800263c:	4618      	mov	r0, r3
 800263e:	f010 f971 	bl	8012924 <osMailCreate>
 8002642:	4603      	mov	r3, r0
 8002644:	4a15      	ldr	r2, [pc, #84]	; (800269c <MX_FREERTOS_Init+0x94>)
 8002646:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityHigh, 0, 2060);
 8002648:	4b15      	ldr	r3, [pc, #84]	; (80026a0 <MX_FREERTOS_Init+0x98>)
 800264a:	f107 041c 	add.w	r4, r7, #28
 800264e:	461d      	mov	r5, r3
 8002650:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002652:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002654:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002658:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800265c:	f107 031c 	add.w	r3, r7, #28
 8002660:	2100      	movs	r1, #0
 8002662:	4618      	mov	r0, r3
 8002664:	f00f ff59 	bl	801251a <osThreadCreate>
 8002668:	4603      	mov	r3, r0
 800266a:	4a0e      	ldr	r2, [pc, #56]	; (80026a4 <MX_FREERTOS_Init+0x9c>)
 800266c:	6013      	str	r3, [r2, #0]

  /* definition and creation of USB_RX_Check_ */
  osThreadDef(USB_RX_Check_, Start_USB_RX_Task, osPriorityNormal, 0, 1024);
 800266e:	4b0e      	ldr	r3, [pc, #56]	; (80026a8 <MX_FREERTOS_Init+0xa0>)
 8002670:	463c      	mov	r4, r7
 8002672:	461d      	mov	r5, r3
 8002674:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002676:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002678:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800267c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  USB_RX_Check_Handle = osThreadCreate(osThread(USB_RX_Check_), NULL);
 8002680:	463b      	mov	r3, r7
 8002682:	2100      	movs	r1, #0
 8002684:	4618      	mov	r0, r3
 8002686:	f00f ff48 	bl	801251a <osThreadCreate>
 800268a:	4603      	mov	r3, r0
 800268c:	4a07      	ldr	r2, [pc, #28]	; (80026ac <MX_FREERTOS_Init+0xa4>)
 800268e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002690:	bf00      	nop
 8002692:	3750      	adds	r7, #80	; 0x50
 8002694:	46bd      	mov	sp, r7
 8002696:	bdb0      	pop	{r4, r5, r7, pc}
 8002698:	2000de30 	.word	0x2000de30
 800269c:	2000de34 	.word	0x2000de34
 80026a0:	0801bfdc 	.word	0x0801bfdc
 80026a4:	2000de2c 	.word	0x2000de2c
 80026a8:	0801bff8 	.word	0x0801bff8
 80026ac:	2000de38 	.word	0x2000de38

080026b0 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80026b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026b2:	f5ad 5d8f 	sub.w	sp, sp, #4576	; 0x11e0
 80026b6:	b081      	sub	sp, #4
 80026b8:	af6c      	add	r7, sp, #432	; 0x1b0
 80026ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80026be:	3b14      	subs	r3, #20
 80026c0:	6018      	str	r0, [r3, #0]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80026c2:	f012 fd8b 	bl	80151dc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  HAL_GPIO_WritePin(USB_SIGN_GPIO_Port, USB_SIGN_Pin, GPIO_PIN_SET); // Pull-up Resistor
 80026c6:	2201      	movs	r2, #1
 80026c8:	2110      	movs	r1, #16
 80026ca:	48c7      	ldr	r0, [pc, #796]	; (80029e8 <StartDefaultTask+0x338>)
 80026cc:	f009 fcf4 	bl	800c0b8 <HAL_GPIO_WritePin>

  osEvent 				ret_mail;
  DUTY_Command_TypeDef 	duty_cmd;
  DUTY_Command_TypeDef 	*dataMail;
  uint8_t 				isNewDuty = FALSE;
 80026d0:	2300      	movs	r3, #0
 80026d2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80026d6:	f102 020f 	add.w	r2, r2, #15
 80026da:	7013      	strb	r3, [r2, #0]
  int32_t					current_key_speed;
  double						run_time;

  SCARA_Pick_And_Place_Package Object[8];
  SCARA_Pick_And_Place_State  operation_state;
  uint8_t object_tail_pointer = 0;
 80026dc:	2300      	movs	r3, #0
 80026de:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80026e2:	f102 020e 	add.w	r2, r2, #14
 80026e6:	7013      	strb	r3, [r2, #0]
  uint8_t object_head_pointer = 0;
 80026e8:	2300      	movs	r3, #0
 80026ea:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80026ee:	f102 020d 	add.w	r2, r2, #13
 80026f2:	7013      	strb	r3, [r2, #0]
  double state_time = 0;
 80026f4:	f04f 0200 	mov.w	r2, #0
 80026f8:	f04f 0300 	mov.w	r3, #0
 80026fc:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8002700:	e9c1 2300 	strd	r2, r3, [r1]
  int run_point = 0;
 8002704:	2300      	movs	r3, #0
 8002706:	f8c7 3ffc 	str.w	r3, [r7, #4092]	; 0xffc
  const SCARA_Slot_TypeDef SLot_Cordinate[NUM_OF_OBJECT] = {
 800270a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800270e:	3b10      	subs	r3, #16
 8002710:	4ab6      	ldr	r2, [pc, #728]	; (80029ec <StartDefaultTask+0x33c>)
 8002712:	4618      	mov	r0, r3
 8002714:	4611      	mov	r1, r2
 8002716:	2390      	movs	r3, #144	; 0x90
 8002718:	461a      	mov	r2, r3
 800271a:	f013 fae9 	bl	8015cf0 <memcpy>
  		{259.568f, -45.056f, 0.0f} ,
		{262.279f, -14.61f, 0.0f} ,
		{264.560f, 15.48f, 0.0f}
  };

  LOG_REPORT("free_rtos.c: PROGRAM START...", __LINE__);
 800271e:	21e6      	movs	r1, #230	; 0xe6
 8002720:	48b3      	ldr	r0, [pc, #716]	; (80029f0 <StartDefaultTask+0x340>)
 8002722:	f7ff fe7f 	bl	8002424 <LOG_REPORT>

  // Init value
  current_method = scaraGetMethod();
 8002726:	f007 fea1 	bl	800a46c <scaraGetMethod>
 800272a:	4603      	mov	r3, r0
 800272c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002730:	f102 0207 	add.w	r2, r2, #7
 8002734:	7013      	strb	r3, [r2, #0]
  current_mode	 = scaraGetMode();
 8002736:	f007 fe8d 	bl	800a454 <scaraGetMode>
 800273a:	4603      	mov	r3, r0
 800273c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002740:	f102 0206 	add.w	r2, r2, #6
 8002744:	7013      	strb	r3, [r2, #0]
  current_duty_state	 = scaraGetDutyState();
 8002746:	f007 fe9d 	bl	800a484 <scaraGetDutyState>
 800274a:	4603      	mov	r3, r0
 800274c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002750:	f102 0205 	add.w	r2, r2, #5
 8002754:	7013      	strb	r3, [r2, #0]

  // Start up robot
  scaraStartup();
 8002756:	f003 ffc7 	bl	80066e8 <scaraStartup>
  osDelay(10);
 800275a:	200a      	movs	r0, #10
 800275c:	f00f ff29 	bl	80125b2 <osDelay>
//   positionNext.Theta2 = PI/3;
//   positionNext.D3 = 10;
//   positionNext.Theta4 = 0;
//   positionNext.t = 0;

  positionNext.Theta1 = -1.48267f;
 8002760:	49a4      	ldr	r1, [pc, #656]	; (80029f4 <StartDefaultTask+0x344>)
 8002762:	a399      	add	r3, pc, #612	; (adr r3, 80029c8 <StartDefaultTask+0x318>)
 8002764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002768:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
  positionNext.Theta2 = 2.35575f;
 800276c:	49a1      	ldr	r1, [pc, #644]	; (80029f4 <StartDefaultTask+0x344>)
 800276e:	a398      	add	r3, pc, #608	; (adr r3, 80029d0 <StartDefaultTask+0x320>)
 8002770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002774:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
  positionNext.D3 = 0.034999;
 8002778:	499e      	ldr	r1, [pc, #632]	; (80029f4 <StartDefaultTask+0x344>)
 800277a:	a397      	add	r3, pc, #604	; (adr r3, 80029d8 <StartDefaultTask+0x328>)
 800277c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002780:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
  positionNext.Theta4 = 2.96586;
 8002784:	499b      	ldr	r1, [pc, #620]	; (80029f4 <StartDefaultTask+0x344>)
 8002786:	a396      	add	r3, pc, #600	; (adr r3, 80029e0 <StartDefaultTask+0x330>)
 8002788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800278c:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
  positionNext.t = 0;
 8002790:	4998      	ldr	r1, [pc, #608]	; (80029f4 <StartDefaultTask+0x344>)
 8002792:	f04f 0200 	mov.w	r2, #0
 8002796:	f04f 0300 	mov.w	r3, #0
 800279a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

  kinematicForward(&positionNext);
 800279e:	4895      	ldr	r0, [pc, #596]	; (80029f4 <StartDefaultTask+0x344>)
 80027a0:	f002 fb62 	bl	8004e68 <kinematicForward>
  /* Infinite loop */
//Start Timer 7
	  HAL_TIM_Base_Start_IT(&htim7);
 80027a4:	4894      	ldr	r0, [pc, #592]	; (80029f8 <StartDefaultTask+0x348>)
 80027a6:	f00b fb68 	bl	800de7a <HAL_TIM_Base_Start_IT>

  for(;;)
  {
	  /*---------Wait for Timer Trigger-----------*/
	  osSignalWait(0x01, osWaitForever); // Very Important
 80027aa:	f107 0310 	add.w	r3, r7, #16
 80027ae:	3b08      	subs	r3, #8
 80027b0:	f04f 32ff 	mov.w	r2, #4294967295
 80027b4:	2101      	movs	r1, #1
 80027b6:	4618      	mov	r0, r3
 80027b8:	f00f ff50 	bl	801265c <osSignalWait>
	  /* 1--- Reset Value ---*/
	  respond_lenght		= 0;
 80027bc:	2300      	movs	r3, #0
 80027be:	f8c7 3ff4 	str.w	r3, [r7, #4084]	; 0xff4
	  respond_packed_lenght = 0;
 80027c2:	2300      	movs	r3, #0
 80027c4:	f8c7 3ff0 	str.w	r3, [r7, #4080]	; 0xff0
	  infor_lenght			= 0;
 80027c8:	2300      	movs	r3, #0
 80027ca:	f8c7 3fec 	str.w	r3, [r7, #4076]	; 0xfec
	  infor_packed_lenght	= 0;
 80027ce:	2300      	movs	r3, #0
 80027d0:	f8c7 3fe8 	str.w	r3, [r7, #4072]	; 0xfe8
	  task_usb_lenght		= 0;
 80027d4:	2300      	movs	r3, #0
 80027d6:	f8c7 3fe4 	str.w	r3, [r7, #4068]	; 0xfe4
	  usb_lenght			= 0;
 80027da:	2300      	movs	r3, #0
 80027dc:	f8c7 3fe0 	str.w	r3, [r7, #4064]	; 0xfe0
	  total_respond_length  = 0;
 80027e0:	2300      	movs	r3, #0
 80027e2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80027e6:	f102 0208 	add.w	r2, r2, #8
 80027ea:	6013      	str	r3, [r2, #0]
	  detail_ptr 			= 0;
 80027ec:	2300      	movs	r3, #0
 80027ee:	f8c7 3fdc 	str.w	r3, [r7, #4060]	; 0xfdc
	  // Update new position
	  memcpy(&positionPrevios, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 80027f2:	4a82      	ldr	r2, [pc, #520]	; (80029fc <StartDefaultTask+0x34c>)
 80027f4:	4b82      	ldr	r3, [pc, #520]	; (8002a00 <StartDefaultTask+0x350>)
 80027f6:	4610      	mov	r0, r2
 80027f8:	4619      	mov	r1, r3
 80027fa:	23c0      	movs	r3, #192	; 0xc0
 80027fc:	461a      	mov	r2, r3
 80027fe:	f013 fa77 	bl	8015cf0 <memcpy>
	  memcpy(&positionCurrent, &positionNext, sizeof(SCARA_PositionTypeDef));
 8002802:	4a7f      	ldr	r2, [pc, #508]	; (8002a00 <StartDefaultTask+0x350>)
 8002804:	4b7b      	ldr	r3, [pc, #492]	; (80029f4 <StartDefaultTask+0x344>)
 8002806:	4610      	mov	r0, r2
 8002808:	4619      	mov	r1, r3
 800280a:	23c0      	movs	r3, #192	; 0xc0
 800280c:	461a      	mov	r2, r3
 800280e:	f013 fa6f 	bl	8015cf0 <memcpy>

	  /* 2--- Check New Duty Phase ---*/
	  // Check mail
	  ret_mail = osMailGet(commandMailHandle, 0);
 8002812:	4b7c      	ldr	r3, [pc, #496]	; (8002a04 <StartDefaultTask+0x354>)
 8002814:	6819      	ldr	r1, [r3, #0]
 8002816:	f607 73bc 	addw	r3, r7, #4028	; 0xfbc
 800281a:	2200      	movs	r2, #0
 800281c:	4618      	mov	r0, r3
 800281e:	f010 f92d 	bl	8012a7c <osMailGet>
	  if ( ret_mail.status == osEventMail) {
 8002822:	f8d7 3fbc 	ldr.w	r3, [r7, #4028]	; 0xfbc
 8002826:	2b20      	cmp	r3, #32
 8002828:	d119      	bne.n	800285e <StartDefaultTask+0x1ae>
		   dataMail = ret_mail.value.p;
 800282a:	f8d7 3fc0 	ldr.w	r3, [r7, #4032]	; 0xfc0
 800282e:	f8c7 3fd8 	str.w	r3, [r7, #4056]	; 0xfd8
		   memcpy( &duty_cmd, dataMail, sizeof(DUTY_Command_TypeDef));
 8002832:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002836:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800283a:	f8d7 1fd8 	ldr.w	r1, [r7, #4056]	; 0xfd8
 800283e:	4618      	mov	r0, r3
 8002840:	f013 fa56 	bl	8015cf0 <memcpy>
		   isNewDuty = TRUE;
 8002844:	2301      	movs	r3, #1
 8002846:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800284a:	f102 020f 	add.w	r2, r2, #15
 800284e:	7013      	strb	r3, [r2, #0]
		   osMailFree(commandMailHandle, dataMail);/* free memory allocated for mail */
 8002850:	4b6c      	ldr	r3, [pc, #432]	; (8002a04 <StartDefaultTask+0x354>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f8d7 1fd8 	ldr.w	r1, [r7, #4056]	; 0xfd8
 8002858:	4618      	mov	r0, r3
 800285a:	f010 f983 	bl	8012b64 <osMailFree>
	  }
	  if(isNewDuty) {
 800285e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002862:	f103 030f 	add.w	r3, r3, #15
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	f000 847a 	beq.w	8003162 <StartDefaultTask+0xab2>
		  if (duty_cmd.change_method == TRUE) {
 800286e:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	2b01      	cmp	r3, #1
 8002876:	f040 8140 	bne.w	8002afa <StartDefaultTask+0x44a>
			  //vPortFree(Gcode_Cor);
			  if (SCARA_METHOD_MANUAL == duty_cmd.robot_method) {
 800287a:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 800287e:	785b      	ldrb	r3, [r3, #1]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d132      	bne.n	80028ea <StartDefaultTask+0x23a>
				  // Need add check condition idle in each method
				  current_method = SCARA_METHOD_MANUAL;
 8002884:	2300      	movs	r3, #0
 8002886:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800288a:	f102 0207 	add.w	r2, r2, #7
 800288e:	7013      	strb	r3, [r2, #0]
				  current_duty_state = SCARA_DUTY_STATE_READY;
 8002890:	2300      	movs	r3, #0
 8002892:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002896:	f102 0205 	add.w	r2, r2, #5
 800289a:	7013      	strb	r3, [r2, #0]
				detail_array[0] = MANUAL_METHOD;
 800289c:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 80028a0:	2218      	movs	r2, #24
 80028a2:	701a      	strb	r2, [r3, #0]
				respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80028a4:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 80028a8:	6899      	ldr	r1, [r3, #8]
 80028aa:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 80028ae:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80028b2:	f103 0308 	add.w	r3, r3, #8
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4413      	add	r3, r2
 80028ba:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 80028be:	9300      	str	r3, [sp, #0]
 80028c0:	2301      	movs	r3, #1
 80028c2:	2008      	movs	r0, #8
 80028c4:	f7ff fd46 	bl	8002354 <commandRespond1>
 80028c8:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
				total_respond_length += respond_lenght;
 80028cc:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80028d0:	f103 0308 	add.w	r3, r3, #8
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 80028da:	4413      	add	r3, r2
 80028dc:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80028e0:	f102 0208 	add.w	r2, r2, #8
 80028e4:	6013      	str	r3, [r2, #0]
 80028e6:	f000 bc36 	b.w	8003156 <StartDefaultTask+0xaa6>
			  } else if (SCARA_METHOD_SEMI_AUTO == duty_cmd.robot_method) {
 80028ea:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 80028ee:	785b      	ldrb	r3, [r3, #1]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d131      	bne.n	8002958 <StartDefaultTask+0x2a8>
				  current_method = SCARA_METHOD_SEMI_AUTO;
 80028f4:	2301      	movs	r3, #1
 80028f6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80028fa:	f102 0207 	add.w	r2, r2, #7
 80028fe:	7013      	strb	r3, [r2, #0]
				  current_duty_state = SCARA_DUTY_STATE_READY;
 8002900:	2300      	movs	r3, #0
 8002902:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002906:	f102 0205 	add.w	r2, r2, #5
 800290a:	7013      	strb	r3, [r2, #0]
				detail_array[0] = SEMI_AUTO_METHOD;
 800290c:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8002910:	2219      	movs	r2, #25
 8002912:	701a      	strb	r2, [r3, #0]
				respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002914:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002918:	6899      	ldr	r1, [r3, #8]
 800291a:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 800291e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002922:	f103 0308 	add.w	r3, r3, #8
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4413      	add	r3, r2
 800292a:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 800292e:	9300      	str	r3, [sp, #0]
 8002930:	2301      	movs	r3, #1
 8002932:	2008      	movs	r0, #8
 8002934:	f7ff fd0e 	bl	8002354 <commandRespond1>
 8002938:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
				total_respond_length += respond_lenght;
 800293c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002940:	f103 0308 	add.w	r3, r3, #8
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 800294a:	4413      	add	r3, r2
 800294c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002950:	f102 0208 	add.w	r2, r2, #8
 8002954:	6013      	str	r3, [r2, #0]
 8002956:	e3fe      	b.n	8003156 <StartDefaultTask+0xaa6>
			  } else if (SCARA_METHOD_GCODE == duty_cmd.robot_method) {
 8002958:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 800295c:	785b      	ldrb	r3, [r3, #1]
 800295e:	2b02      	cmp	r3, #2
 8002960:	d152      	bne.n	8002a08 <StartDefaultTask+0x358>
//				  Gcode_Cor = pvPortMalloc(total_num_of_point*sizeof(SCARA_Gcode_Cor_TypeDef));
//					if(Gcode_Cor == NULL){
//					  int t =2;
//					}
				  current_duty_state = SCARA_DUTY_STATE_READY;
 8002962:	2300      	movs	r3, #0
 8002964:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002968:	f102 0205 	add.w	r2, r2, #5
 800296c:	7013      	strb	r3, [r2, #0]
				  current_method = SCARA_METHOD_GCODE;
 800296e:	2302      	movs	r3, #2
 8002970:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002974:	f102 0207 	add.w	r2, r2, #7
 8002978:	7013      	strb	r3, [r2, #0]
				  detail_array[0] = GCODE_METHOD;
 800297a:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 800297e:	221a      	movs	r2, #26
 8002980:	701a      	strb	r2, [r3, #0]
				respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002982:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002986:	6899      	ldr	r1, [r3, #8]
 8002988:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 800298c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002990:	f103 0308 	add.w	r3, r3, #8
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4413      	add	r3, r2
 8002998:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 800299c:	9300      	str	r3, [sp, #0]
 800299e:	2301      	movs	r3, #1
 80029a0:	2008      	movs	r0, #8
 80029a2:	f7ff fcd7 	bl	8002354 <commandRespond1>
 80029a6:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
				total_respond_length += respond_lenght;
 80029aa:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80029ae:	f103 0308 	add.w	r3, r3, #8
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 80029b8:	4413      	add	r3, r2
 80029ba:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80029be:	f102 0208 	add.w	r2, r2, #8
 80029c2:	6013      	str	r3, [r2, #0]
 80029c4:	e3c7      	b.n	8003156 <StartDefaultTask+0xaa6>
 80029c6:	bf00      	nop
 80029c8:	20000000 	.word	0x20000000
 80029cc:	bff7b904 	.word	0xbff7b904
 80029d0:	80000000 	.word	0x80000000
 80029d4:	4002d893 	.word	0x4002d893
 80029d8:	90c91080 	.word	0x90c91080
 80029dc:	3fa1eb63 	.word	0x3fa1eb63
 80029e0:	cec41dd2 	.word	0xcec41dd2
 80029e4:	4007ba14 	.word	0x4007ba14
 80029e8:	40020400 	.word	0x40020400
 80029ec:	0801c0f8 	.word	0x0801c0f8
 80029f0:	0801c014 	.word	0x0801c014
 80029f4:	2000ec38 	.word	0x2000ec38
 80029f8:	2000ed78 	.word	0x2000ed78
 80029fc:	2000e938 	.word	0x2000e938
 8002a00:	2000eab8 	.word	0x2000eab8
 8002a04:	2000de34 	.word	0x2000de34
			  }else if(SCARA_METHOD_TEST == duty_cmd.robot_method){
 8002a08:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002a0c:	785b      	ldrb	r3, [r3, #1]
 8002a0e:	2b03      	cmp	r3, #3
 8002a10:	d13b      	bne.n	8002a8a <StartDefaultTask+0x3da>
				  test_value[0] = 0;
 8002a12:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8002a16:	2200      	movs	r2, #0
 8002a18:	701a      	strb	r2, [r3, #0]
				  test_value[1] = 0;
 8002a1a:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8002a1e:	2200      	movs	r2, #0
 8002a20:	705a      	strb	r2, [r3, #1]
				  test_value[2] = 0;
 8002a22:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8002a26:	2200      	movs	r2, #0
 8002a28:	709a      	strb	r2, [r3, #2]
				  test_value[3] = 0;
 8002a2a:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8002a2e:	2200      	movs	r2, #0
 8002a30:	70da      	strb	r2, [r3, #3]
				  current_method = SCARA_METHOD_TEST;
 8002a32:	2303      	movs	r3, #3
 8002a34:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002a38:	f102 0207 	add.w	r2, r2, #7
 8002a3c:	7013      	strb	r3, [r2, #0]
				  detail_array[0] = TEST_METHOD;
 8002a3e:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8002a42:	221b      	movs	r2, #27
 8002a44:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002a46:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002a4a:	6899      	ldr	r1, [r3, #8]
 8002a4c:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 8002a50:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002a54:	f103 0308 	add.w	r3, r3, #8
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 8002a60:	9300      	str	r3, [sp, #0]
 8002a62:	2301      	movs	r3, #1
 8002a64:	2008      	movs	r0, #8
 8002a66:	f7ff fc75 	bl	8002354 <commandRespond1>
 8002a6a:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
				  total_respond_length += respond_lenght;
 8002a6e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002a72:	f103 0308 	add.w	r3, r3, #8
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 8002a7c:	4413      	add	r3, r2
 8002a7e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002a82:	f102 0208 	add.w	r2, r2, #8
 8002a86:	6013      	str	r3, [r2, #0]
 8002a88:	e365      	b.n	8003156 <StartDefaultTask+0xaa6>
			  }else if(SCARA_METHOD_PICK_AND_PLACE == duty_cmd.robot_method){
 8002a8a:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002a8e:	785b      	ldrb	r3, [r3, #1]
 8002a90:	2b04      	cmp	r3, #4
 8002a92:	f040 8360 	bne.w	8003156 <StartDefaultTask+0xaa6>
				  current_method = SCARA_METHOD_PICK_AND_PLACE;
 8002a96:	2304      	movs	r3, #4
 8002a98:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002a9c:	f102 0207 	add.w	r2, r2, #7
 8002aa0:	7013      	strb	r3, [r2, #0]
				  current_duty_state = SCARA_DUTY_STATE_INIT;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002aa8:	f102 0205 	add.w	r2, r2, #5
 8002aac:	7013      	strb	r3, [r2, #0]
				  detail_array[0] = PICK_AND_PLACE_METHOD;
 8002aae:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8002ab2:	221c      	movs	r2, #28
 8002ab4:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002ab6:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002aba:	6899      	ldr	r1, [r3, #8]
 8002abc:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 8002ac0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002ac4:	f103 0308 	add.w	r3, r3, #8
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4413      	add	r3, r2
 8002acc:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 8002ad0:	9300      	str	r3, [sp, #0]
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	2008      	movs	r0, #8
 8002ad6:	f7ff fc3d 	bl	8002354 <commandRespond1>
 8002ada:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
				  total_respond_length += respond_lenght;
 8002ade:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002ae2:	f103 0308 	add.w	r3, r3, #8
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 8002aec:	4413      	add	r3, r2
 8002aee:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002af2:	f102 0208 	add.w	r2, r2, #8
 8002af6:	6013      	str	r3, [r2, #0]
 8002af8:	e32d      	b.n	8003156 <StartDefaultTask+0xaa6>
			  }
		  } else {
			  	  // Check current method & cmd method
			  	  if (current_method == duty_cmd.robot_method) {
 8002afa:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002afe:	785b      	ldrb	r3, [r3, #1]
 8002b00:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002b04:	f102 0207 	add.w	r2, r2, #7
 8002b08:	7812      	ldrb	r2, [r2, #0]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	f040 82fa 	bne.w	8003104 <StartDefaultTask+0xa54>
				  	  switch( duty_cmd.robot_method) {
 8002b10:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002b14:	785b      	ldrb	r3, [r3, #1]
 8002b16:	2b04      	cmp	r3, #4
 8002b18:	f200 82ee 	bhi.w	80030f8 <StartDefaultTask+0xa48>
 8002b1c:	a201      	add	r2, pc, #4	; (adr r2, 8002b24 <StartDefaultTask+0x474>)
 8002b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b22:	bf00      	nop
 8002b24:	08002b39 	.word	0x08002b39
 8002b28:	08002bbf 	.word	0x08002bbf
 8002b2c:	08002f85 	.word	0x08002f85
 8002b30:	08002e13 	.word	0x08002e13
 8002b34:	0800302f 	.word	0x0800302f
				  	  case SCARA_METHOD_MANUAL:
				  	  {
				  		  if (current_key_state == SCARA_KEY_STATE_READY) {
 8002b38:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002b3c:	f103 0303 	add.w	r3, r3, #3
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d116      	bne.n	8002b74 <StartDefaultTask+0x4c4>
				  			  current_key = duty_cmd.keyboard;
 8002b46:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002b4a:	78db      	ldrb	r3, [r3, #3]
 8002b4c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002b50:	f102 0202 	add.w	r2, r2, #2
 8002b54:	7013      	strb	r3, [r2, #0]
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Init new path
 8002b56:	2301      	movs	r3, #1
 8002b58:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002b5c:	f102 0203 	add.w	r2, r2, #3
 8002b60:	7013      	strb	r3, [r2, #0]
				  			  current_key_speed = duty_cmd.key_speed;
 8002b62:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002b6c:	f102 021c 	add.w	r2, r2, #28
 8002b70:	6013      	str	r3, [r2, #0]
				  				  	  && current_key_state == SCARA_KEY_STATE_FLOW
									  && current_key_speed == duty_cmd.key_speed) {
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Continue old path
				  		  }
				  	  }
				  	  break;
 8002b72:	e2ed      	b.n	8003150 <StartDefaultTask+0xaa0>
				  		  } else if (current_key == duty_cmd.keyboard
 8002b74:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002b78:	78db      	ldrb	r3, [r3, #3]
 8002b7a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002b7e:	f102 0202 	add.w	r2, r2, #2
 8002b82:	7812      	ldrb	r2, [r2, #0]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	f040 82e3 	bne.w	8003150 <StartDefaultTask+0xaa0>
				  				  	  && current_key_state == SCARA_KEY_STATE_FLOW
 8002b8a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002b8e:	f103 0303 	add.w	r3, r3, #3
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	f040 82db 	bne.w	8003150 <StartDefaultTask+0xaa0>
									  && current_key_speed == duty_cmd.key_speed) {
 8002b9a:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002ba4:	f102 021c 	add.w	r2, r2, #28
 8002ba8:	6812      	ldr	r2, [r2, #0]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	f040 82d0 	bne.w	8003150 <StartDefaultTask+0xaa0>
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Continue old path
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002bb6:	f102 0203 	add.w	r2, r2, #3
 8002bba:	7013      	strb	r3, [r2, #0]
				  	  break;
 8002bbc:	e2c8      	b.n	8003150 <StartDefaultTask+0xaa0>
				  	  case SCARA_METHOD_SEMI_AUTO:
				  	  {
						  switch( duty_cmd.robot_mode) {
 8002bbe:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002bc2:	789b      	ldrb	r3, [r3, #2]
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	f000 80a4 	beq.w	8002d12 <StartDefaultTask+0x662>
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	f300 811a 	bgt.w	8002e04 <StartDefaultTask+0x754>
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d002      	beq.n	8002bda <StartDefaultTask+0x52a>
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d031      	beq.n	8002c3c <StartDefaultTask+0x58c>
 8002bd8:	e114      	b.n	8002e04 <StartDefaultTask+0x754>
						  case SCARA_MODE_STOP:
							  {
								  current_mode	 = SCARA_MODE_STOP;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002be0:	f102 0206 	add.w	r2, r2, #6
 8002be4:	7013      	strb	r3, [r2, #0]
								detail_array[0] = STOP_NOW;
 8002be6:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8002bea:	2220      	movs	r2, #32
 8002bec:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002bee:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002bf2:	6899      	ldr	r1, [r3, #8]
 8002bf4:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 8002bf8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002bfc:	f103 0308 	add.w	r3, r3, #8
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4413      	add	r3, r2
 8002c04:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 8002c08:	9300      	str	r3, [sp, #0]
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	2008      	movs	r0, #8
 8002c0e:	f7ff fba1 	bl	8002354 <commandRespond1>
 8002c12:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
								total_respond_length += respond_lenght;
 8002c16:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002c1a:	f103 0308 	add.w	r3, r3, #8
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 8002c24:	4413      	add	r3, r2
 8002c26:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002c2a:	f102 0208 	add.w	r2, r2, #8
 8002c2e:	6013      	str	r3, [r2, #0]
								  LOG_REPORT("ROBOT STOP !!!", __LINE__);
 8002c30:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8002c34:	48cd      	ldr	r0, [pc, #820]	; (8002f6c <StartDefaultTask+0x8bc>)
 8002c36:	f7ff fbf5 	bl	8002424 <LOG_REPORT>
							  }
							  break;
 8002c3a:	e0e9      	b.n	8002e10 <StartDefaultTask+0x760>

						  case SCARA_MODE_SCAN:
							  {
								  if (SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_duty_state) {
 8002c3c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002c40:	f103 0306 	add.w	r3, r3, #6
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d138      	bne.n	8002cbc <StartDefaultTask+0x60c>
 8002c4a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002c4e:	f103 0305 	add.w	r3, r3, #5
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d131      	bne.n	8002cbc <StartDefaultTask+0x60c>
									  current_mode = SCARA_MODE_SCAN;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002c5e:	f102 0206 	add.w	r2, r2, #6
 8002c62:	7013      	strb	r3, [r2, #0]
									  current_scan_state = SCARA_SCAN_STATE_INIT;
 8002c64:	2300      	movs	r3, #0
 8002c66:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002c6a:	f102 0204 	add.w	r2, r2, #4
 8002c6e:	7013      	strb	r3, [r2, #0]
									detail_array[0] = START_SCAN;
 8002c70:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8002c74:	2221      	movs	r2, #33	; 0x21
 8002c76:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002c78:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002c7c:	6899      	ldr	r1, [r3, #8]
 8002c7e:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 8002c82:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002c86:	f103 0308 	add.w	r3, r3, #8
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 8002c92:	9300      	str	r3, [sp, #0]
 8002c94:	2301      	movs	r3, #1
 8002c96:	2008      	movs	r0, #8
 8002c98:	f7ff fb5c 	bl	8002354 <commandRespond1>
 8002c9c:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
									total_respond_length += respond_lenght;
 8002ca0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002ca4:	f103 0308 	add.w	r3, r3, #8
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 8002cae:	4413      	add	r3, r2
 8002cb0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002cb4:	f102 0208 	add.w	r2, r2, #8
 8002cb8:	6013      	str	r3, [r2, #0]
									respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
									total_respond_length += respond_lenght;
									  LOG_REPORT("SCAN FAIL: BUSY", __LINE__);
								  }
							  }
							  break;
 8002cba:	e0a9      	b.n	8002e10 <StartDefaultTask+0x760>
									detail_array[0] = BUSY;
 8002cbc:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8002cc0:	2222      	movs	r2, #34	; 0x22
 8002cc2:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002cc4:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002cc8:	6899      	ldr	r1, [r3, #8]
 8002cca:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 8002cce:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002cd2:	f103 0308 	add.w	r3, r3, #8
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4413      	add	r3, r2
 8002cda:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 8002cde:	9300      	str	r3, [sp, #0]
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	2007      	movs	r0, #7
 8002ce4:	f7ff fb36 	bl	8002354 <commandRespond1>
 8002ce8:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
									total_respond_length += respond_lenght;
 8002cec:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002cf0:	f103 0308 	add.w	r3, r3, #8
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 8002cfa:	4413      	add	r3, r2
 8002cfc:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002d00:	f102 0208 	add.w	r2, r2, #8
 8002d04:	6013      	str	r3, [r2, #0]
									  LOG_REPORT("SCAN FAIL: BUSY", __LINE__);
 8002d06:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8002d0a:	4899      	ldr	r0, [pc, #612]	; (8002f70 <StartDefaultTask+0x8c0>)
 8002d0c:	f7ff fb8a 	bl	8002424 <LOG_REPORT>
							  break;
 8002d10:	e07e      	b.n	8002e10 <StartDefaultTask+0x760>

						  case SCARA_MODE_DUTY:
							  {
								  if (SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_duty_state) {
 8002d12:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002d16:	f103 0306 	add.w	r3, r3, #6
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d145      	bne.n	8002dac <StartDefaultTask+0x6fc>
 8002d20:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002d24:	f103 0305 	add.w	r3, r3, #5
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d13e      	bne.n	8002dac <StartDefaultTask+0x6fc>
									  scaraSetScanFlag();
 8002d2e:	f007 fb23 	bl	800a378 <scaraSetScanFlag>
//									  if(duty_cmd.modeInit_type == DUTY_MODE_INIT_LINEAR){
//										  current_method = SCARA_METHOD_AUTO;
//									  }
									  if (scaraIsScanLimit()) {
 8002d32:	f007 fbb3 	bl	800a49c <scaraIsScanLimit>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00c      	beq.n	8002d56 <StartDefaultTask+0x6a6>
										  current_mode	 = SCARA_MODE_DUTY;
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002d42:	f102 0206 	add.w	r2, r2, #6
 8002d46:	7013      	strb	r3, [r2, #0]
										  current_duty_state	 = SCARA_DUTY_STATE_INIT;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002d4e:	f102 0205 	add.w	r2, r2, #5
 8002d52:	7013      	strb	r3, [r2, #0]
									  if (scaraIsScanLimit()) {
 8002d54:	e055      	b.n	8002e02 <StartDefaultTask+0x752>
									  } else {
										detail_array[0] = NOT_SCAN;
 8002d56:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8002d5a:	2223      	movs	r2, #35	; 0x23
 8002d5c:	701a      	strb	r2, [r3, #0]
										respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002d5e:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002d62:	6899      	ldr	r1, [r3, #8]
 8002d64:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 8002d68:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002d6c:	f103 0308 	add.w	r3, r3, #8
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4413      	add	r3, r2
 8002d74:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 8002d78:	9300      	str	r3, [sp, #0]
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	2007      	movs	r0, #7
 8002d7e:	f7ff fae9 	bl	8002354 <commandRespond1>
 8002d82:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
										total_respond_length += respond_lenght;
 8002d86:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002d8a:	f103 0308 	add.w	r3, r3, #8
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 8002d94:	4413      	add	r3, r2
 8002d96:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002d9a:	f102 0208 	add.w	r2, r2, #8
 8002d9e:	6013      	str	r3, [r2, #0]
										  LOG_REPORT("MOVE FAIL:NOT SCAN", __LINE__);
 8002da0:	f240 1187 	movw	r1, #391	; 0x187
 8002da4:	4873      	ldr	r0, [pc, #460]	; (8002f74 <StartDefaultTask+0x8c4>)
 8002da6:	f7ff fb3d 	bl	8002424 <LOG_REPORT>
									  if (scaraIsScanLimit()) {
 8002daa:	e02a      	b.n	8002e02 <StartDefaultTask+0x752>
									  }
								  } else {
									detail_array[0] = BUSY;
 8002dac:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8002db0:	2222      	movs	r2, #34	; 0x22
 8002db2:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002db4:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002db8:	6899      	ldr	r1, [r3, #8]
 8002dba:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 8002dbe:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002dc2:	f103 0308 	add.w	r3, r3, #8
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4413      	add	r3, r2
 8002dca:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 8002dce:	9300      	str	r3, [sp, #0]
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	2007      	movs	r0, #7
 8002dd4:	f7ff fabe 	bl	8002354 <commandRespond1>
 8002dd8:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
									total_respond_length += respond_lenght;
 8002ddc:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002de0:	f103 0308 	add.w	r3, r3, #8
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 8002dea:	4413      	add	r3, r2
 8002dec:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002df0:	f102 0208 	add.w	r2, r2, #8
 8002df4:	6013      	str	r3, [r2, #0]
									  LOG_REPORT("MOVE FAIL:BUSY", __LINE__);
 8002df6:	f240 118d 	movw	r1, #397	; 0x18d
 8002dfa:	485f      	ldr	r0, [pc, #380]	; (8002f78 <StartDefaultTask+0x8c8>)
 8002dfc:	f7ff fb12 	bl	8002424 <LOG_REPORT>
								  }
							  }
							  break;
 8002e00:	e006      	b.n	8002e10 <StartDefaultTask+0x760>
 8002e02:	e005      	b.n	8002e10 <StartDefaultTask+0x760>
						  default:
							  {
								  LOG_REPORT("CMD Error Mode !!!", __LINE__);
 8002e04:	f240 1193 	movw	r1, #403	; 0x193
 8002e08:	485c      	ldr	r0, [pc, #368]	; (8002f7c <StartDefaultTask+0x8cc>)
 8002e0a:	f7ff fb0b 	bl	8002424 <LOG_REPORT>
							  }
						  }
					  }
					  break;
 8002e0e:	e1a2      	b.n	8003156 <StartDefaultTask+0xaa6>
 8002e10:	e1a1      	b.n	8003156 <StartDefaultTask+0xaa6>
					  case SCARA_METHOD_TEST:
					  {
						  test_value[0] = 0;
 8002e12:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8002e16:	2200      	movs	r2, #0
 8002e18:	701a      	strb	r2, [r3, #0]
						  test_value[1] = 0;
 8002e1a:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8002e1e:	2200      	movs	r2, #0
 8002e20:	705a      	strb	r2, [r3, #1]
						  test_value[2] = 0;
 8002e22:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8002e26:	2200      	movs	r2, #0
 8002e28:	709a      	strb	r2, [r3, #2]
						  test_value[3] = 0;
 8002e2a:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8002e2e:	2200      	movs	r2, #0
 8002e30:	70da      	strb	r2, [r3, #3]
						  switch (duty_cmd.test_key)
 8002e32:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002e36:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002e3a:	2b07      	cmp	r3, #7
 8002e3c:	f200 8094 	bhi.w	8002f68 <StartDefaultTask+0x8b8>
 8002e40:	a201      	add	r2, pc, #4	; (adr r2, 8002e48 <StartDefaultTask+0x798>)
 8002e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e46:	bf00      	nop
 8002e48:	08002e69 	.word	0x08002e69
 8002e4c:	08002e85 	.word	0x08002e85
 8002e50:	08002ea9 	.word	0x08002ea9
 8002e54:	08002ec5 	.word	0x08002ec5
 8002e58:	08002ee9 	.word	0x08002ee9
 8002e5c:	08002f05 	.word	0x08002f05
 8002e60:	08002f29 	.word	0x08002f29
 8002e64:	08002f45 	.word	0x08002f45
						  {
						  case SCARA_TEST_MOTOR1_POS:
							 test_value[duty_cmd.test_key/2] = test_value_array[0];
 8002e68:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002e6c:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002e70:	085b      	lsrs	r3, r3, #1
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	461a      	mov	r2, r3
 8002e76:	4b42      	ldr	r3, [pc, #264]	; (8002f80 <StartDefaultTask+0x8d0>)
 8002e78:	f993 1000 	ldrsb.w	r1, [r3]
 8002e7c:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8002e80:	5499      	strb	r1, [r3, r2]
						  break;
 8002e82:	e072      	b.n	8002f6a <StartDefaultTask+0x8ba>
						  case SCARA_TEST_MOTOR1_NEG:
							 test_value[duty_cmd.test_key/2] = -test_value_array[0];
 8002e84:	4b3e      	ldr	r3, [pc, #248]	; (8002f80 <StartDefaultTask+0x8d0>)
 8002e86:	f993 3000 	ldrsb.w	r3, [r3]
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	425b      	negs	r3, r3
 8002e8e:	b2d9      	uxtb	r1, r3
 8002e90:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002e94:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002e98:	085b      	lsrs	r3, r3, #1
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	b249      	sxtb	r1, r1
 8002ea0:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8002ea4:	5499      	strb	r1, [r3, r2]
						  break;
 8002ea6:	e060      	b.n	8002f6a <StartDefaultTask+0x8ba>
						  case SCARA_TEST_MOTOR2_POS:
							 test_value[duty_cmd.test_key/2] = test_value_array[1];
 8002ea8:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002eac:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002eb0:	085b      	lsrs	r3, r3, #1
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	4b32      	ldr	r3, [pc, #200]	; (8002f80 <StartDefaultTask+0x8d0>)
 8002eb8:	f993 1001 	ldrsb.w	r1, [r3, #1]
 8002ebc:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8002ec0:	5499      	strb	r1, [r3, r2]
						  break;
 8002ec2:	e052      	b.n	8002f6a <StartDefaultTask+0x8ba>
						  case SCARA_TEST_MOTOR2_NEG:
							 test_value[duty_cmd.test_key/2] = -test_value_array[1];
 8002ec4:	4b2e      	ldr	r3, [pc, #184]	; (8002f80 <StartDefaultTask+0x8d0>)
 8002ec6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	425b      	negs	r3, r3
 8002ece:	b2d9      	uxtb	r1, r3
 8002ed0:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002ed4:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002ed8:	085b      	lsrs	r3, r3, #1
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	461a      	mov	r2, r3
 8002ede:	b249      	sxtb	r1, r1
 8002ee0:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8002ee4:	5499      	strb	r1, [r3, r2]
						  break;
 8002ee6:	e040      	b.n	8002f6a <StartDefaultTask+0x8ba>
						  case SCARA_TEST_MOTOR3_POS:
							 test_value[duty_cmd.test_key/2] = test_value_array[2];
 8002ee8:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002eec:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002ef0:	085b      	lsrs	r3, r3, #1
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	4b22      	ldr	r3, [pc, #136]	; (8002f80 <StartDefaultTask+0x8d0>)
 8002ef8:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8002efc:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8002f00:	5499      	strb	r1, [r3, r2]
						  break;
 8002f02:	e032      	b.n	8002f6a <StartDefaultTask+0x8ba>
						  case SCARA_TEST_MOTOR3_NEG:
							 test_value[duty_cmd.test_key/2] = -test_value_array[2];
 8002f04:	4b1e      	ldr	r3, [pc, #120]	; (8002f80 <StartDefaultTask+0x8d0>)
 8002f06:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	425b      	negs	r3, r3
 8002f0e:	b2d9      	uxtb	r1, r3
 8002f10:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002f14:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002f18:	085b      	lsrs	r3, r3, #1
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	b249      	sxtb	r1, r1
 8002f20:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8002f24:	5499      	strb	r1, [r3, r2]
						  break;
 8002f26:	e020      	b.n	8002f6a <StartDefaultTask+0x8ba>
						  case SCARA_TEST_MOTOR4_POS:
							 test_value[duty_cmd.test_key/2] = test_value_array[3];
 8002f28:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002f2c:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002f30:	085b      	lsrs	r3, r3, #1
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	461a      	mov	r2, r3
 8002f36:	4b12      	ldr	r3, [pc, #72]	; (8002f80 <StartDefaultTask+0x8d0>)
 8002f38:	f993 1003 	ldrsb.w	r1, [r3, #3]
 8002f3c:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8002f40:	5499      	strb	r1, [r3, r2]
						  break;
 8002f42:	e012      	b.n	8002f6a <StartDefaultTask+0x8ba>
						  case SCARA_TEST_MOTOR4_NEG:
							 test_value[duty_cmd.test_key/2] = -test_value_array[3];
 8002f44:	4b0e      	ldr	r3, [pc, #56]	; (8002f80 <StartDefaultTask+0x8d0>)
 8002f46:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	425b      	negs	r3, r3
 8002f4e:	b2d9      	uxtb	r1, r3
 8002f50:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002f54:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002f58:	085b      	lsrs	r3, r3, #1
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	b249      	sxtb	r1, r1
 8002f60:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8002f64:	5499      	strb	r1, [r3, r2]
						  break;						  
 8002f66:	e000      	b.n	8002f6a <StartDefaultTask+0x8ba>
						  default:
							  break;
 8002f68:	bf00      	nop
						  }
					  }
					  break;
 8002f6a:	e0f4      	b.n	8003156 <StartDefaultTask+0xaa6>
 8002f6c:	0801c034 	.word	0x0801c034
 8002f70:	0801c044 	.word	0x0801c044
 8002f74:	0801c054 	.word	0x0801c054
 8002f78:	0801c068 	.word	0x0801c068
 8002f7c:	0801c078 	.word	0x0801c078
 8002f80:	20000000 	.word	0x20000000
				  	  case SCARA_METHOD_GCODE:
				  	  {
				  		  if(current_duty_state == SCARA_DUTY_STATE_READY && duty_cmd.id_command == CMD_GCODE_RUN){
 8002f84:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002f88:	f103 0305 	add.w	r3, r3, #5
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d11a      	bne.n	8002fc8 <StartDefaultTask+0x918>
 8002f92:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	2b13      	cmp	r3, #19
 8002f9a:	d115      	bne.n	8002fc8 <StartDefaultTask+0x918>
				  			  if(Gcode_Mode == GCODE_LINEAR){
 8002f9c:	4bc0      	ldr	r3, [pc, #768]	; (80032a0 <StartDefaultTask+0xbf0>)
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	2b07      	cmp	r3, #7
 8002fa2:	d103      	bne.n	8002fac <StartDefaultTask+0x8fc>
				  				run_point = 1;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	f8c7 3ffc 	str.w	r3, [r7, #4092]	; 0xffc
 8002faa:	e006      	b.n	8002fba <StartDefaultTask+0x90a>
				  			  }else if(Gcode_Mode == GCODE_SMOOTH_LSPB){
 8002fac:	4bbc      	ldr	r3, [pc, #752]	; (80032a0 <StartDefaultTask+0xbf0>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	2b08      	cmp	r3, #8
 8002fb2:	d102      	bne.n	8002fba <StartDefaultTask+0x90a>
				  				run_point = 0;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	f8c7 3ffc 	str.w	r3, [r7, #4092]	; 0xffc
				  			  }

				  			  current_duty_state = SCARA_DUTY_STATE_OPERATION;
 8002fba:	2304      	movs	r3, #4
 8002fbc:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002fc0:	f102 0205 	add.w	r2, r2, #5
 8002fc4:	7013      	strb	r3, [r2, #0]
 8002fc6:	e031      	b.n	800302c <StartDefaultTask+0x97c>
				  		  }else if(current_duty_state == SCARA_DUTY_STATE_INIT && duty_cmd.id_command == CMD_GCODE_RESUME){
 8002fc8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002fcc:	f103 0305 	add.w	r3, r3, #5
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d111      	bne.n	8002ffa <StartDefaultTask+0x94a>
 8002fd6:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	2b12      	cmp	r3, #18
 8002fde:	d10c      	bne.n	8002ffa <StartDefaultTask+0x94a>
				  			  lowlayer_readTruePosition(&positionCurrent);
 8002fe0:	48b0      	ldr	r0, [pc, #704]	; (80032a4 <StartDefaultTask+0xbf4>)
 8002fe2:	f002 fe65 	bl	8005cb0 <lowlayer_readTruePosition>
				  			  kinematicForward(&positionCurrent);
 8002fe6:	48af      	ldr	r0, [pc, #700]	; (80032a4 <StartDefaultTask+0xbf4>)
 8002fe8:	f001 ff3e 	bl	8004e68 <kinematicForward>
				  			  current_duty_state = SCARA_DUTY_STATE_INIT;
 8002fec:	2301      	movs	r3, #1
 8002fee:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002ff2:	f102 0205 	add.w	r2, r2, #5
 8002ff6:	7013      	strb	r3, [r2, #0]
 8002ff8:	e018      	b.n	800302c <StartDefaultTask+0x97c>
				  		  }else if(duty_cmd.id_command == CMD_GCODE_STOP){
 8002ffa:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	2b0d      	cmp	r3, #13
 8003002:	d106      	bne.n	8003012 <StartDefaultTask+0x962>
				  			  current_duty_state = SCARA_DUTY_STATE_READY;
 8003004:	2300      	movs	r3, #0
 8003006:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800300a:	f102 0205 	add.w	r2, r2, #5
 800300e:	7013      	strb	r3, [r2, #0]
				  		  }else if(duty_cmd.id_command == CMD_GCODE_PAUSE){
				  			  current_duty_state = SCARA_DUTY_STATE_INIT;
				  		  }
				  	  }
				  	  break;
 8003010:	e0a0      	b.n	8003154 <StartDefaultTask+0xaa4>
				  		  }else if(duty_cmd.id_command == CMD_GCODE_PAUSE){
 8003012:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	2b0e      	cmp	r3, #14
 800301a:	f040 809b 	bne.w	8003154 <StartDefaultTask+0xaa4>
				  			  current_duty_state = SCARA_DUTY_STATE_INIT;
 800301e:	2301      	movs	r3, #1
 8003020:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003024:	f102 0205 	add.w	r2, r2, #5
 8003028:	7013      	strb	r3, [r2, #0]
				  	  break;
 800302a:	e093      	b.n	8003154 <StartDefaultTask+0xaa4>
 800302c:	e092      	b.n	8003154 <StartDefaultTask+0xaa4>
				  	  case SCARA_METHOD_PICK_AND_PLACE:{
				  		  memcpy(&Object[object_head_pointer].object_position, &duty_cmd.target_point, sizeof(SCARA_PositionTypeDef));
 800302e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003032:	f103 030d 	add.w	r3, r3, #13
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800303c:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8003040:	fb01 f303 	mul.w	r3, r1, r3
 8003044:	18d0      	adds	r0, r2, r3
 8003046:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 800304a:	3328      	adds	r3, #40	; 0x28
 800304c:	22c0      	movs	r2, #192	; 0xc0
 800304e:	4619      	mov	r1, r3
 8003050:	f012 fe4e 	bl	8015cf0 <memcpy>
				  		  Object[object_head_pointer].timer_value = (uint16_t)duty_cmd.target_point.t;
 8003054:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8003058:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800305c:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8003060:	f101 010d 	add.w	r1, r1, #13
 8003064:	780c      	ldrb	r4, [r1, #0]
 8003066:	4610      	mov	r0, r2
 8003068:	4619      	mov	r1, r3
 800306a:	f7fd fd9d 	bl	8000ba8 <__aeabi_d2uiz>
 800306e:	4603      	mov	r3, r0
 8003070:	b299      	uxth	r1, r3
 8003072:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8003076:	f44f 73c4 	mov.w	r3, #392	; 0x188
 800307a:	fb03 f304 	mul.w	r3, r3, r4
 800307e:	4413      	add	r3, r2
 8003080:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003084:	460a      	mov	r2, r1
 8003086:	801a      	strh	r2, [r3, #0]
				  		  object_head_pointer = (object_head_pointer+1)%8;
 8003088:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800308c:	f103 030d 	add.w	r3, r3, #13
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	3301      	adds	r3, #1
 8003094:	425a      	negs	r2, r3
 8003096:	f003 0307 	and.w	r3, r3, #7
 800309a:	f002 0207 	and.w	r2, r2, #7
 800309e:	bf58      	it	pl
 80030a0:	4253      	negpl	r3, r2
 80030a2:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80030a6:	f102 020d 	add.w	r2, r2, #13
 80030aa:	7013      	strb	r3, [r2, #0]
				  		  detail_array[0] = OBJECT_DETECTED;
 80030ac:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 80030b0:	221d      	movs	r2, #29
 80030b2:	701a      	strb	r2, [r3, #0]
						  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80030b4:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 80030b8:	6899      	ldr	r1, [r3, #8]
 80030ba:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 80030be:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80030c2:	f103 0308 	add.w	r3, r3, #8
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4413      	add	r3, r2
 80030ca:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 80030ce:	9300      	str	r3, [sp, #0]
 80030d0:	2301      	movs	r3, #1
 80030d2:	2008      	movs	r0, #8
 80030d4:	f7ff f93e 	bl	8002354 <commandRespond1>
 80030d8:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
						  total_respond_length += respond_lenght;
 80030dc:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80030e0:	f103 0308 	add.w	r3, r3, #8
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 80030ea:	4413      	add	r3, r2
 80030ec:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80030f0:	f102 0208 	add.w	r2, r2, #8
 80030f4:	6013      	str	r3, [r2, #0]
				  	  }
				  	  break;
 80030f6:	e02e      	b.n	8003156 <StartDefaultTask+0xaa6>
				  	  default:
				  	  {
				  		  LOG_REPORT("CMD Error Method !!!", __LINE__);
 80030f8:	f240 11dd 	movw	r1, #477	; 0x1dd
 80030fc:	486a      	ldr	r0, [pc, #424]	; (80032a8 <StartDefaultTask+0xbf8>)
 80030fe:	f7ff f991 	bl	8002424 <LOG_REPORT>
 8003102:	e028      	b.n	8003156 <StartDefaultTask+0xaa6>
				  	  }
				  	  }
			  	  } else {
					detail_array[0] = INCORRECT_METHOD;
 8003104:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8003108:	2224      	movs	r2, #36	; 0x24
 800310a:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800310c:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8003110:	6899      	ldr	r1, [r3, #8]
 8003112:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 8003116:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800311a:	f103 0308 	add.w	r3, r3, #8
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4413      	add	r3, r2
 8003122:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 8003126:	9300      	str	r3, [sp, #0]
 8003128:	2301      	movs	r3, #1
 800312a:	2007      	movs	r0, #7
 800312c:	f7ff f912 	bl	8002354 <commandRespond1>
 8003130:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
					total_respond_length += respond_lenght;
 8003134:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003138:	f103 0308 	add.w	r3, r3, #8
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 8003142:	4413      	add	r3, r2
 8003144:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003148:	f102 0208 	add.w	r2, r2, #8
 800314c:	6013      	str	r3, [r2, #0]
 800314e:	e002      	b.n	8003156 <StartDefaultTask+0xaa6>
				  	  break;
 8003150:	bf00      	nop
 8003152:	e000      	b.n	8003156 <StartDefaultTask+0xaa6>
				  	  break;
 8003154:	bf00      	nop
			  	  }

			  }
		  isNewDuty = FALSE;
 8003156:	2300      	movs	r3, #0
 8003158:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800315c:	f102 020f 	add.w	r2, r2, #15
 8003160:	7013      	strb	r3, [r2, #0]
	  }

	  /* 3--- Execute Phase ---*/
	  switch(current_method) {
 8003162:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003166:	f103 0307 	add.w	r3, r3, #7
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	2b04      	cmp	r3, #4
 800316e:	f201 8104 	bhi.w	800437a <StartDefaultTask+0x1cca>
 8003172:	a201      	add	r2, pc, #4	; (adr r2, 8003178 <StartDefaultTask+0xac8>)
 8003174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003178:	0800318d 	.word	0x0800318d
 800317c:	080033bb 	.word	0x080033bb
 8003180:	08003895 	.word	0x08003895
 8003184:	08003bcd 	.word	0x08003bcd
 8003188:	08003bf3 	.word	0x08003bf3
	  case SCARA_METHOD_MANUAL:
	  {
		  switch( current_key_state) {
 800318c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003190:	f103 0303 	add.w	r3, r3, #3
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	2b03      	cmp	r3, #3
 8003198:	f201 80ec 	bhi.w	8004374 <StartDefaultTask+0x1cc4>
 800319c:	a201      	add	r2, pc, #4	; (adr r2, 80031a4 <StartDefaultTask+0xaf4>)
 800319e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a2:	bf00      	nop
 80031a4:	080033b5 	.word	0x080033b5
 80031a8:	080031b5 	.word	0x080031b5
 80031ac:	0800324b 	.word	0x0800324b
 80031b0:	08003371 	.word	0x08003371
		  case SCARA_KEY_STATE_READY:
			  /* Wait for application keyboard , do nothing*/
		  break;
		  case SCARA_KEY_STATE_INIT:
		  {
			  if (scaraKeyInit1(current_key, current_key_speed1) == SCARA_STATUS_OK) {
 80031b4:	4b3d      	ldr	r3, [pc, #244]	; (80032ac <StartDefaultTask+0xbfc>)
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80031bc:	f103 0302 	add.w	r3, r3, #2
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	4611      	mov	r1, r2
 80031c4:	4618      	mov	r0, r3
 80031c6:	f007 fa7f 	bl	800a6c8 <scaraKeyInit1>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d135      	bne.n	800323c <StartDefaultTask+0xb8c>
				  run_time = 0;
 80031d0:	f04f 0200 	mov.w	r2, #0
 80031d4:	f04f 0300 	mov.w	r3, #0
 80031d8:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 80031dc:	f101 0110 	add.w	r1, r1, #16
 80031e0:	e9c1 2300 	strd	r2, r3, [r1]
				  current_key_state = SCARA_KEY_STATE_FLOW;
 80031e4:	2302      	movs	r3, #2
 80031e6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80031ea:	f102 0203 	add.w	r2, r2, #3
 80031ee:	7013      	strb	r3, [r2, #0]
					detail_array[0] = NONE;
 80031f0:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 80031f4:	2225      	movs	r2, #37	; 0x25
 80031f6:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_START, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80031f8:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 80031fc:	6899      	ldr	r1, [r3, #8]
 80031fe:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 8003202:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003206:	f103 0308 	add.w	r3, r3, #8
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4413      	add	r3, r2
 800320e:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 8003212:	9300      	str	r3, [sp, #0]
 8003214:	2301      	movs	r3, #1
 8003216:	2003      	movs	r0, #3
 8003218:	f7ff f89c 	bl	8002354 <commandRespond1>
 800321c:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
					total_respond_length += respond_lenght;
 8003220:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003224:	f103 0308 	add.w	r3, r3, #8
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 800322e:	4413      	add	r3, r2
 8003230:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003234:	f102 0208 	add.w	r2, r2, #8
 8003238:	6013      	str	r3, [r2, #0]
			  } else {
				  current_key_state = SCARA_KEY_STATE_READY;
			  }
		  }
		  break;
 800323a:	e0bc      	b.n	80033b6 <StartDefaultTask+0xd06>
				  current_key_state = SCARA_KEY_STATE_READY;
 800323c:	2300      	movs	r3, #0
 800323e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003242:	f102 0203 	add.w	r2, r2, #3
 8003246:	7013      	strb	r3, [r2, #0]
		  break;
 8003248:	e0b5      	b.n	80033b6 <StartDefaultTask+0xd06>
		  case SCARA_KEY_STATE_FLOW:
		  {
			  SCARA_StatusTypeDef status;
			  // Increase run time
			  run_time += T_SAMPLING;
 800324a:	a313      	add	r3, pc, #76	; (adr r3, 8003298 <StartDefaultTask+0xbe8>)
 800324c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003250:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8003254:	f101 0110 	add.w	r1, r1, #16
 8003258:	e9d1 0100 	ldrd	r0, r1, [r1]
 800325c:	f7fd f816 	bl	800028c <__adddf3>
 8003260:	4602      	mov	r2, r0
 8003262:	460b      	mov	r3, r1
 8003264:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8003268:	f101 0110 	add.w	r1, r1, #16
 800326c:	e9c1 2300 	strd	r2, r3, [r1]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 8003270:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003274:	f103 0310 	add.w	r3, r3, #16
 8003278:	ed93 0b00 	vldr	d0, [r3]
 800327c:	f007 f91a 	bl	800a4b4 <scaraIsFinish>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d014      	beq.n	80032b0 <StartDefaultTask+0xc00>
				  current_key_state = SCARA_KEY_STATE_FINISH;// Key Done
 8003286:	2303      	movs	r3, #3
 8003288:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800328c:	f102 0203 	add.w	r2, r2, #3
 8003290:	7013      	strb	r3, [r2, #0]
					total_respond_length += respond_lenght;
					  LOG_REPORT("STOP KEY", __LINE__);
				  }
			  }
		  }
		  break;
 8003292:	e090      	b.n	80033b6 <StartDefaultTask+0xd06>
 8003294:	f3af 8000 	nop.w
 8003298:	40000000 	.word	0x40000000
 800329c:	3f847ae1 	.word	0x3f847ae1
 80032a0:	200065c8 	.word	0x200065c8
 80032a4:	2000eab8 	.word	0x2000eab8
 80032a8:	0801c08c 	.word	0x0801c08c
 80032ac:	20000060 	.word	0x20000060
				  status = scaraFlowDuty(run_time, &positionNext, positionCurrent);
 80032b0:	4cd4      	ldr	r4, [pc, #848]	; (8003604 <StartDefaultTask+0xf54>)
 80032b2:	4668      	mov	r0, sp
 80032b4:	f104 0308 	add.w	r3, r4, #8
 80032b8:	22b8      	movs	r2, #184	; 0xb8
 80032ba:	4619      	mov	r1, r3
 80032bc:	f012 fd18 	bl	8015cf0 <memcpy>
 80032c0:	e894 000c 	ldmia.w	r4, {r2, r3}
 80032c4:	48d0      	ldr	r0, [pc, #832]	; (8003608 <StartDefaultTask+0xf58>)
 80032c6:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 80032ca:	f101 0110 	add.w	r1, r1, #16
 80032ce:	ed91 0b00 	vldr	d0, [r1]
 80032d2:	f006 fa61 	bl	8009798 <scaraFlowDuty>
 80032d6:	4603      	mov	r3, r0
 80032d8:	f887 3fc9 	strb.w	r3, [r7, #4041]	; 0xfc9
				  if ( SCARA_STATUS_OK == status) {
 80032dc:	f897 3fc9 	ldrb.w	r3, [r7, #4041]	; 0xfc9
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d113      	bne.n	800330c <StartDefaultTask+0xc5c>
					  lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 80032e4:	4cc7      	ldr	r4, [pc, #796]	; (8003604 <StartDefaultTask+0xf54>)
 80032e6:	4ac8      	ldr	r2, [pc, #800]	; (8003608 <StartDefaultTask+0xf58>)
 80032e8:	ab2c      	add	r3, sp, #176	; 0xb0
 80032ea:	4611      	mov	r1, r2
 80032ec:	22c0      	movs	r2, #192	; 0xc0
 80032ee:	4618      	mov	r0, r3
 80032f0:	f012 fcfe 	bl	8015cf0 <memcpy>
 80032f4:	4668      	mov	r0, sp
 80032f6:	f104 0310 	add.w	r3, r4, #16
 80032fa:	22b0      	movs	r2, #176	; 0xb0
 80032fc:	4619      	mov	r1, r3
 80032fe:	f012 fcf7 	bl	8015cf0 <memcpy>
 8003302:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003306:	f002 fe63 	bl	8005fd0 <lowlayer_computeAndWritePulse>
		  break;
 800330a:	e054      	b.n	80033b6 <StartDefaultTask+0xd06>
					  current_key_state = SCARA_KEY_STATE_FINISH;
 800330c:	2303      	movs	r3, #3
 800330e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003312:	f102 0203 	add.w	r2, r2, #3
 8003316:	7013      	strb	r3, [r2, #0]
					detail_array[0] = status;
 8003318:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 800331c:	f897 2fc9 	ldrb.w	r2, [r7, #4041]	; 0xfc9
 8003320:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_STOP, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003322:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8003326:	6899      	ldr	r1, [r3, #8]
 8003328:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 800332c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003330:	f103 0308 	add.w	r3, r3, #8
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4413      	add	r3, r2
 8003338:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 800333c:	9300      	str	r3, [sp, #0]
 800333e:	2301      	movs	r3, #1
 8003340:	2006      	movs	r0, #6
 8003342:	f7ff f807 	bl	8002354 <commandRespond1>
 8003346:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
					total_respond_length += respond_lenght;
 800334a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800334e:	f103 0308 	add.w	r3, r3, #8
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 8003358:	4413      	add	r3, r2
 800335a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800335e:	f102 0208 	add.w	r2, r2, #8
 8003362:	6013      	str	r3, [r2, #0]
					  LOG_REPORT("STOP KEY", __LINE__);
 8003364:	f240 2111 	movw	r1, #529	; 0x211
 8003368:	48a8      	ldr	r0, [pc, #672]	; (800360c <StartDefaultTask+0xf5c>)
 800336a:	f7ff f85b 	bl	8002424 <LOG_REPORT>
		  break;
 800336e:	e022      	b.n	80033b6 <StartDefaultTask+0xd06>
		  case SCARA_KEY_STATE_FINISH:
		  {
			  lowlayer_readTruePosition(&positionNext);
 8003370:	48a5      	ldr	r0, [pc, #660]	; (8003608 <StartDefaultTask+0xf58>)
 8003372:	f002 fc9d 	bl	8005cb0 <lowlayer_readTruePosition>
			  kinematicForward(&positionNext);
 8003376:	48a4      	ldr	r0, [pc, #656]	; (8003608 <StartDefaultTask+0xf58>)
 8003378:	f001 fd76 	bl	8004e68 <kinematicForward>
			  current_key_state = SCARA_KEY_STATE_READY;
 800337c:	2300      	movs	r3, #0
 800337e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003382:	f102 0203 	add.w	r2, r2, #3
 8003386:	7013      	strb	r3, [r2, #0]
			  positionNext.t = 0;
 8003388:	499f      	ldr	r1, [pc, #636]	; (8003608 <StartDefaultTask+0xf58>)
 800338a:	f04f 0200 	mov.w	r2, #0
 800338e:	f04f 0300 	mov.w	r3, #0
 8003392:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
			  positionNext.total_time = 0;
 8003396:	499c      	ldr	r1, [pc, #624]	; (8003608 <StartDefaultTask+0xf58>)
 8003398:	f04f 0200 	mov.w	r2, #0
 800339c:	f04f 0300 	mov.w	r3, #0
 80033a0:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
			  positionNext.q = 0;
 80033a4:	4998      	ldr	r1, [pc, #608]	; (8003608 <StartDefaultTask+0xf58>)
 80033a6:	f04f 0200 	mov.w	r2, #0
 80033aa:	f04f 0300 	mov.w	r3, #0
 80033ae:	e9c1 2300 	strd	r2, r3, [r1]
		  }
		  break;
 80033b2:	e000      	b.n	80033b6 <StartDefaultTask+0xd06>
		  break;
 80033b4:	bf00      	nop
		  }
	  }
	  break;
 80033b6:	f000 bfdd 	b.w	8004374 <StartDefaultTask+0x1cc4>

	  case SCARA_METHOD_SEMI_AUTO:
	  {
		  switch( current_mode) {
 80033ba:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80033be:	f103 0306 	add.w	r3, r3, #6
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	f000 808d 	beq.w	80034e4 <StartDefaultTask+0xe34>
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	f300 825a 	bgt.w	8003884 <StartDefaultTask+0x11d4>
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d002      	beq.n	80033da <StartDefaultTask+0xd2a>
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d00d      	beq.n	80033f4 <StartDefaultTask+0xd44>
 80033d8:	e254      	b.n	8003884 <StartDefaultTask+0x11d4>
		  case SCARA_MODE_STOP:
			  {
				  current_mode 	= SCARA_MODE_DUTY;
 80033da:	2302      	movs	r3, #2
 80033dc:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80033e0:	f102 0206 	add.w	r2, r2, #6
 80033e4:	7013      	strb	r3, [r2, #0]
				  current_duty_state = SCARA_DUTY_STATE_READY;
 80033e6:	2300      	movs	r3, #0
 80033e8:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80033ec:	f102 0205 	add.w	r2, r2, #5
 80033f0:	7013      	strb	r3, [r2, #0]
			  }
			  break;
 80033f2:	e24d      	b.n	8003890 <StartDefaultTask+0x11e0>

		  case SCARA_MODE_SCAN:
			  {
				  switch (current_scan_state) {
 80033f4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80033f8:	f103 0304 	add.w	r3, r3, #4
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	2b03      	cmp	r3, #3
 8003400:	d866      	bhi.n	80034d0 <StartDefaultTask+0xe20>
 8003402:	a201      	add	r2, pc, #4	; (adr r2, 8003408 <StartDefaultTask+0xd58>)
 8003404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003408:	08003419 	.word	0x08003419
 800340c:	0800342b 	.word	0x0800342b
 8003410:	08003443 	.word	0x08003443
 8003414:	0800345d 	.word	0x0800345d
				  case SCARA_SCAN_STATE_INIT:
					  {
						  lowlayer_scanReset();
 8003418:	f002 fa44 	bl	80058a4 <lowlayer_scanReset>
						  current_scan_state = SCARA_SCAN_STATE_HARD;
 800341c:	2301      	movs	r3, #1
 800341e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003422:	f102 0204 	add.w	r2, r2, #4
 8003426:	7013      	strb	r3, [r2, #0]
					  }
					  break;
 8003428:	e05b      	b.n	80034e2 <StartDefaultTask+0xe32>
				  case SCARA_SCAN_STATE_HARD:
					  {
						  if(lowlayer_scanFlow()) {
 800342a:	f002 fa6d 	bl	8005908 <lowlayer_scanFlow>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d053      	beq.n	80034dc <StartDefaultTask+0xe2c>
							  current_scan_state = SCARA_SCAN_STATE_SOFT;
 8003434:	2302      	movs	r3, #2
 8003436:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800343a:	f102 0204 	add.w	r2, r2, #4
 800343e:	7013      	strb	r3, [r2, #0]
						  }
					  }
					  break;
 8003440:	e04c      	b.n	80034dc <StartDefaultTask+0xe2c>
				  case SCARA_SCAN_STATE_SOFT:
					  {
						  if(lowlayer_goToSoftLimit(&positionNext)) {
 8003442:	4871      	ldr	r0, [pc, #452]	; (8003608 <StartDefaultTask+0xf58>)
 8003444:	f002 fbb8 	bl	8005bb8 <lowlayer_goToSoftLimit>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d048      	beq.n	80034e0 <StartDefaultTask+0xe30>
							  current_scan_state = SCARA_SCAN_STATE_FINISH;
 800344e:	2303      	movs	r3, #3
 8003450:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003454:	f102 0204 	add.w	r2, r2, #4
 8003458:	7013      	strb	r3, [r2, #0]
							}
					  }
					  break;
 800345a:	e041      	b.n	80034e0 <StartDefaultTask+0xe30>
				  case SCARA_SCAN_STATE_FINISH:
					  {
						  //lowlayer_readSetPosition(&positionNext);
						  lowlayer_readTruePosition(&positionNext);
 800345c:	486a      	ldr	r0, [pc, #424]	; (8003608 <StartDefaultTask+0xf58>)
 800345e:	f002 fc27 	bl	8005cb0 <lowlayer_readTruePosition>
						  kinematicForward(&positionNext);
 8003462:	4869      	ldr	r0, [pc, #420]	; (8003608 <StartDefaultTask+0xf58>)
 8003464:	f001 fd00 	bl	8004e68 <kinematicForward>
						  current_mode 	= SCARA_MODE_DUTY;
 8003468:	2302      	movs	r3, #2
 800346a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800346e:	f102 0206 	add.w	r2, r2, #6
 8003472:	7013      	strb	r3, [r2, #0]
						  current_duty_state = SCARA_DUTY_STATE_READY;
 8003474:	2300      	movs	r3, #0
 8003476:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800347a:	f102 0205 	add.w	r2, r2, #5
 800347e:	7013      	strb	r3, [r2, #0]
						  scaraSetScanFlag();
 8003480:	f006 ff7a 	bl	800a378 <scaraSetScanFlag>

						detail_array[0] = NONE;
 8003484:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8003488:	2225      	movs	r2, #37	; 0x25
 800348a:	701a      	strb	r2, [r3, #0]
						respond_lenght = commandRespond1(RPD_DONE, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800348c:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8003490:	6899      	ldr	r1, [r3, #8]
 8003492:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 8003496:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800349a:	f103 0308 	add.w	r3, r3, #8
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4413      	add	r3, r2
 80034a2:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 80034a6:	9300      	str	r3, [sp, #0]
 80034a8:	2301      	movs	r3, #1
 80034aa:	2005      	movs	r0, #5
 80034ac:	f7fe ff52 	bl	8002354 <commandRespond1>
 80034b0:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
						total_respond_length += respond_lenght;
 80034b4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80034b8:	f103 0308 	add.w	r3, r3, #8
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 80034c2:	4413      	add	r3, r2
 80034c4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80034c8:	f102 0208 	add.w	r2, r2, #8
 80034cc:	6013      	str	r3, [r2, #0]
					  }
					  break;
 80034ce:	e008      	b.n	80034e2 <StartDefaultTask+0xe32>
				  default:
					  {
						  LOG_REPORT("ERROR STATE !!!", __LINE__);
 80034d0:	f240 2155 	movw	r1, #597	; 0x255
 80034d4:	484e      	ldr	r0, [pc, #312]	; (8003610 <StartDefaultTask+0xf60>)
 80034d6:	f7fe ffa5 	bl	8002424 <LOG_REPORT>
						  while(1);
 80034da:	e7fe      	b.n	80034da <StartDefaultTask+0xe2a>
					  break;
 80034dc:	bf00      	nop
 80034de:	e1d7      	b.n	8003890 <StartDefaultTask+0x11e0>
					  break;
 80034e0:	bf00      	nop
					  }
				  }

			  }
			  break;
 80034e2:	e1d5      	b.n	8003890 <StartDefaultTask+0x11e0>

		  case SCARA_MODE_DUTY:
			  {
				  switch (current_duty_state) {
 80034e4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80034e8:	f103 0305 	add.w	r3, r3, #5
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	2b03      	cmp	r3, #3
 80034f0:	f200 81c0 	bhi.w	8003874 <StartDefaultTask+0x11c4>
 80034f4:	a201      	add	r2, pc, #4	; (adr r2, 80034fc <StartDefaultTask+0xe4c>)
 80034f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034fa:	bf00      	nop
 80034fc:	08003881 	.word	0x08003881
 8003500:	0800350d 	.word	0x0800350d
 8003504:	080036dd 	.word	0x080036dd
 8003508:	080037e7 	.word	0x080037e7

				  case SCARA_DUTY_STATE_INIT:
					  {

						  SCARA_StatusTypeDef status1, status2;
						  status1 = scaraInitDuty(duty_cmd);
 800350c:	f607 54f8 	addw	r4, r7, #3576	; 0xdf8
 8003510:	4668      	mov	r0, sp
 8003512:	f104 0310 	add.w	r3, r4, #16
 8003516:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 800351a:	4619      	mov	r1, r3
 800351c:	f012 fbe8 	bl	8015cf0 <memcpy>
 8003520:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003524:	f003 f8ec 	bl	8006700 <scaraInitDuty>
 8003528:	4603      	mov	r3, r0
 800352a:	f887 3fcb 	strb.w	r3, [r7, #4043]	; 0xfcb
						  if ( SCARA_STATUS_OK == status1) {
 800352e:	f897 3fcb 	ldrb.w	r3, [r7, #4043]	; 0xfcb
 8003532:	2b00      	cmp	r3, #0
 8003534:	f040 80a0 	bne.w	8003678 <StartDefaultTask+0xfc8>
							  status2 = scaraTestDuty();
 8003538:	f006 fea2 	bl	800a280 <scaraTestDuty>
 800353c:	4603      	mov	r3, r0
 800353e:	f887 3fca 	strb.w	r3, [r7, #4042]	; 0xfca
							  if (SCARA_STATUS_OK == status2) {
 8003542:	f897 3fca 	ldrb.w	r3, [r7, #4042]	; 0xfca
 8003546:	2b00      	cmp	r3, #0
 8003548:	d164      	bne.n	8003614 <StartDefaultTask+0xf64>
							  current_duty_state = SCARA_DUTY_STATE_FLOW;
 800354a:	2302      	movs	r3, #2
 800354c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003550:	f102 0205 	add.w	r2, r2, #5
 8003554:	7013      	strb	r3, [r2, #0]
							  //current_duty_state = SCARA_DUTY_STATE_FINISH;
							  run_time			= 0;
 8003556:	f04f 0200 	mov.w	r2, #0
 800355a:	f04f 0300 	mov.w	r3, #0
 800355e:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8003562:	f101 0110 	add.w	r1, r1, #16
 8003566:	e9c1 2300 	strd	r2, r3, [r1]
							  // Respond
							  detail_array[0] = status1;
 800356a:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 800356e:	f897 2fcb 	ldrb.w	r2, [r7, #4043]	; 0xfcb
 8003572:	701a      	strb	r2, [r3, #0]
							  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003574:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8003578:	6899      	ldr	r1, [r3, #8]
 800357a:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 800357e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003582:	f103 0308 	add.w	r3, r3, #8
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4413      	add	r3, r2
 800358a:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 800358e:	9300      	str	r3, [sp, #0]
 8003590:	2301      	movs	r3, #1
 8003592:	2008      	movs	r0, #8
 8003594:	f7fe fede 	bl	8002354 <commandRespond1>
 8003598:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
							  total_respond_length += respond_lenght;
 800359c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80035a0:	f103 0308 	add.w	r3, r3, #8
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 80035aa:	4413      	add	r3, r2
 80035ac:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80035b0:	f102 0208 	add.w	r2, r2, #8
 80035b4:	6013      	str	r3, [r2, #0]
							  detail_array[0] = NONE;
 80035b6:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 80035ba:	2225      	movs	r2, #37	; 0x25
 80035bc:	701a      	strb	r2, [r3, #0]
							  respond_lenght = commandRespond1(RPD_START, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80035be:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 80035c2:	6899      	ldr	r1, [r3, #8]
 80035c4:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 80035c8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80035cc:	f103 0308 	add.w	r3, r3, #8
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4413      	add	r3, r2
 80035d4:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 80035d8:	9300      	str	r3, [sp, #0]
 80035da:	2301      	movs	r3, #1
 80035dc:	2003      	movs	r0, #3
 80035de:	f7fe feb9 	bl	8002354 <commandRespond1>
 80035e2:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
							  total_respond_length += respond_lenght;
 80035e6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80035ea:	f103 0308 	add.w	r3, r3, #8
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 80035f4:	4413      	add	r3, r2
 80035f6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80035fa:	f102 0208 	add.w	r2, r2, #8
 80035fe:	6013      	str	r3, [r2, #0]
							respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
							total_respond_length += respond_lenght;
							  LOG_REPORT("INIT FAIL", __LINE__);
						  }
					  }
				  break;
 8003600:	e13f      	b.n	8003882 <StartDefaultTask+0x11d2>
 8003602:	bf00      	nop
 8003604:	2000eab8 	.word	0x2000eab8
 8003608:	2000ec38 	.word	0x2000ec38
 800360c:	0801c0a4 	.word	0x0801c0a4
 8003610:	0801c0b0 	.word	0x0801c0b0
								  current_duty_state 	= SCARA_DUTY_STATE_READY;
 8003614:	2300      	movs	r3, #0
 8003616:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800361a:	f102 0205 	add.w	r2, r2, #5
 800361e:	7013      	strb	r3, [r2, #0]
								  LOG_REPORT("TEST FAIL", __LINE__);
 8003620:	f240 217d 	movw	r1, #637	; 0x27d
 8003624:	48c8      	ldr	r0, [pc, #800]	; (8003948 <StartDefaultTask+0x1298>)
 8003626:	f7fe fefd 	bl	8002424 <LOG_REPORT>
								detail_array[0] = status2;
 800362a:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 800362e:	f897 2fca 	ldrb.w	r2, [r7, #4042]	; 0xfca
 8003632:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003634:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8003638:	6899      	ldr	r1, [r3, #8]
 800363a:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 800363e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003642:	f103 0308 	add.w	r3, r3, #8
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4413      	add	r3, r2
 800364a:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 800364e:	9300      	str	r3, [sp, #0]
 8003650:	2301      	movs	r3, #1
 8003652:	2007      	movs	r0, #7
 8003654:	f7fe fe7e 	bl	8002354 <commandRespond1>
 8003658:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
								total_respond_length += respond_lenght;
 800365c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003660:	f103 0308 	add.w	r3, r3, #8
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 800366a:	4413      	add	r3, r2
 800366c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003670:	f102 0208 	add.w	r2, r2, #8
 8003674:	6013      	str	r3, [r2, #0]
				  break;
 8003676:	e104      	b.n	8003882 <StartDefaultTask+0x11d2>
							  current_duty_state 	= SCARA_DUTY_STATE_READY;
 8003678:	2300      	movs	r3, #0
 800367a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800367e:	f102 0205 	add.w	r2, r2, #5
 8003682:	7013      	strb	r3, [r2, #0]
							detail_array[0] = status1;
 8003684:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8003688:	f897 2fcb 	ldrb.w	r2, [r7, #4043]	; 0xfcb
 800368c:	701a      	strb	r2, [r3, #0]
							respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800368e:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8003692:	6899      	ldr	r1, [r3, #8]
 8003694:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 8003698:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800369c:	f103 0308 	add.w	r3, r3, #8
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4413      	add	r3, r2
 80036a4:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 80036a8:	9300      	str	r3, [sp, #0]
 80036aa:	2301      	movs	r3, #1
 80036ac:	2007      	movs	r0, #7
 80036ae:	f7fe fe51 	bl	8002354 <commandRespond1>
 80036b2:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
							total_respond_length += respond_lenght;
 80036b6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80036ba:	f103 0308 	add.w	r3, r3, #8
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 80036c4:	4413      	add	r3, r2
 80036c6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80036ca:	f102 0208 	add.w	r2, r2, #8
 80036ce:	6013      	str	r3, [r2, #0]
							  LOG_REPORT("INIT FAIL", __LINE__);
 80036d0:	f44f 7122 	mov.w	r1, #648	; 0x288
 80036d4:	489d      	ldr	r0, [pc, #628]	; (800394c <StartDefaultTask+0x129c>)
 80036d6:	f7fe fea5 	bl	8002424 <LOG_REPORT>
				  break;
 80036da:	e0d2      	b.n	8003882 <StartDefaultTask+0x11d2>

				  case SCARA_DUTY_STATE_FLOW:
					  {
						  SCARA_StatusTypeDef status;
						  // Increase run time
						  run_time += T_SAMPLING;
 80036dc:	a398      	add	r3, pc, #608	; (adr r3, 8003940 <StartDefaultTask+0x1290>)
 80036de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e2:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 80036e6:	f101 0110 	add.w	r1, r1, #16
 80036ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80036ee:	f7fc fdcd 	bl	800028c <__adddf3>
 80036f2:	4602      	mov	r2, r0
 80036f4:	460b      	mov	r3, r1
 80036f6:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 80036fa:	f101 0110 	add.w	r1, r1, #16
 80036fe:	e9c1 2300 	strd	r2, r3, [r1]
						  // Check Time Out
						  if (scaraIsFinish(run_time)) {
 8003702:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003706:	f103 0310 	add.w	r3, r3, #16
 800370a:	ed93 0b00 	vldr	d0, [r3]
 800370e:	f006 fed1 	bl	800a4b4 <scaraIsFinish>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d006      	beq.n	8003726 <StartDefaultTask+0x1076>
							  current_duty_state = SCARA_DUTY_STATE_FINISH;// Work Done
 8003718:	2303      	movs	r3, #3
 800371a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800371e:	f102 0205 	add.w	r2, r2, #5
 8003722:	7013      	strb	r3, [r2, #0]
								total_respond_length += respond_lenght;
								  LOG_REPORT("STOP DUTY", __LINE__);
							  }
						  }
					  }
				  break;
 8003724:	e0ad      	b.n	8003882 <StartDefaultTask+0x11d2>
							  status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 8003726:	4c8a      	ldr	r4, [pc, #552]	; (8003950 <StartDefaultTask+0x12a0>)
 8003728:	4668      	mov	r0, sp
 800372a:	f104 0308 	add.w	r3, r4, #8
 800372e:	22b8      	movs	r2, #184	; 0xb8
 8003730:	4619      	mov	r1, r3
 8003732:	f012 fadd 	bl	8015cf0 <memcpy>
 8003736:	e894 000c 	ldmia.w	r4, {r2, r3}
 800373a:	4886      	ldr	r0, [pc, #536]	; (8003954 <StartDefaultTask+0x12a4>)
 800373c:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8003740:	f101 0110 	add.w	r1, r1, #16
 8003744:	ed91 0b00 	vldr	d0, [r1]
 8003748:	f006 f826 	bl	8009798 <scaraFlowDuty>
 800374c:	4603      	mov	r3, r0
 800374e:	f887 3fcc 	strb.w	r3, [r7, #4044]	; 0xfcc
							  if ( SCARA_STATUS_OK == status) {
 8003752:	f897 3fcc 	ldrb.w	r3, [r7, #4044]	; 0xfcc
 8003756:	2b00      	cmp	r3, #0
 8003758:	d113      	bne.n	8003782 <StartDefaultTask+0x10d2>
								  lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 800375a:	4c7d      	ldr	r4, [pc, #500]	; (8003950 <StartDefaultTask+0x12a0>)
 800375c:	4a7d      	ldr	r2, [pc, #500]	; (8003954 <StartDefaultTask+0x12a4>)
 800375e:	ab2c      	add	r3, sp, #176	; 0xb0
 8003760:	4611      	mov	r1, r2
 8003762:	22c0      	movs	r2, #192	; 0xc0
 8003764:	4618      	mov	r0, r3
 8003766:	f012 fac3 	bl	8015cf0 <memcpy>
 800376a:	4668      	mov	r0, sp
 800376c:	f104 0310 	add.w	r3, r4, #16
 8003770:	22b0      	movs	r2, #176	; 0xb0
 8003772:	4619      	mov	r1, r3
 8003774:	f012 fabc 	bl	8015cf0 <memcpy>
 8003778:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800377c:	f002 fc28 	bl	8005fd0 <lowlayer_computeAndWritePulse>
				  break;
 8003780:	e07f      	b.n	8003882 <StartDefaultTask+0x11d2>
								  current_duty_state = SCARA_DUTY_STATE_FINISH;
 8003782:	2303      	movs	r3, #3
 8003784:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003788:	f102 0205 	add.w	r2, r2, #5
 800378c:	7013      	strb	r3, [r2, #0]
								detail_array[0] = status;
 800378e:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8003792:	f897 2fcc 	ldrb.w	r2, [r7, #4044]	; 0xfcc
 8003796:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond1(RPD_STOP, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003798:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 800379c:	6899      	ldr	r1, [r3, #8]
 800379e:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 80037a2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80037a6:	f103 0308 	add.w	r3, r3, #8
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4413      	add	r3, r2
 80037ae:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	2301      	movs	r3, #1
 80037b6:	2006      	movs	r0, #6
 80037b8:	f7fe fdcc 	bl	8002354 <commandRespond1>
 80037bc:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
								total_respond_length += respond_lenght;
 80037c0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80037c4:	f103 0308 	add.w	r3, r3, #8
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 80037ce:	4413      	add	r3, r2
 80037d0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80037d4:	f102 0208 	add.w	r2, r2, #8
 80037d8:	6013      	str	r3, [r2, #0]
								  LOG_REPORT("STOP DUTY", __LINE__);
 80037da:	f44f 7128 	mov.w	r1, #672	; 0x2a0
 80037de:	485e      	ldr	r0, [pc, #376]	; (8003958 <StartDefaultTask+0x12a8>)
 80037e0:	f7fe fe20 	bl	8002424 <LOG_REPORT>
				  break;
 80037e4:	e04d      	b.n	8003882 <StartDefaultTask+0x11d2>

				  case SCARA_DUTY_STATE_FINISH:
					  {
						  lowlayer_readTruePosition(&positionNext);
 80037e6:	485b      	ldr	r0, [pc, #364]	; (8003954 <StartDefaultTask+0x12a4>)
 80037e8:	f002 fa62 	bl	8005cb0 <lowlayer_readTruePosition>
						  kinematicForward(&positionNext);
 80037ec:	4859      	ldr	r0, [pc, #356]	; (8003954 <StartDefaultTask+0x12a4>)
 80037ee:	f001 fb3b 	bl	8004e68 <kinematicForward>
						  current_duty_state = SCARA_DUTY_STATE_READY;
 80037f2:	2300      	movs	r3, #0
 80037f4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80037f8:	f102 0205 	add.w	r2, r2, #5
 80037fc:	7013      	strb	r3, [r2, #0]
						  positionNext.t = 0;
 80037fe:	4955      	ldr	r1, [pc, #340]	; (8003954 <StartDefaultTask+0x12a4>)
 8003800:	f04f 0200 	mov.w	r2, #0
 8003804:	f04f 0300 	mov.w	r3, #0
 8003808:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
						  positionNext.total_time = 0;
 800380c:	4951      	ldr	r1, [pc, #324]	; (8003954 <StartDefaultTask+0x12a4>)
 800380e:	f04f 0200 	mov.w	r2, #0
 8003812:	f04f 0300 	mov.w	r3, #0
 8003816:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
						  positionNext.q = 0;
 800381a:	494e      	ldr	r1, [pc, #312]	; (8003954 <StartDefaultTask+0x12a4>)
 800381c:	f04f 0200 	mov.w	r2, #0
 8003820:	f04f 0300 	mov.w	r3, #0
 8003824:	e9c1 2300 	strd	r2, r3, [r1]
						  // Done Inform

					detail_array[0] = NONE;
 8003828:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 800382c:	2225      	movs	r2, #37	; 0x25
 800382e:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_DONE, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003830:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8003834:	6899      	ldr	r1, [r3, #8]
 8003836:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 800383a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800383e:	f103 0308 	add.w	r3, r3, #8
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4413      	add	r3, r2
 8003846:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 800384a:	9300      	str	r3, [sp, #0]
 800384c:	2301      	movs	r3, #1
 800384e:	2005      	movs	r0, #5
 8003850:	f7fe fd80 	bl	8002354 <commandRespond1>
 8003854:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
					total_respond_length += respond_lenght;
 8003858:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800385c:	f103 0308 	add.w	r3, r3, #8
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 8003866:	4413      	add	r3, r2
 8003868:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800386c:	f102 0208 	add.w	r2, r2, #8
 8003870:	6013      	str	r3, [r2, #0]
					  }
				  break;
 8003872:	e006      	b.n	8003882 <StartDefaultTask+0x11d2>

				  default:
					  {
						  LOG_REPORT("ERROR STATE !!!", __LINE__);
 8003874:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8003878:	4838      	ldr	r0, [pc, #224]	; (800395c <StartDefaultTask+0x12ac>)
 800387a:	f7fe fdd3 	bl	8002424 <LOG_REPORT>
						  while(1);
 800387e:	e7fe      	b.n	800387e <StartDefaultTask+0x11ce>
				  break;
 8003880:	bf00      	nop
					  }
				  }

			  }
			  break;
 8003882:	e005      	b.n	8003890 <StartDefaultTask+0x11e0>

		  default:
			  {
				  LOG_REPORT("ERROR MODE !!!", __LINE__);
 8003884:	f240 21c2 	movw	r1, #706	; 0x2c2
 8003888:	4835      	ldr	r0, [pc, #212]	; (8003960 <StartDefaultTask+0x12b0>)
 800388a:	f7fe fdcb 	bl	8002424 <LOG_REPORT>
				  while(1);
 800388e:	e7fe      	b.n	800388e <StartDefaultTask+0x11de>
			  }
		  }
	  }
	  break;
 8003890:	f000 bd73 	b.w	800437a <StartDefaultTask+0x1cca>

	  case SCARA_METHOD_GCODE:
	  {
		  switch (current_duty_state)
 8003894:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003898:	f103 0305 	add.w	r3, r3, #5
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	2b04      	cmp	r3, #4
 80038a0:	f200 8192 	bhi.w	8003bc8 <StartDefaultTask+0x1518>
 80038a4:	a201      	add	r2, pc, #4	; (adr r2, 80038ac <StartDefaultTask+0x11fc>)
 80038a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038aa:	bf00      	nop
 80038ac:	08003bc9 	.word	0x08003bc9
 80038b0:	08003bc9 	.word	0x08003bc9
 80038b4:	08003a65 	.word	0x08003a65
 80038b8:	08003bc9 	.word	0x08003bc9
 80038bc:	080038c1 	.word	0x080038c1
		  case SCARA_DUTY_STATE_INIT:{

		  }
		  break;
		  case SCARA_DUTY_STATE_OPERATION:{
			  update_gcode_point(&duty_cmd, Gcode_Cor[run_point], run_point);
 80038c0:	4928      	ldr	r1, [pc, #160]	; (8003964 <StartDefaultTask+0x12b4>)
 80038c2:	f8d7 2ffc 	ldr.w	r2, [r7, #4092]	; 0xffc
 80038c6:	4613      	mov	r3, r2
 80038c8:	00db      	lsls	r3, r3, #3
 80038ca:	1a9b      	subs	r3, r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	18cc      	adds	r4, r1, r3
 80038d0:	f607 56f8 	addw	r6, r7, #3576	; 0xdf8
 80038d4:	f8d7 3ffc 	ldr.w	r3, [r7, #4092]	; 0xffc
 80038d8:	9304      	str	r3, [sp, #16]
 80038da:	466d      	mov	r5, sp
 80038dc:	f104 030c 	add.w	r3, r4, #12
 80038e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038e2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80038e6:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80038ea:	4630      	mov	r0, r6
 80038ec:	f000 ff34 	bl	8004758 <update_gcode_point>
			  SCARA_StatusTypeDef status;
			  status = scaraInitDuty(duty_cmd);
 80038f0:	f607 54f8 	addw	r4, r7, #3576	; 0xdf8
 80038f4:	4668      	mov	r0, sp
 80038f6:	f104 0310 	add.w	r3, r4, #16
 80038fa:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 80038fe:	4619      	mov	r1, r3
 8003900:	f012 f9f6 	bl	8015cf0 <memcpy>
 8003904:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003908:	f002 fefa 	bl	8006700 <scaraInitDuty>
 800390c:	4603      	mov	r3, r0
 800390e:	f887 3fce 	strb.w	r3, [r7, #4046]	; 0xfce
			  if(status == SCARA_STATUS_OK){
 8003912:	f897 3fce 	ldrb.w	r3, [r7, #4046]	; 0xfce
 8003916:	2b00      	cmp	r3, #0
 8003918:	d177      	bne.n	8003a0a <StartDefaultTask+0x135a>
				  if(duty_cmd.trajec_type == DUTY_TRAJECTORY_LINEAR){
 800391a:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 800391e:	7c1b      	ldrb	r3, [r3, #16]
 8003920:	2b02      	cmp	r3, #2
 8003922:	d121      	bne.n	8003968 <StartDefaultTask+0x12b8>
					  run_time = 0;
 8003924:	f04f 0200 	mov.w	r2, #0
 8003928:	f04f 0300 	mov.w	r3, #0
 800392c:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8003930:	f101 0110 	add.w	r1, r1, #16
 8003934:	e9c1 2300 	strd	r2, r3, [r1]
 8003938:	e024      	b.n	8003984 <StartDefaultTask+0x12d4>
 800393a:	bf00      	nop
 800393c:	f3af 8000 	nop.w
 8003940:	40000000 	.word	0x40000000
 8003944:	3f847ae1 	.word	0x3f847ae1
 8003948:	0801c0c0 	.word	0x0801c0c0
 800394c:	0801c0cc 	.word	0x0801c0cc
 8003950:	2000eab8 	.word	0x2000eab8
 8003954:	2000ec38 	.word	0x2000ec38
 8003958:	0801c0d8 	.word	0x0801c0d8
 800395c:	0801c0b0 	.word	0x0801c0b0
 8003960:	0801c0e4 	.word	0x0801c0e4
 8003964:	20006fa0 	.word	0x20006fa0
				  }else if(duty_cmd.trajec_type == DUTY_TRAJECTORY_GCODE_LSPB){
 8003968:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 800396c:	7c1b      	ldrb	r3, [r3, #16]
 800396e:	2b03      	cmp	r3, #3
 8003970:	d108      	bne.n	8003984 <StartDefaultTask+0x12d4>
					  run_time = last_T;
 8003972:	4bd5      	ldr	r3, [pc, #852]	; (8003cc8 <StartDefaultTask+0x1618>)
 8003974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003978:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 800397c:	f101 0110 	add.w	r1, r1, #16
 8003980:	e9c1 2300 	strd	r2, r3, [r1]
				  }
				  current_duty_state = SCARA_DUTY_STATE_FLOW;
 8003984:	2302      	movs	r3, #2
 8003986:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800398a:	f102 0205 	add.w	r2, r2, #5
 800398e:	7013      	strb	r3, [r2, #0]
				  detail_array[0] = (uint8_t)(run_point * 100.0f / total_num_of_point );
 8003990:	f8d7 3ffc 	ldr.w	r3, [r7, #4092]	; 0xffc
 8003994:	ee07 3a90 	vmov	s15, r3
 8003998:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800399c:	ed9f 7acb 	vldr	s14, [pc, #812]	; 8003ccc <StartDefaultTask+0x161c>
 80039a0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80039a4:	4bca      	ldr	r3, [pc, #808]	; (8003cd0 <StartDefaultTask+0x1620>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	ee07 3a90 	vmov	s15, r3
 80039ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039b8:	edc7 7a01 	vstr	s15, [r7, #4]
 80039bc:	793b      	ldrb	r3, [r7, #4]
 80039be:	b2da      	uxtb	r2, r3
 80039c0:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 80039c4:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RDP_GCODE_PROCESS, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80039c6:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 80039ca:	6899      	ldr	r1, [r3, #8]
 80039cc:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 80039d0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80039d4:	f103 0308 	add.w	r3, r3, #8
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4413      	add	r3, r2
 80039dc:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 80039e0:	9300      	str	r3, [sp, #0]
 80039e2:	2301      	movs	r3, #1
 80039e4:	200b      	movs	r0, #11
 80039e6:	f7fe fcb5 	bl	8002354 <commandRespond1>
 80039ea:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
				  total_respond_length += respond_lenght;
 80039ee:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80039f2:	f103 0308 	add.w	r3, r3, #8
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 80039fc:	4413      	add	r3, r2
 80039fe:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003a02:	f102 0208 	add.w	r2, r2, #8
 8003a06:	6013      	str	r3, [r2, #0]
 8003a08:	e02c      	b.n	8003a64 <StartDefaultTask+0x13b4>
			  }else{
				  current_duty_state = SCARA_DUTY_STATE_FINISH;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003a10:	f102 0205 	add.w	r2, r2, #5
 8003a14:	7013      	strb	r3, [r2, #0]
				  detail_array[0] = status;
 8003a16:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8003a1a:	f897 2fce 	ldrb.w	r2, [r7, #4046]	; 0xfce
 8003a1e:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003a20:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8003a24:	6899      	ldr	r1, [r3, #8]
 8003a26:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 8003a2a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003a2e:	f103 0308 	add.w	r3, r3, #8
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4413      	add	r3, r2
 8003a36:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 8003a3a:	9300      	str	r3, [sp, #0]
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	2007      	movs	r0, #7
 8003a40:	f7fe fc88 	bl	8002354 <commandRespond1>
 8003a44:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
				  total_respond_length += respond_lenght;
 8003a48:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003a4c:	f103 0308 	add.w	r3, r3, #8
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 8003a56:	4413      	add	r3, r2
 8003a58:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003a5c:	f102 0208 	add.w	r2, r2, #8
 8003a60:	6013      	str	r3, [r2, #0]
				  break;
 8003a62:	e0b2      	b.n	8003bca <StartDefaultTask+0x151a>
			  }
		  }
		  //break;

		  case SCARA_DUTY_STATE_FLOW:{
			  run_time += T_SAMPLING;
 8003a64:	a396      	add	r3, pc, #600	; (adr r3, 8003cc0 <StartDefaultTask+0x1610>)
 8003a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6a:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8003a6e:	f101 0110 	add.w	r1, r1, #16
 8003a72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003a76:	f7fc fc09 	bl	800028c <__adddf3>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8003a82:	f101 0110 	add.w	r1, r1, #16
 8003a86:	e9c1 2300 	strd	r2, r3, [r1]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 8003a8a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003a8e:	f103 0310 	add.w	r3, r3, #16
 8003a92:	ed93 0b00 	vldr	d0, [r3]
 8003a96:	f006 fd0d 	bl	800a4b4 <scaraIsFinish>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d038      	beq.n	8003b12 <StartDefaultTask+0x1462>
				if(run_point >= total_num_of_point){
 8003aa0:	4b8b      	ldr	r3, [pc, #556]	; (8003cd0 <StartDefaultTask+0x1620>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f8d7 2ffc 	ldr.w	r2, [r7, #4092]	; 0xffc
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	db0c      	blt.n	8003ac6 <StartDefaultTask+0x1416>
					current_duty_state = SCARA_DUTY_STATE_READY;
 8003aac:	2300      	movs	r3, #0
 8003aae:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003ab2:	f102 0205 	add.w	r2, r2, #5
 8003ab6:	7013      	strb	r3, [r2, #0]
					lowlayer_readTruePosition(&positionNext);
 8003ab8:	4886      	ldr	r0, [pc, #536]	; (8003cd4 <StartDefaultTask+0x1624>)
 8003aba:	f002 f8f9 	bl	8005cb0 <lowlayer_readTruePosition>
				    kinematicForward(&positionNext);
 8003abe:	4885      	ldr	r0, [pc, #532]	; (8003cd4 <StartDefaultTask+0x1624>)
 8003ac0:	f001 f9d2 	bl	8004e68 <kinematicForward>
					  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
					  total_respond_length += respond_lenght;
				  }
			  }
		  }
		  break;
 8003ac4:	e081      	b.n	8003bca <StartDefaultTask+0x151a>
					accumulate_update(Gcode_Cor[run_point]);
 8003ac6:	4984      	ldr	r1, [pc, #528]	; (8003cd8 <StartDefaultTask+0x1628>)
 8003ac8:	f8d7 2ffc 	ldr.w	r2, [r7, #4092]	; 0xffc
 8003acc:	4613      	mov	r3, r2
 8003ace:	00db      	lsls	r3, r3, #3
 8003ad0:	1a9b      	subs	r3, r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	440b      	add	r3, r1
 8003ad6:	466c      	mov	r4, sp
 8003ad8:	f103 0210 	add.w	r2, r3, #16
 8003adc:	ca07      	ldmia	r2, {r0, r1, r2}
 8003ade:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003ae2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ae4:	f001 f8d0 	bl	8004c88 <accumulate_update>
					current_duty_state = SCARA_DUTY_STATE_OPERATION;
 8003ae8:	2304      	movs	r3, #4
 8003aea:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003aee:	f102 0205 	add.w	r2, r2, #5
 8003af2:	7013      	strb	r3, [r2, #0]
					run_point++;
 8003af4:	f8d7 3ffc 	ldr.w	r3, [r7, #4092]	; 0xffc
 8003af8:	3301      	adds	r3, #1
 8003afa:	f8c7 3ffc 	str.w	r3, [r7, #4092]	; 0xffc
					memcpy(&positionNext, &duty_cmd.target_point, sizeof(SCARA_PositionTypeDef));
 8003afe:	4a75      	ldr	r2, [pc, #468]	; (8003cd4 <StartDefaultTask+0x1624>)
 8003b00:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8003b04:	4610      	mov	r0, r2
 8003b06:	3328      	adds	r3, #40	; 0x28
 8003b08:	22c0      	movs	r2, #192	; 0xc0
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	f012 f8f0 	bl	8015cf0 <memcpy>
		  break;
 8003b10:	e05b      	b.n	8003bca <StartDefaultTask+0x151a>
				SCARA_StatusTypeDef status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 8003b12:	4c72      	ldr	r4, [pc, #456]	; (8003cdc <StartDefaultTask+0x162c>)
 8003b14:	4668      	mov	r0, sp
 8003b16:	f104 0308 	add.w	r3, r4, #8
 8003b1a:	22b8      	movs	r2, #184	; 0xb8
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	f012 f8e7 	bl	8015cf0 <memcpy>
 8003b22:	e894 000c 	ldmia.w	r4, {r2, r3}
 8003b26:	486b      	ldr	r0, [pc, #428]	; (8003cd4 <StartDefaultTask+0x1624>)
 8003b28:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8003b2c:	f101 0110 	add.w	r1, r1, #16
 8003b30:	ed91 0b00 	vldr	d0, [r1]
 8003b34:	f005 fe30 	bl	8009798 <scaraFlowDuty>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	f887 3fcd 	strb.w	r3, [r7, #4045]	; 0xfcd
				if ( SCARA_STATUS_OK == status) {
 8003b3e:	f897 3fcd 	ldrb.w	r3, [r7, #4045]	; 0xfcd
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d113      	bne.n	8003b6e <StartDefaultTask+0x14be>
					lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 8003b46:	4c65      	ldr	r4, [pc, #404]	; (8003cdc <StartDefaultTask+0x162c>)
 8003b48:	4a62      	ldr	r2, [pc, #392]	; (8003cd4 <StartDefaultTask+0x1624>)
 8003b4a:	ab2c      	add	r3, sp, #176	; 0xb0
 8003b4c:	4611      	mov	r1, r2
 8003b4e:	22c0      	movs	r2, #192	; 0xc0
 8003b50:	4618      	mov	r0, r3
 8003b52:	f012 f8cd 	bl	8015cf0 <memcpy>
 8003b56:	4668      	mov	r0, sp
 8003b58:	f104 0310 	add.w	r3, r4, #16
 8003b5c:	22b0      	movs	r2, #176	; 0xb0
 8003b5e:	4619      	mov	r1, r3
 8003b60:	f012 f8c6 	bl	8015cf0 <memcpy>
 8003b64:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003b68:	f002 fa32 	bl	8005fd0 <lowlayer_computeAndWritePulse>
		  break;
 8003b6c:	e02d      	b.n	8003bca <StartDefaultTask+0x151a>
					  current_duty_state = SCARA_DUTY_STATE_FINISH;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003b74:	f102 0205 	add.w	r2, r2, #5
 8003b78:	7013      	strb	r3, [r2, #0]
					  detail_array[0] = status;
 8003b7a:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8003b7e:	f897 2fcd 	ldrb.w	r2, [r7, #4045]	; 0xfcd
 8003b82:	701a      	strb	r2, [r3, #0]
					  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003b84:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8003b88:	6899      	ldr	r1, [r3, #8]
 8003b8a:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 8003b8e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003b92:	f103 0308 	add.w	r3, r3, #8
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4413      	add	r3, r2
 8003b9a:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 8003b9e:	9300      	str	r3, [sp, #0]
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	2007      	movs	r0, #7
 8003ba4:	f7fe fbd6 	bl	8002354 <commandRespond1>
 8003ba8:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
					  total_respond_length += respond_lenght;
 8003bac:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003bb0:	f103 0308 	add.w	r3, r3, #8
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 8003bba:	4413      	add	r3, r2
 8003bbc:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003bc0:	f102 0208 	add.w	r2, r2, #8
 8003bc4:	6013      	str	r3, [r2, #0]
		  break;
 8003bc6:	e000      	b.n	8003bca <StartDefaultTask+0x151a>

		  }
		  break;
		  
		  default:
			  break;
 8003bc8:	bf00      	nop
		  }
	  }

	  break;
 8003bca:	e3d6      	b.n	800437a <StartDefaultTask+0x1cca>
	  case SCARA_METHOD_TEST:
	  {
		  lowlayer_writePulse(test_value[0], test_value[1], test_value[2], test_value[3]);
 8003bcc:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8003bd0:	f993 0000 	ldrsb.w	r0, [r3]
 8003bd4:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8003bd8:	f993 1001 	ldrsb.w	r1, [r3, #1]
 8003bdc:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8003be0:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8003be4:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8003be8:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003bec:	f002 fb98 	bl	8006320 <lowlayer_writePulse>
	  }
	  break;
 8003bf0:	e3c3      	b.n	800437a <StartDefaultTask+0x1cca>


	  case SCARA_METHOD_PICK_AND_PLACE:
	  {
		  switch(current_duty_state) {
 8003bf2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003bf6:	f103 0305 	add.w	r3, r3, #5
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	2b03      	cmp	r3, #3
 8003c00:	f200 83ba 	bhi.w	8004378 <StartDefaultTask+0x1cc8>
 8003c04:	a201      	add	r2, pc, #4	; (adr r2, 8003c0c <StartDefaultTask+0x155c>)
 8003c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c0a:	bf00      	nop
 8003c0c:	08003c1d 	.word	0x08003c1d
 8003c10:	080041c9 	.word	0x080041c9
 8003c14:	08004347 	.word	0x08004347
 8003c18:	08003c6d 	.word	0x08003c6d
		  case SCARA_DUTY_STATE_INIT:{
			  HAL_TIM_Base_Start(&htim2);
 8003c1c:	4830      	ldr	r0, [pc, #192]	; (8003ce0 <StartDefaultTask+0x1630>)
 8003c1e:	f00a f908 	bl	800de32 <HAL_TIM_Base_Start>
			  object_tail_pointer = 0;
 8003c22:	2300      	movs	r3, #0
 8003c24:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003c28:	f102 020e 	add.w	r2, r2, #14
 8003c2c:	7013      	strb	r3, [r2, #0]
			  object_head_pointer = 0;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003c34:	f102 020d 	add.w	r2, r2, #13
 8003c38:	7013      	strb	r3, [r2, #0]
			  operation_state = SCARA_MOVE_TO_TARGET;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003c40:	f102 020f 	add.w	r2, r2, #15
 8003c44:	7013      	strb	r3, [r2, #0]
			  current_duty_state = SCARA_DUTY_STATE_OPERATION;
 8003c46:	2304      	movs	r3, #4
 8003c48:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003c4c:	f102 0205 	add.w	r2, r2, #5
 8003c50:	7013      	strb	r3, [r2, #0]
			  duty_cmd.robot_method = SCARA_METHOD_PICK_AND_PLACE;
 8003c52:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8003c56:	2204      	movs	r2, #4
 8003c58:	705a      	strb	r2, [r3, #1]
			  duty_cmd.path_type = DUTY_PATH_LINE;
 8003c5a:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8003c5e:	2200      	movs	r2, #0
 8003c60:	739a      	strb	r2, [r3, #14]
			  duty_cmd.space_type = DUTY_SPACE_TASK;
 8003c62:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8003c66:	2200      	movs	r2, #0
 8003c68:	735a      	strb	r2, [r3, #13]
		  }
		  break;
 8003c6a:	e382      	b.n	8004372 <StartDefaultTask+0x1cc2>

		  case SCARA_DUTY_STATE_OPERATION:{
			  if(object_tail_pointer != object_head_pointer){
 8003c6c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003c70:	f103 030e 	add.w	r3, r3, #14
 8003c74:	781a      	ldrb	r2, [r3, #0]
 8003c76:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003c7a:	f103 030d 	add.w	r3, r3, #13
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	f000 8373 	beq.w	800436c <StartDefaultTask+0x1cbc>
				  switch(operation_state){
 8003c86:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003c8a:	f103 030f 	add.w	r3, r3, #15
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	2b07      	cmp	r3, #7
 8003c92:	f200 81cd 	bhi.w	8004030 <StartDefaultTask+0x1980>
 8003c96:	a201      	add	r2, pc, #4	; (adr r2, 8003c9c <StartDefaultTask+0x15ec>)
 8003c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c9c:	08003ce9 	.word	0x08003ce9
 8003ca0:	08003de5 	.word	0x08003de5
 8003ca4:	08003e19 	.word	0x08003e19
 8003ca8:	08003e2f 	.word	0x08003e2f
 8003cac:	08003e63 	.word	0x08003e63
 8003cb0:	08003f8b 	.word	0x08003f8b
 8003cb4:	08003fbf 	.word	0x08003fbf
 8003cb8:	08003ffd 	.word	0x08003ffd
 8003cbc:	f3af 8000 	nop.w
 8003cc0:	40000000 	.word	0x40000000
 8003cc4:	3f847ae1 	.word	0x3f847ae1
 8003cc8:	2000dd18 	.word	0x2000dd18
 8003ccc:	42c80000 	.word	0x42c80000
 8003cd0:	20006f90 	.word	0x20006f90
 8003cd4:	2000ec38 	.word	0x2000ec38
 8003cd8:	20006fa0 	.word	0x20006fa0
 8003cdc:	2000eab8 	.word	0x2000eab8
 8003ce0:	2000ed38 	.word	0x2000ed38
 8003ce4:	399c09bf 	.word	0x399c09bf
					  case SCARA_MOVE_TO_TARGET:{
						  double wait_time = TIMER_SCALE*((uint16_t)(TIM2->CNT - Object[object_tail_pointer].timer_value)) + MOVE_TIME + PUT_DOWN_TIME_ON_OBJECT;
 8003ce8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003cf4:	f103 030e 	add.w	r3, r3, #14
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003cfe:	f44f 70c4 	mov.w	r0, #392	; 0x188
 8003d02:	fb00 f303 	mul.w	r3, r0, r3
 8003d06:	440b      	add	r3, r1
 8003d08:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003d0c:	881b      	ldrh	r3, [r3, #0]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	ee07 3a90 	vmov	s15, r3
 8003d16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d1a:	ed1f 7a0e 	vldr	s14, [pc, #-56]	; 8003ce4 <StartDefaultTask+0x1634>
 8003d1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d22:	ee17 0a90 	vmov	r0, s15
 8003d26:	f7fc fc0f 	bl	8000548 <__aeabi_f2d>
 8003d2a:	4baa      	ldr	r3, [pc, #680]	; (8003fd4 <StartDefaultTask+0x1924>)
 8003d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d30:	f7fc faac 	bl	800028c <__adddf3>
 8003d34:	4602      	mov	r2, r0
 8003d36:	460b      	mov	r3, r1
 8003d38:	4610      	mov	r0, r2
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	4ba6      	ldr	r3, [pc, #664]	; (8003fd8 <StartDefaultTask+0x1928>)
 8003d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d42:	f7fc faa3 	bl	800028c <__adddf3>
 8003d46:	4602      	mov	r2, r0
 8003d48:	460b      	mov	r3, r1
 8003d4a:	f507 617d 	add.w	r1, r7, #4048	; 0xfd0
 8003d4e:	e9c1 2300 	strd	r2, r3, [r1]
						  Object[object_tail_pointer].object_position.y -= wait_time*conveyor_speed;
 8003d52:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003d56:	f103 030e 	add.w	r3, r3, #14
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8003d60:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8003d64:	fb01 f303 	mul.w	r3, r1, r3
 8003d68:	4413      	add	r3, r2
 8003d6a:	3350      	adds	r3, #80	; 0x50
 8003d6c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003d70:	4b9a      	ldr	r3, [pc, #616]	; (8003fdc <StartDefaultTask+0x192c>)
 8003d72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d76:	f507 637d 	add.w	r3, r7, #4048	; 0xfd0
 8003d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d7e:	f7fc fc3b 	bl	80005f8 <__aeabi_dmul>
 8003d82:	4602      	mov	r2, r0
 8003d84:	460b      	mov	r3, r1
 8003d86:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8003d8a:	f101 010e 	add.w	r1, r1, #14
 8003d8e:	780e      	ldrb	r6, [r1, #0]
 8003d90:	4620      	mov	r0, r4
 8003d92:	4629      	mov	r1, r5
 8003d94:	f7fc fa78 	bl	8000288 <__aeabi_dsub>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8003da0:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8003da4:	fb01 f106 	mul.w	r1, r1, r6
 8003da8:	4401      	add	r1, r0
 8003daa:	3150      	adds	r1, #80	; 0x50
 8003dac:	e9c1 2300 	strd	r2, r3, [r1]
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 8003db0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003db4:	f103 030e 	add.w	r3, r3, #14
 8003db8:	7819      	ldrb	r1, [r3, #0]
 8003dba:	4b89      	ldr	r3, [pc, #548]	; (8003fe0 <StartDefaultTask+0x1930>)
 8003dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc0:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8003dc4:	f44f 74c4 	mov.w	r4, #392	; 0x188
 8003dc8:	fb04 f101 	mul.w	r1, r4, r1
 8003dcc:	4401      	add	r1, r0
 8003dce:	3158      	adds	r1, #88	; 0x58
 8003dd0:	e9c1 2300 	strd	r2, r3, [r1]
						  state_time = MOVE_TIME;
 8003dd4:	4b7f      	ldr	r3, [pc, #508]	; (8003fd4 <StartDefaultTask+0x1924>)
 8003dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dda:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8003dde:	e9c1 2300 	strd	r2, r3, [r1]
					  }
					  break;
 8003de2:	e125      	b.n	8004030 <StartDefaultTask+0x1980>

					  case SCARA_MOVE_DOWN_ON_OBJECT:{
						  Object[object_tail_pointer].object_position.z = DOWN_HEIGHT_ON_OBJECT;
 8003de4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003de8:	f103 030e 	add.w	r3, r3, #14
 8003dec:	7819      	ldrb	r1, [r3, #0]
 8003dee:	4b7d      	ldr	r3, [pc, #500]	; (8003fe4 <StartDefaultTask+0x1934>)
 8003df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df4:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8003df8:	f44f 74c4 	mov.w	r4, #392	; 0x188
 8003dfc:	fb04 f101 	mul.w	r1, r4, r1
 8003e00:	4401      	add	r1, r0
 8003e02:	3158      	adds	r1, #88	; 0x58
 8003e04:	e9c1 2300 	strd	r2, r3, [r1]
						  state_time = PUT_DOWN_TIME_ON_OBJECT;
 8003e08:	4b73      	ldr	r3, [pc, #460]	; (8003fd8 <StartDefaultTask+0x1928>)
 8003e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e0e:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8003e12:	e9c1 2300 	strd	r2, r3, [r1]
					  }
					  break;
 8003e16:	e10b      	b.n	8004030 <StartDefaultTask+0x1980>
					  case SCARA_ATTACH:{
						  state_time = ATTACH_TIME;
 8003e18:	4b73      	ldr	r3, [pc, #460]	; (8003fe8 <StartDefaultTask+0x1938>)
 8003e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e1e:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8003e22:	e9c1 2300 	strd	r2, r3, [r1]
						  scaraSetOutput(1);
 8003e26:	2001      	movs	r0, #1
 8003e28:	f006 fab2 	bl	800a390 <scaraSetOutput>
					  }
					  break;
 8003e2c:	e100      	b.n	8004030 <StartDefaultTask+0x1980>
					  case SCARA_MOVE_UP_ON_OBJECT:{
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 8003e2e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003e32:	f103 030e 	add.w	r3, r3, #14
 8003e36:	7819      	ldrb	r1, [r3, #0]
 8003e38:	4b69      	ldr	r3, [pc, #420]	; (8003fe0 <StartDefaultTask+0x1930>)
 8003e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e3e:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8003e42:	f44f 74c4 	mov.w	r4, #392	; 0x188
 8003e46:	fb04 f101 	mul.w	r1, r4, r1
 8003e4a:	4401      	add	r1, r0
 8003e4c:	3158      	adds	r1, #88	; 0x58
 8003e4e:	e9c1 2300 	strd	r2, r3, [r1]
						  state_time = PICK_UP_TIME_ON_OBJECT;
 8003e52:	4b66      	ldr	r3, [pc, #408]	; (8003fec <StartDefaultTask+0x193c>)
 8003e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e58:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8003e5c:	e9c1 2300 	strd	r2, r3, [r1]
					  }
					  break;
 8003e60:	e0e6      	b.n	8004030 <StartDefaultTask+0x1980>
					  case SCARA_MOVE_TO_SLOT :{

						  Object[object_tail_pointer].object_position.x = SLot_Cordinate[Object[object_tail_pointer].object_position.object_type].posx;
 8003e62:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003e66:	f103 030e 	add.w	r3, r3, #14
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8003e70:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8003e74:	fb01 f303 	mul.w	r3, r1, r3
 8003e78:	4413      	add	r3, r2
 8003e7a:	33b8      	adds	r3, #184	; 0xb8
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003e84:	f103 030e 	add.w	r3, r3, #14
 8003e88:	7819      	ldrb	r1, [r3, #0]
 8003e8a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003e8e:	3a10      	subs	r2, #16
 8003e90:	4603      	mov	r3, r0
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	4403      	add	r3, r0
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	4413      	add	r3, r2
 8003e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9e:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8003ea2:	f44f 74c4 	mov.w	r4, #392	; 0x188
 8003ea6:	fb04 f101 	mul.w	r1, r4, r1
 8003eaa:	4401      	add	r1, r0
 8003eac:	3148      	adds	r1, #72	; 0x48
 8003eae:	e9c1 2300 	strd	r2, r3, [r1]
						  Object[object_tail_pointer].object_position.y = SLot_Cordinate[Object[object_tail_pointer].object_position.object_type].posy;
 8003eb2:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003eb6:	f103 030e 	add.w	r3, r3, #14
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8003ec0:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8003ec4:	fb01 f303 	mul.w	r3, r1, r3
 8003ec8:	4413      	add	r3, r2
 8003eca:	33b8      	adds	r3, #184	; 0xb8
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003ed4:	f103 030e 	add.w	r3, r3, #14
 8003ed8:	7819      	ldrb	r1, [r3, #0]
 8003eda:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003ede:	3a10      	subs	r2, #16
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	005b      	lsls	r3, r3, #1
 8003ee4:	4403      	add	r3, r0
 8003ee6:	00db      	lsls	r3, r3, #3
 8003ee8:	4413      	add	r3, r2
 8003eea:	3308      	adds	r3, #8
 8003eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef0:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8003ef4:	f44f 74c4 	mov.w	r4, #392	; 0x188
 8003ef8:	fb04 f101 	mul.w	r1, r4, r1
 8003efc:	4401      	add	r1, r0
 8003efe:	3150      	adds	r1, #80	; 0x50
 8003f00:	e9c1 2300 	strd	r2, r3, [r1]
						  Object[object_tail_pointer].object_position.roll = SLot_Cordinate[Object[object_tail_pointer].object_position.object_type].roll;
 8003f04:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003f08:	f103 030e 	add.w	r3, r3, #14
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8003f12:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8003f16:	fb01 f303 	mul.w	r3, r1, r3
 8003f1a:	4413      	add	r3, r2
 8003f1c:	33b8      	adds	r3, #184	; 0xb8
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003f26:	f103 030e 	add.w	r3, r3, #14
 8003f2a:	7819      	ldrb	r1, [r3, #0]
 8003f2c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003f30:	3a10      	subs	r2, #16
 8003f32:	4603      	mov	r3, r0
 8003f34:	005b      	lsls	r3, r3, #1
 8003f36:	4403      	add	r3, r0
 8003f38:	00db      	lsls	r3, r3, #3
 8003f3a:	4413      	add	r3, r2
 8003f3c:	3310      	adds	r3, #16
 8003f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f42:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8003f46:	f44f 74c4 	mov.w	r4, #392	; 0x188
 8003f4a:	fb04 f101 	mul.w	r1, r4, r1
 8003f4e:	4401      	add	r1, r0
 8003f50:	3160      	adds	r1, #96	; 0x60
 8003f52:	e9c1 2300 	strd	r2, r3, [r1]
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 8003f56:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003f5a:	f103 030e 	add.w	r3, r3, #14
 8003f5e:	7819      	ldrb	r1, [r3, #0]
 8003f60:	4b1f      	ldr	r3, [pc, #124]	; (8003fe0 <StartDefaultTask+0x1930>)
 8003f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f66:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8003f6a:	f44f 74c4 	mov.w	r4, #392	; 0x188
 8003f6e:	fb04 f101 	mul.w	r1, r4, r1
 8003f72:	4401      	add	r1, r0
 8003f74:	3158      	adds	r1, #88	; 0x58
 8003f76:	e9c1 2300 	strd	r2, r3, [r1]
						  state_time = MOVE_TIME;
 8003f7a:	4b16      	ldr	r3, [pc, #88]	; (8003fd4 <StartDefaultTask+0x1924>)
 8003f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f80:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8003f84:	e9c1 2300 	strd	r2, r3, [r1]
					  }
					  break;
 8003f88:	e052      	b.n	8004030 <StartDefaultTask+0x1980>
					  case SCARA_MOVE_DOWN_ON_SLOT:{
						  Object[object_tail_pointer].object_position.z = DOWN_HEIGHT_ON_SLOT;
 8003f8a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003f8e:	f103 030e 	add.w	r3, r3, #14
 8003f92:	7819      	ldrb	r1, [r3, #0]
 8003f94:	4b16      	ldr	r3, [pc, #88]	; (8003ff0 <StartDefaultTask+0x1940>)
 8003f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f9a:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8003f9e:	f44f 74c4 	mov.w	r4, #392	; 0x188
 8003fa2:	fb04 f101 	mul.w	r1, r4, r1
 8003fa6:	4401      	add	r1, r0
 8003fa8:	3158      	adds	r1, #88	; 0x58
 8003faa:	e9c1 2300 	strd	r2, r3, [r1]
						  state_time = PUT_DOWN_TIME_ON_SLOT;
 8003fae:	4b11      	ldr	r3, [pc, #68]	; (8003ff4 <StartDefaultTask+0x1944>)
 8003fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb4:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8003fb8:	e9c1 2300 	strd	r2, r3, [r1]
					  }
					  break;
 8003fbc:	e038      	b.n	8004030 <StartDefaultTask+0x1980>
					  case SCARA_RELEASE:{
						  state_time = DETACH_TIME;
 8003fbe:	4b0e      	ldr	r3, [pc, #56]	; (8003ff8 <StartDefaultTask+0x1948>)
 8003fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc4:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8003fc8:	e9c1 2300 	strd	r2, r3, [r1]
						  scaraSetOutput(0);
 8003fcc:	2000      	movs	r0, #0
 8003fce:	f006 f9df 	bl	800a390 <scaraSetOutput>
					  }
					  break;
 8003fd2:	e02d      	b.n	8004030 <StartDefaultTask+0x1980>
 8003fd4:	20000028 	.word	0x20000028
 8003fd8:	20000010 	.word	0x20000010
 8003fdc:	20000058 	.word	0x20000058
 8003fe0:	20000040 	.word	0x20000040
 8003fe4:	20000048 	.word	0x20000048
 8003fe8:	20000030 	.word	0x20000030
 8003fec:	20000018 	.word	0x20000018
 8003ff0:	20000050 	.word	0x20000050
 8003ff4:	20000008 	.word	0x20000008
 8003ff8:	20000038 	.word	0x20000038
					  case SCARA_MOVE_UP_ON_SLOT:{
						  state_time = PICK_UP_TIME_ON_SLOT;
 8003ffc:	4bd6      	ldr	r3, [pc, #856]	; (8004358 <StartDefaultTask+0x1ca8>)
 8003ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004002:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8004006:	e9c1 2300 	strd	r2, r3, [r1]
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 800400a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800400e:	f103 030e 	add.w	r3, r3, #14
 8004012:	7819      	ldrb	r1, [r3, #0]
 8004014:	4bd1      	ldr	r3, [pc, #836]	; (800435c <StartDefaultTask+0x1cac>)
 8004016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800401a:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 800401e:	f44f 74c4 	mov.w	r4, #392	; 0x188
 8004022:	fb04 f101 	mul.w	r1, r4, r1
 8004026:	4401      	add	r1, r0
 8004028:	3158      	adds	r1, #88	; 0x58
 800402a:	e9c1 2300 	strd	r2, r3, [r1]
					  }
					  break;
 800402e:	bf00      	nop
				  }
				  memcpy(&duty_cmd.target_point, &Object[object_tail_pointer].object_position, sizeof(SCARA_PositionTypeDef));
 8004030:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8004034:	f103 030e 	add.w	r3, r3, #14
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800403e:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8004042:	fb01 f303 	mul.w	r3, r1, r3
 8004046:	18d1      	adds	r1, r2, r3
 8004048:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 800404c:	3328      	adds	r3, #40	; 0x28
 800404e:	22c0      	movs	r2, #192	; 0xc0
 8004050:	4618      	mov	r0, r3
 8004052:	f011 fe4d 	bl	8015cf0 <memcpy>
				  duty_cmd.time_total = state_time;
 8004056:	f607 51f8 	addw	r1, r7, #3576	; 0xdf8
 800405a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800405e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004062:	e9c1 2308 	strd	r2, r3, [r1, #32]
				  SCARA_StatusTypeDef status1;
				  duty_cmd.v_factor = 0;
 8004066:	f607 51f8 	addw	r1, r7, #3576	; 0xdf8
 800406a:	f04f 0200 	mov.w	r2, #0
 800406e:	f04f 0300 	mov.w	r3, #0
 8004072:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
				  if(operation_state == SCARA_ATTACH || operation_state == SCARA_RELEASE){
 8004076:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800407a:	f103 030f 	add.w	r3, r3, #15
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	2b02      	cmp	r3, #2
 8004082:	d006      	beq.n	8004092 <StartDefaultTask+0x19e2>
 8004084:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8004088:	f103 030f 	add.w	r3, r3, #15
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	2b06      	cmp	r3, #6
 8004090:	d103      	bne.n	800409a <StartDefaultTask+0x19ea>
					  status1 = SCARA_STATUS_OK;
 8004092:	2300      	movs	r3, #0
 8004094:	f887 3ffb 	strb.w	r3, [r7, #4091]	; 0xffb
 8004098:	e03d      	b.n	8004116 <StartDefaultTask+0x1a66>
				  }else{
					  if(operation_state == SCARA_MOVE_DOWN_ON_OBJECT || operation_state == SCARA_MOVE_DOWN_ON_SLOT || operation_state == SCARA_MOVE_UP_ON_OBJECT || operation_state == SCARA_MOVE_UP_ON_SLOT){
 800409a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800409e:	f103 030f 	add.w	r3, r3, #15
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d014      	beq.n	80040d2 <StartDefaultTask+0x1a22>
 80040a8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80040ac:	f103 030f 	add.w	r3, r3, #15
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	2b05      	cmp	r3, #5
 80040b4:	d00d      	beq.n	80040d2 <StartDefaultTask+0x1a22>
 80040b6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80040ba:	f103 030f 	add.w	r3, r3, #15
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	2b03      	cmp	r3, #3
 80040c2:	d006      	beq.n	80040d2 <StartDefaultTask+0x1a22>
 80040c4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80040c8:	f103 030f 	add.w	r3, r3, #15
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	2b07      	cmp	r3, #7
 80040d0:	d108      	bne.n	80040e4 <StartDefaultTask+0x1a34>
						  duty_cmd.trajec_type = DUTY_TRAJECTORY_LINEAR;
 80040d2:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 80040d6:	2202      	movs	r2, #2
 80040d8:	741a      	strb	r2, [r3, #16]
						  duty_cmd.modeInit_type = DUTY_MODE_INIT_QT;
 80040da:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 80040de:	2203      	movs	r2, #3
 80040e0:	745a      	strb	r2, [r3, #17]
 80040e2:	e007      	b.n	80040f4 <StartDefaultTask+0x1a44>
					  }else{
						  duty_cmd.trajec_type = DUTY_TRAJECTORY_SCURVE;
 80040e4:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 80040e8:	2201      	movs	r2, #1
 80040ea:	741a      	strb	r2, [r3, #16]
						  duty_cmd.modeInit_type = DUTY_MODE_INIT_QVT;
 80040ec:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 80040f0:	2201      	movs	r2, #1
 80040f2:	745a      	strb	r2, [r3, #17]
					  }
					  status1 = scaraInitDuty(duty_cmd);
 80040f4:	f607 54f8 	addw	r4, r7, #3576	; 0xdf8
 80040f8:	4668      	mov	r0, sp
 80040fa:	f104 0310 	add.w	r3, r4, #16
 80040fe:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8004102:	4619      	mov	r1, r3
 8004104:	f011 fdf4 	bl	8015cf0 <memcpy>
 8004108:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800410c:	f002 faf8 	bl	8006700 <scaraInitDuty>
 8004110:	4603      	mov	r3, r0
 8004112:	f887 3ffb 	strb.w	r3, [r7, #4091]	; 0xffb
				  }
				  if ( SCARA_STATUS_OK == status1) {
 8004116:	f897 3ffb 	ldrb.w	r3, [r7, #4091]	; 0xffb
 800411a:	2b00      	cmp	r3, #0
 800411c:	d110      	bne.n	8004140 <StartDefaultTask+0x1a90>
				  	current_duty_state = SCARA_DUTY_STATE_FLOW;
 800411e:	2302      	movs	r3, #2
 8004120:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8004124:	f102 0205 	add.w	r2, r2, #5
 8004128:	7013      	strb	r3, [r2, #0]
				  	run_time = 0;
 800412a:	f04f 0200 	mov.w	r2, #0
 800412e:	f04f 0300 	mov.w	r3, #0
 8004132:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8004136:	f101 0110 	add.w	r1, r1, #16
 800413a:	e9c1 2300 	strd	r2, r3, [r1]
 800413e:	e043      	b.n	80041c8 <StartDefaultTask+0x1b18>
				  } else {
					object_tail_pointer = (object_tail_pointer+1)%8;
 8004140:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8004144:	f103 030e 	add.w	r3, r3, #14
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	3301      	adds	r3, #1
 800414c:	425a      	negs	r2, r3
 800414e:	f003 0307 	and.w	r3, r3, #7
 8004152:	f002 0207 	and.w	r2, r2, #7
 8004156:	bf58      	it	pl
 8004158:	4253      	negpl	r3, r2
 800415a:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800415e:	f102 020e 	add.w	r2, r2, #14
 8004162:	7013      	strb	r3, [r2, #0]
					operation_state = SCARA_MOVE_TO_TARGET;
 8004164:	2300      	movs	r3, #0
 8004166:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800416a:	f102 020f 	add.w	r2, r2, #15
 800416e:	7013      	strb	r3, [r2, #0]
					detail_array[0] = status1;
 8004170:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8004174:	f897 2ffb 	ldrb.w	r2, [r7, #4091]	; 0xffb
 8004178:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800417a:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 800417e:	6899      	ldr	r1, [r3, #8]
 8004180:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 8004184:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8004188:	f103 0308 	add.w	r3, r3, #8
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4413      	add	r3, r2
 8004190:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 8004194:	9300      	str	r3, [sp, #0]
 8004196:	2301      	movs	r3, #1
 8004198:	2007      	movs	r0, #7
 800419a:	f7fe f8db 	bl	8002354 <commandRespond1>
 800419e:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
					total_respond_length += respond_lenght;
 80041a2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80041a6:	f103 0308 	add.w	r3, r3, #8
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 80041b0:	4413      	add	r3, r2
 80041b2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80041b6:	f102 0208 	add.w	r2, r2, #8
 80041ba:	6013      	str	r3, [r2, #0]
					LOG_REPORT("INIT FAIL", __LINE__);
 80041bc:	f240 3179 	movw	r1, #889	; 0x379
 80041c0:	4867      	ldr	r0, [pc, #412]	; (8004360 <StartDefaultTask+0x1cb0>)
 80041c2:	f7fe f92f 	bl	8002424 <LOG_REPORT>
					break;
 80041c6:	e0d4      	b.n	8004372 <StartDefaultTask+0x1cc2>


		  case SCARA_DUTY_STATE_FLOW:{
			  SCARA_StatusTypeDef status;
			  // Increase run time
			  run_time += T_SAMPLING;
 80041c8:	a361      	add	r3, pc, #388	; (adr r3, 8004350 <StartDefaultTask+0x1ca0>)
 80041ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ce:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 80041d2:	f101 0110 	add.w	r1, r1, #16
 80041d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80041da:	f7fc f857 	bl	800028c <__adddf3>
 80041de:	4602      	mov	r2, r0
 80041e0:	460b      	mov	r3, r1
 80041e2:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 80041e6:	f101 0110 	add.w	r1, r1, #16
 80041ea:	e9c1 2300 	strd	r2, r3, [r1]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 80041ee:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80041f2:	f103 0310 	add.w	r3, r3, #16
 80041f6:	ed93 0b00 	vldr	d0, [r3]
 80041fa:	f006 f95b 	bl	800a4b4 <scaraIsFinish>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d037      	beq.n	8004274 <StartDefaultTask+0x1bc4>
				current_duty_state = SCARA_DUTY_STATE_OPERATION;
 8004204:	2304      	movs	r3, #4
 8004206:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800420a:	f102 0205 	add.w	r2, r2, #5
 800420e:	7013      	strb	r3, [r2, #0]
				if(operation_state == SCARA_MOVE_UP_ON_SLOT){
 8004210:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8004214:	f103 030f 	add.w	r3, r3, #15
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	2b07      	cmp	r3, #7
 800421c:	d118      	bne.n	8004250 <StartDefaultTask+0x1ba0>
					operation_state = SCARA_MOVE_TO_TARGET;
 800421e:	2300      	movs	r3, #0
 8004220:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8004224:	f102 020f 	add.w	r2, r2, #15
 8004228:	7013      	strb	r3, [r2, #0]
					object_tail_pointer = (object_tail_pointer+1)%8;
 800422a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800422e:	f103 030e 	add.w	r3, r3, #14
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	3301      	adds	r3, #1
 8004236:	425a      	negs	r2, r3
 8004238:	f003 0307 	and.w	r3, r3, #7
 800423c:	f002 0207 	and.w	r2, r2, #7
 8004240:	bf58      	it	pl
 8004242:	4253      	negpl	r3, r2
 8004244:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8004248:	f102 020e 	add.w	r2, r2, #14
 800424c:	7013      	strb	r3, [r2, #0]
 800424e:	e00a      	b.n	8004266 <StartDefaultTask+0x1bb6>
				}else{
					operation_state += 1; //next state
 8004250:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8004254:	f103 030f 	add.w	r3, r3, #15
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	3301      	adds	r3, #1
 800425c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8004260:	f102 020f 	add.w	r2, r2, #15
 8004264:	7013      	strb	r3, [r2, #0]
				}
				lowlayer_readTruePosition(&positionNext);
 8004266:	483f      	ldr	r0, [pc, #252]	; (8004364 <StartDefaultTask+0x1cb4>)
 8004268:	f001 fd22 	bl	8005cb0 <lowlayer_readTruePosition>
				kinematicForward(&positionNext);
 800426c:	483d      	ldr	r0, [pc, #244]	; (8004364 <StartDefaultTask+0x1cb4>)
 800426e:	f000 fdfb 	bl	8004e68 <kinematicForward>
					  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
					  total_respond_length += respond_lenght;
				  }
			  }
		  }
		  break;
 8004272:	e07d      	b.n	8004370 <StartDefaultTask+0x1cc0>
			  } else if(operation_state != SCARA_ATTACH && operation_state != SCARA_RELEASE){
 8004274:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8004278:	f103 030f 	add.w	r3, r3, #15
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	2b02      	cmp	r3, #2
 8004280:	d076      	beq.n	8004370 <StartDefaultTask+0x1cc0>
 8004282:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8004286:	f103 030f 	add.w	r3, r3, #15
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	2b06      	cmp	r3, #6
 800428e:	d06f      	beq.n	8004370 <StartDefaultTask+0x1cc0>
				status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 8004290:	4c35      	ldr	r4, [pc, #212]	; (8004368 <StartDefaultTask+0x1cb8>)
 8004292:	4668      	mov	r0, sp
 8004294:	f104 0308 	add.w	r3, r4, #8
 8004298:	22b8      	movs	r2, #184	; 0xb8
 800429a:	4619      	mov	r1, r3
 800429c:	f011 fd28 	bl	8015cf0 <memcpy>
 80042a0:	e894 000c 	ldmia.w	r4, {r2, r3}
 80042a4:	482f      	ldr	r0, [pc, #188]	; (8004364 <StartDefaultTask+0x1cb4>)
 80042a6:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 80042aa:	f101 0110 	add.w	r1, r1, #16
 80042ae:	ed91 0b00 	vldr	d0, [r1]
 80042b2:	f005 fa71 	bl	8009798 <scaraFlowDuty>
 80042b6:	4603      	mov	r3, r0
 80042b8:	f887 3fcf 	strb.w	r3, [r7, #4047]	; 0xfcf
				if ( SCARA_STATUS_OK == status) {
 80042bc:	f897 3fcf 	ldrb.w	r3, [r7, #4047]	; 0xfcf
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d113      	bne.n	80042ec <StartDefaultTask+0x1c3c>
					lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 80042c4:	4c28      	ldr	r4, [pc, #160]	; (8004368 <StartDefaultTask+0x1cb8>)
 80042c6:	4a27      	ldr	r2, [pc, #156]	; (8004364 <StartDefaultTask+0x1cb4>)
 80042c8:	ab2c      	add	r3, sp, #176	; 0xb0
 80042ca:	4611      	mov	r1, r2
 80042cc:	22c0      	movs	r2, #192	; 0xc0
 80042ce:	4618      	mov	r0, r3
 80042d0:	f011 fd0e 	bl	8015cf0 <memcpy>
 80042d4:	4668      	mov	r0, sp
 80042d6:	f104 0310 	add.w	r3, r4, #16
 80042da:	22b0      	movs	r2, #176	; 0xb0
 80042dc:	4619      	mov	r1, r3
 80042de:	f011 fd07 	bl	8015cf0 <memcpy>
 80042e2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80042e6:	f001 fe73 	bl	8005fd0 <lowlayer_computeAndWritePulse>
		  break;
 80042ea:	e041      	b.n	8004370 <StartDefaultTask+0x1cc0>
					  current_duty_state = SCARA_DUTY_STATE_FINISH;
 80042ec:	2303      	movs	r3, #3
 80042ee:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80042f2:	f102 0205 	add.w	r2, r2, #5
 80042f6:	7013      	strb	r3, [r2, #0]
					  detail_array[0] = status;
 80042f8:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 80042fc:	f897 2fcf 	ldrb.w	r2, [r7, #4047]	; 0xfcf
 8004300:	701a      	strb	r2, [r3, #0]
					  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8004302:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8004306:	6899      	ldr	r1, [r3, #8]
 8004308:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 800430c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8004310:	f103 0308 	add.w	r3, r3, #8
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4413      	add	r3, r2
 8004318:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 800431c:	9300      	str	r3, [sp, #0]
 800431e:	2301      	movs	r3, #1
 8004320:	2007      	movs	r0, #7
 8004322:	f7fe f817 	bl	8002354 <commandRespond1>
 8004326:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
					  total_respond_length += respond_lenght;
 800432a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800432e:	f103 0308 	add.w	r3, r3, #8
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 8004338:	4413      	add	r3, r2
 800433a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800433e:	f102 0208 	add.w	r2, r2, #8
 8004342:	6013      	str	r3, [r2, #0]
		  break;
 8004344:	e014      	b.n	8004370 <StartDefaultTask+0x1cc0>

		  case SCARA_DUTY_STATE_FINISH:

			  //error
			  //free(Object);
		  break;
 8004346:	bf00      	nop
 8004348:	e016      	b.n	8004378 <StartDefaultTask+0x1cc8>
 800434a:	bf00      	nop
 800434c:	f3af 8000 	nop.w
 8004350:	40000000 	.word	0x40000000
 8004354:	3f847ae1 	.word	0x3f847ae1
 8004358:	20000020 	.word	0x20000020
 800435c:	20000040 	.word	0x20000040
 8004360:	0801c0cc 	.word	0x0801c0cc
 8004364:	2000ec38 	.word	0x2000ec38
 8004368:	2000eab8 	.word	0x2000eab8
				  break;
 800436c:	bf00      	nop
 800436e:	e003      	b.n	8004378 <StartDefaultTask+0x1cc8>
		  break;
 8004370:	bf00      	nop
		  }
	  }
	  break;
 8004372:	e001      	b.n	8004378 <StartDefaultTask+0x1cc8>
	  break;
 8004374:	bf00      	nop
 8004376:	e000      	b.n	800437a <StartDefaultTask+0x1cca>
	  break;
 8004378:	bf00      	nop

	  }
	  }

	  /* 4--- Send to PC Phase ---*/
	if(total_respond_length > 0){
 800437a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800437e:	f103 0308 	add.w	r3, r3, #8
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	dd0b      	ble.n	80043a0 <StartDefaultTask+0x1cf0>
		CDC_Transmit_FS(respond, total_respond_length);
 8004388:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800438c:	f103 0308 	add.w	r3, r3, #8
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	b29a      	uxth	r2, r3
 8004394:	f607 53cc 	addw	r3, r7, #3532	; 0xdcc
 8004398:	4611      	mov	r1, r2
 800439a:	4618      	mov	r0, r3
 800439c:	f011 f82a 	bl	80153f4 <CDC_Transmit_FS>
	}

	  /* 5--- Update ---*/
	  scaraSetMethod(current_method);
 80043a0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80043a4:	f103 0307 	add.w	r3, r3, #7
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	4618      	mov	r0, r3
 80043ac:	f006 f822 	bl	800a3f4 <scaraSetMethod>
	  scaraSetMode(current_mode);
 80043b0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80043b4:	f103 0306 	add.w	r3, r3, #6
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f006 f80a 	bl	800a3d4 <scaraSetMode>
	  scaraSetDutyState(current_duty_state);
 80043c0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80043c4:	f103 0305 	add.w	r3, r3, #5
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f005 fff2 	bl	800a3b4 <scaraSetDutyState>

    osDelay(1);
 80043d0:	2001      	movs	r0, #1
 80043d2:	f00e f8ee 	bl	80125b2 <osDelay>
	  osSignalWait(0x01, osWaitForever); // Very Important
 80043d6:	f7fe b9e8 	b.w	80027aa <StartDefaultTask+0xfa>
 80043da:	bf00      	nop

080043dc <Start_USB_RX_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_USB_RX_Task */
void Start_USB_RX_Task(void const * argument)
{
 80043dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043de:	f2ad 5dd4 	subw	sp, sp, #1492	; 0x5d4
 80043e2:	af70      	add	r7, sp, #448	; 0x1c0
 80043e4:	1d3b      	adds	r3, r7, #4
 80043e6:	6018      	str	r0, [r3, #0]
	int32_t				respond_lenght;
	//int32_t				message_lenght;
	int32_t 			detail_length;

	// Default value
	duty_cmd.key_speed = 1;
 80043e8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80043ec:	2201      	movs	r2, #1
 80043ee:	605a      	str	r2, [r3, #4]

  /* Infinite loop */
  for(;;)
  {
	  for(;;) {
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, RECEIVE_END);
 80043f0:	4964      	ldr	r1, [pc, #400]	; (8004584 <Start_USB_RX_Task+0x1a8>)
 80043f2:	4865      	ldr	r0, [pc, #404]	; (8004588 <Start_USB_RX_Task+0x1ac>)
 80043f4:	f001 f9c5 	bl	8005782 <ringBuff_DistanceOf>
 80043f8:	f8c7 0408 	str.w	r0, [r7, #1032]	; 0x408
		  if (distance != -1) {
 80043fc:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8004400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004404:	d0f4      	beq.n	80043f0 <Start_USB_RX_Task+0x14>
 8004406:	466b      	mov	r3, sp
 8004408:	461e      	mov	r6, r3
			  uint8_t temp[distance+1];
 800440a:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 800440e:	1c5c      	adds	r4, r3, #1
 8004410:	1e63      	subs	r3, r4, #1
 8004412:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 8004416:	4623      	mov	r3, r4
 8004418:	4618      	mov	r0, r3
 800441a:	f04f 0100 	mov.w	r1, #0
 800441e:	f04f 0200 	mov.w	r2, #0
 8004422:	f04f 0300 	mov.w	r3, #0
 8004426:	00cb      	lsls	r3, r1, #3
 8004428:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800442c:	00c2      	lsls	r2, r0, #3
 800442e:	4623      	mov	r3, r4
 8004430:	4618      	mov	r0, r3
 8004432:	f04f 0100 	mov.w	r1, #0
 8004436:	f04f 0200 	mov.w	r2, #0
 800443a:	f04f 0300 	mov.w	r3, #0
 800443e:	00cb      	lsls	r3, r1, #3
 8004440:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004444:	00c2      	lsls	r2, r0, #3
 8004446:	4623      	mov	r3, r4
 8004448:	3307      	adds	r3, #7
 800444a:	08db      	lsrs	r3, r3, #3
 800444c:	00db      	lsls	r3, r3, #3
 800444e:	ebad 0d03 	sub.w	sp, sp, r3
 8004452:	ab70      	add	r3, sp, #448	; 0x1c0
 8004454:	3300      	adds	r3, #0
 8004456:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
			  int32_t ret;
			  ringBuff_PopArray(&usb_rx_ringbuff, temp, distance + 1);
 800445a:	f8d7 1400 	ldr.w	r1, [r7, #1024]	; 0x400
 800445e:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8004462:	3301      	adds	r3, #1
 8004464:	461a      	mov	r2, r3
 8004466:	4848      	ldr	r0, [pc, #288]	; (8004588 <Start_USB_RX_Task+0x1ac>)
 8004468:	f001 f96a 	bl	8005740 <ringBuff_PopArray>
			  ret = unPackPayload(temp, distance + 1, data_packet);
 800446c:	f8d7 0400 	ldr.w	r0, [r7, #1024]	; 0x400
 8004470:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8004474:	3301      	adds	r3, #1
 8004476:	f107 020c 	add.w	r2, r7, #12
 800447a:	4619      	mov	r1, r3
 800447c:	f7fe f818 	bl	80024b0 <unPackPayload>
 8004480:	f8c7 03fc 	str.w	r0, [r7, #1020]	; 0x3fc

			  if( -1 == ret) {
 8004484:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8004488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800448c:	d077      	beq.n	800457e <Start_USB_RX_Task+0x1a2>
				  //LOG_REPORT("UNPACK FAIL", __LINE__);
			  } else {
				  //LOG_REPORT((char*) temp, __LINE__);
				  cmd_type = packetRead(data_packet, ret, &id_command, &duty_cmd);
 800448e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8004492:	f507 727b 	add.w	r2, r7, #1004	; 0x3ec
 8004496:	f107 000c 	add.w	r0, r7, #12
 800449a:	f8d7 13fc 	ldr.w	r1, [r7, #1020]	; 0x3fc
 800449e:	f7fc fda7 	bl	8000ff0 <packetRead>
 80044a2:	4603      	mov	r3, r0
 80044a4:	f887 33fb 	strb.w	r3, [r7, #1019]	; 0x3fb
				  memset(detail, 0, sizeof(detail));
 80044a8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80044ac:	2287      	movs	r2, #135	; 0x87
 80044ae:	2100      	movs	r1, #0
 80044b0:	4618      	mov	r0, r3
 80044b2:	f011 fc45 	bl	8015d40 <memset>
				  detail_length = 0;
 80044b6:	f107 0308 	add.w	r3, r7, #8
 80044ba:	2200      	movs	r2, #0
 80044bc:	601a      	str	r2, [r3, #0]
				  rpd_type = commandReply(cmd_type, duty_cmd, detail, &detail_length);
 80044be:	f507 740a 	add.w	r4, r7, #552	; 0x228
 80044c2:	f897 53fb 	ldrb.w	r5, [r7, #1019]	; 0x3fb
 80044c6:	f107 0308 	add.w	r3, r7, #8
 80044ca:	936f      	str	r3, [sp, #444]	; 0x1bc
 80044cc:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80044d0:	936e      	str	r3, [sp, #440]	; 0x1b8
 80044d2:	4668      	mov	r0, sp
 80044d4:	f104 0308 	add.w	r3, r4, #8
 80044d8:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80044dc:	4619      	mov	r1, r3
 80044de:	f011 fc07 	bl	8015cf0 <memcpy>
 80044e2:	e894 000c 	ldmia.w	r4, {r2, r3}
 80044e6:	4628      	mov	r0, r5
 80044e8:	f7fd fda8 	bl	800203c <commandReply>
 80044ec:	4603      	mov	r3, r0
 80044ee:	f887 33fa 	strb.w	r3, [r7, #1018]	; 0x3fa
				  //LOG_REPORT("tail", usb_rx_ringbuff.tail);
				  if ( RPD_DUTY == rpd_type) {
 80044f2:	f897 33fa 	ldrb.w	r3, [r7, #1018]	; 0x3fa
 80044f6:	2b09      	cmp	r3, #9
 80044f8:	d123      	bne.n	8004542 <Start_USB_RX_Task+0x166>
					  DUTY_Command_TypeDef *dataMail;
					  dataMail = NULL;
 80044fa:	2300      	movs	r3, #0
 80044fc:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
					  // Wait allocate
					  while (dataMail == NULL) {
 8004500:	e008      	b.n	8004514 <Start_USB_RX_Task+0x138>
						  dataMail = osMailAlloc(commandMailHandle, osWaitForever);
 8004502:	4b22      	ldr	r3, [pc, #136]	; (800458c <Start_USB_RX_Task+0x1b0>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f04f 31ff 	mov.w	r1, #4294967295
 800450a:	4618      	mov	r0, r3
 800450c:	f00e fa62 	bl	80129d4 <osMailAlloc>
 8004510:	f8c7 040c 	str.w	r0, [r7, #1036]	; 0x40c
					  while (dataMail == NULL) {
 8004514:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8004518:	2b00      	cmp	r3, #0
 800451a:	d0f2      	beq.n	8004502 <Start_USB_RX_Task+0x126>
					  }
					  memcpy( dataMail, &duty_cmd, sizeof(DUTY_Command_TypeDef));
 800451c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8004520:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8004524:	4619      	mov	r1, r3
 8004526:	f8d7 040c 	ldr.w	r0, [r7, #1036]	; 0x40c
 800452a:	f011 fbe1 	bl	8015cf0 <memcpy>
					  osStatus result;
					  result = osMailPut(commandMailHandle, dataMail);
 800452e:	4b17      	ldr	r3, [pc, #92]	; (800458c <Start_USB_RX_Task+0x1b0>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f8d7 140c 	ldr.w	r1, [r7, #1036]	; 0x40c
 8004536:	4618      	mov	r0, r3
 8004538:	f00e fa62 	bl	8012a00 <osMailPut>
 800453c:	f8c7 03f0 	str.w	r0, [r7, #1008]	; 0x3f0
 8004540:	e01d      	b.n	800457e <Start_USB_RX_Task+0x1a2>
						  //LOG_REPORT("DUTY SEND", __LINE__);
					  }

				//   }else if( RPD_POSITION == rpd_type) { 
				// 	  CDC_Transmit_FS(detail, 84);
				  }else if(rpd_type == RPD_TRANSFER){
 8004542:	f897 33fa 	ldrb.w	r3, [r7, #1018]	; 0x3fa
 8004546:	2b0a      	cmp	r3, #10
 8004548:	d019      	beq.n	800457e <Start_USB_RX_Task+0x1a2>

				  }else {
					  respond_lenght	= commandRespond1(rpd_type, cmd_type,
 800454a:	f897 13fb 	ldrb.w	r1, [r7, #1019]	; 0x3fb
 800454e:	f107 0308 	add.w	r3, r7, #8
 8004552:	681c      	ldr	r4, [r3, #0]
 8004554:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8004558:	f897 03fa 	ldrb.w	r0, [r7, #1018]	; 0x3fa
 800455c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8004560:	9300      	str	r3, [sp, #0]
 8004562:	4623      	mov	r3, r4
 8004564:	f7fd fef6 	bl	8002354 <commandRespond1>
 8004568:	f8c7 03f4 	str.w	r0, [r7, #1012]	; 0x3f4
							  	  	  	  (char *)detail, detail_length,
										  (char *)respond);
					  CDC_Transmit_FS(respond, respond_lenght);
 800456c:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8004570:	b29a      	uxth	r2, r3
 8004572:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8004576:	4611      	mov	r1, r2
 8004578:	4618      	mov	r0, r3
 800457a:	f010 ff3b 	bl	80153f4 <CDC_Transmit_FS>
 800457e:	46b5      	mov	sp, r6
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, RECEIVE_END);
 8004580:	e736      	b.n	80043f0 <Start_USB_RX_Task+0x14>
 8004582:	bf00      	nop
 8004584:	0801c188 	.word	0x0801c188
 8004588:	20000064 	.word	0x20000064
 800458c:	2000de34 	.word	0x2000de34

08004590 <FSMC_Write>:
/* Includes ------------------------------------------------------------------*/
#include "fsmc.h"

/* USER CODE BEGIN 0 */
void FSMC_Write(uint32_t ui_address, uint32_t ui_data)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
	*(volatile uint16_t *)ui_address = ui_data;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	683a      	ldr	r2, [r7, #0]
 800459e:	b292      	uxth	r2, r2
 80045a0:	801a      	strh	r2, [r3, #0]
}
 80045a2:	bf00      	nop
 80045a4:	370c      	adds	r7, #12
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr

080045ae <FSMC_Read>:

uint16_t FSMC_Read(uint32_t ui_address) {
 80045ae:	b480      	push	{r7}
 80045b0:	b083      	sub	sp, #12
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
	return *(volatile uint16_t *)ui_address;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	881b      	ldrh	r3, [r3, #0]
 80045ba:	b29b      	uxth	r3, r3
}
 80045bc:	4618      	mov	r0, r3
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <MX_FSMC_Init>:

NOR_HandleTypeDef hnor1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b088      	sub	sp, #32
 80045cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80045ce:	1d3b      	adds	r3, r7, #4
 80045d0:	2200      	movs	r2, #0
 80045d2:	601a      	str	r2, [r3, #0]
 80045d4:	605a      	str	r2, [r3, #4]
 80045d6:	609a      	str	r2, [r3, #8]
 80045d8:	60da      	str	r2, [r3, #12]
 80045da:	611a      	str	r2, [r3, #16]
 80045dc:	615a      	str	r2, [r3, #20]
 80045de:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the NOR1 memory initialization sequence
  */
  hnor1.Instance = FSMC_NORSRAM_DEVICE;
 80045e0:	4b27      	ldr	r3, [pc, #156]	; (8004680 <MX_FSMC_Init+0xb8>)
 80045e2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80045e6:	601a      	str	r2, [r3, #0]
  hnor1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80045e8:	4b25      	ldr	r3, [pc, #148]	; (8004680 <MX_FSMC_Init+0xb8>)
 80045ea:	4a26      	ldr	r2, [pc, #152]	; (8004684 <MX_FSMC_Init+0xbc>)
 80045ec:	605a      	str	r2, [r3, #4]
  /* hnor1.Init */
  hnor1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80045ee:	4b24      	ldr	r3, [pc, #144]	; (8004680 <MX_FSMC_Init+0xb8>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	609a      	str	r2, [r3, #8]
  hnor1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_ENABLE;
 80045f4:	4b22      	ldr	r3, [pc, #136]	; (8004680 <MX_FSMC_Init+0xb8>)
 80045f6:	2202      	movs	r2, #2
 80045f8:	60da      	str	r2, [r3, #12]
  hnor1.Init.MemoryType = FSMC_MEMORY_TYPE_NOR;
 80045fa:	4b21      	ldr	r3, [pc, #132]	; (8004680 <MX_FSMC_Init+0xb8>)
 80045fc:	2208      	movs	r2, #8
 80045fe:	611a      	str	r2, [r3, #16]
  hnor1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8004600:	4b1f      	ldr	r3, [pc, #124]	; (8004680 <MX_FSMC_Init+0xb8>)
 8004602:	2210      	movs	r2, #16
 8004604:	615a      	str	r2, [r3, #20]
  hnor1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8004606:	4b1e      	ldr	r3, [pc, #120]	; (8004680 <MX_FSMC_Init+0xb8>)
 8004608:	2200      	movs	r2, #0
 800460a:	619a      	str	r2, [r3, #24]
  hnor1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800460c:	4b1c      	ldr	r3, [pc, #112]	; (8004680 <MX_FSMC_Init+0xb8>)
 800460e:	2200      	movs	r2, #0
 8004610:	61da      	str	r2, [r3, #28]
  hnor1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8004612:	4b1b      	ldr	r3, [pc, #108]	; (8004680 <MX_FSMC_Init+0xb8>)
 8004614:	2200      	movs	r2, #0
 8004616:	621a      	str	r2, [r3, #32]
  hnor1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8004618:	4b19      	ldr	r3, [pc, #100]	; (8004680 <MX_FSMC_Init+0xb8>)
 800461a:	2200      	movs	r2, #0
 800461c:	625a      	str	r2, [r3, #36]	; 0x24
  hnor1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800461e:	4b18      	ldr	r3, [pc, #96]	; (8004680 <MX_FSMC_Init+0xb8>)
 8004620:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004624:	629a      	str	r2, [r3, #40]	; 0x28
  hnor1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8004626:	4b16      	ldr	r3, [pc, #88]	; (8004680 <MX_FSMC_Init+0xb8>)
 8004628:	2200      	movs	r2, #0
 800462a:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 800462c:	4b14      	ldr	r3, [pc, #80]	; (8004680 <MX_FSMC_Init+0xb8>)
 800462e:	2200      	movs	r2, #0
 8004630:	631a      	str	r2, [r3, #48]	; 0x30
  hnor1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8004632:	4b13      	ldr	r3, [pc, #76]	; (8004680 <MX_FSMC_Init+0xb8>)
 8004634:	2200      	movs	r2, #0
 8004636:	635a      	str	r2, [r3, #52]	; 0x34
  hnor1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8004638:	4b11      	ldr	r3, [pc, #68]	; (8004680 <MX_FSMC_Init+0xb8>)
 800463a:	2200      	movs	r2, #0
 800463c:	639a      	str	r2, [r3, #56]	; 0x38
  hnor1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800463e:	4b10      	ldr	r3, [pc, #64]	; (8004680 <MX_FSMC_Init+0xb8>)
 8004640:	2200      	movs	r2, #0
 8004642:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8004644:	230f      	movs	r3, #15
 8004646:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8004648:	230f      	movs	r3, #15
 800464a:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 800464c:	23ff      	movs	r3, #255	; 0xff
 800464e:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8004650:	230f      	movs	r3, #15
 8004652:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8004654:	2310      	movs	r3, #16
 8004656:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8004658:	2311      	movs	r3, #17
 800465a:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800465c:	2300      	movs	r3, #0
 800465e:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_NOR_Init(&hnor1, &Timing, NULL) != HAL_OK)
 8004660:	1d3b      	adds	r3, r7, #4
 8004662:	2200      	movs	r2, #0
 8004664:	4619      	mov	r1, r3
 8004666:	4806      	ldr	r0, [pc, #24]	; (8004680 <MX_FSMC_Init+0xb8>)
 8004668:	f007 fd40 	bl	800c0ec <HAL_NOR_Init>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8004672:	f000 ffab 	bl	80055cc <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8004676:	bf00      	nop
 8004678:	3720      	adds	r7, #32
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	2000de40 	.word	0x2000de40
 8004684:	a0000104 	.word	0xa0000104

08004688 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8004688:	b580      	push	{r7, lr}
 800468a:	b086      	sub	sp, #24
 800468c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800468e:	1d3b      	adds	r3, r7, #4
 8004690:	2200      	movs	r2, #0
 8004692:	601a      	str	r2, [r3, #0]
 8004694:	605a      	str	r2, [r3, #4]
 8004696:	609a      	str	r2, [r3, #8]
 8004698:	60da      	str	r2, [r3, #12]
 800469a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800469c:	4b24      	ldr	r3, [pc, #144]	; (8004730 <HAL_FSMC_MspInit+0xa8>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d140      	bne.n	8004726 <HAL_FSMC_MspInit+0x9e>
    return;
  }
  FSMC_Initialized = 1;
 80046a4:	4b22      	ldr	r3, [pc, #136]	; (8004730 <HAL_FSMC_MspInit+0xa8>)
 80046a6:	2201      	movs	r2, #1
 80046a8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80046aa:	2300      	movs	r3, #0
 80046ac:	603b      	str	r3, [r7, #0]
 80046ae:	4b21      	ldr	r3, [pc, #132]	; (8004734 <HAL_FSMC_MspInit+0xac>)
 80046b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b2:	4a20      	ldr	r2, [pc, #128]	; (8004734 <HAL_FSMC_MspInit+0xac>)
 80046b4:	f043 0301 	orr.w	r3, r3, #1
 80046b8:	6393      	str	r3, [r2, #56]	; 0x38
 80046ba:	4b1e      	ldr	r3, [pc, #120]	; (8004734 <HAL_FSMC_MspInit+0xac>)
 80046bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046be:	f003 0301 	and.w	r3, r3, #1
 80046c2:	603b      	str	r3, [r7, #0]
 80046c4:	683b      	ldr	r3, [r7, #0]
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  PB7   ------> FSMC_NL
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80046c6:	f64f 7380 	movw	r3, #65408	; 0xff80
 80046ca:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046cc:	2302      	movs	r3, #2
 80046ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046d0:	2300      	movs	r3, #0
 80046d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046d4:	2303      	movs	r3, #3
 80046d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80046d8:	230c      	movs	r3, #12
 80046da:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80046dc:	1d3b      	adds	r3, r7, #4
 80046de:	4619      	mov	r1, r3
 80046e0:	4815      	ldr	r0, [pc, #84]	; (8004738 <HAL_FSMC_MspInit+0xb0>)
 80046e2:	f007 fb4d 	bl	800bd80 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80046e6:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80046ea:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046ec:	2302      	movs	r3, #2
 80046ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046f0:	2300      	movs	r3, #0
 80046f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046f4:	2303      	movs	r3, #3
 80046f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80046f8:	230c      	movs	r3, #12
 80046fa:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80046fc:	1d3b      	adds	r3, r7, #4
 80046fe:	4619      	mov	r1, r3
 8004700:	480e      	ldr	r0, [pc, #56]	; (800473c <HAL_FSMC_MspInit+0xb4>)
 8004702:	f007 fb3d 	bl	800bd80 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004706:	2380      	movs	r3, #128	; 0x80
 8004708:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800470a:	2302      	movs	r3, #2
 800470c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800470e:	2300      	movs	r3, #0
 8004710:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004712:	2303      	movs	r3, #3
 8004714:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004716:	230c      	movs	r3, #12
 8004718:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800471a:	1d3b      	adds	r3, r7, #4
 800471c:	4619      	mov	r1, r3
 800471e:	4808      	ldr	r0, [pc, #32]	; (8004740 <HAL_FSMC_MspInit+0xb8>)
 8004720:	f007 fb2e 	bl	800bd80 <HAL_GPIO_Init>
 8004724:	e000      	b.n	8004728 <HAL_FSMC_MspInit+0xa0>
    return;
 8004726:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8004728:	3718      	adds	r7, #24
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	2000285c 	.word	0x2000285c
 8004734:	40023800 	.word	0x40023800
 8004738:	40021000 	.word	0x40021000
 800473c:	40020c00 	.word	0x40020c00
 8004740:	40020400 	.word	0x40020400

08004744 <HAL_NOR_MspInit>:

void HAL_NOR_MspInit(NOR_HandleTypeDef* norHandle){
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NOR_MspInit 0 */

  /* USER CODE END NOR_MspInit 0 */
  HAL_FSMC_MspInit();
 800474c:	f7ff ff9c 	bl	8004688 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NOR_MspInit 1 */

  /* USER CODE END NOR_MspInit 1 */
}
 8004750:	bf00      	nop
 8004752:	3708      	adds	r7, #8
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <update_gcode_point>:
extern int16_t 							pre_clutch_index;
extern Gcode_Packet_Command_TypeDef 	pre_height;
extern Gcode_Packet_Command_TypeDef 	Gcode_Mode;

void update_gcode_point(DUTY_Command_TypeDef *duty_cmd, SCARA_Gcode_Cor_TypeDef gcode_point, int32_t run_point)
{
 8004758:	b084      	sub	sp, #16
 800475a:	b580      	push	{r7, lr}
 800475c:	b082      	sub	sp, #8
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
 8004762:	f107 0014 	add.w	r0, r7, #20
 8004766:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	duty_cmd->target_point.x = (double)gcode_point.X * COR_INVERSE_SCALE + offset_x;
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	4618      	mov	r0, r3
 800476e:	f7fb fed9 	bl	8000524 <__aeabi_i2d>
 8004772:	a3a3      	add	r3, pc, #652	; (adr r3, 8004a00 <update_gcode_point+0x2a8>)
 8004774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004778:	f7fb ff3e 	bl	80005f8 <__aeabi_dmul>
 800477c:	4602      	mov	r2, r0
 800477e:	460b      	mov	r3, r1
 8004780:	4610      	mov	r0, r2
 8004782:	4619      	mov	r1, r3
 8004784:	4ba0      	ldr	r3, [pc, #640]	; (8004a08 <update_gcode_point+0x2b0>)
 8004786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478a:	f7fb fd7f 	bl	800028c <__adddf3>
 800478e:	4602      	mov	r2, r0
 8004790:	460b      	mov	r3, r1
 8004792:	6879      	ldr	r1, [r7, #4]
 8004794:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	duty_cmd->target_point.y = (double)gcode_point.Y * COR_INVERSE_SCALE + offset_y;
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	4618      	mov	r0, r3
 800479c:	f7fb fec2 	bl	8000524 <__aeabi_i2d>
 80047a0:	a397      	add	r3, pc, #604	; (adr r3, 8004a00 <update_gcode_point+0x2a8>)
 80047a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a6:	f7fb ff27 	bl	80005f8 <__aeabi_dmul>
 80047aa:	4602      	mov	r2, r0
 80047ac:	460b      	mov	r3, r1
 80047ae:	4610      	mov	r0, r2
 80047b0:	4619      	mov	r1, r3
 80047b2:	4b96      	ldr	r3, [pc, #600]	; (8004a0c <update_gcode_point+0x2b4>)
 80047b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b8:	f7fb fd68 	bl	800028c <__adddf3>
 80047bc:	4602      	mov	r2, r0
 80047be:	460b      	mov	r3, r1
 80047c0:	6879      	ldr	r1, [r7, #4]
 80047c2:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	if(gcode_point.configure.type_define[1] == UP_Z){
 80047c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80047ca:	2b05      	cmp	r3, #5
 80047cc:	d10d      	bne.n	80047ea <update_gcode_point+0x92>
	  duty_cmd->target_point.z = up_z_height + offset_z;
 80047ce:	4b90      	ldr	r3, [pc, #576]	; (8004a10 <update_gcode_point+0x2b8>)
 80047d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80047d4:	4b8f      	ldr	r3, [pc, #572]	; (8004a14 <update_gcode_point+0x2bc>)
 80047d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047da:	f7fb fd57 	bl	800028c <__adddf3>
 80047de:	4602      	mov	r2, r0
 80047e0:	460b      	mov	r3, r1
 80047e2:	6879      	ldr	r1, [r7, #4]
 80047e4:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
 80047e8:	e00c      	b.n	8004804 <update_gcode_point+0xac>
	}else{
	  duty_cmd->target_point.z = down_z_height + offset_z;
 80047ea:	4b8b      	ldr	r3, [pc, #556]	; (8004a18 <update_gcode_point+0x2c0>)
 80047ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80047f0:	4b88      	ldr	r3, [pc, #544]	; (8004a14 <update_gcode_point+0x2bc>)
 80047f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f6:	f7fb fd49 	bl	800028c <__adddf3>
 80047fa:	4602      	mov	r2, r0
 80047fc:	460b      	mov	r3, r1
 80047fe:	6879      	ldr	r1, [r7, #4]
 8004800:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
	}
	duty_cmd->target_point.roll = roll_angle;
 8004804:	4b85      	ldr	r3, [pc, #532]	; (8004a1c <update_gcode_point+0x2c4>)
 8004806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800480a:	6879      	ldr	r1, [r7, #4]
 800480c:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	duty_cmd->space_type = DUTY_SPACE_TASK;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	735a      	strb	r2, [r3, #13]
	duty_cmd->coordinate_type = DUTY_COORDINATES_ABS;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	731a      	strb	r2, [r3, #12]
	if(gcode_point.configure.type_define[0] == LINEAR_TYPE){
 800481c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004820:	2b01      	cmp	r3, #1
 8004822:	d103      	bne.n	800482c <update_gcode_point+0xd4>
	  duty_cmd->path_type = DUTY_PATH_LINE;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	739a      	strb	r2, [r3, #14]
 800482a:	e04d      	b.n	80048c8 <update_gcode_point+0x170>
	}else if(gcode_point.configure.type_define[0] == ARC_AW_TYPE){
 800482c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004830:	2b03      	cmp	r3, #3
 8004832:	d122      	bne.n	800487a <update_gcode_point+0x122>
	  duty_cmd->sub_point.x = (double)gcode_point.I * COR_INVERSE_SCALE;
 8004834:	6a3b      	ldr	r3, [r7, #32]
 8004836:	4618      	mov	r0, r3
 8004838:	f7fb fe74 	bl	8000524 <__aeabi_i2d>
 800483c:	a370      	add	r3, pc, #448	; (adr r3, 8004a00 <update_gcode_point+0x2a8>)
 800483e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004842:	f7fb fed9 	bl	80005f8 <__aeabi_dmul>
 8004846:	4602      	mov	r2, r0
 8004848:	460b      	mov	r3, r1
 800484a:	6879      	ldr	r1, [r7, #4]
 800484c:	e9c1 234c 	strd	r2, r3, [r1, #304]	; 0x130
	  duty_cmd->sub_point.y = (double)gcode_point.J * COR_INVERSE_SCALE;
 8004850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004852:	4618      	mov	r0, r3
 8004854:	f7fb fe66 	bl	8000524 <__aeabi_i2d>
 8004858:	a369      	add	r3, pc, #420	; (adr r3, 8004a00 <update_gcode_point+0x2a8>)
 800485a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800485e:	f7fb fecb 	bl	80005f8 <__aeabi_dmul>
 8004862:	4602      	mov	r2, r0
 8004864:	460b      	mov	r3, r1
 8004866:	6879      	ldr	r1, [r7, #4]
 8004868:	e9c1 234e 	strd	r2, r3, [r1, #312]	; 0x138
	  duty_cmd->path_type = DUTY_PATH_CIRCLE;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	739a      	strb	r2, [r3, #14]
	  duty_cmd->arc_dir = 1;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2201      	movs	r2, #1
 8004876:	615a      	str	r2, [r3, #20]
 8004878:	e026      	b.n	80048c8 <update_gcode_point+0x170>
	}else if(gcode_point.configure.type_define[0] == ARC_CW_TYPE){
 800487a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800487e:	2b02      	cmp	r3, #2
 8004880:	d122      	bne.n	80048c8 <update_gcode_point+0x170>
	  duty_cmd->sub_point.x = (double)gcode_point.I * COR_INVERSE_SCALE;
 8004882:	6a3b      	ldr	r3, [r7, #32]
 8004884:	4618      	mov	r0, r3
 8004886:	f7fb fe4d 	bl	8000524 <__aeabi_i2d>
 800488a:	a35d      	add	r3, pc, #372	; (adr r3, 8004a00 <update_gcode_point+0x2a8>)
 800488c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004890:	f7fb feb2 	bl	80005f8 <__aeabi_dmul>
 8004894:	4602      	mov	r2, r0
 8004896:	460b      	mov	r3, r1
 8004898:	6879      	ldr	r1, [r7, #4]
 800489a:	e9c1 234c 	strd	r2, r3, [r1, #304]	; 0x130
	  duty_cmd->sub_point.y = (double)gcode_point.J * COR_INVERSE_SCALE;
 800489e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7fb fe3f 	bl	8000524 <__aeabi_i2d>
 80048a6:	a356      	add	r3, pc, #344	; (adr r3, 8004a00 <update_gcode_point+0x2a8>)
 80048a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ac:	f7fb fea4 	bl	80005f8 <__aeabi_dmul>
 80048b0:	4602      	mov	r2, r0
 80048b2:	460b      	mov	r3, r1
 80048b4:	6879      	ldr	r1, [r7, #4]
 80048b6:	e9c1 234e 	strd	r2, r3, [r1, #312]	; 0x138
	  duty_cmd->path_type = DUTY_PATH_CIRCLE;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2201      	movs	r2, #1
 80048be:	739a      	strb	r2, [r3, #14]
	  duty_cmd->arc_dir = -1;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f04f 32ff 	mov.w	r2, #4294967295
 80048c6:	615a      	str	r2, [r3, #20]
	}

	if(Gcode_Mode == GCODE_LINEAR){
 80048c8:	4b55      	ldr	r3, [pc, #340]	; (8004a20 <update_gcode_point+0x2c8>)
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	2b07      	cmp	r3, #7
 80048ce:	d12e      	bne.n	800492e <update_gcode_point+0x1d6>
		duty_cmd->v_factor = (double)gcode_point.F * COR_INVERSE_SCALE / V_MOVE_MAX;
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7fb fe26 	bl	8000524 <__aeabi_i2d>
 80048d8:	a349      	add	r3, pc, #292	; (adr r3, 8004a00 <update_gcode_point+0x2a8>)
 80048da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048de:	f7fb fe8b 	bl	80005f8 <__aeabi_dmul>
 80048e2:	4602      	mov	r2, r0
 80048e4:	460b      	mov	r3, r1
 80048e6:	4610      	mov	r0, r2
 80048e8:	4619      	mov	r1, r3
 80048ea:	f04f 0200 	mov.w	r2, #0
 80048ee:	4b4d      	ldr	r3, [pc, #308]	; (8004a24 <update_gcode_point+0x2cc>)
 80048f0:	f7fb ffac 	bl	800084c <__aeabi_ddiv>
 80048f4:	4602      	mov	r2, r0
 80048f6:	460b      	mov	r3, r1
 80048f8:	6879      	ldr	r1, [r7, #4]
 80048fa:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
		if(run_point == 1){
 80048fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004900:	2b01      	cmp	r3, #1
 8004902:	d10d      	bne.n	8004920 <update_gcode_point+0x1c8>
			duty_cmd->trajec_type = DUTY_TRAJECTORY_LSPB;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	741a      	strb	r2, [r3, #16]
			duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2201      	movs	r2, #1
 800490e:	745a      	strb	r2, [r3, #17]
			duty_cmd->time_total = 0;
 8004910:	6879      	ldr	r1, [r7, #4]
 8004912:	f04f 0200 	mov.w	r2, #0
 8004916:	f04f 0300 	mov.w	r3, #0
 800491a:	e9c1 2308 	strd	r2, r3, [r1, #32]
			duty_cmd->v_factor = (double)gcode_clutch_configure[gcode_point.configure.clutch_index].Depth_Feed*COR_INVERSE_SCALE/V_MOVE_MAX;
			pre_height = gcode_point.configure.type_define[1];
		}
	}

}
 800491e:	e067      	b.n	80049f0 <update_gcode_point+0x298>
			duty_cmd->trajec_type = DUTY_TRAJECTORY_LINEAR;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2202      	movs	r2, #2
 8004924:	741a      	strb	r2, [r3, #16]
			duty_cmd->modeInit_type = DUTY_MODE_INIT_QV;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2202      	movs	r2, #2
 800492a:	745a      	strb	r2, [r3, #17]
}
 800492c:	e060      	b.n	80049f0 <update_gcode_point+0x298>
	}else if(Gcode_Mode == GCODE_SMOOTH_LSPB){
 800492e:	4b3c      	ldr	r3, [pc, #240]	; (8004a20 <update_gcode_point+0x2c8>)
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	2b08      	cmp	r3, #8
 8004934:	d15c      	bne.n	80049f0 <update_gcode_point+0x298>
		if(gcode_point.configure.type_define[1] == pre_height){
 8004936:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800493a:	4b3b      	ldr	r3, [pc, #236]	; (8004a28 <update_gcode_point+0x2d0>)
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	429a      	cmp	r2, r3
 8004940:	d12c      	bne.n	800499c <update_gcode_point+0x244>
			if(gcode_point.configure.clutch_index != pre_clutch_index){
 8004942:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004944:	461a      	mov	r2, r3
 8004946:	4b39      	ldr	r3, [pc, #228]	; (8004a2c <update_gcode_point+0x2d4>)
 8004948:	f9b3 3000 	ldrsh.w	r3, [r3]
 800494c:	429a      	cmp	r2, r3
 800494e:	d00f      	beq.n	8004970 <update_gcode_point+0x218>
				LSPB_calculation(gcode_clutch_configure[gcode_point.configure.clutch_index]);
 8004950:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004952:	4619      	mov	r1, r3
 8004954:	4a36      	ldr	r2, [pc, #216]	; (8004a30 <update_gcode_point+0x2d8>)
 8004956:	460b      	mov	r3, r1
 8004958:	005b      	lsls	r3, r3, #1
 800495a:	440b      	add	r3, r1
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	4413      	add	r3, r2
 8004960:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004964:	f000 f868 	bl	8004a38 <LSPB_calculation>
				pre_clutch_index = gcode_point.configure.clutch_index;
 8004968:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800496a:	b21a      	sxth	r2, r3
 800496c:	4b2f      	ldr	r3, [pc, #188]	; (8004a2c <update_gcode_point+0x2d4>)
 800496e:	801a      	strh	r2, [r3, #0]
			duty_cmd->trajec_type = DUTY_TRAJECTORY_GCODE_LSPB;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2203      	movs	r2, #3
 8004974:	741a      	strb	r2, [r3, #16]
			duty_cmd->time_total = (double)(gcode_point.T*COR_INVERSE_SCALE);
 8004976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004978:	ee07 3a90 	vmov	s15, r3
 800497c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004980:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8004a34 <update_gcode_point+0x2dc>
 8004984:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004988:	ee17 0a90 	vmov	r0, s15
 800498c:	f7fb fddc 	bl	8000548 <__aeabi_f2d>
 8004990:	4602      	mov	r2, r0
 8004992:	460b      	mov	r3, r1
 8004994:	6879      	ldr	r1, [r7, #4]
 8004996:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 800499a:	e029      	b.n	80049f0 <update_gcode_point+0x298>
			duty_cmd->trajec_type = DUTY_TRAJECTORY_LINEAR;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2202      	movs	r2, #2
 80049a0:	741a      	strb	r2, [r3, #16]
			duty_cmd->modeInit_type = DUTY_MODE_INIT_QV;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2202      	movs	r2, #2
 80049a6:	745a      	strb	r2, [r3, #17]
			duty_cmd->v_factor = (double)gcode_clutch_configure[gcode_point.configure.clutch_index].Depth_Feed*COR_INVERSE_SCALE/V_MOVE_MAX;
 80049a8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80049aa:	4619      	mov	r1, r3
 80049ac:	4a20      	ldr	r2, [pc, #128]	; (8004a30 <update_gcode_point+0x2d8>)
 80049ae:	460b      	mov	r3, r1
 80049b0:	005b      	lsls	r3, r3, #1
 80049b2:	440b      	add	r3, r1
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	4413      	add	r3, r2
 80049b8:	3308      	adds	r3, #8
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4618      	mov	r0, r3
 80049be:	f7fb fdb1 	bl	8000524 <__aeabi_i2d>
 80049c2:	a30f      	add	r3, pc, #60	; (adr r3, 8004a00 <update_gcode_point+0x2a8>)
 80049c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c8:	f7fb fe16 	bl	80005f8 <__aeabi_dmul>
 80049cc:	4602      	mov	r2, r0
 80049ce:	460b      	mov	r3, r1
 80049d0:	4610      	mov	r0, r2
 80049d2:	4619      	mov	r1, r3
 80049d4:	f04f 0200 	mov.w	r2, #0
 80049d8:	4b12      	ldr	r3, [pc, #72]	; (8004a24 <update_gcode_point+0x2cc>)
 80049da:	f7fb ff37 	bl	800084c <__aeabi_ddiv>
 80049de:	4602      	mov	r2, r0
 80049e0:	460b      	mov	r3, r1
 80049e2:	6879      	ldr	r1, [r7, #4]
 80049e4:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			pre_height = gcode_point.configure.type_define[1];
 80049e8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80049ec:	4b0e      	ldr	r3, [pc, #56]	; (8004a28 <update_gcode_point+0x2d0>)
 80049ee:	701a      	strb	r2, [r3, #0]
}
 80049f0:	bf00      	nop
 80049f2:	3708      	adds	r7, #8
 80049f4:	46bd      	mov	sp, r7
 80049f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80049fa:	b004      	add	sp, #16
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	a0000000 	.word	0xa0000000
 8004a04:	3eb0c6f7 	.word	0x3eb0c6f7
 8004a08:	20006f88 	.word	0x20006f88
 8004a0c:	2000dd20 	.word	0x2000dd20
 8004a10:	200065c0 	.word	0x200065c0
 8004a14:	2000dd10 	.word	0x2000dd10
 8004a18:	20006f38 	.word	0x20006f38
 8004a1c:	20006f80 	.word	0x20006f80
 8004a20:	200065c8 	.word	0x200065c8
 8004a24:	40877000 	.word	0x40877000
 8004a28:	20006f68 	.word	0x20006f68
 8004a2c:	2000dd0a 	.word	0x2000dd0a
 8004a30:	200065d8 	.word	0x200065d8
 8004a34:	358637bd 	.word	0x358637bd

08004a38 <LSPB_calculation>:
void LSPB_calculation(SCARA_LSPB_Clutch_TypeDef configure)
{
 8004a38:	b5b0      	push	{r4, r5, r7, lr}
 8004a3a:	b08a      	sub	sp, #40	; 0x28
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	1d3b      	adds	r3, r7, #4
 8004a40:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	double accel = 0;
 8004a44:	f04f 0200 	mov.w	r2, #0
 8004a48:	f04f 0300 	mov.w	r3, #0
 8004a4c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double total_s = (double)configure.total_s*COR_INVERSE_SCALE;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4618      	mov	r0, r3
 8004a54:	f7fb fd66 	bl	8000524 <__aeabi_i2d>
 8004a58:	a388      	add	r3, pc, #544	; (adr r3, 8004c7c <LSPB_calculation+0x244>)
 8004a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a5e:	f7fb fdcb 	bl	80005f8 <__aeabi_dmul>
 8004a62:	4602      	mov	r2, r0
 8004a64:	460b      	mov	r3, r1
 8004a66:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double veloc   = (double)configure.veloc*COR_INVERSE_SCALE;
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f7fb fd59 	bl	8000524 <__aeabi_i2d>
 8004a72:	a382      	add	r3, pc, #520	; (adr r3, 8004c7c <LSPB_calculation+0x244>)
 8004a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a78:	f7fb fdbe 	bl	80005f8 <__aeabi_dmul>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	460b      	mov	r3, r1
 8004a80:	e9c7 2304 	strd	r2, r3, [r7, #16]
	time_move = 1.2*total_s/veloc;
 8004a84:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8004a88:	4b71      	ldr	r3, [pc, #452]	; (8004c50 <LSPB_calculation+0x218>)
 8004a8a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004a8e:	f7fb fdb3 	bl	80005f8 <__aeabi_dmul>
 8004a92:	4602      	mov	r2, r0
 8004a94:	460b      	mov	r3, r1
 8004a96:	4610      	mov	r0, r2
 8004a98:	4619      	mov	r1, r3
 8004a9a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004a9e:	f7fb fed5 	bl	800084c <__aeabi_ddiv>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	496b      	ldr	r1, [pc, #428]	; (8004c54 <LSPB_calculation+0x21c>)
 8004aa8:	e9c1 2300 	strd	r2, r3, [r1]
	time_acc = time_move - total_s/veloc;
 8004aac:	4b69      	ldr	r3, [pc, #420]	; (8004c54 <LSPB_calculation+0x21c>)
 8004aae:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004ab2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004ab6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004aba:	f7fb fec7 	bl	800084c <__aeabi_ddiv>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	4620      	mov	r0, r4
 8004ac4:	4629      	mov	r1, r5
 8004ac6:	f7fb fbdf 	bl	8000288 <__aeabi_dsub>
 8004aca:	4602      	mov	r2, r0
 8004acc:	460b      	mov	r3, r1
 8004ace:	4962      	ldr	r1, [pc, #392]	; (8004c58 <LSPB_calculation+0x220>)
 8004ad0:	e9c1 2300 	strd	r2, r3, [r1]
	time_dec = time_move - time_acc;
 8004ad4:	4b5f      	ldr	r3, [pc, #380]	; (8004c54 <LSPB_calculation+0x21c>)
 8004ad6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004ada:	4b5f      	ldr	r3, [pc, #380]	; (8004c58 <LSPB_calculation+0x220>)
 8004adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae0:	f7fb fbd2 	bl	8000288 <__aeabi_dsub>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	495c      	ldr	r1, [pc, #368]	; (8004c5c <LSPB_calculation+0x224>)
 8004aea:	e9c1 2300 	strd	r2, r3, [r1]
	accel = veloc / time_acc;
 8004aee:	4b5a      	ldr	r3, [pc, #360]	; (8004c58 <LSPB_calculation+0x220>)
 8004af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004af8:	f7fb fea8 	bl	800084c <__aeabi_ddiv>
 8004afc:	4602      	mov	r2, r0
 8004afe:	460b      	mov	r3, r1
 8004b00:	e9c7 2308 	strd	r2, r3, [r7, #32]
	acc0 = 0.5*accel;
 8004b04:	f04f 0200 	mov.w	r2, #0
 8004b08:	4b55      	ldr	r3, [pc, #340]	; (8004c60 <LSPB_calculation+0x228>)
 8004b0a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004b0e:	f7fb fd73 	bl	80005f8 <__aeabi_dmul>
 8004b12:	4602      	mov	r2, r0
 8004b14:	460b      	mov	r3, r1
 8004b16:	4953      	ldr	r1, [pc, #332]	; (8004c64 <LSPB_calculation+0x22c>)
 8004b18:	e9c1 2300 	strd	r2, r3, [r1]
	constant[0] = veloc;
 8004b1c:	4952      	ldr	r1, [pc, #328]	; (8004c68 <LSPB_calculation+0x230>)
 8004b1e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004b22:	e9c1 2300 	strd	r2, r3, [r1]
	constant[1] = -0.5*time_acc*veloc;
 8004b26:	4b4c      	ldr	r3, [pc, #304]	; (8004c58 <LSPB_calculation+0x220>)
 8004b28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b2c:	f04f 0200 	mov.w	r2, #0
 8004b30:	4b4e      	ldr	r3, [pc, #312]	; (8004c6c <LSPB_calculation+0x234>)
 8004b32:	f7fb fd61 	bl	80005f8 <__aeabi_dmul>
 8004b36:	4602      	mov	r2, r0
 8004b38:	460b      	mov	r3, r1
 8004b3a:	4610      	mov	r0, r2
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004b42:	f7fb fd59 	bl	80005f8 <__aeabi_dmul>
 8004b46:	4602      	mov	r2, r0
 8004b48:	460b      	mov	r3, r1
 8004b4a:	4947      	ldr	r1, [pc, #284]	; (8004c68 <LSPB_calculation+0x230>)
 8004b4c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    deacc[0] 	= -0.5*accel;
 8004b50:	f04f 0200 	mov.w	r2, #0
 8004b54:	4b45      	ldr	r3, [pc, #276]	; (8004c6c <LSPB_calculation+0x234>)
 8004b56:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004b5a:	f7fb fd4d 	bl	80005f8 <__aeabi_dmul>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	460b      	mov	r3, r1
 8004b62:	4943      	ldr	r1, [pc, #268]	; (8004c70 <LSPB_calculation+0x238>)
 8004b64:	e9c1 2300 	strd	r2, r3, [r1]
    deacc[1]	= veloc + accel*time_dec;
 8004b68:	4b3c      	ldr	r3, [pc, #240]	; (8004c5c <LSPB_calculation+0x224>)
 8004b6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b72:	f7fb fd41 	bl	80005f8 <__aeabi_dmul>
 8004b76:	4602      	mov	r2, r0
 8004b78:	460b      	mov	r3, r1
 8004b7a:	4610      	mov	r0, r2
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004b82:	f7fb fb83 	bl	800028c <__adddf3>
 8004b86:	4602      	mov	r2, r0
 8004b88:	460b      	mov	r3, r1
 8004b8a:	4939      	ldr	r1, [pc, #228]	; (8004c70 <LSPB_calculation+0x238>)
 8004b8c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    deacc[2]    = total_s - time_move*(2*veloc + 2*accel*time_dec - accel*time_move)/2;
 8004b90:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004b94:	4602      	mov	r2, r0
 8004b96:	460b      	mov	r3, r1
 8004b98:	f7fb fb78 	bl	800028c <__adddf3>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	460b      	mov	r3, r1
 8004ba0:	4614      	mov	r4, r2
 8004ba2:	461d      	mov	r5, r3
 8004ba4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004ba8:	4602      	mov	r2, r0
 8004baa:	460b      	mov	r3, r1
 8004bac:	f7fb fb6e 	bl	800028c <__adddf3>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	460b      	mov	r3, r1
 8004bb4:	4610      	mov	r0, r2
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	4b28      	ldr	r3, [pc, #160]	; (8004c5c <LSPB_calculation+0x224>)
 8004bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bbe:	f7fb fd1b 	bl	80005f8 <__aeabi_dmul>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	4620      	mov	r0, r4
 8004bc8:	4629      	mov	r1, r5
 8004bca:	f7fb fb5f 	bl	800028c <__adddf3>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	4614      	mov	r4, r2
 8004bd4:	461d      	mov	r5, r3
 8004bd6:	4b1f      	ldr	r3, [pc, #124]	; (8004c54 <LSPB_calculation+0x21c>)
 8004bd8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004bdc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004be0:	f7fb fd0a 	bl	80005f8 <__aeabi_dmul>
 8004be4:	4602      	mov	r2, r0
 8004be6:	460b      	mov	r3, r1
 8004be8:	4620      	mov	r0, r4
 8004bea:	4629      	mov	r1, r5
 8004bec:	f7fb fb4c 	bl	8000288 <__aeabi_dsub>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	4610      	mov	r0, r2
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	4b16      	ldr	r3, [pc, #88]	; (8004c54 <LSPB_calculation+0x21c>)
 8004bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bfe:	f7fb fcfb 	bl	80005f8 <__aeabi_dmul>
 8004c02:	4602      	mov	r2, r0
 8004c04:	460b      	mov	r3, r1
 8004c06:	4610      	mov	r0, r2
 8004c08:	4619      	mov	r1, r3
 8004c0a:	f04f 0200 	mov.w	r2, #0
 8004c0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004c12:	f7fb fe1b 	bl	800084c <__aeabi_ddiv>
 8004c16:	4602      	mov	r2, r0
 8004c18:	460b      	mov	r3, r1
 8004c1a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004c1e:	f7fb fb33 	bl	8000288 <__aeabi_dsub>
 8004c22:	4602      	mov	r2, r0
 8004c24:	460b      	mov	r3, r1
 8004c26:	4912      	ldr	r1, [pc, #72]	; (8004c70 <LSPB_calculation+0x238>)
 8004c28:	e9c1 2304 	strd	r2, r3, [r1, #16]
    accumulate_s = 0;
 8004c2c:	4911      	ldr	r1, [pc, #68]	; (8004c74 <LSPB_calculation+0x23c>)
 8004c2e:	f04f 0200 	mov.w	r2, #0
 8004c32:	f04f 0300 	mov.w	r3, #0
 8004c36:	e9c1 2300 	strd	r2, r3, [r1]
    last_T = 0;
 8004c3a:	490f      	ldr	r1, [pc, #60]	; (8004c78 <LSPB_calculation+0x240>)
 8004c3c:	f04f 0200 	mov.w	r2, #0
 8004c40:	f04f 0300 	mov.w	r3, #0
 8004c44:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004c48:	bf00      	nop
 8004c4a:	3728      	adds	r7, #40	; 0x28
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bdb0      	pop	{r4, r5, r7, pc}
 8004c50:	3ff33333 	.word	0x3ff33333
 8004c54:	20006f98 	.word	0x20006f98
 8004c58:	20006f40 	.word	0x20006f40
 8004c5c:	20006f60 	.word	0x20006f60
 8004c60:	3fe00000 	.word	0x3fe00000
 8004c64:	2000dd00 	.word	0x2000dd00
 8004c68:	20006f70 	.word	0x20006f70
 8004c6c:	bfe00000 	.word	0xbfe00000
 8004c70:	20006f48 	.word	0x20006f48
 8004c74:	200065d0 	.word	0x200065d0
 8004c78:	2000dd18 	.word	0x2000dd18
 8004c7c:	a0000000 	.word	0xa0000000
 8004c80:	3eb0c6f7 	.word	0x3eb0c6f7
 8004c84:	00000000 	.word	0x00000000

08004c88 <accumulate_update>:
void accumulate_update(SCARA_Gcode_Cor_TypeDef gcode_point){
 8004c88:	b084      	sub	sp, #16
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	f107 0c08 	add.w	ip, r7, #8
 8004c92:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	scaraFlowGCODE(&accumulate_s, (double)gcode_point.T*COR_INVERSE_SCALE);
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7fb fc43 	bl	8000524 <__aeabi_i2d>
 8004c9e:	a312      	add	r3, pc, #72	; (adr r3, 8004ce8 <accumulate_update+0x60>)
 8004ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca4:	f7fb fca8 	bl	80005f8 <__aeabi_dmul>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	460b      	mov	r3, r1
 8004cac:	ec43 2b17 	vmov	d7, r2, r3
 8004cb0:	eeb0 0a47 	vmov.f32	s0, s14
 8004cb4:	eef0 0a67 	vmov.f32	s1, s15
 8004cb8:	480d      	ldr	r0, [pc, #52]	; (8004cf0 <accumulate_update+0x68>)
 8004cba:	f003 fed5 	bl	8008a68 <scaraFlowGCODE>
	last_T = (double)gcode_point.T*COR_INVERSE_SCALE;
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f7fb fc2f 	bl	8000524 <__aeabi_i2d>
 8004cc6:	a308      	add	r3, pc, #32	; (adr r3, 8004ce8 <accumulate_update+0x60>)
 8004cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ccc:	f7fb fc94 	bl	80005f8 <__aeabi_dmul>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	460b      	mov	r3, r1
 8004cd4:	4907      	ldr	r1, [pc, #28]	; (8004cf4 <accumulate_update+0x6c>)
 8004cd6:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004cda:	bf00      	nop
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ce2:	b004      	add	sp, #16
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	a0000000 	.word	0xa0000000
 8004cec:	3eb0c6f7 	.word	0x3eb0c6f7
 8004cf0:	200065d0 	.word	0x200065d0
 8004cf4:	2000dd18 	.word	0x2000dd18

08004cf8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b08a      	sub	sp, #40	; 0x28
 8004cfc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cfe:	f107 0314 	add.w	r3, r7, #20
 8004d02:	2200      	movs	r2, #0
 8004d04:	601a      	str	r2, [r3, #0]
 8004d06:	605a      	str	r2, [r3, #4]
 8004d08:	609a      	str	r2, [r3, #8]
 8004d0a:	60da      	str	r2, [r3, #12]
 8004d0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004d0e:	2300      	movs	r3, #0
 8004d10:	613b      	str	r3, [r7, #16]
 8004d12:	4b51      	ldr	r3, [pc, #324]	; (8004e58 <MX_GPIO_Init+0x160>)
 8004d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d16:	4a50      	ldr	r2, [pc, #320]	; (8004e58 <MX_GPIO_Init+0x160>)
 8004d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8004d1e:	4b4e      	ldr	r3, [pc, #312]	; (8004e58 <MX_GPIO_Init+0x160>)
 8004d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d26:	613b      	str	r3, [r7, #16]
 8004d28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	60fb      	str	r3, [r7, #12]
 8004d2e:	4b4a      	ldr	r3, [pc, #296]	; (8004e58 <MX_GPIO_Init+0x160>)
 8004d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d32:	4a49      	ldr	r2, [pc, #292]	; (8004e58 <MX_GPIO_Init+0x160>)
 8004d34:	f043 0301 	orr.w	r3, r3, #1
 8004d38:	6313      	str	r3, [r2, #48]	; 0x30
 8004d3a:	4b47      	ldr	r3, [pc, #284]	; (8004e58 <MX_GPIO_Init+0x160>)
 8004d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3e:	f003 0301 	and.w	r3, r3, #1
 8004d42:	60fb      	str	r3, [r7, #12]
 8004d44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004d46:	2300      	movs	r3, #0
 8004d48:	60bb      	str	r3, [r7, #8]
 8004d4a:	4b43      	ldr	r3, [pc, #268]	; (8004e58 <MX_GPIO_Init+0x160>)
 8004d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4e:	4a42      	ldr	r2, [pc, #264]	; (8004e58 <MX_GPIO_Init+0x160>)
 8004d50:	f043 0310 	orr.w	r3, r3, #16
 8004d54:	6313      	str	r3, [r2, #48]	; 0x30
 8004d56:	4b40      	ldr	r3, [pc, #256]	; (8004e58 <MX_GPIO_Init+0x160>)
 8004d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d5a:	f003 0310 	and.w	r3, r3, #16
 8004d5e:	60bb      	str	r3, [r7, #8]
 8004d60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d62:	2300      	movs	r3, #0
 8004d64:	607b      	str	r3, [r7, #4]
 8004d66:	4b3c      	ldr	r3, [pc, #240]	; (8004e58 <MX_GPIO_Init+0x160>)
 8004d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d6a:	4a3b      	ldr	r2, [pc, #236]	; (8004e58 <MX_GPIO_Init+0x160>)
 8004d6c:	f043 0302 	orr.w	r3, r3, #2
 8004d70:	6313      	str	r3, [r2, #48]	; 0x30
 8004d72:	4b39      	ldr	r3, [pc, #228]	; (8004e58 <MX_GPIO_Init+0x160>)
 8004d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d76:	f003 0302 	and.w	r3, r3, #2
 8004d7a:	607b      	str	r3, [r7, #4]
 8004d7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004d7e:	2300      	movs	r3, #0
 8004d80:	603b      	str	r3, [r7, #0]
 8004d82:	4b35      	ldr	r3, [pc, #212]	; (8004e58 <MX_GPIO_Init+0x160>)
 8004d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d86:	4a34      	ldr	r2, [pc, #208]	; (8004e58 <MX_GPIO_Init+0x160>)
 8004d88:	f043 0308 	orr.w	r3, r3, #8
 8004d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8004d8e:	4b32      	ldr	r3, [pc, #200]	; (8004e58 <MX_GPIO_Init+0x160>)
 8004d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d92:	f003 0308 	and.w	r3, r3, #8
 8004d96:	603b      	str	r3, [r7, #0]
 8004d98:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUTPUT_1_Pin|OUTPUT_2_Pin|USB_SIGN_Pin, GPIO_PIN_RESET);
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f44f 6141 	mov.w	r1, #3088	; 0xc10
 8004da0:	482e      	ldr	r0, [pc, #184]	; (8004e5c <MX_GPIO_Init+0x164>)
 8004da2:	f007 f989 	bl	800c0b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ENCODER_RESET_Pin|PULSE_WRITE_Pin|CAPTURE_ENABLE_Pin|STOP_Pin, GPIO_PIN_RESET);
 8004da6:	2200      	movs	r2, #0
 8004da8:	f641 0148 	movw	r1, #6216	; 0x1848
 8004dac:	482c      	ldr	r0, [pc, #176]	; (8004e60 <MX_GPIO_Init+0x168>)
 8004dae:	f007 f983 	bl	800c0b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEP_SLEEP_Pin|STEP_RESET_Pin|STEP_ENABLE_Pin, GPIO_PIN_RESET);
 8004db2:	2200      	movs	r2, #0
 8004db4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004db8:	482a      	ldr	r0, [pc, #168]	; (8004e64 <MX_GPIO_Init+0x16c>)
 8004dba:	f007 f97d 	bl	800c0b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OUTPUT_1_Pin|OUTPUT_2_Pin|USB_SIGN_Pin;
 8004dbe:	f44f 6341 	mov.w	r3, #3088	; 0xc10
 8004dc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dd0:	f107 0314 	add.w	r3, r7, #20
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	4821      	ldr	r0, [pc, #132]	; (8004e5c <MX_GPIO_Init+0x164>)
 8004dd8:	f006 ffd2 	bl	800bd80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = ENCODER_RESET_Pin|CAPTURE_ENABLE_Pin|STOP_Pin;
 8004ddc:	f640 0348 	movw	r3, #2120	; 0x848
 8004de0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004de2:	2301      	movs	r3, #1
 8004de4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004de6:	2300      	movs	r3, #0
 8004de8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dea:	2300      	movs	r3, #0
 8004dec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004dee:	f107 0314 	add.w	r3, r7, #20
 8004df2:	4619      	mov	r1, r3
 8004df4:	481a      	ldr	r0, [pc, #104]	; (8004e60 <MX_GPIO_Init+0x168>)
 8004df6:	f006 ffc3 	bl	800bd80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PULSE_WRITE_Pin;
 8004dfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004dfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e00:	2301      	movs	r3, #1
 8004e02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e04:	2300      	movs	r3, #0
 8004e06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PULSE_WRITE_GPIO_Port, &GPIO_InitStruct);
 8004e0c:	f107 0314 	add.w	r3, r7, #20
 8004e10:	4619      	mov	r1, r3
 8004e12:	4813      	ldr	r0, [pc, #76]	; (8004e60 <MX_GPIO_Init+0x168>)
 8004e14:	f006 ffb4 	bl	800bd80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = CPLD_LIMIT_Pin|CPLD_BUSY_Pin;
 8004e18:	f242 0304 	movw	r3, #8196	; 0x2004
 8004e1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e22:	2301      	movs	r3, #1
 8004e24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004e26:	f107 0314 	add.w	r3, r7, #20
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	480c      	ldr	r0, [pc, #48]	; (8004e60 <MX_GPIO_Init+0x168>)
 8004e2e:	f006 ffa7 	bl	800bd80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = STEP_SLEEP_Pin|STEP_RESET_Pin|STEP_ENABLE_Pin;
 8004e32:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004e36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e40:	2300      	movs	r3, #0
 8004e42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e44:	f107 0314 	add.w	r3, r7, #20
 8004e48:	4619      	mov	r1, r3
 8004e4a:	4806      	ldr	r0, [pc, #24]	; (8004e64 <MX_GPIO_Init+0x16c>)
 8004e4c:	f006 ff98 	bl	800bd80 <HAL_GPIO_Init>

}
 8004e50:	bf00      	nop
 8004e52:	3728      	adds	r7, #40	; 0x28
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	40023800 	.word	0x40023800
 8004e5c:	40020400 	.word	0x40020400
 8004e60:	40020c00 	.word	0x40020c00
 8004e64:	40020000 	.word	0x40020000

08004e68 <kinematicForward>:
#include "kinematic.h"
#include "common_def.h"
#include "math.h"
#include "system_params.h"

uint8_t		kinematicForward(SCARA_PositionTypeDef *pnt) {
 8004e68:	b5b0      	push	{r4, r5, r7, lr}
 8004e6a:	b08a      	sub	sp, #40	; 0x28
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
	double x, y, z, roll;

	x =   a1*cos(pnt->Theta1)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8004e76:	eeb0 0a47 	vmov.f32	s0, s14
 8004e7a:	eef0 0a67 	vmov.f32	s1, s15
 8004e7e:	f015 fc17 	bl	801a6b0 <cos>
 8004e82:	ec51 0b10 	vmov	r0, r1, d0
 8004e86:	a382      	add	r3, pc, #520	; (adr r3, 8005090 <kinematicForward+0x228>)
 8004e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e8c:	f7fb fbb4 	bl	80005f8 <__aeabi_dmul>
 8004e90:	4602      	mov	r2, r0
 8004e92:	460b      	mov	r3, r1
 8004e94:	4614      	mov	r4, r2
 8004e96:	461d      	mov	r5, r3
		+ a2*cos(pnt->Theta1 + pnt->Theta2)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8004ea4:	f7fb f9f2 	bl	800028c <__adddf3>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	460b      	mov	r3, r1
 8004eac:	ec43 2b17 	vmov	d7, r2, r3
 8004eb0:	eeb0 0a47 	vmov.f32	s0, s14
 8004eb4:	eef0 0a67 	vmov.f32	s1, s15
 8004eb8:	f015 fbfa 	bl	801a6b0 <cos>
 8004ebc:	ec51 0b10 	vmov	r0, r1, d0
 8004ec0:	f04f 0200 	mov.w	r2, #0
 8004ec4:	4b78      	ldr	r3, [pc, #480]	; (80050a8 <kinematicForward+0x240>)
 8004ec6:	f7fb fb97 	bl	80005f8 <__aeabi_dmul>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	460b      	mov	r3, r1
 8004ece:	4620      	mov	r0, r4
 8004ed0:	4629      	mov	r1, r5
 8004ed2:	f7fb f9db 	bl	800028c <__adddf3>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	460b      	mov	r3, r1
 8004eda:	4614      	mov	r4, r2
 8004edc:	461d      	mov	r5, r3
		+ a4*cos(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8004eea:	f7fb f9cf 	bl	800028c <__adddf3>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	4610      	mov	r0, r2
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8004efc:	f7fb f9c4 	bl	8000288 <__aeabi_dsub>
 8004f00:	4602      	mov	r2, r0
 8004f02:	460b      	mov	r3, r1
 8004f04:	ec43 2b17 	vmov	d7, r2, r3
 8004f08:	eeb0 0a47 	vmov.f32	s0, s14
 8004f0c:	eef0 0a67 	vmov.f32	s1, s15
 8004f10:	f015 fbce 	bl	801a6b0 <cos>
 8004f14:	ec51 0b10 	vmov	r0, r1, d0
 8004f18:	a35b      	add	r3, pc, #364	; (adr r3, 8005088 <kinematicForward+0x220>)
 8004f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f1e:	f7fb fb6b 	bl	80005f8 <__aeabi_dmul>
 8004f22:	4602      	mov	r2, r0
 8004f24:	460b      	mov	r3, r1
	x =   a1*cos(pnt->Theta1)
 8004f26:	4620      	mov	r0, r4
 8004f28:	4629      	mov	r1, r5
 8004f2a:	f7fb f9af 	bl	800028c <__adddf3>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	460b      	mov	r3, r1
 8004f32:	e9c7 2308 	strd	r2, r3, [r7, #32]
	y =   a1*sin(pnt->Theta1)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8004f3c:	eeb0 0a47 	vmov.f32	s0, s14
 8004f40:	eef0 0a67 	vmov.f32	s1, s15
 8004f44:	f015 fc4c 	bl	801a7e0 <sin>
 8004f48:	ec51 0b10 	vmov	r0, r1, d0
 8004f4c:	a350      	add	r3, pc, #320	; (adr r3, 8005090 <kinematicForward+0x228>)
 8004f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f52:	f7fb fb51 	bl	80005f8 <__aeabi_dmul>
 8004f56:	4602      	mov	r2, r0
 8004f58:	460b      	mov	r3, r1
 8004f5a:	4614      	mov	r4, r2
 8004f5c:	461d      	mov	r5, r3
		+ a2*sin(pnt->Theta1 + pnt->Theta2)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8004f6a:	f7fb f98f 	bl	800028c <__adddf3>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	460b      	mov	r3, r1
 8004f72:	ec43 2b17 	vmov	d7, r2, r3
 8004f76:	eeb0 0a47 	vmov.f32	s0, s14
 8004f7a:	eef0 0a67 	vmov.f32	s1, s15
 8004f7e:	f015 fc2f 	bl	801a7e0 <sin>
 8004f82:	ec51 0b10 	vmov	r0, r1, d0
 8004f86:	f04f 0200 	mov.w	r2, #0
 8004f8a:	4b47      	ldr	r3, [pc, #284]	; (80050a8 <kinematicForward+0x240>)
 8004f8c:	f7fb fb34 	bl	80005f8 <__aeabi_dmul>
 8004f90:	4602      	mov	r2, r0
 8004f92:	460b      	mov	r3, r1
 8004f94:	4620      	mov	r0, r4
 8004f96:	4629      	mov	r1, r5
 8004f98:	f7fb f978 	bl	800028c <__adddf3>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	4614      	mov	r4, r2
 8004fa2:	461d      	mov	r5, r3
		+ a4*sin(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8004fb0:	f7fb f96c 	bl	800028c <__adddf3>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	4610      	mov	r0, r2
 8004fba:	4619      	mov	r1, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8004fc2:	f7fb f961 	bl	8000288 <__aeabi_dsub>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	460b      	mov	r3, r1
 8004fca:	ec43 2b17 	vmov	d7, r2, r3
 8004fce:	eeb0 0a47 	vmov.f32	s0, s14
 8004fd2:	eef0 0a67 	vmov.f32	s1, s15
 8004fd6:	f015 fc03 	bl	801a7e0 <sin>
 8004fda:	ec51 0b10 	vmov	r0, r1, d0
 8004fde:	a32a      	add	r3, pc, #168	; (adr r3, 8005088 <kinematicForward+0x220>)
 8004fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe4:	f7fb fb08 	bl	80005f8 <__aeabi_dmul>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	460b      	mov	r3, r1
	y =   a1*sin(pnt->Theta1)
 8004fec:	4620      	mov	r0, r4
 8004fee:	4629      	mov	r1, r5
 8004ff0:	f7fb f94c 	bl	800028c <__adddf3>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	z =   d1 - pnt->D3 - d4;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8005002:	a125      	add	r1, pc, #148	; (adr r1, 8005098 <kinematicForward+0x230>)
 8005004:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005008:	f7fb f93e 	bl	8000288 <__aeabi_dsub>
 800500c:	4602      	mov	r2, r0
 800500e:	460b      	mov	r3, r1
 8005010:	4610      	mov	r0, r2
 8005012:	4619      	mov	r1, r3
 8005014:	a322      	add	r3, pc, #136	; (adr r3, 80050a0 <kinematicForward+0x238>)
 8005016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800501a:	f7fb f935 	bl	8000288 <__aeabi_dsub>
 800501e:	4602      	mov	r2, r0
 8005020:	460b      	mov	r3, r1
 8005022:	e9c7 2304 	strd	r2, r3, [r7, #16]
	roll = pnt->Theta1 + pnt->Theta2 - pnt->Theta4;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8005032:	f7fb f92b 	bl	800028c <__adddf3>
 8005036:	4602      	mov	r2, r0
 8005038:	460b      	mov	r3, r1
 800503a:	4610      	mov	r0, r2
 800503c:	4619      	mov	r1, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8005044:	f7fb f920 	bl	8000288 <__aeabi_dsub>
 8005048:	4602      	mov	r2, r0
 800504a:	460b      	mov	r3, r1
 800504c:	e9c7 2302 	strd	r2, r3, [r7, #8]

	pnt->x = x;
 8005050:	6879      	ldr	r1, [r7, #4]
 8005052:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005056:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	pnt->y = y;
 800505a:	6879      	ldr	r1, [r7, #4]
 800505c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005060:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	pnt->z = z;
 8005064:	6879      	ldr	r1, [r7, #4]
 8005066:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800506a:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	pnt->roll = roll;
 800506e:	6879      	ldr	r1, [r7, #4]
 8005070:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005074:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

	return TRUE;
 8005078:	2301      	movs	r3, #1
}
 800507a:	4618      	mov	r0, r3
 800507c:	3728      	adds	r7, #40	; 0x28
 800507e:	46bd      	mov	sp, r7
 8005080:	bdb0      	pop	{r4, r5, r7, pc}
 8005082:	bf00      	nop
 8005084:	f3af 8000 	nop.w
 8005088:	80000000 	.word	0x80000000
 800508c:	40402e14 	.word	0x40402e14
 8005090:	00000000 	.word	0x00000000
 8005094:	4068a000 	.word	0x4068a000
 8005098:	00000000 	.word	0x00000000
 800509c:	406a6000 	.word	0x406a6000
 80050a0:	e0000000 	.word	0xe0000000
 80050a4:	40536b22 	.word	0x40536b22
 80050a8:	40640000 	.word	0x40640000
 80050ac:	00000000 	.word	0x00000000

080050b0 <kinematicInverse>:

uint8_t		kinematicInverse(SCARA_PositionTypeDef *pnt, SCARA_PositionTypeDef current) {
 80050b0:	b082      	sub	sp, #8
 80050b2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050b6:	b0a0      	sub	sp, #128	; 0x80
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80050c0:	e881 000c 	stmia.w	r1, {r2, r3}
	double theta1, theta2, theta2_positive, theta2_negative, d3, theta4 , pWx, pWy;
	double s1, c1, s2, s2_positive, s2_negative, c2 , temp;

	d3  = d1 - d4 - pnt->z;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80050ca:	a1f0      	add	r1, pc, #960	; (adr r1, 800548c <kinematicInverse+0x3dc>)
 80050cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050d0:	f7fb f8da 	bl	8000288 <__aeabi_dsub>
 80050d4:	4602      	mov	r2, r0
 80050d6:	460b      	mov	r3, r1
 80050d8:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	pWx = pnt->x - a4*cos(pnt->roll);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	e9d3 ab12 	ldrd	sl, fp, [r3, #72]	; 0x48
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 80050e8:	eeb0 0a47 	vmov.f32	s0, s14
 80050ec:	eef0 0a67 	vmov.f32	s1, s15
 80050f0:	f015 fade 	bl	801a6b0 <cos>
 80050f4:	ec51 0b10 	vmov	r0, r1, d0
 80050f8:	a3e6      	add	r3, pc, #920	; (adr r3, 8005494 <kinematicInverse+0x3e4>)
 80050fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050fe:	f7fb fa7b 	bl	80005f8 <__aeabi_dmul>
 8005102:	4602      	mov	r2, r0
 8005104:	460b      	mov	r3, r1
 8005106:	4650      	mov	r0, sl
 8005108:	4659      	mov	r1, fp
 800510a:	f7fb f8bd 	bl	8000288 <__aeabi_dsub>
 800510e:	4602      	mov	r2, r0
 8005110:	460b      	mov	r3, r1
 8005112:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	pWy = pnt->y - a4*sin(pnt->roll);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	e9d3 ab14 	ldrd	sl, fp, [r3, #80]	; 0x50
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8005122:	eeb0 0a47 	vmov.f32	s0, s14
 8005126:	eef0 0a67 	vmov.f32	s1, s15
 800512a:	f015 fb59 	bl	801a7e0 <sin>
 800512e:	ec51 0b10 	vmov	r0, r1, d0
 8005132:	a3d8      	add	r3, pc, #864	; (adr r3, 8005494 <kinematicInverse+0x3e4>)
 8005134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005138:	f7fb fa5e 	bl	80005f8 <__aeabi_dmul>
 800513c:	4602      	mov	r2, r0
 800513e:	460b      	mov	r3, r1
 8005140:	4650      	mov	r0, sl
 8005142:	4659      	mov	r1, fp
 8005144:	f7fb f8a0 	bl	8000288 <__aeabi_dsub>
 8005148:	4602      	mov	r2, r0
 800514a:	460b      	mov	r3, r1
 800514c:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	c2  = (pWx*pWx + pWy*pWy - a1*a1 - a2*a2) / (2*a1*a2);
 8005150:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005154:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005158:	f7fb fa4e 	bl	80005f8 <__aeabi_dmul>
 800515c:	4602      	mov	r2, r0
 800515e:	460b      	mov	r3, r1
 8005160:	4692      	mov	sl, r2
 8005162:	469b      	mov	fp, r3
 8005164:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005168:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800516c:	f7fb fa44 	bl	80005f8 <__aeabi_dmul>
 8005170:	4602      	mov	r2, r0
 8005172:	460b      	mov	r3, r1
 8005174:	4650      	mov	r0, sl
 8005176:	4659      	mov	r1, fp
 8005178:	f7fb f888 	bl	800028c <__adddf3>
 800517c:	4602      	mov	r2, r0
 800517e:	460b      	mov	r3, r1
 8005180:	4610      	mov	r0, r2
 8005182:	4619      	mov	r1, r3
 8005184:	a3c5      	add	r3, pc, #788	; (adr r3, 800549c <kinematicInverse+0x3ec>)
 8005186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800518a:	f7fb f87d 	bl	8000288 <__aeabi_dsub>
 800518e:	4602      	mov	r2, r0
 8005190:	460b      	mov	r3, r1
 8005192:	4610      	mov	r0, r2
 8005194:	4619      	mov	r1, r3
 8005196:	f04f 0200 	mov.w	r2, #0
 800519a:	4bb9      	ldr	r3, [pc, #740]	; (8005480 <kinematicInverse+0x3d0>)
 800519c:	f7fb f874 	bl	8000288 <__aeabi_dsub>
 80051a0:	4602      	mov	r2, r0
 80051a2:	460b      	mov	r3, r1
 80051a4:	4610      	mov	r0, r2
 80051a6:	4619      	mov	r1, r3
 80051a8:	a3b1      	add	r3, pc, #708	; (adr r3, 8005470 <kinematicInverse+0x3c0>)
 80051aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ae:	f7fb fb4d 	bl	800084c <__aeabi_ddiv>
 80051b2:	4602      	mov	r2, r0
 80051b4:	460b      	mov	r3, r1
 80051b6:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp = 1 - c2*c2;
 80051ba:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80051be:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80051c2:	f7fb fa19 	bl	80005f8 <__aeabi_dmul>
 80051c6:	4602      	mov	r2, r0
 80051c8:	460b      	mov	r3, r1
 80051ca:	f04f 0000 	mov.w	r0, #0
 80051ce:	49ad      	ldr	r1, [pc, #692]	; (8005484 <kinematicInverse+0x3d4>)
 80051d0:	f7fb f85a 	bl	8000288 <__aeabi_dsub>
 80051d4:	4602      	mov	r2, r0
 80051d6:	460b      	mov	r3, r1
 80051d8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	if ( temp < 0 ) {
 80051dc:	f04f 0200 	mov.w	r2, #0
 80051e0:	f04f 0300 	mov.w	r3, #0
 80051e4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80051e8:	f7fb fc78 	bl	8000adc <__aeabi_dcmplt>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d001      	beq.n	80051f6 <kinematicInverse+0x146>
		return FALSE;
 80051f2:	2300      	movs	r3, #0
 80051f4:	e134      	b.n	8005460 <kinematicInverse+0x3b0>
	}
	s2_positive  = sqrt(temp); // Note that there are 2 solution: elbow up & elbow down
 80051f6:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 80051fa:	f015 fb89 	bl	801a910 <sqrt>
 80051fe:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
	s2_negative	 = -s2_positive;
 8005202:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005204:	63bb      	str	r3, [r7, #56]	; 0x38
 8005206:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800520c:	63fb      	str	r3, [r7, #60]	; 0x3c

	theta2_positive = atan2(s2_positive,c2);
 800520e:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 8005212:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8005216:	f015 fb79 	bl	801a90c <atan2>
 800521a:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
	theta2_negative = atan2(s2_negative,c2);
 800521e:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 8005222:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8005226:	f015 fb71 	bl	801a90c <atan2>
 800522a:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	// Choose relevant situation : nearest
	if ( fabs( theta2_positive - current.Theta2) <= fabs( theta2_negative - current.Theta2)) {
 800522e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8005232:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005236:	f7fb f827 	bl	8000288 <__aeabi_dsub>
 800523a:	4602      	mov	r2, r0
 800523c:	460b      	mov	r3, r1
 800523e:	4614      	mov	r4, r2
 8005240:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8005244:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8005248:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800524c:	f7fb f81c 	bl	8000288 <__aeabi_dsub>
 8005250:	4602      	mov	r2, r0
 8005252:	460b      	mov	r3, r1
 8005254:	4690      	mov	r8, r2
 8005256:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800525a:	4642      	mov	r2, r8
 800525c:	464b      	mov	r3, r9
 800525e:	4620      	mov	r0, r4
 8005260:	4629      	mov	r1, r5
 8005262:	f7fb fc45 	bl	8000af0 <__aeabi_dcmple>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d008      	beq.n	800527e <kinematicInverse+0x1ce>
		s2 		= s2_positive;
 800526c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005270:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		theta2 	= theta2_positive;
 8005274:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005278:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
 800527c:	e007      	b.n	800528e <kinematicInverse+0x1de>
	} else {
		s2 		= s2_negative;
 800527e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005282:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		theta2 	= theta2_negative;
 8005286:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800528a:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	}

	s1 = ((a1 + a2*c2)*pWy - a2*s2*pWx) / (pWx*pWx + pWy*pWy);
 800528e:	f04f 0200 	mov.w	r2, #0
 8005292:	4b7d      	ldr	r3, [pc, #500]	; (8005488 <kinematicInverse+0x3d8>)
 8005294:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005298:	f7fb f9ae 	bl	80005f8 <__aeabi_dmul>
 800529c:	4602      	mov	r2, r0
 800529e:	460b      	mov	r3, r1
 80052a0:	4610      	mov	r0, r2
 80052a2:	4619      	mov	r1, r3
 80052a4:	a374      	add	r3, pc, #464	; (adr r3, 8005478 <kinematicInverse+0x3c8>)
 80052a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052aa:	f7fa ffef 	bl	800028c <__adddf3>
 80052ae:	4602      	mov	r2, r0
 80052b0:	460b      	mov	r3, r1
 80052b2:	4610      	mov	r0, r2
 80052b4:	4619      	mov	r1, r3
 80052b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80052ba:	f7fb f99d 	bl	80005f8 <__aeabi_dmul>
 80052be:	4602      	mov	r2, r0
 80052c0:	460b      	mov	r3, r1
 80052c2:	4614      	mov	r4, r2
 80052c4:	461d      	mov	r5, r3
 80052c6:	f04f 0200 	mov.w	r2, #0
 80052ca:	4b6f      	ldr	r3, [pc, #444]	; (8005488 <kinematicInverse+0x3d8>)
 80052cc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80052d0:	f7fb f992 	bl	80005f8 <__aeabi_dmul>
 80052d4:	4602      	mov	r2, r0
 80052d6:	460b      	mov	r3, r1
 80052d8:	4610      	mov	r0, r2
 80052da:	4619      	mov	r1, r3
 80052dc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80052e0:	f7fb f98a 	bl	80005f8 <__aeabi_dmul>
 80052e4:	4602      	mov	r2, r0
 80052e6:	460b      	mov	r3, r1
 80052e8:	4620      	mov	r0, r4
 80052ea:	4629      	mov	r1, r5
 80052ec:	f7fa ffcc 	bl	8000288 <__aeabi_dsub>
 80052f0:	4602      	mov	r2, r0
 80052f2:	460b      	mov	r3, r1
 80052f4:	4614      	mov	r4, r2
 80052f6:	461d      	mov	r5, r3
 80052f8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80052fc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005300:	f7fb f97a 	bl	80005f8 <__aeabi_dmul>
 8005304:	4602      	mov	r2, r0
 8005306:	460b      	mov	r3, r1
 8005308:	4690      	mov	r8, r2
 800530a:	4699      	mov	r9, r3
 800530c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005310:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005314:	f7fb f970 	bl	80005f8 <__aeabi_dmul>
 8005318:	4602      	mov	r2, r0
 800531a:	460b      	mov	r3, r1
 800531c:	4640      	mov	r0, r8
 800531e:	4649      	mov	r1, r9
 8005320:	f7fa ffb4 	bl	800028c <__adddf3>
 8005324:	4602      	mov	r2, r0
 8005326:	460b      	mov	r3, r1
 8005328:	4620      	mov	r0, r4
 800532a:	4629      	mov	r1, r5
 800532c:	f7fb fa8e 	bl	800084c <__aeabi_ddiv>
 8005330:	4602      	mov	r2, r0
 8005332:	460b      	mov	r3, r1
 8005334:	e9c7 2308 	strd	r2, r3, [r7, #32]
	c1 = ((a1 + a2*c2)*pWx + a2*s2*pWy) / (pWx*pWx + pWy*pWy);
 8005338:	f04f 0200 	mov.w	r2, #0
 800533c:	4b52      	ldr	r3, [pc, #328]	; (8005488 <kinematicInverse+0x3d8>)
 800533e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005342:	f7fb f959 	bl	80005f8 <__aeabi_dmul>
 8005346:	4602      	mov	r2, r0
 8005348:	460b      	mov	r3, r1
 800534a:	4610      	mov	r0, r2
 800534c:	4619      	mov	r1, r3
 800534e:	a34a      	add	r3, pc, #296	; (adr r3, 8005478 <kinematicInverse+0x3c8>)
 8005350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005354:	f7fa ff9a 	bl	800028c <__adddf3>
 8005358:	4602      	mov	r2, r0
 800535a:	460b      	mov	r3, r1
 800535c:	4610      	mov	r0, r2
 800535e:	4619      	mov	r1, r3
 8005360:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005364:	f7fb f948 	bl	80005f8 <__aeabi_dmul>
 8005368:	4602      	mov	r2, r0
 800536a:	460b      	mov	r3, r1
 800536c:	4614      	mov	r4, r2
 800536e:	461d      	mov	r5, r3
 8005370:	f04f 0200 	mov.w	r2, #0
 8005374:	4b44      	ldr	r3, [pc, #272]	; (8005488 <kinematicInverse+0x3d8>)
 8005376:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800537a:	f7fb f93d 	bl	80005f8 <__aeabi_dmul>
 800537e:	4602      	mov	r2, r0
 8005380:	460b      	mov	r3, r1
 8005382:	4610      	mov	r0, r2
 8005384:	4619      	mov	r1, r3
 8005386:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800538a:	f7fb f935 	bl	80005f8 <__aeabi_dmul>
 800538e:	4602      	mov	r2, r0
 8005390:	460b      	mov	r3, r1
 8005392:	4620      	mov	r0, r4
 8005394:	4629      	mov	r1, r5
 8005396:	f7fa ff79 	bl	800028c <__adddf3>
 800539a:	4602      	mov	r2, r0
 800539c:	460b      	mov	r3, r1
 800539e:	4614      	mov	r4, r2
 80053a0:	461d      	mov	r5, r3
 80053a2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80053a6:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80053aa:	f7fb f925 	bl	80005f8 <__aeabi_dmul>
 80053ae:	4602      	mov	r2, r0
 80053b0:	460b      	mov	r3, r1
 80053b2:	4690      	mov	r8, r2
 80053b4:	4699      	mov	r9, r3
 80053b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80053ba:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80053be:	f7fb f91b 	bl	80005f8 <__aeabi_dmul>
 80053c2:	4602      	mov	r2, r0
 80053c4:	460b      	mov	r3, r1
 80053c6:	4640      	mov	r0, r8
 80053c8:	4649      	mov	r1, r9
 80053ca:	f7fa ff5f 	bl	800028c <__adddf3>
 80053ce:	4602      	mov	r2, r0
 80053d0:	460b      	mov	r3, r1
 80053d2:	4620      	mov	r0, r4
 80053d4:	4629      	mov	r1, r5
 80053d6:	f7fb fa39 	bl	800084c <__aeabi_ddiv>
 80053da:	4602      	mov	r2, r0
 80053dc:	460b      	mov	r3, r1
 80053de:	e9c7 2306 	strd	r2, r3, [r7, #24]
	theta1 = atan2(s1,c1);
 80053e2:	ed97 1b06 	vldr	d1, [r7, #24]
 80053e6:	ed97 0b08 	vldr	d0, [r7, #32]
 80053ea:	f015 fa8f 	bl	801a90c <atan2>
 80053ee:	ed87 0b04 	vstr	d0, [r7, #16]
 	theta4 = theta1 + theta2 - pnt->roll;
 80053f2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80053f6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80053fa:	f7fa ff47 	bl	800028c <__adddf3>
 80053fe:	4602      	mov	r2, r0
 8005400:	460b      	mov	r3, r1
 8005402:	4610      	mov	r0, r2
 8005404:	4619      	mov	r1, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800540c:	f7fa ff3c 	bl	8000288 <__aeabi_dsub>
 8005410:	4602      	mov	r2, r0
 8005412:	460b      	mov	r3, r1
 8005414:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if ( SCARA_STATUS_OK != scaraCheckWorkSpace4(theta1, theta2, d3, theta4)) {
 8005418:	ed97 3b02 	vldr	d3, [r7, #8]
 800541c:	ed97 2b1a 	vldr	d2, [r7, #104]	; 0x68
 8005420:	ed97 1b1e 	vldr	d1, [r7, #120]	; 0x78
 8005424:	ed97 0b04 	vldr	d0, [r7, #16]
 8005428:	f004 fea2 	bl	800a170 <scaraCheckWorkSpace4>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d001      	beq.n	8005436 <kinematicInverse+0x386>
		return FALSE; // Over workspace !!!
 8005432:	2300      	movs	r3, #0
 8005434:	e014      	b.n	8005460 <kinematicInverse+0x3b0>
	}
	pnt->Theta1 = theta1;
 8005436:	6879      	ldr	r1, [r7, #4]
 8005438:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800543c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	pnt->Theta2 = theta2;
 8005440:	6879      	ldr	r1, [r7, #4]
 8005442:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8005446:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	pnt->D3		= d3;
 800544a:	6879      	ldr	r1, [r7, #4]
 800544c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8005450:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	pnt->Theta4 = theta4;
 8005454:	6879      	ldr	r1, [r7, #4]
 8005456:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800545a:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80

	return TRUE; // All is well
 800545e:	2301      	movs	r3, #1
}
 8005460:	4618      	mov	r0, r3
 8005462:	3780      	adds	r7, #128	; 0x80
 8005464:	46bd      	mov	sp, r7
 8005466:	e8bd 4fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800546a:	b002      	add	sp, #8
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	00000000 	.word	0x00000000
 8005474:	40eec800 	.word	0x40eec800
 8005478:	00000000 	.word	0x00000000
 800547c:	4068a000 	.word	0x4068a000
 8005480:	40d90000 	.word	0x40d90000
 8005484:	3ff00000 	.word	0x3ff00000
 8005488:	40640000 	.word	0x40640000
 800548c:	80000000 	.word	0x80000000
 8005490:	4060aa6e 	.word	0x4060aa6e
 8005494:	80000000 	.word	0x80000000
 8005498:	40402e14 	.word	0x40402e14
 800549c:	00000000 	.word	0x00000000
 80054a0:	40e2f320 	.word	0x40e2f320

080054a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80054a8:	f005 ff82 	bl	800b3b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80054ac:	f000 f812 	bl	80054d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80054b0:	f7ff fc22 	bl	8004cf8 <MX_GPIO_Init>
  MX_DMA_Init();
 80054b4:	f7fd f86e 	bl	8002594 <MX_DMA_Init>
  MX_UART4_Init();
 80054b8:	f005 fe7c 	bl	800b1b4 <MX_UART4_Init>
  MX_FSMC_Init();
 80054bc:	f7ff f884 	bl	80045c8 <MX_FSMC_Init>
  MX_TIM7_Init();
 80054c0:	f005 fe06 	bl	800b0d0 <MX_TIM7_Init>
  MX_TIM2_Init();
 80054c4:	f005 fdb6 	bl	800b034 <MX_TIM2_Init>
  //lowlayer_writePulse(0, 0, 0, 0);
  //HAL_Delay(10);
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80054c8:	f7fd f89e 	bl	8002608 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80054cc:	f00d f81e 	bl	801250c <osKernelStart>
//  		  HAL_Delay(10);
//  	  }
//  lowlayer_writePulse(0, 0, 0, 0);
//  __NOP();

  while (1)
 80054d0:	e7fe      	b.n	80054d0 <main+0x2c>
	...

080054d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b094      	sub	sp, #80	; 0x50
 80054d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80054da:	f107 0320 	add.w	r3, r7, #32
 80054de:	2230      	movs	r2, #48	; 0x30
 80054e0:	2100      	movs	r1, #0
 80054e2:	4618      	mov	r0, r3
 80054e4:	f010 fc2c 	bl	8015d40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80054e8:	f107 030c 	add.w	r3, r7, #12
 80054ec:	2200      	movs	r2, #0
 80054ee:	601a      	str	r2, [r3, #0]
 80054f0:	605a      	str	r2, [r3, #4]
 80054f2:	609a      	str	r2, [r3, #8]
 80054f4:	60da      	str	r2, [r3, #12]
 80054f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80054f8:	2300      	movs	r3, #0
 80054fa:	60bb      	str	r3, [r7, #8]
 80054fc:	4b28      	ldr	r3, [pc, #160]	; (80055a0 <SystemClock_Config+0xcc>)
 80054fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005500:	4a27      	ldr	r2, [pc, #156]	; (80055a0 <SystemClock_Config+0xcc>)
 8005502:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005506:	6413      	str	r3, [r2, #64]	; 0x40
 8005508:	4b25      	ldr	r3, [pc, #148]	; (80055a0 <SystemClock_Config+0xcc>)
 800550a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005510:	60bb      	str	r3, [r7, #8]
 8005512:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005514:	2300      	movs	r3, #0
 8005516:	607b      	str	r3, [r7, #4]
 8005518:	4b22      	ldr	r3, [pc, #136]	; (80055a4 <SystemClock_Config+0xd0>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a21      	ldr	r2, [pc, #132]	; (80055a4 <SystemClock_Config+0xd0>)
 800551e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005522:	6013      	str	r3, [r2, #0]
 8005524:	4b1f      	ldr	r3, [pc, #124]	; (80055a4 <SystemClock_Config+0xd0>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800552c:	607b      	str	r3, [r7, #4]
 800552e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005530:	2301      	movs	r3, #1
 8005532:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005534:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005538:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800553a:	2302      	movs	r3, #2
 800553c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800553e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005542:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005544:	2308      	movs	r3, #8
 8005546:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8005548:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800554c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800554e:	2302      	movs	r3, #2
 8005550:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8005552:	2307      	movs	r3, #7
 8005554:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005556:	f107 0320 	add.w	r3, r7, #32
 800555a:	4618      	mov	r0, r3
 800555c:	f007 ffa0 	bl	800d4a0 <HAL_RCC_OscConfig>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d001      	beq.n	800556a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8005566:	f000 f831 	bl	80055cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800556a:	230f      	movs	r3, #15
 800556c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800556e:	2302      	movs	r3, #2
 8005570:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005572:	2300      	movs	r3, #0
 8005574:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005576:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800557a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800557c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005580:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005582:	f107 030c 	add.w	r3, r7, #12
 8005586:	2105      	movs	r1, #5
 8005588:	4618      	mov	r0, r3
 800558a:	f008 f9f9 	bl	800d980 <HAL_RCC_ClockConfig>
 800558e:	4603      	mov	r3, r0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d001      	beq.n	8005598 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8005594:	f000 f81a 	bl	80055cc <Error_Handler>
  }
}
 8005598:	bf00      	nop
 800559a:	3750      	adds	r7, #80	; 0x50
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	40023800 	.word	0x40023800
 80055a4:	40007000 	.word	0x40007000

080055a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a04      	ldr	r2, [pc, #16]	; (80055c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d101      	bne.n	80055be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80055ba:	f005 ff1b 	bl	800b3f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80055be:	bf00      	nop
 80055c0:	3708      	adds	r7, #8
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	40001000 	.word	0x40001000

080055cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80055cc:	b480      	push	{r7}
 80055ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80055d0:	bf00      	nop
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr

080055da <ringBuff_PushChar>:
 *  data		: data to write
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PushChar(RINGBUFFER_TypeDef *ringbuff, uint8_t data) {
 80055da:	b480      	push	{r7}
 80055dc:	b083      	sub	sp, #12
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
 80055e2:	460b      	mov	r3, r1
 80055e4:	70fb      	strb	r3, [r7, #3]
	if (ringbuff->isFull_Flag) {
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055ec:	3308      	adds	r3, #8
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d001      	beq.n	80055f8 <ringBuff_PushChar+0x1e>
		return FALSE;
 80055f4:	2300      	movs	r3, #0
 80055f6:	e02e      	b.n	8005656 <ringBuff_PushChar+0x7c>
	} else {
			ringbuff->Array[ringbuff->head]	= data;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	78f9      	ldrb	r1, [r7, #3]
 8005604:	54d1      	strb	r1, [r2, r3]
			ringbuff->head					= (ringbuff->head + 1) % RINGBUFFER_SIZE;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	3301      	adds	r3, #1
 8005610:	425a      	negs	r2, r3
 8005612:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005616:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800561a:	bf58      	it	pl
 800561c:	4253      	negpl	r3, r2
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005624:	6013      	str	r3, [r2, #0]
			if (ringbuff->head == ringbuff->tail) {
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005634:	3304      	adds	r3, #4
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	429a      	cmp	r2, r3
 800563a:	d105      	bne.n	8005648 <ringBuff_PushChar+0x6e>
				ringbuff->isFull_Flag = TRUE;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005642:	3308      	adds	r3, #8
 8005644:	2201      	movs	r2, #1
 8005646:	701a      	strb	r2, [r3, #0]
			}
			ringbuff->isEmpty_Flag = FALSE;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800564e:	3309      	adds	r3, #9
 8005650:	2200      	movs	r2, #0
 8005652:	701a      	strb	r2, [r3, #0]
			return TRUE;
 8005654:	2301      	movs	r3, #1
	}
}
 8005656:	4618      	mov	r0, r3
 8005658:	370c      	adds	r7, #12
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr

08005662 <ringBuff_PopChar>:
 *  *ptr_data	: pointer of destination
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PopChar(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data) {
 8005662:	b480      	push	{r7}
 8005664:	b083      	sub	sp, #12
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
 800566a:	6039      	str	r1, [r7, #0]
	if (ringbuff->isEmpty_Flag) {
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005672:	3309      	adds	r3, #9
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d001      	beq.n	800567e <ringBuff_PopChar+0x1c>
		return FALSE;
 800567a:	2300      	movs	r3, #0
 800567c:	e032      	b.n	80056e4 <ringBuff_PopChar+0x82>
	} else {
			*ptr_data		= ringbuff->Array[ringbuff->tail];
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005684:	3304      	adds	r3, #4
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	5cd2      	ldrb	r2, [r2, r3]
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	701a      	strb	r2, [r3, #0]
			ringbuff->tail	= (ringbuff->tail +1) % RINGBUFFER_SIZE;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005696:	3304      	adds	r3, #4
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	3301      	adds	r3, #1
 800569c:	4259      	negs	r1, r3
 800569e:	f3c3 020b 	ubfx	r2, r3, #0, #12
 80056a2:	f3c1 030b 	ubfx	r3, r1, #0, #12
 80056a6:	bf58      	it	pl
 80056a8:	425a      	negpl	r2, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056b0:	3304      	adds	r3, #4
 80056b2:	601a      	str	r2, [r3, #0]
			if (ringbuff->head == ringbuff->tail) {
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056c2:	3304      	adds	r3, #4
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d105      	bne.n	80056d6 <ringBuff_PopChar+0x74>
				ringbuff->isEmpty_Flag = TRUE;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056d0:	3309      	adds	r3, #9
 80056d2:	2201      	movs	r2, #1
 80056d4:	701a      	strb	r2, [r3, #0]
			}
			ringbuff->isFull_Flag = FALSE;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056dc:	3308      	adds	r3, #8
 80056de:	2200      	movs	r2, #0
 80056e0:	701a      	strb	r2, [r3, #0]
			return TRUE;
 80056e2:	2301      	movs	r3, #1
	}
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <ringBuff_PushArray>:
 *  *ptr_data	: pointer of source
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PushArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b086      	sub	sp, #24
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	607a      	str	r2, [r7, #4]
	int16_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 80056fc:	2300      	movs	r3, #0
 80056fe:	82fb      	strh	r3, [r7, #22]
 8005700:	e011      	b.n	8005726 <ringBuff_PushArray+0x36>
		if ( !ringBuff_PushChar(ringbuff, *(ptr_data + success_number))) {
 8005702:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005706:	68ba      	ldr	r2, [r7, #8]
 8005708:	4413      	add	r3, r2
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	4619      	mov	r1, r3
 800570e:	68f8      	ldr	r0, [r7, #12]
 8005710:	f7ff ff63 	bl	80055da <ringBuff_PushChar>
 8005714:	4603      	mov	r3, r0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00b      	beq.n	8005732 <ringBuff_PushArray+0x42>
	for (success_number = 0; success_number < len; success_number++) {
 800571a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800571e:	b29b      	uxth	r3, r3
 8005720:	3301      	adds	r3, #1
 8005722:	b29b      	uxth	r3, r3
 8005724:	82fb      	strh	r3, [r7, #22]
 8005726:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	429a      	cmp	r2, r3
 800572e:	dce8      	bgt.n	8005702 <ringBuff_PushArray+0x12>
 8005730:	e000      	b.n	8005734 <ringBuff_PushArray+0x44>
			break;
 8005732:	bf00      	nop
		}// stop when ring buffer FULL
	}
	return success_number;
 8005734:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8005738:	4618      	mov	r0, r3
 800573a:	3718      	adds	r7, #24
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <ringBuff_PopArray>:
 *  *ptr_data	: pointer of destination
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PopArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 8005740:	b580      	push	{r7, lr}
 8005742:	b086      	sub	sp, #24
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	607a      	str	r2, [r7, #4]
	int32_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 800574c:	2300      	movs	r3, #0
 800574e:	617b      	str	r3, [r7, #20]
 8005750:	e00c      	b.n	800576c <ringBuff_PopArray+0x2c>
		if ( !ringBuff_PopChar(ringbuff, (ptr_data + success_number))) {
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	68ba      	ldr	r2, [r7, #8]
 8005756:	4413      	add	r3, r2
 8005758:	4619      	mov	r1, r3
 800575a:	68f8      	ldr	r0, [r7, #12]
 800575c:	f7ff ff81 	bl	8005662 <ringBuff_PopChar>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d007      	beq.n	8005776 <ringBuff_PopArray+0x36>
	for (success_number = 0; success_number < len; success_number++) {
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	3301      	adds	r3, #1
 800576a:	617b      	str	r3, [r7, #20]
 800576c:	697a      	ldr	r2, [r7, #20]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	429a      	cmp	r2, r3
 8005772:	dbee      	blt.n	8005752 <ringBuff_PopArray+0x12>
 8005774:	e000      	b.n	8005778 <ringBuff_PopArray+0x38>
			break;
 8005776:	bf00      	nop
		}// stop when ring buffer EMPTY
	}
	return success_number;
 8005778:	697b      	ldr	r3, [r7, #20]
}
 800577a:	4618      	mov	r0, r3
 800577c:	3718      	adds	r7, #24
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}

08005782 <ringBuff_DistanceOf>:
 *  cmp_char	: compare character
 *
 *  returns:	: distance from 'tail' to 'cmp_char'
 *  			  -1 'cmp_char' could not be found.
 */
int32_t	ringBuff_DistanceOf	(RINGBUFFER_TypeDef *ringbuff, const char* cmp_char) {
 8005782:	b580      	push	{r7, lr}
 8005784:	b088      	sub	sp, #32
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
 800578a:	6039      	str	r1, [r7, #0]
	int32_t index = ringbuff->tail;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005792:	3304      	adds	r3, #4
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	61fb      	str	r3, [r7, #28]
	int32_t distance = 0;
 8005798:	2300      	movs	r3, #0
 800579a:	61bb      	str	r3, [r7, #24]
	int32_t sync_state = 0;
 800579c:	2300      	movs	r3, #0
 800579e:	617b      	str	r3, [r7, #20]
	int32_t head_ptr = ringbuff->head;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	60fb      	str	r3, [r7, #12]
	int32_t number_of_state = strlen(cmp_char);
 80057aa:	6838      	ldr	r0, [r7, #0]
 80057ac:	f7fa fd10 	bl	80001d0 <strlen>
 80057b0:	4603      	mov	r3, r0
 80057b2:	60bb      	str	r3, [r7, #8]
	if (ringbuff->isFull_Flag) {
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057ba:	3308      	adds	r3, #8
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d066      	beq.n	8005890 <ringBuff_DistanceOf+0x10e>
	    for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 80057c2:	2300      	movs	r3, #0
 80057c4:	613b      	str	r3, [r7, #16]
 80057c6:	e030      	b.n	800582a <ringBuff_DistanceOf+0xa8>
	            if(ringbuff->Array[index] == cmp_char[sync_state]){
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	4413      	add	r3, r2
 80057ce:	781a      	ldrb	r2, [r3, #0]
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	6839      	ldr	r1, [r7, #0]
 80057d4:	440b      	add	r3, r1
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d103      	bne.n	80057e4 <ringBuff_DistanceOf+0x62>
	                sync_state++;
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	3301      	adds	r3, #1
 80057e0:	617b      	str	r3, [r7, #20]
 80057e2:	e00c      	b.n	80057fe <ringBuff_DistanceOf+0x7c>
	            }else if(ringbuff->Array[index] == cmp_char[0]){
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	4413      	add	r3, r2
 80057ea:	781a      	ldrb	r2, [r3, #0]
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d102      	bne.n	80057fa <ringBuff_DistanceOf+0x78>
	                sync_state = 1;
 80057f4:	2301      	movs	r3, #1
 80057f6:	617b      	str	r3, [r7, #20]
 80057f8:	e001      	b.n	80057fe <ringBuff_DistanceOf+0x7c>
	            }else{
	                sync_state = 0;
 80057fa:	2300      	movs	r3, #0
 80057fc:	617b      	str	r3, [r7, #20]
	            }
	            if(sync_state == number_of_state){
 80057fe:	697a      	ldr	r2, [r7, #20]
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	429a      	cmp	r2, r3
 8005804:	d101      	bne.n	800580a <ringBuff_DistanceOf+0x88>
	                return distance;
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	e048      	b.n	800589c <ringBuff_DistanceOf+0x11a>
	            }
	//				if ( cmp_char == ringbuff->.Array[index]) {
	//					return distance;
	//				}
	            distance++;
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	3301      	adds	r3, #1
 800580e:	61bb      	str	r3, [r7, #24]
	    for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	3301      	adds	r3, #1
 8005814:	613b      	str	r3, [r7, #16]
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	3301      	adds	r3, #1
 800581a:	425a      	negs	r2, r3
 800581c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005820:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8005824:	bf58      	it	pl
 8005826:	4253      	negpl	r3, r2
 8005828:	61fb      	str	r3, [r7, #28]
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005830:	dbca      	blt.n	80057c8 <ringBuff_DistanceOf+0x46>
 8005832:	e031      	b.n	8005898 <ringBuff_DistanceOf+0x116>
	        }
	} else {
	    for ( ; (index != head_ptr); index = (index + 1) % RINGBUFFER_SIZE) {
	        if(ringbuff->Array[index] == cmp_char[sync_state]){
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	4413      	add	r3, r2
 800583a:	781a      	ldrb	r2, [r3, #0]
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	6839      	ldr	r1, [r7, #0]
 8005840:	440b      	add	r3, r1
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	429a      	cmp	r2, r3
 8005846:	d103      	bne.n	8005850 <ringBuff_DistanceOf+0xce>
	                //LOG_REPORT("dis1", ringbuff->.tail);
	                sync_state++;
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	3301      	adds	r3, #1
 800584c:	617b      	str	r3, [r7, #20]
 800584e:	e00c      	b.n	800586a <ringBuff_DistanceOf+0xe8>
	            }else if(ringbuff->Array[index] == cmp_char[0]){
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	4413      	add	r3, r2
 8005856:	781a      	ldrb	r2, [r3, #0]
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	429a      	cmp	r2, r3
 800585e:	d102      	bne.n	8005866 <ringBuff_DistanceOf+0xe4>
	                sync_state = 1;
 8005860:	2301      	movs	r3, #1
 8005862:	617b      	str	r3, [r7, #20]
 8005864:	e001      	b.n	800586a <ringBuff_DistanceOf+0xe8>
	            }else{
	                sync_state = 0;
 8005866:	2300      	movs	r3, #0
 8005868:	617b      	str	r3, [r7, #20]
	            }
	            if(sync_state == number_of_state){
 800586a:	697a      	ldr	r2, [r7, #20]
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	429a      	cmp	r2, r3
 8005870:	d101      	bne.n	8005876 <ringBuff_DistanceOf+0xf4>
	                //LOG_REPORT("dis", distance);
	                return distance;
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	e012      	b.n	800589c <ringBuff_DistanceOf+0x11a>
	            }
	//				if ( cmp_char == ringbuff->.Array[index]) {
	//					return distance;
	//				}
	            distance++;
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	3301      	adds	r3, #1
 800587a:	61bb      	str	r3, [r7, #24]
	    for ( ; (index != head_ptr); index = (index + 1) % RINGBUFFER_SIZE) {
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	3301      	adds	r3, #1
 8005880:	425a      	negs	r2, r3
 8005882:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005886:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800588a:	bf58      	it	pl
 800588c:	4253      	negpl	r3, r2
 800588e:	61fb      	str	r3, [r7, #28]
 8005890:	69fa      	ldr	r2, [r7, #28]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	429a      	cmp	r2, r3
 8005896:	d1cd      	bne.n	8005834 <ringBuff_DistanceOf+0xb2>
	        }
	    //LOG_REPORT("hai", 2);
	}

	return -1;
 8005898:	f04f 33ff 	mov.w	r3, #4294967295
}
 800589c:	4618      	mov	r0, r3
 800589e:	3720      	adds	r7, #32
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <lowlayer_scanReset>:
uint8_t state_scan;
uint8_t scan_flag;

const int8_t	pulse_scan[4] = {3, 5, 5, 10};

void	lowlayer_scanReset(void) {
 80058a4:	b580      	push	{r7, lr}
 80058a6:	af00      	add	r7, sp, #0
	lowlayer_resetEncoder();
 80058a8:	f000 fdfe 	bl	80064a8 <lowlayer_resetEncoder>
	pulse_accumulate[0] = 0;
 80058ac:	4b10      	ldr	r3, [pc, #64]	; (80058f0 <lowlayer_scanReset+0x4c>)
 80058ae:	2200      	movs	r2, #0
 80058b0:	601a      	str	r2, [r3, #0]
	pulse_accumulate[1] = 0;
 80058b2:	4b0f      	ldr	r3, [pc, #60]	; (80058f0 <lowlayer_scanReset+0x4c>)
 80058b4:	2200      	movs	r2, #0
 80058b6:	605a      	str	r2, [r3, #4]
	pulse_accumulate[2] = 0;
 80058b8:	4b0d      	ldr	r3, [pc, #52]	; (80058f0 <lowlayer_scanReset+0x4c>)
 80058ba:	2200      	movs	r2, #0
 80058bc:	609a      	str	r2, [r3, #8]
	pulse_accumulate[3] = 0;
 80058be:	4b0c      	ldr	r3, [pc, #48]	; (80058f0 <lowlayer_scanReset+0x4c>)
 80058c0:	2200      	movs	r2, #0
 80058c2:	60da      	str	r2, [r3, #12]

	position_encoder[0] = 0;
 80058c4:	4b0b      	ldr	r3, [pc, #44]	; (80058f4 <lowlayer_scanReset+0x50>)
 80058c6:	2200      	movs	r2, #0
 80058c8:	601a      	str	r2, [r3, #0]
	position_encoder[1] = 0;
 80058ca:	4b0a      	ldr	r3, [pc, #40]	; (80058f4 <lowlayer_scanReset+0x50>)
 80058cc:	2200      	movs	r2, #0
 80058ce:	605a      	str	r2, [r3, #4]
	position_encoder[2] = 0;
 80058d0:	4b08      	ldr	r3, [pc, #32]	; (80058f4 <lowlayer_scanReset+0x50>)
 80058d2:	2200      	movs	r2, #0
 80058d4:	609a      	str	r2, [r3, #8]

	scan_flag = 0;
 80058d6:	4b08      	ldr	r3, [pc, #32]	; (80058f8 <lowlayer_scanReset+0x54>)
 80058d8:	2200      	movs	r2, #0
 80058da:	701a      	strb	r2, [r3, #0]
	state_scan = 0;
 80058dc:	4b07      	ldr	r3, [pc, #28]	; (80058fc <lowlayer_scanReset+0x58>)
 80058de:	2200      	movs	r2, #0
 80058e0:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CAPTURE_ENABLE_GPIO_Port, CAPTURE_ENABLE_Pin, GPIO_PIN_RESET);
 80058e2:	2200      	movs	r2, #0
 80058e4:	2108      	movs	r1, #8
 80058e6:	4806      	ldr	r0, [pc, #24]	; (8005900 <lowlayer_scanReset+0x5c>)
 80058e8:	f006 fbe6 	bl	800c0b8 <HAL_GPIO_WritePin>
}
 80058ec:	bf00      	nop
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	2000de90 	.word	0x2000de90
 80058f4:	2000dea4 	.word	0x2000dea4
 80058f8:	2000dea0 	.word	0x2000dea0
 80058fc:	2000dec0 	.word	0x2000dec0
 8005900:	40020c00 	.word	0x40020c00
 8005904:	00000000 	.word	0x00000000

08005908 <lowlayer_scanFlow>:

uint8_t	lowlayer_scanFlow(void) {
 8005908:	b580      	push	{r7, lr}
 800590a:	b082      	sub	sp, #8
 800590c:	af00      	add	r7, sp, #0
	// Scan limit switch from 3 to 0
	int8_t pulse[4] = {0, 0, 0 ,0};
 800590e:	2300      	movs	r3, #0
 8005910:	607b      	str	r3, [r7, #4]
	lowlayer_updateLimit();
 8005912:	f000 fe87 	bl	8006624 <lowlayer_updateLimit>
	if (state_scan < 4) {
 8005916:	4b96      	ldr	r3, [pc, #600]	; (8005b70 <lowlayer_scanFlow+0x268>)
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	2b03      	cmp	r3, #3
 800591c:	d837      	bhi.n	800598e <lowlayer_scanFlow+0x86>
		if (limit_switch[3 - state_scan] == 0) {
 800591e:	4b94      	ldr	r3, [pc, #592]	; (8005b70 <lowlayer_scanFlow+0x268>)
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	f1c3 0303 	rsb	r3, r3, #3
 8005926:	4a93      	ldr	r2, [pc, #588]	; (8005b74 <lowlayer_scanFlow+0x26c>)
 8005928:	5cd3      	ldrb	r3, [r2, r3]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d121      	bne.n	8005972 <lowlayer_scanFlow+0x6a>
			pulse[3 - state_scan] = pulse_scan[3 - state_scan];
 800592e:	4b90      	ldr	r3, [pc, #576]	; (8005b70 <lowlayer_scanFlow+0x268>)
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	f1c3 0203 	rsb	r2, r3, #3
 8005936:	4b8e      	ldr	r3, [pc, #568]	; (8005b70 <lowlayer_scanFlow+0x268>)
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	f1c3 0303 	rsb	r3, r3, #3
 800593e:	498e      	ldr	r1, [pc, #568]	; (8005b78 <lowlayer_scanFlow+0x270>)
 8005940:	568a      	ldrsb	r2, [r1, r2]
 8005942:	f107 0108 	add.w	r1, r7, #8
 8005946:	440b      	add	r3, r1
 8005948:	f803 2c04 	strb.w	r2, [r3, #-4]
			lowlayer_writePulse(-pulse[0], pulse[1], -pulse[2], pulse[3]);
 800594c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8005950:	b2db      	uxtb	r3, r3
 8005952:	425b      	negs	r3, r3
 8005954:	b2db      	uxtb	r3, r3
 8005956:	b258      	sxtb	r0, r3
 8005958:	f997 1005 	ldrsb.w	r1, [r7, #5]
 800595c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005960:	b2db      	uxtb	r3, r3
 8005962:	425b      	negs	r3, r3
 8005964:	b2db      	uxtb	r3, r3
 8005966:	b25a      	sxtb	r2, r3
 8005968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800596c:	f000 fcd8 	bl	8006320 <lowlayer_writePulse>
 8005970:	e00b      	b.n	800598a <lowlayer_scanFlow+0x82>
		} else {
			state_scan++;
 8005972:	4b7f      	ldr	r3, [pc, #508]	; (8005b70 <lowlayer_scanFlow+0x268>)
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	3301      	adds	r3, #1
 8005978:	b2da      	uxtb	r2, r3
 800597a:	4b7d      	ldr	r3, [pc, #500]	; (8005b70 <lowlayer_scanFlow+0x268>)
 800597c:	701a      	strb	r2, [r3, #0]
			lowlayer_writePulse(0, 0, 0, 0);
 800597e:	2300      	movs	r3, #0
 8005980:	2200      	movs	r2, #0
 8005982:	2100      	movs	r1, #0
 8005984:	2000      	movs	r0, #0
 8005986:	f000 fccb 	bl	8006320 <lowlayer_writePulse>
		}

		return FALSE;
 800598a:	2300      	movs	r3, #0
 800598c:	e0d2      	b.n	8005b34 <lowlayer_scanFlow+0x22c>
	} else {
		HAL_GPIO_WritePin(CAPTURE_ENABLE_GPIO_Port, CAPTURE_ENABLE_Pin, GPIO_PIN_SET);
 800598e:	2201      	movs	r2, #1
 8005990:	2108      	movs	r1, #8
 8005992:	487a      	ldr	r0, [pc, #488]	; (8005b7c <lowlayer_scanFlow+0x274>)
 8005994:	f006 fb90 	bl	800c0b8 <HAL_GPIO_WritePin>
		lowlayer_updateCapture();
 8005998:	f000 fe28 	bl	80065ec <lowlayer_updateCapture>
		lowlayer_writePulse(0, 0, 0, 0);
 800599c:	2300      	movs	r3, #0
 800599e:	2200      	movs	r2, #0
 80059a0:	2100      	movs	r1, #0
 80059a2:	2000      	movs	r0, #0
 80059a4:	f000 fcbc 	bl	8006320 <lowlayer_writePulse>
		scan_flag = 1;
 80059a8:	4b75      	ldr	r3, [pc, #468]	; (8005b80 <lowlayer_scanFlow+0x278>)
 80059aa:	2201      	movs	r2, #1
 80059ac:	701a      	strb	r2, [r3, #0]
		// Update offset
		offset_encoder[0] 	= position_capture[0];
 80059ae:	4b75      	ldr	r3, [pc, #468]	; (8005b84 <lowlayer_scanFlow+0x27c>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a75      	ldr	r2, [pc, #468]	; (8005b88 <lowlayer_scanFlow+0x280>)
 80059b4:	6013      	str	r3, [r2, #0]
		offset_encoder[1] 	= position_capture[1];
 80059b6:	4b73      	ldr	r3, [pc, #460]	; (8005b84 <lowlayer_scanFlow+0x27c>)
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	4a73      	ldr	r2, [pc, #460]	; (8005b88 <lowlayer_scanFlow+0x280>)
 80059bc:	6053      	str	r3, [r2, #4]
		offset_encoder[2] 	= position_capture[2];
 80059be:	4b71      	ldr	r3, [pc, #452]	; (8005b84 <lowlayer_scanFlow+0x27c>)
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	4a71      	ldr	r2, [pc, #452]	; (8005b88 <lowlayer_scanFlow+0x280>)
 80059c4:	6093      	str	r3, [r2, #8]
		offset_stepper		= pulse_accumulate[3];
 80059c6:	4b71      	ldr	r3, [pc, #452]	; (8005b8c <lowlayer_scanFlow+0x284>)
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	4a71      	ldr	r2, [pc, #452]	; (8005b90 <lowlayer_scanFlow+0x288>)
 80059cc:	6013      	str	r3, [r2, #0]
		// LOG offset
		LOG_REPORT("offset encoder 0", offset_encoder[0]);
 80059ce:	4b6e      	ldr	r3, [pc, #440]	; (8005b88 <lowlayer_scanFlow+0x280>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	4619      	mov	r1, r3
 80059d6:	486f      	ldr	r0, [pc, #444]	; (8005b94 <lowlayer_scanFlow+0x28c>)
 80059d8:	f7fc fd24 	bl	8002424 <LOG_REPORT>
		LOG_REPORT("offset encoder 1", offset_encoder[1]);
 80059dc:	4b6a      	ldr	r3, [pc, #424]	; (8005b88 <lowlayer_scanFlow+0x280>)
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	4619      	mov	r1, r3
 80059e4:	486c      	ldr	r0, [pc, #432]	; (8005b98 <lowlayer_scanFlow+0x290>)
 80059e6:	f7fc fd1d 	bl	8002424 <LOG_REPORT>
		LOG_REPORT("offset encoder 2", offset_encoder[2]);
 80059ea:	4b67      	ldr	r3, [pc, #412]	; (8005b88 <lowlayer_scanFlow+0x280>)
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	4619      	mov	r1, r3
 80059f2:	486a      	ldr	r0, [pc, #424]	; (8005b9c <lowlayer_scanFlow+0x294>)
 80059f4:	f7fc fd16 	bl	8002424 <LOG_REPORT>
		LOG_REPORT("offset stepper", offset_stepper);
 80059f8:	4b65      	ldr	r3, [pc, #404]	; (8005b90 <lowlayer_scanFlow+0x288>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	4619      	mov	r1, r3
 8005a00:	4867      	ldr	r0, [pc, #412]	; (8005ba0 <lowlayer_scanFlow+0x298>)
 8005a02:	f7fc fd0f 	bl	8002424 <LOG_REPORT>

		offset_setpoint[0]	= HARD_LIM0_NEG
				- DIR_ENCODER_0*offset_encoder[0]*2.0*PI/ENCODER_J0;
 8005a06:	4b60      	ldr	r3, [pc, #384]	; (8005b88 <lowlayer_scanFlow+0x280>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	ee07 3a90 	vmov	s15, r3
 8005a0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a12:	ee17 0a90 	vmov	r0, s15
 8005a16:	f7fa fd97 	bl	8000548 <__aeabi_f2d>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	f7fa fc35 	bl	800028c <__adddf3>
 8005a22:	4602      	mov	r2, r0
 8005a24:	460b      	mov	r3, r1
 8005a26:	4610      	mov	r0, r2
 8005a28:	4619      	mov	r1, r3
 8005a2a:	a345      	add	r3, pc, #276	; (adr r3, 8005b40 <lowlayer_scanFlow+0x238>)
 8005a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a30:	f7fa fde2 	bl	80005f8 <__aeabi_dmul>
 8005a34:	4602      	mov	r2, r0
 8005a36:	460b      	mov	r3, r1
 8005a38:	4610      	mov	r0, r2
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	a342      	add	r3, pc, #264	; (adr r3, 8005b48 <lowlayer_scanFlow+0x240>)
 8005a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a42:	f7fa ff03 	bl	800084c <__aeabi_ddiv>
 8005a46:	4602      	mov	r2, r0
 8005a48:	460b      	mov	r3, r1
 8005a4a:	a141      	add	r1, pc, #260	; (adr r1, 8005b50 <lowlayer_scanFlow+0x248>)
 8005a4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a50:	f7fa fc1a 	bl	8000288 <__aeabi_dsub>
 8005a54:	4602      	mov	r2, r0
 8005a56:	460b      	mov	r3, r1
		offset_setpoint[0]	= HARD_LIM0_NEG
 8005a58:	4952      	ldr	r1, [pc, #328]	; (8005ba4 <lowlayer_scanFlow+0x29c>)
 8005a5a:	e9c1 2300 	strd	r2, r3, [r1]
		offset_setpoint[1]	= HARD_LIM1_POS
				- DIR_ENCODER_1*offset_encoder[1]*2.0*PI/ENCODER_J1;
 8005a5e:	4b4a      	ldr	r3, [pc, #296]	; (8005b88 <lowlayer_scanFlow+0x280>)
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	ee07 3a90 	vmov	s15, r3
 8005a66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a6a:	ee17 0a90 	vmov	r0, s15
 8005a6e:	f7fa fd6b 	bl	8000548 <__aeabi_f2d>
 8005a72:	4602      	mov	r2, r0
 8005a74:	460b      	mov	r3, r1
 8005a76:	f7fa fc09 	bl	800028c <__adddf3>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	460b      	mov	r3, r1
 8005a7e:	4610      	mov	r0, r2
 8005a80:	4619      	mov	r1, r3
 8005a82:	a32f      	add	r3, pc, #188	; (adr r3, 8005b40 <lowlayer_scanFlow+0x238>)
 8005a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a88:	f7fa fdb6 	bl	80005f8 <__aeabi_dmul>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	460b      	mov	r3, r1
 8005a90:	4610      	mov	r0, r2
 8005a92:	4619      	mov	r1, r3
 8005a94:	f04f 0200 	mov.w	r2, #0
 8005a98:	4b43      	ldr	r3, [pc, #268]	; (8005ba8 <lowlayer_scanFlow+0x2a0>)
 8005a9a:	f7fa fed7 	bl	800084c <__aeabi_ddiv>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	a12d      	add	r1, pc, #180	; (adr r1, 8005b58 <lowlayer_scanFlow+0x250>)
 8005aa4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005aa8:	f7fa fbee 	bl	8000288 <__aeabi_dsub>
 8005aac:	4602      	mov	r2, r0
 8005aae:	460b      	mov	r3, r1
		offset_setpoint[1]	= HARD_LIM1_POS
 8005ab0:	493c      	ldr	r1, [pc, #240]	; (8005ba4 <lowlayer_scanFlow+0x29c>)
 8005ab2:	e9c1 2302 	strd	r2, r3, [r1, #8]
		offset_setpoint[2]	= HARD_LIM2_NEG
				- DIR_ENCODER_2*offset_encoder[2]/ENCODER_J2;
 8005ab6:	4b34      	ldr	r3, [pc, #208]	; (8005b88 <lowlayer_scanFlow+0x280>)
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	ee07 3a90 	vmov	s15, r3
 8005abe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005ac2:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8005bac <lowlayer_scanFlow+0x2a4>
 8005ac6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005aca:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8005bb0 <lowlayer_scanFlow+0x2a8>
 8005ace:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005ad2:	ee17 0a90 	vmov	r0, s15
 8005ad6:	f7fa fd37 	bl	8000548 <__aeabi_f2d>
 8005ada:	4602      	mov	r2, r0
 8005adc:	460b      	mov	r3, r1
		offset_setpoint[2]	= HARD_LIM2_NEG
 8005ade:	4931      	ldr	r1, [pc, #196]	; (8005ba4 <lowlayer_scanFlow+0x29c>)
 8005ae0:	e9c1 2304 	strd	r2, r3, [r1, #16]
		offset_setpoint[3]  = HARD_LIM3_POS
				- offset_stepper*2.0*PI/GEAR_J3;
 8005ae4:	4b2a      	ldr	r3, [pc, #168]	; (8005b90 <lowlayer_scanFlow+0x288>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f7fa fd1b 	bl	8000524 <__aeabi_i2d>
 8005aee:	4602      	mov	r2, r0
 8005af0:	460b      	mov	r3, r1
 8005af2:	f7fa fbcb 	bl	800028c <__adddf3>
 8005af6:	4602      	mov	r2, r0
 8005af8:	460b      	mov	r3, r1
 8005afa:	4610      	mov	r0, r2
 8005afc:	4619      	mov	r1, r3
 8005afe:	a310      	add	r3, pc, #64	; (adr r3, 8005b40 <lowlayer_scanFlow+0x238>)
 8005b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b04:	f7fa fd78 	bl	80005f8 <__aeabi_dmul>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	460b      	mov	r3, r1
 8005b0c:	4610      	mov	r0, r2
 8005b0e:	4619      	mov	r1, r3
 8005b10:	a313      	add	r3, pc, #76	; (adr r3, 8005b60 <lowlayer_scanFlow+0x258>)
 8005b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b16:	f7fa fe99 	bl	800084c <__aeabi_ddiv>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	a112      	add	r1, pc, #72	; (adr r1, 8005b68 <lowlayer_scanFlow+0x260>)
 8005b20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b24:	f7fa fbb0 	bl	8000288 <__aeabi_dsub>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	460b      	mov	r3, r1
		offset_setpoint[3]  = HARD_LIM3_POS
 8005b2c:	491d      	ldr	r1, [pc, #116]	; (8005ba4 <lowlayer_scanFlow+0x29c>)
 8005b2e:	e9c1 2306 	strd	r2, r3, [r1, #24]

		return TRUE;
 8005b32:	2301      	movs	r3, #1
	}
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3708      	adds	r7, #8
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	f3af 8000 	nop.w
 8005b40:	60000000 	.word	0x60000000
 8005b44:	400921fb 	.word	0x400921fb
 8005b48:	00000000 	.word	0x00000000
 8005b4c:	40f38800 	.word	0x40f38800
 8005b50:	40000000 	.word	0x40000000
 8005b54:	bff9f17a 	.word	0xbff9f17a
 8005b58:	80000000 	.word	0x80000000
 8005b5c:	40039716 	.word	0x40039716
 8005b60:	a0000000 	.word	0xa0000000
 8005b64:	40d3bca1 	.word	0x40d3bca1
 8005b68:	a0000000 	.word	0xa0000000
 8005b6c:	4008330d 	.word	0x4008330d
 8005b70:	2000dec0 	.word	0x2000dec0
 8005b74:	2000deb0 	.word	0x2000deb0
 8005b78:	0801c264 	.word	0x0801c264
 8005b7c:	40020c00 	.word	0x40020c00
 8005b80:	2000dea0 	.word	0x2000dea0
 8005b84:	2000deb4 	.word	0x2000deb4
 8005b88:	2000dee8 	.word	0x2000dee8
 8005b8c:	2000de90 	.word	0x2000de90
 8005b90:	2000dec4 	.word	0x2000dec4
 8005b94:	0801c18c 	.word	0x0801c18c
 8005b98:	0801c1a0 	.word	0x0801c1a0
 8005b9c:	0801c1b4 	.word	0x0801c1b4
 8005ba0:	0801c1c8 	.word	0x0801c1c8
 8005ba4:	2000dec8 	.word	0x2000dec8
 8005ba8:	40ff4000 	.word	0x40ff4000
 8005bac:	4426aaab 	.word	0x4426aaab
 8005bb0:	400f1aa0 	.word	0x400f1aa0
 8005bb4:	00000000 	.word	0x00000000

08005bb8 <lowlayer_goToSoftLimit>:

uint8_t	lowlayer_goToSoftLimit(SCARA_PositionTypeDef *setpoint) {
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
	int8_t pulse[4] = {0, 0, 0 ,0};
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	60bb      	str	r3, [r7, #8]
	uint8_t check = 0;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	73fb      	strb	r3, [r7, #15]
	lowlayer_readSetPosition(setpoint);
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f000 f94d 	bl	8005e68 <lowlayer_readSetPosition>
	if (setpoint->Theta1 < LIM_MIN_J0) {
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8005bd4:	a330      	add	r3, pc, #192	; (adr r3, 8005c98 <lowlayer_goToSoftLimit+0xe0>)
 8005bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bda:	f7fa ff7f 	bl	8000adc <__aeabi_dcmplt>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d004      	beq.n	8005bee <lowlayer_goToSoftLimit+0x36>
		pulse[0] = pulse_scan[0];
 8005be4:	2303      	movs	r3, #3
 8005be6:	723b      	strb	r3, [r7, #8]
		check++;
 8005be8:	7bfb      	ldrb	r3, [r7, #15]
 8005bea:	3301      	adds	r3, #1
 8005bec:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->Theta2 > LIM_MAX_J1) {
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8005bf4:	a32a      	add	r3, pc, #168	; (adr r3, 8005ca0 <lowlayer_goToSoftLimit+0xe8>)
 8005bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bfa:	f7fa ff8d 	bl	8000b18 <__aeabi_dcmpgt>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d004      	beq.n	8005c0e <lowlayer_goToSoftLimit+0x56>
		pulse[1] = pulse_scan[1];
 8005c04:	2305      	movs	r3, #5
 8005c06:	727b      	strb	r3, [r7, #9]
		check++;
 8005c08:	7bfb      	ldrb	r3, [r7, #15]
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->D3 < LIM_MIN_J2) {
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8005c14:	f04f 0200 	mov.w	r2, #0
 8005c18:	f04f 0300 	mov.w	r3, #0
 8005c1c:	f7fa ff5e 	bl	8000adc <__aeabi_dcmplt>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d004      	beq.n	8005c30 <lowlayer_goToSoftLimit+0x78>
		pulse[2] = pulse_scan[2];
 8005c26:	2305      	movs	r3, #5
 8005c28:	72bb      	strb	r3, [r7, #10]
		check++;
 8005c2a:	7bfb      	ldrb	r3, [r7, #15]
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->Theta4 > LIM_MAX_J3) {
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 8005c36:	a31c      	add	r3, pc, #112	; (adr r3, 8005ca8 <lowlayer_goToSoftLimit+0xf0>)
 8005c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c3c:	f7fa ff6c 	bl	8000b18 <__aeabi_dcmpgt>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d004      	beq.n	8005c50 <lowlayer_goToSoftLimit+0x98>
		pulse[3] = pulse_scan[3];
 8005c46:	230a      	movs	r3, #10
 8005c48:	72fb      	strb	r3, [r7, #11]
		check++;
 8005c4a:	7bfb      	ldrb	r3, [r7, #15]
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	73fb      	strb	r3, [r7, #15]
	}

	if (check > 0) {
 8005c50:	7bfb      	ldrb	r3, [r7, #15]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d013      	beq.n	8005c7e <lowlayer_goToSoftLimit+0xc6>
		lowlayer_writePulse(pulse[0], -pulse[1], pulse[2], -pulse[3]);
 8005c56:	f997 0008 	ldrsb.w	r0, [r7, #8]
 8005c5a:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	425b      	negs	r3, r3
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	b259      	sxtb	r1, r3
 8005c66:	f997 200a 	ldrsb.w	r2, [r7, #10]
 8005c6a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	425b      	negs	r3, r3
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	b25b      	sxtb	r3, r3
 8005c76:	f000 fb53 	bl	8006320 <lowlayer_writePulse>
		return FALSE;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	e006      	b.n	8005c8c <lowlayer_goToSoftLimit+0xd4>
	} else {
		lowlayer_writePulse(0, 0, 0, 0);
 8005c7e:	2300      	movs	r3, #0
 8005c80:	2200      	movs	r2, #0
 8005c82:	2100      	movs	r1, #0
 8005c84:	2000      	movs	r0, #0
 8005c86:	f000 fb4b 	bl	8006320 <lowlayer_writePulse>
		return TRUE;
 8005c8a:	2301      	movs	r3, #1
	}
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3710      	adds	r7, #16
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	f3af 8000 	nop.w
 8005c98:	daaaaaab 	.word	0xdaaaaaab
 8005c9c:	bff7bc89 	.word	0xbff7bc89
 8005ca0:	88000000 	.word	0x88000000
 8005ca4:	4002d97c 	.word	0x4002d97c
 8005ca8:	daaaaaab 	.word	0xdaaaaaab
 8005cac:	4007bc89 	.word	0x4007bc89

08005cb0 <lowlayer_readTruePosition>:

void	lowlayer_readTruePosition(SCARA_PositionTypeDef *true) {
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
	lowlayer_updateEncoder();
 8005cb8:	f000 fc7c 	bl	80065b4 <lowlayer_updateEncoder>
	true->Theta1 = HARD_LIM0_NEG
			+ DIR_ENCODER_0*(position_encoder[0] - offset_encoder[0])*2.0*PI/ENCODER_J0; // Servo Motor
 8005cbc:	4b62      	ldr	r3, [pc, #392]	; (8005e48 <lowlayer_readTruePosition+0x198>)
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	4b62      	ldr	r3, [pc, #392]	; (8005e4c <lowlayer_readTruePosition+0x19c>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	ee07 3a90 	vmov	s15, r3
 8005cca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005cce:	ee17 0a90 	vmov	r0, s15
 8005cd2:	f7fa fc39 	bl	8000548 <__aeabi_f2d>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	460b      	mov	r3, r1
 8005cda:	f7fa fad7 	bl	800028c <__adddf3>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	4610      	mov	r0, r2
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	a34c      	add	r3, pc, #304	; (adr r3, 8005e18 <lowlayer_readTruePosition+0x168>)
 8005ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cec:	f7fa fc84 	bl	80005f8 <__aeabi_dmul>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	460b      	mov	r3, r1
 8005cf4:	4610      	mov	r0, r2
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	a349      	add	r3, pc, #292	; (adr r3, 8005e20 <lowlayer_readTruePosition+0x170>)
 8005cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cfe:	f7fa fda5 	bl	800084c <__aeabi_ddiv>
 8005d02:	4602      	mov	r2, r0
 8005d04:	460b      	mov	r3, r1
 8005d06:	4610      	mov	r0, r2
 8005d08:	4619      	mov	r1, r3
 8005d0a:	a347      	add	r3, pc, #284	; (adr r3, 8005e28 <lowlayer_readTruePosition+0x178>)
 8005d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d10:	f7fa faba 	bl	8000288 <__aeabi_dsub>
 8005d14:	4602      	mov	r2, r0
 8005d16:	460b      	mov	r3, r1
	true->Theta1 = HARD_LIM0_NEG
 8005d18:	6879      	ldr	r1, [r7, #4]
 8005d1a:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

	true->Theta2 = HARD_LIM1_POS
			+ DIR_ENCODER_1*(position_encoder[1] - offset_encoder[1])*2.0*PI/ENCODER_J1; // Servo Motor
 8005d1e:	4b4a      	ldr	r3, [pc, #296]	; (8005e48 <lowlayer_readTruePosition+0x198>)
 8005d20:	685a      	ldr	r2, [r3, #4]
 8005d22:	4b4a      	ldr	r3, [pc, #296]	; (8005e4c <lowlayer_readTruePosition+0x19c>)
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	ee07 3a90 	vmov	s15, r3
 8005d2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d30:	ee17 0a90 	vmov	r0, s15
 8005d34:	f7fa fc08 	bl	8000548 <__aeabi_f2d>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	460b      	mov	r3, r1
 8005d3c:	f7fa faa6 	bl	800028c <__adddf3>
 8005d40:	4602      	mov	r2, r0
 8005d42:	460b      	mov	r3, r1
 8005d44:	4610      	mov	r0, r2
 8005d46:	4619      	mov	r1, r3
 8005d48:	a333      	add	r3, pc, #204	; (adr r3, 8005e18 <lowlayer_readTruePosition+0x168>)
 8005d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d4e:	f7fa fc53 	bl	80005f8 <__aeabi_dmul>
 8005d52:	4602      	mov	r2, r0
 8005d54:	460b      	mov	r3, r1
 8005d56:	4610      	mov	r0, r2
 8005d58:	4619      	mov	r1, r3
 8005d5a:	f04f 0200 	mov.w	r2, #0
 8005d5e:	4b3c      	ldr	r3, [pc, #240]	; (8005e50 <lowlayer_readTruePosition+0x1a0>)
 8005d60:	f7fa fd74 	bl	800084c <__aeabi_ddiv>
 8005d64:	4602      	mov	r2, r0
 8005d66:	460b      	mov	r3, r1
 8005d68:	4610      	mov	r0, r2
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	a330      	add	r3, pc, #192	; (adr r3, 8005e30 <lowlayer_readTruePosition+0x180>)
 8005d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d72:	f7fa fa8b 	bl	800028c <__adddf3>
 8005d76:	4602      	mov	r2, r0
 8005d78:	460b      	mov	r3, r1
	true->Theta2 = HARD_LIM1_POS
 8005d7a:	6879      	ldr	r1, [r7, #4]
 8005d7c:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

	true->D3	 = HARD_LIM2_NEG
			+ DIR_ENCODER_2*(position_encoder[2] - offset_encoder[2])/ENCODER_J2; // Servo Motor
 8005d80:	4b31      	ldr	r3, [pc, #196]	; (8005e48 <lowlayer_readTruePosition+0x198>)
 8005d82:	689a      	ldr	r2, [r3, #8]
 8005d84:	4b31      	ldr	r3, [pc, #196]	; (8005e4c <lowlayer_readTruePosition+0x19c>)
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	1ad3      	subs	r3, r2, r3
 8005d8a:	ee07 3a90 	vmov	s15, r3
 8005d8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d92:	eeb1 7a67 	vneg.f32	s14, s15
 8005d96:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8005e54 <lowlayer_readTruePosition+0x1a4>
 8005d9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005d9e:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8005e58 <lowlayer_readTruePosition+0x1a8>
 8005da2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005da6:	ee17 0a90 	vmov	r0, s15
 8005daa:	f7fa fbcd 	bl	8000548 <__aeabi_f2d>
 8005dae:	4602      	mov	r2, r0
 8005db0:	460b      	mov	r3, r1
	true->D3	 = HARD_LIM2_NEG
 8005db2:	6879      	ldr	r1, [r7, #4]
 8005db4:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78

	true->Theta4 = HARD_LIM3_POS
			+ (pulse_accumulate[3] - offset_stepper)*2.0*PI/GEAR_J3; // Stepper Motor
 8005db8:	4b28      	ldr	r3, [pc, #160]	; (8005e5c <lowlayer_readTruePosition+0x1ac>)
 8005dba:	68da      	ldr	r2, [r3, #12]
 8005dbc:	4b28      	ldr	r3, [pc, #160]	; (8005e60 <lowlayer_readTruePosition+0x1b0>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	1ad3      	subs	r3, r2, r3
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f7fa fbae 	bl	8000524 <__aeabi_i2d>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	460b      	mov	r3, r1
 8005dcc:	f7fa fa5e 	bl	800028c <__adddf3>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	4610      	mov	r0, r2
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	a30f      	add	r3, pc, #60	; (adr r3, 8005e18 <lowlayer_readTruePosition+0x168>)
 8005dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dde:	f7fa fc0b 	bl	80005f8 <__aeabi_dmul>
 8005de2:	4602      	mov	r2, r0
 8005de4:	460b      	mov	r3, r1
 8005de6:	4610      	mov	r0, r2
 8005de8:	4619      	mov	r1, r3
 8005dea:	a313      	add	r3, pc, #76	; (adr r3, 8005e38 <lowlayer_readTruePosition+0x188>)
 8005dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df0:	f7fa fd2c 	bl	800084c <__aeabi_ddiv>
 8005df4:	4602      	mov	r2, r0
 8005df6:	460b      	mov	r3, r1
 8005df8:	4610      	mov	r0, r2
 8005dfa:	4619      	mov	r1, r3
 8005dfc:	a310      	add	r3, pc, #64	; (adr r3, 8005e40 <lowlayer_readTruePosition+0x190>)
 8005dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e02:	f7fa fa43 	bl	800028c <__adddf3>
 8005e06:	4602      	mov	r2, r0
 8005e08:	460b      	mov	r3, r1
	true->Theta4 = HARD_LIM3_POS
 8005e0a:	6879      	ldr	r1, [r7, #4]
 8005e0c:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
}
 8005e10:	bf00      	nop
 8005e12:	3708      	adds	r7, #8
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	60000000 	.word	0x60000000
 8005e1c:	400921fb 	.word	0x400921fb
 8005e20:	00000000 	.word	0x00000000
 8005e24:	40f38800 	.word	0x40f38800
 8005e28:	40000000 	.word	0x40000000
 8005e2c:	3ff9f17a 	.word	0x3ff9f17a
 8005e30:	80000000 	.word	0x80000000
 8005e34:	40039716 	.word	0x40039716
 8005e38:	a0000000 	.word	0xa0000000
 8005e3c:	40d3bca1 	.word	0x40d3bca1
 8005e40:	a0000000 	.word	0xa0000000
 8005e44:	4008330d 	.word	0x4008330d
 8005e48:	2000dea4 	.word	0x2000dea4
 8005e4c:	2000dee8 	.word	0x2000dee8
 8005e50:	40ff4000 	.word	0x40ff4000
 8005e54:	4426aaab 	.word	0x4426aaab
 8005e58:	400f1aa0 	.word	0x400f1aa0
 8005e5c:	2000de90 	.word	0x2000de90
 8005e60:	2000dec4 	.word	0x2000dec4
 8005e64:	00000000 	.word	0x00000000

08005e68 <lowlayer_readSetPosition>:

void	lowlayer_readSetPosition(SCARA_PositionTypeDef *setpoint) {
 8005e68:	b5b0      	push	{r4, r5, r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
	setpoint->Theta1 = offset_setpoint[0] + pulse_accumulate[0]*2.0*PI/GEAR_J0;
 8005e70:	4b53      	ldr	r3, [pc, #332]	; (8005fc0 <lowlayer_readSetPosition+0x158>)
 8005e72:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005e76:	4b53      	ldr	r3, [pc, #332]	; (8005fc4 <lowlayer_readSetPosition+0x15c>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f7fa fb52 	bl	8000524 <__aeabi_i2d>
 8005e80:	4602      	mov	r2, r0
 8005e82:	460b      	mov	r3, r1
 8005e84:	f7fa fa02 	bl	800028c <__adddf3>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	4610      	mov	r0, r2
 8005e8e:	4619      	mov	r1, r3
 8005e90:	a345      	add	r3, pc, #276	; (adr r3, 8005fa8 <lowlayer_readSetPosition+0x140>)
 8005e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e96:	f7fa fbaf 	bl	80005f8 <__aeabi_dmul>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	4610      	mov	r0, r2
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	a343      	add	r3, pc, #268	; (adr r3, 8005fb0 <lowlayer_readSetPosition+0x148>)
 8005ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea8:	f7fa fcd0 	bl	800084c <__aeabi_ddiv>
 8005eac:	4602      	mov	r2, r0
 8005eae:	460b      	mov	r3, r1
 8005eb0:	4620      	mov	r0, r4
 8005eb2:	4629      	mov	r1, r5
 8005eb4:	f7fa f9ea 	bl	800028c <__adddf3>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	460b      	mov	r3, r1
 8005ebc:	6879      	ldr	r1, [r7, #4]
 8005ebe:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

	setpoint->Theta2 = offset_setpoint[1] + pulse_accumulate[1]*2.0*PI/GEAR_J1;
 8005ec2:	4b3f      	ldr	r3, [pc, #252]	; (8005fc0 <lowlayer_readSetPosition+0x158>)
 8005ec4:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8005ec8:	4b3e      	ldr	r3, [pc, #248]	; (8005fc4 <lowlayer_readSetPosition+0x15c>)
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f7fa fb29 	bl	8000524 <__aeabi_i2d>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	f7fa f9d9 	bl	800028c <__adddf3>
 8005eda:	4602      	mov	r2, r0
 8005edc:	460b      	mov	r3, r1
 8005ede:	4610      	mov	r0, r2
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	a331      	add	r3, pc, #196	; (adr r3, 8005fa8 <lowlayer_readSetPosition+0x140>)
 8005ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee8:	f7fa fb86 	bl	80005f8 <__aeabi_dmul>
 8005eec:	4602      	mov	r2, r0
 8005eee:	460b      	mov	r3, r1
 8005ef0:	4610      	mov	r0, r2
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	f04f 0200 	mov.w	r2, #0
 8005ef8:	4b33      	ldr	r3, [pc, #204]	; (8005fc8 <lowlayer_readSetPosition+0x160>)
 8005efa:	f7fa fca7 	bl	800084c <__aeabi_ddiv>
 8005efe:	4602      	mov	r2, r0
 8005f00:	460b      	mov	r3, r1
 8005f02:	4620      	mov	r0, r4
 8005f04:	4629      	mov	r1, r5
 8005f06:	f7fa f9c1 	bl	800028c <__adddf3>
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	6879      	ldr	r1, [r7, #4]
 8005f10:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

	setpoint->D3	 = offset_setpoint[2] + pulse_accumulate[2]/GEAR_J2;
 8005f14:	4b2a      	ldr	r3, [pc, #168]	; (8005fc0 <lowlayer_readSetPosition+0x158>)
 8005f16:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8005f1a:	4b2a      	ldr	r3, [pc, #168]	; (8005fc4 <lowlayer_readSetPosition+0x15c>)
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	ee07 3a90 	vmov	s15, r3
 8005f22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f26:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8005fcc <lowlayer_readSetPosition+0x164>
 8005f2a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005f2e:	ee16 0a90 	vmov	r0, s13
 8005f32:	f7fa fb09 	bl	8000548 <__aeabi_f2d>
 8005f36:	4602      	mov	r2, r0
 8005f38:	460b      	mov	r3, r1
 8005f3a:	4620      	mov	r0, r4
 8005f3c:	4629      	mov	r1, r5
 8005f3e:	f7fa f9a5 	bl	800028c <__adddf3>
 8005f42:	4602      	mov	r2, r0
 8005f44:	460b      	mov	r3, r1
 8005f46:	6879      	ldr	r1, [r7, #4]
 8005f48:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78

	setpoint->Theta4 = offset_setpoint[3] + pulse_accumulate[3]*2.0*PI/GEAR_J3;
 8005f4c:	4b1c      	ldr	r3, [pc, #112]	; (8005fc0 <lowlayer_readSetPosition+0x158>)
 8005f4e:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8005f52:	4b1c      	ldr	r3, [pc, #112]	; (8005fc4 <lowlayer_readSetPosition+0x15c>)
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	4618      	mov	r0, r3
 8005f58:	f7fa fae4 	bl	8000524 <__aeabi_i2d>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	460b      	mov	r3, r1
 8005f60:	f7fa f994 	bl	800028c <__adddf3>
 8005f64:	4602      	mov	r2, r0
 8005f66:	460b      	mov	r3, r1
 8005f68:	4610      	mov	r0, r2
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	a30e      	add	r3, pc, #56	; (adr r3, 8005fa8 <lowlayer_readSetPosition+0x140>)
 8005f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f72:	f7fa fb41 	bl	80005f8 <__aeabi_dmul>
 8005f76:	4602      	mov	r2, r0
 8005f78:	460b      	mov	r3, r1
 8005f7a:	4610      	mov	r0, r2
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	a30e      	add	r3, pc, #56	; (adr r3, 8005fb8 <lowlayer_readSetPosition+0x150>)
 8005f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f84:	f7fa fc62 	bl	800084c <__aeabi_ddiv>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	4620      	mov	r0, r4
 8005f8e:	4629      	mov	r1, r5
 8005f90:	f7fa f97c 	bl	800028c <__adddf3>
 8005f94:	4602      	mov	r2, r0
 8005f96:	460b      	mov	r3, r1
 8005f98:	6879      	ldr	r1, [r7, #4]
 8005f9a:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
}
 8005f9e:	bf00      	nop
 8005fa0:	3708      	adds	r7, #8
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bdb0      	pop	{r4, r5, r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	60000000 	.word	0x60000000
 8005fac:	400921fb 	.word	0x400921fb
 8005fb0:	00000000 	.word	0x00000000
 8005fb4:	40d38800 	.word	0x40d38800
 8005fb8:	a0000000 	.word	0xa0000000
 8005fbc:	40d3bca1 	.word	0x40d3bca1
 8005fc0:	2000dec8 	.word	0x2000dec8
 8005fc4:	2000de90 	.word	0x2000de90
 8005fc8:	40df4000 	.word	0x40df4000
 8005fcc:	42c80000 	.word	0x42c80000

08005fd0 <lowlayer_computeAndWritePulse>:

uint8_t	lowlayer_computeAndWritePulse(SCARA_PositionTypeDef current, SCARA_PositionTypeDef next) {
 8005fd0:	b084      	sub	sp, #16
 8005fd2:	b580      	push	{r7, lr}
 8005fd4:	b092      	sub	sp, #72	; 0x48
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	f107 0c50 	add.w	ip, r7, #80	; 0x50
 8005fdc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t	current_var0, current_var1, current_var2, current_var3;
	uint32_t	next_var0, next_var1, next_var2, next_var3;
	int64_t		delta_var0, delta_var1, delta_var2, delta_var3;
	uint8_t 	result;

	current_var0	= round((current.Theta1 - LIM_MIN_J0) * GEAR_J0/(2*PI));
 8005fe0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8005fe4:	a3c6      	add	r3, pc, #792	; (adr r3, 8006300 <lowlayer_computeAndWritePulse+0x330>)
 8005fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fea:	f7fa f94f 	bl	800028c <__adddf3>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	4610      	mov	r0, r2
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	a3c4      	add	r3, pc, #784	; (adr r3, 8006308 <lowlayer_computeAndWritePulse+0x338>)
 8005ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ffc:	f7fa fafc 	bl	80005f8 <__aeabi_dmul>
 8006000:	4602      	mov	r2, r0
 8006002:	460b      	mov	r3, r1
 8006004:	4610      	mov	r0, r2
 8006006:	4619      	mov	r1, r3
 8006008:	a3b7      	add	r3, pc, #732	; (adr r3, 80062e8 <lowlayer_computeAndWritePulse+0x318>)
 800600a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800600e:	f7fa fc1d 	bl	800084c <__aeabi_ddiv>
 8006012:	4602      	mov	r2, r0
 8006014:	460b      	mov	r3, r1
 8006016:	ec43 2b17 	vmov	d7, r2, r3
 800601a:	eeb0 0a47 	vmov.f32	s0, s14
 800601e:	eef0 0a67 	vmov.f32	s1, s15
 8006022:	f014 fb95 	bl	801a750 <round>
 8006026:	ec53 2b10 	vmov	r2, r3, d0
 800602a:	4610      	mov	r0, r2
 800602c:	4619      	mov	r1, r3
 800602e:	f7fa fdbb 	bl	8000ba8 <__aeabi_d2uiz>
 8006032:	4603      	mov	r3, r0
 8006034:	647b      	str	r3, [r7, #68]	; 0x44
	current_var1 	= round((current.Theta2 - LIM_MIN_J1) * GEAR_J1/(2*PI));
 8006036:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800603a:	a3b5      	add	r3, pc, #724	; (adr r3, 8006310 <lowlayer_computeAndWritePulse+0x340>)
 800603c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006040:	f7fa f924 	bl	800028c <__adddf3>
 8006044:	4602      	mov	r2, r0
 8006046:	460b      	mov	r3, r1
 8006048:	4610      	mov	r0, r2
 800604a:	4619      	mov	r1, r3
 800604c:	f04f 0200 	mov.w	r2, #0
 8006050:	4bb1      	ldr	r3, [pc, #708]	; (8006318 <lowlayer_computeAndWritePulse+0x348>)
 8006052:	f7fa fad1 	bl	80005f8 <__aeabi_dmul>
 8006056:	4602      	mov	r2, r0
 8006058:	460b      	mov	r3, r1
 800605a:	4610      	mov	r0, r2
 800605c:	4619      	mov	r1, r3
 800605e:	a3a2      	add	r3, pc, #648	; (adr r3, 80062e8 <lowlayer_computeAndWritePulse+0x318>)
 8006060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006064:	f7fa fbf2 	bl	800084c <__aeabi_ddiv>
 8006068:	4602      	mov	r2, r0
 800606a:	460b      	mov	r3, r1
 800606c:	ec43 2b17 	vmov	d7, r2, r3
 8006070:	eeb0 0a47 	vmov.f32	s0, s14
 8006074:	eef0 0a67 	vmov.f32	s1, s15
 8006078:	f014 fb6a 	bl	801a750 <round>
 800607c:	ec53 2b10 	vmov	r2, r3, d0
 8006080:	4610      	mov	r0, r2
 8006082:	4619      	mov	r1, r3
 8006084:	f7fa fd90 	bl	8000ba8 <__aeabi_d2uiz>
 8006088:	4603      	mov	r3, r0
 800608a:	643b      	str	r3, [r7, #64]	; 0x40
	current_var2 	= round((current.D3 - LIM_MIN_J2) * GEAR_J2);
 800608c:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006090:	f04f 0200 	mov.w	r2, #0
 8006094:	4ba1      	ldr	r3, [pc, #644]	; (800631c <lowlayer_computeAndWritePulse+0x34c>)
 8006096:	f7fa faaf 	bl	80005f8 <__aeabi_dmul>
 800609a:	4602      	mov	r2, r0
 800609c:	460b      	mov	r3, r1
 800609e:	ec43 2b17 	vmov	d7, r2, r3
 80060a2:	eeb0 0a47 	vmov.f32	s0, s14
 80060a6:	eef0 0a67 	vmov.f32	s1, s15
 80060aa:	f014 fb51 	bl	801a750 <round>
 80060ae:	ec53 2b10 	vmov	r2, r3, d0
 80060b2:	4610      	mov	r0, r2
 80060b4:	4619      	mov	r1, r3
 80060b6:	f7fa fd77 	bl	8000ba8 <__aeabi_d2uiz>
 80060ba:	4603      	mov	r3, r0
 80060bc:	63fb      	str	r3, [r7, #60]	; 0x3c
	current_var3 	= round((current.Theta4 - LIM_MIN_J3) * GEAR_J3/(2*PI));
 80060be:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80060c2:	a38b      	add	r3, pc, #556	; (adr r3, 80062f0 <lowlayer_computeAndWritePulse+0x320>)
 80060c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c8:	f7fa f8e0 	bl	800028c <__adddf3>
 80060cc:	4602      	mov	r2, r0
 80060ce:	460b      	mov	r3, r1
 80060d0:	4610      	mov	r0, r2
 80060d2:	4619      	mov	r1, r3
 80060d4:	a388      	add	r3, pc, #544	; (adr r3, 80062f8 <lowlayer_computeAndWritePulse+0x328>)
 80060d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060da:	f7fa fa8d 	bl	80005f8 <__aeabi_dmul>
 80060de:	4602      	mov	r2, r0
 80060e0:	460b      	mov	r3, r1
 80060e2:	4610      	mov	r0, r2
 80060e4:	4619      	mov	r1, r3
 80060e6:	a380      	add	r3, pc, #512	; (adr r3, 80062e8 <lowlayer_computeAndWritePulse+0x318>)
 80060e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ec:	f7fa fbae 	bl	800084c <__aeabi_ddiv>
 80060f0:	4602      	mov	r2, r0
 80060f2:	460b      	mov	r3, r1
 80060f4:	ec43 2b17 	vmov	d7, r2, r3
 80060f8:	eeb0 0a47 	vmov.f32	s0, s14
 80060fc:	eef0 0a67 	vmov.f32	s1, s15
 8006100:	f014 fb26 	bl	801a750 <round>
 8006104:	ec53 2b10 	vmov	r2, r3, d0
 8006108:	4610      	mov	r0, r2
 800610a:	4619      	mov	r1, r3
 800610c:	f7fa fd4c 	bl	8000ba8 <__aeabi_d2uiz>
 8006110:	4603      	mov	r3, r0
 8006112:	63bb      	str	r3, [r7, #56]	; 0x38
	next_var0 		= round((next.Theta1 - LIM_MIN_J0) * GEAR_J0/(2*PI));
 8006114:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8006118:	a379      	add	r3, pc, #484	; (adr r3, 8006300 <lowlayer_computeAndWritePulse+0x330>)
 800611a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800611e:	f7fa f8b5 	bl	800028c <__adddf3>
 8006122:	4602      	mov	r2, r0
 8006124:	460b      	mov	r3, r1
 8006126:	4610      	mov	r0, r2
 8006128:	4619      	mov	r1, r3
 800612a:	a377      	add	r3, pc, #476	; (adr r3, 8006308 <lowlayer_computeAndWritePulse+0x338>)
 800612c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006130:	f7fa fa62 	bl	80005f8 <__aeabi_dmul>
 8006134:	4602      	mov	r2, r0
 8006136:	460b      	mov	r3, r1
 8006138:	4610      	mov	r0, r2
 800613a:	4619      	mov	r1, r3
 800613c:	a36a      	add	r3, pc, #424	; (adr r3, 80062e8 <lowlayer_computeAndWritePulse+0x318>)
 800613e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006142:	f7fa fb83 	bl	800084c <__aeabi_ddiv>
 8006146:	4602      	mov	r2, r0
 8006148:	460b      	mov	r3, r1
 800614a:	ec43 2b17 	vmov	d7, r2, r3
 800614e:	eeb0 0a47 	vmov.f32	s0, s14
 8006152:	eef0 0a67 	vmov.f32	s1, s15
 8006156:	f014 fafb 	bl	801a750 <round>
 800615a:	ec53 2b10 	vmov	r2, r3, d0
 800615e:	4610      	mov	r0, r2
 8006160:	4619      	mov	r1, r3
 8006162:	f7fa fd21 	bl	8000ba8 <__aeabi_d2uiz>
 8006166:	4603      	mov	r3, r0
 8006168:	637b      	str	r3, [r7, #52]	; 0x34
	next_var1 		= round((next.Theta2 - LIM_MIN_J1) * GEAR_J1/(2*PI));
 800616a:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 800616e:	a368      	add	r3, pc, #416	; (adr r3, 8006310 <lowlayer_computeAndWritePulse+0x340>)
 8006170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006174:	f7fa f88a 	bl	800028c <__adddf3>
 8006178:	4602      	mov	r2, r0
 800617a:	460b      	mov	r3, r1
 800617c:	4610      	mov	r0, r2
 800617e:	4619      	mov	r1, r3
 8006180:	f04f 0200 	mov.w	r2, #0
 8006184:	4b64      	ldr	r3, [pc, #400]	; (8006318 <lowlayer_computeAndWritePulse+0x348>)
 8006186:	f7fa fa37 	bl	80005f8 <__aeabi_dmul>
 800618a:	4602      	mov	r2, r0
 800618c:	460b      	mov	r3, r1
 800618e:	4610      	mov	r0, r2
 8006190:	4619      	mov	r1, r3
 8006192:	a355      	add	r3, pc, #340	; (adr r3, 80062e8 <lowlayer_computeAndWritePulse+0x318>)
 8006194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006198:	f7fa fb58 	bl	800084c <__aeabi_ddiv>
 800619c:	4602      	mov	r2, r0
 800619e:	460b      	mov	r3, r1
 80061a0:	ec43 2b17 	vmov	d7, r2, r3
 80061a4:	eeb0 0a47 	vmov.f32	s0, s14
 80061a8:	eef0 0a67 	vmov.f32	s1, s15
 80061ac:	f014 fad0 	bl	801a750 <round>
 80061b0:	ec53 2b10 	vmov	r2, r3, d0
 80061b4:	4610      	mov	r0, r2
 80061b6:	4619      	mov	r1, r3
 80061b8:	f7fa fcf6 	bl	8000ba8 <__aeabi_d2uiz>
 80061bc:	4603      	mov	r3, r0
 80061be:	633b      	str	r3, [r7, #48]	; 0x30
	next_var2 		= round((next.D3 - LIM_MIN_J2) * GEAR_J2);
 80061c0:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80061c4:	f04f 0200 	mov.w	r2, #0
 80061c8:	4b54      	ldr	r3, [pc, #336]	; (800631c <lowlayer_computeAndWritePulse+0x34c>)
 80061ca:	f7fa fa15 	bl	80005f8 <__aeabi_dmul>
 80061ce:	4602      	mov	r2, r0
 80061d0:	460b      	mov	r3, r1
 80061d2:	ec43 2b17 	vmov	d7, r2, r3
 80061d6:	eeb0 0a47 	vmov.f32	s0, s14
 80061da:	eef0 0a67 	vmov.f32	s1, s15
 80061de:	f014 fab7 	bl	801a750 <round>
 80061e2:	ec53 2b10 	vmov	r2, r3, d0
 80061e6:	4610      	mov	r0, r2
 80061e8:	4619      	mov	r1, r3
 80061ea:	f7fa fcdd 	bl	8000ba8 <__aeabi_d2uiz>
 80061ee:	4603      	mov	r3, r0
 80061f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	next_var3 		= round((next.Theta4 - LIM_MIN_J3) * GEAR_J3/(2*PI));
 80061f2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80061f6:	a33e      	add	r3, pc, #248	; (adr r3, 80062f0 <lowlayer_computeAndWritePulse+0x320>)
 80061f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061fc:	f7fa f846 	bl	800028c <__adddf3>
 8006200:	4602      	mov	r2, r0
 8006202:	460b      	mov	r3, r1
 8006204:	4610      	mov	r0, r2
 8006206:	4619      	mov	r1, r3
 8006208:	a33b      	add	r3, pc, #236	; (adr r3, 80062f8 <lowlayer_computeAndWritePulse+0x328>)
 800620a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800620e:	f7fa f9f3 	bl	80005f8 <__aeabi_dmul>
 8006212:	4602      	mov	r2, r0
 8006214:	460b      	mov	r3, r1
 8006216:	4610      	mov	r0, r2
 8006218:	4619      	mov	r1, r3
 800621a:	a333      	add	r3, pc, #204	; (adr r3, 80062e8 <lowlayer_computeAndWritePulse+0x318>)
 800621c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006220:	f7fa fb14 	bl	800084c <__aeabi_ddiv>
 8006224:	4602      	mov	r2, r0
 8006226:	460b      	mov	r3, r1
 8006228:	ec43 2b17 	vmov	d7, r2, r3
 800622c:	eeb0 0a47 	vmov.f32	s0, s14
 8006230:	eef0 0a67 	vmov.f32	s1, s15
 8006234:	f014 fa8c 	bl	801a750 <round>
 8006238:	ec53 2b10 	vmov	r2, r3, d0
 800623c:	4610      	mov	r0, r2
 800623e:	4619      	mov	r1, r3
 8006240:	f7fa fcb2 	bl	8000ba8 <__aeabi_d2uiz>
 8006244:	4603      	mov	r3, r0
 8006246:	62bb      	str	r3, [r7, #40]	; 0x28

	delta_var0 = next_var0 - current_var0;
 8006248:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800624a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	461a      	mov	r2, r3
 8006250:	f04f 0300 	mov.w	r3, #0
 8006254:	e9c7 2308 	strd	r2, r3, [r7, #32]
	delta_var1 = next_var1 - current_var1;
 8006258:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800625a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800625c:	1ad3      	subs	r3, r2, r3
 800625e:	461a      	mov	r2, r3
 8006260:	f04f 0300 	mov.w	r3, #0
 8006264:	e9c7 2306 	strd	r2, r3, [r7, #24]
	delta_var2 = next_var2 - current_var2;
 8006268:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800626a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800626c:	1ad3      	subs	r3, r2, r3
 800626e:	461a      	mov	r2, r3
 8006270:	f04f 0300 	mov.w	r3, #0
 8006274:	e9c7 2304 	strd	r2, r3, [r7, #16]
	delta_var3 = next_var3 - current_var3;
 8006278:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800627a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	461a      	mov	r2, r3
 8006280:	f04f 0300 	mov.w	r3, #0
 8006284:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if (abs(delta_var0) > 127
 8006288:	6a3b      	ldr	r3, [r7, #32]
 800628a:	2b00      	cmp	r3, #0
 800628c:	bfb8      	it	lt
 800628e:	425b      	neglt	r3, r3
 8006290:	2b7f      	cmp	r3, #127	; 0x7f
 8006292:	dc11      	bgt.n	80062b8 <lowlayer_computeAndWritePulse+0x2e8>
		|| abs(delta_var1) > 127
 8006294:	69bb      	ldr	r3, [r7, #24]
 8006296:	2b00      	cmp	r3, #0
 8006298:	bfb8      	it	lt
 800629a:	425b      	neglt	r3, r3
 800629c:	2b7f      	cmp	r3, #127	; 0x7f
 800629e:	dc0b      	bgt.n	80062b8 <lowlayer_computeAndWritePulse+0x2e8>
		|| abs(delta_var2) > 127
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	bfb8      	it	lt
 80062a6:	425b      	neglt	r3, r3
 80062a8:	2b7f      	cmp	r3, #127	; 0x7f
 80062aa:	dc05      	bgt.n	80062b8 <lowlayer_computeAndWritePulse+0x2e8>
		|| abs(delta_var3) > 127) {
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	bfb8      	it	lt
 80062b2:	425b      	neglt	r3, r3
 80062b4:	2b7f      	cmp	r3, #127	; 0x7f
 80062b6:	dd01      	ble.n	80062bc <lowlayer_computeAndWritePulse+0x2ec>
		return FALSE;
 80062b8:	2300      	movs	r3, #0
 80062ba:	e00c      	b.n	80062d6 <lowlayer_computeAndWritePulse+0x306>
	} // Can't convert to int8_t , over range

	result = lowlayer_writePulse((int8_t)delta_var0,
 80062bc:	f997 0020 	ldrsb.w	r0, [r7, #32]
 80062c0:	f997 1018 	ldrsb.w	r1, [r7, #24]
 80062c4:	f997 2010 	ldrsb.w	r2, [r7, #16]
 80062c8:	f997 3008 	ldrsb.w	r3, [r7, #8]
 80062cc:	f000 f828 	bl	8006320 <lowlayer_writePulse>
 80062d0:	4603      	mov	r3, r0
 80062d2:	71fb      	strb	r3, [r7, #7]
								 (int8_t)delta_var1,
								 (int8_t)delta_var2,
								 (int8_t)delta_var3);

	return result;
 80062d4:	79fb      	ldrb	r3, [r7, #7]
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3748      	adds	r7, #72	; 0x48
 80062da:	46bd      	mov	sp, r7
 80062dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062e0:	b004      	add	sp, #16
 80062e2:	4770      	bx	lr
 80062e4:	f3af 8000 	nop.w
 80062e8:	60000000 	.word	0x60000000
 80062ec:	401921fb 	.word	0x401921fb
 80062f0:	daaaaaab 	.word	0xdaaaaaab
 80062f4:	4007bc89 	.word	0x4007bc89
 80062f8:	a0000000 	.word	0xa0000000
 80062fc:	40d3bca1 	.word	0x40d3bca1
 8006300:	daaaaaab 	.word	0xdaaaaaab
 8006304:	3ff7bc89 	.word	0x3ff7bc89
 8006308:	00000000 	.word	0x00000000
 800630c:	40d38800 	.word	0x40d38800
 8006310:	88000000 	.word	0x88000000
 8006314:	4002d97c 	.word	0x4002d97c
 8006318:	40df4000 	.word	0x40df4000
 800631c:	40590000 	.word	0x40590000

08006320 <lowlayer_writePulse>:


uint8_t	lowlayer_writePulse(int8_t pulse0, int8_t pulse1, int8_t pulse2, int8_t pulse3) {
 8006320:	b590      	push	{r4, r7, lr}
 8006322:	b087      	sub	sp, #28
 8006324:	af00      	add	r7, sp, #0
 8006326:	4604      	mov	r4, r0
 8006328:	4608      	mov	r0, r1
 800632a:	4611      	mov	r1, r2
 800632c:	461a      	mov	r2, r3
 800632e:	4623      	mov	r3, r4
 8006330:	71fb      	strb	r3, [r7, #7]
 8006332:	4603      	mov	r3, r0
 8006334:	71bb      	strb	r3, [r7, #6]
 8006336:	460b      	mov	r3, r1
 8006338:	717b      	strb	r3, [r7, #5]
 800633a:	4613      	mov	r3, r2
 800633c:	713b      	strb	r3, [r7, #4]
	uint8_t pulse0_combine, pulse1_combine, pulse2_combine, pulse3_combine;
	uint8_t pulse0_abs, pulse1_abs, pulse2_abs, pulse3_abs;

	// Var 0
	if (pulse0 < 0) {
 800633e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006342:	2b00      	cmp	r3, #0
 8006344:	da06      	bge.n	8006354 <lowlayer_writePulse+0x34>
		pulse0_abs = -pulse0;
 8006346:	79fb      	ldrb	r3, [r7, #7]
 8006348:	425b      	negs	r3, r3
 800634a:	74fb      	strb	r3, [r7, #19]
		pulse0_combine = -pulse0 | ((!DIR_J0) << 7); // Negative : Clockwise
 800634c:	79fb      	ldrb	r3, [r7, #7]
 800634e:	425b      	negs	r3, r3
 8006350:	75fb      	strb	r3, [r7, #23]
 8006352:	e006      	b.n	8006362 <lowlayer_writePulse+0x42>
	} else {
		pulse0_abs = pulse0;
 8006354:	79fb      	ldrb	r3, [r7, #7]
 8006356:	74fb      	strb	r3, [r7, #19]
		pulse0_combine = pulse0 | (DIR_J0 << 7); // Positive : Anti-Clockwise
 8006358:	79fb      	ldrb	r3, [r7, #7]
 800635a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800635e:	b25b      	sxtb	r3, r3
 8006360:	75fb      	strb	r3, [r7, #23]
	}
	// Var 1
	if (pulse1 < 0) {
 8006362:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006366:	2b00      	cmp	r3, #0
 8006368:	da06      	bge.n	8006378 <lowlayer_writePulse+0x58>
		pulse1_abs = -pulse1;
 800636a:	79bb      	ldrb	r3, [r7, #6]
 800636c:	425b      	negs	r3, r3
 800636e:	74bb      	strb	r3, [r7, #18]
		pulse1_combine = -pulse1 | ((!DIR_J1) << 7);
 8006370:	79bb      	ldrb	r3, [r7, #6]
 8006372:	425b      	negs	r3, r3
 8006374:	75bb      	strb	r3, [r7, #22]
 8006376:	e006      	b.n	8006386 <lowlayer_writePulse+0x66>
	} else {
		pulse1_abs = pulse1;
 8006378:	79bb      	ldrb	r3, [r7, #6]
 800637a:	74bb      	strb	r3, [r7, #18]
		pulse1_combine = pulse1 | (DIR_J1 << 7);
 800637c:	79bb      	ldrb	r3, [r7, #6]
 800637e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006382:	b25b      	sxtb	r3, r3
 8006384:	75bb      	strb	r3, [r7, #22]
	}
	// Var 2
	if (pulse2 < 0) {
 8006386:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800638a:	2b00      	cmp	r3, #0
 800638c:	da0b      	bge.n	80063a6 <lowlayer_writePulse+0x86>
		pulse2_abs = -pulse2;
 800638e:	797b      	ldrb	r3, [r7, #5]
 8006390:	425b      	negs	r3, r3
 8006392:	747b      	strb	r3, [r7, #17]
		pulse2_combine = -pulse2 | ((!DIR_J2) << 7);
 8006394:	797b      	ldrb	r3, [r7, #5]
 8006396:	425b      	negs	r3, r3
 8006398:	b2db      	uxtb	r3, r3
 800639a:	b25b      	sxtb	r3, r3
 800639c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80063a0:	b25b      	sxtb	r3, r3
 80063a2:	757b      	strb	r3, [r7, #21]
 80063a4:	e003      	b.n	80063ae <lowlayer_writePulse+0x8e>
	} else {
		pulse2_abs = pulse2;
 80063a6:	797b      	ldrb	r3, [r7, #5]
 80063a8:	747b      	strb	r3, [r7, #17]
		pulse2_combine = pulse2 | (DIR_J2 << 7);
 80063aa:	797b      	ldrb	r3, [r7, #5]
 80063ac:	757b      	strb	r3, [r7, #21]
	}
	// Var 3
	if (pulse3 < 0) {
 80063ae:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	da06      	bge.n	80063c4 <lowlayer_writePulse+0xa4>
		pulse3_abs = -pulse3;
 80063b6:	793b      	ldrb	r3, [r7, #4]
 80063b8:	425b      	negs	r3, r3
 80063ba:	743b      	strb	r3, [r7, #16]
		pulse3_combine = -pulse3 | ((!DIR_J3) << 7);
 80063bc:	793b      	ldrb	r3, [r7, #4]
 80063be:	425b      	negs	r3, r3
 80063c0:	753b      	strb	r3, [r7, #20]
 80063c2:	e006      	b.n	80063d2 <lowlayer_writePulse+0xb2>
	} else {
		pulse3_abs = pulse3;
 80063c4:	793b      	ldrb	r3, [r7, #4]
 80063c6:	743b      	strb	r3, [r7, #16]
		pulse3_combine = pulse3 | (DIR_J3 << 7);
 80063c8:	793b      	ldrb	r3, [r7, #4]
 80063ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80063ce:	b25b      	sxtb	r3, r3
 80063d0:	753b      	strb	r3, [r7, #20]
	}

	// Check limit
	if (pulse0_abs > LIM_PULSE_J0
 80063d2:	7cfb      	ldrb	r3, [r7, #19]
 80063d4:	2b4b      	cmp	r3, #75	; 0x4b
 80063d6:	d808      	bhi.n	80063ea <lowlayer_writePulse+0xca>
		|| pulse1_abs > LIM_PULSE_J1
 80063d8:	7cbb      	ldrb	r3, [r7, #18]
 80063da:	2b78      	cmp	r3, #120	; 0x78
 80063dc:	d805      	bhi.n	80063ea <lowlayer_writePulse+0xca>
		|| pulse2_abs > LIM_PULSE_J2
 80063de:	7c7b      	ldrb	r3, [r7, #17]
 80063e0:	2b7d      	cmp	r3, #125	; 0x7d
 80063e2:	d802      	bhi.n	80063ea <lowlayer_writePulse+0xca>
		|| pulse3_abs > LIM_PULSE_J3) {
 80063e4:	7c3b      	ldrb	r3, [r7, #16]
 80063e6:	2b65      	cmp	r3, #101	; 0x65
 80063e8:	d901      	bls.n	80063ee <lowlayer_writePulse+0xce>
		return FALSE;
 80063ea:	2300      	movs	r3, #0
 80063ec:	e04b      	b.n	8006486 <lowlayer_writePulse+0x166>
//	if (pulse3_abs == 0) {
//		HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET); // Disable
//	} else {
//		HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
//	}
	HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
 80063ee:	2200      	movs	r2, #0
 80063f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80063f4:	4826      	ldr	r0, [pc, #152]	; (8006490 <lowlayer_writePulse+0x170>)
 80063f6:	f005 fe5f 	bl	800c0b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PULSE_WRITE_GPIO_Port, PULSE_WRITE_Pin, GPIO_PIN_RESET);
 80063fa:	2200      	movs	r2, #0
 80063fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006400:	4824      	ldr	r0, [pc, #144]	; (8006494 <lowlayer_writePulse+0x174>)
 8006402:	f005 fe59 	bl	800c0b8 <HAL_GPIO_WritePin>
	// Write to Module DDA
	FSMC_Write(ADDRESS_DDA_0, (uint32_t)pulse0_combine);
 8006406:	7dfb      	ldrb	r3, [r7, #23]
 8006408:	4619      	mov	r1, r3
 800640a:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 800640e:	f7fe f8bf 	bl	8004590 <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_1, (uint32_t)pulse1_combine);
 8006412:	7dbb      	ldrb	r3, [r7, #22]
 8006414:	4619      	mov	r1, r3
 8006416:	4820      	ldr	r0, [pc, #128]	; (8006498 <lowlayer_writePulse+0x178>)
 8006418:	f7fe f8ba 	bl	8004590 <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_2, (uint32_t)pulse2_combine);
 800641c:	7d7b      	ldrb	r3, [r7, #21]
 800641e:	4619      	mov	r1, r3
 8006420:	481e      	ldr	r0, [pc, #120]	; (800649c <lowlayer_writePulse+0x17c>)
 8006422:	f7fe f8b5 	bl	8004590 <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_3, (uint32_t)pulse3_combine);
 8006426:	7d3b      	ldrb	r3, [r7, #20]
 8006428:	4619      	mov	r1, r3
 800642a:	481d      	ldr	r0, [pc, #116]	; (80064a0 <lowlayer_writePulse+0x180>)
 800642c:	f7fe f8b0 	bl	8004590 <FSMC_Write>

	// Trigger
	uint8_t delay = 100;
 8006430:	2364      	movs	r3, #100	; 0x64
 8006432:	73fb      	strb	r3, [r7, #15]
	
	 while (delay--);
 8006434:	bf00      	nop
 8006436:	7bfb      	ldrb	r3, [r7, #15]
 8006438:	1e5a      	subs	r2, r3, #1
 800643a:	73fa      	strb	r2, [r7, #15]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1fa      	bne.n	8006436 <lowlayer_writePulse+0x116>

//	int16_t wow = HAL_GPIO_ReadPin(CPLD_BUSY_GPIO_Port, CPLD_BUSY_Pin);
//	LOG_REPORT(" Busy: ", wow);
	HAL_GPIO_WritePin(PULSE_WRITE_GPIO_Port, PULSE_WRITE_Pin, GPIO_PIN_SET);
 8006440:	2201      	movs	r2, #1
 8006442:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006446:	4813      	ldr	r0, [pc, #76]	; (8006494 <lowlayer_writePulse+0x174>)
 8006448:	f005 fe36 	bl	800c0b8 <HAL_GPIO_WritePin>

	// Accumulate
	pulse_accumulate[0] += pulse0;
 800644c:	4b15      	ldr	r3, [pc, #84]	; (80064a4 <lowlayer_writePulse+0x184>)
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006454:	4413      	add	r3, r2
 8006456:	4a13      	ldr	r2, [pc, #76]	; (80064a4 <lowlayer_writePulse+0x184>)
 8006458:	6013      	str	r3, [r2, #0]
	pulse_accumulate[1] += pulse1;
 800645a:	4b12      	ldr	r3, [pc, #72]	; (80064a4 <lowlayer_writePulse+0x184>)
 800645c:	685a      	ldr	r2, [r3, #4]
 800645e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006462:	4413      	add	r3, r2
 8006464:	4a0f      	ldr	r2, [pc, #60]	; (80064a4 <lowlayer_writePulse+0x184>)
 8006466:	6053      	str	r3, [r2, #4]
	pulse_accumulate[2] += pulse2;
 8006468:	4b0e      	ldr	r3, [pc, #56]	; (80064a4 <lowlayer_writePulse+0x184>)
 800646a:	689a      	ldr	r2, [r3, #8]
 800646c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8006470:	4413      	add	r3, r2
 8006472:	4a0c      	ldr	r2, [pc, #48]	; (80064a4 <lowlayer_writePulse+0x184>)
 8006474:	6093      	str	r3, [r2, #8]
	pulse_accumulate[3] += pulse3;
 8006476:	4b0b      	ldr	r3, [pc, #44]	; (80064a4 <lowlayer_writePulse+0x184>)
 8006478:	68da      	ldr	r2, [r3, #12]
 800647a:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800647e:	4413      	add	r3, r2
 8006480:	4a08      	ldr	r2, [pc, #32]	; (80064a4 <lowlayer_writePulse+0x184>)
 8006482:	60d3      	str	r3, [r2, #12]

	return TRUE;
 8006484:	2301      	movs	r3, #1
}
 8006486:	4618      	mov	r0, r3
 8006488:	371c      	adds	r7, #28
 800648a:	46bd      	mov	sp, r7
 800648c:	bd90      	pop	{r4, r7, pc}
 800648e:	bf00      	nop
 8006490:	40020000 	.word	0x40020000
 8006494:	40020c00 	.word	0x40020c00
 8006498:	60000002 	.word	0x60000002
 800649c:	60000004 	.word	0x60000004
 80064a0:	60000006 	.word	0x60000006
 80064a4:	2000de90 	.word	0x2000de90

080064a8 <lowlayer_resetEncoder>:

void	lowlayer_resetEncoder(void) {
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
	// Trigger
	uint8_t delay = 100;
 80064ae:	2364      	movs	r3, #100	; 0x64
 80064b0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ENCODER_RESET_GPIO_Port, ENCODER_RESET_Pin, GPIO_PIN_SET);
 80064b2:	2201      	movs	r2, #1
 80064b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80064b8:	4809      	ldr	r0, [pc, #36]	; (80064e0 <lowlayer_resetEncoder+0x38>)
 80064ba:	f005 fdfd 	bl	800c0b8 <HAL_GPIO_WritePin>
	while (delay--);
 80064be:	bf00      	nop
 80064c0:	79fb      	ldrb	r3, [r7, #7]
 80064c2:	1e5a      	subs	r2, r3, #1
 80064c4:	71fa      	strb	r2, [r7, #7]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d1fa      	bne.n	80064c0 <lowlayer_resetEncoder+0x18>
	HAL_GPIO_WritePin(ENCODER_RESET_GPIO_Port, ENCODER_RESET_Pin, GPIO_PIN_RESET);
 80064ca:	2200      	movs	r2, #0
 80064cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80064d0:	4803      	ldr	r0, [pc, #12]	; (80064e0 <lowlayer_resetEncoder+0x38>)
 80064d2:	f005 fdf1 	bl	800c0b8 <HAL_GPIO_WritePin>
}
 80064d6:	bf00      	nop
 80064d8:	3708      	adds	r7, #8
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	40020c00 	.word	0x40020c00

080064e4 <lowlayer_readLimitSwitch>:

uint8_t lowlayer_readLimitSwitch(void) {
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b082      	sub	sp, #8
 80064e8:	af00      	add	r7, sp, #0
	uint16_t read_data = FSMC_Read(ADDRESS_LIMIT);
 80064ea:	4805      	ldr	r0, [pc, #20]	; (8006500 <lowlayer_readLimitSwitch+0x1c>)
 80064ec:	f7fe f85f 	bl	80045ae <FSMC_Read>
 80064f0:	4603      	mov	r3, r0
 80064f2:	80fb      	strh	r3, [r7, #6]

	return (uint8_t)read_data;
 80064f4:	88fb      	ldrh	r3, [r7, #6]
 80064f6:	b2db      	uxtb	r3, r3
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3708      	adds	r7, #8
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}
 8006500:	60000020 	.word	0x60000020

08006504 <lowlayer_readEncoder>:

int32_t lowlayer_readEncoder(uint8_t encoder_num) {
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	4603      	mov	r3, r0
 800650c:	71fb      	strb	r3, [r7, #7]
	int32_t data;
	if (encoder_num <= 2) {
 800650e:	79fb      	ldrb	r3, [r7, #7]
 8006510:	2b02      	cmp	r3, #2
 8006512:	d81c      	bhi.n	800654e <lowlayer_readEncoder+0x4a>
		uint16_t low_word = FSMC_Read(ADDRESS_ENC0_LOW + encoder_num*4);
 8006514:	79fb      	ldrb	r3, [r7, #7]
 8006516:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 800651a:	3310      	adds	r3, #16
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	4618      	mov	r0, r3
 8006520:	f7fe f845 	bl	80045ae <FSMC_Read>
 8006524:	4603      	mov	r3, r0
 8006526:	817b      	strh	r3, [r7, #10]
		uint16_t high_word = FSMC_Read(ADDRESS_ENC0_LOW + encoder_num*4 + 2);
 8006528:	79fb      	ldrb	r3, [r7, #7]
 800652a:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 800652e:	3310      	adds	r3, #16
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	3302      	adds	r3, #2
 8006534:	4618      	mov	r0, r3
 8006536:	f7fe f83a 	bl	80045ae <FSMC_Read>
 800653a:	4603      	mov	r3, r0
 800653c:	813b      	strh	r3, [r7, #8]
		data = high_word;
 800653e:	893b      	ldrh	r3, [r7, #8]
 8006540:	60fb      	str	r3, [r7, #12]
		data = (data << 16) | low_word;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	041a      	lsls	r2, r3, #16
 8006546:	897b      	ldrh	r3, [r7, #10]
 8006548:	4313      	orrs	r3, r2
 800654a:	60fb      	str	r3, [r7, #12]
 800654c:	e001      	b.n	8006552 <lowlayer_readEncoder+0x4e>
	} else {
		data = 0;
 800654e:	2300      	movs	r3, #0
 8006550:	60fb      	str	r3, [r7, #12]
	}
	return data;
 8006552:	68fb      	ldr	r3, [r7, #12]
}
 8006554:	4618      	mov	r0, r3
 8006556:	3710      	adds	r7, #16
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <lowlayer_readCapture>:

int32_t lowlayer_readCapture(uint8_t capture_num) {
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	4603      	mov	r3, r0
 8006564:	71fb      	strb	r3, [r7, #7]
	int32_t data;
	if (capture_num <= 2) {
 8006566:	79fb      	ldrb	r3, [r7, #7]
 8006568:	2b02      	cmp	r3, #2
 800656a:	d81c      	bhi.n	80065a6 <lowlayer_readCapture+0x4a>
		uint16_t low_word = FSMC_Read(ADDRESS_CAP0_LOW + capture_num*4);
 800656c:	79fb      	ldrb	r3, [r7, #7]
 800656e:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8006572:	3318      	adds	r3, #24
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	4618      	mov	r0, r3
 8006578:	f7fe f819 	bl	80045ae <FSMC_Read>
 800657c:	4603      	mov	r3, r0
 800657e:	817b      	strh	r3, [r7, #10]
		uint16_t high_word = FSMC_Read(ADDRESS_CAP0_LOW + capture_num*4 + 2);
 8006580:	79fb      	ldrb	r3, [r7, #7]
 8006582:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8006586:	3318      	adds	r3, #24
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	3302      	adds	r3, #2
 800658c:	4618      	mov	r0, r3
 800658e:	f7fe f80e 	bl	80045ae <FSMC_Read>
 8006592:	4603      	mov	r3, r0
 8006594:	813b      	strh	r3, [r7, #8]
		data = high_word;
 8006596:	893b      	ldrh	r3, [r7, #8]
 8006598:	60fb      	str	r3, [r7, #12]
		data = (data << 16) | low_word;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	041a      	lsls	r2, r3, #16
 800659e:	897b      	ldrh	r3, [r7, #10]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	60fb      	str	r3, [r7, #12]
 80065a4:	e001      	b.n	80065aa <lowlayer_readCapture+0x4e>
	} else {
		data = 0;
 80065a6:	2300      	movs	r3, #0
 80065a8:	60fb      	str	r3, [r7, #12]
	}
	return data;
 80065aa:	68fb      	ldr	r3, [r7, #12]
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3710      	adds	r7, #16
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <lowlayer_updateEncoder>:

void	lowlayer_updateEncoder(void) {
 80065b4:	b590      	push	{r4, r7, lr}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 80065ba:	2300      	movs	r3, #0
 80065bc:	71fb      	strb	r3, [r7, #7]
 80065be:	e00b      	b.n	80065d8 <lowlayer_updateEncoder+0x24>
		position_encoder[i] = lowlayer_readEncoder(i);
 80065c0:	79fc      	ldrb	r4, [r7, #7]
 80065c2:	79fb      	ldrb	r3, [r7, #7]
 80065c4:	4618      	mov	r0, r3
 80065c6:	f7ff ff9d 	bl	8006504 <lowlayer_readEncoder>
 80065ca:	4603      	mov	r3, r0
 80065cc:	4a06      	ldr	r2, [pc, #24]	; (80065e8 <lowlayer_updateEncoder+0x34>)
 80065ce:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for (uint8_t i = 0; i < 3; i++) {
 80065d2:	79fb      	ldrb	r3, [r7, #7]
 80065d4:	3301      	adds	r3, #1
 80065d6:	71fb      	strb	r3, [r7, #7]
 80065d8:	79fb      	ldrb	r3, [r7, #7]
 80065da:	2b02      	cmp	r3, #2
 80065dc:	d9f0      	bls.n	80065c0 <lowlayer_updateEncoder+0xc>
	}
}
 80065de:	bf00      	nop
 80065e0:	bf00      	nop
 80065e2:	370c      	adds	r7, #12
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd90      	pop	{r4, r7, pc}
 80065e8:	2000dea4 	.word	0x2000dea4

080065ec <lowlayer_updateCapture>:

void	lowlayer_updateCapture(void) {
 80065ec:	b590      	push	{r4, r7, lr}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 80065f2:	2300      	movs	r3, #0
 80065f4:	71fb      	strb	r3, [r7, #7]
 80065f6:	e00b      	b.n	8006610 <lowlayer_updateCapture+0x24>
			position_capture[i] = lowlayer_readCapture(i);
 80065f8:	79fc      	ldrb	r4, [r7, #7]
 80065fa:	79fb      	ldrb	r3, [r7, #7]
 80065fc:	4618      	mov	r0, r3
 80065fe:	f7ff ffad 	bl	800655c <lowlayer_readCapture>
 8006602:	4603      	mov	r3, r0
 8006604:	4a06      	ldr	r2, [pc, #24]	; (8006620 <lowlayer_updateCapture+0x34>)
 8006606:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for (uint8_t i = 0; i < 3; i++) {
 800660a:	79fb      	ldrb	r3, [r7, #7]
 800660c:	3301      	adds	r3, #1
 800660e:	71fb      	strb	r3, [r7, #7]
 8006610:	79fb      	ldrb	r3, [r7, #7]
 8006612:	2b02      	cmp	r3, #2
 8006614:	d9f0      	bls.n	80065f8 <lowlayer_updateCapture+0xc>
	}
}
 8006616:	bf00      	nop
 8006618:	bf00      	nop
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	bd90      	pop	{r4, r7, pc}
 8006620:	2000deb4 	.word	0x2000deb4

08006624 <lowlayer_updateLimit>:

void	lowlayer_updateLimit(void) {
 8006624:	b580      	push	{r7, lr}
 8006626:	b082      	sub	sp, #8
 8006628:	af00      	add	r7, sp, #0
	uint8_t limit_data = lowlayer_readLimitSwitch();
 800662a:	f7ff ff5b 	bl	80064e4 <lowlayer_readLimitSwitch>
 800662e:	4603      	mov	r3, r0
 8006630:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i = 0; i < 4; i++) {
 8006632:	2300      	movs	r3, #0
 8006634:	71fb      	strb	r3, [r7, #7]
 8006636:	e00d      	b.n	8006654 <lowlayer_updateLimit+0x30>
			limit_switch[i] = (limit_data & (0x01 << i)) ? 1 : 0;
 8006638:	79ba      	ldrb	r2, [r7, #6]
 800663a:	79fb      	ldrb	r3, [r7, #7]
 800663c:	fa42 f303 	asr.w	r3, r2, r3
 8006640:	b2da      	uxtb	r2, r3
 8006642:	79fb      	ldrb	r3, [r7, #7]
 8006644:	f002 0201 	and.w	r2, r2, #1
 8006648:	b2d1      	uxtb	r1, r2
 800664a:	4a06      	ldr	r2, [pc, #24]	; (8006664 <lowlayer_updateLimit+0x40>)
 800664c:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 4; i++) {
 800664e:	79fb      	ldrb	r3, [r7, #7]
 8006650:	3301      	adds	r3, #1
 8006652:	71fb      	strb	r3, [r7, #7]
 8006654:	79fb      	ldrb	r3, [r7, #7]
 8006656:	2b03      	cmp	r3, #3
 8006658:	d9ee      	bls.n	8006638 <lowlayer_updateLimit+0x14>
	}
}
 800665a:	bf00      	nop
 800665c:	bf00      	nop
 800665e:	3708      	adds	r7, #8
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}
 8006664:	2000deb0 	.word	0x2000deb0

08006668 <lowlayer_setOutput>:

void	lowlayer_setOutput(uint8_t value) {
 8006668:	b580      	push	{r7, lr}
 800666a:	b082      	sub	sp, #8
 800666c:	af00      	add	r7, sp, #0
 800666e:	4603      	mov	r3, r0
 8006670:	71fb      	strb	r3, [r7, #7]
	if (value > 0) {
 8006672:	79fb      	ldrb	r3, [r7, #7]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d006      	beq.n	8006686 <lowlayer_setOutput+0x1e>
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_SET);
 8006678:	2201      	movs	r2, #1
 800667a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800667e:	4807      	ldr	r0, [pc, #28]	; (800669c <lowlayer_setOutput+0x34>)
 8006680:	f005 fd1a 	bl	800c0b8 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_RESET);
	}
}
 8006684:	e005      	b.n	8006692 <lowlayer_setOutput+0x2a>
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_RESET);
 8006686:	2200      	movs	r2, #0
 8006688:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800668c:	4803      	ldr	r0, [pc, #12]	; (800669c <lowlayer_setOutput+0x34>)
 800668e:	f005 fd13 	bl	800c0b8 <HAL_GPIO_WritePin>
}
 8006692:	bf00      	nop
 8006694:	3708      	adds	r7, #8
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	40020400 	.word	0x40020400

080066a0 <lowlayer_CPLD_Init>:

void	lowlayer_CPLD_Init(void) {
 80066a0:	b580      	push	{r7, lr}
 80066a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STOP_GPIO_Port, STOP_Pin, GPIO_PIN_SET); // STOP low active
 80066a4:	2201      	movs	r2, #1
 80066a6:	2140      	movs	r1, #64	; 0x40
 80066a8:	4802      	ldr	r0, [pc, #8]	; (80066b4 <lowlayer_CPLD_Init+0x14>)
 80066aa:	f005 fd05 	bl	800c0b8 <HAL_GPIO_WritePin>
}
 80066ae:	bf00      	nop
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	40020c00 	.word	0x40020c00

080066b8 <lowlayer_stepMotorInit>:

void	lowlayer_stepMotorInit(void) {
 80066b8:	b580      	push	{r7, lr}
 80066ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET); // ENABLE low active
 80066bc:	2201      	movs	r2, #1
 80066be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80066c2:	4808      	ldr	r0, [pc, #32]	; (80066e4 <lowlayer_stepMotorInit+0x2c>)
 80066c4:	f005 fcf8 	bl	800c0b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_RESET_GPIO_Port, STEP_RESET_Pin, GPIO_PIN_SET); // RESET low active
 80066c8:	2201      	movs	r2, #1
 80066ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80066ce:	4805      	ldr	r0, [pc, #20]	; (80066e4 <lowlayer_stepMotorInit+0x2c>)
 80066d0:	f005 fcf2 	bl	800c0b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_SLEEP_GPIO_Port, STEP_SLEEP_Pin, GPIO_PIN_SET); // SLEEP low active
 80066d4:	2201      	movs	r2, #1
 80066d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80066da:	4802      	ldr	r0, [pc, #8]	; (80066e4 <lowlayer_stepMotorInit+0x2c>)
 80066dc:	f005 fcec 	bl	800c0b8 <HAL_GPIO_WritePin>
}
 80066e0:	bf00      	nop
 80066e2:	bd80      	pop	{r7, pc}
 80066e4:	40020000 	.word	0x40020000

080066e8 <scaraStartup>:
//											 "Over Velocity",
//											 "Over Accelerate",
//											 "Wrong Joint Num",
//											 "Wrong Coordinate"
//											};
void				scaraStartup(void) {
 80066e8:	b580      	push	{r7, lr}
 80066ea:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	scaraSetScanFlag();
#endif
	lowlayer_CPLD_Init();
 80066ec:	f7ff ffd8 	bl	80066a0 <lowlayer_CPLD_Init>
	lowlayer_stepMotorInit();
 80066f0:	f7ff ffe2 	bl	80066b8 <lowlayer_stepMotorInit>
	lowlayer_resetEncoder();
 80066f4:	f7ff fed8 	bl	80064a8 <lowlayer_resetEncoder>
	//lowlayer_writePulse(0, 0, 0, 0);
}
 80066f8:	bf00      	nop
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	0000      	movs	r0, r0
	...

08006700 <scaraInitDuty>:
	return SCARA_STATUS_OK;
	
}

/* Compute duty corresponding to new command */
SCARA_StatusTypeDef	scaraInitDuty		(DUTY_Command_TypeDef command) {
 8006700:	b084      	sub	sp, #16
 8006702:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006704:	ed2d 8b02 	vpush	{d8}
 8006708:	f5ad 7d7d 	sub.w	sp, sp, #1012	; 0x3f4
 800670c:	af90      	add	r7, sp, #576	; 0x240
 800670e:	f507 74e8 	add.w	r4, r7, #464	; 0x1d0
 8006712:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	SCARA_StatusTypeDef status, status1, status2;

	/*----------- Space Task ------------*/
	if(DUTY_SPACE_TASK == command.space_type) {
 8006716:	f897 31dd 	ldrb.w	r3, [r7, #477]	; 0x1dd
 800671a:	2b00      	cmp	r3, #0
 800671c:	f040 83d4 	bne.w	8006ec8 <scaraInitDuty+0x7c8>
		double total_s, angle_s;
		int8_t dir_angle;
		SCARA_PositionTypeDef	target_point;
		// Change Degree --> Radian
		command.target_point.roll = command.target_point.roll*PI/180.0;
 8006720:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	; 0x258
 8006724:	a3bd      	add	r3, pc, #756	; (adr r3, 8006a1c <scaraInitDuty+0x31c>)
 8006726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672a:	f7f9 ff65 	bl	80005f8 <__aeabi_dmul>
 800672e:	4602      	mov	r2, r0
 8006730:	460b      	mov	r3, r1
 8006732:	4610      	mov	r0, r2
 8006734:	4619      	mov	r1, r3
 8006736:	f04f 0200 	mov.w	r2, #0
 800673a:	4bb1      	ldr	r3, [pc, #708]	; (8006a00 <scaraInitDuty+0x300>)
 800673c:	f7fa f886 	bl	800084c <__aeabi_ddiv>
 8006740:	4602      	mov	r2, r0
 8006742:	460b      	mov	r3, r1
 8006744:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
		// Coordinate
		if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8006748:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 800674c:	2b01      	cmp	r3, #1
 800674e:	d134      	bne.n	80067ba <scaraInitDuty+0xba>
			target_point.x 		= positionCurrent.x + command.target_point.x;
 8006750:	4bac      	ldr	r3, [pc, #688]	; (8006a04 <scaraInitDuty+0x304>)
 8006752:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8006756:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 800675a:	f7f9 fd97 	bl	800028c <__adddf3>
 800675e:	4602      	mov	r2, r0
 8006760:	460b      	mov	r3, r1
 8006762:	f107 0108 	add.w	r1, r7, #8
 8006766:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			target_point.y 		= positionCurrent.y + command.target_point.y;
 800676a:	4ba6      	ldr	r3, [pc, #664]	; (8006a04 <scaraInitDuty+0x304>)
 800676c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8006770:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8006774:	f7f9 fd8a 	bl	800028c <__adddf3>
 8006778:	4602      	mov	r2, r0
 800677a:	460b      	mov	r3, r1
 800677c:	f107 0108 	add.w	r1, r7, #8
 8006780:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			target_point.z 		= positionCurrent.z + command.target_point.z;
 8006784:	4b9f      	ldr	r3, [pc, #636]	; (8006a04 <scaraInitDuty+0x304>)
 8006786:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 800678a:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 800678e:	f7f9 fd7d 	bl	800028c <__adddf3>
 8006792:	4602      	mov	r2, r0
 8006794:	460b      	mov	r3, r1
 8006796:	f107 0108 	add.w	r1, r7, #8
 800679a:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			target_point.roll	= positionCurrent.roll + command.target_point.roll;
 800679e:	4b99      	ldr	r3, [pc, #612]	; (8006a04 <scaraInitDuty+0x304>)
 80067a0:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80067a4:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 80067a8:	f7f9 fd70 	bl	800028c <__adddf3>
 80067ac:	4602      	mov	r2, r0
 80067ae:	460b      	mov	r3, r1
 80067b0:	f107 0108 	add.w	r1, r7, #8
 80067b4:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 80067b8:	e01f      	b.n	80067fa <scaraInitDuty+0xfa>
		} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 80067ba:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d118      	bne.n	80067f4 <scaraInitDuty+0xf4>
			target_point.x 		= command.target_point.x;
 80067c2:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 80067c6:	f107 0108 	add.w	r1, r7, #8
 80067ca:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			target_point.y 		= command.target_point.y;
 80067ce:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 80067d2:	f107 0108 	add.w	r1, r7, #8
 80067d6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			target_point.z 		= command.target_point.z;
 80067da:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 80067de:	f107 0108 	add.w	r1, r7, #8
 80067e2:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			target_point.roll	= command.target_point.roll;
 80067e6:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 80067ea:	f107 0108 	add.w	r1, r7, #8
 80067ee:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 80067f2:	e002      	b.n	80067fa <scaraInitDuty+0xfa>
		} else {
			return SCARA_STATUS_ERROR_COORDINATE;
 80067f4:	230c      	movs	r3, #12
 80067f6:	f000 bf0a 	b.w	800760e <scaraInitDuty+0xf0e>
		}

		angle_s = target_point.roll - positionCurrent.roll;
 80067fa:	f107 0308 	add.w	r3, r7, #8
 80067fe:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8006802:	4b80      	ldr	r3, [pc, #512]	; (8006a04 <scaraInitDuty+0x304>)
 8006804:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8006808:	f7f9 fd3e 	bl	8000288 <__aeabi_dsub>
 800680c:	4602      	mov	r2, r0
 800680e:	460b      	mov	r3, r1
 8006810:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
		dir_angle = 1;
 8006814:	2301      	movs	r3, #1
 8006816:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
		if ( angle_s < 0) {
 800681a:	f04f 0200 	mov.w	r2, #0
 800681e:	f04f 0300 	mov.w	r3, #0
 8006822:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8006826:	f7fa f959 	bl	8000adc <__aeabi_dcmplt>
 800682a:	4603      	mov	r3, r0
 800682c:	2b00      	cmp	r3, #0
 800682e:	d002      	beq.n	8006836 <scaraInitDuty+0x136>
			dir_angle = -1;
 8006830:	23ff      	movs	r3, #255	; 0xff
 8006832:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
//		if(positionCurrent.roll + angle_s < -3.14 || positionCurrent.roll + angle_s > 3.14){
//			dir_angle = -dir_angle;
//			angle_s = (2*PI - fabs(angle_s))*dir_angle;
//		}

		myDUTY.space_type = DUTY_SPACE_TASK;// Change type
 8006836:	4b74      	ldr	r3, [pc, #464]	; (8006a08 <scaraInitDuty+0x308>)
 8006838:	2200      	movs	r2, #0
 800683a:	701a      	strb	r2, [r3, #0]
		myDUTY.task.roll_start = positionCurrent.roll;
 800683c:	4b71      	ldr	r3, [pc, #452]	; (8006a04 <scaraInitDuty+0x304>)
 800683e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8006842:	4971      	ldr	r1, [pc, #452]	; (8006a08 <scaraInitDuty+0x308>)
 8006844:	f501 6182 	add.w	r1, r1, #1040	; 0x410
 8006848:	e9c1 2300 	strd	r2, r3, [r1]
		// 1-Path Planning
			// Straight Line
		if ( DUTY_PATH_LINE == command.path_type ) {
 800684c:	f897 31de 	ldrb.w	r3, [r7, #478]	; 0x1de
 8006850:	2b00      	cmp	r3, #0
 8006852:	d120      	bne.n	8006896 <scaraInitDuty+0x196>
			myDUTY.task.path.path_type = DUTY_PATH_LINE;
 8006854:	4b6c      	ldr	r3, [pc, #432]	; (8006a08 <scaraInitDuty+0x308>)
 8006856:	2200      	movs	r2, #0
 8006858:	721a      	strb	r2, [r3, #8]
			status = scaraInitLine(&(myDUTY.task.path.line), positionCurrent, target_point);
 800685a:	4c6a      	ldr	r4, [pc, #424]	; (8006a04 <scaraInitDuty+0x304>)
 800685c:	f107 0208 	add.w	r2, r7, #8
 8006860:	ab2e      	add	r3, sp, #184	; 0xb8
 8006862:	4611      	mov	r1, r2
 8006864:	22c0      	movs	r2, #192	; 0xc0
 8006866:	4618      	mov	r0, r3
 8006868:	f00f fa42 	bl	8015cf0 <memcpy>
 800686c:	4668      	mov	r0, sp
 800686e:	f104 0308 	add.w	r3, r4, #8
 8006872:	22b8      	movs	r2, #184	; 0xb8
 8006874:	4619      	mov	r1, r3
 8006876:	f00f fa3b 	bl	8015cf0 <memcpy>
 800687a:	e894 000c 	ldmia.w	r4, {r2, r3}
 800687e:	4863      	ldr	r0, [pc, #396]	; (8006a0c <scaraInitDuty+0x30c>)
 8006880:	f000 feda 	bl	8007638 <scaraInitLine>
 8006884:	4603      	mov	r3, r0
 8006886:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
			total_s = myDUTY.task.path.line.total_s;
 800688a:	4b5f      	ldr	r3, [pc, #380]	; (8006a08 <scaraInitDuty+0x308>)
 800688c:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8006890:	e9c7 2368 	strd	r2, r3, [r7, #416]	; 0x1a0
 8006894:	e053      	b.n	800693e <scaraInitDuty+0x23e>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == command.path_type ) {
 8006896:	f897 31de 	ldrb.w	r3, [r7, #478]	; 0x1de
 800689a:	2b01      	cmp	r3, #1
 800689c:	d14c      	bne.n	8006938 <scaraInitDuty+0x238>
			SCARA_PositionTypeDef	center_point;
			target_point.z = positionCurrent.z;
 800689e:	4b59      	ldr	r3, [pc, #356]	; (8006a04 <scaraInitDuty+0x304>)
 80068a0:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80068a4:	f107 0108 	add.w	r1, r7, #8
 80068a8:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

			center_point.x 		= positionCurrent.x + command.sub_point.x;
 80068ac:	4b55      	ldr	r3, [pc, #340]	; (8006a04 <scaraInitDuty+0x304>)
 80068ae:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80068b2:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 80068b6:	f7f9 fce9 	bl	800028c <__adddf3>
 80068ba:	4602      	mov	r2, r0
 80068bc:	460b      	mov	r3, r1
 80068be:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
			center_point.y 		= positionCurrent.y + command.sub_point.y;
 80068c2:	4b50      	ldr	r3, [pc, #320]	; (8006a04 <scaraInitDuty+0x304>)
 80068c4:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80068c8:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 80068cc:	f7f9 fcde 	bl	800028c <__adddf3>
 80068d0:	4602      	mov	r2, r0
 80068d2:	460b      	mov	r3, r1
 80068d4:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			center_point.z 		= positionCurrent.z;
 80068d8:	4b4a      	ldr	r3, [pc, #296]	; (8006a04 <scaraInitDuty+0x304>)
 80068da:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80068de:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

			myDUTY.task.path.path_type = DUTY_PATH_CIRCLE;
 80068e2:	4b49      	ldr	r3, [pc, #292]	; (8006a08 <scaraInitDuty+0x308>)
 80068e4:	2201      	movs	r2, #1
 80068e6:	721a      	strb	r2, [r3, #8]
			status = scaraInitCircle(&(myDUTY.task.path.circle),
 80068e8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80068ec:	4c45      	ldr	r4, [pc, #276]	; (8006a04 <scaraInitDuty+0x304>)
 80068ee:	938e      	str	r3, [sp, #568]	; 0x238
 80068f0:	a85e      	add	r0, sp, #376	; 0x178
 80068f2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80068f6:	22c0      	movs	r2, #192	; 0xc0
 80068f8:	4619      	mov	r1, r3
 80068fa:	f00f f9f9 	bl	8015cf0 <memcpy>
 80068fe:	f107 0208 	add.w	r2, r7, #8
 8006902:	ab2e      	add	r3, sp, #184	; 0xb8
 8006904:	4611      	mov	r1, r2
 8006906:	22c0      	movs	r2, #192	; 0xc0
 8006908:	4618      	mov	r0, r3
 800690a:	f00f f9f1 	bl	8015cf0 <memcpy>
 800690e:	4668      	mov	r0, sp
 8006910:	f104 0308 	add.w	r3, r4, #8
 8006914:	22b8      	movs	r2, #184	; 0xb8
 8006916:	4619      	mov	r1, r3
 8006918:	f00f f9ea 	bl	8015cf0 <memcpy>
 800691c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8006920:	483b      	ldr	r0, [pc, #236]	; (8006a10 <scaraInitDuty+0x310>)
 8006922:	f000 ff3d 	bl	80077a0 <scaraInitCircle>
 8006926:	4603      	mov	r3, r0
 8006928:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
										positionCurrent,
										target_point,
										center_point,
										command.arc_dir );
			total_s = myDUTY.task.path.circle.total_s;
 800692c:	4b36      	ldr	r3, [pc, #216]	; (8006a08 <scaraInitDuty+0x308>)
 800692e:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8006932:	e9c7 2368 	strd	r2, r3, [r7, #416]	; 0x1a0
 8006936:	e002      	b.n	800693e <scaraInitDuty+0x23e>

		} else {
			return SCARA_STATUS_ERROR_TASK;
 8006938:	2303      	movs	r3, #3
 800693a:	f000 be68 	b.w	800760e <scaraInitDuty+0xf0e>
		}

		if ( SCARA_STATUS_OK != status) {
 800693e:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8006942:	2b00      	cmp	r3, #0
 8006944:	d003      	beq.n	800694e <scaraInitDuty+0x24e>
			return status;
 8006946:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 800694a:	f000 be60 	b.w	800760e <scaraInitDuty+0xf0e>
		}

		// 2-Trajectory Planning
			// LSPB
		if ( DUTY_TRAJECTORY_LSPB == command.trajec_type ) {
 800694e:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8006952:	2b00      	cmp	r3, #0
 8006954:	f040 80f7 	bne.w	8006b46 <scaraInitDuty+0x446>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8006958:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 800695c:	2b01      	cmp	r3, #1
 800695e:	d161      	bne.n	8006a24 <scaraInitDuty+0x324>
				//myDUTY.task.trajectory_3d.lspb.Tf = command.time_total;
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8006960:	4b29      	ldr	r3, [pc, #164]	; (8006a08 <scaraInitDuty+0x308>)
 8006962:	2200      	movs	r2, #0
 8006964:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB1(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8006968:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 800696c:	ed97 6b7c 	vldr	d6, [r7, #496]	; 0x1f0
 8006970:	eeb0 2a46 	vmov.f32	s4, s12
 8006974:	eef0 2a66 	vmov.f32	s5, s13
 8006978:	eeb0 1a47 	vmov.f32	s2, s14
 800697c:	eef0 1a67 	vmov.f32	s3, s15
 8006980:	2201      	movs	r2, #1
 8006982:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8006986:	2104      	movs	r1, #4
 8006988:	4822      	ldr	r0, [pc, #136]	; (8006a14 <scaraInitDuty+0x314>)
 800698a:	f001 f905 	bl	8007b98 <scaraInitLSPB1>
 800698e:	4603      	mov	r3, r0
 8006990:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
										 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.time_total);
				//myDUTY.task.trajectory_3d.lspb.Tf might change at this point,
				myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8006994:	4a1c      	ldr	r2, [pc, #112]	; (8006a08 <scaraInitDuty+0x308>)
 8006996:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 800699a:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
				//myDUTY.task.trajectory_roll.linear.Tf = myDUTY.task.trajectory_3d.lspb.Tf;
				myDUTY.time_total = myDUTY.task.trajectory_3d.lspb.Tf;
 800699e:	4b1a      	ldr	r3, [pc, #104]	; (8006a08 <scaraInitDuty+0x308>)
 80069a0:	e9d3 235a 	ldrd	r2, r3, [r3, #360]	; 0x168
 80069a4:	4918      	ldr	r1, [pc, #96]	; (8006a08 <scaraInitDuty+0x308>)
 80069a6:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 80069aa:	e9c1 2300 	strd	r2, r3, [r1]
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 80069ae:	4b16      	ldr	r3, [pc, #88]	; (8006a08 <scaraInitDuty+0x308>)
 80069b0:	2202      	movs	r2, #2
 80069b2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, myDUTY.time_total);
 80069b6:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 80069ba:	4618      	mov	r0, r3
 80069bc:	f7f9 fdb2 	bl	8000524 <__aeabi_i2d>
 80069c0:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80069c4:	f7f9 fe18 	bl	80005f8 <__aeabi_dmul>
 80069c8:	4602      	mov	r2, r0
 80069ca:	460b      	mov	r3, r1
 80069cc:	ec43 2b16 	vmov	d6, r2, r3
 80069d0:	4b0d      	ldr	r3, [pc, #52]	; (8006a08 <scaraInitDuty+0x308>)
 80069d2:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80069d6:	ed93 7b00 	vldr	d7, [r3]
 80069da:	eeb0 1a47 	vmov.f32	s2, s14
 80069de:	eef0 1a67 	vmov.f32	s3, s15
 80069e2:	2203      	movs	r2, #3
 80069e4:	eeb0 0a46 	vmov.f32	s0, s12
 80069e8:	eef0 0a66 	vmov.f32	s1, s13
 80069ec:	2105      	movs	r1, #5
 80069ee:	480a      	ldr	r0, [pc, #40]	; (8006a18 <scaraInitDuty+0x318>)
 80069f0:	f001 f884 	bl	8007afc <scaraInitLinear>
 80069f4:	4603      	mov	r3, r0
 80069f6:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 80069fa:	e256      	b.n	8006eaa <scaraInitDuty+0x7aa>
 80069fc:	f3af 8000 	nop.w
 8006a00:	40668000 	.word	0x40668000
 8006a04:	2000eab8 	.word	0x2000eab8
 8006a08:	2000def8 	.word	0x2000def8
 8006a0c:	2000df08 	.word	0x2000df08
 8006a10:	2000df78 	.word	0x2000df78
 8006a14:	2000e010 	.word	0x2000e010
 8006a18:	2000e2e0 	.word	0x2000e2e0
 8006a1c:	60000000 	.word	0x60000000
 8006a20:	400921fb 	.word	0x400921fb
			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8006a24:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f040 8089 	bne.w	8006b40 <scaraInitDuty+0x440>
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8006a2e:	4bba      	ldr	r3, [pc, #744]	; (8006d18 <scaraInitDuty+0x618>)
 8006a30:	2200      	movs	r2, #0
 8006a32:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8006a36:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006a3a:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8006a3e:	eeb0 2a46 	vmov.f32	s4, s12
 8006a42:	eef0 2a66 	vmov.f32	s5, s13
 8006a46:	eeb0 1a47 	vmov.f32	s2, s14
 8006a4a:	eef0 1a67 	vmov.f32	s3, s15
 8006a4e:	2200      	movs	r2, #0
 8006a50:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8006a54:	2104      	movs	r1, #4
 8006a56:	48b1      	ldr	r0, [pc, #708]	; (8006d1c <scaraInitDuty+0x61c>)
 8006a58:	f002 fab6 	bl	8008fc8 <scaraInitLSPB>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
						 total_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8006a62:	4bad      	ldr	r3, [pc, #692]	; (8006d18 <scaraInitDuty+0x618>)
 8006a64:	2200      	movs	r2, #0
 8006a66:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 8006a6a:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006a6e:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8006a72:	eeb0 2a46 	vmov.f32	s4, s12
 8006a76:	eef0 2a66 	vmov.f32	s5, s13
 8006a7a:	eeb0 1a47 	vmov.f32	s2, s14
 8006a7e:	eef0 1a67 	vmov.f32	s3, s15
 8006a82:	2200      	movs	r2, #0
 8006a84:	ed97 0b62 	vldr	d0, [r7, #392]	; 0x188
 8006a88:	2105      	movs	r1, #5
 8006a8a:	48a5      	ldr	r0, [pc, #660]	; (8006d20 <scaraInitDuty+0x620>)
 8006a8c:	f002 fa9c 	bl	8008fc8 <scaraInitLSPB>
 8006a90:	4603      	mov	r3, r0
 8006a92:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
						 angle_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				// Synchronous time end
				if(myDUTY.task.trajectory_3d.lspb.Tf > myDUTY.task.trajectory_roll.lspb.Tf) {
 8006a96:	4ba0      	ldr	r3, [pc, #640]	; (8006d18 <scaraInitDuty+0x618>)
 8006a98:	e9d3 015a 	ldrd	r0, r1, [r3, #360]	; 0x168
 8006a9c:	4b9e      	ldr	r3, [pc, #632]	; (8006d18 <scaraInitDuty+0x618>)
 8006a9e:	e9d3 23ba 	ldrd	r2, r3, [r3, #744]	; 0x2e8
 8006aa2:	f7fa f839 	bl	8000b18 <__aeabi_dcmpgt>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d024      	beq.n	8006af6 <scaraInitDuty+0x3f6>
					myDUTY.task.trajectory_roll.lspb.Tf = myDUTY.task.trajectory_3d.lspb.Tf;
 8006aac:	4b9a      	ldr	r3, [pc, #616]	; (8006d18 <scaraInitDuty+0x618>)
 8006aae:	e9d3 235a 	ldrd	r2, r3, [r3, #360]	; 0x168
 8006ab2:	4999      	ldr	r1, [pc, #612]	; (8006d18 <scaraInitDuty+0x618>)
 8006ab4:	e9c1 23ba 	strd	r2, r3, [r1, #744]	; 0x2e8
					status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 8006ab8:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006abc:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8006ac0:	eeb0 2a46 	vmov.f32	s4, s12
 8006ac4:	eef0 2a66 	vmov.f32	s5, s13
 8006ac8:	eeb0 1a47 	vmov.f32	s2, s14
 8006acc:	eef0 1a67 	vmov.f32	s3, s15
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	ed97 0b62 	vldr	d0, [r7, #392]	; 0x188
 8006ad6:	2105      	movs	r1, #5
 8006ad8:	4891      	ldr	r0, [pc, #580]	; (8006d20 <scaraInitDuty+0x620>)
 8006ada:	f002 fa75 	bl	8008fc8 <scaraInitLSPB>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
							 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_3d.lspb.Tf;
 8006ae4:	4b8c      	ldr	r3, [pc, #560]	; (8006d18 <scaraInitDuty+0x618>)
 8006ae6:	e9d3 235a 	ldrd	r2, r3, [r3, #360]	; 0x168
 8006aea:	498b      	ldr	r1, [pc, #556]	; (8006d18 <scaraInitDuty+0x618>)
 8006aec:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8006af0:	e9c1 2300 	strd	r2, r3, [r1]
 8006af4:	e1d9      	b.n	8006eaa <scaraInitDuty+0x7aa>
				} else {
					myDUTY.task.trajectory_3d.lspb.Tf = myDUTY.task.trajectory_roll.lspb.Tf;
 8006af6:	4b88      	ldr	r3, [pc, #544]	; (8006d18 <scaraInitDuty+0x618>)
 8006af8:	e9d3 23ba 	ldrd	r2, r3, [r3, #744]	; 0x2e8
 8006afc:	4986      	ldr	r1, [pc, #536]	; (8006d18 <scaraInitDuty+0x618>)
 8006afe:	e9c1 235a 	strd	r2, r3, [r1, #360]	; 0x168
					status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8006b02:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006b06:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8006b0a:	eeb0 2a46 	vmov.f32	s4, s12
 8006b0e:	eef0 2a66 	vmov.f32	s5, s13
 8006b12:	eeb0 1a47 	vmov.f32	s2, s14
 8006b16:	eef0 1a67 	vmov.f32	s3, s15
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8006b20:	2104      	movs	r1, #4
 8006b22:	487e      	ldr	r0, [pc, #504]	; (8006d1c <scaraInitDuty+0x61c>)
 8006b24:	f002 fa50 	bl	8008fc8 <scaraInitLSPB>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
							 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_roll.lspb.Tf;
 8006b2e:	4b7a      	ldr	r3, [pc, #488]	; (8006d18 <scaraInitDuty+0x618>)
 8006b30:	e9d3 23ba 	ldrd	r2, r3, [r3, #744]	; 0x2e8
 8006b34:	4978      	ldr	r1, [pc, #480]	; (8006d18 <scaraInitDuty+0x618>)
 8006b36:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8006b3a:	e9c1 2300 	strd	r2, r3, [r1]
 8006b3e:	e1b4      	b.n	8006eaa <scaraInitDuty+0x7aa>
				}
			} else {
				return SCARA_STATUS_ERROR_MODE_INIT ;
 8006b40:	2308      	movs	r3, #8
 8006b42:	f000 bd64 	b.w	800760e <scaraInitDuty+0xf0e>
			}
			// SCURVE
		} else if 	( DUTY_TRAJECTORY_SCURVE == command.trajec_type ){
 8006b46:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	f040 80f0 	bne.w	8006d30 <scaraInitDuty+0x630>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8006b50:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d14d      	bne.n	8006bf4 <scaraInitDuty+0x4f4>
				//myDUTY.task.trajectory_3d.scurve.Tf = command.time_total;
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8006b58:	4b6f      	ldr	r3, [pc, #444]	; (8006d18 <scaraInitDuty+0x618>)
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve1(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8006b60:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006b64:	ed97 6b7c 	vldr	d6, [r7, #496]	; 0x1f0
 8006b68:	eeb0 2a46 	vmov.f32	s4, s12
 8006b6c:	eef0 2a66 	vmov.f32	s5, s13
 8006b70:	eeb0 1a47 	vmov.f32	s2, s14
 8006b74:	eef0 1a67 	vmov.f32	s3, s15
 8006b78:	2201      	movs	r2, #1
 8006b7a:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8006b7e:	2104      	movs	r1, #4
 8006b80:	4868      	ldr	r0, [pc, #416]	; (8006d24 <scaraInitDuty+0x624>)
 8006b82:	f001 facd 	bl	8008120 <scaraInitScurve1>
 8006b86:	4603      	mov	r3, r0
 8006b88:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
										 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.time_total);
				//myDUTY.task.trajectory_3d.lspb.Tf might change at this point,
				myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8006b8c:	4a62      	ldr	r2, [pc, #392]	; (8006d18 <scaraInitDuty+0x618>)
 8006b8e:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8006b92:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
				//myDUTY.task.trajectory_roll.linear.Tf = command.time_total;
				myDUTY.time_total = myDUTY.task.trajectory_3d.scurve.Tf;
 8006b96:	4b60      	ldr	r3, [pc, #384]	; (8006d18 <scaraInitDuty+0x618>)
 8006b98:	e9d3 237e 	ldrd	r2, r3, [r3, #504]	; 0x1f8
 8006b9c:	495e      	ldr	r1, [pc, #376]	; (8006d18 <scaraInitDuty+0x618>)
 8006b9e:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8006ba2:	e9c1 2300 	strd	r2, r3, [r1]
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8006ba6:	4b5c      	ldr	r3, [pc, #368]	; (8006d18 <scaraInitDuty+0x618>)
 8006ba8:	2202      	movs	r2, #2
 8006baa:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, myDUTY.time_total);
 8006bae:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f7f9 fcb6 	bl	8000524 <__aeabi_i2d>
 8006bb8:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8006bbc:	f7f9 fd1c 	bl	80005f8 <__aeabi_dmul>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	460b      	mov	r3, r1
 8006bc4:	ec43 2b16 	vmov	d6, r2, r3
 8006bc8:	4b53      	ldr	r3, [pc, #332]	; (8006d18 <scaraInitDuty+0x618>)
 8006bca:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006bce:	ed93 7b00 	vldr	d7, [r3]
 8006bd2:	eeb0 1a47 	vmov.f32	s2, s14
 8006bd6:	eef0 1a67 	vmov.f32	s3, s15
 8006bda:	2203      	movs	r2, #3
 8006bdc:	eeb0 0a46 	vmov.f32	s0, s12
 8006be0:	eef0 0a66 	vmov.f32	s1, s13
 8006be4:	2105      	movs	r1, #5
 8006be6:	4850      	ldr	r0, [pc, #320]	; (8006d28 <scaraInitDuty+0x628>)
 8006be8:	f000 ff88 	bl	8007afc <scaraInitLinear>
 8006bec:	4603      	mov	r3, r0
 8006bee:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 8006bf2:	e15a      	b.n	8006eaa <scaraInitDuty+0x7aa>

			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8006bf4:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	f040 8089 	bne.w	8006d10 <scaraInitDuty+0x610>
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8006bfe:	4b46      	ldr	r3, [pc, #280]	; (8006d18 <scaraInitDuty+0x618>)
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8006c06:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006c0a:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8006c0e:	eeb0 2a46 	vmov.f32	s4, s12
 8006c12:	eef0 2a66 	vmov.f32	s5, s13
 8006c16:	eeb0 1a47 	vmov.f32	s2, s14
 8006c1a:	eef0 1a67 	vmov.f32	s3, s15
 8006c1e:	2200      	movs	r2, #0
 8006c20:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8006c24:	2104      	movs	r1, #4
 8006c26:	483f      	ldr	r0, [pc, #252]	; (8006d24 <scaraInitDuty+0x624>)
 8006c28:	f002 fda0 	bl	800976c <scaraInitScurve>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
						 total_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8006c32:	4b39      	ldr	r3, [pc, #228]	; (8006d18 <scaraInitDuty+0x618>)
 8006c34:	2201      	movs	r2, #1
 8006c36:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 8006c3a:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006c3e:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8006c42:	eeb0 2a46 	vmov.f32	s4, s12
 8006c46:	eef0 2a66 	vmov.f32	s5, s13
 8006c4a:	eeb0 1a47 	vmov.f32	s2, s14
 8006c4e:	eef0 1a67 	vmov.f32	s3, s15
 8006c52:	2200      	movs	r2, #0
 8006c54:	ed97 0b62 	vldr	d0, [r7, #392]	; 0x188
 8006c58:	2105      	movs	r1, #5
 8006c5a:	4834      	ldr	r0, [pc, #208]	; (8006d2c <scaraInitDuty+0x62c>)
 8006c5c:	f002 fd86 	bl	800976c <scaraInitScurve>
 8006c60:	4603      	mov	r3, r0
 8006c62:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
						 angle_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				// synchronous time end
				if(myDUTY.task.trajectory_3d.scurve.Tf > myDUTY.task.trajectory_roll.scurve.Tf) {
 8006c66:	4b2c      	ldr	r3, [pc, #176]	; (8006d18 <scaraInitDuty+0x618>)
 8006c68:	e9d3 017e 	ldrd	r0, r1, [r3, #504]	; 0x1f8
 8006c6c:	4b2a      	ldr	r3, [pc, #168]	; (8006d18 <scaraInitDuty+0x618>)
 8006c6e:	e9d3 23de 	ldrd	r2, r3, [r3, #888]	; 0x378
 8006c72:	f7f9 ff51 	bl	8000b18 <__aeabi_dcmpgt>
 8006c76:	4603      	mov	r3, r0
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d024      	beq.n	8006cc6 <scaraInitDuty+0x5c6>
					myDUTY.task.trajectory_roll.scurve.Tf = myDUTY.task.trajectory_3d.scurve.Tf;
 8006c7c:	4b26      	ldr	r3, [pc, #152]	; (8006d18 <scaraInitDuty+0x618>)
 8006c7e:	e9d3 237e 	ldrd	r2, r3, [r3, #504]	; 0x1f8
 8006c82:	4925      	ldr	r1, [pc, #148]	; (8006d18 <scaraInitDuty+0x618>)
 8006c84:	e9c1 23de 	strd	r2, r3, [r1, #888]	; 0x378
					status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 8006c88:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006c8c:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8006c90:	eeb0 2a46 	vmov.f32	s4, s12
 8006c94:	eef0 2a66 	vmov.f32	s5, s13
 8006c98:	eeb0 1a47 	vmov.f32	s2, s14
 8006c9c:	eef0 1a67 	vmov.f32	s3, s15
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	ed97 0b62 	vldr	d0, [r7, #392]	; 0x188
 8006ca6:	2105      	movs	r1, #5
 8006ca8:	4820      	ldr	r0, [pc, #128]	; (8006d2c <scaraInitDuty+0x62c>)
 8006caa:	f002 fd5f 	bl	800976c <scaraInitScurve>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
							 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_3d.scurve.Tf;
 8006cb4:	4b18      	ldr	r3, [pc, #96]	; (8006d18 <scaraInitDuty+0x618>)
 8006cb6:	e9d3 237e 	ldrd	r2, r3, [r3, #504]	; 0x1f8
 8006cba:	4917      	ldr	r1, [pc, #92]	; (8006d18 <scaraInitDuty+0x618>)
 8006cbc:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8006cc0:	e9c1 2300 	strd	r2, r3, [r1]
 8006cc4:	e0f1      	b.n	8006eaa <scaraInitDuty+0x7aa>
				} else {
					myDUTY.task.trajectory_3d.scurve.Tf = myDUTY.task.trajectory_roll.scurve.Tf;
 8006cc6:	4b14      	ldr	r3, [pc, #80]	; (8006d18 <scaraInitDuty+0x618>)
 8006cc8:	e9d3 23de 	ldrd	r2, r3, [r3, #888]	; 0x378
 8006ccc:	4912      	ldr	r1, [pc, #72]	; (8006d18 <scaraInitDuty+0x618>)
 8006cce:	e9c1 237e 	strd	r2, r3, [r1, #504]	; 0x1f8
					status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8006cd2:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006cd6:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8006cda:	eeb0 2a46 	vmov.f32	s4, s12
 8006cde:	eef0 2a66 	vmov.f32	s5, s13
 8006ce2:	eeb0 1a47 	vmov.f32	s2, s14
 8006ce6:	eef0 1a67 	vmov.f32	s3, s15
 8006cea:	2201      	movs	r2, #1
 8006cec:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8006cf0:	2104      	movs	r1, #4
 8006cf2:	480c      	ldr	r0, [pc, #48]	; (8006d24 <scaraInitDuty+0x624>)
 8006cf4:	f002 fd3a 	bl	800976c <scaraInitScurve>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
							 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_roll.scurve.Tf;
 8006cfe:	4b06      	ldr	r3, [pc, #24]	; (8006d18 <scaraInitDuty+0x618>)
 8006d00:	e9d3 23de 	ldrd	r2, r3, [r3, #888]	; 0x378
 8006d04:	4904      	ldr	r1, [pc, #16]	; (8006d18 <scaraInitDuty+0x618>)
 8006d06:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8006d0a:	e9c1 2300 	strd	r2, r3, [r1]
 8006d0e:	e0cc      	b.n	8006eaa <scaraInitDuty+0x7aa>
				}
			}else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 8006d10:	2308      	movs	r3, #8
 8006d12:	f000 bc7c 	b.w	800760e <scaraInitDuty+0xf0e>
 8006d16:	bf00      	nop
 8006d18:	2000def8 	.word	0x2000def8
 8006d1c:	2000e010 	.word	0x2000e010
 8006d20:	2000e190 	.word	0x2000e190
 8006d24:	2000e090 	.word	0x2000e090
 8006d28:	2000e2e0 	.word	0x2000e2e0
 8006d2c:	2000e210 	.word	0x2000e210
			}
		}else if(DUTY_TRAJECTORY_LINEAR == command.trajec_type){
 8006d30:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8006d34:	2b02      	cmp	r3, #2
 8006d36:	d172      	bne.n	8006e1e <scaraInitDuty+0x71e>
			//myDUTY.time_total = command.time_total;
			myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8006d38:	4ab1      	ldr	r2, [pc, #708]	; (8007000 <scaraInitDuty+0x900>)
 8006d3a:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8006d3e:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
			myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8006d42:	4baf      	ldr	r3, [pc, #700]	; (8007000 <scaraInitDuty+0x900>)
 8006d44:	2202      	movs	r2, #2
 8006d46:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
			myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8006d4a:	4bad      	ldr	r3, [pc, #692]	; (8007000 <scaraInitDuty+0x900>)
 8006d4c:	2202      	movs	r2, #2
 8006d4e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
			if(command.modeInit_type == DUTY_MODE_INIT_QT){
 8006d52:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006d56:	2b03      	cmp	r3, #3
 8006d58:	d118      	bne.n	8006d8c <scaraInitDuty+0x68c>
				status1 = scaraInitLinear(&(myDUTY.task.trajectory_3d.linear), TRAJECTORY_3D, fabs(total_s), DUTY_MODE_INIT_QT, command.time_total);
 8006d5a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8006d5e:	603b      	str	r3, [r7, #0]
 8006d60:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8006d64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d68:	607b      	str	r3, [r7, #4]
 8006d6a:	ed97 7b7c 	vldr	d7, [r7, #496]	; 0x1f0
 8006d6e:	eeb0 1a47 	vmov.f32	s2, s14
 8006d72:	eef0 1a67 	vmov.f32	s3, s15
 8006d76:	2203      	movs	r2, #3
 8006d78:	ed97 0b00 	vldr	d0, [r7]
 8006d7c:	2104      	movs	r1, #4
 8006d7e:	48a1      	ldr	r0, [pc, #644]	; (8007004 <scaraInitDuty+0x904>)
 8006d80:	f000 febc 	bl	8007afc <scaraInitLinear>
 8006d84:	4603      	mov	r3, r0
 8006d86:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
 8006d8a:	e01d      	b.n	8006dc8 <scaraInitDuty+0x6c8>
			}else if(command.modeInit_type == DUTY_MODE_INIT_QV){
 8006d8c:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006d90:	2b02      	cmp	r3, #2
 8006d92:	d116      	bne.n	8006dc2 <scaraInitDuty+0x6c2>
				status1 = scaraInitLinear(&(myDUTY.task.trajectory_3d.linear), TRAJECTORY_3D, fabs(total_s), DUTY_MODE_INIT_QV, command.v_factor);
 8006d94:	f8d7 51a0 	ldr.w	r5, [r7, #416]	; 0x1a0
 8006d98:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8006d9c:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 8006da0:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006da4:	eeb0 1a47 	vmov.f32	s2, s14
 8006da8:	eef0 1a67 	vmov.f32	s3, s15
 8006dac:	2202      	movs	r2, #2
 8006dae:	ec46 5b10 	vmov	d0, r5, r6
 8006db2:	2104      	movs	r1, #4
 8006db4:	4893      	ldr	r0, [pc, #588]	; (8007004 <scaraInitDuty+0x904>)
 8006db6:	f000 fea1 	bl	8007afc <scaraInitLinear>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
 8006dc0:	e002      	b.n	8006dc8 <scaraInitDuty+0x6c8>
			}else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 8006dc2:	2308      	movs	r3, #8
 8006dc4:	f000 bc23 	b.w	800760e <scaraInitDuty+0xf0e>
			}
			myDUTY.time_total = myDUTY.task.trajectory_3d.linear.Tf;
 8006dc8:	4b8d      	ldr	r3, [pc, #564]	; (8007000 <scaraInitDuty+0x900>)
 8006dca:	e9d3 23a0 	ldrd	r2, r3, [r3, #640]	; 0x280
 8006dce:	498c      	ldr	r1, [pc, #560]	; (8007000 <scaraInitDuty+0x900>)
 8006dd0:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8006dd4:	e9c1 2300 	strd	r2, r3, [r1]
			status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, myDUTY.time_total);
 8006dd8:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f7f9 fba1 	bl	8000524 <__aeabi_i2d>
 8006de2:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8006de6:	f7f9 fc07 	bl	80005f8 <__aeabi_dmul>
 8006dea:	4602      	mov	r2, r0
 8006dec:	460b      	mov	r3, r1
 8006dee:	ec43 2b16 	vmov	d6, r2, r3
 8006df2:	4b83      	ldr	r3, [pc, #524]	; (8007000 <scaraInitDuty+0x900>)
 8006df4:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006df8:	ed93 7b00 	vldr	d7, [r3]
 8006dfc:	eeb0 1a47 	vmov.f32	s2, s14
 8006e00:	eef0 1a67 	vmov.f32	s3, s15
 8006e04:	2203      	movs	r2, #3
 8006e06:	eeb0 0a46 	vmov.f32	s0, s12
 8006e0a:	eef0 0a66 	vmov.f32	s1, s13
 8006e0e:	2105      	movs	r1, #5
 8006e10:	487d      	ldr	r0, [pc, #500]	; (8007008 <scaraInitDuty+0x908>)
 8006e12:	f000 fe73 	bl	8007afc <scaraInitLinear>
 8006e16:	4603      	mov	r3, r0
 8006e18:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 8006e1c:	e045      	b.n	8006eaa <scaraInitDuty+0x7aa>
		}else if(DUTY_TRAJECTORY_GCODE_LSPB == command.trajec_type){
 8006e1e:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8006e22:	2b03      	cmp	r3, #3
 8006e24:	d13f      	bne.n	8006ea6 <scaraInitDuty+0x7a6>
			status1 = SCARA_STATUS_OK;
 8006e26:	2300      	movs	r3, #0
 8006e28:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
			myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8006e2c:	4a74      	ldr	r2, [pc, #464]	; (8007000 <scaraInitDuty+0x900>)
 8006e2e:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8006e32:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
			myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_GCODE_LSPB;
 8006e36:	4b72      	ldr	r3, [pc, #456]	; (8007000 <scaraInitDuty+0x900>)
 8006e38:	2203      	movs	r2, #3
 8006e3a:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
			myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8006e3e:	4b70      	ldr	r3, [pc, #448]	; (8007000 <scaraInitDuty+0x900>)
 8006e40:	2202      	movs	r2, #2
 8006e42:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
			myDUTY.time_total = command.time_total;
 8006e46:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 8006e4a:	496d      	ldr	r1, [pc, #436]	; (8007000 <scaraInitDuty+0x900>)
 8006e4c:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8006e50:	e9c1 2300 	strd	r2, r3, [r1]
			status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, command.time_total - last_T);
 8006e54:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f7f9 fb63 	bl	8000524 <__aeabi_i2d>
 8006e5e:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8006e62:	f7f9 fbc9 	bl	80005f8 <__aeabi_dmul>
 8006e66:	4602      	mov	r2, r0
 8006e68:	460b      	mov	r3, r1
 8006e6a:	ec43 2b18 	vmov	d8, r2, r3
 8006e6e:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	; 0x1f0
 8006e72:	4b66      	ldr	r3, [pc, #408]	; (800700c <scaraInitDuty+0x90c>)
 8006e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e78:	f7f9 fa06 	bl	8000288 <__aeabi_dsub>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	460b      	mov	r3, r1
 8006e80:	ec43 2b17 	vmov	d7, r2, r3
 8006e84:	eeb0 1a47 	vmov.f32	s2, s14
 8006e88:	eef0 1a67 	vmov.f32	s3, s15
 8006e8c:	2203      	movs	r2, #3
 8006e8e:	eeb0 0a48 	vmov.f32	s0, s16
 8006e92:	eef0 0a68 	vmov.f32	s1, s17
 8006e96:	2105      	movs	r1, #5
 8006e98:	485b      	ldr	r0, [pc, #364]	; (8007008 <scaraInitDuty+0x908>)
 8006e9a:	f000 fe2f 	bl	8007afc <scaraInitLinear>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 8006ea4:	e001      	b.n	8006eaa <scaraInitDuty+0x7aa>
		}else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8006ea6:	2305      	movs	r3, #5
 8006ea8:	e3b1      	b.n	800760e <scaraInitDuty+0xf0e>
		}
		// Check Init Status
		if ( SCARA_STATUS_OK != status1) {
 8006eaa:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d002      	beq.n	8006eb8 <scaraInitDuty+0x7b8>
			return status1;
 8006eb2:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8006eb6:	e3aa      	b.n	800760e <scaraInitDuty+0xf0e>
		}
		if ( SCARA_STATUS_OK != status2) {
 8006eb8:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	f000 8378 	beq.w	80075b2 <scaraInitDuty+0xeb2>
			return status2;
 8006ec2:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 8006ec6:	e3a2      	b.n	800760e <scaraInitDuty+0xf0e>
		}


	
	} else if (DUTY_SPACE_JOINT == command.space_type) {
 8006ec8:	f897 31dd 	ldrb.w	r3, [r7, #477]	; 0x1dd
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	f040 836e 	bne.w	80075ae <scaraInitDuty+0xeae>
		/*----------- Space Joint ------------*/
		myDUTY.space_type = DUTY_SPACE_JOINT;// Change type
 8006ed2:	4b4b      	ldr	r3, [pc, #300]	; (8007000 <scaraInitDuty+0x900>)
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	701a      	strb	r2, [r3, #0]
		myDUTY.joint.theta1_start	 = positionCurrent.Theta1;
 8006ed8:	4b4d      	ldr	r3, [pc, #308]	; (8007010 <scaraInitDuty+0x910>)
 8006eda:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8006ede:	4948      	ldr	r1, [pc, #288]	; (8007000 <scaraInitDuty+0x900>)
 8006ee0:	f601 2118 	addw	r1, r1, #2584	; 0xa18
 8006ee4:	e9c1 2300 	strd	r2, r3, [r1]
		myDUTY.joint.theta2_start	 = positionCurrent.Theta2;
 8006ee8:	4b49      	ldr	r3, [pc, #292]	; (8007010 <scaraInitDuty+0x910>)
 8006eea:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8006eee:	4944      	ldr	r1, [pc, #272]	; (8007000 <scaraInitDuty+0x900>)
 8006ef0:	f501 6122 	add.w	r1, r1, #2592	; 0xa20
 8006ef4:	e9c1 2300 	strd	r2, r3, [r1]
		myDUTY.joint.d3_start		 = positionCurrent.D3;
 8006ef8:	4b45      	ldr	r3, [pc, #276]	; (8007010 <scaraInitDuty+0x910>)
 8006efa:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8006efe:	4940      	ldr	r1, [pc, #256]	; (8007000 <scaraInitDuty+0x900>)
 8006f00:	f601 2128 	addw	r1, r1, #2600	; 0xa28
 8006f04:	e9c1 2300 	strd	r2, r3, [r1]
		myDUTY.joint.theta4_start 	 = positionCurrent.Theta4;
 8006f08:	4b41      	ldr	r3, [pc, #260]	; (8007010 <scaraInitDuty+0x910>)
 8006f0a:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8006f0e:	493c      	ldr	r1, [pc, #240]	; (8007000 <scaraInitDuty+0x900>)
 8006f10:	f501 6123 	add.w	r1, r1, #2608	; 0xa30
 8006f14:	e9c1 2300 	strd	r2, r3, [r1]

		SCARA_PositionTypeDef	target_point;
		// Change Degree --> Radian
		command.target_point.roll = command.target_point.roll*PI/180.0;
 8006f18:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	; 0x258
 8006f1c:	a336      	add	r3, pc, #216	; (adr r3, 8006ff8 <scaraInitDuty+0x8f8>)
 8006f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f22:	f7f9 fb69 	bl	80005f8 <__aeabi_dmul>
 8006f26:	4602      	mov	r2, r0
 8006f28:	460b      	mov	r3, r1
 8006f2a:	4610      	mov	r0, r2
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	f04f 0200 	mov.w	r2, #0
 8006f32:	4b38      	ldr	r3, [pc, #224]	; (8007014 <scaraInitDuty+0x914>)
 8006f34:	f7f9 fc8a 	bl	800084c <__aeabi_ddiv>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	460b      	mov	r3, r1
 8006f3c:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
		// Coordinate
		if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8006f40:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d12c      	bne.n	8006fa2 <scaraInitDuty+0x8a2>
			target_point.x 		= positionCurrent.x + command.target_point.x;
 8006f48:	4b31      	ldr	r3, [pc, #196]	; (8007010 <scaraInitDuty+0x910>)
 8006f4a:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8006f4e:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 8006f52:	f7f9 f99b 	bl	800028c <__adddf3>
 8006f56:	4602      	mov	r2, r0
 8006f58:	460b      	mov	r3, r1
 8006f5a:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
			target_point.y 		= positionCurrent.y + command.target_point.y;
 8006f5e:	4b2c      	ldr	r3, [pc, #176]	; (8007010 <scaraInitDuty+0x910>)
 8006f60:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8006f64:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8006f68:	f7f9 f990 	bl	800028c <__adddf3>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	460b      	mov	r3, r1
 8006f70:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			target_point.z 		= positionCurrent.z + command.target_point.z;
 8006f74:	4b26      	ldr	r3, [pc, #152]	; (8007010 <scaraInitDuty+0x910>)
 8006f76:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8006f7a:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8006f7e:	f7f9 f985 	bl	800028c <__adddf3>
 8006f82:	4602      	mov	r2, r0
 8006f84:	460b      	mov	r3, r1
 8006f86:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
			target_point.roll	= positionCurrent.roll + command.target_point.roll;
 8006f8a:	4b21      	ldr	r3, [pc, #132]	; (8007010 <scaraInitDuty+0x910>)
 8006f8c:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8006f90:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 8006f94:	f7f9 f97a 	bl	800028c <__adddf3>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	460b      	mov	r3, r1
 8006f9c:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
 8006fa0:	e016      	b.n	8006fd0 <scaraInitDuty+0x8d0>
		} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8006fa2:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d110      	bne.n	8006fcc <scaraInitDuty+0x8cc>
			target_point.x 		= command.target_point.x;
 8006faa:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 8006fae:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
			target_point.y 		= command.target_point.y;
 8006fb2:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8006fb6:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			target_point.z 		= command.target_point.z;
 8006fba:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8006fbe:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
			target_point.roll	= command.target_point.roll;
 8006fc2:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 8006fc6:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
 8006fca:	e001      	b.n	8006fd0 <scaraInitDuty+0x8d0>
		} else {
			return SCARA_STATUS_ERROR_COORDINATE;
 8006fcc:	230c      	movs	r3, #12
 8006fce:	e31e      	b.n	800760e <scaraInitDuty+0xf0e>
		}

		if( FALSE == kinematicInverse(&target_point, positionCurrent)) {
 8006fd0:	4c0f      	ldr	r4, [pc, #60]	; (8007010 <scaraInitDuty+0x910>)
 8006fd2:	f107 05c8 	add.w	r5, r7, #200	; 0xc8
 8006fd6:	4668      	mov	r0, sp
 8006fd8:	f104 0308 	add.w	r3, r4, #8
 8006fdc:	22b8      	movs	r2, #184	; 0xb8
 8006fde:	4619      	mov	r1, r3
 8006fe0:	f00e fe86 	bl	8015cf0 <memcpy>
 8006fe4:	e894 000c 	ldmia.w	r4, {r2, r3}
 8006fe8:	4628      	mov	r0, r5
 8006fea:	f7fe f861 	bl	80050b0 <kinematicInverse>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d111      	bne.n	8007018 <scaraInitDuty+0x918>
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;// Exit with error
 8006ff4:	2307      	movs	r3, #7
 8006ff6:	e30a      	b.n	800760e <scaraInitDuty+0xf0e>
 8006ff8:	60000000 	.word	0x60000000
 8006ffc:	400921fb 	.word	0x400921fb
 8007000:	2000def8 	.word	0x2000def8
 8007004:	2000e160 	.word	0x2000e160
 8007008:	2000e2e0 	.word	0x2000e2e0
 800700c:	2000dd18 	.word	0x2000dd18
 8007010:	2000eab8 	.word	0x2000eab8
 8007014:	40668000 	.word	0x40668000
		}
		// Trajectory 4 profile
		double q[4];
		q[0] = target_point.Theta1 - positionCurrent.Theta1;
 8007018:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 800701c:	4bc4      	ldr	r3, [pc, #784]	; (8007330 <scaraInitDuty+0xc30>)
 800701e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8007022:	f7f9 f931 	bl	8000288 <__aeabi_dsub>
 8007026:	4602      	mov	r2, r0
 8007028:	460b      	mov	r3, r1
 800702a:	f107 0108 	add.w	r1, r7, #8
 800702e:	e9c1 2300 	strd	r2, r3, [r1]
		q[1] = target_point.Theta2 - positionCurrent.Theta2;
 8007032:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8007036:	4bbe      	ldr	r3, [pc, #760]	; (8007330 <scaraInitDuty+0xc30>)
 8007038:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800703c:	f7f9 f924 	bl	8000288 <__aeabi_dsub>
 8007040:	4602      	mov	r2, r0
 8007042:	460b      	mov	r3, r1
 8007044:	f107 0108 	add.w	r1, r7, #8
 8007048:	e9c1 2302 	strd	r2, r3, [r1, #8]
		q[2] = target_point.D3 	   - positionCurrent.D3;
 800704c:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8007050:	4bb7      	ldr	r3, [pc, #732]	; (8007330 <scaraInitDuty+0xc30>)
 8007052:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8007056:	f7f9 f917 	bl	8000288 <__aeabi_dsub>
 800705a:	4602      	mov	r2, r0
 800705c:	460b      	mov	r3, r1
 800705e:	f107 0108 	add.w	r1, r7, #8
 8007062:	e9c1 2304 	strd	r2, r3, [r1, #16]
		q[3] = target_point.Theta4 - positionCurrent.Theta4;
 8007066:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800706a:	4bb1      	ldr	r3, [pc, #708]	; (8007330 <scaraInitDuty+0xc30>)
 800706c:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8007070:	f7f9 f90a 	bl	8000288 <__aeabi_dsub>
 8007074:	4602      	mov	r2, r0
 8007076:	460b      	mov	r3, r1
 8007078:	f107 0108 	add.w	r1, r7, #8
 800707c:	e9c1 2306 	strd	r2, r3, [r1, #24]

		// LSPB
		if ( DUTY_TRAJECTORY_LSPB == command.trajec_type) {
 8007080:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8007084:	2b00      	cmp	r3, #0
 8007086:	f040 8146 	bne.w	8007316 <scaraInitDuty+0xc16>
			// Mode Init Time
			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 800708a:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 800708e:	2b01      	cmp	r3, #1
 8007090:	d161      	bne.n	8007156 <scaraInitDuty+0xa56>
				for ( uint8_t i = 0; i < 4; i++) {
 8007092:	2300      	movs	r3, #0
 8007094:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 8007098:	e051      	b.n	800713e <scaraInitDuty+0xa3e>
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 800709a:	f897 219e 	ldrb.w	r2, [r7, #414]	; 0x19e
 800709e:	49a5      	ldr	r1, [pc, #660]	; (8007334 <scaraInitDuty+0xc34>)
 80070a0:	4613      	mov	r3, r2
 80070a2:	005b      	lsls	r3, r3, #1
 80070a4:	4413      	add	r3, r2
 80070a6:	01db      	lsls	r3, r3, #7
 80070a8:	440b      	add	r3, r1
 80070aa:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80070ae:	2200      	movs	r2, #0
 80070b0:	701a      	strb	r2, [r3, #0]
					myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 80070b2:	f897 219e 	ldrb.w	r2, [r7, #414]	; 0x19e
 80070b6:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	; 0x1f0
 80070ba:	4c9e      	ldr	r4, [pc, #632]	; (8007334 <scaraInitDuty+0xc34>)
 80070bc:	4613      	mov	r3, r2
 80070be:	005b      	lsls	r3, r3, #1
 80070c0:	4413      	add	r3, r2
 80070c2:	01db      	lsls	r3, r3, #7
 80070c4:	4423      	add	r3, r4
 80070c6:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 80070ca:	e9c3 0100 	strd	r0, r1, [r3]
					status1 = scaraInitLSPB1(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 80070ce:	f897 219e 	ldrb.w	r2, [r7, #414]	; 0x19e
 80070d2:	4613      	mov	r3, r2
 80070d4:	005b      	lsls	r3, r3, #1
 80070d6:	4413      	add	r3, r2
 80070d8:	01db      	lsls	r3, r3, #7
 80070da:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80070de:	4a95      	ldr	r2, [pc, #596]	; (8007334 <scaraInitDuty+0xc34>)
 80070e0:	1898      	adds	r0, r3, r2
 80070e2:	f897 319e 	ldrb.w	r3, [r7, #414]	; 0x19e
 80070e6:	4a94      	ldr	r2, [pc, #592]	; (8007338 <scaraInitDuty+0xc38>)
 80070e8:	5cd1      	ldrb	r1, [r2, r3]
 80070ea:	f897 319e 	ldrb.w	r3, [r7, #414]	; 0x19e
 80070ee:	f107 0208 	add.w	r2, r7, #8
 80070f2:	00db      	lsls	r3, r3, #3
 80070f4:	4413      	add	r3, r2
 80070f6:	ed93 7b00 	vldr	d7, [r3]
 80070fa:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 80070fe:	ed97 5b7c 	vldr	d5, [r7, #496]	; 0x1f0
 8007102:	eeb0 2a45 	vmov.f32	s4, s10
 8007106:	eef0 2a65 	vmov.f32	s5, s11
 800710a:	eeb0 1a46 	vmov.f32	s2, s12
 800710e:	eef0 1a66 	vmov.f32	s3, s13
 8007112:	2201      	movs	r2, #1
 8007114:	eeb0 0a47 	vmov.f32	s0, s14
 8007118:	eef0 0a67 	vmov.f32	s1, s15
 800711c:	f000 fd3c 	bl	8007b98 <scaraInitLSPB1>
 8007120:	4603      	mov	r3, r0
 8007122:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
										q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.time_total);
					if(status1 != SCARA_STATUS_OK){
 8007126:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 800712a:	2b00      	cmp	r3, #0
 800712c:	d002      	beq.n	8007134 <scaraInitDuty+0xa34>
						return status1;
 800712e:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8007132:	e26c      	b.n	800760e <scaraInitDuty+0xf0e>
				for ( uint8_t i = 0; i < 4; i++) {
 8007134:	f897 319e 	ldrb.w	r3, [r7, #414]	; 0x19e
 8007138:	3301      	adds	r3, #1
 800713a:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 800713e:	f897 319e 	ldrb.w	r3, [r7, #414]	; 0x19e
 8007142:	2b03      	cmp	r3, #3
 8007144:	d9a9      	bls.n	800709a <scaraInitDuty+0x99a>
					}
				}
				myDUTY.time_total = command.time_total;
 8007146:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 800714a:	497a      	ldr	r1, [pc, #488]	; (8007334 <scaraInitDuty+0xc34>)
 800714c:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8007150:	e9c1 2300 	strd	r2, r3, [r1]
 8007154:	e22d      	b.n	80075b2 <scaraInitDuty+0xeb2>
			// Mode Init Acc
			} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8007156:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 800715a:	2b00      	cmp	r3, #0
 800715c:	f040 80d9 	bne.w	8007312 <scaraInitDuty+0xc12>
				for ( uint8_t i = 0; i < 4; i++) {
 8007160:	2300      	movs	r3, #0
 8007162:	f887 319d 	strb.w	r3, [r7, #413]	; 0x19d
 8007166:	e03c      	b.n	80071e2 <scaraInitDuty+0xae2>
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8007168:	f897 219d 	ldrb.w	r2, [r7, #413]	; 0x19d
 800716c:	4971      	ldr	r1, [pc, #452]	; (8007334 <scaraInitDuty+0xc34>)
 800716e:	4613      	mov	r3, r2
 8007170:	005b      	lsls	r3, r3, #1
 8007172:	4413      	add	r3, r2
 8007174:	01db      	lsls	r3, r3, #7
 8007176:	440b      	add	r3, r1
 8007178:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800717c:	2200      	movs	r2, #0
 800717e:	701a      	strb	r2, [r3, #0]
					status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8007180:	f897 219d 	ldrb.w	r2, [r7, #413]	; 0x19d
 8007184:	4613      	mov	r3, r2
 8007186:	005b      	lsls	r3, r3, #1
 8007188:	4413      	add	r3, r2
 800718a:	01db      	lsls	r3, r3, #7
 800718c:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8007190:	4a68      	ldr	r2, [pc, #416]	; (8007334 <scaraInitDuty+0xc34>)
 8007192:	1898      	adds	r0, r3, r2
 8007194:	f897 319d 	ldrb.w	r3, [r7, #413]	; 0x19d
 8007198:	4a67      	ldr	r2, [pc, #412]	; (8007338 <scaraInitDuty+0xc38>)
 800719a:	5cd1      	ldrb	r1, [r2, r3]
 800719c:	f897 319d 	ldrb.w	r3, [r7, #413]	; 0x19d
 80071a0:	f107 0208 	add.w	r2, r7, #8
 80071a4:	00db      	lsls	r3, r3, #3
 80071a6:	4413      	add	r3, r2
 80071a8:	ed93 7b00 	vldr	d7, [r3]
 80071ac:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 80071b0:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 80071b4:	eeb0 2a45 	vmov.f32	s4, s10
 80071b8:	eef0 2a65 	vmov.f32	s5, s11
 80071bc:	eeb0 1a46 	vmov.f32	s2, s12
 80071c0:	eef0 1a66 	vmov.f32	s3, s13
 80071c4:	2200      	movs	r2, #0
 80071c6:	eeb0 0a47 	vmov.f32	s0, s14
 80071ca:	eef0 0a67 	vmov.f32	s1, s15
 80071ce:	f001 fefb 	bl	8008fc8 <scaraInitLSPB>
 80071d2:	4603      	mov	r3, r0
 80071d4:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
				for ( uint8_t i = 0; i < 4; i++) {
 80071d8:	f897 319d 	ldrb.w	r3, [r7, #413]	; 0x19d
 80071dc:	3301      	adds	r3, #1
 80071de:	f887 319d 	strb.w	r3, [r7, #413]	; 0x19d
 80071e2:	f897 319d 	ldrb.w	r3, [r7, #413]	; 0x19d
 80071e6:	2b03      	cmp	r3, #3
 80071e8:	d9be      	bls.n	8007168 <scaraInitDuty+0xa68>
										q[i], DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				}
				myDUTY.time_total = 0;
 80071ea:	4b52      	ldr	r3, [pc, #328]	; (8007334 <scaraInitDuty+0xc34>)
 80071ec:	f603 2138 	addw	r1, r3, #2616	; 0xa38
 80071f0:	f04f 0200 	mov.w	r2, #0
 80071f4:	f04f 0300 	mov.w	r3, #0
 80071f8:	e9c1 2300 	strd	r2, r3, [r1]
				for ( uint8_t i = 0; i < 4; i++) {
 80071fc:	2300      	movs	r3, #0
 80071fe:	f887 319c 	strb.w	r3, [r7, #412]	; 0x19c
 8007202:	e02b      	b.n	800725c <scaraInitDuty+0xb5c>
					if ( myDUTY.joint.trajectory[i].lspb.Tf > myDUTY.time_total) {
 8007204:	f897 219c 	ldrb.w	r2, [r7, #412]	; 0x19c
 8007208:	494a      	ldr	r1, [pc, #296]	; (8007334 <scaraInitDuty+0xc34>)
 800720a:	4613      	mov	r3, r2
 800720c:	005b      	lsls	r3, r3, #1
 800720e:	4413      	add	r3, r2
 8007210:	01db      	lsls	r3, r3, #7
 8007212:	440b      	add	r3, r1
 8007214:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8007218:	e9d3 0100 	ldrd	r0, r1, [r3]
 800721c:	4b45      	ldr	r3, [pc, #276]	; (8007334 <scaraInitDuty+0xc34>)
 800721e:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8007222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007226:	f7f9 fc77 	bl	8000b18 <__aeabi_dcmpgt>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d010      	beq.n	8007252 <scaraInitDuty+0xb52>
						myDUTY.time_total = myDUTY.joint.trajectory[i].lspb.Tf;
 8007230:	f897 219c 	ldrb.w	r2, [r7, #412]	; 0x19c
 8007234:	493f      	ldr	r1, [pc, #252]	; (8007334 <scaraInitDuty+0xc34>)
 8007236:	4613      	mov	r3, r2
 8007238:	005b      	lsls	r3, r3, #1
 800723a:	4413      	add	r3, r2
 800723c:	01db      	lsls	r3, r3, #7
 800723e:	440b      	add	r3, r1
 8007240:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8007244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007248:	493a      	ldr	r1, [pc, #232]	; (8007334 <scaraInitDuty+0xc34>)
 800724a:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 800724e:	e9c1 2300 	strd	r2, r3, [r1]
				for ( uint8_t i = 0; i < 4; i++) {
 8007252:	f897 319c 	ldrb.w	r3, [r7, #412]	; 0x19c
 8007256:	3301      	adds	r3, #1
 8007258:	f887 319c 	strb.w	r3, [r7, #412]	; 0x19c
 800725c:	f897 319c 	ldrb.w	r3, [r7, #412]	; 0x19c
 8007260:	2b03      	cmp	r3, #3
 8007262:	d9cf      	bls.n	8007204 <scaraInitDuty+0xb04>
					}
				}
				for ( uint8_t i = 0; i < 4; i++) {
 8007264:	2300      	movs	r3, #0
 8007266:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
 800726a:	e04d      	b.n	8007308 <scaraInitDuty+0xc08>
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 800726c:	f897 219b 	ldrb.w	r2, [r7, #411]	; 0x19b
 8007270:	4930      	ldr	r1, [pc, #192]	; (8007334 <scaraInitDuty+0xc34>)
 8007272:	4613      	mov	r3, r2
 8007274:	005b      	lsls	r3, r3, #1
 8007276:	4413      	add	r3, r2
 8007278:	01db      	lsls	r3, r3, #7
 800727a:	440b      	add	r3, r1
 800727c:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8007280:	2200      	movs	r2, #0
 8007282:	701a      	strb	r2, [r3, #0]
					myDUTY.joint.trajectory[i].lspb.Tf = myDUTY.time_total;
 8007284:	f897 219b 	ldrb.w	r2, [r7, #411]	; 0x19b
 8007288:	4b2a      	ldr	r3, [pc, #168]	; (8007334 <scaraInitDuty+0xc34>)
 800728a:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800728e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007292:	4c28      	ldr	r4, [pc, #160]	; (8007334 <scaraInitDuty+0xc34>)
 8007294:	4613      	mov	r3, r2
 8007296:	005b      	lsls	r3, r3, #1
 8007298:	4413      	add	r3, r2
 800729a:	01db      	lsls	r3, r3, #7
 800729c:	4423      	add	r3, r4
 800729e:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 80072a2:	e9c3 0100 	strd	r0, r1, [r3]
					status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 80072a6:	f897 219b 	ldrb.w	r2, [r7, #411]	; 0x19b
 80072aa:	4613      	mov	r3, r2
 80072ac:	005b      	lsls	r3, r3, #1
 80072ae:	4413      	add	r3, r2
 80072b0:	01db      	lsls	r3, r3, #7
 80072b2:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80072b6:	4a1f      	ldr	r2, [pc, #124]	; (8007334 <scaraInitDuty+0xc34>)
 80072b8:	1898      	adds	r0, r3, r2
 80072ba:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 80072be:	4a1e      	ldr	r2, [pc, #120]	; (8007338 <scaraInitDuty+0xc38>)
 80072c0:	5cd1      	ldrb	r1, [r2, r3]
 80072c2:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 80072c6:	f107 0208 	add.w	r2, r7, #8
 80072ca:	00db      	lsls	r3, r3, #3
 80072cc:	4413      	add	r3, r2
 80072ce:	ed93 7b00 	vldr	d7, [r3]
 80072d2:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 80072d6:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 80072da:	eeb0 2a45 	vmov.f32	s4, s10
 80072de:	eef0 2a65 	vmov.f32	s5, s11
 80072e2:	eeb0 1a46 	vmov.f32	s2, s12
 80072e6:	eef0 1a66 	vmov.f32	s3, s13
 80072ea:	2201      	movs	r2, #1
 80072ec:	eeb0 0a47 	vmov.f32	s0, s14
 80072f0:	eef0 0a67 	vmov.f32	s1, s15
 80072f4:	f001 fe68 	bl	8008fc8 <scaraInitLSPB>
 80072f8:	4603      	mov	r3, r0
 80072fa:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
				for ( uint8_t i = 0; i < 4; i++) {
 80072fe:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 8007302:	3301      	adds	r3, #1
 8007304:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
 8007308:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 800730c:	2b03      	cmp	r3, #3
 800730e:	d9ad      	bls.n	800726c <scaraInitDuty+0xb6c>
 8007310:	e14f      	b.n	80075b2 <scaraInitDuty+0xeb2>
										q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
				}

			} else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 8007312:	2308      	movs	r3, #8
 8007314:	e17b      	b.n	800760e <scaraInitDuty+0xf0e>
			}
			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == command.trajec_type) {
 8007316:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 800731a:	2b01      	cmp	r3, #1
 800731c:	f040 8145 	bne.w	80075aa <scaraInitDuty+0xeaa>
			// Mode Init Time
			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8007320:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8007324:	2b01      	cmp	r3, #1
 8007326:	d160      	bne.n	80073ea <scaraInitDuty+0xcea>
				for ( uint8_t i = 0; i < 4; i++) {
 8007328:	2300      	movs	r3, #0
 800732a:	f887 319a 	strb.w	r3, [r7, #410]	; 0x19a
 800732e:	e050      	b.n	80073d2 <scaraInitDuty+0xcd2>
 8007330:	2000eab8 	.word	0x2000eab8
 8007334:	2000def8 	.word	0x2000def8
 8007338:	20002084 	.word	0x20002084
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 800733c:	f897 219a 	ldrb.w	r2, [r7, #410]	; 0x19a
 8007340:	49b8      	ldr	r1, [pc, #736]	; (8007624 <scaraInitDuty+0xf24>)
 8007342:	4613      	mov	r3, r2
 8007344:	005b      	lsls	r3, r3, #1
 8007346:	4413      	add	r3, r2
 8007348:	01db      	lsls	r3, r3, #7
 800734a:	440b      	add	r3, r1
 800734c:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8007350:	2201      	movs	r2, #1
 8007352:	701a      	strb	r2, [r3, #0]
					myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 8007354:	f897 219a 	ldrb.w	r2, [r7, #410]	; 0x19a
 8007358:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	; 0x1f0
 800735c:	4cb1      	ldr	r4, [pc, #708]	; (8007624 <scaraInitDuty+0xf24>)
 800735e:	4613      	mov	r3, r2
 8007360:	005b      	lsls	r3, r3, #1
 8007362:	4413      	add	r3, r2
 8007364:	01db      	lsls	r3, r3, #7
 8007366:	4423      	add	r3, r4
 8007368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800736c:	e9c3 0100 	strd	r0, r1, [r3]
					status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8007370:	f897 219a 	ldrb.w	r2, [r7, #410]	; 0x19a
 8007374:	4613      	mov	r3, r2
 8007376:	005b      	lsls	r3, r3, #1
 8007378:	4413      	add	r3, r2
 800737a:	01db      	lsls	r3, r3, #7
 800737c:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8007380:	4aa8      	ldr	r2, [pc, #672]	; (8007624 <scaraInitDuty+0xf24>)
 8007382:	1898      	adds	r0, r3, r2
 8007384:	f897 319a 	ldrb.w	r3, [r7, #410]	; 0x19a
 8007388:	4aa7      	ldr	r2, [pc, #668]	; (8007628 <scaraInitDuty+0xf28>)
 800738a:	5cd1      	ldrb	r1, [r2, r3]
 800738c:	f897 319a 	ldrb.w	r3, [r7, #410]	; 0x19a
 8007390:	f107 0208 	add.w	r2, r7, #8
 8007394:	00db      	lsls	r3, r3, #3
 8007396:	4413      	add	r3, r2
 8007398:	ed93 7b00 	vldr	d7, [r3]
 800739c:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 80073a0:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 80073a4:	eeb0 2a45 	vmov.f32	s4, s10
 80073a8:	eef0 2a65 	vmov.f32	s5, s11
 80073ac:	eeb0 1a46 	vmov.f32	s2, s12
 80073b0:	eef0 1a66 	vmov.f32	s3, s13
 80073b4:	2201      	movs	r2, #1
 80073b6:	eeb0 0a47 	vmov.f32	s0, s14
 80073ba:	eef0 0a67 	vmov.f32	s1, s15
 80073be:	f002 f9d5 	bl	800976c <scaraInitScurve>
 80073c2:	4603      	mov	r3, r0
 80073c4:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
				for ( uint8_t i = 0; i < 4; i++) {
 80073c8:	f897 319a 	ldrb.w	r3, [r7, #410]	; 0x19a
 80073cc:	3301      	adds	r3, #1
 80073ce:	f887 319a 	strb.w	r3, [r7, #410]	; 0x19a
 80073d2:	f897 319a 	ldrb.w	r3, [r7, #410]	; 0x19a
 80073d6:	2b03      	cmp	r3, #3
 80073d8:	d9b0      	bls.n	800733c <scaraInitDuty+0xc3c>
										q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);

				}
				myDUTY.time_total = command.time_total;
 80073da:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 80073de:	4991      	ldr	r1, [pc, #580]	; (8007624 <scaraInitDuty+0xf24>)
 80073e0:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 80073e4:	e9c1 2300 	strd	r2, r3, [r1]
 80073e8:	e0e3      	b.n	80075b2 <scaraInitDuty+0xeb2>
			// Mode Init Acc
			} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 80073ea:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	f040 80d9 	bne.w	80075a6 <scaraInitDuty+0xea6>
				for ( uint8_t i = 0; i < 4; i++) {
 80073f4:	2300      	movs	r3, #0
 80073f6:	f887 3199 	strb.w	r3, [r7, #409]	; 0x199
 80073fa:	e03c      	b.n	8007476 <scaraInitDuty+0xd76>
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80073fc:	f897 2199 	ldrb.w	r2, [r7, #409]	; 0x199
 8007400:	4988      	ldr	r1, [pc, #544]	; (8007624 <scaraInitDuty+0xf24>)
 8007402:	4613      	mov	r3, r2
 8007404:	005b      	lsls	r3, r3, #1
 8007406:	4413      	add	r3, r2
 8007408:	01db      	lsls	r3, r3, #7
 800740a:	440b      	add	r3, r1
 800740c:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8007410:	2201      	movs	r2, #1
 8007412:	701a      	strb	r2, [r3, #0]
					status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8007414:	f897 2199 	ldrb.w	r2, [r7, #409]	; 0x199
 8007418:	4613      	mov	r3, r2
 800741a:	005b      	lsls	r3, r3, #1
 800741c:	4413      	add	r3, r2
 800741e:	01db      	lsls	r3, r3, #7
 8007420:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8007424:	4a7f      	ldr	r2, [pc, #508]	; (8007624 <scaraInitDuty+0xf24>)
 8007426:	1898      	adds	r0, r3, r2
 8007428:	f897 3199 	ldrb.w	r3, [r7, #409]	; 0x199
 800742c:	4a7e      	ldr	r2, [pc, #504]	; (8007628 <scaraInitDuty+0xf28>)
 800742e:	5cd1      	ldrb	r1, [r2, r3]
 8007430:	f897 3199 	ldrb.w	r3, [r7, #409]	; 0x199
 8007434:	f107 0208 	add.w	r2, r7, #8
 8007438:	00db      	lsls	r3, r3, #3
 800743a:	4413      	add	r3, r2
 800743c:	ed93 7b00 	vldr	d7, [r3]
 8007440:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 8007444:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 8007448:	eeb0 2a45 	vmov.f32	s4, s10
 800744c:	eef0 2a65 	vmov.f32	s5, s11
 8007450:	eeb0 1a46 	vmov.f32	s2, s12
 8007454:	eef0 1a66 	vmov.f32	s3, s13
 8007458:	2200      	movs	r2, #0
 800745a:	eeb0 0a47 	vmov.f32	s0, s14
 800745e:	eef0 0a67 	vmov.f32	s1, s15
 8007462:	f002 f983 	bl	800976c <scaraInitScurve>
 8007466:	4603      	mov	r3, r0
 8007468:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
				for ( uint8_t i = 0; i < 4; i++) {
 800746c:	f897 3199 	ldrb.w	r3, [r7, #409]	; 0x199
 8007470:	3301      	adds	r3, #1
 8007472:	f887 3199 	strb.w	r3, [r7, #409]	; 0x199
 8007476:	f897 3199 	ldrb.w	r3, [r7, #409]	; 0x199
 800747a:	2b03      	cmp	r3, #3
 800747c:	d9be      	bls.n	80073fc <scaraInitDuty+0xcfc>
										q[i], DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				}
				myDUTY.time_total = 0;
 800747e:	4b69      	ldr	r3, [pc, #420]	; (8007624 <scaraInitDuty+0xf24>)
 8007480:	f603 2138 	addw	r1, r3, #2616	; 0xa38
 8007484:	f04f 0200 	mov.w	r2, #0
 8007488:	f04f 0300 	mov.w	r3, #0
 800748c:	e9c1 2300 	strd	r2, r3, [r1]
				for ( uint8_t i = 0; i < 4; i++) {
 8007490:	2300      	movs	r3, #0
 8007492:	f887 3198 	strb.w	r3, [r7, #408]	; 0x198
 8007496:	e02b      	b.n	80074f0 <scaraInitDuty+0xdf0>
					if ( myDUTY.joint.trajectory[i].scurve.Tf > myDUTY.time_total) {
 8007498:	f897 2198 	ldrb.w	r2, [r7, #408]	; 0x198
 800749c:	4961      	ldr	r1, [pc, #388]	; (8007624 <scaraInitDuty+0xf24>)
 800749e:	4613      	mov	r3, r2
 80074a0:	005b      	lsls	r3, r3, #1
 80074a2:	4413      	add	r3, r2
 80074a4:	01db      	lsls	r3, r3, #7
 80074a6:	440b      	add	r3, r1
 80074a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80074b0:	4b5c      	ldr	r3, [pc, #368]	; (8007624 <scaraInitDuty+0xf24>)
 80074b2:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80074b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ba:	f7f9 fb2d 	bl	8000b18 <__aeabi_dcmpgt>
 80074be:	4603      	mov	r3, r0
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d010      	beq.n	80074e6 <scaraInitDuty+0xde6>
						myDUTY.time_total = myDUTY.joint.trajectory[i].scurve.Tf;
 80074c4:	f897 2198 	ldrb.w	r2, [r7, #408]	; 0x198
 80074c8:	4956      	ldr	r1, [pc, #344]	; (8007624 <scaraInitDuty+0xf24>)
 80074ca:	4613      	mov	r3, r2
 80074cc:	005b      	lsls	r3, r3, #1
 80074ce:	4413      	add	r3, r2
 80074d0:	01db      	lsls	r3, r3, #7
 80074d2:	440b      	add	r3, r1
 80074d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074dc:	4951      	ldr	r1, [pc, #324]	; (8007624 <scaraInitDuty+0xf24>)
 80074de:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 80074e2:	e9c1 2300 	strd	r2, r3, [r1]
				for ( uint8_t i = 0; i < 4; i++) {
 80074e6:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 80074ea:	3301      	adds	r3, #1
 80074ec:	f887 3198 	strb.w	r3, [r7, #408]	; 0x198
 80074f0:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 80074f4:	2b03      	cmp	r3, #3
 80074f6:	d9cf      	bls.n	8007498 <scaraInitDuty+0xd98>
					}
				}
				for ( uint8_t i = 0; i < 4; i++) {
 80074f8:	2300      	movs	r3, #0
 80074fa:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
 80074fe:	e04d      	b.n	800759c <scaraInitDuty+0xe9c>
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8007500:	f897 2197 	ldrb.w	r2, [r7, #407]	; 0x197
 8007504:	4947      	ldr	r1, [pc, #284]	; (8007624 <scaraInitDuty+0xf24>)
 8007506:	4613      	mov	r3, r2
 8007508:	005b      	lsls	r3, r3, #1
 800750a:	4413      	add	r3, r2
 800750c:	01db      	lsls	r3, r3, #7
 800750e:	440b      	add	r3, r1
 8007510:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8007514:	2201      	movs	r2, #1
 8007516:	701a      	strb	r2, [r3, #0]
					myDUTY.joint.trajectory[i].scurve.Tf = myDUTY.time_total;
 8007518:	f897 2197 	ldrb.w	r2, [r7, #407]	; 0x197
 800751c:	4b41      	ldr	r3, [pc, #260]	; (8007624 <scaraInitDuty+0xf24>)
 800751e:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8007522:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007526:	4c3f      	ldr	r4, [pc, #252]	; (8007624 <scaraInitDuty+0xf24>)
 8007528:	4613      	mov	r3, r2
 800752a:	005b      	lsls	r3, r3, #1
 800752c:	4413      	add	r3, r2
 800752e:	01db      	lsls	r3, r3, #7
 8007530:	4423      	add	r3, r4
 8007532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007536:	e9c3 0100 	strd	r0, r1, [r3]
					status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 800753a:	f897 2197 	ldrb.w	r2, [r7, #407]	; 0x197
 800753e:	4613      	mov	r3, r2
 8007540:	005b      	lsls	r3, r3, #1
 8007542:	4413      	add	r3, r2
 8007544:	01db      	lsls	r3, r3, #7
 8007546:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 800754a:	4a36      	ldr	r2, [pc, #216]	; (8007624 <scaraInitDuty+0xf24>)
 800754c:	1898      	adds	r0, r3, r2
 800754e:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8007552:	4a35      	ldr	r2, [pc, #212]	; (8007628 <scaraInitDuty+0xf28>)
 8007554:	5cd1      	ldrb	r1, [r2, r3]
 8007556:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 800755a:	f107 0208 	add.w	r2, r7, #8
 800755e:	00db      	lsls	r3, r3, #3
 8007560:	4413      	add	r3, r2
 8007562:	ed93 7b00 	vldr	d7, [r3]
 8007566:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 800756a:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 800756e:	eeb0 2a45 	vmov.f32	s4, s10
 8007572:	eef0 2a65 	vmov.f32	s5, s11
 8007576:	eeb0 1a46 	vmov.f32	s2, s12
 800757a:	eef0 1a66 	vmov.f32	s3, s13
 800757e:	2201      	movs	r2, #1
 8007580:	eeb0 0a47 	vmov.f32	s0, s14
 8007584:	eef0 0a67 	vmov.f32	s1, s15
 8007588:	f002 f8f0 	bl	800976c <scaraInitScurve>
 800758c:	4603      	mov	r3, r0
 800758e:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
				for ( uint8_t i = 0; i < 4; i++) {
 8007592:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8007596:	3301      	adds	r3, #1
 8007598:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
 800759c:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 80075a0:	2b03      	cmp	r3, #3
 80075a2:	d9ad      	bls.n	8007500 <scaraInitDuty+0xe00>
 80075a4:	e005      	b.n	80075b2 <scaraInitDuty+0xeb2>
										q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
				}

			} else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 80075a6:	2308      	movs	r3, #8
 80075a8:	e031      	b.n	800760e <scaraInitDuty+0xf0e>
			}

			} else {
				return SCARA_STATUS_ERROR_TRAJECTORY;
 80075aa:	2305      	movs	r3, #5
 80075ac:	e02f      	b.n	800760e <scaraInitDuty+0xf0e>
			}

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 80075ae:	2302      	movs	r3, #2
 80075b0:	e02d      	b.n	800760e <scaraInitDuty+0xf0e>
	}

	// Reset time and distance
	positionCurrent.t = 0;
 80075b2:	491e      	ldr	r1, [pc, #120]	; (800762c <scaraInitDuty+0xf2c>)
 80075b4:	f04f 0200 	mov.w	r2, #0
 80075b8:	f04f 0300 	mov.w	r3, #0
 80075bc:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	positionCurrent.total_time = myDUTY.time_total;
 80075c0:	4b18      	ldr	r3, [pc, #96]	; (8007624 <scaraInitDuty+0xf24>)
 80075c2:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80075c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ca:	4918      	ldr	r1, [pc, #96]	; (800762c <scaraInitDuty+0xf2c>)
 80075cc:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	positionNext.t = 0;
 80075d0:	4917      	ldr	r1, [pc, #92]	; (8007630 <scaraInitDuty+0xf30>)
 80075d2:	f04f 0200 	mov.w	r2, #0
 80075d6:	f04f 0300 	mov.w	r3, #0
 80075da:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	positionNext.total_time = myDUTY.time_total;
 80075de:	4b11      	ldr	r3, [pc, #68]	; (8007624 <scaraInitDuty+0xf24>)
 80075e0:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80075e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e8:	4911      	ldr	r1, [pc, #68]	; (8007630 <scaraInitDuty+0xf30>)
 80075ea:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	positionTrue.t = 0;
 80075ee:	4911      	ldr	r1, [pc, #68]	; (8007634 <scaraInitDuty+0xf34>)
 80075f0:	f04f 0200 	mov.w	r2, #0
 80075f4:	f04f 0300 	mov.w	r3, #0
 80075f8:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	positionTrue.total_time = myDUTY.time_total;
 80075fc:	4b09      	ldr	r3, [pc, #36]	; (8007624 <scaraInitDuty+0xf24>)
 80075fe:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8007602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007606:	490b      	ldr	r1, [pc, #44]	; (8007634 <scaraInitDuty+0xf34>)
 8007608:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	return SCARA_STATUS_OK;
 800760c:	2300      	movs	r3, #0
}
 800760e:	4618      	mov	r0, r3
 8007610:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
 8007614:	46bd      	mov	sp, r7
 8007616:	ecbd 8b02 	vpop	{d8}
 800761a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800761e:	b004      	add	sp, #16
 8007620:	4770      	bx	lr
 8007622:	bf00      	nop
 8007624:	2000def8 	.word	0x2000def8
 8007628:	20002084 	.word	0x20002084
 800762c:	2000eab8 	.word	0x2000eab8
 8007630:	2000ec38 	.word	0x2000ec38
 8007634:	2000eb78 	.word	0x2000eb78

08007638 <scaraInitLine>:

/* Compute straight line path parameters */
SCARA_StatusTypeDef	scaraInitLine		(Path_Line_TypeDef *line,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end) {
 8007638:	b082      	sub	sp, #8
 800763a:	b5b0      	push	{r4, r5, r7, lr}
 800763c:	b0b0      	sub	sp, #192	; 0xc0
 800763e:	af2e      	add	r7, sp, #184	; 0xb8
 8007640:	6078      	str	r0, [r7, #4]
 8007642:	f107 0118 	add.w	r1, r7, #24
 8007646:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE ==  kinematicInverse(&end, start)) {
 800764a:	f107 04d8 	add.w	r4, r7, #216	; 0xd8
 800764e:	4668      	mov	r0, sp
 8007650:	f107 0320 	add.w	r3, r7, #32
 8007654:	22b8      	movs	r2, #184	; 0xb8
 8007656:	4619      	mov	r1, r3
 8007658:	f00e fb4a 	bl	8015cf0 <memcpy>
 800765c:	f107 0318 	add.w	r3, r7, #24
 8007660:	cb0c      	ldmia	r3, {r2, r3}
 8007662:	4620      	mov	r0, r4
 8007664:	f7fd fd24 	bl	80050b0 <kinematicInverse>
 8007668:	4603      	mov	r3, r0
 800766a:	2b00      	cmp	r3, #0
 800766c:	d101      	bne.n	8007672 <scaraInitLine+0x3a>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800766e:	2307      	movs	r3, #7
 8007670:	e08e      	b.n	8007790 <scaraInitLine+0x158>
	}
	// Init line params
	line->x1 = end.x;
 8007672:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8007676:	6879      	ldr	r1, [r7, #4]
 8007678:	e9c1 2302 	strd	r2, r3, [r1, #8]
	line->y1 = end.y;
 800767c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8007680:	6879      	ldr	r1, [r7, #4]
 8007682:	e9c1 2306 	strd	r2, r3, [r1, #24]
	line->z1 = end.z;
 8007686:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800768a:	6879      	ldr	r1, [r7, #4]
 800768c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	line->x0 = start.x;
 8007690:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007694:	6879      	ldr	r1, [r7, #4]
 8007696:	e9c1 2300 	strd	r2, r3, [r1]
	line->y0 = start.y;
 800769a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800769e:	6879      	ldr	r1, [r7, #4]
 80076a0:	e9c1 2304 	strd	r2, r3, [r1, #16]
	line->z0 = start.z;
 80076a4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80076a8:	6879      	ldr	r1, [r7, #4]
 80076aa:	e9c1 2308 	strd	r2, r3, [r1, #32]
	line->denta_x = end.x  -  start.x;
 80076ae:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 80076b2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80076b6:	f7f8 fde7 	bl	8000288 <__aeabi_dsub>
 80076ba:	4602      	mov	r2, r0
 80076bc:	460b      	mov	r3, r1
 80076be:	6879      	ldr	r1, [r7, #4]
 80076c0:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	line->denta_y = end.y  -  start.y;
 80076c4:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 80076c8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80076cc:	f7f8 fddc 	bl	8000288 <__aeabi_dsub>
 80076d0:	4602      	mov	r2, r0
 80076d2:	460b      	mov	r3, r1
 80076d4:	6879      	ldr	r1, [r7, #4]
 80076d6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	line->denta_z = end.z  -  start.z;
 80076da:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 80076de:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80076e2:	f7f8 fdd1 	bl	8000288 <__aeabi_dsub>
 80076e6:	4602      	mov	r2, r0
 80076e8:	460b      	mov	r3, r1
 80076ea:	6879      	ldr	r1, [r7, #4]
 80076ec:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80076fc:	f7f8 ff7c 	bl	80005f8 <__aeabi_dmul>
 8007700:	4602      	mov	r2, r0
 8007702:	460b      	mov	r3, r1
 8007704:	4614      	mov	r4, r2
 8007706:	461d      	mov	r5, r3
			       +(line->denta_y)*(line->denta_y)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8007714:	f7f8 ff70 	bl	80005f8 <__aeabi_dmul>
 8007718:	4602      	mov	r2, r0
 800771a:	460b      	mov	r3, r1
 800771c:	4620      	mov	r0, r4
 800771e:	4629      	mov	r1, r5
 8007720:	f7f8 fdb4 	bl	800028c <__adddf3>
 8007724:	4602      	mov	r2, r0
 8007726:	460b      	mov	r3, r1
 8007728:	4614      	mov	r4, r2
 800772a:	461d      	mov	r5, r3
				   +(line->denta_z)*(line->denta_z));
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8007738:	f7f8 ff5e 	bl	80005f8 <__aeabi_dmul>
 800773c:	4602      	mov	r2, r0
 800773e:	460b      	mov	r3, r1
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 8007740:	4620      	mov	r0, r4
 8007742:	4629      	mov	r1, r5
 8007744:	f7f8 fda2 	bl	800028c <__adddf3>
 8007748:	4602      	mov	r2, r0
 800774a:	460b      	mov	r3, r1
 800774c:	ec43 2b17 	vmov	d7, r2, r3
 8007750:	eeb0 0a47 	vmov.f32	s0, s14
 8007754:	eef0 0a67 	vmov.f32	s1, s15
 8007758:	f013 f8da 	bl	801a910 <sqrt>
 800775c:	eeb0 7a40 	vmov.f32	s14, s0
 8007760:	eef0 7a60 	vmov.f32	s15, s1
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	line->x_current = line->x0;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007770:	6879      	ldr	r1, [r7, #4]
 8007772:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	line->y_current = line->y0;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800777c:	6879      	ldr	r1, [r7, #4]
 800777e:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	line->z_current = line->z0;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007788:	6879      	ldr	r1, [r7, #4]
 800778a:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

	return SCARA_STATUS_OK;
 800778e:	2300      	movs	r3, #0
}
 8007790:	4618      	mov	r0, r3
 8007792:	3708      	adds	r7, #8
 8007794:	46bd      	mov	sp, r7
 8007796:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800779a:	b002      	add	sp, #8
 800779c:	4770      	bx	lr
	...

080077a0 <scaraInitCircle>:
/* Compute circular path parameters */
SCARA_StatusTypeDef	scaraInitCircle		(Path_Circle_TypeDef *circle,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end,
										SCARA_PositionTypeDef center,
										int32_t dir){
 80077a0:	b082      	sub	sp, #8
 80077a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077a6:	b0c5      	sub	sp, #276	; 0x114
 80077a8:	af2e      	add	r7, sp, #184	; 0xb8
 80077aa:	60f8      	str	r0, [r7, #12]
 80077ac:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80077b0:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE == kinematicInverse(&end, start) ) {
 80077b4:	f507 76a0 	add.w	r6, r7, #320	; 0x140
 80077b8:	4668      	mov	r0, sp
 80077ba:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80077be:	22b8      	movs	r2, #184	; 0xb8
 80077c0:	4619      	mov	r1, r3
 80077c2:	f00e fa95 	bl	8015cf0 <memcpy>
 80077c6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80077ca:	cb0c      	ldmia	r3, {r2, r3}
 80077cc:	4630      	mov	r0, r6
 80077ce:	f7fd fc6f 	bl	80050b0 <kinematicInverse>
 80077d2:	4603      	mov	r3, r0
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d101      	bne.n	80077dc <scaraInitCircle+0x3c>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80077d8:	2307      	movs	r3, #7
 80077da:	e17b      	b.n	8007ad4 <scaraInitCircle+0x334>
	}

//	if( 1 != dir && -1 != dir) {
//		return SCARA_STATUS_ERROR_PARA;// error direction param !!!
//	}
	if(dir != 1 && dir != -1){
 80077dc:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d006      	beq.n	80077f2 <scaraInitCircle+0x52>
 80077e4:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 80077e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077ec:	d001      	beq.n	80077f2 <scaraInitCircle+0x52>
		return SCARA_STATUS_ERROR_PARA;
 80077ee:	2306      	movs	r3, #6
 80077f0:	e170      	b.n	8007ad4 <scaraInitCircle+0x334>
	}

	double x_start, y_start, x_stop, y_stop;
	double r1, r2, angle_start, angle_stop, delta_angle;
	x_start = start.x - center.x;
 80077f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80077f6:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 80077fa:	f7f8 fd45 	bl	8000288 <__aeabi_dsub>
 80077fe:	4602      	mov	r2, r0
 8007800:	460b      	mov	r3, r1
 8007802:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	y_start = start.y - center.y;
 8007806:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800780a:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 800780e:	f7f8 fd3b 	bl	8000288 <__aeabi_dsub>
 8007812:	4602      	mov	r2, r0
 8007814:	460b      	mov	r3, r1
 8007816:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	x_stop  = end.x  - center.x;
 800781a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800781e:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8007822:	f7f8 fd31 	bl	8000288 <__aeabi_dsub>
 8007826:	4602      	mov	r2, r0
 8007828:	460b      	mov	r3, r1
 800782a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	y_stop  = end.y  - center.y;
 800782e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8007832:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8007836:	f7f8 fd27 	bl	8000288 <__aeabi_dsub>
 800783a:	4602      	mov	r2, r0
 800783c:	460b      	mov	r3, r1
 800783e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	r1 = sqrt(x_start*x_start + y_start*y_start);
 8007842:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007846:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800784a:	f7f8 fed5 	bl	80005f8 <__aeabi_dmul>
 800784e:	4602      	mov	r2, r0
 8007850:	460b      	mov	r3, r1
 8007852:	4692      	mov	sl, r2
 8007854:	469b      	mov	fp, r3
 8007856:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800785a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800785e:	f7f8 fecb 	bl	80005f8 <__aeabi_dmul>
 8007862:	4602      	mov	r2, r0
 8007864:	460b      	mov	r3, r1
 8007866:	4650      	mov	r0, sl
 8007868:	4659      	mov	r1, fp
 800786a:	f7f8 fd0f 	bl	800028c <__adddf3>
 800786e:	4602      	mov	r2, r0
 8007870:	460b      	mov	r3, r1
 8007872:	ec43 2b17 	vmov	d7, r2, r3
 8007876:	eeb0 0a47 	vmov.f32	s0, s14
 800787a:	eef0 0a67 	vmov.f32	s1, s15
 800787e:	f013 f847 	bl	801a910 <sqrt>
 8007882:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	r2 = sqrt(x_stop*x_stop + y_stop*y_stop);
 8007886:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800788a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800788e:	f7f8 feb3 	bl	80005f8 <__aeabi_dmul>
 8007892:	4602      	mov	r2, r0
 8007894:	460b      	mov	r3, r1
 8007896:	4692      	mov	sl, r2
 8007898:	469b      	mov	fp, r3
 800789a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800789e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80078a2:	f7f8 fea9 	bl	80005f8 <__aeabi_dmul>
 80078a6:	4602      	mov	r2, r0
 80078a8:	460b      	mov	r3, r1
 80078aa:	4650      	mov	r0, sl
 80078ac:	4659      	mov	r1, fp
 80078ae:	f7f8 fced 	bl	800028c <__adddf3>
 80078b2:	4602      	mov	r2, r0
 80078b4:	460b      	mov	r3, r1
 80078b6:	ec43 2b17 	vmov	d7, r2, r3
 80078ba:	eeb0 0a47 	vmov.f32	s0, s14
 80078be:	eef0 0a67 	vmov.f32	s1, s15
 80078c2:	f013 f825 	bl	801a910 <sqrt>
 80078c6:	ed87 0b08 	vstr	d0, [r7, #32]

	if( 1.0 < fabs(r1 - r2)) {
 80078ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80078ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80078d2:	f7f8 fcd9 	bl	8000288 <__aeabi_dsub>
 80078d6:	4602      	mov	r2, r0
 80078d8:	460b      	mov	r3, r1
 80078da:	4690      	mov	r8, r2
 80078dc:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80078e0:	f04f 0200 	mov.w	r2, #0
 80078e4:	4b84      	ldr	r3, [pc, #528]	; (8007af8 <scaraInitCircle+0x358>)
 80078e6:	4640      	mov	r0, r8
 80078e8:	4649      	mov	r1, r9
 80078ea:	f7f9 f915 	bl	8000b18 <__aeabi_dcmpgt>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d001      	beq.n	80078f8 <scaraInitCircle+0x158>
		return SCARA_STATUS_ERROR_PARA; //start & stop are not in a circle together !!
 80078f4:	2306      	movs	r3, #6
 80078f6:	e0ed      	b.n	8007ad4 <scaraInitCircle+0x334>
	}

	if (r1 < 0.1 || r2 < 0.1) {
 80078f8:	a37b      	add	r3, pc, #492	; (adr r3, 8007ae8 <scaraInitCircle+0x348>)
 80078fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007902:	f7f9 f8eb 	bl	8000adc <__aeabi_dcmplt>
 8007906:	4603      	mov	r3, r0
 8007908:	2b00      	cmp	r3, #0
 800790a:	d109      	bne.n	8007920 <scaraInitCircle+0x180>
 800790c:	a376      	add	r3, pc, #472	; (adr r3, 8007ae8 <scaraInitCircle+0x348>)
 800790e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007912:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007916:	f7f9 f8e1 	bl	8000adc <__aeabi_dcmplt>
 800791a:	4603      	mov	r3, r0
 800791c:	2b00      	cmp	r3, #0
 800791e:	d001      	beq.n	8007924 <scaraInitCircle+0x184>
		return SCARA_STATUS_ERROR_PARA; //start and center almost in the same phace, radius = 0 !!
 8007920:	2306      	movs	r3, #6
 8007922:	e0d7      	b.n	8007ad4 <scaraInitCircle+0x334>
	}

	angle_start = atan2(y_start, x_start);
 8007924:	ed97 1b12 	vldr	d1, [r7, #72]	; 0x48
 8007928:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800792c:	f012 ffee 	bl	801a90c <atan2>
 8007930:	ed87 0b06 	vstr	d0, [r7, #24]
	angle_stop  = atan2(y_stop, x_stop);
 8007934:	ed97 1b0e 	vldr	d1, [r7, #56]	; 0x38
 8007938:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800793c:	f012 ffe6 	bl	801a90c <atan2>
 8007940:	ed87 0b04 	vstr	d0, [r7, #16]
	delta_angle = angle_stop - angle_start;
 8007944:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007948:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800794c:	f7f8 fc9c 	bl	8000288 <__aeabi_dsub>
 8007950:	4602      	mov	r2, r0
 8007952:	460b      	mov	r3, r1
 8007954:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	if (delta_angle < 0 && dir > 0) {
 8007958:	f04f 0200 	mov.w	r2, #0
 800795c:	f04f 0300 	mov.w	r3, #0
 8007960:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007964:	f7f9 f8ba 	bl	8000adc <__aeabi_dcmplt>
 8007968:	4603      	mov	r3, r0
 800796a:	2b00      	cmp	r3, #0
 800796c:	d015      	beq.n	800799a <scaraInitCircle+0x1fa>
 800796e:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8007972:	2b00      	cmp	r3, #0
 8007974:	dd11      	ble.n	800799a <scaraInitCircle+0x1fa>
		delta_angle = 2*PI - fabs(delta_angle); //this state mean that the arc radius is over 180
 8007976:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007978:	603b      	str	r3, [r7, #0]
 800797a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800797c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007980:	607b      	str	r3, [r7, #4]
 8007982:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007986:	a15a      	add	r1, pc, #360	; (adr r1, 8007af0 <scaraInitCircle+0x350>)
 8007988:	e9d1 0100 	ldrd	r0, r1, [r1]
 800798c:	f7f8 fc7c 	bl	8000288 <__aeabi_dsub>
 8007990:	4602      	mov	r2, r0
 8007992:	460b      	mov	r3, r1
 8007994:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8007998:	e01d      	b.n	80079d6 <scaraInitCircle+0x236>
	}else if(delta_angle > 0 && dir < 0){
 800799a:	f04f 0200 	mov.w	r2, #0
 800799e:	f04f 0300 	mov.w	r3, #0
 80079a2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80079a6:	f7f9 f8b7 	bl	8000b18 <__aeabi_dcmpgt>
 80079aa:	4603      	mov	r3, r0
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d012      	beq.n	80079d6 <scaraInitCircle+0x236>
 80079b0:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	da0e      	bge.n	80079d6 <scaraInitCircle+0x236>
		delta_angle = 2*PI - fabs(delta_angle);
 80079b8:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 80079ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079bc:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80079c0:	4622      	mov	r2, r4
 80079c2:	462b      	mov	r3, r5
 80079c4:	a14a      	add	r1, pc, #296	; (adr r1, 8007af0 <scaraInitCircle+0x350>)
 80079c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079ca:	f7f8 fc5d 	bl	8000288 <__aeabi_dsub>
 80079ce:	4602      	mov	r2, r0
 80079d0:	460b      	mov	r3, r1
 80079d2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	}
	if(delta_angle*dir < 0){
 80079d6:	f8d7 02c0 	ldr.w	r0, [r7, #704]	; 0x2c0
 80079da:	f7f8 fda3 	bl	8000524 <__aeabi_i2d>
 80079de:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80079e2:	f7f8 fe09 	bl	80005f8 <__aeabi_dmul>
 80079e6:	4602      	mov	r2, r0
 80079e8:	460b      	mov	r3, r1
 80079ea:	4610      	mov	r0, r2
 80079ec:	4619      	mov	r1, r3
 80079ee:	f04f 0200 	mov.w	r2, #0
 80079f2:	f04f 0300 	mov.w	r3, #0
 80079f6:	f7f9 f871 	bl	8000adc <__aeabi_dcmplt>
 80079fa:	4603      	mov	r3, r0
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d005      	beq.n	8007a0c <scaraInitCircle+0x26c>
		delta_angle = fabs(delta_angle);
 8007a00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a02:	653b      	str	r3, [r7, #80]	; 0x50
 8007a04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a0a:	657b      	str	r3, [r7, #84]	; 0x54

//	if ( 0 > dir) {
//		delta_angle = 2*PI - delta_angle;
//	}
	// Init circle params
	circle->dir = dir;
 8007a0c:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8007a10:	b25a      	sxtb	r2, r3
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	701a      	strb	r2, [r3, #0]
	circle->radius = r1;
 8007a16:	68f9      	ldr	r1, [r7, #12]
 8007a18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007a1c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	circle->angle_start = angle_start;
 8007a20:	68f9      	ldr	r1, [r7, #12]
 8007a22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a26:	e9c1 2304 	strd	r2, r3, [r1, #16]
	circle->angle_stop  = angle_stop;
 8007a2a:	68f9      	ldr	r1, [r7, #12]
 8007a2c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007a30:	e9c1 2306 	strd	r2, r3, [r1, #24]
	circle->total_angle = delta_angle;
 8007a34:	68f9      	ldr	r1, [r7, #12]
 8007a36:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007a3a:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	circle->total_s = delta_angle*r1;
 8007a3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007a42:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007a46:	f7f8 fdd7 	bl	80005f8 <__aeabi_dmul>
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	460b      	mov	r3, r1
 8007a4e:	68f9      	ldr	r1, [r7, #12]
 8007a50:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	circle->x0 = start.x;
 8007a54:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8007a58:	68f9      	ldr	r1, [r7, #12]
 8007a5a:	e9c1 2308 	strd	r2, r3, [r1, #32]
	circle->y0 = start.y;
 8007a5e:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8007a62:	68f9      	ldr	r1, [r7, #12]
 8007a64:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	circle->x1 = end.x;
 8007a68:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8007a6c:	68f9      	ldr	r1, [r7, #12]
 8007a6e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	circle->y1 = end.y;
 8007a72:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8007a76:	68f9      	ldr	r1, [r7, #12]
 8007a78:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	circle->xi = center.x;
 8007a7c:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8007a80:	68f9      	ldr	r1, [r7, #12]
 8007a82:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	circle->yi = center.y;
 8007a86:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8007a8a:	68f9      	ldr	r1, [r7, #12]
 8007a8c:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	circle->z0 = start.z;
 8007a90:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8007a94:	68f9      	ldr	r1, [r7, #12]
 8007a96:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	circle->z1 = start.z;
 8007a9a:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8007a9e:	68f9      	ldr	r1, [r7, #12]
 8007aa0:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	circle->zi = start.z;
 8007aa4:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8007aa8:	68f9      	ldr	r1, [r7, #12]
 8007aaa:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	circle->x_current = circle->x0;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ab4:	68f9      	ldr	r1, [r7, #12]
 8007ab6:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	circle->y_current = circle->y0;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8007ac0:	68f9      	ldr	r1, [r7, #12]
 8007ac2:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
	circle->z_current = circle->z0;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8007acc:	68f9      	ldr	r1, [r7, #12]
 8007ace:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88

	return SCARA_STATUS_OK;
 8007ad2:	2300      	movs	r3, #0
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	375c      	adds	r7, #92	; 0x5c
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ade:	b002      	add	sp, #8
 8007ae0:	4770      	bx	lr
 8007ae2:	bf00      	nop
 8007ae4:	f3af 8000 	nop.w
 8007ae8:	9999999a 	.word	0x9999999a
 8007aec:	3fb99999 	.word	0x3fb99999
 8007af0:	60000000 	.word	0x60000000
 8007af4:	401921fb 	.word	0x401921fb
 8007af8:	3ff00000 	.word	0x3ff00000

08007afc <scaraInitLinear>:

SCARA_StatusTypeDef scaraInitLinear(Trajectory_Linear_TypeDef *linear, Trajectory_TargetTypeDef target, double total_s,
									ModeInitTypeDef modeinit, double additional_factor)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b086      	sub	sp, #24
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6178      	str	r0, [r7, #20]
 8007b04:	460b      	mov	r3, r1
 8007b06:	ed87 0b02 	vstr	d0, [r7, #8]
 8007b0a:	ed87 1b00 	vstr	d1, [r7]
 8007b0e:	74fb      	strb	r3, [r7, #19]
 8007b10:	4613      	mov	r3, r2
 8007b12:	74bb      	strb	r3, [r7, #18]

	if(target == TRAJECTORY_3D){
 8007b14:	7cfb      	ldrb	r3, [r7, #19]
 8007b16:	2b04      	cmp	r3, #4
 8007b18:	d004      	beq.n	8007b24 <scaraInitLinear+0x28>

	}else if(target == TRAJECTORY_ROLL){
 8007b1a:	7cfb      	ldrb	r3, [r7, #19]
 8007b1c:	2b05      	cmp	r3, #5
 8007b1e:	d001      	beq.n	8007b24 <scaraInitLinear+0x28>

	}else{
		return SCARA_STATUS_ERROR_PARA;
 8007b20:	2306      	movs	r3, #6
 8007b22:	e032      	b.n	8007b8a <scaraInitLinear+0x8e>
	}

	if(modeinit == DUTY_MODE_INIT_QT){
 8007b24:	7cbb      	ldrb	r3, [r7, #18]
 8007b26:	2b03      	cmp	r3, #3
 8007b28:	d110      	bne.n	8007b4c <scaraInitLinear+0x50>
		linear->constant_v = total_s / additional_factor;
 8007b2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b2e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007b32:	f7f8 fe8b 	bl	800084c <__aeabi_ddiv>
 8007b36:	4602      	mov	r2, r0
 8007b38:	460b      	mov	r3, r1
 8007b3a:	6979      	ldr	r1, [r7, #20]
 8007b3c:	e9c1 2302 	strd	r2, r3, [r1, #8]
		linear->Tf = additional_factor;
 8007b40:	6979      	ldr	r1, [r7, #20]
 8007b42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b46:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8007b4a:	e01d      	b.n	8007b88 <scaraInitLinear+0x8c>
		//linear->number_of_sample = ceilf(additional_factor / T_SAMPLING); // ceiling
	}else if(modeinit == DUTY_MODE_INIT_QV){
 8007b4c:	7cbb      	ldrb	r3, [r7, #18]
 8007b4e:	2b02      	cmp	r3, #2
 8007b50:	d118      	bne.n	8007b84 <scaraInitLinear+0x88>
		linear->constant_v = additional_factor * V_MOVE_MAX;
 8007b52:	f04f 0200 	mov.w	r2, #0
 8007b56:	4b0f      	ldr	r3, [pc, #60]	; (8007b94 <scaraInitLinear+0x98>)
 8007b58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b5c:	f7f8 fd4c 	bl	80005f8 <__aeabi_dmul>
 8007b60:	4602      	mov	r2, r0
 8007b62:	460b      	mov	r3, r1
 8007b64:	6979      	ldr	r1, [r7, #20]
 8007b66:	e9c1 2302 	strd	r2, r3, [r1, #8]
		linear->Tf = total_s / linear->constant_v;
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007b70:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007b74:	f7f8 fe6a 	bl	800084c <__aeabi_ddiv>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	460b      	mov	r3, r1
 8007b7c:	6979      	ldr	r1, [r7, #20]
 8007b7e:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8007b82:	e001      	b.n	8007b88 <scaraInitLinear+0x8c>
	}else{
		return SCARA_STATUS_ERROR_PARA;
 8007b84:	2306      	movs	r3, #6
 8007b86:	e000      	b.n	8007b8a <scaraInitLinear+0x8e>
	}

	return SCARA_STATUS_OK;
 8007b88:	2300      	movs	r3, #0
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3718      	adds	r7, #24
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	bf00      	nop
 8007b94:	40877000 	.word	0x40877000

08007b98 <scaraInitLSPB1>:
SCARA_StatusTypeDef	scaraInitLSPB1		(Trajectory_LSPB_TypeDef *lspb,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double additional_factor){
 8007b98:	b5b0      	push	{r4, r5, r7, lr}
 8007b9a:	b096      	sub	sp, #88	; 0x58
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	61f8      	str	r0, [r7, #28]
 8007ba0:	460b      	mov	r3, r1
 8007ba2:	ed87 0b04 	vstr	d0, [r7, #16]
 8007ba6:	ed87 1b02 	vstr	d1, [r7, #8]
 8007baa:	ed87 2b00 	vstr	d2, [r7]
 8007bae:	76fb      	strb	r3, [r7, #27]
 8007bb0:	4613      	mov	r3, r2
 8007bb2:	76bb      	strb	r3, [r7, #26]
	double v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	uint32_t no_sample;
	if(total_s < 0){
 8007bb4:	f04f 0200 	mov.w	r2, #0
 8007bb8:	f04f 0300 	mov.w	r3, #0
 8007bbc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007bc0:	f7f8 ff8c 	bl	8000adc <__aeabi_dcmplt>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d009      	beq.n	8007bde <scaraInitLSPB1+0x46>
		total_s = -total_s;
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	613b      	str	r3, [r7, #16]
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007bd4:	617b      	str	r3, [r7, #20]
		lspb->dir= -1;
 8007bd6:	69fb      	ldr	r3, [r7, #28]
 8007bd8:	22ff      	movs	r2, #255	; 0xff
 8007bda:	701a      	strb	r2, [r3, #0]
 8007bdc:	e002      	b.n	8007be4 <scaraInitLSPB1+0x4c>
	}else{
		lspb->dir= 1;
 8007bde:	69fb      	ldr	r3, [r7, #28]
 8007be0:	2201      	movs	r2, #1
 8007be2:	701a      	strb	r2, [r3, #0]
	}
	if(target == TRAJECTORY_3D){
 8007be4:	7efb      	ldrb	r3, [r7, #27]
 8007be6:	2b04      	cmp	r3, #4
 8007be8:	d12c      	bne.n	8007c44 <scaraInitLSPB1+0xac>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8007bea:	7ebb      	ldrb	r3, [r7, #26]
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d10f      	bne.n	8007c10 <scaraInitLSPB1+0x78>
			v_design = V_MOVE_MAX*v_factor;
 8007bf0:	f04f 0200 	mov.w	r2, #0
 8007bf4:	4b98      	ldr	r3, [pc, #608]	; (8007e58 <scaraInitLSPB1+0x2c0>)
 8007bf6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007bfa:	f7f8 fcfd 	bl	80005f8 <__aeabi_dmul>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	460b      	mov	r3, r1
 8007c02:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			tf = additional_factor;
 8007c06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c0a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8007c0e:	e073      	b.n	8007cf8 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
 8007c10:	7ebb      	ldrb	r3, [r7, #26]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d170      	bne.n	8007cf8 <scaraInitLSPB1+0x160>
			a_design = A_MOVE_MAX*additional_factor;
 8007c16:	f04f 0200 	mov.w	r2, #0
 8007c1a:	4b90      	ldr	r3, [pc, #576]	; (8007e5c <scaraInitLSPB1+0x2c4>)
 8007c1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c20:	f7f8 fcea 	bl	80005f8 <__aeabi_dmul>
 8007c24:	4602      	mov	r2, r0
 8007c26:	460b      	mov	r3, r1
 8007c28:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			v_design = V_MOVE_MAX*v_factor;
 8007c2c:	f04f 0200 	mov.w	r2, #0
 8007c30:	4b89      	ldr	r3, [pc, #548]	; (8007e58 <scaraInitLSPB1+0x2c0>)
 8007c32:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007c36:	f7f8 fcdf 	bl	80005f8 <__aeabi_dmul>
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8007c42:	e059      	b.n	8007cf8 <scaraInitLSPB1+0x160>
		}
	}else if(target == TRAJECTORY_J0){
 8007c44:	7efb      	ldrb	r3, [r7, #27]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d112      	bne.n	8007c70 <scaraInitLSPB1+0xd8>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8007c4a:	7ebb      	ldrb	r3, [r7, #26]
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d153      	bne.n	8007cf8 <scaraInitLSPB1+0x160>
			v_design = V_DESIGN_J0*v_factor;
 8007c50:	a373      	add	r3, pc, #460	; (adr r3, 8007e20 <scaraInitLSPB1+0x288>)
 8007c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c56:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007c5a:	f7f8 fccd 	bl	80005f8 <__aeabi_dmul>
 8007c5e:	4602      	mov	r2, r0
 8007c60:	460b      	mov	r3, r1
 8007c62:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			tf = additional_factor;
 8007c66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c6a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8007c6e:	e043      	b.n	8007cf8 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){

		}
	}else if(target == TRAJECTORY_J1){
 8007c70:	7efb      	ldrb	r3, [r7, #27]
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d112      	bne.n	8007c9c <scaraInitLSPB1+0x104>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8007c76:	7ebb      	ldrb	r3, [r7, #26]
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d13d      	bne.n	8007cf8 <scaraInitLSPB1+0x160>
			v_design = V_DESIGN_J1*v_factor;
 8007c7c:	a368      	add	r3, pc, #416	; (adr r3, 8007e20 <scaraInitLSPB1+0x288>)
 8007c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c82:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007c86:	f7f8 fcb7 	bl	80005f8 <__aeabi_dmul>
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			tf = additional_factor;
 8007c92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c96:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8007c9a:	e02d      	b.n	8007cf8 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){

		}
	}else if(target == TRAJECTORY_J2){
 8007c9c:	7efb      	ldrb	r3, [r7, #27]
 8007c9e:	2b02      	cmp	r3, #2
 8007ca0:	d112      	bne.n	8007cc8 <scaraInitLSPB1+0x130>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8007ca2:	7ebb      	ldrb	r3, [r7, #26]
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d127      	bne.n	8007cf8 <scaraInitLSPB1+0x160>
			v_design = V_DESIGN_J2*v_factor;
 8007ca8:	a35f      	add	r3, pc, #380	; (adr r3, 8007e28 <scaraInitLSPB1+0x290>)
 8007caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007cb2:	f7f8 fca1 	bl	80005f8 <__aeabi_dmul>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	460b      	mov	r3, r1
 8007cba:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			tf = additional_factor;
 8007cbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cc2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8007cc6:	e017      	b.n	8007cf8 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){

		}
	}else if(target == TRAJECTORY_J3){
 8007cc8:	7efb      	ldrb	r3, [r7, #27]
 8007cca:	2b03      	cmp	r3, #3
 8007ccc:	d112      	bne.n	8007cf4 <scaraInitLSPB1+0x15c>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8007cce:	7ebb      	ldrb	r3, [r7, #26]
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d111      	bne.n	8007cf8 <scaraInitLSPB1+0x160>
			v_design = V_DESIGN_J3*v_factor;
 8007cd4:	a356      	add	r3, pc, #344	; (adr r3, 8007e30 <scaraInitLSPB1+0x298>)
 8007cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cda:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007cde:	f7f8 fc8b 	bl	80005f8 <__aeabi_dmul>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			tf = additional_factor;
 8007cea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cee:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8007cf2:	e001      	b.n	8007cf8 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){

		}
	}else{
		return SCARA_STATUS_ERROR_PARA;
 8007cf4:	2306      	movs	r3, #6
 8007cf6:	e201      	b.n	80080fc <scaraInitLSPB1+0x564>
	}
	if(modeinit == DUTY_MODE_INIT_QVT){
 8007cf8:	7ebb      	ldrb	r3, [r7, #26]
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	f040 80f2 	bne.w	8007ee4 <scaraInitLSPB1+0x34c>
		if(tf < 0.1 && v_design > 3){ //check if time valid or not
 8007d00:	a34d      	add	r3, pc, #308	; (adr r3, 8007e38 <scaraInitLSPB1+0x2a0>)
 8007d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d06:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007d0a:	f7f8 fee7 	bl	8000adc <__aeabi_dcmplt>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d01d      	beq.n	8007d50 <scaraInitLSPB1+0x1b8>
 8007d14:	f04f 0200 	mov.w	r2, #0
 8007d18:	4b51      	ldr	r3, [pc, #324]	; (8007e60 <scaraInitLSPB1+0x2c8>)
 8007d1a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007d1e:	f7f8 fefb 	bl	8000b18 <__aeabi_dcmpgt>
 8007d22:	4603      	mov	r3, r0
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d013      	beq.n	8007d50 <scaraInitLSPB1+0x1b8>
			tf = 1.5*total_s/v_design;
 8007d28:	f04f 0200 	mov.w	r2, #0
 8007d2c:	4b4d      	ldr	r3, [pc, #308]	; (8007e64 <scaraInitLSPB1+0x2cc>)
 8007d2e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007d32:	f7f8 fc61 	bl	80005f8 <__aeabi_dmul>
 8007d36:	4602      	mov	r2, r0
 8007d38:	460b      	mov	r3, r1
 8007d3a:	4610      	mov	r0, r2
 8007d3c:	4619      	mov	r1, r3
 8007d3e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007d42:	f7f8 fd83 	bl	800084c <__aeabi_ddiv>
 8007d46:	4602      	mov	r2, r0
 8007d48:	460b      	mov	r3, r1
 8007d4a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8007d4e:	e0a4      	b.n	8007e9a <scaraInitLSPB1+0x302>
			//return SCARA_STATUS_ERROR_OVER_VELOC;
		}else if(v_design < 0.1 && tf > 0.15){ //check if velocity valid or not
 8007d50:	a339      	add	r3, pc, #228	; (adr r3, 8007e38 <scaraInitLSPB1+0x2a0>)
 8007d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d56:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007d5a:	f7f8 febf 	bl	8000adc <__aeabi_dcmplt>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d01d      	beq.n	8007da0 <scaraInitLSPB1+0x208>
 8007d64:	a336      	add	r3, pc, #216	; (adr r3, 8007e40 <scaraInitLSPB1+0x2a8>)
 8007d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d6a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007d6e:	f7f8 fed3 	bl	8000b18 <__aeabi_dcmpgt>
 8007d72:	4603      	mov	r3, r0
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d013      	beq.n	8007da0 <scaraInitLSPB1+0x208>
			v_design = 1.5*total_s/tf;
 8007d78:	f04f 0200 	mov.w	r2, #0
 8007d7c:	4b39      	ldr	r3, [pc, #228]	; (8007e64 <scaraInitLSPB1+0x2cc>)
 8007d7e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007d82:	f7f8 fc39 	bl	80005f8 <__aeabi_dmul>
 8007d86:	4602      	mov	r2, r0
 8007d88:	460b      	mov	r3, r1
 8007d8a:	4610      	mov	r0, r2
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007d92:	f7f8 fd5b 	bl	800084c <__aeabi_ddiv>
 8007d96:	4602      	mov	r2, r0
 8007d98:	460b      	mov	r3, r1
 8007d9a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8007d9e:	e07c      	b.n	8007e9a <scaraInitLSPB1+0x302>
		}else if(v_design < 0.1 && tf < 0.1){
 8007da0:	a325      	add	r3, pc, #148	; (adr r3, 8007e38 <scaraInitLSPB1+0x2a0>)
 8007da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007daa:	f7f8 fe97 	bl	8000adc <__aeabi_dcmplt>
 8007dae:	4603      	mov	r3, r0
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d00b      	beq.n	8007dcc <scaraInitLSPB1+0x234>
 8007db4:	a320      	add	r3, pc, #128	; (adr r3, 8007e38 <scaraInitLSPB1+0x2a0>)
 8007db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dba:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007dbe:	f7f8 fe8d 	bl	8000adc <__aeabi_dcmplt>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d001      	beq.n	8007dcc <scaraInitLSPB1+0x234>
			return SCARA_STATUS_ERROR_OVER_VELOC;
 8007dc8:	2309      	movs	r3, #9
 8007dca:	e197      	b.n	80080fc <scaraInitLSPB1+0x564>
		}
		else{
			if(tf < 0.001){
 8007dcc:	a31e      	add	r3, pc, #120	; (adr r3, 8007e48 <scaraInitLSPB1+0x2b0>)
 8007dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007dd6:	f7f8 fe81 	bl	8000adc <__aeabi_dcmplt>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d001      	beq.n	8007de4 <scaraInitLSPB1+0x24c>
				return SCARA_STATUS_ERROR_OVER_VELOC;
 8007de0:	2309      	movs	r3, #9
 8007de2:	e18b      	b.n	80080fc <scaraInitLSPB1+0x564>
			}else{
				v_lim = total_s/tf;
 8007de4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007de8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007dec:	f7f8 fd2e 	bl	800084c <__aeabi_ddiv>
 8007df0:	4602      	mov	r2, r0
 8007df2:	460b      	mov	r3, r1
 8007df4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			}
			if(v_design < 1.1*v_lim){ //the accelaration part is too large
 8007df8:	a315      	add	r3, pc, #84	; (adr r3, 8007e50 <scaraInitLSPB1+0x2b8>)
 8007dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007e02:	f7f8 fbf9 	bl	80005f8 <__aeabi_dmul>
 8007e06:	4602      	mov	r2, r0
 8007e08:	460b      	mov	r3, r1
 8007e0a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007e0e:	f7f8 fe65 	bl	8000adc <__aeabi_dcmplt>
 8007e12:	4603      	mov	r3, r0
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d027      	beq.n	8007e68 <scaraInitLSPB1+0x2d0>
				return SCARA_STATUS_ERROR_OVER_ACCEL;
 8007e18:	230a      	movs	r3, #10
 8007e1a:	e16f      	b.n	80080fc <scaraInitLSPB1+0x564>
 8007e1c:	f3af 8000 	nop.w
 8007e20:	14000000 	.word	0x14000000
 8007e24:	4000f6f0 	.word	0x4000f6f0
 8007e28:	00000000 	.word	0x00000000
 8007e2c:	405c2000 	.word	0x405c2000
 8007e30:	6b259425 	.word	0x6b259425
 8007e34:	40069b91 	.word	0x40069b91
 8007e38:	9999999a 	.word	0x9999999a
 8007e3c:	3fb99999 	.word	0x3fb99999
 8007e40:	33333333 	.word	0x33333333
 8007e44:	3fc33333 	.word	0x3fc33333
 8007e48:	d2f1a9fc 	.word	0xd2f1a9fc
 8007e4c:	3f50624d 	.word	0x3f50624d
 8007e50:	9999999a 	.word	0x9999999a
 8007e54:	3ff19999 	.word	0x3ff19999
 8007e58:	40877000 	.word	0x40877000
 8007e5c:	407f4000 	.word	0x407f4000
 8007e60:	40080000 	.word	0x40080000
 8007e64:	3ff80000 	.word	0x3ff80000
			}else if(v_design > 2*v_lim){
 8007e68:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	460b      	mov	r3, r1
 8007e70:	f7f8 fa0c 	bl	800028c <__adddf3>
 8007e74:	4602      	mov	r2, r0
 8007e76:	460b      	mov	r3, r1
 8007e78:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007e7c:	f7f8 fe4c 	bl	8000b18 <__aeabi_dcmpgt>
 8007e80:	4603      	mov	r3, r0
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d009      	beq.n	8007e9a <scaraInitLSPB1+0x302>
				v_design = 2*v_lim;
 8007e86:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	460b      	mov	r3, r1
 8007e8e:	f7f8 f9fd 	bl	800028c <__adddf3>
 8007e92:	4602      	mov	r2, r0
 8007e94:	460b      	mov	r3, r1
 8007e96:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			}else{

			}
		}
		ta = tf - total_s/v_design;
 8007e9a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007e9e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007ea2:	f7f8 fcd3 	bl	800084c <__aeabi_ddiv>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007eae:	f7f8 f9eb 	bl	8000288 <__aeabi_dsub>
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		a_design = v_design/ta;
 8007eba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007ebe:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007ec2:	f7f8 fcc3 	bl	800084c <__aeabi_ddiv>
 8007ec6:	4602      	mov	r2, r0
 8007ec8:	460b      	mov	r3, r1
 8007eca:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		td = tf - ta;
 8007ece:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007ed2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007ed6:	f7f8 f9d7 	bl	8000288 <__aeabi_dsub>
 8007eda:	4602      	mov	r2, r0
 8007edc:	460b      	mov	r3, r1
 8007ede:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8007ee2:	e0a9      	b.n	8008038 <scaraInitLSPB1+0x4a0>

	}else if(modeinit == DUTY_MODE_INIT_QVA){
 8007ee4:	7ebb      	ldrb	r3, [r7, #26]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	f040 80a6 	bne.w	8008038 <scaraInitLSPB1+0x4a0>
		//check qva condition
		if(total_s*a_design < v_design*v_design){ //condition for ta smaller than td
 8007eec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007ef0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007ef4:	f7f8 fb80 	bl	80005f8 <__aeabi_dmul>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	460b      	mov	r3, r1
 8007efc:	4614      	mov	r4, r2
 8007efe:	461d      	mov	r5, r3
 8007f00:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007f04:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007f08:	f7f8 fb76 	bl	80005f8 <__aeabi_dmul>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	460b      	mov	r3, r1
 8007f10:	4620      	mov	r0, r4
 8007f12:	4629      	mov	r1, r5
 8007f14:	f7f8 fde2 	bl	8000adc <__aeabi_dcmplt>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d058      	beq.n	8007fd0 <scaraInitLSPB1+0x438>
			if(total_s/v_design < 0.3){ //td too small
 8007f1e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007f22:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007f26:	f7f8 fc91 	bl	800084c <__aeabi_ddiv>
 8007f2a:	4602      	mov	r2, r0
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	4610      	mov	r0, r2
 8007f30:	4619      	mov	r1, r3
 8007f32:	a375      	add	r3, pc, #468	; (adr r3, 8008108 <scaraInitLSPB1+0x570>)
 8007f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f38:	f7f8 fdd0 	bl	8000adc <__aeabi_dcmplt>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d00a      	beq.n	8007f58 <scaraInitLSPB1+0x3c0>
				//recalculate v_design
				v_design = total_s/0.3;
 8007f42:	a371      	add	r3, pc, #452	; (adr r3, 8008108 <scaraInitLSPB1+0x570>)
 8007f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f48:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007f4c:	f7f8 fc7e 	bl	800084c <__aeabi_ddiv>
 8007f50:	4602      	mov	r2, r0
 8007f52:	460b      	mov	r3, r1
 8007f54:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			}
			if(v_design/a_design < 0.1){ //ta is too small
 8007f58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007f5c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007f60:	f7f8 fc74 	bl	800084c <__aeabi_ddiv>
 8007f64:	4602      	mov	r2, r0
 8007f66:	460b      	mov	r3, r1
 8007f68:	4610      	mov	r0, r2
 8007f6a:	4619      	mov	r1, r3
 8007f6c:	a368      	add	r3, pc, #416	; (adr r3, 8008110 <scaraInitLSPB1+0x578>)
 8007f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f72:	f7f8 fdb3 	bl	8000adc <__aeabi_dcmplt>
 8007f76:	4603      	mov	r3, r0
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d00a      	beq.n	8007f92 <scaraInitLSPB1+0x3fa>
				//recalculate a_design
				a_design = v_design/0.1;
 8007f7c:	a364      	add	r3, pc, #400	; (adr r3, 8008110 <scaraInitLSPB1+0x578>)
 8007f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f82:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007f86:	f7f8 fc61 	bl	800084c <__aeabi_ddiv>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	460b      	mov	r3, r1
 8007f8e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			}
			ta = v_design/a_design;
 8007f92:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007f96:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007f9a:	f7f8 fc57 	bl	800084c <__aeabi_ddiv>
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			td = total_s/v_design;
 8007fa6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007faa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007fae:	f7f8 fc4d 	bl	800084c <__aeabi_ddiv>
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			tf = ta + td;
 8007fba:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007fbe:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007fc2:	f7f8 f963 	bl	800028c <__adddf3>
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	460b      	mov	r3, r1
 8007fca:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8007fce:	e033      	b.n	8008038 <scaraInitLSPB1+0x4a0>
//				td = total_s/v_design;
//				tf = ta + td;
//			}

		}else{
			tf = 2*total_s/v_design;
 8007fd0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	460b      	mov	r3, r1
 8007fd8:	f7f8 f958 	bl	800028c <__adddf3>
 8007fdc:	4602      	mov	r2, r0
 8007fde:	460b      	mov	r3, r1
 8007fe0:	4610      	mov	r0, r2
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007fe8:	f7f8 fc30 	bl	800084c <__aeabi_ddiv>
 8007fec:	4602      	mov	r2, r0
 8007fee:	460b      	mov	r3, r1
 8007ff0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			ta = tf/2;
 8007ff4:	f04f 0200 	mov.w	r2, #0
 8007ff8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007ffc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008000:	f7f8 fc24 	bl	800084c <__aeabi_ddiv>
 8008004:	4602      	mov	r2, r0
 8008006:	460b      	mov	r3, r1
 8008008:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			td = tf/2;
 800800c:	f04f 0200 	mov.w	r2, #0
 8008010:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008014:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008018:	f7f8 fc18 	bl	800084c <__aeabi_ddiv>
 800801c:	4602      	mov	r2, r0
 800801e:	460b      	mov	r3, r1
 8008020:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			a_design = v_design/ta;
 8008024:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008028:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800802c:	f7f8 fc0e 	bl	800084c <__aeabi_ddiv>
 8008030:	4602      	mov	r2, r0
 8008032:	460b      	mov	r3, r1
 8008034:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		}
	}
	no_sample = ceilf(tf / T_SAMPLING); // ceiling
 8008038:	a337      	add	r3, pc, #220	; (adr r3, 8008118 <scaraInitLSPB1+0x580>)
 800803a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008042:	f7f8 fc03 	bl	800084c <__aeabi_ddiv>
 8008046:	4602      	mov	r2, r0
 8008048:	460b      	mov	r3, r1
 800804a:	4610      	mov	r0, r2
 800804c:	4619      	mov	r1, r3
 800804e:	f7f8 fdcb 	bl	8000be8 <__aeabi_d2f>
 8008052:	4603      	mov	r3, r0
 8008054:	ee00 3a10 	vmov	s0, r3
 8008058:	f012 fc16 	bl	801a888 <ceilf>
 800805c:	eef0 7a40 	vmov.f32	s15, s0
 8008060:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008064:	ee17 3a90 	vmov	r3, s15
 8008068:	627b      	str	r3, [r7, #36]	; 0x24
	 // Init lspb params

	 lspb->s0 = 0;
 800806a:	69f9      	ldr	r1, [r7, #28]
 800806c:	f04f 0200 	mov.w	r2, #0
 8008070:	f04f 0300 	mov.w	r3, #0
 8008074:	e9c1 2302 	strd	r2, r3, [r1, #8]
	 lspb->s1 = total_s;
 8008078:	69f9      	ldr	r1, [r7, #28]
 800807a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800807e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	 lspb->Ta = ta;
 8008082:	69f9      	ldr	r1, [r7, #28]
 8008084:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008088:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	 lspb->Td = td;
 800808c:	69f9      	ldr	r1, [r7, #28]
 800808e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008092:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	 lspb->Tf = tf;
 8008096:	69f9      	ldr	r1, [r7, #28]
 8008098:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800809c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	 lspb->a_design = a_design;
 80080a0:	69f9      	ldr	r1, [r7, #28]
 80080a2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80080a6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	 lspb->v_design = v_design;
 80080aa:	69f9      	ldr	r1, [r7, #28]
 80080ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80080b0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	 lspb->v_lim = v_design;
 80080b4:	69f9      	ldr	r1, [r7, #28]
 80080b6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80080ba:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	 lspb->v0 = 0;
 80080be:	69f9      	ldr	r1, [r7, #28]
 80080c0:	f04f 0200 	mov.w	r2, #0
 80080c4:	f04f 0300 	mov.w	r3, #0
 80080c8:	e9c1 2306 	strd	r2, r3, [r1, #24]
	 lspb->v1 = 0;
 80080cc:	69f9      	ldr	r1, [r7, #28]
 80080ce:	f04f 0200 	mov.w	r2, #0
 80080d2:	f04f 0300 	mov.w	r3, #0
 80080d6:	e9c1 2308 	strd	r2, r3, [r1, #32]
	 lspb->num_of_sampling = no_sample;
 80080da:	69fb      	ldr	r3, [r7, #28]
 80080dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080de:	659a      	str	r2, [r3, #88]	; 0x58
	 lspb->total_s = lspb->s1 - lspb->s0;
 80080e0:	69fb      	ldr	r3, [r7, #28]
 80080e2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80080e6:	69fb      	ldr	r3, [r7, #28]
 80080e8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80080ec:	f7f8 f8cc 	bl	8000288 <__aeabi_dsub>
 80080f0:	4602      	mov	r2, r0
 80080f2:	460b      	mov	r3, r1
 80080f4:	69f9      	ldr	r1, [r7, #28]
 80080f6:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

	 return SCARA_STATUS_OK;
 80080fa:	2300      	movs	r3, #0
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3758      	adds	r7, #88	; 0x58
 8008100:	46bd      	mov	sp, r7
 8008102:	bdb0      	pop	{r4, r5, r7, pc}
 8008104:	f3af 8000 	nop.w
 8008108:	33333333 	.word	0x33333333
 800810c:	3fd33333 	.word	0x3fd33333
 8008110:	9999999a 	.word	0x9999999a
 8008114:	3fb99999 	.word	0x3fb99999
 8008118:	40000000 	.word	0x40000000
 800811c:	3f847ae1 	.word	0x3f847ae1

08008120 <scaraInitScurve1>:
												Trajectory_TargetTypeDef target,
												double total_s,
												ModeInitTypeDef modeinit,
												double v_factor,
												double additional_factor)
{
 8008120:	b5b0      	push	{r4, r5, r7, lr}
 8008122:	b094      	sub	sp, #80	; 0x50
 8008124:	af00      	add	r7, sp, #0
 8008126:	61f8      	str	r0, [r7, #28]
 8008128:	460b      	mov	r3, r1
 800812a:	ed87 0b04 	vstr	d0, [r7, #16]
 800812e:	ed87 1b02 	vstr	d1, [r7, #8]
 8008132:	ed87 2b00 	vstr	d2, [r7]
 8008136:	76fb      	strb	r3, [r7, #27]
 8008138:	4613      	mov	r3, r2
 800813a:	76bb      	strb	r3, [r7, #26]
	double v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	uint32_t no_sample;
	if(total_s < 0){
 800813c:	f04f 0200 	mov.w	r2, #0
 8008140:	f04f 0300 	mov.w	r3, #0
 8008144:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008148:	f7f8 fcc8 	bl	8000adc <__aeabi_dcmplt>
 800814c:	4603      	mov	r3, r0
 800814e:	2b00      	cmp	r3, #0
 8008150:	d009      	beq.n	8008166 <scaraInitScurve1+0x46>
		total_s = -total_s;
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	613b      	str	r3, [r7, #16]
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800815c:	617b      	str	r3, [r7, #20]
		scurve->dir= -1;
 800815e:	69fb      	ldr	r3, [r7, #28]
 8008160:	22ff      	movs	r2, #255	; 0xff
 8008162:	701a      	strb	r2, [r3, #0]
 8008164:	e002      	b.n	800816c <scaraInitScurve1+0x4c>
	}else{
		scurve->dir= 1;
 8008166:	69fb      	ldr	r3, [r7, #28]
 8008168:	2201      	movs	r2, #1
 800816a:	701a      	strb	r2, [r3, #0]
	}
	if(target == TRAJECTORY_3D){
 800816c:	7efb      	ldrb	r3, [r7, #27]
 800816e:	2b04      	cmp	r3, #4
 8008170:	d12c      	bne.n	80081cc <scaraInitScurve1+0xac>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8008172:	7ebb      	ldrb	r3, [r7, #26]
 8008174:	2b01      	cmp	r3, #1
 8008176:	d10f      	bne.n	8008198 <scaraInitScurve1+0x78>
			v_design = V_MOVE_MAX*v_factor;
 8008178:	f04f 0200 	mov.w	r2, #0
 800817c:	4b90      	ldr	r3, [pc, #576]	; (80083c0 <scaraInitScurve1+0x2a0>)
 800817e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008182:	f7f8 fa39 	bl	80005f8 <__aeabi_dmul>
 8008186:	4602      	mov	r2, r0
 8008188:	460b      	mov	r3, r1
 800818a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tf = additional_factor;
 800818e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008192:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8008196:	e073      	b.n	8008280 <scaraInitScurve1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
 8008198:	7ebb      	ldrb	r3, [r7, #26]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d170      	bne.n	8008280 <scaraInitScurve1+0x160>
			a_design = A_MOVE_MAX*additional_factor;
 800819e:	f04f 0200 	mov.w	r2, #0
 80081a2:	4b88      	ldr	r3, [pc, #544]	; (80083c4 <scaraInitScurve1+0x2a4>)
 80081a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081a8:	f7f8 fa26 	bl	80005f8 <__aeabi_dmul>
 80081ac:	4602      	mov	r2, r0
 80081ae:	460b      	mov	r3, r1
 80081b0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			v_design = V_MOVE_MAX*v_factor;
 80081b4:	f04f 0200 	mov.w	r2, #0
 80081b8:	4b81      	ldr	r3, [pc, #516]	; (80083c0 <scaraInitScurve1+0x2a0>)
 80081ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80081be:	f7f8 fa1b 	bl	80005f8 <__aeabi_dmul>
 80081c2:	4602      	mov	r2, r0
 80081c4:	460b      	mov	r3, r1
 80081c6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 80081ca:	e059      	b.n	8008280 <scaraInitScurve1+0x160>
		}
	}else if(target == TRAJECTORY_J0){
 80081cc:	7efb      	ldrb	r3, [r7, #27]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d112      	bne.n	80081f8 <scaraInitScurve1+0xd8>
		if(modeinit == DUTY_MODE_INIT_QVT){
 80081d2:	7ebb      	ldrb	r3, [r7, #26]
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d153      	bne.n	8008280 <scaraInitScurve1+0x160>
			v_design = V_DESIGN_J0*v_factor;
 80081d8:	a36d      	add	r3, pc, #436	; (adr r3, 8008390 <scaraInitScurve1+0x270>)
 80081da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80081e2:	f7f8 fa09 	bl	80005f8 <__aeabi_dmul>
 80081e6:	4602      	mov	r2, r0
 80081e8:	460b      	mov	r3, r1
 80081ea:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tf = additional_factor;
 80081ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081f2:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80081f6:	e043      	b.n	8008280 <scaraInitScurve1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
	
		}
	}else if(target == TRAJECTORY_J1){
 80081f8:	7efb      	ldrb	r3, [r7, #27]
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d112      	bne.n	8008224 <scaraInitScurve1+0x104>
		if(modeinit == DUTY_MODE_INIT_QVT){
 80081fe:	7ebb      	ldrb	r3, [r7, #26]
 8008200:	2b01      	cmp	r3, #1
 8008202:	d13d      	bne.n	8008280 <scaraInitScurve1+0x160>
			v_design = V_DESIGN_J1*v_factor;
 8008204:	a362      	add	r3, pc, #392	; (adr r3, 8008390 <scaraInitScurve1+0x270>)
 8008206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800820a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800820e:	f7f8 f9f3 	bl	80005f8 <__aeabi_dmul>
 8008212:	4602      	mov	r2, r0
 8008214:	460b      	mov	r3, r1
 8008216:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tf = additional_factor;
 800821a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800821e:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8008222:	e02d      	b.n	8008280 <scaraInitScurve1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
	
		}
	}else if(target == TRAJECTORY_J2){
 8008224:	7efb      	ldrb	r3, [r7, #27]
 8008226:	2b02      	cmp	r3, #2
 8008228:	d112      	bne.n	8008250 <scaraInitScurve1+0x130>
		if(modeinit == DUTY_MODE_INIT_QVT){
 800822a:	7ebb      	ldrb	r3, [r7, #26]
 800822c:	2b01      	cmp	r3, #1
 800822e:	d127      	bne.n	8008280 <scaraInitScurve1+0x160>
			v_design = V_DESIGN_J2*v_factor;
 8008230:	a359      	add	r3, pc, #356	; (adr r3, 8008398 <scaraInitScurve1+0x278>)
 8008232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008236:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800823a:	f7f8 f9dd 	bl	80005f8 <__aeabi_dmul>
 800823e:	4602      	mov	r2, r0
 8008240:	460b      	mov	r3, r1
 8008242:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tf = additional_factor;
 8008246:	e9d7 2300 	ldrd	r2, r3, [r7]
 800824a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800824e:	e017      	b.n	8008280 <scaraInitScurve1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
	
		}
	}else if(target == TRAJECTORY_J3){
 8008250:	7efb      	ldrb	r3, [r7, #27]
 8008252:	2b03      	cmp	r3, #3
 8008254:	d112      	bne.n	800827c <scaraInitScurve1+0x15c>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8008256:	7ebb      	ldrb	r3, [r7, #26]
 8008258:	2b01      	cmp	r3, #1
 800825a:	d111      	bne.n	8008280 <scaraInitScurve1+0x160>
			v_design = V_DESIGN_J3*v_factor;
 800825c:	a350      	add	r3, pc, #320	; (adr r3, 80083a0 <scaraInitScurve1+0x280>)
 800825e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008262:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008266:	f7f8 f9c7 	bl	80005f8 <__aeabi_dmul>
 800826a:	4602      	mov	r2, r0
 800826c:	460b      	mov	r3, r1
 800826e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tf = additional_factor;
 8008272:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008276:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800827a:	e001      	b.n	8008280 <scaraInitScurve1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
	
		}
	}else{
		return SCARA_STATUS_ERROR_PARA;
 800827c:	2306      	movs	r3, #6
 800827e:	e24c      	b.n	800871a <scaraInitScurve1+0x5fa>
	}
	if(modeinit == DUTY_MODE_INIT_QVT){
 8008280:	7ebb      	ldrb	r3, [r7, #26]
 8008282:	2b01      	cmp	r3, #1
 8008284:	f040 80fc 	bne.w	8008480 <scaraInitScurve1+0x360>
		if(tf < 0.1 && v_design > 7.5){ //check if time valid or not
 8008288:	a347      	add	r3, pc, #284	; (adr r3, 80083a8 <scaraInitScurve1+0x288>)
 800828a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800828e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008292:	f7f8 fc23 	bl	8000adc <__aeabi_dcmplt>
 8008296:	4603      	mov	r3, r0
 8008298:	2b00      	cmp	r3, #0
 800829a:	d01d      	beq.n	80082d8 <scaraInitScurve1+0x1b8>
 800829c:	f04f 0200 	mov.w	r2, #0
 80082a0:	4b49      	ldr	r3, [pc, #292]	; (80083c8 <scaraInitScurve1+0x2a8>)
 80082a2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80082a6:	f7f8 fc37 	bl	8000b18 <__aeabi_dcmpgt>
 80082aa:	4603      	mov	r3, r0
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d013      	beq.n	80082d8 <scaraInitScurve1+0x1b8>
			tf = 1.5*total_s/v_design;
 80082b0:	f04f 0200 	mov.w	r2, #0
 80082b4:	4b45      	ldr	r3, [pc, #276]	; (80083cc <scaraInitScurve1+0x2ac>)
 80082b6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80082ba:	f7f8 f99d 	bl	80005f8 <__aeabi_dmul>
 80082be:	4602      	mov	r2, r0
 80082c0:	460b      	mov	r3, r1
 80082c2:	4610      	mov	r0, r2
 80082c4:	4619      	mov	r1, r3
 80082c6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80082ca:	f7f8 fabf 	bl	800084c <__aeabi_ddiv>
 80082ce:	4602      	mov	r2, r0
 80082d0:	460b      	mov	r3, r1
 80082d2:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80082d6:	e094      	b.n	8008402 <scaraInitScurve1+0x2e2>
		}else if(v_design < 0.1 && tf > 0.15){ //check if velocity valid or not
 80082d8:	a333      	add	r3, pc, #204	; (adr r3, 80083a8 <scaraInitScurve1+0x288>)
 80082da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082de:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80082e2:	f7f8 fbfb 	bl	8000adc <__aeabi_dcmplt>
 80082e6:	4603      	mov	r3, r0
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d01d      	beq.n	8008328 <scaraInitScurve1+0x208>
 80082ec:	a330      	add	r3, pc, #192	; (adr r3, 80083b0 <scaraInitScurve1+0x290>)
 80082ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80082f6:	f7f8 fc0f 	bl	8000b18 <__aeabi_dcmpgt>
 80082fa:	4603      	mov	r3, r0
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d013      	beq.n	8008328 <scaraInitScurve1+0x208>
			v_design = 1.5*total_s/tf;
 8008300:	f04f 0200 	mov.w	r2, #0
 8008304:	4b31      	ldr	r3, [pc, #196]	; (80083cc <scaraInitScurve1+0x2ac>)
 8008306:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800830a:	f7f8 f975 	bl	80005f8 <__aeabi_dmul>
 800830e:	4602      	mov	r2, r0
 8008310:	460b      	mov	r3, r1
 8008312:	4610      	mov	r0, r2
 8008314:	4619      	mov	r1, r3
 8008316:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800831a:	f7f8 fa97 	bl	800084c <__aeabi_ddiv>
 800831e:	4602      	mov	r2, r0
 8008320:	460b      	mov	r3, r1
 8008322:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8008326:	e06c      	b.n	8008402 <scaraInitScurve1+0x2e2>
		}else if(tf < 0.1 && v_design < 0.1){
 8008328:	a31f      	add	r3, pc, #124	; (adr r3, 80083a8 <scaraInitScurve1+0x288>)
 800832a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008332:	f7f8 fbd3 	bl	8000adc <__aeabi_dcmplt>
 8008336:	4603      	mov	r3, r0
 8008338:	2b00      	cmp	r3, #0
 800833a:	d00b      	beq.n	8008354 <scaraInitScurve1+0x234>
 800833c:	a31a      	add	r3, pc, #104	; (adr r3, 80083a8 <scaraInitScurve1+0x288>)
 800833e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008342:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008346:	f7f8 fbc9 	bl	8000adc <__aeabi_dcmplt>
 800834a:	4603      	mov	r3, r0
 800834c:	2b00      	cmp	r3, #0
 800834e:	d001      	beq.n	8008354 <scaraInitScurve1+0x234>
			return SCARA_STATUS_ERROR_OVER_VELOC;
 8008350:	2309      	movs	r3, #9
 8008352:	e1e2      	b.n	800871a <scaraInitScurve1+0x5fa>
		}else{
			v_lim = total_s/tf;
 8008354:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008358:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800835c:	f7f8 fa76 	bl	800084c <__aeabi_ddiv>
 8008360:	4602      	mov	r2, r0
 8008362:	460b      	mov	r3, r1
 8008364:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			if(v_design < 1.1*v_lim){ // the accelaration part is too large
 8008368:	a313      	add	r3, pc, #76	; (adr r3, 80083b8 <scaraInitScurve1+0x298>)
 800836a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800836e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008372:	f7f8 f941 	bl	80005f8 <__aeabi_dmul>
 8008376:	4602      	mov	r2, r0
 8008378:	460b      	mov	r3, r1
 800837a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800837e:	f7f8 fbad 	bl	8000adc <__aeabi_dcmplt>
 8008382:	4603      	mov	r3, r0
 8008384:	2b00      	cmp	r3, #0
 8008386:	d023      	beq.n	80083d0 <scaraInitScurve1+0x2b0>
				return SCARA_STATUS_ERROR_OVER_ACCEL;
 8008388:	230a      	movs	r3, #10
 800838a:	e1c6      	b.n	800871a <scaraInitScurve1+0x5fa>
 800838c:	f3af 8000 	nop.w
 8008390:	14000000 	.word	0x14000000
 8008394:	4000f6f0 	.word	0x4000f6f0
 8008398:	00000000 	.word	0x00000000
 800839c:	405c2000 	.word	0x405c2000
 80083a0:	6b259425 	.word	0x6b259425
 80083a4:	40069b91 	.word	0x40069b91
 80083a8:	9999999a 	.word	0x9999999a
 80083ac:	3fb99999 	.word	0x3fb99999
 80083b0:	33333333 	.word	0x33333333
 80083b4:	3fc33333 	.word	0x3fc33333
 80083b8:	9999999a 	.word	0x9999999a
 80083bc:	3ff19999 	.word	0x3ff19999
 80083c0:	40877000 	.word	0x40877000
 80083c4:	407f4000 	.word	0x407f4000
 80083c8:	401e0000 	.word	0x401e0000
 80083cc:	3ff80000 	.word	0x3ff80000
			}else if(v_design > 2*v_lim){
 80083d0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80083d4:	4602      	mov	r2, r0
 80083d6:	460b      	mov	r3, r1
 80083d8:	f7f7 ff58 	bl	800028c <__adddf3>
 80083dc:	4602      	mov	r2, r0
 80083de:	460b      	mov	r3, r1
 80083e0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80083e4:	f7f8 fb98 	bl	8000b18 <__aeabi_dcmpgt>
 80083e8:	4603      	mov	r3, r0
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d009      	beq.n	8008402 <scaraInitScurve1+0x2e2>
				v_design = 2*v_lim;
 80083ee:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80083f2:	4602      	mov	r2, r0
 80083f4:	460b      	mov	r3, r1
 80083f6:	f7f7 ff49 	bl	800028c <__adddf3>
 80083fa:	4602      	mov	r2, r0
 80083fc:	460b      	mov	r3, r1
 80083fe:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			}else{
	
			}
		}
		a_design = 2*v_design*v_design/(v_design*tf - total_s);
 8008402:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008406:	4602      	mov	r2, r0
 8008408:	460b      	mov	r3, r1
 800840a:	f7f7 ff3f 	bl	800028c <__adddf3>
 800840e:	4602      	mov	r2, r0
 8008410:	460b      	mov	r3, r1
 8008412:	4610      	mov	r0, r2
 8008414:	4619      	mov	r1, r3
 8008416:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800841a:	f7f8 f8ed 	bl	80005f8 <__aeabi_dmul>
 800841e:	4602      	mov	r2, r0
 8008420:	460b      	mov	r3, r1
 8008422:	4614      	mov	r4, r2
 8008424:	461d      	mov	r5, r3
 8008426:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800842a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800842e:	f7f8 f8e3 	bl	80005f8 <__aeabi_dmul>
 8008432:	4602      	mov	r2, r0
 8008434:	460b      	mov	r3, r1
 8008436:	4610      	mov	r0, r2
 8008438:	4619      	mov	r1, r3
 800843a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800843e:	f7f7 ff23 	bl	8000288 <__aeabi_dsub>
 8008442:	4602      	mov	r2, r0
 8008444:	460b      	mov	r3, r1
 8008446:	4620      	mov	r0, r4
 8008448:	4629      	mov	r1, r5
 800844a:	f7f8 f9ff 	bl	800084c <__aeabi_ddiv>
 800844e:	4602      	mov	r2, r0
 8008450:	460b      	mov	r3, r1
 8008452:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		ta = v_design/a_design;		
 8008456:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800845a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800845e:	f7f8 f9f5 	bl	800084c <__aeabi_ddiv>
 8008462:	4602      	mov	r2, r0
 8008464:	460b      	mov	r3, r1
 8008466:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		td = tf - ta;
 800846a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800846e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008472:	f7f7 ff09 	bl	8000288 <__aeabi_dsub>
 8008476:	4602      	mov	r2, r0
 8008478:	460b      	mov	r3, r1
 800847a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800847e:	e0be      	b.n	80085fe <scaraInitScurve1+0x4de>
	
	}else if(modeinit == DUTY_MODE_INIT_QVA){
 8008480:	7ebb      	ldrb	r3, [r7, #26]
 8008482:	2b00      	cmp	r3, #0
 8008484:	f040 80bb 	bne.w	80085fe <scaraInitScurve1+0x4de>
		//check qva condition
		if(total_s*a_design < 2*v_design*v_design){ //condition for ta smaller than tc
 8008488:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800848c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008490:	f7f8 f8b2 	bl	80005f8 <__aeabi_dmul>
 8008494:	4602      	mov	r2, r0
 8008496:	460b      	mov	r3, r1
 8008498:	4614      	mov	r4, r2
 800849a:	461d      	mov	r5, r3
 800849c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80084a0:	4602      	mov	r2, r0
 80084a2:	460b      	mov	r3, r1
 80084a4:	f7f7 fef2 	bl	800028c <__adddf3>
 80084a8:	4602      	mov	r2, r0
 80084aa:	460b      	mov	r3, r1
 80084ac:	4610      	mov	r0, r2
 80084ae:	4619      	mov	r1, r3
 80084b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80084b4:	f7f8 f8a0 	bl	80005f8 <__aeabi_dmul>
 80084b8:	4602      	mov	r2, r0
 80084ba:	460b      	mov	r3, r1
 80084bc:	4620      	mov	r0, r4
 80084be:	4629      	mov	r1, r5
 80084c0:	f7f8 fb0c 	bl	8000adc <__aeabi_dcmplt>
 80084c4:	4603      	mov	r3, r0
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d05e      	beq.n	8008588 <scaraInitScurve1+0x468>
			if(total_s/v_design < 0.3){ //tc too small
 80084ca:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80084ce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80084d2:	f7f8 f9bb 	bl	800084c <__aeabi_ddiv>
 80084d6:	4602      	mov	r2, r0
 80084d8:	460b      	mov	r3, r1
 80084da:	4610      	mov	r0, r2
 80084dc:	4619      	mov	r1, r3
 80084de:	a395      	add	r3, pc, #596	; (adr r3, 8008734 <scaraInitScurve1+0x614>)
 80084e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e4:	f7f8 fafa 	bl	8000adc <__aeabi_dcmplt>
 80084e8:	4603      	mov	r3, r0
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d00a      	beq.n	8008504 <scaraInitScurve1+0x3e4>
				//recalculate v_design
				v_design = total_s/0.3;
 80084ee:	a391      	add	r3, pc, #580	; (adr r3, 8008734 <scaraInitScurve1+0x614>)
 80084f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80084f8:	f7f8 f9a8 	bl	800084c <__aeabi_ddiv>
 80084fc:	4602      	mov	r2, r0
 80084fe:	460b      	mov	r3, r1
 8008500:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			}
			if(v_design/a_design < 0.1){ //ta is too small
 8008504:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008508:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800850c:	f7f8 f99e 	bl	800084c <__aeabi_ddiv>
 8008510:	4602      	mov	r2, r0
 8008512:	460b      	mov	r3, r1
 8008514:	4610      	mov	r0, r2
 8008516:	4619      	mov	r1, r3
 8008518:	a388      	add	r3, pc, #544	; (adr r3, 800873c <scaraInitScurve1+0x61c>)
 800851a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800851e:	f7f8 fadd 	bl	8000adc <__aeabi_dcmplt>
 8008522:	4603      	mov	r3, r0
 8008524:	2b00      	cmp	r3, #0
 8008526:	d00a      	beq.n	800853e <scaraInitScurve1+0x41e>
				//recalculate a_design
				a_design = v_design/0.1;
 8008528:	a384      	add	r3, pc, #528	; (adr r3, 800873c <scaraInitScurve1+0x61c>)
 800852a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800852e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008532:	f7f8 f98b 	bl	800084c <__aeabi_ddiv>
 8008536:	4602      	mov	r2, r0
 8008538:	460b      	mov	r3, r1
 800853a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			}
			ta = v_design/a_design;
 800853e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008542:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008546:	f7f8 f981 	bl	800084c <__aeabi_ddiv>
 800854a:	4602      	mov	r2, r0
 800854c:	460b      	mov	r3, r1
 800854e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			td = total_s/v_design + ta;
 8008552:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008556:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800855a:	f7f8 f977 	bl	800084c <__aeabi_ddiv>
 800855e:	4602      	mov	r2, r0
 8008560:	460b      	mov	r3, r1
 8008562:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008566:	f7f7 fe91 	bl	800028c <__adddf3>
 800856a:	4602      	mov	r2, r0
 800856c:	460b      	mov	r3, r1
 800856e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			tf = ta + td;
 8008572:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008576:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800857a:	f7f7 fe87 	bl	800028c <__adddf3>
 800857e:	4602      	mov	r2, r0
 8008580:	460b      	mov	r3, r1
 8008582:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8008586:	e03a      	b.n	80085fe <scaraInitScurve1+0x4de>
//				td = total_s/v_design;
//				tf = ta + td;
//			}
	
		}else{
			tf = 2*total_s/v_design;
 8008588:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800858c:	4602      	mov	r2, r0
 800858e:	460b      	mov	r3, r1
 8008590:	f7f7 fe7c 	bl	800028c <__adddf3>
 8008594:	4602      	mov	r2, r0
 8008596:	460b      	mov	r3, r1
 8008598:	4610      	mov	r0, r2
 800859a:	4619      	mov	r1, r3
 800859c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80085a0:	f7f8 f954 	bl	800084c <__aeabi_ddiv>
 80085a4:	4602      	mov	r2, r0
 80085a6:	460b      	mov	r3, r1
 80085a8:	e9c7 2308 	strd	r2, r3, [r7, #32]
			ta = tf/4;
 80085ac:	f04f 0200 	mov.w	r2, #0
 80085b0:	4b5d      	ldr	r3, [pc, #372]	; (8008728 <scaraInitScurve1+0x608>)
 80085b2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80085b6:	f7f8 f949 	bl	800084c <__aeabi_ddiv>
 80085ba:	4602      	mov	r2, r0
 80085bc:	460b      	mov	r3, r1
 80085be:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			td = 3*tf/4;
 80085c2:	f04f 0200 	mov.w	r2, #0
 80085c6:	4b59      	ldr	r3, [pc, #356]	; (800872c <scaraInitScurve1+0x60c>)
 80085c8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80085cc:	f7f8 f814 	bl	80005f8 <__aeabi_dmul>
 80085d0:	4602      	mov	r2, r0
 80085d2:	460b      	mov	r3, r1
 80085d4:	4610      	mov	r0, r2
 80085d6:	4619      	mov	r1, r3
 80085d8:	f04f 0200 	mov.w	r2, #0
 80085dc:	4b52      	ldr	r3, [pc, #328]	; (8008728 <scaraInitScurve1+0x608>)
 80085de:	f7f8 f935 	bl	800084c <__aeabi_ddiv>
 80085e2:	4602      	mov	r2, r0
 80085e4:	460b      	mov	r3, r1
 80085e6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			a_design = v_design/ta;
 80085ea:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80085ee:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80085f2:	f7f8 f92b 	bl	800084c <__aeabi_ddiv>
 80085f6:	4602      	mov	r2, r0
 80085f8:	460b      	mov	r3, r1
 80085fa:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		}
	}
	//no_sample = ceilf(tf / T_SAMPLING); // ceiling
	 // Init lspb params
	
	scurve->Ta = ta;
 80085fe:	69f9      	ldr	r1, [r7, #28]
 8008600:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008604:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	scurve->Tf = tf;
 8008608:	69f9      	ldr	r1, [r7, #28]
 800860a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800860e:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	scurve->Td = td;
 8008612:	69f9      	ldr	r1, [r7, #28]
 8008614:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008618:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	scurve->a_design = a_design;
 800861c:	69f9      	ldr	r1, [r7, #28]
 800861e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008622:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	scurve->v_design = v_design;
 8008626:	69f9      	ldr	r1, [r7, #28]
 8008628:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800862c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	scurve->v_lim = v_lim;
 8008630:	69f9      	ldr	r1, [r7, #28]
 8008632:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008636:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	scurve->total_s = total_s;
 800863a:	69f9      	ldr	r1, [r7, #28]
 800863c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008640:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	scurve->a_current = 0;
 8008644:	69f9      	ldr	r1, [r7, #28]
 8008646:	f04f 0200 	mov.w	r2, #0
 800864a:	f04f 0300 	mov.w	r3, #0
 800864e:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
	scurve->v_current = 0;
 8008652:	69f9      	ldr	r1, [r7, #28]
 8008654:	f04f 0200 	mov.w	r2, #0
 8008658:	f04f 0300 	mov.w	r3, #0
 800865c:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
	scurve->s_current = 0;
 8008660:	69f9      	ldr	r1, [r7, #28]
 8008662:	f04f 0200 	mov.w	r2, #0
 8008666:	f04f 0300 	mov.w	r3, #0
 800866a:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
	//define duplicate value when calculating scurve flow
	scurve->k_1        = v_design/(6*ta*ta);
 800866e:	f04f 0200 	mov.w	r2, #0
 8008672:	4b2f      	ldr	r3, [pc, #188]	; (8008730 <scaraInitScurve1+0x610>)
 8008674:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008678:	f7f7 ffbe 	bl	80005f8 <__aeabi_dmul>
 800867c:	4602      	mov	r2, r0
 800867e:	460b      	mov	r3, r1
 8008680:	4610      	mov	r0, r2
 8008682:	4619      	mov	r1, r3
 8008684:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008688:	f7f7 ffb6 	bl	80005f8 <__aeabi_dmul>
 800868c:	4602      	mov	r2, r0
 800868e:	460b      	mov	r3, r1
 8008690:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008694:	f7f8 f8da 	bl	800084c <__aeabi_ddiv>
 8008698:	4602      	mov	r2, r0
 800869a:	460b      	mov	r3, r1
 800869c:	69f9      	ldr	r1, [r7, #28]
 800869e:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	scurve->k_2		   = 2*ta*ta*ta;
 80086a2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80086a6:	4602      	mov	r2, r0
 80086a8:	460b      	mov	r3, r1
 80086aa:	f7f7 fdef 	bl	800028c <__adddf3>
 80086ae:	4602      	mov	r2, r0
 80086b0:	460b      	mov	r3, r1
 80086b2:	4610      	mov	r0, r2
 80086b4:	4619      	mov	r1, r3
 80086b6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80086ba:	f7f7 ff9d 	bl	80005f8 <__aeabi_dmul>
 80086be:	4602      	mov	r2, r0
 80086c0:	460b      	mov	r3, r1
 80086c2:	4610      	mov	r0, r2
 80086c4:	4619      	mov	r1, r3
 80086c6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80086ca:	f7f7 ff95 	bl	80005f8 <__aeabi_dmul>
 80086ce:	4602      	mov	r2, r0
 80086d0:	460b      	mov	r3, r1
 80086d2:	69f9      	ldr	r1, [r7, #28]
 80086d4:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
	scurve->k_3        = 6*ta;
 80086d8:	f04f 0200 	mov.w	r2, #0
 80086dc:	4b14      	ldr	r3, [pc, #80]	; (8008730 <scaraInitScurve1+0x610>)
 80086de:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80086e2:	f7f7 ff89 	bl	80005f8 <__aeabi_dmul>
 80086e6:	4602      	mov	r2, r0
 80086e8:	460b      	mov	r3, r1
 80086ea:	69f9      	ldr	r1, [r7, #28]
 80086ec:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	scurve->k_4        = 6*ta*ta;
 80086f0:	f04f 0200 	mov.w	r2, #0
 80086f4:	4b0e      	ldr	r3, [pc, #56]	; (8008730 <scaraInitScurve1+0x610>)
 80086f6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80086fa:	f7f7 ff7d 	bl	80005f8 <__aeabi_dmul>
 80086fe:	4602      	mov	r2, r0
 8008700:	460b      	mov	r3, r1
 8008702:	4610      	mov	r0, r2
 8008704:	4619      	mov	r1, r3
 8008706:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800870a:	f7f7 ff75 	bl	80005f8 <__aeabi_dmul>
 800870e:	4602      	mov	r2, r0
 8008710:	460b      	mov	r3, r1
 8008712:	69f9      	ldr	r1, [r7, #28]
 8008714:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
	return SCARA_STATUS_OK;
 8008718:	2300      	movs	r3, #0
}
 800871a:	4618      	mov	r0, r3
 800871c:	3750      	adds	r7, #80	; 0x50
 800871e:	46bd      	mov	sp, r7
 8008720:	bdb0      	pop	{r4, r5, r7, pc}
 8008722:	bf00      	nop
 8008724:	f3af 8000 	nop.w
 8008728:	40100000 	.word	0x40100000
 800872c:	40080000 	.word	0x40080000
 8008730:	40180000 	.word	0x40180000
 8008734:	33333333 	.word	0x33333333
 8008738:	3fd33333 	.word	0x3fd33333
 800873c:	9999999a 	.word	0x9999999a
 8008740:	3fb99999 	.word	0x3fb99999

08008744 <scaraFlowLSPB1>:
SCARA_StatusTypeDef	scaraFlowLSPB1	(Trajectory_LSPB_TypeDef *lspb, double time){
 8008744:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008748:	b08a      	sub	sp, #40	; 0x28
 800874a:	af00      	add	r7, sp, #0
 800874c:	60f8      	str	r0, [r7, #12]
 800874e:	ed87 0b00 	vstr	d0, [r7]
	double tf, td, ta;

	tf = lspb->Tf;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8008758:	e9c7 2308 	strd	r2, r3, [r7, #32]
	td = lspb->Td;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8008762:	e9c7 2306 	strd	r2, r3, [r7, #24]
	ta = lspb->Ta;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800876c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	// Accelerate
	if ( 0.0f <= time && time <= ta) {
 8008770:	f04f 0200 	mov.w	r2, #0
 8008774:	f04f 0300 	mov.w	r3, #0
 8008778:	e9d7 0100 	ldrd	r0, r1, [r7]
 800877c:	f7f8 f9c2 	bl	8000b04 <__aeabi_dcmpge>
 8008780:	4603      	mov	r3, r0
 8008782:	2b00      	cmp	r3, #0
 8008784:	d05b      	beq.n	800883e <scaraFlowLSPB1+0xfa>
 8008786:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800878a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800878e:	f7f8 f9af 	bl	8000af0 <__aeabi_dcmple>
 8008792:	4603      	mov	r3, r0
 8008794:	2b00      	cmp	r3, #0
 8008796:	d052      	beq.n	800883e <scaraFlowLSPB1+0xfa>
		lspb->a_current		=	lspb->a_design;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800879e:	68f9      	ldr	r1, [r7, #12]
 80087a0:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		lspb->v_current		=	lspb->v0 + lspb->a_design*time;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80087b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087b4:	f7f7 ff20 	bl	80005f8 <__aeabi_dmul>
 80087b8:	4602      	mov	r2, r0
 80087ba:	460b      	mov	r3, r1
 80087bc:	4620      	mov	r0, r4
 80087be:	4629      	mov	r1, r5
 80087c0:	f7f7 fd64 	bl	800028c <__adddf3>
 80087c4:	4602      	mov	r2, r0
 80087c6:	460b      	mov	r3, r1
 80087c8:	68f9      	ldr	r1, [r7, #12]
 80087ca:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*time + 0.5*lspb->a_design*time*time;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80087da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087de:	f7f7 ff0b 	bl	80005f8 <__aeabi_dmul>
 80087e2:	4602      	mov	r2, r0
 80087e4:	460b      	mov	r3, r1
 80087e6:	4620      	mov	r0, r4
 80087e8:	4629      	mov	r1, r5
 80087ea:	f7f7 fd4f 	bl	800028c <__adddf3>
 80087ee:	4602      	mov	r2, r0
 80087f0:	460b      	mov	r3, r1
 80087f2:	4614      	mov	r4, r2
 80087f4:	461d      	mov	r5, r3
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80087fc:	f04f 0200 	mov.w	r2, #0
 8008800:	4b98      	ldr	r3, [pc, #608]	; (8008a64 <scaraFlowLSPB1+0x320>)
 8008802:	f7f7 fef9 	bl	80005f8 <__aeabi_dmul>
 8008806:	4602      	mov	r2, r0
 8008808:	460b      	mov	r3, r1
 800880a:	4610      	mov	r0, r2
 800880c:	4619      	mov	r1, r3
 800880e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008812:	f7f7 fef1 	bl	80005f8 <__aeabi_dmul>
 8008816:	4602      	mov	r2, r0
 8008818:	460b      	mov	r3, r1
 800881a:	4610      	mov	r0, r2
 800881c:	4619      	mov	r1, r3
 800881e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008822:	f7f7 fee9 	bl	80005f8 <__aeabi_dmul>
 8008826:	4602      	mov	r2, r0
 8008828:	460b      	mov	r3, r1
 800882a:	4620      	mov	r0, r4
 800882c:	4629      	mov	r1, r5
 800882e:	f7f7 fd2d 	bl	800028c <__adddf3>
 8008832:	4602      	mov	r2, r0
 8008834:	460b      	mov	r3, r1
 8008836:	68f9      	ldr	r1, [r7, #12]
 8008838:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
 800883c:	e10b      	b.n	8008a56 <scaraFlowLSPB1+0x312>
	// Constant velocity
	} else if (ta < time && time <= td) {
 800883e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008842:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008846:	f7f8 f949 	bl	8000adc <__aeabi_dcmplt>
 800884a:	4603      	mov	r3, r0
 800884c:	2b00      	cmp	r3, #0
 800884e:	d054      	beq.n	80088fa <scaraFlowLSPB1+0x1b6>
 8008850:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008854:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008858:	f7f8 f94a 	bl	8000af0 <__aeabi_dcmple>
 800885c:	4603      	mov	r3, r0
 800885e:	2b00      	cmp	r3, #0
 8008860:	d04b      	beq.n	80088fa <scaraFlowLSPB1+0x1b6>
		lspb->a_current		=	0;
 8008862:	68f9      	ldr	r1, [r7, #12]
 8008864:	f04f 0200 	mov.w	r2, #0
 8008868:	f04f 0300 	mov.w	r3, #0
 800886c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		lspb->v_current		=	lspb->v_lim;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8008876:	68f9      	ldr	r1, [r7, #12]
 8008878:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*ta*0.5 + lspb->v_design*(time - ta*0.5);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8008888:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800888c:	f7f7 feb4 	bl	80005f8 <__aeabi_dmul>
 8008890:	4602      	mov	r2, r0
 8008892:	460b      	mov	r3, r1
 8008894:	4610      	mov	r0, r2
 8008896:	4619      	mov	r1, r3
 8008898:	f04f 0200 	mov.w	r2, #0
 800889c:	4b71      	ldr	r3, [pc, #452]	; (8008a64 <scaraFlowLSPB1+0x320>)
 800889e:	f7f7 feab 	bl	80005f8 <__aeabi_dmul>
 80088a2:	4602      	mov	r2, r0
 80088a4:	460b      	mov	r3, r1
 80088a6:	4620      	mov	r0, r4
 80088a8:	4629      	mov	r1, r5
 80088aa:	f7f7 fcef 	bl	800028c <__adddf3>
 80088ae:	4602      	mov	r2, r0
 80088b0:	460b      	mov	r3, r1
 80088b2:	4690      	mov	r8, r2
 80088b4:	4699      	mov	r9, r3
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80088bc:	f04f 0200 	mov.w	r2, #0
 80088c0:	4b68      	ldr	r3, [pc, #416]	; (8008a64 <scaraFlowLSPB1+0x320>)
 80088c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80088c6:	f7f7 fe97 	bl	80005f8 <__aeabi_dmul>
 80088ca:	4602      	mov	r2, r0
 80088cc:	460b      	mov	r3, r1
 80088ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80088d2:	f7f7 fcd9 	bl	8000288 <__aeabi_dsub>
 80088d6:	4602      	mov	r2, r0
 80088d8:	460b      	mov	r3, r1
 80088da:	4620      	mov	r0, r4
 80088dc:	4629      	mov	r1, r5
 80088de:	f7f7 fe8b 	bl	80005f8 <__aeabi_dmul>
 80088e2:	4602      	mov	r2, r0
 80088e4:	460b      	mov	r3, r1
 80088e6:	4640      	mov	r0, r8
 80088e8:	4649      	mov	r1, r9
 80088ea:	f7f7 fccf 	bl	800028c <__adddf3>
 80088ee:	4602      	mov	r2, r0
 80088f0:	460b      	mov	r3, r1
 80088f2:	68f9      	ldr	r1, [r7, #12]
 80088f4:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
 80088f8:	e0ad      	b.n	8008a56 <scaraFlowLSPB1+0x312>
	// Decelerate
	} else if (td < time && time <= tf) {
 80088fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088fe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008902:	f7f8 f8eb 	bl	8000adc <__aeabi_dcmplt>
 8008906:	4603      	mov	r3, r0
 8008908:	2b00      	cmp	r3, #0
 800890a:	f000 8090 	beq.w	8008a2e <scaraFlowLSPB1+0x2ea>
 800890e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008912:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008916:	f7f8 f8eb 	bl	8000af0 <__aeabi_dcmple>
 800891a:	4603      	mov	r3, r0
 800891c:	2b00      	cmp	r3, #0
 800891e:	f000 8086 	beq.w	8008a2e <scaraFlowLSPB1+0x2ea>
		lspb->a_current		=	-lspb->a_design;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8008928:	4614      	mov	r4, r2
 800892a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	e9c3 451a 	strd	r4, r5, [r3, #104]	; 0x68
		lspb->v_current		=	lspb->v_design + lspb->a_design*(td - time);
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	e9d3 890c 	ldrd	r8, r9, [r3, #48]	; 0x30
 8008940:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008944:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008948:	f7f7 fc9e 	bl	8000288 <__aeabi_dsub>
 800894c:	4602      	mov	r2, r0
 800894e:	460b      	mov	r3, r1
 8008950:	4640      	mov	r0, r8
 8008952:	4649      	mov	r1, r9
 8008954:	f7f7 fe50 	bl	80005f8 <__aeabi_dmul>
 8008958:	4602      	mov	r2, r0
 800895a:	460b      	mov	r3, r1
 800895c:	4620      	mov	r0, r4
 800895e:	4629      	mov	r1, r5
 8008960:	f7f7 fc94 	bl	800028c <__adddf3>
 8008964:	4602      	mov	r2, r0
 8008966:	460b      	mov	r3, r1
 8008968:	68f9      	ldr	r1, [r7, #12]
 800896a:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		lspb->s_current		=	lspb->s1 - lspb->v0*(tf - time)
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	e9d3 8906 	ldrd	r8, r9, [r3, #24]
 800897a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800897e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008982:	f7f7 fc81 	bl	8000288 <__aeabi_dsub>
 8008986:	4602      	mov	r2, r0
 8008988:	460b      	mov	r3, r1
 800898a:	4640      	mov	r0, r8
 800898c:	4649      	mov	r1, r9
 800898e:	f7f7 fe33 	bl	80005f8 <__aeabi_dmul>
 8008992:	4602      	mov	r2, r0
 8008994:	460b      	mov	r3, r1
 8008996:	4620      	mov	r0, r4
 8008998:	4629      	mov	r1, r5
 800899a:	f7f7 fc75 	bl	8000288 <__aeabi_dsub>
 800899e:	4602      	mov	r2, r0
 80089a0:	460b      	mov	r3, r1
 80089a2:	4614      	mov	r4, r2
 80089a4:	461d      	mov	r5, r3
								- (lspb->v_lim - lspb->v0)*(tf - time)*(tf - time)/(2*ta);
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80089b2:	f7f7 fc69 	bl	8000288 <__aeabi_dsub>
 80089b6:	4602      	mov	r2, r0
 80089b8:	460b      	mov	r3, r1
 80089ba:	4690      	mov	r8, r2
 80089bc:	4699      	mov	r9, r3
 80089be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089c2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80089c6:	f7f7 fc5f 	bl	8000288 <__aeabi_dsub>
 80089ca:	4602      	mov	r2, r0
 80089cc:	460b      	mov	r3, r1
 80089ce:	4640      	mov	r0, r8
 80089d0:	4649      	mov	r1, r9
 80089d2:	f7f7 fe11 	bl	80005f8 <__aeabi_dmul>
 80089d6:	4602      	mov	r2, r0
 80089d8:	460b      	mov	r3, r1
 80089da:	4690      	mov	r8, r2
 80089dc:	4699      	mov	r9, r3
 80089de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089e2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80089e6:	f7f7 fc4f 	bl	8000288 <__aeabi_dsub>
 80089ea:	4602      	mov	r2, r0
 80089ec:	460b      	mov	r3, r1
 80089ee:	4640      	mov	r0, r8
 80089f0:	4649      	mov	r1, r9
 80089f2:	f7f7 fe01 	bl	80005f8 <__aeabi_dmul>
 80089f6:	4602      	mov	r2, r0
 80089f8:	460b      	mov	r3, r1
 80089fa:	4690      	mov	r8, r2
 80089fc:	4699      	mov	r9, r3
 80089fe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008a02:	4602      	mov	r2, r0
 8008a04:	460b      	mov	r3, r1
 8008a06:	f7f7 fc41 	bl	800028c <__adddf3>
 8008a0a:	4602      	mov	r2, r0
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	4640      	mov	r0, r8
 8008a10:	4649      	mov	r1, r9
 8008a12:	f7f7 ff1b 	bl	800084c <__aeabi_ddiv>
 8008a16:	4602      	mov	r2, r0
 8008a18:	460b      	mov	r3, r1
 8008a1a:	4620      	mov	r0, r4
 8008a1c:	4629      	mov	r1, r5
 8008a1e:	f7f7 fc33 	bl	8000288 <__aeabi_dsub>
 8008a22:	4602      	mov	r2, r0
 8008a24:	460b      	mov	r3, r1
		lspb->s_current		=	lspb->s1 - lspb->v0*(tf - time)
 8008a26:	68f9      	ldr	r1, [r7, #12]
 8008a28:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
 8008a2c:	e013      	b.n	8008a56 <scaraFlowLSPB1+0x312>
	} else {
		lspb->a_current 	=	0;
 8008a2e:	68f9      	ldr	r1, [r7, #12]
 8008a30:	f04f 0200 	mov.w	r2, #0
 8008a34:	f04f 0300 	mov.w	r3, #0
 8008a38:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		lspb->v_current		=	0;
 8008a3c:	68f9      	ldr	r1, [r7, #12]
 8008a3e:	f04f 0200 	mov.w	r2, #0
 8008a42:	f04f 0300 	mov.w	r3, #0
 8008a46:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		lspb->s_current		=	lspb->total_s;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8008a50:	68f9      	ldr	r1, [r7, #12]
 8008a52:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	}

	return SCARA_STATUS_OK;
 8008a56:	2300      	movs	r3, #0
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3728      	adds	r7, #40	; 0x28
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008a62:	bf00      	nop
 8008a64:	3fe00000 	.word	0x3fe00000

08008a68 <scaraFlowGCODE>:
SCARA_StatusTypeDef	scaraFlowGCODE(double *s, double time)
{
 8008a68:	b5b0      	push	{r4, r5, r7, lr}
 8008a6a:	b084      	sub	sp, #16
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	60f8      	str	r0, [r7, #12]
 8008a70:	ed87 0b00 	vstr	d0, [r7]
	if ( 0.0f <= time && time <= time_acc) {
 8008a74:	f04f 0200 	mov.w	r2, #0
 8008a78:	f04f 0300 	mov.w	r3, #0
 8008a7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a80:	f7f8 f840 	bl	8000b04 <__aeabi_dcmpge>
 8008a84:	4603      	mov	r3, r0
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d01e      	beq.n	8008ac8 <scaraFlowGCODE+0x60>
 8008a8a:	4b5f      	ldr	r3, [pc, #380]	; (8008c08 <scaraFlowGCODE+0x1a0>)
 8008a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a94:	f7f8 f82c 	bl	8000af0 <__aeabi_dcmple>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d014      	beq.n	8008ac8 <scaraFlowGCODE+0x60>
		*s = acc0*time*time;
 8008a9e:	4b5b      	ldr	r3, [pc, #364]	; (8008c0c <scaraFlowGCODE+0x1a4>)
 8008aa0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008aa4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008aa8:	f7f7 fda6 	bl	80005f8 <__aeabi_dmul>
 8008aac:	4602      	mov	r2, r0
 8008aae:	460b      	mov	r3, r1
 8008ab0:	4610      	mov	r0, r2
 8008ab2:	4619      	mov	r1, r3
 8008ab4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ab8:	f7f7 fd9e 	bl	80005f8 <__aeabi_dmul>
 8008abc:	4602      	mov	r2, r0
 8008abe:	460b      	mov	r3, r1
 8008ac0:	68f9      	ldr	r1, [r7, #12]
 8008ac2:	e9c1 2300 	strd	r2, r3, [r1]
 8008ac6:	e09a      	b.n	8008bfe <scaraFlowGCODE+0x196>
	// Constant velocity
	} else if (time_acc < time && time <= time_dec) {
 8008ac8:	4b4f      	ldr	r3, [pc, #316]	; (8008c08 <scaraFlowGCODE+0x1a0>)
 8008aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ace:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ad2:	f7f8 f821 	bl	8000b18 <__aeabi_dcmpgt>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d01f      	beq.n	8008b1c <scaraFlowGCODE+0xb4>
 8008adc:	4b4c      	ldr	r3, [pc, #304]	; (8008c10 <scaraFlowGCODE+0x1a8>)
 8008ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ae6:	f7f8 f803 	bl	8000af0 <__aeabi_dcmple>
 8008aea:	4603      	mov	r3, r0
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d015      	beq.n	8008b1c <scaraFlowGCODE+0xb4>
		*s = constant[0]*time + constant[1];
 8008af0:	4b48      	ldr	r3, [pc, #288]	; (8008c14 <scaraFlowGCODE+0x1ac>)
 8008af2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008af6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008afa:	f7f7 fd7d 	bl	80005f8 <__aeabi_dmul>
 8008afe:	4602      	mov	r2, r0
 8008b00:	460b      	mov	r3, r1
 8008b02:	4610      	mov	r0, r2
 8008b04:	4619      	mov	r1, r3
 8008b06:	4b43      	ldr	r3, [pc, #268]	; (8008c14 <scaraFlowGCODE+0x1ac>)
 8008b08:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8008b0c:	f7f7 fbbe 	bl	800028c <__adddf3>
 8008b10:	4602      	mov	r2, r0
 8008b12:	460b      	mov	r3, r1
 8008b14:	68f9      	ldr	r1, [r7, #12]
 8008b16:	e9c1 2300 	strd	r2, r3, [r1]
 8008b1a:	e070      	b.n	8008bfe <scaraFlowGCODE+0x196>
	// Decelerate
	} else if (time_dec < time && time <= time_move) {
 8008b1c:	4b3c      	ldr	r3, [pc, #240]	; (8008c10 <scaraFlowGCODE+0x1a8>)
 8008b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b22:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b26:	f7f7 fff7 	bl	8000b18 <__aeabi_dcmpgt>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d038      	beq.n	8008ba2 <scaraFlowGCODE+0x13a>
 8008b30:	4b39      	ldr	r3, [pc, #228]	; (8008c18 <scaraFlowGCODE+0x1b0>)
 8008b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b36:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b3a:	f7f7 ffd9 	bl	8000af0 <__aeabi_dcmple>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d02e      	beq.n	8008ba2 <scaraFlowGCODE+0x13a>
		*s = deacc[0]*time*time + deacc[1]*time + deacc[2];
 8008b44:	4b35      	ldr	r3, [pc, #212]	; (8008c1c <scaraFlowGCODE+0x1b4>)
 8008b46:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008b4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b4e:	f7f7 fd53 	bl	80005f8 <__aeabi_dmul>
 8008b52:	4602      	mov	r2, r0
 8008b54:	460b      	mov	r3, r1
 8008b56:	4610      	mov	r0, r2
 8008b58:	4619      	mov	r1, r3
 8008b5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b5e:	f7f7 fd4b 	bl	80005f8 <__aeabi_dmul>
 8008b62:	4602      	mov	r2, r0
 8008b64:	460b      	mov	r3, r1
 8008b66:	4614      	mov	r4, r2
 8008b68:	461d      	mov	r5, r3
 8008b6a:	4b2c      	ldr	r3, [pc, #176]	; (8008c1c <scaraFlowGCODE+0x1b4>)
 8008b6c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8008b70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b74:	f7f7 fd40 	bl	80005f8 <__aeabi_dmul>
 8008b78:	4602      	mov	r2, r0
 8008b7a:	460b      	mov	r3, r1
 8008b7c:	4620      	mov	r0, r4
 8008b7e:	4629      	mov	r1, r5
 8008b80:	f7f7 fb84 	bl	800028c <__adddf3>
 8008b84:	4602      	mov	r2, r0
 8008b86:	460b      	mov	r3, r1
 8008b88:	4610      	mov	r0, r2
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	4b23      	ldr	r3, [pc, #140]	; (8008c1c <scaraFlowGCODE+0x1b4>)
 8008b8e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8008b92:	f7f7 fb7b 	bl	800028c <__adddf3>
 8008b96:	4602      	mov	r2, r0
 8008b98:	460b      	mov	r3, r1
 8008b9a:	68f9      	ldr	r1, [r7, #12]
 8008b9c:	e9c1 2300 	strd	r2, r3, [r1]
 8008ba0:	e02d      	b.n	8008bfe <scaraFlowGCODE+0x196>
	} else {
		*s = deacc[0]*time*time + deacc[1]*time + deacc[2];
 8008ba2:	4b1e      	ldr	r3, [pc, #120]	; (8008c1c <scaraFlowGCODE+0x1b4>)
 8008ba4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008ba8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bac:	f7f7 fd24 	bl	80005f8 <__aeabi_dmul>
 8008bb0:	4602      	mov	r2, r0
 8008bb2:	460b      	mov	r3, r1
 8008bb4:	4610      	mov	r0, r2
 8008bb6:	4619      	mov	r1, r3
 8008bb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bbc:	f7f7 fd1c 	bl	80005f8 <__aeabi_dmul>
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	460b      	mov	r3, r1
 8008bc4:	4614      	mov	r4, r2
 8008bc6:	461d      	mov	r5, r3
 8008bc8:	4b14      	ldr	r3, [pc, #80]	; (8008c1c <scaraFlowGCODE+0x1b4>)
 8008bca:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8008bce:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bd2:	f7f7 fd11 	bl	80005f8 <__aeabi_dmul>
 8008bd6:	4602      	mov	r2, r0
 8008bd8:	460b      	mov	r3, r1
 8008bda:	4620      	mov	r0, r4
 8008bdc:	4629      	mov	r1, r5
 8008bde:	f7f7 fb55 	bl	800028c <__adddf3>
 8008be2:	4602      	mov	r2, r0
 8008be4:	460b      	mov	r3, r1
 8008be6:	4610      	mov	r0, r2
 8008be8:	4619      	mov	r1, r3
 8008bea:	4b0c      	ldr	r3, [pc, #48]	; (8008c1c <scaraFlowGCODE+0x1b4>)
 8008bec:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8008bf0:	f7f7 fb4c 	bl	800028c <__adddf3>
 8008bf4:	4602      	mov	r2, r0
 8008bf6:	460b      	mov	r3, r1
 8008bf8:	68f9      	ldr	r1, [r7, #12]
 8008bfa:	e9c1 2300 	strd	r2, r3, [r1]
	}
	return SCARA_STATUS_OK;
 8008bfe:	2300      	movs	r3, #0
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3710      	adds	r7, #16
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bdb0      	pop	{r4, r5, r7, pc}
 8008c08:	20006f40 	.word	0x20006f40
 8008c0c:	2000dd00 	.word	0x2000dd00
 8008c10:	20006f60 	.word	0x20006f60
 8008c14:	20006f70 	.word	0x20006f70
 8008c18:	20006f98 	.word	0x20006f98
 8008c1c:	20006f48 	.word	0x20006f48

08008c20 <scaraFLowScurve1>:
SCARA_StatusTypeDef	scaraFLowScurve1(Trajectory_Scurve_TypeDef *scurve, double t)
{
 8008c20:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008c24:	b08c      	sub	sp, #48	; 0x30
 8008c26:	af00      	add	r7, sp, #0
 8008c28:	60f8      	str	r0, [r7, #12]
 8008c2a:	ed87 0b00 	vstr	d0, [r7]
	double tf, td, ta, vc;
	tf = scurve->Tf;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8008c34:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	ta = scurve->Ta;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8008c3e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	td = scurve->Td;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8008c48:	e9c7 2306 	strd	r2, r3, [r7, #24]
	vc = scurve->v_design;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8008c52:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if ( 0.0f <= t && t <= ta) {
 8008c56:	f04f 0200 	mov.w	r2, #0
 8008c5a:	f04f 0300 	mov.w	r3, #0
 8008c5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c62:	f7f7 ff4f 	bl	8000b04 <__aeabi_dcmpge>
 8008c66:	4603      	mov	r3, r0
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d025      	beq.n	8008cb8 <scaraFLowScurve1+0x98>
 8008c6c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008c70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c74:	f7f7 ff3c 	bl	8000af0 <__aeabi_dcmple>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d01c      	beq.n	8008cb8 <scaraFLowScurve1+0x98>
//		lspb->a_current		=	(time*vc)/ta*ta;
//		lspb->v_current		=	(time*time*vc)/(2*ta*ta);
		scurve->s_current	=	t*t*t*scurve->k_1;
 8008c7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c82:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c86:	f7f7 fcb7 	bl	80005f8 <__aeabi_dmul>
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	460b      	mov	r3, r1
 8008c8e:	4610      	mov	r0, r2
 8008c90:	4619      	mov	r1, r3
 8008c92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c96:	f7f7 fcaf 	bl	80005f8 <__aeabi_dmul>
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	460b      	mov	r3, r1
 8008c9e:	4610      	mov	r0, r2
 8008ca0:	4619      	mov	r1, r3
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8008ca8:	f7f7 fca6 	bl	80005f8 <__aeabi_dmul>
 8008cac:	4602      	mov	r2, r0
 8008cae:	460b      	mov	r3, r1
 8008cb0:	68f9      	ldr	r1, [r7, #12]
 8008cb2:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 8008cb6:	e17c      	b.n	8008fb2 <scaraFLowScurve1+0x392>
	// Constant velocity
	} else if (ta < t && t <= 2*ta) {
 8008cb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cbc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008cc0:	f7f7 ff0c 	bl	8000adc <__aeabi_dcmplt>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d061      	beq.n	8008d8e <scaraFLowScurve1+0x16e>
 8008cca:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008cce:	4602      	mov	r2, r0
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	f7f7 fadb 	bl	800028c <__adddf3>
 8008cd6:	4602      	mov	r2, r0
 8008cd8:	460b      	mov	r3, r1
 8008cda:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008cde:	f7f7 ff07 	bl	8000af0 <__aeabi_dcmple>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d052      	beq.n	8008d8e <scaraFLowScurve1+0x16e>
//		scurve->a_current   =	-(vc*(time - 2*ta))/(ta*ta);
//		scurve->v_current   =	vc/2 - (vc*(time - ta)*(time - 3*ta))/(2*ta*ta);
		scurve->s_current   =	-(t*t*t - t*t*scurve->k_3 + t*scurve->k_4 - scurve->k_2)*scurve->k_1;
 8008ce8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cec:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008cf0:	f7f7 fc82 	bl	80005f8 <__aeabi_dmul>
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	460b      	mov	r3, r1
 8008cf8:	4610      	mov	r0, r2
 8008cfa:	4619      	mov	r1, r3
 8008cfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d00:	f7f7 fc7a 	bl	80005f8 <__aeabi_dmul>
 8008d04:	4602      	mov	r2, r0
 8008d06:	460b      	mov	r3, r1
 8008d08:	4690      	mov	r8, r2
 8008d0a:	4699      	mov	r9, r3
 8008d0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d10:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d14:	f7f7 fc70 	bl	80005f8 <__aeabi_dmul>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	460b      	mov	r3, r1
 8008d1c:	4610      	mov	r0, r2
 8008d1e:	4619      	mov	r1, r3
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8008d26:	f7f7 fc67 	bl	80005f8 <__aeabi_dmul>
 8008d2a:	4602      	mov	r2, r0
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	4640      	mov	r0, r8
 8008d30:	4649      	mov	r1, r9
 8008d32:	f7f7 faa9 	bl	8000288 <__aeabi_dsub>
 8008d36:	4602      	mov	r2, r0
 8008d38:	460b      	mov	r3, r1
 8008d3a:	4690      	mov	r8, r2
 8008d3c:	4699      	mov	r9, r3
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	; 0x90
 8008d44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d48:	f7f7 fc56 	bl	80005f8 <__aeabi_dmul>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	460b      	mov	r3, r1
 8008d50:	4640      	mov	r0, r8
 8008d52:	4649      	mov	r1, r9
 8008d54:	f7f7 fa9a 	bl	800028c <__adddf3>
 8008d58:	4602      	mov	r2, r0
 8008d5a:	460b      	mov	r3, r1
 8008d5c:	4610      	mov	r0, r2
 8008d5e:	4619      	mov	r1, r3
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8008d66:	f7f7 fa8f 	bl	8000288 <__aeabi_dsub>
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	460b      	mov	r3, r1
 8008d6e:	4614      	mov	r4, r2
 8008d70:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8008d7a:	4620      	mov	r0, r4
 8008d7c:	4629      	mov	r1, r5
 8008d7e:	f7f7 fc3b 	bl	80005f8 <__aeabi_dmul>
 8008d82:	4602      	mov	r2, r0
 8008d84:	460b      	mov	r3, r1
 8008d86:	68f9      	ldr	r1, [r7, #12]
 8008d88:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 8008d8c:	e111      	b.n	8008fb2 <scaraFLowScurve1+0x392>
	// Decelerate
	} else if (2*ta < t && t <= td - ta) {
 8008d8e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008d92:	4602      	mov	r2, r0
 8008d94:	460b      	mov	r3, r1
 8008d96:	f7f7 fa79 	bl	800028c <__adddf3>
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	460b      	mov	r3, r1
 8008d9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008da2:	f7f7 feb9 	bl	8000b18 <__aeabi_dcmpgt>
 8008da6:	4603      	mov	r3, r0
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d022      	beq.n	8008df2 <scaraFLowScurve1+0x1d2>
 8008dac:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008db0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008db4:	f7f7 fa68 	bl	8000288 <__aeabi_dsub>
 8008db8:	4602      	mov	r2, r0
 8008dba:	460b      	mov	r3, r1
 8008dbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008dc0:	f7f7 fe96 	bl	8000af0 <__aeabi_dcmple>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d013      	beq.n	8008df2 <scaraFLowScurve1+0x1d2>
//		scurve->a_current   =	0;
//		scurve->v_current   =	v_design;
		scurve->s_current   =	vc*(t - ta);
 8008dca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008dce:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008dd2:	f7f7 fa59 	bl	8000288 <__aeabi_dsub>
 8008dd6:	4602      	mov	r2, r0
 8008dd8:	460b      	mov	r3, r1
 8008dda:	4610      	mov	r0, r2
 8008ddc:	4619      	mov	r1, r3
 8008dde:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008de2:	f7f7 fc09 	bl	80005f8 <__aeabi_dmul>
 8008de6:	4602      	mov	r2, r0
 8008de8:	460b      	mov	r3, r1
 8008dea:	68f9      	ldr	r1, [r7, #12]
 8008dec:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 8008df0:	e0df      	b.n	8008fb2 <scaraFLowScurve1+0x392>
	} else if(td-ta < t && t <= td){
 8008df2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008df6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008dfa:	f7f7 fa45 	bl	8000288 <__aeabi_dsub>
 8008dfe:	4602      	mov	r2, r0
 8008e00:	460b      	mov	r3, r1
 8008e02:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e06:	f7f7 fe87 	bl	8000b18 <__aeabi_dcmpgt>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	f000 8081 	beq.w	8008f14 <scaraFLowScurve1+0x2f4>
 8008e12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008e16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e1a:	f7f7 fe69 	bl	8000af0 <__aeabi_dcmple>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d077      	beq.n	8008f14 <scaraFLowScurve1+0x2f4>
//		scurve->a_current 	=	-(vc*(t - td + ta))/ta^2;
//		scurve->v_current   =	vc/2 - (vc*(t + ta - tf)*(t + 3*ta - tf))/(2*ta*ta);
		scurve->s_current   =	scurve->total_s - (ta*vc)/3 - vc*(t - tf) - (t-tf)*(t-tf)*(t + scurve->k_3 - tf)*scurve->k_1;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	e9d3 451c 	ldrd	r4, r5, [r3, #112]	; 0x70
 8008e2a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008e2e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008e32:	f7f7 fbe1 	bl	80005f8 <__aeabi_dmul>
 8008e36:	4602      	mov	r2, r0
 8008e38:	460b      	mov	r3, r1
 8008e3a:	4610      	mov	r0, r2
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	f04f 0200 	mov.w	r2, #0
 8008e42:	4b5f      	ldr	r3, [pc, #380]	; (8008fc0 <scaraFLowScurve1+0x3a0>)
 8008e44:	f7f7 fd02 	bl	800084c <__aeabi_ddiv>
 8008e48:	4602      	mov	r2, r0
 8008e4a:	460b      	mov	r3, r1
 8008e4c:	4620      	mov	r0, r4
 8008e4e:	4629      	mov	r1, r5
 8008e50:	f7f7 fa1a 	bl	8000288 <__aeabi_dsub>
 8008e54:	4602      	mov	r2, r0
 8008e56:	460b      	mov	r3, r1
 8008e58:	4614      	mov	r4, r2
 8008e5a:	461d      	mov	r5, r3
 8008e5c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008e60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e64:	f7f7 fa10 	bl	8000288 <__aeabi_dsub>
 8008e68:	4602      	mov	r2, r0
 8008e6a:	460b      	mov	r3, r1
 8008e6c:	4610      	mov	r0, r2
 8008e6e:	4619      	mov	r1, r3
 8008e70:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008e74:	f7f7 fbc0 	bl	80005f8 <__aeabi_dmul>
 8008e78:	4602      	mov	r2, r0
 8008e7a:	460b      	mov	r3, r1
 8008e7c:	4620      	mov	r0, r4
 8008e7e:	4629      	mov	r1, r5
 8008e80:	f7f7 fa02 	bl	8000288 <__aeabi_dsub>
 8008e84:	4602      	mov	r2, r0
 8008e86:	460b      	mov	r3, r1
 8008e88:	4614      	mov	r4, r2
 8008e8a:	461d      	mov	r5, r3
 8008e8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008e90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e94:	f7f7 f9f8 	bl	8000288 <__aeabi_dsub>
 8008e98:	4602      	mov	r2, r0
 8008e9a:	460b      	mov	r3, r1
 8008e9c:	4690      	mov	r8, r2
 8008e9e:	4699      	mov	r9, r3
 8008ea0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008ea4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ea8:	f7f7 f9ee 	bl	8000288 <__aeabi_dsub>
 8008eac:	4602      	mov	r2, r0
 8008eae:	460b      	mov	r3, r1
 8008eb0:	4640      	mov	r0, r8
 8008eb2:	4649      	mov	r1, r9
 8008eb4:	f7f7 fba0 	bl	80005f8 <__aeabi_dmul>
 8008eb8:	4602      	mov	r2, r0
 8008eba:	460b      	mov	r3, r1
 8008ebc:	4690      	mov	r8, r2
 8008ebe:	4699      	mov	r9, r3
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 8008ec6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008eca:	f7f7 f9df 	bl	800028c <__adddf3>
 8008ece:	4602      	mov	r2, r0
 8008ed0:	460b      	mov	r3, r1
 8008ed2:	4610      	mov	r0, r2
 8008ed4:	4619      	mov	r1, r3
 8008ed6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008eda:	f7f7 f9d5 	bl	8000288 <__aeabi_dsub>
 8008ede:	4602      	mov	r2, r0
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	4640      	mov	r0, r8
 8008ee4:	4649      	mov	r1, r9
 8008ee6:	f7f7 fb87 	bl	80005f8 <__aeabi_dmul>
 8008eea:	4602      	mov	r2, r0
 8008eec:	460b      	mov	r3, r1
 8008eee:	4610      	mov	r0, r2
 8008ef0:	4619      	mov	r1, r3
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8008ef8:	f7f7 fb7e 	bl	80005f8 <__aeabi_dmul>
 8008efc:	4602      	mov	r2, r0
 8008efe:	460b      	mov	r3, r1
 8008f00:	4620      	mov	r0, r4
 8008f02:	4629      	mov	r1, r5
 8008f04:	f7f7 f9c0 	bl	8000288 <__aeabi_dsub>
 8008f08:	4602      	mov	r2, r0
 8008f0a:	460b      	mov	r3, r1
 8008f0c:	68f9      	ldr	r1, [r7, #12]
 8008f0e:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 8008f12:	e04e      	b.n	8008fb2 <scaraFLowScurve1+0x392>
	} else if(td < t && t <= tf){
 8008f14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f18:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008f1c:	f7f7 fdde 	bl	8000adc <__aeabi_dcmplt>
 8008f20:	4603      	mov	r3, r0
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d045      	beq.n	8008fb2 <scaraFLowScurve1+0x392>
 8008f26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008f2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f2e:	f7f7 fddf 	bl	8000af0 <__aeabi_dcmple>
 8008f32:	4603      	mov	r3, r0
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d03c      	beq.n	8008fb2 <scaraFLowScurve1+0x392>
//		scurve->a_current 	=	-(vc*(ta - t + td))/(ta*ta);
//		scurve->v_current   =	(vc*(t - tf)*(t-tf))/(2*ta*ta);
		scurve->s_current   =	scurve->total_s + (t-tf)*(t-tf)*(t-tf)*scurve->k_1;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	e9d3 451c 	ldrd	r4, r5, [r3, #112]	; 0x70
 8008f3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008f42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f46:	f7f7 f99f 	bl	8000288 <__aeabi_dsub>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	4690      	mov	r8, r2
 8008f50:	4699      	mov	r9, r3
 8008f52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008f56:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f5a:	f7f7 f995 	bl	8000288 <__aeabi_dsub>
 8008f5e:	4602      	mov	r2, r0
 8008f60:	460b      	mov	r3, r1
 8008f62:	4640      	mov	r0, r8
 8008f64:	4649      	mov	r1, r9
 8008f66:	f7f7 fb47 	bl	80005f8 <__aeabi_dmul>
 8008f6a:	4602      	mov	r2, r0
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	4690      	mov	r8, r2
 8008f70:	4699      	mov	r9, r3
 8008f72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008f76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f7a:	f7f7 f985 	bl	8000288 <__aeabi_dsub>
 8008f7e:	4602      	mov	r2, r0
 8008f80:	460b      	mov	r3, r1
 8008f82:	4640      	mov	r0, r8
 8008f84:	4649      	mov	r1, r9
 8008f86:	f7f7 fb37 	bl	80005f8 <__aeabi_dmul>
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	460b      	mov	r3, r1
 8008f8e:	4610      	mov	r0, r2
 8008f90:	4619      	mov	r1, r3
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8008f98:	f7f7 fb2e 	bl	80005f8 <__aeabi_dmul>
 8008f9c:	4602      	mov	r2, r0
 8008f9e:	460b      	mov	r3, r1
 8008fa0:	4620      	mov	r0, r4
 8008fa2:	4629      	mov	r1, r5
 8008fa4:	f7f7 f972 	bl	800028c <__adddf3>
 8008fa8:	4602      	mov	r2, r0
 8008faa:	460b      	mov	r3, r1
 8008fac:	68f9      	ldr	r1, [r7, #12]
 8008fae:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
	}

	return SCARA_STATUS_OK;
 8008fb2:	2300      	movs	r3, #0
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3730      	adds	r7, #48	; 0x30
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008fbe:	bf00      	nop
 8008fc0:	40080000 	.word	0x40080000
 8008fc4:	00000000 	.word	0x00000000

08008fc8 <scaraInitLSPB>:
SCARA_StatusTypeDef	scaraInitLSPB		(Trajectory_LSPB_TypeDef *lspb,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double a_factor) {
 8008fc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008fcc:	b0ac      	sub	sp, #176	; 0xb0
 8008fce:	af00      	add	r7, sp, #0
 8008fd0:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008fd2:	460b      	mov	r3, r1
 8008fd4:	ed87 0b08 	vstr	d0, [r7, #32]
 8008fd8:	ed87 1b06 	vstr	d1, [r7, #24]
 8008fdc:	ed87 2b04 	vstr	d2, [r7, #16]
 8008fe0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008fe4:	4613      	mov	r3, r2
 8008fe6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	 double v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	 uint32_t	no_sample;
	 int8_t	dir;

	 if ( TRAJECTORY_3D == target) {
 8008fea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008fee:	2b04      	cmp	r3, #4
 8008ff0:	d118      	bne.n	8009024 <scaraInitLSPB+0x5c>
		 v_design = V_DESIGN_3D*v_factor;
 8008ff2:	f20f 7350 	addw	r3, pc, #1872	; 0x750
 8008ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ffa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008ffe:	f7f7 fafb 	bl	80005f8 <__aeabi_dmul>
 8009002:	4602      	mov	r2, r0
 8009004:	460b      	mov	r3, r1
 8009006:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_3D*a_factor;
 800900a:	f20f 7338 	addw	r3, pc, #1848	; 0x738
 800900e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009012:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009016:	f7f7 faef 	bl	80005f8 <__aeabi_dmul>
 800901a:	4602      	mov	r2, r0
 800901c:	460b      	mov	r3, r1
 800901e:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 8009022:	e092      	b.n	800914a <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_ROLL == target) {
 8009024:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009028:	2b05      	cmp	r3, #5
 800902a:	d118      	bne.n	800905e <scaraInitLSPB+0x96>
		 v_design = V_DESIGN_ROLL*v_factor;
 800902c:	f20f 731c 	addw	r3, pc, #1820	; 0x71c
 8009030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009034:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009038:	f7f7 fade 	bl	80005f8 <__aeabi_dmul>
 800903c:	4602      	mov	r2, r0
 800903e:	460b      	mov	r3, r1
 8009040:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_ROLL*a_factor;
 8009044:	f20f 7304 	addw	r3, pc, #1796	; 0x704
 8009048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800904c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009050:	f7f7 fad2 	bl	80005f8 <__aeabi_dmul>
 8009054:	4602      	mov	r2, r0
 8009056:	460b      	mov	r3, r1
 8009058:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 800905c:	e075      	b.n	800914a <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J0 == target) {
 800905e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009062:	2b00      	cmp	r3, #0
 8009064:	d118      	bne.n	8009098 <scaraInitLSPB+0xd0>
		 v_design = V_DESIGN_J0*v_factor;
 8009066:	f20f 63e4 	addw	r3, pc, #1764	; 0x6e4
 800906a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800906e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009072:	f7f7 fac1 	bl	80005f8 <__aeabi_dmul>
 8009076:	4602      	mov	r2, r0
 8009078:	460b      	mov	r3, r1
 800907a:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J0*a_factor;
 800907e:	f20f 63cc 	addw	r3, pc, #1740	; 0x6cc
 8009082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009086:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800908a:	f7f7 fab5 	bl	80005f8 <__aeabi_dmul>
 800908e:	4602      	mov	r2, r0
 8009090:	460b      	mov	r3, r1
 8009092:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 8009096:	e058      	b.n	800914a <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J1 == target) {
 8009098:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800909c:	2b01      	cmp	r3, #1
 800909e:	d118      	bne.n	80090d2 <scaraInitLSPB+0x10a>
		 v_design = V_DESIGN_J1*v_factor;
 80090a0:	f20f 63a8 	addw	r3, pc, #1704	; 0x6a8
 80090a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80090ac:	f7f7 faa4 	bl	80005f8 <__aeabi_dmul>
 80090b0:	4602      	mov	r2, r0
 80090b2:	460b      	mov	r3, r1
 80090b4:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J1*a_factor;
 80090b8:	f20f 6390 	addw	r3, pc, #1680	; 0x690
 80090bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80090c4:	f7f7 fa98 	bl	80005f8 <__aeabi_dmul>
 80090c8:	4602      	mov	r2, r0
 80090ca:	460b      	mov	r3, r1
 80090cc:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 80090d0:	e03b      	b.n	800914a <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J2 == target) {
 80090d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80090d6:	2b02      	cmp	r3, #2
 80090d8:	d118      	bne.n	800910c <scaraInitLSPB+0x144>
		 v_design = V_DESIGN_J2*v_factor;
 80090da:	f20f 6368 	addw	r3, pc, #1640	; 0x668
 80090de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80090e6:	f7f7 fa87 	bl	80005f8 <__aeabi_dmul>
 80090ea:	4602      	mov	r2, r0
 80090ec:	460b      	mov	r3, r1
 80090ee:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J2*a_factor;
 80090f2:	f20f 6350 	addw	r3, pc, #1616	; 0x650
 80090f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090fa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80090fe:	f7f7 fa7b 	bl	80005f8 <__aeabi_dmul>
 8009102:	4602      	mov	r2, r0
 8009104:	460b      	mov	r3, r1
 8009106:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 800910a:	e01e      	b.n	800914a <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J3 == target) {
 800910c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009110:	2b03      	cmp	r3, #3
 8009112:	d118      	bne.n	8009146 <scaraInitLSPB+0x17e>
		 v_design = V_DESIGN_J3*v_factor;
 8009114:	f20f 633c 	addw	r3, pc, #1596	; 0x63c
 8009118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800911c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009120:	f7f7 fa6a 	bl	80005f8 <__aeabi_dmul>
 8009124:	4602      	mov	r2, r0
 8009126:	460b      	mov	r3, r1
 8009128:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J3*a_factor;
 800912c:	f20f 6324 	addw	r3, pc, #1572	; 0x624
 8009130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009134:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009138:	f7f7 fa5e 	bl	80005f8 <__aeabi_dmul>
 800913c:	4602      	mov	r2, r0
 800913e:	460b      	mov	r3, r1
 8009140:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 8009144:	e001      	b.n	800914a <scaraInitLSPB+0x182>
	 } else {
		 return SCARA_STATUS_ERROR_PARA;
 8009146:	2306      	movs	r3, #6
 8009148:	e2ef      	b.n	800972a <scaraInitLSPB+0x762>
	 }

	 q0 = 0;
 800914a:	f04f 0200 	mov.w	r2, #0
 800914e:	f04f 0300 	mov.w	r3, #0
 8009152:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	 q1 = total_s;
 8009156:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800915a:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
	 v0 = 0;
 800915e:	f04f 0200 	mov.w	r2, #0
 8009162:	f04f 0300 	mov.w	r3, #0
 8009166:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	 v1 = 0;
 800916a:	f04f 0200 	mov.w	r2, #0
 800916e:	f04f 0300 	mov.w	r3, #0
 8009172:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	 if ( q0 <= q1) {
 8009176:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800917a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800917e:	f7f7 fcb7 	bl	8000af0 <__aeabi_dcmple>
 8009182:	4603      	mov	r3, r0
 8009184:	2b00      	cmp	r3, #0
 8009186:	d003      	beq.n	8009190 <scaraInitLSPB+0x1c8>
		 dir = 1;
 8009188:	2301      	movs	r3, #1
 800918a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800918e:	e00c      	b.n	80091aa <scaraInitLSPB+0x1e2>
	 } else {
		 dir = -1;
 8009190:	23ff      	movs	r3, #255	; 0xff
 8009192:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		 q1 = -q1;
 8009196:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800919a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800919e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80091a2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80091a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	 }

	 if (DUTY_MODE_INIT_QVT == modeinit) {
 80091aa:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80091ae:	2b01      	cmp	r3, #1
 80091b0:	f040 809b 	bne.w	80092ea <scaraInitLSPB+0x322>
		 double v_lower, v_upper, tc_upper, a_upper;
		 tf = lspb->Tf;
 80091b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b6:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80091ba:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		 // Avoid division by 0
		 if (tf > 0.001) {
 80091be:	f20f 539c 	addw	r3, pc, #1436	; 0x59c
 80091c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c6:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80091ca:	f7f7 fca5 	bl	8000b18 <__aeabi_dcmpgt>
 80091ce:	4603      	mov	r3, r0
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d07e      	beq.n	80092d2 <scaraInitLSPB+0x30a>
			 v_lower 	= (q1 - q0) / tf;
 80091d4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80091d8:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80091dc:	f7f7 f854 	bl	8000288 <__aeabi_dsub>
 80091e0:	4602      	mov	r2, r0
 80091e2:	460b      	mov	r3, r1
 80091e4:	4610      	mov	r0, r2
 80091e6:	4619      	mov	r1, r3
 80091e8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80091ec:	f7f7 fb2e 	bl	800084c <__aeabi_ddiv>
 80091f0:	4602      	mov	r2, r0
 80091f2:	460b      	mov	r3, r1
 80091f4:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			 v_upper 	= 2*(q1 - q0) / tf;
 80091f8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80091fc:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8009200:	f7f7 f842 	bl	8000288 <__aeabi_dsub>
 8009204:	4602      	mov	r2, r0
 8009206:	460b      	mov	r3, r1
 8009208:	4610      	mov	r0, r2
 800920a:	4619      	mov	r1, r3
 800920c:	4602      	mov	r2, r0
 800920e:	460b      	mov	r3, r1
 8009210:	f7f7 f83c 	bl	800028c <__adddf3>
 8009214:	4602      	mov	r2, r0
 8009216:	460b      	mov	r3, r1
 8009218:	4610      	mov	r0, r2
 800921a:	4619      	mov	r1, r3
 800921c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8009220:	f7f7 fb14 	bl	800084c <__aeabi_ddiv>
 8009224:	4602      	mov	r2, r0
 8009226:	460b      	mov	r3, r1
 8009228:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

			 if ( v_design < v_lower) {
 800922c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009230:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8009234:	f7f7 fc52 	bl	8000adc <__aeabi_dcmplt>
 8009238:	4603      	mov	r3, r0
 800923a:	2b00      	cmp	r3, #0
 800923c:	d001      	beq.n	8009242 <scaraInitLSPB+0x27a>
				 return SCARA_STATUS_ERROR_OVER_VELOC;
 800923e:	2309      	movs	r3, #9
 8009240:	e273      	b.n	800972a <scaraInitLSPB+0x762>
			 } else {
				 if ( v_upper <= v_design) {
 8009242:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8009246:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800924a:	f7f7 fc51 	bl	8000af0 <__aeabi_dcmple>
 800924e:	4603      	mov	r3, r0
 8009250:	2b00      	cmp	r3, #0
 8009252:	d003      	beq.n	800925c <scaraInitLSPB+0x294>
					 v_design = v_upper;
 8009254:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009258:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
				 }
				 // Avoid division by 0
				 if (v_design > 0.0000001) {
 800925c:	f20f 5304 	addw	r3, pc, #1284	; 0x504
 8009260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009264:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8009268:	f7f7 fc56 	bl	8000b18 <__aeabi_dcmpgt>
 800926c:	4603      	mov	r3, r0
 800926e:	2b00      	cmp	r3, #0
 8009270:	d018      	beq.n	80092a4 <scaraInitLSPB+0x2dc>
					 tc_upper	= tf - (q1 - q0)/v_design;
 8009272:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009276:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800927a:	f7f7 f805 	bl	8000288 <__aeabi_dsub>
 800927e:	4602      	mov	r2, r0
 8009280:	460b      	mov	r3, r1
 8009282:	4610      	mov	r0, r2
 8009284:	4619      	mov	r1, r3
 8009286:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800928a:	f7f7 fadf 	bl	800084c <__aeabi_ddiv>
 800928e:	4602      	mov	r2, r0
 8009290:	460b      	mov	r3, r1
 8009292:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8009296:	f7f6 fff7 	bl	8000288 <__aeabi_dsub>
 800929a:	4602      	mov	r2, r0
 800929c:	460b      	mov	r3, r1
 800929e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 80092a2:	e00b      	b.n	80092bc <scaraInitLSPB+0x2f4>
				 } else {
					 tc_upper = tf / 2;
 80092a4:	f04f 0200 	mov.w	r2, #0
 80092a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80092ac:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80092b0:	f7f7 facc 	bl	800084c <__aeabi_ddiv>
 80092b4:	4602      	mov	r2, r0
 80092b6:	460b      	mov	r3, r1
 80092b8:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
				 }
				 a_upper	= v_design/tc_upper;
 80092bc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80092c0:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80092c4:	f7f7 fac2 	bl	800084c <__aeabi_ddiv>
 80092c8:	4602      	mov	r2, r0
 80092ca:	460b      	mov	r3, r1
 80092cc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80092d0:	e00b      	b.n	80092ea <scaraInitLSPB+0x322>
				//  } else {
				// 	 a_design = a_upper;
				//  }
			 }
		 } else {
			 v_design = 0;
 80092d2:	f04f 0200 	mov.w	r2, #0
 80092d6:	f04f 0300 	mov.w	r3, #0
 80092da:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
			 a_design = 0;
 80092de:	f04f 0200 	mov.w	r2, #0
 80092e2:	f04f 0300 	mov.w	r3, #0
 80092e6:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
		 }
	}

	 // Check condition trapezoidal ---> triangle
	 // Avoid division by 0
	 if (a_design > 0.0000001 && v_design > 0.0000001) {
 80092ea:	f20f 4378 	addw	r3, pc, #1144	; 0x478
 80092ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80092f6:	f7f7 fc0f 	bl	8000b18 <__aeabi_dcmpgt>
 80092fa:	4603      	mov	r3, r0
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	f000 8196 	beq.w	800962e <scaraInitLSPB+0x666>
 8009302:	f20f 4360 	addw	r3, pc, #1120	; 0x460
 8009306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800930a:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800930e:	f7f7 fc03 	bl	8000b18 <__aeabi_dcmpgt>
 8009312:	4603      	mov	r3, r0
 8009314:	2b00      	cmp	r3, #0
 8009316:	f000 818a 	beq.w	800962e <scaraInitLSPB+0x666>
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 800931a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800931e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8009322:	f7f6 ffb1 	bl	8000288 <__aeabi_dsub>
 8009326:	4602      	mov	r2, r0
 8009328:	460b      	mov	r3, r1
 800932a:	4614      	mov	r4, r2
 800932c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8009330:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8009334:	4620      	mov	r0, r4
 8009336:	4629      	mov	r1, r5
 8009338:	f7f7 f95e 	bl	80005f8 <__aeabi_dmul>
 800933c:	4602      	mov	r2, r0
 800933e:	460b      	mov	r3, r1
 8009340:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8009344:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8009348:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800934c:	f7f7 f954 	bl	80005f8 <__aeabi_dmul>
 8009350:	4602      	mov	r2, r0
 8009352:	460b      	mov	r3, r1
 8009354:	e9c7 2300 	strd	r2, r3, [r7]
 8009358:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800935c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009360:	f7f7 f94a 	bl	80005f8 <__aeabi_dmul>
 8009364:	4602      	mov	r2, r0
 8009366:	460b      	mov	r3, r1
 8009368:	4614      	mov	r4, r2
 800936a:	461d      	mov	r5, r3
 800936c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009370:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009374:	f7f7 f940 	bl	80005f8 <__aeabi_dmul>
 8009378:	4602      	mov	r2, r0
 800937a:	460b      	mov	r3, r1
 800937c:	4620      	mov	r0, r4
 800937e:	4629      	mov	r1, r5
 8009380:	f7f6 ff84 	bl	800028c <__adddf3>
 8009384:	4602      	mov	r2, r0
 8009386:	460b      	mov	r3, r1
 8009388:	4610      	mov	r0, r2
 800938a:	4619      	mov	r1, r3
 800938c:	f04f 0200 	mov.w	r2, #0
 8009390:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009394:	f7f7 fa5a 	bl	800084c <__aeabi_ddiv>
 8009398:	4602      	mov	r2, r0
 800939a:	460b      	mov	r3, r1
 800939c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80093a0:	f7f6 ff72 	bl	8000288 <__aeabi_dsub>
 80093a4:	4602      	mov	r2, r0
 80093a6:	460b      	mov	r3, r1
 80093a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80093ac:	f7f7 fba0 	bl	8000af0 <__aeabi_dcmple>
 80093b0:	4603      	mov	r3, r0
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d075      	beq.n	80094a2 <scaraInitLSPB+0x4da>
			 v_lim 	= sqrt(fabs(q1 - q0)*a_design + (v0*v0 + v1*v1)/2);
 80093b6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80093ba:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80093be:	f7f6 ff63 	bl	8000288 <__aeabi_dsub>
 80093c2:	4602      	mov	r2, r0
 80093c4:	460b      	mov	r3, r1
 80093c6:	4692      	mov	sl, r2
 80093c8:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 80093cc:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80093d0:	4650      	mov	r0, sl
 80093d2:	4659      	mov	r1, fp
 80093d4:	f7f7 f910 	bl	80005f8 <__aeabi_dmul>
 80093d8:	4602      	mov	r2, r0
 80093da:	460b      	mov	r3, r1
 80093dc:	4614      	mov	r4, r2
 80093de:	461d      	mov	r5, r3
 80093e0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80093e4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80093e8:	f7f7 f906 	bl	80005f8 <__aeabi_dmul>
 80093ec:	4602      	mov	r2, r0
 80093ee:	460b      	mov	r3, r1
 80093f0:	4690      	mov	r8, r2
 80093f2:	4699      	mov	r9, r3
 80093f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80093f8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80093fc:	f7f7 f8fc 	bl	80005f8 <__aeabi_dmul>
 8009400:	4602      	mov	r2, r0
 8009402:	460b      	mov	r3, r1
 8009404:	4640      	mov	r0, r8
 8009406:	4649      	mov	r1, r9
 8009408:	f7f6 ff40 	bl	800028c <__adddf3>
 800940c:	4602      	mov	r2, r0
 800940e:	460b      	mov	r3, r1
 8009410:	4610      	mov	r0, r2
 8009412:	4619      	mov	r1, r3
 8009414:	f04f 0200 	mov.w	r2, #0
 8009418:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800941c:	f7f7 fa16 	bl	800084c <__aeabi_ddiv>
 8009420:	4602      	mov	r2, r0
 8009422:	460b      	mov	r3, r1
 8009424:	4620      	mov	r0, r4
 8009426:	4629      	mov	r1, r5
 8009428:	f7f6 ff30 	bl	800028c <__adddf3>
 800942c:	4602      	mov	r2, r0
 800942e:	460b      	mov	r3, r1
 8009430:	ec43 2b17 	vmov	d7, r2, r3
 8009434:	eeb0 0a47 	vmov.f32	s0, s14
 8009438:	eef0 0a67 	vmov.f32	s1, s15
 800943c:	f011 fa68 	bl	801a910 <sqrt>
 8009440:	ed87 0b26 	vstr	d0, [r7, #152]	; 0x98
			 ta		= (v_lim - v0)/a_design;
 8009444:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009448:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800944c:	f7f6 ff1c 	bl	8000288 <__aeabi_dsub>
 8009450:	4602      	mov	r2, r0
 8009452:	460b      	mov	r3, r1
 8009454:	4610      	mov	r0, r2
 8009456:	4619      	mov	r1, r3
 8009458:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800945c:	f7f7 f9f6 	bl	800084c <__aeabi_ddiv>
 8009460:	4602      	mov	r2, r0
 8009462:	460b      	mov	r3, r1
 8009464:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
			 td		= (v_lim - v1)/a_design;
 8009468:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800946c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009470:	f7f6 ff0a 	bl	8000288 <__aeabi_dsub>
 8009474:	4602      	mov	r2, r0
 8009476:	460b      	mov	r3, r1
 8009478:	4610      	mov	r0, r2
 800947a:	4619      	mov	r1, r3
 800947c:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8009480:	f7f7 f9e4 	bl	800084c <__aeabi_ddiv>
 8009484:	4602      	mov	r2, r0
 8009486:	460b      	mov	r3, r1
 8009488:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
			 tf		= ta + td;
 800948c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8009490:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8009494:	f7f6 fefa 	bl	800028c <__adddf3>
 8009498:	4602      	mov	r2, r0
 800949a:	460b      	mov	r3, r1
 800949c:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 80094a0:	e0e3      	b.n	800966a <scaraInitLSPB+0x6a2>
		 } else {
			 v_lim	= v_design;
 80094a2:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80094a6:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
			 ta		= (v_lim - v0)/a_design;
 80094aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80094ae:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80094b2:	f7f6 fee9 	bl	8000288 <__aeabi_dsub>
 80094b6:	4602      	mov	r2, r0
 80094b8:	460b      	mov	r3, r1
 80094ba:	4610      	mov	r0, r2
 80094bc:	4619      	mov	r1, r3
 80094be:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80094c2:	f7f7 f9c3 	bl	800084c <__aeabi_ddiv>
 80094c6:	4602      	mov	r2, r0
 80094c8:	460b      	mov	r3, r1
 80094ca:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
			 td		= (v_lim - v1)/a_design;
 80094ce:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80094d2:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80094d6:	f7f6 fed7 	bl	8000288 <__aeabi_dsub>
 80094da:	4602      	mov	r2, r0
 80094dc:	460b      	mov	r3, r1
 80094de:	4610      	mov	r0, r2
 80094e0:	4619      	mov	r1, r3
 80094e2:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80094e6:	f7f7 f9b1 	bl	800084c <__aeabi_ddiv>
 80094ea:	4602      	mov	r2, r0
 80094ec:	460b      	mov	r3, r1
 80094ee:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
			 tf		= fabs(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 80094f2:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80094f6:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80094fa:	f7f6 fec5 	bl	8000288 <__aeabi_dsub>
 80094fe:	4602      	mov	r2, r0
 8009500:	460b      	mov	r3, r1
 8009502:	4690      	mov	r8, r2
 8009504:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8009508:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800950c:	4640      	mov	r0, r8
 800950e:	4649      	mov	r1, r9
 8009510:	f7f7 f99c 	bl	800084c <__aeabi_ddiv>
 8009514:	4602      	mov	r2, r0
 8009516:	460b      	mov	r3, r1
 8009518:	4614      	mov	r4, r2
 800951a:	461d      	mov	r5, r3
 800951c:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8009520:	4602      	mov	r2, r0
 8009522:	460b      	mov	r3, r1
 8009524:	f7f6 feb2 	bl	800028c <__adddf3>
 8009528:	4602      	mov	r2, r0
 800952a:	460b      	mov	r3, r1
 800952c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009530:	f7f7 f98c 	bl	800084c <__aeabi_ddiv>
 8009534:	4602      	mov	r2, r0
 8009536:	460b      	mov	r3, r1
 8009538:	4690      	mov	r8, r2
 800953a:	4699      	mov	r9, r3
 800953c:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8009540:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009544:	f7f7 f982 	bl	800084c <__aeabi_ddiv>
 8009548:	4602      	mov	r2, r0
 800954a:	460b      	mov	r3, r1
 800954c:	f04f 0000 	mov.w	r0, #0
 8009550:	497b      	ldr	r1, [pc, #492]	; (8009740 <scaraInitLSPB+0x778>)
 8009552:	f7f6 fe99 	bl	8000288 <__aeabi_dsub>
 8009556:	4602      	mov	r2, r0
 8009558:	460b      	mov	r3, r1
 800955a:	4640      	mov	r0, r8
 800955c:	4649      	mov	r1, r9
 800955e:	f7f7 f84b 	bl	80005f8 <__aeabi_dmul>
 8009562:	4602      	mov	r2, r0
 8009564:	460b      	mov	r3, r1
 8009566:	4690      	mov	r8, r2
 8009568:	4699      	mov	r9, r3
 800956a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800956e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009572:	f7f7 f96b 	bl	800084c <__aeabi_ddiv>
 8009576:	4602      	mov	r2, r0
 8009578:	460b      	mov	r3, r1
 800957a:	f04f 0000 	mov.w	r0, #0
 800957e:	4970      	ldr	r1, [pc, #448]	; (8009740 <scaraInitLSPB+0x778>)
 8009580:	f7f6 fe82 	bl	8000288 <__aeabi_dsub>
 8009584:	4602      	mov	r2, r0
 8009586:	460b      	mov	r3, r1
 8009588:	4640      	mov	r0, r8
 800958a:	4649      	mov	r1, r9
 800958c:	f7f7 f834 	bl	80005f8 <__aeabi_dmul>
 8009590:	4602      	mov	r2, r0
 8009592:	460b      	mov	r3, r1
 8009594:	4620      	mov	r0, r4
 8009596:	4629      	mov	r1, r5
 8009598:	f7f6 fe78 	bl	800028c <__adddf3>
 800959c:	4602      	mov	r2, r0
 800959e:	460b      	mov	r3, r1
 80095a0:	4614      	mov	r4, r2
 80095a2:	461d      	mov	r5, r3
							+ v_lim/(2*a_design)*(1 - v1/v_lim)*(1 - v1/v_lim);
 80095a4:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80095a8:	4602      	mov	r2, r0
 80095aa:	460b      	mov	r3, r1
 80095ac:	f7f6 fe6e 	bl	800028c <__adddf3>
 80095b0:	4602      	mov	r2, r0
 80095b2:	460b      	mov	r3, r1
 80095b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80095b8:	f7f7 f948 	bl	800084c <__aeabi_ddiv>
 80095bc:	4602      	mov	r2, r0
 80095be:	460b      	mov	r3, r1
 80095c0:	4690      	mov	r8, r2
 80095c2:	4699      	mov	r9, r3
 80095c4:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80095c8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80095cc:	f7f7 f93e 	bl	800084c <__aeabi_ddiv>
 80095d0:	4602      	mov	r2, r0
 80095d2:	460b      	mov	r3, r1
 80095d4:	f04f 0000 	mov.w	r0, #0
 80095d8:	4959      	ldr	r1, [pc, #356]	; (8009740 <scaraInitLSPB+0x778>)
 80095da:	f7f6 fe55 	bl	8000288 <__aeabi_dsub>
 80095de:	4602      	mov	r2, r0
 80095e0:	460b      	mov	r3, r1
 80095e2:	4640      	mov	r0, r8
 80095e4:	4649      	mov	r1, r9
 80095e6:	f7f7 f807 	bl	80005f8 <__aeabi_dmul>
 80095ea:	4602      	mov	r2, r0
 80095ec:	460b      	mov	r3, r1
 80095ee:	4690      	mov	r8, r2
 80095f0:	4699      	mov	r9, r3
 80095f2:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80095f6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80095fa:	f7f7 f927 	bl	800084c <__aeabi_ddiv>
 80095fe:	4602      	mov	r2, r0
 8009600:	460b      	mov	r3, r1
 8009602:	f04f 0000 	mov.w	r0, #0
 8009606:	494e      	ldr	r1, [pc, #312]	; (8009740 <scaraInitLSPB+0x778>)
 8009608:	f7f6 fe3e 	bl	8000288 <__aeabi_dsub>
 800960c:	4602      	mov	r2, r0
 800960e:	460b      	mov	r3, r1
 8009610:	4640      	mov	r0, r8
 8009612:	4649      	mov	r1, r9
 8009614:	f7f6 fff0 	bl	80005f8 <__aeabi_dmul>
 8009618:	4602      	mov	r2, r0
 800961a:	460b      	mov	r3, r1
			 tf		= fabs(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 800961c:	4620      	mov	r0, r4
 800961e:	4629      	mov	r1, r5
 8009620:	f7f6 fe34 	bl	800028c <__adddf3>
 8009624:	4602      	mov	r2, r0
 8009626:	460b      	mov	r3, r1
 8009628:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 800962c:	e01d      	b.n	800966a <scaraInitLSPB+0x6a2>
		 }
	 } else {
		 v_lim	= 0;
 800962e:	f04f 0200 	mov.w	r2, #0
 8009632:	f04f 0300 	mov.w	r3, #0
 8009636:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
		 ta = tf/2;
 800963a:	f04f 0200 	mov.w	r2, #0
 800963e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009642:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8009646:	f7f7 f901 	bl	800084c <__aeabi_ddiv>
 800964a:	4602      	mov	r2, r0
 800964c:	460b      	mov	r3, r1
 800964e:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
		 td = tf/2;
 8009652:	f04f 0200 	mov.w	r2, #0
 8009656:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800965a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800965e:	f7f7 f8f5 	bl	800084c <__aeabi_ddiv>
 8009662:	4602      	mov	r2, r0
 8009664:	460b      	mov	r3, r1
 8009666:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	 }

	 no_sample = ceilf(tf / T_SAMPLING); // ceiling
 800966a:	a333      	add	r3, pc, #204	; (adr r3, 8009738 <scaraInitLSPB+0x770>)
 800966c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009670:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8009674:	f7f7 f8ea 	bl	800084c <__aeabi_ddiv>
 8009678:	4602      	mov	r2, r0
 800967a:	460b      	mov	r3, r1
 800967c:	4610      	mov	r0, r2
 800967e:	4619      	mov	r1, r3
 8009680:	f7f7 fab2 	bl	8000be8 <__aeabi_d2f>
 8009684:	4603      	mov	r3, r0
 8009686:	ee00 3a10 	vmov	s0, r3
 800968a:	f011 f8fd 	bl	801a888 <ceilf>
 800968e:	eef0 7a40 	vmov.f32	s15, s0
 8009692:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009696:	ee17 3a90 	vmov	r3, s15
 800969a:	637b      	str	r3, [r7, #52]	; 0x34
	 // Init lspb params
	 lspb->dir= dir;
 800969c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800969e:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 80096a2:	701a      	strb	r2, [r3, #0]
	 lspb->s0 = q0;
 80096a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80096a6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80096aa:	e9c1 2302 	strd	r2, r3, [r1, #8]
	 lspb->s1 = q1;
 80096ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80096b0:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80096b4:	e9c1 2304 	strd	r2, r3, [r1, #16]
	 lspb->Ta = ta;
 80096b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80096ba:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80096be:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	 lspb->Td = td;
 80096c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80096c4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80096c8:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	 lspb->Tf = tf;
 80096cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80096ce:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80096d2:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	 lspb->a_design = a_design;
 80096d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80096d8:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80096dc:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	 lspb->v_design = v_design;
 80096e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80096e2:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80096e6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	 lspb->v_lim = v_lim;
 80096ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80096ec:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80096f0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	 lspb->v0 = v0;
 80096f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80096f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80096fa:	e9c1 2306 	strd	r2, r3, [r1, #24]
	 lspb->v1 = v1;
 80096fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009700:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009704:	e9c1 2308 	strd	r2, r3, [r1, #32]
	 lspb->num_of_sampling = no_sample;
 8009708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800970a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800970c:	659a      	str	r2, [r3, #88]	; 0x58
	 lspb->total_s = lspb->s1 - lspb->s0;
 800970e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009710:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8009714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009716:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800971a:	f7f6 fdb5 	bl	8000288 <__aeabi_dsub>
 800971e:	4602      	mov	r2, r0
 8009720:	460b      	mov	r3, r1
 8009722:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009724:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

	 return SCARA_STATUS_OK;
 8009728:	2300      	movs	r3, #0
}
 800972a:	4618      	mov	r0, r3
 800972c:	37b0      	adds	r7, #176	; 0xb0
 800972e:	46bd      	mov	sp, r7
 8009730:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009734:	f3af 8000 	nop.w
 8009738:	40000000 	.word	0x40000000
 800973c:	3f847ae1 	.word	0x3f847ae1
 8009740:	3ff00000 	.word	0x3ff00000
 8009744:	00000000 	.word	0x00000000
 8009748:	405c2000 	.word	0x405c2000
 800974c:	14000000 	.word	0x14000000
 8009750:	4000f6f0 	.word	0x4000f6f0
 8009754:	6b259425 	.word	0x6b259425
 8009758:	40069b91 	.word	0x40069b91
 800975c:	d2f1a9fc 	.word	0xd2f1a9fc
 8009760:	3f50624d 	.word	0x3f50624d
 8009764:	9abcaf48 	.word	0x9abcaf48
 8009768:	3e7ad7f2 	.word	0x3e7ad7f2

0800976c <scaraInitScurve>:
SCARA_StatusTypeDef	scaraInitScurve		(Trajectory_Scurve_TypeDef *scurve,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double a_factor) {
 800976c:	b480      	push	{r7}
 800976e:	b089      	sub	sp, #36	; 0x24
 8009770:	af00      	add	r7, sp, #0
 8009772:	61f8      	str	r0, [r7, #28]
 8009774:	460b      	mov	r3, r1
 8009776:	ed87 0b04 	vstr	d0, [r7, #16]
 800977a:	ed87 1b02 	vstr	d1, [r7, #8]
 800977e:	ed87 2b00 	vstr	d2, [r7]
 8009782:	76fb      	strb	r3, [r7, #27]
 8009784:	4613      	mov	r3, r2
 8009786:	76bb      	strb	r3, [r7, #26]
//	 scurve->s_1 = s_1;
//	 scurve->s_2 = s_2;
//	 scurve->s_3 = s_3;
//	 scurve->s_4 = s_4;

	 return SCARA_STATUS_OK;
 8009788:	2300      	movs	r3, #0
}
 800978a:	4618      	mov	r0, r3
 800978c:	3724      	adds	r7, #36	; 0x24
 800978e:	46bd      	mov	sp, r7
 8009790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009794:	4770      	bx	lr
	...

08009798 <scaraFlowDuty>:
}

/* Compute new x, y , z, theta1, theta2 , d3, theta4 corresponding to time */
SCARA_StatusTypeDef	scaraFlowDuty		(double time,
										SCARA_PositionTypeDef *pos_Next ,
										SCARA_PositionTypeDef pos_Current) {
 8009798:	b082      	sub	sp, #8
 800979a:	b5b0      	push	{r4, r5, r7, lr}
 800979c:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 80097a0:	af2e      	add	r7, sp, #184	; 0xb8
 80097a2:	f107 0108 	add.w	r1, r7, #8
 80097a6:	ed81 0b00 	vstr	d0, [r1]
 80097aa:	1d39      	adds	r1, r7, #4
 80097ac:	6008      	str	r0, [r1, #0]
 80097ae:	f507 71b8 	add.w	r1, r7, #368	; 0x170
 80097b2:	e881 000c 	stmia.w	r1, {r2, r3}
	SCARA_StatusTypeDef status1, status2, status3, status4;
	SCARA_PositionTypeDef	positionCompute;
	// Update time
	positionCompute.t = time;
 80097b6:	f107 0118 	add.w	r1, r7, #24
 80097ba:	f107 0308 	add.w	r3, r7, #8
 80097be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	/*---- Task space ----*/
	if ( DUTY_SPACE_TASK == myDUTY.space_type) {
 80097c6:	4b92      	ldr	r3, [pc, #584]	; (8009a10 <scaraFlowDuty+0x278>)
 80097c8:	781b      	ldrb	r3, [r3, #0]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	f040 81a1 	bne.w	8009b12 <scaraFlowDuty+0x37a>
		double s, angle, x, y, z, v, v_angle;
		int8_t	dir_roll;
		//---Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.task.trajectory_3d.trajectory_type) {
 80097d0:	4b8f      	ldr	r3, [pc, #572]	; (8009a10 <scaraFlowDuty+0x278>)
 80097d2:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d12b      	bne.n	8009832 <scaraFlowDuty+0x9a>
//			s = myDUTY.task.trajectory_3d.lspb.s_current;
//			v = myDUTY.task.trajectory_3d.lspb.v_current;
//			angle = myDUTY.task.trajectory_roll.lspb.s_current;
//			v_angle = myDUTY.task.trajectory_roll.lspb.v_current;
//			dir_roll = myDUTY.task.trajectory_roll.lspb.dir;
			status1 = scaraFlowLSPB1(&(myDUTY.task.trajectory_3d.lspb), time);
 80097da:	f107 0308 	add.w	r3, r7, #8
 80097de:	ed93 0b00 	vldr	d0, [r3]
 80097e2:	488c      	ldr	r0, [pc, #560]	; (8009a14 <scaraFlowDuty+0x27c>)
 80097e4:	f7fe ffae 	bl	8008744 <scaraFlowLSPB1>
 80097e8:	4603      	mov	r3, r0
 80097ea:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			v = myDUTY.task.trajectory_3d.lspb.v_current;
 80097ee:	4b88      	ldr	r3, [pc, #544]	; (8009a10 <scaraFlowDuty+0x278>)
 80097f0:	e9d3 2362 	ldrd	r2, r3, [r3, #392]	; 0x188
 80097f4:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
			s = myDUTY.task.trajectory_3d.lspb.s_current;
 80097f8:	4b85      	ldr	r3, [pc, #532]	; (8009a10 <scaraFlowDuty+0x278>)
 80097fa:	e9d3 2364 	ldrd	r2, r3, [r3, #400]	; 0x190
 80097fe:	f107 0110 	add.w	r1, r7, #16
 8009802:	e9c1 2300 	strd	r2, r3, [r1]
			angle = myDUTY.task.trajectory_roll.linear.constant_v*time;
 8009806:	4b82      	ldr	r3, [pc, #520]	; (8009a10 <scaraFlowDuty+0x278>)
 8009808:	e9d3 23fc 	ldrd	r2, r3, [r3, #1008]	; 0x3f0
 800980c:	f107 0108 	add.w	r1, r7, #8
 8009810:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009814:	f7f6 fef0 	bl	80005f8 <__aeabi_dmul>
 8009818:	4602      	mov	r2, r0
 800981a:	460b      	mov	r3, r1
 800981c:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 8009820:	4b7b      	ldr	r3, [pc, #492]	; (8009a10 <scaraFlowDuty+0x278>)
 8009822:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8009826:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			status2 = SCARA_STATUS_OK;
 800982a:	2300      	movs	r3, #0
 800982c:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 8009830:	e099      	b.n	8009966 <scaraFlowDuty+0x1ce>
			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.task.trajectory_3d.trajectory_type) {
 8009832:	4b77      	ldr	r3, [pc, #476]	; (8009a10 <scaraFlowDuty+0x278>)
 8009834:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8009838:	2b01      	cmp	r3, #1
 800983a:	d126      	bne.n	800988a <scaraFlowDuty+0xf2>
//			s = myDUTY.task.trajectory_3d.scurve.s_current;
//			v = myDUTY.task.trajectory_3d.scurve.v_current;
//			angle = myDUTY.task.trajectory_roll.scurve.s_current;
//			v_angle = myDUTY.task.trajectory_roll.scurve.v_current;
//			dir_roll = myDUTY.task.trajectory_roll.scurve.dir;
			status1 = scaraFLowScurve1(&(myDUTY.task.trajectory_3d.scurve), time);
 800983c:	f107 0308 	add.w	r3, r7, #8
 8009840:	ed93 0b00 	vldr	d0, [r3]
 8009844:	4874      	ldr	r0, [pc, #464]	; (8009a18 <scaraFlowDuty+0x280>)
 8009846:	f7ff f9eb 	bl	8008c20 <scaraFLowScurve1>
 800984a:	4603      	mov	r3, r0
 800984c:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			//v = myDUTY.task.trajectory_3d.lspb.v_current;
			s = myDUTY.task.trajectory_3d.scurve.s_current;
 8009850:	4b6f      	ldr	r3, [pc, #444]	; (8009a10 <scaraFlowDuty+0x278>)
 8009852:	e9d3 2398 	ldrd	r2, r3, [r3, #608]	; 0x260
 8009856:	f107 0110 	add.w	r1, r7, #16
 800985a:	e9c1 2300 	strd	r2, r3, [r1]
			angle = myDUTY.task.trajectory_roll.linear.constant_v*time;
 800985e:	4b6c      	ldr	r3, [pc, #432]	; (8009a10 <scaraFlowDuty+0x278>)
 8009860:	e9d3 23fc 	ldrd	r2, r3, [r3, #1008]	; 0x3f0
 8009864:	f107 0108 	add.w	r1, r7, #8
 8009868:	e9d1 0100 	ldrd	r0, r1, [r1]
 800986c:	f7f6 fec4 	bl	80005f8 <__aeabi_dmul>
 8009870:	4602      	mov	r2, r0
 8009872:	460b      	mov	r3, r1
 8009874:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 8009878:	4b65      	ldr	r3, [pc, #404]	; (8009a10 <scaraFlowDuty+0x278>)
 800987a:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 800987e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			status2 = SCARA_STATUS_OK;
 8009882:	2300      	movs	r3, #0
 8009884:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 8009888:	e06d      	b.n	8009966 <scaraFlowDuty+0x1ce>
		}else if( DUTY_TRAJECTORY_LINEAR == myDUTY.task.trajectory_3d.trajectory_type){
 800988a:	4b61      	ldr	r3, [pc, #388]	; (8009a10 <scaraFlowDuty+0x278>)
 800988c:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8009890:	2b02      	cmp	r3, #2
 8009892:	d127      	bne.n	80098e4 <scaraFlowDuty+0x14c>
			s = time*myDUTY.task.trajectory_3d.linear.constant_v;
 8009894:	4b5e      	ldr	r3, [pc, #376]	; (8009a10 <scaraFlowDuty+0x278>)
 8009896:	e9d3 019c 	ldrd	r0, r1, [r3, #624]	; 0x270
 800989a:	f107 0308 	add.w	r3, r7, #8
 800989e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a2:	f7f6 fea9 	bl	80005f8 <__aeabi_dmul>
 80098a6:	4602      	mov	r2, r0
 80098a8:	460b      	mov	r3, r1
 80098aa:	f107 0110 	add.w	r1, r7, #16
 80098ae:	e9c1 2300 	strd	r2, r3, [r1]
			angle = myDUTY.task.trajectory_roll.linear.constant_v*time;
 80098b2:	4b57      	ldr	r3, [pc, #348]	; (8009a10 <scaraFlowDuty+0x278>)
 80098b4:	e9d3 23fc 	ldrd	r2, r3, [r3, #1008]	; 0x3f0
 80098b8:	f107 0108 	add.w	r1, r7, #8
 80098bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098c0:	f7f6 fe9a 	bl	80005f8 <__aeabi_dmul>
 80098c4:	4602      	mov	r2, r0
 80098c6:	460b      	mov	r3, r1
 80098c8:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 80098cc:	4b50      	ldr	r3, [pc, #320]	; (8009a10 <scaraFlowDuty+0x278>)
 80098ce:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 80098d2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			status1 = SCARA_STATUS_OK;
 80098d6:	2300      	movs	r3, #0
 80098d8:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = SCARA_STATUS_OK;
 80098dc:	2300      	movs	r3, #0
 80098de:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 80098e2:	e040      	b.n	8009966 <scaraFlowDuty+0x1ce>
		}else if(DUTY_TRAJECTORY_GCODE_LSPB == myDUTY.task.trajectory_3d.trajectory_type){
 80098e4:	4b4a      	ldr	r3, [pc, #296]	; (8009a10 <scaraFlowDuty+0x278>)
 80098e6:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80098ea:	2b03      	cmp	r3, #3
 80098ec:	d139      	bne.n	8009962 <scaraFlowDuty+0x1ca>
			scaraFlowGCODE(&s, time);
 80098ee:	f107 0308 	add.w	r3, r7, #8
 80098f2:	f107 0210 	add.w	r2, r7, #16
 80098f6:	ed93 0b00 	vldr	d0, [r3]
 80098fa:	4610      	mov	r0, r2
 80098fc:	f7ff f8b4 	bl	8008a68 <scaraFlowGCODE>
			s -= accumulate_s;
 8009900:	f107 0310 	add.w	r3, r7, #16
 8009904:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009908:	4b44      	ldr	r3, [pc, #272]	; (8009a1c <scaraFlowDuty+0x284>)
 800990a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800990e:	f7f6 fcbb 	bl	8000288 <__aeabi_dsub>
 8009912:	4602      	mov	r2, r0
 8009914:	460b      	mov	r3, r1
 8009916:	f107 0110 	add.w	r1, r7, #16
 800991a:	e9c1 2300 	strd	r2, r3, [r1]
			//LOG_REPORT1("s watcher:", s, time);
			angle = myDUTY.task.trajectory_roll.linear.constant_v*(time - last_T);
 800991e:	4b3c      	ldr	r3, [pc, #240]	; (8009a10 <scaraFlowDuty+0x278>)
 8009920:	e9d3 45fc 	ldrd	r4, r5, [r3, #1008]	; 0x3f0
 8009924:	4b3e      	ldr	r3, [pc, #248]	; (8009a20 <scaraFlowDuty+0x288>)
 8009926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800992a:	f107 0108 	add.w	r1, r7, #8
 800992e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009932:	f7f6 fca9 	bl	8000288 <__aeabi_dsub>
 8009936:	4602      	mov	r2, r0
 8009938:	460b      	mov	r3, r1
 800993a:	4620      	mov	r0, r4
 800993c:	4629      	mov	r1, r5
 800993e:	f7f6 fe5b 	bl	80005f8 <__aeabi_dmul>
 8009942:	4602      	mov	r2, r0
 8009944:	460b      	mov	r3, r1
 8009946:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 800994a:	4b31      	ldr	r3, [pc, #196]	; (8009a10 <scaraFlowDuty+0x278>)
 800994c:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8009950:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			status1 = SCARA_STATUS_OK;
 8009954:	2300      	movs	r3, #0
 8009956:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = SCARA_STATUS_OK;
 800995a:	2300      	movs	r3, #0
 800995c:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 8009960:	e001      	b.n	8009966 <scaraFlowDuty+0x1ce>

		}else{
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8009962:	2305      	movs	r3, #5
 8009964:	e2dd      	b.n	8009f22 <scaraFlowDuty+0x78a>
		}

		if ( SCARA_STATUS_OK != status1) {
 8009966:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 800996a:	2b00      	cmp	r3, #0
 800996c:	d002      	beq.n	8009974 <scaraFlowDuty+0x1dc>
			return status1;
 800996e:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8009972:	e2d6      	b.n	8009f22 <scaraFlowDuty+0x78a>
		}
		if ( SCARA_STATUS_OK != status2) {
 8009974:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8009978:	2b00      	cmp	r3, #0
 800997a:	d002      	beq.n	8009982 <scaraFlowDuty+0x1ea>
			return status2;
 800997c:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8009980:	e2cf      	b.n	8009f22 <scaraFlowDuty+0x78a>
		}

		//---Path flowing
			// Straight line
		if( DUTY_PATH_LINE == myDUTY.task.path.path_type) {
 8009982:	4b23      	ldr	r3, [pc, #140]	; (8009a10 <scaraFlowDuty+0x278>)
 8009984:	7a1b      	ldrb	r3, [r3, #8]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d11d      	bne.n	80099c6 <scaraFlowDuty+0x22e>
			status1 = scaraFlowLine(&(myDUTY.task.path.line), s);
 800998a:	f107 0310 	add.w	r3, r7, #16
 800998e:	ed93 7b00 	vldr	d7, [r3]
 8009992:	eeb0 0a47 	vmov.f32	s0, s14
 8009996:	eef0 0a67 	vmov.f32	s1, s15
 800999a:	4822      	ldr	r0, [pc, #136]	; (8009a24 <scaraFlowDuty+0x28c>)
 800999c:	f000 facc 	bl	8009f38 <scaraFlowLine>
 80099a0:	4603      	mov	r3, r0
 80099a2:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			x = myDUTY.task.path.line.x_current;
 80099a6:	4b1a      	ldr	r3, [pc, #104]	; (8009a10 <scaraFlowDuty+0x278>)
 80099a8:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80099ac:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			y = myDUTY.task.path.line.y_current;
 80099b0:	4b17      	ldr	r3, [pc, #92]	; (8009a10 <scaraFlowDuty+0x278>)
 80099b2:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80099b6:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			z = myDUTY.task.path.line.z_current;
 80099ba:	4b15      	ldr	r3, [pc, #84]	; (8009a10 <scaraFlowDuty+0x278>)
 80099bc:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80099c0:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
 80099c4:	e032      	b.n	8009a2c <scaraFlowDuty+0x294>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == myDUTY.task.path.path_type) {
 80099c6:	4b12      	ldr	r3, [pc, #72]	; (8009a10 <scaraFlowDuty+0x278>)
 80099c8:	7a1b      	ldrb	r3, [r3, #8]
 80099ca:	2b01      	cmp	r3, #1
 80099cc:	d11d      	bne.n	8009a0a <scaraFlowDuty+0x272>
			status1 = scaraFlowCircle(&(myDUTY.task.path.circle), s);
 80099ce:	f107 0310 	add.w	r3, r7, #16
 80099d2:	ed93 7b00 	vldr	d7, [r3]
 80099d6:	eeb0 0a47 	vmov.f32	s0, s14
 80099da:	eef0 0a67 	vmov.f32	s1, s15
 80099de:	4812      	ldr	r0, [pc, #72]	; (8009a28 <scaraFlowDuty+0x290>)
 80099e0:	f000 fb32 	bl	800a048 <scaraFlowCircle>
 80099e4:	4603      	mov	r3, r0
 80099e6:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			x = myDUTY.task.path.circle.x_current;
 80099ea:	4b09      	ldr	r3, [pc, #36]	; (8009a10 <scaraFlowDuty+0x278>)
 80099ec:	e9d3 233e 	ldrd	r2, r3, [r3, #248]	; 0xf8
 80099f0:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			y = myDUTY.task.path.circle.y_current;
 80099f4:	4b06      	ldr	r3, [pc, #24]	; (8009a10 <scaraFlowDuty+0x278>)
 80099f6:	e9d3 2340 	ldrd	r2, r3, [r3, #256]	; 0x100
 80099fa:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			z = myDUTY.task.path.circle.z_current;
 80099fe:	4b04      	ldr	r3, [pc, #16]	; (8009a10 <scaraFlowDuty+0x278>)
 8009a00:	e9d3 2342 	ldrd	r2, r3, [r3, #264]	; 0x108
 8009a04:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
 8009a08:	e010      	b.n	8009a2c <scaraFlowDuty+0x294>
		} else {
			return SCARA_STATUS_ERROR_TASK;
 8009a0a:	2303      	movs	r3, #3
 8009a0c:	e289      	b.n	8009f22 <scaraFlowDuty+0x78a>
 8009a0e:	bf00      	nop
 8009a10:	2000def8 	.word	0x2000def8
 8009a14:	2000e010 	.word	0x2000e010
 8009a18:	2000e090 	.word	0x2000e090
 8009a1c:	200065d0 	.word	0x200065d0
 8009a20:	2000dd18 	.word	0x2000dd18
 8009a24:	2000df08 	.word	0x2000df08
 8009a28:	2000df78 	.word	0x2000df78
		}

		positionCompute.x 		= x;
 8009a2c:	f107 0118 	add.w	r1, r7, #24
 8009a30:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8009a34:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
		positionCompute.y		= y;
 8009a38:	f107 0118 	add.w	r1, r7, #24
 8009a3c:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8009a40:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		positionCompute.z 		= z;
 8009a44:	f107 0118 	add.w	r1, r7, #24
 8009a48:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8009a4c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		positionCompute.roll 	= myDUTY.task.roll_start + angle*dir_roll;
 8009a50:	4bb4      	ldr	r3, [pc, #720]	; (8009d24 <scaraFlowDuty+0x58c>)
 8009a52:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8009a56:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009a5a:	f997 312f 	ldrsb.w	r3, [r7, #303]	; 0x12f
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f7f6 fd60 	bl	8000524 <__aeabi_i2d>
 8009a64:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8009a68:	f7f6 fdc6 	bl	80005f8 <__aeabi_dmul>
 8009a6c:	4602      	mov	r2, r0
 8009a6e:	460b      	mov	r3, r1
 8009a70:	4620      	mov	r0, r4
 8009a72:	4629      	mov	r1, r5
 8009a74:	f7f6 fc0a 	bl	800028c <__adddf3>
 8009a78:	4602      	mov	r2, r0
 8009a7a:	460b      	mov	r3, r1
 8009a7c:	f107 0118 	add.w	r1, r7, #24
 8009a80:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

		positionCompute.q		= s;
 8009a84:	f107 0310 	add.w	r3, r7, #16
 8009a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a8c:	f107 0118 	add.w	r1, r7, #24
 8009a90:	e9c1 2300 	strd	r2, r3, [r1]
		positionCompute.q_roll  = angle;
 8009a94:	f107 0118 	add.w	r1, r7, #24
 8009a98:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8009a9c:	e9c1 2302 	strd	r2, r3, [r1, #8]

		positionCompute.v_3d    = v;
 8009aa0:	f107 0118 	add.w	r1, r7, #24
 8009aa4:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8009aa8:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
		positionCompute.v_roll  = v_angle;
 8009aac:	f107 0118 	add.w	r1, r7, #24
 8009ab0:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8009ab4:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0

		positionCompute.total_time = myDUTY.time_total;
 8009ab8:	4b9a      	ldr	r3, [pc, #616]	; (8009d24 <scaraFlowDuty+0x58c>)
 8009aba:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8009abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac2:	f107 0118 	add.w	r1, r7, #24
 8009ac6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		positionCompute.t		= time;
 8009aca:	f107 0118 	add.w	r1, r7, #24
 8009ace:	f107 0308 	add.w	r3, r7, #8
 8009ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		if ( FALSE == kinematicInverse(&positionCompute, pos_Current)) {
 8009ada:	f107 0418 	add.w	r4, r7, #24
 8009ade:	4668      	mov	r0, sp
 8009ae0:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8009ae4:	22b8      	movs	r2, #184	; 0xb8
 8009ae6:	4619      	mov	r1, r3
 8009ae8:	f00c f902 	bl	8015cf0 <memcpy>
 8009aec:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8009af0:	cb0c      	ldmia	r3, {r2, r3}
 8009af2:	4620      	mov	r0, r4
 8009af4:	f7fb fadc 	bl	80050b0 <kinematicInverse>
 8009af8:	4603      	mov	r3, r0
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d101      	bne.n	8009b02 <scaraFlowDuty+0x36a>
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8009afe:	2307      	movs	r3, #7
 8009b00:	e20f      	b.n	8009f22 <scaraFlowDuty+0x78a>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 8009b02:	f107 0118 	add.w	r1, r7, #24
 8009b06:	1d3b      	adds	r3, r7, #4
 8009b08:	22c0      	movs	r2, #192	; 0xc0
 8009b0a:	6818      	ldr	r0, [r3, #0]
 8009b0c:	f00c f8f0 	bl	8015cf0 <memcpy>
 8009b10:	e206      	b.n	8009f20 <scaraFlowDuty+0x788>
		}

	/*---- Joint space -----*/
	} else if (DUTY_SPACE_JOINT == myDUTY.space_type) {
 8009b12:	4b84      	ldr	r3, [pc, #528]	; (8009d24 <scaraFlowDuty+0x58c>)
 8009b14:	781b      	ldrb	r3, [r3, #0]
 8009b16:	2b01      	cmp	r3, #1
 8009b18:	f040 8200 	bne.w	8009f1c <scaraFlowDuty+0x784>
		double s0, s1, s2, s3;
		double v0, v1, v2, v3;
		int8_t dir0, dir1, dir2, dir3;
		// Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.joint.trajectory[0].trajectory_type) {
 8009b1c:	4b81      	ldr	r3, [pc, #516]	; (8009d24 <scaraFlowDuty+0x58c>)
 8009b1e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d174      	bne.n	8009c10 <scaraFlowDuty+0x478>
			status1 = scaraFlowLSPB1(&(myDUTY.joint.trajectory[0].lspb), time);
 8009b26:	f107 0308 	add.w	r3, r7, #8
 8009b2a:	ed93 0b00 	vldr	d0, [r3]
 8009b2e:	487e      	ldr	r0, [pc, #504]	; (8009d28 <scaraFlowDuty+0x590>)
 8009b30:	f7fe fe08 	bl	8008744 <scaraFlowLSPB1>
 8009b34:	4603      	mov	r3, r0
 8009b36:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = scaraFlowLSPB1(&(myDUTY.joint.trajectory[1].lspb), time);
 8009b3a:	f107 0308 	add.w	r3, r7, #8
 8009b3e:	ed93 0b00 	vldr	d0, [r3]
 8009b42:	487a      	ldr	r0, [pc, #488]	; (8009d2c <scaraFlowDuty+0x594>)
 8009b44:	f7fe fdfe 	bl	8008744 <scaraFlowLSPB1>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
			status3 = scaraFlowLSPB1(&(myDUTY.joint.trajectory[2].lspb), time);
 8009b4e:	f107 0308 	add.w	r3, r7, #8
 8009b52:	ed93 0b00 	vldr	d0, [r3]
 8009b56:	4876      	ldr	r0, [pc, #472]	; (8009d30 <scaraFlowDuty+0x598>)
 8009b58:	f7fe fdf4 	bl	8008744 <scaraFlowLSPB1>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	f887 315d 	strb.w	r3, [r7, #349]	; 0x15d
			status4 = scaraFlowLSPB1(&(myDUTY.joint.trajectory[3].lspb), time);
 8009b62:	f107 0308 	add.w	r3, r7, #8
 8009b66:	ed93 0b00 	vldr	d0, [r3]
 8009b6a:	4872      	ldr	r0, [pc, #456]	; (8009d34 <scaraFlowDuty+0x59c>)
 8009b6c:	f7fe fdea 	bl	8008744 <scaraFlowLSPB1>
 8009b70:	4603      	mov	r3, r0
 8009b72:	f887 315c 	strb.w	r3, [r7, #348]	; 0x15c

			dir0 = myDUTY.joint.trajectory[0].lspb.dir;
 8009b76:	4b6b      	ldr	r3, [pc, #428]	; (8009d24 <scaraFlowDuty+0x58c>)
 8009b78:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 8009b7c:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
			dir1 = myDUTY.joint.trajectory[1].lspb.dir;
 8009b80:	4b68      	ldr	r3, [pc, #416]	; (8009d24 <scaraFlowDuty+0x58c>)
 8009b82:	f893 35a0 	ldrb.w	r3, [r3, #1440]	; 0x5a0
 8009b86:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
			dir2 = myDUTY.joint.trajectory[2].lspb.dir;
 8009b8a:	4b66      	ldr	r3, [pc, #408]	; (8009d24 <scaraFlowDuty+0x58c>)
 8009b8c:	f893 3720 	ldrb.w	r3, [r3, #1824]	; 0x720
 8009b90:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
			dir3 = myDUTY.joint.trajectory[3].lspb.dir;
 8009b94:	4b63      	ldr	r3, [pc, #396]	; (8009d24 <scaraFlowDuty+0x58c>)
 8009b96:	f893 38a0 	ldrb.w	r3, [r3, #2208]	; 0x8a0
 8009b9a:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4

			s0 = myDUTY.joint.trajectory[0].lspb.s_current;
 8009b9e:	4b61      	ldr	r3, [pc, #388]	; (8009d24 <scaraFlowDuty+0x58c>)
 8009ba0:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8009ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba8:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
			s1 = myDUTY.joint.trajectory[1].lspb.s_current;
 8009bac:	4b5d      	ldr	r3, [pc, #372]	; (8009d24 <scaraFlowDuty+0x58c>)
 8009bae:	f503 63c3 	add.w	r3, r3, #1560	; 0x618
 8009bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb6:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			s2 = myDUTY.joint.trajectory[2].lspb.s_current;
 8009bba:	4b5a      	ldr	r3, [pc, #360]	; (8009d24 <scaraFlowDuty+0x58c>)
 8009bbc:	f503 63f3 	add.w	r3, r3, #1944	; 0x798
 8009bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc4:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
			s3 = myDUTY.joint.trajectory[3].lspb.s_current;
 8009bc8:	4b56      	ldr	r3, [pc, #344]	; (8009d24 <scaraFlowDuty+0x58c>)
 8009bca:	f603 1318 	addw	r3, r3, #2328	; 0x918
 8009bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd2:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108

			v0 = myDUTY.joint.trajectory[0].lspb.v_current;
 8009bd6:	4b53      	ldr	r3, [pc, #332]	; (8009d24 <scaraFlowDuty+0x58c>)
 8009bd8:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8009bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be0:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
			v1 = myDUTY.joint.trajectory[1].lspb.v_current;
 8009be4:	4b4f      	ldr	r3, [pc, #316]	; (8009d24 <scaraFlowDuty+0x58c>)
 8009be6:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 8009bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bee:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
			v2 = myDUTY.joint.trajectory[2].lspb.v_current;
 8009bf2:	4b4c      	ldr	r3, [pc, #304]	; (8009d24 <scaraFlowDuty+0x58c>)
 8009bf4:	f503 63f2 	add.w	r3, r3, #1936	; 0x790
 8009bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bfc:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
			v3 = myDUTY.joint.trajectory[3].lspb.v_current;
 8009c00:	4b48      	ldr	r3, [pc, #288]	; (8009d24 <scaraFlowDuty+0x58c>)
 8009c02:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 8009c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c0a:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
 8009c0e:	e07b      	b.n	8009d08 <scaraFlowDuty+0x570>

			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.joint.trajectory[0].trajectory_type) {
 8009c10:	4b44      	ldr	r3, [pc, #272]	; (8009d24 <scaraFlowDuty+0x58c>)
 8009c12:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8009c16:	2b01      	cmp	r3, #1
 8009c18:	d174      	bne.n	8009d04 <scaraFlowDuty+0x56c>
			status1 = scaraFLowScurve(&(myDUTY.joint.trajectory[0].scurve), time);
 8009c1a:	f107 0308 	add.w	r3, r7, #8
 8009c1e:	ed93 0b00 	vldr	d0, [r3]
 8009c22:	4845      	ldr	r0, [pc, #276]	; (8009d38 <scaraFlowDuty+0x5a0>)
 8009c24:	f000 fa96 	bl	800a154 <scaraFLowScurve>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = scaraFLowScurve(&(myDUTY.joint.trajectory[1].scurve), time);
 8009c2e:	f107 0308 	add.w	r3, r7, #8
 8009c32:	ed93 0b00 	vldr	d0, [r3]
 8009c36:	4841      	ldr	r0, [pc, #260]	; (8009d3c <scaraFlowDuty+0x5a4>)
 8009c38:	f000 fa8c 	bl	800a154 <scaraFLowScurve>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
			status3 = scaraFLowScurve(&(myDUTY.joint.trajectory[2].scurve), time);
 8009c42:	f107 0308 	add.w	r3, r7, #8
 8009c46:	ed93 0b00 	vldr	d0, [r3]
 8009c4a:	483d      	ldr	r0, [pc, #244]	; (8009d40 <scaraFlowDuty+0x5a8>)
 8009c4c:	f000 fa82 	bl	800a154 <scaraFLowScurve>
 8009c50:	4603      	mov	r3, r0
 8009c52:	f887 315d 	strb.w	r3, [r7, #349]	; 0x15d
			status4 = scaraFLowScurve(&(myDUTY.joint.trajectory[3].scurve), time);
 8009c56:	f107 0308 	add.w	r3, r7, #8
 8009c5a:	ed93 0b00 	vldr	d0, [r3]
 8009c5e:	4839      	ldr	r0, [pc, #228]	; (8009d44 <scaraFlowDuty+0x5ac>)
 8009c60:	f000 fa78 	bl	800a154 <scaraFLowScurve>
 8009c64:	4603      	mov	r3, r0
 8009c66:	f887 315c 	strb.w	r3, [r7, #348]	; 0x15c
			dir0 = myDUTY.joint.trajectory[0].scurve.dir;
 8009c6a:	4b2e      	ldr	r3, [pc, #184]	; (8009d24 <scaraFlowDuty+0x58c>)
 8009c6c:	f893 34a0 	ldrb.w	r3, [r3, #1184]	; 0x4a0
 8009c70:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
			dir1 = myDUTY.joint.trajectory[1].scurve.dir;
 8009c74:	4b2b      	ldr	r3, [pc, #172]	; (8009d24 <scaraFlowDuty+0x58c>)
 8009c76:	f893 3620 	ldrb.w	r3, [r3, #1568]	; 0x620
 8009c7a:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
			dir2 = myDUTY.joint.trajectory[2].scurve.dir;
 8009c7e:	4b29      	ldr	r3, [pc, #164]	; (8009d24 <scaraFlowDuty+0x58c>)
 8009c80:	f893 37a0 	ldrb.w	r3, [r3, #1952]	; 0x7a0
 8009c84:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
			dir3 = myDUTY.joint.trajectory[3].scurve.dir;
 8009c88:	4b26      	ldr	r3, [pc, #152]	; (8009d24 <scaraFlowDuty+0x58c>)
 8009c8a:	f893 3920 	ldrb.w	r3, [r3, #2336]	; 0x920
 8009c8e:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
			s0 = myDUTY.joint.trajectory[0].scurve.s_current;
 8009c92:	4b24      	ldr	r3, [pc, #144]	; (8009d24 <scaraFlowDuty+0x58c>)
 8009c94:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8009c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c9c:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
			s1 = myDUTY.joint.trajectory[1].scurve.s_current;
 8009ca0:	4b20      	ldr	r3, [pc, #128]	; (8009d24 <scaraFlowDuty+0x58c>)
 8009ca2:	f503 63dd 	add.w	r3, r3, #1768	; 0x6e8
 8009ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009caa:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			s2 = myDUTY.joint.trajectory[2].scurve.s_current;
 8009cae:	4b1d      	ldr	r3, [pc, #116]	; (8009d24 <scaraFlowDuty+0x58c>)
 8009cb0:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8009cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb8:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
			s3 = myDUTY.joint.trajectory[3].scurve.s_current;
 8009cbc:	4b19      	ldr	r3, [pc, #100]	; (8009d24 <scaraFlowDuty+0x58c>)
 8009cbe:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 8009cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc6:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108

			v0 = myDUTY.joint.trajectory[0].scurve.v_current;
 8009cca:	4b16      	ldr	r3, [pc, #88]	; (8009d24 <scaraFlowDuty+0x58c>)
 8009ccc:	f503 63ac 	add.w	r3, r3, #1376	; 0x560
 8009cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd4:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
			v1 = myDUTY.joint.trajectory[1].scurve.v_current;
 8009cd8:	4b12      	ldr	r3, [pc, #72]	; (8009d24 <scaraFlowDuty+0x58c>)
 8009cda:	f503 63dc 	add.w	r3, r3, #1760	; 0x6e0
 8009cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ce2:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
			v2 = myDUTY.joint.trajectory[2].scurve.v_current;
 8009ce6:	4b0f      	ldr	r3, [pc, #60]	; (8009d24 <scaraFlowDuty+0x58c>)
 8009ce8:	f503 6306 	add.w	r3, r3, #2144	; 0x860
 8009cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf0:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
			v3 = myDUTY.joint.trajectory[3].scurve.v_current;
 8009cf4:	4b0b      	ldr	r3, [pc, #44]	; (8009d24 <scaraFlowDuty+0x58c>)
 8009cf6:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
 8009cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cfe:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
 8009d02:	e001      	b.n	8009d08 <scaraFlowDuty+0x570>

		} else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8009d04:	2305      	movs	r3, #5
 8009d06:	e10c      	b.n	8009f22 <scaraFlowDuty+0x78a>
		}
		// Check init status
		if ( SCARA_STATUS_OK != status1) {
 8009d08:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d002      	beq.n	8009d16 <scaraFlowDuty+0x57e>
			return status1;
 8009d10:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8009d14:	e105      	b.n	8009f22 <scaraFlowDuty+0x78a>
		}
		if ( SCARA_STATUS_OK != status2) {
 8009d16:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d014      	beq.n	8009d48 <scaraFlowDuty+0x5b0>
			return status2;
 8009d1e:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8009d22:	e0fe      	b.n	8009f22 <scaraFlowDuty+0x78a>
 8009d24:	2000def8 	.word	0x2000def8
 8009d28:	2000e318 	.word	0x2000e318
 8009d2c:	2000e498 	.word	0x2000e498
 8009d30:	2000e618 	.word	0x2000e618
 8009d34:	2000e798 	.word	0x2000e798
 8009d38:	2000e398 	.word	0x2000e398
 8009d3c:	2000e518 	.word	0x2000e518
 8009d40:	2000e698 	.word	0x2000e698
 8009d44:	2000e818 	.word	0x2000e818
		}
		if ( SCARA_STATUS_OK != status3) {
 8009d48:	f897 315d 	ldrb.w	r3, [r7, #349]	; 0x15d
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d002      	beq.n	8009d56 <scaraFlowDuty+0x5be>
			return status3;
 8009d50:	f897 315d 	ldrb.w	r3, [r7, #349]	; 0x15d
 8009d54:	e0e5      	b.n	8009f22 <scaraFlowDuty+0x78a>
		}
		if ( SCARA_STATUS_OK != status4) {
 8009d56:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d002      	beq.n	8009d64 <scaraFlowDuty+0x5cc>
			return status4;
 8009d5e:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 8009d62:	e0de      	b.n	8009f22 <scaraFlowDuty+0x78a>
		}

		positionCompute.Theta1 	= myDUTY.joint.theta1_start + s0*dir0;
 8009d64:	4b73      	ldr	r3, [pc, #460]	; (8009f34 <scaraFlowDuty+0x79c>)
 8009d66:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 8009d6a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009d6e:	f997 30e7 	ldrsb.w	r3, [r7, #231]	; 0xe7
 8009d72:	4618      	mov	r0, r3
 8009d74:	f7f6 fbd6 	bl	8000524 <__aeabi_i2d>
 8009d78:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8009d7c:	f7f6 fc3c 	bl	80005f8 <__aeabi_dmul>
 8009d80:	4602      	mov	r2, r0
 8009d82:	460b      	mov	r3, r1
 8009d84:	4620      	mov	r0, r4
 8009d86:	4629      	mov	r1, r5
 8009d88:	f7f6 fa80 	bl	800028c <__adddf3>
 8009d8c:	4602      	mov	r2, r0
 8009d8e:	460b      	mov	r3, r1
 8009d90:	f107 0118 	add.w	r1, r7, #24
 8009d94:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		positionCompute.Theta2 	= myDUTY.joint.theta2_start + s1*dir1;
 8009d98:	4b66      	ldr	r3, [pc, #408]	; (8009f34 <scaraFlowDuty+0x79c>)
 8009d9a:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8009d9e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009da2:	f997 30e6 	ldrsb.w	r3, [r7, #230]	; 0xe6
 8009da6:	4618      	mov	r0, r3
 8009da8:	f7f6 fbbc 	bl	8000524 <__aeabi_i2d>
 8009dac:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8009db0:	f7f6 fc22 	bl	80005f8 <__aeabi_dmul>
 8009db4:	4602      	mov	r2, r0
 8009db6:	460b      	mov	r3, r1
 8009db8:	4620      	mov	r0, r4
 8009dba:	4629      	mov	r1, r5
 8009dbc:	f7f6 fa66 	bl	800028c <__adddf3>
 8009dc0:	4602      	mov	r2, r0
 8009dc2:	460b      	mov	r3, r1
 8009dc4:	f107 0118 	add.w	r1, r7, #24
 8009dc8:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		positionCompute.D3 		= myDUTY.joint.d3_start 	+ s2*dir2;
 8009dcc:	4b59      	ldr	r3, [pc, #356]	; (8009f34 <scaraFlowDuty+0x79c>)
 8009dce:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 8009dd2:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009dd6:	f997 30e5 	ldrsb.w	r3, [r7, #229]	; 0xe5
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f7f6 fba2 	bl	8000524 <__aeabi_i2d>
 8009de0:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8009de4:	f7f6 fc08 	bl	80005f8 <__aeabi_dmul>
 8009de8:	4602      	mov	r2, r0
 8009dea:	460b      	mov	r3, r1
 8009dec:	4620      	mov	r0, r4
 8009dee:	4629      	mov	r1, r5
 8009df0:	f7f6 fa4c 	bl	800028c <__adddf3>
 8009df4:	4602      	mov	r2, r0
 8009df6:	460b      	mov	r3, r1
 8009df8:	f107 0118 	add.w	r1, r7, #24
 8009dfc:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
		positionCompute.Theta4 	= myDUTY.joint.theta4_start + s3*dir3;
 8009e00:	4b4c      	ldr	r3, [pc, #304]	; (8009f34 <scaraFlowDuty+0x79c>)
 8009e02:	f503 6323 	add.w	r3, r3, #2608	; 0xa30
 8009e06:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009e0a:	f997 30e4 	ldrsb.w	r3, [r7, #228]	; 0xe4
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f7f6 fb88 	bl	8000524 <__aeabi_i2d>
 8009e14:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8009e18:	f7f6 fbee 	bl	80005f8 <__aeabi_dmul>
 8009e1c:	4602      	mov	r2, r0
 8009e1e:	460b      	mov	r3, r1
 8009e20:	4620      	mov	r0, r4
 8009e22:	4629      	mov	r1, r5
 8009e24:	f7f6 fa32 	bl	800028c <__adddf3>
 8009e28:	4602      	mov	r2, r0
 8009e2a:	460b      	mov	r3, r1
 8009e2c:	f107 0118 	add.w	r1, r7, #24
 8009e30:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80

		positionCompute.v_theta1 	= v0;
 8009e34:	f107 0118 	add.w	r1, r7, #24
 8009e38:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8009e3c:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
		positionCompute.v_theta2 	= v1;
 8009e40:	f107 0118 	add.w	r1, r7, #24
 8009e44:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8009e48:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
		positionCompute.v_d3 		= v2;
 8009e4c:	f107 0118 	add.w	r1, r7, #24
 8009e50:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8009e54:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
		positionCompute.v_theta4 	= v3;
 8009e58:	f107 0118 	add.w	r1, r7, #24
 8009e5c:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8009e60:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0

		positionCompute.q_theta1 = s0;
 8009e64:	f107 0118 	add.w	r1, r7, #24
 8009e68:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8009e6c:	e9c1 2304 	strd	r2, r3, [r1, #16]
		positionCompute.q_theta2 = s1;
 8009e70:	f107 0118 	add.w	r1, r7, #24
 8009e74:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8009e78:	e9c1 2306 	strd	r2, r3, [r1, #24]
		positionCompute.q_d3	 = s2;
 8009e7c:	f107 0118 	add.w	r1, r7, #24
 8009e80:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8009e84:	e9c1 2308 	strd	r2, r3, [r1, #32]
		positionCompute.q_theta4 = s3;
 8009e88:	f107 0118 	add.w	r1, r7, #24
 8009e8c:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8009e90:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

		positionCompute.total_time = myDUTY.time_total;
 8009e94:	4b27      	ldr	r3, [pc, #156]	; (8009f34 <scaraFlowDuty+0x79c>)
 8009e96:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8009e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e9e:	f107 0118 	add.w	r1, r7, #24
 8009ea2:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		positionCompute.t		= time;
 8009ea6:	f107 0118 	add.w	r1, r7, #24
 8009eaa:	f107 0308 	add.w	r3, r7, #8
 8009eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		// Check workspace
		if( SCARA_STATUS_OK != scaraCheckWorkSpace4(positionCompute.Theta1,
 8009eb6:	f107 0318 	add.w	r3, r7, #24
 8009eba:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8009ebe:	f107 0318 	add.w	r3, r7, #24
 8009ec2:	ed93 6b1c 	vldr	d6, [r3, #112]	; 0x70
 8009ec6:	f107 0318 	add.w	r3, r7, #24
 8009eca:	ed93 5b1e 	vldr	d5, [r3, #120]	; 0x78
 8009ece:	f107 0318 	add.w	r3, r7, #24
 8009ed2:	ed93 4b20 	vldr	d4, [r3, #128]	; 0x80
 8009ed6:	eeb0 3a44 	vmov.f32	s6, s8
 8009eda:	eef0 3a64 	vmov.f32	s7, s9
 8009ede:	eeb0 2a45 	vmov.f32	s4, s10
 8009ee2:	eef0 2a65 	vmov.f32	s5, s11
 8009ee6:	eeb0 1a46 	vmov.f32	s2, s12
 8009eea:	eef0 1a66 	vmov.f32	s3, s13
 8009eee:	eeb0 0a47 	vmov.f32	s0, s14
 8009ef2:	eef0 0a67 	vmov.f32	s1, s15
 8009ef6:	f000 f93b 	bl	800a170 <scaraCheckWorkSpace4>
 8009efa:	4603      	mov	r3, r0
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d001      	beq.n	8009f04 <scaraFlowDuty+0x76c>
							 	 	 	  positionCompute.Theta2,
										  positionCompute.D3,
										  positionCompute.Theta4)) {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8009f00:	2307      	movs	r3, #7
 8009f02:	e00e      	b.n	8009f22 <scaraFlowDuty+0x78a>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 8009f04:	f107 0118 	add.w	r1, r7, #24
 8009f08:	1d3b      	adds	r3, r7, #4
 8009f0a:	22c0      	movs	r2, #192	; 0xc0
 8009f0c:	6818      	ldr	r0, [r3, #0]
 8009f0e:	f00b feef 	bl	8015cf0 <memcpy>
		}
		kinematicForward(pos_Next);
 8009f12:	1d3b      	adds	r3, r7, #4
 8009f14:	6818      	ldr	r0, [r3, #0]
 8009f16:	f7fa ffa7 	bl	8004e68 <kinematicForward>
 8009f1a:	e001      	b.n	8009f20 <scaraFlowDuty+0x788>

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 8009f1c:	2302      	movs	r3, #2
 8009f1e:	e000      	b.n	8009f22 <scaraFlowDuty+0x78a>
	}

	return SCARA_STATUS_OK;
 8009f20:	2300      	movs	r3, #0
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8009f2e:	b002      	add	sp, #8
 8009f30:	4770      	bx	lr
 8009f32:	bf00      	nop
 8009f34:	2000def8 	.word	0x2000def8

08009f38 <scaraFlowLine>:

/* Compute new x, y ,z corresponding to s */
SCARA_StatusTypeDef	scaraFlowLine		(Path_Line_TypeDef *line, double s) {
 8009f38:	b5b0      	push	{r4, r5, r7, lr}
 8009f3a:	b084      	sub	sp, #16
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	60f8      	str	r0, [r7, #12]
 8009f40:	ed87 0b00 	vstr	d0, [r7]
	// Avoid div with 0
	if ( line->total_s > 0.01) {
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8009f4a:	a33d      	add	r3, pc, #244	; (adr r3, 800a040 <scaraFlowLine+0x108>)
 8009f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f50:	f7f6 fde2 	bl	8000b18 <__aeabi_dcmpgt>
 8009f54:	4603      	mov	r3, r0
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d05a      	beq.n	800a010 <scaraFlowLine+0xd8>
		line->x_current	 = line->x0 + line->denta_x*s/line->total_s;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8009f66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f6a:	f7f6 fb45 	bl	80005f8 <__aeabi_dmul>
 8009f6e:	4602      	mov	r2, r0
 8009f70:	460b      	mov	r3, r1
 8009f72:	4610      	mov	r0, r2
 8009f74:	4619      	mov	r1, r3
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8009f7c:	f7f6 fc66 	bl	800084c <__aeabi_ddiv>
 8009f80:	4602      	mov	r2, r0
 8009f82:	460b      	mov	r3, r1
 8009f84:	4620      	mov	r0, r4
 8009f86:	4629      	mov	r1, r5
 8009f88:	f7f6 f980 	bl	800028c <__adddf3>
 8009f8c:	4602      	mov	r2, r0
 8009f8e:	460b      	mov	r3, r1
 8009f90:	68f9      	ldr	r1, [r7, #12]
 8009f92:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		line->y_current	 = line->y0 + line->denta_y*s/line->total_s;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8009fa2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fa6:	f7f6 fb27 	bl	80005f8 <__aeabi_dmul>
 8009faa:	4602      	mov	r2, r0
 8009fac:	460b      	mov	r3, r1
 8009fae:	4610      	mov	r0, r2
 8009fb0:	4619      	mov	r1, r3
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8009fb8:	f7f6 fc48 	bl	800084c <__aeabi_ddiv>
 8009fbc:	4602      	mov	r2, r0
 8009fbe:	460b      	mov	r3, r1
 8009fc0:	4620      	mov	r0, r4
 8009fc2:	4629      	mov	r1, r5
 8009fc4:	f7f6 f962 	bl	800028c <__adddf3>
 8009fc8:	4602      	mov	r2, r0
 8009fca:	460b      	mov	r3, r1
 8009fcc:	68f9      	ldr	r1, [r7, #12]
 8009fce:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
		line->z_current	 = line->z0 + line->denta_z*s/line->total_s;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8009fde:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fe2:	f7f6 fb09 	bl	80005f8 <__aeabi_dmul>
 8009fe6:	4602      	mov	r2, r0
 8009fe8:	460b      	mov	r3, r1
 8009fea:	4610      	mov	r0, r2
 8009fec:	4619      	mov	r1, r3
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8009ff4:	f7f6 fc2a 	bl	800084c <__aeabi_ddiv>
 8009ff8:	4602      	mov	r2, r0
 8009ffa:	460b      	mov	r3, r1
 8009ffc:	4620      	mov	r0, r4
 8009ffe:	4629      	mov	r1, r5
 800a000:	f7f6 f944 	bl	800028c <__adddf3>
 800a004:	4602      	mov	r2, r0
 800a006:	460b      	mov	r3, r1
 800a008:	68f9      	ldr	r1, [r7, #12]
 800a00a:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 800a00e:	e011      	b.n	800a034 <scaraFlowLine+0xfc>
	} else {
		line->x_current = line->x1;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800a016:	68f9      	ldr	r1, [r7, #12]
 800a018:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		line->y_current = line->y1;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800a022:	68f9      	ldr	r1, [r7, #12]
 800a024:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
		line->z_current = line->z1;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800a02e:	68f9      	ldr	r1, [r7, #12]
 800a030:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	}

	return SCARA_STATUS_OK;
 800a034:	2300      	movs	r3, #0
}
 800a036:	4618      	mov	r0, r3
 800a038:	3710      	adds	r7, #16
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bdb0      	pop	{r4, r5, r7, pc}
 800a03e:	bf00      	nop
 800a040:	47ae147b 	.word	0x47ae147b
 800a044:	3f847ae1 	.word	0x3f847ae1

0800a048 <scaraFlowCircle>:

/* Compute new x, y ,z corresponding to s */
SCARA_StatusTypeDef	scaraFlowCircle		(Path_Circle_TypeDef *circle, double s) {
 800a048:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a04c:	b086      	sub	sp, #24
 800a04e:	af00      	add	r7, sp, #0
 800a050:	60f8      	str	r0, [r7, #12]
 800a052:	ed87 0b00 	vstr	d0, [r7]
	double angle;
	angle = s/(circle->radius);
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800a05c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a060:	f7f6 fbf4 	bl	800084c <__aeabi_ddiv>
 800a064:	4602      	mov	r2, r0
 800a066:	460b      	mov	r3, r1
 800a068:	e9c7 2304 	strd	r2, r3, [r7, #16]
	circle->x_current = circle->xi + circle->radius*cos(circle->angle_start + circle->dir*angle);
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	f993 3000 	ldrsb.w	r3, [r3]
 800a084:	4618      	mov	r0, r3
 800a086:	f7f6 fa4d 	bl	8000524 <__aeabi_i2d>
 800a08a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a08e:	f7f6 fab3 	bl	80005f8 <__aeabi_dmul>
 800a092:	4602      	mov	r2, r0
 800a094:	460b      	mov	r3, r1
 800a096:	4650      	mov	r0, sl
 800a098:	4659      	mov	r1, fp
 800a09a:	f7f6 f8f7 	bl	800028c <__adddf3>
 800a09e:	4602      	mov	r2, r0
 800a0a0:	460b      	mov	r3, r1
 800a0a2:	ec43 2b17 	vmov	d7, r2, r3
 800a0a6:	eeb0 0a47 	vmov.f32	s0, s14
 800a0aa:	eef0 0a67 	vmov.f32	s1, s15
 800a0ae:	f010 faff 	bl	801a6b0 <cos>
 800a0b2:	ec53 2b10 	vmov	r2, r3, d0
 800a0b6:	4640      	mov	r0, r8
 800a0b8:	4649      	mov	r1, r9
 800a0ba:	f7f6 fa9d 	bl	80005f8 <__aeabi_dmul>
 800a0be:	4602      	mov	r2, r0
 800a0c0:	460b      	mov	r3, r1
 800a0c2:	4620      	mov	r0, r4
 800a0c4:	4629      	mov	r1, r5
 800a0c6:	f7f6 f8e1 	bl	800028c <__adddf3>
 800a0ca:	4602      	mov	r2, r0
 800a0cc:	460b      	mov	r3, r1
 800a0ce:	68f9      	ldr	r1, [r7, #12]
 800a0d0:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	circle->y_current = circle->yi + circle->radius*sin(circle->angle_start + circle->dir*angle);
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	f993 3000 	ldrsb.w	r3, [r3]
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f7f6 fa19 	bl	8000524 <__aeabi_i2d>
 800a0f2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a0f6:	f7f6 fa7f 	bl	80005f8 <__aeabi_dmul>
 800a0fa:	4602      	mov	r2, r0
 800a0fc:	460b      	mov	r3, r1
 800a0fe:	4650      	mov	r0, sl
 800a100:	4659      	mov	r1, fp
 800a102:	f7f6 f8c3 	bl	800028c <__adddf3>
 800a106:	4602      	mov	r2, r0
 800a108:	460b      	mov	r3, r1
 800a10a:	ec43 2b17 	vmov	d7, r2, r3
 800a10e:	eeb0 0a47 	vmov.f32	s0, s14
 800a112:	eef0 0a67 	vmov.f32	s1, s15
 800a116:	f010 fb63 	bl	801a7e0 <sin>
 800a11a:	ec53 2b10 	vmov	r2, r3, d0
 800a11e:	4640      	mov	r0, r8
 800a120:	4649      	mov	r1, r9
 800a122:	f7f6 fa69 	bl	80005f8 <__aeabi_dmul>
 800a126:	4602      	mov	r2, r0
 800a128:	460b      	mov	r3, r1
 800a12a:	4620      	mov	r0, r4
 800a12c:	4629      	mov	r1, r5
 800a12e:	f7f6 f8ad 	bl	800028c <__adddf3>
 800a132:	4602      	mov	r2, r0
 800a134:	460b      	mov	r3, r1
 800a136:	68f9      	ldr	r1, [r7, #12]
 800a138:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
	circle->z_current = circle->zi; // XY plane
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800a142:	68f9      	ldr	r1, [r7, #12]
 800a144:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88

	return SCARA_STATUS_OK;
 800a148:	2300      	movs	r3, #0
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3718      	adds	r7, #24
 800a14e:	46bd      	mov	sp, r7
 800a150:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a154 <scaraFLowScurve>:
	return SCARA_STATUS_OK;
}


/* Compute new s corresponding to time */
SCARA_StatusTypeDef	scaraFLowScurve		(Trajectory_Scurve_TypeDef *scurve, double time) {
 800a154:	b480      	push	{r7}
 800a156:	b085      	sub	sp, #20
 800a158:	af00      	add	r7, sp, #0
 800a15a:	60f8      	str	r0, [r7, #12]
 800a15c:	ed87 0b00 	vstr	d0, [r7]
//
//	 } else {
//		 return SCARA_STATUS_ERROR;
//	 }

	 return SCARA_STATUS_OK;
 800a160:	2300      	movs	r3, #0
}
 800a162:	4618      	mov	r0, r3
 800a164:	3714      	adds	r7, #20
 800a166:	46bd      	mov	sp, r7
 800a168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16c:	4770      	bx	lr
	...

0800a170 <scaraCheckWorkSpace4>:

/* Check limit 4 joint variable */
SCARA_StatusTypeDef	scaraCheckWorkSpace4 (double theta1, double theta2, double d3, double theta4) {
 800a170:	b580      	push	{r7, lr}
 800a172:	b088      	sub	sp, #32
 800a174:	af00      	add	r7, sp, #0
 800a176:	ed87 0b06 	vstr	d0, [r7, #24]
 800a17a:	ed87 1b04 	vstr	d1, [r7, #16]
 800a17e:	ed87 2b02 	vstr	d2, [r7, #8]
 800a182:	ed87 3b00 	vstr	d3, [r7]
	// check theta 1
	if ( theta1 < LIM_MIN_J0-0.1 || theta1 > LIM_MAX_J0+0.1) {
 800a186:	a335      	add	r3, pc, #212	; (adr r3, 800a25c <scaraCheckWorkSpace4+0xec>)
 800a188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a18c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a190:	f7f6 fca4 	bl	8000adc <__aeabi_dcmplt>
 800a194:	4603      	mov	r3, r0
 800a196:	2b00      	cmp	r3, #0
 800a198:	d109      	bne.n	800a1ae <scaraCheckWorkSpace4+0x3e>
 800a19a:	a332      	add	r3, pc, #200	; (adr r3, 800a264 <scaraCheckWorkSpace4+0xf4>)
 800a19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a1a4:	f7f6 fcb8 	bl	8000b18 <__aeabi_dcmpgt>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d001      	beq.n	800a1b2 <scaraCheckWorkSpace4+0x42>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a1ae:	2307      	movs	r3, #7
 800a1b0:	e043      	b.n	800a23a <scaraCheckWorkSpace4+0xca>
	}
	// check theta 2
	if ( theta2 < LIM_MIN_J1-0.1 || theta2 > LIM_MAX_J1+0.1) {
 800a1b2:	a32e      	add	r3, pc, #184	; (adr r3, 800a26c <scaraCheckWorkSpace4+0xfc>)
 800a1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a1bc:	f7f6 fc8e 	bl	8000adc <__aeabi_dcmplt>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d109      	bne.n	800a1da <scaraCheckWorkSpace4+0x6a>
 800a1c6:	a32b      	add	r3, pc, #172	; (adr r3, 800a274 <scaraCheckWorkSpace4+0x104>)
 800a1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1cc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a1d0:	f7f6 fca2 	bl	8000b18 <__aeabi_dcmpgt>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d001      	beq.n	800a1de <scaraCheckWorkSpace4+0x6e>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a1da:	2307      	movs	r3, #7
 800a1dc:	e02d      	b.n	800a23a <scaraCheckWorkSpace4+0xca>
	}
	// check d 3
	if ( d3 < LIM_MIN_J2 || d3 > LIM_MAX_J2) {
 800a1de:	f04f 0200 	mov.w	r2, #0
 800a1e2:	f04f 0300 	mov.w	r3, #0
 800a1e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a1ea:	f7f6 fc77 	bl	8000adc <__aeabi_dcmplt>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d109      	bne.n	800a208 <scaraCheckWorkSpace4+0x98>
 800a1f4:	f04f 0200 	mov.w	r2, #0
 800a1f8:	4b17      	ldr	r3, [pc, #92]	; (800a258 <scaraCheckWorkSpace4+0xe8>)
 800a1fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a1fe:	f7f6 fc8b 	bl	8000b18 <__aeabi_dcmpgt>
 800a202:	4603      	mov	r3, r0
 800a204:	2b00      	cmp	r3, #0
 800a206:	d001      	beq.n	800a20c <scaraCheckWorkSpace4+0x9c>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a208:	2307      	movs	r3, #7
 800a20a:	e016      	b.n	800a23a <scaraCheckWorkSpace4+0xca>
	}
	// check theta 4
	if ( theta4 < LIM_MIN_J3-0.1 || theta4 > LIM_MAX_J3+0.1) {
 800a20c:	a30e      	add	r3, pc, #56	; (adr r3, 800a248 <scaraCheckWorkSpace4+0xd8>)
 800a20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a212:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a216:	f7f6 fc61 	bl	8000adc <__aeabi_dcmplt>
 800a21a:	4603      	mov	r3, r0
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d109      	bne.n	800a234 <scaraCheckWorkSpace4+0xc4>
 800a220:	a30b      	add	r3, pc, #44	; (adr r3, 800a250 <scaraCheckWorkSpace4+0xe0>)
 800a222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a226:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a22a:	f7f6 fc75 	bl	8000b18 <__aeabi_dcmpgt>
 800a22e:	4603      	mov	r3, r0
 800a230:	2b00      	cmp	r3, #0
 800a232:	d001      	beq.n	800a238 <scaraCheckWorkSpace4+0xc8>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a234:	2307      	movs	r3, #7
 800a236:	e000      	b.n	800a23a <scaraCheckWorkSpace4+0xca>
	}
	return SCARA_STATUS_OK;
 800a238:	2300      	movs	r3, #0
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	3720      	adds	r7, #32
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}
 800a242:	bf00      	nop
 800a244:	f3af 8000 	nop.w
 800a248:	a7777778 	.word	0xa7777778
 800a24c:	c0088956 	.word	0xc0088956
 800a250:	a7777778 	.word	0xa7777778
 800a254:	40088956 	.word	0x40088956
 800a258:	40590000 	.word	0x40590000
 800a25c:	74444445 	.word	0x74444445
 800a260:	bff95623 	.word	0xbff95623
 800a264:	74444445 	.word	0x74444445
 800a268:	3ff95623 	.word	0x3ff95623
 800a26c:	54cccccd 	.word	0x54cccccd
 800a270:	c003a649 	.word	0xc003a649
 800a274:	54cccccd 	.word	0x54cccccd
 800a278:	4003a649 	.word	0x4003a649
 800a27c:	00000000 	.word	0x00000000

0800a280 <scaraTestDuty>:
	}
}


/* Check all of point in travel */
SCARA_StatusTypeDef	scaraTestDuty(void) {
 800a280:	b5b0      	push	{r4, r5, r7, lr}
 800a282:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 800a286:	af2e      	add	r7, sp, #184	; 0xb8
	int32_t sample_count;
	double run_time = 0;
 800a288:	f04f 0200 	mov.w	r2, #0
 800a28c:	f04f 0300 	mov.w	r3, #0
 800a290:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
	SCARA_PositionTypeDef test_Next, test_Current;
	SCARA_StatusTypeDef status;
	memcpy(&test_Current, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 800a294:	463b      	mov	r3, r7
 800a296:	4a36      	ldr	r2, [pc, #216]	; (800a370 <scaraTestDuty+0xf0>)
 800a298:	4618      	mov	r0, r3
 800a29a:	4611      	mov	r1, r2
 800a29c:	23c0      	movs	r3, #192	; 0xc0
 800a29e:	461a      	mov	r2, r3
 800a2a0:	f00b fd26 	bl	8015cf0 <memcpy>
	sample_count = ceil(myDUTY.time_total/T_SAMPLING);
 800a2a4:	4b33      	ldr	r3, [pc, #204]	; (800a374 <scaraTestDuty+0xf4>)
 800a2a6:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800a2aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a2ae:	a32e      	add	r3, pc, #184	; (adr r3, 800a368 <scaraTestDuty+0xe8>)
 800a2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b4:	f7f6 faca 	bl	800084c <__aeabi_ddiv>
 800a2b8:	4602      	mov	r2, r0
 800a2ba:	460b      	mov	r3, r1
 800a2bc:	ec43 2b17 	vmov	d7, r2, r3
 800a2c0:	eeb0 0a47 	vmov.f32	s0, s14
 800a2c4:	eef0 0a67 	vmov.f32	s1, s15
 800a2c8:	f010 f96e 	bl	801a5a8 <ceil>
 800a2cc:	ec53 2b10 	vmov	r2, r3, d0
 800a2d0:	4610      	mov	r0, r2
 800a2d2:	4619      	mov	r1, r3
 800a2d4:	f7f6 fc40 	bl	8000b58 <__aeabi_d2iz>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	for (int32_t i = 1; i < sample_count; i++) {
 800a2de:	2301      	movs	r3, #1
 800a2e0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800a2e4:	e032      	b.n	800a34c <scaraTestDuty+0xcc>
		run_time += T_SAMPLING;
 800a2e6:	a320      	add	r3, pc, #128	; (adr r3, 800a368 <scaraTestDuty+0xe8>)
 800a2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ec:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800a2f0:	f7f5 ffcc 	bl	800028c <__adddf3>
 800a2f4:	4602      	mov	r2, r0
 800a2f6:	460b      	mov	r3, r1
 800a2f8:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
		status = scaraFlowDuty(run_time, &test_Next, test_Current);
 800a2fc:	463c      	mov	r4, r7
 800a2fe:	f107 05c0 	add.w	r5, r7, #192	; 0xc0
 800a302:	4668      	mov	r0, sp
 800a304:	f104 0308 	add.w	r3, r4, #8
 800a308:	22b8      	movs	r2, #184	; 0xb8
 800a30a:	4619      	mov	r1, r3
 800a30c:	f00b fcf0 	bl	8015cf0 <memcpy>
 800a310:	e894 000c 	ldmia.w	r4, {r2, r3}
 800a314:	4628      	mov	r0, r5
 800a316:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 800a31a:	f7ff fa3d 	bl	8009798 <scaraFlowDuty>
 800a31e:	4603      	mov	r3, r0
 800a320:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
		if (status != SCARA_STATUS_OK) {
 800a324:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d002      	beq.n	800a332 <scaraTestDuty+0xb2>
			return status;
 800a32c:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800a330:	e013      	b.n	800a35a <scaraTestDuty+0xda>
		}
		memcpy(&test_Next, &test_Current, sizeof(SCARA_PositionTypeDef));
 800a332:	463a      	mov	r2, r7
 800a334:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800a338:	4611      	mov	r1, r2
 800a33a:	22c0      	movs	r2, #192	; 0xc0
 800a33c:	4618      	mov	r0, r3
 800a33e:	f00b fcd7 	bl	8015cf0 <memcpy>
	for (int32_t i = 1; i < sample_count; i++) {
 800a342:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800a346:	3301      	adds	r3, #1
 800a348:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800a34c:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800a350:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800a354:	429a      	cmp	r2, r3
 800a356:	dbc6      	blt.n	800a2e6 <scaraTestDuty+0x66>
	}
	return SCARA_STATUS_OK;
 800a358:	2300      	movs	r3, #0
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 800a360:	46bd      	mov	sp, r7
 800a362:	bdb0      	pop	{r4, r5, r7, pc}
 800a364:	f3af 8000 	nop.w
 800a368:	40000000 	.word	0x40000000
 800a36c:	3f847ae1 	.word	0x3f847ae1
 800a370:	2000eab8 	.word	0x2000eab8
 800a374:	2000def8 	.word	0x2000def8

0800a378 <scaraSetScanFlag>:

void				scaraSetScanFlag(void) {
 800a378:	b480      	push	{r7}
 800a37a:	af00      	add	r7, sp, #0
	mySCARA.isScanLitmit = TRUE;
 800a37c:	4b03      	ldr	r3, [pc, #12]	; (800a38c <scaraSetScanFlag+0x14>)
 800a37e:	2201      	movs	r2, #1
 800a380:	70da      	strb	r2, [r3, #3]
}
 800a382:	bf00      	nop
 800a384:	46bd      	mov	sp, r7
 800a386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38a:	4770      	bx	lr
 800a38c:	2000207c 	.word	0x2000207c

0800a390 <scaraSetOutput>:

void				scaraSetOutput		(uint8_t level) {
 800a390:	b580      	push	{r7, lr}
 800a392:	b082      	sub	sp, #8
 800a394:	af00      	add	r7, sp, #0
 800a396:	4603      	mov	r3, r0
 800a398:	71fb      	strb	r3, [r7, #7]
	mySCARA.outputSet	 = level;
 800a39a:	4a05      	ldr	r2, [pc, #20]	; (800a3b0 <scaraSetOutput+0x20>)
 800a39c:	79fb      	ldrb	r3, [r7, #7]
 800a39e:	7113      	strb	r3, [r2, #4]
	lowlayer_setOutput(level);
 800a3a0:	79fb      	ldrb	r3, [r7, #7]
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f7fc f960 	bl	8006668 <lowlayer_setOutput>
}
 800a3a8:	bf00      	nop
 800a3aa:	3708      	adds	r7, #8
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}
 800a3b0:	2000207c 	.word	0x2000207c

0800a3b4 <scaraSetDutyState>:

void				scaraSetDutyState(SCARA_DutyStateTypeDef state) {
 800a3b4:	b480      	push	{r7}
 800a3b6:	b083      	sub	sp, #12
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	71fb      	strb	r3, [r7, #7]
	mySCARA.duty_State = state;
 800a3be:	4a04      	ldr	r2, [pc, #16]	; (800a3d0 <scaraSetDutyState+0x1c>)
 800a3c0:	79fb      	ldrb	r3, [r7, #7]
 800a3c2:	7093      	strb	r3, [r2, #2]
}
 800a3c4:	bf00      	nop
 800a3c6:	370c      	adds	r7, #12
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ce:	4770      	bx	lr
 800a3d0:	2000207c 	.word	0x2000207c

0800a3d4 <scaraSetMode>:

void				scaraSetMode(SCARA_ModeTypeDef mode) {
 800a3d4:	b480      	push	{r7}
 800a3d6:	b083      	sub	sp, #12
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	4603      	mov	r3, r0
 800a3dc:	71fb      	strb	r3, [r7, #7]
	mySCARA.mode = mode;
 800a3de:	4a04      	ldr	r2, [pc, #16]	; (800a3f0 <scaraSetMode+0x1c>)
 800a3e0:	79fb      	ldrb	r3, [r7, #7]
 800a3e2:	7053      	strb	r3, [r2, #1]
}
 800a3e4:	bf00      	nop
 800a3e6:	370c      	adds	r7, #12
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ee:	4770      	bx	lr
 800a3f0:	2000207c 	.word	0x2000207c

0800a3f4 <scaraSetMethod>:

void				scaraSetMethod(SCARA_MethodTypeDef method) {
 800a3f4:	b480      	push	{r7}
 800a3f6:	b083      	sub	sp, #12
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	71fb      	strb	r3, [r7, #7]
	mySCARA.method = method;
 800a3fe:	4a04      	ldr	r2, [pc, #16]	; (800a410 <scaraSetMethod+0x1c>)
 800a400:	79fb      	ldrb	r3, [r7, #7]
 800a402:	7013      	strb	r3, [r2, #0]
}
 800a404:	bf00      	nop
 800a406:	370c      	adds	r7, #12
 800a408:	46bd      	mov	sp, r7
 800a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40e:	4770      	bx	lr
 800a410:	2000207c 	.word	0x2000207c

0800a414 <scaraGetPosition>:


void				scaraGetPosition	(SCARA_PositionTypeDef *pos) {
 800a414:	b580      	push	{r7, lr}
 800a416:	b082      	sub	sp, #8
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
	memcpy(pos, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 800a41c:	22c0      	movs	r2, #192	; 0xc0
 800a41e:	4904      	ldr	r1, [pc, #16]	; (800a430 <scaraGetPosition+0x1c>)
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f00b fc65 	bl	8015cf0 <memcpy>
}
 800a426:	bf00      	nop
 800a428:	3708      	adds	r7, #8
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}
 800a42e:	bf00      	nop
 800a430:	2000eab8 	.word	0x2000eab8

0800a434 <scaraUpdatePosition>:

void				scaraUpdatePosition (SCARA_PositionTypeDef *pos) {
 800a434:	b580      	push	{r7, lr}
 800a436:	b082      	sub	sp, #8
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
	memcpy(&positionNext, pos, sizeof(SCARA_PositionTypeDef));
 800a43c:	22c0      	movs	r2, #192	; 0xc0
 800a43e:	6879      	ldr	r1, [r7, #4]
 800a440:	4803      	ldr	r0, [pc, #12]	; (800a450 <scaraUpdatePosition+0x1c>)
 800a442:	f00b fc55 	bl	8015cf0 <memcpy>
}
 800a446:	bf00      	nop
 800a448:	3708      	adds	r7, #8
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}
 800a44e:	bf00      	nop
 800a450:	2000ec38 	.word	0x2000ec38

0800a454 <scaraGetMode>:


SCARA_ModeTypeDef	scaraGetMode(void) {
 800a454:	b480      	push	{r7}
 800a456:	af00      	add	r7, sp, #0
	return mySCARA.mode;
 800a458:	4b03      	ldr	r3, [pc, #12]	; (800a468 <scaraGetMode+0x14>)
 800a45a:	785b      	ldrb	r3, [r3, #1]
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	46bd      	mov	sp, r7
 800a460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a464:	4770      	bx	lr
 800a466:	bf00      	nop
 800a468:	2000207c 	.word	0x2000207c

0800a46c <scaraGetMethod>:

SCARA_MethodTypeDef	scaraGetMethod(void) {
 800a46c:	b480      	push	{r7}
 800a46e:	af00      	add	r7, sp, #0
	return mySCARA.method;
 800a470:	4b03      	ldr	r3, [pc, #12]	; (800a480 <scaraGetMethod+0x14>)
 800a472:	781b      	ldrb	r3, [r3, #0]
}
 800a474:	4618      	mov	r0, r3
 800a476:	46bd      	mov	sp, r7
 800a478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47c:	4770      	bx	lr
 800a47e:	bf00      	nop
 800a480:	2000207c 	.word	0x2000207c

0800a484 <scaraGetDutyState>:

SCARA_DutyStateTypeDef	scaraGetDutyState(void) {
 800a484:	b480      	push	{r7}
 800a486:	af00      	add	r7, sp, #0
	return mySCARA.duty_State;
 800a488:	4b03      	ldr	r3, [pc, #12]	; (800a498 <scaraGetDutyState+0x14>)
 800a48a:	789b      	ldrb	r3, [r3, #2]
}
 800a48c:	4618      	mov	r0, r3
 800a48e:	46bd      	mov	sp, r7
 800a490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a494:	4770      	bx	lr
 800a496:	bf00      	nop
 800a498:	2000207c 	.word	0x2000207c

0800a49c <scaraIsScanLimit>:

uint8_t					scaraIsScanLimit(void) {
 800a49c:	b480      	push	{r7}
 800a49e:	af00      	add	r7, sp, #0
	return mySCARA.isScanLitmit;
 800a4a0:	4b03      	ldr	r3, [pc, #12]	; (800a4b0 <scaraIsScanLimit+0x14>)
 800a4a2:	78db      	ldrb	r3, [r3, #3]
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ac:	4770      	bx	lr
 800a4ae:	bf00      	nop
 800a4b0:	2000207c 	.word	0x2000207c

0800a4b4 <scaraIsFinish>:

uint8_t					scaraIsFinish		(double run_time) {
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b082      	sub	sp, #8
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	ed87 0b00 	vstr	d0, [r7]
	if(myDUTY.time_total  < run_time) {
 800a4be:	4b09      	ldr	r3, [pc, #36]	; (800a4e4 <scaraIsFinish+0x30>)
 800a4c0:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800a4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a4cc:	f7f6 fb24 	bl	8000b18 <__aeabi_dcmpgt>
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d001      	beq.n	800a4da <scaraIsFinish+0x26>
		return TRUE;
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	e000      	b.n	800a4dc <scaraIsFinish+0x28>
	} else {
		return FALSE;
 800a4da:	2300      	movs	r3, #0
	}
}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	3708      	adds	r7, #8
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd80      	pop	{r7, pc}
 800a4e4:	2000def8 	.word	0x2000def8

0800a4e8 <scaraPosition_packaging>:


int32_t scaraPosition_packaging(uint8_t *data_packet, SCARA_PositionTypeDef position)
{
 800a4e8:	b082      	sub	sp, #8
 800a4ea:	b580      	push	{r7, lr}
 800a4ec:	b084      	sub	sp, #16
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	6078      	str	r0, [r7, #4]
 800a4f2:	f107 0118 	add.w	r1, r7, #24
 800a4f6:	e881 000c 	stmia.w	r1, {r2, r3}
	int32_t cur_ptr = -4;
 800a4fa:	f06f 0303 	mvn.w	r3, #3
 800a4fe:	60fb      	str	r3, [r7, #12]
	Append_Coordinate_Value((int32_t)(position.x*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a500:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800a504:	a35c      	add	r3, pc, #368	; (adr r3, 800a678 <scaraPosition_packaging+0x190>)
 800a506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a50a:	f7f6 f875 	bl	80005f8 <__aeabi_dmul>
 800a50e:	4602      	mov	r2, r0
 800a510:	460b      	mov	r3, r1
 800a512:	4610      	mov	r0, r2
 800a514:	4619      	mov	r1, r3
 800a516:	f7f6 fb1f 	bl	8000b58 <__aeabi_d2iz>
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	3304      	adds	r3, #4
 800a51e:	60fb      	str	r3, [r7, #12]
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	687a      	ldr	r2, [r7, #4]
 800a524:	4413      	add	r3, r2
 800a526:	4619      	mov	r1, r3
 800a528:	f000 f8aa 	bl	800a680 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.y*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a52c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a530:	a351      	add	r3, pc, #324	; (adr r3, 800a678 <scaraPosition_packaging+0x190>)
 800a532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a536:	f7f6 f85f 	bl	80005f8 <__aeabi_dmul>
 800a53a:	4602      	mov	r2, r0
 800a53c:	460b      	mov	r3, r1
 800a53e:	4610      	mov	r0, r2
 800a540:	4619      	mov	r1, r3
 800a542:	f7f6 fb09 	bl	8000b58 <__aeabi_d2iz>
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	3304      	adds	r3, #4
 800a54a:	60fb      	str	r3, [r7, #12]
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	687a      	ldr	r2, [r7, #4]
 800a550:	4413      	add	r3, r2
 800a552:	4619      	mov	r1, r3
 800a554:	f000 f894 	bl	800a680 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.z*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a558:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800a55c:	a346      	add	r3, pc, #280	; (adr r3, 800a678 <scaraPosition_packaging+0x190>)
 800a55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a562:	f7f6 f849 	bl	80005f8 <__aeabi_dmul>
 800a566:	4602      	mov	r2, r0
 800a568:	460b      	mov	r3, r1
 800a56a:	4610      	mov	r0, r2
 800a56c:	4619      	mov	r1, r3
 800a56e:	f7f6 faf3 	bl	8000b58 <__aeabi_d2iz>
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	3304      	adds	r3, #4
 800a576:	60fb      	str	r3, [r7, #12]
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	687a      	ldr	r2, [r7, #4]
 800a57c:	4413      	add	r3, r2
 800a57e:	4619      	mov	r1, r3
 800a580:	f000 f87e 	bl	800a680 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.roll*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a584:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800a588:	a33b      	add	r3, pc, #236	; (adr r3, 800a678 <scaraPosition_packaging+0x190>)
 800a58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a58e:	f7f6 f833 	bl	80005f8 <__aeabi_dmul>
 800a592:	4602      	mov	r2, r0
 800a594:	460b      	mov	r3, r1
 800a596:	4610      	mov	r0, r2
 800a598:	4619      	mov	r1, r3
 800a59a:	f7f6 fadd 	bl	8000b58 <__aeabi_d2iz>
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	3304      	adds	r3, #4
 800a5a2:	60fb      	str	r3, [r7, #12]
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	687a      	ldr	r2, [r7, #4]
 800a5a8:	4413      	add	r3, r2
 800a5aa:	4619      	mov	r1, r3
 800a5ac:	f000 f868 	bl	800a680 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta1*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a5b0:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a5b4:	a330      	add	r3, pc, #192	; (adr r3, 800a678 <scaraPosition_packaging+0x190>)
 800a5b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ba:	f7f6 f81d 	bl	80005f8 <__aeabi_dmul>
 800a5be:	4602      	mov	r2, r0
 800a5c0:	460b      	mov	r3, r1
 800a5c2:	4610      	mov	r0, r2
 800a5c4:	4619      	mov	r1, r3
 800a5c6:	f7f6 fac7 	bl	8000b58 <__aeabi_d2iz>
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	3304      	adds	r3, #4
 800a5ce:	60fb      	str	r3, [r7, #12]
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	687a      	ldr	r2, [r7, #4]
 800a5d4:	4413      	add	r3, r2
 800a5d6:	4619      	mov	r1, r3
 800a5d8:	f000 f852 	bl	800a680 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta2*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a5dc:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800a5e0:	a325      	add	r3, pc, #148	; (adr r3, 800a678 <scaraPosition_packaging+0x190>)
 800a5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e6:	f7f6 f807 	bl	80005f8 <__aeabi_dmul>
 800a5ea:	4602      	mov	r2, r0
 800a5ec:	460b      	mov	r3, r1
 800a5ee:	4610      	mov	r0, r2
 800a5f0:	4619      	mov	r1, r3
 800a5f2:	f7f6 fab1 	bl	8000b58 <__aeabi_d2iz>
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	3304      	adds	r3, #4
 800a5fa:	60fb      	str	r3, [r7, #12]
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	687a      	ldr	r2, [r7, #4]
 800a600:	4413      	add	r3, r2
 800a602:	4619      	mov	r1, r3
 800a604:	f000 f83c 	bl	800a680 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.D3*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a608:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800a60c:	a31a      	add	r3, pc, #104	; (adr r3, 800a678 <scaraPosition_packaging+0x190>)
 800a60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a612:	f7f5 fff1 	bl	80005f8 <__aeabi_dmul>
 800a616:	4602      	mov	r2, r0
 800a618:	460b      	mov	r3, r1
 800a61a:	4610      	mov	r0, r2
 800a61c:	4619      	mov	r1, r3
 800a61e:	f7f6 fa9b 	bl	8000b58 <__aeabi_d2iz>
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	3304      	adds	r3, #4
 800a626:	60fb      	str	r3, [r7, #12]
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	687a      	ldr	r2, [r7, #4]
 800a62c:	4413      	add	r3, r2
 800a62e:	4619      	mov	r1, r3
 800a630:	f000 f826 	bl	800a680 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta4*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a634:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a638:	a30f      	add	r3, pc, #60	; (adr r3, 800a678 <scaraPosition_packaging+0x190>)
 800a63a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a63e:	f7f5 ffdb 	bl	80005f8 <__aeabi_dmul>
 800a642:	4602      	mov	r2, r0
 800a644:	460b      	mov	r3, r1
 800a646:	4610      	mov	r0, r2
 800a648:	4619      	mov	r1, r3
 800a64a:	f7f6 fa85 	bl	8000b58 <__aeabi_d2iz>
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	3304      	adds	r3, #4
 800a652:	60fb      	str	r3, [r7, #12]
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	687a      	ldr	r2, [r7, #4]
 800a658:	4413      	add	r3, r2
 800a65a:	4619      	mov	r1, r3
 800a65c:	f000 f810 	bl	800a680 <Append_Coordinate_Value>
	return cur_ptr + 4;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	3304      	adds	r3, #4
}
 800a664:	4618      	mov	r0, r3
 800a666:	3710      	adds	r7, #16
 800a668:	46bd      	mov	sp, r7
 800a66a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a66e:	b002      	add	sp, #8
 800a670:	4770      	bx	lr
 800a672:	bf00      	nop
 800a674:	f3af 8000 	nop.w
 800a678:	00000000 	.word	0x00000000
 800a67c:	412e8480 	.word	0x412e8480

0800a680 <Append_Coordinate_Value>:

void Append_Coordinate_Value(int32_t append_value, uint8_t* append_position)
{
 800a680:	b480      	push	{r7}
 800a682:	b083      	sub	sp, #12
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
 800a688:	6039      	str	r1, [r7, #0]
	append_position[0] = (uint8_t)(append_value & 0xff);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	b2da      	uxtb	r2, r3
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	701a      	strb	r2, [r3, #0]
	append_position[1] = (uint8_t)(append_value >> 8 & 0xff);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	121a      	asrs	r2, r3, #8
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	3301      	adds	r3, #1
 800a69a:	b2d2      	uxtb	r2, r2
 800a69c:	701a      	strb	r2, [r3, #0]
	append_position[2] = (uint8_t)(append_value >> 16 & 0xff);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	141a      	asrs	r2, r3, #16
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	3302      	adds	r3, #2
 800a6a6:	b2d2      	uxtb	r2, r2
 800a6a8:	701a      	strb	r2, [r3, #0]
	append_position[3] = (uint8_t)(append_value >> 24 & 0xff);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	161a      	asrs	r2, r3, #24
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	3303      	adds	r3, #3
 800a6b2:	b2d2      	uxtb	r2, r2
 800a6b4:	701a      	strb	r2, [r3, #0]
}
 800a6b6:	bf00      	nop
 800a6b8:	370c      	adds	r7, #12
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c0:	4770      	bx	lr
 800a6c2:	0000      	movs	r0, r0
 800a6c4:	0000      	movs	r0, r0
	...

0800a6c8 <scaraKeyInit1>:
SCARA_StatusTypeDef  scaraKeyInit1(SCARA_KeyTypeDef key, int32_t speed)
{
 800a6c8:	b590      	push	{r4, r7, lr}
 800a6ca:	f5ad 7d63 	sub.w	sp, sp, #908	; 0x38c
 800a6ce:	af6c      	add	r7, sp, #432	; 0x1b0
 800a6d0:	4602      	mov	r2, r0
 800a6d2:	463b      	mov	r3, r7
 800a6d4:	6019      	str	r1, [r3, #0]
 800a6d6:	1dfb      	adds	r3, r7, #7
 800a6d8:	701a      	strb	r2, [r3, #0]
	DUTY_Command_TypeDef cmd;
	SCARA_StatusTypeDef status;
	cmd.coordinate_type = DUTY_COORDINATES_REL;
 800a6da:	f107 0308 	add.w	r3, r7, #8
 800a6de:	2201      	movs	r2, #1
 800a6e0:	731a      	strb	r2, [r3, #12]
	cmd.trajec_type = DUTY_TRAJECTORY_LSPB;
 800a6e2:	f107 0308 	add.w	r3, r7, #8
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	741a      	strb	r2, [r3, #16]
	cmd.modeInit_type = DUTY_MODE_INIT_QVT;
 800a6ea:	f107 0308 	add.w	r3, r7, #8
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	745a      	strb	r2, [r3, #17]
	double v_current = 0;
 800a6f2:	f04f 0200 	mov.w	r2, #0
 800a6f6:	f04f 0300 	mov.w	r3, #0
 800a6fa:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
	Trajectory_LSPB_TypeDef *lspb;
	if(speed < SHIFT_SPEED_MIN || speed > SHIFT_SPEED_MAX){
 800a6fe:	463b      	mov	r3, r7
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	2b00      	cmp	r3, #0
 800a704:	dd03      	ble.n	800a70e <scaraKeyInit1+0x46>
 800a706:	463b      	mov	r3, r7
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	2b0e      	cmp	r3, #14
 800a70c:	dd01      	ble.n	800a712 <scaraKeyInit1+0x4a>
		return SCARA_STATUS_ERROR_PARA;
 800a70e:	2306      	movs	r3, #6
 800a710:	e2c0      	b.n	800ac94 <scaraKeyInit1+0x5cc>
	}
	switch(key){
 800a712:	1dfb      	adds	r3, r7, #7
 800a714:	781b      	ldrb	r3, [r3, #0]
 800a716:	2b07      	cmp	r3, #7
 800a718:	f200 8298 	bhi.w	800ac4c <scaraKeyInit1+0x584>
 800a71c:	a201      	add	r2, pc, #4	; (adr r2, 800a724 <scaraKeyInit1+0x5c>)
 800a71e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a722:	bf00      	nop
 800a724:	0800a745 	.word	0x0800a745
 800a728:	0800a7e7 	.word	0x0800a7e7
 800a72c:	0800a88d 	.word	0x0800a88d
 800a730:	0800a92b 	.word	0x0800a92b
 800a734:	0800a9cd 	.word	0x0800a9cd
 800a738:	0800aa6b 	.word	0x0800aa6b
 800a73c:	0800ab0d 	.word	0x0800ab0d
 800a740:	0800abab 	.word	0x0800abab
		case SCARA_KEY_X_INC:{
			cmd.v_factor = 0;
 800a744:	f107 0108 	add.w	r1, r7, #8
 800a748:	f04f 0200 	mov.w	r2, #0
 800a74c:	f04f 0300 	mov.w	r3, #0
 800a750:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800a754:	f107 0308 	add.w	r3, r7, #8
 800a758:	2200      	movs	r2, #0
 800a75a:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800a75c:	f107 0308 	add.w	r3, r7, #8
 800a760:	2200      	movs	r2, #0
 800a762:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= speed*SHIFT_KEY_S;
 800a764:	463b      	mov	r3, r7
 800a766:	681a      	ldr	r2, [r3, #0]
 800a768:	4613      	mov	r3, r2
 800a76a:	009b      	lsls	r3, r3, #2
 800a76c:	4413      	add	r3, r2
 800a76e:	4618      	mov	r0, r3
 800a770:	f7f5 fed8 	bl	8000524 <__aeabi_i2d>
 800a774:	4602      	mov	r2, r0
 800a776:	460b      	mov	r3, r1
 800a778:	f107 0108 	add.w	r1, r7, #8
 800a77c:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800a780:	f107 0108 	add.w	r1, r7, #8
 800a784:	f04f 0200 	mov.w	r2, #0
 800a788:	f04f 0300 	mov.w	r3, #0
 800a78c:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800a790:	f107 0108 	add.w	r1, r7, #8
 800a794:	f04f 0200 	mov.w	r2, #0
 800a798:	f04f 0300 	mov.w	r3, #0
 800a79c:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800a7a0:	f107 0108 	add.w	r1, r7, #8
 800a7a4:	f04f 0200 	mov.w	r2, #0
 800a7a8:	f04f 0300 	mov.w	r3, #0
 800a7ac:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800a7b0:	463b      	mov	r3, r7
 800a7b2:	6818      	ldr	r0, [r3, #0]
 800a7b4:	f7f5 feb6 	bl	8000524 <__aeabi_i2d>
 800a7b8:	f20f 43e4 	addw	r3, pc, #1252	; 0x4e4
 800a7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c0:	f7f5 ff1a 	bl	80005f8 <__aeabi_dmul>
 800a7c4:	4602      	mov	r2, r0
 800a7c6:	460b      	mov	r3, r1
 800a7c8:	4610      	mov	r0, r2
 800a7ca:	4619      	mov	r1, r3
 800a7cc:	f20f 43d8 	addw	r3, pc, #1240	; 0x4d8
 800a7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d4:	f7f5 fd5a 	bl	800028c <__adddf3>
 800a7d8:	4602      	mov	r2, r0
 800a7da:	460b      	mov	r3, r1
 800a7dc:	f107 0108 	add.w	r1, r7, #8
 800a7e0:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800a7e4:	e232      	b.n	800ac4c <scaraKeyInit1+0x584>
		case SCARA_KEY_X_DEC:{
			cmd.v_factor = 0;
 800a7e6:	f107 0108 	add.w	r1, r7, #8
 800a7ea:	f04f 0200 	mov.w	r2, #0
 800a7ee:	f04f 0300 	mov.w	r3, #0
 800a7f2:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800a7f6:	f107 0308 	add.w	r3, r7, #8
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800a7fe:	f107 0308 	add.w	r3, r7, #8
 800a802:	2200      	movs	r2, #0
 800a804:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= -speed*SHIFT_KEY_S;
 800a806:	463b      	mov	r3, r7
 800a808:	681a      	ldr	r2, [r3, #0]
 800a80a:	4613      	mov	r3, r2
 800a80c:	079b      	lsls	r3, r3, #30
 800a80e:	1a9b      	subs	r3, r3, r2
 800a810:	009b      	lsls	r3, r3, #2
 800a812:	1a9b      	subs	r3, r3, r2
 800a814:	4618      	mov	r0, r3
 800a816:	f7f5 fe85 	bl	8000524 <__aeabi_i2d>
 800a81a:	4602      	mov	r2, r0
 800a81c:	460b      	mov	r3, r1
 800a81e:	f107 0108 	add.w	r1, r7, #8
 800a822:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800a826:	f107 0108 	add.w	r1, r7, #8
 800a82a:	f04f 0200 	mov.w	r2, #0
 800a82e:	f04f 0300 	mov.w	r3, #0
 800a832:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800a836:	f107 0108 	add.w	r1, r7, #8
 800a83a:	f04f 0200 	mov.w	r2, #0
 800a83e:	f04f 0300 	mov.w	r3, #0
 800a842:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800a846:	f107 0108 	add.w	r1, r7, #8
 800a84a:	f04f 0200 	mov.w	r2, #0
 800a84e:	f04f 0300 	mov.w	r3, #0
 800a852:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800a856:	463b      	mov	r3, r7
 800a858:	6818      	ldr	r0, [r3, #0]
 800a85a:	f7f5 fe63 	bl	8000524 <__aeabi_i2d>
 800a85e:	f20f 4340 	addw	r3, pc, #1088	; 0x440
 800a862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a866:	f7f5 fec7 	bl	80005f8 <__aeabi_dmul>
 800a86a:	4602      	mov	r2, r0
 800a86c:	460b      	mov	r3, r1
 800a86e:	4610      	mov	r0, r2
 800a870:	4619      	mov	r1, r3
 800a872:	f20f 4334 	addw	r3, pc, #1076	; 0x434
 800a876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a87a:	f7f5 fd07 	bl	800028c <__adddf3>
 800a87e:	4602      	mov	r2, r0
 800a880:	460b      	mov	r3, r1
 800a882:	f107 0108 	add.w	r1, r7, #8
 800a886:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800a88a:	e1df      	b.n	800ac4c <scaraKeyInit1+0x584>
		case SCARA_KEY_Y_INC:{
			cmd.v_factor = 0;
 800a88c:	f107 0108 	add.w	r1, r7, #8
 800a890:	f04f 0200 	mov.w	r2, #0
 800a894:	f04f 0300 	mov.w	r3, #0
 800a898:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800a89c:	f107 0308 	add.w	r3, r7, #8
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800a8a4:	f107 0308 	add.w	r3, r7, #8
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800a8ac:	f107 0108 	add.w	r1, r7, #8
 800a8b0:	f04f 0200 	mov.w	r2, #0
 800a8b4:	f04f 0300 	mov.w	r3, #0
 800a8b8:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= speed*SHIFT_KEY_S;
 800a8bc:	463b      	mov	r3, r7
 800a8be:	681a      	ldr	r2, [r3, #0]
 800a8c0:	4613      	mov	r3, r2
 800a8c2:	009b      	lsls	r3, r3, #2
 800a8c4:	4413      	add	r3, r2
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f7f5 fe2c 	bl	8000524 <__aeabi_i2d>
 800a8cc:	4602      	mov	r2, r0
 800a8ce:	460b      	mov	r3, r1
 800a8d0:	f107 0108 	add.w	r1, r7, #8
 800a8d4:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800a8d8:	f107 0108 	add.w	r1, r7, #8
 800a8dc:	f04f 0200 	mov.w	r2, #0
 800a8e0:	f04f 0300 	mov.w	r3, #0
 800a8e4:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800a8e8:	f107 0108 	add.w	r1, r7, #8
 800a8ec:	f04f 0200 	mov.w	r2, #0
 800a8f0:	f04f 0300 	mov.w	r3, #0
 800a8f4:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800a8f8:	463b      	mov	r3, r7
 800a8fa:	6818      	ldr	r0, [r3, #0]
 800a8fc:	f7f5 fe12 	bl	8000524 <__aeabi_i2d>
 800a900:	a3e7      	add	r3, pc, #924	; (adr r3, 800aca0 <scaraKeyInit1+0x5d8>)
 800a902:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a906:	f7f5 fe77 	bl	80005f8 <__aeabi_dmul>
 800a90a:	4602      	mov	r2, r0
 800a90c:	460b      	mov	r3, r1
 800a90e:	4610      	mov	r0, r2
 800a910:	4619      	mov	r1, r3
 800a912:	a3e5      	add	r3, pc, #916	; (adr r3, 800aca8 <scaraKeyInit1+0x5e0>)
 800a914:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a918:	f7f5 fcb8 	bl	800028c <__adddf3>
 800a91c:	4602      	mov	r2, r0
 800a91e:	460b      	mov	r3, r1
 800a920:	f107 0108 	add.w	r1, r7, #8
 800a924:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800a928:	e190      	b.n	800ac4c <scaraKeyInit1+0x584>

		case SCARA_KEY_Y_DEC:{
			cmd.v_factor = 0;
 800a92a:	f107 0108 	add.w	r1, r7, #8
 800a92e:	f04f 0200 	mov.w	r2, #0
 800a932:	f04f 0300 	mov.w	r3, #0
 800a936:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800a93a:	f107 0308 	add.w	r3, r7, #8
 800a93e:	2200      	movs	r2, #0
 800a940:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800a942:	f107 0308 	add.w	r3, r7, #8
 800a946:	2200      	movs	r2, #0
 800a948:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800a94a:	f107 0108 	add.w	r1, r7, #8
 800a94e:	f04f 0200 	mov.w	r2, #0
 800a952:	f04f 0300 	mov.w	r3, #0
 800a956:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= -speed*SHIFT_KEY_S;
 800a95a:	463b      	mov	r3, r7
 800a95c:	681a      	ldr	r2, [r3, #0]
 800a95e:	4613      	mov	r3, r2
 800a960:	079b      	lsls	r3, r3, #30
 800a962:	1a9b      	subs	r3, r3, r2
 800a964:	009b      	lsls	r3, r3, #2
 800a966:	1a9b      	subs	r3, r3, r2
 800a968:	4618      	mov	r0, r3
 800a96a:	f7f5 fddb 	bl	8000524 <__aeabi_i2d>
 800a96e:	4602      	mov	r2, r0
 800a970:	460b      	mov	r3, r1
 800a972:	f107 0108 	add.w	r1, r7, #8
 800a976:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800a97a:	f107 0108 	add.w	r1, r7, #8
 800a97e:	f04f 0200 	mov.w	r2, #0
 800a982:	f04f 0300 	mov.w	r3, #0
 800a986:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800a98a:	f107 0108 	add.w	r1, r7, #8
 800a98e:	f04f 0200 	mov.w	r2, #0
 800a992:	f04f 0300 	mov.w	r3, #0
 800a996:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800a99a:	463b      	mov	r3, r7
 800a99c:	6818      	ldr	r0, [r3, #0]
 800a99e:	f7f5 fdc1 	bl	8000524 <__aeabi_i2d>
 800a9a2:	a3bf      	add	r3, pc, #764	; (adr r3, 800aca0 <scaraKeyInit1+0x5d8>)
 800a9a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a8:	f7f5 fe26 	bl	80005f8 <__aeabi_dmul>
 800a9ac:	4602      	mov	r2, r0
 800a9ae:	460b      	mov	r3, r1
 800a9b0:	4610      	mov	r0, r2
 800a9b2:	4619      	mov	r1, r3
 800a9b4:	a3bc      	add	r3, pc, #752	; (adr r3, 800aca8 <scaraKeyInit1+0x5e0>)
 800a9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ba:	f7f5 fc67 	bl	800028c <__adddf3>
 800a9be:	4602      	mov	r2, r0
 800a9c0:	460b      	mov	r3, r1
 800a9c2:	f107 0108 	add.w	r1, r7, #8
 800a9c6:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800a9ca:	e13f      	b.n	800ac4c <scaraKeyInit1+0x584>
		case SCARA_KEY_Z_INC:{
			cmd.v_factor = 0;
 800a9cc:	f107 0108 	add.w	r1, r7, #8
 800a9d0:	f04f 0200 	mov.w	r2, #0
 800a9d4:	f04f 0300 	mov.w	r3, #0
 800a9d8:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800a9dc:	f107 0308 	add.w	r3, r7, #8
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800a9e4:	f107 0308 	add.w	r3, r7, #8
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800a9ec:	f107 0108 	add.w	r1, r7, #8
 800a9f0:	f04f 0200 	mov.w	r2, #0
 800a9f4:	f04f 0300 	mov.w	r3, #0
 800a9f8:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800a9fc:	f107 0108 	add.w	r1, r7, #8
 800aa00:	f04f 0200 	mov.w	r2, #0
 800aa04:	f04f 0300 	mov.w	r3, #0
 800aa08:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= speed*SHIFT_KEY_S;
 800aa0c:	463b      	mov	r3, r7
 800aa0e:	681a      	ldr	r2, [r3, #0]
 800aa10:	4613      	mov	r3, r2
 800aa12:	009b      	lsls	r3, r3, #2
 800aa14:	4413      	add	r3, r2
 800aa16:	4618      	mov	r0, r3
 800aa18:	f7f5 fd84 	bl	8000524 <__aeabi_i2d>
 800aa1c:	4602      	mov	r2, r0
 800aa1e:	460b      	mov	r3, r1
 800aa20:	f107 0108 	add.w	r1, r7, #8
 800aa24:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800aa28:	f107 0108 	add.w	r1, r7, #8
 800aa2c:	f04f 0200 	mov.w	r2, #0
 800aa30:	f04f 0300 	mov.w	r3, #0
 800aa34:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800aa38:	463b      	mov	r3, r7
 800aa3a:	6818      	ldr	r0, [r3, #0]
 800aa3c:	f7f5 fd72 	bl	8000524 <__aeabi_i2d>
 800aa40:	a397      	add	r3, pc, #604	; (adr r3, 800aca0 <scaraKeyInit1+0x5d8>)
 800aa42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa46:	f7f5 fdd7 	bl	80005f8 <__aeabi_dmul>
 800aa4a:	4602      	mov	r2, r0
 800aa4c:	460b      	mov	r3, r1
 800aa4e:	4610      	mov	r0, r2
 800aa50:	4619      	mov	r1, r3
 800aa52:	a395      	add	r3, pc, #596	; (adr r3, 800aca8 <scaraKeyInit1+0x5e0>)
 800aa54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa58:	f7f5 fc18 	bl	800028c <__adddf3>
 800aa5c:	4602      	mov	r2, r0
 800aa5e:	460b      	mov	r3, r1
 800aa60:	f107 0108 	add.w	r1, r7, #8
 800aa64:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800aa68:	e0f0      	b.n	800ac4c <scaraKeyInit1+0x584>
		case SCARA_KEY_Z_DEC:{
			cmd.v_factor = 0;
 800aa6a:	f107 0108 	add.w	r1, r7, #8
 800aa6e:	f04f 0200 	mov.w	r2, #0
 800aa72:	f04f 0300 	mov.w	r3, #0
 800aa76:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800aa7a:	f107 0308 	add.w	r3, r7, #8
 800aa7e:	2200      	movs	r2, #0
 800aa80:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800aa82:	f107 0308 	add.w	r3, r7, #8
 800aa86:	2200      	movs	r2, #0
 800aa88:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800aa8a:	f107 0108 	add.w	r1, r7, #8
 800aa8e:	f04f 0200 	mov.w	r2, #0
 800aa92:	f04f 0300 	mov.w	r3, #0
 800aa96:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800aa9a:	f107 0108 	add.w	r1, r7, #8
 800aa9e:	f04f 0200 	mov.w	r2, #0
 800aaa2:	f04f 0300 	mov.w	r3, #0
 800aaa6:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= -speed*SHIFT_KEY_S;
 800aaaa:	463b      	mov	r3, r7
 800aaac:	681a      	ldr	r2, [r3, #0]
 800aaae:	4613      	mov	r3, r2
 800aab0:	079b      	lsls	r3, r3, #30
 800aab2:	1a9b      	subs	r3, r3, r2
 800aab4:	009b      	lsls	r3, r3, #2
 800aab6:	1a9b      	subs	r3, r3, r2
 800aab8:	4618      	mov	r0, r3
 800aaba:	f7f5 fd33 	bl	8000524 <__aeabi_i2d>
 800aabe:	4602      	mov	r2, r0
 800aac0:	460b      	mov	r3, r1
 800aac2:	f107 0108 	add.w	r1, r7, #8
 800aac6:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800aaca:	f107 0108 	add.w	r1, r7, #8
 800aace:	f04f 0200 	mov.w	r2, #0
 800aad2:	f04f 0300 	mov.w	r3, #0
 800aad6:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800aada:	463b      	mov	r3, r7
 800aadc:	6818      	ldr	r0, [r3, #0]
 800aade:	f7f5 fd21 	bl	8000524 <__aeabi_i2d>
 800aae2:	a36f      	add	r3, pc, #444	; (adr r3, 800aca0 <scaraKeyInit1+0x5d8>)
 800aae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae8:	f7f5 fd86 	bl	80005f8 <__aeabi_dmul>
 800aaec:	4602      	mov	r2, r0
 800aaee:	460b      	mov	r3, r1
 800aaf0:	4610      	mov	r0, r2
 800aaf2:	4619      	mov	r1, r3
 800aaf4:	a36c      	add	r3, pc, #432	; (adr r3, 800aca8 <scaraKeyInit1+0x5e0>)
 800aaf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aafa:	f7f5 fbc7 	bl	800028c <__adddf3>
 800aafe:	4602      	mov	r2, r0
 800ab00:	460b      	mov	r3, r1
 800ab02:	f107 0108 	add.w	r1, r7, #8
 800ab06:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800ab0a:	e09f      	b.n	800ac4c <scaraKeyInit1+0x584>
		case SCARA_KEY_ROLL_INC:{
			cmd.v_factor = 0;
 800ab0c:	f107 0108 	add.w	r1, r7, #8
 800ab10:	f04f 0200 	mov.w	r2, #0
 800ab14:	f04f 0300 	mov.w	r3, #0
 800ab18:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800ab1c:	f107 0308 	add.w	r3, r7, #8
 800ab20:	2200      	movs	r2, #0
 800ab22:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800ab24:	f107 0308 	add.w	r3, r7, #8
 800ab28:	2200      	movs	r2, #0
 800ab2a:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800ab2c:	f107 0108 	add.w	r1, r7, #8
 800ab30:	f04f 0200 	mov.w	r2, #0
 800ab34:	f04f 0300 	mov.w	r3, #0
 800ab38:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800ab3c:	f107 0108 	add.w	r1, r7, #8
 800ab40:	f04f 0200 	mov.w	r2, #0
 800ab44:	f04f 0300 	mov.w	r3, #0
 800ab48:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800ab4c:	f107 0108 	add.w	r1, r7, #8
 800ab50:	f04f 0200 	mov.w	r2, #0
 800ab54:	f04f 0300 	mov.w	r3, #0
 800ab58:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= speed*SHIFT_KEY_S;
 800ab5c:	463b      	mov	r3, r7
 800ab5e:	681a      	ldr	r2, [r3, #0]
 800ab60:	4613      	mov	r3, r2
 800ab62:	009b      	lsls	r3, r3, #2
 800ab64:	4413      	add	r3, r2
 800ab66:	4618      	mov	r0, r3
 800ab68:	f7f5 fcdc 	bl	8000524 <__aeabi_i2d>
 800ab6c:	4602      	mov	r2, r0
 800ab6e:	460b      	mov	r3, r1
 800ab70:	f107 0108 	add.w	r1, r7, #8
 800ab74:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800ab78:	463b      	mov	r3, r7
 800ab7a:	6818      	ldr	r0, [r3, #0]
 800ab7c:	f7f5 fcd2 	bl	8000524 <__aeabi_i2d>
 800ab80:	a347      	add	r3, pc, #284	; (adr r3, 800aca0 <scaraKeyInit1+0x5d8>)
 800ab82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab86:	f7f5 fd37 	bl	80005f8 <__aeabi_dmul>
 800ab8a:	4602      	mov	r2, r0
 800ab8c:	460b      	mov	r3, r1
 800ab8e:	4610      	mov	r0, r2
 800ab90:	4619      	mov	r1, r3
 800ab92:	a345      	add	r3, pc, #276	; (adr r3, 800aca8 <scaraKeyInit1+0x5e0>)
 800ab94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab98:	f7f5 fb78 	bl	800028c <__adddf3>
 800ab9c:	4602      	mov	r2, r0
 800ab9e:	460b      	mov	r3, r1
 800aba0:	f107 0108 	add.w	r1, r7, #8
 800aba4:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800aba8:	e050      	b.n	800ac4c <scaraKeyInit1+0x584>
		case SCARA_KEY_ROLL_DEC:{
			cmd.v_factor = 0;
 800abaa:	f107 0108 	add.w	r1, r7, #8
 800abae:	f04f 0200 	mov.w	r2, #0
 800abb2:	f04f 0300 	mov.w	r3, #0
 800abb6:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800abba:	f107 0308 	add.w	r3, r7, #8
 800abbe:	2200      	movs	r2, #0
 800abc0:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800abc2:	f107 0308 	add.w	r3, r7, #8
 800abc6:	2200      	movs	r2, #0
 800abc8:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800abca:	f107 0108 	add.w	r1, r7, #8
 800abce:	f04f 0200 	mov.w	r2, #0
 800abd2:	f04f 0300 	mov.w	r3, #0
 800abd6:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800abda:	f107 0108 	add.w	r1, r7, #8
 800abde:	f04f 0200 	mov.w	r2, #0
 800abe2:	f04f 0300 	mov.w	r3, #0
 800abe6:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800abea:	f107 0108 	add.w	r1, r7, #8
 800abee:	f04f 0200 	mov.w	r2, #0
 800abf2:	f04f 0300 	mov.w	r3, #0
 800abf6:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= -speed*SHIFT_KEY_S;
 800abfa:	463b      	mov	r3, r7
 800abfc:	681a      	ldr	r2, [r3, #0]
 800abfe:	4613      	mov	r3, r2
 800ac00:	079b      	lsls	r3, r3, #30
 800ac02:	1a9b      	subs	r3, r3, r2
 800ac04:	009b      	lsls	r3, r3, #2
 800ac06:	1a9b      	subs	r3, r3, r2
 800ac08:	4618      	mov	r0, r3
 800ac0a:	f7f5 fc8b 	bl	8000524 <__aeabi_i2d>
 800ac0e:	4602      	mov	r2, r0
 800ac10:	460b      	mov	r3, r1
 800ac12:	f107 0108 	add.w	r1, r7, #8
 800ac16:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800ac1a:	463b      	mov	r3, r7
 800ac1c:	6818      	ldr	r0, [r3, #0]
 800ac1e:	f7f5 fc81 	bl	8000524 <__aeabi_i2d>
 800ac22:	a31f      	add	r3, pc, #124	; (adr r3, 800aca0 <scaraKeyInit1+0x5d8>)
 800ac24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac28:	f7f5 fce6 	bl	80005f8 <__aeabi_dmul>
 800ac2c:	4602      	mov	r2, r0
 800ac2e:	460b      	mov	r3, r1
 800ac30:	4610      	mov	r0, r2
 800ac32:	4619      	mov	r1, r3
 800ac34:	a31c      	add	r3, pc, #112	; (adr r3, 800aca8 <scaraKeyInit1+0x5e0>)
 800ac36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac3a:	f7f5 fb27 	bl	800028c <__adddf3>
 800ac3e:	4602      	mov	r2, r0
 800ac40:	460b      	mov	r3, r1
 800ac42:	f107 0108 	add.w	r1, r7, #8
 800ac46:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800ac4a:	bf00      	nop
	}

	status = scaraInitDuty(cmd);
 800ac4c:	f107 0408 	add.w	r4, r7, #8
 800ac50:	4668      	mov	r0, sp
 800ac52:	f104 0310 	add.w	r3, r4, #16
 800ac56:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 800ac5a:	4619      	mov	r1, r3
 800ac5c:	f00b f848 	bl	8015cf0 <memcpy>
 800ac60:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ac64:	f7fb fd4c 	bl	8006700 <scaraInitDuty>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
	if (status == SCARA_STATUS_OK) {
 800ac6e:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d10b      	bne.n	800ac8e <scaraKeyInit1+0x5c6>
		status = scaraTestDuty();
 800ac76:	f7ff fb03 	bl	800a280 <scaraTestDuty>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
		if (status != SCARA_STATUS_OK) {
 800ac80:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d005      	beq.n	800ac94 <scaraKeyInit1+0x5cc>
			return status;
 800ac88:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800ac8c:	e002      	b.n	800ac94 <scaraKeyInit1+0x5cc>
		// tinh lai run time so vs v hien tai
//		*(runtime) = (v_current - lspb->v0)/(lspb->a_design);
//		scaraFlowDuty(*runtime, &positionKeyInit, positionCurrent);
//		return status;
	} else {
		return status;
 800ac8e:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800ac92:	e7ff      	b.n	800ac94 <scaraKeyInit1+0x5cc>
	}
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	f507 77ee 	add.w	r7, r7, #476	; 0x1dc
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd90      	pop	{r4, r7, pc}
 800ac9e:	bf00      	nop
 800aca0:	9999999a 	.word	0x9999999a
 800aca4:	3fa99999 	.word	0x3fa99999
 800aca8:	9999999a 	.word	0x9999999a
 800acac:	3fe99999 	.word	0x3fe99999

0800acb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b082      	sub	sp, #8
 800acb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800acb6:	2300      	movs	r3, #0
 800acb8:	607b      	str	r3, [r7, #4]
 800acba:	4b12      	ldr	r3, [pc, #72]	; (800ad04 <HAL_MspInit+0x54>)
 800acbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acbe:	4a11      	ldr	r2, [pc, #68]	; (800ad04 <HAL_MspInit+0x54>)
 800acc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800acc4:	6453      	str	r3, [r2, #68]	; 0x44
 800acc6:	4b0f      	ldr	r3, [pc, #60]	; (800ad04 <HAL_MspInit+0x54>)
 800acc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800acce:	607b      	str	r3, [r7, #4]
 800acd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800acd2:	2300      	movs	r3, #0
 800acd4:	603b      	str	r3, [r7, #0]
 800acd6:	4b0b      	ldr	r3, [pc, #44]	; (800ad04 <HAL_MspInit+0x54>)
 800acd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acda:	4a0a      	ldr	r2, [pc, #40]	; (800ad04 <HAL_MspInit+0x54>)
 800acdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ace0:	6413      	str	r3, [r2, #64]	; 0x40
 800ace2:	4b08      	ldr	r3, [pc, #32]	; (800ad04 <HAL_MspInit+0x54>)
 800ace4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ace6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800acea:	603b      	str	r3, [r7, #0]
 800acec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800acee:	2200      	movs	r2, #0
 800acf0:	210f      	movs	r1, #15
 800acf2:	f06f 0001 	mvn.w	r0, #1
 800acf6:	f000 fc79 	bl	800b5ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800acfa:	bf00      	nop
 800acfc:	3708      	adds	r7, #8
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}
 800ad02:	bf00      	nop
 800ad04:	40023800 	.word	0x40023800

0800ad08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b08c      	sub	sp, #48	; 0x30
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800ad10:	2300      	movs	r3, #0
 800ad12:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800ad14:	2300      	movs	r3, #0
 800ad16:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800ad18:	2200      	movs	r2, #0
 800ad1a:	6879      	ldr	r1, [r7, #4]
 800ad1c:	2036      	movs	r0, #54	; 0x36
 800ad1e:	f000 fc65 	bl	800b5ec <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800ad22:	2036      	movs	r0, #54	; 0x36
 800ad24:	f000 fc7e 	bl	800b624 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800ad28:	2300      	movs	r3, #0
 800ad2a:	60fb      	str	r3, [r7, #12]
 800ad2c:	4b1f      	ldr	r3, [pc, #124]	; (800adac <HAL_InitTick+0xa4>)
 800ad2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad30:	4a1e      	ldr	r2, [pc, #120]	; (800adac <HAL_InitTick+0xa4>)
 800ad32:	f043 0310 	orr.w	r3, r3, #16
 800ad36:	6413      	str	r3, [r2, #64]	; 0x40
 800ad38:	4b1c      	ldr	r3, [pc, #112]	; (800adac <HAL_InitTick+0xa4>)
 800ad3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad3c:	f003 0310 	and.w	r3, r3, #16
 800ad40:	60fb      	str	r3, [r7, #12]
 800ad42:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800ad44:	f107 0210 	add.w	r2, r7, #16
 800ad48:	f107 0314 	add.w	r3, r7, #20
 800ad4c:	4611      	mov	r1, r2
 800ad4e:	4618      	mov	r0, r3
 800ad50:	f003 f812 	bl	800dd78 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800ad54:	f002 ffe8 	bl	800dd28 <HAL_RCC_GetPCLK1Freq>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	005b      	lsls	r3, r3, #1
 800ad5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800ad5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad60:	4a13      	ldr	r2, [pc, #76]	; (800adb0 <HAL_InitTick+0xa8>)
 800ad62:	fba2 2303 	umull	r2, r3, r2, r3
 800ad66:	0c9b      	lsrs	r3, r3, #18
 800ad68:	3b01      	subs	r3, #1
 800ad6a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800ad6c:	4b11      	ldr	r3, [pc, #68]	; (800adb4 <HAL_InitTick+0xac>)
 800ad6e:	4a12      	ldr	r2, [pc, #72]	; (800adb8 <HAL_InitTick+0xb0>)
 800ad70:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800ad72:	4b10      	ldr	r3, [pc, #64]	; (800adb4 <HAL_InitTick+0xac>)
 800ad74:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ad78:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800ad7a:	4a0e      	ldr	r2, [pc, #56]	; (800adb4 <HAL_InitTick+0xac>)
 800ad7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad7e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800ad80:	4b0c      	ldr	r3, [pc, #48]	; (800adb4 <HAL_InitTick+0xac>)
 800ad82:	2200      	movs	r2, #0
 800ad84:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ad86:	4b0b      	ldr	r3, [pc, #44]	; (800adb4 <HAL_InitTick+0xac>)
 800ad88:	2200      	movs	r2, #0
 800ad8a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800ad8c:	4809      	ldr	r0, [pc, #36]	; (800adb4 <HAL_InitTick+0xac>)
 800ad8e:	f003 f825 	bl	800dddc <HAL_TIM_Base_Init>
 800ad92:	4603      	mov	r3, r0
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d104      	bne.n	800ada2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800ad98:	4806      	ldr	r0, [pc, #24]	; (800adb4 <HAL_InitTick+0xac>)
 800ad9a:	f003 f86e 	bl	800de7a <HAL_TIM_Base_Start_IT>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	e000      	b.n	800ada4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800ada2:	2301      	movs	r3, #1
}
 800ada4:	4618      	mov	r0, r3
 800ada6:	3730      	adds	r7, #48	; 0x30
 800ada8:	46bd      	mov	sp, r7
 800adaa:	bd80      	pop	{r7, pc}
 800adac:	40023800 	.word	0x40023800
 800adb0:	431bde83 	.word	0x431bde83
 800adb4:	2000ecf8 	.word	0x2000ecf8
 800adb8:	40001000 	.word	0x40001000

0800adbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800adbc:	b480      	push	{r7}
 800adbe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800adc0:	bf00      	nop
 800adc2:	46bd      	mov	sp, r7
 800adc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc8:	4770      	bx	lr
	...

0800adcc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  LOG_REPORT("ic.c: HARDFAULT ERROR", __LINE__);
 800add0:	2162      	movs	r1, #98	; 0x62
 800add2:	4802      	ldr	r0, [pc, #8]	; (800addc <HardFault_Handler+0x10>)
 800add4:	f7f7 fb26 	bl	8002424 <LOG_REPORT>
 800add8:	e7fa      	b.n	800add0 <HardFault_Handler+0x4>
 800adda:	bf00      	nop
 800addc:	0801c1d8 	.word	0x0801c1d8

0800ade0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  LOG_REPORT("ic.c: MEMORY ERROR", __LINE__);
 800ade4:	2172      	movs	r1, #114	; 0x72
 800ade6:	4802      	ldr	r0, [pc, #8]	; (800adf0 <MemManage_Handler+0x10>)
 800ade8:	f7f7 fb1c 	bl	8002424 <LOG_REPORT>
 800adec:	e7fa      	b.n	800ade4 <MemManage_Handler+0x4>
 800adee:	bf00      	nop
 800adf0:	0801c1f0 	.word	0x0801c1f0

0800adf4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  LOG_REPORT("ic.c: BUS ERROR", __LINE__);
 800adf8:	2182      	movs	r1, #130	; 0x82
 800adfa:	4802      	ldr	r0, [pc, #8]	; (800ae04 <BusFault_Handler+0x10>)
 800adfc:	f7f7 fb12 	bl	8002424 <LOG_REPORT>
 800ae00:	e7fa      	b.n	800adf8 <BusFault_Handler+0x4>
 800ae02:	bf00      	nop
 800ae04:	0801c204 	.word	0x0801c204

0800ae08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ae0c:	e7fe      	b.n	800ae0c <UsageFault_Handler+0x4>

0800ae0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ae0e:	b480      	push	{r7}
 800ae10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ae12:	bf00      	nop
 800ae14:	46bd      	mov	sp, r7
 800ae16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1a:	4770      	bx	lr

0800ae1c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800ae20:	4802      	ldr	r0, [pc, #8]	; (800ae2c <DMA1_Stream4_IRQHandler+0x10>)
 800ae22:	f000 fd35 	bl	800b890 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800ae26:	bf00      	nop
 800ae28:	bd80      	pop	{r7, pc}
 800ae2a:	bf00      	nop
 800ae2c:	2000edf8 	.word	0x2000edf8

0800ae30 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800ae34:	4802      	ldr	r0, [pc, #8]	; (800ae40 <UART4_IRQHandler+0x10>)
 800ae36:	f003 fcbd 	bl	800e7b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800ae3a:	bf00      	nop
 800ae3c:	bd80      	pop	{r7, pc}
 800ae3e:	bf00      	nop
 800ae40:	2000edb8 	.word	0x2000edb8

0800ae44 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800ae48:	4802      	ldr	r0, [pc, #8]	; (800ae54 <TIM6_DAC_IRQHandler+0x10>)
 800ae4a:	f003 f83a 	bl	800dec2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800ae4e:	bf00      	nop
 800ae50:	bd80      	pop	{r7, pc}
 800ae52:	bf00      	nop
 800ae54:	2000ecf8 	.word	0x2000ecf8

0800ae58 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	osSignalSet(defaultTaskHandle, 0x01);
 800ae5c:	4b05      	ldr	r3, [pc, #20]	; (800ae74 <TIM7_IRQHandler+0x1c>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	2101      	movs	r1, #1
 800ae62:	4618      	mov	r0, r3
 800ae64:	f007 fbba 	bl	80125dc <osSignalSet>
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800ae68:	4803      	ldr	r0, [pc, #12]	; (800ae78 <TIM7_IRQHandler+0x20>)
 800ae6a:	f003 f82a 	bl	800dec2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  /* USER CODE END TIM7_IRQn 1 */
}
 800ae6e:	bf00      	nop
 800ae70:	bd80      	pop	{r7, pc}
 800ae72:	bf00      	nop
 800ae74:	2000de2c 	.word	0x2000de2c
 800ae78:	2000ed78 	.word	0x2000ed78

0800ae7c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800ae80:	4802      	ldr	r0, [pc, #8]	; (800ae8c <OTG_FS_IRQHandler+0x10>)
 800ae82:	f001 fad9 	bl	800c438 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800ae86:	bf00      	nop
 800ae88:	bd80      	pop	{r7, pc}
 800ae8a:	bf00      	nop
 800ae8c:	2000f734 	.word	0x2000f734

0800ae90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800ae90:	b480      	push	{r7}
 800ae92:	af00      	add	r7, sp, #0
	return 1;
 800ae94:	2301      	movs	r3, #1
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9e:	4770      	bx	lr

0800aea0 <_kill>:

int _kill(int pid, int sig)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b082      	sub	sp, #8
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
 800aea8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800aeaa:	f00a fee7 	bl	8015c7c <__errno>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	2216      	movs	r2, #22
 800aeb2:	601a      	str	r2, [r3, #0]
	return -1;
 800aeb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	3708      	adds	r7, #8
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}

0800aec0 <_exit>:

void _exit (int status)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b082      	sub	sp, #8
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800aec8:	f04f 31ff 	mov.w	r1, #4294967295
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f7ff ffe7 	bl	800aea0 <_kill>
	while (1) {}		/* Make sure we hang here */
 800aed2:	e7fe      	b.n	800aed2 <_exit+0x12>

0800aed4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b086      	sub	sp, #24
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	60f8      	str	r0, [r7, #12]
 800aedc:	60b9      	str	r1, [r7, #8]
 800aede:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800aee0:	2300      	movs	r3, #0
 800aee2:	617b      	str	r3, [r7, #20]
 800aee4:	e00a      	b.n	800aefc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800aee6:	f3af 8000 	nop.w
 800aeea:	4601      	mov	r1, r0
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	1c5a      	adds	r2, r3, #1
 800aef0:	60ba      	str	r2, [r7, #8]
 800aef2:	b2ca      	uxtb	r2, r1
 800aef4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	3301      	adds	r3, #1
 800aefa:	617b      	str	r3, [r7, #20]
 800aefc:	697a      	ldr	r2, [r7, #20]
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	429a      	cmp	r2, r3
 800af02:	dbf0      	blt.n	800aee6 <_read+0x12>
	}

return len;
 800af04:	687b      	ldr	r3, [r7, #4]
}
 800af06:	4618      	mov	r0, r3
 800af08:	3718      	adds	r7, #24
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}

0800af0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800af0e:	b580      	push	{r7, lr}
 800af10:	b086      	sub	sp, #24
 800af12:	af00      	add	r7, sp, #0
 800af14:	60f8      	str	r0, [r7, #12]
 800af16:	60b9      	str	r1, [r7, #8]
 800af18:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800af1a:	2300      	movs	r3, #0
 800af1c:	617b      	str	r3, [r7, #20]
 800af1e:	e009      	b.n	800af34 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	1c5a      	adds	r2, r3, #1
 800af24:	60ba      	str	r2, [r7, #8]
 800af26:	781b      	ldrb	r3, [r3, #0]
 800af28:	4618      	mov	r0, r3
 800af2a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800af2e:	697b      	ldr	r3, [r7, #20]
 800af30:	3301      	adds	r3, #1
 800af32:	617b      	str	r3, [r7, #20]
 800af34:	697a      	ldr	r2, [r7, #20]
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	429a      	cmp	r2, r3
 800af3a:	dbf1      	blt.n	800af20 <_write+0x12>
	}
	return len;
 800af3c:	687b      	ldr	r3, [r7, #4]
}
 800af3e:	4618      	mov	r0, r3
 800af40:	3718      	adds	r7, #24
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}

0800af46 <_close>:

int _close(int file)
{
 800af46:	b480      	push	{r7}
 800af48:	b083      	sub	sp, #12
 800af4a:	af00      	add	r7, sp, #0
 800af4c:	6078      	str	r0, [r7, #4]
	return -1;
 800af4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800af52:	4618      	mov	r0, r3
 800af54:	370c      	adds	r7, #12
 800af56:	46bd      	mov	sp, r7
 800af58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5c:	4770      	bx	lr

0800af5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800af5e:	b480      	push	{r7}
 800af60:	b083      	sub	sp, #12
 800af62:	af00      	add	r7, sp, #0
 800af64:	6078      	str	r0, [r7, #4]
 800af66:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800af6e:	605a      	str	r2, [r3, #4]
	return 0;
 800af70:	2300      	movs	r3, #0
}
 800af72:	4618      	mov	r0, r3
 800af74:	370c      	adds	r7, #12
 800af76:	46bd      	mov	sp, r7
 800af78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7c:	4770      	bx	lr

0800af7e <_isatty>:

int _isatty(int file)
{
 800af7e:	b480      	push	{r7}
 800af80:	b083      	sub	sp, #12
 800af82:	af00      	add	r7, sp, #0
 800af84:	6078      	str	r0, [r7, #4]
	return 1;
 800af86:	2301      	movs	r3, #1
}
 800af88:	4618      	mov	r0, r3
 800af8a:	370c      	adds	r7, #12
 800af8c:	46bd      	mov	sp, r7
 800af8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af92:	4770      	bx	lr

0800af94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800af94:	b480      	push	{r7}
 800af96:	b085      	sub	sp, #20
 800af98:	af00      	add	r7, sp, #0
 800af9a:	60f8      	str	r0, [r7, #12]
 800af9c:	60b9      	str	r1, [r7, #8]
 800af9e:	607a      	str	r2, [r7, #4]
	return 0;
 800afa0:	2300      	movs	r3, #0
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	3714      	adds	r7, #20
 800afa6:	46bd      	mov	sp, r7
 800afa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afac:	4770      	bx	lr
	...

0800afb0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b084      	sub	sp, #16
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800afb8:	4b11      	ldr	r3, [pc, #68]	; (800b000 <_sbrk+0x50>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d102      	bne.n	800afc6 <_sbrk+0x16>
		heap_end = &end;
 800afc0:	4b0f      	ldr	r3, [pc, #60]	; (800b000 <_sbrk+0x50>)
 800afc2:	4a10      	ldr	r2, [pc, #64]	; (800b004 <_sbrk+0x54>)
 800afc4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800afc6:	4b0e      	ldr	r3, [pc, #56]	; (800b000 <_sbrk+0x50>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800afcc:	4b0c      	ldr	r3, [pc, #48]	; (800b000 <_sbrk+0x50>)
 800afce:	681a      	ldr	r2, [r3, #0]
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	4413      	add	r3, r2
 800afd4:	466a      	mov	r2, sp
 800afd6:	4293      	cmp	r3, r2
 800afd8:	d907      	bls.n	800afea <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800afda:	f00a fe4f 	bl	8015c7c <__errno>
 800afde:	4603      	mov	r3, r0
 800afe0:	220c      	movs	r2, #12
 800afe2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800afe4:	f04f 33ff 	mov.w	r3, #4294967295
 800afe8:	e006      	b.n	800aff8 <_sbrk+0x48>
	}

	heap_end += incr;
 800afea:	4b05      	ldr	r3, [pc, #20]	; (800b000 <_sbrk+0x50>)
 800afec:	681a      	ldr	r2, [r3, #0]
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	4413      	add	r3, r2
 800aff2:	4a03      	ldr	r2, [pc, #12]	; (800b000 <_sbrk+0x50>)
 800aff4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800aff6:	68fb      	ldr	r3, [r7, #12]
}
 800aff8:	4618      	mov	r0, r3
 800affa:	3710      	adds	r7, #16
 800affc:	46bd      	mov	sp, r7
 800affe:	bd80      	pop	{r7, pc}
 800b000:	20002860 	.word	0x20002860
 800b004:	2000fb50 	.word	0x2000fb50

0800b008 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b008:	b480      	push	{r7}
 800b00a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b00c:	4b08      	ldr	r3, [pc, #32]	; (800b030 <SystemInit+0x28>)
 800b00e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b012:	4a07      	ldr	r2, [pc, #28]	; (800b030 <SystemInit+0x28>)
 800b014:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b018:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b01c:	4b04      	ldr	r3, [pc, #16]	; (800b030 <SystemInit+0x28>)
 800b01e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b022:	609a      	str	r2, [r3, #8]
#endif
}
 800b024:	bf00      	nop
 800b026:	46bd      	mov	sp, r7
 800b028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02c:	4770      	bx	lr
 800b02e:	bf00      	nop
 800b030:	e000ed00 	.word	0xe000ed00

0800b034 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b086      	sub	sp, #24
 800b038:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b03a:	f107 0308 	add.w	r3, r7, #8
 800b03e:	2200      	movs	r2, #0
 800b040:	601a      	str	r2, [r3, #0]
 800b042:	605a      	str	r2, [r3, #4]
 800b044:	609a      	str	r2, [r3, #8]
 800b046:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b048:	463b      	mov	r3, r7
 800b04a:	2200      	movs	r2, #0
 800b04c:	601a      	str	r2, [r3, #0]
 800b04e:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800b050:	4b1e      	ldr	r3, [pc, #120]	; (800b0cc <MX_TIM2_Init+0x98>)
 800b052:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b056:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 25000;
 800b058:	4b1c      	ldr	r3, [pc, #112]	; (800b0cc <MX_TIM2_Init+0x98>)
 800b05a:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800b05e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b060:	4b1a      	ldr	r3, [pc, #104]	; (800b0cc <MX_TIM2_Init+0x98>)
 800b062:	2200      	movs	r2, #0
 800b064:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff;
 800b066:	4b19      	ldr	r3, [pc, #100]	; (800b0cc <MX_TIM2_Init+0x98>)
 800b068:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b06c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b06e:	4b17      	ldr	r3, [pc, #92]	; (800b0cc <MX_TIM2_Init+0x98>)
 800b070:	2200      	movs	r2, #0
 800b072:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b074:	4b15      	ldr	r3, [pc, #84]	; (800b0cc <MX_TIM2_Init+0x98>)
 800b076:	2200      	movs	r2, #0
 800b078:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800b07a:	4814      	ldr	r0, [pc, #80]	; (800b0cc <MX_TIM2_Init+0x98>)
 800b07c:	f002 feae 	bl	800dddc <HAL_TIM_Base_Init>
 800b080:	4603      	mov	r3, r0
 800b082:	2b00      	cmp	r3, #0
 800b084:	d001      	beq.n	800b08a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800b086:	f7fa faa1 	bl	80055cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b08a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b08e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800b090:	f107 0308 	add.w	r3, r7, #8
 800b094:	4619      	mov	r1, r3
 800b096:	480d      	ldr	r0, [pc, #52]	; (800b0cc <MX_TIM2_Init+0x98>)
 800b098:	f003 f81b 	bl	800e0d2 <HAL_TIM_ConfigClockSource>
 800b09c:	4603      	mov	r3, r0
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d001      	beq.n	800b0a6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800b0a2:	f7fa fa93 	bl	80055cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800b0ae:	463b      	mov	r3, r7
 800b0b0:	4619      	mov	r1, r3
 800b0b2:	4806      	ldr	r0, [pc, #24]	; (800b0cc <MX_TIM2_Init+0x98>)
 800b0b4:	f003 fa34 	bl	800e520 <HAL_TIMEx_MasterConfigSynchronization>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d001      	beq.n	800b0c2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800b0be:	f7fa fa85 	bl	80055cc <Error_Handler>
  }

}
 800b0c2:	bf00      	nop
 800b0c4:	3718      	adds	r7, #24
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}
 800b0ca:	bf00      	nop
 800b0cc:	2000ed38 	.word	0x2000ed38

0800b0d0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b082      	sub	sp, #8
 800b0d4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b0d6:	463b      	mov	r3, r7
 800b0d8:	2200      	movs	r2, #0
 800b0da:	601a      	str	r2, [r3, #0]
 800b0dc:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 800b0de:	4b15      	ldr	r3, [pc, #84]	; (800b134 <MX_TIM7_Init+0x64>)
 800b0e0:	4a15      	ldr	r2, [pc, #84]	; (800b138 <MX_TIM7_Init+0x68>)
 800b0e2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 800b0e4:	4b13      	ldr	r3, [pc, #76]	; (800b134 <MX_TIM7_Init+0x64>)
 800b0e6:	2253      	movs	r2, #83	; 0x53
 800b0e8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b0ea:	4b12      	ldr	r3, [pc, #72]	; (800b134 <MX_TIM7_Init+0x64>)
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 800b0f0:	4b10      	ldr	r3, [pc, #64]	; (800b134 <MX_TIM7_Init+0x64>)
 800b0f2:	f242 720f 	movw	r2, #9999	; 0x270f
 800b0f6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b0f8:	4b0e      	ldr	r3, [pc, #56]	; (800b134 <MX_TIM7_Init+0x64>)
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800b0fe:	480d      	ldr	r0, [pc, #52]	; (800b134 <MX_TIM7_Init+0x64>)
 800b100:	f002 fe6c 	bl	800dddc <HAL_TIM_Base_Init>
 800b104:	4603      	mov	r3, r0
 800b106:	2b00      	cmp	r3, #0
 800b108:	d001      	beq.n	800b10e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800b10a:	f7fa fa5f 	bl	80055cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b10e:	2300      	movs	r3, #0
 800b110:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b112:	2300      	movs	r3, #0
 800b114:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800b116:	463b      	mov	r3, r7
 800b118:	4619      	mov	r1, r3
 800b11a:	4806      	ldr	r0, [pc, #24]	; (800b134 <MX_TIM7_Init+0x64>)
 800b11c:	f003 fa00 	bl	800e520 <HAL_TIMEx_MasterConfigSynchronization>
 800b120:	4603      	mov	r3, r0
 800b122:	2b00      	cmp	r3, #0
 800b124:	d001      	beq.n	800b12a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800b126:	f7fa fa51 	bl	80055cc <Error_Handler>
  }

}
 800b12a:	bf00      	nop
 800b12c:	3708      	adds	r7, #8
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd80      	pop	{r7, pc}
 800b132:	bf00      	nop
 800b134:	2000ed78 	.word	0x2000ed78
 800b138:	40001400 	.word	0x40001400

0800b13c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b084      	sub	sp, #16
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b14c:	d10e      	bne.n	800b16c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b14e:	2300      	movs	r3, #0
 800b150:	60fb      	str	r3, [r7, #12]
 800b152:	4b16      	ldr	r3, [pc, #88]	; (800b1ac <HAL_TIM_Base_MspInit+0x70>)
 800b154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b156:	4a15      	ldr	r2, [pc, #84]	; (800b1ac <HAL_TIM_Base_MspInit+0x70>)
 800b158:	f043 0301 	orr.w	r3, r3, #1
 800b15c:	6413      	str	r3, [r2, #64]	; 0x40
 800b15e:	4b13      	ldr	r3, [pc, #76]	; (800b1ac <HAL_TIM_Base_MspInit+0x70>)
 800b160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b162:	f003 0301 	and.w	r3, r3, #1
 800b166:	60fb      	str	r3, [r7, #12]
 800b168:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800b16a:	e01a      	b.n	800b1a2 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM7)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	4a0f      	ldr	r2, [pc, #60]	; (800b1b0 <HAL_TIM_Base_MspInit+0x74>)
 800b172:	4293      	cmp	r3, r2
 800b174:	d115      	bne.n	800b1a2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800b176:	2300      	movs	r3, #0
 800b178:	60bb      	str	r3, [r7, #8]
 800b17a:	4b0c      	ldr	r3, [pc, #48]	; (800b1ac <HAL_TIM_Base_MspInit+0x70>)
 800b17c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b17e:	4a0b      	ldr	r2, [pc, #44]	; (800b1ac <HAL_TIM_Base_MspInit+0x70>)
 800b180:	f043 0320 	orr.w	r3, r3, #32
 800b184:	6413      	str	r3, [r2, #64]	; 0x40
 800b186:	4b09      	ldr	r3, [pc, #36]	; (800b1ac <HAL_TIM_Base_MspInit+0x70>)
 800b188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b18a:	f003 0320 	and.w	r3, r3, #32
 800b18e:	60bb      	str	r3, [r7, #8]
 800b190:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800b192:	2200      	movs	r2, #0
 800b194:	2105      	movs	r1, #5
 800b196:	2037      	movs	r0, #55	; 0x37
 800b198:	f000 fa28 	bl	800b5ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800b19c:	2037      	movs	r0, #55	; 0x37
 800b19e:	f000 fa41 	bl	800b624 <HAL_NVIC_EnableIRQ>
}
 800b1a2:	bf00      	nop
 800b1a4:	3710      	adds	r7, #16
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}
 800b1aa:	bf00      	nop
 800b1ac:	40023800 	.word	0x40023800
 800b1b0:	40001400 	.word	0x40001400

0800b1b4 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
DMA_HandleTypeDef hdma_uart4_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 800b1b8:	4b11      	ldr	r3, [pc, #68]	; (800b200 <MX_UART4_Init+0x4c>)
 800b1ba:	4a12      	ldr	r2, [pc, #72]	; (800b204 <MX_UART4_Init+0x50>)
 800b1bc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800b1be:	4b10      	ldr	r3, [pc, #64]	; (800b200 <MX_UART4_Init+0x4c>)
 800b1c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b1c4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800b1c6:	4b0e      	ldr	r3, [pc, #56]	; (800b200 <MX_UART4_Init+0x4c>)
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800b1cc:	4b0c      	ldr	r3, [pc, #48]	; (800b200 <MX_UART4_Init+0x4c>)
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800b1d2:	4b0b      	ldr	r3, [pc, #44]	; (800b200 <MX_UART4_Init+0x4c>)
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800b1d8:	4b09      	ldr	r3, [pc, #36]	; (800b200 <MX_UART4_Init+0x4c>)
 800b1da:	220c      	movs	r2, #12
 800b1dc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b1de:	4b08      	ldr	r3, [pc, #32]	; (800b200 <MX_UART4_Init+0x4c>)
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800b1e4:	4b06      	ldr	r3, [pc, #24]	; (800b200 <MX_UART4_Init+0x4c>)
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800b1ea:	4805      	ldr	r0, [pc, #20]	; (800b200 <MX_UART4_Init+0x4c>)
 800b1ec:	f003 fa28 	bl	800e640 <HAL_UART_Init>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d001      	beq.n	800b1fa <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800b1f6:	f7fa f9e9 	bl	80055cc <Error_Handler>
  }

}
 800b1fa:	bf00      	nop
 800b1fc:	bd80      	pop	{r7, pc}
 800b1fe:	bf00      	nop
 800b200:	2000edb8 	.word	0x2000edb8
 800b204:	40004c00 	.word	0x40004c00

0800b208 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b08a      	sub	sp, #40	; 0x28
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b210:	f107 0314 	add.w	r3, r7, #20
 800b214:	2200      	movs	r2, #0
 800b216:	601a      	str	r2, [r3, #0]
 800b218:	605a      	str	r2, [r3, #4]
 800b21a:	609a      	str	r2, [r3, #8]
 800b21c:	60da      	str	r2, [r3, #12]
 800b21e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	4a34      	ldr	r2, [pc, #208]	; (800b2f8 <HAL_UART_MspInit+0xf0>)
 800b226:	4293      	cmp	r3, r2
 800b228:	d161      	bne.n	800b2ee <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800b22a:	2300      	movs	r3, #0
 800b22c:	613b      	str	r3, [r7, #16]
 800b22e:	4b33      	ldr	r3, [pc, #204]	; (800b2fc <HAL_UART_MspInit+0xf4>)
 800b230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b232:	4a32      	ldr	r2, [pc, #200]	; (800b2fc <HAL_UART_MspInit+0xf4>)
 800b234:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b238:	6413      	str	r3, [r2, #64]	; 0x40
 800b23a:	4b30      	ldr	r3, [pc, #192]	; (800b2fc <HAL_UART_MspInit+0xf4>)
 800b23c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b23e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b242:	613b      	str	r3, [r7, #16]
 800b244:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b246:	2300      	movs	r3, #0
 800b248:	60fb      	str	r3, [r7, #12]
 800b24a:	4b2c      	ldr	r3, [pc, #176]	; (800b2fc <HAL_UART_MspInit+0xf4>)
 800b24c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b24e:	4a2b      	ldr	r2, [pc, #172]	; (800b2fc <HAL_UART_MspInit+0xf4>)
 800b250:	f043 0301 	orr.w	r3, r3, #1
 800b254:	6313      	str	r3, [r2, #48]	; 0x30
 800b256:	4b29      	ldr	r3, [pc, #164]	; (800b2fc <HAL_UART_MspInit+0xf4>)
 800b258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b25a:	f003 0301 	and.w	r3, r3, #1
 800b25e:	60fb      	str	r3, [r7, #12]
 800b260:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800b262:	2303      	movs	r3, #3
 800b264:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b266:	2302      	movs	r3, #2
 800b268:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b26a:	2301      	movs	r3, #1
 800b26c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b26e:	2303      	movs	r3, #3
 800b270:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800b272:	2308      	movs	r3, #8
 800b274:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b276:	f107 0314 	add.w	r3, r7, #20
 800b27a:	4619      	mov	r1, r3
 800b27c:	4820      	ldr	r0, [pc, #128]	; (800b300 <HAL_UART_MspInit+0xf8>)
 800b27e:	f000 fd7f 	bl	800bd80 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800b282:	4b20      	ldr	r3, [pc, #128]	; (800b304 <HAL_UART_MspInit+0xfc>)
 800b284:	4a20      	ldr	r2, [pc, #128]	; (800b308 <HAL_UART_MspInit+0x100>)
 800b286:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 800b288:	4b1e      	ldr	r3, [pc, #120]	; (800b304 <HAL_UART_MspInit+0xfc>)
 800b28a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b28e:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b290:	4b1c      	ldr	r3, [pc, #112]	; (800b304 <HAL_UART_MspInit+0xfc>)
 800b292:	2240      	movs	r2, #64	; 0x40
 800b294:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b296:	4b1b      	ldr	r3, [pc, #108]	; (800b304 <HAL_UART_MspInit+0xfc>)
 800b298:	2200      	movs	r2, #0
 800b29a:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b29c:	4b19      	ldr	r3, [pc, #100]	; (800b304 <HAL_UART_MspInit+0xfc>)
 800b29e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b2a2:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b2a4:	4b17      	ldr	r3, [pc, #92]	; (800b304 <HAL_UART_MspInit+0xfc>)
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b2aa:	4b16      	ldr	r3, [pc, #88]	; (800b304 <HAL_UART_MspInit+0xfc>)
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800b2b0:	4b14      	ldr	r3, [pc, #80]	; (800b304 <HAL_UART_MspInit+0xfc>)
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800b2b6:	4b13      	ldr	r3, [pc, #76]	; (800b304 <HAL_UART_MspInit+0xfc>)
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b2bc:	4b11      	ldr	r3, [pc, #68]	; (800b304 <HAL_UART_MspInit+0xfc>)
 800b2be:	2200      	movs	r2, #0
 800b2c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800b2c2:	4810      	ldr	r0, [pc, #64]	; (800b304 <HAL_UART_MspInit+0xfc>)
 800b2c4:	f000 f9bc 	bl	800b640 <HAL_DMA_Init>
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d001      	beq.n	800b2d2 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800b2ce:	f7fa f97d 	bl	80055cc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	4a0b      	ldr	r2, [pc, #44]	; (800b304 <HAL_UART_MspInit+0xfc>)
 800b2d6:	631a      	str	r2, [r3, #48]	; 0x30
 800b2d8:	4a0a      	ldr	r2, [pc, #40]	; (800b304 <HAL_UART_MspInit+0xfc>)
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800b2de:	2200      	movs	r2, #0
 800b2e0:	2105      	movs	r1, #5
 800b2e2:	2034      	movs	r0, #52	; 0x34
 800b2e4:	f000 f982 	bl	800b5ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800b2e8:	2034      	movs	r0, #52	; 0x34
 800b2ea:	f000 f99b 	bl	800b624 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 800b2ee:	bf00      	nop
 800b2f0:	3728      	adds	r7, #40	; 0x28
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}
 800b2f6:	bf00      	nop
 800b2f8:	40004c00 	.word	0x40004c00
 800b2fc:	40023800 	.word	0x40023800
 800b300:	40020000 	.word	0x40020000
 800b304:	2000edf8 	.word	0x2000edf8
 800b308:	40026070 	.word	0x40026070

0800b30c <HAL_UART_TxCpltCallback>:
  /* USER CODE END UART4_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b084      	sub	sp, #16
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
	if (UART4 == huart->Instance) {
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	4a0c      	ldr	r2, [pc, #48]	; (800b34c <HAL_UART_TxCpltCallback+0x40>)
 800b31a:	4293      	cmp	r3, r2
 800b31c:	d112      	bne.n	800b344 <HAL_UART_TxCpltCallback+0x38>
		uint16_t size_dma;
		size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 800b31e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b322:	490b      	ldr	r1, [pc, #44]	; (800b350 <HAL_UART_TxCpltCallback+0x44>)
 800b324:	480b      	ldr	r0, [pc, #44]	; (800b354 <HAL_UART_TxCpltCallback+0x48>)
 800b326:	f7fa fa0b 	bl	8005740 <ringBuff_PopArray>
 800b32a:	4603      	mov	r3, r0
 800b32c:	81fb      	strh	r3, [r7, #14]
		if (0 == size_dma) {
 800b32e:	89fb      	ldrh	r3, [r7, #14]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d006      	beq.n	800b342 <HAL_UART_TxCpltCallback+0x36>
			return;
		}
		HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 800b334:	89fb      	ldrh	r3, [r7, #14]
 800b336:	461a      	mov	r2, r3
 800b338:	4905      	ldr	r1, [pc, #20]	; (800b350 <HAL_UART_TxCpltCallback+0x44>)
 800b33a:	4807      	ldr	r0, [pc, #28]	; (800b358 <HAL_UART_TxCpltCallback+0x4c>)
 800b33c:	f003 f9ce 	bl	800e6dc <HAL_UART_Transmit_DMA>
 800b340:	e000      	b.n	800b344 <HAL_UART_TxCpltCallback+0x38>
			return;
 800b342:	bf00      	nop
	}
}
 800b344:	3710      	adds	r7, #16
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}
 800b34a:	bf00      	nop
 800b34c:	40004c00 	.word	0x40004c00
 800b350:	2000dd28 	.word	0x2000dd28
 800b354:	20001070 	.word	0x20001070
 800b358:	2000edb8 	.word	0x2000edb8

0800b35c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800b35c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b394 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b360:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b362:	e003      	b.n	800b36c <LoopCopyDataInit>

0800b364 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b364:	4b0c      	ldr	r3, [pc, #48]	; (800b398 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b366:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b368:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b36a:	3104      	adds	r1, #4

0800b36c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b36c:	480b      	ldr	r0, [pc, #44]	; (800b39c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b36e:	4b0c      	ldr	r3, [pc, #48]	; (800b3a0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b370:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b372:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b374:	d3f6      	bcc.n	800b364 <CopyDataInit>
  ldr  r2, =_sbss
 800b376:	4a0b      	ldr	r2, [pc, #44]	; (800b3a4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b378:	e002      	b.n	800b380 <LoopFillZerobss>

0800b37a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b37a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b37c:	f842 3b04 	str.w	r3, [r2], #4

0800b380 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b380:	4b09      	ldr	r3, [pc, #36]	; (800b3a8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b382:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b384:	d3f9      	bcc.n	800b37a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b386:	f7ff fe3f 	bl	800b008 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b38a:	f00a fc7d 	bl	8015c88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b38e:	f7fa f889 	bl	80054a4 <main>
  bx  lr    
 800b392:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800b394:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800b398:	0801c998 	.word	0x0801c998
  ldr  r0, =_sdata
 800b39c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800b3a0:	200023e4 	.word	0x200023e4
  ldr  r2, =_sbss
 800b3a4:	200023e8 	.word	0x200023e8
  ldr  r3, = _ebss
 800b3a8:	2000fb4c 	.word	0x2000fb4c

0800b3ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b3ac:	e7fe      	b.n	800b3ac <ADC_IRQHandler>
	...

0800b3b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800b3b4:	4b0e      	ldr	r3, [pc, #56]	; (800b3f0 <HAL_Init+0x40>)
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	4a0d      	ldr	r2, [pc, #52]	; (800b3f0 <HAL_Init+0x40>)
 800b3ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b3be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800b3c0:	4b0b      	ldr	r3, [pc, #44]	; (800b3f0 <HAL_Init+0x40>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	4a0a      	ldr	r2, [pc, #40]	; (800b3f0 <HAL_Init+0x40>)
 800b3c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b3ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800b3cc:	4b08      	ldr	r3, [pc, #32]	; (800b3f0 <HAL_Init+0x40>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	4a07      	ldr	r2, [pc, #28]	; (800b3f0 <HAL_Init+0x40>)
 800b3d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b3d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b3d8:	2003      	movs	r0, #3
 800b3da:	f000 f8fc 	bl	800b5d6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b3de:	2000      	movs	r0, #0
 800b3e0:	f7ff fc92 	bl	800ad08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800b3e4:	f7ff fc64 	bl	800acb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b3e8:	2300      	movs	r3, #0
}
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	bd80      	pop	{r7, pc}
 800b3ee:	bf00      	nop
 800b3f0:	40023c00 	.word	0x40023c00

0800b3f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b3f8:	4b06      	ldr	r3, [pc, #24]	; (800b414 <HAL_IncTick+0x20>)
 800b3fa:	781b      	ldrb	r3, [r3, #0]
 800b3fc:	461a      	mov	r2, r3
 800b3fe:	4b06      	ldr	r3, [pc, #24]	; (800b418 <HAL_IncTick+0x24>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	4413      	add	r3, r2
 800b404:	4a04      	ldr	r2, [pc, #16]	; (800b418 <HAL_IncTick+0x24>)
 800b406:	6013      	str	r3, [r2, #0]
}
 800b408:	bf00      	nop
 800b40a:	46bd      	mov	sp, r7
 800b40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b410:	4770      	bx	lr
 800b412:	bf00      	nop
 800b414:	20002090 	.word	0x20002090
 800b418:	2000ee58 	.word	0x2000ee58

0800b41c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b41c:	b480      	push	{r7}
 800b41e:	af00      	add	r7, sp, #0
  return uwTick;
 800b420:	4b03      	ldr	r3, [pc, #12]	; (800b430 <HAL_GetTick+0x14>)
 800b422:	681b      	ldr	r3, [r3, #0]
}
 800b424:	4618      	mov	r0, r3
 800b426:	46bd      	mov	sp, r7
 800b428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42c:	4770      	bx	lr
 800b42e:	bf00      	nop
 800b430:	2000ee58 	.word	0x2000ee58

0800b434 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b084      	sub	sp, #16
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b43c:	f7ff ffee 	bl	800b41c <HAL_GetTick>
 800b440:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b44c:	d005      	beq.n	800b45a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b44e:	4b0a      	ldr	r3, [pc, #40]	; (800b478 <HAL_Delay+0x44>)
 800b450:	781b      	ldrb	r3, [r3, #0]
 800b452:	461a      	mov	r2, r3
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	4413      	add	r3, r2
 800b458:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800b45a:	bf00      	nop
 800b45c:	f7ff ffde 	bl	800b41c <HAL_GetTick>
 800b460:	4602      	mov	r2, r0
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	1ad3      	subs	r3, r2, r3
 800b466:	68fa      	ldr	r2, [r7, #12]
 800b468:	429a      	cmp	r2, r3
 800b46a:	d8f7      	bhi.n	800b45c <HAL_Delay+0x28>
  {
  }
}
 800b46c:	bf00      	nop
 800b46e:	bf00      	nop
 800b470:	3710      	adds	r7, #16
 800b472:	46bd      	mov	sp, r7
 800b474:	bd80      	pop	{r7, pc}
 800b476:	bf00      	nop
 800b478:	20002090 	.word	0x20002090

0800b47c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b47c:	b480      	push	{r7}
 800b47e:	b085      	sub	sp, #20
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f003 0307 	and.w	r3, r3, #7
 800b48a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b48c:	4b0c      	ldr	r3, [pc, #48]	; (800b4c0 <__NVIC_SetPriorityGrouping+0x44>)
 800b48e:	68db      	ldr	r3, [r3, #12]
 800b490:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b492:	68ba      	ldr	r2, [r7, #8]
 800b494:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b498:	4013      	ands	r3, r2
 800b49a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b4a0:	68bb      	ldr	r3, [r7, #8]
 800b4a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b4a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b4a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b4ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b4ae:	4a04      	ldr	r2, [pc, #16]	; (800b4c0 <__NVIC_SetPriorityGrouping+0x44>)
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	60d3      	str	r3, [r2, #12]
}
 800b4b4:	bf00      	nop
 800b4b6:	3714      	adds	r7, #20
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4be:	4770      	bx	lr
 800b4c0:	e000ed00 	.word	0xe000ed00

0800b4c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b4c8:	4b04      	ldr	r3, [pc, #16]	; (800b4dc <__NVIC_GetPriorityGrouping+0x18>)
 800b4ca:	68db      	ldr	r3, [r3, #12]
 800b4cc:	0a1b      	lsrs	r3, r3, #8
 800b4ce:	f003 0307 	and.w	r3, r3, #7
}
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4da:	4770      	bx	lr
 800b4dc:	e000ed00 	.word	0xe000ed00

0800b4e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	b083      	sub	sp, #12
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b4ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	db0b      	blt.n	800b50a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b4f2:	79fb      	ldrb	r3, [r7, #7]
 800b4f4:	f003 021f 	and.w	r2, r3, #31
 800b4f8:	4907      	ldr	r1, [pc, #28]	; (800b518 <__NVIC_EnableIRQ+0x38>)
 800b4fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b4fe:	095b      	lsrs	r3, r3, #5
 800b500:	2001      	movs	r0, #1
 800b502:	fa00 f202 	lsl.w	r2, r0, r2
 800b506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800b50a:	bf00      	nop
 800b50c:	370c      	adds	r7, #12
 800b50e:	46bd      	mov	sp, r7
 800b510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b514:	4770      	bx	lr
 800b516:	bf00      	nop
 800b518:	e000e100 	.word	0xe000e100

0800b51c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b51c:	b480      	push	{r7}
 800b51e:	b083      	sub	sp, #12
 800b520:	af00      	add	r7, sp, #0
 800b522:	4603      	mov	r3, r0
 800b524:	6039      	str	r1, [r7, #0]
 800b526:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	db0a      	blt.n	800b546 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	b2da      	uxtb	r2, r3
 800b534:	490c      	ldr	r1, [pc, #48]	; (800b568 <__NVIC_SetPriority+0x4c>)
 800b536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b53a:	0112      	lsls	r2, r2, #4
 800b53c:	b2d2      	uxtb	r2, r2
 800b53e:	440b      	add	r3, r1
 800b540:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b544:	e00a      	b.n	800b55c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	b2da      	uxtb	r2, r3
 800b54a:	4908      	ldr	r1, [pc, #32]	; (800b56c <__NVIC_SetPriority+0x50>)
 800b54c:	79fb      	ldrb	r3, [r7, #7]
 800b54e:	f003 030f 	and.w	r3, r3, #15
 800b552:	3b04      	subs	r3, #4
 800b554:	0112      	lsls	r2, r2, #4
 800b556:	b2d2      	uxtb	r2, r2
 800b558:	440b      	add	r3, r1
 800b55a:	761a      	strb	r2, [r3, #24]
}
 800b55c:	bf00      	nop
 800b55e:	370c      	adds	r7, #12
 800b560:	46bd      	mov	sp, r7
 800b562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b566:	4770      	bx	lr
 800b568:	e000e100 	.word	0xe000e100
 800b56c:	e000ed00 	.word	0xe000ed00

0800b570 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b570:	b480      	push	{r7}
 800b572:	b089      	sub	sp, #36	; 0x24
 800b574:	af00      	add	r7, sp, #0
 800b576:	60f8      	str	r0, [r7, #12]
 800b578:	60b9      	str	r1, [r7, #8]
 800b57a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	f003 0307 	and.w	r3, r3, #7
 800b582:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b584:	69fb      	ldr	r3, [r7, #28]
 800b586:	f1c3 0307 	rsb	r3, r3, #7
 800b58a:	2b04      	cmp	r3, #4
 800b58c:	bf28      	it	cs
 800b58e:	2304      	movcs	r3, #4
 800b590:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b592:	69fb      	ldr	r3, [r7, #28]
 800b594:	3304      	adds	r3, #4
 800b596:	2b06      	cmp	r3, #6
 800b598:	d902      	bls.n	800b5a0 <NVIC_EncodePriority+0x30>
 800b59a:	69fb      	ldr	r3, [r7, #28]
 800b59c:	3b03      	subs	r3, #3
 800b59e:	e000      	b.n	800b5a2 <NVIC_EncodePriority+0x32>
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b5a4:	f04f 32ff 	mov.w	r2, #4294967295
 800b5a8:	69bb      	ldr	r3, [r7, #24]
 800b5aa:	fa02 f303 	lsl.w	r3, r2, r3
 800b5ae:	43da      	mvns	r2, r3
 800b5b0:	68bb      	ldr	r3, [r7, #8]
 800b5b2:	401a      	ands	r2, r3
 800b5b4:	697b      	ldr	r3, [r7, #20]
 800b5b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b5b8:	f04f 31ff 	mov.w	r1, #4294967295
 800b5bc:	697b      	ldr	r3, [r7, #20]
 800b5be:	fa01 f303 	lsl.w	r3, r1, r3
 800b5c2:	43d9      	mvns	r1, r3
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b5c8:	4313      	orrs	r3, r2
         );
}
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	3724      	adds	r7, #36	; 0x24
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d4:	4770      	bx	lr

0800b5d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b5d6:	b580      	push	{r7, lr}
 800b5d8:	b082      	sub	sp, #8
 800b5da:	af00      	add	r7, sp, #0
 800b5dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	f7ff ff4c 	bl	800b47c <__NVIC_SetPriorityGrouping>
}
 800b5e4:	bf00      	nop
 800b5e6:	3708      	adds	r7, #8
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}

0800b5ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b086      	sub	sp, #24
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	60b9      	str	r1, [r7, #8]
 800b5f6:	607a      	str	r2, [r7, #4]
 800b5f8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b5fe:	f7ff ff61 	bl	800b4c4 <__NVIC_GetPriorityGrouping>
 800b602:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b604:	687a      	ldr	r2, [r7, #4]
 800b606:	68b9      	ldr	r1, [r7, #8]
 800b608:	6978      	ldr	r0, [r7, #20]
 800b60a:	f7ff ffb1 	bl	800b570 <NVIC_EncodePriority>
 800b60e:	4602      	mov	r2, r0
 800b610:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b614:	4611      	mov	r1, r2
 800b616:	4618      	mov	r0, r3
 800b618:	f7ff ff80 	bl	800b51c <__NVIC_SetPriority>
}
 800b61c:	bf00      	nop
 800b61e:	3718      	adds	r7, #24
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}

0800b624 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b082      	sub	sp, #8
 800b628:	af00      	add	r7, sp, #0
 800b62a:	4603      	mov	r3, r0
 800b62c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b62e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b632:	4618      	mov	r0, r3
 800b634:	f7ff ff54 	bl	800b4e0 <__NVIC_EnableIRQ>
}
 800b638:	bf00      	nop
 800b63a:	3708      	adds	r7, #8
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd80      	pop	{r7, pc}

0800b640 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b086      	sub	sp, #24
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800b648:	2300      	movs	r3, #0
 800b64a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800b64c:	f7ff fee6 	bl	800b41c <HAL_GetTick>
 800b650:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d101      	bne.n	800b65c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800b658:	2301      	movs	r3, #1
 800b65a:	e099      	b.n	800b790 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2200      	movs	r2, #0
 800b660:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2202      	movs	r2, #2
 800b668:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	681a      	ldr	r2, [r3, #0]
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	f022 0201 	bic.w	r2, r2, #1
 800b67a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b67c:	e00f      	b.n	800b69e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b67e:	f7ff fecd 	bl	800b41c <HAL_GetTick>
 800b682:	4602      	mov	r2, r0
 800b684:	693b      	ldr	r3, [r7, #16]
 800b686:	1ad3      	subs	r3, r2, r3
 800b688:	2b05      	cmp	r3, #5
 800b68a:	d908      	bls.n	800b69e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2220      	movs	r2, #32
 800b690:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2203      	movs	r2, #3
 800b696:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800b69a:	2303      	movs	r3, #3
 800b69c:	e078      	b.n	800b790 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	f003 0301 	and.w	r3, r3, #1
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d1e8      	bne.n	800b67e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b6b4:	697a      	ldr	r2, [r7, #20]
 800b6b6:	4b38      	ldr	r3, [pc, #224]	; (800b798 <HAL_DMA_Init+0x158>)
 800b6b8:	4013      	ands	r3, r2
 800b6ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	685a      	ldr	r2, [r3, #4]
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	689b      	ldr	r3, [r3, #8]
 800b6c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b6ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	691b      	ldr	r3, [r3, #16]
 800b6d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b6d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	699b      	ldr	r3, [r3, #24]
 800b6dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b6e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	6a1b      	ldr	r3, [r3, #32]
 800b6e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b6ea:	697a      	ldr	r2, [r7, #20]
 800b6ec:	4313      	orrs	r3, r2
 800b6ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6f4:	2b04      	cmp	r3, #4
 800b6f6:	d107      	bne.n	800b708 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b700:	4313      	orrs	r3, r2
 800b702:	697a      	ldr	r2, [r7, #20]
 800b704:	4313      	orrs	r3, r2
 800b706:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	697a      	ldr	r2, [r7, #20]
 800b70e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	695b      	ldr	r3, [r3, #20]
 800b716:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b718:	697b      	ldr	r3, [r7, #20]
 800b71a:	f023 0307 	bic.w	r3, r3, #7
 800b71e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b724:	697a      	ldr	r2, [r7, #20]
 800b726:	4313      	orrs	r3, r2
 800b728:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b72e:	2b04      	cmp	r3, #4
 800b730:	d117      	bne.n	800b762 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b736:	697a      	ldr	r2, [r7, #20]
 800b738:	4313      	orrs	r3, r2
 800b73a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b740:	2b00      	cmp	r3, #0
 800b742:	d00e      	beq.n	800b762 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800b744:	6878      	ldr	r0, [r7, #4]
 800b746:	f000 fa9f 	bl	800bc88 <DMA_CheckFifoParam>
 800b74a:	4603      	mov	r3, r0
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d008      	beq.n	800b762 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2240      	movs	r2, #64	; 0x40
 800b754:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2201      	movs	r2, #1
 800b75a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800b75e:	2301      	movs	r3, #1
 800b760:	e016      	b.n	800b790 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	697a      	ldr	r2, [r7, #20]
 800b768:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b76a:	6878      	ldr	r0, [r7, #4]
 800b76c:	f000 fa56 	bl	800bc1c <DMA_CalcBaseAndBitshift>
 800b770:	4603      	mov	r3, r0
 800b772:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b778:	223f      	movs	r2, #63	; 0x3f
 800b77a:	409a      	lsls	r2, r3
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2200      	movs	r2, #0
 800b784:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	2201      	movs	r2, #1
 800b78a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800b78e:	2300      	movs	r3, #0
}
 800b790:	4618      	mov	r0, r3
 800b792:	3718      	adds	r7, #24
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}
 800b798:	f010803f 	.word	0xf010803f

0800b79c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b086      	sub	sp, #24
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	60f8      	str	r0, [r7, #12]
 800b7a4:	60b9      	str	r1, [r7, #8]
 800b7a6:	607a      	str	r2, [r7, #4]
 800b7a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7b2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b7ba:	2b01      	cmp	r3, #1
 800b7bc:	d101      	bne.n	800b7c2 <HAL_DMA_Start_IT+0x26>
 800b7be:	2302      	movs	r3, #2
 800b7c0:	e040      	b.n	800b844 <HAL_DMA_Start_IT+0xa8>
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	2201      	movs	r2, #1
 800b7c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b7d0:	b2db      	uxtb	r3, r3
 800b7d2:	2b01      	cmp	r3, #1
 800b7d4:	d12f      	bne.n	800b836 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	2202      	movs	r2, #2
 800b7da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	687a      	ldr	r2, [r7, #4]
 800b7e8:	68b9      	ldr	r1, [r7, #8]
 800b7ea:	68f8      	ldr	r0, [r7, #12]
 800b7ec:	f000 f9e8 	bl	800bbc0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b7f4:	223f      	movs	r2, #63	; 0x3f
 800b7f6:	409a      	lsls	r2, r3
 800b7f8:	693b      	ldr	r3, [r7, #16]
 800b7fa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	681a      	ldr	r2, [r3, #0]
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	f042 0216 	orr.w	r2, r2, #22
 800b80a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b810:	2b00      	cmp	r3, #0
 800b812:	d007      	beq.n	800b824 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	681a      	ldr	r2, [r3, #0]
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	f042 0208 	orr.w	r2, r2, #8
 800b822:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	681a      	ldr	r2, [r3, #0]
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	f042 0201 	orr.w	r2, r2, #1
 800b832:	601a      	str	r2, [r3, #0]
 800b834:	e005      	b.n	800b842 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	2200      	movs	r2, #0
 800b83a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800b83e:	2302      	movs	r3, #2
 800b840:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800b842:	7dfb      	ldrb	r3, [r7, #23]
}
 800b844:	4618      	mov	r0, r3
 800b846:	3718      	adds	r7, #24
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd80      	pop	{r7, pc}

0800b84c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800b84c:	b480      	push	{r7}
 800b84e:	b083      	sub	sp, #12
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b85a:	b2db      	uxtb	r3, r3
 800b85c:	2b02      	cmp	r3, #2
 800b85e:	d004      	beq.n	800b86a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2280      	movs	r2, #128	; 0x80
 800b864:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800b866:	2301      	movs	r3, #1
 800b868:	e00c      	b.n	800b884 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2205      	movs	r2, #5
 800b86e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	681a      	ldr	r2, [r3, #0]
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	f022 0201 	bic.w	r2, r2, #1
 800b880:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800b882:	2300      	movs	r3, #0
}
 800b884:	4618      	mov	r0, r3
 800b886:	370c      	adds	r7, #12
 800b888:	46bd      	mov	sp, r7
 800b88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88e:	4770      	bx	lr

0800b890 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b086      	sub	sp, #24
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800b898:	2300      	movs	r3, #0
 800b89a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800b89c:	4b92      	ldr	r3, [pc, #584]	; (800bae8 <HAL_DMA_IRQHandler+0x258>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	4a92      	ldr	r2, [pc, #584]	; (800baec <HAL_DMA_IRQHandler+0x25c>)
 800b8a2:	fba2 2303 	umull	r2, r3, r2, r3
 800b8a6:	0a9b      	lsrs	r3, r3, #10
 800b8a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800b8b0:	693b      	ldr	r3, [r7, #16]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8ba:	2208      	movs	r2, #8
 800b8bc:	409a      	lsls	r2, r3
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	4013      	ands	r3, r2
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d01a      	beq.n	800b8fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	f003 0304 	and.w	r3, r3, #4
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d013      	beq.n	800b8fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	681a      	ldr	r2, [r3, #0]
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	f022 0204 	bic.w	r2, r2, #4
 800b8e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8e8:	2208      	movs	r2, #8
 800b8ea:	409a      	lsls	r2, r3
 800b8ec:	693b      	ldr	r3, [r7, #16]
 800b8ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8f4:	f043 0201 	orr.w	r2, r3, #1
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b900:	2201      	movs	r2, #1
 800b902:	409a      	lsls	r2, r3
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	4013      	ands	r3, r2
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d012      	beq.n	800b932 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	695b      	ldr	r3, [r3, #20]
 800b912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b916:	2b00      	cmp	r3, #0
 800b918:	d00b      	beq.n	800b932 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b91e:	2201      	movs	r2, #1
 800b920:	409a      	lsls	r2, r3
 800b922:	693b      	ldr	r3, [r7, #16]
 800b924:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b92a:	f043 0202 	orr.w	r2, r3, #2
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b936:	2204      	movs	r2, #4
 800b938:	409a      	lsls	r2, r3
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	4013      	ands	r3, r2
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d012      	beq.n	800b968 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	f003 0302 	and.w	r3, r3, #2
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d00b      	beq.n	800b968 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b954:	2204      	movs	r2, #4
 800b956:	409a      	lsls	r2, r3
 800b958:	693b      	ldr	r3, [r7, #16]
 800b95a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b960:	f043 0204 	orr.w	r2, r3, #4
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b96c:	2210      	movs	r2, #16
 800b96e:	409a      	lsls	r2, r3
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	4013      	ands	r3, r2
 800b974:	2b00      	cmp	r3, #0
 800b976:	d043      	beq.n	800ba00 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	f003 0308 	and.w	r3, r3, #8
 800b982:	2b00      	cmp	r3, #0
 800b984:	d03c      	beq.n	800ba00 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b98a:	2210      	movs	r2, #16
 800b98c:	409a      	lsls	r2, r3
 800b98e:	693b      	ldr	r3, [r7, #16]
 800b990:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d018      	beq.n	800b9d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d108      	bne.n	800b9c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d024      	beq.n	800ba00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	4798      	blx	r3
 800b9be:	e01f      	b.n	800ba00 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d01b      	beq.n	800ba00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9cc:	6878      	ldr	r0, [r7, #4]
 800b9ce:	4798      	blx	r3
 800b9d0:	e016      	b.n	800ba00 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d107      	bne.n	800b9f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	681a      	ldr	r2, [r3, #0]
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	f022 0208 	bic.w	r2, r2, #8
 800b9ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d003      	beq.n	800ba00 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba04:	2220      	movs	r2, #32
 800ba06:	409a      	lsls	r2, r3
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	4013      	ands	r3, r2
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	f000 808e 	beq.w	800bb2e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	f003 0310 	and.w	r3, r3, #16
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	f000 8086 	beq.w	800bb2e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba26:	2220      	movs	r2, #32
 800ba28:	409a      	lsls	r2, r3
 800ba2a:	693b      	ldr	r3, [r7, #16]
 800ba2c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ba34:	b2db      	uxtb	r3, r3
 800ba36:	2b05      	cmp	r3, #5
 800ba38:	d136      	bne.n	800baa8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	681a      	ldr	r2, [r3, #0]
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	f022 0216 	bic.w	r2, r2, #22
 800ba48:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	695a      	ldr	r2, [r3, #20]
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ba58:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d103      	bne.n	800ba6a <HAL_DMA_IRQHandler+0x1da>
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d007      	beq.n	800ba7a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	681a      	ldr	r2, [r3, #0]
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	f022 0208 	bic.w	r2, r2, #8
 800ba78:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba7e:	223f      	movs	r2, #63	; 0x3f
 800ba80:	409a      	lsls	r2, r3
 800ba82:	693b      	ldr	r3, [r7, #16]
 800ba84:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2200      	movs	r2, #0
 800ba8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	2201      	movs	r2, #1
 800ba92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d07d      	beq.n	800bb9a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	4798      	blx	r3
        }
        return;
 800baa6:	e078      	b.n	800bb9a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d01c      	beq.n	800baf0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d108      	bne.n	800bad6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d030      	beq.n	800bb2e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	4798      	blx	r3
 800bad4:	e02b      	b.n	800bb2e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bada:	2b00      	cmp	r3, #0
 800badc:	d027      	beq.n	800bb2e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bae2:	6878      	ldr	r0, [r7, #4]
 800bae4:	4798      	blx	r3
 800bae6:	e022      	b.n	800bb2e <HAL_DMA_IRQHandler+0x29e>
 800bae8:	20002088 	.word	0x20002088
 800baec:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d10f      	bne.n	800bb1e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	681a      	ldr	r2, [r3, #0]
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	f022 0210 	bic.w	r2, r2, #16
 800bb0c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2200      	movs	r2, #0
 800bb12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	2201      	movs	r2, #1
 800bb1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d003      	beq.n	800bb2e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d032      	beq.n	800bb9c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb3a:	f003 0301 	and.w	r3, r3, #1
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d022      	beq.n	800bb88 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2205      	movs	r2, #5
 800bb46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	681a      	ldr	r2, [r3, #0]
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	f022 0201 	bic.w	r2, r2, #1
 800bb58:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800bb5a:	68bb      	ldr	r3, [r7, #8]
 800bb5c:	3301      	adds	r3, #1
 800bb5e:	60bb      	str	r3, [r7, #8]
 800bb60:	697a      	ldr	r2, [r7, #20]
 800bb62:	429a      	cmp	r2, r3
 800bb64:	d307      	bcc.n	800bb76 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f003 0301 	and.w	r3, r3, #1
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d1f2      	bne.n	800bb5a <HAL_DMA_IRQHandler+0x2ca>
 800bb74:	e000      	b.n	800bb78 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800bb76:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2201      	movs	r2, #1
 800bb84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d005      	beq.n	800bb9c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb94:	6878      	ldr	r0, [r7, #4]
 800bb96:	4798      	blx	r3
 800bb98:	e000      	b.n	800bb9c <HAL_DMA_IRQHandler+0x30c>
        return;
 800bb9a:	bf00      	nop
    }
  }
}
 800bb9c:	3718      	adds	r7, #24
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	bd80      	pop	{r7, pc}
 800bba2:	bf00      	nop

0800bba4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800bba4:	b480      	push	{r7}
 800bba6:	b083      	sub	sp, #12
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bbb2:	b2db      	uxtb	r3, r3
}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	370c      	adds	r7, #12
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbe:	4770      	bx	lr

0800bbc0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800bbc0:	b480      	push	{r7}
 800bbc2:	b085      	sub	sp, #20
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	60f8      	str	r0, [r7, #12]
 800bbc8:	60b9      	str	r1, [r7, #8]
 800bbca:	607a      	str	r2, [r7, #4]
 800bbcc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	681a      	ldr	r2, [r3, #0]
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800bbdc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	683a      	ldr	r2, [r7, #0]
 800bbe4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	689b      	ldr	r3, [r3, #8]
 800bbea:	2b40      	cmp	r3, #64	; 0x40
 800bbec:	d108      	bne.n	800bc00 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	687a      	ldr	r2, [r7, #4]
 800bbf4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	68ba      	ldr	r2, [r7, #8]
 800bbfc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800bbfe:	e007      	b.n	800bc10 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	68ba      	ldr	r2, [r7, #8]
 800bc06:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	687a      	ldr	r2, [r7, #4]
 800bc0e:	60da      	str	r2, [r3, #12]
}
 800bc10:	bf00      	nop
 800bc12:	3714      	adds	r7, #20
 800bc14:	46bd      	mov	sp, r7
 800bc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1a:	4770      	bx	lr

0800bc1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800bc1c:	b480      	push	{r7}
 800bc1e:	b085      	sub	sp, #20
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	b2db      	uxtb	r3, r3
 800bc2a:	3b10      	subs	r3, #16
 800bc2c:	4a14      	ldr	r2, [pc, #80]	; (800bc80 <DMA_CalcBaseAndBitshift+0x64>)
 800bc2e:	fba2 2303 	umull	r2, r3, r2, r3
 800bc32:	091b      	lsrs	r3, r3, #4
 800bc34:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800bc36:	4a13      	ldr	r2, [pc, #76]	; (800bc84 <DMA_CalcBaseAndBitshift+0x68>)
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	4413      	add	r3, r2
 800bc3c:	781b      	ldrb	r3, [r3, #0]
 800bc3e:	461a      	mov	r2, r3
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	2b03      	cmp	r3, #3
 800bc48:	d909      	bls.n	800bc5e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800bc52:	f023 0303 	bic.w	r3, r3, #3
 800bc56:	1d1a      	adds	r2, r3, #4
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	659a      	str	r2, [r3, #88]	; 0x58
 800bc5c:	e007      	b.n	800bc6e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800bc66:	f023 0303 	bic.w	r3, r3, #3
 800bc6a:	687a      	ldr	r2, [r7, #4]
 800bc6c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800bc72:	4618      	mov	r0, r3
 800bc74:	3714      	adds	r7, #20
 800bc76:	46bd      	mov	sp, r7
 800bc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7c:	4770      	bx	lr
 800bc7e:	bf00      	nop
 800bc80:	aaaaaaab 	.word	0xaaaaaaab
 800bc84:	0801c280 	.word	0x0801c280

0800bc88 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800bc88:	b480      	push	{r7}
 800bc8a:	b085      	sub	sp, #20
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bc90:	2300      	movs	r3, #0
 800bc92:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc98:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	699b      	ldr	r3, [r3, #24]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d11f      	bne.n	800bce2 <DMA_CheckFifoParam+0x5a>
 800bca2:	68bb      	ldr	r3, [r7, #8]
 800bca4:	2b03      	cmp	r3, #3
 800bca6:	d856      	bhi.n	800bd56 <DMA_CheckFifoParam+0xce>
 800bca8:	a201      	add	r2, pc, #4	; (adr r2, 800bcb0 <DMA_CheckFifoParam+0x28>)
 800bcaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcae:	bf00      	nop
 800bcb0:	0800bcc1 	.word	0x0800bcc1
 800bcb4:	0800bcd3 	.word	0x0800bcd3
 800bcb8:	0800bcc1 	.word	0x0800bcc1
 800bcbc:	0800bd57 	.word	0x0800bd57
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d046      	beq.n	800bd5a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800bccc:	2301      	movs	r3, #1
 800bcce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bcd0:	e043      	b.n	800bd5a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcd6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800bcda:	d140      	bne.n	800bd5e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800bcdc:	2301      	movs	r3, #1
 800bcde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bce0:	e03d      	b.n	800bd5e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	699b      	ldr	r3, [r3, #24]
 800bce6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bcea:	d121      	bne.n	800bd30 <DMA_CheckFifoParam+0xa8>
 800bcec:	68bb      	ldr	r3, [r7, #8]
 800bcee:	2b03      	cmp	r3, #3
 800bcf0:	d837      	bhi.n	800bd62 <DMA_CheckFifoParam+0xda>
 800bcf2:	a201      	add	r2, pc, #4	; (adr r2, 800bcf8 <DMA_CheckFifoParam+0x70>)
 800bcf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcf8:	0800bd09 	.word	0x0800bd09
 800bcfc:	0800bd0f 	.word	0x0800bd0f
 800bd00:	0800bd09 	.word	0x0800bd09
 800bd04:	0800bd21 	.word	0x0800bd21
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800bd08:	2301      	movs	r3, #1
 800bd0a:	73fb      	strb	r3, [r7, #15]
      break;
 800bd0c:	e030      	b.n	800bd70 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d025      	beq.n	800bd66 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800bd1a:	2301      	movs	r3, #1
 800bd1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bd1e:	e022      	b.n	800bd66 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd24:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800bd28:	d11f      	bne.n	800bd6a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800bd2a:	2301      	movs	r3, #1
 800bd2c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800bd2e:	e01c      	b.n	800bd6a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	2b02      	cmp	r3, #2
 800bd34:	d903      	bls.n	800bd3e <DMA_CheckFifoParam+0xb6>
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	2b03      	cmp	r3, #3
 800bd3a:	d003      	beq.n	800bd44 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800bd3c:	e018      	b.n	800bd70 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800bd3e:	2301      	movs	r3, #1
 800bd40:	73fb      	strb	r3, [r7, #15]
      break;
 800bd42:	e015      	b.n	800bd70 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d00e      	beq.n	800bd6e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800bd50:	2301      	movs	r3, #1
 800bd52:	73fb      	strb	r3, [r7, #15]
      break;
 800bd54:	e00b      	b.n	800bd6e <DMA_CheckFifoParam+0xe6>
      break;
 800bd56:	bf00      	nop
 800bd58:	e00a      	b.n	800bd70 <DMA_CheckFifoParam+0xe8>
      break;
 800bd5a:	bf00      	nop
 800bd5c:	e008      	b.n	800bd70 <DMA_CheckFifoParam+0xe8>
      break;
 800bd5e:	bf00      	nop
 800bd60:	e006      	b.n	800bd70 <DMA_CheckFifoParam+0xe8>
      break;
 800bd62:	bf00      	nop
 800bd64:	e004      	b.n	800bd70 <DMA_CheckFifoParam+0xe8>
      break;
 800bd66:	bf00      	nop
 800bd68:	e002      	b.n	800bd70 <DMA_CheckFifoParam+0xe8>
      break;   
 800bd6a:	bf00      	nop
 800bd6c:	e000      	b.n	800bd70 <DMA_CheckFifoParam+0xe8>
      break;
 800bd6e:	bf00      	nop
    }
  } 
  
  return status; 
 800bd70:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd72:	4618      	mov	r0, r3
 800bd74:	3714      	adds	r7, #20
 800bd76:	46bd      	mov	sp, r7
 800bd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7c:	4770      	bx	lr
 800bd7e:	bf00      	nop

0800bd80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bd80:	b480      	push	{r7}
 800bd82:	b089      	sub	sp, #36	; 0x24
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
 800bd88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800bd8e:	2300      	movs	r3, #0
 800bd90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800bd92:	2300      	movs	r3, #0
 800bd94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800bd96:	2300      	movs	r3, #0
 800bd98:	61fb      	str	r3, [r7, #28]
 800bd9a:	e16b      	b.n	800c074 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800bd9c:	2201      	movs	r2, #1
 800bd9e:	69fb      	ldr	r3, [r7, #28]
 800bda0:	fa02 f303 	lsl.w	r3, r2, r3
 800bda4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	697a      	ldr	r2, [r7, #20]
 800bdac:	4013      	ands	r3, r2
 800bdae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800bdb0:	693a      	ldr	r2, [r7, #16]
 800bdb2:	697b      	ldr	r3, [r7, #20]
 800bdb4:	429a      	cmp	r2, r3
 800bdb6:	f040 815a 	bne.w	800c06e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	685b      	ldr	r3, [r3, #4]
 800bdbe:	2b01      	cmp	r3, #1
 800bdc0:	d00b      	beq.n	800bdda <HAL_GPIO_Init+0x5a>
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	685b      	ldr	r3, [r3, #4]
 800bdc6:	2b02      	cmp	r3, #2
 800bdc8:	d007      	beq.n	800bdda <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800bdce:	2b11      	cmp	r3, #17
 800bdd0:	d003      	beq.n	800bdda <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	685b      	ldr	r3, [r3, #4]
 800bdd6:	2b12      	cmp	r3, #18
 800bdd8:	d130      	bne.n	800be3c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	689b      	ldr	r3, [r3, #8]
 800bdde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800bde0:	69fb      	ldr	r3, [r7, #28]
 800bde2:	005b      	lsls	r3, r3, #1
 800bde4:	2203      	movs	r2, #3
 800bde6:	fa02 f303 	lsl.w	r3, r2, r3
 800bdea:	43db      	mvns	r3, r3
 800bdec:	69ba      	ldr	r2, [r7, #24]
 800bdee:	4013      	ands	r3, r2
 800bdf0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	68da      	ldr	r2, [r3, #12]
 800bdf6:	69fb      	ldr	r3, [r7, #28]
 800bdf8:	005b      	lsls	r3, r3, #1
 800bdfa:	fa02 f303 	lsl.w	r3, r2, r3
 800bdfe:	69ba      	ldr	r2, [r7, #24]
 800be00:	4313      	orrs	r3, r2
 800be02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	69ba      	ldr	r2, [r7, #24]
 800be08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	685b      	ldr	r3, [r3, #4]
 800be0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800be10:	2201      	movs	r2, #1
 800be12:	69fb      	ldr	r3, [r7, #28]
 800be14:	fa02 f303 	lsl.w	r3, r2, r3
 800be18:	43db      	mvns	r3, r3
 800be1a:	69ba      	ldr	r2, [r7, #24]
 800be1c:	4013      	ands	r3, r2
 800be1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	685b      	ldr	r3, [r3, #4]
 800be24:	091b      	lsrs	r3, r3, #4
 800be26:	f003 0201 	and.w	r2, r3, #1
 800be2a:	69fb      	ldr	r3, [r7, #28]
 800be2c:	fa02 f303 	lsl.w	r3, r2, r3
 800be30:	69ba      	ldr	r2, [r7, #24]
 800be32:	4313      	orrs	r3, r2
 800be34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	69ba      	ldr	r2, [r7, #24]
 800be3a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	68db      	ldr	r3, [r3, #12]
 800be40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800be42:	69fb      	ldr	r3, [r7, #28]
 800be44:	005b      	lsls	r3, r3, #1
 800be46:	2203      	movs	r2, #3
 800be48:	fa02 f303 	lsl.w	r3, r2, r3
 800be4c:	43db      	mvns	r3, r3
 800be4e:	69ba      	ldr	r2, [r7, #24]
 800be50:	4013      	ands	r3, r2
 800be52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800be54:	683b      	ldr	r3, [r7, #0]
 800be56:	689a      	ldr	r2, [r3, #8]
 800be58:	69fb      	ldr	r3, [r7, #28]
 800be5a:	005b      	lsls	r3, r3, #1
 800be5c:	fa02 f303 	lsl.w	r3, r2, r3
 800be60:	69ba      	ldr	r2, [r7, #24]
 800be62:	4313      	orrs	r3, r2
 800be64:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	69ba      	ldr	r2, [r7, #24]
 800be6a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800be6c:	683b      	ldr	r3, [r7, #0]
 800be6e:	685b      	ldr	r3, [r3, #4]
 800be70:	2b02      	cmp	r3, #2
 800be72:	d003      	beq.n	800be7c <HAL_GPIO_Init+0xfc>
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	685b      	ldr	r3, [r3, #4]
 800be78:	2b12      	cmp	r3, #18
 800be7a:	d123      	bne.n	800bec4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800be7c:	69fb      	ldr	r3, [r7, #28]
 800be7e:	08da      	lsrs	r2, r3, #3
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	3208      	adds	r2, #8
 800be84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800be8a:	69fb      	ldr	r3, [r7, #28]
 800be8c:	f003 0307 	and.w	r3, r3, #7
 800be90:	009b      	lsls	r3, r3, #2
 800be92:	220f      	movs	r2, #15
 800be94:	fa02 f303 	lsl.w	r3, r2, r3
 800be98:	43db      	mvns	r3, r3
 800be9a:	69ba      	ldr	r2, [r7, #24]
 800be9c:	4013      	ands	r3, r2
 800be9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	691a      	ldr	r2, [r3, #16]
 800bea4:	69fb      	ldr	r3, [r7, #28]
 800bea6:	f003 0307 	and.w	r3, r3, #7
 800beaa:	009b      	lsls	r3, r3, #2
 800beac:	fa02 f303 	lsl.w	r3, r2, r3
 800beb0:	69ba      	ldr	r2, [r7, #24]
 800beb2:	4313      	orrs	r3, r2
 800beb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800beb6:	69fb      	ldr	r3, [r7, #28]
 800beb8:	08da      	lsrs	r2, r3, #3
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	3208      	adds	r2, #8
 800bebe:	69b9      	ldr	r1, [r7, #24]
 800bec0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800beca:	69fb      	ldr	r3, [r7, #28]
 800becc:	005b      	lsls	r3, r3, #1
 800bece:	2203      	movs	r2, #3
 800bed0:	fa02 f303 	lsl.w	r3, r2, r3
 800bed4:	43db      	mvns	r3, r3
 800bed6:	69ba      	ldr	r2, [r7, #24]
 800bed8:	4013      	ands	r3, r2
 800beda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	685b      	ldr	r3, [r3, #4]
 800bee0:	f003 0203 	and.w	r2, r3, #3
 800bee4:	69fb      	ldr	r3, [r7, #28]
 800bee6:	005b      	lsls	r3, r3, #1
 800bee8:	fa02 f303 	lsl.w	r3, r2, r3
 800beec:	69ba      	ldr	r2, [r7, #24]
 800beee:	4313      	orrs	r3, r2
 800bef0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	69ba      	ldr	r2, [r7, #24]
 800bef6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	685b      	ldr	r3, [r3, #4]
 800befc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	f000 80b4 	beq.w	800c06e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bf06:	2300      	movs	r3, #0
 800bf08:	60fb      	str	r3, [r7, #12]
 800bf0a:	4b60      	ldr	r3, [pc, #384]	; (800c08c <HAL_GPIO_Init+0x30c>)
 800bf0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf0e:	4a5f      	ldr	r2, [pc, #380]	; (800c08c <HAL_GPIO_Init+0x30c>)
 800bf10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bf14:	6453      	str	r3, [r2, #68]	; 0x44
 800bf16:	4b5d      	ldr	r3, [pc, #372]	; (800c08c <HAL_GPIO_Init+0x30c>)
 800bf18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bf1e:	60fb      	str	r3, [r7, #12]
 800bf20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800bf22:	4a5b      	ldr	r2, [pc, #364]	; (800c090 <HAL_GPIO_Init+0x310>)
 800bf24:	69fb      	ldr	r3, [r7, #28]
 800bf26:	089b      	lsrs	r3, r3, #2
 800bf28:	3302      	adds	r3, #2
 800bf2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800bf30:	69fb      	ldr	r3, [r7, #28]
 800bf32:	f003 0303 	and.w	r3, r3, #3
 800bf36:	009b      	lsls	r3, r3, #2
 800bf38:	220f      	movs	r2, #15
 800bf3a:	fa02 f303 	lsl.w	r3, r2, r3
 800bf3e:	43db      	mvns	r3, r3
 800bf40:	69ba      	ldr	r2, [r7, #24]
 800bf42:	4013      	ands	r3, r2
 800bf44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	4a52      	ldr	r2, [pc, #328]	; (800c094 <HAL_GPIO_Init+0x314>)
 800bf4a:	4293      	cmp	r3, r2
 800bf4c:	d02b      	beq.n	800bfa6 <HAL_GPIO_Init+0x226>
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	4a51      	ldr	r2, [pc, #324]	; (800c098 <HAL_GPIO_Init+0x318>)
 800bf52:	4293      	cmp	r3, r2
 800bf54:	d025      	beq.n	800bfa2 <HAL_GPIO_Init+0x222>
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	4a50      	ldr	r2, [pc, #320]	; (800c09c <HAL_GPIO_Init+0x31c>)
 800bf5a:	4293      	cmp	r3, r2
 800bf5c:	d01f      	beq.n	800bf9e <HAL_GPIO_Init+0x21e>
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	4a4f      	ldr	r2, [pc, #316]	; (800c0a0 <HAL_GPIO_Init+0x320>)
 800bf62:	4293      	cmp	r3, r2
 800bf64:	d019      	beq.n	800bf9a <HAL_GPIO_Init+0x21a>
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	4a4e      	ldr	r2, [pc, #312]	; (800c0a4 <HAL_GPIO_Init+0x324>)
 800bf6a:	4293      	cmp	r3, r2
 800bf6c:	d013      	beq.n	800bf96 <HAL_GPIO_Init+0x216>
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	4a4d      	ldr	r2, [pc, #308]	; (800c0a8 <HAL_GPIO_Init+0x328>)
 800bf72:	4293      	cmp	r3, r2
 800bf74:	d00d      	beq.n	800bf92 <HAL_GPIO_Init+0x212>
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	4a4c      	ldr	r2, [pc, #304]	; (800c0ac <HAL_GPIO_Init+0x32c>)
 800bf7a:	4293      	cmp	r3, r2
 800bf7c:	d007      	beq.n	800bf8e <HAL_GPIO_Init+0x20e>
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	4a4b      	ldr	r2, [pc, #300]	; (800c0b0 <HAL_GPIO_Init+0x330>)
 800bf82:	4293      	cmp	r3, r2
 800bf84:	d101      	bne.n	800bf8a <HAL_GPIO_Init+0x20a>
 800bf86:	2307      	movs	r3, #7
 800bf88:	e00e      	b.n	800bfa8 <HAL_GPIO_Init+0x228>
 800bf8a:	2308      	movs	r3, #8
 800bf8c:	e00c      	b.n	800bfa8 <HAL_GPIO_Init+0x228>
 800bf8e:	2306      	movs	r3, #6
 800bf90:	e00a      	b.n	800bfa8 <HAL_GPIO_Init+0x228>
 800bf92:	2305      	movs	r3, #5
 800bf94:	e008      	b.n	800bfa8 <HAL_GPIO_Init+0x228>
 800bf96:	2304      	movs	r3, #4
 800bf98:	e006      	b.n	800bfa8 <HAL_GPIO_Init+0x228>
 800bf9a:	2303      	movs	r3, #3
 800bf9c:	e004      	b.n	800bfa8 <HAL_GPIO_Init+0x228>
 800bf9e:	2302      	movs	r3, #2
 800bfa0:	e002      	b.n	800bfa8 <HAL_GPIO_Init+0x228>
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	e000      	b.n	800bfa8 <HAL_GPIO_Init+0x228>
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	69fa      	ldr	r2, [r7, #28]
 800bfaa:	f002 0203 	and.w	r2, r2, #3
 800bfae:	0092      	lsls	r2, r2, #2
 800bfb0:	4093      	lsls	r3, r2
 800bfb2:	69ba      	ldr	r2, [r7, #24]
 800bfb4:	4313      	orrs	r3, r2
 800bfb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800bfb8:	4935      	ldr	r1, [pc, #212]	; (800c090 <HAL_GPIO_Init+0x310>)
 800bfba:	69fb      	ldr	r3, [r7, #28]
 800bfbc:	089b      	lsrs	r3, r3, #2
 800bfbe:	3302      	adds	r3, #2
 800bfc0:	69ba      	ldr	r2, [r7, #24]
 800bfc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800bfc6:	4b3b      	ldr	r3, [pc, #236]	; (800c0b4 <HAL_GPIO_Init+0x334>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bfcc:	693b      	ldr	r3, [r7, #16]
 800bfce:	43db      	mvns	r3, r3
 800bfd0:	69ba      	ldr	r2, [r7, #24]
 800bfd2:	4013      	ands	r3, r2
 800bfd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	685b      	ldr	r3, [r3, #4]
 800bfda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d003      	beq.n	800bfea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800bfe2:	69ba      	ldr	r2, [r7, #24]
 800bfe4:	693b      	ldr	r3, [r7, #16]
 800bfe6:	4313      	orrs	r3, r2
 800bfe8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800bfea:	4a32      	ldr	r2, [pc, #200]	; (800c0b4 <HAL_GPIO_Init+0x334>)
 800bfec:	69bb      	ldr	r3, [r7, #24]
 800bfee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800bff0:	4b30      	ldr	r3, [pc, #192]	; (800c0b4 <HAL_GPIO_Init+0x334>)
 800bff2:	685b      	ldr	r3, [r3, #4]
 800bff4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bff6:	693b      	ldr	r3, [r7, #16]
 800bff8:	43db      	mvns	r3, r3
 800bffa:	69ba      	ldr	r2, [r7, #24]
 800bffc:	4013      	ands	r3, r2
 800bffe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800c000:	683b      	ldr	r3, [r7, #0]
 800c002:	685b      	ldr	r3, [r3, #4]
 800c004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d003      	beq.n	800c014 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800c00c:	69ba      	ldr	r2, [r7, #24]
 800c00e:	693b      	ldr	r3, [r7, #16]
 800c010:	4313      	orrs	r3, r2
 800c012:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800c014:	4a27      	ldr	r2, [pc, #156]	; (800c0b4 <HAL_GPIO_Init+0x334>)
 800c016:	69bb      	ldr	r3, [r7, #24]
 800c018:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c01a:	4b26      	ldr	r3, [pc, #152]	; (800c0b4 <HAL_GPIO_Init+0x334>)
 800c01c:	689b      	ldr	r3, [r3, #8]
 800c01e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c020:	693b      	ldr	r3, [r7, #16]
 800c022:	43db      	mvns	r3, r3
 800c024:	69ba      	ldr	r2, [r7, #24]
 800c026:	4013      	ands	r3, r2
 800c028:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	685b      	ldr	r3, [r3, #4]
 800c02e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c032:	2b00      	cmp	r3, #0
 800c034:	d003      	beq.n	800c03e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800c036:	69ba      	ldr	r2, [r7, #24]
 800c038:	693b      	ldr	r3, [r7, #16]
 800c03a:	4313      	orrs	r3, r2
 800c03c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800c03e:	4a1d      	ldr	r2, [pc, #116]	; (800c0b4 <HAL_GPIO_Init+0x334>)
 800c040:	69bb      	ldr	r3, [r7, #24]
 800c042:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800c044:	4b1b      	ldr	r3, [pc, #108]	; (800c0b4 <HAL_GPIO_Init+0x334>)
 800c046:	68db      	ldr	r3, [r3, #12]
 800c048:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c04a:	693b      	ldr	r3, [r7, #16]
 800c04c:	43db      	mvns	r3, r3
 800c04e:	69ba      	ldr	r2, [r7, #24]
 800c050:	4013      	ands	r3, r2
 800c052:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	685b      	ldr	r3, [r3, #4]
 800c058:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d003      	beq.n	800c068 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800c060:	69ba      	ldr	r2, [r7, #24]
 800c062:	693b      	ldr	r3, [r7, #16]
 800c064:	4313      	orrs	r3, r2
 800c066:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800c068:	4a12      	ldr	r2, [pc, #72]	; (800c0b4 <HAL_GPIO_Init+0x334>)
 800c06a:	69bb      	ldr	r3, [r7, #24]
 800c06c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c06e:	69fb      	ldr	r3, [r7, #28]
 800c070:	3301      	adds	r3, #1
 800c072:	61fb      	str	r3, [r7, #28]
 800c074:	69fb      	ldr	r3, [r7, #28]
 800c076:	2b0f      	cmp	r3, #15
 800c078:	f67f ae90 	bls.w	800bd9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800c07c:	bf00      	nop
 800c07e:	bf00      	nop
 800c080:	3724      	adds	r7, #36	; 0x24
 800c082:	46bd      	mov	sp, r7
 800c084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c088:	4770      	bx	lr
 800c08a:	bf00      	nop
 800c08c:	40023800 	.word	0x40023800
 800c090:	40013800 	.word	0x40013800
 800c094:	40020000 	.word	0x40020000
 800c098:	40020400 	.word	0x40020400
 800c09c:	40020800 	.word	0x40020800
 800c0a0:	40020c00 	.word	0x40020c00
 800c0a4:	40021000 	.word	0x40021000
 800c0a8:	40021400 	.word	0x40021400
 800c0ac:	40021800 	.word	0x40021800
 800c0b0:	40021c00 	.word	0x40021c00
 800c0b4:	40013c00 	.word	0x40013c00

0800c0b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c0b8:	b480      	push	{r7}
 800c0ba:	b083      	sub	sp, #12
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
 800c0c0:	460b      	mov	r3, r1
 800c0c2:	807b      	strh	r3, [r7, #2]
 800c0c4:	4613      	mov	r3, r2
 800c0c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c0c8:	787b      	ldrb	r3, [r7, #1]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d003      	beq.n	800c0d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c0ce:	887a      	ldrh	r2, [r7, #2]
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800c0d4:	e003      	b.n	800c0de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800c0d6:	887b      	ldrh	r3, [r7, #2]
 800c0d8:	041a      	lsls	r2, r3, #16
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	619a      	str	r2, [r3, #24]
}
 800c0de:	bf00      	nop
 800c0e0:	370c      	adds	r7, #12
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e8:	4770      	bx	lr
	...

0800c0ec <HAL_NOR_Init>:
  * @param  Timing pointer to NOR control timing structure 
  * @param  ExtTiming pointer to NOR extended mode timing structure    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_Init(NOR_HandleTypeDef *hnor, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b084      	sub	sp, #16
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	60f8      	str	r0, [r7, #12]
 800c0f4:	60b9      	str	r1, [r7, #8]
 800c0f6:	607a      	str	r2, [r7, #4]
  /* Check the NOR handle parameter */
  if(hnor == NULL)
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d101      	bne.n	800c102 <HAL_NOR_Init+0x16>
  {
     return HAL_ERROR;
 800c0fe:	2301      	movs	r3, #1
 800c100:	e043      	b.n	800c18a <HAL_NOR_Init+0x9e>
  }
  
  if(hnor->State == HAL_NOR_STATE_RESET)
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800c108:	b2db      	uxtb	r3, r3
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d106      	bne.n	800c11c <HAL_NOR_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnor->Lock = HAL_UNLOCKED;
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	2200      	movs	r2, #0
 800c112:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hnor->MspInitCallback(hnor);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NOR_MspInit(hnor);
 800c116:	68f8      	ldr	r0, [r7, #12]
 800c118:	f7f8 fb14 	bl	8004744 <HAL_NOR_MspInit>
#endif /* (USE_HAL_NOR_REGISTER_CALLBACKS) */
  }
  
  /* Initialize NOR control Interface */
  FMC_NORSRAM_Init(hnor->Instance, &(hnor->Init));
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	681a      	ldr	r2, [r3, #0]
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	3308      	adds	r3, #8
 800c124:	4619      	mov	r1, r3
 800c126:	4610      	mov	r0, r2
 800c128:	f003 f9b6 	bl	800f498 <FSMC_NORSRAM_Init>

  /* Initialize NOR timing Interface */
  FMC_NORSRAM_Timing_Init(hnor->Instance, Timing, hnor->Init.NSBank); 
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	6818      	ldr	r0, [r3, #0]
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	689b      	ldr	r3, [r3, #8]
 800c134:	461a      	mov	r2, r3
 800c136:	68b9      	ldr	r1, [r7, #8]
 800c138:	f003 fa00 	bl	800f53c <FSMC_NORSRAM_Timing_Init>

  /* Initialize NOR extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hnor->Extended, ExtTiming, hnor->Init.NSBank, hnor->Init.ExtendedMode);
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	6858      	ldr	r0, [r3, #4]
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	689a      	ldr	r2, [r3, #8]
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c148:	6879      	ldr	r1, [r7, #4]
 800c14a:	f003 fa35 	bl	800f5b8 <FSMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	68fa      	ldr	r2, [r7, #12]
 800c154:	6892      	ldr	r2, [r2, #8]
 800c156:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	68fa      	ldr	r2, [r7, #12]
 800c160:	6892      	ldr	r2, [r2, #8]
 800c162:	f041 0101 	orr.w	r1, r1, #1
 800c166:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize NOR Memory Data Width*/
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	695b      	ldr	r3, [r3, #20]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d103      	bne.n	800c17a <HAL_NOR_Init+0x8e>
  {
    uwNORMemoryDataWidth = NOR_MEMORY_8B;
 800c172:	4b08      	ldr	r3, [pc, #32]	; (800c194 <HAL_NOR_Init+0xa8>)
 800c174:	2200      	movs	r2, #0
 800c176:	601a      	str	r2, [r3, #0]
 800c178:	e002      	b.n	800c180 <HAL_NOR_Init+0x94>
  }
  else
  {
    uwNORMemoryDataWidth = NOR_MEMORY_16B;
 800c17a:	4b06      	ldr	r3, [pc, #24]	; (800c194 <HAL_NOR_Init+0xa8>)
 800c17c:	2201      	movs	r2, #1
 800c17e:	601a      	str	r2, [r3, #0]
  }

  /* Check the NOR controller state */
  hnor->State = HAL_NOR_STATE_READY; 
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	2201      	movs	r2, #1
 800c184:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  return HAL_OK;
 800c188:	2300      	movs	r3, #0
}
 800c18a:	4618      	mov	r0, r3
 800c18c:	3710      	adds	r7, #16
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}
 800c192:	bf00      	nop
 800c194:	20002864 	.word	0x20002864

0800c198 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800c198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c19a:	b08f      	sub	sp, #60	; 0x3c
 800c19c:	af0a      	add	r7, sp, #40	; 0x28
 800c19e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d101      	bne.n	800c1aa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800c1a6:	2301      	movs	r3, #1
 800c1a8:	e10f      	b.n	800c3ca <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800c1b6:	b2db      	uxtb	r3, r3
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d106      	bne.n	800c1ca <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2200      	movs	r2, #0
 800c1c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800c1c4:	6878      	ldr	r0, [r7, #4]
 800c1c6:	f009 fa5d 	bl	8015684 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	2203      	movs	r2, #3
 800c1ce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800c1d2:	68bb      	ldr	r3, [r7, #8]
 800c1d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d102      	bne.n	800c1e4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	f003 fb3a 	bl	800f862 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	603b      	str	r3, [r7, #0]
 800c1f4:	687e      	ldr	r6, [r7, #4]
 800c1f6:	466d      	mov	r5, sp
 800c1f8:	f106 0410 	add.w	r4, r6, #16
 800c1fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c1fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c200:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c202:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c204:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c208:	e885 0003 	stmia.w	r5, {r0, r1}
 800c20c:	1d33      	adds	r3, r6, #4
 800c20e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c210:	6838      	ldr	r0, [r7, #0]
 800c212:	f003 fa11 	bl	800f638 <USB_CoreInit>
 800c216:	4603      	mov	r3, r0
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d005      	beq.n	800c228 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2202      	movs	r2, #2
 800c220:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800c224:	2301      	movs	r3, #1
 800c226:	e0d0      	b.n	800c3ca <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	2100      	movs	r1, #0
 800c22e:	4618      	mov	r0, r3
 800c230:	f003 fb28 	bl	800f884 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c234:	2300      	movs	r3, #0
 800c236:	73fb      	strb	r3, [r7, #15]
 800c238:	e04a      	b.n	800c2d0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800c23a:	7bfa      	ldrb	r2, [r7, #15]
 800c23c:	6879      	ldr	r1, [r7, #4]
 800c23e:	4613      	mov	r3, r2
 800c240:	00db      	lsls	r3, r3, #3
 800c242:	1a9b      	subs	r3, r3, r2
 800c244:	009b      	lsls	r3, r3, #2
 800c246:	440b      	add	r3, r1
 800c248:	333d      	adds	r3, #61	; 0x3d
 800c24a:	2201      	movs	r2, #1
 800c24c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800c24e:	7bfa      	ldrb	r2, [r7, #15]
 800c250:	6879      	ldr	r1, [r7, #4]
 800c252:	4613      	mov	r3, r2
 800c254:	00db      	lsls	r3, r3, #3
 800c256:	1a9b      	subs	r3, r3, r2
 800c258:	009b      	lsls	r3, r3, #2
 800c25a:	440b      	add	r3, r1
 800c25c:	333c      	adds	r3, #60	; 0x3c
 800c25e:	7bfa      	ldrb	r2, [r7, #15]
 800c260:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800c262:	7bfa      	ldrb	r2, [r7, #15]
 800c264:	7bfb      	ldrb	r3, [r7, #15]
 800c266:	b298      	uxth	r0, r3
 800c268:	6879      	ldr	r1, [r7, #4]
 800c26a:	4613      	mov	r3, r2
 800c26c:	00db      	lsls	r3, r3, #3
 800c26e:	1a9b      	subs	r3, r3, r2
 800c270:	009b      	lsls	r3, r3, #2
 800c272:	440b      	add	r3, r1
 800c274:	3342      	adds	r3, #66	; 0x42
 800c276:	4602      	mov	r2, r0
 800c278:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800c27a:	7bfa      	ldrb	r2, [r7, #15]
 800c27c:	6879      	ldr	r1, [r7, #4]
 800c27e:	4613      	mov	r3, r2
 800c280:	00db      	lsls	r3, r3, #3
 800c282:	1a9b      	subs	r3, r3, r2
 800c284:	009b      	lsls	r3, r3, #2
 800c286:	440b      	add	r3, r1
 800c288:	333f      	adds	r3, #63	; 0x3f
 800c28a:	2200      	movs	r2, #0
 800c28c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800c28e:	7bfa      	ldrb	r2, [r7, #15]
 800c290:	6879      	ldr	r1, [r7, #4]
 800c292:	4613      	mov	r3, r2
 800c294:	00db      	lsls	r3, r3, #3
 800c296:	1a9b      	subs	r3, r3, r2
 800c298:	009b      	lsls	r3, r3, #2
 800c29a:	440b      	add	r3, r1
 800c29c:	3344      	adds	r3, #68	; 0x44
 800c29e:	2200      	movs	r2, #0
 800c2a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800c2a2:	7bfa      	ldrb	r2, [r7, #15]
 800c2a4:	6879      	ldr	r1, [r7, #4]
 800c2a6:	4613      	mov	r3, r2
 800c2a8:	00db      	lsls	r3, r3, #3
 800c2aa:	1a9b      	subs	r3, r3, r2
 800c2ac:	009b      	lsls	r3, r3, #2
 800c2ae:	440b      	add	r3, r1
 800c2b0:	3348      	adds	r3, #72	; 0x48
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800c2b6:	7bfa      	ldrb	r2, [r7, #15]
 800c2b8:	6879      	ldr	r1, [r7, #4]
 800c2ba:	4613      	mov	r3, r2
 800c2bc:	00db      	lsls	r3, r3, #3
 800c2be:	1a9b      	subs	r3, r3, r2
 800c2c0:	009b      	lsls	r3, r3, #2
 800c2c2:	440b      	add	r3, r1
 800c2c4:	3350      	adds	r3, #80	; 0x50
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c2ca:	7bfb      	ldrb	r3, [r7, #15]
 800c2cc:	3301      	adds	r3, #1
 800c2ce:	73fb      	strb	r3, [r7, #15]
 800c2d0:	7bfa      	ldrb	r2, [r7, #15]
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	685b      	ldr	r3, [r3, #4]
 800c2d6:	429a      	cmp	r2, r3
 800c2d8:	d3af      	bcc.n	800c23a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c2da:	2300      	movs	r3, #0
 800c2dc:	73fb      	strb	r3, [r7, #15]
 800c2de:	e044      	b.n	800c36a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800c2e0:	7bfa      	ldrb	r2, [r7, #15]
 800c2e2:	6879      	ldr	r1, [r7, #4]
 800c2e4:	4613      	mov	r3, r2
 800c2e6:	00db      	lsls	r3, r3, #3
 800c2e8:	1a9b      	subs	r3, r3, r2
 800c2ea:	009b      	lsls	r3, r3, #2
 800c2ec:	440b      	add	r3, r1
 800c2ee:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800c2f6:	7bfa      	ldrb	r2, [r7, #15]
 800c2f8:	6879      	ldr	r1, [r7, #4]
 800c2fa:	4613      	mov	r3, r2
 800c2fc:	00db      	lsls	r3, r3, #3
 800c2fe:	1a9b      	subs	r3, r3, r2
 800c300:	009b      	lsls	r3, r3, #2
 800c302:	440b      	add	r3, r1
 800c304:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800c308:	7bfa      	ldrb	r2, [r7, #15]
 800c30a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800c30c:	7bfa      	ldrb	r2, [r7, #15]
 800c30e:	6879      	ldr	r1, [r7, #4]
 800c310:	4613      	mov	r3, r2
 800c312:	00db      	lsls	r3, r3, #3
 800c314:	1a9b      	subs	r3, r3, r2
 800c316:	009b      	lsls	r3, r3, #2
 800c318:	440b      	add	r3, r1
 800c31a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800c31e:	2200      	movs	r2, #0
 800c320:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800c322:	7bfa      	ldrb	r2, [r7, #15]
 800c324:	6879      	ldr	r1, [r7, #4]
 800c326:	4613      	mov	r3, r2
 800c328:	00db      	lsls	r3, r3, #3
 800c32a:	1a9b      	subs	r3, r3, r2
 800c32c:	009b      	lsls	r3, r3, #2
 800c32e:	440b      	add	r3, r1
 800c330:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800c334:	2200      	movs	r2, #0
 800c336:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800c338:	7bfa      	ldrb	r2, [r7, #15]
 800c33a:	6879      	ldr	r1, [r7, #4]
 800c33c:	4613      	mov	r3, r2
 800c33e:	00db      	lsls	r3, r3, #3
 800c340:	1a9b      	subs	r3, r3, r2
 800c342:	009b      	lsls	r3, r3, #2
 800c344:	440b      	add	r3, r1
 800c346:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c34a:	2200      	movs	r2, #0
 800c34c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800c34e:	7bfa      	ldrb	r2, [r7, #15]
 800c350:	6879      	ldr	r1, [r7, #4]
 800c352:	4613      	mov	r3, r2
 800c354:	00db      	lsls	r3, r3, #3
 800c356:	1a9b      	subs	r3, r3, r2
 800c358:	009b      	lsls	r3, r3, #2
 800c35a:	440b      	add	r3, r1
 800c35c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800c360:	2200      	movs	r2, #0
 800c362:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c364:	7bfb      	ldrb	r3, [r7, #15]
 800c366:	3301      	adds	r3, #1
 800c368:	73fb      	strb	r3, [r7, #15]
 800c36a:	7bfa      	ldrb	r2, [r7, #15]
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	685b      	ldr	r3, [r3, #4]
 800c370:	429a      	cmp	r2, r3
 800c372:	d3b5      	bcc.n	800c2e0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	603b      	str	r3, [r7, #0]
 800c37a:	687e      	ldr	r6, [r7, #4]
 800c37c:	466d      	mov	r5, sp
 800c37e:	f106 0410 	add.w	r4, r6, #16
 800c382:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c384:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c386:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c388:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c38a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c38e:	e885 0003 	stmia.w	r5, {r0, r1}
 800c392:	1d33      	adds	r3, r6, #4
 800c394:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c396:	6838      	ldr	r0, [r7, #0]
 800c398:	f003 fa9e 	bl	800f8d8 <USB_DevInit>
 800c39c:	4603      	mov	r3, r0
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d005      	beq.n	800c3ae <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	2202      	movs	r2, #2
 800c3a6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800c3aa:	2301      	movs	r3, #1
 800c3ac:	e00d      	b.n	800c3ca <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	2201      	movs	r2, #1
 800c3ba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	f004 fae6 	bl	8010994 <USB_DevDisconnect>

  return HAL_OK;
 800c3c8:	2300      	movs	r3, #0
}
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	3714      	adds	r7, #20
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c3d2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800c3d2:	b580      	push	{r7, lr}
 800c3d4:	b084      	sub	sp, #16
 800c3d6:	af00      	add	r7, sp, #0
 800c3d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800c3e6:	2b01      	cmp	r3, #1
 800c3e8:	d101      	bne.n	800c3ee <HAL_PCD_Start+0x1c>
 800c3ea:	2302      	movs	r3, #2
 800c3ec:	e020      	b.n	800c430 <HAL_PCD_Start+0x5e>
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	2201      	movs	r2, #1
 800c3f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3fa:	2b01      	cmp	r3, #1
 800c3fc:	d109      	bne.n	800c412 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800c402:	2b01      	cmp	r3, #1
 800c404:	d005      	beq.n	800c412 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c40a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	4618      	mov	r0, r3
 800c418:	f003 fa12 	bl	800f840 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	4618      	mov	r0, r3
 800c422:	f004 fa96 	bl	8010952 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2200      	movs	r2, #0
 800c42a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800c42e:	2300      	movs	r3, #0
}
 800c430:	4618      	mov	r0, r3
 800c432:	3710      	adds	r7, #16
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}

0800c438 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800c438:	b590      	push	{r4, r7, lr}
 800c43a:	b08d      	sub	sp, #52	; 0x34
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c446:	6a3b      	ldr	r3, [r7, #32]
 800c448:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	4618      	mov	r0, r3
 800c450:	f004 fb54 	bl	8010afc <USB_GetMode>
 800c454:	4603      	mov	r3, r0
 800c456:	2b00      	cmp	r3, #0
 800c458:	f040 839d 	bne.w	800cb96 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	4618      	mov	r0, r3
 800c462:	f004 fab8 	bl	80109d6 <USB_ReadInterrupts>
 800c466:	4603      	mov	r3, r0
 800c468:	2b00      	cmp	r3, #0
 800c46a:	f000 8393 	beq.w	800cb94 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	4618      	mov	r0, r3
 800c474:	f004 faaf 	bl	80109d6 <USB_ReadInterrupts>
 800c478:	4603      	mov	r3, r0
 800c47a:	f003 0302 	and.w	r3, r3, #2
 800c47e:	2b02      	cmp	r3, #2
 800c480:	d107      	bne.n	800c492 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	695a      	ldr	r2, [r3, #20]
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	f002 0202 	and.w	r2, r2, #2
 800c490:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	4618      	mov	r0, r3
 800c498:	f004 fa9d 	bl	80109d6 <USB_ReadInterrupts>
 800c49c:	4603      	mov	r3, r0
 800c49e:	f003 0310 	and.w	r3, r3, #16
 800c4a2:	2b10      	cmp	r3, #16
 800c4a4:	d161      	bne.n	800c56a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	699a      	ldr	r2, [r3, #24]
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	f022 0210 	bic.w	r2, r2, #16
 800c4b4:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800c4b6:	6a3b      	ldr	r3, [r7, #32]
 800c4b8:	6a1b      	ldr	r3, [r3, #32]
 800c4ba:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800c4bc:	69bb      	ldr	r3, [r7, #24]
 800c4be:	f003 020f 	and.w	r2, r3, #15
 800c4c2:	4613      	mov	r3, r2
 800c4c4:	00db      	lsls	r3, r3, #3
 800c4c6:	1a9b      	subs	r3, r3, r2
 800c4c8:	009b      	lsls	r3, r3, #2
 800c4ca:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c4ce:	687a      	ldr	r2, [r7, #4]
 800c4d0:	4413      	add	r3, r2
 800c4d2:	3304      	adds	r3, #4
 800c4d4:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800c4d6:	69bb      	ldr	r3, [r7, #24]
 800c4d8:	0c5b      	lsrs	r3, r3, #17
 800c4da:	f003 030f 	and.w	r3, r3, #15
 800c4de:	2b02      	cmp	r3, #2
 800c4e0:	d124      	bne.n	800c52c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800c4e2:	69ba      	ldr	r2, [r7, #24]
 800c4e4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800c4e8:	4013      	ands	r3, r2
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d035      	beq.n	800c55a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c4ee:	697b      	ldr	r3, [r7, #20]
 800c4f0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800c4f2:	69bb      	ldr	r3, [r7, #24]
 800c4f4:	091b      	lsrs	r3, r3, #4
 800c4f6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c4f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c4fc:	b29b      	uxth	r3, r3
 800c4fe:	461a      	mov	r2, r3
 800c500:	6a38      	ldr	r0, [r7, #32]
 800c502:	f004 f903 	bl	801070c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c506:	697b      	ldr	r3, [r7, #20]
 800c508:	68da      	ldr	r2, [r3, #12]
 800c50a:	69bb      	ldr	r3, [r7, #24]
 800c50c:	091b      	lsrs	r3, r3, #4
 800c50e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c512:	441a      	add	r2, r3
 800c514:	697b      	ldr	r3, [r7, #20]
 800c516:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c518:	697b      	ldr	r3, [r7, #20]
 800c51a:	699a      	ldr	r2, [r3, #24]
 800c51c:	69bb      	ldr	r3, [r7, #24]
 800c51e:	091b      	lsrs	r3, r3, #4
 800c520:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c524:	441a      	add	r2, r3
 800c526:	697b      	ldr	r3, [r7, #20]
 800c528:	619a      	str	r2, [r3, #24]
 800c52a:	e016      	b.n	800c55a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800c52c:	69bb      	ldr	r3, [r7, #24]
 800c52e:	0c5b      	lsrs	r3, r3, #17
 800c530:	f003 030f 	and.w	r3, r3, #15
 800c534:	2b06      	cmp	r3, #6
 800c536:	d110      	bne.n	800c55a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c53e:	2208      	movs	r2, #8
 800c540:	4619      	mov	r1, r3
 800c542:	6a38      	ldr	r0, [r7, #32]
 800c544:	f004 f8e2 	bl	801070c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c548:	697b      	ldr	r3, [r7, #20]
 800c54a:	699a      	ldr	r2, [r3, #24]
 800c54c:	69bb      	ldr	r3, [r7, #24]
 800c54e:	091b      	lsrs	r3, r3, #4
 800c550:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c554:	441a      	add	r2, r3
 800c556:	697b      	ldr	r3, [r7, #20]
 800c558:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	699a      	ldr	r2, [r3, #24]
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	f042 0210 	orr.w	r2, r2, #16
 800c568:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	4618      	mov	r0, r3
 800c570:	f004 fa31 	bl	80109d6 <USB_ReadInterrupts>
 800c574:	4603      	mov	r3, r0
 800c576:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c57a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c57e:	d16e      	bne.n	800c65e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800c580:	2300      	movs	r3, #0
 800c582:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	4618      	mov	r0, r3
 800c58a:	f004 fa37 	bl	80109fc <USB_ReadDevAllOutEpInterrupt>
 800c58e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800c590:	e062      	b.n	800c658 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800c592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c594:	f003 0301 	and.w	r3, r3, #1
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d057      	beq.n	800c64c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5a2:	b2d2      	uxtb	r2, r2
 800c5a4:	4611      	mov	r1, r2
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	f004 fa5c 	bl	8010a64 <USB_ReadDevOutEPInterrupt>
 800c5ac:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800c5ae:	693b      	ldr	r3, [r7, #16]
 800c5b0:	f003 0301 	and.w	r3, r3, #1
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d00c      	beq.n	800c5d2 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800c5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ba:	015a      	lsls	r2, r3, #5
 800c5bc:	69fb      	ldr	r3, [r7, #28]
 800c5be:	4413      	add	r3, r2
 800c5c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5c4:	461a      	mov	r2, r3
 800c5c6:	2301      	movs	r3, #1
 800c5c8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800c5ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c5cc:	6878      	ldr	r0, [r7, #4]
 800c5ce:	f000 fdb1 	bl	800d134 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800c5d2:	693b      	ldr	r3, [r7, #16]
 800c5d4:	f003 0308 	and.w	r3, r3, #8
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d00c      	beq.n	800c5f6 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800c5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5de:	015a      	lsls	r2, r3, #5
 800c5e0:	69fb      	ldr	r3, [r7, #28]
 800c5e2:	4413      	add	r3, r2
 800c5e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5e8:	461a      	mov	r2, r3
 800c5ea:	2308      	movs	r3, #8
 800c5ec:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800c5ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c5f0:	6878      	ldr	r0, [r7, #4]
 800c5f2:	f000 feab 	bl	800d34c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800c5f6:	693b      	ldr	r3, [r7, #16]
 800c5f8:	f003 0310 	and.w	r3, r3, #16
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d008      	beq.n	800c612 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800c600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c602:	015a      	lsls	r2, r3, #5
 800c604:	69fb      	ldr	r3, [r7, #28]
 800c606:	4413      	add	r3, r2
 800c608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c60c:	461a      	mov	r2, r3
 800c60e:	2310      	movs	r3, #16
 800c610:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c612:	693b      	ldr	r3, [r7, #16]
 800c614:	f003 0320 	and.w	r3, r3, #32
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d008      	beq.n	800c62e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c61e:	015a      	lsls	r2, r3, #5
 800c620:	69fb      	ldr	r3, [r7, #28]
 800c622:	4413      	add	r3, r2
 800c624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c628:	461a      	mov	r2, r3
 800c62a:	2320      	movs	r3, #32
 800c62c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800c62e:	693b      	ldr	r3, [r7, #16]
 800c630:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c634:	2b00      	cmp	r3, #0
 800c636:	d009      	beq.n	800c64c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800c638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c63a:	015a      	lsls	r2, r3, #5
 800c63c:	69fb      	ldr	r3, [r7, #28]
 800c63e:	4413      	add	r3, r2
 800c640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c644:	461a      	mov	r2, r3
 800c646:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c64a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800c64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c64e:	3301      	adds	r3, #1
 800c650:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800c652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c654:	085b      	lsrs	r3, r3, #1
 800c656:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800c658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d199      	bne.n	800c592 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	4618      	mov	r0, r3
 800c664:	f004 f9b7 	bl	80109d6 <USB_ReadInterrupts>
 800c668:	4603      	mov	r3, r0
 800c66a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c66e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c672:	f040 80c0 	bne.w	800c7f6 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	4618      	mov	r0, r3
 800c67c:	f004 f9d8 	bl	8010a30 <USB_ReadDevAllInEpInterrupt>
 800c680:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800c682:	2300      	movs	r3, #0
 800c684:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800c686:	e0b2      	b.n	800c7ee <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800c688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c68a:	f003 0301 	and.w	r3, r3, #1
 800c68e:	2b00      	cmp	r3, #0
 800c690:	f000 80a7 	beq.w	800c7e2 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c69a:	b2d2      	uxtb	r2, r2
 800c69c:	4611      	mov	r1, r2
 800c69e:	4618      	mov	r0, r3
 800c6a0:	f004 f9fe 	bl	8010aa0 <USB_ReadDevInEPInterrupt>
 800c6a4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800c6a6:	693b      	ldr	r3, [r7, #16]
 800c6a8:	f003 0301 	and.w	r3, r3, #1
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d057      	beq.n	800c760 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c6b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6b2:	f003 030f 	and.w	r3, r3, #15
 800c6b6:	2201      	movs	r2, #1
 800c6b8:	fa02 f303 	lsl.w	r3, r2, r3
 800c6bc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c6be:	69fb      	ldr	r3, [r7, #28]
 800c6c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	43db      	mvns	r3, r3
 800c6ca:	69f9      	ldr	r1, [r7, #28]
 800c6cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c6d0:	4013      	ands	r3, r2
 800c6d2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800c6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6d6:	015a      	lsls	r2, r3, #5
 800c6d8:	69fb      	ldr	r3, [r7, #28]
 800c6da:	4413      	add	r3, r2
 800c6dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6e0:	461a      	mov	r2, r3
 800c6e2:	2301      	movs	r3, #1
 800c6e4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	691b      	ldr	r3, [r3, #16]
 800c6ea:	2b01      	cmp	r3, #1
 800c6ec:	d132      	bne.n	800c754 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800c6ee:	6879      	ldr	r1, [r7, #4]
 800c6f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6f2:	4613      	mov	r3, r2
 800c6f4:	00db      	lsls	r3, r3, #3
 800c6f6:	1a9b      	subs	r3, r3, r2
 800c6f8:	009b      	lsls	r3, r3, #2
 800c6fa:	440b      	add	r3, r1
 800c6fc:	3348      	adds	r3, #72	; 0x48
 800c6fe:	6819      	ldr	r1, [r3, #0]
 800c700:	6878      	ldr	r0, [r7, #4]
 800c702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c704:	4613      	mov	r3, r2
 800c706:	00db      	lsls	r3, r3, #3
 800c708:	1a9b      	subs	r3, r3, r2
 800c70a:	009b      	lsls	r3, r3, #2
 800c70c:	4403      	add	r3, r0
 800c70e:	3344      	adds	r3, #68	; 0x44
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	4419      	add	r1, r3
 800c714:	6878      	ldr	r0, [r7, #4]
 800c716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c718:	4613      	mov	r3, r2
 800c71a:	00db      	lsls	r3, r3, #3
 800c71c:	1a9b      	subs	r3, r3, r2
 800c71e:	009b      	lsls	r3, r3, #2
 800c720:	4403      	add	r3, r0
 800c722:	3348      	adds	r3, #72	; 0x48
 800c724:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800c726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d113      	bne.n	800c754 <HAL_PCD_IRQHandler+0x31c>
 800c72c:	6879      	ldr	r1, [r7, #4]
 800c72e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c730:	4613      	mov	r3, r2
 800c732:	00db      	lsls	r3, r3, #3
 800c734:	1a9b      	subs	r3, r3, r2
 800c736:	009b      	lsls	r3, r3, #2
 800c738:	440b      	add	r3, r1
 800c73a:	3350      	adds	r3, #80	; 0x50
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d108      	bne.n	800c754 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	6818      	ldr	r0, [r3, #0]
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c74c:	461a      	mov	r2, r3
 800c74e:	2101      	movs	r1, #1
 800c750:	f004 fa06 	bl	8010b60 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800c754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c756:	b2db      	uxtb	r3, r3
 800c758:	4619      	mov	r1, r3
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f009 f813 	bl	8015786 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800c760:	693b      	ldr	r3, [r7, #16]
 800c762:	f003 0308 	and.w	r3, r3, #8
 800c766:	2b00      	cmp	r3, #0
 800c768:	d008      	beq.n	800c77c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800c76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c76c:	015a      	lsls	r2, r3, #5
 800c76e:	69fb      	ldr	r3, [r7, #28]
 800c770:	4413      	add	r3, r2
 800c772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c776:	461a      	mov	r2, r3
 800c778:	2308      	movs	r3, #8
 800c77a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800c77c:	693b      	ldr	r3, [r7, #16]
 800c77e:	f003 0310 	and.w	r3, r3, #16
 800c782:	2b00      	cmp	r3, #0
 800c784:	d008      	beq.n	800c798 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800c786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c788:	015a      	lsls	r2, r3, #5
 800c78a:	69fb      	ldr	r3, [r7, #28]
 800c78c:	4413      	add	r3, r2
 800c78e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c792:	461a      	mov	r2, r3
 800c794:	2310      	movs	r3, #16
 800c796:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800c798:	693b      	ldr	r3, [r7, #16]
 800c79a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d008      	beq.n	800c7b4 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800c7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7a4:	015a      	lsls	r2, r3, #5
 800c7a6:	69fb      	ldr	r3, [r7, #28]
 800c7a8:	4413      	add	r3, r2
 800c7aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7ae:	461a      	mov	r2, r3
 800c7b0:	2340      	movs	r3, #64	; 0x40
 800c7b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800c7b4:	693b      	ldr	r3, [r7, #16]
 800c7b6:	f003 0302 	and.w	r3, r3, #2
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d008      	beq.n	800c7d0 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800c7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7c0:	015a      	lsls	r2, r3, #5
 800c7c2:	69fb      	ldr	r3, [r7, #28]
 800c7c4:	4413      	add	r3, r2
 800c7c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7ca:	461a      	mov	r2, r3
 800c7cc:	2302      	movs	r3, #2
 800c7ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800c7d0:	693b      	ldr	r3, [r7, #16]
 800c7d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d003      	beq.n	800c7e2 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800c7da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c7dc:	6878      	ldr	r0, [r7, #4]
 800c7de:	f000 fc1b 	bl	800d018 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800c7e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7e4:	3301      	adds	r3, #1
 800c7e6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800c7e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ea:	085b      	lsrs	r3, r3, #1
 800c7ec:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800c7ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	f47f af49 	bne.w	800c688 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	f004 f8eb 	bl	80109d6 <USB_ReadInterrupts>
 800c800:	4603      	mov	r3, r0
 800c802:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c806:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c80a:	d122      	bne.n	800c852 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c80c:	69fb      	ldr	r3, [r7, #28]
 800c80e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c812:	685b      	ldr	r3, [r3, #4]
 800c814:	69fa      	ldr	r2, [r7, #28]
 800c816:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c81a:	f023 0301 	bic.w	r3, r3, #1
 800c81e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800c826:	2b01      	cmp	r3, #1
 800c828:	d108      	bne.n	800c83c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	2200      	movs	r2, #0
 800c82e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800c832:	2100      	movs	r1, #0
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f000 fe27 	bl	800d488 <HAL_PCDEx_LPM_Callback>
 800c83a:	e002      	b.n	800c842 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800c83c:	6878      	ldr	r0, [r7, #4]
 800c83e:	f009 f819 	bl	8015874 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	695a      	ldr	r2, [r3, #20]
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800c850:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	4618      	mov	r0, r3
 800c858:	f004 f8bd 	bl	80109d6 <USB_ReadInterrupts>
 800c85c:	4603      	mov	r3, r0
 800c85e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c862:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c866:	d112      	bne.n	800c88e <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800c868:	69fb      	ldr	r3, [r7, #28]
 800c86a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c86e:	689b      	ldr	r3, [r3, #8]
 800c870:	f003 0301 	and.w	r3, r3, #1
 800c874:	2b01      	cmp	r3, #1
 800c876:	d102      	bne.n	800c87e <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800c878:	6878      	ldr	r0, [r7, #4]
 800c87a:	f008 ffd5 	bl	8015828 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	695a      	ldr	r2, [r3, #20]
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800c88c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	4618      	mov	r0, r3
 800c894:	f004 f89f 	bl	80109d6 <USB_ReadInterrupts>
 800c898:	4603      	mov	r3, r0
 800c89a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c89e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c8a2:	f040 80c7 	bne.w	800ca34 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c8a6:	69fb      	ldr	r3, [r7, #28]
 800c8a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8ac:	685b      	ldr	r3, [r3, #4]
 800c8ae:	69fa      	ldr	r2, [r7, #28]
 800c8b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c8b4:	f023 0301 	bic.w	r3, r3, #1
 800c8b8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	2110      	movs	r1, #16
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	f003 f96d 	bl	800fba0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c8ca:	e056      	b.n	800c97a <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800c8cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ce:	015a      	lsls	r2, r3, #5
 800c8d0:	69fb      	ldr	r3, [r7, #28]
 800c8d2:	4413      	add	r3, r2
 800c8d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8d8:	461a      	mov	r2, r3
 800c8da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c8de:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8e2:	015a      	lsls	r2, r3, #5
 800c8e4:	69fb      	ldr	r3, [r7, #28]
 800c8e6:	4413      	add	r3, r2
 800c8e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8f0:	0151      	lsls	r1, r2, #5
 800c8f2:	69fa      	ldr	r2, [r7, #28]
 800c8f4:	440a      	add	r2, r1
 800c8f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c8fe:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c902:	015a      	lsls	r2, r3, #5
 800c904:	69fb      	ldr	r3, [r7, #28]
 800c906:	4413      	add	r3, r2
 800c908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c910:	0151      	lsls	r1, r2, #5
 800c912:	69fa      	ldr	r2, [r7, #28]
 800c914:	440a      	add	r2, r1
 800c916:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c91a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c91e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800c920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c922:	015a      	lsls	r2, r3, #5
 800c924:	69fb      	ldr	r3, [r7, #28]
 800c926:	4413      	add	r3, r2
 800c928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c92c:	461a      	mov	r2, r3
 800c92e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c932:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c936:	015a      	lsls	r2, r3, #5
 800c938:	69fb      	ldr	r3, [r7, #28]
 800c93a:	4413      	add	r3, r2
 800c93c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c944:	0151      	lsls	r1, r2, #5
 800c946:	69fa      	ldr	r2, [r7, #28]
 800c948:	440a      	add	r2, r1
 800c94a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c94e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c952:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c956:	015a      	lsls	r2, r3, #5
 800c958:	69fb      	ldr	r3, [r7, #28]
 800c95a:	4413      	add	r3, r2
 800c95c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c964:	0151      	lsls	r1, r2, #5
 800c966:	69fa      	ldr	r2, [r7, #28]
 800c968:	440a      	add	r2, r1
 800c96a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c96e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c972:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c976:	3301      	adds	r3, #1
 800c978:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	685b      	ldr	r3, [r3, #4]
 800c97e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c980:	429a      	cmp	r2, r3
 800c982:	d3a3      	bcc.n	800c8cc <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800c984:	69fb      	ldr	r3, [r7, #28]
 800c986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c98a:	69db      	ldr	r3, [r3, #28]
 800c98c:	69fa      	ldr	r2, [r7, #28]
 800c98e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c992:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800c996:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d016      	beq.n	800c9ce <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800c9a0:	69fb      	ldr	r3, [r7, #28]
 800c9a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c9aa:	69fa      	ldr	r2, [r7, #28]
 800c9ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c9b0:	f043 030b 	orr.w	r3, r3, #11
 800c9b4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800c9b8:	69fb      	ldr	r3, [r7, #28]
 800c9ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9c0:	69fa      	ldr	r2, [r7, #28]
 800c9c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c9c6:	f043 030b 	orr.w	r3, r3, #11
 800c9ca:	6453      	str	r3, [r2, #68]	; 0x44
 800c9cc:	e015      	b.n	800c9fa <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800c9ce:	69fb      	ldr	r3, [r7, #28]
 800c9d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9d4:	695b      	ldr	r3, [r3, #20]
 800c9d6:	69fa      	ldr	r2, [r7, #28]
 800c9d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c9dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c9e0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800c9e4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800c9e6:	69fb      	ldr	r3, [r7, #28]
 800c9e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9ec:	691b      	ldr	r3, [r3, #16]
 800c9ee:	69fa      	ldr	r2, [r7, #28]
 800c9f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c9f4:	f043 030b 	orr.w	r3, r3, #11
 800c9f8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800c9fa:	69fb      	ldr	r3, [r7, #28]
 800c9fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	69fa      	ldr	r2, [r7, #28]
 800ca04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ca08:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ca0c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	6818      	ldr	r0, [r3, #0]
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	691b      	ldr	r3, [r3, #16]
 800ca16:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800ca1e:	461a      	mov	r2, r3
 800ca20:	f004 f89e 	bl	8010b60 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	695a      	ldr	r2, [r3, #20]
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800ca32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	4618      	mov	r0, r3
 800ca3a:	f003 ffcc 	bl	80109d6 <USB_ReadInterrupts>
 800ca3e:	4603      	mov	r3, r0
 800ca40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ca44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca48:	d124      	bne.n	800ca94 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	4618      	mov	r0, r3
 800ca50:	f004 f862 	bl	8010b18 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	4618      	mov	r0, r3
 800ca5a:	f003 f902 	bl	800fc62 <USB_GetDevSpeed>
 800ca5e:	4603      	mov	r3, r0
 800ca60:	461a      	mov	r2, r3
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681c      	ldr	r4, [r3, #0]
 800ca6a:	f001 f951 	bl	800dd10 <HAL_RCC_GetHCLKFreq>
 800ca6e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800ca74:	b2db      	uxtb	r3, r3
 800ca76:	461a      	mov	r2, r3
 800ca78:	4620      	mov	r0, r4
 800ca7a:	f002 fe3f 	bl	800f6fc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800ca7e:	6878      	ldr	r0, [r7, #4]
 800ca80:	f008 fea9 	bl	80157d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	695a      	ldr	r2, [r3, #20]
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800ca92:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	4618      	mov	r0, r3
 800ca9a:	f003 ff9c 	bl	80109d6 <USB_ReadInterrupts>
 800ca9e:	4603      	mov	r3, r0
 800caa0:	f003 0308 	and.w	r3, r3, #8
 800caa4:	2b08      	cmp	r3, #8
 800caa6:	d10a      	bne.n	800cabe <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800caa8:	6878      	ldr	r0, [r7, #4]
 800caaa:	f008 fe86 	bl	80157ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	695a      	ldr	r2, [r3, #20]
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	f002 0208 	and.w	r2, r2, #8
 800cabc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	4618      	mov	r0, r3
 800cac4:	f003 ff87 	bl	80109d6 <USB_ReadInterrupts>
 800cac8:	4603      	mov	r3, r0
 800caca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cace:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cad2:	d10f      	bne.n	800caf4 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800cad4:	2300      	movs	r3, #0
 800cad6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800cad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cada:	b2db      	uxtb	r3, r3
 800cadc:	4619      	mov	r1, r3
 800cade:	6878      	ldr	r0, [r7, #4]
 800cae0:	f008 fee8 	bl	80158b4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	695a      	ldr	r2, [r3, #20]
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800caf2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	4618      	mov	r0, r3
 800cafa:	f003 ff6c 	bl	80109d6 <USB_ReadInterrupts>
 800cafe:	4603      	mov	r3, r0
 800cb00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cb04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cb08:	d10f      	bne.n	800cb2a <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800cb0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb10:	b2db      	uxtb	r3, r3
 800cb12:	4619      	mov	r1, r3
 800cb14:	6878      	ldr	r0, [r7, #4]
 800cb16:	f008 febb 	bl	8015890 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	695a      	ldr	r2, [r3, #20]
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800cb28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	4618      	mov	r0, r3
 800cb30:	f003 ff51 	bl	80109d6 <USB_ReadInterrupts>
 800cb34:	4603      	mov	r3, r0
 800cb36:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cb3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb3e:	d10a      	bne.n	800cb56 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800cb40:	6878      	ldr	r0, [r7, #4]
 800cb42:	f008 fec9 	bl	80158d8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	695a      	ldr	r2, [r3, #20]
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800cb54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	f003 ff3b 	bl	80109d6 <USB_ReadInterrupts>
 800cb60:	4603      	mov	r3, r0
 800cb62:	f003 0304 	and.w	r3, r3, #4
 800cb66:	2b04      	cmp	r3, #4
 800cb68:	d115      	bne.n	800cb96 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	685b      	ldr	r3, [r3, #4]
 800cb70:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800cb72:	69bb      	ldr	r3, [r7, #24]
 800cb74:	f003 0304 	and.w	r3, r3, #4
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d002      	beq.n	800cb82 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	f008 feb9 	bl	80158f4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	6859      	ldr	r1, [r3, #4]
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	69ba      	ldr	r2, [r7, #24]
 800cb8e:	430a      	orrs	r2, r1
 800cb90:	605a      	str	r2, [r3, #4]
 800cb92:	e000      	b.n	800cb96 <HAL_PCD_IRQHandler+0x75e>
      return;
 800cb94:	bf00      	nop
    }
  }
}
 800cb96:	3734      	adds	r7, #52	; 0x34
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	bd90      	pop	{r4, r7, pc}

0800cb9c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b082      	sub	sp, #8
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
 800cba4:	460b      	mov	r3, r1
 800cba6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800cbae:	2b01      	cmp	r3, #1
 800cbb0:	d101      	bne.n	800cbb6 <HAL_PCD_SetAddress+0x1a>
 800cbb2:	2302      	movs	r3, #2
 800cbb4:	e013      	b.n	800cbde <HAL_PCD_SetAddress+0x42>
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	2201      	movs	r2, #1
 800cbba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	78fa      	ldrb	r2, [r7, #3]
 800cbc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	78fa      	ldrb	r2, [r7, #3]
 800cbcc:	4611      	mov	r1, r2
 800cbce:	4618      	mov	r0, r3
 800cbd0:	f003 fe99 	bl	8010906 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800cbdc:	2300      	movs	r3, #0
}
 800cbde:	4618      	mov	r0, r3
 800cbe0:	3708      	adds	r7, #8
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bd80      	pop	{r7, pc}

0800cbe6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800cbe6:	b580      	push	{r7, lr}
 800cbe8:	b084      	sub	sp, #16
 800cbea:	af00      	add	r7, sp, #0
 800cbec:	6078      	str	r0, [r7, #4]
 800cbee:	4608      	mov	r0, r1
 800cbf0:	4611      	mov	r1, r2
 800cbf2:	461a      	mov	r2, r3
 800cbf4:	4603      	mov	r3, r0
 800cbf6:	70fb      	strb	r3, [r7, #3]
 800cbf8:	460b      	mov	r3, r1
 800cbfa:	803b      	strh	r3, [r7, #0]
 800cbfc:	4613      	mov	r3, r2
 800cbfe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800cc00:	2300      	movs	r3, #0
 800cc02:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800cc04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	da0f      	bge.n	800cc2c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cc0c:	78fb      	ldrb	r3, [r7, #3]
 800cc0e:	f003 020f 	and.w	r2, r3, #15
 800cc12:	4613      	mov	r3, r2
 800cc14:	00db      	lsls	r3, r3, #3
 800cc16:	1a9b      	subs	r3, r3, r2
 800cc18:	009b      	lsls	r3, r3, #2
 800cc1a:	3338      	adds	r3, #56	; 0x38
 800cc1c:	687a      	ldr	r2, [r7, #4]
 800cc1e:	4413      	add	r3, r2
 800cc20:	3304      	adds	r3, #4
 800cc22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	2201      	movs	r2, #1
 800cc28:	705a      	strb	r2, [r3, #1]
 800cc2a:	e00f      	b.n	800cc4c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cc2c:	78fb      	ldrb	r3, [r7, #3]
 800cc2e:	f003 020f 	and.w	r2, r3, #15
 800cc32:	4613      	mov	r3, r2
 800cc34:	00db      	lsls	r3, r3, #3
 800cc36:	1a9b      	subs	r3, r3, r2
 800cc38:	009b      	lsls	r3, r3, #2
 800cc3a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800cc3e:	687a      	ldr	r2, [r7, #4]
 800cc40:	4413      	add	r3, r2
 800cc42:	3304      	adds	r3, #4
 800cc44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	2200      	movs	r2, #0
 800cc4a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800cc4c:	78fb      	ldrb	r3, [r7, #3]
 800cc4e:	f003 030f 	and.w	r3, r3, #15
 800cc52:	b2da      	uxtb	r2, r3
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800cc58:	883a      	ldrh	r2, [r7, #0]
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	78ba      	ldrb	r2, [r7, #2]
 800cc62:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	785b      	ldrb	r3, [r3, #1]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d004      	beq.n	800cc76 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	781b      	ldrb	r3, [r3, #0]
 800cc70:	b29a      	uxth	r2, r3
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800cc76:	78bb      	ldrb	r3, [r7, #2]
 800cc78:	2b02      	cmp	r3, #2
 800cc7a:	d102      	bne.n	800cc82 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	2200      	movs	r2, #0
 800cc80:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800cc88:	2b01      	cmp	r3, #1
 800cc8a:	d101      	bne.n	800cc90 <HAL_PCD_EP_Open+0xaa>
 800cc8c:	2302      	movs	r3, #2
 800cc8e:	e00e      	b.n	800ccae <HAL_PCD_EP_Open+0xc8>
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	2201      	movs	r2, #1
 800cc94:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	68f9      	ldr	r1, [r7, #12]
 800cc9e:	4618      	mov	r0, r3
 800cca0:	f003 f804 	bl	800fcac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2200      	movs	r2, #0
 800cca8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800ccac:	7afb      	ldrb	r3, [r7, #11]
}
 800ccae:	4618      	mov	r0, r3
 800ccb0:	3710      	adds	r7, #16
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	bd80      	pop	{r7, pc}

0800ccb6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ccb6:	b580      	push	{r7, lr}
 800ccb8:	b084      	sub	sp, #16
 800ccba:	af00      	add	r7, sp, #0
 800ccbc:	6078      	str	r0, [r7, #4]
 800ccbe:	460b      	mov	r3, r1
 800ccc0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800ccc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	da0f      	bge.n	800ccea <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ccca:	78fb      	ldrb	r3, [r7, #3]
 800cccc:	f003 020f 	and.w	r2, r3, #15
 800ccd0:	4613      	mov	r3, r2
 800ccd2:	00db      	lsls	r3, r3, #3
 800ccd4:	1a9b      	subs	r3, r3, r2
 800ccd6:	009b      	lsls	r3, r3, #2
 800ccd8:	3338      	adds	r3, #56	; 0x38
 800ccda:	687a      	ldr	r2, [r7, #4]
 800ccdc:	4413      	add	r3, r2
 800ccde:	3304      	adds	r3, #4
 800cce0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	2201      	movs	r2, #1
 800cce6:	705a      	strb	r2, [r3, #1]
 800cce8:	e00f      	b.n	800cd0a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ccea:	78fb      	ldrb	r3, [r7, #3]
 800ccec:	f003 020f 	and.w	r2, r3, #15
 800ccf0:	4613      	mov	r3, r2
 800ccf2:	00db      	lsls	r3, r3, #3
 800ccf4:	1a9b      	subs	r3, r3, r2
 800ccf6:	009b      	lsls	r3, r3, #2
 800ccf8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ccfc:	687a      	ldr	r2, [r7, #4]
 800ccfe:	4413      	add	r3, r2
 800cd00:	3304      	adds	r3, #4
 800cd02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	2200      	movs	r2, #0
 800cd08:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800cd0a:	78fb      	ldrb	r3, [r7, #3]
 800cd0c:	f003 030f 	and.w	r3, r3, #15
 800cd10:	b2da      	uxtb	r2, r3
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800cd1c:	2b01      	cmp	r3, #1
 800cd1e:	d101      	bne.n	800cd24 <HAL_PCD_EP_Close+0x6e>
 800cd20:	2302      	movs	r3, #2
 800cd22:	e00e      	b.n	800cd42 <HAL_PCD_EP_Close+0x8c>
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	2201      	movs	r2, #1
 800cd28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	68f9      	ldr	r1, [r7, #12]
 800cd32:	4618      	mov	r0, r3
 800cd34:	f003 f842 	bl	800fdbc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800cd40:	2300      	movs	r3, #0
}
 800cd42:	4618      	mov	r0, r3
 800cd44:	3710      	adds	r7, #16
 800cd46:	46bd      	mov	sp, r7
 800cd48:	bd80      	pop	{r7, pc}

0800cd4a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800cd4a:	b580      	push	{r7, lr}
 800cd4c:	b086      	sub	sp, #24
 800cd4e:	af00      	add	r7, sp, #0
 800cd50:	60f8      	str	r0, [r7, #12]
 800cd52:	607a      	str	r2, [r7, #4]
 800cd54:	603b      	str	r3, [r7, #0]
 800cd56:	460b      	mov	r3, r1
 800cd58:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cd5a:	7afb      	ldrb	r3, [r7, #11]
 800cd5c:	f003 020f 	and.w	r2, r3, #15
 800cd60:	4613      	mov	r3, r2
 800cd62:	00db      	lsls	r3, r3, #3
 800cd64:	1a9b      	subs	r3, r3, r2
 800cd66:	009b      	lsls	r3, r3, #2
 800cd68:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800cd6c:	68fa      	ldr	r2, [r7, #12]
 800cd6e:	4413      	add	r3, r2
 800cd70:	3304      	adds	r3, #4
 800cd72:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800cd74:	697b      	ldr	r3, [r7, #20]
 800cd76:	687a      	ldr	r2, [r7, #4]
 800cd78:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800cd7a:	697b      	ldr	r3, [r7, #20]
 800cd7c:	683a      	ldr	r2, [r7, #0]
 800cd7e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800cd80:	697b      	ldr	r3, [r7, #20]
 800cd82:	2200      	movs	r2, #0
 800cd84:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800cd86:	697b      	ldr	r3, [r7, #20]
 800cd88:	2200      	movs	r2, #0
 800cd8a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cd8c:	7afb      	ldrb	r3, [r7, #11]
 800cd8e:	f003 030f 	and.w	r3, r3, #15
 800cd92:	b2da      	uxtb	r2, r3
 800cd94:	697b      	ldr	r3, [r7, #20]
 800cd96:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	691b      	ldr	r3, [r3, #16]
 800cd9c:	2b01      	cmp	r3, #1
 800cd9e:	d102      	bne.n	800cda6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800cda0:	687a      	ldr	r2, [r7, #4]
 800cda2:	697b      	ldr	r3, [r7, #20]
 800cda4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800cda6:	7afb      	ldrb	r3, [r7, #11]
 800cda8:	f003 030f 	and.w	r3, r3, #15
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d109      	bne.n	800cdc4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	6818      	ldr	r0, [r3, #0]
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	691b      	ldr	r3, [r3, #16]
 800cdb8:	b2db      	uxtb	r3, r3
 800cdba:	461a      	mov	r2, r3
 800cdbc:	6979      	ldr	r1, [r7, #20]
 800cdbe:	f003 fb1d 	bl	80103fc <USB_EP0StartXfer>
 800cdc2:	e008      	b.n	800cdd6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	6818      	ldr	r0, [r3, #0]
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	691b      	ldr	r3, [r3, #16]
 800cdcc:	b2db      	uxtb	r3, r3
 800cdce:	461a      	mov	r2, r3
 800cdd0:	6979      	ldr	r1, [r7, #20]
 800cdd2:	f003 f8cf 	bl	800ff74 <USB_EPStartXfer>
  }

  return HAL_OK;
 800cdd6:	2300      	movs	r3, #0
}
 800cdd8:	4618      	mov	r0, r3
 800cdda:	3718      	adds	r7, #24
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bd80      	pop	{r7, pc}

0800cde0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cde0:	b480      	push	{r7}
 800cde2:	b083      	sub	sp, #12
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
 800cde8:	460b      	mov	r3, r1
 800cdea:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800cdec:	78fb      	ldrb	r3, [r7, #3]
 800cdee:	f003 020f 	and.w	r2, r3, #15
 800cdf2:	6879      	ldr	r1, [r7, #4]
 800cdf4:	4613      	mov	r3, r2
 800cdf6:	00db      	lsls	r3, r3, #3
 800cdf8:	1a9b      	subs	r3, r3, r2
 800cdfa:	009b      	lsls	r3, r3, #2
 800cdfc:	440b      	add	r3, r1
 800cdfe:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800ce02:	681b      	ldr	r3, [r3, #0]
}
 800ce04:	4618      	mov	r0, r3
 800ce06:	370c      	adds	r7, #12
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0e:	4770      	bx	lr

0800ce10 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b086      	sub	sp, #24
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	60f8      	str	r0, [r7, #12]
 800ce18:	607a      	str	r2, [r7, #4]
 800ce1a:	603b      	str	r3, [r7, #0]
 800ce1c:	460b      	mov	r3, r1
 800ce1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ce20:	7afb      	ldrb	r3, [r7, #11]
 800ce22:	f003 020f 	and.w	r2, r3, #15
 800ce26:	4613      	mov	r3, r2
 800ce28:	00db      	lsls	r3, r3, #3
 800ce2a:	1a9b      	subs	r3, r3, r2
 800ce2c:	009b      	lsls	r3, r3, #2
 800ce2e:	3338      	adds	r3, #56	; 0x38
 800ce30:	68fa      	ldr	r2, [r7, #12]
 800ce32:	4413      	add	r3, r2
 800ce34:	3304      	adds	r3, #4
 800ce36:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ce38:	697b      	ldr	r3, [r7, #20]
 800ce3a:	687a      	ldr	r2, [r7, #4]
 800ce3c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800ce3e:	697b      	ldr	r3, [r7, #20]
 800ce40:	683a      	ldr	r2, [r7, #0]
 800ce42:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800ce44:	697b      	ldr	r3, [r7, #20]
 800ce46:	2200      	movs	r2, #0
 800ce48:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800ce4a:	697b      	ldr	r3, [r7, #20]
 800ce4c:	2201      	movs	r2, #1
 800ce4e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ce50:	7afb      	ldrb	r3, [r7, #11]
 800ce52:	f003 030f 	and.w	r3, r3, #15
 800ce56:	b2da      	uxtb	r2, r3
 800ce58:	697b      	ldr	r3, [r7, #20]
 800ce5a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	691b      	ldr	r3, [r3, #16]
 800ce60:	2b01      	cmp	r3, #1
 800ce62:	d102      	bne.n	800ce6a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800ce64:	687a      	ldr	r2, [r7, #4]
 800ce66:	697b      	ldr	r3, [r7, #20]
 800ce68:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ce6a:	7afb      	ldrb	r3, [r7, #11]
 800ce6c:	f003 030f 	and.w	r3, r3, #15
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d109      	bne.n	800ce88 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	6818      	ldr	r0, [r3, #0]
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	691b      	ldr	r3, [r3, #16]
 800ce7c:	b2db      	uxtb	r3, r3
 800ce7e:	461a      	mov	r2, r3
 800ce80:	6979      	ldr	r1, [r7, #20]
 800ce82:	f003 fabb 	bl	80103fc <USB_EP0StartXfer>
 800ce86:	e008      	b.n	800ce9a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	6818      	ldr	r0, [r3, #0]
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	691b      	ldr	r3, [r3, #16]
 800ce90:	b2db      	uxtb	r3, r3
 800ce92:	461a      	mov	r2, r3
 800ce94:	6979      	ldr	r1, [r7, #20]
 800ce96:	f003 f86d 	bl	800ff74 <USB_EPStartXfer>
  }

  return HAL_OK;
 800ce9a:	2300      	movs	r3, #0
}
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	3718      	adds	r7, #24
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd80      	pop	{r7, pc}

0800cea4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b084      	sub	sp, #16
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
 800ceac:	460b      	mov	r3, r1
 800ceae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800ceb0:	78fb      	ldrb	r3, [r7, #3]
 800ceb2:	f003 020f 	and.w	r2, r3, #15
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	685b      	ldr	r3, [r3, #4]
 800ceba:	429a      	cmp	r2, r3
 800cebc:	d901      	bls.n	800cec2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800cebe:	2301      	movs	r3, #1
 800cec0:	e050      	b.n	800cf64 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800cec2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	da0f      	bge.n	800ceea <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ceca:	78fb      	ldrb	r3, [r7, #3]
 800cecc:	f003 020f 	and.w	r2, r3, #15
 800ced0:	4613      	mov	r3, r2
 800ced2:	00db      	lsls	r3, r3, #3
 800ced4:	1a9b      	subs	r3, r3, r2
 800ced6:	009b      	lsls	r3, r3, #2
 800ced8:	3338      	adds	r3, #56	; 0x38
 800ceda:	687a      	ldr	r2, [r7, #4]
 800cedc:	4413      	add	r3, r2
 800cede:	3304      	adds	r3, #4
 800cee0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	2201      	movs	r2, #1
 800cee6:	705a      	strb	r2, [r3, #1]
 800cee8:	e00d      	b.n	800cf06 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800ceea:	78fa      	ldrb	r2, [r7, #3]
 800ceec:	4613      	mov	r3, r2
 800ceee:	00db      	lsls	r3, r3, #3
 800cef0:	1a9b      	subs	r3, r3, r2
 800cef2:	009b      	lsls	r3, r3, #2
 800cef4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800cef8:	687a      	ldr	r2, [r7, #4]
 800cefa:	4413      	add	r3, r2
 800cefc:	3304      	adds	r3, #4
 800cefe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	2200      	movs	r2, #0
 800cf04:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	2201      	movs	r2, #1
 800cf0a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cf0c:	78fb      	ldrb	r3, [r7, #3]
 800cf0e:	f003 030f 	and.w	r3, r3, #15
 800cf12:	b2da      	uxtb	r2, r3
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800cf1e:	2b01      	cmp	r3, #1
 800cf20:	d101      	bne.n	800cf26 <HAL_PCD_EP_SetStall+0x82>
 800cf22:	2302      	movs	r3, #2
 800cf24:	e01e      	b.n	800cf64 <HAL_PCD_EP_SetStall+0xc0>
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	2201      	movs	r2, #1
 800cf2a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	68f9      	ldr	r1, [r7, #12]
 800cf34:	4618      	mov	r0, r3
 800cf36:	f003 fc12 	bl	801075e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800cf3a:	78fb      	ldrb	r3, [r7, #3]
 800cf3c:	f003 030f 	and.w	r3, r3, #15
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d10a      	bne.n	800cf5a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	6818      	ldr	r0, [r3, #0]
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	691b      	ldr	r3, [r3, #16]
 800cf4c:	b2d9      	uxtb	r1, r3
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800cf54:	461a      	mov	r2, r3
 800cf56:	f003 fe03 	bl	8010b60 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800cf62:	2300      	movs	r3, #0
}
 800cf64:	4618      	mov	r0, r3
 800cf66:	3710      	adds	r7, #16
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}

0800cf6c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b084      	sub	sp, #16
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
 800cf74:	460b      	mov	r3, r1
 800cf76:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800cf78:	78fb      	ldrb	r3, [r7, #3]
 800cf7a:	f003 020f 	and.w	r2, r3, #15
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	685b      	ldr	r3, [r3, #4]
 800cf82:	429a      	cmp	r2, r3
 800cf84:	d901      	bls.n	800cf8a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800cf86:	2301      	movs	r3, #1
 800cf88:	e042      	b.n	800d010 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800cf8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	da0f      	bge.n	800cfb2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cf92:	78fb      	ldrb	r3, [r7, #3]
 800cf94:	f003 020f 	and.w	r2, r3, #15
 800cf98:	4613      	mov	r3, r2
 800cf9a:	00db      	lsls	r3, r3, #3
 800cf9c:	1a9b      	subs	r3, r3, r2
 800cf9e:	009b      	lsls	r3, r3, #2
 800cfa0:	3338      	adds	r3, #56	; 0x38
 800cfa2:	687a      	ldr	r2, [r7, #4]
 800cfa4:	4413      	add	r3, r2
 800cfa6:	3304      	adds	r3, #4
 800cfa8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	2201      	movs	r2, #1
 800cfae:	705a      	strb	r2, [r3, #1]
 800cfb0:	e00f      	b.n	800cfd2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cfb2:	78fb      	ldrb	r3, [r7, #3]
 800cfb4:	f003 020f 	and.w	r2, r3, #15
 800cfb8:	4613      	mov	r3, r2
 800cfba:	00db      	lsls	r3, r3, #3
 800cfbc:	1a9b      	subs	r3, r3, r2
 800cfbe:	009b      	lsls	r3, r3, #2
 800cfc0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800cfc4:	687a      	ldr	r2, [r7, #4]
 800cfc6:	4413      	add	r3, r2
 800cfc8:	3304      	adds	r3, #4
 800cfca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	2200      	movs	r2, #0
 800cfd0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cfd8:	78fb      	ldrb	r3, [r7, #3]
 800cfda:	f003 030f 	and.w	r3, r3, #15
 800cfde:	b2da      	uxtb	r2, r3
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800cfea:	2b01      	cmp	r3, #1
 800cfec:	d101      	bne.n	800cff2 <HAL_PCD_EP_ClrStall+0x86>
 800cfee:	2302      	movs	r3, #2
 800cff0:	e00e      	b.n	800d010 <HAL_PCD_EP_ClrStall+0xa4>
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	2201      	movs	r2, #1
 800cff6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	68f9      	ldr	r1, [r7, #12]
 800d000:	4618      	mov	r0, r3
 800d002:	f003 fc1a 	bl	801083a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	2200      	movs	r2, #0
 800d00a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800d00e:	2300      	movs	r3, #0
}
 800d010:	4618      	mov	r0, r3
 800d012:	3710      	adds	r7, #16
 800d014:	46bd      	mov	sp, r7
 800d016:	bd80      	pop	{r7, pc}

0800d018 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	b08a      	sub	sp, #40	; 0x28
 800d01c:	af02      	add	r7, sp, #8
 800d01e:	6078      	str	r0, [r7, #4]
 800d020:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d028:	697b      	ldr	r3, [r7, #20]
 800d02a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800d02c:	683a      	ldr	r2, [r7, #0]
 800d02e:	4613      	mov	r3, r2
 800d030:	00db      	lsls	r3, r3, #3
 800d032:	1a9b      	subs	r3, r3, r2
 800d034:	009b      	lsls	r3, r3, #2
 800d036:	3338      	adds	r3, #56	; 0x38
 800d038:	687a      	ldr	r2, [r7, #4]
 800d03a:	4413      	add	r3, r2
 800d03c:	3304      	adds	r3, #4
 800d03e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	699a      	ldr	r2, [r3, #24]
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	695b      	ldr	r3, [r3, #20]
 800d048:	429a      	cmp	r2, r3
 800d04a:	d901      	bls.n	800d050 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800d04c:	2301      	movs	r3, #1
 800d04e:	e06c      	b.n	800d12a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	695a      	ldr	r2, [r3, #20]
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	699b      	ldr	r3, [r3, #24]
 800d058:	1ad3      	subs	r3, r2, r3
 800d05a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	689b      	ldr	r3, [r3, #8]
 800d060:	69fa      	ldr	r2, [r7, #28]
 800d062:	429a      	cmp	r2, r3
 800d064:	d902      	bls.n	800d06c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	689b      	ldr	r3, [r3, #8]
 800d06a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800d06c:	69fb      	ldr	r3, [r7, #28]
 800d06e:	3303      	adds	r3, #3
 800d070:	089b      	lsrs	r3, r3, #2
 800d072:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d074:	e02b      	b.n	800d0ce <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	695a      	ldr	r2, [r3, #20]
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	699b      	ldr	r3, [r3, #24]
 800d07e:	1ad3      	subs	r3, r2, r3
 800d080:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	689b      	ldr	r3, [r3, #8]
 800d086:	69fa      	ldr	r2, [r7, #28]
 800d088:	429a      	cmp	r2, r3
 800d08a:	d902      	bls.n	800d092 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	689b      	ldr	r3, [r3, #8]
 800d090:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800d092:	69fb      	ldr	r3, [r7, #28]
 800d094:	3303      	adds	r3, #3
 800d096:	089b      	lsrs	r3, r3, #2
 800d098:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	68d9      	ldr	r1, [r3, #12]
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	b2da      	uxtb	r2, r3
 800d0a2:	69fb      	ldr	r3, [r7, #28]
 800d0a4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800d0aa:	b2db      	uxtb	r3, r3
 800d0ac:	9300      	str	r3, [sp, #0]
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	6978      	ldr	r0, [r7, #20]
 800d0b2:	f003 faf6 	bl	80106a2 <USB_WritePacket>

    ep->xfer_buff  += len;
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	68da      	ldr	r2, [r3, #12]
 800d0ba:	69fb      	ldr	r3, [r7, #28]
 800d0bc:	441a      	add	r2, r3
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	699a      	ldr	r2, [r3, #24]
 800d0c6:	69fb      	ldr	r3, [r7, #28]
 800d0c8:	441a      	add	r2, r3
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d0ce:	683b      	ldr	r3, [r7, #0]
 800d0d0:	015a      	lsls	r2, r3, #5
 800d0d2:	693b      	ldr	r3, [r7, #16]
 800d0d4:	4413      	add	r3, r2
 800d0d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0da:	699b      	ldr	r3, [r3, #24]
 800d0dc:	b29b      	uxth	r3, r3
 800d0de:	69ba      	ldr	r2, [r7, #24]
 800d0e0:	429a      	cmp	r2, r3
 800d0e2:	d809      	bhi.n	800d0f8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	699a      	ldr	r2, [r3, #24]
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d0ec:	429a      	cmp	r2, r3
 800d0ee:	d203      	bcs.n	800d0f8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	695b      	ldr	r3, [r3, #20]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d1be      	bne.n	800d076 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	695a      	ldr	r2, [r3, #20]
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	699b      	ldr	r3, [r3, #24]
 800d100:	429a      	cmp	r2, r3
 800d102:	d811      	bhi.n	800d128 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800d104:	683b      	ldr	r3, [r7, #0]
 800d106:	f003 030f 	and.w	r3, r3, #15
 800d10a:	2201      	movs	r2, #1
 800d10c:	fa02 f303 	lsl.w	r3, r2, r3
 800d110:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800d112:	693b      	ldr	r3, [r7, #16]
 800d114:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d118:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d11a:	68bb      	ldr	r3, [r7, #8]
 800d11c:	43db      	mvns	r3, r3
 800d11e:	6939      	ldr	r1, [r7, #16]
 800d120:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d124:	4013      	ands	r3, r2
 800d126:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800d128:	2300      	movs	r3, #0
}
 800d12a:	4618      	mov	r0, r3
 800d12c:	3720      	adds	r7, #32
 800d12e:	46bd      	mov	sp, r7
 800d130:	bd80      	pop	{r7, pc}
	...

0800d134 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b086      	sub	sp, #24
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
 800d13c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d144:	697b      	ldr	r3, [r7, #20]
 800d146:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d148:	697b      	ldr	r3, [r7, #20]
 800d14a:	333c      	adds	r3, #60	; 0x3c
 800d14c:	3304      	adds	r3, #4
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d152:	683b      	ldr	r3, [r7, #0]
 800d154:	015a      	lsls	r2, r3, #5
 800d156:	693b      	ldr	r3, [r7, #16]
 800d158:	4413      	add	r3, r2
 800d15a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d15e:	689b      	ldr	r3, [r3, #8]
 800d160:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	691b      	ldr	r3, [r3, #16]
 800d166:	2b01      	cmp	r3, #1
 800d168:	f040 80a0 	bne.w	800d2ac <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800d16c:	68bb      	ldr	r3, [r7, #8]
 800d16e:	f003 0308 	and.w	r3, r3, #8
 800d172:	2b00      	cmp	r3, #0
 800d174:	d015      	beq.n	800d1a2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	4a72      	ldr	r2, [pc, #456]	; (800d344 <PCD_EP_OutXfrComplete_int+0x210>)
 800d17a:	4293      	cmp	r3, r2
 800d17c:	f240 80dd 	bls.w	800d33a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d180:	68bb      	ldr	r3, [r7, #8]
 800d182:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d186:	2b00      	cmp	r3, #0
 800d188:	f000 80d7 	beq.w	800d33a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	015a      	lsls	r2, r3, #5
 800d190:	693b      	ldr	r3, [r7, #16]
 800d192:	4413      	add	r3, r2
 800d194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d198:	461a      	mov	r2, r3
 800d19a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d19e:	6093      	str	r3, [r2, #8]
 800d1a0:	e0cb      	b.n	800d33a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800d1a2:	68bb      	ldr	r3, [r7, #8]
 800d1a4:	f003 0320 	and.w	r3, r3, #32
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d009      	beq.n	800d1c0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d1ac:	683b      	ldr	r3, [r7, #0]
 800d1ae:	015a      	lsls	r2, r3, #5
 800d1b0:	693b      	ldr	r3, [r7, #16]
 800d1b2:	4413      	add	r3, r2
 800d1b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1b8:	461a      	mov	r2, r3
 800d1ba:	2320      	movs	r3, #32
 800d1bc:	6093      	str	r3, [r2, #8]
 800d1be:	e0bc      	b.n	800d33a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800d1c0:	68bb      	ldr	r3, [r7, #8]
 800d1c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	f040 80b7 	bne.w	800d33a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	4a5d      	ldr	r2, [pc, #372]	; (800d344 <PCD_EP_OutXfrComplete_int+0x210>)
 800d1d0:	4293      	cmp	r3, r2
 800d1d2:	d90f      	bls.n	800d1f4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d1d4:	68bb      	ldr	r3, [r7, #8]
 800d1d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d00a      	beq.n	800d1f4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	015a      	lsls	r2, r3, #5
 800d1e2:	693b      	ldr	r3, [r7, #16]
 800d1e4:	4413      	add	r3, r2
 800d1e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1ea:	461a      	mov	r2, r3
 800d1ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d1f0:	6093      	str	r3, [r2, #8]
 800d1f2:	e0a2      	b.n	800d33a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800d1f4:	6879      	ldr	r1, [r7, #4]
 800d1f6:	683a      	ldr	r2, [r7, #0]
 800d1f8:	4613      	mov	r3, r2
 800d1fa:	00db      	lsls	r3, r3, #3
 800d1fc:	1a9b      	subs	r3, r3, r2
 800d1fe:	009b      	lsls	r3, r3, #2
 800d200:	440b      	add	r3, r1
 800d202:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800d206:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	0159      	lsls	r1, r3, #5
 800d20c:	693b      	ldr	r3, [r7, #16]
 800d20e:	440b      	add	r3, r1
 800d210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d214:	691b      	ldr	r3, [r3, #16]
 800d216:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800d21a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800d21c:	6878      	ldr	r0, [r7, #4]
 800d21e:	683a      	ldr	r2, [r7, #0]
 800d220:	4613      	mov	r3, r2
 800d222:	00db      	lsls	r3, r3, #3
 800d224:	1a9b      	subs	r3, r3, r2
 800d226:	009b      	lsls	r3, r3, #2
 800d228:	4403      	add	r3, r0
 800d22a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800d22e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800d230:	6879      	ldr	r1, [r7, #4]
 800d232:	683a      	ldr	r2, [r7, #0]
 800d234:	4613      	mov	r3, r2
 800d236:	00db      	lsls	r3, r3, #3
 800d238:	1a9b      	subs	r3, r3, r2
 800d23a:	009b      	lsls	r3, r3, #2
 800d23c:	440b      	add	r3, r1
 800d23e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d242:	6819      	ldr	r1, [r3, #0]
 800d244:	6878      	ldr	r0, [r7, #4]
 800d246:	683a      	ldr	r2, [r7, #0]
 800d248:	4613      	mov	r3, r2
 800d24a:	00db      	lsls	r3, r3, #3
 800d24c:	1a9b      	subs	r3, r3, r2
 800d24e:	009b      	lsls	r3, r3, #2
 800d250:	4403      	add	r3, r0
 800d252:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	4419      	add	r1, r3
 800d25a:	6878      	ldr	r0, [r7, #4]
 800d25c:	683a      	ldr	r2, [r7, #0]
 800d25e:	4613      	mov	r3, r2
 800d260:	00db      	lsls	r3, r3, #3
 800d262:	1a9b      	subs	r3, r3, r2
 800d264:	009b      	lsls	r3, r3, #2
 800d266:	4403      	add	r3, r0
 800d268:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d26c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800d26e:	683b      	ldr	r3, [r7, #0]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d114      	bne.n	800d29e <PCD_EP_OutXfrComplete_int+0x16a>
 800d274:	6879      	ldr	r1, [r7, #4]
 800d276:	683a      	ldr	r2, [r7, #0]
 800d278:	4613      	mov	r3, r2
 800d27a:	00db      	lsls	r3, r3, #3
 800d27c:	1a9b      	subs	r3, r3, r2
 800d27e:	009b      	lsls	r3, r3, #2
 800d280:	440b      	add	r3, r1
 800d282:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d108      	bne.n	800d29e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	6818      	ldr	r0, [r3, #0]
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d296:	461a      	mov	r2, r3
 800d298:	2101      	movs	r1, #1
 800d29a:	f003 fc61 	bl	8010b60 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	b2db      	uxtb	r3, r3
 800d2a2:	4619      	mov	r1, r3
 800d2a4:	6878      	ldr	r0, [r7, #4]
 800d2a6:	f008 fa53 	bl	8015750 <HAL_PCD_DataOutStageCallback>
 800d2aa:	e046      	b.n	800d33a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	4a26      	ldr	r2, [pc, #152]	; (800d348 <PCD_EP_OutXfrComplete_int+0x214>)
 800d2b0:	4293      	cmp	r3, r2
 800d2b2:	d124      	bne.n	800d2fe <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800d2b4:	68bb      	ldr	r3, [r7, #8]
 800d2b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d00a      	beq.n	800d2d4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d2be:	683b      	ldr	r3, [r7, #0]
 800d2c0:	015a      	lsls	r2, r3, #5
 800d2c2:	693b      	ldr	r3, [r7, #16]
 800d2c4:	4413      	add	r3, r2
 800d2c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2ca:	461a      	mov	r2, r3
 800d2cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d2d0:	6093      	str	r3, [r2, #8]
 800d2d2:	e032      	b.n	800d33a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800d2d4:	68bb      	ldr	r3, [r7, #8]
 800d2d6:	f003 0320 	and.w	r3, r3, #32
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d008      	beq.n	800d2f0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d2de:	683b      	ldr	r3, [r7, #0]
 800d2e0:	015a      	lsls	r2, r3, #5
 800d2e2:	693b      	ldr	r3, [r7, #16]
 800d2e4:	4413      	add	r3, r2
 800d2e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2ea:	461a      	mov	r2, r3
 800d2ec:	2320      	movs	r3, #32
 800d2ee:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	b2db      	uxtb	r3, r3
 800d2f4:	4619      	mov	r1, r3
 800d2f6:	6878      	ldr	r0, [r7, #4]
 800d2f8:	f008 fa2a 	bl	8015750 <HAL_PCD_DataOutStageCallback>
 800d2fc:	e01d      	b.n	800d33a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800d2fe:	683b      	ldr	r3, [r7, #0]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d114      	bne.n	800d32e <PCD_EP_OutXfrComplete_int+0x1fa>
 800d304:	6879      	ldr	r1, [r7, #4]
 800d306:	683a      	ldr	r2, [r7, #0]
 800d308:	4613      	mov	r3, r2
 800d30a:	00db      	lsls	r3, r3, #3
 800d30c:	1a9b      	subs	r3, r3, r2
 800d30e:	009b      	lsls	r3, r3, #2
 800d310:	440b      	add	r3, r1
 800d312:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d108      	bne.n	800d32e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	6818      	ldr	r0, [r3, #0]
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d326:	461a      	mov	r2, r3
 800d328:	2100      	movs	r1, #0
 800d32a:	f003 fc19 	bl	8010b60 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d32e:	683b      	ldr	r3, [r7, #0]
 800d330:	b2db      	uxtb	r3, r3
 800d332:	4619      	mov	r1, r3
 800d334:	6878      	ldr	r0, [r7, #4]
 800d336:	f008 fa0b 	bl	8015750 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800d33a:	2300      	movs	r3, #0
}
 800d33c:	4618      	mov	r0, r3
 800d33e:	3718      	adds	r7, #24
 800d340:	46bd      	mov	sp, r7
 800d342:	bd80      	pop	{r7, pc}
 800d344:	4f54300a 	.word	0x4f54300a
 800d348:	4f54310a 	.word	0x4f54310a

0800d34c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b086      	sub	sp, #24
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
 800d354:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d35c:	697b      	ldr	r3, [r7, #20]
 800d35e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d360:	697b      	ldr	r3, [r7, #20]
 800d362:	333c      	adds	r3, #60	; 0x3c
 800d364:	3304      	adds	r3, #4
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	015a      	lsls	r2, r3, #5
 800d36e:	693b      	ldr	r3, [r7, #16]
 800d370:	4413      	add	r3, r2
 800d372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d376:	689b      	ldr	r3, [r3, #8]
 800d378:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	4a15      	ldr	r2, [pc, #84]	; (800d3d4 <PCD_EP_OutSetupPacket_int+0x88>)
 800d37e:	4293      	cmp	r3, r2
 800d380:	d90e      	bls.n	800d3a0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d382:	68bb      	ldr	r3, [r7, #8]
 800d384:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d009      	beq.n	800d3a0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d38c:	683b      	ldr	r3, [r7, #0]
 800d38e:	015a      	lsls	r2, r3, #5
 800d390:	693b      	ldr	r3, [r7, #16]
 800d392:	4413      	add	r3, r2
 800d394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d398:	461a      	mov	r2, r3
 800d39a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d39e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800d3a0:	6878      	ldr	r0, [r7, #4]
 800d3a2:	f008 f9c3 	bl	801572c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	4a0a      	ldr	r2, [pc, #40]	; (800d3d4 <PCD_EP_OutSetupPacket_int+0x88>)
 800d3aa:	4293      	cmp	r3, r2
 800d3ac:	d90c      	bls.n	800d3c8 <PCD_EP_OutSetupPacket_int+0x7c>
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	691b      	ldr	r3, [r3, #16]
 800d3b2:	2b01      	cmp	r3, #1
 800d3b4:	d108      	bne.n	800d3c8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	6818      	ldr	r0, [r3, #0]
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d3c0:	461a      	mov	r2, r3
 800d3c2:	2101      	movs	r1, #1
 800d3c4:	f003 fbcc 	bl	8010b60 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800d3c8:	2300      	movs	r3, #0
}
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	3718      	adds	r7, #24
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	bd80      	pop	{r7, pc}
 800d3d2:	bf00      	nop
 800d3d4:	4f54300a 	.word	0x4f54300a

0800d3d8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800d3d8:	b480      	push	{r7}
 800d3da:	b085      	sub	sp, #20
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
 800d3e0:	460b      	mov	r3, r1
 800d3e2:	70fb      	strb	r3, [r7, #3]
 800d3e4:	4613      	mov	r3, r2
 800d3e6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3ee:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800d3f0:	78fb      	ldrb	r3, [r7, #3]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d107      	bne.n	800d406 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800d3f6:	883b      	ldrh	r3, [r7, #0]
 800d3f8:	0419      	lsls	r1, r3, #16
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	68ba      	ldr	r2, [r7, #8]
 800d400:	430a      	orrs	r2, r1
 800d402:	629a      	str	r2, [r3, #40]	; 0x28
 800d404:	e028      	b.n	800d458 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d40c:	0c1b      	lsrs	r3, r3, #16
 800d40e:	68ba      	ldr	r2, [r7, #8]
 800d410:	4413      	add	r3, r2
 800d412:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d414:	2300      	movs	r3, #0
 800d416:	73fb      	strb	r3, [r7, #15]
 800d418:	e00d      	b.n	800d436 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681a      	ldr	r2, [r3, #0]
 800d41e:	7bfb      	ldrb	r3, [r7, #15]
 800d420:	3340      	adds	r3, #64	; 0x40
 800d422:	009b      	lsls	r3, r3, #2
 800d424:	4413      	add	r3, r2
 800d426:	685b      	ldr	r3, [r3, #4]
 800d428:	0c1b      	lsrs	r3, r3, #16
 800d42a:	68ba      	ldr	r2, [r7, #8]
 800d42c:	4413      	add	r3, r2
 800d42e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d430:	7bfb      	ldrb	r3, [r7, #15]
 800d432:	3301      	adds	r3, #1
 800d434:	73fb      	strb	r3, [r7, #15]
 800d436:	7bfa      	ldrb	r2, [r7, #15]
 800d438:	78fb      	ldrb	r3, [r7, #3]
 800d43a:	3b01      	subs	r3, #1
 800d43c:	429a      	cmp	r2, r3
 800d43e:	d3ec      	bcc.n	800d41a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800d440:	883b      	ldrh	r3, [r7, #0]
 800d442:	0418      	lsls	r0, r3, #16
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	6819      	ldr	r1, [r3, #0]
 800d448:	78fb      	ldrb	r3, [r7, #3]
 800d44a:	3b01      	subs	r3, #1
 800d44c:	68ba      	ldr	r2, [r7, #8]
 800d44e:	4302      	orrs	r2, r0
 800d450:	3340      	adds	r3, #64	; 0x40
 800d452:	009b      	lsls	r3, r3, #2
 800d454:	440b      	add	r3, r1
 800d456:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800d458:	2300      	movs	r3, #0
}
 800d45a:	4618      	mov	r0, r3
 800d45c:	3714      	adds	r7, #20
 800d45e:	46bd      	mov	sp, r7
 800d460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d464:	4770      	bx	lr

0800d466 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800d466:	b480      	push	{r7}
 800d468:	b083      	sub	sp, #12
 800d46a:	af00      	add	r7, sp, #0
 800d46c:	6078      	str	r0, [r7, #4]
 800d46e:	460b      	mov	r3, r1
 800d470:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	887a      	ldrh	r2, [r7, #2]
 800d478:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800d47a:	2300      	movs	r3, #0
}
 800d47c:	4618      	mov	r0, r3
 800d47e:	370c      	adds	r7, #12
 800d480:	46bd      	mov	sp, r7
 800d482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d486:	4770      	bx	lr

0800d488 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d488:	b480      	push	{r7}
 800d48a:	b083      	sub	sp, #12
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
 800d490:	460b      	mov	r3, r1
 800d492:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800d494:	bf00      	nop
 800d496:	370c      	adds	r7, #12
 800d498:	46bd      	mov	sp, r7
 800d49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49e:	4770      	bx	lr

0800d4a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b086      	sub	sp, #24
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d101      	bne.n	800d4b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d4ae:	2301      	movs	r3, #1
 800d4b0:	e25b      	b.n	800d96a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	f003 0301 	and.w	r3, r3, #1
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d075      	beq.n	800d5aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d4be:	4ba3      	ldr	r3, [pc, #652]	; (800d74c <HAL_RCC_OscConfig+0x2ac>)
 800d4c0:	689b      	ldr	r3, [r3, #8]
 800d4c2:	f003 030c 	and.w	r3, r3, #12
 800d4c6:	2b04      	cmp	r3, #4
 800d4c8:	d00c      	beq.n	800d4e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d4ca:	4ba0      	ldr	r3, [pc, #640]	; (800d74c <HAL_RCC_OscConfig+0x2ac>)
 800d4cc:	689b      	ldr	r3, [r3, #8]
 800d4ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d4d2:	2b08      	cmp	r3, #8
 800d4d4:	d112      	bne.n	800d4fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d4d6:	4b9d      	ldr	r3, [pc, #628]	; (800d74c <HAL_RCC_OscConfig+0x2ac>)
 800d4d8:	685b      	ldr	r3, [r3, #4]
 800d4da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d4de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d4e2:	d10b      	bne.n	800d4fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d4e4:	4b99      	ldr	r3, [pc, #612]	; (800d74c <HAL_RCC_OscConfig+0x2ac>)
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d05b      	beq.n	800d5a8 <HAL_RCC_OscConfig+0x108>
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	685b      	ldr	r3, [r3, #4]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d157      	bne.n	800d5a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800d4f8:	2301      	movs	r3, #1
 800d4fa:	e236      	b.n	800d96a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	685b      	ldr	r3, [r3, #4]
 800d500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d504:	d106      	bne.n	800d514 <HAL_RCC_OscConfig+0x74>
 800d506:	4b91      	ldr	r3, [pc, #580]	; (800d74c <HAL_RCC_OscConfig+0x2ac>)
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	4a90      	ldr	r2, [pc, #576]	; (800d74c <HAL_RCC_OscConfig+0x2ac>)
 800d50c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d510:	6013      	str	r3, [r2, #0]
 800d512:	e01d      	b.n	800d550 <HAL_RCC_OscConfig+0xb0>
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	685b      	ldr	r3, [r3, #4]
 800d518:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d51c:	d10c      	bne.n	800d538 <HAL_RCC_OscConfig+0x98>
 800d51e:	4b8b      	ldr	r3, [pc, #556]	; (800d74c <HAL_RCC_OscConfig+0x2ac>)
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	4a8a      	ldr	r2, [pc, #552]	; (800d74c <HAL_RCC_OscConfig+0x2ac>)
 800d524:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d528:	6013      	str	r3, [r2, #0]
 800d52a:	4b88      	ldr	r3, [pc, #544]	; (800d74c <HAL_RCC_OscConfig+0x2ac>)
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	4a87      	ldr	r2, [pc, #540]	; (800d74c <HAL_RCC_OscConfig+0x2ac>)
 800d530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d534:	6013      	str	r3, [r2, #0]
 800d536:	e00b      	b.n	800d550 <HAL_RCC_OscConfig+0xb0>
 800d538:	4b84      	ldr	r3, [pc, #528]	; (800d74c <HAL_RCC_OscConfig+0x2ac>)
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	4a83      	ldr	r2, [pc, #524]	; (800d74c <HAL_RCC_OscConfig+0x2ac>)
 800d53e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d542:	6013      	str	r3, [r2, #0]
 800d544:	4b81      	ldr	r3, [pc, #516]	; (800d74c <HAL_RCC_OscConfig+0x2ac>)
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	4a80      	ldr	r2, [pc, #512]	; (800d74c <HAL_RCC_OscConfig+0x2ac>)
 800d54a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d54e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	685b      	ldr	r3, [r3, #4]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d013      	beq.n	800d580 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d558:	f7fd ff60 	bl	800b41c <HAL_GetTick>
 800d55c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d55e:	e008      	b.n	800d572 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d560:	f7fd ff5c 	bl	800b41c <HAL_GetTick>
 800d564:	4602      	mov	r2, r0
 800d566:	693b      	ldr	r3, [r7, #16]
 800d568:	1ad3      	subs	r3, r2, r3
 800d56a:	2b64      	cmp	r3, #100	; 0x64
 800d56c:	d901      	bls.n	800d572 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800d56e:	2303      	movs	r3, #3
 800d570:	e1fb      	b.n	800d96a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d572:	4b76      	ldr	r3, [pc, #472]	; (800d74c <HAL_RCC_OscConfig+0x2ac>)
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d0f0      	beq.n	800d560 <HAL_RCC_OscConfig+0xc0>
 800d57e:	e014      	b.n	800d5aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d580:	f7fd ff4c 	bl	800b41c <HAL_GetTick>
 800d584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d586:	e008      	b.n	800d59a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d588:	f7fd ff48 	bl	800b41c <HAL_GetTick>
 800d58c:	4602      	mov	r2, r0
 800d58e:	693b      	ldr	r3, [r7, #16]
 800d590:	1ad3      	subs	r3, r2, r3
 800d592:	2b64      	cmp	r3, #100	; 0x64
 800d594:	d901      	bls.n	800d59a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d596:	2303      	movs	r3, #3
 800d598:	e1e7      	b.n	800d96a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d59a:	4b6c      	ldr	r3, [pc, #432]	; (800d74c <HAL_RCC_OscConfig+0x2ac>)
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d1f0      	bne.n	800d588 <HAL_RCC_OscConfig+0xe8>
 800d5a6:	e000      	b.n	800d5aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d5a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	f003 0302 	and.w	r3, r3, #2
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d063      	beq.n	800d67e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d5b6:	4b65      	ldr	r3, [pc, #404]	; (800d74c <HAL_RCC_OscConfig+0x2ac>)
 800d5b8:	689b      	ldr	r3, [r3, #8]
 800d5ba:	f003 030c 	and.w	r3, r3, #12
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d00b      	beq.n	800d5da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d5c2:	4b62      	ldr	r3, [pc, #392]	; (800d74c <HAL_RCC_OscConfig+0x2ac>)
 800d5c4:	689b      	ldr	r3, [r3, #8]
 800d5c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d5ca:	2b08      	cmp	r3, #8
 800d5cc:	d11c      	bne.n	800d608 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d5ce:	4b5f      	ldr	r3, [pc, #380]	; (800d74c <HAL_RCC_OscConfig+0x2ac>)
 800d5d0:	685b      	ldr	r3, [r3, #4]
 800d5d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d116      	bne.n	800d608 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d5da:	4b5c      	ldr	r3, [pc, #368]	; (800d74c <HAL_RCC_OscConfig+0x2ac>)
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	f003 0302 	and.w	r3, r3, #2
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d005      	beq.n	800d5f2 <HAL_RCC_OscConfig+0x152>
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	68db      	ldr	r3, [r3, #12]
 800d5ea:	2b01      	cmp	r3, #1
 800d5ec:	d001      	beq.n	800d5f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800d5ee:	2301      	movs	r3, #1
 800d5f0:	e1bb      	b.n	800d96a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d5f2:	4b56      	ldr	r3, [pc, #344]	; (800d74c <HAL_RCC_OscConfig+0x2ac>)
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	691b      	ldr	r3, [r3, #16]
 800d5fe:	00db      	lsls	r3, r3, #3
 800d600:	4952      	ldr	r1, [pc, #328]	; (800d74c <HAL_RCC_OscConfig+0x2ac>)
 800d602:	4313      	orrs	r3, r2
 800d604:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d606:	e03a      	b.n	800d67e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	68db      	ldr	r3, [r3, #12]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d020      	beq.n	800d652 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d610:	4b4f      	ldr	r3, [pc, #316]	; (800d750 <HAL_RCC_OscConfig+0x2b0>)
 800d612:	2201      	movs	r2, #1
 800d614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d616:	f7fd ff01 	bl	800b41c <HAL_GetTick>
 800d61a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d61c:	e008      	b.n	800d630 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d61e:	f7fd fefd 	bl	800b41c <HAL_GetTick>
 800d622:	4602      	mov	r2, r0
 800d624:	693b      	ldr	r3, [r7, #16]
 800d626:	1ad3      	subs	r3, r2, r3
 800d628:	2b02      	cmp	r3, #2
 800d62a:	d901      	bls.n	800d630 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800d62c:	2303      	movs	r3, #3
 800d62e:	e19c      	b.n	800d96a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d630:	4b46      	ldr	r3, [pc, #280]	; (800d74c <HAL_RCC_OscConfig+0x2ac>)
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	f003 0302 	and.w	r3, r3, #2
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d0f0      	beq.n	800d61e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d63c:	4b43      	ldr	r3, [pc, #268]	; (800d74c <HAL_RCC_OscConfig+0x2ac>)
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	691b      	ldr	r3, [r3, #16]
 800d648:	00db      	lsls	r3, r3, #3
 800d64a:	4940      	ldr	r1, [pc, #256]	; (800d74c <HAL_RCC_OscConfig+0x2ac>)
 800d64c:	4313      	orrs	r3, r2
 800d64e:	600b      	str	r3, [r1, #0]
 800d650:	e015      	b.n	800d67e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d652:	4b3f      	ldr	r3, [pc, #252]	; (800d750 <HAL_RCC_OscConfig+0x2b0>)
 800d654:	2200      	movs	r2, #0
 800d656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d658:	f7fd fee0 	bl	800b41c <HAL_GetTick>
 800d65c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d65e:	e008      	b.n	800d672 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d660:	f7fd fedc 	bl	800b41c <HAL_GetTick>
 800d664:	4602      	mov	r2, r0
 800d666:	693b      	ldr	r3, [r7, #16]
 800d668:	1ad3      	subs	r3, r2, r3
 800d66a:	2b02      	cmp	r3, #2
 800d66c:	d901      	bls.n	800d672 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800d66e:	2303      	movs	r3, #3
 800d670:	e17b      	b.n	800d96a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d672:	4b36      	ldr	r3, [pc, #216]	; (800d74c <HAL_RCC_OscConfig+0x2ac>)
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	f003 0302 	and.w	r3, r3, #2
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d1f0      	bne.n	800d660 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	f003 0308 	and.w	r3, r3, #8
 800d686:	2b00      	cmp	r3, #0
 800d688:	d030      	beq.n	800d6ec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	695b      	ldr	r3, [r3, #20]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d016      	beq.n	800d6c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d692:	4b30      	ldr	r3, [pc, #192]	; (800d754 <HAL_RCC_OscConfig+0x2b4>)
 800d694:	2201      	movs	r2, #1
 800d696:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d698:	f7fd fec0 	bl	800b41c <HAL_GetTick>
 800d69c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d69e:	e008      	b.n	800d6b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d6a0:	f7fd febc 	bl	800b41c <HAL_GetTick>
 800d6a4:	4602      	mov	r2, r0
 800d6a6:	693b      	ldr	r3, [r7, #16]
 800d6a8:	1ad3      	subs	r3, r2, r3
 800d6aa:	2b02      	cmp	r3, #2
 800d6ac:	d901      	bls.n	800d6b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800d6ae:	2303      	movs	r3, #3
 800d6b0:	e15b      	b.n	800d96a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d6b2:	4b26      	ldr	r3, [pc, #152]	; (800d74c <HAL_RCC_OscConfig+0x2ac>)
 800d6b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d6b6:	f003 0302 	and.w	r3, r3, #2
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d0f0      	beq.n	800d6a0 <HAL_RCC_OscConfig+0x200>
 800d6be:	e015      	b.n	800d6ec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d6c0:	4b24      	ldr	r3, [pc, #144]	; (800d754 <HAL_RCC_OscConfig+0x2b4>)
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d6c6:	f7fd fea9 	bl	800b41c <HAL_GetTick>
 800d6ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d6cc:	e008      	b.n	800d6e0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d6ce:	f7fd fea5 	bl	800b41c <HAL_GetTick>
 800d6d2:	4602      	mov	r2, r0
 800d6d4:	693b      	ldr	r3, [r7, #16]
 800d6d6:	1ad3      	subs	r3, r2, r3
 800d6d8:	2b02      	cmp	r3, #2
 800d6da:	d901      	bls.n	800d6e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800d6dc:	2303      	movs	r3, #3
 800d6de:	e144      	b.n	800d96a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d6e0:	4b1a      	ldr	r3, [pc, #104]	; (800d74c <HAL_RCC_OscConfig+0x2ac>)
 800d6e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d6e4:	f003 0302 	and.w	r3, r3, #2
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d1f0      	bne.n	800d6ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	f003 0304 	and.w	r3, r3, #4
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	f000 80a0 	beq.w	800d83a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d6fe:	4b13      	ldr	r3, [pc, #76]	; (800d74c <HAL_RCC_OscConfig+0x2ac>)
 800d700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d706:	2b00      	cmp	r3, #0
 800d708:	d10f      	bne.n	800d72a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d70a:	2300      	movs	r3, #0
 800d70c:	60bb      	str	r3, [r7, #8]
 800d70e:	4b0f      	ldr	r3, [pc, #60]	; (800d74c <HAL_RCC_OscConfig+0x2ac>)
 800d710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d712:	4a0e      	ldr	r2, [pc, #56]	; (800d74c <HAL_RCC_OscConfig+0x2ac>)
 800d714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d718:	6413      	str	r3, [r2, #64]	; 0x40
 800d71a:	4b0c      	ldr	r3, [pc, #48]	; (800d74c <HAL_RCC_OscConfig+0x2ac>)
 800d71c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d71e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d722:	60bb      	str	r3, [r7, #8]
 800d724:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d726:	2301      	movs	r3, #1
 800d728:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d72a:	4b0b      	ldr	r3, [pc, #44]	; (800d758 <HAL_RCC_OscConfig+0x2b8>)
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d732:	2b00      	cmp	r3, #0
 800d734:	d121      	bne.n	800d77a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800d736:	4b08      	ldr	r3, [pc, #32]	; (800d758 <HAL_RCC_OscConfig+0x2b8>)
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	4a07      	ldr	r2, [pc, #28]	; (800d758 <HAL_RCC_OscConfig+0x2b8>)
 800d73c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d740:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d742:	f7fd fe6b 	bl	800b41c <HAL_GetTick>
 800d746:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d748:	e011      	b.n	800d76e <HAL_RCC_OscConfig+0x2ce>
 800d74a:	bf00      	nop
 800d74c:	40023800 	.word	0x40023800
 800d750:	42470000 	.word	0x42470000
 800d754:	42470e80 	.word	0x42470e80
 800d758:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d75c:	f7fd fe5e 	bl	800b41c <HAL_GetTick>
 800d760:	4602      	mov	r2, r0
 800d762:	693b      	ldr	r3, [r7, #16]
 800d764:	1ad3      	subs	r3, r2, r3
 800d766:	2b02      	cmp	r3, #2
 800d768:	d901      	bls.n	800d76e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800d76a:	2303      	movs	r3, #3
 800d76c:	e0fd      	b.n	800d96a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d76e:	4b81      	ldr	r3, [pc, #516]	; (800d974 <HAL_RCC_OscConfig+0x4d4>)
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d776:	2b00      	cmp	r3, #0
 800d778:	d0f0      	beq.n	800d75c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	689b      	ldr	r3, [r3, #8]
 800d77e:	2b01      	cmp	r3, #1
 800d780:	d106      	bne.n	800d790 <HAL_RCC_OscConfig+0x2f0>
 800d782:	4b7d      	ldr	r3, [pc, #500]	; (800d978 <HAL_RCC_OscConfig+0x4d8>)
 800d784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d786:	4a7c      	ldr	r2, [pc, #496]	; (800d978 <HAL_RCC_OscConfig+0x4d8>)
 800d788:	f043 0301 	orr.w	r3, r3, #1
 800d78c:	6713      	str	r3, [r2, #112]	; 0x70
 800d78e:	e01c      	b.n	800d7ca <HAL_RCC_OscConfig+0x32a>
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	689b      	ldr	r3, [r3, #8]
 800d794:	2b05      	cmp	r3, #5
 800d796:	d10c      	bne.n	800d7b2 <HAL_RCC_OscConfig+0x312>
 800d798:	4b77      	ldr	r3, [pc, #476]	; (800d978 <HAL_RCC_OscConfig+0x4d8>)
 800d79a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d79c:	4a76      	ldr	r2, [pc, #472]	; (800d978 <HAL_RCC_OscConfig+0x4d8>)
 800d79e:	f043 0304 	orr.w	r3, r3, #4
 800d7a2:	6713      	str	r3, [r2, #112]	; 0x70
 800d7a4:	4b74      	ldr	r3, [pc, #464]	; (800d978 <HAL_RCC_OscConfig+0x4d8>)
 800d7a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7a8:	4a73      	ldr	r2, [pc, #460]	; (800d978 <HAL_RCC_OscConfig+0x4d8>)
 800d7aa:	f043 0301 	orr.w	r3, r3, #1
 800d7ae:	6713      	str	r3, [r2, #112]	; 0x70
 800d7b0:	e00b      	b.n	800d7ca <HAL_RCC_OscConfig+0x32a>
 800d7b2:	4b71      	ldr	r3, [pc, #452]	; (800d978 <HAL_RCC_OscConfig+0x4d8>)
 800d7b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7b6:	4a70      	ldr	r2, [pc, #448]	; (800d978 <HAL_RCC_OscConfig+0x4d8>)
 800d7b8:	f023 0301 	bic.w	r3, r3, #1
 800d7bc:	6713      	str	r3, [r2, #112]	; 0x70
 800d7be:	4b6e      	ldr	r3, [pc, #440]	; (800d978 <HAL_RCC_OscConfig+0x4d8>)
 800d7c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7c2:	4a6d      	ldr	r2, [pc, #436]	; (800d978 <HAL_RCC_OscConfig+0x4d8>)
 800d7c4:	f023 0304 	bic.w	r3, r3, #4
 800d7c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	689b      	ldr	r3, [r3, #8]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d015      	beq.n	800d7fe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d7d2:	f7fd fe23 	bl	800b41c <HAL_GetTick>
 800d7d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d7d8:	e00a      	b.n	800d7f0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d7da:	f7fd fe1f 	bl	800b41c <HAL_GetTick>
 800d7de:	4602      	mov	r2, r0
 800d7e0:	693b      	ldr	r3, [r7, #16]
 800d7e2:	1ad3      	subs	r3, r2, r3
 800d7e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800d7e8:	4293      	cmp	r3, r2
 800d7ea:	d901      	bls.n	800d7f0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800d7ec:	2303      	movs	r3, #3
 800d7ee:	e0bc      	b.n	800d96a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d7f0:	4b61      	ldr	r3, [pc, #388]	; (800d978 <HAL_RCC_OscConfig+0x4d8>)
 800d7f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7f4:	f003 0302 	and.w	r3, r3, #2
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d0ee      	beq.n	800d7da <HAL_RCC_OscConfig+0x33a>
 800d7fc:	e014      	b.n	800d828 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d7fe:	f7fd fe0d 	bl	800b41c <HAL_GetTick>
 800d802:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d804:	e00a      	b.n	800d81c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d806:	f7fd fe09 	bl	800b41c <HAL_GetTick>
 800d80a:	4602      	mov	r2, r0
 800d80c:	693b      	ldr	r3, [r7, #16]
 800d80e:	1ad3      	subs	r3, r2, r3
 800d810:	f241 3288 	movw	r2, #5000	; 0x1388
 800d814:	4293      	cmp	r3, r2
 800d816:	d901      	bls.n	800d81c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800d818:	2303      	movs	r3, #3
 800d81a:	e0a6      	b.n	800d96a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d81c:	4b56      	ldr	r3, [pc, #344]	; (800d978 <HAL_RCC_OscConfig+0x4d8>)
 800d81e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d820:	f003 0302 	and.w	r3, r3, #2
 800d824:	2b00      	cmp	r3, #0
 800d826:	d1ee      	bne.n	800d806 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d828:	7dfb      	ldrb	r3, [r7, #23]
 800d82a:	2b01      	cmp	r3, #1
 800d82c:	d105      	bne.n	800d83a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d82e:	4b52      	ldr	r3, [pc, #328]	; (800d978 <HAL_RCC_OscConfig+0x4d8>)
 800d830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d832:	4a51      	ldr	r2, [pc, #324]	; (800d978 <HAL_RCC_OscConfig+0x4d8>)
 800d834:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d838:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	699b      	ldr	r3, [r3, #24]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	f000 8092 	beq.w	800d968 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800d844:	4b4c      	ldr	r3, [pc, #304]	; (800d978 <HAL_RCC_OscConfig+0x4d8>)
 800d846:	689b      	ldr	r3, [r3, #8]
 800d848:	f003 030c 	and.w	r3, r3, #12
 800d84c:	2b08      	cmp	r3, #8
 800d84e:	d05c      	beq.n	800d90a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	699b      	ldr	r3, [r3, #24]
 800d854:	2b02      	cmp	r3, #2
 800d856:	d141      	bne.n	800d8dc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d858:	4b48      	ldr	r3, [pc, #288]	; (800d97c <HAL_RCC_OscConfig+0x4dc>)
 800d85a:	2200      	movs	r2, #0
 800d85c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d85e:	f7fd fddd 	bl	800b41c <HAL_GetTick>
 800d862:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d864:	e008      	b.n	800d878 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d866:	f7fd fdd9 	bl	800b41c <HAL_GetTick>
 800d86a:	4602      	mov	r2, r0
 800d86c:	693b      	ldr	r3, [r7, #16]
 800d86e:	1ad3      	subs	r3, r2, r3
 800d870:	2b02      	cmp	r3, #2
 800d872:	d901      	bls.n	800d878 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800d874:	2303      	movs	r3, #3
 800d876:	e078      	b.n	800d96a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d878:	4b3f      	ldr	r3, [pc, #252]	; (800d978 <HAL_RCC_OscConfig+0x4d8>)
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d880:	2b00      	cmp	r3, #0
 800d882:	d1f0      	bne.n	800d866 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	69da      	ldr	r2, [r3, #28]
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	6a1b      	ldr	r3, [r3, #32]
 800d88c:	431a      	orrs	r2, r3
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d892:	019b      	lsls	r3, r3, #6
 800d894:	431a      	orrs	r2, r3
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d89a:	085b      	lsrs	r3, r3, #1
 800d89c:	3b01      	subs	r3, #1
 800d89e:	041b      	lsls	r3, r3, #16
 800d8a0:	431a      	orrs	r2, r3
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8a6:	061b      	lsls	r3, r3, #24
 800d8a8:	4933      	ldr	r1, [pc, #204]	; (800d978 <HAL_RCC_OscConfig+0x4d8>)
 800d8aa:	4313      	orrs	r3, r2
 800d8ac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d8ae:	4b33      	ldr	r3, [pc, #204]	; (800d97c <HAL_RCC_OscConfig+0x4dc>)
 800d8b0:	2201      	movs	r2, #1
 800d8b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d8b4:	f7fd fdb2 	bl	800b41c <HAL_GetTick>
 800d8b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d8ba:	e008      	b.n	800d8ce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d8bc:	f7fd fdae 	bl	800b41c <HAL_GetTick>
 800d8c0:	4602      	mov	r2, r0
 800d8c2:	693b      	ldr	r3, [r7, #16]
 800d8c4:	1ad3      	subs	r3, r2, r3
 800d8c6:	2b02      	cmp	r3, #2
 800d8c8:	d901      	bls.n	800d8ce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800d8ca:	2303      	movs	r3, #3
 800d8cc:	e04d      	b.n	800d96a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d8ce:	4b2a      	ldr	r3, [pc, #168]	; (800d978 <HAL_RCC_OscConfig+0x4d8>)
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d0f0      	beq.n	800d8bc <HAL_RCC_OscConfig+0x41c>
 800d8da:	e045      	b.n	800d968 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d8dc:	4b27      	ldr	r3, [pc, #156]	; (800d97c <HAL_RCC_OscConfig+0x4dc>)
 800d8de:	2200      	movs	r2, #0
 800d8e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d8e2:	f7fd fd9b 	bl	800b41c <HAL_GetTick>
 800d8e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d8e8:	e008      	b.n	800d8fc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d8ea:	f7fd fd97 	bl	800b41c <HAL_GetTick>
 800d8ee:	4602      	mov	r2, r0
 800d8f0:	693b      	ldr	r3, [r7, #16]
 800d8f2:	1ad3      	subs	r3, r2, r3
 800d8f4:	2b02      	cmp	r3, #2
 800d8f6:	d901      	bls.n	800d8fc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800d8f8:	2303      	movs	r3, #3
 800d8fa:	e036      	b.n	800d96a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d8fc:	4b1e      	ldr	r3, [pc, #120]	; (800d978 <HAL_RCC_OscConfig+0x4d8>)
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d904:	2b00      	cmp	r3, #0
 800d906:	d1f0      	bne.n	800d8ea <HAL_RCC_OscConfig+0x44a>
 800d908:	e02e      	b.n	800d968 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	699b      	ldr	r3, [r3, #24]
 800d90e:	2b01      	cmp	r3, #1
 800d910:	d101      	bne.n	800d916 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800d912:	2301      	movs	r3, #1
 800d914:	e029      	b.n	800d96a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800d916:	4b18      	ldr	r3, [pc, #96]	; (800d978 <HAL_RCC_OscConfig+0x4d8>)
 800d918:	685b      	ldr	r3, [r3, #4]
 800d91a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	69db      	ldr	r3, [r3, #28]
 800d926:	429a      	cmp	r2, r3
 800d928:	d11c      	bne.n	800d964 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d934:	429a      	cmp	r2, r3
 800d936:	d115      	bne.n	800d964 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800d938:	68fa      	ldr	r2, [r7, #12]
 800d93a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800d93e:	4013      	ands	r3, r2
 800d940:	687a      	ldr	r2, [r7, #4]
 800d942:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d944:	4293      	cmp	r3, r2
 800d946:	d10d      	bne.n	800d964 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800d952:	429a      	cmp	r2, r3
 800d954:	d106      	bne.n	800d964 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800d960:	429a      	cmp	r2, r3
 800d962:	d001      	beq.n	800d968 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800d964:	2301      	movs	r3, #1
 800d966:	e000      	b.n	800d96a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800d968:	2300      	movs	r3, #0
}
 800d96a:	4618      	mov	r0, r3
 800d96c:	3718      	adds	r7, #24
 800d96e:	46bd      	mov	sp, r7
 800d970:	bd80      	pop	{r7, pc}
 800d972:	bf00      	nop
 800d974:	40007000 	.word	0x40007000
 800d978:	40023800 	.word	0x40023800
 800d97c:	42470060 	.word	0x42470060

0800d980 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b084      	sub	sp, #16
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
 800d988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d101      	bne.n	800d994 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d990:	2301      	movs	r3, #1
 800d992:	e0cc      	b.n	800db2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d994:	4b68      	ldr	r3, [pc, #416]	; (800db38 <HAL_RCC_ClockConfig+0x1b8>)
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	f003 030f 	and.w	r3, r3, #15
 800d99c:	683a      	ldr	r2, [r7, #0]
 800d99e:	429a      	cmp	r2, r3
 800d9a0:	d90c      	bls.n	800d9bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d9a2:	4b65      	ldr	r3, [pc, #404]	; (800db38 <HAL_RCC_ClockConfig+0x1b8>)
 800d9a4:	683a      	ldr	r2, [r7, #0]
 800d9a6:	b2d2      	uxtb	r2, r2
 800d9a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d9aa:	4b63      	ldr	r3, [pc, #396]	; (800db38 <HAL_RCC_ClockConfig+0x1b8>)
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	f003 030f 	and.w	r3, r3, #15
 800d9b2:	683a      	ldr	r2, [r7, #0]
 800d9b4:	429a      	cmp	r2, r3
 800d9b6:	d001      	beq.n	800d9bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800d9b8:	2301      	movs	r3, #1
 800d9ba:	e0b8      	b.n	800db2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	f003 0302 	and.w	r3, r3, #2
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d020      	beq.n	800da0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	f003 0304 	and.w	r3, r3, #4
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d005      	beq.n	800d9e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d9d4:	4b59      	ldr	r3, [pc, #356]	; (800db3c <HAL_RCC_ClockConfig+0x1bc>)
 800d9d6:	689b      	ldr	r3, [r3, #8]
 800d9d8:	4a58      	ldr	r2, [pc, #352]	; (800db3c <HAL_RCC_ClockConfig+0x1bc>)
 800d9da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800d9de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	f003 0308 	and.w	r3, r3, #8
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d005      	beq.n	800d9f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800d9ec:	4b53      	ldr	r3, [pc, #332]	; (800db3c <HAL_RCC_ClockConfig+0x1bc>)
 800d9ee:	689b      	ldr	r3, [r3, #8]
 800d9f0:	4a52      	ldr	r2, [pc, #328]	; (800db3c <HAL_RCC_ClockConfig+0x1bc>)
 800d9f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800d9f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d9f8:	4b50      	ldr	r3, [pc, #320]	; (800db3c <HAL_RCC_ClockConfig+0x1bc>)
 800d9fa:	689b      	ldr	r3, [r3, #8]
 800d9fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	689b      	ldr	r3, [r3, #8]
 800da04:	494d      	ldr	r1, [pc, #308]	; (800db3c <HAL_RCC_ClockConfig+0x1bc>)
 800da06:	4313      	orrs	r3, r2
 800da08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	f003 0301 	and.w	r3, r3, #1
 800da12:	2b00      	cmp	r3, #0
 800da14:	d044      	beq.n	800daa0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	685b      	ldr	r3, [r3, #4]
 800da1a:	2b01      	cmp	r3, #1
 800da1c:	d107      	bne.n	800da2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800da1e:	4b47      	ldr	r3, [pc, #284]	; (800db3c <HAL_RCC_ClockConfig+0x1bc>)
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800da26:	2b00      	cmp	r3, #0
 800da28:	d119      	bne.n	800da5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800da2a:	2301      	movs	r3, #1
 800da2c:	e07f      	b.n	800db2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	685b      	ldr	r3, [r3, #4]
 800da32:	2b02      	cmp	r3, #2
 800da34:	d003      	beq.n	800da3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800da3a:	2b03      	cmp	r3, #3
 800da3c:	d107      	bne.n	800da4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800da3e:	4b3f      	ldr	r3, [pc, #252]	; (800db3c <HAL_RCC_ClockConfig+0x1bc>)
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800da46:	2b00      	cmp	r3, #0
 800da48:	d109      	bne.n	800da5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800da4a:	2301      	movs	r3, #1
 800da4c:	e06f      	b.n	800db2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800da4e:	4b3b      	ldr	r3, [pc, #236]	; (800db3c <HAL_RCC_ClockConfig+0x1bc>)
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	f003 0302 	and.w	r3, r3, #2
 800da56:	2b00      	cmp	r3, #0
 800da58:	d101      	bne.n	800da5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800da5a:	2301      	movs	r3, #1
 800da5c:	e067      	b.n	800db2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800da5e:	4b37      	ldr	r3, [pc, #220]	; (800db3c <HAL_RCC_ClockConfig+0x1bc>)
 800da60:	689b      	ldr	r3, [r3, #8]
 800da62:	f023 0203 	bic.w	r2, r3, #3
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	685b      	ldr	r3, [r3, #4]
 800da6a:	4934      	ldr	r1, [pc, #208]	; (800db3c <HAL_RCC_ClockConfig+0x1bc>)
 800da6c:	4313      	orrs	r3, r2
 800da6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800da70:	f7fd fcd4 	bl	800b41c <HAL_GetTick>
 800da74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800da76:	e00a      	b.n	800da8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800da78:	f7fd fcd0 	bl	800b41c <HAL_GetTick>
 800da7c:	4602      	mov	r2, r0
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	1ad3      	subs	r3, r2, r3
 800da82:	f241 3288 	movw	r2, #5000	; 0x1388
 800da86:	4293      	cmp	r3, r2
 800da88:	d901      	bls.n	800da8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800da8a:	2303      	movs	r3, #3
 800da8c:	e04f      	b.n	800db2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800da8e:	4b2b      	ldr	r3, [pc, #172]	; (800db3c <HAL_RCC_ClockConfig+0x1bc>)
 800da90:	689b      	ldr	r3, [r3, #8]
 800da92:	f003 020c 	and.w	r2, r3, #12
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	685b      	ldr	r3, [r3, #4]
 800da9a:	009b      	lsls	r3, r3, #2
 800da9c:	429a      	cmp	r2, r3
 800da9e:	d1eb      	bne.n	800da78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800daa0:	4b25      	ldr	r3, [pc, #148]	; (800db38 <HAL_RCC_ClockConfig+0x1b8>)
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	f003 030f 	and.w	r3, r3, #15
 800daa8:	683a      	ldr	r2, [r7, #0]
 800daaa:	429a      	cmp	r2, r3
 800daac:	d20c      	bcs.n	800dac8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800daae:	4b22      	ldr	r3, [pc, #136]	; (800db38 <HAL_RCC_ClockConfig+0x1b8>)
 800dab0:	683a      	ldr	r2, [r7, #0]
 800dab2:	b2d2      	uxtb	r2, r2
 800dab4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800dab6:	4b20      	ldr	r3, [pc, #128]	; (800db38 <HAL_RCC_ClockConfig+0x1b8>)
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	f003 030f 	and.w	r3, r3, #15
 800dabe:	683a      	ldr	r2, [r7, #0]
 800dac0:	429a      	cmp	r2, r3
 800dac2:	d001      	beq.n	800dac8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800dac4:	2301      	movs	r3, #1
 800dac6:	e032      	b.n	800db2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	f003 0304 	and.w	r3, r3, #4
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d008      	beq.n	800dae6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800dad4:	4b19      	ldr	r3, [pc, #100]	; (800db3c <HAL_RCC_ClockConfig+0x1bc>)
 800dad6:	689b      	ldr	r3, [r3, #8]
 800dad8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	68db      	ldr	r3, [r3, #12]
 800dae0:	4916      	ldr	r1, [pc, #88]	; (800db3c <HAL_RCC_ClockConfig+0x1bc>)
 800dae2:	4313      	orrs	r3, r2
 800dae4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	f003 0308 	and.w	r3, r3, #8
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d009      	beq.n	800db06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800daf2:	4b12      	ldr	r3, [pc, #72]	; (800db3c <HAL_RCC_ClockConfig+0x1bc>)
 800daf4:	689b      	ldr	r3, [r3, #8]
 800daf6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	691b      	ldr	r3, [r3, #16]
 800dafe:	00db      	lsls	r3, r3, #3
 800db00:	490e      	ldr	r1, [pc, #56]	; (800db3c <HAL_RCC_ClockConfig+0x1bc>)
 800db02:	4313      	orrs	r3, r2
 800db04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800db06:	f000 f821 	bl	800db4c <HAL_RCC_GetSysClockFreq>
 800db0a:	4602      	mov	r2, r0
 800db0c:	4b0b      	ldr	r3, [pc, #44]	; (800db3c <HAL_RCC_ClockConfig+0x1bc>)
 800db0e:	689b      	ldr	r3, [r3, #8]
 800db10:	091b      	lsrs	r3, r3, #4
 800db12:	f003 030f 	and.w	r3, r3, #15
 800db16:	490a      	ldr	r1, [pc, #40]	; (800db40 <HAL_RCC_ClockConfig+0x1c0>)
 800db18:	5ccb      	ldrb	r3, [r1, r3]
 800db1a:	fa22 f303 	lsr.w	r3, r2, r3
 800db1e:	4a09      	ldr	r2, [pc, #36]	; (800db44 <HAL_RCC_ClockConfig+0x1c4>)
 800db20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800db22:	4b09      	ldr	r3, [pc, #36]	; (800db48 <HAL_RCC_ClockConfig+0x1c8>)
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	4618      	mov	r0, r3
 800db28:	f7fd f8ee 	bl	800ad08 <HAL_InitTick>

  return HAL_OK;
 800db2c:	2300      	movs	r3, #0
}
 800db2e:	4618      	mov	r0, r3
 800db30:	3710      	adds	r7, #16
 800db32:	46bd      	mov	sp, r7
 800db34:	bd80      	pop	{r7, pc}
 800db36:	bf00      	nop
 800db38:	40023c00 	.word	0x40023c00
 800db3c:	40023800 	.word	0x40023800
 800db40:	0801c268 	.word	0x0801c268
 800db44:	20002088 	.word	0x20002088
 800db48:	2000208c 	.word	0x2000208c

0800db4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800db4c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800db50:	b084      	sub	sp, #16
 800db52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800db54:	2300      	movs	r3, #0
 800db56:	607b      	str	r3, [r7, #4]
 800db58:	2300      	movs	r3, #0
 800db5a:	60fb      	str	r3, [r7, #12]
 800db5c:	2300      	movs	r3, #0
 800db5e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800db60:	2300      	movs	r3, #0
 800db62:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800db64:	4b67      	ldr	r3, [pc, #412]	; (800dd04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800db66:	689b      	ldr	r3, [r3, #8]
 800db68:	f003 030c 	and.w	r3, r3, #12
 800db6c:	2b08      	cmp	r3, #8
 800db6e:	d00d      	beq.n	800db8c <HAL_RCC_GetSysClockFreq+0x40>
 800db70:	2b08      	cmp	r3, #8
 800db72:	f200 80bd 	bhi.w	800dcf0 <HAL_RCC_GetSysClockFreq+0x1a4>
 800db76:	2b00      	cmp	r3, #0
 800db78:	d002      	beq.n	800db80 <HAL_RCC_GetSysClockFreq+0x34>
 800db7a:	2b04      	cmp	r3, #4
 800db7c:	d003      	beq.n	800db86 <HAL_RCC_GetSysClockFreq+0x3a>
 800db7e:	e0b7      	b.n	800dcf0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800db80:	4b61      	ldr	r3, [pc, #388]	; (800dd08 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800db82:	60bb      	str	r3, [r7, #8]
       break;
 800db84:	e0b7      	b.n	800dcf6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800db86:	4b61      	ldr	r3, [pc, #388]	; (800dd0c <HAL_RCC_GetSysClockFreq+0x1c0>)
 800db88:	60bb      	str	r3, [r7, #8]
      break;
 800db8a:	e0b4      	b.n	800dcf6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800db8c:	4b5d      	ldr	r3, [pc, #372]	; (800dd04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800db8e:	685b      	ldr	r3, [r3, #4]
 800db90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800db94:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800db96:	4b5b      	ldr	r3, [pc, #364]	; (800dd04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800db98:	685b      	ldr	r3, [r3, #4]
 800db9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d04d      	beq.n	800dc3e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800dba2:	4b58      	ldr	r3, [pc, #352]	; (800dd04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800dba4:	685b      	ldr	r3, [r3, #4]
 800dba6:	099b      	lsrs	r3, r3, #6
 800dba8:	461a      	mov	r2, r3
 800dbaa:	f04f 0300 	mov.w	r3, #0
 800dbae:	f240 10ff 	movw	r0, #511	; 0x1ff
 800dbb2:	f04f 0100 	mov.w	r1, #0
 800dbb6:	ea02 0800 	and.w	r8, r2, r0
 800dbba:	ea03 0901 	and.w	r9, r3, r1
 800dbbe:	4640      	mov	r0, r8
 800dbc0:	4649      	mov	r1, r9
 800dbc2:	f04f 0200 	mov.w	r2, #0
 800dbc6:	f04f 0300 	mov.w	r3, #0
 800dbca:	014b      	lsls	r3, r1, #5
 800dbcc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800dbd0:	0142      	lsls	r2, r0, #5
 800dbd2:	4610      	mov	r0, r2
 800dbd4:	4619      	mov	r1, r3
 800dbd6:	ebb0 0008 	subs.w	r0, r0, r8
 800dbda:	eb61 0109 	sbc.w	r1, r1, r9
 800dbde:	f04f 0200 	mov.w	r2, #0
 800dbe2:	f04f 0300 	mov.w	r3, #0
 800dbe6:	018b      	lsls	r3, r1, #6
 800dbe8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800dbec:	0182      	lsls	r2, r0, #6
 800dbee:	1a12      	subs	r2, r2, r0
 800dbf0:	eb63 0301 	sbc.w	r3, r3, r1
 800dbf4:	f04f 0000 	mov.w	r0, #0
 800dbf8:	f04f 0100 	mov.w	r1, #0
 800dbfc:	00d9      	lsls	r1, r3, #3
 800dbfe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800dc02:	00d0      	lsls	r0, r2, #3
 800dc04:	4602      	mov	r2, r0
 800dc06:	460b      	mov	r3, r1
 800dc08:	eb12 0208 	adds.w	r2, r2, r8
 800dc0c:	eb43 0309 	adc.w	r3, r3, r9
 800dc10:	f04f 0000 	mov.w	r0, #0
 800dc14:	f04f 0100 	mov.w	r1, #0
 800dc18:	0259      	lsls	r1, r3, #9
 800dc1a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800dc1e:	0250      	lsls	r0, r2, #9
 800dc20:	4602      	mov	r2, r0
 800dc22:	460b      	mov	r3, r1
 800dc24:	4610      	mov	r0, r2
 800dc26:	4619      	mov	r1, r3
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	461a      	mov	r2, r3
 800dc2c:	f04f 0300 	mov.w	r3, #0
 800dc30:	f7f3 f82a 	bl	8000c88 <__aeabi_uldivmod>
 800dc34:	4602      	mov	r2, r0
 800dc36:	460b      	mov	r3, r1
 800dc38:	4613      	mov	r3, r2
 800dc3a:	60fb      	str	r3, [r7, #12]
 800dc3c:	e04a      	b.n	800dcd4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800dc3e:	4b31      	ldr	r3, [pc, #196]	; (800dd04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800dc40:	685b      	ldr	r3, [r3, #4]
 800dc42:	099b      	lsrs	r3, r3, #6
 800dc44:	461a      	mov	r2, r3
 800dc46:	f04f 0300 	mov.w	r3, #0
 800dc4a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800dc4e:	f04f 0100 	mov.w	r1, #0
 800dc52:	ea02 0400 	and.w	r4, r2, r0
 800dc56:	ea03 0501 	and.w	r5, r3, r1
 800dc5a:	4620      	mov	r0, r4
 800dc5c:	4629      	mov	r1, r5
 800dc5e:	f04f 0200 	mov.w	r2, #0
 800dc62:	f04f 0300 	mov.w	r3, #0
 800dc66:	014b      	lsls	r3, r1, #5
 800dc68:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800dc6c:	0142      	lsls	r2, r0, #5
 800dc6e:	4610      	mov	r0, r2
 800dc70:	4619      	mov	r1, r3
 800dc72:	1b00      	subs	r0, r0, r4
 800dc74:	eb61 0105 	sbc.w	r1, r1, r5
 800dc78:	f04f 0200 	mov.w	r2, #0
 800dc7c:	f04f 0300 	mov.w	r3, #0
 800dc80:	018b      	lsls	r3, r1, #6
 800dc82:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800dc86:	0182      	lsls	r2, r0, #6
 800dc88:	1a12      	subs	r2, r2, r0
 800dc8a:	eb63 0301 	sbc.w	r3, r3, r1
 800dc8e:	f04f 0000 	mov.w	r0, #0
 800dc92:	f04f 0100 	mov.w	r1, #0
 800dc96:	00d9      	lsls	r1, r3, #3
 800dc98:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800dc9c:	00d0      	lsls	r0, r2, #3
 800dc9e:	4602      	mov	r2, r0
 800dca0:	460b      	mov	r3, r1
 800dca2:	1912      	adds	r2, r2, r4
 800dca4:	eb45 0303 	adc.w	r3, r5, r3
 800dca8:	f04f 0000 	mov.w	r0, #0
 800dcac:	f04f 0100 	mov.w	r1, #0
 800dcb0:	0299      	lsls	r1, r3, #10
 800dcb2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800dcb6:	0290      	lsls	r0, r2, #10
 800dcb8:	4602      	mov	r2, r0
 800dcba:	460b      	mov	r3, r1
 800dcbc:	4610      	mov	r0, r2
 800dcbe:	4619      	mov	r1, r3
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	461a      	mov	r2, r3
 800dcc4:	f04f 0300 	mov.w	r3, #0
 800dcc8:	f7f2 ffde 	bl	8000c88 <__aeabi_uldivmod>
 800dccc:	4602      	mov	r2, r0
 800dcce:	460b      	mov	r3, r1
 800dcd0:	4613      	mov	r3, r2
 800dcd2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800dcd4:	4b0b      	ldr	r3, [pc, #44]	; (800dd04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800dcd6:	685b      	ldr	r3, [r3, #4]
 800dcd8:	0c1b      	lsrs	r3, r3, #16
 800dcda:	f003 0303 	and.w	r3, r3, #3
 800dcde:	3301      	adds	r3, #1
 800dce0:	005b      	lsls	r3, r3, #1
 800dce2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800dce4:	68fa      	ldr	r2, [r7, #12]
 800dce6:	683b      	ldr	r3, [r7, #0]
 800dce8:	fbb2 f3f3 	udiv	r3, r2, r3
 800dcec:	60bb      	str	r3, [r7, #8]
      break;
 800dcee:	e002      	b.n	800dcf6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800dcf0:	4b05      	ldr	r3, [pc, #20]	; (800dd08 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800dcf2:	60bb      	str	r3, [r7, #8]
      break;
 800dcf4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800dcf6:	68bb      	ldr	r3, [r7, #8]
}
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	3710      	adds	r7, #16
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800dd02:	bf00      	nop
 800dd04:	40023800 	.word	0x40023800
 800dd08:	00f42400 	.word	0x00f42400
 800dd0c:	007a1200 	.word	0x007a1200

0800dd10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800dd10:	b480      	push	{r7}
 800dd12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800dd14:	4b03      	ldr	r3, [pc, #12]	; (800dd24 <HAL_RCC_GetHCLKFreq+0x14>)
 800dd16:	681b      	ldr	r3, [r3, #0]
}
 800dd18:	4618      	mov	r0, r3
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd20:	4770      	bx	lr
 800dd22:	bf00      	nop
 800dd24:	20002088 	.word	0x20002088

0800dd28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800dd2c:	f7ff fff0 	bl	800dd10 <HAL_RCC_GetHCLKFreq>
 800dd30:	4602      	mov	r2, r0
 800dd32:	4b05      	ldr	r3, [pc, #20]	; (800dd48 <HAL_RCC_GetPCLK1Freq+0x20>)
 800dd34:	689b      	ldr	r3, [r3, #8]
 800dd36:	0a9b      	lsrs	r3, r3, #10
 800dd38:	f003 0307 	and.w	r3, r3, #7
 800dd3c:	4903      	ldr	r1, [pc, #12]	; (800dd4c <HAL_RCC_GetPCLK1Freq+0x24>)
 800dd3e:	5ccb      	ldrb	r3, [r1, r3]
 800dd40:	fa22 f303 	lsr.w	r3, r2, r3
}
 800dd44:	4618      	mov	r0, r3
 800dd46:	bd80      	pop	{r7, pc}
 800dd48:	40023800 	.word	0x40023800
 800dd4c:	0801c278 	.word	0x0801c278

0800dd50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800dd54:	f7ff ffdc 	bl	800dd10 <HAL_RCC_GetHCLKFreq>
 800dd58:	4602      	mov	r2, r0
 800dd5a:	4b05      	ldr	r3, [pc, #20]	; (800dd70 <HAL_RCC_GetPCLK2Freq+0x20>)
 800dd5c:	689b      	ldr	r3, [r3, #8]
 800dd5e:	0b5b      	lsrs	r3, r3, #13
 800dd60:	f003 0307 	and.w	r3, r3, #7
 800dd64:	4903      	ldr	r1, [pc, #12]	; (800dd74 <HAL_RCC_GetPCLK2Freq+0x24>)
 800dd66:	5ccb      	ldrb	r3, [r1, r3]
 800dd68:	fa22 f303 	lsr.w	r3, r2, r3
}
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	bd80      	pop	{r7, pc}
 800dd70:	40023800 	.word	0x40023800
 800dd74:	0801c278 	.word	0x0801c278

0800dd78 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800dd78:	b480      	push	{r7}
 800dd7a:	b083      	sub	sp, #12
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
 800dd80:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	220f      	movs	r2, #15
 800dd86:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800dd88:	4b12      	ldr	r3, [pc, #72]	; (800ddd4 <HAL_RCC_GetClockConfig+0x5c>)
 800dd8a:	689b      	ldr	r3, [r3, #8]
 800dd8c:	f003 0203 	and.w	r2, r3, #3
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800dd94:	4b0f      	ldr	r3, [pc, #60]	; (800ddd4 <HAL_RCC_GetClockConfig+0x5c>)
 800dd96:	689b      	ldr	r3, [r3, #8]
 800dd98:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800dda0:	4b0c      	ldr	r3, [pc, #48]	; (800ddd4 <HAL_RCC_GetClockConfig+0x5c>)
 800dda2:	689b      	ldr	r3, [r3, #8]
 800dda4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800ddac:	4b09      	ldr	r3, [pc, #36]	; (800ddd4 <HAL_RCC_GetClockConfig+0x5c>)
 800ddae:	689b      	ldr	r3, [r3, #8]
 800ddb0:	08db      	lsrs	r3, r3, #3
 800ddb2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ddba:	4b07      	ldr	r3, [pc, #28]	; (800ddd8 <HAL_RCC_GetClockConfig+0x60>)
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	f003 020f 	and.w	r2, r3, #15
 800ddc2:	683b      	ldr	r3, [r7, #0]
 800ddc4:	601a      	str	r2, [r3, #0]
}
 800ddc6:	bf00      	nop
 800ddc8:	370c      	adds	r7, #12
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd0:	4770      	bx	lr
 800ddd2:	bf00      	nop
 800ddd4:	40023800 	.word	0x40023800
 800ddd8:	40023c00 	.word	0x40023c00

0800dddc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b082      	sub	sp, #8
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d101      	bne.n	800ddee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ddea:	2301      	movs	r3, #1
 800ddec:	e01d      	b.n	800de2a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ddf4:	b2db      	uxtb	r3, r3
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d106      	bne.n	800de08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	2200      	movs	r2, #0
 800ddfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800de02:	6878      	ldr	r0, [r7, #4]
 800de04:	f7fd f99a 	bl	800b13c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	2202      	movs	r2, #2
 800de0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	681a      	ldr	r2, [r3, #0]
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	3304      	adds	r3, #4
 800de18:	4619      	mov	r1, r3
 800de1a:	4610      	mov	r0, r2
 800de1c:	f000 fa46 	bl	800e2ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	2201      	movs	r2, #1
 800de24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800de28:	2300      	movs	r3, #0
}
 800de2a:	4618      	mov	r0, r3
 800de2c:	3708      	adds	r7, #8
 800de2e:	46bd      	mov	sp, r7
 800de30:	bd80      	pop	{r7, pc}

0800de32 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800de32:	b480      	push	{r7}
 800de34:	b085      	sub	sp, #20
 800de36:	af00      	add	r7, sp, #0
 800de38:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	2202      	movs	r2, #2
 800de3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	689b      	ldr	r3, [r3, #8]
 800de48:	f003 0307 	and.w	r3, r3, #7
 800de4c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	2b06      	cmp	r3, #6
 800de52:	d007      	beq.n	800de64 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	681a      	ldr	r2, [r3, #0]
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	f042 0201 	orr.w	r2, r2, #1
 800de62:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	2201      	movs	r2, #1
 800de68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800de6c:	2300      	movs	r3, #0
}
 800de6e:	4618      	mov	r0, r3
 800de70:	3714      	adds	r7, #20
 800de72:	46bd      	mov	sp, r7
 800de74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de78:	4770      	bx	lr

0800de7a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800de7a:	b480      	push	{r7}
 800de7c:	b085      	sub	sp, #20
 800de7e:	af00      	add	r7, sp, #0
 800de80:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	68da      	ldr	r2, [r3, #12]
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	f042 0201 	orr.w	r2, r2, #1
 800de90:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	689b      	ldr	r3, [r3, #8]
 800de98:	f003 0307 	and.w	r3, r3, #7
 800de9c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	2b06      	cmp	r3, #6
 800dea2:	d007      	beq.n	800deb4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	681a      	ldr	r2, [r3, #0]
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	f042 0201 	orr.w	r2, r2, #1
 800deb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800deb4:	2300      	movs	r3, #0
}
 800deb6:	4618      	mov	r0, r3
 800deb8:	3714      	adds	r7, #20
 800deba:	46bd      	mov	sp, r7
 800debc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec0:	4770      	bx	lr

0800dec2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800dec2:	b580      	push	{r7, lr}
 800dec4:	b082      	sub	sp, #8
 800dec6:	af00      	add	r7, sp, #0
 800dec8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	691b      	ldr	r3, [r3, #16]
 800ded0:	f003 0302 	and.w	r3, r3, #2
 800ded4:	2b02      	cmp	r3, #2
 800ded6:	d122      	bne.n	800df1e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	68db      	ldr	r3, [r3, #12]
 800dede:	f003 0302 	and.w	r3, r3, #2
 800dee2:	2b02      	cmp	r3, #2
 800dee4:	d11b      	bne.n	800df1e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	f06f 0202 	mvn.w	r2, #2
 800deee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	2201      	movs	r2, #1
 800def4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	699b      	ldr	r3, [r3, #24]
 800defc:	f003 0303 	and.w	r3, r3, #3
 800df00:	2b00      	cmp	r3, #0
 800df02:	d003      	beq.n	800df0c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800df04:	6878      	ldr	r0, [r7, #4]
 800df06:	f000 f9b2 	bl	800e26e <HAL_TIM_IC_CaptureCallback>
 800df0a:	e005      	b.n	800df18 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800df0c:	6878      	ldr	r0, [r7, #4]
 800df0e:	f000 f9a4 	bl	800e25a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800df12:	6878      	ldr	r0, [r7, #4]
 800df14:	f000 f9b5 	bl	800e282 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	2200      	movs	r2, #0
 800df1c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	691b      	ldr	r3, [r3, #16]
 800df24:	f003 0304 	and.w	r3, r3, #4
 800df28:	2b04      	cmp	r3, #4
 800df2a:	d122      	bne.n	800df72 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	68db      	ldr	r3, [r3, #12]
 800df32:	f003 0304 	and.w	r3, r3, #4
 800df36:	2b04      	cmp	r3, #4
 800df38:	d11b      	bne.n	800df72 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	f06f 0204 	mvn.w	r2, #4
 800df42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	2202      	movs	r2, #2
 800df48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	699b      	ldr	r3, [r3, #24]
 800df50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800df54:	2b00      	cmp	r3, #0
 800df56:	d003      	beq.n	800df60 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800df58:	6878      	ldr	r0, [r7, #4]
 800df5a:	f000 f988 	bl	800e26e <HAL_TIM_IC_CaptureCallback>
 800df5e:	e005      	b.n	800df6c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800df60:	6878      	ldr	r0, [r7, #4]
 800df62:	f000 f97a 	bl	800e25a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800df66:	6878      	ldr	r0, [r7, #4]
 800df68:	f000 f98b 	bl	800e282 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	2200      	movs	r2, #0
 800df70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	691b      	ldr	r3, [r3, #16]
 800df78:	f003 0308 	and.w	r3, r3, #8
 800df7c:	2b08      	cmp	r3, #8
 800df7e:	d122      	bne.n	800dfc6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	68db      	ldr	r3, [r3, #12]
 800df86:	f003 0308 	and.w	r3, r3, #8
 800df8a:	2b08      	cmp	r3, #8
 800df8c:	d11b      	bne.n	800dfc6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	f06f 0208 	mvn.w	r2, #8
 800df96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	2204      	movs	r2, #4
 800df9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	69db      	ldr	r3, [r3, #28]
 800dfa4:	f003 0303 	and.w	r3, r3, #3
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d003      	beq.n	800dfb4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dfac:	6878      	ldr	r0, [r7, #4]
 800dfae:	f000 f95e 	bl	800e26e <HAL_TIM_IC_CaptureCallback>
 800dfb2:	e005      	b.n	800dfc0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dfb4:	6878      	ldr	r0, [r7, #4]
 800dfb6:	f000 f950 	bl	800e25a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dfba:	6878      	ldr	r0, [r7, #4]
 800dfbc:	f000 f961 	bl	800e282 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	691b      	ldr	r3, [r3, #16]
 800dfcc:	f003 0310 	and.w	r3, r3, #16
 800dfd0:	2b10      	cmp	r3, #16
 800dfd2:	d122      	bne.n	800e01a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	68db      	ldr	r3, [r3, #12]
 800dfda:	f003 0310 	and.w	r3, r3, #16
 800dfde:	2b10      	cmp	r3, #16
 800dfe0:	d11b      	bne.n	800e01a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	f06f 0210 	mvn.w	r2, #16
 800dfea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	2208      	movs	r2, #8
 800dff0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	69db      	ldr	r3, [r3, #28]
 800dff8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d003      	beq.n	800e008 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e000:	6878      	ldr	r0, [r7, #4]
 800e002:	f000 f934 	bl	800e26e <HAL_TIM_IC_CaptureCallback>
 800e006:	e005      	b.n	800e014 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e008:	6878      	ldr	r0, [r7, #4]
 800e00a:	f000 f926 	bl	800e25a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e00e:	6878      	ldr	r0, [r7, #4]
 800e010:	f000 f937 	bl	800e282 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	2200      	movs	r2, #0
 800e018:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	691b      	ldr	r3, [r3, #16]
 800e020:	f003 0301 	and.w	r3, r3, #1
 800e024:	2b01      	cmp	r3, #1
 800e026:	d10e      	bne.n	800e046 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	68db      	ldr	r3, [r3, #12]
 800e02e:	f003 0301 	and.w	r3, r3, #1
 800e032:	2b01      	cmp	r3, #1
 800e034:	d107      	bne.n	800e046 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	f06f 0201 	mvn.w	r2, #1
 800e03e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e040:	6878      	ldr	r0, [r7, #4]
 800e042:	f7f7 fab1 	bl	80055a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	691b      	ldr	r3, [r3, #16]
 800e04c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e050:	2b80      	cmp	r3, #128	; 0x80
 800e052:	d10e      	bne.n	800e072 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	68db      	ldr	r3, [r3, #12]
 800e05a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e05e:	2b80      	cmp	r3, #128	; 0x80
 800e060:	d107      	bne.n	800e072 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e06a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e06c:	6878      	ldr	r0, [r7, #4]
 800e06e:	f000 fadd 	bl	800e62c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	691b      	ldr	r3, [r3, #16]
 800e078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e07c:	2b40      	cmp	r3, #64	; 0x40
 800e07e:	d10e      	bne.n	800e09e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	68db      	ldr	r3, [r3, #12]
 800e086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e08a:	2b40      	cmp	r3, #64	; 0x40
 800e08c:	d107      	bne.n	800e09e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e096:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e098:	6878      	ldr	r0, [r7, #4]
 800e09a:	f000 f8fc 	bl	800e296 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	691b      	ldr	r3, [r3, #16]
 800e0a4:	f003 0320 	and.w	r3, r3, #32
 800e0a8:	2b20      	cmp	r3, #32
 800e0aa:	d10e      	bne.n	800e0ca <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	68db      	ldr	r3, [r3, #12]
 800e0b2:	f003 0320 	and.w	r3, r3, #32
 800e0b6:	2b20      	cmp	r3, #32
 800e0b8:	d107      	bne.n	800e0ca <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	f06f 0220 	mvn.w	r2, #32
 800e0c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e0c4:	6878      	ldr	r0, [r7, #4]
 800e0c6:	f000 faa7 	bl	800e618 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e0ca:	bf00      	nop
 800e0cc:	3708      	adds	r7, #8
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	bd80      	pop	{r7, pc}

0800e0d2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e0d2:	b580      	push	{r7, lr}
 800e0d4:	b084      	sub	sp, #16
 800e0d6:	af00      	add	r7, sp, #0
 800e0d8:	6078      	str	r0, [r7, #4]
 800e0da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e0e2:	2b01      	cmp	r3, #1
 800e0e4:	d101      	bne.n	800e0ea <HAL_TIM_ConfigClockSource+0x18>
 800e0e6:	2302      	movs	r3, #2
 800e0e8:	e0b3      	b.n	800e252 <HAL_TIM_ConfigClockSource+0x180>
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	2201      	movs	r2, #1
 800e0ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	2202      	movs	r2, #2
 800e0f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	689b      	ldr	r3, [r3, #8]
 800e100:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800e108:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e110:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	68fa      	ldr	r2, [r7, #12]
 800e118:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e11a:	683b      	ldr	r3, [r7, #0]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e122:	d03e      	beq.n	800e1a2 <HAL_TIM_ConfigClockSource+0xd0>
 800e124:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e128:	f200 8087 	bhi.w	800e23a <HAL_TIM_ConfigClockSource+0x168>
 800e12c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e130:	f000 8085 	beq.w	800e23e <HAL_TIM_ConfigClockSource+0x16c>
 800e134:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e138:	d87f      	bhi.n	800e23a <HAL_TIM_ConfigClockSource+0x168>
 800e13a:	2b70      	cmp	r3, #112	; 0x70
 800e13c:	d01a      	beq.n	800e174 <HAL_TIM_ConfigClockSource+0xa2>
 800e13e:	2b70      	cmp	r3, #112	; 0x70
 800e140:	d87b      	bhi.n	800e23a <HAL_TIM_ConfigClockSource+0x168>
 800e142:	2b60      	cmp	r3, #96	; 0x60
 800e144:	d050      	beq.n	800e1e8 <HAL_TIM_ConfigClockSource+0x116>
 800e146:	2b60      	cmp	r3, #96	; 0x60
 800e148:	d877      	bhi.n	800e23a <HAL_TIM_ConfigClockSource+0x168>
 800e14a:	2b50      	cmp	r3, #80	; 0x50
 800e14c:	d03c      	beq.n	800e1c8 <HAL_TIM_ConfigClockSource+0xf6>
 800e14e:	2b50      	cmp	r3, #80	; 0x50
 800e150:	d873      	bhi.n	800e23a <HAL_TIM_ConfigClockSource+0x168>
 800e152:	2b40      	cmp	r3, #64	; 0x40
 800e154:	d058      	beq.n	800e208 <HAL_TIM_ConfigClockSource+0x136>
 800e156:	2b40      	cmp	r3, #64	; 0x40
 800e158:	d86f      	bhi.n	800e23a <HAL_TIM_ConfigClockSource+0x168>
 800e15a:	2b30      	cmp	r3, #48	; 0x30
 800e15c:	d064      	beq.n	800e228 <HAL_TIM_ConfigClockSource+0x156>
 800e15e:	2b30      	cmp	r3, #48	; 0x30
 800e160:	d86b      	bhi.n	800e23a <HAL_TIM_ConfigClockSource+0x168>
 800e162:	2b20      	cmp	r3, #32
 800e164:	d060      	beq.n	800e228 <HAL_TIM_ConfigClockSource+0x156>
 800e166:	2b20      	cmp	r3, #32
 800e168:	d867      	bhi.n	800e23a <HAL_TIM_ConfigClockSource+0x168>
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d05c      	beq.n	800e228 <HAL_TIM_ConfigClockSource+0x156>
 800e16e:	2b10      	cmp	r3, #16
 800e170:	d05a      	beq.n	800e228 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800e172:	e062      	b.n	800e23a <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	6818      	ldr	r0, [r3, #0]
 800e178:	683b      	ldr	r3, [r7, #0]
 800e17a:	6899      	ldr	r1, [r3, #8]
 800e17c:	683b      	ldr	r3, [r7, #0]
 800e17e:	685a      	ldr	r2, [r3, #4]
 800e180:	683b      	ldr	r3, [r7, #0]
 800e182:	68db      	ldr	r3, [r3, #12]
 800e184:	f000 f9ac 	bl	800e4e0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	689b      	ldr	r3, [r3, #8]
 800e18e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e196:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	68fa      	ldr	r2, [r7, #12]
 800e19e:	609a      	str	r2, [r3, #8]
      break;
 800e1a0:	e04e      	b.n	800e240 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	6818      	ldr	r0, [r3, #0]
 800e1a6:	683b      	ldr	r3, [r7, #0]
 800e1a8:	6899      	ldr	r1, [r3, #8]
 800e1aa:	683b      	ldr	r3, [r7, #0]
 800e1ac:	685a      	ldr	r2, [r3, #4]
 800e1ae:	683b      	ldr	r3, [r7, #0]
 800e1b0:	68db      	ldr	r3, [r3, #12]
 800e1b2:	f000 f995 	bl	800e4e0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	689a      	ldr	r2, [r3, #8]
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e1c4:	609a      	str	r2, [r3, #8]
      break;
 800e1c6:	e03b      	b.n	800e240 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	6818      	ldr	r0, [r3, #0]
 800e1cc:	683b      	ldr	r3, [r7, #0]
 800e1ce:	6859      	ldr	r1, [r3, #4]
 800e1d0:	683b      	ldr	r3, [r7, #0]
 800e1d2:	68db      	ldr	r3, [r3, #12]
 800e1d4:	461a      	mov	r2, r3
 800e1d6:	f000 f909 	bl	800e3ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	2150      	movs	r1, #80	; 0x50
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	f000 f962 	bl	800e4aa <TIM_ITRx_SetConfig>
      break;
 800e1e6:	e02b      	b.n	800e240 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	6818      	ldr	r0, [r3, #0]
 800e1ec:	683b      	ldr	r3, [r7, #0]
 800e1ee:	6859      	ldr	r1, [r3, #4]
 800e1f0:	683b      	ldr	r3, [r7, #0]
 800e1f2:	68db      	ldr	r3, [r3, #12]
 800e1f4:	461a      	mov	r2, r3
 800e1f6:	f000 f928 	bl	800e44a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	2160      	movs	r1, #96	; 0x60
 800e200:	4618      	mov	r0, r3
 800e202:	f000 f952 	bl	800e4aa <TIM_ITRx_SetConfig>
      break;
 800e206:	e01b      	b.n	800e240 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	6818      	ldr	r0, [r3, #0]
 800e20c:	683b      	ldr	r3, [r7, #0]
 800e20e:	6859      	ldr	r1, [r3, #4]
 800e210:	683b      	ldr	r3, [r7, #0]
 800e212:	68db      	ldr	r3, [r3, #12]
 800e214:	461a      	mov	r2, r3
 800e216:	f000 f8e9 	bl	800e3ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	2140      	movs	r1, #64	; 0x40
 800e220:	4618      	mov	r0, r3
 800e222:	f000 f942 	bl	800e4aa <TIM_ITRx_SetConfig>
      break;
 800e226:	e00b      	b.n	800e240 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681a      	ldr	r2, [r3, #0]
 800e22c:	683b      	ldr	r3, [r7, #0]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	4619      	mov	r1, r3
 800e232:	4610      	mov	r0, r2
 800e234:	f000 f939 	bl	800e4aa <TIM_ITRx_SetConfig>
      break;
 800e238:	e002      	b.n	800e240 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800e23a:	bf00      	nop
 800e23c:	e000      	b.n	800e240 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800e23e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	2201      	movs	r2, #1
 800e244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	2200      	movs	r2, #0
 800e24c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e250:	2300      	movs	r3, #0
}
 800e252:	4618      	mov	r0, r3
 800e254:	3710      	adds	r7, #16
 800e256:	46bd      	mov	sp, r7
 800e258:	bd80      	pop	{r7, pc}

0800e25a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e25a:	b480      	push	{r7}
 800e25c:	b083      	sub	sp, #12
 800e25e:	af00      	add	r7, sp, #0
 800e260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e262:	bf00      	nop
 800e264:	370c      	adds	r7, #12
 800e266:	46bd      	mov	sp, r7
 800e268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26c:	4770      	bx	lr

0800e26e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e26e:	b480      	push	{r7}
 800e270:	b083      	sub	sp, #12
 800e272:	af00      	add	r7, sp, #0
 800e274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e276:	bf00      	nop
 800e278:	370c      	adds	r7, #12
 800e27a:	46bd      	mov	sp, r7
 800e27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e280:	4770      	bx	lr

0800e282 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e282:	b480      	push	{r7}
 800e284:	b083      	sub	sp, #12
 800e286:	af00      	add	r7, sp, #0
 800e288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e28a:	bf00      	nop
 800e28c:	370c      	adds	r7, #12
 800e28e:	46bd      	mov	sp, r7
 800e290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e294:	4770      	bx	lr

0800e296 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e296:	b480      	push	{r7}
 800e298:	b083      	sub	sp, #12
 800e29a:	af00      	add	r7, sp, #0
 800e29c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e29e:	bf00      	nop
 800e2a0:	370c      	adds	r7, #12
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a8:	4770      	bx	lr
	...

0800e2ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e2ac:	b480      	push	{r7}
 800e2ae:	b085      	sub	sp, #20
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
 800e2b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	4a40      	ldr	r2, [pc, #256]	; (800e3c0 <TIM_Base_SetConfig+0x114>)
 800e2c0:	4293      	cmp	r3, r2
 800e2c2:	d013      	beq.n	800e2ec <TIM_Base_SetConfig+0x40>
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e2ca:	d00f      	beq.n	800e2ec <TIM_Base_SetConfig+0x40>
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	4a3d      	ldr	r2, [pc, #244]	; (800e3c4 <TIM_Base_SetConfig+0x118>)
 800e2d0:	4293      	cmp	r3, r2
 800e2d2:	d00b      	beq.n	800e2ec <TIM_Base_SetConfig+0x40>
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	4a3c      	ldr	r2, [pc, #240]	; (800e3c8 <TIM_Base_SetConfig+0x11c>)
 800e2d8:	4293      	cmp	r3, r2
 800e2da:	d007      	beq.n	800e2ec <TIM_Base_SetConfig+0x40>
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	4a3b      	ldr	r2, [pc, #236]	; (800e3cc <TIM_Base_SetConfig+0x120>)
 800e2e0:	4293      	cmp	r3, r2
 800e2e2:	d003      	beq.n	800e2ec <TIM_Base_SetConfig+0x40>
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	4a3a      	ldr	r2, [pc, #232]	; (800e3d0 <TIM_Base_SetConfig+0x124>)
 800e2e8:	4293      	cmp	r3, r2
 800e2ea:	d108      	bne.n	800e2fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e2f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e2f4:	683b      	ldr	r3, [r7, #0]
 800e2f6:	685b      	ldr	r3, [r3, #4]
 800e2f8:	68fa      	ldr	r2, [r7, #12]
 800e2fa:	4313      	orrs	r3, r2
 800e2fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	4a2f      	ldr	r2, [pc, #188]	; (800e3c0 <TIM_Base_SetConfig+0x114>)
 800e302:	4293      	cmp	r3, r2
 800e304:	d02b      	beq.n	800e35e <TIM_Base_SetConfig+0xb2>
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e30c:	d027      	beq.n	800e35e <TIM_Base_SetConfig+0xb2>
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	4a2c      	ldr	r2, [pc, #176]	; (800e3c4 <TIM_Base_SetConfig+0x118>)
 800e312:	4293      	cmp	r3, r2
 800e314:	d023      	beq.n	800e35e <TIM_Base_SetConfig+0xb2>
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	4a2b      	ldr	r2, [pc, #172]	; (800e3c8 <TIM_Base_SetConfig+0x11c>)
 800e31a:	4293      	cmp	r3, r2
 800e31c:	d01f      	beq.n	800e35e <TIM_Base_SetConfig+0xb2>
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	4a2a      	ldr	r2, [pc, #168]	; (800e3cc <TIM_Base_SetConfig+0x120>)
 800e322:	4293      	cmp	r3, r2
 800e324:	d01b      	beq.n	800e35e <TIM_Base_SetConfig+0xb2>
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	4a29      	ldr	r2, [pc, #164]	; (800e3d0 <TIM_Base_SetConfig+0x124>)
 800e32a:	4293      	cmp	r3, r2
 800e32c:	d017      	beq.n	800e35e <TIM_Base_SetConfig+0xb2>
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	4a28      	ldr	r2, [pc, #160]	; (800e3d4 <TIM_Base_SetConfig+0x128>)
 800e332:	4293      	cmp	r3, r2
 800e334:	d013      	beq.n	800e35e <TIM_Base_SetConfig+0xb2>
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	4a27      	ldr	r2, [pc, #156]	; (800e3d8 <TIM_Base_SetConfig+0x12c>)
 800e33a:	4293      	cmp	r3, r2
 800e33c:	d00f      	beq.n	800e35e <TIM_Base_SetConfig+0xb2>
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	4a26      	ldr	r2, [pc, #152]	; (800e3dc <TIM_Base_SetConfig+0x130>)
 800e342:	4293      	cmp	r3, r2
 800e344:	d00b      	beq.n	800e35e <TIM_Base_SetConfig+0xb2>
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	4a25      	ldr	r2, [pc, #148]	; (800e3e0 <TIM_Base_SetConfig+0x134>)
 800e34a:	4293      	cmp	r3, r2
 800e34c:	d007      	beq.n	800e35e <TIM_Base_SetConfig+0xb2>
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	4a24      	ldr	r2, [pc, #144]	; (800e3e4 <TIM_Base_SetConfig+0x138>)
 800e352:	4293      	cmp	r3, r2
 800e354:	d003      	beq.n	800e35e <TIM_Base_SetConfig+0xb2>
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	4a23      	ldr	r2, [pc, #140]	; (800e3e8 <TIM_Base_SetConfig+0x13c>)
 800e35a:	4293      	cmp	r3, r2
 800e35c:	d108      	bne.n	800e370 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e364:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e366:	683b      	ldr	r3, [r7, #0]
 800e368:	68db      	ldr	r3, [r3, #12]
 800e36a:	68fa      	ldr	r2, [r7, #12]
 800e36c:	4313      	orrs	r3, r2
 800e36e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e376:	683b      	ldr	r3, [r7, #0]
 800e378:	695b      	ldr	r3, [r3, #20]
 800e37a:	4313      	orrs	r3, r2
 800e37c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	68fa      	ldr	r2, [r7, #12]
 800e382:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e384:	683b      	ldr	r3, [r7, #0]
 800e386:	689a      	ldr	r2, [r3, #8]
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e38c:	683b      	ldr	r3, [r7, #0]
 800e38e:	681a      	ldr	r2, [r3, #0]
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	4a0a      	ldr	r2, [pc, #40]	; (800e3c0 <TIM_Base_SetConfig+0x114>)
 800e398:	4293      	cmp	r3, r2
 800e39a:	d003      	beq.n	800e3a4 <TIM_Base_SetConfig+0xf8>
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	4a0c      	ldr	r2, [pc, #48]	; (800e3d0 <TIM_Base_SetConfig+0x124>)
 800e3a0:	4293      	cmp	r3, r2
 800e3a2:	d103      	bne.n	800e3ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e3a4:	683b      	ldr	r3, [r7, #0]
 800e3a6:	691a      	ldr	r2, [r3, #16]
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	2201      	movs	r2, #1
 800e3b0:	615a      	str	r2, [r3, #20]
}
 800e3b2:	bf00      	nop
 800e3b4:	3714      	adds	r7, #20
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3bc:	4770      	bx	lr
 800e3be:	bf00      	nop
 800e3c0:	40010000 	.word	0x40010000
 800e3c4:	40000400 	.word	0x40000400
 800e3c8:	40000800 	.word	0x40000800
 800e3cc:	40000c00 	.word	0x40000c00
 800e3d0:	40010400 	.word	0x40010400
 800e3d4:	40014000 	.word	0x40014000
 800e3d8:	40014400 	.word	0x40014400
 800e3dc:	40014800 	.word	0x40014800
 800e3e0:	40001800 	.word	0x40001800
 800e3e4:	40001c00 	.word	0x40001c00
 800e3e8:	40002000 	.word	0x40002000

0800e3ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e3ec:	b480      	push	{r7}
 800e3ee:	b087      	sub	sp, #28
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	60f8      	str	r0, [r7, #12]
 800e3f4:	60b9      	str	r1, [r7, #8]
 800e3f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	6a1b      	ldr	r3, [r3, #32]
 800e3fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	6a1b      	ldr	r3, [r3, #32]
 800e402:	f023 0201 	bic.w	r2, r3, #1
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	699b      	ldr	r3, [r3, #24]
 800e40e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e410:	693b      	ldr	r3, [r7, #16]
 800e412:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e416:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	011b      	lsls	r3, r3, #4
 800e41c:	693a      	ldr	r2, [r7, #16]
 800e41e:	4313      	orrs	r3, r2
 800e420:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e422:	697b      	ldr	r3, [r7, #20]
 800e424:	f023 030a 	bic.w	r3, r3, #10
 800e428:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e42a:	697a      	ldr	r2, [r7, #20]
 800e42c:	68bb      	ldr	r3, [r7, #8]
 800e42e:	4313      	orrs	r3, r2
 800e430:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	693a      	ldr	r2, [r7, #16]
 800e436:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	697a      	ldr	r2, [r7, #20]
 800e43c:	621a      	str	r2, [r3, #32]
}
 800e43e:	bf00      	nop
 800e440:	371c      	adds	r7, #28
 800e442:	46bd      	mov	sp, r7
 800e444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e448:	4770      	bx	lr

0800e44a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e44a:	b480      	push	{r7}
 800e44c:	b087      	sub	sp, #28
 800e44e:	af00      	add	r7, sp, #0
 800e450:	60f8      	str	r0, [r7, #12]
 800e452:	60b9      	str	r1, [r7, #8]
 800e454:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	6a1b      	ldr	r3, [r3, #32]
 800e45a:	f023 0210 	bic.w	r2, r3, #16
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	699b      	ldr	r3, [r3, #24]
 800e466:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	6a1b      	ldr	r3, [r3, #32]
 800e46c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e46e:	697b      	ldr	r3, [r7, #20]
 800e470:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e474:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	031b      	lsls	r3, r3, #12
 800e47a:	697a      	ldr	r2, [r7, #20]
 800e47c:	4313      	orrs	r3, r2
 800e47e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e480:	693b      	ldr	r3, [r7, #16]
 800e482:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e486:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e488:	68bb      	ldr	r3, [r7, #8]
 800e48a:	011b      	lsls	r3, r3, #4
 800e48c:	693a      	ldr	r2, [r7, #16]
 800e48e:	4313      	orrs	r3, r2
 800e490:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	697a      	ldr	r2, [r7, #20]
 800e496:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	693a      	ldr	r2, [r7, #16]
 800e49c:	621a      	str	r2, [r3, #32]
}
 800e49e:	bf00      	nop
 800e4a0:	371c      	adds	r7, #28
 800e4a2:	46bd      	mov	sp, r7
 800e4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a8:	4770      	bx	lr

0800e4aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e4aa:	b480      	push	{r7}
 800e4ac:	b085      	sub	sp, #20
 800e4ae:	af00      	add	r7, sp, #0
 800e4b0:	6078      	str	r0, [r7, #4]
 800e4b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	689b      	ldr	r3, [r3, #8]
 800e4b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e4c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e4c2:	683a      	ldr	r2, [r7, #0]
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	4313      	orrs	r3, r2
 800e4c8:	f043 0307 	orr.w	r3, r3, #7
 800e4cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	68fa      	ldr	r2, [r7, #12]
 800e4d2:	609a      	str	r2, [r3, #8]
}
 800e4d4:	bf00      	nop
 800e4d6:	3714      	adds	r7, #20
 800e4d8:	46bd      	mov	sp, r7
 800e4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4de:	4770      	bx	lr

0800e4e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e4e0:	b480      	push	{r7}
 800e4e2:	b087      	sub	sp, #28
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	60f8      	str	r0, [r7, #12]
 800e4e8:	60b9      	str	r1, [r7, #8]
 800e4ea:	607a      	str	r2, [r7, #4]
 800e4ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	689b      	ldr	r3, [r3, #8]
 800e4f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e4f4:	697b      	ldr	r3, [r7, #20]
 800e4f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e4fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e4fc:	683b      	ldr	r3, [r7, #0]
 800e4fe:	021a      	lsls	r2, r3, #8
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	431a      	orrs	r2, r3
 800e504:	68bb      	ldr	r3, [r7, #8]
 800e506:	4313      	orrs	r3, r2
 800e508:	697a      	ldr	r2, [r7, #20]
 800e50a:	4313      	orrs	r3, r2
 800e50c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	697a      	ldr	r2, [r7, #20]
 800e512:	609a      	str	r2, [r3, #8]
}
 800e514:	bf00      	nop
 800e516:	371c      	adds	r7, #28
 800e518:	46bd      	mov	sp, r7
 800e51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51e:	4770      	bx	lr

0800e520 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e520:	b480      	push	{r7}
 800e522:	b085      	sub	sp, #20
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
 800e528:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e530:	2b01      	cmp	r3, #1
 800e532:	d101      	bne.n	800e538 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e534:	2302      	movs	r3, #2
 800e536:	e05a      	b.n	800e5ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	2201      	movs	r2, #1
 800e53c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	2202      	movs	r2, #2
 800e544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	685b      	ldr	r3, [r3, #4]
 800e54e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	689b      	ldr	r3, [r3, #8]
 800e556:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e55e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e560:	683b      	ldr	r3, [r7, #0]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	68fa      	ldr	r2, [r7, #12]
 800e566:	4313      	orrs	r3, r2
 800e568:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	68fa      	ldr	r2, [r7, #12]
 800e570:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	4a21      	ldr	r2, [pc, #132]	; (800e5fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800e578:	4293      	cmp	r3, r2
 800e57a:	d022      	beq.n	800e5c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e584:	d01d      	beq.n	800e5c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	4a1d      	ldr	r2, [pc, #116]	; (800e600 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800e58c:	4293      	cmp	r3, r2
 800e58e:	d018      	beq.n	800e5c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	4a1b      	ldr	r2, [pc, #108]	; (800e604 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800e596:	4293      	cmp	r3, r2
 800e598:	d013      	beq.n	800e5c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	4a1a      	ldr	r2, [pc, #104]	; (800e608 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800e5a0:	4293      	cmp	r3, r2
 800e5a2:	d00e      	beq.n	800e5c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	4a18      	ldr	r2, [pc, #96]	; (800e60c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800e5aa:	4293      	cmp	r3, r2
 800e5ac:	d009      	beq.n	800e5c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	4a17      	ldr	r2, [pc, #92]	; (800e610 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800e5b4:	4293      	cmp	r3, r2
 800e5b6:	d004      	beq.n	800e5c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	4a15      	ldr	r2, [pc, #84]	; (800e614 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800e5be:	4293      	cmp	r3, r2
 800e5c0:	d10c      	bne.n	800e5dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e5c2:	68bb      	ldr	r3, [r7, #8]
 800e5c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e5c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e5ca:	683b      	ldr	r3, [r7, #0]
 800e5cc:	685b      	ldr	r3, [r3, #4]
 800e5ce:	68ba      	ldr	r2, [r7, #8]
 800e5d0:	4313      	orrs	r3, r2
 800e5d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	68ba      	ldr	r2, [r7, #8]
 800e5da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	2201      	movs	r2, #1
 800e5e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e5ec:	2300      	movs	r3, #0
}
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	3714      	adds	r7, #20
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f8:	4770      	bx	lr
 800e5fa:	bf00      	nop
 800e5fc:	40010000 	.word	0x40010000
 800e600:	40000400 	.word	0x40000400
 800e604:	40000800 	.word	0x40000800
 800e608:	40000c00 	.word	0x40000c00
 800e60c:	40010400 	.word	0x40010400
 800e610:	40014000 	.word	0x40014000
 800e614:	40001800 	.word	0x40001800

0800e618 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e618:	b480      	push	{r7}
 800e61a:	b083      	sub	sp, #12
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e620:	bf00      	nop
 800e622:	370c      	adds	r7, #12
 800e624:	46bd      	mov	sp, r7
 800e626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62a:	4770      	bx	lr

0800e62c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e62c:	b480      	push	{r7}
 800e62e:	b083      	sub	sp, #12
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e634:	bf00      	nop
 800e636:	370c      	adds	r7, #12
 800e638:	46bd      	mov	sp, r7
 800e63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e63e:	4770      	bx	lr

0800e640 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e640:	b580      	push	{r7, lr}
 800e642:	b082      	sub	sp, #8
 800e644:	af00      	add	r7, sp, #0
 800e646:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d101      	bne.n	800e652 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e64e:	2301      	movs	r3, #1
 800e650:	e03f      	b.n	800e6d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e658:	b2db      	uxtb	r3, r3
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d106      	bne.n	800e66c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	2200      	movs	r2, #0
 800e662:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e666:	6878      	ldr	r0, [r7, #4]
 800e668:	f7fc fdce 	bl	800b208 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	2224      	movs	r2, #36	; 0x24
 800e670:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	68da      	ldr	r2, [r3, #12]
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e682:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800e684:	6878      	ldr	r0, [r7, #4]
 800e686:	f000 fb6b 	bl	800ed60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	691a      	ldr	r2, [r3, #16]
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e698:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	695a      	ldr	r2, [r3, #20]
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e6a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	68da      	ldr	r2, [r3, #12]
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e6b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	2200      	movs	r2, #0
 800e6be:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	2220      	movs	r2, #32
 800e6c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	2220      	movs	r2, #32
 800e6cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800e6d0:	2300      	movs	r3, #0
}
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	3708      	adds	r7, #8
 800e6d6:	46bd      	mov	sp, r7
 800e6d8:	bd80      	pop	{r7, pc}
	...

0800e6dc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b086      	sub	sp, #24
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	60f8      	str	r0, [r7, #12]
 800e6e4:	60b9      	str	r1, [r7, #8]
 800e6e6:	4613      	mov	r3, r2
 800e6e8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e6f0:	b2db      	uxtb	r3, r3
 800e6f2:	2b20      	cmp	r3, #32
 800e6f4:	d153      	bne.n	800e79e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800e6f6:	68bb      	ldr	r3, [r7, #8]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d002      	beq.n	800e702 <HAL_UART_Transmit_DMA+0x26>
 800e6fc:	88fb      	ldrh	r3, [r7, #6]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d101      	bne.n	800e706 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800e702:	2301      	movs	r3, #1
 800e704:	e04c      	b.n	800e7a0 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e70c:	2b01      	cmp	r3, #1
 800e70e:	d101      	bne.n	800e714 <HAL_UART_Transmit_DMA+0x38>
 800e710:	2302      	movs	r3, #2
 800e712:	e045      	b.n	800e7a0 <HAL_UART_Transmit_DMA+0xc4>
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	2201      	movs	r2, #1
 800e718:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800e71c:	68ba      	ldr	r2, [r7, #8]
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	88fa      	ldrh	r2, [r7, #6]
 800e726:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	88fa      	ldrh	r2, [r7, #6]
 800e72c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	2200      	movs	r2, #0
 800e732:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	2221      	movs	r2, #33	; 0x21
 800e738:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e740:	4a19      	ldr	r2, [pc, #100]	; (800e7a8 <HAL_UART_Transmit_DMA+0xcc>)
 800e742:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e748:	4a18      	ldr	r2, [pc, #96]	; (800e7ac <HAL_UART_Transmit_DMA+0xd0>)
 800e74a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e750:	4a17      	ldr	r2, [pc, #92]	; (800e7b0 <HAL_UART_Transmit_DMA+0xd4>)
 800e752:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e758:	2200      	movs	r2, #0
 800e75a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800e75c:	f107 0308 	add.w	r3, r7, #8
 800e760:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e766:	697b      	ldr	r3, [r7, #20]
 800e768:	6819      	ldr	r1, [r3, #0]
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	3304      	adds	r3, #4
 800e770:	461a      	mov	r2, r3
 800e772:	88fb      	ldrh	r3, [r7, #6]
 800e774:	f7fd f812 	bl	800b79c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e780:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	2200      	movs	r2, #0
 800e786:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	695a      	ldr	r2, [r3, #20]
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e798:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800e79a:	2300      	movs	r3, #0
 800e79c:	e000      	b.n	800e7a0 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800e79e:	2302      	movs	r3, #2
  }
}
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	3718      	adds	r7, #24
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	bd80      	pop	{r7, pc}
 800e7a8:	0800e9f1 	.word	0x0800e9f1
 800e7ac:	0800ea43 	.word	0x0800ea43
 800e7b0:	0800ea5f 	.word	0x0800ea5f

0800e7b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b088      	sub	sp, #32
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	68db      	ldr	r3, [r3, #12]
 800e7ca:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	695b      	ldr	r3, [r3, #20]
 800e7d2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800e7d4:	2300      	movs	r3, #0
 800e7d6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800e7d8:	2300      	movs	r3, #0
 800e7da:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800e7dc:	69fb      	ldr	r3, [r7, #28]
 800e7de:	f003 030f 	and.w	r3, r3, #15
 800e7e2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800e7e4:	693b      	ldr	r3, [r7, #16]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d10d      	bne.n	800e806 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e7ea:	69fb      	ldr	r3, [r7, #28]
 800e7ec:	f003 0320 	and.w	r3, r3, #32
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d008      	beq.n	800e806 <HAL_UART_IRQHandler+0x52>
 800e7f4:	69bb      	ldr	r3, [r7, #24]
 800e7f6:	f003 0320 	and.w	r3, r3, #32
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d003      	beq.n	800e806 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800e7fe:	6878      	ldr	r0, [r7, #4]
 800e800:	f000 fa2d 	bl	800ec5e <UART_Receive_IT>
      return;
 800e804:	e0d0      	b.n	800e9a8 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800e806:	693b      	ldr	r3, [r7, #16]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	f000 80b0 	beq.w	800e96e <HAL_UART_IRQHandler+0x1ba>
 800e80e:	697b      	ldr	r3, [r7, #20]
 800e810:	f003 0301 	and.w	r3, r3, #1
 800e814:	2b00      	cmp	r3, #0
 800e816:	d105      	bne.n	800e824 <HAL_UART_IRQHandler+0x70>
 800e818:	69bb      	ldr	r3, [r7, #24]
 800e81a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800e81e:	2b00      	cmp	r3, #0
 800e820:	f000 80a5 	beq.w	800e96e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800e824:	69fb      	ldr	r3, [r7, #28]
 800e826:	f003 0301 	and.w	r3, r3, #1
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d00a      	beq.n	800e844 <HAL_UART_IRQHandler+0x90>
 800e82e:	69bb      	ldr	r3, [r7, #24]
 800e830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e834:	2b00      	cmp	r3, #0
 800e836:	d005      	beq.n	800e844 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e83c:	f043 0201 	orr.w	r2, r3, #1
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e844:	69fb      	ldr	r3, [r7, #28]
 800e846:	f003 0304 	and.w	r3, r3, #4
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d00a      	beq.n	800e864 <HAL_UART_IRQHandler+0xb0>
 800e84e:	697b      	ldr	r3, [r7, #20]
 800e850:	f003 0301 	and.w	r3, r3, #1
 800e854:	2b00      	cmp	r3, #0
 800e856:	d005      	beq.n	800e864 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e85c:	f043 0202 	orr.w	r2, r3, #2
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e864:	69fb      	ldr	r3, [r7, #28]
 800e866:	f003 0302 	and.w	r3, r3, #2
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d00a      	beq.n	800e884 <HAL_UART_IRQHandler+0xd0>
 800e86e:	697b      	ldr	r3, [r7, #20]
 800e870:	f003 0301 	and.w	r3, r3, #1
 800e874:	2b00      	cmp	r3, #0
 800e876:	d005      	beq.n	800e884 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e87c:	f043 0204 	orr.w	r2, r3, #4
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800e884:	69fb      	ldr	r3, [r7, #28]
 800e886:	f003 0308 	and.w	r3, r3, #8
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d00f      	beq.n	800e8ae <HAL_UART_IRQHandler+0xfa>
 800e88e:	69bb      	ldr	r3, [r7, #24]
 800e890:	f003 0320 	and.w	r3, r3, #32
 800e894:	2b00      	cmp	r3, #0
 800e896:	d104      	bne.n	800e8a2 <HAL_UART_IRQHandler+0xee>
 800e898:	697b      	ldr	r3, [r7, #20]
 800e89a:	f003 0301 	and.w	r3, r3, #1
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d005      	beq.n	800e8ae <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8a6:	f043 0208 	orr.w	r2, r3, #8
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d077      	beq.n	800e9a6 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e8b6:	69fb      	ldr	r3, [r7, #28]
 800e8b8:	f003 0320 	and.w	r3, r3, #32
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d007      	beq.n	800e8d0 <HAL_UART_IRQHandler+0x11c>
 800e8c0:	69bb      	ldr	r3, [r7, #24]
 800e8c2:	f003 0320 	and.w	r3, r3, #32
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d002      	beq.n	800e8d0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800e8ca:	6878      	ldr	r0, [r7, #4]
 800e8cc:	f000 f9c7 	bl	800ec5e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	695b      	ldr	r3, [r3, #20]
 800e8d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8da:	2b40      	cmp	r3, #64	; 0x40
 800e8dc:	bf0c      	ite	eq
 800e8de:	2301      	moveq	r3, #1
 800e8e0:	2300      	movne	r3, #0
 800e8e2:	b2db      	uxtb	r3, r3
 800e8e4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8ea:	f003 0308 	and.w	r3, r3, #8
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d102      	bne.n	800e8f8 <HAL_UART_IRQHandler+0x144>
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d031      	beq.n	800e95c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e8f8:	6878      	ldr	r0, [r7, #4]
 800e8fa:	f000 f910 	bl	800eb1e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	695b      	ldr	r3, [r3, #20]
 800e904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e908:	2b40      	cmp	r3, #64	; 0x40
 800e90a:	d123      	bne.n	800e954 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	695a      	ldr	r2, [r3, #20]
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e91a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e920:	2b00      	cmp	r3, #0
 800e922:	d013      	beq.n	800e94c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e928:	4a21      	ldr	r2, [pc, #132]	; (800e9b0 <HAL_UART_IRQHandler+0x1fc>)
 800e92a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e930:	4618      	mov	r0, r3
 800e932:	f7fc ff8b 	bl	800b84c <HAL_DMA_Abort_IT>
 800e936:	4603      	mov	r3, r0
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d016      	beq.n	800e96a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e940:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e942:	687a      	ldr	r2, [r7, #4]
 800e944:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800e946:	4610      	mov	r0, r2
 800e948:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e94a:	e00e      	b.n	800e96a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e94c:	6878      	ldr	r0, [r7, #4]
 800e94e:	f000 f845 	bl	800e9dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e952:	e00a      	b.n	800e96a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e954:	6878      	ldr	r0, [r7, #4]
 800e956:	f000 f841 	bl	800e9dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e95a:	e006      	b.n	800e96a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e95c:	6878      	ldr	r0, [r7, #4]
 800e95e:	f000 f83d 	bl	800e9dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	2200      	movs	r2, #0
 800e966:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800e968:	e01d      	b.n	800e9a6 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e96a:	bf00      	nop
    return;
 800e96c:	e01b      	b.n	800e9a6 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800e96e:	69fb      	ldr	r3, [r7, #28]
 800e970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e974:	2b00      	cmp	r3, #0
 800e976:	d008      	beq.n	800e98a <HAL_UART_IRQHandler+0x1d6>
 800e978:	69bb      	ldr	r3, [r7, #24]
 800e97a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d003      	beq.n	800e98a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800e982:	6878      	ldr	r0, [r7, #4]
 800e984:	f000 f8fd 	bl	800eb82 <UART_Transmit_IT>
    return;
 800e988:	e00e      	b.n	800e9a8 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800e98a:	69fb      	ldr	r3, [r7, #28]
 800e98c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e990:	2b00      	cmp	r3, #0
 800e992:	d009      	beq.n	800e9a8 <HAL_UART_IRQHandler+0x1f4>
 800e994:	69bb      	ldr	r3, [r7, #24]
 800e996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d004      	beq.n	800e9a8 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800e99e:	6878      	ldr	r0, [r7, #4]
 800e9a0:	f000 f945 	bl	800ec2e <UART_EndTransmit_IT>
    return;
 800e9a4:	e000      	b.n	800e9a8 <HAL_UART_IRQHandler+0x1f4>
    return;
 800e9a6:	bf00      	nop
  }
}
 800e9a8:	3720      	adds	r7, #32
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	bd80      	pop	{r7, pc}
 800e9ae:	bf00      	nop
 800e9b0:	0800eb5b 	.word	0x0800eb5b

0800e9b4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e9b4:	b480      	push	{r7}
 800e9b6:	b083      	sub	sp, #12
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800e9bc:	bf00      	nop
 800e9be:	370c      	adds	r7, #12
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c6:	4770      	bx	lr

0800e9c8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800e9c8:	b480      	push	{r7}
 800e9ca:	b083      	sub	sp, #12
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800e9d0:	bf00      	nop
 800e9d2:	370c      	adds	r7, #12
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9da:	4770      	bx	lr

0800e9dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e9dc:	b480      	push	{r7}
 800e9de:	b083      	sub	sp, #12
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800e9e4:	bf00      	nop
 800e9e6:	370c      	adds	r7, #12
 800e9e8:	46bd      	mov	sp, r7
 800e9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ee:	4770      	bx	lr

0800e9f0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e9f0:	b580      	push	{r7, lr}
 800e9f2:	b084      	sub	sp, #16
 800e9f4:	af00      	add	r7, sp, #0
 800e9f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9fc:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d113      	bne.n	800ea34 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	2200      	movs	r2, #0
 800ea10:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	695a      	ldr	r2, [r3, #20]
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ea20:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	68da      	ldr	r2, [r3, #12]
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ea30:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ea32:	e002      	b.n	800ea3a <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800ea34:	68f8      	ldr	r0, [r7, #12]
 800ea36:	f7fc fc69 	bl	800b30c <HAL_UART_TxCpltCallback>
}
 800ea3a:	bf00      	nop
 800ea3c:	3710      	adds	r7, #16
 800ea3e:	46bd      	mov	sp, r7
 800ea40:	bd80      	pop	{r7, pc}

0800ea42 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ea42:	b580      	push	{r7, lr}
 800ea44:	b084      	sub	sp, #16
 800ea46:	af00      	add	r7, sp, #0
 800ea48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea4e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ea50:	68f8      	ldr	r0, [r7, #12]
 800ea52:	f7ff ffaf 	bl	800e9b4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ea56:	bf00      	nop
 800ea58:	3710      	adds	r7, #16
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	bd80      	pop	{r7, pc}

0800ea5e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ea5e:	b580      	push	{r7, lr}
 800ea60:	b084      	sub	sp, #16
 800ea62:	af00      	add	r7, sp, #0
 800ea64:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800ea66:	2300      	movs	r3, #0
 800ea68:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea6e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800ea70:	68bb      	ldr	r3, [r7, #8]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	695b      	ldr	r3, [r3, #20]
 800ea76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea7a:	2b80      	cmp	r3, #128	; 0x80
 800ea7c:	bf0c      	ite	eq
 800ea7e:	2301      	moveq	r3, #1
 800ea80:	2300      	movne	r3, #0
 800ea82:	b2db      	uxtb	r3, r3
 800ea84:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800ea86:	68bb      	ldr	r3, [r7, #8]
 800ea88:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ea8c:	b2db      	uxtb	r3, r3
 800ea8e:	2b21      	cmp	r3, #33	; 0x21
 800ea90:	d108      	bne.n	800eaa4 <UART_DMAError+0x46>
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d005      	beq.n	800eaa4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800ea98:	68bb      	ldr	r3, [r7, #8]
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800ea9e:	68b8      	ldr	r0, [r7, #8]
 800eaa0:	f000 f827 	bl	800eaf2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800eaa4:	68bb      	ldr	r3, [r7, #8]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	695b      	ldr	r3, [r3, #20]
 800eaaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eaae:	2b40      	cmp	r3, #64	; 0x40
 800eab0:	bf0c      	ite	eq
 800eab2:	2301      	moveq	r3, #1
 800eab4:	2300      	movne	r3, #0
 800eab6:	b2db      	uxtb	r3, r3
 800eab8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800eaba:	68bb      	ldr	r3, [r7, #8]
 800eabc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800eac0:	b2db      	uxtb	r3, r3
 800eac2:	2b22      	cmp	r3, #34	; 0x22
 800eac4:	d108      	bne.n	800ead8 <UART_DMAError+0x7a>
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d005      	beq.n	800ead8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800eacc:	68bb      	ldr	r3, [r7, #8]
 800eace:	2200      	movs	r2, #0
 800ead0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800ead2:	68b8      	ldr	r0, [r7, #8]
 800ead4:	f000 f823 	bl	800eb1e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ead8:	68bb      	ldr	r3, [r7, #8]
 800eada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eadc:	f043 0210 	orr.w	r2, r3, #16
 800eae0:	68bb      	ldr	r3, [r7, #8]
 800eae2:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eae4:	68b8      	ldr	r0, [r7, #8]
 800eae6:	f7ff ff79 	bl	800e9dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eaea:	bf00      	nop
 800eaec:	3710      	adds	r7, #16
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	bd80      	pop	{r7, pc}

0800eaf2 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800eaf2:	b480      	push	{r7}
 800eaf4:	b083      	sub	sp, #12
 800eaf6:	af00      	add	r7, sp, #0
 800eaf8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	68da      	ldr	r2, [r3, #12]
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800eb08:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	2220      	movs	r2, #32
 800eb0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800eb12:	bf00      	nop
 800eb14:	370c      	adds	r7, #12
 800eb16:	46bd      	mov	sp, r7
 800eb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb1c:	4770      	bx	lr

0800eb1e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800eb1e:	b480      	push	{r7}
 800eb20:	b083      	sub	sp, #12
 800eb22:	af00      	add	r7, sp, #0
 800eb24:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	68da      	ldr	r2, [r3, #12]
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800eb34:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	695a      	ldr	r2, [r3, #20]
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	f022 0201 	bic.w	r2, r2, #1
 800eb44:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	2220      	movs	r2, #32
 800eb4a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800eb4e:	bf00      	nop
 800eb50:	370c      	adds	r7, #12
 800eb52:	46bd      	mov	sp, r7
 800eb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb58:	4770      	bx	lr

0800eb5a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800eb5a:	b580      	push	{r7, lr}
 800eb5c:	b084      	sub	sp, #16
 800eb5e:	af00      	add	r7, sp, #0
 800eb60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb66:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	2200      	movs	r2, #0
 800eb72:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eb74:	68f8      	ldr	r0, [r7, #12]
 800eb76:	f7ff ff31 	bl	800e9dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eb7a:	bf00      	nop
 800eb7c:	3710      	adds	r7, #16
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	bd80      	pop	{r7, pc}

0800eb82 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800eb82:	b480      	push	{r7}
 800eb84:	b085      	sub	sp, #20
 800eb86:	af00      	add	r7, sp, #0
 800eb88:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800eb90:	b2db      	uxtb	r3, r3
 800eb92:	2b21      	cmp	r3, #33	; 0x21
 800eb94:	d144      	bne.n	800ec20 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	689b      	ldr	r3, [r3, #8]
 800eb9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eb9e:	d11a      	bne.n	800ebd6 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	6a1b      	ldr	r3, [r3, #32]
 800eba4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	881b      	ldrh	r3, [r3, #0]
 800ebaa:	461a      	mov	r2, r3
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ebb4:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	691b      	ldr	r3, [r3, #16]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d105      	bne.n	800ebca <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	6a1b      	ldr	r3, [r3, #32]
 800ebc2:	1c9a      	adds	r2, r3, #2
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	621a      	str	r2, [r3, #32]
 800ebc8:	e00e      	b.n	800ebe8 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	6a1b      	ldr	r3, [r3, #32]
 800ebce:	1c5a      	adds	r2, r3, #1
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	621a      	str	r2, [r3, #32]
 800ebd4:	e008      	b.n	800ebe8 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	6a1b      	ldr	r3, [r3, #32]
 800ebda:	1c59      	adds	r1, r3, #1
 800ebdc:	687a      	ldr	r2, [r7, #4]
 800ebde:	6211      	str	r1, [r2, #32]
 800ebe0:	781a      	ldrb	r2, [r3, #0]
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ebec:	b29b      	uxth	r3, r3
 800ebee:	3b01      	subs	r3, #1
 800ebf0:	b29b      	uxth	r3, r3
 800ebf2:	687a      	ldr	r2, [r7, #4]
 800ebf4:	4619      	mov	r1, r3
 800ebf6:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d10f      	bne.n	800ec1c <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	68da      	ldr	r2, [r3, #12]
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ec0a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	68da      	ldr	r2, [r3, #12]
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ec1a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ec1c:	2300      	movs	r3, #0
 800ec1e:	e000      	b.n	800ec22 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800ec20:	2302      	movs	r3, #2
  }
}
 800ec22:	4618      	mov	r0, r3
 800ec24:	3714      	adds	r7, #20
 800ec26:	46bd      	mov	sp, r7
 800ec28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2c:	4770      	bx	lr

0800ec2e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ec2e:	b580      	push	{r7, lr}
 800ec30:	b082      	sub	sp, #8
 800ec32:	af00      	add	r7, sp, #0
 800ec34:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	68da      	ldr	r2, [r3, #12]
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ec44:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	2220      	movs	r2, #32
 800ec4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ec4e:	6878      	ldr	r0, [r7, #4]
 800ec50:	f7fc fb5c 	bl	800b30c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ec54:	2300      	movs	r3, #0
}
 800ec56:	4618      	mov	r0, r3
 800ec58:	3708      	adds	r7, #8
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	bd80      	pop	{r7, pc}

0800ec5e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ec5e:	b580      	push	{r7, lr}
 800ec60:	b084      	sub	sp, #16
 800ec62:	af00      	add	r7, sp, #0
 800ec64:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ec6c:	b2db      	uxtb	r3, r3
 800ec6e:	2b22      	cmp	r3, #34	; 0x22
 800ec70:	d171      	bne.n	800ed56 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	689b      	ldr	r3, [r3, #8]
 800ec76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ec7a:	d123      	bne.n	800ecc4 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec80:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	691b      	ldr	r3, [r3, #16]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d10e      	bne.n	800eca8 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	685b      	ldr	r3, [r3, #4]
 800ec90:	b29b      	uxth	r3, r3
 800ec92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec96:	b29a      	uxth	r2, r3
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eca0:	1c9a      	adds	r2, r3, #2
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	629a      	str	r2, [r3, #40]	; 0x28
 800eca6:	e029      	b.n	800ecfc <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	685b      	ldr	r3, [r3, #4]
 800ecae:	b29b      	uxth	r3, r3
 800ecb0:	b2db      	uxtb	r3, r3
 800ecb2:	b29a      	uxth	r2, r3
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecbc:	1c5a      	adds	r2, r3, #1
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	629a      	str	r2, [r3, #40]	; 0x28
 800ecc2:	e01b      	b.n	800ecfc <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	691b      	ldr	r3, [r3, #16]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d10a      	bne.n	800ece2 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	6858      	ldr	r0, [r3, #4]
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecd6:	1c59      	adds	r1, r3, #1
 800ecd8:	687a      	ldr	r2, [r7, #4]
 800ecda:	6291      	str	r1, [r2, #40]	; 0x28
 800ecdc:	b2c2      	uxtb	r2, r0
 800ecde:	701a      	strb	r2, [r3, #0]
 800ece0:	e00c      	b.n	800ecfc <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	685b      	ldr	r3, [r3, #4]
 800ece8:	b2da      	uxtb	r2, r3
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecee:	1c58      	adds	r0, r3, #1
 800ecf0:	6879      	ldr	r1, [r7, #4]
 800ecf2:	6288      	str	r0, [r1, #40]	; 0x28
 800ecf4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ecf8:	b2d2      	uxtb	r2, r2
 800ecfa:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ed00:	b29b      	uxth	r3, r3
 800ed02:	3b01      	subs	r3, #1
 800ed04:	b29b      	uxth	r3, r3
 800ed06:	687a      	ldr	r2, [r7, #4]
 800ed08:	4619      	mov	r1, r3
 800ed0a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d120      	bne.n	800ed52 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	68da      	ldr	r2, [r3, #12]
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	f022 0220 	bic.w	r2, r2, #32
 800ed1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	68da      	ldr	r2, [r3, #12]
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ed2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	695a      	ldr	r2, [r3, #20]
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	f022 0201 	bic.w	r2, r2, #1
 800ed3e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	2220      	movs	r2, #32
 800ed44:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800ed48:	6878      	ldr	r0, [r7, #4]
 800ed4a:	f7ff fe3d 	bl	800e9c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800ed4e:	2300      	movs	r3, #0
 800ed50:	e002      	b.n	800ed58 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800ed52:	2300      	movs	r3, #0
 800ed54:	e000      	b.n	800ed58 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800ed56:	2302      	movs	r3, #2
  }
}
 800ed58:	4618      	mov	r0, r3
 800ed5a:	3710      	adds	r7, #16
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	bd80      	pop	{r7, pc}

0800ed60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ed60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed64:	b0bd      	sub	sp, #244	; 0xf4
 800ed66:	af00      	add	r7, sp, #0
 800ed68:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ed6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	691b      	ldr	r3, [r3, #16]
 800ed74:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ed78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed7c:	68d9      	ldr	r1, [r3, #12]
 800ed7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed82:	681a      	ldr	r2, [r3, #0]
 800ed84:	ea40 0301 	orr.w	r3, r0, r1
 800ed88:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ed8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed8e:	689a      	ldr	r2, [r3, #8]
 800ed90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed94:	691b      	ldr	r3, [r3, #16]
 800ed96:	431a      	orrs	r2, r3
 800ed98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed9c:	695b      	ldr	r3, [r3, #20]
 800ed9e:	431a      	orrs	r2, r3
 800eda0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eda4:	69db      	ldr	r3, [r3, #28]
 800eda6:	4313      	orrs	r3, r2
 800eda8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 800edac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	68db      	ldr	r3, [r3, #12]
 800edb4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800edb8:	f021 010c 	bic.w	r1, r1, #12
 800edbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800edc0:	681a      	ldr	r2, [r3, #0]
 800edc2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800edc6:	430b      	orrs	r3, r1
 800edc8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800edca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	695b      	ldr	r3, [r3, #20]
 800edd2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800edd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800edda:	6999      	ldr	r1, [r3, #24]
 800eddc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ede0:	681a      	ldr	r2, [r3, #0]
 800ede2:	ea40 0301 	orr.w	r3, r0, r1
 800ede6:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ede8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800edec:	69db      	ldr	r3, [r3, #28]
 800edee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800edf2:	f040 81a5 	bne.w	800f140 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800edf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800edfa:	681a      	ldr	r2, [r3, #0]
 800edfc:	4bcd      	ldr	r3, [pc, #820]	; (800f134 <UART_SetConfig+0x3d4>)
 800edfe:	429a      	cmp	r2, r3
 800ee00:	d006      	beq.n	800ee10 <UART_SetConfig+0xb0>
 800ee02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ee06:	681a      	ldr	r2, [r3, #0]
 800ee08:	4bcb      	ldr	r3, [pc, #812]	; (800f138 <UART_SetConfig+0x3d8>)
 800ee0a:	429a      	cmp	r2, r3
 800ee0c:	f040 80cb 	bne.w	800efa6 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ee10:	f7fe ff9e 	bl	800dd50 <HAL_RCC_GetPCLK2Freq>
 800ee14:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ee18:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ee1c:	461c      	mov	r4, r3
 800ee1e:	f04f 0500 	mov.w	r5, #0
 800ee22:	4622      	mov	r2, r4
 800ee24:	462b      	mov	r3, r5
 800ee26:	1891      	adds	r1, r2, r2
 800ee28:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800ee2c:	415b      	adcs	r3, r3
 800ee2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ee32:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800ee36:	1912      	adds	r2, r2, r4
 800ee38:	eb45 0303 	adc.w	r3, r5, r3
 800ee3c:	f04f 0000 	mov.w	r0, #0
 800ee40:	f04f 0100 	mov.w	r1, #0
 800ee44:	00d9      	lsls	r1, r3, #3
 800ee46:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ee4a:	00d0      	lsls	r0, r2, #3
 800ee4c:	4602      	mov	r2, r0
 800ee4e:	460b      	mov	r3, r1
 800ee50:	1911      	adds	r1, r2, r4
 800ee52:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800ee56:	416b      	adcs	r3, r5
 800ee58:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ee5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ee60:	685b      	ldr	r3, [r3, #4]
 800ee62:	461a      	mov	r2, r3
 800ee64:	f04f 0300 	mov.w	r3, #0
 800ee68:	1891      	adds	r1, r2, r2
 800ee6a:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800ee6e:	415b      	adcs	r3, r3
 800ee70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ee74:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800ee78:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800ee7c:	f7f1 ff04 	bl	8000c88 <__aeabi_uldivmod>
 800ee80:	4602      	mov	r2, r0
 800ee82:	460b      	mov	r3, r1
 800ee84:	4bad      	ldr	r3, [pc, #692]	; (800f13c <UART_SetConfig+0x3dc>)
 800ee86:	fba3 2302 	umull	r2, r3, r3, r2
 800ee8a:	095b      	lsrs	r3, r3, #5
 800ee8c:	011e      	lsls	r6, r3, #4
 800ee8e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ee92:	461c      	mov	r4, r3
 800ee94:	f04f 0500 	mov.w	r5, #0
 800ee98:	4622      	mov	r2, r4
 800ee9a:	462b      	mov	r3, r5
 800ee9c:	1891      	adds	r1, r2, r2
 800ee9e:	67b9      	str	r1, [r7, #120]	; 0x78
 800eea0:	415b      	adcs	r3, r3
 800eea2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800eea4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800eea8:	1912      	adds	r2, r2, r4
 800eeaa:	eb45 0303 	adc.w	r3, r5, r3
 800eeae:	f04f 0000 	mov.w	r0, #0
 800eeb2:	f04f 0100 	mov.w	r1, #0
 800eeb6:	00d9      	lsls	r1, r3, #3
 800eeb8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800eebc:	00d0      	lsls	r0, r2, #3
 800eebe:	4602      	mov	r2, r0
 800eec0:	460b      	mov	r3, r1
 800eec2:	1911      	adds	r1, r2, r4
 800eec4:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800eec8:	416b      	adcs	r3, r5
 800eeca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800eece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eed2:	685b      	ldr	r3, [r3, #4]
 800eed4:	461a      	mov	r2, r3
 800eed6:	f04f 0300 	mov.w	r3, #0
 800eeda:	1891      	adds	r1, r2, r2
 800eedc:	6739      	str	r1, [r7, #112]	; 0x70
 800eede:	415b      	adcs	r3, r3
 800eee0:	677b      	str	r3, [r7, #116]	; 0x74
 800eee2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800eee6:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800eeea:	f7f1 fecd 	bl	8000c88 <__aeabi_uldivmod>
 800eeee:	4602      	mov	r2, r0
 800eef0:	460b      	mov	r3, r1
 800eef2:	4b92      	ldr	r3, [pc, #584]	; (800f13c <UART_SetConfig+0x3dc>)
 800eef4:	fba3 1302 	umull	r1, r3, r3, r2
 800eef8:	095b      	lsrs	r3, r3, #5
 800eefa:	2164      	movs	r1, #100	; 0x64
 800eefc:	fb01 f303 	mul.w	r3, r1, r3
 800ef00:	1ad3      	subs	r3, r2, r3
 800ef02:	00db      	lsls	r3, r3, #3
 800ef04:	3332      	adds	r3, #50	; 0x32
 800ef06:	4a8d      	ldr	r2, [pc, #564]	; (800f13c <UART_SetConfig+0x3dc>)
 800ef08:	fba2 2303 	umull	r2, r3, r2, r3
 800ef0c:	095b      	lsrs	r3, r3, #5
 800ef0e:	005b      	lsls	r3, r3, #1
 800ef10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ef14:	441e      	add	r6, r3
 800ef16:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	f04f 0100 	mov.w	r1, #0
 800ef20:	4602      	mov	r2, r0
 800ef22:	460b      	mov	r3, r1
 800ef24:	1894      	adds	r4, r2, r2
 800ef26:	66bc      	str	r4, [r7, #104]	; 0x68
 800ef28:	415b      	adcs	r3, r3
 800ef2a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ef2c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800ef30:	1812      	adds	r2, r2, r0
 800ef32:	eb41 0303 	adc.w	r3, r1, r3
 800ef36:	f04f 0400 	mov.w	r4, #0
 800ef3a:	f04f 0500 	mov.w	r5, #0
 800ef3e:	00dd      	lsls	r5, r3, #3
 800ef40:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ef44:	00d4      	lsls	r4, r2, #3
 800ef46:	4622      	mov	r2, r4
 800ef48:	462b      	mov	r3, r5
 800ef4a:	1814      	adds	r4, r2, r0
 800ef4c:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800ef50:	414b      	adcs	r3, r1
 800ef52:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ef56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ef5a:	685b      	ldr	r3, [r3, #4]
 800ef5c:	461a      	mov	r2, r3
 800ef5e:	f04f 0300 	mov.w	r3, #0
 800ef62:	1891      	adds	r1, r2, r2
 800ef64:	6639      	str	r1, [r7, #96]	; 0x60
 800ef66:	415b      	adcs	r3, r3
 800ef68:	667b      	str	r3, [r7, #100]	; 0x64
 800ef6a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800ef6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800ef72:	f7f1 fe89 	bl	8000c88 <__aeabi_uldivmod>
 800ef76:	4602      	mov	r2, r0
 800ef78:	460b      	mov	r3, r1
 800ef7a:	4b70      	ldr	r3, [pc, #448]	; (800f13c <UART_SetConfig+0x3dc>)
 800ef7c:	fba3 1302 	umull	r1, r3, r3, r2
 800ef80:	095b      	lsrs	r3, r3, #5
 800ef82:	2164      	movs	r1, #100	; 0x64
 800ef84:	fb01 f303 	mul.w	r3, r1, r3
 800ef88:	1ad3      	subs	r3, r2, r3
 800ef8a:	00db      	lsls	r3, r3, #3
 800ef8c:	3332      	adds	r3, #50	; 0x32
 800ef8e:	4a6b      	ldr	r2, [pc, #428]	; (800f13c <UART_SetConfig+0x3dc>)
 800ef90:	fba2 2303 	umull	r2, r3, r2, r3
 800ef94:	095b      	lsrs	r3, r3, #5
 800ef96:	f003 0207 	and.w	r2, r3, #7
 800ef9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	4432      	add	r2, r6
 800efa2:	609a      	str	r2, [r3, #8]
 800efa4:	e26d      	b.n	800f482 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800efa6:	f7fe febf 	bl	800dd28 <HAL_RCC_GetPCLK1Freq>
 800efaa:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800efae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800efb2:	461c      	mov	r4, r3
 800efb4:	f04f 0500 	mov.w	r5, #0
 800efb8:	4622      	mov	r2, r4
 800efba:	462b      	mov	r3, r5
 800efbc:	1891      	adds	r1, r2, r2
 800efbe:	65b9      	str	r1, [r7, #88]	; 0x58
 800efc0:	415b      	adcs	r3, r3
 800efc2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800efc4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800efc8:	1912      	adds	r2, r2, r4
 800efca:	eb45 0303 	adc.w	r3, r5, r3
 800efce:	f04f 0000 	mov.w	r0, #0
 800efd2:	f04f 0100 	mov.w	r1, #0
 800efd6:	00d9      	lsls	r1, r3, #3
 800efd8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800efdc:	00d0      	lsls	r0, r2, #3
 800efde:	4602      	mov	r2, r0
 800efe0:	460b      	mov	r3, r1
 800efe2:	1911      	adds	r1, r2, r4
 800efe4:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800efe8:	416b      	adcs	r3, r5
 800efea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800efee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eff2:	685b      	ldr	r3, [r3, #4]
 800eff4:	461a      	mov	r2, r3
 800eff6:	f04f 0300 	mov.w	r3, #0
 800effa:	1891      	adds	r1, r2, r2
 800effc:	6539      	str	r1, [r7, #80]	; 0x50
 800effe:	415b      	adcs	r3, r3
 800f000:	657b      	str	r3, [r7, #84]	; 0x54
 800f002:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800f006:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800f00a:	f7f1 fe3d 	bl	8000c88 <__aeabi_uldivmod>
 800f00e:	4602      	mov	r2, r0
 800f010:	460b      	mov	r3, r1
 800f012:	4b4a      	ldr	r3, [pc, #296]	; (800f13c <UART_SetConfig+0x3dc>)
 800f014:	fba3 2302 	umull	r2, r3, r3, r2
 800f018:	095b      	lsrs	r3, r3, #5
 800f01a:	011e      	lsls	r6, r3, #4
 800f01c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f020:	461c      	mov	r4, r3
 800f022:	f04f 0500 	mov.w	r5, #0
 800f026:	4622      	mov	r2, r4
 800f028:	462b      	mov	r3, r5
 800f02a:	1891      	adds	r1, r2, r2
 800f02c:	64b9      	str	r1, [r7, #72]	; 0x48
 800f02e:	415b      	adcs	r3, r3
 800f030:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f032:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800f036:	1912      	adds	r2, r2, r4
 800f038:	eb45 0303 	adc.w	r3, r5, r3
 800f03c:	f04f 0000 	mov.w	r0, #0
 800f040:	f04f 0100 	mov.w	r1, #0
 800f044:	00d9      	lsls	r1, r3, #3
 800f046:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f04a:	00d0      	lsls	r0, r2, #3
 800f04c:	4602      	mov	r2, r0
 800f04e:	460b      	mov	r3, r1
 800f050:	1911      	adds	r1, r2, r4
 800f052:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800f056:	416b      	adcs	r3, r5
 800f058:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800f05c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f060:	685b      	ldr	r3, [r3, #4]
 800f062:	461a      	mov	r2, r3
 800f064:	f04f 0300 	mov.w	r3, #0
 800f068:	1891      	adds	r1, r2, r2
 800f06a:	6439      	str	r1, [r7, #64]	; 0x40
 800f06c:	415b      	adcs	r3, r3
 800f06e:	647b      	str	r3, [r7, #68]	; 0x44
 800f070:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800f074:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800f078:	f7f1 fe06 	bl	8000c88 <__aeabi_uldivmod>
 800f07c:	4602      	mov	r2, r0
 800f07e:	460b      	mov	r3, r1
 800f080:	4b2e      	ldr	r3, [pc, #184]	; (800f13c <UART_SetConfig+0x3dc>)
 800f082:	fba3 1302 	umull	r1, r3, r3, r2
 800f086:	095b      	lsrs	r3, r3, #5
 800f088:	2164      	movs	r1, #100	; 0x64
 800f08a:	fb01 f303 	mul.w	r3, r1, r3
 800f08e:	1ad3      	subs	r3, r2, r3
 800f090:	00db      	lsls	r3, r3, #3
 800f092:	3332      	adds	r3, #50	; 0x32
 800f094:	4a29      	ldr	r2, [pc, #164]	; (800f13c <UART_SetConfig+0x3dc>)
 800f096:	fba2 2303 	umull	r2, r3, r2, r3
 800f09a:	095b      	lsrs	r3, r3, #5
 800f09c:	005b      	lsls	r3, r3, #1
 800f09e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f0a2:	441e      	add	r6, r3
 800f0a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	f04f 0100 	mov.w	r1, #0
 800f0ae:	4602      	mov	r2, r0
 800f0b0:	460b      	mov	r3, r1
 800f0b2:	1894      	adds	r4, r2, r2
 800f0b4:	63bc      	str	r4, [r7, #56]	; 0x38
 800f0b6:	415b      	adcs	r3, r3
 800f0b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f0ba:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800f0be:	1812      	adds	r2, r2, r0
 800f0c0:	eb41 0303 	adc.w	r3, r1, r3
 800f0c4:	f04f 0400 	mov.w	r4, #0
 800f0c8:	f04f 0500 	mov.w	r5, #0
 800f0cc:	00dd      	lsls	r5, r3, #3
 800f0ce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f0d2:	00d4      	lsls	r4, r2, #3
 800f0d4:	4622      	mov	r2, r4
 800f0d6:	462b      	mov	r3, r5
 800f0d8:	1814      	adds	r4, r2, r0
 800f0da:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800f0de:	414b      	adcs	r3, r1
 800f0e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f0e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f0e8:	685b      	ldr	r3, [r3, #4]
 800f0ea:	461a      	mov	r2, r3
 800f0ec:	f04f 0300 	mov.w	r3, #0
 800f0f0:	1891      	adds	r1, r2, r2
 800f0f2:	6339      	str	r1, [r7, #48]	; 0x30
 800f0f4:	415b      	adcs	r3, r3
 800f0f6:	637b      	str	r3, [r7, #52]	; 0x34
 800f0f8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f0fc:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800f100:	f7f1 fdc2 	bl	8000c88 <__aeabi_uldivmod>
 800f104:	4602      	mov	r2, r0
 800f106:	460b      	mov	r3, r1
 800f108:	4b0c      	ldr	r3, [pc, #48]	; (800f13c <UART_SetConfig+0x3dc>)
 800f10a:	fba3 1302 	umull	r1, r3, r3, r2
 800f10e:	095b      	lsrs	r3, r3, #5
 800f110:	2164      	movs	r1, #100	; 0x64
 800f112:	fb01 f303 	mul.w	r3, r1, r3
 800f116:	1ad3      	subs	r3, r2, r3
 800f118:	00db      	lsls	r3, r3, #3
 800f11a:	3332      	adds	r3, #50	; 0x32
 800f11c:	4a07      	ldr	r2, [pc, #28]	; (800f13c <UART_SetConfig+0x3dc>)
 800f11e:	fba2 2303 	umull	r2, r3, r2, r3
 800f122:	095b      	lsrs	r3, r3, #5
 800f124:	f003 0207 	and.w	r2, r3, #7
 800f128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	4432      	add	r2, r6
 800f130:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800f132:	e1a6      	b.n	800f482 <UART_SetConfig+0x722>
 800f134:	40011000 	.word	0x40011000
 800f138:	40011400 	.word	0x40011400
 800f13c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f140:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f144:	681a      	ldr	r2, [r3, #0]
 800f146:	4bd1      	ldr	r3, [pc, #836]	; (800f48c <UART_SetConfig+0x72c>)
 800f148:	429a      	cmp	r2, r3
 800f14a:	d006      	beq.n	800f15a <UART_SetConfig+0x3fa>
 800f14c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f150:	681a      	ldr	r2, [r3, #0]
 800f152:	4bcf      	ldr	r3, [pc, #828]	; (800f490 <UART_SetConfig+0x730>)
 800f154:	429a      	cmp	r2, r3
 800f156:	f040 80ca 	bne.w	800f2ee <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 800f15a:	f7fe fdf9 	bl	800dd50 <HAL_RCC_GetPCLK2Freq>
 800f15e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f162:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f166:	461c      	mov	r4, r3
 800f168:	f04f 0500 	mov.w	r5, #0
 800f16c:	4622      	mov	r2, r4
 800f16e:	462b      	mov	r3, r5
 800f170:	1891      	adds	r1, r2, r2
 800f172:	62b9      	str	r1, [r7, #40]	; 0x28
 800f174:	415b      	adcs	r3, r3
 800f176:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f178:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800f17c:	1912      	adds	r2, r2, r4
 800f17e:	eb45 0303 	adc.w	r3, r5, r3
 800f182:	f04f 0000 	mov.w	r0, #0
 800f186:	f04f 0100 	mov.w	r1, #0
 800f18a:	00d9      	lsls	r1, r3, #3
 800f18c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f190:	00d0      	lsls	r0, r2, #3
 800f192:	4602      	mov	r2, r0
 800f194:	460b      	mov	r3, r1
 800f196:	eb12 0a04 	adds.w	sl, r2, r4
 800f19a:	eb43 0b05 	adc.w	fp, r3, r5
 800f19e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f1a2:	685b      	ldr	r3, [r3, #4]
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	f04f 0100 	mov.w	r1, #0
 800f1aa:	f04f 0200 	mov.w	r2, #0
 800f1ae:	f04f 0300 	mov.w	r3, #0
 800f1b2:	008b      	lsls	r3, r1, #2
 800f1b4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f1b8:	0082      	lsls	r2, r0, #2
 800f1ba:	4650      	mov	r0, sl
 800f1bc:	4659      	mov	r1, fp
 800f1be:	f7f1 fd63 	bl	8000c88 <__aeabi_uldivmod>
 800f1c2:	4602      	mov	r2, r0
 800f1c4:	460b      	mov	r3, r1
 800f1c6:	4bb3      	ldr	r3, [pc, #716]	; (800f494 <UART_SetConfig+0x734>)
 800f1c8:	fba3 2302 	umull	r2, r3, r3, r2
 800f1cc:	095b      	lsrs	r3, r3, #5
 800f1ce:	011e      	lsls	r6, r3, #4
 800f1d0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	f04f 0100 	mov.w	r1, #0
 800f1da:	4602      	mov	r2, r0
 800f1dc:	460b      	mov	r3, r1
 800f1de:	1894      	adds	r4, r2, r2
 800f1e0:	623c      	str	r4, [r7, #32]
 800f1e2:	415b      	adcs	r3, r3
 800f1e4:	627b      	str	r3, [r7, #36]	; 0x24
 800f1e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f1ea:	1812      	adds	r2, r2, r0
 800f1ec:	eb41 0303 	adc.w	r3, r1, r3
 800f1f0:	f04f 0400 	mov.w	r4, #0
 800f1f4:	f04f 0500 	mov.w	r5, #0
 800f1f8:	00dd      	lsls	r5, r3, #3
 800f1fa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f1fe:	00d4      	lsls	r4, r2, #3
 800f200:	4622      	mov	r2, r4
 800f202:	462b      	mov	r3, r5
 800f204:	1814      	adds	r4, r2, r0
 800f206:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800f20a:	414b      	adcs	r3, r1
 800f20c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f214:	685b      	ldr	r3, [r3, #4]
 800f216:	4618      	mov	r0, r3
 800f218:	f04f 0100 	mov.w	r1, #0
 800f21c:	f04f 0200 	mov.w	r2, #0
 800f220:	f04f 0300 	mov.w	r3, #0
 800f224:	008b      	lsls	r3, r1, #2
 800f226:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f22a:	0082      	lsls	r2, r0, #2
 800f22c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800f230:	f7f1 fd2a 	bl	8000c88 <__aeabi_uldivmod>
 800f234:	4602      	mov	r2, r0
 800f236:	460b      	mov	r3, r1
 800f238:	4b96      	ldr	r3, [pc, #600]	; (800f494 <UART_SetConfig+0x734>)
 800f23a:	fba3 1302 	umull	r1, r3, r3, r2
 800f23e:	095b      	lsrs	r3, r3, #5
 800f240:	2164      	movs	r1, #100	; 0x64
 800f242:	fb01 f303 	mul.w	r3, r1, r3
 800f246:	1ad3      	subs	r3, r2, r3
 800f248:	011b      	lsls	r3, r3, #4
 800f24a:	3332      	adds	r3, #50	; 0x32
 800f24c:	4a91      	ldr	r2, [pc, #580]	; (800f494 <UART_SetConfig+0x734>)
 800f24e:	fba2 2303 	umull	r2, r3, r2, r3
 800f252:	095b      	lsrs	r3, r3, #5
 800f254:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f258:	441e      	add	r6, r3
 800f25a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f25e:	4618      	mov	r0, r3
 800f260:	f04f 0100 	mov.w	r1, #0
 800f264:	4602      	mov	r2, r0
 800f266:	460b      	mov	r3, r1
 800f268:	1894      	adds	r4, r2, r2
 800f26a:	61bc      	str	r4, [r7, #24]
 800f26c:	415b      	adcs	r3, r3
 800f26e:	61fb      	str	r3, [r7, #28]
 800f270:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f274:	1812      	adds	r2, r2, r0
 800f276:	eb41 0303 	adc.w	r3, r1, r3
 800f27a:	f04f 0400 	mov.w	r4, #0
 800f27e:	f04f 0500 	mov.w	r5, #0
 800f282:	00dd      	lsls	r5, r3, #3
 800f284:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f288:	00d4      	lsls	r4, r2, #3
 800f28a:	4622      	mov	r2, r4
 800f28c:	462b      	mov	r3, r5
 800f28e:	1814      	adds	r4, r2, r0
 800f290:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800f294:	414b      	adcs	r3, r1
 800f296:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800f29a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f29e:	685b      	ldr	r3, [r3, #4]
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	f04f 0100 	mov.w	r1, #0
 800f2a6:	f04f 0200 	mov.w	r2, #0
 800f2aa:	f04f 0300 	mov.w	r3, #0
 800f2ae:	008b      	lsls	r3, r1, #2
 800f2b0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f2b4:	0082      	lsls	r2, r0, #2
 800f2b6:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800f2ba:	f7f1 fce5 	bl	8000c88 <__aeabi_uldivmod>
 800f2be:	4602      	mov	r2, r0
 800f2c0:	460b      	mov	r3, r1
 800f2c2:	4b74      	ldr	r3, [pc, #464]	; (800f494 <UART_SetConfig+0x734>)
 800f2c4:	fba3 1302 	umull	r1, r3, r3, r2
 800f2c8:	095b      	lsrs	r3, r3, #5
 800f2ca:	2164      	movs	r1, #100	; 0x64
 800f2cc:	fb01 f303 	mul.w	r3, r1, r3
 800f2d0:	1ad3      	subs	r3, r2, r3
 800f2d2:	011b      	lsls	r3, r3, #4
 800f2d4:	3332      	adds	r3, #50	; 0x32
 800f2d6:	4a6f      	ldr	r2, [pc, #444]	; (800f494 <UART_SetConfig+0x734>)
 800f2d8:	fba2 2303 	umull	r2, r3, r2, r3
 800f2dc:	095b      	lsrs	r3, r3, #5
 800f2de:	f003 020f 	and.w	r2, r3, #15
 800f2e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	4432      	add	r2, r6
 800f2ea:	609a      	str	r2, [r3, #8]
 800f2ec:	e0c9      	b.n	800f482 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 800f2ee:	f7fe fd1b 	bl	800dd28 <HAL_RCC_GetPCLK1Freq>
 800f2f2:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f2f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f2fa:	461c      	mov	r4, r3
 800f2fc:	f04f 0500 	mov.w	r5, #0
 800f300:	4622      	mov	r2, r4
 800f302:	462b      	mov	r3, r5
 800f304:	1891      	adds	r1, r2, r2
 800f306:	6139      	str	r1, [r7, #16]
 800f308:	415b      	adcs	r3, r3
 800f30a:	617b      	str	r3, [r7, #20]
 800f30c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f310:	1912      	adds	r2, r2, r4
 800f312:	eb45 0303 	adc.w	r3, r5, r3
 800f316:	f04f 0000 	mov.w	r0, #0
 800f31a:	f04f 0100 	mov.w	r1, #0
 800f31e:	00d9      	lsls	r1, r3, #3
 800f320:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f324:	00d0      	lsls	r0, r2, #3
 800f326:	4602      	mov	r2, r0
 800f328:	460b      	mov	r3, r1
 800f32a:	eb12 0804 	adds.w	r8, r2, r4
 800f32e:	eb43 0905 	adc.w	r9, r3, r5
 800f332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f336:	685b      	ldr	r3, [r3, #4]
 800f338:	4618      	mov	r0, r3
 800f33a:	f04f 0100 	mov.w	r1, #0
 800f33e:	f04f 0200 	mov.w	r2, #0
 800f342:	f04f 0300 	mov.w	r3, #0
 800f346:	008b      	lsls	r3, r1, #2
 800f348:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f34c:	0082      	lsls	r2, r0, #2
 800f34e:	4640      	mov	r0, r8
 800f350:	4649      	mov	r1, r9
 800f352:	f7f1 fc99 	bl	8000c88 <__aeabi_uldivmod>
 800f356:	4602      	mov	r2, r0
 800f358:	460b      	mov	r3, r1
 800f35a:	4b4e      	ldr	r3, [pc, #312]	; (800f494 <UART_SetConfig+0x734>)
 800f35c:	fba3 2302 	umull	r2, r3, r3, r2
 800f360:	095b      	lsrs	r3, r3, #5
 800f362:	011e      	lsls	r6, r3, #4
 800f364:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f368:	4618      	mov	r0, r3
 800f36a:	f04f 0100 	mov.w	r1, #0
 800f36e:	4602      	mov	r2, r0
 800f370:	460b      	mov	r3, r1
 800f372:	1894      	adds	r4, r2, r2
 800f374:	60bc      	str	r4, [r7, #8]
 800f376:	415b      	adcs	r3, r3
 800f378:	60fb      	str	r3, [r7, #12]
 800f37a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f37e:	1812      	adds	r2, r2, r0
 800f380:	eb41 0303 	adc.w	r3, r1, r3
 800f384:	f04f 0400 	mov.w	r4, #0
 800f388:	f04f 0500 	mov.w	r5, #0
 800f38c:	00dd      	lsls	r5, r3, #3
 800f38e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f392:	00d4      	lsls	r4, r2, #3
 800f394:	4622      	mov	r2, r4
 800f396:	462b      	mov	r3, r5
 800f398:	1814      	adds	r4, r2, r0
 800f39a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800f39e:	414b      	adcs	r3, r1
 800f3a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f3a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f3a8:	685b      	ldr	r3, [r3, #4]
 800f3aa:	4618      	mov	r0, r3
 800f3ac:	f04f 0100 	mov.w	r1, #0
 800f3b0:	f04f 0200 	mov.w	r2, #0
 800f3b4:	f04f 0300 	mov.w	r3, #0
 800f3b8:	008b      	lsls	r3, r1, #2
 800f3ba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f3be:	0082      	lsls	r2, r0, #2
 800f3c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800f3c4:	f7f1 fc60 	bl	8000c88 <__aeabi_uldivmod>
 800f3c8:	4602      	mov	r2, r0
 800f3ca:	460b      	mov	r3, r1
 800f3cc:	4b31      	ldr	r3, [pc, #196]	; (800f494 <UART_SetConfig+0x734>)
 800f3ce:	fba3 1302 	umull	r1, r3, r3, r2
 800f3d2:	095b      	lsrs	r3, r3, #5
 800f3d4:	2164      	movs	r1, #100	; 0x64
 800f3d6:	fb01 f303 	mul.w	r3, r1, r3
 800f3da:	1ad3      	subs	r3, r2, r3
 800f3dc:	011b      	lsls	r3, r3, #4
 800f3de:	3332      	adds	r3, #50	; 0x32
 800f3e0:	4a2c      	ldr	r2, [pc, #176]	; (800f494 <UART_SetConfig+0x734>)
 800f3e2:	fba2 2303 	umull	r2, r3, r2, r3
 800f3e6:	095b      	lsrs	r3, r3, #5
 800f3e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f3ec:	441e      	add	r6, r3
 800f3ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	f04f 0100 	mov.w	r1, #0
 800f3f8:	4602      	mov	r2, r0
 800f3fa:	460b      	mov	r3, r1
 800f3fc:	1894      	adds	r4, r2, r2
 800f3fe:	603c      	str	r4, [r7, #0]
 800f400:	415b      	adcs	r3, r3
 800f402:	607b      	str	r3, [r7, #4]
 800f404:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f408:	1812      	adds	r2, r2, r0
 800f40a:	eb41 0303 	adc.w	r3, r1, r3
 800f40e:	f04f 0400 	mov.w	r4, #0
 800f412:	f04f 0500 	mov.w	r5, #0
 800f416:	00dd      	lsls	r5, r3, #3
 800f418:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f41c:	00d4      	lsls	r4, r2, #3
 800f41e:	4622      	mov	r2, r4
 800f420:	462b      	mov	r3, r5
 800f422:	1814      	adds	r4, r2, r0
 800f424:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800f428:	414b      	adcs	r3, r1
 800f42a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f42e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f432:	685b      	ldr	r3, [r3, #4]
 800f434:	4618      	mov	r0, r3
 800f436:	f04f 0100 	mov.w	r1, #0
 800f43a:	f04f 0200 	mov.w	r2, #0
 800f43e:	f04f 0300 	mov.w	r3, #0
 800f442:	008b      	lsls	r3, r1, #2
 800f444:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f448:	0082      	lsls	r2, r0, #2
 800f44a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800f44e:	f7f1 fc1b 	bl	8000c88 <__aeabi_uldivmod>
 800f452:	4602      	mov	r2, r0
 800f454:	460b      	mov	r3, r1
 800f456:	4b0f      	ldr	r3, [pc, #60]	; (800f494 <UART_SetConfig+0x734>)
 800f458:	fba3 1302 	umull	r1, r3, r3, r2
 800f45c:	095b      	lsrs	r3, r3, #5
 800f45e:	2164      	movs	r1, #100	; 0x64
 800f460:	fb01 f303 	mul.w	r3, r1, r3
 800f464:	1ad3      	subs	r3, r2, r3
 800f466:	011b      	lsls	r3, r3, #4
 800f468:	3332      	adds	r3, #50	; 0x32
 800f46a:	4a0a      	ldr	r2, [pc, #40]	; (800f494 <UART_SetConfig+0x734>)
 800f46c:	fba2 2303 	umull	r2, r3, r2, r3
 800f470:	095b      	lsrs	r3, r3, #5
 800f472:	f003 020f 	and.w	r2, r3, #15
 800f476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	4432      	add	r2, r6
 800f47e:	609a      	str	r2, [r3, #8]
}
 800f480:	e7ff      	b.n	800f482 <UART_SetConfig+0x722>
 800f482:	bf00      	nop
 800f484:	37f4      	adds	r7, #244	; 0xf4
 800f486:	46bd      	mov	sp, r7
 800f488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f48c:	40011000 	.word	0x40011000
 800f490:	40011400 	.word	0x40011400
 800f494:	51eb851f 	.word	0x51eb851f

0800f498 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800f498:	b480      	push	{r7}
 800f49a:	b085      	sub	sp, #20
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
 800f4a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800f4a6:	683b      	ldr	r3, [r7, #0]
 800f4a8:	681a      	ldr	r2, [r3, #0]
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f4b0:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800f4b2:	68fa      	ldr	r2, [r7, #12]
 800f4b4:	4b20      	ldr	r3, [pc, #128]	; (800f538 <FSMC_NORSRAM_Init+0xa0>)
 800f4b6:	4013      	ands	r3, r2
 800f4b8:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800f4ba:	683b      	ldr	r3, [r7, #0]
 800f4bc:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800f4be:	683b      	ldr	r3, [r7, #0]
 800f4c0:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800f4c2:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800f4c4:	683b      	ldr	r3, [r7, #0]
 800f4c6:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800f4c8:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800f4ca:	683b      	ldr	r3, [r7, #0]
 800f4cc:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800f4ce:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800f4d0:	683b      	ldr	r3, [r7, #0]
 800f4d2:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800f4d4:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800f4d6:	683b      	ldr	r3, [r7, #0]
 800f4d8:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800f4da:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800f4dc:	683b      	ldr	r3, [r7, #0]
 800f4de:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800f4e0:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800f4e2:	683b      	ldr	r3, [r7, #0]
 800f4e4:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800f4e6:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800f4e8:	683b      	ldr	r3, [r7, #0]
 800f4ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800f4ec:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800f4ee:	683b      	ldr	r3, [r7, #0]
 800f4f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800f4f2:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800f4f4:	683b      	ldr	r3, [r7, #0]
 800f4f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800f4f8:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800f4fa:	683b      	ldr	r3, [r7, #0]
 800f4fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800f4fe:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800f500:	683b      	ldr	r3, [r7, #0]
 800f502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800f504:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800f506:	68fa      	ldr	r2, [r7, #12]
 800f508:	4313      	orrs	r3, r2
 800f50a:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800f50c:	683b      	ldr	r3, [r7, #0]
 800f50e:	689b      	ldr	r3, [r3, #8]
 800f510:	2b08      	cmp	r3, #8
 800f512:	d103      	bne.n	800f51c <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f51a:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800f51c:	683b      	ldr	r3, [r7, #0]
 800f51e:	681a      	ldr	r2, [r3, #0]
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	68f9      	ldr	r1, [r7, #12]
 800f524:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800f528:	2300      	movs	r3, #0
}
 800f52a:	4618      	mov	r0, r3
 800f52c:	3714      	adds	r7, #20
 800f52e:	46bd      	mov	sp, r7
 800f530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f534:	4770      	bx	lr
 800f536:	bf00      	nop
 800f538:	fff00080 	.word	0xfff00080

0800f53c <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800f53c:	b480      	push	{r7}
 800f53e:	b087      	sub	sp, #28
 800f540:	af00      	add	r7, sp, #0
 800f542:	60f8      	str	r0, [r7, #12]
 800f544:	60b9      	str	r1, [r7, #8]
 800f546:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800f548:	2300      	movs	r3, #0
 800f54a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	1c5a      	adds	r2, r3, #1
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f556:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800f558:	697b      	ldr	r3, [r7, #20]
 800f55a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800f55e:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f560:	68bb      	ldr	r3, [r7, #8]
 800f562:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800f564:	68bb      	ldr	r3, [r7, #8]
 800f566:	685b      	ldr	r3, [r3, #4]
 800f568:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f56a:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800f56c:	68bb      	ldr	r3, [r7, #8]
 800f56e:	689b      	ldr	r3, [r3, #8]
 800f570:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800f572:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800f574:	68bb      	ldr	r3, [r7, #8]
 800f576:	68db      	ldr	r3, [r3, #12]
 800f578:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800f57a:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800f57c:	68bb      	ldr	r3, [r7, #8]
 800f57e:	691b      	ldr	r3, [r3, #16]
 800f580:	3b01      	subs	r3, #1
 800f582:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800f584:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800f586:	68bb      	ldr	r3, [r7, #8]
 800f588:	695b      	ldr	r3, [r3, #20]
 800f58a:	3b02      	subs	r3, #2
 800f58c:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800f58e:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800f590:	68bb      	ldr	r3, [r7, #8]
 800f592:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f594:	4313      	orrs	r3, r2
 800f596:	697a      	ldr	r2, [r7, #20]
 800f598:	4313      	orrs	r3, r2
 800f59a:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	1c5a      	adds	r2, r3, #1
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	6979      	ldr	r1, [r7, #20]
 800f5a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800f5a8:	2300      	movs	r3, #0
}
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	371c      	adds	r7, #28
 800f5ae:	46bd      	mov	sp, r7
 800f5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b4:	4770      	bx	lr
	...

0800f5b8 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800f5b8:	b480      	push	{r7}
 800f5ba:	b087      	sub	sp, #28
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	60f8      	str	r0, [r7, #12]
 800f5c0:	60b9      	str	r1, [r7, #8]
 800f5c2:	607a      	str	r2, [r7, #4]
 800f5c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800f5ca:	683b      	ldr	r3, [r7, #0]
 800f5cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f5d0:	d122      	bne.n	800f618 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	687a      	ldr	r2, [r7, #4]
 800f5d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5da:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800f5dc:	697a      	ldr	r2, [r7, #20]
 800f5de:	4b15      	ldr	r3, [pc, #84]	; (800f634 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800f5e0:	4013      	ands	r3, r2
 800f5e2:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f5e4:	68bb      	ldr	r3, [r7, #8]
 800f5e6:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800f5e8:	68bb      	ldr	r3, [r7, #8]
 800f5ea:	685b      	ldr	r3, [r3, #4]
 800f5ec:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f5ee:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800f5f0:	68bb      	ldr	r3, [r7, #8]
 800f5f2:	689b      	ldr	r3, [r3, #8]
 800f5f4:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800f5f6:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800f5f8:	68bb      	ldr	r3, [r7, #8]
 800f5fa:	68db      	ldr	r3, [r3, #12]
 800f5fc:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800f5fe:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800f600:	68bb      	ldr	r3, [r7, #8]
 800f602:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800f604:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f606:	697a      	ldr	r2, [r7, #20]
 800f608:	4313      	orrs	r3, r2
 800f60a:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	687a      	ldr	r2, [r7, #4]
 800f610:	6979      	ldr	r1, [r7, #20]
 800f612:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800f616:	e005      	b.n	800f624 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	687a      	ldr	r2, [r7, #4]
 800f61c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800f620:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800f624:	2300      	movs	r3, #0
}
 800f626:	4618      	mov	r0, r3
 800f628:	371c      	adds	r7, #28
 800f62a:	46bd      	mov	sp, r7
 800f62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f630:	4770      	bx	lr
 800f632:	bf00      	nop
 800f634:	cff00000 	.word	0xcff00000

0800f638 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f638:	b084      	sub	sp, #16
 800f63a:	b580      	push	{r7, lr}
 800f63c:	b084      	sub	sp, #16
 800f63e:	af00      	add	r7, sp, #0
 800f640:	6078      	str	r0, [r7, #4]
 800f642:	f107 001c 	add.w	r0, r7, #28
 800f646:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f64c:	2b01      	cmp	r3, #1
 800f64e:	d122      	bne.n	800f696 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f654:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	68db      	ldr	r3, [r3, #12]
 800f660:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800f664:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f668:	687a      	ldr	r2, [r7, #4]
 800f66a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	68db      	ldr	r3, [r3, #12]
 800f670:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f67a:	2b01      	cmp	r3, #1
 800f67c:	d105      	bne.n	800f68a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	68db      	ldr	r3, [r3, #12]
 800f682:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800f68a:	6878      	ldr	r0, [r7, #4]
 800f68c:	f001 fac6 	bl	8010c1c <USB_CoreReset>
 800f690:	4603      	mov	r3, r0
 800f692:	73fb      	strb	r3, [r7, #15]
 800f694:	e01a      	b.n	800f6cc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	68db      	ldr	r3, [r3, #12]
 800f69a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f6a2:	6878      	ldr	r0, [r7, #4]
 800f6a4:	f001 faba 	bl	8010c1c <USB_CoreReset>
 800f6a8:	4603      	mov	r3, r0
 800f6aa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800f6ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d106      	bne.n	800f6c0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	639a      	str	r2, [r3, #56]	; 0x38
 800f6be:	e005      	b.n	800f6cc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800f6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6ce:	2b01      	cmp	r3, #1
 800f6d0:	d10b      	bne.n	800f6ea <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	689b      	ldr	r3, [r3, #8]
 800f6d6:	f043 0206 	orr.w	r2, r3, #6
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	689b      	ldr	r3, [r3, #8]
 800f6e2:	f043 0220 	orr.w	r2, r3, #32
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f6ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	3710      	adds	r7, #16
 800f6f0:	46bd      	mov	sp, r7
 800f6f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f6f6:	b004      	add	sp, #16
 800f6f8:	4770      	bx	lr
	...

0800f6fc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800f6fc:	b480      	push	{r7}
 800f6fe:	b087      	sub	sp, #28
 800f700:	af00      	add	r7, sp, #0
 800f702:	60f8      	str	r0, [r7, #12]
 800f704:	60b9      	str	r1, [r7, #8]
 800f706:	4613      	mov	r3, r2
 800f708:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800f70a:	79fb      	ldrb	r3, [r7, #7]
 800f70c:	2b02      	cmp	r3, #2
 800f70e:	d165      	bne.n	800f7dc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800f710:	68bb      	ldr	r3, [r7, #8]
 800f712:	4a41      	ldr	r2, [pc, #260]	; (800f818 <USB_SetTurnaroundTime+0x11c>)
 800f714:	4293      	cmp	r3, r2
 800f716:	d906      	bls.n	800f726 <USB_SetTurnaroundTime+0x2a>
 800f718:	68bb      	ldr	r3, [r7, #8]
 800f71a:	4a40      	ldr	r2, [pc, #256]	; (800f81c <USB_SetTurnaroundTime+0x120>)
 800f71c:	4293      	cmp	r3, r2
 800f71e:	d202      	bcs.n	800f726 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800f720:	230f      	movs	r3, #15
 800f722:	617b      	str	r3, [r7, #20]
 800f724:	e062      	b.n	800f7ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800f726:	68bb      	ldr	r3, [r7, #8]
 800f728:	4a3c      	ldr	r2, [pc, #240]	; (800f81c <USB_SetTurnaroundTime+0x120>)
 800f72a:	4293      	cmp	r3, r2
 800f72c:	d306      	bcc.n	800f73c <USB_SetTurnaroundTime+0x40>
 800f72e:	68bb      	ldr	r3, [r7, #8]
 800f730:	4a3b      	ldr	r2, [pc, #236]	; (800f820 <USB_SetTurnaroundTime+0x124>)
 800f732:	4293      	cmp	r3, r2
 800f734:	d202      	bcs.n	800f73c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800f736:	230e      	movs	r3, #14
 800f738:	617b      	str	r3, [r7, #20]
 800f73a:	e057      	b.n	800f7ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800f73c:	68bb      	ldr	r3, [r7, #8]
 800f73e:	4a38      	ldr	r2, [pc, #224]	; (800f820 <USB_SetTurnaroundTime+0x124>)
 800f740:	4293      	cmp	r3, r2
 800f742:	d306      	bcc.n	800f752 <USB_SetTurnaroundTime+0x56>
 800f744:	68bb      	ldr	r3, [r7, #8]
 800f746:	4a37      	ldr	r2, [pc, #220]	; (800f824 <USB_SetTurnaroundTime+0x128>)
 800f748:	4293      	cmp	r3, r2
 800f74a:	d202      	bcs.n	800f752 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800f74c:	230d      	movs	r3, #13
 800f74e:	617b      	str	r3, [r7, #20]
 800f750:	e04c      	b.n	800f7ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800f752:	68bb      	ldr	r3, [r7, #8]
 800f754:	4a33      	ldr	r2, [pc, #204]	; (800f824 <USB_SetTurnaroundTime+0x128>)
 800f756:	4293      	cmp	r3, r2
 800f758:	d306      	bcc.n	800f768 <USB_SetTurnaroundTime+0x6c>
 800f75a:	68bb      	ldr	r3, [r7, #8]
 800f75c:	4a32      	ldr	r2, [pc, #200]	; (800f828 <USB_SetTurnaroundTime+0x12c>)
 800f75e:	4293      	cmp	r3, r2
 800f760:	d802      	bhi.n	800f768 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800f762:	230c      	movs	r3, #12
 800f764:	617b      	str	r3, [r7, #20]
 800f766:	e041      	b.n	800f7ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800f768:	68bb      	ldr	r3, [r7, #8]
 800f76a:	4a2f      	ldr	r2, [pc, #188]	; (800f828 <USB_SetTurnaroundTime+0x12c>)
 800f76c:	4293      	cmp	r3, r2
 800f76e:	d906      	bls.n	800f77e <USB_SetTurnaroundTime+0x82>
 800f770:	68bb      	ldr	r3, [r7, #8]
 800f772:	4a2e      	ldr	r2, [pc, #184]	; (800f82c <USB_SetTurnaroundTime+0x130>)
 800f774:	4293      	cmp	r3, r2
 800f776:	d802      	bhi.n	800f77e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800f778:	230b      	movs	r3, #11
 800f77a:	617b      	str	r3, [r7, #20]
 800f77c:	e036      	b.n	800f7ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800f77e:	68bb      	ldr	r3, [r7, #8]
 800f780:	4a2a      	ldr	r2, [pc, #168]	; (800f82c <USB_SetTurnaroundTime+0x130>)
 800f782:	4293      	cmp	r3, r2
 800f784:	d906      	bls.n	800f794 <USB_SetTurnaroundTime+0x98>
 800f786:	68bb      	ldr	r3, [r7, #8]
 800f788:	4a29      	ldr	r2, [pc, #164]	; (800f830 <USB_SetTurnaroundTime+0x134>)
 800f78a:	4293      	cmp	r3, r2
 800f78c:	d802      	bhi.n	800f794 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800f78e:	230a      	movs	r3, #10
 800f790:	617b      	str	r3, [r7, #20]
 800f792:	e02b      	b.n	800f7ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800f794:	68bb      	ldr	r3, [r7, #8]
 800f796:	4a26      	ldr	r2, [pc, #152]	; (800f830 <USB_SetTurnaroundTime+0x134>)
 800f798:	4293      	cmp	r3, r2
 800f79a:	d906      	bls.n	800f7aa <USB_SetTurnaroundTime+0xae>
 800f79c:	68bb      	ldr	r3, [r7, #8]
 800f79e:	4a25      	ldr	r2, [pc, #148]	; (800f834 <USB_SetTurnaroundTime+0x138>)
 800f7a0:	4293      	cmp	r3, r2
 800f7a2:	d202      	bcs.n	800f7aa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800f7a4:	2309      	movs	r3, #9
 800f7a6:	617b      	str	r3, [r7, #20]
 800f7a8:	e020      	b.n	800f7ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800f7aa:	68bb      	ldr	r3, [r7, #8]
 800f7ac:	4a21      	ldr	r2, [pc, #132]	; (800f834 <USB_SetTurnaroundTime+0x138>)
 800f7ae:	4293      	cmp	r3, r2
 800f7b0:	d306      	bcc.n	800f7c0 <USB_SetTurnaroundTime+0xc4>
 800f7b2:	68bb      	ldr	r3, [r7, #8]
 800f7b4:	4a20      	ldr	r2, [pc, #128]	; (800f838 <USB_SetTurnaroundTime+0x13c>)
 800f7b6:	4293      	cmp	r3, r2
 800f7b8:	d802      	bhi.n	800f7c0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800f7ba:	2308      	movs	r3, #8
 800f7bc:	617b      	str	r3, [r7, #20]
 800f7be:	e015      	b.n	800f7ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800f7c0:	68bb      	ldr	r3, [r7, #8]
 800f7c2:	4a1d      	ldr	r2, [pc, #116]	; (800f838 <USB_SetTurnaroundTime+0x13c>)
 800f7c4:	4293      	cmp	r3, r2
 800f7c6:	d906      	bls.n	800f7d6 <USB_SetTurnaroundTime+0xda>
 800f7c8:	68bb      	ldr	r3, [r7, #8]
 800f7ca:	4a1c      	ldr	r2, [pc, #112]	; (800f83c <USB_SetTurnaroundTime+0x140>)
 800f7cc:	4293      	cmp	r3, r2
 800f7ce:	d202      	bcs.n	800f7d6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800f7d0:	2307      	movs	r3, #7
 800f7d2:	617b      	str	r3, [r7, #20]
 800f7d4:	e00a      	b.n	800f7ec <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800f7d6:	2306      	movs	r3, #6
 800f7d8:	617b      	str	r3, [r7, #20]
 800f7da:	e007      	b.n	800f7ec <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800f7dc:	79fb      	ldrb	r3, [r7, #7]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d102      	bne.n	800f7e8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800f7e2:	2309      	movs	r3, #9
 800f7e4:	617b      	str	r3, [r7, #20]
 800f7e6:	e001      	b.n	800f7ec <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800f7e8:	2309      	movs	r3, #9
 800f7ea:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	68db      	ldr	r3, [r3, #12]
 800f7f0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	68da      	ldr	r2, [r3, #12]
 800f7fc:	697b      	ldr	r3, [r7, #20]
 800f7fe:	029b      	lsls	r3, r3, #10
 800f800:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800f804:	431a      	orrs	r2, r3
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f80a:	2300      	movs	r3, #0
}
 800f80c:	4618      	mov	r0, r3
 800f80e:	371c      	adds	r7, #28
 800f810:	46bd      	mov	sp, r7
 800f812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f816:	4770      	bx	lr
 800f818:	00d8acbf 	.word	0x00d8acbf
 800f81c:	00e4e1c0 	.word	0x00e4e1c0
 800f820:	00f42400 	.word	0x00f42400
 800f824:	01067380 	.word	0x01067380
 800f828:	011a499f 	.word	0x011a499f
 800f82c:	01312cff 	.word	0x01312cff
 800f830:	014ca43f 	.word	0x014ca43f
 800f834:	016e3600 	.word	0x016e3600
 800f838:	01a6ab1f 	.word	0x01a6ab1f
 800f83c:	01e84800 	.word	0x01e84800

0800f840 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f840:	b480      	push	{r7}
 800f842:	b083      	sub	sp, #12
 800f844:	af00      	add	r7, sp, #0
 800f846:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	689b      	ldr	r3, [r3, #8]
 800f84c:	f043 0201 	orr.w	r2, r3, #1
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f854:	2300      	movs	r3, #0
}
 800f856:	4618      	mov	r0, r3
 800f858:	370c      	adds	r7, #12
 800f85a:	46bd      	mov	sp, r7
 800f85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f860:	4770      	bx	lr

0800f862 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f862:	b480      	push	{r7}
 800f864:	b083      	sub	sp, #12
 800f866:	af00      	add	r7, sp, #0
 800f868:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	689b      	ldr	r3, [r3, #8]
 800f86e:	f023 0201 	bic.w	r2, r3, #1
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f876:	2300      	movs	r3, #0
}
 800f878:	4618      	mov	r0, r3
 800f87a:	370c      	adds	r7, #12
 800f87c:	46bd      	mov	sp, r7
 800f87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f882:	4770      	bx	lr

0800f884 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f884:	b580      	push	{r7, lr}
 800f886:	b082      	sub	sp, #8
 800f888:	af00      	add	r7, sp, #0
 800f88a:	6078      	str	r0, [r7, #4]
 800f88c:	460b      	mov	r3, r1
 800f88e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	68db      	ldr	r3, [r3, #12]
 800f894:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f89c:	78fb      	ldrb	r3, [r7, #3]
 800f89e:	2b01      	cmp	r3, #1
 800f8a0:	d106      	bne.n	800f8b0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	68db      	ldr	r3, [r3, #12]
 800f8a6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	60da      	str	r2, [r3, #12]
 800f8ae:	e00b      	b.n	800f8c8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800f8b0:	78fb      	ldrb	r3, [r7, #3]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d106      	bne.n	800f8c4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	68db      	ldr	r3, [r3, #12]
 800f8ba:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	60da      	str	r2, [r3, #12]
 800f8c2:	e001      	b.n	800f8c8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800f8c4:	2301      	movs	r3, #1
 800f8c6:	e003      	b.n	800f8d0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800f8c8:	2032      	movs	r0, #50	; 0x32
 800f8ca:	f7fb fdb3 	bl	800b434 <HAL_Delay>

  return HAL_OK;
 800f8ce:	2300      	movs	r3, #0
}
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	3708      	adds	r7, #8
 800f8d4:	46bd      	mov	sp, r7
 800f8d6:	bd80      	pop	{r7, pc}

0800f8d8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f8d8:	b084      	sub	sp, #16
 800f8da:	b580      	push	{r7, lr}
 800f8dc:	b086      	sub	sp, #24
 800f8de:	af00      	add	r7, sp, #0
 800f8e0:	6078      	str	r0, [r7, #4]
 800f8e2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800f8e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f8ea:	2300      	movs	r3, #0
 800f8ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	613b      	str	r3, [r7, #16]
 800f8f6:	e009      	b.n	800f90c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f8f8:	687a      	ldr	r2, [r7, #4]
 800f8fa:	693b      	ldr	r3, [r7, #16]
 800f8fc:	3340      	adds	r3, #64	; 0x40
 800f8fe:	009b      	lsls	r3, r3, #2
 800f900:	4413      	add	r3, r2
 800f902:	2200      	movs	r2, #0
 800f904:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f906:	693b      	ldr	r3, [r7, #16]
 800f908:	3301      	adds	r3, #1
 800f90a:	613b      	str	r3, [r7, #16]
 800f90c:	693b      	ldr	r3, [r7, #16]
 800f90e:	2b0e      	cmp	r3, #14
 800f910:	d9f2      	bls.n	800f8f8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f914:	2b00      	cmp	r3, #0
 800f916:	d11c      	bne.n	800f952 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f91e:	685b      	ldr	r3, [r3, #4]
 800f920:	68fa      	ldr	r2, [r7, #12]
 800f922:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f926:	f043 0302 	orr.w	r3, r3, #2
 800f92a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f930:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f93c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f948:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	639a      	str	r2, [r3, #56]	; 0x38
 800f950:	e00b      	b.n	800f96a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f956:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f962:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f970:	461a      	mov	r2, r3
 800f972:	2300      	movs	r3, #0
 800f974:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f97c:	4619      	mov	r1, r3
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f984:	461a      	mov	r2, r3
 800f986:	680b      	ldr	r3, [r1, #0]
 800f988:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f98a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f98c:	2b01      	cmp	r3, #1
 800f98e:	d10c      	bne.n	800f9aa <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f992:	2b00      	cmp	r3, #0
 800f994:	d104      	bne.n	800f9a0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f996:	2100      	movs	r1, #0
 800f998:	6878      	ldr	r0, [r7, #4]
 800f99a:	f000 f949 	bl	800fc30 <USB_SetDevSpeed>
 800f99e:	e008      	b.n	800f9b2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f9a0:	2101      	movs	r1, #1
 800f9a2:	6878      	ldr	r0, [r7, #4]
 800f9a4:	f000 f944 	bl	800fc30 <USB_SetDevSpeed>
 800f9a8:	e003      	b.n	800f9b2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f9aa:	2103      	movs	r1, #3
 800f9ac:	6878      	ldr	r0, [r7, #4]
 800f9ae:	f000 f93f 	bl	800fc30 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f9b2:	2110      	movs	r1, #16
 800f9b4:	6878      	ldr	r0, [r7, #4]
 800f9b6:	f000 f8f3 	bl	800fba0 <USB_FlushTxFifo>
 800f9ba:	4603      	mov	r3, r0
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d001      	beq.n	800f9c4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800f9c0:	2301      	movs	r3, #1
 800f9c2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f9c4:	6878      	ldr	r0, [r7, #4]
 800f9c6:	f000 f911 	bl	800fbec <USB_FlushRxFifo>
 800f9ca:	4603      	mov	r3, r0
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d001      	beq.n	800f9d4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800f9d0:	2301      	movs	r3, #1
 800f9d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f9da:	461a      	mov	r2, r3
 800f9dc:	2300      	movs	r3, #0
 800f9de:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f9e6:	461a      	mov	r2, r3
 800f9e8:	2300      	movs	r3, #0
 800f9ea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f9f2:	461a      	mov	r2, r3
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f9f8:	2300      	movs	r3, #0
 800f9fa:	613b      	str	r3, [r7, #16]
 800f9fc:	e043      	b.n	800fa86 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f9fe:	693b      	ldr	r3, [r7, #16]
 800fa00:	015a      	lsls	r2, r3, #5
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	4413      	add	r3, r2
 800fa06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fa10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fa14:	d118      	bne.n	800fa48 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800fa16:	693b      	ldr	r3, [r7, #16]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d10a      	bne.n	800fa32 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800fa1c:	693b      	ldr	r3, [r7, #16]
 800fa1e:	015a      	lsls	r2, r3, #5
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	4413      	add	r3, r2
 800fa24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa28:	461a      	mov	r2, r3
 800fa2a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fa2e:	6013      	str	r3, [r2, #0]
 800fa30:	e013      	b.n	800fa5a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800fa32:	693b      	ldr	r3, [r7, #16]
 800fa34:	015a      	lsls	r2, r3, #5
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	4413      	add	r3, r2
 800fa3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa3e:	461a      	mov	r2, r3
 800fa40:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fa44:	6013      	str	r3, [r2, #0]
 800fa46:	e008      	b.n	800fa5a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800fa48:	693b      	ldr	r3, [r7, #16]
 800fa4a:	015a      	lsls	r2, r3, #5
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	4413      	add	r3, r2
 800fa50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa54:	461a      	mov	r2, r3
 800fa56:	2300      	movs	r3, #0
 800fa58:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800fa5a:	693b      	ldr	r3, [r7, #16]
 800fa5c:	015a      	lsls	r2, r3, #5
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	4413      	add	r3, r2
 800fa62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa66:	461a      	mov	r2, r3
 800fa68:	2300      	movs	r3, #0
 800fa6a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800fa6c:	693b      	ldr	r3, [r7, #16]
 800fa6e:	015a      	lsls	r2, r3, #5
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	4413      	add	r3, r2
 800fa74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa78:	461a      	mov	r2, r3
 800fa7a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fa7e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fa80:	693b      	ldr	r3, [r7, #16]
 800fa82:	3301      	adds	r3, #1
 800fa84:	613b      	str	r3, [r7, #16]
 800fa86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa88:	693a      	ldr	r2, [r7, #16]
 800fa8a:	429a      	cmp	r2, r3
 800fa8c:	d3b7      	bcc.n	800f9fe <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fa8e:	2300      	movs	r3, #0
 800fa90:	613b      	str	r3, [r7, #16]
 800fa92:	e043      	b.n	800fb1c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fa94:	693b      	ldr	r3, [r7, #16]
 800fa96:	015a      	lsls	r2, r3, #5
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	4413      	add	r3, r2
 800fa9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800faa6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800faaa:	d118      	bne.n	800fade <USB_DevInit+0x206>
    {
      if (i == 0U)
 800faac:	693b      	ldr	r3, [r7, #16]
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d10a      	bne.n	800fac8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800fab2:	693b      	ldr	r3, [r7, #16]
 800fab4:	015a      	lsls	r2, r3, #5
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	4413      	add	r3, r2
 800faba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fabe:	461a      	mov	r2, r3
 800fac0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fac4:	6013      	str	r3, [r2, #0]
 800fac6:	e013      	b.n	800faf0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800fac8:	693b      	ldr	r3, [r7, #16]
 800faca:	015a      	lsls	r2, r3, #5
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	4413      	add	r3, r2
 800fad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fad4:	461a      	mov	r2, r3
 800fad6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fada:	6013      	str	r3, [r2, #0]
 800fadc:	e008      	b.n	800faf0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800fade:	693b      	ldr	r3, [r7, #16]
 800fae0:	015a      	lsls	r2, r3, #5
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	4413      	add	r3, r2
 800fae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800faea:	461a      	mov	r2, r3
 800faec:	2300      	movs	r3, #0
 800faee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800faf0:	693b      	ldr	r3, [r7, #16]
 800faf2:	015a      	lsls	r2, r3, #5
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	4413      	add	r3, r2
 800faf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fafc:	461a      	mov	r2, r3
 800fafe:	2300      	movs	r3, #0
 800fb00:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800fb02:	693b      	ldr	r3, [r7, #16]
 800fb04:	015a      	lsls	r2, r3, #5
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	4413      	add	r3, r2
 800fb0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb0e:	461a      	mov	r2, r3
 800fb10:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fb14:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fb16:	693b      	ldr	r3, [r7, #16]
 800fb18:	3301      	adds	r3, #1
 800fb1a:	613b      	str	r3, [r7, #16]
 800fb1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb1e:	693a      	ldr	r2, [r7, #16]
 800fb20:	429a      	cmp	r2, r3
 800fb22:	d3b7      	bcc.n	800fa94 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb2a:	691b      	ldr	r3, [r3, #16]
 800fb2c:	68fa      	ldr	r2, [r7, #12]
 800fb2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fb32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fb36:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	2200      	movs	r2, #0
 800fb3c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800fb44:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800fb46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d105      	bne.n	800fb58 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	699b      	ldr	r3, [r3, #24]
 800fb50:	f043 0210 	orr.w	r2, r3, #16
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	699a      	ldr	r2, [r3, #24]
 800fb5c:	4b0f      	ldr	r3, [pc, #60]	; (800fb9c <USB_DevInit+0x2c4>)
 800fb5e:	4313      	orrs	r3, r2
 800fb60:	687a      	ldr	r2, [r7, #4]
 800fb62:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800fb64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d005      	beq.n	800fb76 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	699b      	ldr	r3, [r3, #24]
 800fb6e:	f043 0208 	orr.w	r2, r3, #8
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800fb76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb78:	2b01      	cmp	r3, #1
 800fb7a:	d107      	bne.n	800fb8c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	699b      	ldr	r3, [r3, #24]
 800fb80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fb84:	f043 0304 	orr.w	r3, r3, #4
 800fb88:	687a      	ldr	r2, [r7, #4]
 800fb8a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800fb8c:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb8e:	4618      	mov	r0, r3
 800fb90:	3718      	adds	r7, #24
 800fb92:	46bd      	mov	sp, r7
 800fb94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fb98:	b004      	add	sp, #16
 800fb9a:	4770      	bx	lr
 800fb9c:	803c3800 	.word	0x803c3800

0800fba0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800fba0:	b480      	push	{r7}
 800fba2:	b085      	sub	sp, #20
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	6078      	str	r0, [r7, #4]
 800fba8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800fbaa:	2300      	movs	r3, #0
 800fbac:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800fbae:	683b      	ldr	r3, [r7, #0]
 800fbb0:	019b      	lsls	r3, r3, #6
 800fbb2:	f043 0220 	orr.w	r2, r3, #32
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	3301      	adds	r3, #1
 800fbbe:	60fb      	str	r3, [r7, #12]
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	4a09      	ldr	r2, [pc, #36]	; (800fbe8 <USB_FlushTxFifo+0x48>)
 800fbc4:	4293      	cmp	r3, r2
 800fbc6:	d901      	bls.n	800fbcc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800fbc8:	2303      	movs	r3, #3
 800fbca:	e006      	b.n	800fbda <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	691b      	ldr	r3, [r3, #16]
 800fbd0:	f003 0320 	and.w	r3, r3, #32
 800fbd4:	2b20      	cmp	r3, #32
 800fbd6:	d0f0      	beq.n	800fbba <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800fbd8:	2300      	movs	r3, #0
}
 800fbda:	4618      	mov	r0, r3
 800fbdc:	3714      	adds	r7, #20
 800fbde:	46bd      	mov	sp, r7
 800fbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe4:	4770      	bx	lr
 800fbe6:	bf00      	nop
 800fbe8:	00030d40 	.word	0x00030d40

0800fbec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800fbec:	b480      	push	{r7}
 800fbee:	b085      	sub	sp, #20
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800fbf4:	2300      	movs	r3, #0
 800fbf6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	2210      	movs	r2, #16
 800fbfc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	3301      	adds	r3, #1
 800fc02:	60fb      	str	r3, [r7, #12]
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	4a09      	ldr	r2, [pc, #36]	; (800fc2c <USB_FlushRxFifo+0x40>)
 800fc08:	4293      	cmp	r3, r2
 800fc0a:	d901      	bls.n	800fc10 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800fc0c:	2303      	movs	r3, #3
 800fc0e:	e006      	b.n	800fc1e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	691b      	ldr	r3, [r3, #16]
 800fc14:	f003 0310 	and.w	r3, r3, #16
 800fc18:	2b10      	cmp	r3, #16
 800fc1a:	d0f0      	beq.n	800fbfe <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800fc1c:	2300      	movs	r3, #0
}
 800fc1e:	4618      	mov	r0, r3
 800fc20:	3714      	adds	r7, #20
 800fc22:	46bd      	mov	sp, r7
 800fc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc28:	4770      	bx	lr
 800fc2a:	bf00      	nop
 800fc2c:	00030d40 	.word	0x00030d40

0800fc30 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800fc30:	b480      	push	{r7}
 800fc32:	b085      	sub	sp, #20
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	6078      	str	r0, [r7, #4]
 800fc38:	460b      	mov	r3, r1
 800fc3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc46:	681a      	ldr	r2, [r3, #0]
 800fc48:	78fb      	ldrb	r3, [r7, #3]
 800fc4a:	68f9      	ldr	r1, [r7, #12]
 800fc4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fc50:	4313      	orrs	r3, r2
 800fc52:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800fc54:	2300      	movs	r3, #0
}
 800fc56:	4618      	mov	r0, r3
 800fc58:	3714      	adds	r7, #20
 800fc5a:	46bd      	mov	sp, r7
 800fc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc60:	4770      	bx	lr

0800fc62 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800fc62:	b480      	push	{r7}
 800fc64:	b087      	sub	sp, #28
 800fc66:	af00      	add	r7, sp, #0
 800fc68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800fc6e:	693b      	ldr	r3, [r7, #16]
 800fc70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc74:	689b      	ldr	r3, [r3, #8]
 800fc76:	f003 0306 	and.w	r3, r3, #6
 800fc7a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d102      	bne.n	800fc88 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800fc82:	2300      	movs	r3, #0
 800fc84:	75fb      	strb	r3, [r7, #23]
 800fc86:	e00a      	b.n	800fc9e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	2b02      	cmp	r3, #2
 800fc8c:	d002      	beq.n	800fc94 <USB_GetDevSpeed+0x32>
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	2b06      	cmp	r3, #6
 800fc92:	d102      	bne.n	800fc9a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800fc94:	2302      	movs	r3, #2
 800fc96:	75fb      	strb	r3, [r7, #23]
 800fc98:	e001      	b.n	800fc9e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800fc9a:	230f      	movs	r3, #15
 800fc9c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800fc9e:	7dfb      	ldrb	r3, [r7, #23]
}
 800fca0:	4618      	mov	r0, r3
 800fca2:	371c      	adds	r7, #28
 800fca4:	46bd      	mov	sp, r7
 800fca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcaa:	4770      	bx	lr

0800fcac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fcac:	b480      	push	{r7}
 800fcae:	b085      	sub	sp, #20
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	6078      	str	r0, [r7, #4]
 800fcb4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fcba:	683b      	ldr	r3, [r7, #0]
 800fcbc:	781b      	ldrb	r3, [r3, #0]
 800fcbe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800fcc0:	683b      	ldr	r3, [r7, #0]
 800fcc2:	785b      	ldrb	r3, [r3, #1]
 800fcc4:	2b01      	cmp	r3, #1
 800fcc6:	d13a      	bne.n	800fd3e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fcce:	69da      	ldr	r2, [r3, #28]
 800fcd0:	683b      	ldr	r3, [r7, #0]
 800fcd2:	781b      	ldrb	r3, [r3, #0]
 800fcd4:	f003 030f 	and.w	r3, r3, #15
 800fcd8:	2101      	movs	r1, #1
 800fcda:	fa01 f303 	lsl.w	r3, r1, r3
 800fcde:	b29b      	uxth	r3, r3
 800fce0:	68f9      	ldr	r1, [r7, #12]
 800fce2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fce6:	4313      	orrs	r3, r2
 800fce8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800fcea:	68bb      	ldr	r3, [r7, #8]
 800fcec:	015a      	lsls	r2, r3, #5
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	4413      	add	r3, r2
 800fcf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d155      	bne.n	800fdac <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fd00:	68bb      	ldr	r3, [r7, #8]
 800fd02:	015a      	lsls	r2, r3, #5
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	4413      	add	r3, r2
 800fd08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd0c:	681a      	ldr	r2, [r3, #0]
 800fd0e:	683b      	ldr	r3, [r7, #0]
 800fd10:	689b      	ldr	r3, [r3, #8]
 800fd12:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800fd16:	683b      	ldr	r3, [r7, #0]
 800fd18:	78db      	ldrb	r3, [r3, #3]
 800fd1a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fd1c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800fd1e:	68bb      	ldr	r3, [r7, #8]
 800fd20:	059b      	lsls	r3, r3, #22
 800fd22:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fd24:	4313      	orrs	r3, r2
 800fd26:	68ba      	ldr	r2, [r7, #8]
 800fd28:	0151      	lsls	r1, r2, #5
 800fd2a:	68fa      	ldr	r2, [r7, #12]
 800fd2c:	440a      	add	r2, r1
 800fd2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fd36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fd3a:	6013      	str	r3, [r2, #0]
 800fd3c:	e036      	b.n	800fdac <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd44:	69da      	ldr	r2, [r3, #28]
 800fd46:	683b      	ldr	r3, [r7, #0]
 800fd48:	781b      	ldrb	r3, [r3, #0]
 800fd4a:	f003 030f 	and.w	r3, r3, #15
 800fd4e:	2101      	movs	r1, #1
 800fd50:	fa01 f303 	lsl.w	r3, r1, r3
 800fd54:	041b      	lsls	r3, r3, #16
 800fd56:	68f9      	ldr	r1, [r7, #12]
 800fd58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fd5c:	4313      	orrs	r3, r2
 800fd5e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800fd60:	68bb      	ldr	r3, [r7, #8]
 800fd62:	015a      	lsls	r2, r3, #5
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	4413      	add	r3, r2
 800fd68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d11a      	bne.n	800fdac <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800fd76:	68bb      	ldr	r3, [r7, #8]
 800fd78:	015a      	lsls	r2, r3, #5
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	4413      	add	r3, r2
 800fd7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd82:	681a      	ldr	r2, [r3, #0]
 800fd84:	683b      	ldr	r3, [r7, #0]
 800fd86:	689b      	ldr	r3, [r3, #8]
 800fd88:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800fd8c:	683b      	ldr	r3, [r7, #0]
 800fd8e:	78db      	ldrb	r3, [r3, #3]
 800fd90:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800fd92:	430b      	orrs	r3, r1
 800fd94:	4313      	orrs	r3, r2
 800fd96:	68ba      	ldr	r2, [r7, #8]
 800fd98:	0151      	lsls	r1, r2, #5
 800fd9a:	68fa      	ldr	r2, [r7, #12]
 800fd9c:	440a      	add	r2, r1
 800fd9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fda2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fda6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fdaa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800fdac:	2300      	movs	r3, #0
}
 800fdae:	4618      	mov	r0, r3
 800fdb0:	3714      	adds	r7, #20
 800fdb2:	46bd      	mov	sp, r7
 800fdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb8:	4770      	bx	lr
	...

0800fdbc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fdbc:	b480      	push	{r7}
 800fdbe:	b085      	sub	sp, #20
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	6078      	str	r0, [r7, #4]
 800fdc4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fdca:	683b      	ldr	r3, [r7, #0]
 800fdcc:	781b      	ldrb	r3, [r3, #0]
 800fdce:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800fdd0:	683b      	ldr	r3, [r7, #0]
 800fdd2:	785b      	ldrb	r3, [r3, #1]
 800fdd4:	2b01      	cmp	r3, #1
 800fdd6:	d161      	bne.n	800fe9c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fdd8:	68bb      	ldr	r3, [r7, #8]
 800fdda:	015a      	lsls	r2, r3, #5
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	4413      	add	r3, r2
 800fde0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fdea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fdee:	d11f      	bne.n	800fe30 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800fdf0:	68bb      	ldr	r3, [r7, #8]
 800fdf2:	015a      	lsls	r2, r3, #5
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	4413      	add	r3, r2
 800fdf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	68ba      	ldr	r2, [r7, #8]
 800fe00:	0151      	lsls	r1, r2, #5
 800fe02:	68fa      	ldr	r2, [r7, #12]
 800fe04:	440a      	add	r2, r1
 800fe06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe0a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800fe0e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800fe10:	68bb      	ldr	r3, [r7, #8]
 800fe12:	015a      	lsls	r2, r3, #5
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	4413      	add	r3, r2
 800fe18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	68ba      	ldr	r2, [r7, #8]
 800fe20:	0151      	lsls	r1, r2, #5
 800fe22:	68fa      	ldr	r2, [r7, #12]
 800fe24:	440a      	add	r2, r1
 800fe26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fe2e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fe38:	683b      	ldr	r3, [r7, #0]
 800fe3a:	781b      	ldrb	r3, [r3, #0]
 800fe3c:	f003 030f 	and.w	r3, r3, #15
 800fe40:	2101      	movs	r1, #1
 800fe42:	fa01 f303 	lsl.w	r3, r1, r3
 800fe46:	b29b      	uxth	r3, r3
 800fe48:	43db      	mvns	r3, r3
 800fe4a:	68f9      	ldr	r1, [r7, #12]
 800fe4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fe50:	4013      	ands	r3, r2
 800fe52:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe5a:	69da      	ldr	r2, [r3, #28]
 800fe5c:	683b      	ldr	r3, [r7, #0]
 800fe5e:	781b      	ldrb	r3, [r3, #0]
 800fe60:	f003 030f 	and.w	r3, r3, #15
 800fe64:	2101      	movs	r1, #1
 800fe66:	fa01 f303 	lsl.w	r3, r1, r3
 800fe6a:	b29b      	uxth	r3, r3
 800fe6c:	43db      	mvns	r3, r3
 800fe6e:	68f9      	ldr	r1, [r7, #12]
 800fe70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fe74:	4013      	ands	r3, r2
 800fe76:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800fe78:	68bb      	ldr	r3, [r7, #8]
 800fe7a:	015a      	lsls	r2, r3, #5
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	4413      	add	r3, r2
 800fe80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe84:	681a      	ldr	r2, [r3, #0]
 800fe86:	68bb      	ldr	r3, [r7, #8]
 800fe88:	0159      	lsls	r1, r3, #5
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	440b      	add	r3, r1
 800fe8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe92:	4619      	mov	r1, r3
 800fe94:	4b35      	ldr	r3, [pc, #212]	; (800ff6c <USB_DeactivateEndpoint+0x1b0>)
 800fe96:	4013      	ands	r3, r2
 800fe98:	600b      	str	r3, [r1, #0]
 800fe9a:	e060      	b.n	800ff5e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fe9c:	68bb      	ldr	r3, [r7, #8]
 800fe9e:	015a      	lsls	r2, r3, #5
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	4413      	add	r3, r2
 800fea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800feae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800feb2:	d11f      	bne.n	800fef4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800feb4:	68bb      	ldr	r3, [r7, #8]
 800feb6:	015a      	lsls	r2, r3, #5
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	4413      	add	r3, r2
 800febc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	68ba      	ldr	r2, [r7, #8]
 800fec4:	0151      	lsls	r1, r2, #5
 800fec6:	68fa      	ldr	r2, [r7, #12]
 800fec8:	440a      	add	r2, r1
 800feca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fece:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800fed2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800fed4:	68bb      	ldr	r3, [r7, #8]
 800fed6:	015a      	lsls	r2, r3, #5
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	4413      	add	r3, r2
 800fedc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	68ba      	ldr	r2, [r7, #8]
 800fee4:	0151      	lsls	r1, r2, #5
 800fee6:	68fa      	ldr	r2, [r7, #12]
 800fee8:	440a      	add	r2, r1
 800feea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800feee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fef2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fefa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fefc:	683b      	ldr	r3, [r7, #0]
 800fefe:	781b      	ldrb	r3, [r3, #0]
 800ff00:	f003 030f 	and.w	r3, r3, #15
 800ff04:	2101      	movs	r1, #1
 800ff06:	fa01 f303 	lsl.w	r3, r1, r3
 800ff0a:	041b      	lsls	r3, r3, #16
 800ff0c:	43db      	mvns	r3, r3
 800ff0e:	68f9      	ldr	r1, [r7, #12]
 800ff10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ff14:	4013      	ands	r3, r2
 800ff16:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff1e:	69da      	ldr	r2, [r3, #28]
 800ff20:	683b      	ldr	r3, [r7, #0]
 800ff22:	781b      	ldrb	r3, [r3, #0]
 800ff24:	f003 030f 	and.w	r3, r3, #15
 800ff28:	2101      	movs	r1, #1
 800ff2a:	fa01 f303 	lsl.w	r3, r1, r3
 800ff2e:	041b      	lsls	r3, r3, #16
 800ff30:	43db      	mvns	r3, r3
 800ff32:	68f9      	ldr	r1, [r7, #12]
 800ff34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ff38:	4013      	ands	r3, r2
 800ff3a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ff3c:	68bb      	ldr	r3, [r7, #8]
 800ff3e:	015a      	lsls	r2, r3, #5
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	4413      	add	r3, r2
 800ff44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff48:	681a      	ldr	r2, [r3, #0]
 800ff4a:	68bb      	ldr	r3, [r7, #8]
 800ff4c:	0159      	lsls	r1, r3, #5
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	440b      	add	r3, r1
 800ff52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff56:	4619      	mov	r1, r3
 800ff58:	4b05      	ldr	r3, [pc, #20]	; (800ff70 <USB_DeactivateEndpoint+0x1b4>)
 800ff5a:	4013      	ands	r3, r2
 800ff5c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ff5e:	2300      	movs	r3, #0
}
 800ff60:	4618      	mov	r0, r3
 800ff62:	3714      	adds	r7, #20
 800ff64:	46bd      	mov	sp, r7
 800ff66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff6a:	4770      	bx	lr
 800ff6c:	ec337800 	.word	0xec337800
 800ff70:	eff37800 	.word	0xeff37800

0800ff74 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ff74:	b580      	push	{r7, lr}
 800ff76:	b08a      	sub	sp, #40	; 0x28
 800ff78:	af02      	add	r7, sp, #8
 800ff7a:	60f8      	str	r0, [r7, #12]
 800ff7c:	60b9      	str	r1, [r7, #8]
 800ff7e:	4613      	mov	r3, r2
 800ff80:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800ff86:	68bb      	ldr	r3, [r7, #8]
 800ff88:	781b      	ldrb	r3, [r3, #0]
 800ff8a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ff8c:	68bb      	ldr	r3, [r7, #8]
 800ff8e:	785b      	ldrb	r3, [r3, #1]
 800ff90:	2b01      	cmp	r3, #1
 800ff92:	f040 815c 	bne.w	801024e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ff96:	68bb      	ldr	r3, [r7, #8]
 800ff98:	695b      	ldr	r3, [r3, #20]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d132      	bne.n	8010004 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ff9e:	69bb      	ldr	r3, [r7, #24]
 800ffa0:	015a      	lsls	r2, r3, #5
 800ffa2:	69fb      	ldr	r3, [r7, #28]
 800ffa4:	4413      	add	r3, r2
 800ffa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffaa:	691b      	ldr	r3, [r3, #16]
 800ffac:	69ba      	ldr	r2, [r7, #24]
 800ffae:	0151      	lsls	r1, r2, #5
 800ffb0:	69fa      	ldr	r2, [r7, #28]
 800ffb2:	440a      	add	r2, r1
 800ffb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ffb8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ffbc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ffc0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ffc2:	69bb      	ldr	r3, [r7, #24]
 800ffc4:	015a      	lsls	r2, r3, #5
 800ffc6:	69fb      	ldr	r3, [r7, #28]
 800ffc8:	4413      	add	r3, r2
 800ffca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffce:	691b      	ldr	r3, [r3, #16]
 800ffd0:	69ba      	ldr	r2, [r7, #24]
 800ffd2:	0151      	lsls	r1, r2, #5
 800ffd4:	69fa      	ldr	r2, [r7, #28]
 800ffd6:	440a      	add	r2, r1
 800ffd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ffdc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ffe0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ffe2:	69bb      	ldr	r3, [r7, #24]
 800ffe4:	015a      	lsls	r2, r3, #5
 800ffe6:	69fb      	ldr	r3, [r7, #28]
 800ffe8:	4413      	add	r3, r2
 800ffea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffee:	691b      	ldr	r3, [r3, #16]
 800fff0:	69ba      	ldr	r2, [r7, #24]
 800fff2:	0151      	lsls	r1, r2, #5
 800fff4:	69fa      	ldr	r2, [r7, #28]
 800fff6:	440a      	add	r2, r1
 800fff8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fffc:	0cdb      	lsrs	r3, r3, #19
 800fffe:	04db      	lsls	r3, r3, #19
 8010000:	6113      	str	r3, [r2, #16]
 8010002:	e074      	b.n	80100ee <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010004:	69bb      	ldr	r3, [r7, #24]
 8010006:	015a      	lsls	r2, r3, #5
 8010008:	69fb      	ldr	r3, [r7, #28]
 801000a:	4413      	add	r3, r2
 801000c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010010:	691b      	ldr	r3, [r3, #16]
 8010012:	69ba      	ldr	r2, [r7, #24]
 8010014:	0151      	lsls	r1, r2, #5
 8010016:	69fa      	ldr	r2, [r7, #28]
 8010018:	440a      	add	r2, r1
 801001a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801001e:	0cdb      	lsrs	r3, r3, #19
 8010020:	04db      	lsls	r3, r3, #19
 8010022:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010024:	69bb      	ldr	r3, [r7, #24]
 8010026:	015a      	lsls	r2, r3, #5
 8010028:	69fb      	ldr	r3, [r7, #28]
 801002a:	4413      	add	r3, r2
 801002c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010030:	691b      	ldr	r3, [r3, #16]
 8010032:	69ba      	ldr	r2, [r7, #24]
 8010034:	0151      	lsls	r1, r2, #5
 8010036:	69fa      	ldr	r2, [r7, #28]
 8010038:	440a      	add	r2, r1
 801003a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801003e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010042:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010046:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8010048:	69bb      	ldr	r3, [r7, #24]
 801004a:	015a      	lsls	r2, r3, #5
 801004c:	69fb      	ldr	r3, [r7, #28]
 801004e:	4413      	add	r3, r2
 8010050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010054:	691a      	ldr	r2, [r3, #16]
 8010056:	68bb      	ldr	r3, [r7, #8]
 8010058:	6959      	ldr	r1, [r3, #20]
 801005a:	68bb      	ldr	r3, [r7, #8]
 801005c:	689b      	ldr	r3, [r3, #8]
 801005e:	440b      	add	r3, r1
 8010060:	1e59      	subs	r1, r3, #1
 8010062:	68bb      	ldr	r3, [r7, #8]
 8010064:	689b      	ldr	r3, [r3, #8]
 8010066:	fbb1 f3f3 	udiv	r3, r1, r3
 801006a:	04d9      	lsls	r1, r3, #19
 801006c:	4b9d      	ldr	r3, [pc, #628]	; (80102e4 <USB_EPStartXfer+0x370>)
 801006e:	400b      	ands	r3, r1
 8010070:	69b9      	ldr	r1, [r7, #24]
 8010072:	0148      	lsls	r0, r1, #5
 8010074:	69f9      	ldr	r1, [r7, #28]
 8010076:	4401      	add	r1, r0
 8010078:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801007c:	4313      	orrs	r3, r2
 801007e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010080:	69bb      	ldr	r3, [r7, #24]
 8010082:	015a      	lsls	r2, r3, #5
 8010084:	69fb      	ldr	r3, [r7, #28]
 8010086:	4413      	add	r3, r2
 8010088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801008c:	691a      	ldr	r2, [r3, #16]
 801008e:	68bb      	ldr	r3, [r7, #8]
 8010090:	695b      	ldr	r3, [r3, #20]
 8010092:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010096:	69b9      	ldr	r1, [r7, #24]
 8010098:	0148      	lsls	r0, r1, #5
 801009a:	69f9      	ldr	r1, [r7, #28]
 801009c:	4401      	add	r1, r0
 801009e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80100a2:	4313      	orrs	r3, r2
 80100a4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80100a6:	68bb      	ldr	r3, [r7, #8]
 80100a8:	78db      	ldrb	r3, [r3, #3]
 80100aa:	2b01      	cmp	r3, #1
 80100ac:	d11f      	bne.n	80100ee <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80100ae:	69bb      	ldr	r3, [r7, #24]
 80100b0:	015a      	lsls	r2, r3, #5
 80100b2:	69fb      	ldr	r3, [r7, #28]
 80100b4:	4413      	add	r3, r2
 80100b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100ba:	691b      	ldr	r3, [r3, #16]
 80100bc:	69ba      	ldr	r2, [r7, #24]
 80100be:	0151      	lsls	r1, r2, #5
 80100c0:	69fa      	ldr	r2, [r7, #28]
 80100c2:	440a      	add	r2, r1
 80100c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80100c8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80100cc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80100ce:	69bb      	ldr	r3, [r7, #24]
 80100d0:	015a      	lsls	r2, r3, #5
 80100d2:	69fb      	ldr	r3, [r7, #28]
 80100d4:	4413      	add	r3, r2
 80100d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100da:	691b      	ldr	r3, [r3, #16]
 80100dc:	69ba      	ldr	r2, [r7, #24]
 80100de:	0151      	lsls	r1, r2, #5
 80100e0:	69fa      	ldr	r2, [r7, #28]
 80100e2:	440a      	add	r2, r1
 80100e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80100e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80100ec:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80100ee:	79fb      	ldrb	r3, [r7, #7]
 80100f0:	2b01      	cmp	r3, #1
 80100f2:	d14b      	bne.n	801018c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80100f4:	68bb      	ldr	r3, [r7, #8]
 80100f6:	691b      	ldr	r3, [r3, #16]
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d009      	beq.n	8010110 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80100fc:	69bb      	ldr	r3, [r7, #24]
 80100fe:	015a      	lsls	r2, r3, #5
 8010100:	69fb      	ldr	r3, [r7, #28]
 8010102:	4413      	add	r3, r2
 8010104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010108:	461a      	mov	r2, r3
 801010a:	68bb      	ldr	r3, [r7, #8]
 801010c:	691b      	ldr	r3, [r3, #16]
 801010e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8010110:	68bb      	ldr	r3, [r7, #8]
 8010112:	78db      	ldrb	r3, [r3, #3]
 8010114:	2b01      	cmp	r3, #1
 8010116:	d128      	bne.n	801016a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010118:	69fb      	ldr	r3, [r7, #28]
 801011a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801011e:	689b      	ldr	r3, [r3, #8]
 8010120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010124:	2b00      	cmp	r3, #0
 8010126:	d110      	bne.n	801014a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010128:	69bb      	ldr	r3, [r7, #24]
 801012a:	015a      	lsls	r2, r3, #5
 801012c:	69fb      	ldr	r3, [r7, #28]
 801012e:	4413      	add	r3, r2
 8010130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	69ba      	ldr	r2, [r7, #24]
 8010138:	0151      	lsls	r1, r2, #5
 801013a:	69fa      	ldr	r2, [r7, #28]
 801013c:	440a      	add	r2, r1
 801013e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010142:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010146:	6013      	str	r3, [r2, #0]
 8010148:	e00f      	b.n	801016a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801014a:	69bb      	ldr	r3, [r7, #24]
 801014c:	015a      	lsls	r2, r3, #5
 801014e:	69fb      	ldr	r3, [r7, #28]
 8010150:	4413      	add	r3, r2
 8010152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	69ba      	ldr	r2, [r7, #24]
 801015a:	0151      	lsls	r1, r2, #5
 801015c:	69fa      	ldr	r2, [r7, #28]
 801015e:	440a      	add	r2, r1
 8010160:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010164:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010168:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801016a:	69bb      	ldr	r3, [r7, #24]
 801016c:	015a      	lsls	r2, r3, #5
 801016e:	69fb      	ldr	r3, [r7, #28]
 8010170:	4413      	add	r3, r2
 8010172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	69ba      	ldr	r2, [r7, #24]
 801017a:	0151      	lsls	r1, r2, #5
 801017c:	69fa      	ldr	r2, [r7, #28]
 801017e:	440a      	add	r2, r1
 8010180:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010184:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010188:	6013      	str	r3, [r2, #0]
 801018a:	e12f      	b.n	80103ec <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801018c:	69bb      	ldr	r3, [r7, #24]
 801018e:	015a      	lsls	r2, r3, #5
 8010190:	69fb      	ldr	r3, [r7, #28]
 8010192:	4413      	add	r3, r2
 8010194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	69ba      	ldr	r2, [r7, #24]
 801019c:	0151      	lsls	r1, r2, #5
 801019e:	69fa      	ldr	r2, [r7, #28]
 80101a0:	440a      	add	r2, r1
 80101a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80101a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80101aa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80101ac:	68bb      	ldr	r3, [r7, #8]
 80101ae:	78db      	ldrb	r3, [r3, #3]
 80101b0:	2b01      	cmp	r3, #1
 80101b2:	d015      	beq.n	80101e0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80101b4:	68bb      	ldr	r3, [r7, #8]
 80101b6:	695b      	ldr	r3, [r3, #20]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	f000 8117 	beq.w	80103ec <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80101be:	69fb      	ldr	r3, [r7, #28]
 80101c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80101c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80101c6:	68bb      	ldr	r3, [r7, #8]
 80101c8:	781b      	ldrb	r3, [r3, #0]
 80101ca:	f003 030f 	and.w	r3, r3, #15
 80101ce:	2101      	movs	r1, #1
 80101d0:	fa01 f303 	lsl.w	r3, r1, r3
 80101d4:	69f9      	ldr	r1, [r7, #28]
 80101d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80101da:	4313      	orrs	r3, r2
 80101dc:	634b      	str	r3, [r1, #52]	; 0x34
 80101de:	e105      	b.n	80103ec <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80101e0:	69fb      	ldr	r3, [r7, #28]
 80101e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80101e6:	689b      	ldr	r3, [r3, #8]
 80101e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d110      	bne.n	8010212 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80101f0:	69bb      	ldr	r3, [r7, #24]
 80101f2:	015a      	lsls	r2, r3, #5
 80101f4:	69fb      	ldr	r3, [r7, #28]
 80101f6:	4413      	add	r3, r2
 80101f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	69ba      	ldr	r2, [r7, #24]
 8010200:	0151      	lsls	r1, r2, #5
 8010202:	69fa      	ldr	r2, [r7, #28]
 8010204:	440a      	add	r2, r1
 8010206:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801020a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801020e:	6013      	str	r3, [r2, #0]
 8010210:	e00f      	b.n	8010232 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8010212:	69bb      	ldr	r3, [r7, #24]
 8010214:	015a      	lsls	r2, r3, #5
 8010216:	69fb      	ldr	r3, [r7, #28]
 8010218:	4413      	add	r3, r2
 801021a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	69ba      	ldr	r2, [r7, #24]
 8010222:	0151      	lsls	r1, r2, #5
 8010224:	69fa      	ldr	r2, [r7, #28]
 8010226:	440a      	add	r2, r1
 8010228:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801022c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010230:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8010232:	68bb      	ldr	r3, [r7, #8]
 8010234:	68d9      	ldr	r1, [r3, #12]
 8010236:	68bb      	ldr	r3, [r7, #8]
 8010238:	781a      	ldrb	r2, [r3, #0]
 801023a:	68bb      	ldr	r3, [r7, #8]
 801023c:	695b      	ldr	r3, [r3, #20]
 801023e:	b298      	uxth	r0, r3
 8010240:	79fb      	ldrb	r3, [r7, #7]
 8010242:	9300      	str	r3, [sp, #0]
 8010244:	4603      	mov	r3, r0
 8010246:	68f8      	ldr	r0, [r7, #12]
 8010248:	f000 fa2b 	bl	80106a2 <USB_WritePacket>
 801024c:	e0ce      	b.n	80103ec <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801024e:	69bb      	ldr	r3, [r7, #24]
 8010250:	015a      	lsls	r2, r3, #5
 8010252:	69fb      	ldr	r3, [r7, #28]
 8010254:	4413      	add	r3, r2
 8010256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801025a:	691b      	ldr	r3, [r3, #16]
 801025c:	69ba      	ldr	r2, [r7, #24]
 801025e:	0151      	lsls	r1, r2, #5
 8010260:	69fa      	ldr	r2, [r7, #28]
 8010262:	440a      	add	r2, r1
 8010264:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010268:	0cdb      	lsrs	r3, r3, #19
 801026a:	04db      	lsls	r3, r3, #19
 801026c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801026e:	69bb      	ldr	r3, [r7, #24]
 8010270:	015a      	lsls	r2, r3, #5
 8010272:	69fb      	ldr	r3, [r7, #28]
 8010274:	4413      	add	r3, r2
 8010276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801027a:	691b      	ldr	r3, [r3, #16]
 801027c:	69ba      	ldr	r2, [r7, #24]
 801027e:	0151      	lsls	r1, r2, #5
 8010280:	69fa      	ldr	r2, [r7, #28]
 8010282:	440a      	add	r2, r1
 8010284:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010288:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801028c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010290:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8010292:	68bb      	ldr	r3, [r7, #8]
 8010294:	695b      	ldr	r3, [r3, #20]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d126      	bne.n	80102e8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801029a:	69bb      	ldr	r3, [r7, #24]
 801029c:	015a      	lsls	r2, r3, #5
 801029e:	69fb      	ldr	r3, [r7, #28]
 80102a0:	4413      	add	r3, r2
 80102a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102a6:	691a      	ldr	r2, [r3, #16]
 80102a8:	68bb      	ldr	r3, [r7, #8]
 80102aa:	689b      	ldr	r3, [r3, #8]
 80102ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80102b0:	69b9      	ldr	r1, [r7, #24]
 80102b2:	0148      	lsls	r0, r1, #5
 80102b4:	69f9      	ldr	r1, [r7, #28]
 80102b6:	4401      	add	r1, r0
 80102b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80102bc:	4313      	orrs	r3, r2
 80102be:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80102c0:	69bb      	ldr	r3, [r7, #24]
 80102c2:	015a      	lsls	r2, r3, #5
 80102c4:	69fb      	ldr	r3, [r7, #28]
 80102c6:	4413      	add	r3, r2
 80102c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102cc:	691b      	ldr	r3, [r3, #16]
 80102ce:	69ba      	ldr	r2, [r7, #24]
 80102d0:	0151      	lsls	r1, r2, #5
 80102d2:	69fa      	ldr	r2, [r7, #28]
 80102d4:	440a      	add	r2, r1
 80102d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80102da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80102de:	6113      	str	r3, [r2, #16]
 80102e0:	e036      	b.n	8010350 <USB_EPStartXfer+0x3dc>
 80102e2:	bf00      	nop
 80102e4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80102e8:	68bb      	ldr	r3, [r7, #8]
 80102ea:	695a      	ldr	r2, [r3, #20]
 80102ec:	68bb      	ldr	r3, [r7, #8]
 80102ee:	689b      	ldr	r3, [r3, #8]
 80102f0:	4413      	add	r3, r2
 80102f2:	1e5a      	subs	r2, r3, #1
 80102f4:	68bb      	ldr	r3, [r7, #8]
 80102f6:	689b      	ldr	r3, [r3, #8]
 80102f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80102fc:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80102fe:	69bb      	ldr	r3, [r7, #24]
 8010300:	015a      	lsls	r2, r3, #5
 8010302:	69fb      	ldr	r3, [r7, #28]
 8010304:	4413      	add	r3, r2
 8010306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801030a:	691a      	ldr	r2, [r3, #16]
 801030c:	8afb      	ldrh	r3, [r7, #22]
 801030e:	04d9      	lsls	r1, r3, #19
 8010310:	4b39      	ldr	r3, [pc, #228]	; (80103f8 <USB_EPStartXfer+0x484>)
 8010312:	400b      	ands	r3, r1
 8010314:	69b9      	ldr	r1, [r7, #24]
 8010316:	0148      	lsls	r0, r1, #5
 8010318:	69f9      	ldr	r1, [r7, #28]
 801031a:	4401      	add	r1, r0
 801031c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010320:	4313      	orrs	r3, r2
 8010322:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8010324:	69bb      	ldr	r3, [r7, #24]
 8010326:	015a      	lsls	r2, r3, #5
 8010328:	69fb      	ldr	r3, [r7, #28]
 801032a:	4413      	add	r3, r2
 801032c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010330:	691a      	ldr	r2, [r3, #16]
 8010332:	68bb      	ldr	r3, [r7, #8]
 8010334:	689b      	ldr	r3, [r3, #8]
 8010336:	8af9      	ldrh	r1, [r7, #22]
 8010338:	fb01 f303 	mul.w	r3, r1, r3
 801033c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010340:	69b9      	ldr	r1, [r7, #24]
 8010342:	0148      	lsls	r0, r1, #5
 8010344:	69f9      	ldr	r1, [r7, #28]
 8010346:	4401      	add	r1, r0
 8010348:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801034c:	4313      	orrs	r3, r2
 801034e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8010350:	79fb      	ldrb	r3, [r7, #7]
 8010352:	2b01      	cmp	r3, #1
 8010354:	d10d      	bne.n	8010372 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8010356:	68bb      	ldr	r3, [r7, #8]
 8010358:	68db      	ldr	r3, [r3, #12]
 801035a:	2b00      	cmp	r3, #0
 801035c:	d009      	beq.n	8010372 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801035e:	68bb      	ldr	r3, [r7, #8]
 8010360:	68d9      	ldr	r1, [r3, #12]
 8010362:	69bb      	ldr	r3, [r7, #24]
 8010364:	015a      	lsls	r2, r3, #5
 8010366:	69fb      	ldr	r3, [r7, #28]
 8010368:	4413      	add	r3, r2
 801036a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801036e:	460a      	mov	r2, r1
 8010370:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8010372:	68bb      	ldr	r3, [r7, #8]
 8010374:	78db      	ldrb	r3, [r3, #3]
 8010376:	2b01      	cmp	r3, #1
 8010378:	d128      	bne.n	80103cc <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801037a:	69fb      	ldr	r3, [r7, #28]
 801037c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010380:	689b      	ldr	r3, [r3, #8]
 8010382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010386:	2b00      	cmp	r3, #0
 8010388:	d110      	bne.n	80103ac <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801038a:	69bb      	ldr	r3, [r7, #24]
 801038c:	015a      	lsls	r2, r3, #5
 801038e:	69fb      	ldr	r3, [r7, #28]
 8010390:	4413      	add	r3, r2
 8010392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	69ba      	ldr	r2, [r7, #24]
 801039a:	0151      	lsls	r1, r2, #5
 801039c:	69fa      	ldr	r2, [r7, #28]
 801039e:	440a      	add	r2, r1
 80103a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80103a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80103a8:	6013      	str	r3, [r2, #0]
 80103aa:	e00f      	b.n	80103cc <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80103ac:	69bb      	ldr	r3, [r7, #24]
 80103ae:	015a      	lsls	r2, r3, #5
 80103b0:	69fb      	ldr	r3, [r7, #28]
 80103b2:	4413      	add	r3, r2
 80103b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	69ba      	ldr	r2, [r7, #24]
 80103bc:	0151      	lsls	r1, r2, #5
 80103be:	69fa      	ldr	r2, [r7, #28]
 80103c0:	440a      	add	r2, r1
 80103c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80103c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80103ca:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80103cc:	69bb      	ldr	r3, [r7, #24]
 80103ce:	015a      	lsls	r2, r3, #5
 80103d0:	69fb      	ldr	r3, [r7, #28]
 80103d2:	4413      	add	r3, r2
 80103d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	69ba      	ldr	r2, [r7, #24]
 80103dc:	0151      	lsls	r1, r2, #5
 80103de:	69fa      	ldr	r2, [r7, #28]
 80103e0:	440a      	add	r2, r1
 80103e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80103e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80103ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80103ec:	2300      	movs	r3, #0
}
 80103ee:	4618      	mov	r0, r3
 80103f0:	3720      	adds	r7, #32
 80103f2:	46bd      	mov	sp, r7
 80103f4:	bd80      	pop	{r7, pc}
 80103f6:	bf00      	nop
 80103f8:	1ff80000 	.word	0x1ff80000

080103fc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80103fc:	b480      	push	{r7}
 80103fe:	b087      	sub	sp, #28
 8010400:	af00      	add	r7, sp, #0
 8010402:	60f8      	str	r0, [r7, #12]
 8010404:	60b9      	str	r1, [r7, #8]
 8010406:	4613      	mov	r3, r2
 8010408:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 801040e:	68bb      	ldr	r3, [r7, #8]
 8010410:	781b      	ldrb	r3, [r3, #0]
 8010412:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010414:	68bb      	ldr	r3, [r7, #8]
 8010416:	785b      	ldrb	r3, [r3, #1]
 8010418:	2b01      	cmp	r3, #1
 801041a:	f040 80cd 	bne.w	80105b8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801041e:	68bb      	ldr	r3, [r7, #8]
 8010420:	695b      	ldr	r3, [r3, #20]
 8010422:	2b00      	cmp	r3, #0
 8010424:	d132      	bne.n	801048c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010426:	693b      	ldr	r3, [r7, #16]
 8010428:	015a      	lsls	r2, r3, #5
 801042a:	697b      	ldr	r3, [r7, #20]
 801042c:	4413      	add	r3, r2
 801042e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010432:	691b      	ldr	r3, [r3, #16]
 8010434:	693a      	ldr	r2, [r7, #16]
 8010436:	0151      	lsls	r1, r2, #5
 8010438:	697a      	ldr	r2, [r7, #20]
 801043a:	440a      	add	r2, r1
 801043c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010440:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010444:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010448:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801044a:	693b      	ldr	r3, [r7, #16]
 801044c:	015a      	lsls	r2, r3, #5
 801044e:	697b      	ldr	r3, [r7, #20]
 8010450:	4413      	add	r3, r2
 8010452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010456:	691b      	ldr	r3, [r3, #16]
 8010458:	693a      	ldr	r2, [r7, #16]
 801045a:	0151      	lsls	r1, r2, #5
 801045c:	697a      	ldr	r2, [r7, #20]
 801045e:	440a      	add	r2, r1
 8010460:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010464:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010468:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801046a:	693b      	ldr	r3, [r7, #16]
 801046c:	015a      	lsls	r2, r3, #5
 801046e:	697b      	ldr	r3, [r7, #20]
 8010470:	4413      	add	r3, r2
 8010472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010476:	691b      	ldr	r3, [r3, #16]
 8010478:	693a      	ldr	r2, [r7, #16]
 801047a:	0151      	lsls	r1, r2, #5
 801047c:	697a      	ldr	r2, [r7, #20]
 801047e:	440a      	add	r2, r1
 8010480:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010484:	0cdb      	lsrs	r3, r3, #19
 8010486:	04db      	lsls	r3, r3, #19
 8010488:	6113      	str	r3, [r2, #16]
 801048a:	e04e      	b.n	801052a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801048c:	693b      	ldr	r3, [r7, #16]
 801048e:	015a      	lsls	r2, r3, #5
 8010490:	697b      	ldr	r3, [r7, #20]
 8010492:	4413      	add	r3, r2
 8010494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010498:	691b      	ldr	r3, [r3, #16]
 801049a:	693a      	ldr	r2, [r7, #16]
 801049c:	0151      	lsls	r1, r2, #5
 801049e:	697a      	ldr	r2, [r7, #20]
 80104a0:	440a      	add	r2, r1
 80104a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80104a6:	0cdb      	lsrs	r3, r3, #19
 80104a8:	04db      	lsls	r3, r3, #19
 80104aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80104ac:	693b      	ldr	r3, [r7, #16]
 80104ae:	015a      	lsls	r2, r3, #5
 80104b0:	697b      	ldr	r3, [r7, #20]
 80104b2:	4413      	add	r3, r2
 80104b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80104b8:	691b      	ldr	r3, [r3, #16]
 80104ba:	693a      	ldr	r2, [r7, #16]
 80104bc:	0151      	lsls	r1, r2, #5
 80104be:	697a      	ldr	r2, [r7, #20]
 80104c0:	440a      	add	r2, r1
 80104c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80104c6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80104ca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80104ce:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80104d0:	68bb      	ldr	r3, [r7, #8]
 80104d2:	695a      	ldr	r2, [r3, #20]
 80104d4:	68bb      	ldr	r3, [r7, #8]
 80104d6:	689b      	ldr	r3, [r3, #8]
 80104d8:	429a      	cmp	r2, r3
 80104da:	d903      	bls.n	80104e4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80104dc:	68bb      	ldr	r3, [r7, #8]
 80104de:	689a      	ldr	r2, [r3, #8]
 80104e0:	68bb      	ldr	r3, [r7, #8]
 80104e2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80104e4:	693b      	ldr	r3, [r7, #16]
 80104e6:	015a      	lsls	r2, r3, #5
 80104e8:	697b      	ldr	r3, [r7, #20]
 80104ea:	4413      	add	r3, r2
 80104ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80104f0:	691b      	ldr	r3, [r3, #16]
 80104f2:	693a      	ldr	r2, [r7, #16]
 80104f4:	0151      	lsls	r1, r2, #5
 80104f6:	697a      	ldr	r2, [r7, #20]
 80104f8:	440a      	add	r2, r1
 80104fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80104fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010502:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010504:	693b      	ldr	r3, [r7, #16]
 8010506:	015a      	lsls	r2, r3, #5
 8010508:	697b      	ldr	r3, [r7, #20]
 801050a:	4413      	add	r3, r2
 801050c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010510:	691a      	ldr	r2, [r3, #16]
 8010512:	68bb      	ldr	r3, [r7, #8]
 8010514:	695b      	ldr	r3, [r3, #20]
 8010516:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801051a:	6939      	ldr	r1, [r7, #16]
 801051c:	0148      	lsls	r0, r1, #5
 801051e:	6979      	ldr	r1, [r7, #20]
 8010520:	4401      	add	r1, r0
 8010522:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010526:	4313      	orrs	r3, r2
 8010528:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801052a:	79fb      	ldrb	r3, [r7, #7]
 801052c:	2b01      	cmp	r3, #1
 801052e:	d11e      	bne.n	801056e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8010530:	68bb      	ldr	r3, [r7, #8]
 8010532:	691b      	ldr	r3, [r3, #16]
 8010534:	2b00      	cmp	r3, #0
 8010536:	d009      	beq.n	801054c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8010538:	693b      	ldr	r3, [r7, #16]
 801053a:	015a      	lsls	r2, r3, #5
 801053c:	697b      	ldr	r3, [r7, #20]
 801053e:	4413      	add	r3, r2
 8010540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010544:	461a      	mov	r2, r3
 8010546:	68bb      	ldr	r3, [r7, #8]
 8010548:	691b      	ldr	r3, [r3, #16]
 801054a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801054c:	693b      	ldr	r3, [r7, #16]
 801054e:	015a      	lsls	r2, r3, #5
 8010550:	697b      	ldr	r3, [r7, #20]
 8010552:	4413      	add	r3, r2
 8010554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	693a      	ldr	r2, [r7, #16]
 801055c:	0151      	lsls	r1, r2, #5
 801055e:	697a      	ldr	r2, [r7, #20]
 8010560:	440a      	add	r2, r1
 8010562:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010566:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801056a:	6013      	str	r3, [r2, #0]
 801056c:	e092      	b.n	8010694 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801056e:	693b      	ldr	r3, [r7, #16]
 8010570:	015a      	lsls	r2, r3, #5
 8010572:	697b      	ldr	r3, [r7, #20]
 8010574:	4413      	add	r3, r2
 8010576:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	693a      	ldr	r2, [r7, #16]
 801057e:	0151      	lsls	r1, r2, #5
 8010580:	697a      	ldr	r2, [r7, #20]
 8010582:	440a      	add	r2, r1
 8010584:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010588:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801058c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 801058e:	68bb      	ldr	r3, [r7, #8]
 8010590:	695b      	ldr	r3, [r3, #20]
 8010592:	2b00      	cmp	r3, #0
 8010594:	d07e      	beq.n	8010694 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8010596:	697b      	ldr	r3, [r7, #20]
 8010598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801059c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801059e:	68bb      	ldr	r3, [r7, #8]
 80105a0:	781b      	ldrb	r3, [r3, #0]
 80105a2:	f003 030f 	and.w	r3, r3, #15
 80105a6:	2101      	movs	r1, #1
 80105a8:	fa01 f303 	lsl.w	r3, r1, r3
 80105ac:	6979      	ldr	r1, [r7, #20]
 80105ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80105b2:	4313      	orrs	r3, r2
 80105b4:	634b      	str	r3, [r1, #52]	; 0x34
 80105b6:	e06d      	b.n	8010694 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80105b8:	693b      	ldr	r3, [r7, #16]
 80105ba:	015a      	lsls	r2, r3, #5
 80105bc:	697b      	ldr	r3, [r7, #20]
 80105be:	4413      	add	r3, r2
 80105c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80105c4:	691b      	ldr	r3, [r3, #16]
 80105c6:	693a      	ldr	r2, [r7, #16]
 80105c8:	0151      	lsls	r1, r2, #5
 80105ca:	697a      	ldr	r2, [r7, #20]
 80105cc:	440a      	add	r2, r1
 80105ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80105d2:	0cdb      	lsrs	r3, r3, #19
 80105d4:	04db      	lsls	r3, r3, #19
 80105d6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80105d8:	693b      	ldr	r3, [r7, #16]
 80105da:	015a      	lsls	r2, r3, #5
 80105dc:	697b      	ldr	r3, [r7, #20]
 80105de:	4413      	add	r3, r2
 80105e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80105e4:	691b      	ldr	r3, [r3, #16]
 80105e6:	693a      	ldr	r2, [r7, #16]
 80105e8:	0151      	lsls	r1, r2, #5
 80105ea:	697a      	ldr	r2, [r7, #20]
 80105ec:	440a      	add	r2, r1
 80105ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80105f2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80105f6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80105fa:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80105fc:	68bb      	ldr	r3, [r7, #8]
 80105fe:	695b      	ldr	r3, [r3, #20]
 8010600:	2b00      	cmp	r3, #0
 8010602:	d003      	beq.n	801060c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8010604:	68bb      	ldr	r3, [r7, #8]
 8010606:	689a      	ldr	r2, [r3, #8]
 8010608:	68bb      	ldr	r3, [r7, #8]
 801060a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801060c:	693b      	ldr	r3, [r7, #16]
 801060e:	015a      	lsls	r2, r3, #5
 8010610:	697b      	ldr	r3, [r7, #20]
 8010612:	4413      	add	r3, r2
 8010614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010618:	691b      	ldr	r3, [r3, #16]
 801061a:	693a      	ldr	r2, [r7, #16]
 801061c:	0151      	lsls	r1, r2, #5
 801061e:	697a      	ldr	r2, [r7, #20]
 8010620:	440a      	add	r2, r1
 8010622:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010626:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801062a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 801062c:	693b      	ldr	r3, [r7, #16]
 801062e:	015a      	lsls	r2, r3, #5
 8010630:	697b      	ldr	r3, [r7, #20]
 8010632:	4413      	add	r3, r2
 8010634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010638:	691a      	ldr	r2, [r3, #16]
 801063a:	68bb      	ldr	r3, [r7, #8]
 801063c:	689b      	ldr	r3, [r3, #8]
 801063e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010642:	6939      	ldr	r1, [r7, #16]
 8010644:	0148      	lsls	r0, r1, #5
 8010646:	6979      	ldr	r1, [r7, #20]
 8010648:	4401      	add	r1, r0
 801064a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801064e:	4313      	orrs	r3, r2
 8010650:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8010652:	79fb      	ldrb	r3, [r7, #7]
 8010654:	2b01      	cmp	r3, #1
 8010656:	d10d      	bne.n	8010674 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8010658:	68bb      	ldr	r3, [r7, #8]
 801065a:	68db      	ldr	r3, [r3, #12]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d009      	beq.n	8010674 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8010660:	68bb      	ldr	r3, [r7, #8]
 8010662:	68d9      	ldr	r1, [r3, #12]
 8010664:	693b      	ldr	r3, [r7, #16]
 8010666:	015a      	lsls	r2, r3, #5
 8010668:	697b      	ldr	r3, [r7, #20]
 801066a:	4413      	add	r3, r2
 801066c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010670:	460a      	mov	r2, r1
 8010672:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010674:	693b      	ldr	r3, [r7, #16]
 8010676:	015a      	lsls	r2, r3, #5
 8010678:	697b      	ldr	r3, [r7, #20]
 801067a:	4413      	add	r3, r2
 801067c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	693a      	ldr	r2, [r7, #16]
 8010684:	0151      	lsls	r1, r2, #5
 8010686:	697a      	ldr	r2, [r7, #20]
 8010688:	440a      	add	r2, r1
 801068a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801068e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010692:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010694:	2300      	movs	r3, #0
}
 8010696:	4618      	mov	r0, r3
 8010698:	371c      	adds	r7, #28
 801069a:	46bd      	mov	sp, r7
 801069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a0:	4770      	bx	lr

080106a2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80106a2:	b480      	push	{r7}
 80106a4:	b089      	sub	sp, #36	; 0x24
 80106a6:	af00      	add	r7, sp, #0
 80106a8:	60f8      	str	r0, [r7, #12]
 80106aa:	60b9      	str	r1, [r7, #8]
 80106ac:	4611      	mov	r1, r2
 80106ae:	461a      	mov	r2, r3
 80106b0:	460b      	mov	r3, r1
 80106b2:	71fb      	strb	r3, [r7, #7]
 80106b4:	4613      	mov	r3, r2
 80106b6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80106bc:	68bb      	ldr	r3, [r7, #8]
 80106be:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80106c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d11a      	bne.n	80106fe <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80106c8:	88bb      	ldrh	r3, [r7, #4]
 80106ca:	3303      	adds	r3, #3
 80106cc:	089b      	lsrs	r3, r3, #2
 80106ce:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80106d0:	2300      	movs	r3, #0
 80106d2:	61bb      	str	r3, [r7, #24]
 80106d4:	e00f      	b.n	80106f6 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80106d6:	79fb      	ldrb	r3, [r7, #7]
 80106d8:	031a      	lsls	r2, r3, #12
 80106da:	697b      	ldr	r3, [r7, #20]
 80106dc:	4413      	add	r3, r2
 80106de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80106e2:	461a      	mov	r2, r3
 80106e4:	69fb      	ldr	r3, [r7, #28]
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	6013      	str	r3, [r2, #0]
      pSrc++;
 80106ea:	69fb      	ldr	r3, [r7, #28]
 80106ec:	3304      	adds	r3, #4
 80106ee:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80106f0:	69bb      	ldr	r3, [r7, #24]
 80106f2:	3301      	adds	r3, #1
 80106f4:	61bb      	str	r3, [r7, #24]
 80106f6:	69ba      	ldr	r2, [r7, #24]
 80106f8:	693b      	ldr	r3, [r7, #16]
 80106fa:	429a      	cmp	r2, r3
 80106fc:	d3eb      	bcc.n	80106d6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80106fe:	2300      	movs	r3, #0
}
 8010700:	4618      	mov	r0, r3
 8010702:	3724      	adds	r7, #36	; 0x24
 8010704:	46bd      	mov	sp, r7
 8010706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801070a:	4770      	bx	lr

0801070c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801070c:	b480      	push	{r7}
 801070e:	b089      	sub	sp, #36	; 0x24
 8010710:	af00      	add	r7, sp, #0
 8010712:	60f8      	str	r0, [r7, #12]
 8010714:	60b9      	str	r1, [r7, #8]
 8010716:	4613      	mov	r3, r2
 8010718:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 801071e:	68bb      	ldr	r3, [r7, #8]
 8010720:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8010722:	88fb      	ldrh	r3, [r7, #6]
 8010724:	3303      	adds	r3, #3
 8010726:	089b      	lsrs	r3, r3, #2
 8010728:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 801072a:	2300      	movs	r3, #0
 801072c:	61bb      	str	r3, [r7, #24]
 801072e:	e00b      	b.n	8010748 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8010730:	697b      	ldr	r3, [r7, #20]
 8010732:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010736:	681a      	ldr	r2, [r3, #0]
 8010738:	69fb      	ldr	r3, [r7, #28]
 801073a:	601a      	str	r2, [r3, #0]
    pDest++;
 801073c:	69fb      	ldr	r3, [r7, #28]
 801073e:	3304      	adds	r3, #4
 8010740:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8010742:	69bb      	ldr	r3, [r7, #24]
 8010744:	3301      	adds	r3, #1
 8010746:	61bb      	str	r3, [r7, #24]
 8010748:	69ba      	ldr	r2, [r7, #24]
 801074a:	693b      	ldr	r3, [r7, #16]
 801074c:	429a      	cmp	r2, r3
 801074e:	d3ef      	bcc.n	8010730 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8010750:	69fb      	ldr	r3, [r7, #28]
}
 8010752:	4618      	mov	r0, r3
 8010754:	3724      	adds	r7, #36	; 0x24
 8010756:	46bd      	mov	sp, r7
 8010758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801075c:	4770      	bx	lr

0801075e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801075e:	b480      	push	{r7}
 8010760:	b085      	sub	sp, #20
 8010762:	af00      	add	r7, sp, #0
 8010764:	6078      	str	r0, [r7, #4]
 8010766:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801076c:	683b      	ldr	r3, [r7, #0]
 801076e:	781b      	ldrb	r3, [r3, #0]
 8010770:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010772:	683b      	ldr	r3, [r7, #0]
 8010774:	785b      	ldrb	r3, [r3, #1]
 8010776:	2b01      	cmp	r3, #1
 8010778:	d12c      	bne.n	80107d4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801077a:	68bb      	ldr	r3, [r7, #8]
 801077c:	015a      	lsls	r2, r3, #5
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	4413      	add	r3, r2
 8010782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	2b00      	cmp	r3, #0
 801078a:	db12      	blt.n	80107b2 <USB_EPSetStall+0x54>
 801078c:	68bb      	ldr	r3, [r7, #8]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d00f      	beq.n	80107b2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8010792:	68bb      	ldr	r3, [r7, #8]
 8010794:	015a      	lsls	r2, r3, #5
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	4413      	add	r3, r2
 801079a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	68ba      	ldr	r2, [r7, #8]
 80107a2:	0151      	lsls	r1, r2, #5
 80107a4:	68fa      	ldr	r2, [r7, #12]
 80107a6:	440a      	add	r2, r1
 80107a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80107ac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80107b0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80107b2:	68bb      	ldr	r3, [r7, #8]
 80107b4:	015a      	lsls	r2, r3, #5
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	4413      	add	r3, r2
 80107ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	68ba      	ldr	r2, [r7, #8]
 80107c2:	0151      	lsls	r1, r2, #5
 80107c4:	68fa      	ldr	r2, [r7, #12]
 80107c6:	440a      	add	r2, r1
 80107c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80107cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80107d0:	6013      	str	r3, [r2, #0]
 80107d2:	e02b      	b.n	801082c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80107d4:	68bb      	ldr	r3, [r7, #8]
 80107d6:	015a      	lsls	r2, r3, #5
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	4413      	add	r3, r2
 80107dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	db12      	blt.n	801080c <USB_EPSetStall+0xae>
 80107e6:	68bb      	ldr	r3, [r7, #8]
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d00f      	beq.n	801080c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80107ec:	68bb      	ldr	r3, [r7, #8]
 80107ee:	015a      	lsls	r2, r3, #5
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	4413      	add	r3, r2
 80107f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	68ba      	ldr	r2, [r7, #8]
 80107fc:	0151      	lsls	r1, r2, #5
 80107fe:	68fa      	ldr	r2, [r7, #12]
 8010800:	440a      	add	r2, r1
 8010802:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010806:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801080a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801080c:	68bb      	ldr	r3, [r7, #8]
 801080e:	015a      	lsls	r2, r3, #5
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	4413      	add	r3, r2
 8010814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	68ba      	ldr	r2, [r7, #8]
 801081c:	0151      	lsls	r1, r2, #5
 801081e:	68fa      	ldr	r2, [r7, #12]
 8010820:	440a      	add	r2, r1
 8010822:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010826:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801082a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801082c:	2300      	movs	r3, #0
}
 801082e:	4618      	mov	r0, r3
 8010830:	3714      	adds	r7, #20
 8010832:	46bd      	mov	sp, r7
 8010834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010838:	4770      	bx	lr

0801083a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801083a:	b480      	push	{r7}
 801083c:	b085      	sub	sp, #20
 801083e:	af00      	add	r7, sp, #0
 8010840:	6078      	str	r0, [r7, #4]
 8010842:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010848:	683b      	ldr	r3, [r7, #0]
 801084a:	781b      	ldrb	r3, [r3, #0]
 801084c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801084e:	683b      	ldr	r3, [r7, #0]
 8010850:	785b      	ldrb	r3, [r3, #1]
 8010852:	2b01      	cmp	r3, #1
 8010854:	d128      	bne.n	80108a8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8010856:	68bb      	ldr	r3, [r7, #8]
 8010858:	015a      	lsls	r2, r3, #5
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	4413      	add	r3, r2
 801085e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	68ba      	ldr	r2, [r7, #8]
 8010866:	0151      	lsls	r1, r2, #5
 8010868:	68fa      	ldr	r2, [r7, #12]
 801086a:	440a      	add	r2, r1
 801086c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010870:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010874:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010876:	683b      	ldr	r3, [r7, #0]
 8010878:	78db      	ldrb	r3, [r3, #3]
 801087a:	2b03      	cmp	r3, #3
 801087c:	d003      	beq.n	8010886 <USB_EPClearStall+0x4c>
 801087e:	683b      	ldr	r3, [r7, #0]
 8010880:	78db      	ldrb	r3, [r3, #3]
 8010882:	2b02      	cmp	r3, #2
 8010884:	d138      	bne.n	80108f8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010886:	68bb      	ldr	r3, [r7, #8]
 8010888:	015a      	lsls	r2, r3, #5
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	4413      	add	r3, r2
 801088e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	68ba      	ldr	r2, [r7, #8]
 8010896:	0151      	lsls	r1, r2, #5
 8010898:	68fa      	ldr	r2, [r7, #12]
 801089a:	440a      	add	r2, r1
 801089c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80108a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80108a4:	6013      	str	r3, [r2, #0]
 80108a6:	e027      	b.n	80108f8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80108a8:	68bb      	ldr	r3, [r7, #8]
 80108aa:	015a      	lsls	r2, r3, #5
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	4413      	add	r3, r2
 80108b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	68ba      	ldr	r2, [r7, #8]
 80108b8:	0151      	lsls	r1, r2, #5
 80108ba:	68fa      	ldr	r2, [r7, #12]
 80108bc:	440a      	add	r2, r1
 80108be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80108c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80108c6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80108c8:	683b      	ldr	r3, [r7, #0]
 80108ca:	78db      	ldrb	r3, [r3, #3]
 80108cc:	2b03      	cmp	r3, #3
 80108ce:	d003      	beq.n	80108d8 <USB_EPClearStall+0x9e>
 80108d0:	683b      	ldr	r3, [r7, #0]
 80108d2:	78db      	ldrb	r3, [r3, #3]
 80108d4:	2b02      	cmp	r3, #2
 80108d6:	d10f      	bne.n	80108f8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80108d8:	68bb      	ldr	r3, [r7, #8]
 80108da:	015a      	lsls	r2, r3, #5
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	4413      	add	r3, r2
 80108e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	68ba      	ldr	r2, [r7, #8]
 80108e8:	0151      	lsls	r1, r2, #5
 80108ea:	68fa      	ldr	r2, [r7, #12]
 80108ec:	440a      	add	r2, r1
 80108ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80108f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80108f6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80108f8:	2300      	movs	r3, #0
}
 80108fa:	4618      	mov	r0, r3
 80108fc:	3714      	adds	r7, #20
 80108fe:	46bd      	mov	sp, r7
 8010900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010904:	4770      	bx	lr

08010906 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8010906:	b480      	push	{r7}
 8010908:	b085      	sub	sp, #20
 801090a:	af00      	add	r7, sp, #0
 801090c:	6078      	str	r0, [r7, #4]
 801090e:	460b      	mov	r3, r1
 8010910:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	68fa      	ldr	r2, [r7, #12]
 8010920:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010924:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8010928:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010930:	681a      	ldr	r2, [r3, #0]
 8010932:	78fb      	ldrb	r3, [r7, #3]
 8010934:	011b      	lsls	r3, r3, #4
 8010936:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 801093a:	68f9      	ldr	r1, [r7, #12]
 801093c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010940:	4313      	orrs	r3, r2
 8010942:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8010944:	2300      	movs	r3, #0
}
 8010946:	4618      	mov	r0, r3
 8010948:	3714      	adds	r7, #20
 801094a:	46bd      	mov	sp, r7
 801094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010950:	4770      	bx	lr

08010952 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010952:	b480      	push	{r7}
 8010954:	b085      	sub	sp, #20
 8010956:	af00      	add	r7, sp, #0
 8010958:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	68fa      	ldr	r2, [r7, #12]
 8010968:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801096c:	f023 0303 	bic.w	r3, r3, #3
 8010970:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010978:	685b      	ldr	r3, [r3, #4]
 801097a:	68fa      	ldr	r2, [r7, #12]
 801097c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010980:	f023 0302 	bic.w	r3, r3, #2
 8010984:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010986:	2300      	movs	r3, #0
}
 8010988:	4618      	mov	r0, r3
 801098a:	3714      	adds	r7, #20
 801098c:	46bd      	mov	sp, r7
 801098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010992:	4770      	bx	lr

08010994 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010994:	b480      	push	{r7}
 8010996:	b085      	sub	sp, #20
 8010998:	af00      	add	r7, sp, #0
 801099a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	68fa      	ldr	r2, [r7, #12]
 80109aa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80109ae:	f023 0303 	bic.w	r3, r3, #3
 80109b2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80109ba:	685b      	ldr	r3, [r3, #4]
 80109bc:	68fa      	ldr	r2, [r7, #12]
 80109be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80109c2:	f043 0302 	orr.w	r3, r3, #2
 80109c6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80109c8:	2300      	movs	r3, #0
}
 80109ca:	4618      	mov	r0, r3
 80109cc:	3714      	adds	r7, #20
 80109ce:	46bd      	mov	sp, r7
 80109d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d4:	4770      	bx	lr

080109d6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80109d6:	b480      	push	{r7}
 80109d8:	b085      	sub	sp, #20
 80109da:	af00      	add	r7, sp, #0
 80109dc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	695b      	ldr	r3, [r3, #20]
 80109e2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	699b      	ldr	r3, [r3, #24]
 80109e8:	68fa      	ldr	r2, [r7, #12]
 80109ea:	4013      	ands	r3, r2
 80109ec:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80109ee:	68fb      	ldr	r3, [r7, #12]
}
 80109f0:	4618      	mov	r0, r3
 80109f2:	3714      	adds	r7, #20
 80109f4:	46bd      	mov	sp, r7
 80109f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109fa:	4770      	bx	lr

080109fc <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80109fc:	b480      	push	{r7}
 80109fe:	b085      	sub	sp, #20
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010a0e:	699b      	ldr	r3, [r3, #24]
 8010a10:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010a18:	69db      	ldr	r3, [r3, #28]
 8010a1a:	68ba      	ldr	r2, [r7, #8]
 8010a1c:	4013      	ands	r3, r2
 8010a1e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8010a20:	68bb      	ldr	r3, [r7, #8]
 8010a22:	0c1b      	lsrs	r3, r3, #16
}
 8010a24:	4618      	mov	r0, r3
 8010a26:	3714      	adds	r7, #20
 8010a28:	46bd      	mov	sp, r7
 8010a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a2e:	4770      	bx	lr

08010a30 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010a30:	b480      	push	{r7}
 8010a32:	b085      	sub	sp, #20
 8010a34:	af00      	add	r7, sp, #0
 8010a36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010a42:	699b      	ldr	r3, [r3, #24]
 8010a44:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010a4c:	69db      	ldr	r3, [r3, #28]
 8010a4e:	68ba      	ldr	r2, [r7, #8]
 8010a50:	4013      	ands	r3, r2
 8010a52:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8010a54:	68bb      	ldr	r3, [r7, #8]
 8010a56:	b29b      	uxth	r3, r3
}
 8010a58:	4618      	mov	r0, r3
 8010a5a:	3714      	adds	r7, #20
 8010a5c:	46bd      	mov	sp, r7
 8010a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a62:	4770      	bx	lr

08010a64 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010a64:	b480      	push	{r7}
 8010a66:	b085      	sub	sp, #20
 8010a68:	af00      	add	r7, sp, #0
 8010a6a:	6078      	str	r0, [r7, #4]
 8010a6c:	460b      	mov	r3, r1
 8010a6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8010a74:	78fb      	ldrb	r3, [r7, #3]
 8010a76:	015a      	lsls	r2, r3, #5
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	4413      	add	r3, r2
 8010a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a80:	689b      	ldr	r3, [r3, #8]
 8010a82:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010a8a:	695b      	ldr	r3, [r3, #20]
 8010a8c:	68ba      	ldr	r2, [r7, #8]
 8010a8e:	4013      	ands	r3, r2
 8010a90:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010a92:	68bb      	ldr	r3, [r7, #8]
}
 8010a94:	4618      	mov	r0, r3
 8010a96:	3714      	adds	r7, #20
 8010a98:	46bd      	mov	sp, r7
 8010a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a9e:	4770      	bx	lr

08010aa0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010aa0:	b480      	push	{r7}
 8010aa2:	b087      	sub	sp, #28
 8010aa4:	af00      	add	r7, sp, #0
 8010aa6:	6078      	str	r0, [r7, #4]
 8010aa8:	460b      	mov	r3, r1
 8010aaa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8010ab0:	697b      	ldr	r3, [r7, #20]
 8010ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ab6:	691b      	ldr	r3, [r3, #16]
 8010ab8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8010aba:	697b      	ldr	r3, [r7, #20]
 8010abc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ac2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8010ac4:	78fb      	ldrb	r3, [r7, #3]
 8010ac6:	f003 030f 	and.w	r3, r3, #15
 8010aca:	68fa      	ldr	r2, [r7, #12]
 8010acc:	fa22 f303 	lsr.w	r3, r2, r3
 8010ad0:	01db      	lsls	r3, r3, #7
 8010ad2:	b2db      	uxtb	r3, r3
 8010ad4:	693a      	ldr	r2, [r7, #16]
 8010ad6:	4313      	orrs	r3, r2
 8010ad8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8010ada:	78fb      	ldrb	r3, [r7, #3]
 8010adc:	015a      	lsls	r2, r3, #5
 8010ade:	697b      	ldr	r3, [r7, #20]
 8010ae0:	4413      	add	r3, r2
 8010ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010ae6:	689b      	ldr	r3, [r3, #8]
 8010ae8:	693a      	ldr	r2, [r7, #16]
 8010aea:	4013      	ands	r3, r2
 8010aec:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010aee:	68bb      	ldr	r3, [r7, #8]
}
 8010af0:	4618      	mov	r0, r3
 8010af2:	371c      	adds	r7, #28
 8010af4:	46bd      	mov	sp, r7
 8010af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010afa:	4770      	bx	lr

08010afc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8010afc:	b480      	push	{r7}
 8010afe:	b083      	sub	sp, #12
 8010b00:	af00      	add	r7, sp, #0
 8010b02:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	695b      	ldr	r3, [r3, #20]
 8010b08:	f003 0301 	and.w	r3, r3, #1
}
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	370c      	adds	r7, #12
 8010b10:	46bd      	mov	sp, r7
 8010b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b16:	4770      	bx	lr

08010b18 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8010b18:	b480      	push	{r7}
 8010b1a:	b085      	sub	sp, #20
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	68fa      	ldr	r2, [r7, #12]
 8010b2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010b32:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8010b36:	f023 0307 	bic.w	r3, r3, #7
 8010b3a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010b42:	685b      	ldr	r3, [r3, #4]
 8010b44:	68fa      	ldr	r2, [r7, #12]
 8010b46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010b4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010b4e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010b50:	2300      	movs	r3, #0
}
 8010b52:	4618      	mov	r0, r3
 8010b54:	3714      	adds	r7, #20
 8010b56:	46bd      	mov	sp, r7
 8010b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b5c:	4770      	bx	lr
	...

08010b60 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8010b60:	b480      	push	{r7}
 8010b62:	b087      	sub	sp, #28
 8010b64:	af00      	add	r7, sp, #0
 8010b66:	60f8      	str	r0, [r7, #12]
 8010b68:	460b      	mov	r3, r1
 8010b6a:	607a      	str	r2, [r7, #4]
 8010b6c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	333c      	adds	r3, #60	; 0x3c
 8010b76:	3304      	adds	r3, #4
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8010b7c:	693b      	ldr	r3, [r7, #16]
 8010b7e:	4a26      	ldr	r2, [pc, #152]	; (8010c18 <USB_EP0_OutStart+0xb8>)
 8010b80:	4293      	cmp	r3, r2
 8010b82:	d90a      	bls.n	8010b9a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010b84:	697b      	ldr	r3, [r7, #20]
 8010b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010b90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010b94:	d101      	bne.n	8010b9a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8010b96:	2300      	movs	r3, #0
 8010b98:	e037      	b.n	8010c0a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8010b9a:	697b      	ldr	r3, [r7, #20]
 8010b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ba0:	461a      	mov	r2, r3
 8010ba2:	2300      	movs	r3, #0
 8010ba4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010ba6:	697b      	ldr	r3, [r7, #20]
 8010ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010bac:	691b      	ldr	r3, [r3, #16]
 8010bae:	697a      	ldr	r2, [r7, #20]
 8010bb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010bb4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010bb8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8010bba:	697b      	ldr	r3, [r7, #20]
 8010bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010bc0:	691b      	ldr	r3, [r3, #16]
 8010bc2:	697a      	ldr	r2, [r7, #20]
 8010bc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010bc8:	f043 0318 	orr.w	r3, r3, #24
 8010bcc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8010bce:	697b      	ldr	r3, [r7, #20]
 8010bd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010bd4:	691b      	ldr	r3, [r3, #16]
 8010bd6:	697a      	ldr	r2, [r7, #20]
 8010bd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010bdc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8010be0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8010be2:	7afb      	ldrb	r3, [r7, #11]
 8010be4:	2b01      	cmp	r3, #1
 8010be6:	d10f      	bne.n	8010c08 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8010be8:	697b      	ldr	r3, [r7, #20]
 8010bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010bee:	461a      	mov	r2, r3
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8010bf4:	697b      	ldr	r3, [r7, #20]
 8010bf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	697a      	ldr	r2, [r7, #20]
 8010bfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010c02:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8010c06:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010c08:	2300      	movs	r3, #0
}
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	371c      	adds	r7, #28
 8010c0e:	46bd      	mov	sp, r7
 8010c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c14:	4770      	bx	lr
 8010c16:	bf00      	nop
 8010c18:	4f54300a 	.word	0x4f54300a

08010c1c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010c1c:	b480      	push	{r7}
 8010c1e:	b085      	sub	sp, #20
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8010c24:	2300      	movs	r3, #0
 8010c26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	3301      	adds	r3, #1
 8010c2c:	60fb      	str	r3, [r7, #12]
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	4a13      	ldr	r2, [pc, #76]	; (8010c80 <USB_CoreReset+0x64>)
 8010c32:	4293      	cmp	r3, r2
 8010c34:	d901      	bls.n	8010c3a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8010c36:	2303      	movs	r3, #3
 8010c38:	e01b      	b.n	8010c72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	691b      	ldr	r3, [r3, #16]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	daf2      	bge.n	8010c28 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010c42:	2300      	movs	r3, #0
 8010c44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	691b      	ldr	r3, [r3, #16]
 8010c4a:	f043 0201 	orr.w	r2, r3, #1
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	3301      	adds	r3, #1
 8010c56:	60fb      	str	r3, [r7, #12]
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	4a09      	ldr	r2, [pc, #36]	; (8010c80 <USB_CoreReset+0x64>)
 8010c5c:	4293      	cmp	r3, r2
 8010c5e:	d901      	bls.n	8010c64 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8010c60:	2303      	movs	r3, #3
 8010c62:	e006      	b.n	8010c72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	691b      	ldr	r3, [r3, #16]
 8010c68:	f003 0301 	and.w	r3, r3, #1
 8010c6c:	2b01      	cmp	r3, #1
 8010c6e:	d0f0      	beq.n	8010c52 <USB_CoreReset+0x36>

  return HAL_OK;
 8010c70:	2300      	movs	r3, #0
}
 8010c72:	4618      	mov	r0, r3
 8010c74:	3714      	adds	r7, #20
 8010c76:	46bd      	mov	sp, r7
 8010c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c7c:	4770      	bx	lr
 8010c7e:	bf00      	nop
 8010c80:	00030d40 	.word	0x00030d40

08010c84 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010c84:	b580      	push	{r7, lr}
 8010c86:	b084      	sub	sp, #16
 8010c88:	af00      	add	r7, sp, #0
 8010c8a:	6078      	str	r0, [r7, #4]
 8010c8c:	460b      	mov	r3, r1
 8010c8e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8010c90:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8010c94:	f005 f81c 	bl	8015cd0 <malloc>
 8010c98:	4603      	mov	r3, r0
 8010c9a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d105      	bne.n	8010cae <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	2200      	movs	r2, #0
 8010ca6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8010caa:	2302      	movs	r3, #2
 8010cac:	e066      	b.n	8010d7c <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	68fa      	ldr	r2, [r7, #12]
 8010cb2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	7c1b      	ldrb	r3, [r3, #16]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d119      	bne.n	8010cf2 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010cbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010cc2:	2202      	movs	r2, #2
 8010cc4:	2181      	movs	r1, #129	; 0x81
 8010cc6:	6878      	ldr	r0, [r7, #4]
 8010cc8:	f004 fe89 	bl	80159de <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	2201      	movs	r2, #1
 8010cd0:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010cd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010cd6:	2202      	movs	r2, #2
 8010cd8:	2101      	movs	r1, #1
 8010cda:	6878      	ldr	r0, [r7, #4]
 8010cdc:	f004 fe7f 	bl	80159de <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	2201      	movs	r2, #1
 8010ce4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	2210      	movs	r2, #16
 8010cec:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8010cf0:	e016      	b.n	8010d20 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010cf2:	2340      	movs	r3, #64	; 0x40
 8010cf4:	2202      	movs	r2, #2
 8010cf6:	2181      	movs	r1, #129	; 0x81
 8010cf8:	6878      	ldr	r0, [r7, #4]
 8010cfa:	f004 fe70 	bl	80159de <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	2201      	movs	r2, #1
 8010d02:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010d04:	2340      	movs	r3, #64	; 0x40
 8010d06:	2202      	movs	r2, #2
 8010d08:	2101      	movs	r1, #1
 8010d0a:	6878      	ldr	r0, [r7, #4]
 8010d0c:	f004 fe67 	bl	80159de <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	2201      	movs	r2, #1
 8010d14:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	2210      	movs	r2, #16
 8010d1c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8010d20:	2308      	movs	r3, #8
 8010d22:	2203      	movs	r2, #3
 8010d24:	2182      	movs	r1, #130	; 0x82
 8010d26:	6878      	ldr	r0, [r7, #4]
 8010d28:	f004 fe59 	bl	80159de <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	2201      	movs	r2, #1
 8010d30:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	2200      	movs	r2, #0
 8010d42:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	2200      	movs	r2, #0
 8010d4a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	7c1b      	ldrb	r3, [r3, #16]
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d109      	bne.n	8010d6a <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010d5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010d60:	2101      	movs	r1, #1
 8010d62:	6878      	ldr	r0, [r7, #4]
 8010d64:	f004 ff2a 	bl	8015bbc <USBD_LL_PrepareReceive>
 8010d68:	e007      	b.n	8010d7a <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010d70:	2340      	movs	r3, #64	; 0x40
 8010d72:	2101      	movs	r1, #1
 8010d74:	6878      	ldr	r0, [r7, #4]
 8010d76:	f004 ff21 	bl	8015bbc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010d7a:	2300      	movs	r3, #0
}
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	3710      	adds	r7, #16
 8010d80:	46bd      	mov	sp, r7
 8010d82:	bd80      	pop	{r7, pc}

08010d84 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010d84:	b580      	push	{r7, lr}
 8010d86:	b084      	sub	sp, #16
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	6078      	str	r0, [r7, #4]
 8010d8c:	460b      	mov	r3, r1
 8010d8e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8010d90:	2300      	movs	r3, #0
 8010d92:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8010d94:	2181      	movs	r1, #129	; 0x81
 8010d96:	6878      	ldr	r0, [r7, #4]
 8010d98:	f004 fe47 	bl	8015a2a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	2200      	movs	r2, #0
 8010da0:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8010da2:	2101      	movs	r1, #1
 8010da4:	6878      	ldr	r0, [r7, #4]
 8010da6:	f004 fe40 	bl	8015a2a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	2200      	movs	r2, #0
 8010dae:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8010db2:	2182      	movs	r1, #130	; 0x82
 8010db4:	6878      	ldr	r0, [r7, #4]
 8010db6:	f004 fe38 	bl	8015a2a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	2200      	movs	r2, #0
 8010dbe:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	2200      	movs	r2, #0
 8010dc6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d00e      	beq.n	8010df2 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010dda:	685b      	ldr	r3, [r3, #4]
 8010ddc:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010de4:	4618      	mov	r0, r3
 8010de6:	f004 ff7b 	bl	8015ce0 <free>
    pdev->pClassData = NULL;
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	2200      	movs	r2, #0
 8010dee:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8010df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8010df4:	4618      	mov	r0, r3
 8010df6:	3710      	adds	r7, #16
 8010df8:	46bd      	mov	sp, r7
 8010dfa:	bd80      	pop	{r7, pc}

08010dfc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8010dfc:	b580      	push	{r7, lr}
 8010dfe:	b086      	sub	sp, #24
 8010e00:	af00      	add	r7, sp, #0
 8010e02:	6078      	str	r0, [r7, #4]
 8010e04:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010e0c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8010e0e:	2300      	movs	r3, #0
 8010e10:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8010e12:	2300      	movs	r3, #0
 8010e14:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8010e16:	2300      	movs	r3, #0
 8010e18:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010e1a:	683b      	ldr	r3, [r7, #0]
 8010e1c:	781b      	ldrb	r3, [r3, #0]
 8010e1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d03a      	beq.n	8010e9c <USBD_CDC_Setup+0xa0>
 8010e26:	2b20      	cmp	r3, #32
 8010e28:	f040 8097 	bne.w	8010f5a <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8010e2c:	683b      	ldr	r3, [r7, #0]
 8010e2e:	88db      	ldrh	r3, [r3, #6]
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d029      	beq.n	8010e88 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8010e34:	683b      	ldr	r3, [r7, #0]
 8010e36:	781b      	ldrb	r3, [r3, #0]
 8010e38:	b25b      	sxtb	r3, r3
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	da11      	bge.n	8010e62 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010e44:	689b      	ldr	r3, [r3, #8]
 8010e46:	683a      	ldr	r2, [r7, #0]
 8010e48:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8010e4a:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010e4c:	683a      	ldr	r2, [r7, #0]
 8010e4e:	88d2      	ldrh	r2, [r2, #6]
 8010e50:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8010e52:	6939      	ldr	r1, [r7, #16]
 8010e54:	683b      	ldr	r3, [r7, #0]
 8010e56:	88db      	ldrh	r3, [r3, #6]
 8010e58:	461a      	mov	r2, r3
 8010e5a:	6878      	ldr	r0, [r7, #4]
 8010e5c:	f001 faac 	bl	80123b8 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8010e60:	e082      	b.n	8010f68 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8010e62:	683b      	ldr	r3, [r7, #0]
 8010e64:	785a      	ldrb	r2, [r3, #1]
 8010e66:	693b      	ldr	r3, [r7, #16]
 8010e68:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8010e6c:	683b      	ldr	r3, [r7, #0]
 8010e6e:	88db      	ldrh	r3, [r3, #6]
 8010e70:	b2da      	uxtb	r2, r3
 8010e72:	693b      	ldr	r3, [r7, #16]
 8010e74:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8010e78:	6939      	ldr	r1, [r7, #16]
 8010e7a:	683b      	ldr	r3, [r7, #0]
 8010e7c:	88db      	ldrh	r3, [r3, #6]
 8010e7e:	461a      	mov	r2, r3
 8010e80:	6878      	ldr	r0, [r7, #4]
 8010e82:	f001 fac5 	bl	8012410 <USBD_CtlPrepareRx>
    break;
 8010e86:	e06f      	b.n	8010f68 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010e8e:	689b      	ldr	r3, [r3, #8]
 8010e90:	683a      	ldr	r2, [r7, #0]
 8010e92:	7850      	ldrb	r0, [r2, #1]
 8010e94:	2200      	movs	r2, #0
 8010e96:	6839      	ldr	r1, [r7, #0]
 8010e98:	4798      	blx	r3
    break;
 8010e9a:	e065      	b.n	8010f68 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8010e9c:	683b      	ldr	r3, [r7, #0]
 8010e9e:	785b      	ldrb	r3, [r3, #1]
 8010ea0:	2b0b      	cmp	r3, #11
 8010ea2:	d84f      	bhi.n	8010f44 <USBD_CDC_Setup+0x148>
 8010ea4:	a201      	add	r2, pc, #4	; (adr r2, 8010eac <USBD_CDC_Setup+0xb0>)
 8010ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010eaa:	bf00      	nop
 8010eac:	08010edd 	.word	0x08010edd
 8010eb0:	08010f53 	.word	0x08010f53
 8010eb4:	08010f45 	.word	0x08010f45
 8010eb8:	08010f45 	.word	0x08010f45
 8010ebc:	08010f45 	.word	0x08010f45
 8010ec0:	08010f45 	.word	0x08010f45
 8010ec4:	08010f45 	.word	0x08010f45
 8010ec8:	08010f45 	.word	0x08010f45
 8010ecc:	08010f45 	.word	0x08010f45
 8010ed0:	08010f45 	.word	0x08010f45
 8010ed4:	08010f05 	.word	0x08010f05
 8010ed8:	08010f2d 	.word	0x08010f2d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010ee2:	2b03      	cmp	r3, #3
 8010ee4:	d107      	bne.n	8010ef6 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8010ee6:	f107 030c 	add.w	r3, r7, #12
 8010eea:	2202      	movs	r2, #2
 8010eec:	4619      	mov	r1, r3
 8010eee:	6878      	ldr	r0, [r7, #4]
 8010ef0:	f001 fa62 	bl	80123b8 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8010ef4:	e030      	b.n	8010f58 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8010ef6:	6839      	ldr	r1, [r7, #0]
 8010ef8:	6878      	ldr	r0, [r7, #4]
 8010efa:	f001 f9ec 	bl	80122d6 <USBD_CtlError>
        ret = USBD_FAIL;
 8010efe:	2303      	movs	r3, #3
 8010f00:	75fb      	strb	r3, [r7, #23]
      break;
 8010f02:	e029      	b.n	8010f58 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010f0a:	2b03      	cmp	r3, #3
 8010f0c:	d107      	bne.n	8010f1e <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8010f0e:	f107 030f 	add.w	r3, r7, #15
 8010f12:	2201      	movs	r2, #1
 8010f14:	4619      	mov	r1, r3
 8010f16:	6878      	ldr	r0, [r7, #4]
 8010f18:	f001 fa4e 	bl	80123b8 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8010f1c:	e01c      	b.n	8010f58 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8010f1e:	6839      	ldr	r1, [r7, #0]
 8010f20:	6878      	ldr	r0, [r7, #4]
 8010f22:	f001 f9d8 	bl	80122d6 <USBD_CtlError>
        ret = USBD_FAIL;
 8010f26:	2303      	movs	r3, #3
 8010f28:	75fb      	strb	r3, [r7, #23]
      break;
 8010f2a:	e015      	b.n	8010f58 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010f32:	2b03      	cmp	r3, #3
 8010f34:	d00f      	beq.n	8010f56 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8010f36:	6839      	ldr	r1, [r7, #0]
 8010f38:	6878      	ldr	r0, [r7, #4]
 8010f3a:	f001 f9cc 	bl	80122d6 <USBD_CtlError>
        ret = USBD_FAIL;
 8010f3e:	2303      	movs	r3, #3
 8010f40:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8010f42:	e008      	b.n	8010f56 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8010f44:	6839      	ldr	r1, [r7, #0]
 8010f46:	6878      	ldr	r0, [r7, #4]
 8010f48:	f001 f9c5 	bl	80122d6 <USBD_CtlError>
      ret = USBD_FAIL;
 8010f4c:	2303      	movs	r3, #3
 8010f4e:	75fb      	strb	r3, [r7, #23]
      break;
 8010f50:	e002      	b.n	8010f58 <USBD_CDC_Setup+0x15c>
      break;
 8010f52:	bf00      	nop
 8010f54:	e008      	b.n	8010f68 <USBD_CDC_Setup+0x16c>
      break;
 8010f56:	bf00      	nop
    }
    break;
 8010f58:	e006      	b.n	8010f68 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8010f5a:	6839      	ldr	r1, [r7, #0]
 8010f5c:	6878      	ldr	r0, [r7, #4]
 8010f5e:	f001 f9ba 	bl	80122d6 <USBD_CtlError>
    ret = USBD_FAIL;
 8010f62:	2303      	movs	r3, #3
 8010f64:	75fb      	strb	r3, [r7, #23]
    break;
 8010f66:	bf00      	nop
  }

  return (uint8_t)ret;
 8010f68:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	3718      	adds	r7, #24
 8010f6e:	46bd      	mov	sp, r7
 8010f70:	bd80      	pop	{r7, pc}
 8010f72:	bf00      	nop

08010f74 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010f74:	b580      	push	{r7, lr}
 8010f76:	b084      	sub	sp, #16
 8010f78:	af00      	add	r7, sp, #0
 8010f7a:	6078      	str	r0, [r7, #4]
 8010f7c:	460b      	mov	r3, r1
 8010f7e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010f86:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d101      	bne.n	8010f96 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010f92:	2303      	movs	r3, #3
 8010f94:	e049      	b.n	801102a <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010f9c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8010f9e:	78fa      	ldrb	r2, [r7, #3]
 8010fa0:	6879      	ldr	r1, [r7, #4]
 8010fa2:	4613      	mov	r3, r2
 8010fa4:	009b      	lsls	r3, r3, #2
 8010fa6:	4413      	add	r3, r2
 8010fa8:	009b      	lsls	r3, r3, #2
 8010faa:	440b      	add	r3, r1
 8010fac:	3318      	adds	r3, #24
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d029      	beq.n	8011008 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8010fb4:	78fa      	ldrb	r2, [r7, #3]
 8010fb6:	6879      	ldr	r1, [r7, #4]
 8010fb8:	4613      	mov	r3, r2
 8010fba:	009b      	lsls	r3, r3, #2
 8010fbc:	4413      	add	r3, r2
 8010fbe:	009b      	lsls	r3, r3, #2
 8010fc0:	440b      	add	r3, r1
 8010fc2:	3318      	adds	r3, #24
 8010fc4:	681a      	ldr	r2, [r3, #0]
 8010fc6:	78f9      	ldrb	r1, [r7, #3]
 8010fc8:	68f8      	ldr	r0, [r7, #12]
 8010fca:	460b      	mov	r3, r1
 8010fcc:	00db      	lsls	r3, r3, #3
 8010fce:	1a5b      	subs	r3, r3, r1
 8010fd0:	009b      	lsls	r3, r3, #2
 8010fd2:	4403      	add	r3, r0
 8010fd4:	3344      	adds	r3, #68	; 0x44
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	fbb2 f1f3 	udiv	r1, r2, r3
 8010fdc:	fb03 f301 	mul.w	r3, r3, r1
 8010fe0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d110      	bne.n	8011008 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8010fe6:	78fa      	ldrb	r2, [r7, #3]
 8010fe8:	6879      	ldr	r1, [r7, #4]
 8010fea:	4613      	mov	r3, r2
 8010fec:	009b      	lsls	r3, r3, #2
 8010fee:	4413      	add	r3, r2
 8010ff0:	009b      	lsls	r3, r3, #2
 8010ff2:	440b      	add	r3, r1
 8010ff4:	3318      	adds	r3, #24
 8010ff6:	2200      	movs	r2, #0
 8010ff8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8010ffa:	78f9      	ldrb	r1, [r7, #3]
 8010ffc:	2300      	movs	r3, #0
 8010ffe:	2200      	movs	r2, #0
 8011000:	6878      	ldr	r0, [r7, #4]
 8011002:	f004 fdba 	bl	8015b7a <USBD_LL_Transmit>
 8011006:	e00f      	b.n	8011028 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8011008:	68bb      	ldr	r3, [r7, #8]
 801100a:	2200      	movs	r2, #0
 801100c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011016:	691b      	ldr	r3, [r3, #16]
 8011018:	68ba      	ldr	r2, [r7, #8]
 801101a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801101e:	68ba      	ldr	r2, [r7, #8]
 8011020:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8011024:	78fa      	ldrb	r2, [r7, #3]
 8011026:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8011028:	2300      	movs	r3, #0
}
 801102a:	4618      	mov	r0, r3
 801102c:	3710      	adds	r7, #16
 801102e:	46bd      	mov	sp, r7
 8011030:	bd80      	pop	{r7, pc}

08011032 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011032:	b580      	push	{r7, lr}
 8011034:	b084      	sub	sp, #16
 8011036:	af00      	add	r7, sp, #0
 8011038:	6078      	str	r0, [r7, #4]
 801103a:	460b      	mov	r3, r1
 801103c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011044:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801104c:	2b00      	cmp	r3, #0
 801104e:	d101      	bne.n	8011054 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011050:	2303      	movs	r3, #3
 8011052:	e015      	b.n	8011080 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8011054:	78fb      	ldrb	r3, [r7, #3]
 8011056:	4619      	mov	r1, r3
 8011058:	6878      	ldr	r0, [r7, #4]
 801105a:	f004 fdd0 	bl	8015bfe <USBD_LL_GetRxDataSize>
 801105e:	4602      	mov	r2, r0
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801106c:	68db      	ldr	r3, [r3, #12]
 801106e:	68fa      	ldr	r2, [r7, #12]
 8011070:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8011074:	68fa      	ldr	r2, [r7, #12]
 8011076:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 801107a:	4611      	mov	r1, r2
 801107c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 801107e:	2300      	movs	r3, #0
}
 8011080:	4618      	mov	r0, r3
 8011082:	3710      	adds	r7, #16
 8011084:	46bd      	mov	sp, r7
 8011086:	bd80      	pop	{r7, pc}

08011088 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8011088:	b580      	push	{r7, lr}
 801108a:	b084      	sub	sp, #16
 801108c:	af00      	add	r7, sp, #0
 801108e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011096:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d015      	beq.n	80110ce <USBD_CDC_EP0_RxReady+0x46>
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80110a8:	2bff      	cmp	r3, #255	; 0xff
 80110aa:	d010      	beq.n	80110ce <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80110b2:	689b      	ldr	r3, [r3, #8]
 80110b4:	68fa      	ldr	r2, [r7, #12]
 80110b6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80110ba:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80110bc:	68fa      	ldr	r2, [r7, #12]
 80110be:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80110c2:	b292      	uxth	r2, r2
 80110c4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	22ff      	movs	r2, #255	; 0xff
 80110ca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 80110ce:	2300      	movs	r3, #0
}
 80110d0:	4618      	mov	r0, r3
 80110d2:	3710      	adds	r7, #16
 80110d4:	46bd      	mov	sp, r7
 80110d6:	bd80      	pop	{r7, pc}

080110d8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80110d8:	b480      	push	{r7}
 80110da:	b083      	sub	sp, #12
 80110dc:	af00      	add	r7, sp, #0
 80110de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	2243      	movs	r2, #67	; 0x43
 80110e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80110e6:	4b03      	ldr	r3, [pc, #12]	; (80110f4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80110e8:	4618      	mov	r0, r3
 80110ea:	370c      	adds	r7, #12
 80110ec:	46bd      	mov	sp, r7
 80110ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f2:	4770      	bx	lr
 80110f4:	2000211c 	.word	0x2000211c

080110f8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80110f8:	b480      	push	{r7}
 80110fa:	b083      	sub	sp, #12
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	2243      	movs	r2, #67	; 0x43
 8011104:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8011106:	4b03      	ldr	r3, [pc, #12]	; (8011114 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8011108:	4618      	mov	r0, r3
 801110a:	370c      	adds	r7, #12
 801110c:	46bd      	mov	sp, r7
 801110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011112:	4770      	bx	lr
 8011114:	200020d8 	.word	0x200020d8

08011118 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011118:	b480      	push	{r7}
 801111a:	b083      	sub	sp, #12
 801111c:	af00      	add	r7, sp, #0
 801111e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	2243      	movs	r2, #67	; 0x43
 8011124:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8011126:	4b03      	ldr	r3, [pc, #12]	; (8011134 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8011128:	4618      	mov	r0, r3
 801112a:	370c      	adds	r7, #12
 801112c:	46bd      	mov	sp, r7
 801112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011132:	4770      	bx	lr
 8011134:	20002160 	.word	0x20002160

08011138 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8011138:	b480      	push	{r7}
 801113a:	b083      	sub	sp, #12
 801113c:	af00      	add	r7, sp, #0
 801113e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	220a      	movs	r2, #10
 8011144:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8011146:	4b03      	ldr	r3, [pc, #12]	; (8011154 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8011148:	4618      	mov	r0, r3
 801114a:	370c      	adds	r7, #12
 801114c:	46bd      	mov	sp, r7
 801114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011152:	4770      	bx	lr
 8011154:	20002094 	.word	0x20002094

08011158 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8011158:	b480      	push	{r7}
 801115a:	b083      	sub	sp, #12
 801115c:	af00      	add	r7, sp, #0
 801115e:	6078      	str	r0, [r7, #4]
 8011160:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8011162:	683b      	ldr	r3, [r7, #0]
 8011164:	2b00      	cmp	r3, #0
 8011166:	d101      	bne.n	801116c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8011168:	2303      	movs	r3, #3
 801116a:	e004      	b.n	8011176 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	683a      	ldr	r2, [r7, #0]
 8011170:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8011174:	2300      	movs	r3, #0
}
 8011176:	4618      	mov	r0, r3
 8011178:	370c      	adds	r7, #12
 801117a:	46bd      	mov	sp, r7
 801117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011180:	4770      	bx	lr

08011182 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8011182:	b480      	push	{r7}
 8011184:	b087      	sub	sp, #28
 8011186:	af00      	add	r7, sp, #0
 8011188:	60f8      	str	r0, [r7, #12]
 801118a:	60b9      	str	r1, [r7, #8]
 801118c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011194:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8011196:	697b      	ldr	r3, [r7, #20]
 8011198:	68ba      	ldr	r2, [r7, #8]
 801119a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 801119e:	697b      	ldr	r3, [r7, #20]
 80111a0:	687a      	ldr	r2, [r7, #4]
 80111a2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80111a6:	2300      	movs	r3, #0
}
 80111a8:	4618      	mov	r0, r3
 80111aa:	371c      	adds	r7, #28
 80111ac:	46bd      	mov	sp, r7
 80111ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b2:	4770      	bx	lr

080111b4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80111b4:	b480      	push	{r7}
 80111b6:	b085      	sub	sp, #20
 80111b8:	af00      	add	r7, sp, #0
 80111ba:	6078      	str	r0, [r7, #4]
 80111bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80111c4:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	683a      	ldr	r2, [r7, #0]
 80111ca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80111ce:	2300      	movs	r3, #0
}
 80111d0:	4618      	mov	r0, r3
 80111d2:	3714      	adds	r7, #20
 80111d4:	46bd      	mov	sp, r7
 80111d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111da:	4770      	bx	lr

080111dc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80111dc:	b580      	push	{r7, lr}
 80111de:	b084      	sub	sp, #16
 80111e0:	af00      	add	r7, sp, #0
 80111e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80111ea:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80111ec:	2301      	movs	r3, #1
 80111ee:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d101      	bne.n	80111fe <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80111fa:	2303      	movs	r3, #3
 80111fc:	e01a      	b.n	8011234 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80111fe:	68bb      	ldr	r3, [r7, #8]
 8011200:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011204:	2b00      	cmp	r3, #0
 8011206:	d114      	bne.n	8011232 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8011208:	68bb      	ldr	r3, [r7, #8]
 801120a:	2201      	movs	r2, #1
 801120c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8011210:	68bb      	ldr	r3, [r7, #8]
 8011212:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 801121a:	68bb      	ldr	r3, [r7, #8]
 801121c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8011220:	68bb      	ldr	r3, [r7, #8]
 8011222:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011226:	2181      	movs	r1, #129	; 0x81
 8011228:	6878      	ldr	r0, [r7, #4]
 801122a:	f004 fca6 	bl	8015b7a <USBD_LL_Transmit>

    ret = USBD_OK;
 801122e:	2300      	movs	r3, #0
 8011230:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8011232:	7bfb      	ldrb	r3, [r7, #15]
}
 8011234:	4618      	mov	r0, r3
 8011236:	3710      	adds	r7, #16
 8011238:	46bd      	mov	sp, r7
 801123a:	bd80      	pop	{r7, pc}

0801123c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801123c:	b580      	push	{r7, lr}
 801123e:	b084      	sub	sp, #16
 8011240:	af00      	add	r7, sp, #0
 8011242:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801124a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011252:	2b00      	cmp	r3, #0
 8011254:	d101      	bne.n	801125a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8011256:	2303      	movs	r3, #3
 8011258:	e016      	b.n	8011288 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	7c1b      	ldrb	r3, [r3, #16]
 801125e:	2b00      	cmp	r3, #0
 8011260:	d109      	bne.n	8011276 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011268:	f44f 7300 	mov.w	r3, #512	; 0x200
 801126c:	2101      	movs	r1, #1
 801126e:	6878      	ldr	r0, [r7, #4]
 8011270:	f004 fca4 	bl	8015bbc <USBD_LL_PrepareReceive>
 8011274:	e007      	b.n	8011286 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801127c:	2340      	movs	r3, #64	; 0x40
 801127e:	2101      	movs	r1, #1
 8011280:	6878      	ldr	r0, [r7, #4]
 8011282:	f004 fc9b 	bl	8015bbc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011286:	2300      	movs	r3, #0
}
 8011288:	4618      	mov	r0, r3
 801128a:	3710      	adds	r7, #16
 801128c:	46bd      	mov	sp, r7
 801128e:	bd80      	pop	{r7, pc}

08011290 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011290:	b580      	push	{r7, lr}
 8011292:	b086      	sub	sp, #24
 8011294:	af00      	add	r7, sp, #0
 8011296:	60f8      	str	r0, [r7, #12]
 8011298:	60b9      	str	r1, [r7, #8]
 801129a:	4613      	mov	r3, r2
 801129c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d101      	bne.n	80112a8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80112a4:	2303      	movs	r3, #3
 80112a6:	e025      	b.n	80112f4 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d003      	beq.n	80112ba <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	2200      	movs	r2, #0
 80112b6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d003      	beq.n	80112cc <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	2200      	movs	r2, #0
 80112c8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80112cc:	68bb      	ldr	r3, [r7, #8]
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d003      	beq.n	80112da <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	68ba      	ldr	r2, [r7, #8]
 80112d6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	2201      	movs	r2, #1
 80112de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	79fa      	ldrb	r2, [r7, #7]
 80112e6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80112e8:	68f8      	ldr	r0, [r7, #12]
 80112ea:	f004 fb11 	bl	8015910 <USBD_LL_Init>
 80112ee:	4603      	mov	r3, r0
 80112f0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80112f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80112f4:	4618      	mov	r0, r3
 80112f6:	3718      	adds	r7, #24
 80112f8:	46bd      	mov	sp, r7
 80112fa:	bd80      	pop	{r7, pc}

080112fc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80112fc:	b580      	push	{r7, lr}
 80112fe:	b084      	sub	sp, #16
 8011300:	af00      	add	r7, sp, #0
 8011302:	6078      	str	r0, [r7, #4]
 8011304:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011306:	2300      	movs	r3, #0
 8011308:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801130a:	683b      	ldr	r3, [r7, #0]
 801130c:	2b00      	cmp	r3, #0
 801130e:	d101      	bne.n	8011314 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8011310:	2303      	movs	r3, #3
 8011312:	e010      	b.n	8011336 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	683a      	ldr	r2, [r7, #0]
 8011318:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011324:	f107 020e 	add.w	r2, r7, #14
 8011328:	4610      	mov	r0, r2
 801132a:	4798      	blx	r3
 801132c:	4602      	mov	r2, r0
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8011334:	2300      	movs	r3, #0
}
 8011336:	4618      	mov	r0, r3
 8011338:	3710      	adds	r7, #16
 801133a:	46bd      	mov	sp, r7
 801133c:	bd80      	pop	{r7, pc}

0801133e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801133e:	b580      	push	{r7, lr}
 8011340:	b082      	sub	sp, #8
 8011342:	af00      	add	r7, sp, #0
 8011344:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8011346:	6878      	ldr	r0, [r7, #4]
 8011348:	f004 fb2e 	bl	80159a8 <USBD_LL_Start>
 801134c:	4603      	mov	r3, r0
}
 801134e:	4618      	mov	r0, r3
 8011350:	3708      	adds	r7, #8
 8011352:	46bd      	mov	sp, r7
 8011354:	bd80      	pop	{r7, pc}

08011356 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8011356:	b480      	push	{r7}
 8011358:	b083      	sub	sp, #12
 801135a:	af00      	add	r7, sp, #0
 801135c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801135e:	2300      	movs	r3, #0
}
 8011360:	4618      	mov	r0, r3
 8011362:	370c      	adds	r7, #12
 8011364:	46bd      	mov	sp, r7
 8011366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801136a:	4770      	bx	lr

0801136c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801136c:	b580      	push	{r7, lr}
 801136e:	b084      	sub	sp, #16
 8011370:	af00      	add	r7, sp, #0
 8011372:	6078      	str	r0, [r7, #4]
 8011374:	460b      	mov	r3, r1
 8011376:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8011378:	2303      	movs	r3, #3
 801137a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011382:	2b00      	cmp	r3, #0
 8011384:	d009      	beq.n	801139a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	78fa      	ldrb	r2, [r7, #3]
 8011390:	4611      	mov	r1, r2
 8011392:	6878      	ldr	r0, [r7, #4]
 8011394:	4798      	blx	r3
 8011396:	4603      	mov	r3, r0
 8011398:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 801139a:	7bfb      	ldrb	r3, [r7, #15]
}
 801139c:	4618      	mov	r0, r3
 801139e:	3710      	adds	r7, #16
 80113a0:	46bd      	mov	sp, r7
 80113a2:	bd80      	pop	{r7, pc}

080113a4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80113a4:	b580      	push	{r7, lr}
 80113a6:	b082      	sub	sp, #8
 80113a8:	af00      	add	r7, sp, #0
 80113aa:	6078      	str	r0, [r7, #4]
 80113ac:	460b      	mov	r3, r1
 80113ae:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d007      	beq.n	80113ca <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80113c0:	685b      	ldr	r3, [r3, #4]
 80113c2:	78fa      	ldrb	r2, [r7, #3]
 80113c4:	4611      	mov	r1, r2
 80113c6:	6878      	ldr	r0, [r7, #4]
 80113c8:	4798      	blx	r3
  }

  return USBD_OK;
 80113ca:	2300      	movs	r3, #0
}
 80113cc:	4618      	mov	r0, r3
 80113ce:	3708      	adds	r7, #8
 80113d0:	46bd      	mov	sp, r7
 80113d2:	bd80      	pop	{r7, pc}

080113d4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80113d4:	b580      	push	{r7, lr}
 80113d6:	b084      	sub	sp, #16
 80113d8:	af00      	add	r7, sp, #0
 80113da:	6078      	str	r0, [r7, #4]
 80113dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80113e4:	6839      	ldr	r1, [r7, #0]
 80113e6:	4618      	mov	r0, r3
 80113e8:	f000 ff3b 	bl	8012262 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	2201      	movs	r2, #1
 80113f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80113fa:	461a      	mov	r2, r3
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011408:	f003 031f 	and.w	r3, r3, #31
 801140c:	2b02      	cmp	r3, #2
 801140e:	d01a      	beq.n	8011446 <USBD_LL_SetupStage+0x72>
 8011410:	2b02      	cmp	r3, #2
 8011412:	d822      	bhi.n	801145a <USBD_LL_SetupStage+0x86>
 8011414:	2b00      	cmp	r3, #0
 8011416:	d002      	beq.n	801141e <USBD_LL_SetupStage+0x4a>
 8011418:	2b01      	cmp	r3, #1
 801141a:	d00a      	beq.n	8011432 <USBD_LL_SetupStage+0x5e>
 801141c:	e01d      	b.n	801145a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011424:	4619      	mov	r1, r3
 8011426:	6878      	ldr	r0, [r7, #4]
 8011428:	f000 fa18 	bl	801185c <USBD_StdDevReq>
 801142c:	4603      	mov	r3, r0
 801142e:	73fb      	strb	r3, [r7, #15]
      break;
 8011430:	e020      	b.n	8011474 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011438:	4619      	mov	r1, r3
 801143a:	6878      	ldr	r0, [r7, #4]
 801143c:	f000 fa7c 	bl	8011938 <USBD_StdItfReq>
 8011440:	4603      	mov	r3, r0
 8011442:	73fb      	strb	r3, [r7, #15]
      break;
 8011444:	e016      	b.n	8011474 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801144c:	4619      	mov	r1, r3
 801144e:	6878      	ldr	r0, [r7, #4]
 8011450:	f000 faba 	bl	80119c8 <USBD_StdEPReq>
 8011454:	4603      	mov	r3, r0
 8011456:	73fb      	strb	r3, [r7, #15]
      break;
 8011458:	e00c      	b.n	8011474 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011460:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011464:	b2db      	uxtb	r3, r3
 8011466:	4619      	mov	r1, r3
 8011468:	6878      	ldr	r0, [r7, #4]
 801146a:	f004 fafd 	bl	8015a68 <USBD_LL_StallEP>
 801146e:	4603      	mov	r3, r0
 8011470:	73fb      	strb	r3, [r7, #15]
      break;
 8011472:	bf00      	nop
  }

  return ret;
 8011474:	7bfb      	ldrb	r3, [r7, #15]
}
 8011476:	4618      	mov	r0, r3
 8011478:	3710      	adds	r7, #16
 801147a:	46bd      	mov	sp, r7
 801147c:	bd80      	pop	{r7, pc}

0801147e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801147e:	b580      	push	{r7, lr}
 8011480:	b086      	sub	sp, #24
 8011482:	af00      	add	r7, sp, #0
 8011484:	60f8      	str	r0, [r7, #12]
 8011486:	460b      	mov	r3, r1
 8011488:	607a      	str	r2, [r7, #4]
 801148a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801148c:	7afb      	ldrb	r3, [r7, #11]
 801148e:	2b00      	cmp	r3, #0
 8011490:	d137      	bne.n	8011502 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8011492:	68fb      	ldr	r3, [r7, #12]
 8011494:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8011498:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80114a0:	2b03      	cmp	r3, #3
 80114a2:	d14a      	bne.n	801153a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80114a4:	693b      	ldr	r3, [r7, #16]
 80114a6:	689a      	ldr	r2, [r3, #8]
 80114a8:	693b      	ldr	r3, [r7, #16]
 80114aa:	68db      	ldr	r3, [r3, #12]
 80114ac:	429a      	cmp	r2, r3
 80114ae:	d913      	bls.n	80114d8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80114b0:	693b      	ldr	r3, [r7, #16]
 80114b2:	689a      	ldr	r2, [r3, #8]
 80114b4:	693b      	ldr	r3, [r7, #16]
 80114b6:	68db      	ldr	r3, [r3, #12]
 80114b8:	1ad2      	subs	r2, r2, r3
 80114ba:	693b      	ldr	r3, [r7, #16]
 80114bc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80114be:	693b      	ldr	r3, [r7, #16]
 80114c0:	68da      	ldr	r2, [r3, #12]
 80114c2:	693b      	ldr	r3, [r7, #16]
 80114c4:	689b      	ldr	r3, [r3, #8]
 80114c6:	4293      	cmp	r3, r2
 80114c8:	bf28      	it	cs
 80114ca:	4613      	movcs	r3, r2
 80114cc:	461a      	mov	r2, r3
 80114ce:	6879      	ldr	r1, [r7, #4]
 80114d0:	68f8      	ldr	r0, [r7, #12]
 80114d2:	f000 ffba 	bl	801244a <USBD_CtlContinueRx>
 80114d6:	e030      	b.n	801153a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80114de:	691b      	ldr	r3, [r3, #16]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d00a      	beq.n	80114fa <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80114ea:	2b03      	cmp	r3, #3
 80114ec:	d105      	bne.n	80114fa <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80114f4:	691b      	ldr	r3, [r3, #16]
 80114f6:	68f8      	ldr	r0, [r7, #12]
 80114f8:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80114fa:	68f8      	ldr	r0, [r7, #12]
 80114fc:	f000 ffb6 	bl	801246c <USBD_CtlSendStatus>
 8011500:	e01b      	b.n	801153a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011508:	699b      	ldr	r3, [r3, #24]
 801150a:	2b00      	cmp	r3, #0
 801150c:	d013      	beq.n	8011536 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8011514:	2b03      	cmp	r3, #3
 8011516:	d10e      	bne.n	8011536 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801151e:	699b      	ldr	r3, [r3, #24]
 8011520:	7afa      	ldrb	r2, [r7, #11]
 8011522:	4611      	mov	r1, r2
 8011524:	68f8      	ldr	r0, [r7, #12]
 8011526:	4798      	blx	r3
 8011528:	4603      	mov	r3, r0
 801152a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 801152c:	7dfb      	ldrb	r3, [r7, #23]
 801152e:	2b00      	cmp	r3, #0
 8011530:	d003      	beq.n	801153a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8011532:	7dfb      	ldrb	r3, [r7, #23]
 8011534:	e002      	b.n	801153c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8011536:	2303      	movs	r3, #3
 8011538:	e000      	b.n	801153c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 801153a:	2300      	movs	r3, #0
}
 801153c:	4618      	mov	r0, r3
 801153e:	3718      	adds	r7, #24
 8011540:	46bd      	mov	sp, r7
 8011542:	bd80      	pop	{r7, pc}

08011544 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011544:	b580      	push	{r7, lr}
 8011546:	b086      	sub	sp, #24
 8011548:	af00      	add	r7, sp, #0
 801154a:	60f8      	str	r0, [r7, #12]
 801154c:	460b      	mov	r3, r1
 801154e:	607a      	str	r2, [r7, #4]
 8011550:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011552:	7afb      	ldrb	r3, [r7, #11]
 8011554:	2b00      	cmp	r3, #0
 8011556:	d16a      	bne.n	801162e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	3314      	adds	r3, #20
 801155c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011564:	2b02      	cmp	r3, #2
 8011566:	d155      	bne.n	8011614 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8011568:	693b      	ldr	r3, [r7, #16]
 801156a:	689a      	ldr	r2, [r3, #8]
 801156c:	693b      	ldr	r3, [r7, #16]
 801156e:	68db      	ldr	r3, [r3, #12]
 8011570:	429a      	cmp	r2, r3
 8011572:	d914      	bls.n	801159e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011574:	693b      	ldr	r3, [r7, #16]
 8011576:	689a      	ldr	r2, [r3, #8]
 8011578:	693b      	ldr	r3, [r7, #16]
 801157a:	68db      	ldr	r3, [r3, #12]
 801157c:	1ad2      	subs	r2, r2, r3
 801157e:	693b      	ldr	r3, [r7, #16]
 8011580:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8011582:	693b      	ldr	r3, [r7, #16]
 8011584:	689b      	ldr	r3, [r3, #8]
 8011586:	461a      	mov	r2, r3
 8011588:	6879      	ldr	r1, [r7, #4]
 801158a:	68f8      	ldr	r0, [r7, #12]
 801158c:	f000 ff2f 	bl	80123ee <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011590:	2300      	movs	r3, #0
 8011592:	2200      	movs	r2, #0
 8011594:	2100      	movs	r1, #0
 8011596:	68f8      	ldr	r0, [r7, #12]
 8011598:	f004 fb10 	bl	8015bbc <USBD_LL_PrepareReceive>
 801159c:	e03a      	b.n	8011614 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801159e:	693b      	ldr	r3, [r7, #16]
 80115a0:	68da      	ldr	r2, [r3, #12]
 80115a2:	693b      	ldr	r3, [r7, #16]
 80115a4:	689b      	ldr	r3, [r3, #8]
 80115a6:	429a      	cmp	r2, r3
 80115a8:	d11c      	bne.n	80115e4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80115aa:	693b      	ldr	r3, [r7, #16]
 80115ac:	685a      	ldr	r2, [r3, #4]
 80115ae:	693b      	ldr	r3, [r7, #16]
 80115b0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80115b2:	429a      	cmp	r2, r3
 80115b4:	d316      	bcc.n	80115e4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80115b6:	693b      	ldr	r3, [r7, #16]
 80115b8:	685a      	ldr	r2, [r3, #4]
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80115c0:	429a      	cmp	r2, r3
 80115c2:	d20f      	bcs.n	80115e4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80115c4:	2200      	movs	r2, #0
 80115c6:	2100      	movs	r1, #0
 80115c8:	68f8      	ldr	r0, [r7, #12]
 80115ca:	f000 ff10 	bl	80123ee <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	2200      	movs	r2, #0
 80115d2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80115d6:	2300      	movs	r3, #0
 80115d8:	2200      	movs	r2, #0
 80115da:	2100      	movs	r1, #0
 80115dc:	68f8      	ldr	r0, [r7, #12]
 80115de:	f004 faed 	bl	8015bbc <USBD_LL_PrepareReceive>
 80115e2:	e017      	b.n	8011614 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80115e4:	68fb      	ldr	r3, [r7, #12]
 80115e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80115ea:	68db      	ldr	r3, [r3, #12]
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d00a      	beq.n	8011606 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80115f6:	2b03      	cmp	r3, #3
 80115f8:	d105      	bne.n	8011606 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011600:	68db      	ldr	r3, [r3, #12]
 8011602:	68f8      	ldr	r0, [r7, #12]
 8011604:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011606:	2180      	movs	r1, #128	; 0x80
 8011608:	68f8      	ldr	r0, [r7, #12]
 801160a:	f004 fa2d 	bl	8015a68 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801160e:	68f8      	ldr	r0, [r7, #12]
 8011610:	f000 ff3f 	bl	8012492 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801161a:	2b01      	cmp	r3, #1
 801161c:	d123      	bne.n	8011666 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 801161e:	68f8      	ldr	r0, [r7, #12]
 8011620:	f7ff fe99 	bl	8011356 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	2200      	movs	r2, #0
 8011628:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801162c:	e01b      	b.n	8011666 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011634:	695b      	ldr	r3, [r3, #20]
 8011636:	2b00      	cmp	r3, #0
 8011638:	d013      	beq.n	8011662 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8011640:	2b03      	cmp	r3, #3
 8011642:	d10e      	bne.n	8011662 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8011644:	68fb      	ldr	r3, [r7, #12]
 8011646:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801164a:	695b      	ldr	r3, [r3, #20]
 801164c:	7afa      	ldrb	r2, [r7, #11]
 801164e:	4611      	mov	r1, r2
 8011650:	68f8      	ldr	r0, [r7, #12]
 8011652:	4798      	blx	r3
 8011654:	4603      	mov	r3, r0
 8011656:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8011658:	7dfb      	ldrb	r3, [r7, #23]
 801165a:	2b00      	cmp	r3, #0
 801165c:	d003      	beq.n	8011666 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 801165e:	7dfb      	ldrb	r3, [r7, #23]
 8011660:	e002      	b.n	8011668 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8011662:	2303      	movs	r3, #3
 8011664:	e000      	b.n	8011668 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8011666:	2300      	movs	r3, #0
}
 8011668:	4618      	mov	r0, r3
 801166a:	3718      	adds	r7, #24
 801166c:	46bd      	mov	sp, r7
 801166e:	bd80      	pop	{r7, pc}

08011670 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011670:	b580      	push	{r7, lr}
 8011672:	b082      	sub	sp, #8
 8011674:	af00      	add	r7, sp, #0
 8011676:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	2201      	movs	r2, #1
 801167c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	2200      	movs	r2, #0
 8011684:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	2200      	movs	r2, #0
 801168c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	2200      	movs	r2, #0
 8011692:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801169c:	2b00      	cmp	r3, #0
 801169e:	d009      	beq.n	80116b4 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80116a6:	685b      	ldr	r3, [r3, #4]
 80116a8:	687a      	ldr	r2, [r7, #4]
 80116aa:	6852      	ldr	r2, [r2, #4]
 80116ac:	b2d2      	uxtb	r2, r2
 80116ae:	4611      	mov	r1, r2
 80116b0:	6878      	ldr	r0, [r7, #4]
 80116b2:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80116b4:	2340      	movs	r3, #64	; 0x40
 80116b6:	2200      	movs	r2, #0
 80116b8:	2100      	movs	r1, #0
 80116ba:	6878      	ldr	r0, [r7, #4]
 80116bc:	f004 f98f 	bl	80159de <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	2201      	movs	r2, #1
 80116c4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	2240      	movs	r2, #64	; 0x40
 80116cc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80116d0:	2340      	movs	r3, #64	; 0x40
 80116d2:	2200      	movs	r2, #0
 80116d4:	2180      	movs	r1, #128	; 0x80
 80116d6:	6878      	ldr	r0, [r7, #4]
 80116d8:	f004 f981 	bl	80159de <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	2201      	movs	r2, #1
 80116e0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	2240      	movs	r2, #64	; 0x40
 80116e6:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80116e8:	2300      	movs	r3, #0
}
 80116ea:	4618      	mov	r0, r3
 80116ec:	3708      	adds	r7, #8
 80116ee:	46bd      	mov	sp, r7
 80116f0:	bd80      	pop	{r7, pc}

080116f2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80116f2:	b480      	push	{r7}
 80116f4:	b083      	sub	sp, #12
 80116f6:	af00      	add	r7, sp, #0
 80116f8:	6078      	str	r0, [r7, #4]
 80116fa:	460b      	mov	r3, r1
 80116fc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	78fa      	ldrb	r2, [r7, #3]
 8011702:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8011704:	2300      	movs	r3, #0
}
 8011706:	4618      	mov	r0, r3
 8011708:	370c      	adds	r7, #12
 801170a:	46bd      	mov	sp, r7
 801170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011710:	4770      	bx	lr

08011712 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8011712:	b480      	push	{r7}
 8011714:	b083      	sub	sp, #12
 8011716:	af00      	add	r7, sp, #0
 8011718:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	2204      	movs	r2, #4
 801172a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801172e:	2300      	movs	r3, #0
}
 8011730:	4618      	mov	r0, r3
 8011732:	370c      	adds	r7, #12
 8011734:	46bd      	mov	sp, r7
 8011736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801173a:	4770      	bx	lr

0801173c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801173c:	b480      	push	{r7}
 801173e:	b083      	sub	sp, #12
 8011740:	af00      	add	r7, sp, #0
 8011742:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801174a:	2b04      	cmp	r3, #4
 801174c:	d105      	bne.n	801175a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801175a:	2300      	movs	r3, #0
}
 801175c:	4618      	mov	r0, r3
 801175e:	370c      	adds	r7, #12
 8011760:	46bd      	mov	sp, r7
 8011762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011766:	4770      	bx	lr

08011768 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8011768:	b580      	push	{r7, lr}
 801176a:	b082      	sub	sp, #8
 801176c:	af00      	add	r7, sp, #0
 801176e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011776:	2b03      	cmp	r3, #3
 8011778:	d10b      	bne.n	8011792 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011780:	69db      	ldr	r3, [r3, #28]
 8011782:	2b00      	cmp	r3, #0
 8011784:	d005      	beq.n	8011792 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801178c:	69db      	ldr	r3, [r3, #28]
 801178e:	6878      	ldr	r0, [r7, #4]
 8011790:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011792:	2300      	movs	r3, #0
}
 8011794:	4618      	mov	r0, r3
 8011796:	3708      	adds	r7, #8
 8011798:	46bd      	mov	sp, r7
 801179a:	bd80      	pop	{r7, pc}

0801179c <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801179c:	b480      	push	{r7}
 801179e:	b083      	sub	sp, #12
 80117a0:	af00      	add	r7, sp, #0
 80117a2:	6078      	str	r0, [r7, #4]
 80117a4:	460b      	mov	r3, r1
 80117a6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80117a8:	2300      	movs	r3, #0
}
 80117aa:	4618      	mov	r0, r3
 80117ac:	370c      	adds	r7, #12
 80117ae:	46bd      	mov	sp, r7
 80117b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b4:	4770      	bx	lr

080117b6 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80117b6:	b480      	push	{r7}
 80117b8:	b083      	sub	sp, #12
 80117ba:	af00      	add	r7, sp, #0
 80117bc:	6078      	str	r0, [r7, #4]
 80117be:	460b      	mov	r3, r1
 80117c0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80117c2:	2300      	movs	r3, #0
}
 80117c4:	4618      	mov	r0, r3
 80117c6:	370c      	adds	r7, #12
 80117c8:	46bd      	mov	sp, r7
 80117ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ce:	4770      	bx	lr

080117d0 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80117d0:	b480      	push	{r7}
 80117d2:	b083      	sub	sp, #12
 80117d4:	af00      	add	r7, sp, #0
 80117d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80117d8:	2300      	movs	r3, #0
}
 80117da:	4618      	mov	r0, r3
 80117dc:	370c      	adds	r7, #12
 80117de:	46bd      	mov	sp, r7
 80117e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117e4:	4770      	bx	lr

080117e6 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80117e6:	b580      	push	{r7, lr}
 80117e8:	b082      	sub	sp, #8
 80117ea:	af00      	add	r7, sp, #0
 80117ec:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	2201      	movs	r2, #1
 80117f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d009      	beq.n	8011814 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011806:	685b      	ldr	r3, [r3, #4]
 8011808:	687a      	ldr	r2, [r7, #4]
 801180a:	6852      	ldr	r2, [r2, #4]
 801180c:	b2d2      	uxtb	r2, r2
 801180e:	4611      	mov	r1, r2
 8011810:	6878      	ldr	r0, [r7, #4]
 8011812:	4798      	blx	r3
  }

  return USBD_OK;
 8011814:	2300      	movs	r3, #0
}
 8011816:	4618      	mov	r0, r3
 8011818:	3708      	adds	r7, #8
 801181a:	46bd      	mov	sp, r7
 801181c:	bd80      	pop	{r7, pc}

0801181e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801181e:	b480      	push	{r7}
 8011820:	b087      	sub	sp, #28
 8011822:	af00      	add	r7, sp, #0
 8011824:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801182a:	697b      	ldr	r3, [r7, #20]
 801182c:	781b      	ldrb	r3, [r3, #0]
 801182e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011830:	697b      	ldr	r3, [r7, #20]
 8011832:	3301      	adds	r3, #1
 8011834:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8011836:	697b      	ldr	r3, [r7, #20]
 8011838:	781b      	ldrb	r3, [r3, #0]
 801183a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801183c:	8a3b      	ldrh	r3, [r7, #16]
 801183e:	021b      	lsls	r3, r3, #8
 8011840:	b21a      	sxth	r2, r3
 8011842:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011846:	4313      	orrs	r3, r2
 8011848:	b21b      	sxth	r3, r3
 801184a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801184c:	89fb      	ldrh	r3, [r7, #14]
}
 801184e:	4618      	mov	r0, r3
 8011850:	371c      	adds	r7, #28
 8011852:	46bd      	mov	sp, r7
 8011854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011858:	4770      	bx	lr
	...

0801185c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801185c:	b580      	push	{r7, lr}
 801185e:	b084      	sub	sp, #16
 8011860:	af00      	add	r7, sp, #0
 8011862:	6078      	str	r0, [r7, #4]
 8011864:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011866:	2300      	movs	r3, #0
 8011868:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801186a:	683b      	ldr	r3, [r7, #0]
 801186c:	781b      	ldrb	r3, [r3, #0]
 801186e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011872:	2b40      	cmp	r3, #64	; 0x40
 8011874:	d005      	beq.n	8011882 <USBD_StdDevReq+0x26>
 8011876:	2b40      	cmp	r3, #64	; 0x40
 8011878:	d853      	bhi.n	8011922 <USBD_StdDevReq+0xc6>
 801187a:	2b00      	cmp	r3, #0
 801187c:	d00b      	beq.n	8011896 <USBD_StdDevReq+0x3a>
 801187e:	2b20      	cmp	r3, #32
 8011880:	d14f      	bne.n	8011922 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011888:	689b      	ldr	r3, [r3, #8]
 801188a:	6839      	ldr	r1, [r7, #0]
 801188c:	6878      	ldr	r0, [r7, #4]
 801188e:	4798      	blx	r3
 8011890:	4603      	mov	r3, r0
 8011892:	73fb      	strb	r3, [r7, #15]
    break;
 8011894:	e04a      	b.n	801192c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8011896:	683b      	ldr	r3, [r7, #0]
 8011898:	785b      	ldrb	r3, [r3, #1]
 801189a:	2b09      	cmp	r3, #9
 801189c:	d83b      	bhi.n	8011916 <USBD_StdDevReq+0xba>
 801189e:	a201      	add	r2, pc, #4	; (adr r2, 80118a4 <USBD_StdDevReq+0x48>)
 80118a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118a4:	080118f9 	.word	0x080118f9
 80118a8:	0801190d 	.word	0x0801190d
 80118ac:	08011917 	.word	0x08011917
 80118b0:	08011903 	.word	0x08011903
 80118b4:	08011917 	.word	0x08011917
 80118b8:	080118d7 	.word	0x080118d7
 80118bc:	080118cd 	.word	0x080118cd
 80118c0:	08011917 	.word	0x08011917
 80118c4:	080118ef 	.word	0x080118ef
 80118c8:	080118e1 	.word	0x080118e1
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80118cc:	6839      	ldr	r1, [r7, #0]
 80118ce:	6878      	ldr	r0, [r7, #4]
 80118d0:	f000 f9d8 	bl	8011c84 <USBD_GetDescriptor>
      break;
 80118d4:	e024      	b.n	8011920 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80118d6:	6839      	ldr	r1, [r7, #0]
 80118d8:	6878      	ldr	r0, [r7, #4]
 80118da:	f000 fb3d 	bl	8011f58 <USBD_SetAddress>
      break;
 80118de:	e01f      	b.n	8011920 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80118e0:	6839      	ldr	r1, [r7, #0]
 80118e2:	6878      	ldr	r0, [r7, #4]
 80118e4:	f000 fb7c 	bl	8011fe0 <USBD_SetConfig>
 80118e8:	4603      	mov	r3, r0
 80118ea:	73fb      	strb	r3, [r7, #15]
      break;
 80118ec:	e018      	b.n	8011920 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80118ee:	6839      	ldr	r1, [r7, #0]
 80118f0:	6878      	ldr	r0, [r7, #4]
 80118f2:	f000 fc19 	bl	8012128 <USBD_GetConfig>
      break;
 80118f6:	e013      	b.n	8011920 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80118f8:	6839      	ldr	r1, [r7, #0]
 80118fa:	6878      	ldr	r0, [r7, #4]
 80118fc:	f000 fc49 	bl	8012192 <USBD_GetStatus>
      break;
 8011900:	e00e      	b.n	8011920 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8011902:	6839      	ldr	r1, [r7, #0]
 8011904:	6878      	ldr	r0, [r7, #4]
 8011906:	f000 fc77 	bl	80121f8 <USBD_SetFeature>
      break;
 801190a:	e009      	b.n	8011920 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 801190c:	6839      	ldr	r1, [r7, #0]
 801190e:	6878      	ldr	r0, [r7, #4]
 8011910:	f000 fc86 	bl	8012220 <USBD_ClrFeature>
      break;
 8011914:	e004      	b.n	8011920 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8011916:	6839      	ldr	r1, [r7, #0]
 8011918:	6878      	ldr	r0, [r7, #4]
 801191a:	f000 fcdc 	bl	80122d6 <USBD_CtlError>
      break;
 801191e:	bf00      	nop
    }
    break;
 8011920:	e004      	b.n	801192c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8011922:	6839      	ldr	r1, [r7, #0]
 8011924:	6878      	ldr	r0, [r7, #4]
 8011926:	f000 fcd6 	bl	80122d6 <USBD_CtlError>
    break;
 801192a:	bf00      	nop
  }

  return ret;
 801192c:	7bfb      	ldrb	r3, [r7, #15]
}
 801192e:	4618      	mov	r0, r3
 8011930:	3710      	adds	r7, #16
 8011932:	46bd      	mov	sp, r7
 8011934:	bd80      	pop	{r7, pc}
 8011936:	bf00      	nop

08011938 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011938:	b580      	push	{r7, lr}
 801193a:	b084      	sub	sp, #16
 801193c:	af00      	add	r7, sp, #0
 801193e:	6078      	str	r0, [r7, #4]
 8011940:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011942:	2300      	movs	r3, #0
 8011944:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011946:	683b      	ldr	r3, [r7, #0]
 8011948:	781b      	ldrb	r3, [r3, #0]
 801194a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801194e:	2b40      	cmp	r3, #64	; 0x40
 8011950:	d005      	beq.n	801195e <USBD_StdItfReq+0x26>
 8011952:	2b40      	cmp	r3, #64	; 0x40
 8011954:	d82e      	bhi.n	80119b4 <USBD_StdItfReq+0x7c>
 8011956:	2b00      	cmp	r3, #0
 8011958:	d001      	beq.n	801195e <USBD_StdItfReq+0x26>
 801195a:	2b20      	cmp	r3, #32
 801195c:	d12a      	bne.n	80119b4 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011964:	3b01      	subs	r3, #1
 8011966:	2b02      	cmp	r3, #2
 8011968:	d81d      	bhi.n	80119a6 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801196a:	683b      	ldr	r3, [r7, #0]
 801196c:	889b      	ldrh	r3, [r3, #4]
 801196e:	b2db      	uxtb	r3, r3
 8011970:	2b01      	cmp	r3, #1
 8011972:	d813      	bhi.n	801199c <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801197a:	689b      	ldr	r3, [r3, #8]
 801197c:	6839      	ldr	r1, [r7, #0]
 801197e:	6878      	ldr	r0, [r7, #4]
 8011980:	4798      	blx	r3
 8011982:	4603      	mov	r3, r0
 8011984:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8011986:	683b      	ldr	r3, [r7, #0]
 8011988:	88db      	ldrh	r3, [r3, #6]
 801198a:	2b00      	cmp	r3, #0
 801198c:	d110      	bne.n	80119b0 <USBD_StdItfReq+0x78>
 801198e:	7bfb      	ldrb	r3, [r7, #15]
 8011990:	2b00      	cmp	r3, #0
 8011992:	d10d      	bne.n	80119b0 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 8011994:	6878      	ldr	r0, [r7, #4]
 8011996:	f000 fd69 	bl	801246c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 801199a:	e009      	b.n	80119b0 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 801199c:	6839      	ldr	r1, [r7, #0]
 801199e:	6878      	ldr	r0, [r7, #4]
 80119a0:	f000 fc99 	bl	80122d6 <USBD_CtlError>
      break;
 80119a4:	e004      	b.n	80119b0 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 80119a6:	6839      	ldr	r1, [r7, #0]
 80119a8:	6878      	ldr	r0, [r7, #4]
 80119aa:	f000 fc94 	bl	80122d6 <USBD_CtlError>
      break;
 80119ae:	e000      	b.n	80119b2 <USBD_StdItfReq+0x7a>
      break;
 80119b0:	bf00      	nop
    }
    break;
 80119b2:	e004      	b.n	80119be <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 80119b4:	6839      	ldr	r1, [r7, #0]
 80119b6:	6878      	ldr	r0, [r7, #4]
 80119b8:	f000 fc8d 	bl	80122d6 <USBD_CtlError>
    break;
 80119bc:	bf00      	nop
  }

  return ret;
 80119be:	7bfb      	ldrb	r3, [r7, #15]
}
 80119c0:	4618      	mov	r0, r3
 80119c2:	3710      	adds	r7, #16
 80119c4:	46bd      	mov	sp, r7
 80119c6:	bd80      	pop	{r7, pc}

080119c8 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80119c8:	b580      	push	{r7, lr}
 80119ca:	b084      	sub	sp, #16
 80119cc:	af00      	add	r7, sp, #0
 80119ce:	6078      	str	r0, [r7, #4]
 80119d0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80119d2:	2300      	movs	r3, #0
 80119d4:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80119d6:	683b      	ldr	r3, [r7, #0]
 80119d8:	889b      	ldrh	r3, [r3, #4]
 80119da:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80119dc:	683b      	ldr	r3, [r7, #0]
 80119de:	781b      	ldrb	r3, [r3, #0]
 80119e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80119e4:	2b40      	cmp	r3, #64	; 0x40
 80119e6:	d007      	beq.n	80119f8 <USBD_StdEPReq+0x30>
 80119e8:	2b40      	cmp	r3, #64	; 0x40
 80119ea:	f200 8140 	bhi.w	8011c6e <USBD_StdEPReq+0x2a6>
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d00c      	beq.n	8011a0c <USBD_StdEPReq+0x44>
 80119f2:	2b20      	cmp	r3, #32
 80119f4:	f040 813b 	bne.w	8011c6e <USBD_StdEPReq+0x2a6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80119fe:	689b      	ldr	r3, [r3, #8]
 8011a00:	6839      	ldr	r1, [r7, #0]
 8011a02:	6878      	ldr	r0, [r7, #4]
 8011a04:	4798      	blx	r3
 8011a06:	4603      	mov	r3, r0
 8011a08:	73fb      	strb	r3, [r7, #15]
    break;
 8011a0a:	e135      	b.n	8011c78 <USBD_StdEPReq+0x2b0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8011a0c:	683b      	ldr	r3, [r7, #0]
 8011a0e:	785b      	ldrb	r3, [r3, #1]
 8011a10:	2b03      	cmp	r3, #3
 8011a12:	d007      	beq.n	8011a24 <USBD_StdEPReq+0x5c>
 8011a14:	2b03      	cmp	r3, #3
 8011a16:	f300 8124 	bgt.w	8011c62 <USBD_StdEPReq+0x29a>
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d07b      	beq.n	8011b16 <USBD_StdEPReq+0x14e>
 8011a1e:	2b01      	cmp	r3, #1
 8011a20:	d03b      	beq.n	8011a9a <USBD_StdEPReq+0xd2>
 8011a22:	e11e      	b.n	8011c62 <USBD_StdEPReq+0x29a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011a2a:	2b02      	cmp	r3, #2
 8011a2c:	d002      	beq.n	8011a34 <USBD_StdEPReq+0x6c>
 8011a2e:	2b03      	cmp	r3, #3
 8011a30:	d016      	beq.n	8011a60 <USBD_StdEPReq+0x98>
 8011a32:	e02c      	b.n	8011a8e <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011a34:	7bbb      	ldrb	r3, [r7, #14]
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d00d      	beq.n	8011a56 <USBD_StdEPReq+0x8e>
 8011a3a:	7bbb      	ldrb	r3, [r7, #14]
 8011a3c:	2b80      	cmp	r3, #128	; 0x80
 8011a3e:	d00a      	beq.n	8011a56 <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8011a40:	7bbb      	ldrb	r3, [r7, #14]
 8011a42:	4619      	mov	r1, r3
 8011a44:	6878      	ldr	r0, [r7, #4]
 8011a46:	f004 f80f 	bl	8015a68 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011a4a:	2180      	movs	r1, #128	; 0x80
 8011a4c:	6878      	ldr	r0, [r7, #4]
 8011a4e:	f004 f80b 	bl	8015a68 <USBD_LL_StallEP>
 8011a52:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8011a54:	e020      	b.n	8011a98 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 8011a56:	6839      	ldr	r1, [r7, #0]
 8011a58:	6878      	ldr	r0, [r7, #4]
 8011a5a:	f000 fc3c 	bl	80122d6 <USBD_CtlError>
        break;
 8011a5e:	e01b      	b.n	8011a98 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8011a60:	683b      	ldr	r3, [r7, #0]
 8011a62:	885b      	ldrh	r3, [r3, #2]
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d10e      	bne.n	8011a86 <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011a68:	7bbb      	ldrb	r3, [r7, #14]
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d00b      	beq.n	8011a86 <USBD_StdEPReq+0xbe>
 8011a6e:	7bbb      	ldrb	r3, [r7, #14]
 8011a70:	2b80      	cmp	r3, #128	; 0x80
 8011a72:	d008      	beq.n	8011a86 <USBD_StdEPReq+0xbe>
 8011a74:	683b      	ldr	r3, [r7, #0]
 8011a76:	88db      	ldrh	r3, [r3, #6]
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d104      	bne.n	8011a86 <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8011a7c:	7bbb      	ldrb	r3, [r7, #14]
 8011a7e:	4619      	mov	r1, r3
 8011a80:	6878      	ldr	r0, [r7, #4]
 8011a82:	f003 fff1 	bl	8015a68 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8011a86:	6878      	ldr	r0, [r7, #4]
 8011a88:	f000 fcf0 	bl	801246c <USBD_CtlSendStatus>

        break;
 8011a8c:	e004      	b.n	8011a98 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 8011a8e:	6839      	ldr	r1, [r7, #0]
 8011a90:	6878      	ldr	r0, [r7, #4]
 8011a92:	f000 fc20 	bl	80122d6 <USBD_CtlError>
        break;
 8011a96:	bf00      	nop
      }
      break;
 8011a98:	e0e8      	b.n	8011c6c <USBD_StdEPReq+0x2a4>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011aa0:	2b02      	cmp	r3, #2
 8011aa2:	d002      	beq.n	8011aaa <USBD_StdEPReq+0xe2>
 8011aa4:	2b03      	cmp	r3, #3
 8011aa6:	d016      	beq.n	8011ad6 <USBD_StdEPReq+0x10e>
 8011aa8:	e02e      	b.n	8011b08 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011aaa:	7bbb      	ldrb	r3, [r7, #14]
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d00d      	beq.n	8011acc <USBD_StdEPReq+0x104>
 8011ab0:	7bbb      	ldrb	r3, [r7, #14]
 8011ab2:	2b80      	cmp	r3, #128	; 0x80
 8011ab4:	d00a      	beq.n	8011acc <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8011ab6:	7bbb      	ldrb	r3, [r7, #14]
 8011ab8:	4619      	mov	r1, r3
 8011aba:	6878      	ldr	r0, [r7, #4]
 8011abc:	f003 ffd4 	bl	8015a68 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011ac0:	2180      	movs	r1, #128	; 0x80
 8011ac2:	6878      	ldr	r0, [r7, #4]
 8011ac4:	f003 ffd0 	bl	8015a68 <USBD_LL_StallEP>
 8011ac8:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8011aca:	e023      	b.n	8011b14 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8011acc:	6839      	ldr	r1, [r7, #0]
 8011ace:	6878      	ldr	r0, [r7, #4]
 8011ad0:	f000 fc01 	bl	80122d6 <USBD_CtlError>
        break;
 8011ad4:	e01e      	b.n	8011b14 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8011ad6:	683b      	ldr	r3, [r7, #0]
 8011ad8:	885b      	ldrh	r3, [r3, #2]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d119      	bne.n	8011b12 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8011ade:	7bbb      	ldrb	r3, [r7, #14]
 8011ae0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d004      	beq.n	8011af2 <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8011ae8:	7bbb      	ldrb	r3, [r7, #14]
 8011aea:	4619      	mov	r1, r3
 8011aec:	6878      	ldr	r0, [r7, #4]
 8011aee:	f003 ffda 	bl	8015aa6 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8011af2:	6878      	ldr	r0, [r7, #4]
 8011af4:	f000 fcba 	bl	801246c <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011afe:	689b      	ldr	r3, [r3, #8]
 8011b00:	6839      	ldr	r1, [r7, #0]
 8011b02:	6878      	ldr	r0, [r7, #4]
 8011b04:	4798      	blx	r3
        }
        break;
 8011b06:	e004      	b.n	8011b12 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8011b08:	6839      	ldr	r1, [r7, #0]
 8011b0a:	6878      	ldr	r0, [r7, #4]
 8011b0c:	f000 fbe3 	bl	80122d6 <USBD_CtlError>
        break;
 8011b10:	e000      	b.n	8011b14 <USBD_StdEPReq+0x14c>
        break;
 8011b12:	bf00      	nop
      }
      break;
 8011b14:	e0aa      	b.n	8011c6c <USBD_StdEPReq+0x2a4>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011b1c:	2b02      	cmp	r3, #2
 8011b1e:	d002      	beq.n	8011b26 <USBD_StdEPReq+0x15e>
 8011b20:	2b03      	cmp	r3, #3
 8011b22:	d032      	beq.n	8011b8a <USBD_StdEPReq+0x1c2>
 8011b24:	e097      	b.n	8011c56 <USBD_StdEPReq+0x28e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011b26:	7bbb      	ldrb	r3, [r7, #14]
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d007      	beq.n	8011b3c <USBD_StdEPReq+0x174>
 8011b2c:	7bbb      	ldrb	r3, [r7, #14]
 8011b2e:	2b80      	cmp	r3, #128	; 0x80
 8011b30:	d004      	beq.n	8011b3c <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8011b32:	6839      	ldr	r1, [r7, #0]
 8011b34:	6878      	ldr	r0, [r7, #4]
 8011b36:	f000 fbce 	bl	80122d6 <USBD_CtlError>
          break;
 8011b3a:	e091      	b.n	8011c60 <USBD_StdEPReq+0x298>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011b3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	da0b      	bge.n	8011b5c <USBD_StdEPReq+0x194>
 8011b44:	7bbb      	ldrb	r3, [r7, #14]
 8011b46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011b4a:	4613      	mov	r3, r2
 8011b4c:	009b      	lsls	r3, r3, #2
 8011b4e:	4413      	add	r3, r2
 8011b50:	009b      	lsls	r3, r3, #2
 8011b52:	3310      	adds	r3, #16
 8011b54:	687a      	ldr	r2, [r7, #4]
 8011b56:	4413      	add	r3, r2
 8011b58:	3304      	adds	r3, #4
 8011b5a:	e00b      	b.n	8011b74 <USBD_StdEPReq+0x1ac>
              &pdev->ep_out[ep_addr & 0x7FU];
 8011b5c:	7bbb      	ldrb	r3, [r7, #14]
 8011b5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011b62:	4613      	mov	r3, r2
 8011b64:	009b      	lsls	r3, r3, #2
 8011b66:	4413      	add	r3, r2
 8011b68:	009b      	lsls	r3, r3, #2
 8011b6a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011b6e:	687a      	ldr	r2, [r7, #4]
 8011b70:	4413      	add	r3, r2
 8011b72:	3304      	adds	r3, #4
 8011b74:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8011b76:	68bb      	ldr	r3, [r7, #8]
 8011b78:	2200      	movs	r2, #0
 8011b7a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011b7c:	68bb      	ldr	r3, [r7, #8]
 8011b7e:	2202      	movs	r2, #2
 8011b80:	4619      	mov	r1, r3
 8011b82:	6878      	ldr	r0, [r7, #4]
 8011b84:	f000 fc18 	bl	80123b8 <USBD_CtlSendData>
        break;
 8011b88:	e06a      	b.n	8011c60 <USBD_StdEPReq+0x298>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8011b8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	da11      	bge.n	8011bb6 <USBD_StdEPReq+0x1ee>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011b92:	7bbb      	ldrb	r3, [r7, #14]
 8011b94:	f003 020f 	and.w	r2, r3, #15
 8011b98:	6879      	ldr	r1, [r7, #4]
 8011b9a:	4613      	mov	r3, r2
 8011b9c:	009b      	lsls	r3, r3, #2
 8011b9e:	4413      	add	r3, r2
 8011ba0:	009b      	lsls	r3, r3, #2
 8011ba2:	440b      	add	r3, r1
 8011ba4:	3324      	adds	r3, #36	; 0x24
 8011ba6:	881b      	ldrh	r3, [r3, #0]
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d117      	bne.n	8011bdc <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8011bac:	6839      	ldr	r1, [r7, #0]
 8011bae:	6878      	ldr	r0, [r7, #4]
 8011bb0:	f000 fb91 	bl	80122d6 <USBD_CtlError>
            break;
 8011bb4:	e054      	b.n	8011c60 <USBD_StdEPReq+0x298>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011bb6:	7bbb      	ldrb	r3, [r7, #14]
 8011bb8:	f003 020f 	and.w	r2, r3, #15
 8011bbc:	6879      	ldr	r1, [r7, #4]
 8011bbe:	4613      	mov	r3, r2
 8011bc0:	009b      	lsls	r3, r3, #2
 8011bc2:	4413      	add	r3, r2
 8011bc4:	009b      	lsls	r3, r3, #2
 8011bc6:	440b      	add	r3, r1
 8011bc8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011bcc:	881b      	ldrh	r3, [r3, #0]
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d104      	bne.n	8011bdc <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8011bd2:	6839      	ldr	r1, [r7, #0]
 8011bd4:	6878      	ldr	r0, [r7, #4]
 8011bd6:	f000 fb7e 	bl	80122d6 <USBD_CtlError>
            break;
 8011bda:	e041      	b.n	8011c60 <USBD_StdEPReq+0x298>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011bdc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	da0b      	bge.n	8011bfc <USBD_StdEPReq+0x234>
 8011be4:	7bbb      	ldrb	r3, [r7, #14]
 8011be6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011bea:	4613      	mov	r3, r2
 8011bec:	009b      	lsls	r3, r3, #2
 8011bee:	4413      	add	r3, r2
 8011bf0:	009b      	lsls	r3, r3, #2
 8011bf2:	3310      	adds	r3, #16
 8011bf4:	687a      	ldr	r2, [r7, #4]
 8011bf6:	4413      	add	r3, r2
 8011bf8:	3304      	adds	r3, #4
 8011bfa:	e00b      	b.n	8011c14 <USBD_StdEPReq+0x24c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8011bfc:	7bbb      	ldrb	r3, [r7, #14]
 8011bfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011c02:	4613      	mov	r3, r2
 8011c04:	009b      	lsls	r3, r3, #2
 8011c06:	4413      	add	r3, r2
 8011c08:	009b      	lsls	r3, r3, #2
 8011c0a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011c0e:	687a      	ldr	r2, [r7, #4]
 8011c10:	4413      	add	r3, r2
 8011c12:	3304      	adds	r3, #4
 8011c14:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011c16:	7bbb      	ldrb	r3, [r7, #14]
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d002      	beq.n	8011c22 <USBD_StdEPReq+0x25a>
 8011c1c:	7bbb      	ldrb	r3, [r7, #14]
 8011c1e:	2b80      	cmp	r3, #128	; 0x80
 8011c20:	d103      	bne.n	8011c2a <USBD_StdEPReq+0x262>
          {
            pep->status = 0x0000U;
 8011c22:	68bb      	ldr	r3, [r7, #8]
 8011c24:	2200      	movs	r2, #0
 8011c26:	601a      	str	r2, [r3, #0]
 8011c28:	e00e      	b.n	8011c48 <USBD_StdEPReq+0x280>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8011c2a:	7bbb      	ldrb	r3, [r7, #14]
 8011c2c:	4619      	mov	r1, r3
 8011c2e:	6878      	ldr	r0, [r7, #4]
 8011c30:	f003 ff58 	bl	8015ae4 <USBD_LL_IsStallEP>
 8011c34:	4603      	mov	r3, r0
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d003      	beq.n	8011c42 <USBD_StdEPReq+0x27a>
          {
            pep->status = 0x0001U;
 8011c3a:	68bb      	ldr	r3, [r7, #8]
 8011c3c:	2201      	movs	r2, #1
 8011c3e:	601a      	str	r2, [r3, #0]
 8011c40:	e002      	b.n	8011c48 <USBD_StdEPReq+0x280>
          }
          else
          {
            pep->status = 0x0000U;
 8011c42:	68bb      	ldr	r3, [r7, #8]
 8011c44:	2200      	movs	r2, #0
 8011c46:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011c48:	68bb      	ldr	r3, [r7, #8]
 8011c4a:	2202      	movs	r2, #2
 8011c4c:	4619      	mov	r1, r3
 8011c4e:	6878      	ldr	r0, [r7, #4]
 8011c50:	f000 fbb2 	bl	80123b8 <USBD_CtlSendData>
          break;
 8011c54:	e004      	b.n	8011c60 <USBD_StdEPReq+0x298>

      default:
        USBD_CtlError(pdev, req);
 8011c56:	6839      	ldr	r1, [r7, #0]
 8011c58:	6878      	ldr	r0, [r7, #4]
 8011c5a:	f000 fb3c 	bl	80122d6 <USBD_CtlError>
        break;
 8011c5e:	bf00      	nop
      }
      break;
 8011c60:	e004      	b.n	8011c6c <USBD_StdEPReq+0x2a4>

    default:
      USBD_CtlError(pdev, req);
 8011c62:	6839      	ldr	r1, [r7, #0]
 8011c64:	6878      	ldr	r0, [r7, #4]
 8011c66:	f000 fb36 	bl	80122d6 <USBD_CtlError>
      break;
 8011c6a:	bf00      	nop
    }
    break;
 8011c6c:	e004      	b.n	8011c78 <USBD_StdEPReq+0x2b0>

  default:
    USBD_CtlError(pdev, req);
 8011c6e:	6839      	ldr	r1, [r7, #0]
 8011c70:	6878      	ldr	r0, [r7, #4]
 8011c72:	f000 fb30 	bl	80122d6 <USBD_CtlError>
    break;
 8011c76:	bf00      	nop
  }

  return ret;
 8011c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c7a:	4618      	mov	r0, r3
 8011c7c:	3710      	adds	r7, #16
 8011c7e:	46bd      	mov	sp, r7
 8011c80:	bd80      	pop	{r7, pc}
	...

08011c84 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011c84:	b580      	push	{r7, lr}
 8011c86:	b084      	sub	sp, #16
 8011c88:	af00      	add	r7, sp, #0
 8011c8a:	6078      	str	r0, [r7, #4]
 8011c8c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011c8e:	2300      	movs	r3, #0
 8011c90:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8011c92:	2300      	movs	r3, #0
 8011c94:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011c96:	2300      	movs	r3, #0
 8011c98:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8011c9a:	683b      	ldr	r3, [r7, #0]
 8011c9c:	885b      	ldrh	r3, [r3, #2]
 8011c9e:	0a1b      	lsrs	r3, r3, #8
 8011ca0:	b29b      	uxth	r3, r3
 8011ca2:	3b01      	subs	r3, #1
 8011ca4:	2b06      	cmp	r3, #6
 8011ca6:	f200 8128 	bhi.w	8011efa <USBD_GetDescriptor+0x276>
 8011caa:	a201      	add	r2, pc, #4	; (adr r2, 8011cb0 <USBD_GetDescriptor+0x2c>)
 8011cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cb0:	08011ccd 	.word	0x08011ccd
 8011cb4:	08011ce5 	.word	0x08011ce5
 8011cb8:	08011d25 	.word	0x08011d25
 8011cbc:	08011efb 	.word	0x08011efb
 8011cc0:	08011efb 	.word	0x08011efb
 8011cc4:	08011e9b 	.word	0x08011e9b
 8011cc8:	08011ec7 	.word	0x08011ec7
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	687a      	ldr	r2, [r7, #4]
 8011cd6:	7c12      	ldrb	r2, [r2, #16]
 8011cd8:	f107 0108 	add.w	r1, r7, #8
 8011cdc:	4610      	mov	r0, r2
 8011cde:	4798      	blx	r3
 8011ce0:	60f8      	str	r0, [r7, #12]
    break;
 8011ce2:	e112      	b.n	8011f0a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	7c1b      	ldrb	r3, [r3, #16]
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d10d      	bne.n	8011d08 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011cf4:	f107 0208 	add.w	r2, r7, #8
 8011cf8:	4610      	mov	r0, r2
 8011cfa:	4798      	blx	r3
 8011cfc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	3301      	adds	r3, #1
 8011d02:	2202      	movs	r2, #2
 8011d04:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8011d06:	e100      	b.n	8011f0a <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d10:	f107 0208 	add.w	r2, r7, #8
 8011d14:	4610      	mov	r0, r2
 8011d16:	4798      	blx	r3
 8011d18:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011d1a:	68fb      	ldr	r3, [r7, #12]
 8011d1c:	3301      	adds	r3, #1
 8011d1e:	2202      	movs	r2, #2
 8011d20:	701a      	strb	r2, [r3, #0]
    break;
 8011d22:	e0f2      	b.n	8011f0a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8011d24:	683b      	ldr	r3, [r7, #0]
 8011d26:	885b      	ldrh	r3, [r3, #2]
 8011d28:	b2db      	uxtb	r3, r3
 8011d2a:	2b05      	cmp	r3, #5
 8011d2c:	f200 80ac 	bhi.w	8011e88 <USBD_GetDescriptor+0x204>
 8011d30:	a201      	add	r2, pc, #4	; (adr r2, 8011d38 <USBD_GetDescriptor+0xb4>)
 8011d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d36:	bf00      	nop
 8011d38:	08011d51 	.word	0x08011d51
 8011d3c:	08011d85 	.word	0x08011d85
 8011d40:	08011db9 	.word	0x08011db9
 8011d44:	08011ded 	.word	0x08011ded
 8011d48:	08011e21 	.word	0x08011e21
 8011d4c:	08011e55 	.word	0x08011e55
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011d56:	685b      	ldr	r3, [r3, #4]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d00b      	beq.n	8011d74 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011d62:	685b      	ldr	r3, [r3, #4]
 8011d64:	687a      	ldr	r2, [r7, #4]
 8011d66:	7c12      	ldrb	r2, [r2, #16]
 8011d68:	f107 0108 	add.w	r1, r7, #8
 8011d6c:	4610      	mov	r0, r2
 8011d6e:	4798      	blx	r3
 8011d70:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011d72:	e091      	b.n	8011e98 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011d74:	6839      	ldr	r1, [r7, #0]
 8011d76:	6878      	ldr	r0, [r7, #4]
 8011d78:	f000 faad 	bl	80122d6 <USBD_CtlError>
        err++;
 8011d7c:	7afb      	ldrb	r3, [r7, #11]
 8011d7e:	3301      	adds	r3, #1
 8011d80:	72fb      	strb	r3, [r7, #11]
      break;
 8011d82:	e089      	b.n	8011e98 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011d8a:	689b      	ldr	r3, [r3, #8]
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d00b      	beq.n	8011da8 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011d96:	689b      	ldr	r3, [r3, #8]
 8011d98:	687a      	ldr	r2, [r7, #4]
 8011d9a:	7c12      	ldrb	r2, [r2, #16]
 8011d9c:	f107 0108 	add.w	r1, r7, #8
 8011da0:	4610      	mov	r0, r2
 8011da2:	4798      	blx	r3
 8011da4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011da6:	e077      	b.n	8011e98 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011da8:	6839      	ldr	r1, [r7, #0]
 8011daa:	6878      	ldr	r0, [r7, #4]
 8011dac:	f000 fa93 	bl	80122d6 <USBD_CtlError>
        err++;
 8011db0:	7afb      	ldrb	r3, [r7, #11]
 8011db2:	3301      	adds	r3, #1
 8011db4:	72fb      	strb	r3, [r7, #11]
      break;
 8011db6:	e06f      	b.n	8011e98 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011dbe:	68db      	ldr	r3, [r3, #12]
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d00b      	beq.n	8011ddc <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011dca:	68db      	ldr	r3, [r3, #12]
 8011dcc:	687a      	ldr	r2, [r7, #4]
 8011dce:	7c12      	ldrb	r2, [r2, #16]
 8011dd0:	f107 0108 	add.w	r1, r7, #8
 8011dd4:	4610      	mov	r0, r2
 8011dd6:	4798      	blx	r3
 8011dd8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011dda:	e05d      	b.n	8011e98 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011ddc:	6839      	ldr	r1, [r7, #0]
 8011dde:	6878      	ldr	r0, [r7, #4]
 8011de0:	f000 fa79 	bl	80122d6 <USBD_CtlError>
        err++;
 8011de4:	7afb      	ldrb	r3, [r7, #11]
 8011de6:	3301      	adds	r3, #1
 8011de8:	72fb      	strb	r3, [r7, #11]
      break;
 8011dea:	e055      	b.n	8011e98 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011df2:	691b      	ldr	r3, [r3, #16]
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d00b      	beq.n	8011e10 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011dfe:	691b      	ldr	r3, [r3, #16]
 8011e00:	687a      	ldr	r2, [r7, #4]
 8011e02:	7c12      	ldrb	r2, [r2, #16]
 8011e04:	f107 0108 	add.w	r1, r7, #8
 8011e08:	4610      	mov	r0, r2
 8011e0a:	4798      	blx	r3
 8011e0c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011e0e:	e043      	b.n	8011e98 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011e10:	6839      	ldr	r1, [r7, #0]
 8011e12:	6878      	ldr	r0, [r7, #4]
 8011e14:	f000 fa5f 	bl	80122d6 <USBD_CtlError>
        err++;
 8011e18:	7afb      	ldrb	r3, [r7, #11]
 8011e1a:	3301      	adds	r3, #1
 8011e1c:	72fb      	strb	r3, [r7, #11]
      break;
 8011e1e:	e03b      	b.n	8011e98 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011e26:	695b      	ldr	r3, [r3, #20]
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d00b      	beq.n	8011e44 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011e32:	695b      	ldr	r3, [r3, #20]
 8011e34:	687a      	ldr	r2, [r7, #4]
 8011e36:	7c12      	ldrb	r2, [r2, #16]
 8011e38:	f107 0108 	add.w	r1, r7, #8
 8011e3c:	4610      	mov	r0, r2
 8011e3e:	4798      	blx	r3
 8011e40:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011e42:	e029      	b.n	8011e98 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011e44:	6839      	ldr	r1, [r7, #0]
 8011e46:	6878      	ldr	r0, [r7, #4]
 8011e48:	f000 fa45 	bl	80122d6 <USBD_CtlError>
        err++;
 8011e4c:	7afb      	ldrb	r3, [r7, #11]
 8011e4e:	3301      	adds	r3, #1
 8011e50:	72fb      	strb	r3, [r7, #11]
      break;
 8011e52:	e021      	b.n	8011e98 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011e5a:	699b      	ldr	r3, [r3, #24]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d00b      	beq.n	8011e78 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011e66:	699b      	ldr	r3, [r3, #24]
 8011e68:	687a      	ldr	r2, [r7, #4]
 8011e6a:	7c12      	ldrb	r2, [r2, #16]
 8011e6c:	f107 0108 	add.w	r1, r7, #8
 8011e70:	4610      	mov	r0, r2
 8011e72:	4798      	blx	r3
 8011e74:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011e76:	e00f      	b.n	8011e98 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011e78:	6839      	ldr	r1, [r7, #0]
 8011e7a:	6878      	ldr	r0, [r7, #4]
 8011e7c:	f000 fa2b 	bl	80122d6 <USBD_CtlError>
        err++;
 8011e80:	7afb      	ldrb	r3, [r7, #11]
 8011e82:	3301      	adds	r3, #1
 8011e84:	72fb      	strb	r3, [r7, #11]
      break;
 8011e86:	e007      	b.n	8011e98 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8011e88:	6839      	ldr	r1, [r7, #0]
 8011e8a:	6878      	ldr	r0, [r7, #4]
 8011e8c:	f000 fa23 	bl	80122d6 <USBD_CtlError>
      err++;
 8011e90:	7afb      	ldrb	r3, [r7, #11]
 8011e92:	3301      	adds	r3, #1
 8011e94:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8011e96:	bf00      	nop
    }
    break;
 8011e98:	e037      	b.n	8011f0a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	7c1b      	ldrb	r3, [r3, #16]
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d109      	bne.n	8011eb6 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011eaa:	f107 0208 	add.w	r2, r7, #8
 8011eae:	4610      	mov	r0, r2
 8011eb0:	4798      	blx	r3
 8011eb2:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8011eb4:	e029      	b.n	8011f0a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8011eb6:	6839      	ldr	r1, [r7, #0]
 8011eb8:	6878      	ldr	r0, [r7, #4]
 8011eba:	f000 fa0c 	bl	80122d6 <USBD_CtlError>
      err++;
 8011ebe:	7afb      	ldrb	r3, [r7, #11]
 8011ec0:	3301      	adds	r3, #1
 8011ec2:	72fb      	strb	r3, [r7, #11]
    break;
 8011ec4:	e021      	b.n	8011f0a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	7c1b      	ldrb	r3, [r3, #16]
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d10d      	bne.n	8011eea <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ed6:	f107 0208 	add.w	r2, r7, #8
 8011eda:	4610      	mov	r0, r2
 8011edc:	4798      	blx	r3
 8011ede:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	3301      	adds	r3, #1
 8011ee4:	2207      	movs	r2, #7
 8011ee6:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8011ee8:	e00f      	b.n	8011f0a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8011eea:	6839      	ldr	r1, [r7, #0]
 8011eec:	6878      	ldr	r0, [r7, #4]
 8011eee:	f000 f9f2 	bl	80122d6 <USBD_CtlError>
      err++;
 8011ef2:	7afb      	ldrb	r3, [r7, #11]
 8011ef4:	3301      	adds	r3, #1
 8011ef6:	72fb      	strb	r3, [r7, #11]
    break;
 8011ef8:	e007      	b.n	8011f0a <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8011efa:	6839      	ldr	r1, [r7, #0]
 8011efc:	6878      	ldr	r0, [r7, #4]
 8011efe:	f000 f9ea 	bl	80122d6 <USBD_CtlError>
    err++;
 8011f02:	7afb      	ldrb	r3, [r7, #11]
 8011f04:	3301      	adds	r3, #1
 8011f06:	72fb      	strb	r3, [r7, #11]
    break;
 8011f08:	bf00      	nop
  }

  if (err != 0U)
 8011f0a:	7afb      	ldrb	r3, [r7, #11]
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d11e      	bne.n	8011f4e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8011f10:	683b      	ldr	r3, [r7, #0]
 8011f12:	88db      	ldrh	r3, [r3, #6]
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d016      	beq.n	8011f46 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8011f18:	893b      	ldrh	r3, [r7, #8]
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d00e      	beq.n	8011f3c <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8011f1e:	683b      	ldr	r3, [r7, #0]
 8011f20:	88da      	ldrh	r2, [r3, #6]
 8011f22:	893b      	ldrh	r3, [r7, #8]
 8011f24:	4293      	cmp	r3, r2
 8011f26:	bf28      	it	cs
 8011f28:	4613      	movcs	r3, r2
 8011f2a:	b29b      	uxth	r3, r3
 8011f2c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8011f2e:	893b      	ldrh	r3, [r7, #8]
 8011f30:	461a      	mov	r2, r3
 8011f32:	68f9      	ldr	r1, [r7, #12]
 8011f34:	6878      	ldr	r0, [r7, #4]
 8011f36:	f000 fa3f 	bl	80123b8 <USBD_CtlSendData>
 8011f3a:	e009      	b.n	8011f50 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8011f3c:	6839      	ldr	r1, [r7, #0]
 8011f3e:	6878      	ldr	r0, [r7, #4]
 8011f40:	f000 f9c9 	bl	80122d6 <USBD_CtlError>
 8011f44:	e004      	b.n	8011f50 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8011f46:	6878      	ldr	r0, [r7, #4]
 8011f48:	f000 fa90 	bl	801246c <USBD_CtlSendStatus>
 8011f4c:	e000      	b.n	8011f50 <USBD_GetDescriptor+0x2cc>
    return;
 8011f4e:	bf00      	nop
    }
  }
}
 8011f50:	3710      	adds	r7, #16
 8011f52:	46bd      	mov	sp, r7
 8011f54:	bd80      	pop	{r7, pc}
 8011f56:	bf00      	nop

08011f58 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011f58:	b580      	push	{r7, lr}
 8011f5a:	b084      	sub	sp, #16
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	6078      	str	r0, [r7, #4]
 8011f60:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8011f62:	683b      	ldr	r3, [r7, #0]
 8011f64:	889b      	ldrh	r3, [r3, #4]
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d130      	bne.n	8011fcc <USBD_SetAddress+0x74>
 8011f6a:	683b      	ldr	r3, [r7, #0]
 8011f6c:	88db      	ldrh	r3, [r3, #6]
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d12c      	bne.n	8011fcc <USBD_SetAddress+0x74>
 8011f72:	683b      	ldr	r3, [r7, #0]
 8011f74:	885b      	ldrh	r3, [r3, #2]
 8011f76:	2b7f      	cmp	r3, #127	; 0x7f
 8011f78:	d828      	bhi.n	8011fcc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8011f7a:	683b      	ldr	r3, [r7, #0]
 8011f7c:	885b      	ldrh	r3, [r3, #2]
 8011f7e:	b2db      	uxtb	r3, r3
 8011f80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011f84:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011f8c:	2b03      	cmp	r3, #3
 8011f8e:	d104      	bne.n	8011f9a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8011f90:	6839      	ldr	r1, [r7, #0]
 8011f92:	6878      	ldr	r0, [r7, #4]
 8011f94:	f000 f99f 	bl	80122d6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011f98:	e01d      	b.n	8011fd6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	7bfa      	ldrb	r2, [r7, #15]
 8011f9e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011fa2:	7bfb      	ldrb	r3, [r7, #15]
 8011fa4:	4619      	mov	r1, r3
 8011fa6:	6878      	ldr	r0, [r7, #4]
 8011fa8:	f003 fdc8 	bl	8015b3c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8011fac:	6878      	ldr	r0, [r7, #4]
 8011fae:	f000 fa5d 	bl	801246c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8011fb2:	7bfb      	ldrb	r3, [r7, #15]
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d004      	beq.n	8011fc2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	2202      	movs	r2, #2
 8011fbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011fc0:	e009      	b.n	8011fd6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	2201      	movs	r2, #1
 8011fc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011fca:	e004      	b.n	8011fd6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011fcc:	6839      	ldr	r1, [r7, #0]
 8011fce:	6878      	ldr	r0, [r7, #4]
 8011fd0:	f000 f981 	bl	80122d6 <USBD_CtlError>
  }
}
 8011fd4:	bf00      	nop
 8011fd6:	bf00      	nop
 8011fd8:	3710      	adds	r7, #16
 8011fda:	46bd      	mov	sp, r7
 8011fdc:	bd80      	pop	{r7, pc}
	...

08011fe0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011fe0:	b580      	push	{r7, lr}
 8011fe2:	b084      	sub	sp, #16
 8011fe4:	af00      	add	r7, sp, #0
 8011fe6:	6078      	str	r0, [r7, #4]
 8011fe8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011fea:	2300      	movs	r3, #0
 8011fec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8011fee:	683b      	ldr	r3, [r7, #0]
 8011ff0:	885b      	ldrh	r3, [r3, #2]
 8011ff2:	b2da      	uxtb	r2, r3
 8011ff4:	4b4b      	ldr	r3, [pc, #300]	; (8012124 <USBD_SetConfig+0x144>)
 8011ff6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8011ff8:	4b4a      	ldr	r3, [pc, #296]	; (8012124 <USBD_SetConfig+0x144>)
 8011ffa:	781b      	ldrb	r3, [r3, #0]
 8011ffc:	2b01      	cmp	r3, #1
 8011ffe:	d905      	bls.n	801200c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8012000:	6839      	ldr	r1, [r7, #0]
 8012002:	6878      	ldr	r0, [r7, #4]
 8012004:	f000 f967 	bl	80122d6 <USBD_CtlError>
    return USBD_FAIL;
 8012008:	2303      	movs	r3, #3
 801200a:	e087      	b.n	801211c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012012:	2b02      	cmp	r3, #2
 8012014:	d002      	beq.n	801201c <USBD_SetConfig+0x3c>
 8012016:	2b03      	cmp	r3, #3
 8012018:	d025      	beq.n	8012066 <USBD_SetConfig+0x86>
 801201a:	e071      	b.n	8012100 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 801201c:	4b41      	ldr	r3, [pc, #260]	; (8012124 <USBD_SetConfig+0x144>)
 801201e:	781b      	ldrb	r3, [r3, #0]
 8012020:	2b00      	cmp	r3, #0
 8012022:	d01c      	beq.n	801205e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8012024:	4b3f      	ldr	r3, [pc, #252]	; (8012124 <USBD_SetConfig+0x144>)
 8012026:	781b      	ldrb	r3, [r3, #0]
 8012028:	461a      	mov	r2, r3
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 801202e:	4b3d      	ldr	r3, [pc, #244]	; (8012124 <USBD_SetConfig+0x144>)
 8012030:	781b      	ldrb	r3, [r3, #0]
 8012032:	4619      	mov	r1, r3
 8012034:	6878      	ldr	r0, [r7, #4]
 8012036:	f7ff f999 	bl	801136c <USBD_SetClassConfig>
 801203a:	4603      	mov	r3, r0
 801203c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 801203e:	7bfb      	ldrb	r3, [r7, #15]
 8012040:	2b00      	cmp	r3, #0
 8012042:	d004      	beq.n	801204e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8012044:	6839      	ldr	r1, [r7, #0]
 8012046:	6878      	ldr	r0, [r7, #4]
 8012048:	f000 f945 	bl	80122d6 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 801204c:	e065      	b.n	801211a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 801204e:	6878      	ldr	r0, [r7, #4]
 8012050:	f000 fa0c 	bl	801246c <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	2203      	movs	r2, #3
 8012058:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 801205c:	e05d      	b.n	801211a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 801205e:	6878      	ldr	r0, [r7, #4]
 8012060:	f000 fa04 	bl	801246c <USBD_CtlSendStatus>
    break;
 8012064:	e059      	b.n	801211a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8012066:	4b2f      	ldr	r3, [pc, #188]	; (8012124 <USBD_SetConfig+0x144>)
 8012068:	781b      	ldrb	r3, [r3, #0]
 801206a:	2b00      	cmp	r3, #0
 801206c:	d112      	bne.n	8012094 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	2202      	movs	r2, #2
 8012072:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8012076:	4b2b      	ldr	r3, [pc, #172]	; (8012124 <USBD_SetConfig+0x144>)
 8012078:	781b      	ldrb	r3, [r3, #0]
 801207a:	461a      	mov	r2, r3
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012080:	4b28      	ldr	r3, [pc, #160]	; (8012124 <USBD_SetConfig+0x144>)
 8012082:	781b      	ldrb	r3, [r3, #0]
 8012084:	4619      	mov	r1, r3
 8012086:	6878      	ldr	r0, [r7, #4]
 8012088:	f7ff f98c 	bl	80113a4 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 801208c:	6878      	ldr	r0, [r7, #4]
 801208e:	f000 f9ed 	bl	801246c <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8012092:	e042      	b.n	801211a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8012094:	4b23      	ldr	r3, [pc, #140]	; (8012124 <USBD_SetConfig+0x144>)
 8012096:	781b      	ldrb	r3, [r3, #0]
 8012098:	461a      	mov	r2, r3
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	685b      	ldr	r3, [r3, #4]
 801209e:	429a      	cmp	r2, r3
 80120a0:	d02a      	beq.n	80120f8 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	685b      	ldr	r3, [r3, #4]
 80120a6:	b2db      	uxtb	r3, r3
 80120a8:	4619      	mov	r1, r3
 80120aa:	6878      	ldr	r0, [r7, #4]
 80120ac:	f7ff f97a 	bl	80113a4 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80120b0:	4b1c      	ldr	r3, [pc, #112]	; (8012124 <USBD_SetConfig+0x144>)
 80120b2:	781b      	ldrb	r3, [r3, #0]
 80120b4:	461a      	mov	r2, r3
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80120ba:	4b1a      	ldr	r3, [pc, #104]	; (8012124 <USBD_SetConfig+0x144>)
 80120bc:	781b      	ldrb	r3, [r3, #0]
 80120be:	4619      	mov	r1, r3
 80120c0:	6878      	ldr	r0, [r7, #4]
 80120c2:	f7ff f953 	bl	801136c <USBD_SetClassConfig>
 80120c6:	4603      	mov	r3, r0
 80120c8:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80120ca:	7bfb      	ldrb	r3, [r7, #15]
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d00f      	beq.n	80120f0 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80120d0:	6839      	ldr	r1, [r7, #0]
 80120d2:	6878      	ldr	r0, [r7, #4]
 80120d4:	f000 f8ff 	bl	80122d6 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	685b      	ldr	r3, [r3, #4]
 80120dc:	b2db      	uxtb	r3, r3
 80120de:	4619      	mov	r1, r3
 80120e0:	6878      	ldr	r0, [r7, #4]
 80120e2:	f7ff f95f 	bl	80113a4 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	2202      	movs	r2, #2
 80120ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80120ee:	e014      	b.n	801211a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80120f0:	6878      	ldr	r0, [r7, #4]
 80120f2:	f000 f9bb 	bl	801246c <USBD_CtlSendStatus>
    break;
 80120f6:	e010      	b.n	801211a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80120f8:	6878      	ldr	r0, [r7, #4]
 80120fa:	f000 f9b7 	bl	801246c <USBD_CtlSendStatus>
    break;
 80120fe:	e00c      	b.n	801211a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8012100:	6839      	ldr	r1, [r7, #0]
 8012102:	6878      	ldr	r0, [r7, #4]
 8012104:	f000 f8e7 	bl	80122d6 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012108:	4b06      	ldr	r3, [pc, #24]	; (8012124 <USBD_SetConfig+0x144>)
 801210a:	781b      	ldrb	r3, [r3, #0]
 801210c:	4619      	mov	r1, r3
 801210e:	6878      	ldr	r0, [r7, #4]
 8012110:	f7ff f948 	bl	80113a4 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8012114:	2303      	movs	r3, #3
 8012116:	73fb      	strb	r3, [r7, #15]
    break;
 8012118:	bf00      	nop
  }

  return ret;
 801211a:	7bfb      	ldrb	r3, [r7, #15]
}
 801211c:	4618      	mov	r0, r3
 801211e:	3710      	adds	r7, #16
 8012120:	46bd      	mov	sp, r7
 8012122:	bd80      	pop	{r7, pc}
 8012124:	20002868 	.word	0x20002868

08012128 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012128:	b580      	push	{r7, lr}
 801212a:	b082      	sub	sp, #8
 801212c:	af00      	add	r7, sp, #0
 801212e:	6078      	str	r0, [r7, #4]
 8012130:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8012132:	683b      	ldr	r3, [r7, #0]
 8012134:	88db      	ldrh	r3, [r3, #6]
 8012136:	2b01      	cmp	r3, #1
 8012138:	d004      	beq.n	8012144 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801213a:	6839      	ldr	r1, [r7, #0]
 801213c:	6878      	ldr	r0, [r7, #4]
 801213e:	f000 f8ca 	bl	80122d6 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8012142:	e022      	b.n	801218a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801214a:	2b02      	cmp	r3, #2
 801214c:	dc02      	bgt.n	8012154 <USBD_GetConfig+0x2c>
 801214e:	2b00      	cmp	r3, #0
 8012150:	dc03      	bgt.n	801215a <USBD_GetConfig+0x32>
 8012152:	e015      	b.n	8012180 <USBD_GetConfig+0x58>
 8012154:	2b03      	cmp	r3, #3
 8012156:	d00b      	beq.n	8012170 <USBD_GetConfig+0x48>
 8012158:	e012      	b.n	8012180 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	2200      	movs	r2, #0
 801215e:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	3308      	adds	r3, #8
 8012164:	2201      	movs	r2, #1
 8012166:	4619      	mov	r1, r3
 8012168:	6878      	ldr	r0, [r7, #4]
 801216a:	f000 f925 	bl	80123b8 <USBD_CtlSendData>
      break;
 801216e:	e00c      	b.n	801218a <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	3304      	adds	r3, #4
 8012174:	2201      	movs	r2, #1
 8012176:	4619      	mov	r1, r3
 8012178:	6878      	ldr	r0, [r7, #4]
 801217a:	f000 f91d 	bl	80123b8 <USBD_CtlSendData>
      break;
 801217e:	e004      	b.n	801218a <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 8012180:	6839      	ldr	r1, [r7, #0]
 8012182:	6878      	ldr	r0, [r7, #4]
 8012184:	f000 f8a7 	bl	80122d6 <USBD_CtlError>
      break;
 8012188:	bf00      	nop
}
 801218a:	bf00      	nop
 801218c:	3708      	adds	r7, #8
 801218e:	46bd      	mov	sp, r7
 8012190:	bd80      	pop	{r7, pc}

08012192 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012192:	b580      	push	{r7, lr}
 8012194:	b082      	sub	sp, #8
 8012196:	af00      	add	r7, sp, #0
 8012198:	6078      	str	r0, [r7, #4]
 801219a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80121a2:	3b01      	subs	r3, #1
 80121a4:	2b02      	cmp	r3, #2
 80121a6:	d81e      	bhi.n	80121e6 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80121a8:	683b      	ldr	r3, [r7, #0]
 80121aa:	88db      	ldrh	r3, [r3, #6]
 80121ac:	2b02      	cmp	r3, #2
 80121ae:	d004      	beq.n	80121ba <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80121b0:	6839      	ldr	r1, [r7, #0]
 80121b2:	6878      	ldr	r0, [r7, #4]
 80121b4:	f000 f88f 	bl	80122d6 <USBD_CtlError>
      break;
 80121b8:	e01a      	b.n	80121f0 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	2201      	movs	r2, #1
 80121be:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d005      	beq.n	80121d6 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	68db      	ldr	r3, [r3, #12]
 80121ce:	f043 0202 	orr.w	r2, r3, #2
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	330c      	adds	r3, #12
 80121da:	2202      	movs	r2, #2
 80121dc:	4619      	mov	r1, r3
 80121de:	6878      	ldr	r0, [r7, #4]
 80121e0:	f000 f8ea 	bl	80123b8 <USBD_CtlSendData>
    break;
 80121e4:	e004      	b.n	80121f0 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80121e6:	6839      	ldr	r1, [r7, #0]
 80121e8:	6878      	ldr	r0, [r7, #4]
 80121ea:	f000 f874 	bl	80122d6 <USBD_CtlError>
    break;
 80121ee:	bf00      	nop
  }
}
 80121f0:	bf00      	nop
 80121f2:	3708      	adds	r7, #8
 80121f4:	46bd      	mov	sp, r7
 80121f6:	bd80      	pop	{r7, pc}

080121f8 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80121f8:	b580      	push	{r7, lr}
 80121fa:	b082      	sub	sp, #8
 80121fc:	af00      	add	r7, sp, #0
 80121fe:	6078      	str	r0, [r7, #4]
 8012200:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012202:	683b      	ldr	r3, [r7, #0]
 8012204:	885b      	ldrh	r3, [r3, #2]
 8012206:	2b01      	cmp	r3, #1
 8012208:	d106      	bne.n	8012218 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	2201      	movs	r2, #1
 801220e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8012212:	6878      	ldr	r0, [r7, #4]
 8012214:	f000 f92a 	bl	801246c <USBD_CtlSendStatus>
  }
}
 8012218:	bf00      	nop
 801221a:	3708      	adds	r7, #8
 801221c:	46bd      	mov	sp, r7
 801221e:	bd80      	pop	{r7, pc}

08012220 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012220:	b580      	push	{r7, lr}
 8012222:	b082      	sub	sp, #8
 8012224:	af00      	add	r7, sp, #0
 8012226:	6078      	str	r0, [r7, #4]
 8012228:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012230:	3b01      	subs	r3, #1
 8012232:	2b02      	cmp	r3, #2
 8012234:	d80b      	bhi.n	801224e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012236:	683b      	ldr	r3, [r7, #0]
 8012238:	885b      	ldrh	r3, [r3, #2]
 801223a:	2b01      	cmp	r3, #1
 801223c:	d10c      	bne.n	8012258 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	2200      	movs	r2, #0
 8012242:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8012246:	6878      	ldr	r0, [r7, #4]
 8012248:	f000 f910 	bl	801246c <USBD_CtlSendStatus>
      }
      break;
 801224c:	e004      	b.n	8012258 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 801224e:	6839      	ldr	r1, [r7, #0]
 8012250:	6878      	ldr	r0, [r7, #4]
 8012252:	f000 f840 	bl	80122d6 <USBD_CtlError>
      break;
 8012256:	e000      	b.n	801225a <USBD_ClrFeature+0x3a>
      break;
 8012258:	bf00      	nop
  }
}
 801225a:	bf00      	nop
 801225c:	3708      	adds	r7, #8
 801225e:	46bd      	mov	sp, r7
 8012260:	bd80      	pop	{r7, pc}

08012262 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012262:	b580      	push	{r7, lr}
 8012264:	b084      	sub	sp, #16
 8012266:	af00      	add	r7, sp, #0
 8012268:	6078      	str	r0, [r7, #4]
 801226a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801226c:	683b      	ldr	r3, [r7, #0]
 801226e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	781a      	ldrb	r2, [r3, #0]
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	3301      	adds	r3, #1
 801227c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801227e:	68fb      	ldr	r3, [r7, #12]
 8012280:	781a      	ldrb	r2, [r3, #0]
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	3301      	adds	r3, #1
 801228a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801228c:	68f8      	ldr	r0, [r7, #12]
 801228e:	f7ff fac6 	bl	801181e <SWAPBYTE>
 8012292:	4603      	mov	r3, r0
 8012294:	461a      	mov	r2, r3
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801229a:	68fb      	ldr	r3, [r7, #12]
 801229c:	3301      	adds	r3, #1
 801229e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	3301      	adds	r3, #1
 80122a4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80122a6:	68f8      	ldr	r0, [r7, #12]
 80122a8:	f7ff fab9 	bl	801181e <SWAPBYTE>
 80122ac:	4603      	mov	r3, r0
 80122ae:	461a      	mov	r2, r3
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80122b4:	68fb      	ldr	r3, [r7, #12]
 80122b6:	3301      	adds	r3, #1
 80122b8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80122ba:	68fb      	ldr	r3, [r7, #12]
 80122bc:	3301      	adds	r3, #1
 80122be:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80122c0:	68f8      	ldr	r0, [r7, #12]
 80122c2:	f7ff faac 	bl	801181e <SWAPBYTE>
 80122c6:	4603      	mov	r3, r0
 80122c8:	461a      	mov	r2, r3
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	80da      	strh	r2, [r3, #6]
}
 80122ce:	bf00      	nop
 80122d0:	3710      	adds	r7, #16
 80122d2:	46bd      	mov	sp, r7
 80122d4:	bd80      	pop	{r7, pc}

080122d6 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80122d6:	b580      	push	{r7, lr}
 80122d8:	b082      	sub	sp, #8
 80122da:	af00      	add	r7, sp, #0
 80122dc:	6078      	str	r0, [r7, #4]
 80122de:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80122e0:	2180      	movs	r1, #128	; 0x80
 80122e2:	6878      	ldr	r0, [r7, #4]
 80122e4:	f003 fbc0 	bl	8015a68 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80122e8:	2100      	movs	r1, #0
 80122ea:	6878      	ldr	r0, [r7, #4]
 80122ec:	f003 fbbc 	bl	8015a68 <USBD_LL_StallEP>
}
 80122f0:	bf00      	nop
 80122f2:	3708      	adds	r7, #8
 80122f4:	46bd      	mov	sp, r7
 80122f6:	bd80      	pop	{r7, pc}

080122f8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80122f8:	b580      	push	{r7, lr}
 80122fa:	b086      	sub	sp, #24
 80122fc:	af00      	add	r7, sp, #0
 80122fe:	60f8      	str	r0, [r7, #12]
 8012300:	60b9      	str	r1, [r7, #8]
 8012302:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8012304:	2300      	movs	r3, #0
 8012306:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8012308:	68fb      	ldr	r3, [r7, #12]
 801230a:	2b00      	cmp	r3, #0
 801230c:	d036      	beq.n	801237c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801230e:	68fb      	ldr	r3, [r7, #12]
 8012310:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8012312:	6938      	ldr	r0, [r7, #16]
 8012314:	f000 f836 	bl	8012384 <USBD_GetLen>
 8012318:	4603      	mov	r3, r0
 801231a:	3301      	adds	r3, #1
 801231c:	b29b      	uxth	r3, r3
 801231e:	005b      	lsls	r3, r3, #1
 8012320:	b29a      	uxth	r2, r3
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8012326:	7dfb      	ldrb	r3, [r7, #23]
 8012328:	68ba      	ldr	r2, [r7, #8]
 801232a:	4413      	add	r3, r2
 801232c:	687a      	ldr	r2, [r7, #4]
 801232e:	7812      	ldrb	r2, [r2, #0]
 8012330:	701a      	strb	r2, [r3, #0]
  idx++;
 8012332:	7dfb      	ldrb	r3, [r7, #23]
 8012334:	3301      	adds	r3, #1
 8012336:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012338:	7dfb      	ldrb	r3, [r7, #23]
 801233a:	68ba      	ldr	r2, [r7, #8]
 801233c:	4413      	add	r3, r2
 801233e:	2203      	movs	r2, #3
 8012340:	701a      	strb	r2, [r3, #0]
  idx++;
 8012342:	7dfb      	ldrb	r3, [r7, #23]
 8012344:	3301      	adds	r3, #1
 8012346:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8012348:	e013      	b.n	8012372 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801234a:	7dfb      	ldrb	r3, [r7, #23]
 801234c:	68ba      	ldr	r2, [r7, #8]
 801234e:	4413      	add	r3, r2
 8012350:	693a      	ldr	r2, [r7, #16]
 8012352:	7812      	ldrb	r2, [r2, #0]
 8012354:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8012356:	693b      	ldr	r3, [r7, #16]
 8012358:	3301      	adds	r3, #1
 801235a:	613b      	str	r3, [r7, #16]
    idx++;
 801235c:	7dfb      	ldrb	r3, [r7, #23]
 801235e:	3301      	adds	r3, #1
 8012360:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8012362:	7dfb      	ldrb	r3, [r7, #23]
 8012364:	68ba      	ldr	r2, [r7, #8]
 8012366:	4413      	add	r3, r2
 8012368:	2200      	movs	r2, #0
 801236a:	701a      	strb	r2, [r3, #0]
    idx++;
 801236c:	7dfb      	ldrb	r3, [r7, #23]
 801236e:	3301      	adds	r3, #1
 8012370:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8012372:	693b      	ldr	r3, [r7, #16]
 8012374:	781b      	ldrb	r3, [r3, #0]
 8012376:	2b00      	cmp	r3, #0
 8012378:	d1e7      	bne.n	801234a <USBD_GetString+0x52>
 801237a:	e000      	b.n	801237e <USBD_GetString+0x86>
    return;
 801237c:	bf00      	nop
  }
}
 801237e:	3718      	adds	r7, #24
 8012380:	46bd      	mov	sp, r7
 8012382:	bd80      	pop	{r7, pc}

08012384 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8012384:	b480      	push	{r7}
 8012386:	b085      	sub	sp, #20
 8012388:	af00      	add	r7, sp, #0
 801238a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801238c:	2300      	movs	r3, #0
 801238e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8012394:	e005      	b.n	80123a2 <USBD_GetLen+0x1e>
  {
    len++;
 8012396:	7bfb      	ldrb	r3, [r7, #15]
 8012398:	3301      	adds	r3, #1
 801239a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801239c:	68bb      	ldr	r3, [r7, #8]
 801239e:	3301      	adds	r3, #1
 80123a0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80123a2:	68bb      	ldr	r3, [r7, #8]
 80123a4:	781b      	ldrb	r3, [r3, #0]
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d1f5      	bne.n	8012396 <USBD_GetLen+0x12>
  }

  return len;
 80123aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80123ac:	4618      	mov	r0, r3
 80123ae:	3714      	adds	r7, #20
 80123b0:	46bd      	mov	sp, r7
 80123b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123b6:	4770      	bx	lr

080123b8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80123b8:	b580      	push	{r7, lr}
 80123ba:	b084      	sub	sp, #16
 80123bc:	af00      	add	r7, sp, #0
 80123be:	60f8      	str	r0, [r7, #12]
 80123c0:	60b9      	str	r1, [r7, #8]
 80123c2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80123c4:	68fb      	ldr	r3, [r7, #12]
 80123c6:	2202      	movs	r2, #2
 80123c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	687a      	ldr	r2, [r7, #4]
 80123d0:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80123d2:	68fb      	ldr	r3, [r7, #12]
 80123d4:	687a      	ldr	r2, [r7, #4]
 80123d6:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	68ba      	ldr	r2, [r7, #8]
 80123dc:	2100      	movs	r1, #0
 80123de:	68f8      	ldr	r0, [r7, #12]
 80123e0:	f003 fbcb 	bl	8015b7a <USBD_LL_Transmit>

  return USBD_OK;
 80123e4:	2300      	movs	r3, #0
}
 80123e6:	4618      	mov	r0, r3
 80123e8:	3710      	adds	r7, #16
 80123ea:	46bd      	mov	sp, r7
 80123ec:	bd80      	pop	{r7, pc}

080123ee <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80123ee:	b580      	push	{r7, lr}
 80123f0:	b084      	sub	sp, #16
 80123f2:	af00      	add	r7, sp, #0
 80123f4:	60f8      	str	r0, [r7, #12]
 80123f6:	60b9      	str	r1, [r7, #8]
 80123f8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	68ba      	ldr	r2, [r7, #8]
 80123fe:	2100      	movs	r1, #0
 8012400:	68f8      	ldr	r0, [r7, #12]
 8012402:	f003 fbba 	bl	8015b7a <USBD_LL_Transmit>

  return USBD_OK;
 8012406:	2300      	movs	r3, #0
}
 8012408:	4618      	mov	r0, r3
 801240a:	3710      	adds	r7, #16
 801240c:	46bd      	mov	sp, r7
 801240e:	bd80      	pop	{r7, pc}

08012410 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8012410:	b580      	push	{r7, lr}
 8012412:	b084      	sub	sp, #16
 8012414:	af00      	add	r7, sp, #0
 8012416:	60f8      	str	r0, [r7, #12]
 8012418:	60b9      	str	r1, [r7, #8]
 801241a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	2203      	movs	r2, #3
 8012420:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8012424:	68fb      	ldr	r3, [r7, #12]
 8012426:	687a      	ldr	r2, [r7, #4]
 8012428:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 801242c:	68fb      	ldr	r3, [r7, #12]
 801242e:	687a      	ldr	r2, [r7, #4]
 8012430:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	68ba      	ldr	r2, [r7, #8]
 8012438:	2100      	movs	r1, #0
 801243a:	68f8      	ldr	r0, [r7, #12]
 801243c:	f003 fbbe 	bl	8015bbc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012440:	2300      	movs	r3, #0
}
 8012442:	4618      	mov	r0, r3
 8012444:	3710      	adds	r7, #16
 8012446:	46bd      	mov	sp, r7
 8012448:	bd80      	pop	{r7, pc}

0801244a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801244a:	b580      	push	{r7, lr}
 801244c:	b084      	sub	sp, #16
 801244e:	af00      	add	r7, sp, #0
 8012450:	60f8      	str	r0, [r7, #12]
 8012452:	60b9      	str	r1, [r7, #8]
 8012454:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	68ba      	ldr	r2, [r7, #8]
 801245a:	2100      	movs	r1, #0
 801245c:	68f8      	ldr	r0, [r7, #12]
 801245e:	f003 fbad 	bl	8015bbc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012462:	2300      	movs	r3, #0
}
 8012464:	4618      	mov	r0, r3
 8012466:	3710      	adds	r7, #16
 8012468:	46bd      	mov	sp, r7
 801246a:	bd80      	pop	{r7, pc}

0801246c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801246c:	b580      	push	{r7, lr}
 801246e:	b082      	sub	sp, #8
 8012470:	af00      	add	r7, sp, #0
 8012472:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	2204      	movs	r2, #4
 8012478:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801247c:	2300      	movs	r3, #0
 801247e:	2200      	movs	r2, #0
 8012480:	2100      	movs	r1, #0
 8012482:	6878      	ldr	r0, [r7, #4]
 8012484:	f003 fb79 	bl	8015b7a <USBD_LL_Transmit>

  return USBD_OK;
 8012488:	2300      	movs	r3, #0
}
 801248a:	4618      	mov	r0, r3
 801248c:	3708      	adds	r7, #8
 801248e:	46bd      	mov	sp, r7
 8012490:	bd80      	pop	{r7, pc}

08012492 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012492:	b580      	push	{r7, lr}
 8012494:	b082      	sub	sp, #8
 8012496:	af00      	add	r7, sp, #0
 8012498:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	2205      	movs	r2, #5
 801249e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80124a2:	2300      	movs	r3, #0
 80124a4:	2200      	movs	r2, #0
 80124a6:	2100      	movs	r1, #0
 80124a8:	6878      	ldr	r0, [r7, #4]
 80124aa:	f003 fb87 	bl	8015bbc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80124ae:	2300      	movs	r3, #0
}
 80124b0:	4618      	mov	r0, r3
 80124b2:	3708      	adds	r7, #8
 80124b4:	46bd      	mov	sp, r7
 80124b6:	bd80      	pop	{r7, pc}

080124b8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80124b8:	b480      	push	{r7}
 80124ba:	b085      	sub	sp, #20
 80124bc:	af00      	add	r7, sp, #0
 80124be:	4603      	mov	r3, r0
 80124c0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80124c2:	2300      	movs	r3, #0
 80124c4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80124c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80124ca:	2b84      	cmp	r3, #132	; 0x84
 80124cc:	d005      	beq.n	80124da <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80124ce:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	4413      	add	r3, r2
 80124d6:	3303      	adds	r3, #3
 80124d8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80124da:	68fb      	ldr	r3, [r7, #12]
}
 80124dc:	4618      	mov	r0, r3
 80124de:	3714      	adds	r7, #20
 80124e0:	46bd      	mov	sp, r7
 80124e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124e6:	4770      	bx	lr

080124e8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80124e8:	b480      	push	{r7}
 80124ea:	b083      	sub	sp, #12
 80124ec:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80124ee:	f3ef 8305 	mrs	r3, IPSR
 80124f2:	607b      	str	r3, [r7, #4]
  return(result);
 80124f4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	bf14      	ite	ne
 80124fa:	2301      	movne	r3, #1
 80124fc:	2300      	moveq	r3, #0
 80124fe:	b2db      	uxtb	r3, r3
}
 8012500:	4618      	mov	r0, r3
 8012502:	370c      	adds	r7, #12
 8012504:	46bd      	mov	sp, r7
 8012506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801250a:	4770      	bx	lr

0801250c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 801250c:	b580      	push	{r7, lr}
 801250e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8012510:	f001 fb4c 	bl	8013bac <vTaskStartScheduler>
  
  return osOK;
 8012514:	2300      	movs	r3, #0
}
 8012516:	4618      	mov	r0, r3
 8012518:	bd80      	pop	{r7, pc}

0801251a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 801251a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801251c:	b089      	sub	sp, #36	; 0x24
 801251e:	af04      	add	r7, sp, #16
 8012520:	6078      	str	r0, [r7, #4]
 8012522:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	695b      	ldr	r3, [r3, #20]
 8012528:	2b00      	cmp	r3, #0
 801252a:	d020      	beq.n	801256e <osThreadCreate+0x54>
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	699b      	ldr	r3, [r3, #24]
 8012530:	2b00      	cmp	r3, #0
 8012532:	d01c      	beq.n	801256e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	685c      	ldr	r4, [r3, #4]
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	681d      	ldr	r5, [r3, #0]
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	691e      	ldr	r6, [r3, #16]
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012546:	4618      	mov	r0, r3
 8012548:	f7ff ffb6 	bl	80124b8 <makeFreeRtosPriority>
 801254c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	695b      	ldr	r3, [r3, #20]
 8012552:	687a      	ldr	r2, [r7, #4]
 8012554:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012556:	9202      	str	r2, [sp, #8]
 8012558:	9301      	str	r3, [sp, #4]
 801255a:	9100      	str	r1, [sp, #0]
 801255c:	683b      	ldr	r3, [r7, #0]
 801255e:	4632      	mov	r2, r6
 8012560:	4629      	mov	r1, r5
 8012562:	4620      	mov	r0, r4
 8012564:	f001 f95a 	bl	801381c <xTaskCreateStatic>
 8012568:	4603      	mov	r3, r0
 801256a:	60fb      	str	r3, [r7, #12]
 801256c:	e01c      	b.n	80125a8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	685c      	ldr	r4, [r3, #4]
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801257a:	b29e      	uxth	r6, r3
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012582:	4618      	mov	r0, r3
 8012584:	f7ff ff98 	bl	80124b8 <makeFreeRtosPriority>
 8012588:	4602      	mov	r2, r0
 801258a:	f107 030c 	add.w	r3, r7, #12
 801258e:	9301      	str	r3, [sp, #4]
 8012590:	9200      	str	r2, [sp, #0]
 8012592:	683b      	ldr	r3, [r7, #0]
 8012594:	4632      	mov	r2, r6
 8012596:	4629      	mov	r1, r5
 8012598:	4620      	mov	r0, r4
 801259a:	f001 f99c 	bl	80138d6 <xTaskCreate>
 801259e:	4603      	mov	r3, r0
 80125a0:	2b01      	cmp	r3, #1
 80125a2:	d001      	beq.n	80125a8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80125a4:	2300      	movs	r3, #0
 80125a6:	e000      	b.n	80125aa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80125a8:	68fb      	ldr	r3, [r7, #12]
}
 80125aa:	4618      	mov	r0, r3
 80125ac:	3714      	adds	r7, #20
 80125ae:	46bd      	mov	sp, r7
 80125b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080125b2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80125b2:	b580      	push	{r7, lr}
 80125b4:	b084      	sub	sp, #16
 80125b6:	af00      	add	r7, sp, #0
 80125b8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d001      	beq.n	80125c8 <osDelay+0x16>
 80125c4:	68fb      	ldr	r3, [r7, #12]
 80125c6:	e000      	b.n	80125ca <osDelay+0x18>
 80125c8:	2301      	movs	r3, #1
 80125ca:	4618      	mov	r0, r3
 80125cc:	f001 faba 	bl	8013b44 <vTaskDelay>
  
  return osOK;
 80125d0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80125d2:	4618      	mov	r0, r3
 80125d4:	3710      	adds	r7, #16
 80125d6:	46bd      	mov	sp, r7
 80125d8:	bd80      	pop	{r7, pc}
	...

080125dc <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 80125dc:	b580      	push	{r7, lr}
 80125de:	b086      	sub	sp, #24
 80125e0:	af02      	add	r7, sp, #8
 80125e2:	6078      	str	r0, [r7, #4]
 80125e4:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80125e6:	2300      	movs	r3, #0
 80125e8:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 80125ea:	2300      	movs	r3, #0
 80125ec:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 80125ee:	f7ff ff7b 	bl	80124e8 <inHandlerMode>
 80125f2:	4603      	mov	r3, r0
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d01c      	beq.n	8012632 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 80125f8:	6839      	ldr	r1, [r7, #0]
 80125fa:	f107 0208 	add.w	r2, r7, #8
 80125fe:	f107 030c 	add.w	r3, r7, #12
 8012602:	9300      	str	r3, [sp, #0]
 8012604:	4613      	mov	r3, r2
 8012606:	2201      	movs	r2, #1
 8012608:	6878      	ldr	r0, [r7, #4]
 801260a:	f002 f881 	bl	8014710 <xTaskGenericNotifyFromISR>
 801260e:	4603      	mov	r3, r0
 8012610:	2b01      	cmp	r3, #1
 8012612:	d002      	beq.n	801261a <osSignalSet+0x3e>
      return 0x80000000;
 8012614:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012618:	e019      	b.n	801264e <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 801261a:	68fb      	ldr	r3, [r7, #12]
 801261c:	2b00      	cmp	r3, #0
 801261e:	d015      	beq.n	801264c <osSignalSet+0x70>
 8012620:	4b0d      	ldr	r3, [pc, #52]	; (8012658 <osSignalSet+0x7c>)
 8012622:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012626:	601a      	str	r2, [r3, #0]
 8012628:	f3bf 8f4f 	dsb	sy
 801262c:	f3bf 8f6f 	isb	sy
 8012630:	e00c      	b.n	801264c <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8012632:	6839      	ldr	r1, [r7, #0]
 8012634:	f107 0308 	add.w	r3, r7, #8
 8012638:	2201      	movs	r2, #1
 801263a:	6878      	ldr	r0, [r7, #4]
 801263c:	f001 ffb2 	bl	80145a4 <xTaskGenericNotify>
 8012640:	4603      	mov	r3, r0
 8012642:	2b01      	cmp	r3, #1
 8012644:	d002      	beq.n	801264c <osSignalSet+0x70>
    return 0x80000000;
 8012646:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801264a:	e000      	b.n	801264e <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 801264c:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 801264e:	4618      	mov	r0, r3
 8012650:	3710      	adds	r7, #16
 8012652:	46bd      	mov	sp, r7
 8012654:	bd80      	pop	{r7, pc}
 8012656:	bf00      	nop
 8012658:	e000ed04 	.word	0xe000ed04

0801265c <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 801265c:	b590      	push	{r4, r7, lr}
 801265e:	b089      	sub	sp, #36	; 0x24
 8012660:	af00      	add	r7, sp, #0
 8012662:	60f8      	str	r0, [r7, #12]
 8012664:	60b9      	str	r1, [r7, #8]
 8012666:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8012668:	2300      	movs	r3, #0
 801266a:	617b      	str	r3, [r7, #20]
  ticks = 0;
 801266c:	2300      	movs	r3, #0
 801266e:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012676:	d103      	bne.n	8012680 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8012678:	f04f 33ff 	mov.w	r3, #4294967295
 801267c:	61fb      	str	r3, [r7, #28]
 801267e:	e009      	b.n	8012694 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	2b00      	cmp	r3, #0
 8012684:	d006      	beq.n	8012694 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 801268a:	69fb      	ldr	r3, [r7, #28]
 801268c:	2b00      	cmp	r3, #0
 801268e:	d101      	bne.n	8012694 <osSignalWait+0x38>
      ticks = 1;
 8012690:	2301      	movs	r3, #1
 8012692:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8012694:	f7ff ff28 	bl	80124e8 <inHandlerMode>
 8012698:	4603      	mov	r3, r0
 801269a:	2b00      	cmp	r3, #0
 801269c:	d002      	beq.n	80126a4 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 801269e:	2382      	movs	r3, #130	; 0x82
 80126a0:	613b      	str	r3, [r7, #16]
 80126a2:	e01b      	b.n	80126dc <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 80126a4:	68b9      	ldr	r1, [r7, #8]
 80126a6:	f107 0310 	add.w	r3, r7, #16
 80126aa:	1d1a      	adds	r2, r3, #4
 80126ac:	69fb      	ldr	r3, [r7, #28]
 80126ae:	2000      	movs	r0, #0
 80126b0:	f001 ff1e 	bl	80144f0 <xTaskNotifyWait>
 80126b4:	4603      	mov	r3, r0
 80126b6:	2b01      	cmp	r3, #1
 80126b8:	d008      	beq.n	80126cc <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 80126ba:	69fb      	ldr	r3, [r7, #28]
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d102      	bne.n	80126c6 <osSignalWait+0x6a>
 80126c0:	2300      	movs	r3, #0
 80126c2:	613b      	str	r3, [r7, #16]
 80126c4:	e00a      	b.n	80126dc <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 80126c6:	2340      	movs	r3, #64	; 0x40
 80126c8:	613b      	str	r3, [r7, #16]
 80126ca:	e007      	b.n	80126dc <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 80126cc:	697b      	ldr	r3, [r7, #20]
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	da02      	bge.n	80126d8 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 80126d2:	2386      	movs	r3, #134	; 0x86
 80126d4:	613b      	str	r3, [r7, #16]
 80126d6:	e001      	b.n	80126dc <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 80126d8:	2308      	movs	r3, #8
 80126da:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 80126dc:	68fb      	ldr	r3, [r7, #12]
 80126de:	461c      	mov	r4, r3
 80126e0:	f107 0310 	add.w	r3, r7, #16
 80126e4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80126e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80126ec:	68f8      	ldr	r0, [r7, #12]
 80126ee:	3724      	adds	r7, #36	; 0x24
 80126f0:	46bd      	mov	sp, r7
 80126f2:	bd90      	pop	{r4, r7, pc}

080126f4 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80126f4:	b580      	push	{r7, lr}
 80126f6:	b082      	sub	sp, #8
 80126f8:	af00      	add	r7, sp, #0
 80126fa:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	685b      	ldr	r3, [r3, #4]
 8012700:	2b00      	cmp	r3, #0
 8012702:	d007      	beq.n	8012714 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	685b      	ldr	r3, [r3, #4]
 8012708:	4619      	mov	r1, r3
 801270a:	2001      	movs	r0, #1
 801270c:	f000 fc65 	bl	8012fda <xQueueCreateMutexStatic>
 8012710:	4603      	mov	r3, r0
 8012712:	e003      	b.n	801271c <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8012714:	2001      	movs	r0, #1
 8012716:	f000 fc48 	bl	8012faa <xQueueCreateMutex>
 801271a:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 801271c:	4618      	mov	r0, r3
 801271e:	3708      	adds	r7, #8
 8012720:	46bd      	mov	sp, r7
 8012722:	bd80      	pop	{r7, pc}

08012724 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8012724:	b580      	push	{r7, lr}
 8012726:	b086      	sub	sp, #24
 8012728:	af00      	add	r7, sp, #0
 801272a:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	685b      	ldr	r3, [r3, #4]
 8012730:	3303      	adds	r3, #3
 8012732:	f023 0303 	bic.w	r3, r3, #3
 8012736:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8012738:	2014      	movs	r0, #20
 801273a:	f002 fb75 	bl	8014e28 <pvPortMalloc>
 801273e:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8012740:	697b      	ldr	r3, [r7, #20]
 8012742:	2b00      	cmp	r3, #0
 8012744:	d046      	beq.n	80127d4 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	681a      	ldr	r2, [r3, #0]
 801274a:	697b      	ldr	r3, [r7, #20]
 801274c:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 801274e:	68fa      	ldr	r2, [r7, #12]
 8012750:	697b      	ldr	r3, [r7, #20]
 8012752:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8012754:	697b      	ldr	r3, [r7, #20]
 8012756:	2200      	movs	r2, #0
 8012758:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	4618      	mov	r0, r3
 8012760:	f002 fb62 	bl	8014e28 <pvPortMalloc>
 8012764:	4602      	mov	r2, r0
 8012766:	697b      	ldr	r3, [r7, #20]
 8012768:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 801276a:	697b      	ldr	r3, [r7, #20]
 801276c:	685b      	ldr	r3, [r3, #4]
 801276e:	2b00      	cmp	r3, #0
 8012770:	d02b      	beq.n	80127ca <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	681b      	ldr	r3, [r3, #0]
 8012776:	68fa      	ldr	r2, [r7, #12]
 8012778:	fb02 f303 	mul.w	r3, r2, r3
 801277c:	4618      	mov	r0, r3
 801277e:	f002 fb53 	bl	8014e28 <pvPortMalloc>
 8012782:	4602      	mov	r2, r0
 8012784:	697b      	ldr	r3, [r7, #20]
 8012786:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8012788:	697b      	ldr	r3, [r7, #20]
 801278a:	681b      	ldr	r3, [r3, #0]
 801278c:	2b00      	cmp	r3, #0
 801278e:	d011      	beq.n	80127b4 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8012790:	2300      	movs	r3, #0
 8012792:	613b      	str	r3, [r7, #16]
 8012794:	e008      	b.n	80127a8 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8012796:	697b      	ldr	r3, [r7, #20]
 8012798:	685a      	ldr	r2, [r3, #4]
 801279a:	693b      	ldr	r3, [r7, #16]
 801279c:	4413      	add	r3, r2
 801279e:	2200      	movs	r2, #0
 80127a0:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 80127a2:	693b      	ldr	r3, [r7, #16]
 80127a4:	3301      	adds	r3, #1
 80127a6:	613b      	str	r3, [r7, #16]
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	681b      	ldr	r3, [r3, #0]
 80127ac:	693a      	ldr	r2, [r7, #16]
 80127ae:	429a      	cmp	r2, r3
 80127b0:	d3f1      	bcc.n	8012796 <osPoolCreate+0x72>
 80127b2:	e00f      	b.n	80127d4 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 80127b4:	697b      	ldr	r3, [r7, #20]
 80127b6:	685b      	ldr	r3, [r3, #4]
 80127b8:	4618      	mov	r0, r3
 80127ba:	f002 fbf9 	bl	8014fb0 <vPortFree>
        vPortFree(thePool);
 80127be:	6978      	ldr	r0, [r7, #20]
 80127c0:	f002 fbf6 	bl	8014fb0 <vPortFree>
        thePool = NULL;
 80127c4:	2300      	movs	r3, #0
 80127c6:	617b      	str	r3, [r7, #20]
 80127c8:	e004      	b.n	80127d4 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 80127ca:	6978      	ldr	r0, [r7, #20]
 80127cc:	f002 fbf0 	bl	8014fb0 <vPortFree>
      thePool = NULL;
 80127d0:	2300      	movs	r3, #0
 80127d2:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 80127d4:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 80127d6:	4618      	mov	r0, r3
 80127d8:	3718      	adds	r7, #24
 80127da:	46bd      	mov	sp, r7
 80127dc:	bd80      	pop	{r7, pc}

080127de <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 80127de:	b580      	push	{r7, lr}
 80127e0:	b08a      	sub	sp, #40	; 0x28
 80127e2:	af00      	add	r7, sp, #0
 80127e4:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 80127e6:	2300      	movs	r3, #0
 80127e8:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 80127ea:	2300      	movs	r3, #0
 80127ec:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 80127ee:	f7ff fe7b 	bl	80124e8 <inHandlerMode>
 80127f2:	4603      	mov	r3, r0
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d00e      	beq.n	8012816 <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80127f8:	f3ef 8211 	mrs	r2, BASEPRI
 80127fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012800:	f383 8811 	msr	BASEPRI, r3
 8012804:	f3bf 8f6f 	isb	sy
 8012808:	f3bf 8f4f 	dsb	sy
 801280c:	617a      	str	r2, [r7, #20]
 801280e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8012810:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8012812:	627b      	str	r3, [r7, #36]	; 0x24
 8012814:	e001      	b.n	801281a <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8012816:	f002 f9e5 	bl	8014be4 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 801281a:	2300      	movs	r3, #0
 801281c:	61fb      	str	r3, [r7, #28]
 801281e:	e029      	b.n	8012874 <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	691a      	ldr	r2, [r3, #16]
 8012824:	69fb      	ldr	r3, [r7, #28]
 8012826:	4413      	add	r3, r2
 8012828:	687a      	ldr	r2, [r7, #4]
 801282a:	6892      	ldr	r2, [r2, #8]
 801282c:	fbb3 f1f2 	udiv	r1, r3, r2
 8012830:	fb02 f201 	mul.w	r2, r2, r1
 8012834:	1a9b      	subs	r3, r3, r2
 8012836:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	685a      	ldr	r2, [r3, #4]
 801283c:	69bb      	ldr	r3, [r7, #24]
 801283e:	4413      	add	r3, r2
 8012840:	781b      	ldrb	r3, [r3, #0]
 8012842:	2b00      	cmp	r3, #0
 8012844:	d113      	bne.n	801286e <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	685a      	ldr	r2, [r3, #4]
 801284a:	69bb      	ldr	r3, [r7, #24]
 801284c:	4413      	add	r3, r2
 801284e:	2201      	movs	r2, #1
 8012850:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	4619      	mov	r1, r3
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	68db      	ldr	r3, [r3, #12]
 801285c:	69ba      	ldr	r2, [r7, #24]
 801285e:	fb02 f303 	mul.w	r3, r2, r3
 8012862:	440b      	add	r3, r1
 8012864:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	69ba      	ldr	r2, [r7, #24]
 801286a:	611a      	str	r2, [r3, #16]
      break;
 801286c:	e007      	b.n	801287e <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 801286e:	69fb      	ldr	r3, [r7, #28]
 8012870:	3301      	adds	r3, #1
 8012872:	61fb      	str	r3, [r7, #28]
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	689b      	ldr	r3, [r3, #8]
 8012878:	69fa      	ldr	r2, [r7, #28]
 801287a:	429a      	cmp	r2, r3
 801287c:	d3d0      	bcc.n	8012820 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 801287e:	f7ff fe33 	bl	80124e8 <inHandlerMode>
 8012882:	4603      	mov	r3, r0
 8012884:	2b00      	cmp	r3, #0
 8012886:	d005      	beq.n	8012894 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8012888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801288a:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801288c:	68fb      	ldr	r3, [r7, #12]
 801288e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8012892:	e001      	b.n	8012898 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 8012894:	f002 f9d6 	bl	8014c44 <vPortExitCritical>
  }
  
  return p;
 8012898:	6a3b      	ldr	r3, [r7, #32]
}
 801289a:	4618      	mov	r0, r3
 801289c:	3728      	adds	r7, #40	; 0x28
 801289e:	46bd      	mov	sp, r7
 80128a0:	bd80      	pop	{r7, pc}

080128a2 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 80128a2:	b480      	push	{r7}
 80128a4:	b085      	sub	sp, #20
 80128a6:	af00      	add	r7, sp, #0
 80128a8:	6078      	str	r0, [r7, #4]
 80128aa:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d101      	bne.n	80128b6 <osPoolFree+0x14>
    return osErrorParameter;
 80128b2:	2380      	movs	r3, #128	; 0x80
 80128b4:	e030      	b.n	8012918 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 80128b6:	683b      	ldr	r3, [r7, #0]
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d101      	bne.n	80128c0 <osPoolFree+0x1e>
    return osErrorParameter;
 80128bc:	2380      	movs	r3, #128	; 0x80
 80128be:	e02b      	b.n	8012918 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	683a      	ldr	r2, [r7, #0]
 80128c6:	429a      	cmp	r2, r3
 80128c8:	d201      	bcs.n	80128ce <osPoolFree+0x2c>
    return osErrorParameter;
 80128ca:	2380      	movs	r3, #128	; 0x80
 80128cc:	e024      	b.n	8012918 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 80128ce:	683b      	ldr	r3, [r7, #0]
 80128d0:	687a      	ldr	r2, [r7, #4]
 80128d2:	6812      	ldr	r2, [r2, #0]
 80128d4:	1a9b      	subs	r3, r3, r2
 80128d6:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	68da      	ldr	r2, [r3, #12]
 80128dc:	68fb      	ldr	r3, [r7, #12]
 80128de:	fbb3 f1f2 	udiv	r1, r3, r2
 80128e2:	fb02 f201 	mul.w	r2, r2, r1
 80128e6:	1a9b      	subs	r3, r3, r2
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d001      	beq.n	80128f0 <osPoolFree+0x4e>
    return osErrorParameter;
 80128ec:	2380      	movs	r3, #128	; 0x80
 80128ee:	e013      	b.n	8012918 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	68db      	ldr	r3, [r3, #12]
 80128f4:	68fa      	ldr	r2, [r7, #12]
 80128f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80128fa:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	689b      	ldr	r3, [r3, #8]
 8012900:	68fa      	ldr	r2, [r7, #12]
 8012902:	429a      	cmp	r2, r3
 8012904:	d301      	bcc.n	801290a <osPoolFree+0x68>
    return osErrorParameter;
 8012906:	2380      	movs	r3, #128	; 0x80
 8012908:	e006      	b.n	8012918 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	685a      	ldr	r2, [r3, #4]
 801290e:	68fb      	ldr	r3, [r7, #12]
 8012910:	4413      	add	r3, r2
 8012912:	2200      	movs	r2, #0
 8012914:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 8012916:	2300      	movs	r3, #0
}
 8012918:	4618      	mov	r0, r3
 801291a:	3714      	adds	r7, #20
 801291c:	46bd      	mov	sp, r7
 801291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012922:	4770      	bx	lr

08012924 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8012924:	b590      	push	{r4, r7, lr}
 8012926:	b087      	sub	sp, #28
 8012928:	af00      	add	r7, sp, #0
 801292a:	6078      	str	r0, [r7, #4]
 801292c:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	60fb      	str	r3, [r7, #12]
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	685b      	ldr	r3, [r3, #4]
 8012938:	613b      	str	r3, [r7, #16]
 801293a:	2300      	movs	r3, #0
 801293c:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	689c      	ldr	r4, [r3, #8]
 8012942:	200c      	movs	r0, #12
 8012944:	f002 fa70 	bl	8014e28 <pvPortMalloc>
 8012948:	4603      	mov	r3, r0
 801294a:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	689b      	ldr	r3, [r3, #8]
 8012950:	681b      	ldr	r3, [r3, #0]
 8012952:	2b00      	cmp	r3, #0
 8012954:	d101      	bne.n	801295a <osMailCreate+0x36>
    return NULL;
 8012956:	2300      	movs	r3, #0
 8012958:	e038      	b.n	80129cc <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	689b      	ldr	r3, [r3, #8]
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	687a      	ldr	r2, [r7, #4]
 8012962:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	6818      	ldr	r0, [r3, #0]
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	689b      	ldr	r3, [r3, #8]
 801296c:	681c      	ldr	r4, [r3, #0]
 801296e:	2200      	movs	r2, #0
 8012970:	2104      	movs	r1, #4
 8012972:	f000 faa1 	bl	8012eb8 <xQueueGenericCreate>
 8012976:	4603      	mov	r3, r0
 8012978:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	689b      	ldr	r3, [r3, #8]
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	685b      	ldr	r3, [r3, #4]
 8012982:	2b00      	cmp	r3, #0
 8012984:	d107      	bne.n	8012996 <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	689b      	ldr	r3, [r3, #8]
 801298a:	681b      	ldr	r3, [r3, #0]
 801298c:	4618      	mov	r0, r3
 801298e:	f002 fb0f 	bl	8014fb0 <vPortFree>
    return NULL;
 8012992:	2300      	movs	r3, #0
 8012994:	e01a      	b.n	80129cc <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	689b      	ldr	r3, [r3, #8]
 801299a:	681c      	ldr	r4, [r3, #0]
 801299c:	f107 030c 	add.w	r3, r7, #12
 80129a0:	4618      	mov	r0, r3
 80129a2:	f7ff febf 	bl	8012724 <osPoolCreate>
 80129a6:	4603      	mov	r3, r0
 80129a8:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	689b      	ldr	r3, [r3, #8]
 80129ae:	681b      	ldr	r3, [r3, #0]
 80129b0:	689b      	ldr	r3, [r3, #8]
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d107      	bne.n	80129c6 <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	689b      	ldr	r3, [r3, #8]
 80129ba:	681b      	ldr	r3, [r3, #0]
 80129bc:	4618      	mov	r0, r3
 80129be:	f002 faf7 	bl	8014fb0 <vPortFree>
    return NULL;
 80129c2:	2300      	movs	r3, #0
 80129c4:	e002      	b.n	80129cc <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	689b      	ldr	r3, [r3, #8]
 80129ca:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 80129cc:	4618      	mov	r0, r3
 80129ce:	371c      	adds	r7, #28
 80129d0:	46bd      	mov	sp, r7
 80129d2:	bd90      	pop	{r4, r7, pc}

080129d4 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 80129d4:	b580      	push	{r7, lr}
 80129d6:	b084      	sub	sp, #16
 80129d8:	af00      	add	r7, sp, #0
 80129da:	6078      	str	r0, [r7, #4]
 80129dc:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d101      	bne.n	80129e8 <osMailAlloc+0x14>
    return NULL;
 80129e4:	2300      	movs	r3, #0
 80129e6:	e006      	b.n	80129f6 <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	689b      	ldr	r3, [r3, #8]
 80129ec:	4618      	mov	r0, r3
 80129ee:	f7ff fef6 	bl	80127de <osPoolAlloc>
 80129f2:	60f8      	str	r0, [r7, #12]
  
  return p;
 80129f4:	68fb      	ldr	r3, [r7, #12]
}
 80129f6:	4618      	mov	r0, r3
 80129f8:	3710      	adds	r7, #16
 80129fa:	46bd      	mov	sp, r7
 80129fc:	bd80      	pop	{r7, pc}
	...

08012a00 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8012a00:	b580      	push	{r7, lr}
 8012a02:	b084      	sub	sp, #16
 8012a04:	af00      	add	r7, sp, #0
 8012a06:	6078      	str	r0, [r7, #4]
 8012a08:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d101      	bne.n	8012a14 <osMailPut+0x14>
    return osErrorParameter;
 8012a10:	2380      	movs	r3, #128	; 0x80
 8012a12:	e02c      	b.n	8012a6e <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 8012a14:	2300      	movs	r3, #0
 8012a16:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 8012a18:	f7ff fd66 	bl	80124e8 <inHandlerMode>
 8012a1c:	4603      	mov	r3, r0
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d018      	beq.n	8012a54 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	6858      	ldr	r0, [r3, #4]
 8012a26:	f107 020c 	add.w	r2, r7, #12
 8012a2a:	4639      	mov	r1, r7
 8012a2c:	2300      	movs	r3, #0
 8012a2e:	f000 fbed 	bl	801320c <xQueueGenericSendFromISR>
 8012a32:	4603      	mov	r3, r0
 8012a34:	2b01      	cmp	r3, #1
 8012a36:	d001      	beq.n	8012a3c <osMailPut+0x3c>
      return osErrorOS;
 8012a38:	23ff      	movs	r3, #255	; 0xff
 8012a3a:	e018      	b.n	8012a6e <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012a3c:	68fb      	ldr	r3, [r7, #12]
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d014      	beq.n	8012a6c <osMailPut+0x6c>
 8012a42:	4b0d      	ldr	r3, [pc, #52]	; (8012a78 <osMailPut+0x78>)
 8012a44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a48:	601a      	str	r2, [r3, #0]
 8012a4a:	f3bf 8f4f 	dsb	sy
 8012a4e:	f3bf 8f6f 	isb	sy
 8012a52:	e00b      	b.n	8012a6c <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	6858      	ldr	r0, [r3, #4]
 8012a58:	4639      	mov	r1, r7
 8012a5a:	2300      	movs	r3, #0
 8012a5c:	2200      	movs	r2, #0
 8012a5e:	f000 fad7 	bl	8013010 <xQueueGenericSend>
 8012a62:	4603      	mov	r3, r0
 8012a64:	2b01      	cmp	r3, #1
 8012a66:	d001      	beq.n	8012a6c <osMailPut+0x6c>
      return osErrorOS;
 8012a68:	23ff      	movs	r3, #255	; 0xff
 8012a6a:	e000      	b.n	8012a6e <osMailPut+0x6e>
    }
  }
  
  return osOK;
 8012a6c:	2300      	movs	r3, #0
}
 8012a6e:	4618      	mov	r0, r3
 8012a70:	3710      	adds	r7, #16
 8012a72:	46bd      	mov	sp, r7
 8012a74:	bd80      	pop	{r7, pc}
 8012a76:	bf00      	nop
 8012a78:	e000ed04 	.word	0xe000ed04

08012a7c <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 8012a7c:	b590      	push	{r4, r7, lr}
 8012a7e:	b08b      	sub	sp, #44	; 0x2c
 8012a80:	af00      	add	r7, sp, #0
 8012a82:	60f8      	str	r0, [r7, #12]
 8012a84:	60b9      	str	r1, [r7, #8]
 8012a86:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 8012a88:	68bb      	ldr	r3, [r7, #8]
 8012a8a:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 8012a8c:	68bb      	ldr	r3, [r7, #8]
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d10a      	bne.n	8012aa8 <osMailGet+0x2c>
    event.status = osErrorParameter;
 8012a92:	2380      	movs	r3, #128	; 0x80
 8012a94:	617b      	str	r3, [r7, #20]
    return event;
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	461c      	mov	r4, r3
 8012a9a:	f107 0314 	add.w	r3, r7, #20
 8012a9e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012aa2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012aa6:	e056      	b.n	8012b56 <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8012aa8:	2300      	movs	r3, #0
 8012aaa:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8012aac:	2300      	movs	r3, #0
 8012aae:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ab6:	d103      	bne.n	8012ac0 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 8012ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8012abc:	627b      	str	r3, [r7, #36]	; 0x24
 8012abe:	e009      	b.n	8012ad4 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	d006      	beq.n	8012ad4 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8012aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d101      	bne.n	8012ad4 <osMailGet+0x58>
      ticks = 1;
 8012ad0:	2301      	movs	r3, #1
 8012ad2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8012ad4:	f7ff fd08 	bl	80124e8 <inHandlerMode>
 8012ad8:	4603      	mov	r3, r0
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d01d      	beq.n	8012b1a <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8012ade:	68bb      	ldr	r3, [r7, #8]
 8012ae0:	6858      	ldr	r0, [r3, #4]
 8012ae2:	f107 0220 	add.w	r2, r7, #32
 8012ae6:	f107 0314 	add.w	r3, r7, #20
 8012aea:	3304      	adds	r3, #4
 8012aec:	4619      	mov	r1, r3
 8012aee:	f000 fd05 	bl	80134fc <xQueueReceiveFromISR>
 8012af2:	4603      	mov	r3, r0
 8012af4:	2b01      	cmp	r3, #1
 8012af6:	d102      	bne.n	8012afe <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 8012af8:	2320      	movs	r3, #32
 8012afa:	617b      	str	r3, [r7, #20]
 8012afc:	e001      	b.n	8012b02 <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 8012afe:	2300      	movs	r3, #0
 8012b00:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012b02:	6a3b      	ldr	r3, [r7, #32]
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d01e      	beq.n	8012b46 <osMailGet+0xca>
 8012b08:	4b15      	ldr	r3, [pc, #84]	; (8012b60 <osMailGet+0xe4>)
 8012b0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012b0e:	601a      	str	r2, [r3, #0]
 8012b10:	f3bf 8f4f 	dsb	sy
 8012b14:	f3bf 8f6f 	isb	sy
 8012b18:	e015      	b.n	8012b46 <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8012b1a:	68bb      	ldr	r3, [r7, #8]
 8012b1c:	6858      	ldr	r0, [r3, #4]
 8012b1e:	f107 0314 	add.w	r3, r7, #20
 8012b22:	3304      	adds	r3, #4
 8012b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b26:	4619      	mov	r1, r3
 8012b28:	f000 fc08 	bl	801333c <xQueueReceive>
 8012b2c:	4603      	mov	r3, r0
 8012b2e:	2b01      	cmp	r3, #1
 8012b30:	d102      	bne.n	8012b38 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 8012b32:	2320      	movs	r3, #32
 8012b34:	617b      	str	r3, [r7, #20]
 8012b36:	e006      	b.n	8012b46 <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8012b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d101      	bne.n	8012b42 <osMailGet+0xc6>
 8012b3e:	2300      	movs	r3, #0
 8012b40:	e000      	b.n	8012b44 <osMailGet+0xc8>
 8012b42:	2340      	movs	r3, #64	; 0x40
 8012b44:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8012b46:	68fb      	ldr	r3, [r7, #12]
 8012b48:	461c      	mov	r4, r3
 8012b4a:	f107 0314 	add.w	r3, r7, #20
 8012b4e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012b52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8012b56:	68f8      	ldr	r0, [r7, #12]
 8012b58:	372c      	adds	r7, #44	; 0x2c
 8012b5a:	46bd      	mov	sp, r7
 8012b5c:	bd90      	pop	{r4, r7, pc}
 8012b5e:	bf00      	nop
 8012b60:	e000ed04 	.word	0xe000ed04

08012b64 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 8012b64:	b580      	push	{r7, lr}
 8012b66:	b082      	sub	sp, #8
 8012b68:	af00      	add	r7, sp, #0
 8012b6a:	6078      	str	r0, [r7, #4]
 8012b6c:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d101      	bne.n	8012b78 <osMailFree+0x14>
    return osErrorParameter;
 8012b74:	2380      	movs	r3, #128	; 0x80
 8012b76:	e006      	b.n	8012b86 <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	689b      	ldr	r3, [r3, #8]
 8012b7c:	6839      	ldr	r1, [r7, #0]
 8012b7e:	4618      	mov	r0, r3
 8012b80:	f7ff fe8f 	bl	80128a2 <osPoolFree>
 8012b84:	4603      	mov	r3, r0
}
 8012b86:	4618      	mov	r0, r3
 8012b88:	3708      	adds	r7, #8
 8012b8a:	46bd      	mov	sp, r7
 8012b8c:	bd80      	pop	{r7, pc}

08012b8e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012b8e:	b480      	push	{r7}
 8012b90:	b083      	sub	sp, #12
 8012b92:	af00      	add	r7, sp, #0
 8012b94:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	f103 0208 	add.w	r2, r3, #8
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	f04f 32ff 	mov.w	r2, #4294967295
 8012ba6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	f103 0208 	add.w	r2, r3, #8
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	f103 0208 	add.w	r2, r3, #8
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	2200      	movs	r2, #0
 8012bc0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012bc2:	bf00      	nop
 8012bc4:	370c      	adds	r7, #12
 8012bc6:	46bd      	mov	sp, r7
 8012bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bcc:	4770      	bx	lr

08012bce <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012bce:	b480      	push	{r7}
 8012bd0:	b083      	sub	sp, #12
 8012bd2:	af00      	add	r7, sp, #0
 8012bd4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	2200      	movs	r2, #0
 8012bda:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012bdc:	bf00      	nop
 8012bde:	370c      	adds	r7, #12
 8012be0:	46bd      	mov	sp, r7
 8012be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012be6:	4770      	bx	lr

08012be8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012be8:	b480      	push	{r7}
 8012bea:	b085      	sub	sp, #20
 8012bec:	af00      	add	r7, sp, #0
 8012bee:	6078      	str	r0, [r7, #4]
 8012bf0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	685b      	ldr	r3, [r3, #4]
 8012bf6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012bf8:	683b      	ldr	r3, [r7, #0]
 8012bfa:	68fa      	ldr	r2, [r7, #12]
 8012bfc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012bfe:	68fb      	ldr	r3, [r7, #12]
 8012c00:	689a      	ldr	r2, [r3, #8]
 8012c02:	683b      	ldr	r3, [r7, #0]
 8012c04:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012c06:	68fb      	ldr	r3, [r7, #12]
 8012c08:	689b      	ldr	r3, [r3, #8]
 8012c0a:	683a      	ldr	r2, [r7, #0]
 8012c0c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012c0e:	68fb      	ldr	r3, [r7, #12]
 8012c10:	683a      	ldr	r2, [r7, #0]
 8012c12:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012c14:	683b      	ldr	r3, [r7, #0]
 8012c16:	687a      	ldr	r2, [r7, #4]
 8012c18:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	1c5a      	adds	r2, r3, #1
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	601a      	str	r2, [r3, #0]
}
 8012c24:	bf00      	nop
 8012c26:	3714      	adds	r7, #20
 8012c28:	46bd      	mov	sp, r7
 8012c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c2e:	4770      	bx	lr

08012c30 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012c30:	b480      	push	{r7}
 8012c32:	b085      	sub	sp, #20
 8012c34:	af00      	add	r7, sp, #0
 8012c36:	6078      	str	r0, [r7, #4]
 8012c38:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012c3a:	683b      	ldr	r3, [r7, #0]
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012c40:	68bb      	ldr	r3, [r7, #8]
 8012c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c46:	d103      	bne.n	8012c50 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	691b      	ldr	r3, [r3, #16]
 8012c4c:	60fb      	str	r3, [r7, #12]
 8012c4e:	e00c      	b.n	8012c6a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	3308      	adds	r3, #8
 8012c54:	60fb      	str	r3, [r7, #12]
 8012c56:	e002      	b.n	8012c5e <vListInsert+0x2e>
 8012c58:	68fb      	ldr	r3, [r7, #12]
 8012c5a:	685b      	ldr	r3, [r3, #4]
 8012c5c:	60fb      	str	r3, [r7, #12]
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	685b      	ldr	r3, [r3, #4]
 8012c62:	681b      	ldr	r3, [r3, #0]
 8012c64:	68ba      	ldr	r2, [r7, #8]
 8012c66:	429a      	cmp	r2, r3
 8012c68:	d2f6      	bcs.n	8012c58 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	685a      	ldr	r2, [r3, #4]
 8012c6e:	683b      	ldr	r3, [r7, #0]
 8012c70:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012c72:	683b      	ldr	r3, [r7, #0]
 8012c74:	685b      	ldr	r3, [r3, #4]
 8012c76:	683a      	ldr	r2, [r7, #0]
 8012c78:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012c7a:	683b      	ldr	r3, [r7, #0]
 8012c7c:	68fa      	ldr	r2, [r7, #12]
 8012c7e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012c80:	68fb      	ldr	r3, [r7, #12]
 8012c82:	683a      	ldr	r2, [r7, #0]
 8012c84:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012c86:	683b      	ldr	r3, [r7, #0]
 8012c88:	687a      	ldr	r2, [r7, #4]
 8012c8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	681b      	ldr	r3, [r3, #0]
 8012c90:	1c5a      	adds	r2, r3, #1
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	601a      	str	r2, [r3, #0]
}
 8012c96:	bf00      	nop
 8012c98:	3714      	adds	r7, #20
 8012c9a:	46bd      	mov	sp, r7
 8012c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ca0:	4770      	bx	lr

08012ca2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012ca2:	b480      	push	{r7}
 8012ca4:	b085      	sub	sp, #20
 8012ca6:	af00      	add	r7, sp, #0
 8012ca8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	691b      	ldr	r3, [r3, #16]
 8012cae:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	685b      	ldr	r3, [r3, #4]
 8012cb4:	687a      	ldr	r2, [r7, #4]
 8012cb6:	6892      	ldr	r2, [r2, #8]
 8012cb8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	689b      	ldr	r3, [r3, #8]
 8012cbe:	687a      	ldr	r2, [r7, #4]
 8012cc0:	6852      	ldr	r2, [r2, #4]
 8012cc2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012cc4:	68fb      	ldr	r3, [r7, #12]
 8012cc6:	685b      	ldr	r3, [r3, #4]
 8012cc8:	687a      	ldr	r2, [r7, #4]
 8012cca:	429a      	cmp	r2, r3
 8012ccc:	d103      	bne.n	8012cd6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	689a      	ldr	r2, [r3, #8]
 8012cd2:	68fb      	ldr	r3, [r7, #12]
 8012cd4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	2200      	movs	r2, #0
 8012cda:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012cdc:	68fb      	ldr	r3, [r7, #12]
 8012cde:	681b      	ldr	r3, [r3, #0]
 8012ce0:	1e5a      	subs	r2, r3, #1
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012ce6:	68fb      	ldr	r3, [r7, #12]
 8012ce8:	681b      	ldr	r3, [r3, #0]
}
 8012cea:	4618      	mov	r0, r3
 8012cec:	3714      	adds	r7, #20
 8012cee:	46bd      	mov	sp, r7
 8012cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cf4:	4770      	bx	lr
	...

08012cf8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012cf8:	b580      	push	{r7, lr}
 8012cfa:	b084      	sub	sp, #16
 8012cfc:	af00      	add	r7, sp, #0
 8012cfe:	6078      	str	r0, [r7, #4]
 8012d00:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012d06:	68fb      	ldr	r3, [r7, #12]
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d10a      	bne.n	8012d22 <xQueueGenericReset+0x2a>
	__asm volatile
 8012d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d10:	f383 8811 	msr	BASEPRI, r3
 8012d14:	f3bf 8f6f 	isb	sy
 8012d18:	f3bf 8f4f 	dsb	sy
 8012d1c:	60bb      	str	r3, [r7, #8]
}
 8012d1e:	bf00      	nop
 8012d20:	e7fe      	b.n	8012d20 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8012d22:	f001 ff5f 	bl	8014be4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	681a      	ldr	r2, [r3, #0]
 8012d2a:	68fb      	ldr	r3, [r7, #12]
 8012d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012d2e:	68f9      	ldr	r1, [r7, #12]
 8012d30:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012d32:	fb01 f303 	mul.w	r3, r1, r3
 8012d36:	441a      	add	r2, r3
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012d3c:	68fb      	ldr	r3, [r7, #12]
 8012d3e:	2200      	movs	r2, #0
 8012d40:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012d42:	68fb      	ldr	r3, [r7, #12]
 8012d44:	681a      	ldr	r2, [r3, #0]
 8012d46:	68fb      	ldr	r3, [r7, #12]
 8012d48:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012d4a:	68fb      	ldr	r3, [r7, #12]
 8012d4c:	681a      	ldr	r2, [r3, #0]
 8012d4e:	68fb      	ldr	r3, [r7, #12]
 8012d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012d52:	3b01      	subs	r3, #1
 8012d54:	68f9      	ldr	r1, [r7, #12]
 8012d56:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012d58:	fb01 f303 	mul.w	r3, r1, r3
 8012d5c:	441a      	add	r2, r3
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012d62:	68fb      	ldr	r3, [r7, #12]
 8012d64:	22ff      	movs	r2, #255	; 0xff
 8012d66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012d6a:	68fb      	ldr	r3, [r7, #12]
 8012d6c:	22ff      	movs	r2, #255	; 0xff
 8012d6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8012d72:	683b      	ldr	r3, [r7, #0]
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d114      	bne.n	8012da2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012d78:	68fb      	ldr	r3, [r7, #12]
 8012d7a:	691b      	ldr	r3, [r3, #16]
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d01a      	beq.n	8012db6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012d80:	68fb      	ldr	r3, [r7, #12]
 8012d82:	3310      	adds	r3, #16
 8012d84:	4618      	mov	r0, r3
 8012d86:	f001 f953 	bl	8014030 <xTaskRemoveFromEventList>
 8012d8a:	4603      	mov	r3, r0
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d012      	beq.n	8012db6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012d90:	4b0c      	ldr	r3, [pc, #48]	; (8012dc4 <xQueueGenericReset+0xcc>)
 8012d92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d96:	601a      	str	r2, [r3, #0]
 8012d98:	f3bf 8f4f 	dsb	sy
 8012d9c:	f3bf 8f6f 	isb	sy
 8012da0:	e009      	b.n	8012db6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	3310      	adds	r3, #16
 8012da6:	4618      	mov	r0, r3
 8012da8:	f7ff fef1 	bl	8012b8e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012dac:	68fb      	ldr	r3, [r7, #12]
 8012dae:	3324      	adds	r3, #36	; 0x24
 8012db0:	4618      	mov	r0, r3
 8012db2:	f7ff feec 	bl	8012b8e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8012db6:	f001 ff45 	bl	8014c44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8012dba:	2301      	movs	r3, #1
}
 8012dbc:	4618      	mov	r0, r3
 8012dbe:	3710      	adds	r7, #16
 8012dc0:	46bd      	mov	sp, r7
 8012dc2:	bd80      	pop	{r7, pc}
 8012dc4:	e000ed04 	.word	0xe000ed04

08012dc8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8012dc8:	b580      	push	{r7, lr}
 8012dca:	b08e      	sub	sp, #56	; 0x38
 8012dcc:	af02      	add	r7, sp, #8
 8012dce:	60f8      	str	r0, [r7, #12]
 8012dd0:	60b9      	str	r1, [r7, #8]
 8012dd2:	607a      	str	r2, [r7, #4]
 8012dd4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d10a      	bne.n	8012df2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8012ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012de0:	f383 8811 	msr	BASEPRI, r3
 8012de4:	f3bf 8f6f 	isb	sy
 8012de8:	f3bf 8f4f 	dsb	sy
 8012dec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012dee:	bf00      	nop
 8012df0:	e7fe      	b.n	8012df0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8012df2:	683b      	ldr	r3, [r7, #0]
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d10a      	bne.n	8012e0e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8012df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dfc:	f383 8811 	msr	BASEPRI, r3
 8012e00:	f3bf 8f6f 	isb	sy
 8012e04:	f3bf 8f4f 	dsb	sy
 8012e08:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012e0a:	bf00      	nop
 8012e0c:	e7fe      	b.n	8012e0c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d002      	beq.n	8012e1a <xQueueGenericCreateStatic+0x52>
 8012e14:	68bb      	ldr	r3, [r7, #8]
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d001      	beq.n	8012e1e <xQueueGenericCreateStatic+0x56>
 8012e1a:	2301      	movs	r3, #1
 8012e1c:	e000      	b.n	8012e20 <xQueueGenericCreateStatic+0x58>
 8012e1e:	2300      	movs	r3, #0
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d10a      	bne.n	8012e3a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8012e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e28:	f383 8811 	msr	BASEPRI, r3
 8012e2c:	f3bf 8f6f 	isb	sy
 8012e30:	f3bf 8f4f 	dsb	sy
 8012e34:	623b      	str	r3, [r7, #32]
}
 8012e36:	bf00      	nop
 8012e38:	e7fe      	b.n	8012e38 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d102      	bne.n	8012e46 <xQueueGenericCreateStatic+0x7e>
 8012e40:	68bb      	ldr	r3, [r7, #8]
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d101      	bne.n	8012e4a <xQueueGenericCreateStatic+0x82>
 8012e46:	2301      	movs	r3, #1
 8012e48:	e000      	b.n	8012e4c <xQueueGenericCreateStatic+0x84>
 8012e4a:	2300      	movs	r3, #0
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d10a      	bne.n	8012e66 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8012e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e54:	f383 8811 	msr	BASEPRI, r3
 8012e58:	f3bf 8f6f 	isb	sy
 8012e5c:	f3bf 8f4f 	dsb	sy
 8012e60:	61fb      	str	r3, [r7, #28]
}
 8012e62:	bf00      	nop
 8012e64:	e7fe      	b.n	8012e64 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012e66:	2348      	movs	r3, #72	; 0x48
 8012e68:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012e6a:	697b      	ldr	r3, [r7, #20]
 8012e6c:	2b48      	cmp	r3, #72	; 0x48
 8012e6e:	d00a      	beq.n	8012e86 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8012e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e74:	f383 8811 	msr	BASEPRI, r3
 8012e78:	f3bf 8f6f 	isb	sy
 8012e7c:	f3bf 8f4f 	dsb	sy
 8012e80:	61bb      	str	r3, [r7, #24]
}
 8012e82:	bf00      	nop
 8012e84:	e7fe      	b.n	8012e84 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012e86:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012e88:	683b      	ldr	r3, [r7, #0]
 8012e8a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8012e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d00d      	beq.n	8012eae <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8012e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e94:	2201      	movs	r2, #1
 8012e96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012e9a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8012e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ea0:	9300      	str	r3, [sp, #0]
 8012ea2:	4613      	mov	r3, r2
 8012ea4:	687a      	ldr	r2, [r7, #4]
 8012ea6:	68b9      	ldr	r1, [r7, #8]
 8012ea8:	68f8      	ldr	r0, [r7, #12]
 8012eaa:	f000 f845 	bl	8012f38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8012eb0:	4618      	mov	r0, r3
 8012eb2:	3730      	adds	r7, #48	; 0x30
 8012eb4:	46bd      	mov	sp, r7
 8012eb6:	bd80      	pop	{r7, pc}

08012eb8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012eb8:	b580      	push	{r7, lr}
 8012eba:	b08a      	sub	sp, #40	; 0x28
 8012ebc:	af02      	add	r7, sp, #8
 8012ebe:	60f8      	str	r0, [r7, #12]
 8012ec0:	60b9      	str	r1, [r7, #8]
 8012ec2:	4613      	mov	r3, r2
 8012ec4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012ec6:	68fb      	ldr	r3, [r7, #12]
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d10a      	bne.n	8012ee2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8012ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ed0:	f383 8811 	msr	BASEPRI, r3
 8012ed4:	f3bf 8f6f 	isb	sy
 8012ed8:	f3bf 8f4f 	dsb	sy
 8012edc:	613b      	str	r3, [r7, #16]
}
 8012ede:	bf00      	nop
 8012ee0:	e7fe      	b.n	8012ee0 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8012ee2:	68bb      	ldr	r3, [r7, #8]
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d102      	bne.n	8012eee <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8012ee8:	2300      	movs	r3, #0
 8012eea:	61fb      	str	r3, [r7, #28]
 8012eec:	e004      	b.n	8012ef8 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012eee:	68fb      	ldr	r3, [r7, #12]
 8012ef0:	68ba      	ldr	r2, [r7, #8]
 8012ef2:	fb02 f303 	mul.w	r3, r2, r3
 8012ef6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012ef8:	69fb      	ldr	r3, [r7, #28]
 8012efa:	3348      	adds	r3, #72	; 0x48
 8012efc:	4618      	mov	r0, r3
 8012efe:	f001 ff93 	bl	8014e28 <pvPortMalloc>
 8012f02:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012f04:	69bb      	ldr	r3, [r7, #24]
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d011      	beq.n	8012f2e <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8012f0a:	69bb      	ldr	r3, [r7, #24]
 8012f0c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012f0e:	697b      	ldr	r3, [r7, #20]
 8012f10:	3348      	adds	r3, #72	; 0x48
 8012f12:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012f14:	69bb      	ldr	r3, [r7, #24]
 8012f16:	2200      	movs	r2, #0
 8012f18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012f1c:	79fa      	ldrb	r2, [r7, #7]
 8012f1e:	69bb      	ldr	r3, [r7, #24]
 8012f20:	9300      	str	r3, [sp, #0]
 8012f22:	4613      	mov	r3, r2
 8012f24:	697a      	ldr	r2, [r7, #20]
 8012f26:	68b9      	ldr	r1, [r7, #8]
 8012f28:	68f8      	ldr	r0, [r7, #12]
 8012f2a:	f000 f805 	bl	8012f38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012f2e:	69bb      	ldr	r3, [r7, #24]
	}
 8012f30:	4618      	mov	r0, r3
 8012f32:	3720      	adds	r7, #32
 8012f34:	46bd      	mov	sp, r7
 8012f36:	bd80      	pop	{r7, pc}

08012f38 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012f38:	b580      	push	{r7, lr}
 8012f3a:	b084      	sub	sp, #16
 8012f3c:	af00      	add	r7, sp, #0
 8012f3e:	60f8      	str	r0, [r7, #12]
 8012f40:	60b9      	str	r1, [r7, #8]
 8012f42:	607a      	str	r2, [r7, #4]
 8012f44:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8012f46:	68bb      	ldr	r3, [r7, #8]
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d103      	bne.n	8012f54 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012f4c:	69bb      	ldr	r3, [r7, #24]
 8012f4e:	69ba      	ldr	r2, [r7, #24]
 8012f50:	601a      	str	r2, [r3, #0]
 8012f52:	e002      	b.n	8012f5a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012f54:	69bb      	ldr	r3, [r7, #24]
 8012f56:	687a      	ldr	r2, [r7, #4]
 8012f58:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8012f5a:	69bb      	ldr	r3, [r7, #24]
 8012f5c:	68fa      	ldr	r2, [r7, #12]
 8012f5e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012f60:	69bb      	ldr	r3, [r7, #24]
 8012f62:	68ba      	ldr	r2, [r7, #8]
 8012f64:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012f66:	2101      	movs	r1, #1
 8012f68:	69b8      	ldr	r0, [r7, #24]
 8012f6a:	f7ff fec5 	bl	8012cf8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8012f6e:	bf00      	nop
 8012f70:	3710      	adds	r7, #16
 8012f72:	46bd      	mov	sp, r7
 8012f74:	bd80      	pop	{r7, pc}

08012f76 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8012f76:	b580      	push	{r7, lr}
 8012f78:	b082      	sub	sp, #8
 8012f7a:	af00      	add	r7, sp, #0
 8012f7c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d00e      	beq.n	8012fa2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	2200      	movs	r2, #0
 8012f88:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	2200      	movs	r2, #0
 8012f8e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	2200      	movs	r2, #0
 8012f94:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8012f96:	2300      	movs	r3, #0
 8012f98:	2200      	movs	r2, #0
 8012f9a:	2100      	movs	r1, #0
 8012f9c:	6878      	ldr	r0, [r7, #4]
 8012f9e:	f000 f837 	bl	8013010 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8012fa2:	bf00      	nop
 8012fa4:	3708      	adds	r7, #8
 8012fa6:	46bd      	mov	sp, r7
 8012fa8:	bd80      	pop	{r7, pc}

08012faa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8012faa:	b580      	push	{r7, lr}
 8012fac:	b086      	sub	sp, #24
 8012fae:	af00      	add	r7, sp, #0
 8012fb0:	4603      	mov	r3, r0
 8012fb2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8012fb4:	2301      	movs	r3, #1
 8012fb6:	617b      	str	r3, [r7, #20]
 8012fb8:	2300      	movs	r3, #0
 8012fba:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8012fbc:	79fb      	ldrb	r3, [r7, #7]
 8012fbe:	461a      	mov	r2, r3
 8012fc0:	6939      	ldr	r1, [r7, #16]
 8012fc2:	6978      	ldr	r0, [r7, #20]
 8012fc4:	f7ff ff78 	bl	8012eb8 <xQueueGenericCreate>
 8012fc8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8012fca:	68f8      	ldr	r0, [r7, #12]
 8012fcc:	f7ff ffd3 	bl	8012f76 <prvInitialiseMutex>

		return xNewQueue;
 8012fd0:	68fb      	ldr	r3, [r7, #12]
	}
 8012fd2:	4618      	mov	r0, r3
 8012fd4:	3718      	adds	r7, #24
 8012fd6:	46bd      	mov	sp, r7
 8012fd8:	bd80      	pop	{r7, pc}

08012fda <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8012fda:	b580      	push	{r7, lr}
 8012fdc:	b088      	sub	sp, #32
 8012fde:	af02      	add	r7, sp, #8
 8012fe0:	4603      	mov	r3, r0
 8012fe2:	6039      	str	r1, [r7, #0]
 8012fe4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8012fe6:	2301      	movs	r3, #1
 8012fe8:	617b      	str	r3, [r7, #20]
 8012fea:	2300      	movs	r3, #0
 8012fec:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8012fee:	79fb      	ldrb	r3, [r7, #7]
 8012ff0:	9300      	str	r3, [sp, #0]
 8012ff2:	683b      	ldr	r3, [r7, #0]
 8012ff4:	2200      	movs	r2, #0
 8012ff6:	6939      	ldr	r1, [r7, #16]
 8012ff8:	6978      	ldr	r0, [r7, #20]
 8012ffa:	f7ff fee5 	bl	8012dc8 <xQueueGenericCreateStatic>
 8012ffe:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8013000:	68f8      	ldr	r0, [r7, #12]
 8013002:	f7ff ffb8 	bl	8012f76 <prvInitialiseMutex>

		return xNewQueue;
 8013006:	68fb      	ldr	r3, [r7, #12]
	}
 8013008:	4618      	mov	r0, r3
 801300a:	3718      	adds	r7, #24
 801300c:	46bd      	mov	sp, r7
 801300e:	bd80      	pop	{r7, pc}

08013010 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8013010:	b580      	push	{r7, lr}
 8013012:	b08e      	sub	sp, #56	; 0x38
 8013014:	af00      	add	r7, sp, #0
 8013016:	60f8      	str	r0, [r7, #12]
 8013018:	60b9      	str	r1, [r7, #8]
 801301a:	607a      	str	r2, [r7, #4]
 801301c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801301e:	2300      	movs	r3, #0
 8013020:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013022:	68fb      	ldr	r3, [r7, #12]
 8013024:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013028:	2b00      	cmp	r3, #0
 801302a:	d10a      	bne.n	8013042 <xQueueGenericSend+0x32>
	__asm volatile
 801302c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013030:	f383 8811 	msr	BASEPRI, r3
 8013034:	f3bf 8f6f 	isb	sy
 8013038:	f3bf 8f4f 	dsb	sy
 801303c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801303e:	bf00      	nop
 8013040:	e7fe      	b.n	8013040 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013042:	68bb      	ldr	r3, [r7, #8]
 8013044:	2b00      	cmp	r3, #0
 8013046:	d103      	bne.n	8013050 <xQueueGenericSend+0x40>
 8013048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801304a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801304c:	2b00      	cmp	r3, #0
 801304e:	d101      	bne.n	8013054 <xQueueGenericSend+0x44>
 8013050:	2301      	movs	r3, #1
 8013052:	e000      	b.n	8013056 <xQueueGenericSend+0x46>
 8013054:	2300      	movs	r3, #0
 8013056:	2b00      	cmp	r3, #0
 8013058:	d10a      	bne.n	8013070 <xQueueGenericSend+0x60>
	__asm volatile
 801305a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801305e:	f383 8811 	msr	BASEPRI, r3
 8013062:	f3bf 8f6f 	isb	sy
 8013066:	f3bf 8f4f 	dsb	sy
 801306a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801306c:	bf00      	nop
 801306e:	e7fe      	b.n	801306e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013070:	683b      	ldr	r3, [r7, #0]
 8013072:	2b02      	cmp	r3, #2
 8013074:	d103      	bne.n	801307e <xQueueGenericSend+0x6e>
 8013076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801307a:	2b01      	cmp	r3, #1
 801307c:	d101      	bne.n	8013082 <xQueueGenericSend+0x72>
 801307e:	2301      	movs	r3, #1
 8013080:	e000      	b.n	8013084 <xQueueGenericSend+0x74>
 8013082:	2300      	movs	r3, #0
 8013084:	2b00      	cmp	r3, #0
 8013086:	d10a      	bne.n	801309e <xQueueGenericSend+0x8e>
	__asm volatile
 8013088:	f04f 0350 	mov.w	r3, #80	; 0x50
 801308c:	f383 8811 	msr	BASEPRI, r3
 8013090:	f3bf 8f6f 	isb	sy
 8013094:	f3bf 8f4f 	dsb	sy
 8013098:	623b      	str	r3, [r7, #32]
}
 801309a:	bf00      	nop
 801309c:	e7fe      	b.n	801309c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801309e:	f001 f983 	bl	80143a8 <xTaskGetSchedulerState>
 80130a2:	4603      	mov	r3, r0
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d102      	bne.n	80130ae <xQueueGenericSend+0x9e>
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d101      	bne.n	80130b2 <xQueueGenericSend+0xa2>
 80130ae:	2301      	movs	r3, #1
 80130b0:	e000      	b.n	80130b4 <xQueueGenericSend+0xa4>
 80130b2:	2300      	movs	r3, #0
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d10a      	bne.n	80130ce <xQueueGenericSend+0xbe>
	__asm volatile
 80130b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130bc:	f383 8811 	msr	BASEPRI, r3
 80130c0:	f3bf 8f6f 	isb	sy
 80130c4:	f3bf 8f4f 	dsb	sy
 80130c8:	61fb      	str	r3, [r7, #28]
}
 80130ca:	bf00      	nop
 80130cc:	e7fe      	b.n	80130cc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80130ce:	f001 fd89 	bl	8014be4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80130d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80130d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80130da:	429a      	cmp	r2, r3
 80130dc:	d302      	bcc.n	80130e4 <xQueueGenericSend+0xd4>
 80130de:	683b      	ldr	r3, [r7, #0]
 80130e0:	2b02      	cmp	r3, #2
 80130e2:	d129      	bne.n	8013138 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80130e4:	683a      	ldr	r2, [r7, #0]
 80130e6:	68b9      	ldr	r1, [r7, #8]
 80130e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80130ea:	f000 fa87 	bl	80135fc <prvCopyDataToQueue>
 80130ee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80130f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d010      	beq.n	801311a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80130f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130fa:	3324      	adds	r3, #36	; 0x24
 80130fc:	4618      	mov	r0, r3
 80130fe:	f000 ff97 	bl	8014030 <xTaskRemoveFromEventList>
 8013102:	4603      	mov	r3, r0
 8013104:	2b00      	cmp	r3, #0
 8013106:	d013      	beq.n	8013130 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8013108:	4b3f      	ldr	r3, [pc, #252]	; (8013208 <xQueueGenericSend+0x1f8>)
 801310a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801310e:	601a      	str	r2, [r3, #0]
 8013110:	f3bf 8f4f 	dsb	sy
 8013114:	f3bf 8f6f 	isb	sy
 8013118:	e00a      	b.n	8013130 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801311a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801311c:	2b00      	cmp	r3, #0
 801311e:	d007      	beq.n	8013130 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8013120:	4b39      	ldr	r3, [pc, #228]	; (8013208 <xQueueGenericSend+0x1f8>)
 8013122:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013126:	601a      	str	r2, [r3, #0]
 8013128:	f3bf 8f4f 	dsb	sy
 801312c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8013130:	f001 fd88 	bl	8014c44 <vPortExitCritical>
				return pdPASS;
 8013134:	2301      	movs	r3, #1
 8013136:	e063      	b.n	8013200 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	2b00      	cmp	r3, #0
 801313c:	d103      	bne.n	8013146 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801313e:	f001 fd81 	bl	8014c44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8013142:	2300      	movs	r3, #0
 8013144:	e05c      	b.n	8013200 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013148:	2b00      	cmp	r3, #0
 801314a:	d106      	bne.n	801315a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801314c:	f107 0314 	add.w	r3, r7, #20
 8013150:	4618      	mov	r0, r3
 8013152:	f000 ffcf 	bl	80140f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013156:	2301      	movs	r3, #1
 8013158:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801315a:	f001 fd73 	bl	8014c44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801315e:	f000 fd85 	bl	8013c6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013162:	f001 fd3f 	bl	8014be4 <vPortEnterCritical>
 8013166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013168:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801316c:	b25b      	sxtb	r3, r3
 801316e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013172:	d103      	bne.n	801317c <xQueueGenericSend+0x16c>
 8013174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013176:	2200      	movs	r2, #0
 8013178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801317c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801317e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013182:	b25b      	sxtb	r3, r3
 8013184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013188:	d103      	bne.n	8013192 <xQueueGenericSend+0x182>
 801318a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801318c:	2200      	movs	r2, #0
 801318e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013192:	f001 fd57 	bl	8014c44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013196:	1d3a      	adds	r2, r7, #4
 8013198:	f107 0314 	add.w	r3, r7, #20
 801319c:	4611      	mov	r1, r2
 801319e:	4618      	mov	r0, r3
 80131a0:	f000 ffbe 	bl	8014120 <xTaskCheckForTimeOut>
 80131a4:	4603      	mov	r3, r0
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d124      	bne.n	80131f4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80131aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80131ac:	f000 fb1e 	bl	80137ec <prvIsQueueFull>
 80131b0:	4603      	mov	r3, r0
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d018      	beq.n	80131e8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80131b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131b8:	3310      	adds	r3, #16
 80131ba:	687a      	ldr	r2, [r7, #4]
 80131bc:	4611      	mov	r1, r2
 80131be:	4618      	mov	r0, r3
 80131c0:	f000 ff12 	bl	8013fe8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80131c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80131c6:	f000 faa9 	bl	801371c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80131ca:	f000 fd5d 	bl	8013c88 <xTaskResumeAll>
 80131ce:	4603      	mov	r3, r0
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	f47f af7c 	bne.w	80130ce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80131d6:	4b0c      	ldr	r3, [pc, #48]	; (8013208 <xQueueGenericSend+0x1f8>)
 80131d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80131dc:	601a      	str	r2, [r3, #0]
 80131de:	f3bf 8f4f 	dsb	sy
 80131e2:	f3bf 8f6f 	isb	sy
 80131e6:	e772      	b.n	80130ce <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80131e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80131ea:	f000 fa97 	bl	801371c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80131ee:	f000 fd4b 	bl	8013c88 <xTaskResumeAll>
 80131f2:	e76c      	b.n	80130ce <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80131f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80131f6:	f000 fa91 	bl	801371c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80131fa:	f000 fd45 	bl	8013c88 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80131fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8013200:	4618      	mov	r0, r3
 8013202:	3738      	adds	r7, #56	; 0x38
 8013204:	46bd      	mov	sp, r7
 8013206:	bd80      	pop	{r7, pc}
 8013208:	e000ed04 	.word	0xe000ed04

0801320c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801320c:	b580      	push	{r7, lr}
 801320e:	b08e      	sub	sp, #56	; 0x38
 8013210:	af00      	add	r7, sp, #0
 8013212:	60f8      	str	r0, [r7, #12]
 8013214:	60b9      	str	r1, [r7, #8]
 8013216:	607a      	str	r2, [r7, #4]
 8013218:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801321a:	68fb      	ldr	r3, [r7, #12]
 801321c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801321e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013220:	2b00      	cmp	r3, #0
 8013222:	d10a      	bne.n	801323a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8013224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013228:	f383 8811 	msr	BASEPRI, r3
 801322c:	f3bf 8f6f 	isb	sy
 8013230:	f3bf 8f4f 	dsb	sy
 8013234:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013236:	bf00      	nop
 8013238:	e7fe      	b.n	8013238 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801323a:	68bb      	ldr	r3, [r7, #8]
 801323c:	2b00      	cmp	r3, #0
 801323e:	d103      	bne.n	8013248 <xQueueGenericSendFromISR+0x3c>
 8013240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013244:	2b00      	cmp	r3, #0
 8013246:	d101      	bne.n	801324c <xQueueGenericSendFromISR+0x40>
 8013248:	2301      	movs	r3, #1
 801324a:	e000      	b.n	801324e <xQueueGenericSendFromISR+0x42>
 801324c:	2300      	movs	r3, #0
 801324e:	2b00      	cmp	r3, #0
 8013250:	d10a      	bne.n	8013268 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8013252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013256:	f383 8811 	msr	BASEPRI, r3
 801325a:	f3bf 8f6f 	isb	sy
 801325e:	f3bf 8f4f 	dsb	sy
 8013262:	623b      	str	r3, [r7, #32]
}
 8013264:	bf00      	nop
 8013266:	e7fe      	b.n	8013266 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013268:	683b      	ldr	r3, [r7, #0]
 801326a:	2b02      	cmp	r3, #2
 801326c:	d103      	bne.n	8013276 <xQueueGenericSendFromISR+0x6a>
 801326e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013272:	2b01      	cmp	r3, #1
 8013274:	d101      	bne.n	801327a <xQueueGenericSendFromISR+0x6e>
 8013276:	2301      	movs	r3, #1
 8013278:	e000      	b.n	801327c <xQueueGenericSendFromISR+0x70>
 801327a:	2300      	movs	r3, #0
 801327c:	2b00      	cmp	r3, #0
 801327e:	d10a      	bne.n	8013296 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8013280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013284:	f383 8811 	msr	BASEPRI, r3
 8013288:	f3bf 8f6f 	isb	sy
 801328c:	f3bf 8f4f 	dsb	sy
 8013290:	61fb      	str	r3, [r7, #28]
}
 8013292:	bf00      	nop
 8013294:	e7fe      	b.n	8013294 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013296:	f001 fd87 	bl	8014da8 <vPortValidateInterruptPriority>
	__asm volatile
 801329a:	f3ef 8211 	mrs	r2, BASEPRI
 801329e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132a2:	f383 8811 	msr	BASEPRI, r3
 80132a6:	f3bf 8f6f 	isb	sy
 80132aa:	f3bf 8f4f 	dsb	sy
 80132ae:	61ba      	str	r2, [r7, #24]
 80132b0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80132b2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80132b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80132b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80132ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80132be:	429a      	cmp	r2, r3
 80132c0:	d302      	bcc.n	80132c8 <xQueueGenericSendFromISR+0xbc>
 80132c2:	683b      	ldr	r3, [r7, #0]
 80132c4:	2b02      	cmp	r3, #2
 80132c6:	d12c      	bne.n	8013322 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80132c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80132ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80132d2:	683a      	ldr	r2, [r7, #0]
 80132d4:	68b9      	ldr	r1, [r7, #8]
 80132d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80132d8:	f000 f990 	bl	80135fc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80132dc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80132e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132e4:	d112      	bne.n	801330c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80132e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	d016      	beq.n	801331c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80132ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132f0:	3324      	adds	r3, #36	; 0x24
 80132f2:	4618      	mov	r0, r3
 80132f4:	f000 fe9c 	bl	8014030 <xTaskRemoveFromEventList>
 80132f8:	4603      	mov	r3, r0
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d00e      	beq.n	801331c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	2b00      	cmp	r3, #0
 8013302:	d00b      	beq.n	801331c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	2201      	movs	r2, #1
 8013308:	601a      	str	r2, [r3, #0]
 801330a:	e007      	b.n	801331c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801330c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8013310:	3301      	adds	r3, #1
 8013312:	b2db      	uxtb	r3, r3
 8013314:	b25a      	sxtb	r2, r3
 8013316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013318:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801331c:	2301      	movs	r3, #1
 801331e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8013320:	e001      	b.n	8013326 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013322:	2300      	movs	r3, #0
 8013324:	637b      	str	r3, [r7, #52]	; 0x34
 8013326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013328:	613b      	str	r3, [r7, #16]
	__asm volatile
 801332a:	693b      	ldr	r3, [r7, #16]
 801332c:	f383 8811 	msr	BASEPRI, r3
}
 8013330:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013334:	4618      	mov	r0, r3
 8013336:	3738      	adds	r7, #56	; 0x38
 8013338:	46bd      	mov	sp, r7
 801333a:	bd80      	pop	{r7, pc}

0801333c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801333c:	b580      	push	{r7, lr}
 801333e:	b08c      	sub	sp, #48	; 0x30
 8013340:	af00      	add	r7, sp, #0
 8013342:	60f8      	str	r0, [r7, #12]
 8013344:	60b9      	str	r1, [r7, #8]
 8013346:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013348:	2300      	movs	r3, #0
 801334a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013352:	2b00      	cmp	r3, #0
 8013354:	d10a      	bne.n	801336c <xQueueReceive+0x30>
	__asm volatile
 8013356:	f04f 0350 	mov.w	r3, #80	; 0x50
 801335a:	f383 8811 	msr	BASEPRI, r3
 801335e:	f3bf 8f6f 	isb	sy
 8013362:	f3bf 8f4f 	dsb	sy
 8013366:	623b      	str	r3, [r7, #32]
}
 8013368:	bf00      	nop
 801336a:	e7fe      	b.n	801336a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801336c:	68bb      	ldr	r3, [r7, #8]
 801336e:	2b00      	cmp	r3, #0
 8013370:	d103      	bne.n	801337a <xQueueReceive+0x3e>
 8013372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013376:	2b00      	cmp	r3, #0
 8013378:	d101      	bne.n	801337e <xQueueReceive+0x42>
 801337a:	2301      	movs	r3, #1
 801337c:	e000      	b.n	8013380 <xQueueReceive+0x44>
 801337e:	2300      	movs	r3, #0
 8013380:	2b00      	cmp	r3, #0
 8013382:	d10a      	bne.n	801339a <xQueueReceive+0x5e>
	__asm volatile
 8013384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013388:	f383 8811 	msr	BASEPRI, r3
 801338c:	f3bf 8f6f 	isb	sy
 8013390:	f3bf 8f4f 	dsb	sy
 8013394:	61fb      	str	r3, [r7, #28]
}
 8013396:	bf00      	nop
 8013398:	e7fe      	b.n	8013398 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801339a:	f001 f805 	bl	80143a8 <xTaskGetSchedulerState>
 801339e:	4603      	mov	r3, r0
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d102      	bne.n	80133aa <xQueueReceive+0x6e>
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d101      	bne.n	80133ae <xQueueReceive+0x72>
 80133aa:	2301      	movs	r3, #1
 80133ac:	e000      	b.n	80133b0 <xQueueReceive+0x74>
 80133ae:	2300      	movs	r3, #0
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d10a      	bne.n	80133ca <xQueueReceive+0x8e>
	__asm volatile
 80133b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133b8:	f383 8811 	msr	BASEPRI, r3
 80133bc:	f3bf 8f6f 	isb	sy
 80133c0:	f3bf 8f4f 	dsb	sy
 80133c4:	61bb      	str	r3, [r7, #24]
}
 80133c6:	bf00      	nop
 80133c8:	e7fe      	b.n	80133c8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80133ca:	f001 fc0b 	bl	8014be4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80133ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80133d2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80133d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d01f      	beq.n	801341a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80133da:	68b9      	ldr	r1, [r7, #8]
 80133dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80133de:	f000 f977 	bl	80136d0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80133e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133e4:	1e5a      	subs	r2, r3, #1
 80133e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133e8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80133ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133ec:	691b      	ldr	r3, [r3, #16]
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d00f      	beq.n	8013412 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80133f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133f4:	3310      	adds	r3, #16
 80133f6:	4618      	mov	r0, r3
 80133f8:	f000 fe1a 	bl	8014030 <xTaskRemoveFromEventList>
 80133fc:	4603      	mov	r3, r0
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d007      	beq.n	8013412 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013402:	4b3d      	ldr	r3, [pc, #244]	; (80134f8 <xQueueReceive+0x1bc>)
 8013404:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013408:	601a      	str	r2, [r3, #0]
 801340a:	f3bf 8f4f 	dsb	sy
 801340e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013412:	f001 fc17 	bl	8014c44 <vPortExitCritical>
				return pdPASS;
 8013416:	2301      	movs	r3, #1
 8013418:	e069      	b.n	80134ee <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	2b00      	cmp	r3, #0
 801341e:	d103      	bne.n	8013428 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013420:	f001 fc10 	bl	8014c44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013424:	2300      	movs	r3, #0
 8013426:	e062      	b.n	80134ee <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801342a:	2b00      	cmp	r3, #0
 801342c:	d106      	bne.n	801343c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801342e:	f107 0310 	add.w	r3, r7, #16
 8013432:	4618      	mov	r0, r3
 8013434:	f000 fe5e 	bl	80140f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013438:	2301      	movs	r3, #1
 801343a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801343c:	f001 fc02 	bl	8014c44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013440:	f000 fc14 	bl	8013c6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013444:	f001 fbce 	bl	8014be4 <vPortEnterCritical>
 8013448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801344a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801344e:	b25b      	sxtb	r3, r3
 8013450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013454:	d103      	bne.n	801345e <xQueueReceive+0x122>
 8013456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013458:	2200      	movs	r2, #0
 801345a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801345e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013460:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013464:	b25b      	sxtb	r3, r3
 8013466:	f1b3 3fff 	cmp.w	r3, #4294967295
 801346a:	d103      	bne.n	8013474 <xQueueReceive+0x138>
 801346c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801346e:	2200      	movs	r2, #0
 8013470:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013474:	f001 fbe6 	bl	8014c44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013478:	1d3a      	adds	r2, r7, #4
 801347a:	f107 0310 	add.w	r3, r7, #16
 801347e:	4611      	mov	r1, r2
 8013480:	4618      	mov	r0, r3
 8013482:	f000 fe4d 	bl	8014120 <xTaskCheckForTimeOut>
 8013486:	4603      	mov	r3, r0
 8013488:	2b00      	cmp	r3, #0
 801348a:	d123      	bne.n	80134d4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801348c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801348e:	f000 f997 	bl	80137c0 <prvIsQueueEmpty>
 8013492:	4603      	mov	r3, r0
 8013494:	2b00      	cmp	r3, #0
 8013496:	d017      	beq.n	80134c8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801349a:	3324      	adds	r3, #36	; 0x24
 801349c:	687a      	ldr	r2, [r7, #4]
 801349e:	4611      	mov	r1, r2
 80134a0:	4618      	mov	r0, r3
 80134a2:	f000 fda1 	bl	8013fe8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80134a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80134a8:	f000 f938 	bl	801371c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80134ac:	f000 fbec 	bl	8013c88 <xTaskResumeAll>
 80134b0:	4603      	mov	r3, r0
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d189      	bne.n	80133ca <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80134b6:	4b10      	ldr	r3, [pc, #64]	; (80134f8 <xQueueReceive+0x1bc>)
 80134b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80134bc:	601a      	str	r2, [r3, #0]
 80134be:	f3bf 8f4f 	dsb	sy
 80134c2:	f3bf 8f6f 	isb	sy
 80134c6:	e780      	b.n	80133ca <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80134c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80134ca:	f000 f927 	bl	801371c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80134ce:	f000 fbdb 	bl	8013c88 <xTaskResumeAll>
 80134d2:	e77a      	b.n	80133ca <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80134d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80134d6:	f000 f921 	bl	801371c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80134da:	f000 fbd5 	bl	8013c88 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80134de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80134e0:	f000 f96e 	bl	80137c0 <prvIsQueueEmpty>
 80134e4:	4603      	mov	r3, r0
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	f43f af6f 	beq.w	80133ca <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80134ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80134ee:	4618      	mov	r0, r3
 80134f0:	3730      	adds	r7, #48	; 0x30
 80134f2:	46bd      	mov	sp, r7
 80134f4:	bd80      	pop	{r7, pc}
 80134f6:	bf00      	nop
 80134f8:	e000ed04 	.word	0xe000ed04

080134fc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80134fc:	b580      	push	{r7, lr}
 80134fe:	b08e      	sub	sp, #56	; 0x38
 8013500:	af00      	add	r7, sp, #0
 8013502:	60f8      	str	r0, [r7, #12]
 8013504:	60b9      	str	r1, [r7, #8]
 8013506:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801350c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801350e:	2b00      	cmp	r3, #0
 8013510:	d10a      	bne.n	8013528 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8013512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013516:	f383 8811 	msr	BASEPRI, r3
 801351a:	f3bf 8f6f 	isb	sy
 801351e:	f3bf 8f4f 	dsb	sy
 8013522:	623b      	str	r3, [r7, #32]
}
 8013524:	bf00      	nop
 8013526:	e7fe      	b.n	8013526 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013528:	68bb      	ldr	r3, [r7, #8]
 801352a:	2b00      	cmp	r3, #0
 801352c:	d103      	bne.n	8013536 <xQueueReceiveFromISR+0x3a>
 801352e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013532:	2b00      	cmp	r3, #0
 8013534:	d101      	bne.n	801353a <xQueueReceiveFromISR+0x3e>
 8013536:	2301      	movs	r3, #1
 8013538:	e000      	b.n	801353c <xQueueReceiveFromISR+0x40>
 801353a:	2300      	movs	r3, #0
 801353c:	2b00      	cmp	r3, #0
 801353e:	d10a      	bne.n	8013556 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8013540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013544:	f383 8811 	msr	BASEPRI, r3
 8013548:	f3bf 8f6f 	isb	sy
 801354c:	f3bf 8f4f 	dsb	sy
 8013550:	61fb      	str	r3, [r7, #28]
}
 8013552:	bf00      	nop
 8013554:	e7fe      	b.n	8013554 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013556:	f001 fc27 	bl	8014da8 <vPortValidateInterruptPriority>
	__asm volatile
 801355a:	f3ef 8211 	mrs	r2, BASEPRI
 801355e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013562:	f383 8811 	msr	BASEPRI, r3
 8013566:	f3bf 8f6f 	isb	sy
 801356a:	f3bf 8f4f 	dsb	sy
 801356e:	61ba      	str	r2, [r7, #24]
 8013570:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013572:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013574:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801357a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801357c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801357e:	2b00      	cmp	r3, #0
 8013580:	d02f      	beq.n	80135e2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8013582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013584:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013588:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801358c:	68b9      	ldr	r1, [r7, #8]
 801358e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013590:	f000 f89e 	bl	80136d0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013596:	1e5a      	subs	r2, r3, #1
 8013598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801359a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801359c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80135a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135a4:	d112      	bne.n	80135cc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80135a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135a8:	691b      	ldr	r3, [r3, #16]
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	d016      	beq.n	80135dc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80135ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135b0:	3310      	adds	r3, #16
 80135b2:	4618      	mov	r0, r3
 80135b4:	f000 fd3c 	bl	8014030 <xTaskRemoveFromEventList>
 80135b8:	4603      	mov	r3, r0
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d00e      	beq.n	80135dc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d00b      	beq.n	80135dc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	2201      	movs	r2, #1
 80135c8:	601a      	str	r2, [r3, #0]
 80135ca:	e007      	b.n	80135dc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80135cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80135d0:	3301      	adds	r3, #1
 80135d2:	b2db      	uxtb	r3, r3
 80135d4:	b25a      	sxtb	r2, r3
 80135d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80135dc:	2301      	movs	r3, #1
 80135de:	637b      	str	r3, [r7, #52]	; 0x34
 80135e0:	e001      	b.n	80135e6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80135e2:	2300      	movs	r3, #0
 80135e4:	637b      	str	r3, [r7, #52]	; 0x34
 80135e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135e8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80135ea:	693b      	ldr	r3, [r7, #16]
 80135ec:	f383 8811 	msr	BASEPRI, r3
}
 80135f0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80135f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80135f4:	4618      	mov	r0, r3
 80135f6:	3738      	adds	r7, #56	; 0x38
 80135f8:	46bd      	mov	sp, r7
 80135fa:	bd80      	pop	{r7, pc}

080135fc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80135fc:	b580      	push	{r7, lr}
 80135fe:	b086      	sub	sp, #24
 8013600:	af00      	add	r7, sp, #0
 8013602:	60f8      	str	r0, [r7, #12]
 8013604:	60b9      	str	r1, [r7, #8]
 8013606:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013608:	2300      	movs	r3, #0
 801360a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801360c:	68fb      	ldr	r3, [r7, #12]
 801360e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013610:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013612:	68fb      	ldr	r3, [r7, #12]
 8013614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013616:	2b00      	cmp	r3, #0
 8013618:	d10d      	bne.n	8013636 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801361a:	68fb      	ldr	r3, [r7, #12]
 801361c:	681b      	ldr	r3, [r3, #0]
 801361e:	2b00      	cmp	r3, #0
 8013620:	d14d      	bne.n	80136be <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013622:	68fb      	ldr	r3, [r7, #12]
 8013624:	689b      	ldr	r3, [r3, #8]
 8013626:	4618      	mov	r0, r3
 8013628:	f000 fedc 	bl	80143e4 <xTaskPriorityDisinherit>
 801362c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801362e:	68fb      	ldr	r3, [r7, #12]
 8013630:	2200      	movs	r2, #0
 8013632:	609a      	str	r2, [r3, #8]
 8013634:	e043      	b.n	80136be <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	2b00      	cmp	r3, #0
 801363a:	d119      	bne.n	8013670 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801363c:	68fb      	ldr	r3, [r7, #12]
 801363e:	6858      	ldr	r0, [r3, #4]
 8013640:	68fb      	ldr	r3, [r7, #12]
 8013642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013644:	461a      	mov	r2, r3
 8013646:	68b9      	ldr	r1, [r7, #8]
 8013648:	f002 fb52 	bl	8015cf0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801364c:	68fb      	ldr	r3, [r7, #12]
 801364e:	685a      	ldr	r2, [r3, #4]
 8013650:	68fb      	ldr	r3, [r7, #12]
 8013652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013654:	441a      	add	r2, r3
 8013656:	68fb      	ldr	r3, [r7, #12]
 8013658:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801365a:	68fb      	ldr	r3, [r7, #12]
 801365c:	685a      	ldr	r2, [r3, #4]
 801365e:	68fb      	ldr	r3, [r7, #12]
 8013660:	689b      	ldr	r3, [r3, #8]
 8013662:	429a      	cmp	r2, r3
 8013664:	d32b      	bcc.n	80136be <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013666:	68fb      	ldr	r3, [r7, #12]
 8013668:	681a      	ldr	r2, [r3, #0]
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	605a      	str	r2, [r3, #4]
 801366e:	e026      	b.n	80136be <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	68d8      	ldr	r0, [r3, #12]
 8013674:	68fb      	ldr	r3, [r7, #12]
 8013676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013678:	461a      	mov	r2, r3
 801367a:	68b9      	ldr	r1, [r7, #8]
 801367c:	f002 fb38 	bl	8015cf0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013680:	68fb      	ldr	r3, [r7, #12]
 8013682:	68da      	ldr	r2, [r3, #12]
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013688:	425b      	negs	r3, r3
 801368a:	441a      	add	r2, r3
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	68da      	ldr	r2, [r3, #12]
 8013694:	68fb      	ldr	r3, [r7, #12]
 8013696:	681b      	ldr	r3, [r3, #0]
 8013698:	429a      	cmp	r2, r3
 801369a:	d207      	bcs.n	80136ac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801369c:	68fb      	ldr	r3, [r7, #12]
 801369e:	689a      	ldr	r2, [r3, #8]
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80136a4:	425b      	negs	r3, r3
 80136a6:	441a      	add	r2, r3
 80136a8:	68fb      	ldr	r3, [r7, #12]
 80136aa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	2b02      	cmp	r3, #2
 80136b0:	d105      	bne.n	80136be <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80136b2:	693b      	ldr	r3, [r7, #16]
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d002      	beq.n	80136be <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80136b8:	693b      	ldr	r3, [r7, #16]
 80136ba:	3b01      	subs	r3, #1
 80136bc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80136be:	693b      	ldr	r3, [r7, #16]
 80136c0:	1c5a      	adds	r2, r3, #1
 80136c2:	68fb      	ldr	r3, [r7, #12]
 80136c4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80136c6:	697b      	ldr	r3, [r7, #20]
}
 80136c8:	4618      	mov	r0, r3
 80136ca:	3718      	adds	r7, #24
 80136cc:	46bd      	mov	sp, r7
 80136ce:	bd80      	pop	{r7, pc}

080136d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80136d0:	b580      	push	{r7, lr}
 80136d2:	b082      	sub	sp, #8
 80136d4:	af00      	add	r7, sp, #0
 80136d6:	6078      	str	r0, [r7, #4]
 80136d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d018      	beq.n	8013714 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	68da      	ldr	r2, [r3, #12]
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80136ea:	441a      	add	r2, r3
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	68da      	ldr	r2, [r3, #12]
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	689b      	ldr	r3, [r3, #8]
 80136f8:	429a      	cmp	r2, r3
 80136fa:	d303      	bcc.n	8013704 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	681a      	ldr	r2, [r3, #0]
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	68d9      	ldr	r1, [r3, #12]
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801370c:	461a      	mov	r2, r3
 801370e:	6838      	ldr	r0, [r7, #0]
 8013710:	f002 faee 	bl	8015cf0 <memcpy>
	}
}
 8013714:	bf00      	nop
 8013716:	3708      	adds	r7, #8
 8013718:	46bd      	mov	sp, r7
 801371a:	bd80      	pop	{r7, pc}

0801371c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801371c:	b580      	push	{r7, lr}
 801371e:	b084      	sub	sp, #16
 8013720:	af00      	add	r7, sp, #0
 8013722:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013724:	f001 fa5e 	bl	8014be4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801372e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013730:	e011      	b.n	8013756 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013736:	2b00      	cmp	r3, #0
 8013738:	d012      	beq.n	8013760 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	3324      	adds	r3, #36	; 0x24
 801373e:	4618      	mov	r0, r3
 8013740:	f000 fc76 	bl	8014030 <xTaskRemoveFromEventList>
 8013744:	4603      	mov	r3, r0
 8013746:	2b00      	cmp	r3, #0
 8013748:	d001      	beq.n	801374e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801374a:	f000 fd4b 	bl	80141e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801374e:	7bfb      	ldrb	r3, [r7, #15]
 8013750:	3b01      	subs	r3, #1
 8013752:	b2db      	uxtb	r3, r3
 8013754:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801375a:	2b00      	cmp	r3, #0
 801375c:	dce9      	bgt.n	8013732 <prvUnlockQueue+0x16>
 801375e:	e000      	b.n	8013762 <prvUnlockQueue+0x46>
					break;
 8013760:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	22ff      	movs	r2, #255	; 0xff
 8013766:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801376a:	f001 fa6b 	bl	8014c44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801376e:	f001 fa39 	bl	8014be4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013778:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801377a:	e011      	b.n	80137a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	691b      	ldr	r3, [r3, #16]
 8013780:	2b00      	cmp	r3, #0
 8013782:	d012      	beq.n	80137aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	3310      	adds	r3, #16
 8013788:	4618      	mov	r0, r3
 801378a:	f000 fc51 	bl	8014030 <xTaskRemoveFromEventList>
 801378e:	4603      	mov	r3, r0
 8013790:	2b00      	cmp	r3, #0
 8013792:	d001      	beq.n	8013798 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013794:	f000 fd26 	bl	80141e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013798:	7bbb      	ldrb	r3, [r7, #14]
 801379a:	3b01      	subs	r3, #1
 801379c:	b2db      	uxtb	r3, r3
 801379e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80137a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	dce9      	bgt.n	801377c <prvUnlockQueue+0x60>
 80137a8:	e000      	b.n	80137ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80137aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	22ff      	movs	r2, #255	; 0xff
 80137b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80137b4:	f001 fa46 	bl	8014c44 <vPortExitCritical>
}
 80137b8:	bf00      	nop
 80137ba:	3710      	adds	r7, #16
 80137bc:	46bd      	mov	sp, r7
 80137be:	bd80      	pop	{r7, pc}

080137c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80137c0:	b580      	push	{r7, lr}
 80137c2:	b084      	sub	sp, #16
 80137c4:	af00      	add	r7, sp, #0
 80137c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80137c8:	f001 fa0c 	bl	8014be4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d102      	bne.n	80137da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80137d4:	2301      	movs	r3, #1
 80137d6:	60fb      	str	r3, [r7, #12]
 80137d8:	e001      	b.n	80137de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80137da:	2300      	movs	r3, #0
 80137dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80137de:	f001 fa31 	bl	8014c44 <vPortExitCritical>

	return xReturn;
 80137e2:	68fb      	ldr	r3, [r7, #12]
}
 80137e4:	4618      	mov	r0, r3
 80137e6:	3710      	adds	r7, #16
 80137e8:	46bd      	mov	sp, r7
 80137ea:	bd80      	pop	{r7, pc}

080137ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80137ec:	b580      	push	{r7, lr}
 80137ee:	b084      	sub	sp, #16
 80137f0:	af00      	add	r7, sp, #0
 80137f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80137f4:	f001 f9f6 	bl	8014be4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013800:	429a      	cmp	r2, r3
 8013802:	d102      	bne.n	801380a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013804:	2301      	movs	r3, #1
 8013806:	60fb      	str	r3, [r7, #12]
 8013808:	e001      	b.n	801380e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801380a:	2300      	movs	r3, #0
 801380c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801380e:	f001 fa19 	bl	8014c44 <vPortExitCritical>

	return xReturn;
 8013812:	68fb      	ldr	r3, [r7, #12]
}
 8013814:	4618      	mov	r0, r3
 8013816:	3710      	adds	r7, #16
 8013818:	46bd      	mov	sp, r7
 801381a:	bd80      	pop	{r7, pc}

0801381c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801381c:	b580      	push	{r7, lr}
 801381e:	b08e      	sub	sp, #56	; 0x38
 8013820:	af04      	add	r7, sp, #16
 8013822:	60f8      	str	r0, [r7, #12]
 8013824:	60b9      	str	r1, [r7, #8]
 8013826:	607a      	str	r2, [r7, #4]
 8013828:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801382a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801382c:	2b00      	cmp	r3, #0
 801382e:	d10a      	bne.n	8013846 <xTaskCreateStatic+0x2a>
	__asm volatile
 8013830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013834:	f383 8811 	msr	BASEPRI, r3
 8013838:	f3bf 8f6f 	isb	sy
 801383c:	f3bf 8f4f 	dsb	sy
 8013840:	623b      	str	r3, [r7, #32]
}
 8013842:	bf00      	nop
 8013844:	e7fe      	b.n	8013844 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8013846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013848:	2b00      	cmp	r3, #0
 801384a:	d10a      	bne.n	8013862 <xTaskCreateStatic+0x46>
	__asm volatile
 801384c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013850:	f383 8811 	msr	BASEPRI, r3
 8013854:	f3bf 8f6f 	isb	sy
 8013858:	f3bf 8f4f 	dsb	sy
 801385c:	61fb      	str	r3, [r7, #28]
}
 801385e:	bf00      	nop
 8013860:	e7fe      	b.n	8013860 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013862:	2354      	movs	r3, #84	; 0x54
 8013864:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013866:	693b      	ldr	r3, [r7, #16]
 8013868:	2b54      	cmp	r3, #84	; 0x54
 801386a:	d00a      	beq.n	8013882 <xTaskCreateStatic+0x66>
	__asm volatile
 801386c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013870:	f383 8811 	msr	BASEPRI, r3
 8013874:	f3bf 8f6f 	isb	sy
 8013878:	f3bf 8f4f 	dsb	sy
 801387c:	61bb      	str	r3, [r7, #24]
}
 801387e:	bf00      	nop
 8013880:	e7fe      	b.n	8013880 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013882:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013886:	2b00      	cmp	r3, #0
 8013888:	d01e      	beq.n	80138c8 <xTaskCreateStatic+0xac>
 801388a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801388c:	2b00      	cmp	r3, #0
 801388e:	d01b      	beq.n	80138c8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013892:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013896:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013898:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801389c:	2202      	movs	r2, #2
 801389e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80138a2:	2300      	movs	r3, #0
 80138a4:	9303      	str	r3, [sp, #12]
 80138a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138a8:	9302      	str	r3, [sp, #8]
 80138aa:	f107 0314 	add.w	r3, r7, #20
 80138ae:	9301      	str	r3, [sp, #4]
 80138b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138b2:	9300      	str	r3, [sp, #0]
 80138b4:	683b      	ldr	r3, [r7, #0]
 80138b6:	687a      	ldr	r2, [r7, #4]
 80138b8:	68b9      	ldr	r1, [r7, #8]
 80138ba:	68f8      	ldr	r0, [r7, #12]
 80138bc:	f000 f850 	bl	8013960 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80138c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80138c2:	f000 f8d5 	bl	8013a70 <prvAddNewTaskToReadyList>
 80138c6:	e001      	b.n	80138cc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80138c8:	2300      	movs	r3, #0
 80138ca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80138cc:	697b      	ldr	r3, [r7, #20]
	}
 80138ce:	4618      	mov	r0, r3
 80138d0:	3728      	adds	r7, #40	; 0x28
 80138d2:	46bd      	mov	sp, r7
 80138d4:	bd80      	pop	{r7, pc}

080138d6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80138d6:	b580      	push	{r7, lr}
 80138d8:	b08c      	sub	sp, #48	; 0x30
 80138da:	af04      	add	r7, sp, #16
 80138dc:	60f8      	str	r0, [r7, #12]
 80138de:	60b9      	str	r1, [r7, #8]
 80138e0:	603b      	str	r3, [r7, #0]
 80138e2:	4613      	mov	r3, r2
 80138e4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80138e6:	88fb      	ldrh	r3, [r7, #6]
 80138e8:	009b      	lsls	r3, r3, #2
 80138ea:	4618      	mov	r0, r3
 80138ec:	f001 fa9c 	bl	8014e28 <pvPortMalloc>
 80138f0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80138f2:	697b      	ldr	r3, [r7, #20]
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	d00e      	beq.n	8013916 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80138f8:	2054      	movs	r0, #84	; 0x54
 80138fa:	f001 fa95 	bl	8014e28 <pvPortMalloc>
 80138fe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013900:	69fb      	ldr	r3, [r7, #28]
 8013902:	2b00      	cmp	r3, #0
 8013904:	d003      	beq.n	801390e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013906:	69fb      	ldr	r3, [r7, #28]
 8013908:	697a      	ldr	r2, [r7, #20]
 801390a:	631a      	str	r2, [r3, #48]	; 0x30
 801390c:	e005      	b.n	801391a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801390e:	6978      	ldr	r0, [r7, #20]
 8013910:	f001 fb4e 	bl	8014fb0 <vPortFree>
 8013914:	e001      	b.n	801391a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013916:	2300      	movs	r3, #0
 8013918:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801391a:	69fb      	ldr	r3, [r7, #28]
 801391c:	2b00      	cmp	r3, #0
 801391e:	d017      	beq.n	8013950 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013920:	69fb      	ldr	r3, [r7, #28]
 8013922:	2200      	movs	r2, #0
 8013924:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013928:	88fa      	ldrh	r2, [r7, #6]
 801392a:	2300      	movs	r3, #0
 801392c:	9303      	str	r3, [sp, #12]
 801392e:	69fb      	ldr	r3, [r7, #28]
 8013930:	9302      	str	r3, [sp, #8]
 8013932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013934:	9301      	str	r3, [sp, #4]
 8013936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013938:	9300      	str	r3, [sp, #0]
 801393a:	683b      	ldr	r3, [r7, #0]
 801393c:	68b9      	ldr	r1, [r7, #8]
 801393e:	68f8      	ldr	r0, [r7, #12]
 8013940:	f000 f80e 	bl	8013960 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013944:	69f8      	ldr	r0, [r7, #28]
 8013946:	f000 f893 	bl	8013a70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801394a:	2301      	movs	r3, #1
 801394c:	61bb      	str	r3, [r7, #24]
 801394e:	e002      	b.n	8013956 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013950:	f04f 33ff 	mov.w	r3, #4294967295
 8013954:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013956:	69bb      	ldr	r3, [r7, #24]
	}
 8013958:	4618      	mov	r0, r3
 801395a:	3720      	adds	r7, #32
 801395c:	46bd      	mov	sp, r7
 801395e:	bd80      	pop	{r7, pc}

08013960 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013960:	b580      	push	{r7, lr}
 8013962:	b088      	sub	sp, #32
 8013964:	af00      	add	r7, sp, #0
 8013966:	60f8      	str	r0, [r7, #12]
 8013968:	60b9      	str	r1, [r7, #8]
 801396a:	607a      	str	r2, [r7, #4]
 801396c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801396e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013970:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8013978:	3b01      	subs	r3, #1
 801397a:	009b      	lsls	r3, r3, #2
 801397c:	4413      	add	r3, r2
 801397e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013980:	69bb      	ldr	r3, [r7, #24]
 8013982:	f023 0307 	bic.w	r3, r3, #7
 8013986:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013988:	69bb      	ldr	r3, [r7, #24]
 801398a:	f003 0307 	and.w	r3, r3, #7
 801398e:	2b00      	cmp	r3, #0
 8013990:	d00a      	beq.n	80139a8 <prvInitialiseNewTask+0x48>
	__asm volatile
 8013992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013996:	f383 8811 	msr	BASEPRI, r3
 801399a:	f3bf 8f6f 	isb	sy
 801399e:	f3bf 8f4f 	dsb	sy
 80139a2:	617b      	str	r3, [r7, #20]
}
 80139a4:	bf00      	nop
 80139a6:	e7fe      	b.n	80139a6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80139a8:	68bb      	ldr	r3, [r7, #8]
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d01f      	beq.n	80139ee <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80139ae:	2300      	movs	r3, #0
 80139b0:	61fb      	str	r3, [r7, #28]
 80139b2:	e012      	b.n	80139da <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80139b4:	68ba      	ldr	r2, [r7, #8]
 80139b6:	69fb      	ldr	r3, [r7, #28]
 80139b8:	4413      	add	r3, r2
 80139ba:	7819      	ldrb	r1, [r3, #0]
 80139bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80139be:	69fb      	ldr	r3, [r7, #28]
 80139c0:	4413      	add	r3, r2
 80139c2:	3334      	adds	r3, #52	; 0x34
 80139c4:	460a      	mov	r2, r1
 80139c6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80139c8:	68ba      	ldr	r2, [r7, #8]
 80139ca:	69fb      	ldr	r3, [r7, #28]
 80139cc:	4413      	add	r3, r2
 80139ce:	781b      	ldrb	r3, [r3, #0]
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d006      	beq.n	80139e2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80139d4:	69fb      	ldr	r3, [r7, #28]
 80139d6:	3301      	adds	r3, #1
 80139d8:	61fb      	str	r3, [r7, #28]
 80139da:	69fb      	ldr	r3, [r7, #28]
 80139dc:	2b0f      	cmp	r3, #15
 80139de:	d9e9      	bls.n	80139b4 <prvInitialiseNewTask+0x54>
 80139e0:	e000      	b.n	80139e4 <prvInitialiseNewTask+0x84>
			{
				break;
 80139e2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80139e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139e6:	2200      	movs	r2, #0
 80139e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80139ec:	e003      	b.n	80139f6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80139ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139f0:	2200      	movs	r2, #0
 80139f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80139f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139f8:	2b06      	cmp	r3, #6
 80139fa:	d901      	bls.n	8013a00 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80139fc:	2306      	movs	r3, #6
 80139fe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013a04:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013a0a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8013a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a0e:	2200      	movs	r2, #0
 8013a10:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a14:	3304      	adds	r3, #4
 8013a16:	4618      	mov	r0, r3
 8013a18:	f7ff f8d9 	bl	8012bce <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a1e:	3318      	adds	r3, #24
 8013a20:	4618      	mov	r0, r3
 8013a22:	f7ff f8d4 	bl	8012bce <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013a2a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a2e:	f1c3 0207 	rsb	r2, r3, #7
 8013a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a34:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013a3a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a3e:	2200      	movs	r2, #0
 8013a40:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a44:	2200      	movs	r2, #0
 8013a46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013a4a:	683a      	ldr	r2, [r7, #0]
 8013a4c:	68f9      	ldr	r1, [r7, #12]
 8013a4e:	69b8      	ldr	r0, [r7, #24]
 8013a50:	f000 ff9e 	bl	8014990 <pxPortInitialiseStack>
 8013a54:	4602      	mov	r2, r0
 8013a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a58:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d002      	beq.n	8013a66 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013a64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013a66:	bf00      	nop
 8013a68:	3720      	adds	r7, #32
 8013a6a:	46bd      	mov	sp, r7
 8013a6c:	bd80      	pop	{r7, pc}
	...

08013a70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013a70:	b580      	push	{r7, lr}
 8013a72:	b082      	sub	sp, #8
 8013a74:	af00      	add	r7, sp, #0
 8013a76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013a78:	f001 f8b4 	bl	8014be4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013a7c:	4b2a      	ldr	r3, [pc, #168]	; (8013b28 <prvAddNewTaskToReadyList+0xb8>)
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	3301      	adds	r3, #1
 8013a82:	4a29      	ldr	r2, [pc, #164]	; (8013b28 <prvAddNewTaskToReadyList+0xb8>)
 8013a84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013a86:	4b29      	ldr	r3, [pc, #164]	; (8013b2c <prvAddNewTaskToReadyList+0xbc>)
 8013a88:	681b      	ldr	r3, [r3, #0]
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d109      	bne.n	8013aa2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8013a8e:	4a27      	ldr	r2, [pc, #156]	; (8013b2c <prvAddNewTaskToReadyList+0xbc>)
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013a94:	4b24      	ldr	r3, [pc, #144]	; (8013b28 <prvAddNewTaskToReadyList+0xb8>)
 8013a96:	681b      	ldr	r3, [r3, #0]
 8013a98:	2b01      	cmp	r3, #1
 8013a9a:	d110      	bne.n	8013abe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013a9c:	f000 fbc6 	bl	801422c <prvInitialiseTaskLists>
 8013aa0:	e00d      	b.n	8013abe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013aa2:	4b23      	ldr	r3, [pc, #140]	; (8013b30 <prvAddNewTaskToReadyList+0xc0>)
 8013aa4:	681b      	ldr	r3, [r3, #0]
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	d109      	bne.n	8013abe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013aaa:	4b20      	ldr	r3, [pc, #128]	; (8013b2c <prvAddNewTaskToReadyList+0xbc>)
 8013aac:	681b      	ldr	r3, [r3, #0]
 8013aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ab4:	429a      	cmp	r2, r3
 8013ab6:	d802      	bhi.n	8013abe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013ab8:	4a1c      	ldr	r2, [pc, #112]	; (8013b2c <prvAddNewTaskToReadyList+0xbc>)
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013abe:	4b1d      	ldr	r3, [pc, #116]	; (8013b34 <prvAddNewTaskToReadyList+0xc4>)
 8013ac0:	681b      	ldr	r3, [r3, #0]
 8013ac2:	3301      	adds	r3, #1
 8013ac4:	4a1b      	ldr	r2, [pc, #108]	; (8013b34 <prvAddNewTaskToReadyList+0xc4>)
 8013ac6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013acc:	2201      	movs	r2, #1
 8013ace:	409a      	lsls	r2, r3
 8013ad0:	4b19      	ldr	r3, [pc, #100]	; (8013b38 <prvAddNewTaskToReadyList+0xc8>)
 8013ad2:	681b      	ldr	r3, [r3, #0]
 8013ad4:	4313      	orrs	r3, r2
 8013ad6:	4a18      	ldr	r2, [pc, #96]	; (8013b38 <prvAddNewTaskToReadyList+0xc8>)
 8013ad8:	6013      	str	r3, [r2, #0]
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ade:	4613      	mov	r3, r2
 8013ae0:	009b      	lsls	r3, r3, #2
 8013ae2:	4413      	add	r3, r2
 8013ae4:	009b      	lsls	r3, r3, #2
 8013ae6:	4a15      	ldr	r2, [pc, #84]	; (8013b3c <prvAddNewTaskToReadyList+0xcc>)
 8013ae8:	441a      	add	r2, r3
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	3304      	adds	r3, #4
 8013aee:	4619      	mov	r1, r3
 8013af0:	4610      	mov	r0, r2
 8013af2:	f7ff f879 	bl	8012be8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013af6:	f001 f8a5 	bl	8014c44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013afa:	4b0d      	ldr	r3, [pc, #52]	; (8013b30 <prvAddNewTaskToReadyList+0xc0>)
 8013afc:	681b      	ldr	r3, [r3, #0]
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d00e      	beq.n	8013b20 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013b02:	4b0a      	ldr	r3, [pc, #40]	; (8013b2c <prvAddNewTaskToReadyList+0xbc>)
 8013b04:	681b      	ldr	r3, [r3, #0]
 8013b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b0c:	429a      	cmp	r2, r3
 8013b0e:	d207      	bcs.n	8013b20 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013b10:	4b0b      	ldr	r3, [pc, #44]	; (8013b40 <prvAddNewTaskToReadyList+0xd0>)
 8013b12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013b16:	601a      	str	r2, [r3, #0]
 8013b18:	f3bf 8f4f 	dsb	sy
 8013b1c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013b20:	bf00      	nop
 8013b22:	3708      	adds	r7, #8
 8013b24:	46bd      	mov	sp, r7
 8013b26:	bd80      	pop	{r7, pc}
 8013b28:	2000296c 	.word	0x2000296c
 8013b2c:	2000286c 	.word	0x2000286c
 8013b30:	20002978 	.word	0x20002978
 8013b34:	20002988 	.word	0x20002988
 8013b38:	20002974 	.word	0x20002974
 8013b3c:	20002870 	.word	0x20002870
 8013b40:	e000ed04 	.word	0xe000ed04

08013b44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013b44:	b580      	push	{r7, lr}
 8013b46:	b084      	sub	sp, #16
 8013b48:	af00      	add	r7, sp, #0
 8013b4a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013b4c:	2300      	movs	r3, #0
 8013b4e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d017      	beq.n	8013b86 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8013b56:	4b13      	ldr	r3, [pc, #76]	; (8013ba4 <vTaskDelay+0x60>)
 8013b58:	681b      	ldr	r3, [r3, #0]
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d00a      	beq.n	8013b74 <vTaskDelay+0x30>
	__asm volatile
 8013b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b62:	f383 8811 	msr	BASEPRI, r3
 8013b66:	f3bf 8f6f 	isb	sy
 8013b6a:	f3bf 8f4f 	dsb	sy
 8013b6e:	60bb      	str	r3, [r7, #8]
}
 8013b70:	bf00      	nop
 8013b72:	e7fe      	b.n	8013b72 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8013b74:	f000 f87a 	bl	8013c6c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013b78:	2100      	movs	r1, #0
 8013b7a:	6878      	ldr	r0, [r7, #4]
 8013b7c:	f000 fea2 	bl	80148c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013b80:	f000 f882 	bl	8013c88 <xTaskResumeAll>
 8013b84:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013b86:	68fb      	ldr	r3, [r7, #12]
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d107      	bne.n	8013b9c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8013b8c:	4b06      	ldr	r3, [pc, #24]	; (8013ba8 <vTaskDelay+0x64>)
 8013b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013b92:	601a      	str	r2, [r3, #0]
 8013b94:	f3bf 8f4f 	dsb	sy
 8013b98:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013b9c:	bf00      	nop
 8013b9e:	3710      	adds	r7, #16
 8013ba0:	46bd      	mov	sp, r7
 8013ba2:	bd80      	pop	{r7, pc}
 8013ba4:	20002994 	.word	0x20002994
 8013ba8:	e000ed04 	.word	0xe000ed04

08013bac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013bac:	b580      	push	{r7, lr}
 8013bae:	b08a      	sub	sp, #40	; 0x28
 8013bb0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013bb2:	2300      	movs	r3, #0
 8013bb4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013bb6:	2300      	movs	r3, #0
 8013bb8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013bba:	463a      	mov	r2, r7
 8013bbc:	1d39      	adds	r1, r7, #4
 8013bbe:	f107 0308 	add.w	r3, r7, #8
 8013bc2:	4618      	mov	r0, r3
 8013bc4:	f7ee fd06 	bl	80025d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013bc8:	6839      	ldr	r1, [r7, #0]
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	68ba      	ldr	r2, [r7, #8]
 8013bce:	9202      	str	r2, [sp, #8]
 8013bd0:	9301      	str	r3, [sp, #4]
 8013bd2:	2300      	movs	r3, #0
 8013bd4:	9300      	str	r3, [sp, #0]
 8013bd6:	2300      	movs	r3, #0
 8013bd8:	460a      	mov	r2, r1
 8013bda:	491e      	ldr	r1, [pc, #120]	; (8013c54 <vTaskStartScheduler+0xa8>)
 8013bdc:	481e      	ldr	r0, [pc, #120]	; (8013c58 <vTaskStartScheduler+0xac>)
 8013bde:	f7ff fe1d 	bl	801381c <xTaskCreateStatic>
 8013be2:	4603      	mov	r3, r0
 8013be4:	4a1d      	ldr	r2, [pc, #116]	; (8013c5c <vTaskStartScheduler+0xb0>)
 8013be6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013be8:	4b1c      	ldr	r3, [pc, #112]	; (8013c5c <vTaskStartScheduler+0xb0>)
 8013bea:	681b      	ldr	r3, [r3, #0]
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d002      	beq.n	8013bf6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013bf0:	2301      	movs	r3, #1
 8013bf2:	617b      	str	r3, [r7, #20]
 8013bf4:	e001      	b.n	8013bfa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013bf6:	2300      	movs	r3, #0
 8013bf8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013bfa:	697b      	ldr	r3, [r7, #20]
 8013bfc:	2b01      	cmp	r3, #1
 8013bfe:	d116      	bne.n	8013c2e <vTaskStartScheduler+0x82>
	__asm volatile
 8013c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c04:	f383 8811 	msr	BASEPRI, r3
 8013c08:	f3bf 8f6f 	isb	sy
 8013c0c:	f3bf 8f4f 	dsb	sy
 8013c10:	613b      	str	r3, [r7, #16]
}
 8013c12:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013c14:	4b12      	ldr	r3, [pc, #72]	; (8013c60 <vTaskStartScheduler+0xb4>)
 8013c16:	f04f 32ff 	mov.w	r2, #4294967295
 8013c1a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013c1c:	4b11      	ldr	r3, [pc, #68]	; (8013c64 <vTaskStartScheduler+0xb8>)
 8013c1e:	2201      	movs	r2, #1
 8013c20:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013c22:	4b11      	ldr	r3, [pc, #68]	; (8013c68 <vTaskStartScheduler+0xbc>)
 8013c24:	2200      	movs	r2, #0
 8013c26:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013c28:	f000 ff3a 	bl	8014aa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013c2c:	e00e      	b.n	8013c4c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013c2e:	697b      	ldr	r3, [r7, #20]
 8013c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c34:	d10a      	bne.n	8013c4c <vTaskStartScheduler+0xa0>
	__asm volatile
 8013c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c3a:	f383 8811 	msr	BASEPRI, r3
 8013c3e:	f3bf 8f6f 	isb	sy
 8013c42:	f3bf 8f4f 	dsb	sy
 8013c46:	60fb      	str	r3, [r7, #12]
}
 8013c48:	bf00      	nop
 8013c4a:	e7fe      	b.n	8013c4a <vTaskStartScheduler+0x9e>
}
 8013c4c:	bf00      	nop
 8013c4e:	3718      	adds	r7, #24
 8013c50:	46bd      	mov	sp, r7
 8013c52:	bd80      	pop	{r7, pc}
 8013c54:	0801c214 	.word	0x0801c214
 8013c58:	080141fd 	.word	0x080141fd
 8013c5c:	20002990 	.word	0x20002990
 8013c60:	2000298c 	.word	0x2000298c
 8013c64:	20002978 	.word	0x20002978
 8013c68:	20002970 	.word	0x20002970

08013c6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013c6c:	b480      	push	{r7}
 8013c6e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8013c70:	4b04      	ldr	r3, [pc, #16]	; (8013c84 <vTaskSuspendAll+0x18>)
 8013c72:	681b      	ldr	r3, [r3, #0]
 8013c74:	3301      	adds	r3, #1
 8013c76:	4a03      	ldr	r2, [pc, #12]	; (8013c84 <vTaskSuspendAll+0x18>)
 8013c78:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8013c7a:	bf00      	nop
 8013c7c:	46bd      	mov	sp, r7
 8013c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c82:	4770      	bx	lr
 8013c84:	20002994 	.word	0x20002994

08013c88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013c88:	b580      	push	{r7, lr}
 8013c8a:	b084      	sub	sp, #16
 8013c8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013c8e:	2300      	movs	r3, #0
 8013c90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013c92:	2300      	movs	r3, #0
 8013c94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013c96:	4b41      	ldr	r3, [pc, #260]	; (8013d9c <xTaskResumeAll+0x114>)
 8013c98:	681b      	ldr	r3, [r3, #0]
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d10a      	bne.n	8013cb4 <xTaskResumeAll+0x2c>
	__asm volatile
 8013c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ca2:	f383 8811 	msr	BASEPRI, r3
 8013ca6:	f3bf 8f6f 	isb	sy
 8013caa:	f3bf 8f4f 	dsb	sy
 8013cae:	603b      	str	r3, [r7, #0]
}
 8013cb0:	bf00      	nop
 8013cb2:	e7fe      	b.n	8013cb2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013cb4:	f000 ff96 	bl	8014be4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013cb8:	4b38      	ldr	r3, [pc, #224]	; (8013d9c <xTaskResumeAll+0x114>)
 8013cba:	681b      	ldr	r3, [r3, #0]
 8013cbc:	3b01      	subs	r3, #1
 8013cbe:	4a37      	ldr	r2, [pc, #220]	; (8013d9c <xTaskResumeAll+0x114>)
 8013cc0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013cc2:	4b36      	ldr	r3, [pc, #216]	; (8013d9c <xTaskResumeAll+0x114>)
 8013cc4:	681b      	ldr	r3, [r3, #0]
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d161      	bne.n	8013d8e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013cca:	4b35      	ldr	r3, [pc, #212]	; (8013da0 <xTaskResumeAll+0x118>)
 8013ccc:	681b      	ldr	r3, [r3, #0]
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d05d      	beq.n	8013d8e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013cd2:	e02e      	b.n	8013d32 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013cd4:	4b33      	ldr	r3, [pc, #204]	; (8013da4 <xTaskResumeAll+0x11c>)
 8013cd6:	68db      	ldr	r3, [r3, #12]
 8013cd8:	68db      	ldr	r3, [r3, #12]
 8013cda:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013cdc:	68fb      	ldr	r3, [r7, #12]
 8013cde:	3318      	adds	r3, #24
 8013ce0:	4618      	mov	r0, r3
 8013ce2:	f7fe ffde 	bl	8012ca2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013ce6:	68fb      	ldr	r3, [r7, #12]
 8013ce8:	3304      	adds	r3, #4
 8013cea:	4618      	mov	r0, r3
 8013cec:	f7fe ffd9 	bl	8012ca2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013cf0:	68fb      	ldr	r3, [r7, #12]
 8013cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013cf4:	2201      	movs	r2, #1
 8013cf6:	409a      	lsls	r2, r3
 8013cf8:	4b2b      	ldr	r3, [pc, #172]	; (8013da8 <xTaskResumeAll+0x120>)
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	4313      	orrs	r3, r2
 8013cfe:	4a2a      	ldr	r2, [pc, #168]	; (8013da8 <xTaskResumeAll+0x120>)
 8013d00:	6013      	str	r3, [r2, #0]
 8013d02:	68fb      	ldr	r3, [r7, #12]
 8013d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d06:	4613      	mov	r3, r2
 8013d08:	009b      	lsls	r3, r3, #2
 8013d0a:	4413      	add	r3, r2
 8013d0c:	009b      	lsls	r3, r3, #2
 8013d0e:	4a27      	ldr	r2, [pc, #156]	; (8013dac <xTaskResumeAll+0x124>)
 8013d10:	441a      	add	r2, r3
 8013d12:	68fb      	ldr	r3, [r7, #12]
 8013d14:	3304      	adds	r3, #4
 8013d16:	4619      	mov	r1, r3
 8013d18:	4610      	mov	r0, r2
 8013d1a:	f7fe ff65 	bl	8012be8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013d1e:	68fb      	ldr	r3, [r7, #12]
 8013d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d22:	4b23      	ldr	r3, [pc, #140]	; (8013db0 <xTaskResumeAll+0x128>)
 8013d24:	681b      	ldr	r3, [r3, #0]
 8013d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d28:	429a      	cmp	r2, r3
 8013d2a:	d302      	bcc.n	8013d32 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8013d2c:	4b21      	ldr	r3, [pc, #132]	; (8013db4 <xTaskResumeAll+0x12c>)
 8013d2e:	2201      	movs	r2, #1
 8013d30:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013d32:	4b1c      	ldr	r3, [pc, #112]	; (8013da4 <xTaskResumeAll+0x11c>)
 8013d34:	681b      	ldr	r3, [r3, #0]
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d1cc      	bne.n	8013cd4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013d3a:	68fb      	ldr	r3, [r7, #12]
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d001      	beq.n	8013d44 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013d40:	f000 fb12 	bl	8014368 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8013d44:	4b1c      	ldr	r3, [pc, #112]	; (8013db8 <xTaskResumeAll+0x130>)
 8013d46:	681b      	ldr	r3, [r3, #0]
 8013d48:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d010      	beq.n	8013d72 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013d50:	f000 f836 	bl	8013dc0 <xTaskIncrementTick>
 8013d54:	4603      	mov	r3, r0
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d002      	beq.n	8013d60 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8013d5a:	4b16      	ldr	r3, [pc, #88]	; (8013db4 <xTaskResumeAll+0x12c>)
 8013d5c:	2201      	movs	r2, #1
 8013d5e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	3b01      	subs	r3, #1
 8013d64:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d1f1      	bne.n	8013d50 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8013d6c:	4b12      	ldr	r3, [pc, #72]	; (8013db8 <xTaskResumeAll+0x130>)
 8013d6e:	2200      	movs	r2, #0
 8013d70:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013d72:	4b10      	ldr	r3, [pc, #64]	; (8013db4 <xTaskResumeAll+0x12c>)
 8013d74:	681b      	ldr	r3, [r3, #0]
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d009      	beq.n	8013d8e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013d7a:	2301      	movs	r3, #1
 8013d7c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013d7e:	4b0f      	ldr	r3, [pc, #60]	; (8013dbc <xTaskResumeAll+0x134>)
 8013d80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013d84:	601a      	str	r2, [r3, #0]
 8013d86:	f3bf 8f4f 	dsb	sy
 8013d8a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013d8e:	f000 ff59 	bl	8014c44 <vPortExitCritical>

	return xAlreadyYielded;
 8013d92:	68bb      	ldr	r3, [r7, #8]
}
 8013d94:	4618      	mov	r0, r3
 8013d96:	3710      	adds	r7, #16
 8013d98:	46bd      	mov	sp, r7
 8013d9a:	bd80      	pop	{r7, pc}
 8013d9c:	20002994 	.word	0x20002994
 8013da0:	2000296c 	.word	0x2000296c
 8013da4:	2000292c 	.word	0x2000292c
 8013da8:	20002974 	.word	0x20002974
 8013dac:	20002870 	.word	0x20002870
 8013db0:	2000286c 	.word	0x2000286c
 8013db4:	20002980 	.word	0x20002980
 8013db8:	2000297c 	.word	0x2000297c
 8013dbc:	e000ed04 	.word	0xe000ed04

08013dc0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013dc0:	b580      	push	{r7, lr}
 8013dc2:	b086      	sub	sp, #24
 8013dc4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013dc6:	2300      	movs	r3, #0
 8013dc8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013dca:	4b4e      	ldr	r3, [pc, #312]	; (8013f04 <xTaskIncrementTick+0x144>)
 8013dcc:	681b      	ldr	r3, [r3, #0]
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	f040 8088 	bne.w	8013ee4 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013dd4:	4b4c      	ldr	r3, [pc, #304]	; (8013f08 <xTaskIncrementTick+0x148>)
 8013dd6:	681b      	ldr	r3, [r3, #0]
 8013dd8:	3301      	adds	r3, #1
 8013dda:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013ddc:	4a4a      	ldr	r2, [pc, #296]	; (8013f08 <xTaskIncrementTick+0x148>)
 8013dde:	693b      	ldr	r3, [r7, #16]
 8013de0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013de2:	693b      	ldr	r3, [r7, #16]
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d120      	bne.n	8013e2a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8013de8:	4b48      	ldr	r3, [pc, #288]	; (8013f0c <xTaskIncrementTick+0x14c>)
 8013dea:	681b      	ldr	r3, [r3, #0]
 8013dec:	681b      	ldr	r3, [r3, #0]
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d00a      	beq.n	8013e08 <xTaskIncrementTick+0x48>
	__asm volatile
 8013df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013df6:	f383 8811 	msr	BASEPRI, r3
 8013dfa:	f3bf 8f6f 	isb	sy
 8013dfe:	f3bf 8f4f 	dsb	sy
 8013e02:	603b      	str	r3, [r7, #0]
}
 8013e04:	bf00      	nop
 8013e06:	e7fe      	b.n	8013e06 <xTaskIncrementTick+0x46>
 8013e08:	4b40      	ldr	r3, [pc, #256]	; (8013f0c <xTaskIncrementTick+0x14c>)
 8013e0a:	681b      	ldr	r3, [r3, #0]
 8013e0c:	60fb      	str	r3, [r7, #12]
 8013e0e:	4b40      	ldr	r3, [pc, #256]	; (8013f10 <xTaskIncrementTick+0x150>)
 8013e10:	681b      	ldr	r3, [r3, #0]
 8013e12:	4a3e      	ldr	r2, [pc, #248]	; (8013f0c <xTaskIncrementTick+0x14c>)
 8013e14:	6013      	str	r3, [r2, #0]
 8013e16:	4a3e      	ldr	r2, [pc, #248]	; (8013f10 <xTaskIncrementTick+0x150>)
 8013e18:	68fb      	ldr	r3, [r7, #12]
 8013e1a:	6013      	str	r3, [r2, #0]
 8013e1c:	4b3d      	ldr	r3, [pc, #244]	; (8013f14 <xTaskIncrementTick+0x154>)
 8013e1e:	681b      	ldr	r3, [r3, #0]
 8013e20:	3301      	adds	r3, #1
 8013e22:	4a3c      	ldr	r2, [pc, #240]	; (8013f14 <xTaskIncrementTick+0x154>)
 8013e24:	6013      	str	r3, [r2, #0]
 8013e26:	f000 fa9f 	bl	8014368 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013e2a:	4b3b      	ldr	r3, [pc, #236]	; (8013f18 <xTaskIncrementTick+0x158>)
 8013e2c:	681b      	ldr	r3, [r3, #0]
 8013e2e:	693a      	ldr	r2, [r7, #16]
 8013e30:	429a      	cmp	r2, r3
 8013e32:	d348      	bcc.n	8013ec6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013e34:	4b35      	ldr	r3, [pc, #212]	; (8013f0c <xTaskIncrementTick+0x14c>)
 8013e36:	681b      	ldr	r3, [r3, #0]
 8013e38:	681b      	ldr	r3, [r3, #0]
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	d104      	bne.n	8013e48 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013e3e:	4b36      	ldr	r3, [pc, #216]	; (8013f18 <xTaskIncrementTick+0x158>)
 8013e40:	f04f 32ff 	mov.w	r2, #4294967295
 8013e44:	601a      	str	r2, [r3, #0]
					break;
 8013e46:	e03e      	b.n	8013ec6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013e48:	4b30      	ldr	r3, [pc, #192]	; (8013f0c <xTaskIncrementTick+0x14c>)
 8013e4a:	681b      	ldr	r3, [r3, #0]
 8013e4c:	68db      	ldr	r3, [r3, #12]
 8013e4e:	68db      	ldr	r3, [r3, #12]
 8013e50:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013e52:	68bb      	ldr	r3, [r7, #8]
 8013e54:	685b      	ldr	r3, [r3, #4]
 8013e56:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013e58:	693a      	ldr	r2, [r7, #16]
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	429a      	cmp	r2, r3
 8013e5e:	d203      	bcs.n	8013e68 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013e60:	4a2d      	ldr	r2, [pc, #180]	; (8013f18 <xTaskIncrementTick+0x158>)
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013e66:	e02e      	b.n	8013ec6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013e68:	68bb      	ldr	r3, [r7, #8]
 8013e6a:	3304      	adds	r3, #4
 8013e6c:	4618      	mov	r0, r3
 8013e6e:	f7fe ff18 	bl	8012ca2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013e72:	68bb      	ldr	r3, [r7, #8]
 8013e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d004      	beq.n	8013e84 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013e7a:	68bb      	ldr	r3, [r7, #8]
 8013e7c:	3318      	adds	r3, #24
 8013e7e:	4618      	mov	r0, r3
 8013e80:	f7fe ff0f 	bl	8012ca2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013e84:	68bb      	ldr	r3, [r7, #8]
 8013e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e88:	2201      	movs	r2, #1
 8013e8a:	409a      	lsls	r2, r3
 8013e8c:	4b23      	ldr	r3, [pc, #140]	; (8013f1c <xTaskIncrementTick+0x15c>)
 8013e8e:	681b      	ldr	r3, [r3, #0]
 8013e90:	4313      	orrs	r3, r2
 8013e92:	4a22      	ldr	r2, [pc, #136]	; (8013f1c <xTaskIncrementTick+0x15c>)
 8013e94:	6013      	str	r3, [r2, #0]
 8013e96:	68bb      	ldr	r3, [r7, #8]
 8013e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e9a:	4613      	mov	r3, r2
 8013e9c:	009b      	lsls	r3, r3, #2
 8013e9e:	4413      	add	r3, r2
 8013ea0:	009b      	lsls	r3, r3, #2
 8013ea2:	4a1f      	ldr	r2, [pc, #124]	; (8013f20 <xTaskIncrementTick+0x160>)
 8013ea4:	441a      	add	r2, r3
 8013ea6:	68bb      	ldr	r3, [r7, #8]
 8013ea8:	3304      	adds	r3, #4
 8013eaa:	4619      	mov	r1, r3
 8013eac:	4610      	mov	r0, r2
 8013eae:	f7fe fe9b 	bl	8012be8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013eb2:	68bb      	ldr	r3, [r7, #8]
 8013eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013eb6:	4b1b      	ldr	r3, [pc, #108]	; (8013f24 <xTaskIncrementTick+0x164>)
 8013eb8:	681b      	ldr	r3, [r3, #0]
 8013eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ebc:	429a      	cmp	r2, r3
 8013ebe:	d3b9      	bcc.n	8013e34 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8013ec0:	2301      	movs	r3, #1
 8013ec2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013ec4:	e7b6      	b.n	8013e34 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013ec6:	4b17      	ldr	r3, [pc, #92]	; (8013f24 <xTaskIncrementTick+0x164>)
 8013ec8:	681b      	ldr	r3, [r3, #0]
 8013eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ecc:	4914      	ldr	r1, [pc, #80]	; (8013f20 <xTaskIncrementTick+0x160>)
 8013ece:	4613      	mov	r3, r2
 8013ed0:	009b      	lsls	r3, r3, #2
 8013ed2:	4413      	add	r3, r2
 8013ed4:	009b      	lsls	r3, r3, #2
 8013ed6:	440b      	add	r3, r1
 8013ed8:	681b      	ldr	r3, [r3, #0]
 8013eda:	2b01      	cmp	r3, #1
 8013edc:	d907      	bls.n	8013eee <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8013ede:	2301      	movs	r3, #1
 8013ee0:	617b      	str	r3, [r7, #20]
 8013ee2:	e004      	b.n	8013eee <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8013ee4:	4b10      	ldr	r3, [pc, #64]	; (8013f28 <xTaskIncrementTick+0x168>)
 8013ee6:	681b      	ldr	r3, [r3, #0]
 8013ee8:	3301      	adds	r3, #1
 8013eea:	4a0f      	ldr	r2, [pc, #60]	; (8013f28 <xTaskIncrementTick+0x168>)
 8013eec:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8013eee:	4b0f      	ldr	r3, [pc, #60]	; (8013f2c <xTaskIncrementTick+0x16c>)
 8013ef0:	681b      	ldr	r3, [r3, #0]
 8013ef2:	2b00      	cmp	r3, #0
 8013ef4:	d001      	beq.n	8013efa <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8013ef6:	2301      	movs	r3, #1
 8013ef8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8013efa:	697b      	ldr	r3, [r7, #20]
}
 8013efc:	4618      	mov	r0, r3
 8013efe:	3718      	adds	r7, #24
 8013f00:	46bd      	mov	sp, r7
 8013f02:	bd80      	pop	{r7, pc}
 8013f04:	20002994 	.word	0x20002994
 8013f08:	20002970 	.word	0x20002970
 8013f0c:	20002924 	.word	0x20002924
 8013f10:	20002928 	.word	0x20002928
 8013f14:	20002984 	.word	0x20002984
 8013f18:	2000298c 	.word	0x2000298c
 8013f1c:	20002974 	.word	0x20002974
 8013f20:	20002870 	.word	0x20002870
 8013f24:	2000286c 	.word	0x2000286c
 8013f28:	2000297c 	.word	0x2000297c
 8013f2c:	20002980 	.word	0x20002980

08013f30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013f30:	b480      	push	{r7}
 8013f32:	b087      	sub	sp, #28
 8013f34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013f36:	4b27      	ldr	r3, [pc, #156]	; (8013fd4 <vTaskSwitchContext+0xa4>)
 8013f38:	681b      	ldr	r3, [r3, #0]
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d003      	beq.n	8013f46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013f3e:	4b26      	ldr	r3, [pc, #152]	; (8013fd8 <vTaskSwitchContext+0xa8>)
 8013f40:	2201      	movs	r2, #1
 8013f42:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013f44:	e03f      	b.n	8013fc6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8013f46:	4b24      	ldr	r3, [pc, #144]	; (8013fd8 <vTaskSwitchContext+0xa8>)
 8013f48:	2200      	movs	r2, #0
 8013f4a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013f4c:	4b23      	ldr	r3, [pc, #140]	; (8013fdc <vTaskSwitchContext+0xac>)
 8013f4e:	681b      	ldr	r3, [r3, #0]
 8013f50:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8013f52:	68fb      	ldr	r3, [r7, #12]
 8013f54:	fab3 f383 	clz	r3, r3
 8013f58:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8013f5a:	7afb      	ldrb	r3, [r7, #11]
 8013f5c:	f1c3 031f 	rsb	r3, r3, #31
 8013f60:	617b      	str	r3, [r7, #20]
 8013f62:	491f      	ldr	r1, [pc, #124]	; (8013fe0 <vTaskSwitchContext+0xb0>)
 8013f64:	697a      	ldr	r2, [r7, #20]
 8013f66:	4613      	mov	r3, r2
 8013f68:	009b      	lsls	r3, r3, #2
 8013f6a:	4413      	add	r3, r2
 8013f6c:	009b      	lsls	r3, r3, #2
 8013f6e:	440b      	add	r3, r1
 8013f70:	681b      	ldr	r3, [r3, #0]
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d10a      	bne.n	8013f8c <vTaskSwitchContext+0x5c>
	__asm volatile
 8013f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f7a:	f383 8811 	msr	BASEPRI, r3
 8013f7e:	f3bf 8f6f 	isb	sy
 8013f82:	f3bf 8f4f 	dsb	sy
 8013f86:	607b      	str	r3, [r7, #4]
}
 8013f88:	bf00      	nop
 8013f8a:	e7fe      	b.n	8013f8a <vTaskSwitchContext+0x5a>
 8013f8c:	697a      	ldr	r2, [r7, #20]
 8013f8e:	4613      	mov	r3, r2
 8013f90:	009b      	lsls	r3, r3, #2
 8013f92:	4413      	add	r3, r2
 8013f94:	009b      	lsls	r3, r3, #2
 8013f96:	4a12      	ldr	r2, [pc, #72]	; (8013fe0 <vTaskSwitchContext+0xb0>)
 8013f98:	4413      	add	r3, r2
 8013f9a:	613b      	str	r3, [r7, #16]
 8013f9c:	693b      	ldr	r3, [r7, #16]
 8013f9e:	685b      	ldr	r3, [r3, #4]
 8013fa0:	685a      	ldr	r2, [r3, #4]
 8013fa2:	693b      	ldr	r3, [r7, #16]
 8013fa4:	605a      	str	r2, [r3, #4]
 8013fa6:	693b      	ldr	r3, [r7, #16]
 8013fa8:	685a      	ldr	r2, [r3, #4]
 8013faa:	693b      	ldr	r3, [r7, #16]
 8013fac:	3308      	adds	r3, #8
 8013fae:	429a      	cmp	r2, r3
 8013fb0:	d104      	bne.n	8013fbc <vTaskSwitchContext+0x8c>
 8013fb2:	693b      	ldr	r3, [r7, #16]
 8013fb4:	685b      	ldr	r3, [r3, #4]
 8013fb6:	685a      	ldr	r2, [r3, #4]
 8013fb8:	693b      	ldr	r3, [r7, #16]
 8013fba:	605a      	str	r2, [r3, #4]
 8013fbc:	693b      	ldr	r3, [r7, #16]
 8013fbe:	685b      	ldr	r3, [r3, #4]
 8013fc0:	68db      	ldr	r3, [r3, #12]
 8013fc2:	4a08      	ldr	r2, [pc, #32]	; (8013fe4 <vTaskSwitchContext+0xb4>)
 8013fc4:	6013      	str	r3, [r2, #0]
}
 8013fc6:	bf00      	nop
 8013fc8:	371c      	adds	r7, #28
 8013fca:	46bd      	mov	sp, r7
 8013fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fd0:	4770      	bx	lr
 8013fd2:	bf00      	nop
 8013fd4:	20002994 	.word	0x20002994
 8013fd8:	20002980 	.word	0x20002980
 8013fdc:	20002974 	.word	0x20002974
 8013fe0:	20002870 	.word	0x20002870
 8013fe4:	2000286c 	.word	0x2000286c

08013fe8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013fe8:	b580      	push	{r7, lr}
 8013fea:	b084      	sub	sp, #16
 8013fec:	af00      	add	r7, sp, #0
 8013fee:	6078      	str	r0, [r7, #4]
 8013ff0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d10a      	bne.n	801400e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8013ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ffc:	f383 8811 	msr	BASEPRI, r3
 8014000:	f3bf 8f6f 	isb	sy
 8014004:	f3bf 8f4f 	dsb	sy
 8014008:	60fb      	str	r3, [r7, #12]
}
 801400a:	bf00      	nop
 801400c:	e7fe      	b.n	801400c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801400e:	4b07      	ldr	r3, [pc, #28]	; (801402c <vTaskPlaceOnEventList+0x44>)
 8014010:	681b      	ldr	r3, [r3, #0]
 8014012:	3318      	adds	r3, #24
 8014014:	4619      	mov	r1, r3
 8014016:	6878      	ldr	r0, [r7, #4]
 8014018:	f7fe fe0a 	bl	8012c30 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801401c:	2101      	movs	r1, #1
 801401e:	6838      	ldr	r0, [r7, #0]
 8014020:	f000 fc50 	bl	80148c4 <prvAddCurrentTaskToDelayedList>
}
 8014024:	bf00      	nop
 8014026:	3710      	adds	r7, #16
 8014028:	46bd      	mov	sp, r7
 801402a:	bd80      	pop	{r7, pc}
 801402c:	2000286c 	.word	0x2000286c

08014030 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014030:	b580      	push	{r7, lr}
 8014032:	b086      	sub	sp, #24
 8014034:	af00      	add	r7, sp, #0
 8014036:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	68db      	ldr	r3, [r3, #12]
 801403c:	68db      	ldr	r3, [r3, #12]
 801403e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014040:	693b      	ldr	r3, [r7, #16]
 8014042:	2b00      	cmp	r3, #0
 8014044:	d10a      	bne.n	801405c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8014046:	f04f 0350 	mov.w	r3, #80	; 0x50
 801404a:	f383 8811 	msr	BASEPRI, r3
 801404e:	f3bf 8f6f 	isb	sy
 8014052:	f3bf 8f4f 	dsb	sy
 8014056:	60fb      	str	r3, [r7, #12]
}
 8014058:	bf00      	nop
 801405a:	e7fe      	b.n	801405a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801405c:	693b      	ldr	r3, [r7, #16]
 801405e:	3318      	adds	r3, #24
 8014060:	4618      	mov	r0, r3
 8014062:	f7fe fe1e 	bl	8012ca2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014066:	4b1d      	ldr	r3, [pc, #116]	; (80140dc <xTaskRemoveFromEventList+0xac>)
 8014068:	681b      	ldr	r3, [r3, #0]
 801406a:	2b00      	cmp	r3, #0
 801406c:	d11c      	bne.n	80140a8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801406e:	693b      	ldr	r3, [r7, #16]
 8014070:	3304      	adds	r3, #4
 8014072:	4618      	mov	r0, r3
 8014074:	f7fe fe15 	bl	8012ca2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014078:	693b      	ldr	r3, [r7, #16]
 801407a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801407c:	2201      	movs	r2, #1
 801407e:	409a      	lsls	r2, r3
 8014080:	4b17      	ldr	r3, [pc, #92]	; (80140e0 <xTaskRemoveFromEventList+0xb0>)
 8014082:	681b      	ldr	r3, [r3, #0]
 8014084:	4313      	orrs	r3, r2
 8014086:	4a16      	ldr	r2, [pc, #88]	; (80140e0 <xTaskRemoveFromEventList+0xb0>)
 8014088:	6013      	str	r3, [r2, #0]
 801408a:	693b      	ldr	r3, [r7, #16]
 801408c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801408e:	4613      	mov	r3, r2
 8014090:	009b      	lsls	r3, r3, #2
 8014092:	4413      	add	r3, r2
 8014094:	009b      	lsls	r3, r3, #2
 8014096:	4a13      	ldr	r2, [pc, #76]	; (80140e4 <xTaskRemoveFromEventList+0xb4>)
 8014098:	441a      	add	r2, r3
 801409a:	693b      	ldr	r3, [r7, #16]
 801409c:	3304      	adds	r3, #4
 801409e:	4619      	mov	r1, r3
 80140a0:	4610      	mov	r0, r2
 80140a2:	f7fe fda1 	bl	8012be8 <vListInsertEnd>
 80140a6:	e005      	b.n	80140b4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80140a8:	693b      	ldr	r3, [r7, #16]
 80140aa:	3318      	adds	r3, #24
 80140ac:	4619      	mov	r1, r3
 80140ae:	480e      	ldr	r0, [pc, #56]	; (80140e8 <xTaskRemoveFromEventList+0xb8>)
 80140b0:	f7fe fd9a 	bl	8012be8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80140b4:	693b      	ldr	r3, [r7, #16]
 80140b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80140b8:	4b0c      	ldr	r3, [pc, #48]	; (80140ec <xTaskRemoveFromEventList+0xbc>)
 80140ba:	681b      	ldr	r3, [r3, #0]
 80140bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140be:	429a      	cmp	r2, r3
 80140c0:	d905      	bls.n	80140ce <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80140c2:	2301      	movs	r3, #1
 80140c4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80140c6:	4b0a      	ldr	r3, [pc, #40]	; (80140f0 <xTaskRemoveFromEventList+0xc0>)
 80140c8:	2201      	movs	r2, #1
 80140ca:	601a      	str	r2, [r3, #0]
 80140cc:	e001      	b.n	80140d2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80140ce:	2300      	movs	r3, #0
 80140d0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80140d2:	697b      	ldr	r3, [r7, #20]
}
 80140d4:	4618      	mov	r0, r3
 80140d6:	3718      	adds	r7, #24
 80140d8:	46bd      	mov	sp, r7
 80140da:	bd80      	pop	{r7, pc}
 80140dc:	20002994 	.word	0x20002994
 80140e0:	20002974 	.word	0x20002974
 80140e4:	20002870 	.word	0x20002870
 80140e8:	2000292c 	.word	0x2000292c
 80140ec:	2000286c 	.word	0x2000286c
 80140f0:	20002980 	.word	0x20002980

080140f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80140f4:	b480      	push	{r7}
 80140f6:	b083      	sub	sp, #12
 80140f8:	af00      	add	r7, sp, #0
 80140fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80140fc:	4b06      	ldr	r3, [pc, #24]	; (8014118 <vTaskInternalSetTimeOutState+0x24>)
 80140fe:	681a      	ldr	r2, [r3, #0]
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014104:	4b05      	ldr	r3, [pc, #20]	; (801411c <vTaskInternalSetTimeOutState+0x28>)
 8014106:	681a      	ldr	r2, [r3, #0]
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	605a      	str	r2, [r3, #4]
}
 801410c:	bf00      	nop
 801410e:	370c      	adds	r7, #12
 8014110:	46bd      	mov	sp, r7
 8014112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014116:	4770      	bx	lr
 8014118:	20002984 	.word	0x20002984
 801411c:	20002970 	.word	0x20002970

08014120 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014120:	b580      	push	{r7, lr}
 8014122:	b088      	sub	sp, #32
 8014124:	af00      	add	r7, sp, #0
 8014126:	6078      	str	r0, [r7, #4]
 8014128:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	2b00      	cmp	r3, #0
 801412e:	d10a      	bne.n	8014146 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8014130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014134:	f383 8811 	msr	BASEPRI, r3
 8014138:	f3bf 8f6f 	isb	sy
 801413c:	f3bf 8f4f 	dsb	sy
 8014140:	613b      	str	r3, [r7, #16]
}
 8014142:	bf00      	nop
 8014144:	e7fe      	b.n	8014144 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8014146:	683b      	ldr	r3, [r7, #0]
 8014148:	2b00      	cmp	r3, #0
 801414a:	d10a      	bne.n	8014162 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801414c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014150:	f383 8811 	msr	BASEPRI, r3
 8014154:	f3bf 8f6f 	isb	sy
 8014158:	f3bf 8f4f 	dsb	sy
 801415c:	60fb      	str	r3, [r7, #12]
}
 801415e:	bf00      	nop
 8014160:	e7fe      	b.n	8014160 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8014162:	f000 fd3f 	bl	8014be4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014166:	4b1d      	ldr	r3, [pc, #116]	; (80141dc <xTaskCheckForTimeOut+0xbc>)
 8014168:	681b      	ldr	r3, [r3, #0]
 801416a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	685b      	ldr	r3, [r3, #4]
 8014170:	69ba      	ldr	r2, [r7, #24]
 8014172:	1ad3      	subs	r3, r2, r3
 8014174:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014176:	683b      	ldr	r3, [r7, #0]
 8014178:	681b      	ldr	r3, [r3, #0]
 801417a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801417e:	d102      	bne.n	8014186 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014180:	2300      	movs	r3, #0
 8014182:	61fb      	str	r3, [r7, #28]
 8014184:	e023      	b.n	80141ce <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	681a      	ldr	r2, [r3, #0]
 801418a:	4b15      	ldr	r3, [pc, #84]	; (80141e0 <xTaskCheckForTimeOut+0xc0>)
 801418c:	681b      	ldr	r3, [r3, #0]
 801418e:	429a      	cmp	r2, r3
 8014190:	d007      	beq.n	80141a2 <xTaskCheckForTimeOut+0x82>
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	685b      	ldr	r3, [r3, #4]
 8014196:	69ba      	ldr	r2, [r7, #24]
 8014198:	429a      	cmp	r2, r3
 801419a:	d302      	bcc.n	80141a2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801419c:	2301      	movs	r3, #1
 801419e:	61fb      	str	r3, [r7, #28]
 80141a0:	e015      	b.n	80141ce <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80141a2:	683b      	ldr	r3, [r7, #0]
 80141a4:	681b      	ldr	r3, [r3, #0]
 80141a6:	697a      	ldr	r2, [r7, #20]
 80141a8:	429a      	cmp	r2, r3
 80141aa:	d20b      	bcs.n	80141c4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80141ac:	683b      	ldr	r3, [r7, #0]
 80141ae:	681a      	ldr	r2, [r3, #0]
 80141b0:	697b      	ldr	r3, [r7, #20]
 80141b2:	1ad2      	subs	r2, r2, r3
 80141b4:	683b      	ldr	r3, [r7, #0]
 80141b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80141b8:	6878      	ldr	r0, [r7, #4]
 80141ba:	f7ff ff9b 	bl	80140f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80141be:	2300      	movs	r3, #0
 80141c0:	61fb      	str	r3, [r7, #28]
 80141c2:	e004      	b.n	80141ce <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80141c4:	683b      	ldr	r3, [r7, #0]
 80141c6:	2200      	movs	r2, #0
 80141c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80141ca:	2301      	movs	r3, #1
 80141cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80141ce:	f000 fd39 	bl	8014c44 <vPortExitCritical>

	return xReturn;
 80141d2:	69fb      	ldr	r3, [r7, #28]
}
 80141d4:	4618      	mov	r0, r3
 80141d6:	3720      	adds	r7, #32
 80141d8:	46bd      	mov	sp, r7
 80141da:	bd80      	pop	{r7, pc}
 80141dc:	20002970 	.word	0x20002970
 80141e0:	20002984 	.word	0x20002984

080141e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80141e4:	b480      	push	{r7}
 80141e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80141e8:	4b03      	ldr	r3, [pc, #12]	; (80141f8 <vTaskMissedYield+0x14>)
 80141ea:	2201      	movs	r2, #1
 80141ec:	601a      	str	r2, [r3, #0]
}
 80141ee:	bf00      	nop
 80141f0:	46bd      	mov	sp, r7
 80141f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141f6:	4770      	bx	lr
 80141f8:	20002980 	.word	0x20002980

080141fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80141fc:	b580      	push	{r7, lr}
 80141fe:	b082      	sub	sp, #8
 8014200:	af00      	add	r7, sp, #0
 8014202:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014204:	f000 f852 	bl	80142ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014208:	4b06      	ldr	r3, [pc, #24]	; (8014224 <prvIdleTask+0x28>)
 801420a:	681b      	ldr	r3, [r3, #0]
 801420c:	2b01      	cmp	r3, #1
 801420e:	d9f9      	bls.n	8014204 <prvIdleTask+0x8>
			{
				taskYIELD();
 8014210:	4b05      	ldr	r3, [pc, #20]	; (8014228 <prvIdleTask+0x2c>)
 8014212:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014216:	601a      	str	r2, [r3, #0]
 8014218:	f3bf 8f4f 	dsb	sy
 801421c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014220:	e7f0      	b.n	8014204 <prvIdleTask+0x8>
 8014222:	bf00      	nop
 8014224:	20002870 	.word	0x20002870
 8014228:	e000ed04 	.word	0xe000ed04

0801422c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801422c:	b580      	push	{r7, lr}
 801422e:	b082      	sub	sp, #8
 8014230:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014232:	2300      	movs	r3, #0
 8014234:	607b      	str	r3, [r7, #4]
 8014236:	e00c      	b.n	8014252 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014238:	687a      	ldr	r2, [r7, #4]
 801423a:	4613      	mov	r3, r2
 801423c:	009b      	lsls	r3, r3, #2
 801423e:	4413      	add	r3, r2
 8014240:	009b      	lsls	r3, r3, #2
 8014242:	4a12      	ldr	r2, [pc, #72]	; (801428c <prvInitialiseTaskLists+0x60>)
 8014244:	4413      	add	r3, r2
 8014246:	4618      	mov	r0, r3
 8014248:	f7fe fca1 	bl	8012b8e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	3301      	adds	r3, #1
 8014250:	607b      	str	r3, [r7, #4]
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	2b06      	cmp	r3, #6
 8014256:	d9ef      	bls.n	8014238 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014258:	480d      	ldr	r0, [pc, #52]	; (8014290 <prvInitialiseTaskLists+0x64>)
 801425a:	f7fe fc98 	bl	8012b8e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801425e:	480d      	ldr	r0, [pc, #52]	; (8014294 <prvInitialiseTaskLists+0x68>)
 8014260:	f7fe fc95 	bl	8012b8e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014264:	480c      	ldr	r0, [pc, #48]	; (8014298 <prvInitialiseTaskLists+0x6c>)
 8014266:	f7fe fc92 	bl	8012b8e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801426a:	480c      	ldr	r0, [pc, #48]	; (801429c <prvInitialiseTaskLists+0x70>)
 801426c:	f7fe fc8f 	bl	8012b8e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014270:	480b      	ldr	r0, [pc, #44]	; (80142a0 <prvInitialiseTaskLists+0x74>)
 8014272:	f7fe fc8c 	bl	8012b8e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014276:	4b0b      	ldr	r3, [pc, #44]	; (80142a4 <prvInitialiseTaskLists+0x78>)
 8014278:	4a05      	ldr	r2, [pc, #20]	; (8014290 <prvInitialiseTaskLists+0x64>)
 801427a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801427c:	4b0a      	ldr	r3, [pc, #40]	; (80142a8 <prvInitialiseTaskLists+0x7c>)
 801427e:	4a05      	ldr	r2, [pc, #20]	; (8014294 <prvInitialiseTaskLists+0x68>)
 8014280:	601a      	str	r2, [r3, #0]
}
 8014282:	bf00      	nop
 8014284:	3708      	adds	r7, #8
 8014286:	46bd      	mov	sp, r7
 8014288:	bd80      	pop	{r7, pc}
 801428a:	bf00      	nop
 801428c:	20002870 	.word	0x20002870
 8014290:	200028fc 	.word	0x200028fc
 8014294:	20002910 	.word	0x20002910
 8014298:	2000292c 	.word	0x2000292c
 801429c:	20002940 	.word	0x20002940
 80142a0:	20002958 	.word	0x20002958
 80142a4:	20002924 	.word	0x20002924
 80142a8:	20002928 	.word	0x20002928

080142ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80142ac:	b580      	push	{r7, lr}
 80142ae:	b082      	sub	sp, #8
 80142b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80142b2:	e019      	b.n	80142e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80142b4:	f000 fc96 	bl	8014be4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80142b8:	4b10      	ldr	r3, [pc, #64]	; (80142fc <prvCheckTasksWaitingTermination+0x50>)
 80142ba:	68db      	ldr	r3, [r3, #12]
 80142bc:	68db      	ldr	r3, [r3, #12]
 80142be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	3304      	adds	r3, #4
 80142c4:	4618      	mov	r0, r3
 80142c6:	f7fe fcec 	bl	8012ca2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80142ca:	4b0d      	ldr	r3, [pc, #52]	; (8014300 <prvCheckTasksWaitingTermination+0x54>)
 80142cc:	681b      	ldr	r3, [r3, #0]
 80142ce:	3b01      	subs	r3, #1
 80142d0:	4a0b      	ldr	r2, [pc, #44]	; (8014300 <prvCheckTasksWaitingTermination+0x54>)
 80142d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80142d4:	4b0b      	ldr	r3, [pc, #44]	; (8014304 <prvCheckTasksWaitingTermination+0x58>)
 80142d6:	681b      	ldr	r3, [r3, #0]
 80142d8:	3b01      	subs	r3, #1
 80142da:	4a0a      	ldr	r2, [pc, #40]	; (8014304 <prvCheckTasksWaitingTermination+0x58>)
 80142dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80142de:	f000 fcb1 	bl	8014c44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80142e2:	6878      	ldr	r0, [r7, #4]
 80142e4:	f000 f810 	bl	8014308 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80142e8:	4b06      	ldr	r3, [pc, #24]	; (8014304 <prvCheckTasksWaitingTermination+0x58>)
 80142ea:	681b      	ldr	r3, [r3, #0]
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d1e1      	bne.n	80142b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80142f0:	bf00      	nop
 80142f2:	bf00      	nop
 80142f4:	3708      	adds	r7, #8
 80142f6:	46bd      	mov	sp, r7
 80142f8:	bd80      	pop	{r7, pc}
 80142fa:	bf00      	nop
 80142fc:	20002940 	.word	0x20002940
 8014300:	2000296c 	.word	0x2000296c
 8014304:	20002954 	.word	0x20002954

08014308 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014308:	b580      	push	{r7, lr}
 801430a:	b084      	sub	sp, #16
 801430c:	af00      	add	r7, sp, #0
 801430e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014316:	2b00      	cmp	r3, #0
 8014318:	d108      	bne.n	801432c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801431e:	4618      	mov	r0, r3
 8014320:	f000 fe46 	bl	8014fb0 <vPortFree>
				vPortFree( pxTCB );
 8014324:	6878      	ldr	r0, [r7, #4]
 8014326:	f000 fe43 	bl	8014fb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801432a:	e018      	b.n	801435e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014332:	2b01      	cmp	r3, #1
 8014334:	d103      	bne.n	801433e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8014336:	6878      	ldr	r0, [r7, #4]
 8014338:	f000 fe3a 	bl	8014fb0 <vPortFree>
	}
 801433c:	e00f      	b.n	801435e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014344:	2b02      	cmp	r3, #2
 8014346:	d00a      	beq.n	801435e <prvDeleteTCB+0x56>
	__asm volatile
 8014348:	f04f 0350 	mov.w	r3, #80	; 0x50
 801434c:	f383 8811 	msr	BASEPRI, r3
 8014350:	f3bf 8f6f 	isb	sy
 8014354:	f3bf 8f4f 	dsb	sy
 8014358:	60fb      	str	r3, [r7, #12]
}
 801435a:	bf00      	nop
 801435c:	e7fe      	b.n	801435c <prvDeleteTCB+0x54>
	}
 801435e:	bf00      	nop
 8014360:	3710      	adds	r7, #16
 8014362:	46bd      	mov	sp, r7
 8014364:	bd80      	pop	{r7, pc}
	...

08014368 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014368:	b480      	push	{r7}
 801436a:	b083      	sub	sp, #12
 801436c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801436e:	4b0c      	ldr	r3, [pc, #48]	; (80143a0 <prvResetNextTaskUnblockTime+0x38>)
 8014370:	681b      	ldr	r3, [r3, #0]
 8014372:	681b      	ldr	r3, [r3, #0]
 8014374:	2b00      	cmp	r3, #0
 8014376:	d104      	bne.n	8014382 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014378:	4b0a      	ldr	r3, [pc, #40]	; (80143a4 <prvResetNextTaskUnblockTime+0x3c>)
 801437a:	f04f 32ff 	mov.w	r2, #4294967295
 801437e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014380:	e008      	b.n	8014394 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014382:	4b07      	ldr	r3, [pc, #28]	; (80143a0 <prvResetNextTaskUnblockTime+0x38>)
 8014384:	681b      	ldr	r3, [r3, #0]
 8014386:	68db      	ldr	r3, [r3, #12]
 8014388:	68db      	ldr	r3, [r3, #12]
 801438a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	685b      	ldr	r3, [r3, #4]
 8014390:	4a04      	ldr	r2, [pc, #16]	; (80143a4 <prvResetNextTaskUnblockTime+0x3c>)
 8014392:	6013      	str	r3, [r2, #0]
}
 8014394:	bf00      	nop
 8014396:	370c      	adds	r7, #12
 8014398:	46bd      	mov	sp, r7
 801439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801439e:	4770      	bx	lr
 80143a0:	20002924 	.word	0x20002924
 80143a4:	2000298c 	.word	0x2000298c

080143a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80143a8:	b480      	push	{r7}
 80143aa:	b083      	sub	sp, #12
 80143ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80143ae:	4b0b      	ldr	r3, [pc, #44]	; (80143dc <xTaskGetSchedulerState+0x34>)
 80143b0:	681b      	ldr	r3, [r3, #0]
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	d102      	bne.n	80143bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80143b6:	2301      	movs	r3, #1
 80143b8:	607b      	str	r3, [r7, #4]
 80143ba:	e008      	b.n	80143ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80143bc:	4b08      	ldr	r3, [pc, #32]	; (80143e0 <xTaskGetSchedulerState+0x38>)
 80143be:	681b      	ldr	r3, [r3, #0]
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	d102      	bne.n	80143ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80143c4:	2302      	movs	r3, #2
 80143c6:	607b      	str	r3, [r7, #4]
 80143c8:	e001      	b.n	80143ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80143ca:	2300      	movs	r3, #0
 80143cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80143ce:	687b      	ldr	r3, [r7, #4]
	}
 80143d0:	4618      	mov	r0, r3
 80143d2:	370c      	adds	r7, #12
 80143d4:	46bd      	mov	sp, r7
 80143d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143da:	4770      	bx	lr
 80143dc:	20002978 	.word	0x20002978
 80143e0:	20002994 	.word	0x20002994

080143e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80143e4:	b580      	push	{r7, lr}
 80143e6:	b086      	sub	sp, #24
 80143e8:	af00      	add	r7, sp, #0
 80143ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80143f0:	2300      	movs	r3, #0
 80143f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	d06e      	beq.n	80144d8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80143fa:	4b3a      	ldr	r3, [pc, #232]	; (80144e4 <xTaskPriorityDisinherit+0x100>)
 80143fc:	681b      	ldr	r3, [r3, #0]
 80143fe:	693a      	ldr	r2, [r7, #16]
 8014400:	429a      	cmp	r2, r3
 8014402:	d00a      	beq.n	801441a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8014404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014408:	f383 8811 	msr	BASEPRI, r3
 801440c:	f3bf 8f6f 	isb	sy
 8014410:	f3bf 8f4f 	dsb	sy
 8014414:	60fb      	str	r3, [r7, #12]
}
 8014416:	bf00      	nop
 8014418:	e7fe      	b.n	8014418 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801441a:	693b      	ldr	r3, [r7, #16]
 801441c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801441e:	2b00      	cmp	r3, #0
 8014420:	d10a      	bne.n	8014438 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8014422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014426:	f383 8811 	msr	BASEPRI, r3
 801442a:	f3bf 8f6f 	isb	sy
 801442e:	f3bf 8f4f 	dsb	sy
 8014432:	60bb      	str	r3, [r7, #8]
}
 8014434:	bf00      	nop
 8014436:	e7fe      	b.n	8014436 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8014438:	693b      	ldr	r3, [r7, #16]
 801443a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801443c:	1e5a      	subs	r2, r3, #1
 801443e:	693b      	ldr	r3, [r7, #16]
 8014440:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014442:	693b      	ldr	r3, [r7, #16]
 8014444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014446:	693b      	ldr	r3, [r7, #16]
 8014448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801444a:	429a      	cmp	r2, r3
 801444c:	d044      	beq.n	80144d8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801444e:	693b      	ldr	r3, [r7, #16]
 8014450:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014452:	2b00      	cmp	r3, #0
 8014454:	d140      	bne.n	80144d8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014456:	693b      	ldr	r3, [r7, #16]
 8014458:	3304      	adds	r3, #4
 801445a:	4618      	mov	r0, r3
 801445c:	f7fe fc21 	bl	8012ca2 <uxListRemove>
 8014460:	4603      	mov	r3, r0
 8014462:	2b00      	cmp	r3, #0
 8014464:	d115      	bne.n	8014492 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8014466:	693b      	ldr	r3, [r7, #16]
 8014468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801446a:	491f      	ldr	r1, [pc, #124]	; (80144e8 <xTaskPriorityDisinherit+0x104>)
 801446c:	4613      	mov	r3, r2
 801446e:	009b      	lsls	r3, r3, #2
 8014470:	4413      	add	r3, r2
 8014472:	009b      	lsls	r3, r3, #2
 8014474:	440b      	add	r3, r1
 8014476:	681b      	ldr	r3, [r3, #0]
 8014478:	2b00      	cmp	r3, #0
 801447a:	d10a      	bne.n	8014492 <xTaskPriorityDisinherit+0xae>
 801447c:	693b      	ldr	r3, [r7, #16]
 801447e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014480:	2201      	movs	r2, #1
 8014482:	fa02 f303 	lsl.w	r3, r2, r3
 8014486:	43da      	mvns	r2, r3
 8014488:	4b18      	ldr	r3, [pc, #96]	; (80144ec <xTaskPriorityDisinherit+0x108>)
 801448a:	681b      	ldr	r3, [r3, #0]
 801448c:	4013      	ands	r3, r2
 801448e:	4a17      	ldr	r2, [pc, #92]	; (80144ec <xTaskPriorityDisinherit+0x108>)
 8014490:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014492:	693b      	ldr	r3, [r7, #16]
 8014494:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014496:	693b      	ldr	r3, [r7, #16]
 8014498:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801449a:	693b      	ldr	r3, [r7, #16]
 801449c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801449e:	f1c3 0207 	rsb	r2, r3, #7
 80144a2:	693b      	ldr	r3, [r7, #16]
 80144a4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80144a6:	693b      	ldr	r3, [r7, #16]
 80144a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144aa:	2201      	movs	r2, #1
 80144ac:	409a      	lsls	r2, r3
 80144ae:	4b0f      	ldr	r3, [pc, #60]	; (80144ec <xTaskPriorityDisinherit+0x108>)
 80144b0:	681b      	ldr	r3, [r3, #0]
 80144b2:	4313      	orrs	r3, r2
 80144b4:	4a0d      	ldr	r2, [pc, #52]	; (80144ec <xTaskPriorityDisinherit+0x108>)
 80144b6:	6013      	str	r3, [r2, #0]
 80144b8:	693b      	ldr	r3, [r7, #16]
 80144ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80144bc:	4613      	mov	r3, r2
 80144be:	009b      	lsls	r3, r3, #2
 80144c0:	4413      	add	r3, r2
 80144c2:	009b      	lsls	r3, r3, #2
 80144c4:	4a08      	ldr	r2, [pc, #32]	; (80144e8 <xTaskPriorityDisinherit+0x104>)
 80144c6:	441a      	add	r2, r3
 80144c8:	693b      	ldr	r3, [r7, #16]
 80144ca:	3304      	adds	r3, #4
 80144cc:	4619      	mov	r1, r3
 80144ce:	4610      	mov	r0, r2
 80144d0:	f7fe fb8a 	bl	8012be8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80144d4:	2301      	movs	r3, #1
 80144d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80144d8:	697b      	ldr	r3, [r7, #20]
	}
 80144da:	4618      	mov	r0, r3
 80144dc:	3718      	adds	r7, #24
 80144de:	46bd      	mov	sp, r7
 80144e0:	bd80      	pop	{r7, pc}
 80144e2:	bf00      	nop
 80144e4:	2000286c 	.word	0x2000286c
 80144e8:	20002870 	.word	0x20002870
 80144ec:	20002974 	.word	0x20002974

080144f0 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80144f0:	b580      	push	{r7, lr}
 80144f2:	b086      	sub	sp, #24
 80144f4:	af00      	add	r7, sp, #0
 80144f6:	60f8      	str	r0, [r7, #12]
 80144f8:	60b9      	str	r1, [r7, #8]
 80144fa:	607a      	str	r2, [r7, #4]
 80144fc:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80144fe:	f000 fb71 	bl	8014be4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8014502:	4b26      	ldr	r3, [pc, #152]	; (801459c <xTaskNotifyWait+0xac>)
 8014504:	681b      	ldr	r3, [r3, #0]
 8014506:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801450a:	b2db      	uxtb	r3, r3
 801450c:	2b02      	cmp	r3, #2
 801450e:	d01a      	beq.n	8014546 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8014510:	4b22      	ldr	r3, [pc, #136]	; (801459c <xTaskNotifyWait+0xac>)
 8014512:	681b      	ldr	r3, [r3, #0]
 8014514:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8014516:	68fa      	ldr	r2, [r7, #12]
 8014518:	43d2      	mvns	r2, r2
 801451a:	400a      	ands	r2, r1
 801451c:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801451e:	4b1f      	ldr	r3, [pc, #124]	; (801459c <xTaskNotifyWait+0xac>)
 8014520:	681b      	ldr	r3, [r3, #0]
 8014522:	2201      	movs	r2, #1
 8014524:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8014528:	683b      	ldr	r3, [r7, #0]
 801452a:	2b00      	cmp	r3, #0
 801452c:	d00b      	beq.n	8014546 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801452e:	2101      	movs	r1, #1
 8014530:	6838      	ldr	r0, [r7, #0]
 8014532:	f000 f9c7 	bl	80148c4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8014536:	4b1a      	ldr	r3, [pc, #104]	; (80145a0 <xTaskNotifyWait+0xb0>)
 8014538:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801453c:	601a      	str	r2, [r3, #0]
 801453e:	f3bf 8f4f 	dsb	sy
 8014542:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8014546:	f000 fb7d 	bl	8014c44 <vPortExitCritical>

		taskENTER_CRITICAL();
 801454a:	f000 fb4b 	bl	8014be4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	2b00      	cmp	r3, #0
 8014552:	d004      	beq.n	801455e <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8014554:	4b11      	ldr	r3, [pc, #68]	; (801459c <xTaskNotifyWait+0xac>)
 8014556:	681b      	ldr	r3, [r3, #0]
 8014558:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801455e:	4b0f      	ldr	r3, [pc, #60]	; (801459c <xTaskNotifyWait+0xac>)
 8014560:	681b      	ldr	r3, [r3, #0]
 8014562:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014566:	b2db      	uxtb	r3, r3
 8014568:	2b02      	cmp	r3, #2
 801456a:	d002      	beq.n	8014572 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 801456c:	2300      	movs	r3, #0
 801456e:	617b      	str	r3, [r7, #20]
 8014570:	e008      	b.n	8014584 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8014572:	4b0a      	ldr	r3, [pc, #40]	; (801459c <xTaskNotifyWait+0xac>)
 8014574:	681b      	ldr	r3, [r3, #0]
 8014576:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8014578:	68ba      	ldr	r2, [r7, #8]
 801457a:	43d2      	mvns	r2, r2
 801457c:	400a      	ands	r2, r1
 801457e:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 8014580:	2301      	movs	r3, #1
 8014582:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014584:	4b05      	ldr	r3, [pc, #20]	; (801459c <xTaskNotifyWait+0xac>)
 8014586:	681b      	ldr	r3, [r3, #0]
 8014588:	2200      	movs	r2, #0
 801458a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 801458e:	f000 fb59 	bl	8014c44 <vPortExitCritical>

		return xReturn;
 8014592:	697b      	ldr	r3, [r7, #20]
	}
 8014594:	4618      	mov	r0, r3
 8014596:	3718      	adds	r7, #24
 8014598:	46bd      	mov	sp, r7
 801459a:	bd80      	pop	{r7, pc}
 801459c:	2000286c 	.word	0x2000286c
 80145a0:	e000ed04 	.word	0xe000ed04

080145a4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80145a4:	b580      	push	{r7, lr}
 80145a6:	b08a      	sub	sp, #40	; 0x28
 80145a8:	af00      	add	r7, sp, #0
 80145aa:	60f8      	str	r0, [r7, #12]
 80145ac:	60b9      	str	r1, [r7, #8]
 80145ae:	603b      	str	r3, [r7, #0]
 80145b0:	4613      	mov	r3, r2
 80145b2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80145b4:	2301      	movs	r3, #1
 80145b6:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80145b8:	68fb      	ldr	r3, [r7, #12]
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	d10a      	bne.n	80145d4 <xTaskGenericNotify+0x30>
	__asm volatile
 80145be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145c2:	f383 8811 	msr	BASEPRI, r3
 80145c6:	f3bf 8f6f 	isb	sy
 80145ca:	f3bf 8f4f 	dsb	sy
 80145ce:	61bb      	str	r3, [r7, #24]
}
 80145d0:	bf00      	nop
 80145d2:	e7fe      	b.n	80145d2 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 80145d4:	68fb      	ldr	r3, [r7, #12]
 80145d6:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80145d8:	f000 fb04 	bl	8014be4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80145dc:	683b      	ldr	r3, [r7, #0]
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d003      	beq.n	80145ea <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80145e2:	6a3b      	ldr	r3, [r7, #32]
 80145e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80145e6:	683b      	ldr	r3, [r7, #0]
 80145e8:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80145ea:	6a3b      	ldr	r3, [r7, #32]
 80145ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80145f0:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80145f2:	6a3b      	ldr	r3, [r7, #32]
 80145f4:	2202      	movs	r2, #2
 80145f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 80145fa:	79fb      	ldrb	r3, [r7, #7]
 80145fc:	2b04      	cmp	r3, #4
 80145fe:	d828      	bhi.n	8014652 <xTaskGenericNotify+0xae>
 8014600:	a201      	add	r2, pc, #4	; (adr r2, 8014608 <xTaskGenericNotify+0x64>)
 8014602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014606:	bf00      	nop
 8014608:	08014673 	.word	0x08014673
 801460c:	0801461d 	.word	0x0801461d
 8014610:	0801462b 	.word	0x0801462b
 8014614:	08014637 	.word	0x08014637
 8014618:	0801463f 	.word	0x0801463f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 801461c:	6a3b      	ldr	r3, [r7, #32]
 801461e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014620:	68bb      	ldr	r3, [r7, #8]
 8014622:	431a      	orrs	r2, r3
 8014624:	6a3b      	ldr	r3, [r7, #32]
 8014626:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014628:	e026      	b.n	8014678 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801462a:	6a3b      	ldr	r3, [r7, #32]
 801462c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801462e:	1c5a      	adds	r2, r3, #1
 8014630:	6a3b      	ldr	r3, [r7, #32]
 8014632:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014634:	e020      	b.n	8014678 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8014636:	6a3b      	ldr	r3, [r7, #32]
 8014638:	68ba      	ldr	r2, [r7, #8]
 801463a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 801463c:	e01c      	b.n	8014678 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801463e:	7ffb      	ldrb	r3, [r7, #31]
 8014640:	2b02      	cmp	r3, #2
 8014642:	d003      	beq.n	801464c <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8014644:	6a3b      	ldr	r3, [r7, #32]
 8014646:	68ba      	ldr	r2, [r7, #8]
 8014648:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801464a:	e015      	b.n	8014678 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 801464c:	2300      	movs	r3, #0
 801464e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8014650:	e012      	b.n	8014678 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8014652:	6a3b      	ldr	r3, [r7, #32]
 8014654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014656:	f1b3 3fff 	cmp.w	r3, #4294967295
 801465a:	d00c      	beq.n	8014676 <xTaskGenericNotify+0xd2>
	__asm volatile
 801465c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014660:	f383 8811 	msr	BASEPRI, r3
 8014664:	f3bf 8f6f 	isb	sy
 8014668:	f3bf 8f4f 	dsb	sy
 801466c:	617b      	str	r3, [r7, #20]
}
 801466e:	bf00      	nop
 8014670:	e7fe      	b.n	8014670 <xTaskGenericNotify+0xcc>
					break;
 8014672:	bf00      	nop
 8014674:	e000      	b.n	8014678 <xTaskGenericNotify+0xd4>

					break;
 8014676:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8014678:	7ffb      	ldrb	r3, [r7, #31]
 801467a:	2b01      	cmp	r3, #1
 801467c:	d139      	bne.n	80146f2 <xTaskGenericNotify+0x14e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801467e:	6a3b      	ldr	r3, [r7, #32]
 8014680:	3304      	adds	r3, #4
 8014682:	4618      	mov	r0, r3
 8014684:	f7fe fb0d 	bl	8012ca2 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8014688:	6a3b      	ldr	r3, [r7, #32]
 801468a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801468c:	2201      	movs	r2, #1
 801468e:	409a      	lsls	r2, r3
 8014690:	4b1b      	ldr	r3, [pc, #108]	; (8014700 <xTaskGenericNotify+0x15c>)
 8014692:	681b      	ldr	r3, [r3, #0]
 8014694:	4313      	orrs	r3, r2
 8014696:	4a1a      	ldr	r2, [pc, #104]	; (8014700 <xTaskGenericNotify+0x15c>)
 8014698:	6013      	str	r3, [r2, #0]
 801469a:	6a3b      	ldr	r3, [r7, #32]
 801469c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801469e:	4613      	mov	r3, r2
 80146a0:	009b      	lsls	r3, r3, #2
 80146a2:	4413      	add	r3, r2
 80146a4:	009b      	lsls	r3, r3, #2
 80146a6:	4a17      	ldr	r2, [pc, #92]	; (8014704 <xTaskGenericNotify+0x160>)
 80146a8:	441a      	add	r2, r3
 80146aa:	6a3b      	ldr	r3, [r7, #32]
 80146ac:	3304      	adds	r3, #4
 80146ae:	4619      	mov	r1, r3
 80146b0:	4610      	mov	r0, r2
 80146b2:	f7fe fa99 	bl	8012be8 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80146b6:	6a3b      	ldr	r3, [r7, #32]
 80146b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	d00a      	beq.n	80146d4 <xTaskGenericNotify+0x130>
	__asm volatile
 80146be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146c2:	f383 8811 	msr	BASEPRI, r3
 80146c6:	f3bf 8f6f 	isb	sy
 80146ca:	f3bf 8f4f 	dsb	sy
 80146ce:	613b      	str	r3, [r7, #16]
}
 80146d0:	bf00      	nop
 80146d2:	e7fe      	b.n	80146d2 <xTaskGenericNotify+0x12e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80146d4:	6a3b      	ldr	r3, [r7, #32]
 80146d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80146d8:	4b0b      	ldr	r3, [pc, #44]	; (8014708 <xTaskGenericNotify+0x164>)
 80146da:	681b      	ldr	r3, [r3, #0]
 80146dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146de:	429a      	cmp	r2, r3
 80146e0:	d907      	bls.n	80146f2 <xTaskGenericNotify+0x14e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80146e2:	4b0a      	ldr	r3, [pc, #40]	; (801470c <xTaskGenericNotify+0x168>)
 80146e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80146e8:	601a      	str	r2, [r3, #0]
 80146ea:	f3bf 8f4f 	dsb	sy
 80146ee:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80146f2:	f000 faa7 	bl	8014c44 <vPortExitCritical>

		return xReturn;
 80146f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80146f8:	4618      	mov	r0, r3
 80146fa:	3728      	adds	r7, #40	; 0x28
 80146fc:	46bd      	mov	sp, r7
 80146fe:	bd80      	pop	{r7, pc}
 8014700:	20002974 	.word	0x20002974
 8014704:	20002870 	.word	0x20002870
 8014708:	2000286c 	.word	0x2000286c
 801470c:	e000ed04 	.word	0xe000ed04

08014710 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8014710:	b580      	push	{r7, lr}
 8014712:	b08e      	sub	sp, #56	; 0x38
 8014714:	af00      	add	r7, sp, #0
 8014716:	60f8      	str	r0, [r7, #12]
 8014718:	60b9      	str	r1, [r7, #8]
 801471a:	603b      	str	r3, [r7, #0]
 801471c:	4613      	mov	r3, r2
 801471e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8014720:	2301      	movs	r3, #1
 8014722:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8014724:	68fb      	ldr	r3, [r7, #12]
 8014726:	2b00      	cmp	r3, #0
 8014728:	d10a      	bne.n	8014740 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 801472a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801472e:	f383 8811 	msr	BASEPRI, r3
 8014732:	f3bf 8f6f 	isb	sy
 8014736:	f3bf 8f4f 	dsb	sy
 801473a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801473c:	bf00      	nop
 801473e:	e7fe      	b.n	801473e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014740:	f000 fb32 	bl	8014da8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8014744:	68fb      	ldr	r3, [r7, #12]
 8014746:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8014748:	f3ef 8211 	mrs	r2, BASEPRI
 801474c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014750:	f383 8811 	msr	BASEPRI, r3
 8014754:	f3bf 8f6f 	isb	sy
 8014758:	f3bf 8f4f 	dsb	sy
 801475c:	623a      	str	r2, [r7, #32]
 801475e:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8014760:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014762:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8014764:	683b      	ldr	r3, [r7, #0]
 8014766:	2b00      	cmp	r3, #0
 8014768:	d003      	beq.n	8014772 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801476a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801476c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801476e:	683b      	ldr	r3, [r7, #0]
 8014770:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8014772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014774:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014778:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801477c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801477e:	2202      	movs	r2, #2
 8014780:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8014784:	79fb      	ldrb	r3, [r7, #7]
 8014786:	2b04      	cmp	r3, #4
 8014788:	d828      	bhi.n	80147dc <xTaskGenericNotifyFromISR+0xcc>
 801478a:	a201      	add	r2, pc, #4	; (adr r2, 8014790 <xTaskGenericNotifyFromISR+0x80>)
 801478c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014790:	080147fd 	.word	0x080147fd
 8014794:	080147a5 	.word	0x080147a5
 8014798:	080147b3 	.word	0x080147b3
 801479c:	080147bf 	.word	0x080147bf
 80147a0:	080147c7 	.word	0x080147c7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80147a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80147a8:	68bb      	ldr	r3, [r7, #8]
 80147aa:	431a      	orrs	r2, r3
 80147ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147ae:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80147b0:	e027      	b.n	8014802 <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80147b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80147b6:	1c5a      	adds	r2, r3, #1
 80147b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147ba:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80147bc:	e021      	b.n	8014802 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80147be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147c0:	68ba      	ldr	r2, [r7, #8]
 80147c2:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80147c4:	e01d      	b.n	8014802 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80147c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80147ca:	2b02      	cmp	r3, #2
 80147cc:	d003      	beq.n	80147d6 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80147ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147d0:	68ba      	ldr	r2, [r7, #8]
 80147d2:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80147d4:	e015      	b.n	8014802 <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 80147d6:	2300      	movs	r3, #0
 80147d8:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80147da:	e012      	b.n	8014802 <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80147dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80147e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80147e4:	d00c      	beq.n	8014800 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 80147e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147ea:	f383 8811 	msr	BASEPRI, r3
 80147ee:	f3bf 8f6f 	isb	sy
 80147f2:	f3bf 8f4f 	dsb	sy
 80147f6:	61bb      	str	r3, [r7, #24]
}
 80147f8:	bf00      	nop
 80147fa:	e7fe      	b.n	80147fa <xTaskGenericNotifyFromISR+0xea>
					break;
 80147fc:	bf00      	nop
 80147fe:	e000      	b.n	8014802 <xTaskGenericNotifyFromISR+0xf2>
					break;
 8014800:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8014802:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8014806:	2b01      	cmp	r3, #1
 8014808:	d145      	bne.n	8014896 <xTaskGenericNotifyFromISR+0x186>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801480a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801480c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801480e:	2b00      	cmp	r3, #0
 8014810:	d00a      	beq.n	8014828 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 8014812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014816:	f383 8811 	msr	BASEPRI, r3
 801481a:	f3bf 8f6f 	isb	sy
 801481e:	f3bf 8f4f 	dsb	sy
 8014822:	617b      	str	r3, [r7, #20]
}
 8014824:	bf00      	nop
 8014826:	e7fe      	b.n	8014826 <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014828:	4b20      	ldr	r3, [pc, #128]	; (80148ac <xTaskGenericNotifyFromISR+0x19c>)
 801482a:	681b      	ldr	r3, [r3, #0]
 801482c:	2b00      	cmp	r3, #0
 801482e:	d11c      	bne.n	801486a <xTaskGenericNotifyFromISR+0x15a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014832:	3304      	adds	r3, #4
 8014834:	4618      	mov	r0, r3
 8014836:	f7fe fa34 	bl	8012ca2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801483a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801483c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801483e:	2201      	movs	r2, #1
 8014840:	409a      	lsls	r2, r3
 8014842:	4b1b      	ldr	r3, [pc, #108]	; (80148b0 <xTaskGenericNotifyFromISR+0x1a0>)
 8014844:	681b      	ldr	r3, [r3, #0]
 8014846:	4313      	orrs	r3, r2
 8014848:	4a19      	ldr	r2, [pc, #100]	; (80148b0 <xTaskGenericNotifyFromISR+0x1a0>)
 801484a:	6013      	str	r3, [r2, #0]
 801484c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801484e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014850:	4613      	mov	r3, r2
 8014852:	009b      	lsls	r3, r3, #2
 8014854:	4413      	add	r3, r2
 8014856:	009b      	lsls	r3, r3, #2
 8014858:	4a16      	ldr	r2, [pc, #88]	; (80148b4 <xTaskGenericNotifyFromISR+0x1a4>)
 801485a:	441a      	add	r2, r3
 801485c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801485e:	3304      	adds	r3, #4
 8014860:	4619      	mov	r1, r3
 8014862:	4610      	mov	r0, r2
 8014864:	f7fe f9c0 	bl	8012be8 <vListInsertEnd>
 8014868:	e005      	b.n	8014876 <xTaskGenericNotifyFromISR+0x166>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801486a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801486c:	3318      	adds	r3, #24
 801486e:	4619      	mov	r1, r3
 8014870:	4811      	ldr	r0, [pc, #68]	; (80148b8 <xTaskGenericNotifyFromISR+0x1a8>)
 8014872:	f7fe f9b9 	bl	8012be8 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801487a:	4b10      	ldr	r3, [pc, #64]	; (80148bc <xTaskGenericNotifyFromISR+0x1ac>)
 801487c:	681b      	ldr	r3, [r3, #0]
 801487e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014880:	429a      	cmp	r2, r3
 8014882:	d908      	bls.n	8014896 <xTaskGenericNotifyFromISR+0x186>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8014884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014886:	2b00      	cmp	r3, #0
 8014888:	d002      	beq.n	8014890 <xTaskGenericNotifyFromISR+0x180>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 801488a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801488c:	2201      	movs	r2, #1
 801488e:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8014890:	4b0b      	ldr	r3, [pc, #44]	; (80148c0 <xTaskGenericNotifyFromISR+0x1b0>)
 8014892:	2201      	movs	r2, #1
 8014894:	601a      	str	r2, [r3, #0]
 8014896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014898:	613b      	str	r3, [r7, #16]
	__asm volatile
 801489a:	693b      	ldr	r3, [r7, #16]
 801489c:	f383 8811 	msr	BASEPRI, r3
}
 80148a0:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80148a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80148a4:	4618      	mov	r0, r3
 80148a6:	3738      	adds	r7, #56	; 0x38
 80148a8:	46bd      	mov	sp, r7
 80148aa:	bd80      	pop	{r7, pc}
 80148ac:	20002994 	.word	0x20002994
 80148b0:	20002974 	.word	0x20002974
 80148b4:	20002870 	.word	0x20002870
 80148b8:	2000292c 	.word	0x2000292c
 80148bc:	2000286c 	.word	0x2000286c
 80148c0:	20002980 	.word	0x20002980

080148c4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80148c4:	b580      	push	{r7, lr}
 80148c6:	b084      	sub	sp, #16
 80148c8:	af00      	add	r7, sp, #0
 80148ca:	6078      	str	r0, [r7, #4]
 80148cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80148ce:	4b29      	ldr	r3, [pc, #164]	; (8014974 <prvAddCurrentTaskToDelayedList+0xb0>)
 80148d0:	681b      	ldr	r3, [r3, #0]
 80148d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80148d4:	4b28      	ldr	r3, [pc, #160]	; (8014978 <prvAddCurrentTaskToDelayedList+0xb4>)
 80148d6:	681b      	ldr	r3, [r3, #0]
 80148d8:	3304      	adds	r3, #4
 80148da:	4618      	mov	r0, r3
 80148dc:	f7fe f9e1 	bl	8012ca2 <uxListRemove>
 80148e0:	4603      	mov	r3, r0
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d10b      	bne.n	80148fe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80148e6:	4b24      	ldr	r3, [pc, #144]	; (8014978 <prvAddCurrentTaskToDelayedList+0xb4>)
 80148e8:	681b      	ldr	r3, [r3, #0]
 80148ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148ec:	2201      	movs	r2, #1
 80148ee:	fa02 f303 	lsl.w	r3, r2, r3
 80148f2:	43da      	mvns	r2, r3
 80148f4:	4b21      	ldr	r3, [pc, #132]	; (801497c <prvAddCurrentTaskToDelayedList+0xb8>)
 80148f6:	681b      	ldr	r3, [r3, #0]
 80148f8:	4013      	ands	r3, r2
 80148fa:	4a20      	ldr	r2, [pc, #128]	; (801497c <prvAddCurrentTaskToDelayedList+0xb8>)
 80148fc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014904:	d10a      	bne.n	801491c <prvAddCurrentTaskToDelayedList+0x58>
 8014906:	683b      	ldr	r3, [r7, #0]
 8014908:	2b00      	cmp	r3, #0
 801490a:	d007      	beq.n	801491c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801490c:	4b1a      	ldr	r3, [pc, #104]	; (8014978 <prvAddCurrentTaskToDelayedList+0xb4>)
 801490e:	681b      	ldr	r3, [r3, #0]
 8014910:	3304      	adds	r3, #4
 8014912:	4619      	mov	r1, r3
 8014914:	481a      	ldr	r0, [pc, #104]	; (8014980 <prvAddCurrentTaskToDelayedList+0xbc>)
 8014916:	f7fe f967 	bl	8012be8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801491a:	e026      	b.n	801496a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801491c:	68fa      	ldr	r2, [r7, #12]
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	4413      	add	r3, r2
 8014922:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014924:	4b14      	ldr	r3, [pc, #80]	; (8014978 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014926:	681b      	ldr	r3, [r3, #0]
 8014928:	68ba      	ldr	r2, [r7, #8]
 801492a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801492c:	68ba      	ldr	r2, [r7, #8]
 801492e:	68fb      	ldr	r3, [r7, #12]
 8014930:	429a      	cmp	r2, r3
 8014932:	d209      	bcs.n	8014948 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014934:	4b13      	ldr	r3, [pc, #76]	; (8014984 <prvAddCurrentTaskToDelayedList+0xc0>)
 8014936:	681a      	ldr	r2, [r3, #0]
 8014938:	4b0f      	ldr	r3, [pc, #60]	; (8014978 <prvAddCurrentTaskToDelayedList+0xb4>)
 801493a:	681b      	ldr	r3, [r3, #0]
 801493c:	3304      	adds	r3, #4
 801493e:	4619      	mov	r1, r3
 8014940:	4610      	mov	r0, r2
 8014942:	f7fe f975 	bl	8012c30 <vListInsert>
}
 8014946:	e010      	b.n	801496a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014948:	4b0f      	ldr	r3, [pc, #60]	; (8014988 <prvAddCurrentTaskToDelayedList+0xc4>)
 801494a:	681a      	ldr	r2, [r3, #0]
 801494c:	4b0a      	ldr	r3, [pc, #40]	; (8014978 <prvAddCurrentTaskToDelayedList+0xb4>)
 801494e:	681b      	ldr	r3, [r3, #0]
 8014950:	3304      	adds	r3, #4
 8014952:	4619      	mov	r1, r3
 8014954:	4610      	mov	r0, r2
 8014956:	f7fe f96b 	bl	8012c30 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801495a:	4b0c      	ldr	r3, [pc, #48]	; (801498c <prvAddCurrentTaskToDelayedList+0xc8>)
 801495c:	681b      	ldr	r3, [r3, #0]
 801495e:	68ba      	ldr	r2, [r7, #8]
 8014960:	429a      	cmp	r2, r3
 8014962:	d202      	bcs.n	801496a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8014964:	4a09      	ldr	r2, [pc, #36]	; (801498c <prvAddCurrentTaskToDelayedList+0xc8>)
 8014966:	68bb      	ldr	r3, [r7, #8]
 8014968:	6013      	str	r3, [r2, #0]
}
 801496a:	bf00      	nop
 801496c:	3710      	adds	r7, #16
 801496e:	46bd      	mov	sp, r7
 8014970:	bd80      	pop	{r7, pc}
 8014972:	bf00      	nop
 8014974:	20002970 	.word	0x20002970
 8014978:	2000286c 	.word	0x2000286c
 801497c:	20002974 	.word	0x20002974
 8014980:	20002958 	.word	0x20002958
 8014984:	20002928 	.word	0x20002928
 8014988:	20002924 	.word	0x20002924
 801498c:	2000298c 	.word	0x2000298c

08014990 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014990:	b480      	push	{r7}
 8014992:	b085      	sub	sp, #20
 8014994:	af00      	add	r7, sp, #0
 8014996:	60f8      	str	r0, [r7, #12]
 8014998:	60b9      	str	r1, [r7, #8]
 801499a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801499c:	68fb      	ldr	r3, [r7, #12]
 801499e:	3b04      	subs	r3, #4
 80149a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80149a2:	68fb      	ldr	r3, [r7, #12]
 80149a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80149a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80149aa:	68fb      	ldr	r3, [r7, #12]
 80149ac:	3b04      	subs	r3, #4
 80149ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80149b0:	68bb      	ldr	r3, [r7, #8]
 80149b2:	f023 0201 	bic.w	r2, r3, #1
 80149b6:	68fb      	ldr	r3, [r7, #12]
 80149b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80149ba:	68fb      	ldr	r3, [r7, #12]
 80149bc:	3b04      	subs	r3, #4
 80149be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80149c0:	4a0c      	ldr	r2, [pc, #48]	; (80149f4 <pxPortInitialiseStack+0x64>)
 80149c2:	68fb      	ldr	r3, [r7, #12]
 80149c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80149c6:	68fb      	ldr	r3, [r7, #12]
 80149c8:	3b14      	subs	r3, #20
 80149ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80149cc:	687a      	ldr	r2, [r7, #4]
 80149ce:	68fb      	ldr	r3, [r7, #12]
 80149d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80149d2:	68fb      	ldr	r3, [r7, #12]
 80149d4:	3b04      	subs	r3, #4
 80149d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80149d8:	68fb      	ldr	r3, [r7, #12]
 80149da:	f06f 0202 	mvn.w	r2, #2
 80149de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80149e0:	68fb      	ldr	r3, [r7, #12]
 80149e2:	3b20      	subs	r3, #32
 80149e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80149e6:	68fb      	ldr	r3, [r7, #12]
}
 80149e8:	4618      	mov	r0, r3
 80149ea:	3714      	adds	r7, #20
 80149ec:	46bd      	mov	sp, r7
 80149ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149f2:	4770      	bx	lr
 80149f4:	080149f9 	.word	0x080149f9

080149f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80149f8:	b480      	push	{r7}
 80149fa:	b085      	sub	sp, #20
 80149fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80149fe:	2300      	movs	r3, #0
 8014a00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014a02:	4b12      	ldr	r3, [pc, #72]	; (8014a4c <prvTaskExitError+0x54>)
 8014a04:	681b      	ldr	r3, [r3, #0]
 8014a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a0a:	d00a      	beq.n	8014a22 <prvTaskExitError+0x2a>
	__asm volatile
 8014a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a10:	f383 8811 	msr	BASEPRI, r3
 8014a14:	f3bf 8f6f 	isb	sy
 8014a18:	f3bf 8f4f 	dsb	sy
 8014a1c:	60fb      	str	r3, [r7, #12]
}
 8014a1e:	bf00      	nop
 8014a20:	e7fe      	b.n	8014a20 <prvTaskExitError+0x28>
	__asm volatile
 8014a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a26:	f383 8811 	msr	BASEPRI, r3
 8014a2a:	f3bf 8f6f 	isb	sy
 8014a2e:	f3bf 8f4f 	dsb	sy
 8014a32:	60bb      	str	r3, [r7, #8]
}
 8014a34:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014a36:	bf00      	nop
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d0fc      	beq.n	8014a38 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014a3e:	bf00      	nop
 8014a40:	bf00      	nop
 8014a42:	3714      	adds	r7, #20
 8014a44:	46bd      	mov	sp, r7
 8014a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a4a:	4770      	bx	lr
 8014a4c:	200021a4 	.word	0x200021a4

08014a50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014a50:	4b07      	ldr	r3, [pc, #28]	; (8014a70 <pxCurrentTCBConst2>)
 8014a52:	6819      	ldr	r1, [r3, #0]
 8014a54:	6808      	ldr	r0, [r1, #0]
 8014a56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a5a:	f380 8809 	msr	PSP, r0
 8014a5e:	f3bf 8f6f 	isb	sy
 8014a62:	f04f 0000 	mov.w	r0, #0
 8014a66:	f380 8811 	msr	BASEPRI, r0
 8014a6a:	4770      	bx	lr
 8014a6c:	f3af 8000 	nop.w

08014a70 <pxCurrentTCBConst2>:
 8014a70:	2000286c 	.word	0x2000286c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014a74:	bf00      	nop
 8014a76:	bf00      	nop

08014a78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014a78:	4808      	ldr	r0, [pc, #32]	; (8014a9c <prvPortStartFirstTask+0x24>)
 8014a7a:	6800      	ldr	r0, [r0, #0]
 8014a7c:	6800      	ldr	r0, [r0, #0]
 8014a7e:	f380 8808 	msr	MSP, r0
 8014a82:	f04f 0000 	mov.w	r0, #0
 8014a86:	f380 8814 	msr	CONTROL, r0
 8014a8a:	b662      	cpsie	i
 8014a8c:	b661      	cpsie	f
 8014a8e:	f3bf 8f4f 	dsb	sy
 8014a92:	f3bf 8f6f 	isb	sy
 8014a96:	df00      	svc	0
 8014a98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8014a9a:	bf00      	nop
 8014a9c:	e000ed08 	.word	0xe000ed08

08014aa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014aa0:	b580      	push	{r7, lr}
 8014aa2:	b086      	sub	sp, #24
 8014aa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014aa6:	4b46      	ldr	r3, [pc, #280]	; (8014bc0 <xPortStartScheduler+0x120>)
 8014aa8:	681b      	ldr	r3, [r3, #0]
 8014aaa:	4a46      	ldr	r2, [pc, #280]	; (8014bc4 <xPortStartScheduler+0x124>)
 8014aac:	4293      	cmp	r3, r2
 8014aae:	d10a      	bne.n	8014ac6 <xPortStartScheduler+0x26>
	__asm volatile
 8014ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ab4:	f383 8811 	msr	BASEPRI, r3
 8014ab8:	f3bf 8f6f 	isb	sy
 8014abc:	f3bf 8f4f 	dsb	sy
 8014ac0:	613b      	str	r3, [r7, #16]
}
 8014ac2:	bf00      	nop
 8014ac4:	e7fe      	b.n	8014ac4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014ac6:	4b3e      	ldr	r3, [pc, #248]	; (8014bc0 <xPortStartScheduler+0x120>)
 8014ac8:	681b      	ldr	r3, [r3, #0]
 8014aca:	4a3f      	ldr	r2, [pc, #252]	; (8014bc8 <xPortStartScheduler+0x128>)
 8014acc:	4293      	cmp	r3, r2
 8014ace:	d10a      	bne.n	8014ae6 <xPortStartScheduler+0x46>
	__asm volatile
 8014ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ad4:	f383 8811 	msr	BASEPRI, r3
 8014ad8:	f3bf 8f6f 	isb	sy
 8014adc:	f3bf 8f4f 	dsb	sy
 8014ae0:	60fb      	str	r3, [r7, #12]
}
 8014ae2:	bf00      	nop
 8014ae4:	e7fe      	b.n	8014ae4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014ae6:	4b39      	ldr	r3, [pc, #228]	; (8014bcc <xPortStartScheduler+0x12c>)
 8014ae8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014aea:	697b      	ldr	r3, [r7, #20]
 8014aec:	781b      	ldrb	r3, [r3, #0]
 8014aee:	b2db      	uxtb	r3, r3
 8014af0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014af2:	697b      	ldr	r3, [r7, #20]
 8014af4:	22ff      	movs	r2, #255	; 0xff
 8014af6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014af8:	697b      	ldr	r3, [r7, #20]
 8014afa:	781b      	ldrb	r3, [r3, #0]
 8014afc:	b2db      	uxtb	r3, r3
 8014afe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014b00:	78fb      	ldrb	r3, [r7, #3]
 8014b02:	b2db      	uxtb	r3, r3
 8014b04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014b08:	b2da      	uxtb	r2, r3
 8014b0a:	4b31      	ldr	r3, [pc, #196]	; (8014bd0 <xPortStartScheduler+0x130>)
 8014b0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014b0e:	4b31      	ldr	r3, [pc, #196]	; (8014bd4 <xPortStartScheduler+0x134>)
 8014b10:	2207      	movs	r2, #7
 8014b12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014b14:	e009      	b.n	8014b2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8014b16:	4b2f      	ldr	r3, [pc, #188]	; (8014bd4 <xPortStartScheduler+0x134>)
 8014b18:	681b      	ldr	r3, [r3, #0]
 8014b1a:	3b01      	subs	r3, #1
 8014b1c:	4a2d      	ldr	r2, [pc, #180]	; (8014bd4 <xPortStartScheduler+0x134>)
 8014b1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014b20:	78fb      	ldrb	r3, [r7, #3]
 8014b22:	b2db      	uxtb	r3, r3
 8014b24:	005b      	lsls	r3, r3, #1
 8014b26:	b2db      	uxtb	r3, r3
 8014b28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014b2a:	78fb      	ldrb	r3, [r7, #3]
 8014b2c:	b2db      	uxtb	r3, r3
 8014b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014b32:	2b80      	cmp	r3, #128	; 0x80
 8014b34:	d0ef      	beq.n	8014b16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014b36:	4b27      	ldr	r3, [pc, #156]	; (8014bd4 <xPortStartScheduler+0x134>)
 8014b38:	681b      	ldr	r3, [r3, #0]
 8014b3a:	f1c3 0307 	rsb	r3, r3, #7
 8014b3e:	2b04      	cmp	r3, #4
 8014b40:	d00a      	beq.n	8014b58 <xPortStartScheduler+0xb8>
	__asm volatile
 8014b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b46:	f383 8811 	msr	BASEPRI, r3
 8014b4a:	f3bf 8f6f 	isb	sy
 8014b4e:	f3bf 8f4f 	dsb	sy
 8014b52:	60bb      	str	r3, [r7, #8]
}
 8014b54:	bf00      	nop
 8014b56:	e7fe      	b.n	8014b56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014b58:	4b1e      	ldr	r3, [pc, #120]	; (8014bd4 <xPortStartScheduler+0x134>)
 8014b5a:	681b      	ldr	r3, [r3, #0]
 8014b5c:	021b      	lsls	r3, r3, #8
 8014b5e:	4a1d      	ldr	r2, [pc, #116]	; (8014bd4 <xPortStartScheduler+0x134>)
 8014b60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014b62:	4b1c      	ldr	r3, [pc, #112]	; (8014bd4 <xPortStartScheduler+0x134>)
 8014b64:	681b      	ldr	r3, [r3, #0]
 8014b66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014b6a:	4a1a      	ldr	r2, [pc, #104]	; (8014bd4 <xPortStartScheduler+0x134>)
 8014b6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	b2da      	uxtb	r2, r3
 8014b72:	697b      	ldr	r3, [r7, #20]
 8014b74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014b76:	4b18      	ldr	r3, [pc, #96]	; (8014bd8 <xPortStartScheduler+0x138>)
 8014b78:	681b      	ldr	r3, [r3, #0]
 8014b7a:	4a17      	ldr	r2, [pc, #92]	; (8014bd8 <xPortStartScheduler+0x138>)
 8014b7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014b80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014b82:	4b15      	ldr	r3, [pc, #84]	; (8014bd8 <xPortStartScheduler+0x138>)
 8014b84:	681b      	ldr	r3, [r3, #0]
 8014b86:	4a14      	ldr	r2, [pc, #80]	; (8014bd8 <xPortStartScheduler+0x138>)
 8014b88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8014b8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014b8e:	f000 f8dd 	bl	8014d4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014b92:	4b12      	ldr	r3, [pc, #72]	; (8014bdc <xPortStartScheduler+0x13c>)
 8014b94:	2200      	movs	r2, #0
 8014b96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014b98:	f000 f8fc 	bl	8014d94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014b9c:	4b10      	ldr	r3, [pc, #64]	; (8014be0 <xPortStartScheduler+0x140>)
 8014b9e:	681b      	ldr	r3, [r3, #0]
 8014ba0:	4a0f      	ldr	r2, [pc, #60]	; (8014be0 <xPortStartScheduler+0x140>)
 8014ba2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014ba6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014ba8:	f7ff ff66 	bl	8014a78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014bac:	f7ff f9c0 	bl	8013f30 <vTaskSwitchContext>
	prvTaskExitError();
 8014bb0:	f7ff ff22 	bl	80149f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014bb4:	2300      	movs	r3, #0
}
 8014bb6:	4618      	mov	r0, r3
 8014bb8:	3718      	adds	r7, #24
 8014bba:	46bd      	mov	sp, r7
 8014bbc:	bd80      	pop	{r7, pc}
 8014bbe:	bf00      	nop
 8014bc0:	e000ed00 	.word	0xe000ed00
 8014bc4:	410fc271 	.word	0x410fc271
 8014bc8:	410fc270 	.word	0x410fc270
 8014bcc:	e000e400 	.word	0xe000e400
 8014bd0:	20002998 	.word	0x20002998
 8014bd4:	2000299c 	.word	0x2000299c
 8014bd8:	e000ed20 	.word	0xe000ed20
 8014bdc:	200021a4 	.word	0x200021a4
 8014be0:	e000ef34 	.word	0xe000ef34

08014be4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014be4:	b480      	push	{r7}
 8014be6:	b083      	sub	sp, #12
 8014be8:	af00      	add	r7, sp, #0
	__asm volatile
 8014bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bee:	f383 8811 	msr	BASEPRI, r3
 8014bf2:	f3bf 8f6f 	isb	sy
 8014bf6:	f3bf 8f4f 	dsb	sy
 8014bfa:	607b      	str	r3, [r7, #4]
}
 8014bfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014bfe:	4b0f      	ldr	r3, [pc, #60]	; (8014c3c <vPortEnterCritical+0x58>)
 8014c00:	681b      	ldr	r3, [r3, #0]
 8014c02:	3301      	adds	r3, #1
 8014c04:	4a0d      	ldr	r2, [pc, #52]	; (8014c3c <vPortEnterCritical+0x58>)
 8014c06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014c08:	4b0c      	ldr	r3, [pc, #48]	; (8014c3c <vPortEnterCritical+0x58>)
 8014c0a:	681b      	ldr	r3, [r3, #0]
 8014c0c:	2b01      	cmp	r3, #1
 8014c0e:	d10f      	bne.n	8014c30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014c10:	4b0b      	ldr	r3, [pc, #44]	; (8014c40 <vPortEnterCritical+0x5c>)
 8014c12:	681b      	ldr	r3, [r3, #0]
 8014c14:	b2db      	uxtb	r3, r3
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d00a      	beq.n	8014c30 <vPortEnterCritical+0x4c>
	__asm volatile
 8014c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c1e:	f383 8811 	msr	BASEPRI, r3
 8014c22:	f3bf 8f6f 	isb	sy
 8014c26:	f3bf 8f4f 	dsb	sy
 8014c2a:	603b      	str	r3, [r7, #0]
}
 8014c2c:	bf00      	nop
 8014c2e:	e7fe      	b.n	8014c2e <vPortEnterCritical+0x4a>
	}
}
 8014c30:	bf00      	nop
 8014c32:	370c      	adds	r7, #12
 8014c34:	46bd      	mov	sp, r7
 8014c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c3a:	4770      	bx	lr
 8014c3c:	200021a4 	.word	0x200021a4
 8014c40:	e000ed04 	.word	0xe000ed04

08014c44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014c44:	b480      	push	{r7}
 8014c46:	b083      	sub	sp, #12
 8014c48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8014c4a:	4b12      	ldr	r3, [pc, #72]	; (8014c94 <vPortExitCritical+0x50>)
 8014c4c:	681b      	ldr	r3, [r3, #0]
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	d10a      	bne.n	8014c68 <vPortExitCritical+0x24>
	__asm volatile
 8014c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c56:	f383 8811 	msr	BASEPRI, r3
 8014c5a:	f3bf 8f6f 	isb	sy
 8014c5e:	f3bf 8f4f 	dsb	sy
 8014c62:	607b      	str	r3, [r7, #4]
}
 8014c64:	bf00      	nop
 8014c66:	e7fe      	b.n	8014c66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8014c68:	4b0a      	ldr	r3, [pc, #40]	; (8014c94 <vPortExitCritical+0x50>)
 8014c6a:	681b      	ldr	r3, [r3, #0]
 8014c6c:	3b01      	subs	r3, #1
 8014c6e:	4a09      	ldr	r2, [pc, #36]	; (8014c94 <vPortExitCritical+0x50>)
 8014c70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014c72:	4b08      	ldr	r3, [pc, #32]	; (8014c94 <vPortExitCritical+0x50>)
 8014c74:	681b      	ldr	r3, [r3, #0]
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d105      	bne.n	8014c86 <vPortExitCritical+0x42>
 8014c7a:	2300      	movs	r3, #0
 8014c7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014c7e:	683b      	ldr	r3, [r7, #0]
 8014c80:	f383 8811 	msr	BASEPRI, r3
}
 8014c84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8014c86:	bf00      	nop
 8014c88:	370c      	adds	r7, #12
 8014c8a:	46bd      	mov	sp, r7
 8014c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c90:	4770      	bx	lr
 8014c92:	bf00      	nop
 8014c94:	200021a4 	.word	0x200021a4
	...

08014ca0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014ca0:	f3ef 8009 	mrs	r0, PSP
 8014ca4:	f3bf 8f6f 	isb	sy
 8014ca8:	4b15      	ldr	r3, [pc, #84]	; (8014d00 <pxCurrentTCBConst>)
 8014caa:	681a      	ldr	r2, [r3, #0]
 8014cac:	f01e 0f10 	tst.w	lr, #16
 8014cb0:	bf08      	it	eq
 8014cb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014cb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cba:	6010      	str	r0, [r2, #0]
 8014cbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014cc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014cc4:	f380 8811 	msr	BASEPRI, r0
 8014cc8:	f3bf 8f4f 	dsb	sy
 8014ccc:	f3bf 8f6f 	isb	sy
 8014cd0:	f7ff f92e 	bl	8013f30 <vTaskSwitchContext>
 8014cd4:	f04f 0000 	mov.w	r0, #0
 8014cd8:	f380 8811 	msr	BASEPRI, r0
 8014cdc:	bc09      	pop	{r0, r3}
 8014cde:	6819      	ldr	r1, [r3, #0]
 8014ce0:	6808      	ldr	r0, [r1, #0]
 8014ce2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ce6:	f01e 0f10 	tst.w	lr, #16
 8014cea:	bf08      	it	eq
 8014cec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014cf0:	f380 8809 	msr	PSP, r0
 8014cf4:	f3bf 8f6f 	isb	sy
 8014cf8:	4770      	bx	lr
 8014cfa:	bf00      	nop
 8014cfc:	f3af 8000 	nop.w

08014d00 <pxCurrentTCBConst>:
 8014d00:	2000286c 	.word	0x2000286c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014d04:	bf00      	nop
 8014d06:	bf00      	nop

08014d08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014d08:	b580      	push	{r7, lr}
 8014d0a:	b082      	sub	sp, #8
 8014d0c:	af00      	add	r7, sp, #0
	__asm volatile
 8014d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d12:	f383 8811 	msr	BASEPRI, r3
 8014d16:	f3bf 8f6f 	isb	sy
 8014d1a:	f3bf 8f4f 	dsb	sy
 8014d1e:	607b      	str	r3, [r7, #4]
}
 8014d20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014d22:	f7ff f84d 	bl	8013dc0 <xTaskIncrementTick>
 8014d26:	4603      	mov	r3, r0
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d003      	beq.n	8014d34 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014d2c:	4b06      	ldr	r3, [pc, #24]	; (8014d48 <SysTick_Handler+0x40>)
 8014d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014d32:	601a      	str	r2, [r3, #0]
 8014d34:	2300      	movs	r3, #0
 8014d36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014d38:	683b      	ldr	r3, [r7, #0]
 8014d3a:	f383 8811 	msr	BASEPRI, r3
}
 8014d3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8014d40:	bf00      	nop
 8014d42:	3708      	adds	r7, #8
 8014d44:	46bd      	mov	sp, r7
 8014d46:	bd80      	pop	{r7, pc}
 8014d48:	e000ed04 	.word	0xe000ed04

08014d4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014d4c:	b480      	push	{r7}
 8014d4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014d50:	4b0b      	ldr	r3, [pc, #44]	; (8014d80 <vPortSetupTimerInterrupt+0x34>)
 8014d52:	2200      	movs	r2, #0
 8014d54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014d56:	4b0b      	ldr	r3, [pc, #44]	; (8014d84 <vPortSetupTimerInterrupt+0x38>)
 8014d58:	2200      	movs	r2, #0
 8014d5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014d5c:	4b0a      	ldr	r3, [pc, #40]	; (8014d88 <vPortSetupTimerInterrupt+0x3c>)
 8014d5e:	681b      	ldr	r3, [r3, #0]
 8014d60:	4a0a      	ldr	r2, [pc, #40]	; (8014d8c <vPortSetupTimerInterrupt+0x40>)
 8014d62:	fba2 2303 	umull	r2, r3, r2, r3
 8014d66:	099b      	lsrs	r3, r3, #6
 8014d68:	4a09      	ldr	r2, [pc, #36]	; (8014d90 <vPortSetupTimerInterrupt+0x44>)
 8014d6a:	3b01      	subs	r3, #1
 8014d6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8014d6e:	4b04      	ldr	r3, [pc, #16]	; (8014d80 <vPortSetupTimerInterrupt+0x34>)
 8014d70:	2207      	movs	r2, #7
 8014d72:	601a      	str	r2, [r3, #0]
}
 8014d74:	bf00      	nop
 8014d76:	46bd      	mov	sp, r7
 8014d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d7c:	4770      	bx	lr
 8014d7e:	bf00      	nop
 8014d80:	e000e010 	.word	0xe000e010
 8014d84:	e000e018 	.word	0xe000e018
 8014d88:	20002088 	.word	0x20002088
 8014d8c:	10624dd3 	.word	0x10624dd3
 8014d90:	e000e014 	.word	0xe000e014

08014d94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014d94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014da4 <vPortEnableVFP+0x10>
 8014d98:	6801      	ldr	r1, [r0, #0]
 8014d9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8014d9e:	6001      	str	r1, [r0, #0]
 8014da0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014da2:	bf00      	nop
 8014da4:	e000ed88 	.word	0xe000ed88

08014da8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014da8:	b480      	push	{r7}
 8014daa:	b085      	sub	sp, #20
 8014dac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8014dae:	f3ef 8305 	mrs	r3, IPSR
 8014db2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014db4:	68fb      	ldr	r3, [r7, #12]
 8014db6:	2b0f      	cmp	r3, #15
 8014db8:	d914      	bls.n	8014de4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8014dba:	4a17      	ldr	r2, [pc, #92]	; (8014e18 <vPortValidateInterruptPriority+0x70>)
 8014dbc:	68fb      	ldr	r3, [r7, #12]
 8014dbe:	4413      	add	r3, r2
 8014dc0:	781b      	ldrb	r3, [r3, #0]
 8014dc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014dc4:	4b15      	ldr	r3, [pc, #84]	; (8014e1c <vPortValidateInterruptPriority+0x74>)
 8014dc6:	781b      	ldrb	r3, [r3, #0]
 8014dc8:	7afa      	ldrb	r2, [r7, #11]
 8014dca:	429a      	cmp	r2, r3
 8014dcc:	d20a      	bcs.n	8014de4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8014dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dd2:	f383 8811 	msr	BASEPRI, r3
 8014dd6:	f3bf 8f6f 	isb	sy
 8014dda:	f3bf 8f4f 	dsb	sy
 8014dde:	607b      	str	r3, [r7, #4]
}
 8014de0:	bf00      	nop
 8014de2:	e7fe      	b.n	8014de2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014de4:	4b0e      	ldr	r3, [pc, #56]	; (8014e20 <vPortValidateInterruptPriority+0x78>)
 8014de6:	681b      	ldr	r3, [r3, #0]
 8014de8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8014dec:	4b0d      	ldr	r3, [pc, #52]	; (8014e24 <vPortValidateInterruptPriority+0x7c>)
 8014dee:	681b      	ldr	r3, [r3, #0]
 8014df0:	429a      	cmp	r2, r3
 8014df2:	d90a      	bls.n	8014e0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8014df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014df8:	f383 8811 	msr	BASEPRI, r3
 8014dfc:	f3bf 8f6f 	isb	sy
 8014e00:	f3bf 8f4f 	dsb	sy
 8014e04:	603b      	str	r3, [r7, #0]
}
 8014e06:	bf00      	nop
 8014e08:	e7fe      	b.n	8014e08 <vPortValidateInterruptPriority+0x60>
	}
 8014e0a:	bf00      	nop
 8014e0c:	3714      	adds	r7, #20
 8014e0e:	46bd      	mov	sp, r7
 8014e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e14:	4770      	bx	lr
 8014e16:	bf00      	nop
 8014e18:	e000e3f0 	.word	0xe000e3f0
 8014e1c:	20002998 	.word	0x20002998
 8014e20:	e000ed0c 	.word	0xe000ed0c
 8014e24:	2000299c 	.word	0x2000299c

08014e28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014e28:	b580      	push	{r7, lr}
 8014e2a:	b08a      	sub	sp, #40	; 0x28
 8014e2c:	af00      	add	r7, sp, #0
 8014e2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014e30:	2300      	movs	r3, #0
 8014e32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014e34:	f7fe ff1a 	bl	8013c6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014e38:	4b58      	ldr	r3, [pc, #352]	; (8014f9c <pvPortMalloc+0x174>)
 8014e3a:	681b      	ldr	r3, [r3, #0]
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d101      	bne.n	8014e44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014e40:	f000 f910 	bl	8015064 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014e44:	4b56      	ldr	r3, [pc, #344]	; (8014fa0 <pvPortMalloc+0x178>)
 8014e46:	681a      	ldr	r2, [r3, #0]
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	4013      	ands	r3, r2
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	f040 808e 	bne.w	8014f6e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	d01d      	beq.n	8014e94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8014e58:	2208      	movs	r2, #8
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	4413      	add	r3, r2
 8014e5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	f003 0307 	and.w	r3, r3, #7
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d014      	beq.n	8014e94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	f023 0307 	bic.w	r3, r3, #7
 8014e70:	3308      	adds	r3, #8
 8014e72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	f003 0307 	and.w	r3, r3, #7
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	d00a      	beq.n	8014e94 <pvPortMalloc+0x6c>
	__asm volatile
 8014e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e82:	f383 8811 	msr	BASEPRI, r3
 8014e86:	f3bf 8f6f 	isb	sy
 8014e8a:	f3bf 8f4f 	dsb	sy
 8014e8e:	617b      	str	r3, [r7, #20]
}
 8014e90:	bf00      	nop
 8014e92:	e7fe      	b.n	8014e92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	d069      	beq.n	8014f6e <pvPortMalloc+0x146>
 8014e9a:	4b42      	ldr	r3, [pc, #264]	; (8014fa4 <pvPortMalloc+0x17c>)
 8014e9c:	681b      	ldr	r3, [r3, #0]
 8014e9e:	687a      	ldr	r2, [r7, #4]
 8014ea0:	429a      	cmp	r2, r3
 8014ea2:	d864      	bhi.n	8014f6e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014ea4:	4b40      	ldr	r3, [pc, #256]	; (8014fa8 <pvPortMalloc+0x180>)
 8014ea6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014ea8:	4b3f      	ldr	r3, [pc, #252]	; (8014fa8 <pvPortMalloc+0x180>)
 8014eaa:	681b      	ldr	r3, [r3, #0]
 8014eac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014eae:	e004      	b.n	8014eba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8014eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014eb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014eb6:	681b      	ldr	r3, [r3, #0]
 8014eb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ebc:	685b      	ldr	r3, [r3, #4]
 8014ebe:	687a      	ldr	r2, [r7, #4]
 8014ec0:	429a      	cmp	r2, r3
 8014ec2:	d903      	bls.n	8014ecc <pvPortMalloc+0xa4>
 8014ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ec6:	681b      	ldr	r3, [r3, #0]
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	d1f1      	bne.n	8014eb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8014ecc:	4b33      	ldr	r3, [pc, #204]	; (8014f9c <pvPortMalloc+0x174>)
 8014ece:	681b      	ldr	r3, [r3, #0]
 8014ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014ed2:	429a      	cmp	r2, r3
 8014ed4:	d04b      	beq.n	8014f6e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014ed6:	6a3b      	ldr	r3, [r7, #32]
 8014ed8:	681b      	ldr	r3, [r3, #0]
 8014eda:	2208      	movs	r2, #8
 8014edc:	4413      	add	r3, r2
 8014ede:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ee2:	681a      	ldr	r2, [r3, #0]
 8014ee4:	6a3b      	ldr	r3, [r7, #32]
 8014ee6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014eea:	685a      	ldr	r2, [r3, #4]
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	1ad2      	subs	r2, r2, r3
 8014ef0:	2308      	movs	r3, #8
 8014ef2:	005b      	lsls	r3, r3, #1
 8014ef4:	429a      	cmp	r2, r3
 8014ef6:	d91f      	bls.n	8014f38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	4413      	add	r3, r2
 8014efe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014f00:	69bb      	ldr	r3, [r7, #24]
 8014f02:	f003 0307 	and.w	r3, r3, #7
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	d00a      	beq.n	8014f20 <pvPortMalloc+0xf8>
	__asm volatile
 8014f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f0e:	f383 8811 	msr	BASEPRI, r3
 8014f12:	f3bf 8f6f 	isb	sy
 8014f16:	f3bf 8f4f 	dsb	sy
 8014f1a:	613b      	str	r3, [r7, #16]
}
 8014f1c:	bf00      	nop
 8014f1e:	e7fe      	b.n	8014f1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f22:	685a      	ldr	r2, [r3, #4]
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	1ad2      	subs	r2, r2, r3
 8014f28:	69bb      	ldr	r3, [r7, #24]
 8014f2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8014f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f2e:	687a      	ldr	r2, [r7, #4]
 8014f30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014f32:	69b8      	ldr	r0, [r7, #24]
 8014f34:	f000 f8f8 	bl	8015128 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014f38:	4b1a      	ldr	r3, [pc, #104]	; (8014fa4 <pvPortMalloc+0x17c>)
 8014f3a:	681a      	ldr	r2, [r3, #0]
 8014f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f3e:	685b      	ldr	r3, [r3, #4]
 8014f40:	1ad3      	subs	r3, r2, r3
 8014f42:	4a18      	ldr	r2, [pc, #96]	; (8014fa4 <pvPortMalloc+0x17c>)
 8014f44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014f46:	4b17      	ldr	r3, [pc, #92]	; (8014fa4 <pvPortMalloc+0x17c>)
 8014f48:	681a      	ldr	r2, [r3, #0]
 8014f4a:	4b18      	ldr	r3, [pc, #96]	; (8014fac <pvPortMalloc+0x184>)
 8014f4c:	681b      	ldr	r3, [r3, #0]
 8014f4e:	429a      	cmp	r2, r3
 8014f50:	d203      	bcs.n	8014f5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014f52:	4b14      	ldr	r3, [pc, #80]	; (8014fa4 <pvPortMalloc+0x17c>)
 8014f54:	681b      	ldr	r3, [r3, #0]
 8014f56:	4a15      	ldr	r2, [pc, #84]	; (8014fac <pvPortMalloc+0x184>)
 8014f58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8014f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f5c:	685a      	ldr	r2, [r3, #4]
 8014f5e:	4b10      	ldr	r3, [pc, #64]	; (8014fa0 <pvPortMalloc+0x178>)
 8014f60:	681b      	ldr	r3, [r3, #0]
 8014f62:	431a      	orrs	r2, r3
 8014f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f6a:	2200      	movs	r2, #0
 8014f6c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014f6e:	f7fe fe8b 	bl	8013c88 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8014f72:	69fb      	ldr	r3, [r7, #28]
 8014f74:	f003 0307 	and.w	r3, r3, #7
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d00a      	beq.n	8014f92 <pvPortMalloc+0x16a>
	__asm volatile
 8014f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f80:	f383 8811 	msr	BASEPRI, r3
 8014f84:	f3bf 8f6f 	isb	sy
 8014f88:	f3bf 8f4f 	dsb	sy
 8014f8c:	60fb      	str	r3, [r7, #12]
}
 8014f8e:	bf00      	nop
 8014f90:	e7fe      	b.n	8014f90 <pvPortMalloc+0x168>
	return pvReturn;
 8014f92:	69fb      	ldr	r3, [r7, #28]
}
 8014f94:	4618      	mov	r0, r3
 8014f96:	3728      	adds	r7, #40	; 0x28
 8014f98:	46bd      	mov	sp, r7
 8014f9a:	bd80      	pop	{r7, pc}
 8014f9c:	200065a8 	.word	0x200065a8
 8014fa0:	200065b4 	.word	0x200065b4
 8014fa4:	200065ac 	.word	0x200065ac
 8014fa8:	200065a0 	.word	0x200065a0
 8014fac:	200065b0 	.word	0x200065b0

08014fb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014fb0:	b580      	push	{r7, lr}
 8014fb2:	b086      	sub	sp, #24
 8014fb4:	af00      	add	r7, sp, #0
 8014fb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	d048      	beq.n	8015054 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8014fc2:	2308      	movs	r3, #8
 8014fc4:	425b      	negs	r3, r3
 8014fc6:	697a      	ldr	r2, [r7, #20]
 8014fc8:	4413      	add	r3, r2
 8014fca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8014fcc:	697b      	ldr	r3, [r7, #20]
 8014fce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014fd0:	693b      	ldr	r3, [r7, #16]
 8014fd2:	685a      	ldr	r2, [r3, #4]
 8014fd4:	4b21      	ldr	r3, [pc, #132]	; (801505c <vPortFree+0xac>)
 8014fd6:	681b      	ldr	r3, [r3, #0]
 8014fd8:	4013      	ands	r3, r2
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	d10a      	bne.n	8014ff4 <vPortFree+0x44>
	__asm volatile
 8014fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fe2:	f383 8811 	msr	BASEPRI, r3
 8014fe6:	f3bf 8f6f 	isb	sy
 8014fea:	f3bf 8f4f 	dsb	sy
 8014fee:	60fb      	str	r3, [r7, #12]
}
 8014ff0:	bf00      	nop
 8014ff2:	e7fe      	b.n	8014ff2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014ff4:	693b      	ldr	r3, [r7, #16]
 8014ff6:	681b      	ldr	r3, [r3, #0]
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	d00a      	beq.n	8015012 <vPortFree+0x62>
	__asm volatile
 8014ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015000:	f383 8811 	msr	BASEPRI, r3
 8015004:	f3bf 8f6f 	isb	sy
 8015008:	f3bf 8f4f 	dsb	sy
 801500c:	60bb      	str	r3, [r7, #8]
}
 801500e:	bf00      	nop
 8015010:	e7fe      	b.n	8015010 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8015012:	693b      	ldr	r3, [r7, #16]
 8015014:	685a      	ldr	r2, [r3, #4]
 8015016:	4b11      	ldr	r3, [pc, #68]	; (801505c <vPortFree+0xac>)
 8015018:	681b      	ldr	r3, [r3, #0]
 801501a:	4013      	ands	r3, r2
 801501c:	2b00      	cmp	r3, #0
 801501e:	d019      	beq.n	8015054 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8015020:	693b      	ldr	r3, [r7, #16]
 8015022:	681b      	ldr	r3, [r3, #0]
 8015024:	2b00      	cmp	r3, #0
 8015026:	d115      	bne.n	8015054 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015028:	693b      	ldr	r3, [r7, #16]
 801502a:	685a      	ldr	r2, [r3, #4]
 801502c:	4b0b      	ldr	r3, [pc, #44]	; (801505c <vPortFree+0xac>)
 801502e:	681b      	ldr	r3, [r3, #0]
 8015030:	43db      	mvns	r3, r3
 8015032:	401a      	ands	r2, r3
 8015034:	693b      	ldr	r3, [r7, #16]
 8015036:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015038:	f7fe fe18 	bl	8013c6c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801503c:	693b      	ldr	r3, [r7, #16]
 801503e:	685a      	ldr	r2, [r3, #4]
 8015040:	4b07      	ldr	r3, [pc, #28]	; (8015060 <vPortFree+0xb0>)
 8015042:	681b      	ldr	r3, [r3, #0]
 8015044:	4413      	add	r3, r2
 8015046:	4a06      	ldr	r2, [pc, #24]	; (8015060 <vPortFree+0xb0>)
 8015048:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801504a:	6938      	ldr	r0, [r7, #16]
 801504c:	f000 f86c 	bl	8015128 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8015050:	f7fe fe1a 	bl	8013c88 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8015054:	bf00      	nop
 8015056:	3718      	adds	r7, #24
 8015058:	46bd      	mov	sp, r7
 801505a:	bd80      	pop	{r7, pc}
 801505c:	200065b4 	.word	0x200065b4
 8015060:	200065ac 	.word	0x200065ac

08015064 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015064:	b480      	push	{r7}
 8015066:	b085      	sub	sp, #20
 8015068:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801506a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801506e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015070:	4b27      	ldr	r3, [pc, #156]	; (8015110 <prvHeapInit+0xac>)
 8015072:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015074:	68fb      	ldr	r3, [r7, #12]
 8015076:	f003 0307 	and.w	r3, r3, #7
 801507a:	2b00      	cmp	r3, #0
 801507c:	d00c      	beq.n	8015098 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801507e:	68fb      	ldr	r3, [r7, #12]
 8015080:	3307      	adds	r3, #7
 8015082:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015084:	68fb      	ldr	r3, [r7, #12]
 8015086:	f023 0307 	bic.w	r3, r3, #7
 801508a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801508c:	68ba      	ldr	r2, [r7, #8]
 801508e:	68fb      	ldr	r3, [r7, #12]
 8015090:	1ad3      	subs	r3, r2, r3
 8015092:	4a1f      	ldr	r2, [pc, #124]	; (8015110 <prvHeapInit+0xac>)
 8015094:	4413      	add	r3, r2
 8015096:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015098:	68fb      	ldr	r3, [r7, #12]
 801509a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801509c:	4a1d      	ldr	r2, [pc, #116]	; (8015114 <prvHeapInit+0xb0>)
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80150a2:	4b1c      	ldr	r3, [pc, #112]	; (8015114 <prvHeapInit+0xb0>)
 80150a4:	2200      	movs	r2, #0
 80150a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	68ba      	ldr	r2, [r7, #8]
 80150ac:	4413      	add	r3, r2
 80150ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80150b0:	2208      	movs	r2, #8
 80150b2:	68fb      	ldr	r3, [r7, #12]
 80150b4:	1a9b      	subs	r3, r3, r2
 80150b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80150b8:	68fb      	ldr	r3, [r7, #12]
 80150ba:	f023 0307 	bic.w	r3, r3, #7
 80150be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80150c0:	68fb      	ldr	r3, [r7, #12]
 80150c2:	4a15      	ldr	r2, [pc, #84]	; (8015118 <prvHeapInit+0xb4>)
 80150c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80150c6:	4b14      	ldr	r3, [pc, #80]	; (8015118 <prvHeapInit+0xb4>)
 80150c8:	681b      	ldr	r3, [r3, #0]
 80150ca:	2200      	movs	r2, #0
 80150cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80150ce:	4b12      	ldr	r3, [pc, #72]	; (8015118 <prvHeapInit+0xb4>)
 80150d0:	681b      	ldr	r3, [r3, #0]
 80150d2:	2200      	movs	r2, #0
 80150d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80150da:	683b      	ldr	r3, [r7, #0]
 80150dc:	68fa      	ldr	r2, [r7, #12]
 80150de:	1ad2      	subs	r2, r2, r3
 80150e0:	683b      	ldr	r3, [r7, #0]
 80150e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80150e4:	4b0c      	ldr	r3, [pc, #48]	; (8015118 <prvHeapInit+0xb4>)
 80150e6:	681a      	ldr	r2, [r3, #0]
 80150e8:	683b      	ldr	r3, [r7, #0]
 80150ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80150ec:	683b      	ldr	r3, [r7, #0]
 80150ee:	685b      	ldr	r3, [r3, #4]
 80150f0:	4a0a      	ldr	r2, [pc, #40]	; (801511c <prvHeapInit+0xb8>)
 80150f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80150f4:	683b      	ldr	r3, [r7, #0]
 80150f6:	685b      	ldr	r3, [r3, #4]
 80150f8:	4a09      	ldr	r2, [pc, #36]	; (8015120 <prvHeapInit+0xbc>)
 80150fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80150fc:	4b09      	ldr	r3, [pc, #36]	; (8015124 <prvHeapInit+0xc0>)
 80150fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8015102:	601a      	str	r2, [r3, #0]
}
 8015104:	bf00      	nop
 8015106:	3714      	adds	r7, #20
 8015108:	46bd      	mov	sp, r7
 801510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801510e:	4770      	bx	lr
 8015110:	200029a0 	.word	0x200029a0
 8015114:	200065a0 	.word	0x200065a0
 8015118:	200065a8 	.word	0x200065a8
 801511c:	200065b0 	.word	0x200065b0
 8015120:	200065ac 	.word	0x200065ac
 8015124:	200065b4 	.word	0x200065b4

08015128 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015128:	b480      	push	{r7}
 801512a:	b085      	sub	sp, #20
 801512c:	af00      	add	r7, sp, #0
 801512e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015130:	4b28      	ldr	r3, [pc, #160]	; (80151d4 <prvInsertBlockIntoFreeList+0xac>)
 8015132:	60fb      	str	r3, [r7, #12]
 8015134:	e002      	b.n	801513c <prvInsertBlockIntoFreeList+0x14>
 8015136:	68fb      	ldr	r3, [r7, #12]
 8015138:	681b      	ldr	r3, [r3, #0]
 801513a:	60fb      	str	r3, [r7, #12]
 801513c:	68fb      	ldr	r3, [r7, #12]
 801513e:	681b      	ldr	r3, [r3, #0]
 8015140:	687a      	ldr	r2, [r7, #4]
 8015142:	429a      	cmp	r2, r3
 8015144:	d8f7      	bhi.n	8015136 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015146:	68fb      	ldr	r3, [r7, #12]
 8015148:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801514a:	68fb      	ldr	r3, [r7, #12]
 801514c:	685b      	ldr	r3, [r3, #4]
 801514e:	68ba      	ldr	r2, [r7, #8]
 8015150:	4413      	add	r3, r2
 8015152:	687a      	ldr	r2, [r7, #4]
 8015154:	429a      	cmp	r2, r3
 8015156:	d108      	bne.n	801516a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015158:	68fb      	ldr	r3, [r7, #12]
 801515a:	685a      	ldr	r2, [r3, #4]
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	685b      	ldr	r3, [r3, #4]
 8015160:	441a      	add	r2, r3
 8015162:	68fb      	ldr	r3, [r7, #12]
 8015164:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015166:	68fb      	ldr	r3, [r7, #12]
 8015168:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	685b      	ldr	r3, [r3, #4]
 8015172:	68ba      	ldr	r2, [r7, #8]
 8015174:	441a      	add	r2, r3
 8015176:	68fb      	ldr	r3, [r7, #12]
 8015178:	681b      	ldr	r3, [r3, #0]
 801517a:	429a      	cmp	r2, r3
 801517c:	d118      	bne.n	80151b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801517e:	68fb      	ldr	r3, [r7, #12]
 8015180:	681a      	ldr	r2, [r3, #0]
 8015182:	4b15      	ldr	r3, [pc, #84]	; (80151d8 <prvInsertBlockIntoFreeList+0xb0>)
 8015184:	681b      	ldr	r3, [r3, #0]
 8015186:	429a      	cmp	r2, r3
 8015188:	d00d      	beq.n	80151a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	685a      	ldr	r2, [r3, #4]
 801518e:	68fb      	ldr	r3, [r7, #12]
 8015190:	681b      	ldr	r3, [r3, #0]
 8015192:	685b      	ldr	r3, [r3, #4]
 8015194:	441a      	add	r2, r3
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801519a:	68fb      	ldr	r3, [r7, #12]
 801519c:	681b      	ldr	r3, [r3, #0]
 801519e:	681a      	ldr	r2, [r3, #0]
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	601a      	str	r2, [r3, #0]
 80151a4:	e008      	b.n	80151b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80151a6:	4b0c      	ldr	r3, [pc, #48]	; (80151d8 <prvInsertBlockIntoFreeList+0xb0>)
 80151a8:	681a      	ldr	r2, [r3, #0]
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	601a      	str	r2, [r3, #0]
 80151ae:	e003      	b.n	80151b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	681a      	ldr	r2, [r3, #0]
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80151b8:	68fa      	ldr	r2, [r7, #12]
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	429a      	cmp	r2, r3
 80151be:	d002      	beq.n	80151c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80151c0:	68fb      	ldr	r3, [r7, #12]
 80151c2:	687a      	ldr	r2, [r7, #4]
 80151c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80151c6:	bf00      	nop
 80151c8:	3714      	adds	r7, #20
 80151ca:	46bd      	mov	sp, r7
 80151cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151d0:	4770      	bx	lr
 80151d2:	bf00      	nop
 80151d4:	200065a0 	.word	0x200065a0
 80151d8:	200065a8 	.word	0x200065a8

080151dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80151dc:	b580      	push	{r7, lr}
 80151de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80151e0:	2200      	movs	r2, #0
 80151e2:	4912      	ldr	r1, [pc, #72]	; (801522c <MX_USB_DEVICE_Init+0x50>)
 80151e4:	4812      	ldr	r0, [pc, #72]	; (8015230 <MX_USB_DEVICE_Init+0x54>)
 80151e6:	f7fc f853 	bl	8011290 <USBD_Init>
 80151ea:	4603      	mov	r3, r0
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	d001      	beq.n	80151f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80151f0:	f7f0 f9ec 	bl	80055cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80151f4:	490f      	ldr	r1, [pc, #60]	; (8015234 <MX_USB_DEVICE_Init+0x58>)
 80151f6:	480e      	ldr	r0, [pc, #56]	; (8015230 <MX_USB_DEVICE_Init+0x54>)
 80151f8:	f7fc f880 	bl	80112fc <USBD_RegisterClass>
 80151fc:	4603      	mov	r3, r0
 80151fe:	2b00      	cmp	r3, #0
 8015200:	d001      	beq.n	8015206 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8015202:	f7f0 f9e3 	bl	80055cc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8015206:	490c      	ldr	r1, [pc, #48]	; (8015238 <MX_USB_DEVICE_Init+0x5c>)
 8015208:	4809      	ldr	r0, [pc, #36]	; (8015230 <MX_USB_DEVICE_Init+0x54>)
 801520a:	f7fb ffa5 	bl	8011158 <USBD_CDC_RegisterInterface>
 801520e:	4603      	mov	r3, r0
 8015210:	2b00      	cmp	r3, #0
 8015212:	d001      	beq.n	8015218 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8015214:	f7f0 f9da 	bl	80055cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8015218:	4805      	ldr	r0, [pc, #20]	; (8015230 <MX_USB_DEVICE_Init+0x54>)
 801521a:	f7fc f890 	bl	801133e <USBD_Start>
 801521e:	4603      	mov	r3, r0
 8015220:	2b00      	cmp	r3, #0
 8015222:	d001      	beq.n	8015228 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8015224:	f7f0 f9d2 	bl	80055cc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8015228:	bf00      	nop
 801522a:	bd80      	pop	{r7, pc}
 801522c:	200021bc 	.word	0x200021bc
 8015230:	2000ee5c 	.word	0x2000ee5c
 8015234:	200020a0 	.word	0x200020a0
 8015238:	200021a8 	.word	0x200021a8

0801523c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801523c:	b580      	push	{r7, lr}
 801523e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8015240:	2200      	movs	r2, #0
 8015242:	4905      	ldr	r1, [pc, #20]	; (8015258 <CDC_Init_FS+0x1c>)
 8015244:	4805      	ldr	r0, [pc, #20]	; (801525c <CDC_Init_FS+0x20>)
 8015246:	f7fb ff9c 	bl	8011182 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801524a:	4905      	ldr	r1, [pc, #20]	; (8015260 <CDC_Init_FS+0x24>)
 801524c:	4803      	ldr	r0, [pc, #12]	; (801525c <CDC_Init_FS+0x20>)
 801524e:	f7fb ffb1 	bl	80111b4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8015252:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8015254:	4618      	mov	r0, r3
 8015256:	bd80      	pop	{r7, pc}
 8015258:	2000f32c 	.word	0x2000f32c
 801525c:	2000ee5c 	.word	0x2000ee5c
 8015260:	2000f12c 	.word	0x2000f12c

08015264 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8015264:	b480      	push	{r7}
 8015266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8015268:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801526a:	4618      	mov	r0, r3
 801526c:	46bd      	mov	sp, r7
 801526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015272:	4770      	bx	lr

08015274 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8015274:	b480      	push	{r7}
 8015276:	b083      	sub	sp, #12
 8015278:	af00      	add	r7, sp, #0
 801527a:	4603      	mov	r3, r0
 801527c:	6039      	str	r1, [r7, #0]
 801527e:	71fb      	strb	r3, [r7, #7]
 8015280:	4613      	mov	r3, r2
 8015282:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8015284:	79fb      	ldrb	r3, [r7, #7]
 8015286:	2b23      	cmp	r3, #35	; 0x23
 8015288:	f200 808c 	bhi.w	80153a4 <CDC_Control_FS+0x130>
 801528c:	a201      	add	r2, pc, #4	; (adr r2, 8015294 <CDC_Control_FS+0x20>)
 801528e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015292:	bf00      	nop
 8015294:	080153a5 	.word	0x080153a5
 8015298:	080153a5 	.word	0x080153a5
 801529c:	080153a5 	.word	0x080153a5
 80152a0:	080153a5 	.word	0x080153a5
 80152a4:	080153a5 	.word	0x080153a5
 80152a8:	080153a5 	.word	0x080153a5
 80152ac:	080153a5 	.word	0x080153a5
 80152b0:	080153a5 	.word	0x080153a5
 80152b4:	080153a5 	.word	0x080153a5
 80152b8:	080153a5 	.word	0x080153a5
 80152bc:	080153a5 	.word	0x080153a5
 80152c0:	080153a5 	.word	0x080153a5
 80152c4:	080153a5 	.word	0x080153a5
 80152c8:	080153a5 	.word	0x080153a5
 80152cc:	080153a5 	.word	0x080153a5
 80152d0:	080153a5 	.word	0x080153a5
 80152d4:	080153a5 	.word	0x080153a5
 80152d8:	080153a5 	.word	0x080153a5
 80152dc:	080153a5 	.word	0x080153a5
 80152e0:	080153a5 	.word	0x080153a5
 80152e4:	080153a5 	.word	0x080153a5
 80152e8:	080153a5 	.word	0x080153a5
 80152ec:	080153a5 	.word	0x080153a5
 80152f0:	080153a5 	.word	0x080153a5
 80152f4:	080153a5 	.word	0x080153a5
 80152f8:	080153a5 	.word	0x080153a5
 80152fc:	080153a5 	.word	0x080153a5
 8015300:	080153a5 	.word	0x080153a5
 8015304:	080153a5 	.word	0x080153a5
 8015308:	080153a5 	.word	0x080153a5
 801530c:	080153a5 	.word	0x080153a5
 8015310:	080153a5 	.word	0x080153a5
 8015314:	08015325 	.word	0x08015325
 8015318:	0801535f 	.word	0x0801535f
 801531c:	080153a5 	.word	0x080153a5
 8015320:	080153a5 	.word	0x080153a5
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	TempBuf_USB[0]=pbuf[0];
 8015324:	683b      	ldr	r3, [r7, #0]
 8015326:	781a      	ldrb	r2, [r3, #0]
 8015328:	4b22      	ldr	r3, [pc, #136]	; (80153b4 <CDC_Control_FS+0x140>)
 801532a:	701a      	strb	r2, [r3, #0]
    	TempBuf_USB[1]=pbuf[1];
 801532c:	683b      	ldr	r3, [r7, #0]
 801532e:	785a      	ldrb	r2, [r3, #1]
 8015330:	4b20      	ldr	r3, [pc, #128]	; (80153b4 <CDC_Control_FS+0x140>)
 8015332:	705a      	strb	r2, [r3, #1]
    	TempBuf_USB[2]=pbuf[2];
 8015334:	683b      	ldr	r3, [r7, #0]
 8015336:	789a      	ldrb	r2, [r3, #2]
 8015338:	4b1e      	ldr	r3, [pc, #120]	; (80153b4 <CDC_Control_FS+0x140>)
 801533a:	709a      	strb	r2, [r3, #2]
    	TempBuf_USB[3]=pbuf[3];
 801533c:	683b      	ldr	r3, [r7, #0]
 801533e:	78da      	ldrb	r2, [r3, #3]
 8015340:	4b1c      	ldr	r3, [pc, #112]	; (80153b4 <CDC_Control_FS+0x140>)
 8015342:	70da      	strb	r2, [r3, #3]
    	TempBuf_USB[4]=pbuf[4];
 8015344:	683b      	ldr	r3, [r7, #0]
 8015346:	791a      	ldrb	r2, [r3, #4]
 8015348:	4b1a      	ldr	r3, [pc, #104]	; (80153b4 <CDC_Control_FS+0x140>)
 801534a:	711a      	strb	r2, [r3, #4]
    	TempBuf_USB[5]=pbuf[5];
 801534c:	683b      	ldr	r3, [r7, #0]
 801534e:	795a      	ldrb	r2, [r3, #5]
 8015350:	4b18      	ldr	r3, [pc, #96]	; (80153b4 <CDC_Control_FS+0x140>)
 8015352:	715a      	strb	r2, [r3, #5]
    	TempBuf_USB[6]=pbuf[6];
 8015354:	683b      	ldr	r3, [r7, #0]
 8015356:	799a      	ldrb	r2, [r3, #6]
 8015358:	4b16      	ldr	r3, [pc, #88]	; (80153b4 <CDC_Control_FS+0x140>)
 801535a:	719a      	strb	r2, [r3, #6]
    	break;
 801535c:	e023      	b.n	80153a6 <CDC_Control_FS+0x132>


    case CDC_GET_LINE_CODING:
        pbuf[0]=TempBuf_USB[0];
 801535e:	4b15      	ldr	r3, [pc, #84]	; (80153b4 <CDC_Control_FS+0x140>)
 8015360:	781a      	ldrb	r2, [r3, #0]
 8015362:	683b      	ldr	r3, [r7, #0]
 8015364:	701a      	strb	r2, [r3, #0]
        pbuf[1]=TempBuf_USB[1];
 8015366:	683b      	ldr	r3, [r7, #0]
 8015368:	3301      	adds	r3, #1
 801536a:	4a12      	ldr	r2, [pc, #72]	; (80153b4 <CDC_Control_FS+0x140>)
 801536c:	7852      	ldrb	r2, [r2, #1]
 801536e:	701a      	strb	r2, [r3, #0]
        pbuf[2]=TempBuf_USB[2];
 8015370:	683b      	ldr	r3, [r7, #0]
 8015372:	3302      	adds	r3, #2
 8015374:	4a0f      	ldr	r2, [pc, #60]	; (80153b4 <CDC_Control_FS+0x140>)
 8015376:	7892      	ldrb	r2, [r2, #2]
 8015378:	701a      	strb	r2, [r3, #0]
        pbuf[3]=TempBuf_USB[3];
 801537a:	683b      	ldr	r3, [r7, #0]
 801537c:	3303      	adds	r3, #3
 801537e:	4a0d      	ldr	r2, [pc, #52]	; (80153b4 <CDC_Control_FS+0x140>)
 8015380:	78d2      	ldrb	r2, [r2, #3]
 8015382:	701a      	strb	r2, [r3, #0]
        pbuf[4]=TempBuf_USB[4];
 8015384:	683b      	ldr	r3, [r7, #0]
 8015386:	3304      	adds	r3, #4
 8015388:	4a0a      	ldr	r2, [pc, #40]	; (80153b4 <CDC_Control_FS+0x140>)
 801538a:	7912      	ldrb	r2, [r2, #4]
 801538c:	701a      	strb	r2, [r3, #0]
        pbuf[5]=TempBuf_USB[5];
 801538e:	683b      	ldr	r3, [r7, #0]
 8015390:	3305      	adds	r3, #5
 8015392:	4a08      	ldr	r2, [pc, #32]	; (80153b4 <CDC_Control_FS+0x140>)
 8015394:	7952      	ldrb	r2, [r2, #5]
 8015396:	701a      	strb	r2, [r3, #0]
        pbuf[6]=TempBuf_USB[6];
 8015398:	683b      	ldr	r3, [r7, #0]
 801539a:	3306      	adds	r3, #6
 801539c:	4a05      	ldr	r2, [pc, #20]	; (80153b4 <CDC_Control_FS+0x140>)
 801539e:	7992      	ldrb	r2, [r2, #6]
 80153a0:	701a      	strb	r2, [r3, #0]
    break;
 80153a2:	e000      	b.n	80153a6 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80153a4:	bf00      	nop
  }

  return (USBD_OK);
 80153a6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80153a8:	4618      	mov	r0, r3
 80153aa:	370c      	adds	r7, #12
 80153ac:	46bd      	mov	sp, r7
 80153ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153b2:	4770      	bx	lr
 80153b4:	2000f52c 	.word	0x2000f52c

080153b8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80153b8:	b580      	push	{r7, lr}
 80153ba:	b082      	sub	sp, #8
 80153bc:	af00      	add	r7, sp, #0
 80153be:	6078      	str	r0, [r7, #4]
 80153c0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	ringBuff_PushArray(&usb_rx_ringbuff, Buf, (uint16_t)*Len);
 80153c2:	683b      	ldr	r3, [r7, #0]
 80153c4:	681b      	ldr	r3, [r3, #0]
 80153c6:	b29b      	uxth	r3, r3
 80153c8:	461a      	mov	r2, r3
 80153ca:	6879      	ldr	r1, [r7, #4]
 80153cc:	4807      	ldr	r0, [pc, #28]	; (80153ec <CDC_Receive_FS+0x34>)
 80153ce:	f7f0 f98f 	bl	80056f0 <ringBuff_PushArray>
//	if ( END_CHAR == Buf[*Len - 1]) {
//		osSignalSet(USB_RX_Check_Handle, 0x01);
//	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80153d2:	6879      	ldr	r1, [r7, #4]
 80153d4:	4806      	ldr	r0, [pc, #24]	; (80153f0 <CDC_Receive_FS+0x38>)
 80153d6:	f7fb feed 	bl	80111b4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80153da:	4805      	ldr	r0, [pc, #20]	; (80153f0 <CDC_Receive_FS+0x38>)
 80153dc:	f7fb ff2e 	bl	801123c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80153e0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80153e2:	4618      	mov	r0, r3
 80153e4:	3708      	adds	r7, #8
 80153e6:	46bd      	mov	sp, r7
 80153e8:	bd80      	pop	{r7, pc}
 80153ea:	bf00      	nop
 80153ec:	20000064 	.word	0x20000064
 80153f0:	2000ee5c 	.word	0x2000ee5c

080153f4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80153f4:	b580      	push	{r7, lr}
 80153f6:	b084      	sub	sp, #16
 80153f8:	af00      	add	r7, sp, #0
 80153fa:	6078      	str	r0, [r7, #4]
 80153fc:	460b      	mov	r3, r1
 80153fe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8015400:	2300      	movs	r3, #0
 8015402:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8015404:	4b0d      	ldr	r3, [pc, #52]	; (801543c <CDC_Transmit_FS+0x48>)
 8015406:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801540a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801540c:	68bb      	ldr	r3, [r7, #8]
 801540e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015412:	2b00      	cmp	r3, #0
 8015414:	d001      	beq.n	801541a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8015416:	2301      	movs	r3, #1
 8015418:	e00b      	b.n	8015432 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801541a:	887b      	ldrh	r3, [r7, #2]
 801541c:	461a      	mov	r2, r3
 801541e:	6879      	ldr	r1, [r7, #4]
 8015420:	4806      	ldr	r0, [pc, #24]	; (801543c <CDC_Transmit_FS+0x48>)
 8015422:	f7fb feae 	bl	8011182 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8015426:	4805      	ldr	r0, [pc, #20]	; (801543c <CDC_Transmit_FS+0x48>)
 8015428:	f7fb fed8 	bl	80111dc <USBD_CDC_TransmitPacket>
 801542c:	4603      	mov	r3, r0
 801542e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8015430:	7bfb      	ldrb	r3, [r7, #15]
}
 8015432:	4618      	mov	r0, r3
 8015434:	3710      	adds	r7, #16
 8015436:	46bd      	mov	sp, r7
 8015438:	bd80      	pop	{r7, pc}
 801543a:	bf00      	nop
 801543c:	2000ee5c 	.word	0x2000ee5c

08015440 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8015440:	b480      	push	{r7}
 8015442:	b087      	sub	sp, #28
 8015444:	af00      	add	r7, sp, #0
 8015446:	60f8      	str	r0, [r7, #12]
 8015448:	60b9      	str	r1, [r7, #8]
 801544a:	4613      	mov	r3, r2
 801544c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801544e:	2300      	movs	r3, #0
 8015450:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8015452:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015456:	4618      	mov	r0, r3
 8015458:	371c      	adds	r7, #28
 801545a:	46bd      	mov	sp, r7
 801545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015460:	4770      	bx	lr
	...

08015464 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015464:	b480      	push	{r7}
 8015466:	b083      	sub	sp, #12
 8015468:	af00      	add	r7, sp, #0
 801546a:	4603      	mov	r3, r0
 801546c:	6039      	str	r1, [r7, #0]
 801546e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8015470:	683b      	ldr	r3, [r7, #0]
 8015472:	2212      	movs	r2, #18
 8015474:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8015476:	4b03      	ldr	r3, [pc, #12]	; (8015484 <USBD_FS_DeviceDescriptor+0x20>)
}
 8015478:	4618      	mov	r0, r3
 801547a:	370c      	adds	r7, #12
 801547c:	46bd      	mov	sp, r7
 801547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015482:	4770      	bx	lr
 8015484:	200021d8 	.word	0x200021d8

08015488 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015488:	b480      	push	{r7}
 801548a:	b083      	sub	sp, #12
 801548c:	af00      	add	r7, sp, #0
 801548e:	4603      	mov	r3, r0
 8015490:	6039      	str	r1, [r7, #0]
 8015492:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015494:	683b      	ldr	r3, [r7, #0]
 8015496:	2204      	movs	r2, #4
 8015498:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801549a:	4b03      	ldr	r3, [pc, #12]	; (80154a8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801549c:	4618      	mov	r0, r3
 801549e:	370c      	adds	r7, #12
 80154a0:	46bd      	mov	sp, r7
 80154a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154a6:	4770      	bx	lr
 80154a8:	200021ec 	.word	0x200021ec

080154ac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80154ac:	b580      	push	{r7, lr}
 80154ae:	b082      	sub	sp, #8
 80154b0:	af00      	add	r7, sp, #0
 80154b2:	4603      	mov	r3, r0
 80154b4:	6039      	str	r1, [r7, #0]
 80154b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80154b8:	79fb      	ldrb	r3, [r7, #7]
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	d105      	bne.n	80154ca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80154be:	683a      	ldr	r2, [r7, #0]
 80154c0:	4907      	ldr	r1, [pc, #28]	; (80154e0 <USBD_FS_ProductStrDescriptor+0x34>)
 80154c2:	4808      	ldr	r0, [pc, #32]	; (80154e4 <USBD_FS_ProductStrDescriptor+0x38>)
 80154c4:	f7fc ff18 	bl	80122f8 <USBD_GetString>
 80154c8:	e004      	b.n	80154d4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80154ca:	683a      	ldr	r2, [r7, #0]
 80154cc:	4904      	ldr	r1, [pc, #16]	; (80154e0 <USBD_FS_ProductStrDescriptor+0x34>)
 80154ce:	4805      	ldr	r0, [pc, #20]	; (80154e4 <USBD_FS_ProductStrDescriptor+0x38>)
 80154d0:	f7fc ff12 	bl	80122f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80154d4:	4b02      	ldr	r3, [pc, #8]	; (80154e0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80154d6:	4618      	mov	r0, r3
 80154d8:	3708      	adds	r7, #8
 80154da:	46bd      	mov	sp, r7
 80154dc:	bd80      	pop	{r7, pc}
 80154de:	bf00      	nop
 80154e0:	2000f534 	.word	0x2000f534
 80154e4:	0801c21c 	.word	0x0801c21c

080154e8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80154e8:	b580      	push	{r7, lr}
 80154ea:	b082      	sub	sp, #8
 80154ec:	af00      	add	r7, sp, #0
 80154ee:	4603      	mov	r3, r0
 80154f0:	6039      	str	r1, [r7, #0]
 80154f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80154f4:	683a      	ldr	r2, [r7, #0]
 80154f6:	4904      	ldr	r1, [pc, #16]	; (8015508 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80154f8:	4804      	ldr	r0, [pc, #16]	; (801550c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80154fa:	f7fc fefd 	bl	80122f8 <USBD_GetString>
  return USBD_StrDesc;
 80154fe:	4b02      	ldr	r3, [pc, #8]	; (8015508 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8015500:	4618      	mov	r0, r3
 8015502:	3708      	adds	r7, #8
 8015504:	46bd      	mov	sp, r7
 8015506:	bd80      	pop	{r7, pc}
 8015508:	2000f534 	.word	0x2000f534
 801550c:	0801c234 	.word	0x0801c234

08015510 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015510:	b580      	push	{r7, lr}
 8015512:	b082      	sub	sp, #8
 8015514:	af00      	add	r7, sp, #0
 8015516:	4603      	mov	r3, r0
 8015518:	6039      	str	r1, [r7, #0]
 801551a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801551c:	683b      	ldr	r3, [r7, #0]
 801551e:	221a      	movs	r2, #26
 8015520:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8015522:	f000 f843 	bl	80155ac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8015526:	4b02      	ldr	r3, [pc, #8]	; (8015530 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8015528:	4618      	mov	r0, r3
 801552a:	3708      	adds	r7, #8
 801552c:	46bd      	mov	sp, r7
 801552e:	bd80      	pop	{r7, pc}
 8015530:	200021f0 	.word	0x200021f0

08015534 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015534:	b580      	push	{r7, lr}
 8015536:	b082      	sub	sp, #8
 8015538:	af00      	add	r7, sp, #0
 801553a:	4603      	mov	r3, r0
 801553c:	6039      	str	r1, [r7, #0]
 801553e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015540:	79fb      	ldrb	r3, [r7, #7]
 8015542:	2b00      	cmp	r3, #0
 8015544:	d105      	bne.n	8015552 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015546:	683a      	ldr	r2, [r7, #0]
 8015548:	4907      	ldr	r1, [pc, #28]	; (8015568 <USBD_FS_ConfigStrDescriptor+0x34>)
 801554a:	4808      	ldr	r0, [pc, #32]	; (801556c <USBD_FS_ConfigStrDescriptor+0x38>)
 801554c:	f7fc fed4 	bl	80122f8 <USBD_GetString>
 8015550:	e004      	b.n	801555c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015552:	683a      	ldr	r2, [r7, #0]
 8015554:	4904      	ldr	r1, [pc, #16]	; (8015568 <USBD_FS_ConfigStrDescriptor+0x34>)
 8015556:	4805      	ldr	r0, [pc, #20]	; (801556c <USBD_FS_ConfigStrDescriptor+0x38>)
 8015558:	f7fc fece 	bl	80122f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801555c:	4b02      	ldr	r3, [pc, #8]	; (8015568 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801555e:	4618      	mov	r0, r3
 8015560:	3708      	adds	r7, #8
 8015562:	46bd      	mov	sp, r7
 8015564:	bd80      	pop	{r7, pc}
 8015566:	bf00      	nop
 8015568:	2000f534 	.word	0x2000f534
 801556c:	0801c248 	.word	0x0801c248

08015570 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015570:	b580      	push	{r7, lr}
 8015572:	b082      	sub	sp, #8
 8015574:	af00      	add	r7, sp, #0
 8015576:	4603      	mov	r3, r0
 8015578:	6039      	str	r1, [r7, #0]
 801557a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801557c:	79fb      	ldrb	r3, [r7, #7]
 801557e:	2b00      	cmp	r3, #0
 8015580:	d105      	bne.n	801558e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015582:	683a      	ldr	r2, [r7, #0]
 8015584:	4907      	ldr	r1, [pc, #28]	; (80155a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015586:	4808      	ldr	r0, [pc, #32]	; (80155a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015588:	f7fc feb6 	bl	80122f8 <USBD_GetString>
 801558c:	e004      	b.n	8015598 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801558e:	683a      	ldr	r2, [r7, #0]
 8015590:	4904      	ldr	r1, [pc, #16]	; (80155a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015592:	4805      	ldr	r0, [pc, #20]	; (80155a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015594:	f7fc feb0 	bl	80122f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015598:	4b02      	ldr	r3, [pc, #8]	; (80155a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801559a:	4618      	mov	r0, r3
 801559c:	3708      	adds	r7, #8
 801559e:	46bd      	mov	sp, r7
 80155a0:	bd80      	pop	{r7, pc}
 80155a2:	bf00      	nop
 80155a4:	2000f534 	.word	0x2000f534
 80155a8:	0801c254 	.word	0x0801c254

080155ac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80155ac:	b580      	push	{r7, lr}
 80155ae:	b084      	sub	sp, #16
 80155b0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80155b2:	4b0f      	ldr	r3, [pc, #60]	; (80155f0 <Get_SerialNum+0x44>)
 80155b4:	681b      	ldr	r3, [r3, #0]
 80155b6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80155b8:	4b0e      	ldr	r3, [pc, #56]	; (80155f4 <Get_SerialNum+0x48>)
 80155ba:	681b      	ldr	r3, [r3, #0]
 80155bc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80155be:	4b0e      	ldr	r3, [pc, #56]	; (80155f8 <Get_SerialNum+0x4c>)
 80155c0:	681b      	ldr	r3, [r3, #0]
 80155c2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80155c4:	68fa      	ldr	r2, [r7, #12]
 80155c6:	687b      	ldr	r3, [r7, #4]
 80155c8:	4413      	add	r3, r2
 80155ca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80155cc:	68fb      	ldr	r3, [r7, #12]
 80155ce:	2b00      	cmp	r3, #0
 80155d0:	d009      	beq.n	80155e6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80155d2:	2208      	movs	r2, #8
 80155d4:	4909      	ldr	r1, [pc, #36]	; (80155fc <Get_SerialNum+0x50>)
 80155d6:	68f8      	ldr	r0, [r7, #12]
 80155d8:	f000 f814 	bl	8015604 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80155dc:	2204      	movs	r2, #4
 80155de:	4908      	ldr	r1, [pc, #32]	; (8015600 <Get_SerialNum+0x54>)
 80155e0:	68b8      	ldr	r0, [r7, #8]
 80155e2:	f000 f80f 	bl	8015604 <IntToUnicode>
  }
}
 80155e6:	bf00      	nop
 80155e8:	3710      	adds	r7, #16
 80155ea:	46bd      	mov	sp, r7
 80155ec:	bd80      	pop	{r7, pc}
 80155ee:	bf00      	nop
 80155f0:	1fff7a10 	.word	0x1fff7a10
 80155f4:	1fff7a14 	.word	0x1fff7a14
 80155f8:	1fff7a18 	.word	0x1fff7a18
 80155fc:	200021f2 	.word	0x200021f2
 8015600:	20002202 	.word	0x20002202

08015604 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015604:	b480      	push	{r7}
 8015606:	b087      	sub	sp, #28
 8015608:	af00      	add	r7, sp, #0
 801560a:	60f8      	str	r0, [r7, #12]
 801560c:	60b9      	str	r1, [r7, #8]
 801560e:	4613      	mov	r3, r2
 8015610:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8015612:	2300      	movs	r3, #0
 8015614:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8015616:	2300      	movs	r3, #0
 8015618:	75fb      	strb	r3, [r7, #23]
 801561a:	e027      	b.n	801566c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801561c:	68fb      	ldr	r3, [r7, #12]
 801561e:	0f1b      	lsrs	r3, r3, #28
 8015620:	2b09      	cmp	r3, #9
 8015622:	d80b      	bhi.n	801563c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015624:	68fb      	ldr	r3, [r7, #12]
 8015626:	0f1b      	lsrs	r3, r3, #28
 8015628:	b2da      	uxtb	r2, r3
 801562a:	7dfb      	ldrb	r3, [r7, #23]
 801562c:	005b      	lsls	r3, r3, #1
 801562e:	4619      	mov	r1, r3
 8015630:	68bb      	ldr	r3, [r7, #8]
 8015632:	440b      	add	r3, r1
 8015634:	3230      	adds	r2, #48	; 0x30
 8015636:	b2d2      	uxtb	r2, r2
 8015638:	701a      	strb	r2, [r3, #0]
 801563a:	e00a      	b.n	8015652 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801563c:	68fb      	ldr	r3, [r7, #12]
 801563e:	0f1b      	lsrs	r3, r3, #28
 8015640:	b2da      	uxtb	r2, r3
 8015642:	7dfb      	ldrb	r3, [r7, #23]
 8015644:	005b      	lsls	r3, r3, #1
 8015646:	4619      	mov	r1, r3
 8015648:	68bb      	ldr	r3, [r7, #8]
 801564a:	440b      	add	r3, r1
 801564c:	3237      	adds	r2, #55	; 0x37
 801564e:	b2d2      	uxtb	r2, r2
 8015650:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8015652:	68fb      	ldr	r3, [r7, #12]
 8015654:	011b      	lsls	r3, r3, #4
 8015656:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8015658:	7dfb      	ldrb	r3, [r7, #23]
 801565a:	005b      	lsls	r3, r3, #1
 801565c:	3301      	adds	r3, #1
 801565e:	68ba      	ldr	r2, [r7, #8]
 8015660:	4413      	add	r3, r2
 8015662:	2200      	movs	r2, #0
 8015664:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8015666:	7dfb      	ldrb	r3, [r7, #23]
 8015668:	3301      	adds	r3, #1
 801566a:	75fb      	strb	r3, [r7, #23]
 801566c:	7dfa      	ldrb	r2, [r7, #23]
 801566e:	79fb      	ldrb	r3, [r7, #7]
 8015670:	429a      	cmp	r2, r3
 8015672:	d3d3      	bcc.n	801561c <IntToUnicode+0x18>
  }
}
 8015674:	bf00      	nop
 8015676:	bf00      	nop
 8015678:	371c      	adds	r7, #28
 801567a:	46bd      	mov	sp, r7
 801567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015680:	4770      	bx	lr
	...

08015684 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8015684:	b580      	push	{r7, lr}
 8015686:	b08a      	sub	sp, #40	; 0x28
 8015688:	af00      	add	r7, sp, #0
 801568a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801568c:	f107 0314 	add.w	r3, r7, #20
 8015690:	2200      	movs	r2, #0
 8015692:	601a      	str	r2, [r3, #0]
 8015694:	605a      	str	r2, [r3, #4]
 8015696:	609a      	str	r2, [r3, #8]
 8015698:	60da      	str	r2, [r3, #12]
 801569a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	681b      	ldr	r3, [r3, #0]
 80156a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80156a4:	d13a      	bne.n	801571c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80156a6:	2300      	movs	r3, #0
 80156a8:	613b      	str	r3, [r7, #16]
 80156aa:	4b1e      	ldr	r3, [pc, #120]	; (8015724 <HAL_PCD_MspInit+0xa0>)
 80156ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80156ae:	4a1d      	ldr	r2, [pc, #116]	; (8015724 <HAL_PCD_MspInit+0xa0>)
 80156b0:	f043 0301 	orr.w	r3, r3, #1
 80156b4:	6313      	str	r3, [r2, #48]	; 0x30
 80156b6:	4b1b      	ldr	r3, [pc, #108]	; (8015724 <HAL_PCD_MspInit+0xa0>)
 80156b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80156ba:	f003 0301 	and.w	r3, r3, #1
 80156be:	613b      	str	r3, [r7, #16]
 80156c0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80156c2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80156c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80156c8:	2302      	movs	r3, #2
 80156ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80156cc:	2300      	movs	r3, #0
 80156ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80156d0:	2303      	movs	r3, #3
 80156d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80156d4:	230a      	movs	r3, #10
 80156d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80156d8:	f107 0314 	add.w	r3, r7, #20
 80156dc:	4619      	mov	r1, r3
 80156de:	4812      	ldr	r0, [pc, #72]	; (8015728 <HAL_PCD_MspInit+0xa4>)
 80156e0:	f7f6 fb4e 	bl	800bd80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80156e4:	4b0f      	ldr	r3, [pc, #60]	; (8015724 <HAL_PCD_MspInit+0xa0>)
 80156e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80156e8:	4a0e      	ldr	r2, [pc, #56]	; (8015724 <HAL_PCD_MspInit+0xa0>)
 80156ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80156ee:	6353      	str	r3, [r2, #52]	; 0x34
 80156f0:	2300      	movs	r3, #0
 80156f2:	60fb      	str	r3, [r7, #12]
 80156f4:	4b0b      	ldr	r3, [pc, #44]	; (8015724 <HAL_PCD_MspInit+0xa0>)
 80156f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80156f8:	4a0a      	ldr	r2, [pc, #40]	; (8015724 <HAL_PCD_MspInit+0xa0>)
 80156fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80156fe:	6453      	str	r3, [r2, #68]	; 0x44
 8015700:	4b08      	ldr	r3, [pc, #32]	; (8015724 <HAL_PCD_MspInit+0xa0>)
 8015702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015704:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015708:	60fb      	str	r3, [r7, #12]
 801570a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801570c:	2200      	movs	r2, #0
 801570e:	2105      	movs	r1, #5
 8015710:	2043      	movs	r0, #67	; 0x43
 8015712:	f7f5 ff6b 	bl	800b5ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8015716:	2043      	movs	r0, #67	; 0x43
 8015718:	f7f5 ff84 	bl	800b624 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801571c:	bf00      	nop
 801571e:	3728      	adds	r7, #40	; 0x28
 8015720:	46bd      	mov	sp, r7
 8015722:	bd80      	pop	{r7, pc}
 8015724:	40023800 	.word	0x40023800
 8015728:	40020000 	.word	0x40020000

0801572c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801572c:	b580      	push	{r7, lr}
 801572e:	b082      	sub	sp, #8
 8015730:	af00      	add	r7, sp, #0
 8015732:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8015740:	4619      	mov	r1, r3
 8015742:	4610      	mov	r0, r2
 8015744:	f7fb fe46 	bl	80113d4 <USBD_LL_SetupStage>
}
 8015748:	bf00      	nop
 801574a:	3708      	adds	r7, #8
 801574c:	46bd      	mov	sp, r7
 801574e:	bd80      	pop	{r7, pc}

08015750 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015750:	b580      	push	{r7, lr}
 8015752:	b082      	sub	sp, #8
 8015754:	af00      	add	r7, sp, #0
 8015756:	6078      	str	r0, [r7, #4]
 8015758:	460b      	mov	r3, r1
 801575a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8015762:	78fa      	ldrb	r2, [r7, #3]
 8015764:	6879      	ldr	r1, [r7, #4]
 8015766:	4613      	mov	r3, r2
 8015768:	00db      	lsls	r3, r3, #3
 801576a:	1a9b      	subs	r3, r3, r2
 801576c:	009b      	lsls	r3, r3, #2
 801576e:	440b      	add	r3, r1
 8015770:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8015774:	681a      	ldr	r2, [r3, #0]
 8015776:	78fb      	ldrb	r3, [r7, #3]
 8015778:	4619      	mov	r1, r3
 801577a:	f7fb fe80 	bl	801147e <USBD_LL_DataOutStage>
}
 801577e:	bf00      	nop
 8015780:	3708      	adds	r7, #8
 8015782:	46bd      	mov	sp, r7
 8015784:	bd80      	pop	{r7, pc}

08015786 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015786:	b580      	push	{r7, lr}
 8015788:	b082      	sub	sp, #8
 801578a:	af00      	add	r7, sp, #0
 801578c:	6078      	str	r0, [r7, #4]
 801578e:	460b      	mov	r3, r1
 8015790:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8015798:	78fa      	ldrb	r2, [r7, #3]
 801579a:	6879      	ldr	r1, [r7, #4]
 801579c:	4613      	mov	r3, r2
 801579e:	00db      	lsls	r3, r3, #3
 80157a0:	1a9b      	subs	r3, r3, r2
 80157a2:	009b      	lsls	r3, r3, #2
 80157a4:	440b      	add	r3, r1
 80157a6:	3348      	adds	r3, #72	; 0x48
 80157a8:	681a      	ldr	r2, [r3, #0]
 80157aa:	78fb      	ldrb	r3, [r7, #3]
 80157ac:	4619      	mov	r1, r3
 80157ae:	f7fb fec9 	bl	8011544 <USBD_LL_DataInStage>
}
 80157b2:	bf00      	nop
 80157b4:	3708      	adds	r7, #8
 80157b6:	46bd      	mov	sp, r7
 80157b8:	bd80      	pop	{r7, pc}

080157ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80157ba:	b580      	push	{r7, lr}
 80157bc:	b082      	sub	sp, #8
 80157be:	af00      	add	r7, sp, #0
 80157c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80157c8:	4618      	mov	r0, r3
 80157ca:	f7fb ffcd 	bl	8011768 <USBD_LL_SOF>
}
 80157ce:	bf00      	nop
 80157d0:	3708      	adds	r7, #8
 80157d2:	46bd      	mov	sp, r7
 80157d4:	bd80      	pop	{r7, pc}

080157d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80157d6:	b580      	push	{r7, lr}
 80157d8:	b084      	sub	sp, #16
 80157da:	af00      	add	r7, sp, #0
 80157dc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80157de:	2301      	movs	r3, #1
 80157e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	68db      	ldr	r3, [r3, #12]
 80157e6:	2b00      	cmp	r3, #0
 80157e8:	d102      	bne.n	80157f0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80157ea:	2300      	movs	r3, #0
 80157ec:	73fb      	strb	r3, [r7, #15]
 80157ee:	e008      	b.n	8015802 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	68db      	ldr	r3, [r3, #12]
 80157f4:	2b02      	cmp	r3, #2
 80157f6:	d102      	bne.n	80157fe <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80157f8:	2301      	movs	r3, #1
 80157fa:	73fb      	strb	r3, [r7, #15]
 80157fc:	e001      	b.n	8015802 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80157fe:	f7ef fee5 	bl	80055cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015802:	687b      	ldr	r3, [r7, #4]
 8015804:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015808:	7bfa      	ldrb	r2, [r7, #15]
 801580a:	4611      	mov	r1, r2
 801580c:	4618      	mov	r0, r3
 801580e:	f7fb ff70 	bl	80116f2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015818:	4618      	mov	r0, r3
 801581a:	f7fb ff29 	bl	8011670 <USBD_LL_Reset>
}
 801581e:	bf00      	nop
 8015820:	3710      	adds	r7, #16
 8015822:	46bd      	mov	sp, r7
 8015824:	bd80      	pop	{r7, pc}
	...

08015828 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015828:	b580      	push	{r7, lr}
 801582a:	b082      	sub	sp, #8
 801582c:	af00      	add	r7, sp, #0
 801582e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015836:	4618      	mov	r0, r3
 8015838:	f7fb ff6b 	bl	8011712 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	681b      	ldr	r3, [r3, #0]
 8015840:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015844:	681b      	ldr	r3, [r3, #0]
 8015846:	687a      	ldr	r2, [r7, #4]
 8015848:	6812      	ldr	r2, [r2, #0]
 801584a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801584e:	f043 0301 	orr.w	r3, r3, #1
 8015852:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	6a1b      	ldr	r3, [r3, #32]
 8015858:	2b00      	cmp	r3, #0
 801585a:	d005      	beq.n	8015868 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801585c:	4b04      	ldr	r3, [pc, #16]	; (8015870 <HAL_PCD_SuspendCallback+0x48>)
 801585e:	691b      	ldr	r3, [r3, #16]
 8015860:	4a03      	ldr	r2, [pc, #12]	; (8015870 <HAL_PCD_SuspendCallback+0x48>)
 8015862:	f043 0306 	orr.w	r3, r3, #6
 8015866:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8015868:	bf00      	nop
 801586a:	3708      	adds	r7, #8
 801586c:	46bd      	mov	sp, r7
 801586e:	bd80      	pop	{r7, pc}
 8015870:	e000ed00 	.word	0xe000ed00

08015874 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015874:	b580      	push	{r7, lr}
 8015876:	b082      	sub	sp, #8
 8015878:	af00      	add	r7, sp, #0
 801587a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015882:	4618      	mov	r0, r3
 8015884:	f7fb ff5a 	bl	801173c <USBD_LL_Resume>
}
 8015888:	bf00      	nop
 801588a:	3708      	adds	r7, #8
 801588c:	46bd      	mov	sp, r7
 801588e:	bd80      	pop	{r7, pc}

08015890 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015890:	b580      	push	{r7, lr}
 8015892:	b082      	sub	sp, #8
 8015894:	af00      	add	r7, sp, #0
 8015896:	6078      	str	r0, [r7, #4]
 8015898:	460b      	mov	r3, r1
 801589a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80158a2:	78fa      	ldrb	r2, [r7, #3]
 80158a4:	4611      	mov	r1, r2
 80158a6:	4618      	mov	r0, r3
 80158a8:	f7fb ff85 	bl	80117b6 <USBD_LL_IsoOUTIncomplete>
}
 80158ac:	bf00      	nop
 80158ae:	3708      	adds	r7, #8
 80158b0:	46bd      	mov	sp, r7
 80158b2:	bd80      	pop	{r7, pc}

080158b4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80158b4:	b580      	push	{r7, lr}
 80158b6:	b082      	sub	sp, #8
 80158b8:	af00      	add	r7, sp, #0
 80158ba:	6078      	str	r0, [r7, #4]
 80158bc:	460b      	mov	r3, r1
 80158be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80158c6:	78fa      	ldrb	r2, [r7, #3]
 80158c8:	4611      	mov	r1, r2
 80158ca:	4618      	mov	r0, r3
 80158cc:	f7fb ff66 	bl	801179c <USBD_LL_IsoINIncomplete>
}
 80158d0:	bf00      	nop
 80158d2:	3708      	adds	r7, #8
 80158d4:	46bd      	mov	sp, r7
 80158d6:	bd80      	pop	{r7, pc}

080158d8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80158d8:	b580      	push	{r7, lr}
 80158da:	b082      	sub	sp, #8
 80158dc:	af00      	add	r7, sp, #0
 80158de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80158e6:	4618      	mov	r0, r3
 80158e8:	f7fb ff72 	bl	80117d0 <USBD_LL_DevConnected>
}
 80158ec:	bf00      	nop
 80158ee:	3708      	adds	r7, #8
 80158f0:	46bd      	mov	sp, r7
 80158f2:	bd80      	pop	{r7, pc}

080158f4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80158f4:	b580      	push	{r7, lr}
 80158f6:	b082      	sub	sp, #8
 80158f8:	af00      	add	r7, sp, #0
 80158fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015902:	4618      	mov	r0, r3
 8015904:	f7fb ff6f 	bl	80117e6 <USBD_LL_DevDisconnected>
}
 8015908:	bf00      	nop
 801590a:	3708      	adds	r7, #8
 801590c:	46bd      	mov	sp, r7
 801590e:	bd80      	pop	{r7, pc}

08015910 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015910:	b580      	push	{r7, lr}
 8015912:	b082      	sub	sp, #8
 8015914:	af00      	add	r7, sp, #0
 8015916:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	781b      	ldrb	r3, [r3, #0]
 801591c:	2b00      	cmp	r3, #0
 801591e:	d13c      	bne.n	801599a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8015920:	4a20      	ldr	r2, [pc, #128]	; (80159a4 <USBD_LL_Init+0x94>)
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	4a1e      	ldr	r2, [pc, #120]	; (80159a4 <USBD_LL_Init+0x94>)
 801592c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8015930:	4b1c      	ldr	r3, [pc, #112]	; (80159a4 <USBD_LL_Init+0x94>)
 8015932:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8015936:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8015938:	4b1a      	ldr	r3, [pc, #104]	; (80159a4 <USBD_LL_Init+0x94>)
 801593a:	2204      	movs	r2, #4
 801593c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801593e:	4b19      	ldr	r3, [pc, #100]	; (80159a4 <USBD_LL_Init+0x94>)
 8015940:	2202      	movs	r2, #2
 8015942:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8015944:	4b17      	ldr	r3, [pc, #92]	; (80159a4 <USBD_LL_Init+0x94>)
 8015946:	2200      	movs	r2, #0
 8015948:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801594a:	4b16      	ldr	r3, [pc, #88]	; (80159a4 <USBD_LL_Init+0x94>)
 801594c:	2202      	movs	r2, #2
 801594e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8015950:	4b14      	ldr	r3, [pc, #80]	; (80159a4 <USBD_LL_Init+0x94>)
 8015952:	2200      	movs	r2, #0
 8015954:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8015956:	4b13      	ldr	r3, [pc, #76]	; (80159a4 <USBD_LL_Init+0x94>)
 8015958:	2200      	movs	r2, #0
 801595a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801595c:	4b11      	ldr	r3, [pc, #68]	; (80159a4 <USBD_LL_Init+0x94>)
 801595e:	2200      	movs	r2, #0
 8015960:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8015962:	4b10      	ldr	r3, [pc, #64]	; (80159a4 <USBD_LL_Init+0x94>)
 8015964:	2200      	movs	r2, #0
 8015966:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8015968:	4b0e      	ldr	r3, [pc, #56]	; (80159a4 <USBD_LL_Init+0x94>)
 801596a:	2200      	movs	r2, #0
 801596c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801596e:	480d      	ldr	r0, [pc, #52]	; (80159a4 <USBD_LL_Init+0x94>)
 8015970:	f7f6 fc12 	bl	800c198 <HAL_PCD_Init>
 8015974:	4603      	mov	r3, r0
 8015976:	2b00      	cmp	r3, #0
 8015978:	d001      	beq.n	801597e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801597a:	f7ef fe27 	bl	80055cc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801597e:	2180      	movs	r1, #128	; 0x80
 8015980:	4808      	ldr	r0, [pc, #32]	; (80159a4 <USBD_LL_Init+0x94>)
 8015982:	f7f7 fd70 	bl	800d466 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8015986:	2240      	movs	r2, #64	; 0x40
 8015988:	2100      	movs	r1, #0
 801598a:	4806      	ldr	r0, [pc, #24]	; (80159a4 <USBD_LL_Init+0x94>)
 801598c:	f7f7 fd24 	bl	800d3d8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8015990:	2280      	movs	r2, #128	; 0x80
 8015992:	2101      	movs	r1, #1
 8015994:	4803      	ldr	r0, [pc, #12]	; (80159a4 <USBD_LL_Init+0x94>)
 8015996:	f7f7 fd1f 	bl	800d3d8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801599a:	2300      	movs	r3, #0
}
 801599c:	4618      	mov	r0, r3
 801599e:	3708      	adds	r7, #8
 80159a0:	46bd      	mov	sp, r7
 80159a2:	bd80      	pop	{r7, pc}
 80159a4:	2000f734 	.word	0x2000f734

080159a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80159a8:	b580      	push	{r7, lr}
 80159aa:	b084      	sub	sp, #16
 80159ac:	af00      	add	r7, sp, #0
 80159ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80159b0:	2300      	movs	r3, #0
 80159b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80159b4:	2300      	movs	r3, #0
 80159b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80159be:	4618      	mov	r0, r3
 80159c0:	f7f6 fd07 	bl	800c3d2 <HAL_PCD_Start>
 80159c4:	4603      	mov	r3, r0
 80159c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80159c8:	7bfb      	ldrb	r3, [r7, #15]
 80159ca:	4618      	mov	r0, r3
 80159cc:	f000 f92a 	bl	8015c24 <USBD_Get_USB_Status>
 80159d0:	4603      	mov	r3, r0
 80159d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80159d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80159d6:	4618      	mov	r0, r3
 80159d8:	3710      	adds	r7, #16
 80159da:	46bd      	mov	sp, r7
 80159dc:	bd80      	pop	{r7, pc}

080159de <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80159de:	b580      	push	{r7, lr}
 80159e0:	b084      	sub	sp, #16
 80159e2:	af00      	add	r7, sp, #0
 80159e4:	6078      	str	r0, [r7, #4]
 80159e6:	4608      	mov	r0, r1
 80159e8:	4611      	mov	r1, r2
 80159ea:	461a      	mov	r2, r3
 80159ec:	4603      	mov	r3, r0
 80159ee:	70fb      	strb	r3, [r7, #3]
 80159f0:	460b      	mov	r3, r1
 80159f2:	70bb      	strb	r3, [r7, #2]
 80159f4:	4613      	mov	r3, r2
 80159f6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80159f8:	2300      	movs	r3, #0
 80159fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80159fc:	2300      	movs	r3, #0
 80159fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015a06:	78bb      	ldrb	r3, [r7, #2]
 8015a08:	883a      	ldrh	r2, [r7, #0]
 8015a0a:	78f9      	ldrb	r1, [r7, #3]
 8015a0c:	f7f7 f8eb 	bl	800cbe6 <HAL_PCD_EP_Open>
 8015a10:	4603      	mov	r3, r0
 8015a12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015a14:	7bfb      	ldrb	r3, [r7, #15]
 8015a16:	4618      	mov	r0, r3
 8015a18:	f000 f904 	bl	8015c24 <USBD_Get_USB_Status>
 8015a1c:	4603      	mov	r3, r0
 8015a1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015a20:	7bbb      	ldrb	r3, [r7, #14]
}
 8015a22:	4618      	mov	r0, r3
 8015a24:	3710      	adds	r7, #16
 8015a26:	46bd      	mov	sp, r7
 8015a28:	bd80      	pop	{r7, pc}

08015a2a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015a2a:	b580      	push	{r7, lr}
 8015a2c:	b084      	sub	sp, #16
 8015a2e:	af00      	add	r7, sp, #0
 8015a30:	6078      	str	r0, [r7, #4]
 8015a32:	460b      	mov	r3, r1
 8015a34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015a36:	2300      	movs	r3, #0
 8015a38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015a3a:	2300      	movs	r3, #0
 8015a3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015a44:	78fa      	ldrb	r2, [r7, #3]
 8015a46:	4611      	mov	r1, r2
 8015a48:	4618      	mov	r0, r3
 8015a4a:	f7f7 f934 	bl	800ccb6 <HAL_PCD_EP_Close>
 8015a4e:	4603      	mov	r3, r0
 8015a50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015a52:	7bfb      	ldrb	r3, [r7, #15]
 8015a54:	4618      	mov	r0, r3
 8015a56:	f000 f8e5 	bl	8015c24 <USBD_Get_USB_Status>
 8015a5a:	4603      	mov	r3, r0
 8015a5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015a5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8015a60:	4618      	mov	r0, r3
 8015a62:	3710      	adds	r7, #16
 8015a64:	46bd      	mov	sp, r7
 8015a66:	bd80      	pop	{r7, pc}

08015a68 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015a68:	b580      	push	{r7, lr}
 8015a6a:	b084      	sub	sp, #16
 8015a6c:	af00      	add	r7, sp, #0
 8015a6e:	6078      	str	r0, [r7, #4]
 8015a70:	460b      	mov	r3, r1
 8015a72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015a74:	2300      	movs	r3, #0
 8015a76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015a78:	2300      	movs	r3, #0
 8015a7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015a82:	78fa      	ldrb	r2, [r7, #3]
 8015a84:	4611      	mov	r1, r2
 8015a86:	4618      	mov	r0, r3
 8015a88:	f7f7 fa0c 	bl	800cea4 <HAL_PCD_EP_SetStall>
 8015a8c:	4603      	mov	r3, r0
 8015a8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015a90:	7bfb      	ldrb	r3, [r7, #15]
 8015a92:	4618      	mov	r0, r3
 8015a94:	f000 f8c6 	bl	8015c24 <USBD_Get_USB_Status>
 8015a98:	4603      	mov	r3, r0
 8015a9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015a9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8015a9e:	4618      	mov	r0, r3
 8015aa0:	3710      	adds	r7, #16
 8015aa2:	46bd      	mov	sp, r7
 8015aa4:	bd80      	pop	{r7, pc}

08015aa6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015aa6:	b580      	push	{r7, lr}
 8015aa8:	b084      	sub	sp, #16
 8015aaa:	af00      	add	r7, sp, #0
 8015aac:	6078      	str	r0, [r7, #4]
 8015aae:	460b      	mov	r3, r1
 8015ab0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015ab2:	2300      	movs	r3, #0
 8015ab4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015ab6:	2300      	movs	r3, #0
 8015ab8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015ac0:	78fa      	ldrb	r2, [r7, #3]
 8015ac2:	4611      	mov	r1, r2
 8015ac4:	4618      	mov	r0, r3
 8015ac6:	f7f7 fa51 	bl	800cf6c <HAL_PCD_EP_ClrStall>
 8015aca:	4603      	mov	r3, r0
 8015acc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015ace:	7bfb      	ldrb	r3, [r7, #15]
 8015ad0:	4618      	mov	r0, r3
 8015ad2:	f000 f8a7 	bl	8015c24 <USBD_Get_USB_Status>
 8015ad6:	4603      	mov	r3, r0
 8015ad8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015ada:	7bbb      	ldrb	r3, [r7, #14]
}
 8015adc:	4618      	mov	r0, r3
 8015ade:	3710      	adds	r7, #16
 8015ae0:	46bd      	mov	sp, r7
 8015ae2:	bd80      	pop	{r7, pc}

08015ae4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015ae4:	b480      	push	{r7}
 8015ae6:	b085      	sub	sp, #20
 8015ae8:	af00      	add	r7, sp, #0
 8015aea:	6078      	str	r0, [r7, #4]
 8015aec:	460b      	mov	r3, r1
 8015aee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015af6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015af8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015afc:	2b00      	cmp	r3, #0
 8015afe:	da0b      	bge.n	8015b18 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015b00:	78fb      	ldrb	r3, [r7, #3]
 8015b02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015b06:	68f9      	ldr	r1, [r7, #12]
 8015b08:	4613      	mov	r3, r2
 8015b0a:	00db      	lsls	r3, r3, #3
 8015b0c:	1a9b      	subs	r3, r3, r2
 8015b0e:	009b      	lsls	r3, r3, #2
 8015b10:	440b      	add	r3, r1
 8015b12:	333e      	adds	r3, #62	; 0x3e
 8015b14:	781b      	ldrb	r3, [r3, #0]
 8015b16:	e00b      	b.n	8015b30 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015b18:	78fb      	ldrb	r3, [r7, #3]
 8015b1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015b1e:	68f9      	ldr	r1, [r7, #12]
 8015b20:	4613      	mov	r3, r2
 8015b22:	00db      	lsls	r3, r3, #3
 8015b24:	1a9b      	subs	r3, r3, r2
 8015b26:	009b      	lsls	r3, r3, #2
 8015b28:	440b      	add	r3, r1
 8015b2a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015b2e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015b30:	4618      	mov	r0, r3
 8015b32:	3714      	adds	r7, #20
 8015b34:	46bd      	mov	sp, r7
 8015b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b3a:	4770      	bx	lr

08015b3c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015b3c:	b580      	push	{r7, lr}
 8015b3e:	b084      	sub	sp, #16
 8015b40:	af00      	add	r7, sp, #0
 8015b42:	6078      	str	r0, [r7, #4]
 8015b44:	460b      	mov	r3, r1
 8015b46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015b48:	2300      	movs	r3, #0
 8015b4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b4c:	2300      	movs	r3, #0
 8015b4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015b56:	78fa      	ldrb	r2, [r7, #3]
 8015b58:	4611      	mov	r1, r2
 8015b5a:	4618      	mov	r0, r3
 8015b5c:	f7f7 f81e 	bl	800cb9c <HAL_PCD_SetAddress>
 8015b60:	4603      	mov	r3, r0
 8015b62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015b64:	7bfb      	ldrb	r3, [r7, #15]
 8015b66:	4618      	mov	r0, r3
 8015b68:	f000 f85c 	bl	8015c24 <USBD_Get_USB_Status>
 8015b6c:	4603      	mov	r3, r0
 8015b6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015b70:	7bbb      	ldrb	r3, [r7, #14]
}
 8015b72:	4618      	mov	r0, r3
 8015b74:	3710      	adds	r7, #16
 8015b76:	46bd      	mov	sp, r7
 8015b78:	bd80      	pop	{r7, pc}

08015b7a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015b7a:	b580      	push	{r7, lr}
 8015b7c:	b086      	sub	sp, #24
 8015b7e:	af00      	add	r7, sp, #0
 8015b80:	60f8      	str	r0, [r7, #12]
 8015b82:	607a      	str	r2, [r7, #4]
 8015b84:	603b      	str	r3, [r7, #0]
 8015b86:	460b      	mov	r3, r1
 8015b88:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015b8a:	2300      	movs	r3, #0
 8015b8c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b8e:	2300      	movs	r3, #0
 8015b90:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015b92:	68fb      	ldr	r3, [r7, #12]
 8015b94:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015b98:	7af9      	ldrb	r1, [r7, #11]
 8015b9a:	683b      	ldr	r3, [r7, #0]
 8015b9c:	687a      	ldr	r2, [r7, #4]
 8015b9e:	f7f7 f937 	bl	800ce10 <HAL_PCD_EP_Transmit>
 8015ba2:	4603      	mov	r3, r0
 8015ba4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015ba6:	7dfb      	ldrb	r3, [r7, #23]
 8015ba8:	4618      	mov	r0, r3
 8015baa:	f000 f83b 	bl	8015c24 <USBD_Get_USB_Status>
 8015bae:	4603      	mov	r3, r0
 8015bb0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015bb2:	7dbb      	ldrb	r3, [r7, #22]
}
 8015bb4:	4618      	mov	r0, r3
 8015bb6:	3718      	adds	r7, #24
 8015bb8:	46bd      	mov	sp, r7
 8015bba:	bd80      	pop	{r7, pc}

08015bbc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015bbc:	b580      	push	{r7, lr}
 8015bbe:	b086      	sub	sp, #24
 8015bc0:	af00      	add	r7, sp, #0
 8015bc2:	60f8      	str	r0, [r7, #12]
 8015bc4:	607a      	str	r2, [r7, #4]
 8015bc6:	603b      	str	r3, [r7, #0]
 8015bc8:	460b      	mov	r3, r1
 8015bca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015bcc:	2300      	movs	r3, #0
 8015bce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015bd0:	2300      	movs	r3, #0
 8015bd2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015bd4:	68fb      	ldr	r3, [r7, #12]
 8015bd6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015bda:	7af9      	ldrb	r1, [r7, #11]
 8015bdc:	683b      	ldr	r3, [r7, #0]
 8015bde:	687a      	ldr	r2, [r7, #4]
 8015be0:	f7f7 f8b3 	bl	800cd4a <HAL_PCD_EP_Receive>
 8015be4:	4603      	mov	r3, r0
 8015be6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015be8:	7dfb      	ldrb	r3, [r7, #23]
 8015bea:	4618      	mov	r0, r3
 8015bec:	f000 f81a 	bl	8015c24 <USBD_Get_USB_Status>
 8015bf0:	4603      	mov	r3, r0
 8015bf2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015bf4:	7dbb      	ldrb	r3, [r7, #22]
}
 8015bf6:	4618      	mov	r0, r3
 8015bf8:	3718      	adds	r7, #24
 8015bfa:	46bd      	mov	sp, r7
 8015bfc:	bd80      	pop	{r7, pc}

08015bfe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015bfe:	b580      	push	{r7, lr}
 8015c00:	b082      	sub	sp, #8
 8015c02:	af00      	add	r7, sp, #0
 8015c04:	6078      	str	r0, [r7, #4]
 8015c06:	460b      	mov	r3, r1
 8015c08:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015c0a:	687b      	ldr	r3, [r7, #4]
 8015c0c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015c10:	78fa      	ldrb	r2, [r7, #3]
 8015c12:	4611      	mov	r1, r2
 8015c14:	4618      	mov	r0, r3
 8015c16:	f7f7 f8e3 	bl	800cde0 <HAL_PCD_EP_GetRxCount>
 8015c1a:	4603      	mov	r3, r0
}
 8015c1c:	4618      	mov	r0, r3
 8015c1e:	3708      	adds	r7, #8
 8015c20:	46bd      	mov	sp, r7
 8015c22:	bd80      	pop	{r7, pc}

08015c24 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015c24:	b480      	push	{r7}
 8015c26:	b085      	sub	sp, #20
 8015c28:	af00      	add	r7, sp, #0
 8015c2a:	4603      	mov	r3, r0
 8015c2c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015c2e:	2300      	movs	r3, #0
 8015c30:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015c32:	79fb      	ldrb	r3, [r7, #7]
 8015c34:	2b03      	cmp	r3, #3
 8015c36:	d817      	bhi.n	8015c68 <USBD_Get_USB_Status+0x44>
 8015c38:	a201      	add	r2, pc, #4	; (adr r2, 8015c40 <USBD_Get_USB_Status+0x1c>)
 8015c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c3e:	bf00      	nop
 8015c40:	08015c51 	.word	0x08015c51
 8015c44:	08015c57 	.word	0x08015c57
 8015c48:	08015c5d 	.word	0x08015c5d
 8015c4c:	08015c63 	.word	0x08015c63
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015c50:	2300      	movs	r3, #0
 8015c52:	73fb      	strb	r3, [r7, #15]
    break;
 8015c54:	e00b      	b.n	8015c6e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015c56:	2303      	movs	r3, #3
 8015c58:	73fb      	strb	r3, [r7, #15]
    break;
 8015c5a:	e008      	b.n	8015c6e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015c5c:	2301      	movs	r3, #1
 8015c5e:	73fb      	strb	r3, [r7, #15]
    break;
 8015c60:	e005      	b.n	8015c6e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015c62:	2303      	movs	r3, #3
 8015c64:	73fb      	strb	r3, [r7, #15]
    break;
 8015c66:	e002      	b.n	8015c6e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015c68:	2303      	movs	r3, #3
 8015c6a:	73fb      	strb	r3, [r7, #15]
    break;
 8015c6c:	bf00      	nop
  }
  return usb_status;
 8015c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c70:	4618      	mov	r0, r3
 8015c72:	3714      	adds	r7, #20
 8015c74:	46bd      	mov	sp, r7
 8015c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c7a:	4770      	bx	lr

08015c7c <__errno>:
 8015c7c:	4b01      	ldr	r3, [pc, #4]	; (8015c84 <__errno+0x8>)
 8015c7e:	6818      	ldr	r0, [r3, #0]
 8015c80:	4770      	bx	lr
 8015c82:	bf00      	nop
 8015c84:	2000220c 	.word	0x2000220c

08015c88 <__libc_init_array>:
 8015c88:	b570      	push	{r4, r5, r6, lr}
 8015c8a:	4d0d      	ldr	r5, [pc, #52]	; (8015cc0 <__libc_init_array+0x38>)
 8015c8c:	4c0d      	ldr	r4, [pc, #52]	; (8015cc4 <__libc_init_array+0x3c>)
 8015c8e:	1b64      	subs	r4, r4, r5
 8015c90:	10a4      	asrs	r4, r4, #2
 8015c92:	2600      	movs	r6, #0
 8015c94:	42a6      	cmp	r6, r4
 8015c96:	d109      	bne.n	8015cac <__libc_init_array+0x24>
 8015c98:	4d0b      	ldr	r5, [pc, #44]	; (8015cc8 <__libc_init_array+0x40>)
 8015c9a:	4c0c      	ldr	r4, [pc, #48]	; (8015ccc <__libc_init_array+0x44>)
 8015c9c:	f006 f972 	bl	801bf84 <_init>
 8015ca0:	1b64      	subs	r4, r4, r5
 8015ca2:	10a4      	asrs	r4, r4, #2
 8015ca4:	2600      	movs	r6, #0
 8015ca6:	42a6      	cmp	r6, r4
 8015ca8:	d105      	bne.n	8015cb6 <__libc_init_array+0x2e>
 8015caa:	bd70      	pop	{r4, r5, r6, pc}
 8015cac:	f855 3b04 	ldr.w	r3, [r5], #4
 8015cb0:	4798      	blx	r3
 8015cb2:	3601      	adds	r6, #1
 8015cb4:	e7ee      	b.n	8015c94 <__libc_init_array+0xc>
 8015cb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8015cba:	4798      	blx	r3
 8015cbc:	3601      	adds	r6, #1
 8015cbe:	e7f2      	b.n	8015ca6 <__libc_init_array+0x1e>
 8015cc0:	0801c990 	.word	0x0801c990
 8015cc4:	0801c990 	.word	0x0801c990
 8015cc8:	0801c990 	.word	0x0801c990
 8015ccc:	0801c994 	.word	0x0801c994

08015cd0 <malloc>:
 8015cd0:	4b02      	ldr	r3, [pc, #8]	; (8015cdc <malloc+0xc>)
 8015cd2:	4601      	mov	r1, r0
 8015cd4:	6818      	ldr	r0, [r3, #0]
 8015cd6:	f000 b88b 	b.w	8015df0 <_malloc_r>
 8015cda:	bf00      	nop
 8015cdc:	2000220c 	.word	0x2000220c

08015ce0 <free>:
 8015ce0:	4b02      	ldr	r3, [pc, #8]	; (8015cec <free+0xc>)
 8015ce2:	4601      	mov	r1, r0
 8015ce4:	6818      	ldr	r0, [r3, #0]
 8015ce6:	f000 b833 	b.w	8015d50 <_free_r>
 8015cea:	bf00      	nop
 8015cec:	2000220c 	.word	0x2000220c

08015cf0 <memcpy>:
 8015cf0:	440a      	add	r2, r1
 8015cf2:	4291      	cmp	r1, r2
 8015cf4:	f100 33ff 	add.w	r3, r0, #4294967295
 8015cf8:	d100      	bne.n	8015cfc <memcpy+0xc>
 8015cfa:	4770      	bx	lr
 8015cfc:	b510      	push	{r4, lr}
 8015cfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015d02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015d06:	4291      	cmp	r1, r2
 8015d08:	d1f9      	bne.n	8015cfe <memcpy+0xe>
 8015d0a:	bd10      	pop	{r4, pc}

08015d0c <memmove>:
 8015d0c:	4288      	cmp	r0, r1
 8015d0e:	b510      	push	{r4, lr}
 8015d10:	eb01 0402 	add.w	r4, r1, r2
 8015d14:	d902      	bls.n	8015d1c <memmove+0x10>
 8015d16:	4284      	cmp	r4, r0
 8015d18:	4623      	mov	r3, r4
 8015d1a:	d807      	bhi.n	8015d2c <memmove+0x20>
 8015d1c:	1e43      	subs	r3, r0, #1
 8015d1e:	42a1      	cmp	r1, r4
 8015d20:	d008      	beq.n	8015d34 <memmove+0x28>
 8015d22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015d26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015d2a:	e7f8      	b.n	8015d1e <memmove+0x12>
 8015d2c:	4402      	add	r2, r0
 8015d2e:	4601      	mov	r1, r0
 8015d30:	428a      	cmp	r2, r1
 8015d32:	d100      	bne.n	8015d36 <memmove+0x2a>
 8015d34:	bd10      	pop	{r4, pc}
 8015d36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015d3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015d3e:	e7f7      	b.n	8015d30 <memmove+0x24>

08015d40 <memset>:
 8015d40:	4402      	add	r2, r0
 8015d42:	4603      	mov	r3, r0
 8015d44:	4293      	cmp	r3, r2
 8015d46:	d100      	bne.n	8015d4a <memset+0xa>
 8015d48:	4770      	bx	lr
 8015d4a:	f803 1b01 	strb.w	r1, [r3], #1
 8015d4e:	e7f9      	b.n	8015d44 <memset+0x4>

08015d50 <_free_r>:
 8015d50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015d52:	2900      	cmp	r1, #0
 8015d54:	d048      	beq.n	8015de8 <_free_r+0x98>
 8015d56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015d5a:	9001      	str	r0, [sp, #4]
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	f1a1 0404 	sub.w	r4, r1, #4
 8015d62:	bfb8      	it	lt
 8015d64:	18e4      	addlt	r4, r4, r3
 8015d66:	f003 f835 	bl	8018dd4 <__malloc_lock>
 8015d6a:	4a20      	ldr	r2, [pc, #128]	; (8015dec <_free_r+0x9c>)
 8015d6c:	9801      	ldr	r0, [sp, #4]
 8015d6e:	6813      	ldr	r3, [r2, #0]
 8015d70:	4615      	mov	r5, r2
 8015d72:	b933      	cbnz	r3, 8015d82 <_free_r+0x32>
 8015d74:	6063      	str	r3, [r4, #4]
 8015d76:	6014      	str	r4, [r2, #0]
 8015d78:	b003      	add	sp, #12
 8015d7a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015d7e:	f003 b82f 	b.w	8018de0 <__malloc_unlock>
 8015d82:	42a3      	cmp	r3, r4
 8015d84:	d90b      	bls.n	8015d9e <_free_r+0x4e>
 8015d86:	6821      	ldr	r1, [r4, #0]
 8015d88:	1862      	adds	r2, r4, r1
 8015d8a:	4293      	cmp	r3, r2
 8015d8c:	bf04      	itt	eq
 8015d8e:	681a      	ldreq	r2, [r3, #0]
 8015d90:	685b      	ldreq	r3, [r3, #4]
 8015d92:	6063      	str	r3, [r4, #4]
 8015d94:	bf04      	itt	eq
 8015d96:	1852      	addeq	r2, r2, r1
 8015d98:	6022      	streq	r2, [r4, #0]
 8015d9a:	602c      	str	r4, [r5, #0]
 8015d9c:	e7ec      	b.n	8015d78 <_free_r+0x28>
 8015d9e:	461a      	mov	r2, r3
 8015da0:	685b      	ldr	r3, [r3, #4]
 8015da2:	b10b      	cbz	r3, 8015da8 <_free_r+0x58>
 8015da4:	42a3      	cmp	r3, r4
 8015da6:	d9fa      	bls.n	8015d9e <_free_r+0x4e>
 8015da8:	6811      	ldr	r1, [r2, #0]
 8015daa:	1855      	adds	r5, r2, r1
 8015dac:	42a5      	cmp	r5, r4
 8015dae:	d10b      	bne.n	8015dc8 <_free_r+0x78>
 8015db0:	6824      	ldr	r4, [r4, #0]
 8015db2:	4421      	add	r1, r4
 8015db4:	1854      	adds	r4, r2, r1
 8015db6:	42a3      	cmp	r3, r4
 8015db8:	6011      	str	r1, [r2, #0]
 8015dba:	d1dd      	bne.n	8015d78 <_free_r+0x28>
 8015dbc:	681c      	ldr	r4, [r3, #0]
 8015dbe:	685b      	ldr	r3, [r3, #4]
 8015dc0:	6053      	str	r3, [r2, #4]
 8015dc2:	4421      	add	r1, r4
 8015dc4:	6011      	str	r1, [r2, #0]
 8015dc6:	e7d7      	b.n	8015d78 <_free_r+0x28>
 8015dc8:	d902      	bls.n	8015dd0 <_free_r+0x80>
 8015dca:	230c      	movs	r3, #12
 8015dcc:	6003      	str	r3, [r0, #0]
 8015dce:	e7d3      	b.n	8015d78 <_free_r+0x28>
 8015dd0:	6825      	ldr	r5, [r4, #0]
 8015dd2:	1961      	adds	r1, r4, r5
 8015dd4:	428b      	cmp	r3, r1
 8015dd6:	bf04      	itt	eq
 8015dd8:	6819      	ldreq	r1, [r3, #0]
 8015dda:	685b      	ldreq	r3, [r3, #4]
 8015ddc:	6063      	str	r3, [r4, #4]
 8015dde:	bf04      	itt	eq
 8015de0:	1949      	addeq	r1, r1, r5
 8015de2:	6021      	streq	r1, [r4, #0]
 8015de4:	6054      	str	r4, [r2, #4]
 8015de6:	e7c7      	b.n	8015d78 <_free_r+0x28>
 8015de8:	b003      	add	sp, #12
 8015dea:	bd30      	pop	{r4, r5, pc}
 8015dec:	200065b8 	.word	0x200065b8

08015df0 <_malloc_r>:
 8015df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015df2:	1ccd      	adds	r5, r1, #3
 8015df4:	f025 0503 	bic.w	r5, r5, #3
 8015df8:	3508      	adds	r5, #8
 8015dfa:	2d0c      	cmp	r5, #12
 8015dfc:	bf38      	it	cc
 8015dfe:	250c      	movcc	r5, #12
 8015e00:	2d00      	cmp	r5, #0
 8015e02:	4606      	mov	r6, r0
 8015e04:	db01      	blt.n	8015e0a <_malloc_r+0x1a>
 8015e06:	42a9      	cmp	r1, r5
 8015e08:	d903      	bls.n	8015e12 <_malloc_r+0x22>
 8015e0a:	230c      	movs	r3, #12
 8015e0c:	6033      	str	r3, [r6, #0]
 8015e0e:	2000      	movs	r0, #0
 8015e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015e12:	f002 ffdf 	bl	8018dd4 <__malloc_lock>
 8015e16:	4921      	ldr	r1, [pc, #132]	; (8015e9c <_malloc_r+0xac>)
 8015e18:	680a      	ldr	r2, [r1, #0]
 8015e1a:	4614      	mov	r4, r2
 8015e1c:	b99c      	cbnz	r4, 8015e46 <_malloc_r+0x56>
 8015e1e:	4f20      	ldr	r7, [pc, #128]	; (8015ea0 <_malloc_r+0xb0>)
 8015e20:	683b      	ldr	r3, [r7, #0]
 8015e22:	b923      	cbnz	r3, 8015e2e <_malloc_r+0x3e>
 8015e24:	4621      	mov	r1, r4
 8015e26:	4630      	mov	r0, r6
 8015e28:	f000 feb6 	bl	8016b98 <_sbrk_r>
 8015e2c:	6038      	str	r0, [r7, #0]
 8015e2e:	4629      	mov	r1, r5
 8015e30:	4630      	mov	r0, r6
 8015e32:	f000 feb1 	bl	8016b98 <_sbrk_r>
 8015e36:	1c43      	adds	r3, r0, #1
 8015e38:	d123      	bne.n	8015e82 <_malloc_r+0x92>
 8015e3a:	230c      	movs	r3, #12
 8015e3c:	6033      	str	r3, [r6, #0]
 8015e3e:	4630      	mov	r0, r6
 8015e40:	f002 ffce 	bl	8018de0 <__malloc_unlock>
 8015e44:	e7e3      	b.n	8015e0e <_malloc_r+0x1e>
 8015e46:	6823      	ldr	r3, [r4, #0]
 8015e48:	1b5b      	subs	r3, r3, r5
 8015e4a:	d417      	bmi.n	8015e7c <_malloc_r+0x8c>
 8015e4c:	2b0b      	cmp	r3, #11
 8015e4e:	d903      	bls.n	8015e58 <_malloc_r+0x68>
 8015e50:	6023      	str	r3, [r4, #0]
 8015e52:	441c      	add	r4, r3
 8015e54:	6025      	str	r5, [r4, #0]
 8015e56:	e004      	b.n	8015e62 <_malloc_r+0x72>
 8015e58:	6863      	ldr	r3, [r4, #4]
 8015e5a:	42a2      	cmp	r2, r4
 8015e5c:	bf0c      	ite	eq
 8015e5e:	600b      	streq	r3, [r1, #0]
 8015e60:	6053      	strne	r3, [r2, #4]
 8015e62:	4630      	mov	r0, r6
 8015e64:	f002 ffbc 	bl	8018de0 <__malloc_unlock>
 8015e68:	f104 000b 	add.w	r0, r4, #11
 8015e6c:	1d23      	adds	r3, r4, #4
 8015e6e:	f020 0007 	bic.w	r0, r0, #7
 8015e72:	1ac2      	subs	r2, r0, r3
 8015e74:	d0cc      	beq.n	8015e10 <_malloc_r+0x20>
 8015e76:	1a1b      	subs	r3, r3, r0
 8015e78:	50a3      	str	r3, [r4, r2]
 8015e7a:	e7c9      	b.n	8015e10 <_malloc_r+0x20>
 8015e7c:	4622      	mov	r2, r4
 8015e7e:	6864      	ldr	r4, [r4, #4]
 8015e80:	e7cc      	b.n	8015e1c <_malloc_r+0x2c>
 8015e82:	1cc4      	adds	r4, r0, #3
 8015e84:	f024 0403 	bic.w	r4, r4, #3
 8015e88:	42a0      	cmp	r0, r4
 8015e8a:	d0e3      	beq.n	8015e54 <_malloc_r+0x64>
 8015e8c:	1a21      	subs	r1, r4, r0
 8015e8e:	4630      	mov	r0, r6
 8015e90:	f000 fe82 	bl	8016b98 <_sbrk_r>
 8015e94:	3001      	adds	r0, #1
 8015e96:	d1dd      	bne.n	8015e54 <_malloc_r+0x64>
 8015e98:	e7cf      	b.n	8015e3a <_malloc_r+0x4a>
 8015e9a:	bf00      	nop
 8015e9c:	200065b8 	.word	0x200065b8
 8015ea0:	200065bc 	.word	0x200065bc

08015ea4 <__cvt>:
 8015ea4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015ea8:	ec55 4b10 	vmov	r4, r5, d0
 8015eac:	2d00      	cmp	r5, #0
 8015eae:	460e      	mov	r6, r1
 8015eb0:	4619      	mov	r1, r3
 8015eb2:	462b      	mov	r3, r5
 8015eb4:	bfbb      	ittet	lt
 8015eb6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8015eba:	461d      	movlt	r5, r3
 8015ebc:	2300      	movge	r3, #0
 8015ebe:	232d      	movlt	r3, #45	; 0x2d
 8015ec0:	700b      	strb	r3, [r1, #0]
 8015ec2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015ec4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015ec8:	4691      	mov	r9, r2
 8015eca:	f023 0820 	bic.w	r8, r3, #32
 8015ece:	bfbc      	itt	lt
 8015ed0:	4622      	movlt	r2, r4
 8015ed2:	4614      	movlt	r4, r2
 8015ed4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8015ed8:	d005      	beq.n	8015ee6 <__cvt+0x42>
 8015eda:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8015ede:	d100      	bne.n	8015ee2 <__cvt+0x3e>
 8015ee0:	3601      	adds	r6, #1
 8015ee2:	2102      	movs	r1, #2
 8015ee4:	e000      	b.n	8015ee8 <__cvt+0x44>
 8015ee6:	2103      	movs	r1, #3
 8015ee8:	ab03      	add	r3, sp, #12
 8015eea:	9301      	str	r3, [sp, #4]
 8015eec:	ab02      	add	r3, sp, #8
 8015eee:	9300      	str	r3, [sp, #0]
 8015ef0:	ec45 4b10 	vmov	d0, r4, r5
 8015ef4:	4653      	mov	r3, sl
 8015ef6:	4632      	mov	r2, r6
 8015ef8:	f001 fdfa 	bl	8017af0 <_dtoa_r>
 8015efc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8015f00:	4607      	mov	r7, r0
 8015f02:	d102      	bne.n	8015f0a <__cvt+0x66>
 8015f04:	f019 0f01 	tst.w	r9, #1
 8015f08:	d022      	beq.n	8015f50 <__cvt+0xac>
 8015f0a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8015f0e:	eb07 0906 	add.w	r9, r7, r6
 8015f12:	d110      	bne.n	8015f36 <__cvt+0x92>
 8015f14:	783b      	ldrb	r3, [r7, #0]
 8015f16:	2b30      	cmp	r3, #48	; 0x30
 8015f18:	d10a      	bne.n	8015f30 <__cvt+0x8c>
 8015f1a:	2200      	movs	r2, #0
 8015f1c:	2300      	movs	r3, #0
 8015f1e:	4620      	mov	r0, r4
 8015f20:	4629      	mov	r1, r5
 8015f22:	f7ea fdd1 	bl	8000ac8 <__aeabi_dcmpeq>
 8015f26:	b918      	cbnz	r0, 8015f30 <__cvt+0x8c>
 8015f28:	f1c6 0601 	rsb	r6, r6, #1
 8015f2c:	f8ca 6000 	str.w	r6, [sl]
 8015f30:	f8da 3000 	ldr.w	r3, [sl]
 8015f34:	4499      	add	r9, r3
 8015f36:	2200      	movs	r2, #0
 8015f38:	2300      	movs	r3, #0
 8015f3a:	4620      	mov	r0, r4
 8015f3c:	4629      	mov	r1, r5
 8015f3e:	f7ea fdc3 	bl	8000ac8 <__aeabi_dcmpeq>
 8015f42:	b108      	cbz	r0, 8015f48 <__cvt+0xa4>
 8015f44:	f8cd 900c 	str.w	r9, [sp, #12]
 8015f48:	2230      	movs	r2, #48	; 0x30
 8015f4a:	9b03      	ldr	r3, [sp, #12]
 8015f4c:	454b      	cmp	r3, r9
 8015f4e:	d307      	bcc.n	8015f60 <__cvt+0xbc>
 8015f50:	9b03      	ldr	r3, [sp, #12]
 8015f52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015f54:	1bdb      	subs	r3, r3, r7
 8015f56:	4638      	mov	r0, r7
 8015f58:	6013      	str	r3, [r2, #0]
 8015f5a:	b004      	add	sp, #16
 8015f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f60:	1c59      	adds	r1, r3, #1
 8015f62:	9103      	str	r1, [sp, #12]
 8015f64:	701a      	strb	r2, [r3, #0]
 8015f66:	e7f0      	b.n	8015f4a <__cvt+0xa6>

08015f68 <__exponent>:
 8015f68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015f6a:	4603      	mov	r3, r0
 8015f6c:	2900      	cmp	r1, #0
 8015f6e:	bfb8      	it	lt
 8015f70:	4249      	neglt	r1, r1
 8015f72:	f803 2b02 	strb.w	r2, [r3], #2
 8015f76:	bfb4      	ite	lt
 8015f78:	222d      	movlt	r2, #45	; 0x2d
 8015f7a:	222b      	movge	r2, #43	; 0x2b
 8015f7c:	2909      	cmp	r1, #9
 8015f7e:	7042      	strb	r2, [r0, #1]
 8015f80:	dd2a      	ble.n	8015fd8 <__exponent+0x70>
 8015f82:	f10d 0407 	add.w	r4, sp, #7
 8015f86:	46a4      	mov	ip, r4
 8015f88:	270a      	movs	r7, #10
 8015f8a:	46a6      	mov	lr, r4
 8015f8c:	460a      	mov	r2, r1
 8015f8e:	fb91 f6f7 	sdiv	r6, r1, r7
 8015f92:	fb07 1516 	mls	r5, r7, r6, r1
 8015f96:	3530      	adds	r5, #48	; 0x30
 8015f98:	2a63      	cmp	r2, #99	; 0x63
 8015f9a:	f104 34ff 	add.w	r4, r4, #4294967295
 8015f9e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8015fa2:	4631      	mov	r1, r6
 8015fa4:	dcf1      	bgt.n	8015f8a <__exponent+0x22>
 8015fa6:	3130      	adds	r1, #48	; 0x30
 8015fa8:	f1ae 0502 	sub.w	r5, lr, #2
 8015fac:	f804 1c01 	strb.w	r1, [r4, #-1]
 8015fb0:	1c44      	adds	r4, r0, #1
 8015fb2:	4629      	mov	r1, r5
 8015fb4:	4561      	cmp	r1, ip
 8015fb6:	d30a      	bcc.n	8015fce <__exponent+0x66>
 8015fb8:	f10d 0209 	add.w	r2, sp, #9
 8015fbc:	eba2 020e 	sub.w	r2, r2, lr
 8015fc0:	4565      	cmp	r5, ip
 8015fc2:	bf88      	it	hi
 8015fc4:	2200      	movhi	r2, #0
 8015fc6:	4413      	add	r3, r2
 8015fc8:	1a18      	subs	r0, r3, r0
 8015fca:	b003      	add	sp, #12
 8015fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015fce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015fd2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8015fd6:	e7ed      	b.n	8015fb4 <__exponent+0x4c>
 8015fd8:	2330      	movs	r3, #48	; 0x30
 8015fda:	3130      	adds	r1, #48	; 0x30
 8015fdc:	7083      	strb	r3, [r0, #2]
 8015fde:	70c1      	strb	r1, [r0, #3]
 8015fe0:	1d03      	adds	r3, r0, #4
 8015fe2:	e7f1      	b.n	8015fc8 <__exponent+0x60>

08015fe4 <_printf_float>:
 8015fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fe8:	ed2d 8b02 	vpush	{d8}
 8015fec:	b08d      	sub	sp, #52	; 0x34
 8015fee:	460c      	mov	r4, r1
 8015ff0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8015ff4:	4616      	mov	r6, r2
 8015ff6:	461f      	mov	r7, r3
 8015ff8:	4605      	mov	r5, r0
 8015ffa:	f002 fed5 	bl	8018da8 <_localeconv_r>
 8015ffe:	f8d0 a000 	ldr.w	sl, [r0]
 8016002:	4650      	mov	r0, sl
 8016004:	f7ea f8e4 	bl	80001d0 <strlen>
 8016008:	2300      	movs	r3, #0
 801600a:	930a      	str	r3, [sp, #40]	; 0x28
 801600c:	6823      	ldr	r3, [r4, #0]
 801600e:	9305      	str	r3, [sp, #20]
 8016010:	f8d8 3000 	ldr.w	r3, [r8]
 8016014:	f894 b018 	ldrb.w	fp, [r4, #24]
 8016018:	3307      	adds	r3, #7
 801601a:	f023 0307 	bic.w	r3, r3, #7
 801601e:	f103 0208 	add.w	r2, r3, #8
 8016022:	f8c8 2000 	str.w	r2, [r8]
 8016026:	e9d3 2300 	ldrd	r2, r3, [r3]
 801602a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801602e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8016032:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016036:	9307      	str	r3, [sp, #28]
 8016038:	f8cd 8018 	str.w	r8, [sp, #24]
 801603c:	ee08 0a10 	vmov	s16, r0
 8016040:	4b9f      	ldr	r3, [pc, #636]	; (80162c0 <_printf_float+0x2dc>)
 8016042:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016046:	f04f 32ff 	mov.w	r2, #4294967295
 801604a:	f7ea fd6f 	bl	8000b2c <__aeabi_dcmpun>
 801604e:	bb88      	cbnz	r0, 80160b4 <_printf_float+0xd0>
 8016050:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016054:	4b9a      	ldr	r3, [pc, #616]	; (80162c0 <_printf_float+0x2dc>)
 8016056:	f04f 32ff 	mov.w	r2, #4294967295
 801605a:	f7ea fd49 	bl	8000af0 <__aeabi_dcmple>
 801605e:	bb48      	cbnz	r0, 80160b4 <_printf_float+0xd0>
 8016060:	2200      	movs	r2, #0
 8016062:	2300      	movs	r3, #0
 8016064:	4640      	mov	r0, r8
 8016066:	4649      	mov	r1, r9
 8016068:	f7ea fd38 	bl	8000adc <__aeabi_dcmplt>
 801606c:	b110      	cbz	r0, 8016074 <_printf_float+0x90>
 801606e:	232d      	movs	r3, #45	; 0x2d
 8016070:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016074:	4b93      	ldr	r3, [pc, #588]	; (80162c4 <_printf_float+0x2e0>)
 8016076:	4894      	ldr	r0, [pc, #592]	; (80162c8 <_printf_float+0x2e4>)
 8016078:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801607c:	bf94      	ite	ls
 801607e:	4698      	movls	r8, r3
 8016080:	4680      	movhi	r8, r0
 8016082:	2303      	movs	r3, #3
 8016084:	6123      	str	r3, [r4, #16]
 8016086:	9b05      	ldr	r3, [sp, #20]
 8016088:	f023 0204 	bic.w	r2, r3, #4
 801608c:	6022      	str	r2, [r4, #0]
 801608e:	f04f 0900 	mov.w	r9, #0
 8016092:	9700      	str	r7, [sp, #0]
 8016094:	4633      	mov	r3, r6
 8016096:	aa0b      	add	r2, sp, #44	; 0x2c
 8016098:	4621      	mov	r1, r4
 801609a:	4628      	mov	r0, r5
 801609c:	f000 f9d8 	bl	8016450 <_printf_common>
 80160a0:	3001      	adds	r0, #1
 80160a2:	f040 8090 	bne.w	80161c6 <_printf_float+0x1e2>
 80160a6:	f04f 30ff 	mov.w	r0, #4294967295
 80160aa:	b00d      	add	sp, #52	; 0x34
 80160ac:	ecbd 8b02 	vpop	{d8}
 80160b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160b4:	4642      	mov	r2, r8
 80160b6:	464b      	mov	r3, r9
 80160b8:	4640      	mov	r0, r8
 80160ba:	4649      	mov	r1, r9
 80160bc:	f7ea fd36 	bl	8000b2c <__aeabi_dcmpun>
 80160c0:	b140      	cbz	r0, 80160d4 <_printf_float+0xf0>
 80160c2:	464b      	mov	r3, r9
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	bfbc      	itt	lt
 80160c8:	232d      	movlt	r3, #45	; 0x2d
 80160ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80160ce:	487f      	ldr	r0, [pc, #508]	; (80162cc <_printf_float+0x2e8>)
 80160d0:	4b7f      	ldr	r3, [pc, #508]	; (80162d0 <_printf_float+0x2ec>)
 80160d2:	e7d1      	b.n	8016078 <_printf_float+0x94>
 80160d4:	6863      	ldr	r3, [r4, #4]
 80160d6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80160da:	9206      	str	r2, [sp, #24]
 80160dc:	1c5a      	adds	r2, r3, #1
 80160de:	d13f      	bne.n	8016160 <_printf_float+0x17c>
 80160e0:	2306      	movs	r3, #6
 80160e2:	6063      	str	r3, [r4, #4]
 80160e4:	9b05      	ldr	r3, [sp, #20]
 80160e6:	6861      	ldr	r1, [r4, #4]
 80160e8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80160ec:	2300      	movs	r3, #0
 80160ee:	9303      	str	r3, [sp, #12]
 80160f0:	ab0a      	add	r3, sp, #40	; 0x28
 80160f2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80160f6:	ab09      	add	r3, sp, #36	; 0x24
 80160f8:	ec49 8b10 	vmov	d0, r8, r9
 80160fc:	9300      	str	r3, [sp, #0]
 80160fe:	6022      	str	r2, [r4, #0]
 8016100:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8016104:	4628      	mov	r0, r5
 8016106:	f7ff fecd 	bl	8015ea4 <__cvt>
 801610a:	9b06      	ldr	r3, [sp, #24]
 801610c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801610e:	2b47      	cmp	r3, #71	; 0x47
 8016110:	4680      	mov	r8, r0
 8016112:	d108      	bne.n	8016126 <_printf_float+0x142>
 8016114:	1cc8      	adds	r0, r1, #3
 8016116:	db02      	blt.n	801611e <_printf_float+0x13a>
 8016118:	6863      	ldr	r3, [r4, #4]
 801611a:	4299      	cmp	r1, r3
 801611c:	dd41      	ble.n	80161a2 <_printf_float+0x1be>
 801611e:	f1ab 0b02 	sub.w	fp, fp, #2
 8016122:	fa5f fb8b 	uxtb.w	fp, fp
 8016126:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801612a:	d820      	bhi.n	801616e <_printf_float+0x18a>
 801612c:	3901      	subs	r1, #1
 801612e:	465a      	mov	r2, fp
 8016130:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8016134:	9109      	str	r1, [sp, #36]	; 0x24
 8016136:	f7ff ff17 	bl	8015f68 <__exponent>
 801613a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801613c:	1813      	adds	r3, r2, r0
 801613e:	2a01      	cmp	r2, #1
 8016140:	4681      	mov	r9, r0
 8016142:	6123      	str	r3, [r4, #16]
 8016144:	dc02      	bgt.n	801614c <_printf_float+0x168>
 8016146:	6822      	ldr	r2, [r4, #0]
 8016148:	07d2      	lsls	r2, r2, #31
 801614a:	d501      	bpl.n	8016150 <_printf_float+0x16c>
 801614c:	3301      	adds	r3, #1
 801614e:	6123      	str	r3, [r4, #16]
 8016150:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8016154:	2b00      	cmp	r3, #0
 8016156:	d09c      	beq.n	8016092 <_printf_float+0xae>
 8016158:	232d      	movs	r3, #45	; 0x2d
 801615a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801615e:	e798      	b.n	8016092 <_printf_float+0xae>
 8016160:	9a06      	ldr	r2, [sp, #24]
 8016162:	2a47      	cmp	r2, #71	; 0x47
 8016164:	d1be      	bne.n	80160e4 <_printf_float+0x100>
 8016166:	2b00      	cmp	r3, #0
 8016168:	d1bc      	bne.n	80160e4 <_printf_float+0x100>
 801616a:	2301      	movs	r3, #1
 801616c:	e7b9      	b.n	80160e2 <_printf_float+0xfe>
 801616e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8016172:	d118      	bne.n	80161a6 <_printf_float+0x1c2>
 8016174:	2900      	cmp	r1, #0
 8016176:	6863      	ldr	r3, [r4, #4]
 8016178:	dd0b      	ble.n	8016192 <_printf_float+0x1ae>
 801617a:	6121      	str	r1, [r4, #16]
 801617c:	b913      	cbnz	r3, 8016184 <_printf_float+0x1a0>
 801617e:	6822      	ldr	r2, [r4, #0]
 8016180:	07d0      	lsls	r0, r2, #31
 8016182:	d502      	bpl.n	801618a <_printf_float+0x1a6>
 8016184:	3301      	adds	r3, #1
 8016186:	440b      	add	r3, r1
 8016188:	6123      	str	r3, [r4, #16]
 801618a:	65a1      	str	r1, [r4, #88]	; 0x58
 801618c:	f04f 0900 	mov.w	r9, #0
 8016190:	e7de      	b.n	8016150 <_printf_float+0x16c>
 8016192:	b913      	cbnz	r3, 801619a <_printf_float+0x1b6>
 8016194:	6822      	ldr	r2, [r4, #0]
 8016196:	07d2      	lsls	r2, r2, #31
 8016198:	d501      	bpl.n	801619e <_printf_float+0x1ba>
 801619a:	3302      	adds	r3, #2
 801619c:	e7f4      	b.n	8016188 <_printf_float+0x1a4>
 801619e:	2301      	movs	r3, #1
 80161a0:	e7f2      	b.n	8016188 <_printf_float+0x1a4>
 80161a2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80161a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80161a8:	4299      	cmp	r1, r3
 80161aa:	db05      	blt.n	80161b8 <_printf_float+0x1d4>
 80161ac:	6823      	ldr	r3, [r4, #0]
 80161ae:	6121      	str	r1, [r4, #16]
 80161b0:	07d8      	lsls	r0, r3, #31
 80161b2:	d5ea      	bpl.n	801618a <_printf_float+0x1a6>
 80161b4:	1c4b      	adds	r3, r1, #1
 80161b6:	e7e7      	b.n	8016188 <_printf_float+0x1a4>
 80161b8:	2900      	cmp	r1, #0
 80161ba:	bfd4      	ite	le
 80161bc:	f1c1 0202 	rsble	r2, r1, #2
 80161c0:	2201      	movgt	r2, #1
 80161c2:	4413      	add	r3, r2
 80161c4:	e7e0      	b.n	8016188 <_printf_float+0x1a4>
 80161c6:	6823      	ldr	r3, [r4, #0]
 80161c8:	055a      	lsls	r2, r3, #21
 80161ca:	d407      	bmi.n	80161dc <_printf_float+0x1f8>
 80161cc:	6923      	ldr	r3, [r4, #16]
 80161ce:	4642      	mov	r2, r8
 80161d0:	4631      	mov	r1, r6
 80161d2:	4628      	mov	r0, r5
 80161d4:	47b8      	blx	r7
 80161d6:	3001      	adds	r0, #1
 80161d8:	d12c      	bne.n	8016234 <_printf_float+0x250>
 80161da:	e764      	b.n	80160a6 <_printf_float+0xc2>
 80161dc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80161e0:	f240 80e0 	bls.w	80163a4 <_printf_float+0x3c0>
 80161e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80161e8:	2200      	movs	r2, #0
 80161ea:	2300      	movs	r3, #0
 80161ec:	f7ea fc6c 	bl	8000ac8 <__aeabi_dcmpeq>
 80161f0:	2800      	cmp	r0, #0
 80161f2:	d034      	beq.n	801625e <_printf_float+0x27a>
 80161f4:	4a37      	ldr	r2, [pc, #220]	; (80162d4 <_printf_float+0x2f0>)
 80161f6:	2301      	movs	r3, #1
 80161f8:	4631      	mov	r1, r6
 80161fa:	4628      	mov	r0, r5
 80161fc:	47b8      	blx	r7
 80161fe:	3001      	adds	r0, #1
 8016200:	f43f af51 	beq.w	80160a6 <_printf_float+0xc2>
 8016204:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016208:	429a      	cmp	r2, r3
 801620a:	db02      	blt.n	8016212 <_printf_float+0x22e>
 801620c:	6823      	ldr	r3, [r4, #0]
 801620e:	07d8      	lsls	r0, r3, #31
 8016210:	d510      	bpl.n	8016234 <_printf_float+0x250>
 8016212:	ee18 3a10 	vmov	r3, s16
 8016216:	4652      	mov	r2, sl
 8016218:	4631      	mov	r1, r6
 801621a:	4628      	mov	r0, r5
 801621c:	47b8      	blx	r7
 801621e:	3001      	adds	r0, #1
 8016220:	f43f af41 	beq.w	80160a6 <_printf_float+0xc2>
 8016224:	f04f 0800 	mov.w	r8, #0
 8016228:	f104 091a 	add.w	r9, r4, #26
 801622c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801622e:	3b01      	subs	r3, #1
 8016230:	4543      	cmp	r3, r8
 8016232:	dc09      	bgt.n	8016248 <_printf_float+0x264>
 8016234:	6823      	ldr	r3, [r4, #0]
 8016236:	079b      	lsls	r3, r3, #30
 8016238:	f100 8105 	bmi.w	8016446 <_printf_float+0x462>
 801623c:	68e0      	ldr	r0, [r4, #12]
 801623e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016240:	4298      	cmp	r0, r3
 8016242:	bfb8      	it	lt
 8016244:	4618      	movlt	r0, r3
 8016246:	e730      	b.n	80160aa <_printf_float+0xc6>
 8016248:	2301      	movs	r3, #1
 801624a:	464a      	mov	r2, r9
 801624c:	4631      	mov	r1, r6
 801624e:	4628      	mov	r0, r5
 8016250:	47b8      	blx	r7
 8016252:	3001      	adds	r0, #1
 8016254:	f43f af27 	beq.w	80160a6 <_printf_float+0xc2>
 8016258:	f108 0801 	add.w	r8, r8, #1
 801625c:	e7e6      	b.n	801622c <_printf_float+0x248>
 801625e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016260:	2b00      	cmp	r3, #0
 8016262:	dc39      	bgt.n	80162d8 <_printf_float+0x2f4>
 8016264:	4a1b      	ldr	r2, [pc, #108]	; (80162d4 <_printf_float+0x2f0>)
 8016266:	2301      	movs	r3, #1
 8016268:	4631      	mov	r1, r6
 801626a:	4628      	mov	r0, r5
 801626c:	47b8      	blx	r7
 801626e:	3001      	adds	r0, #1
 8016270:	f43f af19 	beq.w	80160a6 <_printf_float+0xc2>
 8016274:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016278:	4313      	orrs	r3, r2
 801627a:	d102      	bne.n	8016282 <_printf_float+0x29e>
 801627c:	6823      	ldr	r3, [r4, #0]
 801627e:	07d9      	lsls	r1, r3, #31
 8016280:	d5d8      	bpl.n	8016234 <_printf_float+0x250>
 8016282:	ee18 3a10 	vmov	r3, s16
 8016286:	4652      	mov	r2, sl
 8016288:	4631      	mov	r1, r6
 801628a:	4628      	mov	r0, r5
 801628c:	47b8      	blx	r7
 801628e:	3001      	adds	r0, #1
 8016290:	f43f af09 	beq.w	80160a6 <_printf_float+0xc2>
 8016294:	f04f 0900 	mov.w	r9, #0
 8016298:	f104 0a1a 	add.w	sl, r4, #26
 801629c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801629e:	425b      	negs	r3, r3
 80162a0:	454b      	cmp	r3, r9
 80162a2:	dc01      	bgt.n	80162a8 <_printf_float+0x2c4>
 80162a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80162a6:	e792      	b.n	80161ce <_printf_float+0x1ea>
 80162a8:	2301      	movs	r3, #1
 80162aa:	4652      	mov	r2, sl
 80162ac:	4631      	mov	r1, r6
 80162ae:	4628      	mov	r0, r5
 80162b0:	47b8      	blx	r7
 80162b2:	3001      	adds	r0, #1
 80162b4:	f43f aef7 	beq.w	80160a6 <_printf_float+0xc2>
 80162b8:	f109 0901 	add.w	r9, r9, #1
 80162bc:	e7ee      	b.n	801629c <_printf_float+0x2b8>
 80162be:	bf00      	nop
 80162c0:	7fefffff 	.word	0x7fefffff
 80162c4:	0801c28c 	.word	0x0801c28c
 80162c8:	0801c290 	.word	0x0801c290
 80162cc:	0801c298 	.word	0x0801c298
 80162d0:	0801c294 	.word	0x0801c294
 80162d4:	0801c29c 	.word	0x0801c29c
 80162d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80162da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80162dc:	429a      	cmp	r2, r3
 80162de:	bfa8      	it	ge
 80162e0:	461a      	movge	r2, r3
 80162e2:	2a00      	cmp	r2, #0
 80162e4:	4691      	mov	r9, r2
 80162e6:	dc37      	bgt.n	8016358 <_printf_float+0x374>
 80162e8:	f04f 0b00 	mov.w	fp, #0
 80162ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80162f0:	f104 021a 	add.w	r2, r4, #26
 80162f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80162f6:	9305      	str	r3, [sp, #20]
 80162f8:	eba3 0309 	sub.w	r3, r3, r9
 80162fc:	455b      	cmp	r3, fp
 80162fe:	dc33      	bgt.n	8016368 <_printf_float+0x384>
 8016300:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016304:	429a      	cmp	r2, r3
 8016306:	db3b      	blt.n	8016380 <_printf_float+0x39c>
 8016308:	6823      	ldr	r3, [r4, #0]
 801630a:	07da      	lsls	r2, r3, #31
 801630c:	d438      	bmi.n	8016380 <_printf_float+0x39c>
 801630e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016310:	9b05      	ldr	r3, [sp, #20]
 8016312:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016314:	1ad3      	subs	r3, r2, r3
 8016316:	eba2 0901 	sub.w	r9, r2, r1
 801631a:	4599      	cmp	r9, r3
 801631c:	bfa8      	it	ge
 801631e:	4699      	movge	r9, r3
 8016320:	f1b9 0f00 	cmp.w	r9, #0
 8016324:	dc35      	bgt.n	8016392 <_printf_float+0x3ae>
 8016326:	f04f 0800 	mov.w	r8, #0
 801632a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801632e:	f104 0a1a 	add.w	sl, r4, #26
 8016332:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016336:	1a9b      	subs	r3, r3, r2
 8016338:	eba3 0309 	sub.w	r3, r3, r9
 801633c:	4543      	cmp	r3, r8
 801633e:	f77f af79 	ble.w	8016234 <_printf_float+0x250>
 8016342:	2301      	movs	r3, #1
 8016344:	4652      	mov	r2, sl
 8016346:	4631      	mov	r1, r6
 8016348:	4628      	mov	r0, r5
 801634a:	47b8      	blx	r7
 801634c:	3001      	adds	r0, #1
 801634e:	f43f aeaa 	beq.w	80160a6 <_printf_float+0xc2>
 8016352:	f108 0801 	add.w	r8, r8, #1
 8016356:	e7ec      	b.n	8016332 <_printf_float+0x34e>
 8016358:	4613      	mov	r3, r2
 801635a:	4631      	mov	r1, r6
 801635c:	4642      	mov	r2, r8
 801635e:	4628      	mov	r0, r5
 8016360:	47b8      	blx	r7
 8016362:	3001      	adds	r0, #1
 8016364:	d1c0      	bne.n	80162e8 <_printf_float+0x304>
 8016366:	e69e      	b.n	80160a6 <_printf_float+0xc2>
 8016368:	2301      	movs	r3, #1
 801636a:	4631      	mov	r1, r6
 801636c:	4628      	mov	r0, r5
 801636e:	9205      	str	r2, [sp, #20]
 8016370:	47b8      	blx	r7
 8016372:	3001      	adds	r0, #1
 8016374:	f43f ae97 	beq.w	80160a6 <_printf_float+0xc2>
 8016378:	9a05      	ldr	r2, [sp, #20]
 801637a:	f10b 0b01 	add.w	fp, fp, #1
 801637e:	e7b9      	b.n	80162f4 <_printf_float+0x310>
 8016380:	ee18 3a10 	vmov	r3, s16
 8016384:	4652      	mov	r2, sl
 8016386:	4631      	mov	r1, r6
 8016388:	4628      	mov	r0, r5
 801638a:	47b8      	blx	r7
 801638c:	3001      	adds	r0, #1
 801638e:	d1be      	bne.n	801630e <_printf_float+0x32a>
 8016390:	e689      	b.n	80160a6 <_printf_float+0xc2>
 8016392:	9a05      	ldr	r2, [sp, #20]
 8016394:	464b      	mov	r3, r9
 8016396:	4442      	add	r2, r8
 8016398:	4631      	mov	r1, r6
 801639a:	4628      	mov	r0, r5
 801639c:	47b8      	blx	r7
 801639e:	3001      	adds	r0, #1
 80163a0:	d1c1      	bne.n	8016326 <_printf_float+0x342>
 80163a2:	e680      	b.n	80160a6 <_printf_float+0xc2>
 80163a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80163a6:	2a01      	cmp	r2, #1
 80163a8:	dc01      	bgt.n	80163ae <_printf_float+0x3ca>
 80163aa:	07db      	lsls	r3, r3, #31
 80163ac:	d538      	bpl.n	8016420 <_printf_float+0x43c>
 80163ae:	2301      	movs	r3, #1
 80163b0:	4642      	mov	r2, r8
 80163b2:	4631      	mov	r1, r6
 80163b4:	4628      	mov	r0, r5
 80163b6:	47b8      	blx	r7
 80163b8:	3001      	adds	r0, #1
 80163ba:	f43f ae74 	beq.w	80160a6 <_printf_float+0xc2>
 80163be:	ee18 3a10 	vmov	r3, s16
 80163c2:	4652      	mov	r2, sl
 80163c4:	4631      	mov	r1, r6
 80163c6:	4628      	mov	r0, r5
 80163c8:	47b8      	blx	r7
 80163ca:	3001      	adds	r0, #1
 80163cc:	f43f ae6b 	beq.w	80160a6 <_printf_float+0xc2>
 80163d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80163d4:	2200      	movs	r2, #0
 80163d6:	2300      	movs	r3, #0
 80163d8:	f7ea fb76 	bl	8000ac8 <__aeabi_dcmpeq>
 80163dc:	b9d8      	cbnz	r0, 8016416 <_printf_float+0x432>
 80163de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80163e0:	f108 0201 	add.w	r2, r8, #1
 80163e4:	3b01      	subs	r3, #1
 80163e6:	4631      	mov	r1, r6
 80163e8:	4628      	mov	r0, r5
 80163ea:	47b8      	blx	r7
 80163ec:	3001      	adds	r0, #1
 80163ee:	d10e      	bne.n	801640e <_printf_float+0x42a>
 80163f0:	e659      	b.n	80160a6 <_printf_float+0xc2>
 80163f2:	2301      	movs	r3, #1
 80163f4:	4652      	mov	r2, sl
 80163f6:	4631      	mov	r1, r6
 80163f8:	4628      	mov	r0, r5
 80163fa:	47b8      	blx	r7
 80163fc:	3001      	adds	r0, #1
 80163fe:	f43f ae52 	beq.w	80160a6 <_printf_float+0xc2>
 8016402:	f108 0801 	add.w	r8, r8, #1
 8016406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016408:	3b01      	subs	r3, #1
 801640a:	4543      	cmp	r3, r8
 801640c:	dcf1      	bgt.n	80163f2 <_printf_float+0x40e>
 801640e:	464b      	mov	r3, r9
 8016410:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8016414:	e6dc      	b.n	80161d0 <_printf_float+0x1ec>
 8016416:	f04f 0800 	mov.w	r8, #0
 801641a:	f104 0a1a 	add.w	sl, r4, #26
 801641e:	e7f2      	b.n	8016406 <_printf_float+0x422>
 8016420:	2301      	movs	r3, #1
 8016422:	4642      	mov	r2, r8
 8016424:	e7df      	b.n	80163e6 <_printf_float+0x402>
 8016426:	2301      	movs	r3, #1
 8016428:	464a      	mov	r2, r9
 801642a:	4631      	mov	r1, r6
 801642c:	4628      	mov	r0, r5
 801642e:	47b8      	blx	r7
 8016430:	3001      	adds	r0, #1
 8016432:	f43f ae38 	beq.w	80160a6 <_printf_float+0xc2>
 8016436:	f108 0801 	add.w	r8, r8, #1
 801643a:	68e3      	ldr	r3, [r4, #12]
 801643c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801643e:	1a5b      	subs	r3, r3, r1
 8016440:	4543      	cmp	r3, r8
 8016442:	dcf0      	bgt.n	8016426 <_printf_float+0x442>
 8016444:	e6fa      	b.n	801623c <_printf_float+0x258>
 8016446:	f04f 0800 	mov.w	r8, #0
 801644a:	f104 0919 	add.w	r9, r4, #25
 801644e:	e7f4      	b.n	801643a <_printf_float+0x456>

08016450 <_printf_common>:
 8016450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016454:	4616      	mov	r6, r2
 8016456:	4699      	mov	r9, r3
 8016458:	688a      	ldr	r2, [r1, #8]
 801645a:	690b      	ldr	r3, [r1, #16]
 801645c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016460:	4293      	cmp	r3, r2
 8016462:	bfb8      	it	lt
 8016464:	4613      	movlt	r3, r2
 8016466:	6033      	str	r3, [r6, #0]
 8016468:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801646c:	4607      	mov	r7, r0
 801646e:	460c      	mov	r4, r1
 8016470:	b10a      	cbz	r2, 8016476 <_printf_common+0x26>
 8016472:	3301      	adds	r3, #1
 8016474:	6033      	str	r3, [r6, #0]
 8016476:	6823      	ldr	r3, [r4, #0]
 8016478:	0699      	lsls	r1, r3, #26
 801647a:	bf42      	ittt	mi
 801647c:	6833      	ldrmi	r3, [r6, #0]
 801647e:	3302      	addmi	r3, #2
 8016480:	6033      	strmi	r3, [r6, #0]
 8016482:	6825      	ldr	r5, [r4, #0]
 8016484:	f015 0506 	ands.w	r5, r5, #6
 8016488:	d106      	bne.n	8016498 <_printf_common+0x48>
 801648a:	f104 0a19 	add.w	sl, r4, #25
 801648e:	68e3      	ldr	r3, [r4, #12]
 8016490:	6832      	ldr	r2, [r6, #0]
 8016492:	1a9b      	subs	r3, r3, r2
 8016494:	42ab      	cmp	r3, r5
 8016496:	dc26      	bgt.n	80164e6 <_printf_common+0x96>
 8016498:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801649c:	1e13      	subs	r3, r2, #0
 801649e:	6822      	ldr	r2, [r4, #0]
 80164a0:	bf18      	it	ne
 80164a2:	2301      	movne	r3, #1
 80164a4:	0692      	lsls	r2, r2, #26
 80164a6:	d42b      	bmi.n	8016500 <_printf_common+0xb0>
 80164a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80164ac:	4649      	mov	r1, r9
 80164ae:	4638      	mov	r0, r7
 80164b0:	47c0      	blx	r8
 80164b2:	3001      	adds	r0, #1
 80164b4:	d01e      	beq.n	80164f4 <_printf_common+0xa4>
 80164b6:	6823      	ldr	r3, [r4, #0]
 80164b8:	68e5      	ldr	r5, [r4, #12]
 80164ba:	6832      	ldr	r2, [r6, #0]
 80164bc:	f003 0306 	and.w	r3, r3, #6
 80164c0:	2b04      	cmp	r3, #4
 80164c2:	bf08      	it	eq
 80164c4:	1aad      	subeq	r5, r5, r2
 80164c6:	68a3      	ldr	r3, [r4, #8]
 80164c8:	6922      	ldr	r2, [r4, #16]
 80164ca:	bf0c      	ite	eq
 80164cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80164d0:	2500      	movne	r5, #0
 80164d2:	4293      	cmp	r3, r2
 80164d4:	bfc4      	itt	gt
 80164d6:	1a9b      	subgt	r3, r3, r2
 80164d8:	18ed      	addgt	r5, r5, r3
 80164da:	2600      	movs	r6, #0
 80164dc:	341a      	adds	r4, #26
 80164de:	42b5      	cmp	r5, r6
 80164e0:	d11a      	bne.n	8016518 <_printf_common+0xc8>
 80164e2:	2000      	movs	r0, #0
 80164e4:	e008      	b.n	80164f8 <_printf_common+0xa8>
 80164e6:	2301      	movs	r3, #1
 80164e8:	4652      	mov	r2, sl
 80164ea:	4649      	mov	r1, r9
 80164ec:	4638      	mov	r0, r7
 80164ee:	47c0      	blx	r8
 80164f0:	3001      	adds	r0, #1
 80164f2:	d103      	bne.n	80164fc <_printf_common+0xac>
 80164f4:	f04f 30ff 	mov.w	r0, #4294967295
 80164f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80164fc:	3501      	adds	r5, #1
 80164fe:	e7c6      	b.n	801648e <_printf_common+0x3e>
 8016500:	18e1      	adds	r1, r4, r3
 8016502:	1c5a      	adds	r2, r3, #1
 8016504:	2030      	movs	r0, #48	; 0x30
 8016506:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801650a:	4422      	add	r2, r4
 801650c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016510:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016514:	3302      	adds	r3, #2
 8016516:	e7c7      	b.n	80164a8 <_printf_common+0x58>
 8016518:	2301      	movs	r3, #1
 801651a:	4622      	mov	r2, r4
 801651c:	4649      	mov	r1, r9
 801651e:	4638      	mov	r0, r7
 8016520:	47c0      	blx	r8
 8016522:	3001      	adds	r0, #1
 8016524:	d0e6      	beq.n	80164f4 <_printf_common+0xa4>
 8016526:	3601      	adds	r6, #1
 8016528:	e7d9      	b.n	80164de <_printf_common+0x8e>
	...

0801652c <_printf_i>:
 801652c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016530:	460c      	mov	r4, r1
 8016532:	4691      	mov	r9, r2
 8016534:	7e27      	ldrb	r7, [r4, #24]
 8016536:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016538:	2f78      	cmp	r7, #120	; 0x78
 801653a:	4680      	mov	r8, r0
 801653c:	469a      	mov	sl, r3
 801653e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016542:	d807      	bhi.n	8016554 <_printf_i+0x28>
 8016544:	2f62      	cmp	r7, #98	; 0x62
 8016546:	d80a      	bhi.n	801655e <_printf_i+0x32>
 8016548:	2f00      	cmp	r7, #0
 801654a:	f000 80d8 	beq.w	80166fe <_printf_i+0x1d2>
 801654e:	2f58      	cmp	r7, #88	; 0x58
 8016550:	f000 80a3 	beq.w	801669a <_printf_i+0x16e>
 8016554:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016558:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801655c:	e03a      	b.n	80165d4 <_printf_i+0xa8>
 801655e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8016562:	2b15      	cmp	r3, #21
 8016564:	d8f6      	bhi.n	8016554 <_printf_i+0x28>
 8016566:	a001      	add	r0, pc, #4	; (adr r0, 801656c <_printf_i+0x40>)
 8016568:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801656c:	080165c5 	.word	0x080165c5
 8016570:	080165d9 	.word	0x080165d9
 8016574:	08016555 	.word	0x08016555
 8016578:	08016555 	.word	0x08016555
 801657c:	08016555 	.word	0x08016555
 8016580:	08016555 	.word	0x08016555
 8016584:	080165d9 	.word	0x080165d9
 8016588:	08016555 	.word	0x08016555
 801658c:	08016555 	.word	0x08016555
 8016590:	08016555 	.word	0x08016555
 8016594:	08016555 	.word	0x08016555
 8016598:	080166e5 	.word	0x080166e5
 801659c:	08016609 	.word	0x08016609
 80165a0:	080166c7 	.word	0x080166c7
 80165a4:	08016555 	.word	0x08016555
 80165a8:	08016555 	.word	0x08016555
 80165ac:	08016707 	.word	0x08016707
 80165b0:	08016555 	.word	0x08016555
 80165b4:	08016609 	.word	0x08016609
 80165b8:	08016555 	.word	0x08016555
 80165bc:	08016555 	.word	0x08016555
 80165c0:	080166cf 	.word	0x080166cf
 80165c4:	680b      	ldr	r3, [r1, #0]
 80165c6:	1d1a      	adds	r2, r3, #4
 80165c8:	681b      	ldr	r3, [r3, #0]
 80165ca:	600a      	str	r2, [r1, #0]
 80165cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80165d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80165d4:	2301      	movs	r3, #1
 80165d6:	e0a3      	b.n	8016720 <_printf_i+0x1f4>
 80165d8:	6825      	ldr	r5, [r4, #0]
 80165da:	6808      	ldr	r0, [r1, #0]
 80165dc:	062e      	lsls	r6, r5, #24
 80165de:	f100 0304 	add.w	r3, r0, #4
 80165e2:	d50a      	bpl.n	80165fa <_printf_i+0xce>
 80165e4:	6805      	ldr	r5, [r0, #0]
 80165e6:	600b      	str	r3, [r1, #0]
 80165e8:	2d00      	cmp	r5, #0
 80165ea:	da03      	bge.n	80165f4 <_printf_i+0xc8>
 80165ec:	232d      	movs	r3, #45	; 0x2d
 80165ee:	426d      	negs	r5, r5
 80165f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80165f4:	485e      	ldr	r0, [pc, #376]	; (8016770 <_printf_i+0x244>)
 80165f6:	230a      	movs	r3, #10
 80165f8:	e019      	b.n	801662e <_printf_i+0x102>
 80165fa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80165fe:	6805      	ldr	r5, [r0, #0]
 8016600:	600b      	str	r3, [r1, #0]
 8016602:	bf18      	it	ne
 8016604:	b22d      	sxthne	r5, r5
 8016606:	e7ef      	b.n	80165e8 <_printf_i+0xbc>
 8016608:	680b      	ldr	r3, [r1, #0]
 801660a:	6825      	ldr	r5, [r4, #0]
 801660c:	1d18      	adds	r0, r3, #4
 801660e:	6008      	str	r0, [r1, #0]
 8016610:	0628      	lsls	r0, r5, #24
 8016612:	d501      	bpl.n	8016618 <_printf_i+0xec>
 8016614:	681d      	ldr	r5, [r3, #0]
 8016616:	e002      	b.n	801661e <_printf_i+0xf2>
 8016618:	0669      	lsls	r1, r5, #25
 801661a:	d5fb      	bpl.n	8016614 <_printf_i+0xe8>
 801661c:	881d      	ldrh	r5, [r3, #0]
 801661e:	4854      	ldr	r0, [pc, #336]	; (8016770 <_printf_i+0x244>)
 8016620:	2f6f      	cmp	r7, #111	; 0x6f
 8016622:	bf0c      	ite	eq
 8016624:	2308      	moveq	r3, #8
 8016626:	230a      	movne	r3, #10
 8016628:	2100      	movs	r1, #0
 801662a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801662e:	6866      	ldr	r6, [r4, #4]
 8016630:	60a6      	str	r6, [r4, #8]
 8016632:	2e00      	cmp	r6, #0
 8016634:	bfa2      	ittt	ge
 8016636:	6821      	ldrge	r1, [r4, #0]
 8016638:	f021 0104 	bicge.w	r1, r1, #4
 801663c:	6021      	strge	r1, [r4, #0]
 801663e:	b90d      	cbnz	r5, 8016644 <_printf_i+0x118>
 8016640:	2e00      	cmp	r6, #0
 8016642:	d04d      	beq.n	80166e0 <_printf_i+0x1b4>
 8016644:	4616      	mov	r6, r2
 8016646:	fbb5 f1f3 	udiv	r1, r5, r3
 801664a:	fb03 5711 	mls	r7, r3, r1, r5
 801664e:	5dc7      	ldrb	r7, [r0, r7]
 8016650:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016654:	462f      	mov	r7, r5
 8016656:	42bb      	cmp	r3, r7
 8016658:	460d      	mov	r5, r1
 801665a:	d9f4      	bls.n	8016646 <_printf_i+0x11a>
 801665c:	2b08      	cmp	r3, #8
 801665e:	d10b      	bne.n	8016678 <_printf_i+0x14c>
 8016660:	6823      	ldr	r3, [r4, #0]
 8016662:	07df      	lsls	r7, r3, #31
 8016664:	d508      	bpl.n	8016678 <_printf_i+0x14c>
 8016666:	6923      	ldr	r3, [r4, #16]
 8016668:	6861      	ldr	r1, [r4, #4]
 801666a:	4299      	cmp	r1, r3
 801666c:	bfde      	ittt	le
 801666e:	2330      	movle	r3, #48	; 0x30
 8016670:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016674:	f106 36ff 	addle.w	r6, r6, #4294967295
 8016678:	1b92      	subs	r2, r2, r6
 801667a:	6122      	str	r2, [r4, #16]
 801667c:	f8cd a000 	str.w	sl, [sp]
 8016680:	464b      	mov	r3, r9
 8016682:	aa03      	add	r2, sp, #12
 8016684:	4621      	mov	r1, r4
 8016686:	4640      	mov	r0, r8
 8016688:	f7ff fee2 	bl	8016450 <_printf_common>
 801668c:	3001      	adds	r0, #1
 801668e:	d14c      	bne.n	801672a <_printf_i+0x1fe>
 8016690:	f04f 30ff 	mov.w	r0, #4294967295
 8016694:	b004      	add	sp, #16
 8016696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801669a:	4835      	ldr	r0, [pc, #212]	; (8016770 <_printf_i+0x244>)
 801669c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80166a0:	6823      	ldr	r3, [r4, #0]
 80166a2:	680e      	ldr	r6, [r1, #0]
 80166a4:	061f      	lsls	r7, r3, #24
 80166a6:	f856 5b04 	ldr.w	r5, [r6], #4
 80166aa:	600e      	str	r6, [r1, #0]
 80166ac:	d514      	bpl.n	80166d8 <_printf_i+0x1ac>
 80166ae:	07d9      	lsls	r1, r3, #31
 80166b0:	bf44      	itt	mi
 80166b2:	f043 0320 	orrmi.w	r3, r3, #32
 80166b6:	6023      	strmi	r3, [r4, #0]
 80166b8:	b91d      	cbnz	r5, 80166c2 <_printf_i+0x196>
 80166ba:	6823      	ldr	r3, [r4, #0]
 80166bc:	f023 0320 	bic.w	r3, r3, #32
 80166c0:	6023      	str	r3, [r4, #0]
 80166c2:	2310      	movs	r3, #16
 80166c4:	e7b0      	b.n	8016628 <_printf_i+0xfc>
 80166c6:	6823      	ldr	r3, [r4, #0]
 80166c8:	f043 0320 	orr.w	r3, r3, #32
 80166cc:	6023      	str	r3, [r4, #0]
 80166ce:	2378      	movs	r3, #120	; 0x78
 80166d0:	4828      	ldr	r0, [pc, #160]	; (8016774 <_printf_i+0x248>)
 80166d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80166d6:	e7e3      	b.n	80166a0 <_printf_i+0x174>
 80166d8:	065e      	lsls	r6, r3, #25
 80166da:	bf48      	it	mi
 80166dc:	b2ad      	uxthmi	r5, r5
 80166de:	e7e6      	b.n	80166ae <_printf_i+0x182>
 80166e0:	4616      	mov	r6, r2
 80166e2:	e7bb      	b.n	801665c <_printf_i+0x130>
 80166e4:	680b      	ldr	r3, [r1, #0]
 80166e6:	6826      	ldr	r6, [r4, #0]
 80166e8:	6960      	ldr	r0, [r4, #20]
 80166ea:	1d1d      	adds	r5, r3, #4
 80166ec:	600d      	str	r5, [r1, #0]
 80166ee:	0635      	lsls	r5, r6, #24
 80166f0:	681b      	ldr	r3, [r3, #0]
 80166f2:	d501      	bpl.n	80166f8 <_printf_i+0x1cc>
 80166f4:	6018      	str	r0, [r3, #0]
 80166f6:	e002      	b.n	80166fe <_printf_i+0x1d2>
 80166f8:	0671      	lsls	r1, r6, #25
 80166fa:	d5fb      	bpl.n	80166f4 <_printf_i+0x1c8>
 80166fc:	8018      	strh	r0, [r3, #0]
 80166fe:	2300      	movs	r3, #0
 8016700:	6123      	str	r3, [r4, #16]
 8016702:	4616      	mov	r6, r2
 8016704:	e7ba      	b.n	801667c <_printf_i+0x150>
 8016706:	680b      	ldr	r3, [r1, #0]
 8016708:	1d1a      	adds	r2, r3, #4
 801670a:	600a      	str	r2, [r1, #0]
 801670c:	681e      	ldr	r6, [r3, #0]
 801670e:	6862      	ldr	r2, [r4, #4]
 8016710:	2100      	movs	r1, #0
 8016712:	4630      	mov	r0, r6
 8016714:	f7e9 fd64 	bl	80001e0 <memchr>
 8016718:	b108      	cbz	r0, 801671e <_printf_i+0x1f2>
 801671a:	1b80      	subs	r0, r0, r6
 801671c:	6060      	str	r0, [r4, #4]
 801671e:	6863      	ldr	r3, [r4, #4]
 8016720:	6123      	str	r3, [r4, #16]
 8016722:	2300      	movs	r3, #0
 8016724:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016728:	e7a8      	b.n	801667c <_printf_i+0x150>
 801672a:	6923      	ldr	r3, [r4, #16]
 801672c:	4632      	mov	r2, r6
 801672e:	4649      	mov	r1, r9
 8016730:	4640      	mov	r0, r8
 8016732:	47d0      	blx	sl
 8016734:	3001      	adds	r0, #1
 8016736:	d0ab      	beq.n	8016690 <_printf_i+0x164>
 8016738:	6823      	ldr	r3, [r4, #0]
 801673a:	079b      	lsls	r3, r3, #30
 801673c:	d413      	bmi.n	8016766 <_printf_i+0x23a>
 801673e:	68e0      	ldr	r0, [r4, #12]
 8016740:	9b03      	ldr	r3, [sp, #12]
 8016742:	4298      	cmp	r0, r3
 8016744:	bfb8      	it	lt
 8016746:	4618      	movlt	r0, r3
 8016748:	e7a4      	b.n	8016694 <_printf_i+0x168>
 801674a:	2301      	movs	r3, #1
 801674c:	4632      	mov	r2, r6
 801674e:	4649      	mov	r1, r9
 8016750:	4640      	mov	r0, r8
 8016752:	47d0      	blx	sl
 8016754:	3001      	adds	r0, #1
 8016756:	d09b      	beq.n	8016690 <_printf_i+0x164>
 8016758:	3501      	adds	r5, #1
 801675a:	68e3      	ldr	r3, [r4, #12]
 801675c:	9903      	ldr	r1, [sp, #12]
 801675e:	1a5b      	subs	r3, r3, r1
 8016760:	42ab      	cmp	r3, r5
 8016762:	dcf2      	bgt.n	801674a <_printf_i+0x21e>
 8016764:	e7eb      	b.n	801673e <_printf_i+0x212>
 8016766:	2500      	movs	r5, #0
 8016768:	f104 0619 	add.w	r6, r4, #25
 801676c:	e7f5      	b.n	801675a <_printf_i+0x22e>
 801676e:	bf00      	nop
 8016770:	0801c29e 	.word	0x0801c29e
 8016774:	0801c2af 	.word	0x0801c2af

08016778 <_scanf_float>:
 8016778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801677c:	b087      	sub	sp, #28
 801677e:	4617      	mov	r7, r2
 8016780:	9303      	str	r3, [sp, #12]
 8016782:	688b      	ldr	r3, [r1, #8]
 8016784:	1e5a      	subs	r2, r3, #1
 8016786:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801678a:	bf83      	ittte	hi
 801678c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8016790:	195b      	addhi	r3, r3, r5
 8016792:	9302      	strhi	r3, [sp, #8]
 8016794:	2300      	movls	r3, #0
 8016796:	bf86      	itte	hi
 8016798:	f240 135d 	movwhi	r3, #349	; 0x15d
 801679c:	608b      	strhi	r3, [r1, #8]
 801679e:	9302      	strls	r3, [sp, #8]
 80167a0:	680b      	ldr	r3, [r1, #0]
 80167a2:	468b      	mov	fp, r1
 80167a4:	2500      	movs	r5, #0
 80167a6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80167aa:	f84b 3b1c 	str.w	r3, [fp], #28
 80167ae:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80167b2:	4680      	mov	r8, r0
 80167b4:	460c      	mov	r4, r1
 80167b6:	465e      	mov	r6, fp
 80167b8:	46aa      	mov	sl, r5
 80167ba:	46a9      	mov	r9, r5
 80167bc:	9501      	str	r5, [sp, #4]
 80167be:	68a2      	ldr	r2, [r4, #8]
 80167c0:	b152      	cbz	r2, 80167d8 <_scanf_float+0x60>
 80167c2:	683b      	ldr	r3, [r7, #0]
 80167c4:	781b      	ldrb	r3, [r3, #0]
 80167c6:	2b4e      	cmp	r3, #78	; 0x4e
 80167c8:	d864      	bhi.n	8016894 <_scanf_float+0x11c>
 80167ca:	2b40      	cmp	r3, #64	; 0x40
 80167cc:	d83c      	bhi.n	8016848 <_scanf_float+0xd0>
 80167ce:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80167d2:	b2c8      	uxtb	r0, r1
 80167d4:	280e      	cmp	r0, #14
 80167d6:	d93a      	bls.n	801684e <_scanf_float+0xd6>
 80167d8:	f1b9 0f00 	cmp.w	r9, #0
 80167dc:	d003      	beq.n	80167e6 <_scanf_float+0x6e>
 80167de:	6823      	ldr	r3, [r4, #0]
 80167e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80167e4:	6023      	str	r3, [r4, #0]
 80167e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80167ea:	f1ba 0f01 	cmp.w	sl, #1
 80167ee:	f200 8113 	bhi.w	8016a18 <_scanf_float+0x2a0>
 80167f2:	455e      	cmp	r6, fp
 80167f4:	f200 8105 	bhi.w	8016a02 <_scanf_float+0x28a>
 80167f8:	2501      	movs	r5, #1
 80167fa:	4628      	mov	r0, r5
 80167fc:	b007      	add	sp, #28
 80167fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016802:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8016806:	2a0d      	cmp	r2, #13
 8016808:	d8e6      	bhi.n	80167d8 <_scanf_float+0x60>
 801680a:	a101      	add	r1, pc, #4	; (adr r1, 8016810 <_scanf_float+0x98>)
 801680c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8016810:	0801694f 	.word	0x0801694f
 8016814:	080167d9 	.word	0x080167d9
 8016818:	080167d9 	.word	0x080167d9
 801681c:	080167d9 	.word	0x080167d9
 8016820:	080169af 	.word	0x080169af
 8016824:	08016987 	.word	0x08016987
 8016828:	080167d9 	.word	0x080167d9
 801682c:	080167d9 	.word	0x080167d9
 8016830:	0801695d 	.word	0x0801695d
 8016834:	080167d9 	.word	0x080167d9
 8016838:	080167d9 	.word	0x080167d9
 801683c:	080167d9 	.word	0x080167d9
 8016840:	080167d9 	.word	0x080167d9
 8016844:	08016915 	.word	0x08016915
 8016848:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801684c:	e7db      	b.n	8016806 <_scanf_float+0x8e>
 801684e:	290e      	cmp	r1, #14
 8016850:	d8c2      	bhi.n	80167d8 <_scanf_float+0x60>
 8016852:	a001      	add	r0, pc, #4	; (adr r0, 8016858 <_scanf_float+0xe0>)
 8016854:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8016858:	08016907 	.word	0x08016907
 801685c:	080167d9 	.word	0x080167d9
 8016860:	08016907 	.word	0x08016907
 8016864:	0801699b 	.word	0x0801699b
 8016868:	080167d9 	.word	0x080167d9
 801686c:	080168b5 	.word	0x080168b5
 8016870:	080168f1 	.word	0x080168f1
 8016874:	080168f1 	.word	0x080168f1
 8016878:	080168f1 	.word	0x080168f1
 801687c:	080168f1 	.word	0x080168f1
 8016880:	080168f1 	.word	0x080168f1
 8016884:	080168f1 	.word	0x080168f1
 8016888:	080168f1 	.word	0x080168f1
 801688c:	080168f1 	.word	0x080168f1
 8016890:	080168f1 	.word	0x080168f1
 8016894:	2b6e      	cmp	r3, #110	; 0x6e
 8016896:	d809      	bhi.n	80168ac <_scanf_float+0x134>
 8016898:	2b60      	cmp	r3, #96	; 0x60
 801689a:	d8b2      	bhi.n	8016802 <_scanf_float+0x8a>
 801689c:	2b54      	cmp	r3, #84	; 0x54
 801689e:	d077      	beq.n	8016990 <_scanf_float+0x218>
 80168a0:	2b59      	cmp	r3, #89	; 0x59
 80168a2:	d199      	bne.n	80167d8 <_scanf_float+0x60>
 80168a4:	2d07      	cmp	r5, #7
 80168a6:	d197      	bne.n	80167d8 <_scanf_float+0x60>
 80168a8:	2508      	movs	r5, #8
 80168aa:	e029      	b.n	8016900 <_scanf_float+0x188>
 80168ac:	2b74      	cmp	r3, #116	; 0x74
 80168ae:	d06f      	beq.n	8016990 <_scanf_float+0x218>
 80168b0:	2b79      	cmp	r3, #121	; 0x79
 80168b2:	e7f6      	b.n	80168a2 <_scanf_float+0x12a>
 80168b4:	6821      	ldr	r1, [r4, #0]
 80168b6:	05c8      	lsls	r0, r1, #23
 80168b8:	d51a      	bpl.n	80168f0 <_scanf_float+0x178>
 80168ba:	9b02      	ldr	r3, [sp, #8]
 80168bc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80168c0:	6021      	str	r1, [r4, #0]
 80168c2:	f109 0901 	add.w	r9, r9, #1
 80168c6:	b11b      	cbz	r3, 80168d0 <_scanf_float+0x158>
 80168c8:	3b01      	subs	r3, #1
 80168ca:	3201      	adds	r2, #1
 80168cc:	9302      	str	r3, [sp, #8]
 80168ce:	60a2      	str	r2, [r4, #8]
 80168d0:	68a3      	ldr	r3, [r4, #8]
 80168d2:	3b01      	subs	r3, #1
 80168d4:	60a3      	str	r3, [r4, #8]
 80168d6:	6923      	ldr	r3, [r4, #16]
 80168d8:	3301      	adds	r3, #1
 80168da:	6123      	str	r3, [r4, #16]
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	3b01      	subs	r3, #1
 80168e0:	2b00      	cmp	r3, #0
 80168e2:	607b      	str	r3, [r7, #4]
 80168e4:	f340 8084 	ble.w	80169f0 <_scanf_float+0x278>
 80168e8:	683b      	ldr	r3, [r7, #0]
 80168ea:	3301      	adds	r3, #1
 80168ec:	603b      	str	r3, [r7, #0]
 80168ee:	e766      	b.n	80167be <_scanf_float+0x46>
 80168f0:	eb1a 0f05 	cmn.w	sl, r5
 80168f4:	f47f af70 	bne.w	80167d8 <_scanf_float+0x60>
 80168f8:	6822      	ldr	r2, [r4, #0]
 80168fa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80168fe:	6022      	str	r2, [r4, #0]
 8016900:	f806 3b01 	strb.w	r3, [r6], #1
 8016904:	e7e4      	b.n	80168d0 <_scanf_float+0x158>
 8016906:	6822      	ldr	r2, [r4, #0]
 8016908:	0610      	lsls	r0, r2, #24
 801690a:	f57f af65 	bpl.w	80167d8 <_scanf_float+0x60>
 801690e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016912:	e7f4      	b.n	80168fe <_scanf_float+0x186>
 8016914:	f1ba 0f00 	cmp.w	sl, #0
 8016918:	d10e      	bne.n	8016938 <_scanf_float+0x1c0>
 801691a:	f1b9 0f00 	cmp.w	r9, #0
 801691e:	d10e      	bne.n	801693e <_scanf_float+0x1c6>
 8016920:	6822      	ldr	r2, [r4, #0]
 8016922:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8016926:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801692a:	d108      	bne.n	801693e <_scanf_float+0x1c6>
 801692c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016930:	6022      	str	r2, [r4, #0]
 8016932:	f04f 0a01 	mov.w	sl, #1
 8016936:	e7e3      	b.n	8016900 <_scanf_float+0x188>
 8016938:	f1ba 0f02 	cmp.w	sl, #2
 801693c:	d055      	beq.n	80169ea <_scanf_float+0x272>
 801693e:	2d01      	cmp	r5, #1
 8016940:	d002      	beq.n	8016948 <_scanf_float+0x1d0>
 8016942:	2d04      	cmp	r5, #4
 8016944:	f47f af48 	bne.w	80167d8 <_scanf_float+0x60>
 8016948:	3501      	adds	r5, #1
 801694a:	b2ed      	uxtb	r5, r5
 801694c:	e7d8      	b.n	8016900 <_scanf_float+0x188>
 801694e:	f1ba 0f01 	cmp.w	sl, #1
 8016952:	f47f af41 	bne.w	80167d8 <_scanf_float+0x60>
 8016956:	f04f 0a02 	mov.w	sl, #2
 801695a:	e7d1      	b.n	8016900 <_scanf_float+0x188>
 801695c:	b97d      	cbnz	r5, 801697e <_scanf_float+0x206>
 801695e:	f1b9 0f00 	cmp.w	r9, #0
 8016962:	f47f af3c 	bne.w	80167de <_scanf_float+0x66>
 8016966:	6822      	ldr	r2, [r4, #0]
 8016968:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801696c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8016970:	f47f af39 	bne.w	80167e6 <_scanf_float+0x6e>
 8016974:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016978:	6022      	str	r2, [r4, #0]
 801697a:	2501      	movs	r5, #1
 801697c:	e7c0      	b.n	8016900 <_scanf_float+0x188>
 801697e:	2d03      	cmp	r5, #3
 8016980:	d0e2      	beq.n	8016948 <_scanf_float+0x1d0>
 8016982:	2d05      	cmp	r5, #5
 8016984:	e7de      	b.n	8016944 <_scanf_float+0x1cc>
 8016986:	2d02      	cmp	r5, #2
 8016988:	f47f af26 	bne.w	80167d8 <_scanf_float+0x60>
 801698c:	2503      	movs	r5, #3
 801698e:	e7b7      	b.n	8016900 <_scanf_float+0x188>
 8016990:	2d06      	cmp	r5, #6
 8016992:	f47f af21 	bne.w	80167d8 <_scanf_float+0x60>
 8016996:	2507      	movs	r5, #7
 8016998:	e7b2      	b.n	8016900 <_scanf_float+0x188>
 801699a:	6822      	ldr	r2, [r4, #0]
 801699c:	0591      	lsls	r1, r2, #22
 801699e:	f57f af1b 	bpl.w	80167d8 <_scanf_float+0x60>
 80169a2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80169a6:	6022      	str	r2, [r4, #0]
 80169a8:	f8cd 9004 	str.w	r9, [sp, #4]
 80169ac:	e7a8      	b.n	8016900 <_scanf_float+0x188>
 80169ae:	6822      	ldr	r2, [r4, #0]
 80169b0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80169b4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80169b8:	d006      	beq.n	80169c8 <_scanf_float+0x250>
 80169ba:	0550      	lsls	r0, r2, #21
 80169bc:	f57f af0c 	bpl.w	80167d8 <_scanf_float+0x60>
 80169c0:	f1b9 0f00 	cmp.w	r9, #0
 80169c4:	f43f af0f 	beq.w	80167e6 <_scanf_float+0x6e>
 80169c8:	0591      	lsls	r1, r2, #22
 80169ca:	bf58      	it	pl
 80169cc:	9901      	ldrpl	r1, [sp, #4]
 80169ce:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80169d2:	bf58      	it	pl
 80169d4:	eba9 0101 	subpl.w	r1, r9, r1
 80169d8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80169dc:	bf58      	it	pl
 80169de:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80169e2:	6022      	str	r2, [r4, #0]
 80169e4:	f04f 0900 	mov.w	r9, #0
 80169e8:	e78a      	b.n	8016900 <_scanf_float+0x188>
 80169ea:	f04f 0a03 	mov.w	sl, #3
 80169ee:	e787      	b.n	8016900 <_scanf_float+0x188>
 80169f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80169f4:	4639      	mov	r1, r7
 80169f6:	4640      	mov	r0, r8
 80169f8:	4798      	blx	r3
 80169fa:	2800      	cmp	r0, #0
 80169fc:	f43f aedf 	beq.w	80167be <_scanf_float+0x46>
 8016a00:	e6ea      	b.n	80167d8 <_scanf_float+0x60>
 8016a02:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016a06:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016a0a:	463a      	mov	r2, r7
 8016a0c:	4640      	mov	r0, r8
 8016a0e:	4798      	blx	r3
 8016a10:	6923      	ldr	r3, [r4, #16]
 8016a12:	3b01      	subs	r3, #1
 8016a14:	6123      	str	r3, [r4, #16]
 8016a16:	e6ec      	b.n	80167f2 <_scanf_float+0x7a>
 8016a18:	1e6b      	subs	r3, r5, #1
 8016a1a:	2b06      	cmp	r3, #6
 8016a1c:	d825      	bhi.n	8016a6a <_scanf_float+0x2f2>
 8016a1e:	2d02      	cmp	r5, #2
 8016a20:	d836      	bhi.n	8016a90 <_scanf_float+0x318>
 8016a22:	455e      	cmp	r6, fp
 8016a24:	f67f aee8 	bls.w	80167f8 <_scanf_float+0x80>
 8016a28:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016a2c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016a30:	463a      	mov	r2, r7
 8016a32:	4640      	mov	r0, r8
 8016a34:	4798      	blx	r3
 8016a36:	6923      	ldr	r3, [r4, #16]
 8016a38:	3b01      	subs	r3, #1
 8016a3a:	6123      	str	r3, [r4, #16]
 8016a3c:	e7f1      	b.n	8016a22 <_scanf_float+0x2aa>
 8016a3e:	9802      	ldr	r0, [sp, #8]
 8016a40:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016a44:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8016a48:	9002      	str	r0, [sp, #8]
 8016a4a:	463a      	mov	r2, r7
 8016a4c:	4640      	mov	r0, r8
 8016a4e:	4798      	blx	r3
 8016a50:	6923      	ldr	r3, [r4, #16]
 8016a52:	3b01      	subs	r3, #1
 8016a54:	6123      	str	r3, [r4, #16]
 8016a56:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016a5a:	fa5f fa8a 	uxtb.w	sl, sl
 8016a5e:	f1ba 0f02 	cmp.w	sl, #2
 8016a62:	d1ec      	bne.n	8016a3e <_scanf_float+0x2c6>
 8016a64:	3d03      	subs	r5, #3
 8016a66:	b2ed      	uxtb	r5, r5
 8016a68:	1b76      	subs	r6, r6, r5
 8016a6a:	6823      	ldr	r3, [r4, #0]
 8016a6c:	05da      	lsls	r2, r3, #23
 8016a6e:	d52f      	bpl.n	8016ad0 <_scanf_float+0x358>
 8016a70:	055b      	lsls	r3, r3, #21
 8016a72:	d510      	bpl.n	8016a96 <_scanf_float+0x31e>
 8016a74:	455e      	cmp	r6, fp
 8016a76:	f67f aebf 	bls.w	80167f8 <_scanf_float+0x80>
 8016a7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016a7e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016a82:	463a      	mov	r2, r7
 8016a84:	4640      	mov	r0, r8
 8016a86:	4798      	blx	r3
 8016a88:	6923      	ldr	r3, [r4, #16]
 8016a8a:	3b01      	subs	r3, #1
 8016a8c:	6123      	str	r3, [r4, #16]
 8016a8e:	e7f1      	b.n	8016a74 <_scanf_float+0x2fc>
 8016a90:	46aa      	mov	sl, r5
 8016a92:	9602      	str	r6, [sp, #8]
 8016a94:	e7df      	b.n	8016a56 <_scanf_float+0x2de>
 8016a96:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8016a9a:	6923      	ldr	r3, [r4, #16]
 8016a9c:	2965      	cmp	r1, #101	; 0x65
 8016a9e:	f103 33ff 	add.w	r3, r3, #4294967295
 8016aa2:	f106 35ff 	add.w	r5, r6, #4294967295
 8016aa6:	6123      	str	r3, [r4, #16]
 8016aa8:	d00c      	beq.n	8016ac4 <_scanf_float+0x34c>
 8016aaa:	2945      	cmp	r1, #69	; 0x45
 8016aac:	d00a      	beq.n	8016ac4 <_scanf_float+0x34c>
 8016aae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016ab2:	463a      	mov	r2, r7
 8016ab4:	4640      	mov	r0, r8
 8016ab6:	4798      	blx	r3
 8016ab8:	6923      	ldr	r3, [r4, #16]
 8016aba:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8016abe:	3b01      	subs	r3, #1
 8016ac0:	1eb5      	subs	r5, r6, #2
 8016ac2:	6123      	str	r3, [r4, #16]
 8016ac4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016ac8:	463a      	mov	r2, r7
 8016aca:	4640      	mov	r0, r8
 8016acc:	4798      	blx	r3
 8016ace:	462e      	mov	r6, r5
 8016ad0:	6825      	ldr	r5, [r4, #0]
 8016ad2:	f015 0510 	ands.w	r5, r5, #16
 8016ad6:	d158      	bne.n	8016b8a <_scanf_float+0x412>
 8016ad8:	7035      	strb	r5, [r6, #0]
 8016ada:	6823      	ldr	r3, [r4, #0]
 8016adc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8016ae0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016ae4:	d11c      	bne.n	8016b20 <_scanf_float+0x3a8>
 8016ae6:	9b01      	ldr	r3, [sp, #4]
 8016ae8:	454b      	cmp	r3, r9
 8016aea:	eba3 0209 	sub.w	r2, r3, r9
 8016aee:	d124      	bne.n	8016b3a <_scanf_float+0x3c2>
 8016af0:	2200      	movs	r2, #0
 8016af2:	4659      	mov	r1, fp
 8016af4:	4640      	mov	r0, r8
 8016af6:	f000 fee1 	bl	80178bc <_strtod_r>
 8016afa:	9b03      	ldr	r3, [sp, #12]
 8016afc:	6821      	ldr	r1, [r4, #0]
 8016afe:	681b      	ldr	r3, [r3, #0]
 8016b00:	f011 0f02 	tst.w	r1, #2
 8016b04:	ec57 6b10 	vmov	r6, r7, d0
 8016b08:	f103 0204 	add.w	r2, r3, #4
 8016b0c:	d020      	beq.n	8016b50 <_scanf_float+0x3d8>
 8016b0e:	9903      	ldr	r1, [sp, #12]
 8016b10:	600a      	str	r2, [r1, #0]
 8016b12:	681b      	ldr	r3, [r3, #0]
 8016b14:	e9c3 6700 	strd	r6, r7, [r3]
 8016b18:	68e3      	ldr	r3, [r4, #12]
 8016b1a:	3301      	adds	r3, #1
 8016b1c:	60e3      	str	r3, [r4, #12]
 8016b1e:	e66c      	b.n	80167fa <_scanf_float+0x82>
 8016b20:	9b04      	ldr	r3, [sp, #16]
 8016b22:	2b00      	cmp	r3, #0
 8016b24:	d0e4      	beq.n	8016af0 <_scanf_float+0x378>
 8016b26:	9905      	ldr	r1, [sp, #20]
 8016b28:	230a      	movs	r3, #10
 8016b2a:	462a      	mov	r2, r5
 8016b2c:	3101      	adds	r1, #1
 8016b2e:	4640      	mov	r0, r8
 8016b30:	f000 ff4e 	bl	80179d0 <_strtol_r>
 8016b34:	9b04      	ldr	r3, [sp, #16]
 8016b36:	9e05      	ldr	r6, [sp, #20]
 8016b38:	1ac2      	subs	r2, r0, r3
 8016b3a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8016b3e:	429e      	cmp	r6, r3
 8016b40:	bf28      	it	cs
 8016b42:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8016b46:	4912      	ldr	r1, [pc, #72]	; (8016b90 <_scanf_float+0x418>)
 8016b48:	4630      	mov	r0, r6
 8016b4a:	f000 f86f 	bl	8016c2c <siprintf>
 8016b4e:	e7cf      	b.n	8016af0 <_scanf_float+0x378>
 8016b50:	f011 0f04 	tst.w	r1, #4
 8016b54:	9903      	ldr	r1, [sp, #12]
 8016b56:	600a      	str	r2, [r1, #0]
 8016b58:	d1db      	bne.n	8016b12 <_scanf_float+0x39a>
 8016b5a:	f8d3 8000 	ldr.w	r8, [r3]
 8016b5e:	ee10 2a10 	vmov	r2, s0
 8016b62:	ee10 0a10 	vmov	r0, s0
 8016b66:	463b      	mov	r3, r7
 8016b68:	4639      	mov	r1, r7
 8016b6a:	f7e9 ffdf 	bl	8000b2c <__aeabi_dcmpun>
 8016b6e:	b128      	cbz	r0, 8016b7c <_scanf_float+0x404>
 8016b70:	4808      	ldr	r0, [pc, #32]	; (8016b94 <_scanf_float+0x41c>)
 8016b72:	f000 f821 	bl	8016bb8 <nanf>
 8016b76:	ed88 0a00 	vstr	s0, [r8]
 8016b7a:	e7cd      	b.n	8016b18 <_scanf_float+0x3a0>
 8016b7c:	4630      	mov	r0, r6
 8016b7e:	4639      	mov	r1, r7
 8016b80:	f7ea f832 	bl	8000be8 <__aeabi_d2f>
 8016b84:	f8c8 0000 	str.w	r0, [r8]
 8016b88:	e7c6      	b.n	8016b18 <_scanf_float+0x3a0>
 8016b8a:	2500      	movs	r5, #0
 8016b8c:	e635      	b.n	80167fa <_scanf_float+0x82>
 8016b8e:	bf00      	nop
 8016b90:	0801c2c0 	.word	0x0801c2c0
 8016b94:	0801c6d8 	.word	0x0801c6d8

08016b98 <_sbrk_r>:
 8016b98:	b538      	push	{r3, r4, r5, lr}
 8016b9a:	4d06      	ldr	r5, [pc, #24]	; (8016bb4 <_sbrk_r+0x1c>)
 8016b9c:	2300      	movs	r3, #0
 8016b9e:	4604      	mov	r4, r0
 8016ba0:	4608      	mov	r0, r1
 8016ba2:	602b      	str	r3, [r5, #0]
 8016ba4:	f7f4 fa04 	bl	800afb0 <_sbrk>
 8016ba8:	1c43      	adds	r3, r0, #1
 8016baa:	d102      	bne.n	8016bb2 <_sbrk_r+0x1a>
 8016bac:	682b      	ldr	r3, [r5, #0]
 8016bae:	b103      	cbz	r3, 8016bb2 <_sbrk_r+0x1a>
 8016bb0:	6023      	str	r3, [r4, #0]
 8016bb2:	bd38      	pop	{r3, r4, r5, pc}
 8016bb4:	2000fb3c 	.word	0x2000fb3c

08016bb8 <nanf>:
 8016bb8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016bc0 <nanf+0x8>
 8016bbc:	4770      	bx	lr
 8016bbe:	bf00      	nop
 8016bc0:	7fc00000 	.word	0x7fc00000

08016bc4 <sniprintf>:
 8016bc4:	b40c      	push	{r2, r3}
 8016bc6:	b530      	push	{r4, r5, lr}
 8016bc8:	4b17      	ldr	r3, [pc, #92]	; (8016c28 <sniprintf+0x64>)
 8016bca:	1e0c      	subs	r4, r1, #0
 8016bcc:	681d      	ldr	r5, [r3, #0]
 8016bce:	b09d      	sub	sp, #116	; 0x74
 8016bd0:	da08      	bge.n	8016be4 <sniprintf+0x20>
 8016bd2:	238b      	movs	r3, #139	; 0x8b
 8016bd4:	602b      	str	r3, [r5, #0]
 8016bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8016bda:	b01d      	add	sp, #116	; 0x74
 8016bdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016be0:	b002      	add	sp, #8
 8016be2:	4770      	bx	lr
 8016be4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8016be8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016bec:	bf14      	ite	ne
 8016bee:	f104 33ff 	addne.w	r3, r4, #4294967295
 8016bf2:	4623      	moveq	r3, r4
 8016bf4:	9304      	str	r3, [sp, #16]
 8016bf6:	9307      	str	r3, [sp, #28]
 8016bf8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016bfc:	9002      	str	r0, [sp, #8]
 8016bfe:	9006      	str	r0, [sp, #24]
 8016c00:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016c04:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016c06:	ab21      	add	r3, sp, #132	; 0x84
 8016c08:	a902      	add	r1, sp, #8
 8016c0a:	4628      	mov	r0, r5
 8016c0c:	9301      	str	r3, [sp, #4]
 8016c0e:	f002 fe13 	bl	8019838 <_svfiprintf_r>
 8016c12:	1c43      	adds	r3, r0, #1
 8016c14:	bfbc      	itt	lt
 8016c16:	238b      	movlt	r3, #139	; 0x8b
 8016c18:	602b      	strlt	r3, [r5, #0]
 8016c1a:	2c00      	cmp	r4, #0
 8016c1c:	d0dd      	beq.n	8016bda <sniprintf+0x16>
 8016c1e:	9b02      	ldr	r3, [sp, #8]
 8016c20:	2200      	movs	r2, #0
 8016c22:	701a      	strb	r2, [r3, #0]
 8016c24:	e7d9      	b.n	8016bda <sniprintf+0x16>
 8016c26:	bf00      	nop
 8016c28:	2000220c 	.word	0x2000220c

08016c2c <siprintf>:
 8016c2c:	b40e      	push	{r1, r2, r3}
 8016c2e:	b500      	push	{lr}
 8016c30:	b09c      	sub	sp, #112	; 0x70
 8016c32:	ab1d      	add	r3, sp, #116	; 0x74
 8016c34:	9002      	str	r0, [sp, #8]
 8016c36:	9006      	str	r0, [sp, #24]
 8016c38:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016c3c:	4809      	ldr	r0, [pc, #36]	; (8016c64 <siprintf+0x38>)
 8016c3e:	9107      	str	r1, [sp, #28]
 8016c40:	9104      	str	r1, [sp, #16]
 8016c42:	4909      	ldr	r1, [pc, #36]	; (8016c68 <siprintf+0x3c>)
 8016c44:	f853 2b04 	ldr.w	r2, [r3], #4
 8016c48:	9105      	str	r1, [sp, #20]
 8016c4a:	6800      	ldr	r0, [r0, #0]
 8016c4c:	9301      	str	r3, [sp, #4]
 8016c4e:	a902      	add	r1, sp, #8
 8016c50:	f002 fdf2 	bl	8019838 <_svfiprintf_r>
 8016c54:	9b02      	ldr	r3, [sp, #8]
 8016c56:	2200      	movs	r2, #0
 8016c58:	701a      	strb	r2, [r3, #0]
 8016c5a:	b01c      	add	sp, #112	; 0x70
 8016c5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016c60:	b003      	add	sp, #12
 8016c62:	4770      	bx	lr
 8016c64:	2000220c 	.word	0x2000220c
 8016c68:	ffff0208 	.word	0xffff0208

08016c6c <sulp>:
 8016c6c:	b570      	push	{r4, r5, r6, lr}
 8016c6e:	4604      	mov	r4, r0
 8016c70:	460d      	mov	r5, r1
 8016c72:	ec45 4b10 	vmov	d0, r4, r5
 8016c76:	4616      	mov	r6, r2
 8016c78:	f002 fc24 	bl	80194c4 <__ulp>
 8016c7c:	ec51 0b10 	vmov	r0, r1, d0
 8016c80:	b17e      	cbz	r6, 8016ca2 <sulp+0x36>
 8016c82:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016c86:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016c8a:	2b00      	cmp	r3, #0
 8016c8c:	dd09      	ble.n	8016ca2 <sulp+0x36>
 8016c8e:	051b      	lsls	r3, r3, #20
 8016c90:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8016c94:	2400      	movs	r4, #0
 8016c96:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8016c9a:	4622      	mov	r2, r4
 8016c9c:	462b      	mov	r3, r5
 8016c9e:	f7e9 fcab 	bl	80005f8 <__aeabi_dmul>
 8016ca2:	bd70      	pop	{r4, r5, r6, pc}
 8016ca4:	0000      	movs	r0, r0
	...

08016ca8 <_strtod_l>:
 8016ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cac:	b0a3      	sub	sp, #140	; 0x8c
 8016cae:	461f      	mov	r7, r3
 8016cb0:	2300      	movs	r3, #0
 8016cb2:	931e      	str	r3, [sp, #120]	; 0x78
 8016cb4:	4ba4      	ldr	r3, [pc, #656]	; (8016f48 <_strtod_l+0x2a0>)
 8016cb6:	9219      	str	r2, [sp, #100]	; 0x64
 8016cb8:	681b      	ldr	r3, [r3, #0]
 8016cba:	9307      	str	r3, [sp, #28]
 8016cbc:	4604      	mov	r4, r0
 8016cbe:	4618      	mov	r0, r3
 8016cc0:	4688      	mov	r8, r1
 8016cc2:	f7e9 fa85 	bl	80001d0 <strlen>
 8016cc6:	f04f 0a00 	mov.w	sl, #0
 8016cca:	4605      	mov	r5, r0
 8016ccc:	f04f 0b00 	mov.w	fp, #0
 8016cd0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8016cd4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016cd6:	781a      	ldrb	r2, [r3, #0]
 8016cd8:	2a2b      	cmp	r2, #43	; 0x2b
 8016cda:	d04c      	beq.n	8016d76 <_strtod_l+0xce>
 8016cdc:	d839      	bhi.n	8016d52 <_strtod_l+0xaa>
 8016cde:	2a0d      	cmp	r2, #13
 8016ce0:	d832      	bhi.n	8016d48 <_strtod_l+0xa0>
 8016ce2:	2a08      	cmp	r2, #8
 8016ce4:	d832      	bhi.n	8016d4c <_strtod_l+0xa4>
 8016ce6:	2a00      	cmp	r2, #0
 8016ce8:	d03c      	beq.n	8016d64 <_strtod_l+0xbc>
 8016cea:	2300      	movs	r3, #0
 8016cec:	930e      	str	r3, [sp, #56]	; 0x38
 8016cee:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8016cf0:	7833      	ldrb	r3, [r6, #0]
 8016cf2:	2b30      	cmp	r3, #48	; 0x30
 8016cf4:	f040 80b4 	bne.w	8016e60 <_strtod_l+0x1b8>
 8016cf8:	7873      	ldrb	r3, [r6, #1]
 8016cfa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016cfe:	2b58      	cmp	r3, #88	; 0x58
 8016d00:	d16c      	bne.n	8016ddc <_strtod_l+0x134>
 8016d02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016d04:	9301      	str	r3, [sp, #4]
 8016d06:	ab1e      	add	r3, sp, #120	; 0x78
 8016d08:	9702      	str	r7, [sp, #8]
 8016d0a:	9300      	str	r3, [sp, #0]
 8016d0c:	4a8f      	ldr	r2, [pc, #572]	; (8016f4c <_strtod_l+0x2a4>)
 8016d0e:	ab1f      	add	r3, sp, #124	; 0x7c
 8016d10:	a91d      	add	r1, sp, #116	; 0x74
 8016d12:	4620      	mov	r0, r4
 8016d14:	f001 fd40 	bl	8018798 <__gethex>
 8016d18:	f010 0707 	ands.w	r7, r0, #7
 8016d1c:	4605      	mov	r5, r0
 8016d1e:	d005      	beq.n	8016d2c <_strtod_l+0x84>
 8016d20:	2f06      	cmp	r7, #6
 8016d22:	d12a      	bne.n	8016d7a <_strtod_l+0xd2>
 8016d24:	3601      	adds	r6, #1
 8016d26:	2300      	movs	r3, #0
 8016d28:	961d      	str	r6, [sp, #116]	; 0x74
 8016d2a:	930e      	str	r3, [sp, #56]	; 0x38
 8016d2c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016d2e:	2b00      	cmp	r3, #0
 8016d30:	f040 8596 	bne.w	8017860 <_strtod_l+0xbb8>
 8016d34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016d36:	b1db      	cbz	r3, 8016d70 <_strtod_l+0xc8>
 8016d38:	4652      	mov	r2, sl
 8016d3a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8016d3e:	ec43 2b10 	vmov	d0, r2, r3
 8016d42:	b023      	add	sp, #140	; 0x8c
 8016d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d48:	2a20      	cmp	r2, #32
 8016d4a:	d1ce      	bne.n	8016cea <_strtod_l+0x42>
 8016d4c:	3301      	adds	r3, #1
 8016d4e:	931d      	str	r3, [sp, #116]	; 0x74
 8016d50:	e7c0      	b.n	8016cd4 <_strtod_l+0x2c>
 8016d52:	2a2d      	cmp	r2, #45	; 0x2d
 8016d54:	d1c9      	bne.n	8016cea <_strtod_l+0x42>
 8016d56:	2201      	movs	r2, #1
 8016d58:	920e      	str	r2, [sp, #56]	; 0x38
 8016d5a:	1c5a      	adds	r2, r3, #1
 8016d5c:	921d      	str	r2, [sp, #116]	; 0x74
 8016d5e:	785b      	ldrb	r3, [r3, #1]
 8016d60:	2b00      	cmp	r3, #0
 8016d62:	d1c4      	bne.n	8016cee <_strtod_l+0x46>
 8016d64:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016d66:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8016d6a:	2b00      	cmp	r3, #0
 8016d6c:	f040 8576 	bne.w	801785c <_strtod_l+0xbb4>
 8016d70:	4652      	mov	r2, sl
 8016d72:	465b      	mov	r3, fp
 8016d74:	e7e3      	b.n	8016d3e <_strtod_l+0x96>
 8016d76:	2200      	movs	r2, #0
 8016d78:	e7ee      	b.n	8016d58 <_strtod_l+0xb0>
 8016d7a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016d7c:	b13a      	cbz	r2, 8016d8e <_strtod_l+0xe6>
 8016d7e:	2135      	movs	r1, #53	; 0x35
 8016d80:	a820      	add	r0, sp, #128	; 0x80
 8016d82:	f002 fcaa 	bl	80196da <__copybits>
 8016d86:	991e      	ldr	r1, [sp, #120]	; 0x78
 8016d88:	4620      	mov	r0, r4
 8016d8a:	f002 f86f 	bl	8018e6c <_Bfree>
 8016d8e:	3f01      	subs	r7, #1
 8016d90:	2f05      	cmp	r7, #5
 8016d92:	d807      	bhi.n	8016da4 <_strtod_l+0xfc>
 8016d94:	e8df f007 	tbb	[pc, r7]
 8016d98:	1d180b0e 	.word	0x1d180b0e
 8016d9c:	030e      	.short	0x030e
 8016d9e:	f04f 0b00 	mov.w	fp, #0
 8016da2:	46da      	mov	sl, fp
 8016da4:	0728      	lsls	r0, r5, #28
 8016da6:	d5c1      	bpl.n	8016d2c <_strtod_l+0x84>
 8016da8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8016dac:	e7be      	b.n	8016d2c <_strtod_l+0x84>
 8016dae:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8016db2:	e7f7      	b.n	8016da4 <_strtod_l+0xfc>
 8016db4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8016db8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8016dba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8016dbe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8016dc2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016dc6:	e7ed      	b.n	8016da4 <_strtod_l+0xfc>
 8016dc8:	f8df b184 	ldr.w	fp, [pc, #388]	; 8016f50 <_strtod_l+0x2a8>
 8016dcc:	f04f 0a00 	mov.w	sl, #0
 8016dd0:	e7e8      	b.n	8016da4 <_strtod_l+0xfc>
 8016dd2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8016dd6:	f04f 3aff 	mov.w	sl, #4294967295
 8016dda:	e7e3      	b.n	8016da4 <_strtod_l+0xfc>
 8016ddc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016dde:	1c5a      	adds	r2, r3, #1
 8016de0:	921d      	str	r2, [sp, #116]	; 0x74
 8016de2:	785b      	ldrb	r3, [r3, #1]
 8016de4:	2b30      	cmp	r3, #48	; 0x30
 8016de6:	d0f9      	beq.n	8016ddc <_strtod_l+0x134>
 8016de8:	2b00      	cmp	r3, #0
 8016dea:	d09f      	beq.n	8016d2c <_strtod_l+0x84>
 8016dec:	2301      	movs	r3, #1
 8016dee:	f04f 0900 	mov.w	r9, #0
 8016df2:	9304      	str	r3, [sp, #16]
 8016df4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016df6:	930a      	str	r3, [sp, #40]	; 0x28
 8016df8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8016dfc:	464f      	mov	r7, r9
 8016dfe:	220a      	movs	r2, #10
 8016e00:	981d      	ldr	r0, [sp, #116]	; 0x74
 8016e02:	7806      	ldrb	r6, [r0, #0]
 8016e04:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8016e08:	b2d9      	uxtb	r1, r3
 8016e0a:	2909      	cmp	r1, #9
 8016e0c:	d92a      	bls.n	8016e64 <_strtod_l+0x1bc>
 8016e0e:	9907      	ldr	r1, [sp, #28]
 8016e10:	462a      	mov	r2, r5
 8016e12:	f002 fe19 	bl	8019a48 <strncmp>
 8016e16:	b398      	cbz	r0, 8016e80 <_strtod_l+0x1d8>
 8016e18:	2000      	movs	r0, #0
 8016e1a:	4633      	mov	r3, r6
 8016e1c:	463d      	mov	r5, r7
 8016e1e:	9007      	str	r0, [sp, #28]
 8016e20:	4602      	mov	r2, r0
 8016e22:	2b65      	cmp	r3, #101	; 0x65
 8016e24:	d001      	beq.n	8016e2a <_strtod_l+0x182>
 8016e26:	2b45      	cmp	r3, #69	; 0x45
 8016e28:	d118      	bne.n	8016e5c <_strtod_l+0x1b4>
 8016e2a:	b91d      	cbnz	r5, 8016e34 <_strtod_l+0x18c>
 8016e2c:	9b04      	ldr	r3, [sp, #16]
 8016e2e:	4303      	orrs	r3, r0
 8016e30:	d098      	beq.n	8016d64 <_strtod_l+0xbc>
 8016e32:	2500      	movs	r5, #0
 8016e34:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8016e38:	f108 0301 	add.w	r3, r8, #1
 8016e3c:	931d      	str	r3, [sp, #116]	; 0x74
 8016e3e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8016e42:	2b2b      	cmp	r3, #43	; 0x2b
 8016e44:	d075      	beq.n	8016f32 <_strtod_l+0x28a>
 8016e46:	2b2d      	cmp	r3, #45	; 0x2d
 8016e48:	d07b      	beq.n	8016f42 <_strtod_l+0x29a>
 8016e4a:	f04f 0c00 	mov.w	ip, #0
 8016e4e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8016e52:	2909      	cmp	r1, #9
 8016e54:	f240 8082 	bls.w	8016f5c <_strtod_l+0x2b4>
 8016e58:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8016e5c:	2600      	movs	r6, #0
 8016e5e:	e09d      	b.n	8016f9c <_strtod_l+0x2f4>
 8016e60:	2300      	movs	r3, #0
 8016e62:	e7c4      	b.n	8016dee <_strtod_l+0x146>
 8016e64:	2f08      	cmp	r7, #8
 8016e66:	bfd8      	it	le
 8016e68:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8016e6a:	f100 0001 	add.w	r0, r0, #1
 8016e6e:	bfda      	itte	le
 8016e70:	fb02 3301 	mlale	r3, r2, r1, r3
 8016e74:	9309      	strle	r3, [sp, #36]	; 0x24
 8016e76:	fb02 3909 	mlagt	r9, r2, r9, r3
 8016e7a:	3701      	adds	r7, #1
 8016e7c:	901d      	str	r0, [sp, #116]	; 0x74
 8016e7e:	e7bf      	b.n	8016e00 <_strtod_l+0x158>
 8016e80:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016e82:	195a      	adds	r2, r3, r5
 8016e84:	921d      	str	r2, [sp, #116]	; 0x74
 8016e86:	5d5b      	ldrb	r3, [r3, r5]
 8016e88:	2f00      	cmp	r7, #0
 8016e8a:	d037      	beq.n	8016efc <_strtod_l+0x254>
 8016e8c:	9007      	str	r0, [sp, #28]
 8016e8e:	463d      	mov	r5, r7
 8016e90:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8016e94:	2a09      	cmp	r2, #9
 8016e96:	d912      	bls.n	8016ebe <_strtod_l+0x216>
 8016e98:	2201      	movs	r2, #1
 8016e9a:	e7c2      	b.n	8016e22 <_strtod_l+0x17a>
 8016e9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016e9e:	1c5a      	adds	r2, r3, #1
 8016ea0:	921d      	str	r2, [sp, #116]	; 0x74
 8016ea2:	785b      	ldrb	r3, [r3, #1]
 8016ea4:	3001      	adds	r0, #1
 8016ea6:	2b30      	cmp	r3, #48	; 0x30
 8016ea8:	d0f8      	beq.n	8016e9c <_strtod_l+0x1f4>
 8016eaa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8016eae:	2a08      	cmp	r2, #8
 8016eb0:	f200 84db 	bhi.w	801786a <_strtod_l+0xbc2>
 8016eb4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8016eb6:	9007      	str	r0, [sp, #28]
 8016eb8:	2000      	movs	r0, #0
 8016eba:	920a      	str	r2, [sp, #40]	; 0x28
 8016ebc:	4605      	mov	r5, r0
 8016ebe:	3b30      	subs	r3, #48	; 0x30
 8016ec0:	f100 0201 	add.w	r2, r0, #1
 8016ec4:	d014      	beq.n	8016ef0 <_strtod_l+0x248>
 8016ec6:	9907      	ldr	r1, [sp, #28]
 8016ec8:	4411      	add	r1, r2
 8016eca:	9107      	str	r1, [sp, #28]
 8016ecc:	462a      	mov	r2, r5
 8016ece:	eb00 0e05 	add.w	lr, r0, r5
 8016ed2:	210a      	movs	r1, #10
 8016ed4:	4572      	cmp	r2, lr
 8016ed6:	d113      	bne.n	8016f00 <_strtod_l+0x258>
 8016ed8:	182a      	adds	r2, r5, r0
 8016eda:	2a08      	cmp	r2, #8
 8016edc:	f105 0501 	add.w	r5, r5, #1
 8016ee0:	4405      	add	r5, r0
 8016ee2:	dc1c      	bgt.n	8016f1e <_strtod_l+0x276>
 8016ee4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016ee6:	220a      	movs	r2, #10
 8016ee8:	fb02 3301 	mla	r3, r2, r1, r3
 8016eec:	9309      	str	r3, [sp, #36]	; 0x24
 8016eee:	2200      	movs	r2, #0
 8016ef0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016ef2:	1c59      	adds	r1, r3, #1
 8016ef4:	911d      	str	r1, [sp, #116]	; 0x74
 8016ef6:	785b      	ldrb	r3, [r3, #1]
 8016ef8:	4610      	mov	r0, r2
 8016efa:	e7c9      	b.n	8016e90 <_strtod_l+0x1e8>
 8016efc:	4638      	mov	r0, r7
 8016efe:	e7d2      	b.n	8016ea6 <_strtod_l+0x1fe>
 8016f00:	2a08      	cmp	r2, #8
 8016f02:	dc04      	bgt.n	8016f0e <_strtod_l+0x266>
 8016f04:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8016f06:	434e      	muls	r6, r1
 8016f08:	9609      	str	r6, [sp, #36]	; 0x24
 8016f0a:	3201      	adds	r2, #1
 8016f0c:	e7e2      	b.n	8016ed4 <_strtod_l+0x22c>
 8016f0e:	f102 0c01 	add.w	ip, r2, #1
 8016f12:	f1bc 0f10 	cmp.w	ip, #16
 8016f16:	bfd8      	it	le
 8016f18:	fb01 f909 	mulle.w	r9, r1, r9
 8016f1c:	e7f5      	b.n	8016f0a <_strtod_l+0x262>
 8016f1e:	2d10      	cmp	r5, #16
 8016f20:	bfdc      	itt	le
 8016f22:	220a      	movle	r2, #10
 8016f24:	fb02 3909 	mlale	r9, r2, r9, r3
 8016f28:	e7e1      	b.n	8016eee <_strtod_l+0x246>
 8016f2a:	2300      	movs	r3, #0
 8016f2c:	9307      	str	r3, [sp, #28]
 8016f2e:	2201      	movs	r2, #1
 8016f30:	e77c      	b.n	8016e2c <_strtod_l+0x184>
 8016f32:	f04f 0c00 	mov.w	ip, #0
 8016f36:	f108 0302 	add.w	r3, r8, #2
 8016f3a:	931d      	str	r3, [sp, #116]	; 0x74
 8016f3c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8016f40:	e785      	b.n	8016e4e <_strtod_l+0x1a6>
 8016f42:	f04f 0c01 	mov.w	ip, #1
 8016f46:	e7f6      	b.n	8016f36 <_strtod_l+0x28e>
 8016f48:	0801c518 	.word	0x0801c518
 8016f4c:	0801c2c8 	.word	0x0801c2c8
 8016f50:	7ff00000 	.word	0x7ff00000
 8016f54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016f56:	1c59      	adds	r1, r3, #1
 8016f58:	911d      	str	r1, [sp, #116]	; 0x74
 8016f5a:	785b      	ldrb	r3, [r3, #1]
 8016f5c:	2b30      	cmp	r3, #48	; 0x30
 8016f5e:	d0f9      	beq.n	8016f54 <_strtod_l+0x2ac>
 8016f60:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8016f64:	2908      	cmp	r1, #8
 8016f66:	f63f af79 	bhi.w	8016e5c <_strtod_l+0x1b4>
 8016f6a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8016f6e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016f70:	9308      	str	r3, [sp, #32]
 8016f72:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016f74:	1c59      	adds	r1, r3, #1
 8016f76:	911d      	str	r1, [sp, #116]	; 0x74
 8016f78:	785b      	ldrb	r3, [r3, #1]
 8016f7a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8016f7e:	2e09      	cmp	r6, #9
 8016f80:	d937      	bls.n	8016ff2 <_strtod_l+0x34a>
 8016f82:	9e08      	ldr	r6, [sp, #32]
 8016f84:	1b89      	subs	r1, r1, r6
 8016f86:	2908      	cmp	r1, #8
 8016f88:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8016f8c:	dc02      	bgt.n	8016f94 <_strtod_l+0x2ec>
 8016f8e:	4576      	cmp	r6, lr
 8016f90:	bfa8      	it	ge
 8016f92:	4676      	movge	r6, lr
 8016f94:	f1bc 0f00 	cmp.w	ip, #0
 8016f98:	d000      	beq.n	8016f9c <_strtod_l+0x2f4>
 8016f9a:	4276      	negs	r6, r6
 8016f9c:	2d00      	cmp	r5, #0
 8016f9e:	d14f      	bne.n	8017040 <_strtod_l+0x398>
 8016fa0:	9904      	ldr	r1, [sp, #16]
 8016fa2:	4301      	orrs	r1, r0
 8016fa4:	f47f aec2 	bne.w	8016d2c <_strtod_l+0x84>
 8016fa8:	2a00      	cmp	r2, #0
 8016faa:	f47f aedb 	bne.w	8016d64 <_strtod_l+0xbc>
 8016fae:	2b69      	cmp	r3, #105	; 0x69
 8016fb0:	d027      	beq.n	8017002 <_strtod_l+0x35a>
 8016fb2:	dc24      	bgt.n	8016ffe <_strtod_l+0x356>
 8016fb4:	2b49      	cmp	r3, #73	; 0x49
 8016fb6:	d024      	beq.n	8017002 <_strtod_l+0x35a>
 8016fb8:	2b4e      	cmp	r3, #78	; 0x4e
 8016fba:	f47f aed3 	bne.w	8016d64 <_strtod_l+0xbc>
 8016fbe:	499e      	ldr	r1, [pc, #632]	; (8017238 <_strtod_l+0x590>)
 8016fc0:	a81d      	add	r0, sp, #116	; 0x74
 8016fc2:	f001 fe41 	bl	8018c48 <__match>
 8016fc6:	2800      	cmp	r0, #0
 8016fc8:	f43f aecc 	beq.w	8016d64 <_strtod_l+0xbc>
 8016fcc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016fce:	781b      	ldrb	r3, [r3, #0]
 8016fd0:	2b28      	cmp	r3, #40	; 0x28
 8016fd2:	d12d      	bne.n	8017030 <_strtod_l+0x388>
 8016fd4:	4999      	ldr	r1, [pc, #612]	; (801723c <_strtod_l+0x594>)
 8016fd6:	aa20      	add	r2, sp, #128	; 0x80
 8016fd8:	a81d      	add	r0, sp, #116	; 0x74
 8016fda:	f001 fe49 	bl	8018c70 <__hexnan>
 8016fde:	2805      	cmp	r0, #5
 8016fe0:	d126      	bne.n	8017030 <_strtod_l+0x388>
 8016fe2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016fe4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8016fe8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8016fec:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8016ff0:	e69c      	b.n	8016d2c <_strtod_l+0x84>
 8016ff2:	210a      	movs	r1, #10
 8016ff4:	fb01 3e0e 	mla	lr, r1, lr, r3
 8016ff8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8016ffc:	e7b9      	b.n	8016f72 <_strtod_l+0x2ca>
 8016ffe:	2b6e      	cmp	r3, #110	; 0x6e
 8017000:	e7db      	b.n	8016fba <_strtod_l+0x312>
 8017002:	498f      	ldr	r1, [pc, #572]	; (8017240 <_strtod_l+0x598>)
 8017004:	a81d      	add	r0, sp, #116	; 0x74
 8017006:	f001 fe1f 	bl	8018c48 <__match>
 801700a:	2800      	cmp	r0, #0
 801700c:	f43f aeaa 	beq.w	8016d64 <_strtod_l+0xbc>
 8017010:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017012:	498c      	ldr	r1, [pc, #560]	; (8017244 <_strtod_l+0x59c>)
 8017014:	3b01      	subs	r3, #1
 8017016:	a81d      	add	r0, sp, #116	; 0x74
 8017018:	931d      	str	r3, [sp, #116]	; 0x74
 801701a:	f001 fe15 	bl	8018c48 <__match>
 801701e:	b910      	cbnz	r0, 8017026 <_strtod_l+0x37e>
 8017020:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017022:	3301      	adds	r3, #1
 8017024:	931d      	str	r3, [sp, #116]	; 0x74
 8017026:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8017254 <_strtod_l+0x5ac>
 801702a:	f04f 0a00 	mov.w	sl, #0
 801702e:	e67d      	b.n	8016d2c <_strtod_l+0x84>
 8017030:	4885      	ldr	r0, [pc, #532]	; (8017248 <_strtod_l+0x5a0>)
 8017032:	f002 fd01 	bl	8019a38 <nan>
 8017036:	ed8d 0b04 	vstr	d0, [sp, #16]
 801703a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801703e:	e675      	b.n	8016d2c <_strtod_l+0x84>
 8017040:	9b07      	ldr	r3, [sp, #28]
 8017042:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017044:	1af3      	subs	r3, r6, r3
 8017046:	2f00      	cmp	r7, #0
 8017048:	bf08      	it	eq
 801704a:	462f      	moveq	r7, r5
 801704c:	2d10      	cmp	r5, #16
 801704e:	9308      	str	r3, [sp, #32]
 8017050:	46a8      	mov	r8, r5
 8017052:	bfa8      	it	ge
 8017054:	f04f 0810 	movge.w	r8, #16
 8017058:	f7e9 fa54 	bl	8000504 <__aeabi_ui2d>
 801705c:	2d09      	cmp	r5, #9
 801705e:	4682      	mov	sl, r0
 8017060:	468b      	mov	fp, r1
 8017062:	dd13      	ble.n	801708c <_strtod_l+0x3e4>
 8017064:	4b79      	ldr	r3, [pc, #484]	; (801724c <_strtod_l+0x5a4>)
 8017066:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801706a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801706e:	f7e9 fac3 	bl	80005f8 <__aeabi_dmul>
 8017072:	4682      	mov	sl, r0
 8017074:	4648      	mov	r0, r9
 8017076:	468b      	mov	fp, r1
 8017078:	f7e9 fa44 	bl	8000504 <__aeabi_ui2d>
 801707c:	4602      	mov	r2, r0
 801707e:	460b      	mov	r3, r1
 8017080:	4650      	mov	r0, sl
 8017082:	4659      	mov	r1, fp
 8017084:	f7e9 f902 	bl	800028c <__adddf3>
 8017088:	4682      	mov	sl, r0
 801708a:	468b      	mov	fp, r1
 801708c:	2d0f      	cmp	r5, #15
 801708e:	dc38      	bgt.n	8017102 <_strtod_l+0x45a>
 8017090:	9b08      	ldr	r3, [sp, #32]
 8017092:	2b00      	cmp	r3, #0
 8017094:	f43f ae4a 	beq.w	8016d2c <_strtod_l+0x84>
 8017098:	dd24      	ble.n	80170e4 <_strtod_l+0x43c>
 801709a:	2b16      	cmp	r3, #22
 801709c:	dc0b      	bgt.n	80170b6 <_strtod_l+0x40e>
 801709e:	4d6b      	ldr	r5, [pc, #428]	; (801724c <_strtod_l+0x5a4>)
 80170a0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80170a4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80170a8:	4652      	mov	r2, sl
 80170aa:	465b      	mov	r3, fp
 80170ac:	f7e9 faa4 	bl	80005f8 <__aeabi_dmul>
 80170b0:	4682      	mov	sl, r0
 80170b2:	468b      	mov	fp, r1
 80170b4:	e63a      	b.n	8016d2c <_strtod_l+0x84>
 80170b6:	9a08      	ldr	r2, [sp, #32]
 80170b8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80170bc:	4293      	cmp	r3, r2
 80170be:	db20      	blt.n	8017102 <_strtod_l+0x45a>
 80170c0:	4c62      	ldr	r4, [pc, #392]	; (801724c <_strtod_l+0x5a4>)
 80170c2:	f1c5 050f 	rsb	r5, r5, #15
 80170c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80170ca:	4652      	mov	r2, sl
 80170cc:	465b      	mov	r3, fp
 80170ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80170d2:	f7e9 fa91 	bl	80005f8 <__aeabi_dmul>
 80170d6:	9b08      	ldr	r3, [sp, #32]
 80170d8:	1b5d      	subs	r5, r3, r5
 80170da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80170de:	e9d4 2300 	ldrd	r2, r3, [r4]
 80170e2:	e7e3      	b.n	80170ac <_strtod_l+0x404>
 80170e4:	9b08      	ldr	r3, [sp, #32]
 80170e6:	3316      	adds	r3, #22
 80170e8:	db0b      	blt.n	8017102 <_strtod_l+0x45a>
 80170ea:	9b07      	ldr	r3, [sp, #28]
 80170ec:	4a57      	ldr	r2, [pc, #348]	; (801724c <_strtod_l+0x5a4>)
 80170ee:	1b9e      	subs	r6, r3, r6
 80170f0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80170f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80170f8:	4650      	mov	r0, sl
 80170fa:	4659      	mov	r1, fp
 80170fc:	f7e9 fba6 	bl	800084c <__aeabi_ddiv>
 8017100:	e7d6      	b.n	80170b0 <_strtod_l+0x408>
 8017102:	9b08      	ldr	r3, [sp, #32]
 8017104:	eba5 0808 	sub.w	r8, r5, r8
 8017108:	4498      	add	r8, r3
 801710a:	f1b8 0f00 	cmp.w	r8, #0
 801710e:	dd71      	ble.n	80171f4 <_strtod_l+0x54c>
 8017110:	f018 030f 	ands.w	r3, r8, #15
 8017114:	d00a      	beq.n	801712c <_strtod_l+0x484>
 8017116:	494d      	ldr	r1, [pc, #308]	; (801724c <_strtod_l+0x5a4>)
 8017118:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801711c:	4652      	mov	r2, sl
 801711e:	465b      	mov	r3, fp
 8017120:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017124:	f7e9 fa68 	bl	80005f8 <__aeabi_dmul>
 8017128:	4682      	mov	sl, r0
 801712a:	468b      	mov	fp, r1
 801712c:	f038 080f 	bics.w	r8, r8, #15
 8017130:	d04d      	beq.n	80171ce <_strtod_l+0x526>
 8017132:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8017136:	dd22      	ble.n	801717e <_strtod_l+0x4d6>
 8017138:	2500      	movs	r5, #0
 801713a:	462e      	mov	r6, r5
 801713c:	9509      	str	r5, [sp, #36]	; 0x24
 801713e:	9507      	str	r5, [sp, #28]
 8017140:	2322      	movs	r3, #34	; 0x22
 8017142:	f8df b110 	ldr.w	fp, [pc, #272]	; 8017254 <_strtod_l+0x5ac>
 8017146:	6023      	str	r3, [r4, #0]
 8017148:	f04f 0a00 	mov.w	sl, #0
 801714c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801714e:	2b00      	cmp	r3, #0
 8017150:	f43f adec 	beq.w	8016d2c <_strtod_l+0x84>
 8017154:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017156:	4620      	mov	r0, r4
 8017158:	f001 fe88 	bl	8018e6c <_Bfree>
 801715c:	9907      	ldr	r1, [sp, #28]
 801715e:	4620      	mov	r0, r4
 8017160:	f001 fe84 	bl	8018e6c <_Bfree>
 8017164:	4631      	mov	r1, r6
 8017166:	4620      	mov	r0, r4
 8017168:	f001 fe80 	bl	8018e6c <_Bfree>
 801716c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801716e:	4620      	mov	r0, r4
 8017170:	f001 fe7c 	bl	8018e6c <_Bfree>
 8017174:	4629      	mov	r1, r5
 8017176:	4620      	mov	r0, r4
 8017178:	f001 fe78 	bl	8018e6c <_Bfree>
 801717c:	e5d6      	b.n	8016d2c <_strtod_l+0x84>
 801717e:	2300      	movs	r3, #0
 8017180:	ea4f 1828 	mov.w	r8, r8, asr #4
 8017184:	4650      	mov	r0, sl
 8017186:	4659      	mov	r1, fp
 8017188:	4699      	mov	r9, r3
 801718a:	f1b8 0f01 	cmp.w	r8, #1
 801718e:	dc21      	bgt.n	80171d4 <_strtod_l+0x52c>
 8017190:	b10b      	cbz	r3, 8017196 <_strtod_l+0x4ee>
 8017192:	4682      	mov	sl, r0
 8017194:	468b      	mov	fp, r1
 8017196:	4b2e      	ldr	r3, [pc, #184]	; (8017250 <_strtod_l+0x5a8>)
 8017198:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801719c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80171a0:	4652      	mov	r2, sl
 80171a2:	465b      	mov	r3, fp
 80171a4:	e9d9 0100 	ldrd	r0, r1, [r9]
 80171a8:	f7e9 fa26 	bl	80005f8 <__aeabi_dmul>
 80171ac:	4b29      	ldr	r3, [pc, #164]	; (8017254 <_strtod_l+0x5ac>)
 80171ae:	460a      	mov	r2, r1
 80171b0:	400b      	ands	r3, r1
 80171b2:	4929      	ldr	r1, [pc, #164]	; (8017258 <_strtod_l+0x5b0>)
 80171b4:	428b      	cmp	r3, r1
 80171b6:	4682      	mov	sl, r0
 80171b8:	d8be      	bhi.n	8017138 <_strtod_l+0x490>
 80171ba:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80171be:	428b      	cmp	r3, r1
 80171c0:	bf86      	itte	hi
 80171c2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801725c <_strtod_l+0x5b4>
 80171c6:	f04f 3aff 	movhi.w	sl, #4294967295
 80171ca:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80171ce:	2300      	movs	r3, #0
 80171d0:	9304      	str	r3, [sp, #16]
 80171d2:	e081      	b.n	80172d8 <_strtod_l+0x630>
 80171d4:	f018 0f01 	tst.w	r8, #1
 80171d8:	d007      	beq.n	80171ea <_strtod_l+0x542>
 80171da:	4b1d      	ldr	r3, [pc, #116]	; (8017250 <_strtod_l+0x5a8>)
 80171dc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80171e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171e4:	f7e9 fa08 	bl	80005f8 <__aeabi_dmul>
 80171e8:	2301      	movs	r3, #1
 80171ea:	f109 0901 	add.w	r9, r9, #1
 80171ee:	ea4f 0868 	mov.w	r8, r8, asr #1
 80171f2:	e7ca      	b.n	801718a <_strtod_l+0x4e2>
 80171f4:	d0eb      	beq.n	80171ce <_strtod_l+0x526>
 80171f6:	f1c8 0800 	rsb	r8, r8, #0
 80171fa:	f018 020f 	ands.w	r2, r8, #15
 80171fe:	d00a      	beq.n	8017216 <_strtod_l+0x56e>
 8017200:	4b12      	ldr	r3, [pc, #72]	; (801724c <_strtod_l+0x5a4>)
 8017202:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017206:	4650      	mov	r0, sl
 8017208:	4659      	mov	r1, fp
 801720a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801720e:	f7e9 fb1d 	bl	800084c <__aeabi_ddiv>
 8017212:	4682      	mov	sl, r0
 8017214:	468b      	mov	fp, r1
 8017216:	ea5f 1828 	movs.w	r8, r8, asr #4
 801721a:	d0d8      	beq.n	80171ce <_strtod_l+0x526>
 801721c:	f1b8 0f1f 	cmp.w	r8, #31
 8017220:	dd1e      	ble.n	8017260 <_strtod_l+0x5b8>
 8017222:	2500      	movs	r5, #0
 8017224:	462e      	mov	r6, r5
 8017226:	9509      	str	r5, [sp, #36]	; 0x24
 8017228:	9507      	str	r5, [sp, #28]
 801722a:	2322      	movs	r3, #34	; 0x22
 801722c:	f04f 0a00 	mov.w	sl, #0
 8017230:	f04f 0b00 	mov.w	fp, #0
 8017234:	6023      	str	r3, [r4, #0]
 8017236:	e789      	b.n	801714c <_strtod_l+0x4a4>
 8017238:	0801c299 	.word	0x0801c299
 801723c:	0801c2dc 	.word	0x0801c2dc
 8017240:	0801c291 	.word	0x0801c291
 8017244:	0801c41c 	.word	0x0801c41c
 8017248:	0801c6d8 	.word	0x0801c6d8
 801724c:	0801c5b8 	.word	0x0801c5b8
 8017250:	0801c590 	.word	0x0801c590
 8017254:	7ff00000 	.word	0x7ff00000
 8017258:	7ca00000 	.word	0x7ca00000
 801725c:	7fefffff 	.word	0x7fefffff
 8017260:	f018 0310 	ands.w	r3, r8, #16
 8017264:	bf18      	it	ne
 8017266:	236a      	movne	r3, #106	; 0x6a
 8017268:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8017620 <_strtod_l+0x978>
 801726c:	9304      	str	r3, [sp, #16]
 801726e:	4650      	mov	r0, sl
 8017270:	4659      	mov	r1, fp
 8017272:	2300      	movs	r3, #0
 8017274:	f018 0f01 	tst.w	r8, #1
 8017278:	d004      	beq.n	8017284 <_strtod_l+0x5dc>
 801727a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801727e:	f7e9 f9bb 	bl	80005f8 <__aeabi_dmul>
 8017282:	2301      	movs	r3, #1
 8017284:	ea5f 0868 	movs.w	r8, r8, asr #1
 8017288:	f109 0908 	add.w	r9, r9, #8
 801728c:	d1f2      	bne.n	8017274 <_strtod_l+0x5cc>
 801728e:	b10b      	cbz	r3, 8017294 <_strtod_l+0x5ec>
 8017290:	4682      	mov	sl, r0
 8017292:	468b      	mov	fp, r1
 8017294:	9b04      	ldr	r3, [sp, #16]
 8017296:	b1bb      	cbz	r3, 80172c8 <_strtod_l+0x620>
 8017298:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801729c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80172a0:	2b00      	cmp	r3, #0
 80172a2:	4659      	mov	r1, fp
 80172a4:	dd10      	ble.n	80172c8 <_strtod_l+0x620>
 80172a6:	2b1f      	cmp	r3, #31
 80172a8:	f340 8128 	ble.w	80174fc <_strtod_l+0x854>
 80172ac:	2b34      	cmp	r3, #52	; 0x34
 80172ae:	bfde      	ittt	le
 80172b0:	3b20      	suble	r3, #32
 80172b2:	f04f 32ff 	movle.w	r2, #4294967295
 80172b6:	fa02 f303 	lslle.w	r3, r2, r3
 80172ba:	f04f 0a00 	mov.w	sl, #0
 80172be:	bfcc      	ite	gt
 80172c0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80172c4:	ea03 0b01 	andle.w	fp, r3, r1
 80172c8:	2200      	movs	r2, #0
 80172ca:	2300      	movs	r3, #0
 80172cc:	4650      	mov	r0, sl
 80172ce:	4659      	mov	r1, fp
 80172d0:	f7e9 fbfa 	bl	8000ac8 <__aeabi_dcmpeq>
 80172d4:	2800      	cmp	r0, #0
 80172d6:	d1a4      	bne.n	8017222 <_strtod_l+0x57a>
 80172d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80172da:	9300      	str	r3, [sp, #0]
 80172dc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80172de:	462b      	mov	r3, r5
 80172e0:	463a      	mov	r2, r7
 80172e2:	4620      	mov	r0, r4
 80172e4:	f001 fe2e 	bl	8018f44 <__s2b>
 80172e8:	9009      	str	r0, [sp, #36]	; 0x24
 80172ea:	2800      	cmp	r0, #0
 80172ec:	f43f af24 	beq.w	8017138 <_strtod_l+0x490>
 80172f0:	9b07      	ldr	r3, [sp, #28]
 80172f2:	1b9e      	subs	r6, r3, r6
 80172f4:	9b08      	ldr	r3, [sp, #32]
 80172f6:	2b00      	cmp	r3, #0
 80172f8:	bfb4      	ite	lt
 80172fa:	4633      	movlt	r3, r6
 80172fc:	2300      	movge	r3, #0
 80172fe:	9310      	str	r3, [sp, #64]	; 0x40
 8017300:	9b08      	ldr	r3, [sp, #32]
 8017302:	2500      	movs	r5, #0
 8017304:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017308:	9318      	str	r3, [sp, #96]	; 0x60
 801730a:	462e      	mov	r6, r5
 801730c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801730e:	4620      	mov	r0, r4
 8017310:	6859      	ldr	r1, [r3, #4]
 8017312:	f001 fd6b 	bl	8018dec <_Balloc>
 8017316:	9007      	str	r0, [sp, #28]
 8017318:	2800      	cmp	r0, #0
 801731a:	f43f af11 	beq.w	8017140 <_strtod_l+0x498>
 801731e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017320:	691a      	ldr	r2, [r3, #16]
 8017322:	3202      	adds	r2, #2
 8017324:	f103 010c 	add.w	r1, r3, #12
 8017328:	0092      	lsls	r2, r2, #2
 801732a:	300c      	adds	r0, #12
 801732c:	f7fe fce0 	bl	8015cf0 <memcpy>
 8017330:	ec4b ab10 	vmov	d0, sl, fp
 8017334:	aa20      	add	r2, sp, #128	; 0x80
 8017336:	a91f      	add	r1, sp, #124	; 0x7c
 8017338:	4620      	mov	r0, r4
 801733a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801733e:	f002 f93d 	bl	80195bc <__d2b>
 8017342:	901e      	str	r0, [sp, #120]	; 0x78
 8017344:	2800      	cmp	r0, #0
 8017346:	f43f aefb 	beq.w	8017140 <_strtod_l+0x498>
 801734a:	2101      	movs	r1, #1
 801734c:	4620      	mov	r0, r4
 801734e:	f001 fe93 	bl	8019078 <__i2b>
 8017352:	4606      	mov	r6, r0
 8017354:	2800      	cmp	r0, #0
 8017356:	f43f aef3 	beq.w	8017140 <_strtod_l+0x498>
 801735a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801735c:	9904      	ldr	r1, [sp, #16]
 801735e:	2b00      	cmp	r3, #0
 8017360:	bfab      	itete	ge
 8017362:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8017364:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8017366:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8017368:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801736c:	bfac      	ite	ge
 801736e:	eb03 0902 	addge.w	r9, r3, r2
 8017372:	1ad7      	sublt	r7, r2, r3
 8017374:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017376:	eba3 0801 	sub.w	r8, r3, r1
 801737a:	4490      	add	r8, r2
 801737c:	4ba3      	ldr	r3, [pc, #652]	; (801760c <_strtod_l+0x964>)
 801737e:	f108 38ff 	add.w	r8, r8, #4294967295
 8017382:	4598      	cmp	r8, r3
 8017384:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8017388:	f280 80cc 	bge.w	8017524 <_strtod_l+0x87c>
 801738c:	eba3 0308 	sub.w	r3, r3, r8
 8017390:	2b1f      	cmp	r3, #31
 8017392:	eba2 0203 	sub.w	r2, r2, r3
 8017396:	f04f 0101 	mov.w	r1, #1
 801739a:	f300 80b6 	bgt.w	801750a <_strtod_l+0x862>
 801739e:	fa01 f303 	lsl.w	r3, r1, r3
 80173a2:	9311      	str	r3, [sp, #68]	; 0x44
 80173a4:	2300      	movs	r3, #0
 80173a6:	930c      	str	r3, [sp, #48]	; 0x30
 80173a8:	eb09 0802 	add.w	r8, r9, r2
 80173ac:	9b04      	ldr	r3, [sp, #16]
 80173ae:	45c1      	cmp	r9, r8
 80173b0:	4417      	add	r7, r2
 80173b2:	441f      	add	r7, r3
 80173b4:	464b      	mov	r3, r9
 80173b6:	bfa8      	it	ge
 80173b8:	4643      	movge	r3, r8
 80173ba:	42bb      	cmp	r3, r7
 80173bc:	bfa8      	it	ge
 80173be:	463b      	movge	r3, r7
 80173c0:	2b00      	cmp	r3, #0
 80173c2:	bfc2      	ittt	gt
 80173c4:	eba8 0803 	subgt.w	r8, r8, r3
 80173c8:	1aff      	subgt	r7, r7, r3
 80173ca:	eba9 0903 	subgt.w	r9, r9, r3
 80173ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80173d0:	2b00      	cmp	r3, #0
 80173d2:	dd17      	ble.n	8017404 <_strtod_l+0x75c>
 80173d4:	4631      	mov	r1, r6
 80173d6:	461a      	mov	r2, r3
 80173d8:	4620      	mov	r0, r4
 80173da:	f001 ff09 	bl	80191f0 <__pow5mult>
 80173de:	4606      	mov	r6, r0
 80173e0:	2800      	cmp	r0, #0
 80173e2:	f43f aead 	beq.w	8017140 <_strtod_l+0x498>
 80173e6:	4601      	mov	r1, r0
 80173e8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80173ea:	4620      	mov	r0, r4
 80173ec:	f001 fe5a 	bl	80190a4 <__multiply>
 80173f0:	900f      	str	r0, [sp, #60]	; 0x3c
 80173f2:	2800      	cmp	r0, #0
 80173f4:	f43f aea4 	beq.w	8017140 <_strtod_l+0x498>
 80173f8:	991e      	ldr	r1, [sp, #120]	; 0x78
 80173fa:	4620      	mov	r0, r4
 80173fc:	f001 fd36 	bl	8018e6c <_Bfree>
 8017400:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017402:	931e      	str	r3, [sp, #120]	; 0x78
 8017404:	f1b8 0f00 	cmp.w	r8, #0
 8017408:	f300 8091 	bgt.w	801752e <_strtod_l+0x886>
 801740c:	9b08      	ldr	r3, [sp, #32]
 801740e:	2b00      	cmp	r3, #0
 8017410:	dd08      	ble.n	8017424 <_strtod_l+0x77c>
 8017412:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8017414:	9907      	ldr	r1, [sp, #28]
 8017416:	4620      	mov	r0, r4
 8017418:	f001 feea 	bl	80191f0 <__pow5mult>
 801741c:	9007      	str	r0, [sp, #28]
 801741e:	2800      	cmp	r0, #0
 8017420:	f43f ae8e 	beq.w	8017140 <_strtod_l+0x498>
 8017424:	2f00      	cmp	r7, #0
 8017426:	dd08      	ble.n	801743a <_strtod_l+0x792>
 8017428:	9907      	ldr	r1, [sp, #28]
 801742a:	463a      	mov	r2, r7
 801742c:	4620      	mov	r0, r4
 801742e:	f001 ff39 	bl	80192a4 <__lshift>
 8017432:	9007      	str	r0, [sp, #28]
 8017434:	2800      	cmp	r0, #0
 8017436:	f43f ae83 	beq.w	8017140 <_strtod_l+0x498>
 801743a:	f1b9 0f00 	cmp.w	r9, #0
 801743e:	dd08      	ble.n	8017452 <_strtod_l+0x7aa>
 8017440:	4631      	mov	r1, r6
 8017442:	464a      	mov	r2, r9
 8017444:	4620      	mov	r0, r4
 8017446:	f001 ff2d 	bl	80192a4 <__lshift>
 801744a:	4606      	mov	r6, r0
 801744c:	2800      	cmp	r0, #0
 801744e:	f43f ae77 	beq.w	8017140 <_strtod_l+0x498>
 8017452:	9a07      	ldr	r2, [sp, #28]
 8017454:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017456:	4620      	mov	r0, r4
 8017458:	f001 ffac 	bl	80193b4 <__mdiff>
 801745c:	4605      	mov	r5, r0
 801745e:	2800      	cmp	r0, #0
 8017460:	f43f ae6e 	beq.w	8017140 <_strtod_l+0x498>
 8017464:	68c3      	ldr	r3, [r0, #12]
 8017466:	930f      	str	r3, [sp, #60]	; 0x3c
 8017468:	2300      	movs	r3, #0
 801746a:	60c3      	str	r3, [r0, #12]
 801746c:	4631      	mov	r1, r6
 801746e:	f001 ff85 	bl	801937c <__mcmp>
 8017472:	2800      	cmp	r0, #0
 8017474:	da65      	bge.n	8017542 <_strtod_l+0x89a>
 8017476:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017478:	ea53 030a 	orrs.w	r3, r3, sl
 801747c:	f040 8087 	bne.w	801758e <_strtod_l+0x8e6>
 8017480:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017484:	2b00      	cmp	r3, #0
 8017486:	f040 8082 	bne.w	801758e <_strtod_l+0x8e6>
 801748a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801748e:	0d1b      	lsrs	r3, r3, #20
 8017490:	051b      	lsls	r3, r3, #20
 8017492:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8017496:	d97a      	bls.n	801758e <_strtod_l+0x8e6>
 8017498:	696b      	ldr	r3, [r5, #20]
 801749a:	b913      	cbnz	r3, 80174a2 <_strtod_l+0x7fa>
 801749c:	692b      	ldr	r3, [r5, #16]
 801749e:	2b01      	cmp	r3, #1
 80174a0:	dd75      	ble.n	801758e <_strtod_l+0x8e6>
 80174a2:	4629      	mov	r1, r5
 80174a4:	2201      	movs	r2, #1
 80174a6:	4620      	mov	r0, r4
 80174a8:	f001 fefc 	bl	80192a4 <__lshift>
 80174ac:	4631      	mov	r1, r6
 80174ae:	4605      	mov	r5, r0
 80174b0:	f001 ff64 	bl	801937c <__mcmp>
 80174b4:	2800      	cmp	r0, #0
 80174b6:	dd6a      	ble.n	801758e <_strtod_l+0x8e6>
 80174b8:	9904      	ldr	r1, [sp, #16]
 80174ba:	4a55      	ldr	r2, [pc, #340]	; (8017610 <_strtod_l+0x968>)
 80174bc:	465b      	mov	r3, fp
 80174be:	2900      	cmp	r1, #0
 80174c0:	f000 8085 	beq.w	80175ce <_strtod_l+0x926>
 80174c4:	ea02 010b 	and.w	r1, r2, fp
 80174c8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80174cc:	dc7f      	bgt.n	80175ce <_strtod_l+0x926>
 80174ce:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80174d2:	f77f aeaa 	ble.w	801722a <_strtod_l+0x582>
 80174d6:	4a4f      	ldr	r2, [pc, #316]	; (8017614 <_strtod_l+0x96c>)
 80174d8:	2300      	movs	r3, #0
 80174da:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80174de:	4650      	mov	r0, sl
 80174e0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80174e4:	4659      	mov	r1, fp
 80174e6:	f7e9 f887 	bl	80005f8 <__aeabi_dmul>
 80174ea:	460b      	mov	r3, r1
 80174ec:	4303      	orrs	r3, r0
 80174ee:	bf08      	it	eq
 80174f0:	2322      	moveq	r3, #34	; 0x22
 80174f2:	4682      	mov	sl, r0
 80174f4:	468b      	mov	fp, r1
 80174f6:	bf08      	it	eq
 80174f8:	6023      	streq	r3, [r4, #0]
 80174fa:	e62b      	b.n	8017154 <_strtod_l+0x4ac>
 80174fc:	f04f 32ff 	mov.w	r2, #4294967295
 8017500:	fa02 f303 	lsl.w	r3, r2, r3
 8017504:	ea03 0a0a 	and.w	sl, r3, sl
 8017508:	e6de      	b.n	80172c8 <_strtod_l+0x620>
 801750a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801750e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8017512:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8017516:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801751a:	fa01 f308 	lsl.w	r3, r1, r8
 801751e:	930c      	str	r3, [sp, #48]	; 0x30
 8017520:	9111      	str	r1, [sp, #68]	; 0x44
 8017522:	e741      	b.n	80173a8 <_strtod_l+0x700>
 8017524:	2300      	movs	r3, #0
 8017526:	930c      	str	r3, [sp, #48]	; 0x30
 8017528:	2301      	movs	r3, #1
 801752a:	9311      	str	r3, [sp, #68]	; 0x44
 801752c:	e73c      	b.n	80173a8 <_strtod_l+0x700>
 801752e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017530:	4642      	mov	r2, r8
 8017532:	4620      	mov	r0, r4
 8017534:	f001 feb6 	bl	80192a4 <__lshift>
 8017538:	901e      	str	r0, [sp, #120]	; 0x78
 801753a:	2800      	cmp	r0, #0
 801753c:	f47f af66 	bne.w	801740c <_strtod_l+0x764>
 8017540:	e5fe      	b.n	8017140 <_strtod_l+0x498>
 8017542:	465f      	mov	r7, fp
 8017544:	d16e      	bne.n	8017624 <_strtod_l+0x97c>
 8017546:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017548:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801754c:	b342      	cbz	r2, 80175a0 <_strtod_l+0x8f8>
 801754e:	4a32      	ldr	r2, [pc, #200]	; (8017618 <_strtod_l+0x970>)
 8017550:	4293      	cmp	r3, r2
 8017552:	d128      	bne.n	80175a6 <_strtod_l+0x8fe>
 8017554:	9b04      	ldr	r3, [sp, #16]
 8017556:	4650      	mov	r0, sl
 8017558:	b1eb      	cbz	r3, 8017596 <_strtod_l+0x8ee>
 801755a:	4a2d      	ldr	r2, [pc, #180]	; (8017610 <_strtod_l+0x968>)
 801755c:	403a      	ands	r2, r7
 801755e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8017562:	f04f 31ff 	mov.w	r1, #4294967295
 8017566:	d819      	bhi.n	801759c <_strtod_l+0x8f4>
 8017568:	0d12      	lsrs	r2, r2, #20
 801756a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801756e:	fa01 f303 	lsl.w	r3, r1, r3
 8017572:	4298      	cmp	r0, r3
 8017574:	d117      	bne.n	80175a6 <_strtod_l+0x8fe>
 8017576:	4b29      	ldr	r3, [pc, #164]	; (801761c <_strtod_l+0x974>)
 8017578:	429f      	cmp	r7, r3
 801757a:	d102      	bne.n	8017582 <_strtod_l+0x8da>
 801757c:	3001      	adds	r0, #1
 801757e:	f43f addf 	beq.w	8017140 <_strtod_l+0x498>
 8017582:	4b23      	ldr	r3, [pc, #140]	; (8017610 <_strtod_l+0x968>)
 8017584:	403b      	ands	r3, r7
 8017586:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801758a:	f04f 0a00 	mov.w	sl, #0
 801758e:	9b04      	ldr	r3, [sp, #16]
 8017590:	2b00      	cmp	r3, #0
 8017592:	d1a0      	bne.n	80174d6 <_strtod_l+0x82e>
 8017594:	e5de      	b.n	8017154 <_strtod_l+0x4ac>
 8017596:	f04f 33ff 	mov.w	r3, #4294967295
 801759a:	e7ea      	b.n	8017572 <_strtod_l+0x8ca>
 801759c:	460b      	mov	r3, r1
 801759e:	e7e8      	b.n	8017572 <_strtod_l+0x8ca>
 80175a0:	ea53 030a 	orrs.w	r3, r3, sl
 80175a4:	d088      	beq.n	80174b8 <_strtod_l+0x810>
 80175a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80175a8:	b1db      	cbz	r3, 80175e2 <_strtod_l+0x93a>
 80175aa:	423b      	tst	r3, r7
 80175ac:	d0ef      	beq.n	801758e <_strtod_l+0x8e6>
 80175ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80175b0:	9a04      	ldr	r2, [sp, #16]
 80175b2:	4650      	mov	r0, sl
 80175b4:	4659      	mov	r1, fp
 80175b6:	b1c3      	cbz	r3, 80175ea <_strtod_l+0x942>
 80175b8:	f7ff fb58 	bl	8016c6c <sulp>
 80175bc:	4602      	mov	r2, r0
 80175be:	460b      	mov	r3, r1
 80175c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80175c4:	f7e8 fe62 	bl	800028c <__adddf3>
 80175c8:	4682      	mov	sl, r0
 80175ca:	468b      	mov	fp, r1
 80175cc:	e7df      	b.n	801758e <_strtod_l+0x8e6>
 80175ce:	4013      	ands	r3, r2
 80175d0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80175d4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80175d8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80175dc:	f04f 3aff 	mov.w	sl, #4294967295
 80175e0:	e7d5      	b.n	801758e <_strtod_l+0x8e6>
 80175e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80175e4:	ea13 0f0a 	tst.w	r3, sl
 80175e8:	e7e0      	b.n	80175ac <_strtod_l+0x904>
 80175ea:	f7ff fb3f 	bl	8016c6c <sulp>
 80175ee:	4602      	mov	r2, r0
 80175f0:	460b      	mov	r3, r1
 80175f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80175f6:	f7e8 fe47 	bl	8000288 <__aeabi_dsub>
 80175fa:	2200      	movs	r2, #0
 80175fc:	2300      	movs	r3, #0
 80175fe:	4682      	mov	sl, r0
 8017600:	468b      	mov	fp, r1
 8017602:	f7e9 fa61 	bl	8000ac8 <__aeabi_dcmpeq>
 8017606:	2800      	cmp	r0, #0
 8017608:	d0c1      	beq.n	801758e <_strtod_l+0x8e6>
 801760a:	e60e      	b.n	801722a <_strtod_l+0x582>
 801760c:	fffffc02 	.word	0xfffffc02
 8017610:	7ff00000 	.word	0x7ff00000
 8017614:	39500000 	.word	0x39500000
 8017618:	000fffff 	.word	0x000fffff
 801761c:	7fefffff 	.word	0x7fefffff
 8017620:	0801c2f0 	.word	0x0801c2f0
 8017624:	4631      	mov	r1, r6
 8017626:	4628      	mov	r0, r5
 8017628:	f002 f824 	bl	8019674 <__ratio>
 801762c:	ec59 8b10 	vmov	r8, r9, d0
 8017630:	ee10 0a10 	vmov	r0, s0
 8017634:	2200      	movs	r2, #0
 8017636:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801763a:	4649      	mov	r1, r9
 801763c:	f7e9 fa58 	bl	8000af0 <__aeabi_dcmple>
 8017640:	2800      	cmp	r0, #0
 8017642:	d07c      	beq.n	801773e <_strtod_l+0xa96>
 8017644:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017646:	2b00      	cmp	r3, #0
 8017648:	d04c      	beq.n	80176e4 <_strtod_l+0xa3c>
 801764a:	4b95      	ldr	r3, [pc, #596]	; (80178a0 <_strtod_l+0xbf8>)
 801764c:	2200      	movs	r2, #0
 801764e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8017652:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80178a0 <_strtod_l+0xbf8>
 8017656:	f04f 0800 	mov.w	r8, #0
 801765a:	4b92      	ldr	r3, [pc, #584]	; (80178a4 <_strtod_l+0xbfc>)
 801765c:	403b      	ands	r3, r7
 801765e:	9311      	str	r3, [sp, #68]	; 0x44
 8017660:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017662:	4b91      	ldr	r3, [pc, #580]	; (80178a8 <_strtod_l+0xc00>)
 8017664:	429a      	cmp	r2, r3
 8017666:	f040 80b2 	bne.w	80177ce <_strtod_l+0xb26>
 801766a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801766e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017672:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8017676:	ec4b ab10 	vmov	d0, sl, fp
 801767a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801767e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017682:	f001 ff1f 	bl	80194c4 <__ulp>
 8017686:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801768a:	ec53 2b10 	vmov	r2, r3, d0
 801768e:	f7e8 ffb3 	bl	80005f8 <__aeabi_dmul>
 8017692:	4652      	mov	r2, sl
 8017694:	465b      	mov	r3, fp
 8017696:	f7e8 fdf9 	bl	800028c <__adddf3>
 801769a:	460b      	mov	r3, r1
 801769c:	4981      	ldr	r1, [pc, #516]	; (80178a4 <_strtod_l+0xbfc>)
 801769e:	4a83      	ldr	r2, [pc, #524]	; (80178ac <_strtod_l+0xc04>)
 80176a0:	4019      	ands	r1, r3
 80176a2:	4291      	cmp	r1, r2
 80176a4:	4682      	mov	sl, r0
 80176a6:	d95e      	bls.n	8017766 <_strtod_l+0xabe>
 80176a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80176aa:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80176ae:	4293      	cmp	r3, r2
 80176b0:	d103      	bne.n	80176ba <_strtod_l+0xa12>
 80176b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80176b4:	3301      	adds	r3, #1
 80176b6:	f43f ad43 	beq.w	8017140 <_strtod_l+0x498>
 80176ba:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80178b8 <_strtod_l+0xc10>
 80176be:	f04f 3aff 	mov.w	sl, #4294967295
 80176c2:	991e      	ldr	r1, [sp, #120]	; 0x78
 80176c4:	4620      	mov	r0, r4
 80176c6:	f001 fbd1 	bl	8018e6c <_Bfree>
 80176ca:	9907      	ldr	r1, [sp, #28]
 80176cc:	4620      	mov	r0, r4
 80176ce:	f001 fbcd 	bl	8018e6c <_Bfree>
 80176d2:	4631      	mov	r1, r6
 80176d4:	4620      	mov	r0, r4
 80176d6:	f001 fbc9 	bl	8018e6c <_Bfree>
 80176da:	4629      	mov	r1, r5
 80176dc:	4620      	mov	r0, r4
 80176de:	f001 fbc5 	bl	8018e6c <_Bfree>
 80176e2:	e613      	b.n	801730c <_strtod_l+0x664>
 80176e4:	f1ba 0f00 	cmp.w	sl, #0
 80176e8:	d11b      	bne.n	8017722 <_strtod_l+0xa7a>
 80176ea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80176ee:	b9f3      	cbnz	r3, 801772e <_strtod_l+0xa86>
 80176f0:	4b6b      	ldr	r3, [pc, #428]	; (80178a0 <_strtod_l+0xbf8>)
 80176f2:	2200      	movs	r2, #0
 80176f4:	4640      	mov	r0, r8
 80176f6:	4649      	mov	r1, r9
 80176f8:	f7e9 f9f0 	bl	8000adc <__aeabi_dcmplt>
 80176fc:	b9d0      	cbnz	r0, 8017734 <_strtod_l+0xa8c>
 80176fe:	4640      	mov	r0, r8
 8017700:	4649      	mov	r1, r9
 8017702:	4b6b      	ldr	r3, [pc, #428]	; (80178b0 <_strtod_l+0xc08>)
 8017704:	2200      	movs	r2, #0
 8017706:	f7e8 ff77 	bl	80005f8 <__aeabi_dmul>
 801770a:	4680      	mov	r8, r0
 801770c:	4689      	mov	r9, r1
 801770e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8017712:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8017716:	931b      	str	r3, [sp, #108]	; 0x6c
 8017718:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801771c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8017720:	e79b      	b.n	801765a <_strtod_l+0x9b2>
 8017722:	f1ba 0f01 	cmp.w	sl, #1
 8017726:	d102      	bne.n	801772e <_strtod_l+0xa86>
 8017728:	2f00      	cmp	r7, #0
 801772a:	f43f ad7e 	beq.w	801722a <_strtod_l+0x582>
 801772e:	4b61      	ldr	r3, [pc, #388]	; (80178b4 <_strtod_l+0xc0c>)
 8017730:	2200      	movs	r2, #0
 8017732:	e78c      	b.n	801764e <_strtod_l+0x9a6>
 8017734:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80178b0 <_strtod_l+0xc08>
 8017738:	f04f 0800 	mov.w	r8, #0
 801773c:	e7e7      	b.n	801770e <_strtod_l+0xa66>
 801773e:	4b5c      	ldr	r3, [pc, #368]	; (80178b0 <_strtod_l+0xc08>)
 8017740:	4640      	mov	r0, r8
 8017742:	4649      	mov	r1, r9
 8017744:	2200      	movs	r2, #0
 8017746:	f7e8 ff57 	bl	80005f8 <__aeabi_dmul>
 801774a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801774c:	4680      	mov	r8, r0
 801774e:	4689      	mov	r9, r1
 8017750:	b933      	cbnz	r3, 8017760 <_strtod_l+0xab8>
 8017752:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017756:	9012      	str	r0, [sp, #72]	; 0x48
 8017758:	9313      	str	r3, [sp, #76]	; 0x4c
 801775a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801775e:	e7dd      	b.n	801771c <_strtod_l+0xa74>
 8017760:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8017764:	e7f9      	b.n	801775a <_strtod_l+0xab2>
 8017766:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801776a:	9b04      	ldr	r3, [sp, #16]
 801776c:	2b00      	cmp	r3, #0
 801776e:	d1a8      	bne.n	80176c2 <_strtod_l+0xa1a>
 8017770:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017774:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017776:	0d1b      	lsrs	r3, r3, #20
 8017778:	051b      	lsls	r3, r3, #20
 801777a:	429a      	cmp	r2, r3
 801777c:	d1a1      	bne.n	80176c2 <_strtod_l+0xa1a>
 801777e:	4640      	mov	r0, r8
 8017780:	4649      	mov	r1, r9
 8017782:	f7e9 fa99 	bl	8000cb8 <__aeabi_d2lz>
 8017786:	f7e8 ff09 	bl	800059c <__aeabi_l2d>
 801778a:	4602      	mov	r2, r0
 801778c:	460b      	mov	r3, r1
 801778e:	4640      	mov	r0, r8
 8017790:	4649      	mov	r1, r9
 8017792:	f7e8 fd79 	bl	8000288 <__aeabi_dsub>
 8017796:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017798:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801779c:	ea43 030a 	orr.w	r3, r3, sl
 80177a0:	4313      	orrs	r3, r2
 80177a2:	4680      	mov	r8, r0
 80177a4:	4689      	mov	r9, r1
 80177a6:	d053      	beq.n	8017850 <_strtod_l+0xba8>
 80177a8:	a335      	add	r3, pc, #212	; (adr r3, 8017880 <_strtod_l+0xbd8>)
 80177aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177ae:	f7e9 f995 	bl	8000adc <__aeabi_dcmplt>
 80177b2:	2800      	cmp	r0, #0
 80177b4:	f47f acce 	bne.w	8017154 <_strtod_l+0x4ac>
 80177b8:	a333      	add	r3, pc, #204	; (adr r3, 8017888 <_strtod_l+0xbe0>)
 80177ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177be:	4640      	mov	r0, r8
 80177c0:	4649      	mov	r1, r9
 80177c2:	f7e9 f9a9 	bl	8000b18 <__aeabi_dcmpgt>
 80177c6:	2800      	cmp	r0, #0
 80177c8:	f43f af7b 	beq.w	80176c2 <_strtod_l+0xa1a>
 80177cc:	e4c2      	b.n	8017154 <_strtod_l+0x4ac>
 80177ce:	9b04      	ldr	r3, [sp, #16]
 80177d0:	b333      	cbz	r3, 8017820 <_strtod_l+0xb78>
 80177d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80177d4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80177d8:	d822      	bhi.n	8017820 <_strtod_l+0xb78>
 80177da:	a32d      	add	r3, pc, #180	; (adr r3, 8017890 <_strtod_l+0xbe8>)
 80177dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177e0:	4640      	mov	r0, r8
 80177e2:	4649      	mov	r1, r9
 80177e4:	f7e9 f984 	bl	8000af0 <__aeabi_dcmple>
 80177e8:	b1a0      	cbz	r0, 8017814 <_strtod_l+0xb6c>
 80177ea:	4649      	mov	r1, r9
 80177ec:	4640      	mov	r0, r8
 80177ee:	f7e9 f9db 	bl	8000ba8 <__aeabi_d2uiz>
 80177f2:	2801      	cmp	r0, #1
 80177f4:	bf38      	it	cc
 80177f6:	2001      	movcc	r0, #1
 80177f8:	f7e8 fe84 	bl	8000504 <__aeabi_ui2d>
 80177fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80177fe:	4680      	mov	r8, r0
 8017800:	4689      	mov	r9, r1
 8017802:	bb13      	cbnz	r3, 801784a <_strtod_l+0xba2>
 8017804:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017808:	9014      	str	r0, [sp, #80]	; 0x50
 801780a:	9315      	str	r3, [sp, #84]	; 0x54
 801780c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8017810:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8017814:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017816:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017818:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801781c:	1a9b      	subs	r3, r3, r2
 801781e:	930d      	str	r3, [sp, #52]	; 0x34
 8017820:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017824:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8017828:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801782c:	f001 fe4a 	bl	80194c4 <__ulp>
 8017830:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017834:	ec53 2b10 	vmov	r2, r3, d0
 8017838:	f7e8 fede 	bl	80005f8 <__aeabi_dmul>
 801783c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017840:	f7e8 fd24 	bl	800028c <__adddf3>
 8017844:	4682      	mov	sl, r0
 8017846:	468b      	mov	fp, r1
 8017848:	e78f      	b.n	801776a <_strtod_l+0xac2>
 801784a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801784e:	e7dd      	b.n	801780c <_strtod_l+0xb64>
 8017850:	a311      	add	r3, pc, #68	; (adr r3, 8017898 <_strtod_l+0xbf0>)
 8017852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017856:	f7e9 f941 	bl	8000adc <__aeabi_dcmplt>
 801785a:	e7b4      	b.n	80177c6 <_strtod_l+0xb1e>
 801785c:	2300      	movs	r3, #0
 801785e:	930e      	str	r3, [sp, #56]	; 0x38
 8017860:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8017862:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017864:	6013      	str	r3, [r2, #0]
 8017866:	f7ff ba65 	b.w	8016d34 <_strtod_l+0x8c>
 801786a:	2b65      	cmp	r3, #101	; 0x65
 801786c:	f43f ab5d 	beq.w	8016f2a <_strtod_l+0x282>
 8017870:	2b45      	cmp	r3, #69	; 0x45
 8017872:	f43f ab5a 	beq.w	8016f2a <_strtod_l+0x282>
 8017876:	2201      	movs	r2, #1
 8017878:	f7ff bb92 	b.w	8016fa0 <_strtod_l+0x2f8>
 801787c:	f3af 8000 	nop.w
 8017880:	94a03595 	.word	0x94a03595
 8017884:	3fdfffff 	.word	0x3fdfffff
 8017888:	35afe535 	.word	0x35afe535
 801788c:	3fe00000 	.word	0x3fe00000
 8017890:	ffc00000 	.word	0xffc00000
 8017894:	41dfffff 	.word	0x41dfffff
 8017898:	94a03595 	.word	0x94a03595
 801789c:	3fcfffff 	.word	0x3fcfffff
 80178a0:	3ff00000 	.word	0x3ff00000
 80178a4:	7ff00000 	.word	0x7ff00000
 80178a8:	7fe00000 	.word	0x7fe00000
 80178ac:	7c9fffff 	.word	0x7c9fffff
 80178b0:	3fe00000 	.word	0x3fe00000
 80178b4:	bff00000 	.word	0xbff00000
 80178b8:	7fefffff 	.word	0x7fefffff

080178bc <_strtod_r>:
 80178bc:	4b01      	ldr	r3, [pc, #4]	; (80178c4 <_strtod_r+0x8>)
 80178be:	f7ff b9f3 	b.w	8016ca8 <_strtod_l>
 80178c2:	bf00      	nop
 80178c4:	20002274 	.word	0x20002274

080178c8 <_strtol_l.isra.0>:
 80178c8:	2b01      	cmp	r3, #1
 80178ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80178ce:	d001      	beq.n	80178d4 <_strtol_l.isra.0+0xc>
 80178d0:	2b24      	cmp	r3, #36	; 0x24
 80178d2:	d906      	bls.n	80178e2 <_strtol_l.isra.0+0x1a>
 80178d4:	f7fe f9d2 	bl	8015c7c <__errno>
 80178d8:	2316      	movs	r3, #22
 80178da:	6003      	str	r3, [r0, #0]
 80178dc:	2000      	movs	r0, #0
 80178de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80178e2:	4f3a      	ldr	r7, [pc, #232]	; (80179cc <_strtol_l.isra.0+0x104>)
 80178e4:	468e      	mov	lr, r1
 80178e6:	4676      	mov	r6, lr
 80178e8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80178ec:	5de5      	ldrb	r5, [r4, r7]
 80178ee:	f015 0508 	ands.w	r5, r5, #8
 80178f2:	d1f8      	bne.n	80178e6 <_strtol_l.isra.0+0x1e>
 80178f4:	2c2d      	cmp	r4, #45	; 0x2d
 80178f6:	d134      	bne.n	8017962 <_strtol_l.isra.0+0x9a>
 80178f8:	f89e 4000 	ldrb.w	r4, [lr]
 80178fc:	f04f 0801 	mov.w	r8, #1
 8017900:	f106 0e02 	add.w	lr, r6, #2
 8017904:	2b00      	cmp	r3, #0
 8017906:	d05c      	beq.n	80179c2 <_strtol_l.isra.0+0xfa>
 8017908:	2b10      	cmp	r3, #16
 801790a:	d10c      	bne.n	8017926 <_strtol_l.isra.0+0x5e>
 801790c:	2c30      	cmp	r4, #48	; 0x30
 801790e:	d10a      	bne.n	8017926 <_strtol_l.isra.0+0x5e>
 8017910:	f89e 4000 	ldrb.w	r4, [lr]
 8017914:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8017918:	2c58      	cmp	r4, #88	; 0x58
 801791a:	d14d      	bne.n	80179b8 <_strtol_l.isra.0+0xf0>
 801791c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8017920:	2310      	movs	r3, #16
 8017922:	f10e 0e02 	add.w	lr, lr, #2
 8017926:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801792a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801792e:	2600      	movs	r6, #0
 8017930:	fbbc f9f3 	udiv	r9, ip, r3
 8017934:	4635      	mov	r5, r6
 8017936:	fb03 ca19 	mls	sl, r3, r9, ip
 801793a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801793e:	2f09      	cmp	r7, #9
 8017940:	d818      	bhi.n	8017974 <_strtol_l.isra.0+0xac>
 8017942:	463c      	mov	r4, r7
 8017944:	42a3      	cmp	r3, r4
 8017946:	dd24      	ble.n	8017992 <_strtol_l.isra.0+0xca>
 8017948:	2e00      	cmp	r6, #0
 801794a:	db1f      	blt.n	801798c <_strtol_l.isra.0+0xc4>
 801794c:	45a9      	cmp	r9, r5
 801794e:	d31d      	bcc.n	801798c <_strtol_l.isra.0+0xc4>
 8017950:	d101      	bne.n	8017956 <_strtol_l.isra.0+0x8e>
 8017952:	45a2      	cmp	sl, r4
 8017954:	db1a      	blt.n	801798c <_strtol_l.isra.0+0xc4>
 8017956:	fb05 4503 	mla	r5, r5, r3, r4
 801795a:	2601      	movs	r6, #1
 801795c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8017960:	e7eb      	b.n	801793a <_strtol_l.isra.0+0x72>
 8017962:	2c2b      	cmp	r4, #43	; 0x2b
 8017964:	bf08      	it	eq
 8017966:	f89e 4000 	ldrbeq.w	r4, [lr]
 801796a:	46a8      	mov	r8, r5
 801796c:	bf08      	it	eq
 801796e:	f106 0e02 	addeq.w	lr, r6, #2
 8017972:	e7c7      	b.n	8017904 <_strtol_l.isra.0+0x3c>
 8017974:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8017978:	2f19      	cmp	r7, #25
 801797a:	d801      	bhi.n	8017980 <_strtol_l.isra.0+0xb8>
 801797c:	3c37      	subs	r4, #55	; 0x37
 801797e:	e7e1      	b.n	8017944 <_strtol_l.isra.0+0x7c>
 8017980:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8017984:	2f19      	cmp	r7, #25
 8017986:	d804      	bhi.n	8017992 <_strtol_l.isra.0+0xca>
 8017988:	3c57      	subs	r4, #87	; 0x57
 801798a:	e7db      	b.n	8017944 <_strtol_l.isra.0+0x7c>
 801798c:	f04f 36ff 	mov.w	r6, #4294967295
 8017990:	e7e4      	b.n	801795c <_strtol_l.isra.0+0x94>
 8017992:	2e00      	cmp	r6, #0
 8017994:	da05      	bge.n	80179a2 <_strtol_l.isra.0+0xda>
 8017996:	2322      	movs	r3, #34	; 0x22
 8017998:	6003      	str	r3, [r0, #0]
 801799a:	4665      	mov	r5, ip
 801799c:	b942      	cbnz	r2, 80179b0 <_strtol_l.isra.0+0xe8>
 801799e:	4628      	mov	r0, r5
 80179a0:	e79d      	b.n	80178de <_strtol_l.isra.0+0x16>
 80179a2:	f1b8 0f00 	cmp.w	r8, #0
 80179a6:	d000      	beq.n	80179aa <_strtol_l.isra.0+0xe2>
 80179a8:	426d      	negs	r5, r5
 80179aa:	2a00      	cmp	r2, #0
 80179ac:	d0f7      	beq.n	801799e <_strtol_l.isra.0+0xd6>
 80179ae:	b10e      	cbz	r6, 80179b4 <_strtol_l.isra.0+0xec>
 80179b0:	f10e 31ff 	add.w	r1, lr, #4294967295
 80179b4:	6011      	str	r1, [r2, #0]
 80179b6:	e7f2      	b.n	801799e <_strtol_l.isra.0+0xd6>
 80179b8:	2430      	movs	r4, #48	; 0x30
 80179ba:	2b00      	cmp	r3, #0
 80179bc:	d1b3      	bne.n	8017926 <_strtol_l.isra.0+0x5e>
 80179be:	2308      	movs	r3, #8
 80179c0:	e7b1      	b.n	8017926 <_strtol_l.isra.0+0x5e>
 80179c2:	2c30      	cmp	r4, #48	; 0x30
 80179c4:	d0a4      	beq.n	8017910 <_strtol_l.isra.0+0x48>
 80179c6:	230a      	movs	r3, #10
 80179c8:	e7ad      	b.n	8017926 <_strtol_l.isra.0+0x5e>
 80179ca:	bf00      	nop
 80179cc:	0801c319 	.word	0x0801c319

080179d0 <_strtol_r>:
 80179d0:	f7ff bf7a 	b.w	80178c8 <_strtol_l.isra.0>

080179d4 <quorem>:
 80179d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179d8:	6903      	ldr	r3, [r0, #16]
 80179da:	690c      	ldr	r4, [r1, #16]
 80179dc:	42a3      	cmp	r3, r4
 80179de:	4607      	mov	r7, r0
 80179e0:	f2c0 8081 	blt.w	8017ae6 <quorem+0x112>
 80179e4:	3c01      	subs	r4, #1
 80179e6:	f101 0814 	add.w	r8, r1, #20
 80179ea:	f100 0514 	add.w	r5, r0, #20
 80179ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80179f2:	9301      	str	r3, [sp, #4]
 80179f4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80179f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80179fc:	3301      	adds	r3, #1
 80179fe:	429a      	cmp	r2, r3
 8017a00:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8017a04:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8017a08:	fbb2 f6f3 	udiv	r6, r2, r3
 8017a0c:	d331      	bcc.n	8017a72 <quorem+0x9e>
 8017a0e:	f04f 0e00 	mov.w	lr, #0
 8017a12:	4640      	mov	r0, r8
 8017a14:	46ac      	mov	ip, r5
 8017a16:	46f2      	mov	sl, lr
 8017a18:	f850 2b04 	ldr.w	r2, [r0], #4
 8017a1c:	b293      	uxth	r3, r2
 8017a1e:	fb06 e303 	mla	r3, r6, r3, lr
 8017a22:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8017a26:	b29b      	uxth	r3, r3
 8017a28:	ebaa 0303 	sub.w	r3, sl, r3
 8017a2c:	0c12      	lsrs	r2, r2, #16
 8017a2e:	f8dc a000 	ldr.w	sl, [ip]
 8017a32:	fb06 e202 	mla	r2, r6, r2, lr
 8017a36:	fa13 f38a 	uxtah	r3, r3, sl
 8017a3a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017a3e:	fa1f fa82 	uxth.w	sl, r2
 8017a42:	f8dc 2000 	ldr.w	r2, [ip]
 8017a46:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8017a4a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017a4e:	b29b      	uxth	r3, r3
 8017a50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017a54:	4581      	cmp	r9, r0
 8017a56:	f84c 3b04 	str.w	r3, [ip], #4
 8017a5a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8017a5e:	d2db      	bcs.n	8017a18 <quorem+0x44>
 8017a60:	f855 300b 	ldr.w	r3, [r5, fp]
 8017a64:	b92b      	cbnz	r3, 8017a72 <quorem+0x9e>
 8017a66:	9b01      	ldr	r3, [sp, #4]
 8017a68:	3b04      	subs	r3, #4
 8017a6a:	429d      	cmp	r5, r3
 8017a6c:	461a      	mov	r2, r3
 8017a6e:	d32e      	bcc.n	8017ace <quorem+0xfa>
 8017a70:	613c      	str	r4, [r7, #16]
 8017a72:	4638      	mov	r0, r7
 8017a74:	f001 fc82 	bl	801937c <__mcmp>
 8017a78:	2800      	cmp	r0, #0
 8017a7a:	db24      	blt.n	8017ac6 <quorem+0xf2>
 8017a7c:	3601      	adds	r6, #1
 8017a7e:	4628      	mov	r0, r5
 8017a80:	f04f 0c00 	mov.w	ip, #0
 8017a84:	f858 2b04 	ldr.w	r2, [r8], #4
 8017a88:	f8d0 e000 	ldr.w	lr, [r0]
 8017a8c:	b293      	uxth	r3, r2
 8017a8e:	ebac 0303 	sub.w	r3, ip, r3
 8017a92:	0c12      	lsrs	r2, r2, #16
 8017a94:	fa13 f38e 	uxtah	r3, r3, lr
 8017a98:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8017a9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017aa0:	b29b      	uxth	r3, r3
 8017aa2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017aa6:	45c1      	cmp	r9, r8
 8017aa8:	f840 3b04 	str.w	r3, [r0], #4
 8017aac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017ab0:	d2e8      	bcs.n	8017a84 <quorem+0xb0>
 8017ab2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017ab6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017aba:	b922      	cbnz	r2, 8017ac6 <quorem+0xf2>
 8017abc:	3b04      	subs	r3, #4
 8017abe:	429d      	cmp	r5, r3
 8017ac0:	461a      	mov	r2, r3
 8017ac2:	d30a      	bcc.n	8017ada <quorem+0x106>
 8017ac4:	613c      	str	r4, [r7, #16]
 8017ac6:	4630      	mov	r0, r6
 8017ac8:	b003      	add	sp, #12
 8017aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ace:	6812      	ldr	r2, [r2, #0]
 8017ad0:	3b04      	subs	r3, #4
 8017ad2:	2a00      	cmp	r2, #0
 8017ad4:	d1cc      	bne.n	8017a70 <quorem+0x9c>
 8017ad6:	3c01      	subs	r4, #1
 8017ad8:	e7c7      	b.n	8017a6a <quorem+0x96>
 8017ada:	6812      	ldr	r2, [r2, #0]
 8017adc:	3b04      	subs	r3, #4
 8017ade:	2a00      	cmp	r2, #0
 8017ae0:	d1f0      	bne.n	8017ac4 <quorem+0xf0>
 8017ae2:	3c01      	subs	r4, #1
 8017ae4:	e7eb      	b.n	8017abe <quorem+0xea>
 8017ae6:	2000      	movs	r0, #0
 8017ae8:	e7ee      	b.n	8017ac8 <quorem+0xf4>
 8017aea:	0000      	movs	r0, r0
 8017aec:	0000      	movs	r0, r0
	...

08017af0 <_dtoa_r>:
 8017af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017af4:	ed2d 8b02 	vpush	{d8}
 8017af8:	ec57 6b10 	vmov	r6, r7, d0
 8017afc:	b095      	sub	sp, #84	; 0x54
 8017afe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017b00:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017b04:	9105      	str	r1, [sp, #20]
 8017b06:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8017b0a:	4604      	mov	r4, r0
 8017b0c:	9209      	str	r2, [sp, #36]	; 0x24
 8017b0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8017b10:	b975      	cbnz	r5, 8017b30 <_dtoa_r+0x40>
 8017b12:	2010      	movs	r0, #16
 8017b14:	f7fe f8dc 	bl	8015cd0 <malloc>
 8017b18:	4602      	mov	r2, r0
 8017b1a:	6260      	str	r0, [r4, #36]	; 0x24
 8017b1c:	b920      	cbnz	r0, 8017b28 <_dtoa_r+0x38>
 8017b1e:	4bb2      	ldr	r3, [pc, #712]	; (8017de8 <_dtoa_r+0x2f8>)
 8017b20:	21ea      	movs	r1, #234	; 0xea
 8017b22:	48b2      	ldr	r0, [pc, #712]	; (8017dec <_dtoa_r+0x2fc>)
 8017b24:	f001 ffb0 	bl	8019a88 <__assert_func>
 8017b28:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017b2c:	6005      	str	r5, [r0, #0]
 8017b2e:	60c5      	str	r5, [r0, #12]
 8017b30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017b32:	6819      	ldr	r1, [r3, #0]
 8017b34:	b151      	cbz	r1, 8017b4c <_dtoa_r+0x5c>
 8017b36:	685a      	ldr	r2, [r3, #4]
 8017b38:	604a      	str	r2, [r1, #4]
 8017b3a:	2301      	movs	r3, #1
 8017b3c:	4093      	lsls	r3, r2
 8017b3e:	608b      	str	r3, [r1, #8]
 8017b40:	4620      	mov	r0, r4
 8017b42:	f001 f993 	bl	8018e6c <_Bfree>
 8017b46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017b48:	2200      	movs	r2, #0
 8017b4a:	601a      	str	r2, [r3, #0]
 8017b4c:	1e3b      	subs	r3, r7, #0
 8017b4e:	bfb9      	ittee	lt
 8017b50:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017b54:	9303      	strlt	r3, [sp, #12]
 8017b56:	2300      	movge	r3, #0
 8017b58:	f8c8 3000 	strge.w	r3, [r8]
 8017b5c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8017b60:	4ba3      	ldr	r3, [pc, #652]	; (8017df0 <_dtoa_r+0x300>)
 8017b62:	bfbc      	itt	lt
 8017b64:	2201      	movlt	r2, #1
 8017b66:	f8c8 2000 	strlt.w	r2, [r8]
 8017b6a:	ea33 0309 	bics.w	r3, r3, r9
 8017b6e:	d11b      	bne.n	8017ba8 <_dtoa_r+0xb8>
 8017b70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017b72:	f242 730f 	movw	r3, #9999	; 0x270f
 8017b76:	6013      	str	r3, [r2, #0]
 8017b78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017b7c:	4333      	orrs	r3, r6
 8017b7e:	f000 857a 	beq.w	8018676 <_dtoa_r+0xb86>
 8017b82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017b84:	b963      	cbnz	r3, 8017ba0 <_dtoa_r+0xb0>
 8017b86:	4b9b      	ldr	r3, [pc, #620]	; (8017df4 <_dtoa_r+0x304>)
 8017b88:	e024      	b.n	8017bd4 <_dtoa_r+0xe4>
 8017b8a:	4b9b      	ldr	r3, [pc, #620]	; (8017df8 <_dtoa_r+0x308>)
 8017b8c:	9300      	str	r3, [sp, #0]
 8017b8e:	3308      	adds	r3, #8
 8017b90:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017b92:	6013      	str	r3, [r2, #0]
 8017b94:	9800      	ldr	r0, [sp, #0]
 8017b96:	b015      	add	sp, #84	; 0x54
 8017b98:	ecbd 8b02 	vpop	{d8}
 8017b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ba0:	4b94      	ldr	r3, [pc, #592]	; (8017df4 <_dtoa_r+0x304>)
 8017ba2:	9300      	str	r3, [sp, #0]
 8017ba4:	3303      	adds	r3, #3
 8017ba6:	e7f3      	b.n	8017b90 <_dtoa_r+0xa0>
 8017ba8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017bac:	2200      	movs	r2, #0
 8017bae:	ec51 0b17 	vmov	r0, r1, d7
 8017bb2:	2300      	movs	r3, #0
 8017bb4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8017bb8:	f7e8 ff86 	bl	8000ac8 <__aeabi_dcmpeq>
 8017bbc:	4680      	mov	r8, r0
 8017bbe:	b158      	cbz	r0, 8017bd8 <_dtoa_r+0xe8>
 8017bc0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017bc2:	2301      	movs	r3, #1
 8017bc4:	6013      	str	r3, [r2, #0]
 8017bc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017bc8:	2b00      	cmp	r3, #0
 8017bca:	f000 8551 	beq.w	8018670 <_dtoa_r+0xb80>
 8017bce:	488b      	ldr	r0, [pc, #556]	; (8017dfc <_dtoa_r+0x30c>)
 8017bd0:	6018      	str	r0, [r3, #0]
 8017bd2:	1e43      	subs	r3, r0, #1
 8017bd4:	9300      	str	r3, [sp, #0]
 8017bd6:	e7dd      	b.n	8017b94 <_dtoa_r+0xa4>
 8017bd8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8017bdc:	aa12      	add	r2, sp, #72	; 0x48
 8017bde:	a913      	add	r1, sp, #76	; 0x4c
 8017be0:	4620      	mov	r0, r4
 8017be2:	f001 fceb 	bl	80195bc <__d2b>
 8017be6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8017bea:	4683      	mov	fp, r0
 8017bec:	2d00      	cmp	r5, #0
 8017bee:	d07c      	beq.n	8017cea <_dtoa_r+0x1fa>
 8017bf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017bf2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8017bf6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017bfa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8017bfe:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8017c02:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8017c06:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8017c0a:	4b7d      	ldr	r3, [pc, #500]	; (8017e00 <_dtoa_r+0x310>)
 8017c0c:	2200      	movs	r2, #0
 8017c0e:	4630      	mov	r0, r6
 8017c10:	4639      	mov	r1, r7
 8017c12:	f7e8 fb39 	bl	8000288 <__aeabi_dsub>
 8017c16:	a36e      	add	r3, pc, #440	; (adr r3, 8017dd0 <_dtoa_r+0x2e0>)
 8017c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c1c:	f7e8 fcec 	bl	80005f8 <__aeabi_dmul>
 8017c20:	a36d      	add	r3, pc, #436	; (adr r3, 8017dd8 <_dtoa_r+0x2e8>)
 8017c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c26:	f7e8 fb31 	bl	800028c <__adddf3>
 8017c2a:	4606      	mov	r6, r0
 8017c2c:	4628      	mov	r0, r5
 8017c2e:	460f      	mov	r7, r1
 8017c30:	f7e8 fc78 	bl	8000524 <__aeabi_i2d>
 8017c34:	a36a      	add	r3, pc, #424	; (adr r3, 8017de0 <_dtoa_r+0x2f0>)
 8017c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c3a:	f7e8 fcdd 	bl	80005f8 <__aeabi_dmul>
 8017c3e:	4602      	mov	r2, r0
 8017c40:	460b      	mov	r3, r1
 8017c42:	4630      	mov	r0, r6
 8017c44:	4639      	mov	r1, r7
 8017c46:	f7e8 fb21 	bl	800028c <__adddf3>
 8017c4a:	4606      	mov	r6, r0
 8017c4c:	460f      	mov	r7, r1
 8017c4e:	f7e8 ff83 	bl	8000b58 <__aeabi_d2iz>
 8017c52:	2200      	movs	r2, #0
 8017c54:	4682      	mov	sl, r0
 8017c56:	2300      	movs	r3, #0
 8017c58:	4630      	mov	r0, r6
 8017c5a:	4639      	mov	r1, r7
 8017c5c:	f7e8 ff3e 	bl	8000adc <__aeabi_dcmplt>
 8017c60:	b148      	cbz	r0, 8017c76 <_dtoa_r+0x186>
 8017c62:	4650      	mov	r0, sl
 8017c64:	f7e8 fc5e 	bl	8000524 <__aeabi_i2d>
 8017c68:	4632      	mov	r2, r6
 8017c6a:	463b      	mov	r3, r7
 8017c6c:	f7e8 ff2c 	bl	8000ac8 <__aeabi_dcmpeq>
 8017c70:	b908      	cbnz	r0, 8017c76 <_dtoa_r+0x186>
 8017c72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017c76:	f1ba 0f16 	cmp.w	sl, #22
 8017c7a:	d854      	bhi.n	8017d26 <_dtoa_r+0x236>
 8017c7c:	4b61      	ldr	r3, [pc, #388]	; (8017e04 <_dtoa_r+0x314>)
 8017c7e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c86:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017c8a:	f7e8 ff27 	bl	8000adc <__aeabi_dcmplt>
 8017c8e:	2800      	cmp	r0, #0
 8017c90:	d04b      	beq.n	8017d2a <_dtoa_r+0x23a>
 8017c92:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017c96:	2300      	movs	r3, #0
 8017c98:	930e      	str	r3, [sp, #56]	; 0x38
 8017c9a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017c9c:	1b5d      	subs	r5, r3, r5
 8017c9e:	1e6b      	subs	r3, r5, #1
 8017ca0:	9304      	str	r3, [sp, #16]
 8017ca2:	bf43      	ittte	mi
 8017ca4:	2300      	movmi	r3, #0
 8017ca6:	f1c5 0801 	rsbmi	r8, r5, #1
 8017caa:	9304      	strmi	r3, [sp, #16]
 8017cac:	f04f 0800 	movpl.w	r8, #0
 8017cb0:	f1ba 0f00 	cmp.w	sl, #0
 8017cb4:	db3b      	blt.n	8017d2e <_dtoa_r+0x23e>
 8017cb6:	9b04      	ldr	r3, [sp, #16]
 8017cb8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8017cbc:	4453      	add	r3, sl
 8017cbe:	9304      	str	r3, [sp, #16]
 8017cc0:	2300      	movs	r3, #0
 8017cc2:	9306      	str	r3, [sp, #24]
 8017cc4:	9b05      	ldr	r3, [sp, #20]
 8017cc6:	2b09      	cmp	r3, #9
 8017cc8:	d869      	bhi.n	8017d9e <_dtoa_r+0x2ae>
 8017cca:	2b05      	cmp	r3, #5
 8017ccc:	bfc4      	itt	gt
 8017cce:	3b04      	subgt	r3, #4
 8017cd0:	9305      	strgt	r3, [sp, #20]
 8017cd2:	9b05      	ldr	r3, [sp, #20]
 8017cd4:	f1a3 0302 	sub.w	r3, r3, #2
 8017cd8:	bfcc      	ite	gt
 8017cda:	2500      	movgt	r5, #0
 8017cdc:	2501      	movle	r5, #1
 8017cde:	2b03      	cmp	r3, #3
 8017ce0:	d869      	bhi.n	8017db6 <_dtoa_r+0x2c6>
 8017ce2:	e8df f003 	tbb	[pc, r3]
 8017ce6:	4e2c      	.short	0x4e2c
 8017ce8:	5a4c      	.short	0x5a4c
 8017cea:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8017cee:	441d      	add	r5, r3
 8017cf0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8017cf4:	2b20      	cmp	r3, #32
 8017cf6:	bfc1      	itttt	gt
 8017cf8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8017cfc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8017d00:	fa09 f303 	lslgt.w	r3, r9, r3
 8017d04:	fa26 f000 	lsrgt.w	r0, r6, r0
 8017d08:	bfda      	itte	le
 8017d0a:	f1c3 0320 	rsble	r3, r3, #32
 8017d0e:	fa06 f003 	lslle.w	r0, r6, r3
 8017d12:	4318      	orrgt	r0, r3
 8017d14:	f7e8 fbf6 	bl	8000504 <__aeabi_ui2d>
 8017d18:	2301      	movs	r3, #1
 8017d1a:	4606      	mov	r6, r0
 8017d1c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8017d20:	3d01      	subs	r5, #1
 8017d22:	9310      	str	r3, [sp, #64]	; 0x40
 8017d24:	e771      	b.n	8017c0a <_dtoa_r+0x11a>
 8017d26:	2301      	movs	r3, #1
 8017d28:	e7b6      	b.n	8017c98 <_dtoa_r+0x1a8>
 8017d2a:	900e      	str	r0, [sp, #56]	; 0x38
 8017d2c:	e7b5      	b.n	8017c9a <_dtoa_r+0x1aa>
 8017d2e:	f1ca 0300 	rsb	r3, sl, #0
 8017d32:	9306      	str	r3, [sp, #24]
 8017d34:	2300      	movs	r3, #0
 8017d36:	eba8 080a 	sub.w	r8, r8, sl
 8017d3a:	930d      	str	r3, [sp, #52]	; 0x34
 8017d3c:	e7c2      	b.n	8017cc4 <_dtoa_r+0x1d4>
 8017d3e:	2300      	movs	r3, #0
 8017d40:	9308      	str	r3, [sp, #32]
 8017d42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d44:	2b00      	cmp	r3, #0
 8017d46:	dc39      	bgt.n	8017dbc <_dtoa_r+0x2cc>
 8017d48:	f04f 0901 	mov.w	r9, #1
 8017d4c:	f8cd 9004 	str.w	r9, [sp, #4]
 8017d50:	464b      	mov	r3, r9
 8017d52:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8017d56:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8017d58:	2200      	movs	r2, #0
 8017d5a:	6042      	str	r2, [r0, #4]
 8017d5c:	2204      	movs	r2, #4
 8017d5e:	f102 0614 	add.w	r6, r2, #20
 8017d62:	429e      	cmp	r6, r3
 8017d64:	6841      	ldr	r1, [r0, #4]
 8017d66:	d92f      	bls.n	8017dc8 <_dtoa_r+0x2d8>
 8017d68:	4620      	mov	r0, r4
 8017d6a:	f001 f83f 	bl	8018dec <_Balloc>
 8017d6e:	9000      	str	r0, [sp, #0]
 8017d70:	2800      	cmp	r0, #0
 8017d72:	d14b      	bne.n	8017e0c <_dtoa_r+0x31c>
 8017d74:	4b24      	ldr	r3, [pc, #144]	; (8017e08 <_dtoa_r+0x318>)
 8017d76:	4602      	mov	r2, r0
 8017d78:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8017d7c:	e6d1      	b.n	8017b22 <_dtoa_r+0x32>
 8017d7e:	2301      	movs	r3, #1
 8017d80:	e7de      	b.n	8017d40 <_dtoa_r+0x250>
 8017d82:	2300      	movs	r3, #0
 8017d84:	9308      	str	r3, [sp, #32]
 8017d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d88:	eb0a 0903 	add.w	r9, sl, r3
 8017d8c:	f109 0301 	add.w	r3, r9, #1
 8017d90:	2b01      	cmp	r3, #1
 8017d92:	9301      	str	r3, [sp, #4]
 8017d94:	bfb8      	it	lt
 8017d96:	2301      	movlt	r3, #1
 8017d98:	e7dd      	b.n	8017d56 <_dtoa_r+0x266>
 8017d9a:	2301      	movs	r3, #1
 8017d9c:	e7f2      	b.n	8017d84 <_dtoa_r+0x294>
 8017d9e:	2501      	movs	r5, #1
 8017da0:	2300      	movs	r3, #0
 8017da2:	9305      	str	r3, [sp, #20]
 8017da4:	9508      	str	r5, [sp, #32]
 8017da6:	f04f 39ff 	mov.w	r9, #4294967295
 8017daa:	2200      	movs	r2, #0
 8017dac:	f8cd 9004 	str.w	r9, [sp, #4]
 8017db0:	2312      	movs	r3, #18
 8017db2:	9209      	str	r2, [sp, #36]	; 0x24
 8017db4:	e7cf      	b.n	8017d56 <_dtoa_r+0x266>
 8017db6:	2301      	movs	r3, #1
 8017db8:	9308      	str	r3, [sp, #32]
 8017dba:	e7f4      	b.n	8017da6 <_dtoa_r+0x2b6>
 8017dbc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8017dc0:	f8cd 9004 	str.w	r9, [sp, #4]
 8017dc4:	464b      	mov	r3, r9
 8017dc6:	e7c6      	b.n	8017d56 <_dtoa_r+0x266>
 8017dc8:	3101      	adds	r1, #1
 8017dca:	6041      	str	r1, [r0, #4]
 8017dcc:	0052      	lsls	r2, r2, #1
 8017dce:	e7c6      	b.n	8017d5e <_dtoa_r+0x26e>
 8017dd0:	636f4361 	.word	0x636f4361
 8017dd4:	3fd287a7 	.word	0x3fd287a7
 8017dd8:	8b60c8b3 	.word	0x8b60c8b3
 8017ddc:	3fc68a28 	.word	0x3fc68a28
 8017de0:	509f79fb 	.word	0x509f79fb
 8017de4:	3fd34413 	.word	0x3fd34413
 8017de8:	0801c426 	.word	0x0801c426
 8017dec:	0801c43d 	.word	0x0801c43d
 8017df0:	7ff00000 	.word	0x7ff00000
 8017df4:	0801c422 	.word	0x0801c422
 8017df8:	0801c419 	.word	0x0801c419
 8017dfc:	0801c29d 	.word	0x0801c29d
 8017e00:	3ff80000 	.word	0x3ff80000
 8017e04:	0801c5b8 	.word	0x0801c5b8
 8017e08:	0801c49c 	.word	0x0801c49c
 8017e0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017e0e:	9a00      	ldr	r2, [sp, #0]
 8017e10:	601a      	str	r2, [r3, #0]
 8017e12:	9b01      	ldr	r3, [sp, #4]
 8017e14:	2b0e      	cmp	r3, #14
 8017e16:	f200 80ad 	bhi.w	8017f74 <_dtoa_r+0x484>
 8017e1a:	2d00      	cmp	r5, #0
 8017e1c:	f000 80aa 	beq.w	8017f74 <_dtoa_r+0x484>
 8017e20:	f1ba 0f00 	cmp.w	sl, #0
 8017e24:	dd36      	ble.n	8017e94 <_dtoa_r+0x3a4>
 8017e26:	4ac3      	ldr	r2, [pc, #780]	; (8018134 <_dtoa_r+0x644>)
 8017e28:	f00a 030f 	and.w	r3, sl, #15
 8017e2c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8017e30:	ed93 7b00 	vldr	d7, [r3]
 8017e34:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8017e38:	ea4f 172a 	mov.w	r7, sl, asr #4
 8017e3c:	eeb0 8a47 	vmov.f32	s16, s14
 8017e40:	eef0 8a67 	vmov.f32	s17, s15
 8017e44:	d016      	beq.n	8017e74 <_dtoa_r+0x384>
 8017e46:	4bbc      	ldr	r3, [pc, #752]	; (8018138 <_dtoa_r+0x648>)
 8017e48:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017e4c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017e50:	f7e8 fcfc 	bl	800084c <__aeabi_ddiv>
 8017e54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017e58:	f007 070f 	and.w	r7, r7, #15
 8017e5c:	2503      	movs	r5, #3
 8017e5e:	4eb6      	ldr	r6, [pc, #728]	; (8018138 <_dtoa_r+0x648>)
 8017e60:	b957      	cbnz	r7, 8017e78 <_dtoa_r+0x388>
 8017e62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017e66:	ec53 2b18 	vmov	r2, r3, d8
 8017e6a:	f7e8 fcef 	bl	800084c <__aeabi_ddiv>
 8017e6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017e72:	e029      	b.n	8017ec8 <_dtoa_r+0x3d8>
 8017e74:	2502      	movs	r5, #2
 8017e76:	e7f2      	b.n	8017e5e <_dtoa_r+0x36e>
 8017e78:	07f9      	lsls	r1, r7, #31
 8017e7a:	d508      	bpl.n	8017e8e <_dtoa_r+0x39e>
 8017e7c:	ec51 0b18 	vmov	r0, r1, d8
 8017e80:	e9d6 2300 	ldrd	r2, r3, [r6]
 8017e84:	f7e8 fbb8 	bl	80005f8 <__aeabi_dmul>
 8017e88:	ec41 0b18 	vmov	d8, r0, r1
 8017e8c:	3501      	adds	r5, #1
 8017e8e:	107f      	asrs	r7, r7, #1
 8017e90:	3608      	adds	r6, #8
 8017e92:	e7e5      	b.n	8017e60 <_dtoa_r+0x370>
 8017e94:	f000 80a6 	beq.w	8017fe4 <_dtoa_r+0x4f4>
 8017e98:	f1ca 0600 	rsb	r6, sl, #0
 8017e9c:	4ba5      	ldr	r3, [pc, #660]	; (8018134 <_dtoa_r+0x644>)
 8017e9e:	4fa6      	ldr	r7, [pc, #664]	; (8018138 <_dtoa_r+0x648>)
 8017ea0:	f006 020f 	and.w	r2, r6, #15
 8017ea4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017eac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017eb0:	f7e8 fba2 	bl	80005f8 <__aeabi_dmul>
 8017eb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017eb8:	1136      	asrs	r6, r6, #4
 8017eba:	2300      	movs	r3, #0
 8017ebc:	2502      	movs	r5, #2
 8017ebe:	2e00      	cmp	r6, #0
 8017ec0:	f040 8085 	bne.w	8017fce <_dtoa_r+0x4de>
 8017ec4:	2b00      	cmp	r3, #0
 8017ec6:	d1d2      	bne.n	8017e6e <_dtoa_r+0x37e>
 8017ec8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017eca:	2b00      	cmp	r3, #0
 8017ecc:	f000 808c 	beq.w	8017fe8 <_dtoa_r+0x4f8>
 8017ed0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8017ed4:	4b99      	ldr	r3, [pc, #612]	; (801813c <_dtoa_r+0x64c>)
 8017ed6:	2200      	movs	r2, #0
 8017ed8:	4630      	mov	r0, r6
 8017eda:	4639      	mov	r1, r7
 8017edc:	f7e8 fdfe 	bl	8000adc <__aeabi_dcmplt>
 8017ee0:	2800      	cmp	r0, #0
 8017ee2:	f000 8081 	beq.w	8017fe8 <_dtoa_r+0x4f8>
 8017ee6:	9b01      	ldr	r3, [sp, #4]
 8017ee8:	2b00      	cmp	r3, #0
 8017eea:	d07d      	beq.n	8017fe8 <_dtoa_r+0x4f8>
 8017eec:	f1b9 0f00 	cmp.w	r9, #0
 8017ef0:	dd3c      	ble.n	8017f6c <_dtoa_r+0x47c>
 8017ef2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8017ef6:	9307      	str	r3, [sp, #28]
 8017ef8:	2200      	movs	r2, #0
 8017efa:	4b91      	ldr	r3, [pc, #580]	; (8018140 <_dtoa_r+0x650>)
 8017efc:	4630      	mov	r0, r6
 8017efe:	4639      	mov	r1, r7
 8017f00:	f7e8 fb7a 	bl	80005f8 <__aeabi_dmul>
 8017f04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017f08:	3501      	adds	r5, #1
 8017f0a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8017f0e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8017f12:	4628      	mov	r0, r5
 8017f14:	f7e8 fb06 	bl	8000524 <__aeabi_i2d>
 8017f18:	4632      	mov	r2, r6
 8017f1a:	463b      	mov	r3, r7
 8017f1c:	f7e8 fb6c 	bl	80005f8 <__aeabi_dmul>
 8017f20:	4b88      	ldr	r3, [pc, #544]	; (8018144 <_dtoa_r+0x654>)
 8017f22:	2200      	movs	r2, #0
 8017f24:	f7e8 f9b2 	bl	800028c <__adddf3>
 8017f28:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8017f2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017f30:	9303      	str	r3, [sp, #12]
 8017f32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017f34:	2b00      	cmp	r3, #0
 8017f36:	d15c      	bne.n	8017ff2 <_dtoa_r+0x502>
 8017f38:	4b83      	ldr	r3, [pc, #524]	; (8018148 <_dtoa_r+0x658>)
 8017f3a:	2200      	movs	r2, #0
 8017f3c:	4630      	mov	r0, r6
 8017f3e:	4639      	mov	r1, r7
 8017f40:	f7e8 f9a2 	bl	8000288 <__aeabi_dsub>
 8017f44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017f48:	4606      	mov	r6, r0
 8017f4a:	460f      	mov	r7, r1
 8017f4c:	f7e8 fde4 	bl	8000b18 <__aeabi_dcmpgt>
 8017f50:	2800      	cmp	r0, #0
 8017f52:	f040 8296 	bne.w	8018482 <_dtoa_r+0x992>
 8017f56:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8017f5a:	4630      	mov	r0, r6
 8017f5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017f60:	4639      	mov	r1, r7
 8017f62:	f7e8 fdbb 	bl	8000adc <__aeabi_dcmplt>
 8017f66:	2800      	cmp	r0, #0
 8017f68:	f040 8288 	bne.w	801847c <_dtoa_r+0x98c>
 8017f6c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017f70:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8017f74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017f76:	2b00      	cmp	r3, #0
 8017f78:	f2c0 8158 	blt.w	801822c <_dtoa_r+0x73c>
 8017f7c:	f1ba 0f0e 	cmp.w	sl, #14
 8017f80:	f300 8154 	bgt.w	801822c <_dtoa_r+0x73c>
 8017f84:	4b6b      	ldr	r3, [pc, #428]	; (8018134 <_dtoa_r+0x644>)
 8017f86:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017f8a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8017f8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017f90:	2b00      	cmp	r3, #0
 8017f92:	f280 80e3 	bge.w	801815c <_dtoa_r+0x66c>
 8017f96:	9b01      	ldr	r3, [sp, #4]
 8017f98:	2b00      	cmp	r3, #0
 8017f9a:	f300 80df 	bgt.w	801815c <_dtoa_r+0x66c>
 8017f9e:	f040 826d 	bne.w	801847c <_dtoa_r+0x98c>
 8017fa2:	4b69      	ldr	r3, [pc, #420]	; (8018148 <_dtoa_r+0x658>)
 8017fa4:	2200      	movs	r2, #0
 8017fa6:	4640      	mov	r0, r8
 8017fa8:	4649      	mov	r1, r9
 8017faa:	f7e8 fb25 	bl	80005f8 <__aeabi_dmul>
 8017fae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017fb2:	f7e8 fda7 	bl	8000b04 <__aeabi_dcmpge>
 8017fb6:	9e01      	ldr	r6, [sp, #4]
 8017fb8:	4637      	mov	r7, r6
 8017fba:	2800      	cmp	r0, #0
 8017fbc:	f040 8243 	bne.w	8018446 <_dtoa_r+0x956>
 8017fc0:	9d00      	ldr	r5, [sp, #0]
 8017fc2:	2331      	movs	r3, #49	; 0x31
 8017fc4:	f805 3b01 	strb.w	r3, [r5], #1
 8017fc8:	f10a 0a01 	add.w	sl, sl, #1
 8017fcc:	e23f      	b.n	801844e <_dtoa_r+0x95e>
 8017fce:	07f2      	lsls	r2, r6, #31
 8017fd0:	d505      	bpl.n	8017fde <_dtoa_r+0x4ee>
 8017fd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017fd6:	f7e8 fb0f 	bl	80005f8 <__aeabi_dmul>
 8017fda:	3501      	adds	r5, #1
 8017fdc:	2301      	movs	r3, #1
 8017fde:	1076      	asrs	r6, r6, #1
 8017fe0:	3708      	adds	r7, #8
 8017fe2:	e76c      	b.n	8017ebe <_dtoa_r+0x3ce>
 8017fe4:	2502      	movs	r5, #2
 8017fe6:	e76f      	b.n	8017ec8 <_dtoa_r+0x3d8>
 8017fe8:	9b01      	ldr	r3, [sp, #4]
 8017fea:	f8cd a01c 	str.w	sl, [sp, #28]
 8017fee:	930c      	str	r3, [sp, #48]	; 0x30
 8017ff0:	e78d      	b.n	8017f0e <_dtoa_r+0x41e>
 8017ff2:	9900      	ldr	r1, [sp, #0]
 8017ff4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8017ff6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017ff8:	4b4e      	ldr	r3, [pc, #312]	; (8018134 <_dtoa_r+0x644>)
 8017ffa:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017ffe:	4401      	add	r1, r0
 8018000:	9102      	str	r1, [sp, #8]
 8018002:	9908      	ldr	r1, [sp, #32]
 8018004:	eeb0 8a47 	vmov.f32	s16, s14
 8018008:	eef0 8a67 	vmov.f32	s17, s15
 801800c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018010:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8018014:	2900      	cmp	r1, #0
 8018016:	d045      	beq.n	80180a4 <_dtoa_r+0x5b4>
 8018018:	494c      	ldr	r1, [pc, #304]	; (801814c <_dtoa_r+0x65c>)
 801801a:	2000      	movs	r0, #0
 801801c:	f7e8 fc16 	bl	800084c <__aeabi_ddiv>
 8018020:	ec53 2b18 	vmov	r2, r3, d8
 8018024:	f7e8 f930 	bl	8000288 <__aeabi_dsub>
 8018028:	9d00      	ldr	r5, [sp, #0]
 801802a:	ec41 0b18 	vmov	d8, r0, r1
 801802e:	4639      	mov	r1, r7
 8018030:	4630      	mov	r0, r6
 8018032:	f7e8 fd91 	bl	8000b58 <__aeabi_d2iz>
 8018036:	900c      	str	r0, [sp, #48]	; 0x30
 8018038:	f7e8 fa74 	bl	8000524 <__aeabi_i2d>
 801803c:	4602      	mov	r2, r0
 801803e:	460b      	mov	r3, r1
 8018040:	4630      	mov	r0, r6
 8018042:	4639      	mov	r1, r7
 8018044:	f7e8 f920 	bl	8000288 <__aeabi_dsub>
 8018048:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801804a:	3330      	adds	r3, #48	; 0x30
 801804c:	f805 3b01 	strb.w	r3, [r5], #1
 8018050:	ec53 2b18 	vmov	r2, r3, d8
 8018054:	4606      	mov	r6, r0
 8018056:	460f      	mov	r7, r1
 8018058:	f7e8 fd40 	bl	8000adc <__aeabi_dcmplt>
 801805c:	2800      	cmp	r0, #0
 801805e:	d165      	bne.n	801812c <_dtoa_r+0x63c>
 8018060:	4632      	mov	r2, r6
 8018062:	463b      	mov	r3, r7
 8018064:	4935      	ldr	r1, [pc, #212]	; (801813c <_dtoa_r+0x64c>)
 8018066:	2000      	movs	r0, #0
 8018068:	f7e8 f90e 	bl	8000288 <__aeabi_dsub>
 801806c:	ec53 2b18 	vmov	r2, r3, d8
 8018070:	f7e8 fd34 	bl	8000adc <__aeabi_dcmplt>
 8018074:	2800      	cmp	r0, #0
 8018076:	f040 80b9 	bne.w	80181ec <_dtoa_r+0x6fc>
 801807a:	9b02      	ldr	r3, [sp, #8]
 801807c:	429d      	cmp	r5, r3
 801807e:	f43f af75 	beq.w	8017f6c <_dtoa_r+0x47c>
 8018082:	4b2f      	ldr	r3, [pc, #188]	; (8018140 <_dtoa_r+0x650>)
 8018084:	ec51 0b18 	vmov	r0, r1, d8
 8018088:	2200      	movs	r2, #0
 801808a:	f7e8 fab5 	bl	80005f8 <__aeabi_dmul>
 801808e:	4b2c      	ldr	r3, [pc, #176]	; (8018140 <_dtoa_r+0x650>)
 8018090:	ec41 0b18 	vmov	d8, r0, r1
 8018094:	2200      	movs	r2, #0
 8018096:	4630      	mov	r0, r6
 8018098:	4639      	mov	r1, r7
 801809a:	f7e8 faad 	bl	80005f8 <__aeabi_dmul>
 801809e:	4606      	mov	r6, r0
 80180a0:	460f      	mov	r7, r1
 80180a2:	e7c4      	b.n	801802e <_dtoa_r+0x53e>
 80180a4:	ec51 0b17 	vmov	r0, r1, d7
 80180a8:	f7e8 faa6 	bl	80005f8 <__aeabi_dmul>
 80180ac:	9b02      	ldr	r3, [sp, #8]
 80180ae:	9d00      	ldr	r5, [sp, #0]
 80180b0:	930c      	str	r3, [sp, #48]	; 0x30
 80180b2:	ec41 0b18 	vmov	d8, r0, r1
 80180b6:	4639      	mov	r1, r7
 80180b8:	4630      	mov	r0, r6
 80180ba:	f7e8 fd4d 	bl	8000b58 <__aeabi_d2iz>
 80180be:	9011      	str	r0, [sp, #68]	; 0x44
 80180c0:	f7e8 fa30 	bl	8000524 <__aeabi_i2d>
 80180c4:	4602      	mov	r2, r0
 80180c6:	460b      	mov	r3, r1
 80180c8:	4630      	mov	r0, r6
 80180ca:	4639      	mov	r1, r7
 80180cc:	f7e8 f8dc 	bl	8000288 <__aeabi_dsub>
 80180d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80180d2:	3330      	adds	r3, #48	; 0x30
 80180d4:	f805 3b01 	strb.w	r3, [r5], #1
 80180d8:	9b02      	ldr	r3, [sp, #8]
 80180da:	429d      	cmp	r5, r3
 80180dc:	4606      	mov	r6, r0
 80180de:	460f      	mov	r7, r1
 80180e0:	f04f 0200 	mov.w	r2, #0
 80180e4:	d134      	bne.n	8018150 <_dtoa_r+0x660>
 80180e6:	4b19      	ldr	r3, [pc, #100]	; (801814c <_dtoa_r+0x65c>)
 80180e8:	ec51 0b18 	vmov	r0, r1, d8
 80180ec:	f7e8 f8ce 	bl	800028c <__adddf3>
 80180f0:	4602      	mov	r2, r0
 80180f2:	460b      	mov	r3, r1
 80180f4:	4630      	mov	r0, r6
 80180f6:	4639      	mov	r1, r7
 80180f8:	f7e8 fd0e 	bl	8000b18 <__aeabi_dcmpgt>
 80180fc:	2800      	cmp	r0, #0
 80180fe:	d175      	bne.n	80181ec <_dtoa_r+0x6fc>
 8018100:	ec53 2b18 	vmov	r2, r3, d8
 8018104:	4911      	ldr	r1, [pc, #68]	; (801814c <_dtoa_r+0x65c>)
 8018106:	2000      	movs	r0, #0
 8018108:	f7e8 f8be 	bl	8000288 <__aeabi_dsub>
 801810c:	4602      	mov	r2, r0
 801810e:	460b      	mov	r3, r1
 8018110:	4630      	mov	r0, r6
 8018112:	4639      	mov	r1, r7
 8018114:	f7e8 fce2 	bl	8000adc <__aeabi_dcmplt>
 8018118:	2800      	cmp	r0, #0
 801811a:	f43f af27 	beq.w	8017f6c <_dtoa_r+0x47c>
 801811e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018120:	1e6b      	subs	r3, r5, #1
 8018122:	930c      	str	r3, [sp, #48]	; 0x30
 8018124:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018128:	2b30      	cmp	r3, #48	; 0x30
 801812a:	d0f8      	beq.n	801811e <_dtoa_r+0x62e>
 801812c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8018130:	e04a      	b.n	80181c8 <_dtoa_r+0x6d8>
 8018132:	bf00      	nop
 8018134:	0801c5b8 	.word	0x0801c5b8
 8018138:	0801c590 	.word	0x0801c590
 801813c:	3ff00000 	.word	0x3ff00000
 8018140:	40240000 	.word	0x40240000
 8018144:	401c0000 	.word	0x401c0000
 8018148:	40140000 	.word	0x40140000
 801814c:	3fe00000 	.word	0x3fe00000
 8018150:	4baf      	ldr	r3, [pc, #700]	; (8018410 <_dtoa_r+0x920>)
 8018152:	f7e8 fa51 	bl	80005f8 <__aeabi_dmul>
 8018156:	4606      	mov	r6, r0
 8018158:	460f      	mov	r7, r1
 801815a:	e7ac      	b.n	80180b6 <_dtoa_r+0x5c6>
 801815c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018160:	9d00      	ldr	r5, [sp, #0]
 8018162:	4642      	mov	r2, r8
 8018164:	464b      	mov	r3, r9
 8018166:	4630      	mov	r0, r6
 8018168:	4639      	mov	r1, r7
 801816a:	f7e8 fb6f 	bl	800084c <__aeabi_ddiv>
 801816e:	f7e8 fcf3 	bl	8000b58 <__aeabi_d2iz>
 8018172:	9002      	str	r0, [sp, #8]
 8018174:	f7e8 f9d6 	bl	8000524 <__aeabi_i2d>
 8018178:	4642      	mov	r2, r8
 801817a:	464b      	mov	r3, r9
 801817c:	f7e8 fa3c 	bl	80005f8 <__aeabi_dmul>
 8018180:	4602      	mov	r2, r0
 8018182:	460b      	mov	r3, r1
 8018184:	4630      	mov	r0, r6
 8018186:	4639      	mov	r1, r7
 8018188:	f7e8 f87e 	bl	8000288 <__aeabi_dsub>
 801818c:	9e02      	ldr	r6, [sp, #8]
 801818e:	9f01      	ldr	r7, [sp, #4]
 8018190:	3630      	adds	r6, #48	; 0x30
 8018192:	f805 6b01 	strb.w	r6, [r5], #1
 8018196:	9e00      	ldr	r6, [sp, #0]
 8018198:	1bae      	subs	r6, r5, r6
 801819a:	42b7      	cmp	r7, r6
 801819c:	4602      	mov	r2, r0
 801819e:	460b      	mov	r3, r1
 80181a0:	d137      	bne.n	8018212 <_dtoa_r+0x722>
 80181a2:	f7e8 f873 	bl	800028c <__adddf3>
 80181a6:	4642      	mov	r2, r8
 80181a8:	464b      	mov	r3, r9
 80181aa:	4606      	mov	r6, r0
 80181ac:	460f      	mov	r7, r1
 80181ae:	f7e8 fcb3 	bl	8000b18 <__aeabi_dcmpgt>
 80181b2:	b9c8      	cbnz	r0, 80181e8 <_dtoa_r+0x6f8>
 80181b4:	4642      	mov	r2, r8
 80181b6:	464b      	mov	r3, r9
 80181b8:	4630      	mov	r0, r6
 80181ba:	4639      	mov	r1, r7
 80181bc:	f7e8 fc84 	bl	8000ac8 <__aeabi_dcmpeq>
 80181c0:	b110      	cbz	r0, 80181c8 <_dtoa_r+0x6d8>
 80181c2:	9b02      	ldr	r3, [sp, #8]
 80181c4:	07d9      	lsls	r1, r3, #31
 80181c6:	d40f      	bmi.n	80181e8 <_dtoa_r+0x6f8>
 80181c8:	4620      	mov	r0, r4
 80181ca:	4659      	mov	r1, fp
 80181cc:	f000 fe4e 	bl	8018e6c <_Bfree>
 80181d0:	2300      	movs	r3, #0
 80181d2:	702b      	strb	r3, [r5, #0]
 80181d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80181d6:	f10a 0001 	add.w	r0, sl, #1
 80181da:	6018      	str	r0, [r3, #0]
 80181dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80181de:	2b00      	cmp	r3, #0
 80181e0:	f43f acd8 	beq.w	8017b94 <_dtoa_r+0xa4>
 80181e4:	601d      	str	r5, [r3, #0]
 80181e6:	e4d5      	b.n	8017b94 <_dtoa_r+0xa4>
 80181e8:	f8cd a01c 	str.w	sl, [sp, #28]
 80181ec:	462b      	mov	r3, r5
 80181ee:	461d      	mov	r5, r3
 80181f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80181f4:	2a39      	cmp	r2, #57	; 0x39
 80181f6:	d108      	bne.n	801820a <_dtoa_r+0x71a>
 80181f8:	9a00      	ldr	r2, [sp, #0]
 80181fa:	429a      	cmp	r2, r3
 80181fc:	d1f7      	bne.n	80181ee <_dtoa_r+0x6fe>
 80181fe:	9a07      	ldr	r2, [sp, #28]
 8018200:	9900      	ldr	r1, [sp, #0]
 8018202:	3201      	adds	r2, #1
 8018204:	9207      	str	r2, [sp, #28]
 8018206:	2230      	movs	r2, #48	; 0x30
 8018208:	700a      	strb	r2, [r1, #0]
 801820a:	781a      	ldrb	r2, [r3, #0]
 801820c:	3201      	adds	r2, #1
 801820e:	701a      	strb	r2, [r3, #0]
 8018210:	e78c      	b.n	801812c <_dtoa_r+0x63c>
 8018212:	4b7f      	ldr	r3, [pc, #508]	; (8018410 <_dtoa_r+0x920>)
 8018214:	2200      	movs	r2, #0
 8018216:	f7e8 f9ef 	bl	80005f8 <__aeabi_dmul>
 801821a:	2200      	movs	r2, #0
 801821c:	2300      	movs	r3, #0
 801821e:	4606      	mov	r6, r0
 8018220:	460f      	mov	r7, r1
 8018222:	f7e8 fc51 	bl	8000ac8 <__aeabi_dcmpeq>
 8018226:	2800      	cmp	r0, #0
 8018228:	d09b      	beq.n	8018162 <_dtoa_r+0x672>
 801822a:	e7cd      	b.n	80181c8 <_dtoa_r+0x6d8>
 801822c:	9a08      	ldr	r2, [sp, #32]
 801822e:	2a00      	cmp	r2, #0
 8018230:	f000 80c4 	beq.w	80183bc <_dtoa_r+0x8cc>
 8018234:	9a05      	ldr	r2, [sp, #20]
 8018236:	2a01      	cmp	r2, #1
 8018238:	f300 80a8 	bgt.w	801838c <_dtoa_r+0x89c>
 801823c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801823e:	2a00      	cmp	r2, #0
 8018240:	f000 80a0 	beq.w	8018384 <_dtoa_r+0x894>
 8018244:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8018248:	9e06      	ldr	r6, [sp, #24]
 801824a:	4645      	mov	r5, r8
 801824c:	9a04      	ldr	r2, [sp, #16]
 801824e:	2101      	movs	r1, #1
 8018250:	441a      	add	r2, r3
 8018252:	4620      	mov	r0, r4
 8018254:	4498      	add	r8, r3
 8018256:	9204      	str	r2, [sp, #16]
 8018258:	f000 ff0e 	bl	8019078 <__i2b>
 801825c:	4607      	mov	r7, r0
 801825e:	2d00      	cmp	r5, #0
 8018260:	dd0b      	ble.n	801827a <_dtoa_r+0x78a>
 8018262:	9b04      	ldr	r3, [sp, #16]
 8018264:	2b00      	cmp	r3, #0
 8018266:	dd08      	ble.n	801827a <_dtoa_r+0x78a>
 8018268:	42ab      	cmp	r3, r5
 801826a:	9a04      	ldr	r2, [sp, #16]
 801826c:	bfa8      	it	ge
 801826e:	462b      	movge	r3, r5
 8018270:	eba8 0803 	sub.w	r8, r8, r3
 8018274:	1aed      	subs	r5, r5, r3
 8018276:	1ad3      	subs	r3, r2, r3
 8018278:	9304      	str	r3, [sp, #16]
 801827a:	9b06      	ldr	r3, [sp, #24]
 801827c:	b1fb      	cbz	r3, 80182be <_dtoa_r+0x7ce>
 801827e:	9b08      	ldr	r3, [sp, #32]
 8018280:	2b00      	cmp	r3, #0
 8018282:	f000 809f 	beq.w	80183c4 <_dtoa_r+0x8d4>
 8018286:	2e00      	cmp	r6, #0
 8018288:	dd11      	ble.n	80182ae <_dtoa_r+0x7be>
 801828a:	4639      	mov	r1, r7
 801828c:	4632      	mov	r2, r6
 801828e:	4620      	mov	r0, r4
 8018290:	f000 ffae 	bl	80191f0 <__pow5mult>
 8018294:	465a      	mov	r2, fp
 8018296:	4601      	mov	r1, r0
 8018298:	4607      	mov	r7, r0
 801829a:	4620      	mov	r0, r4
 801829c:	f000 ff02 	bl	80190a4 <__multiply>
 80182a0:	4659      	mov	r1, fp
 80182a2:	9007      	str	r0, [sp, #28]
 80182a4:	4620      	mov	r0, r4
 80182a6:	f000 fde1 	bl	8018e6c <_Bfree>
 80182aa:	9b07      	ldr	r3, [sp, #28]
 80182ac:	469b      	mov	fp, r3
 80182ae:	9b06      	ldr	r3, [sp, #24]
 80182b0:	1b9a      	subs	r2, r3, r6
 80182b2:	d004      	beq.n	80182be <_dtoa_r+0x7ce>
 80182b4:	4659      	mov	r1, fp
 80182b6:	4620      	mov	r0, r4
 80182b8:	f000 ff9a 	bl	80191f0 <__pow5mult>
 80182bc:	4683      	mov	fp, r0
 80182be:	2101      	movs	r1, #1
 80182c0:	4620      	mov	r0, r4
 80182c2:	f000 fed9 	bl	8019078 <__i2b>
 80182c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80182c8:	2b00      	cmp	r3, #0
 80182ca:	4606      	mov	r6, r0
 80182cc:	dd7c      	ble.n	80183c8 <_dtoa_r+0x8d8>
 80182ce:	461a      	mov	r2, r3
 80182d0:	4601      	mov	r1, r0
 80182d2:	4620      	mov	r0, r4
 80182d4:	f000 ff8c 	bl	80191f0 <__pow5mult>
 80182d8:	9b05      	ldr	r3, [sp, #20]
 80182da:	2b01      	cmp	r3, #1
 80182dc:	4606      	mov	r6, r0
 80182de:	dd76      	ble.n	80183ce <_dtoa_r+0x8de>
 80182e0:	2300      	movs	r3, #0
 80182e2:	9306      	str	r3, [sp, #24]
 80182e4:	6933      	ldr	r3, [r6, #16]
 80182e6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80182ea:	6918      	ldr	r0, [r3, #16]
 80182ec:	f000 fe74 	bl	8018fd8 <__hi0bits>
 80182f0:	f1c0 0020 	rsb	r0, r0, #32
 80182f4:	9b04      	ldr	r3, [sp, #16]
 80182f6:	4418      	add	r0, r3
 80182f8:	f010 001f 	ands.w	r0, r0, #31
 80182fc:	f000 8086 	beq.w	801840c <_dtoa_r+0x91c>
 8018300:	f1c0 0320 	rsb	r3, r0, #32
 8018304:	2b04      	cmp	r3, #4
 8018306:	dd7f      	ble.n	8018408 <_dtoa_r+0x918>
 8018308:	f1c0 001c 	rsb	r0, r0, #28
 801830c:	9b04      	ldr	r3, [sp, #16]
 801830e:	4403      	add	r3, r0
 8018310:	4480      	add	r8, r0
 8018312:	4405      	add	r5, r0
 8018314:	9304      	str	r3, [sp, #16]
 8018316:	f1b8 0f00 	cmp.w	r8, #0
 801831a:	dd05      	ble.n	8018328 <_dtoa_r+0x838>
 801831c:	4659      	mov	r1, fp
 801831e:	4642      	mov	r2, r8
 8018320:	4620      	mov	r0, r4
 8018322:	f000 ffbf 	bl	80192a4 <__lshift>
 8018326:	4683      	mov	fp, r0
 8018328:	9b04      	ldr	r3, [sp, #16]
 801832a:	2b00      	cmp	r3, #0
 801832c:	dd05      	ble.n	801833a <_dtoa_r+0x84a>
 801832e:	4631      	mov	r1, r6
 8018330:	461a      	mov	r2, r3
 8018332:	4620      	mov	r0, r4
 8018334:	f000 ffb6 	bl	80192a4 <__lshift>
 8018338:	4606      	mov	r6, r0
 801833a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801833c:	2b00      	cmp	r3, #0
 801833e:	d069      	beq.n	8018414 <_dtoa_r+0x924>
 8018340:	4631      	mov	r1, r6
 8018342:	4658      	mov	r0, fp
 8018344:	f001 f81a 	bl	801937c <__mcmp>
 8018348:	2800      	cmp	r0, #0
 801834a:	da63      	bge.n	8018414 <_dtoa_r+0x924>
 801834c:	2300      	movs	r3, #0
 801834e:	4659      	mov	r1, fp
 8018350:	220a      	movs	r2, #10
 8018352:	4620      	mov	r0, r4
 8018354:	f000 fdac 	bl	8018eb0 <__multadd>
 8018358:	9b08      	ldr	r3, [sp, #32]
 801835a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801835e:	4683      	mov	fp, r0
 8018360:	2b00      	cmp	r3, #0
 8018362:	f000 818f 	beq.w	8018684 <_dtoa_r+0xb94>
 8018366:	4639      	mov	r1, r7
 8018368:	2300      	movs	r3, #0
 801836a:	220a      	movs	r2, #10
 801836c:	4620      	mov	r0, r4
 801836e:	f000 fd9f 	bl	8018eb0 <__multadd>
 8018372:	f1b9 0f00 	cmp.w	r9, #0
 8018376:	4607      	mov	r7, r0
 8018378:	f300 808e 	bgt.w	8018498 <_dtoa_r+0x9a8>
 801837c:	9b05      	ldr	r3, [sp, #20]
 801837e:	2b02      	cmp	r3, #2
 8018380:	dc50      	bgt.n	8018424 <_dtoa_r+0x934>
 8018382:	e089      	b.n	8018498 <_dtoa_r+0x9a8>
 8018384:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018386:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801838a:	e75d      	b.n	8018248 <_dtoa_r+0x758>
 801838c:	9b01      	ldr	r3, [sp, #4]
 801838e:	1e5e      	subs	r6, r3, #1
 8018390:	9b06      	ldr	r3, [sp, #24]
 8018392:	42b3      	cmp	r3, r6
 8018394:	bfbf      	itttt	lt
 8018396:	9b06      	ldrlt	r3, [sp, #24]
 8018398:	9606      	strlt	r6, [sp, #24]
 801839a:	1af2      	sublt	r2, r6, r3
 801839c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801839e:	bfb6      	itet	lt
 80183a0:	189b      	addlt	r3, r3, r2
 80183a2:	1b9e      	subge	r6, r3, r6
 80183a4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80183a6:	9b01      	ldr	r3, [sp, #4]
 80183a8:	bfb8      	it	lt
 80183aa:	2600      	movlt	r6, #0
 80183ac:	2b00      	cmp	r3, #0
 80183ae:	bfb5      	itete	lt
 80183b0:	eba8 0503 	sublt.w	r5, r8, r3
 80183b4:	9b01      	ldrge	r3, [sp, #4]
 80183b6:	2300      	movlt	r3, #0
 80183b8:	4645      	movge	r5, r8
 80183ba:	e747      	b.n	801824c <_dtoa_r+0x75c>
 80183bc:	9e06      	ldr	r6, [sp, #24]
 80183be:	9f08      	ldr	r7, [sp, #32]
 80183c0:	4645      	mov	r5, r8
 80183c2:	e74c      	b.n	801825e <_dtoa_r+0x76e>
 80183c4:	9a06      	ldr	r2, [sp, #24]
 80183c6:	e775      	b.n	80182b4 <_dtoa_r+0x7c4>
 80183c8:	9b05      	ldr	r3, [sp, #20]
 80183ca:	2b01      	cmp	r3, #1
 80183cc:	dc18      	bgt.n	8018400 <_dtoa_r+0x910>
 80183ce:	9b02      	ldr	r3, [sp, #8]
 80183d0:	b9b3      	cbnz	r3, 8018400 <_dtoa_r+0x910>
 80183d2:	9b03      	ldr	r3, [sp, #12]
 80183d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80183d8:	b9a3      	cbnz	r3, 8018404 <_dtoa_r+0x914>
 80183da:	9b03      	ldr	r3, [sp, #12]
 80183dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80183e0:	0d1b      	lsrs	r3, r3, #20
 80183e2:	051b      	lsls	r3, r3, #20
 80183e4:	b12b      	cbz	r3, 80183f2 <_dtoa_r+0x902>
 80183e6:	9b04      	ldr	r3, [sp, #16]
 80183e8:	3301      	adds	r3, #1
 80183ea:	9304      	str	r3, [sp, #16]
 80183ec:	f108 0801 	add.w	r8, r8, #1
 80183f0:	2301      	movs	r3, #1
 80183f2:	9306      	str	r3, [sp, #24]
 80183f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80183f6:	2b00      	cmp	r3, #0
 80183f8:	f47f af74 	bne.w	80182e4 <_dtoa_r+0x7f4>
 80183fc:	2001      	movs	r0, #1
 80183fe:	e779      	b.n	80182f4 <_dtoa_r+0x804>
 8018400:	2300      	movs	r3, #0
 8018402:	e7f6      	b.n	80183f2 <_dtoa_r+0x902>
 8018404:	9b02      	ldr	r3, [sp, #8]
 8018406:	e7f4      	b.n	80183f2 <_dtoa_r+0x902>
 8018408:	d085      	beq.n	8018316 <_dtoa_r+0x826>
 801840a:	4618      	mov	r0, r3
 801840c:	301c      	adds	r0, #28
 801840e:	e77d      	b.n	801830c <_dtoa_r+0x81c>
 8018410:	40240000 	.word	0x40240000
 8018414:	9b01      	ldr	r3, [sp, #4]
 8018416:	2b00      	cmp	r3, #0
 8018418:	dc38      	bgt.n	801848c <_dtoa_r+0x99c>
 801841a:	9b05      	ldr	r3, [sp, #20]
 801841c:	2b02      	cmp	r3, #2
 801841e:	dd35      	ble.n	801848c <_dtoa_r+0x99c>
 8018420:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8018424:	f1b9 0f00 	cmp.w	r9, #0
 8018428:	d10d      	bne.n	8018446 <_dtoa_r+0x956>
 801842a:	4631      	mov	r1, r6
 801842c:	464b      	mov	r3, r9
 801842e:	2205      	movs	r2, #5
 8018430:	4620      	mov	r0, r4
 8018432:	f000 fd3d 	bl	8018eb0 <__multadd>
 8018436:	4601      	mov	r1, r0
 8018438:	4606      	mov	r6, r0
 801843a:	4658      	mov	r0, fp
 801843c:	f000 ff9e 	bl	801937c <__mcmp>
 8018440:	2800      	cmp	r0, #0
 8018442:	f73f adbd 	bgt.w	8017fc0 <_dtoa_r+0x4d0>
 8018446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018448:	9d00      	ldr	r5, [sp, #0]
 801844a:	ea6f 0a03 	mvn.w	sl, r3
 801844e:	f04f 0800 	mov.w	r8, #0
 8018452:	4631      	mov	r1, r6
 8018454:	4620      	mov	r0, r4
 8018456:	f000 fd09 	bl	8018e6c <_Bfree>
 801845a:	2f00      	cmp	r7, #0
 801845c:	f43f aeb4 	beq.w	80181c8 <_dtoa_r+0x6d8>
 8018460:	f1b8 0f00 	cmp.w	r8, #0
 8018464:	d005      	beq.n	8018472 <_dtoa_r+0x982>
 8018466:	45b8      	cmp	r8, r7
 8018468:	d003      	beq.n	8018472 <_dtoa_r+0x982>
 801846a:	4641      	mov	r1, r8
 801846c:	4620      	mov	r0, r4
 801846e:	f000 fcfd 	bl	8018e6c <_Bfree>
 8018472:	4639      	mov	r1, r7
 8018474:	4620      	mov	r0, r4
 8018476:	f000 fcf9 	bl	8018e6c <_Bfree>
 801847a:	e6a5      	b.n	80181c8 <_dtoa_r+0x6d8>
 801847c:	2600      	movs	r6, #0
 801847e:	4637      	mov	r7, r6
 8018480:	e7e1      	b.n	8018446 <_dtoa_r+0x956>
 8018482:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8018484:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8018488:	4637      	mov	r7, r6
 801848a:	e599      	b.n	8017fc0 <_dtoa_r+0x4d0>
 801848c:	9b08      	ldr	r3, [sp, #32]
 801848e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8018492:	2b00      	cmp	r3, #0
 8018494:	f000 80fd 	beq.w	8018692 <_dtoa_r+0xba2>
 8018498:	2d00      	cmp	r5, #0
 801849a:	dd05      	ble.n	80184a8 <_dtoa_r+0x9b8>
 801849c:	4639      	mov	r1, r7
 801849e:	462a      	mov	r2, r5
 80184a0:	4620      	mov	r0, r4
 80184a2:	f000 feff 	bl	80192a4 <__lshift>
 80184a6:	4607      	mov	r7, r0
 80184a8:	9b06      	ldr	r3, [sp, #24]
 80184aa:	2b00      	cmp	r3, #0
 80184ac:	d05c      	beq.n	8018568 <_dtoa_r+0xa78>
 80184ae:	6879      	ldr	r1, [r7, #4]
 80184b0:	4620      	mov	r0, r4
 80184b2:	f000 fc9b 	bl	8018dec <_Balloc>
 80184b6:	4605      	mov	r5, r0
 80184b8:	b928      	cbnz	r0, 80184c6 <_dtoa_r+0x9d6>
 80184ba:	4b80      	ldr	r3, [pc, #512]	; (80186bc <_dtoa_r+0xbcc>)
 80184bc:	4602      	mov	r2, r0
 80184be:	f240 21ea 	movw	r1, #746	; 0x2ea
 80184c2:	f7ff bb2e 	b.w	8017b22 <_dtoa_r+0x32>
 80184c6:	693a      	ldr	r2, [r7, #16]
 80184c8:	3202      	adds	r2, #2
 80184ca:	0092      	lsls	r2, r2, #2
 80184cc:	f107 010c 	add.w	r1, r7, #12
 80184d0:	300c      	adds	r0, #12
 80184d2:	f7fd fc0d 	bl	8015cf0 <memcpy>
 80184d6:	2201      	movs	r2, #1
 80184d8:	4629      	mov	r1, r5
 80184da:	4620      	mov	r0, r4
 80184dc:	f000 fee2 	bl	80192a4 <__lshift>
 80184e0:	9b00      	ldr	r3, [sp, #0]
 80184e2:	3301      	adds	r3, #1
 80184e4:	9301      	str	r3, [sp, #4]
 80184e6:	9b00      	ldr	r3, [sp, #0]
 80184e8:	444b      	add	r3, r9
 80184ea:	9307      	str	r3, [sp, #28]
 80184ec:	9b02      	ldr	r3, [sp, #8]
 80184ee:	f003 0301 	and.w	r3, r3, #1
 80184f2:	46b8      	mov	r8, r7
 80184f4:	9306      	str	r3, [sp, #24]
 80184f6:	4607      	mov	r7, r0
 80184f8:	9b01      	ldr	r3, [sp, #4]
 80184fa:	4631      	mov	r1, r6
 80184fc:	3b01      	subs	r3, #1
 80184fe:	4658      	mov	r0, fp
 8018500:	9302      	str	r3, [sp, #8]
 8018502:	f7ff fa67 	bl	80179d4 <quorem>
 8018506:	4603      	mov	r3, r0
 8018508:	3330      	adds	r3, #48	; 0x30
 801850a:	9004      	str	r0, [sp, #16]
 801850c:	4641      	mov	r1, r8
 801850e:	4658      	mov	r0, fp
 8018510:	9308      	str	r3, [sp, #32]
 8018512:	f000 ff33 	bl	801937c <__mcmp>
 8018516:	463a      	mov	r2, r7
 8018518:	4681      	mov	r9, r0
 801851a:	4631      	mov	r1, r6
 801851c:	4620      	mov	r0, r4
 801851e:	f000 ff49 	bl	80193b4 <__mdiff>
 8018522:	68c2      	ldr	r2, [r0, #12]
 8018524:	9b08      	ldr	r3, [sp, #32]
 8018526:	4605      	mov	r5, r0
 8018528:	bb02      	cbnz	r2, 801856c <_dtoa_r+0xa7c>
 801852a:	4601      	mov	r1, r0
 801852c:	4658      	mov	r0, fp
 801852e:	f000 ff25 	bl	801937c <__mcmp>
 8018532:	9b08      	ldr	r3, [sp, #32]
 8018534:	4602      	mov	r2, r0
 8018536:	4629      	mov	r1, r5
 8018538:	4620      	mov	r0, r4
 801853a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801853e:	f000 fc95 	bl	8018e6c <_Bfree>
 8018542:	9b05      	ldr	r3, [sp, #20]
 8018544:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018546:	9d01      	ldr	r5, [sp, #4]
 8018548:	ea43 0102 	orr.w	r1, r3, r2
 801854c:	9b06      	ldr	r3, [sp, #24]
 801854e:	430b      	orrs	r3, r1
 8018550:	9b08      	ldr	r3, [sp, #32]
 8018552:	d10d      	bne.n	8018570 <_dtoa_r+0xa80>
 8018554:	2b39      	cmp	r3, #57	; 0x39
 8018556:	d029      	beq.n	80185ac <_dtoa_r+0xabc>
 8018558:	f1b9 0f00 	cmp.w	r9, #0
 801855c:	dd01      	ble.n	8018562 <_dtoa_r+0xa72>
 801855e:	9b04      	ldr	r3, [sp, #16]
 8018560:	3331      	adds	r3, #49	; 0x31
 8018562:	9a02      	ldr	r2, [sp, #8]
 8018564:	7013      	strb	r3, [r2, #0]
 8018566:	e774      	b.n	8018452 <_dtoa_r+0x962>
 8018568:	4638      	mov	r0, r7
 801856a:	e7b9      	b.n	80184e0 <_dtoa_r+0x9f0>
 801856c:	2201      	movs	r2, #1
 801856e:	e7e2      	b.n	8018536 <_dtoa_r+0xa46>
 8018570:	f1b9 0f00 	cmp.w	r9, #0
 8018574:	db06      	blt.n	8018584 <_dtoa_r+0xa94>
 8018576:	9905      	ldr	r1, [sp, #20]
 8018578:	ea41 0909 	orr.w	r9, r1, r9
 801857c:	9906      	ldr	r1, [sp, #24]
 801857e:	ea59 0101 	orrs.w	r1, r9, r1
 8018582:	d120      	bne.n	80185c6 <_dtoa_r+0xad6>
 8018584:	2a00      	cmp	r2, #0
 8018586:	ddec      	ble.n	8018562 <_dtoa_r+0xa72>
 8018588:	4659      	mov	r1, fp
 801858a:	2201      	movs	r2, #1
 801858c:	4620      	mov	r0, r4
 801858e:	9301      	str	r3, [sp, #4]
 8018590:	f000 fe88 	bl	80192a4 <__lshift>
 8018594:	4631      	mov	r1, r6
 8018596:	4683      	mov	fp, r0
 8018598:	f000 fef0 	bl	801937c <__mcmp>
 801859c:	2800      	cmp	r0, #0
 801859e:	9b01      	ldr	r3, [sp, #4]
 80185a0:	dc02      	bgt.n	80185a8 <_dtoa_r+0xab8>
 80185a2:	d1de      	bne.n	8018562 <_dtoa_r+0xa72>
 80185a4:	07da      	lsls	r2, r3, #31
 80185a6:	d5dc      	bpl.n	8018562 <_dtoa_r+0xa72>
 80185a8:	2b39      	cmp	r3, #57	; 0x39
 80185aa:	d1d8      	bne.n	801855e <_dtoa_r+0xa6e>
 80185ac:	9a02      	ldr	r2, [sp, #8]
 80185ae:	2339      	movs	r3, #57	; 0x39
 80185b0:	7013      	strb	r3, [r2, #0]
 80185b2:	462b      	mov	r3, r5
 80185b4:	461d      	mov	r5, r3
 80185b6:	3b01      	subs	r3, #1
 80185b8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80185bc:	2a39      	cmp	r2, #57	; 0x39
 80185be:	d050      	beq.n	8018662 <_dtoa_r+0xb72>
 80185c0:	3201      	adds	r2, #1
 80185c2:	701a      	strb	r2, [r3, #0]
 80185c4:	e745      	b.n	8018452 <_dtoa_r+0x962>
 80185c6:	2a00      	cmp	r2, #0
 80185c8:	dd03      	ble.n	80185d2 <_dtoa_r+0xae2>
 80185ca:	2b39      	cmp	r3, #57	; 0x39
 80185cc:	d0ee      	beq.n	80185ac <_dtoa_r+0xabc>
 80185ce:	3301      	adds	r3, #1
 80185d0:	e7c7      	b.n	8018562 <_dtoa_r+0xa72>
 80185d2:	9a01      	ldr	r2, [sp, #4]
 80185d4:	9907      	ldr	r1, [sp, #28]
 80185d6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80185da:	428a      	cmp	r2, r1
 80185dc:	d02a      	beq.n	8018634 <_dtoa_r+0xb44>
 80185de:	4659      	mov	r1, fp
 80185e0:	2300      	movs	r3, #0
 80185e2:	220a      	movs	r2, #10
 80185e4:	4620      	mov	r0, r4
 80185e6:	f000 fc63 	bl	8018eb0 <__multadd>
 80185ea:	45b8      	cmp	r8, r7
 80185ec:	4683      	mov	fp, r0
 80185ee:	f04f 0300 	mov.w	r3, #0
 80185f2:	f04f 020a 	mov.w	r2, #10
 80185f6:	4641      	mov	r1, r8
 80185f8:	4620      	mov	r0, r4
 80185fa:	d107      	bne.n	801860c <_dtoa_r+0xb1c>
 80185fc:	f000 fc58 	bl	8018eb0 <__multadd>
 8018600:	4680      	mov	r8, r0
 8018602:	4607      	mov	r7, r0
 8018604:	9b01      	ldr	r3, [sp, #4]
 8018606:	3301      	adds	r3, #1
 8018608:	9301      	str	r3, [sp, #4]
 801860a:	e775      	b.n	80184f8 <_dtoa_r+0xa08>
 801860c:	f000 fc50 	bl	8018eb0 <__multadd>
 8018610:	4639      	mov	r1, r7
 8018612:	4680      	mov	r8, r0
 8018614:	2300      	movs	r3, #0
 8018616:	220a      	movs	r2, #10
 8018618:	4620      	mov	r0, r4
 801861a:	f000 fc49 	bl	8018eb0 <__multadd>
 801861e:	4607      	mov	r7, r0
 8018620:	e7f0      	b.n	8018604 <_dtoa_r+0xb14>
 8018622:	f1b9 0f00 	cmp.w	r9, #0
 8018626:	9a00      	ldr	r2, [sp, #0]
 8018628:	bfcc      	ite	gt
 801862a:	464d      	movgt	r5, r9
 801862c:	2501      	movle	r5, #1
 801862e:	4415      	add	r5, r2
 8018630:	f04f 0800 	mov.w	r8, #0
 8018634:	4659      	mov	r1, fp
 8018636:	2201      	movs	r2, #1
 8018638:	4620      	mov	r0, r4
 801863a:	9301      	str	r3, [sp, #4]
 801863c:	f000 fe32 	bl	80192a4 <__lshift>
 8018640:	4631      	mov	r1, r6
 8018642:	4683      	mov	fp, r0
 8018644:	f000 fe9a 	bl	801937c <__mcmp>
 8018648:	2800      	cmp	r0, #0
 801864a:	dcb2      	bgt.n	80185b2 <_dtoa_r+0xac2>
 801864c:	d102      	bne.n	8018654 <_dtoa_r+0xb64>
 801864e:	9b01      	ldr	r3, [sp, #4]
 8018650:	07db      	lsls	r3, r3, #31
 8018652:	d4ae      	bmi.n	80185b2 <_dtoa_r+0xac2>
 8018654:	462b      	mov	r3, r5
 8018656:	461d      	mov	r5, r3
 8018658:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801865c:	2a30      	cmp	r2, #48	; 0x30
 801865e:	d0fa      	beq.n	8018656 <_dtoa_r+0xb66>
 8018660:	e6f7      	b.n	8018452 <_dtoa_r+0x962>
 8018662:	9a00      	ldr	r2, [sp, #0]
 8018664:	429a      	cmp	r2, r3
 8018666:	d1a5      	bne.n	80185b4 <_dtoa_r+0xac4>
 8018668:	f10a 0a01 	add.w	sl, sl, #1
 801866c:	2331      	movs	r3, #49	; 0x31
 801866e:	e779      	b.n	8018564 <_dtoa_r+0xa74>
 8018670:	4b13      	ldr	r3, [pc, #76]	; (80186c0 <_dtoa_r+0xbd0>)
 8018672:	f7ff baaf 	b.w	8017bd4 <_dtoa_r+0xe4>
 8018676:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018678:	2b00      	cmp	r3, #0
 801867a:	f47f aa86 	bne.w	8017b8a <_dtoa_r+0x9a>
 801867e:	4b11      	ldr	r3, [pc, #68]	; (80186c4 <_dtoa_r+0xbd4>)
 8018680:	f7ff baa8 	b.w	8017bd4 <_dtoa_r+0xe4>
 8018684:	f1b9 0f00 	cmp.w	r9, #0
 8018688:	dc03      	bgt.n	8018692 <_dtoa_r+0xba2>
 801868a:	9b05      	ldr	r3, [sp, #20]
 801868c:	2b02      	cmp	r3, #2
 801868e:	f73f aec9 	bgt.w	8018424 <_dtoa_r+0x934>
 8018692:	9d00      	ldr	r5, [sp, #0]
 8018694:	4631      	mov	r1, r6
 8018696:	4658      	mov	r0, fp
 8018698:	f7ff f99c 	bl	80179d4 <quorem>
 801869c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80186a0:	f805 3b01 	strb.w	r3, [r5], #1
 80186a4:	9a00      	ldr	r2, [sp, #0]
 80186a6:	1aaa      	subs	r2, r5, r2
 80186a8:	4591      	cmp	r9, r2
 80186aa:	ddba      	ble.n	8018622 <_dtoa_r+0xb32>
 80186ac:	4659      	mov	r1, fp
 80186ae:	2300      	movs	r3, #0
 80186b0:	220a      	movs	r2, #10
 80186b2:	4620      	mov	r0, r4
 80186b4:	f000 fbfc 	bl	8018eb0 <__multadd>
 80186b8:	4683      	mov	fp, r0
 80186ba:	e7eb      	b.n	8018694 <_dtoa_r+0xba4>
 80186bc:	0801c49c 	.word	0x0801c49c
 80186c0:	0801c29c 	.word	0x0801c29c
 80186c4:	0801c419 	.word	0x0801c419

080186c8 <rshift>:
 80186c8:	6903      	ldr	r3, [r0, #16]
 80186ca:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80186ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80186d2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80186d6:	f100 0414 	add.w	r4, r0, #20
 80186da:	dd45      	ble.n	8018768 <rshift+0xa0>
 80186dc:	f011 011f 	ands.w	r1, r1, #31
 80186e0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80186e4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80186e8:	d10c      	bne.n	8018704 <rshift+0x3c>
 80186ea:	f100 0710 	add.w	r7, r0, #16
 80186ee:	4629      	mov	r1, r5
 80186f0:	42b1      	cmp	r1, r6
 80186f2:	d334      	bcc.n	801875e <rshift+0x96>
 80186f4:	1a9b      	subs	r3, r3, r2
 80186f6:	009b      	lsls	r3, r3, #2
 80186f8:	1eea      	subs	r2, r5, #3
 80186fa:	4296      	cmp	r6, r2
 80186fc:	bf38      	it	cc
 80186fe:	2300      	movcc	r3, #0
 8018700:	4423      	add	r3, r4
 8018702:	e015      	b.n	8018730 <rshift+0x68>
 8018704:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8018708:	f1c1 0820 	rsb	r8, r1, #32
 801870c:	40cf      	lsrs	r7, r1
 801870e:	f105 0e04 	add.w	lr, r5, #4
 8018712:	46a1      	mov	r9, r4
 8018714:	4576      	cmp	r6, lr
 8018716:	46f4      	mov	ip, lr
 8018718:	d815      	bhi.n	8018746 <rshift+0x7e>
 801871a:	1a9b      	subs	r3, r3, r2
 801871c:	009a      	lsls	r2, r3, #2
 801871e:	3a04      	subs	r2, #4
 8018720:	3501      	adds	r5, #1
 8018722:	42ae      	cmp	r6, r5
 8018724:	bf38      	it	cc
 8018726:	2200      	movcc	r2, #0
 8018728:	18a3      	adds	r3, r4, r2
 801872a:	50a7      	str	r7, [r4, r2]
 801872c:	b107      	cbz	r7, 8018730 <rshift+0x68>
 801872e:	3304      	adds	r3, #4
 8018730:	1b1a      	subs	r2, r3, r4
 8018732:	42a3      	cmp	r3, r4
 8018734:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018738:	bf08      	it	eq
 801873a:	2300      	moveq	r3, #0
 801873c:	6102      	str	r2, [r0, #16]
 801873e:	bf08      	it	eq
 8018740:	6143      	streq	r3, [r0, #20]
 8018742:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018746:	f8dc c000 	ldr.w	ip, [ip]
 801874a:	fa0c fc08 	lsl.w	ip, ip, r8
 801874e:	ea4c 0707 	orr.w	r7, ip, r7
 8018752:	f849 7b04 	str.w	r7, [r9], #4
 8018756:	f85e 7b04 	ldr.w	r7, [lr], #4
 801875a:	40cf      	lsrs	r7, r1
 801875c:	e7da      	b.n	8018714 <rshift+0x4c>
 801875e:	f851 cb04 	ldr.w	ip, [r1], #4
 8018762:	f847 cf04 	str.w	ip, [r7, #4]!
 8018766:	e7c3      	b.n	80186f0 <rshift+0x28>
 8018768:	4623      	mov	r3, r4
 801876a:	e7e1      	b.n	8018730 <rshift+0x68>

0801876c <__hexdig_fun>:
 801876c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018770:	2b09      	cmp	r3, #9
 8018772:	d802      	bhi.n	801877a <__hexdig_fun+0xe>
 8018774:	3820      	subs	r0, #32
 8018776:	b2c0      	uxtb	r0, r0
 8018778:	4770      	bx	lr
 801877a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801877e:	2b05      	cmp	r3, #5
 8018780:	d801      	bhi.n	8018786 <__hexdig_fun+0x1a>
 8018782:	3847      	subs	r0, #71	; 0x47
 8018784:	e7f7      	b.n	8018776 <__hexdig_fun+0xa>
 8018786:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801878a:	2b05      	cmp	r3, #5
 801878c:	d801      	bhi.n	8018792 <__hexdig_fun+0x26>
 801878e:	3827      	subs	r0, #39	; 0x27
 8018790:	e7f1      	b.n	8018776 <__hexdig_fun+0xa>
 8018792:	2000      	movs	r0, #0
 8018794:	4770      	bx	lr
	...

08018798 <__gethex>:
 8018798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801879c:	ed2d 8b02 	vpush	{d8}
 80187a0:	b089      	sub	sp, #36	; 0x24
 80187a2:	ee08 0a10 	vmov	s16, r0
 80187a6:	9304      	str	r3, [sp, #16]
 80187a8:	4bbc      	ldr	r3, [pc, #752]	; (8018a9c <__gethex+0x304>)
 80187aa:	681b      	ldr	r3, [r3, #0]
 80187ac:	9301      	str	r3, [sp, #4]
 80187ae:	4618      	mov	r0, r3
 80187b0:	468b      	mov	fp, r1
 80187b2:	4690      	mov	r8, r2
 80187b4:	f7e7 fd0c 	bl	80001d0 <strlen>
 80187b8:	9b01      	ldr	r3, [sp, #4]
 80187ba:	f8db 2000 	ldr.w	r2, [fp]
 80187be:	4403      	add	r3, r0
 80187c0:	4682      	mov	sl, r0
 80187c2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80187c6:	9305      	str	r3, [sp, #20]
 80187c8:	1c93      	adds	r3, r2, #2
 80187ca:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80187ce:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80187d2:	32fe      	adds	r2, #254	; 0xfe
 80187d4:	18d1      	adds	r1, r2, r3
 80187d6:	461f      	mov	r7, r3
 80187d8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80187dc:	9100      	str	r1, [sp, #0]
 80187de:	2830      	cmp	r0, #48	; 0x30
 80187e0:	d0f8      	beq.n	80187d4 <__gethex+0x3c>
 80187e2:	f7ff ffc3 	bl	801876c <__hexdig_fun>
 80187e6:	4604      	mov	r4, r0
 80187e8:	2800      	cmp	r0, #0
 80187ea:	d13a      	bne.n	8018862 <__gethex+0xca>
 80187ec:	9901      	ldr	r1, [sp, #4]
 80187ee:	4652      	mov	r2, sl
 80187f0:	4638      	mov	r0, r7
 80187f2:	f001 f929 	bl	8019a48 <strncmp>
 80187f6:	4605      	mov	r5, r0
 80187f8:	2800      	cmp	r0, #0
 80187fa:	d168      	bne.n	80188ce <__gethex+0x136>
 80187fc:	f817 000a 	ldrb.w	r0, [r7, sl]
 8018800:	eb07 060a 	add.w	r6, r7, sl
 8018804:	f7ff ffb2 	bl	801876c <__hexdig_fun>
 8018808:	2800      	cmp	r0, #0
 801880a:	d062      	beq.n	80188d2 <__gethex+0x13a>
 801880c:	4633      	mov	r3, r6
 801880e:	7818      	ldrb	r0, [r3, #0]
 8018810:	2830      	cmp	r0, #48	; 0x30
 8018812:	461f      	mov	r7, r3
 8018814:	f103 0301 	add.w	r3, r3, #1
 8018818:	d0f9      	beq.n	801880e <__gethex+0x76>
 801881a:	f7ff ffa7 	bl	801876c <__hexdig_fun>
 801881e:	2301      	movs	r3, #1
 8018820:	fab0 f480 	clz	r4, r0
 8018824:	0964      	lsrs	r4, r4, #5
 8018826:	4635      	mov	r5, r6
 8018828:	9300      	str	r3, [sp, #0]
 801882a:	463a      	mov	r2, r7
 801882c:	4616      	mov	r6, r2
 801882e:	3201      	adds	r2, #1
 8018830:	7830      	ldrb	r0, [r6, #0]
 8018832:	f7ff ff9b 	bl	801876c <__hexdig_fun>
 8018836:	2800      	cmp	r0, #0
 8018838:	d1f8      	bne.n	801882c <__gethex+0x94>
 801883a:	9901      	ldr	r1, [sp, #4]
 801883c:	4652      	mov	r2, sl
 801883e:	4630      	mov	r0, r6
 8018840:	f001 f902 	bl	8019a48 <strncmp>
 8018844:	b980      	cbnz	r0, 8018868 <__gethex+0xd0>
 8018846:	b94d      	cbnz	r5, 801885c <__gethex+0xc4>
 8018848:	eb06 050a 	add.w	r5, r6, sl
 801884c:	462a      	mov	r2, r5
 801884e:	4616      	mov	r6, r2
 8018850:	3201      	adds	r2, #1
 8018852:	7830      	ldrb	r0, [r6, #0]
 8018854:	f7ff ff8a 	bl	801876c <__hexdig_fun>
 8018858:	2800      	cmp	r0, #0
 801885a:	d1f8      	bne.n	801884e <__gethex+0xb6>
 801885c:	1bad      	subs	r5, r5, r6
 801885e:	00ad      	lsls	r5, r5, #2
 8018860:	e004      	b.n	801886c <__gethex+0xd4>
 8018862:	2400      	movs	r4, #0
 8018864:	4625      	mov	r5, r4
 8018866:	e7e0      	b.n	801882a <__gethex+0x92>
 8018868:	2d00      	cmp	r5, #0
 801886a:	d1f7      	bne.n	801885c <__gethex+0xc4>
 801886c:	7833      	ldrb	r3, [r6, #0]
 801886e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018872:	2b50      	cmp	r3, #80	; 0x50
 8018874:	d13b      	bne.n	80188ee <__gethex+0x156>
 8018876:	7873      	ldrb	r3, [r6, #1]
 8018878:	2b2b      	cmp	r3, #43	; 0x2b
 801887a:	d02c      	beq.n	80188d6 <__gethex+0x13e>
 801887c:	2b2d      	cmp	r3, #45	; 0x2d
 801887e:	d02e      	beq.n	80188de <__gethex+0x146>
 8018880:	1c71      	adds	r1, r6, #1
 8018882:	f04f 0900 	mov.w	r9, #0
 8018886:	7808      	ldrb	r0, [r1, #0]
 8018888:	f7ff ff70 	bl	801876c <__hexdig_fun>
 801888c:	1e43      	subs	r3, r0, #1
 801888e:	b2db      	uxtb	r3, r3
 8018890:	2b18      	cmp	r3, #24
 8018892:	d82c      	bhi.n	80188ee <__gethex+0x156>
 8018894:	f1a0 0210 	sub.w	r2, r0, #16
 8018898:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801889c:	f7ff ff66 	bl	801876c <__hexdig_fun>
 80188a0:	1e43      	subs	r3, r0, #1
 80188a2:	b2db      	uxtb	r3, r3
 80188a4:	2b18      	cmp	r3, #24
 80188a6:	d91d      	bls.n	80188e4 <__gethex+0x14c>
 80188a8:	f1b9 0f00 	cmp.w	r9, #0
 80188ac:	d000      	beq.n	80188b0 <__gethex+0x118>
 80188ae:	4252      	negs	r2, r2
 80188b0:	4415      	add	r5, r2
 80188b2:	f8cb 1000 	str.w	r1, [fp]
 80188b6:	b1e4      	cbz	r4, 80188f2 <__gethex+0x15a>
 80188b8:	9b00      	ldr	r3, [sp, #0]
 80188ba:	2b00      	cmp	r3, #0
 80188bc:	bf14      	ite	ne
 80188be:	2700      	movne	r7, #0
 80188c0:	2706      	moveq	r7, #6
 80188c2:	4638      	mov	r0, r7
 80188c4:	b009      	add	sp, #36	; 0x24
 80188c6:	ecbd 8b02 	vpop	{d8}
 80188ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188ce:	463e      	mov	r6, r7
 80188d0:	4625      	mov	r5, r4
 80188d2:	2401      	movs	r4, #1
 80188d4:	e7ca      	b.n	801886c <__gethex+0xd4>
 80188d6:	f04f 0900 	mov.w	r9, #0
 80188da:	1cb1      	adds	r1, r6, #2
 80188dc:	e7d3      	b.n	8018886 <__gethex+0xee>
 80188de:	f04f 0901 	mov.w	r9, #1
 80188e2:	e7fa      	b.n	80188da <__gethex+0x142>
 80188e4:	230a      	movs	r3, #10
 80188e6:	fb03 0202 	mla	r2, r3, r2, r0
 80188ea:	3a10      	subs	r2, #16
 80188ec:	e7d4      	b.n	8018898 <__gethex+0x100>
 80188ee:	4631      	mov	r1, r6
 80188f0:	e7df      	b.n	80188b2 <__gethex+0x11a>
 80188f2:	1bf3      	subs	r3, r6, r7
 80188f4:	3b01      	subs	r3, #1
 80188f6:	4621      	mov	r1, r4
 80188f8:	2b07      	cmp	r3, #7
 80188fa:	dc0b      	bgt.n	8018914 <__gethex+0x17c>
 80188fc:	ee18 0a10 	vmov	r0, s16
 8018900:	f000 fa74 	bl	8018dec <_Balloc>
 8018904:	4604      	mov	r4, r0
 8018906:	b940      	cbnz	r0, 801891a <__gethex+0x182>
 8018908:	4b65      	ldr	r3, [pc, #404]	; (8018aa0 <__gethex+0x308>)
 801890a:	4602      	mov	r2, r0
 801890c:	21de      	movs	r1, #222	; 0xde
 801890e:	4865      	ldr	r0, [pc, #404]	; (8018aa4 <__gethex+0x30c>)
 8018910:	f001 f8ba 	bl	8019a88 <__assert_func>
 8018914:	3101      	adds	r1, #1
 8018916:	105b      	asrs	r3, r3, #1
 8018918:	e7ee      	b.n	80188f8 <__gethex+0x160>
 801891a:	f100 0914 	add.w	r9, r0, #20
 801891e:	f04f 0b00 	mov.w	fp, #0
 8018922:	f1ca 0301 	rsb	r3, sl, #1
 8018926:	f8cd 9008 	str.w	r9, [sp, #8]
 801892a:	f8cd b000 	str.w	fp, [sp]
 801892e:	9306      	str	r3, [sp, #24]
 8018930:	42b7      	cmp	r7, r6
 8018932:	d340      	bcc.n	80189b6 <__gethex+0x21e>
 8018934:	9802      	ldr	r0, [sp, #8]
 8018936:	9b00      	ldr	r3, [sp, #0]
 8018938:	f840 3b04 	str.w	r3, [r0], #4
 801893c:	eba0 0009 	sub.w	r0, r0, r9
 8018940:	1080      	asrs	r0, r0, #2
 8018942:	0146      	lsls	r6, r0, #5
 8018944:	6120      	str	r0, [r4, #16]
 8018946:	4618      	mov	r0, r3
 8018948:	f000 fb46 	bl	8018fd8 <__hi0bits>
 801894c:	1a30      	subs	r0, r6, r0
 801894e:	f8d8 6000 	ldr.w	r6, [r8]
 8018952:	42b0      	cmp	r0, r6
 8018954:	dd63      	ble.n	8018a1e <__gethex+0x286>
 8018956:	1b87      	subs	r7, r0, r6
 8018958:	4639      	mov	r1, r7
 801895a:	4620      	mov	r0, r4
 801895c:	f000 fee0 	bl	8019720 <__any_on>
 8018960:	4682      	mov	sl, r0
 8018962:	b1a8      	cbz	r0, 8018990 <__gethex+0x1f8>
 8018964:	1e7b      	subs	r3, r7, #1
 8018966:	1159      	asrs	r1, r3, #5
 8018968:	f003 021f 	and.w	r2, r3, #31
 801896c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8018970:	f04f 0a01 	mov.w	sl, #1
 8018974:	fa0a f202 	lsl.w	r2, sl, r2
 8018978:	420a      	tst	r2, r1
 801897a:	d009      	beq.n	8018990 <__gethex+0x1f8>
 801897c:	4553      	cmp	r3, sl
 801897e:	dd05      	ble.n	801898c <__gethex+0x1f4>
 8018980:	1eb9      	subs	r1, r7, #2
 8018982:	4620      	mov	r0, r4
 8018984:	f000 fecc 	bl	8019720 <__any_on>
 8018988:	2800      	cmp	r0, #0
 801898a:	d145      	bne.n	8018a18 <__gethex+0x280>
 801898c:	f04f 0a02 	mov.w	sl, #2
 8018990:	4639      	mov	r1, r7
 8018992:	4620      	mov	r0, r4
 8018994:	f7ff fe98 	bl	80186c8 <rshift>
 8018998:	443d      	add	r5, r7
 801899a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801899e:	42ab      	cmp	r3, r5
 80189a0:	da4c      	bge.n	8018a3c <__gethex+0x2a4>
 80189a2:	ee18 0a10 	vmov	r0, s16
 80189a6:	4621      	mov	r1, r4
 80189a8:	f000 fa60 	bl	8018e6c <_Bfree>
 80189ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80189ae:	2300      	movs	r3, #0
 80189b0:	6013      	str	r3, [r2, #0]
 80189b2:	27a3      	movs	r7, #163	; 0xa3
 80189b4:	e785      	b.n	80188c2 <__gethex+0x12a>
 80189b6:	1e73      	subs	r3, r6, #1
 80189b8:	9a05      	ldr	r2, [sp, #20]
 80189ba:	9303      	str	r3, [sp, #12]
 80189bc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80189c0:	4293      	cmp	r3, r2
 80189c2:	d019      	beq.n	80189f8 <__gethex+0x260>
 80189c4:	f1bb 0f20 	cmp.w	fp, #32
 80189c8:	d107      	bne.n	80189da <__gethex+0x242>
 80189ca:	9b02      	ldr	r3, [sp, #8]
 80189cc:	9a00      	ldr	r2, [sp, #0]
 80189ce:	f843 2b04 	str.w	r2, [r3], #4
 80189d2:	9302      	str	r3, [sp, #8]
 80189d4:	2300      	movs	r3, #0
 80189d6:	9300      	str	r3, [sp, #0]
 80189d8:	469b      	mov	fp, r3
 80189da:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80189de:	f7ff fec5 	bl	801876c <__hexdig_fun>
 80189e2:	9b00      	ldr	r3, [sp, #0]
 80189e4:	f000 000f 	and.w	r0, r0, #15
 80189e8:	fa00 f00b 	lsl.w	r0, r0, fp
 80189ec:	4303      	orrs	r3, r0
 80189ee:	9300      	str	r3, [sp, #0]
 80189f0:	f10b 0b04 	add.w	fp, fp, #4
 80189f4:	9b03      	ldr	r3, [sp, #12]
 80189f6:	e00d      	b.n	8018a14 <__gethex+0x27c>
 80189f8:	9b03      	ldr	r3, [sp, #12]
 80189fa:	9a06      	ldr	r2, [sp, #24]
 80189fc:	4413      	add	r3, r2
 80189fe:	42bb      	cmp	r3, r7
 8018a00:	d3e0      	bcc.n	80189c4 <__gethex+0x22c>
 8018a02:	4618      	mov	r0, r3
 8018a04:	9901      	ldr	r1, [sp, #4]
 8018a06:	9307      	str	r3, [sp, #28]
 8018a08:	4652      	mov	r2, sl
 8018a0a:	f001 f81d 	bl	8019a48 <strncmp>
 8018a0e:	9b07      	ldr	r3, [sp, #28]
 8018a10:	2800      	cmp	r0, #0
 8018a12:	d1d7      	bne.n	80189c4 <__gethex+0x22c>
 8018a14:	461e      	mov	r6, r3
 8018a16:	e78b      	b.n	8018930 <__gethex+0x198>
 8018a18:	f04f 0a03 	mov.w	sl, #3
 8018a1c:	e7b8      	b.n	8018990 <__gethex+0x1f8>
 8018a1e:	da0a      	bge.n	8018a36 <__gethex+0x29e>
 8018a20:	1a37      	subs	r7, r6, r0
 8018a22:	4621      	mov	r1, r4
 8018a24:	ee18 0a10 	vmov	r0, s16
 8018a28:	463a      	mov	r2, r7
 8018a2a:	f000 fc3b 	bl	80192a4 <__lshift>
 8018a2e:	1bed      	subs	r5, r5, r7
 8018a30:	4604      	mov	r4, r0
 8018a32:	f100 0914 	add.w	r9, r0, #20
 8018a36:	f04f 0a00 	mov.w	sl, #0
 8018a3a:	e7ae      	b.n	801899a <__gethex+0x202>
 8018a3c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018a40:	42a8      	cmp	r0, r5
 8018a42:	dd72      	ble.n	8018b2a <__gethex+0x392>
 8018a44:	1b45      	subs	r5, r0, r5
 8018a46:	42ae      	cmp	r6, r5
 8018a48:	dc36      	bgt.n	8018ab8 <__gethex+0x320>
 8018a4a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018a4e:	2b02      	cmp	r3, #2
 8018a50:	d02a      	beq.n	8018aa8 <__gethex+0x310>
 8018a52:	2b03      	cmp	r3, #3
 8018a54:	d02c      	beq.n	8018ab0 <__gethex+0x318>
 8018a56:	2b01      	cmp	r3, #1
 8018a58:	d115      	bne.n	8018a86 <__gethex+0x2ee>
 8018a5a:	42ae      	cmp	r6, r5
 8018a5c:	d113      	bne.n	8018a86 <__gethex+0x2ee>
 8018a5e:	2e01      	cmp	r6, #1
 8018a60:	d10b      	bne.n	8018a7a <__gethex+0x2e2>
 8018a62:	9a04      	ldr	r2, [sp, #16]
 8018a64:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018a68:	6013      	str	r3, [r2, #0]
 8018a6a:	2301      	movs	r3, #1
 8018a6c:	6123      	str	r3, [r4, #16]
 8018a6e:	f8c9 3000 	str.w	r3, [r9]
 8018a72:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018a74:	2762      	movs	r7, #98	; 0x62
 8018a76:	601c      	str	r4, [r3, #0]
 8018a78:	e723      	b.n	80188c2 <__gethex+0x12a>
 8018a7a:	1e71      	subs	r1, r6, #1
 8018a7c:	4620      	mov	r0, r4
 8018a7e:	f000 fe4f 	bl	8019720 <__any_on>
 8018a82:	2800      	cmp	r0, #0
 8018a84:	d1ed      	bne.n	8018a62 <__gethex+0x2ca>
 8018a86:	ee18 0a10 	vmov	r0, s16
 8018a8a:	4621      	mov	r1, r4
 8018a8c:	f000 f9ee 	bl	8018e6c <_Bfree>
 8018a90:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018a92:	2300      	movs	r3, #0
 8018a94:	6013      	str	r3, [r2, #0]
 8018a96:	2750      	movs	r7, #80	; 0x50
 8018a98:	e713      	b.n	80188c2 <__gethex+0x12a>
 8018a9a:	bf00      	nop
 8018a9c:	0801c518 	.word	0x0801c518
 8018aa0:	0801c49c 	.word	0x0801c49c
 8018aa4:	0801c4ad 	.word	0x0801c4ad
 8018aa8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018aaa:	2b00      	cmp	r3, #0
 8018aac:	d1eb      	bne.n	8018a86 <__gethex+0x2ee>
 8018aae:	e7d8      	b.n	8018a62 <__gethex+0x2ca>
 8018ab0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018ab2:	2b00      	cmp	r3, #0
 8018ab4:	d1d5      	bne.n	8018a62 <__gethex+0x2ca>
 8018ab6:	e7e6      	b.n	8018a86 <__gethex+0x2ee>
 8018ab8:	1e6f      	subs	r7, r5, #1
 8018aba:	f1ba 0f00 	cmp.w	sl, #0
 8018abe:	d131      	bne.n	8018b24 <__gethex+0x38c>
 8018ac0:	b127      	cbz	r7, 8018acc <__gethex+0x334>
 8018ac2:	4639      	mov	r1, r7
 8018ac4:	4620      	mov	r0, r4
 8018ac6:	f000 fe2b 	bl	8019720 <__any_on>
 8018aca:	4682      	mov	sl, r0
 8018acc:	117b      	asrs	r3, r7, #5
 8018ace:	2101      	movs	r1, #1
 8018ad0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8018ad4:	f007 071f 	and.w	r7, r7, #31
 8018ad8:	fa01 f707 	lsl.w	r7, r1, r7
 8018adc:	421f      	tst	r7, r3
 8018ade:	4629      	mov	r1, r5
 8018ae0:	4620      	mov	r0, r4
 8018ae2:	bf18      	it	ne
 8018ae4:	f04a 0a02 	orrne.w	sl, sl, #2
 8018ae8:	1b76      	subs	r6, r6, r5
 8018aea:	f7ff fded 	bl	80186c8 <rshift>
 8018aee:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8018af2:	2702      	movs	r7, #2
 8018af4:	f1ba 0f00 	cmp.w	sl, #0
 8018af8:	d048      	beq.n	8018b8c <__gethex+0x3f4>
 8018afa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018afe:	2b02      	cmp	r3, #2
 8018b00:	d015      	beq.n	8018b2e <__gethex+0x396>
 8018b02:	2b03      	cmp	r3, #3
 8018b04:	d017      	beq.n	8018b36 <__gethex+0x39e>
 8018b06:	2b01      	cmp	r3, #1
 8018b08:	d109      	bne.n	8018b1e <__gethex+0x386>
 8018b0a:	f01a 0f02 	tst.w	sl, #2
 8018b0e:	d006      	beq.n	8018b1e <__gethex+0x386>
 8018b10:	f8d9 0000 	ldr.w	r0, [r9]
 8018b14:	ea4a 0a00 	orr.w	sl, sl, r0
 8018b18:	f01a 0f01 	tst.w	sl, #1
 8018b1c:	d10e      	bne.n	8018b3c <__gethex+0x3a4>
 8018b1e:	f047 0710 	orr.w	r7, r7, #16
 8018b22:	e033      	b.n	8018b8c <__gethex+0x3f4>
 8018b24:	f04f 0a01 	mov.w	sl, #1
 8018b28:	e7d0      	b.n	8018acc <__gethex+0x334>
 8018b2a:	2701      	movs	r7, #1
 8018b2c:	e7e2      	b.n	8018af4 <__gethex+0x35c>
 8018b2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018b30:	f1c3 0301 	rsb	r3, r3, #1
 8018b34:	9315      	str	r3, [sp, #84]	; 0x54
 8018b36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018b38:	2b00      	cmp	r3, #0
 8018b3a:	d0f0      	beq.n	8018b1e <__gethex+0x386>
 8018b3c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8018b40:	f104 0314 	add.w	r3, r4, #20
 8018b44:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8018b48:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8018b4c:	f04f 0c00 	mov.w	ip, #0
 8018b50:	4618      	mov	r0, r3
 8018b52:	f853 2b04 	ldr.w	r2, [r3], #4
 8018b56:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018b5a:	d01c      	beq.n	8018b96 <__gethex+0x3fe>
 8018b5c:	3201      	adds	r2, #1
 8018b5e:	6002      	str	r2, [r0, #0]
 8018b60:	2f02      	cmp	r7, #2
 8018b62:	f104 0314 	add.w	r3, r4, #20
 8018b66:	d13f      	bne.n	8018be8 <__gethex+0x450>
 8018b68:	f8d8 2000 	ldr.w	r2, [r8]
 8018b6c:	3a01      	subs	r2, #1
 8018b6e:	42b2      	cmp	r2, r6
 8018b70:	d10a      	bne.n	8018b88 <__gethex+0x3f0>
 8018b72:	1171      	asrs	r1, r6, #5
 8018b74:	2201      	movs	r2, #1
 8018b76:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018b7a:	f006 061f 	and.w	r6, r6, #31
 8018b7e:	fa02 f606 	lsl.w	r6, r2, r6
 8018b82:	421e      	tst	r6, r3
 8018b84:	bf18      	it	ne
 8018b86:	4617      	movne	r7, r2
 8018b88:	f047 0720 	orr.w	r7, r7, #32
 8018b8c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018b8e:	601c      	str	r4, [r3, #0]
 8018b90:	9b04      	ldr	r3, [sp, #16]
 8018b92:	601d      	str	r5, [r3, #0]
 8018b94:	e695      	b.n	80188c2 <__gethex+0x12a>
 8018b96:	4299      	cmp	r1, r3
 8018b98:	f843 cc04 	str.w	ip, [r3, #-4]
 8018b9c:	d8d8      	bhi.n	8018b50 <__gethex+0x3b8>
 8018b9e:	68a3      	ldr	r3, [r4, #8]
 8018ba0:	459b      	cmp	fp, r3
 8018ba2:	db19      	blt.n	8018bd8 <__gethex+0x440>
 8018ba4:	6861      	ldr	r1, [r4, #4]
 8018ba6:	ee18 0a10 	vmov	r0, s16
 8018baa:	3101      	adds	r1, #1
 8018bac:	f000 f91e 	bl	8018dec <_Balloc>
 8018bb0:	4681      	mov	r9, r0
 8018bb2:	b918      	cbnz	r0, 8018bbc <__gethex+0x424>
 8018bb4:	4b1a      	ldr	r3, [pc, #104]	; (8018c20 <__gethex+0x488>)
 8018bb6:	4602      	mov	r2, r0
 8018bb8:	2184      	movs	r1, #132	; 0x84
 8018bba:	e6a8      	b.n	801890e <__gethex+0x176>
 8018bbc:	6922      	ldr	r2, [r4, #16]
 8018bbe:	3202      	adds	r2, #2
 8018bc0:	f104 010c 	add.w	r1, r4, #12
 8018bc4:	0092      	lsls	r2, r2, #2
 8018bc6:	300c      	adds	r0, #12
 8018bc8:	f7fd f892 	bl	8015cf0 <memcpy>
 8018bcc:	4621      	mov	r1, r4
 8018bce:	ee18 0a10 	vmov	r0, s16
 8018bd2:	f000 f94b 	bl	8018e6c <_Bfree>
 8018bd6:	464c      	mov	r4, r9
 8018bd8:	6923      	ldr	r3, [r4, #16]
 8018bda:	1c5a      	adds	r2, r3, #1
 8018bdc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018be0:	6122      	str	r2, [r4, #16]
 8018be2:	2201      	movs	r2, #1
 8018be4:	615a      	str	r2, [r3, #20]
 8018be6:	e7bb      	b.n	8018b60 <__gethex+0x3c8>
 8018be8:	6922      	ldr	r2, [r4, #16]
 8018bea:	455a      	cmp	r2, fp
 8018bec:	dd0b      	ble.n	8018c06 <__gethex+0x46e>
 8018bee:	2101      	movs	r1, #1
 8018bf0:	4620      	mov	r0, r4
 8018bf2:	f7ff fd69 	bl	80186c8 <rshift>
 8018bf6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018bfa:	3501      	adds	r5, #1
 8018bfc:	42ab      	cmp	r3, r5
 8018bfe:	f6ff aed0 	blt.w	80189a2 <__gethex+0x20a>
 8018c02:	2701      	movs	r7, #1
 8018c04:	e7c0      	b.n	8018b88 <__gethex+0x3f0>
 8018c06:	f016 061f 	ands.w	r6, r6, #31
 8018c0a:	d0fa      	beq.n	8018c02 <__gethex+0x46a>
 8018c0c:	449a      	add	sl, r3
 8018c0e:	f1c6 0620 	rsb	r6, r6, #32
 8018c12:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8018c16:	f000 f9df 	bl	8018fd8 <__hi0bits>
 8018c1a:	42b0      	cmp	r0, r6
 8018c1c:	dbe7      	blt.n	8018bee <__gethex+0x456>
 8018c1e:	e7f0      	b.n	8018c02 <__gethex+0x46a>
 8018c20:	0801c49c 	.word	0x0801c49c

08018c24 <L_shift>:
 8018c24:	f1c2 0208 	rsb	r2, r2, #8
 8018c28:	0092      	lsls	r2, r2, #2
 8018c2a:	b570      	push	{r4, r5, r6, lr}
 8018c2c:	f1c2 0620 	rsb	r6, r2, #32
 8018c30:	6843      	ldr	r3, [r0, #4]
 8018c32:	6804      	ldr	r4, [r0, #0]
 8018c34:	fa03 f506 	lsl.w	r5, r3, r6
 8018c38:	432c      	orrs	r4, r5
 8018c3a:	40d3      	lsrs	r3, r2
 8018c3c:	6004      	str	r4, [r0, #0]
 8018c3e:	f840 3f04 	str.w	r3, [r0, #4]!
 8018c42:	4288      	cmp	r0, r1
 8018c44:	d3f4      	bcc.n	8018c30 <L_shift+0xc>
 8018c46:	bd70      	pop	{r4, r5, r6, pc}

08018c48 <__match>:
 8018c48:	b530      	push	{r4, r5, lr}
 8018c4a:	6803      	ldr	r3, [r0, #0]
 8018c4c:	3301      	adds	r3, #1
 8018c4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018c52:	b914      	cbnz	r4, 8018c5a <__match+0x12>
 8018c54:	6003      	str	r3, [r0, #0]
 8018c56:	2001      	movs	r0, #1
 8018c58:	bd30      	pop	{r4, r5, pc}
 8018c5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018c5e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8018c62:	2d19      	cmp	r5, #25
 8018c64:	bf98      	it	ls
 8018c66:	3220      	addls	r2, #32
 8018c68:	42a2      	cmp	r2, r4
 8018c6a:	d0f0      	beq.n	8018c4e <__match+0x6>
 8018c6c:	2000      	movs	r0, #0
 8018c6e:	e7f3      	b.n	8018c58 <__match+0x10>

08018c70 <__hexnan>:
 8018c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c74:	680b      	ldr	r3, [r1, #0]
 8018c76:	6801      	ldr	r1, [r0, #0]
 8018c78:	115e      	asrs	r6, r3, #5
 8018c7a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8018c7e:	f013 031f 	ands.w	r3, r3, #31
 8018c82:	b087      	sub	sp, #28
 8018c84:	bf18      	it	ne
 8018c86:	3604      	addne	r6, #4
 8018c88:	2500      	movs	r5, #0
 8018c8a:	1f37      	subs	r7, r6, #4
 8018c8c:	4682      	mov	sl, r0
 8018c8e:	4690      	mov	r8, r2
 8018c90:	9301      	str	r3, [sp, #4]
 8018c92:	f846 5c04 	str.w	r5, [r6, #-4]
 8018c96:	46b9      	mov	r9, r7
 8018c98:	463c      	mov	r4, r7
 8018c9a:	9502      	str	r5, [sp, #8]
 8018c9c:	46ab      	mov	fp, r5
 8018c9e:	784a      	ldrb	r2, [r1, #1]
 8018ca0:	1c4b      	adds	r3, r1, #1
 8018ca2:	9303      	str	r3, [sp, #12]
 8018ca4:	b342      	cbz	r2, 8018cf8 <__hexnan+0x88>
 8018ca6:	4610      	mov	r0, r2
 8018ca8:	9105      	str	r1, [sp, #20]
 8018caa:	9204      	str	r2, [sp, #16]
 8018cac:	f7ff fd5e 	bl	801876c <__hexdig_fun>
 8018cb0:	2800      	cmp	r0, #0
 8018cb2:	d14f      	bne.n	8018d54 <__hexnan+0xe4>
 8018cb4:	9a04      	ldr	r2, [sp, #16]
 8018cb6:	9905      	ldr	r1, [sp, #20]
 8018cb8:	2a20      	cmp	r2, #32
 8018cba:	d818      	bhi.n	8018cee <__hexnan+0x7e>
 8018cbc:	9b02      	ldr	r3, [sp, #8]
 8018cbe:	459b      	cmp	fp, r3
 8018cc0:	dd13      	ble.n	8018cea <__hexnan+0x7a>
 8018cc2:	454c      	cmp	r4, r9
 8018cc4:	d206      	bcs.n	8018cd4 <__hexnan+0x64>
 8018cc6:	2d07      	cmp	r5, #7
 8018cc8:	dc04      	bgt.n	8018cd4 <__hexnan+0x64>
 8018cca:	462a      	mov	r2, r5
 8018ccc:	4649      	mov	r1, r9
 8018cce:	4620      	mov	r0, r4
 8018cd0:	f7ff ffa8 	bl	8018c24 <L_shift>
 8018cd4:	4544      	cmp	r4, r8
 8018cd6:	d950      	bls.n	8018d7a <__hexnan+0x10a>
 8018cd8:	2300      	movs	r3, #0
 8018cda:	f1a4 0904 	sub.w	r9, r4, #4
 8018cde:	f844 3c04 	str.w	r3, [r4, #-4]
 8018ce2:	f8cd b008 	str.w	fp, [sp, #8]
 8018ce6:	464c      	mov	r4, r9
 8018ce8:	461d      	mov	r5, r3
 8018cea:	9903      	ldr	r1, [sp, #12]
 8018cec:	e7d7      	b.n	8018c9e <__hexnan+0x2e>
 8018cee:	2a29      	cmp	r2, #41	; 0x29
 8018cf0:	d156      	bne.n	8018da0 <__hexnan+0x130>
 8018cf2:	3102      	adds	r1, #2
 8018cf4:	f8ca 1000 	str.w	r1, [sl]
 8018cf8:	f1bb 0f00 	cmp.w	fp, #0
 8018cfc:	d050      	beq.n	8018da0 <__hexnan+0x130>
 8018cfe:	454c      	cmp	r4, r9
 8018d00:	d206      	bcs.n	8018d10 <__hexnan+0xa0>
 8018d02:	2d07      	cmp	r5, #7
 8018d04:	dc04      	bgt.n	8018d10 <__hexnan+0xa0>
 8018d06:	462a      	mov	r2, r5
 8018d08:	4649      	mov	r1, r9
 8018d0a:	4620      	mov	r0, r4
 8018d0c:	f7ff ff8a 	bl	8018c24 <L_shift>
 8018d10:	4544      	cmp	r4, r8
 8018d12:	d934      	bls.n	8018d7e <__hexnan+0x10e>
 8018d14:	f1a8 0204 	sub.w	r2, r8, #4
 8018d18:	4623      	mov	r3, r4
 8018d1a:	f853 1b04 	ldr.w	r1, [r3], #4
 8018d1e:	f842 1f04 	str.w	r1, [r2, #4]!
 8018d22:	429f      	cmp	r7, r3
 8018d24:	d2f9      	bcs.n	8018d1a <__hexnan+0xaa>
 8018d26:	1b3b      	subs	r3, r7, r4
 8018d28:	f023 0303 	bic.w	r3, r3, #3
 8018d2c:	3304      	adds	r3, #4
 8018d2e:	3401      	adds	r4, #1
 8018d30:	3e03      	subs	r6, #3
 8018d32:	42b4      	cmp	r4, r6
 8018d34:	bf88      	it	hi
 8018d36:	2304      	movhi	r3, #4
 8018d38:	4443      	add	r3, r8
 8018d3a:	2200      	movs	r2, #0
 8018d3c:	f843 2b04 	str.w	r2, [r3], #4
 8018d40:	429f      	cmp	r7, r3
 8018d42:	d2fb      	bcs.n	8018d3c <__hexnan+0xcc>
 8018d44:	683b      	ldr	r3, [r7, #0]
 8018d46:	b91b      	cbnz	r3, 8018d50 <__hexnan+0xe0>
 8018d48:	4547      	cmp	r7, r8
 8018d4a:	d127      	bne.n	8018d9c <__hexnan+0x12c>
 8018d4c:	2301      	movs	r3, #1
 8018d4e:	603b      	str	r3, [r7, #0]
 8018d50:	2005      	movs	r0, #5
 8018d52:	e026      	b.n	8018da2 <__hexnan+0x132>
 8018d54:	3501      	adds	r5, #1
 8018d56:	2d08      	cmp	r5, #8
 8018d58:	f10b 0b01 	add.w	fp, fp, #1
 8018d5c:	dd06      	ble.n	8018d6c <__hexnan+0xfc>
 8018d5e:	4544      	cmp	r4, r8
 8018d60:	d9c3      	bls.n	8018cea <__hexnan+0x7a>
 8018d62:	2300      	movs	r3, #0
 8018d64:	f844 3c04 	str.w	r3, [r4, #-4]
 8018d68:	2501      	movs	r5, #1
 8018d6a:	3c04      	subs	r4, #4
 8018d6c:	6822      	ldr	r2, [r4, #0]
 8018d6e:	f000 000f 	and.w	r0, r0, #15
 8018d72:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8018d76:	6022      	str	r2, [r4, #0]
 8018d78:	e7b7      	b.n	8018cea <__hexnan+0x7a>
 8018d7a:	2508      	movs	r5, #8
 8018d7c:	e7b5      	b.n	8018cea <__hexnan+0x7a>
 8018d7e:	9b01      	ldr	r3, [sp, #4]
 8018d80:	2b00      	cmp	r3, #0
 8018d82:	d0df      	beq.n	8018d44 <__hexnan+0xd4>
 8018d84:	f04f 32ff 	mov.w	r2, #4294967295
 8018d88:	f1c3 0320 	rsb	r3, r3, #32
 8018d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8018d90:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8018d94:	401a      	ands	r2, r3
 8018d96:	f846 2c04 	str.w	r2, [r6, #-4]
 8018d9a:	e7d3      	b.n	8018d44 <__hexnan+0xd4>
 8018d9c:	3f04      	subs	r7, #4
 8018d9e:	e7d1      	b.n	8018d44 <__hexnan+0xd4>
 8018da0:	2004      	movs	r0, #4
 8018da2:	b007      	add	sp, #28
 8018da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018da8 <_localeconv_r>:
 8018da8:	4800      	ldr	r0, [pc, #0]	; (8018dac <_localeconv_r+0x4>)
 8018daa:	4770      	bx	lr
 8018dac:	20002364 	.word	0x20002364

08018db0 <__ascii_mbtowc>:
 8018db0:	b082      	sub	sp, #8
 8018db2:	b901      	cbnz	r1, 8018db6 <__ascii_mbtowc+0x6>
 8018db4:	a901      	add	r1, sp, #4
 8018db6:	b142      	cbz	r2, 8018dca <__ascii_mbtowc+0x1a>
 8018db8:	b14b      	cbz	r3, 8018dce <__ascii_mbtowc+0x1e>
 8018dba:	7813      	ldrb	r3, [r2, #0]
 8018dbc:	600b      	str	r3, [r1, #0]
 8018dbe:	7812      	ldrb	r2, [r2, #0]
 8018dc0:	1e10      	subs	r0, r2, #0
 8018dc2:	bf18      	it	ne
 8018dc4:	2001      	movne	r0, #1
 8018dc6:	b002      	add	sp, #8
 8018dc8:	4770      	bx	lr
 8018dca:	4610      	mov	r0, r2
 8018dcc:	e7fb      	b.n	8018dc6 <__ascii_mbtowc+0x16>
 8018dce:	f06f 0001 	mvn.w	r0, #1
 8018dd2:	e7f8      	b.n	8018dc6 <__ascii_mbtowc+0x16>

08018dd4 <__malloc_lock>:
 8018dd4:	4801      	ldr	r0, [pc, #4]	; (8018ddc <__malloc_lock+0x8>)
 8018dd6:	f000 be88 	b.w	8019aea <__retarget_lock_acquire_recursive>
 8018dda:	bf00      	nop
 8018ddc:	2000fb44 	.word	0x2000fb44

08018de0 <__malloc_unlock>:
 8018de0:	4801      	ldr	r0, [pc, #4]	; (8018de8 <__malloc_unlock+0x8>)
 8018de2:	f000 be83 	b.w	8019aec <__retarget_lock_release_recursive>
 8018de6:	bf00      	nop
 8018de8:	2000fb44 	.word	0x2000fb44

08018dec <_Balloc>:
 8018dec:	b570      	push	{r4, r5, r6, lr}
 8018dee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018df0:	4604      	mov	r4, r0
 8018df2:	460d      	mov	r5, r1
 8018df4:	b976      	cbnz	r6, 8018e14 <_Balloc+0x28>
 8018df6:	2010      	movs	r0, #16
 8018df8:	f7fc ff6a 	bl	8015cd0 <malloc>
 8018dfc:	4602      	mov	r2, r0
 8018dfe:	6260      	str	r0, [r4, #36]	; 0x24
 8018e00:	b920      	cbnz	r0, 8018e0c <_Balloc+0x20>
 8018e02:	4b18      	ldr	r3, [pc, #96]	; (8018e64 <_Balloc+0x78>)
 8018e04:	4818      	ldr	r0, [pc, #96]	; (8018e68 <_Balloc+0x7c>)
 8018e06:	2166      	movs	r1, #102	; 0x66
 8018e08:	f000 fe3e 	bl	8019a88 <__assert_func>
 8018e0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018e10:	6006      	str	r6, [r0, #0]
 8018e12:	60c6      	str	r6, [r0, #12]
 8018e14:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8018e16:	68f3      	ldr	r3, [r6, #12]
 8018e18:	b183      	cbz	r3, 8018e3c <_Balloc+0x50>
 8018e1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018e1c:	68db      	ldr	r3, [r3, #12]
 8018e1e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018e22:	b9b8      	cbnz	r0, 8018e54 <_Balloc+0x68>
 8018e24:	2101      	movs	r1, #1
 8018e26:	fa01 f605 	lsl.w	r6, r1, r5
 8018e2a:	1d72      	adds	r2, r6, #5
 8018e2c:	0092      	lsls	r2, r2, #2
 8018e2e:	4620      	mov	r0, r4
 8018e30:	f000 fc97 	bl	8019762 <_calloc_r>
 8018e34:	b160      	cbz	r0, 8018e50 <_Balloc+0x64>
 8018e36:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8018e3a:	e00e      	b.n	8018e5a <_Balloc+0x6e>
 8018e3c:	2221      	movs	r2, #33	; 0x21
 8018e3e:	2104      	movs	r1, #4
 8018e40:	4620      	mov	r0, r4
 8018e42:	f000 fc8e 	bl	8019762 <_calloc_r>
 8018e46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018e48:	60f0      	str	r0, [r6, #12]
 8018e4a:	68db      	ldr	r3, [r3, #12]
 8018e4c:	2b00      	cmp	r3, #0
 8018e4e:	d1e4      	bne.n	8018e1a <_Balloc+0x2e>
 8018e50:	2000      	movs	r0, #0
 8018e52:	bd70      	pop	{r4, r5, r6, pc}
 8018e54:	6802      	ldr	r2, [r0, #0]
 8018e56:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018e5a:	2300      	movs	r3, #0
 8018e5c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018e60:	e7f7      	b.n	8018e52 <_Balloc+0x66>
 8018e62:	bf00      	nop
 8018e64:	0801c426 	.word	0x0801c426
 8018e68:	0801c52c 	.word	0x0801c52c

08018e6c <_Bfree>:
 8018e6c:	b570      	push	{r4, r5, r6, lr}
 8018e6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018e70:	4605      	mov	r5, r0
 8018e72:	460c      	mov	r4, r1
 8018e74:	b976      	cbnz	r6, 8018e94 <_Bfree+0x28>
 8018e76:	2010      	movs	r0, #16
 8018e78:	f7fc ff2a 	bl	8015cd0 <malloc>
 8018e7c:	4602      	mov	r2, r0
 8018e7e:	6268      	str	r0, [r5, #36]	; 0x24
 8018e80:	b920      	cbnz	r0, 8018e8c <_Bfree+0x20>
 8018e82:	4b09      	ldr	r3, [pc, #36]	; (8018ea8 <_Bfree+0x3c>)
 8018e84:	4809      	ldr	r0, [pc, #36]	; (8018eac <_Bfree+0x40>)
 8018e86:	218a      	movs	r1, #138	; 0x8a
 8018e88:	f000 fdfe 	bl	8019a88 <__assert_func>
 8018e8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018e90:	6006      	str	r6, [r0, #0]
 8018e92:	60c6      	str	r6, [r0, #12]
 8018e94:	b13c      	cbz	r4, 8018ea6 <_Bfree+0x3a>
 8018e96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018e98:	6862      	ldr	r2, [r4, #4]
 8018e9a:	68db      	ldr	r3, [r3, #12]
 8018e9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018ea0:	6021      	str	r1, [r4, #0]
 8018ea2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8018ea6:	bd70      	pop	{r4, r5, r6, pc}
 8018ea8:	0801c426 	.word	0x0801c426
 8018eac:	0801c52c 	.word	0x0801c52c

08018eb0 <__multadd>:
 8018eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018eb4:	690e      	ldr	r6, [r1, #16]
 8018eb6:	4607      	mov	r7, r0
 8018eb8:	4698      	mov	r8, r3
 8018eba:	460c      	mov	r4, r1
 8018ebc:	f101 0014 	add.w	r0, r1, #20
 8018ec0:	2300      	movs	r3, #0
 8018ec2:	6805      	ldr	r5, [r0, #0]
 8018ec4:	b2a9      	uxth	r1, r5
 8018ec6:	fb02 8101 	mla	r1, r2, r1, r8
 8018eca:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8018ece:	0c2d      	lsrs	r5, r5, #16
 8018ed0:	fb02 c505 	mla	r5, r2, r5, ip
 8018ed4:	b289      	uxth	r1, r1
 8018ed6:	3301      	adds	r3, #1
 8018ed8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8018edc:	429e      	cmp	r6, r3
 8018ede:	f840 1b04 	str.w	r1, [r0], #4
 8018ee2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8018ee6:	dcec      	bgt.n	8018ec2 <__multadd+0x12>
 8018ee8:	f1b8 0f00 	cmp.w	r8, #0
 8018eec:	d022      	beq.n	8018f34 <__multadd+0x84>
 8018eee:	68a3      	ldr	r3, [r4, #8]
 8018ef0:	42b3      	cmp	r3, r6
 8018ef2:	dc19      	bgt.n	8018f28 <__multadd+0x78>
 8018ef4:	6861      	ldr	r1, [r4, #4]
 8018ef6:	4638      	mov	r0, r7
 8018ef8:	3101      	adds	r1, #1
 8018efa:	f7ff ff77 	bl	8018dec <_Balloc>
 8018efe:	4605      	mov	r5, r0
 8018f00:	b928      	cbnz	r0, 8018f0e <__multadd+0x5e>
 8018f02:	4602      	mov	r2, r0
 8018f04:	4b0d      	ldr	r3, [pc, #52]	; (8018f3c <__multadd+0x8c>)
 8018f06:	480e      	ldr	r0, [pc, #56]	; (8018f40 <__multadd+0x90>)
 8018f08:	21b5      	movs	r1, #181	; 0xb5
 8018f0a:	f000 fdbd 	bl	8019a88 <__assert_func>
 8018f0e:	6922      	ldr	r2, [r4, #16]
 8018f10:	3202      	adds	r2, #2
 8018f12:	f104 010c 	add.w	r1, r4, #12
 8018f16:	0092      	lsls	r2, r2, #2
 8018f18:	300c      	adds	r0, #12
 8018f1a:	f7fc fee9 	bl	8015cf0 <memcpy>
 8018f1e:	4621      	mov	r1, r4
 8018f20:	4638      	mov	r0, r7
 8018f22:	f7ff ffa3 	bl	8018e6c <_Bfree>
 8018f26:	462c      	mov	r4, r5
 8018f28:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8018f2c:	3601      	adds	r6, #1
 8018f2e:	f8c3 8014 	str.w	r8, [r3, #20]
 8018f32:	6126      	str	r6, [r4, #16]
 8018f34:	4620      	mov	r0, r4
 8018f36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f3a:	bf00      	nop
 8018f3c:	0801c49c 	.word	0x0801c49c
 8018f40:	0801c52c 	.word	0x0801c52c

08018f44 <__s2b>:
 8018f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018f48:	460c      	mov	r4, r1
 8018f4a:	4615      	mov	r5, r2
 8018f4c:	461f      	mov	r7, r3
 8018f4e:	2209      	movs	r2, #9
 8018f50:	3308      	adds	r3, #8
 8018f52:	4606      	mov	r6, r0
 8018f54:	fb93 f3f2 	sdiv	r3, r3, r2
 8018f58:	2100      	movs	r1, #0
 8018f5a:	2201      	movs	r2, #1
 8018f5c:	429a      	cmp	r2, r3
 8018f5e:	db09      	blt.n	8018f74 <__s2b+0x30>
 8018f60:	4630      	mov	r0, r6
 8018f62:	f7ff ff43 	bl	8018dec <_Balloc>
 8018f66:	b940      	cbnz	r0, 8018f7a <__s2b+0x36>
 8018f68:	4602      	mov	r2, r0
 8018f6a:	4b19      	ldr	r3, [pc, #100]	; (8018fd0 <__s2b+0x8c>)
 8018f6c:	4819      	ldr	r0, [pc, #100]	; (8018fd4 <__s2b+0x90>)
 8018f6e:	21ce      	movs	r1, #206	; 0xce
 8018f70:	f000 fd8a 	bl	8019a88 <__assert_func>
 8018f74:	0052      	lsls	r2, r2, #1
 8018f76:	3101      	adds	r1, #1
 8018f78:	e7f0      	b.n	8018f5c <__s2b+0x18>
 8018f7a:	9b08      	ldr	r3, [sp, #32]
 8018f7c:	6143      	str	r3, [r0, #20]
 8018f7e:	2d09      	cmp	r5, #9
 8018f80:	f04f 0301 	mov.w	r3, #1
 8018f84:	6103      	str	r3, [r0, #16]
 8018f86:	dd16      	ble.n	8018fb6 <__s2b+0x72>
 8018f88:	f104 0909 	add.w	r9, r4, #9
 8018f8c:	46c8      	mov	r8, r9
 8018f8e:	442c      	add	r4, r5
 8018f90:	f818 3b01 	ldrb.w	r3, [r8], #1
 8018f94:	4601      	mov	r1, r0
 8018f96:	3b30      	subs	r3, #48	; 0x30
 8018f98:	220a      	movs	r2, #10
 8018f9a:	4630      	mov	r0, r6
 8018f9c:	f7ff ff88 	bl	8018eb0 <__multadd>
 8018fa0:	45a0      	cmp	r8, r4
 8018fa2:	d1f5      	bne.n	8018f90 <__s2b+0x4c>
 8018fa4:	f1a5 0408 	sub.w	r4, r5, #8
 8018fa8:	444c      	add	r4, r9
 8018faa:	1b2d      	subs	r5, r5, r4
 8018fac:	1963      	adds	r3, r4, r5
 8018fae:	42bb      	cmp	r3, r7
 8018fb0:	db04      	blt.n	8018fbc <__s2b+0x78>
 8018fb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018fb6:	340a      	adds	r4, #10
 8018fb8:	2509      	movs	r5, #9
 8018fba:	e7f6      	b.n	8018faa <__s2b+0x66>
 8018fbc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018fc0:	4601      	mov	r1, r0
 8018fc2:	3b30      	subs	r3, #48	; 0x30
 8018fc4:	220a      	movs	r2, #10
 8018fc6:	4630      	mov	r0, r6
 8018fc8:	f7ff ff72 	bl	8018eb0 <__multadd>
 8018fcc:	e7ee      	b.n	8018fac <__s2b+0x68>
 8018fce:	bf00      	nop
 8018fd0:	0801c49c 	.word	0x0801c49c
 8018fd4:	0801c52c 	.word	0x0801c52c

08018fd8 <__hi0bits>:
 8018fd8:	0c03      	lsrs	r3, r0, #16
 8018fda:	041b      	lsls	r3, r3, #16
 8018fdc:	b9d3      	cbnz	r3, 8019014 <__hi0bits+0x3c>
 8018fde:	0400      	lsls	r0, r0, #16
 8018fe0:	2310      	movs	r3, #16
 8018fe2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8018fe6:	bf04      	itt	eq
 8018fe8:	0200      	lsleq	r0, r0, #8
 8018fea:	3308      	addeq	r3, #8
 8018fec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8018ff0:	bf04      	itt	eq
 8018ff2:	0100      	lsleq	r0, r0, #4
 8018ff4:	3304      	addeq	r3, #4
 8018ff6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8018ffa:	bf04      	itt	eq
 8018ffc:	0080      	lsleq	r0, r0, #2
 8018ffe:	3302      	addeq	r3, #2
 8019000:	2800      	cmp	r0, #0
 8019002:	db05      	blt.n	8019010 <__hi0bits+0x38>
 8019004:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8019008:	f103 0301 	add.w	r3, r3, #1
 801900c:	bf08      	it	eq
 801900e:	2320      	moveq	r3, #32
 8019010:	4618      	mov	r0, r3
 8019012:	4770      	bx	lr
 8019014:	2300      	movs	r3, #0
 8019016:	e7e4      	b.n	8018fe2 <__hi0bits+0xa>

08019018 <__lo0bits>:
 8019018:	6803      	ldr	r3, [r0, #0]
 801901a:	f013 0207 	ands.w	r2, r3, #7
 801901e:	4601      	mov	r1, r0
 8019020:	d00b      	beq.n	801903a <__lo0bits+0x22>
 8019022:	07da      	lsls	r2, r3, #31
 8019024:	d424      	bmi.n	8019070 <__lo0bits+0x58>
 8019026:	0798      	lsls	r0, r3, #30
 8019028:	bf49      	itett	mi
 801902a:	085b      	lsrmi	r3, r3, #1
 801902c:	089b      	lsrpl	r3, r3, #2
 801902e:	2001      	movmi	r0, #1
 8019030:	600b      	strmi	r3, [r1, #0]
 8019032:	bf5c      	itt	pl
 8019034:	600b      	strpl	r3, [r1, #0]
 8019036:	2002      	movpl	r0, #2
 8019038:	4770      	bx	lr
 801903a:	b298      	uxth	r0, r3
 801903c:	b9b0      	cbnz	r0, 801906c <__lo0bits+0x54>
 801903e:	0c1b      	lsrs	r3, r3, #16
 8019040:	2010      	movs	r0, #16
 8019042:	f013 0fff 	tst.w	r3, #255	; 0xff
 8019046:	bf04      	itt	eq
 8019048:	0a1b      	lsreq	r3, r3, #8
 801904a:	3008      	addeq	r0, #8
 801904c:	071a      	lsls	r2, r3, #28
 801904e:	bf04      	itt	eq
 8019050:	091b      	lsreq	r3, r3, #4
 8019052:	3004      	addeq	r0, #4
 8019054:	079a      	lsls	r2, r3, #30
 8019056:	bf04      	itt	eq
 8019058:	089b      	lsreq	r3, r3, #2
 801905a:	3002      	addeq	r0, #2
 801905c:	07da      	lsls	r2, r3, #31
 801905e:	d403      	bmi.n	8019068 <__lo0bits+0x50>
 8019060:	085b      	lsrs	r3, r3, #1
 8019062:	f100 0001 	add.w	r0, r0, #1
 8019066:	d005      	beq.n	8019074 <__lo0bits+0x5c>
 8019068:	600b      	str	r3, [r1, #0]
 801906a:	4770      	bx	lr
 801906c:	4610      	mov	r0, r2
 801906e:	e7e8      	b.n	8019042 <__lo0bits+0x2a>
 8019070:	2000      	movs	r0, #0
 8019072:	4770      	bx	lr
 8019074:	2020      	movs	r0, #32
 8019076:	4770      	bx	lr

08019078 <__i2b>:
 8019078:	b510      	push	{r4, lr}
 801907a:	460c      	mov	r4, r1
 801907c:	2101      	movs	r1, #1
 801907e:	f7ff feb5 	bl	8018dec <_Balloc>
 8019082:	4602      	mov	r2, r0
 8019084:	b928      	cbnz	r0, 8019092 <__i2b+0x1a>
 8019086:	4b05      	ldr	r3, [pc, #20]	; (801909c <__i2b+0x24>)
 8019088:	4805      	ldr	r0, [pc, #20]	; (80190a0 <__i2b+0x28>)
 801908a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801908e:	f000 fcfb 	bl	8019a88 <__assert_func>
 8019092:	2301      	movs	r3, #1
 8019094:	6144      	str	r4, [r0, #20]
 8019096:	6103      	str	r3, [r0, #16]
 8019098:	bd10      	pop	{r4, pc}
 801909a:	bf00      	nop
 801909c:	0801c49c 	.word	0x0801c49c
 80190a0:	0801c52c 	.word	0x0801c52c

080190a4 <__multiply>:
 80190a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190a8:	4614      	mov	r4, r2
 80190aa:	690a      	ldr	r2, [r1, #16]
 80190ac:	6923      	ldr	r3, [r4, #16]
 80190ae:	429a      	cmp	r2, r3
 80190b0:	bfb8      	it	lt
 80190b2:	460b      	movlt	r3, r1
 80190b4:	460d      	mov	r5, r1
 80190b6:	bfbc      	itt	lt
 80190b8:	4625      	movlt	r5, r4
 80190ba:	461c      	movlt	r4, r3
 80190bc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80190c0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80190c4:	68ab      	ldr	r3, [r5, #8]
 80190c6:	6869      	ldr	r1, [r5, #4]
 80190c8:	eb0a 0709 	add.w	r7, sl, r9
 80190cc:	42bb      	cmp	r3, r7
 80190ce:	b085      	sub	sp, #20
 80190d0:	bfb8      	it	lt
 80190d2:	3101      	addlt	r1, #1
 80190d4:	f7ff fe8a 	bl	8018dec <_Balloc>
 80190d8:	b930      	cbnz	r0, 80190e8 <__multiply+0x44>
 80190da:	4602      	mov	r2, r0
 80190dc:	4b42      	ldr	r3, [pc, #264]	; (80191e8 <__multiply+0x144>)
 80190de:	4843      	ldr	r0, [pc, #268]	; (80191ec <__multiply+0x148>)
 80190e0:	f240 115d 	movw	r1, #349	; 0x15d
 80190e4:	f000 fcd0 	bl	8019a88 <__assert_func>
 80190e8:	f100 0614 	add.w	r6, r0, #20
 80190ec:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80190f0:	4633      	mov	r3, r6
 80190f2:	2200      	movs	r2, #0
 80190f4:	4543      	cmp	r3, r8
 80190f6:	d31e      	bcc.n	8019136 <__multiply+0x92>
 80190f8:	f105 0c14 	add.w	ip, r5, #20
 80190fc:	f104 0314 	add.w	r3, r4, #20
 8019100:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8019104:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8019108:	9202      	str	r2, [sp, #8]
 801910a:	ebac 0205 	sub.w	r2, ip, r5
 801910e:	3a15      	subs	r2, #21
 8019110:	f022 0203 	bic.w	r2, r2, #3
 8019114:	3204      	adds	r2, #4
 8019116:	f105 0115 	add.w	r1, r5, #21
 801911a:	458c      	cmp	ip, r1
 801911c:	bf38      	it	cc
 801911e:	2204      	movcc	r2, #4
 8019120:	9201      	str	r2, [sp, #4]
 8019122:	9a02      	ldr	r2, [sp, #8]
 8019124:	9303      	str	r3, [sp, #12]
 8019126:	429a      	cmp	r2, r3
 8019128:	d808      	bhi.n	801913c <__multiply+0x98>
 801912a:	2f00      	cmp	r7, #0
 801912c:	dc55      	bgt.n	80191da <__multiply+0x136>
 801912e:	6107      	str	r7, [r0, #16]
 8019130:	b005      	add	sp, #20
 8019132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019136:	f843 2b04 	str.w	r2, [r3], #4
 801913a:	e7db      	b.n	80190f4 <__multiply+0x50>
 801913c:	f8b3 a000 	ldrh.w	sl, [r3]
 8019140:	f1ba 0f00 	cmp.w	sl, #0
 8019144:	d020      	beq.n	8019188 <__multiply+0xe4>
 8019146:	f105 0e14 	add.w	lr, r5, #20
 801914a:	46b1      	mov	r9, r6
 801914c:	2200      	movs	r2, #0
 801914e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8019152:	f8d9 b000 	ldr.w	fp, [r9]
 8019156:	b2a1      	uxth	r1, r4
 8019158:	fa1f fb8b 	uxth.w	fp, fp
 801915c:	fb0a b101 	mla	r1, sl, r1, fp
 8019160:	4411      	add	r1, r2
 8019162:	f8d9 2000 	ldr.w	r2, [r9]
 8019166:	0c24      	lsrs	r4, r4, #16
 8019168:	0c12      	lsrs	r2, r2, #16
 801916a:	fb0a 2404 	mla	r4, sl, r4, r2
 801916e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8019172:	b289      	uxth	r1, r1
 8019174:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8019178:	45f4      	cmp	ip, lr
 801917a:	f849 1b04 	str.w	r1, [r9], #4
 801917e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8019182:	d8e4      	bhi.n	801914e <__multiply+0xaa>
 8019184:	9901      	ldr	r1, [sp, #4]
 8019186:	5072      	str	r2, [r6, r1]
 8019188:	9a03      	ldr	r2, [sp, #12]
 801918a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801918e:	3304      	adds	r3, #4
 8019190:	f1b9 0f00 	cmp.w	r9, #0
 8019194:	d01f      	beq.n	80191d6 <__multiply+0x132>
 8019196:	6834      	ldr	r4, [r6, #0]
 8019198:	f105 0114 	add.w	r1, r5, #20
 801919c:	46b6      	mov	lr, r6
 801919e:	f04f 0a00 	mov.w	sl, #0
 80191a2:	880a      	ldrh	r2, [r1, #0]
 80191a4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80191a8:	fb09 b202 	mla	r2, r9, r2, fp
 80191ac:	4492      	add	sl, r2
 80191ae:	b2a4      	uxth	r4, r4
 80191b0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80191b4:	f84e 4b04 	str.w	r4, [lr], #4
 80191b8:	f851 4b04 	ldr.w	r4, [r1], #4
 80191bc:	f8be 2000 	ldrh.w	r2, [lr]
 80191c0:	0c24      	lsrs	r4, r4, #16
 80191c2:	fb09 2404 	mla	r4, r9, r4, r2
 80191c6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80191ca:	458c      	cmp	ip, r1
 80191cc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80191d0:	d8e7      	bhi.n	80191a2 <__multiply+0xfe>
 80191d2:	9a01      	ldr	r2, [sp, #4]
 80191d4:	50b4      	str	r4, [r6, r2]
 80191d6:	3604      	adds	r6, #4
 80191d8:	e7a3      	b.n	8019122 <__multiply+0x7e>
 80191da:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80191de:	2b00      	cmp	r3, #0
 80191e0:	d1a5      	bne.n	801912e <__multiply+0x8a>
 80191e2:	3f01      	subs	r7, #1
 80191e4:	e7a1      	b.n	801912a <__multiply+0x86>
 80191e6:	bf00      	nop
 80191e8:	0801c49c 	.word	0x0801c49c
 80191ec:	0801c52c 	.word	0x0801c52c

080191f0 <__pow5mult>:
 80191f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80191f4:	4615      	mov	r5, r2
 80191f6:	f012 0203 	ands.w	r2, r2, #3
 80191fa:	4606      	mov	r6, r0
 80191fc:	460f      	mov	r7, r1
 80191fe:	d007      	beq.n	8019210 <__pow5mult+0x20>
 8019200:	4c25      	ldr	r4, [pc, #148]	; (8019298 <__pow5mult+0xa8>)
 8019202:	3a01      	subs	r2, #1
 8019204:	2300      	movs	r3, #0
 8019206:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801920a:	f7ff fe51 	bl	8018eb0 <__multadd>
 801920e:	4607      	mov	r7, r0
 8019210:	10ad      	asrs	r5, r5, #2
 8019212:	d03d      	beq.n	8019290 <__pow5mult+0xa0>
 8019214:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8019216:	b97c      	cbnz	r4, 8019238 <__pow5mult+0x48>
 8019218:	2010      	movs	r0, #16
 801921a:	f7fc fd59 	bl	8015cd0 <malloc>
 801921e:	4602      	mov	r2, r0
 8019220:	6270      	str	r0, [r6, #36]	; 0x24
 8019222:	b928      	cbnz	r0, 8019230 <__pow5mult+0x40>
 8019224:	4b1d      	ldr	r3, [pc, #116]	; (801929c <__pow5mult+0xac>)
 8019226:	481e      	ldr	r0, [pc, #120]	; (80192a0 <__pow5mult+0xb0>)
 8019228:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801922c:	f000 fc2c 	bl	8019a88 <__assert_func>
 8019230:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019234:	6004      	str	r4, [r0, #0]
 8019236:	60c4      	str	r4, [r0, #12]
 8019238:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801923c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019240:	b94c      	cbnz	r4, 8019256 <__pow5mult+0x66>
 8019242:	f240 2171 	movw	r1, #625	; 0x271
 8019246:	4630      	mov	r0, r6
 8019248:	f7ff ff16 	bl	8019078 <__i2b>
 801924c:	2300      	movs	r3, #0
 801924e:	f8c8 0008 	str.w	r0, [r8, #8]
 8019252:	4604      	mov	r4, r0
 8019254:	6003      	str	r3, [r0, #0]
 8019256:	f04f 0900 	mov.w	r9, #0
 801925a:	07eb      	lsls	r3, r5, #31
 801925c:	d50a      	bpl.n	8019274 <__pow5mult+0x84>
 801925e:	4639      	mov	r1, r7
 8019260:	4622      	mov	r2, r4
 8019262:	4630      	mov	r0, r6
 8019264:	f7ff ff1e 	bl	80190a4 <__multiply>
 8019268:	4639      	mov	r1, r7
 801926a:	4680      	mov	r8, r0
 801926c:	4630      	mov	r0, r6
 801926e:	f7ff fdfd 	bl	8018e6c <_Bfree>
 8019272:	4647      	mov	r7, r8
 8019274:	106d      	asrs	r5, r5, #1
 8019276:	d00b      	beq.n	8019290 <__pow5mult+0xa0>
 8019278:	6820      	ldr	r0, [r4, #0]
 801927a:	b938      	cbnz	r0, 801928c <__pow5mult+0x9c>
 801927c:	4622      	mov	r2, r4
 801927e:	4621      	mov	r1, r4
 8019280:	4630      	mov	r0, r6
 8019282:	f7ff ff0f 	bl	80190a4 <__multiply>
 8019286:	6020      	str	r0, [r4, #0]
 8019288:	f8c0 9000 	str.w	r9, [r0]
 801928c:	4604      	mov	r4, r0
 801928e:	e7e4      	b.n	801925a <__pow5mult+0x6a>
 8019290:	4638      	mov	r0, r7
 8019292:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019296:	bf00      	nop
 8019298:	0801c680 	.word	0x0801c680
 801929c:	0801c426 	.word	0x0801c426
 80192a0:	0801c52c 	.word	0x0801c52c

080192a4 <__lshift>:
 80192a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80192a8:	460c      	mov	r4, r1
 80192aa:	6849      	ldr	r1, [r1, #4]
 80192ac:	6923      	ldr	r3, [r4, #16]
 80192ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80192b2:	68a3      	ldr	r3, [r4, #8]
 80192b4:	4607      	mov	r7, r0
 80192b6:	4691      	mov	r9, r2
 80192b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80192bc:	f108 0601 	add.w	r6, r8, #1
 80192c0:	42b3      	cmp	r3, r6
 80192c2:	db0b      	blt.n	80192dc <__lshift+0x38>
 80192c4:	4638      	mov	r0, r7
 80192c6:	f7ff fd91 	bl	8018dec <_Balloc>
 80192ca:	4605      	mov	r5, r0
 80192cc:	b948      	cbnz	r0, 80192e2 <__lshift+0x3e>
 80192ce:	4602      	mov	r2, r0
 80192d0:	4b28      	ldr	r3, [pc, #160]	; (8019374 <__lshift+0xd0>)
 80192d2:	4829      	ldr	r0, [pc, #164]	; (8019378 <__lshift+0xd4>)
 80192d4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80192d8:	f000 fbd6 	bl	8019a88 <__assert_func>
 80192dc:	3101      	adds	r1, #1
 80192de:	005b      	lsls	r3, r3, #1
 80192e0:	e7ee      	b.n	80192c0 <__lshift+0x1c>
 80192e2:	2300      	movs	r3, #0
 80192e4:	f100 0114 	add.w	r1, r0, #20
 80192e8:	f100 0210 	add.w	r2, r0, #16
 80192ec:	4618      	mov	r0, r3
 80192ee:	4553      	cmp	r3, sl
 80192f0:	db33      	blt.n	801935a <__lshift+0xb6>
 80192f2:	6920      	ldr	r0, [r4, #16]
 80192f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80192f8:	f104 0314 	add.w	r3, r4, #20
 80192fc:	f019 091f 	ands.w	r9, r9, #31
 8019300:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019304:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8019308:	d02b      	beq.n	8019362 <__lshift+0xbe>
 801930a:	f1c9 0e20 	rsb	lr, r9, #32
 801930e:	468a      	mov	sl, r1
 8019310:	2200      	movs	r2, #0
 8019312:	6818      	ldr	r0, [r3, #0]
 8019314:	fa00 f009 	lsl.w	r0, r0, r9
 8019318:	4302      	orrs	r2, r0
 801931a:	f84a 2b04 	str.w	r2, [sl], #4
 801931e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019322:	459c      	cmp	ip, r3
 8019324:	fa22 f20e 	lsr.w	r2, r2, lr
 8019328:	d8f3      	bhi.n	8019312 <__lshift+0x6e>
 801932a:	ebac 0304 	sub.w	r3, ip, r4
 801932e:	3b15      	subs	r3, #21
 8019330:	f023 0303 	bic.w	r3, r3, #3
 8019334:	3304      	adds	r3, #4
 8019336:	f104 0015 	add.w	r0, r4, #21
 801933a:	4584      	cmp	ip, r0
 801933c:	bf38      	it	cc
 801933e:	2304      	movcc	r3, #4
 8019340:	50ca      	str	r2, [r1, r3]
 8019342:	b10a      	cbz	r2, 8019348 <__lshift+0xa4>
 8019344:	f108 0602 	add.w	r6, r8, #2
 8019348:	3e01      	subs	r6, #1
 801934a:	4638      	mov	r0, r7
 801934c:	612e      	str	r6, [r5, #16]
 801934e:	4621      	mov	r1, r4
 8019350:	f7ff fd8c 	bl	8018e6c <_Bfree>
 8019354:	4628      	mov	r0, r5
 8019356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801935a:	f842 0f04 	str.w	r0, [r2, #4]!
 801935e:	3301      	adds	r3, #1
 8019360:	e7c5      	b.n	80192ee <__lshift+0x4a>
 8019362:	3904      	subs	r1, #4
 8019364:	f853 2b04 	ldr.w	r2, [r3], #4
 8019368:	f841 2f04 	str.w	r2, [r1, #4]!
 801936c:	459c      	cmp	ip, r3
 801936e:	d8f9      	bhi.n	8019364 <__lshift+0xc0>
 8019370:	e7ea      	b.n	8019348 <__lshift+0xa4>
 8019372:	bf00      	nop
 8019374:	0801c49c 	.word	0x0801c49c
 8019378:	0801c52c 	.word	0x0801c52c

0801937c <__mcmp>:
 801937c:	b530      	push	{r4, r5, lr}
 801937e:	6902      	ldr	r2, [r0, #16]
 8019380:	690c      	ldr	r4, [r1, #16]
 8019382:	1b12      	subs	r2, r2, r4
 8019384:	d10e      	bne.n	80193a4 <__mcmp+0x28>
 8019386:	f100 0314 	add.w	r3, r0, #20
 801938a:	3114      	adds	r1, #20
 801938c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8019390:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8019394:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8019398:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801939c:	42a5      	cmp	r5, r4
 801939e:	d003      	beq.n	80193a8 <__mcmp+0x2c>
 80193a0:	d305      	bcc.n	80193ae <__mcmp+0x32>
 80193a2:	2201      	movs	r2, #1
 80193a4:	4610      	mov	r0, r2
 80193a6:	bd30      	pop	{r4, r5, pc}
 80193a8:	4283      	cmp	r3, r0
 80193aa:	d3f3      	bcc.n	8019394 <__mcmp+0x18>
 80193ac:	e7fa      	b.n	80193a4 <__mcmp+0x28>
 80193ae:	f04f 32ff 	mov.w	r2, #4294967295
 80193b2:	e7f7      	b.n	80193a4 <__mcmp+0x28>

080193b4 <__mdiff>:
 80193b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193b8:	460c      	mov	r4, r1
 80193ba:	4606      	mov	r6, r0
 80193bc:	4611      	mov	r1, r2
 80193be:	4620      	mov	r0, r4
 80193c0:	4617      	mov	r7, r2
 80193c2:	f7ff ffdb 	bl	801937c <__mcmp>
 80193c6:	1e05      	subs	r5, r0, #0
 80193c8:	d110      	bne.n	80193ec <__mdiff+0x38>
 80193ca:	4629      	mov	r1, r5
 80193cc:	4630      	mov	r0, r6
 80193ce:	f7ff fd0d 	bl	8018dec <_Balloc>
 80193d2:	b930      	cbnz	r0, 80193e2 <__mdiff+0x2e>
 80193d4:	4b39      	ldr	r3, [pc, #228]	; (80194bc <__mdiff+0x108>)
 80193d6:	4602      	mov	r2, r0
 80193d8:	f240 2132 	movw	r1, #562	; 0x232
 80193dc:	4838      	ldr	r0, [pc, #224]	; (80194c0 <__mdiff+0x10c>)
 80193de:	f000 fb53 	bl	8019a88 <__assert_func>
 80193e2:	2301      	movs	r3, #1
 80193e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80193e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80193ec:	bfa4      	itt	ge
 80193ee:	463b      	movge	r3, r7
 80193f0:	4627      	movge	r7, r4
 80193f2:	4630      	mov	r0, r6
 80193f4:	6879      	ldr	r1, [r7, #4]
 80193f6:	bfa6      	itte	ge
 80193f8:	461c      	movge	r4, r3
 80193fa:	2500      	movge	r5, #0
 80193fc:	2501      	movlt	r5, #1
 80193fe:	f7ff fcf5 	bl	8018dec <_Balloc>
 8019402:	b920      	cbnz	r0, 801940e <__mdiff+0x5a>
 8019404:	4b2d      	ldr	r3, [pc, #180]	; (80194bc <__mdiff+0x108>)
 8019406:	4602      	mov	r2, r0
 8019408:	f44f 7110 	mov.w	r1, #576	; 0x240
 801940c:	e7e6      	b.n	80193dc <__mdiff+0x28>
 801940e:	693e      	ldr	r6, [r7, #16]
 8019410:	60c5      	str	r5, [r0, #12]
 8019412:	6925      	ldr	r5, [r4, #16]
 8019414:	f107 0114 	add.w	r1, r7, #20
 8019418:	f104 0914 	add.w	r9, r4, #20
 801941c:	f100 0e14 	add.w	lr, r0, #20
 8019420:	f107 0210 	add.w	r2, r7, #16
 8019424:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8019428:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801942c:	46f2      	mov	sl, lr
 801942e:	2700      	movs	r7, #0
 8019430:	f859 3b04 	ldr.w	r3, [r9], #4
 8019434:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8019438:	fa1f f883 	uxth.w	r8, r3
 801943c:	fa17 f78b 	uxtah	r7, r7, fp
 8019440:	0c1b      	lsrs	r3, r3, #16
 8019442:	eba7 0808 	sub.w	r8, r7, r8
 8019446:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801944a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801944e:	fa1f f888 	uxth.w	r8, r8
 8019452:	141f      	asrs	r7, r3, #16
 8019454:	454d      	cmp	r5, r9
 8019456:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801945a:	f84a 3b04 	str.w	r3, [sl], #4
 801945e:	d8e7      	bhi.n	8019430 <__mdiff+0x7c>
 8019460:	1b2b      	subs	r3, r5, r4
 8019462:	3b15      	subs	r3, #21
 8019464:	f023 0303 	bic.w	r3, r3, #3
 8019468:	3304      	adds	r3, #4
 801946a:	3415      	adds	r4, #21
 801946c:	42a5      	cmp	r5, r4
 801946e:	bf38      	it	cc
 8019470:	2304      	movcc	r3, #4
 8019472:	4419      	add	r1, r3
 8019474:	4473      	add	r3, lr
 8019476:	469e      	mov	lr, r3
 8019478:	460d      	mov	r5, r1
 801947a:	4565      	cmp	r5, ip
 801947c:	d30e      	bcc.n	801949c <__mdiff+0xe8>
 801947e:	f10c 0203 	add.w	r2, ip, #3
 8019482:	1a52      	subs	r2, r2, r1
 8019484:	f022 0203 	bic.w	r2, r2, #3
 8019488:	3903      	subs	r1, #3
 801948a:	458c      	cmp	ip, r1
 801948c:	bf38      	it	cc
 801948e:	2200      	movcc	r2, #0
 8019490:	441a      	add	r2, r3
 8019492:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8019496:	b17b      	cbz	r3, 80194b8 <__mdiff+0x104>
 8019498:	6106      	str	r6, [r0, #16]
 801949a:	e7a5      	b.n	80193e8 <__mdiff+0x34>
 801949c:	f855 8b04 	ldr.w	r8, [r5], #4
 80194a0:	fa17 f488 	uxtah	r4, r7, r8
 80194a4:	1422      	asrs	r2, r4, #16
 80194a6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80194aa:	b2a4      	uxth	r4, r4
 80194ac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80194b0:	f84e 4b04 	str.w	r4, [lr], #4
 80194b4:	1417      	asrs	r7, r2, #16
 80194b6:	e7e0      	b.n	801947a <__mdiff+0xc6>
 80194b8:	3e01      	subs	r6, #1
 80194ba:	e7ea      	b.n	8019492 <__mdiff+0xde>
 80194bc:	0801c49c 	.word	0x0801c49c
 80194c0:	0801c52c 	.word	0x0801c52c

080194c4 <__ulp>:
 80194c4:	b082      	sub	sp, #8
 80194c6:	ed8d 0b00 	vstr	d0, [sp]
 80194ca:	9b01      	ldr	r3, [sp, #4]
 80194cc:	4912      	ldr	r1, [pc, #72]	; (8019518 <__ulp+0x54>)
 80194ce:	4019      	ands	r1, r3
 80194d0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80194d4:	2900      	cmp	r1, #0
 80194d6:	dd05      	ble.n	80194e4 <__ulp+0x20>
 80194d8:	2200      	movs	r2, #0
 80194da:	460b      	mov	r3, r1
 80194dc:	ec43 2b10 	vmov	d0, r2, r3
 80194e0:	b002      	add	sp, #8
 80194e2:	4770      	bx	lr
 80194e4:	4249      	negs	r1, r1
 80194e6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80194ea:	ea4f 5021 	mov.w	r0, r1, asr #20
 80194ee:	f04f 0200 	mov.w	r2, #0
 80194f2:	f04f 0300 	mov.w	r3, #0
 80194f6:	da04      	bge.n	8019502 <__ulp+0x3e>
 80194f8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80194fc:	fa41 f300 	asr.w	r3, r1, r0
 8019500:	e7ec      	b.n	80194dc <__ulp+0x18>
 8019502:	f1a0 0114 	sub.w	r1, r0, #20
 8019506:	291e      	cmp	r1, #30
 8019508:	bfda      	itte	le
 801950a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801950e:	fa20 f101 	lsrle.w	r1, r0, r1
 8019512:	2101      	movgt	r1, #1
 8019514:	460a      	mov	r2, r1
 8019516:	e7e1      	b.n	80194dc <__ulp+0x18>
 8019518:	7ff00000 	.word	0x7ff00000

0801951c <__b2d>:
 801951c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801951e:	6905      	ldr	r5, [r0, #16]
 8019520:	f100 0714 	add.w	r7, r0, #20
 8019524:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8019528:	1f2e      	subs	r6, r5, #4
 801952a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801952e:	4620      	mov	r0, r4
 8019530:	f7ff fd52 	bl	8018fd8 <__hi0bits>
 8019534:	f1c0 0320 	rsb	r3, r0, #32
 8019538:	280a      	cmp	r0, #10
 801953a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80195b8 <__b2d+0x9c>
 801953e:	600b      	str	r3, [r1, #0]
 8019540:	dc14      	bgt.n	801956c <__b2d+0x50>
 8019542:	f1c0 0e0b 	rsb	lr, r0, #11
 8019546:	fa24 f10e 	lsr.w	r1, r4, lr
 801954a:	42b7      	cmp	r7, r6
 801954c:	ea41 030c 	orr.w	r3, r1, ip
 8019550:	bf34      	ite	cc
 8019552:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019556:	2100      	movcs	r1, #0
 8019558:	3015      	adds	r0, #21
 801955a:	fa04 f000 	lsl.w	r0, r4, r0
 801955e:	fa21 f10e 	lsr.w	r1, r1, lr
 8019562:	ea40 0201 	orr.w	r2, r0, r1
 8019566:	ec43 2b10 	vmov	d0, r2, r3
 801956a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801956c:	42b7      	cmp	r7, r6
 801956e:	bf3a      	itte	cc
 8019570:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019574:	f1a5 0608 	subcc.w	r6, r5, #8
 8019578:	2100      	movcs	r1, #0
 801957a:	380b      	subs	r0, #11
 801957c:	d017      	beq.n	80195ae <__b2d+0x92>
 801957e:	f1c0 0c20 	rsb	ip, r0, #32
 8019582:	fa04 f500 	lsl.w	r5, r4, r0
 8019586:	42be      	cmp	r6, r7
 8019588:	fa21 f40c 	lsr.w	r4, r1, ip
 801958c:	ea45 0504 	orr.w	r5, r5, r4
 8019590:	bf8c      	ite	hi
 8019592:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8019596:	2400      	movls	r4, #0
 8019598:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801959c:	fa01 f000 	lsl.w	r0, r1, r0
 80195a0:	fa24 f40c 	lsr.w	r4, r4, ip
 80195a4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80195a8:	ea40 0204 	orr.w	r2, r0, r4
 80195ac:	e7db      	b.n	8019566 <__b2d+0x4a>
 80195ae:	ea44 030c 	orr.w	r3, r4, ip
 80195b2:	460a      	mov	r2, r1
 80195b4:	e7d7      	b.n	8019566 <__b2d+0x4a>
 80195b6:	bf00      	nop
 80195b8:	3ff00000 	.word	0x3ff00000

080195bc <__d2b>:
 80195bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80195c0:	4689      	mov	r9, r1
 80195c2:	2101      	movs	r1, #1
 80195c4:	ec57 6b10 	vmov	r6, r7, d0
 80195c8:	4690      	mov	r8, r2
 80195ca:	f7ff fc0f 	bl	8018dec <_Balloc>
 80195ce:	4604      	mov	r4, r0
 80195d0:	b930      	cbnz	r0, 80195e0 <__d2b+0x24>
 80195d2:	4602      	mov	r2, r0
 80195d4:	4b25      	ldr	r3, [pc, #148]	; (801966c <__d2b+0xb0>)
 80195d6:	4826      	ldr	r0, [pc, #152]	; (8019670 <__d2b+0xb4>)
 80195d8:	f240 310a 	movw	r1, #778	; 0x30a
 80195dc:	f000 fa54 	bl	8019a88 <__assert_func>
 80195e0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80195e4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80195e8:	bb35      	cbnz	r5, 8019638 <__d2b+0x7c>
 80195ea:	2e00      	cmp	r6, #0
 80195ec:	9301      	str	r3, [sp, #4]
 80195ee:	d028      	beq.n	8019642 <__d2b+0x86>
 80195f0:	4668      	mov	r0, sp
 80195f2:	9600      	str	r6, [sp, #0]
 80195f4:	f7ff fd10 	bl	8019018 <__lo0bits>
 80195f8:	9900      	ldr	r1, [sp, #0]
 80195fa:	b300      	cbz	r0, 801963e <__d2b+0x82>
 80195fc:	9a01      	ldr	r2, [sp, #4]
 80195fe:	f1c0 0320 	rsb	r3, r0, #32
 8019602:	fa02 f303 	lsl.w	r3, r2, r3
 8019606:	430b      	orrs	r3, r1
 8019608:	40c2      	lsrs	r2, r0
 801960a:	6163      	str	r3, [r4, #20]
 801960c:	9201      	str	r2, [sp, #4]
 801960e:	9b01      	ldr	r3, [sp, #4]
 8019610:	61a3      	str	r3, [r4, #24]
 8019612:	2b00      	cmp	r3, #0
 8019614:	bf14      	ite	ne
 8019616:	2202      	movne	r2, #2
 8019618:	2201      	moveq	r2, #1
 801961a:	6122      	str	r2, [r4, #16]
 801961c:	b1d5      	cbz	r5, 8019654 <__d2b+0x98>
 801961e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8019622:	4405      	add	r5, r0
 8019624:	f8c9 5000 	str.w	r5, [r9]
 8019628:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801962c:	f8c8 0000 	str.w	r0, [r8]
 8019630:	4620      	mov	r0, r4
 8019632:	b003      	add	sp, #12
 8019634:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019638:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801963c:	e7d5      	b.n	80195ea <__d2b+0x2e>
 801963e:	6161      	str	r1, [r4, #20]
 8019640:	e7e5      	b.n	801960e <__d2b+0x52>
 8019642:	a801      	add	r0, sp, #4
 8019644:	f7ff fce8 	bl	8019018 <__lo0bits>
 8019648:	9b01      	ldr	r3, [sp, #4]
 801964a:	6163      	str	r3, [r4, #20]
 801964c:	2201      	movs	r2, #1
 801964e:	6122      	str	r2, [r4, #16]
 8019650:	3020      	adds	r0, #32
 8019652:	e7e3      	b.n	801961c <__d2b+0x60>
 8019654:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019658:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801965c:	f8c9 0000 	str.w	r0, [r9]
 8019660:	6918      	ldr	r0, [r3, #16]
 8019662:	f7ff fcb9 	bl	8018fd8 <__hi0bits>
 8019666:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801966a:	e7df      	b.n	801962c <__d2b+0x70>
 801966c:	0801c49c 	.word	0x0801c49c
 8019670:	0801c52c 	.word	0x0801c52c

08019674 <__ratio>:
 8019674:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019678:	4688      	mov	r8, r1
 801967a:	4669      	mov	r1, sp
 801967c:	4681      	mov	r9, r0
 801967e:	f7ff ff4d 	bl	801951c <__b2d>
 8019682:	a901      	add	r1, sp, #4
 8019684:	4640      	mov	r0, r8
 8019686:	ec55 4b10 	vmov	r4, r5, d0
 801968a:	f7ff ff47 	bl	801951c <__b2d>
 801968e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019692:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8019696:	eba3 0c02 	sub.w	ip, r3, r2
 801969a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801969e:	1a9b      	subs	r3, r3, r2
 80196a0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80196a4:	ec51 0b10 	vmov	r0, r1, d0
 80196a8:	2b00      	cmp	r3, #0
 80196aa:	bfd6      	itet	le
 80196ac:	460a      	movle	r2, r1
 80196ae:	462a      	movgt	r2, r5
 80196b0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80196b4:	468b      	mov	fp, r1
 80196b6:	462f      	mov	r7, r5
 80196b8:	bfd4      	ite	le
 80196ba:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80196be:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80196c2:	4620      	mov	r0, r4
 80196c4:	ee10 2a10 	vmov	r2, s0
 80196c8:	465b      	mov	r3, fp
 80196ca:	4639      	mov	r1, r7
 80196cc:	f7e7 f8be 	bl	800084c <__aeabi_ddiv>
 80196d0:	ec41 0b10 	vmov	d0, r0, r1
 80196d4:	b003      	add	sp, #12
 80196d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080196da <__copybits>:
 80196da:	3901      	subs	r1, #1
 80196dc:	b570      	push	{r4, r5, r6, lr}
 80196de:	1149      	asrs	r1, r1, #5
 80196e0:	6914      	ldr	r4, [r2, #16]
 80196e2:	3101      	adds	r1, #1
 80196e4:	f102 0314 	add.w	r3, r2, #20
 80196e8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80196ec:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80196f0:	1f05      	subs	r5, r0, #4
 80196f2:	42a3      	cmp	r3, r4
 80196f4:	d30c      	bcc.n	8019710 <__copybits+0x36>
 80196f6:	1aa3      	subs	r3, r4, r2
 80196f8:	3b11      	subs	r3, #17
 80196fa:	f023 0303 	bic.w	r3, r3, #3
 80196fe:	3211      	adds	r2, #17
 8019700:	42a2      	cmp	r2, r4
 8019702:	bf88      	it	hi
 8019704:	2300      	movhi	r3, #0
 8019706:	4418      	add	r0, r3
 8019708:	2300      	movs	r3, #0
 801970a:	4288      	cmp	r0, r1
 801970c:	d305      	bcc.n	801971a <__copybits+0x40>
 801970e:	bd70      	pop	{r4, r5, r6, pc}
 8019710:	f853 6b04 	ldr.w	r6, [r3], #4
 8019714:	f845 6f04 	str.w	r6, [r5, #4]!
 8019718:	e7eb      	b.n	80196f2 <__copybits+0x18>
 801971a:	f840 3b04 	str.w	r3, [r0], #4
 801971e:	e7f4      	b.n	801970a <__copybits+0x30>

08019720 <__any_on>:
 8019720:	f100 0214 	add.w	r2, r0, #20
 8019724:	6900      	ldr	r0, [r0, #16]
 8019726:	114b      	asrs	r3, r1, #5
 8019728:	4298      	cmp	r0, r3
 801972a:	b510      	push	{r4, lr}
 801972c:	db11      	blt.n	8019752 <__any_on+0x32>
 801972e:	dd0a      	ble.n	8019746 <__any_on+0x26>
 8019730:	f011 011f 	ands.w	r1, r1, #31
 8019734:	d007      	beq.n	8019746 <__any_on+0x26>
 8019736:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801973a:	fa24 f001 	lsr.w	r0, r4, r1
 801973e:	fa00 f101 	lsl.w	r1, r0, r1
 8019742:	428c      	cmp	r4, r1
 8019744:	d10b      	bne.n	801975e <__any_on+0x3e>
 8019746:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801974a:	4293      	cmp	r3, r2
 801974c:	d803      	bhi.n	8019756 <__any_on+0x36>
 801974e:	2000      	movs	r0, #0
 8019750:	bd10      	pop	{r4, pc}
 8019752:	4603      	mov	r3, r0
 8019754:	e7f7      	b.n	8019746 <__any_on+0x26>
 8019756:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801975a:	2900      	cmp	r1, #0
 801975c:	d0f5      	beq.n	801974a <__any_on+0x2a>
 801975e:	2001      	movs	r0, #1
 8019760:	e7f6      	b.n	8019750 <__any_on+0x30>

08019762 <_calloc_r>:
 8019762:	b513      	push	{r0, r1, r4, lr}
 8019764:	434a      	muls	r2, r1
 8019766:	4611      	mov	r1, r2
 8019768:	9201      	str	r2, [sp, #4]
 801976a:	f7fc fb41 	bl	8015df0 <_malloc_r>
 801976e:	4604      	mov	r4, r0
 8019770:	b118      	cbz	r0, 801977a <_calloc_r+0x18>
 8019772:	9a01      	ldr	r2, [sp, #4]
 8019774:	2100      	movs	r1, #0
 8019776:	f7fc fae3 	bl	8015d40 <memset>
 801977a:	4620      	mov	r0, r4
 801977c:	b002      	add	sp, #8
 801977e:	bd10      	pop	{r4, pc}

08019780 <__ssputs_r>:
 8019780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019784:	688e      	ldr	r6, [r1, #8]
 8019786:	429e      	cmp	r6, r3
 8019788:	4682      	mov	sl, r0
 801978a:	460c      	mov	r4, r1
 801978c:	4690      	mov	r8, r2
 801978e:	461f      	mov	r7, r3
 8019790:	d838      	bhi.n	8019804 <__ssputs_r+0x84>
 8019792:	898a      	ldrh	r2, [r1, #12]
 8019794:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019798:	d032      	beq.n	8019800 <__ssputs_r+0x80>
 801979a:	6825      	ldr	r5, [r4, #0]
 801979c:	6909      	ldr	r1, [r1, #16]
 801979e:	eba5 0901 	sub.w	r9, r5, r1
 80197a2:	6965      	ldr	r5, [r4, #20]
 80197a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80197a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80197ac:	3301      	adds	r3, #1
 80197ae:	444b      	add	r3, r9
 80197b0:	106d      	asrs	r5, r5, #1
 80197b2:	429d      	cmp	r5, r3
 80197b4:	bf38      	it	cc
 80197b6:	461d      	movcc	r5, r3
 80197b8:	0553      	lsls	r3, r2, #21
 80197ba:	d531      	bpl.n	8019820 <__ssputs_r+0xa0>
 80197bc:	4629      	mov	r1, r5
 80197be:	f7fc fb17 	bl	8015df0 <_malloc_r>
 80197c2:	4606      	mov	r6, r0
 80197c4:	b950      	cbnz	r0, 80197dc <__ssputs_r+0x5c>
 80197c6:	230c      	movs	r3, #12
 80197c8:	f8ca 3000 	str.w	r3, [sl]
 80197cc:	89a3      	ldrh	r3, [r4, #12]
 80197ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80197d2:	81a3      	strh	r3, [r4, #12]
 80197d4:	f04f 30ff 	mov.w	r0, #4294967295
 80197d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80197dc:	6921      	ldr	r1, [r4, #16]
 80197de:	464a      	mov	r2, r9
 80197e0:	f7fc fa86 	bl	8015cf0 <memcpy>
 80197e4:	89a3      	ldrh	r3, [r4, #12]
 80197e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80197ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80197ee:	81a3      	strh	r3, [r4, #12]
 80197f0:	6126      	str	r6, [r4, #16]
 80197f2:	6165      	str	r5, [r4, #20]
 80197f4:	444e      	add	r6, r9
 80197f6:	eba5 0509 	sub.w	r5, r5, r9
 80197fa:	6026      	str	r6, [r4, #0]
 80197fc:	60a5      	str	r5, [r4, #8]
 80197fe:	463e      	mov	r6, r7
 8019800:	42be      	cmp	r6, r7
 8019802:	d900      	bls.n	8019806 <__ssputs_r+0x86>
 8019804:	463e      	mov	r6, r7
 8019806:	4632      	mov	r2, r6
 8019808:	6820      	ldr	r0, [r4, #0]
 801980a:	4641      	mov	r1, r8
 801980c:	f7fc fa7e 	bl	8015d0c <memmove>
 8019810:	68a3      	ldr	r3, [r4, #8]
 8019812:	6822      	ldr	r2, [r4, #0]
 8019814:	1b9b      	subs	r3, r3, r6
 8019816:	4432      	add	r2, r6
 8019818:	60a3      	str	r3, [r4, #8]
 801981a:	6022      	str	r2, [r4, #0]
 801981c:	2000      	movs	r0, #0
 801981e:	e7db      	b.n	80197d8 <__ssputs_r+0x58>
 8019820:	462a      	mov	r2, r5
 8019822:	f000 f964 	bl	8019aee <_realloc_r>
 8019826:	4606      	mov	r6, r0
 8019828:	2800      	cmp	r0, #0
 801982a:	d1e1      	bne.n	80197f0 <__ssputs_r+0x70>
 801982c:	6921      	ldr	r1, [r4, #16]
 801982e:	4650      	mov	r0, sl
 8019830:	f7fc fa8e 	bl	8015d50 <_free_r>
 8019834:	e7c7      	b.n	80197c6 <__ssputs_r+0x46>
	...

08019838 <_svfiprintf_r>:
 8019838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801983c:	4698      	mov	r8, r3
 801983e:	898b      	ldrh	r3, [r1, #12]
 8019840:	061b      	lsls	r3, r3, #24
 8019842:	b09d      	sub	sp, #116	; 0x74
 8019844:	4607      	mov	r7, r0
 8019846:	460d      	mov	r5, r1
 8019848:	4614      	mov	r4, r2
 801984a:	d50e      	bpl.n	801986a <_svfiprintf_r+0x32>
 801984c:	690b      	ldr	r3, [r1, #16]
 801984e:	b963      	cbnz	r3, 801986a <_svfiprintf_r+0x32>
 8019850:	2140      	movs	r1, #64	; 0x40
 8019852:	f7fc facd 	bl	8015df0 <_malloc_r>
 8019856:	6028      	str	r0, [r5, #0]
 8019858:	6128      	str	r0, [r5, #16]
 801985a:	b920      	cbnz	r0, 8019866 <_svfiprintf_r+0x2e>
 801985c:	230c      	movs	r3, #12
 801985e:	603b      	str	r3, [r7, #0]
 8019860:	f04f 30ff 	mov.w	r0, #4294967295
 8019864:	e0d1      	b.n	8019a0a <_svfiprintf_r+0x1d2>
 8019866:	2340      	movs	r3, #64	; 0x40
 8019868:	616b      	str	r3, [r5, #20]
 801986a:	2300      	movs	r3, #0
 801986c:	9309      	str	r3, [sp, #36]	; 0x24
 801986e:	2320      	movs	r3, #32
 8019870:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019874:	f8cd 800c 	str.w	r8, [sp, #12]
 8019878:	2330      	movs	r3, #48	; 0x30
 801987a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8019a24 <_svfiprintf_r+0x1ec>
 801987e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019882:	f04f 0901 	mov.w	r9, #1
 8019886:	4623      	mov	r3, r4
 8019888:	469a      	mov	sl, r3
 801988a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801988e:	b10a      	cbz	r2, 8019894 <_svfiprintf_r+0x5c>
 8019890:	2a25      	cmp	r2, #37	; 0x25
 8019892:	d1f9      	bne.n	8019888 <_svfiprintf_r+0x50>
 8019894:	ebba 0b04 	subs.w	fp, sl, r4
 8019898:	d00b      	beq.n	80198b2 <_svfiprintf_r+0x7a>
 801989a:	465b      	mov	r3, fp
 801989c:	4622      	mov	r2, r4
 801989e:	4629      	mov	r1, r5
 80198a0:	4638      	mov	r0, r7
 80198a2:	f7ff ff6d 	bl	8019780 <__ssputs_r>
 80198a6:	3001      	adds	r0, #1
 80198a8:	f000 80aa 	beq.w	8019a00 <_svfiprintf_r+0x1c8>
 80198ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80198ae:	445a      	add	r2, fp
 80198b0:	9209      	str	r2, [sp, #36]	; 0x24
 80198b2:	f89a 3000 	ldrb.w	r3, [sl]
 80198b6:	2b00      	cmp	r3, #0
 80198b8:	f000 80a2 	beq.w	8019a00 <_svfiprintf_r+0x1c8>
 80198bc:	2300      	movs	r3, #0
 80198be:	f04f 32ff 	mov.w	r2, #4294967295
 80198c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80198c6:	f10a 0a01 	add.w	sl, sl, #1
 80198ca:	9304      	str	r3, [sp, #16]
 80198cc:	9307      	str	r3, [sp, #28]
 80198ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80198d2:	931a      	str	r3, [sp, #104]	; 0x68
 80198d4:	4654      	mov	r4, sl
 80198d6:	2205      	movs	r2, #5
 80198d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80198dc:	4851      	ldr	r0, [pc, #324]	; (8019a24 <_svfiprintf_r+0x1ec>)
 80198de:	f7e6 fc7f 	bl	80001e0 <memchr>
 80198e2:	9a04      	ldr	r2, [sp, #16]
 80198e4:	b9d8      	cbnz	r0, 801991e <_svfiprintf_r+0xe6>
 80198e6:	06d0      	lsls	r0, r2, #27
 80198e8:	bf44      	itt	mi
 80198ea:	2320      	movmi	r3, #32
 80198ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80198f0:	0711      	lsls	r1, r2, #28
 80198f2:	bf44      	itt	mi
 80198f4:	232b      	movmi	r3, #43	; 0x2b
 80198f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80198fa:	f89a 3000 	ldrb.w	r3, [sl]
 80198fe:	2b2a      	cmp	r3, #42	; 0x2a
 8019900:	d015      	beq.n	801992e <_svfiprintf_r+0xf6>
 8019902:	9a07      	ldr	r2, [sp, #28]
 8019904:	4654      	mov	r4, sl
 8019906:	2000      	movs	r0, #0
 8019908:	f04f 0c0a 	mov.w	ip, #10
 801990c:	4621      	mov	r1, r4
 801990e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019912:	3b30      	subs	r3, #48	; 0x30
 8019914:	2b09      	cmp	r3, #9
 8019916:	d94e      	bls.n	80199b6 <_svfiprintf_r+0x17e>
 8019918:	b1b0      	cbz	r0, 8019948 <_svfiprintf_r+0x110>
 801991a:	9207      	str	r2, [sp, #28]
 801991c:	e014      	b.n	8019948 <_svfiprintf_r+0x110>
 801991e:	eba0 0308 	sub.w	r3, r0, r8
 8019922:	fa09 f303 	lsl.w	r3, r9, r3
 8019926:	4313      	orrs	r3, r2
 8019928:	9304      	str	r3, [sp, #16]
 801992a:	46a2      	mov	sl, r4
 801992c:	e7d2      	b.n	80198d4 <_svfiprintf_r+0x9c>
 801992e:	9b03      	ldr	r3, [sp, #12]
 8019930:	1d19      	adds	r1, r3, #4
 8019932:	681b      	ldr	r3, [r3, #0]
 8019934:	9103      	str	r1, [sp, #12]
 8019936:	2b00      	cmp	r3, #0
 8019938:	bfbb      	ittet	lt
 801993a:	425b      	neglt	r3, r3
 801993c:	f042 0202 	orrlt.w	r2, r2, #2
 8019940:	9307      	strge	r3, [sp, #28]
 8019942:	9307      	strlt	r3, [sp, #28]
 8019944:	bfb8      	it	lt
 8019946:	9204      	strlt	r2, [sp, #16]
 8019948:	7823      	ldrb	r3, [r4, #0]
 801994a:	2b2e      	cmp	r3, #46	; 0x2e
 801994c:	d10c      	bne.n	8019968 <_svfiprintf_r+0x130>
 801994e:	7863      	ldrb	r3, [r4, #1]
 8019950:	2b2a      	cmp	r3, #42	; 0x2a
 8019952:	d135      	bne.n	80199c0 <_svfiprintf_r+0x188>
 8019954:	9b03      	ldr	r3, [sp, #12]
 8019956:	1d1a      	adds	r2, r3, #4
 8019958:	681b      	ldr	r3, [r3, #0]
 801995a:	9203      	str	r2, [sp, #12]
 801995c:	2b00      	cmp	r3, #0
 801995e:	bfb8      	it	lt
 8019960:	f04f 33ff 	movlt.w	r3, #4294967295
 8019964:	3402      	adds	r4, #2
 8019966:	9305      	str	r3, [sp, #20]
 8019968:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8019a34 <_svfiprintf_r+0x1fc>
 801996c:	7821      	ldrb	r1, [r4, #0]
 801996e:	2203      	movs	r2, #3
 8019970:	4650      	mov	r0, sl
 8019972:	f7e6 fc35 	bl	80001e0 <memchr>
 8019976:	b140      	cbz	r0, 801998a <_svfiprintf_r+0x152>
 8019978:	2340      	movs	r3, #64	; 0x40
 801997a:	eba0 000a 	sub.w	r0, r0, sl
 801997e:	fa03 f000 	lsl.w	r0, r3, r0
 8019982:	9b04      	ldr	r3, [sp, #16]
 8019984:	4303      	orrs	r3, r0
 8019986:	3401      	adds	r4, #1
 8019988:	9304      	str	r3, [sp, #16]
 801998a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801998e:	4826      	ldr	r0, [pc, #152]	; (8019a28 <_svfiprintf_r+0x1f0>)
 8019990:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019994:	2206      	movs	r2, #6
 8019996:	f7e6 fc23 	bl	80001e0 <memchr>
 801999a:	2800      	cmp	r0, #0
 801999c:	d038      	beq.n	8019a10 <_svfiprintf_r+0x1d8>
 801999e:	4b23      	ldr	r3, [pc, #140]	; (8019a2c <_svfiprintf_r+0x1f4>)
 80199a0:	bb1b      	cbnz	r3, 80199ea <_svfiprintf_r+0x1b2>
 80199a2:	9b03      	ldr	r3, [sp, #12]
 80199a4:	3307      	adds	r3, #7
 80199a6:	f023 0307 	bic.w	r3, r3, #7
 80199aa:	3308      	adds	r3, #8
 80199ac:	9303      	str	r3, [sp, #12]
 80199ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80199b0:	4433      	add	r3, r6
 80199b2:	9309      	str	r3, [sp, #36]	; 0x24
 80199b4:	e767      	b.n	8019886 <_svfiprintf_r+0x4e>
 80199b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80199ba:	460c      	mov	r4, r1
 80199bc:	2001      	movs	r0, #1
 80199be:	e7a5      	b.n	801990c <_svfiprintf_r+0xd4>
 80199c0:	2300      	movs	r3, #0
 80199c2:	3401      	adds	r4, #1
 80199c4:	9305      	str	r3, [sp, #20]
 80199c6:	4619      	mov	r1, r3
 80199c8:	f04f 0c0a 	mov.w	ip, #10
 80199cc:	4620      	mov	r0, r4
 80199ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80199d2:	3a30      	subs	r2, #48	; 0x30
 80199d4:	2a09      	cmp	r2, #9
 80199d6:	d903      	bls.n	80199e0 <_svfiprintf_r+0x1a8>
 80199d8:	2b00      	cmp	r3, #0
 80199da:	d0c5      	beq.n	8019968 <_svfiprintf_r+0x130>
 80199dc:	9105      	str	r1, [sp, #20]
 80199de:	e7c3      	b.n	8019968 <_svfiprintf_r+0x130>
 80199e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80199e4:	4604      	mov	r4, r0
 80199e6:	2301      	movs	r3, #1
 80199e8:	e7f0      	b.n	80199cc <_svfiprintf_r+0x194>
 80199ea:	ab03      	add	r3, sp, #12
 80199ec:	9300      	str	r3, [sp, #0]
 80199ee:	462a      	mov	r2, r5
 80199f0:	4b0f      	ldr	r3, [pc, #60]	; (8019a30 <_svfiprintf_r+0x1f8>)
 80199f2:	a904      	add	r1, sp, #16
 80199f4:	4638      	mov	r0, r7
 80199f6:	f7fc faf5 	bl	8015fe4 <_printf_float>
 80199fa:	1c42      	adds	r2, r0, #1
 80199fc:	4606      	mov	r6, r0
 80199fe:	d1d6      	bne.n	80199ae <_svfiprintf_r+0x176>
 8019a00:	89ab      	ldrh	r3, [r5, #12]
 8019a02:	065b      	lsls	r3, r3, #25
 8019a04:	f53f af2c 	bmi.w	8019860 <_svfiprintf_r+0x28>
 8019a08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019a0a:	b01d      	add	sp, #116	; 0x74
 8019a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a10:	ab03      	add	r3, sp, #12
 8019a12:	9300      	str	r3, [sp, #0]
 8019a14:	462a      	mov	r2, r5
 8019a16:	4b06      	ldr	r3, [pc, #24]	; (8019a30 <_svfiprintf_r+0x1f8>)
 8019a18:	a904      	add	r1, sp, #16
 8019a1a:	4638      	mov	r0, r7
 8019a1c:	f7fc fd86 	bl	801652c <_printf_i>
 8019a20:	e7eb      	b.n	80199fa <_svfiprintf_r+0x1c2>
 8019a22:	bf00      	nop
 8019a24:	0801c68c 	.word	0x0801c68c
 8019a28:	0801c696 	.word	0x0801c696
 8019a2c:	08015fe5 	.word	0x08015fe5
 8019a30:	08019781 	.word	0x08019781
 8019a34:	0801c692 	.word	0x0801c692

08019a38 <nan>:
 8019a38:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8019a40 <nan+0x8>
 8019a3c:	4770      	bx	lr
 8019a3e:	bf00      	nop
 8019a40:	00000000 	.word	0x00000000
 8019a44:	7ff80000 	.word	0x7ff80000

08019a48 <strncmp>:
 8019a48:	b510      	push	{r4, lr}
 8019a4a:	b16a      	cbz	r2, 8019a68 <strncmp+0x20>
 8019a4c:	3901      	subs	r1, #1
 8019a4e:	1884      	adds	r4, r0, r2
 8019a50:	f810 3b01 	ldrb.w	r3, [r0], #1
 8019a54:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8019a58:	4293      	cmp	r3, r2
 8019a5a:	d103      	bne.n	8019a64 <strncmp+0x1c>
 8019a5c:	42a0      	cmp	r0, r4
 8019a5e:	d001      	beq.n	8019a64 <strncmp+0x1c>
 8019a60:	2b00      	cmp	r3, #0
 8019a62:	d1f5      	bne.n	8019a50 <strncmp+0x8>
 8019a64:	1a98      	subs	r0, r3, r2
 8019a66:	bd10      	pop	{r4, pc}
 8019a68:	4610      	mov	r0, r2
 8019a6a:	e7fc      	b.n	8019a66 <strncmp+0x1e>

08019a6c <__ascii_wctomb>:
 8019a6c:	b149      	cbz	r1, 8019a82 <__ascii_wctomb+0x16>
 8019a6e:	2aff      	cmp	r2, #255	; 0xff
 8019a70:	bf85      	ittet	hi
 8019a72:	238a      	movhi	r3, #138	; 0x8a
 8019a74:	6003      	strhi	r3, [r0, #0]
 8019a76:	700a      	strbls	r2, [r1, #0]
 8019a78:	f04f 30ff 	movhi.w	r0, #4294967295
 8019a7c:	bf98      	it	ls
 8019a7e:	2001      	movls	r0, #1
 8019a80:	4770      	bx	lr
 8019a82:	4608      	mov	r0, r1
 8019a84:	4770      	bx	lr
	...

08019a88 <__assert_func>:
 8019a88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019a8a:	4614      	mov	r4, r2
 8019a8c:	461a      	mov	r2, r3
 8019a8e:	4b09      	ldr	r3, [pc, #36]	; (8019ab4 <__assert_func+0x2c>)
 8019a90:	681b      	ldr	r3, [r3, #0]
 8019a92:	4605      	mov	r5, r0
 8019a94:	68d8      	ldr	r0, [r3, #12]
 8019a96:	b14c      	cbz	r4, 8019aac <__assert_func+0x24>
 8019a98:	4b07      	ldr	r3, [pc, #28]	; (8019ab8 <__assert_func+0x30>)
 8019a9a:	9100      	str	r1, [sp, #0]
 8019a9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019aa0:	4906      	ldr	r1, [pc, #24]	; (8019abc <__assert_func+0x34>)
 8019aa2:	462b      	mov	r3, r5
 8019aa4:	f000 f80e 	bl	8019ac4 <fiprintf>
 8019aa8:	f000 fa60 	bl	8019f6c <abort>
 8019aac:	4b04      	ldr	r3, [pc, #16]	; (8019ac0 <__assert_func+0x38>)
 8019aae:	461c      	mov	r4, r3
 8019ab0:	e7f3      	b.n	8019a9a <__assert_func+0x12>
 8019ab2:	bf00      	nop
 8019ab4:	2000220c 	.word	0x2000220c
 8019ab8:	0801c69d 	.word	0x0801c69d
 8019abc:	0801c6aa 	.word	0x0801c6aa
 8019ac0:	0801c6d8 	.word	0x0801c6d8

08019ac4 <fiprintf>:
 8019ac4:	b40e      	push	{r1, r2, r3}
 8019ac6:	b503      	push	{r0, r1, lr}
 8019ac8:	4601      	mov	r1, r0
 8019aca:	ab03      	add	r3, sp, #12
 8019acc:	4805      	ldr	r0, [pc, #20]	; (8019ae4 <fiprintf+0x20>)
 8019ace:	f853 2b04 	ldr.w	r2, [r3], #4
 8019ad2:	6800      	ldr	r0, [r0, #0]
 8019ad4:	9301      	str	r3, [sp, #4]
 8019ad6:	f000 f859 	bl	8019b8c <_vfiprintf_r>
 8019ada:	b002      	add	sp, #8
 8019adc:	f85d eb04 	ldr.w	lr, [sp], #4
 8019ae0:	b003      	add	sp, #12
 8019ae2:	4770      	bx	lr
 8019ae4:	2000220c 	.word	0x2000220c

08019ae8 <__retarget_lock_init_recursive>:
 8019ae8:	4770      	bx	lr

08019aea <__retarget_lock_acquire_recursive>:
 8019aea:	4770      	bx	lr

08019aec <__retarget_lock_release_recursive>:
 8019aec:	4770      	bx	lr

08019aee <_realloc_r>:
 8019aee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019af0:	4607      	mov	r7, r0
 8019af2:	4614      	mov	r4, r2
 8019af4:	460e      	mov	r6, r1
 8019af6:	b921      	cbnz	r1, 8019b02 <_realloc_r+0x14>
 8019af8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019afc:	4611      	mov	r1, r2
 8019afe:	f7fc b977 	b.w	8015df0 <_malloc_r>
 8019b02:	b922      	cbnz	r2, 8019b0e <_realloc_r+0x20>
 8019b04:	f7fc f924 	bl	8015d50 <_free_r>
 8019b08:	4625      	mov	r5, r4
 8019b0a:	4628      	mov	r0, r5
 8019b0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019b0e:	f000 fc51 	bl	801a3b4 <_malloc_usable_size_r>
 8019b12:	42a0      	cmp	r0, r4
 8019b14:	d20f      	bcs.n	8019b36 <_realloc_r+0x48>
 8019b16:	4621      	mov	r1, r4
 8019b18:	4638      	mov	r0, r7
 8019b1a:	f7fc f969 	bl	8015df0 <_malloc_r>
 8019b1e:	4605      	mov	r5, r0
 8019b20:	2800      	cmp	r0, #0
 8019b22:	d0f2      	beq.n	8019b0a <_realloc_r+0x1c>
 8019b24:	4631      	mov	r1, r6
 8019b26:	4622      	mov	r2, r4
 8019b28:	f7fc f8e2 	bl	8015cf0 <memcpy>
 8019b2c:	4631      	mov	r1, r6
 8019b2e:	4638      	mov	r0, r7
 8019b30:	f7fc f90e 	bl	8015d50 <_free_r>
 8019b34:	e7e9      	b.n	8019b0a <_realloc_r+0x1c>
 8019b36:	4635      	mov	r5, r6
 8019b38:	e7e7      	b.n	8019b0a <_realloc_r+0x1c>

08019b3a <__sfputc_r>:
 8019b3a:	6893      	ldr	r3, [r2, #8]
 8019b3c:	3b01      	subs	r3, #1
 8019b3e:	2b00      	cmp	r3, #0
 8019b40:	b410      	push	{r4}
 8019b42:	6093      	str	r3, [r2, #8]
 8019b44:	da08      	bge.n	8019b58 <__sfputc_r+0x1e>
 8019b46:	6994      	ldr	r4, [r2, #24]
 8019b48:	42a3      	cmp	r3, r4
 8019b4a:	db01      	blt.n	8019b50 <__sfputc_r+0x16>
 8019b4c:	290a      	cmp	r1, #10
 8019b4e:	d103      	bne.n	8019b58 <__sfputc_r+0x1e>
 8019b50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019b54:	f000 b94a 	b.w	8019dec <__swbuf_r>
 8019b58:	6813      	ldr	r3, [r2, #0]
 8019b5a:	1c58      	adds	r0, r3, #1
 8019b5c:	6010      	str	r0, [r2, #0]
 8019b5e:	7019      	strb	r1, [r3, #0]
 8019b60:	4608      	mov	r0, r1
 8019b62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019b66:	4770      	bx	lr

08019b68 <__sfputs_r>:
 8019b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b6a:	4606      	mov	r6, r0
 8019b6c:	460f      	mov	r7, r1
 8019b6e:	4614      	mov	r4, r2
 8019b70:	18d5      	adds	r5, r2, r3
 8019b72:	42ac      	cmp	r4, r5
 8019b74:	d101      	bne.n	8019b7a <__sfputs_r+0x12>
 8019b76:	2000      	movs	r0, #0
 8019b78:	e007      	b.n	8019b8a <__sfputs_r+0x22>
 8019b7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019b7e:	463a      	mov	r2, r7
 8019b80:	4630      	mov	r0, r6
 8019b82:	f7ff ffda 	bl	8019b3a <__sfputc_r>
 8019b86:	1c43      	adds	r3, r0, #1
 8019b88:	d1f3      	bne.n	8019b72 <__sfputs_r+0xa>
 8019b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08019b8c <_vfiprintf_r>:
 8019b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b90:	460d      	mov	r5, r1
 8019b92:	b09d      	sub	sp, #116	; 0x74
 8019b94:	4614      	mov	r4, r2
 8019b96:	4698      	mov	r8, r3
 8019b98:	4606      	mov	r6, r0
 8019b9a:	b118      	cbz	r0, 8019ba4 <_vfiprintf_r+0x18>
 8019b9c:	6983      	ldr	r3, [r0, #24]
 8019b9e:	b90b      	cbnz	r3, 8019ba4 <_vfiprintf_r+0x18>
 8019ba0:	f000 fb06 	bl	801a1b0 <__sinit>
 8019ba4:	4b89      	ldr	r3, [pc, #548]	; (8019dcc <_vfiprintf_r+0x240>)
 8019ba6:	429d      	cmp	r5, r3
 8019ba8:	d11b      	bne.n	8019be2 <_vfiprintf_r+0x56>
 8019baa:	6875      	ldr	r5, [r6, #4]
 8019bac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019bae:	07d9      	lsls	r1, r3, #31
 8019bb0:	d405      	bmi.n	8019bbe <_vfiprintf_r+0x32>
 8019bb2:	89ab      	ldrh	r3, [r5, #12]
 8019bb4:	059a      	lsls	r2, r3, #22
 8019bb6:	d402      	bmi.n	8019bbe <_vfiprintf_r+0x32>
 8019bb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019bba:	f7ff ff96 	bl	8019aea <__retarget_lock_acquire_recursive>
 8019bbe:	89ab      	ldrh	r3, [r5, #12]
 8019bc0:	071b      	lsls	r3, r3, #28
 8019bc2:	d501      	bpl.n	8019bc8 <_vfiprintf_r+0x3c>
 8019bc4:	692b      	ldr	r3, [r5, #16]
 8019bc6:	b9eb      	cbnz	r3, 8019c04 <_vfiprintf_r+0x78>
 8019bc8:	4629      	mov	r1, r5
 8019bca:	4630      	mov	r0, r6
 8019bcc:	f000 f960 	bl	8019e90 <__swsetup_r>
 8019bd0:	b1c0      	cbz	r0, 8019c04 <_vfiprintf_r+0x78>
 8019bd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019bd4:	07dc      	lsls	r4, r3, #31
 8019bd6:	d50e      	bpl.n	8019bf6 <_vfiprintf_r+0x6a>
 8019bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8019bdc:	b01d      	add	sp, #116	; 0x74
 8019bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019be2:	4b7b      	ldr	r3, [pc, #492]	; (8019dd0 <_vfiprintf_r+0x244>)
 8019be4:	429d      	cmp	r5, r3
 8019be6:	d101      	bne.n	8019bec <_vfiprintf_r+0x60>
 8019be8:	68b5      	ldr	r5, [r6, #8]
 8019bea:	e7df      	b.n	8019bac <_vfiprintf_r+0x20>
 8019bec:	4b79      	ldr	r3, [pc, #484]	; (8019dd4 <_vfiprintf_r+0x248>)
 8019bee:	429d      	cmp	r5, r3
 8019bf0:	bf08      	it	eq
 8019bf2:	68f5      	ldreq	r5, [r6, #12]
 8019bf4:	e7da      	b.n	8019bac <_vfiprintf_r+0x20>
 8019bf6:	89ab      	ldrh	r3, [r5, #12]
 8019bf8:	0598      	lsls	r0, r3, #22
 8019bfa:	d4ed      	bmi.n	8019bd8 <_vfiprintf_r+0x4c>
 8019bfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019bfe:	f7ff ff75 	bl	8019aec <__retarget_lock_release_recursive>
 8019c02:	e7e9      	b.n	8019bd8 <_vfiprintf_r+0x4c>
 8019c04:	2300      	movs	r3, #0
 8019c06:	9309      	str	r3, [sp, #36]	; 0x24
 8019c08:	2320      	movs	r3, #32
 8019c0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019c0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8019c12:	2330      	movs	r3, #48	; 0x30
 8019c14:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8019dd8 <_vfiprintf_r+0x24c>
 8019c18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019c1c:	f04f 0901 	mov.w	r9, #1
 8019c20:	4623      	mov	r3, r4
 8019c22:	469a      	mov	sl, r3
 8019c24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019c28:	b10a      	cbz	r2, 8019c2e <_vfiprintf_r+0xa2>
 8019c2a:	2a25      	cmp	r2, #37	; 0x25
 8019c2c:	d1f9      	bne.n	8019c22 <_vfiprintf_r+0x96>
 8019c2e:	ebba 0b04 	subs.w	fp, sl, r4
 8019c32:	d00b      	beq.n	8019c4c <_vfiprintf_r+0xc0>
 8019c34:	465b      	mov	r3, fp
 8019c36:	4622      	mov	r2, r4
 8019c38:	4629      	mov	r1, r5
 8019c3a:	4630      	mov	r0, r6
 8019c3c:	f7ff ff94 	bl	8019b68 <__sfputs_r>
 8019c40:	3001      	adds	r0, #1
 8019c42:	f000 80aa 	beq.w	8019d9a <_vfiprintf_r+0x20e>
 8019c46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019c48:	445a      	add	r2, fp
 8019c4a:	9209      	str	r2, [sp, #36]	; 0x24
 8019c4c:	f89a 3000 	ldrb.w	r3, [sl]
 8019c50:	2b00      	cmp	r3, #0
 8019c52:	f000 80a2 	beq.w	8019d9a <_vfiprintf_r+0x20e>
 8019c56:	2300      	movs	r3, #0
 8019c58:	f04f 32ff 	mov.w	r2, #4294967295
 8019c5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019c60:	f10a 0a01 	add.w	sl, sl, #1
 8019c64:	9304      	str	r3, [sp, #16]
 8019c66:	9307      	str	r3, [sp, #28]
 8019c68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019c6c:	931a      	str	r3, [sp, #104]	; 0x68
 8019c6e:	4654      	mov	r4, sl
 8019c70:	2205      	movs	r2, #5
 8019c72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019c76:	4858      	ldr	r0, [pc, #352]	; (8019dd8 <_vfiprintf_r+0x24c>)
 8019c78:	f7e6 fab2 	bl	80001e0 <memchr>
 8019c7c:	9a04      	ldr	r2, [sp, #16]
 8019c7e:	b9d8      	cbnz	r0, 8019cb8 <_vfiprintf_r+0x12c>
 8019c80:	06d1      	lsls	r1, r2, #27
 8019c82:	bf44      	itt	mi
 8019c84:	2320      	movmi	r3, #32
 8019c86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019c8a:	0713      	lsls	r3, r2, #28
 8019c8c:	bf44      	itt	mi
 8019c8e:	232b      	movmi	r3, #43	; 0x2b
 8019c90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019c94:	f89a 3000 	ldrb.w	r3, [sl]
 8019c98:	2b2a      	cmp	r3, #42	; 0x2a
 8019c9a:	d015      	beq.n	8019cc8 <_vfiprintf_r+0x13c>
 8019c9c:	9a07      	ldr	r2, [sp, #28]
 8019c9e:	4654      	mov	r4, sl
 8019ca0:	2000      	movs	r0, #0
 8019ca2:	f04f 0c0a 	mov.w	ip, #10
 8019ca6:	4621      	mov	r1, r4
 8019ca8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019cac:	3b30      	subs	r3, #48	; 0x30
 8019cae:	2b09      	cmp	r3, #9
 8019cb0:	d94e      	bls.n	8019d50 <_vfiprintf_r+0x1c4>
 8019cb2:	b1b0      	cbz	r0, 8019ce2 <_vfiprintf_r+0x156>
 8019cb4:	9207      	str	r2, [sp, #28]
 8019cb6:	e014      	b.n	8019ce2 <_vfiprintf_r+0x156>
 8019cb8:	eba0 0308 	sub.w	r3, r0, r8
 8019cbc:	fa09 f303 	lsl.w	r3, r9, r3
 8019cc0:	4313      	orrs	r3, r2
 8019cc2:	9304      	str	r3, [sp, #16]
 8019cc4:	46a2      	mov	sl, r4
 8019cc6:	e7d2      	b.n	8019c6e <_vfiprintf_r+0xe2>
 8019cc8:	9b03      	ldr	r3, [sp, #12]
 8019cca:	1d19      	adds	r1, r3, #4
 8019ccc:	681b      	ldr	r3, [r3, #0]
 8019cce:	9103      	str	r1, [sp, #12]
 8019cd0:	2b00      	cmp	r3, #0
 8019cd2:	bfbb      	ittet	lt
 8019cd4:	425b      	neglt	r3, r3
 8019cd6:	f042 0202 	orrlt.w	r2, r2, #2
 8019cda:	9307      	strge	r3, [sp, #28]
 8019cdc:	9307      	strlt	r3, [sp, #28]
 8019cde:	bfb8      	it	lt
 8019ce0:	9204      	strlt	r2, [sp, #16]
 8019ce2:	7823      	ldrb	r3, [r4, #0]
 8019ce4:	2b2e      	cmp	r3, #46	; 0x2e
 8019ce6:	d10c      	bne.n	8019d02 <_vfiprintf_r+0x176>
 8019ce8:	7863      	ldrb	r3, [r4, #1]
 8019cea:	2b2a      	cmp	r3, #42	; 0x2a
 8019cec:	d135      	bne.n	8019d5a <_vfiprintf_r+0x1ce>
 8019cee:	9b03      	ldr	r3, [sp, #12]
 8019cf0:	1d1a      	adds	r2, r3, #4
 8019cf2:	681b      	ldr	r3, [r3, #0]
 8019cf4:	9203      	str	r2, [sp, #12]
 8019cf6:	2b00      	cmp	r3, #0
 8019cf8:	bfb8      	it	lt
 8019cfa:	f04f 33ff 	movlt.w	r3, #4294967295
 8019cfe:	3402      	adds	r4, #2
 8019d00:	9305      	str	r3, [sp, #20]
 8019d02:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8019de8 <_vfiprintf_r+0x25c>
 8019d06:	7821      	ldrb	r1, [r4, #0]
 8019d08:	2203      	movs	r2, #3
 8019d0a:	4650      	mov	r0, sl
 8019d0c:	f7e6 fa68 	bl	80001e0 <memchr>
 8019d10:	b140      	cbz	r0, 8019d24 <_vfiprintf_r+0x198>
 8019d12:	2340      	movs	r3, #64	; 0x40
 8019d14:	eba0 000a 	sub.w	r0, r0, sl
 8019d18:	fa03 f000 	lsl.w	r0, r3, r0
 8019d1c:	9b04      	ldr	r3, [sp, #16]
 8019d1e:	4303      	orrs	r3, r0
 8019d20:	3401      	adds	r4, #1
 8019d22:	9304      	str	r3, [sp, #16]
 8019d24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019d28:	482c      	ldr	r0, [pc, #176]	; (8019ddc <_vfiprintf_r+0x250>)
 8019d2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019d2e:	2206      	movs	r2, #6
 8019d30:	f7e6 fa56 	bl	80001e0 <memchr>
 8019d34:	2800      	cmp	r0, #0
 8019d36:	d03f      	beq.n	8019db8 <_vfiprintf_r+0x22c>
 8019d38:	4b29      	ldr	r3, [pc, #164]	; (8019de0 <_vfiprintf_r+0x254>)
 8019d3a:	bb1b      	cbnz	r3, 8019d84 <_vfiprintf_r+0x1f8>
 8019d3c:	9b03      	ldr	r3, [sp, #12]
 8019d3e:	3307      	adds	r3, #7
 8019d40:	f023 0307 	bic.w	r3, r3, #7
 8019d44:	3308      	adds	r3, #8
 8019d46:	9303      	str	r3, [sp, #12]
 8019d48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019d4a:	443b      	add	r3, r7
 8019d4c:	9309      	str	r3, [sp, #36]	; 0x24
 8019d4e:	e767      	b.n	8019c20 <_vfiprintf_r+0x94>
 8019d50:	fb0c 3202 	mla	r2, ip, r2, r3
 8019d54:	460c      	mov	r4, r1
 8019d56:	2001      	movs	r0, #1
 8019d58:	e7a5      	b.n	8019ca6 <_vfiprintf_r+0x11a>
 8019d5a:	2300      	movs	r3, #0
 8019d5c:	3401      	adds	r4, #1
 8019d5e:	9305      	str	r3, [sp, #20]
 8019d60:	4619      	mov	r1, r3
 8019d62:	f04f 0c0a 	mov.w	ip, #10
 8019d66:	4620      	mov	r0, r4
 8019d68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019d6c:	3a30      	subs	r2, #48	; 0x30
 8019d6e:	2a09      	cmp	r2, #9
 8019d70:	d903      	bls.n	8019d7a <_vfiprintf_r+0x1ee>
 8019d72:	2b00      	cmp	r3, #0
 8019d74:	d0c5      	beq.n	8019d02 <_vfiprintf_r+0x176>
 8019d76:	9105      	str	r1, [sp, #20]
 8019d78:	e7c3      	b.n	8019d02 <_vfiprintf_r+0x176>
 8019d7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8019d7e:	4604      	mov	r4, r0
 8019d80:	2301      	movs	r3, #1
 8019d82:	e7f0      	b.n	8019d66 <_vfiprintf_r+0x1da>
 8019d84:	ab03      	add	r3, sp, #12
 8019d86:	9300      	str	r3, [sp, #0]
 8019d88:	462a      	mov	r2, r5
 8019d8a:	4b16      	ldr	r3, [pc, #88]	; (8019de4 <_vfiprintf_r+0x258>)
 8019d8c:	a904      	add	r1, sp, #16
 8019d8e:	4630      	mov	r0, r6
 8019d90:	f7fc f928 	bl	8015fe4 <_printf_float>
 8019d94:	4607      	mov	r7, r0
 8019d96:	1c78      	adds	r0, r7, #1
 8019d98:	d1d6      	bne.n	8019d48 <_vfiprintf_r+0x1bc>
 8019d9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019d9c:	07d9      	lsls	r1, r3, #31
 8019d9e:	d405      	bmi.n	8019dac <_vfiprintf_r+0x220>
 8019da0:	89ab      	ldrh	r3, [r5, #12]
 8019da2:	059a      	lsls	r2, r3, #22
 8019da4:	d402      	bmi.n	8019dac <_vfiprintf_r+0x220>
 8019da6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019da8:	f7ff fea0 	bl	8019aec <__retarget_lock_release_recursive>
 8019dac:	89ab      	ldrh	r3, [r5, #12]
 8019dae:	065b      	lsls	r3, r3, #25
 8019db0:	f53f af12 	bmi.w	8019bd8 <_vfiprintf_r+0x4c>
 8019db4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019db6:	e711      	b.n	8019bdc <_vfiprintf_r+0x50>
 8019db8:	ab03      	add	r3, sp, #12
 8019dba:	9300      	str	r3, [sp, #0]
 8019dbc:	462a      	mov	r2, r5
 8019dbe:	4b09      	ldr	r3, [pc, #36]	; (8019de4 <_vfiprintf_r+0x258>)
 8019dc0:	a904      	add	r1, sp, #16
 8019dc2:	4630      	mov	r0, r6
 8019dc4:	f7fc fbb2 	bl	801652c <_printf_i>
 8019dc8:	e7e4      	b.n	8019d94 <_vfiprintf_r+0x208>
 8019dca:	bf00      	nop
 8019dcc:	0801c6fc 	.word	0x0801c6fc
 8019dd0:	0801c71c 	.word	0x0801c71c
 8019dd4:	0801c6dc 	.word	0x0801c6dc
 8019dd8:	0801c68c 	.word	0x0801c68c
 8019ddc:	0801c696 	.word	0x0801c696
 8019de0:	08015fe5 	.word	0x08015fe5
 8019de4:	08019b69 	.word	0x08019b69
 8019de8:	0801c692 	.word	0x0801c692

08019dec <__swbuf_r>:
 8019dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019dee:	460e      	mov	r6, r1
 8019df0:	4614      	mov	r4, r2
 8019df2:	4605      	mov	r5, r0
 8019df4:	b118      	cbz	r0, 8019dfe <__swbuf_r+0x12>
 8019df6:	6983      	ldr	r3, [r0, #24]
 8019df8:	b90b      	cbnz	r3, 8019dfe <__swbuf_r+0x12>
 8019dfa:	f000 f9d9 	bl	801a1b0 <__sinit>
 8019dfe:	4b21      	ldr	r3, [pc, #132]	; (8019e84 <__swbuf_r+0x98>)
 8019e00:	429c      	cmp	r4, r3
 8019e02:	d12b      	bne.n	8019e5c <__swbuf_r+0x70>
 8019e04:	686c      	ldr	r4, [r5, #4]
 8019e06:	69a3      	ldr	r3, [r4, #24]
 8019e08:	60a3      	str	r3, [r4, #8]
 8019e0a:	89a3      	ldrh	r3, [r4, #12]
 8019e0c:	071a      	lsls	r2, r3, #28
 8019e0e:	d52f      	bpl.n	8019e70 <__swbuf_r+0x84>
 8019e10:	6923      	ldr	r3, [r4, #16]
 8019e12:	b36b      	cbz	r3, 8019e70 <__swbuf_r+0x84>
 8019e14:	6923      	ldr	r3, [r4, #16]
 8019e16:	6820      	ldr	r0, [r4, #0]
 8019e18:	1ac0      	subs	r0, r0, r3
 8019e1a:	6963      	ldr	r3, [r4, #20]
 8019e1c:	b2f6      	uxtb	r6, r6
 8019e1e:	4283      	cmp	r3, r0
 8019e20:	4637      	mov	r7, r6
 8019e22:	dc04      	bgt.n	8019e2e <__swbuf_r+0x42>
 8019e24:	4621      	mov	r1, r4
 8019e26:	4628      	mov	r0, r5
 8019e28:	f000 f92e 	bl	801a088 <_fflush_r>
 8019e2c:	bb30      	cbnz	r0, 8019e7c <__swbuf_r+0x90>
 8019e2e:	68a3      	ldr	r3, [r4, #8]
 8019e30:	3b01      	subs	r3, #1
 8019e32:	60a3      	str	r3, [r4, #8]
 8019e34:	6823      	ldr	r3, [r4, #0]
 8019e36:	1c5a      	adds	r2, r3, #1
 8019e38:	6022      	str	r2, [r4, #0]
 8019e3a:	701e      	strb	r6, [r3, #0]
 8019e3c:	6963      	ldr	r3, [r4, #20]
 8019e3e:	3001      	adds	r0, #1
 8019e40:	4283      	cmp	r3, r0
 8019e42:	d004      	beq.n	8019e4e <__swbuf_r+0x62>
 8019e44:	89a3      	ldrh	r3, [r4, #12]
 8019e46:	07db      	lsls	r3, r3, #31
 8019e48:	d506      	bpl.n	8019e58 <__swbuf_r+0x6c>
 8019e4a:	2e0a      	cmp	r6, #10
 8019e4c:	d104      	bne.n	8019e58 <__swbuf_r+0x6c>
 8019e4e:	4621      	mov	r1, r4
 8019e50:	4628      	mov	r0, r5
 8019e52:	f000 f919 	bl	801a088 <_fflush_r>
 8019e56:	b988      	cbnz	r0, 8019e7c <__swbuf_r+0x90>
 8019e58:	4638      	mov	r0, r7
 8019e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019e5c:	4b0a      	ldr	r3, [pc, #40]	; (8019e88 <__swbuf_r+0x9c>)
 8019e5e:	429c      	cmp	r4, r3
 8019e60:	d101      	bne.n	8019e66 <__swbuf_r+0x7a>
 8019e62:	68ac      	ldr	r4, [r5, #8]
 8019e64:	e7cf      	b.n	8019e06 <__swbuf_r+0x1a>
 8019e66:	4b09      	ldr	r3, [pc, #36]	; (8019e8c <__swbuf_r+0xa0>)
 8019e68:	429c      	cmp	r4, r3
 8019e6a:	bf08      	it	eq
 8019e6c:	68ec      	ldreq	r4, [r5, #12]
 8019e6e:	e7ca      	b.n	8019e06 <__swbuf_r+0x1a>
 8019e70:	4621      	mov	r1, r4
 8019e72:	4628      	mov	r0, r5
 8019e74:	f000 f80c 	bl	8019e90 <__swsetup_r>
 8019e78:	2800      	cmp	r0, #0
 8019e7a:	d0cb      	beq.n	8019e14 <__swbuf_r+0x28>
 8019e7c:	f04f 37ff 	mov.w	r7, #4294967295
 8019e80:	e7ea      	b.n	8019e58 <__swbuf_r+0x6c>
 8019e82:	bf00      	nop
 8019e84:	0801c6fc 	.word	0x0801c6fc
 8019e88:	0801c71c 	.word	0x0801c71c
 8019e8c:	0801c6dc 	.word	0x0801c6dc

08019e90 <__swsetup_r>:
 8019e90:	4b32      	ldr	r3, [pc, #200]	; (8019f5c <__swsetup_r+0xcc>)
 8019e92:	b570      	push	{r4, r5, r6, lr}
 8019e94:	681d      	ldr	r5, [r3, #0]
 8019e96:	4606      	mov	r6, r0
 8019e98:	460c      	mov	r4, r1
 8019e9a:	b125      	cbz	r5, 8019ea6 <__swsetup_r+0x16>
 8019e9c:	69ab      	ldr	r3, [r5, #24]
 8019e9e:	b913      	cbnz	r3, 8019ea6 <__swsetup_r+0x16>
 8019ea0:	4628      	mov	r0, r5
 8019ea2:	f000 f985 	bl	801a1b0 <__sinit>
 8019ea6:	4b2e      	ldr	r3, [pc, #184]	; (8019f60 <__swsetup_r+0xd0>)
 8019ea8:	429c      	cmp	r4, r3
 8019eaa:	d10f      	bne.n	8019ecc <__swsetup_r+0x3c>
 8019eac:	686c      	ldr	r4, [r5, #4]
 8019eae:	89a3      	ldrh	r3, [r4, #12]
 8019eb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019eb4:	0719      	lsls	r1, r3, #28
 8019eb6:	d42c      	bmi.n	8019f12 <__swsetup_r+0x82>
 8019eb8:	06dd      	lsls	r5, r3, #27
 8019eba:	d411      	bmi.n	8019ee0 <__swsetup_r+0x50>
 8019ebc:	2309      	movs	r3, #9
 8019ebe:	6033      	str	r3, [r6, #0]
 8019ec0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019ec4:	81a3      	strh	r3, [r4, #12]
 8019ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8019eca:	e03e      	b.n	8019f4a <__swsetup_r+0xba>
 8019ecc:	4b25      	ldr	r3, [pc, #148]	; (8019f64 <__swsetup_r+0xd4>)
 8019ece:	429c      	cmp	r4, r3
 8019ed0:	d101      	bne.n	8019ed6 <__swsetup_r+0x46>
 8019ed2:	68ac      	ldr	r4, [r5, #8]
 8019ed4:	e7eb      	b.n	8019eae <__swsetup_r+0x1e>
 8019ed6:	4b24      	ldr	r3, [pc, #144]	; (8019f68 <__swsetup_r+0xd8>)
 8019ed8:	429c      	cmp	r4, r3
 8019eda:	bf08      	it	eq
 8019edc:	68ec      	ldreq	r4, [r5, #12]
 8019ede:	e7e6      	b.n	8019eae <__swsetup_r+0x1e>
 8019ee0:	0758      	lsls	r0, r3, #29
 8019ee2:	d512      	bpl.n	8019f0a <__swsetup_r+0x7a>
 8019ee4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019ee6:	b141      	cbz	r1, 8019efa <__swsetup_r+0x6a>
 8019ee8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019eec:	4299      	cmp	r1, r3
 8019eee:	d002      	beq.n	8019ef6 <__swsetup_r+0x66>
 8019ef0:	4630      	mov	r0, r6
 8019ef2:	f7fb ff2d 	bl	8015d50 <_free_r>
 8019ef6:	2300      	movs	r3, #0
 8019ef8:	6363      	str	r3, [r4, #52]	; 0x34
 8019efa:	89a3      	ldrh	r3, [r4, #12]
 8019efc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019f00:	81a3      	strh	r3, [r4, #12]
 8019f02:	2300      	movs	r3, #0
 8019f04:	6063      	str	r3, [r4, #4]
 8019f06:	6923      	ldr	r3, [r4, #16]
 8019f08:	6023      	str	r3, [r4, #0]
 8019f0a:	89a3      	ldrh	r3, [r4, #12]
 8019f0c:	f043 0308 	orr.w	r3, r3, #8
 8019f10:	81a3      	strh	r3, [r4, #12]
 8019f12:	6923      	ldr	r3, [r4, #16]
 8019f14:	b94b      	cbnz	r3, 8019f2a <__swsetup_r+0x9a>
 8019f16:	89a3      	ldrh	r3, [r4, #12]
 8019f18:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019f1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019f20:	d003      	beq.n	8019f2a <__swsetup_r+0x9a>
 8019f22:	4621      	mov	r1, r4
 8019f24:	4630      	mov	r0, r6
 8019f26:	f000 fa05 	bl	801a334 <__smakebuf_r>
 8019f2a:	89a0      	ldrh	r0, [r4, #12]
 8019f2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019f30:	f010 0301 	ands.w	r3, r0, #1
 8019f34:	d00a      	beq.n	8019f4c <__swsetup_r+0xbc>
 8019f36:	2300      	movs	r3, #0
 8019f38:	60a3      	str	r3, [r4, #8]
 8019f3a:	6963      	ldr	r3, [r4, #20]
 8019f3c:	425b      	negs	r3, r3
 8019f3e:	61a3      	str	r3, [r4, #24]
 8019f40:	6923      	ldr	r3, [r4, #16]
 8019f42:	b943      	cbnz	r3, 8019f56 <__swsetup_r+0xc6>
 8019f44:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019f48:	d1ba      	bne.n	8019ec0 <__swsetup_r+0x30>
 8019f4a:	bd70      	pop	{r4, r5, r6, pc}
 8019f4c:	0781      	lsls	r1, r0, #30
 8019f4e:	bf58      	it	pl
 8019f50:	6963      	ldrpl	r3, [r4, #20]
 8019f52:	60a3      	str	r3, [r4, #8]
 8019f54:	e7f4      	b.n	8019f40 <__swsetup_r+0xb0>
 8019f56:	2000      	movs	r0, #0
 8019f58:	e7f7      	b.n	8019f4a <__swsetup_r+0xba>
 8019f5a:	bf00      	nop
 8019f5c:	2000220c 	.word	0x2000220c
 8019f60:	0801c6fc 	.word	0x0801c6fc
 8019f64:	0801c71c 	.word	0x0801c71c
 8019f68:	0801c6dc 	.word	0x0801c6dc

08019f6c <abort>:
 8019f6c:	b508      	push	{r3, lr}
 8019f6e:	2006      	movs	r0, #6
 8019f70:	f000 fa50 	bl	801a414 <raise>
 8019f74:	2001      	movs	r0, #1
 8019f76:	f7f0 ffa3 	bl	800aec0 <_exit>
	...

08019f7c <__sflush_r>:
 8019f7c:	898a      	ldrh	r2, [r1, #12]
 8019f7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019f82:	4605      	mov	r5, r0
 8019f84:	0710      	lsls	r0, r2, #28
 8019f86:	460c      	mov	r4, r1
 8019f88:	d458      	bmi.n	801a03c <__sflush_r+0xc0>
 8019f8a:	684b      	ldr	r3, [r1, #4]
 8019f8c:	2b00      	cmp	r3, #0
 8019f8e:	dc05      	bgt.n	8019f9c <__sflush_r+0x20>
 8019f90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019f92:	2b00      	cmp	r3, #0
 8019f94:	dc02      	bgt.n	8019f9c <__sflush_r+0x20>
 8019f96:	2000      	movs	r0, #0
 8019f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019f9e:	2e00      	cmp	r6, #0
 8019fa0:	d0f9      	beq.n	8019f96 <__sflush_r+0x1a>
 8019fa2:	2300      	movs	r3, #0
 8019fa4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019fa8:	682f      	ldr	r7, [r5, #0]
 8019faa:	602b      	str	r3, [r5, #0]
 8019fac:	d032      	beq.n	801a014 <__sflush_r+0x98>
 8019fae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019fb0:	89a3      	ldrh	r3, [r4, #12]
 8019fb2:	075a      	lsls	r2, r3, #29
 8019fb4:	d505      	bpl.n	8019fc2 <__sflush_r+0x46>
 8019fb6:	6863      	ldr	r3, [r4, #4]
 8019fb8:	1ac0      	subs	r0, r0, r3
 8019fba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019fbc:	b10b      	cbz	r3, 8019fc2 <__sflush_r+0x46>
 8019fbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019fc0:	1ac0      	subs	r0, r0, r3
 8019fc2:	2300      	movs	r3, #0
 8019fc4:	4602      	mov	r2, r0
 8019fc6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019fc8:	6a21      	ldr	r1, [r4, #32]
 8019fca:	4628      	mov	r0, r5
 8019fcc:	47b0      	blx	r6
 8019fce:	1c43      	adds	r3, r0, #1
 8019fd0:	89a3      	ldrh	r3, [r4, #12]
 8019fd2:	d106      	bne.n	8019fe2 <__sflush_r+0x66>
 8019fd4:	6829      	ldr	r1, [r5, #0]
 8019fd6:	291d      	cmp	r1, #29
 8019fd8:	d82c      	bhi.n	801a034 <__sflush_r+0xb8>
 8019fda:	4a2a      	ldr	r2, [pc, #168]	; (801a084 <__sflush_r+0x108>)
 8019fdc:	40ca      	lsrs	r2, r1
 8019fde:	07d6      	lsls	r6, r2, #31
 8019fe0:	d528      	bpl.n	801a034 <__sflush_r+0xb8>
 8019fe2:	2200      	movs	r2, #0
 8019fe4:	6062      	str	r2, [r4, #4]
 8019fe6:	04d9      	lsls	r1, r3, #19
 8019fe8:	6922      	ldr	r2, [r4, #16]
 8019fea:	6022      	str	r2, [r4, #0]
 8019fec:	d504      	bpl.n	8019ff8 <__sflush_r+0x7c>
 8019fee:	1c42      	adds	r2, r0, #1
 8019ff0:	d101      	bne.n	8019ff6 <__sflush_r+0x7a>
 8019ff2:	682b      	ldr	r3, [r5, #0]
 8019ff4:	b903      	cbnz	r3, 8019ff8 <__sflush_r+0x7c>
 8019ff6:	6560      	str	r0, [r4, #84]	; 0x54
 8019ff8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019ffa:	602f      	str	r7, [r5, #0]
 8019ffc:	2900      	cmp	r1, #0
 8019ffe:	d0ca      	beq.n	8019f96 <__sflush_r+0x1a>
 801a000:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a004:	4299      	cmp	r1, r3
 801a006:	d002      	beq.n	801a00e <__sflush_r+0x92>
 801a008:	4628      	mov	r0, r5
 801a00a:	f7fb fea1 	bl	8015d50 <_free_r>
 801a00e:	2000      	movs	r0, #0
 801a010:	6360      	str	r0, [r4, #52]	; 0x34
 801a012:	e7c1      	b.n	8019f98 <__sflush_r+0x1c>
 801a014:	6a21      	ldr	r1, [r4, #32]
 801a016:	2301      	movs	r3, #1
 801a018:	4628      	mov	r0, r5
 801a01a:	47b0      	blx	r6
 801a01c:	1c41      	adds	r1, r0, #1
 801a01e:	d1c7      	bne.n	8019fb0 <__sflush_r+0x34>
 801a020:	682b      	ldr	r3, [r5, #0]
 801a022:	2b00      	cmp	r3, #0
 801a024:	d0c4      	beq.n	8019fb0 <__sflush_r+0x34>
 801a026:	2b1d      	cmp	r3, #29
 801a028:	d001      	beq.n	801a02e <__sflush_r+0xb2>
 801a02a:	2b16      	cmp	r3, #22
 801a02c:	d101      	bne.n	801a032 <__sflush_r+0xb6>
 801a02e:	602f      	str	r7, [r5, #0]
 801a030:	e7b1      	b.n	8019f96 <__sflush_r+0x1a>
 801a032:	89a3      	ldrh	r3, [r4, #12]
 801a034:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a038:	81a3      	strh	r3, [r4, #12]
 801a03a:	e7ad      	b.n	8019f98 <__sflush_r+0x1c>
 801a03c:	690f      	ldr	r7, [r1, #16]
 801a03e:	2f00      	cmp	r7, #0
 801a040:	d0a9      	beq.n	8019f96 <__sflush_r+0x1a>
 801a042:	0793      	lsls	r3, r2, #30
 801a044:	680e      	ldr	r6, [r1, #0]
 801a046:	bf08      	it	eq
 801a048:	694b      	ldreq	r3, [r1, #20]
 801a04a:	600f      	str	r7, [r1, #0]
 801a04c:	bf18      	it	ne
 801a04e:	2300      	movne	r3, #0
 801a050:	eba6 0807 	sub.w	r8, r6, r7
 801a054:	608b      	str	r3, [r1, #8]
 801a056:	f1b8 0f00 	cmp.w	r8, #0
 801a05a:	dd9c      	ble.n	8019f96 <__sflush_r+0x1a>
 801a05c:	6a21      	ldr	r1, [r4, #32]
 801a05e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a060:	4643      	mov	r3, r8
 801a062:	463a      	mov	r2, r7
 801a064:	4628      	mov	r0, r5
 801a066:	47b0      	blx	r6
 801a068:	2800      	cmp	r0, #0
 801a06a:	dc06      	bgt.n	801a07a <__sflush_r+0xfe>
 801a06c:	89a3      	ldrh	r3, [r4, #12]
 801a06e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a072:	81a3      	strh	r3, [r4, #12]
 801a074:	f04f 30ff 	mov.w	r0, #4294967295
 801a078:	e78e      	b.n	8019f98 <__sflush_r+0x1c>
 801a07a:	4407      	add	r7, r0
 801a07c:	eba8 0800 	sub.w	r8, r8, r0
 801a080:	e7e9      	b.n	801a056 <__sflush_r+0xda>
 801a082:	bf00      	nop
 801a084:	20400001 	.word	0x20400001

0801a088 <_fflush_r>:
 801a088:	b538      	push	{r3, r4, r5, lr}
 801a08a:	690b      	ldr	r3, [r1, #16]
 801a08c:	4605      	mov	r5, r0
 801a08e:	460c      	mov	r4, r1
 801a090:	b913      	cbnz	r3, 801a098 <_fflush_r+0x10>
 801a092:	2500      	movs	r5, #0
 801a094:	4628      	mov	r0, r5
 801a096:	bd38      	pop	{r3, r4, r5, pc}
 801a098:	b118      	cbz	r0, 801a0a2 <_fflush_r+0x1a>
 801a09a:	6983      	ldr	r3, [r0, #24]
 801a09c:	b90b      	cbnz	r3, 801a0a2 <_fflush_r+0x1a>
 801a09e:	f000 f887 	bl	801a1b0 <__sinit>
 801a0a2:	4b14      	ldr	r3, [pc, #80]	; (801a0f4 <_fflush_r+0x6c>)
 801a0a4:	429c      	cmp	r4, r3
 801a0a6:	d11b      	bne.n	801a0e0 <_fflush_r+0x58>
 801a0a8:	686c      	ldr	r4, [r5, #4]
 801a0aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a0ae:	2b00      	cmp	r3, #0
 801a0b0:	d0ef      	beq.n	801a092 <_fflush_r+0xa>
 801a0b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a0b4:	07d0      	lsls	r0, r2, #31
 801a0b6:	d404      	bmi.n	801a0c2 <_fflush_r+0x3a>
 801a0b8:	0599      	lsls	r1, r3, #22
 801a0ba:	d402      	bmi.n	801a0c2 <_fflush_r+0x3a>
 801a0bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a0be:	f7ff fd14 	bl	8019aea <__retarget_lock_acquire_recursive>
 801a0c2:	4628      	mov	r0, r5
 801a0c4:	4621      	mov	r1, r4
 801a0c6:	f7ff ff59 	bl	8019f7c <__sflush_r>
 801a0ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a0cc:	07da      	lsls	r2, r3, #31
 801a0ce:	4605      	mov	r5, r0
 801a0d0:	d4e0      	bmi.n	801a094 <_fflush_r+0xc>
 801a0d2:	89a3      	ldrh	r3, [r4, #12]
 801a0d4:	059b      	lsls	r3, r3, #22
 801a0d6:	d4dd      	bmi.n	801a094 <_fflush_r+0xc>
 801a0d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a0da:	f7ff fd07 	bl	8019aec <__retarget_lock_release_recursive>
 801a0de:	e7d9      	b.n	801a094 <_fflush_r+0xc>
 801a0e0:	4b05      	ldr	r3, [pc, #20]	; (801a0f8 <_fflush_r+0x70>)
 801a0e2:	429c      	cmp	r4, r3
 801a0e4:	d101      	bne.n	801a0ea <_fflush_r+0x62>
 801a0e6:	68ac      	ldr	r4, [r5, #8]
 801a0e8:	e7df      	b.n	801a0aa <_fflush_r+0x22>
 801a0ea:	4b04      	ldr	r3, [pc, #16]	; (801a0fc <_fflush_r+0x74>)
 801a0ec:	429c      	cmp	r4, r3
 801a0ee:	bf08      	it	eq
 801a0f0:	68ec      	ldreq	r4, [r5, #12]
 801a0f2:	e7da      	b.n	801a0aa <_fflush_r+0x22>
 801a0f4:	0801c6fc 	.word	0x0801c6fc
 801a0f8:	0801c71c 	.word	0x0801c71c
 801a0fc:	0801c6dc 	.word	0x0801c6dc

0801a100 <std>:
 801a100:	2300      	movs	r3, #0
 801a102:	b510      	push	{r4, lr}
 801a104:	4604      	mov	r4, r0
 801a106:	e9c0 3300 	strd	r3, r3, [r0]
 801a10a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a10e:	6083      	str	r3, [r0, #8]
 801a110:	8181      	strh	r1, [r0, #12]
 801a112:	6643      	str	r3, [r0, #100]	; 0x64
 801a114:	81c2      	strh	r2, [r0, #14]
 801a116:	6183      	str	r3, [r0, #24]
 801a118:	4619      	mov	r1, r3
 801a11a:	2208      	movs	r2, #8
 801a11c:	305c      	adds	r0, #92	; 0x5c
 801a11e:	f7fb fe0f 	bl	8015d40 <memset>
 801a122:	4b05      	ldr	r3, [pc, #20]	; (801a138 <std+0x38>)
 801a124:	6263      	str	r3, [r4, #36]	; 0x24
 801a126:	4b05      	ldr	r3, [pc, #20]	; (801a13c <std+0x3c>)
 801a128:	62a3      	str	r3, [r4, #40]	; 0x28
 801a12a:	4b05      	ldr	r3, [pc, #20]	; (801a140 <std+0x40>)
 801a12c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a12e:	4b05      	ldr	r3, [pc, #20]	; (801a144 <std+0x44>)
 801a130:	6224      	str	r4, [r4, #32]
 801a132:	6323      	str	r3, [r4, #48]	; 0x30
 801a134:	bd10      	pop	{r4, pc}
 801a136:	bf00      	nop
 801a138:	0801a44d 	.word	0x0801a44d
 801a13c:	0801a46f 	.word	0x0801a46f
 801a140:	0801a4a7 	.word	0x0801a4a7
 801a144:	0801a4cb 	.word	0x0801a4cb

0801a148 <_cleanup_r>:
 801a148:	4901      	ldr	r1, [pc, #4]	; (801a150 <_cleanup_r+0x8>)
 801a14a:	f000 b8af 	b.w	801a2ac <_fwalk_reent>
 801a14e:	bf00      	nop
 801a150:	0801a089 	.word	0x0801a089

0801a154 <__sfmoreglue>:
 801a154:	b570      	push	{r4, r5, r6, lr}
 801a156:	1e4a      	subs	r2, r1, #1
 801a158:	2568      	movs	r5, #104	; 0x68
 801a15a:	4355      	muls	r5, r2
 801a15c:	460e      	mov	r6, r1
 801a15e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a162:	f7fb fe45 	bl	8015df0 <_malloc_r>
 801a166:	4604      	mov	r4, r0
 801a168:	b140      	cbz	r0, 801a17c <__sfmoreglue+0x28>
 801a16a:	2100      	movs	r1, #0
 801a16c:	e9c0 1600 	strd	r1, r6, [r0]
 801a170:	300c      	adds	r0, #12
 801a172:	60a0      	str	r0, [r4, #8]
 801a174:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a178:	f7fb fde2 	bl	8015d40 <memset>
 801a17c:	4620      	mov	r0, r4
 801a17e:	bd70      	pop	{r4, r5, r6, pc}

0801a180 <__sfp_lock_acquire>:
 801a180:	4801      	ldr	r0, [pc, #4]	; (801a188 <__sfp_lock_acquire+0x8>)
 801a182:	f7ff bcb2 	b.w	8019aea <__retarget_lock_acquire_recursive>
 801a186:	bf00      	nop
 801a188:	2000fb48 	.word	0x2000fb48

0801a18c <__sfp_lock_release>:
 801a18c:	4801      	ldr	r0, [pc, #4]	; (801a194 <__sfp_lock_release+0x8>)
 801a18e:	f7ff bcad 	b.w	8019aec <__retarget_lock_release_recursive>
 801a192:	bf00      	nop
 801a194:	2000fb48 	.word	0x2000fb48

0801a198 <__sinit_lock_acquire>:
 801a198:	4801      	ldr	r0, [pc, #4]	; (801a1a0 <__sinit_lock_acquire+0x8>)
 801a19a:	f7ff bca6 	b.w	8019aea <__retarget_lock_acquire_recursive>
 801a19e:	bf00      	nop
 801a1a0:	2000fb43 	.word	0x2000fb43

0801a1a4 <__sinit_lock_release>:
 801a1a4:	4801      	ldr	r0, [pc, #4]	; (801a1ac <__sinit_lock_release+0x8>)
 801a1a6:	f7ff bca1 	b.w	8019aec <__retarget_lock_release_recursive>
 801a1aa:	bf00      	nop
 801a1ac:	2000fb43 	.word	0x2000fb43

0801a1b0 <__sinit>:
 801a1b0:	b510      	push	{r4, lr}
 801a1b2:	4604      	mov	r4, r0
 801a1b4:	f7ff fff0 	bl	801a198 <__sinit_lock_acquire>
 801a1b8:	69a3      	ldr	r3, [r4, #24]
 801a1ba:	b11b      	cbz	r3, 801a1c4 <__sinit+0x14>
 801a1bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a1c0:	f7ff bff0 	b.w	801a1a4 <__sinit_lock_release>
 801a1c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801a1c8:	6523      	str	r3, [r4, #80]	; 0x50
 801a1ca:	4b13      	ldr	r3, [pc, #76]	; (801a218 <__sinit+0x68>)
 801a1cc:	4a13      	ldr	r2, [pc, #76]	; (801a21c <__sinit+0x6c>)
 801a1ce:	681b      	ldr	r3, [r3, #0]
 801a1d0:	62a2      	str	r2, [r4, #40]	; 0x28
 801a1d2:	42a3      	cmp	r3, r4
 801a1d4:	bf04      	itt	eq
 801a1d6:	2301      	moveq	r3, #1
 801a1d8:	61a3      	streq	r3, [r4, #24]
 801a1da:	4620      	mov	r0, r4
 801a1dc:	f000 f820 	bl	801a220 <__sfp>
 801a1e0:	6060      	str	r0, [r4, #4]
 801a1e2:	4620      	mov	r0, r4
 801a1e4:	f000 f81c 	bl	801a220 <__sfp>
 801a1e8:	60a0      	str	r0, [r4, #8]
 801a1ea:	4620      	mov	r0, r4
 801a1ec:	f000 f818 	bl	801a220 <__sfp>
 801a1f0:	2200      	movs	r2, #0
 801a1f2:	60e0      	str	r0, [r4, #12]
 801a1f4:	2104      	movs	r1, #4
 801a1f6:	6860      	ldr	r0, [r4, #4]
 801a1f8:	f7ff ff82 	bl	801a100 <std>
 801a1fc:	68a0      	ldr	r0, [r4, #8]
 801a1fe:	2201      	movs	r2, #1
 801a200:	2109      	movs	r1, #9
 801a202:	f7ff ff7d 	bl	801a100 <std>
 801a206:	68e0      	ldr	r0, [r4, #12]
 801a208:	2202      	movs	r2, #2
 801a20a:	2112      	movs	r1, #18
 801a20c:	f7ff ff78 	bl	801a100 <std>
 801a210:	2301      	movs	r3, #1
 801a212:	61a3      	str	r3, [r4, #24]
 801a214:	e7d2      	b.n	801a1bc <__sinit+0xc>
 801a216:	bf00      	nop
 801a218:	0801c288 	.word	0x0801c288
 801a21c:	0801a149 	.word	0x0801a149

0801a220 <__sfp>:
 801a220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a222:	4607      	mov	r7, r0
 801a224:	f7ff ffac 	bl	801a180 <__sfp_lock_acquire>
 801a228:	4b1e      	ldr	r3, [pc, #120]	; (801a2a4 <__sfp+0x84>)
 801a22a:	681e      	ldr	r6, [r3, #0]
 801a22c:	69b3      	ldr	r3, [r6, #24]
 801a22e:	b913      	cbnz	r3, 801a236 <__sfp+0x16>
 801a230:	4630      	mov	r0, r6
 801a232:	f7ff ffbd 	bl	801a1b0 <__sinit>
 801a236:	3648      	adds	r6, #72	; 0x48
 801a238:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a23c:	3b01      	subs	r3, #1
 801a23e:	d503      	bpl.n	801a248 <__sfp+0x28>
 801a240:	6833      	ldr	r3, [r6, #0]
 801a242:	b30b      	cbz	r3, 801a288 <__sfp+0x68>
 801a244:	6836      	ldr	r6, [r6, #0]
 801a246:	e7f7      	b.n	801a238 <__sfp+0x18>
 801a248:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a24c:	b9d5      	cbnz	r5, 801a284 <__sfp+0x64>
 801a24e:	4b16      	ldr	r3, [pc, #88]	; (801a2a8 <__sfp+0x88>)
 801a250:	60e3      	str	r3, [r4, #12]
 801a252:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a256:	6665      	str	r5, [r4, #100]	; 0x64
 801a258:	f7ff fc46 	bl	8019ae8 <__retarget_lock_init_recursive>
 801a25c:	f7ff ff96 	bl	801a18c <__sfp_lock_release>
 801a260:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801a264:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801a268:	6025      	str	r5, [r4, #0]
 801a26a:	61a5      	str	r5, [r4, #24]
 801a26c:	2208      	movs	r2, #8
 801a26e:	4629      	mov	r1, r5
 801a270:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a274:	f7fb fd64 	bl	8015d40 <memset>
 801a278:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a27c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a280:	4620      	mov	r0, r4
 801a282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a284:	3468      	adds	r4, #104	; 0x68
 801a286:	e7d9      	b.n	801a23c <__sfp+0x1c>
 801a288:	2104      	movs	r1, #4
 801a28a:	4638      	mov	r0, r7
 801a28c:	f7ff ff62 	bl	801a154 <__sfmoreglue>
 801a290:	4604      	mov	r4, r0
 801a292:	6030      	str	r0, [r6, #0]
 801a294:	2800      	cmp	r0, #0
 801a296:	d1d5      	bne.n	801a244 <__sfp+0x24>
 801a298:	f7ff ff78 	bl	801a18c <__sfp_lock_release>
 801a29c:	230c      	movs	r3, #12
 801a29e:	603b      	str	r3, [r7, #0]
 801a2a0:	e7ee      	b.n	801a280 <__sfp+0x60>
 801a2a2:	bf00      	nop
 801a2a4:	0801c288 	.word	0x0801c288
 801a2a8:	ffff0001 	.word	0xffff0001

0801a2ac <_fwalk_reent>:
 801a2ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a2b0:	4606      	mov	r6, r0
 801a2b2:	4688      	mov	r8, r1
 801a2b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801a2b8:	2700      	movs	r7, #0
 801a2ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a2be:	f1b9 0901 	subs.w	r9, r9, #1
 801a2c2:	d505      	bpl.n	801a2d0 <_fwalk_reent+0x24>
 801a2c4:	6824      	ldr	r4, [r4, #0]
 801a2c6:	2c00      	cmp	r4, #0
 801a2c8:	d1f7      	bne.n	801a2ba <_fwalk_reent+0xe>
 801a2ca:	4638      	mov	r0, r7
 801a2cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a2d0:	89ab      	ldrh	r3, [r5, #12]
 801a2d2:	2b01      	cmp	r3, #1
 801a2d4:	d907      	bls.n	801a2e6 <_fwalk_reent+0x3a>
 801a2d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a2da:	3301      	adds	r3, #1
 801a2dc:	d003      	beq.n	801a2e6 <_fwalk_reent+0x3a>
 801a2de:	4629      	mov	r1, r5
 801a2e0:	4630      	mov	r0, r6
 801a2e2:	47c0      	blx	r8
 801a2e4:	4307      	orrs	r7, r0
 801a2e6:	3568      	adds	r5, #104	; 0x68
 801a2e8:	e7e9      	b.n	801a2be <_fwalk_reent+0x12>

0801a2ea <__swhatbuf_r>:
 801a2ea:	b570      	push	{r4, r5, r6, lr}
 801a2ec:	460e      	mov	r6, r1
 801a2ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a2f2:	2900      	cmp	r1, #0
 801a2f4:	b096      	sub	sp, #88	; 0x58
 801a2f6:	4614      	mov	r4, r2
 801a2f8:	461d      	mov	r5, r3
 801a2fa:	da07      	bge.n	801a30c <__swhatbuf_r+0x22>
 801a2fc:	2300      	movs	r3, #0
 801a2fe:	602b      	str	r3, [r5, #0]
 801a300:	89b3      	ldrh	r3, [r6, #12]
 801a302:	061a      	lsls	r2, r3, #24
 801a304:	d410      	bmi.n	801a328 <__swhatbuf_r+0x3e>
 801a306:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a30a:	e00e      	b.n	801a32a <__swhatbuf_r+0x40>
 801a30c:	466a      	mov	r2, sp
 801a30e:	f000 f903 	bl	801a518 <_fstat_r>
 801a312:	2800      	cmp	r0, #0
 801a314:	dbf2      	blt.n	801a2fc <__swhatbuf_r+0x12>
 801a316:	9a01      	ldr	r2, [sp, #4]
 801a318:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a31c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a320:	425a      	negs	r2, r3
 801a322:	415a      	adcs	r2, r3
 801a324:	602a      	str	r2, [r5, #0]
 801a326:	e7ee      	b.n	801a306 <__swhatbuf_r+0x1c>
 801a328:	2340      	movs	r3, #64	; 0x40
 801a32a:	2000      	movs	r0, #0
 801a32c:	6023      	str	r3, [r4, #0]
 801a32e:	b016      	add	sp, #88	; 0x58
 801a330:	bd70      	pop	{r4, r5, r6, pc}
	...

0801a334 <__smakebuf_r>:
 801a334:	898b      	ldrh	r3, [r1, #12]
 801a336:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a338:	079d      	lsls	r5, r3, #30
 801a33a:	4606      	mov	r6, r0
 801a33c:	460c      	mov	r4, r1
 801a33e:	d507      	bpl.n	801a350 <__smakebuf_r+0x1c>
 801a340:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a344:	6023      	str	r3, [r4, #0]
 801a346:	6123      	str	r3, [r4, #16]
 801a348:	2301      	movs	r3, #1
 801a34a:	6163      	str	r3, [r4, #20]
 801a34c:	b002      	add	sp, #8
 801a34e:	bd70      	pop	{r4, r5, r6, pc}
 801a350:	ab01      	add	r3, sp, #4
 801a352:	466a      	mov	r2, sp
 801a354:	f7ff ffc9 	bl	801a2ea <__swhatbuf_r>
 801a358:	9900      	ldr	r1, [sp, #0]
 801a35a:	4605      	mov	r5, r0
 801a35c:	4630      	mov	r0, r6
 801a35e:	f7fb fd47 	bl	8015df0 <_malloc_r>
 801a362:	b948      	cbnz	r0, 801a378 <__smakebuf_r+0x44>
 801a364:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a368:	059a      	lsls	r2, r3, #22
 801a36a:	d4ef      	bmi.n	801a34c <__smakebuf_r+0x18>
 801a36c:	f023 0303 	bic.w	r3, r3, #3
 801a370:	f043 0302 	orr.w	r3, r3, #2
 801a374:	81a3      	strh	r3, [r4, #12]
 801a376:	e7e3      	b.n	801a340 <__smakebuf_r+0xc>
 801a378:	4b0d      	ldr	r3, [pc, #52]	; (801a3b0 <__smakebuf_r+0x7c>)
 801a37a:	62b3      	str	r3, [r6, #40]	; 0x28
 801a37c:	89a3      	ldrh	r3, [r4, #12]
 801a37e:	6020      	str	r0, [r4, #0]
 801a380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a384:	81a3      	strh	r3, [r4, #12]
 801a386:	9b00      	ldr	r3, [sp, #0]
 801a388:	6163      	str	r3, [r4, #20]
 801a38a:	9b01      	ldr	r3, [sp, #4]
 801a38c:	6120      	str	r0, [r4, #16]
 801a38e:	b15b      	cbz	r3, 801a3a8 <__smakebuf_r+0x74>
 801a390:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a394:	4630      	mov	r0, r6
 801a396:	f000 f8d1 	bl	801a53c <_isatty_r>
 801a39a:	b128      	cbz	r0, 801a3a8 <__smakebuf_r+0x74>
 801a39c:	89a3      	ldrh	r3, [r4, #12]
 801a39e:	f023 0303 	bic.w	r3, r3, #3
 801a3a2:	f043 0301 	orr.w	r3, r3, #1
 801a3a6:	81a3      	strh	r3, [r4, #12]
 801a3a8:	89a0      	ldrh	r0, [r4, #12]
 801a3aa:	4305      	orrs	r5, r0
 801a3ac:	81a5      	strh	r5, [r4, #12]
 801a3ae:	e7cd      	b.n	801a34c <__smakebuf_r+0x18>
 801a3b0:	0801a149 	.word	0x0801a149

0801a3b4 <_malloc_usable_size_r>:
 801a3b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a3b8:	1f18      	subs	r0, r3, #4
 801a3ba:	2b00      	cmp	r3, #0
 801a3bc:	bfbc      	itt	lt
 801a3be:	580b      	ldrlt	r3, [r1, r0]
 801a3c0:	18c0      	addlt	r0, r0, r3
 801a3c2:	4770      	bx	lr

0801a3c4 <_raise_r>:
 801a3c4:	291f      	cmp	r1, #31
 801a3c6:	b538      	push	{r3, r4, r5, lr}
 801a3c8:	4604      	mov	r4, r0
 801a3ca:	460d      	mov	r5, r1
 801a3cc:	d904      	bls.n	801a3d8 <_raise_r+0x14>
 801a3ce:	2316      	movs	r3, #22
 801a3d0:	6003      	str	r3, [r0, #0]
 801a3d2:	f04f 30ff 	mov.w	r0, #4294967295
 801a3d6:	bd38      	pop	{r3, r4, r5, pc}
 801a3d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801a3da:	b112      	cbz	r2, 801a3e2 <_raise_r+0x1e>
 801a3dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a3e0:	b94b      	cbnz	r3, 801a3f6 <_raise_r+0x32>
 801a3e2:	4620      	mov	r0, r4
 801a3e4:	f000 f830 	bl	801a448 <_getpid_r>
 801a3e8:	462a      	mov	r2, r5
 801a3ea:	4601      	mov	r1, r0
 801a3ec:	4620      	mov	r0, r4
 801a3ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a3f2:	f000 b817 	b.w	801a424 <_kill_r>
 801a3f6:	2b01      	cmp	r3, #1
 801a3f8:	d00a      	beq.n	801a410 <_raise_r+0x4c>
 801a3fa:	1c59      	adds	r1, r3, #1
 801a3fc:	d103      	bne.n	801a406 <_raise_r+0x42>
 801a3fe:	2316      	movs	r3, #22
 801a400:	6003      	str	r3, [r0, #0]
 801a402:	2001      	movs	r0, #1
 801a404:	e7e7      	b.n	801a3d6 <_raise_r+0x12>
 801a406:	2400      	movs	r4, #0
 801a408:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a40c:	4628      	mov	r0, r5
 801a40e:	4798      	blx	r3
 801a410:	2000      	movs	r0, #0
 801a412:	e7e0      	b.n	801a3d6 <_raise_r+0x12>

0801a414 <raise>:
 801a414:	4b02      	ldr	r3, [pc, #8]	; (801a420 <raise+0xc>)
 801a416:	4601      	mov	r1, r0
 801a418:	6818      	ldr	r0, [r3, #0]
 801a41a:	f7ff bfd3 	b.w	801a3c4 <_raise_r>
 801a41e:	bf00      	nop
 801a420:	2000220c 	.word	0x2000220c

0801a424 <_kill_r>:
 801a424:	b538      	push	{r3, r4, r5, lr}
 801a426:	4d07      	ldr	r5, [pc, #28]	; (801a444 <_kill_r+0x20>)
 801a428:	2300      	movs	r3, #0
 801a42a:	4604      	mov	r4, r0
 801a42c:	4608      	mov	r0, r1
 801a42e:	4611      	mov	r1, r2
 801a430:	602b      	str	r3, [r5, #0]
 801a432:	f7f0 fd35 	bl	800aea0 <_kill>
 801a436:	1c43      	adds	r3, r0, #1
 801a438:	d102      	bne.n	801a440 <_kill_r+0x1c>
 801a43a:	682b      	ldr	r3, [r5, #0]
 801a43c:	b103      	cbz	r3, 801a440 <_kill_r+0x1c>
 801a43e:	6023      	str	r3, [r4, #0]
 801a440:	bd38      	pop	{r3, r4, r5, pc}
 801a442:	bf00      	nop
 801a444:	2000fb3c 	.word	0x2000fb3c

0801a448 <_getpid_r>:
 801a448:	f7f0 bd22 	b.w	800ae90 <_getpid>

0801a44c <__sread>:
 801a44c:	b510      	push	{r4, lr}
 801a44e:	460c      	mov	r4, r1
 801a450:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a454:	f000 f894 	bl	801a580 <_read_r>
 801a458:	2800      	cmp	r0, #0
 801a45a:	bfab      	itete	ge
 801a45c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a45e:	89a3      	ldrhlt	r3, [r4, #12]
 801a460:	181b      	addge	r3, r3, r0
 801a462:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a466:	bfac      	ite	ge
 801a468:	6563      	strge	r3, [r4, #84]	; 0x54
 801a46a:	81a3      	strhlt	r3, [r4, #12]
 801a46c:	bd10      	pop	{r4, pc}

0801a46e <__swrite>:
 801a46e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a472:	461f      	mov	r7, r3
 801a474:	898b      	ldrh	r3, [r1, #12]
 801a476:	05db      	lsls	r3, r3, #23
 801a478:	4605      	mov	r5, r0
 801a47a:	460c      	mov	r4, r1
 801a47c:	4616      	mov	r6, r2
 801a47e:	d505      	bpl.n	801a48c <__swrite+0x1e>
 801a480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a484:	2302      	movs	r3, #2
 801a486:	2200      	movs	r2, #0
 801a488:	f000 f868 	bl	801a55c <_lseek_r>
 801a48c:	89a3      	ldrh	r3, [r4, #12]
 801a48e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a492:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a496:	81a3      	strh	r3, [r4, #12]
 801a498:	4632      	mov	r2, r6
 801a49a:	463b      	mov	r3, r7
 801a49c:	4628      	mov	r0, r5
 801a49e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a4a2:	f000 b817 	b.w	801a4d4 <_write_r>

0801a4a6 <__sseek>:
 801a4a6:	b510      	push	{r4, lr}
 801a4a8:	460c      	mov	r4, r1
 801a4aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a4ae:	f000 f855 	bl	801a55c <_lseek_r>
 801a4b2:	1c43      	adds	r3, r0, #1
 801a4b4:	89a3      	ldrh	r3, [r4, #12]
 801a4b6:	bf15      	itete	ne
 801a4b8:	6560      	strne	r0, [r4, #84]	; 0x54
 801a4ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a4be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a4c2:	81a3      	strheq	r3, [r4, #12]
 801a4c4:	bf18      	it	ne
 801a4c6:	81a3      	strhne	r3, [r4, #12]
 801a4c8:	bd10      	pop	{r4, pc}

0801a4ca <__sclose>:
 801a4ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a4ce:	f000 b813 	b.w	801a4f8 <_close_r>
	...

0801a4d4 <_write_r>:
 801a4d4:	b538      	push	{r3, r4, r5, lr}
 801a4d6:	4d07      	ldr	r5, [pc, #28]	; (801a4f4 <_write_r+0x20>)
 801a4d8:	4604      	mov	r4, r0
 801a4da:	4608      	mov	r0, r1
 801a4dc:	4611      	mov	r1, r2
 801a4de:	2200      	movs	r2, #0
 801a4e0:	602a      	str	r2, [r5, #0]
 801a4e2:	461a      	mov	r2, r3
 801a4e4:	f7f0 fd13 	bl	800af0e <_write>
 801a4e8:	1c43      	adds	r3, r0, #1
 801a4ea:	d102      	bne.n	801a4f2 <_write_r+0x1e>
 801a4ec:	682b      	ldr	r3, [r5, #0]
 801a4ee:	b103      	cbz	r3, 801a4f2 <_write_r+0x1e>
 801a4f0:	6023      	str	r3, [r4, #0]
 801a4f2:	bd38      	pop	{r3, r4, r5, pc}
 801a4f4:	2000fb3c 	.word	0x2000fb3c

0801a4f8 <_close_r>:
 801a4f8:	b538      	push	{r3, r4, r5, lr}
 801a4fa:	4d06      	ldr	r5, [pc, #24]	; (801a514 <_close_r+0x1c>)
 801a4fc:	2300      	movs	r3, #0
 801a4fe:	4604      	mov	r4, r0
 801a500:	4608      	mov	r0, r1
 801a502:	602b      	str	r3, [r5, #0]
 801a504:	f7f0 fd1f 	bl	800af46 <_close>
 801a508:	1c43      	adds	r3, r0, #1
 801a50a:	d102      	bne.n	801a512 <_close_r+0x1a>
 801a50c:	682b      	ldr	r3, [r5, #0]
 801a50e:	b103      	cbz	r3, 801a512 <_close_r+0x1a>
 801a510:	6023      	str	r3, [r4, #0]
 801a512:	bd38      	pop	{r3, r4, r5, pc}
 801a514:	2000fb3c 	.word	0x2000fb3c

0801a518 <_fstat_r>:
 801a518:	b538      	push	{r3, r4, r5, lr}
 801a51a:	4d07      	ldr	r5, [pc, #28]	; (801a538 <_fstat_r+0x20>)
 801a51c:	2300      	movs	r3, #0
 801a51e:	4604      	mov	r4, r0
 801a520:	4608      	mov	r0, r1
 801a522:	4611      	mov	r1, r2
 801a524:	602b      	str	r3, [r5, #0]
 801a526:	f7f0 fd1a 	bl	800af5e <_fstat>
 801a52a:	1c43      	adds	r3, r0, #1
 801a52c:	d102      	bne.n	801a534 <_fstat_r+0x1c>
 801a52e:	682b      	ldr	r3, [r5, #0]
 801a530:	b103      	cbz	r3, 801a534 <_fstat_r+0x1c>
 801a532:	6023      	str	r3, [r4, #0]
 801a534:	bd38      	pop	{r3, r4, r5, pc}
 801a536:	bf00      	nop
 801a538:	2000fb3c 	.word	0x2000fb3c

0801a53c <_isatty_r>:
 801a53c:	b538      	push	{r3, r4, r5, lr}
 801a53e:	4d06      	ldr	r5, [pc, #24]	; (801a558 <_isatty_r+0x1c>)
 801a540:	2300      	movs	r3, #0
 801a542:	4604      	mov	r4, r0
 801a544:	4608      	mov	r0, r1
 801a546:	602b      	str	r3, [r5, #0]
 801a548:	f7f0 fd19 	bl	800af7e <_isatty>
 801a54c:	1c43      	adds	r3, r0, #1
 801a54e:	d102      	bne.n	801a556 <_isatty_r+0x1a>
 801a550:	682b      	ldr	r3, [r5, #0]
 801a552:	b103      	cbz	r3, 801a556 <_isatty_r+0x1a>
 801a554:	6023      	str	r3, [r4, #0]
 801a556:	bd38      	pop	{r3, r4, r5, pc}
 801a558:	2000fb3c 	.word	0x2000fb3c

0801a55c <_lseek_r>:
 801a55c:	b538      	push	{r3, r4, r5, lr}
 801a55e:	4d07      	ldr	r5, [pc, #28]	; (801a57c <_lseek_r+0x20>)
 801a560:	4604      	mov	r4, r0
 801a562:	4608      	mov	r0, r1
 801a564:	4611      	mov	r1, r2
 801a566:	2200      	movs	r2, #0
 801a568:	602a      	str	r2, [r5, #0]
 801a56a:	461a      	mov	r2, r3
 801a56c:	f7f0 fd12 	bl	800af94 <_lseek>
 801a570:	1c43      	adds	r3, r0, #1
 801a572:	d102      	bne.n	801a57a <_lseek_r+0x1e>
 801a574:	682b      	ldr	r3, [r5, #0]
 801a576:	b103      	cbz	r3, 801a57a <_lseek_r+0x1e>
 801a578:	6023      	str	r3, [r4, #0]
 801a57a:	bd38      	pop	{r3, r4, r5, pc}
 801a57c:	2000fb3c 	.word	0x2000fb3c

0801a580 <_read_r>:
 801a580:	b538      	push	{r3, r4, r5, lr}
 801a582:	4d07      	ldr	r5, [pc, #28]	; (801a5a0 <_read_r+0x20>)
 801a584:	4604      	mov	r4, r0
 801a586:	4608      	mov	r0, r1
 801a588:	4611      	mov	r1, r2
 801a58a:	2200      	movs	r2, #0
 801a58c:	602a      	str	r2, [r5, #0]
 801a58e:	461a      	mov	r2, r3
 801a590:	f7f0 fca0 	bl	800aed4 <_read>
 801a594:	1c43      	adds	r3, r0, #1
 801a596:	d102      	bne.n	801a59e <_read_r+0x1e>
 801a598:	682b      	ldr	r3, [r5, #0]
 801a59a:	b103      	cbz	r3, 801a59e <_read_r+0x1e>
 801a59c:	6023      	str	r3, [r4, #0]
 801a59e:	bd38      	pop	{r3, r4, r5, pc}
 801a5a0:	2000fb3c 	.word	0x2000fb3c
 801a5a4:	00000000 	.word	0x00000000

0801a5a8 <ceil>:
 801a5a8:	ec51 0b10 	vmov	r0, r1, d0
 801a5ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a5b0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801a5b4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801a5b8:	2e13      	cmp	r6, #19
 801a5ba:	ee10 5a10 	vmov	r5, s0
 801a5be:	ee10 8a10 	vmov	r8, s0
 801a5c2:	460c      	mov	r4, r1
 801a5c4:	dc30      	bgt.n	801a628 <ceil+0x80>
 801a5c6:	2e00      	cmp	r6, #0
 801a5c8:	da12      	bge.n	801a5f0 <ceil+0x48>
 801a5ca:	a335      	add	r3, pc, #212	; (adr r3, 801a6a0 <ceil+0xf8>)
 801a5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5d0:	f7e5 fe5c 	bl	800028c <__adddf3>
 801a5d4:	2200      	movs	r2, #0
 801a5d6:	2300      	movs	r3, #0
 801a5d8:	f7e6 fa9e 	bl	8000b18 <__aeabi_dcmpgt>
 801a5dc:	b128      	cbz	r0, 801a5ea <ceil+0x42>
 801a5de:	2c00      	cmp	r4, #0
 801a5e0:	db55      	blt.n	801a68e <ceil+0xe6>
 801a5e2:	432c      	orrs	r4, r5
 801a5e4:	d057      	beq.n	801a696 <ceil+0xee>
 801a5e6:	4c30      	ldr	r4, [pc, #192]	; (801a6a8 <ceil+0x100>)
 801a5e8:	2500      	movs	r5, #0
 801a5ea:	4621      	mov	r1, r4
 801a5ec:	4628      	mov	r0, r5
 801a5ee:	e025      	b.n	801a63c <ceil+0x94>
 801a5f0:	4f2e      	ldr	r7, [pc, #184]	; (801a6ac <ceil+0x104>)
 801a5f2:	4137      	asrs	r7, r6
 801a5f4:	ea01 0307 	and.w	r3, r1, r7
 801a5f8:	4303      	orrs	r3, r0
 801a5fa:	d01f      	beq.n	801a63c <ceil+0x94>
 801a5fc:	a328      	add	r3, pc, #160	; (adr r3, 801a6a0 <ceil+0xf8>)
 801a5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a602:	f7e5 fe43 	bl	800028c <__adddf3>
 801a606:	2200      	movs	r2, #0
 801a608:	2300      	movs	r3, #0
 801a60a:	f7e6 fa85 	bl	8000b18 <__aeabi_dcmpgt>
 801a60e:	2800      	cmp	r0, #0
 801a610:	d0eb      	beq.n	801a5ea <ceil+0x42>
 801a612:	2c00      	cmp	r4, #0
 801a614:	bfc2      	ittt	gt
 801a616:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 801a61a:	fa43 f606 	asrgt.w	r6, r3, r6
 801a61e:	19a4      	addgt	r4, r4, r6
 801a620:	ea24 0407 	bic.w	r4, r4, r7
 801a624:	2500      	movs	r5, #0
 801a626:	e7e0      	b.n	801a5ea <ceil+0x42>
 801a628:	2e33      	cmp	r6, #51	; 0x33
 801a62a:	dd0b      	ble.n	801a644 <ceil+0x9c>
 801a62c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801a630:	d104      	bne.n	801a63c <ceil+0x94>
 801a632:	ee10 2a10 	vmov	r2, s0
 801a636:	460b      	mov	r3, r1
 801a638:	f7e5 fe28 	bl	800028c <__adddf3>
 801a63c:	ec41 0b10 	vmov	d0, r0, r1
 801a640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a644:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801a648:	f04f 33ff 	mov.w	r3, #4294967295
 801a64c:	fa23 f707 	lsr.w	r7, r3, r7
 801a650:	4207      	tst	r7, r0
 801a652:	d0f3      	beq.n	801a63c <ceil+0x94>
 801a654:	a312      	add	r3, pc, #72	; (adr r3, 801a6a0 <ceil+0xf8>)
 801a656:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a65a:	f7e5 fe17 	bl	800028c <__adddf3>
 801a65e:	2200      	movs	r2, #0
 801a660:	2300      	movs	r3, #0
 801a662:	f7e6 fa59 	bl	8000b18 <__aeabi_dcmpgt>
 801a666:	2800      	cmp	r0, #0
 801a668:	d0bf      	beq.n	801a5ea <ceil+0x42>
 801a66a:	2c00      	cmp	r4, #0
 801a66c:	dd02      	ble.n	801a674 <ceil+0xcc>
 801a66e:	2e14      	cmp	r6, #20
 801a670:	d103      	bne.n	801a67a <ceil+0xd2>
 801a672:	3401      	adds	r4, #1
 801a674:	ea25 0507 	bic.w	r5, r5, r7
 801a678:	e7b7      	b.n	801a5ea <ceil+0x42>
 801a67a:	2301      	movs	r3, #1
 801a67c:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801a680:	fa03 f606 	lsl.w	r6, r3, r6
 801a684:	4435      	add	r5, r6
 801a686:	4545      	cmp	r5, r8
 801a688:	bf38      	it	cc
 801a68a:	18e4      	addcc	r4, r4, r3
 801a68c:	e7f2      	b.n	801a674 <ceil+0xcc>
 801a68e:	2500      	movs	r5, #0
 801a690:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801a694:	e7a9      	b.n	801a5ea <ceil+0x42>
 801a696:	4625      	mov	r5, r4
 801a698:	e7a7      	b.n	801a5ea <ceil+0x42>
 801a69a:	bf00      	nop
 801a69c:	f3af 8000 	nop.w
 801a6a0:	8800759c 	.word	0x8800759c
 801a6a4:	7e37e43c 	.word	0x7e37e43c
 801a6a8:	3ff00000 	.word	0x3ff00000
 801a6ac:	000fffff 	.word	0x000fffff

0801a6b0 <cos>:
 801a6b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a6b2:	ec53 2b10 	vmov	r2, r3, d0
 801a6b6:	4824      	ldr	r0, [pc, #144]	; (801a748 <cos+0x98>)
 801a6b8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801a6bc:	4281      	cmp	r1, r0
 801a6be:	dc06      	bgt.n	801a6ce <cos+0x1e>
 801a6c0:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 801a740 <cos+0x90>
 801a6c4:	f000 fce4 	bl	801b090 <__kernel_cos>
 801a6c8:	ec51 0b10 	vmov	r0, r1, d0
 801a6cc:	e007      	b.n	801a6de <cos+0x2e>
 801a6ce:	481f      	ldr	r0, [pc, #124]	; (801a74c <cos+0x9c>)
 801a6d0:	4281      	cmp	r1, r0
 801a6d2:	dd09      	ble.n	801a6e8 <cos+0x38>
 801a6d4:	ee10 0a10 	vmov	r0, s0
 801a6d8:	4619      	mov	r1, r3
 801a6da:	f7e5 fdd5 	bl	8000288 <__aeabi_dsub>
 801a6de:	ec41 0b10 	vmov	d0, r0, r1
 801a6e2:	b005      	add	sp, #20
 801a6e4:	f85d fb04 	ldr.w	pc, [sp], #4
 801a6e8:	4668      	mov	r0, sp
 801a6ea:	f000 fa11 	bl	801ab10 <__ieee754_rem_pio2>
 801a6ee:	f000 0003 	and.w	r0, r0, #3
 801a6f2:	2801      	cmp	r0, #1
 801a6f4:	d007      	beq.n	801a706 <cos+0x56>
 801a6f6:	2802      	cmp	r0, #2
 801a6f8:	d012      	beq.n	801a720 <cos+0x70>
 801a6fa:	b9c0      	cbnz	r0, 801a72e <cos+0x7e>
 801a6fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a700:	ed9d 0b00 	vldr	d0, [sp]
 801a704:	e7de      	b.n	801a6c4 <cos+0x14>
 801a706:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a70a:	ed9d 0b00 	vldr	d0, [sp]
 801a70e:	f001 f8c7 	bl	801b8a0 <__kernel_sin>
 801a712:	ec53 2b10 	vmov	r2, r3, d0
 801a716:	ee10 0a10 	vmov	r0, s0
 801a71a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801a71e:	e7de      	b.n	801a6de <cos+0x2e>
 801a720:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a724:	ed9d 0b00 	vldr	d0, [sp]
 801a728:	f000 fcb2 	bl	801b090 <__kernel_cos>
 801a72c:	e7f1      	b.n	801a712 <cos+0x62>
 801a72e:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a732:	ed9d 0b00 	vldr	d0, [sp]
 801a736:	2001      	movs	r0, #1
 801a738:	f001 f8b2 	bl	801b8a0 <__kernel_sin>
 801a73c:	e7c4      	b.n	801a6c8 <cos+0x18>
 801a73e:	bf00      	nop
	...
 801a748:	3fe921fb 	.word	0x3fe921fb
 801a74c:	7fefffff 	.word	0x7fefffff

0801a750 <round>:
 801a750:	ec51 0b10 	vmov	r0, r1, d0
 801a754:	b570      	push	{r4, r5, r6, lr}
 801a756:	f3c1 550a 	ubfx	r5, r1, #20, #11
 801a75a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 801a75e:	2c13      	cmp	r4, #19
 801a760:	ee10 2a10 	vmov	r2, s0
 801a764:	460b      	mov	r3, r1
 801a766:	dc19      	bgt.n	801a79c <round+0x4c>
 801a768:	2c00      	cmp	r4, #0
 801a76a:	da09      	bge.n	801a780 <round+0x30>
 801a76c:	3401      	adds	r4, #1
 801a76e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 801a772:	d103      	bne.n	801a77c <round+0x2c>
 801a774:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801a778:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801a77c:	2100      	movs	r1, #0
 801a77e:	e028      	b.n	801a7d2 <round+0x82>
 801a780:	4d15      	ldr	r5, [pc, #84]	; (801a7d8 <round+0x88>)
 801a782:	4125      	asrs	r5, r4
 801a784:	ea01 0605 	and.w	r6, r1, r5
 801a788:	4332      	orrs	r2, r6
 801a78a:	d00e      	beq.n	801a7aa <round+0x5a>
 801a78c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801a790:	fa42 f404 	asr.w	r4, r2, r4
 801a794:	4423      	add	r3, r4
 801a796:	ea23 0305 	bic.w	r3, r3, r5
 801a79a:	e7ef      	b.n	801a77c <round+0x2c>
 801a79c:	2c33      	cmp	r4, #51	; 0x33
 801a79e:	dd07      	ble.n	801a7b0 <round+0x60>
 801a7a0:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 801a7a4:	d101      	bne.n	801a7aa <round+0x5a>
 801a7a6:	f7e5 fd71 	bl	800028c <__adddf3>
 801a7aa:	ec41 0b10 	vmov	d0, r0, r1
 801a7ae:	bd70      	pop	{r4, r5, r6, pc}
 801a7b0:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 801a7b4:	f04f 35ff 	mov.w	r5, #4294967295
 801a7b8:	40f5      	lsrs	r5, r6
 801a7ba:	4228      	tst	r0, r5
 801a7bc:	d0f5      	beq.n	801a7aa <round+0x5a>
 801a7be:	2101      	movs	r1, #1
 801a7c0:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 801a7c4:	fa01 f404 	lsl.w	r4, r1, r4
 801a7c8:	1912      	adds	r2, r2, r4
 801a7ca:	bf28      	it	cs
 801a7cc:	185b      	addcs	r3, r3, r1
 801a7ce:	ea22 0105 	bic.w	r1, r2, r5
 801a7d2:	4608      	mov	r0, r1
 801a7d4:	4619      	mov	r1, r3
 801a7d6:	e7e8      	b.n	801a7aa <round+0x5a>
 801a7d8:	000fffff 	.word	0x000fffff
 801a7dc:	00000000 	.word	0x00000000

0801a7e0 <sin>:
 801a7e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a7e2:	ec53 2b10 	vmov	r2, r3, d0
 801a7e6:	4826      	ldr	r0, [pc, #152]	; (801a880 <sin+0xa0>)
 801a7e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801a7ec:	4281      	cmp	r1, r0
 801a7ee:	dc07      	bgt.n	801a800 <sin+0x20>
 801a7f0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 801a878 <sin+0x98>
 801a7f4:	2000      	movs	r0, #0
 801a7f6:	f001 f853 	bl	801b8a0 <__kernel_sin>
 801a7fa:	ec51 0b10 	vmov	r0, r1, d0
 801a7fe:	e007      	b.n	801a810 <sin+0x30>
 801a800:	4820      	ldr	r0, [pc, #128]	; (801a884 <sin+0xa4>)
 801a802:	4281      	cmp	r1, r0
 801a804:	dd09      	ble.n	801a81a <sin+0x3a>
 801a806:	ee10 0a10 	vmov	r0, s0
 801a80a:	4619      	mov	r1, r3
 801a80c:	f7e5 fd3c 	bl	8000288 <__aeabi_dsub>
 801a810:	ec41 0b10 	vmov	d0, r0, r1
 801a814:	b005      	add	sp, #20
 801a816:	f85d fb04 	ldr.w	pc, [sp], #4
 801a81a:	4668      	mov	r0, sp
 801a81c:	f000 f978 	bl	801ab10 <__ieee754_rem_pio2>
 801a820:	f000 0003 	and.w	r0, r0, #3
 801a824:	2801      	cmp	r0, #1
 801a826:	d008      	beq.n	801a83a <sin+0x5a>
 801a828:	2802      	cmp	r0, #2
 801a82a:	d00d      	beq.n	801a848 <sin+0x68>
 801a82c:	b9d0      	cbnz	r0, 801a864 <sin+0x84>
 801a82e:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a832:	ed9d 0b00 	vldr	d0, [sp]
 801a836:	2001      	movs	r0, #1
 801a838:	e7dd      	b.n	801a7f6 <sin+0x16>
 801a83a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a83e:	ed9d 0b00 	vldr	d0, [sp]
 801a842:	f000 fc25 	bl	801b090 <__kernel_cos>
 801a846:	e7d8      	b.n	801a7fa <sin+0x1a>
 801a848:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a84c:	ed9d 0b00 	vldr	d0, [sp]
 801a850:	2001      	movs	r0, #1
 801a852:	f001 f825 	bl	801b8a0 <__kernel_sin>
 801a856:	ec53 2b10 	vmov	r2, r3, d0
 801a85a:	ee10 0a10 	vmov	r0, s0
 801a85e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801a862:	e7d5      	b.n	801a810 <sin+0x30>
 801a864:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a868:	ed9d 0b00 	vldr	d0, [sp]
 801a86c:	f000 fc10 	bl	801b090 <__kernel_cos>
 801a870:	e7f1      	b.n	801a856 <sin+0x76>
 801a872:	bf00      	nop
 801a874:	f3af 8000 	nop.w
	...
 801a880:	3fe921fb 	.word	0x3fe921fb
 801a884:	7fefffff 	.word	0x7fefffff

0801a888 <ceilf>:
 801a888:	ee10 3a10 	vmov	r3, s0
 801a88c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801a890:	3a7f      	subs	r2, #127	; 0x7f
 801a892:	2a16      	cmp	r2, #22
 801a894:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801a898:	dc2a      	bgt.n	801a8f0 <ceilf+0x68>
 801a89a:	2a00      	cmp	r2, #0
 801a89c:	da11      	bge.n	801a8c2 <ceilf+0x3a>
 801a89e:	eddf 7a19 	vldr	s15, [pc, #100]	; 801a904 <ceilf+0x7c>
 801a8a2:	ee30 0a27 	vadd.f32	s0, s0, s15
 801a8a6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801a8aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8ae:	dd05      	ble.n	801a8bc <ceilf+0x34>
 801a8b0:	2b00      	cmp	r3, #0
 801a8b2:	db23      	blt.n	801a8fc <ceilf+0x74>
 801a8b4:	2900      	cmp	r1, #0
 801a8b6:	bf18      	it	ne
 801a8b8:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 801a8bc:	ee00 3a10 	vmov	s0, r3
 801a8c0:	4770      	bx	lr
 801a8c2:	4911      	ldr	r1, [pc, #68]	; (801a908 <ceilf+0x80>)
 801a8c4:	4111      	asrs	r1, r2
 801a8c6:	420b      	tst	r3, r1
 801a8c8:	d0fa      	beq.n	801a8c0 <ceilf+0x38>
 801a8ca:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801a904 <ceilf+0x7c>
 801a8ce:	ee30 0a27 	vadd.f32	s0, s0, s15
 801a8d2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801a8d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8da:	ddef      	ble.n	801a8bc <ceilf+0x34>
 801a8dc:	2b00      	cmp	r3, #0
 801a8de:	bfc2      	ittt	gt
 801a8e0:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 801a8e4:	fa40 f202 	asrgt.w	r2, r0, r2
 801a8e8:	189b      	addgt	r3, r3, r2
 801a8ea:	ea23 0301 	bic.w	r3, r3, r1
 801a8ee:	e7e5      	b.n	801a8bc <ceilf+0x34>
 801a8f0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801a8f4:	d3e4      	bcc.n	801a8c0 <ceilf+0x38>
 801a8f6:	ee30 0a00 	vadd.f32	s0, s0, s0
 801a8fa:	4770      	bx	lr
 801a8fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801a900:	e7dc      	b.n	801a8bc <ceilf+0x34>
 801a902:	bf00      	nop
 801a904:	7149f2ca 	.word	0x7149f2ca
 801a908:	007fffff 	.word	0x007fffff

0801a90c <atan2>:
 801a90c:	f000 b834 	b.w	801a978 <__ieee754_atan2>

0801a910 <sqrt>:
 801a910:	b538      	push	{r3, r4, r5, lr}
 801a912:	ed2d 8b02 	vpush	{d8}
 801a916:	ec55 4b10 	vmov	r4, r5, d0
 801a91a:	f000 fb03 	bl	801af24 <__ieee754_sqrt>
 801a91e:	4b15      	ldr	r3, [pc, #84]	; (801a974 <sqrt+0x64>)
 801a920:	eeb0 8a40 	vmov.f32	s16, s0
 801a924:	eef0 8a60 	vmov.f32	s17, s1
 801a928:	f993 3000 	ldrsb.w	r3, [r3]
 801a92c:	3301      	adds	r3, #1
 801a92e:	d019      	beq.n	801a964 <sqrt+0x54>
 801a930:	4622      	mov	r2, r4
 801a932:	462b      	mov	r3, r5
 801a934:	4620      	mov	r0, r4
 801a936:	4629      	mov	r1, r5
 801a938:	f7e6 f8f8 	bl	8000b2c <__aeabi_dcmpun>
 801a93c:	b990      	cbnz	r0, 801a964 <sqrt+0x54>
 801a93e:	2200      	movs	r2, #0
 801a940:	2300      	movs	r3, #0
 801a942:	4620      	mov	r0, r4
 801a944:	4629      	mov	r1, r5
 801a946:	f7e6 f8c9 	bl	8000adc <__aeabi_dcmplt>
 801a94a:	b158      	cbz	r0, 801a964 <sqrt+0x54>
 801a94c:	f7fb f996 	bl	8015c7c <__errno>
 801a950:	2321      	movs	r3, #33	; 0x21
 801a952:	6003      	str	r3, [r0, #0]
 801a954:	2200      	movs	r2, #0
 801a956:	2300      	movs	r3, #0
 801a958:	4610      	mov	r0, r2
 801a95a:	4619      	mov	r1, r3
 801a95c:	f7e5 ff76 	bl	800084c <__aeabi_ddiv>
 801a960:	ec41 0b18 	vmov	d8, r0, r1
 801a964:	eeb0 0a48 	vmov.f32	s0, s16
 801a968:	eef0 0a68 	vmov.f32	s1, s17
 801a96c:	ecbd 8b02 	vpop	{d8}
 801a970:	bd38      	pop	{r3, r4, r5, pc}
 801a972:	bf00      	nop
 801a974:	200023e0 	.word	0x200023e0

0801a978 <__ieee754_atan2>:
 801a978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a97c:	ec57 6b11 	vmov	r6, r7, d1
 801a980:	4273      	negs	r3, r6
 801a982:	f8df e184 	ldr.w	lr, [pc, #388]	; 801ab08 <__ieee754_atan2+0x190>
 801a986:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801a98a:	4333      	orrs	r3, r6
 801a98c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801a990:	4573      	cmp	r3, lr
 801a992:	ec51 0b10 	vmov	r0, r1, d0
 801a996:	ee11 8a10 	vmov	r8, s2
 801a99a:	d80a      	bhi.n	801a9b2 <__ieee754_atan2+0x3a>
 801a99c:	4244      	negs	r4, r0
 801a99e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a9a2:	4304      	orrs	r4, r0
 801a9a4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801a9a8:	4574      	cmp	r4, lr
 801a9aa:	ee10 9a10 	vmov	r9, s0
 801a9ae:	468c      	mov	ip, r1
 801a9b0:	d907      	bls.n	801a9c2 <__ieee754_atan2+0x4a>
 801a9b2:	4632      	mov	r2, r6
 801a9b4:	463b      	mov	r3, r7
 801a9b6:	f7e5 fc69 	bl	800028c <__adddf3>
 801a9ba:	ec41 0b10 	vmov	d0, r0, r1
 801a9be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a9c2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801a9c6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801a9ca:	4334      	orrs	r4, r6
 801a9cc:	d103      	bne.n	801a9d6 <__ieee754_atan2+0x5e>
 801a9ce:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a9d2:	f001 b825 	b.w	801ba20 <atan>
 801a9d6:	17bc      	asrs	r4, r7, #30
 801a9d8:	f004 0402 	and.w	r4, r4, #2
 801a9dc:	ea53 0909 	orrs.w	r9, r3, r9
 801a9e0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801a9e4:	d107      	bne.n	801a9f6 <__ieee754_atan2+0x7e>
 801a9e6:	2c02      	cmp	r4, #2
 801a9e8:	d060      	beq.n	801aaac <__ieee754_atan2+0x134>
 801a9ea:	2c03      	cmp	r4, #3
 801a9ec:	d1e5      	bne.n	801a9ba <__ieee754_atan2+0x42>
 801a9ee:	a142      	add	r1, pc, #264	; (adr r1, 801aaf8 <__ieee754_atan2+0x180>)
 801a9f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a9f4:	e7e1      	b.n	801a9ba <__ieee754_atan2+0x42>
 801a9f6:	ea52 0808 	orrs.w	r8, r2, r8
 801a9fa:	d106      	bne.n	801aa0a <__ieee754_atan2+0x92>
 801a9fc:	f1bc 0f00 	cmp.w	ip, #0
 801aa00:	da5f      	bge.n	801aac2 <__ieee754_atan2+0x14a>
 801aa02:	a13f      	add	r1, pc, #252	; (adr r1, 801ab00 <__ieee754_atan2+0x188>)
 801aa04:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aa08:	e7d7      	b.n	801a9ba <__ieee754_atan2+0x42>
 801aa0a:	4572      	cmp	r2, lr
 801aa0c:	d10f      	bne.n	801aa2e <__ieee754_atan2+0xb6>
 801aa0e:	4293      	cmp	r3, r2
 801aa10:	f104 34ff 	add.w	r4, r4, #4294967295
 801aa14:	d107      	bne.n	801aa26 <__ieee754_atan2+0xae>
 801aa16:	2c02      	cmp	r4, #2
 801aa18:	d84c      	bhi.n	801aab4 <__ieee754_atan2+0x13c>
 801aa1a:	4b35      	ldr	r3, [pc, #212]	; (801aaf0 <__ieee754_atan2+0x178>)
 801aa1c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801aa20:	e9d4 0100 	ldrd	r0, r1, [r4]
 801aa24:	e7c9      	b.n	801a9ba <__ieee754_atan2+0x42>
 801aa26:	2c02      	cmp	r4, #2
 801aa28:	d848      	bhi.n	801aabc <__ieee754_atan2+0x144>
 801aa2a:	4b32      	ldr	r3, [pc, #200]	; (801aaf4 <__ieee754_atan2+0x17c>)
 801aa2c:	e7f6      	b.n	801aa1c <__ieee754_atan2+0xa4>
 801aa2e:	4573      	cmp	r3, lr
 801aa30:	d0e4      	beq.n	801a9fc <__ieee754_atan2+0x84>
 801aa32:	1a9b      	subs	r3, r3, r2
 801aa34:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 801aa38:	ea4f 5223 	mov.w	r2, r3, asr #20
 801aa3c:	da1e      	bge.n	801aa7c <__ieee754_atan2+0x104>
 801aa3e:	2f00      	cmp	r7, #0
 801aa40:	da01      	bge.n	801aa46 <__ieee754_atan2+0xce>
 801aa42:	323c      	adds	r2, #60	; 0x3c
 801aa44:	db1e      	blt.n	801aa84 <__ieee754_atan2+0x10c>
 801aa46:	4632      	mov	r2, r6
 801aa48:	463b      	mov	r3, r7
 801aa4a:	f7e5 feff 	bl	800084c <__aeabi_ddiv>
 801aa4e:	ec41 0b10 	vmov	d0, r0, r1
 801aa52:	f001 f985 	bl	801bd60 <fabs>
 801aa56:	f000 ffe3 	bl	801ba20 <atan>
 801aa5a:	ec51 0b10 	vmov	r0, r1, d0
 801aa5e:	2c01      	cmp	r4, #1
 801aa60:	d013      	beq.n	801aa8a <__ieee754_atan2+0x112>
 801aa62:	2c02      	cmp	r4, #2
 801aa64:	d015      	beq.n	801aa92 <__ieee754_atan2+0x11a>
 801aa66:	2c00      	cmp	r4, #0
 801aa68:	d0a7      	beq.n	801a9ba <__ieee754_atan2+0x42>
 801aa6a:	a319      	add	r3, pc, #100	; (adr r3, 801aad0 <__ieee754_atan2+0x158>)
 801aa6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa70:	f7e5 fc0a 	bl	8000288 <__aeabi_dsub>
 801aa74:	a318      	add	r3, pc, #96	; (adr r3, 801aad8 <__ieee754_atan2+0x160>)
 801aa76:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa7a:	e014      	b.n	801aaa6 <__ieee754_atan2+0x12e>
 801aa7c:	a118      	add	r1, pc, #96	; (adr r1, 801aae0 <__ieee754_atan2+0x168>)
 801aa7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aa82:	e7ec      	b.n	801aa5e <__ieee754_atan2+0xe6>
 801aa84:	2000      	movs	r0, #0
 801aa86:	2100      	movs	r1, #0
 801aa88:	e7e9      	b.n	801aa5e <__ieee754_atan2+0xe6>
 801aa8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801aa8e:	4619      	mov	r1, r3
 801aa90:	e793      	b.n	801a9ba <__ieee754_atan2+0x42>
 801aa92:	a30f      	add	r3, pc, #60	; (adr r3, 801aad0 <__ieee754_atan2+0x158>)
 801aa94:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa98:	f7e5 fbf6 	bl	8000288 <__aeabi_dsub>
 801aa9c:	4602      	mov	r2, r0
 801aa9e:	460b      	mov	r3, r1
 801aaa0:	a10d      	add	r1, pc, #52	; (adr r1, 801aad8 <__ieee754_atan2+0x160>)
 801aaa2:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aaa6:	f7e5 fbef 	bl	8000288 <__aeabi_dsub>
 801aaaa:	e786      	b.n	801a9ba <__ieee754_atan2+0x42>
 801aaac:	a10a      	add	r1, pc, #40	; (adr r1, 801aad8 <__ieee754_atan2+0x160>)
 801aaae:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aab2:	e782      	b.n	801a9ba <__ieee754_atan2+0x42>
 801aab4:	a10c      	add	r1, pc, #48	; (adr r1, 801aae8 <__ieee754_atan2+0x170>)
 801aab6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aaba:	e77e      	b.n	801a9ba <__ieee754_atan2+0x42>
 801aabc:	2000      	movs	r0, #0
 801aabe:	2100      	movs	r1, #0
 801aac0:	e77b      	b.n	801a9ba <__ieee754_atan2+0x42>
 801aac2:	a107      	add	r1, pc, #28	; (adr r1, 801aae0 <__ieee754_atan2+0x168>)
 801aac4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aac8:	e777      	b.n	801a9ba <__ieee754_atan2+0x42>
 801aaca:	bf00      	nop
 801aacc:	f3af 8000 	nop.w
 801aad0:	33145c07 	.word	0x33145c07
 801aad4:	3ca1a626 	.word	0x3ca1a626
 801aad8:	54442d18 	.word	0x54442d18
 801aadc:	400921fb 	.word	0x400921fb
 801aae0:	54442d18 	.word	0x54442d18
 801aae4:	3ff921fb 	.word	0x3ff921fb
 801aae8:	54442d18 	.word	0x54442d18
 801aaec:	3fe921fb 	.word	0x3fe921fb
 801aaf0:	0801c740 	.word	0x0801c740
 801aaf4:	0801c758 	.word	0x0801c758
 801aaf8:	54442d18 	.word	0x54442d18
 801aafc:	c00921fb 	.word	0xc00921fb
 801ab00:	54442d18 	.word	0x54442d18
 801ab04:	bff921fb 	.word	0xbff921fb
 801ab08:	7ff00000 	.word	0x7ff00000
 801ab0c:	00000000 	.word	0x00000000

0801ab10 <__ieee754_rem_pio2>:
 801ab10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab14:	ed2d 8b02 	vpush	{d8}
 801ab18:	ec55 4b10 	vmov	r4, r5, d0
 801ab1c:	4bca      	ldr	r3, [pc, #808]	; (801ae48 <__ieee754_rem_pio2+0x338>)
 801ab1e:	b08b      	sub	sp, #44	; 0x2c
 801ab20:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801ab24:	4598      	cmp	r8, r3
 801ab26:	4682      	mov	sl, r0
 801ab28:	9502      	str	r5, [sp, #8]
 801ab2a:	dc08      	bgt.n	801ab3e <__ieee754_rem_pio2+0x2e>
 801ab2c:	2200      	movs	r2, #0
 801ab2e:	2300      	movs	r3, #0
 801ab30:	ed80 0b00 	vstr	d0, [r0]
 801ab34:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801ab38:	f04f 0b00 	mov.w	fp, #0
 801ab3c:	e028      	b.n	801ab90 <__ieee754_rem_pio2+0x80>
 801ab3e:	4bc3      	ldr	r3, [pc, #780]	; (801ae4c <__ieee754_rem_pio2+0x33c>)
 801ab40:	4598      	cmp	r8, r3
 801ab42:	dc78      	bgt.n	801ac36 <__ieee754_rem_pio2+0x126>
 801ab44:	9b02      	ldr	r3, [sp, #8]
 801ab46:	4ec2      	ldr	r6, [pc, #776]	; (801ae50 <__ieee754_rem_pio2+0x340>)
 801ab48:	2b00      	cmp	r3, #0
 801ab4a:	ee10 0a10 	vmov	r0, s0
 801ab4e:	a3b0      	add	r3, pc, #704	; (adr r3, 801ae10 <__ieee754_rem_pio2+0x300>)
 801ab50:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab54:	4629      	mov	r1, r5
 801ab56:	dd39      	ble.n	801abcc <__ieee754_rem_pio2+0xbc>
 801ab58:	f7e5 fb96 	bl	8000288 <__aeabi_dsub>
 801ab5c:	45b0      	cmp	r8, r6
 801ab5e:	4604      	mov	r4, r0
 801ab60:	460d      	mov	r5, r1
 801ab62:	d01b      	beq.n	801ab9c <__ieee754_rem_pio2+0x8c>
 801ab64:	a3ac      	add	r3, pc, #688	; (adr r3, 801ae18 <__ieee754_rem_pio2+0x308>)
 801ab66:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab6a:	f7e5 fb8d 	bl	8000288 <__aeabi_dsub>
 801ab6e:	4602      	mov	r2, r0
 801ab70:	460b      	mov	r3, r1
 801ab72:	e9ca 2300 	strd	r2, r3, [sl]
 801ab76:	4620      	mov	r0, r4
 801ab78:	4629      	mov	r1, r5
 801ab7a:	f7e5 fb85 	bl	8000288 <__aeabi_dsub>
 801ab7e:	a3a6      	add	r3, pc, #664	; (adr r3, 801ae18 <__ieee754_rem_pio2+0x308>)
 801ab80:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab84:	f7e5 fb80 	bl	8000288 <__aeabi_dsub>
 801ab88:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801ab8c:	f04f 0b01 	mov.w	fp, #1
 801ab90:	4658      	mov	r0, fp
 801ab92:	b00b      	add	sp, #44	; 0x2c
 801ab94:	ecbd 8b02 	vpop	{d8}
 801ab98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab9c:	a3a0      	add	r3, pc, #640	; (adr r3, 801ae20 <__ieee754_rem_pio2+0x310>)
 801ab9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aba2:	f7e5 fb71 	bl	8000288 <__aeabi_dsub>
 801aba6:	a3a0      	add	r3, pc, #640	; (adr r3, 801ae28 <__ieee754_rem_pio2+0x318>)
 801aba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abac:	4604      	mov	r4, r0
 801abae:	460d      	mov	r5, r1
 801abb0:	f7e5 fb6a 	bl	8000288 <__aeabi_dsub>
 801abb4:	4602      	mov	r2, r0
 801abb6:	460b      	mov	r3, r1
 801abb8:	e9ca 2300 	strd	r2, r3, [sl]
 801abbc:	4620      	mov	r0, r4
 801abbe:	4629      	mov	r1, r5
 801abc0:	f7e5 fb62 	bl	8000288 <__aeabi_dsub>
 801abc4:	a398      	add	r3, pc, #608	; (adr r3, 801ae28 <__ieee754_rem_pio2+0x318>)
 801abc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abca:	e7db      	b.n	801ab84 <__ieee754_rem_pio2+0x74>
 801abcc:	f7e5 fb5e 	bl	800028c <__adddf3>
 801abd0:	45b0      	cmp	r8, r6
 801abd2:	4604      	mov	r4, r0
 801abd4:	460d      	mov	r5, r1
 801abd6:	d016      	beq.n	801ac06 <__ieee754_rem_pio2+0xf6>
 801abd8:	a38f      	add	r3, pc, #572	; (adr r3, 801ae18 <__ieee754_rem_pio2+0x308>)
 801abda:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abde:	f7e5 fb55 	bl	800028c <__adddf3>
 801abe2:	4602      	mov	r2, r0
 801abe4:	460b      	mov	r3, r1
 801abe6:	e9ca 2300 	strd	r2, r3, [sl]
 801abea:	4620      	mov	r0, r4
 801abec:	4629      	mov	r1, r5
 801abee:	f7e5 fb4b 	bl	8000288 <__aeabi_dsub>
 801abf2:	a389      	add	r3, pc, #548	; (adr r3, 801ae18 <__ieee754_rem_pio2+0x308>)
 801abf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abf8:	f7e5 fb48 	bl	800028c <__adddf3>
 801abfc:	f04f 3bff 	mov.w	fp, #4294967295
 801ac00:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801ac04:	e7c4      	b.n	801ab90 <__ieee754_rem_pio2+0x80>
 801ac06:	a386      	add	r3, pc, #536	; (adr r3, 801ae20 <__ieee754_rem_pio2+0x310>)
 801ac08:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac0c:	f7e5 fb3e 	bl	800028c <__adddf3>
 801ac10:	a385      	add	r3, pc, #532	; (adr r3, 801ae28 <__ieee754_rem_pio2+0x318>)
 801ac12:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac16:	4604      	mov	r4, r0
 801ac18:	460d      	mov	r5, r1
 801ac1a:	f7e5 fb37 	bl	800028c <__adddf3>
 801ac1e:	4602      	mov	r2, r0
 801ac20:	460b      	mov	r3, r1
 801ac22:	e9ca 2300 	strd	r2, r3, [sl]
 801ac26:	4620      	mov	r0, r4
 801ac28:	4629      	mov	r1, r5
 801ac2a:	f7e5 fb2d 	bl	8000288 <__aeabi_dsub>
 801ac2e:	a37e      	add	r3, pc, #504	; (adr r3, 801ae28 <__ieee754_rem_pio2+0x318>)
 801ac30:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac34:	e7e0      	b.n	801abf8 <__ieee754_rem_pio2+0xe8>
 801ac36:	4b87      	ldr	r3, [pc, #540]	; (801ae54 <__ieee754_rem_pio2+0x344>)
 801ac38:	4598      	cmp	r8, r3
 801ac3a:	f300 80d9 	bgt.w	801adf0 <__ieee754_rem_pio2+0x2e0>
 801ac3e:	f001 f88f 	bl	801bd60 <fabs>
 801ac42:	ec55 4b10 	vmov	r4, r5, d0
 801ac46:	ee10 0a10 	vmov	r0, s0
 801ac4a:	a379      	add	r3, pc, #484	; (adr r3, 801ae30 <__ieee754_rem_pio2+0x320>)
 801ac4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac50:	4629      	mov	r1, r5
 801ac52:	f7e5 fcd1 	bl	80005f8 <__aeabi_dmul>
 801ac56:	4b80      	ldr	r3, [pc, #512]	; (801ae58 <__ieee754_rem_pio2+0x348>)
 801ac58:	2200      	movs	r2, #0
 801ac5a:	f7e5 fb17 	bl	800028c <__adddf3>
 801ac5e:	f7e5 ff7b 	bl	8000b58 <__aeabi_d2iz>
 801ac62:	4683      	mov	fp, r0
 801ac64:	f7e5 fc5e 	bl	8000524 <__aeabi_i2d>
 801ac68:	4602      	mov	r2, r0
 801ac6a:	460b      	mov	r3, r1
 801ac6c:	ec43 2b18 	vmov	d8, r2, r3
 801ac70:	a367      	add	r3, pc, #412	; (adr r3, 801ae10 <__ieee754_rem_pio2+0x300>)
 801ac72:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac76:	f7e5 fcbf 	bl	80005f8 <__aeabi_dmul>
 801ac7a:	4602      	mov	r2, r0
 801ac7c:	460b      	mov	r3, r1
 801ac7e:	4620      	mov	r0, r4
 801ac80:	4629      	mov	r1, r5
 801ac82:	f7e5 fb01 	bl	8000288 <__aeabi_dsub>
 801ac86:	a364      	add	r3, pc, #400	; (adr r3, 801ae18 <__ieee754_rem_pio2+0x308>)
 801ac88:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac8c:	4606      	mov	r6, r0
 801ac8e:	460f      	mov	r7, r1
 801ac90:	ec51 0b18 	vmov	r0, r1, d8
 801ac94:	f7e5 fcb0 	bl	80005f8 <__aeabi_dmul>
 801ac98:	f1bb 0f1f 	cmp.w	fp, #31
 801ac9c:	4604      	mov	r4, r0
 801ac9e:	460d      	mov	r5, r1
 801aca0:	dc0d      	bgt.n	801acbe <__ieee754_rem_pio2+0x1ae>
 801aca2:	4b6e      	ldr	r3, [pc, #440]	; (801ae5c <__ieee754_rem_pio2+0x34c>)
 801aca4:	f10b 32ff 	add.w	r2, fp, #4294967295
 801aca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801acac:	4543      	cmp	r3, r8
 801acae:	d006      	beq.n	801acbe <__ieee754_rem_pio2+0x1ae>
 801acb0:	4622      	mov	r2, r4
 801acb2:	462b      	mov	r3, r5
 801acb4:	4630      	mov	r0, r6
 801acb6:	4639      	mov	r1, r7
 801acb8:	f7e5 fae6 	bl	8000288 <__aeabi_dsub>
 801acbc:	e00f      	b.n	801acde <__ieee754_rem_pio2+0x1ce>
 801acbe:	462b      	mov	r3, r5
 801acc0:	4622      	mov	r2, r4
 801acc2:	4630      	mov	r0, r6
 801acc4:	4639      	mov	r1, r7
 801acc6:	f7e5 fadf 	bl	8000288 <__aeabi_dsub>
 801acca:	ea4f 5328 	mov.w	r3, r8, asr #20
 801acce:	9303      	str	r3, [sp, #12]
 801acd0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801acd4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 801acd8:	f1b8 0f10 	cmp.w	r8, #16
 801acdc:	dc02      	bgt.n	801ace4 <__ieee754_rem_pio2+0x1d4>
 801acde:	e9ca 0100 	strd	r0, r1, [sl]
 801ace2:	e039      	b.n	801ad58 <__ieee754_rem_pio2+0x248>
 801ace4:	a34e      	add	r3, pc, #312	; (adr r3, 801ae20 <__ieee754_rem_pio2+0x310>)
 801ace6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acea:	ec51 0b18 	vmov	r0, r1, d8
 801acee:	f7e5 fc83 	bl	80005f8 <__aeabi_dmul>
 801acf2:	4604      	mov	r4, r0
 801acf4:	460d      	mov	r5, r1
 801acf6:	4602      	mov	r2, r0
 801acf8:	460b      	mov	r3, r1
 801acfa:	4630      	mov	r0, r6
 801acfc:	4639      	mov	r1, r7
 801acfe:	f7e5 fac3 	bl	8000288 <__aeabi_dsub>
 801ad02:	4602      	mov	r2, r0
 801ad04:	460b      	mov	r3, r1
 801ad06:	4680      	mov	r8, r0
 801ad08:	4689      	mov	r9, r1
 801ad0a:	4630      	mov	r0, r6
 801ad0c:	4639      	mov	r1, r7
 801ad0e:	f7e5 fabb 	bl	8000288 <__aeabi_dsub>
 801ad12:	4622      	mov	r2, r4
 801ad14:	462b      	mov	r3, r5
 801ad16:	f7e5 fab7 	bl	8000288 <__aeabi_dsub>
 801ad1a:	a343      	add	r3, pc, #268	; (adr r3, 801ae28 <__ieee754_rem_pio2+0x318>)
 801ad1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad20:	4604      	mov	r4, r0
 801ad22:	460d      	mov	r5, r1
 801ad24:	ec51 0b18 	vmov	r0, r1, d8
 801ad28:	f7e5 fc66 	bl	80005f8 <__aeabi_dmul>
 801ad2c:	4622      	mov	r2, r4
 801ad2e:	462b      	mov	r3, r5
 801ad30:	f7e5 faaa 	bl	8000288 <__aeabi_dsub>
 801ad34:	4602      	mov	r2, r0
 801ad36:	460b      	mov	r3, r1
 801ad38:	4604      	mov	r4, r0
 801ad3a:	460d      	mov	r5, r1
 801ad3c:	4640      	mov	r0, r8
 801ad3e:	4649      	mov	r1, r9
 801ad40:	f7e5 faa2 	bl	8000288 <__aeabi_dsub>
 801ad44:	9a03      	ldr	r2, [sp, #12]
 801ad46:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801ad4a:	1ad3      	subs	r3, r2, r3
 801ad4c:	2b31      	cmp	r3, #49	; 0x31
 801ad4e:	dc24      	bgt.n	801ad9a <__ieee754_rem_pio2+0x28a>
 801ad50:	e9ca 0100 	strd	r0, r1, [sl]
 801ad54:	4646      	mov	r6, r8
 801ad56:	464f      	mov	r7, r9
 801ad58:	e9da 8900 	ldrd	r8, r9, [sl]
 801ad5c:	4630      	mov	r0, r6
 801ad5e:	4642      	mov	r2, r8
 801ad60:	464b      	mov	r3, r9
 801ad62:	4639      	mov	r1, r7
 801ad64:	f7e5 fa90 	bl	8000288 <__aeabi_dsub>
 801ad68:	462b      	mov	r3, r5
 801ad6a:	4622      	mov	r2, r4
 801ad6c:	f7e5 fa8c 	bl	8000288 <__aeabi_dsub>
 801ad70:	9b02      	ldr	r3, [sp, #8]
 801ad72:	2b00      	cmp	r3, #0
 801ad74:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801ad78:	f6bf af0a 	bge.w	801ab90 <__ieee754_rem_pio2+0x80>
 801ad7c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801ad80:	f8ca 3004 	str.w	r3, [sl, #4]
 801ad84:	f8ca 8000 	str.w	r8, [sl]
 801ad88:	f8ca 0008 	str.w	r0, [sl, #8]
 801ad8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ad90:	f8ca 300c 	str.w	r3, [sl, #12]
 801ad94:	f1cb 0b00 	rsb	fp, fp, #0
 801ad98:	e6fa      	b.n	801ab90 <__ieee754_rem_pio2+0x80>
 801ad9a:	a327      	add	r3, pc, #156	; (adr r3, 801ae38 <__ieee754_rem_pio2+0x328>)
 801ad9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ada0:	ec51 0b18 	vmov	r0, r1, d8
 801ada4:	f7e5 fc28 	bl	80005f8 <__aeabi_dmul>
 801ada8:	4604      	mov	r4, r0
 801adaa:	460d      	mov	r5, r1
 801adac:	4602      	mov	r2, r0
 801adae:	460b      	mov	r3, r1
 801adb0:	4640      	mov	r0, r8
 801adb2:	4649      	mov	r1, r9
 801adb4:	f7e5 fa68 	bl	8000288 <__aeabi_dsub>
 801adb8:	4602      	mov	r2, r0
 801adba:	460b      	mov	r3, r1
 801adbc:	4606      	mov	r6, r0
 801adbe:	460f      	mov	r7, r1
 801adc0:	4640      	mov	r0, r8
 801adc2:	4649      	mov	r1, r9
 801adc4:	f7e5 fa60 	bl	8000288 <__aeabi_dsub>
 801adc8:	4622      	mov	r2, r4
 801adca:	462b      	mov	r3, r5
 801adcc:	f7e5 fa5c 	bl	8000288 <__aeabi_dsub>
 801add0:	a31b      	add	r3, pc, #108	; (adr r3, 801ae40 <__ieee754_rem_pio2+0x330>)
 801add2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801add6:	4604      	mov	r4, r0
 801add8:	460d      	mov	r5, r1
 801adda:	ec51 0b18 	vmov	r0, r1, d8
 801adde:	f7e5 fc0b 	bl	80005f8 <__aeabi_dmul>
 801ade2:	4622      	mov	r2, r4
 801ade4:	462b      	mov	r3, r5
 801ade6:	f7e5 fa4f 	bl	8000288 <__aeabi_dsub>
 801adea:	4604      	mov	r4, r0
 801adec:	460d      	mov	r5, r1
 801adee:	e75f      	b.n	801acb0 <__ieee754_rem_pio2+0x1a0>
 801adf0:	4b1b      	ldr	r3, [pc, #108]	; (801ae60 <__ieee754_rem_pio2+0x350>)
 801adf2:	4598      	cmp	r8, r3
 801adf4:	dd36      	ble.n	801ae64 <__ieee754_rem_pio2+0x354>
 801adf6:	ee10 2a10 	vmov	r2, s0
 801adfa:	462b      	mov	r3, r5
 801adfc:	4620      	mov	r0, r4
 801adfe:	4629      	mov	r1, r5
 801ae00:	f7e5 fa42 	bl	8000288 <__aeabi_dsub>
 801ae04:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801ae08:	e9ca 0100 	strd	r0, r1, [sl]
 801ae0c:	e694      	b.n	801ab38 <__ieee754_rem_pio2+0x28>
 801ae0e:	bf00      	nop
 801ae10:	54400000 	.word	0x54400000
 801ae14:	3ff921fb 	.word	0x3ff921fb
 801ae18:	1a626331 	.word	0x1a626331
 801ae1c:	3dd0b461 	.word	0x3dd0b461
 801ae20:	1a600000 	.word	0x1a600000
 801ae24:	3dd0b461 	.word	0x3dd0b461
 801ae28:	2e037073 	.word	0x2e037073
 801ae2c:	3ba3198a 	.word	0x3ba3198a
 801ae30:	6dc9c883 	.word	0x6dc9c883
 801ae34:	3fe45f30 	.word	0x3fe45f30
 801ae38:	2e000000 	.word	0x2e000000
 801ae3c:	3ba3198a 	.word	0x3ba3198a
 801ae40:	252049c1 	.word	0x252049c1
 801ae44:	397b839a 	.word	0x397b839a
 801ae48:	3fe921fb 	.word	0x3fe921fb
 801ae4c:	4002d97b 	.word	0x4002d97b
 801ae50:	3ff921fb 	.word	0x3ff921fb
 801ae54:	413921fb 	.word	0x413921fb
 801ae58:	3fe00000 	.word	0x3fe00000
 801ae5c:	0801c770 	.word	0x0801c770
 801ae60:	7fefffff 	.word	0x7fefffff
 801ae64:	ea4f 5428 	mov.w	r4, r8, asr #20
 801ae68:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 801ae6c:	ee10 0a10 	vmov	r0, s0
 801ae70:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 801ae74:	ee10 6a10 	vmov	r6, s0
 801ae78:	460f      	mov	r7, r1
 801ae7a:	f7e5 fe6d 	bl	8000b58 <__aeabi_d2iz>
 801ae7e:	f7e5 fb51 	bl	8000524 <__aeabi_i2d>
 801ae82:	4602      	mov	r2, r0
 801ae84:	460b      	mov	r3, r1
 801ae86:	4630      	mov	r0, r6
 801ae88:	4639      	mov	r1, r7
 801ae8a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801ae8e:	f7e5 f9fb 	bl	8000288 <__aeabi_dsub>
 801ae92:	4b22      	ldr	r3, [pc, #136]	; (801af1c <__ieee754_rem_pio2+0x40c>)
 801ae94:	2200      	movs	r2, #0
 801ae96:	f7e5 fbaf 	bl	80005f8 <__aeabi_dmul>
 801ae9a:	460f      	mov	r7, r1
 801ae9c:	4606      	mov	r6, r0
 801ae9e:	f7e5 fe5b 	bl	8000b58 <__aeabi_d2iz>
 801aea2:	f7e5 fb3f 	bl	8000524 <__aeabi_i2d>
 801aea6:	4602      	mov	r2, r0
 801aea8:	460b      	mov	r3, r1
 801aeaa:	4630      	mov	r0, r6
 801aeac:	4639      	mov	r1, r7
 801aeae:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801aeb2:	f7e5 f9e9 	bl	8000288 <__aeabi_dsub>
 801aeb6:	4b19      	ldr	r3, [pc, #100]	; (801af1c <__ieee754_rem_pio2+0x40c>)
 801aeb8:	2200      	movs	r2, #0
 801aeba:	f7e5 fb9d 	bl	80005f8 <__aeabi_dmul>
 801aebe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801aec2:	ad04      	add	r5, sp, #16
 801aec4:	f04f 0803 	mov.w	r8, #3
 801aec8:	46a9      	mov	r9, r5
 801aeca:	2600      	movs	r6, #0
 801aecc:	2700      	movs	r7, #0
 801aece:	4632      	mov	r2, r6
 801aed0:	463b      	mov	r3, r7
 801aed2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 801aed6:	46c3      	mov	fp, r8
 801aed8:	3d08      	subs	r5, #8
 801aeda:	f108 38ff 	add.w	r8, r8, #4294967295
 801aede:	f7e5 fdf3 	bl	8000ac8 <__aeabi_dcmpeq>
 801aee2:	2800      	cmp	r0, #0
 801aee4:	d1f3      	bne.n	801aece <__ieee754_rem_pio2+0x3be>
 801aee6:	4b0e      	ldr	r3, [pc, #56]	; (801af20 <__ieee754_rem_pio2+0x410>)
 801aee8:	9301      	str	r3, [sp, #4]
 801aeea:	2302      	movs	r3, #2
 801aeec:	9300      	str	r3, [sp, #0]
 801aeee:	4622      	mov	r2, r4
 801aef0:	465b      	mov	r3, fp
 801aef2:	4651      	mov	r1, sl
 801aef4:	4648      	mov	r0, r9
 801aef6:	f000 f993 	bl	801b220 <__kernel_rem_pio2>
 801aefa:	9b02      	ldr	r3, [sp, #8]
 801aefc:	2b00      	cmp	r3, #0
 801aefe:	4683      	mov	fp, r0
 801af00:	f6bf ae46 	bge.w	801ab90 <__ieee754_rem_pio2+0x80>
 801af04:	f8da 3004 	ldr.w	r3, [sl, #4]
 801af08:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801af0c:	f8ca 3004 	str.w	r3, [sl, #4]
 801af10:	f8da 300c 	ldr.w	r3, [sl, #12]
 801af14:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801af18:	e73a      	b.n	801ad90 <__ieee754_rem_pio2+0x280>
 801af1a:	bf00      	nop
 801af1c:	41700000 	.word	0x41700000
 801af20:	0801c7f0 	.word	0x0801c7f0

0801af24 <__ieee754_sqrt>:
 801af24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801af28:	ec55 4b10 	vmov	r4, r5, d0
 801af2c:	4e56      	ldr	r6, [pc, #344]	; (801b088 <__ieee754_sqrt+0x164>)
 801af2e:	43ae      	bics	r6, r5
 801af30:	ee10 0a10 	vmov	r0, s0
 801af34:	ee10 3a10 	vmov	r3, s0
 801af38:	4629      	mov	r1, r5
 801af3a:	462a      	mov	r2, r5
 801af3c:	d110      	bne.n	801af60 <__ieee754_sqrt+0x3c>
 801af3e:	ee10 2a10 	vmov	r2, s0
 801af42:	462b      	mov	r3, r5
 801af44:	f7e5 fb58 	bl	80005f8 <__aeabi_dmul>
 801af48:	4602      	mov	r2, r0
 801af4a:	460b      	mov	r3, r1
 801af4c:	4620      	mov	r0, r4
 801af4e:	4629      	mov	r1, r5
 801af50:	f7e5 f99c 	bl	800028c <__adddf3>
 801af54:	4604      	mov	r4, r0
 801af56:	460d      	mov	r5, r1
 801af58:	ec45 4b10 	vmov	d0, r4, r5
 801af5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801af60:	2d00      	cmp	r5, #0
 801af62:	dc10      	bgt.n	801af86 <__ieee754_sqrt+0x62>
 801af64:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801af68:	4330      	orrs	r0, r6
 801af6a:	d0f5      	beq.n	801af58 <__ieee754_sqrt+0x34>
 801af6c:	b15d      	cbz	r5, 801af86 <__ieee754_sqrt+0x62>
 801af6e:	ee10 2a10 	vmov	r2, s0
 801af72:	462b      	mov	r3, r5
 801af74:	ee10 0a10 	vmov	r0, s0
 801af78:	f7e5 f986 	bl	8000288 <__aeabi_dsub>
 801af7c:	4602      	mov	r2, r0
 801af7e:	460b      	mov	r3, r1
 801af80:	f7e5 fc64 	bl	800084c <__aeabi_ddiv>
 801af84:	e7e6      	b.n	801af54 <__ieee754_sqrt+0x30>
 801af86:	1509      	asrs	r1, r1, #20
 801af88:	d076      	beq.n	801b078 <__ieee754_sqrt+0x154>
 801af8a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801af8e:	07ce      	lsls	r6, r1, #31
 801af90:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801af94:	bf5e      	ittt	pl
 801af96:	0fda      	lsrpl	r2, r3, #31
 801af98:	005b      	lslpl	r3, r3, #1
 801af9a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801af9e:	0fda      	lsrs	r2, r3, #31
 801afa0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801afa4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801afa8:	2000      	movs	r0, #0
 801afaa:	106d      	asrs	r5, r5, #1
 801afac:	005b      	lsls	r3, r3, #1
 801afae:	f04f 0e16 	mov.w	lr, #22
 801afb2:	4684      	mov	ip, r0
 801afb4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801afb8:	eb0c 0401 	add.w	r4, ip, r1
 801afbc:	4294      	cmp	r4, r2
 801afbe:	bfde      	ittt	le
 801afc0:	1b12      	suble	r2, r2, r4
 801afc2:	eb04 0c01 	addle.w	ip, r4, r1
 801afc6:	1840      	addle	r0, r0, r1
 801afc8:	0052      	lsls	r2, r2, #1
 801afca:	f1be 0e01 	subs.w	lr, lr, #1
 801afce:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801afd2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801afd6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801afda:	d1ed      	bne.n	801afb8 <__ieee754_sqrt+0x94>
 801afdc:	4671      	mov	r1, lr
 801afde:	2720      	movs	r7, #32
 801afe0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801afe4:	4562      	cmp	r2, ip
 801afe6:	eb04 060e 	add.w	r6, r4, lr
 801afea:	dc02      	bgt.n	801aff2 <__ieee754_sqrt+0xce>
 801afec:	d113      	bne.n	801b016 <__ieee754_sqrt+0xf2>
 801afee:	429e      	cmp	r6, r3
 801aff0:	d811      	bhi.n	801b016 <__ieee754_sqrt+0xf2>
 801aff2:	2e00      	cmp	r6, #0
 801aff4:	eb06 0e04 	add.w	lr, r6, r4
 801aff8:	da43      	bge.n	801b082 <__ieee754_sqrt+0x15e>
 801affa:	f1be 0f00 	cmp.w	lr, #0
 801affe:	db40      	blt.n	801b082 <__ieee754_sqrt+0x15e>
 801b000:	f10c 0801 	add.w	r8, ip, #1
 801b004:	eba2 020c 	sub.w	r2, r2, ip
 801b008:	429e      	cmp	r6, r3
 801b00a:	bf88      	it	hi
 801b00c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801b010:	1b9b      	subs	r3, r3, r6
 801b012:	4421      	add	r1, r4
 801b014:	46c4      	mov	ip, r8
 801b016:	0052      	lsls	r2, r2, #1
 801b018:	3f01      	subs	r7, #1
 801b01a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801b01e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801b022:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801b026:	d1dd      	bne.n	801afe4 <__ieee754_sqrt+0xc0>
 801b028:	4313      	orrs	r3, r2
 801b02a:	d006      	beq.n	801b03a <__ieee754_sqrt+0x116>
 801b02c:	1c4c      	adds	r4, r1, #1
 801b02e:	bf13      	iteet	ne
 801b030:	3101      	addne	r1, #1
 801b032:	3001      	addeq	r0, #1
 801b034:	4639      	moveq	r1, r7
 801b036:	f021 0101 	bicne.w	r1, r1, #1
 801b03a:	1043      	asrs	r3, r0, #1
 801b03c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801b040:	0849      	lsrs	r1, r1, #1
 801b042:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801b046:	07c2      	lsls	r2, r0, #31
 801b048:	bf48      	it	mi
 801b04a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801b04e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801b052:	460c      	mov	r4, r1
 801b054:	463d      	mov	r5, r7
 801b056:	e77f      	b.n	801af58 <__ieee754_sqrt+0x34>
 801b058:	0ada      	lsrs	r2, r3, #11
 801b05a:	3815      	subs	r0, #21
 801b05c:	055b      	lsls	r3, r3, #21
 801b05e:	2a00      	cmp	r2, #0
 801b060:	d0fa      	beq.n	801b058 <__ieee754_sqrt+0x134>
 801b062:	02d7      	lsls	r7, r2, #11
 801b064:	d50a      	bpl.n	801b07c <__ieee754_sqrt+0x158>
 801b066:	f1c1 0420 	rsb	r4, r1, #32
 801b06a:	fa23 f404 	lsr.w	r4, r3, r4
 801b06e:	1e4d      	subs	r5, r1, #1
 801b070:	408b      	lsls	r3, r1
 801b072:	4322      	orrs	r2, r4
 801b074:	1b41      	subs	r1, r0, r5
 801b076:	e788      	b.n	801af8a <__ieee754_sqrt+0x66>
 801b078:	4608      	mov	r0, r1
 801b07a:	e7f0      	b.n	801b05e <__ieee754_sqrt+0x13a>
 801b07c:	0052      	lsls	r2, r2, #1
 801b07e:	3101      	adds	r1, #1
 801b080:	e7ef      	b.n	801b062 <__ieee754_sqrt+0x13e>
 801b082:	46e0      	mov	r8, ip
 801b084:	e7be      	b.n	801b004 <__ieee754_sqrt+0xe0>
 801b086:	bf00      	nop
 801b088:	7ff00000 	.word	0x7ff00000
 801b08c:	00000000 	.word	0x00000000

0801b090 <__kernel_cos>:
 801b090:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b094:	ec57 6b10 	vmov	r6, r7, d0
 801b098:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801b09c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 801b0a0:	ed8d 1b00 	vstr	d1, [sp]
 801b0a4:	da07      	bge.n	801b0b6 <__kernel_cos+0x26>
 801b0a6:	ee10 0a10 	vmov	r0, s0
 801b0aa:	4639      	mov	r1, r7
 801b0ac:	f7e5 fd54 	bl	8000b58 <__aeabi_d2iz>
 801b0b0:	2800      	cmp	r0, #0
 801b0b2:	f000 8088 	beq.w	801b1c6 <__kernel_cos+0x136>
 801b0b6:	4632      	mov	r2, r6
 801b0b8:	463b      	mov	r3, r7
 801b0ba:	4630      	mov	r0, r6
 801b0bc:	4639      	mov	r1, r7
 801b0be:	f7e5 fa9b 	bl	80005f8 <__aeabi_dmul>
 801b0c2:	4b51      	ldr	r3, [pc, #324]	; (801b208 <__kernel_cos+0x178>)
 801b0c4:	2200      	movs	r2, #0
 801b0c6:	4604      	mov	r4, r0
 801b0c8:	460d      	mov	r5, r1
 801b0ca:	f7e5 fa95 	bl	80005f8 <__aeabi_dmul>
 801b0ce:	a340      	add	r3, pc, #256	; (adr r3, 801b1d0 <__kernel_cos+0x140>)
 801b0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0d4:	4682      	mov	sl, r0
 801b0d6:	468b      	mov	fp, r1
 801b0d8:	4620      	mov	r0, r4
 801b0da:	4629      	mov	r1, r5
 801b0dc:	f7e5 fa8c 	bl	80005f8 <__aeabi_dmul>
 801b0e0:	a33d      	add	r3, pc, #244	; (adr r3, 801b1d8 <__kernel_cos+0x148>)
 801b0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0e6:	f7e5 f8d1 	bl	800028c <__adddf3>
 801b0ea:	4622      	mov	r2, r4
 801b0ec:	462b      	mov	r3, r5
 801b0ee:	f7e5 fa83 	bl	80005f8 <__aeabi_dmul>
 801b0f2:	a33b      	add	r3, pc, #236	; (adr r3, 801b1e0 <__kernel_cos+0x150>)
 801b0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0f8:	f7e5 f8c6 	bl	8000288 <__aeabi_dsub>
 801b0fc:	4622      	mov	r2, r4
 801b0fe:	462b      	mov	r3, r5
 801b100:	f7e5 fa7a 	bl	80005f8 <__aeabi_dmul>
 801b104:	a338      	add	r3, pc, #224	; (adr r3, 801b1e8 <__kernel_cos+0x158>)
 801b106:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b10a:	f7e5 f8bf 	bl	800028c <__adddf3>
 801b10e:	4622      	mov	r2, r4
 801b110:	462b      	mov	r3, r5
 801b112:	f7e5 fa71 	bl	80005f8 <__aeabi_dmul>
 801b116:	a336      	add	r3, pc, #216	; (adr r3, 801b1f0 <__kernel_cos+0x160>)
 801b118:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b11c:	f7e5 f8b4 	bl	8000288 <__aeabi_dsub>
 801b120:	4622      	mov	r2, r4
 801b122:	462b      	mov	r3, r5
 801b124:	f7e5 fa68 	bl	80005f8 <__aeabi_dmul>
 801b128:	a333      	add	r3, pc, #204	; (adr r3, 801b1f8 <__kernel_cos+0x168>)
 801b12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b12e:	f7e5 f8ad 	bl	800028c <__adddf3>
 801b132:	4622      	mov	r2, r4
 801b134:	462b      	mov	r3, r5
 801b136:	f7e5 fa5f 	bl	80005f8 <__aeabi_dmul>
 801b13a:	4622      	mov	r2, r4
 801b13c:	462b      	mov	r3, r5
 801b13e:	f7e5 fa5b 	bl	80005f8 <__aeabi_dmul>
 801b142:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b146:	4604      	mov	r4, r0
 801b148:	460d      	mov	r5, r1
 801b14a:	4630      	mov	r0, r6
 801b14c:	4639      	mov	r1, r7
 801b14e:	f7e5 fa53 	bl	80005f8 <__aeabi_dmul>
 801b152:	460b      	mov	r3, r1
 801b154:	4602      	mov	r2, r0
 801b156:	4629      	mov	r1, r5
 801b158:	4620      	mov	r0, r4
 801b15a:	f7e5 f895 	bl	8000288 <__aeabi_dsub>
 801b15e:	4b2b      	ldr	r3, [pc, #172]	; (801b20c <__kernel_cos+0x17c>)
 801b160:	4598      	cmp	r8, r3
 801b162:	4606      	mov	r6, r0
 801b164:	460f      	mov	r7, r1
 801b166:	dc10      	bgt.n	801b18a <__kernel_cos+0xfa>
 801b168:	4602      	mov	r2, r0
 801b16a:	460b      	mov	r3, r1
 801b16c:	4650      	mov	r0, sl
 801b16e:	4659      	mov	r1, fp
 801b170:	f7e5 f88a 	bl	8000288 <__aeabi_dsub>
 801b174:	460b      	mov	r3, r1
 801b176:	4926      	ldr	r1, [pc, #152]	; (801b210 <__kernel_cos+0x180>)
 801b178:	4602      	mov	r2, r0
 801b17a:	2000      	movs	r0, #0
 801b17c:	f7e5 f884 	bl	8000288 <__aeabi_dsub>
 801b180:	ec41 0b10 	vmov	d0, r0, r1
 801b184:	b003      	add	sp, #12
 801b186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b18a:	4b22      	ldr	r3, [pc, #136]	; (801b214 <__kernel_cos+0x184>)
 801b18c:	4920      	ldr	r1, [pc, #128]	; (801b210 <__kernel_cos+0x180>)
 801b18e:	4598      	cmp	r8, r3
 801b190:	bfcc      	ite	gt
 801b192:	4d21      	ldrgt	r5, [pc, #132]	; (801b218 <__kernel_cos+0x188>)
 801b194:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 801b198:	2400      	movs	r4, #0
 801b19a:	4622      	mov	r2, r4
 801b19c:	462b      	mov	r3, r5
 801b19e:	2000      	movs	r0, #0
 801b1a0:	f7e5 f872 	bl	8000288 <__aeabi_dsub>
 801b1a4:	4622      	mov	r2, r4
 801b1a6:	4680      	mov	r8, r0
 801b1a8:	4689      	mov	r9, r1
 801b1aa:	462b      	mov	r3, r5
 801b1ac:	4650      	mov	r0, sl
 801b1ae:	4659      	mov	r1, fp
 801b1b0:	f7e5 f86a 	bl	8000288 <__aeabi_dsub>
 801b1b4:	4632      	mov	r2, r6
 801b1b6:	463b      	mov	r3, r7
 801b1b8:	f7e5 f866 	bl	8000288 <__aeabi_dsub>
 801b1bc:	4602      	mov	r2, r0
 801b1be:	460b      	mov	r3, r1
 801b1c0:	4640      	mov	r0, r8
 801b1c2:	4649      	mov	r1, r9
 801b1c4:	e7da      	b.n	801b17c <__kernel_cos+0xec>
 801b1c6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 801b200 <__kernel_cos+0x170>
 801b1ca:	e7db      	b.n	801b184 <__kernel_cos+0xf4>
 801b1cc:	f3af 8000 	nop.w
 801b1d0:	be8838d4 	.word	0xbe8838d4
 801b1d4:	bda8fae9 	.word	0xbda8fae9
 801b1d8:	bdb4b1c4 	.word	0xbdb4b1c4
 801b1dc:	3e21ee9e 	.word	0x3e21ee9e
 801b1e0:	809c52ad 	.word	0x809c52ad
 801b1e4:	3e927e4f 	.word	0x3e927e4f
 801b1e8:	19cb1590 	.word	0x19cb1590
 801b1ec:	3efa01a0 	.word	0x3efa01a0
 801b1f0:	16c15177 	.word	0x16c15177
 801b1f4:	3f56c16c 	.word	0x3f56c16c
 801b1f8:	5555554c 	.word	0x5555554c
 801b1fc:	3fa55555 	.word	0x3fa55555
 801b200:	00000000 	.word	0x00000000
 801b204:	3ff00000 	.word	0x3ff00000
 801b208:	3fe00000 	.word	0x3fe00000
 801b20c:	3fd33332 	.word	0x3fd33332
 801b210:	3ff00000 	.word	0x3ff00000
 801b214:	3fe90000 	.word	0x3fe90000
 801b218:	3fd20000 	.word	0x3fd20000
 801b21c:	00000000 	.word	0x00000000

0801b220 <__kernel_rem_pio2>:
 801b220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b224:	ed2d 8b02 	vpush	{d8}
 801b228:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 801b22c:	f112 0f14 	cmn.w	r2, #20
 801b230:	9308      	str	r3, [sp, #32]
 801b232:	9101      	str	r1, [sp, #4]
 801b234:	4bc6      	ldr	r3, [pc, #792]	; (801b550 <__kernel_rem_pio2+0x330>)
 801b236:	99a4      	ldr	r1, [sp, #656]	; 0x290
 801b238:	9009      	str	r0, [sp, #36]	; 0x24
 801b23a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801b23e:	9304      	str	r3, [sp, #16]
 801b240:	9b08      	ldr	r3, [sp, #32]
 801b242:	f103 33ff 	add.w	r3, r3, #4294967295
 801b246:	bfa8      	it	ge
 801b248:	1ed4      	subge	r4, r2, #3
 801b24a:	9306      	str	r3, [sp, #24]
 801b24c:	bfb2      	itee	lt
 801b24e:	2400      	movlt	r4, #0
 801b250:	2318      	movge	r3, #24
 801b252:	fb94 f4f3 	sdivge	r4, r4, r3
 801b256:	f06f 0317 	mvn.w	r3, #23
 801b25a:	fb04 3303 	mla	r3, r4, r3, r3
 801b25e:	eb03 0a02 	add.w	sl, r3, r2
 801b262:	9b04      	ldr	r3, [sp, #16]
 801b264:	9a06      	ldr	r2, [sp, #24]
 801b266:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 801b540 <__kernel_rem_pio2+0x320>
 801b26a:	eb03 0802 	add.w	r8, r3, r2
 801b26e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801b270:	1aa7      	subs	r7, r4, r2
 801b272:	ae20      	add	r6, sp, #128	; 0x80
 801b274:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801b278:	2500      	movs	r5, #0
 801b27a:	4545      	cmp	r5, r8
 801b27c:	dd18      	ble.n	801b2b0 <__kernel_rem_pio2+0x90>
 801b27e:	9b08      	ldr	r3, [sp, #32]
 801b280:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801b284:	aa20      	add	r2, sp, #128	; 0x80
 801b286:	ed9f 8bae 	vldr	d8, [pc, #696]	; 801b540 <__kernel_rem_pio2+0x320>
 801b28a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801b28e:	f1c3 0301 	rsb	r3, r3, #1
 801b292:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 801b296:	9307      	str	r3, [sp, #28]
 801b298:	9b07      	ldr	r3, [sp, #28]
 801b29a:	9a04      	ldr	r2, [sp, #16]
 801b29c:	4443      	add	r3, r8
 801b29e:	429a      	cmp	r2, r3
 801b2a0:	db2f      	blt.n	801b302 <__kernel_rem_pio2+0xe2>
 801b2a2:	ed8d 8b02 	vstr	d8, [sp, #8]
 801b2a6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801b2aa:	462f      	mov	r7, r5
 801b2ac:	2600      	movs	r6, #0
 801b2ae:	e01b      	b.n	801b2e8 <__kernel_rem_pio2+0xc8>
 801b2b0:	42ef      	cmn	r7, r5
 801b2b2:	d407      	bmi.n	801b2c4 <__kernel_rem_pio2+0xa4>
 801b2b4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801b2b8:	f7e5 f934 	bl	8000524 <__aeabi_i2d>
 801b2bc:	e8e6 0102 	strd	r0, r1, [r6], #8
 801b2c0:	3501      	adds	r5, #1
 801b2c2:	e7da      	b.n	801b27a <__kernel_rem_pio2+0x5a>
 801b2c4:	ec51 0b18 	vmov	r0, r1, d8
 801b2c8:	e7f8      	b.n	801b2bc <__kernel_rem_pio2+0x9c>
 801b2ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b2ce:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801b2d2:	f7e5 f991 	bl	80005f8 <__aeabi_dmul>
 801b2d6:	4602      	mov	r2, r0
 801b2d8:	460b      	mov	r3, r1
 801b2da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b2de:	f7e4 ffd5 	bl	800028c <__adddf3>
 801b2e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b2e6:	3601      	adds	r6, #1
 801b2e8:	9b06      	ldr	r3, [sp, #24]
 801b2ea:	429e      	cmp	r6, r3
 801b2ec:	f1a7 0708 	sub.w	r7, r7, #8
 801b2f0:	ddeb      	ble.n	801b2ca <__kernel_rem_pio2+0xaa>
 801b2f2:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b2f6:	3508      	adds	r5, #8
 801b2f8:	ecab 7b02 	vstmia	fp!, {d7}
 801b2fc:	f108 0801 	add.w	r8, r8, #1
 801b300:	e7ca      	b.n	801b298 <__kernel_rem_pio2+0x78>
 801b302:	9b04      	ldr	r3, [sp, #16]
 801b304:	aa0c      	add	r2, sp, #48	; 0x30
 801b306:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b30a:	930b      	str	r3, [sp, #44]	; 0x2c
 801b30c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801b30e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801b312:	9c04      	ldr	r4, [sp, #16]
 801b314:	930a      	str	r3, [sp, #40]	; 0x28
 801b316:	ab98      	add	r3, sp, #608	; 0x260
 801b318:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801b31c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801b320:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 801b324:	f8cd b008 	str.w	fp, [sp, #8]
 801b328:	4625      	mov	r5, r4
 801b32a:	2d00      	cmp	r5, #0
 801b32c:	dc78      	bgt.n	801b420 <__kernel_rem_pio2+0x200>
 801b32e:	ec47 6b10 	vmov	d0, r6, r7
 801b332:	4650      	mov	r0, sl
 801b334:	f000 fda0 	bl	801be78 <scalbn>
 801b338:	ec57 6b10 	vmov	r6, r7, d0
 801b33c:	2200      	movs	r2, #0
 801b33e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801b342:	ee10 0a10 	vmov	r0, s0
 801b346:	4639      	mov	r1, r7
 801b348:	f7e5 f956 	bl	80005f8 <__aeabi_dmul>
 801b34c:	ec41 0b10 	vmov	d0, r0, r1
 801b350:	f000 fd12 	bl	801bd78 <floor>
 801b354:	4b7f      	ldr	r3, [pc, #508]	; (801b554 <__kernel_rem_pio2+0x334>)
 801b356:	ec51 0b10 	vmov	r0, r1, d0
 801b35a:	2200      	movs	r2, #0
 801b35c:	f7e5 f94c 	bl	80005f8 <__aeabi_dmul>
 801b360:	4602      	mov	r2, r0
 801b362:	460b      	mov	r3, r1
 801b364:	4630      	mov	r0, r6
 801b366:	4639      	mov	r1, r7
 801b368:	f7e4 ff8e 	bl	8000288 <__aeabi_dsub>
 801b36c:	460f      	mov	r7, r1
 801b36e:	4606      	mov	r6, r0
 801b370:	f7e5 fbf2 	bl	8000b58 <__aeabi_d2iz>
 801b374:	9007      	str	r0, [sp, #28]
 801b376:	f7e5 f8d5 	bl	8000524 <__aeabi_i2d>
 801b37a:	4602      	mov	r2, r0
 801b37c:	460b      	mov	r3, r1
 801b37e:	4630      	mov	r0, r6
 801b380:	4639      	mov	r1, r7
 801b382:	f7e4 ff81 	bl	8000288 <__aeabi_dsub>
 801b386:	f1ba 0f00 	cmp.w	sl, #0
 801b38a:	4606      	mov	r6, r0
 801b38c:	460f      	mov	r7, r1
 801b38e:	dd70      	ble.n	801b472 <__kernel_rem_pio2+0x252>
 801b390:	1e62      	subs	r2, r4, #1
 801b392:	ab0c      	add	r3, sp, #48	; 0x30
 801b394:	9d07      	ldr	r5, [sp, #28]
 801b396:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801b39a:	f1ca 0118 	rsb	r1, sl, #24
 801b39e:	fa40 f301 	asr.w	r3, r0, r1
 801b3a2:	441d      	add	r5, r3
 801b3a4:	408b      	lsls	r3, r1
 801b3a6:	1ac0      	subs	r0, r0, r3
 801b3a8:	ab0c      	add	r3, sp, #48	; 0x30
 801b3aa:	9507      	str	r5, [sp, #28]
 801b3ac:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801b3b0:	f1ca 0317 	rsb	r3, sl, #23
 801b3b4:	fa40 f303 	asr.w	r3, r0, r3
 801b3b8:	9302      	str	r3, [sp, #8]
 801b3ba:	9b02      	ldr	r3, [sp, #8]
 801b3bc:	2b00      	cmp	r3, #0
 801b3be:	dd66      	ble.n	801b48e <__kernel_rem_pio2+0x26e>
 801b3c0:	9b07      	ldr	r3, [sp, #28]
 801b3c2:	2200      	movs	r2, #0
 801b3c4:	3301      	adds	r3, #1
 801b3c6:	9307      	str	r3, [sp, #28]
 801b3c8:	4615      	mov	r5, r2
 801b3ca:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801b3ce:	4294      	cmp	r4, r2
 801b3d0:	f300 8099 	bgt.w	801b506 <__kernel_rem_pio2+0x2e6>
 801b3d4:	f1ba 0f00 	cmp.w	sl, #0
 801b3d8:	dd07      	ble.n	801b3ea <__kernel_rem_pio2+0x1ca>
 801b3da:	f1ba 0f01 	cmp.w	sl, #1
 801b3de:	f000 80a5 	beq.w	801b52c <__kernel_rem_pio2+0x30c>
 801b3e2:	f1ba 0f02 	cmp.w	sl, #2
 801b3e6:	f000 80c1 	beq.w	801b56c <__kernel_rem_pio2+0x34c>
 801b3ea:	9b02      	ldr	r3, [sp, #8]
 801b3ec:	2b02      	cmp	r3, #2
 801b3ee:	d14e      	bne.n	801b48e <__kernel_rem_pio2+0x26e>
 801b3f0:	4632      	mov	r2, r6
 801b3f2:	463b      	mov	r3, r7
 801b3f4:	4958      	ldr	r1, [pc, #352]	; (801b558 <__kernel_rem_pio2+0x338>)
 801b3f6:	2000      	movs	r0, #0
 801b3f8:	f7e4 ff46 	bl	8000288 <__aeabi_dsub>
 801b3fc:	4606      	mov	r6, r0
 801b3fe:	460f      	mov	r7, r1
 801b400:	2d00      	cmp	r5, #0
 801b402:	d044      	beq.n	801b48e <__kernel_rem_pio2+0x26e>
 801b404:	4650      	mov	r0, sl
 801b406:	ed9f 0b50 	vldr	d0, [pc, #320]	; 801b548 <__kernel_rem_pio2+0x328>
 801b40a:	f000 fd35 	bl	801be78 <scalbn>
 801b40e:	4630      	mov	r0, r6
 801b410:	4639      	mov	r1, r7
 801b412:	ec53 2b10 	vmov	r2, r3, d0
 801b416:	f7e4 ff37 	bl	8000288 <__aeabi_dsub>
 801b41a:	4606      	mov	r6, r0
 801b41c:	460f      	mov	r7, r1
 801b41e:	e036      	b.n	801b48e <__kernel_rem_pio2+0x26e>
 801b420:	4b4e      	ldr	r3, [pc, #312]	; (801b55c <__kernel_rem_pio2+0x33c>)
 801b422:	2200      	movs	r2, #0
 801b424:	4630      	mov	r0, r6
 801b426:	4639      	mov	r1, r7
 801b428:	f7e5 f8e6 	bl	80005f8 <__aeabi_dmul>
 801b42c:	f7e5 fb94 	bl	8000b58 <__aeabi_d2iz>
 801b430:	f7e5 f878 	bl	8000524 <__aeabi_i2d>
 801b434:	4b4a      	ldr	r3, [pc, #296]	; (801b560 <__kernel_rem_pio2+0x340>)
 801b436:	2200      	movs	r2, #0
 801b438:	4680      	mov	r8, r0
 801b43a:	4689      	mov	r9, r1
 801b43c:	f7e5 f8dc 	bl	80005f8 <__aeabi_dmul>
 801b440:	4602      	mov	r2, r0
 801b442:	460b      	mov	r3, r1
 801b444:	4630      	mov	r0, r6
 801b446:	4639      	mov	r1, r7
 801b448:	f7e4 ff1e 	bl	8000288 <__aeabi_dsub>
 801b44c:	f7e5 fb84 	bl	8000b58 <__aeabi_d2iz>
 801b450:	9b02      	ldr	r3, [sp, #8]
 801b452:	f843 0b04 	str.w	r0, [r3], #4
 801b456:	3d01      	subs	r5, #1
 801b458:	9302      	str	r3, [sp, #8]
 801b45a:	ab70      	add	r3, sp, #448	; 0x1c0
 801b45c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801b460:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b464:	4640      	mov	r0, r8
 801b466:	4649      	mov	r1, r9
 801b468:	f7e4 ff10 	bl	800028c <__adddf3>
 801b46c:	4606      	mov	r6, r0
 801b46e:	460f      	mov	r7, r1
 801b470:	e75b      	b.n	801b32a <__kernel_rem_pio2+0x10a>
 801b472:	d105      	bne.n	801b480 <__kernel_rem_pio2+0x260>
 801b474:	1e63      	subs	r3, r4, #1
 801b476:	aa0c      	add	r2, sp, #48	; 0x30
 801b478:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801b47c:	15c3      	asrs	r3, r0, #23
 801b47e:	e79b      	b.n	801b3b8 <__kernel_rem_pio2+0x198>
 801b480:	4b38      	ldr	r3, [pc, #224]	; (801b564 <__kernel_rem_pio2+0x344>)
 801b482:	2200      	movs	r2, #0
 801b484:	f7e5 fb3e 	bl	8000b04 <__aeabi_dcmpge>
 801b488:	2800      	cmp	r0, #0
 801b48a:	d139      	bne.n	801b500 <__kernel_rem_pio2+0x2e0>
 801b48c:	9002      	str	r0, [sp, #8]
 801b48e:	2200      	movs	r2, #0
 801b490:	2300      	movs	r3, #0
 801b492:	4630      	mov	r0, r6
 801b494:	4639      	mov	r1, r7
 801b496:	f7e5 fb17 	bl	8000ac8 <__aeabi_dcmpeq>
 801b49a:	2800      	cmp	r0, #0
 801b49c:	f000 80b4 	beq.w	801b608 <__kernel_rem_pio2+0x3e8>
 801b4a0:	f104 3bff 	add.w	fp, r4, #4294967295
 801b4a4:	465b      	mov	r3, fp
 801b4a6:	2200      	movs	r2, #0
 801b4a8:	9904      	ldr	r1, [sp, #16]
 801b4aa:	428b      	cmp	r3, r1
 801b4ac:	da65      	bge.n	801b57a <__kernel_rem_pio2+0x35a>
 801b4ae:	2a00      	cmp	r2, #0
 801b4b0:	d07b      	beq.n	801b5aa <__kernel_rem_pio2+0x38a>
 801b4b2:	ab0c      	add	r3, sp, #48	; 0x30
 801b4b4:	f1aa 0a18 	sub.w	sl, sl, #24
 801b4b8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801b4bc:	2b00      	cmp	r3, #0
 801b4be:	f000 80a0 	beq.w	801b602 <__kernel_rem_pio2+0x3e2>
 801b4c2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 801b548 <__kernel_rem_pio2+0x328>
 801b4c6:	4650      	mov	r0, sl
 801b4c8:	f000 fcd6 	bl	801be78 <scalbn>
 801b4cc:	4f23      	ldr	r7, [pc, #140]	; (801b55c <__kernel_rem_pio2+0x33c>)
 801b4ce:	ec55 4b10 	vmov	r4, r5, d0
 801b4d2:	46d8      	mov	r8, fp
 801b4d4:	2600      	movs	r6, #0
 801b4d6:	f1b8 0f00 	cmp.w	r8, #0
 801b4da:	f280 80cf 	bge.w	801b67c <__kernel_rem_pio2+0x45c>
 801b4de:	ed9f 8b18 	vldr	d8, [pc, #96]	; 801b540 <__kernel_rem_pio2+0x320>
 801b4e2:	465f      	mov	r7, fp
 801b4e4:	f04f 0800 	mov.w	r8, #0
 801b4e8:	2f00      	cmp	r7, #0
 801b4ea:	f2c0 80fd 	blt.w	801b6e8 <__kernel_rem_pio2+0x4c8>
 801b4ee:	ab70      	add	r3, sp, #448	; 0x1c0
 801b4f0:	f8df a074 	ldr.w	sl, [pc, #116]	; 801b568 <__kernel_rem_pio2+0x348>
 801b4f4:	ec55 4b18 	vmov	r4, r5, d8
 801b4f8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 801b4fc:	2600      	movs	r6, #0
 801b4fe:	e0e5      	b.n	801b6cc <__kernel_rem_pio2+0x4ac>
 801b500:	2302      	movs	r3, #2
 801b502:	9302      	str	r3, [sp, #8]
 801b504:	e75c      	b.n	801b3c0 <__kernel_rem_pio2+0x1a0>
 801b506:	f8db 3000 	ldr.w	r3, [fp]
 801b50a:	b955      	cbnz	r5, 801b522 <__kernel_rem_pio2+0x302>
 801b50c:	b123      	cbz	r3, 801b518 <__kernel_rem_pio2+0x2f8>
 801b50e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801b512:	f8cb 3000 	str.w	r3, [fp]
 801b516:	2301      	movs	r3, #1
 801b518:	3201      	adds	r2, #1
 801b51a:	f10b 0b04 	add.w	fp, fp, #4
 801b51e:	461d      	mov	r5, r3
 801b520:	e755      	b.n	801b3ce <__kernel_rem_pio2+0x1ae>
 801b522:	1acb      	subs	r3, r1, r3
 801b524:	f8cb 3000 	str.w	r3, [fp]
 801b528:	462b      	mov	r3, r5
 801b52a:	e7f5      	b.n	801b518 <__kernel_rem_pio2+0x2f8>
 801b52c:	1e62      	subs	r2, r4, #1
 801b52e:	ab0c      	add	r3, sp, #48	; 0x30
 801b530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b534:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801b538:	a90c      	add	r1, sp, #48	; 0x30
 801b53a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801b53e:	e754      	b.n	801b3ea <__kernel_rem_pio2+0x1ca>
	...
 801b54c:	3ff00000 	.word	0x3ff00000
 801b550:	0801c938 	.word	0x0801c938
 801b554:	40200000 	.word	0x40200000
 801b558:	3ff00000 	.word	0x3ff00000
 801b55c:	3e700000 	.word	0x3e700000
 801b560:	41700000 	.word	0x41700000
 801b564:	3fe00000 	.word	0x3fe00000
 801b568:	0801c8f8 	.word	0x0801c8f8
 801b56c:	1e62      	subs	r2, r4, #1
 801b56e:	ab0c      	add	r3, sp, #48	; 0x30
 801b570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b574:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801b578:	e7de      	b.n	801b538 <__kernel_rem_pio2+0x318>
 801b57a:	a90c      	add	r1, sp, #48	; 0x30
 801b57c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801b580:	3b01      	subs	r3, #1
 801b582:	430a      	orrs	r2, r1
 801b584:	e790      	b.n	801b4a8 <__kernel_rem_pio2+0x288>
 801b586:	3301      	adds	r3, #1
 801b588:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801b58c:	2900      	cmp	r1, #0
 801b58e:	d0fa      	beq.n	801b586 <__kernel_rem_pio2+0x366>
 801b590:	9a08      	ldr	r2, [sp, #32]
 801b592:	18e3      	adds	r3, r4, r3
 801b594:	18a6      	adds	r6, r4, r2
 801b596:	aa20      	add	r2, sp, #128	; 0x80
 801b598:	1c65      	adds	r5, r4, #1
 801b59a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801b59e:	9302      	str	r3, [sp, #8]
 801b5a0:	9b02      	ldr	r3, [sp, #8]
 801b5a2:	42ab      	cmp	r3, r5
 801b5a4:	da04      	bge.n	801b5b0 <__kernel_rem_pio2+0x390>
 801b5a6:	461c      	mov	r4, r3
 801b5a8:	e6b5      	b.n	801b316 <__kernel_rem_pio2+0xf6>
 801b5aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b5ac:	2301      	movs	r3, #1
 801b5ae:	e7eb      	b.n	801b588 <__kernel_rem_pio2+0x368>
 801b5b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b5b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801b5b6:	f7e4 ffb5 	bl	8000524 <__aeabi_i2d>
 801b5ba:	e8e6 0102 	strd	r0, r1, [r6], #8
 801b5be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b5c0:	46b3      	mov	fp, r6
 801b5c2:	461c      	mov	r4, r3
 801b5c4:	2700      	movs	r7, #0
 801b5c6:	f04f 0800 	mov.w	r8, #0
 801b5ca:	f04f 0900 	mov.w	r9, #0
 801b5ce:	9b06      	ldr	r3, [sp, #24]
 801b5d0:	429f      	cmp	r7, r3
 801b5d2:	dd06      	ble.n	801b5e2 <__kernel_rem_pio2+0x3c2>
 801b5d4:	ab70      	add	r3, sp, #448	; 0x1c0
 801b5d6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801b5da:	e9c3 8900 	strd	r8, r9, [r3]
 801b5de:	3501      	adds	r5, #1
 801b5e0:	e7de      	b.n	801b5a0 <__kernel_rem_pio2+0x380>
 801b5e2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801b5e6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801b5ea:	f7e5 f805 	bl	80005f8 <__aeabi_dmul>
 801b5ee:	4602      	mov	r2, r0
 801b5f0:	460b      	mov	r3, r1
 801b5f2:	4640      	mov	r0, r8
 801b5f4:	4649      	mov	r1, r9
 801b5f6:	f7e4 fe49 	bl	800028c <__adddf3>
 801b5fa:	3701      	adds	r7, #1
 801b5fc:	4680      	mov	r8, r0
 801b5fe:	4689      	mov	r9, r1
 801b600:	e7e5      	b.n	801b5ce <__kernel_rem_pio2+0x3ae>
 801b602:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b606:	e754      	b.n	801b4b2 <__kernel_rem_pio2+0x292>
 801b608:	ec47 6b10 	vmov	d0, r6, r7
 801b60c:	f1ca 0000 	rsb	r0, sl, #0
 801b610:	f000 fc32 	bl	801be78 <scalbn>
 801b614:	ec57 6b10 	vmov	r6, r7, d0
 801b618:	4b9f      	ldr	r3, [pc, #636]	; (801b898 <__kernel_rem_pio2+0x678>)
 801b61a:	ee10 0a10 	vmov	r0, s0
 801b61e:	2200      	movs	r2, #0
 801b620:	4639      	mov	r1, r7
 801b622:	f7e5 fa6f 	bl	8000b04 <__aeabi_dcmpge>
 801b626:	b300      	cbz	r0, 801b66a <__kernel_rem_pio2+0x44a>
 801b628:	4b9c      	ldr	r3, [pc, #624]	; (801b89c <__kernel_rem_pio2+0x67c>)
 801b62a:	2200      	movs	r2, #0
 801b62c:	4630      	mov	r0, r6
 801b62e:	4639      	mov	r1, r7
 801b630:	f7e4 ffe2 	bl	80005f8 <__aeabi_dmul>
 801b634:	f7e5 fa90 	bl	8000b58 <__aeabi_d2iz>
 801b638:	4605      	mov	r5, r0
 801b63a:	f7e4 ff73 	bl	8000524 <__aeabi_i2d>
 801b63e:	4b96      	ldr	r3, [pc, #600]	; (801b898 <__kernel_rem_pio2+0x678>)
 801b640:	2200      	movs	r2, #0
 801b642:	f7e4 ffd9 	bl	80005f8 <__aeabi_dmul>
 801b646:	460b      	mov	r3, r1
 801b648:	4602      	mov	r2, r0
 801b64a:	4639      	mov	r1, r7
 801b64c:	4630      	mov	r0, r6
 801b64e:	f7e4 fe1b 	bl	8000288 <__aeabi_dsub>
 801b652:	f7e5 fa81 	bl	8000b58 <__aeabi_d2iz>
 801b656:	f104 0b01 	add.w	fp, r4, #1
 801b65a:	ab0c      	add	r3, sp, #48	; 0x30
 801b65c:	f10a 0a18 	add.w	sl, sl, #24
 801b660:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801b664:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 801b668:	e72b      	b.n	801b4c2 <__kernel_rem_pio2+0x2a2>
 801b66a:	4630      	mov	r0, r6
 801b66c:	4639      	mov	r1, r7
 801b66e:	f7e5 fa73 	bl	8000b58 <__aeabi_d2iz>
 801b672:	ab0c      	add	r3, sp, #48	; 0x30
 801b674:	46a3      	mov	fp, r4
 801b676:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801b67a:	e722      	b.n	801b4c2 <__kernel_rem_pio2+0x2a2>
 801b67c:	ab70      	add	r3, sp, #448	; 0x1c0
 801b67e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 801b682:	ab0c      	add	r3, sp, #48	; 0x30
 801b684:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801b688:	f7e4 ff4c 	bl	8000524 <__aeabi_i2d>
 801b68c:	4622      	mov	r2, r4
 801b68e:	462b      	mov	r3, r5
 801b690:	f7e4 ffb2 	bl	80005f8 <__aeabi_dmul>
 801b694:	4632      	mov	r2, r6
 801b696:	e9c9 0100 	strd	r0, r1, [r9]
 801b69a:	463b      	mov	r3, r7
 801b69c:	4620      	mov	r0, r4
 801b69e:	4629      	mov	r1, r5
 801b6a0:	f7e4 ffaa 	bl	80005f8 <__aeabi_dmul>
 801b6a4:	f108 38ff 	add.w	r8, r8, #4294967295
 801b6a8:	4604      	mov	r4, r0
 801b6aa:	460d      	mov	r5, r1
 801b6ac:	e713      	b.n	801b4d6 <__kernel_rem_pio2+0x2b6>
 801b6ae:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 801b6b2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 801b6b6:	f7e4 ff9f 	bl	80005f8 <__aeabi_dmul>
 801b6ba:	4602      	mov	r2, r0
 801b6bc:	460b      	mov	r3, r1
 801b6be:	4620      	mov	r0, r4
 801b6c0:	4629      	mov	r1, r5
 801b6c2:	f7e4 fde3 	bl	800028c <__adddf3>
 801b6c6:	3601      	adds	r6, #1
 801b6c8:	4604      	mov	r4, r0
 801b6ca:	460d      	mov	r5, r1
 801b6cc:	9b04      	ldr	r3, [sp, #16]
 801b6ce:	429e      	cmp	r6, r3
 801b6d0:	dc01      	bgt.n	801b6d6 <__kernel_rem_pio2+0x4b6>
 801b6d2:	45b0      	cmp	r8, r6
 801b6d4:	daeb      	bge.n	801b6ae <__kernel_rem_pio2+0x48e>
 801b6d6:	ab48      	add	r3, sp, #288	; 0x120
 801b6d8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801b6dc:	e9c3 4500 	strd	r4, r5, [r3]
 801b6e0:	3f01      	subs	r7, #1
 801b6e2:	f108 0801 	add.w	r8, r8, #1
 801b6e6:	e6ff      	b.n	801b4e8 <__kernel_rem_pio2+0x2c8>
 801b6e8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801b6ea:	2b02      	cmp	r3, #2
 801b6ec:	dc0b      	bgt.n	801b706 <__kernel_rem_pio2+0x4e6>
 801b6ee:	2b00      	cmp	r3, #0
 801b6f0:	dc6e      	bgt.n	801b7d0 <__kernel_rem_pio2+0x5b0>
 801b6f2:	d045      	beq.n	801b780 <__kernel_rem_pio2+0x560>
 801b6f4:	9b07      	ldr	r3, [sp, #28]
 801b6f6:	f003 0007 	and.w	r0, r3, #7
 801b6fa:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801b6fe:	ecbd 8b02 	vpop	{d8}
 801b702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b706:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801b708:	2b03      	cmp	r3, #3
 801b70a:	d1f3      	bne.n	801b6f4 <__kernel_rem_pio2+0x4d4>
 801b70c:	ab48      	add	r3, sp, #288	; 0x120
 801b70e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 801b712:	46d0      	mov	r8, sl
 801b714:	46d9      	mov	r9, fp
 801b716:	f1b9 0f00 	cmp.w	r9, #0
 801b71a:	f1a8 0808 	sub.w	r8, r8, #8
 801b71e:	dc64      	bgt.n	801b7ea <__kernel_rem_pio2+0x5ca>
 801b720:	465c      	mov	r4, fp
 801b722:	2c01      	cmp	r4, #1
 801b724:	f1aa 0a08 	sub.w	sl, sl, #8
 801b728:	dc7e      	bgt.n	801b828 <__kernel_rem_pio2+0x608>
 801b72a:	2000      	movs	r0, #0
 801b72c:	2100      	movs	r1, #0
 801b72e:	f1bb 0f01 	cmp.w	fp, #1
 801b732:	f300 8097 	bgt.w	801b864 <__kernel_rem_pio2+0x644>
 801b736:	9b02      	ldr	r3, [sp, #8]
 801b738:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 801b73c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 801b740:	2b00      	cmp	r3, #0
 801b742:	f040 8099 	bne.w	801b878 <__kernel_rem_pio2+0x658>
 801b746:	9b01      	ldr	r3, [sp, #4]
 801b748:	e9c3 5600 	strd	r5, r6, [r3]
 801b74c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 801b750:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801b754:	e7ce      	b.n	801b6f4 <__kernel_rem_pio2+0x4d4>
 801b756:	ab48      	add	r3, sp, #288	; 0x120
 801b758:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801b75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b760:	f7e4 fd94 	bl	800028c <__adddf3>
 801b764:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b768:	f1bb 0f00 	cmp.w	fp, #0
 801b76c:	daf3      	bge.n	801b756 <__kernel_rem_pio2+0x536>
 801b76e:	9b02      	ldr	r3, [sp, #8]
 801b770:	b113      	cbz	r3, 801b778 <__kernel_rem_pio2+0x558>
 801b772:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b776:	4619      	mov	r1, r3
 801b778:	9b01      	ldr	r3, [sp, #4]
 801b77a:	e9c3 0100 	strd	r0, r1, [r3]
 801b77e:	e7b9      	b.n	801b6f4 <__kernel_rem_pio2+0x4d4>
 801b780:	2000      	movs	r0, #0
 801b782:	2100      	movs	r1, #0
 801b784:	e7f0      	b.n	801b768 <__kernel_rem_pio2+0x548>
 801b786:	ab48      	add	r3, sp, #288	; 0x120
 801b788:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801b78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b790:	f7e4 fd7c 	bl	800028c <__adddf3>
 801b794:	3c01      	subs	r4, #1
 801b796:	2c00      	cmp	r4, #0
 801b798:	daf5      	bge.n	801b786 <__kernel_rem_pio2+0x566>
 801b79a:	9b02      	ldr	r3, [sp, #8]
 801b79c:	b1e3      	cbz	r3, 801b7d8 <__kernel_rem_pio2+0x5b8>
 801b79e:	4602      	mov	r2, r0
 801b7a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b7a4:	9c01      	ldr	r4, [sp, #4]
 801b7a6:	e9c4 2300 	strd	r2, r3, [r4]
 801b7aa:	4602      	mov	r2, r0
 801b7ac:	460b      	mov	r3, r1
 801b7ae:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 801b7b2:	f7e4 fd69 	bl	8000288 <__aeabi_dsub>
 801b7b6:	ad4a      	add	r5, sp, #296	; 0x128
 801b7b8:	2401      	movs	r4, #1
 801b7ba:	45a3      	cmp	fp, r4
 801b7bc:	da0f      	bge.n	801b7de <__kernel_rem_pio2+0x5be>
 801b7be:	9b02      	ldr	r3, [sp, #8]
 801b7c0:	b113      	cbz	r3, 801b7c8 <__kernel_rem_pio2+0x5a8>
 801b7c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b7c6:	4619      	mov	r1, r3
 801b7c8:	9b01      	ldr	r3, [sp, #4]
 801b7ca:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801b7ce:	e791      	b.n	801b6f4 <__kernel_rem_pio2+0x4d4>
 801b7d0:	465c      	mov	r4, fp
 801b7d2:	2000      	movs	r0, #0
 801b7d4:	2100      	movs	r1, #0
 801b7d6:	e7de      	b.n	801b796 <__kernel_rem_pio2+0x576>
 801b7d8:	4602      	mov	r2, r0
 801b7da:	460b      	mov	r3, r1
 801b7dc:	e7e2      	b.n	801b7a4 <__kernel_rem_pio2+0x584>
 801b7de:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801b7e2:	f7e4 fd53 	bl	800028c <__adddf3>
 801b7e6:	3401      	adds	r4, #1
 801b7e8:	e7e7      	b.n	801b7ba <__kernel_rem_pio2+0x59a>
 801b7ea:	e9d8 4500 	ldrd	r4, r5, [r8]
 801b7ee:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 801b7f2:	4620      	mov	r0, r4
 801b7f4:	4632      	mov	r2, r6
 801b7f6:	463b      	mov	r3, r7
 801b7f8:	4629      	mov	r1, r5
 801b7fa:	f7e4 fd47 	bl	800028c <__adddf3>
 801b7fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b802:	4602      	mov	r2, r0
 801b804:	460b      	mov	r3, r1
 801b806:	4620      	mov	r0, r4
 801b808:	4629      	mov	r1, r5
 801b80a:	f7e4 fd3d 	bl	8000288 <__aeabi_dsub>
 801b80e:	4632      	mov	r2, r6
 801b810:	463b      	mov	r3, r7
 801b812:	f7e4 fd3b 	bl	800028c <__adddf3>
 801b816:	ed9d 7b04 	vldr	d7, [sp, #16]
 801b81a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 801b81e:	ed88 7b00 	vstr	d7, [r8]
 801b822:	f109 39ff 	add.w	r9, r9, #4294967295
 801b826:	e776      	b.n	801b716 <__kernel_rem_pio2+0x4f6>
 801b828:	e9da 8900 	ldrd	r8, r9, [sl]
 801b82c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801b830:	4640      	mov	r0, r8
 801b832:	4632      	mov	r2, r6
 801b834:	463b      	mov	r3, r7
 801b836:	4649      	mov	r1, r9
 801b838:	f7e4 fd28 	bl	800028c <__adddf3>
 801b83c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b840:	4602      	mov	r2, r0
 801b842:	460b      	mov	r3, r1
 801b844:	4640      	mov	r0, r8
 801b846:	4649      	mov	r1, r9
 801b848:	f7e4 fd1e 	bl	8000288 <__aeabi_dsub>
 801b84c:	4632      	mov	r2, r6
 801b84e:	463b      	mov	r3, r7
 801b850:	f7e4 fd1c 	bl	800028c <__adddf3>
 801b854:	ed9d 7b04 	vldr	d7, [sp, #16]
 801b858:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801b85c:	ed8a 7b00 	vstr	d7, [sl]
 801b860:	3c01      	subs	r4, #1
 801b862:	e75e      	b.n	801b722 <__kernel_rem_pio2+0x502>
 801b864:	ab48      	add	r3, sp, #288	; 0x120
 801b866:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801b86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b86e:	f7e4 fd0d 	bl	800028c <__adddf3>
 801b872:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b876:	e75a      	b.n	801b72e <__kernel_rem_pio2+0x50e>
 801b878:	9b01      	ldr	r3, [sp, #4]
 801b87a:	9a01      	ldr	r2, [sp, #4]
 801b87c:	601d      	str	r5, [r3, #0]
 801b87e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 801b882:	605c      	str	r4, [r3, #4]
 801b884:	609f      	str	r7, [r3, #8]
 801b886:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 801b88a:	60d3      	str	r3, [r2, #12]
 801b88c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b890:	6110      	str	r0, [r2, #16]
 801b892:	6153      	str	r3, [r2, #20]
 801b894:	e72e      	b.n	801b6f4 <__kernel_rem_pio2+0x4d4>
 801b896:	bf00      	nop
 801b898:	41700000 	.word	0x41700000
 801b89c:	3e700000 	.word	0x3e700000

0801b8a0 <__kernel_sin>:
 801b8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b8a4:	ed2d 8b04 	vpush	{d8-d9}
 801b8a8:	eeb0 8a41 	vmov.f32	s16, s2
 801b8ac:	eef0 8a61 	vmov.f32	s17, s3
 801b8b0:	ec55 4b10 	vmov	r4, r5, d0
 801b8b4:	b083      	sub	sp, #12
 801b8b6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801b8ba:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801b8be:	9001      	str	r0, [sp, #4]
 801b8c0:	da06      	bge.n	801b8d0 <__kernel_sin+0x30>
 801b8c2:	ee10 0a10 	vmov	r0, s0
 801b8c6:	4629      	mov	r1, r5
 801b8c8:	f7e5 f946 	bl	8000b58 <__aeabi_d2iz>
 801b8cc:	2800      	cmp	r0, #0
 801b8ce:	d051      	beq.n	801b974 <__kernel_sin+0xd4>
 801b8d0:	4622      	mov	r2, r4
 801b8d2:	462b      	mov	r3, r5
 801b8d4:	4620      	mov	r0, r4
 801b8d6:	4629      	mov	r1, r5
 801b8d8:	f7e4 fe8e 	bl	80005f8 <__aeabi_dmul>
 801b8dc:	4682      	mov	sl, r0
 801b8de:	468b      	mov	fp, r1
 801b8e0:	4602      	mov	r2, r0
 801b8e2:	460b      	mov	r3, r1
 801b8e4:	4620      	mov	r0, r4
 801b8e6:	4629      	mov	r1, r5
 801b8e8:	f7e4 fe86 	bl	80005f8 <__aeabi_dmul>
 801b8ec:	a341      	add	r3, pc, #260	; (adr r3, 801b9f4 <__kernel_sin+0x154>)
 801b8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8f2:	4680      	mov	r8, r0
 801b8f4:	4689      	mov	r9, r1
 801b8f6:	4650      	mov	r0, sl
 801b8f8:	4659      	mov	r1, fp
 801b8fa:	f7e4 fe7d 	bl	80005f8 <__aeabi_dmul>
 801b8fe:	a33f      	add	r3, pc, #252	; (adr r3, 801b9fc <__kernel_sin+0x15c>)
 801b900:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b904:	f7e4 fcc0 	bl	8000288 <__aeabi_dsub>
 801b908:	4652      	mov	r2, sl
 801b90a:	465b      	mov	r3, fp
 801b90c:	f7e4 fe74 	bl	80005f8 <__aeabi_dmul>
 801b910:	a33c      	add	r3, pc, #240	; (adr r3, 801ba04 <__kernel_sin+0x164>)
 801b912:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b916:	f7e4 fcb9 	bl	800028c <__adddf3>
 801b91a:	4652      	mov	r2, sl
 801b91c:	465b      	mov	r3, fp
 801b91e:	f7e4 fe6b 	bl	80005f8 <__aeabi_dmul>
 801b922:	a33a      	add	r3, pc, #232	; (adr r3, 801ba0c <__kernel_sin+0x16c>)
 801b924:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b928:	f7e4 fcae 	bl	8000288 <__aeabi_dsub>
 801b92c:	4652      	mov	r2, sl
 801b92e:	465b      	mov	r3, fp
 801b930:	f7e4 fe62 	bl	80005f8 <__aeabi_dmul>
 801b934:	a337      	add	r3, pc, #220	; (adr r3, 801ba14 <__kernel_sin+0x174>)
 801b936:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b93a:	f7e4 fca7 	bl	800028c <__adddf3>
 801b93e:	9b01      	ldr	r3, [sp, #4]
 801b940:	4606      	mov	r6, r0
 801b942:	460f      	mov	r7, r1
 801b944:	b9eb      	cbnz	r3, 801b982 <__kernel_sin+0xe2>
 801b946:	4602      	mov	r2, r0
 801b948:	460b      	mov	r3, r1
 801b94a:	4650      	mov	r0, sl
 801b94c:	4659      	mov	r1, fp
 801b94e:	f7e4 fe53 	bl	80005f8 <__aeabi_dmul>
 801b952:	a325      	add	r3, pc, #148	; (adr r3, 801b9e8 <__kernel_sin+0x148>)
 801b954:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b958:	f7e4 fc96 	bl	8000288 <__aeabi_dsub>
 801b95c:	4642      	mov	r2, r8
 801b95e:	464b      	mov	r3, r9
 801b960:	f7e4 fe4a 	bl	80005f8 <__aeabi_dmul>
 801b964:	4602      	mov	r2, r0
 801b966:	460b      	mov	r3, r1
 801b968:	4620      	mov	r0, r4
 801b96a:	4629      	mov	r1, r5
 801b96c:	f7e4 fc8e 	bl	800028c <__adddf3>
 801b970:	4604      	mov	r4, r0
 801b972:	460d      	mov	r5, r1
 801b974:	ec45 4b10 	vmov	d0, r4, r5
 801b978:	b003      	add	sp, #12
 801b97a:	ecbd 8b04 	vpop	{d8-d9}
 801b97e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b982:	4b1b      	ldr	r3, [pc, #108]	; (801b9f0 <__kernel_sin+0x150>)
 801b984:	ec51 0b18 	vmov	r0, r1, d8
 801b988:	2200      	movs	r2, #0
 801b98a:	f7e4 fe35 	bl	80005f8 <__aeabi_dmul>
 801b98e:	4632      	mov	r2, r6
 801b990:	ec41 0b19 	vmov	d9, r0, r1
 801b994:	463b      	mov	r3, r7
 801b996:	4640      	mov	r0, r8
 801b998:	4649      	mov	r1, r9
 801b99a:	f7e4 fe2d 	bl	80005f8 <__aeabi_dmul>
 801b99e:	4602      	mov	r2, r0
 801b9a0:	460b      	mov	r3, r1
 801b9a2:	ec51 0b19 	vmov	r0, r1, d9
 801b9a6:	f7e4 fc6f 	bl	8000288 <__aeabi_dsub>
 801b9aa:	4652      	mov	r2, sl
 801b9ac:	465b      	mov	r3, fp
 801b9ae:	f7e4 fe23 	bl	80005f8 <__aeabi_dmul>
 801b9b2:	ec53 2b18 	vmov	r2, r3, d8
 801b9b6:	f7e4 fc67 	bl	8000288 <__aeabi_dsub>
 801b9ba:	a30b      	add	r3, pc, #44	; (adr r3, 801b9e8 <__kernel_sin+0x148>)
 801b9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9c0:	4606      	mov	r6, r0
 801b9c2:	460f      	mov	r7, r1
 801b9c4:	4640      	mov	r0, r8
 801b9c6:	4649      	mov	r1, r9
 801b9c8:	f7e4 fe16 	bl	80005f8 <__aeabi_dmul>
 801b9cc:	4602      	mov	r2, r0
 801b9ce:	460b      	mov	r3, r1
 801b9d0:	4630      	mov	r0, r6
 801b9d2:	4639      	mov	r1, r7
 801b9d4:	f7e4 fc5a 	bl	800028c <__adddf3>
 801b9d8:	4602      	mov	r2, r0
 801b9da:	460b      	mov	r3, r1
 801b9dc:	4620      	mov	r0, r4
 801b9de:	4629      	mov	r1, r5
 801b9e0:	f7e4 fc52 	bl	8000288 <__aeabi_dsub>
 801b9e4:	e7c4      	b.n	801b970 <__kernel_sin+0xd0>
 801b9e6:	bf00      	nop
 801b9e8:	55555549 	.word	0x55555549
 801b9ec:	3fc55555 	.word	0x3fc55555
 801b9f0:	3fe00000 	.word	0x3fe00000
 801b9f4:	5acfd57c 	.word	0x5acfd57c
 801b9f8:	3de5d93a 	.word	0x3de5d93a
 801b9fc:	8a2b9ceb 	.word	0x8a2b9ceb
 801ba00:	3e5ae5e6 	.word	0x3e5ae5e6
 801ba04:	57b1fe7d 	.word	0x57b1fe7d
 801ba08:	3ec71de3 	.word	0x3ec71de3
 801ba0c:	19c161d5 	.word	0x19c161d5
 801ba10:	3f2a01a0 	.word	0x3f2a01a0
 801ba14:	1110f8a6 	.word	0x1110f8a6
 801ba18:	3f811111 	.word	0x3f811111
 801ba1c:	00000000 	.word	0x00000000

0801ba20 <atan>:
 801ba20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba24:	ec55 4b10 	vmov	r4, r5, d0
 801ba28:	4bc3      	ldr	r3, [pc, #780]	; (801bd38 <atan+0x318>)
 801ba2a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801ba2e:	429e      	cmp	r6, r3
 801ba30:	46ab      	mov	fp, r5
 801ba32:	dd18      	ble.n	801ba66 <atan+0x46>
 801ba34:	4bc1      	ldr	r3, [pc, #772]	; (801bd3c <atan+0x31c>)
 801ba36:	429e      	cmp	r6, r3
 801ba38:	dc01      	bgt.n	801ba3e <atan+0x1e>
 801ba3a:	d109      	bne.n	801ba50 <atan+0x30>
 801ba3c:	b144      	cbz	r4, 801ba50 <atan+0x30>
 801ba3e:	4622      	mov	r2, r4
 801ba40:	462b      	mov	r3, r5
 801ba42:	4620      	mov	r0, r4
 801ba44:	4629      	mov	r1, r5
 801ba46:	f7e4 fc21 	bl	800028c <__adddf3>
 801ba4a:	4604      	mov	r4, r0
 801ba4c:	460d      	mov	r5, r1
 801ba4e:	e006      	b.n	801ba5e <atan+0x3e>
 801ba50:	f1bb 0f00 	cmp.w	fp, #0
 801ba54:	f300 8131 	bgt.w	801bcba <atan+0x29a>
 801ba58:	a59b      	add	r5, pc, #620	; (adr r5, 801bcc8 <atan+0x2a8>)
 801ba5a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801ba5e:	ec45 4b10 	vmov	d0, r4, r5
 801ba62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba66:	4bb6      	ldr	r3, [pc, #728]	; (801bd40 <atan+0x320>)
 801ba68:	429e      	cmp	r6, r3
 801ba6a:	dc14      	bgt.n	801ba96 <atan+0x76>
 801ba6c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801ba70:	429e      	cmp	r6, r3
 801ba72:	dc0d      	bgt.n	801ba90 <atan+0x70>
 801ba74:	a396      	add	r3, pc, #600	; (adr r3, 801bcd0 <atan+0x2b0>)
 801ba76:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba7a:	ee10 0a10 	vmov	r0, s0
 801ba7e:	4629      	mov	r1, r5
 801ba80:	f7e4 fc04 	bl	800028c <__adddf3>
 801ba84:	4baf      	ldr	r3, [pc, #700]	; (801bd44 <atan+0x324>)
 801ba86:	2200      	movs	r2, #0
 801ba88:	f7e5 f846 	bl	8000b18 <__aeabi_dcmpgt>
 801ba8c:	2800      	cmp	r0, #0
 801ba8e:	d1e6      	bne.n	801ba5e <atan+0x3e>
 801ba90:	f04f 3aff 	mov.w	sl, #4294967295
 801ba94:	e02b      	b.n	801baee <atan+0xce>
 801ba96:	f000 f963 	bl	801bd60 <fabs>
 801ba9a:	4bab      	ldr	r3, [pc, #684]	; (801bd48 <atan+0x328>)
 801ba9c:	429e      	cmp	r6, r3
 801ba9e:	ec55 4b10 	vmov	r4, r5, d0
 801baa2:	f300 80bf 	bgt.w	801bc24 <atan+0x204>
 801baa6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801baaa:	429e      	cmp	r6, r3
 801baac:	f300 80a0 	bgt.w	801bbf0 <atan+0x1d0>
 801bab0:	ee10 2a10 	vmov	r2, s0
 801bab4:	ee10 0a10 	vmov	r0, s0
 801bab8:	462b      	mov	r3, r5
 801baba:	4629      	mov	r1, r5
 801babc:	f7e4 fbe6 	bl	800028c <__adddf3>
 801bac0:	4ba0      	ldr	r3, [pc, #640]	; (801bd44 <atan+0x324>)
 801bac2:	2200      	movs	r2, #0
 801bac4:	f7e4 fbe0 	bl	8000288 <__aeabi_dsub>
 801bac8:	2200      	movs	r2, #0
 801baca:	4606      	mov	r6, r0
 801bacc:	460f      	mov	r7, r1
 801bace:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801bad2:	4620      	mov	r0, r4
 801bad4:	4629      	mov	r1, r5
 801bad6:	f7e4 fbd9 	bl	800028c <__adddf3>
 801bada:	4602      	mov	r2, r0
 801badc:	460b      	mov	r3, r1
 801bade:	4630      	mov	r0, r6
 801bae0:	4639      	mov	r1, r7
 801bae2:	f7e4 feb3 	bl	800084c <__aeabi_ddiv>
 801bae6:	f04f 0a00 	mov.w	sl, #0
 801baea:	4604      	mov	r4, r0
 801baec:	460d      	mov	r5, r1
 801baee:	4622      	mov	r2, r4
 801baf0:	462b      	mov	r3, r5
 801baf2:	4620      	mov	r0, r4
 801baf4:	4629      	mov	r1, r5
 801baf6:	f7e4 fd7f 	bl	80005f8 <__aeabi_dmul>
 801bafa:	4602      	mov	r2, r0
 801bafc:	460b      	mov	r3, r1
 801bafe:	4680      	mov	r8, r0
 801bb00:	4689      	mov	r9, r1
 801bb02:	f7e4 fd79 	bl	80005f8 <__aeabi_dmul>
 801bb06:	a374      	add	r3, pc, #464	; (adr r3, 801bcd8 <atan+0x2b8>)
 801bb08:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb0c:	4606      	mov	r6, r0
 801bb0e:	460f      	mov	r7, r1
 801bb10:	f7e4 fd72 	bl	80005f8 <__aeabi_dmul>
 801bb14:	a372      	add	r3, pc, #456	; (adr r3, 801bce0 <atan+0x2c0>)
 801bb16:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb1a:	f7e4 fbb7 	bl	800028c <__adddf3>
 801bb1e:	4632      	mov	r2, r6
 801bb20:	463b      	mov	r3, r7
 801bb22:	f7e4 fd69 	bl	80005f8 <__aeabi_dmul>
 801bb26:	a370      	add	r3, pc, #448	; (adr r3, 801bce8 <atan+0x2c8>)
 801bb28:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb2c:	f7e4 fbae 	bl	800028c <__adddf3>
 801bb30:	4632      	mov	r2, r6
 801bb32:	463b      	mov	r3, r7
 801bb34:	f7e4 fd60 	bl	80005f8 <__aeabi_dmul>
 801bb38:	a36d      	add	r3, pc, #436	; (adr r3, 801bcf0 <atan+0x2d0>)
 801bb3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb3e:	f7e4 fba5 	bl	800028c <__adddf3>
 801bb42:	4632      	mov	r2, r6
 801bb44:	463b      	mov	r3, r7
 801bb46:	f7e4 fd57 	bl	80005f8 <__aeabi_dmul>
 801bb4a:	a36b      	add	r3, pc, #428	; (adr r3, 801bcf8 <atan+0x2d8>)
 801bb4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb50:	f7e4 fb9c 	bl	800028c <__adddf3>
 801bb54:	4632      	mov	r2, r6
 801bb56:	463b      	mov	r3, r7
 801bb58:	f7e4 fd4e 	bl	80005f8 <__aeabi_dmul>
 801bb5c:	a368      	add	r3, pc, #416	; (adr r3, 801bd00 <atan+0x2e0>)
 801bb5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb62:	f7e4 fb93 	bl	800028c <__adddf3>
 801bb66:	4642      	mov	r2, r8
 801bb68:	464b      	mov	r3, r9
 801bb6a:	f7e4 fd45 	bl	80005f8 <__aeabi_dmul>
 801bb6e:	a366      	add	r3, pc, #408	; (adr r3, 801bd08 <atan+0x2e8>)
 801bb70:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb74:	4680      	mov	r8, r0
 801bb76:	4689      	mov	r9, r1
 801bb78:	4630      	mov	r0, r6
 801bb7a:	4639      	mov	r1, r7
 801bb7c:	f7e4 fd3c 	bl	80005f8 <__aeabi_dmul>
 801bb80:	a363      	add	r3, pc, #396	; (adr r3, 801bd10 <atan+0x2f0>)
 801bb82:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb86:	f7e4 fb7f 	bl	8000288 <__aeabi_dsub>
 801bb8a:	4632      	mov	r2, r6
 801bb8c:	463b      	mov	r3, r7
 801bb8e:	f7e4 fd33 	bl	80005f8 <__aeabi_dmul>
 801bb92:	a361      	add	r3, pc, #388	; (adr r3, 801bd18 <atan+0x2f8>)
 801bb94:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb98:	f7e4 fb76 	bl	8000288 <__aeabi_dsub>
 801bb9c:	4632      	mov	r2, r6
 801bb9e:	463b      	mov	r3, r7
 801bba0:	f7e4 fd2a 	bl	80005f8 <__aeabi_dmul>
 801bba4:	a35e      	add	r3, pc, #376	; (adr r3, 801bd20 <atan+0x300>)
 801bba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bbaa:	f7e4 fb6d 	bl	8000288 <__aeabi_dsub>
 801bbae:	4632      	mov	r2, r6
 801bbb0:	463b      	mov	r3, r7
 801bbb2:	f7e4 fd21 	bl	80005f8 <__aeabi_dmul>
 801bbb6:	a35c      	add	r3, pc, #368	; (adr r3, 801bd28 <atan+0x308>)
 801bbb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bbbc:	f7e4 fb64 	bl	8000288 <__aeabi_dsub>
 801bbc0:	4632      	mov	r2, r6
 801bbc2:	463b      	mov	r3, r7
 801bbc4:	f7e4 fd18 	bl	80005f8 <__aeabi_dmul>
 801bbc8:	4602      	mov	r2, r0
 801bbca:	460b      	mov	r3, r1
 801bbcc:	4640      	mov	r0, r8
 801bbce:	4649      	mov	r1, r9
 801bbd0:	f7e4 fb5c 	bl	800028c <__adddf3>
 801bbd4:	4622      	mov	r2, r4
 801bbd6:	462b      	mov	r3, r5
 801bbd8:	f7e4 fd0e 	bl	80005f8 <__aeabi_dmul>
 801bbdc:	f1ba 3fff 	cmp.w	sl, #4294967295
 801bbe0:	4602      	mov	r2, r0
 801bbe2:	460b      	mov	r3, r1
 801bbe4:	d14b      	bne.n	801bc7e <atan+0x25e>
 801bbe6:	4620      	mov	r0, r4
 801bbe8:	4629      	mov	r1, r5
 801bbea:	f7e4 fb4d 	bl	8000288 <__aeabi_dsub>
 801bbee:	e72c      	b.n	801ba4a <atan+0x2a>
 801bbf0:	ee10 0a10 	vmov	r0, s0
 801bbf4:	4b53      	ldr	r3, [pc, #332]	; (801bd44 <atan+0x324>)
 801bbf6:	2200      	movs	r2, #0
 801bbf8:	4629      	mov	r1, r5
 801bbfa:	f7e4 fb45 	bl	8000288 <__aeabi_dsub>
 801bbfe:	4b51      	ldr	r3, [pc, #324]	; (801bd44 <atan+0x324>)
 801bc00:	4606      	mov	r6, r0
 801bc02:	460f      	mov	r7, r1
 801bc04:	2200      	movs	r2, #0
 801bc06:	4620      	mov	r0, r4
 801bc08:	4629      	mov	r1, r5
 801bc0a:	f7e4 fb3f 	bl	800028c <__adddf3>
 801bc0e:	4602      	mov	r2, r0
 801bc10:	460b      	mov	r3, r1
 801bc12:	4630      	mov	r0, r6
 801bc14:	4639      	mov	r1, r7
 801bc16:	f7e4 fe19 	bl	800084c <__aeabi_ddiv>
 801bc1a:	f04f 0a01 	mov.w	sl, #1
 801bc1e:	4604      	mov	r4, r0
 801bc20:	460d      	mov	r5, r1
 801bc22:	e764      	b.n	801baee <atan+0xce>
 801bc24:	4b49      	ldr	r3, [pc, #292]	; (801bd4c <atan+0x32c>)
 801bc26:	429e      	cmp	r6, r3
 801bc28:	da1d      	bge.n	801bc66 <atan+0x246>
 801bc2a:	ee10 0a10 	vmov	r0, s0
 801bc2e:	4b48      	ldr	r3, [pc, #288]	; (801bd50 <atan+0x330>)
 801bc30:	2200      	movs	r2, #0
 801bc32:	4629      	mov	r1, r5
 801bc34:	f7e4 fb28 	bl	8000288 <__aeabi_dsub>
 801bc38:	4b45      	ldr	r3, [pc, #276]	; (801bd50 <atan+0x330>)
 801bc3a:	4606      	mov	r6, r0
 801bc3c:	460f      	mov	r7, r1
 801bc3e:	2200      	movs	r2, #0
 801bc40:	4620      	mov	r0, r4
 801bc42:	4629      	mov	r1, r5
 801bc44:	f7e4 fcd8 	bl	80005f8 <__aeabi_dmul>
 801bc48:	4b3e      	ldr	r3, [pc, #248]	; (801bd44 <atan+0x324>)
 801bc4a:	2200      	movs	r2, #0
 801bc4c:	f7e4 fb1e 	bl	800028c <__adddf3>
 801bc50:	4602      	mov	r2, r0
 801bc52:	460b      	mov	r3, r1
 801bc54:	4630      	mov	r0, r6
 801bc56:	4639      	mov	r1, r7
 801bc58:	f7e4 fdf8 	bl	800084c <__aeabi_ddiv>
 801bc5c:	f04f 0a02 	mov.w	sl, #2
 801bc60:	4604      	mov	r4, r0
 801bc62:	460d      	mov	r5, r1
 801bc64:	e743      	b.n	801baee <atan+0xce>
 801bc66:	462b      	mov	r3, r5
 801bc68:	ee10 2a10 	vmov	r2, s0
 801bc6c:	4939      	ldr	r1, [pc, #228]	; (801bd54 <atan+0x334>)
 801bc6e:	2000      	movs	r0, #0
 801bc70:	f7e4 fdec 	bl	800084c <__aeabi_ddiv>
 801bc74:	f04f 0a03 	mov.w	sl, #3
 801bc78:	4604      	mov	r4, r0
 801bc7a:	460d      	mov	r5, r1
 801bc7c:	e737      	b.n	801baee <atan+0xce>
 801bc7e:	4b36      	ldr	r3, [pc, #216]	; (801bd58 <atan+0x338>)
 801bc80:	4e36      	ldr	r6, [pc, #216]	; (801bd5c <atan+0x33c>)
 801bc82:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801bc86:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 801bc8a:	e9da 2300 	ldrd	r2, r3, [sl]
 801bc8e:	f7e4 fafb 	bl	8000288 <__aeabi_dsub>
 801bc92:	4622      	mov	r2, r4
 801bc94:	462b      	mov	r3, r5
 801bc96:	f7e4 faf7 	bl	8000288 <__aeabi_dsub>
 801bc9a:	4602      	mov	r2, r0
 801bc9c:	460b      	mov	r3, r1
 801bc9e:	e9d6 0100 	ldrd	r0, r1, [r6]
 801bca2:	f7e4 faf1 	bl	8000288 <__aeabi_dsub>
 801bca6:	f1bb 0f00 	cmp.w	fp, #0
 801bcaa:	4604      	mov	r4, r0
 801bcac:	460d      	mov	r5, r1
 801bcae:	f6bf aed6 	bge.w	801ba5e <atan+0x3e>
 801bcb2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801bcb6:	461d      	mov	r5, r3
 801bcb8:	e6d1      	b.n	801ba5e <atan+0x3e>
 801bcba:	a51d      	add	r5, pc, #116	; (adr r5, 801bd30 <atan+0x310>)
 801bcbc:	e9d5 4500 	ldrd	r4, r5, [r5]
 801bcc0:	e6cd      	b.n	801ba5e <atan+0x3e>
 801bcc2:	bf00      	nop
 801bcc4:	f3af 8000 	nop.w
 801bcc8:	54442d18 	.word	0x54442d18
 801bccc:	bff921fb 	.word	0xbff921fb
 801bcd0:	8800759c 	.word	0x8800759c
 801bcd4:	7e37e43c 	.word	0x7e37e43c
 801bcd8:	e322da11 	.word	0xe322da11
 801bcdc:	3f90ad3a 	.word	0x3f90ad3a
 801bce0:	24760deb 	.word	0x24760deb
 801bce4:	3fa97b4b 	.word	0x3fa97b4b
 801bce8:	a0d03d51 	.word	0xa0d03d51
 801bcec:	3fb10d66 	.word	0x3fb10d66
 801bcf0:	c54c206e 	.word	0xc54c206e
 801bcf4:	3fb745cd 	.word	0x3fb745cd
 801bcf8:	920083ff 	.word	0x920083ff
 801bcfc:	3fc24924 	.word	0x3fc24924
 801bd00:	5555550d 	.word	0x5555550d
 801bd04:	3fd55555 	.word	0x3fd55555
 801bd08:	2c6a6c2f 	.word	0x2c6a6c2f
 801bd0c:	bfa2b444 	.word	0xbfa2b444
 801bd10:	52defd9a 	.word	0x52defd9a
 801bd14:	3fadde2d 	.word	0x3fadde2d
 801bd18:	af749a6d 	.word	0xaf749a6d
 801bd1c:	3fb3b0f2 	.word	0x3fb3b0f2
 801bd20:	fe231671 	.word	0xfe231671
 801bd24:	3fbc71c6 	.word	0x3fbc71c6
 801bd28:	9998ebc4 	.word	0x9998ebc4
 801bd2c:	3fc99999 	.word	0x3fc99999
 801bd30:	54442d18 	.word	0x54442d18
 801bd34:	3ff921fb 	.word	0x3ff921fb
 801bd38:	440fffff 	.word	0x440fffff
 801bd3c:	7ff00000 	.word	0x7ff00000
 801bd40:	3fdbffff 	.word	0x3fdbffff
 801bd44:	3ff00000 	.word	0x3ff00000
 801bd48:	3ff2ffff 	.word	0x3ff2ffff
 801bd4c:	40038000 	.word	0x40038000
 801bd50:	3ff80000 	.word	0x3ff80000
 801bd54:	bff00000 	.word	0xbff00000
 801bd58:	0801c968 	.word	0x0801c968
 801bd5c:	0801c948 	.word	0x0801c948

0801bd60 <fabs>:
 801bd60:	ec51 0b10 	vmov	r0, r1, d0
 801bd64:	ee10 2a10 	vmov	r2, s0
 801bd68:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801bd6c:	ec43 2b10 	vmov	d0, r2, r3
 801bd70:	4770      	bx	lr
 801bd72:	0000      	movs	r0, r0
 801bd74:	0000      	movs	r0, r0
	...

0801bd78 <floor>:
 801bd78:	ec51 0b10 	vmov	r0, r1, d0
 801bd7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bd80:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801bd84:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801bd88:	2e13      	cmp	r6, #19
 801bd8a:	ee10 5a10 	vmov	r5, s0
 801bd8e:	ee10 8a10 	vmov	r8, s0
 801bd92:	460c      	mov	r4, r1
 801bd94:	dc32      	bgt.n	801bdfc <floor+0x84>
 801bd96:	2e00      	cmp	r6, #0
 801bd98:	da14      	bge.n	801bdc4 <floor+0x4c>
 801bd9a:	a333      	add	r3, pc, #204	; (adr r3, 801be68 <floor+0xf0>)
 801bd9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bda0:	f7e4 fa74 	bl	800028c <__adddf3>
 801bda4:	2200      	movs	r2, #0
 801bda6:	2300      	movs	r3, #0
 801bda8:	f7e4 feb6 	bl	8000b18 <__aeabi_dcmpgt>
 801bdac:	b138      	cbz	r0, 801bdbe <floor+0x46>
 801bdae:	2c00      	cmp	r4, #0
 801bdb0:	da57      	bge.n	801be62 <floor+0xea>
 801bdb2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801bdb6:	431d      	orrs	r5, r3
 801bdb8:	d001      	beq.n	801bdbe <floor+0x46>
 801bdba:	4c2d      	ldr	r4, [pc, #180]	; (801be70 <floor+0xf8>)
 801bdbc:	2500      	movs	r5, #0
 801bdbe:	4621      	mov	r1, r4
 801bdc0:	4628      	mov	r0, r5
 801bdc2:	e025      	b.n	801be10 <floor+0x98>
 801bdc4:	4f2b      	ldr	r7, [pc, #172]	; (801be74 <floor+0xfc>)
 801bdc6:	4137      	asrs	r7, r6
 801bdc8:	ea01 0307 	and.w	r3, r1, r7
 801bdcc:	4303      	orrs	r3, r0
 801bdce:	d01f      	beq.n	801be10 <floor+0x98>
 801bdd0:	a325      	add	r3, pc, #148	; (adr r3, 801be68 <floor+0xf0>)
 801bdd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bdd6:	f7e4 fa59 	bl	800028c <__adddf3>
 801bdda:	2200      	movs	r2, #0
 801bddc:	2300      	movs	r3, #0
 801bdde:	f7e4 fe9b 	bl	8000b18 <__aeabi_dcmpgt>
 801bde2:	2800      	cmp	r0, #0
 801bde4:	d0eb      	beq.n	801bdbe <floor+0x46>
 801bde6:	2c00      	cmp	r4, #0
 801bde8:	bfbe      	ittt	lt
 801bdea:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801bdee:	fa43 f606 	asrlt.w	r6, r3, r6
 801bdf2:	19a4      	addlt	r4, r4, r6
 801bdf4:	ea24 0407 	bic.w	r4, r4, r7
 801bdf8:	2500      	movs	r5, #0
 801bdfa:	e7e0      	b.n	801bdbe <floor+0x46>
 801bdfc:	2e33      	cmp	r6, #51	; 0x33
 801bdfe:	dd0b      	ble.n	801be18 <floor+0xa0>
 801be00:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801be04:	d104      	bne.n	801be10 <floor+0x98>
 801be06:	ee10 2a10 	vmov	r2, s0
 801be0a:	460b      	mov	r3, r1
 801be0c:	f7e4 fa3e 	bl	800028c <__adddf3>
 801be10:	ec41 0b10 	vmov	d0, r0, r1
 801be14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801be18:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801be1c:	f04f 33ff 	mov.w	r3, #4294967295
 801be20:	fa23 f707 	lsr.w	r7, r3, r7
 801be24:	4207      	tst	r7, r0
 801be26:	d0f3      	beq.n	801be10 <floor+0x98>
 801be28:	a30f      	add	r3, pc, #60	; (adr r3, 801be68 <floor+0xf0>)
 801be2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be2e:	f7e4 fa2d 	bl	800028c <__adddf3>
 801be32:	2200      	movs	r2, #0
 801be34:	2300      	movs	r3, #0
 801be36:	f7e4 fe6f 	bl	8000b18 <__aeabi_dcmpgt>
 801be3a:	2800      	cmp	r0, #0
 801be3c:	d0bf      	beq.n	801bdbe <floor+0x46>
 801be3e:	2c00      	cmp	r4, #0
 801be40:	da02      	bge.n	801be48 <floor+0xd0>
 801be42:	2e14      	cmp	r6, #20
 801be44:	d103      	bne.n	801be4e <floor+0xd6>
 801be46:	3401      	adds	r4, #1
 801be48:	ea25 0507 	bic.w	r5, r5, r7
 801be4c:	e7b7      	b.n	801bdbe <floor+0x46>
 801be4e:	2301      	movs	r3, #1
 801be50:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801be54:	fa03 f606 	lsl.w	r6, r3, r6
 801be58:	4435      	add	r5, r6
 801be5a:	4545      	cmp	r5, r8
 801be5c:	bf38      	it	cc
 801be5e:	18e4      	addcc	r4, r4, r3
 801be60:	e7f2      	b.n	801be48 <floor+0xd0>
 801be62:	2500      	movs	r5, #0
 801be64:	462c      	mov	r4, r5
 801be66:	e7aa      	b.n	801bdbe <floor+0x46>
 801be68:	8800759c 	.word	0x8800759c
 801be6c:	7e37e43c 	.word	0x7e37e43c
 801be70:	bff00000 	.word	0xbff00000
 801be74:	000fffff 	.word	0x000fffff

0801be78 <scalbn>:
 801be78:	b570      	push	{r4, r5, r6, lr}
 801be7a:	ec55 4b10 	vmov	r4, r5, d0
 801be7e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801be82:	4606      	mov	r6, r0
 801be84:	462b      	mov	r3, r5
 801be86:	b99a      	cbnz	r2, 801beb0 <scalbn+0x38>
 801be88:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801be8c:	4323      	orrs	r3, r4
 801be8e:	d036      	beq.n	801befe <scalbn+0x86>
 801be90:	4b39      	ldr	r3, [pc, #228]	; (801bf78 <scalbn+0x100>)
 801be92:	4629      	mov	r1, r5
 801be94:	ee10 0a10 	vmov	r0, s0
 801be98:	2200      	movs	r2, #0
 801be9a:	f7e4 fbad 	bl	80005f8 <__aeabi_dmul>
 801be9e:	4b37      	ldr	r3, [pc, #220]	; (801bf7c <scalbn+0x104>)
 801bea0:	429e      	cmp	r6, r3
 801bea2:	4604      	mov	r4, r0
 801bea4:	460d      	mov	r5, r1
 801bea6:	da10      	bge.n	801beca <scalbn+0x52>
 801bea8:	a32b      	add	r3, pc, #172	; (adr r3, 801bf58 <scalbn+0xe0>)
 801beaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801beae:	e03a      	b.n	801bf26 <scalbn+0xae>
 801beb0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801beb4:	428a      	cmp	r2, r1
 801beb6:	d10c      	bne.n	801bed2 <scalbn+0x5a>
 801beb8:	ee10 2a10 	vmov	r2, s0
 801bebc:	4620      	mov	r0, r4
 801bebe:	4629      	mov	r1, r5
 801bec0:	f7e4 f9e4 	bl	800028c <__adddf3>
 801bec4:	4604      	mov	r4, r0
 801bec6:	460d      	mov	r5, r1
 801bec8:	e019      	b.n	801befe <scalbn+0x86>
 801beca:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801bece:	460b      	mov	r3, r1
 801bed0:	3a36      	subs	r2, #54	; 0x36
 801bed2:	4432      	add	r2, r6
 801bed4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801bed8:	428a      	cmp	r2, r1
 801beda:	dd08      	ble.n	801beee <scalbn+0x76>
 801bedc:	2d00      	cmp	r5, #0
 801bede:	a120      	add	r1, pc, #128	; (adr r1, 801bf60 <scalbn+0xe8>)
 801bee0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bee4:	da1c      	bge.n	801bf20 <scalbn+0xa8>
 801bee6:	a120      	add	r1, pc, #128	; (adr r1, 801bf68 <scalbn+0xf0>)
 801bee8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801beec:	e018      	b.n	801bf20 <scalbn+0xa8>
 801beee:	2a00      	cmp	r2, #0
 801bef0:	dd08      	ble.n	801bf04 <scalbn+0x8c>
 801bef2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801bef6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801befa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801befe:	ec45 4b10 	vmov	d0, r4, r5
 801bf02:	bd70      	pop	{r4, r5, r6, pc}
 801bf04:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801bf08:	da19      	bge.n	801bf3e <scalbn+0xc6>
 801bf0a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801bf0e:	429e      	cmp	r6, r3
 801bf10:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801bf14:	dd0a      	ble.n	801bf2c <scalbn+0xb4>
 801bf16:	a112      	add	r1, pc, #72	; (adr r1, 801bf60 <scalbn+0xe8>)
 801bf18:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bf1c:	2b00      	cmp	r3, #0
 801bf1e:	d1e2      	bne.n	801bee6 <scalbn+0x6e>
 801bf20:	a30f      	add	r3, pc, #60	; (adr r3, 801bf60 <scalbn+0xe8>)
 801bf22:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf26:	f7e4 fb67 	bl	80005f8 <__aeabi_dmul>
 801bf2a:	e7cb      	b.n	801bec4 <scalbn+0x4c>
 801bf2c:	a10a      	add	r1, pc, #40	; (adr r1, 801bf58 <scalbn+0xe0>)
 801bf2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bf32:	2b00      	cmp	r3, #0
 801bf34:	d0b8      	beq.n	801bea8 <scalbn+0x30>
 801bf36:	a10e      	add	r1, pc, #56	; (adr r1, 801bf70 <scalbn+0xf8>)
 801bf38:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bf3c:	e7b4      	b.n	801bea8 <scalbn+0x30>
 801bf3e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801bf42:	3236      	adds	r2, #54	; 0x36
 801bf44:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801bf48:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801bf4c:	4620      	mov	r0, r4
 801bf4e:	4b0c      	ldr	r3, [pc, #48]	; (801bf80 <scalbn+0x108>)
 801bf50:	2200      	movs	r2, #0
 801bf52:	e7e8      	b.n	801bf26 <scalbn+0xae>
 801bf54:	f3af 8000 	nop.w
 801bf58:	c2f8f359 	.word	0xc2f8f359
 801bf5c:	01a56e1f 	.word	0x01a56e1f
 801bf60:	8800759c 	.word	0x8800759c
 801bf64:	7e37e43c 	.word	0x7e37e43c
 801bf68:	8800759c 	.word	0x8800759c
 801bf6c:	fe37e43c 	.word	0xfe37e43c
 801bf70:	c2f8f359 	.word	0xc2f8f359
 801bf74:	81a56e1f 	.word	0x81a56e1f
 801bf78:	43500000 	.word	0x43500000
 801bf7c:	ffff3cb0 	.word	0xffff3cb0
 801bf80:	3c900000 	.word	0x3c900000

0801bf84 <_init>:
 801bf84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bf86:	bf00      	nop
 801bf88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bf8a:	bc08      	pop	{r3}
 801bf8c:	469e      	mov	lr, r3
 801bf8e:	4770      	bx	lr

0801bf90 <_fini>:
 801bf90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bf92:	bf00      	nop
 801bf94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bf96:	bc08      	pop	{r3}
 801bf98:	469e      	mov	lr, r3
 801bf9a:	4770      	bx	lr
